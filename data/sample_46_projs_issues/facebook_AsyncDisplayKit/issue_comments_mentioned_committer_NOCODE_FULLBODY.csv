issue_num,datetime,body,login,mention_login
3222,2017-03-28 02:02:37,"@Adlai-Holler Sorry about that, I made some changes, could you please review it again and thanks for your time.",CaptainTeemo,Adlai-Holler
3210,2017-03-24 05:37:09,Just ran into this earlier today. Thanks @rcancro for fixing! ✋ ,connor,rcancro
3201,2017-03-23 01:07:39,"@Adlai-Holler create viewController extens ASViewController， overwrite  init Method
- (instancetype)init {
    UICollectionViewFlowLayout *fLayout = [[UICollectionViewFlowLayout alloc] init];
    fLayout.minimumLineSpacing = 10;
    fLayout.minimumInteritemSpacing = 10;
    fLayout.estimatedItemSize = CGSizeMake(100, 50);
    ASCollectionNode *mainNode = [[ASCollectionNode alloc] initWithCollectionViewLayout:fLayout];
    if (self = [super initWithNode:mainNode]) {
        mainNode.dataSource = self;
        mainNode.delegate = self;
    }
    return self;
}

ASCollectionDataSource Method

- (ASCellNodeBlock)collectionNode:(ASCollectionNode *)collectionNode nodeBlockForItemAtIndexPath:(NSIndexPath *)indexPath {
    return ^ASCellNode *() {
        ASTextCellNode *nodel = [[ASTextCellNode alloc] init];
        nodel.text = @""aaaa"";
        return nodel;
    };
}

 self.navigationController pushViewController   this method is OK;
but  self.navigationController popViewControllerAnimated this method error
",hamewang,Adlai-Holler
3201,2017-03-23 06:41:56,@Adlai-Holler  [https://github.com/naveen7b/AsyncDisplayKit-Example](link) link for the example project. This project will work fine if the Async display kit version is before 2.2 and it is crashing for version 2.2. Thanks @naveen7b  for the sample code.,Rokimkar,Adlai-Holler
3181,2017-03-15 19:03:17,"@maicki LGTM, merge away!",nguyenhuy,maicki
3178,2017-03-15 21:45:38,"@appleguy Not dug too much into this but gave this branch a try to see if we saw any improvements with seeing Couldn't find 'visible' supplementary element of kind %@ at index path %@ in map %@ come up within Buffer. 

When using this branch it looks like our ASCellNode backed supplementary nodes no longer display. They display correctly when using ASDK from master.",ay8s,appleguy
3172,2017-03-14 12:33:38,@maicki Sounds good to me. ,nguyenhuy,maicki
3171,2017-03-13 15:35:58,"@maicki Thanks and don't worry, I added it myself LOL. Will merge when CI finishes.",nguyenhuy,maicki
3164,2017-03-11 08:35:20,"@ay8s Sorry for the hassle! I've submitted a PR that should fix this. On the upside, imho, the button is a bit cleaner without the text :P",nguyenhuy,ay8s
3163,2017-03-11 07:37:26,@ay8s are you seeing flashes similar to [this](https://github.com/facebook/AsyncDisplayKit/issues/2536#issuecomment-285351461)? Please try disabling placeholders of all cell nodes.,nguyenhuy,ay8s
3163,2017-03-12 07:17:26,@nguyenhuy Exactly like that however when setting neverShowPlaceholders to YES on update nodes I seem to see the same behavior where some removals will animate with animation and others with a flash.,ay8s,nguyenhuy
3163,2017-03-13 09:19:37,"@ay8s I'd appreciate some more details. What updates (i.e removals or reloads) are issued to your collection view? One way to get this information is printing out the change set provided in `-ASDataController:updateWithChangeSet:`. I'm also interested in the `animated` BOOL of each change set.

On the other hand, if you could modify an example (e.g ASDKgram) to produce the same problem, I can jump on it and start debugging right away. Thanks!",nguyenhuy,ay8s
3163,2017-03-13 11:07:18,"@nguyenhuy After Setting neverShowPlaceholders to YES doesn't work in collectionNode.
I have uploaded the demo video.
[Flashing-bug.mov.zip](https://github.com/facebook/AsyncDisplayKit/files/837983/Flashing-bug.mov.zip)
I reproduced this issue in simple example
[Flashing-Bug.zip](https://github.com/facebook/AsyncDisplayKit/files/837973/Flashing-Bug.zip)
",davitPiloyan93,nguyenhuy
3163,2017-03-14 16:35:12,"Cool, thanks @ay8s!",nguyenhuy,ay8s
3162,2017-03-11 15:29:40,"@appleguy Did you have a change to re-test that? I couldn't reproduce that within terminal, Xcode or on CI ...",maicki,appleguy
3162,2017-03-22 16:30:29,@appleguy I will close this issue for now as we cannot reproduce it. If it comes up again please reopen. Thanks!,maicki,appleguy
3151,2017-03-09 14:10:29,"@flovouin Thanks for reporting. I added a unit test that triggers that assertion, although it may not be your exact use case. Please re-test once #3153 is merged.",nguyenhuy,flovouin
3142,2017-03-06 15:57:48,"@EviluS @maicki Both of you answered this very well, thank you! I like the `didEnterVisibleState` method more for now, but glad to learn about the `ASPagerDelegate` also.

Closing issue. Thanks again.",aaronash,maicki
3134,2017-03-04 05:02:57,"@Adlai-Holler I have also had issues with 0, 0 layouts.

It does seem important though that this method behaves consistently, e.g. a user should not have to know if the layout pass has occurred for waitUntilAllOperationsAreCommitted to ""work"".  We really should rename this method, but I would guess the desired semantics are like ""flush"": ""ensure UIKit is completely up to date with the current state of the asyncDataSource, whether or not initial load has happened, and including any edit operations recently performed""",appleguy,Adlai-Holler
3134,2017-03-04 19:00:49,"@appleguy I agree. My current estimate is, that it should trigger the initial data load to start if needed, but otherwise _not_ trigger a layout pass.",Adlai-Holler,appleguy
3134,2017-03-04 21:46:42,"@Adlai-Holler: thanks for working on this. 

I forced a layout pass in '-waitUntilAllUpdatesAreCommitted' to avoid a breaking behavioral change in that method. Many users have used it as a way to ensure all updates were ""flushed"" and the collection/table is up-to-date with its data source. Our tests also relies on this behavior. But now that we do native reloadData, that expectation won't be true until the next layout pass happens.

Renaming is probably a great idea. I'd prefer a breaking API change that the compiler will pick up over a silent breaking behavioral change.

Edit: sorry I misspelled your name, Adlai!",nguyenhuy,Adlai-Holler
3130,2017-03-04 05:13:40,"@nguyenhuy you have an amazing history of seminal contributions to AsyncDisplayKit, including the original ASLayoutSpec and crucial advancements in ASDataController.  This change, along with preparatory work around flex-wrap and concurrent layout in stacks, continues this incredible tradition!

I've dreamt about achieving something like this for years, but it has never been practical due to the huge amount of work behind it.  Along with the equally necessary work from @Adlai-Holler on the collection and @maicki on the layout system, you all have made that dream a reality for thousands of iOS developers!

Flat-out inspiring.  Thank you, @maicki, @Adlai-Holler, @nguyenhuy, and Pinterest for sharing your awesome talents with the community.",appleguy,nguyenhuy
3130,2017-03-24 20:48:46,@Adlai-Holler @appleguy I've updated most of the code in this PR to implement the second version of this async collection layout API. More details are explained in [the description of this PR](https://github.com/facebook/AsyncDisplayKit/pull/3130#issue-211559304). Please have another look!,nguyenhuy,appleguy
3128,2017-03-06 08:58:30,"Hello @maicki , sorry for my late response.

Fonts are these:


More info in sample app.",Kaspik,maicki
3127,2017-03-03 10:16:53,"Thanks for your reply @Adlai-Holler !

Yes sorry about that, I didn't make myself clear but I figured that `shouldBatchFetch` would be called every time. What I meant is that I have no real way of knowing whether new items are available, except by making a call to the remote service. And apart from these inconvenient edge cases, the existing batch fetching logic seems to be the way to do just that, and suits my needs perfectly. In the general case, when the user scrolls down, a new batch fetch is triggered only once (if needed), I make the call to the remote service (which may or may not return new items), and voila !

Now concerning the two edge cases, do you think it is the developper's responsibility to take care of this in `shouldBatchFetch` or could the logic in `ASBatchFetching` be changed?
- A solution to avoid spamming the remote service would be to ensure a delay between calls. This might be needed anyway depending on the application, and it is clearly the developper's job to implement that.
- However a complementary solution would be to check whether the batch fetch was triggered during a bounce animation (and disable the repeated calls). This implies checking `contentInset` and `contentOffset` of the scroll view. It would seem that this would be more adequate inside `ASBatchFetching`, and in my opinion would be a legitimate improvement. :-)",flovouin,Adlai-Holler
3127,2017-03-21 13:57:30,"Hey guys,

So currently I've simply solved the problem by adding the following logic to `shouldBatchFetch`:



- `isScrollingUp` is necessary even though the check already exists in the current `ASDisplayShouldFetchBatchForContext` implementation because it is bypassed when `hasSmallContent` is `YES` (the second case of my original issue). This could simply be solved by moving the `isScrollingTowardHead` check above the small content check.
- `isBouncingAtTop` is also pretty much self-explanatory and solves the first case of the original issue. This could be added to ASDK's logic, although the `contentInset` should be forwarded to `ASDisplayShouldFetchBatchForContext`.

It shouldn't be too hard to add this in `ASDisplayShouldFetchBatchForContext`, and I feel that it would be at its place in the batch fetching logic. What do you guys ( @appleguy @Adlai-Holler @maicki ) think? Is this PR-worthy? I don't mind taking care of it if you think it is, just didn't want to work on it before asking you first.

Thanks,",flovouin,Adlai-Holler
3126,2017-03-02 16:56:27,"Hey @iOSUser110 as @hannahmbanana mentioned our documentation has all of the sample code in Swift too: http://asyncdisplaykit.org/docs/button-node.html

Furthermore here is a quick snippet how to initialize and add an `ASButtonNode` to another node:

",maicki,hannahmbanana
3125,2017-03-04 20:52:25,Good enough for me. Thanks @eanagel for the reply – we definitely don't call `indexPathsForVisibleRows` inside `willDisplayCell:` anymore. Cheers!,Adlai-Holler,eanagel
3121,2017-03-02 00:36:17,@maicki I never thought I'd live to see the day you'd write code like this ;),garrettmoon,maicki
3121,2017-03-02 16:40:47,"Ok, maybe this get's slowly out of hand, but @flovouin is right and it's also necessary for `UIVisualEffectView`. I updated the diff and will merge after CI passes.

Furthermore let's close #2762 as it seems this will resolves this.",maicki,flovouin
3116,2017-03-02 09:07:03,"@appleguy Yes, the idea has been haunted me at nights since then! We hosted a performance day yesterday and this is the first thing came to my mind! Definitely let me know your findings. 

My profiling showed that laying out a stack on main is so fast now, it makes async transition a tiny bit less relevant and buys us more time to overhaul the transition system.",nguyenhuy,appleguy
3114,2017-03-02 19:55:59,"@maicki Those are private categories which I don't understand why they are not public. It would be nice if they were public.  Anyways, I found these public C-style functions available in `ASDisplayNodeExtras.h`

",skensell,maicki
3112,2017-03-14 16:22:24,"@flovouin Could you take a stab on it and submit a PR? We would appreciate it, Thanks!",maicki,flovouin
3109,2017-03-01 19:12:27,"@Adlai-Holler How does `NSCache/libcache` use this to drive the eviction, so in what level do they what?",maicki,Adlai-Holler
3109,2017-03-01 19:30:59,"@maicki Good question, I don't know which levels they use and how they react, only that they create a dispatch source of this kind to trigger eviction passes. We could find out!",Adlai-Holler,maicki
3109,2017-03-01 19:41:04,@Adlai-Holler I would definitely be in the game to find that out ;),maicki,Adlai-Holler
3109,2017-03-16 15:38:31,"@garrettmoon I just tested it out a bit. And it seems the notification from GCD arrives later than `UIApplicationDidReceiveMemoryWarningNotification` or `-applicationDidReceiveMemoryWarning`. That said it was just a quick couple of tests within the Simulator and on an iPod Touch and this could just be a hiccup as most of them are working on top of the notification system.

I looked into our code base and currently we ""only"" use it once in ASDK and once in PINCache, so don't know if this would benefit us in any case and just add some more custom code we have to handle.",maicki,garrettmoon
3107,2017-03-01 01:58:00,"@garrettmoon  in theory, this code should probably call Seth needs display… Let's not add that for now though, as it would almost certainly have performance implications?

You could check if there is an overridden display method in that case though, perhaps that is safe to do ... would be a lot less costly than trampolining a call for every node.

 I assume we set this only through the instance variable during initialization, and if there are no other calls to the setter property in the framework, it is probably safe for performance to add the gated check. ",appleguy,garrettmoon
3094,2017-02-27 19:29:16,@Adlai-Holler great! gonna update the search example to use these instead.,MarvinNazari,Adlai-Holler
3093,2017-02-27 19:27:43,@nguyenhuy awesome! gonna try it later tonight.,MarvinNazari,nguyenhuy
3093,2017-02-27 20:03:20,"@nguyenhuy so the crash is gone, but now it dosent fetch right when i set the url to videoNode after some delay, if you update the sample project in the issue #3042 to this you see what is happening (scroll up and down a little bit)
this happens if i do it in the `didLoad()` too

",MarvinNazari,nguyenhuy
3093,2017-03-01 19:09:25,@MarvinNazari It seems like that this even worked before was pure luck. Looking at the code if you not initialize the player with an asset and set an `assetURL` directly to the `videoNode` it will be blown away in `didEnterPreloadState` as the asset is unequal the asset from the `videoNode`. One way we could go around this is to check if `_asset` is nil in `didEnterPreloadState` or use a delegate method of `ASVideoNode` that will recalled if the asset is loaded and set `_asset` to the asset of the `ASVideoNode`. cc @nguyenhuy ,maicki,nguyenhuy
3093,2017-03-01 19:09:25,@MarvinNazari It seems like that this even worked before was pure luck. Looking at the code if you not initialize the player with an asset and set an `assetURL` directly to the `videoNode` it will be blown away in `didEnterPreloadState` as the asset is unequal the asset from the `videoNode`. One way we could go around this is to check if `_asset` is nil in `didEnterPreloadState` or use a delegate method of `ASVideoNode` that will recalled if the asset is loaded and set `_asset` to the asset of the `ASVideoNode`. cc @nguyenhuy ,maicki,MarvinNazari
3093,2017-03-03 17:41:51,"@MarvinNazari With the current API and implementation of `ASVideoPlayerNode`, you're not supposed to grab its video node and change the asset that way. So @maicki is right that it depended on luck to work.

Could you explain your use case a bit more? Why don't you set `assetURL` to `ASVideoPlayerNode` in `init`? Do you have the URL available by that time?",nguyenhuy,maicki
3093,2017-03-03 17:41:51,"@MarvinNazari With the current API and implementation of `ASVideoPlayerNode`, you're not supposed to grab its video node and change the asset that way. So @maicki is right that it depended on luck to work.

Could you explain your use case a bit more? Why don't you set `assetURL` to `ASVideoPlayerNode` in `init`? Do you have the URL available by that time?",nguyenhuy,MarvinNazari
3093,2017-03-03 17:47:18,@nguyenhuy yeah so we don't have URL available at that time for some of our videos (not all of them) so we need to do some small fetching/parsing first then we can set the URL,MarvinNazari,nguyenhuy
3093,2017-03-03 18:07:54,"@MarvinNazari OK, then we need to add new asset (and maybe assetURL) setters to ASVideoPlayerNode. The implementations of these methods would simply update the appropriate ivar and then forward to ASVideoNode if the player is already in preload state. Do you have time to put up another PR for it? I can get to it maybe next week but maybe you need it before that. ",nguyenhuy,MarvinNazari
3093,2017-03-03 18:18:59,"@nguyenhuy I don't actually have time to fix it (as i'm going of work for 2 weeks from today).
So if you have time to fix it next week, that would be awesome! if not i can try to put up a PR when im back.",MarvinNazari,nguyenhuy
3093,2017-03-05 14:37:48,"Closing in favor of #3135. Thanks, @maicki!",nguyenhuy,maicki
3092,2017-02-27 18:19:39,"looks good, thanks for making this change @nguyenhuy",yans,nguyenhuy
3082,2017-02-28 03:14:53,"@Adlai-Holler ha, awesome cleanup!  Massive velocity :).

I also ended up doing this the day after filing...not sure which change is more efficient, but let's compare notes.",appleguy,Adlai-Holler
3080,2017-02-26 00:06:53,"@Adlai-Holler As you fiddle around with the project file anyway, could you move the `Base` folder from the root directory into `AsyncDisplayKit` folder please.",maicki,Adlai-Holler
3080,2017-02-26 00:32:25,"@maicki Good call. I went ahead and made some more file shuffles:
- `/AsyncDisplayKit` -> `/Source`
- `/AsyncDisplayKitTests` -> `/Tests`
- `/AsyncDisplayKitTestHost` -> `/Test/TestHost`",Adlai-Holler,maicki
3080,2017-03-02 14:33:58,@Adlai-Holler  Hey! Have you pushed new 2.2 podspec to the trunk?,3a4oT,Adlai-Holler
3080,2017-03-02 14:38:23,@nguyenhuy thanks. Do we know a release date?,3a4oT,nguyenhuy
3076,2017-02-28 11:56:55,@Adlai-Holler this PR makes #2616 really easy to implement.,MarvinNazari,Adlai-Holler
3074,2017-02-26 02:04:05,"@QuynhNguyen Yes, thanks for filing this.  I was about to file an issue myself too, as I'm encountering something very similar with supplementary nodes (in my case, crashing).

@nguyenhuy Fortunately this can be reproduced right away with examples/CustomCollectionView.  I suggest you have my PR applied just to make sure you don't hit the unnecessary assertions at a stage earlier than the actual crash: (this is now in master, so just pull to latest) https://github.com/facebook/AsyncDisplayKit/pull/3079

The attached .txt has some debug logs that I found helpful.  Here's the issue:

- The data source is queried correctly, and does return supplementary nodes for everything that it should.
- These are put into an ASMutableElementMap and I believe this does make it to _pendingMap (but it's a bit hard to tell since it is copied)
- However, at the time of the crash, the _visibleMap object that is being queried by UIKit does not have _any_ supplementary elements in it...even though we've reported that some exist to UIKit.

I think it is possible that the async sizing pass for the cells somehow doesn't gate the collection becoming aware of the supplementary nodes earlier, before the sizing pass is done.

@nguyenhuy @Adlai-Holler thank you so much for all the work on ASDataController!  It is very architecturally impressive, and truly represents a successful new era of one of the most crucial components in the framework.  These bugs are likely to be small fixes.

[SupplementaryMapLogging.txt](https://github.com/facebook/AsyncDisplayKit/files/801686/SupplementaryMapLogging.txt)
",appleguy,nguyenhuy
3074,2017-02-27 17:08:19,"Thanks @QuynhNguyen, @appleguy, and @nguyenhuy! Resolved in the linked PR.",Adlai-Holler,nguyenhuy
3074,2017-02-27 17:08:19,"Thanks @QuynhNguyen, @appleguy, and @nguyenhuy! Resolved in the linked PR.",Adlai-Holler,appleguy
3068,2017-03-02 13:19:42,"Hey, @garrettmoon. Does it mean that I can pull  from just  ? Because I can't.",3a4oT,garrettmoon
3067,2017-02-23 22:32:18,"Thanks for thinking through this one @Adlai-Holler. 👍 

This sounds great for us as we often have minor changes to cells when updates are removed or reordered in Buffer queues. When that occurs then we usually have to reload the whole cell when really the only visual change is the time label for when the post is scheduled to go out. ",ay8s,Adlai-Holler
3056,2017-03-02 20:01:24,"@jaichaudhry Good points, thanks for reporting! We can definitely improve our scroll view state tracking here.

I wonder if a more direct solution would be to add:



Does that fix your use case?

In the future, we should probably replace `_deceleratingVelocity: CGPoint` with `_animatingDirection: ASScrollDirection` and then we can set that in `scrollToItemAtIndexPath:`, `willEndDragging:` and many other methods.",Adlai-Holler,jaichaudhry
3056,2017-03-03 05:56:46,@Adlai-Holler Yes that should solve the issue of batch fetch not getting called since the _deceleratingVelocity would be reset in scrollViewDidEndDecelerating:,jaichaudhry,Adlai-Holler
3054,2017-02-21 18:42:13,"@appleguy Here you go. Very weird error though:


Btw, can we somehow improve the CI situation here? Like having another public CI that might be slower but accessible to everyone? It might not worth doing now but later once we own the repo.",nguyenhuy,appleguy
3054,2017-02-22 00:47:04,@nguyenhuy It seems to be succeeding now!  @Adlai-Holler thanks much for the review :),appleguy,nguyenhuy
3053,2017-02-21 08:30:24,"@appleguy I think the image I included may be misleading you -- the size of the cell and the node are the same. The outermost gray in the image is the background of the `ASCollectionNode`. Of concern here is the inner 90 degree corner on `_ASCollectionViewCell` and the rounded corner of its node within (which has the same frame).

Thanks for the advice on the corner radius. I do usually try other methods, but sometimes I _cut corners_ and just use `cornerRadius` when performance isn't a huge concern. ",skensell,appleguy
3052,2017-02-22 03:09:59,Work fine. Thanks @maicki ,buiminhhuy,maicki
3051,2017-02-21 17:21:49,"Thanks @MarvinNazari for helping out.

@bevbomb I will close this issue for now as it seems you got the right direction. Please reopen if you don't think so.  Thanks!",maicki,MarvinNazari
3051,2017-02-22 22:27:36,@maicki This is still broken for Carthage user,QuynhNguyen,maicki
3050,2017-02-21 07:37:55,"@maicki great summary of the current situation.  This was a tricky and sad thing to discover when you were creating the modern 2.0 layout API.  I agree 100% with deprecating this method!

I do think there should be at least one major release where the method remains implemented, but internally just uses the workaround you wrote (constrainedSizeForCalculatedLayout, layoutThatFits, layout.size).  After users have a short period to make the changes, then it could be removed entirely.

This suggestion is based on seeing a rapid pace of users still upgrading from 1.x to 2.x; I'm helping folks with the process at least a couple times a week.  It's a huge incentive for people to upgrade when they can stabilize their app on the new version first, and then fix all the deprecations in a separate pass.

Congrats to the team on achieving such a seamless upgrade for a major framework!!!  Remember AFNetworks' breaking updates that people could never get past? :-P",appleguy,maicki
3050,2017-02-21 17:23:43,@appleguy Totally agree! We would slowly deprecate it.,maicki,appleguy
3049,2017-02-21 13:40:53,"
@appleguy thanks very much! 
Because the file is too big to upload, I upload it to dropbox, please refer to :https://www.dropbox.com/s/v0ng2z1b15lrnde/collectionnode.zip?dl=0
In the video
First. you can see, when I pull down to get new data, the collection node will flash the items even the item not change(I just update data, and call reloadDataImmediately)

Second, when I scrolling down, in willBeginBatchFetchWithContext, I load the data from server, and then just call 
[self.items addObjectsFromArray:items];
            [self.collectionNode performBatchAnimated:YES updates:^{
                [self.collectionNode insertItemsAtIndexPaths:indexPaths];
            } completion:nil];
the fps will drop to 50,some times to 45.

I also attach Time Profile for your reference. ",mosquitodu,appleguy
3049,2017-02-23 03:13:18,"@appleguy Thanks your information,  I found some heavy task on main thread in our project, I will rewrite this task, and test it again. thank you very much.",mosquitodu,appleguy
3047,2017-02-27 20:52:47,@MarvinNazari I see the issue and I've filed it as https://github.com/facebook/AsyncDisplayKit/issues/3095 . Thanks for this diff – merging!,Adlai-Holler,MarvinNazari
3045,2017-02-21 11:31:32,"@appleguy Thanks, it looks like `neverShowPlaceholders` is what I was looking for.  Interestingly, setting it on the `ASViewController` node didn't have any effect, but setting it on the individual `ASCellNode`s did work for me.

Another related issue, in upgrading to 2.1 my rootViewController transitions required tweaking:

Without the `-layoutIfNeeded` call, some strange intermediate form of the view was displayed which was not layed out properly. I dunno if I should create a separate issue for this.",skensell,appleguy
3042,2017-02-21 22:35:57,@MarvinNazari Thanks for reporting this! Assigning this to myself and I'll investigate this as soon as I can.,nguyenhuy,MarvinNazari
3042,2017-02-21 23:06:19,@MarvinNazari Thanks for reporting and @nguyenhuy for looking into that. We probably should defer setting the asset to `didLoad` if it's not safe to set it on a background thread.,maicki,nguyenhuy
3042,2017-02-21 23:06:19,@MarvinNazari Thanks for reporting and @nguyenhuy for looking into that. We probably should defer setting the asset to `didLoad` if it's not safe to set it on a background thread.,maicki,MarvinNazari
3040,2017-02-18 02:27:53,Thanks @garrettmoon for addressing and @ay8s for reporting!,maicki,garrettmoon
3040,2017-02-18 02:27:53,Thanks @garrettmoon for addressing and @ay8s for reporting!,maicki,ay8s
3039,2017-02-21 06:23:52,"I was looking at this code recently with some of the Yoga stuff (setting flattened on the layouts created that way, since they are already flat).  It's definitely key for performance, which IIRC is the main reason the flattened flag was added (maybe we should add comments internal documentation about this, since it's unusual?)

The great thing about ASLayout is that it provides an incredibly powerful & useful hook for both developers' own custom layouts (calculateLayoutThatFits:, etc) and entire layout engines to be integrated.  I bet we could even use it in the new ""ASCollectionLayout"" (or ASLayoutManager) class.

Because ASLayout is the #1 most frequently created ASDK object, it's a worthwhile pursuit to make it as fast as possible. The good news is that after the perf work that @maicki did last year, ASLayout is now quite well optimized!",appleguy,maicki
3039,2017-02-21 19:53:59,"@maicki and I discussed and agreed on the changes in this PR before he pushed it, so I accepted it a bit too fast. 

I think we're looking at 2 different flags here:
- `visited` flag set to a context and used solely by the traversal algorithm to avoid processing a context multiple times.
- `isFlattened` flag **persistently** set to an ASLayout object to indicate that it doesn't contain non-node-based layout elements.

The fact that we merged these 2 flags into one `isFlattened` flag is problematic because as @maicki said, ASLayout objects now can't be reused.

After looking at this method again, I started to wondering if we need either of these flags at all! Please correct me if I'm wrong, but I think `visited` is not need because of the way our DFS algorithm is being implemented. `isFlattened` is not used anywhere, even though the flag itself makes perfect sense. So I've been testing a slightly different implementation of this method against the test suite proposed in this PR and ASDKgram. It works perfectly so far.



Let me know what you all think.",nguyenhuy,maicki
3034,2017-02-15 15:26:07,"@fruitcoder ~~I may be completely wrong but isn't `constrainedSize.min` supposed to be `CGSizeZero`. You could try using the `max.width` for your layout.~~

*Correcting myself, sorry.*



But if you use an `ASCellNode` as a subnode of another `ASCellNode` this will probably not apply. Try checking the `max` value.",EviluS,fruitcoder
3034,2017-02-16 09:34:25,"@fruitcoder This is strange. I recreated your case and it works fine. Here is my implementation.

`Implementation of ASViewController Subclass`


`Implementation of ASCellNode subclass (Image cell)`



`Implementation of the text cell`


![simulator screen shot feb 16 2017 12 09 00 pm](https://cloud.githubusercontent.com/assets/749280/23016862/c03a4d18-f440-11e6-95e3-9e68b4861a60.png)
",EviluS,fruitcoder
3034,2017-02-16 10:10:36,@fruitcoder I updated my last comment with the changes and it still works the same as expected. ,EviluS,fruitcoder
3034,2017-02-16 14:00:42,@fruitcoder I found the problem. You are calling `node.reloadData()` in `viewDidLoad()`. There is no need to call `reloadData()` for the initial load of the table node.,EviluS,fruitcoder
3034,2017-02-17 09:26:27,@fruitcoder Would you like to PM me in Slack and discuss the issue? (my nick is `gpetrov` there),EviluS,fruitcoder
3029,2017-02-14 17:43:18,"Agree with @MarvinNazari 

@hannahmbanana Can we move them out of the repo to some other image hosting place or into our documentation repo and link to it from there?",maicki,MarvinNazari
3029,2017-02-21 07:39:44,"@MarvinNazari thanks for filing this.  I noticed it when they went in, but since they were already committed, figured it wasn't worth dealing with.

Does anyone know how to actually scrub the files from history?  I don't think deleting them from the repo will be enough to remove them from the clone, as Git has to be able to regenerate them if an older commit is checked out.",appleguy,MarvinNazari
3029,2017-02-21 08:09:42,@appleguy maybe [this](https://help.github.com/articles/removing-sensitive-data-from-a-repository/#using-the-bfg) can help? I haven't try it personally.,MarvinNazari,appleguy
3029,2017-02-21 17:25:23,"@hannahmbanana Would you be able to tackle that this week:

- Move the gifs to a different place
- Link to new place where necessary
- Remove from history

Thanks!",maicki,hannahmbanana
3027,2017-02-14 17:07:00,"@MarvinNazari, yes I saw, but if can help me convert all example objective-c to swift 3. I am difficult when implement base on Objective-C example",buiminhhuy,MarvinNazari
3026,2017-02-15 05:17:26,"@yxztj awesome, thanks for investigating this issue and then also guiding your work via profiling!  An allstar contributor :), really appreciate how you've helped out over time.

Both @Adlai-Holler and @maicki are the de-facto experts on ASTextNode these days, so I'll leave it to them to make the call on safety of taking this change.  However, we're all interested in seeing improvements to a few nagging correctness issues that still affect the component and so will seriously consider any PRs in this area.

One last suggestion: consider adding this to examples_extra/TextStressTest?  Not a blocker for this PR, just a suggested followup.  I've been trying to collect our known ASTextNode bugs there and then the fixes so we can run the app to check them.  Of course it would be better to add snapshot tests for all of these, but either one would be a great step.",appleguy,yxztj
3026,2017-02-15 19:54:53,"Great work @yxztj, thanks!",Adlai-Holler,yxztj
3019,2017-03-14 20:39:36,"@maicki Ok, will check it ASAP :)",Kuluum,maicki
3019,2017-03-17 14:46:43,@maicki Checked this fix in production code with real case that I have. It seems to be worked fine now! Great!,Kuluum,maicki
3008,2017-02-10 15:05:21,"@Adlai-Holler Awesome, thank you! And no rush of course. :) 

Regarding the Jenkins failure, totally happy to fix that, only I'm admittedly not completely sure what's going wrong there. Seemingly the `#import`s are messing up; did I expose `ASLayoutManager` incorrectly? (I publicized it in the podspec and added it to the aggregate header file.) I don't believe I touched `ASControlNode`, though…",christianselig,Adlai-Holler
3008,2017-02-14 01:12:38,"@Adlai-Holler Totally fair, reading through some of the comments in the TextKit classes I can totally see where you're coming from. 😛 Any idea when you'd look to doing this? 3.0? Later? If it's decently near, I don't mind leaning on the `will/DidDisplayNodeWithRederingContext` blocks instead.

Two quick questions:

- With `will/didDisplayNodeContentWithRenderingContext`, I find drawing in `will` results the additional drawing being cleared when the text is drawn. `will` is preferable as it allows me to put the drawing underneath the text. `did` works, however, but I need to change the context's blend mode, not sure if that's optimal. You can see what I'm talking about by adding something like this to `init` in the example project I attached:

`

- If you still feel like it's worth putting this in in the interim, I'm not sure I understand your suggestion re: designated initializer. What does exposing that property do if it's not writable? Is it intended for subclassing?",christianselig,Adlai-Holler
3006,2017-02-10 04:58:29,@hannahmbanana Thank you. It seems that UICollectionViewFlowLayout warnings come in 2.1 but not 2.0. Not sure what could be wrong in the flow layout setup. I will try out ASPagerNode and check the issue you referenced. Will keep you updated. ,fawadsuhail,hannahmbanana
3006,2017-03-05 08:45:09,@Adlai-Holler Apologies for the late reply. Yes the bug I was facing was exactly the one shown in the PR. I just installed 2.2 and its working. Problem solved! Thanks a ton!,fawadsuhail,Adlai-Holler
2998,2017-02-07 21:35:24,@MarvinNazari which thread crashed? What was thrown? Can you put up a sample project?,garrettmoon,MarvinNazari
2998,2017-02-07 21:56:01,"Thanks @MarvinNazari ! If it's not occurring on Xcode 8, I think we're going to close this unless it rears its ugly head again.",garrettmoon,MarvinNazari
2991,2017-02-08 05:14:46,"@maicki I think the thought behind this is good.  If the team decides to land this — that's OK with me.  However, I think there is a case to be considered before removing this entirely.

- Let's consider how much it interferes with refactoring.  In particular, I don't think we should remove the Inspector or Example code (but just move them to an experimental/ folder instead, which is a directory we could find useful for newer pre-Beta features too).
- It probably makes more sense to remove the ASDisplayNode level integration, but that doesn't mean that all code which is otherwise ""out of the way"" also must go.
- I think we all agree that debugging tools around layout, especially visualization, would be one of the most incredible capabilities that has ever been added to ASDK...and, for better or worse, it is very much **needed** as developers struggle every day on this.  Many hours lost trying to figure out tiny issues.
- Since the visualization support does work, but it's mostly the editor / example environment that wasn't complete, IMO we should put it on ice until it is revived.  This is on the assumption that whether it's next month, or a year from now, it's almost certain that we'll eventually want this functionality.

That said, I wouldn't suggest that anyone spend many hours carefully preserving the functionality.  Instead, do you think there's a reasonable way to ""move aside"" any code that's in the way, and then break the integration with ASDisplayNode?",appleguy,maicki
2991,2017-02-10 15:38:34,@appleguy @Adlai-Holler @hannahmbanana @nguyenhuy Thank you for all of your inputs. I will merge this in as soon as CI is passing.,maicki,appleguy
2991,2017-02-10 15:38:34,@appleguy @Adlai-Holler @hannahmbanana @nguyenhuy Thank you for all of your inputs. I will merge this in as soon as CI is passing.,maicki,hannahmbanana
2984,2017-02-06 23:51:40,"@garrettmoon Fair enough! I'll look into that, I don't think I've dug deep enough yet.",christianselig,garrettmoon
2983,2017-02-10 07:24:47,@Adlai-Holler It seems like Jenkins perform `pod install` instead of `carthage update`. But from now `carthage update` is necessary for building ASDK framework because it depends on `PinRemoteImage` and `PINCache` frameworks.,Antowkos,Adlai-Holler
2983,2017-02-15 05:12:20,"@garrettmoon @Adlai-Holler for whomever can access the Jenkins config, I believe @Antowkos investigation here has done the hardest part of the work to show us the path:

Let's tweak the Jenkins script (config on the website) so that when running the Carthage build (as defined as one of the MODEs in build.sh), it should run carthage update instead of pod install.

I'm pretty sure that's something that regressed relative to Travis that I hadn't considered.  We may also need to ensure Jenkins is even running the Carthage ""MODE"" of the build.sh script in its run.  If we can try that out and it works, let's get this landed before it doesn't work :)",appleguy,Adlai-Holler
2983,2017-02-17 02:47:14,"@garrettmoon Unfortunately, I will be able to do this only tomorrow. ",Antowkos,garrettmoon
2983,2017-02-22 03:35:18,@garrettmoon Sorry for the delay! suddenly I got too much work and I don't have much time even for this simple update :( But I will be definitely able to update my PR and test it tomorrow in my time zone. Hope it will be OK.,Antowkos,garrettmoon
2983,2017-02-24 11:15:06,"@garrettmoon Finally, I found time to update and test the issue. Unfortunately framework isn't building now because of bunch of errors, you can see them on screenshot
![2017-02-24 16 42 21](https://cloud.githubusercontent.com/assets/3423650/23300599/7b628af4-fab0-11e6-80f5-8c086221f9c5.png)
Duplicate main issues from screenshot:
- `PINRemoteImageManagerAlternateRepresentationProvider` protocol is only forward declared, but it's methods isn't visible.
- For some reasons there are this error: `Cannot find interface declaration for 'PINAnimatedImage'`

Maybe it is my local machine errors, but I doubt. Anyway, I update `Cartfile` so please try to test it on your build server",Antowkos,garrettmoon
2983,2017-03-04 07:55:34,"@appleguy, @garrettmoon Hi guys! Seems like conflicts are resolved and now you can figure out why the framework isn't build still. 

I do my own research on it and I found out that for some reason, `PINRemoteImage` framework doesn't have necessary headers
![2017-03-04 13 37 53](https://cloud.githubusercontent.com/assets/3423650/23577055/fe002c66-00df-11e7-9f65-244c56bd5bcb.png)

I think you know it, but let me remind you that for correct work of ASDK framework powered with PIN stuff at least next headers should be available
![2017-03-04 13 40 48](https://cloud.githubusercontent.com/assets/3423650/23577071/7af7d480-00e0-11e7-8567-33de869387e0.png)

Please, pay attention for protocols availability too (for example `PINRemoteImageManagerAlternateRepresentationProvider` is using in `ASPINRemoteImageDownloader`)",Antowkos,garrettmoon
2983,2017-03-04 07:55:34,"@appleguy, @garrettmoon Hi guys! Seems like conflicts are resolved and now you can figure out why the framework isn't build still. 

I do my own research on it and I found out that for some reason, `PINRemoteImage` framework doesn't have necessary headers
![2017-03-04 13 37 53](https://cloud.githubusercontent.com/assets/3423650/23577055/fe002c66-00df-11e7-9f65-244c56bd5bcb.png)

I think you know it, but let me remind you that for correct work of ASDK framework powered with PIN stuff at least next headers should be available
![2017-03-04 13 40 48](https://cloud.githubusercontent.com/assets/3423650/23577071/7af7d480-00e0-11e7-8567-33de869387e0.png)

Please, pay attention for protocols availability too (for example `PINRemoteImageManagerAlternateRepresentationProvider` is using in `ASPINRemoteImageDownloader`)",Antowkos,appleguy
2983,2017-03-09 12:11:19,"@garrettmoon Actually, Carthage is already necessary for building framework, but workspace settings shouldn't affect on it because framework is a different target and has it's own settings and dependencies. Of course, you can set it up similar to `PIN`s projects. And even if it isn't the reason of building failure you will have common targets pattern for all projects :)

Did you fix all issues I described earlier? I think that framework isn't build because of them.",Antowkos,garrettmoon
2983,2017-03-23 09:46:16,"@garrettmoon @Adlai-Holler Hi guys! I had a time to look on it again and I think that this issue should be fixed now (I really hope so). 
The problem was that `ASPINRemoteImageDownloader.m` and `ASPINRemoteImageDownloader.h` for some reason wasn't added to framework's target. I re-add them to the project and everything is ok now. 
Also I fix CarthageBuildTest sample, so it works now too. From now on Carthage users have to add `PINOperation.framework` to project too. 

Actually I don't know how to reopen this pull request. Should I create a new one?",Antowkos,garrettmoon
2983,2017-03-23 09:46:16,"@garrettmoon @Adlai-Holler Hi guys! I had a time to look on it again and I think that this issue should be fixed now (I really hope so). 
The problem was that `ASPINRemoteImageDownloader.m` and `ASPINRemoteImageDownloader.h` for some reason wasn't added to framework's target. I re-add them to the project and everything is ok now. 
Also I fix CarthageBuildTest sample, so it works now too. From now on Carthage users have to add `PINOperation.framework` to project too. 

Actually I don't know how to reopen this pull request. Should I create a new one?",Antowkos,Adlai-Holler
2983,2017-03-27 03:21:21,"@garrettmoon @Adlai-Holler guys, maybe you didn't see my comment. Please look on it and tell me what should i do next to merge my changes to master.",Antowkos,garrettmoon
2983,2017-03-27 03:21:21,"@garrettmoon @Adlai-Holler guys, maybe you didn't see my comment. Please look on it and tell me what should i do next to merge my changes to master.",Antowkos,Adlai-Holler
2982,2017-02-04 00:00:30,"@garrettmoon unless I missed one, every single change is gated by just one compiler flag, which is **off** by default (#if YOGA).

Because of the high rate of change recently, I think it would be better to split out into separate files when ASDisplayNode is broken up (IIRC this is on the docket for very soon?).

For an example of this pain, recently there was a ~3,100 line change to ASDisplayNode that took almost a day for me to fix past :(.",appleguy,garrettmoon
2982,2017-02-04 00:06:44,"@appleguy yeah, hopefully we have fewer changes like that in the future; they're specifically attempting to prevent it :D

Sounds good, we can try and hold off on landing big changes until we've made some decisions around this one.",garrettmoon,appleguy
2982,2017-02-04 02:03:46,"@garrettmoon - awesome, thanks!  Since we're continuing to change this, I want to try to stay in sync as much as possible (even with this PR there's a risk of internal divergence).  The best way to do that would be to land in the next few days, so I'm willing to put effort in over the weekend to gate it to whatever degree is needed to be a good citizen when landing something experimental like this.

Any thoughts on how to compartmentalize it further than the compile-out switch?  Can I use the +Beta.h headers, and then you'd prefer to see +Yoga.mm implementation files -- or did you have a different setup in mind?",appleguy,garrettmoon
2978,2017-03-09 02:09:59,"@garrettmoon @maicki this is a very exciting feature! I would love to be an early tester of this, or to give feedback on API design in the context of some use cases I have in mind.",appleguy,garrettmoon
2969,2017-02-03 21:10:29,"@Adlai-Holler awesome!  Indeed the original did not support true flow layouts.  As a further step — especially as an implementation of an ASCollectionViewFlowLayout that can do async computation — what do you think about using Yoga as a C-level implementation of the flow algorithm + caching the entire layout in C, and then generating and/or caching the layout elements as they are requested?",appleguy,Adlai-Holler
2969,2017-02-03 21:30:55,@appleguy are you suggesting we make Yoga a required dependency?,garrettmoon,appleguy
2969,2017-02-04 18:34:27,"@appleguy I love the idea – once we have our own layout protocol we'll need a flow layout implementation, and that would be a great way to drive it. For the current API, UICollectionViewFlowLayout is absolutely sufficient IMO.",Adlai-Holler,appleguy
2969,2017-02-04 19:07:08,"@appleguy Caching the flow layout will be great! However I'm not sure if we want to make Yoga as a required dependency. Please correct me if I'm wrong, but I believe our ASStackLayoutSpec - once its flex-wrap implementation is merged (#2914) - will serve this purpose quite well for the time being, at least until we use Yoga as our main layout system which probably won't happen any time soon.

Btw, could you please create a new ticket so it's easier to track? Thanks!",nguyenhuy,appleguy
2969,2017-02-06 02:24:13,"Thanks @appleguy and @nguyenhuy for your reviews! Comments addressed, merging…",Adlai-Holler,nguyenhuy
2969,2017-02-06 02:24:13,"Thanks @appleguy and @nguyenhuy for your reviews! Comments addressed, merging…",Adlai-Holler,appleguy
2968,2017-02-05 02:04:20,"Thank you @fruitcoder! The indentation is inconsistent with the old content, but I'm hoping it will magically fix itself when merged. :)",hannahmbanana,fruitcoder
2966,2017-02-01 20:08:24,@maicki - Excellent idea. Beta didn't occur to me when adding the file :P,hannahmbanana,maicki
2958,2017-01-31 21:22:08,"@Adlai-Holler Oh wow, good call, thank you so much!

That worked 95%! It still yells at me about constrainedSize being infinite, however:

> 2017-01-31 17:19:14.309337 AsyncDisplayKitTest[1977:514552] Cannot calculate size of node: constrainedSize is infinite and node does not override -calculateSizeThatFits: or specify a preferredSize. Try setting style.preferredSize. Node: <<ASDisplayNode: 0x143e529a0> alpha:1.00 isLayerBacked:0 frame:{{0, 0}, {0, 0}} (null)>",christianselig,Adlai-Holler
2958,2017-02-05 01:56:59,@rewandy Bingo!,christianselig,rewandy
2957,2017-01-31 18:28:16,"@maicki that worked with the following code:



but the following code didn't work:

",psk239,maicki
2957,2017-02-09 21:31:11,"@maicki - When using `style.minWidth` and `style.maxWidth`, does the node need a need a preferred size set as well? Is it possible to use minWidth and maxWidth only?",hannahmbanana,maicki
2957,2017-02-17 02:30:43,@hannahmbanana Here you go [LINK](https://github.com/classdojo/AsyncDisplayKit/tree/master),psk239,hannahmbanana
2955,2017-02-15 00:28:49,Resolved in the linked PRs. Great observations @appleguy these are major problems!,Adlai-Holler,appleguy
2953,2017-01-30 19:00:44,"@fruitcoder - I put in those screenshots early last year and a few examples have been added since then without updating the screenshots file. I wasn't sure if the screenshots were useful, so it's very cool to hear that you appreciated them. 

1. The `examples` folder contains the most relevant and up-to-date (using ASDK 2.0) example projects. The `examples_extra` folder contains more obscure, possibly out-of-date examples. This folder is not included in our build script.
 
2. To combine them, we'd need to make sure that all of the examples_extra projects pass the build. Also, we'd need a way to highlight the most relevant examples since there are quite a few (we could do this in the README file or on the website). 

If you'd like to update them for us, that would be very much appreciated!",hannahmbanana,fruitcoder
2952,2017-01-31 11:42:43,"@EviluS - Thanks bro, excellent implementation. 
@hannahmbanana - Yes, Main thread it is
",modLX4,hannahmbanana
2952,2017-01-31 12:50:38,"Thank you @hannahmbanana for pointing that out :)
@modLX4 I have edited the example.",EviluS,hannahmbanana
2945,2017-01-31 21:09:12,@hannahmbanana Could you rebase? Then we'll land!,Adlai-Holler,hannahmbanana
2944,2017-02-10 00:17:15,@Adlai-Holler : It was 2.0 beta 1.,tungvoduc,Adlai-Holler
2944,2017-02-14 06:32:34,@Adlai-Holler I met the same issue. The last version confirmed to be working is 2.0.,yxztj,Adlai-Holler
2943,2017-01-28 06:38:18,"@maicki Also, thanks for putting this up so quickly!  It will be very useful.

I'd be happy to help review & collaborate on the Layout cleanup diff this depends on, both because that cleanup is a great step in itself, and also because it will allow us to land this and close out two PRs that make nice steps forward :).

I will very likely be able to take on the Yoga integration test, although due to an offsite next week and other projects at the moment, I think it will take until the first week of February to start.  I may get further delayed, but I think it's surprisingly feasible that we might have a prototype by mid-Feb!

Personally, I think keeping the ASLayoutSpec API is an absolute must.  It should be possible to use the Yoga ""style"" through an explicit .children array that is different than .subnodes, but I really do think ASLayoutSpec should stick around.

I already have in mind exactly how they can be ""powered"" internally by Yoga, with trees that exist separately at each level in the node hierarchy and calls into them are driven by the -calculateLayoutThatFits method (the C structs from Yoga would be converted into ASLayouts, and most critically, the *Measure function pointer that Yoga has will be connected to something like layoutThatFits: on each child node -- which will continue the recursive propagation into calculateLayoutThatFits:/calculateSizeThatFits:, while also flawlessly encapsulating the .preferredSize / .layoutSize integration you masterfully integrated into the constrainedSize calculation stage!!",appleguy,maicki
2942,2017-01-30 22:13:08,"So awesome, great work @Adlai-Holler, going to have to play around w/ this!

Also 👋  @appleguy ❤️, we've come full circle!",rnystrom,Adlai-Holler
2941,2017-01-28 06:34:07,"@maicki do you really think we should remove all of ASEnvironment?  I remember when you wrote it (and we talked about its design together), and I still think it is one of the most interesting and unique systems in ASDK.

Although adoption was not completed, I feel it would be *very* valuable (and is great, flexible code) if we can get ASInterfaceState and ASHierarchyState into the ASEnvironment struct, as was originally intended / in-progress when we had to jump to other projects.  This wouldn't need to be done right now, *and* I do still agree that removing *layout propagation* from ASEnvironment makes sense.

One reason I say this is because the integration idea I have for Yoga will almost certainly be able to use ASEnvironment as a central mechanism for keeping the Yoga tree up to date with the ASDK children tree.",appleguy,maicki
2941,2017-01-30 18:44:29,@appleguy Yes for now we should get rid of `ASEnvironment` it is trivial to write this kind of tree traversal without having to hook into another system like `ASEnvironment`. Look how I replaced the trait collection system that used to use `ASEnvironment`.,maicki,appleguy
2941,2017-01-31 19:07:04,"Nice! Thoughts:

- Since we don't support macOS and there aren't plans to do so, I think we shouldn't land any OSX-oriented code.
- Some of the names are verbose. How about:
   - `ASLayoutElementTraitCollection` -> `ASPrimitiveTraitCollection`. This conveys that it is a struct version of the class `ASTraitCollection`.
   - `ASLayoutElementTraitEnvironment` -> `ASTraitEnvironment`. This mirrors the `UITraitEnvironment` protocol and the word `Trait` is unambiguous within ASDK.
   - `progagateNewLayoutElementTraitCollection` -> `propagateNewTraitCollection`. Since the format used for propagation doesn't matter, we can omit it from the name.

@maicki ",Adlai-Holler,maicki
2941,2017-02-01 18:15:06,"@Adlai-Holler 
- I think it would be valuable to let the macOS related code in there as the layout system can be used on macOS without having the coupling with ASDK
-  Agree with naming of trait collections is not optimal. Will change the naming.",maicki,Adlai-Holler
2941,2017-02-03 18:53:55,@Adlai-Holler Addressed your comments ready for next review. Thanks!,maicki,Adlai-Holler
2937,2017-02-12 08:17:41,"@hannahmbanana Excuse me for no replying. I don't have access to my mac now, but I will include screenshots ASAP, so don't close the issue, please :)",Antowkos,hannahmbanana
2936,2017-01-26 15:42:10,@hannahmbanana If we remove the comments directly from the enums will we loose the Xcode documentation in ObjC if you option-click on it within a source code?,maicki,hannahmbanana
2936,2017-01-26 16:58:06,@hannahmbanana Can you please also rebase your branch on top of master. It seems like you merged in master a couple of times instead of rebasing.,maicki,hannahmbanana
2936,2017-01-26 18:32:01,@maicki - interesting point about losing the option-click documentation. Shall we abandon this idea then? ,hannahmbanana,maicki
2928,2017-01-26 05:03:46,@hannahmbanana Thanks for that. We dropped support in our app (Bidorbuy) last year as we also felt it was not worth the extra effort to keep it supported. Seems like we made the right decision as we have recently incorporated ASDK into our latest build. ,TanderZA,hannahmbanana
2926,2017-01-25 18:57:22,"@appleguy The only way I have been able to trigger that warning is to use the C++ compiler to compile `NSArray+Diffing.m`. The cast is invalid under C++ because arrays aren't exactly pointers.

If you add this to the top of `NSArray+Diffing.m` I bet it will trigger:



So we have three options:
- A. Land this diff
   - Pro: Easy!
   - Con: Lots of malloc/free calls
   - Con: Leaves the door open for future incompatibilities between your C++ build environment and our other `.m` files.
- B. Open a new diff that makes `NSArray+Diffing.mm` into a C++ file that uses a C++ heap-allocated matrix a la http://stackoverflow.com/a/21036413 except on the heap.
   - Pro: Clean! One call, no memory manipulation.
   - Con: Bigger change, more C++.
   - Con: Leaves the door open for future incompatibilities between your C++ build environment and our other `.m` files.
- C. Modify the build system you're using to ensure it compiles `.m` files using a C compiler.
   - Pro: No code change.
   - Pro: Formally correct – other incompatibilities may arise if `.m` files are compiled under C++
   - Con: May be a huge hassle for you.

If C is reasonably easy, I think we should go with that. Otherwise I think we should go with A.",Adlai-Holler,appleguy
2926,2017-02-10 07:05:02,"Jenkins add to whitelist and test this please.

@appleguy Any thoughts on the difficulty of getting your build environment to use the C compiler on this file?",Adlai-Holler,appleguy
2926,2017-02-11 04:52:38,@Adlai-Holler Will look into this soon.  Thanks a lot for your detailed presentation of options and being open to how this is solved -- I agree that figuring out the build config would be ideal now that there is a clear lead on why the error was occurring at all.,appleguy,Adlai-Holler
2926,2017-02-11 05:38:18,"@Adlai-Holler As far as I can tell, the only way to force the C compiler to be used there would be to create a separate Bazel build target -- an actually separate static library -- so it wouldn't actually address the problem with other files.  I'm definitely worried about this because I didn't realize it was treating it differently than the mainline build.

However, since this has never occurred before (at least for any existing code), it raises the question: should we ever write C code that doesn't compile under C++?  In terms of portability, and in the spirit of the project's already-strict warning settings, _and_ given the widespread usage of .mm -- it seems like we should strive for C++ compatibility.

Let me know your thoughts on this.  I could close this PR if you see a better way to do it, or update it to use a vector or something else.  For the meantime, this will be the only ""large"" divergence in our fork at the moment, which is a pretty good place to be.  It'll be nice to eliminate, but isn't urgent.",appleguy,Adlai-Holler
2926,2017-02-11 19:33:46,"@Adlai-Holler @appleguy Let's try to land a solution soon so there are no problems for other developers who face the same problem with their build infra.

I personally would tend to go with the C++ approach.

Re project warning settings: We don't have a strict warning setting at the moment and I would see improve our warning game pretty soon. ",maicki,appleguy
2926,2017-02-11 19:33:46,"@Adlai-Holler @appleguy Let's try to land a solution soon so there are no problems for other developers who face the same problem with their build infra.

I personally would tend to go with the C++ approach.

Re project warning settings: We don't have a strict warning setting at the moment and I would see improve our warning game pretty soon. ",maicki,Adlai-Holler
2926,2017-02-12 04:51:45,Thanks for the input @maicki !  I would **love** to see some really pedantic warning settings enabled :).,appleguy,maicki
2926,2017-02-13 17:52:03,"OK since I think cases like this will be rare, let's ignore the idea of other possible incompatibilities when our files are compiled under C++, and go with option **B** to use a vector. @appleguy Are you willing to update the implementation and rename to `.mm`?",Adlai-Holler,appleguy
2924,2017-01-25 02:21:09,"@hannahmbanana Thanks for reply! 
The latest one. I will try to make sample project for you ASAP.",Antowkos,hannahmbanana
2924,2017-01-25 03:04:46,"@hannahmbanana Here is example project with that bug. 
[ASPagerNodeBug.zip](https://github.com/facebook/AsyncDisplayKit/files/728533/ASPagerNodeBug.zip)

Also there is 1 more bug, related to this part of code 


If you comment one of `return` you will see that scrolling is terrible.",Antowkos,hannahmbanana
2914,2017-01-19 17:56:50,"+1 For this,thanks @nguyenhuy. ",davitPiloyan93,nguyenhuy
2912,2017-01-18 19:15:33,@Adlai-Holler: Feel free to assign to me. Thanks!,nguyenhuy,Adlai-Holler
2910,2017-01-26 06:03:48,Woah - THANK YOU @Cal-um! ,hannahmbanana,Cal-um
2910,2017-01-26 08:59:40,@hannahmbanana you are the original and best.,Cal-um,hannahmbanana
2910,2017-02-13 18:42:46,"OK @Cal-um sorry for the delay in merging this, and thanks for the diff! Here we go!",Adlai-Holler,Cal-um
2905,2017-01-18 00:52:17,@Adlai-Holler - restarting this build didn't seem to help. Do you think pushing an update would cause a different outcome?,hannahmbanana,Adlai-Holler
2905,2017-01-18 02:02:34,@hannahmbanana Give it a try!,Adlai-Holler,hannahmbanana
2896,2017-01-13 19:07:46,"Alrighty, thanks for a great diff @GitGadd, I hope to see you around more man!",Adlai-Holler,GitGadd
2895,2017-01-14 00:29:03,"@hannahmbanana I will do that I want to do a transition animation that will do a reveal side bar and dismiss sidebar, this should be possible with the api correct?  ",ArEnSc,hannahmbanana
2895,2017-01-14 00:59:47,"@hannahmbanana it seems to work, so I think my misunderstanding was that I assumed you would change the size of a single subnode rather than replace a subnode with another one then animate between them is this correct?  ",ArEnSc,hannahmbanana
2895,2017-01-17 16:51:07,@hannahmbanana I was able to resize switching the nodes I will make sure to do a write up for transition make an easy transition example. Though I discovered a bug along the way. Ill open it in a moment,ArEnSc,hannahmbanana
2894,2017-02-15 05:19:27,"@yxztj thanks for the sample project and the fix!  I'm really surprised this actually makes a difference, but it looks like your new implementation is strictly better / more correct if there is some kind of undocumented order-of-operations dependency in the Apple frameworks about this.

It's great to have this issue linked directly in the source code, as it provides a concise summary of why the code structure is important to maintain.",appleguy,yxztj
2894,2017-02-16 01:55:48,"@appleguy Thanks. Yes I guess the order of execution matters when displaying CJK languages.

Since #3026 has been merged, I'm closing it.",yxztj,appleguy
2892,2017-01-18 19:12:07,OK I created the linked issue to track the rounding error. It's time to merge this! Awesome work @nguyenhuy – improvements in many dimensions with a single diff ✨ ,Adlai-Holler,nguyenhuy
2891,2017-01-12 19:23:28,Thank you for including a sample project and documentation @aaronschubert0!,hannahmbanana,aaronschubert0
2891,2017-01-16 08:32:45,@Adlai-Holler Made those changes!,aaronschubert0,Adlai-Holler
2891,2017-01-18 15:18:43,"@Adlai-Holler Added the logic to the pending state instead, should be good to go now.",aaronschubert0,Adlai-Holler
2889,2017-01-11 20:46:57,"@garrettmoon It's true the behavior changes, but I think it's reasonable for us to do the layer-thing for layer-backed nodes, and the view-thing for view-backed nodes.",Adlai-Holler,garrettmoon
2886,2017-01-12 09:14:21,Awesome thanks guys! @Adlai-Holler @nguyenhuy ,aaronschubert0,Adlai-Holler
2886,2017-01-12 19:10:28,@aaronschubert0 - this is super awesome! thank you!,hannahmbanana,aaronschubert0
2877,2017-01-12 19:22:32,@GitGadd - would you be willing to implement this for us?,hannahmbanana,GitGadd
2877,2017-01-12 20:42:46,"@hannahmbanana Definitely! I've been thinking about contributing, and this seems like an easy start.",GitGadd,hannahmbanana
2875,2017-01-21 11:44:15,@Adlai-Holler Done.,acedened,Adlai-Holler
2873,2017-01-10 08:57:15,"Here is the example with UITabBarController (same layout without ASDK).
Content doesn't blink.
@Adlai-Holler Maybe we should investigate it further?


[TabBarExample-no-ASDK.zip](https://github.com/facebook/AsyncDisplayKit/files/695631/TabBarExample.zip)
",8ofproject,Adlai-Holler
2871,2017-02-13 21:07:02,@garrettmoon Looks like it's fixed with the latest master PINRemoteImage for us. 👍 ,ay8s,garrettmoon
2866,2017-01-05 22:59:09,Thanks @master-nevi ,Adlai-Holler,master-nevi
2866,2017-01-06 08:12:43,@Adlai-Holler you're very welcome. Glad I could contribute. ,master-nevi,Adlai-Holler
2865,2017-01-05 23:11:29,Resolved in #2866. Thanks for the issue report and building the fix @master-nevi !,Adlai-Holler,master-nevi
2864,2017-01-06 01:21:27,@Adlai-Holler - did you want me to put up a diff to get this into releases/p6.17?,hannahmbanana,Adlai-Holler
2860,2017-01-11 06:13:03,"@hannahmbanana i didn't import it by myself, that's the source code,when i use cocoapods to install it.",CoderJee,hannahmbanana
2859,2017-01-04 18:58:35,"Cool, thanks @Adlai-Holler, @garrettmoon!",nguyenhuy,Adlai-Holler
2859,2017-01-26 13:29:00,@garrettmoon Thanks for explanation. ,hovox,garrettmoon
2859,2017-03-02 08:04:55,"@garrettmoon But in fact it's not. I used this method and caused about 2~3% crash rate on iOS 8
![image](https://cloud.githubusercontent.com/assets/1271415/23498277/e8236f4a-ff61-11e6-8b82-7ab5c4629dc3.png)
",jesseluo,garrettmoon
2852,2017-01-03 15:34:47,"@maicki you saved me! I missed `self.automaticallyManagesSubnodes = YES;`

Thank you so much!!",minux84,maicki
2851,2017-01-11 10:18:20,"@hannahmbanana thanks, commit doesn't fixed the issue. here is the sample project: https://github.com/hashemp206/ASScrollNode-Example",hashemp206,hannahmbanana
2851,2017-01-12 22:01:10,@hannahmbanana I can confirm that nothing has changed (unfortunately).,8ofproject,hannahmbanana
2848,2016-12-31 10:35:02,"Will check it out @Adlai-Holler, excited about some of the stuff we can do with this in ASDK.

Currently using tables in Buffer but have the Declarative stuff using Collection Views without much hassle. Curious on the decision to move towards IGListKit over ASDK's own implementation?",ay8s,Adlai-Holler
2848,2016-12-31 17:44:12,"@ay8s The decision hasn't been made – it's only a proposal right now – but using IGListKit, which is quickly being recognized by the industry as an extremely powerful and reliable framework for building data-driven collection views, will seriously cut down our maintenance/API design burden and keep the scope of AsyncDisplayKit limited, so I obviously advocate very strongly for it. The section controller architecture is an extremely useful one, and their diffing mechanism has the concept of ""updating an object"" where we don't. If we can integrate with IGListKit, then we can spend our resources building other great stuff.",Adlai-Holler,ay8s
2848,2016-12-31 17:51:17,@Adlai-Holler Awesome 👍 Started checking it out today and will see if I can get a branch together using it alongside #2566's implementation. Totally get keeping the ASDK scope limited to focus on other areas especially when IGListKit is so powerful. Will let you know if I spot anything!,ay8s,Adlai-Holler
2848,2016-12-31 17:55:30,"Awesome, thanks @ay8s for looking into it!",Adlai-Holler,ay8s
2848,2017-01-03 16:30:53,"@Adlai-Holler Got started with implementing this into Buffer this morning. Just about got it working and displaying updates from the first fetch from the Buffer API. Wanted to post some early thoughts. It definitely seems like a bit more work to get up and running compared to the ASDK diff implementation, that said I'm sure the benefits down the line will make it worth it.

One thing I did spot also, the ASDKGram app seems to crash after a few page loads in the IGListKit tab. First few pages load fine then it asserts. 

Will keep at it :)",ay8s,Adlai-Holler
2848,2017-01-03 19:05:48,@ay8s !! OK thanks for the feedback. I'll investigate the ASDKgram issues today and update the diff.,Adlai-Holler,ay8s
2848,2017-01-03 21:12:13,@ay8s Turns out the crash is https://github.com/facebook/AsyncDisplayKit/issues/2855 and not related to IGListKit (phew!). I've worked-around and pushed.,Adlai-Holler,ay8s
2848,2017-01-05 23:34:06,@ay8s What are your thoughts? Have you had a chance to give it a spin?,Adlai-Holler,ay8s
2848,2017-01-06 10:13:18,"@Adlai-Holler Going to run through it a little more, right now got it populating the collection view but not tried inserting/removing items just yet to see how that performs.",ay8s,Adlai-Holler
2847,2016-12-31 02:29:28,"@SaifAlDilaimi Once you make the tweaks, I'll merge this :).  Don't worry about any changes to ASDisplayNode at the moment — that's a bigger beast to change, and Michael has some plans to improve how it is factored.",appleguy,SaifAlDilaimi
2847,2016-12-31 21:02:16,@appleguy @maicki I never used tests in a iOS App (shame on me). This would take me some time.. ,SaifAlDilaimi,appleguy
2847,2016-12-31 22:47:15,@appleguy @maicki can you guys review again?,SaifAlDilaimi,appleguy
2847,2017-01-02 03:08:30,"@SaifAlDilaimi it looks like there is also now a duplicated use of the .selectionStyle = line; maybe you could move these three lines into the _ASTableViewCell setCell:, and also make sure _ASCollectionViewCell setCell: includes the .backgroundColor = and .clipsToBounds = so that the behavior matches.  This way, setCell: in each of those two classes will control all of the ASCellNode -> UI(Table/Collection)ViewCell property setup.",appleguy,SaifAlDilaimi
2847,2017-01-03 15:23:24,"> @SaifAlDilaimi :) It looks like you forgot one more — .clipsToBounds
> 
> Since it's also in setNode in the Collection case, let's make sure the Table matches. You can actually delete this comment while moving the one line of code, as the comment references an old bug that has since been resolved.
> 
> I don't see any other changes to request (this is part of the last request), and so once @maicki confirms, I think we should land this. It would be great to have tests; perhaps we can track that as a separate task (since I know you were expecting this to be a very quick project)?

@appleguy @maicki I have commited the last change. I would love to add tests but as I said I don't really know what/how to test the changes that I made. 

I don't really need it to be merged fast because I'm using my forked repo. If we do it let do it right.",SaifAlDilaimi,appleguy
2847,2017-01-03 15:23:24,"> @SaifAlDilaimi :) It looks like you forgot one more — .clipsToBounds
> 
> Since it's also in setNode in the Collection case, let's make sure the Table matches. You can actually delete this comment while moving the one line of code, as the comment references an old bug that has since been resolved.
> 
> I don't see any other changes to request (this is part of the last request), and so once @maicki confirms, I think we should land this. It would be great to have tests; perhaps we can track that as a separate task (since I know you were expecting this to be a very quick project)?

@appleguy @maicki I have commited the last change. I would love to add tests but as I said I don't really know what/how to test the changes that I made. 

I don't really need it to be merged fast because I'm using my forked repo. If we do it let do it right.",SaifAlDilaimi,SaifAlDilaimi
2847,2017-01-09 08:45:36,@maicki @appleguy any progress on this? Is there something I need todo?,SaifAlDilaimi,appleguy
2847,2017-01-10 02:26:49,"Seems @appleguy  is pretty busy right now and he gave his approval modulo 1 change, and then that change got made, so here we go! Landing!",Adlai-Holler,appleguy
2846,2016-12-30 07:23:56,"@SaifAlDilaimi - a few things I notice about your `layoutSpecThatFits:` method:
- As you have it written above, you can return `iconTextfieldStack` directly. There is no need to wrap it in an inset layout spec at the end. 
- try adding `_textField.style.flexShrink = 1.0`. The flex shrink / grow properties do not propagate up or down, so you must set them on each individual item you want to grow or shrink. ",hannahmbanana,SaifAlDilaimi
2846,2016-12-30 07:28:51,@SaifAlDilaimi - looks like you got an answer to this via our Slack channel. :) Should I close this issue?,hannahmbanana,SaifAlDilaimi
2846,2016-12-30 07:40:11,@SaifAlDilaimi - one slight optimization would be to remove the 2 inset layout specs you currently have wrapping the icon and text field and create just one inset layout spec to wrap the `iconTextfieldStack` at the end. Just a thought. :),hannahmbanana,SaifAlDilaimi
2845,2017-01-03 18:55:52,@leotumwattana it sounds like this is a duplicate of #698 so I'm going to close this.,garrettmoon,leotumwattana
2845,2017-01-03 19:00:25,"@leotumwattana sorry if that sounded callous, we really appreciate the enthusiasm! However having one issue makes it easier to track and get stuff done :)",garrettmoon,leotumwattana
2845,2017-01-03 19:04:01,@garrettmoon: No worries. Let's go with #698. ,leotumwattana,garrettmoon
2844,2017-01-02 02:42:31,"@nguyenhuy This is a good improvement!  Any idea why we don't get warnings for these kind of collisions?  Like when we declared _propertyLock overwriting the base class ones, we didn't get warnings...I wonder if _delegateFlags also exists in Network or ImageNode?",appleguy,nguyenhuy
2843,2017-01-02 03:14:15,"@rewandy Thanks!  Does this same method exist for collection views?  I'm not sure if it does, but if so, could you check that one too?

@Adlai-Holler would be the best person to confirm this is the right fix.  How was a nil value handled previously?  Wouldn't the convert index path method provide a nil response if it had a nil input?  That seems important to determine.",appleguy,rewandy
2843,2017-01-03 22:11:44,"Hey @rewandy you're absolutely right! I dug into the calls you linked, and created a more general fix in #2856. Could you give that PR a look and tell me what you think?",Adlai-Holler,rewandy
2841,2016-12-30 10:18:50,@hannahmbanana sample project: https://github.com/hashemp206/TagListNode/tree/master,hashemp206,hannahmbanana
2841,2017-01-24 22:43:52,"@hannahmbanana Please close this ticket. Since this is not a framework bug, discussions will be carried out in the sample repo.",nguyenhuy,hannahmbanana
2839,2016-12-27 07:37:34,haha @maicki beat me :),hannahmbanana,maicki
2836,2017-01-07 16:35:50,"@Adlai-Holler 
Currently it is implemented as follows.



The UI looks like this.

<img width=""766"" alt=""screen shot 2017-01-08 at 01 32 35"" src=""https://cloud.githubusercontent.com/assets/1888355/21743289/61ad0d3e-d542-11e6-87fa-c9960f871717.png"">

Header is self-sizing but ReusableView does not seem to be able to fit the size of Header.",muukii,Adlai-Holler
2836,2017-01-08 21:36:09,"@Adlai-Holler 
I am reading the ASDK code.
HeaderReferenceSize is used only as max and UICollectionReusableView is not scaled down according to ASCellNode, right?",muukii,Adlai-Holler
2834,2016-12-24 07:20:39,@hannahmbanana Thanks for fixing! The attribute should be 'copy' though.,maicki,hannahmbanana
2833,2017-01-03 23:51:15,"@garrettmoon 
It has become quite difficult to reproduce.
Upload screenshots of all threads when reproduced.",muukii,garrettmoon
2830,2016-12-27 12:32:39,"@leotumwattana You should wrap your `insert/delete/reload` methods in `performBatchAnimated:updates:completion` method and pass `NO` for `animated`

**Example:**

",EviluS,leotumwattana
2822,2016-12-21 19:45:12,"@maicki you are absolutely right, this fixed my issue. I should've realized that. Thanks!",aaronash,maicki
2814,2016-12-20 22:36:19,"@garrettmoon I was just worrying that in rare cases, we might end up keeping these nodes around for a bit longer than needed. But this is definitely an improvement.",nguyenhuy,garrettmoon
2814,2016-12-20 22:39:05,@nguyenhuy oh good point! I wonder if they should be though?,garrettmoon,nguyenhuy
2814,2016-12-20 22:45:21,"@garrettmoon Thinking more about it, I think we actually want them to be around. For example, an image node should be kept alive until it clears its contents (i.e cache entry, placeholder image, etc).",nguyenhuy,garrettmoon
2814,2016-12-20 22:50:25,"@nguyenhuy could you share with me (maybe in an email, once you're up tomorrow) what changed in this area to cause off-main thread calls to occur?  This didn't occur in practice before 2.0, right?",appleguy,nguyenhuy
2814,2016-12-20 23:02:19,"@appleguy it's an external cause actually (https://github.com/facebook/AsyncDisplayKit/issues/2813). Developers can call `-[ASNetworkImageNode setURL:]` in background which then triggers `-setNeeedPreload`. Since it's a legitimate use case to call `-setURL:` off main, I think this is necessary.",nguyenhuy,appleguy
2812,2016-12-21 17:55:57,Nice @chrisdanford! Safety dance! It seems like the CI failure is flaky – opened #2818. Jenkins test this please,Adlai-Holler,chrisdanford
2810,2016-12-20 20:59:37,"@nguyenhuy After looking over this PR it's a really nice improvement idea, but I'm not pretty sure if we should introduce having to test if the `_node` is `nil` in almost every method. Especially going forward we would need to be careful to always consider that.

What about having something like a `ASViewControllerNullNode` that would act like a proxy and this would be used as root node for the `ASViewController` and has a reference to the view controller if no node is given? In that null node we would just not do anything I guess in case we call method's like `layoutThatFits:` but if the view is accessed we actually would return the view from the view controller. I would have to lookup in the `ASViewController` implementation what we exactly would need, but I think that would be a bit _cleaner_ solution.",maicki,nguyenhuy
2810,2016-12-21 17:44:33,"@maicki Thank you for the feedbacks. I've came up with a simpler fix. In case users don't provide ASViewController with a node (by using `-initWithNibName:bundle:` or `-initWithCoder:`, I create a default node that simply loads an UIView. And so the node is non-optional as it has always been. This introduces a small overhead but helps reduce complexity of ASViewController. The overhead might even encourage people to opt-in to a node backed hierarchy and take full advantage of ASViewController.

I tested this approach with ASDKgram and didn't find any problem. Given the fact that we currently don't even support `-initWithNibName:bundle:` or `-initWithCoder:`, this change shouldn't cause any new regression on existing codebases and thus it should be safe.",nguyenhuy,maicki
2810,2017-02-13 18:42:17,It looks like this has been updated by @maicki in the linked PR. Closing.,Adlai-Holler,maicki
2807,2017-02-09 04:47:58,@garrettmoon I think we can close this issue now.,rmls,garrettmoon
2807,2017-02-09 15:38:27,@rmls Awesome work on that! Will close.,maicki,rmls
2803,2016-12-19 22:06:22,@haritowa Thanks!,Adlai-Holler,haritowa
2799,2016-12-19 17:02:28,Thank you @nguyenhuy! I tested it out with my code and it works for me. Thanks again!,hannahmbanana,nguyenhuy
2795,2016-12-19 04:09:20,"@hannahmbanana totally up to you guys, but it might be nice to also add in some assertions too. It may not be as important for newer ASDK adopters, but for code that is being migrated to v2, the assertions I added [here](https://github.com/master-nevi/AsyncDisplayKit/commit/1f6ec77871c7623a8a0d14b12c1203fb86171db3) helped a lot in determining the cause of https://github.com/facebook/AsyncDisplayKit/issues/2747",master-nevi,hannahmbanana
2795,2016-12-19 04:45:11,@master-nevi - would you be willing to put up a PR? I just noticed your PR above that I totally missed the first time I read this. :'(,hannahmbanana,master-nevi
2795,2016-12-19 05:28:13,"@hannahmbanana No prob, PR opened: https://github.com/facebook/AsyncDisplayKit/pull/2796",master-nevi,hannahmbanana
2794,2017-01-02 03:15:21,"@maicki thanks again for working on this :).  I can't see what the cause of the failure is, but let's land this as soon as you have the opportunity.",appleguy,maicki
2794,2017-01-10 16:03:48,@garrettmoon @appleguy Fixed the build errors. Let's get that in for 2.0.2.,maicki,appleguy
2790,2017-02-20 08:18:49,"@garrettmoon  , any idea when we can get the fixed release version?",xiaomaogong,garrettmoon
2789,2017-01-12 19:28:20,@tomizimobile and @ngoctr - which commit / version of ASDK are you using? ,hannahmbanana,tomizimobile
2789,2017-01-12 19:31:17,"@hannahmbanana looking at the linked issue, I guess I must've been using https://github.com/facebook/AsyncDisplayKit/commit/7861c63a680f516fc69cd083d462469f0a175697, and I believe everything up to master at that time (Dec. 5) showed the issue. I haven't checked to see if this is still a problem since opening the issue",tomizimobile,hannahmbanana
2788,2016-12-20 15:19:59,@maicki  @hannahmbanana Thank you! I will try **waitUntilAllUpdatesAreCommited**,stephenkopylov,maicki
2788,2016-12-20 15:19:59,@maicki  @hannahmbanana Thank you! I will try **waitUntilAllUpdatesAreCommited**,stephenkopylov,hannahmbanana
2788,2016-12-20 21:04:36,"@stephenkopylov - Just to be clear, I think the strategy that @maicki is suggesting is to call both one after another. ",hannahmbanana,maicki
2787,2016-12-16 12:25:39,"Thank you, @nguyenhuy 

The strange thing is the fact that in previous version of ASDK it have worked as I expected. Nothing about it found in release and migration notes. Now it just works with other logic. =(

>And the maximum width in this case is the screen width.

But, in my case maximum width is the stackSpec's width. And, because stackSpec can not stretch this two elements with fixed sizes, its maximum width limited by maximum width of its elements. Isn't it right?
It was so in ASDK 1.9.x but not in v2 =(",stephenkopylov,nguyenhuy
2787,2016-12-16 14:26:01,"@nguyenhuy
Understood, thank you. =)
I already have rewrote the similar parts of my code with the new logic.
As I think, the main question is - what is more logical and reasonable behavior? Which behaviour will be expectable by new users - the new, or the old?",stephenkopylov,nguyenhuy
2786,2016-12-18 08:33:48,"@leotumwattana this seems really great, thank you for writing the patch!!  All these improvements are making me especially excited to see UITextField support be added soon ... not sure who will pick up that task, but it will be really wonderful when we have a type enum of some kind and can also rely on the better performance & special features of UITextField without developers having to switch out the classes manually.",appleguy,leotumwattana
2786,2016-12-18 17:45:07,"@appleguy Thanks for this really great framework. I've been delving more and more into it these past few days to see how and if we can adopt it to our app. Falling in ❤️  with it. Looking forward to seeing this framework continue to grow and to see if my friends and I will be able to contribute to it more in the future. Cheers!

@Adlai-Holler @maicki: Do let me know your comments and to let me know if I need to make any changes for this patch. 👍 ",leotumwattana,appleguy
2786,2017-01-03 22:16:42,"@leotumwattana Hi! I'm really glad you're enjoying the framework! Would you be willing to re-open this PR with `master` as the base branch, rather than `2.0`? ",Adlai-Holler,leotumwattana
2786,2017-01-03 22:43:31,@Adlai-Holler: Sure thing. It's getting pretty late into the night here in HK. Let me separate into different PR and base it off master and resubmit sometime tomorrow. 👍 ,leotumwattana,Adlai-Holler
2784,2016-12-18 08:36:02,"@garrettmoon is there a lower-level way to do this?  E.g. How does ASDelegateProxy work in these cases without having to manually forward those methods?  I'm going to merge since @maicki already approved, but let me know your thoughts!",appleguy,garrettmoon
2784,2016-12-18 18:07:21,@appleguy ASDelegateProxy already forwards protocol. Is that your question?,garrettmoon,appleguy
2782,2016-12-19 04:41:03,"Here's my feedback, although I don't intend for it to be definitive — I'm interested in understanding what behavior @maicki would prefer we support.

## 1. The internal complexity of ASNetworkImageNode
- Is important to consider and aim to reduce.  However, I believe it is *essential* that internal complexity not be a factor in the API design.  The reason is that there are sufficiently many clients of ASDK (over 1,000 developers regularly interacting with it), so that some increase in internal complexity would suggest we should invest in a refactor rather than affect the API.

## 2. There are exactly 3 cases to consider ASNetworkImageNode with:

Note that in the last case (both are set), we *must* provide *identical behavior* regardless of call order — therefore, regardless of implementation complexity, the decision on API behavior is only for the ""both"" case and doesn't care about the order.

### a. Just .URL
This behavior is simple.  It should not change from the prior implementation.  If externally *read*, the .image property will become set after the URL has loaded.  Likewise, the rendered version will be cleared when exiting the Display range, and the .image property itself will be cleared existing the Preload range.

### b. Just .image
This behavior is also simple, but doesn't work correctly in 2.0.  When just the .image is set and .URL is *never* set, the class should behave like ASImageNode.  Why?  Several reasons:

- many, many clients (including all over Pinterest) have already relied on this behavior.  That's because it's intuitive and very frequently convenient for app developers.
- the convenience for devs is highlighted by the case of PIImageNode.  It would be very difficult if we had to create a separate subclass and ensure even brand-new developers *always* use the base vs network class in the right situation.
- It would also make it more difficult for us to add features internally.  E.g., a network-loaded button background, or even the future ASVideoNode that doesn't subclass ASImageNode — they would each have to carefully manage a Network vs Non-Network node to support both the direct-set asset / thumbnail as well as the URL-based option.

### c. Both .URL and .image.
The case of BOTH .URL and .image set is less clear.  However, the case is clarified by seeing there are only two reasons a user would do this:

- they want to load the URL image but are providing a cached or smaller version of the image to ""prime"" the view,
- the code is incorrect and inconsistent.  I don't believe there is a use case where the .image should take precedence over the .URL, especially because there are memory risks to doing this (ASDK can't yield the memory, so it should only ever be used with small icon-like assets and these almost never have .URLs)

So lastly, this diff is a suggestion from @garrettmoon for how to make 2c. less ambiguous while still being VERY strict at preventing developers from mistakenly entering the ""2c2"" case.  The idea is that this will behave functionally identical to ""it's not allowed to set both URL and .image on a Network node"", *but* provide users *a technically-possible way* to support the commonly-useful pattern of ""priming"" a network image node.

## 3. To make this call (which would increase impl. complexity), let's look at the use case
What's causing this to be so important?  It's transitions that upscale photos, including the exact case @rcancro is working on right now with Pin Closeup's standard zoom-in.

Por these, it is *essential* to support upscaling a low-res photo *while immediately kicking off a new high-res download,* as well as *async-displaying the new version*, as well as *swapping in the high-res version as soon as it's done, in a seamless way*.  This behavior is super useful because it is so hard to handle at an application layer.

This was a very, very key use case that AsyncDisplayKit was architected to excel at in the pre-1.0 days, with ASMultiplexImageNode bearing the complexity of the use case.  However, Multiplex has fallen into non-maintenance, and so we have two paths to choose at this point:

- Let Multiplex continue to fade away, and probably become deprecated (e.g. we don't need to spend any time on it).  Support basic transition use case with something like ""ephemeralImage"", or simply using the .image + .URL combination as a simple implementation for this.
- Alternatively, plan to revive Multiplex and refactor it to share more code with Network.  Simplify Multiplex API so the ""common transition"" use case can be done more easily than the current dataSource-based API.  Keep NetworkImage as simple as possible and do not allow transitions to be performed with it.

Thanks for reading a long note, hope this was useful to the discussion :)",appleguy,garrettmoon
2782,2016-12-19 04:41:03,"Here's my feedback, although I don't intend for it to be definitive — I'm interested in understanding what behavior @maicki would prefer we support.

## 1. The internal complexity of ASNetworkImageNode
- Is important to consider and aim to reduce.  However, I believe it is *essential* that internal complexity not be a factor in the API design.  The reason is that there are sufficiently many clients of ASDK (over 1,000 developers regularly interacting with it), so that some increase in internal complexity would suggest we should invest in a refactor rather than affect the API.

## 2. There are exactly 3 cases to consider ASNetworkImageNode with:

Note that in the last case (both are set), we *must* provide *identical behavior* regardless of call order — therefore, regardless of implementation complexity, the decision on API behavior is only for the ""both"" case and doesn't care about the order.

### a. Just .URL
This behavior is simple.  It should not change from the prior implementation.  If externally *read*, the .image property will become set after the URL has loaded.  Likewise, the rendered version will be cleared when exiting the Display range, and the .image property itself will be cleared existing the Preload range.

### b. Just .image
This behavior is also simple, but doesn't work correctly in 2.0.  When just the .image is set and .URL is *never* set, the class should behave like ASImageNode.  Why?  Several reasons:

- many, many clients (including all over Pinterest) have already relied on this behavior.  That's because it's intuitive and very frequently convenient for app developers.
- the convenience for devs is highlighted by the case of PIImageNode.  It would be very difficult if we had to create a separate subclass and ensure even brand-new developers *always* use the base vs network class in the right situation.
- It would also make it more difficult for us to add features internally.  E.g., a network-loaded button background, or even the future ASVideoNode that doesn't subclass ASImageNode — they would each have to carefully manage a Network vs Non-Network node to support both the direct-set asset / thumbnail as well as the URL-based option.

### c. Both .URL and .image.
The case of BOTH .URL and .image set is less clear.  However, the case is clarified by seeing there are only two reasons a user would do this:

- they want to load the URL image but are providing a cached or smaller version of the image to ""prime"" the view,
- the code is incorrect and inconsistent.  I don't believe there is a use case where the .image should take precedence over the .URL, especially because there are memory risks to doing this (ASDK can't yield the memory, so it should only ever be used with small icon-like assets and these almost never have .URLs)

So lastly, this diff is a suggestion from @garrettmoon for how to make 2c. less ambiguous while still being VERY strict at preventing developers from mistakenly entering the ""2c2"" case.  The idea is that this will behave functionally identical to ""it's not allowed to set both URL and .image on a Network node"", *but* provide users *a technically-possible way* to support the commonly-useful pattern of ""priming"" a network image node.

## 3. To make this call (which would increase impl. complexity), let's look at the use case
What's causing this to be so important?  It's transitions that upscale photos, including the exact case @rcancro is working on right now with Pin Closeup's standard zoom-in.

Por these, it is *essential* to support upscaling a low-res photo *while immediately kicking off a new high-res download,* as well as *async-displaying the new version*, as well as *swapping in the high-res version as soon as it's done, in a seamless way*.  This behavior is super useful because it is so hard to handle at an application layer.

This was a very, very key use case that AsyncDisplayKit was architected to excel at in the pre-1.0 days, with ASMultiplexImageNode bearing the complexity of the use case.  However, Multiplex has fallen into non-maintenance, and so we have two paths to choose at this point:

- Let Multiplex continue to fade away, and probably become deprecated (e.g. we don't need to spend any time on it).  Support basic transition use case with something like ""ephemeralImage"", or simply using the .image + .URL combination as a simple implementation for this.
- Alternatively, plan to revive Multiplex and refactor it to share more code with Network.  Simplify Multiplex API so the ""common transition"" use case can be done more easily than the current dataSource-based API.  Keep NetworkImage as simple as possible and do not allow transitions to be performed with it.

Thanks for reading a long note, hope this was useful to the discussion :)",appleguy,maicki
2782,2016-12-21 10:48:38,"As already discussed extensively with @garrettmoon my thoughts around the behavior of each of the cases for an `ASNetworkImageNode` are:

### a. Just .URL
Agree with @appleguy ... no changes: This behavior is simple. It should not change from the prior implementation. If externally read, the .image property will become set after the URL has loaded. Likewise, the rendered version will be cleared when exiting the Display range, and the .image property itself will be cleared existing the Preload range.

### b. Just .image
Agree with @appleguy: This behavior is also simple, but doesn't work correctly in 2.0. When just the .image is set and .URL is never set, the class should behave like ASImageNode.

### c. Both .URL and .image will be set
In the case that a client set's an URL and an image it's less clear, but the thinking is to reduce the state and the side effects it can have it should actually work this:
1. If a URL is set it behaves like an `ASNetworkImageNode`. If an image should show before the image did load from the network it should be assigned to the `defaultImage` property and *not* the `image` property directly. The same way as the `ASNetworkImageNode` works as of today. I don't see any reason why we should support setting an `.image` as temporary image directly if there is already the `defaultImage` ... that said `defaultImage` is a really poor name for what it actually is: a placeholder image before the image did load from the network.
2. As soon as a developer assigns an image (doesn't matter if an URL was set before) the node will be transformed to an `ASImageNode` and the old state will be discarded.
3. If an `.image` is set and a `URL` will be set  the node will be transformed from an `ASImageNode` to an `ASNetworkImageNode`. The `.image` will be removed replaced with the `defaultImage` until the image did load from the network and replaces the `defaultImage` as `image` as the current `ASNetworkImage` does work.

### Why this behavior?
Imho, the behavior above is clear to describe as well hopefully reduces side effects for all kinds of quirks that can happen and added complexity we have to implement in case we want to support setting and `.image` as well as an `URL` and if someone is crazy also setting a `defaultImage` at the same time.

### Summary
To summarize the states:
1. Setting an `URL`, the node will become an `ASNetworkImageNode` and it works the same way as currently. If the developer would like to display an image before the final image did load from the network, it should use the `defaultImage` as it's currently the case. All previous state is discarded as soon as a new `URL` is set.
2. Setting an image directly to the `image` property, the node will become an `ASImageNode` with resetting all previous state like the `defaultImage` or the `URL` that was maybe set previously.",maicki,garrettmoon
2782,2016-12-21 10:48:38,"As already discussed extensively with @garrettmoon my thoughts around the behavior of each of the cases for an `ASNetworkImageNode` are:

### a. Just .URL
Agree with @appleguy ... no changes: This behavior is simple. It should not change from the prior implementation. If externally read, the .image property will become set after the URL has loaded. Likewise, the rendered version will be cleared when exiting the Display range, and the .image property itself will be cleared existing the Preload range.

### b. Just .image
Agree with @appleguy: This behavior is also simple, but doesn't work correctly in 2.0. When just the .image is set and .URL is never set, the class should behave like ASImageNode.

### c. Both .URL and .image will be set
In the case that a client set's an URL and an image it's less clear, but the thinking is to reduce the state and the side effects it can have it should actually work this:
1. If a URL is set it behaves like an `ASNetworkImageNode`. If an image should show before the image did load from the network it should be assigned to the `defaultImage` property and *not* the `image` property directly. The same way as the `ASNetworkImageNode` works as of today. I don't see any reason why we should support setting an `.image` as temporary image directly if there is already the `defaultImage` ... that said `defaultImage` is a really poor name for what it actually is: a placeholder image before the image did load from the network.
2. As soon as a developer assigns an image (doesn't matter if an URL was set before) the node will be transformed to an `ASImageNode` and the old state will be discarded.
3. If an `.image` is set and a `URL` will be set  the node will be transformed from an `ASImageNode` to an `ASNetworkImageNode`. The `.image` will be removed replaced with the `defaultImage` until the image did load from the network and replaces the `defaultImage` as `image` as the current `ASNetworkImage` does work.

### Why this behavior?
Imho, the behavior above is clear to describe as well hopefully reduces side effects for all kinds of quirks that can happen and added complexity we have to implement in case we want to support setting and `.image` as well as an `URL` and if someone is crazy also setting a `defaultImage` at the same time.

### Summary
To summarize the states:
1. Setting an `URL`, the node will become an `ASNetworkImageNode` and it works the same way as currently. If the developer would like to display an image before the final image did load from the network, it should use the `defaultImage` as it's currently the case. All previous state is discarded as soon as a new `URL` is set.
2. Setting an image directly to the `image` property, the node will become an `ASImageNode` with resetting all previous state like the `defaultImage` or the `URL` that was maybe set previously.",maicki,appleguy
2782,2017-01-03 23:52:31,"@garrettmoon Sorry to bother, but could you rebase this when you have time and we'll land it?",Adlai-Holler,garrettmoon
2777,2016-12-15 15:44:28,"@leotumwattana In one of our projects I had to implement a similar feature. The behavior was a single line of editable text node and when you start typing it will grow up to three lines. When it exceeds the max number of lines it will stop growing and start scrolling. 

The implementation is:
- set a preferred frame size for the editable text node (defining the max height)
- adopt the `ASEditableTextNodeDelegate`
- implement the `editableTextNodeDidUpdateText:` method
- create a variable in which you will save the calculated content size of the editable text node
- in each call of the `editableTextNodeDidUpdateText:` check whether the text has grown and relayout the text node.

Basic example:
- Lets say that we need maximum of `3 lines` and assume that the point size of the font is `20px` so our max frame is `60px` height.
- If we have `1 line` we will layout our node to fit.
- if we have more than `2 lines` we will limit our node to the max height so that it can enable its scrolling.

Sorry in advance if my implementation is not explained clearly. There are probably better implementations but this one works for men. If you need any additional help you can contact me in the ASDK Slack I am `gpetrov` there.",EviluS,leotumwattana
2777,2017-02-23 15:09:52,"Hey guys, Awesome feature. Thanks @leotumwattana. There's a bug with it though: The way you are measuring text does not take into account the `textContainerInset` property.   For example, try `_textInputNode.textContainerInset = UIEdgeInsetsMake(4, 15, 4, 15);` and you will see that it doesn't expand even when there is one line of text + <30pts of new text. :(  Maybe I'll create a new issue...

Here's the new issue: https://github.com/facebook/AsyncDisplayKit/issues/3065",skensell,leotumwattana
2776,2016-12-17 06:21:12,"@hartbit I remember we talked about it on Slack, did you find any solution yet?",maicki,hartbit
2776,2017-01-17 07:40:49,"@hartbit - Due to the length of time since this thread was active, I'm going to close this issue. However, if you have any updates, the community would benefit from your knowledge and we'd be curious to hear what worked or didn't! Feel free to re-open this issue or create a new one and we'd be happy to help out.",hannahmbanana,hartbit
2773,2016-12-19 04:49:02,"Regarding crash vs assertion.  I think we need to develop a better way to log assertions in production, but I disagree they should be crashes by default.  IMO we should develop a new macro for this case and offer two things to app developers:

- A #define switch to turn these special types of logs into hard crashes in production (off by default)
- An override where they can log nonfatal, e.g. with Fabric, so that the logs are still visible and problems are discovered in production.  This could be registering a block, like +[ASDisplayNode setNonfatalHandlerBlock:] or something.

I think this is fairly important as a default, because the vast majority of these cases happen with newly-developed code and have a relatively minor problem when the frame is not set.  In most cases, teams (at any company) would prefer to get /some/ experiment data rather than have to hotfix the app to stop crashes or get initial data collection.

@maicki @Adlai-Holler @nguyenhuy @garrettmoon this is a great discussion for the team to have so that we can set a standard operating practice around error handling of this sort.",appleguy,garrettmoon
2773,2016-12-19 04:49:02,"Regarding crash vs assertion.  I think we need to develop a better way to log assertions in production, but I disagree they should be crashes by default.  IMO we should develop a new macro for this case and offer two things to app developers:

- A #define switch to turn these special types of logs into hard crashes in production (off by default)
- An override where they can log nonfatal, e.g. with Fabric, so that the logs are still visible and problems are discovered in production.  This could be registering a block, like +[ASDisplayNode setNonfatalHandlerBlock:] or something.

I think this is fairly important as a default, because the vast majority of these cases happen with newly-developed code and have a relatively minor problem when the frame is not set.  In most cases, teams (at any company) would prefer to get /some/ experiment data rather than have to hotfix the app to stop crashes or get initial data collection.

@maicki @Adlai-Holler @nguyenhuy @garrettmoon this is a great discussion for the team to have so that we can set a standard operating practice around error handling of this sort.",appleguy,maicki
2773,2016-12-19 23:11:42,@appleguy Thank you for the feedback. I think this is ready to be looked at again.,rmls,appleguy
2771,2016-12-14 17:03:38,"@appleguy @nguyenhuy This will resolve the issue, but it feels kind of hacky.

Since the issue we're addressing only presents under iOS 8, should we have two separate code paths? This introduces pretty significant overhead into a highly-optimized method.

We have no guarantee that all nodes will go through this system – for example, in Pinterest some node classes have code in `-dealloc` that enqueues subnodes onto an application-level deallocation queue.

Let's remove that product code and roll with this. If other problems present in the future, we'll go from there.",Adlai-Holler,nguyenhuy
2771,2016-12-14 17:27:14,"@Adlai-Holler I've just pushed a new commit that avoid strongify/weakify. While it is true that this fix introduces overhead, the biggest performance impact will be in case that `-releaseObjectInBackground:` is called on a background thread. This case is exactly why we need this fix in the first place. I think it's a fair trade-off between safety and performance. In case `-releaseObjectInBackground:` is called on main, the overhead is not that bad as `ASPerformBlockOnMainThread()` is quite performant and is used everywhere anyway. I can even tweak it to avoid block allocation.

I'm not sure why this system doesn't catch subnodes that are enqueued onto an application-level queue, since `-releaseObjectInBackground:` is the only public API of ASDeallocQueue. I may be missing something obvious here. Could you please elaborate?

Last but not least, while it is true that the crash we're seeing in Pinterest app only occurs on iOS 8, I'm worrying that we haven't achieved correctness in the current implementation. It is entirely possible for developers to lend a node to UIKit classes and then UIKit associates some unsafe-to-be-deallocated-off-main objects to the node. Making a node a UIScrollViewDelegate is an example, although its side effect can only be seen in iOS 8. So I still think a fix is necessary, now or later.",nguyenhuy,Adlai-Holler
2771,2016-12-14 17:43:52,"@nguyenhuy In fact, as I think about this, this unfortunately won't fix the majority of cases.

For instance, let's say you have a view controller with `vcNode` and one if its subnodes, `subnode`. Let's say `subnode` becomes the scroll view's delegate (which is likely). When the view controller is deallocated (on main) it will enqueue `vcNode` onto the deallocation queue, but `subnode` will not have its associated objects cleared.

Unfortunately this code path just isn't used for most nodes. It's used as the _jumping off point_ to trigger entire hierarchies to be deallocated.",Adlai-Holler,nguyenhuy
2771,2016-12-14 17:53:10,"@Adlai-Holler Oh yes, that's true. And we can't do something like this in `-dealloc` because we can't retain `self`:


Looks like the only way to fix this is to have a blacklist of associated keys. Gonna close this PR. Thank you!",nguyenhuy,Adlai-Holler
2769,2017-02-08 21:05:42,@garrettmoon That'd be swell.  Thanks.,jeffdav,garrettmoon
2769,2017-02-09 08:13:07,"@davitPiloyan93 Ahh, that's odd. You might want to also try what @garrettmoon suggested above (https://github.com/facebook/AsyncDisplayKit/issues/2769#issuecomment-278460946). It works great for me. ",phuson,garrettmoon
2769,2017-02-13 10:55:01,"@garrettmoon This issue does still exist in 2.1 , the reason why i found its resolved is because that I have the gif cache for working version(1.9.81).

Anyway , I'm very glad to heard that it will be fixed in next release version.
",xiaomaogong,garrettmoon
2764,2016-12-19 04:52:16,"@nguyenhuy very impressive approach, thank you for working on this!  Quite valuable as an investment in the long term future of the locking strategy.

I'm pretty happy to see where locking is these days with __instanceLock__ having almost eliminated deadlocking cases, and this will help bring us very close to zero (besides cases where the CPU is truly tied up for a long time, like the forced recursive display when a large display queue exists).

I'll try to review this later in the week, but please don't wait for me to land it (especially if either Michael or Adlai can review, then Garrett + either one of their accepts should have authority to land this -- in keeping with our diff review guidelines, this kind of change should require two core team accepts).",appleguy,nguyenhuy
2762,2017-02-10 18:30:27,"Hi @garrettmoon ,
As I said in my previous comment, I was unable to reproduce the issue in a simple test project, and there are too many possible causes in my app to try. Also, I'm not sure where it could come from, as I'm not an expert on what's been changed recently in ASDK.
I can confirm that commit `5b80a6` introduces the issue, as exactly the same code works with previous commits. That's why I'm asking for pointers on things I could try out to debug this.
Cheers,",flovouin,garrettmoon
2762,2017-02-14 22:06:08,Thanks @flovouin sorry for not following up with you sooner on this. @rankinit if you're still hitting this issue would you mind putting up a standalone sample project for us to take a look at?,garrettmoon,flovouin
2761,2016-12-13 20:06:08,"Ah nice catch @hartbit 

Jenkins test this please.",Adlai-Holler,hartbit
2761,2016-12-18 08:38:26,"Thanks a lot @hartbit, very glad to have your help!",appleguy,hartbit
2760,2017-01-17 22:46:55,@appleguy @nguyenhuy - closing this issue since Huy has a PR up. ,hannahmbanana,appleguy
2755,2016-12-17 06:27:08,@garrettmoon Can we close this PR now?,maicki,garrettmoon
2755,2016-12-17 15:59:39,"@maicki Yeah, I'll reopen when I have time to follow up.",garrettmoon,maicki
2754,2016-12-12 17:01:57,"@appleguy I don't know why we should move the instance lock? We could create it's own header for lock related ivars and only import it if we need it. What do you think about that? Maybe it will also cleanup some ...

It makes sense to have it in an internal header and import it when we need it in subclasses. I agree we should not define different ivars for subclasses of `ASDisplayNode` though.",maicki,appleguy
2753,2016-12-12 18:08:27,@appleguy Could we also get some unit test for that maybe?,maicki,appleguy
2752,2016-12-17 16:59:38,@appleguy Give #2794 a look,maicki,appleguy
2752,2016-12-19 05:08:38,@maicki very thankful for you taking this on for me!  I missed my expected deadline for this task so you saved it for 2.0.1 :).,appleguy,maicki
2752,2016-12-19 18:59:41,"Since @maicki is sick, this has to be punted :(",garrettmoon,maicki
2751,2016-12-12 18:41:28,@appleguy - could you merge this? I would like to get this into the sync candidate branch today.,hannahmbanana,appleguy
2751,2016-12-12 19:10:23,Thank you for adding this for me @appleguy!,hannahmbanana,appleguy
2750,2017-01-01 20:35:20,@haritowa - would you be willing to put checkmarks next to the tasks that you completed so we can see which ones remain? Thanks!,hannahmbanana,haritowa
2750,2017-01-03 10:43:10,@hannahmbanana as soon as PR will be reviewed :),haritowa,hannahmbanana
2750,2017-01-12 23:05:38,@haritowa - I merged your PR. Thank you so much! ,hannahmbanana,haritowa
2750,2017-01-15 10:27:37,"@hannahmbanana cool, that PR contains layout fixes for http://asyncdisplaykit.org/docs/automatic-layout-containers.html too, so ""image too big"" fixed too 

Any problems with http://asyncdisplaykit.org/docs/layout-transition-api.html? ",haritowa,hannahmbanana
2750,2017-01-17 22:36:58,"@haritowa - Great, thanks! Looks like one task remains. ",hannahmbanana,haritowa
2749,2016-12-17 06:30:32,"@ryanfitz This an be the case if you trigger a re-display / re-layout in the delegate method and the image is already cached the delegate method will be called before you actually set the delegate. We could push this to the next runloop and expect the delegate will be set than.

@garrettmoon Thoughts?",maicki,ryanfitz
2749,2016-12-20 19:20:39,@ryanfitz can you tell us exactly what you're doing in the delegate callbacks?,garrettmoon,ryanfitz
2749,2016-12-20 20:20:12,"@garrettmoon I actually removed all logic in my delegate methods and still experienced this issue.  Here is what my delegate was doing:

",ryanfitz,garrettmoon
2747,2016-12-18 07:47:50,@maicki - I agree with your call.,hannahmbanana,maicki
2747,2016-12-18 20:28:17,@master-nevi - thanks for pointing out this inconsistency! We decided to remove the legacy functionality.,hannahmbanana,master-nevi
2747,2016-12-19 04:11:06,Your welcome @hannahmbanana ! Glad I could help. ,master-nevi,hannahmbanana
2746,2016-12-13 17:34:01,"@rcancro phenomenal fix, thank you!!",appleguy,rcancro
2733,2016-12-08 15:53:03,Thanks @nguyenhuy !,maicki,nguyenhuy
2732,2016-12-13 03:45:13,@jaichaudhry thanks for writing this!  I think it's a great idea to have the contrast between techniques.  I will do a followup diff adding a comment to explain that users are welcome to use whichever style they prefer.,appleguy,jaichaudhry
2732,2016-12-13 15:25:11,@appleguy My Pleasure :),jaichaudhry,appleguy
2721,2016-12-09 12:46:58,@Adlai-Holler Done. Happy to be a good community citizen.,8ofproject,Adlai-Holler
2713,2016-12-05 20:37:44,"@tomizimobile - would it be possible to attach screen shots or, ideally, a sample project? Thanks!",hannahmbanana,tomizimobile
2713,2016-12-05 20:50:49,@tomizimobile - could you try updating to master? I believe @maicki made a layout change in the last few days that might have fixed this. ,hannahmbanana,tomizimobile
2713,2016-12-05 20:52:15,"@hannahmbanana I should've mentioned, I was working with master this morning and saw this issue, and that's when I narrowed the problem down to that commit.",tomizimobile,hannahmbanana
2713,2016-12-07 22:02:24,"@tomizimobile Hey, can you please pull the latest from master and if possible provide some kind of really small example. I try to reproduce with a similar setup as you have, but unfortunately I'm not able to. Thanks!",maicki,tomizimobile
2713,2016-12-08 13:10:40,"@maicki here you go - I've taken that exact class and stripped it down a bit, in case it's something very specific to the way i'm animating things or something like that. Look at the bottom of `ModalViewController.swift` for the class `HeaderNode`

[ASDK-crash.zip](https://github.com/facebook/AsyncDisplayKit/files/639469/ASDK-crash.zip)
",tomizimobile,maicki
2713,2016-12-08 17:35:55,@tomizimobile I looked into this into a bit more details today. The important change we did with 2.0 is to shift the responsibility to resize a specific node of a hierarchy to the supernode of it. In this case as you use a layout transition within a cell the cell is responsible for updating it's size based on the new layout. Unfortunately you don't update the size of the node in your `animateLayoutTransition` implementation. You can see the right behavior if you just call `super.animateLayoutTransition(context)` or instead of calling `transitionLayout()` call `setNeedsLayout()`. In case of `setNeedsLayout()` the display node internally will update the size to the new layout without calling the layout transition api.,maicki,tomizimobile
2713,2016-12-08 18:32:40,"@maicki huh, I didn't know that just by calling `super.animateLayoutTransition(context)` it would perform all the necessary animations for me by default, neat! I don't think that was available when I initially did this. I'd much rather just call `transitionLayout...` and not override `animateLayoutTransition` at all. I've got a couple concerns with that though. 
- ~Can I customize the speed of the animation? It looks like the nodes move at a different rate than the cell resizes~ i found the answer, `defaultLayoutTransitionDuration`
- In that project, the title of the button `follow` changes based on the state, and it doesn't seem like it's resizing properly. If you change line 212 in `ModalViewController.swift` to `follow.isSelected = true`, you'll see after the transition that the new title is cut off, because the initial title is smaller than the title after the transition. (It works fine if I override `animateLayoutTransition` and add `follow.setNeedsLayout()`, but I figured this would be handled)",tomizimobile,maicki
2713,2016-12-12 18:32:15,@maicki can you investigate for 2.0.1 and punt if necessary?,garrettmoon,maicki
2713,2016-12-15 14:16:31,"@tomizimobile Hey I looked a bit more into this and there are a couple of ways to prevent this:
1. You can call `follow.setNeedsLayout` to the follow button before calling `super.animateLayoutTransition(context);`
2. You can call the layout transition api with should measure `async: false`: `transitionLayout(withAnimation: true, shouldMeasureAsync: false, measurementCompletion: nil)`.

The problem currently could be that the follow button is get a layout pass before we call through with the new size due to the async nature. The transition api will be one of main focuses for 2.1+ that I will work on and I have a couple of ideas to tackle this kind of problem. I think as the this problem is not related anymore to the main title / issue I will close this issue. @tomizimobile can you please open a new issue with the new issue (text truncating), we would appreciate it. Thanks!",maicki,tomizimobile
2712,2016-12-05 20:53:50,@Adlai-Holler Nice!,maicki,Adlai-Holler
2711,2017-01-03 23:03:26,@ryanfitz Did #2815 fix the issue for you? It seems that it was targeted specifically at the `reloadData` code path you're using.,Adlai-Holler,ryanfitz
2711,2017-01-05 12:40:41,@Adlai-Holler #2815 did fix this issue for me,ryanfitz,Adlai-Holler
2710,2016-12-05 16:05:07,"@garrettmoon It's the same behavior we had, we just moved in #2130 so there should be no regression",maicki,garrettmoon
2708,2016-12-06 22:23:53,@garrettmoon @Adlai-Holler @appleguy  Ready for review.,maicki,Adlai-Holler
2707,2016-12-18 08:39:27,"@lappp9  Very cool!!  I think we should support it on base ASImageNode for sure, and that it would primarily see usage in ASButtonNode.  Will review when I get a chance in the next few days.  Thanks for working on this :)",appleguy,lappp9
2707,2017-01-13 20:05:44,@appleguy Any ETA for merging this PR to master? Asking for a friend. 😄 ,rainypixels,appleguy
2707,2017-01-15 00:06:11,@rainypixels  I need to change some stuff around before it'll be ready to merge.  I'll try to update it this next week!,lappp9,rainypixels
2707,2017-01-15 03:41:11,@lappp9 That would be excellent! Looking forward to it. ,rainypixels,lappp9
2707,2017-02-10 07:10:19,Closing this due to inactivity. @rainypixels feel free to open a similar diff if this feature is very valuable to y'all. Cheers!,Adlai-Holler,rainypixels
2694,2016-12-06 00:29:46,"@maicki to @nguyenhuy 's point -- I think it is true this may extend node lifecycle, and we should at least schedule another 2.0.1 task to address that.

One strategy would be to schedule a runloop queue item to clear the pointer to the ASLayout, if by the time the queue item runs, it still should be cleared.  This is similar to how we call didExitDisplayState (clearContents) on NON-range managed nodes -- we schedule it the moment they're removed from the parent, but we re-check once the block runs, and sometimes they've re-entered a new parent by that time so we skip the clearing.

That said, the main concern would be ultra high volumes of block dispatches and retain / release if this happened on every node.  So as long as we make sure that, in practice, it doesn't occur when a full node hierarchy is being destroyed (e.g. the parent of a large tree is released) -- and we have some way to detect this case (e.g. ""removeSupernodeDueToDyingParent"" - and not schedule the cleanup in that path)...then it should be a good solution for the more rare, manual removeFromSupernode calls.",appleguy,maicki
2694,2016-12-06 00:30:14,"@maicki after you address my two other comments, feel  free to land this and do another diff next week with followup for the memory lifetime issue - I don't think it is a blocker.",appleguy,maicki
2694,2016-12-06 16:22:15,@appleguy Can you give it another look. I decided to move a property for the time for caching the sublayouts as we called the `cacheSublayouts` in a class initializer and so we had to use `->` to access or set the instance variables of the layout. I also removed a couple of added class initializer now to reduce the changes.,maicki,appleguy
2691,2016-12-02 21:14:51,@ay8s your work on the site is greatly appreciated by the whole team!!,appleguy,ay8s
2689,2016-12-01 20:52:15,@garrettmoon looks good to me - only wondering about ASTableView and ASCollectionView's (node-free) memory management behavior.  I believe they listen to memory warnings and ask the range controller to clear if they are not visible.,appleguy,garrettmoon
2686,2016-12-02 22:57:24,Thanks @Adlai-Holler for the tip! Would be happy to be a part of the ASDK community ;-),ngoctr,Adlai-Holler
2683,2016-11-30 03:31:06,"@hannahmbanana  Glad to receive your reply, my project is using the 2.0 version.I found a very strange phenomenon, when I put all my code into the `ASDKgram` run this example, when the first time to open `[tableNode: willBeginBatchFetchWithContext:]` will only be called once, which makes me very distressed",cd-chen,hannahmbanana
2683,2016-11-30 06:22:11,"@hannahmbanana - The current version is 2.0-beta.1, try to use cocoapods to update to 2.0-beta.3, but without success.",cd-chen,hannahmbanana
2683,2016-11-30 08:02:08,"@hannahmbanana - When I try` pod search AsyncDisplayKit`, ASDK is the highest version2.0-beta.1
",cd-chen,hannahmbanana
2683,2016-11-30 08:45:23,"@hannahmbanana - I think I have solved my problem,can not wait to test my project. Version 2.0-beta.1 is a great experience. Thank you for your answer!",cd-chen,hannahmbanana
2677,2016-11-29 20:17:43,"I tried reproducing this in the `LayoutSpecExamples-Swift` project, but was unable to reproduce the bug. Here's the diff:  [GaddLayoutBug.txt](https://github.com/facebook/AsyncDisplayKit/files/620100/GaddLayoutBug.txt)

@GitGadd - could you print out the ascii art string as well as the full hierarchy (using recursiveDescription)?
",hannahmbanana,GitGadd
2677,2016-11-30 15:45:12,"@GitGadd Hey, I looked a bit into it and I would be great if you could elaborate a bit more about the issue ... as setting `flexBasis` to 300 means the stack will have a minimum width of 300 so based on this value it will layout all of the subnodes based on that. Furthermore if the hosting view is smaller than the 300 it will still use the 300 to layout all of the children.

I think there are multiple ways to move change the layout description in case you would like it to have like this:

<img width=""378"" alt=""screen shot 2016-11-30 at 7 38 45 am"" src=""https://cloud.githubusercontent.com/assets/25288/20759209/1698cd90-b6d1-11e6-9dc3-880a1ea2f6c7.png"">


Change `layoutSpecThatFits:` in `ViewController` to this:



Or if you don't want to set the `width` static to the stack you could solve it by changing `layoutSpecThatFits` in `ViewController` to:



and `layoutSpecThatFits:` in `AXActionPanelControllerTextLabelWithBackground`:



Hope that helps ...asis` to 300 pt means the stack will have a minimum width of 300 so based on this value it will layout all of the subnodes based. Furthermore if the hosting view is smaller than the 300 it will still use the 300 to layout all of the children.",maicki,GitGadd
2677,2016-12-05 08:18:11,"Noticed https://github.com/facebook/AsyncDisplayKit/commit/0d439a43b6eef8c720d28b5a93213074b827a7a6 when reading through changes; Perhaps the new implementation is caching a size from one of the previous layout passes, and then not recomputing when a later pass invalidates it?

In my case: The alert is first being laid out at full screen width, then later as the smaller alert size. The text is then drawn at what seems to be full width anyway.

In @rewandy 's case: The nodes are first being laid out at their intrinsic size (i.e. rendering centered doesn't add padding), then later laid out at 25% of the stack width.",GitGadd,rewandy
2677,2016-12-05 15:36:02,"[This](https://github.com/facebook/AsyncDisplayKit/pull/2643) PR fixes my particular issue (thanks @maicki!), as mentioned in the Slack channel. But it sounds like the team needs to do further testing before they can land it. 

@GitGadd maybe you can give that a shot as well? Though it sounds like you may have already worked around the issue.",rewandy,GitGadd
2677,2016-12-05 15:36:02,"[This](https://github.com/facebook/AsyncDisplayKit/pull/2643) PR fixes my particular issue (thanks @maicki!), as mentioned in the Slack channel. But it sounds like the team needs to do further testing before they can land it. 

@GitGadd maybe you can give that a shot as well? Though it sounds like you may have already worked around the issue.",rewandy,maicki
2677,2016-12-05 15:48:01,@rewandy Thanks for mentioning the PR. @GitGadd As @rewandy said would be awesome if you could give it a try and do some further testing on this PR. We would appreciate it! Thanks!,maicki,GitGadd
2677,2016-12-05 15:48:01,@rewandy Thanks for mentioning the PR. @GitGadd As @rewandy said would be awesome if you could give it a try and do some further testing on this PR. We would appreciate it! Thanks!,maicki,rewandy
2677,2016-12-05 17:25:03,@maicki The mentioned PR does resolve the issue in my sample project as well!,GitGadd,maicki
2676,2016-11-29 01:23:47,"@maicki thanks, this looks correct to me!",appleguy,maicki
2675,2016-11-29 21:39:58,"@Adlai-Holler a very important change, great attention to detail here!",appleguy,Adlai-Holler
2672,2016-11-28 23:51:20,@Adlai-Holler - could you rebase please? :),hannahmbanana,Adlai-Holler
2672,2016-11-29 18:46:34,@Adlai-Holler thank you for investigating this.,appleguy,Adlai-Holler
2671,2016-11-28 23:33:14,"Awesome, thanks so much @hannahmbanana !",garrettmoon,hannahmbanana
2668,2016-11-28 19:19:01,"Thank you @Adlai-Holler, I'll follow that.",gurhub,Adlai-Holler
2667,2016-11-28 21:20:55,Thank you @hannahmbanana. I'll follow the other issue.,gurhub,hannahmbanana
2666,2016-11-28 19:17:36,"Thank you @hannahmbanana, I'll follow that. FYI, I'm getting same error in many other examples. Probably all will be fixed with 1 simple fix :)",gurhub,hannahmbanana
2663,2016-11-27 20:42:01,@garrettmoon Quick update on that. I already worked on that and will have a broader fix for layout transition in general (this will also fix this issue). Will likely be tracked in here: #2657,maicki,garrettmoon
2663,2016-11-27 20:43:11,@maicki Nice!,garrettmoon,maicki
2658,2016-11-29 16:04:22,"@flovouin we pulled this out of the milestone (trying to be realistic about what we can get done), but it's actively being investigated!",garrettmoon,flovouin
2658,2016-12-19 18:21:00,"Hey @flovouin unfortunately we've got to kick this back. Removing the view from the cell was a band-aid that we shouldn't roll with, and it caused other issues. There is a cluster of related table-cell-visibility issues (all linked to 2800 above) that I hope to solve our existing range controller architecture rather than depending on the hierarchy teardown to do it.",Adlai-Holler,flovouin
2658,2017-01-12 09:58:30,"Hi @Adlai-Holler 
Could you please update me on the status of this issue?
I tried both the test project mentioned above and my app with `master` and it seems that the problem is solved. #2805 also seems to indicate that this is no longer an issue.
Should I close this or are you still investigating related problems?
Anyways, thanks for fixing this, as `master` works like a charm for me :-)
Cheers,
Flo",flovouin,Adlai-Holler
2658,2017-01-13 17:46:58,@flovouin Ah! Yeah the issue's fixed. Cheers mate!,Adlai-Holler,flovouin
2653,2016-11-30 19:18:53,"@chrisdanford Would you endorse merging this, based on what you've seen in Pinterest?",Adlai-Holler,chrisdanford
2646,2016-11-21 22:57:04,@austinlouden you cool with this one instead https://github.com/facebook/AsyncDisplayKit/pull/2645 ? @nguyenhuy also was fixing at the same time :) ,garrettmoon,austinlouden
2646,2016-11-21 23:04:31,@austinlouden Thanks for working on this!,nguyenhuy,austinlouden
2643,2016-11-23 06:34:57,"@maicki Thanks!  Since this one is pretty detailed, could you review it in-person with @Adlai-Holler tomorrow (or by VC?)  He studied the code closely last week and knows it more accurately than I do, so if you are both aligned on the strategy, let's move forward and get as much testing as possible (testing beats an extended period of review for this kind of change IMO).",appleguy,maicki
2643,2016-11-23 21:53:18,@maicki Could you look at why the new snapshots are different? The new ones seem to have extra space on the right side of the text…,Adlai-Holler,maicki
2643,2016-11-23 22:00:58,@Adlai-Holler I briefly talked with @garrettmoon as the `ASTextNode` calculates it's size now on the bounds this is the new calculation of the `ASTextNode` and the snapshot needs to be updated,maicki,Adlai-Holler
2643,2016-11-24 00:13:20,"@maicki ""Calculates its size now on the bounds"" what do you mean? It looks like the new image is larger than the old one, and the text is slightly off-center?",Adlai-Holler,maicki
2643,2016-12-05 19:07:15,"@maicki OK cool, let's update the reference image for the affected test by adding `self.recordMode = YES` at the top of the method and running it.",Adlai-Holler,maicki
2643,2016-12-05 19:26:06,@Adlai-Holler Rebased and added new reference image,maicki,Adlai-Holler
2643,2016-12-06 20:53:37,"@Adlai-Holler Addressed comments

@Adlai-Holler @appleguy Ready for another review and testing cc @garrettmoon ",maicki,appleguy
2643,2016-12-06 20:53:37,"@Adlai-Holler Addressed comments

@Adlai-Holler @appleguy Ready for another review and testing cc @garrettmoon ",maicki,Adlai-Holler
2642,2016-11-27 13:08:34,"@appleguy I pushed a new commit that addresses your comments. Yes, we can drive `-didEnterPreloadState` and `-didExitPreloadState` instead. It results in a cleaner API surface. We will need to revisit `-setNeedsPreload`, `-recursivelyPreload` and `-recursivelyClearPreloadedData` after 2.0, although they are ""framework private"" now.",nguyenhuy,appleguy
2642,2016-11-27 13:10:09,"@appleguy Btw, looks like pinterest-jenkins is taking holidays. Machines don't have holidays!",nguyenhuy,appleguy
2641,2016-11-28 16:59:05,"@nguyenhuy says: ""shouldn't occur anymore because of the new layout coalescing mechanism (discussed with @maicki)"" I'm going to close this.",garrettmoon,nguyenhuy
2636,2016-11-21 01:35:29,"@maicki once you resolve the merge conflicts, excited to see this one green! √",appleguy,maicki
2636,2016-11-21 03:27:48,@appleguy Rebased and merge conflict resolved,maicki,appleguy
2636,2016-11-21 21:20:42,"@Adlai-Holler Some answers:
- We don't rely on a `setNeedsLayout` call for the node to layout. As soon as the frame changes a layout pass will happen and we use the frame of the node to execute the layout pass now. What is your thinking behind it?
- It should work with `initWithViewBlock:` nodes as the view will be assigned as view to the node. Layout does not rely on any `setNeedsLayout` call anymore. We call `layoutThatFits:` in `viewWillLayoutSubview` or if the `constrainedSize` will change due to frame changes we use the frame within the node to layout the subnodes if a layout pass happens.
- I changed to set the autoresizing mask to `[.FlexibleWidth, .FlexibleHeight]`. We still call `layoutThatFits:` in `viewWillLayoutSubviews` to prepare the node for the layout pass otherwise we just delay the measure pass to the layout pass. It should not have any overhead as if the frame didn't change it's a no op. We could push this layout async in the future, but I actually already plan to look into that doing it within `ASDisplayNode` by default.",maicki,Adlai-Holler
2636,2016-11-23 01:31:18,"@Adlai-Holler @maicki I think that last statement is correct:

- UIViewController is most definitely designed for users providing their own view.  This is of course what -loadView is for.
- This works with UITableView, UICollectionView, but also many other custom view subclasses.  It should work with _ASDisplayView too :).
- Indeed, the main difference is sizing / layout.  UIViewController expects to set the bounds on the view, just like the parent of a UIView would; also just like a regular UIView, it should never change its own bounds size.",appleguy,maicki
2636,2016-11-23 01:31:18,"@Adlai-Holler @maicki I think that last statement is correct:

- UIViewController is most definitely designed for users providing their own view.  This is of course what -loadView is for.
- This works with UITableView, UICollectionView, but also many other custom view subclasses.  It should work with _ASDisplayView too :).
- Indeed, the main difference is sizing / layout.  UIViewController expects to set the bounds on the view, just like the parent of a UIView would; also just like a regular UIView, it should never change its own bounds size.",appleguy,Adlai-Holler
2635,2016-11-20 00:16:16,"@garrettmoon thanks!  We should revisit this API soon, but breaking these up is definitely a good step.
",appleguy,garrettmoon
2632,2016-11-19 22:48:41,"@appleguy - isn't it expected behavior that `layoutSpecThatFits:` is called before `viewWillLayoutSubviews`?
",hannahmbanana,appleguy
2632,2016-11-22 14:55:16,"@KieranLafferty @appleguy @hannahmbanana This is expected behavior. `layoutSpecThatFits:` Get's called in the measurement pass of the node, `viewWillLayoutSubviews` will be called in the layout pass of the node / view that happens after the measurement pass. Hope this makes it clear.

In the measurement pass `layoutSpecThatFits:` requests the layout specification to be able to create an `ASLayout` object that represents the node hierarchy. Based on this `ASLayout` all subnodes will be layed out in the layout pass that happens a bit later.

I will close this issue for now please reopen for follow up questions.",maicki,appleguy
2632,2016-11-22 14:55:16,"@KieranLafferty @appleguy @hannahmbanana This is expected behavior. `layoutSpecThatFits:` Get's called in the measurement pass of the node, `viewWillLayoutSubviews` will be called in the layout pass of the node / view that happens after the measurement pass. Hope this makes it clear.

In the measurement pass `layoutSpecThatFits:` requests the layout specification to be able to create an `ASLayout` object that represents the node hierarchy. Based on this `ASLayout` all subnodes will be layed out in the layout pass that happens a bit later.

I will close this issue for now please reopen for follow up questions.",maicki,hannahmbanana
2629,2016-11-19 03:39:31,"@flovouin Hi!  Thanks for filing :)  I replied on Slack, but this is a good place for more information too.

> @flo I'd need to learn a bit more about what you're trying to do - may be helpful to hear concretely what you're doing to transform the URL to tell what could support it.  I'd recommend looking for -didEnterPreloadState (using 2.0-beta.1 or master) and at that time, generate the URL.  Basically use a custom subclass of ASNetworkImageNode, set your ""sourceURL"" on it, and then have the conversion to the ""true"" URL happen at a stage earlier — then set the actual .URL property to the correct URL.  If it isn't too expensive to do the conversions then definitely just do them at node init time instead, but doing them at Preload time will result in only the minimum number of URLs being converted (same number as will actually be fetched) so this should work
",appleguy,flovouin
2629,2016-11-22 11:52:38,"@appleguy Thanks for the quick reply!
I set `imageNode.URL` to ""fake"", internal URLs e.g. `assets/thumbnails/1234`. A ""service"" in my app is in charge of converting these to actual remote URLs, by choosing which API end point to call with proper credentials e.g. `GET foo.com/thumbnails/1234 Authorization: 4321`. The remote end point then returns a temporary URL (a signed CloudFront URL).
I was hoping I could do all that without having to pass credentials around, hence by only specifying `assets/thumbnails/1234` to the image node (and then using a custom downloader).
If you find this workflow convoluted I couldn't really hold it against you :D The reason for this is partly based on the fact that I must do something similar for videos (using a `ResourceLoaderDelegate`), and that in this case I don't really have a choice. However I've found a solution that works great and clearly separates concerns (although my explanation of it might be a little foggy).

Now the second bullet of my original question is also something I'd really like to be able to do: manually add an image to the cache. Indeed, some of the images might be generated locally, and in this case I'd like to be able to set image in the cache for key `assets/thumbnails/1234` (again, preferably without having to specify actual remote end points). This would avoid an unnecessary remote request, that might fail if the image is still uploading or if the user has no connection at that time.

All of this boils down to two features:
- Being able to specify a downloader for which I could asynchronously redirect my fake URLs, while keeping its behaviour as close as possible to the default downloader when it comes to fetching the remote resource. (But the resource would have to be cached as the fake URL, not the temporary one.)
- Being able to manually add an image to the cache for a given fake URL / key.

By looking at the code of PINRemoteImage I've got a few ideas on how to achieve this, but it looks like I would have to rewrite a lot of error-prone code, that has already been battle tested in PINRemoteImage. I therefore posted this issue to ask you guys if you could think of a solution that would keep as much of the default behaviour as possible.

Cheers,

(P.S. I use the word ""feature"" but this is by no means a feature request. I just thought that given how long my post is simply to describe the issue, this would be a better fit for GitHub than Slack. :-))",flovouin,appleguy
2628,2016-11-22 08:33:26,"Can someone describe an example use case where a single-child layout needs a different style than its child? I haven't come across such a case yet.

I'm not sure which is better:
1. Removing the `style` object:
which would make the affected layouts inconsistent with other layouts
1. Linking the `style` objects of the layout with that of the node:
which might give the impression (from a user's perspective) that you can actually set different styles.

In any case, I agree with @lappp9, I also think of those one-child specs as extensions to the styles basically. Although, I would still want some of them to be separate from the `style` object.
",george-gw,lappp9
2628,2016-11-22 18:06:41,"@george-gw - I don't think we've come across a case where a single-child layout needs a different style than its child...yet. 

One downside to automatic style propagation for _just_ the single child specs is that it may cause confusion. With the pre-2.0 Layout API, there was quite a bit of confusion around the `ASLayoutable` properties - some of which only applied for `ASStackLayoutable`s (children of stacks) and `ASStaticLayoutables` (children of static specs).  ",hannahmbanana,george-gw
2626,2016-11-20 00:19:20,"@master-nevi thank you!  This is a wise fix, and we really appreciate you updating the sample project to be able to test & demonstrate the behavior.  This bug was introduced when we made ASVideoNode a subclass of a NetworkImage -- this structure has many benefits, but we need to refactor the class to be more careful about superclass behavior.
",appleguy,master-nevi
2626,2016-11-20 05:58:39,"@master-nevi I think this is the right direction - however it did cause tests to start failing so I had to revert the diff.  If you have a chance to take a look at why they're failing and update either the tests or the diff, that would be great!

18:34:02 ASDisplayNodeImplicitHierarchyTests
18:34:02   testLayoutTransitionMeasurementCompletionBlockIsCalledOnMainThread, Asynchronous wait failed: Exceeded timeout of 2 seconds, with unfulfilled expectations: ""Call measurement completion block on main"".
18:34:02   /Users/engineering/jenkins_root/workspace/AsyncDisplayKit-PRs/AsyncDisplayKitTests/ASDisplayNodeImplicitHierarchyTests.m:173
18:34:02   `
18:34:02   
18:34:02   [self waitForExpectationsWithTimeout:2.0 handler:nil];
18:34:02 }
18:34:02`
18:34:02 
18:34:02 ASVideoNodeTests
18:34:02   testChangingAssetsChangesPlaceholderImage, ((firstImage) not equal to (_videoNode.image)) failed: (""<d0254800 00620000>"") is equal to (""<d0254800 00620000>"")
18:34:02   /Users/engineering/jenkins_root/workspace/AsyncDisplayKit-PRs/AsyncDisplayKitTests/ASVideoNodeTests.m:387
18:34:02   `
18:34:02   _videoNode.asset = _secondAsset;
18:34:02   XCTAssertNotEqual(firstImage, _videoNode.image);
18:34:02 }
18:34:02`
",appleguy,master-nevi
2626,2016-11-21 19:11:30,"@appleguy  I've updated the failing test `[ASVideoNodeTests testChangingAssetsChangesPlaceholderImage]` and opened a new PR: https://github.com/facebook/AsyncDisplayKit/pull/2644. There were a bunch of other tests failing on my local machine that didn't seem related to my change (they happen even without my change), is this normal? They all ended in `XSnapshotTests`.",master-nevi,appleguy
2622,2016-11-17 08:06:37,"@Adlai-Holler: yes, I think I did it. Sorry 😬
",nguyenhuy,Adlai-Holler
2621,2016-11-17 06:27:29,"@hannahmbanana Thank you! 
My MessageGroupCellNode have a tableNode in it which have `addSubnode(tableNode)` in a custom init method. When a network request complete (not in main thread), I create a MessageGroupCellNode and insert some cell nodes in it's tableNode with `tableNode.view?.beginUpdates ...`, crash happened!
I wonder tableNode.view may lazy create when I try to access it not in main queue.
",nixzhu,hannahmbanana
2621,2016-11-17 08:26:00,"@Adlai-Holler I didn't see that message. @hannahmbanana After network request, I dispatch to main queue to create node, no more crash.
",nixzhu,hannahmbanana
2621,2016-11-17 08:26:00,"@Adlai-Holler I didn't see that message. @hannahmbanana After network request, I dispatch to main queue to create node, no more crash.
",nixzhu,Adlai-Holler
2617,2016-11-17 03:18:17,"@hannahmbanana 
I am using Carthage to build with DebugConfiguration.
`carthage update --platform --configuration Debug`
",muukii,hannahmbanana
2617,2016-11-17 06:09:49,"@appleguy 
hmm, I tried building with the following command, but an error occurs.

`carthage update AsyncDisplayKit --platform iOS --configuration Debug --no-use-binaries`

error log


",muukii,appleguy
2617,2016-11-17 16:09:18,"@appleguy 
I installed ASDK with CocoaPods, but it did not change...

Do not call `ASCollectionNode.reloadData` more than once?

<img width=""1118"" alt=""screen shot 2016-11-18 at 1 06 01"" src=""https://cloud.githubusercontent.com/assets/1888355/20397017/79c7be26-ad2b-11e6-99b7-cd29249b1f09.png"">

<img width=""1440"" alt=""screen shot 2016-11-18 at 1 06 39"" src=""https://cloud.githubusercontent.com/assets/1888355/20397019/7af1b892-ad2b-11e6-9bb0-6a06e1a18ac6.png"">
",muukii,appleguy
2617,2016-11-17 16:54:56,"@appleguy 

OMG

I was writing deinit in ASCellNode to output logs,
It solved it by erasing it!
",muukii,appleguy
2617,2016-11-21 16:13:06,"@appleguy Yep, confirmed it was broken before and it's working on master! @muukii Thank you very much for bringing this to our attention. We are planning to release a 2nd beta of 2.0 very soon, and you can likely use `master` in the mean time if needed. Also feel free to reopen this issue if needed. Cheers!",Adlai-Holler,appleguy
2616,2016-11-17 09:11:59,"@MarvinNazari - This is also possible to implement, but hasn't been something we've needed ourselves yet. 
",hannahmbanana,MarvinNazari
2616,2016-11-17 10:35:34,"@hannahmbanana Im not really sure how i can implement this, i think the problem is that when adding a view controller inside a another view controller we need to use `addChildViewController` and `didMoveToParentViewController` but thats not possible inside a `ASCellNode`
Any idea?
",MarvinNazari,hannahmbanana
2616,2017-01-13 00:04:39,"@MarvinNazari What we need in order pull this off, is:

- In `willDisplayCell:`, get the view controller that owns the `ASCollectionView` (you can do this by repeatedly calling `-nextResponder` until a view controller is returned) and call `addChildViewController` and `didMoveToParentViewController:` with the cell node's view controller.
- In `didEndDisplayingCell:`, call `willMoveToParentViewController:nil` and then `removeFromParentViewController` on the cell node's view controller.

Since `ASTableView` and `ASCollectionView` will both have to do this, you may want to create methods like `-[ASCellNode associateWithViewControllerForView:(UIView *)]` `-[ASCellNode disassociateFromViewController` to hold the duplicated code.",Adlai-Holler,MarvinNazari
2615,2016-11-17 09:10:20,"@MarvinNazari - This is possible to implement, but has yet to happen. It would require some logic to make sure that the view controller is only accessed from the main thread. If you'd be interested in submitting a PR for this, we'd be happy to merge it.
",hannahmbanana,MarvinNazari
2615,2016-11-19 06:53:02,"Thanks for building this @MarvinNazari! Hope to see you around more!
",Adlai-Holler,MarvinNazari
2614,2016-11-16 23:18:21,"@StrauneanuDimitri - thanks for submitting this! 

We had planned to consolidate all layout examples into a single app - the `LayoutSpecExamples-Swift` app. I'll take a look at this later today and see if it would be possible to incorporate into that app.
",hannahmbanana,StrauneanuDimitri
2614,2016-11-21 01:37:52,"@StrauneanuDimitri thank you for submitting this!  We're always excited to get new example code, especially in Swift, since we don't have a ton of stuff in the new language.

Could you post a few screenshots of the app on the diff so we have it in the PR record / commit history?

It may make sense to keep this as a separate app rather than folding into the layout examples, because it has some data source supporting infra, but let's see - we might be able to put it in a tab of another app and organize the code nicely in a group.  Anything that will maximize the number of people opening the project and seeing the code, rather than having to pod install for a bunch of separate projects.",appleguy,StrauneanuDimitri
2614,2016-12-08 17:57:05,"Thanks for contributing @StrauneanuDimitri ! Sorry for the delay in landing this, very nifty app!",Adlai-Holler,StrauneanuDimitri
2612,2016-11-16 23:21:43,"@nguyenhuy - Odd, but I am not able to assign it to you for some reason (you don't show up in the list)
",hannahmbanana,nguyenhuy
2612,2016-11-16 23:32:01,"@hannahmbanana: no worries then. Maybe because I'm not in the Facebook org. I'm gonna stop asking people to assign and leave comments instead. Thanks!
",nguyenhuy,hannahmbanana
2611,2016-11-21 00:14:40,@appleguy - I think there was a question as to whether we can deprecate the old methods or not. Deprecating them would be fastest. ,hannahmbanana,appleguy
2609,2016-11-15 00:19:16,"@rahul-malik would it be better if this was something that a subclass provided? That way you can guarantee it's called before the sharedDownloader is created?
",garrettmoon,rahul-malik
2609,2016-11-15 00:22:43,"@garrettmoon - How would we guarantee that the network and multiplex image nodes used the subclass instance?
",rahul-malik,garrettmoon
2609,2016-11-15 03:53:46,"@rahul-malik thanks!  Great to have this kind of customizability for all clients.
",appleguy,rahul-malik
2601,2016-11-14 22:54:17,"@nguyenhuy It might be worth just putting a disclaimer on the ASTextNode page itself?  Really, it might be nice to have a little ""Layout Tips"" section for a couple of the nodes highlighting whether they have an intrinsic content size or any other good to know things.
",lappp9,nguyenhuy
2601,2016-11-16 01:50:17,"This seems to have a decent base of support. 

@garrettmoon This may affect existing layouts in Pinterest. Do you think we should take any extra steps to vet & notify?

@hannahmbanana If this lands, would you be willing to add this to the FAQ and the ASTextNode pages?
",Adlai-Holler,hannahmbanana
2601,2016-11-16 01:57:00,"@Adlai-Holler - has this been tried with Pinterest yet? If not, I could check it out.
",hannahmbanana,Adlai-Holler
2601,2016-11-16 02:42:52,"I'm still the opinion this will introduce more confusion than it helps 😬

@hannahmbanana if you look into Pinterest code also look how often we actually add the textnode directly to a stack spec and how often we wrap it into another spec and put this inside a stack steck.
",maicki,hannahmbanana
2601,2016-11-16 15:36:56,"@Adlai-Holler could you also change a small thing in: [ASLayoutSpecPlayground-Swift example](https://github.com/facebook/AsyncDisplayKit/blob/master/examples_extra/ASLayoutSpecPlayground-Swift/Sample/Sample.playground/Pages/StackLayout.xcplaygroundpage/Contents.swift)

change:



to:



Or maybe just specify the other option as a comment, so that people can see the differences. Otherwise, the user will see no effect when changing those values.
",george-gw,Adlai-Holler
2601,2016-11-16 20:46:35,"@Adlai-Holler @hannahmbanana I don't have any additional insight into what this would break, but we'll need to communicate this far in advance of landing (into Pinterest), then land right after a branch.
",garrettmoon,hannahmbanana
2601,2016-11-16 20:46:35,"@Adlai-Holler @hannahmbanana I don't have any additional insight into what this would break, but we'll need to communicate this far in advance of landing (into Pinterest), then land right after a branch.
",garrettmoon,Adlai-Holler
2601,2016-11-18 07:13:16,"This diff is still pretty controversial – let's hold off on it for the time being, in light of the concern @garrettmoon and @maicki raised about propagation. I've linked the propagation issue.
",Adlai-Holler,garrettmoon
2601,2016-11-18 07:13:16,"This diff is still pretty controversial – let's hold off on it for the time being, in light of the concern @garrettmoon and @maicki raised about propagation. I've linked the propagation issue.
",Adlai-Holler,maicki
2598,2016-11-15 07:18:08,"@appleguy @Adlai-Holler : Sorry! I forgot to mention that I got exception _OBJC_SUPPORTED_INLINE_REFCNT_WITH_DEALLOC2MAIN when I tried to remove observer in deinit of ASDisplayNode, commenting it works fine though. So I tried the branch AHNaturalDealloc, it fixed the problem but I got another exception ""layoutInspector object must implement -scrollableDirections"".
",tungvoduc,appleguy
2598,2016-11-15 07:18:08,"@appleguy @Adlai-Holler : Sorry! I forgot to mention that I got exception _OBJC_SUPPORTED_INLINE_REFCNT_WITH_DEALLOC2MAIN when I tried to remove observer in deinit of ASDisplayNode, commenting it works fine though. So I tried the branch AHNaturalDealloc, it fixed the problem but I got another exception ""layoutInspector object must implement -scrollableDirections"".
",tungvoduc,Adlai-Holler
2597,2016-11-15 00:44:19,"@maicki this is an amazing change for the framework! Very impressed with how far it has come without any workarounds - everything seems to be conceptually elegant :)
",appleguy,maicki
2597,2016-11-19 23:27:33,"@maicki _very_ excited about this!  As you have as well, I've done extensive testing locally and there are zero remaining issues that I've been able to find.  It even supports all the complex self-resizing cases and the bounds-different-than-desired-layout cases.

I filed #2633 for followup on a smaller issue where we may find it is possible to change one of the conditions, but I've confirmed that this change would require at least some other adaptation in the code, and it's not worth blocking the diff on since there aren't any certain use cases where it causes an issue.

Landing to master to promote further testing.  We can ship this with beta.2 as a tag initially, get some active developers trying it out, and then push beta.2 as a cocoapod after a few days.  Landing this will mean the internal Pinterest AsyncDisplayKit branch will get updated automatically and allow the team to start testing more broadly.
",appleguy,maicki
2596,2016-11-14 01:15:18,"@maicki FYI here is the test failure

10:54:06 ASDisplayNodeTests
10:54:06   testThatNodeGetsRenderedIfItGoesFromZeroSizeToRealSizeButOnlyOnce, ((contentsAfterRedisplay) equal to (node.contents)) failed: (""<708f1c00 00630000>"") is not equal to (""<60901c00 00630000>"")
10:54:06   /Users/engineering/jenkins_root/workspace/AsyncDisplayKit-PRs/AsyncDisplayKitTests/ASDisplayNodeTests.m:1950
10:54:06   ```
10:54:06   [node recursivelyEnsureDisplaySynchronously:YES];
10:54:06   XCTAssertEqual(contentsAfterRedisplay, node.contents);
10:54:06 }
",appleguy,maicki
2596,2016-11-14 01:42:29,"@appleguy Yeah unfortunately that was to be expected with that test. I think we first should have a discussion / make a call if we would like to go forward with changing the default value or not.
",maicki,appleguy
2595,2016-11-14 05:06:24,"@maicki What's the motivation to change this? I think we should leave this as-is, with the following rationale:
- UIKit doesn't do this – UIImageView only draws once (although it draws the image full-size, whereas we draw the image at bounds-size).
- This will break animated/continuous image node size changes.
",Adlai-Holler,maicki
2594,2016-11-11 06:42:16,"@austinlouden hey, thanks a bunch for doing this!
",appleguy,austinlouden
2593,2016-11-18 07:17:29,"@maicki Is this a blocker for the layout coalescing diff? If not, we should remove it from the milestone and focus on other stuff for 2.0 since it's not an API change.
",Adlai-Holler,maicki
2593,2016-11-18 14:57:44,"@Adlai-Holler I think it's not a blocker for #2597 per-se as `ASTextNode` in it's current state has this side effects. So there should be no regression if you use ASDK containers the way as before.

That said with the diff mentioned above we now support also manual layout of nodes, in that case if a text node is involved it can happen, that in the measurement pass the constrained size instance variable will get a different constrained size as the final one as a different frame will be set. In that case `ASTextNode` will not work the way it should ...
",maicki,Adlai-Holler
2592,2016-11-11 00:32:57,"@maicki nice improvements indeed!
",appleguy,maicki
2591,2016-11-15 02:13:13,"@rajeevwhiz - thanks again for contributing this!

I have a few comments:
- remove the top level ""Sample"" folder. It should have the same structure as the `LayoutSpecExamples-Swift` example project.
- remove the `Sample.xcworkspace` file
",hannahmbanana,rajeevwhiz
2591,2016-11-19 22:53:34,"@rajeevwhiz - let me know if I can help answer any questions about the example project folder structure. :)
",hannahmbanana,rajeevwhiz
2591,2016-11-21 00:13:31,"@rajeevwhiz - it's almost ready, just 2 last things:

1. Remove the top level ""Sample"" folder (move all files up a level in the folder structure). 

2. Remove the Sample.xcworkspace file

Thanks!",hannahmbanana,rajeevwhiz
2591,2016-11-21 01:38:49,@rajeevwhiz thanks for working on this!,appleguy,rajeevwhiz
2591,2016-11-27 21:02:03,Thank you @rajeevwhiz for contributing and @george-gw for the swift style comments!,hannahmbanana,rajeevwhiz
2591,2016-11-28 07:50:28,Happy to help @rajeevwhiz @hannahmbanana :),george-gw,rajeevwhiz
2591,2016-11-28 07:50:28,Happy to help @rajeevwhiz @hannahmbanana :),george-gw,hannahmbanana
2590,2016-11-14 21:26:20,"@tomizimobile can you provide more info? For example, the URL you were loading or a small sample project? The behavior you're describing is definitely not correct!
",garrettmoon,tomizimobile
2590,2016-11-14 22:28:32,"@garrettmoon try out this URL: http://ak-cache.legacy.net/legacy/images/fhlogo/7630fhlogo.gif
",tomizimobile,garrettmoon
2590,2016-11-14 22:34:02,"@tomizimobile This is actually an issue with PINRemoteImage, not ASDK. Do you mind opening up an issue there: https://github.com/pinterest/PINRemoteImage ?
",garrettmoon,tomizimobile
2590,2016-11-14 22:38:59,"Thanks @tomizimobile going to close this one here, will continue over on PINRemoteImage :)
",garrettmoon,tomizimobile
2588,2016-11-14 21:29:48,"Hi @rajeevwhiz we rely on Github issues to track work being done on ASDK. It's really important that each issue describe one problem. Would you mind updating this issue to just one of the issues you're describing and opening two more each with their own? You can still use the same sample project of course!
",garrettmoon,rajeevwhiz
2585,2016-11-15 21:27:43,"@hannahmbanana can you own this issue? Ping me if not.
",garrettmoon,hannahmbanana
2581,2016-11-11 16:48:51,"@maicki Thanks for the info. It's a fairly minor bug in a production app that uses ASDK almost exclusively for the UI. Updating to 2.0 looks painful. I guess we won't have much choice but to invest significant effort at some point. I'm sure it will improve a lot of things. Maybe there is/will be a guide or other assistance once we get there.

At least this explains why it works as long as the text includes highlighted links, and why my attempt to insert an invisible link didn't fix anything. Presumably you're checking whether the styling varies and optimizing when it doesn't. But now that I understand that, maybe I can find another workaround in 1.9.92.

Thanks again.
",jdee,maicki
2578,2016-11-14 21:30:51,"Hi @rajeevwhiz I'm going to close this issue for now as it looks like the info is better in the other issue you opened.
",garrettmoon,rajeevwhiz
2576,2016-11-09 01:49:08,"@george-gw We just finished fixing some issues with our CI. Could you rebase when you have a minute?
",Adlai-Holler,george-gw
2576,2016-11-09 07:11:38,"@george-gw - awesome, thank you!!!
",hannahmbanana,george-gw
2572,2016-11-08 06:52:57,"@rajeevwhiz your problem appears to be that you're fetching the image thumbnails as a data model - e.g. you are fetching the image data before the photos are near the screen, which uses a large amount of memory.

Instead, your ASImageNode(s) in each ASCellNode should be allowed to do this data fetching.  If you write a custom class, you can override didEnterPreloadState and didExitPreloadState to perform this data loading and clearing to manage memory efficiently.

If you are integrating with the Apple Photos.framework, I suggest looking at ASMultiplexImageNode, which has native / built-in support for Photos library URLs.  It does this loading for you automatically.  You can configure the ""tuningParameters"" of the ASCollectionNode to load a different distance ""ahead"", both for loading the data and decoding the image, if you want to control memory usage in more detail.

I'm not too familiar with Swift <-> Obj-C interoperation, but you'll need to create an ASCellNode that contains an ASMultiplexImageNode (and handles its layout).

While testing this, please use the 2.0-beta.1 release.  This is available via a git tag by that same name (see adoption specifics if you're using cocoapods here; it's also available via Carthage.)  http://asyncdisplaykit.org/docs/adoption-guide-2-0-beta1.html

https://github.com/facebook/AsyncDisplayKit/releases/tag/2.0-beta.1

When using ASMultiplexImageNode, you should create it with just alloc/init — no need to provide a special downloader.  http://asyncdisplaykit.org/docs/multiplex-image-node.html
",appleguy,rajeevwhiz
2572,2016-11-08 17:19:58,"@appleguy thanks for the direction and insights... I was completely lost! 

I have started upgrading to ASDK 2.0 and will implement ASMultiplexImageNode as per your suggestions. I may come back with more clarification questions. 

When migrating to ASDK2.0, I am seeing a conflict around ASStaticLayoutSpec. As per the [conversion guide](http://asyncdisplaykit.org/docs/layout2-conversion-guide.html), ASStaticLayoutSpec has been renamed to ASAbsoluteLayoutSpec but it seems like it's not deprecated either. Should I change all ASStaticLayoutSpec to ASAbsoluteLayoutSpec?

I am also seeing errors for setChildren method which takes an array in 1.x but I can't find an equivalent method in 2.0
",rajeevwhiz,appleguy
2572,2016-11-08 17:25:45,"@rajeevwhiz Happy to answer your questions around conversion to 2.0:

`ASStaticLayoutSpec`: There are two options: You can either use `ASWrapperLayoutSpec` or use `ASAbsoluteLayoutSpec` with sizing option: `ASAbsoluteLayoutSpecSizingSizeToFit` instead of `ASStaticLayoutSpec`

`setChildren`: This is now a property so use `.children =` instead.

Let me know if this answers your questions.
",maicki,rajeevwhiz
2572,2016-11-08 17:36:46,"thanks @maicki . I am fully on ASDK 2.0 now.. :)
",rajeevwhiz,maicki
2572,2016-11-08 17:42:13,"@rajeevwhiz Awesome to hear!! I will close this issue for now, please reopen in case you think it's not resolved!
",maicki,rajeevwhiz
2572,2016-11-08 17:48:20,"Thanks @maicki . I am now implementing the suggestions from @appleguy around ASMultiplexImageNode. I have implemented ASCellNode that contains an ASMultiplexImageNode as per his suggestion. Can you point me to some example project or sample code which uses ASMultiplexImageNode with Photo Library?  
",rajeevwhiz,appleguy
2572,2016-11-08 17:48:20,"Thanks @maicki . I am now implementing the suggestions from @appleguy around ASMultiplexImageNode. I have implemented ASCellNode that contains an ASMultiplexImageNode as per his suggestion. Can you point me to some example project or sample code which uses ASMultiplexImageNode with Photo Library?  
",rajeevwhiz,maicki
2572,2016-11-08 18:22:03,"@appleguy @maicki How do I tie a ASMultiplexImageNode to a PHAsset?
",rajeevwhiz,appleguy
2572,2016-11-08 18:22:03,"@appleguy @maicki How do I tie a ASMultiplexImageNode to a PHAsset?
",rajeevwhiz,maicki
2572,2016-11-08 18:44:51,"@appleguy @maicki figured it out! I have to implement assetForLocalIdentifier. 

Is there a way to mix images downloaded from network and from PhotoLibrary into the same collection? Or is it a bad idea? 

I would imagine I should not be implementing urlForImageIdentifier and assetForLocalIdentifier for the same ASMultiplexImageNodeDataSource... Is it possible? If yes, how is the conflict resolved?

I guess I can implement two separate ASCellNodes to handle two use cases and add it to them to the same collection... Any recommendations? 
",rajeevwhiz,appleguy
2572,2016-11-08 18:44:51,"@appleguy @maicki figured it out! I have to implement assetForLocalIdentifier. 

Is there a way to mix images downloaded from network and from PhotoLibrary into the same collection? Or is it a bad idea? 

I would imagine I should not be implementing urlForImageIdentifier and assetForLocalIdentifier for the same ASMultiplexImageNodeDataSource... Is it possible? If yes, how is the conflict resolved?

I guess I can implement two separate ASCellNodes to handle two use cases and add it to them to the same collection... Any recommendations? 
",rajeevwhiz,maicki
2570,2016-11-09 02:06:49,"Nice improvements, thanks @Adlai-Holler!
",appleguy,Adlai-Holler
2568,2016-11-07 23:55:05,"@hannahmbanana awesome, thanks!
",appleguy,hannahmbanana
2566,2016-11-10 00:19:41,"@chrisdanford Thanks for the feedback!
- I absolutely want to avoid a setter interface, for the same reason that React and others do. Usually _one_ object knows how the screen should look, and so we should always ask that object when we need an update. Otherwise developers will have to wire up all that on their side, which will get ugly.
- A continuation interface is interesting but for the reasons that I mentioned in ""Performance Considerations"" our updates must be synchronous. I know it's a hard pill to swallow but otherwise we simply cannot ensure that we're in sync with the user's data source.
- Good point that we need to adjust the API or add assertions to prevent users from doing what you described and attempting to pre-compute data.
  - I considered making the API something like `collectionNode:configureNewData:` and pass in the data object. I couldn't think of a great name for it so I bailed, but as I type it out right now it sounds great. Thoughts?
- As I mentioned in ""Performance Considerations"" this solution is performant even for thousands of items. With more detail:
  - For items that existed in the previous data, `addItemWithIdentifier:` is:
    - 1x `[NSDictionary objectForKey:]`
    - 1x `[NSMutableArray addObject:]`
    - 1x `[NSMutableDictionary setObject:forKey:]`
    - 2x misc `objc_msgSend`
  - For new items, `addItemWithIdentifier:` is that, plus:
    - 1x `[[ASCollectionItem alloc] init]`
    - 1x `Block_copy`
- I'm interested in disallowing `reloadData` or having it go the diffing route when possible. I think the latter is the way to go.
- I don't think we should make this a wrapper – I think this should be the _de facto_ way to use ASCollectionNode. If we can't make it fast and flexible enough for that, then we should simply abandon it.
- (On the problems with `invalidateItemWithIdentifier:`) Good point. We could roll with this as-is, and if we discover a use case that requires it we can revisit.
",Adlai-Holler,chrisdanford
2566,2016-11-10 09:52:44,"I think the solution is super useful. @Adlai-Holler, thanks for introducing this!

In order to remove the need for `performBatchUpdates`, we still have to deal with the `update` calls. The current implementation doesn't cater for that, and I think that developers would assume that it somehow does.

For this case to be covered, I would think that having something like the `invalidateItemWithIdentifier:` method is needed. But perhaps we could call this method `updateItemsWithIdentifier(s):` instead. Alternatively, we could add a `shouldUpdate:` bool (or `forceUpdate:`) to the `addItemWithIdentifier` method.

What do you think?
",george-gw,Adlai-Holler
2566,2016-11-22 19:02:05,"This looks awesome @Adlai-Holler. We've had a couple of cases where we've faced issues with indexPaths especially around reordering updates within our queues. 

We took a similar approach and used the diff method within ASDK to setup the batch updates. But that still seems to cause some issues every so often. Think we can move to this approach pretty quickly within Buffer for some wider testing.

Agreed that Option 2 sounds better. Would be great to see this on ASTableNode!


",ay8s,Adlai-Holler
2566,2016-11-22 20:17:31,Hey @Adlai-Holler ! How similar is the diffing algorithm you've used to the one used in [IGListKit](https://github.com/instagram/IGListKit) ?,codeOfRobin,Adlai-Holler
2558,2016-11-08 14:53:35,"Hi @rajeevwhiz, what version of ASDK do you use? If you use ASDK 2.0 the direct use of `ASCollectionView` is not suggested anymore and in fact methods are now deprecated. Please try to use `ASColllectionNode` instead.
",maicki,rajeevwhiz
2557,2016-12-19 05:08:01,@garrettmoon I'd recommend that we punt this to 2.0.2 and investigate it in January.,appleguy,garrettmoon
2557,2017-01-12 20:12:26,@garrettmoon - I recall you mentioning working on placeholders recently. Was that related to this Issue?,hannahmbanana,garrettmoon
2557,2017-01-30 03:36:02,"@garrettmoon This seems like a good candidate to punt to 2.1.  It would be really great to fix, though!",appleguy,garrettmoon
2556,2016-11-15 21:34:56,"Can you take a look at this one @hannahmbanana ?
",garrettmoon,hannahmbanana
2555,2016-11-06 23:47:50,"@hannahmbanana Do you set any height to the text node or the intrinsic size returns that size? If you set a breakpoint in `calculateSizeThatFits:` in `ASTextNode` what's the value of the size it returns?
",maicki,hannahmbanana
2555,2016-11-07 00:08:49,"@maicki - No height is set in the layout code (copied below). `ASTextNode`'s `calculateSizeThatFits` returns `{0, 13.800000000000001}`


",hannahmbanana,maicki
2555,2016-11-08 15:44:54,"I will close that issue as @garrettmoon mentioned this is correct behavior. I would suggest if you don't want to have the text node appearing if the string is nil / empty don't add it in `layoutSpecThatFits:`.
",maicki,garrettmoon
2552,2016-11-08 04:49:05,"@hannahmbanana  I converted one layout to swift. Code is in https://github.com/facebook/AsyncDisplayKit/issues/2548. 

Let me know if this helps. thanks
",rajeevwhiz,hannahmbanana
2552,2016-11-09 12:05:49,"@rajeevwhiz - would you be interested in cleaning up the project and submitting it as a Pull Request? I think others would find your work very valuable since we only have 1 or 2 Swift examples. Let me know if you aren't interested and I can work getting the project ready to submit. 
",hannahmbanana,rajeevwhiz
2552,2016-11-09 15:05:18,"Yes, I would love to.

On Wednesday, November 9, 2016, Hannah Troisi notifications@github.com
wrote:

> @rajeevwhiz https://github.com/rajeevwhiz - would you be interested in
> cleaning up the project and submitting it as a Pull Request? I think others
> would find your work very valuable since we only have 1 or 2 Swift
> examples. Let me know if you aren't interested and I can work getting the
> project ready to submit.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/issues/2552#issuecomment-259399765,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AT6RtXTOX8IOnMMhnUKw65S7szUEf3nyks5q8bcngaJpZM4KqMlb
> .
",rajeevwhiz,rajeevwhiz
2552,2016-11-09 15:54:11,"@rajeevwhiz - that would be awesome! 

A few requests:
- name the project `CustomCollectionView-Swift`
- usually we recommend that you take a example project (e.g. the `Swift` example) and copy in your files to preserve the project settings & project name (""Sample"")
- include legal header comments at the top of each file
- also, make sure you use 2 spaces (instead of tabs) :) 
",hannahmbanana,rajeevwhiz
2552,2016-11-09 20:42:13,"@hannahmbanana I am getting HTTP error 403 when I try to push the code to new branch ""CustomCollectionView-Swift""
",rajeevwhiz,hannahmbanana
2552,2016-11-10 15:46:18,"@rajeevwhiz Hey, did you fork the ASDK project and created a PR from your fork. You cannot push to a branch to the facebook/AsyncDisplayKit project directly.
",maicki,rajeevwhiz
2552,2016-11-10 16:23:06,"@maicki my apologies. I just submitted the PR from the fork. Let me know if everything looks okay.
",rajeevwhiz,maicki
2552,2016-11-10 16:28:24,"@rajeevwhiz Thanks!

PR: #2591
",maicki,rajeevwhiz
2551,2016-11-06 15:40:01,"@hannahmbanana Just added a couple of comments, but overall looks good!
",maicki,hannahmbanana
2550,2016-11-06 00:14:51,"Thanks @appleguy! Comments addressed.
",connor,appleguy
2543,2016-11-05 04:22:00,"@nguyenhuy could you elaborate?  Doesn't this potentially change as the bounds, contentSize, or contentInset changes?

I'm not too familiar with the core issue that was discovered (that lead to this diff), but it certainly would be nice if scrollableDirections weren't required to be overridden by all subclasses.  If the base class could provide an implementation that works for most cases — like relying on contentSize, which has to be set for scrolling to work properly anyway — that would be great!
",appleguy,nguyenhuy
2543,2016-11-05 21:10:47,"@appleguy: I meant we can just cache the directions once computed, since for most layouts those directions are constants. We can provide a simple mechanism to invalidate the cache if needed: https://github.com/nguyenhuy/AsyncDisplayKit/commit/12aa5f8bdb66d47813b292c5ad829587561b21d6
",nguyenhuy,appleguy
2543,2016-11-06 19:52:04,"@nguyenhuy I think it would be simpler to require implementation rather than to require invalidation. Requiring it will make compilation impossible. Requiring invalidation will mean users will need to learn to know to do or suffer with strange bugs.
",garrettmoon,nguyenhuy
2543,2016-11-06 20:49:47,"@garrettmoon to clarify, only layouts that have different directions under different conditions (say, vertical in portrait mode and horizontal in landscape) need to invalidate. 

That being said, after thinking about it again, I agree with you that it's better to require implementation. It's a bit inconvenient to developers but necessary to ensure correctness.
",nguyenhuy,garrettmoon
2543,2016-11-06 23:37:04,"@Adlai-Holler @appleguy @garrettmoon - Adding the assertion causes some of the `ASCollectionView` tests to fail. It looks like the issue is that ASCollectionView's `initWithFrame:` triggers ASCollectionView `didChangeBoundsWithOldValue:`. This method uses the `layoutInspector` getter which relies on the layout (which hasn't been set yet). 

What's the correct solution here? 

![screen shot 2016-11-06 at 3 36 46 pm](https://cloud.githubusercontent.com/assets/3419380/20042892/d7eb0862-a436-11e6-9910-d9d98e9e1fde.png)
",hannahmbanana,garrettmoon
2543,2016-11-06 23:37:04,"@Adlai-Holler @appleguy @garrettmoon - Adding the assertion causes some of the `ASCollectionView` tests to fail. It looks like the issue is that ASCollectionView's `initWithFrame:` triggers ASCollectionView `didChangeBoundsWithOldValue:`. This method uses the `layoutInspector` getter which relies on the layout (which hasn't been set yet). 

What's the correct solution here? 

![screen shot 2016-11-06 at 3 36 46 pm](https://cloud.githubusercontent.com/assets/3419380/20042892/d7eb0862-a436-11e6-9910-d9d98e9e1fde.png)
",hannahmbanana,appleguy
2541,2016-11-14 13:13:10,"@Adlai-Holler: Awesome PR! It's a much simpler approach to fix flashes. 

I think we can improve this technique to cover cases in which the visible patch is not the first patch. We can queue up all laid out nodes and insert them all at once when the visible patch is ready. What do you think?
",nguyenhuy,Adlai-Holler
2541,2016-11-16 01:29:26,"@nguyenhuy I think that is the ideal approach, but we have an architectural issue to resolve before then – how, given a user that implements UICollectionViewLayout, do we know where that visible patch is?

That is, if the user doesn't get a chance to layout nodes until the nodes are measured and inserted (since UICollectionViewLayout talks directly to UICollectionView), how can we wait until they are laid out to insert them? And how can we let the user drive the measurement process instead of us measuring batches of nodes and THEN handing them to the user to layout?

One good solution might be to create a new protocol such as `ASCollectionNodeLayout` that resembles `UICollectionViewLayout`. The user provides us this object, and we talk to it, and we provide our own `UICollectionViewLayout` that vends data buffered from their async layout.

This new async layout would break the circular dependency (insertion [depends on] layout [depends on] insertion). That is, the async layout would find out about new items before the UICollectionView does. It would stay in sync with the data source, which would be another huge win for reliability, since layouts often talk directly to delegates (such as `collectionView:layout:sizeForItemAtIndexPath`). This async layout object (which may well have to run on the main thread, we'll see) will be responsible for allocating & measuring nodes only as it needs to (which is a huge win for the photo grid use case). 

It would be easy enough for us to ask this new async layout object for `layoutAttributesForElementsInRect:` given the screen + some buffer in case they're scrolling. We can't do this today, because the elements aren't yet inserted in the collection view.

Thoughts @nguyenhuy?
",Adlai-Holler,nguyenhuy
2541,2016-11-16 18:42:30,"@Adlai-Holler: Yeah, great question on determining visible nodes. I was thinking maybe we can rely on the previous visible paths and assume that the new ones are at least very close. It's definitely the case if items have the same size. I can even put up a short working prototype with that assumption.

That being said, your idea is more generalized and should cover all cases. But it looks like a big change. After a discussion with @garrettmoon, @appleguy and @maicki, we agreed that we don't have time to make it to 2.0. @garrettmoon will move #2536 to later milestones.
",nguyenhuy,Adlai-Holler
2540,2016-11-03 19:24:05,"@hannahmbanana It works great with scrollableDirections! As always thanks for efficiency!!!
",Baevra,hannahmbanana
2539,2016-11-03 13:10:33,"Ohh, it's a bad mistake. Thanks @garrettmoon @appleguy for spotting and fixing this!
",tamaskarai,garrettmoon
2539,2016-11-03 13:10:33,"Ohh, it's a bad mistake. Thanks @garrettmoon @appleguy for spotting and fixing this!
",tamaskarai,appleguy
2536,2016-11-14 21:35:29,"@nguyenhuy does @Adlai-Holler 's PR address this? Can it be closed?
",garrettmoon,nguyenhuy
2536,2016-11-14 21:52:45,"@garrettmoon: it does partially address this issue. But I'm having an improvement in mind, will report back this week.
",nguyenhuy,garrettmoon
2536,2017-02-09 19:11:33,@nguyenhuy - could you update this thread? I know you've been working on improvements in this area. :),hannahmbanana,nguyenhuy
2523,2016-11-02 00:33:24,"Beautiful, thanks @george-gw !
",Adlai-Holler,george-gw
2517,2016-10-31 20:43:49,"@garrettmoon Thanks for reporting. I will look into it.
",maicki,garrettmoon
2511,2016-10-30 22:34:01,"@Adlai-Holler This is a great change - profiling definitely did show shadower objects created in significant numbers, sometimes resulting in runtime lock contention.  I don't recall the numbers, but this could be a 1-2% improvement in text handling!
",appleguy,Adlai-Holler
2510,2017-02-09 19:59:13,"I for one, am SUPER EXCITED to see @Adlai-Holler's new ASTextNode improvements coming soon in Spring '17! ",hannahmbanana,Adlai-Holler
2508,2016-10-31 03:31:06,"Hi @hannahmbanana,
Thanks for your information about the meaning of the word `node` in Apple's memory graph. Please view the image detail of the `3-node cycle`
![screen shot 2016-10-31 at 10 22 13 am](https://cloud.githubusercontent.com/assets/7148482/19843441/018c44a6-9f55-11e6-8722-06bed0686865.png)
",nhatlee,hannahmbanana
2507,2016-10-28 23:21:38,"Nice, feel free to merge after CI passes @maicki 
",Adlai-Holler,maicki
2505,2016-10-28 22:40:08,"@maicki Would it be worth adding an assertion in `-[ASDisplayNode calculateSizeThatFits:]`, that the constrained size is valid? It might help debugging. `Cannot calculate size of node because constrained size is infinite and node does not override -calculateSizeThatFits:. Try setting style.preferredSize on the node. Node: %@`
",Adlai-Holler,maicki
2503,2016-10-28 22:18:21,"@garrettmoon Ok let's get that in as soon as Jenkins finished
",maicki,garrettmoon
2502,2016-12-05 12:57:15,@maicki How do you layout a subnode after adding it to the view?,codeOfRobin,maicki
2502,2016-12-06 10:17:12,"@maicki Thanks! 
So, I'll write down what I think is the _""canonical""_ way of setting up ASDK nodes inside UIViewControllers.

1. Add an `ASDisplayNode` to your `UIView`. Typically, setting it's bounds = view.bounds in the `viewDidLayoutSubviews` method is useful for most cases
2. Add subnodes to the aforementioned `ASDisplayNode`
3. Profit ??

One problem though, where do you place the layout code? (the stuff that's supposed to go in `layoutSpecThatFits` ?

Answer: you add a layoutSpecBlock to the `ASDisplayNode`
for example,

",codeOfRobin,maicki
2498,2016-10-29 16:50:09,"Bravo @george-gw ! Let's take this to the bank.
",Adlai-Holler,george-gw
2495,2016-10-28 20:32:26,"@hannahmbanana Don't worry we will get it in :) let me take it over
",maicki,hannahmbanana
2495,2016-10-28 23:40:37,"@maicki - sure, thanks! It's failing on the `examples/Swift` project.
",hannahmbanana,maicki
2495,2016-10-29 14:54:12,"@hannahmbanana Should be fixed. Can you please pull and test again. Thanks!
",maicki,hannahmbanana
2495,2016-10-30 19:01:00,"thanks @maicki! 
",hannahmbanana,maicki
2495,2016-11-01 14:36:40,"@nguyenhuy Rebased, added `ASDISPLAYNODE_INLINE` back again. Can you get it another look and approve. Thanks!
",maicki,nguyenhuy
2490,2016-10-27 14:20:02,"@george-gw thanks 👍  good work with the examples - to be honest I wasn't aware of `CGFloat.infinity`
",lsnpatryks,george-gw
2488,2016-11-04 01:38:59,"@appleguy Everything is working really great after the update! Images are loading first go and everything else is loading quick too! Thank you !
",bevbomb,appleguy
2486,2016-11-02 14:58:58,"@Adlai-Holler: I can take this if you don't mind.
",nguyenhuy,Adlai-Holler
2486,2016-11-02 15:57:01,"Awesome, thanks @nguyenhuy !
",Adlai-Holler,nguyenhuy
2485,2016-10-27 14:24:34,"@Adlai-Holler will do
",george-gw,Adlai-Holler
2479,2016-10-26 18:38:11,"Such a huge improvement in a small diff. And a unit test too! Nice @george-gw .

Note: Tested with Pinterest and we're looking good.
",Adlai-Holler,george-gw
2473,2016-10-24 20:00:03,"@garrettmoon We won't – in the getter we will only ever create one default layout inspector.
",Adlai-Holler,garrettmoon
2470,2016-10-29 03:36:00,"This does appear to be a significant performance improvement of over 10% — Great work @maicki !!  This makes a big difference on not only our benchmarks, but also real-world app workloads!

This is a _tremendous_ figure because it _includes_ the extremely expensive text sizing work, all block and runtime overheads, etc — and means that the optimization for the Stack code itself is very likely ~>50%.

Old: 15.96s
<img width=""1240"" alt=""screen shot 2016-10-28 at 8 32 41 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19826955/1da22682-9d4e-11e6-9357-fcb6c02fb2bd.png"">

New: 14.29s
<img width=""1222"" alt=""screen shot 2016-10-28 at 8 30 13 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19826956/1dbb042c-9d4e-11e6-8c31-a8c34cfa19e3.png"">
",appleguy,maicki
2470,2016-10-30 18:53:05,"@rcancro @appleguy Thanks for reviewing! I will let the variable name for now as it is as we use this name all in the stack layout spec components from the beginning on. We could address it in a follow up PR, it would add some noise that is not really related to the task to this PR.

Will merge as soon as CI finished.
",maicki,appleguy
2468,2016-10-26 18:08:48,"@george-gw You're absolutely right. 

One solution would be to add a weak reference to the owning `ASTableNode/ASCollectionNode` to `ASIndexedNodeContext` (passed into `init`) and to `ASCellNode` (publicly `readonly`, privately `readwrite` in `ASCellNode+Internal.h`). When `ASIndexedNodeContext` creates the node, we can attach that pointer to the cell node. 

I think that should work pretty nicely. Thoughts?
",Adlai-Holler,george-gw
2468,2016-10-27 12:24:47,"@Adlai-Holler I changed the code to better fit our needs based on your suggestions, I ran all the test cases and they all succeeded, I added a few more checks in the indexPath consistency test to check for nodes that aren't displayed and they are passing (I tried the same code with the old way of handling the indexPaths and they failed).
",george-gw,Adlai-Holler
2468,2016-10-27 18:35:33,"@Adlai-Holler There is a test case for indexPath consistency, it tests different aspects. Do you have a different kind of test you'd like me to write?
",george-gw,Adlai-Holler
2468,2016-10-27 18:40:43,"@george-gw Oh those are just the magic words that you use to get our Jenkins CI to run tests. Your test looks good.
",Adlai-Holler,george-gw
2468,2016-10-27 18:41:12,"@Adlai-Holler oh haha! 👍 
",george-gw,Adlai-Holler
2468,2016-10-27 18:46:16,"@george-gw Take a look at #2493. Now that `ASCellNode` has `indexPath`, that custom subclass will not automatically synthesize an ivar for it. Could you modify the example code to get Jenkins passing?
",Adlai-Holler,george-gw
2468,2016-10-27 18:58:18,"@Adlai-Holler which would you prefer? changing the property name to `currentIndexPath` or just doing something like: `@synthesize indexPath=_indexPath;`?

I went with the synthesize :)
",george-gw,Adlai-Holler
2468,2016-10-27 23:55:58,"Thanks @george-gw. Resolves #2447. Here, we, go! 
",Adlai-Holler,george-gw
2468,2016-10-30 20:49:17,"@Adlai-Holler @george-gw: should we rename the `indexPath` property to something more unique? This currently conflicts with Pinterest code. 
",hannahmbanana,george-gw
2468,2016-10-30 20:49:17,"@Adlai-Holler @george-gw: should we rename the `indexPath` property to something more unique? This currently conflicts with Pinterest code. 
",hannahmbanana,Adlai-Holler
2465,2016-10-24 03:31:19,"You make a great point @lappp9. 

The ASDK team really (and I mean _REALLY_) cares about naming conventions, but we got pretty side-tracked with debating the naming of this element just last week and I'm not sure anyone has the heart to do it again. :D 

cc @garrettmoon @Adlai-Holler 
",hannahmbanana,lappp9
2465,2016-11-01 00:30:27,"@lappp9 this is a very thoughtful consideration, and could have been a valuable input to the discussion!  That said, I think we're locked on this particular name.

It has the advantage of being more concrete and understandable to developers; a ""Layoutable"" is a pretty abstract and funny-sounding thing, whereas a ""LayoutElement"" can more readily be understood as an individual object that relates to a layout.

This was one of the toughest names to choose in the API, and I think there are compromises for both, so in this case we'll forge ahead with the benefits and detriments to ASLayoutElement.
",appleguy,lappp9
2465,2016-11-06 05:48:29,"@appleguy gotcha, that reasoning definitely makes sense!
",lappp9,appleguy
2456,2016-10-21 18:32:50,"@tamaskarai - thanks for contributing this!!! We're in an all-day meeting today, but we'll try to provide feedback in the next few days. 
",hannahmbanana,tamaskarai
2456,2016-10-24 11:55:34,"@hannahmbanana @Adlai-Holler Thank you for your support. Meantime I managed to fix all CI issues.
",tamaskarai,hannahmbanana
2456,2016-11-01 22:19:41,"Thanks @Adlai-Holler for helping me implement this feature, you're review comments were super useful! We're looking forward to contributing to this awesome product more as our team is going to use AsyncDisplayKit for more features in the future.
",tamaskarai,Adlai-Holler
2454,2016-10-21 18:58:03,"@romankl - thank you for updating this for us! 
",hannahmbanana,romankl
2454,2016-10-22 00:38:58,"@romankl cool, thank you!
",appleguy,romankl
2453,2016-10-24 16:29:50,"Nice! Thanks @george-gw!
",Adlai-Holler,george-gw
2452,2016-10-26 19:04:32,"Hmm running the tests is still failing locally for me (Xcode 8 iPhone 7 simulator). I'll investigate later today unless you get to it first @hannahmbanana 
",Adlai-Holler,hannahmbanana
2452,2016-10-27 18:45:20,"@Adlai-Holler - I'm getting the duplicate protocol definition error again. I'll reimplement this in a new PR and see if that does the trick. If #2495 passes, we can close this one.
",hannahmbanana,Adlai-Holler
2451,2016-10-21 17:18:45,"@hannahmbanana The reason is, the index paths returned by the view method will be in the view index space. This method should return index paths in the node index space.
",Adlai-Holler,hannahmbanana
2448,2016-11-01 00:36:33,"@rainypixels I would love to help you out with this!  If you could ping me on Slack, we could work through some debugging steps.

Naturally it's important to dump a ""po [[UIWindow keyWindow] recursiveDescription]"", so if you could send this over (or post it here if it's not sensitive), that would be the best start.

ASDK 2 is now very stable and is better in 1.9.91 in really all respects; we're shipping Pinterest with it, Buffer is using it at scale, and others as well.  So as you mentioned in the core of your message (but not at the end), you should jump on master or one of our branches (like releases/p6.13) and debug from that state.

The most likely suspect is that you have a supernode/superview that is zero-sized or sized smaller than it should be, and one of the children is outside the bounds of that parent (which must have clipsToBounds = NO, if this theory is correct).  In such a case, display will work perfectly, but event delivery won't occur.

If you need to dive in, you can set a breakpoint on hitTest: or pointInside and follow the UIKit event delivery process.  You should be able to do this on _ASDisplayView, which will make the debugging more concrete than if you set a symbolic breakpoint on UIKit itself, and it will cut out some of the extra levels that probably aren't the issue (UIWindow, UIViewController container views, etc).
",appleguy,rainypixels
2448,2016-11-01 22:59:36,"I just found the issue thanks to your `hitTest` symbolic breakpoint tip!

Embarrassingly enough, I actually found a method override with this signature in a `UICollectionViewCell` extension:



I remember adding it a while back to help with some debugging/touch visualization, and I must have checked it in by mistake. The method was effectively swallowing touches in `UICollectionViewCell` instances. This never affected my project until I integrated ASDK a couple of weeks ago, and converted my tableview-based feeds to collectionview nodes. Perfect storm!

Thanks much, @appleguy! I'm going to go ahead and close this issue.
",rainypixels,appleguy
2440,2016-10-21 01:18:32,"Here's the failure @Adlai-Holler 

6.00s$ gem install xcpretty-travis-formatter
Successfully installed xcpretty-travis-formatter-0.0.4
1 gem installed
0.84s$ gem uninstall bundler
Select gem to uninstall:
1. bundler-1.12.1
2. bundler-1.12.2
3. bundler-1.12.5
4. bundler-1.13.1
5. bundler-1.13.2
6. All versions
   > ERROR:  While executing gem ... (NoMethodError)
   undefined method `>=' for nil:NilClass
",appleguy,Adlai-Holler
2435,2016-11-15 21:36:33,"@Adlai-Holler since we haven't gotten a volunteer on this, can you take this on?
",garrettmoon,Adlai-Holler
2434,2016-11-16 03:37:32,"@garrettmoon - I only moved over the `2.0` tasks. There are 130 remaining tasks in ship. I wasn't sure if we wanted to flood GitHub with all of those at once. Perhaps I'll just move the 80 `2.1` tasks over. 
",hannahmbanana,garrettmoon
2431,2016-10-19 17:51:09,"@tomizimobile This is pretty serious! Is it possible that code inside your `deinit` implementation calls `retain` on self? Does the issue occur with a trivial or empty implementation of `deinit`?
",Adlai-Holler,tomizimobile
2431,2016-10-19 17:56:30,"@Adlai-Holler The issue occurs with something as trivial as `print(""deinit"")` - although an empty implementation is ok
",tomizimobile,Adlai-Holler
2431,2016-10-19 18:58:03,"@tomizimobile Yep just confirmed it. Sample project:

[NodeSwiftDeallocTest.zip](https://github.com/facebook/AsyncDisplayKit/files/539933/NodeSwiftDeallocTest.zip)

I can't investigate it immediately but cc #2223 @johnepinterest @appleguy for the time being. 
",Adlai-Holler,tomizimobile
2431,2016-11-01 00:52:59,"@Adlai-Holler I don't think we can address this for 2.0, but if you could run a quick test to see if it's possible to create a workaround for this, that would be helpful.

If you can't think of a workaround to try, punt to 2.1 and we will all be better off when we land #2223 :).  It feels a bit risky to take that diff for 2.0, but if you'd like to shoot for it, let's discuss in the next team meeting!
",appleguy,Adlai-Holler
2431,2016-11-18 22:20:10,"@Adlai-Holler should be fixed by 2223, right?
",appleguy,Adlai-Holler
2431,2016-11-21 15:55:48,@appleguy Yep @tomizimobile could you check post-#2223 and let us know how it performs?,Adlai-Holler,appleguy
2431,2016-11-21 15:55:48,@appleguy Yep @tomizimobile could you check post-#2223 and let us know how it performs?,Adlai-Holler,tomizimobile
2431,2016-11-21 17:13:04,@Adlai-Holler looks good to me,tomizimobile,Adlai-Holler
2428,2016-10-19 16:48:18,"@tamaskarai Thanks for a thorough, clean issue report! We'd be glad if you implemented this change, and ideally added a unit test to ASControlNode to ensure the behavior stays fixed.

Obviously it's important that the targets are not retained – our best bet may be to follow `UIControl`'s model and create e.g. [ASControlTargetAction](https://github.com/nst/iOS-Runtime-Headers/blob/master/Frameworks/UIKit.framework/UIControlTargetAction.h) objects. Or even better, create a C++ struct for each target-action and store them in a `std::vector`.
",Adlai-Holler,tamaskarai
2428,2016-10-20 07:38:13,"Hi @Adlai-Holler ,

Thank you for confirming this issue. I'll create a pull request and link this issue report once I'm ready with the implementation. Also, thanks for the implementation tips!

Tamas
",tamaskarai,Adlai-Holler
2425,2016-10-28 00:09:21,"@george-gw Would you be willing to rebase this to bring in fixes that make the CI pass?
",Adlai-Holler,george-gw
2424,2016-10-19 06:38:32,"@appleguy can you suggest which version is without error via cocoapods?
",albetjanuar,appleguy
2424,2016-10-19 07:43:22,"thanks @appleguy ! can't wait to integrate ADK to my project.
",albetjanuar,appleguy
2424,2016-10-20 20:18:11,"@ay8s that's actually the issue in this case, 1.9.90 hasn't been updated to the new beta-4 and beyond API.
",garrettmoon,ay8s
2424,2016-10-21 05:52:40,"@garrettmoon new version?
",boai,garrettmoon
2424,2016-10-21 06:11:06,"I have same issue few days ago, but solved with adding `pod 'PINRemoteImage', '3.0.0-beta.3'`.
now I've updated AysncDisplayKit to latest, 1.9.91, and the problem is solved.

Thanks! @appleguy 
",baby03201,appleguy
2415,2016-10-18 17:54:43,"@samhsiung Great catch! My mistake! Let's fast-track this into Pinterest.
",Adlai-Holler,samhsiung
2413,2016-10-18 18:21:21,"@maicki very interesting test, thanks!  This definitely had the intended benefit.  I think we could land this; I'm excited about during further work here, but let's hold off until next week / after the migration is finalized.
- @Adlai-Holler, @garrettmoon for context.  I modified the layout benchmark to be more discrete / reproducible, by changing the array that specifies view counts to be [100, 100, 100].

Running this benchmark on my iPhone 7 / A10, the cost associated with accessing the Style properties _other than .size, which is still locked_ has disappeared.  Accessing the style object itself also is still locked and is the largest single locking cost.

Images below:
1. Before cost (**73ms**) for properties on the style object (run 2 of 2 was the before / without the patch)
2. After cost (**17ms**) for properties on the style object (run 1 of 2)
2. Cost (**64ms**) (same before / after) of accessing the style object itself, through the lock.

<img width=""774"" alt=""screen shot 2016-10-18 at 11 11 30 am"" src=""https://cloud.githubusercontent.com/assets/565251/19490588/935441f8-9524-11e6-9fbe-5dee242b423a.png"">
<img width=""758"" alt=""screen shot 2016-10-18 at 11 14 11 am"" src=""https://cloud.githubusercontent.com/assets/565251/19490599/a57df87e-9524-11e6-891d-3459348cc2f3.png"">
<img width=""779"" alt=""screen shot 2016-10-18 at 11 16 53 am"" src=""https://cloud.githubusercontent.com/assets/565251/19490635/cb68b7b8-9524-11e6-8e03-2a463f6bcddf.png"">
",appleguy,maicki
2412,2016-10-18 15:18:50,"@garrettmoon Yeah I noticed, I updated the PR.
",smyrgl,garrettmoon
2412,2016-10-18 15:26:02,"@garrettmoon No yours is fine, closing mine.
",smyrgl,garrettmoon
2411,2016-10-21 00:33:21,"@george-gw awesome, thanks!!  The initial code was extremely rough / never really finished, so I support your change and thoughtful consideration of how it should work.
",appleguy,george-gw
2399,2016-10-16 21:10:26,"@appleguy Want to remove the old `ASPerformBlockOnDeallocationQueue` while we're at it? No reason to keep it around.
",Adlai-Holler,appleguy
2399,2016-10-17 00:21:20,"Much annoyance later, I'm ready to land this rewritten version.

@Adlai-Holler I turned off event logging by default even in DEBUG.  For the TableView example, we were exceeding 1GB of memory at peak (even without this change - it's not the queuing).  With those objects disabled, it's closer to 300MB.  I didn't look into it exhaustively, but there's a whole lot of the tracer objects :).

<img width=""524"" alt=""screen shot 2016-10-16 at 5 10 20 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19422180/f2b05936-93c4-11e6-9aa5-eabbba00fbe3.png"">
",appleguy,Adlai-Holler
2399,2016-10-17 00:23:23,"@appleguy I don't agree that we should disable event tracing in debug.
- You don't know you need event logging until you do. If you stumble upon some rare crash/race condition, you can't relaunch the app to turn it on.
- This is a wacky synthetic benchmark that creates and measures as many nodes as possible all at once, so the performance implications of event tracing in this context shouldn't drive our decisions.
",Adlai-Holler,appleguy
2399,2016-10-17 04:25:24,"@Adlai-Holler With 284,000 events live at one time, is it possible they're staying around longer than expected?  I can leave it on, but am concerned about how it made up for seemingly 700MB - maybe it caused other large objects to stay alive?
",appleguy,Adlai-Holler
2399,2016-10-17 04:37:17,"@Adlai-Holler also, thanks for the clear feedback re: disabling by default.  Your reasoning is sound as usual, and I've reverted that side-effect of this change.

I agree we don't need to be too concerned with a synthetic benchmark; however, since running as DEBUG on a device is not too uncommon for Pinterest development, if the memory overhead reaches similar levels for complex UI flows then we should consider making it simulator-only (or reducing the log size some other way)
",appleguy,Adlai-Holler
2398,2016-10-16 19:39:09,"@maicki Could we still have position be readonly externally, but writeable internally?  I don't have an opinion yet on if this change is the right direction, although reducing object allocations will definitely be valuable here.
",appleguy,maicki
2398,2016-10-16 19:43:38,"@appleguy Yes! The `position` will be `readonly` public, no problem and internally we can expose properties of `ASLayout` that we need `readwrite` like `position`
",maicki,appleguy
2398,2016-10-16 20:01:51,"@maicki Adding an internal header to make `position` `readwrite` seems right, but `flattened` is absolutely useless at the moment and should be removed. As it stands, `flattened` is only read in a context where we know that it will be `NO`.

I've modified the diff to lock `position` and noted a potential race condition. We could build basically a stochastic thrash unit test that attempts to reproduce the issue I described but the risk is very low.

Adding the internal header could be accomplished in a follow-up diff, as it would involve many code changes unrelated to this very sensitive core change.
",Adlai-Holler,maicki
2398,2016-10-17 02:48:52,"Profiling suggests that this does help quite a lot - I think we should take this change, and adapt it further as needed.  @maicki I think you know this code the best of us, so feel free to change this again in the future (maybe not a top priority now).

The layoutElement weak pointer is still one of the top causes of contention even after this change, but it is in a more reasonable range.  If we can think of a way to avoid using weak - some other data store that even if it behaves similarly, does not have lock contention against other weak variables- it would be worth doing.
",appleguy,maicki
2392,2016-10-16 03:42:19,"@Adlai-Holler Awesome, thanks for creating this on a Saturday!  The graph is really cool :).

Is the latest benchmark on your LayoutKit branch?  As we know, this ops/sec test is not exactly the most important metric for user-percieved performance, but still I'm curious to try out the latest on a tri-core iPad Air 2 and look at the key sources of contention.
",appleguy,Adlai-Holler
2392,2016-10-16 03:48:10,"@appleguy Yep! Latest benchmark is at https://github.com/Adlai-Holler/LayoutKit/tree/AddASDK just point the Podfile as you desire.
",Adlai-Holler,appleguy
2392,2016-10-16 07:08:38,"@Adlai-Holler @maicki Cool, I have some interesting profiling results.  We are spending an astounding amount of time dealing with the weak variable .layoutElement on ASLayout.

We're also triggering creation of the new .style object even when it is not needed / set to all-default values, but this is nowhere near as significant as the weak variable and general object cost of ASLayout.

This is an **inverted** tree showing the cost of weak, primarily layoutElement, on the powerful A8X over a short period of ~2 seconds of intense work.  The figures are pretty astounding!  The folded aggregations that do exceed weak represent the cost of object allocations in general, but unsure how actionable that is.

If we found an alternative data structure to perform the ASLayout -> ASLayoutElement weak mapping, it could pay off hugely, because of the extreme commonality of these objects (during both initial layout calculation and then flattening).  If we could ensure safety of unsafe_unretained (maybe by having the ASLayoutElement clear its own back-pointer on dealloc), that's one fix.  Perhaps only during the initial layout tree creation, before the longer-lived flattened version is created, there may be a guarantee that the ASLayoutElement will live as long as the ASLayout.

<img width=""1308"" alt=""screen shot 2016-10-16 at 12 03 55 am"" src=""https://cloud.githubusercontent.com/assets/565251/19415885/170bea16-9334-11e6-94a5-449020b355bb.png"">
",appleguy,Adlai-Holler
2392,2016-10-16 19:12:19,"@appleguy @maicki Awesome find! I notice that in `filteredNodeLayoutTree` we copy all of the display node layouts and change `flattened` and `position` on the copy. 

It seems likely that we can skip this copy. The old `position` value is probably not important to anyone. And `flattened` is only read on the layout's sublayouts in that same method, so unless we have a circular dependency the flag could probably be removed entirely.

Thoughts?
",Adlai-Holler,appleguy
2392,2016-10-16 19:24:13,"@appleguy @Adlai-Holler Another approach is to finally create a new private (or layoutspec / subclass) header for `ASLayout` that we use internally in ASDK that defines the properties like `flatten` and `position` of the layout as readwrite and allows us to change them without having to make an explicit copy. Furthermore this would allow us to declare the position of the `ASLayout` in the public header finally as `readonly`.

Creating the internal header would allow us to get rid of that extra creation of the `ASLayout` object.
",maicki,appleguy
2392,2016-10-16 19:24:13,"@appleguy @Adlai-Holler Another approach is to finally create a new private (or layoutspec / subclass) header for `ASLayout` that we use internally in ASDK that defines the properties like `flatten` and `position` of the layout as readwrite and allows us to change them without having to make an explicit copy. Furthermore this would allow us to declare the position of the `ASLayout` in the public header finally as `readonly`.

Creating the internal header would allow us to get rid of that extra creation of the `ASLayout` object.
",maicki,Adlai-Holler
2392,2016-10-17 02:49:04,"@appleguy  🙌 Awesome! I saw your email about `weak` and I'll be contemplating it.
",Adlai-Holler,appleguy
2392,2016-10-18 00:12:43,"@appleguy Alright we're ready to rock! Jenkins failed because it couldn't find `PINCache` when building the `ASCollectionView` example. Strange. But the unit tests on Jenkins passed!
",Adlai-Holler,appleguy
2392,2016-10-18 00:14:05,"@appleguy The `NSStringDrawingContext` documentation makes it seem like it's just for adjusting scale factor. [Not so!](https://github.com/nst/iOS-Runtime-Headers/blob/master/PrivateFrameworks/UIFoundation.framework/NSStringDrawingContext.h)
",Adlai-Holler,appleguy
2392,2016-10-22 03:24:34,"Significant improvements!  Great work @Adlai-Holler!

Before is Run 1, after is Run 2.  Scrolling the same board, but there are suggestions at the bottom so workload is not identical in size - but close.  Compare percentage instead of ms.

Inverted tree:
<img width=""921"" alt=""screen shot 2016-10-21 at 8 23 14 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19616596/5ca1a970-97cc-11e6-913b-08f5df25baf6.png"">
<img width=""921"" alt=""screen shot 2016-10-21 at 8 21 19 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19616597/5cb9c7d0-97cc-11e6-8f05-478abe9ef12a.png"">

Standard tree, focused on the most prominent aggregations:
<img width=""830"" alt=""screen shot 2016-10-21 at 8 16 15 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19616599/5cbb7c74-97cc-11e6-9d33-d2cade3a9c84.png"">
<img width=""940"" alt=""screen shot 2016-10-21 at 8 18 07 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19616598/5cba5b78-97cc-11e6-8702-c1e7bb90fd1b.png"">
",appleguy,Adlai-Holler
2390,2016-10-24 16:39:56,"I just landed #2453 which adds the selection API to the node versions of table/collection. @hannahmbanana would you be willing to update this diff to use that method?
",Adlai-Holler,hannahmbanana
2389,2016-10-26 22:16:41,"@Adlai-Holler You think we should remove the check for the URL or the whole check?
",maicki,Adlai-Holler
2389,2016-10-27 23:31:27,"@maicki I was thinking we remove the override entirely – `ASImageNode`'s implementation of `calculateSizeThatFits:` seems correct to me. If we have a size from our image, use it. If we don't, just use the constrained size. Does that make sense?
",Adlai-Holler,maicki
2387,2016-10-16 00:05:34,"@maicki Nice to have this route available!  Any comments you can add here on what you think we should do?  This would be a pretty significant change, but it's the right time to consider it.

Is there any other advantage besides avoiding the return [ASLayoutSpec layoutSpecWithNode:self] line, and replacing it with return self; ?

I do think that 'size to match parent' easy path is very useful.  If that's the only advantage though, looking at the two names:
- (id<ASLayoutElement>)layoutElementThatFits:
- (ASLayoutSpec *)layoutSpecThatFits:

The layout spec method feels easier to understand.  This isn't just because of the protocol / return value, but because layoutSpec seems to clearly name it is the method to specify layout.  A layoutElement is a bit more vague of a connection - does a layoutElement just exist within a layout, or does it _define_ the layout?

Open to all thoughts and ideas here; let's decide this week.  @garrettmoon @Adlai-Holler @hannahmbanana  @nguyenhuy 
",appleguy,maicki
2387,2016-10-16 00:15:34,"@appleguy This PR is still in development that's the reason there is no description yet. I thought about it today and I would like to go the route to actually deprecate `layoutSpecThatFits:`, but we should talk about it if we would like to consider adding this to the 2.0 roadmap, what I'm not really sure about.
",maicki,appleguy
2387,2016-10-17 00:56:26,"@appleguy Updated description
",maicki,appleguy
2387,2016-10-17 15:12:32,"@appleguy I moved `layoutElementThatFits:` to a beta header. I still think this is the right approach to go for the future as it would allow developers to return any object that conforms to `ASLayoutElement` (program to  interface not implementations). I don't know if we should do more API changes for 2.0 for this so I moved it to a beta header for now ...

Furthermore this PR includes some cleanup internally that would be great to have too.

@Adlai-Holler @appleguy Ready for review.
",maicki,appleguy
2387,2016-10-24 15:16:10,"@Adlai-Holler @appleguy What do you guys think of merging that in soon (after rebasing) and disable `layoutElementThatFits:` for now in the public API. Besides introducing `layoutElementThatFits:` it also has some nice code cleanup that would be good to have in.
",maicki,appleguy
2387,2016-10-24 16:26:05,"Geez this is a tough one. Now that we have ASWrapperLayoutSpec, which is very easy to understand, I lean toward keeping `layoutSpecThatFits` as the central layout spec method. I do want the code cleanup, but we should avoid bringing in the underlying changes like `_layoutElementThatFits` if we're not going to use it. Do you feel strongly about this @maicki ?
",Adlai-Holler,maicki
2387,2016-10-24 17:02:42,"@Adlai-Holler Valid point and I'm unsure myself if this would harm the API more as it would improve it. As #2469 just landed that improves `ASWrapperLayoutSpec`even more, let me put up a new PR (or change the PR) with just the code cleanup.
",maicki,Adlai-Holler
2385,2016-10-16 00:18:23,"@lappp9 Hey Luke, thanks for working on that. There are more substantial problems (in terms of layout logic as it was originally kind of copied from `ASCenterLayoutSpec`) with how `ASRelativeLayoutSpec` is implemented that I'm currently looking into and will follow up with something pretty soon.

cc @appleguy @Adlai-Holler 
",maicki,lappp9
2385,2016-10-16 01:30:50,"@maicki should we merge this before your diff?
",appleguy,maicki
2385,2016-10-16 01:35:39,"@appleguy No, this change will be included in my diff. We are not able to merge it as it needs further adjustments in `ASRelativeLayoutSpec` itself as well as the snapshot tests.
",maicki,appleguy
2376,2016-10-13 18:37:51,"Thanks @Adlai-Holler!  This may re-introduce a very minor, rare edge case sizing bug - but fixing the performance and thread safety issues is far more important.

@hannahmbanana Let's get this merged into p6.13 and Pinterest updated as well.
",appleguy,Adlai-Holler
2372,2016-10-13 21:44:54,"@Adlai-Holler: Want me to push these example project updates?
- ASCollectionView
- ASDKgram
- ASDKTube
- CatDealsCollectionView
- CustomCollectionView
- HorizontalWithinVerticalScrolling
",hannahmbanana,Adlai-Holler
2372,2016-10-13 22:07:27,"@hannahmbanana Sure – feel free to push them onto this branch.
",Adlai-Holler,hannahmbanana
2372,2016-10-14 04:03:08,"@Adlai-Holler: could you review the example file updates?
",hannahmbanana,Adlai-Holler
2372,2016-10-14 23:49:43,"@Adlai-Holler: There's a bug with ASTableNode / `nodeForRowAtIndexPath:` not getting called.

`ASTableView.mm` (line 1389) should be this (the if and elseif: were checking the same flag)
 `} else if (_asyncDataSourceFlags.tableNodeNodeForRow) {`

I'll push the fix when I push the example updates. 
",hannahmbanana,Adlai-Holler
2369,2016-10-11 23:36:37,"Thanks @maicki!  Since Jenkins passed and Travis hasn't even allocated a machine yet, I'll merge this.
",appleguy,maicki
2367,2016-10-19 12:49:34,"@Adlai-Holler sample project was reuploaded. 
Please, check it again.
",stephenkopylov,Adlai-Holler
2366,2016-10-11 16:17:26,"@maicki Looks great! To the protocol name, it's not a great name but we can always change it (or even remove it) later with no great penalty so let's move forward with it for now.
",Adlai-Holler,maicki
2361,2016-10-11 05:34:46,"@hannahmbanana ok I need to take time, if encounter any issue I will post here
",hashemp206,hannahmbanana
2357,2016-10-07 05:47:37,"@maicki looks good, thanks Michael!  Sorry I missed this.
",appleguy,maicki
2350,2016-10-07 10:19:16,"@hannahmbanana: Simply overriding `viewWillAppear()` and `viewDidAppear()` in the `ChildViewController` from the code above shows that they aren't called too.

I've taken a look at the `ASCellNode` implementation. What it is doing is explicitly calling `[_viewController view];`. The view controller then calls the `loadView()`, `viewDidLoad()` and all other methods.

This does the trick in my code too, but, in my opinion, it looks more like an error-prone workaround rather than a straightforward solution. I'd expect the `ASDisplayNode` to notify its view controller that it has loaded without requiring me to call anything explicitly.

I think the proper solution is to add an implicit relationship between an `ASDisplayNode` and its view controller. What do you think?
",EugenePogrebnoy,hannahmbanana
2350,2016-11-17 09:40:51,"@EugenePogrebnoy Hi! I believe there are two aspects in play here:

There is the fact that `-[UIViewController view]` actually calls `-loadView` and `-viewDidLoad`, and so if you use `vc.node.view` to retrieve the view, that code will not be run. This is something we should think about how best to handle. We should also keep in mind that technically a user could pass a loaded node into `-initWithNode:`.

Separately, there is the fact that whenever you use child view controllers, it's important to add the view into the parent's view in between the calls to `addChildViewController` and `didMoveToParentViewController:`. So to fix the immediate issue, modifying as follows is a pretty standard convention for view controller containment:



cc @appleguy We should discuss our options for handling the case where `-[UIViewController view]` is not called sometime soon.
",Adlai-Holler,appleguy
2350,2016-11-17 12:05:37,"Sorry for not responding for so long.

@appleguy, I managed to solve my problem with the following class:



I tried it with both `UIViewController` and `ASViewController` subclasses and everything looks to work the right way.

Loading the view in response to the visibility events seems to work too, but then all loading and layout process happens immediately when the node becomes visible, which may cause some lags. So I thought that it's better to load the view as early as possible, i.e. in the `didLoad`.

Calling `child.didMove(toParentViewController: containerVC)` in the `didEnterVisibleState` seems to work ok too.

Ideally, there should also be some logic to remove the child view controller from its parent when it's not needed anymore. That would be especially useful in the `ASCellNode` subnodes. Probably it should happen in response to interfaceState change events (`ASInterfaceStateMeasureLayout` or `ASInterfaceStateFetchData`). But I'm currently satisfied with the solution above.

It would also be nice to detect the correct container view controller automatically instead of setting it explicitly. But that might require some deep changes in `ASDiplayNode` class.

@Adlai-Holler, I generally agree with you. The only thing is that as I understand `self.view.addSubview(self.child.view)` is supposed to be called by ASDK when using `usesImplicitHierarchyManagement = true`. And while this approach solves the problem in the example, I'm afraid that it can become a nuisance in more complex node hierarchies.
",EugenePogrebnoy,appleguy
2350,2016-11-17 12:05:37,"Sorry for not responding for so long.

@appleguy, I managed to solve my problem with the following class:



I tried it with both `UIViewController` and `ASViewController` subclasses and everything looks to work the right way.

Loading the view in response to the visibility events seems to work too, but then all loading and layout process happens immediately when the node becomes visible, which may cause some lags. So I thought that it's better to load the view as early as possible, i.e. in the `didLoad`.

Calling `child.didMove(toParentViewController: containerVC)` in the `didEnterVisibleState` seems to work ok too.

Ideally, there should also be some logic to remove the child view controller from its parent when it's not needed anymore. That would be especially useful in the `ASCellNode` subnodes. Probably it should happen in response to interfaceState change events (`ASInterfaceStateMeasureLayout` or `ASInterfaceStateFetchData`). But I'm currently satisfied with the solution above.

It would also be nice to detect the correct container view controller automatically instead of setting it explicitly. But that might require some deep changes in `ASDiplayNode` class.

@Adlai-Holler, I generally agree with you. The only thing is that as I understand `self.view.addSubview(self.child.view)` is supposed to be called by ASDK when using `usesImplicitHierarchyManagement = true`. And while this approach solves the problem in the example, I'm afraid that it can become a nuisance in more complex node hierarchies.
",EugenePogrebnoy,Adlai-Holler
2350,2016-11-21 15:37:38,@hannahmbanana: Looks like #2636 resolves this issue. Please assign this ticket to @maicki. Thanks!,nguyenhuy,hannahmbanana
2350,2016-11-23 22:12:37,"#2636 was closed in favor of #2653. Due to the reason we decided against using the ViewControllers view as hosting view this issues still remains.

As @Adlai-Holler already mentioned I think we have to have in mind that the node hierarchy is different than the view hierarchy different than the view controller hierarchy. You always have to add the view within `addChildViewController` and `didMoveToParentViewController:`, so in theory `loadView` should be called with the right timing. Setting `automaticSubnodeManagement` to true just means that we manage the subnode hierarchy for you in this case and `addSubnode` does not need to be called too at some point.

The issue that `loadView` is not called for already loaded nodes still exists though.",maicki,Adlai-Holler
2348,2016-10-11 17:54:00,"@Adlai-Holler here's the Jenkins failure:

10:38:16 ▸ Compiling ASCollectionView+Internal.m
10:38:16 
10:38:16 ❌  /Users/engineering/jenkins_root/workspace/AsyncDisplayKit-PRs/AsyncDisplayKit/Private/ASCollectionView+Internal.m:9:9: 'ASCollectionView+Internal.h' file not found
10:38:16 
10:38:16 #import ""ASCollectionView+Internal.h""
10:38:16         ^
10:38:16 
10:38:16 
10:38:16 *\* BUILD FAILED **
10:38:16 
10:38:16 
10:38:16 The following build commands failed:
10:38:16    CompileC /Users/engineering/Build/Intermediates/Pods.build/Debug-iphonesimulator/AsyncDisplayKit.build/Objects-normal/x86_64/ASCollectionView+Internal.o /Users/engineering/jenkins_root/workspace/AsyncDisplayKit-PRs/AsyncDisplayKit/Private/ASCollectionView+Internal.m normal x86_64 objective-c com.apple.compilers.llvm.clang.1_0.compiler
10:38:16 (1 failure)
",appleguy,Adlai-Holler
2348,2016-10-11 20:40:04,"Thanks @appleguy! The scope of this has changed radically and it's under re-development. Closing and will be superseded.
",Adlai-Holler,appleguy
2347,2016-10-06 01:30:14,"Thanks for adding the tests, @maicki !  I also really like having NSStringFromASDimension().

The failure is the layout attributes thing...

ASCollectionViewTests
  testSelection, failed: caught ""NSInternalInconsistencyException""
  /Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKitTests/ASCollectionViewTests.mm:97


",appleguy,maicki
2347,2016-10-06 17:53:26,"@Adlai-Holler Added `ASXCTAssertEqualDimensions` in #2351
",maicki,Adlai-Holler
2346,2016-10-05 21:52:52,"Wow, astoundingly concise optimization!  Thanks @garrettmoon!
",appleguy,garrettmoon
2345,2016-10-07 20:30:43,"@MarvinNazari: is this a regression when updating to today's master? We're currently making some [changes to the Layout API](http://asyncdisplaykit.org/docs/layout2-conversion-guide.html) so it would be helpful to know if this is a regression or not. 

cc @maicki 
",hannahmbanana,MarvinNazari
2345,2016-10-08 14:18:46,"@hannahmbanana:  just tested on 1.9.90, i solved the problem by using  `constrainedSizeForSupplementaryNodeOfKind` inside `ASCollectionViewLayoutInspecting`
",MarvinNazari,hannahmbanana
2345,2016-10-08 22:59:23,"@MarvinNazari: Glad to hear the issue is resolved. Thank you for reporting back!
",hannahmbanana,MarvinNazari
2339,2016-10-07 20:31:57,"Hi @hannahmbanana, @appleguy  thanks for your support
i have a big problem with this issue, i saw the function keep node alive here, it's good, but when i dismiss a View Controller contain some nodes, it still alive

`- (void)willMoveToSuperview:(UIView *)newSuperview
{
  // Keep the node alive while the view is in a view hierarchy.  This helps ensure that async-drawing views can always
  // display their contents as long as they are visible somewhere, and aids in lifecycle management because the
  // lifecycle of the node can be treated as the same as the lifecycle of the view (let the view hierarchy own the
  // view).
  UIView *currentSuperview = self.superview;
  if (!currentSuperview && newSuperview) {
      self.keepalive_node = _node;
  } else if (currentSuperview && !newSuperview) {
    // Clearing keepalive_node may cause deallocation of the node.  In this case, __exitHierarchy may not have an opportunity (e.g. _node will be cleared
    // by the time -didMoveToWindow occurs after this) to clear the Visible interfaceState, which we need to do before deallocation to meet an API guarantee.
    if (_node.inHierarchy) {
      [_node __exitHierarchy];
    }
    self.keepalive_node = nil;
  }`
",caophong94,hannahmbanana
2339,2016-10-07 21:39:36,"@hannahmbanana , @appleguy : i just created new one, please take a look:
https://github.com/caophong94/alivecellnode

After dismiss AliveViewController, still found the AliveCellNode:
(
        ""-> _keepalive_node -> StillAliveNode.AliveCellNode "",
        ""-> _view -> _ASDisplayView ""
    )
",caophong94,hannahmbanana
2338,2016-10-03 23:47:35,"@garrettmoon It does 🙂
",Adlai-Holler,garrettmoon
2334,2016-10-04 14:45:08,"@maicki Great! thank you!

is there a way to either mention this behavior or create a followup improvement task to improve the user experience since the behavior is unexpected? Also I still want to check if this also fixes the button alignment. want to check that layoutSubviews() does get called.
",simoami,maicki
2332,2016-10-01 20:36:02,"@Adlai-Holler you should try to remove the dependencies from ASDK for the `ASAsyncTransaction` component.

cc #2333
",maicki,Adlai-Holler
2329,2016-10-07 07:04:25,"@master-nevi: Thanks for the very detailed description! A quick question: could you provide the backtrace of when the `clearFetchedData` is called before the video is played? Is this something you are triggering, or is it being called by the framework? 

As a short term fix, you may be able to avoid this by setting `defaultImage` to be the local video frame whenever you have a local frame available. Use it for the generic thumbnail if that is all you have, or override it with a locally cached image if available. 

There is a known issue with the `.image` property being cleared if it is not the same as represented as the URL (#2275), because ASNetworkImageNode was originally designed for these two to be related. But we should definitely support this use case.
",hannahmbanana,master-nevi
2329,2016-11-09 00:39:45,"@master-nevi Hey, what about having a container node that contains an `ASImageNode` / `ASNetworkImageNode` and a `ASVideoNode`. The image node is having the thumbnail and whenever you set the asset you could fade (or some other transition) the thumbnail node out and the video node in. Let me know if this would work.
",maicki,master-nevi
2329,2016-11-14 21:53:50,"@master-nevi can you put up a PR and we can discuss it there? Thank you!
",garrettmoon,master-nevi
2329,2016-11-17 18:42:41,"@garrettmoon PR opened!
",master-nevi,garrettmoon
2329,2016-11-18 02:30:15,"@master-nevi Hey thanks for creating the PR!

I'm actually currently looking into a different solution already mentioned above. In my opinion (and also talking with a couple of other developer) instead of fixing the broken behavior of `ASVideoNode`, we should prefer composition over inheritance and let `ASVideoNode` inherit from `ASDisplayNode` instead of `ASNetworkImageNode`. This would allow any developer to use the core components and combine them the way they want without having an overhead like `ASVideoNode` and `ASNetworkImageNode`. We could than create a mother component that could combine these two, but my solution for this issue would still to not use the backing `ASNetworkImageNode` functionality at all.

@Adlai-Holler @garrettmoon @appleguy Any opinions?
",maicki,garrettmoon
2329,2016-11-18 02:30:15,"@master-nevi Hey thanks for creating the PR!

I'm actually currently looking into a different solution already mentioned above. In my opinion (and also talking with a couple of other developer) instead of fixing the broken behavior of `ASVideoNode`, we should prefer composition over inheritance and let `ASVideoNode` inherit from `ASDisplayNode` instead of `ASNetworkImageNode`. This would allow any developer to use the core components and combine them the way they want without having an overhead like `ASVideoNode` and `ASNetworkImageNode`. We could than create a mother component that could combine these two, but my solution for this issue would still to not use the backing `ASNetworkImageNode` functionality at all.

@Adlai-Holler @garrettmoon @appleguy Any opinions?
",maicki,master-nevi
2327,2016-10-06 00:47:42,"@garrettmoon some minor improvements could be made here, but this is a big help to any readers of the file!
",appleguy,garrettmoon
2324,2016-10-03 03:32:05,"@maicki this needs to update the example projects to succeed.
",appleguy,maicki
2324,2016-10-04 02:47:55,"@maicki: first pass at the header docs.


",hannahmbanana,maicki
2324,2016-10-04 03:01:36,"@Adlai-Holler @appleguy Ready for review
",maicki,appleguy
2320,2016-09-29 21:39:42,"@maicki we shouldn't add an extra +load method for this case. Let's just read the info.plist dictionary directly from the bundle.
",levi,maicki
2319,2016-09-28 23:19:44,"@garrettmoon when convenient, this needs a rebase.
",appleguy,garrettmoon
2312,2016-09-28 00:02:40,"I would explicitly keep:
- The data source lock/unlock. That way if they have the warning about implementing deprecated methods enabled, they'll know it's gone.
- The `insetForSectionAtIndex` method for the same reason.
- `willDisplayNodeForItemAtIndexPath` because it was only deprecated recently.

Everything else I'd be willing to toss. I don't have strong feelings about any of them.

EDIT: Also thank you @garrettmoon for compiling this list!
",Adlai-Holler,garrettmoon
2312,2016-09-28 00:10:50,"@Adlai-Holler I think I agree about the lock / unlock and inset methods – there's no cost to leaving them in since we don't even call them any more.
",garrettmoon,Adlai-Holler
2312,2016-09-28 18:08:11,"- Agree with @Adlai-Holler for the lock / unlock and inset methods
- As I mentioned above: we should not remove `willDisplayNodeForItemAtIndexPath` yet.
",maicki,Adlai-Holler
2310,2016-09-27 23:15:59,"@Adlai-Holler let's see if this fixes it.
",levi,Adlai-Holler
2310,2016-09-28 00:55:55,"@levi interesting, this could be a true failure.

16:23:30 ASDisplayNodeTests
16:23:30   testDefaultPropertyValuesLayer, ((YES) equal to (node.allowsGroupOpacity)) failed: (""<01>"") is not equal to (""<00>"") - default allowsEdgeAntialiasing broken after loading layer
16:23:30   /Users/engineering/jenkins_root/workspace/AsyncDisplayKit-PRs/AsyncDisplayKitTests/ASDisplayNodeTests.m:306
16:23:30   `
16:23:30   XCTAssertEqual(NO, node.needsDisplayOnBoundsChange, @""default needsDisplayOnBoundsChange broken %@"", hasLoadedView);
16:23:30   XCTAssertEqual(YES, node.allowsGroupOpacity, @""default allowsEdgeAntialiasing broken %@"", hasLoadedView);
16:23:30   XCTAssertEqual(NO, node.allowsEdgeAntialiasing, @""default allowsEdgeAntialiasing broken %@"", hasLoadedView);
16:23:30`
16:23:30 
16:23:30   testDefaultPropertyValuesView, ((YES) equal to (node.allowsGroupOpacity)) failed: (""<01>"") is not equal to (""<00>"") - default allowsEdgeAntialiasing broken after loading view
16:23:30   /Users/engineering/jenkins_root/workspace/AsyncDisplayKit-PRs/AsyncDisplayKitTests/ASDisplayNodeTests.m:306
16:23:30   `
16:23:30   XCTAssertEqual(NO, node.needsDisplayOnBoundsChange, @""default needsDisplayOnBoundsChange broken %@"", hasLoadedView);
16:23:30   XCTAssertEqual(YES, node.allowsGroupOpacity, @""default allowsEdgeAntialiasing broken %@"", hasLoadedView);
16:23:30   XCTAssertEqual(NO, node.allowsEdgeAntialiasing, @""default allowsEdgeAntialiasing broken %@"", hasLoadedView);
16:23:30`
16:23:30 
16:23:30 
16:23:30     Executed 358 tests, with 2 failures (0 unexpected) in 8.897 (9.125) seconds

@levi note that the DEFAULT for this property will depend on the Info.plist, so maybe we shouldn't verify the default value.

Full build log: http://jenkinsmaster-vpc-007.ec2.pin220.com/job/AsyncDisplayKit-PRs/491/console
",appleguy,levi
2310,2016-09-29 13:46:38,"Hey @levi, you think you can get the problem solved soon?
",maicki,levi
2310,2016-09-29 14:19:28,"Not today, can you pull it down and fix it?

Cheers,
levi

On Sep 29, 2016, 06:47 -0700, Michael Schneider notifications@github.com, wrote:

> Hey @levi (https://github.com/levi), you think you can get the problem solved soon?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub (https://github.com/facebook/AsyncDisplayKit/pull/2310#issuecomment-250470363), or mute the thread (https://github.com/notifications/unsubscribe-auth/AAAhLUqMXbXNpVphVUCKP64ciEGJSr45ks5qu8FTgaJpZM4KIE2g).
",levi,levi
2308,2016-09-28 01:27:39,"@hannahmbanana nice~~ its not happening on master! that leap to 2.0 will be fun :D
",frankenthumbs,hannahmbanana
2301,2016-09-27 04:15:49,"@garrettmoon  thanks your reply. I had tried using `tableView:nodeBlockForRowAtIndexPath:` but nothing improved to my situation.  
like this : 
`ableView:nodeBlockForRowAtIndexPath:`
`{`
     `.....`
    `return` ^{
        `NSLog(@""%@"", (indexPath.row));`
        `return [[ASCellNode` alloc] init];
   `}`
`}`
I still see the result 1. block my screen 2. Console print ""1""""2""""3""......'2000"" waiting for 5,6seconds,   3. then the ASTableView is showing.   

Even  I  try the ""examples"" ""ASViewController"",  i modify ""[DetailRootNode.m](https://github.com/facebook/AsyncDisplayKit/blob/master/examples/ASViewController/Sample/DetailRootNode.m)""  `- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section`  return 2000,   then when i press any of first level cell @""abstract"", @""animals"", @""business"", @""cats"", @""city"",.... into  second level ViewController ,  i always  waiting long time to load  beacause  the ASTableview loaded all cell into memory.   like the matter  i  see   Console print ""1""""2""""3""......'2000"".    and i  indeed sure  the ""slow"" reason is that.   

So did any method or suggest  to improved my situation。 I really want to improved my app from AS and I already used AS in many part of my app, but this situation I can't resolved, I am so puzzled.

I even google many old issue like [#540](https://github.com/facebook/AsyncDisplayKit/issues/540)
, in this issue, the ""question titile"" is so same as my Q, is only the title,  the 
discuss not concentrated on the load all 2000 cell and enter slow slow slow.    so  not have a  clear resolution.   

can help me even more.
",leece,garrettmoon
2300,2016-09-26 21:06:38,"@garrettmoon thanks for the quick response. So first things. upgrading cocoapods. I've run the gem install with --pre flag and it says cocoapods 1.1.0 rc2 is installed but when i run pod --version i get 0.39.0 . This seems strange 



Next, looking at the bug you referenced. Do I need to put in the post_install hook still or does Cocoapod 1.0 does this automatically now?

Again, thanks for the feedback
",ikbenben,garrettmoon
2300,2016-09-26 21:09:31,"@garrettmoon great. any thoughts as to why version is 0.39.0 after saying 1.1.0 has been installed?
",ikbenben,garrettmoon
2300,2016-09-26 21:12:22,"@garrettmoon never mind.. looks like i have it sorted. had 2 versions installed. running gem uninstall cocoapods allowed me to uninstall the 0.39 version (for anyone else who comes across this)
",ikbenben,garrettmoon
2295,2016-09-26 03:53:25,"Thanks for the fix @hannahmbanana — I tried this locally on my iOS 10 instance because Jenkins is failing, and it does succeed, so I think there is a separate Jenkins issue.
",appleguy,hannahmbanana
2293,2016-09-26 22:19:34,"@garrettmoon 
The issue is I have a ASCollectionNodeX that is nested in a ASCellNodeY and I need to resize the ASCellNode to what the ASCollectionNodeX and its children are how would I attempt to do that?   There doesn't seem to be an easy way.
",ArEnSc,garrettmoon
2290,2016-09-28 00:03:55,"@maicki: This one had 15 rebase conflicts, so another quick review might be safe.
",hannahmbanana,maicki
2289,2016-09-29 13:45:46,"@hannahmbanana Can you please rebase so we can get that in. Thanks!
",maicki,hannahmbanana
2284,2017-01-13 00:39:33,@rajeevwhiz @lukeivers - could you elaborate a bit more on the UI you are trying to achieve and why you are using a `ASScrollNode` over a collection or table?,hannahmbanana,rajeevwhiz
2284,2017-01-16 19:21:40,"So, I’ve moved on and have solved my problems to some extent another way.

I suppose I might be able to solve it using a table (or collection), but the page isn’t really tabular, so I was trying to just use the most accurate set of components for my goal.  I try to avoid using tables simply for layout reasons for the same reason that it’s recommended to not use tables for layout within websites, even though in a lot of cases that makes it easier to render your view the way you want.

The best way to explain what I am doing (I simply dropped out of ASDK for rendering these screens for the time being) is it’s like viewing a photo album on Facebook, where there’s an image that takes up the vast majority of the screen, with text/etc info below the image.

The two complications are

1. The image resolution is well above what can be shown within the screen, and the user needs to be able to zoom into various portions of the image (this is literally the entire purpose of this screen).
2. The text/etc below the image will in most cases extend below the bottom of the screen, so the user needs to be able to scroll the entire screen down in addition to being able to pan/zoom within the image.

The whole thing is contained within a collection view (of the set of images).  It does full screen swipe left/right between items in the image collection.

So, as you can see, I have like 4 or 5 different pan/scroll/swipe actions all layered on top of each other within the screen.

I already have code to manage the relationship between those.  I got it to faithfully reproduce everything I am doing within the non ASDK-based screen, with the single exception of being able to actually pan/zoom on the image.

All that being said, if the only thing I need to do to make this work is swap out the ASScrollNode for a table, I will do that ASAP.  The code I had to write to emulate some of the under the cover stuff in ASDK is awful and ugly, and I would LOVE to get rid of it and just use ASDK here.

Thanks,
Luke

On Jan 12, 2017, 4:39 PM -0800, Hannah Troisi <notifications@github.com>, wrote:
> @rajeevwhiz @lukeivers - could you elaborate a bit more on the UI you are trying to achieve and why you are using a ASScrollNode over a collection or table?
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",lukeivers,rajeevwhiz
2278,2016-09-24 16:49:45,"Thanks for raising this @george-gw. It's unfortunate – `UIControlState` declares `UIControlStateNormal = 0` but in Swift it gets a `public static var normal: UIControlState { get }`. Having a ""zero"" option like this is [not technically allowed](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html) but Apple must've made some special exception.

I think we have two choices here:
- Do nothing. In Swift you'll have to use `[]` to represent an ""empty"" control state. Not really acceptable.
- Investigate whether we can add an optional Swift file into ASDK that defines an extension on `UIControlState` that adds the static var. Ideal outcome, extremely costly and perhaps impossible.
- Define `ASControlStateNormal = 1` as you mentioned. Fixes the Swift import, but diverges from UIKit's values and creates a new ""undefined"" 0 state. Also it's conceptually incorrect – normal means 0 flags.
- Replace `ASControlState` with `UIControlState`. Fixes everything, but we lose control of the enum. We could use `#define ASControlState UIControlState` to ease the transition.

We should do the last one. Apple has created a special exception for themselves and we should piggyback on it. The likelihood of us creating some new control state in the future is extremely low. This also eliminates code which is always nice. @appleguy @maicki could someone else weigh in?
",Adlai-Holler,george-gw
2278,2016-10-02 14:10:44,"Same happens with `ASRelativeLayoutSpecPosition`.

When using `ASRelativeLayoutSpec` it's not possible to define vertical or horizontal position to`ASRelativeLayoutSpecPosition.start`. Using`[]` or `ASRelativeLayoutSpecPosition()`seems to work as `.start`.

The solution provided by @george-gw makes the .start appear
",Vladis92,george-gw
2265,2016-09-19 18:40:40,"@shamanskyh: thanks for the updates! We are possibly a bit too fickle about naming and passionate about performance optimizations. I hope we didn't deter you from contributing more in the future. :) 
",hannahmbanana,shamanskyh
2265,2016-09-19 19:15:27,"@hannahmbanana not to worry! Naming is important, and the changes were easy to make! :)
",shamanskyh,hannahmbanana
2265,2016-09-20 16:28:17,"@shamanskyh Thanks for polishing this up so quickly. I think the optional scope timer logic is starting to get messy – for example, the diff as-is does not re-check the measurement flags when timing the environment propagation.

I think that adding an `enable` flag to scope timer will help clean up a lot of this logic. Take a look at this and let me know what you think https://github.com/facebook/AsyncDisplayKit/compare/AHScopeTimerEnableDemo
",Adlai-Holler,shamanskyh
2265,2016-09-20 16:40:06,"@Adlai-Holler good suggestion. I'll make the change and resubmit in a bit.
",shamanskyh,Adlai-Holler
2264,2016-11-14 22:12:31,"@IvanChan did @maicki 's answer solve your issue?
",garrettmoon,maicki
2261,2016-09-20 16:51:48,"@maicki 
- The class names are unpleasant. How about replace `ASLayoutableStyleDeclaration` with `ASStyle`? It has the word ass in it, which is unfortunate and kind of funny.
- Our dimension creating is also unpleasant.
  - Ideally we could do something clever with macros to enable: `style.minHeight = ASDimensionMake(100%)`. And somehow get the preprocessor to notice the suffix.
  - We could optimize the string-based creation method (probably using C-strings – currently it's quite expensive) but it's still a little ugly.
  - Now that we have a style object, we could expose: `minHeight: CGFloat, minHeightPercent: CGFloat, minHeightAuto: BOOL` which are all interfaces to the same underlying ASDimensionValue.
- The word `Declaration` in e.g. `ASStackLayoutStyleDeclaration` is baffling to me. If we use `ASStyle` for the main style object, let's keep storing layoutspec-specific style options (like centeringOptions) directly on the layout spec object and remove these intermediate objects.
- What do you think about adding a convenience method like


",Adlai-Holler,maicki
2257,2016-09-16 00:25:43,"@Adlai-Holler A long time ago, I believe this was necessary - but it was also before the ASIndexedNodeContext and other things, so it's good to hear that it isn't now.

You already committed to the testing, but I can't understate how important that is for this PR.  It looks good to me from a code perspective, but before landing it I think we should complete a few lodestone passes with it.  Maybe you can make a Pinterest branch so that everyone on our team / others who opt-in can run on it, and we wouldn't update that build at all, so any Fabric crashes can be aggregated at low volume after a weekend of testing?
",appleguy,Adlai-Holler
2255,2016-09-23 20:25:59,"@garrettmoon @Adlai-Holler @appleguy Ready for review
",maicki,Adlai-Holler
2255,2016-09-24 23:26:28,"@garrettmoon @Adlai-Holler ready for review again
",maicki,Adlai-Holler
2254,2016-09-17 03:14:07,"Hey @levi, Thanks for getting back. Here is a simplified version of my code:



(Note: I'm aware that explicitly unwrapping is bad; but I want to get the animation working and understand why it did not work in the first place 🙃)

Have I applied correctly what you described? And if so ... then it does not work 🙈

The super node above is the ASScrollView which wraps the UIView. Also the method layoutIfNeeded, only exists on UIView and not on a node. 

Whats your thoughts on this?
",renegare,levi
2253,2016-09-20 06:31:58,"@maicki you're cleared to merge this.  I wasn't able to do a line-for-line review of the logic, but I trust your consistently high attention to detail :).  After your final changes, let's make sure to run this through the Pinterest testing gauntlet too.  Since we're quite confident in it and it passes unit tests, you could land to master and follow up with Hannah to get testing on it in the following day or two.
",appleguy,maicki
2253,2016-09-22 21:04:10,"@appleguy @levi Ready for further review.
",maicki,appleguy
2253,2016-09-27 20:34:00,"@Adlai-Holler ready for review
",maicki,Adlai-Holler
2252,2016-11-29 20:32:18,"@hannahmbanana @Adlai-Holler I've also come across this issue. I found it in a specific view controller of mine, and I think having a non-translucent tabBar might be part of the issue (at least for me). Using aa9dff00de3b5faea432504aebfca1024108b727. Just run the sample project and hit the reload button without scrolling. Seems to be happening across a variety of simulators, tried it on 5S, 6S and 6S+

[ASDK-crash.zip](https://github.com/facebook/AsyncDisplayKit/files/620113/ASDK-crash.zip)",tomizimobile,hannahmbanana
2252,2016-11-30 17:01:55,@tomizimobile Thanks for an excellent repro! I turned it into a unit test case and resolved the issue in the linked PR. Could you and @nhatlee verify that the issue is fixed?,Adlai-Holler,tomizimobile
2252,2016-11-30 19:15:21,@Adlai-Holler I'm still seeing the issue in my current project. I've been trying to recreate it in a separate project but haven't been able to reproduce it there so far.,tomizimobile,Adlai-Holler
2252,2016-11-30 19:45:44,"@Adlai-Holler alright, finally tracked it down. Seemed to be ok with a grouped tableView, but this is happening with a plain tableView.

[ASDK-crash.zip](https://github.com/facebook/AsyncDisplayKit/files/622810/ASDK-crash.zip)
",tomizimobile,Adlai-Holler
2234,2017-03-10 05:53:21,"[TestAS.zip](https://github.com/facebook/AsyncDisplayKit/files/833081/TestAS.zip)

@maicki ",IvanChan,maicki
2229,2016-09-12 18:54:45,"@GitGadd: thanks including all of the relevant details here! @Adlai-Holler is currently working to isolate and resolve the underlying cause of the issue. We don't yet have a 100% easy repro case, so it would be awesome if we could see some of your code. I'll send you a message on Slack. 

@Adlai-Holler @appleguy 
",hannahmbanana,GitGadd
2228,2016-09-11 19:20:47,"@hannahmbanana cool, taking a look. Coincidentally, I was experimenting with animateLayoutTransition which I found in one of the examples.
",simoami,hannahmbanana
2228,2016-09-11 19:48:10,"@hannahmbanana Can you point me to the Animate code in question? Btw, the way I'm approaching this right now is:
- on user tap, I toggle a `liked` boolean flag
- update `likes` count
- call `setNeedsLayout()`

As a result, the entire cell animates to fit the new content, but the ""x Likes"" text node just appears immediately. 

preview: https://cl.ly/0B333v1p2G0u
",simoami,hannahmbanana
2228,2016-09-12 03:58:04,"@hannahmbanana My goal, which I guess the illustration above doesn't explain well, is to expand the ""x Likes"" vertically with clips to bound. and have the entire cell expand at the same time to accommodate the new height of the entire vertical stack. Think of an accordion animation.
",simoami,hannahmbanana
2228,2016-09-13 21:33:38,"@hannahmbanana I switched to using ASDK 2 to overcome an issue and while everything works as before, Layout Transition API seems to be deprecated. Thoughts?
",simoami,hannahmbanana
2228,2016-09-20 15:46:47,"@renegare The animations are not in sync. The content below the cell animates but the cell itself doesn't animate. it just jumps to the new height.

@hannahmbanana Here's an illustration of the current behavior and desired effect (taken from another app):

Current:
![current](https://cloud.githubusercontent.com/assets/2038264/18677660/885a0f84-7f27-11e6-9d73-2ce722b34e66.gif)

Desired:
![desired](https://cloud.githubusercontent.com/assets/2038264/18677743/d4fe115a-7f27-11e6-9ccf-763f3a65c08f.gif)
",simoami,hannahmbanana
2227,2016-09-11 20:07:29,"@hannahmbanana Ill do it in 20 minutes! =)
",ArEnSc,hannahmbanana
2227,2016-09-12 01:36:51,"[AsyncDemo.zip](https://github.com/facebook/AsyncDisplayKit/files/466385/AsyncDemo.zip)
@hannahmbanana 
So in the documentation it says that the cell should grow with it's content, meaning that if it had text that grew a ASTextNode with multiple lines of text, the cell height should resize to accommodate that. I believe the reason why it did not grow by itself was due to the fact that the width of the ASCellNode was not set.



This piece of code was needed in order to fix that problem, which was not clear in the documentation perhaps add it in ? soon ? 
",ArEnSc,hannahmbanana
2226,2016-09-12 11:16:31,"@hannahmbanana: I've found solution you are talking about in #1750. However i'm not sure it what i'm looking for. Generally what i want to achieve is:
There is very long list of items, 10000, for example. User can search through this items and enter list in the place of any item. So if he founds item at row - 5000, and enters table in that point, i want to load 100 items, 50 before and 50 after this item. After that user can scroll in both directions and i want to batch fetch items from top or bottom depending of scroll direction.
Mostly in a way how intelligent preloading described in docs (interface state ""fetch data"" works in both directions). But it seems it is how AsyncDisplayKit works under the hood and batch fetching api is another thing.
",mikhailmulyar,hannahmbanana
2225,2016-11-26 02:04:22,Thancks! It works.@hannahmbanana,GreatLiyi,hannahmbanana
2224,2016-09-11 23:59:20,"@maicki Could you explain a bit more what the functional difference is / why this is the correct behavior?

Small typo should be fixed so that a find-all locates this instance - I think it is automaticallyManagesSubnodes (in the comments you added)
",appleguy,maicki
2224,2016-09-12 17:42:47,"@appleguy Once we added exceptions in #2214 against manually manipulating subnodes of nodes using automatic subnode management, these code paths were causing exceptions that surprised users.

This change is a stopgap until we can do a deep-dive into how to combine manual and automatic subnode management more cleanly. However, now that we have internal insert/remove subnode methods, it also makes conceptual sense for us to call them in cases like this.
",Adlai-Holler,appleguy
2223,2016-09-10 02:13:40,"@levi Yep! To repro on master, just comment out 



from `-[ASDisplayNode dealloc]` and run unit test `testThatLayerBackedSubnodesAreMarkedInvisibleBeforeDeallocWhenSupernodesViewIsRemovedFromHierarchyWhileBeingRetained`

It'll crash every time during UIView dealloc. The view is enumerating its layer's sublayers' delegates and it gets a garbage value. @johnepinterest 
",Adlai-Holler,levi
2223,2016-11-16 23:34:16,"@Adlai-Holler As I suspected, you did a good job optimizing this approach from the design phase :).  Thank you for putting care into crafting this with a low-level implementation.

The overhead is definitely acceptable, about 0.1% CPU.  We of course get some bigger gains from having more objects deallocate off main (although more traffic going through the dealloc queue, and the extra retain / release operations, is going to create some complex additional lock contention issues for us to optimize later).

I think there's some more testing to do here, but performance won't be a blocking factor for this diff.

![screen shot 2016-11-16 at 3 29 42 pm](https://cloud.githubusercontent.com/assets/565251/20370166/15b770da-ac12-11e6-928c-8cc92214c69b.png)
",appleguy,Adlai-Holler
2223,2016-11-19 23:46:53,"@Adlai-Holler I rebased this to master for you.  There was a strange merge issue — it is showing parts of the new layout code that is on master in this diff, even though they should not be seen as differences compared to the base branch.  Can you take a look?

Feel free to revert my rebase if it's incorrect.  The goal is that I want to live on this diff over the weekend because I'm extensively testing Pinterest with the layout coalescing changes anyway — but need to be able to apply both this diff and master's new inclusion of the coalescing.
",appleguy,Adlai-Holler
2221,2016-09-11 07:16:01,"@Adlai-Holler Awesome work on this, curious if this would be something fairly easy to add support for under UICollectionView interactive movement? #2117
",ay8s,Adlai-Holler
2221,2016-09-12 17:58:21,"@ay8s Great idea! I've updated the diff to add support for collection view reordering as well.
",Adlai-Holler,ay8s
2221,2016-09-12 20:09:52,"Nice @Adlai-Holler. Going to give this a go and see if it fixes the issues I was seeing. Curious if you know if it'd be possible to relayout the items when reordering is initiated to shrink the cells a little to make ordering quicker for the user as some of our cells are quite large so may explore hiding nodes or truncating the ASCellNode to a set height? Might be out of the scope of AsyncDisplayKit.
",ay8s,Adlai-Holler
2221,2016-09-12 20:43:17,"@Adlai-Holler Curious if you're seeing an assertion failure when moving within the ASCollectionView? 

`Assertion failure in -[BFRUpdateNode dealloc], /Users/andrewyates/Apps/Buffer/buffer-ios/App/Pods/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:431`
",ay8s,Adlai-Holler
2221,2016-09-12 21:01:13,"@ay8s Thanks for testing this out! 
- Resizing all the cells should be possible by changing your cell nodes' layouts, and/or changing the return value for `constrainedSizeForNodeAtIndexPath:` if you implement it, and then calling `relayoutAllItems` on the collection view. If you're using flow layout, or if your custom layout knows about the change, all the items should be resized.
- Could you provide more detail about the assertion failure? Is it `Node should be marked invisible before deallocation?` Would you be willing to provide sample code to demo the issue?
",Adlai-Holler,ay8s
2221,2016-09-12 23:08:40,"@Adlai-Holler Probably could have done a better job at an example here but if you move the items around a few times you should run into that assertion failure. I'm working on implementing it still using a custom flow layout to move the cells as you scroll.

Example: https://cl.ly/2w1Y1b3i3f1c
",ay8s,Adlai-Holler
2221,2016-09-14 05:41:06,"@ay8s OK great, your sample app helped me iron out some remaining issues with interactive movement. Thank you!

I never reproduced the assertion failure you mentioned. Now, with the latest code, the interactive movements and reloadDatas seem to be running very well.
",Adlai-Holler,ay8s
2221,2016-09-14 06:18:42,"@Adlai-Holler Glad I could help with something. Will give it a whirl tomorrow and see how it fairs in the Buffer iOS app. Will try and put together something if I come across any oddness.

Edit: @Adlai-Holler curious if you have a demo for this at all? I tried hooking it up and while it doesn't trigger any crashes now it doesn't seem to handle cells of different heights too well which could totally be down to requiring a relayout. The cells seem to overlap and sometimes vanish during/after a reorder.
",ay8s,Adlai-Holler
2221,2016-09-15 05:25:40,"@ay8s Hi! I continued building collection view reordering support, but unfortunately it's going to take more development and testing than I think belongs in this diff. So I reduced this diff back to just table view reordering and I'll land it.

I left the AHCollectionReordering branch up so we don't lose the knowledge gained. Here's an info dump about what will be required for collection view interactive reordering:
- Collection view doesn't call data source `collectionView:moveItemAtIndexPath:toIndexPath` until `-endInteractiveMovement`.
- In `updateInteractiveMovementPosition` collection view calls `-moveItemAtIndexPath:toIndexPath:` on itself if the pending target index path has changed.
- It's a special kind of move, where the data source counts are required _not_ to change (since the data source shouldn't know about it). So we'll have to fake the `numberOfItemsInSection:` return value during interactive moves, to pretend we _don't_ know about the pending move.
- At the same time, we DO need the data controller to move the node after each move update or else the range controller will make mistakes in assigning interface states to each node.
- We need to update the range controller after each such move. This is easily accomplished by adding `-setNeedsUpdate` after calling `[super moveItem:]` if this is an interactive move.
- Just before `endInteractiveMove` we need to put the node back where it was and reset our fake data source counts, so that when we get the _real_ `collectionView:moveItemAtIndexPath:toIndexPath:` call, we do the update like normal.
- We'll probably need to add two ivars: `sourceInteractiveMoveIndexPath` and `pendingInteractiveMoveIndexPath`. We can use these to fake our data source item counts after each interactive move update, and to move the dragged node around to follow the cell.
- All of the above would work assuming they don't edit the collection view during interactive movement. I'm not sure how well UICollectionView handles this case, even.

@ay8s Hopefully I or someone on the team can get collection view interactive reordering built soon. If you're interested in working on it, please ping me on the asyncdisplaykit slack channel! We can pick up the discussion at #2117 
",Adlai-Holler,ay8s
2221,2016-09-15 05:34:08,"@Adlai-Holler Sounds good. We actually ended up switching back to the table view as it seems to handle orientation changes and bounds changes a little smoother for our next release. I believe we'll still need the CollectionView reordering in the future however so I'll be sure to ping you if I get chance to take a look. Still early days with ASDK so keen to get to grips with more of it. 

Thanks for exploring it as far as you did! 👍 
",ay8s,Adlai-Holler
2219,2016-09-09 07:39:07,"Hi @hannahmbanana . Thanks for your replying. And I'm sure use the latest AsyncDisplayKit on master
I record a video show the problem. The problem is the flying block directly appear to the final position(one moment) then run the animation.
https://youtu.be/ceiJaMA3T8g 

Besides, preferredFrameSize is deprecated. Should I replace with node.size(ASLayoutableSize) ?
",smalllixin,hannahmbanana
2213,2016-09-08 17:52:54,"@GitGadd: I believe this was fixed on master. Would you be able to check for us?
",hannahmbanana,GitGadd
2213,2016-09-08 19:56:33,"@GitGadd: no worries! I will use your examples to add unit tests to prevent future regressions. 

FYI - there have been a few breaking API changes on master so far that are [listed here](http://asyncdisplaykit.org/docs/upgrading.html) 
",hannahmbanana,GitGadd
2212,2016-09-08 15:31:20,"The exception that got thrown here was so insanely hard to parse. Let's write a private version of remove/insert subnode. Have the public version assert that ASM is off and then call into the private version. 

I hate to throw exceptions at our users, but if the alternative is crashes with internal error messages, it's better.

A compromise would be modifying the common exception messages for this error. Maybe if the node has ASM on, add ""This may be caused by manually adding or removing subnodes with automaticallyManagesSubnodes=YES.""

Thoughts @maicki ? I think we should do option 1 but if it turns out that developers are doing this a whole whole lot we'll have to disable the exception. But the investment to make private subnode removal/insertions is likely to pay dividends as we continue developing this.
",Adlai-Holler,maicki
2212,2016-09-08 15:48:19,"@Adlai-Holler I'm already on implementing exceptions for adding / removing subnodes while asm is enabled on the supernode :) Stay tuned!
",maicki,Adlai-Holler
2212,2016-09-08 17:30:30,"Thanks for catching my mistake @maicki! 
",hannahmbanana,maicki
2210,2016-09-08 18:44:18,"@hannahmbanana thanks for putting this up. Getting this into 6.10 and 6.11 and master is ideal.
",levi,hannahmbanana
2207,2016-09-08 21:05:15,"@johnepinterest Thanks! Couple notes:
- Will _ASDisplayView have a synthesized atomic accessor for the ivar, even though the getter is declared in a category of the superclass UIView? Should we use that atomic accessor instead of direct ivar access?
- If we only use the variable once during a given scope, what's the benefit in assigning it to a local variable? E.g. `[_asyncdisplaykit_node setTintColor:tintColor]`
- Would you mind rebasing onto master? Should be a trivial change in the `description` method.
",Adlai-Holler,johnepinterest
2206,2016-09-07 15:51:26,"@maicki The case that we saw in Pinterest was actually range-managed node =/. A plain old ASDisplayNode node was inserted into the subtree of a collection cell, and a layout transition was manually initiated on that cell node before UIKit ran a layout pass that automeasured the node.

Would it make sense to instead go ahead and measure the node at layout transition start time if it hasn't been measured yet?

I'm going to play around with this diff in a little bit but I wanted to get you that info as soon as possible. 
",Adlai-Holler,maicki
2206,2016-09-07 18:44:44,"OK this is good to go. @maicki When you get time, rebase this please.
",Adlai-Holler,maicki
2206,2016-09-07 19:33:37,"@Adlai-Holler done
",maicki,Adlai-Holler
2205,2016-09-07 06:52:11,"@hannahmbanana 
The latest code on master (commit hash: 2bfeb6d) 
",smalllixin,hannahmbanana
2203,2016-09-14 07:37:58,"Hi @Adlai-Holler. 
1) I've used shouldRasterizeDescendants in ASCellNode. However when i received bug, i'm pretty sure i've tried to turn it off, and it did not change anything
2) Yes. I'm returning cellNode.view and storing them in array. However it does not matter, since i've completely commented viewForHeaderInSection and only returned height in heightForHeaderInSection. The screenshot is made in that state, as you can see headers are empty, there is nothing at all.
3) Custom subclass of ASCellNode for row.
",mikhailmulyar,Adlai-Holler
2203,2016-11-18 21:24:45,"Hi @Adlai-Holler. At the moment this issue is not happens with exactly same style. But i have not tested it with exactly same nodes and headers count. I have now a bit different count of elements in sections.
However it still happens in another case. So i have pretty same screen with same height of elements, but with different amount of elements in section. I have 14 elements in total, and 2 last of them out of screen(not visible). Element 13 is like 15-20 pixels away from edge of the screen. When i enter text in search bar, it displays found elements and currently simply does reloadData() when data source updated. So here are the steps to reproduce after table initially loaded
1) Input anything in search for table to reload.
2) Delete search text, so table will reload again and show all elements
3) Input text again, after table reloads again all nodes deallocs and assertion happens for node 13.

If before step 3) ill scroll down to make element visible and then scroll back up, and search, assertion does not happen. Node correctly marked was invisible.
So it seems at reload some of close to edge, but not visible nodes somehow marked as visible, but do not marked back as invisible after that
",mikhailmulyar,Adlai-Holler
2203,2016-12-12 18:25:06,@Adlai-Holler can you investigate to see if this needs further work? Punt out of 2.0.1 if necessary.,garrettmoon,Adlai-Holler
2203,2016-12-19 22:40:13,@ryanfitz @mikhailmulyar Could you guys give `master` a try post-2805? The issue should reliably be resolved!,Adlai-Holler,ryanfitz
2203,2016-12-20 12:56:46,"@Adlai-Holler I tried latest master and have had mixed results. On iPhone its worked perfect and I have not been able to recreate this issue. However, on iPad it crashes immediately on first attempt at reloading data.",ryanfitz,Adlai-Holler
2202,2016-09-06 21:55:27,"Nice, this is much simpler! Thanks @rcancro 
",Adlai-Holler,rcancro
2200,2016-09-06 17:44:56,"@maicki: should I change this assertion to say ""-layoutSpecThatFits: should never return an empty value. One way this is caused is by calling -[super layoutSpecThatFits:] which is not currently supported.""
",hannahmbanana,maicki
2200,2016-09-06 17:59:18,"@hannahmbanana Sounds good. Having better error message is always great!
",maicki,hannahmbanana
2199,2016-09-06 15:42:35,"0.67?! Holy hell! Awesome. I wonder how perf is affected if the attributed string alone is the key. On phone right now but either way I'm pumped about this @maicki
",Adlai-Holler,maicki
2197,2016-09-06 03:30:43,"@Adlai-Holler The numbers here are impressive.  I have certainly seen the benefit of Copy first-hand, although I am interested in details of how you measured.  Does your measurement exclude the image decoding itself somehow?  Decoding is certainly more costly than the blend operation, so unless this were excluded (maybe by unintentional decoding at an earlier stage or something else), I'm not sure we could see such a large gain.

The other question is the scenario of scrolling to test this.  To remove extra variables you should force-disable rendering progressive images because this could add a lot of extra drawing time in a sporadic way.
",appleguy,Adlai-Holler
2197,2016-09-06 03:53:01,"@Adlai-Holler yay, thank you!  We'll need to take some more accurate measurements — I'm pretty confident the gain is closer to ~10% than ~50% — but it can be guaranteed that there is a meaningful gain here and we should take this patch.

Looking into the image alpha is definitely important because a real alpha channel would increase memory consumption.  I believe the Apple frameworks default to doing this, so we probably need to set up the logic to explicitly specify opaque for JPEG images.

Once you have updated times, please edit your comment for future reference (feel free to include some screenshots of the ripc_RenderImage call or whatever else is applicable).
",appleguy,Adlai-Holler
2197,2016-09-06 04:27:29,"@appleguy Already struck through the comment 🙂 I was wrong about PINRemoteImage – the images have alpha value 5 which is kCGImageAlphaNoneSkipLast which is the same as None so we're good. Filed the follow-up diff to get in on that.
",Adlai-Holler,appleguy
2191,2016-09-12 12:40:58,"Hey @hannahmbanana,

Thank you for your answer. I am attaching a sample project. For now I am just trying to focus on everything to look nice. I did saw the ASDKgram sample project, but I wanted to try to work my way into learning this technology without copying example code, alas, here's the result.
[ASDK-Q.zip](https://github.com/facebook/AsyncDisplayKit/files/467283/ASDK-Q.zip)

I appreciate the help!
",jonybur,hannahmbanana
2188,2016-09-05 04:33:04,"@Adlai-Holler Cherry Picked this PR on top of the #2166 . You can check it out here: https://github.com/maicki/AsyncDisplayKit/tree/MSASTextNodeRendererCachingPerfTest

Results:


",maicki,Adlai-Holler
2188,2016-09-05 19:30:24,"Awesome results @maicki !
",Adlai-Holler,maicki
2182,2016-09-09 03:45:47,"@Adlai-Holler What's the status on this one? Should we rebase and merge?
",maicki,Adlai-Holler
2182,2016-09-09 03:59:23,"It's not ready to merge – it's causing problems but I haven't investigated yet

Sent from my iPhone

> On Sep 8, 2016, at 8:46 PM, Michael Schneider notifications@github.com wrote:
> 
> @Adlai-Holler What's the status on this one?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",Adlai-Holler,Adlai-Holler
2179,2016-09-01 17:55:15,"Thanks @maicki, you are the best!
",hebertialmeida,maicki
2178,2016-09-05 20:47:36,"@nguyenhuy This is looking perfect! This will be a huge boon for Pinterest, where synchronizing section info has been a major pain point.

Looking toward the future, I think creating an object for each section even if they don't provide us with a context is valuable. I have some pretty ambitious plans for collection view debugging tools, and reifying the section abstraction (with an auto-incrementing ID) will help move us toward that.

These section objects do not need to hold any nodes or anything – I agree with you that those other two approaches got too messy too fast. Just an ID and optionally a context. Thoughts?
",Adlai-Holler,nguyenhuy
2178,2016-09-12 18:04:58,"@nguyenhuy How's this going? Let me know if there's something that seems wonky or not quite right – once landed this will resolve an entire class of possible inconsistency issues in one shot, so I'm really excited to get it dialed in. 
",Adlai-Holler,nguyenhuy
2178,2016-09-15 17:09:17,"@Adlai-Holler: Sorry this took so long. I've added ASSection and addressed your comments. Please give this PR another review. Thank you!
",nguyenhuy,Adlai-Holler
2178,2016-09-27 06:17:56,"@Adlai-Holler — is it OK if we merge this before @nguyenhuy 's final changes?  He's getting ready for the big move and so any polishing touches here would be better to do after integrating it, but only if they don't have important functional impacts.
",appleguy,nguyenhuy
2178,2016-09-27 06:17:56,"@Adlai-Holler — is it OK if we merge this before @nguyenhuy 's final changes?  He's getting ready for the big move and so any polishing touches here would be better to do after integrating it, but only if they don't have important functional impacts.
",appleguy,Adlai-Holler
2178,2016-09-27 16:17:13,"@Adlai-Holler @appleguy: Addressed comments and added test cases.
",nguyenhuy,appleguy
2178,2016-09-27 16:17:13,"@Adlai-Holler @appleguy: Addressed comments and added test cases.
",nguyenhuy,Adlai-Holler
2178,2016-09-27 23:13:48,"@nguyenhuy Wow excellent! I really appreciate the quality of your work. If you'll rebase or merge latest master, the CI should be fixed and this should be ready for primetime. 

I'm confident this will work well, but for the sake of due diligence we'll test this against Pinterest via a cherry-pick and then land it immediately after.
",Adlai-Holler,nguyenhuy
2178,2016-09-28 00:19:40,"@Adlai-Holler: Squashed all commits into one and rebased it on top of latest master. Waiting for Travis to finish which seems to take forever :(

Appreciate your test against Pinterest. Let me know what you find!

Edit: Apparently Travis failed because of a misconfiguration in xcodeproj (i.e ASSectionContext.h should be a public header). Fixed it and we're good to go :)
",nguyenhuy,Adlai-Holler
2178,2016-10-01 18:44:36,"@Adlai-Holler: I'm really glad it works. More than happy to do this again, anytime!
",nguyenhuy,Adlai-Holler
2175,2016-09-06 06:05:48,"@jaichaudhry: thanks for including the backtrace!

@Adlai-Holler: any recent changes that might have caused this? If you have a few minutes this week to educate me, we should document best practices for updating tables / collections.
",hannahmbanana,jaichaudhry
2175,2016-09-06 07:07:26,"@hannahmbanana 
To make this more clear I get one more thing on terminal which as follows:
**\* Assertion failure in -[ASNetworkImageNode _displaysAsynchronously], /Users/jc/Roposo/redApple/Pods/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:928

But this was working perfectly in previous version.
",jaichaudhry,hannahmbanana
2175,2016-09-06 18:04:19,"@jaichaudhry: could you run this on the latest master and see if it's still an issue? If not, could we see more code? This backtrace, unfortunately, didn't provide much info.
",hannahmbanana,jaichaudhry
2175,2016-09-07 09:17:51,"@hannahmbanana Tried it on master. Still no luck.
Attaching the crash report. If that can be of help.
[crash.txt](https://github.com/facebook/AsyncDisplayKit/files/458736/crash.txt)

Also the only thing happening in code is as follows:
`NSUInteger newTotalNumberOfBlocks = tableBlocks.count;
        NSUInteger row;
        for (row = oldBlocksCount; row < newTotalNumberOfBlocks; row++) {
            NSIndexPath *path = [NSIndexPath indexPathForRow:row inSection:section];
            [indexPaths addObject:path];
        }


",jaichaudhry,hannahmbanana
2175,2016-09-12 16:49:00,"@hannahmbanana @Adlai-Holler any updates on this ?
",jaichaudhry,hannahmbanana
2175,2016-11-15 04:39:48,"@jaichaudhry - sorry for the delay in response, we've been busy getting the [2.0 release](http://asyncdisplaykit.org/docs/adoption-guide-2-0-beta1.html) ready. Are you still having issues with this? I'd recommend updating to the 2.0 API in which all table delegate / data source methods are called on the tableNode rather than the tableView. 
",hannahmbanana,jaichaudhry
2175,2016-11-17 07:55:16,"@hannahmbanana I was still facing this issue with the previous updates. I will revert back once I shift to 2.0. Will do it next week.
",jaichaudhry,hannahmbanana
2175,2016-11-24 11:18:07,@hannahmbanana @Adlai-Holler this has been fixed in 2.0. Thanks a lot :),jaichaudhry,hannahmbanana
2175,2016-12-01 01:49:56,"@jaichaudhry - I'm going to close this issue since it looks like it's been resolved. Could you create a new issue for the newproblem you are having? Thanks!

Master (2.0 Beta 3) is very safe, we very close to cutting the official 2.0 release. ",hannahmbanana,jaichaudhry
2167,2016-08-30 17:19:33,"@maicki that sounds good to me. This PR would at least be an upgrade because the inline functions are currently global and accessible, but you will get a linker error if you try to use it.
",samhsiung,maicki
2167,2016-08-30 17:27:22,"We have a ship task to add the readonly node properties. This header is currently public. If we want to hide these, we should mark the file private – I agree with @samhsiung that these should be static inlines and they're useful for the time being.

@samhsiung could you declare them ASDISPLAYNODE_INLINE?
",Adlai-Holler,samhsiung
2167,2016-08-30 17:49:26,"Cool thanks @samhsiung !
",Adlai-Holler,samhsiung
2166,2016-09-05 19:37:44,"@maicki Love the performance, love not having the node own the renderer, but there's a whole lot of (C++) code added in this diff. I think we can achieve a similar result with NSCache, with just the attributed string as the key.

NSCache is LRU (libcache) and I doubt that rendering the same attributed string with different constrained sizes is common enough to justify all this effort. Plus, since the constrained size actually changes when text node is measured (which I still think is dumb!) there may be a lot of cache misses that could have been hits.

Thoughts?
",Adlai-Holler,maicki
2166,2016-09-06 11:42:06,"@Adlai-Holler Changed the cache to NSCache in this PR: #2166 . I don't like that we have to create a key object on the heap to be honest. The C++ implementation let us create the key on the stack. 

Furthermore we have to have to consider the constrained size in the cache key, the attributed string is not enough.
",maicki,Adlai-Holler
2165,2016-08-29 23:17:33,"@Adlai-Holler done
",maicki,Adlai-Holler
2161,2016-08-28 23:18:13,"Overall looks good.

@Adlai-Holler Do you know about `dispatch_benchmark`?

`curl ""http://opensource.apple.com/source/libdispatch/libdispatch-84.5/man/dispatch_benchmark.3?txt"" | /usr/bin/groffer --tty -T utf8`
",maicki,Adlai-Holler
2161,2016-08-28 23:29:39,"Yes but I can't use it here because it just isn't flexible enough for e.g. controlling which sections are benchmarked, controlling thread count, and eventually returning values. Better to roll our own I believe.

Sent from my iPhone

> On Aug 28, 2016, at 4:18 PM, Michael Schneider notifications@github.com wrote:
> 
> @Adlai-Holler Do you know dispatch_benchmark?
> 
> curl ""http://opensource.apple.com/source/libdispatch/libdispatch-84.5/man/dispatch_benchmark.3?txt"" | /usr/bin/groffer --tty -T utf8
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",Adlai-Holler,Adlai-Holler
2161,2016-08-28 23:42:24,"👍

> On Aug 28, 2016, at 4:29 PM, Adlai Holler notifications@github.com wrote:
> 
> Yes but I can't use it here because it just isn't flexible enough for e.g. controlling which sections are benchmarked, controlling thread count, and eventually returning values. Better to roll our own I believe.
> 
> Sent from my iPhone
> 
> > On Aug 28, 2016, at 4:18 PM, Michael Schneider notifications@github.com wrote:
> > 
> > @Adlai-Holler Do you know dispatch_benchmark?
> > 
> > curl ""http://opensource.apple.com/source/libdispatch/libdispatch-84.5/man/dispatch_benchmark.3?txt"" | /usr/bin/groffer --tty -T utf8
> > 
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly, view it on GitHub, or mute the thread.
> > 
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly, view it on GitHub, or mute the thread.
",maicki,Adlai-Holler
2160,2016-09-06 08:49:44,"Thank you @hannahmbanana, in the meantime i changed the app by using ASCollectionView, but i always get the same error. I attach 2 files, the ASCollectionView and the ASCellNode file that contains the videos; i need to have a CollectionView with 2 columns that, when visible, play together small videos taken by a url; if i use .shouldAutoPlay=true i get the Code=-11800 ""The operation could not be completed"" error. Thanks in advance for your help
[Archive.zip](https://github.com/facebook/AsyncDisplayKit/files/456301/Archive.zip)
",cdiscla,hannahmbanana
2157,2016-08-27 23:37:34,"@maicki This is a great start! Yes!

Let's add this as a new header file, and standardize on those macros for geometry assertions: https://gist.github.com/Adlai-Holler/70f84195ca8d53b93c420e45dac0f498 That way we get good failure messages while debugging.

Also I'm not quite clear on what we're testing here. `testNodeLayoutDoesNotChangeIfNotMeasured`?
",Adlai-Holler,maicki
2157,2016-08-28 00:29:17,"@Adlai-Holler Addressed comments. In case it looks good, can you merge it? I would like to put a PR on top and the test(s) should be more clear in there.
",maicki,Adlai-Holler
2155,2016-08-27 22:36:44,"@garrettmoon I like this change, but we should add ASDisplayNodeAssertMainThread to `pendingStateFromView` and `pendingStateFromLayer`. I think `ASDisplayNodeGetPendingState` is called on arbitrary threads =/
",Adlai-Holler,garrettmoon
2155,2016-08-28 18:45:46,"@garrettmoon On second thought, this may be doable – we don't need to use pendingStateFromView/Layer except when the view is being unloaded. ASPendingState only tracks fields that have been changed, so it's OK to put back [[ASPendingState alloc] init] here. 
",Adlai-Holler,garrettmoon
2153,2016-08-27 23:54:38,"@maicki Hmm it's not a silver bullet. It seems to help us in the high-subview-count tests but not as much as we'd hope. Here are the results, no optimization on my iPad Air 2 iOS 10:


",Adlai-Holler,maicki
2153,2016-08-29 20:40:03,"@Adlai-Holler Let's close that PR
",maicki,Adlai-Holler
2144,2016-09-07 03:22:56,"@hannahmbanana Aye, I am sure about that. Maybe because I use ASDK as static Library, and  Apple has different audit strength for different apps.

I changed that APIs with adding prefix ""as_"" & resubmit my app, Apple just approved that recently.

Anyway, it's best for us to avoid using APIs that looks like some sensitive APIs from Apple.
",IvanChan,hannahmbanana
2144,2016-09-07 03:40:35,"@Adlai-Holler @maicki: should we consider renaming these for 2.0?
",hannahmbanana,Adlai-Holler
2144,2016-09-07 03:45:08,"Yeah. It’ll be a bit of a hassle because PINRemoteImage actually sets those names in class PINAnimatedImage and we mirror them in protocol ASAnimatedImage.

It’ll be wacky but we’ll need to use other names. Unfortunately deprecating the current ones probably won’t be enough – we’ll have to remove them. 

ship://Problems/210

> On Sep 6, 2016, at 8:40 PM, Hannah Troisi notifications@github.com wrote:
> 
> @Adlai-Holler https://github.com/Adlai-Holler @maicki https://github.com/maicki: should we consider renaming these for 2.0?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/2144#issuecomment-245166279, or mute the thread https://github.com/notifications/unsubscribe-auth/ACWkTU34--OIHGv7eT8anrPMtxvaLUEGks5qnjJJgaJpZM4JtqjY.
",Adlai-Holler,Adlai-Holler
2144,2016-09-18 02:18:53,"@GitGadd The admin account will receive a mail about the rejection, you can check the mail if possible.
",IvanChan,GitGadd
2144,2016-11-08 16:16:27,"Based on the update for the blogpost on PSPDFKit and feedback from @IvanChan it seems like Apple did some adjustments and will not reject apps so easily. I will close this issue for now, but I agree with @gazreese we should monitor that for a while and in case it reappears reopen this issue.

Thanks to all for helping out!
",maicki,gazreese
2140,2016-10-08 22:40:43,"I have the same problem, It seems the line truncates too late, When using `NSLineBreakByTruncatingTail` and truncates too early when using `NSLineBreakByWordWrapping`.

Also when `NSLineBreakByTruncatingTail`  breaks the line too late, it displays default truncate message instead of `truncationAttributedText` or `additionalTruncationMessage`.

Do you have any solution @Yue-Wang-Google ?
",abbasmousavi,Yue-Wang-Google
2136,2016-08-25 03:30:33,"@Adlai-Holler:

/Users/engineering/jenkins_root/workspace/AsyncDisplayKit-PRs/AsyncDisplayKit/TextKit/ASTextKitRenderer.mm:138:5: use of undeclared identifier 'ASPerformBlockOnDeallocationQueue'
",hannahmbanana,Adlai-Holler
2128,2016-09-08 23:01:38,"@Adlai-Holler: Sorry I missed this the first time. It looks like I should add this to the documentation. Could you give me an example snippet of it being used?
",hannahmbanana,Adlai-Holler
2125,2016-08-24 09:06:03,"@Adlai-Holler Looks like it's still failing due to the Sample App not having a `Sample` scheme?
",GotEmB,Adlai-Holler
2123,2016-08-24 05:39:09,"@keleftheriou @garrettmoon  this should have failed the Jenkins build. See the failing test shown in the Travis build. That test case was merged in #2107 and contained an error that was masked by other issues with Travis at the time. Other open PRs show Jenkins passing but Travis correctly failing. The test should pass in #2127 
",Adlai-Holler,garrettmoon
2122,2016-09-08 16:17:12,"@rcancro feel free to reopen this if needed.
",Adlai-Holler,rcancro
2120,2016-09-12 18:44:46,"@gazreese Thanks for this improvement, and sorry for the long turnaround time on a review. One comment and we'll take it to the hoop!
",Adlai-Holler,gazreese
2120,2016-09-14 03:44:23,"Excellent! Thank you @gazreese for making this happen.
",Adlai-Holler,gazreese
2119,2016-09-12 21:18:24,"@gazreese I share your concerns about performance and architecture here. We have the alternative of doing `_playerNode.hidden=YES` and unhiding it in `play`.

That may save us some time during the state transitions, but it does have the drawback of accumulating AVPlayerLayer instances if the user scrolls through a feed of videos, watching each one and letting it reset. The developer may not be aware that the AVPlayerLayers are sticking around. 

I believe that AVPlayer itself, not the player layer, manages the resources for the video so it would be unlikely to cause more network traffic either way we go.

I advocate for showing/hiding the player layer rather than removing/recreating it but I'd like @appleguy @maxsz or @binl to weigh in as they have more expertise around AVFoundation.
",Adlai-Holler,gazreese
2119,2016-09-28 12:42:07,"Hi @Adlai-Holler, apologies for the delay getting back to you on this. I've been on holiday and just got back.

As my project is exactly as you describe, i.e. a feed of videos that the user scrolls through, I'm quite keen on the original remove/recreate method. I'm working in a memory-constrained environment, so I can't really risk leaking the AVPlayerLayer objects.

@appleguy @maxsz or @binl - if you have any comments they would be much appreciated.
",gazreese,Adlai-Holler
2118,2016-08-23 03:41:57,"@Adlai-Holler this looks good to me, I read through and believe I understand the issue.  Thanks for the investigation!
",appleguy,Adlai-Holler
2117,2016-09-15 05:30:46,"@ay8s I'd love to get this up and running. We've got a ton of work for ASDK 2 that we're aiming to make ready for release, but here's the info I gathered on a deep-dive into getting collection view reordering working with ASDK (work is on the AHCollectionReordering branch):
- In `updateInteractiveMovementPosition` collection view calls `-moveItemAtIndexPath:toIndexPath:` on itself if the pending target index path has changed.
- It's a special kind of move, where the data source counts are required _not_ to change (since the data source shouldn't know about it). So we'll have to fake the `numberOfItemsInSection:` return value during interactive moves, to pretend we _don't_ know about the pending move.
- At the same time, we DO need the data controller to move the node after each move update or else the range controller will make mistakes in assigning interface states to each node.
- We need to update the range controller after each such move. This is easily accomplished by adding `-setNeedsUpdate` after calling `[super moveItem:]` if this is an interactive move.
- Just before `endInteractiveMove` we need to put the node back where it was and reset our fake data source counts, so that when we get the _real_ `collectionView:moveItemAtIndexPath:toIndexPath:` call, we do the update like normal.
- We'll probably need to add two ivars: `sourceInteractiveMoveIndexPath` and `pendingInteractiveMoveIndexPath`. We can use these to fake our data source item counts after each interactive move update, and to move the dragged node around to follow the cell.
- All of the above would work assuming they don't edit the collection view during interactive movement. I'm not sure how well UICollectionView handles this case, even.
",Adlai-Holler,ay8s
2117,2017-01-13 07:14:18,@ay8s We are trying out an implementation for your suggested interaction. Would love to gather your feedbacks if you are still on this. PR https://github.com/facebook/AsyncDisplayKit/pull/2868,harryworld,ay8s
2114,2016-08-28 15:23:10,"@Adlai-Holler Thanks for the reply. Actually by just creating 10000 ASCellNode (using nodeBlock) it will used up ~1GB memories. Adding up to 100_000 will even crash the app.

here is a very simple project regenerating the issue.
https://github.com/roytang121/ASDK-issue
",roytang121,Adlai-Holler
2114,2016-09-01 08:01:03,"@Adlai-Holler Thanks ! Should it be marked as a feature ? I think it's quite common for a listview containing large amount of cells 
",roytang121,Adlai-Holler
2113,2016-08-20 06:43:08,"@Adlai-Holler  done. Thanks
",Yue-Wang-Google,Adlai-Holler
2113,2016-08-20 14:00:20,"@Adlai-Holler Blocks should be copy as properties, see also the documentation @Yue-Wang-Google linked too ...

@Yue-Wang-Google I think we should add nonatomic - cc @Adlai-Holler thoughts?
",maicki,Yue-Wang-Google
2113,2016-08-20 14:00:20,"@Adlai-Holler Blocks should be copy as properties, see also the documentation @Yue-Wang-Google linked too ...

@Yue-Wang-Google I think we should add nonatomic - cc @Adlai-Holler thoughts?
",maicki,Adlai-Holler
2110,2016-08-27 00:10:15,"@garrettmoon Yes we could get remove `layoutSpecThatFits:` and introduce something that would allow to return an `id<ASLayoutable>`, but as this change is already pretty big I don't want to add that too.

@levi @appleguy @Adlai-Holler @garrettmoon @nguyenhuy  I would appreciate if you guys could take a look over it. It's now ready for another round of reviews. Furthermore I added a link to the documentation that is currently in progress.
",maicki,garrettmoon
2110,2016-09-02 13:11:49,"@maicki I'm a huge fan of this direction and strongly believe this is the solution to a lot of the confusion of working with simple layout primitives in AsyncDisplayKit. If you're wondering why I haven't left many comments, it's because I'm a huge fan of its overall functionality and approve its implementation on an architectural level. I'll give it another run through on a more granular scale and see if I can provide independent comments.

The box model is a great guide in helping us carve out an opinion on constructing layout. I can see us easily adopting more elements of the model and introduce them at the ASLayoutable level. A background property, for instance, would be a really interesting evolution to hide background specs. Adding a padding property could do the same for insets.

Moreover, there's a huge potential of us allowing developer to extend ASDimension and provide their own unit types that are computed at run time. Imagine Pinterest being able to define a `columnSpan` unit that is away of the grid system it's currently within and computes the correct values without the need of extra layout specs. If we added inset support, boints would also be a great candidate for a custom unit type, aware of its context and computed in the measure pass.

After reading through this and your documentation, one clear need comes to mind. **It's time to rename ASLayoutable**. For such a core foundational component of the layout system, we should acknowledge it with the credit it deserves and give it a descriptive name that is clear about its function. I suggested `ASLayoutProducer` in the past, but there are definitely others given this new distinction of “replaced” layoutables.

The documentation you provided to accompany the changes is invaluable. Reading that first helped me to understand the goals and principles of the new changes and I can honestly say I understood it very well. Per my previous comment, I'd love to give you more feedback on that directly. Put it up in a separate PR and we can do a round of changes to be published on the site. I'll provide a little bit of feedback here for now.

For now, we should not compare directly to the CSS box model, as the current implementation only realistically supports the concept of a ""content area"". It will confuse developers if we provide them with an incorrect mental model and have to do the work of correcting it while they're learning. The first section of the documentation spends a significant amount of time clarifying the definition of what parts of the box model the layout system does not support. It's better to save our breath and describe the layout system from first-principles, not so much by analogy.

When we're introducing the layout behavior, we can very much say that it's inspired by the box model, but never directly compare ourselves to it. My concern is that we give developers the wrong impression of the layout engine behaving one-to-one with box model and supporting concepts like page flow, dynamic sizing and might assume about containing block behavior.

I love that you have provided distinction for replaced layoutables. Let’s come up with a simple name that defines their behavior. Thinking more abstractly about this actually might help in coming up with a new name for layoutables in general. 
",levi,maicki
2110,2016-09-05 03:20:58,"@levi I think for the time being let's comment on the gist for the documentation: [ASDK 2.0 Layout](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)

Currently the docs are living on a separate branch, but we would like to move it over to a separate repo so it's influx currently and there is no good way to create a longer lasting PR.
",maicki,levi
2110,2016-09-05 04:48:40,"@maicki you can open a PR against a separate branch. I'd prefer giving feedback over online comments, as it will be too difficult to give feedback on a gist.
",levi,maicki
2110,2016-09-05 08:37:19,"@levi I opened a PR for adding the ASDK 2 Layout Documentation: #2195 
",maicki,levi
2110,2016-09-06 00:11:43,"Excellent! This is a tremendous step forward. Two small nitpicks from me and then we'll take it to the hoop.

I agree with @levi that `ASLayoutContainer` is a good replacement name for `ASLayoutable` to the extent that it means ""can generate a layout."" We discussed also replacing `ASStackLayoutable` protocol with `ASStackLayoutSpecChild` to be more explicit. But we can consider that more later – this diff is plenty.
",Adlai-Holler,levi
2110,2016-09-06 15:54:33,"@levi @Adlai-Holler @rahul-malik Thanks guys for your reviews! Tried to address all comments or filed additional work in Ship that I think are too much for this PR:
- Introduce `layoutableThatFits:` and maybe deprecate `layoutSpecThatFits:`
- Rename `ASLayoutable` to `ASLayoutContainer` (and size name changes)
- ASDK 2.0 Layout Documentation is tracked at: #2195
",maicki,levi
2110,2016-09-06 15:54:33,"@levi @Adlai-Holler @rahul-malik Thanks guys for your reviews! Tried to address all comments or filed additional work in Ship that I think are too much for this PR:
- Introduce `layoutableThatFits:` and maybe deprecate `layoutSpecThatFits:`
- Rename `ASLayoutable` to `ASLayoutContainer` (and size name changes)
- ASDK 2.0 Layout Documentation is tracked at: #2195
",maicki,rahul-malik
2110,2016-09-06 15:54:33,"@levi @Adlai-Holler @rahul-malik Thanks guys for your reviews! Tried to address all comments or filed additional work in Ship that I think are too much for this PR:
- Introduce `layoutableThatFits:` and maybe deprecate `layoutSpecThatFits:`
- Rename `ASLayoutable` to `ASLayoutContainer` (and size name changes)
- ASDK 2.0 Layout Documentation is tracked at: #2195
",maicki,Adlai-Holler
2110,2016-09-06 23:28:56,"@maicki Awesome. I think it's time to take this to the hoop – when you get time, rebase this and go ahead and merge it. We will consider further changes using this as a basis.
",Adlai-Holler,maicki
2110,2016-09-07 09:04:21,"@Adlai-Holler @levi Rebased ready to merge.
",maicki,levi
2110,2016-09-07 09:04:21,"@Adlai-Holler @levi Rebased ready to merge.
",maicki,Adlai-Holler
2105,2016-10-11 03:32:23,"@yxztj great info, thanks!  The results above — were they tested with master, or 1.9.90?  Master does have some changes in this area.

The initial height calculation — is the value for the hight coming from TextKit?  I'm thinking it should return the necessary height to draw...if it is not, then this is a TextKit bug.  It is something we may should be able to work around, but this is a bit tricky, because the line spacing property could change in different ranges in the attributed string...and Apple may fix the sizing bug in a future iOS version.

If it's not a TextKit bug and is only an ASDK bug, that's certainly great news!

Relatedly, we currently have an ASTextKitRenderer caching mechanism in-place, but disabled.  It's intended that the second pass here not be necessary, and that would seemingly fix the issue too.  However we should make sure the result is consistently the same even if caching were to fix it, since a cache shouldn't be required for correctness.

Thanks again, looking forward to fixing this.  We made some key breakthroughs adopting the new layout API version in Pinterest today, and will be intensely focused on it this week, but the test case and debugging you provided will make it much more practical for me to try and fix it this weekend
",appleguy,yxztj
2105,2016-10-11 07:15:41,"@appleguy Thanks for the reply. Now I found some more information. All test is based on latest master branch.
1. In ASTextNode calculateSizeThatFits, textRenderer is required to calculate its size. At this time constrainedSize height is infinite. 
2. After size is calculated(using [layoutManager usedRectForTextContainer]), in ASTextNode calculatedLayoutDidChange, it sets the result as new constrainedSize for renderer. Since the size is changed, textRenderer discard its context and reset all variables.
3. In ASTextNode drawRect, the renderer needs to re-calculate its size based on new constrainedSize, which is only enough for a total of 3 lines(2 lineSpacing count, so I cannot say it is a wrong size), but not good for clipping 10 lines to 3 with lineSpacing > 0, as the 3rd lineSpacing is also needed for TextKit to render the 3rd line(not documented, maybe it's an Apple bug, maybe it's by design).

For ASDK, setting constrainedSize on the renderer leads to discarding its current context(with correct truncation result), triggering another size calculation during drawRect. Due to short in height, truncation result is different than first pass.

Is it necessary to reset textRender's context on calculatedLayoutDidChange? Anyway its expensive for the text size to be calculate twice(in both layout and drawRect, even if with no truncation), as we already have the correct size for truncated text. 
If there needs to be 2 passes of size calculation, then we might need to figure out how to give enough space for TextKit to calculate the correct character range in truncation in 2nd pass.
",yxztj,appleguy
2105,2016-10-19 07:20:15,"Yeah as we expected Apple is not replying on radar. Maybe we can find a workaround? @appleguy 
",yxztj,appleguy
2105,2016-10-21 00:38:22,"@yxztj thanks again for your patience - we're getting closer to being able to investigate this.  Curious if you've tried with the new optimized sizing + display codepaths.  One PR still hasn't been merged (see the one from Adlai about drawing fast path), but the sizing fast path may actually fix this in cases that don't use a custom .truncationAttributedString (which is the common case).
",appleguy,yxztj
2105,2016-10-24 12:56:35,"@appleguy I just tested with latest master(commit: 4dca05767bf7f5d555746d8cb9e444de51bd458b) in the demo project, the issue is still there(no matter truncationAttributedString is set) :(
",yxztj,appleguy
2105,2016-10-31 18:28:11,"@Adlai-Holler - since you looked at ASTextNode recently, do the symptoms described here sound familiar in any sense?

@yxztj Thanks for your patience!  We are almost done adopting all of the 2.0 APIs in Pinterest, so we should be able to investigate this in the next couple weeks.
",appleguy,yxztj
2105,2016-11-08 17:56:05,"@Adlai-Holler @appleguy Just looked into that a bit with master. So apparently this works now reliable, unfortunately reliable wrong. Setting the `maximumNumberOfLines` to 3 (no matter truncationAttributedString is set) the text node will show only 2 lines of text but the text node is in fact the right size.

![screen shot 2016-11-08 at 9 55 48 am](https://cloud.githubusercontent.com/assets/25288/20110514/880d4468-a599-11e6-87fa-9fabaffb03c8.png)
",maicki,appleguy
2105,2016-11-13 23:41:49,"@yxztj quick update here.  The team is now focused on ASTextNode improvements.  @maicki did a variety of investigation here, and @Adlai-Holler has been working on some significant changes to address an issue discovered in the truncation algorithm.

It will be some difficult work, but we currently expect to have this issue fixed in the next couple weeks.  We are sprinting to try to have it addressed for the Dec 1st event.  Feel free to discuss with Adlai on Slack (note however he is currently working from Japan timezone)
",appleguy,yxztj
2105,2016-11-13 23:41:49,"@yxztj quick update here.  The team is now focused on ASTextNode improvements.  @maicki did a variety of investigation here, and @Adlai-Holler has been working on some significant changes to address an issue discovered in the truncation algorithm.

It will be some difficult work, but we currently expect to have this issue fixed in the next couple weeks.  We are sprinting to try to have it addressed for the Dec 1st event.  Feel free to discuss with Adlai on Slack (note however he is currently working from Japan timezone)
",appleguy,maicki
2105,2016-12-10 03:12:02,@appleguy Just tested with 2.0 release. The issue is still there..,yxztj,appleguy
2105,2016-12-10 05:56:50,"@maicki @Adlai-Holler Not sure if #2643 is related, but the PR didn't fix this issue. Tested with latest master branch.",yxztj,maicki
2105,2017-01-08 13:13:42,"@appleguy @hannahmbanana Happy new year! Sorry to ping you again but not being able to truncate text with line spacing has been bothering us for over half a year. I know it involves some major improvements in the whole async text rendering/layout process, and that's why we weren't trying to fix it ourselves.

Do you think we can get a workaround soon? Or maybe currently I could use ASDisplayView to wrap a UILabel instead?",yxztj,appleguy
2085,2016-12-20 07:18:06,cc @dmcrodrigues ,hannahmbanana,dmcrodrigues
2084,2016-08-17 13:47:38,"@hannahmbanana 👍 For adding more warnings. Added a couple of comments but overall looks good. 
",maicki,hannahmbanana
2082,2016-08-17 17:12:08,"@Yue-Wang-Google not sure I understand the question. Are you asking why it's not a subclass of NSProxy? I wrote it to do exactly what I needed (break a retain cycle created by CADisplayLink) and nothing more. Subclassing NSProxy seemed more complex. Is there an issue you're seeing?
",garrettmoon,Yue-Wang-Google
2082,2016-08-17 19:28:11,"@garrettmoon as you pointed out, NSProxy implements a lot less methods than NSObject.

I had an issue in one of my app with ASDelegateProxy. I had some code that was testing the class of a UIScrollView delegate with `isKindOf:` and that will crash on an NSProxy object (because NSProxy doesn't implement isKindOf).
I ended up using `isProxy` to avoid the crash.

Back to the original question, if ASDelegateProxy doesn't actually use the NSProxy APIs, do we have a substantial added benefit of having it an NSProxy instead of an NSObject ?

Note: I'm not very familiar with NSProxy, so there is potentially one (or several) very valid reason to use it.
",jmig,garrettmoon
2082,2016-08-17 20:09:29,"Thanks @garrettmoon 
",jmig,garrettmoon
2082,2016-08-17 21:01:54,"Thanks @garrettmoon  for your explanation! 
",Yue-Wang-Google,garrettmoon
2080,2016-08-17 06:58:40,"Thanks @Yue-Wang-Google for alerting us to this issue! It will soon be fixed on master. 
",hannahmbanana,Yue-Wang-Google
2073,2016-08-15 20:44:49,"Awesome catch @nlutsenko ! Would you be willing to add a snapshot test to ASTextNodeSnapshotTests.m to ensure we don't regress on this?
",Adlai-Holler,nlutsenko
2073,2016-08-15 21:26:09,"Ok, @Adlai-Holler, snapshot test case added.
It's slightly hacky, compared to a general one, since the highlight layer is actually getting rendered via a special layer, but it works and tests the proper thing.

Also, I noticed that the whole tests file is missing from the project, so added it as well.
Let me know how it looks...
",nlutsenko,Adlai-Holler
2073,2016-08-16 01:35:39,"@nlutsenko Yes that's what I'm fixing with the PR. Sorry about that ...
",maicki,nlutsenko
2073,2016-08-16 04:58:55,"Thanks @nlutsenko! ASTextNode bug fixes are always extra appreciated. :) Are you working with the Instant Articles team? 
",hannahmbanana,nlutsenko
2072,2016-08-15 14:25:10,"Hey @dmcrodrigues thanks for fixing that! LGTM
",maicki,dmcrodrigues
2069,2016-08-16 17:22:50,"@hannahmbanana Let's make sure this gets into our 1.x compat releases so nobody is left out.
",Adlai-Holler,hannahmbanana
2068,2016-08-17 03:22:07,"@hannahmbanana I just wanted to suggest 2 more features, if you could include them with your upcoming release than that would be great 👍 
1. UIProgressNode: an AsyncDisplayKit wrapper around UIProgressView
2. UIRemoteImageNode: Ability to fade-in the image once it has been downloaded

I think UIProgressNode can be done easily by using the way UIScrollNode is implemented (as a simple wrapper around UIScrollView), but it would be helpful to have it included in the library.

Thanks
",stapleup,hannahmbanana
2067,2016-08-14 03:23:06,"@Adlai-Holler very awesome!  Here's a link to the pretty Overview.md:

https://github.com/facebook/AsyncDisplayKit/blob/2ddbb0cc2ea2f4e96ce2af458aa865a861aed573/plans/section-infos-api/Overview.md

Section Info sounds like a pretty good name.  SectionLayoutInfo might make it more clear?

This type of extension object is guaranteed to not be required for regular cell / items in the data source, right, because an ASCellNode class could have properties for them?  Or should we consider something like that now, if it will be needed to be able to specify IDs or something else to enable diffing or virtualization features?
",appleguy,Adlai-Holler
2067,2016-08-14 03:39:43,"@appleguy Yeah I think we can indefinitely avoid this kind of object for items because nodes (or perhaps ASIndexedNodeContext if we want to promote that to a more long-lived position) already play that role.

I'm cool with SectionLayoutInfo as the name. Clarity is king.
",Adlai-Holler,appleguy
2067,2016-08-14 07:47:38,"On second thought maybe SectionLayoutInfo is too restrictive and value-typeish. We're starting it off with the non-layout field `sectionName` and I can see use cases for other ones in the future e.g. ASDK could use content states for the section to drive placeholders.

So we ought to go whole hog and subtly encourage users to treat this object as the general ""node"" that represents the section. Any info ASDK needs about that section in the future will be provided by the object. Maybe even a stronger word like `SectionContext` would be appropriate. @appleguy thoughts?
",Adlai-Holler,appleguy
2067,2016-08-14 17:22:24,"@Adlai-Holler how do we normally move this from planning to commit? Should we create a new ASDK branch to see how it would work with the Pinterest app?
",garrettmoon,Adlai-Holler
2066,2016-08-14 02:23:07,"Damn, could you give this a rebase when there's time @maicki ?
",Adlai-Holler,maicki
2066,2016-08-14 02:26:47,"@Adlai-Holler Already did it and pushed now :)
",maicki,Adlai-Holler
2064,2016-08-15 23:53:40,"I concur with @maicki 
",garrettmoon,maicki
2064,2016-08-16 19:17:29,"@Adlai-Holler Awesome, thanks! 👍
",skensell,Adlai-Holler
2062,2016-08-12 17:39:28,"@garrettmoon Sweet! Would you be willing to add a snapshot test case to watch for regressions in this system?
",Adlai-Holler,garrettmoon
2062,2016-08-12 19:06:58,"Thanks @garrettmoon this is killer!
",Adlai-Holler,garrettmoon
2061,2016-08-11 22:23:09,"@ocrickard, here you go:
A good repro of text being cut off from ComponentKit.
![simulator screen shot aug 11 2016 3 22 20 pm](https://cloud.githubusercontent.com/assets/606991/17606975/71ea54da-5fd7-11e6-80a4-c4b3372f0dea.png)
",nlutsenko,ocrickard
2061,2016-08-12 18:23:51,"@ocrickard UITextView also appears to work correctly… hmmm
",garrettmoon,ocrickard
2061,2016-08-12 18:26:36,"@ocrickard there's a PR up for adding padding: #2062
",garrettmoon,ocrickard
2061,2016-08-12 18:27:16,"@nlutsenko what OS version are you testing on for ComponentKit? I can't repro with the same strings and font sizes for the descender clipping.  The italic clipping issue is likely a separate issue.
",ocrickard,nlutsenko
2060,2016-08-16 14:35:02,"@Adlai-Holler All comments are addressed. Can I have another look over it. Thanks!
",maicki,Adlai-Holler
2056,2016-08-15 04:19:09,"@hannahmbanana  
<br>[LovePlayNews.zip](https://github.com/facebook/AsyncDisplayKit/files/417518/LovePlayNews.zip)
<br>this is demo . on home (news) , scroll very fast will (100%) casue blocking UI。run in iphone not simulator。
<br>you can look  LPNewsListController and LPNewsImageCellNode or LPNewsCellNode  (ASNetworkImageNode *imageNode;).
",12207480,hannahmbanana
2056,2016-08-16 02:30:25,"@hannahmbanana 

Thank you，I will use  placeholder。

this is  trace file 。

![image](https://cloud.githubusercontent.com/assets/6346030/17686052/ca65ca00-639b-11e6-971f-31a6cdd69ed1.png)

[lovePlayNews.trace.zip](https://github.com/facebook/AsyncDisplayKit/files/419367/lovePlayNews.trace.zip)
",12207480,hannahmbanana
2056,2016-08-24 07:07:01,"@hannahmbanana 
hello, I want to know the problem solved ?
",12207480,hannahmbanana
2055,2016-08-11 20:22:50,"@hannahmbanana Thanks so much Hannah - I will try it and let you know how it goes. Very clever. 

The banner is controlled by a different UIViewController which has several pages - the ASViewController is one of the pages where the ASTableNode height needs to be adjustable due to presence of ad banner or if adbanner is not available, if it returns, if the user purchased remove ad banners, etc.
",robmontesinos,hannahmbanana
2055,2016-08-15 19:33:21,"hi @hannahmbanana - it only works correctly after screen is returned. I set a root node and added a tableNode as a subside of the root node as you suggested. I set the tableView frame at various times trying to get it to the correct height (view height - 50 px to account for ad banner) to no avail. If I push another view controller to the screen and then return to the screen in question, the height is correct, i.e. it shrunk by 50 px.

Can you suggest the correct place, i.e. method, to set the tableView height? I spent an entire day on this to no avail. Thank you in advance.
",robmontesinos,hannahmbanana
2055,2016-08-15 20:33:02,"Good idea. I can't do it today but tomorrow for sure. Thank you @hannahmbanana !!
",robmontesinos,hannahmbanana
2055,2016-08-18 00:49:43,"@hannahmbanana  I gave up on trying to resize ASTableNode - setting up a project with all the network calls was just taking too long - I wound up servicing my needs with the use of tableFooterView - much easier to manipulate the height than the node. Sorry guys
",robmontesinos,hannahmbanana
2052,2016-08-11 19:54:54,"@maicki This diff looks good to me. Could you add a simple example app that demonstrates the default transition behavior so we can easily test and modify this code?
",Adlai-Holler,maicki
2052,2016-08-12 16:45:26,"@Adlai-Holler Added an example project: ASDKLayoutTransition
",maicki,Adlai-Holler
2052,2016-08-13 23:03:54,"Good to merge at will @maicki 
",Adlai-Holler,maicki
2052,2016-08-14 00:34:00,"@Adlai-Holler @levi  Good point with the layout options. Updated!
",maicki,Adlai-Holler
2050,2016-08-09 21:41:43,"@hannahmbanana Awesome! Could you try building this for a 32-bit device and make sure there are no warnings/errors? iPhone 4 4S 5 5c or iPod touch
",Adlai-Holler,hannahmbanana
2049,2016-08-09 22:53:44,"@levi You think we should just provide the default behavior directly in `ASDisplayNode` without introducing the coordinator for now?

Would be fine with me for now any other thoughts @appleguy @Adlai-Holler ?
",maicki,levi
2048,2016-08-09 20:40:38,"@hannahmbanana here:



and Podfile.lock


",zdenektopic,hannahmbanana
2048,2016-08-17 09:30:52,"@zdenektopic:
`AsyncDisplayKitVersionNumber` in Cocoapods returns the project file's `CURRENT_PROJECT_VERSION` number and not the `CFBundleShortVersionString`, to view this:
- Click the Pods xcodeproj file
- Click on AsyncDisplayKit 
- Click on Build Settings
- Type ""CURRENT_PROJECT_VERSION"" in search
- Under Versioning, you will see: `Current Project Version: 1`

That is why you get 1, in fact all pods that I have tested always return 1, you can try modifying that entry to 4, and then check your print for `AsyncDisplayKitVersionNumber`, you will see the output to be 4.

Also note that: `AsyncDisplayKitVersionNumber` is a double, and doubles cannot have two decimal points, so even if that were to work, you would get something like **1.9** instead of **1.9.81** (you can test this by changing the `Current Project Version` to **1.9.81**).

In such a case, assuming that `AsyncDisplayKitVersionNumber` were to be functioning like you expected. I would suppose that you should be using `AsyncDisplayKitVersionString` instead of `AsyncDisplayKitVersionNumber` to view the number in string format (thus handling the two decimal points), but for some reason we don't have access to `AsyncDisplayKitVersionString`.

@hannahmbanana: I am unsure if this is doable right now with Cocoapods, so perhaps this is something that should be addressed to the Cocoapods team?
",george-gw,hannahmbanana
2045,2016-08-09 20:09:47,"@hannahmbanana I'm cool with this but we could go even further and start using type-generic math to avoid losing precision with CGFloats. 

Could you do similar to #1994 and import the header and replace ""roundf"" with ""round"" and any other function that ends in f with its non-f variant? Also replace usages of `float` in that file with `CGFloat`.
",Adlai-Holler,hannahmbanana
2042,2016-08-09 20:20:52,"Love this, let's land it ASAP. Thoughts about comment @maicki ?
",Adlai-Holler,maicki
2042,2016-08-09 21:53:34,"@Adlai-Holler Fixed the memory leak ready to go
",maicki,Adlai-Holler
2040,2016-08-06 04:40:11,"@GitGadd: this does seem odd. @appleguy: any idea if there is a reason for this (original) code?
",hannahmbanana,GitGadd
2040,2016-08-11 03:14:10,"Thanks @GitGadd for bringing this to our attention! It's merged into master now. 
",hannahmbanana,GitGadd
2040,2016-08-11 07:30:08,"Great, thanks for the quick follow up @hannahmbanana !
",GitGadd,hannahmbanana
2039,2016-08-17 02:14:09,"@hannahmbanana OK ,[project is here](https://github.com/xnxin/asyncdemo.git) ,and thanks for your help.
",xnxin,hannahmbanana
2032,2016-08-04 19:12:52,"@maicki : Thanks for the suggestion, but it doesn't change anything. I still get the same result.
Just to test, I tried adding very long strings to other ASTextNodes in this context: same result. 
Also tried simply putting a single ASTextNode and removing all extraneous nodes but the result is the same.
I have the feeling for some strange reason, the ASTextNodes are ignoring the constrained size… but still getting placed in the right X and Y positions, and that it is all related to the general structure (ASCollectionNode, containing ASTableNodes).

BTW: what I am trying to achieve is get the ASTextNodes to show multiple lines. Not a single line.
",benjaminhorner,maicki
2032,2016-08-04 19:58:21,"@maicki : finally figured it out. I did indeed have to use **flexShrink = true** but not on the ASTextNodes but on the ASStackLayoutSpec (textSpec in my code).
",benjaminhorner,maicki
2031,2016-08-09 00:42:58,"@maicki room to bring back a version of #985?
",levi,maicki
2031,2016-08-11 20:23:37,"@Adlai-Holler #985? _wink_ _wink_
",levi,Adlai-Holler
2031,2016-08-16 23:49:55,"I'm open to #985 in the future, sure, but I think we should not do this diff here. Google recently commented about having to create node classes just to implement layouts – a problem I had at Tripstr as well – and we shouldn't take this option away until we have a replacement option. @maicki @levi @appleguy @hannahmbanana ?
",Adlai-Holler,levi
2031,2016-08-16 23:49:55,"I'm open to #985 in the future, sure, but I think we should not do this diff here. Google recently commented about having to create node classes just to implement layouts – a problem I had at Tripstr as well – and we shouldn't take this option away until we have a replacement option. @maicki @levi @appleguy @hannahmbanana ?
",Adlai-Holler,maicki
2030,2016-08-18 21:11:04,"@appleguy @Adlai-Holler @garrettmoon @levi  Ready for review
",maicki,Adlai-Holler
2025,2016-08-05 14:54:26,"@hannahmbanana I fixed it in this PR: #1909 unfortunately we didn't release a new version with that change yet

@GitGadd Can you please point your ASDK either to master or to the 1.9.90 branch. There this should be fixed. Please let me know if not ...
",maicki,GitGadd
2025,2016-08-05 14:54:26,"@hannahmbanana I fixed it in this PR: #1909 unfortunately we didn't release a new version with that change yet

@GitGadd Can you please point your ASDK either to master or to the 1.9.90 branch. There this should be fixed. Please let me know if not ...
",maicki,hannahmbanana
2025,2016-08-05 15:00:20,"@maicki Thanks, glad to hear this is already fixed. I'm using cocoapods but I'll google around to see if I can configure that in the podspec.
",GitGadd,maicki
2025,2017-03-09 21:25:51,@GitGadd I will close this issue for now as it should be fixed at least with 2.0. Please let us know if this is not the case. Thanks!,maicki,GitGadd
2024,2016-08-03 07:12:03,"@flovouin @hannahmbanana  OK, so I just tried this with my code. It turns out that the workaround I had in the `videoPlayerNode:willChangeVideoNodeState:toVideoNodeState:` method is still needed as with the release version. This is the bug that I was going to look at but I haven't got around to it yet.

The workaround is as follows:



What happens is the last state you get when you start playing the video is 'ready to play' rather than 'playing'. I translate from one to the other so that the following case statement in my code works fine.

This looks incorrect to me. I know this isn't your bug as such but if you're looking at the states we should probably cover this. What do you reckon?

I'll continue to test and let you know how I get on...
",gazreese,flovouin
2024,2016-08-03 07:12:03,"@flovouin @hannahmbanana  OK, so I just tried this with my code. It turns out that the workaround I had in the `videoPlayerNode:willChangeVideoNodeState:toVideoNodeState:` method is still needed as with the release version. This is the bug that I was going to look at but I haven't got around to it yet.

The workaround is as follows:



What happens is the last state you get when you start playing the video is 'ready to play' rather than 'playing'. I translate from one to the other so that the following case statement in my code works fine.

This looks incorrect to me. I know this isn't your bug as such but if you're looking at the states we should probably cover this. What do you reckon?

I'll continue to test and let you know how I get on...
",gazreese,hannahmbanana
2024,2016-08-03 07:37:05,"@gazreese Indeed, it seems that `ReadyToPlay` and `PlaybackLikelyToKeepUp` have clear different meanings.
I have to admit that I don't really use states in my project, so your feedback is definitely useful!
Yes, if I start tweaking the states, we might as well try to solve other problems. I'll take a look at different use cases. Any feedback / sample projects are welcome. :-)

The issue mentioned in #asvideonode was eventually fixed, but yes, more discussion is available on Slack.
",flovouin,gazreese
2024,2016-08-03 07:43:51,"@flovouin OK, sounds good.

Unfortunately I can't give you my code as a test but I expect you can reproduce the same callback states with the Video example app if you wish. If you're playing around with this states this sounds like a useful thing to try anyway.
",gazreese,flovouin
2024,2016-08-03 08:00:18,"@gazreese Yes, I was easily able to reproduce the behaviour you describe. Removing these unwanted state changes wasn't that hard. I also noticed that the same thing happens when the video finishes: `PlaybackLikelyToKeepUpButNotPlaying` can be set after the `Finished` state. This could be the intended behaviour but I'm not sure.

Also, most of the state changes happen through KVO. The state changes in `play` and `pause` seem a bit out of place. Maybe observing `rate` on the `AVPlayer` would provide a more accurate indication of whether the video is playing. I remember doing this a while back on another project.
",flovouin,gazreese
2024,2016-08-03 08:37:58,"@flovouin I was just playing around with it myself and had the following change:



Not sure whether this is correct but it seemed to work. I'm just checking the states for when the video finishes playing and I think you're right, we might need to observe the rate, which is also used in `isPlaying`.
",gazreese,flovouin
2024,2016-08-03 08:45:03,"@gazreese Yes, I have more or less the same code. I make the same check for the `PlaybackLikelyToKeepUp` notification, such that the state stays `Playing` when it needs to.

I experimented with what I was suggesting: using KVO on `rate` instead of changing the state in `play` and `pause`. It works great, the only noticeable change is that when the video finishes, the `rate` change is notified before `didPlayToEnd`. This results in `Playing -> Paused -> Finished` instead of just `Playing -> Finished`. Would that be a problem?
",flovouin,gazreese
2024,2016-08-03 08:48:10,"@flovouin That wouldn't be a problem for me, thanks!

If you would like me to test this just let me know the branch name on your repo and I'll give it a try.
",gazreese,flovouin
2024,2016-08-03 09:22:21,"@gazreese I just pushed a new commit on this branch that uses KVO on rate. It also removes unnecessary / incorrect state transitions. So far it works on a sample project provided by @maxsz, and on my project (although I don't make heavy use of the states). As mentioned in my very first post, in addition to fixing the states, it also prevents the `ASVideoNode` from unnecessarily reloading the `playerItem`, hence removing some flickering and ""play-back-from-start"" issues I was having.

To anyone who uses the `ASVideoNode`, please tell me if it breaks anything on your side, I'd be happy to look into it.
",flovouin,gazreese
2024,2016-08-03 09:37:52,"@flovouin Excellent, thanks! I'll have a test now...
",gazreese,flovouin
2024,2016-08-03 09:50:54,"@flovouin I just tested this in my app in various situations and the states and transitions between them look perfect to me. Thanks! 👍 
",gazreese,flovouin
2022,2016-08-02 17:49:56,"@appleguy `automaticHierachy` was just a placeholder. I just pushed an update and the naming is `automaticallyManagesSubnodes`
",maicki,appleguy
2022,2016-08-10 05:04:20,"@maicki: would `.automaticSubnodeManagement` be apple than `.automaticallyManagesSubnodes`?
",hannahmbanana,maicki
2022,2016-08-10 13:58:57,"@hannahmbanana No most of the API uses `automatically...`
",maicki,hannahmbanana
2018,2016-08-01 16:16:20,"@maicki This seems like the right fix to me, we should land if we can get an accept from either Levi or Adlai.  Let's get the tests running.  Thanks for the key investigation that went on here to develop this fix!
",appleguy,maicki
2017,2016-08-02 05:32:24,"@hannahmbanana 
I updated the crash capture image.
It comes from xcode organizer crashes list, 
I haven't meet in debugging, not more log yet.
",dssheng,hannahmbanana
2017,2016-08-03 07:22:39,"@hannahmbanana 
![crash2](https://cloud.githubusercontent.com/assets/2062938/17357142/e076525a-598d-11e6-93e5-593e5b729283.jpg)
",dssheng,hannahmbanana
2017,2016-08-03 11:51:27,"@hannahmbanana 
using AsyncDisplayKit  1.9.80
I'll transfer app on newer version in later version.
",dssheng,hannahmbanana
2017,2016-08-29 08:28:49,"@maicki we will run on 1.9.90 later.
Since it's a random bug, I guess we'll see it works or not after testflight or in-house testing.  
",dssheng,maicki
2017,2017-01-18 10:52:11,"@maicki 
This bug has happened again, 
Need Re-Open.",dssheng,maicki
2017,2017-02-04 08:35:54,@appleguy I looked at some recent bug reports and this crash happens on iOS 10.x on a range of devices.,plm75,appleguy
2016,2016-08-02 03:51:25,"@yufenglv: Thanks for reporting this! If possible to reproduce, could you capture the full backtrace for us using `bt all` in the console? 

Do you know if there are any other trends in this crash, such as operating systems or devices? 
",hannahmbanana,yufenglv
2016,2016-09-11 19:50:56,"@yufenglv we've made several changes in master, and Pinterest has seen that the volume of this crash has fallen off.  There are some API changes in master, but if you roll back the change landed late last week for the updated Layout API, it wouldn't be difficult to update and ship your next version with this.

We don't have a pod version deployed for this, but the easiest option would be to ship from the releases/p6.11 branch (which is what Pinterest is using currently).  If you can only use full pod versions, be sure to update to at least 1.9.90 (which is older than p6.11)

I'm going to close this out for now, but please continue to update us (or reopen the issue) if you learn additional information.
",appleguy,yufenglv
2014,2016-07-31 01:03:31,"@maicki Thanks!  I'd originally done it that way, not sure why I decided to change.  Anyway, put it back to that way.  I do normally put a space like ? : - but we could start doing the other if you prefer.
",appleguy,maicki
2013,2016-08-31 12:30:35,"@hannahmbanana  have you had a chance to see how I could hack it.
I know init with view block prevent I use delegate method, is there any way around?
",raphaels17,hannahmbanana
2011,2016-08-27 09:47:49,"@george-gw you're right; i had layerBacked=true for an image in my supplementary view; if i comment it the app does not crash.
Thank you for your info !
",cdiscla,george-gw
2011,2016-08-27 12:02:54,"@george-gw in my case I don't have **supplementary view**, and no **layerBacked** on the cell children nodes. I'm using `reloadRowsAtIndexPaths` to update my table.
",jadsonlourenco,george-gw
2011,2016-08-29 12:58:25,"@george-gw yes, I'm using the latest master and crash.
",jadsonlourenco,george-gw
2011,2016-08-29 13:58:03,"@george-gw Yeah, I have layerBacked for ASTextNode and ASImageNode there. If I set it to NO it doesn't crash any more. Thanks.
",aforkalyuk,george-gw
2011,2016-08-31 18:58:39,"@cdiscla @george-gw @jadsonlourenco @aforkalyuk Thanks for your patience folks! If possible, can you try building against that diff and see if it resolves the issue?
",Adlai-Holler,george-gw
2011,2016-08-31 20:00:26,"@Adlai-Holler no, in my case I'm using an `ASButtonNode` (with an image) inside my **ASCellNode** when I need remove/insert my cell get this error (crash):


",jadsonlourenco,Adlai-Holler
2011,2016-08-31 20:45:45,"@Adlai-Holler yes.
",jadsonlourenco,Adlai-Holler
2011,2016-08-31 21:10:48,"@Adlai-Holler it solved the crash that I was facing with the supplementary header nodes 👍 
",george-gw,Adlai-Holler
2011,2016-09-02 13:55:05,"@Adlai-Holler thank you! But don't worry, my issue is solved.

I created a simple project to test (demo: http://sendvid.com/wxee33cv code: https://github.com/jadsonlourenco/ASCellDemo) and all works fine, I don't know why in my real app I have few issues with AsyncDisplaykit - cell animation when load; crash when reload a cell; etc. - but is something in my app, I will figure out.
",jadsonlourenco,Adlai-Holler
2010,2016-07-29 07:30:49,"@hannahmbanana  thx， there is 1.9.80. Ok i will update my Podfile.
",Serlight,hannahmbanana
2010,2016-09-28 02:46:57,"But， on cocoapod  the latest version is 1.9.74 @hannahmbanana 
-> AsyncDisplayKit (1.9.74)
   Smooth asynchronous user interfaces for iOS apps.
   pod 'AsyncDisplayKit', '~> 1.9.74'
- Homepage: http://asyncdisplaykit.org
- Source:   https://github.com/facebook/AsyncDisplayKit.git
- Versions: 1.9.74, 1.9.73, 1.9.7.2, 1.9.7.1, 1.9.7, 1.9.6, 1.9.5, 1.9.4,
  1.9.3, 1.9.2, 1.9.1, 1.9, 1.2.3, 1.2.2, 1.2.1, 1.2, 1.1.1, 1.1, 1.0.1, 1.0
  [master repo]
- Subspecs:
  - AsyncDisplayKit/Core (1.9.74)
  - AsyncDisplayKit/ASDealloc2MainObject (1.9.74)
  - AsyncDisplayKit/PINRemoteImage (1.9.74)
",GreatLiyi,hannahmbanana
2004,2016-07-29 02:58:05,"@hannahmbanana It's not a big deal, Just replace this code in `application:didFinishLaunchingWithOptions:` and put the attached icons in your `Assets.xcassets`.



[Assets.zip](https://github.com/facebook/AsyncDisplayKit/files/389798/Assets.zip)
",iAlirezaKML,hannahmbanana
2004,2016-07-30 14:31:58,"@hannahmbanana I've attached the exact sample project you wanted.
I really appreciate if you can tell me what should I do. I'm playing with threads and `GCD` for two days, but I couldn't make it work :(
[NetworkImageButtonNode.zip](https://github.com/facebook/AsyncDisplayKit/files/391920/NetworkImageButtonNode.zip)
",iAlirezaKML,hannahmbanana
2003,2016-07-29 08:58:18,"@maicki: thanks! Works like a charm.
Here is what I ended up doing:



**Note**: unlike what I initially attempted, you cannot just position the plus sign but also the avatar if you want the avatar to stay centered and the Plus sign offset to the right.
",benjaminhorner,maicki
2000,2016-07-28 15:04:59,"@maicki: you are totally right. I am actually using it in a larger file. I just extracted that bit. However, as you point out, returning an inset spec is a better solution.
",benjaminhorner,maicki
2000,2016-08-03 20:07:53,"I spoke with @Yue-Wang-Google and understand the core issue here - let's try to fix the italics bug first, but adding this as a +Beta API as a workaround could be reasonable too!
",appleguy,Yue-Wang-Google
2000,2016-08-14 19:52:24,"Thanks @garrettmoon for adding this to `ASTextNode`!

@Yue-Wang-Google try this out and let us know if this doesn't work for you. The fix is currently in `master` (2.0 beta), which contains a few minor breaking API changes. I'll try to get this into `1.9.91` as well so that you can test it when we bump the pod in a day or two. 
",hannahmbanana,Yue-Wang-Google
1999,2016-07-28 17:36:40,"@Yue-Wang-Google On what version are you on? Is it master?
",maicki,Yue-Wang-Google
1999,2016-08-10 20:40:56,"@Yue-Wang-Google I built a reproduction case and it appears that the UIImage that ASDK generates is the same size (rounded to pixels up) as the size returned by `usedRectForTextContainer:` (called on NSLayoutManager). This is still obviously an issue, just trying to confirm that I'm working on the same bug you're reporting :)
",garrettmoon,Yue-Wang-Google
1999,2016-08-11 17:32:05,"@Yue-Wang-Google the plot thickens: this is the exact same behavior of a UILabel even _with_ clipsToBounds set to NO.

![simulator screen shot aug 11 2016 10 30 07 am](https://cloud.githubusercontent.com/assets/90045/17598313/bbb40710-5fae-11e6-91a0-4f7882e9e0bd.png)

Other's appear to attempt to workaround the issue in UILabel: http://stackoverflow.com/questions/20985085/uilabel-clipping-italic-oblique-text-at-left-and-right-edges-of-content-ios
",garrettmoon,Yue-Wang-Google
1999,2016-08-11 19:40:28,"@nlutsenko I'm not sure they perceive it as a bug – I think it's meant to return the sizing of a view for layout and alignment. The actual rendering may exceed its bounds.
",garrettmoon,nlutsenko
1990,2016-08-02 16:01:26,"@maicki Hey, where you been able to reproduce the problem?
",evgenyst,maicki
1989,2016-07-27 08:32:22,"@hannahmbanana I was using UIViewController. Thanks for your reply, I will try to upgrade to 1.9.81.
",peace-v,hannahmbanana
1989,2016-07-28 01:55:32,"@maicki After call `measure` the titleNode did show, but how can I center the title? Calling `contentHorizontalAlignment` and `contentVerticalAlignment` is not working.


",peace-v,maicki
1989,2016-07-28 04:21:56,"@maicki It works! Thanks.
",peace-v,maicki
1988,2016-07-27 22:49:13,"@Adlai-Holler: could you merge this into `releases/p6.9` for me?
",hannahmbanana,Adlai-Holler
1986,2016-08-03 19:05:10,"@hannahmbanana : i have checked that size, it was non-zero. i have attached the sample project.

[Sample.zip](https://github.com/facebook/AsyncDisplayKit/files/400194/Sample.zip)
",srikanthpandeti,hannahmbanana
1986,2016-08-16 07:22:57,"@hannahmbanana  Thanks for your reply and I appreciate that you looked into this issue.
I will be pleased to share a similar code for the sample. I'll post that up when I get a chance.
",srikanthraju,hannahmbanana
1986,2016-08-16 17:22:06,"@srikanthpandeti I believe @hannahmbanana saved the day in #2069. Could you try latest master and confirm it's working?
",Adlai-Holler,hannahmbanana
1986,2016-08-17 08:24:18,"@hannahmbanana and @Adlai-Holler issue has been fixed. You really saved my time.
",srikanthraju,hannahmbanana
1986,2016-08-17 08:24:18,"@hannahmbanana and @Adlai-Holler issue has been fixed. You really saved my time.
",srikanthraju,Adlai-Holler
1986,2016-08-19 10:46:29,"@hannahmbanana I have updated the sample and removed unwanted code. let me know if you need anything else.
[Sample.zip](https://github.com/facebook/AsyncDisplayKit/files/426801/Sample.zip)
",srikanthraju,hannahmbanana
1985,2016-07-27 09:01:21,"I have this problem too (at this time avoiding it by manual calculating pagerNode's frame) & it appears in some example projects (ex. AsyncDisplayKitOverview)

@maicki even in fixed project we have an `UICollectionViewFlowLayout` error. Can we somehow fix it?

<details> 
  <summary>

console output</summary>




",Jauzee,maicki
1976,2016-07-24 22:31:06,"@Adlai-Holler this is really good!  I'm annoyed by all of the object forwarding as I'm sure was your intent in eliminating this, but the name is much nicer / more approachable and I think the count is still useful.

I suppose we could consider adding the count logic as a category on NSHashTable, but this seems great for now.
",appleguy,Adlai-Holler
1975,2016-07-24 22:12:49,"@levi very nice indeed!  Really like this and feel we need more in PIModel classes too.
",appleguy,levi
1973,2016-07-24 03:12:24,"Great!  @levi @Adlai-Holler we should definitely add more of these throughout Pinterest app code too.
",appleguy,levi
1973,2016-07-24 03:12:24,"Great!  @levi @Adlai-Holler we should definitely add more of these throughout Pinterest app code too.
",appleguy,Adlai-Holler
1971,2016-08-22 17:46:09,"@tomizimobile This diff was superseded by #1890 which should fix the same issue. Thanks for raising it, and let me know if your apps animations are still getting disabled!
",Adlai-Holler,tomizimobile
1970,2016-07-22 19:52:31,"@Adlai-Holler looks great, thanks!  I recognize these from when I was rewriting ASRangeController.  They are from a time when more state was maintained internal to the range & layout controller, so it's great to remove them.
",appleguy,Adlai-Holler
1969,2016-07-24 03:19:20,"@samhsiung thanks for submitting this!  As the framework is currently implemented, this is a great idea.

@maicki what are your thoughts on automatic or easier ""concatenation"" of layout specs, so that including the super's layoutspec is trivial?  In that world, we probably want this to be a valid no-op instead.  We could return an empty ASLayoutSpec here for example, which even today may be a better default for users who are putting the super-returned layout into a static spec along with their own layout (the ""manual"" concatenation).
",appleguy,maicki
1969,2016-07-24 03:19:20,"@samhsiung thanks for submitting this!  As the framework is currently implemented, this is a great idea.

@maicki what are your thoughts on automatic or easier ""concatenation"" of layout specs, so that including the super's layoutspec is trivial?  In that world, we probably want this to be a valid no-op instead.  We could return an empty ASLayoutSpec here for example, which even today may be a better default for users who are putting the super-returned layout into a static spec along with their own layout (the ""manual"" concatenation).
",appleguy,samhsiung
1961,2016-07-21 01:40:46,"@Xinchi Great improvements, thank you!!
",appleguy,Xinchi
1959,2016-07-21 21:17:20,"@maicki Hi Michael, I just tried master and it is still happening.  If I have time later, I'll see if I can reproduce it in an example project.
",KristopherGBaker,maicki
1959,2016-07-22 23:06:37,"@maicki Hey Michael, I've narrowed down where the issue is happening a bit more.

After fixing a missing call to super.viewWillTransitionToSize in one of my container view controllers, I have it working as expected if I update viewWillTransitionToSize in ASViewController.mm to set the node's size as below.  I don't know if this is the right way to go about it, and I can just do the same thing in my view controller instead of ASViewController, but this wasn't necessary with 1.9.80.

One other thing about all of this - the view that the ASViewController node's view ends up as a subview of (the container VC for the ASViewController), has auto layout constraints (and translatesAutoresizingMaskIntoConstraints = false/NO).


",KristopherGBaker,maicki
1958,2016-07-21 11:16:39,"@maicki I'm using ASDK 1.9.80 and implicit hierarchy management on all nodes, so I don't use `addSubnode` manually. As I said, the crash occurs in after trying to insert/delete item from ASCollectionNode.
Here's the stack:
`thread #1: tid = 0x280c1e, 0x0000000182e10fd8 libsystem_kernel.dylib`mach_msg_trap + 8, queue = 'com.apple.main-thread'
    frame #0: 0x0000000182e10fd8 libsystem_kernel.dylib`mach_msg_trap + 8
    frame #1: 0x0000000182e10e54 libsystem_kernel.dylib`mach_msg + 72
    frame #2: 0x0000000183248c60 CoreFoundation`__CFRunLoopServiceMachPort + 196
    frame #3: 0x0000000183246964 CoreFoundation`__CFRunLoopRun + 1032
    frame #4: 0x0000000183170c50 CoreFoundation`CFRunLoopRunSpecific + 384
    frame #5: 0x0000000184a58088 GraphicsServices`GSEventRunModal + 180
    frame #6: 0x000000018845a088 UIKit`UIApplicationMain + 204
    frame #7: 0x0000000100031078 Carawella`main + 144 at AppDelegate.swift:12
    frame #8: 0x0000000182d0e8b8 libdyld.dylib`start + 4

  thread #2: tid = 0x280c4d, 0x0000000182e2cb48 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x0000000182e2cb48 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x0000000182ef5530 libsystem_pthread.dylib`_pthread_wqthread + 1284
    frame #2: 0x0000000182ef5020 libsystem_pthread.dylib`start_wqthread + 4

  thread #3: tid = 0x280c4e, 0x0000000182e11014 libsystem_kernel.dylib`semaphore_wait_trap + 8, queue = 'org.AsyncDisplayKit.ASDataController.editingTransactionQueue :: NSOperation 0x12f7446b0 (QOS: LEGACY)', activity = 'send control actions', 4 messages
    frame #0: 0x0000000182e11014 libsystem_kernel.dylib`semaphore_wait_trap + 8
    frame #1: 0x0000000100d77efc libdispatch.dylib`_dispatch_group_wait_slow + 260
    frame #2: 0x00000001003731ec AsyncDisplayKit`-[ASDataController _layoutNodesFromContexts:ofKind:completion:](self=0x000000012f6749a0, _cmd=""_layoutNodesFromContexts:ofKind:completion:"", contexts=1 element, kind=""_ASDataControllerRowNodeKind"", completionBlock=0x000000016e112970) + 2104 at ASDataController.mm:252
    frame #3: 0x0000000100371c38 AsyncDisplayKit`-[ASDataController batchLayoutNodesFromContexts:ofKind:completion:](self=0x000000012f6749a0, _cmd=""batchLayoutNodesFromContexts:ofKind:completion:"", contexts=1 element, kind=""_ASDataControllerRowNodeKind"", completionBlock=0x000000016e112970) + 428 at ASDataController.mm:127
    frame #4: 0x00000001003724b8 AsyncDisplayKit`-[ASDataController _batchLayoutNodesFromContexts:withAnimationOptions:](self=0x000000012f6749a0, _cmd=""_batchLayoutNodesFromContexts:withAnimationOptions:"", contexts=1 element, animationOptions=5) + 200 at ASDataController.mm:153
    frame #5: 0x000000010037c930 AsyncDisplayKit`__64-[ASDataController insertRowsAtIndexPaths:withAnimationOptions:]_block_invoke_3(.block_descriptor=0x000000012f7440a0) + 100 at ASDataController.mm:838
    frame #6: 0x0000000183c4c540 Foundation`**NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK** + 16
    frame #7: 0x0000000183b9e870 Foundation`-[NSBlockOperation main] + 96
    frame #8: 0x0000000183b8ee48 Foundation`-[__NSOperationInternal _start:] + 604
    frame #9: 0x0000000183c4e934 Foundation`__NSOQSchedule_f + 224
    frame #10: 0x0000000100d65a3c libdispatch.dylib`_dispatch_client_callout + 16
    frame #11: 0x0000000100d72554 libdispatch.dylib`_dispatch_queue_drain + 1036
    frame #12: 0x0000000100d6972c libdispatch.dylib`_dispatch_queue_invoke + 464
    frame #13: 0x0000000100d7466c libdispatch.dylib`_dispatch_root_queue_drain + 760
    frame #14: 0x0000000100d74364 libdispatch.dylib`_dispatch_worker_thread3 + 132
    frame #15: 0x0000000182ef5470 libsystem_pthread.dylib`_pthread_wqthread + 1092
    frame #16: 0x0000000182ef5020 libsystem_pthread.dylib`start_wqthread + 4

  thread #4: tid = 0x280c4f, 0x0000000182e2d4d8 libsystem_kernel.dylib`kevent_qos + 8, queue = 'com.apple.libdispatch-manager'
    frame #0: 0x0000000182e2d4d8 libsystem_kernel.dylib`kevent_qos + 8
    frame #1: 0x0000000100d7a0fc libdispatch.dylib`_dispatch_mgr_invoke + 232
    frame #2: 0x0000000100d67cb8 libdispatch.dylib`_dispatch_mgr_thread + 52

  thread #5: tid = 0x280c50, 0x0000000182e2cb48 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x0000000182e2cb48 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x0000000182ef5530 libsystem_pthread.dylib`_pthread_wqthread + 1284
    frame #2: 0x0000000182ef5020 libsystem_pthread.dylib`start_wqthread + 4

  thread #9: tid = 0x280c6c, 0x0000000182e10fd8 libsystem_kernel.dylib`mach_msg_trap + 8, name = 'com.apple.NSURLConnectionLoader'
    frame #0: 0x0000000182e10fd8 libsystem_kernel.dylib`mach_msg_trap + 8
    frame #1: 0x0000000182e10e54 libsystem_kernel.dylib`mach_msg + 72
    frame #2: 0x0000000183248c60 CoreFoundation`**CFRunLoopServiceMachPort + 196
    frame #3: 0x0000000183246964 CoreFoundation`__CFRunLoopRun + 1032
    frame #4: 0x0000000183170c50 CoreFoundation`CFRunLoopRunSpecific + 384
    frame #5: 0x00000001838f1c68 CFNetwork`+[NSURLConnection(Loader) _resourceLoadLoop:] + 412
    frame #6: 0x0000000183c67e4c Foundation`__NSThread__start** + 1000
    frame #7: 0x0000000182ef7b28 libsystem_pthread.dylib`_pthread_body + 156
    frame #8: 0x0000000182ef7a8c libsystem_pthread.dylib`_pthread_start + 156
    frame #9: 0x0000000182ef5028 libsystem_pthread.dylib`thread_start + 4

  thread #10: tid = 0x280c70, 0x0000000182e2c344 libsystem_kernel.dylib`__select + 8, name = 'com.apple.CFSocket.private'
    frame #0: 0x0000000182e2c344 libsystem_kernel.dylib`__select + 8
    frame #1: 0x000000018324f1c8 CoreFoundation`__CFSocketManager + 648
    frame #2: 0x0000000182ef7b28 libsystem_pthread.dylib`_pthread_body + 156
    frame #3: 0x0000000182ef7a8c libsystem_pthread.dylib`_pthread_start + 156
    frame #4: 0x0000000182ef5028 libsystem_pthread.dylib`thread_start + 4

  thread #11: tid = 0x280c71, 0x0000000182e2cb48 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x0000000182e2cb48 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x0000000182ef5530 libsystem_pthread.dylib`_pthread_wqthread + 1284
    frame #2: 0x0000000182ef5020 libsystem_pthread.dylib`start_wqthread + 4

  thread #12: tid = 0x280c72, 0x0000000182e2cb48 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x0000000182e2cb48 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x0000000182ef5530 libsystem_pthread.dylib`_pthread_wqthread + 1284
    frame #2: 0x0000000182ef5020 libsystem_pthread.dylib`start_wqthread + 4

  thread #13: tid = 0x280c73, 0x0000000182e2cb48 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x0000000182e2cb48 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x0000000182ef5530 libsystem_pthread.dylib`_pthread_wqthread + 1284
    frame #2: 0x0000000182ef5020 libsystem_pthread.dylib`start_wqthread + 4
- thread #8: tid = 0x280c8d, 0x0000000182e2c11c libsystem_kernel.dylib`__pthread_kill + 8, queue = 'com.apple.root.default-qos', activity = 'send control actions', stop reason = signal SIGABRT
  frame #0: 0x0000000182e2c11c libsystem_kernel.dylib`__pthread_kill + 8
  frame #1: 0x0000000182ef8ef8 libsystem_pthread.dylib`pthread_kill + 112
  frame #2: 0x0000000182d9ddac libsystem_c.dylib`abort + 140
  frame #3: 0x00000001828d13f4 libc++abi.dylib`abort_message + 132
  frame #4: 0x00000001828ede98 libc++abi.dylib`default_terminate_handler() + 304
  frame #5: 0x00000001828f8248 libobjc.A.dylib`_objc_terminate() + 124
  frame #6: 0x00000001828f8248 libobjc.A.dylib`_objc_terminate() + 124
  frame #7: 0x00000001828eaf44 libc++abi.dylib`std::__terminate(void (*)()) + 16
  frame #8: 0x00000001828ea85c libc++abi.dylib`__cxa_throw + 136
  frame #9: 0x00000001828f8094 libobjc.A.dylib`objc_exception_throw + 332
  frame #10: 0x0000000183292c80 CoreFoundation`+[NSException raise:format:arguments:] + 108
  frame #11: 0x0000000183c18154 Foundation`-[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 112
  - frame #12: 0x00000001003aa3bc AsyncDisplayKit`-[ASDisplayNode removeFromSupernode](self=0x000000012f76ba50, _cmd=""removeFromSupernode"") + 284 at ASDisplayNode.mm:1511
    frame #13: 0x00000001003a634c AsyncDisplayKit`-[ASDisplayNode _insertSubnode:atSubnodeIndex:sublayerIndex:andRemoveSubnode:](self=0x00000001308329d0, _cmd=""_insertSubnode:atSubnodeIndex:sublayerIndex:andRemoveSubnode:"", subnode=0x000000012f76ba50, subnodeIndex=0, sublayerIndex=9223372036854775807, oldSubnode=0x0000000000000000) + 288 at ASDisplayNode.mm:1289
    frame #14: 0x00000001003a95c0 AsyncDisplayKit`-[ASDisplayNode insertSubnode:atIndex:](self=0x00000001308329d0, _cmd=""insertSubnode:atIndex:"", subnode=0x000000012f76ba50, idx=0) + 1440 at ASDisplayNode.mm:1466
    frame #15: 0x00000001003e4ae0 AsyncDisplayKit`-[ASLayoutTransition applySubnodeInsertions](self=0x0000000130809260, _cmd=""applySubnodeInsertions"") + 320 at ASLayoutTransition.mm:49
    frame #16: 0x00000001003b2224 AsyncDisplayKit`-[ASDisplayNode applyLayout:layoutContext:](self=0x00000001308329d0, _cmd=""applyLayout:layoutContext:"", layout=0x000000012f54eda0, layoutContext=0x0000000130809260) + 1380 at ASDisplayNode.mm:2371
    frame #17: 0x000000010039f864 AsyncDisplayKit`-[ASDisplayNode measureWithSizeRange:](self=0x00000001308329d0, _cmd=""measureWithSizeRange:"", constrainedSize=%28min = %28width = 414, height = 622%29, max = %28width = 414, height = 622%29%29) + 708 at ASDisplayNode.mm:629
    frame #18: 0x0000000100372234 AsyncDisplayKit`-[ASDataController _layoutNode:withConstrainedSize:](self=0x000000012f6749a0, _cmd=""_layoutNode:withConstrainedSize:"", node=0x00000001308329d0, constrainedSize=(min = (width = 414, height = 622), max = (width = 414, height = 622))) + 108 at ASDataController.mm:144
    frame #19: 0x0000000100372884 AsyncDisplayKit`-[ASDataController _layoutNodes:fromContexts:atIndexesOfRange:ofKind:](self=0x000000012f6749a0, _cmd=""_layoutNodes:fromContexts:atIndexesOfRange:ofKind:"", nodes=1 element, contexts=1 element, range=location=0, length=1, kind=""_ASDataControllerRowNodeKind"") + 528 at ASDataController.mm:176
    frame #20: 0x0000000100374158 AsyncDisplayKit`__63-[ASDataController _layoutNodesFromContexts:ofKind:completion:]_block_invoke.111(.block_descriptor=<unavailable>) + 140 at ASDataController.mm:247
    frame #21: 0x0000000100d65a7c libdispatch.dylib`_dispatch_call_block_and_release + 24
    frame #22: 0x0000000100d65a3c libdispatch.dylib`_dispatch_client_callout + 16
    frame #23: 0x0000000100d74c9c libdispatch.dylib`_dispatch_root_queue_drain + 2344
    frame #24: 0x0000000100d74364 libdispatch.dylib`_dispatch_worker_thread3 + 132
    frame #25: 0x0000000182ef5470 libsystem_pthread.dylib`_pthread_wqthread + 1092
    frame #26: 0x0000000182ef5020 libsystem_pthread.dylib`start_wqthread + 4`
",KRUBERLICK,maicki
1958,2016-07-21 11:21:07,"@maicki when I use the empty ASCellNodes instead of custom nodes with ASTableNode feeds everything work OK - item insertion/deletion. So I guess the problem is hiding somewhere in the ASTableNodes...
",KRUBERLICK,maicki
1958,2016-07-21 13:08:34,"@maicki just tried 1.9.81 and everything seems to work fine!
",KRUBERLICK,maicki
1958,2016-07-21 13:16:11,"@maicki yes, `tableView:nodeBlockForRowAtIndexPath:` and `collectionView:nodeBlockForItemAtIndexPath:` are working ok.
I think that it was some bug when allocating nodes off the main thread or something like this...
But anyway, it works! :)
",KRUBERLICK,maicki
1957,2016-07-21 01:54:24,"@Adlai-Holler This is pretty cool in terms of code deletion, but I'm a bit worried about this because I'm nearly certain that we had to create ASWeakSet because the count of NSHashTable is totally inaccurate when tracking weak objects.  E.g. they are not actually removed from the count until iterated.  There are comments talking about this in the original implementation I believe.

We shouldn't land this without some further discussion on that, and verifying the details of the important systems impacted by this.

Also, this is an API change.  I believe we are using ASWeakSet in Pinterest, and I have suggested it for use to a few community members.
",appleguy,Adlai-Holler
1957,2016-07-21 03:01:29,"Yeah, I think we should abandon this :(

I must say this is a bit ironic, since I'm pretty sure you discovered the count issue and implemented this class to fix it @Adlai-Holler :-D
- (NSHashTable<ObjectType> *)weakObjectsHashTable NS_AVAILABLE(10_8, 6_0); // entries are not necessarily purged right away when the weak object is reclaimed
",appleguy,Adlai-Holler
1957,2016-07-23 16:39:37,"@appleguy @maicki Ping
",Adlai-Holler,appleguy
1957,2016-07-23 16:39:37,"@appleguy @maicki Ping
",Adlai-Holler,maicki
1957,2016-07-24 03:17:02,"@Adlai-Holler do we not use the count?  I certainly use it regularly in debugging, although if you want to add a comparable function, that sounds good.

Honestly I'd prefer we keep ASWeakSet even if you want to swap out the implementation, because in comparison, the NSHashTable / NSMapTable classes and their initializers are obscure.  We shouldn't add our own primitive for everything, but particularly given the count pitfall, I think it is worth at least a tiny wrapper class.
",appleguy,Adlai-Holler
1954,2016-07-20 07:05:51,"Hi @Xinchi. Regarding construction I'm keener on having the explicit construction using either the asset or the URL if I'm honest. This is reflected in ASVideoPlayerNode as well as the standard iOS APIs.

As for giving this a try, I've raised it up on my internal tracker and will have a look at it when I've finished what I'm working on.
",gazreese,Xinchi
1954,2016-07-21 00:07:08,"@Xinchi strong direction. Looks good to me!
",levi,Xinchi
1954,2016-07-21 00:13:58,"@Xinchi Looks good to me!!

![giphy](https://cloud.githubusercontent.com/assets/25288/17007409/570616ae-4e9d-11e6-843c-f232fc16c07f.gif)
",maicki,Xinchi
1952,2016-07-21 13:11:16,"@eanagel Hey, great having this PR! Can you try looking into the failing tests if you have some time? Tests should succeed before we can merge ... Thank you very much!

In terms of naming for our internal methods we tend to go to one underline in the method name like `_clearFetchedData`. Curious what @appleguy or @Adlai-Holler thinks about it.
",maicki,eanagel
1952,2016-07-22 16:34:01,"@maicki so I looked a the test and I think the problem is the test ;) It looks like we are doing the following with `ASVideoNode`:
1. set invalid asset
2. set placeholder image
3. test A: videoNode.image == placeholder
4. set second invalid asset
5. test B: videoNode.image != placeholder

Test B now fails. It was succeeding previously because we used to clear the image briefly when setting an asset. Note that if we had swapped steps 1 and 2 the old code (pre this PR) would have failed ;)

Given that the image always displays the placeholder and shouldn't be effected by setting the asset (and especially an invalid one), the existing test doesn't make much sense. I went ahead and replaced it with a similar test that ensures that the image is not changed (cleared) when setting an asset, which is what I'm fixing.
",eanagel,maicki
1952,2016-07-27 20:27:02,"Hi @eanagel , can you rebase this patch?  Some recent changes of ASAsset passing and AVPlayerItem construction has been landed in the latest ASVideoNode.
",Xinchi,eanagel
1952,2016-08-12 20:20:57,"@eanagel If this is still valuable, please feel free to reopen it. 
",Adlai-Holler,eanagel
1950,2016-07-20 20:23:51,"@Xinchi: it looks like this PR for the release branch doesn't trigger a Travis build. Could you run the tests locally to make sure this passes?
",hannahmbanana,Xinchi
1950,2016-07-21 00:43:09,"@hannahmbanana Thanks for the tip!  We might have a master-branch solution that can be merged to releases/p6.7 and releases/p6.8 soon.  #1954 

If #1954 can be landed in the next few hours, I will close this PR
",Xinchi,hannahmbanana
1950,2016-07-21 00:48:26,"@Xinchi: thanks for the update. I was wondering why we had two PRs. 
",hannahmbanana,Xinchi
1950,2016-07-21 01:53:51,"@hannahmbanana Closing this patch because #1954 has been landed on master.
",Xinchi,hannahmbanana
1950,2016-07-21 01:56:57,"@Xinchi thanks for making the newer version!
",appleguy,Xinchi
1949,2016-07-21 15:06:21,"@flovouin @koheku @dssheng Would it be possible of one of your guys provide us with a sample app so we can reproduce the issue / regression? That would be awesome! Thanks!
",maicki,flovouin
1949,2016-07-21 20:30:04,"@flovouin @koheku @dssheng Hey, can you please try out ASDK master? Is it still happening if you build against it? Thanks!
",maicki,flovouin
1949,2016-07-22 15:10:40,"Thanks @maicki and @hannahmbanana for your replies! I just tried the same code using `master` and the behaviour is different:
- When the view appears the cell nodes are correctly laid out, and they stay this way until `viewDidAppear` is called on the controller.
- After that, the cell nodes shift to the incorrect position (it seems to be the same as with 1.9.81) without any animation, but then animate back to the correct layout.
- When this unwanted animation finishes, the cell nodes are correctly laid out and life goes on as if it never happened. ;-)
  So there's some ""improvement"" but the bug is still there. No work is performed on my side in `viewWill/DidAppear`.

I wasn't able to reproduce the bug with a simple demo project. I'll try to code something closer to my actual node hierarchy. Unfortunately I am away next week so this is going to take some time. Sorry I can't be of any more help right now, but please tell me if I can do anything else to put you on the right track.

Cheers,
",flovouin,maicki
1949,2016-07-22 15:10:40,"Thanks @maicki and @hannahmbanana for your replies! I just tried the same code using `master` and the behaviour is different:
- When the view appears the cell nodes are correctly laid out, and they stay this way until `viewDidAppear` is called on the controller.
- After that, the cell nodes shift to the incorrect position (it seems to be the same as with 1.9.81) without any animation, but then animate back to the correct layout.
- When this unwanted animation finishes, the cell nodes are correctly laid out and life goes on as if it never happened. ;-)
  So there's some ""improvement"" but the bug is still there. No work is performed on my side in `viewWill/DidAppear`.

I wasn't able to reproduce the bug with a simple demo project. I'll try to code something closer to my actual node hierarchy. Unfortunately I am away next week so this is going to take some time. Sorry I can't be of any more help right now, but please tell me if I can do anything else to put you on the right track.

Cheers,
",flovouin,hannahmbanana
1949,2016-07-22 18:24:50,"@flovouin Sorry about this issue! Can you try the following: on your ASCellNode subclass, set `shouldAnimateSizeChanges = NO;` and see if that removes the unwanted animation?
",Adlai-Holler,flovouin
1949,2016-07-29 03:10:27,"@Adlai-Holler 
here is my code sample, using 1.9.81



and shouldAnimateSizeChanges not working.
",dssheng,Adlai-Holler
1949,2016-08-01 07:01:55,"@Adlai-Holler Sorry for the delay. I checked out the latest master and the issue is back to its original state (no animation, as described in my first post), no matter the value of `shouldAnimateSizeChanges` for the `ASCellNode`s.

I also get this warning in the debugger:
`the behavior of the UICollectionViewFlowLayout is not defined because:
the item height must be less than the height of the UICollectionView minus the section insets top and bottom values, minus the content insets top and bottom values.
The relevant UICollectionViewFlowLayout instance is <ASPagerFlowLayout: 0x13a2c5e70>, and it is attached to <ASCollectionView: 0x137118600; baseClass = UICollectionView; frame = (0 0; 375 603); clipsToBounds = YES; gestureRecognizers = <NSArray: 0x136fd7a90>; layer = <<ASPagerNode: 0x13a2cf450>, layer = <_ASDisplayLayer: 0x13a2790a0>>; contentOffset: {0, 0}; contentSize: {1500, 667}> collection view layout: <ASPagerFlowLayout: 0x13a2c5e70>.
Make a symbolic breakpoint at UICollectionViewFlowLayoutBreakForInvalidSizes to catch this in the debugger.`
",flovouin,Adlai-Holler
1949,2016-08-02 08:06:17,"@Adlai-Holler @maicki Good news, I was able to put together a sample project: https://github.com/flovouin/ASDK-IncorrectViewControllerLayout
It seems to be somewhat related to the navigation bar _not_ being translucent. In my app I also show and hide the navbar, however this is not necessary to observe the unwanted behaviour. This sample project is not a 100% the behaviour I'm observing in my app, but close. In my actual app, there's an unwanted animation at the end of the transition, as mentioned in one of my previous comments. I wasn't able to reproduce this animation, however a glitch during the transition is still present on master.
Please look at the `Podfile` in the repo, which briefly describes the observed behaviour for each version of ASDK (1.9.80, 1.9.81, and master):
- ASDK 1.9.80: The height of the cell is too large (667 vs. 603) and overflows at the top and bottom of the container. The actual cell has the same size as the wrapping `_ASCollectionViewCell`. This results in a layout warning (see my previous comment).
- ASDK 1.9.81: The height of the cell is correct (603), but is shifted up at the end of the transition, which leaves a blank at the bottom of the screen. The wrapping `_ASCollectionViewCell` is larger (identical to 1.9.80). The same warning as before is emitted.
- ASDK 1.9.90: The height of the cell is correct (603), as well as the height of the `_ASCollectionViewCell`. However a blank at the top of the view is visible during the transition. The final layout is correct and no warning is emitted.

You'll also find a screenshot of the view hierarchy for each version.

As always, happy to help with more info if needed!
",flovouin,maicki
1949,2016-08-02 08:06:17,"@Adlai-Holler @maicki Good news, I was able to put together a sample project: https://github.com/flovouin/ASDK-IncorrectViewControllerLayout
It seems to be somewhat related to the navigation bar _not_ being translucent. In my app I also show and hide the navbar, however this is not necessary to observe the unwanted behaviour. This sample project is not a 100% the behaviour I'm observing in my app, but close. In my actual app, there's an unwanted animation at the end of the transition, as mentioned in one of my previous comments. I wasn't able to reproduce this animation, however a glitch during the transition is still present on master.
Please look at the `Podfile` in the repo, which briefly describes the observed behaviour for each version of ASDK (1.9.80, 1.9.81, and master):
- ASDK 1.9.80: The height of the cell is too large (667 vs. 603) and overflows at the top and bottom of the container. The actual cell has the same size as the wrapping `_ASCollectionViewCell`. This results in a layout warning (see my previous comment).
- ASDK 1.9.81: The height of the cell is correct (603), but is shifted up at the end of the transition, which leaves a blank at the bottom of the screen. The wrapping `_ASCollectionViewCell` is larger (identical to 1.9.80). The same warning as before is emitted.
- ASDK 1.9.90: The height of the cell is correct (603), as well as the height of the `_ASCollectionViewCell`. However a blank at the top of the view is visible during the transition. The final layout is correct and no warning is emitted.

You'll also find a screenshot of the view hierarchy for each version.

As always, happy to help with more info if needed!
",flovouin,Adlai-Holler
1949,2016-11-15 21:40:22,"@maicki can you take a look at this?
",garrettmoon,maicki
1949,2016-12-01 17:57:58,"Just merged fix into master, closing for now but can you verify @flovouin ?",garrettmoon,flovouin
1949,2016-12-02 08:24:20,"@garrettmoon The visual glitch is gone (but actually it had already gone when I upgraded to `aefff5`). However I still get the following warning when the pager node first appears:



Unfortunately I won't have time to look into it for the next few days, but I'll keep you posted when I get more info on this.",flovouin,garrettmoon
1949,2016-12-02 15:53:30,@garrettmoon The initial issue should be fixed as @flovouin says. The other issue around `UICollectionViewFlowLayout` is a different issue and we should create a new issue for that.,maicki,garrettmoon
1949,2016-12-02 15:53:30,@garrettmoon The initial issue should be fixed as @flovouin says. The other issue around `UICollectionViewFlowLayout` is a different issue and we should create a new issue for that.,maicki,flovouin
1949,2016-12-09 11:01:39,"@garrettmoon that won't be necessary, for me setting the automaticallyAdjustScrollViewInsets to false resolved the issue. Thanks for the reply :)",stapleup,garrettmoon
1949,2016-12-12 07:45:17,"Thanks, following the updated documentation, I tried setting `self.automaticallyAdjustsScrollViewInsets = NO`, but it didn't remove the warning. And actually, by looking more closely, it looks like the cells were still animated as ""sliding down"" from outside (above) the pager node bounds (but ended up in the correct position). As this was happening during the presentation of the view controller, this wasn't as shocking.

HOWEVER, although my navigation bar is *not* translucent, calling `waitUntilAllUpdatesAreCommitted` during `viewWillAppear` did solve both the unwanted animation and the warning.

So I guess that as far as I'm concerned, the issue is finally solved! 🙂 If that's not how you were expecting it to be solved, tell me and I can run some other tests, but I think that @maicki will be happy to forget about this issue. 😄
Thanks again for the hard work!",flovouin,maicki
1949,2016-12-12 14:28:53,@flovouin Just fyi and sorry I forgot to mention above: this PR needs to be merged so that the warnings will go away as well as the cell's are not animating down: https://github.com/facebook/AsyncDisplayKit/pull/2736,maicki,flovouin
1945,2016-07-19 08:39:40,"Thank you @Adlai-Holler for being interested in this.
- _Do the cells still switch position but no longer animate, or do they just stay where they are until something else happens?_

When I use `performBatchUpdates:completion:` nothing happens,  they stay at their positions. When I use `invalidateLayout` they switch positions but no animation.
- _ Are you using flow layout or a custom layout?_

I use layout that inherits from UICollectionViewFlowLayout and introduces some changes that make cells swap.
- _Could you be more specific on what you do when the gesture recognizer updates? Which layout attributes do you change and how?_

It updates indexPath, hidden attribute and center of cells. This would be hard to describe it all. I will send you project example.
- _Have you tried reverting c62a4d3 ? Does that fix the issue?_

Yes, every commit before this one works fine.
- _Could you try calling invalidateLayout and then [UIView animateWithDuration:^{ [collectionView layoutIfNeeded]; }]?_

When I use this code, animation is different and performance is poor. Cell disappear in one place and shows at another, but what I need it to do is slide from one place to another.
-  _Could you make a sample project that reproduces this?_

Yes, I think that would be the best idea. Please see attachment, especially:
Podfile, 
LSCollectionViewHelper.warpToIndexPath:

[ASDKExample.zip](https://github.com/facebook/AsyncDisplayKit/files/370989/ASDKExample.zip)
",kohol,Adlai-Holler
1940,2016-07-23 12:05:05,"@hannahmbanana : I'm using 1.9.8 version
",cdiscla,hannahmbanana
1938,2016-07-16 22:29:20,"@hannahmbanana this is a nice set of fixes, thank you!  A few are very unlikely to happen, but others are quite legitimately possible with reasonable client code.
",appleguy,hannahmbanana
1937,2016-07-18 22:22:59,"@Adlai-Holler @appleguy  Changes done ready to look over again and merge
",maicki,Adlai-Holler
1934,2016-07-16 18:28:18,"@hannahmbanana : I used AutoLayout in some other parts of the app so those log is not related to the crash. I just tried the latest update and still crashes sometimes.
",tungvoduc,hannahmbanana
1934,2016-07-17 19:06:22,"@hannahmbanana: Okay, now I know what happens.
I have a ASTableNode, before getting data from server, I display 10 placeholder rows from a class (let's call it PlaceholderNode). After getting data from server, I reload ASTableNode and everything is fine now except one thing. The 10 instances of PlaceholderNodeCell are not deallocated. They are only deallocated when I reload ASTableNode the second time. So after the second reload, crash will never happen.

In order to make a crash, I have to first select a different tabbarItem in UITabbarController, and then come back, scroll the tableView, this time deinit from PlaceholderNodeCell will be called and make the crash. Any idea why it is happening?
",tungvoduc,hannahmbanana
1934,2016-07-24 17:41:39,"@Adlai-Holler : Thank you for the detail. I think this is a very good solution. 
",tungvoduc,Adlai-Holler
1930,2016-07-16 22:26:35,"@maicki nice one!
",appleguy,maicki
1929,2016-07-15 16:46:03,"@rcancro LGTM. Can you add a comment why we use the property access explicitly in this case. Thanks!
",maicki,rcancro
1926,2016-07-16 06:26:54,"@maicki http://asyncdisplaykit.org/docs/automatic-layout-examples.html. I find the correct image URL is http://asyncdisplaykit.org/static/images/layout-example-1.png. 
",qiushi0908,maicki
1926,2016-07-16 13:03:42,"@qiushi0908 Awesome, thank you for providing us the URLs! @hannahmbanana will take care and fix this or remove the not used pages.
",maicki,hannahmbanana
1919,2016-07-14 23:18:38,"@rcancro I agree this should already be handled by ASCollectionView =/. When ASCollectionView's bounds change, during the next `-layoutSubviews` it remeasures all nodes in a batch update (which should cause UICollectionView to invalidate the layout). Is that what this PR is intended to do?  Feel free to Slack me if the easiest repro is inside Pinterest.
",Adlai-Holler,rcancro
1917,2016-07-14 17:50:02,"@levi @maicki @Adlai-Holler : this was a fix for an issue with the sign-in node and email account sign up in all iOS 8. I think we need to cherry pick to `releases/p6.7` as well. 
",hannahmbanana,maicki
1913,2016-07-14 05:42:53,"@appleguy 
I need a rounded avatar, and then may add a little flag-icon on it.
The background is single opaque color.
",dssheng,appleguy
1911,2016-07-29 18:09:25,"Thank you @gazreese !
",Adlai-Holler,gazreese
1908,2016-07-13 03:44:38,"@yufenglv: Could you please include a few pieces of additional information? ASDK version? General frequency of this crash in comparison to other crashes in your app? We've seen this crash in the Pinterest app occasionally and have confirmed that it is happening at less than half of the volume after some changes in the most recent release of the framework. However, we have not finished investigating and would appreciate any info you can add to the investigation. 
",hannahmbanana,yufenglv
1908,2016-07-25 19:28:47,"@yufenglv: Thanks for reporting this crash. I'm going to close this issue since we haven't heard back from you, but please reopen this if you are able to provide us with more information.
",hannahmbanana,yufenglv
1908,2016-07-31 09:13:03,"hi,@hannahmbanana, the ASDK version is 1.9.81, the crashes take up 5 percent. It  always crash at this line --  result = [self displayWithParameters:drawParameters isCancelled:isCancelledBlock]; 
fileName:ASDisplayNode+AsyncDisplay.mm   lineNumber:250
This line is getting image for ASImageNode, and crashing when  _ASAsyncTransaction is doing this:       operation._block = nil; (number: 241  fileName:_ASAsyncTransaction.mm)

I think something is wrong when releasing the displayBlock.

![crash1](https://cloud.githubusercontent.com/assets/1837609/17275652/d3f76954-5741-11e6-8f1b-dfc68a9659ea.png)
![crash2](https://cloud.githubusercontent.com/assets/1837609/17275653/d3f8c61e-5741-11e6-923d-6660b872234e.png)
",yufenglv,hannahmbanana
1907,2016-07-15 04:35:27,"@maicki very impressive combination of code simplification **and** performance improvement!  Thank you!
",appleguy,maicki
1906,2016-07-12 21:52:39,"@Adlai-Holler couple of comments but otherwise looks good
",maicki,Adlai-Holler
1906,2016-07-12 22:32:25,"Thanks for the review @maicki! Comments addressed. Could I get one more set of eyes on this @levi ?
",Adlai-Holler,maicki
1905,2016-07-14 12:54:46,"@hannahmbanana thank you!
Cant wait for fix =) 
",stephenkopylov,hannahmbanana
1902,2016-07-12 14:03:32,"@maicki: LGTM. Thanks for fixing this!

For the record, we want to return early only if there is no constrained size available for the coming relayout. The current check for this condition (`[layout hasDirtyLayout]`, or `!_flags.isMeasured` previously) is too strict because it causes a constrained size in a dirty layout to be ignored, even though that size can be reused. @maicki and I agreed that the condition proposed in this PR is a better one.
",nguyenhuy,maicki
1902,2016-07-12 20:07:56,"@maicki : It does work now but not 100%. Sometimes the old bug happens, probability is around 1/20.
",suomalainen9890,maicki
1902,2016-07-12 22:41:39,"@suomalainen9890 We are aware of it that this is not the full fix and @nguyenhuy will look into that probably later today / this week and follow up. Thanks for testing though!
",maicki,nguyenhuy
1898,2016-07-12 08:07:59,"Thanks @maicki - I see how it works - I'm going to see if I can make the library work one more time else I'll go this route. Salud!!
",robmontesinos,maicki
1894,2016-07-12 18:49:22,"@maicki Great points. Addressing…
",Adlai-Holler,maicki
1894,2016-07-14 18:40:17,"@Adlai-Holler: build error looks like something that needs to be fixed on your side
",hannahmbanana,Adlai-Holler
1894,2016-07-19 00:24:23,"Thanks for suggesting those unit tests @levi I uncovered a false positive when reloading items. I'll address it tomorrow.
",Adlai-Holler,levi
1891,2016-07-11 18:50:03,"@lappp9: Thank you for the new content & tweaks to current content! 

I'm in the process of making a few merges of my own, so I'm going to hold off on merging this for a day. 
",hannahmbanana,lappp9
1886,2016-07-12 19:01:35,"@nguyenhuy @levi I addressed both of you comments can you please give it another look

`_applyLayout:` to `_setCalculatedLayout:`: After looking over the `ASDisplayNode` API again we refer the `_layout` most of the time as `calculatedLayout` so it makes sense to actually call it as a setter method

`apply` to `complete`: I see the point of @levi and so let's go with `complete` although maybe `execute` could be a good candidate too. Curious what you guys think? @levi @appleguy 
",maicki,nguyenhuy
1886,2016-07-12 19:01:35,"@nguyenhuy @levi I addressed both of you comments can you please give it another look

`_applyLayout:` to `_setCalculatedLayout:`: After looking over the `ASDisplayNode` API again we refer the `_layout` most of the time as `calculatedLayout` so it makes sense to actually call it as a setter method

`apply` to `complete`: I see the point of @levi and so let's go with `complete` although maybe `execute` could be a good candidate too. Curious what you guys think? @levi @appleguy 
",maicki,levi
1886,2016-07-14 16:44:40,"@maicki +1 for 'execute' unless whats actually happening is there are transitions in flight already and this is completing them, I think executeLayoutTransitions is the most descriptive
",jellenbogen,maicki
1886,2016-07-29 17:52:51,"Time for this one to leave the nest! Thanks @maicki you the man. Thanks everyone else for a great review.
",Adlai-Holler,maicki
1885,2016-07-29 18:16:26,"After discussion with @maicki, closing this for now. May reopen in the future.
",Adlai-Holler,maicki
1882,2016-07-11 00:47:10,"@maicki thanks for your message, i've tried with the two suggestions but the result is still the same, there must something wrong somewhere.
@hannahmbanana thank you, i attach the two files where i have the problem (ASCollectionView and ReusableView), the whole project is too big.
Thanks in advance !

[Archive.zip](https://github.com/facebook/AsyncDisplayKit/files/356285/Archive.zip)
",cdiscla,maicki
1882,2016-07-11 00:47:10,"@maicki thanks for your message, i've tried with the two suggestions but the result is still the same, there must something wrong somewhere.
@hannahmbanana thank you, i attach the two files where i have the problem (ASCollectionView and ReusableView), the whole project is too big.
Thanks in advance !

[Archive.zip](https://github.com/facebook/AsyncDisplayKit/files/356285/Archive.zip)
",cdiscla,hannahmbanana
1882,2016-07-11 01:03:32,"Michael - preferredFrameSize should not be required for right-alignment, correct?

We'll try to take a look at the sample project soon - thanks for sending it!  Join us on Slack if you aren't already, might be faster to coordinate :)

> On Jul 10, 2016, at 5:47 PM, Cris Di Sclafani notifications@github.com wrote:
> 
> @maicki https://github.com/maicki thanks for your message, i've tried with the two suggestions but the result is still the same, there must something wrong somewhere.
> @hannahmbanana https://github.com/hannahmbanana thank you, i attach the two files where i have the problem (ASCollectionView and ReusableView), the whole project is too big.
> Thanks in advance !
> 
> Archive.zip https://github.com/facebook/AsyncDisplayKit/files/356285/Archive.zip
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1882#issuecomment-231621215, or mute the thread https://github.com/notifications/unsubscribe/AAigA_WFkyH3bqREM373PbuUF8_wok_dks5qUZKQgaJpZM4JI8z2.
",appleguy,maicki
1882,2016-07-11 01:03:32,"Michael - preferredFrameSize should not be required for right-alignment, correct?

We'll try to take a look at the sample project soon - thanks for sending it!  Join us on Slack if you aren't already, might be faster to coordinate :)

> On Jul 10, 2016, at 5:47 PM, Cris Di Sclafani notifications@github.com wrote:
> 
> @maicki https://github.com/maicki thanks for your message, i've tried with the two suggestions but the result is still the same, there must something wrong somewhere.
> @hannahmbanana https://github.com/hannahmbanana thank you, i attach the two files where i have the problem (ASCollectionView and ReusableView), the whole project is too big.
> Thanks in advance !
> 
> Archive.zip https://github.com/facebook/AsyncDisplayKit/files/356285/Archive.zip
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1882#issuecomment-231621215, or mute the thread https://github.com/notifications/unsubscribe/AAigA_WFkyH3bqREM373PbuUF8_wok_dks5qUZKQgaJpZM4JI8z2.
",appleguy,hannahmbanana
1882,2016-07-11 01:20:42,"@appleguy  it is necessary to provide a max size for the header stack I guess, as the header stack will shrink to the size of the text node and so you can set it to align right but it does nothing.

@cdiscla After thinking a bit more can you try setting the `sizeRange` of the stack spec to the constrained max and wrap that in a static layout spec?

The `preferredFrameSize` will not work as the text node would stretch to much.

> On Jul 10, 2016, at 6:03 PM, appleguy notifications@github.com wrote:
> 
> Michael - preferredFrameSize should not be required for right-alignment, correct?
> 
> We'll try to take a look at the sample project soon - thanks for sending it! Join us on Slack if you aren't already, might be faster to coordinate :)
> 
> > On Jul 10, 2016, at 5:47 PM, Cris Di Sclafani notifications@github.com wrote:
> > 
> > @maicki https://github.com/maicki thanks for your message, i've tried with the two suggestions but the result is still the same, there must something wrong somewhere.
> > @hannahmbanana https://github.com/hannahmbanana thank you, i attach the two files where i have the problem (ASCollectionView and ReusableView), the whole project is too big.
> > Thanks in advance !
> > 
> > Archive.zip https://github.com/facebook/AsyncDisplayKit/files/356285/Archive.zip
> > —
> > You are receiving this because you are subscribed to this thread.
> > Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1882#issuecomment-231621215, or mute the thread https://github.com/notifications/unsubscribe/AAigA_WFkyH3bqREM373PbuUF8_wok_dks5qUZKQgaJpZM4JI8z2.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",maicki,appleguy
1882,2016-07-11 01:20:42,"@appleguy  it is necessary to provide a max size for the header stack I guess, as the header stack will shrink to the size of the text node and so you can set it to align right but it does nothing.

@cdiscla After thinking a bit more can you try setting the `sizeRange` of the stack spec to the constrained max and wrap that in a static layout spec?

The `preferredFrameSize` will not work as the text node would stretch to much.

> On Jul 10, 2016, at 6:03 PM, appleguy notifications@github.com wrote:
> 
> Michael - preferredFrameSize should not be required for right-alignment, correct?
> 
> We'll try to take a look at the sample project soon - thanks for sending it! Join us on Slack if you aren't already, might be faster to coordinate :)
> 
> > On Jul 10, 2016, at 5:47 PM, Cris Di Sclafani notifications@github.com wrote:
> > 
> > @maicki https://github.com/maicki thanks for your message, i've tried with the two suggestions but the result is still the same, there must something wrong somewhere.
> > @hannahmbanana https://github.com/hannahmbanana thank you, i attach the two files where i have the problem (ASCollectionView and ReusableView), the whole project is too big.
> > Thanks in advance !
> > 
> > Archive.zip https://github.com/facebook/AsyncDisplayKit/files/356285/Archive.zip
> > —
> > You are receiving this because you are subscribed to this thread.
> > Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1882#issuecomment-231621215, or mute the thread https://github.com/notifications/unsubscribe/AAigA_WFkyH3bqREM373PbuUF8_wok_dks5qUZKQgaJpZM4JI8z2.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",maicki,hannahmbanana
1882,2016-07-11 01:20:42,"@appleguy  it is necessary to provide a max size for the header stack I guess, as the header stack will shrink to the size of the text node and so you can set it to align right but it does nothing.

@cdiscla After thinking a bit more can you try setting the `sizeRange` of the stack spec to the constrained max and wrap that in a static layout spec?

The `preferredFrameSize` will not work as the text node would stretch to much.

> On Jul 10, 2016, at 6:03 PM, appleguy notifications@github.com wrote:
> 
> Michael - preferredFrameSize should not be required for right-alignment, correct?
> 
> We'll try to take a look at the sample project soon - thanks for sending it! Join us on Slack if you aren't already, might be faster to coordinate :)
> 
> > On Jul 10, 2016, at 5:47 PM, Cris Di Sclafani notifications@github.com wrote:
> > 
> > @maicki https://github.com/maicki thanks for your message, i've tried with the two suggestions but the result is still the same, there must something wrong somewhere.
> > @hannahmbanana https://github.com/hannahmbanana thank you, i attach the two files where i have the problem (ASCollectionView and ReusableView), the whole project is too big.
> > Thanks in advance !
> > 
> > Archive.zip https://github.com/facebook/AsyncDisplayKit/files/356285/Archive.zip
> > —
> > You are receiving this because you are subscribed to this thread.
> > Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1882#issuecomment-231621215, or mute the thread https://github.com/notifications/unsubscribe/AAigA_WFkyH3bqREM373PbuUF8_wok_dks5qUZKQgaJpZM4JI8z2.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",maicki,maicki
1882,2016-07-12 05:44:08,"Great @maicki , it runs fine !
Thank you very much, guys!
",cdiscla,maicki
1877,2016-07-10 05:08:26,"@hannahmbanana thank you for doing this!  There is a lot of careful stuff here, and this is a very important change that I didn't have time for tonight.
",appleguy,hannahmbanana
1873,2016-07-10 04:02:13,"@eanagel this will be fixed by https://github.com/facebook/AsyncDisplayKit/pull/1877/files
",appleguy,eanagel
1873,2016-07-10 07:05:48,"@eanagel: Could you try out master and let us know if you hit any more deadlocks?
",hannahmbanana,eanagel
1869,2016-07-08 19:10:42,"@Adlai-Holler: Might want to check the internal build, looks like it might take some time on Travis. 
",hannahmbanana,Adlai-Holler
1869,2016-07-08 19:16:36,"@Adlai-Holler: For some reason this didn't trigger an internal build anyways. :) Following up with Kosta to figure out why. 
",hannahmbanana,Adlai-Holler
1869,2016-07-08 22:45:02,"@Adlai-Holler: looking forward to monday... :)
",hannahmbanana,Adlai-Holler
1868,2016-07-10 04:31:43,"@appleguy `self.header` contains an `UISearchBar`. And there was a custom variable for `UISearchBarDelegate`. And the variable was strong (without `weak` prefix). I have removed this `UISearchBarDelegate` variable and now I set `UISearchBar` delegate directly.



I hope I use a word `variable` correctly in this context (:

Well, I really hope @levi will fix it some day. I will inform my team about such weird behaviour and we will move firther (:
",iwheelbuy,appleguy
1867,2016-07-08 19:06:42,"@maicki Under Xcode 8 Beta 1, this still fails to build for me. @appleguy I thought you already removed this code somewhere, right?

![screen shot 2016-07-08 at 12 06 10 pm](https://cloud.githubusercontent.com/assets/2466893/16698688/6bc0b98e-4504-11e6-9ef3-7f64cb2116dd.png)
",Adlai-Holler,maicki
1867,2016-07-08 19:15:04,"It should be removed in master

> On Jul 8, 2016, at 12:06 PM, Adlai Holler notifications@github.com wrote:
> 
> @maicki https://github.com/maicki Under Xcode 8 Beta 1, this still fails to build for me. @appleguy https://github.com/appleguy I thought you already removed this code somewhere, right?
> 
>  https://cloud.githubusercontent.com/assets/2466893/16698688/6bc0b98e-4504-11e6-9ef3-7f64cb2116dd.png
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1867#issuecomment-231446444, or mute the thread https://github.com/notifications/unsubscribe/AAigAxrxwFbElh_fn0zHDmd8tRAGSlAgks5qTp_FgaJpZM4JIP_Z.
",appleguy,maicki
1867,2016-07-08 19:17:29,"It doesn't seem to be removed on master but I wasn't on Michael's branch when I saw that issue. Oops. This lgtm @maicki 
",Adlai-Holler,maicki
1866,2016-07-08 18:46:57,"@maxsz: Are you a part of our AsyncDisplayKit Slack group (#1582)? 

The #asvideonode channel is pretty active with discussion between developers who use ASVideoNode/PlayerNode. That's probably the best place to ask. 
",hannahmbanana,maxsz
1866,2016-08-14 21:47:56,"Thanks for contributing to the ASDK community with your PR @maxsz!
",hannahmbanana,maxsz
1865,2016-07-08 10:23:55,"@appleguy : Thanks! Does it mean that I need to use this in the Podfile?
pod 'AsyncDisplayKit', :git => 'https://github.com/facebook/AsyncDisplayKit.git', :commit => '9d1e669'

I have never tried to do similar thing before.
",suomalainen9890,appleguy
1865,2016-07-09 12:08:44,"@maicki : thanks! I will try.
",suomalainen9890,maicki
1865,2016-07-11 07:37:41,"@maicki @appleguy : This is sample project, less than 100 lines of code. I could be doing something wrong here. Please take a look: https://github.com/tungvoduc/ADKBugTest
",suomalainen9890,appleguy
1865,2016-07-11 07:37:41,"@maicki @appleguy : This is sample project, less than 100 lines of code. I could be doing something wrong here. Please take a look: https://github.com/tungvoduc/ADKBugTest
",suomalainen9890,maicki
1864,2016-07-08 05:23:28,"@nguyenhuy thanks!!
",appleguy,nguyenhuy
1864,2016-07-08 14:55:04,"@nguyenhuy LGTM

Other thinking around that is, any opinion about looking into finding a way to not align on `NSNotifications` anymore at all and remove the `NSNotificationCenter` overhead?
",maicki,nguyenhuy
1864,2016-07-09 05:19:28,"@Adlai-Holler Thanks!

@maicki: Will keep thinking about it. 
",nguyenhuy,maicki
1864,2016-07-09 05:19:28,"@Adlai-Holler Thanks!

@maicki: Will keep thinking about it. 
",nguyenhuy,Adlai-Holler
1863,2016-07-08 05:02:50,"@nickvelloff is also an interested reviewer!  Thanks @maicki :)
",appleguy,maicki
1863,2016-07-09 00:16:05,"@maicki  Please ping me if there is anything I can do to help. Happy to verify fix against my use case when you are ready. 
",nickvelloff,maicki
1863,2016-07-09 02:20:01,"@nickvelloff Would be awesome if you could point your ASDK entry in your pod file to my fork and the branch with the fix and try it out on your side:

`pod 'AsyncDisplayKit', :git => 'https://github.com/maicki/AsyncDisplayKit.git', :branch => 'MSFixTextNodeTruncation'`

Please let me know if this would resolve your issue.
",maicki,nickvelloff
1863,2016-07-09 02:49:44,"@maicki Unfortunately this did not resolve my issue.

The example i'm using is https://github.com/the-grid/TruncationBug-AsyncDisplayKitPlayground

It's a playground so updates or changes can be very quickly tested. It's updated to point to your branch.

Thanks a lot. Let me know if there is anything else you would like me to try. 
",nickvelloff,maicki
1863,2016-07-09 03:24:45,"@nickvelloff Just tried your example and it worked as expected. No truncation anymore if you scroll down after zooming. Worth checking out a fresh copy of your example and pod update as well as build ASDK from fresh before trying out the playground.

Furthermore I moved your playground example to a real project as it's not possible to debug within playgrounds so I had to create a project for it. I attached it to this comment. Just extract and run it.

[TruncationBug.zip](https://github.com/facebook/AsyncDisplayKit/files/355381/TruncationBug.zip)
",maicki,nickvelloff
1863,2016-07-09 03:45:52,"@maicki I cleared derived data, and it worked perfectly. Can no longer reproduce. 
Also, I can't reproduce with the project you attached.

So for me this completely resolves the issue. Thanks for resolving!
",nickvelloff,maicki
1863,2016-07-10 06:56:56,"@maicki @nickvelloff I had to revert this change on master; details are in an email.  There is a performance impact of this change and a possible thread safety issue (unit tests trigger the thread safety crash on my machine, but it is very timing sensitive because some debug options make it not happen, so it may not occur on your machine).

@nickvelloff feel free to continue pointing at the master commit that has the change as it is probably the better option for your app, until we get it re-landed next week after some analysis.
",appleguy,maicki
1863,2016-07-10 06:56:56,"@maicki @nickvelloff I had to revert this change on master; details are in an email.  There is a performance impact of this change and a possible thread safety issue (unit tests trigger the thread safety crash on my machine, but it is very timing sensitive because some debug options make it not happen, so it may not occur on your machine).

@nickvelloff feel free to continue pointing at the master commit that has the change as it is probably the better option for your app, until we get it re-landed next week after some analysis.
",appleguy,nickvelloff
1863,2016-07-10 07:43:57,"@appleguy Thanks for the heads up. Do let me know if there is any way I can assist. 
",nickvelloff,appleguy
1857,2016-07-08 18:14:26,"@maicki yeah, that's the best solution currently. It might be a good idea to add animated image to the delegate in the future.
",garrettmoon,maicki
1855,2016-07-08 22:38:17,"@nickvelloff Hey I'm glad to help with this! It should be possible to achieve this using only the collection view layout API, without manually setting frames or using the layout transition API.

Would you be willing to upload some sample code so I can see the transition layout you're using etc? 
",Adlai-Holler,nickvelloff
1855,2016-07-08 22:58:41,"@Adlai-Holler Wonderful!
This was created to demonstrate an ASTextNode bug, but has exactly what we need to discuss this as well.
https://github.com/the-grid/TruncationBug-AsyncDisplayKitPlayground
1. The best way to demonstrate this run the playground, press the zoom button.
2. Comment out the hacky way I force the nodes to size during transition: https://github.com/the-grid/TruncationBug-AsyncDisplayKitPlayground/blob/master/Reproduce.playground/Contents.swift#L26-L37
3. zoom again to see the default behavior.

Thanks!!
",nickvelloff,Adlai-Holler
1855,2016-07-08 23:03:59,"@Adlai-Holler Just for a little more info:
That example is just a snapshot of many different approaches/attempts to size the cells. The _actual_ implementation of this uses the pinch gesture, but that is unrelated to the issue so left out of the example. 
That said, pinch gesture events are super _hot_, so it really thrashes to keep up in anything I have tried.
",nickvelloff,Adlai-Holler
1855,2017-02-09 22:05:26,"@nickvelloff If this is still an issue, do you mind converting to Swift 3? Sorry we didn't get to this, we're trying to be better about not dropping issues.",garrettmoon,nickvelloff
1855,2017-02-09 22:18:34,"@garrettmoon Hi. We moved away from the pinch/zoom as it was just not supported well and we are 100% on the ASDK stack with this version of our app. Some time down the road this kind of support would be nice, and I am happy to help if you guys decided to make it a priority. 
",nickvelloff,garrettmoon
1855,2017-02-09 22:19:42,Thanks @nickvelloff !,garrettmoon,nickvelloff
1853,2016-07-06 20:56:47,"@Adlai-Holler looks great, thanks!
",appleguy,Adlai-Holler
1852,2016-07-09 23:00:45,"Thanks @gazreese for all your contributions!
",appleguy,gazreese
1850,2016-07-06 04:07:51,"Nice GIF!  Thanks @lappp9 :)
",appleguy,lappp9
1849,2016-07-06 20:33:24,"@garrettmoon Is `imageWithContentsOfFile:` thread safe? `imageWithData:` is not until iOS 10: https://pspdfkit.com/blog/2016/investigating-thread-saftey-of-UIImage/
",maicki,garrettmoon
1849,2016-07-06 20:52:05,"Yes, by my knowledge imageWithContentsOfFile: has been threadsafe for a long time, even though imageNamed: has not been.

> On Jul 6, 2016, at 1:33 PM, Michael Schneider notifications@github.com wrote:
> 
> @garrettmoon https://github.com/garrettmoon Is imageWithContentsOfFile: thread safe? imageWithData: is not until iOS 10: https://pspdfkit.com/blog/2016/investigating-thread-saftey-of-UIImage/ https://pspdfkit.com/blog/2016/investigating-thread-saftey-of-UIImage/
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1849#issuecomment-230897508, or mute the thread https://github.com/notifications/unsubscribe/AAigA9T66M9b9_-vU-2ksiq1QMZmfNTKks5qTBEXgaJpZM4JFHws.
",appleguy,garrettmoon
1849,2016-07-06 21:11:43,"@maicki Hmm, I would guess imageWithContentsOfFile would have the same issues described in that blog post. It sounds like there may be an OS bug. Every image framework I know of relies on creating images on background threads :/
",garrettmoon,maicki
1849,2016-07-09 17:31:25,"@Adlai-Holler @appleguy @garrettmoon That PR looks good to me, ready to merge?

We should open a new issue in case if we want to look into refactoring `_lazilyLoadImageIfNecessary` though, but I think the initial issue would be resolved.
",maicki,garrettmoon
1849,2016-07-09 17:31:25,"@Adlai-Holler @appleguy @garrettmoon That PR looks good to me, ready to merge?

We should open a new issue in case if we want to look into refactoring `_lazilyLoadImageIfNecessary` though, but I think the initial issue would be resolved.
",maicki,appleguy
1849,2016-07-10 04:18:07,"@flovouin thanks for the clearly-written explanation, and the PR submittal - this will be in the 1.9.81 release going out shortly!
",appleguy,flovouin
1847,2016-07-08 22:45:14,"Ahhh much better! Thanks @gazreese!
",Adlai-Holler,gazreese
1846,2016-07-05 05:39:28,"Thank you @lappp9!!!
",hannahmbanana,lappp9
1844,2016-07-06 16:34:23,"@appleguy After the measurement pass would finish do we do a layout again? If we just bail would the node end in an unmeasured state?

Added a task to audit code for zero size measurement to Ship.
",maicki,appleguy
1844,2016-07-08 23:06:26,"@appleguy Can you please rebase with master as we addressed the CoreText property with a merge for Xcode 8.0 beta 2 fixes.
",maicki,appleguy
1842,2016-07-04 02:40:52,"@maicki  Thanks you~ 
 I have overrided the `func calculateSizeThatFits(constrainedSize: CGSize)` method in my demo.
It really worked with text like _""text + \n  + text""_. But doesn't work with text like _""text + \n""_. I think it should be like _""text + \n + text""_.
",eggswift,maicki
1841,2016-07-04 04:53:18,"@nickvelloff Great report!  Would you be able to modify one of our examples, or make a new one, that generates this behavior?  It might be as simple as calling measure: at one size, having that display, and after a timer (or a tap) having it measure at another size.  You may be able to use the Kittens app by setting the cells to a fixed height and changing the text, as tapping the cells makes the image take up more of the cell.

I can see why this would happen for items outside of any preload ranges - but it certainly shouldn't happen at all, and indeed is probably a missing invalidateCalculatedLayout somewhere.  Should not be that hard to fix.

What framework version?  We have some changes to ASTextNode in master, although I don't think they will fix this.
",appleguy,nickvelloff
1841,2016-07-04 05:08:30,"@appleguy I'm working on an example to reproduce with the lease amount of unrelated factors. I've pretty much sticking to `master` during heavy development. 
I'll post a link to the example here shortly.
Thanks for looking into this!
",nickvelloff,appleguy
1841,2016-07-04 08:14:39,"@appleguy I did everything I could to boil this down to something easily reproducible. Alas, it took a lot more to build the environment necessary than I had hoped. 

The issue is there are currently a lot of customizations required to get ASCollectionNode/View to transition from one layout to another (animated). Once a constrained size is received for a node, it _never asks again_. That is unless I do all the things I do to force it to transition, hence all the custom code you'll see.

My new approach to test and learn is taking advantage of Playgrounds. So I went ahead and did the example that way, in hopes of it being easier to debug. Curious as to your thoughts on it.

https://github.com/the-grid/TruncationBug-AsyncDisplayKitPlayground
",nickvelloff,appleguy
1841,2016-07-04 10:05:46,"@appleguy Also you asked if this is a regression. Unfortunately I can't say, because I noticed it in a completely new app design approach, which is full stack ASDK using `ASLayoutSpec`. 
I can say however that using ASTextNode in a far less efficient manner as part of the UIKit view hierarchy did not exhibit this behavior. But that's not super useful as a comparison. 
",nickvelloff,appleguy
1839,2016-07-04 17:16:21,"@Adlai-Holler Theoretically this can happen, in fact this can already happen with the current implementation too. So in this nothing will change. I don't know at the moment a good way to fix that, but we definitely should consider it in the broader refactoring around layout transitions that I'm working on.

@levi Addressed your comments

@levi @appleguy @Adlai-Holler Can I get another look on it. Thanks!
",maicki,Adlai-Holler
1836,2016-07-01 02:36:58,"Thanks @lappp9!
",appleguy,lappp9
1834,2016-07-01 23:10:40,"@garrettmoon Added a pending state in ASCollectionNode and ASTableNode for the range mode

cc @Adlai-Holler @appleguy
",maicki,garrettmoon
1831,2016-07-01 02:45:27,"@rcancro thanks for making this so efficient :)
",appleguy,rcancro
1830,2016-07-02 15:38:27,"@maicki Once the assertion is flipped, this is ready to 🚢 
",Adlai-Holler,maicki
1830,2016-07-02 17:18:43,"@Adlai-Holler Ready to roll 🚗
",maicki,Adlai-Holler
1829,2016-06-30 04:20:59,"Thanks @hannahmbanana . I will find other ways. :(
",alan2080,hannahmbanana
1829,2016-07-05 18:22:14,"It should be possible to use decoration views with ASCollectionView the same way they're used with UICollectionView: by registering a nib or a class with the collection view and having your layout override -layoutAttributesForElementsInRect: and return some layout attributes for those decoration views.

@alan2080 Could you upload that sample project so we can test it out? cc @hannahmbanana 
",Adlai-Holler,hannahmbanana
1829,2016-07-06 04:51:52,"@Adlai-Holler - are you sure we don't intercept any calls that are required to provide the decoration view?  If not, we probably should; unfortunately the ""data space"" doesn't match between the calls that UICollectionView would provide and what ASCollectionView does, so it would not always be safe to interpret the requested indexPath if it comes directly from UICV.

> On Jul 5, 2016, at 11:22 AM, Adlai Holler notifications@github.com wrote:
> 
> It should be possible to use decoration views with ASCollectionView the same way they're used with UICollectionView: by registering a nib or a class with the collection view and having your layout override -layoutAttributesForElementsInRect: and return some layout attributes for those decoration views.
> 
> @alan2080 https://github.com/alan2080 Could you upload that sample project so we can test it out? cc @hannahmbanana https://github.com/hannahmbanana
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1829#issuecomment-230560259, or mute the thread https://github.com/notifications/unsubscribe/AAigA50gWeLnJ-hCc0OtjsUdiKxpPorzks5qSqDYgaJpZM4JA2Cs.
",appleguy,hannahmbanana
1829,2016-07-06 04:51:52,"@Adlai-Holler - are you sure we don't intercept any calls that are required to provide the decoration view?  If not, we probably should; unfortunately the ""data space"" doesn't match between the calls that UICollectionView would provide and what ASCollectionView does, so it would not always be safe to interpret the requested indexPath if it comes directly from UICV.

> On Jul 5, 2016, at 11:22 AM, Adlai Holler notifications@github.com wrote:
> 
> It should be possible to use decoration views with ASCollectionView the same way they're used with UICollectionView: by registering a nib or a class with the collection view and having your layout override -layoutAttributesForElementsInRect: and return some layout attributes for those decoration views.
> 
> @alan2080 https://github.com/alan2080 Could you upload that sample project so we can test it out? cc @hannahmbanana https://github.com/hannahmbanana
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1829#issuecomment-230560259, or mute the thread https://github.com/notifications/unsubscribe/AAigA50gWeLnJ-hCc0OtjsUdiKxpPorzks5qSqDYgaJpZM4JA2Cs.
",appleguy,Adlai-Holler
1829,2016-07-06 15:18:57,"@appleguy Hmm we don't intercept any decoration view calls but we do assert that the layout never returns attributes for them.

I don't believe this is necessary – decoration views are very intentionally walled off from the data source i.e. the presence or absence of decoration views is only determined by the layout based on what items the collection view reports exist.  There's no point at which the user's layout object (the only object that involved with decoration views) would need to interpret an index path from the collection view against the data source in an unsafe way.  It would be safe if the layout simply registers nibs/classes for decoration views and returns layout attributes for them in layoutAttributesForElementsInRect:.

There's not a method like `collectionView:viewForDecorationElementOfKind:atIndexPath:`. Nobody, not even the layout, is intended to bind decoration views to the data source. 
",Adlai-Holler,appleguy
1829,2016-07-07 06:26:17,"OK, very cool!  If they’re that separate, it seems like a rare case that we can let them through :)

> On Jul 6, 2016, at 8:19 AM, Adlai Holler notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy Hmm we don't intercept any decoration view calls but we do assert that the layout never returns attributes for them.
> 
> I don't believe this is necessary – decoration views are very intentionally walled off from the data source i.e. the presence or absence of decoration views is only determined by the layout based on what items the collection view reports exist. There's no point at which the user's layout object (the only object that involved with decoration views) would need to interpret an index path from the collection view against the data source in an unsafe way. It would be safe if the layout simply registers nibs/classes for decoration views and returns layout attributes for them in layoutAttributesForElementsInRect:.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1829#issuecomment-230805065, or mute the thread https://github.com/notifications/unsubscribe/AAigA-X2equImXQXZH4dgQ2dBczw4Iccks5qS8dogaJpZM4JA2Cs.
",appleguy,appleguy
1826,2016-06-29 06:44:28,"@hannahmbanana: latest checkout 1812 from yesterday (28.07.), Previously it worked fine without any problems.

**Reverted** the changes from @Adlai-Holler **#1812** and everything is working fine again. 
",CR34L,hannahmbanana
1826,2016-06-30 11:03:30,"@Adlai-Holler: Got some news...

SwiftIssueDemo.zip - unpack, changed pod stuff to local framework copy, imported ""AsyncDisplayKit.xcodeproj"", embedded binaries setup, run on fresh cleaned Simulator Device (Reset Settings) and:

2016-06-30 12:58:40.919 SwiftIssueDemo[62253:52096394] -[_NSCachedIndexSet as_indexesByMapping:]: unrecognized selector sent to instance 0x7f8b13e22620
2016-06-30 12:58:40.935 SwiftIssueDemo[62253:52096394] **\* Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[_NSCachedIndexSet as_indexesByMapping:]: unrecognized selector sent to instance 0x7f8b13e22620'

Same issue. 

Checked for the File: NSIndexSet+ASHelpers.m found in /Details/
",CR34L,Adlai-Holler
1826,2016-06-30 12:43:46,"@Adlai-Holler: Found the solution.

--> AsyncDisplayKit.xcodeproj --> AsyncDisplayKit-iOS --> Build Phases --> Compile Sources (115 items) --> NSIndexSet+ASHelpers.m was **missing** there.

Manually added and cleaned and compiled again. AsyncDisplayKit is working now as expected. 

![screen shot 2016-06-30 at 14 40 31](https://cloud.githubusercontent.com/assets/3614596/16488419/bb3b2506-3ed0-11e6-9895-3cb91147675a.png)
",CR34L,Adlai-Holler
1826,2016-06-30 16:18:10,"@Adlai-Holler: Tried without luck. Have you put the missing file into Project Settings --> AsyncDisplayKit-iOS Framework Target --> Compile Sources and select the NSIndexSet+ASHelpers.m File? 

In my latest checkout I could not find such an entry.
",CR34L,Adlai-Holler
1826,2016-07-13 10:14:49,"@Adlai-Holler : thx for fixing. Ready to close.
",CR34L,Adlai-Holler
1823,2016-07-01 21:20:08,"@Adlai-Holler Ok cool seems good
",maicki,Adlai-Holler
1822,2016-07-10 04:29:38,"@tomizimobile this seems interesting - I don't quite understand it in detail, though.  Could you add some additional comments, even just a description walkthrough here?

Does this handle cases where the network node loads fully, but then its URL is set to nil, and it needs to revert to the defaultImage?  There are many such paths...
",appleguy,tomizimobile
1822,2016-07-11 20:36:06,"@appleguy A walkthrough: as mentioned in the original issue, the layer's `contentsGravity` is set to resize if an image is stretchable, and at no other point is it set to the desired `contentMode`. This code checks if the `defaultImage` is stretchable when set, and if so, will track changes in the `contentMode`. The `_pendingContentModeState` is also set at that time to the current `contentMode` in case it was set before `defaultImage` was. Then, in `-setImage:`, if the image isn't the defaultImage, it'll set the `contentMode` to the pending state first. My flag `_needsToApplyPendingContentMode` ensures the comparison of the image to the `defaultImage` and setting `contentMode` are only done when necessary.

I hadn't considered any case where the image is set to the `defaultImage` after the node loads. I'm pretty sure I'll need to make some changes - I'll take a closer look at it and add some comments in the source when I have a chance.
",tomizimobile,appleguy
1822,2016-07-13 20:58:42,"@appleguy I reworked the code a bit, but it doesn't seem to work well with animated images. I have a test project that I was using to test this with that is very basic - just showing an ASNetworkImageNode with a test image url - but animated images only seem to work correctly a small portion of the time (or if there's a delay in setting the url). I can't track down exactly why but maybe someone else can give it a look?
",tomizimobile,appleguy
1822,2016-08-15 02:33:44,"@tomizimobile: could you share your test project? thanks!
",hannahmbanana,tomizimobile
1822,2016-08-15 12:45:14,"@hannahmbanana Here's my test project - I've defined `pngURL` and `gifURL` for testing with, and you can see where I set the image URL at line 86 of PostViewController.swift.

[asdk-issue-1822.zip](https://github.com/facebook/AsyncDisplayKit/files/418046/asdk-issue-1822.zip)
",tomizimobile,hannahmbanana
1822,2016-11-21 15:51:03,"Hey @tomizimobile, could you please rebase your current branch on top of master so the CI can pass? That would be awesome, Thanks!",maicki,tomizimobile
1822,2016-11-21 19:12:26,"@maicki I've updated the code - I'm still seeing an issue with animated images though. Not sure what I'm missing with those, maybe someone else has input on that.",tomizimobile,maicki
1822,2016-11-21 21:28:07,@tomizimobile Thanks for updating! Can we see it in your sample project you attached?,maicki,tomizimobile
1822,2016-11-21 21:31:44,"@maicki whoops, forgot to attach a modified project, it's been updated for Swift 3 and new layout APIs. You can see lines 87-89 of PostViewController.swift show where i set the URL. With the example gif, you can see it almost always gets stretched still, although curiously doesn't if a delay is applied. The fix seems ok for normal images though.

[asdk-issue-1822.zip](https://github.com/facebook/AsyncDisplayKit/files/604820/asdk-issue-1822.zip)
",tomizimobile,maicki
1822,2017-02-09 19:26:18,@tomizimobile If you would be willing to get the project building again I promise I'll actually take a look at this (ASDK in the podfile is currently pointing to a repo on your desktop and it doesn't build when pointed at your personal master).,garrettmoon,tomizimobile
1822,2017-02-09 20:38:01,"@garrettmoon hmmm, that project worked fine for me when pointed at my master. Regardless, I've updated the project and merged my master with the current master, and it seems to be working as expected on the first run. For some reason though, now it doesn't want to load the gif at all on subsequent runs - don't really have the time at the moment to dig into it further to see if it's something I've added or a different bug, but here's the project: [asdk-issue-1822.zip](https://github.com/facebook/AsyncDisplayKit/files/764913/asdk-issue-1822.zip)
",tomizimobile,garrettmoon
1822,2017-02-09 21:53:15,@tomizimobile GIFs are actually broken in ASDK at the moment :( But fixed if you point to PINRemoteImage master.,garrettmoon,tomizimobile
1822,2017-03-02 00:34:27,"Hey @tomizimobile we're going to close this for now as it's getting stale, but we'll gladly re-open if you address comments and rebase. Thanks for putting this up!",garrettmoon,tomizimobile
1820,2016-07-06 05:27:26,"@gazreese thanks for fixing this.  @Adlai-Holler this is my fault, a vestige of prior attempts to move logic into ASCollection/TableNode instead of it living in the Views, so that we could create a shared superclass like ASRangeNode.  Soon after, it was discovered that my tactics to break the retain cycle when a directly-allocated ASCollectionView instance made its own ASCollectionNode did not work correctly, and so some of this was backpedalled.  I recall being quite careful about this, but clearly missed a key area.

Could someone check ASTableView too?
",appleguy,gazreese
1820,2016-07-06 05:27:26,"@gazreese thanks for fixing this.  @Adlai-Holler this is my fault, a vestige of prior attempts to move logic into ASCollection/TableNode instead of it living in the Views, so that we could create a shared superclass like ASRangeNode.  Soon after, it was discovered that my tactics to break the retain cycle when a directly-allocated ASCollectionView instance made its own ASCollectionNode did not work correctly, and so some of this was backpedalled.  I recall being quite careful about this, but clearly missed a key area.

Could someone check ASTableView too?
",appleguy,Adlai-Holler
1820,2016-07-06 13:07:48,"@appleguy @Adlai-Holler `ASTableView` looks fine, but we use the layout controller to set the tuning parameters in there what I think we should do in `ASCollectionView` too instead of the range controller
",maicki,appleguy
1820,2016-07-06 13:07:48,"@appleguy @Adlai-Holler `ASTableView` looks fine, but we use the layout controller to set the tuning parameters in there what I think we should do in `ASCollectionView` too instead of the range controller
",maicki,Adlai-Holler
1816,2016-07-01 22:24:51,"@hannahmbanana Could you rebase and update this when you get a mo?
",Adlai-Holler,hannahmbanana
1816,2016-07-06 01:41:06,"@Adlai-Holler @maicki @appleguy: rebased & ready for review again
",hannahmbanana,Adlai-Holler
1816,2016-07-07 06:24:27,"@maicki @Adlai-Holler @appleguy: I addressed @appleguy's latest comments. I think this is ready to be merged.   
",hannahmbanana,Adlai-Holler
1815,2016-06-27 17:24:15,"@appleguy I think this would be safe to expose, since that entire header is wrapped in `#if PIN_REMOTE_IMAGE` so nothing will be compiled unless they're using it. I've confirmed that the behavior is correct in Swift after making the change @peymayesh suggested.

@peymayesh I've linked a PR that publicizes that header. Is it a winner?
",Adlai-Holler,appleguy
1815,2016-06-27 17:26:26,"@Adlai-Holler What if other projects have PINRemoteImage as an explicit dependency? Will it clash somehow?
",maicki,Adlai-Holler
1814,2016-07-08 20:25:51,"@appleguy @Adlai-Holler Any thoughts on merging that?
",maicki,Adlai-Holler
1813,2016-06-24 23:42:23,"@maicki This looks great to me!
",appleguy,maicki
1811,2016-07-03 23:53:16,"@hannahmbanana Thanks for working on this!  Could you add 1 or 2 shorter variants with fewer options, which just internally call the longer one, so they are more convenient to use?

I think we should just keep the explicit arguments because it's a bit less convenient to initialize a separate object to use as the options, even though it simplifies the API surface.
",appleguy,hannahmbanana
1811,2016-07-04 23:34:13,"@hannahmbanana looks great!  Excited to have this in.  It's perfect for folks to use in -placeholderImage, -defaultImage, etc.
",appleguy,hannahmbanana
1810,2016-06-25 07:01:45,"@stephenkopylov: @maicki posted a PR for your issue! Could you try it out and let him know if it works? 
",hannahmbanana,maicki
1810,2016-06-25 11:08:56,"@hannahmbanana 
Big thanks to @maicki! Now it works absolutely perfect!
And it would be nice to push this fix to cocoapods... how long it can takes? =)
",stephenkopylov,maicki
1810,2016-06-25 11:08:56,"@hannahmbanana 
Big thanks to @maicki! Now it works absolutely perfect!
And it would be nice to push this fix to cocoapods... how long it can takes? =)
",stephenkopylov,hannahmbanana
1809,2016-06-24 23:52:09,"@hannahmbanana I took a very detailed review pass here.  It's quite good, thanks for the extensive tests!
",appleguy,hannahmbanana
1806,2016-06-24 00:36:33,"@maicki Don't we want the inset to be applied before the static size? So that the final size matches the preferred size?
",Adlai-Holler,maicki
1805,2016-07-10 04:30:43,"@Adlai-Holler this is an interesting approach...perhaps best reviewed in person with a team meeting?
",appleguy,Adlai-Holler
1805,2016-07-11 15:46:29,"@appleguy I agree. Maybe during today's sync-up
",Adlai-Holler,appleguy
1805,2016-07-19 21:46:51,"@Adlai-Holler I sure would like something to relive me from the temporary variables you end up when creating layouts and I do like this approach. The square braces get out of hand with fluent-style interfaces in ObjC, though. There is a hack I've seen using properties that return blocks to handle this. Take a look at this project and see if it inspires you: https://github.com/VerbalExpressions/ObjectiveCVerbalExpressions

Of course this all looks beautiful without the trickery in Swift ;)
",eanagel,Adlai-Holler
1803,2016-07-04 21:48:28,"@hannahmbanana Thanks!  This is pretty clean.  Certainly more we can do to upgrade it over time, but I'm glad we have this project in as a base to continue improving test coverage (and even during-development example app suites) for ASTextNode.  Later, we should add examples from multiple writing scripts, etc.
",appleguy,hannahmbanana
1802,2016-06-23 03:44:27,"I got eaten by a grue! Thanks a lot, Travis.



Looks like this is happening on #1803 as well. Carthaaaaaaaaaaaaaage! @hannahmbanana 
",Adlai-Holler,hannahmbanana
1801,2016-06-22 22:16:56,"@lappp9: Thanks! I believe someone was asking about this on Slack last night. :)
",hannahmbanana,lappp9
1800,2016-06-22 23:51:56,"@flovouin thank you, both for the awesome new features and your detailed write up! Having the test project is very helpful.

These features are fairly advanced, in the sense that most users will not need them. I think it is a good idea to support them, but we might want to look at any small ways that we can help stratify the API of these classes to help ensure that new readers are not overwhelmed by the length of the file. This could be as simple as grouping more advanced features in part of the header file, using a category, or perhaps we don't need to worry about this for right now.

@yunnanwu, @maicki, @binl, 
",appleguy,flovouin
1800,2016-06-23 16:04:25,"Thanks for your reply @appleguy !
Yes I agree, these properties won't be used by most users, and they shouldn't confuse someone who just wants to play a simple video. Good thing is, the default behaviour of the `ASVideoNode` stays the same if you simply ignore these properties.
As these properties are present in `AVPlayerItem`, I think simply moving them down the header file should be enough, as someone who explored the extended capabilities of the `AVPlayerItem` (i.e. scrolled down the header file haha) should have come across them anyway. However I don't have any strong opinion on the subject, so whatever you think is best is totally fine by me.
",flovouin,appleguy
1800,2016-06-24 09:14:03,"We should get this in soon.  Can anyone review?

Sent from my iPhone

> On Jun 23, 2016, at 9:04 AM, Flo notifications@github.com wrote:
> 
> Thanks for your reply @appleguy !
> Yes I agree, these properties won't be used by most users, and they shouldn't confuse someone who just wants to play a simple video. Good thing is, the default behaviour of the ASVideoNode stays the same if you simply ignore these properties.
> As these properties are present in AVPlayerItem, I think simply moving them down the header file should be enough, as someone who explored the extended capabilities of the AVPlayerItem (i.e. scrolled down the header file haha) should have come across them anyway. However I don't have any strong opinion on the subject, so whatever you think is best is totally fine by me.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",appleguy,appleguy
1800,2016-06-24 09:14:12,"@flovouin thanks for using and helping improve ASVideoNode! The test project looks great!

I agree with @appleguy here that these advanced features aren't very applicable to most of the users of this module. However, the fact that you needed to add properties to ASVideoNode to achieve what you are trying to do here is also concerning, I think reconsider how ASVideoNode should serve people or provide other Media Player modules that are less coupled with AVPlayer and AVPlayerItem could be helpful to you.
",binl,appleguy
1800,2016-06-24 09:14:12,"@flovouin thanks for using and helping improve ASVideoNode! The test project looks great!

I agree with @appleguy here that these advanced features aren't very applicable to most of the users of this module. However, the fact that you needed to add properties to ASVideoNode to achieve what you are trying to do here is also concerning, I think reconsider how ASVideoNode should serve people or provide other Media Player modules that are less coupled with AVPlayer and AVPlayerItem could be helpful to you.
",binl,flovouin
1800,2016-07-10 04:58:16,"@flovouin thanks for this!  I've decided to take the diff; your implementation is quite clean, and we can look at simplifying / refactoring the API in the future when there is more focus on that.  It may result in some minor thrash for clients that use these options, but I think it would be very easy to adapt if we added a helper object for advanced controls etc.

Could you update / rebase this to account for using the _propertyLock as is done by this diff?  https://github.com/facebook/AsyncDisplayKit/pull/1877
",appleguy,flovouin
1800,2016-07-10 12:58:46,"@appleguy Thanks for taking the time to review it. I've rebased on master and updated the new properties to use the `_propertyLock`. It should be good to go!
",flovouin,appleguy
1799,2016-06-23 01:08:45,"@EviluS thk,u are right
@maicki thk you too, is there any different between `layer.cornerRadius` and `cornerRadius`,i only know it is a uiviewbridge property
",tangbl93,maicki
1799,2016-06-23 13:00:54,"cc @tangbl93 Can you please give a bit more information how you solved this issue? There are different ways to achieve rounded corners and as @appleguy mentioned setting a `cornerRadius` on CALayer is not the most efficient one.
",maicki,appleguy
1798,2016-06-28 16:26:03,"@hannahmbanana: Indeed this works. I don't know why, when I first tested it I had problems with the placeholder text…
",benjaminhorner,hannahmbanana
1797,2016-06-22 22:19:24,"@hannahmbanana You bet! Thanks for the solution!
",nickvelloff,hannahmbanana
1794,2016-06-24 03:52:38,"@Adlai-Holler thank you for including the categories and deprecation flags to maintain compatibility. I reviewed this in quite heavy detail, but I am also partially trusting that there are not material changes subtly within some of the code blocks that were removed from the access data source with block sections.
",appleguy,Adlai-Holler
1794,2016-06-24 03:54:44,"@Adlai-Holler the detail  is quite interesting on using Singleton objects for index paths only when initialized with the to argument method, thanks for including that.

Can you please add a comment where are you added the fork code path, because it is far from obvious why it would be worth the complexity to do so?
",appleguy,Adlai-Holler
1790,2016-06-21 23:25:06,"@gazreese: Thanks for catching this - sorry I missed this!
",hannahmbanana,gazreese
1789,2016-06-21 16:19:03,"@hannahmbanana - Thank you. Are there any support group or communities ?
",modLX4,hannahmbanana
1788,2016-06-23 23:30:54,"@gazreese: this build will always fail because it is using our old script. Could you rebase please?
",hannahmbanana,gazreese
1788,2016-06-24 11:05:53,"@hannahmbanana  Looks good now, could you please take a look? Thanks!
",gazreese,hannahmbanana
1788,2016-07-02 15:29:58,"@gazreese Another great change. I noticed that the image is being reset because when we first call `generatePlaceholderImage` the AVAsset has no tracks and so we call completion with `nil` and clear the image. This is certainly not an intended behavior.

I think the ideal behavior here is to clear self.image in -setAsset: _if it was automatically set_ but otherwise the node itself should never `self.image = nil`. Thoughts @gazreese @appleguy ?

Thanks again for this and all your other well-made contributions lately. Landing this immediately!
",Adlai-Holler,gazreese
1786,2016-06-21 21:20:05,"@maicki: confirmed that this PR fixes Issue #563. Please close the issue if/when this merges. 
",hannahmbanana,maicki
1784,2016-06-21 09:57:22,"@maicki Thanks! I was just about to edit my question and say I had come up with a solution (the exact same one as yours. Can be closed I guess…
Thanks for the quick response

**NOTE**: In Swift rangeOfCharacterFromSet must be tested against nil, not NSNotFound.
",benjaminhorner,maicki
1780,2016-06-23 03:06:34,"@hannahmbanana woohoo! 🚀 🎸 👍 
",nickvelloff,hannahmbanana
1775,2016-06-23 02:10:39,"Hi, @appleguy  @hannahmbanana 
Sample project is in here .

https://github.com/Coramo/ASDKSample

Hope this can help you.
",Coramo,appleguy
1775,2016-06-23 02:10:39,"Hi, @appleguy  @hannahmbanana 
Sample project is in here .

https://github.com/Coramo/ASDKSample

Hope this can help you.
",Coramo,hannahmbanana
1775,2016-06-23 12:43:00,"@maicki  Thank you. this is working.
",Coramo,maicki
1773,2016-06-19 21:49:04,"@erichoracek wow, thanks for diving into this so quickly!  In combination with the important patch you provided for us previously, these fixes are a reason to consider a new release - supplementary nodes had been hanging by a thread.  I'm relieved that the team is planning to refactor this area and use it to add support for table header / footer nodes too, as well as setting interface states, but this work could take a while.

There is a fairly trivial syntax warning that is blocking the tests:

❌  /Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKit/Details/ASCollectionDataController.mm:202:56: incompatible pointer types initializing 'NSMutableArray<ASIndexedNodeContext *> *__strong' with an expression of type 'NSArray<ASIndexedNodeContext *> \* _Nullable' [-Werror,-Wincompatible-pointer-types]
    NSMutableArray<ASIndexedNodeContext *> *contexts = [_pendingContexts[kind] filteredArrayUsingPredicate:[NSPredicate predicateWithBlock:^(ASIndexedNodeContext *context, NSDictionary *_) {
",appleguy,erichoracek
1773,2016-07-10 05:46:25,"@erichoracek thanks for the fix, just getting back to this now as I'm wrapping up the 1.9.81 release.

There is a lot of good information in the linked issues, and @Adlai-Holler will follow up here.  He has implemented new, high-quality thrash testers for ASCollectionView and is adding supplementary node support to them.  The tester is capable of recording a randomized series of edit transactions for later reproduction of issues, once it uncovers crashes.

Please let us know if you hit any further issues.  One thing I did notice reading the code is that there is no -prepareForDeleteSections: method; I'm not sure if this is required, but it should come up during the audit if so.
",appleguy,erichoracek
1772,2016-06-20 03:51:39,"@appleguy should we close this in favor of #1773?
",hannahmbanana,appleguy
1771,2016-06-18 19:38:35,"@hannahmbanana , I actually repro with the sample project CustomCollectionView which is using MosaicCollectionViewLayout. 

Easy way to make is crash to to put these lines into the view controller implementation file:
`
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
  [[_sections objectAtIndex:indexPath.section] removeObjectAtIndex:indexPath.row];
  [_collectionView deleteItemsAtIndexPaths:[NSArray arrayWithObjects:indexPath, nil]];
}
`

Then tapping some random item to delete it and scroll up and down and it will crash.
",tungvoduc,hannahmbanana
1771,2016-06-18 21:55:04,"@hannahmbanana I would get a crash after _any_ item-level mutation when the collection view had supplementary nodes for each row (not just deletes of the last item) before my pull request. Section-level mutations worked without issue. This crash was already documented in #1278 and occurred in the same place as is documented here. (""Supplementary node should exist."")

If this behavior is reverted (#1772), we'd be trading crashes in some scenarios for crashes in other scenarios. Perhaps there is a logical error in the recalculation code I wrote? I'll attempt to clone down the example project and see if I can find out anything.

Apologies for introducing a regression!
",erichoracek,hannahmbanana
1771,2016-06-18 22:42:55,"Hey Eric - thanks for your note!  Since the patch is fairly large, I doubt we will actually push a revert, but it is concerning that this scenario (easy to reproduce) is indeed an item-level mutation that did not crash previously.

I think this does highlight that the Supplementary node implementation has some issues that the normal cell / data controller code paths do not, and really does need an overhaul.  I’m hoping we can find a surgical fix, or at least a specific cause, of what behavior in the new code results in this issue so that the author of the fix on our team has enough context to pursue.

> On Jun 18, 2016, at 2:55 PM, Eric Horacek notifications@github.com wrote:
> 
> @hannahmbanana https://github.com/hannahmbanana I would get an assertion after any item-level mutation when the collection view had supplementary nodes for each row (not just deletes of the last item) before my pull request. Section-level mutations worked without issue. This crash was already documented in #1278 https://github.com/facebook/AsyncDisplayKit/issues/1278 and occurred in the same place as is documented here. (""Supplementary node should exist."")
> 
> If this behavior is reverted (#1772 https://github.com/facebook/AsyncDisplayKit/pull/1772), we'd be trading crashes in some scenarios for crashes in other scenarios. Perhaps there is a logical error in the recalculation code I wrote? I'll attempt to clone down the example project and see if I can find out anything.
> 
> Apologies for introducing a regression!
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1771#issuecomment-226967159, or mute the thread https://github.com/notifications/unsubscribe/AAigA7vcDVWh5XtvtU7Am6GMfIbDMqQiks5qNGk7gaJpZM4I4_U1.
",appleguy,hannahmbanana
1771,2016-06-18 23:09:04,"@appleguy After digging into it, it looks like this is because `UICollectionView` supplementary views can be displayed even if there is not an item at their index path. Flow layout headers are a good example: even if you delete the cell at index 0, the header supplementary view at index 0 remains visible. As such, I believe that we can fix this issue by defensively re-populating the supplementary nodes if the deleted index paths contains the 0 index. I'll go ahead and create a pull request with this fix.

Definitely agree on the supplementary node implementation having some issues on the whole as well. Hopefully a new implementation can solve some issues!
",erichoracek,appleguy
1771,2016-06-20 03:48:32,"@erichoracek: many thanks for investigating this and putting up PR!
",hannahmbanana,erichoracek
1771,2016-07-14 11:58:07,"@appleguy : Thanks! Everything is working now.
",tungvoduc,appleguy
1771,2016-07-14 18:05:09,"That’s fantastic news, thanks for letting us know!

> On Jul 14, 2016, at 4:58 AM, tungvoduc notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy : Thanks! Everything is working now.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1771#issuecomment-232645178, or mute the thread https://github.com/notifications/unsubscribe/AAigA4zlHY-oGtSULgxfecL0EyRzlm8Pks5qViRSgaJpZM4I4_U1.
",appleguy,appleguy
1770,2016-06-18 22:53:11,"In one of the other threads, we'd actually made a decision to change the default.  @eanagel @ejensen could one of you submit a PR?
",appleguy,eanagel
1770,2016-06-21 21:04:46,"Closing this issue as the PR was merged. Thanks @eanagel again!
",maicki,eanagel
1769,2016-06-18 20:24:08,"@levi @maicki: I put it in the data source to be consistent with the _current_ state of ASCollectionView. Should I switch it to the delegate assuming #1740 will eventually be committed?
",hannahmbanana,levi
1769,2016-06-18 22:45:15,"I had discussed this with Hannah.  I suggested the Data Source because it is unclear to me if we will land the other PR.  If we do, unfortunately we will need to introduce code that detects the method existing on the data source.  Otherwise it is a very problematic “silent” error that could cause a lot of grief for app developers who update to 2.0, but don’t happen to test a deep corner of their app that uses this method.  I’ve seen in the community it is quite common to not set the .delegate, whether or not this is advisable (it is supported by Apple).

There is also a close parallelism between the nodeFor: and constrainedSizeFor: methods, but ultimately we need to make a decision on the other PR’s course to landing safely before deciding if this should also be in the delegate.

> On Jun 18, 2016, at 1:24 PM, Hannah Troisi notifications@github.com wrote:
> 
> @levi https://github.com/levi @maicki https://github.com/maicki: I put it in the data source to be consistent with the current state of ASCollectionView. Should I switch it to the delegate assuming #1740 https://github.com/facebook/AsyncDisplayKit/pull/1740 will eventually be committed?
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1769#issuecomment-226963051, or mute the thread https://github.com/notifications/unsubscribe/AAigA5jRVZ85I6uuJP_YiWgHOKHynvEfks5qNFPrgaJpZM4I41cp.
",appleguy,levi
1769,2016-06-19 03:01:37,"@appleguy the other diff was updated to introduce the data source detection note. If you're concerned about a breaking change, we can come up with a plan to assert or warn of the deprecation in an upcoming 2.0 beta and introduce a porting guide to 2.0 when we finalize the release.

The benifit I see here of having these methods on the delegate is that they're are optional and geometry-defining. A quick glance at UITableViewDataSource and UICollectionViewDataSource will show that there is a strict set of responsibilities for the data source that break down to defining count, data, and responding to insertion/deletion events. The delegate protocols, on the other hand have a slew of geometry-based methods, defining size, insets — much like our sizeForNode methods. I think there is some benifit here keeping the data source light and moving optional methods like this to the delegate. It will keep the data source simple and clear on what needs to be defined to support a functional list of nodes.
",levi,appleguy
1769,2016-06-19 13:29:51,"@appleguy I agree with @levi here. I would suggest moving this method to the delegate to be aligned with `UITableViewDataSource` as well as to have the responsibility on the right place: A DataSource and Delegate have specific responsibilities and the responsibilities for sizing lays in the delegate.

I also think we should move the same method slowly to `ASCollectionViewDelegate` as the other diff does with 2.0. Like @levi said via a slow deprecation and a porting guide.

I will be a bit confusing before 2.0 to have the same method on different protocols between table and collection view, but it is getting even more confusing by introducing this method in the data source and deprecate it slowly after.
",maicki,levi
1769,2016-06-19 13:29:51,"@appleguy I agree with @levi here. I would suggest moving this method to the delegate to be aligned with `UITableViewDataSource` as well as to have the responsibility on the right place: A DataSource and Delegate have specific responsibilities and the responsibilities for sizing lays in the delegate.

I also think we should move the same method slowly to `ASCollectionViewDelegate` as the other diff does with 2.0. Like @levi said via a slow deprecation and a porting guide.

I will be a bit confusing before 2.0 to have the same method on different protocols between table and collection view, but it is getting even more confusing by introducing this method in the data source and deprecate it slowly after.
",maicki,appleguy
1769,2016-06-27 06:09:50,"@levi @maicki you make a good case.  I certainly agree it's more appropriate there, just wondering what the path is to move the other method as it has several considerations.  Let's go with this route, and sign up for full compatibility with the collection view method existing on the .dataSource only.  Thanks @hannahmbanana !
",appleguy,levi
1769,2016-06-27 06:09:50,"@levi @maicki you make a good case.  I certainly agree it's more appropriate there, just wondering what the path is to move the other method as it has several considerations.  Let's go with this route, and sign up for full compatibility with the collection view method existing on the .dataSource only.  Thanks @hannahmbanana !
",appleguy,maicki
1769,2016-06-27 06:09:50,"@levi @maicki you make a good case.  I certainly agree it's more appropriate there, just wondering what the path is to move the other method as it has several considerations.  Let's go with this route, and sign up for full compatibility with the collection view method existing on the .dataSource only.  Thanks @hannahmbanana !
",appleguy,hannahmbanana
1767,2016-06-18 13:25:22,"In general looks good to me. We just have to be careful as I think this will be an API breaking change?

@Adlai-Holler Is the plan to merge that before 2.0? cc @appleguy 
",maicki,Adlai-Holler
1767,2016-08-04 21:12:56,"@Adlai-Holler Can you please rebase your branch. Thanks!
",maicki,Adlai-Holler
1760,2016-06-16 23:02:14,"@vadims Hi Vadim, thanks for looking into that! Would you be so good and create a PR for that? That would be awesome!
",maicki,vadims
1760,2016-06-16 23:27:59,"@vadims: great catch! 
",hannahmbanana,vadims
1760,2016-06-17 00:38:06,"@vadims: thanks for creating a PR for us!
",appleguy,vadims
1759,2016-06-24 03:09:33,"@rcancro interesting...this seems safe to me, albeit slightly unusual.  Maybe we should have a comparator method of some kind that decides if a layout update is required for any given old / new traits.
",appleguy,rcancro
1756,2016-06-17 05:21:42,"@ocrickard yes, that was exactly my suspicion when Michael found this - I think it was a mechanical conversion!  Funny stuff.  We should search the codebase for any others.
",appleguy,ocrickard
1755,2016-06-18 13:39:49,"@maicki that diagram is fantastic. Thanks for putting that together!
",levi,maicki
1755,2016-06-21 03:28:45,"@levi @Adlai-Holler Could you guys take another look over it when you find some time and let me know your thoughts if you think it would be worth to merge soon?

cc @appleguy 
",maicki,levi
1755,2016-06-22 04:16:29,"@levi Can you get it a last look before I merge? Thanks!
",maicki,levi
1755,2016-06-24 17:23:12,"@levi Can you get it another look. All comments should be address from the last one.
",maicki,levi
1755,2016-06-24 21:11:00,"Thanks for the development here, Michael!  Since Levi is overseas on time off, we'll wait until he's back before pushing this through.

> On Jun 24, 2016, at 10:23 AM, Michael Schneider notifications@github.com wrote:
> 
> @levi https://github.com/levi Can you get it another look. All comments should be address from the last one.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1755#issuecomment-228407237, or mute the thread https://github.com/notifications/unsubscribe/AAigA9k2kzEIH8zBX7cJZrZvBa386HeIks5qPBKDgaJpZM4I3pap.
",appleguy,levi
1755,2016-06-30 14:59:47,"@levi Can you give it another look whenever you find some time. Thank you!
",maicki,levi
1755,2016-07-08 18:51:21,"@appleguy @Adlai-Holler That should be ready to merge. If this will land we have to do a small change within Pinterest too so let me know at the time you would like to merge.
",maicki,appleguy
1755,2016-07-08 18:51:21,"@appleguy @Adlai-Holler That should be ready to merge. If this will land we have to do a small change within Pinterest too so let me know at the time you would like to merge.
",maicki,Adlai-Holler
1755,2016-07-08 19:19:40,"Lovely! @maicki Let's merge this. Make the Pinterest change and merge at your leisure
",Adlai-Holler,maicki
1754,2016-06-17 00:55:44,"@george-gw: this also looks like it is a bug. I'll go ahead and submit a PR to fix it. 
",hannahmbanana,george-gw
1753,2016-06-16 17:13:36,"@george-gw: Great question - thanks for watching out for the consistency of ASDK's API!

@aaronschubert0: It looks like you were the original author of this feature. Could you weigh in on this? Was this the intended behavior?
",hannahmbanana,george-gw
1753,2016-06-17 00:45:42,"@george-gw: I just checked out the code and this does seem to be an oversight rather than a feature. Do you feel confident putting up a pull request for this? 
",hannahmbanana,george-gw
1753,2016-06-17 02:12:19,"@george-gw: I tested this and userInteraction _is_ enabled after setting liveMap=YES (sometime after creating the map node). However, it seems that the mapNode is capturing the touch events. 
",hannahmbanana,george-gw
1753,2016-06-17 07:32:18,"@hannahmbanana @george-gw Yeah seems to be an oversight, strange it wasn't flagged earlier. @george-gw happy for you to submit a PR for this if you wish (so you can test on your specific scenario), otherwise I can fix it.
",aaronschubert0,george-gw
1753,2016-06-17 07:32:18,"@hannahmbanana @george-gw Yeah seems to be an oversight, strange it wasn't flagged earlier. @george-gw happy for you to submit a PR for this if you wish (so you can test on your specific scenario), otherwise I can fix it.
",aaronschubert0,hannahmbanana
1753,2016-06-17 13:46:44,"@hannahmbanana I have added an Example in the pull request, I don't know if this should be there, but it's a way for you to test out the different solutions, you can actually take that code and run it on the old version (without my changes) to see the differences.
I have also NSLoged the userInteractionEnabled variable so you can see its value as you tap the toggle button to switch liveMap on and off.
",george-gw,hannahmbanana
1750,2016-06-17 05:59:17,"@hannahmbanana Okay,I will send my demo project for u~ Please note that e-mail，Thank u~
",wangqianjun,hannahmbanana
1750,2016-06-18 01:56:14,"@hannahmbanana  
Thank you for your answer，but this may not be what I want.
I want to make self growth tableview, from bottom to top. When I slide, it can respond to operations(scroll up, or scroll down). So I realized as follows：
- insert cell to the tableview bottom
- scrollToRowAtIndexPath to the bottom

Thank u, anyway.
",wangqianjun,hannahmbanana
1750,2016-06-18 09:40:21,"@hannahmbanana 
I will use GCD and some buffer fix the problem that locking main thread. Thank u.
",wangqianjun,hannahmbanana
1749,2016-06-16 23:06:30,"@Adlai-Holler @ocrickard @garrettmoon Could you guys give me another look over the code. I tried to address all of your comments as well as I found some more things.

Changes:
- Add lock to _rendererAttributes
- Add locking to _linkAttributeValueAtPoint:attributeName:range:inAdditionalTruncationMessage:forHighlighting: as we access the attributed text in there
- Add locking to touchesBegan:withEvent: as we are accessing the [ASTextKitRenderer firstVisibleRange]
- Add locking for highlightStyle
- Move accessing delegate property access to instance variable access
",maicki,ocrickard
1749,2016-06-16 23:06:30,"@Adlai-Holler @ocrickard @garrettmoon Could you guys give me another look over the code. I tried to address all of your comments as well as I found some more things.

Changes:
- Add lock to _rendererAttributes
- Add locking to _linkAttributeValueAtPoint:attributeName:range:inAdditionalTruncationMessage:forHighlighting: as we access the attributed text in there
- Add locking to touchesBegan:withEvent: as we are accessing the [ASTextKitRenderer firstVisibleRange]
- Add locking for highlightStyle
- Move accessing delegate property access to instance variable access
",maicki,Adlai-Holler
1748,2016-06-16 04:14:35,"@Xinchi: could you modify this PR to include [ASVideoNode] in front of the title? Thanks! 
",hannahmbanana,Xinchi
1748,2016-06-20 14:48:27,"@Xinchi - Please check over this first - https://github.com/facebook/AsyncDisplayKit/issues/1600

There were issues with the previous method, as outlined above.

One way to avoid the issues above may be to make the construction of the ASVideoNode class more explicit like so:



I'm also finding that the current initialisation method is buggy. I find a lot of HLS videos that won't play. There are some examples here if you're interested:

http://stackoverflow.com/questions/10104301/hls-streaming-video-url-need-for-testing
",gazreese,Xinchi
1748,2016-06-29 22:02:14,"Hi @gazreese ! Thanks for chiming in your idea!

What are the ""issues with the previous method""? and is there a solution? 
",Xinchi,gazreese
1748,2016-07-12 16:16:58,"@ejensen @gazreese Thanks for chiming in your ideas! I am closing this patch for now because the issue seems to have gone away in the Pinterest use case.  Will re-visit if we are seeing this issue again. 
",Xinchi,ejensen
1748,2016-07-12 16:16:58,"@ejensen @gazreese Thanks for chiming in your ideas! I am closing this patch for now because the issue seems to have gone away in the Pinterest use case.  Will re-visit if we are seeing this issue again. 
",Xinchi,gazreese
1748,2016-07-18 20:56:39,"Reopening this pull request as the bug has been observed again.   @gazreese I totally agree with you on the duplicated .asset property.  I will put up a PR that maps the ASVideoNode.asset to the internal asset object. 
",Xinchi,gazreese
1748,2016-07-19 08:37:26,"@Xinchi Sounds like a good idea to me. I'm using this functionality in my current project and don't mind testing for you if you like, just let me know when you've done the PR.
",gazreese,Xinchi
1747,2016-07-04 05:28:40,"@levi could you tweak the comments as appropriate?  @Adlai-Holler what steps do we need to make this Swift-safe?  Honestly I doubt many people are reading the children value, so hopefully it is safe to change--or does it affect writing too?
",appleguy,levi
1747,2016-07-04 05:28:40,"@levi could you tweak the comments as appropriate?  @Adlai-Holler what steps do we need to make this Swift-safe?  Honestly I doubt many people are reading the children value, so hopefully it is safe to change--or does it affect writing too?
",appleguy,Adlai-Holler
1747,2016-07-04 13:19:26,"@appleguy It will affect writing too!

The change would be on the Swift side:
_Reading:_
`let children = node.children()` --> `let children = node.children`

_Writing:_
`node.setChildren([child])` --> `node.children = [child]`
",maicki,appleguy
1747,2016-08-04 21:13:20,"Hey @levi can you please rebase the master branch of your fork on top of the latest upstream master and rebase this PR branch on top. We will likely merge that pretty soon. Thanks!
",maicki,levi
1747,2016-08-05 06:58:51,"@maicki not able to do this soon, could you commandeer this diff?
",levi,maicki
1739,2016-06-10 18:28:02,"@ocrickard thanks for auditing this!  Yes, we recently discovered that the many recent changes to ASTextNode have broken the threading model.  This is urgent to fix.

Those changes included new features like text resizing, but many issues were introduced by moving to the instance method drawing + perhaps especially some general refactoring that altered the initialization codepath.

@ocrickard let us know if you are planning anything else here — no worries, we can pick up from here if you are moving on.  This is a generous contribution!  I want to make sure the fixes for this stuff don't collide between multiple engineers.
",appleguy,ocrickard
1739,2016-06-21 05:33:04,"@ocrickard: If you have time, it would be great if you could review what landed and let us know if there are any other issues you see. 
",hannahmbanana,ocrickard
1739,2016-07-10 07:01:38,"@ocrickard I think we're in pretty good shape here now.  Let us know if you notice any other clear issues and we'll prioritize them.

@shannonma FYI ^.  Interested on how your version upgrade goes!  We do plan to refactor / improve the architecture of ASTextNode in the next 2 months, but it will probably be August or September.
",appleguy,ocrickard
1738,2016-07-12 23:43:46,"@hannahmbanana could you please add me as well? 
",kharmabum,hannahmbanana
1738,2016-07-13 00:37:49,"Send us an email / see task #1582 (IIRC)

> On Jul 12, 2016, at 4:43 PM, Juan-Carlos Foust notifications@github.com wrote:
> 
> @hannahmbanana https://github.com/hannahmbanana could you please add me as well?
> 
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1738#issuecomment-232214613, or mute the thread https://github.com/notifications/unsubscribe/AAigA0_ClXm1QwdylJ0NIiYpq311Y97Tks5qVCa0gaJpZM4IyyQy.
",appleguy,hannahmbanana
1737,2016-06-16 20:20:07,"@ocrickard @Adlai-Holler Thank you guys very much!

@ocrickard Yes I guess the tradeoff is real, but I think we have to take the risk as it's still better most of the cases than spawning > 400 threads while just browsing through an app within minutes.
",maicki,ocrickard
1737,2016-06-16 20:20:07,"@ocrickard @Adlai-Holler Thank you guys very much!

@ocrickard Yes I guess the tradeoff is real, but I think we have to take the risk as it's still better most of the cases than spawning > 400 threads while just browsing through an app within minutes.
",maicki,Adlai-Holler
1737,2016-06-17 01:19:07,"@maicki thanks, this is really great!  We should re-sync Pinterest master as well as the current release branch, since it was just cut.
",appleguy,maicki
1736,2016-06-10 06:10:53,"@maicki I've updated init code, but I still get empty gray box.
I layout node by setting its frame



This is the rectangle node I get:
![screen shot 2016-06-10 at 08 04 49](https://cloud.githubusercontent.com/assets/677166/15955512/1f5816e2-2ee2-11e6-9b20-a8c56a3f631f.png)
",borut-t,maicki
1736,2016-06-10 06:44:03,"mapView should indeed be nil unless you need to turn on .liveMap (this is inefficient so avoid it unless not in a scrollable view and the user must interact with the map).

Can you go in the debugger and do ""po [[UIWindow keyWindow] recursiveDescription]"", then include the full results here?  What rectangle are you setting?  What about the way the node is added to its parent?



> On Jun 9, 2016, at 11:10 PM, Borut Tomazin notifications@github.com wrote:
> 
> @maicki https://github.com/maicki I've updated init code, but I still get empty gray box.
> I layout node by setting its frame
> 
> mapNode.frame = CGRect ...
> This is the rectangle node I get:
>  https://cloud.githubusercontent.com/assets/677166/15955512/1f5816e2-2ee2-11e6-9b20-a8c56a3f631f.png
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1736#issuecomment-225101608, or mute the thread https://github.com/notifications/unsubscribe/AAigA9ZuPjW9LjhU3FGZQWa3cTiWfNVOks5qKP_xgaJpZM4Ix61p.
",appleguy,maicki
1736,2016-06-10 07:39:37,"@appleguy It looks like MKMapView frame is not set. Is this intended because I've set `liveMap = true` ?


",borut-t,appleguy
1736,2016-06-10 09:53:40,"@borut-t @appleguy I was under the assumption that `measure` has to be called on a node if it's added to UIView manually?

EDIT: Had a look at the code and mapView sizes itself based on the ASMapNode calculatedSize, so if you don't call measure on it, it will be set to CGSizeZero.
",aaronschubert0,appleguy
1736,2016-06-10 10:06:25,"@aaronschubert0 You are correct. I've added call for this method and now it shows correctly. Thanks!
",borut-t,aaronschubert0
1736,2016-06-10 13:21:05,"@maicki Thanks for clarification.
",borut-t,maicki
1735,2016-06-09 06:58:37,"@levi awesome work here! I had been hoping this code would be cleaned up for a while now, but had not mentioned it to anyone. So it is a great surprise to see such improvements!

I will need help to review this, because the code is very core and that's critical to get right.  @nguyenhuy would be the person most familiar with the existing code, but I believe @maicki is also an expert here.  @Adlai-Holler may have some familiarity with it.

Once there is one very detailed review signoff, I am happy to take a final look and get this merged. Send me a note when that happens!
",appleguy,levi
1731,2016-06-09 06:08:11,"It works!... thank you @hannahmbanana 
",boreys,hannahmbanana
1728,2016-06-09 05:10:15,"@ocrickard @maicki I agree that there is essentially no use case for subclassing these objects and then implementing new drawing methods. If that were necessary, it is much more likely that the developer would need greater flexibility by creating their own class from the ground up. They would have to rely on quite a few internal implementation details of Text or Image node to get any real benefit from its logic without using its draw method.

That said, it would be awesome to simply throw an exception in the event that a user provides a draw implementation (class method) in a class that already has an instance based draw method.  This should be relatively easy and would guarantee the developer would not be confused or waste time, even in this tricky edge case.

Regarding the conversion to instance methods, this was one of the top three most important framework performance optimizations for the Pinterest app.  The creation of draw parameters, Which had to occur on the main thread, proved so expensive that it was directly responsible for small frame drops (e.g. 20-50ms of work).  This is particularly true because a complex scrolling interface has a large number of text and image elements, And it is also common for a burst of cells to be added to the display range all at once when new content loads.
",appleguy,maicki
1728,2016-06-09 05:10:15,"@ocrickard @maicki I agree that there is essentially no use case for subclassing these objects and then implementing new drawing methods. If that were necessary, it is much more likely that the developer would need greater flexibility by creating their own class from the ground up. They would have to rely on quite a few internal implementation details of Text or Image node to get any real benefit from its logic without using its draw method.

That said, it would be awesome to simply throw an exception in the event that a user provides a draw implementation (class method) in a class that already has an instance based draw method.  This should be relatively easy and would guarantee the developer would not be confused or waste time, even in this tricky edge case.

Regarding the conversion to instance methods, this was one of the top three most important framework performance optimizations for the Pinterest app.  The creation of draw parameters, Which had to occur on the main thread, proved so expensive that it was directly responsible for small frame drops (e.g. 20-50ms of work).  This is particularly true because a complex scrolling interface has a large number of text and image elements, And it is also common for a burst of cells to be added to the display range all at once when new content loads.
",appleguy,ocrickard
1728,2016-06-09 12:42:37,"@appleguy fascinating, I'd love to hear about what was slow about building those draw parameters. 
",ocrickard,appleguy
1727,2016-06-09 05:41:27,"@ejensen A beautiful day of patches!  Thanks, this is another tiny masterpiece fix :).
",appleguy,ejensen
1724,2016-06-09 05:34:38,"cc @garrettmoon.  Woo, great find @ejensen !
",appleguy,ejensen
1723,2016-06-09 10:36:06,"@ejensen Great idea ! I had the same issue and was planning a similar PR 👍
@appleguy [FLAnimatedImage](https://github.com/Flipboard/FLAnimatedImage/blob/master/FLAnimatedImage/FLAnimatedImageView.m) also lets you set either `NSDefaultRunLoopMode` or `NSRunLoopCommonModes`, here is [their default](https://github.com/Flipboard/FLAnimatedImage/blob/master/FLAnimatedImage/FLAnimatedImageView.m) :


",koheku,ejensen
1722,2016-06-10 06:36:55,"@rcancro makes sense, thanks!!
",appleguy,rcancro
1721,2016-06-07 19:07:53,"Looks good, @rcancro. Curious of the use of a vector over a map?
",levi,rcancro
1720,2016-06-08 15:20:20,"@maicki thanks for the solution, it is working for long text nodes indeed, however with similar ones (medium-long) it is shrinking first label even though there is more space to go:

![screenshot 2016-06-08 18 19 19](https://cloud.githubusercontent.com/assets/8850270/15899777/8b997faa-2da5-11e6-90f8-d47fe3bb9dd4.png)

Maybe I'm doing relayout in a wrong way?
Here is my relayout code for display node:



 Also tried calling first two lines at the end of method, same result.
Because your layout is working fine for short text nodes and long ones, but not for medium-long (like screenshot).
",Raikerian,maicki
1715,2016-06-06 15:18:29,"@bimawa this is great, thanks for putting it up as a PR. As a suggestion of the core behavior of flex gone, I'd recommend simply checking for the property being true at ASLayout flatten time. If the test passes, you can simply exclude it from the final ASLayout sublayout hierarchy.

The other main question we should answer is do we want the ASLayoutable with FlexGone enabled to still calculate it's layout spec? Generally seems like we should forego it and rebuild the entire ASLayout tree that was disabled when the property was YES. If that's the case, you can reduce the footprint of flex gone by checking if the property is YES in an ASDisplayNode's calculateSizeThatFits: and returning a zeroed out ASLayout instead of entering measureWithSizeRange: on the layoutables and having to provide a bunch of boilerplate guard statements.
",levi,bimawa
1715,2016-06-06 15:37:05,"@levi Thank you Levi for review. Yes i think similar, and i worry about `Implicit Hierarchy Management` just if we have `gone = YES` we must remove node from supperNode for better? 

> FlexGone enabled to still calculate it's layout spec? 

Yes i think we not need spend a resources on calculation. 
So. I try find way how i can check  ASLayout flatten time. And modify PR.
",bimawa,levi
1715,2016-06-08 17:44:24,"@levi i need help :( why Travis so angry?
",bimawa,levi
1715,2016-06-08 20:18:53,"@bimawa looks like the unit tests are failing. Try running the tests locally to identify what is not passing.
",levi,bimawa
1715,2016-06-09 05:11:52,"@levi  is't your code `sublayouts:nil`. I'm just add sublayers from context. And i don't sure so it fully correct. Pls. check.
",bimawa,levi
1715,2016-06-09 06:55:14,"@bimawa thanks for your work on this!  Next time though, don't curse in commit messages :).  Those last a long time...
",appleguy,bimawa
1715,2016-06-09 08:46:20,"@appleguy oh .. sry for this, it's all my weak English. 
",bimawa,appleguy
1715,2016-06-09 13:56:09,"@levi @appleguy What do you guys think of having that behavior based on the `hidden` property of an `ASDisplayNode` instead of introducing a completely new property that is not in the flex box standard?
",maicki,levi
1715,2016-06-09 13:56:09,"@levi @appleguy What do you guys think of having that behavior based on the `hidden` property of an `ASDisplayNode` instead of introducing a completely new property that is not in the flex box standard?
",maicki,appleguy
1715,2016-06-09 14:06:18,"@maicki I was thinking that too, but would be unexpected to see a node not in the hierarchy for a seasoned iOS dev. Introducing a separate property here would be the way to go. CSS makes a similar distinction with Display: none; and visibility: hidden;
",levi,maicki
1715,2016-06-10 06:40:33,"I think it is a good idea to suggest, Michael. However, this behavior would definitely break some existing apps, and I agree with Levi that there would be at least some developers confused by a difference compared to the equally named Apple framework property. 

I'm not sure that the name used in the current patch is the best one, but we should probably introduce a new name besides hidden.

> On Jun 9, 2016, at 7:06 AM, Levi McCallum notifications@github.com wrote:
> 
> @maicki https://github.com/maicki I was thinking that too, but would be unexpected to see a node not in the hierarchy for a seasoned iOS dev. Introducing a separate property here would be the way to go. CSS makes a similar distinction with Display: none; and visibility: hidden;
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1715#issuecomment-224905087, or mute the thread https://github.com/notifications/unsubscribe/AAigA3qtmYR2ypRsix13j33meW8Exikxks5qKB3egaJpZM4Iu0LN.
",appleguy,maicki
1715,2016-06-17 09:34:43,"@appleguy #953 not related with it.
",bimawa,appleguy
1715,2016-07-29 17:48:21,"After more internal discussion about this solution, we're going to keep evolving the layout system to be more declarative and avoid adding more state to the layout properties of nodes. Thanks @bimawa for proposing this and further thanks to everyone for the clear and thorough discussion around it. 
",Adlai-Holler,bimawa
1715,2016-07-29 18:16:09,"@Adlai-Holler Ok. Thanks! Can i delete unmerged branch?
",bimawa,Adlai-Holler
1715,2016-07-29 18:17:06,"@bimawa Yes
",Adlai-Holler,bimawa
1714,2016-06-06 19:16:00,"@appleguy I'm created subclass of `UIViewController` that based on standard `UITableView` & bug is here, view is bounces after loading.  
<details> 
  <summary>

Maked some GIFs:</summary>


   <p>![nav_bar_ translucent](https://cloud.githubusercontent.com/assets/7991920/15833964/bded6220-2c31-11e6-92cd-2da8dea08279.gif)
![nav_bar_translucent](https://cloud.githubusercontent.com/assets/7991920/15833965/bdf58f7c-2c31-11e6-8928-0edbe8c9411e.gif)</p>
</details>

Then I've been changed `PagerViewController` to subclass `UIViewController` and added `ASPagerNode` as `subnode` to `view`. Now I have correct behaviour (with my `DetailViewController`).

Solution in my case is: make `PagerViewController` not subclassing from `ASViewController`

Thank you for response. My problem is solved, but if you have a time, would be good to know what I'm doing wrong.

#### Update:

After updating `AsyncDisplayKit` to 1.9.8 problem is gone completely even with `ASViewController`
👍 
",Jauzee,appleguy
1710,2016-06-05 04:34:56,"The main blocker here is the delegate situation that @hannahmbanana describes above.

Todo includes - better exposing the fact that users can use .url to set a JPEG thumbnail URL provided by the server rather than waiting much longer for video data to load and generate one, and make sure that -clearFetchedData handling is correct for all three image cases (url, generated from video data, direct set of .image property)
",appleguy,hannahmbanana
1710,2016-06-06 01:18:34,"@hannahmbanana Very cool!  This is a great change that adds several inherent capabilities, and showcases the power of the flexibility we have by controlling the relationship between these components.
",appleguy,hannahmbanana
1704,2016-06-01 04:10:43,"@maicki nice fix.  The original implementation was actually better than I thought it was, but still this fix is very important for the unconstrained case (a common one).
",appleguy,maicki
1702,2016-06-01 04:13:21,"cc @maicki 
",appleguy,maicki
1700,2016-05-31 14:08:03,"@garrettmoon, I guess it would be ok to have access to `sharedPINRemoteImageManager`, I'll change it now.
",1nput0utput,garrettmoon
1699,2016-05-30 22:16:00,"You cannot change the animation curve via ASPagerNode's `scrollToPageAtIndex:animated:` as we use internally UICollectionView's `scrollToItemAtIndexPath:atScrollPosition:animated:`. I think the only way to achieve that is the way @appleguy is proposing.
",maicki,appleguy
1699,2016-06-10 18:17:30,"@maicki good suggestion.  @stephenkopylov I would say that Pop is much better for this! :-D  https://github.com/facebook/pop
",appleguy,maicki
1699,2016-06-10 20:55:56,"@appleguy  @maicki 
Thank you, guys! Will try it!
",stephenkopylov,appleguy
1699,2016-06-10 20:55:56,"@appleguy  @maicki 
Thank you, guys! Will try it!
",stephenkopylov,maicki
1693,2016-05-25 01:17:20,"@rcancro I'd love to figure out a way to keep `setChild` and `setChildren` as is and somehow have the trait collection passed implicitly through the layout spec hierarchy. Problem is that the layout spec is always user-defined, so there's no good way to have the layout spec associated with the node implicitly when constructed via `calculateLayoutSpecThatFits:`. It's not an easy problem to solve from first glance, but I am thinking through some possible solutions. Will post some thoughts when I have them.
",levi,rcancro
1693,2016-06-02 17:51:31,"@levi @appleguy Can you take a look at these updates?
",rcancro,levi
1693,2016-06-02 22:30:31,"I'd love to land as soon as any reviewer gives a green light!  Send me a ping when so.

> On Jun 2, 2016, at 10:51 AM, ricky notifications@github.com wrote:
> 
> @levi https://github.com/levi @appleguy https://github.com/appleguy Can you take a look at these updates?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1693#issuecomment-223369212, or mute the thread https://github.com/notifications/unsubscribe/AAigAxHIIZPNbWkaJtqMv4iSj8u1PluKks5qHxgngaJpZM4Ik-md.
",appleguy,levi
1693,2016-06-03 00:47:59,"👍  LOOKS GOOD! Merge it, @appleguy 
",levi,appleguy
1693,2016-06-04 05:00:56,"@rcancro really fantastic refinements in the last round of updates, thank you! I now feel very confident landing this.

The most important follow-up in my opinion is eliminating the dependence on the object version of the collection for layout specifications. The other one that comes to mind is the creation of a large number of empty arrays, although I am genuinely curious to hear if Foundation optimizes these to be the same pointer. If you could quickly review my other comments, I don't remember with certainty if there are any other areas that are still pending, but you conclusively addressed a significant majority!
",appleguy,rcancro
1692,2016-06-04 05:20:28,"@maicki this is really fantastic, and will allow critical improvements in the developer friendliness of the layout system, By pointing developers to appropriate documentation when it becomes apparent that they are using properties which are not intended for the situation.

I think it is ready to land, however it needs to be rebased, and I would also ask that you put in a flag that sets it to disabled for now. The reason is that we should run it in Pinterest and ask a handful of other developers to try it out to see how many issues it is catching, and to make a decision on whether some of them should be moved into a strict validation mode.

In other words, as one example, I think it is at least possible that valid code sets a few extraneous values which take effect when an element is used in a stack — even if in some other cases it is used outside of the stack (intentionally).

Very cool idea to build this in an extensible way, and I look forward to thinking about expanding this and integrating it directly with the documentation (Hannah can likely help)
",appleguy,maicki
1692,2016-06-09 00:01:29,"@appleguy New changes:
- Assert if layout is invalid
- Improved error messages
- Flag to turn layout validation on and off
- Moved all layout code to `ASLayoutValidation` and created a helper function to invoke a full layout validation
",maicki,appleguy
1691,2016-06-06 02:38:42,"@appleguy Approach 1 was already merged in another PR.
Approach 2 was based on a discussion I had with you on Slack, as an alternative. 
This PR was intended to not let the conversation get lost. 
That said happy to close it if its the wrong time to explore. 
",nickvelloff,appleguy
1691,2016-06-06 03:46:53,"Thanks for summarizing, Nick!  Let's leave this open for now, then.  I recall the solution now and the performance concern around that, so it's worth evaluating the alternative approach you suggested even though the implementation is incomplete.

> On Jun 5, 2016, at 7:38 PM, Nick Velloff notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy Approach 1 was already merged in another PR.
> Approach 2 was based on a discussion I had with you on Slack, as an alternative. 
> This PR was intended to not let the conversation get lost. 
> That said happy to close it if its the wrong time to explore.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1691#issuecomment-223857262, or mute the thread https://github.com/notifications/unsubscribe/AAigAyUqKdlyR9P3NXsAr7u9EkLQyobQks5qI4g1gaJpZM4Ik4oz.
",appleguy,appleguy
1691,2016-06-06 08:10:30,"Thanks @appleguy ... With approach 2 the implementation is incomplete because I'm not exactly sure what might be _fighting_ with the layout. Seems like a scroll offset conflict. I think the approach you suggested may be a better performer, but will require a bit more thought. 
",nickvelloff,appleguy
1691,2016-08-16 17:37:25,"Both approaches are now in! Calling -setNeedsLayout on a cell node now does a good job of ensuring the node gets remeasured and the layout updated, either with animation (if `animatesSizeChanges=YES` all the way down the cell node's tree) or without (otherwise). Thanks @nickvelloff @appleguy
",Adlai-Holler,appleguy
1691,2016-08-16 17:37:25,"Both approaches are now in! Calling -setNeedsLayout on a cell node now does a good job of ensuring the node gets remeasured and the layout updated, either with animation (if `animatesSizeChanges=YES` all the way down the cell node's tree) or without (otherwise). Thanks @nickvelloff @appleguy
",Adlai-Holler,nickvelloff
1690,2016-05-25 03:39:31,"@appleguy https://github.com/facebook/AsyncDisplayKit/pull/1695 👍 
",nickvelloff,appleguy
1690,2016-05-25 14:38:56,"Much appreciated, @nickvelloff !
",appleguy,nickvelloff
1688,2016-05-21 03:10:05,"Thanks @ejensen !
",appleguy,ejensen
1687,2016-05-21 17:41:06,"@appleguy that's definitely something we could support with the design I'm working on. Ideally we should be taking advantage of this backing ASLayout tree for all aspects of a node's position and size.
",levi,appleguy
1687,2016-06-04 20:43:21,"@levi rebase when you get a chance.  Let's talk about the long term plan soon!
",appleguy,levi
1687,2016-06-05 16:33:56,"@appleguy rebased and ready to go!
",levi,appleguy
1686,2016-05-21 03:12:36,"@smeis definitely intended, thanks!
",appleguy,smeis
1683,2016-05-20 02:16:55,"@nguyenhuy Yes agree on both. I like `relayoutItems` personally. 
",nickvelloff,nguyenhuy
1683,2016-05-20 02:22:56,"@nguyenhuy ready for review. 

Of course it's the least I can do 👍 
",nickvelloff,nguyenhuy
1681,2016-06-12 23:04:44,"@flovouin This is a completely valid use case, and we should support it.  Until seeing your note, I simply didn't realize this wasn't working correctly.  Thank you for pinging the issue (it is clear you are constructive and respectful, please don't hesitate to report or ping issues if we are slow to respond!)

The team is quite busy right now preparing for our Tuesday event (WWDC-week gathering for ASDK users to discuss the future of the framework and profile apps).  We do have two new full time framework developers starting at Pinterest this week.

It will probably take a few weeks for us to get to this issue, but, it should not be extremely complex if you are open to looking at the implementation and finding the right override points to trigger a ""re-check"" of the batch parameters.  There should already be methods that make this a lot easier, things like ""batch fetch if necessary"" that are not too expensive to call if a batch doesn't need to be triggered.  The task is probably as simple as calling the appropriate method more frequently, specifically in the cases of a programmatic scroll.
",appleguy,flovouin
1681,2016-06-28 19:17:25,"@nickvelloff: Was this issue resolved in PR #1697?
",hannahmbanana,nickvelloff
1681,2016-06-29 02:30:23,"@hannahmbanana yes I didn't remember to close it. Thanks for the reminder!
",nickvelloff,hannahmbanana
1679,2016-05-18 22:48:50,"@levi lol!  This is actually very compelling, and I think the name is quite good.  @rcancro what do you think?  Any other name ideas?
",appleguy,levi
1678,2016-05-19 03:10:20,"@maicki  thx your reply, i fixed it with set the last stack layout spec's alignItems : ASStackLayoutAlignItemsStretch


",Serlight,maicki
1677,2016-05-18 07:56:07,"@gazreese, thanks for this awesome PR!  We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.

I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode.  Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.

If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image.  If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such.  Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.

This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.

I will be flying out of town in the next day, but will check in by Monday or so.  Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass.  If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!

Cheers,



> On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> 
> I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> Commit Summary
> 
> Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> File Changes
> 
> M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> Patch Links:
> 
> https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
",appleguy,gazreese
1677,2016-05-18 07:59:39,"Hi @applyguy

Sounds good to me. I’m out of the office travelling today so I’ll have a better look into it tomorrow.

> On 18 May 2016, at 08:56, appleguy notifications@github.com wrote:
> 
> @gazreese, thanks for this awesome PR! We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.
> 
> I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode. Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.
> 
> If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image. If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such. Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.
> 
> This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.
> 
> I will be flying out of town in the next day, but will check in by Monday or so. Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass. If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!
> 
> Cheers,
> 
> -- Scott
> 
> > On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> > 
> > @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> > The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> > 
> > I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> > 
> > You can view, comment on, or merge this pull request online at:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> > Commit Summary
> > 
> > Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> > File Changes
> > 
> > M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> > M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> > M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> > M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> > M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> > Patch Links:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677#issuecomment-219953063
",gazreese,appleguy
1677,2016-05-18 07:59:39,"Hi @applyguy

Sounds good to me. I’m out of the office travelling today so I’ll have a better look into it tomorrow.

> On 18 May 2016, at 08:56, appleguy notifications@github.com wrote:
> 
> @gazreese, thanks for this awesome PR! We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.
> 
> I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode. Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.
> 
> If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image. If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such. Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.
> 
> This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.
> 
> I will be flying out of town in the next day, but will check in by Monday or so. Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass. If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!
> 
> Cheers,
> 
> -- Scott
> 
> > On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> > 
> > @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> > The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> > 
> > I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> > 
> > You can view, comment on, or merge this pull request online at:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> > Commit Summary
> > 
> > Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> > File Changes
> > 
> > M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> > M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> > M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> > M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> > M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> > Patch Links:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677#issuecomment-219953063
",gazreese,gazreese
1677,2016-05-18 08:23:37,"This is good idea to let users set placeholder image, but @appleguy is correct , there were some discussions about making `ASVideoNode` subclass to `ASNetworkImageNode` but i think at this moment this PR will be useful for users.

One more thing is that `ASVideoNode` should be responsible only for playback, we are currently working on `ASVideoPlayerNode` (#1671). Maybe it will be better to move placeholder functionality to `ASVideoPlayerNode`?
",Eke,appleguy
1677,2016-05-22 14:20:44,"@gazreese thanks again for building this.  I'd merge it as a next step, but it looks like we'd have to remove / rewrite the test and much of the rest of the code, so it probably makes more sense to do the subclass directly from today's master.

Let us know if you won't have time to do this in the next week so others in the community can jump in!
",appleguy,gazreese
1677,2016-05-28 15:59:17,"@gazreese hey-o — checking in.  If you won't be able to get around to this, let us know so another community member can be confident they won't cross paths with your work and post a redundant PR around the same time.  Cheers!
",appleguy,gazreese
1677,2016-06-03 06:35:40,"Sorry, I didn’t see this in my email for some reason.

I could probably spend a bit of time on this next week but I’m finishing off another project at the moment, so it might be longer.

> On 22 May 2016, at 15:21, appleguy notifications@github.com wrote:
> 
> @gazreese https://github.com/gazreese thanks again for building this. I'd merge it as a next step, but it looks like we'd have to remove / rewrite the test and much of the rest of the code, so it probably makes more sense to do the subclass directly from today's master.
> 
> Let us know if you won't have time to do this in the next week so others in the community can jump in!
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677#issuecomment-220835009
",gazreese,gazreese
1677,2016-06-05 04:31:28,"@gazreese @hannahmbanana got to this one!  https://github.com/facebook/AsyncDisplayKit/pull/1710
",appleguy,gazreese
1675,2016-06-18 03:15:40,"@tettoffensive: This is likely a thread safety issue with ASTextNode. @maicki has a PR (#1749) up right now which should resolve this. Please let us know if you see this again!
",appleguy,maicki
1673,2016-06-03 06:15:41,"@maicki great change!  I'm very excited about this; it's important behavioral polish.  I'm ready to land after a few small updates.
",appleguy,maicki
1673,2016-06-03 21:22:31,"@appleguy Addressed all comments and added some comments for things I didn't address in code
",maicki,appleguy
1672,2016-05-17 03:22:49,"Cool, thanks @rcancro !
",appleguy,rcancro
1671,2016-05-17 22:30:51,"@Eke something to think about is extracting the `showSpinner` method in `ASVideoNode` into this new player. The original video node shouldn't be responsible for displaying any sort of UI, rather delegating it to higher abstracted nodes that can easily be customized (like ASVideoPlayerNode).
",levi,Eke
1671,2016-05-18 08:58:44,"Hello @levi, yes, all UI elements will be removed from `ASVideoNode`, it's on my todo list
",Eke,levi
1671,2016-05-19 19:20:57,"@Xinchi we must remove all `ASVideoNode` examples to fix this error.
",Eke,Xinchi
1671,2016-05-22 06:34:49,"@Eke Great change! The PR looks good to me if you could address the PR comments.  One concern I have about this design is the flexibility in adding custom control elements such as the sound button and etc.  Do you have a plan for that? 
",Xinchi,Eke
1671,2016-05-22 10:15:28,"Thanks for review @Xinchi ! fixed almost all issues, just want to discuss some comments with you in Slack before pushing changes.
",Eke,Xinchi
1671,2016-05-26 08:17:33,"@Xinchi , yes there was one conflict caused by this PR #1680. resolved
",Eke,Xinchi
1671,2016-05-26 22:50:52,"Hi @appleguy , this PR looks good to me now after a couple of iterations. If there's no objections from others, would you mind merging it? 
",Xinchi,appleguy
1671,2016-05-27 08:55:34,"@appleguy there is just one thing, example app is not finished yet. If this is problem, i can finish it on weekend
",Eke,appleguy
1671,2016-06-15 08:22:56,"@Eke  ASVidepPlayerNode is very not smooth
",wy19901227,Eke
1671,2016-06-15 09:45:30,"@Eke the tableview when scroll it will be very slack（not smooth）in your ASDKTube demo
",wy19901227,Eke
1668,2016-06-04 21:39:17,"@Xinchi @Eke - do you think this would be better as an option rather than the default? It seems like this behavior's desirability would very much depend on the application.  
",hannahmbanana,Xinchi
1668,2016-06-05 06:27:10,"Hi @hannahmbanana, we can actually close this pull request now because we did something better - allow clients to specify whether the video playback should aggressively resume playback from stall by the ""shouldAggressivelyRecoverFromStall"" flag in ASVideoNode.h
",Xinchi,hannahmbanana
1667,2016-05-17 19:00:01,"@maicki My thinking there is, when you delete at an index, you invalidate all subsequent indices, and we never want to use an invalid index in a later delete.

For example if you've got [A, B, C, D] and ""delete {2, 3}"", if you go in order you'll get [A, B, D] and then crash when you attempt to delete 3. If you do ""delete {3, 2}"" you'll get [A, B, C] then [A, B] as expected.
",Adlai-Holler,maicki
1667,2016-05-28 16:02:19,"@maicki sounds like the FIXME comment should be retained?  Happy to merge this once it's back.  Or - I wasn't able to review in detail - do you think the behavior the FIXME asks for is already implemented?
",appleguy,maicki
1667,2016-05-28 16:49:22,"@appleguy Yes the FIXME should be retained if we do not plan to change the behavior. That said I think @Adlai-Holler  has a good point to changing the order in a delete case. What do you think, should we add the FIXME back or should I change the behavior so it aligns with the FIXME comment within this PR?
",maicki,appleguy
1667,2016-05-28 16:49:22,"@appleguy Yes the FIXME should be retained if we do not plan to change the behavior. That said I think @Adlai-Holler  has a good point to changing the order in a delete case. What do you think, should we add the FIXME back or should I change the behavior so it aligns with the FIXME comment within this PR?
",maicki,Adlai-Holler
1667,2016-05-29 16:07:06,"It would be fantastic if you can implement the behavior that the comment speculated is necessary! As long as you agree the description seems like a correct approach. I am not deeply familiar with this implementation and have not carefully analyze the description that Adlai provided in the comment above.

Sent from my iPhone

> On May 28, 2016, at 11:49 PM, Michael Schneider notifications@github.com wrote:
> 
> @appleguy Yes the FIXME should be retained if we do not plan to change the behavior. That said I think @Adlai-Holler has a good point to changing the order in a delete case. What do you think, should we add the FIXME back or should I change the behavior so it aligns with the FIXME comment within this PR?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",appleguy,appleguy
1667,2016-05-29 16:07:06,"It would be fantastic if you can implement the behavior that the comment speculated is necessary! As long as you agree the description seems like a correct approach. I am not deeply familiar with this implementation and have not carefully analyze the description that Adlai provided in the comment above.

Sent from my iPhone

> On May 28, 2016, at 11:49 PM, Michael Schneider notifications@github.com wrote:
> 
> @appleguy Yes the FIXME should be retained if we do not plan to change the behavior. That said I think @Adlai-Holler has a good point to changing the order in a delete case. What do you think, should we add the FIXME back or should I change the behavior so it aligns with the FIXME comment within this PR?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",appleguy,Adlai-Holler
1667,2016-06-01 17:37:53,"@appleguy Ok I made the changes.

We had a longer discussion about the fastest way to actually reverse sort the index path array. Let me know if you know a faster way as currently implemented. There is also the `sortedArrayUsingComparator:` method on NSArray, but based on the sorting benchmark and reverse benchmark in this two articles it should be faster to first use `sortedArrayUsingSelector:` and after that use `reverseObjectEnumerator` and `allObject`.

https://www.objc.io/issues/7-foundation/collections/ and http://stackoverflow.com/questions/586370/how-can-i-reverse-a-nsarray-in-objective-c
",maicki,appleguy
1667,2016-06-01 17:40:15,"@maicki I believe there's a method like `as_inverseCompare:` that you could use as the sort selector to directly sort index paths descending.
",Adlai-Holler,maicki
1667,2016-06-01 17:45:50,"@Adlai-Holler Nice, it's `asdk_inverseCompare:` will update and use that
",maicki,Adlai-Holler
1667,2016-06-02 00:09:49,"@appleguy Seems like currently we cannot remove index paths in reverse order. `ASDeleteElementsInMultidimensionalArrayAtIndexPaths` -> `ASRecursivelyUpdateMultidimensionalArrayAtIndexPaths` expects a sorted index path otherwise we assert in `ASDeleteElementsInMultidimensionalArrayAtIndexPaths` with `Indexpath is out of range !`

That's the reason the test is failing at the moment.
",maicki,appleguy
1667,2016-06-02 00:15:32,"Ah, I see.  We should be able to fix that method / create another variant that takes a reverse order, but that’s annoying and definitely a blocker until we get around to it.

Feel free to restore the original comment for now, or push through the multidimensional change.  Also wondering gif it makes sense to add a TwoDimensional optimized variant like the others I added, which helped performance a lot.

> On Jun 2, 2016, at 8:09 AM, Michael Schneider <notifications@github.com <mailto:notifications@github.com>> wrote:
> 
> @appleguy https://github.com/appleguy Seems like currently we cannot remove index paths in reverse order. ASDeleteElementsInMultidimensionalArrayAtIndexPaths -> ASRecursivelyUpdateMultidimensionalArrayAtIndexPaths expects a sorted index path otherwise we assert in ASDeleteElementsInMultidimensionalArrayAtIndexPaths with Indexpath is out of range !
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1667#issuecomment-223161619, or mute the thread https://github.com/notifications/unsubscribe/AAigA-GgAtyhLl3R6ucy65ghb0FSMUrfks5qHh9RgaJpZM4IfdbF.
",appleguy,appleguy
1667,2016-06-04 21:03:57,"@maicki the TwoDimensional functions are dramatically faster than the Multidimensional ones.  It seemed like the code touched here might also benefit from going to a hardcoded 2D version since that is currently the only use case, but I colud be wrong
",appleguy,maicki
1664,2016-06-01 04:17:09,"@lappp9 sorry I didn't see this, always glad to merge a great documentation update!
",appleguy,lappp9
1663,2016-05-14 19:23:31,"@Adlai-Holler You have any idea what can cause that or why this is happening? Is it related to using Swift in the extension pod and the whole bridging mechanism is creating some issues? Furthermore did this just start happen with Cocoapod 1.0 and was fine with < 1.0?

Overall I would be fine with the change, if this resolves the issue to have ASDK as dependency under some circumstances.

@appleguy Any idea why we have them as Framework-Style Imports in the first place?
",maicki,Adlai-Holler
1663,2016-05-15 03:33:45,"@Adlai-Holler also fine with merging this if I understand why it is better.  Historically I was under the impression that it was more correct / preferable to use a framework import for anything that is in a public .h file.
",appleguy,Adlai-Holler
1663,2016-05-15 06:44:20,"@Adlai-Holler I tried to reproduce the error as I want to understand the whole `#import` mechanism and also how it relates to Swift and modules (`@import`) a bit more. I tried you sample project from the CocoaPods issue, but it built without any problems :/

Can you quickly check that example again if it fails for you or quickly create a new one? Fyi used CocoaPods 1.0
",maicki,Adlai-Holler
1663,2016-05-15 18:19:57,"I checked it yesterday under Xcode 7.2.1 or 7.3.1, CocoaPods 0.39.0 or 1.0.0 and it wouldn't build, with a different failure under each case. To confirm: you were able to run the SwiftKittens app?

Sent from my iPhone

> On May 14, 2016, at 11:44 PM, Michael Schneider notifications@github.com wrote:
> 
> @Adlai-Holler I tried to reproduce the error as I want to understand the whole #import mechanism and also how it relates to Swift and modules (@import) a bit more. I tried you sample project from the CocoaPods issue, but it built without any problems :/
> 
> Can you quickly check that example again if it fails for you? Fyi used CocoaPods 1.0
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",Adlai-Holler,Adlai-Holler
1663,2016-05-15 19:04:43,"Huh that's really strange, I wonder why the behavior would be different.

@appleguy is your belief that the framework-style imports are more correct strong enough to justify me investigating the different behavior? I've deintegrated and cleared pod cache and deleted derived data, all the usual tricks already.

Sent from my iPhone

> On May 15, 2016, at 11:57 AM, Michael Schneider notifications@github.com wrote:
> 
> Yeah running the SwiftKittens app. Xcode 7.3.1 and CocoaPods 1.0.0. See Screenshot.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",Adlai-Holler,appleguy
1663,2016-05-15 20:06:16,"@maicki I used `pod deintegrate` which reports ""All traces of CocoaPods have been removed"" which must include Podfile.lock, but it didn't fix the build.
",Adlai-Holler,maicki
1663,2016-05-15 20:54:14,"This didn't remove the Podfile.lock for me just look into the project folder. Did you try just deleting the Podfile.lock and call 'pod install' ? Be sure to use CocoaPods 1.0.0 and not the rc.

> On May 15, 2016, at 10:06 PM, Adlai Holler notifications@github.com wrote:
> 
> @maicki I used pod deintegrate which reports ""All traces of CocoaPods have been removed"" which must include Podfile.lock, but it didn't fix the build.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",maicki,maicki
1663,2016-05-15 21:00:37,"No I'm hiking today, only talking about my experiences before I opened this PR. 

Sent from my iPhone

> On May 15, 2016, at 1:54 PM, Michael Schneider notifications@github.com wrote:
> 
> This didn't remove the Podfile.lock for me just look into the project folder. Did you try just deleting the Podfile.lock and call 'pod install' ? Be sure to use CocoaPods 1.0.0 and not the rc.
> 
> > On May 15, 2016, at 10:06 PM, Adlai Holler notifications@github.com wrote:
> > 
> > @maicki I used pod deintegrate which reports ""All traces of CocoaPods have been removed"" which must include Podfile.lock, but it didn't fix the build.
> > 
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly or view it on GitHub
> > 
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly or view it on GitHub
",Adlai-Holler,maicki
1663,2016-05-16 01:15:00,"Very interesting!  Still following this.  Adlai, it doesn’t seem urgent, but if you can reproduce Michael’s comments it seems like the main issue here was some transient problem in Cocoapods rc.

Although I’m not yet convinced we should make a change, if you have any reference that this style is preferred / expected for referencing files within a project (even in public headers), I’d be happy for us to adopt that.  The only reason I had the sense that framework includes were better is that the text of the header file is pulled into code being compiled at the application level, and in that context (no longer inside the framework), referencing other headers is properly done via the framework specifier.

> On May 15, 2016, at 2:00 PM, Adlai Holler notifications@github.com wrote:
> 
> No I'm hiking today, only talking about my experiences before I opened this PR. 
> 
> Sent from my iPhone
> 
> > On May 15, 2016, at 1:54 PM, Michael Schneider notifications@github.com wrote:
> > 
> > This didn't remove the Podfile.lock for me just look into the project folder. Did you try just deleting the Podfile.lock and call 'pod install' ? Be sure to use CocoaPods 1.0.0 and not the rc.
> > 
> > > On May 15, 2016, at 10:06 PM, Adlai Holler notifications@github.com wrote:
> > > 
> > > @maicki I used pod deintegrate which reports ""All traces of CocoaPods have been removed"" which must include Podfile.lock, but it didn't fix the build.
> > > 
> > > —
> > > You are receiving this because you were mentioned.
> > > Reply to this email directly or view it on GitHub
> > > 
> > > —
> > > You are receiving this because you were mentioned.
> > > Reply to this email directly or view it on GitHub
> > 
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1663#issuecomment-219310268
",appleguy,maicki
1663,2016-05-17 17:48:55,"Yep! Recreating the lock file under 1.0 fixes it. Thanks @maicki and @appleguy for a great review. Closing.
",Adlai-Holler,appleguy
1663,2016-05-17 17:48:55,"Yep! Recreating the lock file under 1.0 fixes it. Thanks @maicki and @appleguy for a great review. Closing.
",Adlai-Holler,maicki
1662,2016-06-04 21:19:14,"@Xinchi this is very clean!  My apologies for the super long review time, my international trip and the crazy preparation ahead of it was a perfect storm against PRs posted around this time.

I'm ready to merge this as soon as it is rebased and can merge.
",appleguy,Xinchi
1657,2016-06-09 20:08:47,"@hannahmbanana @appleguy  I think we had that issue on our Slack channel and it will be resolved by calling `setNeedsLayout`. Good to close in my opinion.

<img width=""650"" alt=""screen shot 2016-06-09 at 1 08 29 pm"" src=""https://cloud.githubusercontent.com/assets/25288/15944623/4b625b3e-2e43-11e6-8ada-40c9ebaef9e7.png"">
",maicki,hannahmbanana
1656,2016-05-13 01:54:59,"@Xinchi: Something went wrong in the merge commit and caused missing declarations of `ASCellNodeVisibilityEventWillBeginDragging` and `ASCellNodeVisibilityEventDidEndDragging`. This and nits aside, LGTM!
",nguyenhuy,Xinchi
1656,2016-06-04 21:39:09,"@Xinchi I've thought carefully about this and also discussed with @hannahmbanana about API naming.  My original opinion matched @binl and I think there is some question about the flexibility of the original API name.  Your work here matched it perfectly and is correct, it simply exposed some limitations in the flexibility of the original name choice.

However, after further consideration, I think we should move forward with this as-is.  I am likely to want to rename this to something more generic later, like ASCellNodeInterfaceEvent..., but this would be a breaking API change and is not worth doing at this moment (we should consider it for 2.0 though).

In the end, the reason I'm happy to land this is that I definitely agree the functionality is related to the use cases for the other values.  They are all related to a cell monitoring its relationship with the scrollable content area.  It is always possible to solve problems like this at the application level - however, ASDK's main goal is to provide conveniences wherever they don't get in the way / slow things down, specifically to reduce the complexity of application code and make powerful capabilities easy.  Avoiding the need for application level delegate patterns is definitely a simplification.

Thanks for carefully thinking about this, making a very clean change to core framework code, and advocating for why this is the right solution — as well as thinking through alternatives.

If you can rebase it, I'll merge ASAP.
",appleguy,Xinchi
1654,2016-05-16 13:36:07,"@maicki Hello, you were right.
",gonzo-oin,maicki
1653,2016-05-13 05:41:54,"@garrettmoon  I really love the concept of visibility distance, even the term. You did a phenomenal job coming up with this philosophical approach to abstracting navigation and memory management.   

Proactive memory management has always been cord to the framework methodology, but if this is a direction that has never been explored by it outside of special systems implemented by focused use cases in apps like Paper and Pinterest.

Abstracting it in this way will bring dramatic benefits to applications that do not have such systems, as well as even more efficient memory usage for large applications, all while reducing complexity. 

 Thanks for taking this on with a very rigorous approach to the problem, and refining it alongside @levi's helpful review feedback!
",appleguy,levi
1653,2016-05-13 05:41:54,"@garrettmoon  I really love the concept of visibility distance, even the term. You did a phenomenal job coming up with this philosophical approach to abstracting navigation and memory management.   

Proactive memory management has always been cord to the framework methodology, but if this is a direction that has never been explored by it outside of special systems implemented by focused use cases in apps like Paper and Pinterest.

Abstracting it in this way will bring dramatic benefits to applications that do not have such systems, as well as even more efficient memory usage for large applications, all while reducing complexity. 

 Thanks for taking this on with a very rigorous approach to the problem, and refining it alongside @levi's helpful review feedback!
",appleguy,garrettmoon
1650,2016-06-20 14:57:51,"Curious if this is related to the lack of thread safety in ASTextNode and will be resolved if we merge: #1749

@Adlai-Holler: Any thoughts on closing this in favor of #1749 and reopen it if it comes up again?
",maicki,Adlai-Holler
1648,2016-06-01 04:21:04,"@levi ping - I think we need to add some kind of consideration of the bounds value here.  E.g. there are cases like ASDisplayNode wrapping of synchronous elements where at most there is a preferredFrameSize set, or even nothing is set besides -layout performing the positioning.  These cases may still require a placeholder, as CA's synchronous layout pass / onscreen visibility of the element may occur before async rendering is done.
",appleguy,levi
1648,2016-06-06 02:16:30,"@appleguy, @maicki has a better solution for this already landed. Closing out.
",levi,appleguy
1642,2016-12-22 16:47:34,"@appleguy thank you for detailed answer, I've been used this for a while.

Any updates in ASDK 2.0?",Jauzee,appleguy
1640,2016-05-10 15:41:39,"@bimawa: As discussed on Slack, does Implicit Node Hierarchy Management suffice? Or is there some other functionality that is missing?

http://asyncdisplaykit.org/docs/implicit-hierarchy-mgmt.html

This is a beta feature developed by @levi that will soon be on by default. When enabled, Implicit Node Hierarchy Management means that your nodes no longer require addSubnode: or removeFromSupernode method calls. The presence or absence of the INHM node and its subnodes are determined in the layoutSpecThatFits: method.
",hannahmbanana,bimawa
1640,2016-05-11 06:42:32,"@hannahmbanana @levi yes a little bit another functional i want. What we have today:



its epic hard to understanding and overkill at first time with additional `if` cases. What i need for simple disable/enable layoutSpec;



Pretty cool? more usefull, and clear for understand?

How i think we must add new property `gone` or similar for `ASLayoutSpec` class.
",bimawa,hannahmbanana
1640,2016-05-11 17:43:49,"@bimawa you're on to something here. Would you have time to put together a pull request with a general implementation for a gone property? I'd be more than happy to provide assistance on areas of the framework you are not familiar with.
",levi,bimawa
1640,2016-05-11 17:44:05,"Here's the summary from the Slack conversation: 
- @nguyenhuy: Very cool idea! I imagine this `gone` property can be used to simplify layout code in many cases. One minor downside of it is that it makes the layout system a bit less declarative. do you have any thoughts about its implementation?
- @bimawa: I have only one idea its add property to ASLayoutSpec class. But maybe community can invent better ideas? but like u spot its make a bit less declarative. But from another side its property like `flexShrink` similar props. We can try add this to `ASLayoutable.h` protocol. Call it like `flexVisible` with default propery `YES` and if this property is `NO` skip Spec from calculation in layouts.
- @nguyenhuy: that’s one good approach. The thing I’m concerning is how this implementation would affect other properties, especially stack related ones. I need a bit more time to think about this. Could you explore this option and perhaps put up a PR? It will definitely help us to have a better idea and open detailed discussions
",hannahmbanana,bimawa
1640,2016-05-12 04:16:36,"@levi i start reserach and implement this feature on the weekends. Thanks for ready to help :) 
",bimawa,levi
1640,2016-05-15 09:34:06,"@levi what is the best a branch for fork?
",bimawa,levi
1640,2016-05-15 16:12:24,"@bimawa master is the best
",levi,bimawa
1640,2016-05-29 07:01:30,"@levi  i try it, Must I make pullRequest? or u can help in my repository? 
For use if u want hide ASLayoutSpec just set flexGone property to YES;
",bimawa,levi
1640,2016-06-06 05:59:55,"@bimawa: When you ready, you can make a pull request to this repository.
",hannahmbanana,bimawa
1640,2016-06-06 06:08:54,"@hannahmbanana  yea ty, community have a questions with new name of param. I can make PR now, or refactor property name before.
",bimawa,hannahmbanana
1640,2016-06-06 06:13:00,"I am not sure what a better name is. I would recommend you put up a pull request now, and the discussion will lead us to any naming improvements, which there might not be any required.

It is very easy to update a pull request; you can simply push new commits to your branch that you created it from, and those will automatically affect the PR.  Opening a PR basically just points to one of your branches, so it's very similar to what you have now.

> On Jun 5, 2016, at 11:08 PM, Maxim Bunkov notifications@github.com wrote:
> 
> @hannahmbanana https://github.com/hannahmbanana yea ty, community have a questions with new name of param. I can make PR now, or refactor property name before.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1640#issuecomment-223875727, or mute the thread https://github.com/notifications/unsubscribe/AAigA1SkXo8cYRJy2eAFOlo6ZzjG2vU1ks5qI7l6gaJpZM4IbG7r.
",appleguy,hannahmbanana
1640,2016-06-06 06:22:51,"@appleguy  ok Scott, Thanks a lot for help. I go do it.
",bimawa,appleguy
1640,2016-06-06 06:43:46,"@bimawa: I am happy to help you with putting up the PR if you run into any trouble. 
",hannahmbanana,bimawa
1640,2016-06-06 07:00:03,"@hannahmbanana No problems Hannah, I know how to make PR  thank you :) I need a little bit time just every days is deadline >:)
",bimawa,hannahmbanana
1638,2016-05-11 07:58:23,"@levi it does fix it. It's funny though because when I was returning `nil` in case the `visibleRanges` were empty and logging the size I was seeing some a lot of non-zero sizes coming up so I thought this was not going to fix it because of that but it did... 

I'm probably gonna wait until the next release to update ASDK but thanks for taking a look into it.
",pixel4,levi
1638,2016-06-07 19:12:00,"@maicki just tested it man! It's fixed now, thanks ; )
",pixel4,maicki
1632,2016-05-10 01:06:47,"This change LGTM.

@Adlai-Holler The regeneration of UIImage's on request _is_ an unfortunate side effect :/ I thought it better to store only the NSData for alternate representation support. The only way I can see around this is to also store the UIImage which is essentially a copy of the NSData.

I'm open to suggestions around changing ASPINRemoteImageDownloader to use the public instance. The specific problem with that is the version used by ASDK needs to be the alternative representation provider.

Do you think we should expose sharedPINRemoteImageManager? Can you think of another solution?
",garrettmoon,Adlai-Holler
1632,2016-05-10 01:36:20,"@garrettmoon Would it be possible to use NSDatas when the image was created with an alternate representation and UIImages otherwise? It's definitely not critically urgent but I think that would work.

Maybe make `alternateRepresentationProvider` publicly mutable and nullable on PINRemoteImageManager.  Then `ASPINRemoteImageDownloader` can dispatch-once set itself on the shared manager, if the user hasn't already set some other provider.
",Adlai-Holler,garrettmoon
1632,2016-05-10 01:59:28,"@Adlai-Holler The problem with storing the UIImage or NSData depending is that you can opt out of an alternative representation on a per-request basis. This means one request could ask for an alternative representation and then the next opt out. Because there's no NSData, we can't fulfill that request without hitting the disk cache.

The reason I didn't make alternativeRepresentationProvider a mutable property is that we'd need to add some sort of locking mechanism for reading it. Currently, PINRemoteImage never locks on the main thread and I was hoping to continue that :( There may be a way around this using atomic swaps, but I haven't looked into it.
",garrettmoon,Adlai-Holler
1631,2016-05-07 00:49:01,"@hannahmbanana thanks! I didn't check the documentation for some time, it's greatly improved!
I have one question: shouldn't we return cellNode instead of ASCellNode() here?


",jsspalding,hannahmbanana
1631,2016-05-07 01:12:24,"@hannahmbanana sure, I'm not an obj-c developer but I can understand it :)
I can confirm this one for you, I'm 100% sure that we should return the cellNode we just created with `let cellNode`.
I have just implemented `nodeBlockForRowAtIndexPath` to replace `nodeForRowAtIndexPath` and the behaviour is exactly the same as https://github.com/facebook/AsyncDisplayKit/issues/1631#issuecomment-217585646.
I will check the Slack channel soon! Thanks!
",jsspalding,hannahmbanana
1631,2016-05-07 01:28:11,"@jsspalding @hannahmbanana In terms of documentation - yes it should return cellNode in that block for the documentation
",maicki,hannahmbanana
1631,2016-05-07 01:45:24,"@jsspalding @appleguy This behavior is intentional as @appleguy already explained, otherwise batch fetch would never be called after the first layout if the first page content size is smaller as the bounds of the ASCollectionView or the ASTableView.

Furthermore to the question of @appleguy we wait until the first batch or reload finished until we actually try to check if we should do a batch fetch as we call them in delegate methods after sections / nodes or animations are finished.

@jsspalding btw also look at http://asyncdisplaykit.org/docs/batch-fetching-api.html for a documentation of the batch api and look for: `shouldBatchFetchForCollectionView:` in case you didn't see that API yet.
",maicki,appleguy
1631,2016-05-07 15:28:38,"@maicki thanks for the info. Still, I'm failing to understand why batchFetch is being called before the tableNode.view.contentSize has any chance to be greater than zero.

Please, you can confirm this behaviour with the ASDK Swift example.
The only change needed is at `ViewController.swift` line 20, increase the itemCount so the height of the contents would be way higher than the default 2 screens ahead for loading.

From:
`static let empty = State(itemCount: 20, fetchingMore: false)`
To:
`static let empty = State(itemCount: 400, fetchingMore: false)`

As I see what @appleguy said, in this case batchFetch should _not_ be triggered.
This is generating an undesired/unnecessary network call asking for more content in my app.
I think the issue here is that batchFetch is being called before contentSize has any chance to be greater than zero.

Please guys, I will really appreciate if you can confirm this behaviour.

If it's correct the way it is, I will implement the @appleguy suggestion of set the number of screens ahead to 0 and then change it once I see the first scrollViewDidBeginScrolling, although it looks like a workaround to me.
",jsspalding,appleguy
1631,2016-05-07 15:28:38,"@maicki thanks for the info. Still, I'm failing to understand why batchFetch is being called before the tableNode.view.contentSize has any chance to be greater than zero.

Please, you can confirm this behaviour with the ASDK Swift example.
The only change needed is at `ViewController.swift` line 20, increase the itemCount so the height of the contents would be way higher than the default 2 screens ahead for loading.

From:
`static let empty = State(itemCount: 20, fetchingMore: false)`
To:
`static let empty = State(itemCount: 400, fetchingMore: false)`

As I see what @appleguy said, in this case batchFetch should _not_ be triggered.
This is generating an undesired/unnecessary network call asking for more content in my app.
I think the issue here is that batchFetch is being called before contentSize has any chance to be greater than zero.

Please guys, I will really appreciate if you can confirm this behaviour.

If it's correct the way it is, I will implement the @appleguy suggestion of set the number of screens ahead to 0 and then change it once I see the first scrollViewDidBeginScrolling, although it looks like a workaround to me.
",jsspalding,maicki
1631,2016-05-11 02:44:27,"@maicki: sorry to bug you again, but are you able to answer this question? This does sound odd. 
",hannahmbanana,maicki
1631,2016-05-11 19:59:30,"@jsspalding I can confirm that the actual implementation is not optimal and I'm currently working on improving batch fetching that should fix this issue. At the moment I think you should go with @appleguy suggestion

cc @hannahmbanana @appleguy 
",maicki,appleguy
1631,2016-05-11 19:59:30,"@jsspalding I can confirm that the actual implementation is not optimal and I'm currently working on improving batch fetching that should fix this issue. At the moment I think you should go with @appleguy suggestion

cc @hannahmbanana @appleguy 
",maicki,hannahmbanana
1631,2016-05-11 20:02:51,"@maicki thank you!
",jsspalding,maicki
1629,2016-05-10 21:18:14,"@erichoracek really strong stuff! Thanks so much for this patch. Would you be able to add some test cases to the supplementary node example project? This will help outline the given scenario and prove the solution.

I'm looking forward to getting this in!
",levi,erichoracek
1629,2016-05-11 06:54:14,"@levi Thanks! The one example project I see with supplementary nodes is the `CustomCollectionView` project with the `MosaicCollectionViewLayout`. However, as far as I can tell, this collection view layout doesn't draw supplementary views for each item in the collection—rather there is only a single header supplementary view for each section. This PR is specifically attempting to fix the case where there is a supplementary view for each item in a collection view (e.g. inter-item separators) and batch updates are made to the items in the section. As such, does it make sense to add a new example project?
",erichoracek,levi
1629,2016-05-14 06:49:02,"@erichoracek Could you update to fix conflicts?  Sorry I didn't get to this in time to avoid them!  I will land this as soon as I notice (feel free to send me a Slack)
",appleguy,erichoracek
1629,2016-05-16 07:46:36,"@appleguy One small comment, but overall looks good to me.
",maicki,appleguy
1629,2016-06-06 01:23:55,"@erichoracek Hi Eric - I'm back from Vietnam and Cambodia!  I believe the same conflicts are still present.  If you can ping me on Slack once they're fixed, I'll merge straight away.  Thanks for working on this!
",appleguy,erichoracek
1629,2016-06-06 04:58:35,"@appleguy Awesome! Should be rebased with master—be sure to let me know if there's anything else that looks like it needs to be changed. Thanks!
",erichoracek,appleguy
1629,2016-06-06 05:36:49,"@erichoracek Diving save to join the 1.9.8 release!!  Thanks for the super quick response, you are in :)

I'd love to hear about your experiences with the framework sometime -- if you are on Slack, let's see if a call (or meet at WWDC!) would equip both of us with new information about our craft.
",appleguy,erichoracek
1628,2016-05-11 17:33:07,"@hannahmbanana I can't really say for sure until this app gets out in the wild. I wasn't really able to repro any of these crashes. They were happening for like 2-3% of our users. I can always reopen if I see it again if you want to close
",tettoffensive,hannahmbanana
1628,2016-05-17 17:21:19,"@hannahmbanana @appleguy The first crash seems to be resolved. But still getting a lot of instances of the second crash. So I guess fixing the node block thread safety issue didn't fix that one. I still haven't gotten it to happen for myself. but it seems to be occurring frequently in production.


",tettoffensive,appleguy
1628,2016-05-17 17:21:19,"@hannahmbanana @appleguy The first crash seems to be resolved. But still getting a lot of instances of the second crash. So I guess fixing the node block thread safety issue didn't fix that one. I still haven't gotten it to happen for myself. but it seems to be occurring frequently in production.


",tettoffensive,hannahmbanana
1628,2016-05-17 17:40:39,"Do you have the text of the exception itself?  That’s quite important for this one.  Crashlytics should show it.  This is normally a data source inconsistency where something about your dataSource has changed in a way that the timing is not quite right with how the edit transaction is done.  If we can find some other issue, this is certainly something we’d leap on investigating.

> On May 17, 2016, at 10:21 AM, Stuart Tett notifications@github.com wrote:
> 
> @hannahmbanana https://github.com/hannahmbanana @appleguy https://github.com/appleguy The first crash seems to be resolved. But still getting a lot of instances of the second crash. So I guess fixing the node block thread safety issue didn't fix that one. I still haven't gotten it to happen for myself. but it seems to be occurring frequently in production.
> 
> Fatal Exception: NSInternalInconsistencyException
> 0  CoreFoundation                 0x1839d2e38 **exceptionPreprocess
> 1  libobjc.A.dylib                0x183037f80 objc_exception_throw
> 2  CoreFoundation                 0x1839d2d08 +[NSException raise:format:]
> 3  Foundation                     0x184358124 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:]
> 4  UIKit                          0x189369938 -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:]
> 5  UIKit                          0x18936e518 -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:]
> 6  UIKit                          0x18936e394 -[UICollectionView _performBatchUpdates:completion:invalidationContext:]
> 7  UIKit                          0x188d0c24c -[UICollectionView performBatchUpdates:completion:]
> 8  AsyncDisplayKit                0x100915040 __69-[ASCollectionView rangeController:didEndUpdatesAnimated:completion:]_block_invoke (ASCollectionView.mm:934)
> 9  AsyncDisplayKit                0x100914f04 -[ASCollectionView rangeController:didEndUpdatesAnimated:completion:](ASInternalHelpers.h:48)
> 10 AsyncDisplayKit                0x100950b8c __66-[ASRangeController dataController:endUpdatesAnimated:completion:]_block_invoke (ASRangeController.mm:343)
> 11 AsyncDisplayKit                0x10093dec4 ASPerformBlockOnMainThread (ASInternalHelpers.mm:53)
> 12 AsyncDisplayKit                0x100950b00 -[ASRangeController dataController:endUpdatesAnimated:completion:](ASRangeController.mm:345)
> 13 AsyncDisplayKit                0x10091d47c __50-[ASDataController endUpdatesAnimated:completion:]_block_invoke_3 (ASDataController.mm:577)
> 14 AsyncDisplayKit                0x1009426c8 __30-[ASMainSerialQueue runBlocks]_block_invoke (ASMainSerialQueue.mm:54)
> 15 libdispatch.dylib              0x18341d4bc _dispatch_call_block_and_release
> 16 libdispatch.dylib              0x18341d47c _dispatch_client_callout
> 17 libdispatch.dylib              0x183422b84 _dispatch_main_queue_callback_4CF
> 18 CoreFoundation                 0x183988dd8 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE**
> 19 CoreFoundation                 0x183986c40 __CFRunLoopRun
> 20 CoreFoundation                 0x1838b0d10 CFRunLoopRunSpecific
> 21 GraphicsServices               0x185198088 GSEventRunModal
> 22 UIKit                          0x188b85f70 UIApplicationMain
> 23 Channels                       0x1001138f8 main (main.m:16)
> 24 libdispatch.dylib              0x18344e8b8 (Missing)
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1628#issuecomment-219789949
",appleguy,appleguy
1628,2016-05-17 17:40:39,"Do you have the text of the exception itself?  That’s quite important for this one.  Crashlytics should show it.  This is normally a data source inconsistency where something about your dataSource has changed in a way that the timing is not quite right with how the edit transaction is done.  If we can find some other issue, this is certainly something we’d leap on investigating.

> On May 17, 2016, at 10:21 AM, Stuart Tett notifications@github.com wrote:
> 
> @hannahmbanana https://github.com/hannahmbanana @appleguy https://github.com/appleguy The first crash seems to be resolved. But still getting a lot of instances of the second crash. So I guess fixing the node block thread safety issue didn't fix that one. I still haven't gotten it to happen for myself. but it seems to be occurring frequently in production.
> 
> Fatal Exception: NSInternalInconsistencyException
> 0  CoreFoundation                 0x1839d2e38 **exceptionPreprocess
> 1  libobjc.A.dylib                0x183037f80 objc_exception_throw
> 2  CoreFoundation                 0x1839d2d08 +[NSException raise:format:]
> 3  Foundation                     0x184358124 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:]
> 4  UIKit                          0x189369938 -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:]
> 5  UIKit                          0x18936e518 -[UICollectionView _performBatchUpdates:completion:invalidationContext:tentativelyForReordering:]
> 6  UIKit                          0x18936e394 -[UICollectionView _performBatchUpdates:completion:invalidationContext:]
> 7  UIKit                          0x188d0c24c -[UICollectionView performBatchUpdates:completion:]
> 8  AsyncDisplayKit                0x100915040 __69-[ASCollectionView rangeController:didEndUpdatesAnimated:completion:]_block_invoke (ASCollectionView.mm:934)
> 9  AsyncDisplayKit                0x100914f04 -[ASCollectionView rangeController:didEndUpdatesAnimated:completion:](ASInternalHelpers.h:48)
> 10 AsyncDisplayKit                0x100950b8c __66-[ASRangeController dataController:endUpdatesAnimated:completion:]_block_invoke (ASRangeController.mm:343)
> 11 AsyncDisplayKit                0x10093dec4 ASPerformBlockOnMainThread (ASInternalHelpers.mm:53)
> 12 AsyncDisplayKit                0x100950b00 -[ASRangeController dataController:endUpdatesAnimated:completion:](ASRangeController.mm:345)
> 13 AsyncDisplayKit                0x10091d47c __50-[ASDataController endUpdatesAnimated:completion:]_block_invoke_3 (ASDataController.mm:577)
> 14 AsyncDisplayKit                0x1009426c8 __30-[ASMainSerialQueue runBlocks]_block_invoke (ASMainSerialQueue.mm:54)
> 15 libdispatch.dylib              0x18341d4bc _dispatch_call_block_and_release
> 16 libdispatch.dylib              0x18341d47c _dispatch_client_callout
> 17 libdispatch.dylib              0x183422b84 _dispatch_main_queue_callback_4CF
> 18 CoreFoundation                 0x183988dd8 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE**
> 19 CoreFoundation                 0x183986c40 __CFRunLoopRun
> 20 CoreFoundation                 0x1838b0d10 CFRunLoopRunSpecific
> 21 GraphicsServices               0x185198088 GSEventRunModal
> 22 UIKit                          0x188b85f70 UIApplicationMain
> 23 Channels                       0x1001138f8 main (main.m:16)
> 24 libdispatch.dylib              0x18344e8b8 (Missing)
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1628#issuecomment-219789949
",appleguy,hannahmbanana
1626,2016-05-09 03:57:19,"@hannahmbanana  Thanks for the suggestion. However, our requirement is such that we need to show a infinitely rotating spinner when the image is downloading. It would be helpful if we can look into the issue.
",ShaunakP,hannahmbanana
1624,2016-05-06 00:55:54,"@appleguy: LGTM
",nguyenhuy,appleguy
1624,2016-05-10 00:59:10,"@appleguy LGTM. Land away!
",levi,appleguy
1622,2016-05-05 00:09:19,"Really great stuff, @maicki! I can imagine this wasn't easy to find.
",levi,maicki
1622,2016-05-07 02:21:47,"@maicki amazing investigatory work here!  It's a testament to your understanding of the code that the lines changed is relatively small.
",appleguy,maicki
1619,2016-05-04 18:26:50,"OK understood. I definitely don't want to rush this through but I believe it's a critical stepping stone toward getting the best of both worlds with ASDK – guarantees about initial states + smooth lookahead/concurrent rendering.

@maicki If you've got bandwidth, let's work together on this. We'll iterate a little more before @appleguy jumps in.
",Adlai-Holler,appleguy
1619,2016-05-16 08:09:17,"@Adlai-Holler Overall looks good to me!

I'm just a bit worried about the performance impact we will hit if we update more synchronously instead of batching it once per run loop. Did you do any testing around it?

Would also be interesting to understand more why `self.visibleCells -> [self indexPathForCell:]` will return nil if called synchronously from `-willDisplayCell:forRowAtIndexPath`. Could there be other side effects we could ran into if we synchronously update?
",maicki,Adlai-Holler
1619,2016-05-20 20:08:36,"Great points @maicki! With them in mind, I'm thinking about how to improve this approach. I'm just going to store some thoughts here as I attack this.

### The Goal

We want to update the range controller **synchronously**, just **after** each **batch** of visible node changes is committed.
- _After_ because during `willDisplayCell:` the cell isn't quite setup for the new item (i.e. in the hierarchy, in the lookup tables, at the correct frame) yet, so unexpected behavior (like the indexPathForCell: failing) may occur if we pretend otherwise.
- _Synchronous_ because we want to guarantee that the range state is correct before the next frame is drawn.
- _Batch_ because it's potentially expensive to recalculate the ranges more than once per layout change. **Q** I haven't profiled this yet – it would be good to know the relative cost.

### How UITableView/UICollectionView Change Visible Index Paths

There are three reasons for a visible index paths change:
1. bounds change (scrolling, resizing). 
   - This case is pretty easy to cover. Table view and collection view always perform visible cell changes during `layoutSubviews`.
   - We can simply add a flag like `visibleIndexPathsDidChangeDuringLayoutSubviews`, and check it after `[super layoutSubviews]`.
   - If it's changed, then we tell the range controller to update.
2. A batch of editing operations that intersects the visible area.
3. A single editing operation that intersects the visible area.

### Our Hooks
- `willDisplayCell:` This is called just before a cell is assigned an index path and added into the view. Note that the cell may already be in the view (for some previous item) or it may not.
- `didEndDisplayingCell:` This is called just after a cell is unassigned its index path. Note that the cell may be removed from the view or it may not.
- `super layoutSubviews:` Useful override point.
- `super performBatchUpdates:` Useful override point. UICollectionView synchronously updates visible cells during this, including calls to `willDisplay:` and `didEndDisplaying:`
- `super insert/delete/move/reload:` We call these and I suspect **Q** that collection view & table view synchronously update the visible index paths if these are called outside a batch.

### Other Case: Update Animation End

When a table view (**Q** also collection view?) update animation ends, we may get a `didEndDisplayingCell:` call. This can't be predicted and it's not tied into the UIKit layout passes. Unfortunately, the only case where we get a update animation completion hook is in the UICollectionView batch update case. 

We could expand that hook to cover all updates, if we always wrap isolated update calls (e.g. `insertItemsAtIndexPaths:`) in batch updates but that still leaves us out in the cold for table view updates. As far as I know, there is no table view update animation completion hook.

I'm going to keep playing with this and mulling it over, because it's so valuable and yet so delicate. Feedback/thoughts much appreciated @maicki @appleguy @nguyenhuy 
",Adlai-Holler,appleguy
1619,2016-05-20 20:08:36,"Great points @maicki! With them in mind, I'm thinking about how to improve this approach. I'm just going to store some thoughts here as I attack this.

### The Goal

We want to update the range controller **synchronously**, just **after** each **batch** of visible node changes is committed.
- _After_ because during `willDisplayCell:` the cell isn't quite setup for the new item (i.e. in the hierarchy, in the lookup tables, at the correct frame) yet, so unexpected behavior (like the indexPathForCell: failing) may occur if we pretend otherwise.
- _Synchronous_ because we want to guarantee that the range state is correct before the next frame is drawn.
- _Batch_ because it's potentially expensive to recalculate the ranges more than once per layout change. **Q** I haven't profiled this yet – it would be good to know the relative cost.

### How UITableView/UICollectionView Change Visible Index Paths

There are three reasons for a visible index paths change:
1. bounds change (scrolling, resizing). 
   - This case is pretty easy to cover. Table view and collection view always perform visible cell changes during `layoutSubviews`.
   - We can simply add a flag like `visibleIndexPathsDidChangeDuringLayoutSubviews`, and check it after `[super layoutSubviews]`.
   - If it's changed, then we tell the range controller to update.
2. A batch of editing operations that intersects the visible area.
3. A single editing operation that intersects the visible area.

### Our Hooks
- `willDisplayCell:` This is called just before a cell is assigned an index path and added into the view. Note that the cell may already be in the view (for some previous item) or it may not.
- `didEndDisplayingCell:` This is called just after a cell is unassigned its index path. Note that the cell may be removed from the view or it may not.
- `super layoutSubviews:` Useful override point.
- `super performBatchUpdates:` Useful override point. UICollectionView synchronously updates visible cells during this, including calls to `willDisplay:` and `didEndDisplaying:`
- `super insert/delete/move/reload:` We call these and I suspect **Q** that collection view & table view synchronously update the visible index paths if these are called outside a batch.

### Other Case: Update Animation End

When a table view (**Q** also collection view?) update animation ends, we may get a `didEndDisplayingCell:` call. This can't be predicted and it's not tied into the UIKit layout passes. Unfortunately, the only case where we get a update animation completion hook is in the UICollectionView batch update case. 

We could expand that hook to cover all updates, if we always wrap isolated update calls (e.g. `insertItemsAtIndexPaths:`) in batch updates but that still leaves us out in the cold for table view updates. As far as I know, there is no table view update animation completion hook.

I'm going to keep playing with this and mulling it over, because it's so valuable and yet so delicate. Feedback/thoughts much appreciated @maicki @appleguy @nguyenhuy 
",Adlai-Holler,maicki
1619,2016-06-06 03:53:54,"@appleguy Happy to do it! Feels good to be back in this code, especially with the optimization/simplification I was able to pull off for `-[ASTableView visibleNodeIndexPathsForRangeController:]`
",Adlai-Holler,appleguy
1619,2016-06-06 16:06:15,"@appleguy OK I think this one's ready for another review! 
",Adlai-Holler,appleguy
1619,2016-06-20 18:50:56,"This PR got pretty huge =/. Here's what ended up happening:
- Remove `ASRangeController.scrollDirection` and replace with new data source method `scrollDirectionForRangeController:`
- ASRangeController now exposes 2 update methods `setNeedsUpdate` and `updateIfNeeded`
- setNeedsUpdate sets a flag and (if needed) enqueues an `updateIfNeeded` call onto the main queue
- updateIfNeeded clears the flag and performs the update
- Table and collection view call setNeedsUpdate in willDisplayCell:/didDisplayCell:
- Table and collection view call `updateIfNeeded` after `-layoutSubviews`, after submitting data update operations, and after update animations end (only supported for collection view.)
- Optimize `ASTableView.indexPathsForVisibleNodes:` significantly
- Add conditional code to ASRangeController to log frames that contain multiple range updates.
  - Currently during scrolling we never see this, but we sometimes see 2-5 updates during the same frame when update operations are occurring or when table/collections appear.
  - The code in `-[Collection/Table didMoveToWindow:]` needs scrutiny. Are both calls necessary?
- Move enforcement of cell node neverShowPlaceholders into the cell node's visibility callback, out from willDisplayCell:. This way `ensureDisplay` is called after the cell is already added to the hierarchy, and it also reduces class interdependency.

Notes:
- In -[ASCollectionView layoutSubviews] I had to gate the -updateIfNeeded behind `if (self.window != nil)`. If this isn't present, the client app crashes (~80% reliable) with a collection view data integrity problem under certain conditions. It's a very weird issue, I dug into it a little and bailed because we'll flush the range update in didMoveToWindow anyway.

Questions:
- ASRangeController has a `_rangeIsValid` flag that seems to trigger a re-evaluation of the range states of all nodes when the collection view data is updated. Is that correct? I'm thinking we rename it to avoid confusion between `_rangeIsValid` and the new `_needsRangeUpdate` flag.

This has been tested thoroughly but it's obviously a very significant change to very important code. Sorry for the burden, but I think it'll be worth it! Feel free to meet with me in person as needed. Need review @appleguy @maicki @nguyenhuy 
",Adlai-Holler,appleguy
1619,2016-06-20 18:50:56,"This PR got pretty huge =/. Here's what ended up happening:
- Remove `ASRangeController.scrollDirection` and replace with new data source method `scrollDirectionForRangeController:`
- ASRangeController now exposes 2 update methods `setNeedsUpdate` and `updateIfNeeded`
- setNeedsUpdate sets a flag and (if needed) enqueues an `updateIfNeeded` call onto the main queue
- updateIfNeeded clears the flag and performs the update
- Table and collection view call setNeedsUpdate in willDisplayCell:/didDisplayCell:
- Table and collection view call `updateIfNeeded` after `-layoutSubviews`, after submitting data update operations, and after update animations end (only supported for collection view.)
- Optimize `ASTableView.indexPathsForVisibleNodes:` significantly
- Add conditional code to ASRangeController to log frames that contain multiple range updates.
  - Currently during scrolling we never see this, but we sometimes see 2-5 updates during the same frame when update operations are occurring or when table/collections appear.
  - The code in `-[Collection/Table didMoveToWindow:]` needs scrutiny. Are both calls necessary?
- Move enforcement of cell node neverShowPlaceholders into the cell node's visibility callback, out from willDisplayCell:. This way `ensureDisplay` is called after the cell is already added to the hierarchy, and it also reduces class interdependency.

Notes:
- In -[ASCollectionView layoutSubviews] I had to gate the -updateIfNeeded behind `if (self.window != nil)`. If this isn't present, the client app crashes (~80% reliable) with a collection view data integrity problem under certain conditions. It's a very weird issue, I dug into it a little and bailed because we'll flush the range update in didMoveToWindow anyway.

Questions:
- ASRangeController has a `_rangeIsValid` flag that seems to trigger a re-evaluation of the range states of all nodes when the collection view data is updated. Is that correct? I'm thinking we rename it to avoid confusion between `_rangeIsValid` and the new `_needsRangeUpdate` flag.

This has been tested thoroughly but it's obviously a very significant change to very important code. Sorry for the burden, but I think it'll be worth it! Feel free to meet with me in person as needed. Need review @appleguy @maicki @nguyenhuy 
",Adlai-Holler,maicki
1619,2016-07-06 06:18:48,"@Adlai-Holler sorry I haven't been able to review this yet - if this is blocked on me, could you let me know & also send me a list of any other PRs that you'd say are blocked on me?

@eanagel has the background on the pending index path.  Unfortunately it was very necessary and we were able to prove that UITableView does not necessarily include information that we expected it should be guaranteed to.  I looked into the history around this in detail about a month ago, it can be found by seeking back through various PRs and related issues.  It would be fantastic to eliminate.

@eanagel if you have any mechanism for us to test that original issue - I think you had a test project, or at least ability to reproduce it in your app - that would help.  Running your app against this PR would in fact be of phenomenal value to the community.
",appleguy,Adlai-Holler
1619,2016-07-12 20:55:40,"@Adlai-Holler One comment but otherwise looks good

@appleguy @Adlai-Holler We should get that in soon so we have some time to test it before the next cut
",maicki,appleguy
1619,2016-07-12 20:55:40,"@Adlai-Holler One comment but otherwise looks good

@appleguy @Adlai-Holler We should get that in soon so we have some time to test it before the next cut
",maicki,Adlai-Holler
1618,2016-05-05 03:21:37,"@garrettmoon could you include a full backtrace of the locked threads, both for documentation and reviewers' understanding?  Thanks a ton for investigating, then fixing this!
",appleguy,garrettmoon
1611,2016-05-06 16:34:09,"@appleguy This is tracked with Ship issue nr: 110

I just run into that issue while fixing some layout issues with ASVideoNode see #1630 . The problem was that as constrainedSize in `layoutSpecThatFits:` an infinite width was passed in. As this issue is describing, layout nodes or set size ranges with infinite values is not possible and results with a crash. What we do is to catch that and see if a `preferredFrameSize` is given for the ASVideoNode otherwise assert out and let the consumer know to set a `preferredFrameSize` in this case.

To address the root issue in here I think we should catch infinite values in `layoutSpecThatFits:` or `calculateSizeThatFits:` constrainedSize values that do not make sense and let the developer know that they have to set values (like preferredFrameSize or sizeRange+ASStackLayout) for this kind of situations.

Btw we can have the same situation in `ASImageNode` if no preferredFrameSize or image size if given in time of layout.
",maicki,appleguy
1611,2016-05-31 23:51:07,"@adamastern I fixed a related issue today: #1701 

`calculateSizeThatFits` does not return ""Infinite"" anymore and there should be not crash anymore if you put a `ASEditableTextNode` in a unconstrained layout spec. The logic around size calculation is now the same as `ASTextNode`.

Let me know if this resolves the issue.

cc @appleguy 
",maicki,appleguy
1611,2016-06-01 04:06:06,"Wow, super-great!

> On Jun 1, 2016, at 6:51 AM, Michael Schneider notifications@github.com wrote:
> 
> @adamastern https://github.com/adamastern I fixed a related issue today: #1701 https://github.com/facebook/AsyncDisplayKit/issues/1701
> The size does not return ""Infinite"" anymore. It should not crash anymore if you put a ASEditableTextNode within a unconstrained layout spec. The logic around size calculation is now the same as ASTextNode. Let me know if this resolves the issue.
> 
> cc @appleguy https://github.com/appleguy
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1611#issuecomment-222854964, or mute the thread https://github.com/notifications/unsubscribe/AAigA7U77k1sfdIzIWe0sUR6JwvQXD4Lks5qHMlugaJpZM4IVELj.
",appleguy,appleguy
1611,2016-06-12 00:26:12,"Thanks @maicki looks great! This resolves the issue for me.
",adamastern,maicki
1609,2016-05-01 22:19:35,"@lappp9 we do have a Ship task filed to revisit ASDimension, as well as both sizeRange and preferredFrameSize, as blocking elements of 2.0.  The main problem is staffing, which we've needed to allocate to shorter term urgencies rather than these improvements (despite their very high importance and relatively modest scope).

cc @maicki, @nguyenhuy, @levi, @rcancro I think it is important for our work at Pinterest - and by extension, the entire community - to address this in the next few weeks.  It also affects the tutorial that @lappp9 is writing, and has held the launch of in order to wait for us to make these API revisions.
",appleguy,lappp9
1609,2016-08-14 22:29:04,"@lappp9: @maicki is currently working creating a new & improved Layout API for the 2.0 release that was specifically designed to address the top 5 ""pain points"" of the current Layout API, one of which is the ASRelativeDimension confusion. :) 

I believe Michael is currently considering something similar to this line of thought. Once he has a PR up, I'm sure he'd appreciate your feedback. 
",hannahmbanana,lappp9
1608,2016-05-02 15:59:26,"@Eke They look good to me! Thanks for fixing them! @appleguy is it possible to merge this pull request after your review?
",Xinchi,Eke
1608,2016-05-04 21:28:32,"@Eke @Xinchi Added some smaller comments but overall looks fine
",maicki,Eke
1608,2016-05-04 21:28:32,"@Eke @Xinchi Added some smaller comments but overall looks fine
",maicki,Xinchi
1608,2016-05-05 01:20:43,"Hi @Eke , can you give some use cases of ASVideoNodePlayerState?  In general we should avoid making breaking API changes in such a large framework,  I am thinking maybe it's a better idea to separate the API change from other changes, including adding the periodic observers..etc.   Would you mind sending a separate PR for adding the observers for now? 
",Xinchi,Eke
1608,2016-05-05 03:24:12,"@Eke Thanks for this very awesome set of extensions!  We actually need some of these features in Pinterest and are merging with intent to sync up to master and start using it right away :).

Main feedback: it does not make sense to return NO for should enter player state Finished.  So I worry that it is possible that the state is not sufficiently broken up into logically distinct categories that integrate with the delegate methods in a fully consistent way.  I won't have time to think about a better solution soon, and it's not urgent to change, but I do worry about making breaking API changes here once we get around to a refinement so the sooner we think of an improvement, the better!  2.0 is a good time to make the breaking changes of this sort though so we have at least a month, don't rush on your side.
",appleguy,Eke
1608,2016-05-05 08:38:14,"@appleguy user can't return NO for player state Finished, because `videoNode:shouldChangePlayerStateTo` method is not event called for this state, it is called only for play/pause action at this moment. I will try to find some better solution for this case. We can discuss this in slack channel with other people too.

Hello again @Xinchi  ! Thanks for your help! I

Will try to write one case here, but can make some example application too.

For example, we have some kind of video content app where we have pre-roll Ads and we don't want user to be able to pause ad. In this case we can implement `videoNode:shouldChangePlayerStateTo` and return NO for `ASVideoNodePlayerStatePaused` change. Or for example we don't want user to play video if another video is playing at this moment or something like this, there can be a lot of cases to use `videoNode:shouldChangePlayerStateTo`. I am going to make one big `ASDKTube` example and will try to use this cases there.
",Eke,appleguy
1608,2016-05-05 08:38:14,"@appleguy user can't return NO for player state Finished, because `videoNode:shouldChangePlayerStateTo` method is not event called for this state, it is called only for play/pause action at this moment. I will try to find some better solution for this case. We can discuss this in slack channel with other people too.

Hello again @Xinchi  ! Thanks for your help! I

Will try to write one case here, but can make some example application too.

For example, we have some kind of video content app where we have pre-roll Ads and we don't want user to be able to pause ad. In this case we can implement `videoNode:shouldChangePlayerStateTo` and return NO for `ASVideoNodePlayerStatePaused` change. Or for example we don't want user to play video if another video is playing at this moment or something like this, there can be a lot of cases to use `videoNode:shouldChangePlayerStateTo`. I am going to make one big `ASDKTube` example and will try to use this cases there.
",Eke,Xinchi
1607,2016-04-29 04:58:18,"@chourobin great, thanks for the change!  I've pinged 4 engineers to help take a look at this, once one of them is able to review & approve I will merge.
",appleguy,chourobin
1607,2016-04-29 16:24:15,"@chourobin LGTM!
Thanks for the Pull Request and adding the prepare-asset phase! This is exactly what has been done on the Pinterest app application level, and would be great to move these logic down to ASVideoNode. 
One concern here: As we replace the current player item and register new observers, is it necessary to remove all the old observers?
",Xinchi,chourobin
1607,2016-04-29 16:56:43,"@Xinchi yes it is, and currently it's being done on `-setCurrentItem:` line 540: 😄 


",chourobin,Xinchi
1607,2016-05-01 23:41:05,"@chourobin thanks for this quite large and very valuable contribution!  Hope to learn more about how you're using the framework and see how we can support one another's work :)
",appleguy,chourobin
1605,2016-04-29 05:03:38,"Thanks @lappp9 !  @maicki, @levi, @nguyenhuy I could use your help considering the API here.

We definitely need these call points.  Things like displayWillStart are not actually called for elements that don't have a literal display method, and something like -clearFetchedData doesn't feel parallel to -visibilityDidChange:.

That said, I'm not a fan of these particular names.  They seem a bit too long, at least the ""Range"" part should probably be removed as we plan to have ASViewController also have an independent ASInterfaceState, which might be in the fetch data state just by being one of the non-selected tabs of a tab bar controller (not a range exactly).

We should see if any names could be found that will allow the BOOL parameter to work, as it fully halves the number of strings that a developer needs to remember to use the API without looking at headers or reference.  ..., displayStateDidChange: is one candidate, not sure it's great though.
",appleguy,lappp9
1605,2016-05-01 19:22:04,"@appleguy yeah, I agree that the BOOL versions of these methods would make things quite a bit nicer.
So:
`-visibilityDidChange:`
`-displayStateDidChange:`
`-fetchDataStateDidChange:` 

The display one sounds good. The fetchData one feels a little weird, but I think it would make sense with the other ones.  Does anyone else have opinions?

Maybe?
`-dataFetchStateDidChange:`
",lappp9,appleguy
1605,2016-05-03 20:03:06,"@levi I would love to do it that way, but in practice it is quite hard to isolate whether a bit has changed, _and_ whether it is now 1 or 0.  Just checking whether it's set is not enough.  E.g. FetchData may be 1 now, but it may also have been 1 before.

The ASDisplayNode implementation of interfaceStateDidChange: shows some of the patterns that developers would have to individually figure out how to reconstruct.

Also, I think the things you need to do in entering / exiting fetchData will typically be different than when visibility changes, etc.  But it does seem like entering and exiting often have similar needs / variable interactions
",appleguy,levi
1605,2016-05-10 20:16:47,"@lappp9 I suggest reversing the naming of the methods to have the parameter reflect the new state as an alternative of `didChange:`.


",levi,lappp9
1605,2016-05-11 01:15:50,"@levi @appleguy  You don't think we should be consistent with our API in ASDK? Currently methods similar to them are:



As you can see `..DidChange..` is mostly at the end. Looking up Apple API's unfortunately they are not consistent with that stuff in UIKit so there is no clear ""best practice"" :/ ... but I think we should be consistent in ASDK
",maicki,levi
1605,2016-05-11 01:15:50,"@levi @appleguy  You don't think we should be consistent with our API in ASDK? Currently methods similar to them are:



As you can see `..DidChange..` is mostly at the end. Looking up Apple API's unfortunately they are not consistent with that stuff in UIKit so there is no clear ""best practice"" :/ ... but I think we should be consistent in ASDK
",maicki,appleguy
1605,2016-05-11 04:26:40,"@levi Is a ""visible state"" or a ""display state"" something that a node ""has"" per se?  I think the alternative naming feels a little weird personally but I could be missing something.

As @maicki  said, I also like these three names because they match
`- interfaceStateDidChange:fromState:`
",lappp9,levi
1605,2016-05-11 04:26:40,"@levi Is a ""visible state"" or a ""display state"" something that a node ""has"" per se?  I think the alternative naming feels a little weird personally but I could be missing something.

As @maicki  said, I also like these three names because they match
`- interfaceStateDidChange:fromState:`
",lappp9,maicki
1605,2016-06-12 05:21:17,"@lappp9 thanks for making this!  @maicki @levi @Adlai-Holler @nguyenhuy @hannahmbanana - make sure you are familiar with these important new APIs, which supercede fetchData, clearFetchedData, clearContents, and visibilityDidChange:.  Please weigh in with any thoughts on naming improvements as they are currently free to change.  Note that previously an equivalent to displayStateDidChange:YES did not exist; displayWillStart is NOT a direct equivalent.  The :NO variant is equivalent to -clearContents, currently.

@hannahmbanana we need to update the documentation for this.
",appleguy,levi
1605,2016-06-12 05:21:17,"@lappp9 thanks for making this!  @maicki @levi @Adlai-Holler @nguyenhuy @hannahmbanana - make sure you are familiar with these important new APIs, which supercede fetchData, clearFetchedData, clearContents, and visibilityDidChange:.  Please weigh in with any thoughts on naming improvements as they are currently free to change.  Note that previously an equivalent to displayStateDidChange:YES did not exist; displayWillStart is NOT a direct equivalent.  The :NO variant is equivalent to -clearContents, currently.

@hannahmbanana we need to update the documentation for this.
",appleguy,lappp9
1605,2016-06-12 05:21:17,"@lappp9 thanks for making this!  @maicki @levi @Adlai-Holler @nguyenhuy @hannahmbanana - make sure you are familiar with these important new APIs, which supercede fetchData, clearFetchedData, clearContents, and visibilityDidChange:.  Please weigh in with any thoughts on naming improvements as they are currently free to change.  Note that previously an equivalent to displayStateDidChange:YES did not exist; displayWillStart is NOT a direct equivalent.  The :NO variant is equivalent to -clearContents, currently.

@hannahmbanana we need to update the documentation for this.
",appleguy,maicki
1603,2016-05-11 00:30:52,"@maicki tested this on the Pinterest app. The result looks ok, but the rotation animation is busted. I'd recommend pulling it down locally and rotating while you're in pin closeup — that's the most common case.
",levi,maicki
1603,2016-06-04 07:58:26,"@maicki @levi is this now tested to work with a smooth animation in Pinterest?  Ready to land?
",appleguy,levi
1603,2016-06-04 07:58:26,"@maicki @levi is this now tested to work with a smooth animation in Pinterest?  Ready to land?
",appleguy,maicki
1603,2016-06-04 22:15:32,"@appleguy No I haven't had time yet to work on it
",maicki,appleguy
1603,2016-06-05 04:28:44,"@maicki just to be clear, do you mean you haven't had a chance to check it, or you know it still needs work / should not land?  I can check it if we don't know if your latest changes fixed it.
",appleguy,maicki
1603,2016-06-05 13:22:12,"@appleguy I haven't had a chance to check / fix it after my last change and the comment from @levi
",maicki,levi
1603,2016-06-05 13:22:12,"@appleguy I haven't had a chance to check / fix it after my last change and the comment from @levi
",maicki,appleguy
1603,2016-06-10 03:17:03,"@appleguy @levi Ready for review again, tested it also in the Pinterest app. The rotation animation should resemble the animation before, but should fix #1169
",maicki,levi
1603,2016-06-10 03:17:03,"@appleguy @levi Ready for review again, tested it also in the Pinterest app. The rotation animation should resemble the animation before, but should fix #1169
",maicki,appleguy
1603,2016-06-10 05:38:52,"@maicki this code is especially clean!  Great, succinct implementation.  Thanks for updating the example code.  It's not common now, but soon we should add more comments to example code for readers to learn the maximum.
",appleguy,maicki
1601,2016-05-10 02:15:06,"@hannahmbanana I have a stack trace for this. I've been seeing the same thing in my project while debugging a crash not related to this
![Invalid context + crash with visibleRanges](https://cloud.githubusercontent.com/assets/38343/15133706/40c9f006-161a-11e6-9908-7ec7c996a131.png)
",pixel4,hannahmbanana
1600,2016-04-28 18:47:37,"hey @gazreese, I'd just like to add that after further investigation, I believe it's no longer required to build the AVPlayerItem from the URL (for HLS). Hence, the check for tracks should no longer be needed. 

Apparently the AVFoundation guide was out of date. In this [release note](https://developer.apple.com/library/ios/releasenotes/AudioVideo/RN-AVFoundation-Old/) -- under **Enhancements for HTTP Live Streaming** -- it states that all assets (HLS and non-HLS) may be constructed from an AVURLAsset. We just have to call `-loadValuesAsynchronouslyForKeys:completionHandler:` first before assigning it to a player item. I've been doing this outside of `ASVideoNode` for now but I would be happy to submit a PR to bring this async asset loading into `ASVideoNode` by default. I wanted to check in and see what you guys think.
",chourobin,gazreese
1600,2016-04-28 22:22:08,"@chourobin That's great news! The workaround of extracting the URL is troublesome, as detailed by @gazreese. Let me know If you'd like any help with your PR 😃 
",ejensen,gazreese
1600,2016-04-28 22:22:08,"@chourobin That's great news! The workaround of extracting the URL is troublesome, as detailed by @gazreese. Let me know If you'd like any help with your PR 😃 
",ejensen,chourobin
1600,2016-04-29 08:05:09,"This sounds great to me guys, well spotted!

> On 28 Apr 2016, at 19:48, Robin Chou notifications@github.com wrote:
> 
> hey @gazreese https://github.com/gazreese, I'd just like to add that after further investigation, I believe it's no longer required to build the AVPlayerItem from the URL (for HLS). Hence, the check for tracks should no longer be needed.
> 
> Apparently the AVFoundation guide was out of date. In this release note https://developer.apple.com/library/ios/releasenotes/AudioVideo/RN-AVFoundation-Old/ -- under Enhancements for HTTP Live Streaming -- it states that all assets (HLS and non-HLS) may be constructed from an AVURLAsset. We just have to call -loadValuesAsynchronouslyForKeys:completionHandler: first before assigning it to a player item. I've been doing this outside of ASVideoNode for now but I would be happy to submit a PR to bring this async asset loading into ASVideoNode by default. I wanted to check in and see what you guys think.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1600#issuecomment-215525239
",gazreese,gazreese
1600,2016-05-11 02:48:17,"@chourobin @gazreese @ejensen: awesome collaboration here. Keep up the great work!
",appleguy,gazreese
1600,2016-05-11 02:48:17,"@chourobin @gazreese @ejensen: awesome collaboration here. Keep up the great work!
",appleguy,ejensen
1600,2016-05-11 02:48:17,"@chourobin @gazreese @ejensen: awesome collaboration here. Keep up the great work!
",appleguy,chourobin
1599,2016-04-27 05:43:42,"@ejensen now that I recall some of the issues we had with APIs as simple as .duration at Instagram, I believe I understand the severe impact of this issue and am fully supportive of this change.

However, can you please clarify if you're confident that this new implementation will address the behavior and that the check of the number of tracks originally intended to provide? I believe it related to HTTP live streaming.  cc @gazreese
",appleguy,ejensen
1599,2016-04-27 06:55:05,"@appleguy I've verified this implementation fixes the UI blocking issue demonstrated in the demo project.  The HLS workaround (extracting the URL from the asset) has remained unchanged. Though I don't have a great way to test HLS.
",ejensen,appleguy
1596,2016-05-02 06:19:16,"Nice, thanks @maicki !
",appleguy,maicki
1595,2016-04-27 16:55:27,"@hannahmbanana thank you for your quick replay.
I am currently using this commit - 402c5fe25a8bc956e8d2712ed23e89b05b7613ef - of AsyncDisplayKit.

I sent an email to join the Slack channel. Once I'm approved we can communicate there.
In the mean while, let me know if you need more information and I can post it here.

Thanks
",DavidSchechter,hannahmbanana
1594,2016-06-30 16:23:27,"@appleguy You think this is more related to the locking issues in `ASTextNode` we had? Setting an attributed string triggers a redraw ...
",maicki,appleguy
1594,2016-08-16 16:09:01,"@hannahmbanana @maicki @appleguy Thanks, and sorry for the delay on the update here.  Yes you guys must have fixed the locking issue as the crash has gone away in the most recent release using the master branch at the time.  I believe this was fixed on master 3-4 weeks ago.  

This is probably appropriate for another place, and I'll create a new issue - I have been having a general issue with ASTextNode around auto-scale text.  I am setting the text with variable length text, and am trying to use the pointSizeScaleFactors to achieve an auto-scale of the text.  I am seeing that the entire text node size changes, I want the size of the text node to stay fixed and the text size to grow/shrink to fit.  I am trying using layoutSpecThatFits to specify the text node size, but the text node size appears to be determined by the text length, not the layout spec.
",klivin,appleguy
1594,2016-08-16 16:09:01,"@hannahmbanana @maicki @appleguy Thanks, and sorry for the delay on the update here.  Yes you guys must have fixed the locking issue as the crash has gone away in the most recent release using the master branch at the time.  I believe this was fixed on master 3-4 weeks ago.  

This is probably appropriate for another place, and I'll create a new issue - I have been having a general issue with ASTextNode around auto-scale text.  I am setting the text with variable length text, and am trying to use the pointSizeScaleFactors to achieve an auto-scale of the text.  I am seeing that the entire text node size changes, I want the size of the text node to stay fixed and the text size to grow/shrink to fit.  I am trying using layoutSpecThatFits to specify the text node size, but the text node size appears to be determined by the text length, not the layout spec.
",klivin,maicki
1594,2016-08-16 16:09:01,"@hannahmbanana @maicki @appleguy Thanks, and sorry for the delay on the update here.  Yes you guys must have fixed the locking issue as the crash has gone away in the most recent release using the master branch at the time.  I believe this was fixed on master 3-4 weeks ago.  

This is probably appropriate for another place, and I'll create a new issue - I have been having a general issue with ASTextNode around auto-scale text.  I am setting the text with variable length text, and am trying to use the pointSizeScaleFactors to achieve an auto-scale of the text.  I am seeing that the entire text node size changes, I want the size of the text node to stay fixed and the text size to grow/shrink to fit.  I am trying using layoutSpecThatFits to specify the text node size, but the text node size appears to be determined by the text length, not the layout spec.
",klivin,hannahmbanana
1592,2016-05-02 03:27:35,"@rcancro  Overall seems good to me. Just one thing I'm thinking about is that the naming of the ASDisplayTraits is a bit different as all the other states that we start with ""ASEnvironment..."" Just thinking if we should internally use ASEnvironmentDisplayTraitsState and for the public API we expose it as displayTraits as we already do?

 cc @appleguy
",maicki,rcancro
1592,2016-05-04 05:09:49,"@maicki Thanks for the review! I've addressed most of your comments except for the request to make a NSObject-based class that wraps the struct. I'll look at that tomorrow
",rcancro,maicki
1592,2016-05-05 03:07:08,"@rcancro I am re-running, but I think this may be a real failure.  Probably worth opening the CarthageBuildTest to run it locally and see what the detailed failure is, and confirm the build server's result that before this change, it builds.  It is possible that there is a new problem in master that hasn't been noticed yet though, as we did just adopt a new PINRemoteImage which apparently has some issue with Carthage.  cc @garrettmoon 

▸ Building Sample/CarthageExample [Debug]
▸ Check Dependencies
▸ Compiling main.m
▸ Compiling AppDelegate.m
❌  /Users/travis/build/facebook/AsyncDisplayKit/examples/CarthageBuildTest/CarthageExample/AppDelegate.m:9:9: could not build module 'AsyncDisplayKit'
@import AsyncDisplayKit;
",appleguy,rcancro
1592,2016-05-05 03:09:23,"@rcancro @levi if ASDisplayTraits is directly analogous to UITraitCollection, can we call it ASTraitCollection instead?  I assume it will be a struct directly inside ASEnvironment struct.

Sincere apologies that I have not been able to review this yet.  I really badly want to, but haven't been able to reach the minimum sleep quota recently even without touching ASDK diffs in the last week :(.  Will plan to review on the plane on Friday or on return flight.
",appleguy,rcancro
1592,2016-05-10 00:30:00,"@rcancro looks like this patch got messed up with a rebase or merge.
",levi,rcancro
1592,2016-05-12 04:19:50,"Phenomenal work, @rcancro !  Once again, you've fundamentally extended the capabilities of the framework.  I sincerely appreciate your attention to detail both in architecting and executing this.  There's great care to efficiency / performance, but simultaneously a clear priority placed on a friendly object-based API.  Love it.

The only followup that seems important for the next 1-2 days is checking on the locking sites I commented at, but otherwise I think this is a mic drop. :)
",appleguy,rcancro
1590,2016-04-26 18:35:23,"Oops! Sorry for introducing this bug – my app only exercises ASMultiplexImageNode. Thanks @maicki for the fix!
",Adlai-Holler,maicki
1588,2016-04-25 16:04:08,"@nickvelloff: thanks for reviewing our new documentation! It is still a work in progress, so expect a few hiccups. :)

The sentence before the code looks correct. I could probably make it more clear that `initWithNode:` is the ASViewController's designated initializer. This is the strategy for using an ASCollectionNode with an ASViewController, but it is also possible to use an ASCollectionNode without managing it with an ASViewController. 

Is it an issue with the Swift code? I am not familiar with Swift syntax. cc: @lappp9
",hannahmbanana,nickvelloff
1588,2016-04-25 16:13:46,"@nickvelloff - happy to help, could you clarify your question?  The designated initializer for ASVC is initWithNode - the code you have looks largely correct, but I'm not sure how to call that initializer in Swift.  Wouldn't it be super.initWithNode(node: collectionNode) ?

cc @nguyenhuy, if you want to check my Swift here.

If you're not on our Slack yet, please join and we'd love to collaborate with you live!  Just email me at asyncdisplaykit@gmail.com - to request an invite.
",appleguy,nickvelloff
1588,2016-04-25 16:31:37,"@appleguy It's should be this way:



or


",maicki,appleguy
1588,2016-04-25 16:39:57,"@maicki Isn't the first version what the docs has?

And yeah, the initializer should be `super.init(node: whateverNode)`  

Which is actually pretty cool, considering the objc version is `[super initWithNode:whateverNode]`
",lappp9,maicki
1588,2016-04-25 18:26:34,"Landed https://github.com/facebook/AsyncDisplayKit/pull/1589, @nickvelloff thanks!  Let us know if this looks better.
",appleguy,nickvelloff
1588,2016-04-25 18:32:42,"@lappp9 That is the part I'm referencing 👍 
Thanks all! 
I'm trying to migrate my UICollectionView to ASDK entirely (parts use it, but want to go full hierarchy). Some things in the docs referenced a file in an example project ""ASDKgram"" that no longer exists.

Is there somewhere you could point me to an example of the best way to handle this with the latest ASDK? If not I'll just continue to read the docs, just making sure I'm not missing something. 

Thanks all!
",nickvelloff,lappp9
1588,2016-04-25 18:47:56,"@appleguy Looks great, very clear. Thanks.
I'm checking out the `ASCollectionView` example project. 
Just wrapping my head around the differences in `UICollectionView` and `ASCollectionNode`. 

I'll log more issues if see anything in the docs (or issue a PR if I'm feeling confident 😄 )
",nickvelloff,appleguy
1588,2016-04-26 06:10:25,"@nickvelloff: PRs are always welcome. :) 
",appleguy,nickvelloff
1587,2016-04-29 05:06:38,"This is very exciting, can't wait to continue expanding this already-fantastic example app @maicki !  With @hannahmbanana 's ASDKgram, these two apps alone are now a new level of quality and utility in the examples.  We can really use this app in particular to provide copy-paste friendly sample code for people to grab and integrate into their first ASDK projects.
",appleguy,maicki
1586,2016-04-24 11:30:57,"@hannahmbanana thanks for the response, you were right... the lack of rasterization in the `didSelectRowAtIndexPath` was causing the issue with the background image on the `ASControlNode`. Below is what fixed the problem.



However there is a new problem, when I select a cell, the ""hairline"" divider on the postNode disappears after the cellNode is de-selected. I think its a problem related to #1417 . Did you find a solution for this?
",alexrmacleod,hannahmbanana
1586,2016-04-24 22:54:39,"@alexrmacleod, I agree with @hannahmbanana that we should actually remove the tap-to-rasterize hidden feature of SocialAppLayout - even in the ObjC version.

The known issue here is that some kinds of rasterized elements don't properly reflect their backgroundColor, if they were initially displayed non-rasterized and then rasterization is enabled (as occurs with the tap-to-rasterize).  Especially to toggle the rasterization state is an astoundingly rare thing to do in a real app, and I'd recommend avoiding rasterization until you become pretty familiar with the framework and even learn a few of the implementation details.  It has big side effects like losing touch handling for subnodes of that tree, but is extremely powerful as a carefully wielded performance tool.
",appleguy,hannahmbanana
1586,2016-04-27 06:35:32,"Current situation, without tap-to-rasterize the image bug persists, with tap-to-rasterize the image bug is gone but the divider disappears. for now I removed the divider and used 
`self.tableNode.view.separatorStyle = UITableViewCellSeparatorStyle.SingleLine`

@hannahmbanana In the new sample project provided below as far as I can see there is no rasterizeation happening in this project but the image bug persists. 

To replicate the bug:
1: Launch app in simulator iphone 6s
2: in the navigation bar tap the ""following"" segment in the segment control
3: tap the first cell in the tableview cell (should highlight then de-select)
4: tap the like button and the image bug should occur. 

I am trying to achieve a tableviewcell effect like on the Twitter ios app. When you tap a cell on the twitter tableview it highlights and pushes to a new controller, then when you swipe back the highlighted state slowly fades out. Is this possible with ASTableView? or should I build this app using a regular UItableViewController where this effect happens by default and use AsyncDisplayKit to build the view components inside a UITableViewCell.  

Basically I have been plagued with poor performance (using the typical storyboard and autolayout) and want to build a tableviewcontroller thats has 60fps scrolling. 

Also inside the likeNode.swift file on line 87 I added the following. 
`self.postNode!.passthroughNonlinkTouches = true`
It seems that its not working. shouldn't the github url in the bottom cell of the followingTableViewController be tappable? or am I wrong?

@hannahmbanana Finally I know this is a little off topic but how do you make something like [MGSwipeTableCell](https://github.com/MortimerGoro/MGSwipeTableCell) work on ASTableNode? how would I go about making that a reality? now at the end of the post it seems using the regular UITableViewController + MGSwipeTableCell + AsyncDisplayKit for building the views/buttons inside a custom UITableViewCell is the best way to move forward. Please advise... 

@appleguy I emailed AsyncDisplayKit@gmail.com for a slack invite. did you receive? 
[StockChat.zip](https://github.com/facebook/AsyncDisplayKit/files/238020/StockChat.zip)
",alexrmacleod,appleguy
1586,2016-04-27 06:35:32,"Current situation, without tap-to-rasterize the image bug persists, with tap-to-rasterize the image bug is gone but the divider disappears. for now I removed the divider and used 
`self.tableNode.view.separatorStyle = UITableViewCellSeparatorStyle.SingleLine`

@hannahmbanana In the new sample project provided below as far as I can see there is no rasterizeation happening in this project but the image bug persists. 

To replicate the bug:
1: Launch app in simulator iphone 6s
2: in the navigation bar tap the ""following"" segment in the segment control
3: tap the first cell in the tableview cell (should highlight then de-select)
4: tap the like button and the image bug should occur. 

I am trying to achieve a tableviewcell effect like on the Twitter ios app. When you tap a cell on the twitter tableview it highlights and pushes to a new controller, then when you swipe back the highlighted state slowly fades out. Is this possible with ASTableView? or should I build this app using a regular UItableViewController where this effect happens by default and use AsyncDisplayKit to build the view components inside a UITableViewCell.  

Basically I have been plagued with poor performance (using the typical storyboard and autolayout) and want to build a tableviewcontroller thats has 60fps scrolling. 

Also inside the likeNode.swift file on line 87 I added the following. 
`self.postNode!.passthroughNonlinkTouches = true`
It seems that its not working. shouldn't the github url in the bottom cell of the followingTableViewController be tappable? or am I wrong?

@hannahmbanana Finally I know this is a little off topic but how do you make something like [MGSwipeTableCell](https://github.com/MortimerGoro/MGSwipeTableCell) work on ASTableNode? how would I go about making that a reality? now at the end of the post it seems using the regular UITableViewController + MGSwipeTableCell + AsyncDisplayKit for building the views/buttons inside a custom UITableViewCell is the best way to move forward. Please advise... 

@appleguy I emailed AsyncDisplayKit@gmail.com for a slack invite. did you receive? 
[StockChat.zip](https://github.com/facebook/AsyncDisplayKit/files/238020/StockChat.zip)
",alexrmacleod,hannahmbanana
1586,2016-04-28 07:09:37,"@alexrmacleod: Thank you for the sample project & extremely clear replication steps! I am now able to reproduce the image bug. 

Following @appleguy's advice, I set a breakpoint in `ASImageNode`'s `displayWithParameters:` method and checked the `.isOpaque` parameter. It was set to YES. If opaque is set YES _and_ the image is either clear or has no color behind it, UIKit will use black by default. 

By setting the background color of the iconNode (inserting the middle line of code below in LikesNode.swift -> init:), I was able to resolve the issue. You will need to do this for the other ASImageNodes as well. 



I'm still not entirely clear as to what was causing the issue in the first place. It might be an issue with the image file. It could also be that somewhere in your app you are setting it to be opaque. I did a quick search for opaque, but didn't see anything. Or it could be an issue with ASImageNode. Any thoughts, @appleguy?
",hannahmbanana,appleguy
1586,2016-04-30 11:31:47,"@hannahmbanana I find that using `self.iconNode!.backgroundColor = UIColor.clearColor()` would make things a little easier if your cells have a custom background colour.

Question 1:
Re: MGSwipeTableCell - option 2 means it is possible to take something like **BEMCheckBox** and wrap it in a **ASDisplayNode** however because **MGSwipeTableCell** is a subclass of **UITableViewCell** and I'm currently using **ASTableNode** which only works with **ASCellNode** there really isn't a quick fix for this and would probably be much more work than its worth?

Example:
What I am aiming for is the below image of a Cell from another app. Which has something like MGSwipeTableCell going on as well. 

![fullsizerender 23](https://cloud.githubusercontent.com/assets/7895493/14935550/5fd2e516-0f08-11e6-900f-733db5f655ed.jpg)

What I currently have. 

![fullsizerender 24](https://cloud.githubusercontent.com/assets/7895493/14935552/818fc62e-0f08-11e6-8704-9ef62aa24c30.jpg)

Eventually I will put the mini line chart with something like **PNChart** in the middle of each cell and was worried that if I do that it could cause a regular UITableViewCell to drop lots of FPS when scrolling / or not even work on ASCellNode.

Question 2:
So if am I to use MGSwipeTableCell with PNChart. I should just use the regular **UITableViewController**, build the cells programatically using **UIStackView** and, try to keep the cells as simple as possible by avoiding storyboard, interface builder and autoLayout? and perhaps i'll be able to add the lineChart down the road and it won't effect performance too much? 

Thanks for the twitter effect explanation. Nice actionable advice.
",alexrmacleod,hannahmbanana
1586,2016-05-01 07:16:31,"@alexrmacleod haha, having seen those (very cleanly designed) screenshots, I'm definitely really engaged with helping you figure this out.  It reminds me more than a little of building a highly-optimized cell for Apple's Stocks.app, including the first predecessor design of view-based asynchronous rendering that I made for the chart rendering.  No other first-party app used a similar approach at least through 4.3, and I doubt afterwards :-P.  I'd love to see your app succeed technically and have insanely perfect performance.

However, I think the best way is to simply rebuild the swiping functionality, and we could put it in ASCellNode itself.  Honestly it should not be that hard to take an array of colors and strings for the button types revealed by the drag, right?  Do you have a video of interacting with a few examples of this component, maybe with 1, 2, 3 items etc?

The one problem is that I have a significant time crunch in the next few days.  Still, I could work with either you or someone else from the community to build it within a week (max 1 total day of work including API design and full implementation through testing).

I'm wondering if you would be able to send over the code, dropped into a duplicate of any project in Examples / (you can just do Cmd-D on any folder in examples, rename the folder, and delete any code not necessary to get up and running one ASCellNode in a similar environment to your app where we could test dragging to reveal the menu).

If this sounds OK, you could cut out any data model and any other part of the app, just hardcoding some string values.  If you feel motivated, it would be better to have it as a table with 100-200 items, maybe repeating ~10 stock infos of varying lengths, character sets, etc.  Then I could profile it and make sure scrolling is optimized.

Then, it'd be up to you, but this would actually make a sweet app for examples/ .  Or I can keep the code completely confidential and delete it after our work.

Make sure to ping @maicki, @hannahmbanana and myself for any questions on Slack.  I don't think there's a great route to use MGSwipeTableCell and make very direct use of ASDK though.
",appleguy,hannahmbanana
1586,2016-05-01 15:27:18,"**Do you have a video of interacting with a few examples of this component, maybe with 1, 2, 3 items etc?**

@appleguy, @maicki, @hannahmbanana I don’t have a video but I made a gif below. Take note of how when the buttons are exposed on one TableViewCell, you can swipe another TableViewCell and the original TableViewCell with the buttons exposed closes automatically. The same goes for vertical swiping on the UITableView. If there is a button exposed on a swiped TableViewCell the user can still interact with the UITableView by swiping vertically, and the swiped TableViewCell closes automagically.    

![ascellnode and beyond](https://cloud.githubusercontent.com/assets/7895493/14941787/26bfa254-0fdb-11e6-8bac-fe1312368366.gif)

Also in this [link](https://github.com/MortimerGoro/MGSwipeTableCell) there are more gifs showing what the swipe gestures could look like. I really like the Border transition, Static transition and Drag transition.

**(you can just do Cmd-D on any folder in examples, rename the folder, and delete any code not necessary to get up and running one ASCellNode in a similar environment to your app where we could test dragging to reveal the menu).**

Will this do? 
[Swift.zip](https://github.com/facebook/AsyncDisplayKit/files/244185/Swift.zip)

**Then, it'd be up to you, but this would actually make a sweet app for examples/ . Or I can keep the code completely confidential and delete it after our work.**

Lets make a sample app, if you can get this working the AsyncDisplayKit community is going to need a sample to play around with. Willing to help where I can.

I watched your asyncDisplayKit talks on youtube and remembered you saying you built the apple stock app. One of my favourite apps and hands down the best stock charts i’ve seen in iOS, simple, fast and easy on the eyes! 🙌 

Would you be willing to help out and implement a simple variation of the apple stock app UIPageViewController that swipes between company fundamentals and the chart - which works inside the header of an ASTableVIew? 
",alexrmacleod,appleguy
1586,2016-05-01 15:27:18,"**Do you have a video of interacting with a few examples of this component, maybe with 1, 2, 3 items etc?**

@appleguy, @maicki, @hannahmbanana I don’t have a video but I made a gif below. Take note of how when the buttons are exposed on one TableViewCell, you can swipe another TableViewCell and the original TableViewCell with the buttons exposed closes automatically. The same goes for vertical swiping on the UITableView. If there is a button exposed on a swiped TableViewCell the user can still interact with the UITableView by swiping vertically, and the swiped TableViewCell closes automagically.    

![ascellnode and beyond](https://cloud.githubusercontent.com/assets/7895493/14941787/26bfa254-0fdb-11e6-8bac-fe1312368366.gif)

Also in this [link](https://github.com/MortimerGoro/MGSwipeTableCell) there are more gifs showing what the swipe gestures could look like. I really like the Border transition, Static transition and Drag transition.

**(you can just do Cmd-D on any folder in examples, rename the folder, and delete any code not necessary to get up and running one ASCellNode in a similar environment to your app where we could test dragging to reveal the menu).**

Will this do? 
[Swift.zip](https://github.com/facebook/AsyncDisplayKit/files/244185/Swift.zip)

**Then, it'd be up to you, but this would actually make a sweet app for examples/ . Or I can keep the code completely confidential and delete it after our work.**

Lets make a sample app, if you can get this working the AsyncDisplayKit community is going to need a sample to play around with. Willing to help where I can.

I watched your asyncDisplayKit talks on youtube and remembered you saying you built the apple stock app. One of my favourite apps and hands down the best stock charts i’ve seen in iOS, simple, fast and easy on the eyes! 🙌 

Would you be willing to help out and implement a simple variation of the apple stock app UIPageViewController that swipes between company fundamentals and the chart - which works inside the header of an ASTableVIew? 
",alexrmacleod,hannahmbanana
1586,2016-05-18 13:32:00,"@appleguy @hannahmbanana @alexrmacleod Hi all, after reading through this whole issue it seems like there are multiple conversations / issues are going on. Just top out of my head is the background color problem in the image nodes, the request for a cell swipe component, updating the sample in Swift ... can you please take a couple of minutes and create new issues for each of them, link to this issue and close this issue? Thanks!
",maicki,appleguy
1586,2016-05-18 13:32:00,"@appleguy @hannahmbanana @alexrmacleod Hi all, after reading through this whole issue it seems like there are multiple conversations / issues are going on. Just top out of my head is the background color problem in the image nodes, the request for a cell swipe component, updating the sample in Swift ... can you please take a couple of minutes and create new issues for each of them, link to this issue and close this issue? Thanks!
",maicki,hannahmbanana
1586,2017-02-09 19:49:30,"I'm going to close this for now. We're trying to move community debugging over to [slack](http://asdk-slack-auto-invite.herokuapp.com/). As @maicki mentioned it looks like this is becoming multiple issues. If there are still bugs, please report them in new issues. Thank you all for your input!",garrettmoon,maicki
1584,2016-05-11 10:33:55,"@Adlai-Holler Agree we should have that ability and I'm actually working on something that could provide this kind of functionality, but for a workaround what happens in you case if you call `reloadDataImmediately` in `viewWillAppear:` and than jump to the third page?
",maicki,Adlai-Holler
1584,2016-05-11 20:26:40,"@Adlai-Holler Sounds an interesting idea.

Just quick follow up you could also do `reloadDataWithCompletion:` in `viewWillAppear:` and in the completion block scroll to the index.
",maicki,Adlai-Holler
1584,2016-06-26 18:58:42,"@Adlai-Holler: are you implying that adding a call to wait for all operations to be committed does not actually work for the initial data load? 

This is similar to issue #1642.
",appleguy,Adlai-Holler
1584,2016-06-27 17:03:10,"@appleguy Yes, unfortunately. It's possible this was fixed in the interim but if so I didn't hear about it =/
",Adlai-Holler,appleguy
1584,2016-11-15 02:51:57,"@Adlai-Holler - can this be closed?
",hannahmbanana,Adlai-Holler
1581,2016-04-22 06:26:49,"@appleguy edited the title because we don't actually render at each scan, but rather it depends on the image downloader how often they want to pass back a new image (for PINRemoteImage this is when we are at 0, 35% and 65% download progress, and it does not have to be at a scan boundary)
",wendylu,appleguy
1581,2016-04-25 16:50:22,"@appleguy they can use the special branch, a commit hash or master for GIF support. Compilation was working fine with or without it when my commit landed, I'll have to look into what's changed.
",garrettmoon,appleguy
1577,2016-04-22 03:15:41,"@Adlai-Holler I think there is a chance that this is related to, or the root issue may have been caused by, https://github.com/facebook/AsyncDisplayKit/pull/1578

Would you mind re-testing master with that fix applied and make sure this one is still necessary?
",appleguy,Adlai-Holler
1577,2016-04-22 17:13:58,"@appleguy I gave it a try and it's still busted on master =/. This PR is rebased and ready to go though.
",Adlai-Holler,appleguy
1577,2016-04-23 02:22:03,"@Adlai-Holler thanks for your efforts here even when you're so short on time!

@maicki could you file a followup / cleanup task, in Ship, Priority 2 for 2.0, and link to this?
",appleguy,Adlai-Holler
1575,2016-04-21 19:39:46,"@aaronschubert0 no idea how this already has a conflict!  I've hardly merged anything...
",appleguy,aaronschubert0
1575,2016-04-21 20:31:45,"@appleguy Huh weird, yeah was fine this morning. No worries, will fix tomorrow morning.
",aaronschubert0,appleguy
1575,2016-04-22 08:30:57,"@appleguy All good now :)
",aaronschubert0,appleguy
1574,2016-04-27 14:17:11,"@appleguy It is working for me on last master. Thanks 👍
",hebertialmeida,appleguy
1572,2016-04-22 04:10:05,"@maicki very exciting to integrate this feature!

We should do a follow-up here to improve the comments a little bit, and to think very carefully about the risk of retained cycles and how we might be able to reduce that risk. I think including the node as an argument, although not strictly necessary if the user correctly uses a weak pointer, maybe a good idea to encourage the pattern of accessing through that object and as a reminder to consider memory management. We might even call the variable for the argument something like ""weakNode"" or ""weakSelf"" to remind people that it is important to use a weak relationship there.
",appleguy,maicki
1572,2016-04-22 18:24:10,"@appleguy I created a follow up PR that should address your comments: #1583
",maicki,appleguy
1570,2016-04-20 20:04:18,"@maicki this is great!  I will be happy to merge this as soon as the next stable release goes out. Perhaps we are ready to do that very soon? We should review all the tasks in GitHub / Ship for 1.9.8, and scanned through the 2.0 tasks to see if there are any fixes we want to put out before locking down the repository for Breaking 2.0 changes.
",appleguy,maicki
1570,2016-04-20 21:06:39,"@appleguy Addressed your comments
",maicki,appleguy
1569,2016-04-27 11:51:18,"@maicki Yes, seems that it fixed for me.
",hebertialmeida,maicki
1559,2016-04-19 23:43:25,"@garrettmoon yay!  Beauty in the form of a PR :)
",appleguy,garrettmoon
1555,2016-04-19 19:00:58,"Thank you, @vivqu !
",appleguy,vivqu
1553,2016-04-19 19:17:15,"@ejensen Thanks again!  This file is a true community effort, and I think your changes have really taken the lead on gelling all of the features into a comprehensive implementation.
",appleguy,ejensen
1552,2016-04-19 04:00:34,"@chourobin thanks for this, I really appreciate putting up the minimal fix for now. It seems like a good approach to me, as this issue seems more like a strange idiosyncrasy of Apple's implementation than an intentional or beneficial API design.

What is on is that in one of the test project where we use hey streaming URL, it did work after my change. Maybe the URL is not a completely rigorous test because it is not a true live stream, rather a streaming playback of recorded content.

cc @lappp9, @gazreese, @yunnan-wu, @ejensen 
",appleguy,chourobin
1552,2016-04-19 05:09:39,"@chourobin is there any way we can include either a unit test, or a video in one of the example projects that would have broken with the previous code and succeeds with this implementation?

Especially because there is a lot of interest and activity in the video node, I want to be sure that this lesser used but very important feature is always maintained in a correct state.

Thanks again for your investigation and work here!
",appleguy,chourobin
1551,2016-04-19 23:24:13,"@appleguy thank you very much for the feedback. No exception is thrown. The program stops on this last assert:



After some digging, if found out that this delegate ( and the other belonging to the same protocol)

`- (ASCellNode *)collectionView:(ASCollectionView *)collectionView nodeForItemAtIndexPath:(NSIndexPath *)indexPath;`

gets called when i send my app to background. This all happens on an unvisited tab bar ASViewController ASDisplayNode. The ASCollectionView is added as a ASDisplayNode subnode.
Is this the expected behavior?
I was setting the ASCollectionView delegates on ASDisplayNode init method. Meanwhile, I moved this initialization to `- (void)didLoad`.

Thank you once again.

Great! I'll send you an email to get access to discussions on Slack.
",nelson-pinto,appleguy
1550,2016-04-19 05:02:06,"@maicki thanks!  I had hoped this would be an easy fix, but I appreciate you diving into it and very thoroughly addressing the issue. Great benefit to walk away with tests as well!
",appleguy,maicki
1549,2016-04-19 04:57:43,"@ejensen thanks again!  Feel free to wait a few days until the other changes affecting this file have merged, to minimize the risk of conflicts, But I am looking forward to the other diff.
",appleguy,ejensen
1549,2016-04-19 05:59:26,"@appleguy Thanks for the review! I've incorporated your suggestions in the [second PR of the bunch](https://github.com/facebook/AsyncDisplayKit/pull/1553). I tried to minimize conflicts as much as possible. Feel free to hold off the second PR until you see fit. I know thrashing on a file is painful. If any conflict arise, I can rebase, wash, and repeat. 
",ejensen,appleguy
1548,2016-04-19 05:11:58,"Thanks @lappp9 !  I can hardly express my gratitude for your work on the site and guides.  @RCacheaux, @hannahmbanana it has been on my mind for literally years and is more of a dream come true for me than you might expect, to have proactive and detailed support on this.  Keep pinging me if I can help! :)
",appleguy,lappp9
1548,2016-04-19 05:58:50,"@appleguy no problem, glad to help!
",lappp9,appleguy
1546,2016-04-19 05:52:11,"@gazreese I re-ran the tests a couple times, but it looks like this is blocked on video-related test failures :(  https://travis-ci.org/facebook/AsyncDisplayKit/jobs/123922821
",appleguy,gazreese
1546,2016-04-19 23:48:12,"@gazreese all the other large ASVideoNode PRs are cleared, so feel free to update this one when you have time!
",appleguy,gazreese
1546,2016-04-27 03:14:51,"@gazreese ping!
",appleguy,gazreese
1546,2016-04-27 06:04:37,"Hey @appleguy, only got chance to look at this yesterday. It's looking good though and should be able to merge in today.
",gazreese,appleguy
1546,2016-04-27 06:21:09,"@appleguy There were basically two changes for me to merge here. The first main change was this:



This seems to have already been cherry-picked into the mainline, so there was no need to merge.

The other was a change to the `-interfaceStateDidChange` method, but this method seems to have been removed so there was nothing to change.

I've merged the mainline into the branch and pushed up to my fork just so that I can continue to develop on my own project. The pull request should be identical to your master, so I think you can probably kill this PR now?
",gazreese,appleguy
1546,2016-04-27 06:30:22,"Funny, no sure how all that happened exactly, but it looks like we converged to correctness!  Thanks for your help @gazreese :)  Look for 1.9.73, hoping to push it tonight.
",appleguy,gazreese
1546,2016-04-27 06:31:52,"Sounds good!

I’m just raising a bug for a potential issue that I discovered. Doesn’t look like anything that might stop a release but thought it was worth opening the discussion.

> On 27 Apr 2016, at 07:30, appleguy notifications@github.com wrote:
> 
> Funny, no sure how all that happened exactly, but it looks like we converged to correctness! Thanks for your help @gazreese https://github.com/gazreese :) Look for 1.9.73, hoping to push it tonight.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1546#issuecomment-214983386
",gazreese,gazreese
1544,2016-04-18 02:25:04,"@lappp9 @appleguy - We don't need the _site/\* files for the website to work, since it appears that GitHub Pages automatically generates the site from our source code. The _site folder is generated when running it locally with Jekyll. We should remove this from the _site folder from the current repository as well. 

Also, we have a docs folder under ASDK master (not updated in 2 years) which duplicates everything in gh-pages. Can we get rid of that @appleguy?
",hannahmbanana,lappp9
1543,2016-04-16 22:41:25,"@aaronschubert0 I'm pretty sure this was added recently, as @Adlai-Holler discovered that MapKit will internally crash if provided a zero size options.    If it was not this particular assertion, there were other changes intended to protect against zero sized snapshots that are definitely still required. 

I'm not understanding  how this would fix the issue Hannah ran into, though.  If the options has never been set to a non-zero size, and setAnnotations: is called (eg before the view is created, and before layout), we trigger a snapshot.  And it will be zero sized.

How does this address that issue?
",appleguy,aaronschubert0
1543,2016-04-17 08:10:08,"Hey @appleguy, I actually added that assert in when I first implemented ASMapNode and the reason was to combat options.size being set to zero. That's why I can be so certain that we can remove this. Since following the changes that @Adlai-Holler made, there are no code paths possible where options.size can be set to zero (and it's set to 256x256 from MapKit by default)

Hannah's issue wasn't that options.size was zero sized. It was that her code hit this false assert, options.size was never set to zero. If Hannah tries out this fix then I'm certain her issue will be resolved. 

I also made a sample project based upon Hannah's example code that I can post if you want to look at that before Hannah gets a chance to try out this fix. 
",aaronschubert0,appleguy
1543,2016-04-18 02:35:06,"@aaronschubert0 @appleguy - Sorry that I am a bit behind on the conversation. I will try out this fix tonight. 
",hannahmbanana,aaronschubert0
1543,2016-04-18 02:35:06,"@aaronschubert0 @appleguy - Sorry that I am a bit behind on the conversation. I will try out this fix tonight. 
",hannahmbanana,appleguy
1543,2016-04-18 03:34:52,"@aaronschubert0 @appleguy - If I disable the assertion as proposed here, I am able to set annotations on an `ASMapNode` in the `init:` method of an `ASCellNode` as desired.  

However, calling `setAnnotations` in `init:` means that `takeSnapshot` will always get called twice (once before and once after layout). The first snapshotter is canceled when `calculateSizeThatFits` is called:

`setAnnotations:` --> `takeSnapshot` (1st snapshotter begins)
`calculateSizeThatFits:` --> `setSnapshotSizeWithReloadIfNeeded:` 
--> `destroySnapshotter` (1st snapshotter canceled)
--> `takeSnapshot` (2nd snapshotter begins)

By checking that layout hasn't happened yet we can avoid the unnecessary 1st call. Thus, I still believe my solution is more performant. 
",hannahmbanana,aaronschubert0
1543,2016-04-18 03:34:52,"@aaronschubert0 @appleguy - If I disable the assertion as proposed here, I am able to set annotations on an `ASMapNode` in the `init:` method of an `ASCellNode` as desired.  

However, calling `setAnnotations` in `init:` means that `takeSnapshot` will always get called twice (once before and once after layout). The first snapshotter is canceled when `calculateSizeThatFits` is called:

`setAnnotations:` --> `takeSnapshot` (1st snapshotter begins)
`calculateSizeThatFits:` --> `setSnapshotSizeWithReloadIfNeeded:` 
--> `destroySnapshotter` (1st snapshotter canceled)
--> `takeSnapshot` (2nd snapshotter begins)

By checking that layout hasn't happened yet we can avoid the unnecessary 1st call. Thus, I still believe my solution is more performant. 
",hannahmbanana,appleguy
1543,2016-04-18 07:40:18,"@hannahmbanana Fair enough, let's remove this assert and then clean up your PR. Thanks!
",aaronschubert0,hannahmbanana
1542,2016-04-17 02:31:51,"@appleguy  thx, my email, 13301051937@163.com. i love the `AsyncDisplayKit` framework, can i be the members?
",WildDylan,appleguy
1542,2016-04-17 03:09:17,"Sent you an invite, hope the sign-up process for slack goes smoothly!

Sent from my iPad

> On Apr 16, 2016, at 7:31 PM, Dylan notifications@github.com wrote:
> 
> @appleguy thx, my email, 13301051937@163.com. i love the AsyncDisplayKit framework, can i be the members?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",appleguy,appleguy
1542,2016-04-17 03:10:35,"@appleguy ok. thx.
",WildDylan,appleguy
1540,2016-04-16 23:56:00,"@maicki very cool, I'm so happy with the awesome improvements in C++ over time, and am both a bit disappointed and excited to realize that this flag is finally set properly!
",appleguy,maicki
1539,2016-04-16 23:53:52,"Thank you @nguyenhuy !
",appleguy,nguyenhuy
1537,2016-04-16 04:04:24,"@maicki interesting.  So, there is actually a similar workaround for frame.  UITableView frame does not work properly if it is set only on the layer, unlike almost all other UIViews.

I think the right fix here is actually to change the property bridge, and always use -[UIView setBackgroundColor:] for a view-backed node.  Otherwise, initWithViewBlock: on certain elements like perhaps a custom table (that a developer doesn't need to be async) will have the same issue.  There could also be other UIKit classes that override setBackgroundColor: -- because it is difficult for UIKit to intercept the CALayer calls in the way our architecture allows.  Lastly, it would reduce the code change.

We would need to change the _ASPendingState to always store a UIColor as regenerating it is too costly.  This is fine as the node.backgroundColor is already of this type.  It would actually make some drawing operations faster as capturing it as a draw parameter would be quicker that regenerating.  For layer-backed we'd call CGColor.

If you'd prefer to land this as-is and file a task for the other change, that's totally fine.  I'm not certain how complex the diff would be to make, but it may be simple enough to do now.  @maicki just let me know and I will merge this now if you suggest.
",appleguy,maicki
1537,2016-04-19 23:09:09,"@appleguy Here is the follow up PR: #1563
",maicki,appleguy
1534,2016-04-15 07:23:43,"@hannahmbanana Thanks for getting involved with ASMapNode. I appreciate this PR but I don't think this is the way this should be solved, I've put some comments on this PR to specify why.

This assert is usually called if you haven't specified a layout to ASMapNode correctly, usually I would wrap it in a `ASRatioLayoutSpec` or set the `preferredFrameSize` property. What UI are you trying to construct, and maybe we can solve this a different way?
",aaronschubert0,hannahmbanana
1534,2016-04-15 08:04:23,"@aaronschubert0: thanks for reviewing this!

I believe I am using the ASMapNode API correctly; `.setAnnotations` should be okay to call before the layout pass. If I move the `.setAnnotations` code to `didLoad` everything works smoothly.  However, the former implementation seems like it should be a valid use of the API.


",hannahmbanana,aaronschubert0
1534,2016-04-15 09:02:57,"@hannahmbanana In that case, why don't we wrap `setAnnotations:` with `self.nodeLoaded`:



So that the annotations are set, but it won't trigger a new layout pass unless it's been loaded or maybe we should actually change that condition to `self.calculatedLayout` that way we can be certain this behaviour won't occur.
",aaronschubert0,hannahmbanana
1534,2016-04-18 07:42:55,"@hannahmbanana This is looking good to me! Just FYI seems like some documentation files and changes to ASTextNode have leaked into this PR.
",aaronschubert0,hannahmbanana
1534,2016-04-18 17:20:33,"@aaronschubert0 - thanks for catching this! I removed the _site files. 

The modifications to ASTextNode were intentional. While looking for `calculatedLayoutDidChange` in `ASDisplayNode+Subclasses.h`, I noticed that the header file was inconsistent and missing a few requires super flags. This exposed the fact that `ASTextNode` was missing a call to super.
",hannahmbanana,aaronschubert0
1534,2016-04-18 20:34:44,"@hannahmbanana thanks for fixing the missing super call in ASTextNode!
",appleguy,hannahmbanana
1532,2016-04-21 15:08:30,"@HeEAaD To resolve issue 2 in your description need stop be done with a pod version 1.0pre or can this also be done with 0.39.0?
",maicki,HeEAaD
1532,2016-04-21 16:17:59,"@maicki I guess 0.39 should be enough.
",HeEAaD,maicki
1530,2016-04-17 03:48:05,"@hannahmbanana  Nice refinements overall, thank you! We should definitely delete the comment loading code that is no longer needed, but because it has no impact on the operation and it looks like this is one step towards long-term improvement of this example, this change is good to merge now. 
",appleguy,hannahmbanana
1529,2016-04-17 03:51:23,"@garrettmoon  sorry, I was a bit slow and accepting this, now ready to merge but a conflict has come up. If you could update this I will make sure to merge it promptly. 
",appleguy,garrettmoon
1529,2016-04-18 03:17:41,"@garrettmoon thanks for finding this!  I rolled it into https://github.com/facebook/AsyncDisplayKit/pull/1545 .
",appleguy,garrettmoon
1528,2016-04-17 03:53:36,"@ejensen  nifty, thanks! 
",appleguy,ejensen
1527,2016-04-15 16:01:04,"@rcancro @garrettmoon Can you guys take another look over this please
",maicki,garrettmoon
1527,2016-04-15 16:59:05,"@garrettmoon @rcancro Good for review again. I created a helper function now that does not lock and this can be used if already in a locked state.
",maicki,garrettmoon
1527,2016-04-15 17:07:56,"I think this is the correct solution all though it sucks to have an unlocked and locked version of the method. rectsForTextRange should still behave exactly the same way as before right @maicki?

Looks good to me!
",garrettmoon,maicki
1527,2016-04-15 17:53:51,"@garrettmoon rectsForTextRange works the same way as before now, it just calls the unlocked version of the method.

@rcancro Currently the unlocked version is not exposed and can just be used within the method were it is defined. I hope the comment at the top makes it clear or is enough that developers don't use it without locking.

@appleguy Can you please review now
",maicki,garrettmoon
1527,2016-04-15 17:53:51,"@garrettmoon rectsForTextRange works the same way as before now, it just calls the unlocked version of the method.

@rcancro Currently the unlocked version is not exposed and can just be used within the method were it is defined. I hope the comment at the top makes it clear or is enough that developers don't use it without locking.

@appleguy Can you please review now
",maicki,rcancro
1527,2016-04-16 03:54:04,"@rcancro I do agree.  @maicki since this code has changed a lot since I last was familiar with it, it's pretty difficult to understand the change here because of intermixing of pretty complex code segments.  I'm not sure there would have been a way with less change, but particularly for super-core code like this, it might be the one exception to the otherwise-actively-encouraged idea of making cleanup changes as part of all diffs; for locking correctness we should probably keep it to a minimized change, then a different one for improved formatting.

Because @garrettmoon also took a look and I do really trust @maicki 's quality of work + testing, I'm definitely comfortable landing this despite getting a bit lost in the review.

This is a very important fix and definitely a tough, little-known area of the code base.  Thank you @maicki for jumping in to fix it!!
",appleguy,garrettmoon
1527,2016-04-16 03:54:04,"@rcancro I do agree.  @maicki since this code has changed a lot since I last was familiar with it, it's pretty difficult to understand the change here because of intermixing of pretty complex code segments.  I'm not sure there would have been a way with less change, but particularly for super-core code like this, it might be the one exception to the otherwise-actively-encouraged idea of making cleanup changes as part of all diffs; for locking correctness we should probably keep it to a minimized change, then a different one for improved formatting.

Because @garrettmoon also took a look and I do really trust @maicki 's quality of work + testing, I'm definitely comfortable landing this despite getting a bit lost in the review.

This is a very important fix and definitely a tough, little-known area of the code base.  Thank you @maicki for jumping in to fix it!!
",appleguy,rcancro
1527,2016-04-16 03:54:04,"@rcancro I do agree.  @maicki since this code has changed a lot since I last was familiar with it, it's pretty difficult to understand the change here because of intermixing of pretty complex code segments.  I'm not sure there would have been a way with less change, but particularly for super-core code like this, it might be the one exception to the otherwise-actively-encouraged idea of making cleanup changes as part of all diffs; for locking correctness we should probably keep it to a minimized change, then a different one for improved formatting.

Because @garrettmoon also took a look and I do really trust @maicki 's quality of work + testing, I'm definitely comfortable landing this despite getting a bit lost in the review.

This is a very important fix and definitely a tough, little-known area of the code base.  Thank you @maicki for jumping in to fix it!!
",appleguy,maicki
1526,2016-04-20 02:40:56,"@Adlai-Holler Thanks!  I'd be happy to merge this if you can fix the conflict.

@garrettmoon, could you review this and take mental note of the other issues mentioned?  If you have enough context to tackle any of them easily, I'm sure it would be appreciated - although I know we won't invest much work in Multiplex as we don't use it at Pinterest and there are few clients.  You might want to sync with Adlai about how Photos.framework can be most easily supported in Network without adding much complexity.
",appleguy,Adlai-Holler
1526,2016-04-22 03:57:07,"@Adlai-Holler although you should not Rush if you're busy, you make sure to send me a text message when Mrs. updated and can be emerged, so that I don't accidentally merge something else and introduce another conflict.

Unfortunately the user interface of this site does not show if a change can be merged on the main PR screen, even showing green / all checks passed if it can't be merged, so it's hard to notice when updated.
",appleguy,Adlai-Holler
1526,2016-04-22 18:14:09,"@garrettmoon @appleguy Thanks for the feedback guys! I think this one's ready for love. I tested it pretty thorough with Tripstr.
",Adlai-Holler,appleguy
1525,2016-04-18 03:36:12,"@maicki very nice improvements here, I greatly prefer the style.

I apologize it took me a while to review, but I am eager to merge this change in the next day or two once these small revisions are made!
",appleguy,maicki
1525,2016-04-18 22:24:22,"@appleguy Addressed all the issues:
- Use memset to clear flags
- Fix check for asyncDataSourceNodeForItemAtIndexPath
- Fix selector for asyncDelegateCollectionViewDidEndDisplayingNodeForItemAtIndexPath
- Fix multiple collectionViewWillEditCellsAtIndexPaths:batched: calls
",maicki,appleguy
1525,2016-04-20 15:37:41,"@appleguy happy to see job being done on this problem 👍 
",zintus,appleguy
1524,2016-04-18 03:19:48,"Hmm, interesting.  I wonder where else this would be useful.  Silly world we live in with modern Objective-C.

Thanks for your prolific dilligence, @ejensen !  It is _sincerely_ appreciated!!
",appleguy,ejensen
1522,2016-04-13 02:21:14,"@HeEAaD there are some issues with Travis, but this may be a real failure; it did pass tests but not building all the example apps with Travis.

https://travis-ci.org/facebook/AsyncDisplayKit/jobs/122629240
",appleguy,HeEAaD
1519,2016-04-22 08:39:01,"@yury that's a workaround to fix the original problem, which is the wrong version number in the Podspec file. I stand corrected, that has nothing to do with use_frameworks or Cocoapods itself.

We have wrong version number in the Podspec and it needs to be fixed. Sure we can use a workaround and remove use_frameworks but that doesn't fix the problem. It hides it.
",vandadschibsted,yury
1519,2016-04-25 17:45:04,"@yury Which would be what version? 1.7.9 ?
",JPROFFICIAL,yury
1519,2016-04-26 02:29:06,"@aaronschubert0 Yes my app is in Swift and I use a couple of third party frameworks.  
",smyrgl,aaronschubert0
1519,2016-04-26 02:37:22,"@yury @smyrgl @DavidSchechter @vandadschibsted @aaronschubert0 

Hey everyone, thanks for your patience here.  Initially we had only one report of this.  Then weeks later, a second report.  Only now is it clear that this is affecting a lot of people.  Most developers I've worked directly with are using the static library because of its superior performance, so I didn't realize the impact of this.

I would consider it a Cocoapods issue insofar as 1) Cocoapods permits these version numbers with no warning, and they do not cause an issue for static libraries, 2) This issue does not affect Carthage users, to my knowledge, 3) Cocoapods could easily overwrite the framework version in the metadata with any value they want, as it is not used at that stage, especially for 4-digit version numbers that their stack accepts as valid pod versions.

That said, we will push a new version of the framework in the next day or two.  @maicki and I are getting ready for this unplanned release.  We will need to distort the version numbering scheme and use something like 1.9.73 as we have a large amount of material tracked under the 1.9.8, etc releases and GitHub provides no batch editing functionality.  So we will release that as 1.9.80.  Once 2.0 is released, we will resume a strictly 3-number versioning scheme and eliminate the two-digit minor version.  Let me know if you have any better ideas, but this seems like a relatively low-cost fix (annoying, but I think it is less annoying than changing all our release tracking documents and running into 1.9.10)
",appleguy,aaronschubert0
1519,2016-04-26 02:37:22,"@yury @smyrgl @DavidSchechter @vandadschibsted @aaronschubert0 

Hey everyone, thanks for your patience here.  Initially we had only one report of this.  Then weeks later, a second report.  Only now is it clear that this is affecting a lot of people.  Most developers I've worked directly with are using the static library because of its superior performance, so I didn't realize the impact of this.

I would consider it a Cocoapods issue insofar as 1) Cocoapods permits these version numbers with no warning, and they do not cause an issue for static libraries, 2) This issue does not affect Carthage users, to my knowledge, 3) Cocoapods could easily overwrite the framework version in the metadata with any value they want, as it is not used at that stage, especially for 4-digit version numbers that their stack accepts as valid pod versions.

That said, we will push a new version of the framework in the next day or two.  @maicki and I are getting ready for this unplanned release.  We will need to distort the version numbering scheme and use something like 1.9.73 as we have a large amount of material tracked under the 1.9.8, etc releases and GitHub provides no batch editing functionality.  So we will release that as 1.9.80.  Once 2.0 is released, we will resume a strictly 3-number versioning scheme and eliminate the two-digit minor version.  Let me know if you have any better ideas, but this seems like a relatively low-cost fix (annoying, but I think it is less annoying than changing all our release tracking documents and running into 1.9.10)
",appleguy,yury
1519,2016-04-26 18:42:30,"@appleguy I noticed that Cocoapods 1.0 at least fixed the issue with mixed static/dynamic frameworks so Swift users post-1.0 Cocoapods can at least go that route.  https://github.com/CocoaPods/CocoaPods/pull/4146/commits/7b6d2edcb1b7818eabc120f832c679ec89884d2a
",smyrgl,appleguy
1519,2016-05-04 05:54:28,"@smyrgl @yury @aaronschubert0 @JPROFFICIAL @vandadschibsted Finally, 1.9.73 is fully pushed.  See Slack's #general channel for details.  Email or message me directly with any issues or feedback!
",appleguy,aaronschubert0
1519,2016-05-04 05:54:28,"@smyrgl @yury @aaronschubert0 @JPROFFICIAL @vandadschibsted Finally, 1.9.73 is fully pushed.  See Slack's #general channel for details.  Email or message me directly with any issues or feedback!
",appleguy,yury
1519,2016-05-04 10:17:16,"@appleguy 



PINRemoteImage will break it too.
",yury,appleguy
1516,2016-05-09 14:01:29,"@hannahmbanana At list for me the expected behaviour is to keep a music playing when the video on ASVideo node is muted, only stop the secondary music when unmute the video.
",hebertialmeida,hannahmbanana
1516,2016-05-11 00:52:37,"@mamalat: Thanks for posing this question! @hebertialmeida @smyrgl @hannahmbanana: Thanks for chiming in!

It seems that ASVideoNode shouldn’t make assumptions about the audio session needed and that it should be left up to the developer. I'm going to close out this issue, however, I encourage you to continue the discussion on the #asvideonode channel on ASDK's Slack (#1582).
",appleguy,hannahmbanana
1512,2016-04-12 07:35:12,"@tomizimobile I was able to reproduce by typing, but I cannot get to the screenshot you are showing that has a back button.  Tapping the cells does nothing...

It would be much easier to debug with a one-shot reproduction like you describe, any tips?  cc @maicki FYI
",appleguy,tomizimobile
1512,2016-04-12 12:50:04,"@appleguy Maybe you're using an older version of that sample project? The app now starts with a screen that just has a button to push a view controller. To reproduce I would just go back and forth until the UI is set up like that, it happens pretty quickly. I did forget to mention this was on an iPhone 6 - I'm sure with other devices, the UI layout might be harder to get randomly, so maybe playing around with hardcoding the data could yield this UI.
",tomizimobile,appleguy
1512,2016-04-21 13:41:00,"@appleguy I updated my test project to use static data, and now the crash should be reproducible every time on an iPhone 6 device/simulator. All you need to do is press the button to push the view controller of names, and then press the back button.
",tomizimobile,appleguy
1512,2016-04-21 13:58:34,"@tomizimobile @appleguy Just yesterday we discovered what I think is the same problem and we should fix soon. I will add a link to the issue in here: #1569

As @tomizimobile it is 100% reproducible on an iPhone 6 simulator with the sample app in this issue or in #1569 
",maicki,appleguy
1512,2016-04-21 13:58:34,"@tomizimobile @appleguy Just yesterday we discovered what I think is the same problem and we should fix soon. I will add a link to the issue in here: #1569

As @tomizimobile it is 100% reproducible on an iPhone 6 simulator with the sample app in this issue or in #1569 
",maicki,tomizimobile
1511,2016-04-18 03:26:42,"@maicki some nice stuff here!!
",appleguy,maicki
1503,2016-04-10 08:19:38,"This is extremely exciting! It is literally the first material site update since the project launched, around 2 years ago.

Thank you, also to @hannahmbanana for working on much of the content included here and @lappp9 for going above and beyond running the tutorials to also update the site architecture!
",appleguy,lappp9
1501,2016-11-15 03:09:11,"@hannahmbanana  thanks
",WildDylan,hannahmbanana
1499,2016-04-10 09:43:49,"@appleguy ah I see.
Sometimes, the asynchrony still catches me :)
I would be nice, if the framework handled this behind the scenes transparently.
The behaviour would resemble UIKit and I guess I'm not the only one who stumbled over this gotcha :)

Thanks for making it clear to me though!
",ImJCabus,appleguy
1496,2016-04-10 23:39:27,"Hey @ejensen, I'll take a look at this tonight and let you know if I see any corner cases or regressions!
",lappp9,ejensen
1496,2016-04-14 07:46:46,"Hey @ejensen this looks good to me! The refactors definitely make what's going on more clear.
",lappp9,ejensen
1495,2016-04-09 04:14:57,"@maicki thanks! I would be interested to hear why the compiler was not able to catch this issue, Is the call point incorrectly casting or forcing the method call?
",appleguy,maicki
1493,2016-06-30 11:57:47,"@appleguy @Adlai-Holler thanks for looking into this. I have installed ASDK from the commit of the PR being merged and I still got the same error. Here is a stack trace

[bt_all.txt](https://github.com/facebook/AsyncDisplayKit/files/341344/bt_all.txt)
",ankorko,appleguy
1493,2016-07-25 22:00:29,"@appleguy I have come across a flow that could be related to  what causes this. I will try to describe the steps, maybe that will be some help. If not, I really need to create a test project. I apologize in advance for not having invested the time to create one.
- Load an ASTableView with FRC. 
- It firsts loads the cached data on the disk.
- At the same time a network call is started to fetch more data.
- A very long process takes place in the ASCellNode subclass init.
- The datasource is still locked
- The network call finished, more data is saved to the disk, FRC delegates kicks in and tries to update the ASTableView while the first load is still ongoing.
",ankorko,appleguy
1491,2016-06-17 23:28:13,"Hi @hannahmbanana , I figured out the issue awhile ago. Closing.
",atainter,hannahmbanana
1491,2016-06-20 16:52:51,"@appleguy I implemented it at app level. My priorities have shifted focus since then, so I haven't touched that code since late April. From what I remember I don't think I used that PR. I changed something in my implementation that solved the issue. 
",atainter,appleguy
1489,2016-04-08 03:22:10,"Thanks @Eke for putting up the PR! I think it is a step in the right direction.

That said, speaking with a few coworkers today, they pointed out that the scope of possible states are not all things that should be possible for a developer to set. For example, when playing is finished, this is not necessarily a state that should be available to set on the Player and I believe we will add other states in the future such as paused due to running out of video buffer.

So, for the time being I think it would make sense if we keep the play and pause methods, and then introduce the new state variable as a read only property. We're this still support most of your needs? It would still be fine to have a delegate method that can control whether or not the player can make certain state transitions, Although those state transitions would probably be initiated by a more direct method such as play or pause.

Another option is to introduce a different type of enumeration that has actions that can be set, and include play and pause in those
",appleguy,Eke
1489,2016-04-19 23:54:53,"@Eke I finally got back to this - gosh there were so many ASVideoNode PRs recently, and so many conflicts!  Very exciting and good though, now most are closed and things are more calm :).

@ejensen, @yunnan-wu, @maicki could you weigh in here with any thoughts on the API improvement?  Any concerns with landing this?  It looks pretty good to me, but I also don't extensively use video node.  In the worst case I think we could add an ASVideoNode+Beta.h and expose this there.  But ideally we can commit to a public API direction to allow developers to support building a play head / track that moves as the video plays.
",appleguy,Eke
1489,2016-04-20 08:11:28,"Hello @appleguy 

Will get back to this in few days. how do you think will it be good to make one full functional Video App example ? Live video listing and single video page with full screen button and etc?
",Eke,appleguy
1489,2016-04-28 18:50:41,"@appleguy: @Eke and I discussed closing this PR on slack this morning and starting over given the many conflicts that have arisen since the framework is evolving so fast. 

Could you review the strategy and give feedback on whether these look like good API changes? 
",hannahmbanana,Eke
1489,2016-04-28 18:50:41,"@appleguy: @Eke and I discussed closing this PR on slack this morning and starting over given the many conflicts that have arisen since the framework is evolving so fast. 

Could you review the strategy and give feedback on whether these look like good API changes? 
",hannahmbanana,appleguy
1489,2016-04-28 20:55:27,"@Eke: I am closing this PR with the understanding that you are going to post another.
",appleguy,Eke
1489,2016-04-28 21:02:58,"@appleguy will send new PR tomorrow, messed up with this one : )) there are a lot of conflicts so it will be faster to make new one, i have local copy of my changes so it will not take too long
",Eke,appleguy
1487,2016-04-08 00:10:19,"@appleguy I was able to simply use the view of the cell to get it working, thanks for everything only problem is that now you can't scroll when the gesture recognizer is active. See the library adds a `UIPanGestureRecognizer` to each cell for the swiping and when this is added it doesn't let you scroll the ASTableView is their away around this, maybe adding the gesture to a different part of the node? 

Also if anyone wants the working MCSwipetableViewCell for ASTableView I can post it.
",Arko4576,appleguy
1487,2016-08-22 09:23:45,"@appleguy : Hi. I HAVE come up with a case where I would like to access the underlying `UITableViewCell`. Although this will probably very rarely come up, it can come in handy when working with `UITableViewRowAction` and wanting to customize the appearance of it using something like:


",benjaminhorner,appleguy
1485,2016-04-15 07:05:38,"@garrettmoon Great work on this change! This feature has been requested many times over the life of the framework, and is even something that the Paper team wanted to do (we mused about adding it on several occasions before the framework was released publicly). It's quite fun and exciting to see something like that finally added three years later.

The implementation is quite awesome. Nearly all of the follow-up comments here are minor refinements, but it would be great to integrate them sometime in the next month or two.  It will just further improve a solid integration of this new capability.
",appleguy,garrettmoon
1485,2016-04-15 15:08:22,"@appleguy Thanks for helping me get this in and for the review! I'll follow up with a PR to address the rest of the comments here.
",garrettmoon,appleguy
1485,2016-12-05 12:43:24,@garrettmoon Couldn't get it to work (image loaded from local app bundle). Any ideas?,codeOfRobin,garrettmoon
1485,2016-12-06 06:44:07,@garrettmoon  Here you go: https://github.com/codeOfRobin/localGIFExample,codeOfRobin,garrettmoon
1485,2016-12-07 05:19:04,@garrettmoon Yay! It worked. Made a PR for the documentation.,codeOfRobin,garrettmoon
1484,2016-04-06 01:48:27,"Thank you, @Adlai-Holler!
",appleguy,Adlai-Holler
1480,2016-04-06 05:16:03,"@appleguy I can't really give the real image URLs (internal content servers). However, I can say that they average mobile image uploads. Maybe we can mimic this somehow with Flicker API?
I can reproduce this with the Kittens sample.
By glitch i mean a sudden frame drop.
Last, it might correlate with the simulator. Don't recall seeing it on a device.

I'll try to find a time to fix you guys with a new kittens sample. One that work against a variety of image disk sizes.
",ItamarM,appleguy
1480,2016-04-14 06:53:25,"@appleguy i can't reproduce this so i suggest we will close the issue for now. 
In case I'll be able to reproduce the bug it will include a sample :)

p.s.
Thanks for the detailed replay.
",ItamarM,appleguy
1477,2016-04-06 05:30:43,"@maicki this is actually a very important change that I have been wanting to do for a long time, but never had a chance to investigate. The changes you have made are a substantial improvement and also demonstrate an opportunity to further simplify the implementation without much work. Hopefully this will help us ensure that the incrementation is now more robust than it has ever been.
",appleguy,maicki
1477,2016-04-10 02:14:55,"@maicki I'm going to take this change now as it is definitely an important improvement compared to where we were before. However, there are a few important follow-ups, and please quickly review my comments to make sure that I did not forget to summarize any of them here.
- The transform logic being applied to the scroll direction is **very likely incorrect / should not be applied**, with potentially significant results.  We should check who originally added this.  If it was before my diffs that flipped / made consistent the definitions of Up, Down, etc...then the author probably thought it was necessary because of another bug, when it is in fact not needed and will cause problems like potentially no batch fetching or a flipped working range for transformed views.
- Coalescing should not schedule multilpe call to check the batch, if one is already pending.
- Remove additional logic around horizontal for tables
- Consider if batching should actually be skipped in the case of dragging, and if not, move the other check into the shared code
- **handle moving and reloading of both rows and sections** which can trigger the need to batch fetch.  While I will definitely accept / merge the diff by just adding additional calls, it might make sense to have a shared override point that does both the ""no animation"" call and the ""schedule check for batch update""
",appleguy,maicki
1476,2016-04-07 22:09:40,"@maicki - Looks great and thanks for adding tests. This seems ready to land now
",rahul-malik,maicki
1476,2016-04-08 17:11:09,"@rahul-malik @appleguy Ready for another review
",maicki,rahul-malik
1476,2016-04-10 02:02:21,"@maicki Great work on this! I am urgent now because it is very close and I know it is challenging to continue modifying a diff of this size. Feel free to address the small areas of follow-up in a later change in the next week or two.
",appleguy,maicki
1476,2016-04-11 21:19:17,"@appleguy New pull request: #1513. This adds accessibilityElements support for layer backed nodes within layer backed nodes and addressed the areas you are commented on
",maicki,appleguy
1475,2016-04-05 03:02:11,"@appleguy thanks! :)

So it starts with ASCollectionView with



to constrain cell width.

There is another part of the code where I use the same crowdsource node as on screenshot (this code is just shorter but problem is the same):



And compete code for AirportCrowdsourceNode


",spronin,appleguy
1475,2016-04-05 03:03:57,"@appleguy Podfile.lock tells me its eb762d3bfd3896b2901909ebc24b54c97f32d43c
And I believe its the latest release since I'm working with ASDK for less than a week
",spronin,appleguy
1475,2016-04-05 03:26:45,"@appleguy I was able to fix that trying to reproduce it in SocialAppLayout example :)

The final spec for AirportCrowdsourceNode is:



So the rule is to set `flexShrink = true` to each and every parent spec containing the give ASTextNode and I missed one around `crowdsourceChildren` since it was inside `append` call. My bad :(

Thanks for the help.

Btw, ASDK is great!
",spronin,appleguy
1474,2016-04-06 05:03:28,"@aaronschubert0 not urgent, but if you circle back to this code at some point, it might be worth adding a comment about the fact that ideally we could clear out the options if the size gets set to zero. One good way to implement this might be to set aside the options object given a new instance variable, and if the size is later setback to a nonzero value, reuse the old options object to maintain the other settings it has.

@Adlai-Holler thank you for this fix, I know your schedule is extremely tight right now and so I really value your contributions.
",appleguy,Adlai-Holler
1474,2016-04-06 07:32:26,"@appleguy That sounds like a good idea, that way we don't need to destroy & re-create the options object. I can circle back to this code soon. 
",aaronschubert0,appleguy
1471,2016-04-06 03:09:45,"@appleguy No need to apologize :) . I love what you guys have done with ASDK.... makes my life a bit more enjoyable.

@maicki I'll verify that this has been fixed within the next week. I've been blindsided by other priorities this week.

Thanks for the quick response and turnaround. 

Cheers,
...Mark
",Mark-Henderson,appleguy
1471,2016-04-06 03:09:45,"@appleguy No need to apologize :) . I love what you guys have done with ASDK.... makes my life a bit more enjoyable.

@maicki I'll verify that this has been fixed within the next week. I've been blindsided by other priorities this week.

Thanks for the quick response and turnaround. 

Cheers,
...Mark
",Mark-Henderson,maicki
1471,2016-04-07 23:05:19,"@appleguy @maicki Hi Guys, your fix appears to do the trick.

Cheers,
...Mark
",Mark-Henderson,appleguy
1471,2016-04-07 23:05:19,"@appleguy @maicki Hi Guys, your fix appears to do the trick.

Cheers,
...Mark
",Mark-Henderson,maicki
1470,2016-04-04 05:22:31,"@appleguy I already provide a layout spec how to layout the subnodes by implementing function layoutSpecThatFits(constrainedSize: ASSizeRange) -> ASLayoutSpec

I managed to fix it, I just need to add customNode to view controller's node before doing anything else.
",tungvoduc,appleguy
1468,2016-04-04 01:04:05,"@klivin @MarvinNazari @lappp9 thanks for the report and workaround! Does anyone have time to create a small PR to address the bug?
",appleguy,MarvinNazari
1468,2016-04-04 03:26:17,"Yeah I can look at it tonight or tomorrow!
On Sun, Apr 3, 2016 at 8:04 PM appleguy notifications@github.com wrote:

> @klivin https://github.com/klivin @MarvinNazari
> https://github.com/MarvinNazari @lappp9 https://github.com/lappp9
> thanks for the report and workaround! Does anyone have time to create a
> small PR to address the bug?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/issues/1468#issuecomment-205092619
",lappp9,MarvinNazari
1468,2016-04-07 06:35:37,"@lappp9 - thanks for the PR!
@klivin - please try out the fix on master and let us know if you have any issues with it. 
",appleguy,lappp9
1466,2016-04-01 04:24:10,"Thanks @appleguy and @maicki !!
I did a pod update to version 1.9.7.1 today - is that the latest on master?
",robmontesinos,appleguy
1466,2016-04-01 04:24:10,"Thanks @appleguy and @maicki !!
I did a pod update to version 1.9.7.1 today - is that the latest on master?
",robmontesinos,maicki
1466,2016-04-01 19:16:48,"@maicki Just tried to replace - I don't know what git commit tag is. Got the following terminal messages: 

Analyzing dependencies
Pre-downloading: `AsyncDisplayKit` from `https://github.com/facebook/AsyncDisplayKit.git`, commit `<git commit tag>`

[!] Error installing AsyncDisplayKit
[!] /usr/bin/git checkout --quiet <git commit tag>

error: pathspec '<git commit tag>' did not match any file(s) known to git.
",robmontesinos,maicki
1466,2016-04-01 20:30:42,"@maicki 

I'm not a git master - another error

Analyzing dependencies
Pre-downloading: `AsyncDisplayKit` from `https://github.com/facebook/AsyncDisplayKit.git`, commit `a1cefbe4e61e23437ecda2711b20c7ef578dadc4`

[!] Error installing AsyncDisplayKit
[!] /usr/bin/git checkout --quiet a1cefbe4e61e23437ecda2711b20c7ef578dadc4

fatal: reference is not a tree: a1cefbe4e61e23437ecda2711b20c7ef578dadc4
",robmontesinos,maicki
1466,2016-04-01 21:50:50,"@appleguy  @maicki That works really well. That you very much and I appreciate your patience!!

I see that this is version 1.9.8 - any idea when I can change my pod file back?
",robmontesinos,appleguy
1466,2016-04-01 21:50:50,"@appleguy  @maicki That works really well. That you very much and I appreciate your patience!!

I see that this is version 1.9.8 - any idea when I can change my pod file back?
",robmontesinos,maicki
1466,2016-04-02 21:05:19,"@robmontesinos As soon as @appleguy releases / tags the next version with the latest changes you can change it back. But I think this will take a while though ... so you should be fine with this approach for now.
",maicki,appleguy
1466,2016-04-11 19:56:43,"@huberand OK, I created 1.9.7.2 for you :).  Please let me know if you have any trouble with it.  Email me to join our Slack if you haven't already!

cc @robmontesinos, @maicki 
",appleguy,maicki
1466,2016-04-13 18:25:02,"Thank you @appleguy !!
",robmontesinos,appleguy
1465,2016-06-16 14:06:30,"is there any progress on this or any workaround? @dzenbot @appleguy 
",MarvinNazari,appleguy
1462,2016-04-01 06:19:57,"@levi this is very exciting!  Now that the environment patch has merged, we should make the surgical adaptations required to integrate this functionality, but there is no doubt that most of the work here is reusable.
",appleguy,levi
1461,2016-04-01 04:14:40,"@hannahmbanana this is just so cool. Thank you for taking the time to go through and run all these examples to collect this media and summarize what they include!
",appleguy,hannahmbanana
1459,2016-03-31 05:41:11,"@appleguy Thanks for response. I am using 1.9.7.1 with 2.1.2. Actually I am testing large image. So I hard code all my cell nodes to use the same image URL. Normally this should not happened. You can decide if this should be improve or not. It is acceptable. 
",binchensjtu,appleguy
1459,2016-03-31 06:01:05,"@appleguy Ah. Yes. If many cell using the same icon. This is definitely unsuitable. You can easily reproduce by set the same url and much more cells in kitten example. The same image will be download multiple time while scroll up and down fast.
",binchensjtu,appleguy
1459,2016-04-02 11:22:44,"@garrettmoon 
I print out the clearFetchedImageFromCacheWithURL log `NSLog(@""clearFetchedImageFromCacheWithURL %@ "", [URL absoluteString]);` for URL and downloaded image log in  ASPINRemoteImageDownloader `NSLog(@""downloaded image %@ from %zd"", [URL absoluteString], result.resultType);`
The below log show that the same image is suddenly change from cache(`PINRemoteImageResultTypeMemoryCache` or `PINRemoteImageResultTypeCache`) to network (`PINRemoteImageResultTypeDownload`) 



You can reproduce this by change Kittens example.
1. Make KittenNode use one hard coded URL like `_imageNode.URL = [NSURL URLWithString:@""https://dn-meitiantest.qbox.me/pic.png""];`
2. Increase the kMaxLitterSize much larger in ViewController. like `static const NSInteger kMaxLitterSize = 10000;`
3. Run this project and fast scroll down. Keep scrolling. You can check in log as above or observe in Charles proxy. You should notice that this image will be downloaded from network multiple times while scrolling.

I run this will latest master branch with PINRemoteImage, 2.1.2
",binchensjtu,garrettmoon
1457,2016-04-12 07:50:00,"@hannahmbanana thank you for working on this!

Overall, it is by far the cleanest _and_ most full-featured app in examples/ .  Really.  It is also the only app in examples/ with room to grow, both architecturally and in concept.  There's been a lot of iteration here, and I'm going to merge this initial diff because it has already served as a resource for the community & has no blockers.

It would be awesome to see continued work here.  Both the handful of cleanup areas mentioned (all more minor than the issues affecting every other app in examples/), but also additional features like perhaps viewing user profiles for 500px photographers with an ASCollectionView of their photos - and maybe use ASMapNode on a Location page, reusing the ASCollectionView of photos - perhaps wrapping up the example with opening / closing photos and using an ASPagerNode for fullscreen swiping?

If you use ASViewController to contain the user profile or other views, this example would be only one even close to engaging all four ASDisplayNode container types :)  cc @maicki @levi for thinking about developer intuitiveness / documentation, and how we may be able to leverage this code as an easy-to-read example for things like ""go check out X for an example of using implicit hierarchy management to resize a cell with -setNeedsLayout"".
",appleguy,hannahmbanana
1457,2016-04-14 08:01:49,"@appleguy - I will definitely continue adding to ASDKgram! I'm so happy it could be useful! If you have time in the future, it'd be helpful to know if there is any way to quantify the performance differences between the UIKit and ASDK -implemented home feeds. E.g. you had mentioned adding the GeigerCounter at some point

FYI - the PhotoFeedNodeController is a ASViewController subclass - to parallel UIKit's UIViewController containing the UITableView. 
",hannahmbanana,appleguy
1455,2016-04-01 04:19:40,"@ejensen this is a great find. I know exactly what you're trying to accomplish here, and it is definitely the right thing.
",appleguy,ejensen
1453,2016-03-30 06:01:10,"@Adlai-Holler I am fairly sure this was addressed with a subsequent change, but I may have not updated the git tag.  Can you make sure that it is resolved in master, and close this out if so? I can update the tag if the fix is complete.  (adoption is still low as the release notes have not gone out, although I can do a new release version if it feels worthwhile)
",appleguy,Adlai-Holler
1453,2016-03-30 19:32:58,"Nope, I spoke too soon. Time really does fly around here! I believe you fixed it @appleguy
",Adlai-Holler,appleguy
1453,2016-03-30 19:56:34,"@Adlai-Holler I just update to master and have a try to verify this but turn out to be crashed in staticLayout when trying to set sizeRange with ASRelativeSizeRangeMakeWithExactCGSize... It is to later in my time. I will verify the assertion tomorrow.
",binchensjtu,Adlai-Holler
1453,2016-04-01 06:07:16,"@Adlai-Holler - are you observing it again? or did you reopen the issue to make sure it was resolved for @binchensjtu as well? 
",hannahmbanana,Adlai-Holler
1453,2016-04-01 06:51:18,"@hannahmbanana I just update to latest master. The assertion failure and static layout crash has gone. It works fine for me now~thanks~
",binchensjtu,hannahmbanana
1451,2016-06-27 08:24:22,"@appleguy Happy to close. No longer requiring this use case
",fatuhoku,appleguy
1450,2016-04-26 18:59:55,"@fatuhoku: Thanks for asking this question. I believe that @lappp9 and @hannahmbanana have update the website docs to explain ASRangeController / Intelligent Preloading http://asyncdisplaykit.org/docs/intelligent-preloading.html

I'm going to close this issue, but feel free to reopen it, start another issue or ping us on slack if there is a way to improve the website documentation. 
",appleguy,hannahmbanana
1449,2016-04-18 07:53:26,"@appleguy thanks. When will we be able to get an official Pod fix for this please? Thanks. I am afraid of putting more and more hacks in our code/build system so prefer to avoid workarounds. I really appreciate the time you are putting into AsyncDisplayKit and your work is amazing.
",vandadschibsted,appleguy
1449,2016-04-19 07:56:40,"The framework is not ready for 1.9.8, and probably will not before another two weeks. A suggestion I made on slack, but was discouraged from executing, was to launch a version called 1.9.73 and then use 1.9.80 for the next release.

If this is a significant issue, I can go with this approach in the next few days. However, this fundamentally seems like a limitation with Cocoapods, and specifically dynamic frameworks, which have some pretty serious performance problems by themselves.  It's definitely a bummer to have to influence our versioning scheme for this case, so if the workaround is suitable for the next two weeks, let me know. Otherwise I will put out the release mentioned.

> On Apr 18, 2016, at 12:53 AM, Vandad Nahavandipoor notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy thanks. When will we be able to get an official Pod fix for this please? Thanks. I am afraid of putting more and more hacks in our code/build system so prefer to avoid workarounds. I really appreciate the time you are putting into AsyncDisplayKit and your work is amazing.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1449#issuecomment-211249798
",appleguy,appleguy
1449,2016-04-19 10:23:34,"@appleguy thanks for the reply. I don't think this is a problem with CocoaPods! It is iTunes Connect that has problem with the version numbers in the plist file!

We have no problem bringing in the pod and installing the pod and even building an ipa files. The issue is when the binary is uploaded to TestFlight when Apple does validation on the binary and finds out that the version number of AsyncDisplayKit framework is 4 slices and is therefore invalid.

Thoughts?
",vandadschibsted,appleguy
1448,2016-04-20 19:34:54,"@appleguy @hannahmbanana hmmm I no longer work on that part of the code... so I'm happy to close it until someone runs into this issue again :P cheers!
",fatuhoku,appleguy
1448,2016-04-20 19:34:54,"@appleguy @hannahmbanana hmmm I no longer work on that part of the code... so I'm happy to close it until someone runs into this issue again :P cheers!
",fatuhoku,hannahmbanana
1447,2016-03-31 10:32:55,"@appleguy By the 'latest' version of the framework I'm guessing you mean 1.9.7.1 specifically?

It wasn't clear that `ASNetworkImageNode` had any caching going on when I tested it. Odd. That was the only reason I went out of my way to find a cache, and went for something familiar — a bridge to SDWebImage.

EDIT: Ah! `ASNetworkImageNode` learns of the existence of PINRemoteImage via a compiler flag... I'm using Carthage. Will need to set this myself.

EDIT: #1464 Carthage users need to use `ASPINRemoteImageDownloader` in a much more explicit way

EDIT: Okay, PINRemoteImage works pretty well — the problem is that the cells aren't being rendered ahead of time at all on the iPad 2 which makes the images fading in look really obvious. Closing, see #1451
",fatuhoku,appleguy
1446,2016-03-31 13:09:00,"Hi @appleguy — if you don't mind putting my use case here directly, I'm using ASDK to help provide a snappier UX recipe cards that look like this:

![screen shot 2016-03-31 at 14 03 42](https://cloud.githubusercontent.com/assets/430233/14176580/a55f2468-f749-11e5-9298-634eac14c8cb.png)

The contents of the cell is held in a `MESMinicardContentNode` with the following properties (I won't show init)



... all in a flat hierarchy. Two network image nodes per cell. **They both should fade their images in**.  Layer-backing / rasterisation seems to interfere with fading in of the placeholders (understandably)!  :(

The cell itself is called `MESMinicardCellNode`, which wraps a `MESMinicardContentNode` thusly:



How might you optimize this? Which layers should be rasterised, and which should be layer-backed?

Cheers.
",fatuhoku,appleguy
1445,2016-03-28 12:05:31,"@appleguy Thanks for you remind.I re-install my cocoaPods,it's works well.the version is 0.39. the podfile error was disappear.
I remember that I run the 'gem install cocoapods --pre'  in my teminal,then the cocoapods version is 1.0.0.beta.4  it is the reason I got into trouble.
",lengain,appleguy
1444,2016-03-28 06:13:08,"@appleguy thanks for response!

i just completed experimenting w/ ASViewController and did bunch of debugging;
1. ASViewController seems to be invoking [node measureWithSizeRange] in viewWillLayoutSubviews based on stack-trace. and this ends up masking the issue 3 because it's actually the same ""work-around"" i mentioned above:

> d. if i invoke [myNode measure:] right before [myNode setNeedsLayout] to workaround above issue, [setNeedsLayout] throws away my measure and re-invokes measure.. so... why should i call [measure] myself first if it's going to be thrown away?

so it ""fixes"" it the same way, but with the same wasteful `[measure]` call... 
1. root-node resizing logic from `setNeedsLayout` would be skipped because ASViewController passed in a sizeRange whose minSizeRange is the screen-size; so it would never clamp below the screen size... 

and that re-sizing logic would only apply to root-node, but ASViewController is basically preventing root-node from being re-sized; so that resizing-logic would be a dead-code (assuming no-rotation) while using ASViewController... i guess that logic exists for ASCollection/TableView? 

in summary, all the custom logics related to resizing in `[node setNeedsLayout]` becomes no-op while using ASViewController (its own root node), so it doesn't affect that view controller, but if one's using a UIViewController, it would/ and bunch of indeterministic behavior described above... and the way to skip that custom logic is either directly call `[node.view setNeedsLayout]` or keep calling `measureWithSizeRange` in viewWillLayoutSubviews (like ASViewController does) which would be more expensive. and since that custom logic is not benefitting ASViewController... and it doesn't really benefit regular UIViewController users either... then i guess there were some other cases (ASTableVC?) that benefitted from this.... i feel like those custom `[setNeedsLayout]` behaviors should've been inside their respective benefactors' node classes instead of ASDisplayNode...but okie; at least, i know how to work-around it.

thanks for response again!
",akathrowaway,appleguy
1442,2016-03-28 09:20:09,"Thanks for your response @appleguy.

Okay, I used [this snippet](http://stackoverflow.com/a/993159/590767) to create my 1px `placeholderImage` and made a subclass called `MYNetworkImageNode` and can confirm that the **placeholder does indeed fade in as expected**. 

For completeness the code looks like this:





So it does look like `placeholderColor` is broken here.
",fatuhoku,appleguy
1442,2016-04-01 05:46:09,"@appleguy @fatuhoku: It looks like this might be a known issue -> #392
",hannahmbanana,appleguy
1439,2016-03-26 18:55:55,"@hannahmbanana The version of ASDK I'm using is 1.9.7.1. 
And this is not inside an ASCellNode. This is my view hierarchy(I removed things that are not relevant):
[structure.txt](https://github.com/facebook/AsyncDisplayKit/files/190586/structure.txt)
I use CLLocationManager to get heading values. With each value I do some calculations and update the attributedString properties of the ASTextNode objects

Regards,
",anhnd,hannahmbanana
1439,2016-03-27 05:29:03,"@appleguy  The reason why my application created a large number of threads is my application have a mode that will insert a MKMapView instance below all other views.

About these text node objects, I'm using strong properties and write the getter like this



And the first time I access these properties (so they will be added to self.view) is in viewDidLayoutSubviews when I set those text node objects' frames.

I think I will consider using ASViewController.

Regards,
",anhnd,appleguy
1439,2016-03-27 22:15:31,"@appleguy That's why I only put  [self.view addSubnode:_facingTextNode] in the getter when _facingTextNode is nil. It's my habit to set the frames in viewDidLayoutSubviews(so when things like auto rotation happen, the frames will be changed). I think it should be ok.

Thank you for the link, I will try it as soon as possible and tell you the result. And I will try to get more information so you can reproduce the issue.

Regards,
",anhnd,appleguy
1438,2016-03-26 18:56:56,"@Adlai-Holler this is an intensely performance sensitive method. I can't immediately think of a use case for changing the layer hierarchy in response to a display call... This method will in fact not even call layout, because that has already occurred shortly before we start the iteration.

Could you share a stack trace for examples of how this enumeration exception can be triggered with a user-interface code pattern that should be supported?
",appleguy,Adlai-Holler
1438,2016-04-20 03:10:48,"@Adlai-Holler if I can get some details on the stack trace, Or better yet a reproduction case, I'm not opposed to taking this. However, this is a performance critical code path on the main thread and I would like to ensure I understand a plausible scenario in which this would be required.

For example, with the display node call backs for custom drawing, they must be done in a class method and they are called off of main thread entirely. So it doesn't seem like a valid thing to change the layer hierarchy at that time, And the correct fix for a place holder manipulating the hierarchy is more likely adjusting that call rather than copying the tree.
",appleguy,Adlai-Holler
1438,2016-06-05 04:18:26,"@Adlai-Holler I finally encountered this for the first time.  It is due to some code I would consider incorrect, an outdated manual call to -fetchData that itself triggers adding something to the hierarchy, all triggered by displayWillStart.  That said, all I really wanted before adding this overhead is a concrete stack trace of an example of hitting the issue, and now we have that :).

I'll take this for now, but it would be great to eventually allow deferring displayWillStart just momentarily, until after the iteration, to avoid this high frequency copy -- for the fact that many apps have huge hierarchies and this will happen thousands of times while scrolling.

#0  0x0000000107d8a359 in **32-[ASVideoPlayerNode showSpinner]_block_invoke at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASVideoPlayerNode.mm:496
#1  0x0000000107cb0c64 in -[ASDisplayNode _viewToLoad] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:430
#2  0x0000000107cb19ab in -[ASDisplayNode _loadViewOrLayerIsLayerBacked:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:485
#3  0x0000000107cb1e8c in -[ASDisplayNode view] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:515
#4  0x0000000107cbf57c in -[ASDisplayNode _addSubnodeSubviewOrSublayer:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:1520
#5  0x0000000107cbb3fa in __28-[ASDisplayNode addSubnode:]_block_invoke at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:1300
#6  0x0000000107cf4a9e in ASPerformBlockOnMainThread at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/Private/ASInternalHelpers.mm:40
#7  0x0000000107cbafa6 in -[ASDisplayNode addSubnode:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:1299
#8  0x0000000107d8a05d in -[ASVideoPlayerNode showSpinner] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASVideoPlayerNode.mm:500
#9  0x0000000107d896e8 in -[ASVideoPlayerNode videoNode:willChangePlayerState:toState:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASVideoPlayerNode.mm:423
#10 0x0000000107d8338a in -[ASVideoNode setPlayerState:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASVideoNode.mm:412
#11 0x0000000107d82882 in -[ASVideoNode fetchData] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASVideoNode.mm:336
#12 0x0000000107d1c54d in -[ASNetworkImageNode displayWillStart] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASNetworkImageNode.mm:270
#13 0x0000000107cba798 in -[ASDisplayNode willDisplayAsyncLayer:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:1234
#14 0x0000000107c9a076 in -[ASDisplayNode(AsyncDisplay) displayAsyncLayer:asynchronously:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/Private/ASDisplayNode+AsyncDisplay.mm:366
#15 0x0000000107c3b876 in -[_ASDisplayLayer display:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/Details/_ASDisplayLayer.mm:198
#16 0x0000000107c3b7b4 in -[_ASDisplayLayer display] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/Details/_ASDisplayLayer.mm:186
#17 0x0000000107cc32e4 in recursivelyTriggerDisplayForLayer(CALayer_, bool) at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:1886
#18 0x0000000107cc34ef in recursivelyTriggerDisplayForLayer(CALayer_, bool) at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:1894
#19 0x0000000107cc34ef in recursivelyTriggerDisplayForLayer(CALayer*, bool) at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:1894
#20 0x0000000107cc3d23 in -[ASDisplayNode _recursivelyTriggerDisplayAndBlock:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:1925
#21 0x0000000107cae8bf in __49+[ASDisplayNode scheduleNodeForRecursiveDisplay:]_block_invoke_2 at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASDisplayNode.mm:247
#22 0x0000000107d33dab in -[ASRunLoopQueue processQueue] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASRunLoopQueue.mm:126
#23 0x0000000107d3340e in __45-[ASRunLoopQueue initWithRunLoop:andHandler:]_block_invoke at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASRunLoopQueue.mm:50
#24 0x000000010ab13c37 in __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION** ()
#25 0x000000010ab13ba7 in __CFRunLoopDoObservers ()
",appleguy,Adlai-Holler
1437,2016-03-26 18:54:04,"@ejensen interesting! What use cases have you envisioned for this?

Would you be interested in adding forwarding methods for UITextInputTraits, potentially resolving https://github.com/facebook/AsyncDisplayKit/issues/1434 for @huyle90 's use case with a cleaner API?

Let me know if you have a chance to look into the build failures. I did rerun the build, but is still not passing.
",appleguy,ejensen
1437,2016-03-26 22:59:24,"@appleguy My particular use case is creating editable [un]ordered lists. I use a custom NSLayoutManager to generate the number / bullet glyphs. This is in contrast to inserting the characters and indentation into the attributed string. Which would interfere with typing and selection of the text.

![simulator screen shot](https://cloud.githubusercontent.com/assets/915431/14062839/235e1276-f36b-11e5-8797-d5f8ab2babfa.png)

Besides my use case, opening up LayoutManager / TextContainer for customization allows for all the TextKit goodies such as exclusion paths.
![textkit](https://cloud.githubusercontent.com/assets/915431/14062834/11b86918-f36b-11e5-8c09-f8847312123b.png)

I'll look into adding UITextInputTraits to the ASEditableTextNode's interface. It will be in a separate PR if that's OK?
",ejensen,appleguy
1435,2016-08-20 09:20:13,"How do you access these tools with Swift ?
Do you need to manually create a bridging file ?

cc: @hannahmbanana 
",plm75,hannahmbanana
1434,2016-03-28 13:49:55,"@appleguy  @hannahmbanana textView is not nil since I have instantiated the ASEditableTextNode. I set all properties needed and they are fine except secureTextEntry doesnt show password char (•).  This  somehow didnt work for UITextView I guess.
passwordTextFieldNode.textView.secureTextEntry = true
",huyle90,appleguy
1434,2016-03-28 13:49:55,"@appleguy  @hannahmbanana textView is not nil since I have instantiated the ASEditableTextNode. I set all properties needed and they are fine except secureTextEntry doesnt show password char (•).  This  somehow didnt work for UITextView I guess.
passwordTextFieldNode.textView.secureTextEntry = true
",huyle90,hannahmbanana
1434,2016-03-30 16:54:23,"@appleguy I haven't checked but that could actually be the case.

Personally I prefer your approach of supporting ASTextField. Supporting ""proper"" single line form fields is a bit of a hassle right now (forcing 1 line, disabling newlines from keyboard, replacing pasted newline characters, etc) which is all provided for free by UITextField.

If I have time and no one else has tackled it by then, I'll give it a go as my project needs it as well.
",wpK,appleguy
1434,2016-03-30 17:33:51,"Very cool!  If you are interested in joining our Slack or bug tracker Ship, send me an email.

Sent from my iPhone

> On Mar 30, 2016, at 9:54 AM, William Key notifications@github.com wrote:
> 
> @appleguy I haven't checked but that could actually be the case.
> 
> Personally I prefer your approach of supporting ASTextField. Supporting ""proper"" single line form fields is a bit of a hassle right now (forcing 1 line, disabling newlines from keyboard, replacing pasted newline characters, etc) which is all provided for free by UITextField.
> 
> If I have time and no one else has tackled it by then, I'll give it a go as my project needs it as well.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",appleguy,appleguy
1434,2016-07-08 18:21:56,"I've just pulled down the PR merge on master to try out the UITextInputTraits, but, I'm still not seeing the secureTextEntry property take hold on the underlying UITextView. Per @appleguy's previous comment, it looks like the UITextView rendering code is not respecting the secureTextEntry property. +1 for using UITextField as the underlying view for ASEditableTextNode.
",cbreed28,appleguy
1434,2017-01-03 20:03:45,"Some idea from an Slack conversation with @appleguy today:
<img width=""519"" alt=""screen shot 2017-01-03 at 9 01 37 pm"" src=""https://cloud.githubusercontent.com/assets/25288/21621161/1a55f538-d1f8-11e6-8d15-c4b635b95c96.png"">
",maicki,appleguy
1432,2016-04-01 04:49:55,"I thought I had merged this!  Sorry, this is definitely a real and material improvement to the code quality and readability of ASDataController :).  Thanks @maicki !
",appleguy,maicki
1428,2016-04-01 04:49:01,"@maicki thank you for implementing this. Without having built this, I don't think we would have ever had the idea for the environment. We should first focus on completing the adoption in our application, but will come back to implementing this in the environment later. If you could make sure a task is filed in Ship to track this, that would be perfect.
",appleguy,maicki
1427,2016-04-20 02:50:04,"@Xinchi send me a note in slack with the current state of this project. Sorry took a while to get around this, I would like to see what the right solution is now especially if we have not already landed the application level workaround. If that workaround is suitable for now, then don't worry about resuming this

Because it is easy to reopen this if we want to proceed, I'm going to close it out for now, As it can't be cleanly merged with the current master without changes anyway.
",appleguy,Xinchi
1425,2016-03-27 17:57:01,"@hannahmbanana Great tips! I'm used thinking about UI in a declarative way and forgot that UIKit cares very much what order children are placed.

Hmmm. Though thinking about it, should `ASOverlayLayout` really be manipulating the ordering of `subnodes` array?  Sounds like it might be doing a bit too much. `ASBackgroundLayout` would also require the same behaviour.

What might be more useful is if the layout could spit out a warning, saying that ""ASDK is trying to overlay A over B but node B is before A in pecking order. This will cause A to appear beneath B (given they have identical `zPosition`). Make sure you have [self addSubnode:A] before [self addSubnode:B]. "".
",fatuhoku,hannahmbanana
1425,2016-05-11 01:51:55,"@fatuhoku: This warning is a reasonable suggestion and I will make note of in our roadmap tracker. 

When Implicit Node Hierarchy Management becomes default (it is currently beta), adding SubNodes will be used almost exclusively for manually overriding the default ordering of the nodes that is defined in the layoutSpec. So, if there were no addSubnode calls, as will be the most common case, overlaySpec will ensure that the ordering is correct. 

For Info on Implicit Node Hierarchy Management: http://asyncdisplaykit.org/docs/implicit-hierarchy-mgmt.html

@hannahmbanana: could you make a note of this warning in our documentation?
",appleguy,hannahmbanana
1422,2016-11-15 21:42:23,"@appleguy @runningfree100 any update on this? Would love to close out this issue if it's addressed.
",garrettmoon,appleguy
1421,2016-03-24 06:33:29,"@Adlai-Holler this is a good change, and we have seen a similarly obscure case at Pinterest crop up just today actually.  My main concern is that this will generate a very large number of retain and release calls, in addition to the array copy itself.

I would significantly prefer if we can use a non-retaining, efficient data structure.  A simple C-array (getBytes from the NSArray copied into a malloc'd memory area?) would be a lot better, if it is safe... Although it does seem at least conceivable that some transformation triggered by one of the elements could actually result in before the allocation of one of the other objects (seems pretty shady to do, but maybe a subnode calling to a supernode via a delegate, and triggering rasterization enable could technically orphan all of the references to a given sublayer of a sibling node?)

I will merge this change now, but if you have an odd moment to consider if a non-retaining approach would work in all worthwhile to support use cases, let me know!
",appleguy,Adlai-Holler
1419,2016-03-24 09:28:04,"@hannahmbanana sorry for the late response, timezone diff.

Basically I'm using an ASPagerNode to display 3 viewcontrollers that I have, pretty standard stuff. Nodes for the viewcontrollers are created using the `pagerNode(pagerNode: ASPagerNode!, nodeBlockAtIndex index: Int)` and everything works fine. 

The problem I'm having is not related to the elements in those views because I use them like you mentioned. One of the views have an editabletextnode in them, and I wanted to use `touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?)` on its parent node to dismiss the keyboard if the textnode has focus, but the method is never called. If I ditch the pager and present the VC alone, `touchesBegan` is called normally.
",ardaerzin,hannahmbanana
1419,2016-04-07 19:29:09,"@appleguy sorry I was overwhelmed by some deadlines. I created a very [basic project](https://github.com/ardaerzin/ASDKTest). I believe this should be enough to spot the issue. With a normal UIScrollView touchesBegan is called when scrollEnabled is set to false, but that does not work when I use an ASPagerNode.
",ardaerzin,appleguy
1419,2016-06-21 04:11:27,"@ardaerzin - Thanks for including a sample project, I apologize for the delay in response. We have been busy releasing AsyncDisplayKit 1.9.8, so make sure to check it out! @appleguy and I looked at your code and we found that it was referencing some older code styles of AsyncDisplayKit, which implies you are not on the latest version. You may need to run pod update to get the latest version of AsyncDisplayKit, as newer versions of CocoaPods require this. 

As for your question: To detect a tap, you should either add a tap gesture recognizer to the `ASCellNode` in `didLoad:` (_not_ in `init:`) or add an `ASControlNode` that is as large as the area you need to tap with an `addTarget:action:` call. 

Because your sample project was mostly empty, your current hierarchy seemed to have elements that weren't used or weren't necessary for the functionality of the sample project. The ChildControllerNode class was not instantiated anywhere (instead ASCellNode was created directly in the ViewController data source method) . Also you were manually creating an ASPagerNode layout, which did not seem to be necessary or fully configured, so because the only apparent customization to the ASPagerNode that the subcalss ViewControllerNode implemented was an orange background color, we simply created the ASPagerNode directly (rather than subclassing) and set the background color to orange. 

One more important note is that your nodeBlockAtIndex function was not thread safe. This code is called asynchronously and so accessing shared state like subcontrollers from within the block is not okay! It would be easy to change this to nodeAtIndex: to not have to worry about thread safety. 

Here's the project cleaned up a bit:
[ASDKTest-master 2.zip](https://github.com/facebook/AsyncDisplayKit/files/324772/ASDKTest-master.2.zip)
",hannahmbanana,appleguy
1419,2016-06-26 19:19:49,"@ardaerzin: Given the length of time since this thread was active, I'm going to close it. If you have any further questions, feel free to reopen this thread or ping @hannahmbanana or I. I hope you have been able to use the framework!
",appleguy,hannahmbanana
1415,2016-03-22 21:35:29,"@appleguy LGTM
",maicki,appleguy
1411,2016-06-17 07:23:30,"@hannahmbanana @appleguy PR #1139 seems to fix it. Just wrote a sample and can not reproduce it anymore. Sorry that I'm not able to test it with my code from March (I'm travelling right now).

Best

Alex Köhn aka ak ;-)
",alibasta,appleguy
1411,2016-06-17 07:23:30,"@hannahmbanana @appleguy PR #1139 seems to fix it. Just wrote a sample and can not reproduce it anymore. Sorry that I'm not able to test it with my code from March (I'm travelling right now).

Best

Alex Köhn aka ak ;-)
",alibasta,hannahmbanana
1408,2016-03-22 00:17:27,"Very awesome, @ejensen !  @levi or @Adlai-Holler let me know if you have time to review tonight or I might just merge.  Same for https://github.com/facebook/AsyncDisplayKit/pull/1409
",appleguy,ejensen
1406,2016-03-21 02:24:52,"Very personally satisfied to have the opportunity to merge this!  Thank you for caring about every user's experience, @rahul-malik.
",appleguy,rahul-malik
1402,2016-03-20 00:17:34,"Thanks @hannahmbanana for resolving https://github.com/facebook/AsyncDisplayKit/issues/1388 !
",appleguy,hannahmbanana
1401,2016-04-07 07:06:12,"@Eke - sorry for the late response it's been a busy few weeks! 

This sounds like a definite improvement to the ASVideoNode API, and is something we would likely build upon at Pinterest as we are also interested in things such as a full screen playback state!

Please do proceed to a pull request. Please note, however, that we should include the play and pause methods near the bottom of the header and comment that they are deprecated. Internally, these can simply call the state change API, and we will remove them in a few months. 
",appleguy,Eke
1401,2016-04-07 07:51:33,"Hello @appleguy, happy to hear this. I have also few more ideas how to improve `ASVideoNode` with more delegate methods, will add them too. In few days will submit pull  request.

I am thinking about implementing layout object for `ASVideoNode`, which will contain everything needed for player layout, starting from play button icon ended with fullscreen button position (just idea for now). You can then have this object inited once in app, and give it to all ASvideoNode objects without any delegate methods or instance changes. Will be happy to hear your thoughts about this.

About fullscreen, i was able to implement fullscreen playback with AsyncDisplayKit in my app (like Facebook from ASCellNode), app is in review now, can send link to you when it's published, if interested.
",Eke,appleguy
1401,2016-04-08 03:21:55,"Thanks @Eke for putting up the PR!  I think it is a step in the right direction.

That said, speaking with a few coworkers today, they pointed out that the scope of possible states are not all things that should be possible for a developer to set. For example, when playing is finished, this is not necessarily a state that should be available to set on the Player and I believe we will add other states in the future such as paused due to running out of video buffer.

So, for the time being I think it would make sense if we keep the play and pause methods, and then introduce the new state variable as a read only property. We're this still support most of your needs? It would still be fine to have a delegate method that can control whether or not the player can make certain state transitions, Although those state transitions would probably be initiated by a more direct method such as play or pause.

Another option is to introduce a different type of enumeration that has actions that can be set, and include play and pause in those
",appleguy,Eke
1401,2016-05-11 03:29:53,"@Eke - I really appreciate all of your activity on the ASDK Slack channel & as a ASVideoNode developer! We're in the process of moving to a new issue tracker / moving dev coordination to Slack, so I'm going to close this issue out. However, it does not mean that I am not dedicated to improving ASVideoNode and I look forward to seeing more ASVideoNode collaboration on Slack. :)
",appleguy,Eke
1400,2016-04-02 05:44:27,"@eanagel - the reason this assertion exists is because transitions are capable of performing detailed animations and even addition and removal of subnodes at every level of the hierarchy beneath the call point. For obvious reasons, especially considering that the API is thread safe and that the measurement calculations can be easily performed on a background thread simply by calling transition there, it is important to ensure consistency. 

If you could elaborate on your use case, which is probably valid and worth supporting, we can think about the way to support it. The architecture in this area is actually in great shape to modify this behavior, potentially doing something like allowing a subtree that is animating to take precedence over animations of the parent, but we will need to think through certain threading implications. 

cc @levi @nguyenhuy (don't worry about implementing now, just something to brainstorm about for the longer term future of the transition API)
",appleguy,eanagel
1399,2016-03-19 07:46:48,"@appleguy Only have the one comment, apart from that, awesome improvements. Feels good that you've removed any ambiguity that was left in the code or comments!
",aaronschubert0,appleguy
1399,2016-03-20 08:10:00,"@appleguy Logic looks all good!
",aaronschubert0,appleguy
1398,2016-03-20 13:31:42,"@appleguy Added one small comment but LGTM
",maicki,appleguy
1398,2016-03-20 16:57:48,"Love this! Nice @appleguy!
",Adlai-Holler,appleguy
1396,2016-03-19 06:49:11,"@eanagel I'm pretty sure that this will work if you set flexShrink on the text node, which I assume is what must have been the case on the message bubble beneath. Setting it on the inset unfortunately does not have a propagating effect to its children, although for that particular kind of spec, it probably should.

For layout specs with multiple children, such as a stack, setting flexShrink on the layout spec itself of course has a very different meaning than on one of the children.

@nguyenhuy @levi @maicki @hannahmbanana Does this answer sound correct to you, and how might we improve the API with automatic propagation of ASLayoutable / ASStackLayoutable properties? Would it be possible to do this automatically for all ASLayoutSpecs with a child count of 1?
",appleguy,eanagel
1396,2016-03-20 04:45:55,"@eanagel Is that inset spec a direct child of the horizontal stack? What is the constrained size passed to the outermost horizontal stack?

I usually find it useful to print out the ASCII representation of the whole layout hierarchy (`asciiArtString`) and the constrained size passed to the root object. 

If you can put up a sample project, I will be more than happy to take a look.
",nguyenhuy,eanagel
1396,2016-03-21 21:06:01,"@nguyenhuy @appleguy Ok I figured this out and it was a problem in the NSAttributedString we were passing. Somehow we were passing in a paragraph style of NSLineBreakModeTruncateTail which was overriding the property on the node.
",eanagel,nguyenhuy
1396,2016-03-21 21:06:01,"@nguyenhuy @appleguy Ok I figured this out and it was a problem in the NSAttributedString we were passing. Somehow we were passing in a paragraph style of NSLineBreakModeTruncateTail which was overriding the property on the node.
",eanagel,appleguy
1396,2016-03-21 21:07:08,"@eanagel Glad to know. Thanks!
",nguyenhuy,eanagel
1396,2016-04-01 06:33:19,"@eanagel - a new internal capability called ASEnvironment has landed and one of its functions is to propagate the ASLayoutable properties up the tree. This should eliminate the need to set something like flexShrink on an insetSpec if it contains a textNode that already has flexShrink set. 

It would be really valuable if you could test this out and see if it allows you to simplify any of your layout code as well as if it causes any unexpected issues. There is some possibility that this could cause regressions, but because the framework has not gone to 2.0 yet, this would be acceptable if the resulting layout code, after fixing the issue, is simpler than before. 
",appleguy,eanagel
1395,2016-04-01 18:21:59,"@hannahmbanana I haven't solved the problem. The problem is that datasource has more than 1000 items when creating the controller and it takes a long time to display items
",Baevra,hannahmbanana
1395,2016-04-01 19:52:54,"@hannahmbanana Here is an example https://github.com/Baevra/ASDKTest
this is a simple example in which you can see a delay when you create ASCV
thank you so much for your help
",Baevra,hannahmbanana
1395,2016-04-02 09:35:05,"@hannahmbanana I have updated the project and added UIKit for compare
",Baevra,hannahmbanana
1394,2016-03-20 00:56:10,"@appleguy Yeah I'm curious how you're usages are working as well. Are you animating either the frame or bounds properties on nodes in your layout? Here is an example of the transition where I first noticed this issue.

Layout:



And the the animation and animation initiation:



Animating other properties that did not change the frame were working, for instance if I was just animating the alpha of new nodes. 

And here is a sample app to demonstrate the issue. Whats happening is the animated node will jump to its final position immediately after starting the animation.

[LayoutTransitionTestApp.zip](https://github.com/facebook/AsyncDisplayKit/files/181104/LayoutTransitionTestApp.zip)
",jellenbogen,appleguy
1394,2016-05-11 00:13:26,"@levi @appleguy Especially after #1622 landed curious if the initial bug happens and the crash on the commerce pin.
",maicki,levi
1394,2016-05-11 00:13:26,"@levi @appleguy Especially after #1622 landed curious if the initial bug happens and the crash on the commerce pin.
",maicki,appleguy
1393,2016-03-17 18:22:03,"Besides above issue, LGTM. Thanks for working on this, @ejensen.
",nguyenhuy,ejensen
1393,2016-03-17 18:27:29,"That's embarrassing. Thanks for catching that typo @nguyenhuy
",ejensen,nguyenhuy
1392,2016-03-20 00:22:57,"Thank you @hannahmbanana for picking up this task and investigating!  To investigate further, I actually started a branch based off of this PR, and continue the change -- but posted it in a different pull request: #1398 .
",appleguy,hannahmbanana
1387,2016-03-20 04:10:19,"@jellenbogen Thanks for this detailed report. I ran your sample and found out that stack spec doesn't pass along transition ID to its children (https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/Private/ASStackUnpositionedLayout.mm#L32). This causes subnodes (`banner` node in your example) to refuse to measure because the constrained size given to each of them doesn't contain the transition ID they are expecting.

Because of the above reason, I still believe the call order in `transitionLayoutWithSizeRange:animated:shouldMeasureAsync:measurementCompletion` is valid. @appleguy and I have a fix and will put up a PR in a few days. Please be patient. Thank you!
",nguyenhuy,appleguy
1387,2016-03-20 04:49:43,"@nguyenhuy I see that makes sense. Thanks for taking a look!
",jellenbogen,nguyenhuy
1387,2016-03-25 20:38:36,"@nguyenhuy Is there an issue tracking the fact that the transition ID is not being passed along to the children?
",jellenbogen,nguyenhuy
1385,2016-03-16 00:15:52,"@maicki This is awesome. Thanks for fixing!
",nguyenhuy,maicki
1384,2016-03-16 00:12:42,"Thanks @nguyenhuy !  @maicki we may want to create that ""opposite of ASHierarchyState"" thing to signal ""upward-hierarchy"" information and then port this feature to be based on it.
",appleguy,nguyenhuy
1384,2016-03-16 00:18:11,"That would be ideal, @appleguy @maicki.
",nguyenhuy,appleguy
1379,2016-03-16 20:49:58,"Thanks, @joostvandijk , that's exactly it. My bad for forgetting about seeing the func somewhere.
",supersv,joostvandijk
1379,2016-03-17 07:00:45,"@supersv @joostvandijk I just learned a few days ago that this header was marked public, which wasn't actually intended. :)

Although the function should behave as desired, it is important to know that you should not require this function in your application (certainly not in many places). For example, you might consider a delegate protocol or another technique to do this. 

Could you share a little bit more about your use case so that I can understand the best route to provide a fully supported API? 

Please be aware that this method may change and you may need to adapt your usage of it. However, if this happens, I will try to ensure that a similar alternative is provided.
",appleguy,joostvandijk
1379,2016-03-17 08:01:55,"@appleguy I've actually been using it for quite some time in a node with a custom view. Since the view is a `UIScrollView` subclass, and thus doesn't inherit from `_ASDisplayView`, I needed to forward some view methods to its node.
",joostvandijk,appleguy
1379,2016-03-17 08:33:57,"@appleguy One use case is this - http://stackoverflow.com/a/3550157/362305

Basically, I want a `UIScrollView` to behave just like it does with a regular `UIButton` inside a table view cell. When you touch down on the button and start moving the finger around, the button is tracking the touches, but the scroll view doesn't scroll during this tracking.

Judging from the linked SO answer (and verified in practice), `UIScrollView` distinguishes between `UIControl`s and other `UIView`s when handling such situations. To replicate this behavior, a way to get a node, if any, from an arbitrary view  is necessary, and, in my opinion, `ASViewToDisplayNode()` does the job perfectly.

P.S. Thanks for AsyncDisplayKit, awesome stuff.
",supersv,appleguy
1378,2016-03-16 18:27:13,"@hannahmbanana Thanks!  Slightly embarassing, I think I added the 2D version recently which is /way/ faster, but then clearly missed a key use case.

It is nice to eliminate the block overhead in the multi dimensional version, although I think after this change we do not use it anywhere? That is fine for now, we can leave it in place for future usage or elimination if it goes unused for long enough.
",appleguy,hannahmbanana
1376,2016-03-14 10:24:49,"already tested it, it dosen't work @yury 
",MarvinNazari,yury
1376,2016-03-17 07:22:11,"@MarvinNazari I noticed #1295 could be a related issue and there appears to have been a recent fix for it. Are you on the master branch? Have you tried setting truncationAttributedString as a work around? 
",hannahmbanana,MarvinNazari
1376,2016-03-19 06:57:50,"@MarvinNazari make sure you are setting properties on the text node itself, not on any containing inset or other layout specification. Please reopen this task if you have not been able to Address the problem! 

As you would imagine, this is meant to be simple and reliable, but we are working on documentation right now. In fact, documentation is the primary reason the framework has not gone to version number 2.0, but expect a three-part tutorial series on Ray Wenderlich.com in the next month. It will also cover layout specifications in detail.

https://github.com/facebook/AsyncDisplayKit/issues/1396
",appleguy,MarvinNazari
1372,2016-03-15 18:59:25,"Thanks for the stack trace, @hannahmbanana. I actually have rewriting the calculation of the contentOffset on my list this week. The new approach should fix this issue.
",levi,hannahmbanana
1372,2016-03-19 06:59:28,"@levi let me know if I can help with this. Although the 1.9.7 tag has already been cut and updated a few times, I still have not announced it, but would love to do so soon. If we are fairly confident that this issue would not affect most applications, I am happy to send out the post later this weekend. Otherwise is fine to wait for next week to investigate.
",appleguy,levi
1372,2016-03-24 02:08:31,"@cc-lam thank you for reporting this, and thanks @hannahmbanana for investigating!  @levi delivered the goods with the fix, and it would be great if folks could retest.  Please reopen or file a new task if you see any other issues.

https://github.com/facebook/AsyncDisplayKit/pull/1418
",appleguy,hannahmbanana
1372,2016-03-24 02:08:31,"@cc-lam thank you for reporting this, and thanks @hannahmbanana for investigating!  @levi delivered the goods with the fix, and it would be great if folks could retest.  Please reopen or file a new task if you see any other issues.

https://github.com/facebook/AsyncDisplayKit/pull/1418
",appleguy,levi
1371,2016-03-12 05:41:00,"@nguyenhuy, I'm blown away by this patch. You did a really great job in opening up the functionality to concurrency. Looking forward to seeing the perf benefits!
",levi,nguyenhuy
1371,2016-03-12 06:23:12,"@levi Thank you! 
",nguyenhuy,levi
1368,2016-04-29 21:01:10,"@hannahmbanana not yet, I put it aside for a bit when my efforts failed. If you could figure it out that would be amazing.
",wpK,hannahmbanana
1368,2016-04-30 00:02:39,"@wpK I think your layout is totally fine. It's just the text node laying (we use internally Core Text) out your text this way as you have a sample text with very long words and wrapping it the right way is kind of complicated and so 

Just set your sample text to something different and I think you will have the right representation (look into the gist, you can also add some more character and you will see it)

Furthermore you don't need to wrap the layout in a static layout spec too :)

Here is a new gist: https://gist.github.com/maicki/f7e53bc4c93651c73b7faeb3f3d7afb5

Let me know if we understand it right what you wanna have. Maybe a more extended sample project would help that show's in what problems you are run into.

cc @appleguy @hannahmbanana 
",maicki,hannahmbanana
1368,2016-05-02 17:13:36,"@maicki The static layout was my mistake from trying other layouts types before posting. Thanks for pointing that out.

I could work on creating a better example. A perfect example is the Pinterest chat bubbles. Do you think it would be possible to get the same behavior with AsyncDisplayKit using the ASLayoutSpec?

When the text node is initially offered an infinite width by the hstack, it returns back a size too large for hstack, so hstack then passes a new size to the text node, in which the the text node returns back a new size that fits within the hstack. The issue is, because the hstack already has it's width set, it ends up being bigger.

I'm not 100% sure that there is any simple solution using ASLayoutSpec. If the layout system did what I want, then the hstack would then see it needs to get smaller, and then the parent will have more room which would require another layout, which in return could cause more layouts potentially causing an infinite loop.

Thanks again everybody for your help. I haven't had time to work with it again but with all the activity here I think I'll give it another go.
",wpK,maicki
1364,2016-03-12 06:30:05,"@levi thanks!  I will take this one - though ironically it exposes a flaw, which is that I have normally named statics and class methods with __ as well, along with the things that I want to avoid collisions with reasonably-named internal versions (e.g. people who might have a _layout so they can call it manually in an animation).  There is no meaningful collision risk here and we should start getting towards an actual, written-down code style (fortunately most of the style is adhered to in 90%+ the codebase, but DEFINITELY not underscore usage where there are some trends but many inconsistencies)
",appleguy,levi
1362,2016-04-07 07:11:56,"@tomizimobile - this is a great find and I think your analysis is correct. Do you have any current ideas on how we might fix this? I believe it is probably affecting a few other areas as the function you mentioned is used elsewhere. 

Note that there is very large memory cost to making even a single color image full-size rather than stretchable, so you might consider using -placeholderImage (you have to subclass a node and override this method to return the placeholderImage). This uses a separate placeholder layer and does wait for the image to load from the network. You probably want this behavior anyways as it will decode synchronously as defaultImage is asynchronous. 

The main benefit of defaultImage is that it will remain visible even if no URL is set or if the image load fails. This is not the intended use of the placeholder, which will only exist during loading or decoding. But it should not be difficult to catch this case and show a default profile picture or whatever. 
",appleguy,tomizimobile
1362,2016-04-07 13:43:15,"@appleguy The only idea to fix this that I have right now is what I mentioned above - to use another variable in `ASImageNode` to track changes in `contentMode`, and apply it in `setImage:`. I'm not sure what other things that might affect though, or what the performance impact would be - I'm sure there's optimizations to be made there. Unfortunately I don't have enough time to try out any fixes at the moment.

I was using a small, single color image along with the `contentMode` to stretch it rather than using a full-size image, although I'm not sure of the memory cost of that vs. stretchable images. I decided to use `defaultImage` so I wouldn't have to worry about what happens when the image load fails, but I definitely see the advantage now to using `placeholderImage` and handling the error case separately - thanks for the tip. 
",tomizimobile,appleguy
1362,2016-06-26 19:23:39,"@tomizimobile: would you be willing to post a PR with your suggested fix?
",appleguy,tomizimobile
1361,2016-04-01 09:37:59,"@hannahmbanana Thanks for the suggestion, but there is no visible change if I tweak `clipsToBounds` or `backgroundColor`.

Will it help if I send you the code to reproduce the issue?
",gonzalezreal,hannahmbanana
1361,2016-04-04 10:59:39,"@hannahmbanana You can find the sample code [here](https://www.dropbox.com/s/icrikxl6suykx4k/GroupConversation.zip?dl=0)

Please let me know if there is anything else I can do to help. Thanks!
",gonzalezreal,hannahmbanana
1361,2016-11-15 12:26:35,"@hannahmbanana - I am not sure if it is the same problem but I created a sample project with some artifacts while rotating. You can find a github repo here: https://github.com/lsnpatryks/adk-artifact - in order to recreate this bug you must select a row and then rotate the device / simulator. I am also able to recreate this while having ASTableView selection disabled - but in a much more complex example (so there is a chance that there is broken within my code). Hope this will be helpful.

screenshots:
![screenshot1](https://cloud.githubusercontent.com/assets/5601741/20305455/02e4d588-ab36-11e6-89a5-5444d73cdeb6.png)
![screenshot2](https://cloud.githubusercontent.com/assets/5601741/20305463/0b77676a-ab36-11e6-990d-ca31e3ab1783.png)
",lsnpatryks,hannahmbanana
1361,2016-11-15 16:00:11,"@hannahmbanana - ok, I added one additional commit https://github.com/lsnpatryks/adk-artifact/commit/42b7f33104aa5e954819957515ab9a800ef2d7f0 - now you do not need to select a cell to see that bug (so basically making `flexShrink = true` causes the problem - otherwise the label is not line-wrapping and there is no error).
",lsnpatryks,hannahmbanana
1360,2016-03-17 13:54:19,"Thanks @appleguy ! Everything works great now.
",yichungwang,appleguy
1358,2016-03-12 06:44:09,"@ejensen I particularly appreciate this one; thank you. The test that is far less reliable is related to asynchronous transactions, which has never once failed for an engineer locally, but fails on the build server around a quarter of the time which is pretty awful.

It only started happening after the excellent changes from @knopp, but he also added a lot of tests and his change was tremendously impactful / very stable from the beginning, so I'm pretty confident it is either a Travis or test structure change.  If you are looking around in that area, definitely let me know if the problem is apparent to you even if you're not able to fix.

Seriously, don't hesitate to email me any time, asyncdisplaykit@gmail.com .  I am super happy to have these unexpected surprise diffs land in our PR queue!!  If you are doing a project with the framework I'd be happy to help advise on architecture or approach (or issues you encounter), or if you are interested in taking on a bigger change, there are a ton of impactful directions.
",appleguy,ejensen
1354,2016-03-17 08:06:27,"@ejensen Well done, fine sir!
",appleguy,ejensen
1353,2016-03-12 05:22:21,"@ejensen thanks a lot for this! Sorry I didn't merge it sooner, and some conflicts have developed. Once those are fixed and it is possible to hit the merge button, I will get this landed more promptly.
",appleguy,ejensen
1351,2016-03-10 21:44:14,"@ejensen lol! I kind of like it the way I had it ;)
",lappp9,ejensen
1350,2016-06-17 04:07:33,"@tomizimobile: this is a bit complicated to understand in paragraph form. :)

Would it be possible to get a sample app (command + D on the project folder and strip out anything unnecessary)?
",hannahmbanana,tomizimobile
1350,2016-06-17 12:38:29,"@hannahmbanana I made a test project to show this off, and found that the issue is fixed in master. Turns out by commit 12d757a38d09efc62fd26ad706b8eeca96f1e3dd, it's working as expected, I think likely due to changes in https://github.com/facebook/AsyncDisplayKit/pull/1637
",tomizimobile,hannahmbanana
1350,2016-06-17 16:01:54,"@tomizimobile: thanks for the quick reply and for checking it out on master. This is the best sort of update! If it's not too much work, would you mind sending me the sample project so that we can add it to our testing? Thanks!
",hannahmbanana,tomizimobile
1350,2016-08-15 12:40:00,"@hannahmbanana I realized when getting another test project together that I still owed you this one - sorry for the delay

[asdk-issue-1350.zip](https://github.com/facebook/AsyncDisplayKit/files/418035/asdk-issue-1350.zip)
",tomizimobile,hannahmbanana
1347,2016-03-10 08:19:44,"Thanks @appleguy good point, look cleaner that way.
",aaronschubert0,appleguy
1346,2016-03-10 00:53:16,"@tomizimobile thanks, this is an important feature / subtlety that was not handled in the original!
",appleguy,tomizimobile
1345,2017-02-09 19:17:27,"I believe this has been fixed, @eanagel can you confirm and reply if not?",garrettmoon,eanagel
1344,2016-03-09 02:08:16,"LGTM. Thanks for fixing this, @eanagel!
",nguyenhuy,eanagel
1344,2016-03-09 02:09:56,"@eanagel Great find. The indentation is not quite right here, but I am definitely merging this :)
",appleguy,eanagel
1344,2016-03-09 15:51:55,"Interesting @tomizimobile, I actually made this change to solve a possibly related problem. In my case I have an ASCollectionNode in a ASTableView cell. The ASCollectionNode cells were being created before the first time layoutSubviews was called which was leaving _maxSizeForNodesConstrainedSize uninitialized, so it was attempting to create the cells with (0,0) constrainedSize and this ultimately caused UICollectionView to hang when loading the invalid cells.

This behavior started for me recently and this commit was my fix. Can you confirm that this specific commit is causing the issue and not another one in the last week or so (ie can you comment out the inserted lines and see if things start working for you?)
",eanagel,tomizimobile
1344,2016-03-09 15:54:34,"@eanagel It's definitely this commit causing the issues - I ran against this commit in master vs. the previous commit in master.
",tomizimobile,eanagel
1344,2016-03-09 17:26:28,"Ok, @tomizimobile  I have a less intrusive change that fixes the issue I'm seeing. Before I PR it, would you mind seeing if things work for you with the following change?

Simply replace the following lines in ASCollectionView.mm @ about line 783



With the following line:


",eanagel,tomizimobile
1344,2016-03-09 18:46:18,"@eanagel I just tested it, and it seems to clear up the issues. Thanks!
",tomizimobile,eanagel
1340,2016-03-08 05:23:27,"@ejensen this is very nice of you, thanks!  Would love to merge, just making sure the indentations aren't errors.
",appleguy,ejensen
1340,2016-03-08 11:06:05,"@ejensen I presume you found these through the latest Xcode 7.3 beta? There's also ""errors"" for depreciated methods that aren't addressed in this PR. Would be great to fix all in one shot.
",aaronschubert0,ejensen
1340,2016-03-09 10:52:33,"@ejensen I love this kind of diff. Thanks a lot for caring about this stuff!

Feel free to submit a change anytime, even if for a minor or single-line issue. I would also love to hear from you by email if you have or have questions or feedback about the framework.  (asyncdisplaykit@gmail.com)
",appleguy,ejensen
1339,2016-11-15 05:06:33,"@hannahmbanana Would be great to have a sample project to reproduce the issue. cc @tomizimobile 
",maicki,tomizimobile
1339,2016-11-15 05:06:33,"@hannahmbanana Would be great to have a sample project to reproduce the issue. cc @tomizimobile 
",maicki,hannahmbanana
1338,2016-03-09 10:16:42,"@tomizimobile thanks, this looks great!  I swear I thought we had fixed something in here for 3D touch - maybe it was a more serious issue, but didn't quite fully address it.  Glad to have this detail handled.
",appleguy,tomizimobile
1336,2016-03-09 10:14:30,"@hannahmbanana Thanks a lot for this!  It proved tremendously useful for finding oversized images in Pinterest a couple weeks ago when you sent me a hacked-up version.  It's great to see it cleaned up and nicely integrated for everyone to use, along with supporting a runtime switch so it could be enabled with a developer menu.
",appleguy,hannahmbanana
1335,2016-05-11 07:50:04,"@MarvinNazari: @fatuhoku: check out our new work-in-progress documentation:

http://asyncdisplaykit.org/docs/automatic-layout-basics.html
http://asyncdisplaykit.org/docs/automatic-layout-containers.html
http://asyncdisplaykit.org/docs/automatic-layout-examples.html
http://asyncdisplaykit.org/docs/automatic-layout-debugging.html

Beta (soon to be on by default):
http://asyncdisplaykit.org/docs/implicit-hierarchy-mgmt.html
http://asyncdisplaykit.org/docs/layout-transition-api.html

Submit any questions, compliments, errors, complaints, etc on the #documentation channel in Slack (#1582).
",hannahmbanana,MarvinNazari
1334,2016-03-09 17:23:19,"@appleguy: Thanks for your help in resolving this issue.

Yes, it reproduces every time and I used ""bt all"" to generate the backtrace.

I attached a sample project to reproduce the bug:
[TextNodeBug.zip](https://github.com/facebook/AsyncDisplayKit/files/165693/TextNodeBug.zip)
",ChrisSchneider,appleguy
1334,2016-05-09 21:50:22,"@appleguy looks like this is resolved with #1527 
",levi,appleguy
1334,2016-05-17 12:26:12,"@appleguy: Thank you for your great work with AsyncDisplayKit! This fix solves our issue.
",ChrisSchneider,appleguy
1329,2016-03-06 00:38:43,"This is really cool - and very useful!  Thanks @hannahmbanana !
",appleguy,hannahmbanana
1329,2016-03-08 04:23:53,"@MarvinNazari It is available on ASButtonNode since the button is an ASControlNode. Make sure you remember to call the method to enable it ( +[ASControlNode setEnableHitTestDebug:YES]; ) at the application start up - before you initialize the the ASButtonNode you want the overlay for. Since it's already merged, please open an issue if it is not working correctly. I would really like to make sure it works for all use cases! :)
",hannahmbanana,MarvinNazari
1328,2016-03-05 22:55:47,"@levi I am also a bit concerned about this, but in detailed discussions with Luke, he reminded me that putting this behavior directly into the constrainedSizeForItem: method at the app level is very straightforward and more likely to result in predictable behavior.

This diff doesn't break the feature - I prior one removed it, this one just flags the fact that it will not work anymore.  I would love to have this feature if we could ensure that it properly only applies the inset to the cells that need it.
",appleguy,levi
1327,2016-03-06 00:34:50,"Great improvement!  @samhsiung should make sure the ASBatchContext is triggering even without scrolling in a scenario like this, though it is certainly good to ensure the user can force a load.

Ideally we would not re-access bounds, contentSize, contentInset properties here - but this is a micro-optimization and not essential.
",appleguy,samhsiung
1323,2016-03-04 22:28:16,"@gazreese this is really fantastic, thanks!  I would love to integrate this kind of functionality.  It may take me a bit to review this, but rest assured the community would be thrilled to have this capability in the master branch.
",appleguy,gazreese
1323,2016-03-07 14:47:42,"@gazreese Awesome, this will be very useful for us very soon.
",aaronschubert0,gazreese
1323,2016-03-28 07:16:39,"@gazreese finally circling back to this. I would like to get it in soon - and in fact we will probably use this in Pinterest :)

Could you replace your changes on the latest? Apologies for the uncharacteristic delay, this change came in at a very intense time for the framework and was just a bit larger than I have had an opportunity to review in detail.
",appleguy,gazreese
1323,2016-04-01 06:24:30,"@gazreese it looks like this is almost ready to merge. My main concern at this point is the breaking API change, so let me know your intention with this and whether it would be appropriate to continue to support a setter method for the asset even if the init methods remain.

It does seem possible to me that a user may want to create a video node and display a placeholder using a traditional image, potentially before enough information has learned from the network to actually create the video asset. This may be an edge case, but it is not clear to me that we should avoid supporting it in the API. That said, there are other positive aspects to change such as not requiring support for the various state updates that have to occur if the asset were to change. We should decide what the appropriate API functionality is based on the total set of reasonable use cases, and then worry about the implementation.

If you could also rebase this one more time, I will push too have it merged soon so that further re-bases are unlikely to be required.

Lastly, have you been using this regularly in your own application and found it to be reliable? With large changes of this nature, regression testing is always a primary concern, especially when there are not many Active clients who can immediately help test the new functionality. The video node has become relatively popular though, so my main concern is regression / alteration in its previous behaviors
",appleguy,gazreese
1323,2016-04-01 18:31:02,"@gazreese thanks for the super quick reply. It sounds like you're well aware, but just a heads-up, make sure you set the tuning parameters for any a table or collection views that you use to reduce the ""fetch data"" range if your application is particularly sensitive to Data consumption.

For the time being, let's keep the writable property and add a simple assertion if you can Think of the right spot to do this. I think the main reason is that unlike the underlying player item, which there is no use case to desire creating before something like a URL is available, there is the use case for a developer to create a video node potentially before they have a reference to the underlying video. This is a rare use case, and the most important concern at this point is that apps would need to change how they use video nodes to update the framework after this change otherwise.

Let me know if you have any further thoughts or questions, and no worries if you are not able to finish this work. Just leave a comment here to that effect if things get busy for you.
",appleguy,gazreese
1323,2016-04-04 06:47:59,"@appleguy Sounds good, and many thanks for the help. I'm hoping to get a day on it this week, so I'll keep you posted.
",gazreese,appleguy
1323,2016-04-07 13:16:31,"@appleguy I've merged with the master and should have all of your comments addressed now. If you could please take a look that would be really helpful.

Review comments are in-line here: https://github.com/facebook/AsyncDisplayKit/pull/1323/files/f7ff8b4173808166d82b6cc5517e5499355ddf29#r58163617

Cheers!
Gareth
",gazreese,appleguy
1323,2016-04-18 02:30:19,"@gazreese thanks for your work on this!  Will you have time in the next week to do some of the cleanups mentioned here?  There is a lot of active work going on in this file, at least four separate developers submitting changes, so it would be fantastic if you can join our slack room and coordinate live if you have a chance to embark on further improvements so that others can be aware and minimize conflicts.

Email asyncdisplaykit@gmail.com to get a slack invite :)
",appleguy,gazreese
1322,2016-03-04 22:54:05,"@levi A simpler solution (since ASViewController and UIViewController have different initializers) is just to do a `reloadData` call in `viewDidLoad` AFTER I register the supplementary views.  That seems to work fine for now.
",smyrgl,levi
1321,2016-04-01 07:34:57,"@gazreese - I'm excited to see this in the framework! It's great that this is already in a PR and that we are committed to integrating this functionality!
",appleguy,gazreese
1309,2016-03-03 18:28:41,"@appleguy I played around with this and it may be a CocoaPods configuration issue on my end but I'm not positive. I've created a simple project to illustrate the problem [here](https://github.com/martin-gearzero/asdk-1309).

Specifically, if I have a simple Podfile to include AsyncDisplayKit 1.9.7 then there is no issue. However, I have separate target definitions in my [Podfile](https://github.com/martin-gearzero/asdk-1309/blob/master/Podfile) because I only need a subset of pods in my sharing extension.

I'm afraid I'm not too familiar with the inner workings of CocoaPods so I'm not sure how to proceed at this point. Is this something which needs to be fixed with ASDK/PINCache or is it a limitation of CocoaPods? Or perhaps it simply a misconfiguration in my project?
",martin-gearzero,appleguy
1309,2016-03-03 19:03:08,"@garrettmoon thanks for the heads up. Happy to see it looks like the issue is resolved.

@chrisdanford thanks for the workaround in the meantime. That did the trick!
",martin-gearzero,garrettmoon
1309,2016-03-03 19:03:08,"@garrettmoon thanks for the heads up. Happy to see it looks like the issue is resolved.

@chrisdanford thanks for the workaround in the meantime. That did the trick!
",martin-gearzero,chrisdanford
1309,2016-03-07 17:25:13,"Brilliant! Thanks @garrettmoon 

Closing as this appears to be resolved.
",martin-gearzero,garrettmoon
1303,2016-03-02 01:12:07,"@maicki it would be great to support this in Multiplex too!  But we can wait and see if we do the other task to move the call itself.
",appleguy,maicki
1302,2016-03-02 00:54:32,"@nguyenhuy On the right track but I'm still getting a crash but a different one now.  It looks like the layoutAttributes of the supplementary node are trying to be requested from the layout before the collection view datasource has propagated their existence.

Here's the full backtrace:


",smyrgl,nguyenhuy
1298,2016-03-01 20:29:01,"@aaronschubert0 thanks for reporting, definitely a surprise to me.  The main point of introducing the node context was to fix the constrained size call point (In fact to move it to main, not just serial).  This should be fixed today.
",appleguy,aaronschubert0
1298,2016-03-01 21:50:07,"@aaronschubert0 Do you have a stack trace or anything I can use to narrow down the cause? The commit you pointed out is a follow-up and I want to make sure the first commit does what it is supposed to be.
",nguyenhuy,aaronschubert0
1298,2016-03-02 07:05:50,"@aaronschubert0 Definitely interested as well!  Keep testing latest master and let us know if you ever see this call off main - it should in fact not only be serial, but on main.
",appleguy,aaronschubert0
1298,2016-03-02 09:44:33,"@nguyenhuy Yeah the commit I pointed to is when change in behaviour occurred. The commit before this operates as expected. I'll get a stack trace for you. @appleguy Will test against master again and see what the results are.
",aaronschubert0,nguyenhuy
1298,2016-03-02 09:44:33,"@nguyenhuy Yeah the commit I pointed to is when change in behaviour occurred. The commit before this operates as expected. I'll get a stack trace for you. @appleguy Will test against master again and see what the results are.
",aaronschubert0,appleguy
1298,2016-03-02 09:55:48,"@nguyenhuy @appleguy Bizarrely seems to work against master now. Called on main and serially. It's a bit worrying that it wasn't working against master initially and now it is but I'm happy to close this with the assurance of your top class work. Will keep an eye on it but going to close this. Thanks for taking the time to investigate. 
",aaronschubert0,nguyenhuy
1298,2016-03-02 09:55:48,"@nguyenhuy @appleguy Bizarrely seems to work against master now. Called on main and serially. It's a bit worrying that it wasn't working against master initially and now it is but I'm happy to close this with the assurance of your top class work. Will keep an eye on it but going to close this. Thanks for taking the time to investigate. 
",aaronschubert0,appleguy
1298,2016-03-10 01:55:25,"@aaronschubert0 really appreciate you testing this! Sometimes Xcode defies all logic and holds a stale version of something during the build, hopefully that was it. I think it is now constructed in such a way that it should not be possible to be called off main. This is a very important issue and so I am quite glad it is resolved.
",appleguy,aaronschubert0
1296,2016-03-04 17:02:16,"@levi The problem we stumbled on with this is actually not related to the fix @nguyenhuy made.  I'm opening another ticket with a sample project.
",smyrgl,levi
1296,2016-03-04 17:02:16,"@levi The problem we stumbled on with this is actually not related to the fix @nguyenhuy made.  I'm opening another ticket with a sample project.
",smyrgl,nguyenhuy
1296,2016-03-04 18:46:01,"@smyrgl: Check out latest master. Yesterday @levi and @appleguy worked on a change (#1320) that probably fixes your problem.
",nguyenhuy,levi
1296,2016-03-04 18:46:01,"@smyrgl: Check out latest master. Yesterday @levi and @appleguy worked on a change (#1320) that probably fixes your problem.
",nguyenhuy,appleguy
1295,2016-03-01 07:02:35,"@yxztj thank you for reporting this. In your example, why is the font size different between the label and the node?
",appleguy,yxztj
1295,2016-03-02 01:58:34,"@appleguy Thanks for the quick reply.
I was trying to repro the issue using fewer lines, so I didn't set any font attributes for the label and text node. Guess it's the default behavior?
",yxztj,appleguy
1295,2016-03-02 07:09:25,"@yxztj have you tried setting a truncationAttributedString on the ASTextNode?  I would expect it to use ... by default, but would be interested to know if even that is insufficient.  I suspect this is caused only by truncations triggered by maximum line cap, rather than a size constraint.

Since we are in the final 2 week push for the Pinterest app rewrite, and then have stabilization work after that, it'll be tough for me to test around with this for a while.  If you have the time, the other thing to try is removing the numberOfLines max - and just provide a constrained height that is short enough to cause it.  Then, the ... will probably occur automatically?
",appleguy,yxztj
1295,2016-03-02 08:14:52,"@appleguy Setting the truncationAttributedString would resolve the issue. Didn't try that because it's value should be default to ""..."" as the comment says? :) 
Since we have a workaround, I think it's low priority now.
",yxztj,appleguy
1295,2016-03-09 15:14:16,"@yxztj If you can try out my PR #1347 to see if this fixes this issue also, that'd be great.
",aaronschubert0,yxztj
1295,2016-03-17 07:16:05,"@yxztj - were you able to try out master? I am sure the community would love to hear if the fix for this did not address your case, as well as close out your task if it is taken care of. Thanks for the detailed report! :)
",hannahmbanana,yxztj
1295,2016-03-17 07:51:33,"@aaronschubert0 @hannahmbanana Sorry for the delayed response.
It seems getting worse after the PR. Now the truncation string doesn't show up no matter truncationAttributedString is set or not. :( If revert to 1.9.6 the truncationAttributedString would take effect.
",yxztj,aaronschubert0
1295,2016-03-17 07:51:33,"@aaronschubert0 @hannahmbanana Sorry for the delayed response.
It seems getting worse after the PR. Now the truncation string doesn't show up no matter truncationAttributedString is set or not. :( If revert to 1.9.6 the truncationAttributedString would take effect.
",yxztj,hannahmbanana
1295,2016-03-27 00:11:00,"@yxztj I have your test case running. It i does appear that there have been changes in behavior here, And that it may be an interaction between maximum number of lines and the case of a string ending with a newline.

I have ported your example to Objective-C, because some of the intermediate Versions of the framework had an issue where it would not build with swift. I'm going to check in this example so that other members of the community can assist in debugging this.

For one thing, you are creating and attributed string without a font or font size. This may result in a difference in default size, so it is always best to be explicit and specify a size.

Is the bug you were observing only caused by extra newlines after text, if those new lines have no visible characters on them? It is possible that these are being filtered out at some stage, and we can investigate why that is the case if true
",appleguy,yxztj
1295,2016-03-27 00:56:13,"@yxztj I have found to separate resolutions to the issue:
1. if you call measure: on the node before it is able to display, which is normally the case when a node is used in real real application as part of a layout spec or a correct implementation of the 1.x calculateSize...: method, AND provide a constrainedSize that matches the number of lines that it is expected to display, it will truncate properly even if the frame provided is larger. That is to say, it looks like if measure is not called or is called with a value greater than the equivalent number of max lines, it the layout calculation triggered at display-time may be using the taller value of the frame and not trigger creation of the truncation string until a later stage applies the maximum number of lines -- which may be too late
2. if you reduce the height of the frame by half, then even without the measure call, truncation is shown correctly.

So the bug appears to be specific to 1) using a maximum number of lines and that being the reason that a string truncates rather than the available height, 2) not calling measure or calling measure with a size that is greater than the true desired maximum height by exceeding the height of the maximum number of lines, and 3) also providing a frame that is taller than the maximum number of lines.

The good news is that it is undesirable to create this situation in a real application, because it results in a larger Display backing store which uses more memory and create additional compositing cost. This is equally true for UILabel - Apps should always minimize the size of their views.

Although this is a fairly extreme edge case, it is definitely a bug and deserves to be fixed. However, I hope you're able to employ one of these workarounds and continue using the latest version of the framework, because the degree of improvement in the overall framework achieved since the last version quite remarkable… I believe there are over 700 commits, and incredible performance improvements from the new ASRunloopQueue.

Thanks again for helping Report and communicate the details of this issue. I really appreciate it, as it would have been hard to discover otherwise, and it definitely does contribute to the community building one of the most advanced text engines on the platform.
",appleguy,yxztj
1295,2016-03-27 01:24:35,"@yxztj despite the relatively low priority, this one was bothering me, and so I investigated further and came up with what I am confident is the correct fix.

https://github.com/facebook/AsyncDisplayKit/pull/1440

Please try it out, and definitely continue to report any issues of this nature. Even if an extreme edge case, I really do want to make sure that every scenario works. I would highly recommend however that you start using ASViewController with a containing node, or a table / Collection with ASCellNodes.  You can either use the layout spec that fits method, or calculate size that fits, but this framework does expect that Measure is called on nodes before they are displayed.

If you use layout specs, Measure is called completely automatically. If you use calculate size that fits, the API contract is that you called measure on each of your subnodes, because providing the argument a constrained size is something that the framework is not able to do unless it has information about the desired layout.
",appleguy,yxztj
1295,2016-03-28 01:55:10,"@appleguy Thanks for the detailed investigation! I just tried the latest master branch and the issue is gone.
Yes definitely would report any issue we encountered after narrowing down as much as we can. We'd be happy to contribute, but due to complexity of the framework, we haven't been able to read the code through and dig deep of what's behind the scene, so sometimes we could just create a demo for repro issues without getting closer to root cause. 

There are some tutorials about how to use ASDK(and basic principles of how ""async"" is playing its role here), but not much how it works step by step. Hope we can get more articles/documents to help understand the framework. :)
",yxztj,appleguy
1294,2016-03-01 06:31:27,"@vivqu this really is a great catch.  Thank you - seriously - for diving into the framework to debug, fix, and submit your first PR to this project.  I appreciate it!
",appleguy,vivqu
1289,2016-02-29 22:36:15,"@davidlawson this is very, very strange — thank you for reporting it and providing the code!  I will try to investigate this soon.  The biggest problem in the text stack right now is a set of problems similar to this related specifically to the center alignment.  What exactly is the change to set to non-layer-backed — your code doesn't set it to layer-backed, do you mean setting the internal astextnode in the button which defaults to layer-backed?
",appleguy,davidlawson
1289,2016-02-29 23:19:53,"@appleguy Yeah sorry, I was setting the titleNode to non-layer-backed:

`buttonNode.titleNode.layerBacked = false;`
",davidlawson,appleguy
1289,2016-03-01 20:32:56,"@davidlawson several changes have been made and that may have fixed this. Could you please try the latest master, and report back here with the results? If you don't have an opportunity to check, then no worries, I will circle back when I have time. Feel free to close the task if it is working correctly. The fix is speculative, in that it was not designed specifically for this issue, but does fix other issues related to centered text.
",appleguy,davidlawson
1289,2016-03-01 22:18:04,"@appleguy that seems to have done the trick! :)

The particular commit that fixed this issue was https://github.com/facebook/AsyncDisplayKit/commit/b6abb347e322d6acd001dd8770e9a8f4a0220887 (#1299).
",davidlawson,appleguy
1288,2016-02-29 17:36:07,"@nguyenhuy Thanks for this! Reifying these objects will make it a lot easier to reason about the node-loading process.
",Adlai-Holler,nguyenhuy
1288,2016-02-29 17:37:39,"@Adlai-Holler Glad you like it!
",nguyenhuy,Adlai-Holler
1287,2016-02-29 17:06:46,"Wow! This is incredible @appleguy – the new function is just the right tool for the job :zap: 
",Adlai-Holler,appleguy
1286,2016-02-29 09:47:54,"@appleguy Awesome!! This fixes the issue that I was witnessing over the weekend. Glad you managed to get to the bottom of this so quickly, appreciate the quick turnaround. That's me all good for 1.9.7.
",aaronschubert0,appleguy
1286,2016-02-29 10:08:25,"@nguyenhuy Will give it a shot!
",aaronschubert0,nguyenhuy
1286,2016-02-29 10:22:52,"@nguyenhuy Still solid against master!
",aaronschubert0,nguyenhuy
1286,2016-02-29 15:36:55,"Awesome. Thanks, @aaronschubert0!
",nguyenhuy,aaronschubert0
1285,2016-02-29 18:28:13,"@appleguy Actually I had never used this hook in this context before but I doubt very much this is a regression.  This just came up as part of the validation you asked for on 1.9.7.

I tend to agree that this is not a blocker at all but it's probably a very good thing to resolve since visibility hooks on nodes are incredibly useful in table/collection views.  
",smyrgl,appleguy
1284,2016-02-29 07:31:41,"@rcancro have you encountered any issues like this in your work, or do you have a test harness that could help isolate where in the stack it's occurring?

@nvh thanks a lot, I'm looking forward to getting the text stuff dialed in for good as soon as we can.  There are now a couple full time folks working on ASDK, and though this will not be their top priority for a few weeks, a fix should be possible before the end of March.
",appleguy,nvh
1284,2016-02-29 08:24:15,"@appleguy Thanks! Was hoping to get this fixed earlier, because we're shipping next week, but understand that the team has other priorities.
",nvh,appleguy
1284,2016-02-29 16:29:28,"I was seeing similar behavior before I took the word kerner out of ASTextNode. @nvh are you up to date with master? If not can you update and give it a try?
",rcancro,nvh
1284,2016-02-29 21:55:09,"@rcancro This is build against 3671f5cbc5d5a0265a03389c2d88e04ac5c275d5, so up to date with master as of yesterday
",nvh,rcancro
1284,2016-03-01 20:33:55,"@nvh a key change has been made and that may have fixed this (@rcancro's one line diff). Could you please try the latest master, and report back here with the results? If you don't have an opportunity to check, then no worries, I will circle back when I have time. Feel free to close the task if it is working correctly. The fix is speculative, in that it was not designed specifically for this issue, but does fix other issues related to attribute-customized text.
",appleguy,nvh
1284,2016-03-01 20:33:55,"@nvh a key change has been made and that may have fixed this (@rcancro's one line diff). Could you please try the latest master, and report back here with the results? If you don't have an opportunity to check, then no worries, I will circle back when I have time. Feel free to close the task if it is working correctly. The fix is speculative, in that it was not designed specifically for this issue, but does fix other issues related to attribute-customized text.
",appleguy,rcancro
1284,2016-03-01 23:13:47,"@appleguy unfortunately the speculative doesn't fix the problems in either the test project or the original case :disappointed:
What are the issues that are fixed by this commit? We're shipping tomorrow, and want to decide if t's worth it to ship with the latest master or err on the safe side and take the latest release.
",nvh,appleguy
1284,2016-04-19 10:22:43,"Hi @appleguy is there any news on this issue? (@nvh handed over responsibility for our app to me)
",tacovollmer,nvh
1284,2016-04-19 10:22:43,"Hi @appleguy is there any news on this issue? (@nvh handed over responsibility for our app to me)
",tacovollmer,appleguy
1284,2016-10-18 15:00:43,"This issue is still present in `1.9.90` @appleguy
",tacovollmer,appleguy
1281,2016-02-26 23:34:28,"@ejensen Thank you for also updating the tests!!
",appleguy,ejensen
1280,2016-02-26 03:21:43,"@davidlawson thanks, I am not sure why our build test has not been catching these things? Certainly looking forward to this one land, and hopeful that it will start catching these things in the way that the original ""life without cocoapods"" was supposed to.

Perhaps this only affected the framework and not Carthage...

https://github.com/facebook/AsyncDisplayKit/pull/1262
",appleguy,davidlawson
1278,2016-02-28 06:38:03,"@appleguy 

I'm using `1.9.7`. 

I've created a simple test project that demonstrates the same crash:
[ADKTest.zip](https://github.com/facebook/AsyncDisplayKit/files/149763/ADKTest.zip)

Removing items from the `collectionView` works fine, but as soon as I add more items than the initial count, it crashes with the same message.

Thanks for the quick response
",bsmith11,appleguy
1276,2016-02-26 03:17:40,"@maicki this diff looks good to me!  Requires a rebase after your last change.
",appleguy,maicki
1276,2016-02-26 14:33:39,"@appleguy Rebase done
",maicki,appleguy
1273,2016-02-25 22:54:24,"@aaronschubert0 very cool! I will take a look here in the next few days.
",appleguy,aaronschubert0
1273,2016-03-02 09:58:26,"@garrettmoon Awesome, will track that.
",aaronschubert0,garrettmoon
1273,2016-04-18 02:46:42,"@aaronschubert0 with the release done, I finally had a chance to review this. I apologize for the delay, as it caught me at the beginning of the longest crunch in some time.

This is very very cool and I am excited to land it soon. There're conflicts that need to be fixed, and I would really appreciate it if you could create some files that are dedicated to tvOS to hide some of the additional complexity added here — mainly because the simplicity and compactness of these key components is important for their readability and ensuring they can be easily reviewed for bugs.

I understand if you won't have time for this soon, but if you do, I am committed to providing a review within a few day turnaround to minimize any further conflicts that come up.
",appleguy,aaronschubert0
1273,2016-04-18 07:45:00,"@appleguy Thanks for the thorough review and for that commitment. Will take a look at this at my first chance.
",aaronschubert0,appleguy
1270,2016-02-25 00:59:40,"@Adlai-Holler as of today they are never called off main, but I think we should make that API change for 2.0.  cc @maicki, would you be interested in looking at a couple structural upgrades to the range controller that would allow us to reduce main thread overhead (quite significantly, actually) by calling the display / fetchData methods off of main?
",appleguy,Adlai-Holler
1270,2016-02-25 09:22:25,"@Adlai-Holler Great catch, thanks!
",aaronschubert0,Adlai-Holler
1268,2016-02-24 21:29:29,"@eanagel ouch, thanks for quickly finding this recent regression! You saved it from going out in 1.9.7 in the next day or two...
",appleguy,eanagel
1267,2016-02-24 21:31:24,"@eanagel thanks a lot!  This is far more critical now and that layout specifications are used; earlier versions of the framework really did not depend on this. That further increases the importance of adding it now, because developers adopting layout specifications may have existing code that had forgotten this call.
",appleguy,eanagel
1265,2016-02-24 05:13:14,"@rcancro thanks for the great description. Can you share why the second run through the size adjuster would be required after this? I don't yet have a great understanding of the code, at least not enough to see why that is the case right away.
",appleguy,rcancro
1265,2016-02-24 15:52:59,"@appleguy What appeared to be happening to me was that ASTextNode would create a renderer to compute the text size. In the process the renderer would also determine our scale factor. Upon completion, I would save this scale factor away in ASTextNode.  ASTextNode then invalidated (dealloc'ed) the renderer. 

After this `setAttributedString` on ASTextNode was being called, in which I would clear out the saved scale factor. ASTextNode would then create a new renderer with the current scale factor (which was just cleared) to actually draw the text. This renderer was never used to calculate size, so it never updated the scale factor it was created with. By putting the scale computation in both places I ensured that this didn't happen.

TBH, the behavior seems strange to me. Let me describe the situation where I'm seeing this. I have a button that changes text when selected. After I change the `attributedString` on the ASTextNode I never see a text renderer with the new string in `_calculateSize` or `size`. The renderer does have the new string in `drawInContext:bounds:`.
",rcancro,appleguy
1264,2016-02-24 06:05:19,"@nguyenhuy thanks for jumping on this! @eanagel give it a try, post further questions any time - feel free to close this one out if it works for you.  @RCacheaux, @lappp9 can you make sure the static spec is covered briefly in your tutorial?
",appleguy,nguyenhuy
1264,2016-02-24 06:05:19,"@nguyenhuy thanks for jumping on this! @eanagel give it a try, post further questions any time - feel free to close this one out if it works for you.  @RCacheaux, @lappp9 can you make sure the static spec is covered briefly in your tutorial?
",appleguy,eanagel
1264,2016-02-24 07:52:09,"Hmm @nguyenhuy I dropped in your example which makes sense to me but I'm hitting an Assert. A stack trace is below. Looks like when we pass a relative size for `.sizeRange.min' we ultimately end up making the min relative to the constrainedSize, which may likely be +Inf. This might be a bug, however I found passing a minimum of zero worked fine for my needs. Here's the version that ended up working for me:



Stack Trace from **original version**:


",eanagel,nguyenhuy
1264,2016-02-24 18:25:54,"@nguyenhuy Seems like it should be, but I don't have a deep enough understanding of ASLayout to make that call. Who can make a definitive ""it's a bug or a feature"" call? @appleguy?
",eanagel,nguyenhuy
1264,2016-02-24 18:25:54,"@nguyenhuy Seems like it should be, but I don't have a deep enough understanding of ASLayout to make that call. Who can make a definitive ""it's a bug or a feature"" call? @appleguy?
",eanagel,appleguy
1263,2016-02-23 20:27:44,"@levi to me it seems important that a) going from zero bounds to regular bounds, which is common, never animates; b ) that the user might need the ability to disable this, and indeed we probably don't want this with for example split screen changes.  Thoughts?
",appleguy,levi
1263,2016-02-23 20:37:44,"@appleguy the `animated:YES` flag here is a bit of a red herring. Enabling it doesn't inherently animate the relayout, but prevents ASDK from performing the mass frame calculation of each cell in the data source in the `ASPerformWithoutAnimation` block—which is a bug. When rotating the device or even resizing the app size in split view multitasking, this relayout will be performed within a system animation block and ASDK is currently preventing the cells from animating their layout in that CATransaction.
",levi,appleguy
1262,2016-02-26 03:19:45,"@ekurutepe Yes that would sound correct, we certainly do that for cocoapods and it seems like by far the best approach - can you make that change?  I'm not sure the right format for the cartfile.
",appleguy,ekurutepe
1262,2016-02-26 15:23:01,"Hmmm, Cartfiles support using local repositories with 



Do you know how to get the absolute path inside travis @appleguy @nguyenhuy?
",ekurutepe,nguyenhuy
1262,2016-02-26 15:23:01,"Hmmm, Cartfiles support using local repositories with 



Do you know how to get the absolute path inside travis @appleguy @nguyenhuy?
",ekurutepe,appleguy
1262,2016-03-15 06:51:38,"@ekurutepe @erichoracek - hey guys, sorry I am just not going to have a chance to look into this for at least a few weeks. We are just a matter of about 3 weeks from the largest application launch in Pinterest history, and so I have to focus on that before Learning more about Carthage.

If either of you are able to fix this, I would be really thrilled to merge the change. I am very interested in ensuring support for Carthage is both fully integrated and reliable, and can also commit to providing binary builds of future releases, but only if tooling like this can be put in place by the community. Thanks a lot for any help you can provide!
",appleguy,ekurutepe
1262,2016-03-17 18:27:17,"Great milestone! Thank you @ekurutepe :+1: :dancer: :dancers:
",nguyenhuy,ekurutepe
1262,2016-03-18 14:27:52,"@nguyenhuy @appleguy do you think this one is ready to merge?
",ekurutepe,nguyenhuy
1262,2016-03-18 14:27:52,"@nguyenhuy @appleguy do you think this one is ready to merge?
",ekurutepe,appleguy
1262,2016-03-20 02:10:29,"@ekurutepe what a fantastic surprise for this weekend!  This is IN!
",appleguy,ekurutepe
1261,2016-02-23 06:15:54,"@garrettmoon thanks for the very quick turnaround!!
",appleguy,garrettmoon
1260,2016-02-29 07:13:55,"@Adlai-Holler thanks for reporting this. Ironically, before I read this issue, I just recently discovered that we were calling this method off of the main thread. I think this is a much more important issue than just the pager implementation, because we are passing an index Path here and so there is a data model consistency issue just as there would be if we requested actual nodes in this way.

I think it is rare in practice for developers to have an implementation of this method where this is a critical problem, but for those who do, it could result in a pretty serious issue.  @nguyenhuy is currently working on a fix, but we will see if it gets into the next release. I have a pull request up that Restore is the behavior of previous versions of the framework, but it does not fix this particular issue.

I agree with you that we can change the minimum value to be the same as the maximum so that the page size is by default guaranteed to match the bound size.
",appleguy,Adlai-Holler
1260,2016-02-29 09:26:37,"Here is the landed fix: #1288. @Adlai-Holler Please help to test it. Thanks!
",nguyenhuy,Adlai-Holler
1257,2016-02-23 03:40:06,"@Adlai-Holler I like the indent - looks great overall!
",appleguy,Adlai-Holler
1256,2016-02-23 04:41:56,"@Adlai-Holler awesome set of improvements! There are a very small number of suggested follow-ups here, but I am impressed to say that our work is essentially done here.
",appleguy,Adlai-Holler
1256,2016-02-23 17:36:31,"@Adlai-Holler Awesome work on this. Thread affinity is a real pain and thanks to you, it's gone! :dancer: :dancers: :100:
",nguyenhuy,Adlai-Holler
1255,2016-02-21 01:57:01,"@garrettmoon what is the context here? Is this a change from previous versions, in which case it could break existing apps? Or does it revert an accidental change that was made recently?
",appleguy,garrettmoon
1251,2016-02-23 02:32:11,"@ekurutepe thank you for providing this additional context. We definitely intend to support Carthage, but the most active maintainers of the framework are not users of it, so we have not yet been as consistent as I would like at cleanly supporting it. Thank you for investigating this and submitting the change.

Now that I understand that, I'm happy to merge this. It would certainly be good to investigate any changes that are necessary to allow the bill to succeed without including any _-prefixed classes in the umbrella header. However, I understand that this Will not help you accomplish your implementation goals in any direct way, so no worries if you don't get around to this or find that only some can be easily eliminated while others require a deeper change that should be attempted later.
",appleguy,ekurutepe
1251,2016-02-23 02:39:40,"@ekurutepe we are supposed to have a project in examples/ that uses Carthage, and all projects in that directory are built as part of the test, but it seems like it has not actually failed when there has been an issue. One of the most valuable changes you could submit would be an integration of the test project you created (rename it something like CarthageBuildTest) to ensure that this does not regress again.
",appleguy,ekurutepe
1246,2016-02-20 06:25:40,"This is a very exciting capability to have! Thank you, @Xinchi !  cc @Adlai-Holler
",appleguy,Xinchi
1246,2016-02-20 19:14:25,"Awesome, thank you @Xinchi! Gonna start using this immediately. 
",Adlai-Holler,Xinchi
1243,2016-03-15 22:20:41,"TL,DR: @appleguy The black background is the result of an unexpected `isOpaque` value to be YES instead of NO.

I'm sharing the results of my investigation so far:

In ASImageNode.mm, `drawParametersForAsyncLayer:` will use `self.opaque` to define the value that will be used to actually create the context in `displayWithParameters:isCancelled:`

On an ImageNode, by default opaque is NO (defined in `init`, and it seems that there is a TODO regarding this block of code) so if you display a PNG with alpha, it will actually be rendered correctly without doing anything.

I notice the black background issue on scrolling up & down in an ASTableView, so I wonder if there is something related to ASRangeController.

Anyway, at some point the layer will have an opaque value set to YES, and so will lead to the black background issue.
I couldn't find yet what was triggering that change in the layer (again might be related to ASRangeController cleaning up things).

I also notice that **setting a backgroundColor prevents the change** on isOpaque from NO to YES. (Even if the background color is clearColor). That may be pure luck or that might ring a bell to you!

I'll continue to investigate in the following days, let me know if you think of something that might be related to what I observed,

Thanks!
",jmig,appleguy
1242,2016-03-01 07:01:09,"@levi it does exist for collection today, right?  just checking.

@Adlai-Holler thanks for filing this.  @nguyenhuy confirmed it would be easy to add after his recent refactor, so we should try to do this in the next month before 2.0GM.
",appleguy,levi
1242,2016-03-01 07:01:09,"@levi it does exist for collection today, right?  just checking.

@Adlai-Holler thanks for filing this.  @nguyenhuy confirmed it would be easy to add after his recent refactor, so we should try to do this in the next month before 2.0GM.
",appleguy,Adlai-Holler
1241,2016-02-23 06:50:58,"@appleguy  my pleasure. keep doing that great work :+1: 
",ItamarM,appleguy
1239,2016-02-18 06:24:34,"@rahul-malik I am rerunning the tests in case this was a fluke, but it looks like we may need to modify the tests to ensure they succeed after this change?

/Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKitTests/ASDisplayLayerTests.m:515: ((ASDisplayNodeRunRunLoopUntilBlockIsTrue(^BOOL{ return (layer2Delegate.displayCount == 1); })) is true) failed:
512   dispatch_resume([_ASDisplayLayer displayQueue]);
513   XCTAssertTrue(ASDisplayNodeRunRunLoopUntilBlockIsTrue(^BOOL{
514     return (layer2Delegate.displayCount == 1);
515   }));
      ~~~~
516 
517   // check layer1 has not had async display run
",appleguy,rahul-malik
1239,2016-02-18 06:53:59,"This is extremely exciting! I have been looking forward to this capability for well over a year now!  Thank you, @rahul-malik 
",appleguy,rahul-malik
1235,2016-02-17 07:46:48,"@Adlai-Holler thanks, this looks like a solid improvement!
",appleguy,Adlai-Holler
1232,2016-02-18 09:03:56,"@jellenbogen @appleguy This is because your subnode is inside a `ASStackLayoutSpec` that is horizontal (hence the Inf width) and also because that stack is inside a `ASStackLayoutSpec` that is vertical (hence the Inf height) these two combined results in what you are seeing. I'm pretty sure I've came across this issue, so let me see if I can dig up some code for you!

When I first started using the layout specs, I would have assumed the same behaviour that you probably assumed, which is that if you have a horizontal  `ASStackLayoutSpec` as a subnode of a vertical `ASStackLayoutSpec` then the horizontal layout stack and it's children would have a width constrained to the width of the vertical stack and the children of the horizontal stack would have the height of it's parent not of the vertical stack. @appleguy This was the behaviour in ComponentKit, so maybe we can do some work to support this?
",aaronschubert0,appleguy
1232,2016-02-19 18:00:46,"@aaronschubert0 I see, yeah thats exactly what I was thinking. But it seems like regardless of where the Horizontal Stack layout, or any stack layout for that matter, lives it has an inf size in the direction of the stack?

If this is the case is there property that can limit this? Seems like there should be something equivalent to flexBasis for the direction of the stack? Since flex basis only controls the cross axis. 

Or after thinking about it maybe, i'm just using the wrong combo of stack layouts. I'm trying to get my nodes to layout in a grid (see image). But I could just as well use 2 vertical stacks inside an other vertical stack where the 2 substacks have a flexBasis of 0.5. instead of rows I can work with columns...

<img width=""499"" alt=""node_layout"" src=""https://cloud.githubusercontent.com/assets/1269011/13184232/81563f18-d6ef-11e5-9c54-17a00a74ac1b.png"">
",jellenbogen,aaronschubert0
1232,2016-02-20 03:14:07,"@aaronschubert0 I ended up getting this working by simply adding the flex basis to the children of the horizontal stack layout. This makes me think that the horizontal stack layouts within the vertical stack are using the width of the vertical stack... Otherwise I'm not entirely sure what the relative dimensions on the child nodes in the horizontal stack are relative to? 

Here is the code:


",jellenbogen,aaronschubert0
1228,2016-02-17 01:45:53,"@keywind haha, nice!  thanks
",appleguy,keywind
1227,2016-02-16 19:33:23,"@appleguy Totally agree, WebP should not be a default option.  As long as we are good with the subspec options I'll create the PR.
",smyrgl,appleguy
1227,2016-02-17 15:42:32,"@garrettmoon Done.
",smyrgl,garrettmoon
1223,2016-02-18 06:58:56,"Some serious work here!!  Thanks @rcancro!  This will definitely be called out in the next release notes, At least as soon as we feel it is tested and stable.
",appleguy,rcancro
1218,2016-02-11 18:57:28,"@nguyenhuy looks good!
",appleguy,nguyenhuy
1217,2016-02-12 08:09:42,"@levi wow, that's funny! Thanks for chiming in.

@GitGadd I will go ahead and close. I know, sometimes it is really crazy the stuff that Apple has broken in their frameworks. Fortunately, although there are many unique issues that can happen with a framework like ASDK, ultimately it isn't super magic and is mostly a thin frontend for UIKit :)
",appleguy,levi
1217,2016-02-12 08:09:42,"@levi wow, that's funny! Thanks for chiming in.

@GitGadd I will go ahead and close. I know, sometimes it is really crazy the stuff that Apple has broken in their frameworks. Fortunately, although there are many unique issues that can happen with a framework like ASDK, ultimately it isn't super magic and is mostly a thin frontend for UIKit :)
",appleguy,GitGadd
1214,2016-05-11 02:02:13,"@levi: Thanks for this awesome addition to the framework! For anyone looking for more information, check out the documentation up on the website:

**Layout Transition API Overview**
The Layout Transition API is designed this API to make all animations with AsyncDisplayKit easy - even transforming an entire set of views into a completely different set of views!

With this system, you simply specify the desired layout and AsyncDisplayKit will do the work to figure out differences from the current layout. It will automatically and new elements, remove unneeded elements after the transiton and update the position of any existing elements.

There are also easy to use APIs that allow you to fully customize the starting position of newly introduced elements, as well as the ending position of removed elements.

http://asyncdisplaykit.org/docs/implicit-hierarchy-mgmt.html _**(beta, will become default ON soon)**_
http://asyncdisplaykit.org/docs/layout-transition-api.html
",appleguy,levi
1213,2016-02-11 04:31:52,"@nguyenhuy Thanks for the clarification. Will look into it for sure. :)
",gauravmnit07,nguyenhuy
1213,2016-10-14 22:53:49,"@gauravmnit07 @nguyenhuy how tough would it be to make a new ASLayoutSpec that incorporates refactored logic from an open source implementation of something like UICollectionViewFlowLayout?
",appleguy,nguyenhuy
1211,2016-02-10 07:03:51,"Very awesome, thanks @rahul-malik!
",appleguy,rahul-malik
1209,2016-02-10 23:12:57,"This is a hugely important change for the framework… Thank you so much for working on it  @garrettmoon! It will meaningfully improve in the-application experiences as well as the developer experiences for any of the 2000 and clients who update the framework, and no doubt for thousands more to come!
",appleguy,garrettmoon
1208,2016-02-09 20:46:59,"@appleguy I just tried manually using that change and there is no change to this behavior.
",smyrgl,appleguy
1208,2016-02-10 10:10:51,"@appleguy On the info you wanted, here is the full backtrace.


",smyrgl,appleguy
1208,2016-02-10 10:14:58,"@appleguy As for revisions, the last revision I tested (I'm going to test your fix now but I haven't pulled yet) is cae47e23e1697d9da317743783c4bd02a4e60d99 and the first commit that I pulled that this started happening was de2d3ab024fb683142d06779e5acc964162db5ea which I upgraded to from f696eb74769188f5dacafe178d458ce447e19fac.  However it was intermittent then (whereas in cae47e23e1697d9da317743783c4bd02a4e60d99 it is 100% reproducible with no relevant changes in my code) so there is a possibility that this ""break"" was introduced earlier.  
",smyrgl,appleguy
1208,2016-02-10 10:22:40,"@appleguy So I pulled 4c1654673af1ac9a8b2fa1eb140450df10006415 and I can confirm that this deadlock is no longer occurring.  It looks like the only change you did was to not use the lock if the thread is main...this fixes the issue (since the changesets can only be called from main due to the thread affinity asserts) but I'm not sure why it was happening in the first place.  I'm not complaining but even your documentation for the change only suggests that this is an optimization.

Anyway I will let you know if this reoccurs but if you know what the root cause is that would be helpful to understand.
",smyrgl,appleguy
1208,2016-02-10 10:27:31,"@appleguy As for the architecture of my app, I think it might make sense to take that to iMessage so we can have some back and forth on the subject.  The particular collection view that this triggered on is by far the most complex in the app (using extensive use of sections to represent flattened leaves of a tree data structure) but I'm not sure any of that is relevant to why this happened.  I emailed you my iMessage info, ping me at your convenience and we can discuss it further.
",smyrgl,appleguy
1208,2016-02-12 17:45:17,"@appleguy @Adlai-Holler Ahhhhh...that's interesting and not something I was aware of but it makes sense.  Just one point of clarification: I assume when you say that I can't wait on the main thread from a background thread what you really mean is that I can't wait on an ADK queue background thread for the main thread?  In other words this would be ok?


",smyrgl,appleguy
1208,2016-02-12 18:23:30,"@appleguy Anyway regardless I don't have a lot of cases where I synchronously wait on the main thread in Core Data scenarios that I'm aware of (the above example is a bit contrived).  The reason being is that I have a two context setup but each is directly tied to the PSC and background context actually represents the master data--the main context is basically read only for the UI and all communication between the two happens via standard Core Data merges.  

However I do have cases with a few nodes where they use a Core Data object as the ""data source"" to setup the node like this:



I do this with a thread specific context because of the thread affinity problem.  If there wasn't thread affinity (or there was some way to dispatch back to it) I wouldn't need to do stuff like this and I could just async grab the data from a background context (something like a mirror of the main context but for ADK) and then use it directly.
",smyrgl,appleguy
1208,2016-12-12 18:29:18,"Leaving this in the backlog, but @appleguy think's @Adlai-Holler is the best fit.",garrettmoon,appleguy
1207,2016-02-10 02:47:24,"@Adlai-Holler  Yes! I have came to the exact same conclusion after looking at UIKit's behavior and our code.
",binl,Adlai-Holler
1205,2016-02-09 06:07:13,"@Adlai-Holler lol!  @garrettmoon had just noticed / reported this behavior on Friday.

If either of you could put up a diff, (and fix that open brace too!), I definitely don't think this is a reasonable behavior.

Not that we should be optimizing for a no cache case, but the only reasonable thing I can imagine doing would be to expand the fetch data range so we keep Data a bit longer... But this is not something we should worry about right now,
",appleguy,Adlai-Holler
1205,2016-02-09 19:05:44,"@Adlai-Holler @appleguy I can address as part of my PINRemoteImage PR coming soon.
",garrettmoon,appleguy
1205,2016-02-09 19:05:44,"@Adlai-Holler @appleguy I can address as part of my PINRemoteImage PR coming soon.
",garrettmoon,Adlai-Holler
1205,2016-02-10 00:00:04,"@Adlai-Holler I removed the method in my PR #1209 
",garrettmoon,Adlai-Holler
1203,2016-02-09 18:53:29,"[TestExample.zip](https://github.com/facebook/AsyncDisplayKit/files/123590/TestExample.zip)

@appleguy Thanks for the quick reply.Loved your passion and your dedication. Kudos to you and AsyncDisplayKit community for being so awesome.
I have attached the sample project showcasing the issue. Please let me know if you need anything else from my side. Thanks again.
",gauravmnit07,appleguy
1203,2016-02-14 18:41:08,"@appleguy Hey, have you got the chance to look at the sample project? Please let me know if I am doing anything wrong or I can provide anything else to debug the issue. 
Thanks.
",gauravmnit07,appleguy
1202,2016-02-08 20:21:23,"LOL thanks @nguyenhuy !
",appleguy,nguyenhuy
1202,2016-02-08 20:37:31,"@nguyenhuy @appleguy my bad!! It is indeed a vim file...lol
",lappp9,nguyenhuy
1202,2016-02-08 20:37:31,"@nguyenhuy @appleguy my bad!! It is indeed a vim file...lol
",lappp9,appleguy
1201,2016-02-09 06:18:27,"@maicki excited to land this as soon it builds! Indeed, we can't entirely delete all forms of ASRangeHandler, including the base class
",appleguy,maicki
1201,2016-02-09 15:03:36,"@appleguy Build errors should be resolved now

Maybe we can even further refactor a bit. If I look into ASDisplayNode.mm there is the comment: ""Once the working window is eliminated (ASRangeHandlerRender), trigger display directly here."". As we don't use ASRangeHandlerRender anymore we should be able to trigger the display directly now and remove the if / else. 
",maicki,appleguy
1201,2016-02-09 20:23:22,"@maicki this diff is happiness!  Thank you!
",appleguy,maicki
1200,2016-02-08 20:23:56,"@maicki cool, I like this
",appleguy,maicki
1200,2016-02-09 06:19:40,"@maicki I am retrying both of your builds. Could you check into the cause of the failures if they fail again?
",appleguy,maicki
1200,2016-02-09 06:33:10,"@maicki awesome getting pull request #1200!

a little bit concerning that the tests passed this time, clearly there is some kind of timing issue…
",appleguy,maicki
1200,2016-02-09 11:14:17,"@appleguy, it's very hard to say, given that the problem doesn't seem to be reproducible. I've tested the new transaction code a lot and never seen and draw calls missing. 

Anyway, I'll leave the test running locally with only once CPU core enabled (like on travis) over and over again, we'll see if it can be reproduced.
",knopp,appleguy
1200,2016-02-09 14:17:14,"@appleguy, I have some updates here.

The problem can be reproduced locally. You need to disable all CPU cores in instruments (only leave one active) and then run the `testTransaction` test for couple of tens of thousands times.

Eventually, it will get stuck. But the reason why it gets stuck is that GCD will refuse to overcommit the display queue. So the `dispatch_semaphore_wait` is blocking the display queue, and all subsequent calls are stuck, because the task that unblocks the semaphore is waiting in display queue too.

You can easily test this. When the test gets stuck, you can try scheduling a block on display queue inside the `ASDisplayNodeRunRunLoopUntilBlockIsTrue` loop - it will never be executed. 

So while the test fails occasionally, I think this is pretty harmless, because normally (outside of tests) one display queue task will not block waiting for another display queue block. 

I'm not sure how to fix the test though. GCD doesn't make any guarantees about overcommit, so you can't expect to have more threads running than CPU cores (even though it usually it is the case), which is required for this test to pass.
",knopp,appleguy
1199,2016-02-09 06:29:31,"Thanks @maicki !  cc @garrettmoon :) ++threadSafety
",appleguy,maicki
1199,2016-02-09 23:57:29,"Yeesh, I'm starting to wonder if we should do an audit of thread safety. @appleguy do you know of a good way to prioritize something like that? I know ASMultiplexNode almost completely ignores it :/
",garrettmoon,appleguy
1195,2016-03-01 21:31:19,"@appleguy this issue does indeed seem to be fixed in master. Please let me know if you need help with any additional testing. Thanks!
",martin-gearzero,appleguy
1187,2016-02-07 07:52:17,"@yxztj thanks **a lot** for creating the test project and reporting this.  We will figure this one out.

cc @nguyenhuy, @levi do you even have a guess as to what could cause this?
",appleguy,yxztj
1187,2016-11-18 22:38:22,"@maicki @yxztj can one of you verify this is fixed in master?  It should be.
",appleguy,yxztj
1187,2016-11-23 00:24:47,"Hey @yxztj, this is actually the expected behavior.

I try to explain it a bit more in detail: If you set a ratio of 1.0 / 1.0 the ratio tries to use the constrained size that get's passed in to figure out the constrained size for the child that needs to calculate it's size based ont he passed in constrained size. Unfortunately because the way the overall layout is described the passed in constrained size in the ratio specs will be (0, 0), (Infinity, Infinity). As said ratio layout spec tries to figure out what's the best size is based on the child by passing in this constrained size into the ASImageNode child. There are now two cases:
1. Image is already set on the ASImageNode (with 0.0 delay): As in the time the ratio spec asks for the size based on the child image node and the image node already has an image assigned it will return this size for itself. Based on that the stack spec that contains the ratio spec tries to layout the two ratio specs but as it exceeds the width it will layout the left image node the size it would like to be and shrinks the right image
2. Image is not set on the ASImageNode (with 0.1 delay): In this case the ratio layout spec is passing in the unconstrained size to the child and as no image is set the image node will returned the passed in size as size of itself. Based on this the stack spec that contains the ratio specs tries to layout the two ratios specs but as both of these will have width and height unconstrained it will give it a width of 50% (minus the spacing). As the images are than set after the layout pass happened the images will both look like they have %50 width and a ratio of 1/1 what is actually not really true, the images are smaller as 1/1. With 2.0 it's actually a wrong behavior to use the image nodes this way and a log will be printed out as there is no size given to ASImageNode's that don't have a specific size set via `style.preferredSize` or an image assigned where the `ASImageNode` can determine the size

I will close that issue for now as this is expected behavior. Please reopen if there are open questions / issues. Thanks!",maicki,yxztj
1187,2016-11-23 05:28:43,"@maicki thank you for explaining!  As long as 2.0 is now printing out that warning log, this seems like a great resolution.  Before that log, it was harder to tell as a developer that the layout was under-specified.",appleguy,maicki
1183,2016-02-09 06:34:23,"@levi I think one of your new files needs to be added to the dynamic framework target.

Undefined symbols for architecture x86_64:
  ""_OBJC_CLASS_$__ASTransitionContext"", referenced from:
      objc-class-ref in ASDisplayNode.o
ld: symbol(s) not found for architecture x86_64
",appleguy,levi
1183,2016-02-09 09:01:34,"@levi Let me know if you want me to try some of this code out, I'm currently trying out some state behaviour, so this would fit nicely along side being able to re-render a node once the state changes.
",aaronschubert0,levi
1182,2016-02-07 07:50:04,"@samhsiung thanks a lot for reporting this!  Pretty strange, I wonder what's going on?  Was the crash reproducible?  Did you happen to try it with UILabel?  I assume it had some attributes too...
",appleguy,samhsiung
1182,2016-07-01 20:41:19,"Thanks @samhsiung I will close that issue for now and we should reopen if we have more information or other cases / issues are showing up.
",maicki,samhsiung
1182,2016-07-19 04:23:04,"@maicki actually I was able to repro recently:

<img width=""1399"" alt=""screen shot 2016-07-18 at 9 20 51 pm"" src=""https://cloud.githubusercontent.com/assets/194822/16938504/8a1ba2dc-4d2d-11e6-8eed-09a2ceb7b6e1.png"">

`NSConcreteAttributedString * attributedString = @""♉ ♥ ⓐ®©ⓗⓘ ⒹⓔⓒⓄⓇ ♥(ˆ⌣ˆԅ)""    0x00007feb26ea0060`

and attributes:

`Printing description of attributedString->attributes:
Length 23 (2 blocks, 1 used, block 0 is at 0)
 23 0x7feb2615c320 {
    ASAttributedStringWordKerning = 0;
    NSColor = ""UIDeviceWhiteColorSpace 0.333333 1"";
    NSFont = ""<UICTFont: 0x7feb2615c200> font-family: \""Helvetica Neue\""; font-weight: normal; font-style: normal; font-size: 11.00pt"";
    NSKern = ""-0.05000000074505806"";
    NSParagraphStyle = ""Alignment 0, LineSpacing -0.815, ParagraphSpacing 0, ParagraphSpacingBefore 0, HeadIndent 0, TailIndent 0, FirstLineHeadIndent 0, LineHeight 0/0, LineHeightMultiple 0, LineBreakMode 0, Tabs (\n    28L,\n    56L,\n    84L,\n    112L,\n    140L,\n    168L,\n    196L,\n    224L,\n    252L,\n    280L,\n    308L,\n    336L\n), DefaultTabInterval 0, Blocks (\n), Lists (\n), BaseWritingDirection -1, HyphenationFactor 0, TighteningForTruncation NO, HeaderLevel 0"";
}`
",samhsiung,maicki
1181,2016-02-07 07:18:13,"@Adlai-Holler Great find, thanks for reporting this. Certainly makes sense to me, and should not be too hard to fix; I had just never thought about this case, even though it is relatively obvious.

@rahul-malik, @lkzhao this is also close to code that you have recently changed, so if you feel motivated, it would be nice to fix this one soon.
",appleguy,Adlai-Holler
1181,2016-04-02 05:18:11,"@Adlai-Holler: Let us know if the attached PR addresses this to your satisfaction. I'm not certain that it will prevent background CPU usage after navigating away from a view, but it should address the assertion failure. 
",appleguy,Adlai-Holler
1177,2016-02-07 01:42:36,"@Adlai-Holler we reverted to patch that recently change this behavior. Please send me a note for re-open this if that is not exactly what you mean, and if the behavior currently in master still has an issue along the lines of what you're referencing
",appleguy,Adlai-Holler
1175,2016-02-07 19:23:38,"@appleguy Thank you for the advice with the ASPagerNode! I just got that implemented.

Also, I figured out what is going on and why I am able to replicate consistently.

I discovered that I am logging the 3rd and final vertical collectionView's contentSize.height.

Despite having the same rangeTuningParameters of 2.0 leading, 1.0 trailing, that 3rd feed in 1.9.5 immediately knew its contentSize.height upon init of the ""paging"" collectionView. In 1.9.6, the 3rd vertical feed isn't aware of its contentSize until it is on-screen for the first time. 

I would think that with my range tuning parameters it would have known its size sooner than its first on-screen appearance. But let me know if that is the expected behavior. For what it's worth, I am also able to replicate with the ASPagerNode and its default range tuning.

Thanks again,
Jordan
",gugges,appleguy
1175,2016-06-19 21:57:49,"@hannahmbanana Feel free to close this. The behavior changed so I wanted to raise the issue, but I am capturing contentSize at a better point in the view's lifecycle so this is no longer an issue. Thanks!
",gugges,hannahmbanana
1172,2016-05-17 07:50:58,"@appleguy We're now using 1.9.73, testing using the Kittens example. The memory usage on launch is around 35MB, and after scrolling to bottom then top again, the memory rises to 39MB. Tried simulate memory warning on simulator, the memory usage won't drop. We noticed the image node holds a strong reference to the image object, and since the cell node never gets released, the image stays in memory as well.

We also use ASNetworkImageNode in our own app, with much more complexed and richer images in each cell node, so the memory increases really fast on scrolling down(could go up thens or hundreds of MB and then crashes due to OOM).

Is there any best practice we could follow in this situation? Thanks.
",yxztj,appleguy
1171,2016-02-06 18:06:38,"@appleguy Yes, both are optimizing reload calls. This patch includes the other one that Huy made and fixed the crashes we had earlier. I actually took some code directly from his fork. We can land this instead. 

Few notes about what I did here:
1. Removed `_deleteSection`, `_insertSection` etc. These don't do much and made it very confusing to read the code.
2. **(Please review this part)** Every node editing methods previously all have a completion callback scheduled on the main thread and update the _completedNodes on the main thread. This made it hard and cause crashes when doing batch operations like ReloadSection/ReloadData etc. 
   Now these methods only change _editingNodes and do nothing with the _completedNodes. After we are done with the operations, we call `commitChangesToNodesOfKind` and provide a callback there. 
3. Optimized reloadSection/reloadData/reloadItems/deleteSection/insertSections on TableView and CollectionView. Previously, all of these actions result in deleteItems/insertItems calls to TableView and CollectionView. Now it makes one specific call. (for example, reloadSection calls tableview `reloadSections: withRowAnimation` instead of making `deleteRowsAtIndexPaths: and insertRowsAtIndexPaths:`)
",lkzhao,appleguy
1171,2016-02-06 18:57:51,"Thank you Luke, this summary was extremely helpful for me.  I will review in detail soon.

Sent from my iPhone

> On Feb 6, 2016, at 10:06 AM, Luke Zhao notifications@github.com wrote:
> 
> @appleguy Yes, both are optimizing reload calls. This patch includes the other one that Huy made and fixed the crashes we had earlier. I actually took some code directly from his fork. We can land this instead.
> 
> Few notes about what I did here:
> 
> Removed _deleteSection, _insertSection etc. These don't do much and made it very confusing to read the code.
> 
> (Please review this part) Every node editing methods previously all have a completion callback scheduled on the main thread and update the _completedNodes on the main thread. This made it hard and cause crashes when doing batch operations like ReloadSection/ReloadData etc. 
> Now these methods only change _editingNodes and do nothing with the _completedNodes. After we are done with the operations, we call commitChangesToNodesOfKind and provide a callback there.
> 
> Optimized reloadSection/reloadData/reloadItems/deleteSection/insertSections on TableView and CollectionView. Previously, all of these actions result in deleteItems/insertItems calls to TableView and CollectionView. Now it makes one specific call. (for example, reloadSection calls tableview reloadSections: withRowAnimation instead of making deleteRowsAtIndexPaths: and insertRowsAtIndexPaths:)
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,appleguy
1171,2016-02-10 07:34:20,"@nguyenhuy Thanks for the review & feedbacks!! There are some code that I copied/converted and I am not entirely sure what they do. Let me talk to you tomorrow about some of the details int your review.
",lkzhao,nguyenhuy
1169,2016-02-03 09:31:37,"@dermotos @levi I've came across this as well. Currently, I store the current page and then in `didRotateFromInterfaceOrientation` I call scrollToPage on ASPagerNode without animation, this seems to work relatively well.
",aaronschubert0,levi
1169,2016-02-07 08:20:44,"@levi we will need to figure out how to make this work for the notifications tab, with your work on iPad rotation. Could you prioritize that in this coming week, and update this task with your findings?

Ideally we can do this without depending on code at the view controller level. The best thought that immediately comes to mind is that when the pager experiences a bounds change, it should update all of its cells to the new constrained size and ensure that the current page is set to be same as it was before the bounds change.

Thank you for reporting this @dermotos, and @aaronschubert0!  (btw Aaron, send me a note if I can help you with anything!)
",appleguy,levi
1169,2016-02-07 08:20:44,"@levi we will need to figure out how to make this work for the notifications tab, with your work on iPad rotation. Could you prioritize that in this coming week, and update this task with your findings?

Ideally we can do this without depending on code at the view controller level. The best thought that immediately comes to mind is that when the pager experiences a bounds change, it should update all of its cells to the new constrained size and ensure that the current page is set to be same as it was before the bounds change.

Thank you for reporting this @dermotos, and @aaronschubert0!  (btw Aaron, send me a note if I can help you with anything!)
",appleguy,aaronschubert0
1169,2016-02-09 08:58:23,"@appleguy That solution would be awesome, it is becoming quite cumbersome having to do this for every view controller! In terms of my other work, I'll send you an email! 
",aaronschubert0,appleguy
1167,2016-02-07 08:26:34,"@rmls thank you for filing this task, and for looking into the implementation to figure out where the calculation was going wrong. It sounds like this should be relatively relatively easy fix, as soon as someone in the community has a chance to look into it.
",appleguy,rmls
1166,2016-02-07 07:40:47,"@levi the Ray Wenderlich three-part tutorial series should help this a lot.  @RCacheaux and @lappp9 are writing it now and it should be ready in a few weeks.  @nguyenhuy also linked to an interactive edu-game thing that tries to teach some of this stuff, but yours is a really excellent resource too.

@lappp9 maybe you could prioritize adding a new page to the.org website with a collection of links, Similar to the two interactive ones mentioned? Especially until the tutorial is available, and even after then, I think having a set of links to a wide variety of flex box related documentation and examples Will really help people get off the ground.  We can link to the page in questions here, and also add a callout to it on the homepage at some point. It would be really nice to do a very basic update to the homepage to callout a bullet list of some of the 2.0 features, and put the link to the layout spec resource page there.
",appleguy,levi
1166,2016-05-11 08:02:34,"@levi: There is definitely still a need here, and there has been some work in this area. Moving this one to the new feature tracker for now. 

---

The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,levi
1165,2016-02-02 18:29:03,"@aaronschubert0 your insertion logic is fine. It's likely how the scroll view content size is being calculated. Currently, if you're returning a layoutSpec in your scroll view it will size the defined nodes but not the contentSize itself. You can read more about this here if you feel that it aligns with your issue: https://github.com/facebook/AsyncDisplayKit/issues/780

Fixing this is on the roadmap and I'll likely be able to get to it next week. If you have any ideas on API design, I'd greatly appreciate the input.
",levi,aaronschubert0
1165,2016-02-02 19:00:27,"Hey @levi awesome. Thanks for that. So I will have to subclass ASScrollNode and then return a layoutSpec inside that node. In terms of the contentSize, I will be setting it to the screen width by the MaxY of the furthest down node, would setting this manually in the layout method be appropriate?

In terms of API design, I'll have a think and let you know, definitely room for improvement on such a vital node :) 
",aaronschubert0,levi
1165,2016-04-04 00:25:32,"@aaronschubert0 were you able to solve this? We have several similar use cases that have been working fine, so feel free to ask on slack if you have encountered any issues.

Implementing the layout speck that fits method should be enough if you have a mechanism to also set the content size, for example in the layout did finish method is fine. I believe there is another open task to implement that automatically in the base class, which would be a great thing to investigate if you have time, but due to other priorities we don't plan to investigate it soon.
",appleguy,aaronschubert0
1165,2016-04-04 07:47:35,"@appleguy Yeah I was thanks! Granted it worked since I was able to manually track where the end node was and set the content size from that, but overall hasn't been an issue. 
",aaronschubert0,appleguy
1165,2016-12-11 09:05:07,"@skensell Thank you for sharing your solution!  It's not a bad one indeed.

@aaronschubert0 as well -- I'm really happy to say there's now a framework solution to this - https://github.com/facebook/AsyncDisplayKit/pull/2753 .  It should land quite soon.

Hopeful that you get some time to update to 2.0; if you disable the deprecation warnings, you'll find it's fully source compatible.  You might appreciate best that you don't need to use a static layout spec for sizeRange to take effect; instead, the .style.preferredSize and related height / width properties can all take effect without wrapping in a spec.

Please let me know if you hit any troubles after trying out the new ASScrollNode feature!

Anyway, tracking this here still: https://github.com/facebook/AsyncDisplayKit/issues/780",appleguy,aaronschubert0
1164,2016-02-07 07:37:13,"@GitGadd this is a perfect form for this type of question. Sorry it took a week to get back to you, but I'm glad you asked.

In my opinion, in validating the collection review layout itself is too expensive to do every frame, although I know it is a relatively common practice. Once you were doing this, it is actually quite cheap in comparison to reload the item at the index Path being manipulated. Have you tried doing this?

Go ahead and also try calling -setNeedsLayout on the ASCellNode at that in next path. I believe this is set up to re-request the constrainedSizeForNodeAtIndexPath: from the data source.  cc @nguyenhuy who can correct me if this is wrong.

Definitely let me know the results you find, and this could make for a great example app or use case to discuss in one of the upcoming framework tutorials that are currently being written!

Also feel free to email me directly at asyncdisplaykit@gmail.com, any time.  I'll typically be able to reply more quickly, although it works best if you post here and give me a heads up in email with any other details you might not be able to share (such as code references from your app).  Sometimes other members of the community are able to reply more quickly.
",appleguy,GitGadd
1164,2016-10-04 19:46:48,"I'm running into this same issue with version 1.9.90. I tried inserting the following code into `applyLayoutAttributes`:

`if layoutAttributes.size != bounds.size {
            setNeedsLayout()
}`

However, that doesn't seem to be making a difference. @appleguy , is that what you meant for where to try applying this?
",sstigler,appleguy
1162,2016-02-02 05:27:27,"Nice tweak, thanks @maicki !  Sometimes surprising what the profiler will find...
",appleguy,maicki
1162,2016-02-04 06:38:01,"Thanks a lot, @maicki!  Many details to consider with this one.  But, I'm very proud of the fact that this framework represents the combined work of many detail-oriented engineers, so your contributions are a big part of that!
",appleguy,maicki
1159,2016-11-14 04:41:36,"@Adlai-Holler - was this fixed by the new table node / collection node API?
",hannahmbanana,Adlai-Holler
1159,2016-11-15 05:04:01,"@hannahmbanana Unfortunately not. The counts are currently updated just _after_ calling `nodeBlockForItem:` and friends =/.
",Adlai-Holler,hannahmbanana
1158,2016-02-02 06:39:00,"@Adlai-Holler Great find!  As soon as this builds on Travis I will merge.

Sadly this may be reason enough to do 1.9.6.1, agreed?
",appleguy,Adlai-Holler
1157,2016-02-02 01:49:01,"@nesium thank you, this drove me crazy and I literally gave up after trying so many things!
",appleguy,nesium
1155,2016-02-02 03:14:17,"@nguyenhuy Love this diff!  Merging now and let's go from here.
",appleguy,nguyenhuy
1153,2016-02-01 18:43:13,"@MarvinNazari See if #1158 gets you back online.
",Adlai-Holler,MarvinNazari
1153,2016-02-02 06:40:19,"@MarvinNazari thx for chiming in.  Commented on the PR...
",appleguy,MarvinNazari
1149,2016-01-29 17:38:10,"Hey @MarvinNazari, I've got a PR submitted to add this functionality so it should be available soon!
",lappp9,MarvinNazari
1149,2016-01-29 18:37:47,"wow awesome! thanks @lappp9 
",MarvinNazari,lappp9
1149,2016-02-02 07:29:19,"@MarvinNazari I merged Luke's diff, check it out and please do keep filing any issues you find with ASVideoNode!  Remember this is a Beta component and not even included in AsyncDisplayKit.h, so test carefully before using this component in a production app - you would be the first so far :)
",appleguy,MarvinNazari
1147,2016-02-02 01:52:54,"Nice refinements, thanks a lot for sending these great incremental patches as they are available @lappp9 !
",appleguy,lappp9
1143,2016-01-29 05:24:22,"Nicely done, thanks @samhsiung!
",appleguy,samhsiung
1141,2016-01-28 22:39:48,"Hi @tomizimobile , thanks for bringing this up. I think another approach we could consider is making ASTableView and ASCollectionViews transform aware for batch fetching logic when using the scrollDirection. This wouldn't require a change to delegates. 

Instead, all you have to do is invert the transform of the scroll view and its direct subviews.

You can check out SLKTextViewController for a sample implementation. What do you think about this approach?

related issue: https://github.com/facebook/AsyncDisplayKit/issues/1126
",samhsiung,tomizimobile
1141,2016-01-29 05:30:01,"@tomizimobile, interested in your thoughts on the transform approach. I think it would reduce the total amount of code we have to maintain while providing equally good performance. However, it is very possible that there is some other consequence of the approach that I haven't considered that limits certain use cases?

If we are in agreement on this approach, @samhsiung would you be able to implement a BOOL option on the collection and table -- when enabled, applies the transform to the table and each cell?

Of course this is pretty easy for anyone to implement themselves, but because the approach is far from obvious to many people (including myself when I first heard of it years ago), I think it is justified to have a convenience API.  Maybe scrollsFromBottom or something.  A similar approach could support horizontal views that need to load leftwards, So maybe there is a more general name? 
",appleguy,samhsiung
1141,2016-01-29 05:30:01,"@tomizimobile, interested in your thoughts on the transform approach. I think it would reduce the total amount of code we have to maintain while providing equally good performance. However, it is very possible that there is some other consequence of the approach that I haven't considered that limits certain use cases?

If we are in agreement on this approach, @samhsiung would you be able to implement a BOOL option on the collection and table -- when enabled, applies the transform to the table and each cell?

Of course this is pretty easy for anyone to implement themselves, but because the approach is far from obvious to many people (including myself when I first heard of it years ago), I think it is justified to have a convenience API.  Maybe scrollsFromBottom or something.  A similar approach could support horizontal views that need to load leftwards, So maybe there is a more general name? 
",appleguy,tomizimobile
1141,2016-01-29 13:38:13,"@samhsiung Great idea! I haven't come across that approach before - definitely not obvious but smart. @appleguy I'd be comfortable going with this approach rather than mine, and would definitely like some property such as scrollFromEnd or something like that. 

There are a couple use cases we'd lose by going with the transform approach:
- If you have a normal-scrolling table/collectionView that you wanted to fetch from the head. I don't think this is common though, and a refresh control seems to be the more standard way to handle that. 
- If you wanted to support fetching from both the head and tail. This is another case that I'd believe is pretty uncommon. 

I think the transform approach is going to support the much more common scenario of having a table/collectionView that scrolls from the bottom.
",tomizimobile,appleguy
1141,2016-01-29 13:38:13,"@samhsiung Great idea! I haven't come across that approach before - definitely not obvious but smart. @appleguy I'd be comfortable going with this approach rather than mine, and would definitely like some property such as scrollFromEnd or something like that. 

There are a couple use cases we'd lose by going with the transform approach:
- If you have a normal-scrolling table/collectionView that you wanted to fetch from the head. I don't think this is common though, and a refresh control seems to be the more standard way to handle that. 
- If you wanted to support fetching from both the head and tail. This is another case that I'd believe is pretty uncommon. 

I think the transform approach is going to support the much more common scenario of having a table/collectionView that scrolls from the bottom.
",tomizimobile,samhsiung
1141,2016-09-27 22:48:24,"@tomizimobile @samhsiung Hey folks! ASTableView and ASCollectionView are now transform-aware and so we should cover the most common case (Slack-style messaging). Since the codebase has diverged so significantly since this was last updated, I'm closing this for now. Thanks for the insight and implementation work on this!
",Adlai-Holler,samhsiung
1141,2016-09-27 22:48:24,"@tomizimobile @samhsiung Hey folks! ASTableView and ASCollectionView are now transform-aware and so we should cover the most common case (Slack-style messaging). Since the codebase has diverged so significantly since this was last updated, I'm closing this for now. Thanks for the insight and implementation work on this!
",Adlai-Holler,tomizimobile
1139,2016-05-11 00:07:49,"@appleguy: I've seen several contentOffset open issues that we should follow up / close. #1411
",hannahmbanana,appleguy
1139,2016-06-17 16:54:38,"@Adlai-Holler @maicki: This is just needs a line by line read by 1 of you to make sure there are no off-by one indexing issues or anything else. 
",hannahmbanana,Adlai-Holler
1138,2016-01-29 12:17:01,"@aaronschubert0 Thanks for replying! Actually what I'm trying to do is add padding, not margins, to an `ASTextNode`, so just wrapping the `ASTextNode` in a `ASInsetLayoutSpec` does not solves my use case.

I made this picture to better illustrate what I'm doing with my `ASCustomTextNode`.

![untitled-1](https://cloud.githubusercontent.com/assets/10931029/12675411/28743b40-c671-11e5-88ac-cfa853cbe617.png)
",jsspalding,aaronschubert0
1138,2016-02-05 19:55:28,"@appleguy what a nice technical explanation! Thank you for checking this and taking time to answer.
My use case is really simple and aesthetic, it's just to make tags with some ""room to breath"".

For example, take a look at this tags and buttons:
![Tags](https://d13yacurqjgara.cloudfront.net/users/64911/screenshots/1083847/freeuikit-shot.png)

I'm not sure if i did something wrong, but I can remember trying to achieve this using `ASButtonNode` setting a `preferredFrameSize` calculating the size of the string plus X points without luck.
I'm not even sure if `ASButtonNode` is considering `preferredFrameSize`, it seems that only `ASImageNode` is affected by this property, right?

By the way, I'm a huge fan of your work on ASDK and it's awesome to be able to contribute to the project (as minor as this is).
Thank you again for your feedback! It's amazing for someone that is starting a career on iOS dev.
",jsspalding,appleguy
1138,2016-03-25 02:14:29,"@jsspalding @aaronschubert0 - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,aaronschubert0
1134,2016-01-28 06:45:12,"@bimawa super grateful you added a test for us!  Thank you, it really adds to my feeling that it was worth the time to clean up the renderer a bit.
",appleguy,bimawa
1129,2016-03-25 02:15:51,"@levi - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,levi
1127,2016-01-28 06:41:59,"yay, thank you @samhsiung !  Always high quality.
",appleguy,samhsiung
1126,2016-02-07 08:28:25,"@samhsiung thanks for finding this, and the fix!
",appleguy,samhsiung
1123,2016-01-28 19:20:36,"Thank you @aaronschubert0  - I was able to successfully modify the PostNode in the SocialAppLayout to simulate a ""cardView"" for each cellNode. I added 5 pixel height bands at top and bottom, and 10 pixel wide bands for left and right - I gave the four bands a lightGray background. I then moved the divider displayNode down to make it look like a shadow. I set the frames for the bands in ""layout""
![simulator screen shot jan 28 2016 11 24 53 am](https://cloud.githubusercontent.com/assets/258556/12656214/d44d3b12-c5b1-11e5-99a7-b9514384d4e3.png)

I'm not all that pleased with the shadow as is and am curious, if I were to create a BezierPath to simulate a cardView shadow would it hurt scrolling performance? I can post the modified code if you want to take a look at it. Thank you
",robmontesinos,aaronschubert0
1123,2016-04-18 08:37:33,"[SocialAppLayoutSwift.zip](https://github.com/facebook/AsyncDisplayKit/files/223309/SocialAppLayoutSwift.zip)

@appleguy @yury @lakhman @aaronschubert0 @robmontesinos Attached is a working **swift** version of the **SocialAppLayout**. Add it to the -> https://github.com/facebook/AsyncDisplayKit/tree/master/examples for all the swift coders out there. @appleguy might need to look at the didselectrowatindexpath on the main viewcontroller something is funky when selecting the cell. 

Questions:
Why is the SocialAppLayout built with UIViewcontroller and ASTableView unlike the **Swift [Swift]** example project which uses ASViewController and ASTableNode?  
- is it possible to achieve this social layout with ASTableNode?
- should I try convert this SocialAppLayout swift version to use ASTableNode or would that be a waste of time?

Finally I noticed the SocialAppLayout uses ASControlNode for the buttons... why is that.... you guys built ASButtonNode? what are the benefits of using one over the other?
",alexrmacleod,aaronschubert0
1119,2016-01-26 20:03:11,"Thank you very much, @yury!  I'll merge this as soon as the build is done.
",appleguy,yury
1118,2016-02-02 09:59:38,"@appleguy ASTableView display cells with blinking, while UITableView doing this ok. For ASTableView:
- no blinking: cells that were fully visible (wrt to contentSize and contentOffset, etc) before UIKit endUpdates: called;
- enabling content offset adjustments changes visible window before calling endUpdates: thus removing almost all blinking;
- cells moving out of visible window because of 'scroll down' animation, disappear right at animation start.

Sample project show only blinking problem, let's simplify to this problem first.
",zintus,appleguy
1117,2016-01-26 20:39:34,"@knopp Really fantastic work here.  I shared it with all of the iOS developers at Pinterest, and we are extremely excited to have your last two changes in.  We will be testing them with the full force of the company, as all of our internal iOS testers will be on this by the end of the week :)

I'm merging it now for that reason - to get test coverage both in our organization and from the other great developers who follow ASDK master - and because your first implementation here is /very/ clean, very efficiently implemented, demonstrating many best practices for developing in highly perf- and reliability-critical framework code.

Feel free to answer my questions here, or in email - maybe send me a note when you have a chance to reply.  I don't think a followup diff is required, but if you have any ideas for improvements, I'll certainly be thinking about what we can do next and would be happy to discuss!  Your changes are most welcome, but also don't hesitate to surface priorities / problem points that my team or the much larger community can help with as well.
",appleguy,knopp
1117,2016-01-26 23:39:11,"@appleguy, thanks for the feedback. I changed priority to NSInteger here https://github.com/facebook/AsyncDisplayKit/pull/1122

I think I answered most of your questions here, if I missed something let me know
",knopp,appleguy
1116,2016-02-02 07:33:40,"@nvh thanks for reporting this, there are a lot of Swift users in the community but few are as proactive about reporting and fixing issues! I am going to close out this task assuming it is resolved by your PR, but please reopen it or file additional ones for any other problems you run into.
",appleguy,nvh
1116,2016-02-02 08:24:23,"@appleguy Yes it's fixed in master now! :tada: 
",nvh,appleguy
1111,2016-01-25 21:44:06,"@yury thanks a lot for porting the other CK commits!!  @ocrickard anything else we should be aware of?  I wonder if there's a way to set up something similar to a Herald rule to notify me when text components change :)
",appleguy,yury
1111,2016-01-26 01:58:49,"@yury could you send me an example test case for this so I can integrate it into the unit tests?  If you're able to add a snapshot / unit test for this directly, that would be phenomenal too :).  asyncdisplaykit@gmail.com
",appleguy,yury
1111,2016-01-26 19:44:41,"@appleguy ported to commits from component kit #1119.
",yury,appleguy
1110,2016-01-25 21:46:09,"@yury what exactly is the dependency here?  Why doesn't the truncater get accessed, e.g. [self truncater] get called, at a later point as soon as it is required?  Thanks a lot for looking at this!
",appleguy,yury
1110,2016-01-25 22:03:40,"@appleguy as my debugging shows, `[self truncater]` is called only to get visibleRange to detect links. And it is to late at that moment.

Truncated should be initialized ahead of size calculation so it can actually truncate string in it's initializer.
@tomizimobile patch here https://github.com/facebook/AsyncDisplayKit/issues/1033 also init truncater ahead. 
",yury,appleguy
1110,2016-01-26 02:05:26,"@yury thank you for those additional details.  It is still mysterious to me why this object has to be created ahead of time and I wonder if there is a later point than init where it can be created, as init may occur on the main thread, but none of our sizing calculations occur there.  If you're able to share a test case, I can verify, but it's possible the perf impact of this is negligible with the current factoring of the code (it used to be measurable as suboptimal).
",appleguy,yury
1110,2016-01-28 20:14:13,"@appleguy I've tried out master just now, and while the truncation string now appears, it seems that you can't actually interact with it. Using the workaround I talked about in https://github.com/facebook/AsyncDisplayKit/issues/1033 still seems to work for me. 
@yury Are you seeing this same behavior?
",tomizimobile,appleguy
1110,2016-01-28 20:14:13,"@appleguy I've tried out master just now, and while the truncation string now appears, it seems that you can't actually interact with it. Using the workaround I talked about in https://github.com/facebook/AsyncDisplayKit/issues/1033 still seems to work for me. 
@yury Are you seeing this same behavior?
",tomizimobile,yury
1110,2016-01-28 22:20:40,"@tomizimobile will check tomorrow.
",yury,tomizimobile
1110,2016-01-29 10:55:51,"@appleguy, @tomizimobile confirming that textNodeTappedTruncationToken doesn't called.

And confirming, that @tomizimobile workaround fixes this.

@tomizimobile can you make PR?
",yury,appleguy
1110,2016-01-29 10:55:51,"@appleguy, @tomizimobile confirming that textNodeTappedTruncationToken doesn't called.

And confirming, that @tomizimobile workaround fixes this.

@tomizimobile can you make PR?
",yury,tomizimobile
1109,2016-01-26 03:54:36,"@appleguy just ignore that commit ,the commit is a shortcut project , not for ASDK.....

and `Segmentation fault: 11` will  appear when 

![image](https://cloud.githubusercontent.com/assets/2311352/12572196/c7632388-c423-11e5-9e5e-6f1ec374961c.png)
",CodeEagle,appleguy
1109,2016-02-08 15:51:58,"@appleguy Unfortunately this issue does reproduce even in a trivial project. Here's what I've observed:

This is the minimum I can do to get the compiler to crash:



Either one of these variations, and the compiler works great:





We definitely have a lot of protocol composition going on with `ASLayoutable` and its implementors but it all makes good sense. Considering the fact that removing `self` fixes the compiler crash, I think this is something out of my league in the Swift optimizer.

The issue is not resolved in Xcode 7.3 Beta 2, so I've submitted a bug to Apple https://openradar.appspot.com/radar?id=6191944728313856 as well as a reduced test case at https://github.com/Adlai-Holler/ASDKWMOTest

Unless someone can find something incorrect or janky in our Layoutable protocol hierarchy, we may have no path forward.
",Adlai-Holler,appleguy
1109,2016-02-09 10:15:33,"@appleguy @Adlai-Holler @CodeEagle 
I would say this is more a programming error to be honest (granted there should be a better error message)

That is because you are basically trying to do this:
`let foo = ASStaticLayoutSpec(children: [foo])`
Which produces the error = ""Variable used within its own initial value"". The compiler is just getting confused at this point because the code passes the inline syntax validation (since it isn't fully aware of what your code is trying to accomplish)

So I would just use @Adlai-Holler second solution where you initialise the object with an empty array. 
Maybe @CodeEagle you can share where you envisioned on using this, and we can code it in a different way?
",aaronschubert0,appleguy
1109,2016-02-09 10:15:33,"@appleguy @Adlai-Holler @CodeEagle 
I would say this is more a programming error to be honest (granted there should be a better error message)

That is because you are basically trying to do this:
`let foo = ASStaticLayoutSpec(children: [foo])`
Which produces the error = ""Variable used within its own initial value"". The compiler is just getting confused at this point because the code passes the inline syntax validation (since it isn't fully aware of what your code is trying to accomplish)

So I would just use @Adlai-Holler second solution where you initialise the object with an empty array. 
Maybe @CodeEagle you can share where you envisioned on using this, and we can code it in a different way?
",aaronschubert0,Adlai-Holler
1109,2016-02-09 15:37:54,"Hmm @aaronschubert0 are you sure that's the case? I believe the code is equivalent to:


",Adlai-Holler,aaronschubert0
1109,2016-02-09 15:57:26,"@Adlai-Holler From this guide (https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html) I would assume `self` to reference the initialised object rather than a new object of that type. 

The extension on Int probably highlights this best (from the guide)



Having said that, I've just had a small play around with your project and what you describe is what's happening:



I overlooked the creation of the new `ASLayoutSpec()` which you then call `foo` on. My mistake.
",aaronschubert0,Adlai-Holler
1109,2016-05-11 03:45:57,"@Adlai-Holler: Not sure if you are still incredibly busy. If not, could you test this against your complex project?
",hannahmbanana,Adlai-Holler
1109,2016-05-11 04:03:54,"Hey! Glad to take a look-see, will do it tomorrow morning and report back.

> On May 10, 2016, at 8:46 PM, Hannah Troisi notifications@github.com wrote:
> 
> @Adlai-Holler https://github.com/Adlai-Holler: Not sure if you are still incredibly busy. If not, could you test this against your complex project?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1109#issuecomment-218354478
",Adlai-Holler,Adlai-Holler
1109,2016-05-11 14:09:26,"@hannahmbanana I believe this issue's resolved as far as we can take it – the Swift compiler seems to crash when optimizing the code OP posted, separate from ASDK itself, so we'll have to wait until Apple fixes the radar linked above. @CodeEagle We good?
",Adlai-Holler,hannahmbanana
1109,2016-05-11 17:52:39,"@Adlai-Holler: Hmm. I could have sworn that the radar was marked Closed when I checked this yesterday. :) Thanks for checking anyways!
",hannahmbanana,Adlai-Holler
1109,2016-05-14 20:38:44,"Heads up @hannahmbanana OP hit me with the thumbs up so we can close this.
",Adlai-Holler,hannahmbanana
1102,2016-01-25 02:18:59,"@knopp very smart idea.  By default they aren't set this way, and I think in many apps it is more optimal for them to not be equal, but it is absolutely worth exploiting this if they are equal.
",appleguy,knopp
1101,2016-01-24 22:44:44,"@appleguy, seems to work fine for me. Btw. Would something like this fly? https://github.com/facebook/AsyncDisplayKit/pull/1102
",knopp,appleguy
1101,2016-01-25 12:59:44,"@appleguy, in my case it is about twice as slow, but nothing to write home about. 
![screen shot 2016-01-25 at 1 56 05 pm](https://cloud.githubusercontent.com/assets/96958/12551568/b73f50f2-c36b-11e5-8395-a73f3ec4cee0.png)
",knopp,appleguy
1100,2016-01-24 12:46:30,"Awesome work @appleguy thanks for putting in the effort to make this area of ASDK so solid!
",aaronschubert0,appleguy
1100,2016-01-25 13:01:15,"@appleguy Thanks for looking into this! Most of the bugs, especially those with the centering are fixed in my original use cases. With the firstHeadlineIndent there still is a problem with clipping text on a single line. I've updated my [test project](https://github.com/nvh/ASTextNodeTest) to display this behaviour.

![simulator screen shot 25 jan 2016 13 43 25](https://cloud.githubusercontent.com/assets/248861/12551621/27b567c2-c36c-11e5-8453-933af6563e5c.png)

Should I open a new issue for this?
",nvh,appleguy
1098,2016-01-24 20:26:08,"@stowy: Awesome spec that puts center spec to shame! I'm wondering about what we should do to center spec once this one is accepted. Should we deprecate/remove it? or make it a subclass of this one?
",nguyenhuy,stowy
1098,2016-01-24 22:03:25,"Thanks @nguyenhuy for the comments, will revise. I will checkout the snapshot tests also. 
",stowy,nguyenhuy
1098,2016-01-25 02:53:56,"@nguyenhuy I've added the snapshot test cases, hopefully the build should pass and we're all set. 
",stowy,nguyenhuy
1098,2016-01-25 04:29:41,"@nguyenhuy, thanks for your help. In running tests in record mode, does that mean the tests need to run in record mode on every build machine? Is there more than one build machine? I ran in record mode once but I got the resource not found error after turning it off, would that be because the tests ran on a different machine? Or the record mode didn't run properly the first time?
",stowy,nguyenhuy
1098,2016-01-25 23:42:20,"@nguyenhuy I've added the images to the repo but seeing the following failure:



Any idea why it is looking under 'AsyncDisplayKitTests/ReferenceImages_32' instead of 'AsyncDisplayKitTests/ReferenceImages_64'? I don't see any other snapshot images in the _32 folder. 
",stowy,nguyenhuy
1098,2016-01-26 03:11:06,"ok @nguyenhuy the build is passing, how does it look now?
",stowy,nguyenhuy
1098,2016-01-26 04:05:35,"@stowy: Great. Nits aside, I think this PR is ready to land. 

Regarding missing reference images for 32bit, I'm not entirely sure if we can force machines to always run tests on 64bit simulators, or ask it to look for images in 64bit directory. Maybe having the same set of images for both architectures is not a bad idea at all.
",nguyenhuy,stowy
1098,2016-01-27 01:00:58,"@nguyenhuy have addressed the last comments now I believe
",stowy,nguyenhuy
1098,2016-01-27 18:10:17,"Thanks for your review and help @nguyenhuy, i enjoyed learning the snapshot tests process!
",stowy,nguyenhuy
1098,2016-02-02 07:11:41,"@stowy @nguyenhuy thanks a lot for working together to refine this and make it production ready, especially including tests!

@Adlai-Holler, @RCacheaux, @lappp9, @rcancro, @levi what do you guys think we should do with the center layout spec? Keep it as is? Make it a special case built on top of this? Delete it entirely? Is there any more descriptive name for this class than Relative, especially because there is a relative type of dimension that doesn't relate to the alignment features of this class?
",appleguy,nguyenhuy
1098,2016-02-02 07:11:41,"@stowy @nguyenhuy thanks a lot for working together to refine this and make it production ready, especially including tests!

@Adlai-Holler, @RCacheaux, @lappp9, @rcancro, @levi what do you guys think we should do with the center layout spec? Keep it as is? Make it a special case built on top of this? Delete it entirely? Is there any more descriptive name for this class than Relative, especially because there is a relative type of dimension that doesn't relate to the alignment features of this class?
",appleguy,stowy
1098,2016-02-23 17:31:12,"@stowy Do you have time to fix conflicts in this PR and update ASCenterLayoutSpec to use this new spec behind the scenes? I really want to see this merged soon. Thanks!
",nguyenhuy,stowy
1098,2016-02-23 19:58:23,"Hey Huy, sure sorry I wasn't aware of that work. I'll get onto it in the
next couple of days.
On Tue, Feb 23, 2016 at 9:31 AM Huy Nguyen notifications@github.com wrote:

> @stowy https://github.com/stowy Do you have time to fix conflicts in
> this PR and update ASCenterLayoutSpec to use this new spec behind the
> scenes? I really want to see this merged soon. Thanks!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/pull/1098#issuecomment-187806068
> .
",stowy,stowy
1098,2016-02-24 20:48:15,"@nguyenhuy I've revised the `ASCenterLayoutSpec` to use the `ASRelativeLayoutSpec` internally for the layout. Originally i made the center spec inherit from the relative spec but i thought that this exposes additional API for the center spec which may confuse things.

Let me know if you're happy with the latest approach. 
",stowy,nguyenhuy
1098,2016-03-07 16:52:07,"@nguyenhuy @appleguy is there anything outstanding for this or is it good to go?
",stowy,nguyenhuy
1098,2016-03-07 16:52:07,"@nguyenhuy @appleguy is there anything outstanding for this or is it good to go?
",stowy,appleguy
1098,2016-03-20 05:44:53,"@stowy now that the new version of Pinterest has been branched for a little while, I am finally catching up here.  Nonetheless, more conflicts had arisen, so I created a new branch to rebase and squash these commits.

The resulting commit, even with my additional changes, still comes from you as the author :).  Much-deserved, given the thoughtfulness and care you put it into expanding the core framework functionality for others to enjoy!

https://github.com/facebook/AsyncDisplayKit/pull/1405
",appleguy,stowy
1096,2016-01-23 21:06:58,"@appleguy Awesome! Thanks for cleaning it up and getting it to pass! I'm very happy to be involved in this project, such an awesome atmosphere. Exciting times ahead. 
",aaronschubert0,appleguy
1090,2016-01-23 03:09:32,"@knopp very impressive.  This is one of the most technical patches I've ever received from the community, and is definitely something I'm very happy to have - an area I've wanted to work on forever, but really had to hope of getting to soon, thus my enthusiasm!

I'd love to merge this soon, but have to ask: how did you go about testing this, both when you were developing it and before finalizing / putting it up?  Would you be willing to write a few basic tests?
",appleguy,knopp
1090,2016-01-23 10:27:47,"@appleguy, thanks for looking into this. It's been tested in with my internal project and AsyncDisplayKit examples. Also all tests pass.

Regarding the tests, the coverage is actually pretty good already, as lot of tests involve the transaction methods at least indirectly, with there also being test specifically for `_ASAsyncTransaction`. But I'll look into which codepaths are not currently being tested and will hopefully think of something.

Also you could test this with pinterest and let me know if everything work as expected :)
",knopp,appleguy
1090,2016-01-26 02:57:46,"Now that 1.9.6 is out, excited to start testing this at Pinterest!  Thanks for your intense and competent focus on the framework in the last few weeks, @knopp!
",appleguy,knopp
1089,2016-01-22 19:08:53,"@Adlai-Holler ha, good find / example.  I have a task on me to make setAttributedString: more efficient because right now it is pretty rough, as is init for ASTextNode, but both of these issues will be mitigated by the change to support creating ASCellNodes in the background...so I'm probably going to defer optimizing these until at least after that point as it is the bigger win.
",appleguy,Adlai-Holler
1087,2016-01-22 08:46:33,"@aaronschubert0 thank you for looking into this random auxiliary thing!  Really glad to see this!
",appleguy,aaronschubert0
1086,2016-01-20 09:31:32,"@appleguy  Never done it before but seemed really straightforward!
",aaronschubert0,appleguy
1085,2016-01-23 04:05:57,"@chrisze appreciate this contribution, glad to have you in the community!
",appleguy,chrisze
1080,2016-01-24 02:08:40,"This is a great piece of performance research.  I wish we were working together 1-1 on a day to day basis, @knopp!

I've been worried about this for some time now, but assumed it was primarily an issue if there was excessive / abnormal blocking of blocks like display blocks contending on a lock.  However, it makes sense that could happen if decoding relatively high resolution images on a slow CPU (the iPad 3 being an ideal test case here).  The symptoms match what I'm seeing in just the last few days of starting to profile our new Pinterest implementation on iPad 3, where I'm now focusing all of the optimization time.

The change you've made is very important, although I'm not sure if it is the easiest way to achieve what we need — I'm fine with the approach it uses as long as we increase the concurrent display count to /at least/ 2\* the CPU core count.  Starting at 2x cores is fine for now, as there will of course be layout operations, network parsing, main thread, etc but we do want a pretty high degree of saturation without excessive context switching.

I'll merge the change as soon as 1.9.6 is out, and start testing it heavily in Pinterest - and ask the ASDK community leaders to start doing the same in their apps :).
",appleguy,knopp
1080,2016-01-24 02:54:10,"@appleguy, there are some benefits to my implementation :)

It doesn't modify much of ASDisplayKit code. The `ASAsyncTransactionQueue::Group` works very similarly to `dispatch_group_t`, including possibility of manual enter and leave.

It is also quite flexible. I went ahead and did a proof of concept implementation of drawing priority here https://github.com/knopp/AsyncDisplayKit/commit/446c62a7a1595ca9f77ca20694ba6d5d0e159294

In this branch it is possible to assign any `ASDisplayNode` custom drawing priority, where nodes with higher priority render first. In our case we have several labels in each node and one rather large thumbnail image. We definitely want the labels to be rendered before the thumbnails. In the branch I linked to this is as simple as setting `imageNode.drawingPriority = ASDefaultDrawingPriority - 1;` and it seems to work quite well.

Do you think this could be something generally usable or do we have weird use case?
",knopp,appleguy
1080,2016-01-24 03:10:38,"Out of curiosity, @appleguy, why do you insist on `2 * activeProcessorCount` threads? I tried it on iPad 3, and during scrolling the experience seems worse than having just `activeProcessorCount` threads. 
",knopp,appleguy
1080,2016-01-24 04:27:23,"@knopp very interesting.  In your testing, you find it clearly & unambiguously worse in terms of visual assessment of frame drops?

My findings during the development of Paper implied that having a few extra concurrent operations allowed the system to continue running another operation when one blocked on a system call or other resource.  In some cases the display method may load from a disk cache, for example, which isn't that unreasonable of a pattern (although fetchData is intended for this, that range could be zero'd out or set to the same as the display range, or the logic to retrieve from cache could just be put in the display method itself).

This would be particularly true when the main thread is not active, potentially allowing incremental increases in efficiency / total throughput of rendering operations (a very good things to preload ahead of the user as fast as possible).

The other reason, which is probably even more important, is to ensure that a small number of very large / long render operations (e.g. decoding fullscreen images) don't block small and fast operations (e.g. decoding a tiny icon, rendering a small label, etc).  Also, image decoding and text decoding engage different parts of the system stack that has often-inefficient internal lock contention, so it's preferred to have one thread doing text and another doing images than getting two images stuck in the pipeline and blocking all the text labels.

That said, your empirical finding today is a lot more meaningful to me than investigations I conducted a few years ago.  With that knowledge, I agree we should land with this current value and not change it until any further research is conducted.  Though it would be difficult to tune, we might want to look at something like whether a displaylink shows any frames are being dropped at all (say for the past several seconds) and dials back the concurrency count if there are any drops - and otherwise sets it higher.  But that would only make sense if I could re-verify and quantify the magnitude of any throughput increase from more heavily loading the CPU, which would have to be great enough to overcome context switching costs of course.

The ""right"" solution here is to invest in further sophistication of this system in at least two respects: separate queues (text & images at a minimum), and more dynamic prioritization to be able to always ensure the visible area is prioritized, the offscreen upcoming area is next, and anything unrendered in the outgoing area is last.
",appleguy,knopp
1080,2016-01-24 15:54:52,"@appleguy, that's the nice thing about custom queue. Here I did a simple prioritization https://github.com/knopp/AsyncDisplayKit/commit/446c62a7a1595ca9f77ca20694ba6d5d0e159294 as a proof of concept, but it could be easily done in a way where you can schedule text and image drawing on different threads.

As for `CADisplayLink` I find it very unreliable. It often invokes the callback 60 times per second, even if there are obviously frames being dropped. 
",knopp,appleguy
1080,2016-01-26 06:50:28,"@appleguy, I didn't mean that it is entirely useless. In my experience it helps with simpler cases when you do something heavy in main thread, or the main thread gets smothered by several render threads, but ASDK is sort of past that. It's the other, more frustrating cases, i.e. when setting layer.contents causes occasional jerk on iPad Air 2, even though there's plenty of CPU time to spare, and CADisplayLink happily fires 60 times a second. I guess this falls under GPU bound.

I don't mind keeping this issue open for now, but if it's getting out of hand you can create the more general one.
",knopp,appleguy
1080,2016-04-20 03:00:07,"@knopp what do you see as the highest leverage next step for this? Most of our active work is now moved into the Ship bug tracker, which I would love to have you be a part of it if you're interested, and I mainly wondering how to translate this task -- such as if it should be broken up into a few different subsystems that can benefit from custom thread pools.
",appleguy,knopp
1080,2016-04-20 12:09:20,"Hi @appleguy, I finished the prototype I was working on and am currently working on something completely unrelated (desktop component). Hopefully I should get back to iOS related things in couple of months.
",knopp,appleguy
1080,2016-06-22 13:48:30,"After a brief discussion with @appleguy we will move this task into Ship.

@knopp Would love to get another performance review though, if you have a bit of time as this would be tremendously valuable on our road to 2.0.
",maicki,knopp
1080,2016-06-22 13:48:30,"After a brief discussion with @appleguy we will move this task into Ship.

@knopp Would love to get another performance review though, if you have a bit of time as this would be tremendously valuable on our road to 2.0.
",maicki,appleguy
1079,2016-01-20 02:37:59,"@aaronschubert0 this is fascinating.  Thank you for researching this.  It is an extremely important issue, yet there are very few folks prepared to debug the text system.

What kind of test case(s) do you have that helped you diagnose the issue?  My top priority is getting the fix in, especially since it looks like I'm going to do a 1.9.5.1 shortly (unfortunately - see #1083).  However, if you have appropriate test cases, I want to at least file an issue to ensure that we add a snapshot test to verify this behavior in the face of future text changes.

Could you explain why the new calculation is correct?  Why exactly would we add the origin value to the size, in order to generate a size?
",appleguy,aaronschubert0
1079,2016-01-20 15:22:27,"Hey @appleguy awesome. Yeah it's definitely a crucial area to invest time in. The test case that I used was the example project linked in #1076 and the debugger. So I definitely need to write some actual tests. Basically it seems that most properties of NSAttributedString are interpreted properly by our text size calculations since they change the size of the text container to achieve their 'effect'. In contrary headIndent (and I assume tailIndent) achieves it's effect by altering the origin of the whole text container, rather than altering the size, so .headIndent = 10 will result in the size to remain the same but the origin will now be (10, 0) rather than (0, 0). Since the positioning of our nodes are usually done by the parent (i.e in a layoutSpec method) it is appropriate to just alter the resulting size of textNode since that will result in the desired affect (that was my thinking behind the change anyway)
",aaronschubert0,appleguy
1076,2016-01-19 12:21:36,"Hi @nvh thanks for reporting this issue and providing an example project! Makes it a lot easier to debug.  The problem property is actually just `headIndent`, `firstLineHeadIndent` seems to be rendering properly. I'll put up a PR shortly that address this specific problem but a deeper inspection/fix may be needed.
",aaronschubert0,nvh
1076,2016-01-23 21:41:12,"I believe this is fixed in master - @nvh, could you confirm that in your original use case it is handled?  I'm keeping this open because I want to better understand the issue and ensure this is covered in the expanded test cases we're starting to develop for the text stack.
",appleguy,nvh
1076,2016-01-23 23:18:01,"Hey @appleguy, talking about expanded test cases, could you link me to some WIP (if there is any) I was planning to write some for nsattribrutedstring & ASTextNode soon. Just so we have complete coverage going forward and can better understand any issues (and prevent those!)
",aaronschubert0,appleguy
1076,2016-01-26 04:30:06,"This test project was essential to my detailed understanding of this code.  I'm very thankful for the excellent reports you have created over time, @nvh.  You have made a material difference in the project as a whole - really!
",appleguy,nvh
1076,2016-01-26 07:18:47,"Thank you for looking into this @appleguy, I'm happy to help!
",nvh,appleguy
1074,2016-01-19 04:19:00,"@Krisiacik My personal apologies on the stability issues with 1.9.4.  I took a diff late in the release for ASRangeController, and should not have done so.  1.9.5 does resolve all the reported stability issues with 1.9.4, and overall is a small and conservative release that is very unlikely to regress anything further, so I'm glad you've adopted it.  Remember, you can email me directly at asyncdisplaykit@gmail.com any time, especially for something as terrible as a stability issue that blocks your adoption of a release.

Are you using ASPagerNode and ASTableNodes inside that?  If you do this, you will see very substantial performance improvements for your use case, because of the smart 2D preloading feature.  You may have already seen this, but here's a segment on the nested orthogonal scrollers and some of the intelligence that ASDK provides. https://youtu.be/RY_X7l1g79Q?t=19m43s

@RuiAAPeres are you also working on this same app?  Wondering if I could help debug it in the context of the app itself, let me know if you need any other assistance with the performance profiling stuff.

@nguyenhuy could you take a look and weigh in on any tweaks necessary to fix the layout?  Thanks!
",appleguy,nguyenhuy
1074,2016-01-19 09:48:19,"@appleguy Yep, it's two of us with Rui. No need to apologise, we are happy this framework exists at all. It's kind of a miracle from my perspective, given UIKit is 8 years old afaik and it shows sometimes.   

Guys I managed to stabilise the behaviour of button contents, that means the ""reply"" title now lays out properly when paging happens, though I had to use some counterintuitive odd values. 
Vertical alignment doesn't work at all though.
",Krisiacik,appleguy
1074,2016-01-22 14:20:41,"@appleguy @nguyenhuy Guys I reverted back to 1.9.3 and managed to stabilise the layout.
I used measureWithRange with a nonZero minimum size on buttons so they are now always positioned correctly in all the cell. 
However with this I lost ability to centre vertically, which did not work anyway.
",Krisiacik,nguyenhuy
1074,2016-01-22 14:20:41,"@appleguy @nguyenhuy Guys I reverted back to 1.9.3 and managed to stabilise the layout.
I used measureWithRange with a nonZero minimum size on buttons so they are now always positioned correctly in all the cell. 
However with this I lost ability to centre vertically, which did not work anyway.
",Krisiacik,appleguy
1073,2016-01-19 04:14:36,"@AtifKhan786 Thanks for asking, and thanks @nguyenhuy for coming in with the answer!  Please reopen or file a new issue if you have any trouble.
",appleguy,nguyenhuy
1072,2016-01-19 05:23:12,"Thanks a ton, @knopp!  Does this seem to always fix the contentOffset reset issue, as well?
",appleguy,knopp
1071,2016-01-19 05:19:12,"@lappp9 did you try using SpaceBetween, as suggested in #1073 ?  I'd like to know if that does or doesn't work for your use case here.  Were there any followup questions to this or are you set?  Don't hesitate to reopen the task if more could be covered.
",appleguy,lappp9
1070,2016-01-18 03:00:54,"@nguyenhuy Thanks, that's what I need
",CodeEagle,nguyenhuy
1068,2016-01-17 17:37:58,"@appleguy Tried to modify the Kittens example to load 4-50 image nodes per ASCellNode with the same  image assets I use (should it only occur with specific image types). No luck reproducing so far. Next step is to remove static assets loading from my project (or load UIImages that get reused a lot once in a singleton class) to verify that this is the cause. I will then try again to provide a sample project by simplifying mine. Maybe it's more complex than we initially thought. 
",ankorko,appleguy
1068,2016-01-26 14:12:04,"@appleguy, unfortunately, I managed to get the same bug on 1.9.6

[bt_all_1.9.6.txt](https://github.com/facebook/AsyncDisplayKit/files/104996/bt_all_1.9.6.txt)
[Instruments_1.9.6.trace.zip](https://github.com/facebook/AsyncDisplayKit/files/105002/Instruments_1.9.6.trace.zip)

(files are from different runs)
",ankorko,appleguy
1068,2016-07-26 21:08:15,"@appleguy I seem to be seeing this issue fairly often.  I get it on the exception breakpoint, and can usually continue, but sometimes it seems to actually crash.

UPDATE: So it seems to have been happening because of one of the image nodes I was setting from a local cache.  I changed it and can't seem to reproduce this anymore.  If it comes back up I'll try to make an example app with it.
",lappp9,appleguy
1064,2016-01-20 00:56:03,"@levi  not yet async, but trying to make CVLayouts smarter and so more performant. what do you think is that best place to add this kind of hook so that ASCV can inform ""facilitator"" about potential cell editing? (insert, delete, update, reload, etc.)
",binl,levi
1064,2016-01-20 00:59:57,"Bin, I'd recommend adding these callbacks to the layoutDelegate object. Right now the delegate implements an ""inspector"" object for providing details into how the layout behaves. Providing a custom implementation is required for custom cv layouts and you're more than likely going to want to extend this inspector to interact with cell editing hooks. 

> On Jan 19, 2016, at 16:56, Bin Liu notifications@github.com wrote:
> 
> @levi not yet async, but trying to make CVLayouts smarter and so more performant. what do you think is that best place to add this kind of hook so that ASCV can inform ""facilitator"" about potential cell editing? (insert, delete, update, reload, etc.)
> 
> —
> Reply to this email directly or view it on GitHub.
",levi,levi
1062,2016-03-31 05:19:24,"@Adlai-Holler this is also true for the static library, not just for the framework target. Of course, the name should imply this, but the current exposure of the file is completely intentional :)  the use case you're referencing is certainly valid, but this is pretty clearly not the right way to address that use case.

Feel free to move that method to ASDisplayNode+Beta.h or a similar location intended for APIs in transition or with a limited number of users who are aware of the associated risks. The API surface for controlling the detailed behavior of synchronous concurrency has not been audited, and so the naming and functionality is likely to change in the future, but I suspect this is not a significant issue for your app!
",appleguy,Adlai-Holler
1061,2016-01-14 02:54:05,"@dinhviethoa thanks a lot for the fix!!  I'll try to get this in quickly.  Let me know if you have any other questions about the framework, and I'd love to help.
",appleguy,dinhviethoa
1061,2016-01-14 07:28:09,"@dinhviethoa thanks so much!  I am going to release a 1.9.4.1 very soon (later tonight or end of tomorrow) and it will include this.  The re-run of tests passed, as one would expect.  I will start testing this change in the Pinterest app on my 6S right away just to double check the behavior is as expected.  Let me know if there's anything I can do to make it easier for you guys to adopt the latest version, or if there are any requests / questions about new features and capabilities.
",appleguy,dinhviethoa
1061,2016-01-14 16:15:10,"Thanks for the fix @dinhviethoa and speedy review @appleguy!
",shannonma,appleguy
1061,2016-01-14 16:15:10,"Thanks for the fix @dinhviethoa and speedy review @appleguy!
",shannonma,dinhviethoa
1060,2016-01-14 02:52:46,"@Adlai-Holler thank you for debugging my regression.  I also appreciate you making a minimized change, as this code has actually already been tested (although granted, not with every more recent change).  I'll push out a new dot release shortly, probably later tonight.
",appleguy,Adlai-Holler
1060,2016-01-14 03:03:32,"@appleguy, with this fix will break https://github.com/facebook/AsyncDisplayKit/issues/1011 again :-/ Although I guess it is better than crashing if you don't want to merge https://github.com/facebook/AsyncDisplayKit/pull/1054 for some reason
",knopp,appleguy
1059,2016-01-14 01:14:46,"@aaronschubert0 I am /very/ excited about this - it is something I have been wanting to work on every weekend for like 2 months hahah.  I was pretty sad to realize recently that I can't justify spending time on it in the near future, nor would I have expected anyone else to :-P.  Will review by the end of the weekend, feel free to leave more comments or continue the iteration!
",appleguy,aaronschubert0
1058,2016-01-14 07:56:13,"@Adlai-Holler thanks for supporting the old stuff at runtime!
",appleguy,Adlai-Holler
1055,2016-01-14 03:08:53,"@kanvuduc @vitalybaev thanks for the report, both of you.  This was definitely a bug.  Subtle in cause, big in impact.  I am releasing a hotfix release tonight, but please built your apps against master and email me immediately if you see this or any other issue on latest master (asyncdisplaykit@gmail.com)
",appleguy,vitalybaev
1054,2016-01-11 23:29:28,"@knopp thanks a lot, I can't tell you how awesome it is to have your help here - especially in the production implementation, as I'm hoping to get the Beta working well enough in the next several weeks, but still it will be a riskier direction for any production apps than fixing any holes in the Stable version.
",appleguy,knopp
1054,2016-01-11 23:39:15,"@appleguy, in a way this is also an issue with `ASRangeControllerBeta`, because you store `_allPreviousIndexPaths` between `_updateVisibleNodeIndexPaths` invocations. When adding / removing nodes, the index paths in `_allPreviousIndexPaths` become stale and may point to items no longer existing data controller.
",knopp,appleguy
1054,2016-01-13 02:00:34,"@knopp aha, ok.  Yes I actually ran into that but fixed it by handling nil nodes and skipping over them in the Beta controller, so I'm pretty sure that is a stable / correct behavior for the newer one.  Most important thing now is getting a new release out to fix this.
",appleguy,knopp
1054,2016-01-13 03:11:58,"@appleguy, which commit are you referring to? Also, are you sure that merely handling nil nodes is correct? When adding / removing nodes, the index paths in `_allPreviousIndexPaths` may simply point to wrong nodes, but still be non null. So even if it doesn't crash, it won't behave correctly. 

I think there are two possible solutions - either do what I did in the branch - update `_allPreviousIndexPaths` every time the data controller adds/removes nodes/sections, or simply discard `_allPreviousIndexPaths` when adding/removing and next time `_updateVisibleNodeIndexPaths` is called, iterate over all nodes from data source.
",knopp,appleguy
1054,2016-01-14 01:23:34,"@knopp are you sure it won't behave correctly in the *Beta version?  Very very interested in your thoughts there.  For each index path, we independently check if it currently lies within each range.  I think that should be sufficient, but I have not yet deeply considered this _editing vs _completed nodes issue.  _editingExternalNodes was added after my original refactor of ASDataController and I'm actually pretty concerned about it, and will evaluate if it is possible to re-simplify some of that stuff.

For this diff, do you have any test apps / test cases that you used?  I want to get a fix for this issue out as quickly as possible, and I would believe that this approach addresses conditions that #1060 does not, but I am worried about pushing this out with minimal testing.  Is there a scenario you can describe that does in fact break #1060 (or more importantly, *Beta, because it will become Stable within a couple weeks), but is addressed by this change?
",appleguy,knopp
1054,2016-01-14 02:07:23,"@appleguy, here is project that is broken with current `ASRangeController` but works with this pull request: https://github.com/tomizimobile/ASDKSearchIssue

## 

Regarding `ASRangeControllerBeta`: _Each index path_ (`allIndexPaths`) that you check belongs to union of fetch, display, visible and `_allPreviousIndexPaths`. Now consider following scenario:

We have node`[0,0]` that is visible, and appropriate indexPath `[0,0`] is in `_allPreviousIndexPaths`; Let's call it original node;

Now this happens between invocations of  `_updateVisibleNodeIndexPaths`
1. New node is added to `[0,0]`; This causes original node index path `[0,0]` to become `[0,1]`.(`_allPreviousIndexPaths` doesn't change in any way though and still contains `[0,0]`)
2. Collection view is instantly scrolled in a way where section 0 is no longer in fetch, display or visible;

The original node is still marked as visible, even though it no longer is. That is because the union of fetch, display, visible and `_allPreviousIndexPaths` contains `[0,0]`. But original node is no longer `[0,0]`, it is now `[0,1]` (because another node was added to `[0,0]`. So the original node is missed while iterating `allIndexPaths` and not updated.
",knopp,appleguy
1054,2016-01-23 04:08:23,"@knopp ok, I'll take your advice.  I tend to agree insofar as there is risk in changing code that is this fragile.
",appleguy,knopp
1050,2016-01-10 11:04:58,"@stowy love it, thanks Sam!  It's been a blast working with you.

@lappp9 you might be interested in checking this out.  We could consider using elements from it for the main sample project, or at least keep it in mind as part of the portfolio of sample projects if we want to go in a different direction.  Whatever we do should definitely include orthogonal nested scrollers, like an ASPagerNode containing ASTableNodes, or vertical ASCollectionNode containing a horizontal one in some of its cells (like the photo story side-scroll units in Facebook)
",appleguy,stowy
1050,2016-01-11 18:12:37,"Thanks @appleguy been great working with you too, I hope it can continue. I would be interested in adding the ASPagerNode and also the ascollectionnode because I'd like to know how to use these in my main project. Is ASPagerNode already released?

Also, I noticed that there was a build failure due to the relative position layout spec I created as its not included in the snapshot tests. Is this easily resolved? Or do I need to remove the new spec and rewrite that part of the layout? 
",stowy,appleguy
1050,2016-01-23 20:30:57,"@stowy no rush, but if you could fix the merge conflict, that might even surface what was causing the build issue (since this is mostly a new project, anything that's conflicting with a change in the rest of the framework may be the thing that needs to be removed to fix the build from failing on the new layout spec).  If you could either put up the layout spec in a new PR, or **probably better** just send the implementation files to me so I could do it for you (if my assumption is correct that you're time-pressured right now), that would be awesome!
",appleguy,stowy
1050,2016-01-23 22:55:12,"@appleguy just pushed a squashed commit with the code fixed up - there were some references to the layout spec that i deleted still hanging around. Since it's now only new files then the tests should all pass.  Will create a separate PR with the layout spec, once one or the other are integrated i can revise the sample to use the layout spec again.
",stowy,appleguy
1050,2016-01-24 04:28:59,"@stowy awesome, thanks for pushing this through!
",appleguy,stowy
1048,2016-01-24 23:08:50,"@appleguy, @Adlai-Holler, assuming this gets finished, will it be eventually possible to relayout on background thread?
",knopp,Adlai-Holler
1048,2016-02-19 08:41:09,"@Adlai-Holler I have not finished reviewing this yet, but will get to it tomorrow. I did apply it to the Pinterest app, and surprisingly I'm seeing a glitch in an existing animation that had not existed before -- somehow a behavior change is been generated, even though presumably the original behavior would be gated by any main thread assertions that previously existed.

I am still optimistic about landing this is in the next few days, but let's disable the desirable but problematic test and understand because of any behavior changes.  It is extremely close.
",appleguy,Adlai-Holler
1048,2016-02-19 08:52:09,"@Adlai-Holler is your app been broadly tested running on this? Give it a run through and see if you notice anything similar. We should also try a variety of the example apps.
",appleguy,Adlai-Holler
1048,2016-02-19 20:04:40,"@appleguy Sucks to hear about the animation issue you're seeing – I haven't broadly tested Tripstr with this yet but I'll do so early tomorrow morning and post an update. In the meantime any info about the glitch you're seeing would be great!
",Adlai-Holler,appleguy
1048,2016-02-20 19:56:26,"@appleguy I've found a regression in Tripstr on the affinity branch. Investigating…
",Adlai-Holler,appleguy
1048,2016-02-20 20:52:07,"@appleguy OK we are freshly rebased, much less thread-affine, and a gargantuan bug in `setNeedsLayout` has been resolved. Issues in Tripstr and Kittens are all resolved. Bring on the Pinterest man!
",Adlai-Holler,appleguy
1048,2016-02-21 09:10:21,"Merging this is an epic milestone for the framework. Has literally been years in the making, And it is likely in the top three gifts we have ever accepted from and open source contributor.  Thank you, @Adlai-Holler, for being such a great friend of AsyncDisplayKit!

@knopp yes, we are already doing background layout in Pinterest.   Note however that this is not quite supported out-of-the-box yet, and it will take a few refinement changes next week to enable it. It should be well under 100 lines to do some so.

Be sure to look at usesImplicitHierarchyManagement, as well as the new transition APIs, although they will remain in the +Beta.h header for a while.
",appleguy,knopp
1048,2016-02-21 09:10:21,"Merging this is an epic milestone for the framework. Has literally been years in the making, And it is likely in the top three gifts we have ever accepted from and open source contributor.  Thank you, @Adlai-Holler, for being such a great friend of AsyncDisplayKit!

@knopp yes, we are already doing background layout in Pinterest.   Note however that this is not quite supported out-of-the-box yet, and it will take a few refinement changes next week to enable it. It should be well under 100 lines to do some so.

Be sure to look at usesImplicitHierarchyManagement, as well as the new transition APIs, although they will remain in the +Beta.h header for a while.
",appleguy,Adlai-Holler
1047,2016-01-09 01:37:17,"How can I pod the new code of knopp@c0c98c0 @knopp ? Thank you....
",tuyuan2012,knopp
1047,2016-01-10 11:29:18,"Thank you @knopp...With the knopp@3c162ec, there is not such problem. But how can I pod the new code of the ASRangeController.mm.
",tuyuan2012,knopp
1047,2016-01-11 01:29:44,"I am so sorry @knopp, I have reopened it. 
",tuyuan2012,knopp
1047,2016-01-14 03:57:42,"It does is a positive news! @appleguy thank you...I will try it tonight.
",tuyuan2012,appleguy
1046,2016-01-24 22:40:24,"@nvh @timominous @AttilaTheFun @bsmith11 @nguyenhuy thankfully I am quite confident this is conclusively fixed by #1100.  Please test and report any text bugs you see.  Finally, I believe we have addressed all of the known issues here since the ComponentKit updates were merged in.
",appleguy,nguyenhuy
1046,2016-01-24 22:40:24,"@nvh @timominous @AttilaTheFun @bsmith11 @nguyenhuy thankfully I am quite confident this is conclusively fixed by #1100.  Please test and report any text bugs you see.  Finally, I believe we have addressed all of the known issues here since the ComponentKit updates were merged in.
",appleguy,nvh
1045,2016-01-14 00:40:46,"@appleguy Got it and thank you!
",cooljeffrey,appleguy
1044,2016-01-07 03:12:25,"@knopp yes, optimizing down the UICollectionViewLayout stuff is a big priority, but unfortunately we are limited in part because most folks don't want to adopt an asynchronous class for this.  In an ideal world, we could use something like ASFlowLayoutController (which could be used on a background thread), and then even the ASRangeController updates could be done asynchronously (except for visible range changes, which would have to wait on those updates - still would be a lot better).

The user retains the right to set the tuning parameters to anything, so they could even make the FetchData range 0.  However, it is definitely possible to check whether the range encompasses the other ranges.

The concern is that something needs to check whether each indexPath is in a certain range.  Even with the old implementation, this was pretty heavy weight--since collection layouts can be totally arbitrary, with items not even shown in contiguous order, we need to ask the layout what indexPaths exist inside each range separately so we can tell when a path changes from one to the other.

I think the cause of this is actually in the ASLayoutController classes. Previously, there was a suspicious bit of code (look for updateBounds) that limited the frequency of range updates.  I'm not convinced this is the right approach, but there is probably a balance that can be achieved where performance is /better/ than it was previously and still more frequently updated.

All this said, the class is still Beta considering that I haven't yet run a profiler on the new implementation (something I'm naturally quite passionate about).  It's been one of the most intense work-weeks of my career getting back to the office after the holiday weeks being focused on ASDK, so I'm really bummed that I am not going to have time to make big progress here until each weekend (and some nights).  In total, by late January, I should have this code in better shape.

Thank you for testing it and sharing your detailed findings!
",appleguy,knopp
1044,2016-01-07 03:38:34,"@appleguy, thanks for the reply. I understand completely that you're busy

What I meant by the optimization is that instead of 3 calls to `[_collectionViewLayout layoutAttributesForElementsInRect:]` there would be only one. That should be doable, regardless of underlying layout.

The rect would be fetch bounds. After that you iterate over layout attributes and if the attribute frame is within visible / display range bounds, you add the attribute index path to appropriate set.

To do this however, `ASLayoutController` would need another method, something like `NSDictionary<ASLayoutRangeType, NSSet> indexPathsForScrolling:(ASScrollDirection)scrollDirection`, so that it could provide index path for all range types in one call.

I'll try doing this - I'm wondering if it makes noticeable difference.
",knopp,appleguy
1044,2016-01-07 08:51:31,"@knopp I think each independent range set is mandatory to perform the containsObject: calls which OR each flag in the interfaceState bitfield, right?

Fortunately, I did profile this code running against Pinterest on some ideal older device hardware - iPad mini 1, etc.  I found numerous possible optimizations and will be working on them in the next few days.  If you are able to look at this area, please do, because the single most impactful optimization is actually going to be in the scheduleDisplayForNode: and setInterfaceState: application code paths, with the UICollectionViewLayout ranges being a close third.  This is a very important issue that will definitely need investigation and optimization, so let me know when you reach a point where you are ready to pause investigation and hand off (even if it turns out a win is too hard to implement) 
",appleguy,knopp
1044,2016-01-08 21:30:41,"@knopp Thanks for your work on this - I will check out your diff very soon.

Last night I came up with what I think is a very good idea.  I am going to move the calculation and application of the render and fetch data range to the background.  This will be a bit tricky, because a new main thread update may come in before those have finished, but I have ideas on how to do this.  Visible range will of course still be processed on the main thread to make sure that the call is 100% reliable in meaning ""exactly visible"".

This makes a lot of sense because then -fetchData will be called in the background, which is better for the work that it takes to put together a network request or database query - and also -scheduleNodeForDisplay can be called in the background, reducing work adding stuff to collections and gathering draw parameters for the display pass.  These two operations are inherently designed to be asynchronous and are supposed to be triggered before something is onscreen, so the /exact/ runloop in which they occur is not important.

What do you think about this?  My greatest concern is:
- fetchData would be called in the background, which it wasn't previously.  Some existing user code may not work with this.  That said, it is fairly rare to implement fetchData yourself - ASNetworkImageNode and ASMultiplexImageNode are the most common usages of it and they should be thread safe, and their safety is something I can audit and then ensure.
- the draw parameters method is normally called on the main thread, and ideally this would move it to a background thread.  Same problems apply — users may need to use some kind of locking mechanism to ensure that while this method is being run, any changes on the main thread to their properties are blocked on the lock.  This would be OK because the threading model states the main thread can be blocked on any background thread when needed, and that a background thread must NEVER block on a synchronous dispatch to the main thread.  Safer option would be to call system draw parameter methods like for ASImageNode and ASTextNode in the background, which these are the most common and expensive ones by far anyway, and find a way to continue calling third party implemented ones on the main thread.

Let me know your thoughts!
",appleguy,knopp
1044,2016-01-08 22:06:05,"@knopp indeed you're right about drawParameters so I'm going to have to consider that one more carefully.  Harvesting it on the main thread is still feasible even if we're dispatching the range handling to the background, but it would be best especially if ASTextNode and ASImageNode can have a custom locking setup to allow them to harvest draw parameters in the background because those specific classes are fairly heavy.

I am planning to add another method to the ""...LayoutInspector"" protocol to allow indexPathsForElementsInRect: to be called in the background.  This can be backed by ASFlowLayoutController for UICollectionViewFlowLayout, and for custom layouts, a developer can optionally implement it if they want higher performance.  The idea would be to only include the indexPaths, not an entire UICollectionViewLayoutAttributes, which in addition to being in the background would help a lot.
",appleguy,knopp
1044,2016-01-10 12:26:42,"@appleguy, this is indeed much faster with your latest commits (https://github.com/facebook/AsyncDisplayKit/pull/1053)



I'll play with it some more to see if the behavior is correct, but for now it seems on par (or even better?) than `ASRangeControllerStable`
",knopp,appleguy
1044,2016-01-11 02:45:29,"@appleguy, looks like I did miss something. When things seem too good to be true, they probably are. I ran the previous test with fetch/display range tuning set to 0; This is with correct default values



So it is still slightly worse than `ASRangeControllerStable`
",knopp,appleguy
1044,2016-01-24 01:33:57,"@knopp Thanks for your focus on this - I am far from done optimizing here, but I think we're in a good enough state that performance relative to Stable is not a defining element in when we can switch.

One of the senior engineers at Pinterest will be working on a change next week to allow asynchronous allocation of ASCellNodes.  We'll follow that up with a longer-term project (probably have a diff up by latter half of February) to split the allocation / assembly of the layer and view hierarchy across multiple turns of the runloop (thereby giving time for the runloop to decide to execute touch handlers, timers / displaylink, etc).  Naturally if an element enters the visible range, we'll block on finishing the allocation and assembly of the hierarchy at that point, but this should make a revolutionary difference in the largest remaining main thread impact in most apps.

Additionally, also next week, we're moving the display methods of ASTextNode and ASImageNode to a locking-based instance method (FrameworkPrivate for now) rather than creating the display parameters — this should be a pretty substantial win in the cost of the display range.

So with all three - async ASCellNode, direct instance display for key classes, and runloop amortization for hierarchy materialization - we should be at a radically improved state compared to today's framework on Stable.  Granted, most of these optimizations could be used with the Stable range controller too, but at that point I think holding parity as the bar for adopting a higher degree of correctness wouldn't be the right thing.  Still though, there are more wins to be had in the Beta range controller calculations itself, including the async application of interfaceState to nodes that aren't in the visible range.
",appleguy,knopp
1043,2016-01-10 02:17:46,"Dude this is really cool! @nguyenhuy I know we were talking about having a resources page so maybe that would be a good place to have a link to this?
",lappp9,nguyenhuy
1043,2016-05-11 07:57:38,"@nguyenhuy: Such a cool idea! I'm going to close this issue now that we have it linked to in the reference section on the website. I'll file a task in Ship to add Swift to it. 

cc @lappp9 @RuiAAPeres in case this would be useful to link to in your tutorial series. 
",appleguy,nguyenhuy
1043,2016-05-11 07:57:38,"@nguyenhuy: Such a cool idea! I'm going to close this issue now that we have it linked to in the reference section on the website. I'll file a task in Ship to add Swift to it. 

cc @lappp9 @RuiAAPeres in case this would be useful to link to in your tutorial series. 
",appleguy,lappp9
1036,2016-01-10 04:55:19,"@aaronschubert0 This is really great, thanks for continuing with followups here!  I'm excited to hear that you are doing a sample app (definitely beyond my expectations).  If you happen to be interested in pursuing another ASDK project, let me know and I'll come up with some ideas for you to consider :).  You might also want to work with @lappp9 who is leading our documentation effort, including a large new sample app that will integrate ASMapNode and other components.
",appleguy,aaronschubert0
1036,2016-01-11 18:44:11,"@appleguy Wow! I'm definitely interesting in pursuing another ASDK project. I have just returned from the Apple TV Tech Talk so I'm feeling inspired to provide basic tvOS support for ASDK next (#809). I'd love to hear the ideas that you come up with just now so I can start having a think about them! :)

In terms of working with @lappp9 I'm more than happy to contribute to those efforts concurrently. Would it be better for the project if I spent the time I would have allocated to a sample app, to @lappp9 efforts instead?

In terms of this PR, I will post some follow up diffs shortly!
",aaronschubert0,appleguy
1036,2016-01-17 00:19:34,"@aaronschubert0 Could you send me an email to asyncdisplaykit@gmail.com?  Would love to be in touch with you about your work on the project, to see how I can help, and organize the best intersection between your interests and priorities!
",appleguy,aaronschubert0
1036,2016-01-18 13:53:46,"@appleguy Just sent you an email :D
",aaronschubert0,appleguy
1036,2016-01-23 20:37:36,"Great improvement, thanks @aaronschubert0!  I'm going to get this in now to make the upcoming release so the API is updated.  Some minor refactoring requests here but not urgent, could also file a task so someone else comes back to revisit these comments later.
",appleguy,aaronschubert0
1036,2016-01-23 23:20:05,"Hey @appleguy ! Thanks for having a look at this and providing a thorough review as always. I'm happy to have a look at these changes and post a follow up diff on Monday. I like to finish what I started on this. 
",aaronschubert0,appleguy
1035,2016-01-05 08:03:46,"Thank you @nguyenhuy - that makes sense I suppose. You guys have done an amazing job with this library. And are always quick to help a noobie like me. Thank you so much.
",robmontesinos,nguyenhuy
1034,2016-01-06 06:29:14,"@knopp thanks for understanding this case.  With your explanation, I think you're right - and it is clearly something I neglected to consider.  Fortunately, i think the solution can be implemented in a way that is extremely efficient - scanning over the total set of nodes can be done by accessing the interfaceState ivar directly without even a method call, and in the majority of normal situations any action will be skipped as it will have passed through the other ranges.

This is very important to fix.  Do you have any suggestions for how to easily create a test case, say by modifying a sample app like VerticalWithinHorizontalScrolling or any other one?  I should be able to fix this tomorrow.
",appleguy,knopp
1034,2016-01-06 13:33:36,"@appleguy, thanks, it does seem to report state correctly after the commit.

However now that you store indexPaths between `_updateVisibleNodeIndexPaths` invocations, it suffers from https://github.com/facebook/AsyncDisplayKit/issues/1028 as well. That happens because when adding/removing sections / index paths `_allPreviousIndexPaths` suddenly point to different or non existing nodes. In fact it can be reproduced by same test project https://github.com/facebook/AsyncDisplayKit/issues/1028 can (https://github.com/tomizimobile/ASDKSearchIssue).

The way I see it, there are two ways to fix it.

1) Update `allPreviousIndexPaths` when adding/removing nodes. This is how I fixed https://github.com/facebook/AsyncDisplayKit/issues/1028 in my fork. 
-or-
2) When `_rangeIsValid` is set to `NO`, forget `allPreviousIndexPaths` and fetch all possible index paths and iterate on them

The second one would be easier to implement, but there is currently no way for range controller to fetch  all index paths. I didn't want to modify interfaces so I went with 1) instead here https://github.com/knopp/AsyncDisplayKit/commit/f76fd58840c5706245ba4cc229892fcf8d554303
",knopp,appleguy
1034,2016-01-10 00:30:10,"@appleguy, this will crash when you try inserting / removing nodes. You store indexPaths in `allPreviousIndexPaths` but they become obsolete when items are inserted/removed. https://github.com/knopp/AsyncDisplayKit/commit/f76fd58840c5706245ba4cc229892fcf8d554303 fixes this, but it's not the only option.
",knopp,appleguy
1033,2016-01-06 06:24:47,"@tomizimobile thanks for the report.  There were definitely changes in this code.  It is possible that in certain initialization orders, the ASTextKitTailTruncater doesn't work correctly.  See my commit hash 99fbc97 if you want to experiment with reverting it to test, or look at the changelog for ASTextKitRenderer and ASTextNode.  Most of the changes there since 1.9.3 should be possible to revert without affecting any other dependencies across AsyncDisplayKit.

I will most likely be able to investigate this by the end of the weekend, and might have time tomorrow (otherwise it's Friday night).  Let me know if you happen to learn anything else about it, but you should save your time if work is demanding right now!
",appleguy,tomizimobile
1033,2016-01-06 14:34:45,"@appleguy Thanks for the lead! I took a quick dig into it and I found that things work as expected if `_truncater` is set during initialization of `ASTextKitRenderer`. I'm not too familiar with the code, so I don't know if this has any side effects, but I'd guess it's basically negating any optimizations that were attempted. I'll have to leave reworking that to someone else, but at least for now I've got an interim fix.
",tomizimobile,appleguy
1033,2016-01-24 22:46:32,"@tomizimobile could you please test this on master and let me know if it's fixed?  I think it is resolved but I don't think I have a test case for this.  Might be worth checking the implementation of the unit tests and adding / modifying one to include whatever code you're using to test this, because there are snapshot tests for the truncater already which are passing...but also weren't failing before!
",appleguy,tomizimobile
1033,2016-01-25 14:34:04,"@appleguy I just tested on master, and it's only kind-of working. The text isn't truncated and the truncation doesn't show't, but the area where the truncation token would be responds to touches and highlights. My patch to fix this is simple, but I don't know what side effects it has: [patch.diff.txt](https://github.com/facebook/AsyncDisplayKit/files/103340/patch.diff.txt)
",tomizimobile,appleguy
1032,2016-01-06 09:16:48,"@appleguy Thx for a quick reply.  The example app has email to you.
",singno,appleguy
1031,2016-01-06 06:19:16,"@yxztj this is a good test case.  It might be that you need to set .flexGrow or some other ASLayoutable / ASStackLayoutable property.

Have you tried using ASCenterLayoutSpec?  Let me know what that does for you.  I will debug this by the end of the weekend - hopefully tomorrow, though.
",appleguy,yxztj
1031,2016-01-06 07:36:20,"@appleguy The frame of the text node is correct. The problem is that text is not rendered correctly in the text node, instead it has an unexpected horizontal offset.(Looks like the text inside the node is centered in a larger frame)
We are using text attributes to align the text at center, so if there are multiple lines they are all centered.
![screen shot 2016-01-06 at 3 37 03 pm](https://cloud.githubusercontent.com/assets/3334458/12137427/70e95e2a-b48b-11e5-81ff-67a9ade72b32.png)
",yxztj,appleguy
1031,2016-01-16 04:30:04,"@appleguy Several guys ran into the same issue. Seems more like a bug instead of layout issue?
",yxztj,appleguy
1031,2016-01-26 04:18:35,"@yxztj Thanks again for this.  You should always use ASCenterLayoutSpec or another layout means to center text, whenever that is possible.  If you must mix the text and can't use different text nodes, and still need centering for part of the text, using NSParagraphStyle is acceptable.  The reason to prefer layout is that it can result in the text node being smaller, and a minimal size text node that is simply positioned where you want will use significantly less memory.  Please test master / 1.9.6 as the paragraph style centering should now work reliably.
",appleguy,yxztj
1029,2016-01-04 03:17:59,"Awesome!  Thanks @rahul-malik :)
",appleguy,rahul-malik
1028,2016-01-05 14:26:03,"@singno, @binchensjtu, this commit fixes the crash for me https://github.com/knopp/AsyncDisplayKit/commit/3c162ec03dcef00fe5170f49b4202caf9f66ffd2

Any chance you can give it a try?

@appleguy, the remaining indexes in `_rangeTypeIndexPaths` need to be shifted back after removing. somehow I didn't think about that in the original commit
",knopp,appleguy
1028,2016-01-05 14:44:26,"@knopp I recently updated to master and noticed this issue. Your commit seems to help the issue, but I can still get it to crash.

I've previously made a test project to demonstrate other issues here: https://github.com/tomizimobile/ASDKSearchIssue. I can reproduce the issue by searching ""s"" and then deleting the ""s"".
",tomizimobile,knopp
1028,2016-01-05 17:46:13,"@tomizimobile, thanks. I was able to reproduce the crash. It was caused by index paths in `_rangeTypeIndexPaths` not being updated after section/row insertion (previous patch only dealt with deleting items). Please let me know if you can still get crash after applying https://github.com/knopp/AsyncDisplayKit/commit/c0c98c0cefaa99fa2f56892818567f0e7eb283c8
",knopp,tomizimobile
1028,2016-01-05 18:08:27,"@knopp Thanks for the quick turnaround - everything seems to work fine in your latest commit.
",tomizimobile,knopp
1028,2016-01-08 05:01:00,"I have also met such problem with using version 1.9.4 @singno @appleguy  . @singno Have you solved the problem...
",tuyuan2012,appleguy
1028,2016-01-11 01:41:18,"@knopp, I have have tried such two patches. It work fine. But it still has such  crash with the main source of version 1.9.4. 
",tuyuan2012,knopp
1028,2016-01-11 18:05:26,"@knopp I was able to see crashes happening now and then in my current project related to this. I'm using https://github.com/knopp/AsyncDisplayKit/commit/c0c98c0cefaa99fa2f56892818567f0e7eb283c8. It's not always replicated using the same exact steps, but I found a fairly easy way to make it happen. I've updated my test project (https://github.com/tomizimobile/ASDKSearchIssue) to randomly generate 1000 ""names"", and when typing text/deleting text a few times, a crash will happen (I was just typing ""qqq"" and deleting the text repeatedly until it happened).
",tomizimobile,knopp
1028,2016-01-11 19:25:34,"@tomizimobile, there are two issues. First, there is race in your code. AsyncDisplayKit `tableView.endUpdates` is asynchronous. So you probably shouldn't update predicate until endUpdates finishes. You can use `endUpdatesAnimated` which has a block that will notify you when endUpdates is done.

Same goes for `reloadData`. You should use `reloadDataWithCompletion` and not change predicate while reload data is in progress.

The second issue is much more peculiar. After changing the code so that `applyPredicate` is not called while update is in progress, `[UITableView endUpdates]` sometimes gets stuck for several seconds or longer sorting index paths. That's extremely weird. I initially thought it deadlocks, but it looks like when given enough time it finishes.

One way to debug this would be to swizzle [NSArray sortedArrayUsingSelector:] to see what index paths are being sorted.
",knopp,tomizimobile
1028,2016-01-11 19:38:57,"@knopp Ah, that makes sense. I guess I was envisioning that AsyncDisplayKit would handle interrupting a current reload/update operation if another one was started. In my current project, I do a little more work than this test project to make sure I lock/unlock the data source properly, so that the data isn't changed underneath the current operation. Maybe it's still better to prevent any updates from being started until the previous one completes.

Could the second issue be due to the way you changed the code to not call `applyPredicate` while an update is in progress? I'm sure it's expensive to create all of these cells with each filter operation, and if you're not cancelling/skipping any of the update operations when a new one comes in before the current one is complete, maybe the CPU is just getting backed up.
",tomizimobile,knopp
1028,2016-01-11 19:46:00,"@tomizimobile, that's quite unlikely. Even with `applyPredicate` delayed, you still have finite amount of cells added/removed, which is not larger than your 1000 generated names.  Hanging the main thread like this, it can only mean that either the table view is sorting ridiculous amount of index paths, or the sort selector is really slow.
",knopp,tomizimobile
1028,2016-01-11 20:32:49,"@knopp I'm curious what changes you made to my test project to run into that situation. I just updated my test project again with a quick implementation of delaying applying a predicate until the current operation finishes. I can still cause crashes, and I don't see the several second delay that you mentioned. Am I missing something? Note that my test project is _not_ pointing directly to your commit - I've made that change locally and run `pod update` on it.
",tomizimobile,knopp
1028,2016-01-11 20:52:56,"@tomizimobile, what's the stacktrace for the crash? I'm getting this



However this isn't related to my patches. Does it crash for you in same place?
",knopp,tomizimobile
1028,2016-01-11 21:10:42,"@knopp I've attached a couple unique backtraces. I think your crash might be due to my use of `titleForHeader:`, slightly touched on here: https://github.com/facebook/AsyncDisplayKit/issues/922. I haven't seen that one very often since I stopped using `reloadData` instead of begin/end updates.

I'm testing on an iPhone 6+, but I've gotten it to happen in the simulator too. It seems easier to do on a device.

[backtrace.txt](https://github.com/facebook/AsyncDisplayKit/files/86385/backtrace.txt)
[backtrace2.txt](https://github.com/facebook/AsyncDisplayKit/files/86386/backtrace2.txt)
",tomizimobile,knopp
1028,2016-01-11 23:35:14,"@tomizimobile, sorry, I was actually testing it with 1.9.3 after your latest commit, that's why I wasn't able to reproduce it. Can you still get crash with https://github.com/knopp/AsyncDisplayKit/commit/1223cb28d7b2408cae0d6342d189e0f96dbeba81 ?

If you still get crash, please attach stacktrace here.
",knopp,tomizimobile
1028,2016-01-12 01:03:42,"@knopp I tested it quite a bit and haven't seen it happen with your latest commit - I'll be sure to let you know if it happens again.
",tomizimobile,knopp
1028,2016-01-12 01:07:14,"@tomizimobile, there may be at least one remaining issue, but it is unrelated to my changes in `ASRangeController` (because it also happens with 1.9.3). It's quite hard to reproduce though - if you get stacktrace like this, that's it:


",knopp,tomizimobile
1028,2016-01-14 08:56:22,"@binchensjtu @knopp @tomizimobile could you folks do me a huge favor and test out 1.9.5?  I have officially started writing my more aggressive thrash tester and I'm confident I now understand the way to ensure the new ASRangeControllerBeta is stable in a wide variety of tough operating conditions...

https://github.com/facebook/AsyncDisplayKit/releases/tag/1.9.5

This release is public, but if you see any issues with it (or not!), please shoot me an email at asyncdisplaykit@gmail.com - that way I can be confident in sharing out the URL to the main Paper Engineering Group and a couple other places where users who need the fixes in this release may not yet know about the solution.  Thanks a lot for your help!
",appleguy,knopp
1028,2016-01-14 08:56:22,"@binchensjtu @knopp @tomizimobile could you folks do me a huge favor and test out 1.9.5?  I have officially started writing my more aggressive thrash tester and I'm confident I now understand the way to ensure the new ASRangeControllerBeta is stable in a wide variety of tough operating conditions...

https://github.com/facebook/AsyncDisplayKit/releases/tag/1.9.5

This release is public, but if you see any issues with it (or not!), please shoot me an email at asyncdisplaykit@gmail.com - that way I can be confident in sharing out the URL to the main Paper Engineering Group and a couple other places where users who need the fixes in this release may not yet know about the solution.  Thanks a lot for your help!
",appleguy,tomizimobile
1028,2016-01-15 20:35:18,"@knopp I was having the same original delete issues. I'm now using your commit `1223cb2` and haven't seen any crashes yet. Thanks!
",bsmith11,knopp
1028,2016-01-15 20:39:26,"@appleguy Will do
",bsmith11,appleguy
1025,2016-01-20 19:37:06,"@appleguy Thanks for the feedback! As you mentioned the subnodes should be layer backed, I've also considered checking that no one sets .isLayerBacked = YES on an ASButtonNode itself, as consequence it will not receive any touch events. I wonder though, should this check be in ASControlNode??
",1nput0utput,appleguy
1023,2016-08-15 06:35:44,"@stowy: It looks like you fixed this in the framework with the addition of `ASRelativeLayoutSpec`. Thanks for contributing to AsyncDisplayKit!
",hannahmbanana,stowy
1023,2016-08-15 16:07:15,"@hannahmbanana ha nice, yeah i think i remember running into this. 
",stowy,hannahmbanana
1022,2016-01-02 01:44:05,"thanks for the clarification and the update @appleguy 
",stowy,appleguy
1020,2015-12-31 10:57:49,"@appleguy, I just tried this, works for me! Thanks!
",knopp,appleguy
1019,2015-12-31 20:03:14,"@appleguy it seems like patch #1020 has fixed the bug i was running into.

the case was when `reloadData` was being called on `ASPagerNode`'s `view` after `ASPagerNode` has shown it's first view (which successfully called `fetchData` for `ASCellNode`s in range).

code snippet for the reload:



Thank you so much for your help!!
",frankenthumbs,appleguy
1017,2015-12-30 08:54:28,"In my opinion, I will achieve it by building a custom callout bubble (that style of button selector) as you @appleguy suggest. Because the requirement of my case is very simple....Thank you
",tuyuan2012,appleguy
1013,2015-12-30 04:50:53,"@appleguy Thanks for fast reply in your holiday! I never notice this problem when using basic apple text widget. I test it today. Including CoreText.



output is



I believe some padding in text filed so the width is larger. You're right. The CoreText result is the same as ASTextNode. I didn't deep dive in basic text widgets. Do you know the calculation detail of these basic widgets?

Actually I would like to have stable calculation result while using pure CJK and English-CJK-Mix. Because these two situation are common in non-English-language market. The stable height make UI designer happy :smiley: . What I want is the sizing behavior of NSAttributedString. Do you guys have any idea to workaround this or ""fix"" this?
",binchensjtu,appleguy
1013,2015-12-30 05:22:01,"Thanks @ocrickard 
I believe this problem is some kind of relative to font. Since iOS9, the system default font for Chinese is PingFang. I explicit use `[UIFont fontWithName:@""Helvetica"" size:17.0]`. The calculation of pure CJK and English-CJK-Mix are the same using ASTextNode and CoreText in iOS9.2. Even though it is still different from apple's NSStringDrawing categories.
",binchensjtu,ocrickard
1013,2015-12-30 05:37:25,"Also @appleguy btw while I'm looking at some of this code https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASTextNode.mm#L418 is incorrect. @bcunning and I recently ran into it. It should just be filling the clipping bounds of the CGContext. So:


",ocrickard,appleguy
1013,2015-12-31 09:49:24,"@ocrickard thanks for bringing in the know-how! :-D  I'll fix that rect fill issue.

@binchensjtu Have you tried AsyncDisplayKit's behavior on 1.9.2 as well as the more recent versions?  I'm just curious if any of the changes to the text rendering engine that landed in 1.9.3 would affect this, but it does look like the story may end more sadly...if the bug is ultimately Apple's, it will be harder for us to work around in a way that doesn't cause problems if they fix the bug.  However, I'm very interested in considering any ideas for a workaround, such as comparing sizes to known-correct ones before adding padding.  We'd need to be able to very efficiently detect the cases that need adjustment, though, and I fear that might be impossible.
",appleguy,ocrickard
1013,2016-01-01 06:48:55,"@appleguy Yes. I use ASDK since 1.2.*. I check out back to 1.2.3 and try CJK again. The same behavior as 1.9.3. The TextKit rendering engine has no effect on this issue. 

Yes. Sadly. Now it is hard for us to work around this problem. I event don't know what is known-correct rules of glyphs for CJK. Maybe I had to just consider the work around for my case. Thanks for all of you guys!
",binchensjtu,appleguy
1013,2017-01-13 02:01:21,"@appleguy @garrettmoon @hannahmbanana #2894 could be related, and I found a quick fix for that.",yxztj,garrettmoon
1013,2017-01-13 02:01:21,"@appleguy @garrettmoon @hannahmbanana #2894 could be related, and I found a quick fix for that.",yxztj,appleguy
1013,2017-02-16 19:04:19,@yxztj Thank you so much!,garrettmoon,yxztj
1012,2015-12-29 07:04:07,"@NatashaTheRobot hey, thank you!  I've seen you on twitter (before earlier today of course, too) - great to have you here :).  I'm happy to say that another community member, @lappp9, is starting a huge push on updating the website and the documentation for 2.0 (note the 1.9.x releases contain most of the features that 2.0 will, but has not GM'd due to the lack of documentation).

Our strategy regarding Swift, briefly, is as follows:
- We're now actively listening to the Swift community for feedback on the API design and what improvements can be made; some of our top contributors are are using Swift in their day jobs.
- The new, redesigned example app that the 2.0 programming guide will walk through will be written with both Objective-C and Swift (although, the initial version will start with Objective-C).
- The site will include an inline switcher for each code snippet to toggle between the languages.
- In 6-12 months, we'll likely be Swift-first for example apps and documentation changes, with back-ports to Objective-C continuing for a couple years.  Usage within the framework will probably start around this time, especially if 3.0 means the runtime won't need to be bundled in each app.

Considering the extreme lack of documentation for rather powerful APIs like ASLayoutSpec, don't hesitate to reach out with any feedback or questions — I'd sincerely enjoy talking to you about it!  I can give you my iMessage number if you email asyncdisplaykit@gmail.com.
",appleguy,NatashaTheRobot
1011,2015-12-29 03:17:48,"@knopp Good bug - thank you for reporting this.

I am actually planning to rewrite ASRangeController soon.  If you look in ASDisplayNode+Beta.h, you'll see the option that Pinterest is currently using internally, which basically means that ASRangeHandler (especially ASRangeHandlerRender) can go away and be driven entirely by ASInterfaceState.  This will also mean that the range update method can be made super efficient, and do one pass over the nodes to determine every range that each node should be in, and then just call setInterfaceState: on the node with the full bitfield.  Then the node will automatically perform only the state transitions necessary, and not even recursively call its subnodes to update if there is no change in the ASInterfaceState.  It will actually be more efficient than the current system even though setInterfaceState: will be called relatively frequently, and will eliminate almost all of the state that ASRangeController currently needs to track and keep in sync with ASDataController.  If you have any interest in attempting this change (to be enabled only when the new render ahead system is enabled), feel free to give it a shot - just let me know if so, because in that case I would spend my effort on another part of the many areas of the framework I want to upgrade in the next few weeks :).

The other key areas I'm working on involve the reloading options for table / collection which will enable super high efficiency synchronous loading to ensure the minimal amount of main thread blocking occurs to get the visible range populated, performing concurrent measurement and display on just enough cells to fill that visible area (even if the visible area is scrolled down many screens from the top).  This should allow you to consolidate the two calls to be something more like -loadDataToEnsureDisplayInRect:(CGRect) scrollToVisible:(BOOL).

That said, I will investigate this tonight or tomorrow to see if there is a targeted fix that I can land in time for 1.9.4.  Just to confirm, what commit / version are you testing on?  Please make sure to try out master just to be certain, because there have been a variety of changes / improvements.

Please continue to file any issues for either feature requests or suboptimal behaviors you've observed from using the framework - I can tell you are fairly experienced and would very highly value your input on a variety of topics.
",appleguy,knopp
1011,2015-12-30 05:04:01,"@knopp I was unclear - my apologies.  The mode I mentioned does not currently impact ASRangeController's implementation, but it will in the next week or so.  With that mode on, it is no longer necessary to have the complex, stateful implementation seen in ASRangeHandlerRender.  Because of the removal of the need to maintain the nodes in the workingWindow when they are not visible (and thus treat visibility different than offscreen-but-should-display), it will be possible to dramatically simplify and optimize the implementation of ASRangeController to set the correct ASInterfaceState on every node on every pass.  I believe this will either directly resolve, or much more readily enable resolving the issue you've pointed out.

So far I have not been able to reproduce.  Using my latest PR (it should be landed by the time you read this, #1014) I added this code to the VerticalWithinHorizontalScrolling example to be triggered after tapping the Redo button in the navigation bar:

  [_pagerNode.view reloadDataWithCompletion:^{
    [_pagerNode.view scrollToItemAtIndexPath:[NSIndexPath indexPathForItem:5 inSection:0]
                           atScrollPosition:UICollectionViewScrollPositionCenteredVertically animated:NO];
  }];

Once I have a reproduction case, I will make it a top priority to ensure this is fixed.  Sadly I may need to release 1.9.4 without this, because 1.9.3 has a few bugs that are more serious than this (at least, judging by the fact that several people have reported them, whereas this still-extremely-serious bug looks to be affecting fewer people as it is the first report).  I think this is the most urgent bug in the framework right now, so you have my commitment to work through a solution - both short-term (hopefully an elegant workaround), and long-term (structural / architectural improvements that also eliminate the conditions that made this bug possible).

Let me know if you have any tips on a change I can make to any one of the example projects to trigger this!
",appleguy,knopp
1011,2015-12-30 07:22:19,"@knopp I'm going to hold the release one final day - in part so I can conduct additional testing tomorrow, but primarily for this issue (it's the last one in the 1.9.4 milestone).  If you are able to describe a code change (or upload a small patch file) to apply to one of the ASDK example apps, which I think should be possible to use as a base to trigger what you've found, that would be tremendously helpful to enable the solution making 1.9.4 (I have a long drive to family's house tomorrow so it won't be a full day for me).

That said, don't worry if you're not available or can't seem to get it to reproduce — we can let 1.9.4 go with this issue, and I will immediately proceed to work on the more structural improvements.  Note however that there may not be another release until a 2.0 Beta in mid-late January which could contain some other risky changes such as the +Beta.h mode I referenced.  I will roll a 1.9.5 if any other bugs are found with 1.9.4 that warrant a special release on the stable 1.9.x branch.  2.0 is in a holding pattern until documentation is ready, but that work has been started recently, so I expect 2.0 to go GM in late January or February.
",appleguy,knopp
1011,2015-12-30 12:03:04,"@appleguy, this doesn't seem easily reproducible. Possible reason is that I have quite a lot of items, so the collection view is loaded progressively. But I think this is what's happening:
1. `reloadDataWithCompletion` is called
2. First collection view items are created, displayed and set to visible (`[ASRangeController _updateVisibleNodeIndexPath]`)
3. `ASDataController` adds more items, causing `_rangeIsValid` set to `NO` in `ASRangeController` (in `[ASRangeController dataController:didInsertNodes:atIndexPaths:withAnimationOptions:]`
4. `reloadDataWithCompletion` finally calls the completion block, which triggers scrolling

now because of (3), `_rangeIsValid` is set to `NO`, and `ASRangeController _updateVisibleNodeIndexPaths` will not do anything about `removedIndexPaths`, due to the line below



The important part here is that some items already need to be visible, while data controller is adding more items.
",knopp,appleguy
1011,2015-12-31 00:00:35,"@knopp ok, that's very helpful context.  Questions then:
- What index paths are you scrolling to?  The batch size is roughly 10 items, so I assume you are scrolling to an index path greater than 10 at a minimum?
- I can take a pass at fixing this, but without a way to reproduce and confirm the fix, I wouldn't be comfortable including it in 1.9.4 - since any change to this code is fairly risky, I want to be certain that it does indeed address a known issue and then would feel the risk is appropriate.

I'm writing up the release notes now for 1.9.4 and want to start the ASRangeController rewrite tonight (for a later release).  Let me know if you happen across a way to reproduce, even if it doesn't happen 100% of the time, say by making a test project have 1000 items and scrolling to item 900 or something.
",appleguy,knopp
1011,2015-12-31 00:55:36,"@appleguy, it is probably around a hundred, so it is done in multiple batches. 

I completely agree that this shouldn't go into 1.9.4 without proper test case. The behavior is very consistent in my project, but it is not easily extractable. Is there any point in actually trying to build a test case for this if you're going to rewrite ASRangeController anyway? I'm currently a bit behind schedule with the project, however if there are similar issues after the rewrite I'll do my best to provide a test case to reproduce this. Knowing which nodes exactly are visible is very important for our usecase, since visible nodes trigger/schedule expensive server side processing (and when nodes get hidden the processing is stopped/cancelled)
",knopp,appleguy
1011,2015-12-31 01:45:02,"@knopp ok, thanks for your input - I really appreciate it!  Knowing that the visibility notifications are key for your use case is very motivating for me to get this working for you, so thanks for sharing those details about your project :).  I am quite excited to ensure that the ASDK architecture makes it easier for your app + backend implementation to have sophisticated, optimized runtime behaviors.

Regarding the test case, I do think it would be quite valuable to have a reproduction because that code would then belong in the unit test suite for ASRangeController and/or components based on it (helping validate the new implementation too).

Do you have a workaround for this?  If so, don't concern yourself with the test case in the near term, and good luck focusing on your key milestones!  After a couple weeks, if you get time to put together a test that fails for 1.9.4 but (hopefully passes) for current master at that time, that would be a really fantastic contribution.
",appleguy,knopp
1011,2015-12-31 02:18:03,"@appleguy, sorry, should have mentioned this - these two commits from my fork fix the issue for me, so I'm good for now (at least until you rewrite `ASRangeController`)
https://github.com/knopp/AsyncDisplayKit/commit/0e2a45eb4dda3bfd80799d2792447deef20f3131
https://github.com/knopp/AsyncDisplayKit/commit/79640f2d5a267d008fb5df4963f87d260705e544 
",knopp,appleguy
1010,2015-12-29 03:19:32,"@tomizimobile thanks for the report!  I will fix this tomorrow morning before launching 1.9.4.  What delegate methods are not called?  Do the ASPagerNodeDataSource methods all get called, but none of the Delegate methods (at all?)  The proxy setup is new to ASPagerNode, so it may well be a simple error and should be easy to fix.
",appleguy,tomizimobile
1010,2015-12-29 03:27:24,"@appleguy Seems like all of the `ASPagerNodeDataSource` methods are called. So far i've tried `-scrollViewDidScroll:`, `-collectionView:willDisplayNodeForItemAtIndexPath:`, and `-collectionView:didSelectItemAtIndexPath`, and none of them were called. I'd guess that there's just an error in the proxy setup.
",tomizimobile,appleguy
1010,2015-12-30 05:19:29,"@tomizimobile Thanks again for the report - this saved the issue from going out in 1.9.4!  It is now fixed in master as of #1014.  It was indeed a simple one-line mistake in the -didLoad method, although that patch includes other cleanup refactoring.
",appleguy,tomizimobile
1009,2015-12-29 03:08:41,"Woah, thanks @Adlai-Holler!!  Even just getting this started is **huge**.  I have a handful of comparably risky / ambitious changes planned for right after 1.9.4 is cut (any day now, for reals :) ), and will keep running Pinterest internal against the latest to get us fairly substantial test coverage on these things.  @lappp9 has the programming guide / 2.0 documentation underway, and we plan to add more tests soon too.

We should catch up soon about one of the most important use cases in the framework: ASDataController / ASRangeController and its possible successors / improvements.  Most relevant to this, I want to remove the current checks for isNodeLoaded doing main thread measurement, and I also want things like reloadSection to first process the new state and then apply the updates rather than deleting the existing one initially and then adding the replacement when it's done.

Somewhat more tangentially, there's also my upcoming change to support a ""cellNodeBlock"" so that the block can capture call-time data state and yet be used to allocate the cell node on a background thread, along with the allocation range / measurement range / virtualization stuff we discussed (in service of the need to measure only slightly more than is required to populate a given rect, allowing more liberal use of synchronously preparing those areas).

But lastly and also relevant to the idea of a transactional system we might expand here, there is the increasingly-essential (for my use cases at least) concept of transparent ""runloop amortization"", where the materialization of views and layers is spread out over multiple runloop turns to allow the system opportunities to service display link timers (physics-based animations) or gestures or network callbacks.  This is tricky because it will also involve applying the properties to those views and we can't allow the sub-hierarchy onscreen until it is fully materialized, even if a later call does force it to be.  It will be most useful when the ASRangeController has a cell node entering the display range, or a view controller wants to pre-load its contents, but once the cell is visible or the controller is being presented it is too late to use this technique (unlike synchronous concurrency, which blocks main on a concurrent background operation).  So we will need the ability to force-finish in one runloop an operation that is in the process of being amortized across multiple loops, and that's where waiting on a transaction type setup (calling ""run"" or ""finish"" on the transaction, perhaps, if the contents of that transaction is responsible for poking the view / layer and applying pending state).

Rambling complete, I'm now leaving the Chipotle in Central California (Grapevine, CA) to continue the drive home to SoCal :).  Hope to see you again soon - I'll be online and working for the next week if you want to talk by FaceTime Audio about this.  Thanks for the delightful surprise and ideas to think about on the drive!
",appleguy,Adlai-Holler
1009,2016-01-04 18:39:50,"Hey @appleguy just wanted to let you know I haven't forgotten or bailed on this! I think about it on the daily but I haven't yet set aside the time to bang it out. I'll execute on it before Friday.

Most of my musing has been about run loop amortization. What do your use cases look like? Are you thinking of We could make a generalized controller that amortizes an array of main-queue-only blocks by, say, running max 5 blocks per turn. The downside here is that the controller has no idea how much work each block contains, so 5 blocks could mean 1000 units of work or 10. Would it be worthwhile to let the client provide an optional `cost` param? Probably not. It's a small downside though, since it's a private class so we'll be able to tune performance for our use cases anyway.

Or we could make a specialized controller, that uses knowledge about the work itself to decide how to divide the work up. I don't really like this idea but I want to throw it out. This would basically merge the run-loop amortization code with the property buffering code, and decide how to break up the work based on ""which nodes' properties to push per turn of the run loop.""

As for transactionalizing and flushing this stuff if we run out of time, am I understanding it right that the transaction would contain `[node flushPendingState]` i.e we may actually apply changes that were made outside of our transaction ""block""? It seems like we have to accept this, because the alternative is storing separate pending states for separate transactions :scream:.

Want to talk data controller & range controller this week? I could do Wednesday or Friday morning/afternoon.
",Adlai-Holler,appleguy
1008,2015-12-30 07:23:07,"@yury isn't hitTest implemented in ASDisplayNode, just like pointInside?  Thanks for the brace fix!
",appleguy,yury
1008,2015-12-30 07:26:57,"@yury I can't believe I didn't mention / notice this before, but - even more important than the hitTest: version, which is very helpful to be able to use something like hitTestSlop or other uses for hitTest: going to a specific subview, this same pointInside implementation should be added to the equivalent place in ASCollectionView!
",appleguy,yury
1006,2015-12-28 01:32:16,"Thanks @appleguy  
Your improvement really nice!
",PonyCui,appleguy
995,2015-12-25 22:54:34,"Awesome, thanks @appleguy for taking this over. It really makes working with the framework in Swift easier!
",Adlai-Holler,appleguy
988,2015-12-24 18:37:17,"@appleguy Awesome find! I agree, let's just replace the region property with a `MKMapSnapshotOptions` 'options' property. Will be straightforward to implement that. Main thing is to apply it to the MKMapView when that is activated. Easy win for the new year.
",aaronschubert0,appleguy
986,2015-12-24 21:02:14,"@levi @appleguy 

I think I found what was causing the issue. I was using reloadSections(), Now I use reloadData() and it works. 

I don't know if reloadSections() should work too? ( using deleteSections() and insertSections() works however)

Merry Xmas to you all!
",wieseljonas,levi
986,2015-12-24 21:02:14,"@levi @appleguy 

I think I found what was causing the issue. I was using reloadSections(), Now I use reloadData() and it works. 

I don't know if reloadSections() should work too? ( using deleteSections() and insertSections() works however)

Merry Xmas to you all!
",wieseljonas,appleguy
986,2015-12-24 21:28:35,"@appleguy I'm not sure. I think the easiest is for me try a do a sample project that reproduces the issue and share it with you guys. If that makes sense. I'll try and do it tomorrow.
",wieseljonas,appleguy
986,2015-12-28 21:02:50,"Fixed it for me! However it would be great to also be able to get the supplementaryNode in order to update it!

Thank you @appleguy 
",wieseljonas,appleguy
985,2015-12-24 07:01:47,"@levi very cool!!  We can't use the name delegate, because many apps have this property in their subclasses.

/Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKit/ASEditableTextNode.mm:208:13: error: type of property 'delegate' ('id<ASEditableTextNodeDelegate,ASDisplayNodeDelegate>') does not match type of instance variable '_delegate' ('__weak id<ASEditableTextNodeDelegate>')
@synthesize delegate = _delegate;

This is an interesting idea, and indeed one I almost added a couple days ago when desiring to monitor the new interfaceStateDidChange:fromState: and visibilityDidChange: notifications from ASViewController's base class.  I haven't reviewed fully yet and am not yet sure what the name should be, but would be curious to hear ideas!  We should probably think ahead to as many plausible usages of the delegate as possible to see if there is a name that can encompass them which adds at least one more word alongside delegate in the property name.
",appleguy,levi
985,2015-12-24 20:22:14,"@levi one concern - if this delegate is public, which it probably should be, then ASViewController can't necessarily take it over.  If it did, it would fail if a user were to set the delegate of the node to their object later...
",appleguy,levi
985,2015-12-24 21:49:25,"Can't the same argument be made about CALayer#delegate?

> On Dec 24, 2015, at 17:22, appleguy notifications@github.com wrote:
> 
> @levi one concern - if this delegate is public, which it probably should be, then ASViewController can't necessarily take it over. If it did, it would fail if a user were to set the delegate of the node to their object later...
> 
> —
> Reply to this email directly or view it on GitHub.
",levi,levi
985,2015-12-25 05:50:15,"@levi Definitely interested to look to Apple APIs for comparison / precedent.  CALayer's delegate is set to UIView when attached to a view, but this is prominently documented (in UIView) - and more importantly, the CALayer delegate has essentially no functionality that can't be handled in UIView itself (https://developer.apple.com/library/ios/documentation/QuartzCore/Reference/CALayerDelegate_protocol/index.html#//apple_ref/doc/uid/TP40012871)  Also, UIView and CALayer are very similar objects conceptually, so subclassing one and doing the operations there is not as strange or unexpected as requiring the implementation be in a different type of object (ASViewController vs ASDisplayNode).

This consideration simple underscores the expected value of this delegate - not only the initial set of features, but in the future it could become quite an essential construct!  The solution is probably just an ASDelegateProxy owned by ASViewController, in addition to a name besides ""delegate"".
",appleguy,levi
985,2016-01-16 22:17:41,"OK, I just pushed some updates that bring this patch up to speed with the feedback and also provides unit test coverage for the new functionally. I'm having some issues running the entire test suite when it comes to the snapshot tests. They seem to be looking for an image asset to compare to, but unable to find one. I haven't looked too closely into the issue, but hoping this is something others have encountered (cc/ @appleguy, @nguyenhuy).
",levi,appleguy
985,2016-01-17 19:44:01,"@nguyenhuy, hrm it looks like I'm running them in 64bit locally. Are you able to pull the patch down on your end to confirm?
",levi,nguyenhuy
985,2016-01-26 20:34:31,"Thanks for the feedback, @rcancro. Are you specifically asking for a naming change? As far as the existing functionality stands, subclasses of ASViewController will be able to override these methods to be used in the way that you're describing.
",levi,rcancro
983,2016-01-18 13:54:58,"@appleguy Will take a look :) 
",aaronschubert0,appleguy
982,2015-12-23 23:12:53,"@tomizimobile thanks for the report!  What is the full backtrace?
",appleguy,tomizimobile
982,2015-12-23 23:40:04,"@tomizimobile does this happen every time?  I have the test project running, and haven't been able to make it occur in the simulator.  Does it happen on device?

Note that your project was linking 1.9.3, and I am running against master / 1.9.4, so it is conceivable it is fixed in master - but I am far from confident of that at this point.

This PR touches related areas, and though not ready to land, could be modified to fix this issue being reported if I can reproduce it.  I would like to fix this before launching 1.9.4 if you're able to get back to me with reproduction steps, otherwise I will launch the release tonight and fix this in master afterwards.

https://github.com/facebook/AsyncDisplayKit/pull/960
",appleguy,tomizimobile
982,2015-12-24 00:23:18,"@appleguy Here's a backtrace: [backtrace.txt](https://github.com/facebook/AsyncDisplayKit/files/71340/backtrace.txt)

I just updated to master in case there was a fix, and it's still occurring for me every time. I'm testing on both an iPhone 6 and an iPhone 6+. I didn't run it in the simulator until just now, but it doesn't seem to happen in the simulator, probably due to the processor differences.
",tomizimobile,appleguy
982,2015-12-24 00:40:46,"@tomizimobile ok, thanks!!  I have also tried it on an iPod 5G and it still doesn't occur, but at least I'm using it as an optimization experiment (just pushed a commit with a few small optimizations lol).  I'll try it on my 6S and I do have a 6+ with me at my family's house here, so will try that if needed.
",appleguy,tomizimobile
982,2015-12-24 00:46:40,"Excellent, I was able to reproduce on the 6S.  Thanks so much for making the test app - your reports and general assistance has been of great value to the project, @tomizimobile!
",appleguy,tomizimobile
982,2015-12-24 08:07:40,"@tomizimobile this should be fully resolved in master.  Please do test it and re-open this issue right away if you encounter any problems.  Thanks a lot for your test app modifications - I actually integrated and landed them behind a #define for future testing / verification.  In the next two months the community will be investing in a new setup for example apps, putting some apps like this one into more of a ""testing / development"" state rather than being in a directory that implies they are reference code.
",appleguy,tomizimobile
982,2015-12-24 16:13:57,"@appleguy No problem, glad to help. Master seems to fix the test project, although it needs to have `#import ""AppDelegate.h""` at the top of ""ViewController.m"" so it can see `SIMULATE_WEB_RESPONSE`.

I haven't been able to test this against my current project yet, as I realized the ""CollectionRefactoring"" branch made some changes that are causing my app to crash on a `-[ASCollectionView reloadData]` call. The backtrace wasn't helping me though - just gives me output like this: 
`* thread #1: tid = 0x1fea4c, 0x0000000125faaf40, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=2, address=0x125faaf40)`
 `* frame #0: 0x0000000125faaf40`
`...`
I don't really have time to look into it further right now, but when I get a chance I'll see what I can do.
",tomizimobile,appleguy
982,2015-12-28 15:05:43,"@appleguy After updating to master this morning, everything seems ok for me in my current project. 
",tomizimobile,appleguy
981,2016-03-31 10:15:39,"@appleguy okay thanks, I ended up not needing to use it. Will ask specific questions instead :D
",fatuhoku,appleguy
979,2016-03-12 00:10:34,"Thanks @appleguy — when I finally get the chance to hop onto this again I'm sure I'll get have more to say. ASDK is exploratory work for us and doesn't get a lot of attention right now :P
",fatuhoku,appleguy
978,2015-12-23 20:55:54,"@aaronschubert0 awesome, thanks for the ultra fast turnaround!  This component has already attracted a variety of users, and in January it will be put into the new Pinterest too :).
",appleguy,aaronschubert0
978,2015-12-24 04:32:02,"@aaronschubert0 I didn't realize until now all the options that MKMapSnapshotOptions provides - wow!  Later we should consider adding some more passthroughs.  I'm pretty sure we can treat that object as thread safe, so it may actually be ideal to just change the region property into the MKMapSnapshotOptions object (I had not realized this is how the snapshotter itself gets the region until converting some Pinterest code to use ASMapNode, and then noticed it would be an even more convenient conversion if it just took the same object).
",appleguy,aaronschubert0
978,2015-12-24 18:34:54,"@appleguy Wow!! That's super awesome. Can't wait for that update! Good start to the New Year.
",aaronschubert0,appleguy
975,2015-12-23 05:20:27,"@knopp Interesting.  This method, as implemented, is intended to be the heaviest hammer available to reload anything that could have changed - including the layout of the cells, although it will be cached if it hasn't changed.  What's your use case, and is it possible that a new method like ""reload visible"" or something else would satisfy your use case?  Is it not feasible for you to add / remove items directly?
",appleguy,knopp
975,2016-01-17 00:29:48,"@knopp Thanks for clarifying that you'd tried that fix.  Have you been running with it for a while, and it seems solid?  I can submit the PR if so, or feel free to do so as well.

Indeed my original reply was unclear, written hastily.  Sorry about that!
",appleguy,knopp
975,2016-01-17 18:27:30,"@appleguy, done https://github.com/facebook/AsyncDisplayKit/pull/1072
",knopp,appleguy
974,2015-12-23 04:39:42,"@knopp This is fixed in master / 1.9.4.  Sorry I haven't pushed out the release yet!  Can you please test your app against master and a) confirm this issue is completely fixed in your use case, and b) let me know if you see any other problems?

Note that no fix will be able to avoid this cost IF you execute manual layout, and set the text to a size different than the calculatedLayout's size.  If you are using -layoutSpecThatFits: and not also overriding -layout, then this should never be able to happen.
",appleguy,knopp
973,2015-12-23 12:28:35,"@nguyenhuy oh cool, thanks for the intro!
@levi okay, I'll take a look soon and will let you know what I find.
",fatuhoku,nguyenhuy
973,2015-12-23 12:28:35,"@nguyenhuy oh cool, thanks for the intro!
@levi okay, I'll take a look soon and will let you know what I find.
",fatuhoku,levi
973,2015-12-23 20:17:09,"Okay @levi, I think this is best marked as a duplicate of #954 — I need the cells to size themselves, without the need for an external mechanism. The inspector sorts of ends up having to do size calculations outside of the `ASLayout` and `ASLayoutSpec` mechanism.  This causes duplication of layout logic and is no better than UIKit currently.

The real question is, is there a way to do this without necessarily re-implementing what UIKit introduced in the form of `estimatedItemSize`?
",fatuhoku,levi
973,2016-01-11 15:19:43,"@levi The `CustomCollectionView` example doesn't actually demonstrate self-sizing, because:
1. In `MosaicCollectionViewLayout`, it requires relies on a delegate object to get the image's original size, so that the height can be calculated from the fixed cell width and aspect ratio.
2. `ImageCellNode` assumes that the only contents of the cell is an `ImageNode` and nothing else. If we introduce, say, a `ASStackLayoutSpec` that stacks an image on top of text in there and run the example, MosaicCollectionViewLayout actually knows nothing about the newly added `ASTextNode`, and therefore fails to lay things out properly.

I expect that ASDK should use the cell's layout specs to drive the `UICollectionViewLayout`.  This simply isn't done at the moment, and I think it still occurs on the main thread. Am I right?

Basically I'm looking to create more or less the behaviour of the infinite scrolling home page of Pinterest — each item has an image (with its own aspect ratio), its own description and caption. These nodes are stacked together to give the height of the cell.
",fatuhoku,levi
972,2015-12-22 15:46:13,"@nguyenhuy that's a shame :/

The question I have is how you can make dynamically sized table nodes.
The following image is how I would like the cells to be rendered

![](http://i.imgur.com/BV1icGY.png?1)

**Code**



And the result which from the above code seems not to work.
Do you have any idea where I go wrong?

As you can see in the result the cells are fixed sizes, and thus the first cell is not even displaying ""This is a short text""
**Result:**

![](http://i.imgur.com/b9r59Ek.png)
",chrene,nguyenhuy
972,2015-12-22 16:04:42,"@nguyenhuy hmm I don't see how that resolves the problem? Just tried with this code and it gives the exact same output. It seems like the cells doesn't know that it should resize it self or something:



Do I explicitly need to tell the nodes that they are dynamic in their height or something?
",chrene,nguyenhuy
972,2016-03-24 11:18:00,"**I took the initiative to create a Slack group over here**:

https://asyncdisplaykit.slack.com

@nguyenhuy @appleguy @chrene  please feel free to join and chat about ASDK and add any relevant people! I feel like ASDK is really missing its support network.
",fatuhoku,nguyenhuy
972,2016-03-29 12:28:27,"Gladly :) just a few moments... Your e-mail please @nguyenhuy.

It's a little bit of work to set up an automatic invite system like 
https://github.com/rauchg/slackin. Might need to pay for hosting separately as well.  That way it'd be open to all.
",fatuhoku,nguyenhuy
972,2016-04-28 18:43:22,"@bimawa IRC isn't great with sharing images, videos, code snippets, etc that the ASDK community loves to use :)

If you email me at asyncdisplaykit@gmail.com, we'll get you on Slack within a few hours!
",appleguy,bimawa
972,2016-04-29 03:09:18,"@appleguy Hi Scott! Yea i'm in slack, ty for that. Just my Slack have 10 team groups, and its hard load my mac. I try move to IRC for all messagers with bots and BitlBee support.  And images its not trouble for  irc. I'm just open it in my browse in one click. Maybe its possible to connect IRC channel to our Slack? Just for ugly guys like me :)
",bimawa,appleguy
971,2015-12-23 07:41:02,"@aaronschubert0 could you look at this at your earliest convenience?  I'd decided to sit on 1.9.4 for a couple days for stability testing with Pinterest and other things, and was thinking about launching it tonight because a few reports have come in about bugs that are actually fixed.  If there's any chance you can fix this tomorrow, I'd love to launch 1.9.4 shortly thereafter.  If you won't have a chance (family or away from computer), don't feel bad - just let me know and I will work on it tomorrow.

@tomizimobile thanks for doing enough debugging to describe the issue - we'll get it patched up for you quickly!
",appleguy,tomizimobile
971,2015-12-23 09:16:04,"Hey @appleguy will take a look at this today and get a fix out! Thanks @tomizimobile for reporting this, will message back after I've investigated.
",aaronschubert0,appleguy
971,2015-12-23 09:16:04,"Hey @appleguy will take a look at this today and get a fix out! Thanks @tomizimobile for reporting this, will message back after I've investigated.
",aaronschubert0,tomizimobile
971,2015-12-23 10:24:16,"@tomizimobile Just PR'd a fix. ASMapNode now cancels any previous snapshot request and will always displays the latest requested snapshot.
",aaronschubert0,tomizimobile
971,2015-12-23 20:56:59,"@tomizimobile thanks for reporting this.  ASMapNode was kinda half-finished but is now in a much better state.  1.9.4 is the first release it's ready for action, so that's a learning experience for me that I shouldn't have announced it in 1.9.3.  Please try out master when you get a chance, or you'll see 1.9.4 in the next couple days.
",appleguy,tomizimobile
971,2015-12-23 21:03:36,"@appleguy @aaronschubert0 Looks great! Thanks for the quick turnaround
",tomizimobile,aaronschubert0
971,2015-12-23 21:03:36,"@appleguy @aaronschubert0 Looks great! Thanks for the quick turnaround
",tomizimobile,appleguy
970,2016-01-17 18:19:14,"Sorry for not responding for a while. @appleguy I'll reopen this if I run into it again.
",fatuhoku,appleguy
969,2015-12-23 16:34:16,"@yury Where did you find the documentation for LayoutSpec? I don't understand it.
",fatuhoku,yury
969,2015-12-23 17:13:41,"@yury Thanks, how did you find that link?!?!
",fatuhoku,yury
969,2015-12-23 17:46:37,"I'd love to see something like this too, @yury. @appleguy, I know you've mentioned this in the past. Let's start the discussion on making this API a reality.
",levi,yury
969,2015-12-23 23:33:16,"@fatuhoku @yury This presentation of mine is not very good, but it does include essential information about the layout patterns.  @fatuhoku I think it would be particularly useful to you as it does compare those patterns (skip to 11 minutes).  This video is also linked at the very bottom (tiny font) on asyncdisplaykit.org:

https://www.youtube.com/watch?v=RY_X7l1g79Q

@yury there is not currently a layoutSpec method on ASViewController - this will be added soon, but in the meantime you must subclass the node that you provide to ASVC.  This is the same as how UIViewController started out, where for 4 or 5 years the iOS API did not provide -viewDidLayoutSubviews and it wasn't possible to implement layout in a view controller without doing it in an usual place like -viewWillAppear:.
",appleguy,yury
969,2015-12-24 21:48:21,"@appleguy thank you!
",yury,appleguy
969,2016-04-27 08:50:15,"@yury @fatuhoku: check out the (work-in-progress) website documentation on ASLayout - http://asyncdisplaykit.org/docs/automatic-layout-basics.html
",hannahmbanana,yury
969,2016-04-27 08:58:00,"@yury @fatuhoku - You can now do `self.node.layoutSpecBlock` which is handy for various use cases. We are actively working on designing an API that is more directly integrated with ASViewController so that it is discoverable and allows extended layout on top of existing `layoutSpecThatFits:` implementations that the node may also specify. 

For example, a node subclass may have a `layoutSpecThatFits:`, the node may have a layoutSpecBlock and the viewConteroller has a `layoutSpecThatFits:`, we have well defined ways to apply these layouts, but the work to be able to run multiple layout specs for a single is ongoing. 
",appleguy,yury
969,2016-05-06 14:23:57,"@appleguy thanks
",yury,appleguy
969,2016-05-07 01:36:01,"We now have .layoutSpecBlock(), a block you can provide on any ASDisplayNode that can take the place of -layoutSpecThatFits.

This work perfectly for ASViewController if you want to do something like initWithNode:[[ASDisplayNode alloc] init].  You can add subnodes (or better yet, do self.node.usesImplicitHierarchyManagement = YES), then provide the layout spec block (typically best to define this in -init).

The only trick is that this cannot be used with any class that defines -layoutSpecThatFits as a method.  This does limit the usefulness quite a bit, so we have an important task on the team roadmap already to address this by allowing any two layout spec definitions to both apply themselves.

> On May 6, 2016, at 7:24 AM, Yury Korolev notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy thanks
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/969#issuecomment-217453677
",appleguy,appleguy
967,2015-12-22 05:05:06,"@samhsiung do you happen to know what is causing these attributes to be ignored in the ASDK implementation anyway?  I haven't looked at it in detail yet, but I'm wondering if it is necessary for them to be skipped and if we absolutely need new API or if we can just allow them to be respected while still handling the entire multi-styled substring as a link if it is so attributed.
",appleguy,samhsiung
967,2015-12-22 06:43:40,"@appleguy We are using `NSLayoutManager` from TextKit to render text which has a hard coded internal color for hyperlinks which ignores `NSForegroundColorAttributeName`.

https://www.cocoanetics.com/2015/03/customizing-uilabel-hyperlinks/  

> NSLayoutManager has a internal color hard-coded for glyph ranges belonging to a hyperlink. It ignores the NSForegroundColorAttributeName, we believe wrongfully so. All drawing functions are called with the CGContext already configured by layout manager. This includes setting the fill color for the glyphs.

In the writeup above, they were able to work around this behaviour by subclassing `NSLayoutManager` and overriding `showCGGlyphs...`



We could do something similar if we wanted to support using `NSForegroundColorAttributeName` for ranges with `NSLinkAttributeName` set without adding a new API.

In CSS, if a color is specified for a selector, it won't apply to any links under selected elements. There has to be a specific rule targeting links in order to style them. Perhaps Apple wanted to mirror the way link styling is handled in CSS.
",samhsiung,appleguy
964,2015-12-21 16:29:41,"Hey @levi, this is awesome. Can't wait to use this. Just curious on why collection node's reload methods are substantially more expensive than UICollectionViews? Is this because there is a extra layer going through the node?
",aaronschubert0,levi
964,2015-12-22 04:02:54,"@aaronschubert0 it's because the nodes are destroyed and re-created.  Granted, nodes are cheap to allocate, and even in the case of a full reloadData, it doesn't force layout / height calculations (table) or size calculations (collection) to be done synchronously.  In addition to not forcing them synchronously, they are done concurrently on multiple cores with ASDK.  So as long as you don't call -reloadDataImmediately, it should actually be faster than UIKit to call -reloadData on an ASCollectionView if your cells have any amount of dynamic sizing (such as checking the size of text).

There is a /lot/ of documentation that is still needed for AsyncDisplayKit to help communicate these many details, but it's just been a tradeoff of either writing the code to make the framework that much more advanced, or stopping work to describe what has been done :-P
",appleguy,aaronschubert0
964,2015-12-22 04:47:16,"Thanks @levi, some nice improvements here!  I think a next step is something similar to ASPendingState for collection / table node, but it is not as time-sensitive.
",appleguy,levi
964,2015-12-22 10:17:31,"Thanks for that explanation @appleguy clears up the myth that I believed that reloading ASCollectionView is a lot slower than the UIKit call. Yeah I definitely prefer advancing the framework :D
",aaronschubert0,appleguy
961,2015-12-20 03:33:41,"@appleguy Thanks a lot and I am sorry that this bug put you through the torture :). I am going to test this one on my main project tonight.

As for the flickering, I think you might be right about view controllers swapping, I'll try a custom view controller transition, it can maybe fix this flicker. I was also thinking about overlaying the image view controller on tap with its on image view and then do the transition by either hiding or changing the alpha as you suggested. This way, maybe, I can avoid the whole mess I made in the image view controller.
",1nput0utput,appleguy
961,2015-12-20 06:36:20,"@appleguy my main app is working as expected without making any changes mentioned in #928. I am sending you an email as I type this comment.
",1nput0utput,appleguy
955,2015-12-19 02:03:49,"@appleguy I'm using WebP encoded images so I don't really have a choice but to use decoded images since ImageIO doesn't support WebP.

What's your suggestion for working around this?  I suppose I could convert them into JPEG before sticking them into my image cache (I'm using a local image cache instead of NSURLCache for image caching) but if there's another way it would be good to avoid this step.  I'd like to continue to use WebP on the wire for the size improvements.
",smyrgl,appleguy
955,2015-12-19 21:06:41,"@appleguy I'm familiar with the implementation details of ASImageNode so I could do what you are suggesting but just to verify how this might work let me list out my understanding of what the problem is:
- ASImageNode works by holding a strong reference to the UIImage and then drawing it in `displayWithParameters:` by creating a draw context and drawing it using `drawInRect:`.  This works because encoded images have a `CGImageSource` backing which doesn't keep the actual image data in memory.
- However if the UIImage is already decoded then its underlying data isn't lazily fetched from disk but rather is kept in memory and will not free the memory until the ASImageNode itself is destroyed.  In a Table/Collection view this is pretty much never since the `ASDataController` holds onto its nodes even if they aren't in the display range.
- This could be resolved a number of ways but the simplest seems to be to create a subclass of `ASImageNode` that overrides `drawParametersForAsyncLayer:` and then returns the `_ASImageNodeDrawParameters` which will include the decoded image only at that point which could be built from a new param that is added (such as a cacheKey or fileURL).  Since the node itself doesn't keep a reference to the decoded image this should be fine and the decoded image memory should be freed as soon as `displayWithParameters:` is finished.

Do I have that right?

I'd like to suggest that this is not just a problem with WebP--although `ASImageNode` has the `imageModificationBlock` property I'm sure a lot of people might be doing things like tinting and corner rounding before setting the image property of a node which is going to trigger this issue.  The `ASButtonNode` class for example is practically begging for this to be the case since the biggest use case for different images for different control states is image tints and that will trigger this issue right there.  If you image an `ASButtonNode` being used in a Table/Collection view...well  you get the idea.  This is a memory nightmare waiting to happen.

I realize that this is ultimately a problem with the way UIImage abstracts ImageIO but it just seems very dangerous to me for unsuspecting users.  I don't see a lot of good options for solving this universally without drastic changes but I suspect a lot of users are seeing this issue without knowing it and that it can be a really crippling issue in the context of a Table/Collection view.
",smyrgl,appleguy
955,2015-12-21 21:49:25,"@appleguy Thanks for the vote of confidence, I want to finish some investigation before I comment further--I have a few ideas I'm looking at for how to solve this and I need to dig deeper into them before I can say definitively one way or the other what the best course is going to be.  And you can pretty much ignore my point 3...that was purely an attempt to suggest a way to resolve the specific problem OUTSIDE of ADK...I'm pretty convinced that this needs to be resolved as a patch to ADK for this to work now.

This is my top priority right now so I should have an update in the next couple of days.
",smyrgl,appleguy
955,2015-12-28 21:15:42,"@appleguy The holidays kind of threw this off for me but my findings were the same--there just doesn't seem to be a great way to tell if an image is decoded (that seems to be the whole point actually...).  It is possible to resolve this by using a custom image buffer abstraction that is different than UIImage but that doesn't seem to be the most elegant solution.  

I do think that working on this from the ASImageNode side seems to be the best approach but it isn't bulletproof since we still need a way to cache the images so they don't need to be kept in memory.  I am still working on a few workarounds but I don't have anything solid yet.
",smyrgl,appleguy
955,2016-01-04 05:58:24,"@appleguy So one thing I've been playing with--what about implementing our own buffer in the setter on an `ASImageNode` that discards the `UIImage` and just keeps a reference to the buffer object?  Something like this (simplistic example):



This could then be purged during `clearContents` on the node in question which would cleanup the temp file.  Not an ideal solution but it works.  

EDIT: The idea here is to maintain compatibility with UIImage...if we are willing to discard that then the options increase dramatically...also if there is some magical way to deduce if a UIImage is decoded or not that also helps.  The problem with this solution I see is the duplication which is tough to work around since I'm not aware of an easy way to keep hashes of image data.  Typically the hash value of an image is the same as the image bytes themselves...
",smyrgl,appleguy
954,2015-12-20 01:52:54,"@appleguy Thanks for the response!

Here's the full project: https://github.com/marcelofabri/AsyncDisplayKit/tree/custom-collection-view-height/examples/CustomCollectionView

Turns out that `asyncDataFetching` wasn't the problem, but setting the `layoutInspector` was.
",marcelofabri,appleguy
954,2016-01-11 16:58:51,"@levi Thanks for pointing me to this thread. Have you got a working example of `reloadDataWithAnimationOptions:completion:` being used?

I actually arrived at the idea that you probably had to 'pre-measure' the cells but was completely stuck as to how to achieve it, especially while not losing the performance properties of ASDK.

If nodes are instantiated, does the act of pre-measuring the nodes actually instantiate Views or CALayers at all? It shouldn't, right?

Thanks!

P.S. what's the relationship between the proposed method, and the way UIKit was extended with self-sizing in iOS 8? What I'm seeing is, you'll need some sort of prototype cell that gets configured with some data, it gets measured, and then the computed frame gets cached.

P.P.S @levi when you say ""pre-measure the cells"" you mean ""pre-measure the cell nodes"" right?
",fatuhoku,levi
954,2016-03-22 04:15:03,"> I see what you're trying to achieve in interfacing with the calculatedSizeForNodeAtIndexPath: method, however, this will likely result in unwanted behavior because the layout is calculated before the cells are measured

@levi in what context would this happen? My understanding is that ASCollectionView only inserts cells after the the node for the index path has been setup and measured by its dataController (usually on a background thread). This all happens through the ASRangeController delegate methods [here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASCollectionView.mm#L964). Any call to insert, update or delete items will then trigger a re-layout of the collection view and prepareLayout will be called again. In fact, calling numberOfSections: and numberOfItemsInSection: on ASCollectionView will only return the number of items and sections that have been loaded (and measured) by the dataController [here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASCollectionView.mm#L520), not the number returned by asyncDatasource 

I have setup a custom UICollectionViewLayout that calls : calculatedSizeForNodeAtIndexPath to get the size of the cells and it seems to work fine. What am I missing here?
",adamastern,levi
954,2016-04-04 03:50:09,"@hannahmbanana Thank you Hannah! The ASDKgram sample app looks great. I look forward to diving deeper into the code and making tweaks to test things out.
",vtsoup,hannahmbanana
953,2015-12-19 04:21:24,"@bimawa Could you please share some additional information?  I can't quite tell what your issue is yet.
- What is the exact, full exception message that is shown?
- What is the exact line number that it is referencing, and what version / commit of the framework are you using?  I looked at line 215 in my local copy, but it has no assertion or exception there.  Please try using the latest master build, or using 1.9.3 is fine too.
- Note that ASEditableTextNode is one of the only nodes that requires being view-backed.  This means you cannot add it to a supernode that is layer-backed.  ASCellNode is the other node that can't be layer-backed.  You didn't add enough information for me to tell what you've set up, but if you have a subnode of the ASCellNode that is marked as layerBacked = YES, and then are adding the editable node to that, that's your bug.  Just remove the layerBacked = YES for any supernode of the editable text node.
",appleguy,bimawa
953,2015-12-21 05:47:33,"@appleguy

> What is the exact, full exception message that is shown?

`Uncaught exception: CALayer position contains NaN: [nan 19.75]`
Method `- (void)__setSafeFrame:(CGRect)rect` try setup a frame with next data: `rect = (origin = (x = 0, y = 0), size = (width = 0, height = 0))` on line `_layer.position = position;`
If i use ASLayoutSpec!

> of the framework are you using?

last version 1.9.3 from cocoapods

> Just remove the layerBacked = YES

its a ASCellNode. It does what I need set layerBacked to NO for ASCellNode, ASTableNode too?

piece of my code with error:
bellow class is inherit ASCellNode


",bimawa,appleguy
953,2016-06-17 00:00:56,"@bimawa: sorry we are _really_ behind on answering this. Were you able resolve this issue? If not, I would be happy to help. 

One thing that I notice in your code is that you are accessing the ASEditableTextNode's `.textView`s before the text node's view is created (BAD).  In the ASEditableTextNode.h file there is the following warning:



I would recommend that you move a lot of this code to the `didLoad:` method. Check out this documentation for more info on the common ovverride methods for ASDK subclassing: http://asyncdisplaykit.org/docs/subclassing.html
",hannahmbanana,bimawa
953,2016-06-17 09:30:32,"@hannahmbanana yea ty worked.
",bimawa,hannahmbanana
953,2016-06-17 16:06:49,"@bimawa: Fantastic! Feel free to open another Issue if you run into any other problems.
",hannahmbanana,bimawa
952,2015-12-19 06:29:36,"Awesome, thanks @lappp9!  @Adlai-Holler, you should give us your feedback - still very early, but we want to start adding more APIs that become more opinionated on how things like the playhead / scrubber are specified and customized.  I'm thinking we will have a play-in-place mode that doesn't right away have support for a full scrubber control, but also offer a fullscreen mode backed by the existing UIKit media player.  The core value proposition would be efficient async fetchData / display range support for the thumbnail image as well as smoothly triggering autoplay upon the Visible .interfaceState (if some property like .autoplay = YES).
",appleguy,lappp9
952,2015-12-19 07:04:22,"I did not review all the sample code, but have reviewed the core framework implementation.  This is a lot of work and reaffirms the fact that it will turn into a valuable component for many people in the community.  Thank you @lappp9 for your quick and tireless work on this and other changes recently!
",appleguy,lappp9
952,2015-12-19 19:21:38,"Woot! This is an excellent first pass and I can't wait to put this component to good work. Since @appleguy already covered the implementation, and since I'm greedy, this will basically amount to feature requests :smile: . Playing video in iOS, the complexity can skyrocket really quickly, so I'm not necessarily pushing for all these immediately.

Muting/unmuting audio. This would mean adding a `muted` property to the node, and applying that to the latest player whenever either changes. If we add a delegate callback (or KVO but… eh…) for observing mutedness then users can implement their own mute/unmute toggle button. Giving them a default mute/unmute button sounds noble but would need a lot more consideration of value.

It would be valuable to detect when the video has reached the end time – here are a couple ways to pull it off:
- Make `currentItem` public, and client observes `AVPlayerItemDidPlayToEndTimeNotification`. Pro: very little code on our end, consistent with non-ASDK usage. Con: Need to inform client when player item changes, may be cumbersome for user to handle the common use case of ""I don't care what item is playing, I want to know when this node finishes playing.""
- Create a delegate method for it. Pro: Very little code on client's end, could even have a `shouldAutorepeat` option for the delegate to make the call, we are already observing the AVFoundation notification internally anyway. Con: none, really. 

I think the best approach is actually to do both of the above. I can't think of a reason to hide the player item. Clients may want to seek to a particular point, configure the audio mix, etc. There's so much functionality that we could safely offer users, that it might be worth informing the delegate when the current item changes so that they can configure it, or providing a `playerItemConfigurationBlock`.

Looking to the future, helping to handle buffering would be a great feature – perhaps by default showing/hiding the spinner during buffering and informing the delegate so they can handle it in other ways if desired. Observing a combination of `AVPlayerItemPlaybackStalledNotification`, `AVPlayer.rate`, `AVPlayerItem.playbackBufferEmpty`, and `AVPlayerItem.playbackLikelyToKeepUp`.
",Adlai-Holler,appleguy
952,2015-12-21 07:31:05,"@Adlai-Holler, so I was wondering about the muting thing.  Would it make sense to add an enum property for what the tap action is supposed to trigger? It could be playVideo, playAudio and goFullscreen. Or something like that?
",lappp9,Adlai-Holler
952,2015-12-22 04:56:40,"@lappp9 it looks like you need to pull ASDK master, and then on your branch, do ""git merge master"" - then sync the results back here.  Right now there are conflicts and we can't merge.
",appleguy,lappp9
952,2015-12-22 08:13:43,"@appleguy ok, i'll do that now and hopefully finish up all these changes tomorrow!
",lappp9,appleguy
952,2015-12-25 23:43:34,"@lappp9 I think using an enum to control the behavior is a little too much at this early stage. The more I think about it, the more I think that we should leave all tap handling up to the consumer including the play/pause behavior that's already wired up.

My rationale is, I expect practically all consumers to subclass `ASVideoNode` and add a bunch of other functionality to suit their needs. So giving them this one trivial piece (tap -> play/pause) may interfere with their intended tap handling, and it'd be very easy for them to replicate if the want it. Adding the enum you mentioned is a bit over-engineered, and it still won't alleviate the need for the consumer to subclass. 
",Adlai-Holler,lappp9
952,2015-12-28 06:02:29,"@lappp9 very excited to merge this in the coming weeks!  I had a chance to play with both test projects today.  A few bits of feedback:
- Make sure to use https URLs in both projects as they are triggering ATS.
- Rename the scrolling sample to something more descriptive of its purpose, rather than the actor in the sample video :)
- Consider merging both projects and using a simple UITabBarController or similar for the stationary + scrolling view.  This would help us test things like auto-pause when the view controller goes offscreen (visibility notifications are new to ASDK and so may not always work as expected right now - we should audit this behavior carefully and skeptically)
- Briefly refactor the test project code to minimize duplication from the Kittens app, removing anything not necessary and renaming things that still have Kittens in the name
- Different route, but one that is interesting: delete the test projects entirely and instead adopt ASVideoNode in several existing test apps.  Kittens app could have rows with full-width videos and no text, sized to fit the aspect ratio of the video correctly (find any kitten clip on the internet that is fairly short so it doesn't take a long time to load and seem slow - roughly correct resolution for an iPhone).  SocialAppLayout could have a video type, and you could modify the data source to add more stories (even if they just repeat over and over) to be able to do faster scrolling tests.  One of the best ones would be CustomCollectionView, as it is looking like it will be one of a handful of example apps that we will keep at the top level as a true reference app for people to look at (along with SocialAppLayout once its code is cleaned up, plus whatever new app is done for the guide).
- Not critical for the initial landing, but make a note to add a snapshot test (needs to use a local file URL / can't depend on network) hat checks the placeholder frame state, and also manually seeks forward to the last frame when in the playing state to check that frame.
",appleguy,lappp9
948,2015-12-18 21:22:38,"@appleguy I'm pretty busy at the moment, but I'll see if I can create a test project for this over the weekend.
",tomizimobile,appleguy
948,2015-12-18 21:52:17,"Interesting I have an AVPlayerLayer as well, though it's not inside any ASDK hierarchy to my knowledge. just in the same UIView.

@appleguy emailed you something. might not be enough, but it at least illustrates the issue.
",tettoffensive,appleguy
948,2015-12-19 00:04:49,"@tettoffensive @tomizimobile fix is up.  Please test it!  https://github.com/facebook/AsyncDisplayKit/pull/956
",appleguy,tomizimobile
948,2015-12-19 00:33:00,"@appleguy I've ran against that branch a couple dozen times without a problem - seems like a good fix to me.
",tomizimobile,appleguy
945,2015-12-17 01:40:24,"@rcancro this version looks quite robust!  Thank you!!
",appleguy,rcancro
944,2015-12-20 14:49:53,"@appleguy gentle bump, as this PR contains more than just question about running tests.
",zintus,appleguy
943,2015-12-16 19:41:52,"@appleguy Are there any best practices on how to download, **cache** and display images?
",smiLLe,appleguy
943,2015-12-17 18:23:39,"@appleguy  Yes, I use SDWebImage to download, decode and cache network image. The format of my image is webp. I use `SDWebImageDownloader.sharedDownloader().downloadImageWithURL` to download image and then setting it to ASImageNode. I also init ASNetworkImageNode using `SDWebImageManager`. 
",singno,appleguy
941,2015-12-18 02:17:12,"@samhsiung thank you for the clear, specific description.  It was very important for me to understand this diff.  I also particularly appreciate you adding the test.

The attention to detail in our text rendering system is very valuable, and is an expertise that a fairly small subset of engineers have.  I'm starting to look at this code more closely myself, due mainly to your lead, and am finding some sweet optimizations - one will go up soon.
",appleguy,samhsiung
938,2016-02-08 16:26:52,"@appleguy I've never noticed or read anything about the worst performance of UICollectionView towards UITableView, although it makes completely sense. Do you have some inputs to share about this ?  

@eanagel I would be very interested by your ASListNode, do you have some hints for when it should be publicly available / or a link if it's already the case ?
",macistador,appleguy
938,2016-06-26 19:46:58,"@smyrgl @eanagel @macistador: I have nothing specific to report here, but I wanted to let you know that @Adlai-Holler (ASDK's new full-time developer) is currently exploring this idea for a post 2.0 release. 
",hannahmbanana,eanagel
937,2015-12-14 02:09:59,"Yes.  However, we actually also need to do something like this for all ASLayouts.  Under-specified Stack layouts can crash due to setting NaN and/or Inf on CALayer, and they also routinely set really uneven floating point numbers.  Any idea on what layer we could inject this to properly apply that effect without messing up more manual calculations that folks do based on calculatedLayout?  I think ASLayout itself will just need to return the rounded values.  Wonder if the snapshot tests would pass with this.

cc @rcancro, @Adlai-Holler, @nguyenhuy 

This patch is fine to merge and I'm ready to take it, but since it would probably be superseded / replaced by the other change, I'm wondering if we can quickly find the right spot to drop that in.
",appleguy,Adlai-Holler
937,2015-12-17 01:38:57,"Superseded by #945.  Thanks a lot for bringing this up @Adlai-Holler !
",appleguy,Adlai-Holler
935,2015-12-13 02:03:53,"Thanks a lot for investigating this, @samhsiung!!
",appleguy,samhsiung
931,2015-12-11 04:00:42,"@lappp9 awesome head start on this feature - a highly desired one for a number of use cases, including @levi's ASPagerNode!  Will review / give feedback soon.
",appleguy,lappp9
931,2015-12-11 05:48:09,"@appleguy thanks/no problem!

Side note: I noticed that viewWillAppear and viewDidAppear seemed to already work on the view controllers I threw in there. 

Also, I think this way of resizing the view controller's views makes sense since it's similar to the way Apple talks about container view controllers resizing the views of the view controllers they contain.
",lappp9,appleguy
931,2015-12-19 06:27:07,"@lappp9 ok, I will land this tomorrow if you are able to do another round on feedback!  I'd like to build off this patch this weekend with some customizations for ASViewController-based wrapping (setting interfaceState automatically etc), as I am currently adopting ASPagerNode in Pinterest and want it to page through ASVCs (but it currently expects ASCellNodes, so this is directionally what is necessary).  Thanks for your work across the project, it is really cool!
",appleguy,lappp9
930,2015-12-09 23:40:11,"Damn, this is unfortunate. @samhsiung do you have time to write a snapshot test to reproduce this issue? I can take a deeper look when we've got a solid test case available. Life is a little overwhelming for me at the moment, so won't be able to look at this until later in the weekend.
",levi,samhsiung
930,2015-12-10 17:45:08,"No problem @levi, also swamped at the moment with other things at work, but I can take a look during the weekend.
",samhsiung,levi
929,2015-12-11 19:34:36,"@Eke don't apologize - /thank you/ for posting!  Happy to help.

This line is not correct - you should not be calling -measure in -layoutSpecThatFits:



If you ever did need to manually call measure, it might be from within the -layout method.  But you don't normally need any implementation of the -layout method.  For ASCellNodes, the -measure pass will be triggered automatically for you.  If you would like to see how it is triggered, set a breakpoint in -layoutSpecThatFits:, as that is called as part of the measurement pass.

I would love to help resolve the issue for you, but it may be necessary for me to have access to the project as a whole so I can run it and debug the existing code.  If you're willing / able to share this with me directly, I will treat it with the utmost confidentiality.  Feel free to email me at asyncdisplaykit@gmail.com.

I'll look through the code you shared here in more detail for any other issues, but I'm not sure it will be quite enough to solve.
",appleguy,Eke
929,2015-12-11 20:13:56,"@appleguy  thanks you for support. 
I was able to fix my problem using `ASOverlayLayoutSpec`, but i will be happy if you can just take a look at my project. This is my first app fully developed using Async Display Kit and it will go to app store when finished.
",Eke,appleguy
929,2015-12-12 06:17:29,"@Eke sounds great that you have an implementation!  Sure thing, I'm happy to do some CPU and memory profiling on an older device as well to make sure it is running smoothly / recommend some optimizations.
",appleguy,Eke
928,2015-12-11 21:41:30,"@nguyenhuy @appleguy sorry for not being quick to reply back. I'v quickly created a test project using the Kittens sample and I can see the exact same behaviour https://github.com/1nput0utput/ImageTest.git

Thanks for helping out!
",1nput0utput,nguyenhuy
928,2015-12-11 21:41:30,"@nguyenhuy @appleguy sorry for not being quick to reply back. I'v quickly created a test project using the Kittens sample and I can see the exact same behaviour https://github.com/1nput0utput/ImageTest.git

Thanks for helping out!
",1nput0utput,appleguy
928,2015-12-19 18:15:59,"@appleguy changing from using view to node definitely did the trick. I can't wait for the actual fix so that the node behaviour resemble as of UIView.

I do understand the hacky way my image viewer is implemented, I was trying to give a smoother user experience, somewhat similar to the Facebook's app. I unfortunately ended up with the flash when presenting and dismissing the view controller. If you have any suggestions or a direction I can take to smoothly transition the image from one view to another, I'd love to hear.
",1nput0utput,appleguy
928,2015-12-23 20:49:54,"@1nput0utput @appleguy For what it's worth, I was running into a flickering problem in a similar situation where I was moving an `ASImageNode` from a collection view cell to an `ASViewController`, using a custom transition. I was able to tweak my transition animation code a bit to fix the issue. The key was to insert the image node into the destination viewController's node immediately after adding that viewController's view to the transition context's containerView. Hope that helps.
",tomizimobile,appleguy
928,2015-12-25 02:38:33,"Thanks @tomizimobile. Are you supporting orientation in your ASViewController? 

A brief history. I did not have flickering in my view controller prior to supporting orientation. As my main view controller needs to stay in portrait, my image viewer did not. For this situation you're bound to a full screen presentation style instead of UIModalPresentationCurrentContext. As you can imagine, upon dismiss my presentingViewController's view is not present causing to flicker when it becomes visible again.
",1nput0utput,tomizimobile
927,2016-03-25 02:18:28,"@zintus @levi - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,levi
926,2015-12-09 05:44:49,"@appleguy thanks for your feedback!

It seems like I can't think of more than one example you already mentioned - when node bounds are larger than its content. And although I second your thoughts on memory consumption, this approach served me well when building small nodes that required this option, e.g. buttons or other relatively small controls.
",nivanchikov,appleguy
926,2015-12-22 07:42:20,"@appleguy sorry guys, I'm on vacation myself so lets get back to it in Jan if it's OK
",nivanchikov,appleguy
925,2015-12-11 03:58:16,"@levi thanks for building this!  Several folks are quite excited to start using it, both at Pinterest and beyond :).

When you get a chance, can you fix the issue that the build server is flagging?
",appleguy,levi
925,2015-12-17 01:54:40,"@appleguy added a few helper methods locally that I'd like to begin adding after this patch lands. You ok landing this?
",levi,appleguy
925,2015-12-19 02:19:25,"This is a great first start, thanks @levi !  If you can address comments in a followup diff, that would be awesome and almost surely enough for me to adopt this in Pinterest this weekend!
",appleguy,levi
924,2015-12-09 02:06:47,"@aaronschubert0 super awesome, thank you!  I was just thinking about this earlier in the morning.

It would indeed be ideal to proved a property for region, and allow it to be set.  More likely than anything else it may be used to read the value before the node is loaded, but it seems useful to be able to set it too.

I might even suggest that we kill initWithRegion entirely (I know, I know ... I had suggested it), and just rely on the property.  This way if a user's app doesn't know the region at init time (seems plausible), they could set it in -fetchData or wherever else is appropriate.
",appleguy,aaronschubert0
924,2015-12-11 15:21:30,"@appleguy Hmm this is a tricky one. I've been thinking about this for a few days now. I'm not sure how comfortable I would be in having no custom init method that clearly specifies an action. If we did get rid of initWithRegion then we would have to provide a suitable default so that ASMapNode works out of the box. Although [[ASMapNode alloc] init] doesn't produce anything great either at the moment. I'm still 50/50. The layout spec (as well as ASImage/Text/ControlNode etc) conforms to a standard -init and then setting properties so maybe we should actually go this way to keep in line with the framework. Should we provide a default in this case?
",aaronschubert0,appleguy
924,2015-12-11 19:58:52,"@aaronschubert0 I think it's similar to UIView initWithFrame:, which actually is a bad practice / pattern to use, and so that's why ASDisplayNode does not have initWithFrame: even though it is basically a superset of the UIView API.

Let's go ahead and make it a plain -init with the region property.  Defaulting the region to ""whole world"" would make sense (not US, please!) - simply so that people creating a map node for the first time can see something show up if they don't have a region to set yet.
",appleguy,aaronschubert0
924,2015-12-16 10:41:50,"@appleguy I've made the specified changes. The major breaking change is getting rid of the custom init method in favour of altering the region property. Internally, I got rid of _mapNode to work directly with the MKMapView, change isLiveMap to be a 'computed' property and generally improved the code quality. The only snag left is the possibility of a retain cycle in the -addLiveMap method, I've commented on a previous comment asking how this may be solved, happy to change anything regarding this in a follow up diff.
",aaronschubert0,appleguy
924,2015-12-18 03:34:45,"@aaronschubert0 this is really getting there!  Did we add a test case for this, at least an example app?  I wonder if we could add some unit tests to make sure coverage stays high and we don't break it?

I'm going to land this one because it looks like a definitive improvement / step forward.  I do think we should bring back the BOOL and look for any other ways to make sure the internal logic / state is consistently handled for all the possible ordering of calls and use cases that nodes can go through.  One followup there is correct handling of layerBacked mode — at a minimum we'd need to add the mapView's sublayer as a sublayer of the node's layer when the node is layerBacked, but it's very possible that won't work correctly.  Yet we should support layerBacking for the default snapshotter mode.  So I'd suggest overriding setLayerBacked: and setLiveMap: for each to check for the other property being set and throw an assertion if at any point they are both enabled.
",appleguy,aaronschubert0
924,2015-12-21 10:38:58,"@appleguy Yeah!! So much better than when we started. Thanks for all the amazing feedback! I haven't added test cases yet but will add those along with an example app soon. Good point on the layer backing, can't forget about that! I'll add this in a future diff as well.

In terms of the BOOL, yeah I agree, it's tricky trying to minimise the internal state but will keep working on that and bringing back the BOOL does make it clearer.

Due to work I'll probably be picking this up a the start of the new year, once we've had some rest.
",aaronschubert0,appleguy
923,2015-12-16 10:47:24,"@appleguy thank you very much. In 1.9.2, I have no such issue. I use the method of '-boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options context:(nullable NSStringDrawingContext *)context' calculating the size of the text. I don't use autolayout in my project. 
",tuyuan2012,appleguy
923,2016-01-08 05:04:27,"The issue has disappeared in the version 1.9.4. Thank you @appleguy 
",tuyuan2012,appleguy
923,2016-02-16 16:22:16,"@appleguy close this one when you get a chance :)
",levi,appleguy
922,2015-12-09 16:39:54,"@tomizimobile Thanks for another awesomely-thorough report!

On animations: I believe the reason `setAnimationsEnabled` isn't working in this case is, ASTableView enqueues those animations asynchronously after returning from `endUpdates`. In your test project, calling `tableView.endUpdatesAnimated(false, completion: nil)` does the trick for me. It's not API-compatible with UIKit, but is that OK?

On crashing when reloading data: This is indeed a bug in the framework! Diving in, I've found that during the `[super reloadData]`, `ASTableView` is returning 12 sections (the pre-filter value) when your table view data source is only returning 6 – the data controller must requery the underlying data source immediately, or else this `titleForHeader:` crash is inevitable. I tried shuffling around the implementation of `ASTableView.reloadData` but no luck.

The fact that `titleForHeader:` is a delegate method, not a data-source method, is kind of screwing with the data architecture of ASTableView, because it allows the client to talk directly to UITableView about its data, which isn't what's up. @nguyenhuy can you think of an approach that wouldn't tear ASTableView apart?
",Adlai-Holler,tomizimobile
922,2015-12-09 16:54:08,"@Adlai-Holler Hah, somehow I totally missed that `endUpdatesAnimated` even existed... it's perfect. That solves my animation issue, and the way I was doing it previously clearly can't realistically be supported. But if nothing else, it helped me root out a crash. 

Since I don't really have a need to `reloadData` anymore (nor did I really want to, given the performance hit), the crash isn't something I'm immediately worried about, but if anyone puts a fix in place and needs help testing it out, I'll be glad to help.
",tomizimobile,Adlai-Holler
922,2015-12-09 18:01:03,"@tomizimobile `endUpdatesAnimated` is indeed the way to go in this case. Thanks for the helpful test repo. I can reproduce the crash with `reloadData` and agree with @Adlai-Holler that it is a framework bug. I also agree that clients shouldn't be allowed to talk directly to UITableView and return header titles. Instead, ASTableView should intercept `titleForHeader` calls and do something clever. I'm thinking about making ASTableView to cache all old titles, and then return them while its super (i.e, UITableView) is reloading ([here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASTableView.mm#L330)). The cache will be cleared later on, either right after the UITableView's reload or after the underlying data controller finished. 

Another approach is to ban `titleForHeader` completely and encourage those who need to show header titles to switch to ASCollectionView instead. There is a stable implementation of supplementary views support in ASCollectionView. And it will be an easy switch because all the nodes are already of type ASCellNode.

What do you guys think?
",nguyenhuy,tomizimobile
922,2015-12-09 18:01:03,"@tomizimobile `endUpdatesAnimated` is indeed the way to go in this case. Thanks for the helpful test repo. I can reproduce the crash with `reloadData` and agree with @Adlai-Holler that it is a framework bug. I also agree that clients shouldn't be allowed to talk directly to UITableView and return header titles. Instead, ASTableView should intercept `titleForHeader` calls and do something clever. I'm thinking about making ASTableView to cache all old titles, and then return them while its super (i.e, UITableView) is reloading ([here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASTableView.mm#L330)). The cache will be cleared later on, either right after the UITableView's reload or after the underlying data controller finished. 

Another approach is to ban `titleForHeader` completely and encourage those who need to show header titles to switch to ASCollectionView instead. There is a stable implementation of supplementary views support in ASCollectionView. And it will be an easy switch because all the nodes are already of type ASCellNode.

What do you guys think?
",nguyenhuy,Adlai-Holler
921,2015-12-07 21:11:33,"Are you using -reloadData?  Try using beginUpdates & endUpdates.  There are a variety of animation features and it should certainly be able to do what you need.

@bimawa if you could include a screen capture video (QuickTime Player can do this - go to the File menu and create a screen recording), and also share a few lines of your implementation for where you're triggering the reload, and explain the animation you would like — we can definitely get you set up!
",appleguy,bimawa
921,2015-12-08 05:13:26,"@appleguy No its not reloadData its when cells show from cash and bring to mainThred. When i scroll CollectionView or tableView. I just need advice what i must observe where cell is calculated and showed on scrollView? Now i use delegate `imageNodeDidFinishDecoding` and insert animation block in it. But its not cool solution if my CellNode haven't a image.
I can't records a video on simulator ASD very quickly working and not see that effect. I will be try it on another ViewController
",bimawa,appleguy
921,2015-12-09 16:46:16,"@bimawa Maybe `tableView:willDisplayNodeForRowAtIndexPath:` will help? I haven't tried this personally, but something like this might work:


",Adlai-Holler,bimawa
921,2015-12-10 16:26:43,"@Adlai-Holler nop not help, and i think its a bad practics, couse CellNode calculated in background, and showing only if end it. I'm still researching....
`didEndDisplayingNodeForItemAtIndexPath` too not help. I think we want make animation in Node self scope.
",bimawa,Adlai-Holler
921,2016-06-17 00:03:43,"@bimawa: again, I am very sorry it took so long to answer this! Were you able to figure this one out? 
",hannahmbanana,bimawa
920,2015-12-07 16:00:44,"@aaronschubert0 I'm not talking about ASDisplayNode here. I'm thinking if I can get a snapshot from a normal UIKit object on the background thread, I don't have to use ASDK to achieve the asynchronous rendering. As @appleguy says, the CoreAnimation API is designed for main thread only. However, the `[self.headIcon.layer renderInContext:context];` can be executed safely on the background thread.
",vizlabxt,aaronschubert0
920,2015-12-08 02:11:40,"@appleguy thanks! 

The code above works just fine, but I'm not sure if that's just a coincidence. Really curious about how Core Animation work under the hood . Wish you could share some thoughts on this topic if you have time !
",vizlabxt,appleguy
917,2015-12-07 04:35:04,"Fantastic, thanks for the ultra fast turnaround @levi!  Getting this into 1.9.3 because of your Sunday night work.  Community dedication right there :)
",appleguy,levi
915,2015-12-06 22:03:05,"@appleguy I totally agree, let's change the test. No need to be so strict with this.
",Adlai-Holler,appleguy
915,2015-12-06 23:08:34,"@levi, @Adlai-Holler, @nguyenhuy thanks so much for the feedback!  Indeed you guys found a couple clear issues that reflect the fact that I hadn't yet seriously tested this, but by calling them out, you definitely saved me time and have bettered 1.9.3 because of it :).

I've been head-desk-banging a bit because the tests are still not passing.  In fact the output of the snapshot tests is blank for many ASLayoutSpec tests, even though ASLayoutSpec-based apps are running fine.  I haven't found an example app with a visible bug yet, which is strange, so I'm suspecting something about the highly artificial force-display mechanisms used by the test harnesses.  Still I don't want to make a change that breaks those, at least until they're working again (at which point I'd like to replace the hackily... method signature with the properly-supported -recursivelyEnsureDisplay or similar).

Let me know if you have any intuition on why layer snapshot comparisons are failing, but I will continue investigating.
",appleguy,Adlai-Holler
913,2015-12-05 19:09:36,"@Adlai-Holler I would like to introduce a new type, ASHierarchyState, that includes things such as inRasterizedTree or inCellNode (those latter names aren't exactly excellent, open to ideas on a more pattern-friendly nomenclature).

I think there would have to be a mechanism to recursively flow updates to the ASHierarchyState down the tree when there is a change, such as enabling or disabling rasterization.

This is actually my preference for how we resolve the deadlock, but I haven't yet studied it in enough detail to be confident this can be done without another possible deadlocking moment.  However, I think it can be.
",appleguy,Adlai-Holler
913,2015-12-06 01:34:13,"@Adlai-Holler I agree we need to rethink the name for the combined state, but this is easy to rename after 1.9.3 has stabilized some of the active issues.

I think _supernodeWithClass is used by internal FB extensions to ASDK that were broken out during the prep for open sourcing.  However, they're almost certainly irrelevant now.  Don't worry about this method for the moment and I will look into possible usages / consider removing it in the next couple months.
",appleguy,Adlai-Holler
912,2015-12-06 00:18:18,"@tomizimobile thanks for the debug text files!!  Can you please share the full thread backtraces for any version of this deadlock?

There are reasons to believe that I introduced a set of deadlocks with ASInterfaceState in 1.9.2, and they still exist in master.  They are my top priority to resolve for 1.9.3 and I plan to ship the fixes tomorrow night.  I want to make sure that my currently planned fix approach, which is aimed at another scenario reported in a different issue, will also fix this - but the backtraces are the most essential information for this.

Thanks so much for reporting this quickly — it's great for me to know this as I start resolving the underlying issue!
",appleguy,tomizimobile
912,2015-12-06 01:47:39,"@appleguy The previously attached `freeze.txt` includes a backtrace for the main thread which seems to be the most relevant one, but here's another full backtrace that's also frozen at a different function - let me know if you'd like more.

[backtrace.txt](https://github.com/facebook/AsyncDisplayKit/files/53022/backtrace.txt)
",tomizimobile,appleguy
912,2015-12-07 03:56:01,"@tomizimobile thanks for the additional log!  I just analyzed them in detail and audited every usage of _editingTransactionQueue.  The problem is I can't find anything executed on the queue that synchronously depends on the main thread, which seems logically necessary to cause a deadlock.  I could be missing something, no doubt...but the issue is that the log has no relevant detail in the background thread backtrace.

If you aren't able to provide the code that is triggering this issue and can't adapt / rewrite an existing example project to make it occur, can you take a closer look at what is happening on this thread?

You may be able to print out the NSOperation pointer and possibly get some information about where it originates.  Maybe add a name to the operation.

I would like to fix this ASAP, although unless we can get some more information on this issue in the next few hours, it looks like it will have to miss 1.9.3.  However we should be able to fix in the next few days, with your help on the debugging / inspection side (I can do the actual fix as well as testing, though confirmation that it resolves your deadlock would also really benefit from you giving it a test-run).  With this route, you can point your project to master until the next release goes out...currently don't have a 1.9.4 planned, but it will probably end up happening before the full 2.0.

  thread #23: tid = 0x1e04b3, 0x00000001979470c0 libsystem_kernel.dylib`__psynch_mutexwait + 8, queue = 'org.AsyncDisplayKit.ASDataController.editingTransactionQueue :: NSOperation 0x170459710 (QOS: USER_INITIATED)'
    frame #0: 0x00000001979470c0 libsystem_kernel.dylib`__psynch_mutexwait + 8
    frame #1: 0x00000001979e1494 libsystem_pthread.dylib`_pthread_mutex_lock + 420
    frame #2: 0x00000001862e85d8 Foundation`-[NSBlockOperation main] + 52
    frame #3: 0x00000001862d81cc Foundation`-[__NSOperationInternal _start:] + 636
    frame #4: 0x0000000186399f28 Foundation`__NSOQSchedule_f + 228
    frame #5: 0x0000000102300f94 libdispatch.dylib`_dispatch_client_callout + 16
    frame #6: 0x000000010230bdb8 libdispatch.dylib`_dispatch_queue_drain + 780
    frame #7: 0x00000001023042c4 libdispatch.dylib`_dispatch_queue_invoke + 132
    frame #8: 0x000000010230e5d4 libdispatch.dylib`_dispatch_root_queue_drain + 772
    frame #9: 0x0000000102310248 libdispatch.dylib`_dispatch_worker_thread3 + 132
    frame #10: 0x00000001979e122c libsystem_pthread.dylib`_pthread_wqthread + 816
",appleguy,tomizimobile
912,2015-12-07 04:06:15,"@tomizimobile FWIW - it would be darn near invaluable to have a unit / integration test that can reproduce the deadlock even occasionally.  I bet if the text entry was programmatically triggered, it would occur much more frequently / consistently.  Then we could put it in the test target that is run by the build server, and/or integrate it in ASTableViewStressTest.

The reason is simple - we do already have a variety of tests for these components, but even the ""stress test"" passes.  It's a clear indication that we need a more stressful test :).  Being able to catch this one with the test and then fix it would be a huge contribution to our ability to confidently refactor and optimize the implementation.  I have a lot of ideas about such optimizations, but often put them off because of some fear of causing issues :-P.
",appleguy,tomizimobile
912,2015-12-07 14:00:15,"@appleguy I'm working on modifying my previous test project to demonstrate this issue. 
",tomizimobile,appleguy
912,2015-12-07 16:27:45,"@appleguy Alright, so after trying to get to the minimal code that produces the problem coming from my current project, I realized the issue was something to do with my data source locking. As it turns out, you shouldn't pass a String to `objc_sync_enter()`/`objc_sync_exit()`. I had been going off some code I found that mimics `@synchronized` from Obj-C, which accepts `AnyObject` into a function like so: 



Once I replaced my string constant with an `NSLock`, things are working as expected. 

Sorry for causing all that extra work for you when it turned out to be an issue on my end. With that said, I still have the previously mentioned issue with the app crashing when trying to use `reloadData()` instead of `beginUpdates()`/`endUpdates()`. This is sufficient for now, but the advantage to using `reloadData()` is it gets rid of any animation - even though i've set all my delete/insert animation options to `.None`, and even after wrapping my `beginUpdates()`/`endUpdates()` in `UIView.setAnimationsEnabled(false)`/`UIView.setAnimationsEnabled(true)` or `UIView.performWithoutAnimation`, animations still occur. This is still the case in the current master (f5d06c5989da0f5e34c1d9b330f5ae71aa3a1fcb).
",tomizimobile,appleguy
912,2015-12-07 16:55:14,"Thanks for the details!  I actually prefer this result, rather than you having never reported it and being puzzled for a long time about the issue without having some external investigation help!

I would like to resolve the reloadData issue, including the ability to prevent animations with updates.  Can you link me to or file an issue for that?

Sent from my iPhone

> On Dec 7, 2015, at 8:27 AM, tomizimobile notifications@github.com wrote:
> 
> @appleguy Alright, so after trying to get to the minimal code that produces the problem coming from my current project, I realized the issue was something to do with my data source locking. As it turns out, you shouldn't pass a String to objc_sync_enter()/objc_sync_exit(). I had been going off some code I found that mimics @synchronized from Obj-C, which accepts AnyObject into a function like so:
> 
> func synchronized(lock: AnyObject, closure: () -> ())
> {
>     objc_sync_enter(lock)
>     closure()
>     objc_sync_exit(lock)
> }
> Once I replaced my string constant with an NSLock, things are working as expected.
> 
> Sorry for causing all that extra work for you when it turned out to be an issue on my end. With that said, I still have the previously mentioned issue with the app crashing when trying to use reloadData() instead of beginUpdates()/endUpdates(). This is sufficient for now, but the advantage to using reloadData() is it gets rid of any animation - even though i've set all my delete/insert animation options to .None, and even after wrapping my beginUpdates()/endUpdates() in UIView.setAnimationsEnabled(false)/UIView.setAnimationsEnabled(true) or UIView.performWithoutAnimation, animations still occur. This is still the case in the current master (f5d06c5).
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,appleguy
912,2015-12-07 17:31:31,"@appleguy I've created a separate issue here: https://github.com/facebook/AsyncDisplayKit/issues/922
",tomizimobile,appleguy
909,2015-12-03 18:29:59,"@nguyenhuy , thanks a lot ! everything workes perfectly, you saved my day.
",Eke,nguyenhuy
909,2015-12-03 19:03:48,"@Eke I am going to take a guess at that writing script - is it Georgian?!  Promise I didn't look at any references, so I could be wildly wrong.  I am very interested in the languages of the world, and it was actually a top consideration of mine in developing AsyncDisplayKit...because more complex scripts like the CJK languages, Thai, Hebrew, Mongolian, Arabic, etc often take 10 times the CPU power to size or render!

Did you have any other questions for us at the moment?  Please file another task any time.
",appleguy,Eke
909,2015-12-03 19:17:29,"@appleguy Yes, it is Georgian. 
AsyncDisplayKit gave very big boost to my dashboard, it is 3 or 4 times faster right now.

At this moment i don't have any questions, but i think there will be a lot as i am thinking to move my whole ui to AsyncDisplayKit :smile: 

I found only one problem, maybe it is my mistake or i didn't get the meaning of `ASTextNode` placeholder right, but when i write : 



I get something like this: 
![test](https://cloud.githubusercontent.com/assets/817489/11571028/c46d5ade-9a13-11e5-9508-4b389187aab9.png)

You can see text visible in background of placeholder.Maybe is Georgian text causing this, or just me? :smile: 
",Eke,appleguy
909,2015-12-03 21:16:43,"@Eke setting `placeholderFadeDuration` to 60 will make the animation fade over 60 seconds. I would recommend setting it to 0.4 or 0.2. Moreover, the `placeholderInsets` is the issue you're facing. Simply leave it at the default value of `UIEdgeInsetsZero`.
",levi,Eke
909,2015-12-03 21:18:16,"@Eke hmm, very interesting!  The behavior looks correct EXCEPT of course the fact that it is not removing the placeholder upon the completion of the text rendering.

[edit] - ha @levi is certainly right.  Start by disabling the fade entirely.  That feature is not perfectly reliable and is a bit expensive from a performance perspective because it performs the fades even for things that are offscreen a bit.  It will actually be very simple to improve it using the new ASInterfaceState parameter (we can simply check if the interfaceState is Visible before initiating the fade), but it doesn't work that way today.  I am sure you'd be able to make that change if you are interested in keeping the fade.
",appleguy,Eke
909,2015-12-03 21:18:16,"@Eke hmm, very interesting!  The behavior looks correct EXCEPT of course the fact that it is not removing the placeholder upon the completion of the text rendering.

[edit] - ha @levi is certainly right.  Start by disabling the fade entirely.  That feature is not perfectly reliable and is a bit expensive from a performance perspective because it performs the fades even for things that are offscreen a bit.  It will actually be very simple to improve it using the new ASInterfaceState parameter (we can simply check if the interfaceState is Visible before initiating the fade), but it doesn't work that way today.  I am sure you'd be able to make that change if you are interested in keeping the fade.
",appleguy,levi
908,2016-01-11 13:17:45,"@wy19901227 @appleguy I've observed this issue since ASDK was 1.2.2 and it appears randomly.
But it can be fixed with setting cell's selectionStyle to none.
",vitalybaev,appleguy
907,2015-12-04 01:55:55,"@Adlai-Holler Interesting.  Seems a bit silly.  This is probably a vestigial behavior from Paper where, perhaps, there were some views that may have linkified text returned from the server but we didn't want any part of the gesture system to react to this.

Do you think the fix is as simple as deleting the if() at the end of the quoted code segment?  That's the fix I would suggest, but this is an area I am not deeply familiar with in the codebase.  @bdaz did work in this area a long time ago, as did @ocrickard, but I think it's a longshot that they would know the answer so let's hypothesize a solution proactively!
",appleguy,Adlai-Holler
907,2015-12-04 02:02:18,"lol yeah, I vaguely remember something like @appleguy is describing here. I'd be in favor of just deleting the delegate method.
",ocrickard,appleguy
907,2015-12-05 19:04:57,"Thank you @Adlai-Holler !
",appleguy,Adlai-Holler
903,2015-12-01 19:50:25,"Thanks @JohnWong !!
",appleguy,JohnWong
902,2015-12-02 15:24:32,"@aaronschubert0 that's the thing, I'm currently working _only_ on the UI, there's no heavy logic. 

I have also blamed myself for adding `reloadData` for when orientation changes which did occur in viewDidLayoutSubviews, but I have fixed that one too, still no luck. Please note currently app does NOT change orientation yet.

I'll post a bit of how Tableview and Collectionviews are made, let me know if there's something I'm missing, but as you can see, code is very simple:


",jakubheglas,aaronschubert0
902,2015-12-02 15:55:51,"@aaronschubert0 I'm afraid the freeze occurs in more situations (for example when switching to the collectionview). All these have constraint and transform updates in common. Let me post both methods below.

Also, I'm updating original post with what it looks like when app launches and the content doesnt show up, it's a third example in the list. When that happens, you can be sure the app will freeze on interaction.




",jakubheglas,aaronschubert0
902,2015-12-02 16:12:33,"What is the backtrace?  Is the ""freeze"" a deadlock?

Sent from my iPhone

> On Dec 2, 2015, at 7:55 AM, Jakub Heglas notifications@github.com wrote:
> 
> @aaronschubert0 I'm afraid the freeze occurs in more situations (for example when switching to the collectionview). All these have constraint and transform updates in common. Let me post both methods below.
> 
> Also, I'm updating original post with what it looks like when app launches and the content doesnt show up, it's a third example in the list. When that happens, you can be sure the app will freeze on interaction.
> - (IBAction)calendarButtonTap:(id)sender {
>   [self highlightTimelineButton:NO sender:sender];
>   [self toggleCalendarWithScale:YES];
>   }
> - (void)toggleCalendarWithScale:(BOOL)scale {
>   [self updateTimelineTitleWithDate:self.calendar.currentPage show:!self.isCalendarActive];
>   
>   // Show Calendar
>   if (!self.isCalendarActive) {
>     self.tableWrapperTopConstraint.active = NO;
>     self.tableWrapperTopCalendarConstraint.active = YES;
>   
>     if (scale) {
>       self.calendar.transform = CGAffineTransformMakeScale(0.9, 0.9);
>     }
>     [UIView animateWithDuration:0.4 delay:0 usingSpringWithDamping:0.85 initialSpringVelocity:1 options:UIViewAnimationOptionCurveEaseOut animations:^{
>       if (scale) {
>         self.calendar.transform = CGAffineTransformIdentity;
>       }
>       self.calendar.alpha = 1;
>       [self.view layoutIfNeeded];
>     } completion:NULL];
>     self.timelineArrow.transform = CGAffineTransformMakeRotation(DEGREES_TO_RADIANS(180));
>   
>     // Hide Calendar
>   } else {
>     self.tableWrapperTopCalendarConstraint.active = NO;
>     self.tableWrapperTopConstraint.active = YES;
>   
>     if (scale) {
>       self.calendar.transform = CGAffineTransformIdentity;
>     }
>     [UIView animateWithDuration:0.4 delay:0 usingSpringWithDamping:0.85 initialSpringVelocity:1 options:UIViewAnimationOptionCurveEaseOut animations:^{
>       if (scale) {
>         self.calendar.transform = CGAffineTransformMakeScale(0.9, 0.9);
>       }
>       self.calendar.alpha = 0;
>       [self.view layoutIfNeeded];
>     } completion:^(BOOL finished) {
>       if (scale) {
>         self.calendar.transform = CGAffineTransformIdentity;
>       }
>     }];
>     self.timelineArrow.transform = CGAffineTransformIdentity;
>   }
>   
>   // Save calendar visibility status
>   self.isCalendarActive = !self.isCalendarActive;
>   }
> - (IBAction)tableSwitchTap:(id)sender {
>   [self highlightTimelineButton:NO sender:sender];
>   
>   // Stop scrolling
>   [self.tableView setContentOffset:self.tableView.contentOffset animated:NO];
>   [self.photoGridCollectionView setContentOffset:self.photoGridCollectionView.contentOffset animated:NO];
>   
>   // Show Photo Grid
>   if (!self.isPhotoGridActive) {
>     self.tableSwitchIcon.image = [UIImage imageNamed:@""IconTimeline""];
>   
>     self.collectionWrapper.transform = CGAffineTransformMakeTranslation(0, 50);
>     self.collectionWrapper.alpha = 1;
>   
>     [self.tableWrapper setEasingFunction:easeOutExpo forKeyPath:@""transform""];
>     [self.tableBackground setEasingFunction:easeOutExpo forKeyPath:@""transform""];
>     [self.collectionWrapper setEasingFunction:easeOutExpo forKeyPath:@""transform""];
>   
>     [UIView animateWithDuration:0.5 animations:^{
>       self.tableWrapper.transform = CGAffineTransformMakeTranslation(0, self.tableWrapper.frame.size.height);
>       self.tableBackground.transform = CGAffineTransformMakeTranslation(0, self.tableBackground.frame.size.height);
>       self.collectionWrapper.transform = CGAffineTransformIdentity;
>   
>     } completion:^(BOOL finished) {
>       self.tableWrapper.alpha = 0;
>       self.tableBackground.alpha = 0;
>       [self.tableWrapper removeEasingFunctionForKeyPath:@""transform""];
>       [self.tableBackground removeEasingFunctionForKeyPath:@""transform""];
>       [self.collectionWrapper removeEasingFunctionForKeyPath:@""transform""];
>     }];
>   
>   // Hide Photo Grid
>   } else {
>     self.tableSwitchIcon.image = [UIImage imageNamed:@""IconPhotoGrid""];
>   
>     self.tableWrapper.alpha = 1;
>     self.tableBackground.alpha = 1;
>     self.tableWrapper.transform = CGAffineTransformMakeTranslation(0, self.tableWrapper.frame.size.height);
>     self.tableBackground.transform = CGAffineTransformMakeTranslation(0, self.tableBackground.frame.size.height);
>   
>     [self.tableWrapper setEasingFunction:easeOutExpo forKeyPath:@""transform""];
>     [self.tableBackground setEasingFunction:easeOutExpo forKeyPath:@""transform""];
>     [self.collectionWrapper setEasingFunction:easeOutExpo forKeyPath:@""transform""];
>   
>     [UIView animateWithDuration:0.5 animations:^{
>       self.tableWrapper.transform = CGAffineTransformIdentity;
>       self.tableBackground.transform = CGAffineTransformIdentity;
>       self.collectionWrapper.transform = CGAffineTransformMakeTranslation(0, 50);
>       self.collectionWrapper.alpha = 0;
>   
>     } completion:^(BOOL finished) {
>       [self.tableWrapper removeEasingFunctionForKeyPath:@""transform""];
>       [self.tableBackground removeEasingFunctionForKeyPath:@""transform""];
>       [self.collectionWrapper removeEasingFunctionForKeyPath:@""transform""];
>     }];
>   }
>   
>   // Save calendar visibility status
>   self.isPhotoGridActive = !self.isPhotoGridActive;
>   }
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,aaronschubert0
902,2015-12-03 04:16:56,"@appleguy So I did my best to ""freeze"" the app while being attached to debugger, hit the home button and waited and waited.. and no crashlog. I am not using rasterization anywhere so far.

Now the fun part — when I was typing this, I tried to open the app, left it where it was and then the screen went out. After I picked it again to unlock it, I can see lockscreen with animated unlock prompt and everything, but it doesnt respond to any of my taps and swipes, AT ALL. So I've killed the app using Xcode and now I had a black screen. To fix this I had to longpress power button to invoke shutdown prompt and dismissed it, then I was back on home screen.

No I don't use jailbreak :))) So..what the what??
",jakubheglas,appleguy
900,2015-12-03 19:16:06,"@Adlai-Holler thanks for the details!  I had actually run into this during development of my working window removal diff - if you look, you can see the debug logs I'd added.  However, I had reason to suspect it was specific to that change, as it had never occurred before and would go away when stashing the change.  It looks like it just changed timing or access patterns in a way that made it more common.

This is a nasty issue, so I will try to find the right fix today.
",appleguy,Adlai-Holler
900,2015-12-04 03:56:16,"@zintus it would be great if you have a full thread backtrace (symbolicated crashlog would do the trick).  I want to look at any and all instances of this terrible issue.

@Adlai-Holler I have been able to reproduce reliably with your test project.  Thanks for developing it — it will really accelerate debugging, because previously I relied on a flow in the Pinterest app (with a large number of nodes onscreen, and other processes going on in the background).

Merging in / tracking https://github.com/facebook/AsyncDisplayKit/issues/902 in this task as I'm nearly certain they will be addressed by the same fix.

I ended up not having enough time to focus on this today, so I am targeting a fix in 1.9.3 — I believe I will be able to ship this by Sunday night.
",appleguy,Adlai-Holler
900,2015-12-04 06:05:02,"@Adlai-Holler what a nasty bug.  I completely agree regarding the property system.  It is the largest essential refactor I see in the project right now.

Another underlying factor is the extremely coarse granularity of _propertyLock; it is used for essentially everything.  I think it may be possible to break this cycle by splitting out a _loadLock or similar.

If closer analysis reveals the lock split will not quite avoid a different point of dependency occurring, I believe we can break the chain at the __rasterizedContainerNode level. Passing that state from above whenever a node enables or disables rasterization would also optimize certain calls in a way that could be net-beneficial for performance.
",appleguy,Adlai-Holler
900,2015-12-07 03:33:02,"@zintus @Adlai-Holler fixed with https://github.com/facebook/AsyncDisplayKit/pull/915

Thanks a lot for all the detail you provided on this.  I'm quite happy with the fix, as it notably improves the architecture / elegance of a couple core mechanics of the framework - and is a platform that will allow further refactoring improvements in the near future.

Please test it out, either on master now or 1.9.3 shortly, and file a new issue for any problem you encounter.  I'm pretty confident it won't be a deadlock, though :)
",appleguy,Adlai-Holler
899,2015-12-07 03:44:50,"@appleguy I do have one more question regarding this. Now the scale animation is running correctly, parent's layout function is called at each step of animation. Is this the desired behavior? Right now my node hierarchy is simple but I wonder if it'll be expensive to use such animations in more complex nodes.
",doguhanokumus,appleguy
898,2015-12-01 12:39:41,"@Adlai-Holler Thanks for bringing this up! It's absolutely true that after a relayout that doesn't result in a size change, the container view (i.e table view or collection view) doesn't need to be bothered. The reason it is still notified was that I wanted to make use of built-in reload animations (fb18e76). But after we replaced reloads with empty transactions in 5701cbb, that reason is no longer valid! Unnecessary empty transactions are inefficient. Sorry for triggering them in the first place :)
",nguyenhuy,Adlai-Holler
898,2015-12-01 20:08:04,"Ah! That makes sense @nguyenhuy. To be clear, this hasn't become a practical issue for me yet but I do it so I can sleep better =)
",Adlai-Holler,nguyenhuy
897,2015-12-04 03:35:58,"@tettoffensive The best way to fix this right now is actually to call setInterfaceState: yourself on the node.  I have the property set to readonly, but that's simply because I wanted to provide better documentation for the appropriate use cases to do this before making the API that flexible.

Likewise, I apologize for this regression, and thank you for reporting it.  Though it immediately makes sense and the cause is well-understood, I did NOT realize this would affect current clients of the framework and would have proceeded differently with this change had I known that.

Could you share with me the details on why you are containing a node directly within a standard UIView?  There are a couple behaviors that don't work well with this; most notably, nothing will trigger rendering (or indeed even data fetching) before the view is added to the hierarchy, and that often doesn't happen until the element is visible onscreen.  So it basically deactivates all of the fancy preloading stuff that makes ASDK apps feel ""seamless"" in that content is usually there and rendered even with smooth scrolling.  You will, of course, still be getting big benefits from rendering staying off the main thread.

You might consider using ASViewController in your scenario.  Though it doesn't support interfaceState today, it will in an upcoming release this month.  It will not only automatically set interfaceState on the node tree that it hosts, but also allow the user to set custom interface states so you can trigger data loading or rendering before the VC is visible.

@Adlai-Holler — I think your suggested workaround is the best course of action until these other usages / flexibilities of interfaceState are built out.  Once those things are done, we might consider restricting use of nodes in arbitrary UIViews, perhaps by requiring a certain property be enabled that explains to engineers the implications / tradeoffs of doing this.  The other path is to consider this a valid use case for ASDK and retain first class support for it, with automatic interfaceState changes according to the limited information available from UIView / CALayer hierarchy change notifications.  My main hesitation with that is simple: I'm not that sure what use cases that would help support, since it seems to me like a pretty bad issue for asynchronous rendering to never be triggered until something is visible.
",appleguy,Adlai-Holler
897,2015-12-04 16:15:32,"@appleguy while most of the time my use of ASDK is for complex hierarchies
of views involving table and collection views and custom nodes, I got used
to using ASNetworkImageNode (along with caching via SDWebImage). It is
extremely convenient for things like user profile photos. And I often just
need that on a UIView like the toolbar or profile view. Since UIView has
addSubnode and there has to be some entry point into AS mode hierarchy, I
figured this was supported.
I like the flexibility of being able to mix like this without needing more
complexity.
",tettoffensive,appleguy
897,2015-12-04 19:35:27,"@appleguy What he said.
",Adlai-Holler,appleguy
897,2015-12-07 18:20:52,"@appleguy Sorry wasn't able to test until this morning. Just pulled the latest master which I believe has the fix. It seems to work. Thanks @Adlai-Holler!
",tettoffensive,appleguy
897,2015-12-07 18:20:52,"@appleguy Sorry wasn't able to test until this morning. Just pulled the latest master which I believe has the fix. It seems to work. Thanks @Adlai-Holler!
",tettoffensive,Adlai-Holler
896,2015-12-04 03:42:37,"@tomizimobile thanks for the test project!  This is unusual, not something I've seen before even though I have been focusing on this very use case (Collections containing Tables and other Collections; Tables containing Collections).

I am now planning a 1.9.3 to launch by the end of this weekend to resolve two recently discovered issues.  I will make this the third, and expect to have a solution for you in the next couple days.  Let me know if you discover any additional issues, or a fix / workaround for this one.
",appleguy,tomizimobile
896,2015-12-04 05:23:19,"@tomizimobile so I believe this is fixed in master - please try it out and let me know what you find!  I also verified memory behavior — using Leaks / Allocations tool, ensured all of the ASDK-associated objects that are created by the button press are torn down. It seems stable over multiple launches of the modal view.

I was studying the code for this and realized the most likely cause is a ""performOnMain"" call that happens just before deallocation.  Then the main call occurs with something like reloadData, in the next runloop, and triggers the layout assertion.

Then I realized that a diff I had open to review would almost certainly address this condition.  Turns out it did, which is an awesome coincidence (and shows how a layout change triggered by tear-down could even cause asynchronous data reloading -- no good!).  https://github.com/facebook/AsyncDisplayKit/pull/898  Thank you @Adlai-Holler !
",appleguy,tomizimobile
896,2015-12-04 13:51:38,"@appleguy Fantastic! Master fixes that issue in my current project, as well as another workaround I had in place with some other `ASCellNode` objects that contain an `ASTableNode` that I just ran into yesterday.
",tomizimobile,appleguy
896,2015-12-06 00:37:46,"@tomizimobile great news!  Bummed you then promptly ran into the deadlock - lol :(.  We'll get this patched up quickly.
",appleguy,tomizimobile
896,2015-12-09 18:27:53,"@tomizimobile I'm the author of this bug and would like to express my sincere apology! :cry: 
",nguyenhuy,tomizimobile
894,2015-11-30 04:25:06,"@Adlai-Holler woah, super fast - thanks!

BTW I now have a plan to quite robustly fix ASRangeController with relatively little work, reaching a stable state from which we can survey any longer term directions.  There are two key steps:
1. Finish the elimination of the workingWindow.  This patch already functions, but it needs testing and especially validation of display cancellation / multiple display calls before the previous display has completed.  This will make sure the ranges don't rely on external state that isn't controlled in the setInterfaceState: codepath.
2. Replace the -update method in ASRangeController to simply request the full set of index paths within each range, on every update.  Create a 4th set by taking the union of the 3 range sets (or N), and iterate over each indexPath.  For each, test if it exists in each of the individual ranges, and set the corresponding ASInterfaceState bitfield accordingly.  Finally, obtain the ASCellNode - and crucially - first check if cell.interfaceState != interfaceState.  Only if the root / cell itself doesn't match, then proceed to make a recursive call to setInterfaceState: on all children, each of which will take action only on the elements of the state which have changed.

This will resolve a great deal of issues, including the one you discovered related to existing indexPaths changing to different cells, because it will be up to the cells to understand / ""remember"" what states they have transitioned through and identify which states are changes or no-ops.

We will need one new method to go alongside enterInterfaceState: and exitInterfaceState: -- in fact, we should consider eliminating / making private those two methods.  The new one is basically just recursivelySetInterfaceState:, since with this model the controller won't actually know which states are being entered vs exited (but the node will).

The last detail here I haven't thought through is how to exit cells from /all/ ranges.  I think this could be pretty straightforward, although an efficient solution that doesn't require visiting / checking the interfaceState of every completedNode may be nontrivial.  I'd be supportive of an ""inefficient"" but highly robust solution as our next step, especially because even the inefficient solution is likely efficient enough since we're talking about a large number of individual property accesses with a single integer comparison.
",appleguy,Adlai-Holler
894,2015-11-30 05:20:32,"@Adlai-Holler going to land this now, and release 1.9.2 - unless you would suggest holding for anything?  I have several other changes planned, but I will be sparse until the weekend.

If master is good enough for 1.9.2, then I would land the CK text engine after branching, and start to make risky changes to the workingWindow / ASRangeController.  Ideally, this becomes ""2.0 Beta"" and may see one release as such before GM.  I've missed by previous November deadline, but there is an outside chance that December will work!
",appleguy,Adlai-Holler
894,2015-11-30 05:21:56,"@appleguy Nice! Hold up for a minute while I put up this PR to use the lock scoping pattern.
",Adlai-Holler,appleguy
893,2015-11-29 01:12:56,"@stowy Thanks for reporting.  What kind of collection layout are you using?  Supplementary nodes are supported out of the box with Flow Layouts, but for custom layouts, it is necessary that you implement the ...LayoutInspecting API / delegate.  An example of this is here: https://github.com/facebook/AsyncDisplayKit/pull/879/files  The author of the example is also the author of the supplementary node support, so if you provide more detail on your implementation, we should be able to help resolve any issues.

@levi in any case, we should ensure that it is very difficult to cause a crash even if LayoutInspecting or something else is not implemented correctly.

@stowy can you please include a /full/ crash log of where the crash is occurring, include any console logs (such as strings printed by an NSException), and describe what action causes the crash? (simply launching the app / viewing the collection, or if it requires scrolling, etc)
",appleguy,stowy
893,2015-11-29 01:43:26,"Thanks @appleguy for the quick response. I am using a plain `UICollectionViewFlowLayout`. Not subclassed.  I have done a quick conversion of my existing UICollectionView implementation to ASCollectionViewController but am returning the correct ASCellNodes for all views.

It occurs the first time the header supplementary view is due to be displayed.

Here are screenshots of the debugging and the console output:
[ConsoleOutput.txt](https://github.com/facebook/AsyncDisplayKit/files/46449/ConsoleOutput.txt)
<img width=""1125"" alt=""screenshot 2015-11-28 17 39 21"" src=""https://cloud.githubusercontent.com/assets/5924628/11454916/cbdf50fe-95f6-11e5-8bbf-edc7acb5cacf.png"">
<img width=""1141"" alt=""screenshot 2015-11-28 17 39 00"" src=""https://cloud.githubusercontent.com/assets/5924628/11454917/cbfdef28-95f6-11e5-9471-3bf5c6cde95f.png"">
<img width=""816"" alt=""screenshot 2015-11-28 17 38 13"" src=""https://cloud.githubusercontent.com/assets/5924628/11454919/cbfe9b76-95f6-11e5-9ae2-b68e7550b044.png"">
<img width=""1169"" alt=""screenshot 2015-11-28 17 37 56"" src=""https://cloud.githubusercontent.com/assets/5924628/11454918/cbfe94aa-95f6-11e5-957e-c9320a267ab2.png"">
",stowy,appleguy
893,2015-11-30 01:17:14,"@stowy awesome, thanks for the details.  What commit hash is the HEAD of your version of ASDK?  Can you re-link your project against the latest master version and let me know if the crash either goes away or changes?

I notice in the stack some stuff about GPRaptorEngine, and then a trampoline call.  Are you absolutely certain that the asyncDataSource and asyncDelegate are in a consistent state?  Remember, ASCollectionView has special behavior that creates a separation between the UIKit layer and the ASDK layer to facilitate asynchronous computation, so if your subclass of ASCollectionView is doing fancy stuff at the UIKit layer (such as calling UICollectionView methods that aren't bridged / implemented by ASCollectionView), it could cause a variety of issues like this.

It may well be that the bug is in ASDK, but it would be important to know if the reason is that ASDK is missing an override for some UICollectionView method that we didn't think of which your class may be using.  cc @levi 
",appleguy,stowy
893,2015-11-30 01:46:04,"@stowy I'm curious to see your implementation of `ASCollectionViewDelegateFlowLayout` and `ASCollectionViewDataSource`. Posting those will help shed some light into why the initial supplementary node is not being populated in the data source.
",levi,stowy
893,2015-12-02 02:35:54,"Hi @appleguy and @levi, I have tried reloading the source using the latest commit on master, and no changes. I have re-reviewed the collection view flow layout delegate `ASCollectionViewDelegateFlowLayout` and datasource methods and stepped through the internal implementation of the delegate, the correct sizes and nodes are being returned. 

What I still cannot see is where the supplementary nodes are added to the completed nodes, as you can see I am returning the supplementary node in my datasource and it is being added to the pending nodes, but pending nodes is then set to nil, without the node being added anywhere. The nil error is coming when the data controller tries to find the supplementary node in its _completedNodes array. 
",stowy,levi
893,2015-12-02 02:35:54,"Hi @appleguy and @levi, I have tried reloading the source using the latest commit on master, and no changes. I have re-reviewed the collection view flow layout delegate `ASCollectionViewDelegateFlowLayout` and datasource methods and stepped through the internal implementation of the delegate, the correct sizes and nodes are being returned. 

What I still cannot see is where the supplementary nodes are added to the completed nodes, as you can see I am returning the supplementary node in my datasource and it is being added to the pending nodes, but pending nodes is then set to nil, without the node being added anywhere. The nil error is coming when the data controller tries to find the supplementary node in its _completedNodes array. 
",stowy,appleguy
893,2015-12-02 03:21:33,"@stowy sounds like there's a misconfiguration in the data source of the collection view. If you'd be able to share with me a generic version of your `ASCollectionViewDataSource` and `ASCollectionViewDelegateFlowLayout` implementation, I'll be able to help pin-point where this issue is coming from. This also sounds like something that I'll be able to prevent happening in the future with an assertion. Send it over when you get a chance, would be super helpful to learn about alternative use implementations of supplementary nodes.
",levi,stowy
893,2015-12-02 04:40:14,"OK thanks Levi will do.  I will review your example and see if I can figure
out where my current implementation differs. If i don't work it out I'll
send you the code example,  otherwise I'll let you know what I find.

On Tuesday, 1 December 2015, Levi McCallum notifications@github.com wrote:

> @stowy https://github.com/stowy sounds like there's a misconfiguration
> in the data source of the collection view. If you'd be able to share with
> me a generic version of your ASCollectionViewDataSource and
> ASCollectionViewDelegateFlowLayout implementation, I'll be able to help
> pin-point where this issue is coming from. This also sounds like something
> that I'll be able to prevent happening in the future with an assertion.
> Send it over when you get a chance, would be super helpful to learn about
> alternative use implementations of supplementary nodes.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/issues/893#issuecomment-161167677
> .
",stowy,stowy
893,2015-12-02 23:58:43,"Hi @levi I think the issue may be in inserting and deleting sections. I've tried modifying your sample code to do a  simple insert / delete operation but I'm not having much luck.

Can you check out the example at https://dl.dropboxusercontent.com/u/5157106/ASCollectionView-Modified.zip and see what you think?

On reviewing, when I remove the registration and sizing of the supplementary views, this reload (adding / removing of sections), works as expected. When I register the supplementary views, the reload crashes the app. So I feel like this is definitely an unexpected behavior. 
",stowy,levi
893,2015-12-03 16:43:57,"@stowy thanks including the simple project!  I'll have some time for the next couple days to pull it down and help diagnose this issue.
",levi,stowy
893,2015-12-03 20:52:43,"cool thanks @levi. The reload with supplementary views works if you just call `reloadData` but if you want to animate adding and removing of sections with the supplementary views it's not a good time. I'm pretty sure this is the main issue in my larger project.
",stowy,levi
893,2015-12-04 03:59:35,"@stowy - thanks for taking the time to make the sample app.  That will really help us move more quickly here.

I am tagging this for 1.9.3 and will try my absolute best to get a fix rolled out this coming Sunday night with that release.
",appleguy,stowy
893,2015-12-04 06:16:44,"Sounds great thanks guys much appreciated.

On Thursday, 3 December 2015, appleguy notifications@github.com wrote:

> @stowy https://github.com/stowy - thanks for taking the time to make
> the sample app. That will really help us move more quickly here.
> 
> I am tagging this for 1.9.3 and will try my absolute best to get a fix
> rolled out this coming Sunday night with that release.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/issues/893#issuecomment-161867866
> .
",stowy,stowy
893,2015-12-07 05:26:17,"@levi thanks so much for fixing this on a Sunday night!  @stowy, please try it out and let us know either way.
",appleguy,levi
893,2015-12-07 05:26:17,"@levi thanks so much for fixing this on a Sunday night!  @stowy, please try it out and let us know either way.
",appleguy,stowy
893,2015-12-08 03:21:40,"Hey guys thanks heaps, I will check it out and let you know tomorrow.
On Sun, Dec 6, 2015 at 9:26 PM, appleguy notifications@github.com wrote:

> @levi https://github.com/levi thanks so much for fixing this on a
> Sunday night! @stowy https://github.com/stowy, please try it out and
> let us know either way.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/issues/893#issuecomment-162415317
> .
",stowy,levi
893,2015-12-08 03:21:40,"Hey guys thanks heaps, I will check it out and let you know tomorrow.
On Sun, Dec 6, 2015 at 9:26 PM, appleguy notifications@github.com wrote:

> @levi https://github.com/levi thanks so much for fixing this on a
> Sunday night! @stowy https://github.com/stowy, please try it out and
> let us know either way.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/issues/893#issuecomment-162415317
> .
",stowy,stowy
893,2015-12-09 00:54:40,"Just checked in the sample project and the original project and in both cases the issue is resolved, thanks @levi and @appleguy 
",stowy,levi
893,2015-12-09 00:54:40,"Just checked in the sample project and the original project and in both cases the issue is resolved, thanks @levi and @appleguy 
",stowy,appleguy
893,2015-12-09 01:43:32,"Glad to hear it, @stowy!
",levi,stowy
892,2015-11-29 06:55:12,"@appleguy  thanks for trying to fix the bug, bug still exists! and another bug created!
here is how I select cells.



then when I scroll down or up without selected cell being disappeared, setSelected:Yes gets called multiple times! 
[sample app](https://db.tt/gszgJZUV)

and here is the new bug:
![cell selection](https://cloud.githubusercontent.com/assets/3206748/11455736/716554a2-9682-11e5-8096-d5768da897cf.gif)
",hashemp206,appleguy
892,2016-06-22 03:56:08,"@hannahmbanana thanks for looking into this. I recall testing this behavior on a vanilla UICollectionView and multiple call were being made. Definitely double check that when diagnosing this. Thanks!
",levi,hannahmbanana
891,2015-11-29 02:31:58,"Thank you very much, I will try it. The version of ASDK in our project is 1.9.1. And, the frequency of this crash is very low...I am very hopeful for the 1.9.1 version ASDK....@appleguy
",tuyuan2012,appleguy
889,2015-11-28 05:01:49,"@appleguy thanks for answer.

Question 1:
Yes. if it's layer.content is nil, it would be re-display. But sometimes it's layer.content is stale not nil.
a stale layer.content must follows scheduled display.

Question 2:
I believe that (avoid cancelling when node `__exitHierarchy`) is good choice.
layer.content should be always fresh or nil when no scheduled display.

I'm glad to learn so much from the library. :)
",molon,appleguy
889,2016-11-15 21:45:51,"@appleguy do you think this is still an issue?
",garrettmoon,appleguy
888,2016-01-11 14:59:16,"@appleguy 

I got this kind of exception as well. when calling method





I use ADK 1.9.3
",kanvuduc,appleguy
886,2015-11-28 03:05:55,"@bimawa the .isFinalLayoutable flag is not intended for users of the framework to set in this situation.  It is actually a very advanced feature that few users should need (@rcancro, we should make sure this is properly documented).

You can check the .calculatedLayout property to get the currently calculated ASLayout, which will not be set until the layout pass is completely done.  However, I caution that what you describe with multiple threads being involved sounds risky / difficult to get right.  I would be happy to advise further if you are able to explain in more detail 1) what you are trying to accomplish, and 2) what the details of your multithreading technique are.
",appleguy,bimawa
886,2015-11-28 06:31:12,"Hi @appleguy, it's again `ReactiveCocoa`, i can't without use it.
I just have loaded Data for my Node from background Threads and if it will do fast, and ADK layoutSpec finish not, I'm catch mutex deadlock. Go to try show in a picture:
![untitled](https://cloud.githubusercontent.com/assets/1393809/11450489/342bffa6-95c3-11e5-92f6-45eddd930afb.png)

I do not know why but something does not work for observe `calculatedLayout` property in RacObserve. However  `self.isFinalLayoutable` Observed perfect in next code:


",bimawa,appleguy
886,2015-11-29 00:09:36,"@bimawa Cool diagram, thanks!  You are one of the only people I know who has attempted to use ReactiveCocoa with ASDK - the only other one I currently know of is @RuiAAPeres.

I think this is very likely to be perilous.  RAC is an amazing, very interesting framework — but these two are not known to be compatible, and from everything I know about RAC, they are pretty fundamentally difficult to integrate.

isFinalLayoutable is not to be used in the way that you're using it.  So be aware that it may seriously break other functionality.  This affects the internals of the layout system in ways that you are not intending, so it isn't a stable solution for what you'd like to do.  I'm not sure how RAC observation works, but if it is at all related to KVO, note that the ASDK properties (intentionally) are not KVO / KVC-compliant.

That said, from the diagram above, a few comments:
- ASLayoutSpec is not mutable after you have returned it from -layoutSpecThatFits:.  So, after the new data arrives, you must not modify any existing layout.  I in fact don't see a need for you to check if the current layout is done.
- Instead, I would expect you need to call something like -invalidateLayout and -setNeedsLayout, possibly -layoutIfNeeded if you want it to occur immediately (although the latter method must be called on the main thread, I'm pretty sure the others are thread safe - look at the implementation to confirm, as it is uncommon to use them off the main thread, but apparently with RAC this may be a useful property).
- It may be better to use a technique such as allocating a new node hierarchy once the new data has returned, and once it has finished layout (you can call -measureWithSizeRange: on any background thread yourself - and it will execute in-line, so you will no when it is done), you can ""wholesale replace"" the entire previous node hierarchy. This would make it so that it doesn't matter if the previous node hierarchy is finished or completed with layout.  You could use something like reloadRow/ItemAtIndexPath: and return the new ASCellNode, or manually replace a subnode of an existing ASCellNode.

I'm sure there are techniques that can be used to make this work, and I am open to changes to ASDK that will improve the compatibility with RAC if they are proposed by the community and don't negatively affect the complexity or behavior of ASDK apps that do not use RAC.  I'll rename this task for further discussion about RAC.
",appleguy,bimawa
886,2015-12-02 09:13:06,"@appleguy yea its not so hard how as it may seem. Just need reserch how working with threads and we can realte this two awesome frameworks together, i think.
I try all ur advice, thx for it!, And yea its realy helped. Now i stay on solution with this code:



After deadline i research this moment better, I am interested to `- (void)layoutDidFinish` method. its too realy helped. If u recomend not use `isFinalLayoutable` i can use myself var, right?
Thx for `future` branch! :wink: 
",bimawa,appleguy
886,2015-12-02 10:49:55,"From my experience with RAC and AsyncDisplayKit, I keep RAC's logic entirely on the ViewModel side, and the View is completely oblivious about this. Given this:
1. RAC tends to add a bit of overhead (performance hit). This might be acceptable, but if you are using AsyncDisplayKit, that performance hit, might be too much for you.
2. Threading is really hard, and it seems, there are a lot of places where your solution can go wrong. As @appleguy said, you shouldn't rely on `isFinalLayoutable`. 

@appleguy 

> I'm not sure how RAC observation works, but if it is at all related to KVO, note that the ASDK properties (intentionally) are not KVO / KVC-compliant.

It's related to KVO. 

@bimawa 
Another thing (related to RAC specifically) :



You should avoid injecting side effects with `subscribeNext`. It's a better practise to go like this:



The code above is not exactly like the one you have, but in a nutshell, it's preferable to bind the result to the variable via the `RAC()` macro. You should also favor `filter` instead of using stuff like `if (!isFinalLayout.boolValue)`.
",RuiAAPeres,appleguy
886,2015-12-02 10:49:55,"From my experience with RAC and AsyncDisplayKit, I keep RAC's logic entirely on the ViewModel side, and the View is completely oblivious about this. Given this:
1. RAC tends to add a bit of overhead (performance hit). This might be acceptable, but if you are using AsyncDisplayKit, that performance hit, might be too much for you.
2. Threading is really hard, and it seems, there are a lot of places where your solution can go wrong. As @appleguy said, you shouldn't rely on `isFinalLayoutable`. 

@appleguy 

> I'm not sure how RAC observation works, but if it is at all related to KVO, note that the ASDK properties (intentionally) are not KVO / KVC-compliant.

It's related to KVO. 

@bimawa 
Another thing (related to RAC specifically) :



You should avoid injecting side effects with `subscribeNext`. It's a better practise to go like this:



The code above is not exactly like the one you have, but in a nutshell, it's preferable to bind the result to the variable via the `RAC()` macro. You should also favor `filter` instead of using stuff like `if (!isFinalLayout.boolValue)`.
",RuiAAPeres,bimawa
886,2015-12-02 11:17:33,"> Another thing (related to RAC specifically) 

@RuiAAPeres Yea i know that. i just research behavior of the different variants.
Thx a lot for u reply, mb later we will be RAC features made simplest 

@appleguy Can i close this issue? Can we continue the discussion?

**UPD**

Best solution, if container not change size, only relayout elements:


",bimawa,appleguy
886,2016-03-24 05:33:36,"@appleguy i start develop wrapping for RAC help me pls made it correctly
I'm wrap ASButtonNode like UIButtonNode and have a plane made similar wrappers for other views
",bimawa,appleguy
885,2015-11-29 02:21:15,"I am glad for your invitation, but I think that I need much more development practices so that I can do a much better PR for our community. Well, I am so sorry that  I can not able to do a PR for the community at this time. In the future, I hope I can do much better for you....@appleguy
",tuyuan2012,appleguy
884,2015-11-26 21:20:51,"Thanks @Adlai-Holler - this makes my Thanksgiving! :-D  @levi, @nguyenhuy, @eanagel if any one of you has a chance to review, please do.  I may land this before anyone else can review (in part because I really trust the four of you, from past experience seeing the quality of your work and testing), but Because this code has had trouble since its inception, additional reviews of fixes are always good to help spot issues. 
",appleguy,Adlai-Holler
884,2015-11-26 22:40:59,"@Adlai-Holler This looks good - definitely some stylistic cleanups / simplifications in here too, which is awesome.  I think we could stand to add some additional comments in the code or give more descriptive names than just ""current..."" for some of the local variables to aid reading and debugging, but at the same time, I think we have reason to believe this code is very close to a stable implementation and it should not need significant changes in the future once it is dialed in.
",appleguy,Adlai-Holler
884,2015-11-27 00:26:25,"@Adlai-Holler regarding tests, that would definitely be an awesome next step to ensure these sensitive code paths never regress again - and thus enable us to refactor with greater ambition and confidence in the future.

We do have an Issue tracking test coverage in general, with ASTableView / ASCollectionView being of key value, so no worry / guilt if you don't have time to do this.  You really have contributed a lot, so I think it is very reasonable to expect another engineer to beef up the tests.  I will make sure we complete this in the next couple months, and specifically before any major refactoring in ASDataController or the base Table / Collection classes.
",appleguy,Adlai-Holler
884,2015-11-27 04:05:04,"Excellent!

Sent from my iPhone

> On Nov 26, 2015, at 4:26 PM, appleguy notifications@github.com wrote:
> 
> @Adlai-Holler regarding tests, that would definitely be an awesome next step to ensure these sensitive code paths never regress again - and thus enable us to refactor with greater ambition and confidence in the future.
> 
> We do have an Issue tracking test coverage in general, with ASTableView / ASCollectionView being of key value, so no worry / guilt if you don't have time to do this. You really have contributed a lot, so I think it is very reasonable to expect another engineer to beef up the tests. I will make sure we complete this in the next couple months, and specifically before any major refactoring in ASDataController or the base Table / Collection classes.
> 
> —
> Reply to this email directly or view it on GitHub.
",Adlai-Holler,Adlai-Holler
883,2016-01-07 04:56:53,"Hey @appleguy I have also found this problem in my sample project, which you can find here - https://github.com/stowy/AsyncDisplayKit/tree/stowy/deal-sample - if you build and run it it will crash due to this issue.

Is there a workaround for this scenario? Funnily enough a very similar scenario in my main project is not crashing.
",stowy,appleguy
882,2015-11-30 01:00:57,"@Adlai-Holler How long does it take to reproduce this condition?  Are there any known steps, such as it seems to occur after a high velocity scroll and then panning backwards into the area recently scrolled past?

Does your app set all of the image identifiers at once, or does it add / change them later?  In this case, do you always see the low-res image or is there sometimes no image at all?
",appleguy,Adlai-Holler
882,2015-11-30 01:09:20,"@appleguy With long feeds of content, this condition will usually pop up after a couple minutes of browsing around. Haven't determined repro steps yet. It sets all the identifiers at once. Sometimes no image is showing, sometimes a low-res one. It has only been observed on multiplex so far but we do not use `ASImageNode` except when we set the image immediately after initialization.

I believe this is more general that ASMultiplexImageNode because there appears to be no way to set `ASImageNode.image` without triggering a display pass. And since the image was set to the high-res data, the multiplex node's job was done. That said, I understand why you don't want to expand the search scope needlessly.
",Adlai-Holler,appleguy
882,2016-01-26 05:25:17,"@Adlai-Holler was this fixed with your changes / should we close this?
",appleguy,Adlai-Holler
882,2016-05-07 21:29:35,"Well nope, this issue is still present now that I'm using multiple image identifiers in my multiplex nodes again. Same condition – somehow we get into this state:



Here are the logs of that particular multiplex image node's loading history:



The last two lines are kind of bad – `displayWillStart:` is calling out to `fetchData` which is synchronously re-fetching the image we just got – but I believe `ASImageNode` will correctly ignore the image update since the images are identical, so it may not be the cause of this problem. Do you agree we should consider removing the `fetchData` call from `displayWillStart`? If so, do you see any ""gotchas"" there that I should think about as I tackle it?

Otherwise, I'm going to keep digging. Log ALL the things! @appleguy 
",Adlai-Holler,appleguy
880,2015-11-24 07:47:38,"Thanks for getting back to me @appleguy. I have a list of twitter users where I persist their image URL's in Core Data. If the user changes an image, Twitter gives back a bad url message and the place holder image remains. The reason I use Core Data is to limit the API calls since Twitter counts them (I think it's 180 per hour) so I update twitter user particulars (followers and images, etc.) lazily as needed.

I wound up solving this by using NSURLConnection and a mutable request (asynchronous) for HEAD which returns status 200 -> do nothing else fetch new URL's from Twitter and reload the ASNetworkImageNode. I used kind of a hack and wait 2 seconds to check URL and I also use a flag to ignore this step if the image downloaded successfully. It was also easier to have the node check itself and add the Twitter request as an operation to the main operation queue. It's not elegant but it works fine. 

I didn't think it would be a big deal to implement completion and failure blocks similar to AFNetworking. I'll take a look at WebASDKImageManager - I used it elsewhere for image caching but I didn't look at it closely for completion blocks. Thanks for the heads up!!
",robmontesinos,appleguy
880,2015-11-24 23:04:42,"Thank you @Adlai-Holler !! I'll give it a look - my solution is working but am not crazy about it - I'll swing around to in a few days and let you know how it turned out. Gracias again!!
",robmontesinos,Adlai-Holler
880,2017-01-13 00:29:44,Closing this issue because it appears that @Adlai-Holler's provided a solution to the issue. ,hannahmbanana,Adlai-Holler
879,2015-11-29 00:32:14,"@smiLLe - you raise a reasonable point.  I have debated with myself about exactly what you're talking about — should ASDK include things such as UICollectionViewLayouts?

One reason it is not an obvious fit is that ASDK currently supports standard UICollectionViewLayouts, without any modification for ASDK (there is no special AS-subclass).  This means that a variety of Cocoapods can be directly imported, and even without modification, they can be kept up to date by following the version changes of the cocoa pod.  That's a compelling advantage.

@levi is also absolutely right that efficiently doing this layout is more work than we have here, and there are libraries to do it.

Perhaps most importantly, I think only about 10% or even less of ASDK apps would use this particular layout.  Though a small impact, the compiled size of a complex, efficient layout may be several dozen KB and would increase the build time of the framework for everyone, so it's something to think about.

All that said...I am thinking we will create a custom AS-based layout class soon, because it will provide important efficiency advantages over UICollectionViewLayout.  In that world, it becomes more interesting to include a library of built-in layouts.  I appreciate very much having your vote on this as it really does influence what we decide to do here.

Note that aside from cocoapods you can search for, this PR was put up a while back that has some pretty hardcore code to do this, and looks like it might be very efficient.  It would probably need some adaptation to use, but may form the base of a future built-in layout.  Thanks @xujim for writing it!!  https://github.com/facebook/AsyncDisplayKit/pull/435
",appleguy,levi
879,2015-11-29 00:52:33,"@levi looks really great!  The only thing preventing landing is the nil messaging with structure return; very quick fix to check, could use the ternary operator or a one-line if with pre declared local variable.

I really need to figure out how to add a diff to someone else's PR, but somehow each time I've tried to do this it has just created problems and not actually worked LOL.
",appleguy,levi
879,2015-11-30 05:23:41,"@levi - thanks for the fix!  Although ironically, I think we still need to set the size to something in the local variable declaration - only Objective-C ivars are guaranteed to be zero'd memory, as far as I have known. 

It is possible that a change in LLVM or some other part of iOS may have made this safe, but I bet the static analyzer would warn.
",appleguy,levi
879,2015-11-30 05:48:07,"@levi one last thing! :-D

/Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKit/ASCollectionView.mm:673:15: error: no viable conversion from 'const CGSize' to 'ASSizeRange'
  ASSizeRange constrainedSize = CGSizeZero;
",appleguy,levi
877,2015-11-22 21:38:20,"@soniccat thanks for investigating this, and especially for providing a test project.

AsyncDisplayKit is not considered compatible with Interface Builder.  If this fix is carefully tested to be safe for all use cases that don't rely on Interface Builder, and also doesn't have any negative impact on performance, I'm happy to take it even if it only benefits IB.  However, the text code paths are tremendously critical to the framework so we need to move very carefully here.

If you could tweak the brace style to match the nearby methods and remove the Podfile.lock method, we'll be closer to landing.

@levi or @rcancro if you happen to have time to look into the test project to understand the issue and the fix, that would be great.  It will take me at least a week to get back to this because of some key deliverables before Thanksgiving, and then visiting family for the rest of the week, but we will keep this PR open until a decision is made.

Good to have you engaging with the project @soniccat - let us know if we can help with your implementation!
",appleguy,soniccat
877,2015-11-24 07:26:21,"@appleguy @levi thanks for your comments and advice. I fixed braces, layer support and Podfile.lock.  
 Now I work at a project where we use xibs and actually I like them. Now I'm investigating of how AsyncDisplayKit can improve performance just in my case.
",soniccat,appleguy
877,2015-11-30 20:15:07,"@soniccat I'm still looking at this one actively - thanks for your patience, and providing detailed information.  Is it correct to understand this diff as automatically re-measuring the text /synchronously on the drawing thread/ in the event there is a size mismatch?

@ocrickard, @levi I would be interested in your thoughts on this behavior.  I really don't think this is necessarily the right behavior to fix the XIB case, but it may be a better behavior for the framework overall.  In the XIB case, we might as well skip the first measurement entirely if the text node's size is not essential to calculating the layout (e.g., if the layout defines the text node's constrained size, but the calculated size is not actually needed).

@nguyenhuy, @soniccat my concern with this is that the overall layout may be incorrect in this scenario, and this behavior could potentially hide the incorrectness in some cases (e.g. making it behave correctly when the actual inputs / code flows are not normal, such as requiring double-sizing of text).

The alternative might be to rely on -invalidateLayout or some other call, and ensure that if the display pass detects there is a mismatch, it triggers as complete of a layout pass is necessary to guarantee that any components that are affected by the newly calculated size of the text have a chance to be adjusted.  This could even mean abandoning the current display pass with an early return and calling -setNeedsDisplay, awaiting a new display call after the relayout is complete?
",appleguy,soniccat
877,2015-12-07 05:21:02,"@soniccat ok, I finally had more time to inspect the surrounding code.  I apologize for how long it took me to review this.  It doesn't meet my standard of service for the community - but this diff is also a bit complex to understand without looking at more of the code.

I am ready to merge the diff, but sadly waited long enough for a conflict to occur.  If you can fix the merge conflicts, I will land this as soon as I see it.  Thanks a lot for debugging this case!
",appleguy,soniccat
877,2015-12-07 22:55:43,"@ocrickard great suggestion.  I think the biggest challenge to this is that the Travis machines have very inconsistent performance - but we could make a test harness that can be run manually on certain devices with known baselines.  I will file a task and try to drive this in the next couple months.  Does ComponentKit have anything comparable, either internally or open?
",appleguy,ocrickard
877,2015-12-08 19:14:32,"@appleguy thanks for your and the project's team attention to my small improvement. I'm really happy that you found it useful. Now I've fixed the conflicts.
",soniccat,appleguy
877,2015-12-08 21:26:44,"@appleguy We do have a jerry-rigged perf testing harness for ComponentKit, but it wouldn't run on any of these open source systems, and honestly it breaks all the time. I hope that someone invests in something along these lines in the near future -- we'd love to use it.
",ocrickard,appleguy
877,2015-12-11 20:23:53,"@soniccat no, thank you!  @ocrickard good to know.  It will probably take until end of Q1 at the earliest, plausibly into Q2, but my team will endeavor to add some automated perf testing capable of being run manually on device by a developer interested in assessing such changes.
",appleguy,ocrickard
877,2015-12-11 20:23:53,"@soniccat no, thank you!  @ocrickard good to know.  It will probably take until end of Q1 at the earliest, plausibly into Q2, but my team will endeavor to add some automated perf testing capable of being run manually on device by a developer interested in assessing such changes.
",appleguy,soniccat
875,2016-03-25 19:23:56,"@yilei @toulouse - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,toulouse
874,2015-11-21 06:22:59,"Oh and @appleguy thanks a lot for the pointer...I applied the change and everything was fixed instantly!  It probably makes sense to keep this issue open for tracking until a decision on inset specs inheriting the flex rules from their child is reached (your call) but I do want to thank you for your help as this problem has been haunting me for a few weeks and it took me forever to isolate it enough that I could open a ticket on it.  This was the only thing standing in my way of converting my whole project to the new layout system and now that this is done I've only got about 20% of my nodes left that need conversion.
",smyrgl,appleguy
874,2015-11-23 20:40:28,"While I believe that the documentation must better communicate that stack-related properties (flexShrink, flexGrow, flexBasis, etc) are only considered when set to _immediate_ children of stack specs, I think the copying behaviour might be good idea and make the layout system more robust. But I agree with @appleguy that it would be confusing if we implemented flexShrink inheritance for some specs (say, inset and ratio specs) and not others. We need to consider the tradeoffs carefully. 

I'm also thinking that maybe all layoutable objects should have flexShrink enabled by default. It actually is consistent with the Flexbox spec and might even improve the experience of new users. But it will be a big breaking change :(
",nguyenhuy,appleguy
873,2015-11-22 21:44:19,"@nguyenhuy I think we should prevent the stack direction from being changed.  Because a layout spec locks down as immutable after it is returned anyway, there is no valid use case for changing the stack direction.

This would be a bit unusual, but let's keep the direction property as writable, but add comments that it can only be set once — and throw an assertion if it is changed after it has already been set.

Implementing justifySelf would be a huge development, as it would allow us to extend this valuable pattern to each item.  I think that would be a ""holy grail"" of layout in ASDK, to be honest :).  We should do more research on whether a) CSS / Flexbox support this, b) React or CK have evaluated supporting this (or do now?), and c) make a final decision on whether we'll aim to do this.  If it looks like it will be too complicated to do, that decision itself is useful as we should look at better documenting alignSelf.
",appleguy,nguyenhuy
873,2015-11-23 18:56:47,"@appleguy I agree that we should keep the direction property as writable. However, I propose a slightly different implementation approach (e61f828), because throwing an assertion if the direction is changed more than once doesn't handle all the edge cases. For example, below code would run just fine with no assertion thrown:



Regarding justifySelf:
- I think CK doesn't supported it as of now, though I'm not sure if CK has evaluated supporting. Not sure about React either. 
- justifySelf is defined in CSS Box spec but not in Flexbox spec. This is probably the reason:

> Flex Items:
> This property does not apply to flex items, because there is more than one item in the main axis. See flex for stretching and justify-content for main-axis alignment. [CSS3-FLEXBOX]

(Source: http://www.w3.org/TR/css-align-3/#justify-self-property)
- I think it will be cool if we decide to implement justifySelf, but we will be pretty much on our own. That's why I asked @rcancro about his idea of its behaviour, because that's the first thing we need to clearly define and I have absolutely no idea.
",nguyenhuy,rcancro
873,2015-11-23 18:56:47,"@appleguy I agree that we should keep the direction property as writable. However, I propose a slightly different implementation approach (e61f828), because throwing an assertion if the direction is changed more than once doesn't handle all the edge cases. For example, below code would run just fine with no assertion thrown:



Regarding justifySelf:
- I think CK doesn't supported it as of now, though I'm not sure if CK has evaluated supporting. Not sure about React either. 
- justifySelf is defined in CSS Box spec but not in Flexbox spec. This is probably the reason:

> Flex Items:
> This property does not apply to flex items, because there is more than one item in the main axis. See flex for stretching and justify-content for main-axis alignment. [CSS3-FLEXBOX]

(Source: http://www.w3.org/TR/css-align-3/#justify-self-property)
- I think it will be cool if we decide to implement justifySelf, but we will be pretty much on our own. That's why I asked @rcancro about his idea of its behaviour, because that's the first thing we need to clearly define and I have absolutely no idea.
",nguyenhuy,appleguy
873,2015-11-29 00:24:42,"@nguyenhuy extremely excited about this patch - thank you!
",appleguy,nguyenhuy
872,2016-10-18 18:31:37,"@appleguy I'm currently working on rewriting our Newsfeed to use AsyncDisplayKit and my use case for wrapping `TTTAttributedLabel` in `ASDisplayNode`. We have a lot of legacy logic using `TTTAttributedLabel` and rewriting it would be an extra effort.
",alexvbush,appleguy
869,2015-11-25 01:58:04,"@tomizimobile Thanks for posting this issue, and sweet test project!

I'm investigating it currently. If I type ""T"", the app requests to delete sections {0, 5, 11} but we end up only deleting section 11 and thus requesting the title for now-gone section 10. The other two indices are dropped somewhere in `+[_ASHierarchyChangeSet sortAndCoalesceChanges:]`. I'll post back here as soon as I discover a fix for this critical issue!
",Adlai-Holler,tomizimobile
869,2015-11-25 02:18:36,"@tomizimobile @tettoffensive As the author of the broken code, I'm really sorry about this issue. I believe #884 will resolve it – it fixed the sample project on my machine. If you have time, could you try replacing the line in your Podfile with

`pod 'AsyncDisplayKit', :git => 'https://github.com/Adlai-Holler/AsyncDisplayKit', :branch => 'FixTableViewUpdatingIssue'`

and running `pod update AsyncDisplayKit` to see if the proposed PR fixes the issue?
",Adlai-Holler,tomizimobile
869,2015-11-25 13:21:49,"@Adlai-Holler That fix seems to be handling deletions pretty fine, but I noticed when putting it into my test project, it has weird behavior when inserting sections. I searched for ""T"" to filter the results, which filters data, and removes sections ""A"", ""J"", and ""Y"". Now, when deleting the search text, all the data is back but the rows in sections ""A"", ""J"", and ""Y"" are doubled-up. 
",tomizimobile,Adlai-Holler
869,2015-11-26 01:20:26,"@tomizimobile OK could you give the latest on that branch a try? I've fixed the duplication issue as well.
",Adlai-Holler,tomizimobile
869,2015-11-26 21:57:17,"@tomizimobile thanks so much for not only providing the project, but helping with followup testing of the patch - it really helps us move quickly and more confidently.  Bummed to hear you needed a weird workaround for a prior version, but sadly I totally understand as a filtering typeahead is a sure way to bust the shady implementation of this code from 1.2.x and even some of the more recent versions :-P.

Of course, it turns out that workaround allowed us to make this code a lot better — I am very glad to hear that we caught the issue of editing a section that hasn't yet been added, since that should absolutely work reliably even if it's possible to avoid in your app.

Thanks as well @tettoffensive for adding more details!

Wondering, have you encountered any other problems with the framework or have feature requests?
",appleguy,tomizimobile
869,2015-11-29 22:41:57,"@appleguy Happy to provide the sample project and follow up with testing - I know how much easier it makes debugging. 

I've only ran across a couple previously reported issues (I've reported https://github.com/facebook/AsyncDisplayKit/issues/860, and https://github.com/facebook/AsyncDisplayKit/issues/261 is a longstanding issue). I might have another issue with an occasional deadlock on collection view updates, but I haven't reliably tracked it down, and I'm not sure if it's an issue with my own code.

Really loving the recent layout spec additions. I don't have any feature requests at the moment, but I'll post them here if I do in the future.
",tomizimobile,appleguy
865,2015-12-04 04:19:53,"@bimawa - hi again!  Thanks for asking...although sadly I have never personally used this API.  It was used it Paper very extensively, and is a useful feature, but it's not well documented.

You might try studying the implementation for any clues, and setting some breakpoints where the string is accessed / used to figure out what is happening to it.

Most importantly — can you try the latest master build?  It has a MAJOR change to the text rendering system that may resolve any bug you're encountering here.  It is equally possible that there isn't exactly a bug, but the API has some kind of unintuitive behavior and needs something else set or configured to work properly.

Let me know what happens when you try master.
",appleguy,bimawa
865,2015-12-04 04:28:47,"> can you try the latest master build?

Now  i use 1.9.1. because of  with a bug in 1.9.2 in NetworkImage. And waiting 1.9.3 )

> Let me know what happens when you try master.

Ok @appleguy 
",bimawa,appleguy
865,2016-01-25 13:59:26,"@bimawa can you test with #1110. With this code it should work


",yury,bimawa
865,2016-01-25 14:02:23,"@yury Cool thx a lot i see that later.
",bimawa,yury
865,2016-01-25 21:47:19,"I didn't realize this was a bug / there was a test case - @bimawa don't close too early, thanks so much for reporting this!  Certainly reopening until we can get a confirmed fix.
",appleguy,bimawa
865,2016-01-26 03:15:41,"@bimawa please test!  email me with any issues - or add a test case in a PR, would really love to see it!  asyncdisplaykit@gmail.com
",appleguy,bimawa
865,2016-01-26 05:33:46,"@appleguy ok Thanks a lot !
",bimawa,appleguy
864,2015-11-20 03:40:32,"@appleguy Thanks so much for your answer. I'm very sorry for your travel. :)

With the answer, I have checked the source with `recursivelyEnsureDisplay` , it just call `[subnode.layer displayIfNeed]`. But in my issue , the reason is no `[subnode.layer setNeedsDisplay]` be called.

I have update my test project to describe better with the issue, and my current solution in `TimelinePopoverNode.m`->



Because I'm not familiar with ASDK much.
So I want to know whether the solution I gave in floor 1(add `[_layer setNeedDisplay]` in `__setSafeFrame`) will take some adverse effects.
",molon,appleguy
863,2015-11-21 00:30:06,"Thank you very much,I will try your methods rightnow.....@appleguy @nguyenhuy
",tuyuan2012,nguyenhuy
863,2015-11-21 00:30:06,"Thank you very much,I will try your methods rightnow.....@appleguy @nguyenhuy
",tuyuan2012,appleguy
863,2015-11-25 02:34:44,"I have try many ways to solve the problem....Finaly，I use reloadDataImmediately and the editing commands of insert, delete, reload, move, etc to meet different situations.....Thank you very much@appleguy @nguyenhuy
",tuyuan2012,nguyenhuy
861,2015-11-19 19:04:26,"@Adlai-Holler this explains very well my issue, I have duplicate nodes and sometimes incorrect indexPaths after having fetched a second page of data.
",1nput0utput,Adlai-Holler
861,2015-11-30 01:11:54,"@Adlai-Holler solid debugging here — a very clear explanation of the problem.  I think this is strong support for the impression that ASRangeController needs its first big refactor, as today its core logic is from the same era as the original ASDataController (!!!).

@1nput0utput could you share any details on the issue you encountered?  Was your case specific to reloadData (and thus fixed by the patch linked above), or is the editing scenario described later the one you are seeing?

As per usual with these issues, not having a test case is one inhibition to fixing with confidence.  I'm actively mucking about in ASRangeController (and @levi too, who did a sweeping cleanup of naming and organization of the file in prep for deeper changes).  But with the weekend dwindling, I may not be able to fix this in time for 1.9.2...

The PR I just landed, with ASInterfaceState, holds the potential to help us fix this.  It makes nodes tolerant to ""sloppy"" behavior of a class like ASRangeController, in that if the class were too chatty and told it to enter or exit a state multiple times, it would short-circuit and not actually cause errant calls to fetchData / clearContents / etc (this was not the case before the patch).  So if we found the right point at which to do a reconciliation (setting the intended state on all the nodes involved), it could actually be pretty efficient.

The ideal refactor for ASRangeController will be to eliminate ASRangeHandler entirely, and call setInterfaceState only once per node on a given pass.  This would particularly optimize the case being described here where new / replacement nodes may need to have multiple elements of the state set (such as visible, display, fetchData).
",appleguy,Adlai-Holler
861,2015-12-04 16:07:00,"@appleguy @Adlai-Holler Here's the crash I get beside the duplicates, which seems to happen mostly on iOS 8 for some reason. The crash is happening when the app is brought in foreground. I don't use reloadData, I let the fetchedResultController do the job. I am currently using the master branch.


",1nput0utput,appleguy
861,2015-12-04 16:07:00,"@appleguy @Adlai-Holler Here's the crash I get beside the duplicates, which seems to happen mostly on iOS 8 for some reason. The crash is happening when the app is brought in foreground. I don't use reloadData, I let the fetchedResultController do the job. I am currently using the master branch.


",1nput0utput,Adlai-Holler
861,2016-01-26 05:25:46,"@Adlai-Holler @1nput0utput I'm nearly certain this is fixed in 1.9.6.  Please test the crap out of it!
",appleguy,Adlai-Holler
860,2015-11-29 01:25:19,"@tomizimobile Thank you for the clear description of the issue, especially referencing the version you're using!

I believe this is a real bug, and before noticing this issue had just filed this one: https://github.com/facebook/AsyncDisplayKit/issues/892

@levi, @vitalybaev - your time is very valuable and I have no explicit expectation, so don't worry if you're busy.  If you do have time, this is one of the most valuable areas you could help ASDK!  Next time I'll move a bit more slowly before adding a feature like selection, as it surely has some more details than we first imagined :)
",appleguy,tomizimobile
859,2015-12-04 04:22:44,"Hmm, interesting!  @bimawa this seems like a pretty good feature to have :).  It could be simulated by creating images for the states, using UIGraphicsBeginImageContext() etc, but it is pretty inconvenient to create those images manually.

If you are interested in putting up a PR for this, we can definitely get it ready for merging!  If you don't have time to do this, no worries.

I am going to close this task simply because we have a lot of them open, so for things that will turn into a pull request, we can track further discussion on the PR :)
",appleguy,bimawa
859,2015-12-04 04:25:23,"@appleguy  yea I'm haven't a time now, just interesting future plans about Buttons 
",bimawa,appleguy
858,2015-11-18 15:18:37,"@smiLLe Besides ""space between"", using a flexGrow spacer is the best approach that I know of.

@MarvinNazari What is the constrained size passed to your cell nodes, especially the minimum width? flexGrow is only taken into account if, after the first layout calculation, the horizontal stack takes less space than the minimum width. If you are using a collection view, the default minimum width is 0. In this case, you need to provide a different constrained size:


",nguyenhuy,MarvinNazari
858,2015-11-18 15:48:20,"@nguyenhuy didn't know ASLayoutSpec is cheaper , thanks :) I come from CK and until today i did not use ASDK.

I think @MarvinNazari is missing a Stretch for the footerNode
",smiLLe,nguyenhuy
858,2015-11-18 15:48:20,"@nguyenhuy didn't know ASLayoutSpec is cheaper , thanks :) I come from CK and until today i did not use ASDK.

I think @MarvinNazari is missing a Stretch for the footerNode
",smiLLe,MarvinNazari
858,2015-11-18 17:13:51,"@nguyenhuy Thanks for this detailed answer. I am following ASDK for quite a while now and you contributed some really cool stuff! I have lots of layouting experience in CK and want to help people as much as possible. 
",smiLLe,nguyenhuy
857,2015-11-17 16:28:49,"@nguyenhuy I'm biMawa (Maxim) :P . And yea i see that too i forgot say about that.
",bimawa,nguyenhuy
857,2015-11-29 00:01:07,"@nguyenhuy Thanks for the fix.  This code is a little hard to understand, however - certainly as an author, it would be a bit of a struggle to write.  Is there any way you can think of to trigger this automatically?  Should the image node simply mark itself as needing layout, because I am nearly certain that once the layout pass runs, that will make the supernode perform a layout?  This would be ideal solution, if feasible.
",appleguy,nguyenhuy
855,2015-11-17 13:18:07,"@nguyenhuy Yes I do. Ratio rly help for save proportion for imageNode. But i need a little bit  else. If Image horizontale, as on screenshot, i want get maximum heigh for node, depend of width screen.
![1447764903901](https://cloud.githubusercontent.com/assets/1393809/11212014/167b5ff4-8d55-11e5-8e62-86cec20a2c4e.jpg)
And if Image Verticale pref. it must scale by width screen. And offset other LayoutSpec down by hight
(Example without RatioSpec)
![1447766116587](https://cloud.githubusercontent.com/assets/1393809/11212398/6174093c-8d57-11e5-9dcc-b99d9a3c5d82.jpg)

I'm experiment with it


",bimawa,nguyenhuy
855,2015-11-17 15:10:23,"@nguyenhuy  Wow new example hmm.. I skiped it.
Ok i added Ratio formula, now i must re layout after image loaded. I set delegate for catching `- (void)imageNode:(ASNetworkImageNode *)imageNode didLoadImage:(UIImage *)image` , but how reload Header with better way?



not helped :(
",bimawa,nguyenhuy
855,2015-11-17 15:46:15,"MU HA H AH HAHAHAHAHAA I DID IT!!!!!!
@nguyenhuy  and @smiLLe Guys Than you very much!!!! I Love U ALL!!!!! 



THX For makeing life of iOS developers easier !!!! THX FOR ADK Its a best way for layouting for iOS today.
",bimawa,nguyenhuy
855,2015-11-17 16:02:53,"@nguyenhuy Cool thx a lot for advice!
",bimawa,nguyenhuy
854,2015-11-20 09:10:07,"@appleguy Actually what I'm doing here is during scroll I'm triggering animated images to start animating but only after they are actually visible.  This is the sort of task that `visibleCells` would normally be useful for (which I assume is what this is trying to duplicate) so actually if the nodes aren't ready yet I would simply expect them not to return as they are not ""visible"" yet. :)

Your suggestion for a workaround is unnecessary since a better option would be to just override the node functions  `displayWillStart`, `displayDidFinish` to start it and `didExitHierarchy` to stop it as they will give me more relevant callbacks.  The reason I went after visibleNodes is simply because I want to get only the nodes in the visible view during scroll and in UIKit visibleCells is the best way to do that.
",smyrgl,appleguy
854,2015-11-20 09:17:33,"Oh sorry @appleguy here's the relevant code...I don't think you'll need much more than this but let me know if you need more context.


",smyrgl,appleguy
853,2015-11-20 04:30:40,"@appleguy 
I have provide a test project https://github.com/molon/ASDKIssue853 base on `SocialAppLayout`.
The source I added is in `PostNode.m` and sign with `#warning`

This is the screenshot gif below:
![image](https://raw.githubusercontent.com/molon/ASDKIssue853/master/screenshot.gif)
1. I havn't use any special features.
2. The UILabel is just for test to description the issue. Maybe I will use a third-party image view who can display animated gif or others in the future. After all, wrap traditional views is a necessary skill.

:)
",molon,appleguy
853,2015-11-26 13:29:37,"@appleguy 
I find the problem location.
![image](https://cloud.githubusercontent.com/assets/3739161/11424006/6bf90f7c-9484-11e5-9c6b-6c208ebd24dc.png)

I have try to add below:



in the `- (void)clearContents`.

Then the UILable display ok. 

But I doubt that it's a not good fix.
",molon,appleguy
853,2016-06-17 15:40:19,"@appleguy it's just a test for `initWithViewBlock`, not only for `UILabel`. 
A example: ( `init` of `ASLazyLoadCellNode`)



I want to use `UIActivityIndicatorView`, so I must care about `initWithViewBlock` method.

Maybe the method is not used usually, but it is really needed sometimes.

It's really a bug which should be fixed. isn' it?
I think my solution is well, so I will send a PR to the project?
Please review it. :)

I love the project..
",molon,appleguy
853,2016-06-17 16:08:13,"Thanks for the description! This is certainly a valid use of the API, and yes of course it should work.

In fact, several core objects like the table node and editable text node use this functionality. These elements work in a wide variety of situations without any known regressions, so I suspect there is something such as rasterization causing the issue here. Feel free to send a pull request, and we will continue looking at this in the next few days.

Sent from my iPhone

> On Jun 17, 2016, at 8:40 AM, molon notifications@github.com wrote:
> 
> @appleguy it's just a test for initWithViewBlock, not only for UILabel. 
> A example: ( init of ASLazyLoadCellNode)
> - (instancetype)init
>   {
>   self = [super init];
>   if (self) {
>       _textNode = [ASTextNode new];
>       [self addSubnode:_textNode];
>   
>   
>   
>   }
>   return self;
>   }
>   I want to use UIActivityIndicatorView, so I must care about initWithViewBlock method.
> 
> Maybe the method is not used usually, but it is really needed sometimes.
> 
> It's really a bug which should be fixed. isn' it?
> I think my solution is well, so I will send a PR to the project?
> Please review it. :)
> 
> I love the project..
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",appleguy,appleguy
851,2015-11-30 23:33:04,"@nguyenhuy thanks for your comments - they're very valuable to this important decision.

Is the reason the CSS spec says that because it considers flex-shrink a <number> rather than a boolean?  Maybe 1 is essentially the same as NO / no-op?

As far as affecting current users — I think this is a change we'd make in the 2.0 final version, and indeed this is one of the things that I've emphasized with 1.9 (that the ASLayoutSpec APIs may see changes requiring authors to make modifications, although we did promise that the updates wouldn't be technically difficult to make).  I'm comfortable with very highly emphasizing this in release notes so that there is no ambiguity around the cause of any behavior changes for updaters.  We may even roll a 2.0 Beta first to get the first pass of people experiencing this to see how disruptive it is, and try to spread the word.

@levi, @Adlai-Holler, @rcancro, I'd really appreciate your weighing in on this call!
",appleguy,nguyenhuy
851,2015-11-30 23:33:04,"@nguyenhuy thanks for your comments - they're very valuable to this important decision.

Is the reason the CSS spec says that because it considers flex-shrink a <number> rather than a boolean?  Maybe 1 is essentially the same as NO / no-op?

As far as affecting current users — I think this is a change we'd make in the 2.0 final version, and indeed this is one of the things that I've emphasized with 1.9 (that the ASLayoutSpec APIs may see changes requiring authors to make modifications, although we did promise that the updates wouldn't be technically difficult to make).  I'm comfortable with very highly emphasizing this in release notes so that there is no ambiguity around the cause of any behavior changes for updaters.  We may even roll a 2.0 Beta first to get the first pass of people experiencing this to see how disruptive it is, and try to spread the word.

@levi, @Adlai-Holler, @rcancro, I'd really appreciate your weighing in on this call!
",appleguy,rcancro
851,2015-12-01 20:04:57,"@appleguy A flex-shrink integer specifies the shrink factor of a child, which determines how much it will shrink relative to all other shrinkable children. If all shrinkable children have the same flex-shrink value, negative free space will be evenly distributed among them. So for current users, `flexShrink = YES` essentially means `flexShrink = 1`, which is the default value. A flex-shrink of 0 means not-shrinkable (thus equals `flexShrink = NO`). Negative values are invalid, and so NSUInteger seems like the correct data type.

Original spec: http://www.w3.org/TR/css-flexbox-1/#flex-shrink-factor
Easier-to-understand explanation: https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties#flex-shrink

Similar behaviour for **flex-grow** integer.

If we decide to implement flex-shrink and flex-grow integers, most of the work will be about implementing proportionally shrinking and growing behaviours.
",nguyenhuy,appleguy
851,2015-12-04 03:20:16,"@nguyenhuy wow, very interesting!  I guess we should probably do this, then.

Question - is it not logically possible for flexShrink to be a floating point number?  This is just a curiosity I have about the spec...I don't think it's a priority to implement numeric flexShrink / flexGrow in ASDK for the next several months.
",appleguy,nguyenhuy
851,2015-12-09 18:25:05,"@appleguy Indeed, the spec states that those flex values are floating points. Could you please create a new issue to track this feature, with an appropriate milestone (2.1?). 

And if you close this PR, it means you agree that flexShrink should be enabled by default for all nodes. I can make a new PR to do just that soon afterward :) The diff will be small and should be in the coming release I guess.
",nguyenhuy,appleguy
851,2016-04-15 07:32:32,"@appleguy Will we just merge this in time for 2.0? I think everyone is in favour for this behaviour, and would be good to get in as more people make use of this framework.
",aaronschubert0,appleguy
851,2016-04-20 02:55:19,"@aaronschubert0 @rcancro @nguyenhuy @levi @maicki okay, this change is rebased. I suppose we should land it soon, but perhaps after 1.9.8?  Could anyone at Pinterest try it out and see how many layouts need to be revised?
",appleguy,nguyenhuy
851,2016-04-20 02:55:19,"@aaronschubert0 @rcancro @nguyenhuy @levi @maicki okay, this change is rebased. I suppose we should land it soon, but perhaps after 1.9.8?  Could anyone at Pinterest try it out and see how many layouts need to be revised?
",appleguy,aaronschubert0
851,2016-04-20 02:55:19,"@aaronschubert0 @rcancro @nguyenhuy @levi @maicki okay, this change is rebased. I suppose we should land it soon, but perhaps after 1.9.8?  Could anyone at Pinterest try it out and see how many layouts need to be revised?
",appleguy,rcancro
851,2016-04-20 02:55:19,"@aaronschubert0 @rcancro @nguyenhuy @levi @maicki okay, this change is rebased. I suppose we should land it soon, but perhaps after 1.9.8?  Could anyone at Pinterest try it out and see how many layouts need to be revised?
",appleguy,levi
851,2016-05-11 02:28:00,"I set flexShrink to YES by default within Pinterest and browsed a bit around and it seems like  on the first look nothing broke.

I think we should make a call here and either merge it for master soon or close it.

@appleguy @levi @nguyenhuy Any doubts / thoughts merging it before 2.0?
",maicki,levi
851,2016-05-11 02:28:00,"I set flexShrink to YES by default within Pinterest and browsed a bit around and it seems like  on the first look nothing broke.

I think we should make a call here and either merge it for master soon or close it.

@appleguy @levi @nguyenhuy Any doubts / thoughts merging it before 2.0?
",maicki,appleguy
851,2016-05-11 02:28:00,"I set flexShrink to YES by default within Pinterest and browsed a bit around and it seems like  on the first look nothing broke.

I think we should make a call here and either merge it for master soon or close it.

@appleguy @levi @nguyenhuy Any doubts / thoughts merging it before 2.0?
",maicki,nguyenhuy
851,2016-08-04 21:11:12,"Hey @appleguy can you please rebase the branch on top of latest master. We will likely merge that pretty soon. Thanks!
",maicki,appleguy
851,2016-08-14 00:39:58,"@Adlai-Holler @appleguy @levi I would like to bring that PR up again. I think we should not just move the `ASTextNode` to have `flexShrink` enabled by default, we should enable it by default on all `ASLayoutable`'s.

This would follow the CSS standard: https://drafts.csswg.org/css-flexbox-1/#propdef-flex-shrink
",maicki,levi
851,2016-08-14 00:39:58,"@Adlai-Holler @appleguy @levi I would like to bring that PR up again. I think we should not just move the `ASTextNode` to have `flexShrink` enabled by default, we should enable it by default on all `ASLayoutable`'s.

This would follow the CSS standard: https://drafts.csswg.org/css-flexbox-1/#propdef-flex-shrink
",maicki,appleguy
851,2016-08-14 00:39:58,"@Adlai-Holler @appleguy @levi I would like to bring that PR up again. I think we should not just move the `ASTextNode` to have `flexShrink` enabled by default, we should enable it by default on all `ASLayoutable`'s.

This would follow the CSS standard: https://drafts.csswg.org/css-flexbox-1/#propdef-flex-shrink
",maicki,Adlai-Holler
850,2015-11-30 01:00:30,"@appleguy Sure, this looks great!
",Adlai-Holler,appleguy
848,2015-11-30 05:46:35,"@nguyenhuy This is REALLY cool!  Huge improvement in the flexibility of the stack, and solves several awkward layouts we have worked around at Pinterest.  This really helps 2.0 be a fully featured release.

Sorry it took two weeks for me to review — this diff is the last thing I've caught up to after falling behind on Issues and PRs.  Phew, hopefully I can focus until 2.0 is GM'd...
",appleguy,nguyenhuy
848,2015-11-30 06:55:09,"dude, @nguyenhuy, this will be way better! 
",lappp9,nguyenhuy
848,2015-11-30 18:41:23,"@appleguy Thank you for accepting this diff. And don't worry about the delay :)

Very happy to know that my work is appreciated by others. Please make the most of ASDK, guys.
",nguyenhuy,appleguy
844,2015-11-14 01:41:26,"@Adlai-Holler I'm halfway glad you ran into this issue, because I am planning a fix for this very weekend.  This is a somewhat tough problem, but my plan is to ensure that each node has a query-able state that indicates its presence or absence from the Network range, Render range, and the brand new Visible range.  Later, I'm going to add an Allocation + Measurement range (long story on why they have to be the same range), but that's a far bigger change for a few reasons.

This is in part associated with my focus on eliminating the ""working window"".  Anyway, we'll probably need some new API like ""setNeedsDataFetch"", which if called when outside the network range, simply queues for the next time it's entered - or is handled immediately if inside the range currently.

Any other challenges you're running into?  The API design considerations around this are unfortunately maddening, and I have decided that in order to be able to make progress I'm first going to build some of this stuff as internal-only as it may evolve once other interdependent parts are fleshed out.  But anyway, it would be no problem at all for ASMultiplexImageNode to have framework-internal knowledge of this state and be able to automatically issue new fetches as appropriate.

Lastly though I'd mention you may consider just destroying the node(s) and recreating them, relying on a good image cache to work correctly.  I think after a couple more months, we will have really good support for very-long-lived nodes (those that change a lot as they're interacted with, etc), with features like animating between ASLayoutSpecs, but today it is a little inconvenient to achieve some of those implementations (almost anything is possible with today's ASDK, as long as you're willing to get manual enough...so that's what I'm aiming to fix).

Would love to meet up with you soon in the city if you're interested.  Your feedback on this stuff would be really valuable to shaping the direction of the project.  Looking towards December and early next year, Pinterest contributions will slowly (at first) start going up and we should be at a pretty good clip by February to continue the really structural improvements.
",appleguy,Adlai-Holler
844,2015-11-14 04:16:33,"@appleguy Excellent! I'm really glad you were looking at this feature already.

Other issues I'm facing: 
- Node thread affinity is the biggest one for my oddball use case, since I keep my nodes alive a while. I made a client-side version of `ASDisplayNodeRespectThreadAffinityOfNode` but since I can't lock the properties, sometimes the node gets loaded mid-block and now it's crash time. Maybe publicize that function as a stop-gap until the new threading model is in?
- Better support for animated scrolling. I've got a table view with a bunch of content, and sometimes we want to scroll the user down to a certain spot. But that range may not be loaded and there's currently no way to request it. In our case it's particularly bad, since we have a screen-sized `tableHeaderView` that acts like a cover for the feed, and so literally 0 nodes are loaded since `tableView:willDisplayNode:` hasn't been called yet.
- It doesn't make toast. Big problem!

Destroying & recreating nodes: I'm worried about the performance implications here. Nodes are cheap, but right now I'm using a functional-style data source where I recompute all my data, using a find-or-create system for nodes. Then I [diff](https://github.com/Adlai-Holler/ArrayDiff) the resulting hierarchy and report the row inserts/deletes to the table view. In order to have this much freedom while keeping the table view involvement minimal _and_ not reusing nodes, I'll need to remember which nodes can stay and which have to be thrown out. 

Meet up: Yeah, let's! Email sent.
",Adlai-Holler,appleguy
844,2015-11-14 05:05:15,"@Adlai-Holler I'm happy to merge in some custom facilities for you, especially if they are out of the way in a more buried header (we might create an ASDisplayNode+Experimental.h or similar).  Go wild!  I would like to better understand your use case that is hitting thread affinity so that I can confirm or deny if my current plan to address that will be both sufficient and elegant.  Your instinct to workaround is correct, though, as I am running behind due to a combination of work / family factors.  So it could take a couple more months for my current plan to address affinity to be landed, although it is actually not a difficult change and could probably be done in less than a single day.

I can understand the fear of costs, but would be happy to share my blend of iOS performance intuition and measurement from past projects.  I'm pretty confident we can solve even the most aggressively challenging performance problems (iPhone 4) without node recreation being the main issue.  In fact, enabling usage of layer-backing or shouldRasterizeDescendents would be even more impactful by far, because you eventually have to create a node's view otherwise - which even if you're reusing it, is costly.  Even if you can't currently use those features because you depend on views' event handling, there are workarounds to this by delivering basic events through the node hierarchy.

The range current state stuff is related to the need / desire for big refactors to ASRangeController, and I want those to enable 1) virtualization of data so that the AS classes don't /have/ to perform layout / measurement on everything in the asyncDataSource, AKA the allocation + measurement range; 2) simultaneously, would be trivial to support ""block until measured"" for something like ""scroll to indexPath"" - then finishing up the measurement to that point, update the underlying UIKit component, and issue the command.

2) in fact would be fairly easy to do today, with some careful changes to ASDataController, but if you have some other workaround to this then it's probably reasonable.  You could definitely use a synchronous reloadDataImmediately, which waits on the concurrent completion of all measurement, and would thus provide better performance than UITableView while still ensuring all rows are available to animate to from the start.  If you also enable neverShowPlaceholders on the ASCellNodes, you can trade framerate for full content display.
",appleguy,Adlai-Holler
844,2015-11-16 06:57:34,"@Adlai-Holler ok, I did make really important progress on this over the weekend, but a mid-level family emergency has come up and prevented me from finishing.  No worries, I will not get my priorities wrong in this case - family is always first.

Basically I have a new API designed, ASInterfaceState, which is an NS_OPTIONS bitfield type and will be provided on at least ASDisplayNode as well as ASViewController.  I have a slew of integrations / improvements planned as well.  The upshot is that even after the first diff before the followups, it should be trivial for the implementation of the network / multiplex node to check whether its _interfaceState includes ""ASInterfaceStateFetchData"", and it will trigger a download if so.  In the short term I'm going to keep the -fetchData and -clearFetchedData methods, but they will now be called as part of setInterfaceState: rather than directly from the range handler - and a savvy implementer could override setInterfaceState: to do custom logic, as long as super is called.

Let me know if you have any specific ideas or other things the project can do to enable your current product to succeed.  Enthusiastically rooting for your success! 
",appleguy,Adlai-Holler
842,2015-11-12 18:30:04,"@aaronschubert0 fantastic, thank you!  @garrettmoon, what is Bin's github handle?
",appleguy,aaronschubert0
842,2015-11-15 05:13:51,"I'm ready to merge this if we can make the framework weak, because API tweaks / refinements can easily be done in followup diffs (whereas I don't want anyone to ship an app with a new framework linkage as large as MapKit if they don't use this feature).  Thanks a lot @aaronschubert0 for grabbing this task and contributing a new component to the community!
",appleguy,aaronschubert0
842,2015-11-15 17:12:04,"Hey @appleguy change the pod spec to weak and seems to work on my local, would be good to check once it's merged. Still worried about the scroll stutter when `clearFetchedData` is called, but I guess we can fix this in future diffs?
",aaronschubert0,appleguy
842,2015-11-24 14:19:45,"@appleguy Anything stopping this from being merged?
",aaronschubert0,appleguy
842,2015-11-29 22:14:44,"@aaronschubert0 hey there - sorry it took me a long time to get to the review.  There have been a lot of PRs waiting in the queue as I've simply fallen behind on stuff.  I've mostly caught up, and hope to release 1.9.2 with several improvements including my ASInterfaceState feature soon!

Though a lot of my feedback is just small stylistic nits, there are a handful of API design things to work through.  I understand fully if this ended up being more than you bargained for, and so if you don't have a chance to revisit it, rest assured that the code is still very valuable to the project and it will be tweaked and landed soon!

Thanks for your efforts, and let me know if you have any questions.
",appleguy,aaronschubert0
842,2015-11-30 09:11:23,"Hey @appleguy this feedback is awesome, will go through it and respond to each comment, definitely want to get this right and have it clear for all developers. Pretty busy at work this week but will tend to this very soon.
",aaronschubert0,appleguy
842,2015-12-03 11:40:32,"Hey @appleguy implemented most of the feedback that you gave. The changes from the previous iteration are:
- ASMapNode now inherits from ASImageNode, rather than ASControlNode. The mapImage property has been removed because of this change. 
- The mapView property is now a MKMapView rather than a ASDisplayNode
- The mapSize property has been removed. If developers wish to set an explicit size for ASMapNode, then they can set the preferredFrameSize property.
- ""automaticallyReloadsMapImageOnOrientationChange"" has been renamed to ""needsMapReloadOnBoundsChange""
- ""-addAnnotations:"" has been renamed ""setAnnotations:""
- All scalar size properties (_maxSize & _nodeSize) have been removed (yay!) in favour of `self.bounds.size` or `self.calculatedSize`
- ""-calculateSizeThatFits:"" has been removed as suggested by @nguyenhuy 
- ASMapNode now automatically fetches a new map snapshot if it's size is changed, as opposed to only on orientation change.
- A new internal ""CLLocationCoordinate2D"" property has been introduced. This is to support an ASMapNode (that has liveMap = YES) to return to the correct liveMap view after the user has scrolled from the node and then returned to it at a later occasion. 
- Syntax cleanup.

P.S. I don't think Travis CI is running against these commits?
",aaronschubert0,appleguy
842,2015-12-03 11:59:52,"Thanks @nguyenhuy ! That's a good idea! Will need to come up with a good example. I'll work on that once this has been finalised :)
",aaronschubert0,nguyenhuy
842,2015-12-03 18:56:52,"Big progress, thanks @aaronschubert0!  I'll review as soon as I have stabilized a few issues that have come up with the 1.9.2 release.  Definitely by Sunday.
",appleguy,aaronschubert0
842,2015-12-04 09:29:58,"@appleguy Awesome, looking forward to it!
",aaronschubert0,appleguy
842,2015-12-07 05:06:44,"@aaronschubert0 thanks again - really happy to be merging this.  If you have time, I do think one more round of changes is needed - but this should prepare the class to be included as a primary API in the 2.0 release!
",appleguy,aaronschubert0
842,2015-12-07 11:40:38,"@appleguy Woohoo! Thanks a lot for the thorough code review. I'll definitely give it another pass to give it that polish.
",aaronschubert0,appleguy
841,2015-11-13 03:39:45,"Hi @appleguy,

Thanks for your reply.
I've create a test project for you :  https://www.dropbox.com/s/jdp4rpwuagxtgnp/TestAsync.zip?dl=0.
",hoangson1989,appleguy
840,2015-11-14 13:32:46,"@appleguy  thanks for feedback,
 in my mind `layout` method load all the view and put subviews to the memory.similar to `viewDidLoad` in `UIViewController`.  using rangeController cause the defined range of view to be loaded so when you scroll there is no need to initialize and loading them to the memory!  (Am I right?)

if Im right in iOS 7 subsequent cells won't load immediately but on iOS 8 and above works well. see the generated logs.

<img width=""341"" alt=""screen shot 2015-11-14 at 4 44 44 pm"" src=""https://cloud.githubusercontent.com/assets/3206748/11163781/7dec6dba-8af1-11e5-84dd-82bf45474178.png"">
<img width=""354"" alt=""screen shot 2015-11-14 at 4 45 22 pm"" src=""https://cloud.githubusercontent.com/assets/3206748/11163782/7ed6b000-8af1-11e5-938c-435b03570912.png"">

in this video after application launched and after 6 seconds later I scroll to next cell! as you see cell is not loaded!
https://dl.dropboxusercontent.com/u/45698608/rangeController%20iOS%207.mov

I'm using ASyncDisplayKit a lot in my app and I really need circular scrolling in some of my custom controls! the only hack I found to prevent flashing when backwarding is preloading all cells in advanced! 
",hashemp206,appleguy
839,2015-11-13 02:58:49,"Hi @appleguy.

Using flexShrink = true I get this result. This result is not what I expect since the gray label bellow the image has to match with the image width. They are in the same ASStackLayoutSpec with direction Vertical 

App Image
![captura de tela 2015-11-12 as 17 49 48](https://cloud.githubusercontent.com/assets/1790860/11137558/ee84b300-899f-11e5-8ce3-3b58f3a53fa2.png)

Code Image
![captura de tela 2015-11-12 as 17 51 01](https://cloud.githubusercontent.com/assets/1790860/11137561/02382436-89a0-11e5-9a9e-a9b63aae1735.png)

Using label.flexBasis = ASRelativeDimension(type:.Percent, value: 1.0) results the crash bellow

Code Image
![captura de tela 2015-11-12 as 17 56 09](https://cloud.githubusercontent.com/assets/1790860/11137681/566eb4f6-89a1-11e5-958a-2ed5eaa178c3.png)

Crash Image
![captura de tela 2015-11-12 as 17 55 03](https://cloud.githubusercontent.com/assets/1790860/11137675/45222dd6-89a1-11e5-8003-fd80711e3fea.png)

I tried to reproduce this error in the example code but there it works.

Thanks 
",logicsb,appleguy
837,2015-11-14 02:17:25,"@levi this looks like an improvement.

Question: how does one cause an un-selection from the ASCellNode?  If I get setSelected: called on my ASCellNode instance, how would I trigger an un-selection?  Don't we need some kind of back-pointer to the cell view object?
",appleguy,levi
837,2015-11-24 00:22:18,"Good question, @appleguy. Will take a look at this other case.
",levi,appleguy
835,2015-11-11 08:14:32,"Hi @appleguy thanks for answer. I'm using layoutSpecThatFits and the previous working version are 1.8 because the version 1.2.3 via pod file don't have ASLayoutSpec implemented. About the layouts i'm using ASStackLayoutSpec with direction horizontal to make the texts inline. The solution with ASRelativeDimension has solved my problem. Thanks
",logicsb,appleguy
834,2015-11-12 07:11:01,"@appleguy It seems that code on Pod is still not the latest. I'm afraid you have to roll a 1.9.2.
",drinking,appleguy
833,2015-11-11 04:18:33,"@bimawa Good question.  There isn't currently a way to use layout specs at the ASViewController level.  For now, you must subclass the ASDisplayNode that you create the ASViewController with and use layoutSpecThatFits: there.

In the future I'm most likely going to make ""node"" a writable property (similar to ""view"" in UIViewController), rather than required only at init time.  This won't really affect layout, but is just FYI since you're interested.

We'll probably eventually introduce a layoutSpecForNodeThatFits: or something similar, but this is less certain and wouldn't be part of 2.0 (more likely 2.1 or later).
",appleguy,bimawa
833,2015-11-11 04:30:37,"@appleguy cool I did the same ) thx! Will be wait.
",bimawa,appleguy
825,2015-11-07 23:32:01,"Fantastic, thanks @levi!  This is something that @ocrickard and I have talked about doing for basically a year.  Oliver, if you have a few minutes to skim this or have any notable comments (e.g., known issues or planned work in the CK version) — please do :)
",appleguy,levi
825,2015-11-08 05:57:57,"Thanks for checking this out, @ocrickard. The current ASTextNode unit tests do an initial measurement pass and remeasure, checking the equality of the results. You're right in that they're running into floating point specifics. Here's a link to the first failing one: https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKitTests/ASTextNodeTests.m#L100 The other failing test is the one below it.
",levi,ocrickard
825,2015-11-09 03:57:41,"@ocrickard any clue why re-measuring the ASTextNode would produce different results with the new renderer?  That seems pretty darn odd to me, although I haven't looked at the implementation for which objects / state are shared.  No worries if you're busy right now, we'll eventually figure it out :)
",appleguy,ocrickard
825,2015-11-09 04:46:30,"Interesting. My guess is that you're hitting a cached value where you
weren't before, but would have to try and repro locally to confirm. Maddie
may be able to review as well.

On Sunday, November 8, 2015, appleguy notifications@github.com wrote:

> @ocrickard https://github.com/ocrickard any clue why re-measuring the
> ASTextNode would produce different results with the new renderer? That
> seems pretty darn odd to me, although I haven't looked at the
> implementation for which objects / state are shared. No worries if you're
> busy right now, we'll eventually figure it out :)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/pull/825#issuecomment-154912055
> .

## 

---

Oliver Clark Rickard
ocrickard@gmail.com

## (707) 536-1352
",ocrickard,ocrickard
825,2015-11-09 16:39:53,"@ocrickard good catch on the LRU cache. I decided not to bring it in this patch just to keep the scope of changes easier to review. I would like to further investigate the best approach of including it in ASDK 2.0 and currently planning to put up a second patch once this lands.
",levi,ocrickard
825,2015-11-15 03:14:12,"I agree we don't need the LRU cache right now.  The ASDK architecture makes it significantly less necessary, although conceivably beneficial - particularly to accelerate things like full table / collection data reloads.

@levi will you be able to investigate the failing test soon?  It looks like some rebasing is required as well, so I'd like to get this landed ASAP so we don't have the surface area exposed to merge conflicts.
",appleguy,levi
825,2015-11-15 03:14:50,"@appleguy I'll look into this tonight and get it to a landable stage. Thanks for the ping!
",levi,appleguy
825,2015-11-15 03:16:19,"Hey guys, yeah that sounds reasonable to me!

I'm not going to have time to help debug the test this weekend or probably this week. Good luck @levi!
",ocrickard,levi
825,2015-11-16 00:04:35,"Tests fixed, thanks for you help @appleguy!
",levi,appleguy
825,2015-11-16 14:04:31,"Awesome. What was the issue?

Sent from my iPhone

> On Nov 15, 2015, at 7:04 PM, Levi McCallum notifications@github.com wrote:
> 
> Tests fixed, thanks for you help @appleguy!
> 
> —
> Reply to this email directly or view it on GitHub.
",ocrickard,appleguy
825,2015-11-16 19:29:57,"@ocrickard linking the newly added files to the iOS framework. Unrelated to the actual implementation of this diff.
",levi,ocrickard
825,2015-11-28 08:43:29,"@levi - some brief notes I wrote on the plane home.  I'm going to merge this as-is, and the notes can be for a followup (we can make a task referencing this PR if you're busy!)

@ocrickard - this is really some serious software.  Thanks for all your great work on it — both the original ASDK version, and the robust + unique refinements you made with CK!  It's really cool to see such workhorse code be valuable in both projects.
",appleguy,levi
825,2015-11-28 08:43:29,"@levi - some brief notes I wrote on the plane home.  I'm going to merge this as-is, and the notes can be for a followup (we can make a task referencing this PR if you're busy!)

@ocrickard - this is really some serious software.  Thanks for all your great work on it — both the original ASDK version, and the robust + unique refinements you made with CK!  It's really cool to see such workhorse code be valuable in both projects.
",appleguy,ocrickard
825,2015-11-28 21:29:29,"@appleguy great to hear it! Probably won't be able to get to these until next weekend. A task pointer would definitely be helpful, thanks.
",levi,appleguy
825,2015-11-28 23:31:12,"@ocrickard - thanks for keeping us updated!  Feel free to drop me an email or FB message for any future changes that you think will be applicable for us to port.

@levi - sounds fine, I will file a task.  I am going to release 1.9.2 soon, and do so before merging this diff, but then merge this diff within the next couple days and point Pinterest at that version so we can get test coverage.  Thus it may be 2.0 (or at least 1.9.3, if that release happens) before this is in a stable build, which feels appropriate considering the size and motivations for the change.
",appleguy,levi
825,2015-11-28 23:31:12,"@ocrickard - thanks for keeping us updated!  Feel free to drop me an email or FB message for any future changes that you think will be applicable for us to port.

@levi - sounds fine, I will file a task.  I am going to release 1.9.2 soon, and do so before merging this diff, but then merge this diff within the next couple days and point Pinterest at that version so we can get test coverage.  Thus it may be 2.0 (or at least 1.9.3, if that release happens) before this is in a stable build, which feels appropriate considering the size and motivations for the change.
",appleguy,ocrickard
825,2015-11-30 07:01:27,"@levi LOL I was literally coming here to merge, and finally one of the diffs triggered a merge conflict.  No urgency here - sometime tomorrow or Tuesday, I will bump the internal Pinterest revision to include this change once it's on master.
",appleguy,levi
825,2015-11-30 20:03:10,"@levi I'm ready to land this - but for some reason it is tripping up on my Visible range stuff?

""Undefined symbols for architecture x86_64:
  ""_OBJC_CLASS_$_ASRangeHandlerVisible"", referenced from:
      objc-class-ref in libAsyncDisplayKit.a(ASRangeController.o)
ld: symbol(s) not found for architecture x86_64
""
",appleguy,levi
823,2015-11-07 23:40:11,"@vitalybaev so cool, thank you!!  This seems to have the same change as your other diff to fix setSelected / setHighlighted, so I'll either merge only this PR or you can remove it from this one.
",appleguy,vitalybaev
823,2015-11-08 07:39:22,"@appleguy yes, I realized that after sending this PR, cause I'm not so familiar with git, you can merge only this PR
",vitalybaev,appleguy
823,2015-11-09 02:52:45,"This is beautiful!  Super funny choice of filler content — but I definitely approve (@nguyenhuy, check it out).

I have some style nits, but let's address those in followups.  Probably the biggest one is that the indent width should be 2 spaces.  @vitalybaev if you want to do that change (with Xcode's re-indent feature, it should be fast), then the code will correctly ""blame"" to you after the change.  Otherwise I'm completely happy to do it, just don't want to take credit for all your code!

@rcancro @garrettmoon this should probably be the new go-to app for teaching people about ASDK, and we should probably look at it in more depth to see if we can clean it up for further enhanced readability (more comments, style consistency, etc).  We could expand it with different cell types that implement various common things with ASLayoutSpec so that folks who take a look and say ""I want something like that!"" can see the implementation.
",appleguy,vitalybaev
823,2015-11-09 08:59:31,"haha, love the content as well. Thanks for contributing this, @vitalybaev.
",nguyenhuy,vitalybaev
823,2015-11-09 09:07:14,"@appleguy @nguyenhuy thanks a lot! I have no time right now, cause I'm in Paris at dotGo conf, and I could make all code styling fixes when I'll arrive in Moscow at home
",vitalybaev,nguyenhuy
823,2015-11-09 09:07:14,"@appleguy @nguyenhuy thanks a lot! I have no time right now, cause I'm in Paris at dotGo conf, and I could make all code styling fixes when I'll arrive in Moscow at home
",vitalybaev,appleguy
822,2016-06-09 18:20:59,"Hi @ocrickard. Yes NSUnderlineColorAttributeName work's fine. But i need remove the underline. I've make a workaround with UIColor.clearColor() because NSUnderlineStyleAttributeName is not working. Thanks.
",logicsb,ocrickard
821,2015-11-07 23:33:50,"@vitalybaev does this apply on all iOS versions back to 7, our minimum supported one?

BTW, most importantly...how does a developer disable the selected / highlighted state on the cell if they are programming an ASCellNode subclass?  Don't we need a back-pointer from the ASCellNode to the UITableViewCell / UICollectionViewItem?
",appleguy,vitalybaev
821,2015-11-09 02:31:35,"@vitalybaev closing because this is included in #823 
",appleguy,vitalybaev
820,2015-11-08 19:19:43,"@appleguy Never mind - this was due to operator error, i.e. me - I didn't fully understand node hierarchy building sequence - reading everything and watching the videos again helped tremendously. Thank you again
",robmontesinos,appleguy
817,2015-11-05 17:29:59,"That should work. Thanks, @vitalybaev :+1: 

We probably should update the documentation of options in ASStaticLayoutable to make it clear that they are only considered inside an ASStaticLayoutSpec.
",nguyenhuy,vitalybaev
817,2015-11-05 18:08:42,"@nguyenhuy also I can provide some more complex example than Kittens, which shows such common things in cells layout.
",vitalybaev,nguyenhuy
817,2015-11-06 14:15:25,"@nguyenhuy #823 look at this example and tell me, what you are think
",vitalybaev,nguyenhuy
817,2015-11-08 04:36:17,"Thanks so much for helping here, @vitalybaev!  It's really wonderful to have you in the community.

@KieranLafferty likewise, thanks for bringing us this question.  It's a good use case for us to better document and use in examples, as the solution is not immediately clear.  @rcancro & @garrettmoon, could you include this or something conceptually similar in our documentation effort?  Setting the fixed 1px/1pt height along with the width flexibility consideration is a useful building block for layout specs.
",appleguy,vitalybaev
815,2015-11-04 14:28:51,"Thanks for reporting this, @yxztj and @vitalybaev.

I believe this issue is caused by #642. Reverting the commit in that PR fixes the problem. cc @appleguy 

@vitalybaev Sorry for not answering your earlier issue. Could you please try to check with your project and confirm whether #642 is to be blamed?
",nguyenhuy,vitalybaev
815,2015-11-04 14:28:51,"Thanks for reporting this, @yxztj and @vitalybaev.

I believe this issue is caused by #642. Reverting the commit in that PR fixes the problem. cc @appleguy 

@vitalybaev Sorry for not answering your earlier issue. Could you please try to check with your project and confirm whether #642 is to be blamed?
",nguyenhuy,yxztj
815,2015-11-04 14:59:19,"@nguyenhuy I don't remember, which version exactly was at that time. It's a :git :master in `Podfile` for a long time. Now I can't set old commit to check it, cause a lot of new APIs now in my project.

I can test @yxztj 's sample project.
",vitalybaev,nguyenhuy
815,2015-11-04 14:59:19,"@nguyenhuy I don't remember, which version exactly was at that time. It's a :git :master in `Podfile` for a long time. Now I can't set old commit to check it, cause a lot of new APIs now in my project.

I can test @yxztj 's sample project.
",vitalybaev,yxztj
815,2015-11-04 15:05:30,"@nguyenhuy yep, you are right! reverting #642 fixes the problem
",vitalybaev,nguyenhuy
815,2015-11-04 15:08:22,"@vitalybaev Thanks for the heads up. #642 was merged 2 weeks before your issue reported. I tested @yxztj's project with and without #642. Waiting for @appleguy since I'm not really familiar with the render  range handler and its working window.
",nguyenhuy,vitalybaev
815,2015-11-04 15:08:22,"@vitalybaev Thanks for the heads up. #642 was merged 2 weeks before your issue reported. I tested @yxztj's project with and without #642. Waiting for @appleguy since I'm not really familiar with the render  range handler and its working window.
",nguyenhuy,yxztj
815,2015-11-04 15:11:17,"@nguyenhuy You're welcome! 
It's great that you are take a look at this issue, cause I'm confronted with it again today in my project.
Thanks!
",vitalybaev,nguyenhuy
815,2015-11-05 05:12:19,"@vitalybaev @nguyenhuy Thanks for the investigation.
Hope the issue would be resolved soon since our users are losing their tableView cells. :(
I'll try to revert #642 locally for now.
",yxztj,vitalybaev
815,2015-11-05 05:12:19,"@vitalybaev @nguyenhuy Thanks for the investigation.
Hope the issue would be resolved soon since our users are losing their tableView cells. :(
I'll try to revert #642 locally for now.
",yxztj,nguyenhuy
815,2015-11-05 17:22:05,"@appleguy yep, today I realized that my PR #745 witch provides selected/highlighted properties to ASCellNode not working.

setHighlighted never changed to YES and #807 looks strange too.

Tomorrow I'll take look a deeper into it.
",vitalybaev,appleguy
815,2015-11-06 01:48:02,"@appleguy Thanks so much!
",yxztj,appleguy
815,2015-11-07 00:07:54,"@vitalybaev let me know what you find regarding setSelected / setHighlighted.  It does seem like that behavior is not working correctly in this test app and I would like to include a fix in this weekend's 1.9.1 release.
",appleguy,vitalybaev
815,2015-11-07 07:18:56,"@yxztj I was able to reproduce and am working on the problem.  My first approach is the most complex and would actually entirely eliminate the workingWindow, which would be a big optimization I have wanted to do for over a year but haven't had time.  Wish me luck, as if I don't make enough progress tomorrow then I'll switch to looking for q more targeted fix.
",appleguy,yxztj
815,2015-11-08 07:13:17,"@yxztj I have a fix up here: https://github.com/facebook/AsyncDisplayKit/pull/826  I would not have been able to fix this without your test app, so thank you - really - for taking the time to provide one.

I'll plan to release a 1.9.1 later tomorrow, or if some other important fixes come up, on Wednesday this coming week.  Feel free to point your project at master in the meantime to benefit from the fix (or apply it locally, since it is very small).
",appleguy,yxztj
815,2015-11-09 03:13:44,"@appleguy Thanks so much for the quick fix! I'll point to master to get it.
Now we could freely benefit all the great stuff of ASDK2.0. :)
",yxztj,appleguy
815,2015-11-09 03:51:13,"@yxztj so glad!  looking forward to more feedback from you — both questions and suggestions!  I'm going to try to launch 1.9.1 tonight from current master, so that might help.
",appleguy,yxztj
814,2015-11-07 00:31:31,"Thanks for your suggestion @nguyenhuy. I am going to have to spend some time building a test project or something to try this out. You may be on to something here, but I also think it may have something to do with the frame of the ASCollectionView. Putting it inside a ASCollectionNode to put it in a cell, I couldn't find a good way to lay it out properly via the `calculateSizeThatFits` and `layout`. This is kinda hacky, but I was storing the size of the collection view's frame on initialization since it crashes when you try to access the collectionNode's view in calculateSizeThatFits/layout.


",tettoffensive,nguyenhuy
814,2015-11-09 19:29:14,"@appleguy My use case is a vertical table view with each row being a horizontal collection of custom nodes which are basically images with captions on top of them. Each row also has a custom node which is a label for that collection. Right now, I have those as part of the cell in the table view, but I suppose each row could be a section as well. Right now the design is consistent with height. However, who knows what'll happen with the design. Things are always changing. At one point one of the bottom most of the collection views was 2 columns with vertical scroll.

But for simplicities sake right now I'd just like to get the simple case of horizontal collections inside vertical table view. What you're planning for next spring will be nice, but I'll need to find a good solution now in the meantime.

![mockup](https://cloud.githubusercontent.com/assets/5884119/11044166/0d971a26-86d5-11e5-93a0-6ac43c626668.png)
",tettoffensive,appleguy
814,2016-11-15 21:47:50,"@appleguy can this issue be closed?
",garrettmoon,appleguy
814,2016-12-11 09:09:18,"@garrettmoon No, unfortunately this is still an issue.  In fact, I'd say it is easily within the top 3 most frequently requested features.  We should open one of those feedback boards where we can have people rank them :).

The use case is as ""simple"" as having a horizontal collection that goes into a vertical scroll view, and wanting to know the height of the overall collection in consideration of its items.  Another is when showing a modal sheet, if it is wrapping a small ASTableNode that may only have 3 or 4 items, calculating the necessary height of the modal can be tough.

@Adlai-Holler had looked into this a bit to see if we could at least provide a well-defined hook that, by its call time, contentSize is set.  It seems like even this is difficult, even after controlling for the async measurement operations, but I'm not exactly sure why.  I'd suggest we consider this for 2.1 as it is a capability that would come from the data controller & layout work that Adlai is hoping to take on.",appleguy,garrettmoon
813,2015-11-04 10:19:15,"@Adlai-Holler Thanks for asking this question. It is definitely a common layout and this issue might be helpful for other developers later on.

Let me try to go through each of the options that you tried and explain why it doesn't work/what is missing.

> Setting cellNode.preferredFrameSize

`preferredFrameSize` won't be picked up because the cell node already implements `-layoutSpecThatFits:`, which is the preferred layout approach. Implementation details can be found [here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASDisplayNode.mm#L1574)

> Setting layoutSpec.sizeRange = exact(mySize)

`sizeRange` is _only_ picked up if the layoutable object (`ASLayoutSpec`, `ASDisplayNode` and their subclasses) is a child of an `ASStaticLayoutSpec`. My guess is that you didn't create a static spec. Below piece of code should work:



> Fiddling with ASCenterLayoutSpec's sizing options. Since table views measure cells constrained to (screenWidth, +inf), if I specify Default then the cell is infinitely tall and if I specify Minimum the cell is only as tall as the content.

These look like the correct behaviours of sizing options to me. You can always use an inset spec (between the stack and center specs) to add extra _vertical_ space to your node. This might be a better option over the previous one, since you don't make assumption about the node height (i.e the text can take more space (or even another line) if the font size is bigger, or in different languages, etc)

[DZNEmptyDataSet](https://github.com/dzenbot/DZNEmptyDataSet) seems to be a solid library. Since I haven't used it myself (and am not a top-tier engineer), please take this suggestion with a bit of salt :)
",nguyenhuy,Adlai-Holler
813,2015-11-05 21:22:43,"@nguyenhuy Thank you for this insightful answer! Code works great and I understand the layout system much better now. You'll always be _my_ top-tier engineer! =P
",Adlai-Holler,nguyenhuy
811,2015-11-05 22:48:26,"hey @nguyenhuy, is there an example of using -endUpdatesAnimated?

I have the opposite problem where i'm wanting to scroll to the bottom of the table view after the cells have loaded and i can't quite figure out how to do that other than using the following, which seems clearly wrong.  
`self.tableView.insertRowsAtIndexPaths(indexPaths, withRowAnimation: UITableViewRowAnimation.None)`

`self.performSelector(""scrollToBottom"", withObject: nil, afterDelay: 0.25)`


",lappp9,nguyenhuy
811,2015-11-06 17:55:42,"@lappp9 in Objective-C it looks like this:


",vitalybaev,lappp9
811,2015-11-09 03:08:57,"@lappp9 thanks for filing this — I'm not 100% clear if there is an API improvement we can make here, but would be very interested to hear from you if you have any suggestion for how we could have made this more clear.  Whether comments in the header, different API names, etc.  Documentation is a no-brainer, and that one's on us...some good progress is actually being made, but it will still be a couple months before we have more robust docs published.

Please open a new issue with any other issues, whether suggestions or questions!
",appleguy,lappp9
809,2015-11-03 13:20:21,"@appleguy It actually does give you support to those. I've already created a random project for tvOS with Core Animation and custom layer styling and such.
",clooth,appleguy
809,2016-03-25 03:48:00,"@zdenektopic @clooth @aaronschubert0 - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,aaronschubert0
808,2015-11-03 01:43:53,"@Adlai-Holler great question.  This is absolutely a valid use case and we need a way to support it...ideally automatically as it should always be the case that relayouts triggered by ASEditableTextNode have this concern.

@nguyenhuy what do you think?  It seems important to me that we not have the delegate method called (e.g. nodeForRowAtIndexPath: should definitely not be called due to a -setNeedsLayout on the cell)...and likewise, because removing a node from the hierarchy may cause its contents to be purged, we should also not move the node from one UITableViewCell to another one (if UITableView asks ASTableView for a new cell upon ""reload"")
",appleguy,Adlai-Holler
808,2015-11-03 17:21:26,"@Adlai-Holler: sorry for this breaking behaviour. 

The reason I used `-reloadRowsAtIndexPath:withRowAnimation:` is that I wanted to make use of `UITableViewRowAnimation` and provide a default, familiar and work-out-of-box way for animating relayouts. After considering your comments, I think you guys are right. Thanks for your great feedbacks and questions. 

I will submit a PR that changes ASTableView and ASCollectionView to trigger empty transactions after relayouts. Developers can always wrap `-setNeedsLayout` inside an animation block anyway. Animating will take a bit more work, but it's safer that way. 
",nguyenhuy,Adlai-Holler
808,2015-11-03 20:16:56,"@nguyenhuy @appleguy Thanks for responding to this so quickly! PR looks good to me!
",Adlai-Holler,nguyenhuy
808,2015-11-03 20:16:56,"@nguyenhuy @appleguy Thanks for responding to this so quickly! PR looks good to me!
",Adlai-Holler,appleguy
807,2015-11-09 10:21:45,"@appleguy as I told you, I haven't any time for 4 days, and I'll look deeply into it after that.
When I tested this issue, actually setSelected gets called 2 times, cause `cell.selected = YES;` gets called in `didSelectItemAtIndexPath`. That's all for now
",vitalybaev,appleguy
807,2015-11-09 14:45:55,"@appleguy could you email me to discuss this issue?
dj@vitalybaev.ru
thanks
",vitalybaev,appleguy
797,2015-10-30 21:24:02,"@eanagel 

Thank you for brief issue description. This is exactly what i wanted to explain in original task, but unfortunately my English needs more practice :(. Sorry for this. 
",ERussel,eanagel
797,2015-10-30 21:25:49,"I agree 3) - or 2) - is the best solution.  It's not really an option to always exit the ranges as this will cause backing stores to be blown away, resulting in either flickers or long stutters depending on if neverShowPlaceholders is set.

Although ASDataController has been improved a lot, ASRangeController was written by the same person at the same time, and has not been renovated.  It definitely needs it, and has been on my hitlist for some time now as there are specific additional features that I want from it (including ""visible range"" notifications sent to nodes, which would also better-factor the implementation of neverShowPlaceholders).

Beyond that, we need to formalize these calls that nodes get (like fetchData, clearFetchedData, the display variants, and the proposed visibility variant) in order to be able to trigger them for ASViewController as well.  This may mean defining a new protocol for things that can be controlled by a range.  Then it would be easier to trigger an ASViewController to preload itself to a certain level of completeness (either just fetching network data, or all the way through rendering).

The takeaway for me is that we should come up with a relatively simple bolt-on retrofit for the existing code and then take a step back on ASRangeController in general.  This may be a project we can take in-house at Pinterest because it is a larger job, although if anyone out there wants to lead it, it would be a huge help.

@eanagel for the sake of the immediate-term retrofit, are you on a path to be able to implement 2) or 3) — or should we pass off the implementation piece?  Thanks a ton for doing some additional debugging, and especially for @ERussel for surfacing the issue!
",appleguy,eanagel
796,2015-10-31 23:08:56,"I agree with @levi's suggestion, so thanks for jumping on that @samhsiung.  This is implemented cleanly — even if the stack is subclassed by a public client, using [self alloc] and instancetype will ensure correct behavior.  Cool!
",appleguy,levi
796,2015-10-31 23:08:56,"I agree with @levi's suggestion, so thanks for jumping on that @samhsiung.  This is implemented cleanly — even if the stack is subclassed by a public client, using [self alloc] and instancetype will ensure correct behavior.  Cool!
",appleguy,samhsiung
794,2015-10-31 23:03:47,"Thanks @samhsiung, this is a great extension to a lesser-used class.  It is awesome to have some attention applied to these classes because it really helps round out the framework and provide a more confident developer experience when they are needed.
",appleguy,samhsiung
794,2016-01-26 10:30:23,"@samhsiung, I need textContainerInset configurable for ASTextNode but I can barely read obj-c since I'm learning Swift. Would you kindly make this change for ASTextNode also?
",jsspalding,samhsiung
794,2016-01-26 17:43:50,"@samhsiung yes, ASInsetLayoutSpec partially solves my issue but my node has a backgroundColor and the inset does not respect it (not sure if this is expected). It adds the inset but the inset is transparent.
I did quite a lot of research and imho the most elegant way of doing what I need is using textContainerInset.
Thank you and please let me know if you have any other suggestion that I should try.
",jsspalding,samhsiung
794,2016-01-26 19:11:55,"@samhsiung I can't set a background for the parent because it is also the parent of other nodes.
This is my layoutSpecThatFits for the parent (it's an ASCellNode):



And this is how it renders:

![untitled](https://cloud.githubusercontent.com/assets/10931029/12591162/9f1e365e-c44d-11e5-86d2-a7128cf7a106.png)

I need the channelNode to have the padding/inset. I could wrap it inside another ASDisplayNode but this looks like a workaround for me.
",jsspalding,samhsiung
794,2016-01-26 20:11:22,"@samhsiung nice, I will try to subclass it! I will open the issue and let you know! Thank you very much!
",jsspalding,samhsiung
794,2016-01-28 12:43:12,"@samhsiung the `finalLayoutable` suggestion worked but does not ended up with what I was trying to achieve. Actually, the result was the same as wrapping the `ASTextNode` inside an `ASInsetLayoutSpec`, adding ""margins"" (as in CSS) to the `ASTextNode`.

I ended up with something relatively simple, but I'm still not sure if it's the best soluiton.
Please take a look at https://github.com/facebook/AsyncDisplayKit/issues/1138 and give your thoughts.

Thanks again!
",jsspalding,samhsiung
793,2015-10-29 17:15:23,"@nguyenhuy Does this mean cells will flash when they resize? In client apps I specifically avoid calling `reloadRowsAtIndexPaths` in favor of `beginUpdates() / endUpdates()` because UITableView seems to flash when reloading rows with animation no matter what you pass.
",Adlai-Holler,nguyenhuy
793,2015-10-29 18:54:43,"@Adlai-Holler: 

> Does this mean cells will flash when they resize?

""Reload"" destroys the existing node and loads a new one. ""Relayout"" (as in this PR) means the existing node is reused and only its layout is updated. This PR allows you to pass relayout animation (UITableViewRowAnimation) to a cell node, which will then be passed to ASTableView and the underlying UITableView ([here](https://github.com/facebook/AsyncDisplayKit/pull/793/files#diff-4e07fb12c9001054ec63eb1bfd7aa69eR925)). You can also animate the layout changes by wrapping `-setNeedsLayout` inside an animation block (like [this](https://github.com/facebook/AsyncDisplayKit/blob/master/examples/Kittens/Sample/KittenNode.mm#L190)).

> In client apps I specifically avoid calling reloadRowsAtIndexPaths in favor of beginUpdates() / endUpdates() because UITableView seems to flash when reloading rows with animation no matter what you pass.

Yeah, that's because of the delete + insert behaviour. Though you can do some tricks to hide the flash like [this](https://github.com/facebook/AsyncDisplayKit/issues/616#issuecomment-133422166), I would recommend avoiding reload methods, as discussed [here](https://github.com/facebook/AsyncDisplayKit/issues/616#issuecomment-133422166).
",nguyenhuy,Adlai-Holler
792,2015-10-29 11:01:48,"Thanks @nguyenhuy i'm using the `-toggleNodesSwap` method in `KittenNode.mm` that calls `-setNeedsLayout` like so:



Would this not be enough to trigger the layout pass?
",aaronschubert0,nguyenhuy
792,2015-11-01 03:10:19,"@aaronschubert0 thanks a lot for filing an issue and talking with us about this — I appreciate you taking the time to give feedback to the community!

AsyncDisplayKit is in the midst of its evolution from a very raw, high-performance tool that needs to be wielded carefully -- to a highly automatic, convenient set of behaviors that make normal app development easier.  This is a key example where we've not yet fully bridged the gap and made things convenient rather than just powerful.  Another example is the stretching text you see in the videos; this is the current default behavior (more advanced usage can customize this to suit the requirements of the animation).  A better default is probably possible.

Please let us know if you have any other experiences or feedback to share!
",appleguy,aaronschubert0
792,2015-11-02 20:04:18,"Hey @appleguy thanks a lot for taking the time to respond to me in full, really appreciate that. The AsyncDisplayKit community is really awesome. It's awesome to hear of that transition taking place right now, an exciting time to take part. It's interesting that you mentioned the stretching text, because I was wondering about this actually. A better default may be a simple fade but to be honest it's more likely that the documentation still needs to be in place so that we know what's possible, which you have mentioned elsewhere is a big addition/priority of ASDK 2.0. I believe ASDK is going to be really significant going forward so I will not hesitate to give as much feedback as possible, and generally be more involved. Since this 'issue' has been addressed in #793 I'm going to go ahead and close this now, it's amazing how quick the turnaround was! 
",aaronschubert0,appleguy
791,2015-10-29 16:10:37,"@appleguy indeed could be a regression from the recent changes. I don't have much time this week to take a look, Sunday at the earliest. @nguyenhuy if you're able to check this out earlier that would be awesome!
",levi,appleguy
791,2015-10-30 19:37:27,"@nguyenhuy I'm currently looking at this issue for my project and I think I could have something PR-ready later today. I want to make sure we aren't duplicating effort. Are you in the middle of this one already?
",eanagel,nguyenhuy
791,2015-10-30 20:12:35,"@eanagel: My incompetent skills can't get me any further. I was about to ask for your help. Please go ahead.
",nguyenhuy,eanagel
791,2015-10-30 20:34:56,"@nguyenhuy 

> The backing store (view or layer, but most likely view in this case) of invisible nodes are removed from the shared window by ASRangeHandlerRender, but the nodes themselves are still retained by ASDataController. They should be deallocated when the data controller deletes them, or when it reloads data.

Yes, but as i see from code, corresponding method of ASRangeHandlerRender is called only when visible range changes due to collection view/table view scroll action.
",ERussel,nguyenhuy
791,2015-10-30 20:59:15,"@eanagel @nguyenhuy @ERussel does anyone have a test case for this?  I am ready to debug now (I have another meeting at 3 though).  I know the range controller code and can probably fix it, but need a reproduction case.
",appleguy,nguyenhuy
791,2015-10-30 20:59:15,"@eanagel @nguyenhuy @ERussel does anyone have a test case for this?  I am ready to debug now (I have another meeting at 3 though).  I know the range controller code and can probably fix it, but need a reproduction case.
",appleguy,eanagel
791,2015-10-30 21:04:39,"@eanagel said he can reproduce this in his app and is already working on a diff.
",nguyenhuy,eanagel
791,2015-10-30 21:05:05,"yeah, @eanagel pinged me and suggested I take a look.  I think he's AFK right now.
",appleguy,eanagel
791,2015-11-03 01:57:13,"@ERussel - Hey man, could you help me reproduce this?  I had plenty of time to fix it this weekend, but had to stop looking at it because everything I tried couldn't make it happen.  I totally believe that it is possible, and have ideas for fixes, but can't test whether they work and so can't really make progress.

If you could post a diff / .zip file / PR / or even just written instructions on how to modify any of the examples/ projects to reproduce, that would be fantastic!

I'm going to land my PR which makes some changes that hopefully allow us to reproduce with only a few additional tweaks:  https://github.com/facebook/AsyncDisplayKit/pull/801

cc @eanagel - I think it is fine to wait until after your super urgent deadline coming up this week.  Even after that, I am more than comfortable taking over the fix for this issue.  If you do have time to help, the only thing I need is reproduction steps.
",appleguy,eanagel
791,2015-11-03 06:12:00,"@appleguy Let me see if I repro with my virtualization example project...
",eanagel,appleguy
791,2015-11-03 06:30:01,"@appleguy @eanagel @nguyenhuy 

Sorry for delay. I made a simple project to reproduce the issue. You can find it here https://github.com/ERussel/TestColoredCollectionView

To reproduce the issues make the following steps:
1. Profile with Allocations Instrument.
2. Scroll 3-4 rows.
3. Switch to green.
4. Scroll 3-4 row.
5. Switch to blue.
6. Sort allocations in Profile window.

Normally, you should see only allocated BlueCell objects, but due to bug you will see also allocated RedCell and GreenCell objects. 

I hope, i could explain! Thank you for time spending to this issue.
",ERussel,nguyenhuy
791,2015-11-03 06:30:01,"@appleguy @eanagel @nguyenhuy 

Sorry for delay. I made a simple project to reproduce the issue. You can find it here https://github.com/ERussel/TestColoredCollectionView

To reproduce the issues make the following steps:
1. Profile with Allocations Instrument.
2. Scroll 3-4 rows.
3. Switch to green.
4. Scroll 3-4 row.
5. Switch to blue.
6. Sort allocations in Profile window.

Normally, you should see only allocated BlueCell objects, but due to bug you will see also allocated RedCell and GreenCell objects. 

I hope, i could explain! Thank you for time spending to this issue.
",ERussel,appleguy
791,2015-11-03 06:30:01,"@appleguy @eanagel @nguyenhuy 

Sorry for delay. I made a simple project to reproduce the issue. You can find it here https://github.com/ERussel/TestColoredCollectionView

To reproduce the issues make the following steps:
1. Profile with Allocations Instrument.
2. Scroll 3-4 rows.
3. Switch to green.
4. Scroll 3-4 row.
5. Switch to blue.
6. Sort allocations in Profile window.

Normally, you should see only allocated BlueCell objects, but due to bug you will see also allocated RedCell and GreenCell objects. 

I hope, i could explain! Thank you for time spending to this issue.
",ERussel,eanagel
791,2015-11-03 06:34:47,"Thanks so much!  This should be enough.  I have a full meeting day at work tomorrow, but will definitely start debugging on Wednesday.

Sent from my iPhone

> On Nov 2, 2015, at 10:30 PM, Ruslan notifications@github.com wrote:
> 
> @appleguy @eanagel @nguyenhuy
> 
> Sorry for delay. I made a simple project to reproduce the issue. You can find it here https://github.com/ERussel/TestColoredCollectionView
> 
> To reproduce the issues make the following steps:
> 
> Profile with Allocations Instrument.
> Scroll 3-4 rows.
> Switch to green.
> Scroll 3-4 row.
> Switch to blue.
> Sort allocations in Profile window.
> Normally, you should see only allocated BlueCell objects, but due to bug you will see also allocated RedCell and GreenCell objects.
> 
> I hope, i could explain! Thank you for time spending to this issue.
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,nguyenhuy
791,2015-11-03 06:34:47,"Thanks so much!  This should be enough.  I have a full meeting day at work tomorrow, but will definitely start debugging on Wednesday.

Sent from my iPhone

> On Nov 2, 2015, at 10:30 PM, Ruslan notifications@github.com wrote:
> 
> @appleguy @eanagel @nguyenhuy
> 
> Sorry for delay. I made a simple project to reproduce the issue. You can find it here https://github.com/ERussel/TestColoredCollectionView
> 
> To reproduce the issues make the following steps:
> 
> Profile with Allocations Instrument.
> Scroll 3-4 rows.
> Switch to green.
> Scroll 3-4 row.
> Switch to blue.
> Sort allocations in Profile window.
> Normally, you should see only allocated BlueCell objects, but due to bug you will see also allocated RedCell and GreenCell objects.
> 
> I hope, i could explain! Thank you for time spending to this issue.
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,appleguy
791,2015-11-03 06:34:47,"Thanks so much!  This should be enough.  I have a full meeting day at work tomorrow, but will definitely start debugging on Wednesday.

Sent from my iPhone

> On Nov 2, 2015, at 10:30 PM, Ruslan notifications@github.com wrote:
> 
> @appleguy @eanagel @nguyenhuy
> 
> Sorry for delay. I made a simple project to reproduce the issue. You can find it here https://github.com/ERussel/TestColoredCollectionView
> 
> To reproduce the issues make the following steps:
> 
> Profile with Allocations Instrument.
> Scroll 3-4 rows.
> Switch to green.
> Scroll 3-4 row.
> Switch to blue.
> Sort allocations in Profile window.
> Normally, you should see only allocated BlueCell objects, but due to bug you will see also allocated RedCell and GreenCell objects.
> 
> I hope, i could explain! Thank you for time spending to this issue.
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,eanagel
791,2015-11-09 03:24:51,"@ERussel this should now be fixed after #830 - please reopen if you still see a relevant number of leaks.

Looking at @eanagel's test project, there is actually one instance of ASTextNode (but zero instances of ASCellNode, etc) that is orphaned per intense usage session of the view.  The amount of memory is incredibly tiny.  However, this is still not acceptable, so feel free to follow #828 for the complete 100% fix of that (I have confirmed that even in the diff's rough state, it does eliminate /all/ orphaned / leaked elements in every test case I have).

If you have a test case that is orphaning more than just one object per creation / destruction cycle of the collection or table, please let me know.  Still though, most likely the best fix will be #828.
",appleguy,eanagel
790,2015-10-29 01:18:28,"@appleguy @levi you can find a test project [here](https://dl.dropboxusercontent.com/u/14102938/DelegateNil.zip), which describes the scenario I mentioned above. I am building AsyncDisplayKit with this `075843addc6af1a6020481075ae6a120df93d227` commit.
",RuiAAPeres,levi
790,2015-10-31 23:43:39,"@appleguy not yet. Haven't had the time to thoroughly test it. 
",RuiAAPeres,appleguy
790,2015-12-08 21:17:45,"@appleguy sure, give me a sec!
",RuiAAPeres,appleguy
789,2015-10-30 01:45:35,"Thanks @Adlai-Holler :).  Is there any equivalent usage of this needed in ASTableView, or do the differences in the batch API mean it isn't necessary?
",appleguy,Adlai-Holler
789,2015-10-30 01:56:53,"Of course @appleguy! I think all our bases are covered – the ASTableView change came in the form of switching our `ASPerformBlockWithoutAnimation()` function away from `setAnimationsEnabled:`. We no longer use `setAnimationsEnabled:` at all so we should be all good :fist: 
",Adlai-Holler,appleguy
788,2015-10-29 18:18:26,"@Adlai-Holler  I _think_ this is solving the issue. Though the problem only showed up very rarely. I'll reopen if i see it again.
",tettoffensive,Adlai-Holler
787,2015-10-28 18:49:24,"@vitalybaev Dude this is so helpful. thank you very much!! May the Force be with you!!
",robmontesinos,vitalybaev
787,2015-11-05 23:28:05,"I have a method where I add links to an ASTextNode - got it to work with help from @vitalybaev 
I am trying to change the color of the links like they were before using a UILabel subclass called KILabel but with ASTextNode the links remain blue regardless of the attributes sent. Any ideas on how to get this work?

The link works fine but there seems to be no color option with links in the text node.


",robmontesinos,vitalybaev
787,2016-03-25 18:51:41,"@robmontesinos @vitalybaev - The community is planning an exciting long term road map (including lots of documentation!) for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,vitalybaev
786,2015-10-28 18:41:57,"Thanks for this, @eanagel. I've been seeing these leaks in instruments recently. Nice optimization!
",levi,eanagel
785,2015-10-28 11:12:22,"Another way is to call the new -relayoutNodeAtIndexPath method of ASTableView which triggers setNeedsLayout on the node (so you dont need to) and calls the table view to relayout with animation.

@vitalybaev: I promised to notify you once this API is available but have forgotten until now, sorry :)
",nguyenhuy,vitalybaev
785,2015-10-28 11:44:40,"@nguyenhuy Oh, I missed API changes, thanks for your work!
",vitalybaev,nguyenhuy
784,2015-11-09 19:39:52,"""Crashes are completely unacceptable provided the delegate / dataSource state are consistent — calling reload repeatedly during a load is definitely no exception.""

@appleguy What about if the datasource changes. The data source is set to a NSDictionary of NSArrays which do get updated when new data is pulled down from the server.
",tettoffensive,appleguy
783,2015-10-28 10:39:52,"@nguyenhuy fixed it
",vitalybaev,nguyenhuy
783,2015-10-28 11:01:23,"@nguyenhuy Sure! Have a nice day (or mb... night?) :+1: 
",vitalybaev,nguyenhuy
782,2015-10-28 04:38:56,"@eanagel hmm, this must be an ARC bug I guess?  Do we take the CGColor out of a UIColor in order to standardize on CGColor for layer-backing?

I'm not super familiar with how to deal with these edge cases under ARC (antiquated MRR guy here...), so I'll let this hang out until there is more time to investigate.  The retain cycle with ASBasicImageDownloader is a far more serious memory issue anyway, for any users of that component.
",appleguy,eanagel
780,2015-10-31 23:14:41,"@levi I merged your patch, but does it completely address this?  If so, could you elaborate just a bit?  I'm not seeing all that many uses for the method for typical developers, but could be missing something too; we should add some additional comments in a future diff with examples of common use cases, especially the scrolling one.
",appleguy,levi
780,2015-11-01 22:08:16,"@levi is it fair to say that this issue should be solved independently from ASViewController, just as long as the solution does work elegantly with ASVC?

Any ideas on how we can accomplish this?  @nguyenhuy you may have the best intuition.  Clearly ASLayoutSpec is capable of performing all the calculations needed; we just need to determine what a reasonable specialized behavior is for ASScrollNode and how to integrate it seamlessly in a way that is intuitive.

One way might be: children of ASScrollNodes are given unbounded size in the direction of scrolling, if we can determine the scroll direction at layout time.  Then we need a way to actually set the contentSize, which might be based on using CGRect unions of all of the layout specs / nodes within the scroll node and using the maximum width of that joint rect?
",appleguy,levi
780,2015-11-13 01:13:00,"@nguyenhuy from my quick skimming, seems like a really cool approach! Will all ASScrollViews require that the returned spec is an ASScrollLayoutSpec? How will it identify at layout time that the spec is specific to the content size?
",levi,nguyenhuy
780,2015-12-09 18:18:20,"Sorry for the long delay @levi. I think what we need is an ASScrollNode that holds an UIScrollView and returns an ASScrollLayoutSpec. The node will also take care of setting its contentSize, either in -layout or -layoutDidFinish (not sure yet). I reckon those are the only responsibilities of this new node, so it will be a simple one.

I can put up a new PR contains these new classes so that you guys will have a better idea and give some feedbacks. Since this issue is set to milestone 2.1, I won't work on it immediately though. @appleguy It will be easier for me to keep track if you assign this issue to me :) 
",nguyenhuy,levi
780,2015-12-09 18:18:20,"Sorry for the long delay @levi. I think what we need is an ASScrollNode that holds an UIScrollView and returns an ASScrollLayoutSpec. The node will also take care of setting its contentSize, either in -layout or -layoutDidFinish (not sure yet). I reckon those are the only responsibilities of this new node, so it will be a simple one.

I can put up a new PR contains these new classes so that you guys will have a better idea and give some feedbacks. Since this issue is set to milestone 2.1, I won't work on it immediately though. @appleguy It will be easier for me to keep track if you assign this issue to me :) 
",nguyenhuy,appleguy
779,2015-10-28 04:43:02,"@joamafer Thanks for asking the question — @vitalybaev is correct, this is supported in master and will be in all future releases.  I'm planning to release AsyncDisplayKit 1.9 later this week, which will be a stable version that includes this API.

@joamafer please reopen (or open a new issue) if you have any other question!
",appleguy,vitalybaev
774,2015-10-26 05:55:45,"Nice! Thanks again @nguyenhuy
",Adlai-Holler,nguyenhuy
773,2015-10-26 04:21:44,"Yes!! That rocks, you rock, thank you so much @nguyenhuy 
",Adlai-Holler,nguyenhuy
772,2015-10-26 18:47:00,"Thanks @appleguy !!

2015-10-26 11:39:37.076 APPNAME[2116:28093] **\* Assertion failure in -[MyASTableView dataControllerLockDataSource], /Users/xxxxxxxxxxxxxx/Pods/AsyncDisplayKit/AsyncDisplayKit/ASTableView.mm:837
2015-10-26 11:39:37.160 APPNAME[2116:28093] **\* Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'The data source has already been locked'
**\* First throw call stack:
(
    0   CoreFoundation                      0x000000010a6c4c65 **exceptionPreprocess + 165
    1   libobjc.A.dylib                     0x000000010a35dbb7 objc_exception_throw + 45
    2   CoreFoundation                      0x000000010a6c4aca +[NSException raise:format:arguments:] + 106
    3   Foundation                          0x000000010789e98f -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 195
    4   APPNAME                          0x0000000105921a41 -[ASTableView dataControllerLockDataSource] + 273
    5   APPNAME                          0x000000010588b0ea -[ASDataController accessDataSourceWithBlock:] + 426
    6   APPNAME                          0x000000010588a227 __62-[ASDataController reloadDataWithAnimationOptions:completion:]_block_invoke + 615
    7   APPNAME                          0x000000010588c6fd -[ASDataController performEditCommandWithBlock:] + 77
    8   APPNAME                          0x0000000105889f39 -[ASDataController reloadDataWithAnimationOptions:completion:] + 201
    9   APPNAME                          0x000000010591a37d -[ASTableView reloadDataWithCompletion:] + 621
    10  APPNAME                          0x000000010591a4cf -[ASTableView reloadData] + 47
    11  APPNAME                          0x00000001057820fc -[MainPagingViewController reloadTableViews] + 172
    12  APPNAME                          0x000000010578242a -[MainPagingViewController didUpdateUsers] + 234
    13  CoreFoundation                      0x000000010a69454c __CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER** + 12
    14  CoreFoundation                      0x000000010a592a04 _CFXNotificationPost + 2484
    15  Foundation                          0x00000001077e0968 -[NSNotificationCenter postNotificationName:object:userInfo:] + 66
    16  APPNAME                          0x000000010581008d +[CoreDataHelper saveUsersThenNotify] + 125
    17  APPNAME                          0x000000010574c1aa __45-[UserClient loadUser:forLastUser:]_block_invoke + 2106
    18  libdispatch.dylib                   0x000000010b2a1186 _dispatch_call_block_and_release + 12
    19  libdispatch.dylib                   0x000000010b2c0614 _dispatch_client_callout + 8
    20  libdispatch.dylib                   0x000000010b2a8a1c _dispatch_main_queue_callback_4CF + 1664
    21  CoreFoundation                      0x000000010a62c1f9 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 9
    22  CoreFoundation                      0x000000010a5eddcb __CFRunLoopRun + 2043
    23  CoreFoundation                      0x000000010a5ed366 CFRunLoopRunSpecific + 470
    24  GraphicsServices                    0x000000010b777a3e GSEventRunModal + 161
    25  UIKit                               0x00000001088768c0 UIApplicationMain + 1282
    26  DeezTweetz                          0x000000010581447f main + 111
    27  libdyld.dylib                       0x000000010b2f4145 start + 1
)
libc++abi.dylib: terminating with uncaught exception of type NSException
",robmontesinos,appleguy
772,2015-10-27 18:56:07,"@levi Thanks for looking into this. I will get on it tonight and see what I can do. Salud!
",robmontesinos,levi
772,2015-10-28 01:50:12,"@levi I reset the Simulator so that the Core Data Object Model would have to be rebuilt - I set a breakpoint on dataControllerLockDataSource and ran it.

On initial load:
[tableView reloadData] call finds self.asyncDataSourceLocked = NO;

After the user logs in, data is received from server, Core Data Entity is updated and table is refreshed via another [tableView reloadData] from a completion block where self.asyncDataSourceLocked = YES;

We get **\* Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'The data source has already been locked'

I'm going to try calling reloadData on main thread from completion block to see what happens
",robmontesinos,levi
772,2015-10-28 01:58:41,"Roberto, sounds like that is might be coming from the fact the first reloadData hasn't completed by the time the second one is called. You should check if the first call does indeed lock the data source after it is complete. If not, that is most likely you're issue.

> On Oct 27, 2015, at 18:50, Roberto Montesinos notifications@github.com wrote:
> 
> @levi I reset the Simulator so that the Core Data Object Model would have to be rebuilt - I set a breakpoint on dataControllerLockDataSource and ran it.
> 
> On initial load:
> [tableView reloadData] call finds self.asyncDataSourceLocked = NO;
> 
> After the user logs in, data is received from server, Core Data Entity is updated and table is refreshed via another [tableView reloadData] from a completion block where self.asyncDataSourceLocked = YES;
> 
> We get **\* Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'The data source has already been locked'
> 
> I'm going to try calling reloadData on main thread from completion block to see what happens
> 
> —
> Reply to this email directly or view it on GitHub.
",levi,levi
772,2015-10-28 02:05:25,"@levi In my case, the first reloadData is definitely completed by the time the second one is called because the second one doesn't get called until there has been a successful login on Twitter. The second reloadData is being called to refresh the entities with account specific stuff like images and follower count. Is it possible that unlock data source is not being called? Lock data source is certainly being called.

I have these methods on the View Controller that I just copied in from Kittens - could they be the culprits?


",robmontesinos,levi
772,2015-11-08 19:17:00,"@appleguy Thank you sir!
",robmontesinos,appleguy
769,2015-10-31 17:39:42,"@appleguy any chance to solve issue? is there any way layout all horizontal cell in advance so this jerky backward flicker won't appear?!
",hashemp206,appleguy
767,2015-10-24 02:41:26,"@Adlai-Holler of course.  I've run into this before, just delayed addressing it because of a desire to implement the threading model that Paper uses with ASDK (eliminate the current thread affinity assertions).  However, conditions have changed, and I am not going to have time until later this year or early next to do that.

I'd be happy to take any submissions that achieve this.  It's a pretty rarely used property for most people, but making it practical to actually use could encourage adoption :-P 
",appleguy,Adlai-Holler
767,2015-10-24 18:15:31,"@appleguy Very cool. I'm stoked to learn about that threading model, since the thread affinity assertions are so dumb :grin: 
",Adlai-Holler,appleguy
766,2015-10-25 06:55:17,"I love here you're going with this, @levi! I have several use cases for this myself, including the initial load of data. One question I had - is it possible to mix and match synchronous and asynchronous operations safely? In my brief scan of the code, I didn't see how you were keeping transactions in the editing transaction queue from stomping on a synchronous operation or is that covered because we already do enough on the main thread to keep things safe?
",eanagel,levi
766,2015-10-25 09:31:39,"@eanagel, any section or row modification method in the data controller first expects to be on the main thread in order to be called. Second, before the method body takes place, these methods call `waitUntilAllOperationsAreFinished` on the editing queue to ensure its transactions are consistent. Since the synchronous version of  reloadData is performed entirely on main (except for parallelized node layout), we shouldn't run into threading issues with external clients using the data controller.

> On Oct 24, 2015, at 23:55, Ethan Nagel notifications@github.com wrote:
> 
> I love here you're going with this, @levi! I have several use cases for this myself, including the initial load of data. One question I had - is it possible to mix and match synchronous and asynchronous operations safely? In my brief scan of the code, I didn't see how you were keeping transactions in the editing transaction queue from stomping on a synchronous operation or is that covered because we already do enough on the main thread to keep things safe?
> 
> —
> Reply to this email directly or view it on GitHub.
",levi,levi
766,2015-10-25 09:31:39,"@eanagel, any section or row modification method in the data controller first expects to be on the main thread in order to be called. Second, before the method body takes place, these methods call `waitUntilAllOperationsAreFinished` on the editing queue to ensure its transactions are consistent. Since the synchronous version of  reloadData is performed entirely on main (except for parallelized node layout), we shouldn't run into threading issues with external clients using the data controller.

> On Oct 24, 2015, at 23:55, Ethan Nagel notifications@github.com wrote:
> 
> I love here you're going with this, @levi! I have several use cases for this myself, including the initial load of data. One question I had - is it possible to mix and match synchronous and asynchronous operations safely? In my brief scan of the code, I didn't see how you were keeping transactions in the editing transaction queue from stomping on a synchronous operation or is that covered because we already do enough on the main thread to keep things safe?
> 
> —
> Reply to this email directly or view it on GitHub.
",levi,eanagel
766,2015-10-25 15:34:01,"@levi, that makes perfect sense! The waitUntilAllOperationsAreFinished is the rather important piece that I missed in this.
",eanagel,levi
766,2015-10-26 04:05:49,"@levi this is so awesome.  Thank you for doing this within hours of the community raising it as a need!

Would it make sense to add the synchronous mode to the Kittens app without duplicating the project?  Maybe even a tab bar controller within the main Kittens app?

If so, you could do a later PR that deletes the new sample project and merges them.  It could actually be a good environment to test ASViewControllers' ability to preload an ASTableView or ASCollectionView before the controller is shown; this is not implemented yet, but needs to be soon.  We could also test neverShowsPlaceholders in such an app.

If you have a different idea for combining them, please do!
",appleguy,levi
764,2016-03-25 19:55:04,"@levi - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,levi
763,2015-10-26 11:46:21,"@appleguy, thank you helping me! But I didn't find prefect solution now. 
",TernTuring,appleguy
761,2015-10-21 23:45:35,"Totally agree on having only one synchronous method to do all job related to rendering visible portion of table (taking huge tables in consideration, as pointed by @levi).

Here is how such method could look like:
1) query nodes batch of predefined size on main thread;
2) do batch layout on them, blocking main thread;
3) repeat 1,2 if batch is too small to fill the table;
4) proceed as usual, relying on `neverShowPlaceholders` to render nodes content.

Step 1 implies support for partially updated internal state for table's data, which maybe non-trivial to implement.

Maybe it's worth thinking of this process as of pipeline with heavily parallel stages: query data source for nodes, layout nodes, render nodes. We can easily block main thread, waiting for any stage to complete, similarly to current implementation of batch layout.
",zintus,levi
759,2015-10-21 00:14:17,"@appleguy HAHA o app content - test entries at the moment but in the future???
",robmontesinos,appleguy
759,2015-10-21 00:23:18,"Cool beans @appleguy - I'm gonna kill the contentSize and see what happens
",robmontesinos,appleguy
759,2015-10-21 02:16:49,"@appleguy  You are a Genius!! Here is what worked and a screenshot. I left the commented code in so you could see what I was trying.


",robmontesinos,appleguy
759,2015-10-21 02:26:41,"You bet @appleguy  - 420 and out!!
",robmontesinos,appleguy
759,2015-10-21 17:31:51,"@robmontesinos Do you somehow provide a fixed constrained height for each cell node? I asked this question because currently ASTableViewDataSource can't provide different constrained heights for each cells. And without a fixed constrained height (63, right?), the text nodes can grow vertically to wrap their texts. I think it makes sense to have -constrainedHeightForNodeAtIndexPath: in ASTableViewDataSource (note: not constrained size but constrained height, because we want table view cells to always fill the table view width). @appleguy, @rcancro: What do you think?

In case you are curious about why setting ""all three"" works, here is my explanation:
- Since the vertical stack is a child of a horizontal stack, enabling flexShrink on the vertical stack means it can shrink horizontally (flexShrink is effective on the stack direction). So the vertical stack fills the available width.
- The 2 text nodes are children of a vertical stack, so flexShrink means they can shrink vertically and thus fill the available height, which is 63 in this case.

Also, can the caption text (and title text) be really long? If so then it is possible that one of the 2 text nodes (likely titleTextNode because caption text is usually much longer) will be asked to shrink to a very small size that it cannot render even 1 line of text (or even asked to shrink to 0). This is because stack layout spec distributes stack-dimension violations evenly to all of its flexible children. Fortunately, you can easily handle this case. 
- Instead of enabling flexShrink on titleTextNode, you can set its maximumLineCount to 1 (or maybe 2). This change causes titleTextNode to always have enough space to render at most 1 line, and captionTextNode can fill the remaining height.
- Or if the caption is optional, you can just disable flexShrink on titleTextNode. This way, titleTextNode will take as much (vertical) space as it wants.

And of course, feel free to ask if you have problems with more complex layouts. We are happy to help :)
",nguyenhuy,appleguy
759,2015-10-21 17:41:08,"@nguyenhuy I did provide a nodeSize to the ASCellNode as part of its init before I started with ASLayout, i.e. code below



Since @appleguy helped me get ASLayout to work, I noticed that my fixed height cell grew using the same node on another view controller. I was thinking of truncating the text but what you propose in terms of -constrainedHeightForNodeAtIndexPath: would be much better. I wonder if self.preferredFrameSize would work on the ASCellNode? I think it's a great idea @nguyenhuy 
",robmontesinos,nguyenhuy
759,2015-10-21 17:41:08,"@nguyenhuy I did provide a nodeSize to the ASCellNode as part of its init before I started with ASLayout, i.e. code below



Since @appleguy helped me get ASLayout to work, I noticed that my fixed height cell grew using the same node on another view controller. I was thinking of truncating the text but what you propose in terms of -constrainedHeightForNodeAtIndexPath: would be much better. I wonder if self.preferredFrameSize would work on the ASCellNode? I think it's a great idea @nguyenhuy 
",robmontesinos,appleguy
759,2015-10-21 17:41:33,"@appleguy: I think it's a good idea to have flexShrink enabled by default for text nodes. @rcancro: How about you?

> One framework improvement that would be nice — but may not be logically compatible with the overall layout rules of Flexbox... — would be if a stack containing all flexShrink = YES items were automatically flexShrink itself.

Since flexShrink is used against the stack dimension of the parent stack, I think this can confuse other developers. For example, if all children in a vertical stack can shrink (vertically), that doesn't always mean the vertical stack itself should shrink horizontally (if added inside a horizontally stack). It is true in @robmontesinos's layout because he happens to want a fixed height, but not in other (normal) cases.
",nguyenhuy,appleguy
759,2015-10-21 17:48:45,"@nguyenhuy When you're right, you're right. Thank you sir
",robmontesinos,nguyenhuy
759,2015-10-21 18:06:04,"That's fantastic @nguyenhuy - I will try to contribute in a few weeks - huge deadline on present project - thank you for your help in getting this ASLayout functionality going - I really like it
",robmontesinos,nguyenhuy
758,2015-10-26 02:54:52,"Thanks so much, @nguyenhuy !
",appleguy,nguyenhuy
757,2015-10-22 12:54:45,"@wy19901227 Here's a video from a year ago where @appleguy talks about the first version of ASDK: https://vimeo.com/103589245

Here's another one from about a month ago where he talks about the new features in ASDK 2.0
",smeis,appleguy
757,2015-10-22 18:18:19,"Hi @smeis!  You found my terrible, stutters presentation from NSSpain :-P hahah.  I'm going to post an edited / fixed version of it soon (have never needed to do that for my other talks, but I was way under-prepared for that one).

Hang tight while I get that video ready in the next couple days.
",appleguy,smeis
757,2015-10-26 01:24:56,"@wy19901227 @smeis Here's the edited video.  It's a bit hacked up, but definitely less jarring to watch than the original.  Please feel free to share it around!

Looking forward to any questions you have posted in new Issues.

https://www.youtube.com/watch?v=RY_X7l1g79Q
",appleguy,smeis
755,2015-10-20 20:23:49,"@nvh I believe this issue had been encountered and fixed, but if it is still happening in the latest master, it's a very important issue to solve and we'll investigate it promptly.

Can you confirm what version of ASDK you're running against?  Either a version number, or a commit hash?

I have been delayed in pushing the 1.9 stable release due to getting sick & needing to prioritize the day job, but may be able to get it finalized tomorrow (fallback is the weekend).  If this is happening on master, though, I will want to make sure it is fixed before we do 1.9.
",appleguy,nvh
755,2015-10-20 20:30:05,"@nguyenhuy since you just significantly revised how batch processing works, take a look at this stack and let us know if you think it would be addressed by your diff.

@nvh, please look at the active PR that is up for that.  If you were already running against master, if you could do a quick test for us against @nguyenhuy's patch it would be really awesome.

Batch updates in particular have been a weak spot for a long time; my ASDataController refactor from a couple months ago stabilized the basic editing flows, but it's taken until now to get the critical investment needed to finally eliminate all remaining issues with slightly more complex editing flows.  This is arguably the #1 priority of the project right now, so being able to confirm whether Huy's patch is sufficient or incomplete will be excellent input.
",appleguy,nvh
755,2015-10-21 18:35:45,"@nvh: Can you try to run your code against #753. One explanation for the crash is that there is a mismatch between the ways ASDataController and the underlying UICollectionView perform batch updates. And my recent PR is supposed to fix this crash, if it is the case.
",nguyenhuy,nvh
755,2015-10-26 12:04:12,"Thanks for trying it out, @nvh. I will try to reproduce this crash and fix it ASAP. In the meantime, it will be tremendously helpful if you could post a project (maybe based on our existing examples) that can reliably reproduce the crash.
",nguyenhuy,nvh
755,2015-10-27 05:54:55,"@nguyenhuy thanks a bunch for digging into this.  We absolutely have to fix this.  @nvh we appreciate you trying yet another patch and apologize for the fact that this has not worked in your app.

@levi, was it your app that had an NSFetchedResultsController?  We really need to make a checked-in examples/ test case that uses an FRC and can reproduce a case as stressful as @nvh's app causes, as I think we have at least 5 different apps with pretty serious edit behavior that haven't yet broken master.
",appleguy,nguyenhuy
755,2015-10-27 05:54:55,"@nguyenhuy thanks a bunch for digging into this.  We absolutely have to fix this.  @nvh we appreciate you trying yet another patch and apologize for the fact that this has not worked in your app.

@levi, was it your app that had an NSFetchedResultsController?  We really need to make a checked-in examples/ test case that uses an FRC and can reproduce a case as stressful as @nvh's app causes, as I think we have at least 5 different apps with pretty serious edit behavior that haven't yet broken master.
",appleguy,nvh
755,2015-10-27 08:33:07,"I was able to reproduce the crash by adding this code to `ViewController.m` in the `ASCollectionView` sample:



And then tapping one of the cells.
(this was in master, but as the crash is the same as the one I'm seeing, I assume it also fails on @nguyenhuy's fork)

Let me know if you want me to put this into a sample project, but as it's very simple, I thought this would be more efficient :)
",nvh,nguyenhuy
755,2015-10-27 15:44:27,"@appleguy no fetched results controller in my app. What 5 apps that haven't broken master are you referring to?
",levi,appleguy
755,2015-10-27 17:59:24,"@levi does your app's usage of ASTableView / ASCollectionView cause crashes in ASDataController?  Pinterest doesn't, nor do a few other clients' following the improvements on master, but that is irrelevant as long as we can still cause an issue :).

I'm very grateful that @nvh found a reduction case!  @nguyenhuy if you don't have time this week to look, simply let me know and I will make it a priority.
",appleguy,levi
755,2015-10-27 17:59:24,"@levi does your app's usage of ASTableView / ASCollectionView cause crashes in ASDataController?  Pinterest doesn't, nor do a few other clients' following the improvements on master, but that is irrelevant as long as we can still cause an issue :).

I'm very grateful that @nvh found a reduction case!  @nguyenhuy if you don't have time this week to look, simply let me know and I will make it a priority.
",appleguy,nvh
755,2015-10-27 17:59:24,"@levi does your app's usage of ASTableView / ASCollectionView cause crashes in ASDataController?  Pinterest doesn't, nor do a few other clients' following the improvements on master, but that is irrelevant as long as we can still cause an issue :).

I'm very grateful that @nvh found a reduction case!  @nguyenhuy if you don't have time this week to look, simply let me know and I will make it a priority.
",appleguy,nguyenhuy
755,2015-10-28 13:06:02,"@nvh: Thanks for providing the code. Yes it is enough for me to debug and there is no need to put into a sample project.

I don't think this is caused by ASDK. As you guys may already know, a `UICollectionViewDataSource` is required to update its data before a batch-updates block returns (and `ASDataController` rightfully conforms to this requirement). However, `UICollectionView indexPathsForVisibleItems` (which is [used by `ASCollectionView visibleNodes`](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit%2FASCollectionView.mm#L384)) doesn't return a list of updated index paths until _after_ the last call of `collectionView:willDisplayNodeForItemAtIndexPath`, and _before_ the first call of `collectionView:didEndDisplayingNodeForItemAtIndexPath`. And because of this UICollectionView's behaviour, it's actually not safe to call `indexPathsForVisibleItems` (and therefore `visibleNodes`) in `willDisplayNodeForItemAtIndexPath`. 
",nguyenhuy,nvh
755,2015-10-28 23:43:53,"@nguyenhuy fascinating details!  I definitely did not know that.

These call order / API guarantee subtleties can be extremely complex to figure out for many developers, as it often doesn't seem like the most plausible cause of a given issue.  It's not actually about bad developers (it should be very clear that nvh can debug / derive these kind of implied behaviors / call orders), but more about the set of assumptions and expectations you approach an API with.

Can anyone think of a way that we can better document stuff like this, even though it is actually a UIKit behavior / limitation?  I'm not sure if an assertion or log message makes sense, but it might, if an edit transaction were recently submitted and the developer is asking for visible\* when we know it will not have been updated.  A non-asserting log might be best.
",appleguy,nguyenhuy
755,2015-10-28 23:46:49,"@nvh it would be quite helpful to have your assessment / confirmation of this if you are able to work around this limitation.  Especially if you discover that it is not true that UIKit has the same issue — for example, differences in how the APIs are structured implying different guarantees, or other subtle differences in behavior that can be problematic — I definitely want to hear about them.  This is an essential component of ASDK and the only way it will be bulletproof is with that kind of nuanced input / constructive criticism from thoughtful developers like yourself.
",appleguy,nvh
754,2015-10-21 03:07:58,"@appleguy , I had send a sample project to your mailbox. Thanks for your help!
",TernTuring,appleguy
753,2015-10-19 23:29:31,"Gonna check this out tonight, @nguyenhuy.
",levi,nguyenhuy
753,2015-10-20 05:27:55,"Clean addition on top of data controller. Would love it if the reasoning behind the design was well documented at the `ASChangeSetDataController` level (as described in a massive conversation in #684) and @Adlai-Holler's design of the change set objects at the internal level. Thanks for doing this, @nguyenhuy , I can tell you there will be a few happy people on my team once this lands. :+1: 
",levi,nguyenhuy
753,2015-10-20 06:24:57,"@levi Thanks for taking a look. I agree with you that `ASChangeSetDataController` deserves a better documentation. I'm just not so sure whether people would agree with me about the class existence. Its reasonings are separation of concerns, no UITableView/UICollectionView specific behaviours embedded in `ASDataController` and therefore reducing its complexity. Another minor benefit is that developers can switch back to `ASDataController` if `ASChangeSetDataController` causes any problems. I will add more documentation once others approve this approach.

That's said, it's really helpful if you could point out what are the things you would love to see in the documentation, from a new user (of that class) point of view.
",nguyenhuy,levi
753,2015-10-21 04:37:42,"@nguyenhuy can you look at the test failures with the build?  I did try re-running it, in case it was a flaky test, but it seems like it probably isn't.
",appleguy,nguyenhuy
753,2015-10-21 04:38:20,"BTW - this is an extremely awesome patch and another huge contribution to the community.  I can't believe how fast you did this following @levi's diff landing, lol!!  Thank you!
",appleguy,levi
753,2015-10-21 07:23:14,"Sure, I will look at the failed test. Looks like its the same one reported in #758.

Although I believe this diff should work nicely with @levi's supplementary-view feature, I admit that I haven't looked at the underlying diff closely and there might be some integration problems that I overlooked. I will recheck everything.
",nguyenhuy,levi
753,2015-10-22 01:39:07,"Awesome!  @nguyenhuy once the test is fixed, do you consider this diff ready to land, or believe that any iteration is needed?
",appleguy,nguyenhuy
753,2015-10-22 01:57:27,"@nguyenhuy just a quick glance at the conversations in the other issues, I'd love to see the documentation talk about the native ordering in UITableView/UICollectionView and that the `ASChangeSetDataController` is designed to simulate those characteristics. It's not entirely apparent to most people that table and collection views have a specific ordering of modification events.
",levi,nguyenhuy
753,2015-10-22 02:02:26,"@levi: yes, I will write that down. Thanks!
",nguyenhuy,levi
753,2015-10-23 01:35:54,"Awesome PR! Pursuant to @levi's point, maybe include this link: https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/TableView_iPhone/ManageInsertDeleteRow/ManageInsertDeleteRow.html#//apple_ref/doc/uid/TP40007451-CH10-SW17

The `xcdoc://` variant would be better but I can't get it to jump down to that specific section near the bottom of the document
",Adlai-Holler,levi
753,2015-10-25 17:52:12,"@levi I removed duplicate steps in _ASHierarchyChangeSet in ~~7e3df3b~~ 2b0829c. Please help me to review it.

@levi, @Adlai-Holler: I also added documentation to ASChangeSetDataController. Let me know what you think. Thanks.

@appleguy This PR is more or less ready to land. I will write some tests for these new classes in the next few days (and push to a new PR if this one landed by then).
",nguyenhuy,levi
753,2015-10-25 17:52:12,"@levi I removed duplicate steps in _ASHierarchyChangeSet in ~~7e3df3b~~ 2b0829c. Please help me to review it.

@levi, @Adlai-Holler: I also added documentation to ASChangeSetDataController. Let me know what you think. Thanks.

@appleguy This PR is more or less ready to land. I will write some tests for these new classes in the next few days (and push to a new PR if this one landed by then).
",nguyenhuy,appleguy
753,2015-10-25 17:52:12,"@levi I removed duplicate steps in _ASHierarchyChangeSet in ~~7e3df3b~~ 2b0829c. Please help me to review it.

@levi, @Adlai-Holler: I also added documentation to ASChangeSetDataController. Let me know what you think. Thanks.

@appleguy This PR is more or less ready to land. I will write some tests for these new classes in the next few days (and push to a new PR if this one landed by then).
",nguyenhuy,Adlai-Holler
753,2015-10-25 19:36:55,"@nguyenhuy Thanks!  Do you think this is safe to include the 1.9 release if I were to push it today?  I would like to do the release today, and having this improvement would definitely be a milestone.
",appleguy,nguyenhuy
753,2015-10-25 20:13:38,"@nguyenhuy could you take a quick look at the test failures now occurring on master?  I'm downloading Xcode 6.4 so I can try to reproduce locally, but it's definitely blocked my work for the weekend (wanted to get a lot of PRs merged today, but lots else to do, like writing release notes / preparing release / working on documentation / ASPagerNode etc)
",appleguy,nguyenhuy
753,2015-10-25 20:16:52,"Yeah, looking at the failures on master.
On Oct 25, 2015 10:13 PM, ""appleguy"" notifications@github.com wrote:

> @nguyenhuy https://github.com/nguyenhuy could you take a quick look at
> the test failures now occurring on master? I'm downloading Xcode 6.4 so I
> can try to reproduce locally, but it's definitely blocked my work for the
> weekend (wanted to get a lot of PRs merged today, but lots else to do, like
> writing release notes / preparing release / working on documentation /
> ASPagerNode etc)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/pull/753#issuecomment-150964744
> .
",nguyenhuy,nguyenhuy
753,2015-10-26 03:04:11,"@nguyenhuy it looks like master is green, but even re-running the tests here is failing.  It's possible the test is still flaky but I think this diff may have actually regressed something.

Check out the build...

Failures:
  0) -[ASTableViewTests testRelayoutAllRowsWithZeroSizeInitially](AsyncDisplayKitTests.xctest)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
/Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKitTests/ASTableViewTests.m:426: ((node.numberOfLayoutsOnMainThread) equal to (1)) failed: (""0"") is not equal to (""1""):
423       for (int row = 0; row < NumberOfRowsPerSection; row++) {
424         NSIndexPath _indexPath = [NSIndexPath indexPathForRow:row inSection:section];
425         ASTestTextCellNode *node = (ASTestTextCellNode *)[tableView nodeForRowAtIndexPath:indexPath];
426         XCTAssertEqual(node.numberOfLayoutsOnMainThread, 1);
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
427         XCTAssertEqual(node.constrainedSizeForCalculatedLayout.max.width, newSize.width);
428       }
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
*_ TEST FAILED: 213 passed, 1 failed, 0 errored, 214 total *\* (49140 ms)
",appleguy,nguyenhuy
753,2015-10-26 03:15:49,"@nguyenhuy ""fortunately"", it looks like the test failures are real.  I re-confirmed master is passing tests on Xcode 6.4 locally, and checked out this PR to run them again and got the same failure as the builedbot (2 total tests in my case though, both testRelayoutAllRowsWithZeroSizeInitially and testRelayoutAllRowsWithNonZeroSizeInitially).  
",appleguy,nguyenhuy
753,2015-10-26 04:32:13,"Oh, weird that it didn't rebase when re-running the build.  I'm pretty sure it normally does that, but maybe some other automatic action usually triggers the rebase builds.  Thanks, I'm excited to have almost all the open PRs merged.

Now we need master to be hit with a day of testing to pave out the recent table changes.  I'd like to reset the 1.9 release tag point to include the recent improvements, if at all possible.

Could folks bump the ASDK version you're testing against and let us know if you hit anything?  @rcancro, @eanagel, @levi, @Adlai-Holler
",appleguy,levi
753,2015-10-26 04:32:13,"Oh, weird that it didn't rebase when re-running the build.  I'm pretty sure it normally does that, but maybe some other automatic action usually triggers the rebase builds.  Thanks, I'm excited to have almost all the open PRs merged.

Now we need master to be hit with a day of testing to pave out the recent table changes.  I'd like to reset the 1.9 release tag point to include the recent improvements, if at all possible.

Could folks bump the ASDK version you're testing against and let us know if you hit anything?  @rcancro, @eanagel, @levi, @Adlai-Holler
",appleguy,Adlai-Holler
753,2015-10-26 04:33:20,"@nguyenhuy hmm, still failed in the number of layouts on main thing...

https://travis-ci.org/facebook/AsyncDisplayKit/jobs/87395262

/Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKitTests/ASTableViewTests.m:426: ((node.numberOfLayoutsOnMainThread) equal to (1)) failed: (""0"") is not equal to (""1""):
423       for (int row = 0; row < NumberOfRowsPerSection; row++) {
424         NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row inSection:section];
425         ASTestTextCellNode *node = (ASTestTextCellNode *)[tableView nodeForRowAtIndexPath:indexPath];
426         XCTAssertEqual(node.numberOfLayoutsOnMainThread, 1);
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
427         XCTAssertEqual(node.constrainedSizeForCalculatedLayout.max.width, newSize.width);
428       }
",appleguy,nguyenhuy
753,2015-10-26 12:15:23,"@appleguy You are right, Travis does merge the branch with master and run the tests on top of the merge commit. I just had a hard time believing the tests were still failing and desperately looked for someone to blame. How silly I am! But I think I found out the root cause and fixed it. All checks have passed :clap: 
",nguyenhuy,appleguy
752,2015-10-22 01:08:57,"@nguyenhuy thanks so much, this is really great!
",appleguy,nguyenhuy
751,2015-10-26 04:18:47,"This is just so cool.  Thanks @rcancro for one of the most delightful patches ASDK has ever seen :).

If someone wants to write a few tests for this, it will keep our code coverage number up.  It should be easy to add one or two in an existing test suite, just printing the node tree or spec tree of some existing hierarchy in the tests.
",appleguy,rcancro
750,2015-10-21 04:39:29,"@appleguy I see why you are saying. Is there a reason I shouldn't set the tableView frame in viewDidLoad?
",robmontesinos,appleguy
750,2015-10-21 04:41:09,"@appleguy  Maybe I can set the tableView frame via a class variable for frame and set the tableView frame to that value in viewWillLayoutSubviews?
",robmontesinos,appleguy
750,2015-10-21 04:42:48,"@appleguy Thank you Scott - the view controller doesn't change at all - thank you for the heads up on the flag. SAlud!!
",robmontesinos,appleguy
749,2015-10-21 15:07:37,"@appleguy This piece of code



Is just Swift syntax for `- (id)initWithViewBlock:(ASDisplayNodeViewBlock)viewBlock;` so I suppose that it's a correct implementation.

I spent some more time digging into the implementation and found out that adding an item is wrapped inside `ASPerformBlockWithoutAnimation` which explains why I could get my view to animate :).

I made it work by triggering the animation in dispatch_async inside layoutSubviews to jump out of the performWithoutAnimation block.


",petrpavlik,appleguy
748,2015-10-16 19:54:14,"@bimawa a few questions:
- What framework are you using?  What is deliverOnMainThread and subscribeNext:?  This seems like an unusual pattern, maybe reactive cocoa or something?  It may not be a compatible / advisable way to drive ASDK, but I simply don't know as there is very little information here.
- Have you tried using the built-in batch fetching calls of ASTableView?  If so, what features did they lack that made them not fit your needs?
",appleguy,bimawa
748,2015-10-17 08:11:48,"@appleguy i spen all day for understand whats i do srong. And its not related with tableVIew or BatchFetching or (yes) reactive cocoa. It's cool. I create new Table View and use myself cells and catch same behavior. 

> Have you tried using the built-in batch fetching calls of ASTableView?

Yes i do. 

> If so, what features did they lack that made them not fit your needs?

hmm i go research that..  
ok Scott thx for advice.
",bimawa,appleguy
748,2015-10-19 13:29:06,"@appleguy  Can't understand what's wrong. the problem is that when loading new data in 



and inserted to `tableView` indexPaths it reloaded scroll. similar behavior observed and kitten example. And I noticed that this happens when you insert elements into a table while scrolling continues. Now i go 
try insert indexPaths when scrolling is stop. And report what happened.
",bimawa,appleguy
748,2016-12-28 02:45:44,"@bimawa I do not understand, how you solve this?",lunajing,bimawa
745,2015-10-15 16:42:20,"@vitalybaev this is a nice extension, thank you!  If you are able to hook it up for ASCollectionView too — which also makes use of ASCellNode — that would be great, and allow me to land the diff.
",appleguy,vitalybaev
745,2015-10-15 17:04:42,"@appleguy I'm sorry, but I'm not familiar with ASCollectionView. Quick look showing me, that we need to subclass UICollectionViewCell, but I don't want break smth.
",vitalybaev,appleguy
745,2015-10-15 17:30:47,"@appleguy check my code please. Now it works with UICollectionView, but I'm not sure if it's right way. Thanks
",vitalybaev,appleguy
745,2015-10-15 18:09:34,"@vitalybaev looks awesome, thank you!
",appleguy,vitalybaev
744,2015-10-19 01:55:46,"@vitalybaev thanks a lot for implementing this!
",appleguy,vitalybaev
742,2015-10-14 23:00:14,"@appleguy you are amazing!! Right now I'm just trying to get Kittens to run in my project
",robmontesinos,appleguy
742,2015-10-15 00:39:40,"@appleguy I'm having similar problem.  
I've use pod to install AsyncDisplayKit (1.2.3).  
While trying to mimic HorizontalWithinVerticalScrolling, I've encounter multipule files missing from pod library.  
Such as ASCollectionNode, ASStackLayoutSpec etc.
",iamchenchen,appleguy
742,2015-10-15 02:41:51,"@appleguy Thanks so much for your prompt attention to this matter.

I imported KittenNode.mm and BlurbNode.m into my project and was just trying to get them to work from my view controller. Those files are importing Layout files so I was going to use them to convert into my needs. If I have to comment them out I will but now it seems that the Pinterest entry you pointed me to does have the layout files included even though the console says version 1.2.2.

Since attempting to install ASDK with this out-dated pod spec, I've been getting cocoa pods related errors of library not found - libPods-TargetName.a - I don't know if its related but it would be a helluva coincidence. 

In any case, if the versions don't match up, ASDK 1.2.3 provides an incomplete download it would seem. Thanks so much for your help. Wrapping up for today and will try again tomorrow
",robmontesinos,appleguy
742,2015-10-15 02:44:14,"Aha, now I understand.  Yes, those files will definitely not work with 1.2.3.  They are of course pulled from the latest master branch, in how you’ve imported them.

Feel free to check out the 1.2.3 branch (you can download a zip here for convenience: https://github.com/facebook/AsyncDisplayKit/tags https://github.com/facebook/AsyncDisplayKit/tags) and you could pull those two files from that version, and they should build fine.

I just created a new tag, 1.9, if you want to try to point to that instead.  Most developers who want to use the latest ASDK features are pointing to a random specific commit on master and are using the new classes like ASLayoutSpec, but if you are not actively looking at the functionality that has been added since 1.2.3, this wouldn’t be necessary.

> On Oct 14, 2015, at 7:41 PM, Roberto Montesinos notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy Thanks so much for your prompt attention to this matter.
> 
> I imported KittenNode.mm and BlurbNode.m into my project and was just trying to get them to work from my view controller. Those files are importing Layout files so I was going to use them to convert into my needs. If I have to comment them out I will but now it seems that the Pinterest entry you pointed me to does have the layout files included even though the console says version 1.2.2.
> 
> Since attempting to install ASDK with this out-dated pod spec, I've been getting cocoa pods related errors of library not found - libPods-TargetName.a - I don't know if its related but it would be a helluva coincidence.
> 
> In any case, if the versions don't match up, ASDK 1.2.3 provides an incomplete download it would seem. Thanks so much for your help. Wrapping up for today and will try again tomorrow
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/742#issuecomment-148263516.
",appleguy,appleguy
742,2015-10-15 02:46:35,"Thank you @appleguy  - I will give that a try tomorrow and report - I really appreciate your help
",robmontesinos,appleguy
742,2015-10-19 02:06:47,"Thanks so much @appleguy. Turns out that somehow my project's cocoa pods configs got scrambled. I built a new project brought over all the files from the corrupted project and I am happy to say that ASTableView is running sweetly. It is taking some work to get off of auto layout and implement/understand calculateSizeThatFits: and layout but so far it has been worth it in terms of smoother scrolling. I am going to try to do fade in animation with POP since placeholderFadeDuration doesn't seem to be doing anything but that is a different issue. @appleguy  - YOU ROCK!!
",robmontesinos,appleguy
742,2015-10-19 02:17:52,"Thanks @appleguy - I'm using the pinterest commit you posted above and it is working beautifully.

 Could you post an example of the layouts you're talking about? I have a bunch of view controllers to convert to ASTableView and some code would be a great help.
",robmontesinos,appleguy
742,2015-10-19 03:46:59,"Thank you @appleguy !!
",robmontesinos,appleguy
742,2015-10-19 03:55:34,"@appleguy thx a lot!
",bimawa,appleguy
742,2015-10-20 03:15:03,"@bimawa I'd like to avoid sharing that link, because it has a few key problems that will be fixed in the upload that I post about.

Unfortunately I got sick not just once, but twice back-to-back in the past 2 weeks, and many of my plans have been disrupted.  The final video should go up in the next few days: most likely Wednesday, but at the latest this next weekend.

In more positive news, I met @levi in person on Sunday, which was really fun!  Thanks for your understanding about the delays.  If you can wait until the final version is up before sharing the link, it would be great having your help distributing the properly edited version to any friends you think may be interested in it.
",appleguy,bimawa
742,2015-10-20 03:59:25,"@appleguy 

> I'd like to avoid sharing that link, because it has a few key problems that will be fixed in the upload that I post about.

np my friend sry for that.

> Unfortunately I got sick not just once, but twice back-to-back in the past 2 weeks, and many of my plans have been disrupted. The final video should go up in the next few days: most likely Wednesday, but at the latest this next weekend.

omg its very sad news, I wish you health, and as soon as possible. We need you ^_^!

> If you can wait until the final version is up before sharing the link

Of course don't worry.
",bimawa,appleguy
742,2015-10-26 02:22:24,"@robmontesinos @iamchenchen @bimawa Here's the video, as promised—sorry for the big delay compared to what I expected on this!

https://www.facebook.com/groups/551597518288687/permalink/846140678834368/
",appleguy,bimawa
742,2015-10-26 02:29:39,"@appleguy We are all love you so much that it's not so scary
",bimawa,appleguy
739,2015-10-14 19:58:51,"@lappp9 thanks a lot for providing a test project!  This is a cool one — someday if you wanted to include it in our examples/ directory, it could be a great addition (don't worry, wouldn't do that without you).

The +1 does appear to be within the grey circle.  You mean it's not exactly centered?  Note that ""visual"" centering of text is pretty hard, because the actual bounding box (space required by the font to accommodate both ascenders and descenders of other characters) is not identical to the visual extent of the character.

I think there is a special property on ASTextNode that allows you to get the visual bounding box, but I'm not sure offhand and would have to look.  It would not be very hard to implement, as the figures are available from lower level CoreText calls.

Same question about the likes — what are they supposed to be aligned with?  It is likely the same kind of issue; text alignment doesn't always work in the way that you want, which is of course equally true with UILabel.  If you were able to get the alignment working perfectly with UIKit using -layoutSubviews or similar, you should also feel confident about not using ASLayoutSpecs for a design that requires careful positioning of text (usually text is not inside of an element that is so small as that circle that it needs to be pixel-centered; the text inside of buttons is often not exactly visually centered).  Instead you could use -calculateLayoutThatFits: or even -calculateSizeThatFits: + -layout, and either approach would allow you to avoid using explicit Static layout specs.

I don't have a chance to run the project until probably this weekend, but do recommend that you set a .backgroundColor on all the important elements involved here to see visually where the extent of their bounds is and therefore observe the rectangles being used by the layout system for positioning.
",appleguy,lappp9
739,2015-10-14 20:18:14,"@lappp9: I've just made a PR in your repo that fixes these layout problems. It's not perfect, but I think it's pretty close to your layout requirements:

![simulator screen shot 14 oct 2015 11 17 02 pm](https://cloud.githubusercontent.com/assets/587874/10496496/d05cf3ac-72c9-11e5-9e73-09b2498c6541.png)

The code aligns text nodes based on their bounds, so they may not be perfectly visually aligned (as discussed by @appleguy). And yes, do set background color on those nodes if you suspect anything wrong :) Let me know if you have any follow-up questions.
",nguyenhuy,appleguy
739,2015-10-14 20:18:14,"@lappp9: I've just made a PR in your repo that fixes these layout problems. It's not perfect, but I think it's pretty close to your layout requirements:

![simulator screen shot 14 oct 2015 11 17 02 pm](https://cloud.githubusercontent.com/assets/587874/10496496/d05cf3ac-72c9-11e5-9e73-09b2498c6541.png)

The code aligns text nodes based on their bounds, so they may not be perfectly visually aligned (as discussed by @appleguy). And yes, do set background color on those nodes if you suspect anything wrong :) Let me know if you have any follow-up questions.
",nguyenhuy,lappp9
739,2015-10-14 21:13:57,"Oh sorry, @appleguy, I should have clarified that the image is what I had so far using manual layout.  I should probably include a picture of what the sample project looked like before Huy got it.  Oh also, I'd be totally fine with including this in the examples directory!  Do you want me to just add it once I've got more of the layout stuff figured out?

Thanks @nguyenhuy!  I'm looking through the code now and it's definitely helping me understand this stuff better.  

One thing I noticed is that you're setting `placeHolderColor` on the profile circles but they don't seem to have any kind of placeholder or background color when the image is loading.  I tried just setting the background color but the image's corners aren't rounded anymore so it just shows a gray square in that case.
",lappp9,nguyenhuy
739,2015-10-14 21:13:57,"Oh sorry, @appleguy, I should have clarified that the image is what I had so far using manual layout.  I should probably include a picture of what the sample project looked like before Huy got it.  Oh also, I'd be totally fine with including this in the examples directory!  Do you want me to just add it once I've got more of the layout stuff figured out?

Thanks @nguyenhuy!  I'm looking through the code now and it's definitely helping me understand this stuff better.  

One thing I noticed is that you're setting `placeHolderColor` on the profile circles but they don't seem to have any kind of placeholder or background color when the image is loading.  I tried just setting the background color but the image's corners aren't rounded anymore so it just shows a gray square in that case.
",lappp9,appleguy
739,2015-10-19 05:16:09,"@lappp9 thanks for asking your questions here, and I look forward to answer any other issues you file :).
",appleguy,lappp9
738,2015-10-14 19:49:43,"@Adlai-Holler interesting.  Do you have a sense of when the system sets it to UserInteractive?  Perhaps an example case you found where it was doing so, and one where it wasn't?  This could have implications for other parts of the framework.
",appleguy,Adlai-Holler
737,2015-10-11 23:35:15,"@levi please do put them in the .gitignore and delete them — definitely a mistake caused by these files mysteriously being generated by local builds with Xcode 7, had never seen them before.
",appleguy,levi
735,2015-10-11 03:19:50,"@Adlai-Holler this is a great improvement, and I am going to land it now anyway, but would def. appreciate understanding the need for the other lines.  That's the most important thing, but secondarily if you can drop in some comments in a future diff it would be nice :)
",appleguy,Adlai-Holler
732,2015-10-09 18:51:24,"@bimawa @nguyenhuy has you covered!  Great advice, including the focus on driving this stuff with constrainedSize.  At the top level, do you have a table view, collection view, view controller?  Whatever is at the top should be where you apply the more traditional layout, e.g. setting the frame size to be as wide as the window.

Close out this task when your question is answered, but feel free to ask us more stuff either here or in a new task.
",appleguy,nguyenhuy
732,2015-10-09 18:51:24,"@bimawa @nguyenhuy has you covered!  Great advice, including the focus on driving this stuff with constrainedSize.  At the top level, do you have a table view, collection view, view controller?  Whatever is at the top should be where you apply the more traditional layout, e.g. setting the frame size to be as wide as the window.

Close out this task when your question is answered, but feel free to ask us more stuff either here or in a new task.
",appleguy,bimawa
732,2015-10-12 06:14:13,"@nguyenhuy Thx its:



what i need ! thx a lot!
",bimawa,nguyenhuy
731,2015-10-10 22:23:02,"@bimawa not a worry, thanks for posting anyway!  Would love to answer any questions you have in the future, so don't hesitate to make another issue.
",appleguy,bimawa
731,2015-10-12 04:18:46,"@appleguy love u for that work with community! And thx for ur presentation ADK about.
",bimawa,appleguy
731,2015-10-12 04:56:27,"@bimawa :-D glad you're trying it out!  Have you seen the NSSpain talk yet?  I am making a slightly improved edit of it to post in the next day or two, so if you haven't seen it yet, wait until I post.  It covers the 2.0 stuff and has pretty useful information if you are using LayoutSpecs.
",appleguy,bimawa
731,2015-10-12 05:09:14,"@appleguy No i see that: `NSLondon: Asynchronous UI by Scott Goodson - July 2014`. Cool i will be wait. Can u give link at NSSpain to me? 
",bimawa,appleguy
731,2015-10-13 04:23:35,"@appleguy i found NSSpan conference, but i not found ur speak. Where can i get it?
",bimawa,appleguy
731,2015-10-13 05:07:03,"@bimawa haven't forgotten!  I have unfortunately not been able to post the talk yet, and am waiting on some materials from NSSpain.  I hope to post it by the end of Wednesday pacific time, but if I miss that for any reason, it won't be until at least Saturday.  All of Tuesday, Thursday, and Friday I have meetings at work and need to catch up with the day's email at night.

Attached is an early form of documentation for ASLayoutSpec that one of the most experienced iOS engineers at Pinterest is working on (@rcancro).  I'll post and let you know ASAP if the video or other documentation becomes available.  The main place to watch is the Releases section here, or a post in Paper Engineering Community (Facebook) and the Google Group (AsyncDisplayKit).

[ASLayoutSpecs 10-12-15.pdf](https://github.com/facebook/AsyncDisplayKit/files/12187/ASLayoutSpecs.10-12-15.pdf)
",appleguy,bimawa
731,2015-10-13 05:10:45,"@appleguy forgive my impatience, a strong desire to explore it all ... thanks for the file, with it I 'll wait just a little bit :)
",bimawa,appleguy
731,2015-10-26 01:27:14,"@bimawa Here's the edited video. It's a bit hacked up, but definitely less jarring to watch than the original. Please feel free to share it around!

Looking forward to any questions you have posted in new Issues.  Thank you for your patience, and interest in the project :).  I'm always glad to have kind and interesting people participate in the community.

https://www.youtube.com/watch?v=RY_X7l1g79Q
",appleguy,bimawa
731,2015-10-26 02:29:06,"@appleguy Thx a lot!!! I love you :)
",bimawa,appleguy
729,2015-10-15 02:52:17,"@bimawa I haven't heard of Gitter before — is it a developer forum of some kind?  Always interested in looking at ways we can help the community support for a framework like this one.

Feel free to post an issue here any time.  There is indeed a Google Group called AsyncDisplayKit too.
",appleguy,bimawa
729,2015-10-15 02:59:09,"@appleguy Yes its similar like IRC or Slack but related with github project like our ADK. Its chat more than forum. But it ,rly, ugly and better than nothing as with IRC functionality :)
",bimawa,appleguy
729,2015-10-15 03:12:20,"That sounds really great!  Would Slack be as useful?  Since I use Slack for work, that would be easier for me to keep up with.

I definitely feel like some of these issues would be quicker to solve with realtime chat.

Sent from my iPhone

> On Oct 14, 2015, at 7:59 PM, Maxim Bunkov notifications@github.com wrote:
> 
> @appleguy Yes its similar IRC or Slack but with related with github project like our ADK. Its chat more than forum. But it ,rly, ugly and better nothing with IRC functionality :)
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,appleguy
727,2015-10-12 10:15:54,"@appleguy sorry for the delay. About the changes, they allowed me to be able to fix both the cell height's issue (when no delegate is assigned), enable `table:didSelectRowAtIndexPath:` and make the tests pass. I am unsure how/why setting `_asyncDataSource = nil;` before assigning it to a proper delegate makes it work, but the reality is that it does (I am suspecting there is a bug in UIKit). On my current project I am using [my own branch](https://github.com/RuiAAPeres/AsyncDisplayKit/commit/34b982ada2bb09a16a25da73054021fa79cc0a24), and things are working as expected. 

I do understand, that you need a more convincing proof, but this week, I don't have time to create a project that:
1. Is able to reproduce [this crash](https://github.com/facebook/AsyncDisplayKit/pull/724#issuecomment-146320395) without any of my changes and then with my changes prevent the crash.
2. With a nil delegate, cells will have the proper size defined (according to `calculateSizeThatFits`).
3. With a non-nil delegate,  `table:didSelectRowAtIndexPath:` will work.
4. The tests pass.
",RuiAAPeres,appleguy
725,2015-10-07 19:18:16,"@nguyenhuy thanks!  Please also address @garrettmoon's comment - we should take the property lock at the beginning of the method.  It's recursive, so it should be safe to do.
",appleguy,nguyenhuy
724,2015-10-07 21:00:13,"@appleguy I was thinking about if instead of reseting these to `nil`:



Maybe to:


",RuiAAPeres,appleguy
724,2015-10-07 23:37:04,"@appleguy tried [multiple combinations](https://github.com/RuiAAPeres/AsyncDisplayKit/pull/1) with that code, but the tests always fail. A quick search for `clearDelegateClearer` revealed some people having that specific crash in iOS8 simulator only, but I don't think it's worth the trouble.
",RuiAAPeres,appleguy
724,2015-10-07 23:56:56,"@appleguy apparently my last commit did it! ✨
",RuiAAPeres,appleguy
724,2015-10-23 16:24:56,"@appleguy, @RuiAAPeres any word on the status of this fix? Ran into some issues in my app internally that would benefit from having nil delegate supported.
",levi,appleguy
724,2015-10-23 17:06:14,"@levi from my tests, it works when you got an initial delegate nilled and then you set a new one. What I saw was when you do something: nil, delegate, nil. Things weren't working. 
",RuiAAPeres,levi
724,2015-10-27 06:09:42,"@levi just confirming, do those issues still exist in latest master?  File a task with details if you get a chance.
",appleguy,levi
724,2015-10-27 15:53:19,"I'm seeing some strange nil delegate crashes in my production app, but I'm too far removed right now to be able to draw a relationship to this ticket. I just want to clarify, the support for nil delegates was merged and then rolled back, and now we're pending a fix to merge it back in?

> On Oct 26, 2015, at 23:09, appleguy notifications@github.com wrote:
> 
> @levi just confirming, do those issues still exist in latest master? File a task with details if you get a chance.
> 
> —
> Reply to this email directly or view it on GitHub.
",levi,levi
724,2015-10-27 17:57:14,"@levi I'm nearly positive it was merged in again after changes.  @RuiAAPeres am I right?  Do you remember for sure?
",appleguy,levi
724,2015-10-27 17:57:40,"@levi as such, posting full data about the crashes would probably be useful when you come across them again.
",appleguy,levi
724,2015-10-27 20:14:26,"@appleguy from what I remember it was reverted. So I was using my fork. 
",RuiAAPeres,appleguy
723,2015-10-07 19:17:50,"@nguyenhuy Thanks so much for doing this!
",garrettmoon,nguyenhuy
720,2015-11-04 10:10:57,"@appleguy  hi sorry for late reply. i have created an sample project. . i have added/used same classes which i am using in my original project. 
sample project is commited on github:
link:  https://github.com/vikas4goyal/sample-project

please check if you found any mistake.
basically only AsyncCollectionCell and AsyncProductCell are using AsyncDisplayKit.
",vikas4goyal,appleguy
719,2015-10-07 05:27:34,"@rcancro cool, solid reasoning.
1. Could you please add some tests for the baseline support that remains?  Not urgent this week, but it is pretty important.  If you invest in building a test case for text, we could probably put in a bunch of checks pretty easily & extend its coverage / functionality over time.  Snapshot test would make a lot of sense.
2. It's actually not clear to me, seeing the lines deleted, how I would enable baseline alignment for a given stack; is there still a per-item property in ASStackLayoutable?
",appleguy,rcancro
718,2015-10-06 22:25:44,"@vitalybaev ah, so are you asking about animating the size of the cells?  I am very happy you provided images as it REALLY helps understand your use case.  However, I don't completely understand these because neither of them have an image placeholder state, and the first one also doesn't show the ""some text at the bottom"".  So I'm not sure what the desired behavior is, that you would like it to have, to get from the placeholder state to the final state.  Happy to help figure it out once I better understand the intended behavior!

Look at the examples/Kittens app for some examples of cell resizing and relayout.  When you tap on a cell, it does a relayout, which involves calling -invalidateCalculatedLayout and calling -reloadRowAtIndexPath:.

@nguyenhuy sorry to ask again, but could you remind me if there were any other method calls required here?  The ASTableView /SHOULD/ be able to detect that the cell has an invalidated layout, and requires a synchronous measure pass as part of the row reload, but does it do that right now?  Lastly, can you think of an API improvement we can make for this to be a one-line call?  Two ideas for that:
          - Method on ASCellNode, like ""reload"" (but different name), that triggers a full relayout /and/ messages the owning ASTableView or ASCollectionView to reload its index path.
          - Method on each ASTableView and ASCollectionView to ""relayoutAndAnimateHeightForIndexPath:"" or something.
",appleguy,vitalybaev
718,2015-10-07 09:21:50,"@appleguy thanks for answer! About preferedframesize - no, I'm on my way to try it.
However, I opened this issue because when I started using ASDK about 2 month ago this case worked ok for me.
",vitalybaev,appleguy
718,2015-10-07 09:30:16,"@appleguy More about my use case:

1) images not yet downloaded - using ASRatioLayoutSpec with 0.5 ratio - exactly ratio of images on first screenshot 
2) but when image downloaded it has to be full sized, so ratio is now 1. In ASNetworkImageNode's delegate I call an setNeedsLayout for cell
3) but until scrolling offscreen and back again - cell height will be old
",vitalybaev,appleguy
718,2015-10-07 09:44:25,"@vitalybaev That's probably because the table/collection view doesn't refresh itself until the cell is offscreen. You can easily fix that by triggering an empty transaction on the table view (`-beginUpdates` followed immediately by `-endUpdates`) or the collection view (`-performBatchUpdates:^(){} completion:nil]`). Let me know if this helps.
",nguyenhuy,vitalybaev
718,2015-10-07 09:49:38,"@appleguy Yes, I agree that we can improve the API to handle this case more gratefully and robustly. Your later idea seems to the better one, since the new method can be regarded as an edit operation. I will work on it really soon. It shouldn't be hard anyway.
",nguyenhuy,appleguy
718,2015-10-07 09:54:43,"@appleguy @nguyenhuy Thanks! Calling `-beginUpdates` and `-endUpdates` works fine now!
Thanks for great product!
",vitalybaev,nguyenhuy
718,2015-10-07 09:54:43,"@appleguy @nguyenhuy Thanks! Calling `-beginUpdates` and `-endUpdates` works fine now!
Thanks for great product!
",vitalybaev,appleguy
718,2015-10-07 10:17:26,"You are welcome, @vitalybaev. I will notify you once the new API is available.
",nguyenhuy,vitalybaev
718,2015-10-23 18:59:26,"Thank you @nguyenhuy - I understand how to determine the ratio based in image size after download. I don't understand how to apply the ASRatioLayoutSpec to an imageNode that is inside a complex stack arrangement. I see something called ASOverlayLayoutSpec - I don't see where it is implemented - I'll give it a whack - any advice would be appreciated as always. SAlud
",robmontesinos,nguyenhuy
718,2015-10-23 19:49:05,"@nguyenhuy You da Man!! Worked like a charm - just in case anyone wants to see an approach as a code sample:

This code is at the end of layoutSpecThatFits:(ASSizeRange) constrainedSize in an ASCellNode

Call Tree goes ASNetworkImageNodeDelegate (imageNode:(ASNetworkImageNode *)imageNode didLoadImage:(UIImage *)image) --> ASCellNode delegate tells ViewController download complete and passes indexPath which was set as part of init - (id)initWithIndexPath: --> tableView sends cellNode a setNeedsLayout message in between beginUpdates and endUpdates


",robmontesinos,nguyenhuy
718,2016-02-08 14:50:54,"Is this an open issue ? As @nguyenhuy's PR is merged this issue seems fixed to me, isn'it ?
",macistador,nguyenhuy
718,2016-04-27 08:38:07,"@bimawa: I'm a bit confused by the last line of your comment. Were you able to solve your issue?
",hannahmbanana,bimawa
718,2016-04-27 09:13:23,"@hannahmbanana  i think its not problem, but feature request.  If i have collection of networkImages and items, will be cool, if resize itself after image loaded ). 
",bimawa,hannahmbanana
718,2016-05-11 03:10:28,"@vitalybaev: Thanks for contributing to the ASDK community by being an early adopter of ASLayout and asking great questions about it! Perhaps you will be an early adopter of our new Layout Transition API? 

http://asyncdisplaykit.org/docs/implicit-hierarchy-mgmt.html
http://asyncdisplaykit.org/docs/layout-transition-api.html

@bimawa: I don't believe there is a feature request here. If you set the `.preferredFrameSize` of the image node, Does `-setNeedsLayout` not work? It should fully notify the table or collectionView that layout needs to be redone, including the size of the cell. Feel free to contact me or @hannah on ASDK's slack if you have any questions. 
",appleguy,vitalybaev
718,2016-05-11 03:10:28,"@vitalybaev: Thanks for contributing to the ASDK community by being an early adopter of ASLayout and asking great questions about it! Perhaps you will be an early adopter of our new Layout Transition API? 

http://asyncdisplaykit.org/docs/implicit-hierarchy-mgmt.html
http://asyncdisplaykit.org/docs/layout-transition-api.html

@bimawa: I don't believe there is a feature request here. If you set the `.preferredFrameSize` of the image node, Does `-setNeedsLayout` not work? It should fully notify the table or collectionView that layout needs to be redone, including the size of the cell. Feel free to contact me or @hannah on ASDK's slack if you have any questions. 
",appleguy,bimawa
716,2015-10-20 11:07:50,"@appleguy ping. Any update on the ASViewControllers? :dancers: 
",RuiAAPeres,appleguy
716,2015-11-10 17:28:14,"Hey @appleguy, would you recommend a different approach, while there is no ViewControllerNode?

My setup has changed a bit:

-> UIViewController
| 
-> UIPagedViewController
|
-> [UIViewController] // array of UIViewControllers as pages
|
-> ASTableView
|
 -> ASCellNode
 -> ASCellNode
 -> ASCellNode

When I am flickering between Pages, I can see that it stutters on old older devices. :disappointed:. From Time Profiler:

<img width=""713"" alt=""screen shot 2015-11-10 at 18 01 08"" src=""https://cloud.githubusercontent.com/assets/949286/11070756/0cd49856-87d5-11e5-9708-38b62e726acf.png"">
",RuiAAPeres,appleguy
715,2015-10-06 18:31:18,"@Adlai-Holler love this ASObjectIsEqual() thing, encouraging use of the pointer equality fast path at scale! hehe.  Thank you.
",appleguy,Adlai-Holler
714,2015-10-06 06:08:29,"@appleguy Thanks man. I filed Radar #22984886 about the deadlocking. 

I've modified the PR so that:
- Autorelease pool gets drained while holding fetch request lock, because `-[PHFetchResult dealloc]` contributes to the deadlocking
- Max 1 pending Photos.framework image request per node
- Image request operation doesn't keep node alive (oops)
- Image request operation gets cancelled in `clearContents`
- Max 10 concurrent image requests from ASDK
  - EDIT: High quality image requests, that is. Since fast format requests must be asynchronous, there may be more, but those are far less taxing so it doesn't present an issue in my testing.

This helped my production app handle ridiculous photos framework requirements pretty dern well.
",Adlai-Holler,appleguy
714,2015-10-06 22:28:46,"@Adlai-Holler really, really fantastic.  I am surfacing your radar to get some attention on it.  Who knows if it will be an iOS 9.x or 10.0, but eventually we should be able to install an OS check to enable more concurrency here.  This should still be pretty darn fast compared to most people's implementation.

Will review & merge soon, probably later tonight.  Are you fully integrated with -clearFetchedData, in addition to -clearContents?
",appleguy,Adlai-Holler
714,2015-10-06 23:42:09,"@appleguy You got it! I added the option for ASMultiplexDataSources to provide PHAssets if they're immediately available. This would be useful to me, because my application maintains an NSCache of existing assets. I also considered simply having a static NSCache but then we'd have to evict when photos library changes etc, which isn't our business.

In terms of -clearFetchedData, I wasn't sure. My rationale was, don't cancel the image request since we don't currently cancel the image download, but now that I type that out it's pretty weak sauce. Should I go ahead and cancel the image request there? Should I also cancel the image download as well?

Thanks so much for being responsive, I appreciate it a lot! :zap: 
",Adlai-Holler,appleguy
714,2015-10-07 02:23:33,"@Adlai-Holler - good find, it feels like a bug to me (given that the network range is relatively new to OSS) that the image request would not be cancelled in -clearFetchedData.  That's definitely one of the points of the method.  Of course, we should probably be canceling the request in -clearContents as well, which theoretically should be called before -clearFetchedData in most cases anyway, but when content enters the network range and then scrolls out by a reversal of direction it's still appropriate to cancel it.  Same for PH assets.

If you want to make that tweak I'm pretty sure this will be good to land when I have a chance to review.
",appleguy,Adlai-Holler
712,2015-10-06 03:59:24,"@appleguy that's nice to hear! I guess, other iOS guys at Hyper may be happy of that as well.
I think, a good docs could be extracted from these discussions afterwards.

So, my next step is to refactor layout in each of `nodes`.
If I start from the bottom one (violet) `actionBarNode`:
Where should I call `measureWithSizeRange` ?
If I call it in `layoutSpecThatFits` of parent node, the output of `constrainedSize` in method `layoutSpecThatFits` of child node has still minimum of `zeroSize`, the node collapses.

But when I specify `preferredFrameSize` inside the node itself, it does own layout more or less correctly.

Manual layout works correctly, so I've moving on with it:
https://github.com/richardoti/Wall/blob/asdk-2-layout/Source/Nodes/Defaults/ActionBarNode.swift
",richardtop,appleguy
712,2015-10-08 08:25:27,"@zdenektopic It's just the master, as ASDK 2.0 is not released yet (some part of API naming may change.
Described here: https://github.com/facebook/AsyncDisplayKit/issues/649#issuecomment-145416994
In that issue you can also find the way how to point dependency (for example, Wall) to a specific commit of ASDK.

I've found out that simplifying node structure gives even more performance than optimizing images. Right now after removing extra nodes the scrolling speed even with disabled rasterization is very fast. No stalls at all on 4S and some small frame drops on iPad 3.

Finalizing layout right now, and my question is about `ASStaticLayoutSpec`. What I am trying to achieve is adding a `1px` divider. 
![screen shot 2015-10-08 at 15 55 55](https://cloud.githubusercontent.com/assets/8013017/10368443/81bf4630-6dd5-11e5-95a0-80c1a5efad2f.png)

Given an instance of `ASDisplayNode`, how can I implement such a layout?

I've tried a number of ways, but in any case, no divider is visible on the screen. Here are some code examples:



I am going to check in detail how layout engine of ASDK works in order to understand how to implement the layout. As now Im more or less guided by your, @appleguy suggestions and docs.  Appreciate, how easy and convenient this layout system compared to AutoLayout. Great job!

And, the second question, is there possibility to equally divide common space and center elements there? I guess, it is also related to `ASStaticLayoutSpec`:
![screen shot 2015-10-08 at 16 04 09](https://cloud.githubusercontent.com/assets/8013017/10370487/649dcfcc-6ddf-11e5-8e53-e9de68810fea.png)
",richardtop,appleguy
712,2015-11-17 18:33:22,"@appleguy I've finished the layout and performance optimization, but still there are some stalls on iPad 3. I find the reason for stalls is high CPU usage, but not blocking the main thread (in that case CPU usage is usually low).

I haven't looked at ASDK architecture in deep, but it seems that the high amount of view initializations being performed during high-speed scrolling is the case for slowdown. 

This is the same layout implemented in UIKit with cell reuse and it seems to be stall-free:
https://github.com/RamonGilabert/Wall

I think that ASDK was simply not best fit for this kind of layout - the cells are exactly the same, without any layout difference. ASDK would fit views that have rich content layout that is different across the elements of collection, where cell-reuse pattern is difficult to implement.

Here are all performance improvements made by me:
https://github.com/hyperoslo/Wall/pull/94
and some of the ideas can be applied to both ASDK and UIKit performance optimizations.

But I still continue to follow the ASDK project as it is interesting and it will find place in my future iOS apps for sure :smile: 
",richardtop,appleguy
709,2015-10-12 15:08:27,"@appleguy hi, i dont think implementing Neon would be such a pain. I think I just did it. Look at PR: https://github.com/mamaral/Neon/pull/9

I did not use Neon or ASDK so much, but I think thats just it since Neon is manipulating frames.
",zdenektopic,appleguy
708,2015-10-05 18:53:57,"Awesome stuff, @Adlai-Holler!
",levi,Adlai-Holler
708,2015-10-05 19:46:05,"Very nice, thank you @Adlai-Holler!  Some of @levi's changes are a possible performance regression in this code, but hopefully we can clean that up in the time before it lands — and having this as a higher bar will inspire us to do so :).

I would suggest we not touch queue priorities for now.  The dispatch headers actually talk about the risk of priority inversion and in at least one place recommend not using priorities unless absolutely necessary.  The main thread already runs at a higher priority, so there is no real risk of dropping frames from this background thread work.  More importantly, if we run at lower priority, it's likely that arbitrary developers' own background tasks (compressing analytics data to send over the network, JSON parsing, etc) could be taking CPU time away from layout, which the user may well be waiting on (at the end of the scrollable area, awaiting for new cells to finish layout and be added).
",appleguy,levi
708,2015-10-05 19:46:05,"Very nice, thank you @Adlai-Holler!  Some of @levi's changes are a possible performance regression in this code, but hopefully we can clean that up in the time before it lands — and having this as a higher bar will inspire us to do so :).

I would suggest we not touch queue priorities for now.  The dispatch headers actually talk about the risk of priority inversion and in at least one place recommend not using priorities unless absolutely necessary.  The main thread already runs at a higher priority, so there is no real risk of dropping frames from this background thread work.  More importantly, if we run at lower priority, it's likely that arbitrary developers' own background tasks (compressing analytics data to send over the network, JSON parsing, etc) could be taking CPU time away from layout, which the user may well be waiting on (at the end of the scrollable area, awaiting for new cells to finish layout and be added).
",appleguy,Adlai-Holler
707,2015-10-09 19:31:56,"@Adlai-Holler yes, you should definitely not reuse nodes in the latter sense (between rows).  I think a trivial change is needed (which someone volunteered to do in a discussion recently, but I think was not completed) to support returning a previously-used node if you deleted it and then want to insert it again.  Namely, the layout code should check isNodeLoaded and perform measurement on the main thread for any of those nodes, dispatching the others to the background (still only notifying the UIKit class when contiguous batches of them are done).  Should be very straightforward if you're interested in making that change.
",appleguy,Adlai-Holler
707,2015-10-09 20:04:59,"@appleguy Good to know. I'd be glad to make the change but I've hit a deadlock. Since the main queue waits for the editing transaction queue to drain before each edit command, it's unsafe to dispatch synchronously onto main from the editing transaction queue, which is where _layoutNodes is required to be done. 
",Adlai-Holler,appleguy
707,2015-10-09 20:15:48,"@Adlai-Holler of course.  I think you'll need to iterate over the nodes before they are running in the background to first catch any that have been loaded previously, to do their measurement there.  Definitely agree there are subtleties involved, may even need some kind of property on cellNode like .needsMeasurement?  Keep in mind that @levi  has a big open PR in this area and we may want to wait for that to land, although your change would probably be the easier one to rebase onto his.
",appleguy,Adlai-Holler
704,2015-10-04 16:12:50,"@marmelroy thanks man!  Here I missed the file add once again.  This is most definitely a job for a machine :).

Sorry it took so much extra effort to get running with Carthage in a stable way.  I'm very relieved to have this fixed once and for all.
",appleguy,marmelroy
703,2015-10-04 20:49:00,"@appleguy in order to keep the internals simple, an `Assert` could be the best course of action. Although I will have a look later, on how the proxy is being done and how much changes would be needed to support a `nil` delegate.
",RuiAAPeres,appleguy
703,2015-10-06 19:24:02,"@appleguy sorry for the delay. I used carthage to build the lib from that commit and everything is cool!  :star:
",RuiAAPeres,appleguy
702,2015-10-03 23:56:12,"@petrpavlik thank you for reporting this!  Indeed, I've confirmed you are correct.  This is definitely not ideal behavior, although I can understand why it's happening and am wondering if there is a better fix than the most obvious one.

A workaround would be to use the method @nguyenhuy mentioned.  It should solve your problem and is a stable solution.  In fact, I'd argue that it is more readable code than using contentOffset manually anyway.

However, the reason you're seeing this is that UITableView has not performed its layout pass yet, which happens at the end of the runloop.  It's only there that the new contentSize will be set.  I would be interested if you could test this with a regular UITableView, but I believe right after you call -endUpdates (obviously it has no completionBlock) you will see the same thing!!

The fix would be to force layout (-layoutIfNeeded) on the table view.  We could also implement a test to check that the contentSize is updated in time.  The downside is that this could very well trigger unnecessary layouts and have a performance cost associated.
",appleguy,nguyenhuy
702,2015-10-07 21:43:53,"Thanks, @nguyenhuy's solution seems to work just fine.
",petrpavlik,nguyenhuy
699,2015-10-03 23:34:44,"@rcancro, @nguyenhuy eager to merge this — but could you take a half hour or so to devise a test that fails before the fix, and passes after?  Maybe a snapshot test that evaluates against the colored rectangle images?
",appleguy,nguyenhuy
699,2015-10-03 23:34:44,"@rcancro, @nguyenhuy eager to merge this — but could you take a half hour or so to devise a test that fails before the fix, and passes after?  Maybe a snapshot test that evaluates against the colored rectangle images?
",appleguy,rcancro
699,2015-10-04 20:24:14,"Thanks a lot, @nguyenhuy!  I'll merge this now, and feel free to put a test into any future commit.  As long as you're tracking it, it isn't an urgent need, just didn't want it to be forgotten.
",appleguy,nguyenhuy
698,2015-12-13 21:36:59,"@appleguy @Adlai-Holler  I was about to open a new issue for this but I found this while searching so I decided to drop my own take on this here.  

So here is the problem as I see it with this behavior: because ADK treats moves as delete->insert that means that there is no way to tell in the context of a custom UICollectionViewLayout that this is a move.  When I perform a move op `prepareForCollectionViewUpdates:` is called on my UICollectionViewLayout with an update array with a pair of updates with the action set to .Delete and .Insert.  That means that all context is lost.  So lets say I wanted to do something like this:



Unfortunately because insert/delete is being used this will trigger the wrong animation.  As a general rule it doesn't much matter how ADK operates internally as long as it doesn't leak implementation details through to the UITableView/UICollectionView but I think this would definitely qualify as one of those cases.
",smyrgl,appleguy
698,2015-12-13 21:36:59,"@appleguy @Adlai-Holler  I was about to open a new issue for this but I found this while searching so I decided to drop my own take on this here.  

So here is the problem as I see it with this behavior: because ADK treats moves as delete->insert that means that there is no way to tell in the context of a custom UICollectionViewLayout that this is a move.  When I perform a move op `prepareForCollectionViewUpdates:` is called on my UICollectionViewLayout with an update array with a pair of updates with the action set to .Delete and .Insert.  That means that all context is lost.  So lets say I wanted to do something like this:



Unfortunately because insert/delete is being used this will trigger the wrong animation.  As a general rule it doesn't much matter how ADK operates internally as long as it doesn't leak implementation details through to the UITableView/UICollectionView but I think this would definitely qualify as one of those cases.
",smyrgl,Adlai-Holler
698,2017-01-03 19:20:18,"As @garrettmoon mentioned, might be better to keep duplicate issues together. So I'll repost my previous issue here: #2845 

We've been rebuilding parts of our app as a feasibility test for using ASDK. So far ASDK has been awesome and we've resolved most of the issues except for one thing. The `moveItem:` animation for ASCollectionNode.

For our app, the `moveItem:` animation is actually quite critical to help inform our users to changes. A simple fade-out-fade-in animation provides a lot less visual cue to the eyes.

@Adlai-Holler: I have a colleague who's much more comfortable with Objc than I am. If you will not be able to get to this issue anytime soon, mind if my colleague contact you and see if he can help get this issue moving?

Thanks very much in advance!",leotumwattana,Adlai-Holler
698,2017-01-03 23:14:50,"Hey @leotumwattana, yes please do point your colleague to me and we can talk about what will need to happen to support moves natively!",Adlai-Holler,leotumwattana
698,2017-01-04 01:30:13,"@Adlai-Holler Thanks for reply. I am sending you a message on Slack, as well as checking the PR before.",harryworld,Adlai-Holler
698,2017-01-05 04:34:03,Hi @Adlai-Holler. @harryworld is the colleague I mentioned. Is it possible for us to setup a private or public channel on Slack to discuss regarding support for native moves? Thanks.,leotumwattana,Adlai-Holler
696,2015-10-05 03:31:41,"@nguyenhuy : thanks aHuy a lot. I'm trying this solution.
",tuantavan,nguyenhuy
696,2015-10-07 12:12:34,"Hi @appleguy , @nguyenhuy ,
   Sorry for late response to you. I applied the source code of master  branch. It's more stable than version 1.2.3. However, on iOS 9 (iOS9.0.1 & 9.0.2) it is still crashed. on iOS8 it is more stable than iOS9. 
Please take a look on crash log : https://docs.google.com/document/d/1KsJbhIK8KttaB2rqsmaaB65aRH6pRAQGP4Gh3QDnXx8/edit?usp=sharing
- Video of reproduce it : https://youtu.be/PqH72FaydS4

In this video, it was crashed at 0:23"" (iPhone 6, iOS 9.0.2). At this time, when I clicked on BACK button, I just deleted all Items of ASCollectionView (deleteItemsAtIndexPaths).

Thanks so much for your helping!
",tuantavan,nguyenhuy
696,2015-10-07 12:12:34,"Hi @appleguy , @nguyenhuy ,
   Sorry for late response to you. I applied the source code of master  branch. It's more stable than version 1.2.3. However, on iOS 9 (iOS9.0.1 & 9.0.2) it is still crashed. on iOS8 it is more stable than iOS9. 
Please take a look on crash log : https://docs.google.com/document/d/1KsJbhIK8KttaB2rqsmaaB65aRH6pRAQGP4Gh3QDnXx8/edit?usp=sharing
- Video of reproduce it : https://youtu.be/PqH72FaydS4

In this video, it was crashed at 0:23"" (iPhone 6, iOS 9.0.2). At this time, when I clicked on BACK button, I just deleted all Items of ASCollectionView (deleteItemsAtIndexPaths).

Thanks so much for your helping!
",tuantavan,appleguy
696,2015-10-08 09:17:15,"hi a @nguyenhuy,
    Thanks for your GREAT questions, I re-checked my source code. In the old version, when I used [collection reloadData], there had some issues. That was the reason why I deleted items by indexPaths.

Now, As your suggestion, I use [collection reloadData] instead of deleting items by indexPaths. I works well now ( It hasn't had crash until now - I'm still testing now). 

hi @appleguy, as @nguyenhuy 's suggestions (questions), I change my code & it works well now (master branch).

@nguyenhuy , @appleguy  : Thanks a lot again!

I close this ticket now.
",tuantavan,nguyenhuy
696,2015-10-08 09:17:15,"hi a @nguyenhuy,
    Thanks for your GREAT questions, I re-checked my source code. In the old version, when I used [collection reloadData], there had some issues. That was the reason why I deleted items by indexPaths.

Now, As your suggestion, I use [collection reloadData] instead of deleting items by indexPaths. I works well now ( It hasn't had crash until now - I'm still testing now). 

hi @appleguy, as @nguyenhuy 's suggestions (questions), I change my code & it works well now (master branch).

@nguyenhuy , @appleguy  : Thanks a lot again!

I close this ticket now.
",tuantavan,appleguy
696,2015-10-09 12:21:39,"Hi a @nguyenhuy ,
     I'd like to show my snippet old source code that it crashed many times. (sorry, I don't have permission to share full source code).

Here is flow that app was crashed.
1. User goes to chat screen to chat with his/her friend XXX (sure, he saw history messages).
   - MessageViewController.m --> viewDidAppear --> bindData --> setMessages (MessageDataSource.m ) : 
2. User goes back
   - MessageViewController.m --> goBack --> deleteAllMessages(MessageDataSource.m )
3.  User goes to chat with another friend YYY.
   - MessageViewController.m --> viewDidAppear --> bindData --> setMessages (MessageDataSource.m ) : 

==> If user goes with fast speed ( as my video demo), It seems that while the datasource is generating/deleting items, another request to generate/delete items come up..... So it is out of bounds of Array (messages).

Hope the snippet source code is clear for you.
Thanks so much for your helping!

# Source code : 
1. MessageViewController.m
- (void)bindData {
  NSLog(@""MessageVC bindData _reloadMessages : %d"", _reloadMessages);
  if (_reloadMessages) {
      _reloadMessages = NO;
      NSString *partnerInfo = [NSString stringWithFormat:@""%@, %ld"",
                                                     self.match.partner.fullname,
                                                     (long) [self.match.partner.dob ageFromDOB]];
      [self setNavigationTitle:partnerInfo];
  
  
  
  }
  }
- (void)goBack {
  [self resetInputText];
  
  _typingParams.value = @(NO);
  _typingParams.match = self.match;
  [self.matchService updateStatus:_typingParams
                    completeBlock:^(SPHMatch *match, NSError *error) {
  }];
  
  [self lockDataSource];
  [_dataSource deleteAllMessages:_collectionView completion:^{
      [self unlockDataSource];
      _match = nil;
      [self.navigationController popViewControllerAnimated:YES];
  }];
  }

# 
1. MessageDataSource.m
- (void)deleteAllMessages:(__weak ASCollectionView *)collectionView
             completion:(void (^)())completeBlock  {
  DDLogDebug(@""deleteAllMessages begining... : "");
  SPHAsyncOperation *operation = [[SPHAsyncOperation alloc] initWithBlock:
                                  ^(AsyncOperationCompletionBlock asyncCompletionBlock) {
  
  
  
  }];
  
  [_serialOperationQueue addOperation:operation];
  }
- (void)setMessages:(NSArray *)messages to:(__weak ASCollectionView *)collectionView
       completion:(void (^)())completeBlock {
  SPHAsyncOperation *operation = [[SPHAsyncOperation alloc]
                            initWithBlock:^(AsyncOperationCompletionBlock asyncCompletionBlock) {
      NSInteger start = [collectionView numberOfSections] > 0 ?
                                [collectionView numberOfItemsInSection:0] : 0;
      NSInteger numberOfMessages = messages.count;
      NSMutableArray *deleteIndexPaths = [NSMutableArray array];
      if (start > numberOfMessages) {
          for (NSInteger i = messages.count; i < start; i++) {
              [deleteIndexPaths addObject:[NSIndexPath indexPathForItem:i inSection:0]];
          }
      }
      NSMutableArray *reloadIndexPaths = [NSMutableArray array];
      NSInteger reloadMessages = start > numberOfMessages ? numberOfMessages : start;
      if (reloadMessages < _listOfMessages.count) {
          for (int i = 0; i < reloadMessages; i++) {
              SPHMessage *oldMessage = _listOfMessages[i];
              if (i < messages.count) {
                  SPHMessage *newMessage = messages[i];
                  if ([oldMessage.id isEqualToString:newMessage.id]) continue;
              }
              [reloadIndexPaths addObject:[NSIndexPath indexPathForItem:i inSection:0]];
          }
      }
      [_listOfMessages setArray:messages];
      NSMutableArray *insertIndexPaths = [NSMutableArray array];
      for (NSInteger i = start; i < numberOfMessages; i++) {
          [insertIndexPaths addObject:[NSIndexPath indexPathForItem:i inSection:0]];
      }
      [collectionView performBatchAnimated:NO updates:^{
          if (deleteIndexPaths.count > 0) {
              [collectionView deleteItemsAtIndexPaths:deleteIndexPaths];
          }
          if (reloadIndexPaths.count > 0) {
              [collectionView reloadItemsAtIndexPaths:reloadIndexPaths];
          }
          if (insertIndexPaths.count > 0) {
              [collectionView insertItemsAtIndexPaths:insertIndexPaths];
          }
      } completion:^(BOOL finished) {
          if (completeBlock) completeBlock();
          if (asyncCompletionBlock) asyncCompletionBlock();
      }];
  }];
  [_serialOperationQueue addOperation:operation];
  }
",tuantavan,nguyenhuy
695,2015-10-02 03:25:29,"@appleguy the master branch didn't work out for me, though the PR on #693 which is not merged yet has the fix and works for me.
",1nput0utput,appleguy
695,2015-10-28 02:32:19,"@Adlai-Holler I am currently testing the master branch. I have not come across any issues regarding indices order with NSFetchedResultController. Looks all good!
",1nput0utput,Adlai-Holler
694,2015-09-30 01:49:52,"Fantastic, thanks @levi!  I'll review as soon as I can, likely this weekend.  I'm pretty sure others will have feedback sooner.

This direction only supports Flow Layouts, correct?  Any comments to share with the community here on findings re: the difficulty / infeasibility of supporting other types of layouts?  There is some talk at Pinterest of creating a ""floating header"" system that will work with all layouts, and not attempt to integrate with UICollectionViewLayout directly, instead providing more limited / specific functionality to handle the most common use of supplementary views (floating section headers).  This is not a top priority for us right now though, unclear if it would be attempted before the end of the year.
",appleguy,levi
694,2015-10-01 00:10:02,"@levi This PR is awesome! Hoping to use `AAPLCollectionViewLayout` as well as flow layout with it. @appleguy The Pinterest folks might want to look at that layout, which is contained in some [awesome sample code](https://developer.apple.com/sample-code/wwdc/2015/downloads/Advanced-Collection-View.zip) since it supports pinned headers pretty much natively although there are a couple minor bugs in it.
",Adlai-Holler,levi
694,2015-10-01 00:10:02,"@levi This PR is awesome! Hoping to use `AAPLCollectionViewLayout` as well as flow layout with it. @appleguy The Pinterest folks might want to look at that layout, which is contained in some [awesome sample code](https://developer.apple.com/sample-code/wwdc/2015/downloads/Advanced-Collection-View.zip) since it supports pinned headers pretty much natively although there are a couple minor bugs in it.
",Adlai-Holler,appleguy
694,2015-10-01 01:16:43,"@levi that sounds like a pretty awesome architectural approach!  Thanks for the details.  Can't wait to take a look.
",appleguy,levi
694,2015-10-05 02:57:59,"@levi thanks for the continued work on this — really phenomenal!  My detailed review is coming later tonight.

Could you update the Carthage project for any new files you added?  It looks like the recently added test (a fourth build type on Travis) has started failing.
",appleguy,levi
694,2015-10-05 22:44:23,"@levi regarding your earlier post on the architectural consideration — I did a double-take at the new mutable dictionaries, but I think that and the other details of the architecture you spelled out are solid and a reasonable direction for us to take this.  Specifically because the nodes are still stored in inner arrays, not in the dictionary directly, I think the performance cost will be acceptable (storing the nodes directly would have a very measurable impact).

Can you write up some details on what you think would be necessary to enable supplementary nodes without a flow layout?  I say that having not finished reviewing the diff, but I think it is an important question — as we add complexity to these classes, I think it really proves its value if we can get this feature more broadly exposed, while also achieving the secondary goals of supporting further ASDataController customizations.  Even if the non-flow-layout support depended on new delegate methods (or methods that need to be called at certain times by external code), like some kind of invalidation signal, that's probably fine.
",appleguy,levi
694,2015-10-06 21:09:22,"I'm pretty close to moving this out of WIP. I want to clean up a few things and write some unit tests. No. 4 in the list is a change that I think could be done in a separate diff, since we don't support any sort of layout invalidation handling in `ASCollectionView` currently it might be best to simply support the `reloadData` and `layoutSubviews` callbacks as of now and extend it out after we land this.

@appleguy (re: your message yesterday) I'll find some time tonight to write out a better description of the architecture. To validate the extensibility of this implementation I think we should integrate a custom layout in an example and show how it can be done. Do you have one in mind that would be pretty straight forward?
",levi,appleguy
694,2015-10-09 20:14:01,"@levi awesome body of work here.  I've done as complete a review as I can—realistically with this large of diff, both unit / integration testing and real-world app testing are going to be the only way to completely verify correctness here.

I suggest we land this sooner rather than later in order to be able to iterate on additional improvements with smaller diffs.  Additionally, there are other key changes needed in this code (both the ordering of execution of batch transactions and layout tweaks to ensure reused nodes are not asynchronously measured), so we need to clear the conflict risk soon.  What do you think we should target?
",appleguy,levi
694,2015-10-13 02:52:10,"@appleguy: Still looking into why these tests aren't passing in travis. But in the meantime, I've discovered a strange issue while running ASViewController/Sample (1 out of 10 runs). Seems like it's accessing `completedNodes` via `ASDataController#nodesAtIndexPaths:` and failing to insert into the `deletedElements` collection. I've posted a screenshot below. @nguyenhuy has done some work on switching between a completedNodes copy to provide safe accessing at all time. I was wondering if this was related? I've not touched the range controller much in this patch and curious why it's coming up now.

<img width=""1440"" alt=""asmultidimensionalarrayutils_mm"" src=""https://cloud.githubusercontent.com/assets/8493/10444362/72230f0c-711a-11e5-97ae-6618163f05e5.png"">
",levi,appleguy
694,2015-10-13 04:46:35,"@levi looking great!  Thanks for updating your initial post with the new items included and detailed overview.  I think this is on the right track and should land as soon as your current investigation completes (and any other small items you feel are necessary).

As discussed, I'll roll 1.9 without this, although based on my current schedule we will probably end up landing this before I can post the release.  I'll just point at an earlier commit, so it is no trouble to do so.
",appleguy,levi
694,2015-10-14 21:18:03,"@nguyenhuy was able to provide a fix for this crash last night. Turns out the range controller was using `layoutAttributesForElementsInRect:` which returns all types of collection view items (cells, supplementary views, and decoration views). Check out [`23134c4`](https://github.com/levi/AsyncDisplayKit/commit/23134c46d0dc4349e3b1bb0672992cd7820bf9bb) for the fix, which simply filters out non-cell items when building the visible nodes list in the range controller. Were you experiencing this crash with that commit included? I haven't been able to reproduce it since.
",levi,nguyenhuy
694,2015-10-15 01:12:12,"@levi This feature is tremendous! I'm gonna start using it as soon as it lands. Thanks so much. :100: 
",Adlai-Holler,levi
694,2015-10-19 03:23:29,"I'm hitting the button.  There are a number of followups to do here, but they are best handled in a different PR.

Congratulations, and sincere thanks @levi for taking great care to craft one of the largest contributions in ASDK's history.
",appleguy,levi
694,2015-10-19 03:25:28,"Absolutely awesome! @levi ! @levi ! @levi !
",Adlai-Holler,levi
694,2015-10-19 16:07:25,"Glad to see this get in. Will respond to your feedback, @appleguy this week in a separate diff.
",levi,appleguy
693,2015-09-29 20:23:00,"Great progress, @Adlai-Holler. Thanks a ton.

A quick look at the diff gives me the impression that there are just too many changes in ASDataController. That class is very... hot, mainly because it heavily deals with concurrency. Is there any way we can minimize the changes there? 

Not sure if this is a good idea. What I'm having in mind is that ASDataController ~~doesn't~~ shouldn't know about change set at all. Instead, there is a new subclass of ASDataController that intercepts edit calls during a transaction and put them to a change set. Then in endUpdates (of the subclass), it loops through the sorted change set and forward each edit call to its super class-- i.e ASDataController. That way, the new class encapsulates the knowledge about change set and ASDataController remains relatively untouched. What do you think?
",nguyenhuy,Adlai-Holler
693,2015-10-01 02:08:30,"This is really awesome, thanks so much @Adlai-Holler for your large-scale contributions!  I will review in detail this weekend.

Let me start by saying that I'm not afraid of a change that hugely changes ASDataController — obviously it would need to be rigorously tested, but let's face it, the class needs some upgrades.  The critical piece: we must get the architecture RIGHT.  It isn't worth the testing pain of a really big change if we can spot any difficult limitations of its structure that wouldn't be resolvable with later improvements moving in the same direction.

That said, it does seem likely that we could solve this problem with a more surgical change.  I'd buy it that this direction may be BETTER despite the higher initial risk, if we believe it results in code that is easier to debug, read, maintain, extend, or more performant — or any combination of a few of those.

@Adlai-Holler, what's your general philosophy on this?  @levi, @eanagel - interested to hear your thoughts.  Don't worry guys, I won't merge something like this without personally helping to test it heavily with stressful use cases in Pinterest and upgraded thrash testers, and I will also not merge something that breaks any client's app — so let's critique and brainstorm what the ideal architectural approach is before worrying about the risk of any given change.
",appleguy,Adlai-Holler
693,2015-10-02 21:47:10,"@nguyenhuy I really dig your idea! It's a very natural way to implement this buffering/sorting.

@appleguy You pretty much said what I'd say, that size of change is less important than suitability of the architecture and that something as fiddly as this demands an insane amount of tests. 

As I look back on it, this PR is compromised – it goes too far for a newcomer to just drop in, but not far enough to justify it. I'll close it and create a new PR that has a better benefit:fear ratio. Sometime in the future we'll update the architecture together and I can discharge my obsession with this problem at that time. Cheers guys!
",Adlai-Holler,nguyenhuy
693,2015-10-02 21:47:10,"@nguyenhuy I really dig your idea! It's a very natural way to implement this buffering/sorting.

@appleguy You pretty much said what I'd say, that size of change is less important than suitability of the architecture and that something as fiddly as this demands an insane amount of tests. 

As I look back on it, this PR is compromised – it goes too far for a newcomer to just drop in, but not far enough to justify it. I'll close it and create a new PR that has a better benefit:fear ratio. Sometime in the future we'll update the architecture together and I can discharge my obsession with this problem at that time. Cheers guys!
",Adlai-Holler,appleguy
691,2015-11-11 04:24:37,"@levi has any aspect of this been implemented?  Is this entirely to allow repositioning elements by driving the UICollectionVIewLayout, or are there other benefits?
",appleguy,levi
690,2015-09-28 20:28:21,"Thanks for including the gif BTW.  However, it's hard to tell what is going on because there is no content in the cells.  Can you add some subviews to the cells, to help show what is happening?

Also, as with normal UICollectionView / UITableView, the right way to animate their size changing is to call -invalidateCalculatedLayout on the cell (which you can get from nodeForItemAtIndexPath:), and then call reloadRowAtIndexPath: / reloadItemAtIndexPath:.  Check the Kittens app sample (examples/Kittens), but I'm pretty sure it does this (right @nguyenhuy ?).

By doing that, you should be able to have the new values in -calculateSizeThatFits: and it should be taken into account even without calling -setNeedsLayout in your toggle method.  Basically calling toggle could set an instance variable like _height, that is used by the -calculateSizeThatFits method, and also call -invalidateCalculatedLayout.  Then your code that is calling -toggleSize (from the UICollectionView didSelect method) could just call the reloadItem: method.

UICollectionView / UITableView have never been very good about handling resizing items / rows, and sadly AsyncDisplayKit doesn't make it any easier, but it should work (and with very few lines of code) if approached the right way.  The only difference from UIKit is that the size is normally specified from within the node and you need to call -invalidateCalculatedLayout.  The other aspects, including the need to call -reloadItem/Row and to return the new size when UIKit asks for it as a result of calling that method, are the same.
",appleguy,nguyenhuy
690,2015-09-29 14:37:50,"@appleguy Well, actually the Kitten app uses -setNeedsLayout and an empty transaction to achieve size changing. Your way works as well, but it's a bit more complicated because to ASDataController, ""reload"" means destroy the old node and load a new one. So you need to keep track of the selected index path(s) and, in -nodeForRowAtIndexPath, toggle the new node's state. [Here](https://github.com/nguyenhuy/AsyncDisplayKit/commit/2a81ea6fe805f52ac6dbc0cc8b047b3bd4b79516) is a working implementation of this approach. I think this approach is a bit faster if you want to change many cells at the same time, since ASDataController reloads them asynchronously.

@hashemp206 I can't really see which view flickers in your GIF (I haven't seen any smooth GIF animation actually :P).
- If you use -setNeedsLayout, I think you have everything (like the node's view/layer, its old and new sizes, etc) to make a very smooth size transition with Core Animation. For example, [here](https://github.com/nguyenhuy/AsyncDisplayKit/commit/4aa921ecec9e668df9b4b501b1c6b589f2486c72), I use fade in and fade out animations to slowly hide the old size and show the new one. [The result looks quite good](https://www.dropbox.com/s/0elnpyuq1663evo/ASDK-AnimatedKittenNode.mov?dl=0). You can of course animate however you want using the same principle.
- If you use Scott's approach, you can rely on ~~UITableViewCellAnimation~~ UITableViewRowAnimation, like [this](https://github.com/nguyenhuy/AsyncDisplayKit/commit/2a81ea6fe805f52ac6dbc0cc8b047b3bd4b79516#diff-aa81a054912280c7666bbf98546f208eR128). 
",nguyenhuy,appleguy
688,2015-09-27 20:35:06,"Thanks @nguyenhuy !!  Just FYI, I believe the build server is working; we can't use Xcode 7 on Travis, but the tests should still be running with 6.4.
",appleguy,nguyenhuy
688,2015-09-27 21:22:59,"@appleguy Pushed a new commit that removes externalCompletedNodes getter. Let me know what you think about the cast [here](https://github.com/facebook/AsyncDisplayKit/pull/688/files#diff-c03b807fdd44839fd88691746d9dcc27R665). Also, do you think I should remove main thread asserts in methods that call completedNodes getter and assume the assert is done in that getter? Does the runtime overhead justifies the assumption?
",nguyenhuy,appleguy
688,2015-09-27 23:51:47,"@nguyenhuy So the order of edits still matters here?  You still expect this diff to cause a crash when the edits are not specifically ordered?

When I tested this diff in my app I still got crashes, this log snippet should give you an idea of what is going on.  I purposefully disabled any kind of sorting of the updates (as you can probably see) and just applied them in the natural order they were returned from the FRC.



EDIT: Oh and the crash occurred at line 93 of ASMultidimensionalArrayUtils.  If you want more info or want me to try some other stuff just let me know.
",smyrgl,nguyenhuy
688,2015-09-28 05:37:42,"OK, this is a lot better, thanks @nguyenhuy!  In it goes :).  Later I may rename the new instance variable, although I haven't thought of a better name yet.  It seems like it should reflect the fact that it is temporary / transient while committing a transaction of batch edits.  It is not very important at all because it is entirely internal to the implementation.

I'm not sure who is going to attempt a fix to the ordering issue, but we should likely introduce that ""transaction"" concept for the batches.
",appleguy,nguyenhuy
688,2015-09-28 07:01:17,"Thanks, @appleguy. I'm not very proud of the name either, but it was the best I could come up with (other alternatives were backingStoreNodes and delegateStateNodes). So feel free to change it. May ""shadowWhileBatchingNodes"" sound better? Man, I ~~really suck~~ am really bad at naming things.

@Adlai-Holler said he can take the ordering issue.
",nguyenhuy,appleguy
688,2015-09-28 20:31:49,"@nguyenhuy I would be glad to slice off a sample project with one of my core view controllers (can't post the whole project itself for obvious reasons) but it should be plenty for you to test with.  I will try to get this done tonight and I'll post a link in here.
",smyrgl,nguyenhuy
688,2015-09-29 18:50:51,"@nguyenhuy Just catching up after being off for a couple days. This looks like an elegant solution to this tricky issue. I agree that moving all batched updates into a single run loop is the best answer but it represents a significant refactor that is intimidating to say the least. Thanks so much for figuring this out!
",eanagel,nguyenhuy
688,2015-09-29 19:56:40,"@eanagel my pleasure. Please test it and report any problems found :)
",nguyenhuy,eanagel
687,2015-09-26 05:39:49,"Cool new area, @Adlai-Holler!  There are a number of image handling conveniences I would love to see added to ASDK, and improved Photos.framework integration is definitely a good area.

This is very close to mergable.  In fact, if we could make ASPhotosImageRequest something that most ASDK users would not need to know about (by parsing URLs directly handed to Multiplex), then we shouldn't even worry about the name at this point.

For a more visible API, the ASPhotos prefix sounds possibly ambiguous to me.  I jumped into reading the patch before finishing your intro, and didn't immediately notice that the class was Photos.framework specific, as opposed to a general image downloader.  What do you think about calling it ASPhotosAssetRequest, or ASPhotosFrameworkImageRequest?  If you feel the current name is better, keep it — just some ideas.

For the other classes you mentioned, let's definitely talk!  There are some other folks at Pinterest who would like to discuss image loading and caching, as we are working in similar areas and may be able to share a solution.  You may have seen PINRemoteImage and PINCache on GitHub.  We are hoping to integrate at least the former with ASDK, eventually with Progressive Scan JPEG support.  @garrettmoon @rcancro 
",appleguy,Adlai-Holler
687,2015-09-27 18:54:25,"@Adlai-Holler - I am intensely interested in making ASRangeController, and possibly ASDataController, more public-facing.  The Paper app used ""working ranges"" in at least 5 or 6 major areas — the section scroller, the story scroller, vertically within a story for attachments and text, in the back-stack...it is probably the most successful ""new"" UI programming pattern I have seen on the platform in the past couple years.

There are several things standing in the way, though.  1st, a Visible Range is essential for most third party usages.  I want to provide ""visible"" notifications for ASCellNodes in Table / Collection too.

Second, ASDataController is pretty rough, particularly with the batch handling stuff you ran into recently.  I had to change focus before I was able to start testing batches, so I'm embarrassed about its problems there, but they are among the most important in the project right now & fortunately have increasing interest from a couple folks.

Third, I want to make sure we are careful in considering what makes sense for a supportive, powerful third-party API vs something catered to work with UIKit classes.  It may well be the case that there should be a superclass that is public, with UITableView and UICollectionView-specific subclasses that aren't intended to be used directly by third parties.

Thanks for the update on this diff, will check it out!
",appleguy,Adlai-Holler
687,2015-10-01 02:21:30,"@Adlai-Holler great idea, I didn't think of that!  Just make the category nice & visible (probably put it in ASMultiplexImageNode.h, and really explicitly call it out in the comment for the data source method).

I would also just leave out the as_ prefix.  We have used asyncdisplaykit_ for areas where collision is plausible, but that's long for an already-long method name, and I would say there is not a reasonable probability that this full method signature could collide.

Ready to merge as soon as you integrate these changes — thanks for taking the time to discuss, iterate, and get this one really right.
",appleguy,Adlai-Holler
687,2015-10-02 19:58:58,"@appleguy Cool! Glad we dialed it in. I left the ASPhotosFrameworkImageRequest class public in the Details group, but removed reference to it in ASMultiplexImageNode. It's a pretty harmless class and I think users who find it by digging into the Details group will understand that they can use it if they want but we're not supporting it for undocumented use. If that seems too ad-hoc for you I'd be cool walling it off.

I think the code's ready for final review. The last remaining question is the annoying one… Photos framework. I think our two choices are
- Strongly link the Photos framework. Requires us to raise the min deployment target to iOS 8 and increases the memory footprint. 
- Make a subspec that has the Photos integration. Adds complexity to the code and the podspec.

If you're thinking the next release will be 2.0 then the ideal move may be remove support for the Assets Library to offset the memory footprint and replace it with this. Thoughts?
",Adlai-Holler,appleguy
687,2015-10-02 21:58:29,"@Adlai-Holler The next release will indeed be 2.0, which I'm thinking about pushing out this weekend — there are too many people using 1.2.3, and I don't anticipate breaking API changes with the new 2.0 stuff (with the possible exception of the naming of properties in ASStackLayoutable, being evaluated now).

However, 2.0 wasn't planned to drop support for 7.0, so I'm not sure about the implication on dropping AssetsLibrary.  To be honest, I hadn't realized the OSS framework was linking AssetsLibrary in the first place...
",appleguy,Adlai-Holler
687,2015-10-02 23:40:55,"Thanks @Adlai-Holler , I really appreciate your consideration of that case and provided safer runtime behavior!  It can be difficult to catch iOS 7-specific bugs.
",appleguy,Adlai-Holler
686,2015-11-09 03:49:24,"@vitalybaev thank you for reporting this.  I'm super late in replying to this as it was from that crazy time around NSSpain!

Can you please test the latest master to confirm this is fixed?  I'd do that if there were a test project — sure, this is not that hard to build a project for, but look how many tasks there are in ASDK!

After fully understanding the conditions that lead to the other bug, I'm pretty confident this is fixed.  If it's not, it will be a high priority for me as I'm working in ASRangeController.

In the event that it is easy for you to publish the part of the project that reproduces this, please do as it would make for a nice test case for my ongoing development work.  We should probably create a directory (or just keep adding to examples/) for this kind of test project, similar to ASTableViewStressTest, which is primarily intended for ASDK developers.
",appleguy,vitalybaev
684,2015-09-27 00:11:58,"@Adlai-Holler Thanks for the gist...I'll try applying it.  What I mean by the backing store is whatever the Table/Collection view is using as its datasource.  The reason I mentioned changing the store during the batch operation is that right now I noticed that `ASTableView` is that if you (for example) tell ASTableView to do an insert operation after calling `beginUpdates()` it actually does the insert operation and rebuilds the cell node immediately and calls lock/unlock to the datasource to ensure consistency.  What I gather from this is that the intent of the`ASTableView` datasource protocol is that it wants the data updated as you go through the batch updates--it is not like the UITableViewDataSource protocol that expects all of the data to be updated ahead of time while the batch updates are the formula to rationalize between the old and new state of the table view.  Because the datasource is being queried DURING the batch process I'm not sure how this could work unless the `ASTableViewDataSource` is also being updated incrementally.  Please feel free to correct me if you think I'm misunderstanding any of this.

@nguyenhuy I think you are right about the issues, the danger here is that because `ASTableView` mimics the `UITableView` API as closely as possible it can downright confuse people what's going on.  If you don't think you guys are going to deal with changes the way `UITableView` does I can understand that but it probably would be a good idea to add some documentation around exactly how the `ASTableViewDataSource` needs to behave and what the right way of handling these change operations are.  I assume (please correct me if I'm wrong) that the way you expect users to use this API is something like this:

1) Receive change list.
2) Call `beginUpdates()`
3) Enumerate through the change list, for each item dispatch a block operation to a serial operation queue which will make the change to whatever is acting as the ASTableViewDataSource and to tell the table view to insert/delete/move/update the row section associated with that block.  The calls to lock/unlock dataSource on the ASTableViewDataSource will suspend this queue.
4) Once all of the changes have been processed called `endUpdates()`.

Do I have that right?
",smyrgl,nguyenhuy
684,2015-09-27 00:11:58,"@Adlai-Holler Thanks for the gist...I'll try applying it.  What I mean by the backing store is whatever the Table/Collection view is using as its datasource.  The reason I mentioned changing the store during the batch operation is that right now I noticed that `ASTableView` is that if you (for example) tell ASTableView to do an insert operation after calling `beginUpdates()` it actually does the insert operation and rebuilds the cell node immediately and calls lock/unlock to the datasource to ensure consistency.  What I gather from this is that the intent of the`ASTableView` datasource protocol is that it wants the data updated as you go through the batch updates--it is not like the UITableViewDataSource protocol that expects all of the data to be updated ahead of time while the batch updates are the formula to rationalize between the old and new state of the table view.  Because the datasource is being queried DURING the batch process I'm not sure how this could work unless the `ASTableViewDataSource` is also being updated incrementally.  Please feel free to correct me if you think I'm misunderstanding any of this.

@nguyenhuy I think you are right about the issues, the danger here is that because `ASTableView` mimics the `UITableView` API as closely as possible it can downright confuse people what's going on.  If you don't think you guys are going to deal with changes the way `UITableView` does I can understand that but it probably would be a good idea to add some documentation around exactly how the `ASTableViewDataSource` needs to behave and what the right way of handling these change operations are.  I assume (please correct me if I'm wrong) that the way you expect users to use this API is something like this:

1) Receive change list.
2) Call `beginUpdates()`
3) Enumerate through the change list, for each item dispatch a block operation to a serial operation queue which will make the change to whatever is acting as the ASTableViewDataSource and to tell the table view to insert/delete/move/update the row section associated with that block.  The calls to lock/unlock dataSource on the ASTableViewDataSource will suspend this queue.
4) Once all of the changes have been processed called `endUpdates()`.

Do I have that right?
",smyrgl,Adlai-Holler
684,2015-09-27 00:49:44,"@Adlai-Holler Checking my debug logging it looks like you are right--it threw me off how the dataSource lock/unlock is being called before/after each batch event like so:



But there are no calls to `numberOfSectionsInTableView:` or `tableView:numberOfRowsInSection:` being made.  That makes this a significantly easier problem to work around.  Thanks for the clarification! 
",smyrgl,Adlai-Holler
684,2015-09-27 01:03:09,"@nguyenhuy Glad to have you in here, thanks for the input and analysis! I'll take care of the second one in the next couple days. I want to understand the risk to current clients you mentioned – could you elaborate on that?
",Adlai-Holler,nguyenhuy
684,2015-09-27 06:26:16,"@Adlai-Holler Not to pollute this thread too much but I applied a fix based on your suggestion and it seems to resolve the issues even for move operations.  Thanks a bunch for the help with that.
",smyrgl,Adlai-Holler
684,2015-09-27 20:58:37,"Thanks everyone, @smyrgl, @Adlai-Holler, @nguyenhuy !  I apologize for the implementation failure in this respect.  It's squarely my error, and due to the fact that I didn't recognize there were a set of unique considerations for applying batch changes.  This is largely due to the fact that my work in building tests for this area was cut short after I created the thrash test that did exercise basics of batch requests, but was clearly not sophisticated enough (I didn't feel it was ""done"" at the time, but thought it was unlikely there were further issues).

Taking the time to report and assist in debugging issues like this is a great volunteering of value to the ASDK community, and I really appreciate it.  It looks like we are upon a final solution here.  @nguyenhuy has a patch up that would be great for you to try and comment on.

My next few diffs coming in relate to more advanced control of display, including the option to prevent placeholders from displaying when scrolling (e.g. if the working range fails to finish drawing something, block main for a brief time while the final subnodes finish drawing).  This will fold into extensions to ASViewController, including the ability to contain ASTableViews and coordinate the ""ensure displayed"" functionality (e.g. if you were to push with a navigation controller, or switch tabs, to an async table and wanted to be sure the initial content is displayed).  I'll continue the push with improvements to the thread affinity system, and ASCollectionNode.  Let me know if you encounter any further issues with Table / Collection so that I can prioritize coordinating a solution!
",appleguy,nguyenhuy
684,2015-09-27 20:58:37,"Thanks everyone, @smyrgl, @Adlai-Holler, @nguyenhuy !  I apologize for the implementation failure in this respect.  It's squarely my error, and due to the fact that I didn't recognize there were a set of unique considerations for applying batch changes.  This is largely due to the fact that my work in building tests for this area was cut short after I created the thrash test that did exercise basics of batch requests, but was clearly not sophisticated enough (I didn't feel it was ""done"" at the time, but thought it was unlikely there were further issues).

Taking the time to report and assist in debugging issues like this is a great volunteering of value to the ASDK community, and I really appreciate it.  It looks like we are upon a final solution here.  @nguyenhuy has a patch up that would be great for you to try and comment on.

My next few diffs coming in relate to more advanced control of display, including the option to prevent placeholders from displaying when scrolling (e.g. if the working range fails to finish drawing something, block main for a brief time while the final subnodes finish drawing).  This will fold into extensions to ASViewController, including the ability to contain ASTableViews and coordinate the ""ensure displayed"" functionality (e.g. if you were to push with a navigation controller, or switch tabs, to an async table and wanted to be sure the initial content is displayed).  I'll continue the push with improvements to the thread affinity system, and ASCollectionNode.  Let me know if you encounter any further issues with Table / Collection so that I can prioritize coordinating a solution!
",appleguy,Adlai-Holler
684,2015-09-27 21:00:59,"@smyrgl I think we want to mimic UITableView and UICollectionView behaviours, if not directly in ASDataController then in a wrapper/subclass of it that can be used by ASTableView and ASCollectionView. It will be easier for new developers to switch to ASDK.

@Adlai-Holler Thanks for taking the second issue. Let me elaborate my words:
- The current behaviour is somewhat broken, but people have came up with many creative workarounds. I'm just wondering if we apply the fix directly to ASDataController, those workarounds may no longer work and it would be quite painful if they happen to be in production code. Also, IIRC, @appleguy planned to use ASDataController for other classes as well. So changing that class to work with UITableView/UICollectionView may not be ideal.
- What I'm thinking is that we can do the sorting as an extension on top of ASDataController, like a subclass or a wrapper. Such extension will only be used by UITableView/UICollectionView. It actually sits between UITableView/UICollectionView and ASDataController. 
- After that, we can allow a way for developers to opt-in for that extension and test it. For example, we can add a new flag to ASTableView/ASCollectionView initializers. Such flag can be used by a new table/collection view to determine whether it should create an ASDataController or the extension. ASDataController will be used by default, so there will be no breaking API changes and existing workarounds will still work.
- Once we are confident that the extension works correctly, we can use it as the default option.
",nguyenhuy,appleguy
684,2015-09-27 21:00:59,"@smyrgl I think we want to mimic UITableView and UICollectionView behaviours, if not directly in ASDataController then in a wrapper/subclass of it that can be used by ASTableView and ASCollectionView. It will be easier for new developers to switch to ASDK.

@Adlai-Holler Thanks for taking the second issue. Let me elaborate my words:
- The current behaviour is somewhat broken, but people have came up with many creative workarounds. I'm just wondering if we apply the fix directly to ASDataController, those workarounds may no longer work and it would be quite painful if they happen to be in production code. Also, IIRC, @appleguy planned to use ASDataController for other classes as well. So changing that class to work with UITableView/UICollectionView may not be ideal.
- What I'm thinking is that we can do the sorting as an extension on top of ASDataController, like a subclass or a wrapper. Such extension will only be used by UITableView/UICollectionView. It actually sits between UITableView/UICollectionView and ASDataController. 
- After that, we can allow a way for developers to opt-in for that extension and test it. For example, we can add a new flag to ASTableView/ASCollectionView initializers. Such flag can be used by a new table/collection view to determine whether it should create an ASDataController or the extension. ASDataController will be used by default, so there will be no breaking API changes and existing workarounds will still work.
- Once we are confident that the extension works correctly, we can use it as the default option.
",nguyenhuy,Adlai-Holler
684,2015-09-27 23:26:34,"Thanks @appleguy and @nguyenhuy and I'll be glad to test your patch out this evening (I've made the update calls modular so I can easily switch over to the ""standard"" batch updating code to see what happens).

My app is actually a really good case for testing this because I use table view sections to represent root nodes in a flattened infinite depth tree data structure that is stored in Core Data and listened to by an `NSFetchedResultsController` (which as noted above does not produce ordered changes).  I have live updates going on (via web socket listeners which fire Core Data change events), batch fetching (for infinite scroll), manual collapse/expand of nodes (which takes the form of delete/inserts) and manual sort control (which generates a metric ton of section/row move operations).  This is actually important because most people assume that an `NSFetchedResultsController` won't return section moves because the Apple sample code doesn't even bother to implement that conditional but it does.
",smyrgl,nguyenhuy
684,2015-09-27 23:26:34,"Thanks @appleguy and @nguyenhuy and I'll be glad to test your patch out this evening (I've made the update calls modular so I can easily switch over to the ""standard"" batch updating code to see what happens).

My app is actually a really good case for testing this because I use table view sections to represent root nodes in a flattened infinite depth tree data structure that is stored in Core Data and listened to by an `NSFetchedResultsController` (which as noted above does not produce ordered changes).  I have live updates going on (via web socket listeners which fire Core Data change events), batch fetching (for infinite scroll), manual collapse/expand of nodes (which takes the form of delete/inserts) and manual sort control (which generates a metric ton of section/row move operations).  This is actually important because most people assume that an `NSFetchedResultsController` won't return section moves because the Apple sample code doesn't even bother to implement that conditional but it does.
",smyrgl,appleguy
684,2015-09-28 20:30:31,"@appleguy Yeah I was surprised too given that AsyncDisplayKit and ASTableView are a great match in theory (and it practice too when this all gets worked out ;)).

I'm going to work on a sample project to help you guys reproduce this on your own by carving out one of my core view controllers.  But please let me know if there is any other way I can help.
",smyrgl,appleguy
684,2015-10-19 03:40:23,"So, we just merged @levi's epic change touching this code.  That was really the main thing that meant it was inadvisable to start this project.  Now, this is really the only absolutely-critical fix to develop related to table / collection, and is something that would be ideal to have in place for the 2.0 GM.

@eanagel, @Adlai-Holler, @b3ll, @nguyenhuy are any of you up to the challenge?  I understand it's a big commitment, so don't be shy to say ""no"" outright (it might encourage others! ;) )  
",appleguy,nguyenhuy
684,2015-10-19 03:40:23,"So, we just merged @levi's epic change touching this code.  That was really the main thing that meant it was inadvisable to start this project.  Now, this is really the only absolutely-critical fix to develop related to table / collection, and is something that would be ideal to have in place for the 2.0 GM.

@eanagel, @Adlai-Holler, @b3ll, @nguyenhuy are any of you up to the challenge?  I understand it's a big commitment, so don't be shy to say ""no"" outright (it might encourage others! ;) )  
",appleguy,Adlai-Holler
684,2015-10-19 13:42:38,"Negative, I'm on vacation till Thursday

Sent from my iPhone

> On Oct 18, 2015, at 11:40 PM, appleguy notifications@github.com wrote:
> 
> So, we just merged @levi's epic change touching this code. That was really the main thing that meant it was inadvisable to start this project. Now, this is really the only absolutely-critical fix to develop related to table / collection, and is something that would be ideal to have in place for the 2.0 GM.
> 
> @eanagel, @Adlai-Holler, @b3ll, @nguyenhuy are any of you up to the challenge? I understand it's a big commitment, so don't be shy to say ""no"" outright (it might encourage others! ;) )
> 
> —
> Reply to this email directly or view it on GitHub.
",Adlai-Holler,nguyenhuy
684,2015-10-19 13:42:38,"Negative, I'm on vacation till Thursday

Sent from my iPhone

> On Oct 18, 2015, at 11:40 PM, appleguy notifications@github.com wrote:
> 
> So, we just merged @levi's epic change touching this code. That was really the main thing that meant it was inadvisable to start this project. Now, this is really the only absolutely-critical fix to develop related to table / collection, and is something that would be ideal to have in place for the 2.0 GM.
> 
> @eanagel, @Adlai-Holler, @b3ll, @nguyenhuy are any of you up to the challenge? I understand it's a big commitment, so don't be shy to say ""no"" outright (it might encourage others! ;) )
> 
> —
> Reply to this email directly or view it on GitHub.
",Adlai-Holler,Adlai-Holler
684,2015-10-19 16:49:28,"Happy to take a look if @nguyenhuy is busy.
",levi,nguyenhuy
684,2015-10-19 17:31:15,"@levi: Thanks for offering help. Since I already have something in mind, I guess the best use of our time would be to let me create a new PR with my idea (within 24 hours) and we can work on it together. Yeah?
",nguyenhuy,levi
682,2015-09-25 02:40:38,"@Adlai-Holler I spent some time looking at this, don't have a conclusive solution yet but the diff above may help.

You should definitely uncheck the ""collapse stacks"" thing in the Xcode side window...there are a few stack frames that I really want to see to better understand this, but appear lost forever :).

Thanks again for the report, hope to fully understand this one as soon as we see it again and collect more details.  Pinterest's work is just now generating large new implementations based on ASDK (the first screen of which is now in a public experiment), so in a few months we will have a better sense of even the rarest crashes.

One reason I'm so interested in this is that I haven't seen an ASDK crash outside of the Table / Collection classes for a very, very long time.  It needs to be structurally impossible for this framework to crash, and so I want to follow up on any examples otherwise.  I think there are still some rare cases where Table / Collection can crash, so implementing better thrash tests that expose any issues is high on my list.
",appleguy,Adlai-Holler
682,2015-10-28 02:29:22,"Haven't seen this since the one instance and I've used ASDK a lot. @appleguy Naturally you're welcome to reopen it you want
",Adlai-Holler,appleguy
681,2015-10-04 00:30:19,"@Adlai-Holler In general, I try to avoid using +initialize, but I think this could be a valid scenario to use it.

Could we simply call ASScreenScale() in +initialize on ASDisplayNode?  If you could:
- Try that locally in your app just to confirm it addresses the issue in a real-world use case with asynchronous node allocation (sadly, no current example app does this, as I have not finished implementing ASTableView/ASCollectionView-driven async allocation).
- Let me know if you have any suggestions for a more elegant fix than this.
",appleguy,Adlai-Holler
675,2015-09-22 19:50:53,"@crylico thanks for the fix!  Sorry that various commits keep missing this.  I wonder what the easiest way is to ensure Carthage is tested during the unit test cycle.
",appleguy,crylico
675,2015-09-22 20:18:31,"@crylico what is the failure mode?  Yeah, I think the example project is the right idea.  I believe right now if you do a simple Duplicate in Finder (cmd-D) on any project in the examples/ directory, and then just give the project a name an modify it, you have a new example project.

We should check, but I believe the build system automatically compiles all of them.  So if we put one in with Carthage, theoretically it could catch this?
",appleguy,crylico
675,2015-09-22 20:43:40,"@appleguy So, checking out the commit just before this merge and creating a brand new sample project, then following the iOS Getting Started instructions at [Carthage](https://github.com/Carthage/Carthage), then doing `@import AsyncDisplayKit;`, the build error (in Xcode, not Carthage) is `'AsyncDisplayKit/ASViewController.h' file not found`.

Can you think of any other issues that could arise?
",crylico,appleguy
675,2015-09-22 20:47:11,"@crylico I've actually never used Carthage before, or even the @import flag :).  There are a few other people who have contributed to Carthage support (and filed both Issues and PRs), and it would be great to loop them in for any suggestions.

I know at least a couple were hoping to create a sample project as well, and might actually have a specific strategy in mind for the simplest way to create the sample.  I think duplicating an example is a fine starter approach for most sample projects, although it may be the case that with Carthage, starting from clean build settings (rather than a project / workspace originally managed by Cocoapods) is the better idea?
",appleguy,crylico
675,2015-09-22 21:10:55,"@appleguy if there are already people with some ideas in mind, great! I'd love to hear their inputs :) If not, I'd be more than happy to make the example project with the bare minimum to trigger an error if there are files missing.  

I agree that starting with a clean project would be a good idea, though the README sounds a bit like all projects in the examples folder get ""pod install"" for CI, which obviously would error out for a carthage project. Is it safe to just create a new project that doesn't depend on cocoapods? 
",crylico,appleguy
672,2015-09-20 06:25:15,"@eanagel Thanks! It would indeed make this a 1-line commit, assuming that `reloadData` -> `setNeedsLayout` which I'd bet it does. The performance cost comes from laying out the cells when they don't necessarily need to be laid out. For a simple example, consider if you called `reloadData` 5 times during the same frame. The collection view cells would get laid out 5 times for one frame.

As for ASTableView, I don't _think_ it behaves the same way but I'll check it tomorrow and post back on this thread either way.
",Adlai-Holler,eanagel
669,2015-09-22 22:02:00,"@appleguy, @duxinfeng: I have a pretty clear picture as where to head with adding supplementary view support for flow layouts. I'm currently sketching out additions to ASDataController specific to ASCollectionView. I'm planning to have a roughed-out data controller implementation in a couple of days and will put up a WIP pull request to begin community feedback and iteration.
",levi,appleguy
669,2015-09-24 04:18:01,"Really great, thanks @levi for the update!  Can't wait to see, don't hesitate to share something super early even if the initial diff doesn't actually work with a real UI.  I'm very interested to start considering what would be necessary to go from that to a solution that supports non-flow layouts too (may not be feasible though, as we've discussed some...)
",appleguy,levi
668,2015-09-19 19:28:22,"@appleguy Yeah, both actually! Transparent image over white background (a little compose icon in a table cell)

Also thanks for helping me find a new function today ^^

EDIT: Ruby gem server gave us a 500
",Adlai-Holler,appleguy
667,2015-09-20 17:02:57,"@appleguy the same thing happened to us a while ago. We recently upgraded to 0.38.2 and seem to be running fine. I just updated travis—let's see what happens.
",levi,appleguy
665,2015-09-17 08:24:46,"@appleguy If we have to pick between:
- Can't subclass `ASDisplayNode` in Swift

or
- Reveal internal `ASDisplayNode` methods to other consumers

I think the latter is way less restrictive, and kind of a no-brainer. Using AsyncDisplayKit under Swift but having to use Objective-C to subclass `ASDisplayNode` would be awful
",Adlai-Holler,appleguy
664,2015-09-17 00:04:01,"Ah! Thanks @levi , done and done!
",Adlai-Holler,levi
664,2015-09-19 18:39:34,"@appleguy Sweet! I got it to the point where it'll build on Travis, but now some tests are failing because of missing implementations of category properties like `[_ASDisplayLayer asyncdisplaykit_isAsyncTransactionContainer]: unrecognized selector`. I added an implementation for one of them, and then it crashed on a different one. 

I don't quite understand how these methods were ever getting implemented in the first place. All I can find is `@dynamic [name]` specifiers with no implementation code in sight. Any pointers? @nguyenhuy ?
",Adlai-Holler,appleguy
664,2015-09-21 05:15:20,"@appleguy Interesting… on my local machine, on both `master` and this branch, using build-and-run on simulator 8.4 and 9.0, the same code path works fine. The code I used was:



Accessing `_ASDisplayLyer.asyncdisplaykit_node` is an instacrash in the unit tests.
",Adlai-Holler,appleguy
664,2015-10-27 00:10:31,"@Adlai-Holler what you're talking about is not building & running the Tests, right?  Just building the framework / an app?  Yes, it quite clearly does work to compile the framework and have it run correctly under Xcode 7.x, and the issue (and Radar bug description) is definitely specific to the tests environment.

I wouldn't be surprised if there's a workaround for this, but I can't think of one that is less dramatic than eliminating reliance on @dynamic properties entirely.
",appleguy,Adlai-Holler
659,2015-09-16 15:41:43,"Thanks for fast reply @appleguy! Unfortunately, my cocoapods-fu is severely lacking, and I've moved the library to a submodule for now .. So, not a pressing issue, but more and more users are moving to swift, and it will probably be an important change.

Will report back if I figure it out myself.

Have fun at NS:es: !
",Mazyod,appleguy
659,2015-09-17 09:18:18,"@appleguy a developer at pop resolved the issue, you can see his change for reference. Yup, would probably take less than 2 mins:

https://github.com/facebook/pop/commit/b1b1ca2c5da35548357fe1b3aa901d7e5094532f
",Mazyod,appleguy
654,2015-09-16 01:33:41,"@appleguy Still seeing the same issue though


",tettoffensive,appleguy
654,2015-09-16 16:31:12,"Thanks for helping us get to the bottom of this, @tettoffensive! These are the kind of problems that we only find in the wild and are so valuable to run down. In addition to @appleguy's questions above, could you could include the actual message from the failed assertion? That, coupled with the actual stack trace (bt in the console) would be really helpful.
",eanagel,appleguy
654,2015-09-19 19:21:18,"Thanks again @tettoffensive — not exaggerating, because the main ASDK maintainers also have day-jobs it is so tremendously helpful to have this level of detail from the most competent and thoughtful users of the framework.

I'll be back in California early this coming week, and will work with @eanagel to figure this out pronto.  I've saved your sample locally and will take a first look at it on the plane.

Let us know if you run into any other interesting clues / behaviors / workarounds, but I think you've provided enough for us to fix the issue.  Also let me know if you have a specific deadline and this is jeopardizing your engineering strategy.  Feel free to email me at asyncdisplaykit@gmail.com with general questions on ASDK, too. :)
",appleguy,eanagel
654,2015-09-21 17:19:35,"Hey guys, just got back from a weekend in Portland. Just tested both my test project (which was failing every time) and it worked! I tested my main project as well (which wasn't failing every time, but often enough). So far no issues.

Thanks @appleguy @adly-holler @rcancro @eanagel for the quick response!
",tettoffensive,appleguy
654,2015-09-21 17:19:35,"Hey guys, just got back from a weekend in Portland. Just tested both my test project (which was failing every time) and it worked! I tested my main project as well (which wasn't failing every time, but often enough). So far no issues.

Thanks @appleguy @adly-holler @rcancro @eanagel for the quick response!
",tettoffensive,rcancro
654,2015-09-21 17:19:35,"Hey guys, just got back from a weekend in Portland. Just tested both my test project (which was failing every time) and it worked! I tested my main project as well (which wasn't failing every time, but often enough). So far no issues.

Thanks @appleguy @adly-holler @rcancro @eanagel for the quick response!
",tettoffensive,eanagel
652,2015-10-22 07:24:53,"@nguyenhuy I have three text nodes in a parent node (bottomHStack) each with two lines of text. I would like the text centered - I was able to figure out how to stretch the text nodes across the screen but now centering the text is not happening using attributedString

![asdk-screenshot4](https://cloud.githubusercontent.com/assets/258556/10659228/16aaf5a0-7853-11e5-9bdb-316bc57baae3.png)
",robmontesinos,nguyenhuy
652,2015-10-22 19:28:05,"@nguyenhuy Thank you for getting back to me. Yes the paragraph style is set correctly and was working in the previous UILabels.

I tried ASCenterLayoutSpec on one of the ASTextNodes and got a run-time error: Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid position is not allowed in sub layout.'

Any thoughts? I have no idea how to center dual-line text on an ASTextNode since it seems to be ignoring paragraph styling in attributed string.

relevant code:


",robmontesinos,nguyenhuy
652,2015-10-22 21:03:40,"Well I got it to work - it was not intuitive but trial and error paid off - plus a little help from friends @nguyenhuy  and @appleguy 



![asdkscreenshot5](https://cloud.githubusercontent.com/assets/258556/10678193/a6cca990-78c5-11e5-8893-81f0bb3bc430.png)
",robmontesinos,nguyenhuy
652,2015-10-22 21:03:40,"Well I got it to work - it was not intuitive but trial and error paid off - plus a little help from friends @nguyenhuy  and @appleguy 



![asdkscreenshot5](https://cloud.githubusercontent.com/assets/258556/10678193/a6cca990-78c5-11e5-8893-81f0bb3bc430.png)
",robmontesinos,appleguy
652,2015-10-23 02:13:07,"Sweet!  Do you use the addTarget/action functionality on the tweet count, like a button, as the reason to not have it layer-backed?  This is of course the default so you don't need to set it to YES, but having it there does make your code more explicit about the fact that it intentionally wants it to remain YES.

Sent from my iPhone

> On Oct 22, 2015, at 2:03 PM, Roberto Montesinos notifications@github.com wrote:
> 
> Well I got it to work - it was not intuitive but trial and error paid off - plus a little help from friends @nguyenhuy and @appleguy
> 
> 
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,nguyenhuy
652,2015-10-23 02:13:07,"Sweet!  Do you use the addTarget/action functionality on the tweet count, like a button, as the reason to not have it layer-backed?  This is of course the default so you don't need to set it to YES, but having it there does make your code more explicit about the fact that it intentionally wants it to remain YES.

Sent from my iPhone

> On Oct 22, 2015, at 2:03 PM, Roberto Montesinos notifications@github.com wrote:
> 
> Well I got it to work - it was not intuitive but trial and error paid off - plus a little help from friends @nguyenhuy and @appleguy
> 
> 
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,appleguy
652,2015-10-23 02:39:54,"Oops. Nice catch @appleguy . I am using layerBacked = NO on another ASCellNode where I am using the labels as buttons to extend the target size for retweet and favorite buttons - copy and paste error.

I am having problems currently with ASNetworkImageNode - should I open another issue?
",robmontesinos,appleguy
652,2015-10-23 18:45:32,"You've been a huge help @nguyenhuy  so here you go - probably not the sexiest implementation but it works and is fast:


",robmontesinos,nguyenhuy
649,2015-09-13 20:29:12,"@appleguy thanx!
So seems that there is only two parameters - preload and render. This helps a lot :+1: 
",richardtop,appleguy
649,2015-09-13 20:32:17,"Yes, that’s right, although I am about to add the Visible range in the next couple weeks — and have dreams of others :)

Be sure to let me know if you have any questions about ASDK!  GitHub issues are a fine way to do that, or post in Paper Engineering Community (Facebook) or the AsyncDisplayKit group (Google Groups)

> On Sep 13, 2015, at 10:29 PM, Richard Topchii notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy thanx!
> So seems that there is only two parameters - preload and render. This helps a lot 
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/649#issuecomment-139914746.
",appleguy,appleguy
649,2015-10-01 04:10:40,"@appleguy cool, thanks for the help.
One issue worth to be mentioned is significant per-device performance difference. For example, there are no issues at all on 6, 6+ and iPad Air 2 (and if running on PC in Simulator too).

The stalls are reproducible on 4S and iPad 3.
",richardtop,appleguy
649,2015-10-01 04:18:18,"Thanks for calling that out.  I’ll run it on an iPod 5G, which is the same clock speed / CPU / GPU as the 4S but has the larger number of pixels on the Retina 4.0” screen to render (same memory, more data!)  I also have an iPhone 4 readily available, which would probably be the best profiling device to increase the accuracy of the sampling (more time spent, more samples gathered to show accurate percentages).

> On Sep 30, 2015, at 9:10 PM, Richard Topchii notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy cool, thanks for the help.
> One issue worth to be mentioned is significant per-device performance difference. For example, there are no issues at all on 6, 6+ and iPad Air 2 (and if running on PC in Simulator too).
> 
> The stalls are reproducible on 4S and iPad 3.
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/649#issuecomment-144614708.
",appleguy,appleguy
649,2015-10-04 19:29:44,"Thanks for debugging, @appleguy.
The Swift debugging possibilities are far from perfect, that's true.
What about image size? Is it related to the resizing&image layout?
",richardtop,appleguy
649,2015-10-06 02:32:15,"@appleguy Nice to hear that the bug is fixed!

The point about minimum size makes sense, as now it is zero and this is most likely causes layout bugs.

I will create a new task with better description of the desired layout. BTW, I think it is a good way of writing docs, as there is non-zero probability that somebody is having similar troubles - these newsfeed-like layouts are essential for iOS and mobile in general.
",richardtop,appleguy
644,2015-09-09 05:29:49,"Thanks for the varied exploration and implementation work, @rcancro!  Let's land this as a step forward, and continue evolving it rapidly.
",appleguy,rcancro
643,2015-09-10 02:45:17,"Great — and especially thrilled to see the tests!  Thanks @nguyenhuy :)
",appleguy,nguyenhuy
637,2015-09-03 02:21:02,"@ocrickard Initially I thought it was the https://github.com/lorixx/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASTextNode.mm#L363-L364

That causing the off-pixel since round could get tricky instead of ceilf, but I realized those did not participate on the layout for the text too. Hence I suspected that the villain might be the way we do layout, which leads to the origin point we pass into the `NSLayoutManager`.
",lorixx,ocrickard
637,2015-09-03 08:26:56,"@ocrickard - thanks for taking a look here, really appreciate your expertise in this area! cc @rcancro.

I agree this is not the right fix, as clearly this adjustment wouldn't necessarily apply to other languages / scripts.

Does this happen on all recent iOS versions?  Have you tried iOS 9?
",appleguy,ocrickard
637,2015-09-03 18:08:50,"@appleguy Yea, the bug also happens in iOS 9 as well. I do think it's also affecting other locales as well since it's purely a layout issue within -[NSLayoutManager drawGlyphsForGlyphRange:atPoint:].

Another temporary solution is let the client side increase 1 pixel in the bounds height returned from `-[ASTextNodeRenderer size]`.
",lorixx,appleguy
637,2015-09-05 18:42:03,"@lorixx — Thanks for your analysis, it's much appreciated!  Wish we could be working together :).

@rcancro should take a look at this as he has been pixel-pushing text layout recently.  I want to make sure he can trivially reproduce the problem, at least as a starter.

@ocrickard do you have reason to believe that if we adopted the newer text layout engine (revised for ComponentKit), that it would fix this issue?  If you could test that for me and confirm, it would be really helpful.
",appleguy,ocrickard
636,2015-09-03 08:32:40,"@nguyenhuy I'm happy to merge this, once it builds; do you know what the issue is?

[Joining you from long-range WiFi via 14dB panel antenna @ Burning Man!]
",appleguy,nguyenhuy
636,2015-10-01 02:39:46,"Sorry for the delay, looking forward to getting this PR integrated & closed out :).  Thanks @nguyenhuy!
",appleguy,nguyenhuy
632,2015-08-29 06:46:05,"@paulyoung thanks for continuing to test the dynamic framework!  When I have more time after NSSpain, I'll try to get a test case in there.

This appears to break the automated build, so if you could investigate that and resolve, I'll merge promptly.
",appleguy,paulyoung
632,2015-09-03 08:30:00,"@paulyoung - thanks for the commentary and continued analysis here!  Learning along the way :)
",appleguy,paulyoung
632,2015-09-10 02:46:26,"@paulyoung checking in; I'll be releasing the ASDK 2.0 Beta branch in about a week, and it would be cool to have this purring nicely if possible :).  No stress, though; we'll get it fixed for the GM either way.
",appleguy,paulyoung
632,2015-09-11 21:45:42,"@appleguy sounds good. Planning on looking into this again tonight.
",paulyoung,appleguy
632,2015-09-16 11:58:36,"@paulyoung you might make it just in time for the Beta cut!  I'm aiming to do that in about 18hrs.
",appleguy,paulyoung
632,2015-09-16 19:48:30,"Thanks @paulyoung!  @nguyenhuy is aware of the failure, and we'll try to get it fixed promptly.  I also let @rcancro know about the C++ ""header pollution"" issue.  I'm going to merge this now anyway.
",appleguy,paulyoung
628,2016-06-17 22:59:57,"@appleguy: Is this a functionality we want to support? 
",hannahmbanana,appleguy
623,2015-08-22 00:15:10,"Thank you, @rcancro!  There is a legitimate test failure — just need to update the selector names.  Most of my feedback is stylistic, and I'd be fine landing this now if you want to address those in a followup.  The initializer pattern is not crucial, but probably would be quick to change and it would be nice to keep a consistent style as contributors continue to come into ASDK & look to match surrounding code.
",appleguy,rcancro
623,2015-08-22 15:12:57,"@appleguy Looks like you hate the old syntax with passion! But I agree that this diff make the API looks way better. Thanks @rcancro :+1: 
",nguyenhuy,rcancro
623,2015-08-22 15:12:57,"@appleguy Looks like you hate the old syntax with passion! But I agree that this diff make the API looks way better. Thanks @rcancro :+1: 
",nguyenhuy,appleguy
622,2015-08-22 00:22:03,"@rcancro yes, I think you would have to do that.  Let me start by saying that this feels like a confusion that clients are going to experience, so we should think about simplifying the API if at all possible.  I think we may deprecate -calculateSizeThatFits: entirely, although I would like to leave support for it in the framework for quite a while because it used to be the only way (and there is a lot of production code at some pretty big companies that depends on it).

So looking at just -calculateLayout... and -layoutSpec..., the -calculate version basically bypasses ASLayoutSpec entirely.  The ASLayoutSpec version just provides a middleman to handle the calculation step later.

For your use case, although I'm not totally sure if I understand:
- The text node wouldn't have any subnodes, meaning that ASLayoutSpec as an abstraction is presumably useless; the only thing being calculated is our own size, with no children.  The power / utility of ASLayoutSpec is in its ability to calculate not only the self size, but both size and position of children.
- If your subclass used ASLayoutSpec, then the framework has two incompatible things to call calculate on: the superclasses' direct implementation, as well as the ASLayoutSpec itself.  This is probably not what you wanted as the ASLayoutSpec you provide probably can't even accurately calculate the text's size.
- If your subclass used the -calculate method directly, it would be able to call the super implementation very naturally and then modify its return value.  This would remove the ambiguity at the framework level as well.
",appleguy,rcancro
622,2015-08-22 04:23:46,"@appleguy That description makes a lot of sense -- thank you! I think a lot of confusion would be solved if `layoutSpecThatFits:` had a name more like `layoutSpecThatFitsSubnodes:` or `layoutSpecForSubnodes:` or just `layoutSubnodes:`. Just as I wouldn't try to do anything in UIView's `layoutSubviews` if I had no subviews, I'd know that I don't have any business making a layout spec if I didn't have any subnodes.

We could also steal the autolayout terminology and instead of `calculateLayoutThatFits:` name it something like `calculateIntrinsicContentSize:` or `calculateLayoutForIntrinsicContentSize:`. That would alert me to the fact that this is for a node with no subnodes and this is how it gets its size. But I'm also used to working in autolayout, so that may be why this name makes sense to me.
",rcancro,appleguy
622,2015-08-22 15:05:49,"Thanks for your explanation, @appleguy. It describes what I had in mind (and many more), with way better language. Definitely something I can learn from.

@rcancro: yes, -calculateLayoutThatFits is what you need to override. But thinking again, if your custom node already overrides -calculateSizeThatFits, you don't gain any advantage here. However, I hope you don't abandon this PR, because it is exactly what we have to do to drop support for -calculateSizeThatFits. If we do this now, there will be 1 less breaking change for ASTextNode subclasses (including yours) in the future.

I've been playing around with a custom text node that has built-in insets. My current implementation looks like this:



My text node has correct size, but its text is rendered incorrectly because I haven't figured out the way to command its text renderer to draw within a (smaller) rendering bounds.

And I agree that we need better names. I'm pretty bad at naming things anyway, so it's you call :)
",nguyenhuy,rcancro
622,2015-08-22 15:05:49,"Thanks for your explanation, @appleguy. It describes what I had in mind (and many more), with way better language. Definitely something I can learn from.

@rcancro: yes, -calculateLayoutThatFits is what you need to override. But thinking again, if your custom node already overrides -calculateSizeThatFits, you don't gain any advantage here. However, I hope you don't abandon this PR, because it is exactly what we have to do to drop support for -calculateSizeThatFits. If we do this now, there will be 1 less breaking change for ASTextNode subclasses (including yours) in the future.

I've been playing around with a custom text node that has built-in insets. My current implementation looks like this:



My text node has correct size, but its text is rendered incorrectly because I haven't figured out the way to command its text renderer to draw within a (smaller) rendering bounds.

And I agree that we need better names. I'm pretty bad at naming things anyway, so it's you call :)
",nguyenhuy,appleguy
622,2015-08-22 17:34:46,"@appleguy and I spoke at this once, and we ultimately decided that a view probably shouldn't be adding its own padding. Even classes like `UIButton` that have `contentEdgeInsets` property are (I assume) adding this padding to a subview.

Ultimately, when I add a text node to a spec I can just wrap it in an `ASInsetLayoutSpec` to get the behavior I want. I'm just looking for a way for this to happen automatically as I know that people won't remember to do it. 

I've thought about adding an optional method to `ASLayoutable` like `willBeAddedToLayoutSpec` that returns an `id<ASLayoutable>` that would allow a child to wrap itself. 

I've also thought about adding a new protocol with this method that a child can conform to. When adding the child, a spec can call this method if the child implements the protocol.

This is all separate from this PR which is about moving ASTextNode to `calculateLayoutThatFits`. So if we can agree on names then we can still merge this. :)
",rcancro,appleguy
622,2015-08-23 18:43:47,"@rcancro the idea to provide an auto-wrapping layout spec is pretty interesting.  The fact that ASDisplayNode conforms to ASLayoutable actually breaks this a bit, though.  Imagine for a moment that ASDisplayNode itself could not be added as a child of an ASLayoutSpec, and you /had/ to access a spec.  Then we'd have standard -[ASDisplayNode layoutSpec] method, or something similar, to allow adding individual nodes to the layout tree.  This would potentially serve as an override point to introduce automatic insets and such.  One riff on this would be an -[ASDisplayNode layoutable] method, but if this just returned self, clients could still add display nodes directly and then defeat the override point.

This would be a fairly big change.  It elegantly handles the case we desire, but does add boilerplate and one additional level of understanding required to use layout specs at all (since you wouldn't be able to directly add nodes to specs).  It also makes it a little harder to understand layout specs in general, because in addition to handling layout-manipulating tasks, they would now also have to handle representing an individual node (with no other purpose than standing in for a single node).

Very much in the spirit of ASDK, there might be a fancy way to make this work seamlessly.  What if when you added an ASDisplayNode directly, we had a mechanism built into ASLayoutSpecs to check for a method that provides an optional wrapping ASLayoutSpec?  This seems tricky to get right, as it would be critical that the layout spec returned does contain the node in question, or the user behavior observed would be wildly confusing.

Lastly: I agree we can still land this.  -calculateSizeThatFits: has to move towards deprecation or our API surface area is just too large in this space.  Although ASLayoutSpecs should probably only be used for nodes with children, that is NOT true for ASLayout, as returned by -calculateLayout...  ASLayout specifies self's size, and optionally, any children's position /and/ size.  Every node should have a mechanism of creating an ASLayout, and there are exactly two places they can come from: -calculateLayout called on an ASLayoutSpec, or -calculateLayout called directly on the node.
",appleguy,rcancro
621,2015-08-22 04:06:21,"@nguyenhuy does a typical developer need to know about the flexGrow and flexShrink properties for this to work?  What if there is no stack layout?  If those flex properties are not set, does an assertion or exception get triggered?

Sorry, don't completely understand the implications of this change.  It does seem reasonable to set the default minimum size to be the table view width, though.
",appleguy,nguyenhuy
619,2015-09-01 18:43:11,"I've run into similar issues as @eanagel when attempting to call `nodeForRowAtIndexPath`. This call is the number one crash report I'm getting in my app. 

My usecase for using `didEndDisplayingNodeForIndexPath` was to fade out a specific area within a CellNode when no longer on screen and then fade it back in when it displays again. I was able to fix this by overriding `clearContents` on the cell node and handling the logic there. For me this feels like a cleaner solution than using `didEndDisplayingNodeForIndexPath` and haven't run into any issues with it.

However, I do have another case where data related to the tableview (but not required for rendering the tableview) is fetched in the background. Once that data is fetched I attempt to loop over the current rows and update the rows if needed. Here the call to `nodeForRowAtIndexPath` is causing a large number of crash reports.

Id vote for adding a new api of `nodeForRowAtIndexPath:withCompletion` where if no node exists for the given indexPath it returns nil / NSError and does not throw an exception. 
",ryanfitz,eanagel
617,2015-08-19 18:32:27,"@nguyenhuy glad you were able to pinpoint it so quickly! I'm not comfortable enough with the internals to try to fix it myself yet.

On a side note, all the contributions you've made are really awesome.
",wpK,nguyenhuy
616,2015-08-21 15:55:06,"Instead of calling `reloadData`, I would insert, remove and move rows around as needed. For example when a user pulls to refresh, simply add the new rows at the top and move the existing rows down. I have a working [solution](https://github.com/ryanfitz/AsyncDisplayKitHeaderNodeExample/blob/master/AsyncDisplayKitHeaderNodeExample/ASTableViewManager.swift). This works well in my app, which supports both pull to refresh and infinite scroll.

With that said, @nguyenhuy solution is extremely clever
",ryanfitz,nguyenhuy
616,2015-08-21 20:52:56,"Yeap, definitely should do minimum amount of work and avoid reloadData at all cost. Thank you, @ryanfitz :sunglasses: 
",nguyenhuy,ryanfitz
616,2015-08-22 07:12:52,"@nguyenhuy @ryanfitz thank you for your reply, I think I should avoid using reloadData as much as possible. And @nguyenhuy your tricks are really helpful, gorgeous, many thanks...
",nannanIT,nguyenhuy
616,2015-08-22 07:12:52,"@nguyenhuy @ryanfitz thank you for your reply, I think I should avoid using reloadData as much as possible. And @nguyenhuy your tricks are really helpful, gorgeous, many thanks...
",nannanIT,ryanfitz
613,2015-08-22 04:12:57,"@eanagel Thanks again for this :).  What did the numbers look like, even if you only measured before the patch?  Roughly what magnitude of costs are you seeing when scrolling (ms, % of main thread)?

I'm curious because it could help prioritize the work to move node initialization off the main thread, which is where it has always belonged!  Of course, regardless of the thread, optimization is appreciated.

I'll take a closer look at this over the weekend and try to get it merged.
",appleguy,eanagel
613,2015-09-05 18:55:16,"@eanagel This is really, really cool.  Although far from the largest, it is one of the most detailed and technical patches we have received from the community, and I really appreciate your thoughtful analysis and optimization.

I'm comfortable landing this as-is, and will do so if you don't have time to make the tweaks requested in the next couple days, but I do have a couple style / documentation asks.
",appleguy,eanagel
611,2015-08-19 02:11:24,"Hey guys,

I just copied the BaselineFirst/BaselineLast idea from UIStackView. For anything but text nodes it seems pretty worthless to me (imagine an image node that has its top aligned with the baseline of a text node) but I wasn't sure that was a good enough reason to not include it. I'm not married to ascender/descender, and can give it a shot with `distanceToBasline` or something similar.

To tell you the truth, for what I need the layout to do, a layoutInsets would be the most helpful. I  actually have another branch where I'd already started working on that idea. ASInsetSpec didn't work for me because I wanted text node subclasses (it is a long, long story), but couldn't return an inset layout spec because a subclass can only implement 1 of the 3 layout methods (is that something we can change?). So I would still be in favor of layoutInsets in ASLayoutable.

But I'm not sure that one needs to replace the other, and contend that both are useful. First of all, if I were looking for a way to align stack children to a baseline I would not immediately think to use layout insets. Secondly, the baseline may not be where you'd want to measure vertical spacing. Finally, I've already implemented ASCenterLayout and ASInsetLayout to honor the layoutInsets so it could be something that is valid for more than just a stack spec (where as baseline would not be).

I agree with @appleguy that we don't want to scare people off by making ASLayoutable too large, but I also think that once people start using stack specs the extra options will be appreciated. So perhaps making an ASStackLayoutable protocol to separate all these options is the right solution. Would we end up changing all classes that implement ASLayoutable then implement ASStackLayoutable? Unless there is an obvious layout spec that should never be a child of a stack layout?

Let me know and I'll give these changes a go and get an updated PR up soon! Thanks for the input!!
",rcancro,appleguy
611,2015-08-21 17:30:03,"@nguyenhuy @appleguy thoughts?
",rcancro,nguyenhuy
611,2015-08-21 17:30:03,"@nguyenhuy @appleguy thoughts?
",rcancro,appleguy
611,2015-08-22 04:08:17,"Thanks @rcancro!  Lots of great patches recently.  I will review this one over the weekend, most likely tomorrow.  Interested in @nguyenhuy's thoughts too, particularly because I'm not as expert in this code as either of you :).
",appleguy,nguyenhuy
611,2015-08-22 04:08:17,"Thanks @rcancro!  Lots of great patches recently.  I will review this one over the weekend, most likely tomorrow.  Interested in @nguyenhuy's thoughts too, particularly because I'm not as expert in this code as either of you :).
",appleguy,rcancro
611,2015-08-24 21:25:56,"Damn, there is a ton of work here.  Thanks so much for the considerate attention to detail, @rcancro!

We may revisit some specifics on how the ASLayoutable protocol is handled, but these can be done in the next couple weeks leading up to the 2.0 announcement.
",appleguy,rcancro
611,2015-10-22 23:14:51,"@rcancro I love the screenshots and baseline alignment is very exciting for a nicer looking UI. Can you post some sample code of how to apply? For example I have a button with a label next to it - I would like to align these two nodes at center line - code below:



Would I be replacing ASStackLayoutSpec  with ASBaseline and apply the alignment desired?
",robmontesinos,rcancro
610,2015-08-16 03:34:40,"@SRandazzo thank you!  This is a great find, and the fix is very well done.  It's awesome to see test coverage continue to increase around the framework, and it wouldn't be happening without changes like this.

I'm happy to merge this as-is, but if you have 2 minutes to upload the change with .length called directly on the attributed string, that would be a little better.
",appleguy,SRandazzo
610,2015-08-16 22:29:07,"@appleguy Thanks for taking a look! I agree with your suggestion to use the attributedString's length directly. It did give me a chance to read through the docs which says that length returns the underlying string object's length! But of course that's Apple's implementation details, so using the attributedString's length makes more sense imo :+1: 

thanks again!
",SRandazzo,appleguy
610,2015-08-18 00:06:01,"Success.  Thanks again, glad to have you in the community @SRandazzo :).  Don't hesitate to let me know if I can help in any way.
",appleguy,SRandazzo
606,2015-08-13 05:43:57,"@SRandazzo — this is a curious finding.  I would expect this in a way, in that the height is presumably determined by font size (you could test this by changing the font size.  However, that seems more like an implementation detail than really the correct behavior for this case.

It would be an easy thing to fix, particularly for a nil string (even a @"""" empty string might be more plausibly nonzero height, but that's harder to decide!)  Could you run a quick test with UILabel and see what its sizeToFit does with a nil string, with an explicit font set?  I assume it is 0, 0.

Feel free to submit a diff to check for a zero-length string (which would catch nil, too) in the size/layout methods of ASTextNode.  If you don't have a chance to do this, that's fine; I'll make sure it gets into an upcoming release.
",appleguy,SRandazzo
606,2015-08-13 18:46:14,"@appleguy Thanks!

 Threw this into a playground to test what `sizeToFit` does on a label with an empty string text

The result is that calling sizeToFit on a UILabel with an empty strings results in CGSizeZero

<img width=""870"" alt=""screen shot 2015-08-13 at 2 44 59 pm"" src=""https://cloud.githubusercontent.com/assets/307819/9258510/f106a7f0-41c9-11e5-8add-497e8370af2d.png"">
",SRandazzo,appleguy
605,2015-08-29 19:57:03,"@rcancro any other changes going to happen here?  Please close if we're wrapped up.  Thank you for doing this!
",appleguy,rcancro
600,2015-08-10 08:08:42,"@appleguy thank you for your detail reply, it helps me a lot to better understand ASDK.
 when using  reloadData of ASTableView, it does scroll to the top of the screen, but i have fixed it by using insertRowsAtIndexPaths when i need to load more nodes, it comes very smoothly, meantime the memory cost comes down, so it improves the user performance a lot. 
i will try what you mentioned and give my report. 
One more question, when i reloadData of the ASTableView, will all the nodes be created again without reuse? I think so. for this reason, it scrolls to the top of the screen and cost more memory. so i have tried to reuse some nodes when i reloadData with a dictionary, which i think can be improve the performance. But something wrong happened, when using the nodes form cache(the dictionary), Assertion failure in ASDisplayNodeAssertThreadAffinity(self), in the method of - (CGSize)__measure:(CGSize)constrainedSize. I have no idea about that. can you give me some advice to reuse the nodes? Of course,maybe it does not make any sense.  thank you.

I have studied ASDK for a long time, and i learned a lot from your great work. I will continue follow your work, i hope i can make a little contribution to it, haha.
thank you again. 
",nannanIT,appleguy
600,2015-08-10 15:40:25,"Welcome to the community, @nannanIT! I'm quite familiar with the codebase and hopefully can help @appleguy to answer your great question. 

In short, yes, reloadData discards everything and load new nodes, without reusing. But hold on, let me explain and show you some alternatives.

Besides reload, we have introduced ""relayout"". A relayout means there are changes in the layout of one or more nodes, let's keep those nodes and update their layouts. Relayout is done on main thread, but it's ok due to its infrequent usage. 

Whenever you want to do a ""reload"", you actually want to do 1 of the following things:
- Update layout of a specific node: Caused by a change in the node itself while its constrained size is unchanged. For example, its data changed or user taps it. You can easily trigger a relayout on the node by simply calling -setNeedsLayout. If the relayout results in a different size, an empty batch editing transaction must be triggered to animate to new sizes. Examples can be found [here](https://github.com/facebook/AsyncDisplayKit/blob/master/examples/Kittens/Sample/KittenNode.mm#L193) and [here](https://github.com/facebook/AsyncDisplayKit/blob/master/examples/Kittens/Sample/ViewController.m#L117).
- Update layout of all nodes: Caused by different constrained size for each and every node, for example after orientation change or a table view entering editing mode. ASDK can handle these cases automatically. The API (-relayoutAllRows) is private for now, but after #599, I think it's a good idea to make it public.
- Reload one or some nodes: Caused by total invalidation of the nodes, for example you want to show a completely new UI. This can be done via -reloadSections, -reloadRowsAtIndexPath or -reloadItemsAtIndexPath.
- Reload data (a.k.a reload everything!): Caused by any other reasons and you absolutely need to destroy existing nodes and create new ones.

UIKit's reloadData is relatively cheap and we tend to overuse it -- reloadData all the time! But ASDK's version is substantially more expensive. So when we are about to call reloadData, we should ask ourselves: Do I really need it? Most of the time, instead of reloadData, what you actually need is insert, delete, move, relayout or maybe a combination of them. reloadData is the last resort :)
",nguyenhuy,appleguy
600,2015-08-11 06:55:05,"@nguyenhuy Thank you very much, your explanation is really helpful. I did not realize the expensive to use reloadData before, it's the last resort...=.=
",nannanIT,nguyenhuy
600,2015-08-11 07:21:15,"@appleguy @nguyenhuy What's more, do you think the ""automaticallyAdjustsContentOffset"" is necessary to be added in ASTableView, with which may resolve the problem -- ""the tableview scrolls to the top of the screen every time it reloadData"", I am not sure but UIKits UITableView does. thank you.
",nannanIT,nguyenhuy
600,2015-08-11 07:21:15,"@appleguy @nguyenhuy What's more, do you think the ""automaticallyAdjustsContentOffset"" is necessary to be added in ASTableView, with which may resolve the problem -- ""the tableview scrolls to the top of the screen every time it reloadData"", I am not sure but UIKits UITableView does. thank you.
",nannanIT,appleguy
599,2015-08-09 01:44:46,"@nguyenhuy this one has merge conflicts, so If you can fix those while addressing the feedback, we're good to land.  Great feature to have — I know a few people (including at Pinterest) who have wanted this!
",appleguy,nguyenhuy
599,2015-08-09 21:05:05,"@appleguy Fixed conflicts and things according to your feedback. This and #601 whichever lands first will cause new conflicts in the other. Must be easy to fix though. 
",nguyenhuy,appleguy
596,2015-08-04 19:06:02,"Thanks a lot, @levi — this is a nice improvement!  I'm also excited to close the other PR :-D
",appleguy,levi
596,2015-08-05 06:24:21,"I promised to take over #352 but haven't had a chance to do it. Thanks for actually doing it, @levi :)
",nguyenhuy,levi
596,2015-08-05 21:57:19,"NP, @nguyenhuy. Thanks for catching that issue with the delegate definition.
",levi,nguyenhuy
595,2015-08-09 01:26:33,"This is great, @nguyenhuy.  I would like you to make the changes requested here, but will merge the diff now so it is easier for you to continue your development and integrate the changes in any further diff.
",appleguy,nguyenhuy
594,2015-08-03 03:28:19,"@appleguy I've push a new commit. Please do another round.
",nguyenhuy,appleguy
593,2015-08-02 20:47:04,"Thanks @shannonma!  Great to see you here, and some nice fixes for the community.

I'm ready to merge this, but need a quick change:
- Leave out the Cocoapod version update.  We had some chronic build failures with version 38, which also broke the internal Pinterest build system.  We're going to wait a while before updating it.
- Thoughts on overriding -setNeedsDisplay on ASTextNode to do the block helper method, rather than wrapping each call to it?  The downside I see here is that it changes the semantics of another class calling -setNeedsDisplay, which could be pretty bad.  I'm leaning towards your solution as-implemented, but curious what you think.

Hopefully, thread affinity will be eliminated before too long!  That could well take until next year, though, so these are important changes.
",appleguy,shannonma
593,2015-08-09 01:54:56,"Thanks again, @shannonma !
",appleguy,shannonma
591,2015-08-04 06:37:34,"@marmelroy thanks for this!
",nickvelloff,marmelroy
591,2015-08-04 07:00:40,"No worries. 

As @appleguy suggested, an example that uses the framework will help keep the target working in the future. I will write one a little later this week (using Carthage too so that this use case is fully covered).
",marmelroy,appleguy
590,2015-07-31 05:02:46,"Thanks @rcancro !  This is indeed very useful, and now quite essential in the world of ASLayoutSpec. @nguyenhuy to also review and consider — I think it is likely that we should push this down to ASDisplayNode, next to the flexBasis and other properties.
",appleguy,rcancro
590,2015-07-31 07:17:06,"Thanks for your contribution, @rcancro.

I agree with @appleguy that, in many cases, this new property is not only very useful for network image nodes but also for display nodes. flexBasis and other properties are declared in `ASLayoutable.h` which is conformed by both ASDisplayNode and layout specs. If I understand ""next to the flexBassis and other properties"" correctly, I think we should **not** push it down to `ASLayoutable.h`. Because the main, if not the only, reason for the existence of each layout spec is that the spec can measure its sized based on its unique layout logic and its children. So layout specs should not have a predefined size. We should push this down to ASDisplayNode, but **no** further.

Also, since calculated size must be within the given constrained size range, I think there are ~~2 things~~ 1 thing we must consider:
- Name this new property according to this rule. To me, ""expected"" implies too much certainty. Perhaps ""default"", ""suggested"" and ""proposed"" are better?
- ~~In -calculateSizeThatFits:, the predefined size should be clamped with the constrained size range. This will help to enforce the rule in some edge cases (although it will introduce a small run-time overhead because layout specs also clamp the calculated size of each child)~~.
",nguyenhuy,rcancro
590,2015-07-31 07:17:06,"Thanks for your contribution, @rcancro.

I agree with @appleguy that, in many cases, this new property is not only very useful for network image nodes but also for display nodes. flexBasis and other properties are declared in `ASLayoutable.h` which is conformed by both ASDisplayNode and layout specs. If I understand ""next to the flexBassis and other properties"" correctly, I think we should **not** push it down to `ASLayoutable.h`. Because the main, if not the only, reason for the existence of each layout spec is that the spec can measure its sized based on its unique layout logic and its children. So layout specs should not have a predefined size. We should push this down to ASDisplayNode, but **no** further.

Also, since calculated size must be within the given constrained size range, I think there are ~~2 things~~ 1 thing we must consider:
- Name this new property according to this rule. To me, ""expected"" implies too much certainty. Perhaps ""default"", ""suggested"" and ""proposed"" are better?
- ~~In -calculateSizeThatFits:, the predefined size should be clamped with the constrained size range. This will help to enforce the rule in some edge cases (although it will introduce a small run-time overhead because layout specs also clamp the calculated size of each child)~~.
",nguyenhuy,appleguy
590,2015-08-03 00:22:40,"@nguyenhuy very good point, I agree this does not belong in ASLayoutable and forgot that flexBasis and the related properties were in that protocol.

Indeed it probably makes more sense to have a property of this nature exposed directly on ASDisplayNode.  Presumably it should go near -calculatedSize / -calculatedLayout and/or -constrainedSize

@rcancro feel free to update this diff with that direction when you have time.  As far as naming, I'm not too sure yet.  I think expectedSize is OK for now but we may make a change just before landing once we see how it comes together.  This is an important API change for the framework so we'd better get it right :)

@nguyenhuy, is there any reason this property should be an ASSizeRange instead of just a CGSize?  I think a CGSize is probably best, but haven't thought about it enough to be sure.
",appleguy,nguyenhuy
590,2015-08-03 00:22:40,"@nguyenhuy very good point, I agree this does not belong in ASLayoutable and forgot that flexBasis and the related properties were in that protocol.

Indeed it probably makes more sense to have a property of this nature exposed directly on ASDisplayNode.  Presumably it should go near -calculatedSize / -calculatedLayout and/or -constrainedSize

@rcancro feel free to update this diff with that direction when you have time.  As far as naming, I'm not too sure yet.  I think expectedSize is OK for now but we may make a change just before landing once we see how it comes together.  This is an important API change for the framework so we'd better get it right :)

@nguyenhuy, is there any reason this property should be an ASSizeRange instead of just a CGSize?  I think a CGSize is probably best, but haven't thought about it enough to be sure.
",appleguy,rcancro
590,2015-08-05 05:14:01,"@rcancro Actually ASStaticLayoutSpec does supports [a requested size](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/Layout/ASStaticLayoutSpec.h#L26). And it's not a simple CGSize but rather a powerful [ASRelativeSizeRange](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/Layout/ASRelativeSize.h#L24). But again, it takes a bit of time to figure out how to use such power :)  

In KittenNode, a working static spec that wraps the image node and returns an exact size looks like this:



Well, not exactly ""working"". I've just found a bug in the spec itself that prevents it from wrapping its content. A hot fix is commenting out [this line](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/Layout/ASStaticLayoutSpec.mm#L77) and [this line](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/Layout/ASStaticLayoutSpec.mm#L84). I will try to figure out how to best fix this bug later on. In fact, this layout spec is the only one that isn't well tested. So if we decide to keep it, tests will be written :)
",nguyenhuy,rcancro
590,2015-08-05 06:11:49,"@nguyenhuy @rcancro haha, funny, I have not looked at all of the latest API names for constraints-based UIKit auto layout...but they may provide some great names to blatantly copy!  Such as ""intrinsicContentSize"": https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/index.html#//apple_ref/occ/instm/UIView/intrinsicContentSize

Let's have some of these names in mind, particularly heading into the 2.0 final version, because we can still change any current API names.  We want to choose names as intuitive as possible to people, and switchers from auto layout to box model will be a pretty common case (I've had a lot of developer friends run into the performance problems of UIKit auto layout, but not want to completely give it up without a substitute — this will provide a nice opportunity for them to get both performance and ease of programming).
",appleguy,nguyenhuy
590,2015-08-05 06:11:49,"@nguyenhuy @rcancro haha, funny, I have not looked at all of the latest API names for constraints-based UIKit auto layout...but they may provide some great names to blatantly copy!  Such as ""intrinsicContentSize"": https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/index.html#//apple_ref/occ/instm/UIView/intrinsicContentSize

Let's have some of these names in mind, particularly heading into the 2.0 final version, because we can still change any current API names.  We want to choose names as intuitive as possible to people, and switchers from auto layout to box model will be a pretty common case (I've had a lot of developer friends run into the performance problems of UIKit auto layout, but not want to completely give it up without a substitute — this will provide a nice opportunity for them to get both performance and ease of programming).
",appleguy,rcancro
590,2015-08-05 21:05:08,"Oh I like preferredFrameSize. I'll make that update.

@nguyenhuy I meant that it could be useful for us to create an ASStackNode that had an interface like:



A user could take advantage of this without ever writing any code using `ASStackLayoutSpec`. 
",rcancro,nguyenhuy
590,2015-08-07 08:46:39,"I also prefer ""preferredFrameSize"" :)

@rcancro Sorry for misunderstanding your idea. Here is my 2 cents on the drawbacks of an ASStackNode:
1. It has all the unnecessary properties of ASDisplayNode, most noticeably the backing view or layer.
2. Instead of constructing an ASStack**LayoutSpec**, the root node now has an ASStackNode subnode, which in turn holds some subnodes. For example, KittenNode node has an ASStackNode that has an image and a text node. So, 1 more level added to the node tree (and probably the calculated ASLayout tree).
3. I'm not really sure, but I think the root node still has to be a custom node to correctly describes its layout.
4. Due to above reasons, it would be hard (at least for me) to figure out how to correctly construct the nodes. I mean I want image and text nodes to be stacked horizontally within the KittenNode, but I can't add them directly to KittenNode. Instead, I have to add those nodes to an ASStackNode, then add that stack node to KittenNode. Then, I have to set correct stack properties to the stack node (although they actually describe how those subnodes should be laid out within KittenNode). Oh, and need to override layout method(s) of KittenNode.
5. I think writing layout specs is not that difficult, although it can be because I'm pretty familiar with it.

Anyway, I admit that I might have a bit bias against the idea of having layout ASDisplayNodes - display nodes that are purely responsible for layout. So, another pair of eyes is very helpful :) And code talks, so if you have the full implementation of ASStackNode with sample usage(s), I would love to read!
",nguyenhuy,rcancro
590,2015-08-10 01:34:58,"@appleguy @nguyenhuy How does the update look?
",rcancro,nguyenhuy
590,2015-08-10 01:34:58,"@appleguy @nguyenhuy How does the update look?
",rcancro,appleguy
588,2015-08-03 12:27:35,"@appleguy Thanks frou your reply. No I didn't notice any issues prior to 1.2.3. I reverted to 1.2.2 for the moment.

I do manage to add network content to the supplementary view under 1.2.2.

Please note we don't use a `ASNode` for these supplementary views but a classic `UICollectionReusableView`
",wieseljonas,appleguy
588,2015-08-04 19:40:24,"@wieseljonas thanks for the input.  We're planning to use regular reusable views for supplementary views.  @levi offered to look at this soon — whether he can do it or I do, 1.2.4 should include it :).  I think 1.2.2 for now is a reasonable workaround.
",appleguy,levi
588,2015-09-16 18:26:03,"@appleguy It looks like this is still not going to be supported in this next beta? Is that correct?
",tettoffensive,appleguy
588,2015-10-22 02:02:39,"Thanks @levi !  The amount of effort that went into that iteration is genuinely an inspirational example of OSS being successful.  I'm going to call it out in a TechCrunch interview this Friday as a leading indication of the community momentum that has been brought to this project by caring and generous developers like yourself.

@wieseljonas, @tettoffensive likewise, I appreciate you engaging with the community and look forward to hearing about how the Supplementary support works.  Please open new Issues if you find even a small bug.
",appleguy,levi
588,2015-10-22 09:18:06,"Thank you guys I will test it right now! Great job @levi 
",wieseljonas,levi
588,2015-10-23 02:11:12,"Thanks for diving in with the fix!  @levi, can you think of any way to add our own assertion or exception that delivers this advice, as it would be an easy thing to miss when adopting ASCollectionView using a layout that has supplementary elements?

Sent from my iPhone

> On Oct 22, 2015, at 2:06 PM, Levi McCallum notifications@github.com wrote:
> 
> Jonas, you're correct in that you have to call collectionView.registerSupplementaryNodeOfKind(UICollectionElementKindSectionHeader). This will register a backing reusable view that ASCollectionView will use to insert the ASCellNodes you provide in the data source method collectionView:nodeForSupplementaryElementOfKind:atIndexPath:. This way you'll get all the added benefits of off-main queue rendering that collection view items have had for a while.
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,levi
588,2015-11-12 18:51:44,"@appleguy Sorry for my late reply. Thanks for the thorough answer. I still haven't decided how to best manage my use case. My supplementaryView is complexe and need a lot of updating after being displayed and I'm not sure having a `ASCellNode` is the best option. What's your opinion on this?
",wieseljonas,appleguy
587,2015-09-06 19:20:29,"I've been thinking about #638 for the last few days and eventually came up with an idea similar to this one. So thanks @eanagel, @levi and @connor for bringing this up.

Regarding the implementation of this new method, I suspect that it would look similar to (if not exactly like) what I've done in -relayoutAllRows [here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/Details/ASDataController.mm#L562), of course, with a parameterized block. Once we have that new method, -relayoutAllRows will simply call it with its own block.

With that, I guess the main issue left is the naming (assuming there is no objection against this new method).
",nguyenhuy,eanagel
581,2015-07-25 05:51:38,"@frankenthumbs thanks for submitting this!  Echoing @eanagel comments — could you check out the latest master, which includes his changes merged only a couple days ago?  It seems likely that you might not have seen those changes when developing this one.

I am going to be focusing some time on ASDK this weekend and will think more carefully about this in the next two days.  I'm certainly in favor of a simplified API, so in some sense believe we should rely on begin/endUpdates wrapping these calls whenever the developer needs the callback.  On the other hand, having the callback is one way to remind developers of the mental model of using ASTableView and ASCollectionView—the edit changes may not show up onscreen synchronously, e.g. the user could scroll around a bit instead of their interaction being blocked until the edit is processed.  Even for developers who pass NULL for the block, perhaps in some cases that reminder would be useful...
",appleguy,eanagel
581,2015-07-25 06:53:55,"you guys are right. i missed @eanagel endUpdates merge... overriding performBatchUpdates was also a great call imo. using UICollectionView's was what caused me to create this PR.
",frankenthumbs,eanagel
577,2016-03-11 05:40:03,"@eanagel - thank you for all your contributions to ASDK!
",appleguy,eanagel
574,2015-07-20 00:36:29,"@appleguy The issue is ASCollectionView won't keep its scroll position after calling reloadItemsAtIndexPaths to reload the last item (no layout changed). It will scroll back to the item before the last one.

I guess the problem is caused by the current implementation: reloading nodes by deleting nodes then re-adding nodes.
",AgeOfMobile,appleguy
574,2015-07-20 04:21:58,"@appleguy : Thanks for your helping. I recorded a short video of my current app. Please visit the video:
- AsyncDisplayKit 1.2.2 : https://www.youtube.com/watch?v=S3LmPKHYmKo

Thanks a lot for your helping!
",tuantavan,appleguy
574,2015-07-20 14:28:45,"@appleguy Thanks for mentioning my library :+1: Flipping the entire table/collection view is a very interesting and helpful tip! In my current chat apps, I do have hard time writing UI code to accomplish a (relatively) well-behaved messages list (and so does [JSQMessagesViewController](https://github.com/jessesquires/JSQMessagesViewController/blob/develop/JSQMessagesViewController/Controllers/JSQMessagesViewController.m#L359)). Although I took a hint about this trick from [SlackTextViewController](https://github.com/slackhq/SlackTextViewController#inverted-mode) (and I reckon Slack apps use it internally), I didn't realize its potential and thus, didn't employ it in AsyncMessagesViewController. Will definitely implement it when time permits :)

@tuantavan in my library, I use a completion block that will scroll the collection view to the bottom whenever a new message is inserted. I would do the same for reloads.

@AgeOfMobile I think the current approach to reload is fine, in the sense that a ""reload"" implies that the old node itself is invalid and should be replaced by a totally new node. If only the node's layout is invalid, what you need is a ""relayout"", and we are working on this feature :)
",nguyenhuy,appleguy
574,2015-07-21 05:55:28,"@nguyenhuy Thanks for your comments. For now, we fixed the problem by applying #564 fix of @eanagel, then manually maintain the contentOffset of ASCollectionView. 

Hope that @eanagel fixes (#575) pass all test cases and merged to the next release.
",AgeOfMobile,nguyenhuy
574,2015-07-21 07:23:46,"Finally, we fixed this problem by applying #564 , #575 .
@appleguy, @nguyenhuy , @eanagel , @AgeOfMobile : Thanks a lot for your helping!
",tuantavan,nguyenhuy
574,2015-07-21 07:23:46,"Finally, we fixed this problem by applying #564 , #575 .
@appleguy, @nguyenhuy , @eanagel , @AgeOfMobile : Thanks a lot for your helping!
",tuantavan,appleguy
571,2015-08-12 08:04:12,"@appleguy Sorry for late. I'm in the middle of vacation now :)
So it looks like this feature is broken on 1.2.3 version. I've prepared demo here:
https://github.com/mmiedlarz/ADKBrokenURLColorDemo

And about tintColor  - if you set it on textView, it will override all colors which you set on attributed string (see demo).

Cheers.
",mmiedlarz,appleguy
571,2015-09-23 08:20:56,"@appleguy I can't build Kittens example (I think that its not compatible with 1.2.3 version), 
but its reproduced in my demo ( https://github.com/mmiedlarz/ADKBrokenURLColorDemo ). 
TextNode just ignore color set by:



If I remove NSLinkAttributeName attriubte, ForegroundColor works fine.
",mmiedlarz,appleguy
571,2015-12-19 12:55:31,"@appleguy I updated TestProject to 1.9.3, and issue still existed. But I found, that if you use custom link attributes in NSAttributedString and ASTextNode, everything works fine (I changed in demo project too).
",mmiedlarz,appleguy
570,2015-10-20 07:04:32,"@appleguy ,I also encountered the same problem,  can I provide the codes to you?
",TernTuring,appleguy
569,2015-07-14 20:55:09,"@eanagel I think we discussed this one in person — this should not be necessary due to the boolean flag that is checked earlier in the method, correct?  In what scenario could the performSelector: be queued up multiple times?  Note that calling cancel and perform again incurs some additional cost, so it is net preferred if it can be avoided.
",appleguy,eanagel
563,2015-08-09 02:51:08,"@yxztj Just wanted to say that I saw this issue when you submitted it, and still intend to fix.  Sorry for the delay.  The placeholder fade-out feature was added by @rnystrom a while back, and hasn't gotten a lot of usage / testing yet.  That's not a good reason for it to have bugs, but suffice it to say that there are a few cool ways we could improve both the API and the implementation.

Right now I'm working on the display system, which is closely related to how placeholders are shown and removed.  Because it is still possible for a client to implement their own placeholder mechanics, I will have to prioritize this after the other display work, but it may well be possible to fix at the same time.

Thanks for trying out the framework, and let us know if you have any other issues or questions!
",appleguy,yxztj
563,2015-08-13 02:09:08,"@appleguy Thanks for the reply. The framework is working just awesome :)
Right now I'll add my own imageView(in ASDisplayNode initWithViewBlock) for custom placeholder logic. Couldn't wait to see the new version of ASDK.
",yxztj,appleguy
563,2016-06-21 20:13:33,"@hannahmbanana Can you look if #1786 will fix this issue
",maicki,hannahmbanana
563,2016-06-21 21:19:33,"@maicki:The placeholder sample does works with PR #1786. 
",hannahmbanana,maicki
557,2016-03-31 05:40:17,"@nguyenhuy - moving this to Ship. :)

The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,nguyenhuy
556,2016-03-25 20:03:05,"@nguyenhuy - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,nguyenhuy
555,2015-07-12 01:19:06,"@appleguy Conflict fixed.
",nguyenhuy,appleguy
554,2015-07-11 00:51:11,"Very cool, thanks @nguyenhuy !
",appleguy,nguyenhuy
550,2015-07-18 01:02:00,"Thanks for your improvement, @marmelroy!  Super close here, almost hit merge.  Last thing: please add some mechanism to alert developers accessing the text view before it is initialized.  I think this would be sufficient: ASDisplayNodeAssert(_textField != nil, @""ASEditableTextNode's text field has not been allocated yet — access it in -didLoad or after accessing the .view property instead"")

Since we now have the main thread assertion (very important), an even better solution would probably be to force creation of the view and text field at the access time of the property if it hasn't been created.  This would make the API more convenient to use where the editable node is being directly hosted, and in the case of a regular node hierarchy, if initialization is being performed off-main then the assertion would catch it.
",appleguy,marmelroy
550,2015-07-18 21:18:01,"@marmelroy thanks!  Rerunning the build to see if we can get a green one, then will merge.
",appleguy,marmelroy
550,2015-07-18 22:28:54,"Ok will do @appleguy

On Sat, Jul 18, 2015 at 2:17 PM, appleguy notifications@github.com
wrote:

> ## @markmark1 that seems like a question that isn't at all related to this PR...feel free to ask it in the Google Group or Facebook Group for discussion, though!  There are a lot more people watching those who might have advice.  It's not totally clear the effect you're going for, because redrawing text is pretty expensive and usually has discrete font sizes (at least integers) that wouldn't feel very natural to control with a continuous gesture like a pinch.  Even a slider might be a more understandable UI.  I could be misunderstanding your idea, though.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/facebook/AsyncDisplayKit/pull/550#issuecomment-122597540
",markmark1,appleguy
550,2015-07-18 22:34:10,"@appleguy can you please let me know what the links to the facebook group and google group

On Sat, Jul 18, 2015 at 2:17 PM, appleguy notifications@github.com
wrote:

> ## @markmark1 that seems like a question that isn't at all related to this PR...feel free to ask it in the Google Group or Facebook Group for discussion, though!  There are a lot more people watching those who might have advice.  It's not totally clear the effect you're going for, because redrawing text is pretty expensive and usually has discrete font sizes (at least integers) that wouldn't feel very natural to control with a continuous gesture like a pinch.  Even a slider might be a more understandable UI.  I could be misunderstanding your idea, though.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/facebook/AsyncDisplayKit/pull/550#issuecomment-122597540
",markmark1,appleguy
550,2015-07-22 13:09:48,"@appleguy - I pushed a simpler and cleaner implementation this morning. Travis CI stalls during building but doesn't look like it's related to this pull request.  
",marmelroy,appleguy
550,2015-07-27 05:41:20,"@appleguy looks like Travis issues were fixed!
",marmelroy,appleguy
550,2015-07-31 05:04:27,"@marmelroy this change is officially badass-ified.  Thank you for surfacing the need.  We actually also added returnKeyType here as a direct passthrough property, FWIW.
",appleguy,marmelroy
548,2015-07-18 01:08:27,"@eanagel Thanks for all the updates here.  It's of material service to the community, and indeed these fixes will be directly valuable to the ASDK adoption underway at Pinterest — that allows me to spend more of my time on new features that I think will be valuable to your team :).

After a busy week unable to focus on the dynamics to this patch (particularly as it relates to the bug in my testing code and resulting problem cases), I'm now ramping up to ensure we get your diffs landed this weekend.  Appreciate your patience as I catch up.

Could you rebase the diff?  Any remaining issues or tricky areas you want to call out, besides the animation value pass-through?
",appleguy,eanagel
546,2015-11-28 23:39:10,"@JonasGessner @nickvelloff It's been some time now, and we've properly integrated Carthage support (along with the original Cocoapods, of course).  This is in fact tested on every build so that we can no longer forget to add new files to the framework target.

I am ready and willing to merge any proposed project file changes that will better support directly importing the project or manually building the framework for developers who prefer this approach, so if you find this is still an issue with the latest 1.9.1 or master, feel free to put up a PR!
",appleguy,nickvelloff
546,2015-11-29 20:28:02,"Thanks @appleguy!
Cc @paulyoung 
",nickvelloff,appleguy
546,2015-11-30 11:28:01,"The only warnings I'm currently aware of are:
- for `AsyncDisplayKit.xcodeproj` to update to recommended settings
- a warning related to the C++ ""header pollution"" issue described in https://github.com/facebook/AsyncDisplayKit/pull/632#issuecomment-140858968 which @appleguy let @rcancro know about

This is using an older release of AsyncDisplayKit, so these may have been addressed since then.

I'll try updating and report back soon.
",paulyoung,appleguy
545,2015-07-08 14:54:29,"Thank you for working on this, @ryanfitz. This is definitely an embarrassing mistake of mine! I do agree with you that layoutableObject should not be ""strong"" and second this PR :+1:
",nguyenhuy,ryanfitz
543,2015-07-08 20:50:17,"@appleguy I don't like the workaround, may be you can find another solution? But this is the only way, which I know for now. It looks like Apple bug, and I haven't checked it on iOS 7. It means that the workaround theoretically can be used only for iOS 8, or all iOS older than 7. I need to investigate it. I'll do it in nearest days, and now you have possibility to look at it also.
",victormayorov,appleguy
542,2015-07-07 17:15:22,"Thank you @grigaci !  As you can tell, I was in a rush writing this and threw it into a file after having developed it in-situation for ASFlowLayoutController.  Nice to have this change.
",appleguy,grigaci
541,2015-07-08 10:23:51,"@appleguy when gets the first beta released?
",grigaci,appleguy
541,2015-07-08 20:00:08,"@grigaci there are a couple small issues being found with the box model layout support, so I'm thinking we should wait until about mid next-week for the developers using master to try out the new features and flag / fix any big problems.  Then we can push out ASDK 2.0 Beta 1.  However, it's not all that important to have a ""Beta"" release as opposed to just using master; one of the main reasons is as an opportunity to post about the features an goals of 2.0 in discussion forums, and get more people looking at it.  Since you already know, feel free to continue using master to benefit from the latest fixes and we should have more folks joining us next week when the announcement happens.
",appleguy,grigaci
540,2015-07-07 17:23:39,"@ryanfitz thanks for the issue; I think it may be a duplicate, but I'll leave it open until I confirm.  In any case, this is actually expected behavior for the current implementation.  It's certainly an area that could be improved, but there's an important factor that make it less critical to change: AsyncDisplayKit is particularly useful for apps with variable row heights (a major indication that the content reaches a higher level of complexity where layout and rendering should really be asynchronous).  For those apps, before ASDK, UIKit would ask for the row / item heights for all items in the datasource anyway, and so they are likely already expecting to require a system that stages in the data so that this blocking doesn't happen all at once.

For the apps that previously did synchronous text layout for everything up-front, synchronously creating the cell nodes is typically less CPU time, as the layout then occurs asynchronously after that.

The use case that this really hurts are for /fixed-height/ tables with large local databases.  This sounds like the case you have?  I genuinely care about making sure the framework handles this elegantly, and it is absolutely possible with some additional effort.

Feel free to pass on any there details about your use case and workarounds you might try.  How tough would it be to stage in the data source by using the batch loading callbacks?  (check out where ASBatchContext is used).  The reason this is tricky is that we still need to trigger data fetching & rendering callbacks before cells come onscreen, even in the case that they are all the same height, and ASRangeController / ASDataController would need changes to be able to handle doing this while limiting cell allocation.

Other tasks may refer to this concept as the ""allocation range"".
",appleguy,ryanfitz
540,2015-07-07 20:16:00,"@appleguy thanks for the helpful info. The current implementation makes sense. My use case involves rows that can vary greatly in height, so ASDK is a huge improvement in handling different sized rows compared to to UIKits. I imagine its loading all nodes on background threads, calculating sizes and then loads the data into the backing ui table / collection view so it can do as little on the main thread as possible.

For some more info on my use case, I have different sized rows with complex cells that have lots of data and most importantly contains several unique images per row. As a user scrolls down the screen, more data is loaded off the network and then rows are getting inserted / removed / moved (not doing full reloads). 

I'm running into a two different memory related crashes. As a user moves around the app, images are getting downloaded off the network (using `ASMultiplexImageNode` and `ASNetworkImageNode`) and then stored as UIImage's. As a user scrolls away from these cells the images are still in memory, as the tope level `ASCellNodes` are not being deallocated. I eventually get a crash because of too much memory usage. The second issue is very similar, but is triggered when the next page of data is loaded off the network. As a user scrolls, I fetch the next 25 items of data and then insert these 25 rows into the tableview. What happens is even if current memory usage is very low, these 25 rows are getting loaded all at once, memory usage spikes and apple force closes the app because of a large spike in memory usage.

I believe I can work around these issues with a smarter implementation of my `ASCellNode`. I wanted to make sure that the current implementation of loading all cells into memory was expected, before I started diving into improving my cell nodes. 

I'll leave this issue open, but feel free to close it out. Thanks again for all the help
",ryanfitz,appleguy
540,2015-07-08 06:25:50,"@appleguy I can create another issue for this, but I'm seeing `ASDisplayNodes` are getting retained indefinitely once measure is called on a node. I've been able to replicate this in both objective-c and swift. You can replicate it by allocating an `ASDisplayNode` call measure on it and then nil out the node. Dealloc will never be called.




",ryanfitz,appleguy
540,2015-07-08 20:02:30,"Killer find, thank you @ryanfitz!  I think there may still be some retain cycles lurking as there has not been sufficient profiling work done on ASTableView and ASCollectionView (components written entirely for OSS, not originally used for large scale deployment in Facebook apps like the rest of ASDK has been).  I fixed an important one related to placeholderImage last week, but don't hesitate to report any other issues you detect (even if you don't have time to submit a PR).
",appleguy,ryanfitz
540,2015-07-08 20:06:20,"@ryanfitz reading your note, definitely test again using the latest version (either 1.2.2 or master) and check that -clearContents is being called on all of your ASNetworkImageNodes and ASMultiplexImageNodes as they fall outside of the working range.  You might also look to modify the .rangeTuningParameters for your use case, particularly for an image-heavy app running on older devices (a smaller render range could be important for the low-memory devices, although this increases the risk of seeing placeholders).  In particular you might want to cut down on the ""trailing"" range so things are deallocated more quickly.  Take a look at how ASRangeHandlerRender is implemented / used to understand this bit and please let me know right away if it's not working correctly for you, as this would be one of the issues I'd prioritize for this coming weekend.  I believe it should be working correctly on the latest version.
",appleguy,ryanfitz
540,2015-07-08 20:26:58,"@appleguy thanks for the info. I'll try out those suggestions shortly and let you know if I run into any issues. As I'm diving more into the implementation of the different components of ASDK I'm pretty confident I can get things working well for my use case.  
",ryanfitz,appleguy
540,2015-07-09 21:02:23,"@appleguy Ive managed to get my app working really nicely with your suggestions and the recent changes on master. I sent one more pull request #551 which greatly reduces memory usage when using multiplex image nodes in table / collection views. I'm using sticky header nodes in my app, I had a really poor solution for this previously, but after diving into the internals of ASDK, I've managed to come up with a solution similar to how ASDataController loads, renders and then clears out nodes as it comes in and out of the rendering range. 

With these few changes to my app memory usage is staying low and performance high!

Thanks again for all the help and all the great work you (and everyone else) have done with ASDK. My app's experience wouldn't be possibly without this lib.
",ryanfitz,appleguy
540,2015-08-12 10:25:57,"@ryanfitz Do you mind to give more details on your  ASDataController like solution ? Some sample code is really appreciated. 
",huchunyu,ryanfitz
540,2015-08-14 02:06:20,"@ryanfitz  Thanks a lot. I'll take a look. Appreciate your help.
",huchunyu,ryanfitz
540,2016-03-11 06:14:34,"@ryanfitz - thanks for all of your contributions to ASDK! I hope you are still using (and loving!) ASDK. :)
",appleguy,ryanfitz
537,2015-10-08 09:26:42,"@appleguy I have been working on my current project with RAC extensively. Being AsyncDisplayKit a library with performance/speed in mind, RAC's overhead could potentially jeopardise that. I guess for bits that are not performance sensitive it could perfectly work. 

The main advantage I can see from using something like RAC, would be a more declarative API, that could be indeed interesting. I had this idea for a while, and was [implemented successfully by others](http://blog.scottlogic.com/2014/05/11/reactivecocoa-tableview-binding.html), would be a declarative way of implementing an `UITableView`'s dataSource delegate methods.
",RuiAAPeres,appleguy
535,2015-07-02 03:11:34,"Thanks @eanagel!  I think this is a safe workaround in the short term for this unusual issue, which I'll dig into with priority after the most important ASDataController & layout architecture changes have landed smoothly.
",appleguy,eanagel
530,2015-07-02 05:21:38,"@SRandazzo Yes, this is a known issue and is a P0 / top priority for myself and a couple others.  I'm gunning to get through the work-week so I can finalize a fix to this issue on the weekend, if folks like @RCacheaux aren't able to fix it before I have the opportunity.  This is in fact the only thing holding up landing my other PR that overhauls ASDataController and substantially improves its robustness, such that it passes the rather rigorous ASTableViewStressTest :).

If you have any chance to debug this and submit a patch, go wild!  Not to worry, though, I hope to have a fix up by the end of Saturday.
",appleguy,SRandazzo
530,2015-07-05 04:11:11,"@SRandazzo — thanks again for reporting this, and I'm really honored to hear that the framework has been useful for you :).

Please do try again on the latest master, as I just landed a stack of extensive changes to this area.  I simply can't be certain if it resolves your particular issue, but I have good reason to believe it will, as my testing has not yet found a deadlock / livelock / crasher in this code.  That said, my testing is continuing; tomorrow I'll push the ASCollectionView test, and will improve the tests after the automatic layout (box model) diff lands.
",appleguy,SRandazzo
529,2015-06-29 22:38:59,"@nguyenhuy thanks for your thoughts — helpful!

Indeed this amounts to a first pass architectural improvement for the ASDataController aimed at 100% correctness first, even in the most extreme circumstances, with optimization scaling in later.

The visible-range-aware prioritization would be great; indeed we could adjust the size of the layoutGroups depending on, say, the size of the render range rather than a number determined only by a multiple of the CPU core count.

We should also implement the ability to not lay out all nodes in the data source, and notify UIKit (underlying UITableView / UICollectionView / even the ASRangeController) only of a subset of the total nodes in the asyncDataSource.  This would significantly reduce the number of nodes that are created and sized if an app has a fairly large local data source with hundreds of rows.  In a way, this would be like an ""allocation + layout range"" — similar in principle to the Render and Preload ranges.  However, it is conceptually different in that a node should not be available to enter any other ASRangeHandler until it has gotten past the allocation + layout step.  After thinking about this for a while I'm convinced that keeping this functionality in ASDataController is the right thing, not extending ASRangeController.  It is however possible that we would want to use or extend the idea of an ASRangeHandler, or even abstract parts of ASRangeController, for ASDataController to drive its decision and processing of which nodes to allocate and lay out.

I think there's a lot of impact to be had pursuing these increasingly sophisticated takes on ASDataController, and they are probably in the top 3 ""major projects"" that should be undertaken in the next 6 months for ASDK.
",appleguy,nguyenhuy
514,2015-06-26 20:18:50,"I'm going to take this diff even though I only 80% understand it, because I trust your work :).  I'll be working more in this code this weekend and want to make sure I don't conflict with this, and also that my testing includes the change so it can be more fully validated.

Thanks @eanagel for being one of the very few people in the world willing to dive into the really tough parts of AsyncDisplayKit and help improve the framework for everyone!
",appleguy,eanagel
512,2015-09-16 12:37:59,"@jaichaudhry thanks for reporting this with all the details :).  @nguyenhuy has finished a lot of work here, and the Kittens example now does relayout both on rotation and on tapping cells.  Please retry your use cases, and please do open a new issue if you experience any problems!
",appleguy,jaichaudhry
508,2015-06-24 22:45:05,"Awesome, thank you @victormayorov !
",appleguy,victormayorov
508,2015-07-01 18:43:40,"Hi @victormayorov / @appleguy 
It looks like your changes from commit 503b16f (Fixed crash on multiple -[ASTableView reloadData]. Implemented test.) - specifically the changes in ASRangeController.mm got reverted during the merge. Was that intentional or an accident? 
",annieso-ck,victormayorov
508,2015-07-01 18:43:40,"Hi @victormayorov / @appleguy 
It looks like your changes from commit 503b16f (Fixed crash on multiple -[ASTableView reloadData]. Implemented test.) - specifically the changes in ASRangeController.mm got reverted during the merge. Was that intentional or an accident? 
",annieso-ck,appleguy
506,2015-06-24 22:47:58,"Hmm, this conflicts with another PR I just merged.  Sorry I didn't see this one first.  Could you check that PR, and determine if this one is still necessary?  If it's necessary, update it so it merges cleanly and I will merge it for you promptly.  Thank you @paulyoung !
",appleguy,paulyoung
506,2015-06-26 11:25:38,"@appleguy I think you're referring to #507 which I hadn't seen.

I think this one is now only necessary if you'd prefer the consistent naming that comes with adding a brand new target.

I think there was some discussion in #449 which led to the target and/or product to being renamed part way through.
",paulyoung,appleguy
506,2015-06-26 22:38:05,"@appleguy done. Please review!
",paulyoung,appleguy
506,2015-06-27 08:33:04,"@appleguy how'd the build go?
",nickvelloff,appleguy
506,2015-06-29 12:32:22,"Thanks @appleguy!
",paulyoung,appleguy
506,2015-06-29 22:46:08,"Yup thanks @appleguy!
",nickvelloff,appleguy
502,2015-06-24 03:15:35,"@appleguy I understand and can resolve it by using another ASImageDownloaderProtocol implementation rather than using class itself. 

I found this problem when I try to create a ASCellNode which contains multiplex image display, and the ASImageDownloaderProtocol implemented on cell node, then cell node cannot be released due to strong reference loop.

It makes developers confuse since your sample project ""Multiplex"" using
_imageNode = [[ASMultiplexImageNode alloc] initWithCache:nil downloader:self];

and this situation will happen on Objective-C ARC mode or in Swift.
",samw723,appleguy
495,2015-06-22 00:32:29,"Thanks @hannahmbanana!  This definitely improves the readability of the code.  Looking at it myself, it was surprisingly unclear before that the reason for generating random sizes was essentially to trick the backend service into providing different images...because we show them at the same size anyway :)
",appleguy,hannahmbanana
491,2015-06-21 03:18:50,"Nice and clean — thanks @RCacheaux!
",appleguy,RCacheaux
490,2016-02-08 13:29:35,"@markmark1 the example you linked is not the same as what is recommended here as it creates a mask layer to produce the rounded corners. This is also a time consuming operation as is therefore not recommended. It would be a better choice from a performance perspective to redraw your view using something similar to what @nickvelloff suggested. Note that it doesn't work well if your view should update in any way as it will be statically rendered.
",macistador,nickvelloff
490,2016-02-16 14:49:20,"@nickvelloff If you have a non-transparent & unicolor background behind your photos, a dirty trick would be to have some kind of transparent resizable image used as a mask; of course this is depend on your different layouts and may not work. For even more flexibility you can imagine a sort of 9-patch system
",macistador,nickvelloff
490,2016-03-24 17:39:31,"@appleguy Any updates on this one?

`cornerRadius` is sort of important — especially when you want a round border to go around the image as well. This cannot be accomplished via `imageModificationBlock`, can it?
",fatuhoku,appleguy
489,2015-06-20 01:16:29,"@victormayorov tagging you in case that is needed to send a notification.  I will make sure we get this fix merged this weekend if I can get a reproduction case soon.  Thanks again!
",appleguy,victormayorov
489,2015-06-21 21:00:19,"@appleguy Looks like the test is not stable. You can try to run it multiple times. I've got exception:
Test Case '-[ASTableViewTests testReloadData]' started.
/Users/temp/Projects/VMASDK/AsyncDisplayKitTests/ASTableViewTests.m:121: error: -[ASTableViewTests testReloadData] : failed: caught ""NSRangeException"", ""**\* -[NSArray objectsAtIndexes:]: index 22 in index set beyond bounds for empty array""
(
    0   CoreFoundation                      0x0000000107500a75 **exceptionPreprocess + 165
    1   libobjc.A.dylib                     0x00000001058a3bb7 objc_exception_throw + 45
    2   CoreFoundation                      0x000000010744bca3 -[NSArray objectsAtIndexes:] + 979
    3   AsyncDisplayKitTests                0x0000000110e95980 __ASFindElementsInMultidimensionalArrayAtIndexPaths_block_invoke + 128
    4   AsyncDisplayKitTests                0x0000000110e94a3b _ZL52ASRecursivelyUpdateMultidimensionalArrayAtIndexPathsP14NSMutableArrayPK7NSArrayRmP11NSIndexPathmU13block_pointerFvS0_P10NSIndexSetmE + 1531
    5   AsyncDisplayKitTests                0x0000000110e9468a _ZL52ASRecursivelyUpdateMultidimensionalArrayAtIndexPathsP14NSMutableArrayPK7NSArrayRmP11NSIndexPathmU13block_pointerFvS0_P10NSIndexSetmE + 586
    6   AsyncDisplayKitTests                0x0000000110e955d3 ASFindElementsInMultidimensionalArrayAtIndexPaths + 675
    7   AsyncDisplayKitTests                0x0000000110e89440 -[ASDataController nodesAtIndexPaths:] + 496
    8   AsyncDisplayKitTests                0x0000000110e913b0 -[ASTableView rangeController:nodesAtIndexPaths:] + 96
    9   AsyncDisplayKitTests                0x0000000110f183be -[ASRangeController updateVisibleNodeIndexPaths] + 2494
    10  Foundation                          0x00000001054592e5 __NSFireDelayedPerform + 387
    11  CoreFoundation                      0x00000001074686c4 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION** + 20
    12  CoreFoundation                      0x0000000107468285 **CFRunLoopDoTimer + 1045
    13  CoreFoundation                      0x000000010742b59d __CFRunLoopRun + 1901
    14  CoreFoundation                      0x000000010742abc6 CFRunLoopRunSpecific + 470
    15  Foundation                          0x000000010545d0d2 -[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 275
    16  Foundation                          0x000000010549d881 -[NSRunLoop(NSRunLoop) runUntilDate:] + 78
    17  AsyncDisplayKitTests                0x0000000110e4d593 -[ASTableViewTests testReloadData] + 387
    18  CoreFoundation                      0x00000001073f85ec __invoking_** + 140
    19  CoreFoundation                      0x00000001073f8442 -[NSInvocation invoke] + 290
    20  XCTest                              0x00000001110510f7 -[XCTestCase invokeTest] + 253
    21  XCTest                              0x00000001110512f8 -[XCTestCase performTest:] + 150
    22  XCTest                              0x000000011105abf5 -[XCTest run] + 260
    23  XCTest                              0x000000011104fffb -[XCTestSuite performTest:] + 379
    24  XCTest                              0x000000011105abf5 -[XCTest run] + 260
    25  XCTest                              0x000000011104fffb -[XCTestSuite performTest:] + 379
    26  XCTest                              0x000000011105abf5 -[XCTest run] + 260
    27  XCTest                              0x000000011104fffb -[XCTestSuite performTest:] + 379
    28  XCTest                              0x000000011105abf5 -[XCTest run] + 260
    29  XCTest                              0x000000011104d0bc **25-[XCTestDriver _runSuite]_block_invoke + 56
    30  XCTest                              0x0000000111057ead -[XCTestObservationCenter _observeTestExecutionForBlock:] + 162
    31  XCTest                              0x000000011104cff0 -[XCTestDriver _runSuite] + 269
    32  XCTest                              0x000000011104da1d -[XCTestDriver _checkForTestManager] + 234
    33  XCTest                              0x000000011105daf0 +[XCTestProbe runTests:] + 182
    34  Foundation                          0x00000001054592e5 __NSFireDelayedPerform + 387
    35  CoreFoundation                      0x00000001074686c4 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION** + 20
    36  CoreFoundation                      0x0000000107468285 __CFRunLoopDoTimer + 1045
    37  CoreFoundation                      0x000000010742b59d __CFRunLoopRun + 1901
    38  CoreFoundation                      0x000000010742abc6 CFRunLoopRunSpecific + 470
    39  GraphicsServices                    0x00000001091f1a58 GSEventRunModal + 161
    40  UIKit                               0x0000000105ae1580 UIApplicationMain + 1282
    41  AsyncDisplayKitTestHost             0x0000000105387ef3 main + 115
    42  libdyld.dylib                       0x00000001081af145 start + 1
    43  ???                                 0x000000000000000a 0x0 + 10
)
Test Case '-[ASTableViewTests testReloadData]' failed (0.136 seconds).
",victormayorov,appleguy
489,2015-06-22 04:15:34,"OK, awesome.  I was able to create a test case that reproduces this nearly 100% of the time (I haven't hit a case where it didn't, but it does take variable periods of time — no more than 1-2 seconds on a Mac).  I also took some of your test implementation, which is much appreciated, and integrated it into my new PR from tonight's work on ASDataController.

I pushed to try to fix the serialization completely, but was unable to finish.  This thing is fairly complicated, as you have observed.  Nonetheless I did break off a part of the diff that is my work-in-progress (so the PR https://github.com/facebook/AsyncDisplayKit/pull/496 includes only the cleaned up portions).

Thanks both @victoria-chain and @victormayorov!  I am so glad to be close to a fix on this issue, and probably wouldn't have gotten momentum on starting it without your help.
",appleguy,victormayorov
487,2015-06-18 17:36:07,"@nguyenhuy I'll give that a shot! Also great work on the flexbox integration, it looks great.
",ajk198,nguyenhuy
487,2016-02-08 13:08:39,"Hi @nguyenhuy ! As nothing new popped-up, maybe this issue should be closed ?
",macistador,nguyenhuy
484,2015-06-22 04:15:43,"OK, awesome.  I was able to create a test case that reproduces this nearly 100% of the time (I haven't hit a case where it didn't, but it does take variable periods of time — no more than 1-2 seconds on a Mac).  I also took some of your test implementation, which is much appreciated, and integrated it into my new PR from tonight's work on ASDataController.

I pushed to try to fix the serialization completely, but was unable to finish.  This thing is fairly complicated, as you have observed.  Nonetheless I did break off a part of the diff that is my work-in-progress (so the PR https://github.com/facebook/AsyncDisplayKit/pull/496 includes only the cleaned up portions).

Thanks both @victoria-chain and @victormayorov!  I am so glad to be close to a fix on this issue, and probably wouldn't have gotten momentum on starting it without your help.
",appleguy,victormayorov
484,2015-06-29 01:27:33,"@victoria-chain & @victormayorov — This is fixed, fixed, and also fixed.  :)  Or so I'm nearly certain...and would really love your help testing the fix in your environment!

I haven't merged it yet, but you could apply the PR locally to try it out: https://github.com/facebook/AsyncDisplayKit/pull/529

If it's more convenient to have it in master, just let me know and I'll push the diff.  I have tested it quite well and the folks I'm asking to review it can always add comments after the merge for adding to a later follow-up.  Of course, please feel free to do a review of the patch as well, although it's probably not the best use of your time — not any fun, at least!

I will release a new version of ASDK within a week (next weekend at the latest; probably sooner).  Therefore, having input on any other issues you're encountering with your codebase will be really great.
",appleguy,victormayorov
484,2015-07-01 17:31:59,"@appleguy i've checked PR #529 and unfortunately crash still occures. Backtrace is different, but the key reason is the same - we're trying to get data from empty array in ASRangeController. I will try to make a test to provide you a demo of this crash.
",victoria-chain,appleguy
478,2015-06-13 18:13:21,"Thank you for the quick turnaround @victormayorov !
",appleguy,victormayorov
477,2015-06-11 15:52:47,"We have been experimenting with some sort of flexbox node in our own app. I'm not too familiar with your fork, @nguyenhuy, but I'd love to see an ASStackNode with an API very similar to Apple's new stack view. There's some sort of appeal making a polyfill on top of a newer API those without ASDK can only experiment in isolation right now.

@appleguy, were you planning on building this? If not, I'd love to take a crack at contributing something very similar to UIStackView.
",levi,nguyenhuy
477,2015-06-11 15:52:47,"We have been experimenting with some sort of flexbox node in our own app. I'm not too familiar with your fork, @nguyenhuy, but I'd love to see an ASStackNode with an API very similar to Apple's new stack view. There's some sort of appeal making a polyfill on top of a newer API those without ASDK can only experiment in isolation right now.

@appleguy, were you planning on building this? If not, I'd love to take a crack at contributing something very similar to UIStackView.
",levi,appleguy
477,2015-06-13 18:22:06,"Thanks everyone for the interest, it's super great to see it :).  Folks at Pinterest are also interested in having this component.

@levi, feel free to take a pass at it.  Just let me know if plans change and you won't have a chance to do so.  I have some more pressing ASDK issues (finalizing and launching 1.2.1 among a few other things), but if we don't have this component in ~2 weeks, I'll build it.
",appleguy,levi
477,2015-06-17 03:38:55,"@appleguy things got backed up on my end. Won't be able to move forward with an implementation in the next 2 weeks. Thanks for the heads up.
",levi,appleguy
476,2015-06-10 22:01:39,"Looks good overall, but importantly:
- It appears to me that you're recreating the download task for each new client asking for the resource.  This isn't necessary, right?  In ensuring we only ever create one task, it is very important to consider thread safety, and locking will be required.
- My implementation uses a small custom object for containing the three callback items (queue, progress, completion) and then puts those in an array.  I think this will be measurably more efficient than using dictionaries, although I will not block the review on this because it is a very important correctness fix.

If you're able to ensure that the task is only created once and is thread-safe (so that a caller definitely gets its callback even if the task is finishing right around the moment it's putting in the download request), I'll merge this diff right away and prepare a 1.2.1 release.

Thanks so much, @victormayorov!
",appleguy,victormayorov
476,2015-06-10 22:50:24,"@appleguy, thanks for your comments!

Regarding new tasks for each request - it was implemented in similar way before. Now it creates new task only if another one has already finished.  See -[ASBasicImageDownloaderContext createSessionTaskIfNecessaryWithBlock:] for details. ASDN::MutexLocker l(_propertyLock) inside this method ensures that sessionTask is synchronized.

Thank you, I'll be waiting for fix of this bug in 1.2.1 release.
",victormayorov,appleguy
476,2015-06-10 23:52:11,"Ok, I'm actually so happy with your attention to detail here that I am going to merge from a mobile device without even testing it -- LOL.  Seriously, thank you @victormayorov!  I'll test tonight and aim to get a release out this weekend once I can tell which of two or three other important diffs can land in time.
",appleguy,victormayorov
476,2015-06-11 04:39:37,"@victormayorov Can you test this with the Kittens app in the simulator?  I'm getting crashes and may need to revert it unless it can be shown not to be caused by this diff.

Thread 1Queue : com.apple.main-thread (serial)
#0  0x000000010328900b in objc_msgSend ()
#1  0x00000001039eb716 in CGImageRetain ()
#2  0x00000001040c601e in -[UIImage initWithCGImage:scale:orientation:]()
#3  0x00000001040c5dfd in +[UIImage imageWithCGImage:]()
#4  0x0000000102a4de2e in **49-[ASNetworkImageNode _lazilyLoadImageIfNecessary]_block_invoke52 at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASNetworkImageNode.mm:214
#5  0x0000000102a4d3ce in __51-[ASNetworkImageNode _downloadImageWithCompletion:]_block_invoke at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/ASNetworkImageNode.mm:177
#6  0x00000001029de108 in __57-[ASBasicImageDownloaderContext completeWithImage:error:]_block_invoke at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/Details/ASBasicImageDownloader.mm:127
#7  0x0000000105490186 in _dispatch_call_block_and_release ()
#8  0x00000001054af614 in _dispatch_client_callout ()
#9  0x0000000105497a1c in _dispatch_main_queue_callback_4CF ()
#10 0x00000001035411f9 in __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE** ()
#11 0x0000000103502dcb in **CFRunLoopRun ()
#12 0x0000000103502366 in CFRunLoopRunSpecific ()
#13 0x0000000107857a3e in GSEventRunModal ()
#14 0x000000010408c900 in UIApplicationMain ()
#15 0x00000001029dcf1f in main at /Users/scottg/code/AsyncDisplayKit/examples/Kittens/Sample/main.m:18
#16 0x00000001054e3145 in start ()
#17 0x00000001054e3145 in start ()
Enqueued from NSOperationQueue 0x7fdcea567d60 :: NSOperation 0x7fdcec893590 (QOS: UTILITY) (Thread 13)Queue : NSOperationQueue 0x7fdcea567d60 :: NSOperation 0x7fdcec893590 (QOS: UTILITY) (serial)
#0  0x000000010549343f in _dispatch_barrier_async_f ()
#1  0x00000001029dde84 in -[ASBasicImageDownloaderContext completeWithImage:error:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/Details/ASBasicImageDownloader.mm:126
#2  0x00000001029dfd1d in -[ASBasicImageDownloader URLSession:downloadTask:didFinishDownloadingToURL:] at /Users/scottg/code/AsyncDisplayKit/AsyncDisplayKit/Details/ASBasicImageDownloader.mm:294
#3  0x0000000107e701a0 in __82-[NSURLSession delegate_downloadTask:didFinishDownloadingToURL:completionHandler:]_block_invoke ()
#4  0x0000000102eab57f in __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK** ()
#5  0x0000000102dec0b2 in -[NSBlockOperation main]()
#6  0x0000000102dce774 in -[__NSOperationInternal _start:]()
#7  0x0000000102dce383 in __NSOQSchedule_f ()
#8  0x00000001054af614 in _dispatch_client_callout ()
#9  0x00000001054966a7 in _dispatch_queue_drain ()
#10 0x0000000105495cc0 in _dispatch_queue_invoke ()
#11 0x00000001054993b9 in _dispatch_root_queue_drain ()
#12 0x000000010549ab17 in _dispatch_worker_thread3 ()
#13 0x000000010581c637 in _pthread_wqthread ()
#14 0x000000010581a40d in start_wqthread ()
",appleguy,victormayorov
476,2015-06-11 07:54:47,"Hi, @appleguy !  Thank you, I found the reason. I was really surprised, but blocks doesn't capture CGImageRef, thus we've got pointer to deallocated variable. I fixed it and created new pull request #478

Thank you!
",victormayorov,appleguy
476,2015-06-11 15:09:07,"Wow cool can't wait to try this release

On Thu, Jun 11, 2015 at 12:55 AM, victormayorov notifications@github.com
wrote:

> Hi, @appleguy !  Thank you, I found the reason. I was really surprised, but blocks doesn't capture CGImageRef, thus we've got pointer to deallocated variable. I fixed it and created new pull request #478
> 
> ## Thank you!
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/facebook/AsyncDisplayKit/pull/476#issuecomment-111034532
",markmark1,appleguy
474,2016-02-08 12:52:36,"@appleguy As nothing new popped-up, maybe this issue should be closed ?
",macistador,appleguy
472,2015-06-11 18:27:29,"The issue was resolved by scaling down the size of the image. Thanks @appleguy . It's nice to meet you at WWDC.
",yiqin,appleguy
471,2015-06-07 02:52:45,"@joostvandijk Thanks for the report — I'm going to test rasterization now with the latest version of ASDK to make sure it is working correctly.  If so, we can start looking more closely at your code or node setup for any issues.  My hope is that once we find the issue, we can make the API more clear or provide explicit alerts / warnings if an important element is left out of the setup.
",appleguy,joostvandijk
471,2015-06-07 07:36:00,"@appleguy Thanks for the reply! Setting the background color to white works. However, I did run into #318. My rasterized node has a vertical offset, which somehow creates an inset in the rasterized node. I'll dive into it to see if I can find the cause.
![schermafbeelding 2015-06-07 om 09 30 33](https://cloud.githubusercontent.com/assets/8394738/8023036/e2376ef0-0cf7-11e5-8c51-66a886017eb9.png)
",joostvandijk,appleguy
471,2015-06-10 22:06:31,"@joostvandijk very interesting — I bet you anything there is some relatively recently refactored code where a copypasta error resulted in a rectangle's x / y values being misused (e.g. y origin used for x as well, or such)

I am going to roll a 1.2.1 within a few days, and it would be fantastic to include this fix if you're able to find one soon.  My goal is to also include some improved default behavior for this, by either properly handling transparent backgrounds or defaulting to white for clearColor backgrounds.
",appleguy,joostvandijk
471,2015-06-13 18:24:35,"@appleguy The following piece of code seems to be the cause. (ASDisplayNode+AsyncDisplay.mm)

It uses the node's bounds, position and anchorPoint to calculate the frame for the node to draw into during rasterization. This makes sense for the the subnodes, but it's also being applied to the rasterization container node.



If I check whether or not the node being drawn is the container node, and then simply use a frame with a zero origin, it works as expected.



![ios simulator screen shot 13 jun 2015 20 16 41](https://cloud.githubusercontent.com/assets/8394738/8145470/2cfcaa48-1209-11e5-8ec5-6384d5c6eefd.png)
",joostvandijk,appleguy
471,2015-06-13 18:44:14,"Thanks so much, @joostvandijk !  As you might expect by reading the code (since it is incorrect), this was one of the areas modified for open sourcing.  The container concept was added, and the transform logic was updated to be more generalized (rather than just enough for what Paper needed).  This is an important advanced feature of AsyncDisplayKit and I'm very grateful you took the time to debug it.
",appleguy,joostvandijk
471,2015-06-13 19:16:47,"@appleguy No problem. 👊 I've submitted a pull request containing a cleaned up version of the fix seen above.
",joostvandijk,appleguy
469,2015-06-15 10:32:14,"Thanks @appleguy. We are basically trying to pin a section header to the top of the table as the user scrolls. Sometimes the header has information that needs to be reloaded. (Post title, username, privacy attributes etc.) An example of this would be the behaviour Instagram has in their feed. We have thought about removing sticky section headers, and just using a collection view, but this is quite a lot more work since they need to then be incorporated into the datasource differently. If this is the only/best solution though, we are prepared to go down this route, I was just hoping there was a quick fix I was missing.
",mjgaylord,appleguy
469,2015-06-17 09:28:51,"@ryanfitz thanks for the tip. It does indeed work.
",mjgaylord,ryanfitz
469,2015-12-16 10:24:01,"@ryanfitz The way you suggested. Won't it do the work of reloading the nodes anyways. (Say when I have only one section and all my rows are in it.)
Because when you delete and then reinsert the section the datasource is anyways invoked for getting the nodes. 
",jaichaudhry,ryanfitz
469,2015-12-16 15:47:43,"@jaichaudhry correct, my solution is for use cases where you have many sections and typically only one or two rows per section. 
",ryanfitz,jaichaudhry
468,2015-06-14 00:42:27,"Thanks @nguyenhuy, this is one of the biggest undertakings that anyone in the community has started.  Now that WWDC has finally come and gone, I will prioritize working with you on this.  My co-workers at Pinterest are currently evaluating AsyncDisplayKit, and supporting asynchronous box model layout is something that got almost every developer excited.  I mentioned this PR specifically and it was really a great moment :)

Could you share your current thinking on this, such as:
- API thoughts / questions, areas to focus on
- Known issues
- If you have bandwidth to continue advancing this PR or need to hand it off

Awesome work, will add my diff review comments tonight or tomorrow!
",appleguy,nguyenhuy
468,2015-06-15 04:47:06,"@nguyenhuy Thanks for this documentation—it's extremely helpful and very well written.  Seriously, it's not just a comment (you could practically publish it with the code!)  Wish you were on my team at work :)

I'm still reading it, and starting to take a detailed look.  My initial feedback:
- I am very happy to see you are adapting the API to Objective-C, and realize this is a ton of work.  It gives me great confidence that we can develop this into a landable version of FlexBox for ASDK, which honestly is a huge achievement (and I can say probably would be our biggest external contribution!)
- Impressed you implemented Layout Nodes.  Could be a good API solution for this; I was personally debating whether we should go that route, or integrate some form of flag / property options on nodes.  Layout nodes are probably the better choice but seemed possibly harder to get right.

I'll try to complete a review during the week, probably with a few different comments as I go.  If we complete and land this, I will definitely roll ASDK v1.3 for it and try to implement a few extra features on the weekends.
",appleguy,nguyenhuy
468,2015-06-20 17:39:39,"@nguyenhuy - Going through the deeper review this weekend.  More soon.
- I'm a bit concerned about the amount of duplication from ComponentKit.  The code is very clean, a testament to that framework in its adaptability, but it also feels like there are some portions of genuinely core functionality (particularly the internals still using C++ and the layout constraint logic).  I'm going to reach out to my friends who authored CK to see if they have any suggestions for a better way.  This code does seem stable enough that a fork is reasonable to consider, though.
- I think profiling will show that the overhead from using NSArray is material.  I saw a couple areas internal to the framework where we created an array just to pass into a method that unpacks the array into the C++ structures.  We don't have to fix this to land, but it would be a high priority to follow up and provide perhaps an internal API for those areas to use a fast-path.
- I have increasing confidence that we should adopt the -calculateLayoutThatFits: pattern.  I'm still thinking carefully about the right data structure for that to return, as well as the ""LayoutNode"" nomenclature.  I think it is a nice parallelism and we might use it as-is, but it could be slightly confusing because it is a fundamentally different type of node than a DisplayNode.  We might be better off avoiding the word Node entirely and calling it an ASLayoutCalculator or ASLayoutSpec, or something else.  Any ideas?

Lastly, could you please rebase this onto 1.2.1?  I am confident that we will land an improved form of this patch in the next ~2 weeks, and would like to make sure it doesn't develop conflicts with other changes.
",appleguy,nguyenhuy
468,2015-06-21 01:58:18,"There are an extraordinary number of size types that this introduces.  We need to find a way to reduce or better-organize them, and I'd love your input @nguyenhuy 

To start, of course we have standard types:
- CGSize
- CGFloat
- CGRect, CGPoint, etc

Of the new ones, the most confusing to me is ASLayoutNodeSize.  But look at all the types!
- ASLayoutNodeSize
- ASRelativeDimension
- ASRelativeDimensionType
- ASSizeRange
- ASRelativeSize
- ASRelativeSizeRange

I understand that most, if not all of these are originally from ComponentKit.  It's also definitely true that they provide useful power and utility that we need to specify Flexbox constraints.  However, as I'm creating layout nodes, composite nodes, display nodes, stack children, etc...the types required are often different, and constructing the correct data type can take some work.

As I continue to experiment with writing code against this model, I may have some simplification suggestions.  However, I suspect you have better ideas to offer at this stage and it would probably help me make progress more quickly.  Let me know!

One example of the confusion I mean is when reading ASDimension.h, I'm really not sure what to make of these constants.  They seem really useful and likely needed on a regular basis, but what is the difference between just Auto, Auto and the /RANGE/ from Auto, Auto to Auto, Auto?! :-D

/*\* type = Auto; value = 0 */
extern ASRelativeDimension const ASRelativeDimensionAuto;

/*\* min = {0,0}; max = {INFINITY, INFINITY} */
extern ASSizeRange const ASSizeRangeUnconstrained;

/*\* width = Auto; height = Auto */
extern ASRelativeSize const ASRelativeSizeAuto;

/*\* min = {Auto, Auto}; max = {Auto, Auto} */
extern ASRelativeSizeRange const ASRelativeSizeRangeAuto;
",appleguy,nguyenhuy
468,2015-06-22 15:58:26,"Thanks for the deeper review round, @appleguy.

Firstly, I admit that the ""layout node"" naming convention is somewhat confusing. Since changing it is not difficult but a bit time consuming, I would prefer to do it only once :) I vote for ASLayoutSpec.

> I see ASCompositeNode and have no idea if it's an ASLayoutNode or ASDisplayNode
> Wrapping display nodes in ASCompositeNode is cumbersome and annoying. I don't yet fully understand the importance of ASCompositeNode. 

ASCompositeNode is more like a bridge between ASLayoutNode and ASDisplayNode. There are 2 problems I tried to solve using ASCompositeNode is:
- To identify/indicate where a display subnode is within its parent's layout.
- While calculating, a container ASLayoutNode asks its children to return their layouts. If one of the child layout node happens to be the place where a display node will be attached later on, we must figure out a way to get that display node and ask for its size.

The first problem can also be solved by employing a subnode identifier/tag (which may result in a new required API method in ASDisplayNode). The second problem is more difficult to solve without using a bridge/ASCompositeNode.

> I'm still thinking carefully about the right data structure for that to return

I think we can simplify ASLayout. As you suggested before, we may not need ASLayoutChild, if we have a way to identify each display subnode within its parent. Let me know if you have a better solution in mind.
",nguyenhuy,appleguy
468,2015-06-24 15:09:10,"@appleguy Thank you for your answers.

There are some new commits that remove ASLayoutNodeSize, rename -computeLayoutThatFits and fix CGFLOAT_MAX issue. I will post answers to your questions soon, probably within a couple of days.

Quick heads up: I've rebased and forced push the branch. I ended up doing a rebase instead of a merge because it's easier to fix conflicts commit by commit (especially conflicts in project.pbxproj). And I'm the only one who is officially working on this branch anyway. But if you happen to have a local copy, `reset --hard` is your friend :P
",nguyenhuy,appleguy
468,2015-06-24 15:12:53,"@garrettmoon Thank you for your input. It's great to see people like the work :)
",nguyenhuy,garrettmoon
468,2015-06-27 14:22:05,"������������������������

------------------ �������� ------------------



There are an extraordinary number of size types that this introduces.  We need to find a way to reduce or better-organize them, and I'd love your input @nguyenhuy   To start, of course we have standard types:   CGSize CGFloat CGRect, CGPoint, etc   Of the new ones, the most confusing to me is ASLayoutNodeSize.  But look at all the types!   ASLayoutNodeSize ASRelativeDimension ASRelativeDimensionType ASSizeRange ASRelativeSize ASRelativeSizeRange   I understand that most, if not all of these are originally from ComponentKit.  It's also definitely true that they provide useful power and utility that we need to specify Flexbox constraints.  However, as I'm creating layout nodes, composite nodes, display nodes, stack children, etc...the types required are often different, and constructing the correct data type can take some work.  As I continue to experiment with writing code against this model, I may have some simplification suggestions.  However, I suspect you have better ideas to offer at this stage and it would probably help me make progress more quickly.  Let me know!  One example of the confusion I mean is when reading ASDimension.h, I'm really not sure what to make of these constants.  They seem really useful and likely needed on a regular basis, but what is the difference between just Auto, Auto and the /RANGE/ from Auto, Auto to Auto, Auto?! :-D  /*\* type = Auto; value = 0 _/ extern ASRelativeDimension const ASRelativeDimensionAuto;  /_\* min = {0,0}; max = {INFINITY, INFINITY} _/ extern ASSizeRange const ASSizeRangeUnconstrained;  /_\* width = Auto; height = Auto _/ extern ASRelativeSize const ASRelativeSizeAuto;  /_\* min = {Auto, Auto}; max = {Auto, Auto} */ extern ASRelativeSizeRange const ASRelativeSizeRangeAuto;  ��Reply to this email directly or view it on GitHub.
",xujialiang,nguyenhuy
468,2015-06-28 15:53:44,"@appleguy: It's a great hint, thanks. I solved the compatible issue with recent commit. -calculateLayoutThatFits: (and the old manual layout model) is still supported. This PR should introduce no breaking API changes.

I will fix the naming convention very soon. I guess the final names would be ASLayoutSpec, ASLayout and ASLayoutable (the protocol that both ASLayoutSpec and ASDisplayNode conforms to).

Thinking about ASLayout. I figure the current ASLayout structure can be used as an intermediate product. It then will be flatten into a new, lightweight structure that contains size of the parent node and pairs of position-size of each subnode.

P/S: The current branch have many conflicts, most (if not all) of them are in project.pbxproj. That's annoying. I will just go ahead fixing remaining issues, then make a final rebase right before merging.
",nguyenhuy,appleguy
468,2015-06-28 16:11:28,"project.pbxproj. To fix conflicts in this file

Abort merge copy the original file out 

Do merge and copy  the original pbxproj file back make the changes to it manually git add and commit

On Sun, Jun 28, 2015 at 8:54 AM, Huy Nguyen notifications@github.com
wrote:

> @appleguy: It's a great hint, thanks. I solved the compatible issue with recent commit. -calculateLayoutThatFits: (and the old manual layout model) is still supported. This PR should introduce no breaking API changes.
> I will fix the naming convention very soon. I guess the final names would be ASLayoutSpec, ASLayout and ASLayoutable (the protocol that both ASLayoutSpec and ASDisplayNode conforms to).
> Thinking about ASLayout. I figure the current ASLayout structure can be used as an intermediate product. It then will be flatten into a new, lightweight structure that contains size of the parent node and pairs of position-size of each subnode.
> 
> ## P/S: The current branch have many conflicts, most (if not all) of them are in project.pbxproj. That's annoying. I will just go ahead fixing remaining issues, then make a final rebase right before merging.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/facebook/AsyncDisplayKit/pull/468#issuecomment-116293820
",markmark1,appleguy
468,2015-06-29 22:54:15,"@markmark1 thanks for weighing in — agree that is a better tactic and glad it was helpful to @nguyenhuy !

@nguyenhuy I like the names you mentioned.  Let's lock them down and move forward with the rename.

Can you better explain what you mean by the changes to the ASLayout structure?  I'm happy with the name, but do think that there could be some improvements to what the structure actually contains (IIRC there's an ASLayoutChild or something which seemed probably avoidable).
",appleguy,nguyenhuy
468,2015-06-30 13:49:33,"@appleguy Few new changes:
- ASLayoutChild is gone, for good.
- ASLayout now has a position, defaults to CGPointNull (NAN, NAN). I also added some asserts to make sure a valid position is set once (and only once) to sublayouts.
- ASDisplayNode now stores a flattened ASLayout. This should help reduce memory footprint and give -layout a boost.

An uncompressed ASLayout actually contains both layout specs and subnodes. So sublayouts looks like a better name. I will fix all naming issues altogether, which looks like the only task left in this PR. It's exciting to see how this PR evolves and get very close to this merge-able state. Thanks everyone for your input :+1: 
",nguyenhuy,appleguy
468,2015-06-30 21:39:34,"@nguyenhuy great step with what are probably the final structural changes; I appreciate the strategy of keeping the renames separate.  Let's get that big push in and then do a final detailed review.  I will prioritize breaking out future changes into separate improvement diffs so we can land the large one soon, assuming the API is solid as it is harder to change.
",appleguy,nguyenhuy
468,2015-07-02 05:06:55,"Phenomenal, thanks @nguyenhuy!  I will review this in detail as soon as I can — first thing on Saturday morning (possibly Friday night).  Are there any remaining issues you're aware of?  Could you think through any APIs added or changed on ASDisplayNode and consider what it would be like to explain their purpose and functionality to a new developer, and think if that story is easy to explain?
",appleguy,nguyenhuy
468,2015-07-02 05:46:27,"@appleguy awesome. Thanks.

Regarding API changes in ASDisplayNode. I think newly-updated documentation of [ASDisplayNode+Subclasses.h](https://github.com/facebook/AsyncDisplayKit/pull/468/files#diff-21f895ebcd9f9959caa2826a33f74315R112) explains the idea quite clearly (or maybe not). Anyway, let me try to explain it again here:

The main APIs added to ASDisplayNode are 2 new methods -layoutSpecThatFits: and -calculateLayoutThatFits:. Those methods, together with the existing -calculateSizeThatFits:, help to cover most (if not all) use cases:
- Manual layout: supported by implementing -calculateSizeThatFits: (**and** -layout). This is the model used by current clients and there are no breaking changes introduced.
- Auto layout: supported by implementing -layoutSpecThatFits:. This should be the recommended model once this PR is merged.
- Semi-auto layout: supported by implementing -calculateLayoutThatFIts:. This should be considered as an advanced model and should rarely be used. The implementation of -calculateLayoutThatFIts: needs to construct and return a compressed 1-level deep ASLayout that describes the node's size, as well as position and size of subnodes. As long as a correct ASLayout is returned, it will be safely cached and correctly used by -layout.

There are no high-level, structural issues that I'm aware of. However there are 2 minor concerns I'm having in mind:
- [Static layout spec](https://github.com/nguyenhuy/AsyncDisplayKit/blob/layout_node/AsyncDisplayKit/Layout/ASStaticLayoutSpec.h):
  - It can be helpful to describe a static part of the layout. But it requires a bit of learning to use correctly (new ASStaticLayoutChild and some size types).
  - I'm thinking about eliminating ASStaticLayoutChild (by using the same way we eliminate ASStackLayoutChild), but it leads to another concern (adding position and size to ASLayoutable will cause confusion).
  - Perhaps we should just remove it completely, or leave it there and wait for feedbacks?
- (Yet another) naming convention issue: ASLayoutSpec calls its sub-ASLayoutable objects ""children"". I didn't rename the property to subLayoutables because the new name doesn't sound good either. I think it is not really a critical issue and we can live with it for now?
",nguyenhuy,appleguy
468,2015-07-06 14:58:30,"@appleguy I've push a new commit that should fix the blocking issues. Please re-check the diff. Thanks.
",nguyenhuy,appleguy
468,2015-07-07 05:58:05,"Thanks for everything, @nguyenhuy !  It's been really awesome working with you on a feature so huge that it forms the basis for what will be AsyncDisplayKit 2.0.  We'll take up the last round of discussions in ongoing PRs and Issues.
",appleguy,nguyenhuy
468,2015-07-07 06:00:17,"Thanks @appleguy for working with me on this. So happy that this PR eventually gets merged! :dancer: :dancers: :tada: 
",nguyenhuy,appleguy
465,2015-06-15 08:50:24,"@appleguy: I've pulled the latest code and it's working perfectly :) thank you guys
",tiepvuvan,appleguy
465,2015-06-15 13:56:49,"I'll check it today too guessing it will work appleguy

On Mon, Jun 15, 2015 at 1:50 AM, tiepvuvan notifications@github.com
wrote:

> ## @appleguy: I've pulled the latest code and it's working perfectly :) thank you guys
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/facebook/AsyncDisplayKit/issues/465#issuecomment-111981983
",markmark1,appleguy
464,2015-06-07 02:23:57,"Thanks @ianolito, appreciate it!
",appleguy,ianolito
462,2015-06-14 01:00:27,"@lxcid thanks for researching this, and it was really great to meet you at the Pinterest WWDC party :).

It does look like this is a bit more complicated than this diff can address right now, so I'm going to keep the task open (and reference this diff) but close the PR.  There is a possibility of integrating a slightly newer text layout system from ComponentKit that is likely to fix some corner cases like this.
",appleguy,lxcid
458,2015-06-23 05:01:29,"I think I fixed this with my tracking set.  It probably has horrible overhead, but I believe it eliminated these orphaned pending indices.  I think what was happening is that multiple rows were coming in and overwriting the pending variable without a matching clearing of the variable occurring before it was overwritten again, and then it would just be stuck after that point.

Check out the NSMutableSet in https://github.com/facebook/AsyncDisplayKit/pull/496/files

Thanks @eanagel for discovering the original issue here, as adding the set was super easy in comparison!  Hopefully we can find a way to remove it someday soon, perhaps by discovering an alternative means to drive the working range instead of listening to these methods now that we know they aren't 100% consistent.
",appleguy,eanagel
454,2015-06-14 06:08:56,"@yufenglv thanks for this report.  Are you using asyncDataFetching on ASTableView?  Please check — it could cause an issue like this, and try it out with NO.  Also confirm that you're using ASDK v1.2 (I think it may have been finalized after you made this post, so unless you had been using ASDK master, you probably need to update).

I would love to help you debug this problem if you can reproduce it after updating to v1.2 and disabling asyncDataFetching.  Even if that fixes it, let me know!
",appleguy,yufenglv
454,2016-03-11 05:46:29,"@yufenglv - thanks for contributing to the AsyncDisplayKit community by reporting your issue here. Due to the length of time it’s been since this thread was active, I’m going to mark this issue as closed. If you are still having troubles, feel free to reopen it. I'm curious if you were able to reproduce this issue on a later version of ASDK.

I hope you have been able to use the framework in your endeavors!
",appleguy,yufenglv
449,2015-06-07 02:31:24,"@clooth & @nvh, there is some concern that this will affect clients' Xcode configurations or build systems, but I didn't hear back from our build wizard.  I'll take a closer look.  
",appleguy,nvh
449,2015-06-07 02:42:32,"@nvh, @clooth ok, I think we can merge this, but I'm worried the additional target is a little confusing to people not using Carthage.  Does it need to be named with ""-iOS""?  Can it be named simply ""AsyncDisplayKit""?
",appleguy,nvh
449,2015-06-10 22:03:51,"Thanks @paulyoung  for the information — very helpful.  I would like to land this with clear naming (no -iOS unless it is necessary or clearly explained), and of course, it should not have any warnings that regular usage of the project does not have.

Is anyone volunteering to take this patch the rest of the way?  I will be rolling a 1.2.1 in the next 1-2 days for other fixes, and it would be great to include this, but I won't be able to commit to it myself.
",appleguy,paulyoung
449,2015-06-11 01:04:15,"@appleguy I would love to help out here I just can't make that deadline. 
",nickvelloff,appleguy
449,2015-06-14 01:32:33,"@appleguy +1 on appreciation for ASDK. Helped UICollectionView performance immensely.
",nickvelloff,appleguy
449,2015-06-23 05:04:44,"@nickvelloff @nvh although we missed that release, I'd be happy to roll another one shortly after this lands with clean naming.

Anyone going to sign up for this?  Otherwise we should close out this PR until it can be re-developed.
",appleguy,nvh
449,2015-06-23 05:04:44,"@nickvelloff @nvh although we missed that release, I'd be happy to roll another one shortly after this lands with clean naming.

Anyone going to sign up for this?  Otherwise we should close out this PR until it can be re-developed.
",appleguy,nickvelloff
449,2015-06-23 06:38:31,"@appleguy I might be completely wrong here, but it seems like all targets must have unique names, which means we have to decide on either a -Dynamic suffix or something generic that's useable in the future as well. I only did a little poking around but it seems like so.

Furthermore, other projects seem to be using the -iOS and -Mac suffixes in their projects as well. I suppose the problem is that this doesn't have separate targets like they do, but I must agree I'd hate to `import AsyncDisplayKit_iOS` :)

Edit: Not sure if that would even be the case here if the product name is the same, anyway. As paul said below.
",clooth,appleguy
449,2015-06-23 06:51:47,"@paulyoung Yeah I think that's not the issue that @appleguy means here. He's concerned about the naming of the target itself as it's redundant because iOS is the only supported platform. (Correct me if I'm wrong)
",clooth,appleguy
449,2015-06-23 06:51:47,"@paulyoung Yeah I think that's not the issue that @appleguy means here. He's concerned about the naming of the target itself as it's redundant because iOS is the only supported platform. (Correct me if I'm wrong)
",clooth,paulyoung
449,2015-06-23 07:18:34,"@paulyoung I'm with you on the -iOS suffix as well. I've seen it enough in other places for it to be familiar enough. +1
",clooth,paulyoung
449,2015-06-23 17:51:18,"Thanks for weighing in @clooth and @paulyoung.  So be it — I am thrilled to have the community drive this project, and you make a compelling case.  Let's get this merged with the current naming, and say a few prayers that it doesn't break anything :) (I think we'll be good since it is a new target).

Appreciate the background on Carthage and the naming schemes (e.g. that -OSX is the other part of the pair).  There was once a version of ASDK that did work on OS X...but unfortunately I don't see that ever being released :).
",appleguy,paulyoung
449,2015-06-23 19:37:48,"@appleguy thanks for the merge! this is great news.
",nickvelloff,appleguy
448,2015-06-15 14:22:43,"@appleguy Thanks for the response! Give me a day or so and I'll get an example project together that hopefully shows what I am seeing. 
",cbreed28,appleguy
447,2015-05-18 03:45:41,"you're right @appleguy, laying out views must be done there, of course I didn't consider `-layout` I don't know how it got away from me. Thanks for your feedback, appreciate it.
",mohpor,appleguy
445,2015-05-19 03:05:35,"@appleguy thanks for the feedback. I updated the pull request to reflect your changes.
",levi,appleguy
445,2015-05-21 22:49:41,"Fantastic, thank you @levi!
",appleguy,levi
439,2015-05-22 07:40:01,"@eanagel I'm OK with this being manually tested for now; although I'd like to see something like this have more sophisticated testing, I don't want to block the commit and am happy to merge it.

However, check out my comment on the diff and let me know what you think.  If it is /not/ a bug, perhaps add a comment because I think it's a bit unclear.
",appleguy,eanagel
439,2015-06-07 02:25:37,"@eanagel At your request, I'll merge this but certainly appreciate any follow-up you can provide.  Thanks for your patience, just settled in after returning from vacation :).
",appleguy,eanagel
437,2015-05-04 02:15:22,"@eanagel Thanks a bunch for investigating this.  We have some known issues here, but unfortunately have been very slow in addressing them.  My preferred solution will be to completely rewrite ASDataController, as it is unnecessarily complicated and incorrectly handles certain edge cases; because of this we have hesitated to invest in modifying the current version.  Despite that, though, it will take sufficiently long to rewrite that having a nearer term fix is tremendously valuable — it will reduce time pressure on the replacement and allow us to ensure it is much better tested, and has a better API (the data lock should be eliminated by simply asserting data modification happens on main, which should be the only sane architecture for most apps anyway; layout, rendering, etc will still be automatically asynchronous)
",appleguy,eanagel
435,2015-09-22 09:46:01,"Hello, @appleguy , so, how can I implement a waterfall layout using a current version? I've tried to implement own class of UICollectionViewLayout and pass it to ASCollectionView, but nothing happened. What do I wrong?
",erema,appleguy
435,2015-09-23 05:28:43,"@appleguy thank you for the fast answer. I've tried to reproduce this http://www.raywenderlich.com/107439/uicollectionview-custom-layout-tutorial-pinterest . When I wrote own UICollectionViewLayout and pass it to ASCollectionView I saw that its methods are called like 
- (void)prepareLayout
- (CGSize)collectionViewContentSize
- (NSArray<UICollectionViewLayoutAttributes *> *)layoutAttributesForElementsInRect:(CGRect)rect

but grid wasn't change, this is what I meant.
",erema,appleguy
434,2015-04-22 16:03:20,"@dasmer I've enabled Coveralls for facebook/AsyncDisplayKit. If you add a commit to this that adds a badge to the README, that'll kick off the Travis build and we can make sure the metrics are sent to https://coveralls.io/r/facebook/AsyncDisplayKit. :bow: 
",modocache,dasmer
434,2015-05-17 08:24:17,"@dasmer & @modocache, thanks for collaborating on this :).  I haven't used these tools before, and while the data they provide is certainly an interesting new metric to track and drive, my primary concern is added complication to the build system.  Are you willing to support this if issues arise?

On test coverage, I'm glad to see tests included in many external PRs and think that coverage could be improved significantly with a focused effort to write tests for ""ASDK 1.0"" code.  I have a few other issues that are higher priority for my ASDK time, but would be excited to review an merge any test-focused diffs!
",appleguy,dasmer
434,2015-07-08 19:54:43,"We've continued to make progress on increasing code coverage with the new snapshot tests for layout and expanded ASTableView and ASCollectionView testing, with more to come!

@dasmer, @modocache do you have time to fix the likely-minor merge conflicts here?  I'm not familiar with the proper setup or testing procedures here, but would like to get this closed out.
",appleguy,dasmer
434,2015-07-09 03:37:10,"@appleguy I just merged master and it looks like coverage has increased by ~14%.
[![Coverage Status](https://coveralls.io/repos/dasmer/AsyncDisplayKit/badge.svg?branch=master&service=github)](https://coveralls.io/github/dasmer/AsyncDisplayKit?branch=master)
",dasmer,appleguy
434,2015-07-15 05:22:14,"@appleguy Does anything else need to be done here before merge?
",dasmer,appleguy
434,2015-09-16 11:54:14,"@dasmer so sorry I fell behind on this — I started ""visually ignoring"" the PR as one that was stalled, but you had actually replied to my second comment!  Email notifications weren't working for me at the time, and it's really stupid that the GitHub website's PR page doesn't clearly highlight PRs with unread comments.

I would love to merge this, and in fact, would find it exceptionally useful if we could make it happen in the next 12-24hrs...In about 25hrs I'll be onstage at NSSpain talking about ASDK 2.0, and wanted to make a point about the importance of unit testing & value of community members who have been adding tests + test infrastructure.

Right now it's not merging cleanly.  If you can fix that, I'll merge it as soon as I see it (GMT time zone).  If you want to do another re-sync with your repository, I'd be curious to see the current coverage, which I suspect is incrementally higher.
",appleguy,dasmer
434,2015-09-16 15:31:52,"@appleguy No worries. I merged master. It looks like a test is failing now, although it seems unrelated. Maybe try re-running tests?
",dasmer,appleguy
432,2015-05-17 08:19:44,"@tonklon thanks for both the implementation and the tests!  My apologies for the delayed merge; should be more prompt from here out.

@ocrickard, do your improvements to the text stack in CK happen to include exclusionPaths?  If not, perhaps you can apply this there to ensure we don't lose the functionality if the code is shared.
",appleguy,tonklon
428,2015-06-14 20:08:36,"@ProjectDent @SRandazzo thanks for weighing in here.  I want to make sure this is bulletproof for your use cases.

Can you answer a couple quick questions?
- What ASDK version are you on?  Make sure you're using 1.2 (or 1.2.1 after I release it today).  1.2 fixed some key issues in this area.
- Are you using asyncDataFetching = YES?  Try disabling this property.  As described in the 1.2 release notes, this feature is currently unstable for some use cases (primarily those where a lot of editing / interaction take place).

If your problems are solved by updating and turning off asyncDataFetching, let's close this issue.  Please do open another one if you are using a workaround that you feel should be unnecessary / handled by the framework.
",appleguy,SRandazzo
428,2015-06-14 23:03:14,"Thanks @appleguy

To answer your questions:
- I am on version 1.2 of AsyncDisplayKit
- before this crash, I had asyncdatafetching turned on, and was exeriencing a different crash 100% of the time, so I turned it off. After turning it off, I would experience the above crash every 2-3 times restarting my app (table view is in the root viewcontroller). I believe the issue has to do w calling reload data too many ones before the tableview is even displaying anything, just a hunch as removing an extra call to reloaddata stopped the crash. I'll look to make a reproducing case 

Thanks 

—
Sent from Mailbox

On Sun, Jun 14, 2015 at 4:08 PM, appleguy notifications@github.com
wrote:

> @ProjectDent @SRandazzo thanks for weighing in here.  I want to make sure this is bulletproof for your use cases.
> Can you answer a couple quick questions?
> - What ASDK version are you on?  Make sure you're using 1.2 (or 1.2.1 after I release it today).  1.2 fixed some key issues in this area.
> - Are you using asyncDataFetching = YES?  Try disabling this property.  As described in the 1.2 release notes, this feature is currently unstable for some use cases (primarily those where a lot of editing / interaction take place).
>   If your problems are solved by updating and turning off asyncDataFetching, let's close this issue.  Please do open another one if you are using a workaround that you feel should be unnecessary / handled by the framework.
>   ---
>   Reply to this email directly or view it on GitHub:
>   https://github.com/facebook/AsyncDisplayKit/issues/428#issuecomment-111872188
",SRandazzo,appleguy
428,2015-06-14 23:03:14,"Thanks @appleguy

To answer your questions:
- I am on version 1.2 of AsyncDisplayKit
- before this crash, I had asyncdatafetching turned on, and was exeriencing a different crash 100% of the time, so I turned it off. After turning it off, I would experience the above crash every 2-3 times restarting my app (table view is in the root viewcontroller). I believe the issue has to do w calling reload data too many ones before the tableview is even displaying anything, just a hunch as removing an extra call to reloaddata stopped the crash. I'll look to make a reproducing case 

Thanks 

—
Sent from Mailbox

On Sun, Jun 14, 2015 at 4:08 PM, appleguy notifications@github.com
wrote:

> @ProjectDent @SRandazzo thanks for weighing in here.  I want to make sure this is bulletproof for your use cases.
> Can you answer a couple quick questions?
> - What ASDK version are you on?  Make sure you're using 1.2 (or 1.2.1 after I release it today).  1.2 fixed some key issues in this area.
> - Are you using asyncDataFetching = YES?  Try disabling this property.  As described in the 1.2 release notes, this feature is currently unstable for some use cases (primarily those where a lot of editing / interaction take place).
>   If your problems are solved by updating and turning off asyncDataFetching, let's close this issue.  Please do open another one if you are using a workaround that you feel should be unnecessary / handled by the framework.
>   ---
>   Reply to this email directly or view it on GitHub:
>   https://github.com/facebook/AsyncDisplayKit/issues/428#issuecomment-111872188
",SRandazzo,SRandazzo
426,2015-07-10 14:47:00,"@SilverEnderman @yxztj just use ASImageNode's imageModificationBlock property. There is even ready to use ASImageNodeTintColorModificationBlock.
",Jercik,yxztj
426,2015-07-10 16:51:51,"It works! awesome!

Thanks @Jercik for the help.
",SparrowBlaze,Jercik
426,2015-07-10 17:28:22,"Is there an example to use imageModificationBlock

On Fri, Jul 10, 2015 at 7:47 AM, Łukasz Jerciński
notifications@github.com wrote:

> ## @SilverEnderman @yxztj just use ASImageNode's imageModificationBlock property. There is even ready to use ASImageNodeTintColorModificationBlock.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/facebook/AsyncDisplayKit/issues/426#issuecomment-120426822
",markmark1,yxztj
426,2015-10-01 18:31:56,"@Jercik I am seeing the same issue is affecting the `tintColor` on the `ASTextNode` is there a workaround for this? (it's in the context of this #571) 
",RuiAAPeres,Jercik
426,2015-10-02 12:53:37,"@appleguy hey there! The `tintColor` issue is described in #571. 
",RuiAAPeres,appleguy
417,2015-04-08 23:39:35,"Thanks for this @spicyj! We've got some messaging and links in the _Quick start_ to Cocoapods, and its a pretty widely known tool. I like the intention though!
",rnystrom,spicyj
416,2015-05-19 08:21:44,"@appleguy I made simple app for demonstrate crash: 
https://www.dropbox.com/s/z3uol5oxsjirjfc/AsyncCollectionViewTest.zip?dl=0
",chicherin,appleguy
415,2015-05-17 09:14:51,"@yufenglv, thanks for reporting this and my apologies for the delay in getting back.

Did you close this because the issue was resolved?  I know we recently merged a diff that I believe will address this, but I just wanted to make sure that was the solution.  Thanks!
",appleguy,yufenglv
415,2015-05-18 07:19:56,"@appleguy  This issue is not caused by ASDK, and I always set delegate to nil in `-(void)dealloc` to avoid crashing on iOS7 and above. Since `setDelegate` is overwritten in ASDK, it doesn't work now.

At last, I add `[self setEdgesForExtendedLayout:UIRectEdgeNone];` to `-(void)viewDidLoad` will prevent `UIScrollView`send message to the controller which is released. And I not sure if it's a bug of iOS7 and above.
",yufenglv,appleguy
410,2016-04-02 05:15:32,"@ProjectDent @chicherin @Adlai-Holler: This is still an important issue to resolve. The implementation work shouldn't be too challenging, but we don't currently have anyone to look into it. Any volunteers? :)

Merging with #698 which has more details. 
",appleguy,Adlai-Holler
409,2015-05-04 02:28:23,"@barfoon, you are awesome.  Thanks so much for discovering this and putting this up, as it helped the community get past this very serious issue in a time that the FB / IG team dropped the ball.  It looks like we are converging towards a final diff with @eanagel's PR, so I'll close this — please let me know if you think anything is missing from that PR.
",appleguy,eanagel
407,2015-05-22 07:43:04,"Thanks @ianolito, I'm going to go ahead and take this.  It certainly would be better to lazily create the set because this will add a relevant amount of overhead to leaf nodes that won't display any subnodes — particularly layer-backed nodes that are otherwise quite cheap and may be numerous.  If you get around to another diff to address that, awesome :).
",appleguy,ianolito
405,2015-05-04 02:24:43,"@eanagel Hey Ethan — thanks once again, and sorry for the extreme delay.  This is the most lag we've had on a PR for any of the Paper OSS projects, and that really sucks.  Please feel free to email me directly at scottgoodson@gmail.com if I don't reply to one of your PRs within 2-3 days.

We did look at this one when it came in, but at that time were intending to rewrite ASDataController imminently.  That work is still planned, but as you can see, has been delayed.  My goal is to do the rewrite by the end of the month, but there's risk in it slipping (especially when testing, etc is considered).

This code looks correct by my analysis, and is absolutely a useful extension to the API I will ensure is supported in the updated version of ASDataController.  Trusting that you tested this well, I'll go ahead and merge.
",appleguy,eanagel
399,2016-03-25 20:04:36,"@secretiverhyme - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,secretiverhyme
390,2015-07-05 19:58:28,"@smeis thanks again for this report; please try again, and I'm pretty confident this is resolved.  If you can still cause an issue, can you try modifying ASTableViewStressTest (in the examples/ directory) to reproduce it, and I'll investigate?
",appleguy,smeis
390,2015-07-05 20:00:24,"Yes will do @appleguy!
",smeis,appleguy
386,2015-03-24 09:25:11,"@secretiverhyme yes that was exactly what I was up to. Unfortunately that seems kinda hard due to AVFoundation seemingly having quite some limitations on background usage ...
",tspecht,secretiverhyme
386,2016-07-14 13:18:35,"@appleguy could you give a few links about private API? Thanks in advance.
",richardtop,appleguy
378,2015-07-28 16:47:29,"@appleguy Sorry for the delay I just tried with version 1.2.2 and I still get a similar error.


",wieseljonas,appleguy
369,2015-07-05 19:55:18,"@smeis thanks for reporting this; as of yesterday this area of the code has been radically refactored, and I believe this problem is either fixed or structurally eliminated.  If you are able to break the code in any way, please file a new issue — I would love to hear about it and make it a top priority to resolve.

Sorry for the long delay on the issues around this code.  It was a complicated area to rewrite, and a lot of factors came together to make it difficult to give the time dedication needed, but now that the technical debt is eliminated I plan on keeping it pretty spotless.
",appleguy,smeis
369,2015-07-05 19:59:34,"Ok thanks for fixing this @appleguy ! I saw the PR for your rewrite and was planning to test it but hadn't gotten around to it. Will test it this week and will of course report any problems!
",smeis,appleguy
362,2015-03-09 11:32:44,"Like @smeis mentioned, if you want to use `UIKit` in node, try the method `- [ASDisplayNode initWithViewBlock:]` and pass a block that initiate a view that you will use later. :+1: 
",lxcid,smeis
362,2015-03-09 20:12:42,"Thank you @lxcid and @smeis. I tried initWithViewBlock to wrap over UIImageView and UIWebView. They are working fine.

However, I am facing one issue with the image nodes.I have ASCollectionView with ASCellNode containing ASNetworkImageNode. When I scroll the collection view, the image nodes get deallocated due to the working range policy. Is there any way that i can turn off this deallocation of images because the image nodes outside the working range take time to download the image again when they become visible on scrolling and it gives poor user experience. 

Please confirm if  there  is any inherent caching support for images that AsyncDisplayKit provides.
",kratijain-flipkart,lxcid
362,2015-03-09 20:12:42,"Thank you @lxcid and @smeis. I tried initWithViewBlock to wrap over UIImageView and UIWebView. They are working fine.

However, I am facing one issue with the image nodes.I have ASCollectionView with ASCellNode containing ASNetworkImageNode. When I scroll the collection view, the image nodes get deallocated due to the working range policy. Is there any way that i can turn off this deallocation of images because the image nodes outside the working range take time to download the image again when they become visible on scrolling and it gives poor user experience. 

Please confirm if  there  is any inherent caching support for images that AsyncDisplayKit provides.
",kratijain-flipkart,smeis
362,2015-03-11 20:40:55,"> If you are on master, you can increase the working range so that the image can be downloaded much earlier. (See - [ASTableView setTuningParameters:forRangeType:])

Working ranges have been configurable since AsyncDisplayKit 1.0 via the `rangeTuningParameters` property, so you actually don't need to be on master to increase the range's size.  The API @lxcid mentioned will be released in ASDK 1.2 because we're now differentiating between ""rendering"" and ""network"" ranges — you can, e.g. enable 1-screenful render-ahead but 3-screenful download-ahead.

> ASDK does not provide a caching support for image but does provide hooks for caching to be supported through 3rd party implementation.

Note that if you're using the default downloader, your requests are cached — ASBasicImageDownloader uses NSURLSession, which uses your app's shared NSURLCache.  `[[ASNetworkImageNode alloc] init]` should Just Work™ out of the box; if you require a more flexible or explicit cacheing strategy, you can easily implement your own.  @ide's [WebASDKImageManager](https://github.com/ide/WebASDKImageManager) may also be worth a look.
",secretiverhyme,lxcid
362,2015-03-12 05:34:04,"Thank you @lxcid  and @secretiverhyme . This really helps:)
",kratijain-flipkart,lxcid
362,2015-03-12 05:34:04,"Thank you @lxcid  and @secretiverhyme . This really helps:)
",kratijain-flipkart,secretiverhyme
361,2015-05-28 11:39:51,"I'm experiencing the same issue. Any progress on this?
@ryanfitz care to share your workarounds?
",habitatus,ryanfitz
361,2015-06-14 21:02:45,"@appleguy Yep, I'm using ASTableView. Pin-to-top behaviour is the main reason I'm using the section headers (one per post, so there are a lot of views being initialised and sized on table reload). I plan on spending some time on researching how cell nodes work under the hood, and trying to apply similar logic to header nodes. I didn't have enough free time to do it yet, unfortunately.
",habitatus,appleguy
361,2015-06-15 04:46:18,"@habitatus I do have a [workaround](https://gist.github.com/ryanfitz/b3eaeb0dba45c3d63ff3) for loading up header nodes using an ASTableView. Its a pretty simple workaround where in `tableView:viewForHeaderInSection:` I load an `ASDisplayNode` (the header node) on a background thread and then jump to the main thread and add the header node to a `UITableViewHeaderFooterView`.

My solution works well enough where scrolling over very large datasets and frame rates remain high and there is no slowdown while scrolling. However, I would strongly suggest you switch to a ASCollectionView. I've found using an `ASTableView` for this pin-to-top behavior is really not supported with the current implementation. I've run into a number of issues trying to use `ASTableView` this way and will have to switch to another solution before I can release my app to the store. 

I spent a good bit of time reading over the code to better understand how tableviews and collectionviews are implemented, with the hopes of putting together a pull request to get ASTableView production ready when used in this pin-to-top behavior. @appleguy will have a much better handle on it, but it appeared to be a major undertaking to nail down and fix all the issues I've run into. 
",ryanfitz,appleguy
361,2015-06-15 18:43:12,"@ryanfitz Thx for your suggestions. I managed to get ASTableView pretty much under control :) This header view issue is basically the only remaining one that needs solving.
I'll look into the gist you posted, hopefully it helps. Thx.
",habitatus,ryanfitz
361,2015-07-09 07:57:24,"@ryanfitz Cool. I still didn't get around to implementing this on my own, so your solution will be much appreciated. Thanks!
",habitatus,ryanfitz
361,2015-12-18 04:48:30,"@ryanfitz at the moment if you need this in production, I might recommend using ASCollectionView and its support for supplementary nodes.  They work out of the box with UICollectionViewFlowLayouts, and you can use the ...LayoutInspecting protocol to make any custom layout compatible with them.
",appleguy,ryanfitz
361,2016-03-25 02:12:29,"@ryanfitz @habitatus @secretiverhyme - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,ryanfitz
361,2016-03-25 02:12:29,"@ryanfitz @habitatus @secretiverhyme - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,secretiverhyme
357,2015-03-10 01:07:33,"@nguyenhuy What happens when you set `cell.opaque = NO`?
",rnystrom,nguyenhuy
357,2015-03-10 09:27:35,"@rnystrom: the whole cell [turns white](https://dl.dropboxusercontent.com/u/10896666/AMVC_1.png) when `cell.opaque` is disabled.

After taking a closer look, it seems like the problem is caused by `ASImageNode`. [Here](https://dl.dropboxusercontent.com/u/10896666/AMVC_2.png) is what the cell looks like when I enable `shouldRasterizeDescendants` on image nodes only.
",nguyenhuy,rnystrom
357,2015-03-16 15:09:12,"@rnystrom I get the exact same problem here, using 1.1.1 at the moment. Any updates on this issue?
",bsarrazin,rnystrom
357,2015-06-14 23:19:56,"@nguyenhuy I tried to run your code locally, but it isn't building.  I'm not familiar with Swift, so could you check out the errors and update your repo if necessary?

We recently landed a fix for subtree precompositing.  You also should check that you have backgroundColor set to something specific, like whiteColor, because clearColor will default to black.  We should have a better default in ASDK, and I'm tracking that improvement.

Thanks for your contributions & reports!
![screen shot 2015-06-14 at 4 17 57 pm](https://cloud.githubusercontent.com/assets/565251/8150906/30ba374c-12b1-11e5-92f5-2abef20e9ea3.png)
",appleguy,nguyenhuy
357,2015-06-15 07:35:44,"@appleguy I'm sorry about the errors, definitely caused by Swift 1.2 breaking changes. I have just had a local copy that works with Swift 1.2 and ASDK 1.2.1 (haven't updated the repo because I prefer to declare 1.2.1 in Podfile, but it's not available via CocoaPods yet). 

The problem still occurs on ASDK 1.2.1 though. Background colors are rendered properly, but node contents are not. I will investigate this issue in the next few days.
",nguyenhuy,appleguy
357,2015-07-05 20:14:30,"Punting to 1.3 as 1.2.2 is going out now.  @nguyenhuy I would love to hear if you figure out the nature of the bug, even if you're not sure the right way to fix it.
",appleguy,nguyenhuy
357,2015-07-05 23:05:57,"@appleguy My time for ASDK has been dedicated to the Box Model. With the
coming beta version, hopefully I will have time to update my library to use
the box model, simplify nodes and eventually make it easier to debug this
issue. I will keep you up-to-date.
On Jul 6, 2015 3:14 AM, ""appleguy"" notifications@github.com wrote:

> Punting to 1.3 as 1.2.2 is going out now. @nguyenhuy
> https://github.com/nguyenhuy I would love to hear if you figure out the
> nature of the bug, even if you're not sure the right way to fix it.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/issues/357#issuecomment-118663271
> .
",nguyenhuy,nguyenhuy
357,2015-07-05 23:05:57,"@appleguy My time for ASDK has been dedicated to the Box Model. With the
coming beta version, hopefully I will have time to update my library to use
the box model, simplify nodes and eventually make it easier to debug this
issue. I will keep you up-to-date.
On Jul 6, 2015 3:14 AM, ""appleguy"" notifications@github.com wrote:

> Punting to 1.3 as 1.2.2 is going out now. @nguyenhuy
> https://github.com/nguyenhuy I would love to hear if you figure out the
> nature of the bug, even if you're not sure the right way to fix it.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/issues/357#issuecomment-118663271
> .
",nguyenhuy,appleguy
356,2015-03-07 22:46:54,"Nice find, thanks @nguyenhuy!
",secretiverhyme,nguyenhuy
352,2015-03-07 22:46:25,"Nice, thanks for the pull request!  Can we update this to support `layout.sectionInset`, as @nguyenhuy describes?  Also, some quick Facebook code style nits:
- curly braces for `if` statements
- no whitespace after colons in messages
- whitespace before pointers — `UICollectionView *`, not `UICollectionView*`
",secretiverhyme,nguyenhuy
352,2015-07-05 20:10:23,"Looks like this one isn't going to be done in time for 1.2.2 :(.  Anyone able to step up to support it?  @nivanchikov, @nguyenhuy 
",appleguy,nguyenhuy
352,2015-07-05 23:07:02,"I can take over this improvement :)
On Jul 6, 2015 3:10 AM, ""appleguy"" notifications@github.com wrote:

> Looks like this one isn't going to be done in time for 1.2.2 :(. Anyone
> able to step up to support it? @nivanchikov
> https://github.com/nivanchikov, @nguyenhuy
> https://github.com/nguyenhuy
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/pull/352#issuecomment-118663094
> .
",nguyenhuy,nguyenhuy
352,2015-07-08 19:50:34,"Super cool, thanks @nguyenhuy !  We have had 3 pull requests open for a long time without much movement, and I would like to close them out in the next month or so — hopefully by getting them ready to merge, but otherwise moving them into a GitHub Issue for later revival.
",appleguy,nguyenhuy
349,2015-03-12 00:29:03,"I've dug into this a little and I agree with @lxcid.  The empty proxy is an unsafe convenience, and we're going to have to fall back to asserting that `asyncDelegate` is non-nil.  More details, for the curious:

The UITableViewDelegate protocol declares conformance with the public NSObject _protocol_; to a first approximation the protocol is interchangeable with the NSObject _class_, but the two are not identical.  `_accessibilitySetRetainedValue:forKey:`, which is SPI defined on the NSObject class [in the AccessibilityStorage category](https://github.com/mattlawer/iOS6-Private-Frameworks/blob/master/UIAccessibility/NSObject-AccessibilityStorage.h), is one such difference.

So, UIScrollViewAccessibility takes an NSObject-protocol-conforming object, assumes it's NSObject-class-conforming, and calls private methods on it without `-respondsToSelector:` checks.  Since our proxy isn't an NSObject… :boom:!

Changing `_ASTableViewProxy` to inherit from NSObject is one possible fix, but rapidly swapping out delegates — the proxy at init-time, then consumer code shortly thereafter — is an edge case which might break the accessibility subsystem in a much more subtle way.  (Yes, [NSProxy is broken](http://lists.apple.com/archives/cocoa-dev/2006/Mar/msg00716.html), but obvious bugs are preferable to sneaky ones.)  Dropping the empty proxy is our best bet.
",secretiverhyme,lxcid
348,2015-05-17 08:04:42,"@RCacheaux — checking in here, any thoughts on this work?  I would love to see it brought to master; in fact, I will probably have a use case for it soon, but don't have bandwidth to undertake the implementation myself.  If you do have time to spin up again, I'll review more deeply to see if any feedback would be helpful.
",appleguy,RCacheaux
347,2015-06-23 04:58:52,"Hey, great to have you in the community @lappp9!  Would love to help however I can.
1. Embarrassing, but I'm actually not sure how the linter is set up for ASDK if we have one.  If there's an oclint configuration in the project, run it!  I haven't been doing this on my changes, lol.
2. I wouldn't worry about updating the docs as a blocker for this, but yes, if you can update the gh-pages branch with any relevant information then that would be really cool.  There are also generated doc pages (accessible from some links on asyncdisplaykit.org) but those are created by running a script on the codebase, scraped from the specific comment format that we use in header files.  We are due to re-generate them now, actually (although it's possible @secretiverhyme set up a magical automatic updating script :) )
3. Yes, just submit a pull request that diffs between your forked project's branch and the facebook/AsyncDisplayKit master branch.
",appleguy,lappp9
347,2015-06-23 16:27:12,"Ok awesome, thanks for the tips @appleguy!  I'll definitely keep that in mind for my pull requests moving forward.  

Oh, one last question:
As far as testing goes, I noticed there aren't any tests for ASNetworkImageNode but there were ASMultiplexImageNode tests around more complicated functionality.  Is the idea that you only put tests in for stuff that seems like it really needs it?  That's what it seems like, but I figured I might as well ask to make sure.
",lappp9,appleguy
347,2015-06-23 17:23:13,"@lappp9 Test coverage in ASDK is acceptable, but definitely incomplete.  To be honest, it's tough to have a test that hurts — even simple tests are nice to have, as long as they are not redundant.  For example, you would not want to test basic properties of ASDisplayNode on ASNetworkImageNode, like verifying that .bounds is the same as what you set it to, but checking features of ASNetworkImageNode itself could be useful.
",appleguy,lappp9
346,2015-03-23 15:53:28,"@ProjectDent @rnystrom   I am currently facing same issue now, Just tried to add notification observer to every ASCellNode subclass, and post notification in ViewController when data is updated, it works but I am wondering if there will be any potential problems using this solution.

Do you have any ideas or can you share your solution for updating data?
Thank you!
",JohnnyTseng,rnystrom
344,2015-03-03 14:23:53,"I followed @secretiverhyme recommendation and tried out BKDeltaCalculator. I still face some issue when it come to wrapping delta changes in begin and end updates.

BKDeltaCalculator calculate insert and delete changes accurately, but at the same time it generates a lot of move changes that are resultant from the insert and delete changes. Technically they are accurate and when applied to UITableView, it work as expected, UITableView will not animate those extra move changes.

When I use it with ASTableView, I notice some issues. To better explains I had to use an example:

Lets say I have an initial array of `[ 1, 2, 3, 4, 5 ]`. I would like to insert `0` to the front and remove the last element, in this case `5`. The final array should look like `[ 0, 1, 2, 3, 4 ]`.

BKDeltaCalculator will generate the following delta results, insert at index 0, delete at index 4 and move at `0 to 1`, `1 to 2`, `2 to 3` and `3 to 4`.

If this is applied to `UITableView`, only the insert and delete are animated, the move are ignored.

If this is applied to `ASTableView`, the first node get a refresh but not updated, it is still showing the old node, even though the new node is being queried through `tableView:nodeForRowAtIndexPath:`.

Initially I thought if I calculated the correct move, things will work alright and true enough the problem is gone.

Then come another issue, If I ever use `reloadRowsAtIndexPaths:withRowAnimation:` in begin and end updates, it is unclear if the method uses the data prior to the begin and end updates or uses the latest state of the data.

Let say, I tried to reload the those unchanged cells (basically those cell that are calculated as moved in BKDeltaCalculator). If I use the old index paths, it will complains that the animation clashes with the insertion index (0). If I use the new index paths, it will complains that the animation clashes with the deletion index (4).

UITableView documents did specify that reload is similar to delete so it uses the old index paths.

This is currently my finding. I'll try to extend kitten to illustrates the problem if possible.
",lxcid,secretiverhyme
344,2015-03-09 19:27:11,"Btw, as @lxcid mentioned if I delete at index 0 and insert at index 0 within begin/end update umbrella, I get animations cannot be applied to the same element exception. Even though minor, I think it's a bug. Now, the original discussion started with slow reload, I don't know if you guys want to keep this one as discussion and have other issues as bugs? 
",asolakhyan,lxcid
344,2016-02-07 06:04:07,"@asolakhyan @lxcid @ryanfitz most of the issues touched on here have been resolved for quite a while, but the capstone is the following PR that just landed a few days ago: https://github.com/facebook/AsyncDisplayKit/pull/1173

Give it a try when you have a chance and let me know if there are any issues.

reloadRowsAtIndexPaths: should certainly be very efficient, so again let me know if there are issues you detect there.

reloadData Will be faster very soon, as soon as this other PR lands: https://github.com/facebook/AsyncDisplayKit/pull/1171 however, as has been extensively discussed here, Apps should strictly minimize use of record data in any case… The differing approaches mentioned are certainly a great way to do this.

Just as a reminder, if you are seeing issues with flashing, simply enable the .neverShowPlaceholders option on your ASCellNodes and you will still get concurrent rendering with a guarantee that Display is finished before the runloop is allowed to proceed, and thus before the next frame is composited.
",appleguy,lxcid
344,2016-02-07 06:04:07,"@asolakhyan @lxcid @ryanfitz most of the issues touched on here have been resolved for quite a while, but the capstone is the following PR that just landed a few days ago: https://github.com/facebook/AsyncDisplayKit/pull/1173

Give it a try when you have a chance and let me know if there are any issues.

reloadRowsAtIndexPaths: should certainly be very efficient, so again let me know if there are issues you detect there.

reloadData Will be faster very soon, as soon as this other PR lands: https://github.com/facebook/AsyncDisplayKit/pull/1171 however, as has been extensively discussed here, Apps should strictly minimize use of record data in any case… The differing approaches mentioned are certainly a great way to do this.

Just as a reminder, if you are seeing issues with flashing, simply enable the .neverShowPlaceholders option on your ASCellNodes and you will still get concurrent rendering with a guarantee that Display is finished before the runloop is allowed to proceed, and thus before the next frame is composited.
",appleguy,ryanfitz
341,2016-02-07 03:35:16,"@lxcid I just confirmed that this is still happening. Disappointed that it took a year to fix this bug, but at least I can say with confidence that the framework development has been focused on some really big things in the meantime. It is now absolutely time to clean up and improve the batch fetching APIs though. This will be fixed in the next release.

@maicki, this change reproduces the issue. If the user initiates a drag, even though it will rubber band back into place, that will trigger the load. I think that is why this issue has not been widely reported. Probably the right thing to do is to use a new Hook from the ranch controller to check whether a batch fetch needs to be triggered, because the range controller runs its update pass in a variety of situations including edit operations and the appearance or disappearance of cells.

-static const NSInteger kLitterSize = 20;            // intial number of kitten cells in ASTableView
+static const NSInteger kLitterSize = 1;            // intial number of kitten cells in ASTableView
",appleguy,lxcid
341,2016-04-20 02:51:44,"@maicki: thanks for fixing this long standing issue. @lxcid - Sorry this took so long to get around too. I hope you are still using ASDK. Let us know if we can help you out with any more issues. 
",appleguy,lxcid
341,2016-04-22 00:43:29,"@appleguy sorry for such late reply. I no longer have access to the codebase that integrate ASDK so it probably a little hard to verify them. Sorry!

We were still able to get it working great with minimal issue and a little bit of work around when I was there. Thanks for the great work from you and the team at Facebook/Pinterest!
",lxcid,appleguy
338,2015-02-26 05:15:12,"Merged #340, but keeping this issue open for discussion.  @tanliboy, can you sum up the pros and cons of async data fetching mode?  In what situations would you want to use synchronous data fetching?
",secretiverhyme,tanliboy
338,2015-03-10 20:27:13,"@tanliboy and @secretiverhyme  could you perhaps share the current plans for the future of the locking mechanism and the asynchronous fetching? I've been using it since it was released and I'm very happy with the results, though I of course fully realize that we need to take in account as much use cases as possible. 

While reading this discussion the following idea popped up in my head.

In light of the idea of creating ASDK components as drop in replacements for their UIKit counterparts, wouldn't it make things easier if we make ASCollectionView/ASTableView in sync fetching mode more like their UIKit counterparts? In the current implementation it's fine to call reloadData or the editing methods from a background queue, but as @cfcommando already pointed it this is already a departure from the way the UIKit components work. And I think that makes the use of ASDK more complex and increases the risk of errors because methods like nodeForItemAtIndexPath: can be called from any queue, and the implementation of that method needs to take that into account. If you'd have the ASDK components work on the main thread when they're in sync mode they would be a lot more like their UIKit counterparts.

I realize that this might go against the goals of ASDK but in my opinion it would make things more logical. That way you can just use it the same way you used the UIKit components and in this scenario you would still benefit from the preload ranges ASDK uses.

This would, in my opinion, also justify a more complex API for when you're using asynchronous fetching. You can use the ASDK components the same way you'd use the UIKit components and still benefit from some of the ASDK goodies but if you want the whole package you need to take that into account with your data management. 

That's my 2 cents, wondering how you guys see this.

## 

By the way I would also be more than willing to do some writing for the guides or create a sample project to make the asynchronous fetching API more accessible to other developers, once you make a decision about this part of the API. I was already thinking about putting the code of my data controllers (that replace nsfetchedresultscontroller and now have code for locking) on github anyway to discuss best approaches to the locking mechanism and help other developers.
",smeis,secretiverhyme
338,2015-03-10 20:27:13,"@tanliboy and @secretiverhyme  could you perhaps share the current plans for the future of the locking mechanism and the asynchronous fetching? I've been using it since it was released and I'm very happy with the results, though I of course fully realize that we need to take in account as much use cases as possible. 

While reading this discussion the following idea popped up in my head.

In light of the idea of creating ASDK components as drop in replacements for their UIKit counterparts, wouldn't it make things easier if we make ASCollectionView/ASTableView in sync fetching mode more like their UIKit counterparts? In the current implementation it's fine to call reloadData or the editing methods from a background queue, but as @cfcommando already pointed it this is already a departure from the way the UIKit components work. And I think that makes the use of ASDK more complex and increases the risk of errors because methods like nodeForItemAtIndexPath: can be called from any queue, and the implementation of that method needs to take that into account. If you'd have the ASDK components work on the main thread when they're in sync mode they would be a lot more like their UIKit counterparts.

I realize that this might go against the goals of ASDK but in my opinion it would make things more logical. That way you can just use it the same way you used the UIKit components and in this scenario you would still benefit from the preload ranges ASDK uses.

This would, in my opinion, also justify a more complex API for when you're using asynchronous fetching. You can use the ASDK components the same way you'd use the UIKit components and still benefit from some of the ASDK goodies but if you want the whole package you need to take that into account with your data management. 

That's my 2 cents, wondering how you guys see this.

## 

By the way I would also be more than willing to do some writing for the guides or create a sample project to make the asynchronous fetching API more accessible to other developers, once you make a decision about this part of the API. I was already thinking about putting the code of my data controllers (that replace nsfetchedresultscontroller and now have code for locking) on github anyway to discuss best approaches to the locking mechanism and help other developers.
",smeis,tanliboy
338,2016-02-07 05:59:49,"@cfcommando @ryanfitz @smeis Really happy to say that this has finally been done in a much better way.

https://github.com/facebook/AsyncDisplayKit/pull/1173

The asyncDataFetching option has been disabled, then deprecated for quite some time because of this problem.  So it hasn't been hurting folks.  Nodes are still pretty cheap to allocate, and so only complex apps or apps that add fairly expensive custom logic to init (perhaps data detectors or other things) will find this is essential, but it is so easy to adopt that there is no reason not to.

It allows us to concurrently allocate the cell nodes with the ""nodeBlock"" providing a simple and easy way to capture any required data model to initialize the node with.  It is up to the implementing engineer to realize they should not simply capture the indexPath and access their datasource within the block, but rather access the datasource and provide the result as the object to capture in the block.

In Pinterest, which has many complex views, this change made a very substantial difference.  It has proven stable so far, but is only days old and has not yet launched in a stable release (1.9.7 should include it in a couple weeks).

Please give it a try and file any issues you encounter, or send in feature requests.  Thanks again for your feedback and sorry this one took a while!
",appleguy,ryanfitz
338,2016-02-07 05:59:49,"@cfcommando @ryanfitz @smeis Really happy to say that this has finally been done in a much better way.

https://github.com/facebook/AsyncDisplayKit/pull/1173

The asyncDataFetching option has been disabled, then deprecated for quite some time because of this problem.  So it hasn't been hurting folks.  Nodes are still pretty cheap to allocate, and so only complex apps or apps that add fairly expensive custom logic to init (perhaps data detectors or other things) will find this is essential, but it is so easy to adopt that there is no reason not to.

It allows us to concurrently allocate the cell nodes with the ""nodeBlock"" providing a simple and easy way to capture any required data model to initialize the node with.  It is up to the implementing engineer to realize they should not simply capture the indexPath and access their datasource within the block, but rather access the datasource and provide the result as the object to capture in the block.

In Pinterest, which has many complex views, this change made a very substantial difference.  It has proven stable so far, but is only days old and has not yet launched in a stable release (1.9.7 should include it in a couple weeks).

Please give it a try and file any issues you encounter, or send in feature requests.  Thanks again for your feedback and sorry this one took a while!
",appleguy,smeis
336,2015-02-25 18:04:13,"@RCacheaux this is so great! Thank you for putting this up. I've been anxiously hoping your would :wink: 

I'll spin through it and take some notes. If you've got a sample project or anything to share too that would be amazing so we can experiment/tweak/profile things.

And keep us in the loop whenever you think its in a state to be merged. So awesome.
",rnystrom,RCacheaux
336,2015-02-25 19:39:48,"@rnystrom sounds great; I'll merge those branches into mine and get the layout controller conforming.

Yup, I think the only thing that's missing here is preloading in multiple dimensions. My initial thoughts are to build some type of hallo-like range that will pre-load the leading screenfuls on both axes in the direction of movement.

Agree on the Pinterest-esque demo! Would be sick.
",RCacheaux,rnystrom
334,2015-06-08 13:23:40,"Yes! @secretiverhyme's suggestion was perfect. By setting the `bounds` and `position` of a node, I had no trouble animating it.

@1nput0utput - are you still having issues?
",mmoutenot,secretiverhyme
334,2016-02-22 18:34:32,"@appleguy, I'll bite on the above since I'm trying to accomplish what sounds like a very similar thing. What I'm trying to do is create a subnode within an ASCellNode (with ASTableView) which holds an image placeholder at first (with a preferredFrameSize set to 200 height, say), then when the image finishes downloading I would like to: 
1. the placeholder should animate to the right height based on the image received, then 
2. The image should grow from the center and use a pop animation to 'spring' into the placeholder from the center (a grow effect) 

Right now in an attempt to get 1. working I am using the technique discussed in #718 to update layout, but what happens is that the image gets inserted first instantaneously, _and _then_ everything scoots down to fit it, but things are hidden behind the image in the transient state. 2 above I haven't even attempted yet as a result, but if you had any thoughts/issues/sample code you think would be helpful on one or both, it would be much appreciated!
",someone29926,appleguy
333,2015-02-25 19:33:05,"@secretiverhyme ah, ok. I'll kill this and send another PR up to get rid of the warnings in the unit tests then.
",rnystrom,secretiverhyme
329,2015-02-24 19:50:25,"Thanks @ocrickard!  I'll merge this in once Travis CI builds pass.
",secretiverhyme,ocrickard
327,2015-02-24 22:51:11,"@ocrickard thanks for your response, here's an updated screenshot where I commented out 
`node.truncationMode = NSLineBreakByTruncatingTail;` for both title (gray) and body (white) label nodes, but kept `maximumLineCount`. 

![ios simulator screen shot feb 25 2015 00 45 16](https://cloud.githubusercontent.com/assets/1830010/6361119/2c80c80a-bc88-11e4-823b-edd7d4f7ec7a.png)
",nivanchikov,ocrickard
326,2015-02-24 09:37:50,"@smeis:  Thanks for the suggestion. This worked for me.
But this might make my app unstable if there are any undetected and major bugs. Also, I have to do the testing for this framework also :(
",NareshKalakuntla,smeis
313,2016-02-07 02:21:53,"Hey, sorry we never got an official answer here, but I haven't noticed this issue myself. Please do reopen this task if you are seeing it with no latest version of Xcode, cocoapods, and The framework but I think it is likely that it has gone away with time :)  cc @ide @macistador 
",appleguy,ide
313,2016-02-08 09:44:17,"Ok no problemo @appleguy I will open it if I reproduce
",macistador,appleguy
312,2015-02-25 20:03:25,"@rnystrom This repository demonstrates the behavior: https://github.com/jeroenleenarts/SyncDisplayKitTrial

Look for the pragma mark ""change me to a higer value"" and change it's value to a higher value (beyond one page) and all works.
",jeroenleenarts,rnystrom
310,2015-11-01 03:52:24,"@phatmann hey, sorry it took literally months for me to reply here :).  I recently turned off placeholderEnabled by default on ASTextNode because of this.  You're absolutely right that there is some significant cost here.

My original intent for the text placeholder implementation was to use individual CALayers, with simple .backgroundColor values to avoid any memory allocation / backing stores as well as CPU drawing with CoreGraphics (both of which are happening with the current implementation).  There would be a way to do this super-efficiently by reusing a cache of CALayers maintained at the ASTextNode class level, where as soon as a node is finished rendering / can remove its placeholder state, the layers are tossed back in for reuse.  Layers are so vastly faster than views to add and remove (as well as create + destroy) that I'm pretty convinced this would be an extremely low overhead solution for this feature.

I'm going to repurpose this task to track implementing that improvement.  If anyone from the community can jump on this, I think it would be a pretty fun project :)
",appleguy,phatmann
310,2016-06-06 03:29:56,"@phatmann - thanks for suggesting this improvement! I'm going to move it to our new issue tracker. 

The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,phatmann
309,2015-02-16 19:33:34,"My suggestion is to wait until #258 is implemented and see if this issue is still a problem in practice. If not, we can close this and see if anyone complains :-) If it is still an issue, then a solution such as @tanliboy's is something to explore.

_A side note: one thing I love about the ADK team is their relentless drive to unblock the main thread. It is a damn hard problem but they have made incredible progress so far. My proof-of-concept app was so fast that I have permission to bring ADK into the production app. Woot!_
",phatmann,tanliboy
309,2016-04-02 05:27:33,"@phatmann: if you are still using the framework, check out the nodeBlock*: API. It allows the dataSource to return a block created on the main thread specifically so that any data model objects may be pulled out and preserved consistency with the indexPaths, but the cell node objects are then allocated and initialized concurrently in the background and subsequently also measured concurrently. 

This is a significant improvement over the previous behavior, but does not fundamentally address the fact that edit operations will block on unfinished concurrent background operations. This use case is far more painful in UIKit as it will block the main thread for the entire duration, and take roughly twice as long to complete text sizing as it is not concurrent. For the time being, the best solution is to ""virtualize"" the dataSource and inform the ASTableView about a smaller number of objects and add more as they are needed. 

This is a reasonable feature request, but will involve a pretty significant amount of work for a benefit that will not be at all detectable for most application access patterns. I will log the request in our internal bug tracker, and am happy to help you optimize out these kind of bottlenecks if your application is still being negatively affected by them. 
",appleguy,phatmann
309,2016-04-03 05:07:22,"@appleguy: thanks for the explanation. I agree that fixing this is not needed if overall measuring performance is fast enough.
",phatmann,appleguy
306,2016-03-11 22:23:27,"Finally getting around to closing out some of these older (resolved) open issues. :) ASPagerNode is available in the current build, thanks to Levi (#925)! @aaronschubert0 and others - please use it and file any potential issues you find / feedback you have! 
",appleguy,aaronschubert0
306,2016-03-12 09:26:08,"@appleguy Was thinking we should close older issues just yesterday! You & @levi will be happy to know, we're using ASPagerNode extensively already :)
",aaronschubert0,appleguy
303,2015-02-12 18:04:33,"@tanliboy, thanks for the explanation. Can we re-open and rename #288 (or file a new issue) to request a notification that all operations have been completed?
",phatmann,tanliboy
303,2015-02-12 22:37:27,"@phatmann , hmm, if we could solve the issue #309 , we may don't need the notifications any more.
I will think about that problem and update there.
",tanliboy,phatmann
302,2015-02-12 23:04:50,"@andyscott — sure, go for it!
",secretiverhyme,andyscott
299,2015-10-03 01:01:30,"@secretiverhyme I was able to reproduce this again with the current version (if delegate is not set, the cell's height will be 49.0f)
",RuiAAPeres,secretiverhyme
297,2015-02-08 19:02:50,"@kylehickinson  Oh! thank you so much! I'll give the update a try. 
",blessingLopes,kylehickinson
297,2015-02-08 22:11:25,"@secretiverhyme @kylehickinson 
You guys are the best!  Thanks!  I pulled in the latest update and it's working like a charm! 
Been testing it on an iPhone 5 and its really impressive how smooth the scrolling is now, was even able to apply a transform on each ASCeelNode for a custom animation when the device rotates. :dancer: 
I was feeling lucky so i tried a collectionView with 30000 images. It took 50s to load the app. Any tips on an elegant way around this kind of issue ? 
",blessingLopes,secretiverhyme
297,2015-02-08 22:11:25,"@secretiverhyme @kylehickinson 
You guys are the best!  Thanks!  I pulled in the latest update and it's working like a charm! 
Been testing it on an iPhone 5 and its really impressive how smooth the scrolling is now, was even able to apply a transform on each ASCeelNode for a custom animation when the device rotates. :dancer: 
I was feeling lucky so i tried a collectionView with 30000 images. It took 50s to load the app. Any tips on an elegant way around this kind of issue ? 
",blessingLopes,kylehickinson
297,2015-02-09 00:24:44,"@kylehickinson  Right now  my root UIviewController is holding this very simple ASCollectionView. The images are attatched to the ASCellNode class in collectionView(collectionView: ASCollectionView!, nodeForItemAtIndexPath indexPath: NSIndexPath!) with a constant size. The layout doesn't depended on the image in any way.
When the app loads, the nodes are sized and rendered asynchronously on a background thread (right?), but then the images are only displayed on screen after that process is done for all the cells. For a couple thousand  images this is actually pretty fast, only a few seconds, but it gets really bad beyond that.
I was thinking I could use the node's **displaysAsynchronously** flag to disable the async magic and perhaps force the images to display before the all the content is  fully-rendered and ready to go, but i haven't tried it yet. 
",blessingLopes,kylehickinson
297,2015-02-09 04:03:08,"Thanks @kylehickinson for the detailed illustration on the mechanism !
@blessingLopes, we do the cellNode allocation synchronically for keeping data consistent, which may take long initialization time when you try to initialize the ASCollectionView with a lot cells (like 30000 cells in your case). We are aware of this issue, but don't have a general solution yet. However, here is some suggestions that may could directly optimize the performance from the application code, FYI.
1) For memory usage: Try use ASLazyImageNode instead of UIImage view to achieve memory management and loading performance.
2) For ASCollectionView performance: Initialize the table with few cells (maybe 100 in your case, and you may only need to change the return value of ""numberOfItemsInSection""), and then call the ""insertItemsAtIndexPaths"" from background thread. In this case, we will do the allocation from the background thread although we still need to allocate all cells.
",tanliboy,kylehickinson
297,2015-02-09 04:06:59,"In general, if you're using ASNetworkImageNode or ASMultiplexImageNode, everything should Just Work(tm).  As to the 50-second slowdown on app launch... that's #288.

Unfortunately, in order to support edit/update methods on ASTableView and ASCollectionView, we had to make data loading thread-affined:  if you call `-insertSections:` on a background queue, nodes will be processed on that queue, but when UIKit initially renders ASTV and ASCV, it processes nodes on the main thread.  For now, you need to start out with an empty data source and then add all content (e.g., using `-insertSections:`) on a background queue to avoid blocking with large data sets.  This is clearly not great, but improving it is possible now that editing support has stabilised.  =]

@kylehickinson, here's a bit of context on `-willEnterHierarchy`/`-didExitHierarchy` and friends (cc @rnystrom, who's working on the changes described here in #285):

We originally built AsyncDisplayKit as a necessary first step before building [Paper](http://facebook.com/paper).  The Paper story strip isn't a UICollectionView and its working range isn't powered by ASRangeController.  Since it isn't a UIKit component and isn't based on view reuse, its working range directly corresponds to ""everything in the view hierarchy"" — Paper keeps many card nodes offscreen, and uses `-removeFromSuperview` to keep memory usage in check.  `-didExitHierarchy` was therefore the logical place to free up memory (images, text rendering objects, and the like).

Of course, this design doesn't work in apps that use standard UIKit components and navigation!  Even scrolling through an ASTableView or ASCollectionView is enough to trigger many `-willEnterHierarchy` and `-didExitHierarchy` calls as the cells are reused (NB: ASCellNodes are not reused, but their containing cells are).  So, we replaced `-willEnterHierarchy` with `-displayWillStart` and introduced `-reclaimMemory` in lieu of `-didExitHierarchy` (79e65342b1b1273130392d75867ded5d793a7074).

This works for nodes that implement custom drawing, as ASTextNode and ASImageNode do, but it's only a first step.  For the ASDK 1.2 release, we're changing these subclass hooks to something like this (method names not final):

**rendering range** — formerly ""working range"", most people won't need to use these:
- `-displayWillStart` — called as nodes enter the working range and first start rendering
- `-clearRendering` — called as nodes exit the rendering range and should clear their backing stores

**network range:**
- `-fetchRemoteContent` — the appropriate place for custom nodes to load data, e.g., downloading images from the network
- `-clearFetchedContent` — called as nodes exit the network range and should clear their fetched content

This should hopefully be clearer and offer more flexibility.  It'll be possible to tune the rendering and network ranges, and they'll differ by default.  This will let you, for example, keep a small number of fully-rendered decompressed JPEGs around (`layer.contents`) but store a larger number of downloaded compressed JPEGs (`.image`).
",secretiverhyme,kylehickinson
297,2015-02-09 06:11:13,"@secretiverhyme I'll be uploading my sample project soon, no problem :)
",blessingLopes,secretiverhyme
297,2015-02-09 14:30:46,"@kylehickinson @secretiverhyme 
Just added my sample ASCollectionView online. Hope I did it right :/  It's my 1st time using gitHub.
A Big thank you for your patience and suggestions!! :)
",blessingLopes,secretiverhyme
297,2015-02-09 14:30:46,"@kylehickinson @secretiverhyme 
Just added my sample ASCollectionView online. Hope I did it right :/  It's my 1st time using gitHub.
A Big thank you for your patience and suggestions!! :)
",blessingLopes,kylehickinson
297,2015-02-10 01:47:22,"@secretiverhyme 
Hi Nadine! i'm so happy you took a look at my code :) It means a world of help to get this kind of insight.
I'll definitely use your suggestion. Again, a big thank you. 
",blessingLopes,secretiverhyme
297,2015-02-10 01:54:56,"@secretiverhyme  -  will do  :) Good night.  
",blessingLopes,secretiverhyme
295,2015-02-11 21:01:21,"@tanliboy does this fix #292 as well?
",rnystrom,tanliboy
294,2015-02-07 21:22:12,"@andyscott I would avoid calling `-measure:` unless your node sizes itself based on content. Typically you would create an `ASDisplayNode` subclass and override `-calculateSizeThatFits:`, like we do [here](https://github.com/facebook/AsyncDisplayKit/blob/master/examples/Kittens/Sample/KittenNode.m#L127-136). In there you should call `-measure:` on subnodes. If you follow this pattern, no matter how deep your hierarchy is you should be just fine.

Adding a node's backing view/layer to another UIView will set the layer as needing display, the display runloop will eventually call `display` on the `CALayer`, which triggers the node machinery to do the async process. So you shouldn't have to worry about calling `-measure:` yourself.

Also remember that some of the benefit of using ASDK is to both asynchronously render **and size**. If you call `-measure:` in `-viewWillLayoutSubviews` you're sizing on the main thread.
",rnystrom,andyscott
292,2015-02-17 22:36:37,"@tanliboy, want to take a look?
",secretiverhyme,tanliboy
292,2015-02-18 03:54:29,"@lxcid , could you try to wrap the `reloadData` with `beginUpdate` and `endUpdate` ? 
In the initialization of ASTableView, the `reloadData` will be invoked. To reduce the initialization cost, we make `reloadData` to use batch update by default. Also, you could always group some operations (even not in single runloop) using `beginUpdate` and `endUpdate`.
",tanliboy,lxcid
291,2015-02-05 20:36:48,"@tanliboy, what do you think about adding a `-indexPathForNode:` method to ASTableView / ASCollectionView?  The ultimate goal of these classes is to let you use ASCellNodes as a complete replacement for UI{Table,Collection}ViewCells, including replacing cell-specific methods like the one here.
",secretiverhyme,tanliboy
291,2016-09-01 10:37:06,"@appleguy in 1.9.90 it is 
`- (NSIndexPath *)indexPathForNode:(ASCellNode *)cellNode;` for ASCollectionView, while it's
`- (nullable NSIndexPath *)indexPathForNode:(ASCellNode *)cellNode;` for ASTableView

The first one is incorrect since there is no nullability but it should be there, because it may return nil if no such nodes found
",spronin,appleguy
289,2015-02-04 21:27:51,"@tanliboy, want to delete the `#pragma mark Assertions` comment?
",secretiverhyme,tanliboy
288,2015-02-05 16:18:29,"@tanliboy, if you want sample code that shows the loading slowdown, just modify the Kittens sample to load a 1000 nodes instead of 20 and run in the simulator.

Do you want sample code to that illustrates the bad access error? Could be trickier since the problem is sporadic.
",phatmann,tanliboy
285,2015-02-23 21:34:58,"@secretiverhyme Pinging you to let you know that this should be ready for review!

Don't be frightened by all the red in `ASRangeController`. There was some leftover cruft that I didn't fully grok w/ the previous window-working-range hack that it turns out we didn't need. I gutted some of that and tested on the rest of our sample projects.
",rnystrom,secretiverhyme
285,2015-02-23 21:45:52,"@rnystrom — awesome, thanks!  GitHub reports merge conflicts; can you rebase?
",secretiverhyme,rnystrom
285,2015-02-23 22:04:43,"@smeis Great catch, thank you!

@secretiverhyme rebased :)
",rnystrom,secretiverhyme
285,2015-02-23 22:04:43,"@smeis Great catch, thank you!

@secretiverhyme rebased :)
",rnystrom,smeis
285,2015-02-25 18:45:31,"@secretiverhyme I wanted to deprecate `reclaimMemory` and `recursivelyReclaimMemory` since they've been around a little longer in case anyone is using them specifically. This way they get a compiler warning but not an error that requires actioning or downgrading. Sort of a friendly ""hey this is going away, but take your time"".

Removing them is easy, I just don't want to make updating from 1.1->1.2 a pain in the butt for anyone b/c we removed some methods.
",rnystrom,secretiverhyme
285,2015-02-26 00:08:31,"@rnystrom looks like ASRangeDelegate.h is missing, ran into this when merging for the collection view layout PR.
",RCacheaux,rnystrom
285,2015-02-26 05:11:27,"> @secretiverhyme I wanted to deprecate reclaimMemory and recursivelyReclaimMemory since they've been around a little longer in case anyone is using them specifically. This way they get a compiler warning but not an error that requires actioning or downgrading. Sort of a friendly ""hey this is going away, but take your time"".

Sounds good.  Let's ship this in 1.2 and nuke them in 1.3!

Bouncing back to your queue for merge conflicts — once we've rebased on master, let's land this thing!
",secretiverhyme,secretiverhyme
277,2015-02-03 19:54:46,"Thanks for the report @ulfie22! This one was kind of a doozy because its really bizarre that it works in Debug but not in Release. In theory, it _shouldn't_ work in Debug at all!

When you are [returning the node's view](https://github.com/ulfie22/SectionHeaderTest/blob/master/SectionHeaderTest/ViewController.m#L91) in `-tableView:viewForHeaderInSection:`, the view that is returned does **not** have a strong reference to the node, so it's reference count gets decreased and it's deallocated. If you override `dealloc` for `TableHeaderNode` you will see this.

@secretiverhyme's suggestion should do the trick. I created a really simple [pull request](https://github.com/ulfie22/SectionHeaderTest/pull/1) to demonstrate this.

As to why it works in Debug... it's got to do with some Core Animation magic. We create a reference to the node [here](https://github.com/facebook/AsyncDisplayKit/blob/32ca53fc611fb96bcd9220b473be130c94a3dabd/AsyncDisplayKit/Private/ASDisplayNodeInternal.h#L163) but let `CALayer` create its [own dynamic properties](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASDisplayNode.mm#L1752).

Again, great issue! This was a lot of fun to look into :smiley: 
",rnystrom,secretiverhyme
277,2015-02-03 23:36:54,"Thanks @rnystrom !!!!!!

I can confirm that you pull request performs as expected on the release build. I might have guessed that TableView magic would retain that header view, but even with that caching them will definitely save time on table changes and reloads.

I really appreciate your help with this!!
",ulfie22,rnystrom
267,2015-01-27 18:40:39,"Hey @andyscott, thanks for considering adding some features! Could you explain a little more about what you're planning on doing? I might not fully understand.

Are you thinking of doing something like this?

![text-fade](https://cloud.githubusercontent.com/assets/739696/5924472/eba1d46a-a610-11e4-9918-af55aefd7868.png)
",rnystrom,andyscott
263,2015-01-27 00:01:36,"Hey @ide, I actually brought this up a while back (#79), based on the discussion, it is intended behaviour to preserve proper text layout of the `ASTextNode` itself.
",kylehickinson,ide
263,2015-01-27 00:02:51,"Hah, @kylehickinson beat me to it.  Yes, this is intentional — this API is rather nonintuitive though, and could stand to be improved (or at least better-documented…).
",secretiverhyme,kylehickinson
263,2015-01-27 00:05:12,"Thanks for the context @kylehickinson. One thing that's different about what I'm proposing - if I'm reading the previous discussion correctly - is to outset the highlight layer instead of insetting the text node. This preserves the text layout, which could open the door for making the highlight layer automatic (since it doesn't affect layout)
",ide,kylehickinson
261,2016-02-07 02:27:44,"Yeah @appleguy I've got no idea. I haven't been working on this stuff for quite awhile.
",ocrickard,appleguy
261,2016-04-02 06:05:01,"@wockerwalker @lxcid - I fixed an issue with tail truncation a couple days ago and it significantly improved the behavior of this issue as well. It seems like there is still a change in rendering after scrolling down and after scrolling back when the #define in my .txt above is enabled. I would appreciate if either of you have time to try this out in any of your application that may have encountered the original issue and let me know if the behavior is resolved. 
",appleguy,lxcid
261,2016-06-06 02:16:01,"@hannahmbanana: thanks for confirming!
",appleguy,hannahmbanana
259,2016-03-25 20:09:43,"@secretiverhyme - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,secretiverhyme
255,2015-01-26 09:58:17,"I wrote substantial camera capture code (https://github.com/Basket/BKCameraController/blob/master/BKCameraController/BKCameraController.m and https://github.com/Basket/BKExample) and if @ide is okay with it perhaps we could take a look at integrating it into ASDK with the necessary modifications? I think it could exist in its own subspec/subfolder without substantial maintenance burden, unless you have specific concerns?

BTW a good example of subspec usage is FMDB: https://github.com/ccgus/fmdb/blob/master/FMDB.podspec
",toulouse,ide
252,2015-01-25 22:45:09,"@kylehickinson is correct.  @tanliboy is working on adding support for explicit update batches — for now, you should simply call `-insertRowsAtIndexPaths:…` directly.
",secretiverhyme,kylehickinson
252,2015-01-26 03:13:02,"thanks !  @secretiverhyme  @kylehickinson  
",duxinfeng,secretiverhyme
252,2015-01-26 03:13:02,"thanks !  @secretiverhyme  @kylehickinson  
",duxinfeng,kylehickinson
242,2015-02-12 00:38:39,"@tanliboy, can you add an assertion / graceful failure here?
",secretiverhyme,tanliboy
238,2015-01-23 22:49:39,"@rnystrom I attempted to add a `ASCollectionView` to cell of an `ASTableView` using the cells node subview. The follow exception gets thrown


",ryanfitz,rnystrom
235,2015-01-20 19:32:52,"Thanks for the pull request!

ASDisplayNode is intended to support synchronous wrapper nodes as first-class nodes — they should be indistinguishable from any other node with asynchronous display disabled.  So, instead of creating an additional wrapper-only node, we should fix these problems in the base node class.

It looks like this is more or less the same line of thought as #109 (which I haven't gotten to yet — sorry @aleclarson!).  @ide, if you'd like to hoist this functionality into the base node and add CALayer support, I'd be happy to merge it in and close both PRs.  =]
",secretiverhyme,ide
232,2015-01-26 11:26:16,"Thanks a lot @ide ! It worked well for me. One question I had was that does it also clear the cache from memory if it exceeds some limit?
",sharanshodhan,ide
232,2015-01-26 15:51:26,"Thanks a lot @ide ! It worked well for me!
",fanly,ide
232,2015-10-30 20:29:02,"Thanks @ide! This is awesome
",tettoffensive,ide
229,2016-04-02 05:55:47,"@ide @andyscott - I am internally tracking improvements to synchronous node wrapping that will call sizeToFit: on these elements automatically. I am also investigating if it makes sense to integrate with preferredFrameSize. Note that with the ASLayoutSpec system, there are a variety of new options for controlling layout. 

Please open a new issue if you have any layout related problems or feature requests. Overall, I would not expect a perfectly smooth experience integrating synchronous elements with non-trivial layout that you cannot express in terms of layoutSpecs. 
",appleguy,andyscott
229,2016-04-02 05:55:47,"@ide @andyscott - I am internally tracking improvements to synchronous node wrapping that will call sizeToFit: on these elements automatically. I am also investigating if it makes sense to integrate with preferredFrameSize. Note that with the ASLayoutSpec system, there are a variety of new options for controlling layout. 

Please open a new issue if you have any layout related problems or feature requests. Overall, I would not expect a perfectly smooth experience integrating synchronous elements with non-trivial layout that you cannot express in terms of layoutSpecs. 
",appleguy,ide
225,2016-04-02 05:52:10,"@ide @Adlai-Holler - the framework behavior is significantly improved in this respect. For the past several months, it is now the case that calling setNeedsLayout on any subnode should result in its containing hierarchy being remeasured, and if it is inside of an ASCellNode (used by a ASTable or ASCollection) than this will automatically trigger the cell to resize. By default, the resize is animated, although there is an option that you can set on any subnode of the cell that results in all layout changes to that cell not being animated. 

@nguyenhuy - are there any other improvements to this behavior that you think we should be tracking? In particular, is there some kind of issue specific to ASEditableTextNode? 

For anyone who has been following this, please comment if you have experienced any issues or have a related request. 
",appleguy,nguyenhuy
225,2016-04-02 05:52:10,"@ide @Adlai-Holler - the framework behavior is significantly improved in this respect. For the past several months, it is now the case that calling setNeedsLayout on any subnode should result in its containing hierarchy being remeasured, and if it is inside of an ASCellNode (used by a ASTable or ASCollection) than this will automatically trigger the cell to resize. By default, the resize is animated, although there is an option that you can set on any subnode of the cell that results in all layout changes to that cell not being animated. 

@nguyenhuy - are there any other improvements to this behavior that you think we should be tracking? In particular, is there some kind of issue specific to ASEditableTextNode? 

For anyone who has been following this, please comment if you have experienced any issues or have a related request. 
",appleguy,ide
225,2016-04-02 05:52:10,"@ide @Adlai-Holler - the framework behavior is significantly improved in this respect. For the past several months, it is now the case that calling setNeedsLayout on any subnode should result in its containing hierarchy being remeasured, and if it is inside of an ASCellNode (used by a ASTable or ASCollection) than this will automatically trigger the cell to resize. By default, the resize is animated, although there is an option that you can set on any subnode of the cell that results in all layout changes to that cell not being animated. 

@nguyenhuy - are there any other improvements to this behavior that you think we should be tracking? In particular, is there some kind of issue specific to ASEditableTextNode? 

For anyone who has been following this, please comment if you have experienced any issues or have a related request. 
",appleguy,Adlai-Holler
225,2016-04-27 06:42:47,"@ide: ASDK now supports an automatic, asynchronous, purely Objective-C layout feature which is based on CSS' flex box model.

Layout docs: http://asyncdisplaykit.org/docs/automatic-layout-basics.html

**Beta** Layout Transition API docs (easy animation between a node's layouts in response to some internal state change in a node): http://asyncdisplaykit.org/docs/layout-transition-api.html
",appleguy,ide
221,2015-01-14 23:33:38,"Nice catch @Jercik — thanks!
",secretiverhyme,Jercik
216,2015-01-26 09:30:15,"@secretiverhyme  Thanks ~  Yes, the same code behave differently on iOS6 and 7. It's really weird.

By the way, I have implement the textNode by using CoreText and so it can be used on iOS6. 
",yufenglv,secretiverhyme
216,2015-01-27 07:07:41,"@secretiverhyme Vary appreciate! I figure it out, with the code below it will be fine on iOS6. I don't konw why `UIView (ASDisplayNodeInternal)` implement the `setter` and `getter`, but `CALayer (ASDisplayNodeInternal)` didn't.

And Thanks for your advice about `CTFramesetterCreateWithAttributedString()`.  Thanks!


",yufenglv,secretiverhyme
216,2015-01-27 22:30:33,"@yufenglv — sure thing, glad you got it working!
",secretiverhyme,yufenglv
211,2015-01-22 19:07:47,"@secretiverhyme thanks for the info! I just installed 1.1.1 and I'm still seeing every ASCellNode init'ed for every item in the data source...any ideas?
",wockerwalker,secretiverhyme
211,2015-01-22 21:31:08,"@secretiverhyme: no, they aren’t blocking the initial content from appearing onscreen promptly. it’s helpful to know that the async allocation and measurement of all nodes is expected behavior. that said, even though initial content propagates without delay, the CPU churns for a long while finishing all the other inits and measurements in the background. for a larger data source (~1000+), it’s unfortunate to be initializing and measuring a cell hundreds or thousands of rows away that the user may never see. this seems like one of the only large conceptual disadvantages of ASTableView over the stock UITableView, which inits and calculates those heights on the fly. (i also consistently get memory warnings when working with a data source this large on ASDK.) this leads me to a few questions:
    - is this behavior expected to change in a future update?
    - in the meantime, are there best practices for keeping ASCellNode -init methods lightweight, and subsequently performing those aspects of initialization not impacting measurement closer to display time?
    - are there any workarounds, such as feeding the ASTableView data in chunks, that you would recommend?

thanks for your help and patience!
",wockerwalker,secretiverhyme
207,2015-03-16 20:58:55,"@secretiverhyme any update on this? :heart: 
",RuiAAPeres,secretiverhyme
202,2015-01-07 19:42:19,"I just tested this w/ the Kittens demo using 1000 nodes. It's beautiful and fast. Thanks so much @tanliboy 
",rnystrom,tanliboy
202,2015-01-07 22:53:40,"Glorious.  Thanks @tanliboy!
",secretiverhyme,tanliboy
200,2015-01-07 17:56:17,":clap: thanks @tanliboy 
",rnystrom,tanliboy
198,2015-01-06 22:48:16,"@ide I installed the 0.36 Cocoapods beta and tried to reproduce this error. I tried w/ Xcode 6.1 & 6.2 and for both iOS 7 and 8. I'm coming up short.

Would you mind detailing how you got this compiler error to appear?
",rnystrom,ide
198,2015-01-07 00:11:57,"@rnystrom I set up a new project for a basic iOS app in Xcode and added a simple Podfile. The key is that one of the Pods needs to be written in Swift (probably why you couldn't repro. sorry about that). A Swift dependency makes CocoaPods use frameworks instead of static libraries.



Then in AppDelegate.swift of the sample project I added `import AsyncDisplayKit` and got the error when building the app (also got a similar error when adding `@import AsyncDisplayKit;` to an Obj-C file). Importing the Synchronized framework works fine.
",ide,rnystrom
198,2015-02-13 06:04:09,"I have encountered this problem, and exactly the same @ide 's error, my Xcode  version 6.1.1(6A2008a)
posfile content:
source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '8.0'
pod 'AsyncDisplayKit', '1.1.1'

error msg:
/Users/xxxxxxxxx-cebqwgpjirlszrgigzwtdfqqahcz/Build/Products/Debug-iphonesimulator/Pods/AsyncDisplayKit.framework/Headers/ASTextNodeTextKitHelpers.h:15:18: error: ARC forbids Objective-C objects in struct
  NSTextStorage *textStorage;
                 ^
xxxxxxxx/xxxx/xingyu-Bridging-Header.h:9:9: error: could not build module 'AsyncDisplayKit'
#import <AsyncDisplayKit/AsyncDisplayKit.h>
        ^
<unknown>:0: error: failed to import bridging header '/Users/xxxxx/xxxx-Bridging-Header.h'
",wyxy2005,ide
198,2015-02-17 11:30:22,"@ide  I'm first reference the git repo in the Podfile is ok,but run command:""pod update"" will reproduction this error message.
",wyxy2005,ide
196,2015-01-02 19:25:06,"@kylehickinson is exactly right. The way that Auto Layout currently works is counter productive to what ASDK is trying to accomplish. Not to say you can't use Auto Layout in simple views and controllers in your app though! You could use AL for things like a signup workflow but then use ASDK for large, complex table views.
",rnystrom,kylehickinson
192,2014-12-30 02:35:45,"@rnystrom 
",MrReN,rnystrom
192,2015-01-06 07:50:45,"@rnystrom Hi, I have run into memory issue when using ASTableView.
 [ASImageNode displayWithParameters:]  The memory will continue increase when scrolling the tableview, event just scroll back.

And also, I implement a custom TMTextNode by CoreText. The memory also continues increase. I release the TMTextNodeRenderer when displayDidFinish and  reclaimMemory in TMTextNode. And the TMTextNodeRenderer object is released indeed but the memory still increase.

![2015-01-06 3 36 08](https://cloud.githubusercontent.com/assets/1837609/5625675/6668e5b0-95ba-11e4-811d-7c1c20ccdf0f.png)

![2015-01-06 3 36 24](https://cloud.githubusercontent.com/assets/1837609/5625669/5d50e81a-95ba-11e4-8a8d-23f8c72e5e9a.png)

![2015-01-06 3 36 48](https://cloud.githubusercontent.com/assets/1837609/5625736/8e3307f0-95bb-11e4-8efb-f0dfa473738e.png)
",yufenglv,rnystrom
192,2015-01-06 22:23:36,"@yufenglv could you provide a little more detail about your app's architecture? Also, is the memory usage linear? Are you using placeholders?

I did a little profiling and with 1000 nodes in our Kittens demo, memory usage flat lined.

There _is_ an initial memory hit from initializing all of your nodes into memory. However the footprint should be negligible.

Here's a screencap from my testing, you can see where memory consumption stabilizes:

![screen shot 2015-01-06 at 11 38 27 am](https://cloud.githubusercontent.com/assets/739696/5637336/9186a4cc-95af-11e4-9b9d-69263a5fea02.png)
",rnystrom,yufenglv
192,2015-01-07 05:17:32,"@yufenglv If you load a lot of pictures, use ASNetworkImageNode is not very smooth, and slide back and forth, memory has been increased,in the iphone4 and iphone4s Test
",MrReN,yufenglv
192,2015-01-08 14:31:35,"Thanks @MrReN @secretiverhyme @rnystrom !
And I try to use ASDisplayKit on iOS6， now I block by a problem. On iOS6, the node will not be released once its view has been loaded. It seems this line - `_view.asyncdisplaykit_node = self;` in `ASDisplayNode.mm` is the reason. Is there any difference when release the node on iOS6 and iOS7? or some advice ?  Thanks a lot!
",yufenglv,rnystrom
192,2015-01-08 14:31:35,"Thanks @MrReN @secretiverhyme @rnystrom !
And I try to use ASDisplayKit on iOS6， now I block by a problem. On iOS6, the node will not be released once its view has been loaded. It seems this line - `_view.asyncdisplaykit_node = self;` in `ASDisplayNode.mm` is the reason. Is there any difference when release the node on iOS6 and iOS7? or some advice ?  Thanks a lot!
",yufenglv,secretiverhyme
192,2015-01-08 16:34:16,"I am a Chinese developer, I wrote a Demo, hope you can connect Chinese network, and test. A memory leak is very serious, I don't know is it right? Maybe I'm understanding of the AsyncDisplayKit error, cause or some other reason.exmample:https://github.com/MrReN/_FaceBookTest  @secretiverhyme  @rnystrom ，This library is exciting, thank you for your hard work
",MrReN,rnystrom
192,2015-01-08 16:34:16,"I am a Chinese developer, I wrote a Demo, hope you can connect Chinese network, and test. A memory leak is very serious, I don't know is it right? Maybe I'm understanding of the AsyncDisplayKit error, cause or some other reason.exmample:https://github.com/MrReN/_FaceBookTest  @secretiverhyme  @rnystrom ，This library is exciting, thank you for your hard work
",MrReN,secretiverhyme
175,2015-02-02 19:24:16,"@ide, thanks for your suggestion and diving into the code path !
For ""reloadData"" of ASDataController, we want to make sure the compute extensive operations (e.g. layout) are done in background thread, so we do it in async mode and it may be batched in several groups for updating. On another hand, in the initialization of UITableView, the ""reloadData"" will be invoked by the UITableView on main thread. Delaying ""reloadData"" function call of UITableView after the updating of ""_nodes"" will block the initialization of UITableView. So we transferred it into ""insertion""and ""deletion"" operations. 
I have met the exception before, but got fixed fix in the 1.1 release. 
Do you still get the exception in master ? Do you call ""updateObjects"" from background thread ? 
",tanliboy,ide
175,2015-02-12 20:57:58,"@ide , do you mind to check out the branch https://github.com/facebook/AsyncDisplayKit/pull/296 to repro the crash, which I simulate your code but could not repro the crash there. 
",tanliboy,ide
175,2015-02-24 17:16:46,"Thanks @tanliboy, See my edit above.
",henryeverett,tanliboy
163,2014-12-16 20:43:40,"@yufenglv — please re-open this issue if you still run into this crash on the latest build.  =]
",secretiverhyme,yufenglv
159,2016-03-31 04:53:29,"@andyscott thank you for proactively reporting this and reopening the issue. It is been quite some time, and we now have a completely new image library available, which does work with Multiplex if you initialize it with a simple alloc/init.

I believe it should resolve this issue, but if you were still an active user of the framework, please check it out when you have a chance. Send me an email with your results, and I can also send you an invite to are slack channel if you would like! One of the members of the channel is the author of both the image library itself and its integration with ASDK :)
",appleguy,andyscott
159,2016-03-31 15:54:29,"@appleguy No worries!

I'm not actively doing any iOS development, at least for the time being. That being said, I still follow this project (even encouraging others at a Scala conference in Philly to give it a whirl). If the Slack channel invitation stands, I'll take you up on it.
",andyscott,appleguy
156,2014-12-16 18:08:13,"I love the idea. So a quick fade transition as opposed to how the contents snap in once rendered? We would probably want to make the option work with or without a placeholder, right @secretiverhyme?
",rnystrom,secretiverhyme
156,2015-01-28 12:03:50,"The current implementation of this feature does not appear to allow for custom placeholder image removal animations as @secretiverhyme suggested might be done in `-didFinishDisplay` (now `-displayDidFinish`?).

The placeholder layer (`_placeholderLayer`) is an internal member and provides no API to access it (though it might be blindly obtained using `self.layer.sublayers` on the node that owns said layer).

When `placeholderFadesOut` is true, the placeholder will fade out with a (almost unnoticeable) fixed duration of 0.1. When false, the placeholder layer is immediately removed, leaving no chance for it to be animated.

Have I missed something, or does the current implementation indeed prevent custom animations?
",ashikase,secretiverhyme
155,2015-03-16 14:56:49,"@yufenglv I'm experiencing the same problem, have you found a solution to this (except setting `shouldRasterizeDescendant` to `NO`?
",bsarrazin,yufenglv
155,2015-06-14 23:21:37,"@yufenglv & @bensarz , the offset issue is fixed.  I've tested this feature and haven't found a bug in the master version — so please do file a new task if you encounter an issue.  It would be very helpful to the project!
",appleguy,yufenglv
154,2014-12-18 12:14:19,"@aaronschubert0 I agree, that can work. But does it really okay for you, when you must observe value that way? You will get a ton of observation calls - every node insertion will generate that.
",RomanTruba,aaronschubert0
152,2015-01-13 19:54:42,"+1 @ocrickard.  An ASLabelNode that's a stripped-down counterpart to ASTextNode would be a useful addition to the framework, but using ASTextNodeRenderer directly rather than subclassing or expanding ASTextNode is the way to go.
",secretiverhyme,ocrickard
149,2014-12-11 00:41:41,"@kylehickinson That project definitely works (which is a good thing). I'll take a look at the implementation and compare to see where I've (likely) screwed up. Will let you know.
",bradleydwyer,kylehickinson
149,2014-12-11 00:44:29,"@secretiverhyme Also, are you guys aware that installing the pod (from head) will fail to compile due to the AssetsLibrary & Photos framework's missing?  Which is weird considering they're in the podspec
",kylehickinson,secretiverhyme
149,2014-12-11 01:28:00,"Nothing obvious is popping up.

I've moved around the UISwitch setup to didLoad and changed to the recommended init structure/ownership of the SwitchNode and UISwitch to no effect.

I also tried modifying the project @kylehickinson created so that there was a parent node above both the switchNode and displayNode but that did not trigger the issue.

So the only remaining difference that is obvious to me is the use of ASCellNode.

I'll modify the linked project to add an ASTableView and see what happens.
",bradleydwyer,kylehickinson
149,2014-12-11 02:02:52,"I've identified the trigger (at least in my case).

Setting the backgroundColor property of the ASDisplayNode (ASSwitchNode in this case) triggers the issue. In the original issue comment this is:



I tried triggering this on both a standalone ASSwitchNode and one that is a child of ASCellNode in the modified project from @kylehickinson and it worked as expected.

The only other difference I can see is I've assigned displaysAsynchronously = NO on this cell, however neither setting alters the behaviour.

I don't think I have much else to add at this point. Not setting the backgroundColor to UIColor.whiteColor seems to prevent the issue but I'm unable to replicate this outside my project.
",bradleydwyer,kylehickinson
149,2014-12-14 22:28:35,"> Also, are you guys aware that installing the pod (from head) will fail to compile due to the AssetsLibrary & Photos framework's missing? Which is weird considering they're in the podspec

@kylehickinson thanks for letting me know!  I'll look into this before publishing 1.1.

> Setting the backgroundColor property of the ASDisplayNode (ASSwitchNode in this case) triggers the issue.

Hm, curious.  ASDisplayNode's `.backgroundColor` property [is applied to its layer, not its view](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/Private/ASDisplayNode%2BUIViewBridge.mm#L385).  What happens if you override `-setBackgroundColor:` in SettingsSwitchNode?


",secretiverhyme,kylehickinson
148,2015-01-07 06:32:34,"@secretiverhyme 
",MrReN,secretiverhyme
134,2016-03-25 02:10:06,"@secretiverhyme @rnystrom @toulouse - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,rnystrom
134,2016-03-25 02:10:06,"@secretiverhyme @rnystrom @toulouse - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,secretiverhyme
134,2016-03-25 02:10:06,"@secretiverhyme @rnystrom @toulouse - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,toulouse
133,2015-11-01 03:34:07,"@SRandazzo @ryanfitz @ide not sure if any of you have run into this recently (still using ASDK by chance?  I'd be curious, as some of the earliest commenters on the project!).

ASCollectionNode has been available for a couple months, and I would like to add an ASTableNode soon.

The fabled ASPagerNode is a high priority for Pinterest and should be built & upstreamed by the end of December at the latest.
",appleguy,ryanfitz
133,2015-11-01 03:34:07,"@SRandazzo @ryanfitz @ide not sure if any of you have run into this recently (still using ASDK by chance?  I'd be curious, as some of the earliest commenters on the project!).

ASCollectionNode has been available for a couple months, and I would like to add an ASTableNode soon.

The fabled ASPagerNode is a high priority for Pinterest and should be built & upstreamed by the end of December at the latest.
",appleguy,SRandazzo
133,2015-11-01 03:34:07,"@SRandazzo @ryanfitz @ide not sure if any of you have run into this recently (still using ASDK by chance?  I'd be curious, as some of the earliest commenters on the project!).

ASCollectionNode has been available for a couple months, and I would like to add an ASTableNode soon.

The fabled ASPagerNode is a high priority for Pinterest and should be built & upstreamed by the end of December at the latest.
",appleguy,ide
133,2015-11-29 21:30:49,"@ide That's really cool!  I am quite excited to start seeing more large mobile apps written with RN.

FWIW, ASTableNode was added a few weeks back, so anyone following this task should take a look :)
",appleguy,ide
123,2015-01-13 15:53:58,"@secretiverhyme ++
",ocrickard,secretiverhyme
122,2014-12-02 15:04:39,"@secretiverhyme: I've pushed new commits to fix things that you mentioned. Not sure if I should squash all commits into 1 though.

> I'd also like to implement support for resizing cells, as an alternative to reloading them — this would animate a change to the node's frame, as opposed to blinking a cell out, replacing it with a placeholder, then blinking in a new one.

We should do that. @kyle-rosenbluth faced this problem before. I will make a new PR when time permits. Any idea about how this new resizing cells API would look like is very welcome :)
",nguyenhuy,secretiverhyme
122,2014-12-02 15:20:00,"@nguyenhuy , thanks for working on this !
I am working on the general editing function for AS Table & Collection.
It will override the changes for RangeController, and I will let you know once it is ready for review.
It would be great if you could hold for several day to avoid conflicts. Thanks !
",tanliboy,nguyenhuy
122,2014-12-16 00:30:37,"Editing support has landed.  @nguyenhuy, feel free to re-open this pull request if there's anything you'd like to add to @tanliboy's general implementation!  =]
",secretiverhyme,nguyenhuy
122,2014-12-16 00:30:37,"Editing support has landed.  @nguyenhuy, feel free to re-open this pull request if there's anything you'd like to add to @tanliboy's general implementation!  =]
",secretiverhyme,tanliboy
111,2014-11-16 19:25:55,"Very nice polish improvement; thank you @kylehickinson!

@ocrickard is one of the most familiar with this code, so I'll wait for him to have a look.
",appleguy,kylehickinson
110,2014-11-16 19:22:30,"@aleclarson thanks for the sample code.  Do you have any particular need to use nodes all the way up to the window level?  There isn't anything wrong with doing that, but one of the reasons ASTableView is a view instead of a node is that it will be a common transition point from views -> nodes.  So, it may be even easier to ditch the node wrapper on your window and table.

That said, I still like the principle here, but I'm not sure that loadNode is the right name for this functionality.  Further, it seems like there is a bit of a functionality clash between the Class-based initializers, and the block based initializer.  Perhaps we should standardize on the block and do something like initWithLoadBlock:
",appleguy,aleclarson
110,2014-11-17 20:37:55,"Hm.  ASTableView is an ideal view → node transition point, but there are clear reasons to want to use ASTableView in an all-node hierarchy.  Point-conversion methods can simply be replaced with their UIKit equivalents—



—but you'd want a coherent node hierarchy to enable preloading offscreen ASTableViews in, say, a tabbed or paging-based interface.

The current approach in this pull request is unsafe, and I'm not sure offhand whether any of AsyncDisplayKit's machinery will break if node hierarchies skip levels in their corresponding view hierarchies (`cell.supernode.view != cell.view.superview` — @appleguy, am I forgetting something?).  Assuming that's not problematic, we could add a new property to ASCellNode, set internally by ASTableView:



and do something like this (untested):



This is ugly, but par for the course with UIKit-AsyncDisplayKit bridging.  We shouldn't add special cases to the base ASDK logic — e.g., `_ASDisplayNodeFindClosestCommonAncestor()` shouldn't be aware of ASTableView — so this might be the best solution.  Thoughts?
",secretiverhyme,appleguy
109,2015-01-22 02:38:37,"Thanks @aleclarson!  Closing this in light of #235.
",secretiverhyme,aleclarson
101,2014-11-12 21:56:26,"Thank you, @nguyenhuy — this is a really important contribution, and we were literally starting to look at writing it this week.  It's a great surprise to be able to work from this point.

We are currently running tests with this code to understand its performance characteristics, including the relevance of the main thread costs of various aspects of the UICollectionView layout strategy.

Soon we will need to build ASPageNode (it should be a node so it can be used as a sub-node of table cells), and might actually be able to use ASCollectionView (-initWithViewClass:).
",appleguy,nguyenhuy
101,2014-11-13 06:55:01,"Thank you. I'm glad this helps.

> One complication: ASRangeController can compute working ranges for any single-axis scroll view (table views, flow layouts, …), but UICollectionView supports arbitrary layouts (like two-dimensional scrolling and panning). It might be worth replacing ASCalculateWorkingRange() with a block property, so collection views can have custom working-range logic for custom layouts.

@secretiverhyme: Agree. For a flexible layout like `UICollectionView`, I think it's important to provide a default implementation that works for most of the cases, and an option to inject custom logic when needed.

> We are currently running tests with this code to understand its performance characteristics, including the relevance of the main thread costs of various aspects of the UICollectionView layout strategy.

@appleguy: That sounds interesting. Please share any thing you'd find.

> Soon we will need to build ASPageNode (it should be a node so it can be used as a sub-node of table cells), and might actually be able to use ASCollectionView (-initWithViewClass:).

This is awesome :+1: 
",nguyenhuy,secretiverhyme
101,2014-11-13 06:55:01,"Thank you. I'm glad this helps.

> One complication: ASRangeController can compute working ranges for any single-axis scroll view (table views, flow layouts, …), but UICollectionView supports arbitrary layouts (like two-dimensional scrolling and panning). It might be worth replacing ASCalculateWorkingRange() with a block property, so collection views can have custom working-range logic for custom layouts.

@secretiverhyme: Agree. For a flexible layout like `UICollectionView`, I think it's important to provide a default implementation that works for most of the cases, and an option to inject custom logic when needed.

> We are currently running tests with this code to understand its performance characteristics, including the relevance of the main thread costs of various aspects of the UICollectionView layout strategy.

@appleguy: That sounds interesting. Please share any thing you'd find.

> Soon we will need to build ASPageNode (it should be a node so it can be used as a sub-node of table cells), and might actually be able to use ASCollectionView (-initWithViewClass:).

This is awesome :+1: 
",nguyenhuy,appleguy
101,2014-11-16 06:46:21,"We will likely be taking this change within the next day or two.  Thanks again for this—it's really awesome to see the community help improving this framework!

While certain UICV layout setups can be very expensive, I'm reassured that the basic use cases for flow layouts have acceptable performance to keep the substantial convenience of avoiding ASDK-specific layout classes.

@nguyenhuy have you thought about editing at all?  In parallel with looking at this, we're investigating ASTableView editing, and want to support ASCollectionView editing as soon as possible.  Let us know if you happen to start looking at editing so we can work together.
",appleguy,nguyenhuy
101,2014-11-18 03:03:51,"@nguyenhuy profiling your very helpful sample app did reveal some performance problems, the biggest one being that UICollectionView actually does a /huge/ amount of animation-related work when adding content...event when wrapped in the ""don't animate"" block.  I tried several workarounds for this, but it looks like a legitimate framework bug.  The result is a terrifying 2,000ms of blocking the main thread after starting the test app, on an iPhone 4S.

I was able to optimize a few things in ASRangeController, and also increase the sizing blocks so that we call into UICollectionView less often.  We're looking into this more deeply as part of editing support.  Needless to say, the code you have provided makes a really valuable starting point for all of our future changes to ASCollectionView, so I'm merging these diffs and we'll go from there.  Thanks again for your support!
",appleguy,nguyenhuy
99,2015-01-26 21:02:44,"@Jercik, you're right that [re-implementing UIScrollView](http://oleb.net/blog/2014/04/understanding-uiscrollview/) is [pretty straightforward](http://oleb.net/blog/2014/05/scrollview-inertia-bouncing-rubberbanding/).  The critical distinction here is that ASTextNode substantially benefits from asynchronous sizing and rendering, but any UIScrollView implementation will only ever be concerned with synchronous behaviour.  Since ASTableView and ASCollectionView are not nodes and will still inherit from UIScrollView even if we build a custom scroll node, we're not left with a compelling enough reason to reinvent this particular wheel.
",secretiverhyme,Jercik
95,2014-11-08 09:34:13,"@nguyenhuy That did the trick! Thanks! :+1: 
",katopz,nguyenhuy
94,2014-11-08 21:44:51,"Thanks for asking, @aleclarson!  Happy to help.  We'll update the documentations on these points when time is available.

isRasterizing will only ever be YES if your app does use subtree rasterization (you have to explicitly turn it on).  When this method is called for any node in a subtree that is marked for rasterization, the current graphics context (which is affected by things like [[UIColor whiteColor] set]) is a ""shared"" context that is moved around and clipped according to the node being asked to draw.  In some cases, you may want to set a special blend mode to change how the content is composited together.  In fact, you can use this technique to achieve visual effects that are not directly supported by Core Animation's compositor.

isCancelled is a block (called isCancelledBlock) that you can call periodically in your draw implementation to bail out of drawing early if it is no longer needed.  Imagine an app with a very complex type of view, such as a custom vector map, and the user is scrolling past many of them quickly.  When they are far enough off screen (as defined by the working range adjustments on ASRangeController, or your own similar mechanism), any rendering in progress should be cancelled with recursiveSetPreventOrCancelDisplay:.  If you don't do this, the new content coming onscreen may be queued behind a long list of other things trying to render, many of which may not be important anymore.

Library class like ASTextNode already implement this cancellation behavior for you.  It's important to note that not all rendering operations can be cancelled at any point.  In the middle of decoding an image, for example, there isn't a good way to abort the operation.  But, for multi-stage operations (such as ASTextNode drawing a gaussian shadow with text or other effects), you can call the isCancelledBlock in between them, and if it returns YES, clean up and return from the draw method as soon as possible (because any further work would be wasted).

Hopefully the stream-of-consciousness explanation makes sense, and please feel free to post in Paper Engineering Community (https://www.facebook.com/groups/551597518288687/) with any other questions you can think of :)
",appleguy,aleclarson
89,2015-03-04 21:25:44,"@ocrickard, @secretiverhyme 
I faced the alignment issue after the fix was introduced in #329.

![img_0324](https://cloud.githubusercontent.com/assets/1830010/6493524/e6c2dba4-c2c3-11e4-8046-b3caf0e4fe88.PNG)

Here's my setup  



What I've noticed is that `- (void)setBounds:(CGRect)bounds` is not called on `ASTextNode`, so the fix does not apply. I assume it happens because the node has a layer, here's an excerpt from `- (void)setFrame:(CGRect)rect` for `ASDisplayNode`:



So I tried to override `- (void)setFrame:(CGRect)rect` on `ASTextNode` instead of  `- (void)setBounds:(CGRect)bounds` and it gave the result I was looking for (with same code as @ocrickard suggested):



Result:
![img_0325](https://cloud.githubusercontent.com/assets/1830010/6493784/ad746186-c2c5-11e4-84e1-79f5a5d8fdbd.PNG)

So I wanted to ask whether that is a vital solution or not? Am I also right that my solution applies only if the node is built on main thread? (as for the moment I perform the reloads of my collectionView on main thread)
",nivanchikov,secretiverhyme
89,2015-03-04 21:25:44,"@ocrickard, @secretiverhyme 
I faced the alignment issue after the fix was introduced in #329.

![img_0324](https://cloud.githubusercontent.com/assets/1830010/6493524/e6c2dba4-c2c3-11e4-8046-b3caf0e4fe88.PNG)

Here's my setup  



What I've noticed is that `- (void)setBounds:(CGRect)bounds` is not called on `ASTextNode`, so the fix does not apply. I assume it happens because the node has a layer, here's an excerpt from `- (void)setFrame:(CGRect)rect` for `ASDisplayNode`:



So I tried to override `- (void)setFrame:(CGRect)rect` on `ASTextNode` instead of  `- (void)setBounds:(CGRect)bounds` and it gave the result I was looking for (with same code as @ocrickard suggested):



Result:
![img_0325](https://cloud.githubusercontent.com/assets/1830010/6493784/ad746186-c2c5-11e4-84e1-79f5a5d8fdbd.PNG)

So I wanted to ask whether that is a vital solution or not? Am I also right that my solution applies only if the node is built on main thread? (as for the moment I perform the reloads of my collectionView on main thread)
",nivanchikov,ocrickard
89,2016-01-27 11:40:46,"@aaronschubert0 Yes it's working fine after updating to 1.9.6. Thanks for the update.
",gauravmnit07,aaronschubert0
87,2014-11-03 18:40:04,"@raphaelmor, thank you!
",appleguy,raphaelmor
73,2014-10-24 00:49:45,"@l4u thank you for the report!  See my comment in task #74 —we will try to fix this ASAP.
",appleguy,l4u
71,2014-10-22 21:59:02,"@rainypixels — thanks!  ^.^
",secretiverhyme,rainypixels
70,2014-10-22 22:14:08,"thanks for the answer @appleguy. I actually got another question: how does Components looks like? As in, is it a class that just encapsulate a piece of a `UIView`? At first I thought it could potentially encapsulate a `CALAyer` but then again you need the interactivity (clicking the like button for example). Could you give a brief description about what a Component is and what's its interaction with UIKit? In the end that ""Story"", that belongs to a ""Feed"", need to be showed in a VC's root view, correct?
",RuiAAPeres,appleguy
70,2014-10-28 14:09:09,"@appleguy I wanted to know a bit more, specially how a .h/interface would look like, plus how is it layered on (hierarchy speaking: (Something -> View -> Layer, etc)). But I understand you guys want to keep this ""private"" for the time being. Hopefully, we can see more articles related to how you work on Facebook and how has your experience being doing all this stuff. I think you guys are in a unique position to help the community and I am really thankful for all the things you have released. Speaking of articles, where would be the right place to keep an eye on? [facebook.com/engineering](https://www.facebook.com/Engineering)? 
",RuiAAPeres,appleguy
70,2014-12-04 13:21:39,"Thanks @secretiverhyme for the heads up. :+1: 
",RuiAAPeres,secretiverhyme
59,2015-11-01 03:28:22,"@aaronschubert0 ran across this old task...we should do it soon!
",appleguy,aaronschubert0
59,2015-11-02 20:09:35,"Ha, good find @appleguy ! This is would be a really awesome node to be honest. The live MKMapView sounds even better! I think I might actually go ahead and give this a shot! Any design considerations I should be aware of, before I start?
",aaronschubert0,appleguy
59,2015-12-07 05:13:38,"@aaronschubert0 Thanks so much for implementing this.  It was an awesome ""present"" to hear from you on Nov 2nd (my birthday) that you would build this for the community.  Congratulations on it launching in 1.9.3!  Double win for closing one of our earliest feature requests.
",appleguy,aaronschubert0
59,2015-12-07 11:39:12,"Thanks @appleguy! That's awesome, I didn't know that. Yeah it's great to be contributing to the project. It's a really great environment to be part of. Hopefully more contributions to come in the future :)
",aaronschubert0,appleguy
58,2014-10-19 18:21:26,"Thanks for chiming in @grp -- I figured the same thing.

@ianolito do you know of behavior of the kCA\* actions that implies they will be unsuitable for implementing the keepalive?  Shortly before launch (and before this task) I noticed that the -willEnterHierarchy and -didExitHierarchy calls behaved slightly different for view-backed and layer-backed nodes, and I have a personal task filed to unify both of them so they are driven by the kCA actions (even when the UIKit calls are available, just don't use them for consistency).

My hope is that in the same diff I can just change the keepalive to be driven by the same methods, and hold a strict guarantee that there are no unintuitive behavior changes when enabling layer-backing (the only ones being core UIView features not being called / used, like touch handling and fine-grained accessibility).
",appleguy,ianolito
58,2014-10-19 20:37:05,"The problem with the kCAOrderIn style actions is that they also trigger for .hidden, so it's not a complete replacement. Also, UIView wants to be the delegate of the layer so you'd need to handle those and pass them on within AsyncView to the node.

I think conceptually the .hidden is surprising for users but I didn't see another simple way to accomplish this with layer apis.

> Le Oct 19, 2014 à 19:21, appleguy notifications@github.com a écrit :
> 
> Thanks for chiming in @grp -- I figured the same thing.
> 
> @ianolito do you know of behavior of the kCA\* actions that implies they will be unsuitable for implementing the keepalive? Shortly before launch (and before this task) I noticed that the -willEnterHierarchy and -didExitHierarchy calls behaved slightly different for view-backed and layer-backed nodes, and I have a personal task filed to unify both of them so they are driven by the kCA actions (even when the UIKit calls are available, just don't use them for consistency).
> 
> My hope is that in the same diff I can just change the keepalive to be driven by the same methods, and hold a strict guarantee that there are no unintuitive behavior changes when enabling layer-backing (the only ones being core UIView features not being called / used, like touch handling and fine-grained accessibility).
> 
> —
> Reply to this email directly or view it on GitHub.
",darknoon,ianolito
57,2014-10-17 01:37:19,"@l4u thank you for providing the sample project!!  I've tried several things, and am unable to get it to build (the cocoapod configuration appears to be messed up).  If you have time to fix it so that a typical pod install call will work, that would be great (I tried having a local checkout of AsyncDisplayKit where the path points to, and still no luck).

I appreciate you reporting this issue.  Another alternative would be to copy/paste the stack trace you are seeing and any other console logs.
",appleguy,l4u
57,2014-10-17 10:03:57,"@appleguy @l4u I can reproduce  on the device (iPhone 4S iOS 8.0.2) 

The _imageNode.nodeLoaded property become YES at this line (it should be NO):

https://github.com/facebook/AsyncDisplayKit/blob/master/examples/Kittens/Sample/KittenNode.m#L148

Accessing the `nodeLoaded` property is not safe here, maybe ASDisplayNode should provide some mechanism to perform a block with this property locked.
",lldong,appleguy
57,2014-10-17 10:03:57,"@appleguy @l4u I can reproduce  on the device (iPhone 4S iOS 8.0.2) 

The _imageNode.nodeLoaded property become YES at this line (it should be NO):

https://github.com/facebook/AsyncDisplayKit/blob/master/examples/Kittens/Sample/KittenNode.m#L148

Accessing the `nodeLoaded` property is not safe here, maybe ASDisplayNode should provide some mechanism to perform a block with this property locked.
",lldong,l4u
57,2014-10-17 10:56:39,"@l4u with your sample code I also encounter another crash at this line：



https://github.com/facebook/AsyncDisplayKit/blob/c1f7d9f78d721ab5d5fa590f7decb2bc97ec4d62/AsyncDisplayKit/Details/ASRangeController.mm#L539

When you switch pages fast enough, the ViewController is deallocated, but the sizing task is still running and will get a nil _delegate.
",lldong,l4u
57,2014-10-19 18:17:59,"@l4u @lldong, I verified this issue late last week and we have a fix planned (should be landing in the coming week).

Basically, ASImageNode should allow you to set the .image property off the main thread, even after its corresponding view has been created.  It's a simple error that it is asserting thread affinity, because it already has locking installed to protect the property during use on multiple threads.

Thanks again for reporting this (and providing the sample project, which I got to work).  Apologies for the inconvenience here, and let us know if you have any other questions about the framework!
",appleguy,l4u
57,2014-10-19 18:17:59,"@l4u @lldong, I verified this issue late last week and we have a fix planned (should be landing in the coming week).

Basically, ASImageNode should allow you to set the .image property off the main thread, even after its corresponding view has been created.  It's a simple error that it is asserting thread affinity, because it already has locking installed to protect the property during use on multiple threads.

Thanks again for reporting this (and providing the sample project, which I got to work).  Apologies for the inconvenience here, and let us know if you have any other questions about the framework!
",appleguy,lldong
57,2014-10-22 20:56:43,"@l4u — both of these issues should now be fixed.  Thanks for the report and sample project!
",secretiverhyme,l4u
53,2014-10-16 22:02:02,"@secretiverhyme The changes I made were necessary for me to build a static library from `AsyncDisplayKit.xcodeproj` without running `pod install`. #54 seems to address an additional issue that come up when the xcodeproj is integrated into another project as a build phase.

The changes I made to the `Podfile`'s were only made because it also seemed like a good idea to remove `OCMock`, as it looks like everything is `XCTest`-based now.

Regardless, thanks for getting back about this, and explaining future plans a bit more!
",zadr,secretiverhyme
41,2014-10-15 04:14:04,"@RCacheaux - This makes sense for completeness, but honestly I haven't thought through the correct behavior of preventOrCancelDisplay in this scenario.

Imagine you have a precompositing node that has preventOrCancelDisplay == NO, and only some of its subnodes have it set to YES.  When the precompositing node needs to display, should the software compositing simply skip over any nodes marked YES?  This would be pretty odd, but it probably makes the most sense if someone actually does do that with the framework.  However I'm sure it wouldn't work that way currently.

Let me know what you would expect from the framework in this scenario.  I assume you ran into this while testing precompositing, and any other feedback or bug reports about it would be much appreciated!  This feature is used in Paper, but it does not have as broad a number of use cases as the rest of the framework, so there are likely corner cases such as this that would be really valuable to us to clean up.
",appleguy,RCacheaux
41,2014-10-15 14:08:14,"@appleguy I agree that it would be odd to have some subnodes of a precompositing node with preventOrCancelDisplay == YES while the rasterization container is set to NO. Ideally, I think that the entire node hierarchy under a rasterization container should either have preventOrCancelDisplay set to YES or NO. I suppose recursiveSetPreventOrCancelDisplay could assert that the initial node called is not a subnode of a rasterization container. Additionally, setting preventOrCancelDisplay could also assert on rasterization container subnodes. Those are my initial thoughts.

The use case that brought this to light is a rasterized node hierarchy in which one of the subnodes is an image node that uses the image modification block to apply a blur using Accelerate. The blur operation takes a while on older hardware so I build in a cancelation mechanism that checks preventOrCancelDisplay on the image node. I was calling recursiveSetPreventOrCancelDisplay on the root node expecting it to set its children to YES so that the blur operation would pick up the cancellation.
",RCacheaux,appleguy
38,2014-10-10 19:06:26,"Pull request merged — thanks @ianolito!  We can modify the teardown code slightly and it should work:


",secretiverhyme,ianolito
37,2014-10-15 02:02:37,"Indeed, fixed (verified with your test case @Jercik — very helpful, thank you!)
",appleguy,Jercik
33,2014-10-15 05:45:14,"@toulouse, I don't immediately understand where we would add support for this.  To which class, ASTextNode?  Do you have an example use case in mind?

Being honest, there are quite a few improvements we have in mind for the framework and they'll take a pretty long time to get to — I suspect this one is wishlist priority due to few clients who would use it, but if it proves valuable for an app you're working on, I would certainly be open merging a diff that adds this with a carefully thought through API surface.
",appleguy,toulouse
33,2016-03-25 19:47:08,"@toulouse @ocrickard - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,ocrickard
33,2016-03-25 19:47:08,"@toulouse @ocrickard - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,toulouse
26,2014-10-15 04:23:13,"Thanks for implementing this @toulouse !  I'll make a new task to go back and add annotations for other methods this would be useful for.
",appleguy,toulouse
18,2014-09-05 18:02:54,"Merged.  Thanks @raphaelmor!
",secretiverhyme,raphaelmor
12,2014-08-09 05:44:01,"Awesome, thanks @acoomans!  =]
",secretiverhyme,acoomans
11,2014-08-06 12:38:49,"@appleguy , I subclass `_ASDisplayView` to achieve,
1. Make the node remain asynchronous , I thought `-initWithViewClass` will make it synchronous by default.
2. Override `UIResponder` methods (`canPerformAction:withSender:`, etc) and `UIResponderStandardEditActions` to make a node **copiable**. (presenting `UIMenuController`)

Any other suggestion to do this without subclassing `_ASDisplayView`?
",zetachang,appleguy
11,2014-08-07 00:45:31,"I suspect the ideal solution here would be to add `UIResponderStandardEditActions` and these override points to `ASDisplayNode` itself — that would let you enable `UIMenuController` on an arbitrary node without needing to set a custom view class.  @appleguy probably has more thoughts here.
",secretiverhyme,appleguy
11,2014-10-15 05:48:39,"Agree with @toulouse.  @czechboy0, do you have any interest in crafting a diff to _ASDisplayView that achieves the same purpose as your subclass?  It seems like this would only be moderately complex, although we have a few things that are higher priority than this right now, so it would take a while for the internal team to get to.

This is definitely useful functionality and a very good suggestion I hadn't thought of :)
",appleguy,toulouse
11,2016-03-25 02:08:26,"@czechboy0 @secretiverhyme @zetachang @toulouse - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,secretiverhyme
11,2016-03-25 02:08:26,"@czechboy0 @secretiverhyme @zetachang @toulouse - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,toulouse
8,2016-03-25 19:49:06,"@toulouse - The community is planning an exciting long term road map for the project and getting organized around how to deliver these feature requests. We are moving to a new issue tracker with more sophisticated planning capabilities (check out www.realArtists.com and their new product: Ship!). 

If you are interested in helping contribute to this component or any other, don’t hesitate to send me an email at AsyncDisplayKit@gmail.com. If you would like to contribute for a few weeks, I can also add you to our Ship bug tracker so that you can see what everyone is working on and actively coordinate with us. 

As always, keep filing issues and submitting pull requests here on Github and we will only move things to the new tracker if they require long term coordination. 
",appleguy,toulouse
3219,2017-03-24 20:45:52,"I'd like to share my vision of ASCollectionNode, now that we have #3017 and #3130 in pretty good shape to form a foundation of the following projects:
1. Give back control to collection layout objects and eliminate layout inspector, layout facilitator, etc.
2. Have `ASDataController`, `ASRangeController` and `ASCollectionLayout`s to be decoupled from `ASCollectionView` and instead rely on `ASCollectionNode`. With this, we'll be able to do the initial `reloadData`, prepare collection layout and preload cells before the view is even allocated.
3. Introduce measure range (and even allocate range in the far future): `ASDataController` won't allocate and measure all cell nodes in one go, but instead delegate to its layout delegate, such as `ASCollection(Gallery|Pager)FlowLayout` (#2979).
4. Interface-state-aware `ASCollectionNode`:
    - When a collection node enters preload state, it triggers the initial `reloadData` and then preloads ""visible"" cells. Those cells should be in preload state and start fetching images, etc. A collection node that is in preload state should have its own visible range of 0, display range of 0 and preload range of 1.
    - When it enters display state, it allocates its collection view and renders. Its visible range at this stage is 0, render range is 1 and preload range is bigger than that.
   - When it finally enters visible range, its visible cells should all be ready and it uses the normal ranges.
   - With this system, nest collection nodes (e.g closeup) will be much better supported. Currently we can't perform initial `reloadData`, prepare the collection layouts and preload visible cells (e.g pin image) of sub-collection-cell-nodes (e.g close gallery cell) until they enter display range of the containing collection (e.g closeup gallery pager) and have their view allocated.

All of these projects won't be realized without the help and feedbacks of core team members, especially @Adlai-Holler, as well as other community members. So please leave comments!",nguyenhuy,Adlai-Holler
3212,2017-03-22 18:23:18,"If you run `pod install` on most of our examples, you get this error:



This is really irritating.
- The `Podfile` doesn't specify the `PINRemoteImage/iOS` dependency. It's specified in `AsyncDisplayKit.podspec`.
- Our podspec specifically requests the pre-release version of PINRemoteImage.
- So I believe that running `pod update PINRemoteImage/iOS` in each example once will save this from being a problem in the future, but I'm not sure.
- There is no `Podfile.lock` checked in for the examples, so I'm not sure how CocoaPods is determining that we were using a naïve previous resolver.

Thoughts @maicki @nguyenhuy ?",Adlai-Holler,nguyenhuy
3212,2017-03-22 18:23:18,"If you run `pod install` on most of our examples, you get this error:



This is really irritating.
- The `Podfile` doesn't specify the `PINRemoteImage/iOS` dependency. It's specified in `AsyncDisplayKit.podspec`.
- Our podspec specifically requests the pre-release version of PINRemoteImage.
- So I believe that running `pod update PINRemoteImage/iOS` in each example once will save this from being a problem in the future, but I'm not sure.
- There is no `Podfile.lock` checked in for the examples, so I'm not sure how CocoaPods is determining that we were using a naïve previous resolver.

Thoughts @maicki @nguyenhuy ?",Adlai-Holler,maicki
3210,2017-03-22 15:34:09,"Thanks for the review/suggestion, @maicki! ",rcancro,maicki
3200,2017-03-20 19:24:37,@rcancro: Appreciate your inputs here as well!,nguyenhuy,rcancro
3200,2017-03-21 17:41:12,@Adlai-Holler Addressed your comments. Please take another look. Thanks!,nguyenhuy,Adlai-Holler
3193,2017-03-20 02:40:30,"@ImJCabus Hey! The core team had a discussion about this PR and we decided against bringing it in for now. We are trying to limit complexity in ASDisplayNode for now and there are some good ways around this (e.g. the visible state changes discussed with @appleguy in the Slack channel). Although we didn't merge this PR, we are really appreciated it and we hope we will see more in the future. Thanks!",maicki,appleguy
3190,2017-03-16 09:52:28,"Hi guys,

Following #3112 I'm submitting this PR to solve the bridging crashes I was experiencing when implementing `ASImageCacheProtocol` in Swift.
A sample project showcasing the problem can be found here: https://github.com/flovouin/ASDK-ASImageCacheProtocolBridge
The problem is that `clearFetchedImageFromCacheWithURL` is sometimes called with a `nil` URL when it shouldn't.

So I double checked all the calls to `ASImageCacheProtocol` and `ASImageDownloaderProtocol` in the ASDK codebase and came up with the following PR.

- The first commit ensures that the image nodes never call the image protocols methods with a `nil` URL / identifier when they shouldn't. The only place where I am not entirely sure whether the URL can be `nil` is in the [ASNetworkImageNode](https://github.com/flovouin/AsyncDisplayKit/blob/d1e7759e7835521b2b1b9b00a9fae7bea7a70185/Source/ASNetworkImageNode.mm#L505). It would seem that `_downloadImageWithCompletion` is only called if `_URL != nil`, but as there's some multi thread funkyness happening, I'm not sure it is safe to assume. If someone who has more experience than me could review this part, that'd be nice :-)
- The second commit removes unnecessary checks for `nil` identifiers in image downloaders, as they are declared as `nonnull` in the protocol definitions.

@maicki was suggesting in #3112 to have `synchronouslyFetchedCachedImageWithURL` accept a `nullable` URL, which is actually already the case, although I'm not sure it really makes sense: why would you ask for the resource corresponding to a `nil` URL, especially if you already know the result? Also, this method is currently only called with a (explicitly checked) non-nil URL in the codebase. Finally, its documentation seems outdated as it references a `completion` block that does not exist in the method prototype. However I did not amend it for the time being, please tell me if you want me to do so :-) I personally would be in favour of making the URL argument `nonnull`.

This PR solves the crashes demonstrated by the sample project, but I'm willing to make more changes if you have any remarks!

Cheers,
Flo",flovouin,maicki
3190,2017-03-17 07:25:24,"Thanks for the review @maicki ! There, I made the requested changes. If there's anything else I can do, just ask :-)",flovouin,maicki
3187,2017-03-22 14:31:56,@Adlai-Holler @nguyenhuy Could you please take a another look at this. Thanks!,maicki,nguyenhuy
3187,2017-03-22 14:31:56,@Adlai-Holler @nguyenhuy Could you please take a another look at this. Thanks!,maicki,Adlai-Holler
3186,2017-03-15 18:20:29,"Thanks, @maicki!",nguyenhuy,maicki
3181,2017-03-15 17:44:59,"@nguyenhuy Addressed comments, can you take another look over it. Thanks!",maicki,nguyenhuy
3179,2017-03-15 15:53:20,@nguyenhuy Addressed your comments. Can you please take another look over it.,maicki,nguyenhuy
3172,2017-03-14 01:06:11,@nguyenhuy I removed the changes to `-view` and `-layer` for now and addressed your comments. I'm honestly not sure what to do in there at the moment. I guess it's a hot path and the reason we don't lock in there is due to that. Otherwise it's just wrong to not lock in this case as we could access `_flags.layerBacked` and `_view` / `_layer` on a background thread. We should talk about this and follow up with a new PR around that soon. cc @garrettmoon ,maicki,nguyenhuy
3172,2017-03-14 01:06:11,@nguyenhuy I removed the changes to `-view` and `-layer` for now and addressed your comments. I'm honestly not sure what to do in there at the moment. I guess it's a hot path and the reason we don't lock in there is due to that. Otherwise it's just wrong to not lock in this case as we could access `_flags.layerBacked` and `_view` / `_layer` on a background thread. We should talk about this and follow up with a new PR around that soon. cc @garrettmoon ,maicki,garrettmoon
3171,2017-03-13 14:42:54,@nguyenhuy Reverted [this](https://github.com/facebook/AsyncDisplayKit/pull/3091/files#diff-312ce155deaff809a60e161f9d3b1b84L103) change. I didn't had to revert the other one for some reason this was still in there. Can you try it out again with BUCK.,maicki,nguyenhuy
3169,2017-03-12 03:24:16,"Ref to #2868, resolves #698.

This is first attempt to use NSCollectionView native move animation.

Thanks @nguyenhuy for big refactoring, this is for sure a lot more clear than before. Still appreciate for opinions on how to improve.",harryworld,nguyenhuy
3161,2017-03-10 16:48:29,@nguyenhuy Can you please take another look. Thanks!,maicki,nguyenhuy
3151,2017-03-09 08:17:41,"Hi guys,

I have a crash during layout since commit 415005 (without changing anything to my code). It is related to the stack layout spec. Everything works fine before this commit. ASDK crashes in `flexLinesAlongStackDimension`, during assertion



Here's the stack trace:



And here's the content of the `children` vector in `ASStackUnpositionedLayout`:



Putting up a full example project might be a bit tricky, I hope this is enough.
Any ideas, @nguyenhuy ?

Cheers,
Flo",flovouin,nguyenhuy
3146,2017-03-07 18:36:21,"`-[ASDisplayNode actionForLayer:forKey:]` should return `nil` to avoid the node being animated by CA when it's being moved from one supernode to another.

This reverts commit 1d21c0bd5545741f284e553d7ed003c69fa6897c introduced by @Adlai-Holler in #3063.",nguyenhuy,Adlai-Holler
3145,2017-03-09 17:48:12,@Adlai-Holler Addressed the comments. Thanks!,maicki,Adlai-Holler
3140,2017-03-06 18:09:58,"Thanks @nguyenhuy! Since the most recent commit was only a rename, I'll go ahead and merge.",Adlai-Holler,nguyenhuy
3137,2017-03-04 22:00:10,"@appleguy yes, definitely!",nguyenhuy,appleguy
3135,2017-03-04 19:03:50,"This PR is building on top of the fabulous work of @nguyenhuy in #3093.

Some problems in ASVideoPlayerNode currently:
* We have two sources of truth. One is the asset within the `ASVideoPlayerNode` and the other one is within the backing `ASVideoNode`. Ideally we only want to have only one final source of truth, therefore this PR will try to use the `ASVideoNode` as final truth of source.
* `_loadAssetWhenNodeBecomesVisible` isn't turned on in the empty initializer. This causes an assertion in #3042 because it's not safe to set an asset on ASVideoNode off main.
* The flag itself is troublesome. It's enabled by default, but even so, ""visible"" is a bit too late. The asset can be loaded as soon as the player enters preload state, which is what ASVideoNode is doing.
This PR deprecates _loadAssetWhenNodeBecomesVisible and fixes #3042 by letting ASVideoPlayerNode handles its objects automatically.
* The API does not align with UIKit components. Therefore a couple of initializer related to initialization with an URL are deprecated and replaced.

@MarvinNazari Would be great if you can comment and help me to test this PR. Thank you!",maicki,nguyenhuy
3135,2017-03-04 19:03:50,"This PR is building on top of the fabulous work of @nguyenhuy in #3093.

Some problems in ASVideoPlayerNode currently:
* We have two sources of truth. One is the asset within the `ASVideoPlayerNode` and the other one is within the backing `ASVideoNode`. Ideally we only want to have only one final source of truth, therefore this PR will try to use the `ASVideoNode` as final truth of source.
* `_loadAssetWhenNodeBecomesVisible` isn't turned on in the empty initializer. This causes an assertion in #3042 because it's not safe to set an asset on ASVideoNode off main.
* The flag itself is troublesome. It's enabled by default, but even so, ""visible"" is a bit too late. The asset can be loaded as soon as the player enters preload state, which is what ASVideoNode is doing.
This PR deprecates _loadAssetWhenNodeBecomesVisible and fixes #3042 by letting ASVideoPlayerNode handles its objects automatically.
* The API does not align with UIKit components. Therefore a couple of initializer related to initialization with an URL are deprecated and replaced.

@MarvinNazari Would be great if you can comment and help me to test this PR. Thank you!",maicki,MarvinNazari
3135,2017-03-05 15:37:04,@nguyenhuy Comments addressed. Can you take another look over it. Thanks!,maicki,nguyenhuy
3134,2017-03-04 01:23:25,"This was added in #3017 and it's causing some issues for Pinterest, due to it triggering the initial load of data for collections that are `(0, 0)`. @nguyenhuy Do you remember the details of why this was added?",Adlai-Holler,nguyenhuy
3130,2017-03-03 04:50:06,This is very exciting! @master-nevi - check this out.,eanagel,master-nevi
3130,2017-03-04 05:13:40,"@nguyenhuy you have an amazing history of seminal contributions to AsyncDisplayKit, including the original ASLayoutSpec and crucial advancements in ASDataController.  This change, along with preparatory work around flex-wrap and concurrent layout in stacks, continues this incredible tradition!

I've dreamt about achieving something like this for years, but it has never been practical due to the huge amount of work behind it.  Along with the equally necessary work from @Adlai-Holler on the collection and @maicki on the layout system, you all have made that dream a reality for thousands of iOS developers!

Flat-out inspiring.  Thank you, @maicki, @Adlai-Holler, @nguyenhuy, and Pinterest for sharing your awesome talents with the community.",appleguy,maicki
3130,2017-03-04 05:13:40,"@nguyenhuy you have an amazing history of seminal contributions to AsyncDisplayKit, including the original ASLayoutSpec and crucial advancements in ASDataController.  This change, along with preparatory work around flex-wrap and concurrent layout in stacks, continues this incredible tradition!

I've dreamt about achieving something like this for years, but it has never been practical due to the huge amount of work behind it.  Along with the equally necessary work from @Adlai-Holler on the collection and @maicki on the layout system, you all have made that dream a reality for thousands of iOS developers!

Flat-out inspiring.  Thank you, @maicki, @Adlai-Holler, @nguyenhuy, and Pinterest for sharing your awesome talents with the community.",appleguy,Adlai-Holler
3130,2017-03-09 19:04:06,"@Adlai-Holler a few updates in this PR:
- Removed ASLegacyCollectionLayoutCalculator and let ASDataController run a slightly different code path if a calculator is not provided.
- Removed ASCollectionLayoutSpecCalculator.
- Calculators now return a new `ASCollectionLayout` object that contains a content size and an element to rect table. Layout attributes will be created on the fly.

A few things left that I need time to think about:
- Node allocation API that allows layout/layout calculator to decide which nodes to allocate.
- ASCollectionLayoutContext object. For simplicity of the first version, let's not add `-setFrame:forElement:` and `-isCancelled`.
- Supplementary elements: Ideally I want the calculator to only care about laying out elements given to it. Maybe we should introduce a new object, say `ASCollectionSupplementaryProvider` that creates all supplementaries needed for a given set of items?

With your trip coming really soon and the new code is non-intrusive enough that existing clients shouldn't be affected, does it make sense to merge this PR as its current state and improve it over time?",nguyenhuy,Adlai-Holler
3130,2017-03-24 20:48:46,@Adlai-Holler @appleguy I've updated most of the code in this PR to implement the second version of this async collection layout API. More details are explained in [the description of this PR](https://github.com/facebook/AsyncDisplayKit/pull/3130#issue-211559304). Please have another look!,nguyenhuy,Adlai-Holler
3130,2017-03-27 21:53:00,"> Maybe instead, they provide a layoutDelegate which implements calculateLayoutWithContext:?

@Adlai-Holler You meant an `ASCollectionLayoutDelegate` protocol that has a required `-calculateLayoutWithContext:` method?

I think it's a good idea as it forbids people from accessing the collection view directly. In addition, I'd like to leave an option to subclass `ASCollectionLayout` directly. This way, people can either provide a delegate for simplicity, or provide a full-fledged collection layout for total control. What do you think?",nguyenhuy,Adlai-Holler
3127,2017-03-21 13:57:30,"Hey guys,

So currently I've simply solved the problem by adding the following logic to `shouldBatchFetch`:



- `isScrollingUp` is necessary even though the check already exists in the current `ASDisplayShouldFetchBatchForContext` implementation because it is bypassed when `hasSmallContent` is `YES` (the second case of my original issue). This could simply be solved by moving the `isScrollingTowardHead` check above the small content check.
- `isBouncingAtTop` is also pretty much self-explanatory and solves the first case of the original issue. This could be added to ASDK's logic, although the `contentInset` should be forwarded to `ASDisplayShouldFetchBatchForContext`.

It shouldn't be too hard to add this in `ASDisplayShouldFetchBatchForContext`, and I feel that it would be at its place in the batch fetching logic. What do you guys ( @appleguy @Adlai-Holler @maicki ) think? Is this PR-worthy? I don't mind taking care of it if you think it is, just didn't want to work on it before asking you first.

Thanks,",flovouin,appleguy
3127,2017-03-21 13:57:30,"Hey guys,

So currently I've simply solved the problem by adding the following logic to `shouldBatchFetch`:



- `isScrollingUp` is necessary even though the check already exists in the current `ASDisplayShouldFetchBatchForContext` implementation because it is bypassed when `hasSmallContent` is `YES` (the second case of my original issue). This could simply be solved by moving the `isScrollingTowardHead` check above the small content check.
- `isBouncingAtTop` is also pretty much self-explanatory and solves the first case of the original issue. This could be added to ASDK's logic, although the `contentInset` should be forwarded to `ASDisplayShouldFetchBatchForContext`.

It shouldn't be too hard to add this in `ASDisplayShouldFetchBatchForContext`, and I feel that it would be at its place in the batch fetching logic. What do you guys ( @appleguy @Adlai-Holler @maicki ) think? Is this PR-worthy? I don't mind taking care of it if you think it is, just didn't want to work on it before asking you first.

Thanks,",flovouin,maicki
3125,2017-03-02 05:49:32,"This was added in #430. Since then it's grown and grown in complexity probably due to other issues encountered along the way. 😱 

Back then we would flush the range controller (queued in the run loop), and now we synchronously flush it (if it's invalidated):

- At the end of the layout pass
- After calling endUpdates
- When we enter the window

The original rationale was that ""we depend on -indexPathsForVisibleRows to be correct immediately after willDisplayCell:, but it isn't."" But I don't think it's true that we depend on it being correct at that time… we depend on it being correct later, asynchronously. Could be interesting to see if `indexPathsForVisibleRows` calls `layoutIfNeeded` or equivalent.

@eanagel What are your thoughts on this? You mentioned that not having it caused issues with programmatic scrolling – do I need to do anything specific to repro?",Adlai-Holler,eanagel
3125,2017-03-03 04:47:50,"TL;DR - Yeah I think you can get rid of this code now.

The original issue was that we expected the newly visible cell to already be in `-indexPathsForVisibleRows` during the call to `-willDisplayCell:forRowAtIndexPath:` which is almost always true, except in certain cases when scrolling programmatically. When I would see this, cells would render as blank when scrolling programmatically. It wouldn't always happen but once a cell was missed it would be blank as long as it was on screen. 

It looks like ASRangeController now delays it's updates to the next run loop. I think this would handle that edge case. And from what I can tell in this code (it's pretty complex) if it wasn't visible at that point we would eventually get it.

@appleguy As an aside we are currently testing code that allows to move to ASCollectionNode instead of ASTableNode. This is due to an amazing custom layout that @master-nevi has put together that performs virtualization without requiring changes to ASCollectionNode/View its self. (By Virtualization I mean that inserts or deletes outside the visible window don't cause any visible change to the user. To do this we adjust the content offset so the visible window doesn't change as it naturally would with a collection or table view.)",eanagel,appleguy
3125,2017-03-03 04:47:50,"TL;DR - Yeah I think you can get rid of this code now.

The original issue was that we expected the newly visible cell to already be in `-indexPathsForVisibleRows` during the call to `-willDisplayCell:forRowAtIndexPath:` which is almost always true, except in certain cases when scrolling programmatically. When I would see this, cells would render as blank when scrolling programmatically. It wouldn't always happen but once a cell was missed it would be blank as long as it was on screen. 

It looks like ASRangeController now delays it's updates to the next run loop. I think this would handle that edge case. And from what I can tell in this code (it's pretty complex) if it wasn't visible at that point we would eventually get it.

@appleguy As an aside we are currently testing code that allows to move to ASCollectionNode instead of ASTableNode. This is due to an amazing custom layout that @master-nevi has put together that performs virtualization without requiring changes to ASCollectionNode/View its self. (By Virtualization I mean that inserts or deletes outside the visible window don't cause any visible change to the user. To do this we adjust the content offset so the visible window doesn't change as it naturally would with a collection or table view.)",eanagel,master-nevi
3119,2017-03-02 21:30:24,@Adlai-Holler Can you give it another look please,maicki,Adlai-Holler
3112,2017-03-01 16:53:12,"I refer to @garrettmoon, but after looking into it, I think we should not call `clearFetchedImageFromCacheWithURL:` if the `_URL` is nil. Actually if you look into ASDK's implementation of `clearFetchedImageFromCacheWithURL:` we call `-[PINRemoteImageManager cacheKeyForURL:processorKey:]` and the method definition declares the `cacheKeyForURL:` as `nonnull`. 

Furthermore we should change `-[ASImageCacheProtocol synchronouslyFetchedCachedImageWithURL:]` to have a `nullable` URL. The reason behind is that in the comment actually is talking about a what happens if the `URL` is `nil`. ",maicki,garrettmoon
3112,2017-03-09 16:51:07,"@garrettmoon What do you think?
Depending on your suggestions, I don't mind taking a look and submitting a PR, although this might involve more back and forth than necessary.
Let me know :-)",flovouin,garrettmoon
3109,2017-03-01 03:00:33,"It supports different levels of warning, and is also available on Mac OS X.

https://gist.github.com/steipete/33af275cc1cb419b0f01

We've considered this before, but it seems worth making the leap even if a straight port of existing NSNotifications.  Also fine to just close this out if there aren't too many perceived advantages.

cc @garrettmoon @Adlai-Holler @maicki ",appleguy,garrettmoon
3109,2017-03-01 03:00:33,"It supports different levels of warning, and is also available on Mac OS X.

https://gist.github.com/steipete/33af275cc1cb419b0f01

We've considered this before, but it seems worth making the leap even if a straight port of existing NSNotifications.  Also fine to just close this out if there aren't too many perceived advantages.

cc @garrettmoon @Adlai-Holler @maicki ",appleguy,maicki
3109,2017-03-01 03:00:33,"It supports different levels of warning, and is also available on Mac OS X.

https://gist.github.com/steipete/33af275cc1cb419b0f01

We've considered this before, but it seems worth making the leap even if a straight port of existing NSNotifications.  Also fine to just close this out if there aren't too many perceived advantages.

cc @garrettmoon @Adlai-Holler @maicki ",appleguy,Adlai-Holler
3102,2017-02-28 03:23:26,"@Adlai-Holler although this no longer merges cleanly (my branch point was a full 3 days ago!), I'd be happy to clean it up so it does merge cleanly onto current master.  I'm putting it up on its current base to get your input on whether it's equal or better to your current implementation, in case it saves you some polish time.

I've tested this and it seems to work quite well (including some profile-guided optimization; we're down from 11.4% of all main thread time being spent in this method, to 9.0%).  The one exception is that for some reason I haven't investigated, images are not preloading for supplementary nodes; however I have not yet confirmed if this was already happening before this diff.",appleguy,Adlai-Holler
3101,2017-02-28 00:37:32,This works since CALayer will store arbitrary key-value pairs. @appleguy you have the most context around this system. Thoughts?,Adlai-Holler,appleguy
3098,2017-02-27 22:41:01,This makes the sample project added by @MarvinNazari work again,Adlai-Holler,MarvinNazari
3095,2017-02-27 20:52:20,"As @MarvinNazari [pointed out](https://github.com/facebook/AsyncDisplayKit/pull/3047#issuecomment-282840137) when we receive an update from IGListKit we attempt to gather the new data from the section controllers, but unfortunately since `objectTransitionBlock` hasn't been run yet, the list adapter is still using the old section map.

This is a pretty complex issue to resolve well. I'll add more info as I go.",Adlai-Holler,MarvinNazari
3094,2017-02-27 18:12:36,"As mentioned in #3047 @MarvinNazari @ay8s 

Replaces the macros with class methods. I think this is a huge improvement. ",Adlai-Holler,ay8s
3094,2017-02-27 18:12:36,"As mentioned in #3047 @MarvinNazari @ay8s 

Replaces the macros with class methods. I think this is a huge improvement. ",Adlai-Holler,MarvinNazari
3093,2017-02-27 17:50:32,"Some problems in `ASVideoPlayerNode` currently:
- `_loadAssetWhenNodeBecomesVisible` isn't turned on in the empty initializer. This causes an assertion in #3042 because it's not safe to set an asset on ASVideoNode off main.
- The flag itself is troublesome. It's enabled by default, but even so, ""visible"" is a bit too late. The asset can be loaded as soon as the player enters preload state, which is what ASVideoNode is doing.

This PR deprecates `_loadAssetWhenNodeBecomesVisible` and fixes #3042 by letting `ASVideoPlayerNode` handles its objects automatically.

@MarvinNazari Would be great if you can comment and help me to test this PR. Thank you!",nguyenhuy,MarvinNazari
3090,2017-02-27 12:38:01,"- Fix the crash reported by @appleguy in #3074. It occurs because we never create a dictionary that holds supplementaries of a new kind ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:HNASElementMapCras?expand=1#diff-1f7bf759dcd5f7e05395f0e53842b26eR93)).
- Fix the crash reported by @maicki on [Slack](https://asyncdisplaykit.slack.com/files/maicki/F4ALP7M2R/-.swift). We just need to gratefully handle `nil` index path internally.",nguyenhuy,appleguy
3090,2017-02-27 12:38:01,"- Fix the crash reported by @appleguy in #3074. It occurs because we never create a dictionary that holds supplementaries of a new kind ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:HNASElementMapCras?expand=1#diff-1f7bf759dcd5f7e05395f0e53842b26eR93)).
- Fix the crash reported by @maicki on [Slack](https://asyncdisplaykit.slack.com/files/maicki/F4ALP7M2R/-.swift). We just need to gratefully handle `nil` index path internally.",nguyenhuy,maicki
3085,2017-02-27 02:23:52,"`examples/ASViewController` currently raises an exception in `ASGetElementInTwoDimensionalArray` triggered by a call from `[ASTableView deselectRowAtIndexPath:animated:]` in `viewWillAppear:`. 

[Console Log](https://github.com/facebook/AsyncDisplayKit/files/802539/exception.txt)

cc @Adlai-Holler ",maicki,Adlai-Holler
3082,2017-02-26 06:01:11,"@maicki @Adlai-Holler @nguyenhuy, since every one of us has worked on ASRangeController, I'm curious for your very quick thoughts: does this seem possible, or am I missing something? Is it more difficult than it seems?",appleguy,nguyenhuy
3082,2017-02-26 06:01:11,"@maicki @Adlai-Holler @nguyenhuy, since every one of us has worked on ASRangeController, I'm curious for your very quick thoughts: does this seem possible, or am I missing something? Is it more difficult than it seems?",appleguy,maicki
3082,2017-02-26 06:01:11,"@maicki @Adlai-Holler @nguyenhuy, since every one of us has worked on ASRangeController, I'm curious for your very quick thoughts: does this seem possible, or am I missing something? Is it more difficult than it seems?",appleguy,Adlai-Holler
3081,2017-02-27 17:53:34,"Thanks for the review @Adlai-Holler! Much appreciated.

That one comment should now be addressed.",rewandy,Adlai-Holler
3074,2017-02-26 02:04:05,"@QuynhNguyen Yes, thanks for filing this.  I was about to file an issue myself too, as I'm encountering something very similar with supplementary nodes (in my case, crashing).

@nguyenhuy Fortunately this can be reproduced right away with examples/CustomCollectionView.  I suggest you have my PR applied just to make sure you don't hit the unnecessary assertions at a stage earlier than the actual crash: (this is now in master, so just pull to latest) https://github.com/facebook/AsyncDisplayKit/pull/3079

The attached .txt has some debug logs that I found helpful.  Here's the issue:

- The data source is queried correctly, and does return supplementary nodes for everything that it should.
- These are put into an ASMutableElementMap and I believe this does make it to _pendingMap (but it's a bit hard to tell since it is copied)
- However, at the time of the crash, the _visibleMap object that is being queried by UIKit does not have _any_ supplementary elements in it...even though we've reported that some exist to UIKit.

I think it is possible that the async sizing pass for the cells somehow doesn't gate the collection becoming aware of the supplementary nodes earlier, before the sizing pass is done.

@nguyenhuy @Adlai-Holler thank you so much for all the work on ASDataController!  It is very architecturally impressive, and truly represents a successful new era of one of the most crucial components in the framework.  These bugs are likely to be small fixes.

[SupplementaryMapLogging.txt](https://github.com/facebook/AsyncDisplayKit/files/801686/SupplementaryMapLogging.txt)
",appleguy,Adlai-Holler
3067,2017-02-23 18:49:53,"A lot of the time, when something changes in the data model, the existing cell node can be updated to account for it rather than actually calling `-[UICollectionView reloadItemsAtIndexPaths:]` which causes a new cell node to be created, and a ton of overhead.

Maybe when they call `reloadItemsAtIndexPaths:` on us, we can call`- (BOOL)shouldReload` on all the nodes for the reloaded items and give them a chance to update themselves and prevent the reload.

Thoughts @nguyenhuy @garrettmoon @maicki  @appleguy @ay8s",Adlai-Holler,nguyenhuy
3067,2017-02-23 18:49:53,"A lot of the time, when something changes in the data model, the existing cell node can be updated to account for it rather than actually calling `-[UICollectionView reloadItemsAtIndexPaths:]` which causes a new cell node to be created, and a ton of overhead.

Maybe when they call `reloadItemsAtIndexPaths:` on us, we can call`- (BOOL)shouldReload` on all the nodes for the reloaded items and give them a chance to update themselves and prevent the reload.

Thoughts @nguyenhuy @garrettmoon @maicki  @appleguy @ay8s",Adlai-Holler,garrettmoon
3067,2017-02-23 18:49:53,"A lot of the time, when something changes in the data model, the existing cell node can be updated to account for it rather than actually calling `-[UICollectionView reloadItemsAtIndexPaths:]` which causes a new cell node to be created, and a ton of overhead.

Maybe when they call `reloadItemsAtIndexPaths:` on us, we can call`- (BOOL)shouldReload` on all the nodes for the reloaded items and give them a chance to update themselves and prevent the reload.

Thoughts @nguyenhuy @garrettmoon @maicki  @appleguy @ay8s",Adlai-Holler,appleguy
3067,2017-02-23 18:49:53,"A lot of the time, when something changes in the data model, the existing cell node can be updated to account for it rather than actually calling `-[UICollectionView reloadItemsAtIndexPaths:]` which causes a new cell node to be created, and a ton of overhead.

Maybe when they call `reloadItemsAtIndexPaths:` on us, we can call`- (BOOL)shouldReload` on all the nodes for the reloaded items and give them a chance to update themselves and prevent the reload.

Thoughts @nguyenhuy @garrettmoon @maicki  @appleguy @ay8s",Adlai-Holler,maicki
3067,2017-02-23 18:49:53,"A lot of the time, when something changes in the data model, the existing cell node can be updated to account for it rather than actually calling `-[UICollectionView reloadItemsAtIndexPaths:]` which causes a new cell node to be created, and a ton of overhead.

Maybe when they call `reloadItemsAtIndexPaths:` on us, we can call`- (BOOL)shouldReload` on all the nodes for the reloaded items and give them a chance to update themselves and prevent the reload.

Thoughts @nguyenhuy @garrettmoon @maicki  @appleguy @ay8s",Adlai-Holler,ay8s
3060,2017-02-22 22:05:37,"Right now it's a plain `NS_OPTIONS` which is pretty limiting – we can only manage _flags_ in the hierarchy. It seems like an Objective-C++ struct would be appropriately flexible and fast. It would allow us to store objects (root node? Layout engine?) as well as other data types.

Thoughts @maicki @nguyenhuy @garrettmoon @appleguy ?",Adlai-Holler,nguyenhuy
3060,2017-02-22 22:05:37,"Right now it's a plain `NS_OPTIONS` which is pretty limiting – we can only manage _flags_ in the hierarchy. It seems like an Objective-C++ struct would be appropriately flexible and fast. It would allow us to store objects (root node? Layout engine?) as well as other data types.

Thoughts @maicki @nguyenhuy @garrettmoon @appleguy ?",Adlai-Holler,garrettmoon
3060,2017-02-22 22:05:37,"Right now it's a plain `NS_OPTIONS` which is pretty limiting – we can only manage _flags_ in the hierarchy. It seems like an Objective-C++ struct would be appropriately flexible and fast. It would allow us to store objects (root node? Layout engine?) as well as other data types.

Thoughts @maicki @nguyenhuy @garrettmoon @appleguy ?",Adlai-Holler,appleguy
3060,2017-02-22 22:05:37,"Right now it's a plain `NS_OPTIONS` which is pretty limiting – we can only manage _flags_ in the hierarchy. It seems like an Objective-C++ struct would be appropriately flexible and fast. It would allow us to store objects (root node? Layout engine?) as well as other data types.

Thoughts @maicki @nguyenhuy @garrettmoon @appleguy ?",Adlai-Holler,maicki
3056,2017-02-21 18:46:20,Thanks for reporting this. @Adlai-Holler has much better understanding behind the flags in `_checkForBatchFetching` and thus can decide if yours is a correct solution.,nguyenhuy,Adlai-Holler
3054,2017-02-22 00:47:04,@nguyenhuy It seems to be succeeding now!  @Adlai-Holler thanks much for the review :),appleguy,Adlai-Holler
3047,2017-02-27 20:17:30,"@Adlai-Holler so i updated but now im getting a crash.

",MarvinNazari,Adlai-Holler
3042,2017-02-17 09:01:08,"Im getting a crash initialising ASVideoPlayerNode inside my ASCellNode.
looking at the diff i think [this](https://github.com/facebook/AsyncDisplayKit/commit/f7a0ac9760be7dc8c532fa7f9f232c5dcf738a30#diff-d560a1b1d55d40fbeef7c555fbeb22e9) caused the problem.

cc @nguyenhuy 

[Sample code](https://github.com/facebook/AsyncDisplayKit/files/783197/ASVideoPlayerNode.Crash.zip)

",MarvinNazari,nguyenhuy
3038,2017-02-16 22:08:56,"You have to first scroll down a few photos, and then rotate.

Reported by @ay8s on Slack.",Adlai-Holler,ay8s
3029,2017-02-14 08:36:38,"Everyone likes GIF and i don't wanna be a party pooper, but the `Screenshots` folder inside example folder is `64,6 MB`. I tried to compress them with ImageOptim and we get `45,1 MB` afterwards. but is it really that important to have them inside the repo?
#2968 
cc @hannahmbanana  ",MarvinNazari,hannahmbanana
3029,2017-02-14 17:43:18,"Agree with @MarvinNazari 

@hannahmbanana Can we move them out of the repo to some other image hosting place or into our documentation repo and link to it from there?",maicki,hannahmbanana
3026,2017-02-15 03:01:00,"@Adlai-Holler Thanks for the suggestions. I tried the 3 methods you suggested but none of them worked..

After some profiling(copy and run the related code, from _textStorage init to setAttributedString 30000 times), setting attributedString both in init and later is doubling the execution time than before.

So I changed the code: always init _textStorage with no parameter, and set attributedString later. Running the profiling code this time I can see the execution time is very close to before.",yxztj,Adlai-Holler
3026,2017-02-15 05:17:26,"@yxztj awesome, thanks for investigating this issue and then also guiding your work via profiling!  An allstar contributor :), really appreciate how you've helped out over time.

Both @Adlai-Holler and @maicki are the de-facto experts on ASTextNode these days, so I'll leave it to them to make the call on safety of taking this change.  However, we're all interested in seeing improvements to a few nagging correctness issues that still affect the component and so will seriously consider any PRs in this area.

One last suggestion: consider adding this to examples_extra/TextStressTest?  Not a blocker for this PR, just a suggested followup.  I've been trying to collect our known ASTextNode bugs there and then the fixes so we can run the app to check them.  Of course it would be better to add snapshot tests for all of these, but either one would be a great step.",appleguy,maicki
3026,2017-02-15 05:17:26,"@yxztj awesome, thanks for investigating this issue and then also guiding your work via profiling!  An allstar contributor :), really appreciate how you've helped out over time.

Both @Adlai-Holler and @maicki are the de-facto experts on ASTextNode these days, so I'll leave it to them to make the call on safety of taking this change.  However, we're all interested in seeing improvements to a few nagging correctness issues that still affect the component and so will seriously consider any PRs in this area.

One last suggestion: consider adding this to examples_extra/TextStressTest?  Not a blocker for this PR, just a suggested followup.  I've been trying to collect our known ASTextNode bugs there and then the fixes so we can run the app to check them.  Of course it would be better to add snapshot tests for all of these, but either one would be a great step.",appleguy,Adlai-Holler
3021,2017-02-13 15:19:10,"Thanks to @nguyenhuy for the initial work! Unfortunately there were a couple of bigger changes since the last commit of the initial PR so I rebased and also cleaned it up a bit. Will replace #2810

This PR makes ASViewController's node optional. This allows developers to use ASViewController like a normal UIViewController. More importantly, it can be used as a base class for view controllers among which some use a node hierarchy and some don't.

Resolve #2760.",maicki,nguyenhuy
3021,2017-02-14 19:03:32,"Pushed a new change that changes the nil node behavior based on @Adlai-Holler and my Slack conversation.

It also changes the usage of mixed between the getter `self.node` and the instance variable `_node` to always use the intense variable for now.",maicki,Adlai-Holler
3021,2017-02-14 21:18:56,Thanks @Adlai-Holler and @nguyenhuy for working together on that.,maicki,nguyenhuy
3021,2017-02-14 21:18:56,Thanks @Adlai-Holler and @nguyenhuy for working together on that.,maicki,Adlai-Holler
3018,2017-02-12 00:25:16,"Supporting rasterized subtrees is a useful way to reduce memory consumption, and I'm proud that we've achieved it.

But I advocate deprecating support, for a couple of reasons:
- We see virtually _zero_ usage of it in Pinterest.
- It complicates our hierarchy tracking and drawing.
- Unit testing is pretty scant – not sure how it handles edge cases, makes refactoring tough.
- Modern hardware devalues memory conservation.
- We're integrating more with Core Animation's layout pass/validation system, so we need layers!

I feel strongly that this is the right direction for the framework, but I'd like to hear from the community their thoughts @ay8s @MarvinNazari @GitGadd @harryworld",Adlai-Holler,GitGadd
3018,2017-02-12 00:25:16,"Supporting rasterized subtrees is a useful way to reduce memory consumption, and I'm proud that we've achieved it.

But I advocate deprecating support, for a couple of reasons:
- We see virtually _zero_ usage of it in Pinterest.
- It complicates our hierarchy tracking and drawing.
- Unit testing is pretty scant – not sure how it handles edge cases, makes refactoring tough.
- Modern hardware devalues memory conservation.
- We're integrating more with Core Animation's layout pass/validation system, so we need layers!

I feel strongly that this is the right direction for the framework, but I'd like to hear from the community their thoughts @ay8s @MarvinNazari @GitGadd @harryworld",Adlai-Holler,ay8s
3018,2017-02-12 00:25:16,"Supporting rasterized subtrees is a useful way to reduce memory consumption, and I'm proud that we've achieved it.

But I advocate deprecating support, for a couple of reasons:
- We see virtually _zero_ usage of it in Pinterest.
- It complicates our hierarchy tracking and drawing.
- Unit testing is pretty scant – not sure how it handles edge cases, makes refactoring tough.
- Modern hardware devalues memory conservation.
- We're integrating more with Core Animation's layout pass/validation system, so we need layers!

I feel strongly that this is the right direction for the framework, but I'd like to hear from the community their thoughts @ay8s @MarvinNazari @GitGadd @harryworld",Adlai-Holler,MarvinNazari
3017,2017-02-21 16:01:15,"@Adlai-Holler @appleguy This PR is finally ready for review! As it is getting huge, I'd like to merge this ASAP and work on follow up tasks. Thank you!",nguyenhuy,appleguy
3017,2017-02-21 16:01:15,"@Adlai-Holler @appleguy This PR is finally ready for review! As it is getting huge, I'd like to merge this ASAP and work on follow up tasks. Thank you!",nguyenhuy,Adlai-Holler
3016,2017-02-10 23:53:06,"Thanks @ay8s for raising this on Slack. Raises `Did not expect sizeForSupplementaryViewOfKind:atIndex: to be called.`

That means we accidentally called the IGListKit supplementary sizing method, which we don't intend to do.

This is possibly due to some major collection view changes made last weekend to support UIKit cells.

We need to look at the flow layout supplementary sizing pathway under IGListKit.",Adlai-Holler,ay8s
3010,2017-02-10 02:05:24,@Adlai-Holler please teach your team to use GitHub properly. I didn't delete my facebook account so I could enjoy daily reminders of its existence.,adlai,Adlai-Holler
3010,2017-02-10 02:05:40,@garrettmoon You are the repeat offender.,adlai,garrettmoon
3010,2017-02-10 02:07:17,"@Adlai-Holler That was a quick close. I hope @garrettmoon reads this, though.",adlai,garrettmoon
3010,2017-02-10 02:07:17,"@Adlai-Holler That was a quick close. I hope @garrettmoon reads this, though.",adlai,Adlai-Holler
3008,2017-02-09 22:13:00,"## Overview

`ASTextNode` is currently hardcoded to use `ASLayoutManager` as its layout manager for drawing. Allowing users to provide a custom layout manager to `ASTextNode` would provide a lot of power in terms of custom drawing and what `ASTextNode` can achieve for people.

## Why Use a Custom Layout Manager

As `NSLayoutManager` is really the meat and potatoes of the TextKit stack and controls drawing, subclassing it allows for easy tweaking of how things are drawn, and allows you to perform additional drawing steps.

In my case, I render Markdown into cells. Markdown has a lot of styling that purely using `NSAttributedString` doesn't allow you to accomplish, things you can see easily with GitHub's Markdown, such as quotes:

> ← `NSAttributedString` doesn't have an attribute to draw lines on the side

Or even just `inline code`, where `NSBackgroundStyleAttributeName` falls short in allowing you to do things such as round the squared off rectangle, add a border, padding, etc.

Subclassing `NSLayoutManager` allows you to do all this quite easily, and to my understanding without creating any issues with AsyncDisplayKit if this capability is introduced properly. For instance, subclassing and overriding `fillBackgroundRectArray(_:count:forCharacterRange:color:)` allows you to easily round the rectangles drawn with `NSBackgroundStyleAttributeName`, and further drawing can be done in `drawGlyphs(forGlyphRange:at:)`. 

## Example

**Example Project:** [TestCustomLayoutManager.zip](https://github.com/facebook/AsyncDisplayKit/files/765018/TestCustomLayoutManager.zip)

As I said, I render Markdown in my app. Subclassing `NSLayoutManager` allows me to add lines on the side of quotes, introduce inline code formatting, and show horizontal rules (`<hr>`s), among other things by simply adding an extra attribute onto the `NSAttributedString`, as shown in a simple example in the example project.

![simulator screenshot](https://cloud.githubusercontent.com/assets/4311814/22803769/b58b137e-eeec-11e6-8eee-55d23d5669ef.png)
*Image showing line-intended-blockquote, inline code and horizontal rule in `ASTextNode` from subclassing `NSLayoutManager`*

Which simply required the following subclass (truncated):

`

## How to Do It

My proposed solution is to allow `ASTextNode` to be provided with an `NSLayoutManager` *class* at init time, eg: `[[ASTextNode alloc] initWithLayoutManagerClass:[MyLayoutManager class]]`.

The advantage of this way is that it makes it really hard to shoot yourself in the foot. Talking with some people like @appleguy and @maicki among others in Slack who know infinitely more about ASDK than I do, they've mentioned this functionality has been there in the past but caused some issues with the layout manager being mutable after the fact. By only passing the subclass (akin to `NSPersistentStoreCoordinator`'s `registerStoreClass(_:forStoreType:)` model) and creating it at the end only when needed, issues with people changing it after the fact, or holding a reference to it are obviated.

Other methods such as passing in an actual `NSLayoutManager` object at init, or passing in a block are viable too, but would only provide the capability to tweak it slightly initially, which I'm not sure would have much use (especially to be worth the cost of complicating it further).

@appleguy mentioned some other awesome options in how to tackle this, such as using composition to have separate `ASDisplayNodes` behind the `ASTextNode` that operate as the rounded rects and whatnot, but I think `NSLayoutManager` overall adds a simpler, easy-to-point-to place to perform custom text drawing such as that. And furthermore, if people come to AsyncDisplayKit with existing TextKit stacks and custom `NSLayoutManager`s (*-waves-* that's me) it would make it really easy to integrate your existing work and get up and running with ASDK quickly.

## End

Hope I did this right! @maicki mentioned it would be a good idea to put this up as a point of discussion and see what people think, so that's exactly what I'm doing. Would love to hear what all you brilliant folk think.",christianselig,appleguy
3008,2017-02-09 22:13:00,"## Overview

`ASTextNode` is currently hardcoded to use `ASLayoutManager` as its layout manager for drawing. Allowing users to provide a custom layout manager to `ASTextNode` would provide a lot of power in terms of custom drawing and what `ASTextNode` can achieve for people.

## Why Use a Custom Layout Manager

As `NSLayoutManager` is really the meat and potatoes of the TextKit stack and controls drawing, subclassing it allows for easy tweaking of how things are drawn, and allows you to perform additional drawing steps.

In my case, I render Markdown into cells. Markdown has a lot of styling that purely using `NSAttributedString` doesn't allow you to accomplish, things you can see easily with GitHub's Markdown, such as quotes:

> ← `NSAttributedString` doesn't have an attribute to draw lines on the side

Or even just `inline code`, where `NSBackgroundStyleAttributeName` falls short in allowing you to do things such as round the squared off rectangle, add a border, padding, etc.

Subclassing `NSLayoutManager` allows you to do all this quite easily, and to my understanding without creating any issues with AsyncDisplayKit if this capability is introduced properly. For instance, subclassing and overriding `fillBackgroundRectArray(_:count:forCharacterRange:color:)` allows you to easily round the rectangles drawn with `NSBackgroundStyleAttributeName`, and further drawing can be done in `drawGlyphs(forGlyphRange:at:)`. 

## Example

**Example Project:** [TestCustomLayoutManager.zip](https://github.com/facebook/AsyncDisplayKit/files/765018/TestCustomLayoutManager.zip)

As I said, I render Markdown in my app. Subclassing `NSLayoutManager` allows me to add lines on the side of quotes, introduce inline code formatting, and show horizontal rules (`<hr>`s), among other things by simply adding an extra attribute onto the `NSAttributedString`, as shown in a simple example in the example project.

![simulator screenshot](https://cloud.githubusercontent.com/assets/4311814/22803769/b58b137e-eeec-11e6-8eee-55d23d5669ef.png)
*Image showing line-intended-blockquote, inline code and horizontal rule in `ASTextNode` from subclassing `NSLayoutManager`*

Which simply required the following subclass (truncated):

`

## How to Do It

My proposed solution is to allow `ASTextNode` to be provided with an `NSLayoutManager` *class* at init time, eg: `[[ASTextNode alloc] initWithLayoutManagerClass:[MyLayoutManager class]]`.

The advantage of this way is that it makes it really hard to shoot yourself in the foot. Talking with some people like @appleguy and @maicki among others in Slack who know infinitely more about ASDK than I do, they've mentioned this functionality has been there in the past but caused some issues with the layout manager being mutable after the fact. By only passing the subclass (akin to `NSPersistentStoreCoordinator`'s `registerStoreClass(_:forStoreType:)` model) and creating it at the end only when needed, issues with people changing it after the fact, or holding a reference to it are obviated.

Other methods such as passing in an actual `NSLayoutManager` object at init, or passing in a block are viable too, but would only provide the capability to tweak it slightly initially, which I'm not sure would have much use (especially to be worth the cost of complicating it further).

@appleguy mentioned some other awesome options in how to tackle this, such as using composition to have separate `ASDisplayNodes` behind the `ASTextNode` that operate as the rounded rects and whatnot, but I think `NSLayoutManager` overall adds a simpler, easy-to-point-to place to perform custom text drawing such as that. And furthermore, if people come to AsyncDisplayKit with existing TextKit stacks and custom `NSLayoutManager`s (*-waves-* that's me) it would make it really easy to integrate your existing work and get up and running with ASDK quickly.

## End

Hope I did this right! @maicki mentioned it would be a good idea to put this up as a point of discussion and see what people think, so that's exactly what I'm doing. Would love to hear what all you brilliant folk think.",christianselig,maicki
2991,2017-02-09 07:33:06,"- I think the ability to ""visualize"" layout specs is still **very badly needed by the community** (as well as Pinterest). However, my attempt to create a layout visualization feature is only half-baked and not ready for prime-time. I don't think I can bring the ideal feature to fruition, but maybe you or @nguyenhuy could do so now, or in the future.
- I understand your concern around maintaining a system that isn't actively used and support removing this for now and revisiting with a new / modified approach later on.

You have my blessing to remove it! ",hannahmbanana,nguyenhuy
2991,2017-02-10 15:38:34,@appleguy @Adlai-Holler @hannahmbanana @nguyenhuy Thank you for all of your inputs. I will merge this in as soon as CI is passing.,maicki,nguyenhuy
2991,2017-02-10 15:38:34,@appleguy @Adlai-Holler @hannahmbanana @nguyenhuy Thank you for all of your inputs. I will merge this in as soon as CI is passing.,maicki,Adlai-Holler
2990,2017-02-09 19:20:58,"Two comments from me on this:
- I think the ability to ""visualize"" layout specs is still very badly needed by the community (as well as Pinterest). However, my attempt to create a layout visualization feature is only half-baked and not ready for prime-time. I don't think I can bring the ideal feature to fruition, but maybe you or @nguyenhuy could do so now, or in the future. 
- I understand your concern around maintaining a system that isn't actively used and support removing this for now and revisiting with a new / modified approach later on. ",hannahmbanana,nguyenhuy
2983,2017-02-15 00:44:33,Hmm I defer to @garrettmoon for this. Thoughts?,Adlai-Holler,garrettmoon
2983,2017-02-15 05:12:20,"@garrettmoon @Adlai-Holler for whomever can access the Jenkins config, I believe @Antowkos investigation here has done the hardest part of the work to show us the path:

Let's tweak the Jenkins script (config on the website) so that when running the Carthage build (as defined as one of the MODEs in build.sh), it should run carthage update instead of pod install.

I'm pretty sure that's something that regressed relative to Travis that I hadn't considered.  We may also need to ensure Jenkins is even running the Carthage ""MODE"" of the build.sh script in its run.  If we can try that out and it works, let's get this landed before it doesn't work :)",appleguy,garrettmoon
2982,2017-02-06 21:18:49,"My impression is that you, @Adlai-Holler and @maicki came up with a direction in your meeting, will defer to them :)",garrettmoon,maicki
2982,2017-02-06 21:18:49,"My impression is that you, @Adlai-Holler and @maicki came up with a direction in your meeting, will defer to them :)",garrettmoon,Adlai-Holler
2978,2017-03-09 02:09:59,"@garrettmoon @maicki this is a very exciting feature! I would love to be an early tester of this, or to give feedback on API design in the context of some use cases I have in mind.",appleguy,maicki
2977,2017-02-09 19:15:44,@master-nevi Moved discussion of #2407 over to here,Adlai-Holler,master-nevi
2975,2017-02-03 21:33:28,cc @appleguy ,maicki,appleguy
2971,2017-02-09 21:16:56,@nguyenhuy @maicki - could one of you triage this? I'm less familiar with the Transition API,hannahmbanana,nguyenhuy
2971,2017-02-09 21:16:56,@nguyenhuy @maicki - could one of you triage this? I'm less familiar with the Transition API,hannahmbanana,maicki
2970,2017-02-02 07:28:44,"`[attributeStr addAttributes:@{NSForegroundColorAttributeName:APPMainColor,NSUnderlineStyleAttributeName:@(NSUnderlineStyleNone),NSLinkAttributeName:[NSURL URLWithString:url]} range:[str rangeOfString:regularStr]];`
NSUnderlineStyleNone doesn't make sense.
I want to avoid having a bottom blur line to the range str.
Can some help with this.
vary thanks.

@garrettmoon 
@akerdi you should create an arbitrary linkAttributeName
The system automatically underlines NSLinkAttributeName
So: 
`textNode.linkAttributeNames = @[@""MyCoolLinkAttribute""];`
`[textNode setLinkAttribute:@""MyCoolLinkAttribute"" value:someURL range:someRange];`
Whoops, that second method only exists in our app as a category method :slightly_smiling_face:
You need to set the @”MyCoolLinkAttribute” on your attributedString and then set that on the ASTextNode

I can't make it out,sincerely.ga ga",shaohung001,garrettmoon
2968,2017-02-02 19:26:32,This is a nice improvement to our `README.md`. Let's see what @hannahmbanana thinks.,Adlai-Holler,hannahmbanana
2966,2017-02-02 19:57:46,@Adlai-Holler Yep just changed to `.m`. Will merge after CI passes.,maicki,Adlai-Holler
2962,2017-01-31 23:06:41,"Resolves #2961 

This is designed to be a minimal change so that we can hotfix it in. The method names in data controller are currently kind of confusing – a situation that @nguyenhuy 's refactoring work will help greatly with.

The idea here is, when we delete sections, we delete sections of all element kinds simultaneously. That way the caller doesn't need to bother knowing which kinds of supplementaries existed before the update, and that way all section indexes stay aligned.

cc @ay8s Could you give this a try and see if it resolves the issue you're seeing?",Adlai-Holler,nguyenhuy
2962,2017-01-31 23:06:41,"Resolves #2961 

This is designed to be a minimal change so that we can hotfix it in. The method names in data controller are currently kind of confusing – a situation that @nguyenhuy 's refactoring work will help greatly with.

The idea here is, when we delete sections, we delete sections of all element kinds simultaneously. That way the caller doesn't need to bother knowing which kinds of supplementaries existed before the update, and that way all section indexes stay aligned.

cc @ay8s Could you give this a try and see if it resolves the issue you're seeing?",Adlai-Holler,ay8s
2961,2017-01-31 22:38:00,"In `prepareForDeleteSections` we try to gather the supplementary kinds for the sections that are being deleted. Bad news! The data source has already updated and so it's too late!

Reported by @ay8s ",Adlai-Holler,ay8s
2959,2017-01-31 19:54:11,"https://pinterest.slack.com/archives/ios-help/p1485795980000343

From @rcancro:

> I have a question surrounding ASTableNode, its data controller and when _completedNodes in the data controller is populated. On iPad when we bring up the save dialog and tap on ""New Board” we push a new VC onto the modal’s nav controller. The nav controller (since it is in a modal on iPad) has a width of 520. However, the VC doesn’t realize this until `viewWillAppear`. I’m seeing the following happen:
> 1. The VC is created with a width of 768
> 2. The VC’s tableNode creates its cells with a 768 width (I can put a breakpoint in the `nodeBlockForRowAtIndexPath` and see it being hit)
> 3. The VC gets resized to 520. This causes `asyncTraitCollectionDidChange` to be called on the table node
> 4. In `asyncTraitCollectionDidChange` the tableNode asks for its completed nodes via `[self.view.dataController completedNodes]` so it can propagate the new container size. However, `[self.view.dataController completedNodes]` returns an empty array.
> Shouldn't I expect the cell that i saw being created when my breakpoint hit to be in `_completeNodes`?",garrettmoon,rcancro
2959,2017-02-09 21:18:34,@maicki - Do you have any updates to this issue in light of your recent trait collection updates?,hannahmbanana,maicki
2959,2017-02-23 11:33:59,"Since I'm more familiar with the new implementation of `ASDataController`, I'm gonna steal this task from @maicki.",nguyenhuy,maicki
2955,2017-01-31 07:28:18,"@garrettmoon feel free to schedule this whenever it is feasible for the team.  I have some other bug fixes coming for ASCollection*, but probably won't get to this one which would be really great to fix.

There's a related problem where if a 0,0 CGExactSize is passed as the constrainedSize for a node, some kind of incorrect value gets into UICollectionView and causes the ""infinite spinning / livelock"" issue that CGFLOAT_MAX does...",appleguy,garrettmoon
2948,2017-01-29 05:10:57,"Paired programming with @appleguy.

This method offers compatibility with synchronous, standard UICollectionViewCell objects. These cells will **not** have the performance benefits of ASCellNodes (like preloading, async layout, and async drawing) - even when mixed within the same ASCollectionNode.

In order to use this method, you must:
1. Implement it on your ASCollectionDataSource object.
2. Call registerCellClass: on the collectionNode.view (in viewDidLoad, or register an onDidLoad: block).
3. Return nil from the nodeBlockForItem...: or nodeForItem...: method. NOTE: it is an error to return nil from within a nodeBlock, if you have returned a nodeBlock object.
4. Lastly, you must implement a method to provide the size for the cell. There are two ways this is done:
4a. UICollectionViewFlowLayout (incl. ASPagerNode). Implement collectionNode:constrainedSizeForItemAtIndexPath:.
4b. Custom collection layouts. Set .view.layoutInspector and have it implement collectionView:constrainedSizeForNodeAtIndexPath:.

For an example of using this method with all steps above (including a custom layout, 4b.), see the app in examples/CustomCollectionView and enable kShowUICollectionViewCells = YES (example project included in this PR).",hannahmbanana,appleguy
2948,2017-02-01 06:25:16,"@QuynhNguyen - great question! 

`ASCellNode` is always preferred. However, for code bases that have hundreds or more custom `UICollectionViewCells` subclasses, this feature will allow them to port to ASDK more easily, and then slowly convert their backlog of cells to be `ASCellNode` subclasses. 

This change allows mixing both those un-ported `UICollectionViewCell`s and `ASCellNode`s without a performance penalty for the `UIKitCells`. In addition, it still provides of `ASCellNode`, including automatic preload, asynchronous measurement and asynchronous rendering. Because of this difference in performance, app developers will clearly see the value of porting cells to `ASCellNode` and be able to do so over time. 

That said, I think @Adlai-Holler implemented this feature in #2942 so we may not need this PR anymore. ",hannahmbanana,Adlai-Holler
2945,2017-01-28 05:10:21,"Paired programming with @appleguy. Example project - ASDKgram modified to use a node controller:

[ASDKgram-nodeController.zip](https://github.com/facebook/AsyncDisplayKit/files/736714/ASDKgram-nodeController.zip)

",hannahmbanana,appleguy
2942,2017-01-28 00:21:59,"This supersedes #2848 which was a bit hacky and messy.

- Add `ASCollectionDataSourceInterop` and `ASCollectionDelegateInterop` protocols to formalize what hooks we need to support IGListKit.
- Add `IGListAdapterBasedDataSource` to connect IGListKit to AsyncDisplayKit using the existing dataSource/delegate architecture.
- Beef up ASDKgram to use a header node on the IGListKit tab.

To use IGListKit:
- Have your section controllers conform to `ASSectionController`. 
- Have your supplementary view sources conform to `ASSupplementaryNodeSource`.
- On your `IGListAdapter`, call `-setASDKCollectionNode:` to make the connection.

Note: Use the provided implementations from `ASIGListKitMethodImplementations.h` to cover required IGListKit methods that don't apply when used with ASDK.

@ay8s @appleguy @nguyenhuy @maicki @garrettmoon @jessesquires @ocrickard ",Adlai-Holler,nguyenhuy
2942,2017-01-28 00:21:59,"This supersedes #2848 which was a bit hacky and messy.

- Add `ASCollectionDataSourceInterop` and `ASCollectionDelegateInterop` protocols to formalize what hooks we need to support IGListKit.
- Add `IGListAdapterBasedDataSource` to connect IGListKit to AsyncDisplayKit using the existing dataSource/delegate architecture.
- Beef up ASDKgram to use a header node on the IGListKit tab.

To use IGListKit:
- Have your section controllers conform to `ASSectionController`. 
- Have your supplementary view sources conform to `ASSupplementaryNodeSource`.
- On your `IGListAdapter`, call `-setASDKCollectionNode:` to make the connection.

Note: Use the provided implementations from `ASIGListKitMethodImplementations.h` to cover required IGListKit methods that don't apply when used with ASDK.

@ay8s @appleguy @nguyenhuy @maicki @garrettmoon @jessesquires @ocrickard ",Adlai-Holler,appleguy
2942,2017-01-28 00:21:59,"This supersedes #2848 which was a bit hacky and messy.

- Add `ASCollectionDataSourceInterop` and `ASCollectionDelegateInterop` protocols to formalize what hooks we need to support IGListKit.
- Add `IGListAdapterBasedDataSource` to connect IGListKit to AsyncDisplayKit using the existing dataSource/delegate architecture.
- Beef up ASDKgram to use a header node on the IGListKit tab.

To use IGListKit:
- Have your section controllers conform to `ASSectionController`. 
- Have your supplementary view sources conform to `ASSupplementaryNodeSource`.
- On your `IGListAdapter`, call `-setASDKCollectionNode:` to make the connection.

Note: Use the provided implementations from `ASIGListKitMethodImplementations.h` to cover required IGListKit methods that don't apply when used with ASDK.

@ay8s @appleguy @nguyenhuy @maicki @garrettmoon @jessesquires @ocrickard ",Adlai-Holler,garrettmoon
2942,2017-01-28 00:21:59,"This supersedes #2848 which was a bit hacky and messy.

- Add `ASCollectionDataSourceInterop` and `ASCollectionDelegateInterop` protocols to formalize what hooks we need to support IGListKit.
- Add `IGListAdapterBasedDataSource` to connect IGListKit to AsyncDisplayKit using the existing dataSource/delegate architecture.
- Beef up ASDKgram to use a header node on the IGListKit tab.

To use IGListKit:
- Have your section controllers conform to `ASSectionController`. 
- Have your supplementary view sources conform to `ASSupplementaryNodeSource`.
- On your `IGListAdapter`, call `-setASDKCollectionNode:` to make the connection.

Note: Use the provided implementations from `ASIGListKitMethodImplementations.h` to cover required IGListKit methods that don't apply when used with ASDK.

@ay8s @appleguy @nguyenhuy @maicki @garrettmoon @jessesquires @ocrickard ",Adlai-Holler,maicki
2942,2017-01-28 00:21:59,"This supersedes #2848 which was a bit hacky and messy.

- Add `ASCollectionDataSourceInterop` and `ASCollectionDelegateInterop` protocols to formalize what hooks we need to support IGListKit.
- Add `IGListAdapterBasedDataSource` to connect IGListKit to AsyncDisplayKit using the existing dataSource/delegate architecture.
- Beef up ASDKgram to use a header node on the IGListKit tab.

To use IGListKit:
- Have your section controllers conform to `ASSectionController`. 
- Have your supplementary view sources conform to `ASSupplementaryNodeSource`.
- On your `IGListAdapter`, call `-setASDKCollectionNode:` to make the connection.

Note: Use the provided implementations from `ASIGListKitMethodImplementations.h` to cover required IGListKit methods that don't apply when used with ASDK.

@ay8s @appleguy @nguyenhuy @maicki @garrettmoon @jessesquires @ocrickard ",Adlai-Holler,ay8s
2942,2017-01-28 00:21:59,"This supersedes #2848 which was a bit hacky and messy.

- Add `ASCollectionDataSourceInterop` and `ASCollectionDelegateInterop` protocols to formalize what hooks we need to support IGListKit.
- Add `IGListAdapterBasedDataSource` to connect IGListKit to AsyncDisplayKit using the existing dataSource/delegate architecture.
- Beef up ASDKgram to use a header node on the IGListKit tab.

To use IGListKit:
- Have your section controllers conform to `ASSectionController`. 
- Have your supplementary view sources conform to `ASSupplementaryNodeSource`.
- On your `IGListAdapter`, call `-setASDKCollectionNode:` to make the connection.

Note: Use the provided implementations from `ASIGListKitMethodImplementations.h` to cover required IGListKit methods that don't apply when used with ASDK.

@ay8s @appleguy @nguyenhuy @maicki @garrettmoon @jessesquires @ocrickard ",Adlai-Holler,ocrickard
2942,2017-01-30 22:13:08,"So awesome, great work @Adlai-Holler, going to have to play around w/ this!

Also 👋  @appleguy ❤️, we've come full circle!",rnystrom,appleguy
2941,2017-01-30 18:54:11,Ready for first review. CC @nguyenhuy ,maicki,nguyenhuy
2940,2017-01-27 23:41:22,cc @garrettmoon ,maicki,garrettmoon
2940,2017-02-03 03:47:24,@appleguy Just added `groupOpacity` handling. Let me know what you think. Thanks!,maicki,appleguy
2931,2017-01-25 00:58:29,cc @garrettmoon ,maicki,garrettmoon
2930,2017-01-24 23:36:45,"- Raise deployment target to iOS 8.
- Remove static library target – simplifies our project config to be framework-centric a la IGListKit.
- Add modern Obj-C annotations to `ASTraitCollection`.

@garrettmoon @appleguy @maicki @nguyenhuy",Adlai-Holler,nguyenhuy
2930,2017-01-24 23:36:45,"- Raise deployment target to iOS 8.
- Remove static library target – simplifies our project config to be framework-centric a la IGListKit.
- Add modern Obj-C annotations to `ASTraitCollection`.

@garrettmoon @appleguy @maicki @nguyenhuy",Adlai-Holler,garrettmoon
2930,2017-01-24 23:36:45,"- Raise deployment target to iOS 8.
- Remove static library target – simplifies our project config to be framework-centric a la IGListKit.
- Add modern Obj-C annotations to `ASTraitCollection`.

@garrettmoon @appleguy @maicki @nguyenhuy",Adlai-Holler,appleguy
2930,2017-01-24 23:36:45,"- Raise deployment target to iOS 8.
- Remove static library target – simplifies our project config to be framework-centric a la IGListKit.
- Add modern Obj-C annotations to `ASTraitCollection`.

@garrettmoon @appleguy @maicki @nguyenhuy",Adlai-Holler,maicki
2929,2017-01-24 22:55:52,Linking this framework strongly is weighing down our library! @garrettmoon @appleguy ,Adlai-Holler,garrettmoon
2929,2017-01-24 22:55:52,Linking this framework strongly is weighing down our library! @garrettmoon @appleguy ,Adlai-Holler,appleguy
2927,2017-01-24 21:07:02,"@jellenbogen - thank you for providing a concise example project! 

I asked @maicki about this and he said that this is expected behavior, although we could definitely improve our documentation around this. 

`ASLayoutSpec` is essentially an abstract class, _except_ for its one use as a flexible spacer (when used with no children). If you want to use `ASLayoutSpec`, you'll need to subclass it and implement a few methods (see any of the other layout specs for an example of that. 

If you just need to return a single node from your `-layoutSpecThatFits:` method, then use `ASWrapperLayoutSpec` as you did.  ",hannahmbanana,maicki
2923,2017-01-24 02:54:49,"@Adlai-Holler: Appreciate your review here.

Closes #2916.",nguyenhuy,Adlai-Holler
2922,2017-01-24 00:52:28,cc @garrettmoon ,maicki,garrettmoon
2921,2017-01-23 23:42:14,cc @garrettmoon ,maicki,garrettmoon
2916,2017-01-20 03:16:44,"This year I'd like to achieve some _significant_ refactoring to our data controller class cluster. It is a crucial piece of our architecture, and there's a lot that we can improve about it:

This first task is to remove `ASChangeSetDataController`. Currently, this class receives calls like `insertItemsAtIndexPaths:` and `deleteItemsAtIndexPaths:` etc and buffers them into an `_ASHierarchyChangeSet` (does not call super). Then, during `endUpdates`, it reads all the changes out of the hierarchy change set and makes the same insert/delete calls, _in safe order_ up to its parent `ASDataController`. 

This causes a number of headaches, because:
- It obscures what's really going on when you update a collection: you _transmit_ a changeset across a bunch of calls, and then you actually commit it in `-endUpdates`. So once they commit the change, we should forget all about the big stream of `reload/insert/delete` calls and think of it as just one change that we need to process.
- `ASDataController` has no context around the editing calls it receives. It just gets a stream of insert/delete calls during `endUpdates`, and for each one we switch queues and do all this stuff.
- Since it lacks context, its power is really limited, which is bad because it's an important class.
- It's very weird for a subclass to suppress, and then reorder, and then submit `super` calls for the calls it receives. It makes it tricky to nail down just what each method means!

So let's remove it, and add a single editing method to `ASDataController` like `updateWithChangeSet:`, and have `ASCollectionDataController` inherit directly from `ASDataController`. In the future we'll combine `ASCollectionDataController` and `ASDataController` since they duplicate so much functionality.

I've pushed a branch `SimplifyDataController` that is partially complete, but I'm swamped with work right now so if @nguyenhuy you would be willing to commandeer it I would appreciate it.",Adlai-Holler,nguyenhuy
2914,2017-02-24 17:46:20,"@Adlai-Holler, @maicki, @appleguy, @garrettmoon: This PR is ready. Appreciate your reviews here. Thank you!",nguyenhuy,garrettmoon
2914,2017-02-24 17:46:20,"@Adlai-Holler, @maicki, @appleguy, @garrettmoon: This PR is ready. Appreciate your reviews here. Thank you!",nguyenhuy,appleguy
2914,2017-02-24 17:46:20,"@Adlai-Holler, @maicki, @appleguy, @garrettmoon: This PR is ready. Appreciate your reviews here. Thank you!",nguyenhuy,maicki
2914,2017-02-24 17:46:20,"@Adlai-Holler, @maicki, @appleguy, @garrettmoon: This PR is ready. Appreciate your reviews here. Thank you!",nguyenhuy,Adlai-Holler
2914,2017-02-26 19:59:39,"Woohoo, thanks for reviewing this, @Adlai-Holler!",nguyenhuy,Adlai-Holler
2913,2017-01-19 12:36:05,"- The size is passed as a param of `-calculateLayoutThatFits:restrictedToSize:relativeToParentSize:`.
- It's almost always the same as `self.style.size`, but it should be used nevertheless as part of the API contract.

Would love to have a review from @maicki. Thanks!",nguyenhuy,maicki
2911,2017-02-09 19:39:23,@nguyenhuy - do you have any insight on this reported issue? ,hannahmbanana,nguyenhuy
2910,2017-01-29 23:04:01,"Hi @Adlai-Holler , thanks so much for your review. I have made the changes. Let me know if there is anything else you need.",Cal-um,Adlai-Holler
2908,2017-02-09 19:42:49,"@ArmandsB - thank you for including a sample project! 
@Adlai-Holler - could you triage this?",hannahmbanana,Adlai-Holler
2906,2017-01-19 21:56:36,"@nguyenhuy Ah! I meant ""as documented in this PR"", the UICollectionView behavior here is undocumented but unlikely to change.",Adlai-Holler,nguyenhuy
2895,2017-01-17 08:20:37,"@ArEnSc - The answer to your first question is YES, if your sidebar is written with layout specs, stacks, etc. 

In general, the Layout Transition API is designed to transition between two layout trees. In most cases, you are transitioning from an initial state in which some subnodes are present, to a different state in which some of them have been removed and some others added. However, I would have thought that the difference in a preferred layout size would count as a different layout tree. The way you implemented this may have been incorrect though. 

@maicki @nguyenhuy - did I impart any incorrect information? Could you provide a better answer on sizing changes (but no subnode changes) with the Layout Transition API?",hannahmbanana,nguyenhuy
2895,2017-01-17 08:20:37,"@ArEnSc - The answer to your first question is YES, if your sidebar is written with layout specs, stacks, etc. 

In general, the Layout Transition API is designed to transition between two layout trees. In most cases, you are transitioning from an initial state in which some subnodes are present, to a different state in which some of them have been removed and some others added. However, I would have thought that the difference in a preferred layout size would count as a different layout tree. The way you implemented this may have been incorrect though. 

@maicki @nguyenhuy - did I impart any incorrect information? Could you provide a better answer on sizing changes (but no subnode changes) with the Layout Transition API?",hannahmbanana,maicki
2892,2017-01-12 18:55:39,"Since this PR touches a core component of the layout system, I really appreciate reviews from @maicki, @rcancro, @appleguy, @garrettmoon and @Adlai-Holler.",nguyenhuy,garrettmoon
2892,2017-01-12 18:55:39,"Since this PR touches a core component of the layout system, I really appreciate reviews from @maicki, @rcancro, @appleguy, @garrettmoon and @Adlai-Holler.",nguyenhuy,rcancro
2892,2017-01-12 18:55:39,"Since this PR touches a core component of the layout system, I really appreciate reviews from @maicki, @rcancro, @appleguy, @garrettmoon and @Adlai-Holler.",nguyenhuy,maicki
2892,2017-01-12 18:55:39,"Since this PR touches a core component of the layout system, I really appreciate reviews from @maicki, @rcancro, @appleguy, @garrettmoon and @Adlai-Holler.",nguyenhuy,appleguy
2892,2017-01-12 18:55:39,"Since this PR touches a core component of the layout system, I really appreciate reviews from @maicki, @rcancro, @appleguy, @garrettmoon and @Adlai-Holler.",nguyenhuy,Adlai-Holler
2892,2017-01-18 16:24:57,"@Adlai-Holler: Great catch on the misalignment. It's indeed a pre-existing issue. These snapshots were generated based on the current implementation on master. 

It has something to do with the baseline difference between the texts that should be floored but instead (indirectly) ceiled. I'm investigating this but don't think it should block this PR.",nguyenhuy,Adlai-Holler
2891,2017-01-12 10:22:15,"Implements #2837 on ASTableNode and ASCollectionNode. I've tried to keep the API minimal. Also added an example app, since the user will have to adjust the contentInset of their ASTable/CollectionNode for the inversion to work properly. 

Documentation: https://github.com/AsyncDisplayKit/Documentation/pull/78

@appleguy ",aaronschubert0,appleguy
2889,2017-01-11 20:35:43,"Resolves #2888 @hannahmbanana 

I didn't know this, but `convertPoint:toLayer:nil` behaves a lot differently from `convertPoint:toView:nil` and so it's important that we call the appropriate method for the appropriate case.",Adlai-Holler,hannahmbanana
2886,2017-01-11 16:33:09,"This updates the values automatically, which is perfect to reflect the growth of ASDK. I've wanted to do this for ages but the shield.io API didn't have the support up till now. We lose some granularity but I think this is worth it.

Maybe @hannahmbanana or @nguyenhuy could take a quick look. Sorry it's been a while since I've kept up to date with the project, not sure if @appleguy is still directly involved.",aaronschubert0,nguyenhuy
2886,2017-01-11 16:33:09,"This updates the values automatically, which is perfect to reflect the growth of ASDK. I've wanted to do this for ages but the shield.io API didn't have the support up till now. We lose some granularity but I think this is worth it.

Maybe @hannahmbanana or @nguyenhuy could take a quick look. Sorry it's been a while since I've kept up to date with the project, not sure if @appleguy is still directly involved.",aaronschubert0,appleguy
2886,2017-01-11 16:33:09,"This updates the values automatically, which is perfect to reflect the growth of ASDK. I've wanted to do this for ages but the shield.io API didn't have the support up till now. We lose some granularity but I think this is worth it.

Maybe @hannahmbanana or @nguyenhuy could take a quick look. Sorry it's been a while since I've kept up to date with the project, not sure if @appleguy is still directly involved.",aaronschubert0,hannahmbanana
2886,2017-01-12 09:14:21,Awesome thanks guys! @Adlai-Holler @nguyenhuy ,aaronschubert0,nguyenhuy
2883,2017-01-10 02:17:36,@garrettmoon @rcancro ,Adlai-Holler,garrettmoon
2883,2017-01-10 02:17:36,@garrettmoon @rcancro ,Adlai-Holler,rcancro
2881,2017-01-09 21:11:47,"http://jenkinsmaster-vpc-007.ec2.pin220.com/job/AsyncDisplayKit/449/

<img width=""729"" alt=""screen shot 2017-01-09 at 1 09 43 pm"" src=""https://cloud.githubusercontent.com/assets/2466893/21783628/1c0f38c0-d66d-11e6-88ac-a92b1f515c11.png"">

@garrettmoon ?",Adlai-Holler,garrettmoon
2881,2017-01-09 23:05:51,"@garrettmoon mentioned that the cause of this is unclear and the CI step is disabled for the time being. Closing this, and down the road we'll re-enabled CI podspec validation but it's not urgent. ",Adlai-Holler,garrettmoon
2868,2017-01-05 09:40:49,"Hi @Adlai-Holler ,

I would like to seek your comments on this PR, regarding `moveItem:` animation concern specified in #698 #2845 

As my colleague @leotumwattana mentioned in #2845 , we are seeking a way to use UICollectionView native `move` behaviour, which provides a visual cue to users that the item is moved from one position to another.

I developed the work only on `ASCollectionView` and `moveItem:` by far. As I am new to the framework (2 days so far), I would like to seek your advices on whether I am heading the right direction in implementing such enhancement.

Addresses: #698 
I'm also including a sample project [here](https://github.com/harryworld/ASDKMoveItems) to demonstrate the updated behaviour.

Thanks so much.

- [ ] Support ASCollectionNode
  - [ ] Section
  - [x] Row
- [ ] Support ASTableNode
  - [ ] Section
  - [ ] Row
- [ ] Decouple / Replicate _ASHierarchyItemChange for `from` and `to` indexPaths
- [ ] Documentation
- [ ] Tests

@appleguy @garrettmoon @nguyenhuy @levi",harryworld,Adlai-Holler
2868,2017-01-05 09:40:49,"Hi @Adlai-Holler ,

I would like to seek your comments on this PR, regarding `moveItem:` animation concern specified in #698 #2845 

As my colleague @leotumwattana mentioned in #2845 , we are seeking a way to use UICollectionView native `move` behaviour, which provides a visual cue to users that the item is moved from one position to another.

I developed the work only on `ASCollectionView` and `moveItem:` by far. As I am new to the framework (2 days so far), I would like to seek your advices on whether I am heading the right direction in implementing such enhancement.

Addresses: #698 
I'm also including a sample project [here](https://github.com/harryworld/ASDKMoveItems) to demonstrate the updated behaviour.

Thanks so much.

- [ ] Support ASCollectionNode
  - [ ] Section
  - [x] Row
- [ ] Support ASTableNode
  - [ ] Section
  - [ ] Row
- [ ] Decouple / Replicate _ASHierarchyItemChange for `from` and `to` indexPaths
- [ ] Documentation
- [ ] Tests

@appleguy @garrettmoon @nguyenhuy @levi",harryworld,nguyenhuy
2868,2017-01-05 09:40:49,"Hi @Adlai-Holler ,

I would like to seek your comments on this PR, regarding `moveItem:` animation concern specified in #698 #2845 

As my colleague @leotumwattana mentioned in #2845 , we are seeking a way to use UICollectionView native `move` behaviour, which provides a visual cue to users that the item is moved from one position to another.

I developed the work only on `ASCollectionView` and `moveItem:` by far. As I am new to the framework (2 days so far), I would like to seek your advices on whether I am heading the right direction in implementing such enhancement.

Addresses: #698 
I'm also including a sample project [here](https://github.com/harryworld/ASDKMoveItems) to demonstrate the updated behaviour.

Thanks so much.

- [ ] Support ASCollectionNode
  - [ ] Section
  - [x] Row
- [ ] Support ASTableNode
  - [ ] Section
  - [ ] Row
- [ ] Decouple / Replicate _ASHierarchyItemChange for `from` and `to` indexPaths
- [ ] Documentation
- [ ] Tests

@appleguy @garrettmoon @nguyenhuy @levi",harryworld,levi
2868,2017-01-05 09:40:49,"Hi @Adlai-Holler ,

I would like to seek your comments on this PR, regarding `moveItem:` animation concern specified in #698 #2845 

As my colleague @leotumwattana mentioned in #2845 , we are seeking a way to use UICollectionView native `move` behaviour, which provides a visual cue to users that the item is moved from one position to another.

I developed the work only on `ASCollectionView` and `moveItem:` by far. As I am new to the framework (2 days so far), I would like to seek your advices on whether I am heading the right direction in implementing such enhancement.

Addresses: #698 
I'm also including a sample project [here](https://github.com/harryworld/ASDKMoveItems) to demonstrate the updated behaviour.

Thanks so much.

- [ ] Support ASCollectionNode
  - [ ] Section
  - [x] Row
- [ ] Support ASTableNode
  - [ ] Section
  - [ ] Row
- [ ] Decouple / Replicate _ASHierarchyItemChange for `from` and `to` indexPaths
- [ ] Documentation
- [ ] Tests

@appleguy @garrettmoon @nguyenhuy @levi",harryworld,appleguy
2868,2017-01-05 09:40:49,"Hi @Adlai-Holler ,

I would like to seek your comments on this PR, regarding `moveItem:` animation concern specified in #698 #2845 

As my colleague @leotumwattana mentioned in #2845 , we are seeking a way to use UICollectionView native `move` behaviour, which provides a visual cue to users that the item is moved from one position to another.

I developed the work only on `ASCollectionView` and `moveItem:` by far. As I am new to the framework (2 days so far), I would like to seek your advices on whether I am heading the right direction in implementing such enhancement.

Addresses: #698 
I'm also including a sample project [here](https://github.com/harryworld/ASDKMoveItems) to demonstrate the updated behaviour.

Thanks so much.

- [ ] Support ASCollectionNode
  - [ ] Section
  - [x] Row
- [ ] Support ASTableNode
  - [ ] Section
  - [ ] Row
- [ ] Decouple / Replicate _ASHierarchyItemChange for `from` and `to` indexPaths
- [ ] Documentation
- [ ] Tests

@appleguy @garrettmoon @nguyenhuy @levi",harryworld,garrettmoon
2868,2017-01-05 09:40:49,"Hi @Adlai-Holler ,

I would like to seek your comments on this PR, regarding `moveItem:` animation concern specified in #698 #2845 

As my colleague @leotumwattana mentioned in #2845 , we are seeking a way to use UICollectionView native `move` behaviour, which provides a visual cue to users that the item is moved from one position to another.

I developed the work only on `ASCollectionView` and `moveItem:` by far. As I am new to the framework (2 days so far), I would like to seek your advices on whether I am heading the right direction in implementing such enhancement.

Addresses: #698 
I'm also including a sample project [here](https://github.com/harryworld/ASDKMoveItems) to demonstrate the updated behaviour.

Thanks so much.

- [ ] Support ASCollectionNode
  - [ ] Section
  - [x] Row
- [ ] Support ASTableNode
  - [ ] Section
  - [ ] Row
- [ ] Decouple / Replicate _ASHierarchyItemChange for `from` and `to` indexPaths
- [ ] Documentation
- [ ] Tests

@appleguy @garrettmoon @nguyenhuy @levi",harryworld,leotumwattana
2868,2017-02-10 07:07:22,"@harryworld Since your changes are dependent on @nguyenhuy 's in-progress data controller changes, and so the final outcome of native moves will probably come from a separate PR, I'm closing this for the time being. If I've got something wrong, feel free to reopen at your discretion!",Adlai-Holler,nguyenhuy
2867,2017-01-05 04:23:37,@Adlai-Holler: Here's the replacement PR based off Master. Thanks.,leotumwattana,Adlai-Holler
2867,2017-01-06 03:46:52,Thanks @Adlai-Holler. Made the changes you mentioned above. Cheers. 👍 ,leotumwattana,Adlai-Holler
2862,2017-01-04 20:22:54,"- Revert 7872cfb because a transition isn't complete until its CAAnimation finishes. If `_transitionInProgress` flag is turned off before that, any layout pass occurs afterward, but before `-transitionContext:didComplete:` is called, can erase all pending states of the transition, causing old subviews to remain in the hierarchy forever.
- If a layout transition causes the node to have a different size, notify its supernode to resize. Currently we're already doing this with ASCellNode via measurement completion block, but not with normal ASDisplayNode. ASScrollNode in particular isn't notified and thus doesn't update its content size.

@maicki, @garrettmoon, @appleguy, @Adlai-Holler: Would love to have your feedbacks here.

@hannahmbanana Please help me to test this diff with Pinterest master. I already did that, as well as with ASDKLayoutTransition example and the sample projects in #2841 and #2816. However, with all the branch and context switchings, I may overlooked something. Gonna test it more tomorrow!

",nguyenhuy,garrettmoon
2862,2017-01-04 20:22:54,"- Revert 7872cfb because a transition isn't complete until its CAAnimation finishes. If `_transitionInProgress` flag is turned off before that, any layout pass occurs afterward, but before `-transitionContext:didComplete:` is called, can erase all pending states of the transition, causing old subviews to remain in the hierarchy forever.
- If a layout transition causes the node to have a different size, notify its supernode to resize. Currently we're already doing this with ASCellNode via measurement completion block, but not with normal ASDisplayNode. ASScrollNode in particular isn't notified and thus doesn't update its content size.

@maicki, @garrettmoon, @appleguy, @Adlai-Holler: Would love to have your feedbacks here.

@hannahmbanana Please help me to test this diff with Pinterest master. I already did that, as well as with ASDKLayoutTransition example and the sample projects in #2841 and #2816. However, with all the branch and context switchings, I may overlooked something. Gonna test it more tomorrow!

",nguyenhuy,appleguy
2862,2017-01-04 20:22:54,"- Revert 7872cfb because a transition isn't complete until its CAAnimation finishes. If `_transitionInProgress` flag is turned off before that, any layout pass occurs afterward, but before `-transitionContext:didComplete:` is called, can erase all pending states of the transition, causing old subviews to remain in the hierarchy forever.
- If a layout transition causes the node to have a different size, notify its supernode to resize. Currently we're already doing this with ASCellNode via measurement completion block, but not with normal ASDisplayNode. ASScrollNode in particular isn't notified and thus doesn't update its content size.

@maicki, @garrettmoon, @appleguy, @Adlai-Holler: Would love to have your feedbacks here.

@hannahmbanana Please help me to test this diff with Pinterest master. I already did that, as well as with ASDKLayoutTransition example and the sample projects in #2841 and #2816. However, with all the branch and context switchings, I may overlooked something. Gonna test it more tomorrow!

",nguyenhuy,maicki
2862,2017-01-04 20:22:54,"- Revert 7872cfb because a transition isn't complete until its CAAnimation finishes. If `_transitionInProgress` flag is turned off before that, any layout pass occurs afterward, but before `-transitionContext:didComplete:` is called, can erase all pending states of the transition, causing old subviews to remain in the hierarchy forever.
- If a layout transition causes the node to have a different size, notify its supernode to resize. Currently we're already doing this with ASCellNode via measurement completion block, but not with normal ASDisplayNode. ASScrollNode in particular isn't notified and thus doesn't update its content size.

@maicki, @garrettmoon, @appleguy, @Adlai-Holler: Would love to have your feedbacks here.

@hannahmbanana Please help me to test this diff with Pinterest master. I already did that, as well as with ASDKLayoutTransition example and the sample projects in #2841 and #2816. However, with all the branch and context switchings, I may overlooked something. Gonna test it more tomorrow!

",nguyenhuy,hannahmbanana
2862,2017-01-04 20:22:54,"- Revert 7872cfb because a transition isn't complete until its CAAnimation finishes. If `_transitionInProgress` flag is turned off before that, any layout pass occurs afterward, but before `-transitionContext:didComplete:` is called, can erase all pending states of the transition, causing old subviews to remain in the hierarchy forever.
- If a layout transition causes the node to have a different size, notify its supernode to resize. Currently we're already doing this with ASCellNode via measurement completion block, but not with normal ASDisplayNode. ASScrollNode in particular isn't notified and thus doesn't update its content size.

@maicki, @garrettmoon, @appleguy, @Adlai-Holler: Would love to have your feedbacks here.

@hannahmbanana Please help me to test this diff with Pinterest master. I already did that, as well as with ASDKLayoutTransition example and the sample projects in #2841 and #2816. However, with all the branch and context switchings, I may overlooked something. Gonna test it more tomorrow!

",nguyenhuy,Adlai-Holler
2861,2017-01-04 20:02:57,@garrettmoon Thoughts?,Adlai-Holler,garrettmoon
2859,2017-01-04 12:01:21,"Originates from `pi_imageNamed`. Credit goes to @garrettmoon and @rcancro. 

cc @appleguy and @rewandy.",nguyenhuy,garrettmoon
2859,2017-01-04 12:01:21,"Originates from `pi_imageNamed`. Credit goes to @garrettmoon and @rcancro. 

cc @appleguy and @rewandy.",nguyenhuy,rcancro
2859,2017-01-04 12:01:21,"Originates from `pi_imageNamed`. Credit goes to @garrettmoon and @rcancro. 

cc @appleguy and @rewandy.",nguyenhuy,appleguy
2859,2017-01-04 12:01:21,"Originates from `pi_imageNamed`. Credit goes to @garrettmoon and @rcancro. 

cc @appleguy and @rewandy.",nguyenhuy,rewandy
2859,2017-01-04 18:58:35,"Cool, thanks @Adlai-Holler, @garrettmoon!",nguyenhuy,garrettmoon
2858,2017-01-05 21:28:16,"@jennibunny - if you could share your `layoutSpecThatFits:` method, I'm sure @maicki - our layout spec expert could point out the issue. ",hannahmbanana,maicki
2856,2017-01-03 22:08:08,This fixes #2843 which @rewandy raised in a more general way. ,Adlai-Holler,rewandy
2851,2017-01-08 11:44:52,"thanks for uploading sample project. I checked, it seem `_contentCalculatedSizeFromLayout` in ASScrollNode that used for `contentSize` of scrollView, has wrong size! but @hannahmbanana needs more investigation.

`ASScrollNode`:
<img width=""928"" alt=""screen shot 2017-01-08 at 2 44 25 pm"" src=""https://cloud.githubusercontent.com/assets/3206748/21749498/b5c73ac6-d5b4-11e6-8163-b937f02d7ca5.png"">.

ButtonsContainerNode used as subNode of ScrollNode:
<img width=""1099"" alt=""screen shot 2017-01-08 at 3 13 26 pm"" src=""https://cloud.githubusercontent.com/assets/3206748/21749520/29f85826-d5b5-11e6-9f29-2466252dcf25.png"">
",hashemp206,hannahmbanana
2849,2017-01-02 20:38:02,"@Adlai-Holler: Thanks for the review. The ASVideoNode delegate change was merged in #2844. I've rebased this PR to remove that commit. Let's wait for another day so others have a chance to raise any questions/concerns. Also, I can't land this myself (no GitHub permission) :)",nguyenhuy,Adlai-Holler
2848,2016-12-31 00:13:29,@levi @garrettmoon @ay8s @chrisdanford @rahul-malik ,Adlai-Holler,levi
2848,2016-12-31 00:13:29,@levi @garrettmoon @ay8s @chrisdanford @rahul-malik ,Adlai-Holler,garrettmoon
2848,2016-12-31 00:13:29,@levi @garrettmoon @ay8s @chrisdanford @rahul-malik ,Adlai-Holler,rahul-malik
2848,2016-12-31 00:13:29,@levi @garrettmoon @ay8s @chrisdanford @rahul-malik ,Adlai-Holler,ay8s
2848,2016-12-31 00:13:29,@levi @garrettmoon @ay8s @chrisdanford @rahul-malik ,Adlai-Holler,chrisdanford
2847,2016-12-31 21:02:16,@appleguy @maicki I never used tests in a iOS App (shame on me). This would take me some time.. ,SaifAlDilaimi,maicki
2847,2016-12-31 22:47:15,@appleguy @maicki can you guys review again?,SaifAlDilaimi,maicki
2847,2017-01-02 03:03:08,"@maicki I just saw your comment and want to make sure it is resolved before merging this!

Regarding the layout, the expected behavior since early ASDK has been that the ASCellNode is a subnode of the .contentView of the cell, and matches its frame.  This means that if an accessoryView is shown, the size of the cell would be reduced, just as is the case for any UIKit code putting things in the .contentView.

The current code looks to still include this behavior, where the width of the contentView is treated essentially as a constrained size.  See screenshot below.

In terms of testing, what did you have in mind?  From a technical perspective, how could this be tested?  Saif is very new to ASDK, so I don't think he would be able to do a new snapshot test from scratch, but maybe you know of some existing test that we could either duplicate and add it to or include it as part of?

<img width=""1037"" alt=""screen shot 2017-01-01 at 6 58 13 pm"" src=""https://cloud.githubusercontent.com/assets/565251/21584219/ebbcf48c-d054-11e6-9889-23c4963ac106.png"">
",appleguy,maicki
2847,2017-01-03 15:23:24,"> @SaifAlDilaimi :) It looks like you forgot one more — .clipsToBounds
> 
> Since it's also in setNode in the Collection case, let's make sure the Table matches. You can actually delete this comment while moving the one line of code, as the comment references an old bug that has since been resolved.
> 
> I don't see any other changes to request (this is part of the last request), and so once @maicki confirms, I think we should land this. It would be great to have tests; perhaps we can track that as a separate task (since I know you were expecting this to be a very quick project)?

@appleguy @maicki I have commited the last change. I would love to add tests but as I said I don't really know what/how to test the changes that I made. 

I don't really need it to be merged fast because I'm using my forked repo. If we do it let do it right.",SaifAlDilaimi,maicki
2847,2017-01-09 08:45:36,@maicki @appleguy any progress on this? Is there something I need todo?,SaifAlDilaimi,maicki
2843,2017-01-02 03:14:15,"@rewandy Thanks!  Does this same method exist for collection views?  I'm not sure if it does, but if so, could you check that one too?

@Adlai-Holler would be the best person to confirm this is the right fix.  How was a nil value handled previously?  Wouldn't the convert index path method provide a nil response if it had a nil input?  That seems important to determine.",appleguy,Adlai-Holler
2842,2016-12-30 07:26:41,"additional info from our layout spec expert @maicki: ""The main and important point is that the `flexBasis` value is considered while calculating the frame for the node that also involves `flexShrink` and `flexGrow`. Just using `width` / `minWidth` and `height` / `minHeight` this is not the case.""",hannahmbanana,maicki
2839,2016-12-27 07:48:03,"@hashemp206 - it was a recently added just last week, but at some point it should probably be enabled by default.  @garrettmoon",hannahmbanana,garrettmoon
2837,2017-01-12 19:24:12,Many thanks to @aaronschubert0 for implementing this commonly requested feature! ,hannahmbanana,aaronschubert0
2836,2017-03-05 15:42:31,"I've created a sample that has working self-sizing supplementary nodes.
https://github.com/ImJCabus/ASCollectionNodeAutoHeader
So the answer is: Yes, it's certainly possible to employ self-sizing headers.

@hannahmbanana @appleguy 
Maybe close this issue?",ImJCabus,appleguy
2836,2017-03-05 15:42:31,"I've created a sample that has working self-sizing supplementary nodes.
https://github.com/ImJCabus/ASCollectionNodeAutoHeader
So the answer is: Yes, it's certainly possible to employ self-sizing headers.

@hannahmbanana @appleguy 
Maybe close this issue?",ImJCabus,hannahmbanana
2826,2016-12-22 20:59:25,"Adds a (disabled) unit test for #2825.

This has the side effect of making ASTextCellNode use automatic subnode management. @garrettmoon @appleguy ",Adlai-Holler,garrettmoon
2826,2016-12-22 20:59:25,"Adds a (disabled) unit test for #2825.

This has the side effect of making ASTextCellNode use automatic subnode management. @garrettmoon @appleguy ",Adlai-Holler,appleguy
2825,2016-12-22 21:00:28,cc @appleguy @garrettmoon @maicki,Adlai-Holler,garrettmoon
2825,2016-12-22 21:00:28,cc @appleguy @garrettmoon @maicki,Adlai-Holler,appleguy
2825,2016-12-22 21:00:28,cc @appleguy @garrettmoon @maicki,Adlai-Holler,maicki
2824,2017-01-25 22:08:57,Inversion feature implemented by @aaronschubert0 in PR #2891. Documentation of the inversion feature here - http://asyncdisplaykit.org/docs/inversion.html,hannahmbanana,aaronschubert0
2820,2016-12-21 18:36:13,cc @garrettmoon @Adlai-Holler ,maicki,garrettmoon
2820,2016-12-21 18:36:13,cc @garrettmoon @Adlai-Holler ,maicki,Adlai-Holler
2818,2016-12-21 17:55:20,"From #2812, there is a CI failure that appears to be unrelated to the code changed:

http://jenkinsmaster-vpc-007.ec2.pin220.com/job/AsyncDisplayKit-PRs/1372/console

<img width=""721"" alt=""screen shot 2016-12-21 at 12 53 31 pm"" src=""https://cloud.githubusercontent.com/assets/2466893/21400107/8300747c-c77c-11e6-81a3-6df5496a3807.png"">

@maicki Would you take a look at this and see if there's a possible race condition? I'll restart the build on that PR and see if we get it again.",Adlai-Holler,maicki
2817,2016-12-21 11:19:40,cc @maicki.,nguyenhuy,maicki
2814,2016-12-20 22:06:25,@nguyenhuy does this look right to you?,garrettmoon,nguyenhuy
2814,2016-12-20 22:20:24,@nguyenhuy it should be fine because nothing is retaining the block itself?,garrettmoon,nguyenhuy
2812,2016-12-20 19:17:42,Pointed out by @nguyenhuy.  There was no locking around this non-atomic ivar.,chrisdanford,nguyenhuy
2811,2016-12-20 22:09:03,@Adlai-Holler should this be fixed by #2805?,garrettmoon,Adlai-Holler
2809,2016-12-21 11:21:06,@Adlai-Holler: super quick review please :),nguyenhuy,Adlai-Holler
2809,2016-12-21 17:49:30,@Adlai-Holler Thanks. Fixed!,nguyenhuy,Adlai-Holler
2807,2016-12-19 23:42:52,"Currently there are cases where we assert in debug and avoid crashing in production, however, this can lead to losing visibility on issues such as layout (see #2773). As @appleguy has suggested, we could have the ability to, in certain cases, offer the developer the ability to crash in production or produce some logging for the developer to pipe the failure somewhere, i.e. +[ASDisplayNode setNonfatalHandlerBlock:].",garrettmoon,appleguy
2806,2016-12-19 22:22:54,"@garrettmoon - when this syncs to Pinterest, could you let Bill know? Thanks!",hannahmbanana,garrettmoon
2805,2016-12-19 22:38:23,Thanks for the awesome feedback @appleguy ! Added a (previously-failing) unit test and managed to catch an unexpected case (deleting the last item in a collection view) and now that's handled too. Time to merge!,Adlai-Holler,appleguy
2799,2016-12-19 16:22:51,"cc @hannahmbanana, @appleguy, @garrettmoon. I think this change is safe. I'm using the same technique that we are using for [ASTableView](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASTableView.mm#L1740) and [ASCollectionView](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASCollectionView.mm#L1721). ~~Would be great if it can make to 2.0.1 because it helps @hannahmbanana to avoid a workaround in her Pinterest code.~~",nguyenhuy,garrettmoon
2799,2016-12-19 16:22:51,"cc @hannahmbanana, @appleguy, @garrettmoon. I think this change is safe. I'm using the same technique that we are using for [ASTableView](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASTableView.mm#L1740) and [ASCollectionView](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASCollectionView.mm#L1721). ~~Would be great if it can make to 2.0.1 because it helps @hannahmbanana to avoid a workaround in her Pinterest code.~~",nguyenhuy,appleguy
2799,2016-12-19 16:22:51,"cc @hannahmbanana, @appleguy, @garrettmoon. I think this change is safe. I'm using the same technique that we are using for [ASTableView](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASTableView.mm#L1740) and [ASCollectionView](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASCollectionView.mm#L1721). ~~Would be great if it can make to 2.0.1 because it helps @hannahmbanana to avoid a workaround in her Pinterest code.~~",nguyenhuy,hannahmbanana
2797,2016-12-19 10:40:55,- Suggested by @appleguy in #2778,nguyenhuy,appleguy
2796,2016-12-19 05:27:19,"Addresses https://github.com/facebook/AsyncDisplayKit/pull/2795#issuecomment-267878024

Add assertions here to reenforce the non-nullability of the background and overlay layout elements.

cc  @maicki",master-nevi,maicki
2795,2016-12-18 07:58:51,"Resolves #2747.

Michael and I couldn't think of a use case for allowing an `ASBackgroundLayoutSpec` with a nil background layout element. cc @nguyenhuy",hannahmbanana,nguyenhuy
2794,2017-01-10 16:03:48,@garrettmoon @appleguy Fixed the build errors. Let's get that in for 2.0.2.,maicki,garrettmoon
2791,2016-12-19 04:59:35,Not sure if this is 2.1 or 2.0.1 - but I'll leave it here until @garrettmoon makes a call on it. :),hannahmbanana,garrettmoon
2791,2016-12-19 17:33:42,Thanks to @nguyenhuy for resolving this in #2799!,hannahmbanana,nguyenhuy
2787,2016-12-16 14:13:47,"@stephenkopylov I think you are right that there has been a behavior change here. For 1.9.x, vanilla ASDisplayNode layout code would return the bigger value among `_preferredFrameSize` (which is zero by default) and `constrainedSize.min` ([code in 1.9.2](https://github.com/facebook/AsyncDisplayKit/blob/e344f03608887d150607b854dc0fe5efad6580ec/AsyncDisplayKit/ASDisplayNode.mm#L2070)). While on 2.0, since we deprecate `preferredFrameSize` and actually don't even have an ivar for it, [`constrainedSize.max` is returned](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASDisplayNode.mm#L2691). Sorry we missed this hard-to-detect behavior change. We need to update the change log and/or migration guide. cc @hannahmbanana @maicki .

> because stackSpec can not stretch this two elements with fixed sizes, its maximum width limited by maximum width of its elements. Isn't it right?

Yes, that is right ([code here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/Private/ASStackUnpositionedLayout.mm)). But in this case the separator is the longest element because of the above new behavior. It's longer than the 2 buttons. The stack actually asks those buttons to stretch, to which they refuse because they have a fixed size . Does this explanation make sense?",nguyenhuy,maicki
2787,2016-12-16 14:13:47,"@stephenkopylov I think you are right that there has been a behavior change here. For 1.9.x, vanilla ASDisplayNode layout code would return the bigger value among `_preferredFrameSize` (which is zero by default) and `constrainedSize.min` ([code in 1.9.2](https://github.com/facebook/AsyncDisplayKit/blob/e344f03608887d150607b854dc0fe5efad6580ec/AsyncDisplayKit/ASDisplayNode.mm#L2070)). While on 2.0, since we deprecate `preferredFrameSize` and actually don't even have an ivar for it, [`constrainedSize.max` is returned](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASDisplayNode.mm#L2691). Sorry we missed this hard-to-detect behavior change. We need to update the change log and/or migration guide. cc @hannahmbanana @maicki .

> because stackSpec can not stretch this two elements with fixed sizes, its maximum width limited by maximum width of its elements. Isn't it right?

Yes, that is right ([code here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/Private/ASStackUnpositionedLayout.mm)). But in this case the separator is the longest element because of the above new behavior. It's longer than the 2 buttons. The stack actually asks those buttons to stretch, to which they refuse because they have a fixed size . Does this explanation make sense?",nguyenhuy,hannahmbanana
2786,2016-12-18 08:34:26,@Adlai-Holler or @maicki should review this one.  Please ping us on Slack if you don't hear back by mid-next-week and I'll take a deeper pass myself to approve.,appleguy,maicki
2786,2016-12-18 08:34:26,@Adlai-Holler or @maicki should review this one.  Please ping us on Slack if you don't hear back by mid-next-week and I'll take a deeper pass myself to approve.,appleguy,Adlai-Holler
2786,2016-12-18 17:45:07,"@appleguy Thanks for this really great framework. I've been delving more and more into it these past few days to see how and if we can adopt it to our app. Falling in ❤️  with it. Looking forward to seeing this framework continue to grow and to see if my friends and I will be able to contribute to it more in the future. Cheers!

@Adlai-Holler @maicki: Do let me know your comments and to let me know if I need to make any changes for this patch. 👍 ",leotumwattana,maicki
2786,2016-12-18 17:45:07,"@appleguy Thanks for this really great framework. I've been delving more and more into it these past few days to see how and if we can adopt it to our app. Falling in ❤️  with it. Looking forward to seeing this framework continue to grow and to see if my friends and I will be able to contribute to it more in the future. Cheers!

@Adlai-Holler @maicki: Do let me know your comments and to let me know if I need to make any changes for this patch. 👍 ",leotumwattana,Adlai-Holler
2784,2016-12-18 08:36:02,"@garrettmoon is there a lower-level way to do this?  E.g. How does ASDelegateProxy work in these cases without having to manually forward those methods?  I'm going to merge since @maicki already approved, but let me know your thoughts!",appleguy,maicki
2782,2016-12-15 21:24:06,@maicki definitely want your feedback on this.,garrettmoon,maicki
2782,2016-12-19 04:41:03,"Here's my feedback, although I don't intend for it to be definitive — I'm interested in understanding what behavior @maicki would prefer we support.

## 1. The internal complexity of ASNetworkImageNode
- Is important to consider and aim to reduce.  However, I believe it is *essential* that internal complexity not be a factor in the API design.  The reason is that there are sufficiently many clients of ASDK (over 1,000 developers regularly interacting with it), so that some increase in internal complexity would suggest we should invest in a refactor rather than affect the API.

## 2. There are exactly 3 cases to consider ASNetworkImageNode with:

Note that in the last case (both are set), we *must* provide *identical behavior* regardless of call order — therefore, regardless of implementation complexity, the decision on API behavior is only for the ""both"" case and doesn't care about the order.

### a. Just .URL
This behavior is simple.  It should not change from the prior implementation.  If externally *read*, the .image property will become set after the URL has loaded.  Likewise, the rendered version will be cleared when exiting the Display range, and the .image property itself will be cleared existing the Preload range.

### b. Just .image
This behavior is also simple, but doesn't work correctly in 2.0.  When just the .image is set and .URL is *never* set, the class should behave like ASImageNode.  Why?  Several reasons:

- many, many clients (including all over Pinterest) have already relied on this behavior.  That's because it's intuitive and very frequently convenient for app developers.
- the convenience for devs is highlighted by the case of PIImageNode.  It would be very difficult if we had to create a separate subclass and ensure even brand-new developers *always* use the base vs network class in the right situation.
- It would also make it more difficult for us to add features internally.  E.g., a network-loaded button background, or even the future ASVideoNode that doesn't subclass ASImageNode — they would each have to carefully manage a Network vs Non-Network node to support both the direct-set asset / thumbnail as well as the URL-based option.

### c. Both .URL and .image.
The case of BOTH .URL and .image set is less clear.  However, the case is clarified by seeing there are only two reasons a user would do this:

- they want to load the URL image but are providing a cached or smaller version of the image to ""prime"" the view,
- the code is incorrect and inconsistent.  I don't believe there is a use case where the .image should take precedence over the .URL, especially because there are memory risks to doing this (ASDK can't yield the memory, so it should only ever be used with small icon-like assets and these almost never have .URLs)

So lastly, this diff is a suggestion from @garrettmoon for how to make 2c. less ambiguous while still being VERY strict at preventing developers from mistakenly entering the ""2c2"" case.  The idea is that this will behave functionally identical to ""it's not allowed to set both URL and .image on a Network node"", *but* provide users *a technically-possible way* to support the commonly-useful pattern of ""priming"" a network image node.

## 3. To make this call (which would increase impl. complexity), let's look at the use case
What's causing this to be so important?  It's transitions that upscale photos, including the exact case @rcancro is working on right now with Pin Closeup's standard zoom-in.

Por these, it is *essential* to support upscaling a low-res photo *while immediately kicking off a new high-res download,* as well as *async-displaying the new version*, as well as *swapping in the high-res version as soon as it's done, in a seamless way*.  This behavior is super useful because it is so hard to handle at an application layer.

This was a very, very key use case that AsyncDisplayKit was architected to excel at in the pre-1.0 days, with ASMultiplexImageNode bearing the complexity of the use case.  However, Multiplex has fallen into non-maintenance, and so we have two paths to choose at this point:

- Let Multiplex continue to fade away, and probably become deprecated (e.g. we don't need to spend any time on it).  Support basic transition use case with something like ""ephemeralImage"", or simply using the .image + .URL combination as a simple implementation for this.
- Alternatively, plan to revive Multiplex and refactor it to share more code with Network.  Simplify Multiplex API so the ""common transition"" use case can be done more easily than the current dataSource-based API.  Keep NetworkImage as simple as possible and do not allow transitions to be performed with it.

Thanks for reading a long note, hope this was useful to the discussion :)",appleguy,rcancro
2777,2016-12-15 16:27:53,"@EviluS Thanks. I'm thinking of making it a little more seamless, since this really does sound like something more than I alone will use. As @appleguy mentioned in his talks, `ASKD` is now going beyond just providing performance, but also convenience for framework users.

Looking through ASEditableTextNode.mm, I'm thinking of extending `ASTextKitComponents` with something like:



Using `layoutManager.lineFragmentRect` to loop through and find the line fragmentRect that corresponds to the maxLine. That should give me a more accurate height than using a fixed font's point height. Especially since I'm expecting mixed fonts, use of Emojis, Chinese Characters, paragraph styles, etc.

Anyway, with that in place, I can modify ASEditableTextNode's `- (CGSize)calculateSizeThatFits:(CGSize)constrainedSize` to calculate the height using the existing method if `maximumLinesToDisplay = 0` or the above if `maximumLinesToDisplay != 0`.

Anyway, the only issue I have is that I'm absolutely not familiar with Objective-C. It generally makes my eyes glaze over 😝 . If this was Swift, then I'd be able to try this out right away. Haha. So now, I'm going to wait on my friend who's more Objective-C literate to help me out tomorrow (HKT). 😉 

@zammitjames @maicki: Please do let me know if you think the above sounds reasonable and whether you want me to change any naming, etc. Or you can do so after I submit a PR or something. ",leotumwattana,appleguy
2777,2016-12-15 16:27:53,"@EviluS Thanks. I'm thinking of making it a little more seamless, since this really does sound like something more than I alone will use. As @appleguy mentioned in his talks, `ASKD` is now going beyond just providing performance, but also convenience for framework users.

Looking through ASEditableTextNode.mm, I'm thinking of extending `ASTextKitComponents` with something like:



Using `layoutManager.lineFragmentRect` to loop through and find the line fragmentRect that corresponds to the maxLine. That should give me a more accurate height than using a fixed font's point height. Especially since I'm expecting mixed fonts, use of Emojis, Chinese Characters, paragraph styles, etc.

Anyway, with that in place, I can modify ASEditableTextNode's `- (CGSize)calculateSizeThatFits:(CGSize)constrainedSize` to calculate the height using the existing method if `maximumLinesToDisplay = 0` or the above if `maximumLinesToDisplay != 0`.

Anyway, the only issue I have is that I'm absolutely not familiar with Objective-C. It generally makes my eyes glaze over 😝 . If this was Swift, then I'd be able to try this out right away. Haha. So now, I'm going to wait on my friend who's more Objective-C literate to help me out tomorrow (HKT). 😉 

@zammitjames @maicki: Please do let me know if you think the above sounds reasonable and whether you want me to change any naming, etc. Or you can do so after I submit a PR or something. ",leotumwattana,maicki
2774,2016-12-14 23:54:42,@maicki @appleguy @Adlai-Holler would appreciate your eyes on this :),garrettmoon,appleguy
2774,2016-12-14 23:54:42,@maicki @appleguy @Adlai-Holler would appreciate your eyes on this :),garrettmoon,maicki
2774,2016-12-14 23:54:42,@maicki @appleguy @Adlai-Holler would appreciate your eyes on this :),garrettmoon,Adlai-Holler
2773,2016-12-14 23:10:35,@maicki mind taking a look at this? Do we have any concerns that other machinery might rely on this and crashing is better than an inconsistent state?,garrettmoon,maicki
2773,2016-12-19 04:49:02,"Regarding crash vs assertion.  I think we need to develop a better way to log assertions in production, but I disagree they should be crashes by default.  IMO we should develop a new macro for this case and offer two things to app developers:

- A #define switch to turn these special types of logs into hard crashes in production (off by default)
- An override where they can log nonfatal, e.g. with Fabric, so that the logs are still visible and problems are discovered in production.  This could be registering a block, like +[ASDisplayNode setNonfatalHandlerBlock:] or something.

I think this is fairly important as a default, because the vast majority of these cases happen with newly-developed code and have a relatively minor problem when the frame is not set.  In most cases, teams (at any company) would prefer to get /some/ experiment data rather than have to hotfix the app to stop crashes or get initial data collection.

@maicki @Adlai-Holler @nguyenhuy @garrettmoon this is a great discussion for the team to have so that we can set a standard operating practice around error handling of this sort.",appleguy,nguyenhuy
2773,2016-12-19 04:49:02,"Regarding crash vs assertion.  I think we need to develop a better way to log assertions in production, but I disagree they should be crashes by default.  IMO we should develop a new macro for this case and offer two things to app developers:

- A #define switch to turn these special types of logs into hard crashes in production (off by default)
- An override where they can log nonfatal, e.g. with Fabric, so that the logs are still visible and problems are discovered in production.  This could be registering a block, like +[ASDisplayNode setNonfatalHandlerBlock:] or something.

I think this is fairly important as a default, because the vast majority of these cases happen with newly-developed code and have a relatively minor problem when the frame is not set.  In most cases, teams (at any company) would prefer to get /some/ experiment data rather than have to hotfix the app to stop crashes or get initial data collection.

@maicki @Adlai-Holler @nguyenhuy @garrettmoon this is a great discussion for the team to have so that we can set a standard operating practice around error handling of this sort.",appleguy,Adlai-Holler
2771,2016-12-14 17:03:38,"@appleguy @nguyenhuy This will resolve the issue, but it feels kind of hacky.

Since the issue we're addressing only presents under iOS 8, should we have two separate code paths? This introduces pretty significant overhead into a highly-optimized method.

We have no guarantee that all nodes will go through this system – for example, in Pinterest some node classes have code in `-dealloc` that enqueues subnodes onto an application-level deallocation queue.

Let's remove that product code and roll with this. If other problems present in the future, we'll go from there.",Adlai-Holler,appleguy
2767,2016-12-14 16:45:04,Assigning to @nguyenhuy since he is investigating the best approach.,Adlai-Holler,nguyenhuy
2765,2016-12-13 22:13:21,@garrettmoon Thoughts?,Adlai-Holler,garrettmoon
2764,2016-12-15 23:59:24,"This PR is ready for the first round of reviews. Very interested in your feedbacks, @maicki @appleguy @Adlai-Holler @garrettmoon @levi @hannahmbanana. @hannahmbanana Really appreciate if you could help me to test this with Pinterest master. Thank you all!",nguyenhuy,hannahmbanana
2764,2016-12-15 23:59:24,"This PR is ready for the first round of reviews. Very interested in your feedbacks, @maicki @appleguy @Adlai-Holler @garrettmoon @levi @hannahmbanana. @hannahmbanana Really appreciate if you could help me to test this with Pinterest master. Thank you all!",nguyenhuy,Adlai-Holler
2764,2016-12-15 23:59:24,"This PR is ready for the first round of reviews. Very interested in your feedbacks, @maicki @appleguy @Adlai-Holler @garrettmoon @levi @hannahmbanana. @hannahmbanana Really appreciate if you could help me to test this with Pinterest master. Thank you all!",nguyenhuy,levi
2764,2016-12-15 23:59:24,"This PR is ready for the first round of reviews. Very interested in your feedbacks, @maicki @appleguy @Adlai-Holler @garrettmoon @levi @hannahmbanana. @hannahmbanana Really appreciate if you could help me to test this with Pinterest master. Thank you all!",nguyenhuy,appleguy
2764,2016-12-15 23:59:24,"This PR is ready for the first round of reviews. Very interested in your feedbacks, @maicki @appleguy @Adlai-Holler @garrettmoon @levi @hannahmbanana. @hannahmbanana Really appreciate if you could help me to test this with Pinterest master. Thank you all!",nguyenhuy,garrettmoon
2764,2016-12-15 23:59:24,"This PR is ready for the first round of reviews. Very interested in your feedbacks, @maicki @appleguy @Adlai-Holler @garrettmoon @levi @hannahmbanana. @hannahmbanana Really appreciate if you could help me to test this with Pinterest master. Thank you all!",nguyenhuy,maicki
2764,2016-12-16 16:16:31,@garrettmoon Thank you for your review. I addressed all comments except one. Can we have a follow up issue that addresses the locking situation of ASVideoNode? I'm trying to better understand the threading usage of that class.,nguyenhuy,garrettmoon
2762,2017-01-12 11:41:37,"Hi @Adlai-Holler 
I still have the problem in my app, however I was unable to reproduce the issue in a simple sample app. As mentioned above, I am trying to take a screenshot of the whole window. This window contains regular `ASDisplayNode`s, as well as an `ASCollectionNode` with many `GLKView`s.
I can confirm that taking a screenshot works with 016d99 and returns a blank (black?) image with 5b80a6 onwards.
To my knowledge, I do not make use of rasterization in my app.
Would you have any pointers on what I could check to find the issue and solve this?
Cheers,
Flo",flovouin,Adlai-Holler
2760,2017-01-17 22:46:55,@appleguy @nguyenhuy - closing this issue since Huy has a PR up. ,hannahmbanana,nguyenhuy
2756,2016-12-12 18:17:36,"In Pinterest, when in Closeup using latest ASDK master, some images are lower resolution.  It reproduces 100%.

@garrettmoon to investigate.",appleguy,garrettmoon
2754,2016-12-12 06:48:39,"Unfortunately this has created a ton of issues where the Tests files need to become .mm to import +FrameworkPrivate now.

@Adlai-Holler, @maicki how do you feel about this?  I tried renaming a lot of them, and it isn't enough -- it needs to be basically all of them.  I think we should either standardize on this or we need to have a more careful way of avoiding this.

I tried using #ifdef __cplusplus to gate the __instanceLock__ ivar definition, but that didn't seem to work, for unknown reasons.

If anyone has time to investigate this, it would be appreciated.  Unless we can jointly come up with a strategy for how to resolve this, I'm not sure what the best approach is...",appleguy,maicki
2754,2016-12-12 06:48:39,"Unfortunately this has created a ton of issues where the Tests files need to become .mm to import +FrameworkPrivate now.

@Adlai-Holler, @maicki how do you feel about this?  I tried renaming a lot of them, and it isn't enough -- it needs to be basically all of them.  I think we should either standardize on this or we need to have a more careful way of avoiding this.

I tried using #ifdef __cplusplus to gate the __instanceLock__ ivar definition, but that didn't seem to work, for unknown reasons.

If anyone has time to investigate this, it would be appreciated.  Unless we can jointly come up with a strategy for how to resolve this, I'm not sure what the best approach is...",appleguy,Adlai-Holler
2753,2016-12-11 09:10:04,"This will solve https://github.com/facebook/AsyncDisplayKit/issues/780 .

@maicki very excited to get you feedback here on Monday!",appleguy,maicki
2752,2016-12-11 08:48:41,"@nguyenhuy @garrettmoon I put this in 2.0.1 because it shouldn't take long to make an improvement in this header, and it's one of our very most important ones.  However, *please punt this issue* if there is any concern about the 2.0.1 schedule and another specific task has to take its place.

Especially with how many people are trying out layout specs for the first time with 2.0, we should prioritize any small improvements we can make to keep the API accessible.  Have a read over the current ASDimension.h from the perspective of a new external dev and weigh in here with any ideas on how we should refine it.
",appleguy,nguyenhuy
2752,2016-12-11 08:48:41,"@nguyenhuy @garrettmoon I put this in 2.0.1 because it shouldn't take long to make an improvement in this header, and it's one of our very most important ones.  However, *please punt this issue* if there is any concern about the 2.0.1 schedule and another specific task has to take its place.

Especially with how many people are trying out layout specs for the first time with 2.0, we should prioritize any small improvements we can make to keep the API accessible.  Have a read over the current ASDimension.h from the perspective of a new external dev and weigh in here with any ideas on how we should refine it.
",appleguy,garrettmoon
2750,2016-12-13 04:39:40,"@hannahmbanana can you please prioritize all of these fixes except the Swift examples, and then we can prioritize the Swift examples in a bigger sweep?

Go ahead and edit the post so it has checkboxes :)",appleguy,hannahmbanana
2749,2016-12-17 06:30:32,"@ryanfitz This an be the case if you trigger a re-display / re-layout in the delegate method and the image is already cached the delegate method will be called before you actually set the delegate. We could push this to the next runloop and expect the delegate will be set than.

@garrettmoon Thoughts?",maicki,garrettmoon
2747,2016-12-12 22:29:05,"@maicki is the expert in this area, so I'll defer to his judgement on whether this functionality should exist.",hannahmbanana,maicki
2736,2016-12-09 21:04:25,@garrettmoon @appleguy @Adlai-Holler Ready for review,maicki,garrettmoon
2736,2016-12-09 21:04:25,@garrettmoon @appleguy @Adlai-Holler Ready for review,maicki,appleguy
2736,2016-12-09 21:04:25,@garrettmoon @appleguy @Adlai-Holler Ready for review,maicki,Adlai-Holler
2732,2016-12-08 15:55:58,@maicki Done. Please have a look now.,jaichaudhry,maicki
2729,2016-12-07 23:59:39,I had a quick chat with @garrettmoon and what we actually should do is in the case of fading in as well as fading out cache the previous alpha value and restore it to that way.,maicki,garrettmoon
2729,2016-12-08 21:17:10,@garrettmoon @Adlai-Holler @appleguy  Ready for next review,maicki,garrettmoon
2729,2016-12-08 21:17:10,@garrettmoon @Adlai-Holler @appleguy  Ready for next review,maicki,appleguy
2729,2016-12-08 21:17:10,@garrettmoon @Adlai-Holler @appleguy  Ready for next review,maicki,Adlai-Holler
2722,2017-02-23 18:40:19,"@maicki - I'm going to close this because, if I'm remembering correctly, you said that the ascii art code was already nicely separated into its own file.  ",hannahmbanana,maicki
2713,2016-12-05 20:50:49,@tomizimobile - could you try updating to master? I believe @maicki made a layout change in the last few days that might have fixed this. ,hannahmbanana,maicki
2710,2016-12-05 15:59:49,"Bummer! This is exactly the code that @nguyenhuy put in and I took out because I didn't understand it and seemed like additional behavior changes.

I wish there was a cleaner fix for this though, I'm worried about not calling didExitPreloadState at all. Specifically, I'm worried about people expecting this to be called and reporting bugs.",garrettmoon,nguyenhuy
2709,2016-12-05 15:12:55,Thanks for reporting @Baevra. This is a regression that was introduced with #2642 and #2689 and is in 2.0rc-1. #2710 should address that. cc @garrettmoon ,maicki,garrettmoon
2708,2016-12-06 14:57:57,@garrettmoon @appleguy Ready for another round. As already mentioned not really beautiful and unfortunately adds some clutter to the core classes :(,maicki,garrettmoon
2708,2016-12-06 14:57:57,@garrettmoon @appleguy Ready for another round. As already mentioned not really beautiful and unfortunately adds some clutter to the core classes :(,maicki,appleguy
2708,2016-12-06 22:23:53,@garrettmoon @Adlai-Holler @appleguy  Ready for review.,maicki,garrettmoon
2708,2016-12-06 22:23:53,@garrettmoon @Adlai-Holler @appleguy  Ready for review.,maicki,appleguy
2707,2016-12-16 19:09:51,@hannahmbanana @Adlai-Holler @garrettmoon  not sure if this is useful but I opened it a little while back.  If that refactor sounds worthwhile I could do it first,lappp9,garrettmoon
2707,2016-12-16 19:09:51,@hannahmbanana @Adlai-Holler @garrettmoon  not sure if this is useful but I opened it a little while back.  If that refactor sounds worthwhile I could do it first,lappp9,hannahmbanana
2707,2016-12-16 19:09:51,@hannahmbanana @Adlai-Holler @garrettmoon  not sure if this is useful but I opened it a little while back.  If that refactor sounds worthwhile I could do it first,lappp9,Adlai-Holler
2705,2016-12-02 23:33:18,"Worked with @binl and @maicki on this – if a node has a `_pendingDisplayNodeLayout`, that layout will take precedence over the one calculated by this method, while the node waits for UIKit to run a layout pass on it.

However, in the case of a collection/table, UIKit may not run a layout pass for a long time and so it's important that we invalidate that pending layout when we remeasure the node. For example, when rotating, if a node has a pending layout designed for portrait and we rotate to landscape, we need to immediately discard the pending portrait layout.",Adlai-Holler,maicki
2694,2016-12-06 00:29:46,"@maicki to @nguyenhuy 's point -- I think it is true this may extend node lifecycle, and we should at least schedule another 2.0.1 task to address that.

One strategy would be to schedule a runloop queue item to clear the pointer to the ASLayout, if by the time the queue item runs, it still should be cleared.  This is similar to how we call didExitDisplayState (clearContents) on NON-range managed nodes -- we schedule it the moment they're removed from the parent, but we re-check once the block runs, and sometimes they've re-entered a new parent by that time so we skip the clearing.

That said, the main concern would be ultra high volumes of block dispatches and retain / release if this happened on every node.  So as long as we make sure that, in practice, it doesn't occur when a full node hierarchy is being destroyed (e.g. the parent of a large tree is released) -- and we have some way to detect this case (e.g. ""removeSupernodeDueToDyingParent"" - and not schedule the cleanup in that path)...then it should be a good solution for the more rare, manual removeFromSupernode calls.",appleguy,nguyenhuy
2688,2016-12-21 22:19:42,"@Adlai-Holler Happy to contribute, even with my limited Objective-C skills 😃 ",MarvinNazari,Adlai-Holler
2682,2016-11-30 00:25:37,"Resolves #2252 

This is one _very strange_ edge case and huge props to @tomizimobile for providing a reliable repro. I distilled the repro down into a unit test and found the problem.

In `grouped` style with section headers and footers, table views will sometimes return more index paths than necessary from `indexPathsForVisibleRows`. We knew this, but considered the risk acceptable. The risk isn't really acceptable – if we mark a node as `visible` we are relying on the fact that it is hosted in an actual cell, so that if the range controller doesn't mark the node invisible before it is removed (say, the item is deleted from the collection or the collection is deallocated) the code in `ASDisplayNode.didExitHierarchy` will retain the node and clear the visible bit before deallocating.

Added a failing unit test and modified the table view visible index paths method to account for this case. Ready for review!",Adlai-Holler,tomizimobile
2680,2016-11-30 17:48:42,I know that the 2.0 launch is resource-intensive so @garrettmoon how should we move forward with this?,Adlai-Holler,garrettmoon
2677,2016-11-30 04:13:06,Punting this to 2.0.1 unless @maicki believes it is more urgent. ,hannahmbanana,maicki
2675,2016-11-29 01:04:25,"- Add a (previously-failing) unit test that when the content starts off not filling the screen, and then a batch fetch is issued that results in the new content filling the screen, we do not start another batch fetch.
- Remove `didCompleteUpdatesInRangeController:`
  - This required callback is to inform ASCollectionView/ASTableView that the range controller has updated the ranges of visible nodes.
  - Its name is easily confused with `rangeController:didEndUpdatesAnimated:completion:`
  - It was previously used to schedule a batch fetch check when the ranges were updated.
  - Batch fetching here has two issues:
    - It doesn't really make sense. The range controller updating the interface state of nodes has no impact on whether it is appropriate to batch fetch or not.
    - It may cause batch fetches to be issued at bad times. When we issue an update to UICollectionView, if the update caused the visible cells to change, then we synchronously update the range controller (in order to make our API guarantees about visibility). However, UICollectionView does not immediately update its `contentSize` and so we may _think_ we're still near the end, when in reality a new batch of content has just arrived and we do not need to fetch again.
- Pass `self.scrollDirection` for the `scrollDirection` param, rather than passing `self.scrollableDirections` (!!) 
- Add a new `scrollableDirections` arg to the batch checking algorithm, so that even if the user is not scrolling (content-not-filling-bounds case) we can still use the correct axes when computing e.g. ""total length.""
- Update the batch fetching algorithm to use `CGRectIsEmpty` rather than comparing the rect to zero. It is common for UICollectionView to have e.g. `(0, -64, 0, 0)` early in its lifecycle due to contentInset.
- Update batch checking algorithm to correctly issue a batch update in the small-content case even if not scrolling.
  - This was previously working due to us passing `self.scrollableDirections` rather than `self.scrollDirection`. Two wrongs made a right in this isolated case 😛 .
- Update the prior unit tests to be compatible with the new code.

I am about to start testing this with Pinterest, but I'm very confident in the code and I think it's important to land this ASAP. @garrettmoon",Adlai-Holler,garrettmoon
2671,2016-11-28 20:07:34,"@appleguy - any idea why #2591 passed the PR build, but failed once merged? Do we have 2 different build configurations?

http://jenkinsmaster-vpc-007.ec2.pin220.com/job/AsyncDisplayKit/350/console",hannahmbanana,appleguy
2670,2016-11-28 19:21:47,"When looking at a screen that has ASDK nodes in its hierarchy, attempting to inspect the layout using Xcode's built-in visual debugger feature fails. A bunch of asserts are outputted in the console and the contents of views are not rendered.

<img width=""774"" alt=""screen shot 2016-11-28 at 11 12 13 am"" src=""https://cloud.githubusercontent.com/assets/4761768/20682133/91132e0c-b55b-11e6-8eaf-cc8cf08beae4.png"">

### Console output:



Removing [the](https://github.com/facebook/AsyncDisplayKit/blob/02283bd0d634ec0151924864b782448d12e52e81/AsyncDisplayKit/Details/ASWeakProxy.m#L55) [asserts](https://github.com/facebook/AsyncDisplayKit/blob/02283bd0d634ec0151924864b782448d12e52e81/AsyncDisplayKit/Details/ASWeakProxy.m#L67) in [`ASWeakProxy.m`](https://github.com/facebook/AsyncDisplayKit/blob/02283bd0d634ec0151924864b782448d12e52e81/AsyncDisplayKit/Details/ASWeakProxy.m) appears to fix the issue. Looks like those were added in https://github.com/facebook/AsyncDisplayKit/pull/2249 by @Adlai-Holler, probably with good reason.

Any advice?",rewandy,Adlai-Holler
2658,2016-11-26 06:59:23,"@garrettmoon this seems very important to fix, because we rely on these calls for accurate logging.  This would probably be P1 if we had more time.

We may need to punt 2.0.1, but do you think we should spend an hour or two investigating a minimal fix before making this call?",appleguy,garrettmoon
2653,2016-11-23 21:54:59,"@Adlai-Holler Yes as we use the bounds of the view now to layout we don't have to use the legacy stuff anymore.

I already run through it a bit within Pinterest but would be great if @hannahmbanana give it another test pass.",maicki,hannahmbanana
2653,2016-11-23 21:54:59,"@Adlai-Holler Yes as we use the bounds of the view now to layout we don't have to use the legacy stuff anymore.

I already run through it a bit within Pinterest but would be great if @hannahmbanana give it another test pass.",maicki,Adlai-Holler
2648,2016-11-22 22:18:58,@garrettmoon @appleguy @Adlai-Holler Ready for review,maicki,garrettmoon
2648,2016-11-22 22:18:58,@garrettmoon @appleguy @Adlai-Holler Ready for review,maicki,appleguy
2648,2016-11-22 22:18:58,@garrettmoon @appleguy @Adlai-Holler Ready for review,maicki,Adlai-Holler
2648,2016-11-22 22:19:35,@Adlai-Holler Do we have consider the same situation as above in `- [ASTableView requeryNodeHeights]`,maicki,Adlai-Holler
2647,2016-11-23 17:30:55,"@Adlai-Holler: Yes, you're right. I misunderstood how shared_ptr works. Closing...",nguyenhuy,Adlai-Holler
2646,2016-11-21 22:57:04,@austinlouden you cool with this one instead https://github.com/facebook/AsyncDisplayKit/pull/2645 ? @nguyenhuy also was fixing at the same time :) ,garrettmoon,nguyenhuy
2643,2016-11-21 18:34:06,@garrettmoon @appleguy @Adlai-Holler Rady for review,maicki,garrettmoon
2643,2016-11-21 18:34:06,@garrettmoon @appleguy @Adlai-Holler Rady for review,maicki,appleguy
2643,2016-11-21 18:34:06,@garrettmoon @appleguy @Adlai-Holler Rady for review,maicki,Adlai-Holler
2643,2016-11-23 06:34:57,"@maicki Thanks!  Since this one is pretty detailed, could you review it in-person with @Adlai-Holler tomorrow (or by VC?)  He studied the code closely last week and knows it more accurately than I do, so if you are both aligned on the strategy, let's move forward and get as much testing as possible (testing beats an extended period of review for this kind of change IMO).",appleguy,Adlai-Holler
2643,2016-11-23 22:00:58,@Adlai-Holler I briefly talked with @garrettmoon as the `ASTextNode` calculates it's size now on the bounds this is the new calculation of the `ASTextNode` and the snapshot needs to be updated,maicki,garrettmoon
2643,2016-12-06 20:53:37,"@Adlai-Holler Addressed comments

@Adlai-Holler @appleguy Ready for another review and testing cc @garrettmoon ",maicki,garrettmoon
2641,2016-11-21 05:50:41,"Assigned to both @maicki and @nguyenhuy in case one of you has time before the other -- would be worth doing a quick investigation without going too deep, and comment here if it seems easily fixable or a bigger project.",appleguy,nguyenhuy
2641,2016-11-21 05:50:41,"Assigned to both @maicki and @nguyenhuy in case one of you has time before the other -- would be worth doing a quick investigation without going too deep, and comment here if it seems easily fixable or a bigger project.",appleguy,maicki
2641,2016-11-28 16:59:05,"@nguyenhuy says: ""shouldn't occur anymore because of the new layout coalescing mechanism (discussed with @maicki)"" I'm going to close this.",garrettmoon,maicki
2636,2016-11-20 00:55:18,"Due to the fact we use an `ASDisplayNode`’s view as view of the `ASViewController` we ran into a couple of problems in the past as well as we have a couple of open issues (see issues below). Especially around sizing and layout, we work against UIKit instead of working with UIKit.

### Changes
- We should change from having the view of the display node as ASViewController.view to add the node as subview to the ASViewController.view
- Stretch the node always the full size of the ASViewController.view in the layout pass
- Remove `nodeConstrainedSize`

### Open Questions
- `ASViewController` containment: Big question mark and that's the reason why we have this PR still in development stage is the handling of view controller containment. A good example is within here: https://gist.github.com/maicki/45a33341af35d6a04dbb8df7db13f42e . The problem within here is that the node hierarchy will not reflect the view hierarchy anymore. @Adlai-Holler, @appleguy any thoughts on it?

### Related issues
- ASViewController/ASPagerNode layout bug since version 1.9.81 https://github.com/facebook/AsyncDisplayKit/issues/1949 (fixed)
- ASViewController does not resize when contained in a Container View https://github.com/facebook/AsyncDisplayKit/issues/2085 (fixed)
- [ASViewController] Accessing vc.node.view doesn't go through ViewController's -loadView. (fixed) https://github.com/facebook/AsyncDisplayKit/issues/2350
- Accepts edgesForExtendedLayout without any hacks (fixed without special code) https://github.com/facebook/AsyncDisplayKit/pull/2123
- [ASViewController] Regression causing layout issues when presenting a portrait-only view controller while in landscape (fixed without special code) https://github.com/facebook/AsyncDisplayKit/issues/2213
- [ASViewController] iOS 8 + UIWindow rotation problem (fixed without special code) https://github.com/facebook/AsyncDisplayKit/issues/1905
- [ASViewController] Modal presented ASViewController don't rotate on iOS 8.3 (fixed without special code) https://github.com/facebook/AsyncDisplayKit/issues/1810",maicki,appleguy
2636,2016-11-20 00:55:18,"Due to the fact we use an `ASDisplayNode`’s view as view of the `ASViewController` we ran into a couple of problems in the past as well as we have a couple of open issues (see issues below). Especially around sizing and layout, we work against UIKit instead of working with UIKit.

### Changes
- We should change from having the view of the display node as ASViewController.view to add the node as subview to the ASViewController.view
- Stretch the node always the full size of the ASViewController.view in the layout pass
- Remove `nodeConstrainedSize`

### Open Questions
- `ASViewController` containment: Big question mark and that's the reason why we have this PR still in development stage is the handling of view controller containment. A good example is within here: https://gist.github.com/maicki/45a33341af35d6a04dbb8df7db13f42e . The problem within here is that the node hierarchy will not reflect the view hierarchy anymore. @Adlai-Holler, @appleguy any thoughts on it?

### Related issues
- ASViewController/ASPagerNode layout bug since version 1.9.81 https://github.com/facebook/AsyncDisplayKit/issues/1949 (fixed)
- ASViewController does not resize when contained in a Container View https://github.com/facebook/AsyncDisplayKit/issues/2085 (fixed)
- [ASViewController] Accessing vc.node.view doesn't go through ViewController's -loadView. (fixed) https://github.com/facebook/AsyncDisplayKit/issues/2350
- Accepts edgesForExtendedLayout without any hacks (fixed without special code) https://github.com/facebook/AsyncDisplayKit/pull/2123
- [ASViewController] Regression causing layout issues when presenting a portrait-only view controller while in landscape (fixed without special code) https://github.com/facebook/AsyncDisplayKit/issues/2213
- [ASViewController] iOS 8 + UIWindow rotation problem (fixed without special code) https://github.com/facebook/AsyncDisplayKit/issues/1905
- [ASViewController] Modal presented ASViewController don't rotate on iOS 8.3 (fixed without special code) https://github.com/facebook/AsyncDisplayKit/issues/1810",maicki,Adlai-Holler
2634,2016-11-20 00:00:48,"I believe it's valid to setup a collectionView without a layout inspector, correct me if I'm wrong @Adlai-Holler ?
",garrettmoon,Adlai-Holler
2633,2016-11-28 17:59:48,Moving to 2.0.1 after discussion with the team. This is very important but we have to prioritize for the milestone @garrettmoon ,Adlai-Holler,garrettmoon
2628,2016-11-18 06:07:52,"Users are often surprised that when they set properties like `flexShrink` on a node, and then put that node inside an inset spec, the value they set is not used.

It might be valuable to propagate these values outward in some cases. Some initial thoughts:

1. We will need a way to know whether a value was set explicitly or is a default. 
1. Should we propagate style for all specs that have only one child – inset, ratio, center, relative?
1. Should we propagate style from the ""main"" child in overlay and background specs?
1. Would it make sense to remove the style properties from the affected specs, so that setting the style of the affected node is _the_ way to configure the style? If we do this, then point 1 disappears.

See also:
https://github.com/facebook/AsyncDisplayKit/pull/2601
https://github.com/facebook/AsyncDisplayKit/issues/874

Let's gather thoughts @nguyenhuy @maicki @hannahmbanana @appleguy @lappp9 @garrettmoon",Adlai-Holler,hannahmbanana
2628,2016-11-18 06:07:52,"Users are often surprised that when they set properties like `flexShrink` on a node, and then put that node inside an inset spec, the value they set is not used.

It might be valuable to propagate these values outward in some cases. Some initial thoughts:

1. We will need a way to know whether a value was set explicitly or is a default. 
1. Should we propagate style for all specs that have only one child – inset, ratio, center, relative?
1. Should we propagate style from the ""main"" child in overlay and background specs?
1. Would it make sense to remove the style properties from the affected specs, so that setting the style of the affected node is _the_ way to configure the style? If we do this, then point 1 disappears.

See also:
https://github.com/facebook/AsyncDisplayKit/pull/2601
https://github.com/facebook/AsyncDisplayKit/issues/874

Let's gather thoughts @nguyenhuy @maicki @hannahmbanana @appleguy @lappp9 @garrettmoon",Adlai-Holler,nguyenhuy
2628,2016-11-18 06:07:52,"Users are often surprised that when they set properties like `flexShrink` on a node, and then put that node inside an inset spec, the value they set is not used.

It might be valuable to propagate these values outward in some cases. Some initial thoughts:

1. We will need a way to know whether a value was set explicitly or is a default. 
1. Should we propagate style for all specs that have only one child – inset, ratio, center, relative?
1. Should we propagate style from the ""main"" child in overlay and background specs?
1. Would it make sense to remove the style properties from the affected specs, so that setting the style of the affected node is _the_ way to configure the style? If we do this, then point 1 disappears.

See also:
https://github.com/facebook/AsyncDisplayKit/pull/2601
https://github.com/facebook/AsyncDisplayKit/issues/874

Let's gather thoughts @nguyenhuy @maicki @hannahmbanana @appleguy @lappp9 @garrettmoon",Adlai-Holler,appleguy
2628,2016-11-18 06:07:52,"Users are often surprised that when they set properties like `flexShrink` on a node, and then put that node inside an inset spec, the value they set is not used.

It might be valuable to propagate these values outward in some cases. Some initial thoughts:

1. We will need a way to know whether a value was set explicitly or is a default. 
1. Should we propagate style for all specs that have only one child – inset, ratio, center, relative?
1. Should we propagate style from the ""main"" child in overlay and background specs?
1. Would it make sense to remove the style properties from the affected specs, so that setting the style of the affected node is _the_ way to configure the style? If we do this, then point 1 disappears.

See also:
https://github.com/facebook/AsyncDisplayKit/pull/2601
https://github.com/facebook/AsyncDisplayKit/issues/874

Let's gather thoughts @nguyenhuy @maicki @hannahmbanana @appleguy @lappp9 @garrettmoon",Adlai-Holler,lappp9
2628,2016-11-18 06:07:52,"Users are often surprised that when they set properties like `flexShrink` on a node, and then put that node inside an inset spec, the value they set is not used.

It might be valuable to propagate these values outward in some cases. Some initial thoughts:

1. We will need a way to know whether a value was set explicitly or is a default. 
1. Should we propagate style for all specs that have only one child – inset, ratio, center, relative?
1. Should we propagate style from the ""main"" child in overlay and background specs?
1. Would it make sense to remove the style properties from the affected specs, so that setting the style of the affected node is _the_ way to configure the style? If we do this, then point 1 disappears.

See also:
https://github.com/facebook/AsyncDisplayKit/pull/2601
https://github.com/facebook/AsyncDisplayKit/issues/874

Let's gather thoughts @nguyenhuy @maicki @hannahmbanana @appleguy @lappp9 @garrettmoon",Adlai-Holler,garrettmoon
2628,2016-11-18 06:07:52,"Users are often surprised that when they set properties like `flexShrink` on a node, and then put that node inside an inset spec, the value they set is not used.

It might be valuable to propagate these values outward in some cases. Some initial thoughts:

1. We will need a way to know whether a value was set explicitly or is a default. 
1. Should we propagate style for all specs that have only one child – inset, ratio, center, relative?
1. Should we propagate style from the ""main"" child in overlay and background specs?
1. Would it make sense to remove the style properties from the affected specs, so that setting the style of the affected node is _the_ way to configure the style? If we do this, then point 1 disappears.

See also:
https://github.com/facebook/AsyncDisplayKit/pull/2601
https://github.com/facebook/AsyncDisplayKit/issues/874

Let's gather thoughts @nguyenhuy @maicki @hannahmbanana @appleguy @lappp9 @garrettmoon",Adlai-Holler,maicki
2627,2016-11-17 23:50:51,"We should not floor while calculating the space between items for `justifyContent`: `ASStackLayoutJustifyContentSpaceBetween` or `ASStackLayoutJustifyContentSpaceAround` and take the sub pixel rendering if necessary. Otherwise the space between will grow with the number of items. Good to see in the sample project from the issue below. It just mentions `ASStackLayoutJustifyContentSpaceBetween` but it actually also happens in `ASStackLayoutJustifyContentSpaceAround` so let's fix both.

Resolves #1339

@nguyenhuy @appleguy @Adlai-Holler @garrettmoon Ready for review",maicki,nguyenhuy
2627,2016-11-17 23:50:51,"We should not floor while calculating the space between items for `justifyContent`: `ASStackLayoutJustifyContentSpaceBetween` or `ASStackLayoutJustifyContentSpaceAround` and take the sub pixel rendering if necessary. Otherwise the space between will grow with the number of items. Good to see in the sample project from the issue below. It just mentions `ASStackLayoutJustifyContentSpaceBetween` but it actually also happens in `ASStackLayoutJustifyContentSpaceAround` so let's fix both.

Resolves #1339

@nguyenhuy @appleguy @Adlai-Holler @garrettmoon Ready for review",maicki,garrettmoon
2627,2016-11-17 23:50:51,"We should not floor while calculating the space between items for `justifyContent`: `ASStackLayoutJustifyContentSpaceBetween` or `ASStackLayoutJustifyContentSpaceAround` and take the sub pixel rendering if necessary. Otherwise the space between will grow with the number of items. Good to see in the sample project from the issue below. It just mentions `ASStackLayoutJustifyContentSpaceBetween` but it actually also happens in `ASStackLayoutJustifyContentSpaceAround` so let's fix both.

Resolves #1339

@nguyenhuy @appleguy @Adlai-Holler @garrettmoon Ready for review",maicki,appleguy
2627,2016-11-17 23:50:51,"We should not floor while calculating the space between items for `justifyContent`: `ASStackLayoutJustifyContentSpaceBetween` or `ASStackLayoutJustifyContentSpaceAround` and take the sub pixel rendering if necessary. Otherwise the space between will grow with the number of items. Good to see in the sample project from the issue below. It just mentions `ASStackLayoutJustifyContentSpaceBetween` but it actually also happens in `ASStackLayoutJustifyContentSpaceAround` so let's fix both.

Resolves #1339

@nguyenhuy @appleguy @Adlai-Holler @garrettmoon Ready for review",maicki,Adlai-Holler
2625,2016-11-18 11:40:09,"@Adlai-Holler thanks for the review. Updated. 😄 
",MarvinNazari,Adlai-Holler
2623,2016-11-17 05:24:03,"@maicki @Adlai-Holler @nguyenhuy This is important to get into Pinterest.  Currently the third tab will crash on master (if the server response contains certain types) as well as other areas.

This is because a previously supported operation, returning [[ASCellNode alloc] init], is now a hard assertion / crash in debug, and it hinders development to hit these landmines when navigating the app.

In fact, even our base Section Controller uses this blank cell for its empty state implementation, if the delegate doesn't provide anything specific for the empty state.  There are actually 31 cases of [[ASCellNode alloc] init] in the codebase currently.  But in addition to those, this is important mostly for developers iterating on **new layouts** locally as they are still trying to get them to work.

Once reviewed, please merge this for me - I want it to land before Beta 2 goes out.
",appleguy,nguyenhuy
2623,2016-11-17 05:24:03,"@maicki @Adlai-Holler @nguyenhuy This is important to get into Pinterest.  Currently the third tab will crash on master (if the server response contains certain types) as well as other areas.

This is because a previously supported operation, returning [[ASCellNode alloc] init], is now a hard assertion / crash in debug, and it hinders development to hit these landmines when navigating the app.

In fact, even our base Section Controller uses this blank cell for its empty state implementation, if the delegate doesn't provide anything specific for the empty state.  There are actually 31 cases of [[ASCellNode alloc] init] in the codebase currently.  But in addition to those, this is important mostly for developers iterating on **new layouts** locally as they are still trying to get them to work.

Once reviewed, please merge this for me - I want it to land before Beta 2 goes out.
",appleguy,maicki
2623,2016-11-17 05:24:03,"@maicki @Adlai-Holler @nguyenhuy This is important to get into Pinterest.  Currently the third tab will crash on master (if the server response contains certain types) as well as other areas.

This is because a previously supported operation, returning [[ASCellNode alloc] init], is now a hard assertion / crash in debug, and it hinders development to hit these landmines when navigating the app.

In fact, even our base Section Controller uses this blank cell for its empty state implementation, if the delegate doesn't provide anything specific for the empty state.  There are actually 31 cases of [[ASCellNode alloc] init] in the codebase currently.  But in addition to those, this is important mostly for developers iterating on **new layouts** locally as they are still trying to get them to work.

Once reviewed, please merge this for me - I want it to land before Beta 2 goes out.
",appleguy,Adlai-Holler
2620,2016-11-17 02:00:54,@appleguy has said that #2610 will likely cause a performance regression because placeholderImage is now being created on the main thread. We'll need to figure out how to avoid that while still checking the contents on the main thread *or* creating a thread-safe contents.,garrettmoon,appleguy
2617,2016-11-18 22:10:00,"@Adlai-Holler Can you test to verify you can repro the crash, and then test against your Dealloc2Main removal diff to verify it fixes it?
",appleguy,Adlai-Holler
2612,2016-11-16 14:34:53,"@hannahmbanana: Please assign this ticket to me. Thank you!
",nguyenhuy,hannahmbanana
2611,2016-11-15 03:05:46,"@nguyenhuy, could you rename anything that isn't being used to support the deprecated method?  We can probably leave the ASViewController internal call as it is for now as we don't have a recursive Preload method.

![screen shot 2016-11-14 at 7 03 34 pm](https://cloud.githubusercontent.com/assets/565251/20291755/4d5cbff2-aa9d-11e6-933f-cdcc55c2827c.png)
![screen shot 2016-11-14 at 7 03 14 pm](https://cloud.githubusercontent.com/assets/565251/20291756/4d7a4810-aa9d-11e6-9b16-7268b57e2b73.png)
",appleguy,nguyenhuy
2610,2016-11-16 02:09:22,"@maicki Exactly. Moiging.
",Adlai-Holler,maicki
2605,2016-11-14 07:10:56,"This looks likely to be caused by the new locking around the ASLayoutElementStyle property.  It's important to note that the previous layout properties did not have locks, as entanglement issues similar to this were observed.

We need to investigate this for 2.0 to assess how common it is and whether it can be worked around.  Moving to more atomic scalar values for the layout configuration would help, and we may be able to find an alternate synchronization option for style — e.g. perhaps disallow writing the property itself externally for 2.0, since this use case is currently rare.

https://fabric.io/pinterest6/ios/apps/pinterest/issues/57dbb2df0aeb16625b51df2c/sessions/ecd258e4b7d74712884ee3d6fa794631_9c4482a0a27d4b29972e29526f069c01_0_v1?

@maicki would know this area well - however, he is sprinting on some awesome changes in the layout engine currently.  @nguyenhuy, do you have cycles to investigate this in the next week?  A first look, even without a fix, could be a valuable next step.",appleguy,nguyenhuy
2605,2016-11-14 07:10:56,"This looks likely to be caused by the new locking around the ASLayoutElementStyle property.  It's important to note that the previous layout properties did not have locks, as entanglement issues similar to this were observed.

We need to investigate this for 2.0 to assess how common it is and whether it can be worked around.  Moving to more atomic scalar values for the layout configuration would help, and we may be able to find an alternate synchronization option for style — e.g. perhaps disallow writing the property itself externally for 2.0, since this use case is currently rare.

https://fabric.io/pinterest6/ios/apps/pinterest/issues/57dbb2df0aeb16625b51df2c/sessions/ecd258e4b7d74712884ee3d6fa794631_9c4482a0a27d4b29972e29526f069c01_0_v1?

@maicki would know this area well - however, he is sprinting on some awesome changes in the layout engine currently.  @nguyenhuy, do you have cycles to investigate this in the next week?  A first look, even without a fix, could be a valuable next step.",appleguy,maicki
2603,2016-11-14 04:24:50,"Subnode ordering is sometimes incorrect when using the overlay / background spec with automatic subnode management. 

@maicki - should this be in the `2.0` or the `2.0.1` milestone?",hannahmbanana,maicki
2602,2016-11-15 00:50:34,"@Adlai-Holler when you get a chance, can you update the description on this?
",hannahmbanana,Adlai-Holler
2601,2016-11-14 02:26:46,"Michael has just made the excellent point, that this will not have the desired effect in cases where the user has an inset layout spec or something wrapped around the text node. In the future we may be able to propagate this value outward automatically.

Would love comments from the community @george-gw @gazreese @austinlouden @tomizimobile @lappp9 @appleguy everyone join up!
",Adlai-Holler,appleguy
2601,2016-11-14 02:26:46,"Michael has just made the excellent point, that this will not have the desired effect in cases where the user has an inset layout spec or something wrapped around the text node. In the future we may be able to propagate this value outward automatically.

Would love comments from the community @george-gw @gazreese @austinlouden @tomizimobile @lappp9 @appleguy everyone join up!
",Adlai-Holler,gazreese
2601,2016-11-14 02:26:46,"Michael has just made the excellent point, that this will not have the desired effect in cases where the user has an inset layout spec or something wrapped around the text node. In the future we may be able to propagate this value outward automatically.

Would love comments from the community @george-gw @gazreese @austinlouden @tomizimobile @lappp9 @appleguy everyone join up!
",Adlai-Holler,lappp9
2601,2016-11-14 02:26:46,"Michael has just made the excellent point, that this will not have the desired effect in cases where the user has an inset layout spec or something wrapped around the text node. In the future we may be able to propagate this value outward automatically.

Would love comments from the community @george-gw @gazreese @austinlouden @tomizimobile @lappp9 @appleguy everyone join up!
",Adlai-Holler,austinlouden
2601,2016-11-14 02:26:46,"Michael has just made the excellent point, that this will not have the desired effect in cases where the user has an inset layout spec or something wrapped around the text node. In the future we may be able to propagate this value outward automatically.

Would love comments from the community @george-gw @gazreese @austinlouden @tomizimobile @lappp9 @appleguy everyone join up!
",Adlai-Holler,george-gw
2601,2016-11-14 02:26:46,"Michael has just made the excellent point, that this will not have the desired effect in cases where the user has an inset layout spec or something wrapped around the text node. In the future we may be able to propagate this value outward automatically.

Would love comments from the community @george-gw @gazreese @austinlouden @tomizimobile @lappp9 @appleguy everyone join up!
",Adlai-Holler,tomizimobile
2601,2016-11-16 01:50:17,"This seems to have a decent base of support. 

@garrettmoon This may affect existing layouts in Pinterest. Do you think we should take any extra steps to vet & notify?

@hannahmbanana If this lands, would you be willing to add this to the FAQ and the ASTextNode pages?
",Adlai-Holler,garrettmoon
2601,2016-11-16 02:40:59,"A quick test didn't find anything, but @garrettmoon might have more insight into what this could potentially break. 
",hannahmbanana,garrettmoon
2594,2016-11-11 05:04:52,"@maicki you were right, I was on 1.0.0. Just updated
",austinlouden,maicki
2593,2016-11-17 21:10:46,"I will assign this issue to @Adlai-Holler as I think he's working on `ASTextNode` things
",maicki,Adlai-Holler
2591,2016-11-27 09:08:12,Thanks @george-gw. Checked in all the changes suggested. ,rajeevwhiz,george-gw
2591,2016-11-27 21:02:03,Thank you @rajeevwhiz for contributing and @george-gw for the swift style comments!,hannahmbanana,george-gw
2588,2016-11-09 19:07:47,"Hi @appleguy @maicki @Adlai-Holler,

Attached is the  Sample project that replicate following issues:

-- **Issue 1**: ImageCellNode uses ASMultiplexImageNode. urlForImageIdentifier is being called but Images are not showing up in the ASCollectionNode
-- **Issue 2**: ASMultiplexImageNode also does not show placeholder image. placeholderImage() method is in place but the image is being ignored. However, ASDisplayNodeDefaultPlaceholderColor() is working
-- **Issue 3**: Images are being loaded from Photo Library using PHPhotoLibraryChangeObserver and also showing up in the Collection. However, urlForImageIdentifier is being called for every image identifier, thereby loading image of all sizes and increasing memory use exponentially!

I would really appreciate any tips or workarounds. 
Thanks,
Rajeev

[CustomCollectionView.zip](https://github.com/facebook/AsyncDisplayKit/files/581576/CustomCollectionView.zip)",rajeevwhiz,appleguy
2588,2016-11-09 19:07:47,"Hi @appleguy @maicki @Adlai-Holler,

Attached is the  Sample project that replicate following issues:

-- **Issue 1**: ImageCellNode uses ASMultiplexImageNode. urlForImageIdentifier is being called but Images are not showing up in the ASCollectionNode
-- **Issue 2**: ASMultiplexImageNode also does not show placeholder image. placeholderImage() method is in place but the image is being ignored. However, ASDisplayNodeDefaultPlaceholderColor() is working
-- **Issue 3**: Images are being loaded from Photo Library using PHPhotoLibraryChangeObserver and also showing up in the Collection. However, urlForImageIdentifier is being called for every image identifier, thereby loading image of all sizes and increasing memory use exponentially!

I would really appreciate any tips or workarounds. 
Thanks,
Rajeev

[CustomCollectionView.zip](https://github.com/facebook/AsyncDisplayKit/files/581576/CustomCollectionView.zip)",rajeevwhiz,maicki
2588,2016-11-09 19:07:47,"Hi @appleguy @maicki @Adlai-Holler,

Attached is the  Sample project that replicate following issues:

-- **Issue 1**: ImageCellNode uses ASMultiplexImageNode. urlForImageIdentifier is being called but Images are not showing up in the ASCollectionNode
-- **Issue 2**: ASMultiplexImageNode also does not show placeholder image. placeholderImage() method is in place but the image is being ignored. However, ASDisplayNodeDefaultPlaceholderColor() is working
-- **Issue 3**: Images are being loaded from Photo Library using PHPhotoLibraryChangeObserver and also showing up in the Collection. However, urlForImageIdentifier is being called for every image identifier, thereby loading image of all sizes and increasing memory use exponentially!

I would really appreciate any tips or workarounds. 
Thanks,
Rajeev

[CustomCollectionView.zip](https://github.com/facebook/AsyncDisplayKit/files/581576/CustomCollectionView.zip)",rajeevwhiz,Adlai-Holler
2588,2016-11-09 21:32:22,"@appleguy Fixed Issue#1 by removing ASImageDownloaderProtocol for now. Issue#2 is not critical. 

However, Issue#3 is puzzling.. it's happening irrespective of whether I download image from URL or from local cache or from Photo Library. 

How does the framework know which image identifier to use when? That's the missing link, I think.. I don't see I am establishing this linkage anywhere...  
",rajeevwhiz,appleguy
2588,2016-11-11 15:41:40,"@appleguy , @maicki , @Adlai-Holler -- attached is the sample project that reproduces Issue3
[CustomCollectionView.zip](https://github.com/facebook/AsyncDisplayKit/files/586121/CustomCollectionView.zip)
",rajeevwhiz,appleguy
2588,2016-11-11 15:41:40,"@appleguy , @maicki , @Adlai-Holler -- attached is the sample project that reproduces Issue3
[CustomCollectionView.zip](https://github.com/facebook/AsyncDisplayKit/files/586121/CustomCollectionView.zip)
",rajeevwhiz,maicki
2588,2016-11-11 15:41:40,"@appleguy , @maicki , @Adlai-Holler -- attached is the sample project that reproduces Issue3
[CustomCollectionView.zip](https://github.com/facebook/AsyncDisplayKit/files/586121/CustomCollectionView.zip)
",rajeevwhiz,Adlai-Holler
2587,2016-11-09 16:41:39,"Hi @appleguy, @nguyenhuy 

I face a big issue, it's make my app crash for memory issue!

**There is my demo app**: [https://github.com/caophong94/alivecellnode](url)

**Description**: 
- When i dismiss a view controller with default transition, the nodes on this view controller are gone, but if i use custom transition, the node still keep alive, because _ASDisplayView not receive the event willMoveToSuperview:(UIView *)newSuperview
- Work well with default iOS transition

Anybody can help? 
Thanks & Best regards",dungnc,nguyenhuy
2587,2016-11-09 16:41:39,"Hi @appleguy, @nguyenhuy 

I face a big issue, it's make my app crash for memory issue!

**There is my demo app**: [https://github.com/caophong94/alivecellnode](url)

**Description**: 
- When i dismiss a view controller with default transition, the nodes on this view controller are gone, but if i use custom transition, the node still keep alive, because _ASDisplayView not receive the event willMoveToSuperview:(UIView *)newSuperview
- Work well with default iOS transition

Anybody can help? 
Thanks & Best regards",dungnc,appleguy
2578,2016-11-08 20:02:22,"For now I have bundled some images in the app and urlForImageIdentifier is returning following URL.. here is the debug output... 
URL=Optional(/var/containers/Bundle/Application/90D102CE-1F59-413C-AA08-715EF177109B/CustomExample.app/tn_pic1.jpg)

Does ASMultiplexImageNodeDelegate support local URLs? or is it expecting only HTTP / HTTPS? @appleguy @maicki 
",rajeevwhiz,appleguy
2578,2016-11-08 20:02:22,"For now I have bundled some images in the app and urlForImageIdentifier is returning following URL.. here is the debug output... 
URL=Optional(/var/containers/Bundle/Application/90D102CE-1F59-413C-AA08-715EF177109B/CustomExample.app/tn_pic1.jpg)

Does ASMultiplexImageNodeDelegate support local URLs? or is it expecting only HTTP / HTTPS? @appleguy @maicki 
",rajeevwhiz,maicki
2578,2016-11-08 22:49:53,"@appleguy @maicki @Adlai-Holler  
I looked at the Multiplex example in examples_extra (from master) and it doesn't seem to be working. 

It's failing with 

> 2016-11-08 14:40:57.753959 Sample[3896:1487694] **\* Assertion failure in -[ASMultiplexImageNode initWithCache:downloader:], /Volumes/Home/rajeev/Apple/Facebook/AsyncDisplayKit/AsyncDisplayKit/ASMultiplexImageNode.mm:179
> 2016-11-08 14:40:57.758825 Sample[3896:1487694] **\* Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'downloader must respond to either downloadImageWithURL:callbackQueue:downloadProgress:completion:.' 
",rajeevwhiz,appleguy
2578,2016-11-08 22:49:53,"@appleguy @maicki @Adlai-Holler  
I looked at the Multiplex example in examples_extra (from master) and it doesn't seem to be working. 

It's failing with 

> 2016-11-08 14:40:57.753959 Sample[3896:1487694] **\* Assertion failure in -[ASMultiplexImageNode initWithCache:downloader:], /Volumes/Home/rajeev/Apple/Facebook/AsyncDisplayKit/AsyncDisplayKit/ASMultiplexImageNode.mm:179
> 2016-11-08 14:40:57.758825 Sample[3896:1487694] **\* Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'downloader must respond to either downloadImageWithURL:callbackQueue:downloadProgress:completion:.' 
",rajeevwhiz,maicki
2578,2016-11-08 22:49:53,"@appleguy @maicki @Adlai-Holler  
I looked at the Multiplex example in examples_extra (from master) and it doesn't seem to be working. 

It's failing with 

> 2016-11-08 14:40:57.753959 Sample[3896:1487694] **\* Assertion failure in -[ASMultiplexImageNode initWithCache:downloader:], /Volumes/Home/rajeev/Apple/Facebook/AsyncDisplayKit/AsyncDisplayKit/ASMultiplexImageNode.mm:179
> 2016-11-08 14:40:57.758825 Sample[3896:1487694] **\* Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'downloader must respond to either downloadImageWithURL:callbackQueue:downloadProgress:completion:.' 
",rajeevwhiz,Adlai-Holler
2578,2016-11-08 22:54:09,"To isolate the issue, I updated **urlForImageIdentifier** and hardcoded URLs from the Multiplex example. 



I can see this method is being called and correct URL is being returned. I also implemented **ASImageDownloaderProtocol** so I can see **downloadProgress** is being called but **didFinishDownloadingImageWithIdentifier** is never called. @appleguy Is that the reason why all my ImageCells are empty inside the ASCollectionNode?
",rajeevwhiz,appleguy
2578,2016-11-08 23:45:49,"@appleguy some good news.. [NSURL URLWithAssetLocalIdentifier:targetSize:contentMode:options:] was the missing link to get the photos from photo lib working. I am able to load the image and imageNode is displaying it properly too !! It works perfect :)

However, loading image from the app with URL:

> URL=file:///var/containers/Bundle/Application/F8478269-1902-4ECF-8B0D-42210B4B0FC4/WhizPics.app/tn_pic1.jpg

or from the network with URL:

> URL=https://raw.githubusercontent.com/facebook/AsyncDisplayKit/master/examples_extra/Multiplex/worst.png

is not working. I am lost again!
",rajeevwhiz,appleguy
2575,2016-11-08 07:47:13,"Doing this would prevent excessive waits when UI, like tapped states, need to perform a synchronous display.  If the display queue is very busy and the device is slow, especially on an older iPad with a lot of content, it can take a few full seconds to clear the display queue.

@nguyenhuy we do see this in Pinterest (it's rare but happens consistently enough for a small set of users with these older devices).  Can you think of a simple way to artificially boost drawingPriority for these nodes?  Can we add ~10 to the priority at the point that the priority is checked, or add to it in the getter method of each node if they're able to efficiently check that a synchronous display is ongoing?

5  libsystem_pthread.dylib        0x22bf50b9 pthread_cond_wait
6  Pinterest                      0x7f6087 ASDN::Condition::wait(ASDN::Mutex&) (ASThread.h:278)
7  Pinterest                      0x7f602d ASAsyncTransactionQueue::GroupImpl::wait() (_ASAsyncTransaction.mm:305)
8  Pinterest                      0x7f7399 -[_ASAsyncTransaction waitUntilComplete] (_ASAsyncTransaction.mm:488)
9  Pinterest                      0x83e393 recursivelyTriggerDisplayForLayer(CALayer*, signed char) (ASDisplayNode.mm:2255)
10 Pinterest                      0x83e523 -[ASDisplayNode _recursivelyTriggerDisplayAndBlock:] (ASDisplayNode.mm:2272)
11 Pinterest                      0x6696c1 -[PITapStateAnimationController prepareSubnodesForTapStateAnimation] (PITapStateAnimationController.m:453)
12 Pinterest                      0x666925 -[PITapStateAnimationController setDepressed:] (PITapStateAnimationController.m:134)
13 Pinterest                      0x3611c5 -[ASControlNode(PIAdditions) controlEventUpdated:] (ASControlNode+PIAdditions.m:68)
14 Pinterest                      0x821f43 __55-[ASControlNode sendActionsForControlEvents:withEvent:]_block_invoke (ASControlNode.mm:433)
15 Pinterest                      0x820dd5 _ASEnumerateControlEventsIncludedInMaskWithBlock(unsigned int, void (unsigned int) block_pointer) (ASControlNode.mm:454)
16 Pinterest                      0x821bfb -[ASControlNode sendActionsForControlEvents:withEvent:] (ASControlNode.mm:436)
17 Pinterest                      0x820023 -[ASControlNode touchesBegan:withEvent:] (ASControlNode.mm:152)
18 Pinterest                      0x7fad39 -[_ASDisplayView touchesBegan:withEvent:] (_ASDisplayView.mm:235)
19 UIKit                          0x27491b97 _UIGestureRecognizerUpdate
",appleguy,nguyenhuy
2575,2016-11-08 07:50:22,"Scheduling 2.0 for now - we should punt if this takes more than a couple hours to fix, or if more important priorities arise (defer to @garrettmoon's prioritization here)
",appleguy,garrettmoon
2574,2016-11-08 07:53:05,"@garrettmoon - this could be related to / the same as the PINRemoteImage issue, https://github.com/pinterest/PINRemoteImage/issues/260?

@boreys thank you for reporting this!  If you believe this issue is most likely related to PINRemoteImage internal behavior, rather than the way AsyncDisplayKit drives it, let's move the discussion to that project.  Does it sound like the same issue to you?  If you could read back on the thread, we'd be grateful for any similar details on the case you discovered.

This is the most important image-related issue we're tracking right now, as we just heard about it a few days ago.  We'll prioritize getting it fixed as soon as we have a lead on what might be causing it, and ideally we can force it to reproduce by using network link conditioner, manually crash app while saving, etc.
",appleguy,garrettmoon
2572,2016-11-08 06:55:32,"Regarding how to insert nodes - yes, please use insertItemsAtIndexPaths: whenever possible.  If you need to perform multiple operations (such as a delete and insert, or any other combination), you should wrap them in a performBatchUpdates: call.  Check out the /docs page for more details and feel free to ask questions.  @Adlai-Holler is an expert in Collection as well, and you may find him on Slack (Japan timezone)
",appleguy,Adlai-Holler
2569,2016-11-11 06:41:36,"Thank you @austinlouden!
",hannahmbanana,austinlouden
2566,2016-11-07 23:31:04,"UICollectionView/UITableView API is a pain to work with. Does the message `Invalid number of items in section 0. The number of items in an existing section after the update (10) must be equal to the number of items before the update (6), plus or minus the number inserted or deleted (3 inserted, 0 deleted)` look familiar?

### What it Looks Like

#### Before:



#### After:



#### How it Works

If the data source implements the new method, all imperative updates are ignored. Whenever an update is submitted, the method is called. It retrieves a data object that contains all of the existing items and sections in the collection node, by identifier. It configures the data set how it wants it, we do a nested diff against the old data, and we update if needed.

#### Performance Considerations

- The diffing algorithm in this diff has been vastly optimized. I scrolled down through Pinterest's home feed a long way (30 seconds' worth) on my iPhone 6. Using the original diffing implementation, it spent about 1100ms diffing. After my optimizations, the number was around 33ms, which was small compared to the amount of time spent in UIKit machinery. 
- If the user adds an item with an identifier that already existed, then no allocations occur. If they provide the nodeBlock argument inline, then no `Block_copy` happens either. I've added documentation indicating that you will get somewhat improved performance by specifying the node block inline, rather than calling `[self nodeBlockForItemAtRow:]` or similar.
- Users may generate their identifiers lazily i.e. `[NSString stringWithFormat:@""%@.%@"", model.class, model.identifier]`. This is unfortunate, but acceptable – string allocations are crazy fast. For cases with extremely high item counts and extremely common updates, we can advise users to store their identifiers, which really isn't hard.
- In the future, we might do some or all of the diffing asynchronously, but the cost-benefit doesn't justify that at this time.
  - We would have to be sure to wait for the update to complete if the user called `nodeForItemAtIndexPath:` or `numberOfItemsInSection` or `indexPathForNode:` or really any ASCollectionNode API.
  - We should call `dataForCollectionNode:` on the main thread because users are going to use main-thread-affine view controller flags, and their upstream data sources are main-thread-affine as well.

### Further Considerations

- How should a user trigger an update?
  - Option 1: Calling `reloadData` or ending a batch update always triggers the incremental update.
  - Option 2: A new method e.g. `performUpdateWithCompletion:` triggers the incremental update, and `reloadData` always invalidates everything.
  - Advocacy: Option 1.
    - Users are trained to throw `reloadData` when they aren't sure how to commit an update.
    - I can't think of a use case for ""throw away all the nodes that exists for all the identifiers and then reload."" I'm sure one exists out there, but this could be achieved by another means (see below).
- How should a user indicate they want to invalidate the existing node for a given identifier/section?
  - Consider the use case: a user taps on a pin, and now we want to change that pin to be represented by a different class of node.
  - If this method exists, it should live on the collection node itself, not on the data. They should be able to call it inside of `dataForCollectionNode:` as well as in arbitrary regions of their code , which might be slightly tricky.
  - Option 1: They can't. If you want to get a new node, change the identifier.
  - Option 2: Add a method like `invalidateElementWithIdentifier:` to ASCollectionNode that will pipe the invalidation through to both the current data, and to the data that is currently being configured.
- How should we gather the constrained size? What if they give us a different constrained size for an already-measured node?
  - I believe the correct solution is for the layout inspector (or the asynchronous layout object that will likely replace it) to decide the constrained size on its own.
  - If that object wants to reach out to the data source or delegate (through a separate protocol a la `UICollectionViewDelegateFlowLayout`) to get advisement about the constrained size of an element, then it can. ASDK doesn't need to be involved.
  - For today, I advocate for leaving the constrained-size gathering system as-is. It is sufficient for our purposes, it is likely to change, and in my opinion, it is very unlikely to require ASDK to gather constrained sizes for all items upfront.

#### Wrapping Up

This diff also updates the examples to use the new API. They all run nicely. Once this API is approved, I'll apply it also to ASTableNode. Please be generous with your feedback!
@maicki @garrettmoon @appleguy @nguyenhuy @levi @hannahmbanana @rcancro @Yue-Wang-Google @george-gw ",Adlai-Holler,rcancro
2566,2016-11-07 23:31:04,"UICollectionView/UITableView API is a pain to work with. Does the message `Invalid number of items in section 0. The number of items in an existing section after the update (10) must be equal to the number of items before the update (6), plus or minus the number inserted or deleted (3 inserted, 0 deleted)` look familiar?

### What it Looks Like

#### Before:



#### After:



#### How it Works

If the data source implements the new method, all imperative updates are ignored. Whenever an update is submitted, the method is called. It retrieves a data object that contains all of the existing items and sections in the collection node, by identifier. It configures the data set how it wants it, we do a nested diff against the old data, and we update if needed.

#### Performance Considerations

- The diffing algorithm in this diff has been vastly optimized. I scrolled down through Pinterest's home feed a long way (30 seconds' worth) on my iPhone 6. Using the original diffing implementation, it spent about 1100ms diffing. After my optimizations, the number was around 33ms, which was small compared to the amount of time spent in UIKit machinery. 
- If the user adds an item with an identifier that already existed, then no allocations occur. If they provide the nodeBlock argument inline, then no `Block_copy` happens either. I've added documentation indicating that you will get somewhat improved performance by specifying the node block inline, rather than calling `[self nodeBlockForItemAtRow:]` or similar.
- Users may generate their identifiers lazily i.e. `[NSString stringWithFormat:@""%@.%@"", model.class, model.identifier]`. This is unfortunate, but acceptable – string allocations are crazy fast. For cases with extremely high item counts and extremely common updates, we can advise users to store their identifiers, which really isn't hard.
- In the future, we might do some or all of the diffing asynchronously, but the cost-benefit doesn't justify that at this time.
  - We would have to be sure to wait for the update to complete if the user called `nodeForItemAtIndexPath:` or `numberOfItemsInSection` or `indexPathForNode:` or really any ASCollectionNode API.
  - We should call `dataForCollectionNode:` on the main thread because users are going to use main-thread-affine view controller flags, and their upstream data sources are main-thread-affine as well.

### Further Considerations

- How should a user trigger an update?
  - Option 1: Calling `reloadData` or ending a batch update always triggers the incremental update.
  - Option 2: A new method e.g. `performUpdateWithCompletion:` triggers the incremental update, and `reloadData` always invalidates everything.
  - Advocacy: Option 1.
    - Users are trained to throw `reloadData` when they aren't sure how to commit an update.
    - I can't think of a use case for ""throw away all the nodes that exists for all the identifiers and then reload."" I'm sure one exists out there, but this could be achieved by another means (see below).
- How should a user indicate they want to invalidate the existing node for a given identifier/section?
  - Consider the use case: a user taps on a pin, and now we want to change that pin to be represented by a different class of node.
  - If this method exists, it should live on the collection node itself, not on the data. They should be able to call it inside of `dataForCollectionNode:` as well as in arbitrary regions of their code , which might be slightly tricky.
  - Option 1: They can't. If you want to get a new node, change the identifier.
  - Option 2: Add a method like `invalidateElementWithIdentifier:` to ASCollectionNode that will pipe the invalidation through to both the current data, and to the data that is currently being configured.
- How should we gather the constrained size? What if they give us a different constrained size for an already-measured node?
  - I believe the correct solution is for the layout inspector (or the asynchronous layout object that will likely replace it) to decide the constrained size on its own.
  - If that object wants to reach out to the data source or delegate (through a separate protocol a la `UICollectionViewDelegateFlowLayout`) to get advisement about the constrained size of an element, then it can. ASDK doesn't need to be involved.
  - For today, I advocate for leaving the constrained-size gathering system as-is. It is sufficient for our purposes, it is likely to change, and in my opinion, it is very unlikely to require ASDK to gather constrained sizes for all items upfront.

#### Wrapping Up

This diff also updates the examples to use the new API. They all run nicely. Once this API is approved, I'll apply it also to ASTableNode. Please be generous with your feedback!
@maicki @garrettmoon @appleguy @nguyenhuy @levi @hannahmbanana @rcancro @Yue-Wang-Google @george-gw ",Adlai-Holler,hannahmbanana
2566,2016-11-07 23:31:04,"UICollectionView/UITableView API is a pain to work with. Does the message `Invalid number of items in section 0. The number of items in an existing section after the update (10) must be equal to the number of items before the update (6), plus or minus the number inserted or deleted (3 inserted, 0 deleted)` look familiar?

### What it Looks Like

#### Before:



#### After:



#### How it Works

If the data source implements the new method, all imperative updates are ignored. Whenever an update is submitted, the method is called. It retrieves a data object that contains all of the existing items and sections in the collection node, by identifier. It configures the data set how it wants it, we do a nested diff against the old data, and we update if needed.

#### Performance Considerations

- The diffing algorithm in this diff has been vastly optimized. I scrolled down through Pinterest's home feed a long way (30 seconds' worth) on my iPhone 6. Using the original diffing implementation, it spent about 1100ms diffing. After my optimizations, the number was around 33ms, which was small compared to the amount of time spent in UIKit machinery. 
- If the user adds an item with an identifier that already existed, then no allocations occur. If they provide the nodeBlock argument inline, then no `Block_copy` happens either. I've added documentation indicating that you will get somewhat improved performance by specifying the node block inline, rather than calling `[self nodeBlockForItemAtRow:]` or similar.
- Users may generate their identifiers lazily i.e. `[NSString stringWithFormat:@""%@.%@"", model.class, model.identifier]`. This is unfortunate, but acceptable – string allocations are crazy fast. For cases with extremely high item counts and extremely common updates, we can advise users to store their identifiers, which really isn't hard.
- In the future, we might do some or all of the diffing asynchronously, but the cost-benefit doesn't justify that at this time.
  - We would have to be sure to wait for the update to complete if the user called `nodeForItemAtIndexPath:` or `numberOfItemsInSection` or `indexPathForNode:` or really any ASCollectionNode API.
  - We should call `dataForCollectionNode:` on the main thread because users are going to use main-thread-affine view controller flags, and their upstream data sources are main-thread-affine as well.

### Further Considerations

- How should a user trigger an update?
  - Option 1: Calling `reloadData` or ending a batch update always triggers the incremental update.
  - Option 2: A new method e.g. `performUpdateWithCompletion:` triggers the incremental update, and `reloadData` always invalidates everything.
  - Advocacy: Option 1.
    - Users are trained to throw `reloadData` when they aren't sure how to commit an update.
    - I can't think of a use case for ""throw away all the nodes that exists for all the identifiers and then reload."" I'm sure one exists out there, but this could be achieved by another means (see below).
- How should a user indicate they want to invalidate the existing node for a given identifier/section?
  - Consider the use case: a user taps on a pin, and now we want to change that pin to be represented by a different class of node.
  - If this method exists, it should live on the collection node itself, not on the data. They should be able to call it inside of `dataForCollectionNode:` as well as in arbitrary regions of their code , which might be slightly tricky.
  - Option 1: They can't. If you want to get a new node, change the identifier.
  - Option 2: Add a method like `invalidateElementWithIdentifier:` to ASCollectionNode that will pipe the invalidation through to both the current data, and to the data that is currently being configured.
- How should we gather the constrained size? What if they give us a different constrained size for an already-measured node?
  - I believe the correct solution is for the layout inspector (or the asynchronous layout object that will likely replace it) to decide the constrained size on its own.
  - If that object wants to reach out to the data source or delegate (through a separate protocol a la `UICollectionViewDelegateFlowLayout`) to get advisement about the constrained size of an element, then it can. ASDK doesn't need to be involved.
  - For today, I advocate for leaving the constrained-size gathering system as-is. It is sufficient for our purposes, it is likely to change, and in my opinion, it is very unlikely to require ASDK to gather constrained sizes for all items upfront.

#### Wrapping Up

This diff also updates the examples to use the new API. They all run nicely. Once this API is approved, I'll apply it also to ASTableNode. Please be generous with your feedback!
@maicki @garrettmoon @appleguy @nguyenhuy @levi @hannahmbanana @rcancro @Yue-Wang-Google @george-gw ",Adlai-Holler,nguyenhuy
2566,2016-11-07 23:31:04,"UICollectionView/UITableView API is a pain to work with. Does the message `Invalid number of items in section 0. The number of items in an existing section after the update (10) must be equal to the number of items before the update (6), plus or minus the number inserted or deleted (3 inserted, 0 deleted)` look familiar?

### What it Looks Like

#### Before:



#### After:



#### How it Works

If the data source implements the new method, all imperative updates are ignored. Whenever an update is submitted, the method is called. It retrieves a data object that contains all of the existing items and sections in the collection node, by identifier. It configures the data set how it wants it, we do a nested diff against the old data, and we update if needed.

#### Performance Considerations

- The diffing algorithm in this diff has been vastly optimized. I scrolled down through Pinterest's home feed a long way (30 seconds' worth) on my iPhone 6. Using the original diffing implementation, it spent about 1100ms diffing. After my optimizations, the number was around 33ms, which was small compared to the amount of time spent in UIKit machinery. 
- If the user adds an item with an identifier that already existed, then no allocations occur. If they provide the nodeBlock argument inline, then no `Block_copy` happens either. I've added documentation indicating that you will get somewhat improved performance by specifying the node block inline, rather than calling `[self nodeBlockForItemAtRow:]` or similar.
- Users may generate their identifiers lazily i.e. `[NSString stringWithFormat:@""%@.%@"", model.class, model.identifier]`. This is unfortunate, but acceptable – string allocations are crazy fast. For cases with extremely high item counts and extremely common updates, we can advise users to store their identifiers, which really isn't hard.
- In the future, we might do some or all of the diffing asynchronously, but the cost-benefit doesn't justify that at this time.
  - We would have to be sure to wait for the update to complete if the user called `nodeForItemAtIndexPath:` or `numberOfItemsInSection` or `indexPathForNode:` or really any ASCollectionNode API.
  - We should call `dataForCollectionNode:` on the main thread because users are going to use main-thread-affine view controller flags, and their upstream data sources are main-thread-affine as well.

### Further Considerations

- How should a user trigger an update?
  - Option 1: Calling `reloadData` or ending a batch update always triggers the incremental update.
  - Option 2: A new method e.g. `performUpdateWithCompletion:` triggers the incremental update, and `reloadData` always invalidates everything.
  - Advocacy: Option 1.
    - Users are trained to throw `reloadData` when they aren't sure how to commit an update.
    - I can't think of a use case for ""throw away all the nodes that exists for all the identifiers and then reload."" I'm sure one exists out there, but this could be achieved by another means (see below).
- How should a user indicate they want to invalidate the existing node for a given identifier/section?
  - Consider the use case: a user taps on a pin, and now we want to change that pin to be represented by a different class of node.
  - If this method exists, it should live on the collection node itself, not on the data. They should be able to call it inside of `dataForCollectionNode:` as well as in arbitrary regions of their code , which might be slightly tricky.
  - Option 1: They can't. If you want to get a new node, change the identifier.
  - Option 2: Add a method like `invalidateElementWithIdentifier:` to ASCollectionNode that will pipe the invalidation through to both the current data, and to the data that is currently being configured.
- How should we gather the constrained size? What if they give us a different constrained size for an already-measured node?
  - I believe the correct solution is for the layout inspector (or the asynchronous layout object that will likely replace it) to decide the constrained size on its own.
  - If that object wants to reach out to the data source or delegate (through a separate protocol a la `UICollectionViewDelegateFlowLayout`) to get advisement about the constrained size of an element, then it can. ASDK doesn't need to be involved.
  - For today, I advocate for leaving the constrained-size gathering system as-is. It is sufficient for our purposes, it is likely to change, and in my opinion, it is very unlikely to require ASDK to gather constrained sizes for all items upfront.

#### Wrapping Up

This diff also updates the examples to use the new API. They all run nicely. Once this API is approved, I'll apply it also to ASTableNode. Please be generous with your feedback!
@maicki @garrettmoon @appleguy @nguyenhuy @levi @hannahmbanana @rcancro @Yue-Wang-Google @george-gw ",Adlai-Holler,levi
2566,2016-11-07 23:31:04,"UICollectionView/UITableView API is a pain to work with. Does the message `Invalid number of items in section 0. The number of items in an existing section after the update (10) must be equal to the number of items before the update (6), plus or minus the number inserted or deleted (3 inserted, 0 deleted)` look familiar?

### What it Looks Like

#### Before:



#### After:



#### How it Works

If the data source implements the new method, all imperative updates are ignored. Whenever an update is submitted, the method is called. It retrieves a data object that contains all of the existing items and sections in the collection node, by identifier. It configures the data set how it wants it, we do a nested diff against the old data, and we update if needed.

#### Performance Considerations

- The diffing algorithm in this diff has been vastly optimized. I scrolled down through Pinterest's home feed a long way (30 seconds' worth) on my iPhone 6. Using the original diffing implementation, it spent about 1100ms diffing. After my optimizations, the number was around 33ms, which was small compared to the amount of time spent in UIKit machinery. 
- If the user adds an item with an identifier that already existed, then no allocations occur. If they provide the nodeBlock argument inline, then no `Block_copy` happens either. I've added documentation indicating that you will get somewhat improved performance by specifying the node block inline, rather than calling `[self nodeBlockForItemAtRow:]` or similar.
- Users may generate their identifiers lazily i.e. `[NSString stringWithFormat:@""%@.%@"", model.class, model.identifier]`. This is unfortunate, but acceptable – string allocations are crazy fast. For cases with extremely high item counts and extremely common updates, we can advise users to store their identifiers, which really isn't hard.
- In the future, we might do some or all of the diffing asynchronously, but the cost-benefit doesn't justify that at this time.
  - We would have to be sure to wait for the update to complete if the user called `nodeForItemAtIndexPath:` or `numberOfItemsInSection` or `indexPathForNode:` or really any ASCollectionNode API.
  - We should call `dataForCollectionNode:` on the main thread because users are going to use main-thread-affine view controller flags, and their upstream data sources are main-thread-affine as well.

### Further Considerations

- How should a user trigger an update?
  - Option 1: Calling `reloadData` or ending a batch update always triggers the incremental update.
  - Option 2: A new method e.g. `performUpdateWithCompletion:` triggers the incremental update, and `reloadData` always invalidates everything.
  - Advocacy: Option 1.
    - Users are trained to throw `reloadData` when they aren't sure how to commit an update.
    - I can't think of a use case for ""throw away all the nodes that exists for all the identifiers and then reload."" I'm sure one exists out there, but this could be achieved by another means (see below).
- How should a user indicate they want to invalidate the existing node for a given identifier/section?
  - Consider the use case: a user taps on a pin, and now we want to change that pin to be represented by a different class of node.
  - If this method exists, it should live on the collection node itself, not on the data. They should be able to call it inside of `dataForCollectionNode:` as well as in arbitrary regions of their code , which might be slightly tricky.
  - Option 1: They can't. If you want to get a new node, change the identifier.
  - Option 2: Add a method like `invalidateElementWithIdentifier:` to ASCollectionNode that will pipe the invalidation through to both the current data, and to the data that is currently being configured.
- How should we gather the constrained size? What if they give us a different constrained size for an already-measured node?
  - I believe the correct solution is for the layout inspector (or the asynchronous layout object that will likely replace it) to decide the constrained size on its own.
  - If that object wants to reach out to the data source or delegate (through a separate protocol a la `UICollectionViewDelegateFlowLayout`) to get advisement about the constrained size of an element, then it can. ASDK doesn't need to be involved.
  - For today, I advocate for leaving the constrained-size gathering system as-is. It is sufficient for our purposes, it is likely to change, and in my opinion, it is very unlikely to require ASDK to gather constrained sizes for all items upfront.

#### Wrapping Up

This diff also updates the examples to use the new API. They all run nicely. Once this API is approved, I'll apply it also to ASTableNode. Please be generous with your feedback!
@maicki @garrettmoon @appleguy @nguyenhuy @levi @hannahmbanana @rcancro @Yue-Wang-Google @george-gw ",Adlai-Holler,appleguy
2566,2016-11-07 23:31:04,"UICollectionView/UITableView API is a pain to work with. Does the message `Invalid number of items in section 0. The number of items in an existing section after the update (10) must be equal to the number of items before the update (6), plus or minus the number inserted or deleted (3 inserted, 0 deleted)` look familiar?

### What it Looks Like

#### Before:



#### After:



#### How it Works

If the data source implements the new method, all imperative updates are ignored. Whenever an update is submitted, the method is called. It retrieves a data object that contains all of the existing items and sections in the collection node, by identifier. It configures the data set how it wants it, we do a nested diff against the old data, and we update if needed.

#### Performance Considerations

- The diffing algorithm in this diff has been vastly optimized. I scrolled down through Pinterest's home feed a long way (30 seconds' worth) on my iPhone 6. Using the original diffing implementation, it spent about 1100ms diffing. After my optimizations, the number was around 33ms, which was small compared to the amount of time spent in UIKit machinery. 
- If the user adds an item with an identifier that already existed, then no allocations occur. If they provide the nodeBlock argument inline, then no `Block_copy` happens either. I've added documentation indicating that you will get somewhat improved performance by specifying the node block inline, rather than calling `[self nodeBlockForItemAtRow:]` or similar.
- Users may generate their identifiers lazily i.e. `[NSString stringWithFormat:@""%@.%@"", model.class, model.identifier]`. This is unfortunate, but acceptable – string allocations are crazy fast. For cases with extremely high item counts and extremely common updates, we can advise users to store their identifiers, which really isn't hard.
- In the future, we might do some or all of the diffing asynchronously, but the cost-benefit doesn't justify that at this time.
  - We would have to be sure to wait for the update to complete if the user called `nodeForItemAtIndexPath:` or `numberOfItemsInSection` or `indexPathForNode:` or really any ASCollectionNode API.
  - We should call `dataForCollectionNode:` on the main thread because users are going to use main-thread-affine view controller flags, and their upstream data sources are main-thread-affine as well.

### Further Considerations

- How should a user trigger an update?
  - Option 1: Calling `reloadData` or ending a batch update always triggers the incremental update.
  - Option 2: A new method e.g. `performUpdateWithCompletion:` triggers the incremental update, and `reloadData` always invalidates everything.
  - Advocacy: Option 1.
    - Users are trained to throw `reloadData` when they aren't sure how to commit an update.
    - I can't think of a use case for ""throw away all the nodes that exists for all the identifiers and then reload."" I'm sure one exists out there, but this could be achieved by another means (see below).
- How should a user indicate they want to invalidate the existing node for a given identifier/section?
  - Consider the use case: a user taps on a pin, and now we want to change that pin to be represented by a different class of node.
  - If this method exists, it should live on the collection node itself, not on the data. They should be able to call it inside of `dataForCollectionNode:` as well as in arbitrary regions of their code , which might be slightly tricky.
  - Option 1: They can't. If you want to get a new node, change the identifier.
  - Option 2: Add a method like `invalidateElementWithIdentifier:` to ASCollectionNode that will pipe the invalidation through to both the current data, and to the data that is currently being configured.
- How should we gather the constrained size? What if they give us a different constrained size for an already-measured node?
  - I believe the correct solution is for the layout inspector (or the asynchronous layout object that will likely replace it) to decide the constrained size on its own.
  - If that object wants to reach out to the data source or delegate (through a separate protocol a la `UICollectionViewDelegateFlowLayout`) to get advisement about the constrained size of an element, then it can. ASDK doesn't need to be involved.
  - For today, I advocate for leaving the constrained-size gathering system as-is. It is sufficient for our purposes, it is likely to change, and in my opinion, it is very unlikely to require ASDK to gather constrained sizes for all items upfront.

#### Wrapping Up

This diff also updates the examples to use the new API. They all run nicely. Once this API is approved, I'll apply it also to ASTableNode. Please be generous with your feedback!
@maicki @garrettmoon @appleguy @nguyenhuy @levi @hannahmbanana @rcancro @Yue-Wang-Google @george-gw ",Adlai-Holler,garrettmoon
2566,2016-11-07 23:31:04,"UICollectionView/UITableView API is a pain to work with. Does the message `Invalid number of items in section 0. The number of items in an existing section after the update (10) must be equal to the number of items before the update (6), plus or minus the number inserted or deleted (3 inserted, 0 deleted)` look familiar?

### What it Looks Like

#### Before:



#### After:



#### How it Works

If the data source implements the new method, all imperative updates are ignored. Whenever an update is submitted, the method is called. It retrieves a data object that contains all of the existing items and sections in the collection node, by identifier. It configures the data set how it wants it, we do a nested diff against the old data, and we update if needed.

#### Performance Considerations

- The diffing algorithm in this diff has been vastly optimized. I scrolled down through Pinterest's home feed a long way (30 seconds' worth) on my iPhone 6. Using the original diffing implementation, it spent about 1100ms diffing. After my optimizations, the number was around 33ms, which was small compared to the amount of time spent in UIKit machinery. 
- If the user adds an item with an identifier that already existed, then no allocations occur. If they provide the nodeBlock argument inline, then no `Block_copy` happens either. I've added documentation indicating that you will get somewhat improved performance by specifying the node block inline, rather than calling `[self nodeBlockForItemAtRow:]` or similar.
- Users may generate their identifiers lazily i.e. `[NSString stringWithFormat:@""%@.%@"", model.class, model.identifier]`. This is unfortunate, but acceptable – string allocations are crazy fast. For cases with extremely high item counts and extremely common updates, we can advise users to store their identifiers, which really isn't hard.
- In the future, we might do some or all of the diffing asynchronously, but the cost-benefit doesn't justify that at this time.
  - We would have to be sure to wait for the update to complete if the user called `nodeForItemAtIndexPath:` or `numberOfItemsInSection` or `indexPathForNode:` or really any ASCollectionNode API.
  - We should call `dataForCollectionNode:` on the main thread because users are going to use main-thread-affine view controller flags, and their upstream data sources are main-thread-affine as well.

### Further Considerations

- How should a user trigger an update?
  - Option 1: Calling `reloadData` or ending a batch update always triggers the incremental update.
  - Option 2: A new method e.g. `performUpdateWithCompletion:` triggers the incremental update, and `reloadData` always invalidates everything.
  - Advocacy: Option 1.
    - Users are trained to throw `reloadData` when they aren't sure how to commit an update.
    - I can't think of a use case for ""throw away all the nodes that exists for all the identifiers and then reload."" I'm sure one exists out there, but this could be achieved by another means (see below).
- How should a user indicate they want to invalidate the existing node for a given identifier/section?
  - Consider the use case: a user taps on a pin, and now we want to change that pin to be represented by a different class of node.
  - If this method exists, it should live on the collection node itself, not on the data. They should be able to call it inside of `dataForCollectionNode:` as well as in arbitrary regions of their code , which might be slightly tricky.
  - Option 1: They can't. If you want to get a new node, change the identifier.
  - Option 2: Add a method like `invalidateElementWithIdentifier:` to ASCollectionNode that will pipe the invalidation through to both the current data, and to the data that is currently being configured.
- How should we gather the constrained size? What if they give us a different constrained size for an already-measured node?
  - I believe the correct solution is for the layout inspector (or the asynchronous layout object that will likely replace it) to decide the constrained size on its own.
  - If that object wants to reach out to the data source or delegate (through a separate protocol a la `UICollectionViewDelegateFlowLayout`) to get advisement about the constrained size of an element, then it can. ASDK doesn't need to be involved.
  - For today, I advocate for leaving the constrained-size gathering system as-is. It is sufficient for our purposes, it is likely to change, and in my opinion, it is very unlikely to require ASDK to gather constrained sizes for all items upfront.

#### Wrapping Up

This diff also updates the examples to use the new API. They all run nicely. Once this API is approved, I'll apply it also to ASTableNode. Please be generous with your feedback!
@maicki @garrettmoon @appleguy @nguyenhuy @levi @hannahmbanana @rcancro @Yue-Wang-Google @george-gw ",Adlai-Holler,george-gw
2566,2016-11-07 23:31:04,"UICollectionView/UITableView API is a pain to work with. Does the message `Invalid number of items in section 0. The number of items in an existing section after the update (10) must be equal to the number of items before the update (6), plus or minus the number inserted or deleted (3 inserted, 0 deleted)` look familiar?

### What it Looks Like

#### Before:



#### After:



#### How it Works

If the data source implements the new method, all imperative updates are ignored. Whenever an update is submitted, the method is called. It retrieves a data object that contains all of the existing items and sections in the collection node, by identifier. It configures the data set how it wants it, we do a nested diff against the old data, and we update if needed.

#### Performance Considerations

- The diffing algorithm in this diff has been vastly optimized. I scrolled down through Pinterest's home feed a long way (30 seconds' worth) on my iPhone 6. Using the original diffing implementation, it spent about 1100ms diffing. After my optimizations, the number was around 33ms, which was small compared to the amount of time spent in UIKit machinery. 
- If the user adds an item with an identifier that already existed, then no allocations occur. If they provide the nodeBlock argument inline, then no `Block_copy` happens either. I've added documentation indicating that you will get somewhat improved performance by specifying the node block inline, rather than calling `[self nodeBlockForItemAtRow:]` or similar.
- Users may generate their identifiers lazily i.e. `[NSString stringWithFormat:@""%@.%@"", model.class, model.identifier]`. This is unfortunate, but acceptable – string allocations are crazy fast. For cases with extremely high item counts and extremely common updates, we can advise users to store their identifiers, which really isn't hard.
- In the future, we might do some or all of the diffing asynchronously, but the cost-benefit doesn't justify that at this time.
  - We would have to be sure to wait for the update to complete if the user called `nodeForItemAtIndexPath:` or `numberOfItemsInSection` or `indexPathForNode:` or really any ASCollectionNode API.
  - We should call `dataForCollectionNode:` on the main thread because users are going to use main-thread-affine view controller flags, and their upstream data sources are main-thread-affine as well.

### Further Considerations

- How should a user trigger an update?
  - Option 1: Calling `reloadData` or ending a batch update always triggers the incremental update.
  - Option 2: A new method e.g. `performUpdateWithCompletion:` triggers the incremental update, and `reloadData` always invalidates everything.
  - Advocacy: Option 1.
    - Users are trained to throw `reloadData` when they aren't sure how to commit an update.
    - I can't think of a use case for ""throw away all the nodes that exists for all the identifiers and then reload."" I'm sure one exists out there, but this could be achieved by another means (see below).
- How should a user indicate they want to invalidate the existing node for a given identifier/section?
  - Consider the use case: a user taps on a pin, and now we want to change that pin to be represented by a different class of node.
  - If this method exists, it should live on the collection node itself, not on the data. They should be able to call it inside of `dataForCollectionNode:` as well as in arbitrary regions of their code , which might be slightly tricky.
  - Option 1: They can't. If you want to get a new node, change the identifier.
  - Option 2: Add a method like `invalidateElementWithIdentifier:` to ASCollectionNode that will pipe the invalidation through to both the current data, and to the data that is currently being configured.
- How should we gather the constrained size? What if they give us a different constrained size for an already-measured node?
  - I believe the correct solution is for the layout inspector (or the asynchronous layout object that will likely replace it) to decide the constrained size on its own.
  - If that object wants to reach out to the data source or delegate (through a separate protocol a la `UICollectionViewDelegateFlowLayout`) to get advisement about the constrained size of an element, then it can. ASDK doesn't need to be involved.
  - For today, I advocate for leaving the constrained-size gathering system as-is. It is sufficient for our purposes, it is likely to change, and in my opinion, it is very unlikely to require ASDK to gather constrained sizes for all items upfront.

#### Wrapping Up

This diff also updates the examples to use the new API. They all run nicely. Once this API is approved, I'll apply it also to ASTableNode. Please be generous with your feedback!
@maicki @garrettmoon @appleguy @nguyenhuy @levi @hannahmbanana @rcancro @Yue-Wang-Google @george-gw ",Adlai-Holler,maicki
2566,2016-11-07 23:31:04,"UICollectionView/UITableView API is a pain to work with. Does the message `Invalid number of items in section 0. The number of items in an existing section after the update (10) must be equal to the number of items before the update (6), plus or minus the number inserted or deleted (3 inserted, 0 deleted)` look familiar?

### What it Looks Like

#### Before:



#### After:



#### How it Works

If the data source implements the new method, all imperative updates are ignored. Whenever an update is submitted, the method is called. It retrieves a data object that contains all of the existing items and sections in the collection node, by identifier. It configures the data set how it wants it, we do a nested diff against the old data, and we update if needed.

#### Performance Considerations

- The diffing algorithm in this diff has been vastly optimized. I scrolled down through Pinterest's home feed a long way (30 seconds' worth) on my iPhone 6. Using the original diffing implementation, it spent about 1100ms diffing. After my optimizations, the number was around 33ms, which was small compared to the amount of time spent in UIKit machinery. 
- If the user adds an item with an identifier that already existed, then no allocations occur. If they provide the nodeBlock argument inline, then no `Block_copy` happens either. I've added documentation indicating that you will get somewhat improved performance by specifying the node block inline, rather than calling `[self nodeBlockForItemAtRow:]` or similar.
- Users may generate their identifiers lazily i.e. `[NSString stringWithFormat:@""%@.%@"", model.class, model.identifier]`. This is unfortunate, but acceptable – string allocations are crazy fast. For cases with extremely high item counts and extremely common updates, we can advise users to store their identifiers, which really isn't hard.
- In the future, we might do some or all of the diffing asynchronously, but the cost-benefit doesn't justify that at this time.
  - We would have to be sure to wait for the update to complete if the user called `nodeForItemAtIndexPath:` or `numberOfItemsInSection` or `indexPathForNode:` or really any ASCollectionNode API.
  - We should call `dataForCollectionNode:` on the main thread because users are going to use main-thread-affine view controller flags, and their upstream data sources are main-thread-affine as well.

### Further Considerations

- How should a user trigger an update?
  - Option 1: Calling `reloadData` or ending a batch update always triggers the incremental update.
  - Option 2: A new method e.g. `performUpdateWithCompletion:` triggers the incremental update, and `reloadData` always invalidates everything.
  - Advocacy: Option 1.
    - Users are trained to throw `reloadData` when they aren't sure how to commit an update.
    - I can't think of a use case for ""throw away all the nodes that exists for all the identifiers and then reload."" I'm sure one exists out there, but this could be achieved by another means (see below).
- How should a user indicate they want to invalidate the existing node for a given identifier/section?
  - Consider the use case: a user taps on a pin, and now we want to change that pin to be represented by a different class of node.
  - If this method exists, it should live on the collection node itself, not on the data. They should be able to call it inside of `dataForCollectionNode:` as well as in arbitrary regions of their code , which might be slightly tricky.
  - Option 1: They can't. If you want to get a new node, change the identifier.
  - Option 2: Add a method like `invalidateElementWithIdentifier:` to ASCollectionNode that will pipe the invalidation through to both the current data, and to the data that is currently being configured.
- How should we gather the constrained size? What if they give us a different constrained size for an already-measured node?
  - I believe the correct solution is for the layout inspector (or the asynchronous layout object that will likely replace it) to decide the constrained size on its own.
  - If that object wants to reach out to the data source or delegate (through a separate protocol a la `UICollectionViewDelegateFlowLayout`) to get advisement about the constrained size of an element, then it can. ASDK doesn't need to be involved.
  - For today, I advocate for leaving the constrained-size gathering system as-is. It is sufficient for our purposes, it is likely to change, and in my opinion, it is very unlikely to require ASDK to gather constrained sizes for all items upfront.

#### Wrapping Up

This diff also updates the examples to use the new API. They all run nicely. Once this API is approved, I'll apply it also to ASTableNode. Please be generous with your feedback!
@maicki @garrettmoon @appleguy @nguyenhuy @levi @hannahmbanana @rcancro @Yue-Wang-Google @george-gw ",Adlai-Holler,Yue-Wang-Google
2566,2016-11-14 07:18:01,"@lappp9 @austinlouden 
",hannahmbanana,austinlouden
2566,2016-11-14 07:18:01,"@lappp9 @austinlouden 
",hannahmbanana,lappp9
2564,2016-11-07 21:20:37,"@Adlai-Holler we should fix this in the next week - it causes memory usage to grow to problematic levels even on the simulator.  In this screenshot, it's ASDKgram, without any user interaction occurring - memory growth proceeds rapidly.

<img width=""1236"" alt=""screen shot 2016-11-07 at 1 18 44 pm"" src=""https://cloud.githubusercontent.com/assets/565251/20076343/eeda5d82-a4ec-11e6-9950-e180f7fd54d7.png"">
",appleguy,Adlai-Holler
2562,2016-11-08 10:32:58,"@Adlai-Holler: Thanks for the feedbacks. Updated the PR. Getting Jenkins failure because of an unrelated error. Please merge this when you're available. Thanks!
",nguyenhuy,Adlai-Holler
2561,2016-11-07 07:24:11,"Decided to knock https://github.com/facebook/AsyncDisplayKit/issues/2528 out
@hannahmbanana ",lappp9,hannahmbanana
2557,2016-11-06 04:38:35,"Talked with @appleguy with this issue on slack on Nov 5.

## Reproduce
- examples_extra/Placeholders [diff.txt](https://github.com/facebook/AsyncDisplayKit/files/573641/diff.txt)
- Changed `ASImageNode` -> `ASNetworkImageNode`
- Loaded network image
- Removed ForwardWorkaround in `SlowpokeImageNode`

## Expected
Placeholder image fade out with `placeholderFadeDuration` and `placeholderFadeEnabled` set.

## Current
- This issue is not occurring 100% time. Refer to the gif image below: first attempt show animation properly, other attempt does not.
- with ForwardWorkaround and for duration over 0.1s, the issue is not occurring.

![bug](https://cloud.githubusercontent.com/assets/1745342/20035401/ae36bd4e-a3b0-11e6-8977-2a9df0839029.gif)

## Affected Version (checked)
- 1.9.81
- 1.9.90
- 1.9.92
- 2.0-beta.1",kimshako,appleguy
2557,2017-01-31 19:49:14,We'd like to overhaul the placeholder system soon. Unscheduling and assigning to @Adlai-Holler ,garrettmoon,Adlai-Holler
2555,2016-11-06 00:47:37,"IMO, this seems like incorrect behavior, but correct me if I'm wrong. :)

Repro using example project #2551 (`examples/LayoutSpecExamples`). These cells contain a title & description in a vertical stack. The textNode description for the 3rd cell has a nil attributedText set on it.  

![image](https://cloud.githubusercontent.com/assets/3419380/20034578/b3802564-a37f-11e6-8384-a2bba029899f.png)

cc @Adlai-Holler @maicki (I'm not sure if this is a layout issue or a text node issue)",hannahmbanana,maicki
2555,2016-11-06 00:47:37,"IMO, this seems like incorrect behavior, but correct me if I'm wrong. :)

Repro using example project #2551 (`examples/LayoutSpecExamples`). These cells contain a title & description in a vertical stack. The textNode description for the 3rd cell has a nil attributedText set on it.  

![image](https://cloud.githubusercontent.com/assets/3419380/20034578/b3802564-a37f-11e6-8384-a2bba029899f.png)

cc @Adlai-Holler @maicki (I'm not sure if this is a layout issue or a text node issue)",hannahmbanana,Adlai-Holler
2554,2016-11-05 23:07:09,"This code has been waiting on a branch for a few months now.  Although there is a lot that needs to be improved, I think the core concepts are good and should be pulled into master so I don't need to rebase it anymore :).

For a project of this size and scope, with integration points in code that changes frequently, having it in master will allow us to collaborate on the task of making layout visualization a full-fledged feature.  It's not too far from being possible to visualize AND inspect layout specs even in real applications.

Thanks to @hannahmbanana for making the first version of this, and for @nguyenhuy who did the ASLayoutContext integrations.

Some of the core ideas:

- Visualizer Node and Inspector Node must exist in ASDK framework itself, to allow apps to inspect their own layouts in the future.
- Other components that are specific to the Playground app are only in that app.
- Once this and the LayoutSpecExamples PR lands, @hannahmbanana can work on reducing duplication between the apps.  They could share one directory of source files for the demonstration layouts, so the Playground can visualize these and showcase the inspector features without duplicating their code.",appleguy,nguyenhuy
2554,2016-11-05 23:07:09,"This code has been waiting on a branch for a few months now.  Although there is a lot that needs to be improved, I think the core concepts are good and should be pulled into master so I don't need to rebase it anymore :).

For a project of this size and scope, with integration points in code that changes frequently, having it in master will allow us to collaborate on the task of making layout visualization a full-fledged feature.  It's not too far from being possible to visualize AND inspect layout specs even in real applications.

Thanks to @hannahmbanana for making the first version of this, and for @nguyenhuy who did the ASLayoutContext integrations.

Some of the core ideas:

- Visualizer Node and Inspector Node must exist in ASDK framework itself, to allow apps to inspect their own layouts in the future.
- Other components that are specific to the Playground app are only in that app.
- Once this and the LayoutSpecExamples PR lands, @hannahmbanana can work on reducing duplication between the apps.  They could share one directory of source files for the demonstration layouts, so the Playground can visualize these and showcase the inspector features without duplicating their code.",appleguy,hannahmbanana
2554,2016-11-06 01:04:53,"This diff include's @george-gw's recent commit to the branch.  Thanks George!  https://github.com/facebook/AsyncDisplayKit/pull/2411
",appleguy,george-gw
2554,2016-11-09 15:50:21,"We should create a Github issue to clean it up.

Especially adding it behind a flag. We added some unnecessary overhead to it that 99% of time needs not to be run (e.g. `setShouldVisualize` calls).  Furthermore we should move all of that into it's own category: `ASLayoutSpec (LayoutVisualization)`.

@hannahmbanana could you create an issue for that?
",maicki,hannahmbanana
2550,2016-11-05 06:07:45,"This is an attempt to fix #2504.

@Adlai-Holler what do you think?

@garrettmoon I tried setting the context to be `self.stringDrawingContext` but that didn't work – it only worked as expected when the context is `nil`.",connor,garrettmoon
2550,2016-11-05 06:07:45,"This is an attempt to fix #2504.

@Adlai-Holler what do you think?

@garrettmoon I tried setting the context to be `self.stringDrawingContext` but that didn't work – it only worked as expected when the context is `nil`.",connor,Adlai-Holler
2546,2016-11-06 20:27:29,"@danielrhodes that's a pretty clever hack :)

@Adlai-Holler Do you have any ideas for a better workaround now?

I know we're working on improving this situation, but it'll likely land after 2.0.
",garrettmoon,Adlai-Holler
2543,2016-11-03 18:45:38,"Thanks to @Baevra for catching this (#2540) and @Adlai-Holler for debugging this with me!

**Issue:**
Rotation from Portrait to Landscape in CustomCollectionView example does not trigger the layout inspector's `-constrainedSizeForNodeAtIndexPath` method. 

**Explanation:**
The collectionView's `scrollableDirections` was getting set to all directions because the bounds size changed before the content size changed. Going from portrait to landscape, the bounds size changed from a smaller width to a larger width, triggering a relayout of all nodes. Going from landscape to portrait, the bounds size changed from a larger width to a smaller width, causing the data controller to think that it was scrollable in the horizontal direction as well. 

Since laying out all nodes is expensive, we only do this if the bounds changes in the non-scrollable direction.  If, for example, a vertical flow layout has its height changed due to a status bar appearance update, we do not need to relayout all nodes. 

**Solution:**
make `-scrollableDirections` a required method for ASCollectionViewLayoutInspecting

- [x] update CustomCollectionView example
- [x] make scrollableDirections required for ASCollectionViewLayoutInspecting object
- [x] remove ASCollectionView's implementation",hannahmbanana,Adlai-Holler
2543,2016-11-06 23:37:04,"@Adlai-Holler @appleguy @garrettmoon - Adding the assertion causes some of the `ASCollectionView` tests to fail. It looks like the issue is that ASCollectionView's `initWithFrame:` triggers ASCollectionView `didChangeBoundsWithOldValue:`. This method uses the `layoutInspector` getter which relies on the layout (which hasn't been set yet). 

What's the correct solution here? 

![screen shot 2016-11-06 at 3 36 46 pm](https://cloud.githubusercontent.com/assets/3419380/20042892/d7eb0862-a436-11e6-9910-d9d98e9e1fde.png)
",hannahmbanana,Adlai-Holler
2541,2016-11-14 05:30:26,"@nguyenhuy cc #2536 not resolved but relevant. Could you give this a post-commit review?

@garrettmoon Can we get this a lodestone pass when it gets synced to Pinterest?
",Adlai-Holler,nguyenhuy
2541,2016-11-14 05:30:26,"@nguyenhuy cc #2536 not resolved but relevant. Could you give this a post-commit review?

@garrettmoon Can we get this a lodestone pass when it gets synced to Pinterest?
",Adlai-Holler,garrettmoon
2541,2016-11-16 18:42:30,"@Adlai-Holler: Yeah, great question on determining visible nodes. I was thinking maybe we can rely on the previous visible paths and assume that the new ones are at least very close. It's definitely the case if items have the same size. I can even put up a short working prototype with that assumption.

That being said, your idea is more generalized and should cover all cases. But it looks like a big change. After a discussion with @garrettmoon, @appleguy and @maicki, we agreed that we don't have time to make it to 2.0. @garrettmoon will move #2536 to later milestones.
",nguyenhuy,garrettmoon
2541,2016-11-16 18:42:30,"@Adlai-Holler: Yeah, great question on determining visible nodes. I was thinking maybe we can rely on the previous visible paths and assume that the new ones are at least very close. It's definitely the case if items have the same size. I can even put up a short working prototype with that assumption.

That being said, your idea is more generalized and should cover all cases. But it looks like a big change. After a discussion with @garrettmoon, @appleguy and @maicki, we agreed that we don't have time to make it to 2.0. @garrettmoon will move #2536 to later milestones.
",nguyenhuy,appleguy
2541,2016-11-16 18:42:30,"@Adlai-Holler: Yeah, great question on determining visible nodes. I was thinking maybe we can rely on the previous visible paths and assume that the new ones are at least very close. It's definitely the case if items have the same size. I can even put up a short working prototype with that assumption.

That being said, your idea is more generalized and should cover all cases. But it looks like a big change. After a discussion with @garrettmoon, @appleguy and @maicki, we agreed that we don't have time to make it to 2.0. @garrettmoon will move #2536 to later milestones.
",nguyenhuy,maicki
2540,2016-11-03 06:34:02,"@Baevra - thanks for reporting!

@maicki: In the `CustomCollectionView` example, if you rotate to landscape, it will call `-shouldInvalidateLayoutForBoundsChange` and then request the `-constrainedSizeForNode...`. However, when you rotate back to portrait, even though it calls `-shouldInvalidate` and the app replies `YES`, there are no further calls to the `-constrainedSize` method and the layout results in overlapping images. 
",hannahmbanana,maicki
2539,2016-11-03 01:19:24,"@tamaskarai :)  Be careful out there!
",appleguy,tamaskarai
2536,2016-11-02 19:30:40,"So I’ve been thinking about ways to eliminate, or at least minimize, flashes caused by `reloadData`. This is one of the top complaints from developers that are new to the framework. I have a couple of solutions in mind and would love to start a discussion here:

- Cell node prioritization:
  - I reckon one of the main causes of flashing is due to the fact that new cell nodes are initialized and laid out linearly, meaning they are handled from first to last index. Instead, we should have prioritized them based on the ranges. Nodes in visible range should be handled first, followed by the ones in fetch data range and so on. We can even block main thread while dealing with the highest priority nodes (i.e. visible ones).
  - One possible issue with this technique is that it needs to maintain content offset of the scroll view. In other words, we need to keep a static viewport while deleting/inserting nodes. 
  - This solution maybe easier to implement once virtualization is supported, or maybe a step toward virtualization.

- Another way to solve this problem is hiding external components (esp. the underlying table/collection view) from the fact that `reloadData`is broken down into a series of deletions and insertions. What it means is that, while making changes to the data set, we don't notify `ASDataControllerDelegate` at all. Then once we finished loading all cells, the delegate will be notified about a single atomic reload operation.

I believe either of these solutions can eliminate the flash. Although it will make developers less likely to do batch update :(

cc @Adlai-Holler @maicki @garrettmoon @appleguy ",nguyenhuy,garrettmoon
2536,2016-11-02 19:30:40,"So I’ve been thinking about ways to eliminate, or at least minimize, flashes caused by `reloadData`. This is one of the top complaints from developers that are new to the framework. I have a couple of solutions in mind and would love to start a discussion here:

- Cell node prioritization:
  - I reckon one of the main causes of flashing is due to the fact that new cell nodes are initialized and laid out linearly, meaning they are handled from first to last index. Instead, we should have prioritized them based on the ranges. Nodes in visible range should be handled first, followed by the ones in fetch data range and so on. We can even block main thread while dealing with the highest priority nodes (i.e. visible ones).
  - One possible issue with this technique is that it needs to maintain content offset of the scroll view. In other words, we need to keep a static viewport while deleting/inserting nodes. 
  - This solution maybe easier to implement once virtualization is supported, or maybe a step toward virtualization.

- Another way to solve this problem is hiding external components (esp. the underlying table/collection view) from the fact that `reloadData`is broken down into a series of deletions and insertions. What it means is that, while making changes to the data set, we don't notify `ASDataControllerDelegate` at all. Then once we finished loading all cells, the delegate will be notified about a single atomic reload operation.

I believe either of these solutions can eliminate the flash. Although it will make developers less likely to do batch update :(

cc @Adlai-Holler @maicki @garrettmoon @appleguy ",nguyenhuy,appleguy
2536,2016-11-02 19:30:40,"So I’ve been thinking about ways to eliminate, or at least minimize, flashes caused by `reloadData`. This is one of the top complaints from developers that are new to the framework. I have a couple of solutions in mind and would love to start a discussion here:

- Cell node prioritization:
  - I reckon one of the main causes of flashing is due to the fact that new cell nodes are initialized and laid out linearly, meaning they are handled from first to last index. Instead, we should have prioritized them based on the ranges. Nodes in visible range should be handled first, followed by the ones in fetch data range and so on. We can even block main thread while dealing with the highest priority nodes (i.e. visible ones).
  - One possible issue with this technique is that it needs to maintain content offset of the scroll view. In other words, we need to keep a static viewport while deleting/inserting nodes. 
  - This solution maybe easier to implement once virtualization is supported, or maybe a step toward virtualization.

- Another way to solve this problem is hiding external components (esp. the underlying table/collection view) from the fact that `reloadData`is broken down into a series of deletions and insertions. What it means is that, while making changes to the data set, we don't notify `ASDataControllerDelegate` at all. Then once we finished loading all cells, the delegate will be notified about a single atomic reload operation.

I believe either of these solutions can eliminate the flash. Although it will make developers less likely to do batch update :(

cc @Adlai-Holler @maicki @garrettmoon @appleguy ",nguyenhuy,maicki
2536,2016-11-02 19:30:40,"So I’ve been thinking about ways to eliminate, or at least minimize, flashes caused by `reloadData`. This is one of the top complaints from developers that are new to the framework. I have a couple of solutions in mind and would love to start a discussion here:

- Cell node prioritization:
  - I reckon one of the main causes of flashing is due to the fact that new cell nodes are initialized and laid out linearly, meaning they are handled from first to last index. Instead, we should have prioritized them based on the ranges. Nodes in visible range should be handled first, followed by the ones in fetch data range and so on. We can even block main thread while dealing with the highest priority nodes (i.e. visible ones).
  - One possible issue with this technique is that it needs to maintain content offset of the scroll view. In other words, we need to keep a static viewport while deleting/inserting nodes. 
  - This solution maybe easier to implement once virtualization is supported, or maybe a step toward virtualization.

- Another way to solve this problem is hiding external components (esp. the underlying table/collection view) from the fact that `reloadData`is broken down into a series of deletions and insertions. What it means is that, while making changes to the data set, we don't notify `ASDataControllerDelegate` at all. Then once we finished loading all cells, the delegate will be notified about a single atomic reload operation.

I believe either of these solutions can eliminate the flash. Although it will make developers less likely to do batch update :(

cc @Adlai-Holler @maicki @garrettmoon @appleguy ",nguyenhuy,Adlai-Holler
2536,2016-11-14 21:35:29,"@nguyenhuy does @Adlai-Holler 's PR address this? Can it be closed?
",garrettmoon,Adlai-Holler
2535,2016-11-02 15:23:57,"Subnode hierarchy management within `ASDisplayNode` uses different paths for adding, modifying the subnode hierarchy. While looking into that it was harder to understand what is actually going on in  each phase.

Let's consolidate and cleanup the situation and have one central place to add and modify the subnode hierarchy.

As it's also a hot path let's remove the overhead of creating a block while dispatching adding / removing views / layers as they should run on the main thread anyway and we have them so there are not problems in production.

@Adlai-Holler @appleguy @nguyenhuy Ready for review",maicki,nguyenhuy
2535,2016-11-02 15:23:57,"Subnode hierarchy management within `ASDisplayNode` uses different paths for adding, modifying the subnode hierarchy. While looking into that it was harder to understand what is actually going on in  each phase.

Let's consolidate and cleanup the situation and have one central place to add and modify the subnode hierarchy.

As it's also a hot path let's remove the overhead of creating a block while dispatching adding / removing views / layers as they should run on the main thread anyway and we have them so there are not problems in production.

@Adlai-Holler @appleguy @nguyenhuy Ready for review",maicki,appleguy
2535,2016-11-02 15:23:57,"Subnode hierarchy management within `ASDisplayNode` uses different paths for adding, modifying the subnode hierarchy. While looking into that it was harder to understand what is actually going on in  each phase.

Let's consolidate and cleanup the situation and have one central place to add and modify the subnode hierarchy.

As it's also a hot path let's remove the overhead of creating a block while dispatching adding / removing views / layers as they should run on the main thread anyway and we have them so there are not problems in production.

@Adlai-Holler @appleguy @nguyenhuy Ready for review",maicki,Adlai-Holler
2535,2016-11-03 00:09:35,"@Adlai-Holler Addressed all comments
",maicki,Adlai-Holler
2529,2016-11-15 00:53:04,"This would be awesome to get into 2.0, @Adlai-Holler do you have a sense on how much effort that would be? Should it be punted to 2.0.1 or 2.1?
",garrettmoon,Adlai-Holler
2523,2016-11-01 14:53:15,"I was debugging using asciiArtString but I found some inconsistencies and a crash. This PR fixes that, if it's possible @hannahmbanana could you check if this fixes #2500 since I don't have your test case?",george-gw,hannahmbanana
2522,2016-11-01 03:31:06,"While going through our Swift example I discovered some strange behavior if a UIActivityIndicatorView is wrapped in a node via a view block. If the node is get a specific size via `style.preferredSize` it will just show up as a black box.
After looking into it a bit more it seems it has the same problems as an `UIImageView` and it’s not safe to clear the contents of the layer of the view and recreate it by calling `setNeedsDisplay`.

@appleguy @garrettmoon  @Adlai-Holler  Ready for review",maicki,garrettmoon
2522,2016-11-01 03:31:06,"While going through our Swift example I discovered some strange behavior if a UIActivityIndicatorView is wrapped in a node via a view block. If the node is get a specific size via `style.preferredSize` it will just show up as a black box.
After looking into it a bit more it seems it has the same problems as an `UIImageView` and it’s not safe to clear the contents of the layer of the view and recreate it by calling `setNeedsDisplay`.

@appleguy @garrettmoon  @Adlai-Holler  Ready for review",maicki,appleguy
2522,2016-11-01 03:31:06,"While going through our Swift example I discovered some strange behavior if a UIActivityIndicatorView is wrapped in a node via a view block. If the node is get a specific size via `style.preferredSize` it will just show up as a black box.
After looking into it a bit more it seems it has the same problems as an `UIImageView` and it’s not safe to clear the contents of the layer of the view and recreate it by calling `setNeedsDisplay`.

@appleguy @garrettmoon  @Adlai-Holler  Ready for review",maicki,Adlai-Holler
2516,2016-10-31 21:14:19,"Thanks for the review @garrettmoon!
",Adlai-Holler,garrettmoon
2514,2016-10-31 21:25:53,"@garrettmoon Addressed all comments

@garrettmoon  @Adlai-Holler  You give it another look. Thanks
",maicki,garrettmoon
2514,2016-10-31 21:25:53,"@garrettmoon Addressed all comments

@garrettmoon  @Adlai-Holler  You give it another look. Thanks
",maicki,Adlai-Holler
2511,2016-10-30 18:42:06,"Resolves #2509 

This also fixes an issue where the shadowing was applied _twice_ – once in ASTextNode.drawRect:withParameters: and again inside ASTextKitRenderer. Along with the small resource penalty, this caused drawing metrics to be wrong in some cases for shadowed text.

Ready for review @appleguy @maicki @nguyenhuy !
",Adlai-Holler,nguyenhuy
2511,2016-10-30 18:42:06,"Resolves #2509 

This also fixes an issue where the shadowing was applied _twice_ – once in ASTextNode.drawRect:withParameters: and again inside ASTextKitRenderer. Along with the small resource penalty, this caused drawing metrics to be wrong in some cases for shadowed text.

Ready for review @appleguy @maicki @nguyenhuy !
",Adlai-Holler,appleguy
2511,2016-10-30 18:42:06,"Resolves #2509 

This also fixes an issue where the shadowing was applied _twice_ – once in ASTextNode.drawRect:withParameters: and again inside ASTextKitRenderer. Along with the small resource penalty, this caused drawing metrics to be wrong in some cases for shadowed text.

Ready for review @appleguy @maicki @nguyenhuy !
",Adlai-Holler,maicki
2507,2016-10-28 23:20:09,"@Adlai-Holler @garrettmoon  Can I get a review please
",maicki,garrettmoon
2507,2016-10-28 23:20:09,"@Adlai-Holler @garrettmoon  Can I get a review please
",maicki,Adlai-Holler
2506,2016-10-28 22:20:11,"This is a diff that I developed with @chrisdanford – it resolves #2501.
- Only call `beginUpdates/endUpdates` if the node's height changed as a result of remeasuring against content view.
- Subtract section index frame from bounds-width when determining the row width. Otherwise, when the cell comes on screen, it's going to have to synchronously remeasure.
- Fix an unrelated issue where if you call `ASTableNode.numberOfSections` before the first layout, it'll reload data with `_nodesConstrainedWidth = 0` and all the rows will get measured against 0 which is less than ideal.

@chrisdanford Would you be willing to download this as a patch and try it against Pinterest to make sure that I haven't regressed anything since the last profiling?
",Adlai-Holler,chrisdanford
2501,2016-10-28 18:29:52,"When using a section index with a table node, there is extra overhead because the constrained size used to measure the node in advance doesn't match the content size of the resulting cell.

For instance, if the table is 320 wide, and the index is 15 wide, the node will be initially measured against 320 and when it appears on screen it will have to be remeasured against 305. The remeasure also requires a table view -beginUpdates/-endUpdates call which also takes time.

I already have a diff for this that @chrisdanford has tested and it works great!
",Adlai-Holler,chrisdanford
2499,2016-10-28 15:55:46,"Thanks @Draveness - That's good to know as maybe other developers from China are not be able to see the page.

cc @Adlai-Holler @hannahmbanana 
",maicki,hannahmbanana
2499,2016-10-28 15:55:46,"Thanks @Draveness - That's good to know as maybe other developers from China are not be able to see the page.

cc @Adlai-Holler @hannahmbanana 
",maicki,Adlai-Holler
2499,2016-11-15 21:35:44,"@appleguy can you provide any guidance on how we could resolve this?
",garrettmoon,appleguy
2485,2016-10-26 23:43:17,"We can't prevent UIKit from calling these methods on self but users should virtually never call methods like these on ASTableView/ASCollectionView, and we shouldn't override them.



It will be a bummer for developers, but the index paths just won't line up – it's part of the asynchronous nature of table node and collection node. @george-gw Would you be willing to implement the methods above, using `convertIndexPathFromTableNode:`? 
- [ ] Implement replacement methods
- [ ] Deprecate original methods

Thoughts @appleguy @maicki @garrettmoon ?
",Adlai-Holler,garrettmoon
2485,2016-10-26 23:43:17,"We can't prevent UIKit from calling these methods on self but users should virtually never call methods like these on ASTableView/ASCollectionView, and we shouldn't override them.



It will be a bummer for developers, but the index paths just won't line up – it's part of the asynchronous nature of table node and collection node. @george-gw Would you be willing to implement the methods above, using `convertIndexPathFromTableNode:`? 
- [ ] Implement replacement methods
- [ ] Deprecate original methods

Thoughts @appleguy @maicki @garrettmoon ?
",Adlai-Holler,george-gw
2485,2016-10-26 23:43:17,"We can't prevent UIKit from calling these methods on self but users should virtually never call methods like these on ASTableView/ASCollectionView, and we shouldn't override them.



It will be a bummer for developers, but the index paths just won't line up – it's part of the asynchronous nature of table node and collection node. @george-gw Would you be willing to implement the methods above, using `convertIndexPathFromTableNode:`? 
- [ ] Implement replacement methods
- [ ] Deprecate original methods

Thoughts @appleguy @maicki @garrettmoon ?
",Adlai-Holler,appleguy
2485,2016-10-26 23:43:17,"We can't prevent UIKit from calling these methods on self but users should virtually never call methods like these on ASTableView/ASCollectionView, and we shouldn't override them.



It will be a bummer for developers, but the index paths just won't line up – it's part of the asynchronous nature of table node and collection node. @george-gw Would you be willing to implement the methods above, using `convertIndexPathFromTableNode:`? 
- [ ] Implement replacement methods
- [ ] Deprecate original methods

Thoughts @appleguy @maicki @garrettmoon ?
",Adlai-Holler,maicki
2484,2016-10-26 22:42:21,"@Adlai-Holler @appleguy Ready for review
",maicki,appleguy
2484,2016-10-26 22:42:21,"@Adlai-Holler @appleguy Ready for review
",maicki,Adlai-Holler
2480,2016-10-26 17:45:00,"@Adlai-Holler Ready for review
",maicki,Adlai-Holler
2478,2016-10-26 16:02:07,"@Adlai-Holler Could you give that a look please
",maicki,Adlai-Holler
2470,2016-10-25 16:14:58,"@rcancro Hey Ricky, could you please give that a first review pass. Furthermore do know of any other case where we could bypass the baseline pass? Thanks!
",maicki,rcancro
2470,2016-10-30 18:53:05,"@rcancro @appleguy Thanks for reviewing! I will let the variable name for now as it is as we use this name all in the stack layout spec components from the beginning on. We could address it in a follow up PR, it would add some noise that is not really related to the task to this PR.

Will merge as soon as CI finished.
",maicki,rcancro
2465,2016-10-24 01:42:40,"In regards to the change from `ASLayoutable` to `ASLayoutElement`, I was thinking that the old name was actually more in line with Apple's naming conventions regarding protocols in the Swift standard library.  (I also thought it was more expressive but that could just be me.)

It seems the standard library protocols follow one of three patterns:
1) Hashable, Equatable, Comparable etc imply a conforming objects acts a certain way
2) CollectionType, IntegerType, BooleanType imply an object is in a certain family of types
3) FloatLiteralConvertible, ArrayLiteralConvertible etc imply an object can be converted to or from a certain type.

To me that this protocol falls into the -able category in that it describes objects that can act a certain way.

Of course, conforming to this convention may not be a priority for ASDK, but it seems like it might be nice for at least public facing protocols to be in line with Swifty stuff unless there was a reason not to.

Let me know what you guys think! Just figured I'd throw it out there.
@appleguy @maicki 
",lappp9,appleguy
2465,2016-10-24 01:42:40,"In regards to the change from `ASLayoutable` to `ASLayoutElement`, I was thinking that the old name was actually more in line with Apple's naming conventions regarding protocols in the Swift standard library.  (I also thought it was more expressive but that could just be me.)

It seems the standard library protocols follow one of three patterns:
1) Hashable, Equatable, Comparable etc imply a conforming objects acts a certain way
2) CollectionType, IntegerType, BooleanType imply an object is in a certain family of types
3) FloatLiteralConvertible, ArrayLiteralConvertible etc imply an object can be converted to or from a certain type.

To me that this protocol falls into the -able category in that it describes objects that can act a certain way.

Of course, conforming to this convention may not be a priority for ASDK, but it seems like it might be nice for at least public facing protocols to be in line with Swifty stuff unless there was a reason not to.

Let me know what you guys think! Just figured I'd throw it out there.
@appleguy @maicki 
",lappp9,maicki
2465,2016-10-24 03:31:19,"You make a great point @lappp9. 

The ASDK team really (and I mean _REALLY_) cares about naming conventions, but we got pretty side-tracked with debating the naming of this element just last week and I'm not sure anyone has the heart to do it again. :D 

cc @garrettmoon @Adlai-Holler 
",hannahmbanana,garrettmoon
2465,2016-10-24 03:31:19,"You make a great point @lappp9. 

The ASDK team really (and I mean _REALLY_) cares about naming conventions, but we got pretty side-tracked with debating the naming of this element just last week and I'm not sure anyone has the heart to do it again. :D 

cc @garrettmoon @Adlai-Holler 
",hannahmbanana,Adlai-Holler
2458,2016-10-21 18:47:28,"@Adlai-Holler 
",hannahmbanana,Adlai-Holler
2456,2016-10-24 11:55:34,"@hannahmbanana @Adlai-Holler Thank you for your support. Meantime I managed to fix all CI issues.
",tamaskarai,Adlai-Holler
2456,2016-10-26 10:08:15,"Hi @Adlai-Holler ! I implemented the changes you've requested and answered on your comments. Would you mind reviewing it again?  Thanks!
",tamaskarai,Adlai-Holler
2456,2016-10-27 15:10:45,"@Adlai-Holler Thanks for the feedback on how to further improve the readability of this code. I didn't really use that all operations made on an `NSMutableOrderedSet` makes sure to store the same object only once. Most of the complex logic is now simplified.
",tamaskarai,Adlai-Holler
2456,2016-11-03 22:14:57,"@appleguy Thank you for suggesting such great improvements. I'll go through these and implement them. I'll create a PR once I'm ready.
",tamaskarai,appleguy
2452,2016-10-24 03:22:28,"@Adlai-Holler - ready for final review. 
",hannahmbanana,Adlai-Holler
2451,2016-10-21 01:37:37,"@Adlai-Holler: Any reason we don't want to expose this on ASCollectionView and pass to the ASCollectionNode?
",hannahmbanana,Adlai-Holler
2450,2016-10-24 16:32:55,"@george-gw Landed a diff to add this API.

I'm open to discussion, but I'm toying with the idea of deprecating the view versions of these methods. The view versions should take view index paths, but users should never be dealing with view index paths and they're much more likely to not understand that distinction, and to call `tableView selectRowAtIndexPath:` and not know why it doesn't work as expected. cc @maicki @levi @appleguy @garrettmoon 
",Adlai-Holler,levi
2450,2016-10-24 16:32:55,"@george-gw Landed a diff to add this API.

I'm open to discussion, but I'm toying with the idea of deprecating the view versions of these methods. The view versions should take view index paths, but users should never be dealing with view index paths and they're much more likely to not understand that distinction, and to call `tableView selectRowAtIndexPath:` and not know why it doesn't work as expected. cc @maicki @levi @appleguy @garrettmoon 
",Adlai-Holler,george-gw
2450,2016-10-24 16:32:55,"@george-gw Landed a diff to add this API.

I'm open to discussion, but I'm toying with the idea of deprecating the view versions of these methods. The view versions should take view index paths, but users should never be dealing with view index paths and they're much more likely to not understand that distinction, and to call `tableView selectRowAtIndexPath:` and not know why it doesn't work as expected. cc @maicki @levi @appleguy @garrettmoon 
",Adlai-Holler,appleguy
2450,2016-10-24 16:32:55,"@george-gw Landed a diff to add this API.

I'm open to discussion, but I'm toying with the idea of deprecating the view versions of these methods. The view versions should take view index paths, but users should never be dealing with view index paths and they're much more likely to not understand that distinction, and to call `tableView selectRowAtIndexPath:` and not know why it doesn't work as expected. cc @maicki @levi @appleguy @garrettmoon 
",Adlai-Holler,maicki
2450,2016-10-24 16:32:55,"@george-gw Landed a diff to add this API.

I'm open to discussion, but I'm toying with the idea of deprecating the view versions of these methods. The view versions should take view index paths, but users should never be dealing with view index paths and they're much more likely to not understand that distinction, and to call `tableView selectRowAtIndexPath:` and not know why it doesn't work as expected. cc @maicki @levi @appleguy @garrettmoon 
",Adlai-Holler,garrettmoon
2450,2016-10-27 02:20:14,"The continuation work will be done in #2485. Thanks @george-gw !
",Adlai-Holler,george-gw
2449,2016-10-21 01:15:42,"@Adlai-Holler: another review please? :)
",hannahmbanana,Adlai-Holler
2449,2016-10-24 02:29:34,"@Adlai-Holler @maicki - needs final review
",hannahmbanana,maicki
2449,2016-10-24 02:29:34,"@Adlai-Holler @maicki - needs final review
",hannahmbanana,Adlai-Holler
2438,2016-10-19 21:34:34,"@appleguy @maicki @johnepinterest ready for review!
",Adlai-Holler,johnepinterest
2438,2016-10-19 21:34:34,"@appleguy @maicki @johnepinterest ready for review!
",Adlai-Holler,appleguy
2438,2016-10-19 21:34:34,"@appleguy @maicki @johnepinterest ready for review!
",Adlai-Holler,maicki
2434,2016-10-19 18:22:39,"We used Ship as our internal issue tracker for a while. It didn't really provide enough value and it raised barriers to community entry so we're going to move everything to GitHub, in the open.

We should migrate any tasks that are still relevant from Ship and close the Ship account so we can all move on. This is somewhat low-priority compared to the critical 2.0 migration work we're all doing but it will be a nice, clean break.

cc @maicki @hannahmbanana @appleguy @garrettmoon 
",Adlai-Holler,garrettmoon
2434,2016-10-19 18:22:39,"We used Ship as our internal issue tracker for a while. It didn't really provide enough value and it raised barriers to community entry so we're going to move everything to GitHub, in the open.

We should migrate any tasks that are still relevant from Ship and close the Ship account so we can all move on. This is somewhat low-priority compared to the critical 2.0 migration work we're all doing but it will be a nice, clean break.

cc @maicki @hannahmbanana @appleguy @garrettmoon 
",Adlai-Holler,appleguy
2434,2016-10-19 18:22:39,"We used Ship as our internal issue tracker for a while. It didn't really provide enough value and it raised barriers to community entry so we're going to move everything to GitHub, in the open.

We should migrate any tasks that are still relevant from Ship and close the Ship account so we can all move on. This is somewhat low-priority compared to the critical 2.0 migration work we're all doing but it will be a nice, clean break.

cc @maicki @hannahmbanana @appleguy @garrettmoon 
",Adlai-Holler,maicki
2434,2016-10-19 18:22:39,"We used Ship as our internal issue tracker for a while. It didn't really provide enough value and it raised barriers to community entry so we're going to move everything to GitHub, in the open.

We should migrate any tasks that are still relevant from Ship and close the Ship account so we can all move on. This is somewhat low-priority compared to the critical 2.0 migration work we're all doing but it will be a nice, clean break.

cc @maicki @hannahmbanana @appleguy @garrettmoon 
",Adlai-Holler,hannahmbanana
2434,2016-11-14 21:42:39,"@hannahmbanana is this completed? Can we close?
",garrettmoon,hannahmbanana
2431,2016-10-19 18:58:03,"@tomizimobile Yep just confirmed it. Sample project:

[NodeSwiftDeallocTest.zip](https://github.com/facebook/AsyncDisplayKit/files/539933/NodeSwiftDeallocTest.zip)

I can't investigate it immediately but cc #2223 @johnepinterest @appleguy for the time being. 
",Adlai-Holler,johnepinterest
2431,2016-10-19 18:58:03,"@tomizimobile Yep just confirmed it. Sample project:

[NodeSwiftDeallocTest.zip](https://github.com/facebook/AsyncDisplayKit/files/539933/NodeSwiftDeallocTest.zip)

I can't investigate it immediately but cc #2223 @johnepinterest @appleguy for the time being. 
",Adlai-Holler,appleguy
2425,2016-10-27 08:32:16,"@Adlai-Holler yeah it happens occasionally.

Solutions that might work:
- Restart Xcode
- Stop/start the playground

Xcode/Playground don't seem to be that stable to be honest, but when it works, it's pretty useful!
",george-gw,Adlai-Holler
2423,2016-10-19 01:56:58,"cc @appleguy @maicki @garrettmoon 
",Adlai-Holler,garrettmoon
2423,2016-10-19 01:56:58,"cc @appleguy @maicki @garrettmoon 
",Adlai-Holler,appleguy
2423,2016-10-19 01:56:58,"cc @appleguy @maicki @garrettmoon 
",Adlai-Holler,maicki
2421,2016-10-18 22:01:00,"Currently we use `__attribute__((deprecated))` which is nice because it's very broadly supported. But it doesn't allow for a deprecation message.

The `__deprecated_msg(""Use performBatchUpdates:completion: instead."")` specifier is supported by enough compilers – I don't know the specifics but Xcode 7 and 8 for sure – and it might ease the transition significantly.

This would also replace our use of the `@deprecated` documentation comment specifier, which is not supported outside of Apple. I'm pretty sure that `__deprecated_msg` will show up in the documentation if you set it.

We could migrate piecemeal, having a series of diffs to add messages to chunks of deprecations at a time.

Thoughts @garrettmoon @maicki @appleguy ?
",Adlai-Holler,garrettmoon
2421,2016-10-18 22:01:00,"Currently we use `__attribute__((deprecated))` which is nice because it's very broadly supported. But it doesn't allow for a deprecation message.

The `__deprecated_msg(""Use performBatchUpdates:completion: instead."")` specifier is supported by enough compilers – I don't know the specifics but Xcode 7 and 8 for sure – and it might ease the transition significantly.

This would also replace our use of the `@deprecated` documentation comment specifier, which is not supported outside of Apple. I'm pretty sure that `__deprecated_msg` will show up in the documentation if you set it.

We could migrate piecemeal, having a series of diffs to add messages to chunks of deprecations at a time.

Thoughts @garrettmoon @maicki @appleguy ?
",Adlai-Holler,appleguy
2421,2016-10-18 22:01:00,"Currently we use `__attribute__((deprecated))` which is nice because it's very broadly supported. But it doesn't allow for a deprecation message.

The `__deprecated_msg(""Use performBatchUpdates:completion: instead."")` specifier is supported by enough compilers – I don't know the specifics but Xcode 7 and 8 for sure – and it might ease the transition significantly.

This would also replace our use of the `@deprecated` documentation comment specifier, which is not supported outside of Apple. I'm pretty sure that `__deprecated_msg` will show up in the documentation if you set it.

We could migrate piecemeal, having a series of diffs to add messages to chunks of deprecations at a time.

Thoughts @garrettmoon @maicki @appleguy ?
",Adlai-Holler,maicki
2418,2016-10-18 21:00:43,"Currently we are running two CIs, Travis (public) and Jenkins (on a Pinterest server).

They both use Xcode 8, and they are both [failing](https://travis-ci.org/facebook/AsyncDisplayKit/builds/168663807) [spuriously](https://travis-ci.org/facebook/AsyncDisplayKit/jobs/168392736). Relevant issues are https://github.com/travis-ci/travis-ci/issues/6422 and https://github.com/travis-ci/travis-ci/issues/6675 and https://github.com/travis-ci/travis-ci/issues/6251.

I think we should revert to Xcode 7 in .travis.yml and potentially disable Jenkins or update our build servers to support Xcode 7 as well.

@appleguy Are you willing to take this on?
",Adlai-Holler,appleguy
2418,2016-10-21 16:47:55,"@hannahmbanana just learned that Travis does not support paid-tier access for open source repos. So Travis builds may continue to take up to 12 hours to start forever.

Between that and the failures it has, we should try CircleCI and stop work on #2440. Created #2455.
",Adlai-Holler,hannahmbanana
2417,2016-10-18 20:01:39,"Either we should have 3x images for all our snapshot test images or for no. Let's remove them all for now.

cc @Adlai-Holler 
",maicki,Adlai-Holler
2415,2016-10-18 17:17:32,"@Adlai-Holler ^
",garrettmoon,Adlai-Holler
2413,2016-10-18 15:09:26,"- Move `ASLayoutElement` properties to use std::atomic
- Remove some `objc_msgSend` and locking overhead for sizing properties

@appleguy Let's give it a try and let me know
",maicki,appleguy
2413,2016-10-18 18:21:21,"@maicki very interesting test, thanks!  This definitely had the intended benefit.  I think we could land this; I'm excited about during further work here, but let's hold off until next week / after the migration is finalized.
- @Adlai-Holler, @garrettmoon for context.  I modified the layout benchmark to be more discrete / reproducible, by changing the array that specifies view counts to be [100, 100, 100].

Running this benchmark on my iPhone 7 / A10, the cost associated with accessing the Style properties _other than .size, which is still locked_ has disappeared.  Accessing the style object itself also is still locked and is the largest single locking cost.

Images below:
1. Before cost (**73ms**) for properties on the style object (run 2 of 2 was the before / without the patch)
2. After cost (**17ms**) for properties on the style object (run 1 of 2)
2. Cost (**64ms**) (same before / after) of accessing the style object itself, through the lock.

<img width=""774"" alt=""screen shot 2016-10-18 at 11 11 30 am"" src=""https://cloud.githubusercontent.com/assets/565251/19490588/935441f8-9524-11e6-9fbe-5dee242b423a.png"">
<img width=""758"" alt=""screen shot 2016-10-18 at 11 14 11 am"" src=""https://cloud.githubusercontent.com/assets/565251/19490599/a57df87e-9524-11e6-891d-3459348cc2f3.png"">
<img width=""779"" alt=""screen shot 2016-10-18 at 11 16 53 am"" src=""https://cloud.githubusercontent.com/assets/565251/19490635/cb68b7b8-9524-11e6-8e03-2a463f6bcddf.png"">
",appleguy,garrettmoon
2413,2016-10-18 18:21:21,"@maicki very interesting test, thanks!  This definitely had the intended benefit.  I think we could land this; I'm excited about during further work here, but let's hold off until next week / after the migration is finalized.
- @Adlai-Holler, @garrettmoon for context.  I modified the layout benchmark to be more discrete / reproducible, by changing the array that specifies view counts to be [100, 100, 100].

Running this benchmark on my iPhone 7 / A10, the cost associated with accessing the Style properties _other than .size, which is still locked_ has disappeared.  Accessing the style object itself also is still locked and is the largest single locking cost.

Images below:
1. Before cost (**73ms**) for properties on the style object (run 2 of 2 was the before / without the patch)
2. After cost (**17ms**) for properties on the style object (run 1 of 2)
2. Cost (**64ms**) (same before / after) of accessing the style object itself, through the lock.

<img width=""774"" alt=""screen shot 2016-10-18 at 11 11 30 am"" src=""https://cloud.githubusercontent.com/assets/565251/19490588/935441f8-9524-11e6-9fbe-5dee242b423a.png"">
<img width=""758"" alt=""screen shot 2016-10-18 at 11 14 11 am"" src=""https://cloud.githubusercontent.com/assets/565251/19490599/a57df87e-9524-11e6-891d-3459348cc2f3.png"">
<img width=""779"" alt=""screen shot 2016-10-18 at 11 16 53 am"" src=""https://cloud.githubusercontent.com/assets/565251/19490635/cb68b7b8-9524-11e6-8e03-2a463f6bcddf.png"">
",appleguy,Adlai-Holler
2412,2016-10-18 15:27:56,"Thank you so much for hopping on this! @maicki and I were just commenting on how awesome it is that the community quickly fixes issues we (me) cause!
",garrettmoon,maicki
2411,2016-10-19 08:01:22,"@appleguy This is simply more consistent based on the behavior that I understood from the initial code.

The toggle is just a temporary visual representation to show the user what field they're changing, I think it might be useful to some, the design could be nicer, but I doubt that is the purpose of this project at this time :)

I will submit another PR for the Swift playground!
",george-gw,appleguy
2409,2016-10-17 22:47:10,"worth it? Pinterest reads `.preferredFrameSize` quite a bit. 

@maicki @Adlai-Holler 
",hannahmbanana,maicki
2409,2016-10-17 22:47:10,"worth it? Pinterest reads `.preferredFrameSize` quite a bit. 

@maicki @Adlai-Holler 
",hannahmbanana,Adlai-Holler
2408,2016-10-17 22:31:38,"Yeah @garrettmoon on second thought, let's disable this in production for now. If we see a bunch of crashes that seem like they'd be related, we'll consider turning it on. Updating the diff, will merge if CI passes.
",Adlai-Holler,garrettmoon
2402,2016-10-26 15:27:52,"@Adlai-Holler @appleguy @hannahmbanana  Any thoughts on merging? Otherwise let's close it if you think it's not worth it ...
",maicki,appleguy
2402,2016-10-26 15:27:52,"@Adlai-Holler @appleguy @hannahmbanana  Any thoughts on merging? Otherwise let's close it if you think it's not worth it ...
",maicki,hannahmbanana
2402,2016-10-26 15:27:52,"@Adlai-Holler @appleguy @hannahmbanana  Any thoughts on merging? Otherwise let's close it if you think it's not worth it ...
",maicki,Adlai-Holler
2402,2016-10-26 20:39:10,"@Adlai-Holler Rebased
",maicki,Adlai-Holler
2399,2016-10-16 20:53:11,"This measurably reduces block overhead and context switching.  In the layout benchmark, it increases ops/s while actually reducing CPU utilization.

This suggests that we are now at a lock-bounded local maximum, at least for tri-core devices.

@maicki @Adlai-Holler @garrettmoon first two screenshots give context on the nature of the costs before, and the new one is after (ms are comparable in this case).  Utilization peaked at 300% previously and now is closer to 210%.

<img width=""630"" alt=""screen shot 2016-10-16 at 12 27 00 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19420782/dcf24978-93a7-11e6-88b4-cc5c9cd6e15a.png"">

<img width=""704"" alt=""screen shot 2016-10-16 at 12 27 16 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19420784/dd0f488e-93a7-11e6-8442-dec7c2ffdcea.png"">

<img width=""1001"" alt=""screen shot 2016-10-16 at 1 30 19 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19420783/dd0c94e0-93a7-11e6-9680-d8dab66cbf9f.png"">
",appleguy,garrettmoon
2399,2016-10-16 20:53:11,"This measurably reduces block overhead and context switching.  In the layout benchmark, it increases ops/s while actually reducing CPU utilization.

This suggests that we are now at a lock-bounded local maximum, at least for tri-core devices.

@maicki @Adlai-Holler @garrettmoon first two screenshots give context on the nature of the costs before, and the new one is after (ms are comparable in this case).  Utilization peaked at 300% previously and now is closer to 210%.

<img width=""630"" alt=""screen shot 2016-10-16 at 12 27 00 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19420782/dcf24978-93a7-11e6-88b4-cc5c9cd6e15a.png"">

<img width=""704"" alt=""screen shot 2016-10-16 at 12 27 16 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19420784/dd0f488e-93a7-11e6-8442-dec7c2ffdcea.png"">

<img width=""1001"" alt=""screen shot 2016-10-16 at 1 30 19 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19420783/dd0c94e0-93a7-11e6-9680-d8dab66cbf9f.png"">
",appleguy,maicki
2399,2016-10-16 20:53:11,"This measurably reduces block overhead and context switching.  In the layout benchmark, it increases ops/s while actually reducing CPU utilization.

This suggests that we are now at a lock-bounded local maximum, at least for tri-core devices.

@maicki @Adlai-Holler @garrettmoon first two screenshots give context on the nature of the costs before, and the new one is after (ms are comparable in this case).  Utilization peaked at 300% previously and now is closer to 210%.

<img width=""630"" alt=""screen shot 2016-10-16 at 12 27 00 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19420782/dcf24978-93a7-11e6-88b4-cc5c9cd6e15a.png"">

<img width=""704"" alt=""screen shot 2016-10-16 at 12 27 16 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19420784/dd0f488e-93a7-11e6-8442-dec7c2ffdcea.png"">

<img width=""1001"" alt=""screen shot 2016-10-16 at 1 30 19 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19420783/dd0c94e0-93a7-11e6-9680-d8dab66cbf9f.png"">
",appleguy,Adlai-Holler
2398,2016-10-16 19:26:15,"I haven't profiled this yet, but it should be very safe and quite a nice performance win.

As @appleguy identified in #2392, there's a lot of headroom in terms of reducing object allocations and `weak` object handling.

I removed the `flattened` flag because I don't believe it serves a purpose. During the filtering, we only travel _down_ the tree. In the prior implementation, we only marked the newly-copied ASLayout objects as `flattened` so it's impossible that we would encounter a flattened layout as we traverse down the sublayouts.

After this change, the `position` value of the sublayouts will be changed by calling `filteredNodeLayoutTree`. I think this is fine. Nobody cares about the old `position` values.

This needs some profiling!
",Adlai-Holler,appleguy
2397,2016-10-16 18:58:35,"This shows up in benchmarking profiles for layout-bound workloads.

@maicki @Adlai-Holler @garrettmoon 

<img width=""1322"" alt=""screen shot 2016-10-16 at 11 55 42 am"" src=""https://cloud.githubusercontent.com/assets/565251/19420015/d195cc4a-9397-11e6-9089-e8ccac6b25dc.png"">
",appleguy,garrettmoon
2397,2016-10-16 18:58:35,"This shows up in benchmarking profiles for layout-bound workloads.

@maicki @Adlai-Holler @garrettmoon 

<img width=""1322"" alt=""screen shot 2016-10-16 at 11 55 42 am"" src=""https://cloud.githubusercontent.com/assets/565251/19420015/d195cc4a-9397-11e6-9089-e8ccac6b25dc.png"">
",appleguy,maicki
2397,2016-10-16 18:58:35,"This shows up in benchmarking profiles for layout-bound workloads.

@maicki @Adlai-Holler @garrettmoon 

<img width=""1322"" alt=""screen shot 2016-10-16 at 11 55 42 am"" src=""https://cloud.githubusercontent.com/assets/565251/19420015/d195cc4a-9397-11e6-9089-e8ccac6b25dc.png"">
",appleguy,Adlai-Holler
2396,2016-10-16 23:37:08,"@maicki pointed out that it doesn't crash if you disable `.shouldRasterizeDescendants` 

![image](https://cloud.githubusercontent.com/assets/3419380/19421810/736d75c4-93be-11e6-9a1c-16add840e532.png)
",hannahmbanana,maicki
2393,2016-10-18 17:04:48,"@Adlai-Holler Updated screenshots
",maicki,Adlai-Holler
2392,2016-10-16 07:08:38,"@Adlai-Holler @maicki Cool, I have some interesting profiling results.  We are spending an astounding amount of time dealing with the weak variable .layoutElement on ASLayout.

We're also triggering creation of the new .style object even when it is not needed / set to all-default values, but this is nowhere near as significant as the weak variable and general object cost of ASLayout.

This is an **inverted** tree showing the cost of weak, primarily layoutElement, on the powerful A8X over a short period of ~2 seconds of intense work.  The figures are pretty astounding!  The folded aggregations that do exceed weak represent the cost of object allocations in general, but unsure how actionable that is.

If we found an alternative data structure to perform the ASLayout -> ASLayoutElement weak mapping, it could pay off hugely, because of the extreme commonality of these objects (during both initial layout calculation and then flattening).  If we could ensure safety of unsafe_unretained (maybe by having the ASLayoutElement clear its own back-pointer on dealloc), that's one fix.  Perhaps only during the initial layout tree creation, before the longer-lived flattened version is created, there may be a guarantee that the ASLayoutElement will live as long as the ASLayout.

<img width=""1308"" alt=""screen shot 2016-10-16 at 12 03 55 am"" src=""https://cloud.githubusercontent.com/assets/565251/19415885/170bea16-9334-11e6-94a5-449020b355bb.png"">
",appleguy,maicki
2392,2016-10-16 19:12:19,"@appleguy @maicki Awesome find! I notice that in `filteredNodeLayoutTree` we copy all of the display node layouts and change `flattened` and `position` on the copy. 

It seems likely that we can skip this copy. The old `position` value is probably not important to anyone. And `flattened` is only read on the layout's sublayouts in that same method, so unless we have a circular dependency the flag could probably be removed entirely.

Thoughts?
",Adlai-Holler,maicki
2391,2016-10-16 01:27:45,"@appleguy -  other uses of true in the code
",hannahmbanana,appleguy
2390,2016-10-15 23:18:08,"Update examples to conform to the API changes in PR #2372. @Adlai-Holler: ready for review.

@maicki: could you look at the `CatDealsCollectionView` layout? I'm not able to figure out the sizing bug. 
",hannahmbanana,maicki
2390,2016-10-15 23:18:08,"Update examples to conform to the API changes in PR #2372. @Adlai-Holler: ready for review.

@maicki: could you look at the `CatDealsCollectionView` layout? I'm not able to figure out the sizing bug. 
",hannahmbanana,Adlai-Holler
2390,2016-10-21 00:27:42,"@Adlai-Holler: could you review & merge once Travis passes?
",hannahmbanana,Adlai-Holler
2390,2016-10-24 02:33:04,"@Adlai-Holler 
",hannahmbanana,Adlai-Holler
2389,2016-10-15 14:21:44,"@garrettmoon @Adlai-Holler Ready for review

@Adlai-Holler Maybe worth it for this behavior to add a unit test in #2386?
",maicki,garrettmoon
2389,2016-10-15 14:21:44,"@garrettmoon @Adlai-Holler Ready for review

@Adlai-Holler Maybe worth it for this behavior to add a unit test in #2386?
",maicki,Adlai-Holler
2389,2016-10-18 16:39:36,"The alternative would be to remove the whole thing as it's wrong behavior in the first place. I don't think @appleguy will too happy about that though as you know we will get a lot of complaints.
",maicki,appleguy
2389,2016-10-26 15:56:40,"@garrettmoon @Adlai-Holler After looking into it a bit more we should add the assertion we have in here as the whole purpose of the network image node is to load an image from the network with a given URL. That said I'm not really sure if we should actually remove the whole check after 2.0. It kind of reflects the bahavior on the web if the img tag has a src but it's not fully loaded yet.

I tend to either add the assertion from this pull request and remove the comment about removing this check after 2.0 **OR** remove it all completely now.

I think we should make a call soon and either merge this PR or close it based on the decision.
",maicki,garrettmoon
2389,2016-10-26 15:56:40,"@garrettmoon @Adlai-Holler After looking into it a bit more we should add the assertion we have in here as the whole purpose of the network image node is to load an image from the network with a given URL. That said I'm not really sure if we should actually remove the whole check after 2.0. It kind of reflects the bahavior on the web if the img tag has a src but it's not fully loaded yet.

I tend to either add the assertion from this pull request and remove the comment about removing this check after 2.0 **OR** remove it all completely now.

I think we should make a call soon and either merge this PR or close it based on the decision.
",maicki,Adlai-Holler
2387,2016-10-16 00:05:34,"@maicki Nice to have this route available!  Any comments you can add here on what you think we should do?  This would be a pretty significant change, but it's the right time to consider it.

Is there any other advantage besides avoiding the return [ASLayoutSpec layoutSpecWithNode:self] line, and replacing it with return self; ?

I do think that 'size to match parent' easy path is very useful.  If that's the only advantage though, looking at the two names:
- (id<ASLayoutElement>)layoutElementThatFits:
- (ASLayoutSpec *)layoutSpecThatFits:

The layout spec method feels easier to understand.  This isn't just because of the protocol / return value, but because layoutSpec seems to clearly name it is the method to specify layout.  A layoutElement is a bit more vague of a connection - does a layoutElement just exist within a layout, or does it _define_ the layout?

Open to all thoughts and ideas here; let's decide this week.  @garrettmoon @Adlai-Holler @hannahmbanana  @nguyenhuy 
",appleguy,nguyenhuy
2387,2016-10-16 00:05:34,"@maicki Nice to have this route available!  Any comments you can add here on what you think we should do?  This would be a pretty significant change, but it's the right time to consider it.

Is there any other advantage besides avoiding the return [ASLayoutSpec layoutSpecWithNode:self] line, and replacing it with return self; ?

I do think that 'size to match parent' easy path is very useful.  If that's the only advantage though, looking at the two names:
- (id<ASLayoutElement>)layoutElementThatFits:
- (ASLayoutSpec *)layoutSpecThatFits:

The layout spec method feels easier to understand.  This isn't just because of the protocol / return value, but because layoutSpec seems to clearly name it is the method to specify layout.  A layoutElement is a bit more vague of a connection - does a layoutElement just exist within a layout, or does it _define_ the layout?

Open to all thoughts and ideas here; let's decide this week.  @garrettmoon @Adlai-Holler @hannahmbanana  @nguyenhuy 
",appleguy,garrettmoon
2387,2016-10-16 00:05:34,"@maicki Nice to have this route available!  Any comments you can add here on what you think we should do?  This would be a pretty significant change, but it's the right time to consider it.

Is there any other advantage besides avoiding the return [ASLayoutSpec layoutSpecWithNode:self] line, and replacing it with return self; ?

I do think that 'size to match parent' easy path is very useful.  If that's the only advantage though, looking at the two names:
- (id<ASLayoutElement>)layoutElementThatFits:
- (ASLayoutSpec *)layoutSpecThatFits:

The layout spec method feels easier to understand.  This isn't just because of the protocol / return value, but because layoutSpec seems to clearly name it is the method to specify layout.  A layoutElement is a bit more vague of a connection - does a layoutElement just exist within a layout, or does it _define_ the layout?

Open to all thoughts and ideas here; let's decide this week.  @garrettmoon @Adlai-Holler @hannahmbanana  @nguyenhuy 
",appleguy,hannahmbanana
2387,2016-10-16 00:05:34,"@maicki Nice to have this route available!  Any comments you can add here on what you think we should do?  This would be a pretty significant change, but it's the right time to consider it.

Is there any other advantage besides avoiding the return [ASLayoutSpec layoutSpecWithNode:self] line, and replacing it with return self; ?

I do think that 'size to match parent' easy path is very useful.  If that's the only advantage though, looking at the two names:
- (id<ASLayoutElement>)layoutElementThatFits:
- (ASLayoutSpec *)layoutSpecThatFits:

The layout spec method feels easier to understand.  This isn't just because of the protocol / return value, but because layoutSpec seems to clearly name it is the method to specify layout.  A layoutElement is a bit more vague of a connection - does a layoutElement just exist within a layout, or does it _define_ the layout?

Open to all thoughts and ideas here; let's decide this week.  @garrettmoon @Adlai-Holler @hannahmbanana  @nguyenhuy 
",appleguy,Adlai-Holler
2387,2016-10-17 15:12:32,"@appleguy I moved `layoutElementThatFits:` to a beta header. I still think this is the right approach to go for the future as it would allow developers to return any object that conforms to `ASLayoutElement` (program to  interface not implementations). I don't know if we should do more API changes for 2.0 for this so I moved it to a beta header for now ...

Furthermore this PR includes some cleanup internally that would be great to have too.

@Adlai-Holler @appleguy Ready for review.
",maicki,Adlai-Holler
2387,2016-10-24 15:16:10,"@Adlai-Holler @appleguy What do you guys think of merging that in soon (after rebasing) and disable `layoutElementThatFits:` for now in the public API. Besides introducing `layoutElementThatFits:` it also has some nice code cleanup that would be good to have in.
",maicki,Adlai-Holler
2386,2016-10-14 22:55:26,"I found the old logic hard to reason about, and I had no confidence that it behaved ideally. In fact, specifically when the download identifier changed the old download's progress block was not unbound which could have led to drawing the wrong image.

In practice that rarely matters, but this adds our first `ASNetworkImageNode` tests which we desperately need, fixes that issue, and makes the progress image binding logic much much more reliable.

Ready for review @maicki @appleguy 
",Adlai-Holler,appleguy
2386,2016-10-14 22:55:26,"I found the old logic hard to reason about, and I had no confidence that it behaved ideally. In fact, specifically when the download identifier changed the old download's progress block was not unbound which could have led to drawing the wrong image.

In practice that rarely matters, but this adds our first `ASNetworkImageNode` tests which we desperately need, fixes that issue, and makes the progress image binding logic much much more reliable.

Ready for review @maicki @appleguy 
",Adlai-Holler,maicki
2385,2016-10-15 03:47:09,"@Adlai-Holler Re-posting this comment here in case it would have been missed in the ""outdated changes"" section:

Maybe this is a bad idea, but couldn't this also be defined as an NS_ENUM  



Though I'm sure that would need some changes in ASRelativeSpec to make work.
",lappp9,Adlai-Holler
2385,2016-10-16 00:18:23,"@lappp9 Hey Luke, thanks for working on that. There are more substantial problems (in terms of layout logic as it was originally kind of copied from `ASCenterLayoutSpec`) with how `ASRelativeLayoutSpec` is implemented that I'm currently looking into and will follow up with something pretty soon.

cc @appleguy @Adlai-Holler 
",maicki,Adlai-Holler
2385,2016-10-16 00:18:23,"@lappp9 Hey Luke, thanks for working on that. There are more substantial problems (in terms of layout logic as it was originally kind of copied from `ASCenterLayoutSpec`) with how `ASRelativeLayoutSpec` is implemented that I'm currently looking into and will follow up with something pretty soon.

cc @appleguy @Adlai-Holler 
",maicki,appleguy
2383,2016-10-14 06:11:34,"@maicki @Adlai-Holler: ready for review on Monday.
",hannahmbanana,maicki
2383,2016-10-14 06:11:34,"@maicki @Adlai-Holler: ready for review on Monday.
",hannahmbanana,Adlai-Holler
2382,2016-10-14 04:02:32,"Changes:
- fix 2.0 layout deprecation warning
- change flexShrink/flexGrow BOOL to float

@maicki: ready for review on Monday.
",hannahmbanana,maicki
2381,2016-10-14 01:17:56,"…rotocol

ASViewController's default method will not always return the correct scrollable
directions in cases where size changes may not have been applied. This allows
us to ignore this issue for a little while longer by allowing the layout
inspector to explicitly vend this.

@Adlai-Holler, @maicki ready for review
",garrettmoon,maicki
2381,2016-10-14 01:17:56,"…rotocol

ASViewController's default method will not always return the correct scrollable
directions in cases where size changes may not have been applied. This allows
us to ignore this issue for a little while longer by allowing the layout
inspector to explicitly vend this.

@Adlai-Holler, @maicki ready for review
",garrettmoon,Adlai-Holler
2376,2016-10-13 18:13:46,"Ready for review @appleguy @maicki
",Adlai-Holler,appleguy
2376,2016-10-13 18:13:46,"Ready for review @appleguy @maicki
",Adlai-Holler,maicki
2376,2016-10-13 18:37:51,"Thanks @Adlai-Holler!  This may re-introduce a very minor, rare edge case sizing bug - but fixing the performance and thread safety issues is far more important.

@hannahmbanana Let's get this merged into p6.13 and Pinterest updated as well.
",appleguy,hannahmbanana
2375,2016-10-13 17:21:56,"Please take a look @Adlai-Holler 
",garrettmoon,Adlai-Holler
2370,2016-10-13 03:02:31,"Added some more.  @Adlai-Holler the constant values should eventually become defines, but I don't yet have a naming scheme or strategy for assigning them that calls for this yet.  For now, we have these, each with its own color (maxing out the available colors):

0 - ASRunloopQueue
1 - ASRangeController
2 - ASDataController
3 - AsyncDisplay

<img width=""1055"" alt=""screen shot 2016-10-12 at 7 56 57 pm"" src=""https://cloud.githubusercontent.com/assets/565251/19335254/ccffdff6-90b6-11e6-8ea0-9a0dfde0362c.png"">
",appleguy,Adlai-Holler
2369,2016-10-11 23:26:14,"@garrettmoon @Adlai-Holler @appleguy Ready for review
",maicki,garrettmoon
2369,2016-10-11 23:26:14,"@garrettmoon @Adlai-Holler @appleguy Ready for review
",maicki,appleguy
2369,2016-10-11 23:26:14,"@garrettmoon @Adlai-Holler @appleguy Ready for review
",maicki,Adlai-Holler
2368,2016-10-11 07:47:38,"@garrettmoon  ASTextNode “emoji” not drawn in full
",SwordGod,garrettmoon
2366,2016-10-11 03:28:58,"@Adlai-Holler Comments addressed. In fact what do you think about `ASLayoutElementStylability` protocol name at all? I don't really know if this is a great name, but couldn't find a better name for  it yet ...
",maicki,Adlai-Holler
2359,2016-11-15 21:37:41,"@hannahmbanana are you interested in taking this one on?
",garrettmoon,hannahmbanana
2357,2016-10-07 03:12:07,"@garrettmoon @appleguy @Adlai-Holler Can someone please look over this.
",maicki,garrettmoon
2357,2016-10-07 03:12:07,"@garrettmoon @appleguy @Adlai-Holler Can someone please look over this.
",maicki,appleguy
2357,2016-10-07 03:12:07,"@garrettmoon @appleguy @Adlai-Holler Can someone please look over this.
",maicki,Adlai-Holler
2355,2016-10-07 06:56:48,"@maicki: have you run into this or heard any other reports? 
",hannahmbanana,maicki
2352,2016-10-06 18:37:39,"@Adlai-Holler @appleguy @garrettmoon Ready for review
",maicki,garrettmoon
2352,2016-10-06 18:37:39,"@Adlai-Holler @appleguy @garrettmoon Ready for review
",maicki,appleguy
2352,2016-10-06 18:37:39,"@Adlai-Holler @appleguy @garrettmoon Ready for review
",maicki,Adlai-Holler
2351,2016-10-06 18:37:32,"@Adlai-Holler @appleguy @garrettmoon Ready for review
",maicki,garrettmoon
2351,2016-10-06 18:37:32,"@Adlai-Holler @appleguy @garrettmoon Ready for review
",maicki,appleguy
2351,2016-10-06 18:37:32,"@Adlai-Holler @appleguy @garrettmoon Ready for review
",maicki,Adlai-Holler
2351,2016-10-06 20:19:05,"@Adlai-Holler Comments addressed
",maicki,Adlai-Holler
2350,2016-11-21 15:37:38,@hannahmbanana: Looks like #2636 resolves this issue. Please assign this ticket to @maicki. Thanks!,nguyenhuy,maicki
2349,2016-10-06 13:54:30,"@Adlai-Holler @appleguy @levi @garrettmoon  Ready for review
",maicki,levi
2349,2016-10-06 13:54:30,"@Adlai-Holler @appleguy @levi @garrettmoon  Ready for review
",maicki,garrettmoon
2349,2016-10-06 13:54:30,"@Adlai-Holler @appleguy @levi @garrettmoon  Ready for review
",maicki,appleguy
2349,2016-10-06 13:54:30,"@Adlai-Holler @appleguy @levi @garrettmoon  Ready for review
",maicki,Adlai-Holler
2349,2016-10-06 18:35:09,"@Adlai-Holler @garrettmoon Addressed comments, can you please look over it again.
",maicki,garrettmoon
2349,2016-10-06 18:35:09,"@Adlai-Holler @garrettmoon Addressed comments, can you please look over it again.
",maicki,Adlai-Holler
2348,2016-10-05 21:48:05,"Users are getting confused when we tell them ""the index paths are out-of-sync"" or ""don't line up.""

To help tackle this major problem, this diff:
- Add failing unit tests for the new behavior.
- Makes `nodeAtIndexPath` and `indexPathForNode` work in the _data source's_ index space, not in the UIKit index space. So immediately after submitting an update, if you call `nodeAtIndexPath:` you'll get the new node.
- Deprecate `calculatedSizeForNodeAtIndexPath`: we should let them get the node and call `calculatedSize` instead – now that the index space distinction is more clear we should centralize all our logic on nodes instead.
- Removes the `indexPath` argument from `collectionView:willDisplayNode:forItemAtIndexPath:` and friends.
  - The `indexPath` was provided by the collection view and would not be correct for accessing their data source.
  - They can always call `indexPathForNode:` to get the data-source index path for the node, if needed. If the item for the node has been deleted from the collection view i.e. no longer exists in the data source, they'll get nil back. It's a bummer, but c'est la vie. The delegate will probably still want to know that a given node is being displayed, even if it no longer corresponds to an item.
- Add some assertions about what happens on main vs on editing queue. These are all pretty safe I believe, and are mostly there for documentation/regression-proofing.
- Add supplementary nodes into our collection view tests.

**NOTE**: I have added a unit test for similar behavior to be applied to supplementary nodes. This diff is already big enough just handling it for rows/items, so the unit test is disabled and I will enable it + the feature in a follow-up diff.

Ready for review @nguyenhuy @appleguy @maicki @garrettmoon !
",Adlai-Holler,nguyenhuy
2348,2016-10-05 21:48:05,"Users are getting confused when we tell them ""the index paths are out-of-sync"" or ""don't line up.""

To help tackle this major problem, this diff:
- Add failing unit tests for the new behavior.
- Makes `nodeAtIndexPath` and `indexPathForNode` work in the _data source's_ index space, not in the UIKit index space. So immediately after submitting an update, if you call `nodeAtIndexPath:` you'll get the new node.
- Deprecate `calculatedSizeForNodeAtIndexPath`: we should let them get the node and call `calculatedSize` instead – now that the index space distinction is more clear we should centralize all our logic on nodes instead.
- Removes the `indexPath` argument from `collectionView:willDisplayNode:forItemAtIndexPath:` and friends.
  - The `indexPath` was provided by the collection view and would not be correct for accessing their data source.
  - They can always call `indexPathForNode:` to get the data-source index path for the node, if needed. If the item for the node has been deleted from the collection view i.e. no longer exists in the data source, they'll get nil back. It's a bummer, but c'est la vie. The delegate will probably still want to know that a given node is being displayed, even if it no longer corresponds to an item.
- Add some assertions about what happens on main vs on editing queue. These are all pretty safe I believe, and are mostly there for documentation/regression-proofing.
- Add supplementary nodes into our collection view tests.

**NOTE**: I have added a unit test for similar behavior to be applied to supplementary nodes. This diff is already big enough just handling it for rows/items, so the unit test is disabled and I will enable it + the feature in a follow-up diff.

Ready for review @nguyenhuy @appleguy @maicki @garrettmoon !
",Adlai-Holler,garrettmoon
2348,2016-10-05 21:48:05,"Users are getting confused when we tell them ""the index paths are out-of-sync"" or ""don't line up.""

To help tackle this major problem, this diff:
- Add failing unit tests for the new behavior.
- Makes `nodeAtIndexPath` and `indexPathForNode` work in the _data source's_ index space, not in the UIKit index space. So immediately after submitting an update, if you call `nodeAtIndexPath:` you'll get the new node.
- Deprecate `calculatedSizeForNodeAtIndexPath`: we should let them get the node and call `calculatedSize` instead – now that the index space distinction is more clear we should centralize all our logic on nodes instead.
- Removes the `indexPath` argument from `collectionView:willDisplayNode:forItemAtIndexPath:` and friends.
  - The `indexPath` was provided by the collection view and would not be correct for accessing their data source.
  - They can always call `indexPathForNode:` to get the data-source index path for the node, if needed. If the item for the node has been deleted from the collection view i.e. no longer exists in the data source, they'll get nil back. It's a bummer, but c'est la vie. The delegate will probably still want to know that a given node is being displayed, even if it no longer corresponds to an item.
- Add some assertions about what happens on main vs on editing queue. These are all pretty safe I believe, and are mostly there for documentation/regression-proofing.
- Add supplementary nodes into our collection view tests.

**NOTE**: I have added a unit test for similar behavior to be applied to supplementary nodes. This diff is already big enough just handling it for rows/items, so the unit test is disabled and I will enable it + the feature in a follow-up diff.

Ready for review @nguyenhuy @appleguy @maicki @garrettmoon !
",Adlai-Holler,appleguy
2348,2016-10-05 21:48:05,"Users are getting confused when we tell them ""the index paths are out-of-sync"" or ""don't line up.""

To help tackle this major problem, this diff:
- Add failing unit tests for the new behavior.
- Makes `nodeAtIndexPath` and `indexPathForNode` work in the _data source's_ index space, not in the UIKit index space. So immediately after submitting an update, if you call `nodeAtIndexPath:` you'll get the new node.
- Deprecate `calculatedSizeForNodeAtIndexPath`: we should let them get the node and call `calculatedSize` instead – now that the index space distinction is more clear we should centralize all our logic on nodes instead.
- Removes the `indexPath` argument from `collectionView:willDisplayNode:forItemAtIndexPath:` and friends.
  - The `indexPath` was provided by the collection view and would not be correct for accessing their data source.
  - They can always call `indexPathForNode:` to get the data-source index path for the node, if needed. If the item for the node has been deleted from the collection view i.e. no longer exists in the data source, they'll get nil back. It's a bummer, but c'est la vie. The delegate will probably still want to know that a given node is being displayed, even if it no longer corresponds to an item.
- Add some assertions about what happens on main vs on editing queue. These are all pretty safe I believe, and are mostly there for documentation/regression-proofing.
- Add supplementary nodes into our collection view tests.

**NOTE**: I have added a unit test for similar behavior to be applied to supplementary nodes. This diff is already big enough just handling it for rows/items, so the unit test is disabled and I will enable it + the feature in a follow-up diff.

Ready for review @nguyenhuy @appleguy @maicki @garrettmoon !
",Adlai-Holler,maicki
2348,2016-10-05 22:09:28,"@appleguy @maicki @garrettmoon Well, the plan to completely hide UIKit index paths is a no-go  because `UICollectionViewLayout` subclasses will want to get nodes in their index space, which is the UIKit index space.

So if we have to expose them, we should come up with a public-facing name for the ""completed"" set or the ""UIKit"" set. The current implementation uses the word `Completed` which is pretty to look at but somewhat vague. We should obviously beef up the documentation about this, but simultaneously come up with good consistent words for these two spaces.

Ideas?
",Adlai-Holler,garrettmoon
2348,2016-10-05 22:09:28,"@appleguy @maicki @garrettmoon Well, the plan to completely hide UIKit index paths is a no-go  because `UICollectionViewLayout` subclasses will want to get nodes in their index space, which is the UIKit index space.

So if we have to expose them, we should come up with a public-facing name for the ""completed"" set or the ""UIKit"" set. The current implementation uses the word `Completed` which is pretty to look at but somewhat vague. We should obviously beef up the documentation about this, but simultaneously come up with good consistent words for these two spaces.

Ideas?
",Adlai-Holler,appleguy
2348,2016-10-05 22:09:28,"@appleguy @maicki @garrettmoon Well, the plan to completely hide UIKit index paths is a no-go  because `UICollectionViewLayout` subclasses will want to get nodes in their index space, which is the UIKit index space.

So if we have to expose them, we should come up with a public-facing name for the ""completed"" set or the ""UIKit"" set. The current implementation uses the word `Completed` which is pretty to look at but somewhat vague. We should obviously beef up the documentation about this, but simultaneously come up with good consistent words for these two spaces.

Ideas?
",Adlai-Holler,maicki
2347,2016-10-05 21:31:19,"@Adlai-Holler Ready for review.
",maicki,Adlai-Holler
2346,2016-10-05 21:11:22,"Good ideas from @appleguy and @Adlai-Holler turned into sweet, sweet code.
",garrettmoon,appleguy
2346,2016-10-05 21:11:22,"Good ideas from @appleguy and @Adlai-Holler turned into sweet, sweet code.
",garrettmoon,Adlai-Holler
2345,2016-10-07 20:30:43,"@MarvinNazari: is this a regression when updating to today's master? We're currently making some [changes to the Layout API](http://asyncdisplaykit.org/docs/layout2-conversion-guide.html) so it would be helpful to know if this is a regression or not. 

cc @maicki 
",hannahmbanana,maicki
2342,2016-10-04 23:05:46,"@Adlai-Holler Can you please review and merge. Fixes all of our example projects with the API changes as well as fixes the carthage build we broke while exposing `NSArray+Diffing.h`
",maicki,Adlai-Holler
2341,2016-10-04 14:17:57,"@weichencoder Hey weichencoder, thank you for reporting! Our APIs are currently in flux so it can be that the extra samples are not updated yet. For now just remove the `asyncDataFetching:` parameter from the initializer. We will update all examples soon though.

cc @hannahmbanana 
",maicki,hannahmbanana
2339,2016-10-07 06:42:15,"@Y-fate @caophong94: I was curious about this too and asked @appleguy. :) This is his response:

""This retain cycle is intentionally created because the node is in a ""live"" view hierarchy (it is inside the a UIWindow that is onscreen). 

To see why this is necessary, apple also creates this retain cycle between UIView and CALayer. If you create a UIView and add its layer to a super layer, and then release the UIView, it will stay alive even though the CALayer delegate pointing to it is weak. 

For the same reason, if the node's view is a descendant of a window, but there is no reference to the node, we keep the node alive with a strong reference from the view. 

Good application design should not rely on this behavior, because a strong reference to the node should be maintained by the subnodes array or by an instance variable. However, this condition occasionally occurs, for example when using a UIView animation API. This cycle should never create a leak or even extend the lifecycle of a node any longer than it is absolutely necessary. If you find something counter to this, please let us know!
",hannahmbanana,appleguy
2339,2016-10-07 20:31:57,"Hi @hannahmbanana, @appleguy  thanks for your support
i have a big problem with this issue, i saw the function keep node alive here, it's good, but when i dismiss a View Controller contain some nodes, it still alive

`- (void)willMoveToSuperview:(UIView *)newSuperview
{
  // Keep the node alive while the view is in a view hierarchy.  This helps ensure that async-drawing views can always
  // display their contents as long as they are visible somewhere, and aids in lifecycle management because the
  // lifecycle of the node can be treated as the same as the lifecycle of the view (let the view hierarchy own the
  // view).
  UIView *currentSuperview = self.superview;
  if (!currentSuperview && newSuperview) {
      self.keepalive_node = _node;
  } else if (currentSuperview && !newSuperview) {
    // Clearing keepalive_node may cause deallocation of the node.  In this case, __exitHierarchy may not have an opportunity (e.g. _node will be cleared
    // by the time -didMoveToWindow occurs after this) to clear the Visible interfaceState, which we need to do before deallocation to meet an API guarantee.
    if (_node.inHierarchy) {
      [_node __exitHierarchy];
    }
    self.keepalive_node = nil;
  }`
",caophong94,appleguy
2339,2016-10-07 21:39:36,"@hannahmbanana , @appleguy : i just created new one, please take a look:
https://github.com/caophong94/alivecellnode

After dismiss AliveViewController, still found the AliveCellNode:
(
        ""-> _keepalive_node -> StillAliveNode.AliveCellNode "",
        ""-> _view -> _ASDisplayView ""
    )
",caophong94,appleguy
2337,2016-10-03 23:13:48,"Good call @garrettmoon!
",Adlai-Holler,garrettmoon
2336,2016-10-03 20:32:01,"`ASSentinel` is currently a property of both `ASDisplayNode` and `ASDisplayLayer`.

On `ASDisplayLayer`, it is written to, but never read (!!). 

On `ASDisplayNode`, it is used, but it's insanely inefficient to use an NSObject for. 

This diff removes the class, removes the wasteful property from `ASDisplayLayer`, and refactors the one in `ASDisplayNode` into a `std::atomic_uint` instead.

Ready for review @maicki @appleguy @garrettmoon 
",Adlai-Holler,garrettmoon
2336,2016-10-03 20:32:01,"`ASSentinel` is currently a property of both `ASDisplayNode` and `ASDisplayLayer`.

On `ASDisplayLayer`, it is written to, but never read (!!). 

On `ASDisplayNode`, it is used, but it's insanely inefficient to use an NSObject for. 

This diff removes the class, removes the wasteful property from `ASDisplayLayer`, and refactors the one in `ASDisplayNode` into a `std::atomic_uint` instead.

Ready for review @maicki @appleguy @garrettmoon 
",Adlai-Holler,appleguy
2336,2016-10-03 20:32:01,"`ASSentinel` is currently a property of both `ASDisplayNode` and `ASDisplayLayer`.

On `ASDisplayLayer`, it is written to, but never read (!!). 

On `ASDisplayNode`, it is used, but it's insanely inefficient to use an NSObject for. 

This diff removes the class, removes the wasteful property from `ASDisplayLayer`, and refactors the one in `ASDisplayNode` into a `std::atomic_uint` instead.

Ready for review @maicki @appleguy @garrettmoon 
",Adlai-Holler,maicki
2335,2016-10-03 17:43:12,"#2321 was reverted because its test was failing under iOS 10. iOS 10 seems to use a much larger reuse queue for collection cells, which revealed an issue with the previous implementation of this feature.

This restores #2321, plus:
- We used to clear the layout attributes only in `prepareForReuse` but now we clear it in `didEndDisplayingCell:`. 

Ready for review @maicki @appleguy 
",Adlai-Holler,appleguy
2335,2016-10-03 17:43:12,"#2321 was reverted because its test was failing under iOS 10. iOS 10 seems to use a much larger reuse queue for collection cells, which revealed an issue with the previous implementation of this feature.

This restores #2321, plus:
- We used to clear the layout attributes only in `prepareForReuse` but now we clear it in `didEndDisplayingCell:`. 

Ready for review @maicki @appleguy 
",Adlai-Holler,maicki
2332,2016-10-01 19:43:59,"The `ASAsyncTransaction` system is one of the most fundamental components of AsyncDisplayKit. It powers the asynchronous layer display process which is possibly the most reliable & performance-tuned component of the framework.

It provides lightweight, cancellable, waitable, transactionable operation semantics. It seems like it could be useful in other contexts than drawing, such as layout, or updating UIKit/CALayer properties from background threads. There's a ton of promise here.

The only problem with it, is that it works so reliably that @appleguy is the only maintainer who understands how it works and how it could be applied in other contexts.

This diff contains no functional changes. Its only purpose is to help make the system easier to understand and open the door for more general usage:
- Add nullability and generics to the system.
- Rename and move the `asyncdisplaykit_currentAsyncLayerTransaction` property out from the special `CALayer (ASAsyncTransaction)` category up into the `ASAsyncTransaction` protocol itself with the new name `asyncdisplaykit_currentAsyncTransaction`. Matching other cases like this, `UIView` and `ASDisplayNode` pass through to the layer in their conformance.
- Shorten names e.g. `ASDisplayNodeAsyncTransactionContainer` -> `ASAsyncTransactionContainer`
- Reduce underscores in `ASAsyncTransaction` so it's less scary.
- Replace references to `container layers` – which appear to be an old subclass of `CALayer` that's gone now – with either `layer` or `container` based on the context.

Ready for review @maicki @levi @appleguy
",Adlai-Holler,levi
2332,2016-10-01 19:43:59,"The `ASAsyncTransaction` system is one of the most fundamental components of AsyncDisplayKit. It powers the asynchronous layer display process which is possibly the most reliable & performance-tuned component of the framework.

It provides lightweight, cancellable, waitable, transactionable operation semantics. It seems like it could be useful in other contexts than drawing, such as layout, or updating UIKit/CALayer properties from background threads. There's a ton of promise here.

The only problem with it, is that it works so reliably that @appleguy is the only maintainer who understands how it works and how it could be applied in other contexts.

This diff contains no functional changes. Its only purpose is to help make the system easier to understand and open the door for more general usage:
- Add nullability and generics to the system.
- Rename and move the `asyncdisplaykit_currentAsyncLayerTransaction` property out from the special `CALayer (ASAsyncTransaction)` category up into the `ASAsyncTransaction` protocol itself with the new name `asyncdisplaykit_currentAsyncTransaction`. Matching other cases like this, `UIView` and `ASDisplayNode` pass through to the layer in their conformance.
- Shorten names e.g. `ASDisplayNodeAsyncTransactionContainer` -> `ASAsyncTransactionContainer`
- Reduce underscores in `ASAsyncTransaction` so it's less scary.
- Replace references to `container layers` – which appear to be an old subclass of `CALayer` that's gone now – with either `layer` or `container` based on the context.

Ready for review @maicki @levi @appleguy
",Adlai-Holler,appleguy
2332,2016-10-01 19:43:59,"The `ASAsyncTransaction` system is one of the most fundamental components of AsyncDisplayKit. It powers the asynchronous layer display process which is possibly the most reliable & performance-tuned component of the framework.

It provides lightweight, cancellable, waitable, transactionable operation semantics. It seems like it could be useful in other contexts than drawing, such as layout, or updating UIKit/CALayer properties from background threads. There's a ton of promise here.

The only problem with it, is that it works so reliably that @appleguy is the only maintainer who understands how it works and how it could be applied in other contexts.

This diff contains no functional changes. Its only purpose is to help make the system easier to understand and open the door for more general usage:
- Add nullability and generics to the system.
- Rename and move the `asyncdisplaykit_currentAsyncLayerTransaction` property out from the special `CALayer (ASAsyncTransaction)` category up into the `ASAsyncTransaction` protocol itself with the new name `asyncdisplaykit_currentAsyncTransaction`. Matching other cases like this, `UIView` and `ASDisplayNode` pass through to the layer in their conformance.
- Shorten names e.g. `ASDisplayNodeAsyncTransactionContainer` -> `ASAsyncTransactionContainer`
- Reduce underscores in `ASAsyncTransaction` so it's less scary.
- Replace references to `container layers` – which appear to be an old subclass of `CALayer` that's gone now – with either `layer` or `container` based on the context.

Ready for review @maicki @levi @appleguy
",Adlai-Holler,maicki
2329,2016-10-06 18:10:24,"Adding @appleguy @maxsz or @binl as they're mentioned elsewhere to have AVFoundation expertise.
",master-nevi,maxsz
2329,2016-10-06 18:10:24,"Adding @appleguy @maxsz or @binl as they're mentioned elsewhere to have AVFoundation expertise.
",master-nevi,appleguy
2329,2016-11-18 02:30:15,"@master-nevi Hey thanks for creating the PR!

I'm actually currently looking into a different solution already mentioned above. In my opinion (and also talking with a couple of other developer) instead of fixing the broken behavior of `ASVideoNode`, we should prefer composition over inheritance and let `ASVideoNode` inherit from `ASDisplayNode` instead of `ASNetworkImageNode`. This would allow any developer to use the core components and combine them the way they want without having an overhead like `ASVideoNode` and `ASNetworkImageNode`. We could than create a mother component that could combine these two, but my solution for this issue would still to not use the backing `ASNetworkImageNode` functionality at all.

@Adlai-Holler @garrettmoon @appleguy Any opinions?
",maicki,appleguy
2329,2016-11-18 02:30:15,"@master-nevi Hey thanks for creating the PR!

I'm actually currently looking into a different solution already mentioned above. In my opinion (and also talking with a couple of other developer) instead of fixing the broken behavior of `ASVideoNode`, we should prefer composition over inheritance and let `ASVideoNode` inherit from `ASDisplayNode` instead of `ASNetworkImageNode`. This would allow any developer to use the core components and combine them the way they want without having an overhead like `ASVideoNode` and `ASNetworkImageNode`. We could than create a mother component that could combine these two, but my solution for this issue would still to not use the backing `ASNetworkImageNode` functionality at all.

@Adlai-Holler @garrettmoon @appleguy Any opinions?
",maicki,Adlai-Holler
2324,2016-10-04 03:01:36,"@Adlai-Holler @appleguy Ready for review
",maicki,Adlai-Holler
2323,2016-09-30 03:52:53,"To avoid unnecessary layout passes in Pin Closeup. 

While testing the sync candidate branch for Pinterest, I noticed that the pin-to-pin closeup swipe seemed slower than normal. Unnecessary layout passes are being called every time the action bar buttons are updated for a new pin. 

Before
<img width=""1271"" alt=""before"" src=""https://cloud.githubusercontent.com/assets/3419380/18980186/ab3e6278-8686-11e6-9248-3d6a1f338494.png"">

After
<img width=""1275"" alt=""after"" src=""https://cloud.githubusercontent.com/assets/3419380/18980185/a931c43e-8686-11e6-90ce-f790b653fa08.png"">

@appleguy: could you review & merge so I can get this into `6.12` and `6.13` tonight?
",hannahmbanana,appleguy
2322,2016-09-29 19:09:49,"@maicki: could you review (& merge) please?
",hannahmbanana,maicki
2321,2016-09-29 18:28:20,"I came across these issues while working with some excellent engineers from Pinterest yesterday.
- `applyLayoutAttributes` was never being called on `ASCellNode`. See the documentation in the diff for why.
- It is useful to be able to safely get the layout attributes for a node in `willDisplayNode:forItemAtIndexPath:`. At this point you can't convert the frame because the node's not in the hierarchy yet. See the documentation in the diff for why.

The product engineers _do_ have a workaround in place for this, but we should merge this as soon as possible. Ready for review @maicki @appleguy @levi @garrettmoon @rcancro 
",Adlai-Holler,levi
2321,2016-09-29 18:28:20,"I came across these issues while working with some excellent engineers from Pinterest yesterday.
- `applyLayoutAttributes` was never being called on `ASCellNode`. See the documentation in the diff for why.
- It is useful to be able to safely get the layout attributes for a node in `willDisplayNode:forItemAtIndexPath:`. At this point you can't convert the frame because the node's not in the hierarchy yet. See the documentation in the diff for why.

The product engineers _do_ have a workaround in place for this, but we should merge this as soon as possible. Ready for review @maicki @appleguy @levi @garrettmoon @rcancro 
",Adlai-Holler,garrettmoon
2321,2016-09-29 18:28:20,"I came across these issues while working with some excellent engineers from Pinterest yesterday.
- `applyLayoutAttributes` was never being called on `ASCellNode`. See the documentation in the diff for why.
- It is useful to be able to safely get the layout attributes for a node in `willDisplayNode:forItemAtIndexPath:`. At this point you can't convert the frame because the node's not in the hierarchy yet. See the documentation in the diff for why.

The product engineers _do_ have a workaround in place for this, but we should merge this as soon as possible. Ready for review @maicki @appleguy @levi @garrettmoon @rcancro 
",Adlai-Holler,appleguy
2321,2016-09-29 18:28:20,"I came across these issues while working with some excellent engineers from Pinterest yesterday.
- `applyLayoutAttributes` was never being called on `ASCellNode`. See the documentation in the diff for why.
- It is useful to be able to safely get the layout attributes for a node in `willDisplayNode:forItemAtIndexPath:`. At this point you can't convert the frame because the node's not in the hierarchy yet. See the documentation in the diff for why.

The product engineers _do_ have a workaround in place for this, but we should merge this as soon as possible. Ready for review @maicki @appleguy @levi @garrettmoon @rcancro 
",Adlai-Holler,maicki
2321,2016-09-29 18:28:20,"I came across these issues while working with some excellent engineers from Pinterest yesterday.
- `applyLayoutAttributes` was never being called on `ASCellNode`. See the documentation in the diff for why.
- It is useful to be able to safely get the layout attributes for a node in `willDisplayNode:forItemAtIndexPath:`. At this point you can't convert the frame because the node's not in the hierarchy yet. See the documentation in the diff for why.

The product engineers _do_ have a workaround in place for this, but we should merge this as soon as possible. Ready for review @maicki @appleguy @levi @garrettmoon @rcancro 
",Adlai-Holler,rcancro
2320,2016-09-29 17:44:03,"@levi @Adlai-Holler @appleguy Can I get a look over it please
",maicki,levi
2320,2016-09-29 17:44:03,"@levi @Adlai-Holler @appleguy Can I get a look over it please
",maicki,appleguy
2320,2016-09-29 17:44:03,"@levi @Adlai-Holler @appleguy Can I get a look over it please
",maicki,Adlai-Holler
2318,2016-09-28 21:32:04,"@Adlai-Holler Please take a look when you get a chance.
",garrettmoon,Adlai-Holler
2317,2016-09-28 21:23:11,"@Adlai-Holler Please take a look when you get a moment.
",garrettmoon,Adlai-Holler
2316,2016-09-28 21:06:56,"@Adlai-Holler please take a look and suggest improvements :)
",garrettmoon,Adlai-Holler
2316,2016-10-04 17:53:09,"@Adlai-Holler: could you review & merge?
",hannahmbanana,Adlai-Holler
2315,2016-09-28 17:10:59,"@Adlai-Holler @levi @appleguy can i please have a review
",maicki,levi
2315,2016-09-28 17:10:59,"@Adlai-Holler @levi @appleguy can i please have a review
",maicki,appleguy
2315,2016-09-28 17:10:59,"@Adlai-Holler @levi @appleguy can i please have a review
",maicki,Adlai-Holler
2312,2016-09-27 22:58:38,"Overall LGTM

I'm not pretty sure about to remove the methods listed below as they were just recently deprecated.
- `- (void)collectionView:(ASCollectionView *)collectionView willDisplayNodeForItemAtIndexPath:(NSIndexPath *)indexPath ASDISPLAYNODE_DEPRECATED;
  `
- `- (void)tableView:(ASTableView *)tableView willDisplayNodeForRowAtIndexPath:(NSIndexPath *)indexPath ASDISPLAYNODE_DEPRECATED;`

Rely on thoughts from @levi @Adlai-Holler @appleguy on that.
",maicki,levi
2312,2016-09-27 22:58:38,"Overall LGTM

I'm not pretty sure about to remove the methods listed below as they were just recently deprecated.
- `- (void)collectionView:(ASCollectionView *)collectionView willDisplayNodeForItemAtIndexPath:(NSIndexPath *)indexPath ASDISPLAYNODE_DEPRECATED;
  `
- `- (void)tableView:(ASTableView *)tableView willDisplayNodeForRowAtIndexPath:(NSIndexPath *)indexPath ASDISPLAYNODE_DEPRECATED;`

Rely on thoughts from @levi @Adlai-Holler @appleguy on that.
",maicki,appleguy
2312,2016-09-27 22:58:38,"Overall LGTM

I'm not pretty sure about to remove the methods listed below as they were just recently deprecated.
- `- (void)collectionView:(ASCollectionView *)collectionView willDisplayNodeForItemAtIndexPath:(NSIndexPath *)indexPath ASDISPLAYNODE_DEPRECATED;
  `
- `- (void)tableView:(ASTableView *)tableView willDisplayNodeForRowAtIndexPath:(NSIndexPath *)indexPath ASDISPLAYNODE_DEPRECATED;`

Rely on thoughts from @levi @Adlai-Holler @appleguy on that.
",maicki,Adlai-Holler
2308,2016-10-07 07:11:30,"@frankenthumbs: Please let us know if you run into any other issues with `UISplitViewController`. :) @rcancro spent a lot of time getting it to work for Pinterest. :) 

`master` is currently our ASDK 2.0 Beta. Here's some documentation on what's changed: 
- http://asyncdisplaykit.org/docs/upgrading.html
- http://asyncdisplaykit.org/docs/layout2-conversion-guide.html

Let us know if we're missing anything in the documentation. 
",hannahmbanana,rcancro
2303,2016-09-26 21:53:59,"Review please? @garrettmoon @maicki @Adlai-Holler 
",hannahmbanana,garrettmoon
2303,2016-09-26 21:53:59,"Review please? @garrettmoon @maicki @Adlai-Holler 
",hannahmbanana,maicki
2303,2016-09-26 21:53:59,"Review please? @garrettmoon @maicki @Adlai-Holler 
",hannahmbanana,Adlai-Holler
2299,2017-01-03 18:59:31,"For anyone who hit into this issue after upgrading to Swift 3, no need for `@escaping` after @Adlai-Holler last merge, so it should be:

`override class func draw(_ bounds: CGRect, withParameters parameters: NSObjectProtocol?, isCancelled isCancelledBlock: asdisplaynode_iscancelled_block_t, isRasterizing: Bool) { `",mtaweel,Adlai-Holler
2298,2016-09-26 01:19:32,"@Adlai-Holler @appleguy @levi Ready for review
",maicki,levi
2298,2016-09-26 01:19:32,"@Adlai-Holler @appleguy @levi Ready for review
",maicki,appleguy
2298,2016-09-26 01:19:32,"@Adlai-Holler @appleguy @levi Ready for review
",maicki,Adlai-Holler
2298,2016-09-27 18:01:12,"@Adlai-Holler Yes the reference images change was expected.
",maicki,Adlai-Holler
2292,2016-09-24 19:09:50,"I should be enjoying time with my family, but when I see a ""freebie"" like this I want to get it done so I can stop thinking about it 🤓
- Use `kCGBlendModeCopy` when possible, which should be fairly often.
- Simplify path cache key generation – use `NSValue` instead of the admittedly-excellent `NSNumber` hack.
- Remove `@synchronized` around path cache access. By doing this, it is possible that the same path is generated multiple times on different threads, but it's very unlikely, and not worth adding significant overhead to all cases.

Ready for review @maicki @levi @appleguy @hannahmbanana !
",Adlai-Holler,levi
2292,2016-09-24 19:09:50,"I should be enjoying time with my family, but when I see a ""freebie"" like this I want to get it done so I can stop thinking about it 🤓
- Use `kCGBlendModeCopy` when possible, which should be fairly often.
- Simplify path cache key generation – use `NSValue` instead of the admittedly-excellent `NSNumber` hack.
- Remove `@synchronized` around path cache access. By doing this, it is possible that the same path is generated multiple times on different threads, but it's very unlikely, and not worth adding significant overhead to all cases.

Ready for review @maicki @levi @appleguy @hannahmbanana !
",Adlai-Holler,appleguy
2292,2016-09-24 19:09:50,"I should be enjoying time with my family, but when I see a ""freebie"" like this I want to get it done so I can stop thinking about it 🤓
- Use `kCGBlendModeCopy` when possible, which should be fairly often.
- Simplify path cache key generation – use `NSValue` instead of the admittedly-excellent `NSNumber` hack.
- Remove `@synchronized` around path cache access. By doing this, it is possible that the same path is generated multiple times on different threads, but it's very unlikely, and not worth adding significant overhead to all cases.

Ready for review @maicki @levi @appleguy @hannahmbanana !
",Adlai-Holler,maicki
2292,2016-09-24 19:09:50,"I should be enjoying time with my family, but when I see a ""freebie"" like this I want to get it done so I can stop thinking about it 🤓
- Use `kCGBlendModeCopy` when possible, which should be fairly often.
- Simplify path cache key generation – use `NSValue` instead of the admittedly-excellent `NSNumber` hack.
- Remove `@synchronized` around path cache access. By doing this, it is possible that the same path is generated multiple times on different threads, but it's very unlikely, and not worth adding significant overhead to all cases.

Ready for review @maicki @levi @appleguy @hannahmbanana !
",Adlai-Holler,hannahmbanana
2290,2016-09-24 23:10:35,"@maicki: ready for review on Monday
",hannahmbanana,maicki
2290,2016-09-27 03:46:43,"@maicki: addressed your comments 
",hannahmbanana,maicki
2289,2016-09-24 23:10:42,"@maicki: ready for review on Monday
",hannahmbanana,maicki
2289,2016-09-27 03:53:23,"@maicki: addressed your comments
",hannahmbanana,maicki
2288,2016-09-24 23:11:03,"@maicki: ready for review on Monday
",hannahmbanana,maicki
2288,2016-09-27 04:03:31,"@maicki: addressed your comments
",hannahmbanana,maicki
2286,2016-09-24 22:37:29,"Overall PR LGTM too

Yeah @Adlai-Holler and me talked about and it's very likely not the root cause for the crash we are seeing ...
",maicki,Adlai-Holler
2283,2016-09-27 17:06:27,"@Adlai-Holler comments addressed
",maicki,Adlai-Holler
2282,2016-09-23 16:56:17,"This addresses cases where users are calling `waitUntilAllUpdatesAreCommitted` during this callback in order to get the cell node. This practice is unsafe, because you may be editing a collection view while the collection view is calling back to you.

Ready for review @maicki @appleguy @hannahmbanana!
",Adlai-Holler,appleguy
2282,2016-09-23 16:56:17,"This addresses cases where users are calling `waitUntilAllUpdatesAreCommitted` during this callback in order to get the cell node. This practice is unsafe, because you may be editing a collection view while the collection view is calling back to you.

Ready for review @maicki @appleguy @hannahmbanana!
",Adlai-Holler,maicki
2282,2016-09-23 16:56:17,"This addresses cases where users are calling `waitUntilAllUpdatesAreCommitted` during this callback in order to get the cell node. This practice is unsafe, because you may be editing a collection view while the collection view is calling back to you.

Ready for review @maicki @appleguy @hannahmbanana!
",Adlai-Holler,hannahmbanana
2282,2016-09-23 23:51:33,"Thanks @garrettmoon for reviewing!
",Adlai-Holler,garrettmoon
2281,2016-09-23 16:24:33,"This documents some unexpected behavior @binl observed, per discussion with @appleguy.
",Adlai-Holler,appleguy
2279,2016-09-23 16:30:14,"@Adlai-Holler That's a cool idea. I will dig into that a bit later though.
",maicki,Adlai-Holler
2278,2016-09-24 16:49:45,"Thanks for raising this @george-gw. It's unfortunate – `UIControlState` declares `UIControlStateNormal = 0` but in Swift it gets a `public static var normal: UIControlState { get }`. Having a ""zero"" option like this is [not technically allowed](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html) but Apple must've made some special exception.

I think we have two choices here:
- Do nothing. In Swift you'll have to use `[]` to represent an ""empty"" control state. Not really acceptable.
- Investigate whether we can add an optional Swift file into ASDK that defines an extension on `UIControlState` that adds the static var. Ideal outcome, extremely costly and perhaps impossible.
- Define `ASControlStateNormal = 1` as you mentioned. Fixes the Swift import, but diverges from UIKit's values and creates a new ""undefined"" 0 state. Also it's conceptually incorrect – normal means 0 flags.
- Replace `ASControlState` with `UIControlState`. Fixes everything, but we lose control of the enum. We could use `#define ASControlState UIControlState` to ease the transition.

We should do the last one. Apple has created a special exception for themselves and we should piggyback on it. The likelihood of us creating some new control state in the future is extremely low. This also eliminates code which is always nice. @appleguy @maicki could someone else weigh in?
",Adlai-Holler,appleguy
2278,2016-09-24 16:49:45,"Thanks for raising this @george-gw. It's unfortunate – `UIControlState` declares `UIControlStateNormal = 0` but in Swift it gets a `public static var normal: UIControlState { get }`. Having a ""zero"" option like this is [not technically allowed](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html) but Apple must've made some special exception.

I think we have two choices here:
- Do nothing. In Swift you'll have to use `[]` to represent an ""empty"" control state. Not really acceptable.
- Investigate whether we can add an optional Swift file into ASDK that defines an extension on `UIControlState` that adds the static var. Ideal outcome, extremely costly and perhaps impossible.
- Define `ASControlStateNormal = 1` as you mentioned. Fixes the Swift import, but diverges from UIKit's values and creates a new ""undefined"" 0 state. Also it's conceptually incorrect – normal means 0 flags.
- Replace `ASControlState` with `UIControlState`. Fixes everything, but we lose control of the enum. We could use `#define ASControlState UIControlState` to ease the transition.

We should do the last one. Apple has created a special exception for themselves and we should piggyback on it. The likelihood of us creating some new control state in the future is extremely low. This also eliminates code which is always nice. @appleguy @maicki could someone else weigh in?
",Adlai-Holler,maicki
2274,2016-09-22 19:45:17,"Prior to this diff, we would only call the outermost completion handler.

Ready for review! @appleguy @maicki @levi 
",Adlai-Holler,levi
2274,2016-09-22 19:45:17,"Prior to this diff, we would only call the outermost completion handler.

Ready for review! @appleguy @maicki @levi 
",Adlai-Holler,appleguy
2274,2016-09-22 19:45:17,"Prior to this diff, we would only call the outermost completion handler.

Ready for review! @appleguy @maicki @levi 
",Adlai-Holler,maicki
2273,2016-11-17 09:32:21,"@Gocy015 - what version of AsyncDisplayKit are you using? If you [update to 2.0](http://asyncdisplaykit.org/docs/adoption-guide-2-0-beta1.html), and move everything to the table node, this may resolve itself? @Adlai-Holler 
",hannahmbanana,Adlai-Holler
2272,2016-09-21 17:41:20,"@maicki @appleguy I've been kicked out of the Facebook org for ~~making fun of the Zuck on Twitter~~ not having two-factor auth enabled. 

In order to trigger a Jenkins build, if you guys are still in, could you comment ""Test this please"" and let's see if this works?
",Adlai-Holler,appleguy
2272,2016-09-21 17:41:20,"@maicki @appleguy I've been kicked out of the Facebook org for ~~making fun of the Zuck on Twitter~~ not having two-factor auth enabled. 

In order to trigger a Jenkins build, if you guys are still in, could you comment ""Test this please"" and let's see if this works?
",Adlai-Holler,maicki
2265,2016-09-20 02:59:23,"@Adlai-Holler @maicki: could you review?
",hannahmbanana,maicki
2265,2016-09-20 02:59:23,"@Adlai-Holler @maicki: could you review?
",hannahmbanana,Adlai-Holler
2261,2016-09-20 00:33:31,"@Adlai-Holler @appleguy @levi Can you please take a first look over it
",maicki,levi
2261,2016-09-20 00:33:31,"@Adlai-Holler @appleguy @levi Can you please take a first look over it
",maicki,appleguy
2261,2016-09-20 00:33:31,"@Adlai-Holler @appleguy @levi Can you please take a first look over it
",maicki,Adlai-Holler
2257,2016-09-15 23:57:24,"I've put up branch `AHRemoveImplicitWait_p6.12` which is based on our p6.12 branch, and we can test Pinterest using that. We'll make sure to test more thoroughly before this is synced.

Ready for review! @chrisdanford @hannahmbanana @maicki @levi @appleguy 
",Adlai-Holler,levi
2257,2016-09-15 23:57:24,"I've put up branch `AHRemoveImplicitWait_p6.12` which is based on our p6.12 branch, and we can test Pinterest using that. We'll make sure to test more thoroughly before this is synced.

Ready for review! @chrisdanford @hannahmbanana @maicki @levi @appleguy 
",Adlai-Holler,appleguy
2257,2016-09-15 23:57:24,"I've put up branch `AHRemoveImplicitWait_p6.12` which is based on our p6.12 branch, and we can test Pinterest using that. We'll make sure to test more thoroughly before this is synced.

Ready for review! @chrisdanford @hannahmbanana @maicki @levi @appleguy 
",Adlai-Holler,maicki
2257,2016-09-15 23:57:24,"I've put up branch `AHRemoveImplicitWait_p6.12` which is based on our p6.12 branch, and we can test Pinterest using that. We'll make sure to test more thoroughly before this is synced.

Ready for review! @chrisdanford @hannahmbanana @maicki @levi @appleguy 
",Adlai-Holler,hannahmbanana
2257,2016-09-15 23:57:24,"I've put up branch `AHRemoveImplicitWait_p6.12` which is based on our p6.12 branch, and we can test Pinterest using that. We'll make sure to test more thoroughly before this is synced.

Ready for review! @chrisdanford @hannahmbanana @maicki @levi @appleguy 
",Adlai-Holler,chrisdanford
2256,2016-09-15 19:19:31,"Our CI is being debugged by the heroic @chrisdanford – this diff is for testing. 
",Adlai-Holler,chrisdanford
2255,2016-09-23 20:25:59,"@garrettmoon @Adlai-Holler @appleguy Ready for review
",maicki,garrettmoon
2255,2016-09-23 20:25:59,"@garrettmoon @Adlai-Holler @appleguy Ready for review
",maicki,appleguy
2255,2016-09-24 23:26:28,"@garrettmoon @Adlai-Holler ready for review again
",maicki,garrettmoon
2253,2016-09-19 18:46:52,"@appleguy @levi Could I please get another review over it? Would like to get that in before #2261
",maicki,levi
2253,2016-09-19 18:46:52,"@appleguy @levi Could I please get another review over it? Would like to get that in before #2261
",maicki,appleguy
2253,2016-09-22 21:04:10,"@appleguy @levi Ready for further review.
",maicki,levi
2252,2016-11-27 21:08:07,"@nhatlee - thank you for reporting! Is this issue 100% reproducible for you? Would it be possible for you to include a sample project here or emailed to asyncdisplaykit@gmail.com?  

cc @Adlai-Holler ",hannahmbanana,Adlai-Holler
2252,2016-11-29 20:32:18,"@hannahmbanana @Adlai-Holler I've also come across this issue. I found it in a specific view controller of mine, and I think having a non-translucent tabBar might be part of the issue (at least for me). Using aa9dff00de3b5faea432504aebfca1024108b727. Just run the sample project and hit the reload button without scrolling. Seems to be happening across a variety of simulators, tried it on 5S, 6S and 6S+

[ASDK-crash.zip](https://github.com/facebook/AsyncDisplayKit/files/620113/ASDK-crash.zip)",tomizimobile,Adlai-Holler
2249,2016-09-15 00:58:51,"OK this diff now includes a failing (now passing) test case. I've tested it with Pinterest and it's working well. Ready for review @levi @johnepinterest @appleguy @maicki 
",Adlai-Holler,levi
2249,2016-09-15 00:58:51,"OK this diff now includes a failing (now passing) test case. I've tested it with Pinterest and it's working well. Ready for review @levi @johnepinterest @appleguy @maicki 
",Adlai-Holler,johnepinterest
2249,2016-09-15 00:58:51,"OK this diff now includes a failing (now passing) test case. I've tested it with Pinterest and it's working well. Ready for review @levi @johnepinterest @appleguy @maicki 
",Adlai-Holler,appleguy
2249,2016-09-15 00:58:51,"OK this diff now includes a failing (now passing) test case. I've tested it with Pinterest and it's working well. Ready for review @levi @johnepinterest @appleguy @maicki 
",Adlai-Holler,maicki
2249,2016-09-15 17:50:58,"@appleguy Thanks for the review! I'll modify this to use the layer itself in a follow-up diff. ship://Problems/239 <Have ASDisplayLayer Be Its Own Delegate, No Proxy>
",Adlai-Holler,appleguy
2245,2016-09-14 17:11:47,"There are several 3rd party components that require access to scrollview delegates directly or indirectly (you just pass a reference to the scrollview). Categories include ""Pull to Refresh"" and ""Hide Navbar on scroll down"" components, such as: TLYShyNavBar, BLKFlexibleHeightBar, AMScrollingNavbar...etc

Currently we get the following error:



Issues opened because of this limitation:
https://github.com/telly/TLYShyNavBar/issues/72
https://github.com/telly/TLYShyNavBar/issues/158

Furthermore, It's not feasible for these 3rd party components to support asyncDelegate.

One suggestion is to support switching between asyncDelegate and delegate by passing a configuration, or by optionally chaining the two.

Chat log with @maicki:


",simoami,maicki
2243,2016-09-14 03:35:47,"When trying to debug issues like #2242 or the recent retain crashes, it can be extremely valuable to know the history of a node. So now you can define `ASDISPLAYNODE_EVENTLOG_ENABLE` (on in debug by default), and we will save the last `ASDISPLAYNODE_EVENTLOG_CAPACITY` (default 20) events for each node in a ring buffer. 

Subclasses can log custom events with `ASDisplayNodeLogEvent(self, @""myEvent: %@"", myArg);`

Obviously this shouldn't be used in production. It's designed to be pretty efficient and so will probably not affect debugging.

This was tremendously helpful in isolating #2242 and I think it will serve us very well in future development.

Events:
- init
- didLoad
- supernodeDidChange
- add/removeSubnode
- interfaceState changes
- hierarchyState changes
- size/layout calculations
- displayStart/displayFinish
### Samples from `Kittens.app`
#### `po myNode.eventLog`


#### `po [myNode.eventLog[5] backtrace]`



Ready for review @rcancro @appleguy @levi @maicki @hannahmbanana 
",Adlai-Holler,levi
2243,2016-09-14 03:35:47,"When trying to debug issues like #2242 or the recent retain crashes, it can be extremely valuable to know the history of a node. So now you can define `ASDISPLAYNODE_EVENTLOG_ENABLE` (on in debug by default), and we will save the last `ASDISPLAYNODE_EVENTLOG_CAPACITY` (default 20) events for each node in a ring buffer. 

Subclasses can log custom events with `ASDisplayNodeLogEvent(self, @""myEvent: %@"", myArg);`

Obviously this shouldn't be used in production. It's designed to be pretty efficient and so will probably not affect debugging.

This was tremendously helpful in isolating #2242 and I think it will serve us very well in future development.

Events:
- init
- didLoad
- supernodeDidChange
- add/removeSubnode
- interfaceState changes
- hierarchyState changes
- size/layout calculations
- displayStart/displayFinish
### Samples from `Kittens.app`
#### `po myNode.eventLog`


#### `po [myNode.eventLog[5] backtrace]`



Ready for review @rcancro @appleguy @levi @maicki @hannahmbanana 
",Adlai-Holler,rcancro
2243,2016-09-14 03:35:47,"When trying to debug issues like #2242 or the recent retain crashes, it can be extremely valuable to know the history of a node. So now you can define `ASDISPLAYNODE_EVENTLOG_ENABLE` (on in debug by default), and we will save the last `ASDISPLAYNODE_EVENTLOG_CAPACITY` (default 20) events for each node in a ring buffer. 

Subclasses can log custom events with `ASDisplayNodeLogEvent(self, @""myEvent: %@"", myArg);`

Obviously this shouldn't be used in production. It's designed to be pretty efficient and so will probably not affect debugging.

This was tremendously helpful in isolating #2242 and I think it will serve us very well in future development.

Events:
- init
- didLoad
- supernodeDidChange
- add/removeSubnode
- interfaceState changes
- hierarchyState changes
- size/layout calculations
- displayStart/displayFinish
### Samples from `Kittens.app`
#### `po myNode.eventLog`


#### `po [myNode.eventLog[5] backtrace]`



Ready for review @rcancro @appleguy @levi @maicki @hannahmbanana 
",Adlai-Holler,appleguy
2243,2016-09-14 03:35:47,"When trying to debug issues like #2242 or the recent retain crashes, it can be extremely valuable to know the history of a node. So now you can define `ASDISPLAYNODE_EVENTLOG_ENABLE` (on in debug by default), and we will save the last `ASDISPLAYNODE_EVENTLOG_CAPACITY` (default 20) events for each node in a ring buffer. 

Subclasses can log custom events with `ASDisplayNodeLogEvent(self, @""myEvent: %@"", myArg);`

Obviously this shouldn't be used in production. It's designed to be pretty efficient and so will probably not affect debugging.

This was tremendously helpful in isolating #2242 and I think it will serve us very well in future development.

Events:
- init
- didLoad
- supernodeDidChange
- add/removeSubnode
- interfaceState changes
- hierarchyState changes
- size/layout calculations
- displayStart/displayFinish
### Samples from `Kittens.app`
#### `po myNode.eventLog`


#### `po [myNode.eventLog[5] backtrace]`



Ready for review @rcancro @appleguy @levi @maicki @hannahmbanana 
",Adlai-Holler,hannahmbanana
2243,2016-09-14 03:35:47,"When trying to debug issues like #2242 or the recent retain crashes, it can be extremely valuable to know the history of a node. So now you can define `ASDISPLAYNODE_EVENTLOG_ENABLE` (on in debug by default), and we will save the last `ASDISPLAYNODE_EVENTLOG_CAPACITY` (default 20) events for each node in a ring buffer. 

Subclasses can log custom events with `ASDisplayNodeLogEvent(self, @""myEvent: %@"", myArg);`

Obviously this shouldn't be used in production. It's designed to be pretty efficient and so will probably not affect debugging.

This was tremendously helpful in isolating #2242 and I think it will serve us very well in future development.

Events:
- init
- didLoad
- supernodeDidChange
- add/removeSubnode
- interfaceState changes
- hierarchyState changes
- size/layout calculations
- displayStart/displayFinish
### Samples from `Kittens.app`
#### `po myNode.eventLog`


#### `po [myNode.eventLog[5] backtrace]`



Ready for review @rcancro @appleguy @levi @maicki @hannahmbanana 
",Adlai-Holler,maicki
2239,2017-01-13 04:35:48,"@MaximusMcCann - Sorry for the delay on getting back to you. Have you tried our [layout transition API](http://asyncdisplaykit.org/docs/layout-transition-api.html)? It is very powerful and animates layer backed views, just as well as it does view-backed ones. It also requires very little code to try out if you are using layout specs. [basic example project](https://github.com/facebook/AsyncDisplayKit/tree/master/examples/ASDKLayoutTransition)

@maicki - could you share the link to your _awesome_ layout transition app? I didn't see it under your repositories. ",hannahmbanana,maicki
2235,2016-09-13 05:58:41,"In the future we want to support creating ASCellNodes on demand, after inserting the item/row into the UITableView/UICollectionView.

To support this, we need to make our cell node allocation & layout asynchronous. It is critical that this process be wait-onable, and that we can limit the total number of concurrent layouts. It's nice if this process supports changing priorities for tasks on-the-fly.

As a first step, I've built this on NSOperation. NSOperation has an unfortunate amount of overhead, but it supports all the features mentioned above and I don't think the overhead will be very significant in practice. We will likely replace NSOperation for this usage in the future, and we'll keep that in mind as we build.

Obviously this is a small step but I'm confident it moves us in the right direction.
- For laying-out nodes, replace the synchronous ASDispatchApply call with enqueuing onto a shared ""node layout"" operation queue.
- Have ASIndexedNodeContext own the creation operation and the finished node.
  - Likely that ASIndexedNodeContext evolves into a sort of `ASCollectionItem` object, that survives beyond the initial insertion of the item.

Ready for review @appleguy @levi 

P.S. Sorry for the mess in ASIndexedNodeContext.h but the init method came after the properties so, y'know. Scorched earth policy. 😛 
",Adlai-Holler,levi
2235,2016-09-13 05:58:41,"In the future we want to support creating ASCellNodes on demand, after inserting the item/row into the UITableView/UICollectionView.

To support this, we need to make our cell node allocation & layout asynchronous. It is critical that this process be wait-onable, and that we can limit the total number of concurrent layouts. It's nice if this process supports changing priorities for tasks on-the-fly.

As a first step, I've built this on NSOperation. NSOperation has an unfortunate amount of overhead, but it supports all the features mentioned above and I don't think the overhead will be very significant in practice. We will likely replace NSOperation for this usage in the future, and we'll keep that in mind as we build.

Obviously this is a small step but I'm confident it moves us in the right direction.
- For laying-out nodes, replace the synchronous ASDispatchApply call with enqueuing onto a shared ""node layout"" operation queue.
- Have ASIndexedNodeContext own the creation operation and the finished node.
  - Likely that ASIndexedNodeContext evolves into a sort of `ASCollectionItem` object, that survives beyond the initial insertion of the item.

Ready for review @appleguy @levi 

P.S. Sorry for the mess in ASIndexedNodeContext.h but the init method came after the properties so, y'know. Scorched earth policy. 😛 
",Adlai-Holler,appleguy
2229,2016-09-12 18:54:45,"@GitGadd: thanks including all of the relevant details here! @Adlai-Holler is currently working to isolate and resolve the underlying cause of the issue. We don't yet have a 100% easy repro case, so it would be awesome if we could see some of your code. I'll send you a message on Slack. 

@Adlai-Holler @appleguy 
",hannahmbanana,appleguy
2229,2016-09-12 18:54:45,"@GitGadd: thanks including all of the relevant details here! @Adlai-Holler is currently working to isolate and resolve the underlying cause of the issue. We don't yet have a 100% easy repro case, so it would be awesome if we could see some of your code. I'll send you a message on Slack. 

@Adlai-Holler @appleguy 
",hannahmbanana,Adlai-Holler
2223,2016-09-10 00:45:52,"Ready for review @johnepinterest @appleguy @levi 
",Adlai-Holler,levi
2223,2016-09-10 00:45:52,"Ready for review @johnepinterest @appleguy @levi 
",Adlai-Holler,johnepinterest
2223,2016-09-10 00:45:52,"Ready for review @johnepinterest @appleguy @levi 
",Adlai-Holler,appleguy
2223,2016-09-10 02:13:40,"@levi Yep! To repro on master, just comment out 



from `-[ASDisplayNode dealloc]` and run unit test `testThatLayerBackedSubnodesAreMarkedInvisibleBeforeDeallocWhenSupernodesViewIsRemovedFromHierarchyWhileBeingRetained`

It'll crash every time during UIView dealloc. The view is enumerating its layer's sublayers' delegates and it gets a garbage value. @johnepinterest 
",Adlai-Holler,johnepinterest
2222,2016-09-10 02:33:34,"@mikhailmulyar: thanks for catching this!  @maicki has created PR #2224 to fix this.
",hannahmbanana,maicki
2221,2016-09-10 02:01:53,"This is confirmed to work in Pinterest. Ready for review @levi @appleguy @maicki 
",Adlai-Holler,levi
2221,2016-09-10 02:01:53,"This is confirmed to work in Pinterest. Ready for review @levi @appleguy @maicki 
",Adlai-Holler,appleguy
2221,2016-09-10 02:01:53,"This is confirmed to work in Pinterest. Ready for review @levi @appleguy @maicki 
",Adlai-Holler,maicki
2220,2016-09-09 08:45:25,"## Current Status:
### 1) Initial PR was merged

The initial [PR](https://github.com/facebook/AsyncDisplayKit/pull/2110) for ASDK 2.0 Layout was merged into ASDK Master. This does not mean we are done with it. There are further API refinement necessary as described in the next steps section.
### 2) Documentation

I started to write documentation around our Layout system. It’s not just for the “new” API I would like to write guides to help developers become familiar with the whole system. Currently all the docs are available via a gist or a PR where you can comment on:
- [ASDK 2 Layout Documentation](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)
- [ASDK 2 Layout Documentation PR](https://github.com/facebook/AsyncDisplayKit/pull/2195)
- [ASDK 2.0 Layout Convert 1.x To 2.0](https://gist.github.com/maicki/c6c56c1f9ce514ee7c334e3016c3bad7)
## Next Steps:
### 1) Name of the `size` property on ASLayoutable

Currently each `ASLayoutable` has a `size` property. This property is abstracted away via width, height, minWidth, minHeight, maxWidth, maxHeight properties so not accessible at all for developers, but it’s possible to set a size via `setSizeWithCGSize:` or `setExactSizeWithCGSize`.

The biggest concern with the size property is the naming.  .size = is very similar to bounds.size =, yet they are extremely different.  In the most literal sense, this is not the “size of the node” — it is the size range that the node would like to be.

After some internal conversation with the ASDK team the following names were proposed:
- intrinsicContentSize
- layoutSize
- sizeRange
- contentSize
- containerSize
### 2) Rename `ASLayoutable` and `ASLayoutableSize`

We have been thinking about possible replacement names for `ASLayoutable`. Since the initial PR re-enforces the content area concept of each node, we come up with the name `ASLayoutContainer`. We already have this pattern at the `ASAsyncTransaction` level, with `ASAyncTransactionContainer` being a protocol that allows certain objects to create and maintain transactions
### 3) Rename `ASStaticLayoutSpec` to `ASRelativeLayoutSpec` / `ASAbsoluteLayoutSpec`

I think we are all on the same page that `ASStaticLayoutSpec` is not optimal for this kind of layout spec as it is currently. We first had a conversation around renaming it to `ASAbsoluteLayoutSpec`, but @levi had a good points to rename it to `ASRelativeLayoutSpec`. The problem with that is that we actually already have a `ASRelativeLayoutSpec`, that after talking with @appleguy is also not really a great name for the layout spec it represents.
### 4) `preferredFrameSize` deprecation

With the ASDK 2.0 Layout API the `preferredFrameSize` is not necessary anymore. The current question is how to handle the deprecation. Here are the two ways that where discussed internally:
- Radically deprecate `preferredFrameSize`  Remove all support for `preferredFrameSize` and just move the property to the deprecated header with a deprecated marker. This basically means setting a `preferredFrameSize` will do nothing anymore.
- Gracefully deprecate `preferredFrameSize`: Move the property to the deprecated header, but still support it the same way we did at the moment. Don’t remove code until maybe 3.0 and remove all appearances of `preferredFrameSize`
### 5) Introduce `layoutableThatFits:` and maybe deprecate `layoutSpecThatFits:`

With the introduction of ASDK 2.0 Layout we would support returning an `ASLayoutable` from `layoutSpecThatFits:`. As `layoutSpecThatFits:` explicitly returns a `ASLayoutSpec` class this is not possible. One way to handle this would be to introduce `layoutableThatFits:` (or something like  `layoutableContainerThatFits:`) where the developer can return an `ASLayoutable` (or whoever we will name it). This basically means it’s not necessary anymore to wrap nodes in layout specs just to return a layout spec from `layoutSpecThatFits:`, although it would not be needed in the first place. This pattern is often seen in production code as developers are wrapping nodes in static layout specs or inset layout specs (with inset zero) just to return a layout spec.

**Everyone who would like to be involved in shaping the future of ASDK 2.0 Layout please let us know you feedback and let’s work together to have great discussions and final decissions for “next steps” in ASDK as soon as possible.**
",maicki,levi
2220,2016-09-09 08:45:25,"## Current Status:
### 1) Initial PR was merged

The initial [PR](https://github.com/facebook/AsyncDisplayKit/pull/2110) for ASDK 2.0 Layout was merged into ASDK Master. This does not mean we are done with it. There are further API refinement necessary as described in the next steps section.
### 2) Documentation

I started to write documentation around our Layout system. It’s not just for the “new” API I would like to write guides to help developers become familiar with the whole system. Currently all the docs are available via a gist or a PR where you can comment on:
- [ASDK 2 Layout Documentation](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)
- [ASDK 2 Layout Documentation PR](https://github.com/facebook/AsyncDisplayKit/pull/2195)
- [ASDK 2.0 Layout Convert 1.x To 2.0](https://gist.github.com/maicki/c6c56c1f9ce514ee7c334e3016c3bad7)
## Next Steps:
### 1) Name of the `size` property on ASLayoutable

Currently each `ASLayoutable` has a `size` property. This property is abstracted away via width, height, minWidth, minHeight, maxWidth, maxHeight properties so not accessible at all for developers, but it’s possible to set a size via `setSizeWithCGSize:` or `setExactSizeWithCGSize`.

The biggest concern with the size property is the naming.  .size = is very similar to bounds.size =, yet they are extremely different.  In the most literal sense, this is not the “size of the node” — it is the size range that the node would like to be.

After some internal conversation with the ASDK team the following names were proposed:
- intrinsicContentSize
- layoutSize
- sizeRange
- contentSize
- containerSize
### 2) Rename `ASLayoutable` and `ASLayoutableSize`

We have been thinking about possible replacement names for `ASLayoutable`. Since the initial PR re-enforces the content area concept of each node, we come up with the name `ASLayoutContainer`. We already have this pattern at the `ASAsyncTransaction` level, with `ASAyncTransactionContainer` being a protocol that allows certain objects to create and maintain transactions
### 3) Rename `ASStaticLayoutSpec` to `ASRelativeLayoutSpec` / `ASAbsoluteLayoutSpec`

I think we are all on the same page that `ASStaticLayoutSpec` is not optimal for this kind of layout spec as it is currently. We first had a conversation around renaming it to `ASAbsoluteLayoutSpec`, but @levi had a good points to rename it to `ASRelativeLayoutSpec`. The problem with that is that we actually already have a `ASRelativeLayoutSpec`, that after talking with @appleguy is also not really a great name for the layout spec it represents.
### 4) `preferredFrameSize` deprecation

With the ASDK 2.0 Layout API the `preferredFrameSize` is not necessary anymore. The current question is how to handle the deprecation. Here are the two ways that where discussed internally:
- Radically deprecate `preferredFrameSize`  Remove all support for `preferredFrameSize` and just move the property to the deprecated header with a deprecated marker. This basically means setting a `preferredFrameSize` will do nothing anymore.
- Gracefully deprecate `preferredFrameSize`: Move the property to the deprecated header, but still support it the same way we did at the moment. Don’t remove code until maybe 3.0 and remove all appearances of `preferredFrameSize`
### 5) Introduce `layoutableThatFits:` and maybe deprecate `layoutSpecThatFits:`

With the introduction of ASDK 2.0 Layout we would support returning an `ASLayoutable` from `layoutSpecThatFits:`. As `layoutSpecThatFits:` explicitly returns a `ASLayoutSpec` class this is not possible. One way to handle this would be to introduce `layoutableThatFits:` (or something like  `layoutableContainerThatFits:`) where the developer can return an `ASLayoutable` (or whoever we will name it). This basically means it’s not necessary anymore to wrap nodes in layout specs just to return a layout spec from `layoutSpecThatFits:`, although it would not be needed in the first place. This pattern is often seen in production code as developers are wrapping nodes in static layout specs or inset layout specs (with inset zero) just to return a layout spec.

**Everyone who would like to be involved in shaping the future of ASDK 2.0 Layout please let us know you feedback and let’s work together to have great discussions and final decissions for “next steps” in ASDK as soon as possible.**
",maicki,appleguy
2210,2016-09-08 03:49:17,"Many thanks to @johnepinterest for this one:

""This commit makes some changes to the ASKD ""dealloc2main"" stuff that we are considering to include in 6.10 to potentially help us track down some top crashes.

This changes alters the ""dealloc2main"" retain / release logic slightly by also including an ""over release"" check when -retain is called.
The idea being: Catching the error at that point may allow us to determine at what point the incorrect -retain is happening, instead of at -release, at which point the forensic stack information about the error is no longer present.

There is also a small, one line change to -retainCount. It was changed to use __atomic_load_n instead of reading the ivar directly. I overlooked this case the last time I ran the thread sanitizer and cleaned up the problems it reported. No one calls retainCount anyways, but making the read of the ivar an atomic load is more formally correct.""
",hannahmbanana,johnepinterest
2210,2016-09-08 03:52:22,"@johnepinterest: is this wanted in 6.10 and 6.11?
",hannahmbanana,johnepinterest
2208,2016-09-08 01:29:23,"I went to debug some issues today and got annoyed with how off-the-mark our object descriptions are.
### `po` ASTextNode

**Before:** `<ASTextNode 0x7ff7dc841a00 [_ASDisplayView : 0x7ff7dad37620]>`

Very little info, nonstandard format.

**After:** `<ASTextNode: 0x7fcdac01ec00; text = ""Lick tail flick jump on the table stretching purr …""; frameInWindow = (106 350.5; 198 210); frame = (106 16; 198 210); cellNode = <KittenNode: 0x7fcdaae3f8c0>; interfaceState = { MeasureLayout | Preload | Display | Visible }; view = <_ASDisplayView: 0x7fcdac83fe80>>`

Way more information, including the frame onscreen, text and the nearest ASCellNode ancestor.

---
### `po` ASCellNode

**Before:** `<KittenNode 0x7ff7dac12350 name = Node for kitten #144 [_ASDisplayView : 0x7ff7dad1c0a0]>`

Very little info, nonstandard format.

**After:** `<KittenNode: 0x7fcdaae3f8c0; name = ""Node for kitten #144""; frameInWindow = (0 334.5; 320 242); frame = (0 0; 320 242); interfaceState = { MeasureLayout | Preload | Display | Visible }; view = <_ASDisplayView: 0x7fcdac83f7e0>; indexPath = (0, 3); tableView = <ASTableView: 0x7fcdad01b000>>`

Way more information, including index path and owning ASTableView/ASCollectionView/ASTableNode/ASCollectionNode.

---
### `po` _ASDisplayView

**Before:** `<<ASTextNode: 0x7ff7dc841a00; text = ""Lick quis nunc toss the mousie vel, tortor pellent…""; truncation string = ""…""; frame = {{106, 16}, {198, 384.5}}; renderer = 0x7ff7dc399520>, view = <_ASDisplayView: 0x7ff7dad37620; frame = (106 16; 198 384.5); userInteractionEnabled = NO; layer = <<ASTextNode: 0x7ff7dc841a00; text = ""Lick quis nunc toss the mousie vel, tortor pellent…""; truncation string = ""…""; frame = {{106, 16}, {198, 384.5}}; renderer = 0x7ff7dc399520>, layer = <_ASDisplayLayer: 0x7ff7dad172d0>>>>`

Misleading. Looks like the description for a node. Way too many angle brackets, duplicated info, stupid irrelevant info, etc.

**After:** `<ASTextNode-View: 0x7fcdac83fe80; node = <ASTextNode: 0x7fcdac01ec00; text = ""Lick tail flick jump on the table stretching purr …"">; frame = (106 16; 198 210); userInteractionEnabled = NO>`

Immaculate.

---

Ready for review @levi @appleguy @maicki !
",Adlai-Holler,levi
2208,2016-09-08 01:29:23,"I went to debug some issues today and got annoyed with how off-the-mark our object descriptions are.
### `po` ASTextNode

**Before:** `<ASTextNode 0x7ff7dc841a00 [_ASDisplayView : 0x7ff7dad37620]>`

Very little info, nonstandard format.

**After:** `<ASTextNode: 0x7fcdac01ec00; text = ""Lick tail flick jump on the table stretching purr …""; frameInWindow = (106 350.5; 198 210); frame = (106 16; 198 210); cellNode = <KittenNode: 0x7fcdaae3f8c0>; interfaceState = { MeasureLayout | Preload | Display | Visible }; view = <_ASDisplayView: 0x7fcdac83fe80>>`

Way more information, including the frame onscreen, text and the nearest ASCellNode ancestor.

---
### `po` ASCellNode

**Before:** `<KittenNode 0x7ff7dac12350 name = Node for kitten #144 [_ASDisplayView : 0x7ff7dad1c0a0]>`

Very little info, nonstandard format.

**After:** `<KittenNode: 0x7fcdaae3f8c0; name = ""Node for kitten #144""; frameInWindow = (0 334.5; 320 242); frame = (0 0; 320 242); interfaceState = { MeasureLayout | Preload | Display | Visible }; view = <_ASDisplayView: 0x7fcdac83f7e0>; indexPath = (0, 3); tableView = <ASTableView: 0x7fcdad01b000>>`

Way more information, including index path and owning ASTableView/ASCollectionView/ASTableNode/ASCollectionNode.

---
### `po` _ASDisplayView

**Before:** `<<ASTextNode: 0x7ff7dc841a00; text = ""Lick quis nunc toss the mousie vel, tortor pellent…""; truncation string = ""…""; frame = {{106, 16}, {198, 384.5}}; renderer = 0x7ff7dc399520>, view = <_ASDisplayView: 0x7ff7dad37620; frame = (106 16; 198 384.5); userInteractionEnabled = NO; layer = <<ASTextNode: 0x7ff7dc841a00; text = ""Lick quis nunc toss the mousie vel, tortor pellent…""; truncation string = ""…""; frame = {{106, 16}, {198, 384.5}}; renderer = 0x7ff7dc399520>, layer = <_ASDisplayLayer: 0x7ff7dad172d0>>>>`

Misleading. Looks like the description for a node. Way too many angle brackets, duplicated info, stupid irrelevant info, etc.

**After:** `<ASTextNode-View: 0x7fcdac83fe80; node = <ASTextNode: 0x7fcdac01ec00; text = ""Lick tail flick jump on the table stretching purr …"">; frame = (106 16; 198 210); userInteractionEnabled = NO>`

Immaculate.

---

Ready for review @levi @appleguy @maicki !
",Adlai-Holler,appleguy
2208,2016-09-08 01:29:23,"I went to debug some issues today and got annoyed with how off-the-mark our object descriptions are.
### `po` ASTextNode

**Before:** `<ASTextNode 0x7ff7dc841a00 [_ASDisplayView : 0x7ff7dad37620]>`

Very little info, nonstandard format.

**After:** `<ASTextNode: 0x7fcdac01ec00; text = ""Lick tail flick jump on the table stretching purr …""; frameInWindow = (106 350.5; 198 210); frame = (106 16; 198 210); cellNode = <KittenNode: 0x7fcdaae3f8c0>; interfaceState = { MeasureLayout | Preload | Display | Visible }; view = <_ASDisplayView: 0x7fcdac83fe80>>`

Way more information, including the frame onscreen, text and the nearest ASCellNode ancestor.

---
### `po` ASCellNode

**Before:** `<KittenNode 0x7ff7dac12350 name = Node for kitten #144 [_ASDisplayView : 0x7ff7dad1c0a0]>`

Very little info, nonstandard format.

**After:** `<KittenNode: 0x7fcdaae3f8c0; name = ""Node for kitten #144""; frameInWindow = (0 334.5; 320 242); frame = (0 0; 320 242); interfaceState = { MeasureLayout | Preload | Display | Visible }; view = <_ASDisplayView: 0x7fcdac83f7e0>; indexPath = (0, 3); tableView = <ASTableView: 0x7fcdad01b000>>`

Way more information, including index path and owning ASTableView/ASCollectionView/ASTableNode/ASCollectionNode.

---
### `po` _ASDisplayView

**Before:** `<<ASTextNode: 0x7ff7dc841a00; text = ""Lick quis nunc toss the mousie vel, tortor pellent…""; truncation string = ""…""; frame = {{106, 16}, {198, 384.5}}; renderer = 0x7ff7dc399520>, view = <_ASDisplayView: 0x7ff7dad37620; frame = (106 16; 198 384.5); userInteractionEnabled = NO; layer = <<ASTextNode: 0x7ff7dc841a00; text = ""Lick quis nunc toss the mousie vel, tortor pellent…""; truncation string = ""…""; frame = {{106, 16}, {198, 384.5}}; renderer = 0x7ff7dc399520>, layer = <_ASDisplayLayer: 0x7ff7dad172d0>>>>`

Misleading. Looks like the description for a node. Way too many angle brackets, duplicated info, stupid irrelevant info, etc.

**After:** `<ASTextNode-View: 0x7fcdac83fe80; node = <ASTextNode: 0x7fcdac01ec00; text = ""Lick tail flick jump on the table stretching purr …"">; frame = (106 16; 198 210); userInteractionEnabled = NO>`

Immaculate.

---

Ready for review @levi @appleguy @maicki !
",Adlai-Holler,maicki
2205,2016-09-07 06:12:48,"@smalllixin: Yikes - thanks for reporting! What version of ASDK are you using? @Adlai-Holler 
",hannahmbanana,Adlai-Holler
2205,2016-09-07 18:37:25,"@smalllixin: Thanks for the update! @Adlai-Holler is planning on investigating this today. 
",hannahmbanana,Adlai-Holler
2205,2016-11-14 04:48:38,"@Adlai-Holler - could you check that the milestone is correct for this? 
",hannahmbanana,Adlai-Holler
2204,2016-09-07 00:58:08,"We've seen this in Pinterest on rare occasions. @maicki could you take a look at this?
",Adlai-Holler,maicki
2203,2016-09-07 18:38:22,"@mikhailmulyar: Thanks for reporting this! This issue looks similar to #2205, which @Adlai-Holler is planning on investigating soon. 
",hannahmbanana,Adlai-Holler
2199,2016-09-06 11:43:28,"@Adlai-Holler Test results:


",maicki,Adlai-Holler
2197,2016-09-06 03:10:42,"By default, images are drawn with the normal blending mode. kCGBlendModeCopy is a lot faster when you can use it.

~~Compare the following results from 30 seconds of Pinterest, the first using normal and the second using copy. Currently PINRemoteImage returns images that falsely have alpha components so for this test, I ALWAYS used copy. So this is basically a theoretical maximum. But most of our large images are JPEGs so we should be able to get close.~~

|  | Normal | Copy |
| --- | --- | --- |
| ImageNode Drawing | 3361ms | 1813ms |
| TextNode Drawing (reference) | 353ms | 405ms |
| Ratio | 9.5x | 4.48x |

~~So image drawing, which is the most expensive operation we do, is twice as fast using copy.~~

The test results above are probably skewed because the image caches were warmed, and so less progressive rendering happened. But it's way better.

@appleguy @levi @maicki 
",Adlai-Holler,levi
2197,2016-09-06 03:10:42,"By default, images are drawn with the normal blending mode. kCGBlendModeCopy is a lot faster when you can use it.

~~Compare the following results from 30 seconds of Pinterest, the first using normal and the second using copy. Currently PINRemoteImage returns images that falsely have alpha components so for this test, I ALWAYS used copy. So this is basically a theoretical maximum. But most of our large images are JPEGs so we should be able to get close.~~

|  | Normal | Copy |
| --- | --- | --- |
| ImageNode Drawing | 3361ms | 1813ms |
| TextNode Drawing (reference) | 353ms | 405ms |
| Ratio | 9.5x | 4.48x |

~~So image drawing, which is the most expensive operation we do, is twice as fast using copy.~~

The test results above are probably skewed because the image caches were warmed, and so less progressive rendering happened. But it's way better.

@appleguy @levi @maicki 
",Adlai-Holler,appleguy
2197,2016-09-06 03:10:42,"By default, images are drawn with the normal blending mode. kCGBlendModeCopy is a lot faster when you can use it.

~~Compare the following results from 30 seconds of Pinterest, the first using normal and the second using copy. Currently PINRemoteImage returns images that falsely have alpha components so for this test, I ALWAYS used copy. So this is basically a theoretical maximum. But most of our large images are JPEGs so we should be able to get close.~~

|  | Normal | Copy |
| --- | --- | --- |
| ImageNode Drawing | 3361ms | 1813ms |
| TextNode Drawing (reference) | 353ms | 405ms |
| Ratio | 9.5x | 4.48x |

~~So image drawing, which is the most expensive operation we do, is twice as fast using copy.~~

The test results above are probably skewed because the image caches were warmed, and so less progressive rendering happened. But it's way better.

@appleguy @levi @maicki 
",Adlai-Holler,maicki
2196,2016-09-06 02:50:29,"@maicki Appreciate a quick review here. Thanks!
",nguyenhuy,maicki
2188,2016-09-03 19:36:03,"@maicki @appleguy @levi ready for review!
",Adlai-Holler,levi
2188,2016-09-03 19:36:03,"@maicki @appleguy @levi ready for review!
",Adlai-Holler,appleguy
2188,2016-09-03 19:36:03,"@maicki @appleguy @levi ready for review!
",Adlai-Holler,maicki
2186,2016-09-08 21:16:44,"@maicki @levi @appleguy thoughts? It'll be important to raise the visibility of this option because it's very important. We may even want to connect it to ASViewController's `neverShowPlaceholders` flag since this is part of that.
",Adlai-Holler,levi
2186,2016-09-08 21:16:44,"@maicki @levi @appleguy thoughts? It'll be important to raise the visibility of this option because it's very important. We may even want to connect it to ASViewController's `neverShowPlaceholders` flag since this is part of that.
",Adlai-Holler,appleguy
2186,2016-09-08 21:16:44,"@maicki @levi @appleguy thoughts? It'll be important to raise the visibility of this option because it's very important. We may even want to connect it to ASViewController's `neverShowPlaceholders` flag since this is part of that.
",Adlai-Holler,maicki
2186,2016-09-28 17:13:20,"Ready for next review @maicki @appleguy @garrettmoon 
",Adlai-Holler,garrettmoon
2186,2016-09-28 17:13:20,"Ready for next review @maicki @appleguy @garrettmoon 
",Adlai-Holler,appleguy
2186,2016-09-28 17:13:20,"Ready for next review @maicki @appleguy @garrettmoon 
",Adlai-Holler,maicki
2178,2016-09-01 16:42:37,"It is a custom object that can be optionally provided by ASCollectionDataSource and later retrieved from the collection view to be used in collection view layout. The idea was first proposed by @Adlai-Holler in #2067. 

I've been playing around with different ways to implement this feature, including having an ASSection that is a proxy of cell nodes array ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:ASSectionContext_proxy?expand=1)), or an ASSection that is a subclass of NSMutableArray<ASCellNode *> ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:ASSectionContext_array_subclass?expand=1)). I think the implementation in this PR is simpler and thus, more elegant.

Please let me know what you think, @Adlai-Holler @maicki @appleguy @garrettmoon @levi. Thanks!

TODO:
- [ ] Documentation ([Overview.md](https://github.com/facebook/AsyncDisplayKit/blob/master/plans/section-infos-api/Overview.md))
- [x] Unit test
",nguyenhuy,levi
2178,2016-09-01 16:42:37,"It is a custom object that can be optionally provided by ASCollectionDataSource and later retrieved from the collection view to be used in collection view layout. The idea was first proposed by @Adlai-Holler in #2067. 

I've been playing around with different ways to implement this feature, including having an ASSection that is a proxy of cell nodes array ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:ASSectionContext_proxy?expand=1)), or an ASSection that is a subclass of NSMutableArray<ASCellNode *> ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:ASSectionContext_array_subclass?expand=1)). I think the implementation in this PR is simpler and thus, more elegant.

Please let me know what you think, @Adlai-Holler @maicki @appleguy @garrettmoon @levi. Thanks!

TODO:
- [ ] Documentation ([Overview.md](https://github.com/facebook/AsyncDisplayKit/blob/master/plans/section-infos-api/Overview.md))
- [x] Unit test
",nguyenhuy,garrettmoon
2178,2016-09-01 16:42:37,"It is a custom object that can be optionally provided by ASCollectionDataSource and later retrieved from the collection view to be used in collection view layout. The idea was first proposed by @Adlai-Holler in #2067. 

I've been playing around with different ways to implement this feature, including having an ASSection that is a proxy of cell nodes array ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:ASSectionContext_proxy?expand=1)), or an ASSection that is a subclass of NSMutableArray<ASCellNode *> ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:ASSectionContext_array_subclass?expand=1)). I think the implementation in this PR is simpler and thus, more elegant.

Please let me know what you think, @Adlai-Holler @maicki @appleguy @garrettmoon @levi. Thanks!

TODO:
- [ ] Documentation ([Overview.md](https://github.com/facebook/AsyncDisplayKit/blob/master/plans/section-infos-api/Overview.md))
- [x] Unit test
",nguyenhuy,appleguy
2178,2016-09-01 16:42:37,"It is a custom object that can be optionally provided by ASCollectionDataSource and later retrieved from the collection view to be used in collection view layout. The idea was first proposed by @Adlai-Holler in #2067. 

I've been playing around with different ways to implement this feature, including having an ASSection that is a proxy of cell nodes array ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:ASSectionContext_proxy?expand=1)), or an ASSection that is a subclass of NSMutableArray<ASCellNode *> ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:ASSectionContext_array_subclass?expand=1)). I think the implementation in this PR is simpler and thus, more elegant.

Please let me know what you think, @Adlai-Holler @maicki @appleguy @garrettmoon @levi. Thanks!

TODO:
- [ ] Documentation ([Overview.md](https://github.com/facebook/AsyncDisplayKit/blob/master/plans/section-infos-api/Overview.md))
- [x] Unit test
",nguyenhuy,maicki
2178,2016-09-01 16:42:37,"It is a custom object that can be optionally provided by ASCollectionDataSource and later retrieved from the collection view to be used in collection view layout. The idea was first proposed by @Adlai-Holler in #2067. 

I've been playing around with different ways to implement this feature, including having an ASSection that is a proxy of cell nodes array ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:ASSectionContext_proxy?expand=1)), or an ASSection that is a subclass of NSMutableArray<ASCellNode *> ([here](https://github.com/facebook/AsyncDisplayKit/compare/master...nguyenhuy:ASSectionContext_array_subclass?expand=1)). I think the implementation in this PR is simpler and thus, more elegant.

Please let me know what you think, @Adlai-Holler @maicki @appleguy @garrettmoon @levi. Thanks!

TODO:
- [ ] Documentation ([Overview.md](https://github.com/facebook/AsyncDisplayKit/blob/master/plans/section-infos-api/Overview.md))
- [x] Unit test
",nguyenhuy,Adlai-Holler
2177,2016-09-06 03:37:58,"@Adlai-Holler Any quick thoughts on that?
",maicki,Adlai-Holler
2176,2017-01-12 20:17:13,@maicki recently suggested that we move the examples to a different repository,hannahmbanana,maicki
2175,2016-09-06 06:05:48,"@jaichaudhry: thanks for including the backtrace!

@Adlai-Holler: any recent changes that might have caused this? If you have a few minutes this week to educate me, we should document best practices for updating tables / collections.
",hannahmbanana,Adlai-Holler
2175,2016-09-12 16:49:00,"@hannahmbanana @Adlai-Holler any updates on this ?
",jaichaudhry,Adlai-Holler
2175,2016-11-24 11:18:07,@hannahmbanana @Adlai-Holler this has been fixed in 2.0. Thanks a lot :),jaichaudhry,Adlai-Holler
2172,2016-09-02 03:42:42,"@Adlai-Holler Ready for first review.
",maicki,Adlai-Holler
2171,2016-08-31 18:57:10,"Ready for review @maicki ! Once landed we should bring this to everywhere.
",Adlai-Holler,maicki
2167,2016-08-30 16:57:30,"To be honest I don't really like the idea to expose this functions. We should have public accessors in `ASDisplayNode` where you can get the state of it. @Adlai-Holler thoughts?
",maicki,Adlai-Holler
2167,2016-08-30 17:25:45,"Was the point of inlining these functions solely for performance? There might be a very slight performance hit if you wrap the same checks behind a property or method. Originally created this PR due to @appleguy 's suggestion.
",samhsiung,appleguy
2166,2016-08-30 14:54:36,"Next round of ASTextNode optimization ... adding an LRU cache for caching `ASTextKitRenderer` in the `ASTextNode`.

@Adlai-Holler Let's run it against our tests ...
",maicki,Adlai-Holler
2166,2016-08-30 22:28:20,"@Adlai-Holler Let's adjust / add performance tests to consider the caching of the text kit renderer so we have a bit of a better overview what is going on.
",maicki,Adlai-Holler
2161,2016-08-28 22:28:37,"This will hopefully help us monitor and improve our text layout performance. There is certainly a ton of room for improvement. 

The tests are currently single-threaded. In the future we could beef em up to be multithreaded. 

Ready for review @maicki @appleguy @garrettmoon @levi 

Here are the current results on my machine:


",Adlai-Holler,levi
2161,2016-08-28 22:28:37,"This will hopefully help us monitor and improve our text layout performance. There is certainly a ton of room for improvement. 

The tests are currently single-threaded. In the future we could beef em up to be multithreaded. 

Ready for review @maicki @appleguy @garrettmoon @levi 

Here are the current results on my machine:


",Adlai-Holler,garrettmoon
2161,2016-08-28 22:28:37,"This will hopefully help us monitor and improve our text layout performance. There is certainly a ton of room for improvement. 

The tests are currently single-threaded. In the future we could beef em up to be multithreaded. 

Ready for review @maicki @appleguy @garrettmoon @levi 

Here are the current results on my machine:


",Adlai-Holler,appleguy
2161,2016-08-28 22:28:37,"This will hopefully help us monitor and improve our text layout performance. There is certainly a ton of room for improvement. 

The tests are currently single-threaded. In the future we could beef em up to be multithreaded. 

Ready for review @maicki @appleguy @garrettmoon @levi 

Here are the current results on my machine:


",Adlai-Holler,maicki
2157,2016-08-27 23:17:34,"In preparation for a fix that is coming to `ASDisplayNode` layout mechanism let's start with having tests for the layout behavior of `ASDisplayNode`

cc @Adlai-Holler @garrettmoon 
",maicki,garrettmoon
2157,2016-08-27 23:17:34,"In preparation for a fix that is coming to `ASDisplayNode` layout mechanism let's start with having tests for the layout behavior of `ASDisplayNode`

cc @Adlai-Holler @garrettmoon 
",maicki,Adlai-Holler
2156,2016-08-27 18:22:51,"I'm about to start testing the issues we've been having with deallocation, and in order to mimic real conditions in an app I want it to be ARC. So I figured let's get this chore out the way.

Ready for review @maicki @garrettmoon @appleguy @levi 
",Adlai-Holler,levi
2156,2016-08-27 18:22:51,"I'm about to start testing the issues we've been having with deallocation, and in order to mimic real conditions in an app I want it to be ARC. So I figured let's get this chore out the way.

Ready for review @maicki @garrettmoon @appleguy @levi 
",Adlai-Holler,garrettmoon
2156,2016-08-27 18:22:51,"I'm about to start testing the issues we've been having with deallocation, and in order to mimic real conditions in an app I want it to be ARC. So I figured let's get this chore out the way.

Ready for review @maicki @garrettmoon @appleguy @levi 
",Adlai-Holler,appleguy
2156,2016-08-27 18:22:51,"I'm about to start testing the issues we've been having with deallocation, and in order to mimic real conditions in an app I want it to be ARC. So I figured let's get this chore out the way.

Ready for review @maicki @garrettmoon @appleguy @levi 
",Adlai-Holler,maicki
2156,2016-08-27 22:05:48,"Thanks @garrettmoon, feedback addressed!
",Adlai-Holler,garrettmoon
2155,2016-08-27 17:00:47,"_ASPendingState objects can add up very quickly when adding
many nodes. This is especially an issue in large collection views
and table views. This needs to be weighed against the cost of
reallocing a _ASPendingState. So in range managed nodes we
delete the pending state, otherwise we just clear it.

@Adlai-Holler @appleguy Does this patch make sense? Is it safe?

Profiling Pinterest and just scrolling down these start to add up.
With ~500 pin nodes and a total of 115MiB, pending state made
up 3.52MiB. With this patch, no matter how far you scroll, pending
state stays at about 500KiB.

Separately, I looked at allocation of nodes vs pending states
created when scrolling and they approximately matched when
scrolling the homefeed suggesting there's no cost to recreating them?
",garrettmoon,appleguy
2155,2016-08-27 17:00:47,"_ASPendingState objects can add up very quickly when adding
many nodes. This is especially an issue in large collection views
and table views. This needs to be weighed against the cost of
reallocing a _ASPendingState. So in range managed nodes we
delete the pending state, otherwise we just clear it.

@Adlai-Holler @appleguy Does this patch make sense? Is it safe?

Profiling Pinterest and just scrolling down these start to add up.
With ~500 pin nodes and a total of 115MiB, pending state made
up 3.52MiB. With this patch, no matter how far you scroll, pending
state stays at about 500KiB.

Separately, I looked at allocation of nodes vs pending states
created when scrolling and they approximately matched when
scrolling the homefeed suggesting there's no cost to recreating them?
",garrettmoon,Adlai-Holler
2153,2016-08-27 00:01:05,"@Adlai-Holler That's a first fast try to not recreate the text kit components if constrained size changes. Let's check in performance testing against it.

Furthermore one test is failing currently ... I disabled it ... so obviously this is not safe to merge at all!
",maicki,Adlai-Holler
2149,2016-08-26 20:46:34,"This should be brought to Pinterest ASAP. Ready for review @maicki @appleguy 
",Adlai-Holler,appleguy
2149,2016-08-26 20:46:34,"This should be brought to Pinterest ASAP. Ready for review @maicki @appleguy 
",Adlai-Holler,maicki
2146,2016-08-26 18:44:12,"cc @Adlai-Holler @garrettmoon 
",maicki,garrettmoon
2146,2016-08-26 18:44:12,"cc @Adlai-Holler @garrettmoon 
",maicki,Adlai-Holler
2145,2016-08-26 05:30:47,"`dispatch_apply` always spawns only one thread per core. That's not enough for us!! So I made a variant that allows you to specify how many threads you want.

@appleguy @maicki @levi 
",Adlai-Holler,levi
2145,2016-08-26 05:30:47,"`dispatch_apply` always spawns only one thread per core. That's not enough for us!! So I made a variant that allows you to specify how many threads you want.

@appleguy @maicki @levi 
",Adlai-Holler,appleguy
2145,2016-08-26 05:30:47,"`dispatch_apply` always spawns only one thread per core. That's not enough for us!! So I made a variant that allows you to specify how many threads you want.

@appleguy @maicki @levi 
",Adlai-Holler,maicki
2144,2016-09-07 03:40:35,"@Adlai-Holler @maicki: should we consider renaming these for 2.0?
",hannahmbanana,maicki
2144,2016-09-07 03:45:08,"Yeah. It’ll be a bit of a hassle because PINRemoteImage actually sets those names in class PINAnimatedImage and we mirror them in protocol ASAnimatedImage.

It’ll be wacky but we’ll need to use other names. Unfortunately deprecating the current ones probably won’t be enough – we’ll have to remove them. 

ship://Problems/210

> On Sep 6, 2016, at 8:40 PM, Hannah Troisi notifications@github.com wrote:
> 
> @Adlai-Holler https://github.com/Adlai-Holler @maicki https://github.com/maicki: should we consider renaming these for 2.0?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/2144#issuecomment-245166279, or mute the thread https://github.com/notifications/unsubscribe-auth/ACWkTU34--OIHGv7eT8anrPMtxvaLUEGks5qnjJJgaJpZM4JtqjY.
",Adlai-Holler,maicki
2143,2016-08-26 00:17:25,"This fixes an issue where view controllers that participate in custom transitions may be the wrong size at the end. It comes with a unit test!

The issue was, view controllers in custom transitions are fullscreen in viewWillAppear: and when they get their correct size, we then overwrite it by calling -setNeedsLayout in -propagateNewEnvironmentTraitCollection, which remeasures us against the old bad size.

The solution is to measure the VC against the new constrained size when the new environment trait collection goes down.

This fixes Martin's issue, and it should go into 6.10. @garrettmoon @maicki @rcancro 
",Adlai-Holler,garrettmoon
2143,2016-08-26 00:17:25,"This fixes an issue where view controllers that participate in custom transitions may be the wrong size at the end. It comes with a unit test!

The issue was, view controllers in custom transitions are fullscreen in viewWillAppear: and when they get their correct size, we then overwrite it by calling -setNeedsLayout in -propagateNewEnvironmentTraitCollection, which remeasures us against the old bad size.

The solution is to measure the VC against the new constrained size when the new environment trait collection goes down.

This fixes Martin's issue, and it should go into 6.10. @garrettmoon @maicki @rcancro 
",Adlai-Holler,rcancro
2143,2016-08-26 00:17:25,"This fixes an issue where view controllers that participate in custom transitions may be the wrong size at the end. It comes with a unit test!

The issue was, view controllers in custom transitions are fullscreen in viewWillAppear: and when they get their correct size, we then overwrite it by calling -setNeedsLayout in -propagateNewEnvironmentTraitCollection, which remeasures us against the old bad size.

The solution is to measure the VC against the new constrained size when the new environment trait collection goes down.

This fixes Martin's issue, and it should go into 6.10. @garrettmoon @maicki @rcancro 
",Adlai-Holler,maicki
2143,2016-08-26 04:21:37,"Worked with @maicki on this – landing. 
",Adlai-Holler,maicki
2142,2016-08-25 21:31:20,"This API was a hack. In the future we will be reusing NSTextStorage objects and we need to have control over how they are created. 

Pinterest is no longer using this API.

Ready for review @maicki @appleguy 
",Adlai-Holler,appleguy
2142,2016-08-25 21:31:20,"This API was a hack. In the future we will be reusing NSTextStorage objects and we need to have control over how they are created. 

Pinterest is no longer using this API.

Ready for review @maicki @appleguy 
",Adlai-Holler,maicki
2140,2016-10-23 20:00:40,"@appleguy Could you please take a look at this issue?
",abbasmousavi,appleguy
2140,2016-11-15 21:39:42,"@Adlai-Holler can you take a stab at figuring out if we can fix this in the 2.0 milestone?
",garrettmoon,Adlai-Holler
2139,2016-08-25 16:51:46,"`self.children` causes the creation of an NSArray, so for vertical stacks, we were creating 4. This cuts us down to 1. Per @maicki in the future we should be even more aggressive but this is a start.

Ready for review @maicki 
",Adlai-Holler,maicki
2136,2016-08-25 02:58:11,"In the future we should try and reuse these, as setting them up is super expensive, but this brings a pretty serious benefit by letting layout continue in parallel with the teardown:

[BeforeAndAfterTextKitDeallocationQueue.trace.zip](https://github.com/facebook/AsyncDisplayKit/files/436083/BeforeAndAfterTextKitDeallocationQueue.trace.zip)

@appleguy @maicki 
",Adlai-Holler,appleguy
2136,2016-08-25 02:58:11,"In the future we should try and reuse these, as setting them up is super expensive, but this brings a pretty serious benefit by letting layout continue in parallel with the teardown:

[BeforeAndAfterTextKitDeallocationQueue.trace.zip](https://github.com/facebook/AsyncDisplayKit/files/436083/BeforeAndAfterTextKitDeallocationQueue.trace.zip)

@appleguy @maicki 
",Adlai-Holler,maicki
2135,2016-08-25 02:37:59,"We need a way to force a synchronous measurement in a layout transition. As the API we wanted to introduce in 2.0 does not didn't took that in consideration I think it makes the most sense to go back to the old API but not to force calling the layout transition API from the main thread.

@appleguy @levi @Adlai-Holler Would be great if you could take a look
",maicki,levi
2135,2016-08-25 02:37:59,"We need a way to force a synchronous measurement in a layout transition. As the API we wanted to introduce in 2.0 does not didn't took that in consideration I think it makes the most sense to go back to the old API but not to force calling the layout transition API from the main thread.

@appleguy @levi @Adlai-Holler Would be great if you could take a look
",maicki,appleguy
2135,2016-08-25 02:37:59,"We need a way to force a synchronous measurement in a layout transition. As the API we wanted to introduce in 2.0 does not didn't took that in consideration I think it makes the most sense to go back to the old API but not to force calling the layout transition API from the main thread.

@appleguy @levi @Adlai-Holler Would be great if you could take a look
",maicki,Adlai-Holler
2132,2016-08-24 22:20:32,"@maicki this should work, right?
",garrettmoon,maicki
2128,2016-08-26 04:20:50,"@maicki @levi @hannahmbanana Thoughts?
",Adlai-Holler,levi
2128,2016-08-26 04:20:50,"@maicki @levi @hannahmbanana Thoughts?
",Adlai-Holler,maicki
2128,2016-08-26 04:20:50,"@maicki @levi @hannahmbanana Thoughts?
",Adlai-Holler,hannahmbanana
2125,2016-08-24 17:36:38,"Ah yeah, all our example projects have to be cloned from the same template. @hannahmbanana knows more about it than I do – could you take a look?
",Adlai-Holler,hannahmbanana
2124,2016-08-24 00:39:41,"Now that ASAsyncTransaction manages a thread pool, we don't need to use a semaphore to limit concurrent displays.

@appleguy should probably review this since he's the only one with super deep knowledge about this code. Obviously this isn't urgent, it'll be here whenever you have time. 
",Adlai-Holler,appleguy
2121,2016-08-23 18:44:09,"We previously waited until `layoutSubviews` but that's too late as @rcancro discovered.

I added a failing test case that ensures everything is up-to-date before the first relayout after a rotation.

I expect this to be somewhat controversial because I did something unusual. In order for ASCollectionView to find out about the bounds change before UICollectionView requeries the layout object, I added an optional `ASCALayerExtendedDelegate` protocol. Basically if your view responds to these methods, ASDisplayLayer will call them. I can't use our _ASDisplayLayerDelegate because collection views may not have nodes.

I considered adding an _ASCollectionLayer class with special functionality but decided this more general solution was better.

I also renamed some ivars in ASCollectionView for clarity:
- `_maxSizeForNodesConstrainedSize` -> `_lastBoundsSizeUsedForMeasuringNodes`
  - This value is not actually used as the max size for nodes constrained size.
- `_ignoreMaxSizeChange` -> `_ignoreNextBoundsSizeChangeForMeasuringNodes`
  - The ignore only lasts for one change, and it's about bounds size for the particular purpose of remeasuring nodes.

Ready for review @maicki @levi @appleguy @rcancro !
",Adlai-Holler,levi
2121,2016-08-23 18:44:09,"We previously waited until `layoutSubviews` but that's too late as @rcancro discovered.

I added a failing test case that ensures everything is up-to-date before the first relayout after a rotation.

I expect this to be somewhat controversial because I did something unusual. In order for ASCollectionView to find out about the bounds change before UICollectionView requeries the layout object, I added an optional `ASCALayerExtendedDelegate` protocol. Basically if your view responds to these methods, ASDisplayLayer will call them. I can't use our _ASDisplayLayerDelegate because collection views may not have nodes.

I considered adding an _ASCollectionLayer class with special functionality but decided this more general solution was better.

I also renamed some ivars in ASCollectionView for clarity:
- `_maxSizeForNodesConstrainedSize` -> `_lastBoundsSizeUsedForMeasuringNodes`
  - This value is not actually used as the max size for nodes constrained size.
- `_ignoreMaxSizeChange` -> `_ignoreNextBoundsSizeChangeForMeasuringNodes`
  - The ignore only lasts for one change, and it's about bounds size for the particular purpose of remeasuring nodes.

Ready for review @maicki @levi @appleguy @rcancro !
",Adlai-Holler,rcancro
2121,2016-08-23 18:44:09,"We previously waited until `layoutSubviews` but that's too late as @rcancro discovered.

I added a failing test case that ensures everything is up-to-date before the first relayout after a rotation.

I expect this to be somewhat controversial because I did something unusual. In order for ASCollectionView to find out about the bounds change before UICollectionView requeries the layout object, I added an optional `ASCALayerExtendedDelegate` protocol. Basically if your view responds to these methods, ASDisplayLayer will call them. I can't use our _ASDisplayLayerDelegate because collection views may not have nodes.

I considered adding an _ASCollectionLayer class with special functionality but decided this more general solution was better.

I also renamed some ivars in ASCollectionView for clarity:
- `_maxSizeForNodesConstrainedSize` -> `_lastBoundsSizeUsedForMeasuringNodes`
  - This value is not actually used as the max size for nodes constrained size.
- `_ignoreMaxSizeChange` -> `_ignoreNextBoundsSizeChangeForMeasuringNodes`
  - The ignore only lasts for one change, and it's about bounds size for the particular purpose of remeasuring nodes.

Ready for review @maicki @levi @appleguy @rcancro !
",Adlai-Holler,maicki
2121,2016-08-23 18:44:09,"We previously waited until `layoutSubviews` but that's too late as @rcancro discovered.

I added a failing test case that ensures everything is up-to-date before the first relayout after a rotation.

I expect this to be somewhat controversial because I did something unusual. In order for ASCollectionView to find out about the bounds change before UICollectionView requeries the layout object, I added an optional `ASCALayerExtendedDelegate` protocol. Basically if your view responds to these methods, ASDisplayLayer will call them. I can't use our _ASDisplayLayerDelegate because collection views may not have nodes.

I considered adding an _ASCollectionLayer class with special functionality but decided this more general solution was better.

I also renamed some ivars in ASCollectionView for clarity:
- `_maxSizeForNodesConstrainedSize` -> `_lastBoundsSizeUsedForMeasuringNodes`
  - This value is not actually used as the max size for nodes constrained size.
- `_ignoreMaxSizeChange` -> `_ignoreNextBoundsSizeChangeForMeasuringNodes`
  - The ignore only lasts for one change, and it's about bounds size for the particular purpose of remeasuring nodes.

Ready for review @maicki @levi @appleguy @rcancro !
",Adlai-Holler,appleguy
2119,2016-09-12 21:18:24,"@gazreese I share your concerns about performance and architecture here. We have the alternative of doing `_playerNode.hidden=YES` and unhiding it in `play`.

That may save us some time during the state transitions, but it does have the drawback of accumulating AVPlayerLayer instances if the user scrolls through a feed of videos, watching each one and letting it reset. The developer may not be aware that the AVPlayerLayers are sticking around. 

I believe that AVPlayer itself, not the player layer, manages the resources for the video so it would be unlikely to cause more network traffic either way we go.

I advocate for showing/hiding the player layer rather than removing/recreating it but I'd like @appleguy @maxsz or @binl to weigh in as they have more expertise around AVFoundation.
",Adlai-Holler,maxsz
2119,2016-09-12 21:18:24,"@gazreese I share your concerns about performance and architecture here. We have the alternative of doing `_playerNode.hidden=YES` and unhiding it in `play`.

That may save us some time during the state transitions, but it does have the drawback of accumulating AVPlayerLayer instances if the user scrolls through a feed of videos, watching each one and letting it reset. The developer may not be aware that the AVPlayerLayers are sticking around. 

I believe that AVPlayer itself, not the player layer, manages the resources for the video so it would be unlikely to cause more network traffic either way we go.

I advocate for showing/hiding the player layer rather than removing/recreating it but I'd like @appleguy @maxsz or @binl to weigh in as they have more expertise around AVFoundation.
",Adlai-Holler,appleguy
2119,2016-09-28 12:42:07,"Hi @Adlai-Holler, apologies for the delay getting back to you on this. I've been on holiday and just got back.

As my project is exactly as you describe, i.e. a feed of videos that the user scrolls through, I'm quite keen on the original remove/recreate method. I'm working in a memory-constrained environment, so I can't really risk leaking the AVPlayerLayer objects.

@appleguy @maxsz or @binl - if you have any comments they would be much appreciated.
",gazreese,maxsz
2119,2016-09-28 12:42:07,"Hi @Adlai-Holler, apologies for the delay getting back to you on this. I've been on holiday and just got back.

As my project is exactly as you describe, i.e. a feed of videos that the user scrolls through, I'm quite keen on the original remove/recreate method. I'm working in a memory-constrained environment, so I can't really risk leaking the AVPlayerLayer objects.

@appleguy @maxsz or @binl - if you have any comments they would be much appreciated.
",gazreese,appleguy
2118,2016-08-23 03:37:03,"Ready for review & fast-track to p6.10 @appleguy @levi @garrettmoon @maicki 
",Adlai-Holler,levi
2118,2016-08-23 03:37:03,"Ready for review & fast-track to p6.10 @appleguy @levi @garrettmoon @maicki 
",Adlai-Holler,garrettmoon
2118,2016-08-23 03:37:03,"Ready for review & fast-track to p6.10 @appleguy @levi @garrettmoon @maicki 
",Adlai-Holler,appleguy
2118,2016-08-23 03:37:03,"Ready for review & fast-track to p6.10 @appleguy @levi @garrettmoon @maicki 
",Adlai-Holler,maicki
2115,2016-08-21 19:59:40,"Love it! @maicki @levi thoughts?
",Adlai-Holler,levi
2115,2016-08-21 19:59:40,"Love it! @maicki @levi thoughts?
",Adlai-Holler,maicki
2110,2016-08-19 23:53:56,"### Goal:

The main goal is to add a constrained size to the `ASLayoutable` protocol. This will be represented by a `ASLayoutableSize` struct. In comparison to `-[ASDisplayNode preferredFrameSize]` this size can be set on every `ASLayoutable` and not only on a `ASDisplayNode` object.

The API is loosely inspired from the CSS Box Model. An ASLayoutableSize looks like this:



That said `ASLayoutableSize` is abstracted away from all `ASLayoutable`s and to set e.g. the `width` you just have to set it directly to an `ASLayoutable`:



By default all `ASLayoutableSize` values will be `ASDimensionTypeAuto`, that means that it's indicating ""I have no opinion"" and may be resolved in whatever way makes most sense given the circumstances, e.g. in case of a `ASTextNode`, it is automatically calculates it's size based on it's content if `width` and `height` are `ASDimensionTypeAuto`.
### Documentation:
- [Layout with AsyncDisplayKit](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)
- [Convert from 1.x to 2](https://gist.github.com/maicki/c6c56c1f9ce514ee7c334e3016c3bad7)
### Changes:
- [x] Add `-[ASLayoutable size]` with type `ASLayoutableSize`.
- [x] `-[ASLayoutable size]` is not exposed, therefore the following properties where added: `-[ASLayoutable width]`, `-[ASLayoutable height]`, `-[ASLayoutable minHeight]`, `-[ASLayoutable maxHeight]`, `-[ASLayoutable minWidth]`, `-[ASLayoutable maxWidth]`
- [x] Deprecate `-[ASDisplayNode preferredFrameSize]` and remove support for it in `ASTextNode`, `ASImageNode`, `ASButtonNode`
- [x] Merge `-[ASLayoutable calculateLayoutThatFits:` and `-[ASLayoutable measureWithSizeRange:]` (more details in the header description for this methods, but here is a tldr):
  - Changed behavior of `-[ASLayoutable calculateLayoutThatFits:]`: Call this on children layoutables to compute their layouts within your implementation of `-[ASLayoutable calculateLayoutThatFits:]`.
  - Introduce `-[ASLayoutable layoutThatFits:]`, `-[ASLayoutable layoutThatFits:parentSize:]`
  - Introduce `-[ASLayoutable calculateLayoutThatFits:restrictedToSizeRange:relativeToParentSize:]`: ASLayoutable's implementation of `-layoutThatFits:parentSize:` calls this method to resolve the component's size against `parentSize`, intersect it with `constrainedSize`, and call `-calculateLayoutThatFits:` with the result. In certain advanced cases, you may want to customize this logic. Overriding this method allows you to receive all three parameters and do the computation yourself.
- [x] Deprecate `-[ASDisplayNode measure:]`: Naming is not optimal and familiar for developers
- [x] Deprecate `-[ASLayoutable measureWithSizeRange:]` use `ASCalculateRootLayout ()` instead
- [x] Add `ASCalculateRootLayout()`: Safely calculates the layout of the given root layoutable by guarding against nil nodes.
- [x] Add `ASCalculateLayout()`: Safely computes the layout of the given node by guarding against nil nodes.
- [x] Rename `-[ASLayout constrainedSizeRange]` to `-[ASLayout constrainedSize]` to align with all other places we use a 'constrainedSize'
- [x] Rename `-[ASLayout layoutableObject]` to `-[ASLayout layoutable]`
- [x] Remove `-[ASDisplayNode preferredFrameSize]` and move over to `-[ASDisplayNode size]` for 'examples_extra/'
- [x] Add deprecation warning to `-[ASDisplayNode preferredFrameSize]`
- [x] Add deprecation warning to `-[ASLayoutable measureWithSizeRange:]`
- [x] Remove Unit Tests for `-[ASDisplayNode preferredFrameSize]`
- [X] Adjust Unit Tests for `-[ASLayoutable size]`
- [x] Use `[ASLayoutable size]` for layout the child within a `ASStaticLayoutSpec` as we will remove `[ASStaticLayoutable sizeRange]` and `ASRelativeSizeRange` 
- [x] Add `ASWrapperLayoutSpec` that can be used as wrapper around a `ASLayoutable` to just pass through the layout creation
- [x] Remove `ASRelativeSizeRange` as well as `sizeRange` in `ASStaticLayoutSpec`.
- [x] Make `ASRelativeSize` private in `ASDimension.h` as it's used in there for some calculations
- [x] Rename `ASRelativeDimension` to `ASDimension`
- [x] Add helper for creating `ASDimension`: `ASDimensionMake`, `ASD`
- [x] Deprecate `-[ASDisplayNode measure:]`
- [x] Introduce `-[ASDisplayNode layoutThatFits:]`
- [x] Fix `/examples` for usage with new APIs
- [x] Rename `ASSize` to `ASLayoutableSize`
- [ ] Documentation: [Layout with AsyncDisplayKit](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)
- [ ] Conversion documentation: [Convert from 1.x to 2](https://gist.github.com/maicki/c6c56c1f9ce514ee7c334e3016c3bad7)
- [ ] Look for // TODO: layout: for further open tasks

<br>
**_This PR is one of the initiatives to make the Layout API more clear. Every feedback is more than welcome!**_

cc @appleguy @Adlai-Holler @garrettmoon @levi 
",maicki,levi
2110,2016-08-19 23:53:56,"### Goal:

The main goal is to add a constrained size to the `ASLayoutable` protocol. This will be represented by a `ASLayoutableSize` struct. In comparison to `-[ASDisplayNode preferredFrameSize]` this size can be set on every `ASLayoutable` and not only on a `ASDisplayNode` object.

The API is loosely inspired from the CSS Box Model. An ASLayoutableSize looks like this:



That said `ASLayoutableSize` is abstracted away from all `ASLayoutable`s and to set e.g. the `width` you just have to set it directly to an `ASLayoutable`:



By default all `ASLayoutableSize` values will be `ASDimensionTypeAuto`, that means that it's indicating ""I have no opinion"" and may be resolved in whatever way makes most sense given the circumstances, e.g. in case of a `ASTextNode`, it is automatically calculates it's size based on it's content if `width` and `height` are `ASDimensionTypeAuto`.
### Documentation:
- [Layout with AsyncDisplayKit](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)
- [Convert from 1.x to 2](https://gist.github.com/maicki/c6c56c1f9ce514ee7c334e3016c3bad7)
### Changes:
- [x] Add `-[ASLayoutable size]` with type `ASLayoutableSize`.
- [x] `-[ASLayoutable size]` is not exposed, therefore the following properties where added: `-[ASLayoutable width]`, `-[ASLayoutable height]`, `-[ASLayoutable minHeight]`, `-[ASLayoutable maxHeight]`, `-[ASLayoutable minWidth]`, `-[ASLayoutable maxWidth]`
- [x] Deprecate `-[ASDisplayNode preferredFrameSize]` and remove support for it in `ASTextNode`, `ASImageNode`, `ASButtonNode`
- [x] Merge `-[ASLayoutable calculateLayoutThatFits:` and `-[ASLayoutable measureWithSizeRange:]` (more details in the header description for this methods, but here is a tldr):
  - Changed behavior of `-[ASLayoutable calculateLayoutThatFits:]`: Call this on children layoutables to compute their layouts within your implementation of `-[ASLayoutable calculateLayoutThatFits:]`.
  - Introduce `-[ASLayoutable layoutThatFits:]`, `-[ASLayoutable layoutThatFits:parentSize:]`
  - Introduce `-[ASLayoutable calculateLayoutThatFits:restrictedToSizeRange:relativeToParentSize:]`: ASLayoutable's implementation of `-layoutThatFits:parentSize:` calls this method to resolve the component's size against `parentSize`, intersect it with `constrainedSize`, and call `-calculateLayoutThatFits:` with the result. In certain advanced cases, you may want to customize this logic. Overriding this method allows you to receive all three parameters and do the computation yourself.
- [x] Deprecate `-[ASDisplayNode measure:]`: Naming is not optimal and familiar for developers
- [x] Deprecate `-[ASLayoutable measureWithSizeRange:]` use `ASCalculateRootLayout ()` instead
- [x] Add `ASCalculateRootLayout()`: Safely calculates the layout of the given root layoutable by guarding against nil nodes.
- [x] Add `ASCalculateLayout()`: Safely computes the layout of the given node by guarding against nil nodes.
- [x] Rename `-[ASLayout constrainedSizeRange]` to `-[ASLayout constrainedSize]` to align with all other places we use a 'constrainedSize'
- [x] Rename `-[ASLayout layoutableObject]` to `-[ASLayout layoutable]`
- [x] Remove `-[ASDisplayNode preferredFrameSize]` and move over to `-[ASDisplayNode size]` for 'examples_extra/'
- [x] Add deprecation warning to `-[ASDisplayNode preferredFrameSize]`
- [x] Add deprecation warning to `-[ASLayoutable measureWithSizeRange:]`
- [x] Remove Unit Tests for `-[ASDisplayNode preferredFrameSize]`
- [X] Adjust Unit Tests for `-[ASLayoutable size]`
- [x] Use `[ASLayoutable size]` for layout the child within a `ASStaticLayoutSpec` as we will remove `[ASStaticLayoutable sizeRange]` and `ASRelativeSizeRange` 
- [x] Add `ASWrapperLayoutSpec` that can be used as wrapper around a `ASLayoutable` to just pass through the layout creation
- [x] Remove `ASRelativeSizeRange` as well as `sizeRange` in `ASStaticLayoutSpec`.
- [x] Make `ASRelativeSize` private in `ASDimension.h` as it's used in there for some calculations
- [x] Rename `ASRelativeDimension` to `ASDimension`
- [x] Add helper for creating `ASDimension`: `ASDimensionMake`, `ASD`
- [x] Deprecate `-[ASDisplayNode measure:]`
- [x] Introduce `-[ASDisplayNode layoutThatFits:]`
- [x] Fix `/examples` for usage with new APIs
- [x] Rename `ASSize` to `ASLayoutableSize`
- [ ] Documentation: [Layout with AsyncDisplayKit](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)
- [ ] Conversion documentation: [Convert from 1.x to 2](https://gist.github.com/maicki/c6c56c1f9ce514ee7c334e3016c3bad7)
- [ ] Look for // TODO: layout: for further open tasks

<br>
**_This PR is one of the initiatives to make the Layout API more clear. Every feedback is more than welcome!**_

cc @appleguy @Adlai-Holler @garrettmoon @levi 
",maicki,garrettmoon
2110,2016-08-19 23:53:56,"### Goal:

The main goal is to add a constrained size to the `ASLayoutable` protocol. This will be represented by a `ASLayoutableSize` struct. In comparison to `-[ASDisplayNode preferredFrameSize]` this size can be set on every `ASLayoutable` and not only on a `ASDisplayNode` object.

The API is loosely inspired from the CSS Box Model. An ASLayoutableSize looks like this:



That said `ASLayoutableSize` is abstracted away from all `ASLayoutable`s and to set e.g. the `width` you just have to set it directly to an `ASLayoutable`:



By default all `ASLayoutableSize` values will be `ASDimensionTypeAuto`, that means that it's indicating ""I have no opinion"" and may be resolved in whatever way makes most sense given the circumstances, e.g. in case of a `ASTextNode`, it is automatically calculates it's size based on it's content if `width` and `height` are `ASDimensionTypeAuto`.
### Documentation:
- [Layout with AsyncDisplayKit](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)
- [Convert from 1.x to 2](https://gist.github.com/maicki/c6c56c1f9ce514ee7c334e3016c3bad7)
### Changes:
- [x] Add `-[ASLayoutable size]` with type `ASLayoutableSize`.
- [x] `-[ASLayoutable size]` is not exposed, therefore the following properties where added: `-[ASLayoutable width]`, `-[ASLayoutable height]`, `-[ASLayoutable minHeight]`, `-[ASLayoutable maxHeight]`, `-[ASLayoutable minWidth]`, `-[ASLayoutable maxWidth]`
- [x] Deprecate `-[ASDisplayNode preferredFrameSize]` and remove support for it in `ASTextNode`, `ASImageNode`, `ASButtonNode`
- [x] Merge `-[ASLayoutable calculateLayoutThatFits:` and `-[ASLayoutable measureWithSizeRange:]` (more details in the header description for this methods, but here is a tldr):
  - Changed behavior of `-[ASLayoutable calculateLayoutThatFits:]`: Call this on children layoutables to compute their layouts within your implementation of `-[ASLayoutable calculateLayoutThatFits:]`.
  - Introduce `-[ASLayoutable layoutThatFits:]`, `-[ASLayoutable layoutThatFits:parentSize:]`
  - Introduce `-[ASLayoutable calculateLayoutThatFits:restrictedToSizeRange:relativeToParentSize:]`: ASLayoutable's implementation of `-layoutThatFits:parentSize:` calls this method to resolve the component's size against `parentSize`, intersect it with `constrainedSize`, and call `-calculateLayoutThatFits:` with the result. In certain advanced cases, you may want to customize this logic. Overriding this method allows you to receive all three parameters and do the computation yourself.
- [x] Deprecate `-[ASDisplayNode measure:]`: Naming is not optimal and familiar for developers
- [x] Deprecate `-[ASLayoutable measureWithSizeRange:]` use `ASCalculateRootLayout ()` instead
- [x] Add `ASCalculateRootLayout()`: Safely calculates the layout of the given root layoutable by guarding against nil nodes.
- [x] Add `ASCalculateLayout()`: Safely computes the layout of the given node by guarding against nil nodes.
- [x] Rename `-[ASLayout constrainedSizeRange]` to `-[ASLayout constrainedSize]` to align with all other places we use a 'constrainedSize'
- [x] Rename `-[ASLayout layoutableObject]` to `-[ASLayout layoutable]`
- [x] Remove `-[ASDisplayNode preferredFrameSize]` and move over to `-[ASDisplayNode size]` for 'examples_extra/'
- [x] Add deprecation warning to `-[ASDisplayNode preferredFrameSize]`
- [x] Add deprecation warning to `-[ASLayoutable measureWithSizeRange:]`
- [x] Remove Unit Tests for `-[ASDisplayNode preferredFrameSize]`
- [X] Adjust Unit Tests for `-[ASLayoutable size]`
- [x] Use `[ASLayoutable size]` for layout the child within a `ASStaticLayoutSpec` as we will remove `[ASStaticLayoutable sizeRange]` and `ASRelativeSizeRange` 
- [x] Add `ASWrapperLayoutSpec` that can be used as wrapper around a `ASLayoutable` to just pass through the layout creation
- [x] Remove `ASRelativeSizeRange` as well as `sizeRange` in `ASStaticLayoutSpec`.
- [x] Make `ASRelativeSize` private in `ASDimension.h` as it's used in there for some calculations
- [x] Rename `ASRelativeDimension` to `ASDimension`
- [x] Add helper for creating `ASDimension`: `ASDimensionMake`, `ASD`
- [x] Deprecate `-[ASDisplayNode measure:]`
- [x] Introduce `-[ASDisplayNode layoutThatFits:]`
- [x] Fix `/examples` for usage with new APIs
- [x] Rename `ASSize` to `ASLayoutableSize`
- [ ] Documentation: [Layout with AsyncDisplayKit](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)
- [ ] Conversion documentation: [Convert from 1.x to 2](https://gist.github.com/maicki/c6c56c1f9ce514ee7c334e3016c3bad7)
- [ ] Look for // TODO: layout: for further open tasks

<br>
**_This PR is one of the initiatives to make the Layout API more clear. Every feedback is more than welcome!**_

cc @appleguy @Adlai-Holler @garrettmoon @levi 
",maicki,appleguy
2110,2016-08-19 23:53:56,"### Goal:

The main goal is to add a constrained size to the `ASLayoutable` protocol. This will be represented by a `ASLayoutableSize` struct. In comparison to `-[ASDisplayNode preferredFrameSize]` this size can be set on every `ASLayoutable` and not only on a `ASDisplayNode` object.

The API is loosely inspired from the CSS Box Model. An ASLayoutableSize looks like this:



That said `ASLayoutableSize` is abstracted away from all `ASLayoutable`s and to set e.g. the `width` you just have to set it directly to an `ASLayoutable`:



By default all `ASLayoutableSize` values will be `ASDimensionTypeAuto`, that means that it's indicating ""I have no opinion"" and may be resolved in whatever way makes most sense given the circumstances, e.g. in case of a `ASTextNode`, it is automatically calculates it's size based on it's content if `width` and `height` are `ASDimensionTypeAuto`.
### Documentation:
- [Layout with AsyncDisplayKit](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)
- [Convert from 1.x to 2](https://gist.github.com/maicki/c6c56c1f9ce514ee7c334e3016c3bad7)
### Changes:
- [x] Add `-[ASLayoutable size]` with type `ASLayoutableSize`.
- [x] `-[ASLayoutable size]` is not exposed, therefore the following properties where added: `-[ASLayoutable width]`, `-[ASLayoutable height]`, `-[ASLayoutable minHeight]`, `-[ASLayoutable maxHeight]`, `-[ASLayoutable minWidth]`, `-[ASLayoutable maxWidth]`
- [x] Deprecate `-[ASDisplayNode preferredFrameSize]` and remove support for it in `ASTextNode`, `ASImageNode`, `ASButtonNode`
- [x] Merge `-[ASLayoutable calculateLayoutThatFits:` and `-[ASLayoutable measureWithSizeRange:]` (more details in the header description for this methods, but here is a tldr):
  - Changed behavior of `-[ASLayoutable calculateLayoutThatFits:]`: Call this on children layoutables to compute their layouts within your implementation of `-[ASLayoutable calculateLayoutThatFits:]`.
  - Introduce `-[ASLayoutable layoutThatFits:]`, `-[ASLayoutable layoutThatFits:parentSize:]`
  - Introduce `-[ASLayoutable calculateLayoutThatFits:restrictedToSizeRange:relativeToParentSize:]`: ASLayoutable's implementation of `-layoutThatFits:parentSize:` calls this method to resolve the component's size against `parentSize`, intersect it with `constrainedSize`, and call `-calculateLayoutThatFits:` with the result. In certain advanced cases, you may want to customize this logic. Overriding this method allows you to receive all three parameters and do the computation yourself.
- [x] Deprecate `-[ASDisplayNode measure:]`: Naming is not optimal and familiar for developers
- [x] Deprecate `-[ASLayoutable measureWithSizeRange:]` use `ASCalculateRootLayout ()` instead
- [x] Add `ASCalculateRootLayout()`: Safely calculates the layout of the given root layoutable by guarding against nil nodes.
- [x] Add `ASCalculateLayout()`: Safely computes the layout of the given node by guarding against nil nodes.
- [x] Rename `-[ASLayout constrainedSizeRange]` to `-[ASLayout constrainedSize]` to align with all other places we use a 'constrainedSize'
- [x] Rename `-[ASLayout layoutableObject]` to `-[ASLayout layoutable]`
- [x] Remove `-[ASDisplayNode preferredFrameSize]` and move over to `-[ASDisplayNode size]` for 'examples_extra/'
- [x] Add deprecation warning to `-[ASDisplayNode preferredFrameSize]`
- [x] Add deprecation warning to `-[ASLayoutable measureWithSizeRange:]`
- [x] Remove Unit Tests for `-[ASDisplayNode preferredFrameSize]`
- [X] Adjust Unit Tests for `-[ASLayoutable size]`
- [x] Use `[ASLayoutable size]` for layout the child within a `ASStaticLayoutSpec` as we will remove `[ASStaticLayoutable sizeRange]` and `ASRelativeSizeRange` 
- [x] Add `ASWrapperLayoutSpec` that can be used as wrapper around a `ASLayoutable` to just pass through the layout creation
- [x] Remove `ASRelativeSizeRange` as well as `sizeRange` in `ASStaticLayoutSpec`.
- [x] Make `ASRelativeSize` private in `ASDimension.h` as it's used in there for some calculations
- [x] Rename `ASRelativeDimension` to `ASDimension`
- [x] Add helper for creating `ASDimension`: `ASDimensionMake`, `ASD`
- [x] Deprecate `-[ASDisplayNode measure:]`
- [x] Introduce `-[ASDisplayNode layoutThatFits:]`
- [x] Fix `/examples` for usage with new APIs
- [x] Rename `ASSize` to `ASLayoutableSize`
- [ ] Documentation: [Layout with AsyncDisplayKit](https://gist.github.com/maicki/b1a8091df04ed14f8ec0aa333848c4a5)
- [ ] Conversion documentation: [Convert from 1.x to 2](https://gist.github.com/maicki/c6c56c1f9ce514ee7c334e3016c3bad7)
- [ ] Look for // TODO: layout: for further open tasks

<br>
**_This PR is one of the initiatives to make the Layout API more clear. Every feedback is more than welcome!**_

cc @appleguy @Adlai-Holler @garrettmoon @levi 
",maicki,Adlai-Holler
2110,2016-08-27 00:10:15,"@garrettmoon Yes we could get remove `layoutSpecThatFits:` and introduce something that would allow to return an `id<ASLayoutable>`, but as this change is already pretty big I don't want to add that too.

@levi @appleguy @Adlai-Holler @garrettmoon @nguyenhuy  I would appreciate if you guys could take a look over it. It's now ready for another round of reviews. Furthermore I added a link to the documentation that is currently in progress.
",maicki,levi
2110,2016-08-27 00:10:15,"@garrettmoon Yes we could get remove `layoutSpecThatFits:` and introduce something that would allow to return an `id<ASLayoutable>`, but as this change is already pretty big I don't want to add that too.

@levi @appleguy @Adlai-Holler @garrettmoon @nguyenhuy  I would appreciate if you guys could take a look over it. It's now ready for another round of reviews. Furthermore I added a link to the documentation that is currently in progress.
",maicki,appleguy
2110,2016-08-27 00:10:15,"@garrettmoon Yes we could get remove `layoutSpecThatFits:` and introduce something that would allow to return an `id<ASLayoutable>`, but as this change is already pretty big I don't want to add that too.

@levi @appleguy @Adlai-Holler @garrettmoon @nguyenhuy  I would appreciate if you guys could take a look over it. It's now ready for another round of reviews. Furthermore I added a link to the documentation that is currently in progress.
",maicki,nguyenhuy
2110,2016-08-27 00:10:15,"@garrettmoon Yes we could get remove `layoutSpecThatFits:` and introduce something that would allow to return an `id<ASLayoutable>`, but as this change is already pretty big I don't want to add that too.

@levi @appleguy @Adlai-Holler @garrettmoon @nguyenhuy  I would appreciate if you guys could take a look over it. It's now ready for another round of reviews. Furthermore I added a link to the documentation that is currently in progress.
",maicki,Adlai-Holler
2110,2016-09-05 08:45:50,"@Adlai-Holler Would be great if you could take a look over it now. Thanks!
",maicki,Adlai-Holler
2107,2016-08-23 17:38:55,"@appleguy would love your thoughts on this!
",garrettmoon,appleguy
2105,2016-08-19 13:13:03,"@hannahmbanana  Both latest master branch and 1.9.81 are tested.
Repro steps:
1. Create ASTextNode with maximumNumberOfLines of 3
2. Set attributedText with lineSpacing > 0 (won't repro if = 0)
3. Set truncation string with the same attributes
At last we would get **a wrong number of lines**.
I created a repo to demo: https://github.com/yxztj/ASTextNodeTest

**With ASDK master branch**(demo project branch ""master""):
Expected:
<img width=""318"" alt=""screen shot 2016-08-19 at 8 59 51 pm"" src=""https://cloud.githubusercontent.com/assets/3334458/17810625/d1b8d59c-6650-11e6-938a-2f6e7a3a9968.png"">
Actual:
<img width=""315"" alt=""screen shot 2016-08-19 at 8 59 24 pm"" src=""https://cloud.githubusercontent.com/assets/3334458/17810629/d4851880-6650-11e6-8f12-a90cbff3dce8.png"">

**With ASDK 1.9.81**(demo project branch ""1.9.81""):
At first number of lines are correct. But when scrolling down and up again(text node re-rendered), the issue appears just as in ASDK master branch above.
Please let me know if additional information is required.
",yxztj,hannahmbanana
2105,2016-08-29 01:51:14,"@maicki Since it's a production issue, resolving it is important to us. Do you think we can have a quick workaround?
",yxztj,maicki
2105,2016-09-28 06:05:44,"@appleguy Is there any updates on this issue？
",yxztj,appleguy
2105,2016-10-10 11:44:16,"@appleguy After spending some time diving into ASTextKitRenderer, here's what I've found: 

Suppose we have 10 lines of text, 5px height for text and 2px lineSpacing, setting maximumNumberOfLines to 3. During the time, [ASTextKitRenderer _calculateSize] is called several times.

## First pass:

Creating [ASTextKitRenderer context] with unlimited constrainedSize in height.
Truncate textStorage into 3 lines. Set node's _calculatedSize height to the height of 3 lines, which is **19px**(5px \* 3 + 2px \* 2) 

## Second pass:

The context is re-created with constrained size(19px height) and original 10 lines of text.
Now the truncator uses height of 19px in [layoutManager glyphRangeForBoundingRect]. This is enough for the text after truncation(3 lines of text), however the rect is not enough for clipping 10 lines of text into 3 lines, which needs at least **21px** height(5 \* 3 + 2 \* 3, the lineSpacing after 3rd line is also counted. I guess both the text height and lineSpacing below it are needed for layoutManager to calculate glyph range) So we only got 2 lines finally.

Hope we can get a fix based on information above :)
",yxztj,appleguy
2105,2016-10-31 18:28:11,"@Adlai-Holler - since you looked at ASTextNode recently, do the symptoms described here sound familiar in any sense?

@yxztj Thanks for your patience!  We are almost done adopting all of the 2.0 APIs in Pinterest, so we should be able to investigate this in the next couple weeks.
",appleguy,Adlai-Holler
2105,2016-11-08 17:56:05,"@Adlai-Holler @appleguy Just looked into that a bit with master. So apparently this works now reliable, unfortunately reliable wrong. Setting the `maximumNumberOfLines` to 3 (no matter truncationAttributedString is set) the text node will show only 2 lines of text but the text node is in fact the right size.

![screen shot 2016-11-08 at 9 55 48 am](https://cloud.githubusercontent.com/assets/25288/20110514/880d4468-a599-11e6-87fa-9fabaffb03c8.png)
",maicki,Adlai-Holler
2105,2016-11-13 23:41:49,"@yxztj quick update here.  The team is now focused on ASTextNode improvements.  @maicki did a variety of investigation here, and @Adlai-Holler has been working on some significant changes to address an issue discovered in the truncation algorithm.

It will be some difficult work, but we currently expect to have this issue fixed in the next couple weeks.  We are sprinting to try to have it addressed for the Dec 1st event.  Feel free to discuss with Adlai on Slack (note however he is currently working from Japan timezone)
",appleguy,Adlai-Holler
2105,2016-12-10 05:56:50,"@maicki @Adlai-Holler Not sure if #2643 is related, but the PR didn't fix this issue. Tested with latest master branch.",yxztj,Adlai-Holler
2105,2017-01-08 13:13:42,"@appleguy @hannahmbanana Happy new year! Sorry to ping you again but not being able to truncate text with line spacing has been bothering us for over half a year. I know it involves some major improvements in the whole async text rendering/layout process, and that's why we weren't trying to fix it ourselves.

Do you think we can get a workaround soon? Or maybe currently I could use ASDisplayView to wrap a UILabel instead?",yxztj,hannahmbanana
2103,2016-08-18 22:17:53,"@maicki: ready to merge
",hannahmbanana,maicki
2102,2016-08-18 20:21:31,"Ready for review @maicki @appleguy @levi 
",Adlai-Holler,levi
2102,2016-08-18 20:21:31,"Ready for review @maicki @appleguy @levi 
",Adlai-Holler,appleguy
2102,2016-08-18 20:21:31,"Ready for review @maicki @appleguy @levi 
",Adlai-Holler,maicki
2099,2016-08-18 17:26:39,"## This PR will be replaced by: #2172

`ASLayoutValidation` was never really thought through. There are other ideas / solutions on the horizon that will come in the near future, so we should just get rid of that code.

@Adlai-Holler @garrettmoon @appleguy 
",maicki,garrettmoon
2099,2016-08-18 17:26:39,"## This PR will be replaced by: #2172

`ASLayoutValidation` was never really thought through. There are other ideas / solutions on the horizon that will come in the near future, so we should just get rid of that code.

@Adlai-Holler @garrettmoon @appleguy 
",maicki,appleguy
2099,2016-08-18 17:26:39,"## This PR will be replaced by: #2172

`ASLayoutValidation` was never really thought through. There are other ideas / solutions on the horizon that will come in the near future, so we should just get rid of that code.

@Adlai-Holler @garrettmoon @appleguy 
",maicki,Adlai-Holler
2099,2016-08-18 17:55:40,"I'm cool with removing this but I don't know much about the history there. Let's have @appleguy weigh in
",Adlai-Holler,appleguy
2099,2016-08-23 14:22:36,"@appleguy @levi any thoughts?
",maicki,levi
2099,2016-08-23 14:22:36,"@appleguy @levi any thoughts?
",maicki,appleguy
2097,2016-08-18 01:32:24,"@maicki @garrettmoon @hannahmbanana ?
",Adlai-Holler,garrettmoon
2097,2016-08-18 01:32:24,"@maicki @garrettmoon @hannahmbanana ?
",Adlai-Holler,maicki
2097,2016-08-18 01:32:24,"@maicki @garrettmoon @hannahmbanana ?
",Adlai-Holler,hannahmbanana
2095,2016-08-18 01:25:29,"Found this while digging around in our drawing/CA integration. May as well yank it out! @maicki @appleguy 
",Adlai-Holler,appleguy
2095,2016-08-18 01:25:29,"Found this while digging around in our drawing/CA integration. May as well yank it out! @maicki @appleguy 
",Adlai-Holler,maicki
2094,2016-08-18 01:10:04,"This clarifies some behavior that I found confusing when debugging. This does not change any behavior. Worked with @maicki to:
- Rename `canCallNeedsDisplayOfLayer` to `canCallSetNeedsDisplayOfLayer` to be clearer.
- Make the rationale around that flag clearer. The actual behavior of the code is the same.
  - We cannot clear the contents or setNeedsDisplay of UIImageView-wrapping nodes.
  - We can do both of the above on any other kind of node.
  - We must call `setNeedsDisplay` on all non-UIImageView wrapper nodes in `recursivelyTriggerDisplayForLayer`, but there's no need to call it on normal nodes
",Adlai-Holler,maicki
2082,2016-08-17 06:37:34,"@garrettmoon @Adlai-Holler @maicki 
",hannahmbanana,garrettmoon
2082,2016-08-17 06:37:34,"@garrettmoon @Adlai-Holler @maicki 
",hannahmbanana,maicki
2082,2016-08-17 06:37:34,"@garrettmoon @Adlai-Holler @maicki 
",hannahmbanana,Adlai-Holler
2078,2016-08-16 18:37:07,"This also makes the Diffing method support large arrays.

The NSMutableData approach was suggested by the great @johnepinterest . 

These files are in the `Details` group and the methods are not documented. We are not making any guarantees that the API will be stable or that the methods will work, but if some enterprising developer wants to chance it, we'll give them the option.
",Adlai-Holler,johnepinterest
2077,2016-08-17 07:04:17,"@maicki @garrettmoon: This is a known issue with the current way that ASTextNode sizes itself, correct? I believe that we are fixing this for 2.0, but do we have a current work around?
",hannahmbanana,garrettmoon
2077,2016-08-17 07:04:17,"@maicki @garrettmoon: This is a known issue with the current way that ASTextNode sizes itself, correct? I believe that we are fixing this for 2.0, but do we have a current work around?
",hannahmbanana,maicki
2073,2016-08-15 21:27:53,"It looks awesome! Thank you I'm cool with merging this as soon as @maicki reviews and the build passes.
",Adlai-Holler,maicki
2073,2016-08-16 01:34:25,"I believe the tests failing are completely unrelated to the change made...
@maicki, is that what you are fixing with #2076?
",nlutsenko,maicki
2071,2016-08-15 01:08:10,"To align with the CSS flex-shrink spec, let's set the default value of flexShrink to YES: http://www.w3.org/TR/css-flexbox-1/#propdef-flex-shrink

In PR #851 we would only set it for `ASTextNode`, but I would recommend we will set it for all `ASStackLayoutable` to `YES` by default.

CC @appleguy @nguyenhuy @Adlai-Holler @rcancro Thoughts?
<br>
**_This PR is one of the initiatives to make the Layout API more clear. Every feedback is more than welcome!**_
",maicki,nguyenhuy
2071,2016-08-15 01:08:10,"To align with the CSS flex-shrink spec, let's set the default value of flexShrink to YES: http://www.w3.org/TR/css-flexbox-1/#propdef-flex-shrink

In PR #851 we would only set it for `ASTextNode`, but I would recommend we will set it for all `ASStackLayoutable` to `YES` by default.

CC @appleguy @nguyenhuy @Adlai-Holler @rcancro Thoughts?
<br>
**_This PR is one of the initiatives to make the Layout API more clear. Every feedback is more than welcome!**_
",maicki,rcancro
2071,2016-08-15 01:08:10,"To align with the CSS flex-shrink spec, let's set the default value of flexShrink to YES: http://www.w3.org/TR/css-flexbox-1/#propdef-flex-shrink

In PR #851 we would only set it for `ASTextNode`, but I would recommend we will set it for all `ASStackLayoutable` to `YES` by default.

CC @appleguy @nguyenhuy @Adlai-Holler @rcancro Thoughts?
<br>
**_This PR is one of the initiatives to make the Layout API more clear. Every feedback is more than welcome!**_
",maicki,appleguy
2071,2016-08-15 01:08:10,"To align with the CSS flex-shrink spec, let's set the default value of flexShrink to YES: http://www.w3.org/TR/css-flexbox-1/#propdef-flex-shrink

In PR #851 we would only set it for `ASTextNode`, but I would recommend we will set it for all `ASStackLayoutable` to `YES` by default.

CC @appleguy @nguyenhuy @Adlai-Holler @rcancro Thoughts?
<br>
**_This PR is one of the initiatives to make the Layout API more clear. Every feedback is more than welcome!**_
",maicki,Adlai-Holler
2069,2016-08-15 17:38:27,"@Adlai-Holler: an easy one
",hannahmbanana,Adlai-Holler
2068,2016-08-14 18:28:23,"@stapleup: thanks for reporting this! I was under the impression that there was some way to do this, but it does look like this functionality is currently missing.  

@garrettmoon: do you know of a way to do this with the current framework? Should we add this to a 2.X milestone?
",hannahmbanana,garrettmoon
2067,2016-08-14 00:05:21,"This is a pretty important change that addresses a major cause of issues with collection views at Pinterest and surely other companies. 

Hopefully this will give us everything we need to build this feature, and integrate smoothly with Pinterest very soon. @binl Thoughts? Our section controllers themselves could serve directly as the section user info.

@garrettmoon Would you be interested in making this a reality?

NOTE:
- Change the viewing mode of Overview.md to the pretty file mode. The code isn't very interesting.
- The sequence diagram links are safe to modify. They're copies, so feel free to modify them and post links to/images of your revised version.

Let's review this thing! @appleguy @maicki @levi @hannahmbanana 
",Adlai-Holler,hannahmbanana
2067,2016-08-14 00:05:21,"This is a pretty important change that addresses a major cause of issues with collection views at Pinterest and surely other companies. 

Hopefully this will give us everything we need to build this feature, and integrate smoothly with Pinterest very soon. @binl Thoughts? Our section controllers themselves could serve directly as the section user info.

@garrettmoon Would you be interested in making this a reality?

NOTE:
- Change the viewing mode of Overview.md to the pretty file mode. The code isn't very interesting.
- The sequence diagram links are safe to modify. They're copies, so feel free to modify them and post links to/images of your revised version.

Let's review this thing! @appleguy @maicki @levi @hannahmbanana 
",Adlai-Holler,levi
2067,2016-08-14 00:05:21,"This is a pretty important change that addresses a major cause of issues with collection views at Pinterest and surely other companies. 

Hopefully this will give us everything we need to build this feature, and integrate smoothly with Pinterest very soon. @binl Thoughts? Our section controllers themselves could serve directly as the section user info.

@garrettmoon Would you be interested in making this a reality?

NOTE:
- Change the viewing mode of Overview.md to the pretty file mode. The code isn't very interesting.
- The sequence diagram links are safe to modify. They're copies, so feel free to modify them and post links to/images of your revised version.

Let's review this thing! @appleguy @maicki @levi @hannahmbanana 
",Adlai-Holler,appleguy
2067,2016-08-14 00:05:21,"This is a pretty important change that addresses a major cause of issues with collection views at Pinterest and surely other companies. 

Hopefully this will give us everything we need to build this feature, and integrate smoothly with Pinterest very soon. @binl Thoughts? Our section controllers themselves could serve directly as the section user info.

@garrettmoon Would you be interested in making this a reality?

NOTE:
- Change the viewing mode of Overview.md to the pretty file mode. The code isn't very interesting.
- The sequence diagram links are safe to modify. They're copies, so feel free to modify them and post links to/images of your revised version.

Let's review this thing! @appleguy @maicki @levi @hannahmbanana 
",Adlai-Holler,garrettmoon
2067,2016-08-14 00:05:21,"This is a pretty important change that addresses a major cause of issues with collection views at Pinterest and surely other companies. 

Hopefully this will give us everything we need to build this feature, and integrate smoothly with Pinterest very soon. @binl Thoughts? Our section controllers themselves could serve directly as the section user info.

@garrettmoon Would you be interested in making this a reality?

NOTE:
- Change the viewing mode of Overview.md to the pretty file mode. The code isn't very interesting.
- The sequence diagram links are safe to modify. They're copies, so feel free to modify them and post links to/images of your revised version.

Let's review this thing! @appleguy @maicki @levi @hannahmbanana 
",Adlai-Holler,maicki
2066,2016-08-14 00:29:41,"@Adlai-Holler Changed comments to `subnode management`
",maicki,Adlai-Holler
2064,2016-08-14 18:17:02,"@Adlai-Holler - any reason we shouldn't make this file public? 
",hannahmbanana,Adlai-Holler
2064,2016-08-15 16:54:32,"I think we should not expose these kind of classes / files that provide internal functionality, but basically does not really has something to do with what ASDK stands for.
It is for internal usage only and it would make it tremendously harder for us to change in the future, if we would expose all kinds of ""helper"" functionality publicly, e.g. we would have to be careful that we would not break any API from the past for this functions or if we don't have need internally anymore we cannot remove it etc.

@levi @Adlai-Holler @appleguy Thoughts?
",maicki,levi
2064,2016-08-15 16:54:32,"I think we should not expose these kind of classes / files that provide internal functionality, but basically does not really has something to do with what ASDK stands for.
It is for internal usage only and it would make it tremendously harder for us to change in the future, if we would expose all kinds of ""helper"" functionality publicly, e.g. we would have to be careful that we would not break any API from the past for this functions or if we don't have need internally anymore we cannot remove it etc.

@levi @Adlai-Holler @appleguy Thoughts?
",maicki,appleguy
2064,2016-08-15 16:54:32,"I think we should not expose these kind of classes / files that provide internal functionality, but basically does not really has something to do with what ASDK stands for.
It is for internal usage only and it would make it tremendously harder for us to change in the future, if we would expose all kinds of ""helper"" functionality publicly, e.g. we would have to be careful that we would not break any API from the past for this functions or if we don't have need internally anymore we cannot remove it etc.

@levi @Adlai-Holler @appleguy Thoughts?
",maicki,Adlai-Holler
2064,2016-08-15 23:52:11,"cc @garrettmoon 
",hannahmbanana,garrettmoon
2062,2016-08-12 04:12:11,"cc' @Yue-Wang-Google
",hannahmbanana,Yue-Wang-Google
2061,2016-08-12 03:49:39,"@garrettmoon: this appears similar to the other issue you were investigating?
",hannahmbanana,garrettmoon
2060,2016-08-14 19:02:01,"@appleguy @Adlai-Holler Ready for review again. Although it's not the final solution we should consider merging it as it's an improvement as well as fixes the order of accessibility elements issue.
",maicki,appleguy
2060,2016-08-14 19:02:01,"@appleguy @Adlai-Holler Ready for review again. Although it's not the final solution we should consider merging it as it's an improvement as well as fixes the order of accessibility elements issue.
",maicki,Adlai-Holler
2055,2016-08-11 04:00:25,"@hannahmbanana yes it is!!
",robmontesinos,hannahmbanana
2054,2016-08-11 00:12:52,"@maicki @appleguy @levi @garrettmoon Ready for review
",Adlai-Holler,levi
2054,2016-08-11 00:12:52,"@maicki @appleguy @levi @garrettmoon Ready for review
",Adlai-Holler,garrettmoon
2054,2016-08-11 00:12:52,"@maicki @appleguy @levi @garrettmoon Ready for review
",Adlai-Holler,appleguy
2054,2016-08-11 00:12:52,"@maicki @appleguy @levi @garrettmoon Ready for review
",Adlai-Holler,maicki
2054,2016-08-11 18:36:33,"Thanks for the review @garrettmoon !
",Adlai-Holler,garrettmoon
2052,2016-08-10 13:44:49,"Provide default fade & scale transition for layout transition API

@levi As discussed over at #2049 this PR implements a simple solution for now. cc @Adlai-Holler @appleguy 
",maicki,levi
2052,2016-08-10 13:44:49,"Provide default fade & scale transition for layout transition API

@levi As discussed over at #2049 this PR implements a simple solution for now. cc @Adlai-Holler @appleguy 
",maicki,appleguy
2052,2016-08-10 13:44:49,"Provide default fade & scale transition for layout transition API

@levi As discussed over at #2049 this PR implements a simple solution for now. cc @Adlai-Holler @appleguy 
",maicki,Adlai-Holler
2052,2016-08-14 00:34:00,"@Adlai-Holler @levi  Good point with the layout options. Updated!
",maicki,levi
2051,2016-08-09 23:07:43,"@maicki @appleguy @levi 
",Adlai-Holler,levi
2051,2016-08-09 23:07:43,"@maicki @appleguy @levi 
",Adlai-Holler,appleguy
2051,2016-08-09 23:07:43,"@maicki @appleguy @levi 
",Adlai-Holler,maicki
2050,2016-08-09 20:48:38,"@Adlai-Holler 
",hannahmbanana,Adlai-Holler
2049,2016-08-09 18:07:32,"- Add new protocol `ASLayoutTransitionCoordinator`
- Add property to `ASDisplayNode` called `layoutTransitionCoordinator`
- Add a default fade in / out transition coordinator for layout transitions: `ASFadeInOutLayoutTransitionCoordinator`

I'm not happy yet with the names of the transition coordinator we provide by default yet: `ASDefaultLayoutTransitionCoordinator` and `ASFadeInOutLayoutTransitionCoordinator` and open for any API improvement suggestions

cc @levi @Adlai-Holler @appleguy 
",maicki,levi
2049,2016-08-09 18:07:32,"- Add new protocol `ASLayoutTransitionCoordinator`
- Add property to `ASDisplayNode` called `layoutTransitionCoordinator`
- Add a default fade in / out transition coordinator for layout transitions: `ASFadeInOutLayoutTransitionCoordinator`

I'm not happy yet with the names of the transition coordinator we provide by default yet: `ASDefaultLayoutTransitionCoordinator` and `ASFadeInOutLayoutTransitionCoordinator` and open for any API improvement suggestions

cc @levi @Adlai-Holler @appleguy 
",maicki,appleguy
2049,2016-08-09 18:07:32,"- Add new protocol `ASLayoutTransitionCoordinator`
- Add property to `ASDisplayNode` called `layoutTransitionCoordinator`
- Add a default fade in / out transition coordinator for layout transitions: `ASFadeInOutLayoutTransitionCoordinator`

I'm not happy yet with the names of the transition coordinator we provide by default yet: `ASDefaultLayoutTransitionCoordinator` and `ASFadeInOutLayoutTransitionCoordinator` and open for any API improvement suggestions

cc @levi @Adlai-Holler @appleguy 
",maicki,Adlai-Holler
2049,2016-08-09 22:53:44,"@levi You think we should just provide the default behavior directly in `ASDisplayNode` without introducing the coordinator for now?

Would be fine with me for now any other thoughts @appleguy @Adlai-Holler ?
",maicki,appleguy
2049,2016-08-09 22:53:44,"@levi You think we should just provide the default behavior directly in `ASDisplayNode` without introducing the coordinator for now?

Would be fine with me for now any other thoughts @appleguy @Adlai-Holler ?
",maicki,Adlai-Holler
2045,2016-08-08 18:13:06,"Quick fix pointed out by @GitGadd in issue #2040.

This code is original (circa 2014) and appears to be a mistake? 
",hannahmbanana,GitGadd
2044,2016-08-11 07:06:29,"@skensell: This is a great report - I appreciate the detailed explanation! I will put this in our internal tracking tool to fix this to have automatic user interaction enabled for the case in which only the subnode enables user interaction. And this should be very straightforward to do with our [ASEnvironment](http://asyncdisplaykit.org/docs/asenvironment.html) feature. 

@Adlai-Holler @chrisdanford: I think this will be important for your layer backing optimization.
",hannahmbanana,chrisdanford
2044,2016-08-11 07:06:29,"@skensell: This is a great report - I appreciate the detailed explanation! I will put this in our internal tracking tool to fix this to have automatic user interaction enabled for the case in which only the subnode enables user interaction. And this should be very straightforward to do with our [ASEnvironment](http://asyncdisplaykit.org/docs/asenvironment.html) feature. 

@Adlai-Holler @chrisdanford: I think this will be important for your layer backing optimization.
",hannahmbanana,Adlai-Holler
2041,2016-08-05 13:38:31,"@Adlai-Holler What comments changes should be made based on your comment in #1747 ? 
",maicki,Adlai-Holler
2040,2016-08-06 04:40:11,"@GitGadd: this does seem odd. @appleguy: any idea if there is a reason for this (original) code?
",hannahmbanana,appleguy
2039,2016-08-05 16:01:38,"@xnxin: I don't believe this is currently available (@maicki - correct me if I am wrong), but it is on our roadmap. 
",hannahmbanana,maicki
2039,2016-08-08 18:20:20,"@xnxin: On second thought, I believe I heard of a way to do this using two `ASStaticLayoutSpecs`.  @maicki: do you know how to do this?
",hannahmbanana,maicki
2039,2016-08-11 02:58:22,"@maicki OK, It's working for me now, just set parent manually, and it's done, perfect!!!
",xnxin,maicki
2034,2016-08-04 18:32:42,"This feature has been requested by Google and others. We could in the future make an asynchronous option that would enqueue this with other edit operations, but that would get messy quickly.

NOTE: It is a known issue that `-waitUntilAllUpdatesAreCommitted` has no effect if the initial reload hasn't been enqueued. Simply adding that line causes other issues that I don't have bandwidth to investigate right now, so this change will only work if the initial reload has already been started. Ship task 156 covers this.

Ready for review @maicki @levi @appleguy 
",Adlai-Holler,levi
2034,2016-08-04 18:32:42,"This feature has been requested by Google and others. We could in the future make an asynchronous option that would enqueue this with other edit operations, but that would get messy quickly.

NOTE: It is a known issue that `-waitUntilAllUpdatesAreCommitted` has no effect if the initial reload hasn't been enqueued. Simply adding that line causes other issues that I don't have bandwidth to investigate right now, so this change will only work if the initial reload has already been started. Ship task 156 covers this.

Ready for review @maicki @levi @appleguy 
",Adlai-Holler,appleguy
2034,2016-08-04 18:32:42,"This feature has been requested by Google and others. We could in the future make an asynchronous option that would enqueue this with other edit operations, but that would get messy quickly.

NOTE: It is a known issue that `-waitUntilAllUpdatesAreCommitted` has no effect if the initial reload hasn't been enqueued. Simply adding that line causes other issues that I don't have bandwidth to investigate right now, so this change will only work if the initial reload has already been started. Ship task 156 covers this.

Ready for review @maicki @levi @appleguy 
",Adlai-Holler,maicki
2031,2016-08-04 03:36:22,"The implementation of `layoutSpecBlock` has currently a couple of issues e.g. if a `layoutSpecBlock` is provided, `layoutSpecThatFits:` will not be called on that node. Furthermore it is make it even harder to resolve the overall issue that currently it's not possible to have multiple `layoutSpecThatFits:` implementation in a class hierarchy.

As it was just recently introduced and does not have that much of a public usage, I would propose to remove it for 2.0.

@appleguy @Adlai-Holler Let me know what you are thinking ...
",maicki,appleguy
2031,2016-08-04 03:36:22,"The implementation of `layoutSpecBlock` has currently a couple of issues e.g. if a `layoutSpecBlock` is provided, `layoutSpecThatFits:` will not be called on that node. Furthermore it is make it even harder to resolve the overall issue that currently it's not possible to have multiple `layoutSpecThatFits:` implementation in a class hierarchy.

As it was just recently introduced and does not have that much of a public usage, I would propose to remove it for 2.0.

@appleguy @Adlai-Holler Let me know what you are thinking ...
",maicki,Adlai-Holler
2031,2016-08-16 23:49:55,"I'm open to #985 in the future, sure, but I think we should not do this diff here. Google recently commented about having to create node classes just to implement layouts – a problem I had at Tripstr as well – and we shouldn't take this option away until we have a replacement option. @maicki @levi @appleguy @hannahmbanana ?
",Adlai-Holler,appleguy
2031,2016-08-16 23:49:55,"I'm open to #985 in the future, sure, but I think we should not do this diff here. Google recently commented about having to create node classes just to implement layouts – a problem I had at Tripstr as well – and we shouldn't take this option away until we have a replacement option. @maicki @levi @appleguy @hannahmbanana ?
",Adlai-Holler,hannahmbanana
2030,2016-08-15 22:23:26,"I'm good with landing this once Pinterest is compatible. @hannahmbanana ?
",Adlai-Holler,hannahmbanana
2030,2016-08-18 21:11:04,"@appleguy @Adlai-Holler @garrettmoon @levi  Ready for review
",maicki,levi
2030,2016-08-18 21:11:04,"@appleguy @Adlai-Holler @garrettmoon @levi  Ready for review
",maicki,garrettmoon
2030,2016-08-18 21:11:04,"@appleguy @Adlai-Holler @garrettmoon @levi  Ready for review
",maicki,appleguy
2025,2016-08-02 16:08:08,"@maicki: do you remember what the resolution of this was? I believe you investigated the Swift issue shortly after I broke this? :)
",hannahmbanana,maicki
2024,2016-08-02 16:10:34,"@Eke @ejensen @gazreese: any comments?
",hannahmbanana,Eke
2024,2016-08-02 16:10:34,"@Eke @ejensen @gazreese: any comments?
",hannahmbanana,ejensen
2024,2016-08-02 16:10:34,"@Eke @ejensen @gazreese: any comments?
",hannahmbanana,gazreese
2024,2016-08-03 07:27:49,"@maicki @Adlai-Holler: FYI there is more context / discussion of this PR on #asvideonode in the Slack channel.
",hannahmbanana,maicki
2024,2016-08-03 07:27:49,"@maicki @Adlai-Holler: FYI there is more context / discussion of this PR on #asvideonode in the Slack channel.
",hannahmbanana,Adlai-Holler
2024,2016-08-03 09:22:21,"@gazreese I just pushed a new commit on this branch that uses KVO on rate. It also removes unnecessary / incorrect state transitions. So far it works on a sample project provided by @maxsz, and on my project (although I don't make heavy use of the states). As mentioned in my very first post, in addition to fixing the states, it also prevents the `ASVideoNode` from unnecessarily reloading the `playerItem`, hence removing some flickering and ""play-back-from-start"" issues I was having.

To anyone who uses the `ASVideoNode`, please tell me if it breaks anything on your side, I'd be happy to look into it.
",flovouin,maxsz
2018,2016-08-01 16:20:25,"@levi @Adlai-Holler Can you please review. Thanks!
",maicki,levi
2018,2016-08-01 16:20:25,"@levi @Adlai-Holler Can you please review. Thanks!
",maicki,Adlai-Holler
2017,2016-08-05 06:12:53,"@dssheng thanks for the details!

@johnepinterest is investigating in this area.  

 Updating the framework would be good. Do you happen to use the name _propertyLock for any of your instance variables? We address this in the latest version, but if you are shadowing this variable, it could cause an issue like this in the last version.  (1.9.80, fixed as one of a number of improvements in 1.9.81)

Pinterest is currently shipping off of the branch called 1.9.90.  If you are willing to point to a branch in your Podfile, this is considered stable and is the best version at the moment.  We will push a pod in a week or two.  1.9.81 is an ok choice as well, but .90 has both performance and some stability improvements.
",appleguy,johnepinterest
2016,2016-08-01 02:21:59,"hi,@hannahmbanana, the ASDK version is 1.9.81, the crashes take up 5 percent. It always crash at this line -- result = [self displayWithParameters:drawParameters isCancelled:isCancelledBlock]; 
fileName:ASDisplayNode+AsyncDisplay.mm lineNumber:250
This line is getting image for ASImageNode, and crashing when _ASAsyncTransaction is doing this: operation._block = nil; (number: 241 fileName:_ASAsyncTransaction.mm)

I think something is wrong when releasing the displayBlock.

![crash1](https://cloud.githubusercontent.com/assets/1837609/17281166/c5d6c7ee-57cc-11e6-9257-0bf876ce1df0.png)
![crash2](https://cloud.githubusercontent.com/assets/1837609/17281167/c619b0d6-57cc-11e6-801e-1d561f86a5f8.png)

Crash log as follow:
Thread 35 Crashed: 0 Tmall4iPhone 0x0000000101a1b67c -[ASDealloc2MainObject release] ASDealloc2MainObject.m:29 (in Tmall4iPhone) 1 Tmall4iPhone 0x0000000101a3f390 __destroy_helper_block_ ASDisplayNode+AsyncDisplay.mm:251 (in Tmall4iPhone) 2 libsystem_blocks.dylib 0x0000000198c59910 __Block_release :256 (in libsystem_blocks.dylib) 3 libsystem_blocks.dylib 0x0000000198c59910 __Block_release :256 (in libsystem_blocks.dylib) 4 Tmall4iPhone 0x0000000101a2a430 ___ZN23ASAsyncTransactionQueue9GroupImpl8scheduleElPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvE_block_invoke _ASAsyncTransaction.mm:241 (in Tmall4iPhone) 5 libdispatch.dylib 0x0000000198c053ac __dispatch_call_block_and_release :24 (in libdispatch.dylib) 6 libdispatch.dylib 0x0000000198c0536c __dispatch_client_callout :16 (in libdispatch.dylib) 7 libdispatch.dylib 0x0000000198c0df90 __dispatch_async_redirect_invoke :692 (in libdispatch.dylib) 8 libdispatch.dylib 0x0000000198c0536c __dispatch_client_callout :16 (in libdispatch.dylib) 9 libdispatch.dylib 0x0000000198c1140c __dispatch_root_queue_drain :1152 (in libdispatch.dylib) 10 libdispatch.dylib 0x0000000198c1275c __dispatch_worker_thread3 :108 (in libdispatch.dylib) 11 libsystem_pthread.dylib 0x0000000198de12e4 0x0000000198de0000 + 4836 12 libsystem_pthread.dylib 0x0000000198de0fa8 0x0000000198de0000 + 4008
",yufenglv,hannahmbanana
2012,2016-07-29 23:38:34,"@appleguy @maicki @levi I believe this is very low-risk, but it's also obviously very late in the game.
",Adlai-Holler,levi
2012,2016-07-29 23:38:34,"@appleguy @maicki @levi I believe this is very low-risk, but it's also obviously very late in the game.
",Adlai-Holler,appleguy
2012,2016-07-29 23:38:34,"@appleguy @maicki @levi I believe this is very low-risk, but it's also obviously very late in the game.
",Adlai-Holler,maicki
2011,2016-08-30 11:35:03,"@aforkalyuk @cdiscla I just did some more tests because the main problem is the deletion of the header node. I wanted to keep using layerBacking without me personally having to hold the node as a member node, so I found out that you can get things to work while keeping your `layerBack = true/YES` like this:



Basically use it as if you're dequeuing your supplementary node, I'm not sure if this is how you're supposed to use it though. @Adlai-Holler maybe you can weigh in on this? If that is the case, @hannahmbanana maybe we should add some sort of documentation regarding this ?

@jadsonlourenco I think you might be having a different issue than us, as we're using ASCollectionNode/ASCollectionView and we're using supplementary nodes, could you share a test project with your crash?

**EDIT**: This seems to only work as long as you don't actually delete the supplementary node, so I suppose it's not an actual fix.
",george-gw,hannahmbanana
2011,2016-08-30 11:35:03,"@aforkalyuk @cdiscla I just did some more tests because the main problem is the deletion of the header node. I wanted to keep using layerBacking without me personally having to hold the node as a member node, so I found out that you can get things to work while keeping your `layerBack = true/YES` like this:



Basically use it as if you're dequeuing your supplementary node, I'm not sure if this is how you're supposed to use it though. @Adlai-Holler maybe you can weigh in on this? If that is the case, @hannahmbanana maybe we should add some sort of documentation regarding this ?

@jadsonlourenco I think you might be having a different issue than us, as we're using ASCollectionNode/ASCollectionView and we're using supplementary nodes, could you share a test project with your crash?

**EDIT**: This seems to only work as long as you don't actually delete the supplementary node, so I suppose it's not an actual fix.
",george-gw,Adlai-Holler
2008,2016-08-10 05:31:15,"@Adlai-Holler: ready for review 
Demo (before I fixed the arrow direction): https://drive.google.com/a/pinterest.com/file/d/0B4rjcms54CQ6cXljNVZYVnpZdUU/view?usp=sharing
",hannahmbanana,Adlai-Holler
2007,2016-07-29 00:23:17,"I don't know why these were here but they're not currently used.

Technically, since this header file is public, this is an API change. But it's incredibly minor and any user that's upset can easily implement their own.

`[UIScreen mainScreen]` should only be called on main. Plus it's expensive! I advocate for landing this immediately despite the teensy API change. @maicki @appleguy @levi @Yue-Wang-Google
",Adlai-Holler,levi
2007,2016-07-29 00:23:17,"I don't know why these were here but they're not currently used.

Technically, since this header file is public, this is an API change. But it's incredibly minor and any user that's upset can easily implement their own.

`[UIScreen mainScreen]` should only be called on main. Plus it's expensive! I advocate for landing this immediately despite the teensy API change. @maicki @appleguy @levi @Yue-Wang-Google
",Adlai-Holler,appleguy
2007,2016-07-29 00:23:17,"I don't know why these were here but they're not currently used.

Technically, since this header file is public, this is an API change. But it's incredibly minor and any user that's upset can easily implement their own.

`[UIScreen mainScreen]` should only be called on main. Plus it's expensive! I advocate for landing this immediately despite the teensy API change. @maicki @appleguy @levi @Yue-Wang-Google
",Adlai-Holler,maicki
2007,2016-07-29 00:23:17,"I don't know why these were here but they're not currently used.

Technically, since this header file is public, this is an API change. But it's incredibly minor and any user that's upset can easily implement their own.

`[UIScreen mainScreen]` should only be called on main. Plus it's expensive! I advocate for landing this immediately despite the teensy API change. @maicki @appleguy @levi @Yue-Wang-Google
",Adlai-Holler,Yue-Wang-Google
2006,2016-07-29 00:21:06,"This should retain full precision on both 32-bit and 64-bit. 

I dropped the file down to Objective-C from Objective-C++ because tgmath (and ctgmath) seem not really to work under Objective-C++. The internet says that C++ has a separate overloading mechanism but when I Cmd+click on the function names under C++ I always get pointed to just the `double` version. Huh.

Ready for review @maicki @appleguy @levi 
",Adlai-Holler,levi
2006,2016-07-29 00:21:06,"This should retain full precision on both 32-bit and 64-bit. 

I dropped the file down to Objective-C from Objective-C++ because tgmath (and ctgmath) seem not really to work under Objective-C++. The internet says that C++ has a separate overloading mechanism but when I Cmd+click on the function names under C++ I always get pointed to just the `double` version. Huh.

Ready for review @maicki @appleguy @levi 
",Adlai-Holler,appleguy
2006,2016-07-29 00:21:06,"This should retain full precision on both 32-bit and 64-bit. 

I dropped the file down to Objective-C from Objective-C++ because tgmath (and ctgmath) seem not really to work under Objective-C++. The internet says that C++ has a separate overloading mechanism but when I Cmd+click on the function names under C++ I always get pointed to just the `double` version. Huh.

Ready for review @maicki @appleguy @levi 
",Adlai-Holler,maicki
2000,2016-08-14 19:52:24,"Thanks @garrettmoon for adding this to `ASTextNode`!

@Yue-Wang-Google try this out and let us know if this doesn't work for you. The fix is currently in `master` (2.0 beta), which contains a few minor breaking API changes. I'll try to get this into `1.9.91` as well so that you can test it when we bump the pod in a day or two. 
",hannahmbanana,garrettmoon
1998,2016-07-27 23:03:36,"Beautiful! This is good with me. One more review @maicki @appleguy @levi ?
",Adlai-Holler,levi
1998,2016-07-27 23:03:36,"Beautiful! This is good with me. One more review @maicki @appleguy @levi ?
",Adlai-Holler,appleguy
1998,2016-07-27 23:03:36,"Beautiful! This is good with me. One more review @maicki @appleguy @levi ?
",Adlai-Holler,maicki
1991,2016-08-15 20:40:52,"@garrettmoon: is this intended behavior?
",hannahmbanana,garrettmoon
1990,2016-10-26 21:32:13,"@evgenyst I am having issues wrapping my head around the topics of Intelligent Preloading.
Where did you learn about them? Or how did you figure them out?

I downloaded you demo project and it help me a lot, but I still have a lot of questions.
For example - looking at ImageCellNodeForTable:
`override func displayWillStart()`  
`override func fetchData()`

Why are you using these methods? 

It seem like you are following this comment from @hannahmbanana - https://github.com/facebook/AsyncDisplayKit/issues/2226#issuecomment-246154377 - where did you learn about that?
",DavidSchechter,hannahmbanana
1988,2016-07-27 06:27:19,"@maicki @Adlai-Holler:  @johnepinterest requested that we clean up our analyzer warnings so that Jenkins can run Analyzer builds. 
",hannahmbanana,johnepinterest
1988,2016-07-27 06:27:19,"@maicki @Adlai-Holler:  @johnepinterest requested that we clean up our analyzer warnings so that Jenkins can run Analyzer builds. 
",hannahmbanana,maicki
1988,2016-07-27 06:27:19,"@maicki @Adlai-Holler:  @johnepinterest requested that we clean up our analyzer warnings so that Jenkins can run Analyzer builds. 
",hannahmbanana,Adlai-Holler
1987,2016-07-26 18:59:52,"- Set it up to cancel work if the data source goes away.
- Rename and clean up some methods
- Make `dataSource` readonly, so that once it's gone we can be sure it's time to stop doing anything
- Add a mechanism to see how much work we avoided with this change. I don't have a device handy right now but the results on the simulator aren't great. I'll test it with a device and report back. 

@appleguy I'd like to cancel laying out nodes on reload data, but I'm hesitating because I want your opinion about the risk involved with completion handlers. So if I call insertRowsAtIndexPaths: with 20 items, and in the completion handler I assume those 20 items are there, but I pre-empted it with reloadData, we should probably still call the completion handler but those items may not have been inserted. I think we should go for it in a separate PR, and if it ever becomes an issue deal with it at that time.
",Adlai-Holler,appleguy
1987,2016-07-26 19:01:57,"Ready for review! @maicki @appleguy @levi 
",Adlai-Holler,levi
1987,2016-07-26 19:01:57,"Ready for review! @maicki @appleguy @levi 
",Adlai-Holler,appleguy
1987,2016-07-26 19:01:57,"Ready for review! @maicki @appleguy @levi 
",Adlai-Holler,maicki
1984,2016-07-26 00:25:16,"🙌

@maicki  
",Adlai-Holler,maicki
1977,2016-07-24 20:49:59,"Use XCTestExpectation for asynchronous test, and remove a test method that doesn't do anything. Review? @maicki @appleguy @levi 
",Adlai-Holler,levi
1977,2016-07-24 20:49:59,"Use XCTestExpectation for asynchronous test, and remove a test method that doesn't do anything. Review? @maicki @appleguy @levi 
",Adlai-Holler,appleguy
1977,2016-07-24 20:49:59,"Use XCTestExpectation for asynchronous test, and remove a test method that doesn't do anything. Review? @maicki @appleguy @levi 
",Adlai-Holler,maicki
1976,2016-07-24 20:39:48,"Supersedes #1957 @appleguy @maicki 
",Adlai-Holler,appleguy
1976,2016-07-24 20:39:48,"Supersedes #1957 @appleguy @maicki 
",Adlai-Holler,maicki
1971,2016-07-29 19:50:49,"@appleguy I added a commit that uses some stored properties related to pin drawing, and a flag that makes sure they're created on the main thread initially. I didn't end up creating the properties in `setAnnotations:` since we already check `if (annotations.count > 0)` in `takeSnapshot:` and it's easier to handle in one place.
",tomizimobile,appleguy
1970,2016-07-22 19:44:42,"I am working on the data controller teardown/cancellation and I found some dead code. I wanted to break it out into a separate PR. I also found that range controller is calling an optional protocol selector without checking if it responds.

I removed some optional editing methods from the ASLayoutController protocol. They aren't called anywhere, and not implemented by FlowLayoutController.

@maicki @levi @appleguy Quick review?
",Adlai-Holler,levi
1970,2016-07-22 19:44:42,"I am working on the data controller teardown/cancellation and I found some dead code. I wanted to break it out into a separate PR. I also found that range controller is calling an optional protocol selector without checking if it responds.

I removed some optional editing methods from the ASLayoutController protocol. They aren't called anywhere, and not implemented by FlowLayoutController.

@maicki @levi @appleguy Quick review?
",Adlai-Holler,appleguy
1970,2016-07-22 19:44:42,"I am working on the data controller teardown/cancellation and I found some dead code. I wanted to break it out into a separate PR. I also found that range controller is calling an optional protocol selector without checking if it responds.

I removed some optional editing methods from the ASLayoutController protocol. They aren't called anywhere, and not implemented by FlowLayoutController.

@maicki @levi @appleguy Quick review?
",Adlai-Holler,maicki
1963,2016-07-21 18:46:04,"This was a very very rough manual merge, so let's review this before we land it. @maicki @levi 
",Adlai-Holler,levi
1963,2016-07-21 18:46:04,"This was a very very rough manual merge, so let's review this before we land it. @maicki @levi 
",Adlai-Holler,maicki
1957,2016-07-20 20:57:10,"Just a bit of housekeeping. It was nice knowing you ASWeakSet.

![metal_gear_-_big_boss_salute_ metal_gear_solid_3_snake_eater](https://cloud.githubusercontent.com/assets/2466893/17002638/1f1a546a-4e81-11e6-9a2d-79982e982e7e.gif)

Note: It would be tempting to replace a couple of our NSMutableSets with NSHashTables. Namely, `_cellsForVisibilityUpdates` and `_pendingDisplayNodes`. We don't really want to retain the cells/nodes in those cases, but according to https://www.objc.io/issues/7-foundation/collections/#nshashtable NSHashTable inserts are much slower than NSMutableSet inserts, so I opted to leave it. I believe in 99.9% of cases we won't retain those things materially longer using NSMutableSet.

Ready for review @levi @maicki @appleguy 
",Adlai-Holler,levi
1957,2016-07-20 20:57:10,"Just a bit of housekeeping. It was nice knowing you ASWeakSet.

![metal_gear_-_big_boss_salute_ metal_gear_solid_3_snake_eater](https://cloud.githubusercontent.com/assets/2466893/17002638/1f1a546a-4e81-11e6-9a2d-79982e982e7e.gif)

Note: It would be tempting to replace a couple of our NSMutableSets with NSHashTables. Namely, `_cellsForVisibilityUpdates` and `_pendingDisplayNodes`. We don't really want to retain the cells/nodes in those cases, but according to https://www.objc.io/issues/7-foundation/collections/#nshashtable NSHashTable inserts are much slower than NSMutableSet inserts, so I opted to leave it. I believe in 99.9% of cases we won't retain those things materially longer using NSMutableSet.

Ready for review @levi @maicki @appleguy 
",Adlai-Holler,appleguy
1957,2016-07-20 20:57:10,"Just a bit of housekeeping. It was nice knowing you ASWeakSet.

![metal_gear_-_big_boss_salute_ metal_gear_solid_3_snake_eater](https://cloud.githubusercontent.com/assets/2466893/17002638/1f1a546a-4e81-11e6-9a2d-79982e982e7e.gif)

Note: It would be tempting to replace a couple of our NSMutableSets with NSHashTables. Namely, `_cellsForVisibilityUpdates` and `_pendingDisplayNodes`. We don't really want to retain the cells/nodes in those cases, but according to https://www.objc.io/issues/7-foundation/collections/#nshashtable NSHashTable inserts are much slower than NSMutableSet inserts, so I opted to leave it. I believe in 99.9% of cases we won't retain those things materially longer using NSMutableSet.

Ready for review @levi @maicki @appleguy 
",Adlai-Holler,maicki
1956,2016-07-20 20:01:54,"@maicki @levi Could I get a review on this beast?
",Adlai-Holler,levi
1956,2016-07-20 20:01:54,"@maicki @levi Could I get a review on this beast?
",Adlai-Holler,maicki
1954,2016-07-19 23:14:49,"Closing #1748 and opening this Pull Request, as the base in #1748 was still the old commit and after rebasing, it leads to the longest PR.   

@gazreese @ejensen  @hannahmbanana @levi @maicki 
",Xinchi,levi
1954,2016-07-19 23:14:49,"Closing #1748 and opening this Pull Request, as the base in #1748 was still the old commit and after rebasing, it leads to the longest PR.   

@gazreese @ejensen  @hannahmbanana @levi @maicki 
",Xinchi,maicki
1954,2016-07-19 23:14:49,"Closing #1748 and opening this Pull Request, as the base in #1748 was still the old commit and after rebasing, it leads to the longest PR.   

@gazreese @ejensen  @hannahmbanana @levi @maicki 
",Xinchi,ejensen
1954,2016-07-19 23:14:49,"Closing #1748 and opening this Pull Request, as the base in #1748 was still the old commit and after rebasing, it leads to the longest PR.   

@gazreese @ejensen  @hannahmbanana @levi @maicki 
",Xinchi,hannahmbanana
1954,2016-07-19 23:14:49,"Closing #1748 and opening this Pull Request, as the base in #1748 was still the old commit and after rebasing, it leads to the longest PR.   

@gazreese @ejensen  @hannahmbanana @levi @maicki 
",Xinchi,gazreese
1954,2016-07-20 03:31:04,"@chourobin Regarding your comment in #1600, 

> hey @gazreese, I'd just like to add that after further investigation, I believe it's no longer required to build the AVPlayerItem from the URL (for HLS). Hence, the check for tracks should no longer be needed.
> 
> Apparently the AVFoundation guide was out of date. In this release note -- under Enhancements for HTTP Live Streaming -- it states that all assets (HLS and non-HLS) may be constructed from an AVURLAsset. We just have to call -loadValuesAsynchronouslyForKeys:completionHandler: first before assigning it to a player item. I've been doing this outside of ASVideoNode for now but I would be happy to submit a PR to bring this async asset loading into ASVideoNode by default. I wanted to check in and see what you guys think.

Seems it's not entirely true that this issue has gone away in the AVFoundation, as @gazreese and I have observed the issue with HLS loading.  So this is what this PR is for.
",Xinchi,gazreese
1954,2016-07-20 03:31:04,"@chourobin Regarding your comment in #1600, 

> hey @gazreese, I'd just like to add that after further investigation, I believe it's no longer required to build the AVPlayerItem from the URL (for HLS). Hence, the check for tracks should no longer be needed.
> 
> Apparently the AVFoundation guide was out of date. In this release note -- under Enhancements for HTTP Live Streaming -- it states that all assets (HLS and non-HLS) may be constructed from an AVURLAsset. We just have to call -loadValuesAsynchronouslyForKeys:completionHandler: first before assigning it to a player item. I've been doing this outside of ASVideoNode for now but I would be happy to submit a PR to bring this async asset loading into ASVideoNode by default. I wanted to check in and see what you guys think.

Seems it's not entirely true that this issue has gone away in the AVFoundation, as @gazreese and I have observed the issue with HLS loading.  So this is what this PR is for.
",Xinchi,chourobin
1954,2016-07-20 03:31:27,"@gazreese Mind taking a look at this PR to see if it addressed the internal / public asset inconsistency issue you raised in #1600 ?
",Xinchi,gazreese
1954,2016-07-20 03:32:47,"@ejensen Mind taking a look at this PR to see if it addressed the asynchronous loading of track key that you mentioned in #1748 ?
",Xinchi,ejensen
1954,2016-07-20 03:40:35,"@gazreese @chourobin @ejensen @Eke 
Do you think it's better for ASDK to tell if the AVUrlAsset specified by the client a HLS vs non-HLS asset by checking the track property, or is it better to provide a separate API for the client to specify which to construct the playeritem with, asset or url? 
",Xinchi,Eke
1954,2016-07-20 03:40:35,"@gazreese @chourobin @ejensen @Eke 
Do you think it's better for ASDK to tell if the AVUrlAsset specified by the client a HLS vs non-HLS asset by checking the track property, or is it better to provide a separate API for the client to specify which to construct the playeritem with, asset or url? 
",Xinchi,chourobin
1954,2016-07-20 03:40:35,"@gazreese @chourobin @ejensen @Eke 
Do you think it's better for ASDK to tell if the AVUrlAsset specified by the client a HLS vs non-HLS asset by checking the track property, or is it better to provide a separate API for the client to specify which to construct the playeritem with, asset or url? 
",Xinchi,ejensen
1954,2016-07-20 03:40:35,"@gazreese @chourobin @ejensen @Eke 
Do you think it's better for ASDK to tell if the AVUrlAsset specified by the client a HLS vs non-HLS asset by checking the track property, or is it better to provide a separate API for the client to specify which to construct the playeritem with, asset or url? 
",Xinchi,gazreese
1952,2016-07-19 21:30:54,"In my project I delay setting the `ASVideoNode`'s `asset` until I need to, setting only the preview image initially. Since `ASVideoNode` starts preloading as soon as you set the asset my guess is this isn't an uncommon use case.

This works fine, unfortunately there is a flicker because we currently clear the image (ultimately in `[super clearFetchedData];`) in `setAsset:`. This PR is a fix for this issue.

@maicki @appleguy I wasn't sure about the method name `__clearFetchedData` (technically __ is reserved.) Happy to change if you have something better in mind.
",eanagel,appleguy
1952,2016-07-19 21:30:54,"In my project I delay setting the `ASVideoNode`'s `asset` until I need to, setting only the preview image initially. Since `ASVideoNode` starts preloading as soon as you set the asset my guess is this isn't an uncommon use case.

This works fine, unfortunately there is a flicker because we currently clear the image (ultimately in `[super clearFetchedData];`) in `setAsset:`. This PR is a fix for this issue.

@maicki @appleguy I wasn't sure about the method name `__clearFetchedData` (technically __ is reserved.) Happy to change if you have something better in mind.
",eanagel,maicki
1952,2016-07-21 13:11:16,"@eanagel Hey, great having this PR! Can you try looking into the failing tests if you have some time? Tests should succeed before we can merge ... Thank you very much!

In terms of naming for our internal methods we tend to go to one underline in the method name like `_clearFetchedData`. Curious what @appleguy or @Adlai-Holler thinks about it.
",maicki,appleguy
1952,2016-07-21 13:11:16,"@eanagel Hey, great having this PR! Can you try looking into the failing tests if you have some time? Tests should succeed before we can merge ... Thank you very much!

In terms of naming for our internal methods we tend to go to one underline in the method name like `_clearFetchedData`. Curious what @appleguy or @Adlai-Holler thinks about it.
",maicki,Adlai-Holler
1947,2016-07-18 19:19:29,"This fixes the recent regression that came with the range controller PR. Needs review @levi @maicki @appleguy 
",Adlai-Holler,levi
1947,2016-07-18 19:19:29,"This fixes the recent regression that came with the range controller PR. Needs review @levi @maicki @appleguy 
",Adlai-Holler,appleguy
1947,2016-07-18 19:19:29,"This fixes the recent regression that came with the range controller PR. Needs review @levi @maicki @appleguy 
",Adlai-Holler,maicki
1946,2016-07-18 19:17:19,"NSOperationQueue doesn't support backtrace recording, so it is impossible to tell where operations got enqueued from. 

This patch makes debugging data controller trouble a lot easier by migrating to GCD. I've tested this thoroughly. The only thing that we lose with this, is we lose a somewhat valuable assertion. @maicki @appleguy @levi Needs review
",Adlai-Holler,levi
1946,2016-07-18 19:17:19,"NSOperationQueue doesn't support backtrace recording, so it is impossible to tell where operations got enqueued from. 

This patch makes debugging data controller trouble a lot easier by migrating to GCD. I've tested this thoroughly. The only thing that we lose with this, is we lose a somewhat valuable assertion. @maicki @appleguy @levi Needs review
",Adlai-Holler,appleguy
1946,2016-07-18 19:17:19,"NSOperationQueue doesn't support backtrace recording, so it is impossible to tell where operations got enqueued from. 

This patch makes debugging data controller trouble a lot easier by migrating to GCD. I've tested this thoroughly. The only thing that we lose with this, is we lose a somewhat valuable assertion. @maicki @appleguy @levi Needs review
",Adlai-Holler,maicki
1946,2016-07-19 00:19:00,"Thanks @levi comments addressed. Could I get one more look over this before merge? @levi @appleguy ?
",Adlai-Holler,levi
1946,2016-07-19 00:19:00,"Thanks @levi comments addressed. Could I get one more look over this before merge? @levi @appleguy ?
",Adlai-Holler,appleguy
1945,2016-07-18 13:39:23,"Hi everyone!

I had reordering cells feature working well with ASCollectionView in my project. After upgrade to 1.9.81 it had stopped working. 

What I do is:
- Add UIPanGestureRecognizer to ASCollectionView
- on UIPanGestureRecognizer.state == UIGestureRecognizerStateChanged (when user is reordering cells) I make some calculations, change layout attributes a little bit and use ASCollectionView.performBatchUpdates:completion: with empty block to trigger relayout with animation.


- Result: Cells don't switch positions as they used to with previous version. :(

I checked commits that may cause this issue and found out that this is the one: https://github.com/facebook/AsyncDisplayKit/commit/c62a4d3e79e6a5cdaf4cf5ba14300ed3bdbf9fa9

I also checked if `invalidateLayout` method would work and it works, but there is no animation (as always). 

@Adlai-Holler and others: Do you have any idea how can I fix this and still use latest ASDK version? 
Thank you a lot! 
",kohol,Adlai-Holler
1937,2016-07-18 14:24:12,"@appleguy @Adlai-Holler Can you please take a look. Removes completely the creation of children's array in `ASLayoutSpec` internally in ASDK. Furthermore it adds fast enumeration to `ASEnvironment` and so to `ASDisplayNode` and `ASLayoutSpec` to iterate through children.
",maicki,appleguy
1937,2016-07-18 14:24:12,"@appleguy @Adlai-Holler Can you please take a look. Removes completely the creation of children's array in `ASLayoutSpec` internally in ASDK. Furthermore it adds fast enumeration to `ASEnvironment` and so to `ASDisplayNode` and `ASLayoutSpec` to iterate through children.
",maicki,Adlai-Holler
1937,2016-07-18 22:22:59,"@Adlai-Holler @appleguy  Changes done ready to look over again and merge
",maicki,appleguy
1933,2016-07-16 06:12:05,"@johnepinterest @maicki @Adlai-Holler @chrisdanford @hannahmbanana 

Hey all - this method had grown a bit over time, as features like instance method display were added, and it was time for cleanup.

I took time to do this carefully enough that I feel regressions are unlikely once it has been fully tested with the app, which I'll do over the weekend.  I am very familiar with the original state of the code.

I'd like to switch the order of the if / else so that rasterization comes second, but didn't want to move it for now so the diff has a slight element of readability lol.

This should improve efficiency by eliminating several lock acquisitions, and also adding a few strategically relevant isCancelled checks.  Particularly on the slowest devices with fast user input / large amounts of content moving (like on iPhone 4 with fast scrolling), I think this could make an incremental difference.
",appleguy,johnepinterest
1933,2016-07-16 06:12:05,"@johnepinterest @maicki @Adlai-Holler @chrisdanford @hannahmbanana 

Hey all - this method had grown a bit over time, as features like instance method display were added, and it was time for cleanup.

I took time to do this carefully enough that I feel regressions are unlikely once it has been fully tested with the app, which I'll do over the weekend.  I am very familiar with the original state of the code.

I'd like to switch the order of the if / else so that rasterization comes second, but didn't want to move it for now so the diff has a slight element of readability lol.

This should improve efficiency by eliminating several lock acquisitions, and also adding a few strategically relevant isCancelled checks.  Particularly on the slowest devices with fast user input / large amounts of content moving (like on iPhone 4 with fast scrolling), I think this could make an incremental difference.
",appleguy,maicki
1933,2016-07-16 06:12:05,"@johnepinterest @maicki @Adlai-Holler @chrisdanford @hannahmbanana 

Hey all - this method had grown a bit over time, as features like instance method display were added, and it was time for cleanup.

I took time to do this carefully enough that I feel regressions are unlikely once it has been fully tested with the app, which I'll do over the weekend.  I am very familiar with the original state of the code.

I'd like to switch the order of the if / else so that rasterization comes second, but didn't want to move it for now so the diff has a slight element of readability lol.

This should improve efficiency by eliminating several lock acquisitions, and also adding a few strategically relevant isCancelled checks.  Particularly on the slowest devices with fast user input / large amounts of content moving (like on iPhone 4 with fast scrolling), I think this could make an incremental difference.
",appleguy,hannahmbanana
1933,2016-07-16 06:12:05,"@johnepinterest @maicki @Adlai-Holler @chrisdanford @hannahmbanana 

Hey all - this method had grown a bit over time, as features like instance method display were added, and it was time for cleanup.

I took time to do this carefully enough that I feel regressions are unlikely once it has been fully tested with the app, which I'll do over the weekend.  I am very familiar with the original state of the code.

I'd like to switch the order of the if / else so that rasterization comes second, but didn't want to move it for now so the diff has a slight element of readability lol.

This should improve efficiency by eliminating several lock acquisitions, and also adding a few strategically relevant isCancelled checks.  Particularly on the slowest devices with fast user input / large amounts of content moving (like on iPhone 4 with fast scrolling), I think this could make an incremental difference.
",appleguy,chrisdanford
1933,2016-07-16 06:12:05,"@johnepinterest @maicki @Adlai-Holler @chrisdanford @hannahmbanana 

Hey all - this method had grown a bit over time, as features like instance method display were added, and it was time for cleanup.

I took time to do this carefully enough that I feel regressions are unlikely once it has been fully tested with the app, which I'll do over the weekend.  I am very familiar with the original state of the code.

I'd like to switch the order of the if / else so that rasterization comes second, but didn't want to move it for now so the diff has a slight element of readability lol.

This should improve efficiency by eliminating several lock acquisitions, and also adding a few strategically relevant isCancelled checks.  Particularly on the slowest devices with fast user input / large amounts of content moving (like on iPhone 4 with fast scrolling), I think this could make an incremental difference.
",appleguy,Adlai-Holler
1932,2016-07-16 17:20:50,"@appleguy: ready to merge?
",hannahmbanana,appleguy
1931,2016-07-15 22:11:37,"This fixes rotation issues @rcancro and I have seen. It is still being tested.
",Adlai-Holler,rcancro
1931,2016-07-15 23:04:01,"OK this is working super good! Could this get some inspection from @maicki @levi @appleguy 
",Adlai-Holler,levi
1931,2016-07-15 23:04:01,"OK this is working super good! Could this get some inspection from @maicki @levi @appleguy 
",Adlai-Holler,appleguy
1931,2016-07-15 23:04:01,"OK this is working super good! Could this get some inspection from @maicki @levi @appleguy 
",Adlai-Holler,maicki
1925,2016-07-15 06:19:10,"Not everyone has had the pleasure of working with the notorious @appleguy, so the joke in the intro can be confusing.
",levi,appleguy
1925,2016-07-15 16:46:34,"@hannahmbanana LGTM we should just merge it in whenever you are ready
",maicki,hannahmbanana
1922,2016-07-14 19:10:07,"This fixes issues where nodes at zero-size might be triggered to layout early and have invalid (negative) values. I tested this by hand very thoroughly.

It was also sufficient to change the relevant code to merely: 



but I don't believe this code is needed at all. If the range mode will change in response to the view being in/out of a window, then that's a separate code path. @appleguy @maicki @levi @nguyenhuy Review?
",Adlai-Holler,levi
1922,2016-07-14 19:10:07,"This fixes issues where nodes at zero-size might be triggered to layout early and have invalid (negative) values. I tested this by hand very thoroughly.

It was also sufficient to change the relevant code to merely: 



but I don't believe this code is needed at all. If the range mode will change in response to the view being in/out of a window, then that's a separate code path. @appleguy @maicki @levi @nguyenhuy Review?
",Adlai-Holler,appleguy
1922,2016-07-14 19:10:07,"This fixes issues where nodes at zero-size might be triggered to layout early and have invalid (negative) values. I tested this by hand very thoroughly.

It was also sufficient to change the relevant code to merely: 



but I don't believe this code is needed at all. If the range mode will change in response to the view being in/out of a window, then that's a separate code path. @appleguy @maicki @levi @nguyenhuy Review?
",Adlai-Holler,nguyenhuy
1922,2016-07-14 19:10:07,"This fixes issues where nodes at zero-size might be triggered to layout early and have invalid (negative) values. I tested this by hand very thoroughly.

It was also sufficient to change the relevant code to merely: 



but I don't believe this code is needed at all. If the range mode will change in response to the view being in/out of a window, then that's a separate code path. @appleguy @maicki @levi @nguyenhuy Review?
",Adlai-Holler,maicki
1921,2016-07-14 18:37:33,"This morning Michael and I found that our range mode updating is basically not working at all for a couple reasons.
- ASCollectionNode and ASTableNode declare their conformance in a category, which apparently doesn't work and causes the runtime to return NO for conformsToProtocol:
- Pinterest (and I'm sure other apps) have ASViewControllers with non-table, non-collection nodes. Sometimes these are plain old ASDisplayNodes. None of them conform to the update protocol.
- ASTableNode and ASCollectionNode did not implement +setRangeModeForMemoryWarnings: so they actually didn't conform to the updating protocol. This also means none of our users is calling that method or it would have crashed.
- Worst of all, we had no idea that none of this was working.

So
- Move the conformances in ASTableNode/ASCollectionNode to the main @interface instead of the category. This makes them return YES from `conformsToProtocol`.
- Allow ASViewController to conform to the range updating protocol as well as its node.
- Add a one-time-per-VC log if we try to adjust the range mode but can't because neither the VC nor the node conforms to the protocol.
- **BREAKING** Remove +setRangeModeForMemoryWarnings from the protocol and replace with a global method `+[ASDisplayNode setRangeModeForMemoryWarnings:]`.
  - I think we can land this even with the breaking change.
  - Obviously nobody was calling it or they would have gotten crashes.
  - It's not clear what calling it on, say, ASTableNode would have done. It would probably have called through to ASRangeController, which would have affected ASCollectionNode as well.
  - It would be a pain to override for every conforming node/VC.

@appleguy @maicki @levi This is pretty urgent. I think we should cherry-pick this to 6.7 if it's approved.
",Adlai-Holler,levi
1921,2016-07-14 18:37:33,"This morning Michael and I found that our range mode updating is basically not working at all for a couple reasons.
- ASCollectionNode and ASTableNode declare their conformance in a category, which apparently doesn't work and causes the runtime to return NO for conformsToProtocol:
- Pinterest (and I'm sure other apps) have ASViewControllers with non-table, non-collection nodes. Sometimes these are plain old ASDisplayNodes. None of them conform to the update protocol.
- ASTableNode and ASCollectionNode did not implement +setRangeModeForMemoryWarnings: so they actually didn't conform to the updating protocol. This also means none of our users is calling that method or it would have crashed.
- Worst of all, we had no idea that none of this was working.

So
- Move the conformances in ASTableNode/ASCollectionNode to the main @interface instead of the category. This makes them return YES from `conformsToProtocol`.
- Allow ASViewController to conform to the range updating protocol as well as its node.
- Add a one-time-per-VC log if we try to adjust the range mode but can't because neither the VC nor the node conforms to the protocol.
- **BREAKING** Remove +setRangeModeForMemoryWarnings from the protocol and replace with a global method `+[ASDisplayNode setRangeModeForMemoryWarnings:]`.
  - I think we can land this even with the breaking change.
  - Obviously nobody was calling it or they would have gotten crashes.
  - It's not clear what calling it on, say, ASTableNode would have done. It would probably have called through to ASRangeController, which would have affected ASCollectionNode as well.
  - It would be a pain to override for every conforming node/VC.

@appleguy @maicki @levi This is pretty urgent. I think we should cherry-pick this to 6.7 if it's approved.
",Adlai-Holler,appleguy
1921,2016-07-14 18:37:33,"This morning Michael and I found that our range mode updating is basically not working at all for a couple reasons.
- ASCollectionNode and ASTableNode declare their conformance in a category, which apparently doesn't work and causes the runtime to return NO for conformsToProtocol:
- Pinterest (and I'm sure other apps) have ASViewControllers with non-table, non-collection nodes. Sometimes these are plain old ASDisplayNodes. None of them conform to the update protocol.
- ASTableNode and ASCollectionNode did not implement +setRangeModeForMemoryWarnings: so they actually didn't conform to the updating protocol. This also means none of our users is calling that method or it would have crashed.
- Worst of all, we had no idea that none of this was working.

So
- Move the conformances in ASTableNode/ASCollectionNode to the main @interface instead of the category. This makes them return YES from `conformsToProtocol`.
- Allow ASViewController to conform to the range updating protocol as well as its node.
- Add a one-time-per-VC log if we try to adjust the range mode but can't because neither the VC nor the node conforms to the protocol.
- **BREAKING** Remove +setRangeModeForMemoryWarnings from the protocol and replace with a global method `+[ASDisplayNode setRangeModeForMemoryWarnings:]`.
  - I think we can land this even with the breaking change.
  - Obviously nobody was calling it or they would have gotten crashes.
  - It's not clear what calling it on, say, ASTableNode would have done. It would probably have called through to ASRangeController, which would have affected ASCollectionNode as well.
  - It would be a pain to override for every conforming node/VC.

@appleguy @maicki @levi This is pretty urgent. I think we should cherry-pick this to 6.7 if it's approved.
",Adlai-Holler,maicki
1917,2016-07-14 17:50:02,"@levi @maicki @Adlai-Holler : this was a fix for an issue with the sign-in node and email account sign up in all iOS 8. I think we need to cherry pick to `releases/p6.7` as well. 
",hannahmbanana,levi
1917,2016-07-14 17:50:02,"@levi @maicki @Adlai-Holler : this was a fix for an issue with the sign-in node and email account sign up in all iOS 8. I think we need to cherry pick to `releases/p6.7` as well. 
",hannahmbanana,Adlai-Holler
1907,2016-07-13 00:28:05,"Some crazy idea and follow up to #1839. We will push the layout of nodes to always be on a background thread as based on the work in #1839 we will trampoline the layout automatically to the main thread if at least one node is loaded.

Furthermore there needs to be some more improvements to it:
- Moving away from dispatching to global dispatch queues in layout transition and ASDataController
- Remove the semaphore in ASDataController
- Adding tests

@Adlai-Holler @nguyenhuy @appleguy @levi What do you guys think about that? We have to carefully think about that and check for any gotchas that could happen, if we really want to go forward with that.
",maicki,nguyenhuy
1907,2016-07-13 00:28:05,"Some crazy idea and follow up to #1839. We will push the layout of nodes to always be on a background thread as based on the work in #1839 we will trampoline the layout automatically to the main thread if at least one node is loaded.

Furthermore there needs to be some more improvements to it:
- Moving away from dispatching to global dispatch queues in layout transition and ASDataController
- Remove the semaphore in ASDataController
- Adding tests

@Adlai-Holler @nguyenhuy @appleguy @levi What do you guys think about that? We have to carefully think about that and check for any gotchas that could happen, if we really want to go forward with that.
",maicki,appleguy
1907,2016-07-13 00:28:05,"Some crazy idea and follow up to #1839. We will push the layout of nodes to always be on a background thread as based on the work in #1839 we will trampoline the layout automatically to the main thread if at least one node is loaded.

Furthermore there needs to be some more improvements to it:
- Moving away from dispatching to global dispatch queues in layout transition and ASDataController
- Remove the semaphore in ASDataController
- Adding tests

@Adlai-Holler @nguyenhuy @appleguy @levi What do you guys think about that? We have to carefully think about that and check for any gotchas that could happen, if we really want to go forward with that.
",maicki,levi
1907,2016-07-13 00:28:05,"Some crazy idea and follow up to #1839. We will push the layout of nodes to always be on a background thread as based on the work in #1839 we will trampoline the layout automatically to the main thread if at least one node is loaded.

Furthermore there needs to be some more improvements to it:
- Moving away from dispatching to global dispatch queues in layout transition and ASDataController
- Remove the semaphore in ASDataController
- Adding tests

@Adlai-Holler @nguyenhuy @appleguy @levi What do you guys think about that? We have to carefully think about that and check for any gotchas that could happen, if we really want to go forward with that.
",maicki,Adlai-Holler
1906,2016-07-12 21:24:30,"Review plz @appleguy @maicki @levi 
",Adlai-Holler,levi
1906,2016-07-12 21:24:30,"Review plz @appleguy @maicki @levi 
",Adlai-Holler,appleguy
1906,2016-07-12 21:24:30,"Review plz @appleguy @maicki @levi 
",Adlai-Holler,maicki
1906,2016-07-12 22:32:25,"Thanks for the review @maicki! Comments addressed. Could I get one more set of eyes on this @levi ?
",Adlai-Holler,levi
1905,2016-07-14 04:42:36,"@stephenkopylov: I had to call in the expert. @maicki should have a fix for you submitted as a PR in the next day!
",hannahmbanana,maicki
1903,2016-07-12 18:31:35,"LGTM

@appleguy  or @Adlai-Holler can you take a look over it too
",maicki,appleguy
1903,2016-07-12 18:31:35,"LGTM

@appleguy  or @Adlai-Holler can you take a look over it too
",maicki,Adlai-Holler
1902,2016-07-12 13:49:17,"Current if `[ASDisplayNode invalidateCalculatedLayout]` and `[ASDisplayNode setNeedsLayout]` called in a subclass (see`[ASButtonNode setTitle:]`) the call actually does not trigger any relayout. It does not even bubble up the tree as it returns early in `[ASDisplayNode __setNeedsDisplay]`

After talking with @nguyenhuy about the initial intention why we are returning early there we found a better way for it.

This should resolve: #1865

@nguyenhuy @levi @appleguy Can I get a look over please
",maicki,nguyenhuy
1902,2016-07-12 13:49:17,"Current if `[ASDisplayNode invalidateCalculatedLayout]` and `[ASDisplayNode setNeedsLayout]` called in a subclass (see`[ASButtonNode setTitle:]`) the call actually does not trigger any relayout. It does not even bubble up the tree as it returns early in `[ASDisplayNode __setNeedsDisplay]`

After talking with @nguyenhuy about the initial intention why we are returning early there we found a better way for it.

This should resolve: #1865

@nguyenhuy @levi @appleguy Can I get a look over please
",maicki,appleguy
1902,2016-07-12 13:49:17,"Current if `[ASDisplayNode invalidateCalculatedLayout]` and `[ASDisplayNode setNeedsLayout]` called in a subclass (see`[ASButtonNode setTitle:]`) the call actually does not trigger any relayout. It does not even bubble up the tree as it returns early in `[ASDisplayNode __setNeedsDisplay]`

After talking with @nguyenhuy about the initial intention why we are returning early there we found a better way for it.

This should resolve: #1865

@nguyenhuy @levi @appleguy Can I get a look over please
",maicki,levi
1895,2016-07-12 03:37:21,"@erichoracek @Adlai-Holler it seems like this could be related to https://github.com/facebook/AsyncDisplayKit/pull/1773 .

I think the code is more correct than it was, but we should consider what we can learn from this and if there are additional incremental fixes that are possible without a full rearchitecture.  This was discussed in the ASDK team meeting today, and we'd love to prioritize it for the next couple weeks, but there is a challenging tradeoff with other 2.0 priorities / overall schedule.  It may need to be 2.1 before we can do the full rearchitecture.
",appleguy,erichoracek
1895,2016-07-12 03:37:21,"@erichoracek @Adlai-Holler it seems like this could be related to https://github.com/facebook/AsyncDisplayKit/pull/1773 .

I think the code is more correct than it was, but we should consider what we can learn from this and if there are additional incremental fixes that are possible without a full rearchitecture.  This was discussed in the ASDK team meeting today, and we'd love to prioritize it for the next couple weeks, but there is a challenging tradeoff with other 2.0 priorities / overall schedule.  It may need to be 2.1 before we can do the full rearchitecture.
",appleguy,Adlai-Holler
1894,2016-07-11 20:43:28,"This adds assertions like ""attempt to delete item 10 in section 0 which only contained 5 items before the update"" and ""Invalid number of sections: count after the update (5) must equal the count before the update (2) plus or minus the number of sections inserted or deleted (4 inserted, 0 deleted).""

This also adds the identity of the data controller into the name of its editing queue, to help debugging.

This is ready for review! @appleguy @nguyenhuy @maicki @levi 
",Adlai-Holler,nguyenhuy
1894,2016-07-11 20:43:28,"This adds assertions like ""attempt to delete item 10 in section 0 which only contained 5 items before the update"" and ""Invalid number of sections: count after the update (5) must equal the count before the update (2) plus or minus the number of sections inserted or deleted (4 inserted, 0 deleted).""

This also adds the identity of the data controller into the name of its editing queue, to help debugging.

This is ready for review! @appleguy @nguyenhuy @maicki @levi 
",Adlai-Holler,appleguy
1894,2016-07-11 20:43:28,"This adds assertions like ""attempt to delete item 10 in section 0 which only contained 5 items before the update"" and ""Invalid number of sections: count after the update (5) must equal the count before the update (2) plus or minus the number of sections inserted or deleted (4 inserted, 0 deleted).""

This also adds the identity of the data controller into the name of its editing queue, to help debugging.

This is ready for review! @appleguy @nguyenhuy @maicki @levi 
",Adlai-Holler,levi
1894,2016-07-11 20:43:28,"This adds assertions like ""attempt to delete item 10 in section 0 which only contained 5 items before the update"" and ""Invalid number of sections: count after the update (5) must equal the count before the update (2) plus or minus the number of sections inserted or deleted (4 inserted, 0 deleted).""

This also adds the identity of the data controller into the name of its editing queue, to help debugging.

This is ready for review! @appleguy @nguyenhuy @maicki @levi 
",Adlai-Holler,maicki
1886,2016-07-11 03:25:14,"Simplify applying layout transition in preparation for bigger Layout Transition API work. Changes are:
- Always go through `_pendingLayoutTransition`
- Move from `[ASDisplayNode _applyLayout:layoutTransition:]` to `[ASDisplayNode _applyLayout:]` and `[ASDisplayNode _applyLayoutTransition:]`
- Change from `[ASLayoutTransition startTransition]` to `[ASLayoutTransition applyTransition]`

@levi @appleguy Can you review. This is the first small change in preparation for the bigger change that will come for the Layout Transition API
",maicki,levi
1886,2016-07-11 03:25:14,"Simplify applying layout transition in preparation for bigger Layout Transition API work. Changes are:
- Always go through `_pendingLayoutTransition`
- Move from `[ASDisplayNode _applyLayout:layoutTransition:]` to `[ASDisplayNode _applyLayout:]` and `[ASDisplayNode _applyLayoutTransition:]`
- Change from `[ASLayoutTransition startTransition]` to `[ASLayoutTransition applyTransition]`

@levi @appleguy Can you review. This is the first small change in preparation for the bigger change that will come for the Layout Transition API
",maicki,appleguy
1886,2016-07-12 19:01:35,"@nguyenhuy @levi I addressed both of you comments can you please give it another look

`_applyLayout:` to `_setCalculatedLayout:`: After looking over the `ASDisplayNode` API again we refer the `_layout` most of the time as `calculatedLayout` so it makes sense to actually call it as a setter method

`apply` to `complete`: I see the point of @levi and so let's go with `complete` although maybe `execute` could be a good candidate too. Curious what you guys think? @levi @appleguy 
",maicki,appleguy
1875,2016-07-09 23:37:08,"@kielgillard let me know if you see any problems of this for your static library use case.

cc @maicki @Adlai-Holler @levi @hannahmbanana FYI
",appleguy,levi
1875,2016-07-09 23:37:08,"@kielgillard let me know if you see any problems of this for your static library use case.

cc @maicki @Adlai-Holler @levi @hannahmbanana FYI
",appleguy,Adlai-Holler
1875,2016-07-09 23:37:08,"@kielgillard let me know if you see any problems of this for your static library use case.

cc @maicki @Adlai-Holler @levi @hannahmbanana FYI
",appleguy,maicki
1875,2016-07-09 23:37:08,"@kielgillard let me know if you see any problems of this for your static library use case.

cc @maicki @Adlai-Holler @levi @hannahmbanana FYI
",appleguy,hannahmbanana
1873,2016-07-09 20:32:16,"@maicki Here you go!
",eanagel,maicki
1869,2016-07-08 18:38:18,"If enabled, these might interfere with some app-level developers so per @appleguy we're giving them a grace period.

Landing this once the build passes.
",Adlai-Holler,appleguy
1868,2016-07-10 04:12:33,"@iwheelbuy Could you clarify what the retain cycle was?  Referencing self in that instance / delegate method should not be an issue...

Regarding the delegate / datasource, that's a good question for @levi.  A similar issue is described / fixed here:  https://github.com/facebook/AsyncDisplayKit/pull/1740
",appleguy,levi
1868,2016-07-10 04:31:43,"@appleguy `self.header` contains an `UISearchBar`. And there was a custom variable for `UISearchBarDelegate`. And the variable was strong (without `weak` prefix). I have removed this `UISearchBarDelegate` variable and now I set `UISearchBar` delegate directly.



I hope I use a word `variable` correctly in this context (:

Well, I really hope @levi will fix it some day. I will inform my team about such weird behaviour and we will move firther (:
",iwheelbuy,levi
1867,2016-07-08 19:06:42,"@maicki Under Xcode 8 Beta 1, this still fails to build for me. @appleguy I thought you already removed this code somewhere, right?

![screen shot 2016-07-08 at 12 06 10 pm](https://cloud.githubusercontent.com/assets/2466893/16698688/6bc0b98e-4504-11e6-9ef3-7f64cb2116dd.png)
",Adlai-Holler,appleguy
1867,2016-07-08 19:15:04,"It should be removed in master

> On Jul 8, 2016, at 12:06 PM, Adlai Holler notifications@github.com wrote:
> 
> @maicki https://github.com/maicki Under Xcode 8 Beta 1, this still fails to build for me. @appleguy https://github.com/appleguy I thought you already removed this code somewhere, right?
> 
>  https://cloud.githubusercontent.com/assets/2466893/16698688/6bc0b98e-4504-11e6-9ef3-7f64cb2116dd.png
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1867#issuecomment-231446444, or mute the thread https://github.com/notifications/unsubscribe/AAigAxrxwFbElh_fn0zHDmd8tRAGSlAgks5qTp_FgaJpZM4JIP_Z.
",appleguy,appleguy
1865,2016-07-08 05:51:23,"@suomalainen9890 thanks for reporting this!  It should be fixed by this PR: https://github.com/facebook/AsyncDisplayKit/pull/1863

Could you test it out locally?  If you're able to provide a test project, we can verify it for you.  The PR mentioned should land in the next day, and will be in the next release.  cc @maicki 
",appleguy,maicki
1863,2016-07-08 03:19:51,"@appleguy @Adlai-Holler Can I get some look over it please
",maicki,appleguy
1863,2016-07-08 03:19:51,"@appleguy @Adlai-Holler Can I get some look over it please
",maicki,Adlai-Holler
1863,2016-07-08 05:02:50,"@nickvelloff is also an interested reviewer!  Thanks @maicki :)
",appleguy,nickvelloff
1858,2016-07-07 14:00:51,"Fixes #1856

cc @Adlai-Holler 
",maicki,Adlai-Holler
1857,2016-07-08 14:07:23,"@dukeow94 In the callback you have to check for the `animatedImage` property of the `ASNetworkImageNode` in case you fetch a gif. I changed the code in your sample app so you can see how this is working:



So the right way would be to first check if an image is returned and handle it if so otherwise check if an animated image is available and handle that.

cc @garrettmoon Can you take a quick look if this answer covers the issue?
",maicki,garrettmoon
1856,2016-07-07 13:51:11,"@Adlai-Holler Seems like a regression on master. Also to mention is that this only happens if you build for `Release`.

PR: for fix #1858
",maicki,Adlai-Holler
1855,2016-07-07 01:34:08,"@levi: I know you're super busy with other things, but could you check this out when you have time?
",hannahmbanana,levi
1855,2016-07-07 05:02:53,"@Adlai-Holler, I think it is possible that your recently landed change would significantly help Nick's use case here.  I think you're the right person to take a look rather than @levi since this is related to collections, not the ASLayoutSpec transitions.

> On Jul 6, 2016, at 6:34 PM, Hannah Troisi notifications@github.com wrote:
> 
> @levi https://github.com/levi: I know you're super busy with other things, but could you check this out when you have time?
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1855#issuecomment-230955532, or mute the thread https://github.com/notifications/unsubscribe/AAigA-WFLhBl4sYVEcSNYUAW3LFY291-ks5qTFeTgaJpZM4JGo5s.
",appleguy,levi
1855,2016-07-07 05:02:53,"@Adlai-Holler, I think it is possible that your recently landed change would significantly help Nick's use case here.  I think you're the right person to take a look rather than @levi since this is related to collections, not the ASLayoutSpec transitions.

> On Jul 6, 2016, at 6:34 PM, Hannah Troisi notifications@github.com wrote:
> 
> @levi https://github.com/levi: I know you're super busy with other things, but could you check this out when you have time?
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1855#issuecomment-230955532, or mute the thread https://github.com/notifications/unsubscribe/AAigA-WFLhBl4sYVEcSNYUAW3LFY291-ks5qTFeTgaJpZM4JGo5s.
",appleguy,Adlai-Holler
1851,2016-07-06 06:35:12,"@kielgillard thanks!  We don't have many clients using the static library directly - although I certainly approve of static linking, a lot of folks are achieving that with Cocoapods which I believe creates this build step.  I really appreciate you contributing the fix.

@Adlai-Holler, @hannahmbanana we should see if the Life Without Cocoapods step in build.sh / Travis can be changed to check that this works properly, e.g. fail on current master and pass after this change.  @kielgillard if you have any thoughts on that, let us know.  I would look in more detail, but it is a packed week...
",appleguy,Adlai-Holler
1851,2016-07-06 06:35:12,"@kielgillard thanks!  We don't have many clients using the static library directly - although I certainly approve of static linking, a lot of folks are achieving that with Cocoapods which I believe creates this build step.  I really appreciate you contributing the fix.

@Adlai-Holler, @hannahmbanana we should see if the Life Without Cocoapods step in build.sh / Travis can be changed to check that this works properly, e.g. fail on current master and pass after this change.  @kielgillard if you have any thoughts on that, let us know.  I would look in more detail, but it is a packed week...
",appleguy,hannahmbanana
1849,2016-07-05 23:41:23,"@garrettmoon: Could you review this PR?
",hannahmbanana,garrettmoon
1849,2016-07-09 17:31:25,"@Adlai-Holler @appleguy @garrettmoon That PR looks good to me, ready to merge?

We should open a new issue in case if we want to look into refactoring `_lazilyLoadImageIfNecessary` though, but I think the initial issue would be resolved.
",maicki,Adlai-Holler
1844,2016-07-04 04:42:47,"Also removes a deprecated CoreText property that fails to build with iOS 10.

In the screenshots below, we see a case where the client called transitionLayout... before the first measurement completed.  It's actually possible that measurement was already in progress.

My biggest question would be for @levi - with the new change to put the constrainedSize on _layout, we can't detect what constrainedSize was provided to start the layout pass that is currently underway.  Technically it might be ""most correct"" to obey the transition call as a new layout (at least, a setNeedsLayout) and use the same constrainedSize as provided to the in-flight measurement.  I presume the measurement is in flight because ASDataController should be doing that for this element, yet _layout is nil.

We can see there are some pretty bad implications to calling into the layout code with zero size.  @maicki could you document a followup to audit the code for any other points we should check for zero size and bail?  I don't think it could ever result in a useful layout.  Interestingly, at one point the height goes from 0 to +Inf...

<img width=""1512"" alt=""screen shot 2016-07-03 at 6 17 39 pm"" src=""https://cloud.githubusercontent.com/assets/565251/16550942/a65e92ba-4166-11e6-8533-fe4e0ef0a05a.png"">
<img width=""1512"" alt=""screen shot 2016-07-03 at 6 17 23 pm"" src=""https://cloud.githubusercontent.com/assets/565251/16550946/ae77b5ee-4166-11e6-8224-ec885cc4a05d.png"">
",appleguy,levi
1844,2016-07-04 04:42:47,"Also removes a deprecated CoreText property that fails to build with iOS 10.

In the screenshots below, we see a case where the client called transitionLayout... before the first measurement completed.  It's actually possible that measurement was already in progress.

My biggest question would be for @levi - with the new change to put the constrainedSize on _layout, we can't detect what constrainedSize was provided to start the layout pass that is currently underway.  Technically it might be ""most correct"" to obey the transition call as a new layout (at least, a setNeedsLayout) and use the same constrainedSize as provided to the in-flight measurement.  I presume the measurement is in flight because ASDataController should be doing that for this element, yet _layout is nil.

We can see there are some pretty bad implications to calling into the layout code with zero size.  @maicki could you document a followup to audit the code for any other points we should check for zero size and bail?  I don't think it could ever result in a useful layout.  Interestingly, at one point the height goes from 0 to +Inf...

<img width=""1512"" alt=""screen shot 2016-07-03 at 6 17 39 pm"" src=""https://cloud.githubusercontent.com/assets/565251/16550942/a65e92ba-4166-11e6-8533-fe4e0ef0a05a.png"">
<img width=""1512"" alt=""screen shot 2016-07-03 at 6 17 23 pm"" src=""https://cloud.githubusercontent.com/assets/565251/16550946/ae77b5ee-4166-11e6-8224-ec885cc4a05d.png"">
",appleguy,maicki
1840,2016-07-01 18:47:47,"@maicki
",Adlai-Holler,maicki
1839,2016-07-01 17:27:28,"Currently measurement always needs to happen on the main thread if implicit hierarchy management is enabled as adding and removing from nodes needs to happen on the main thread. We now will trampoline to the main thread to do the insertion and deletion of nodes.

This also resolves the issue that can occur if a node is already loaded deep in the layout hierarchy in the layout that the node is transforming to. Before insertion or deletion is happening we need to crawl the layout hierarchy to check that though.

_Open things:_
- This theoretically that would enable us always measure nodes in the data controller asynchronous
- Furthermore this also would us allow to get rid of the `shouldMeasureAsync` parameter in `transitionLayoutWithAnimation:shouldMeasureAsync:measurementCompletion:` that I think should not be exposed at all - @levi any thoughts on that?
- Do we need to check somehow the transition id in `_applyLayout:layoutTransition:` to abort the insertion or deletion of nodes if the block runs on the main thread?
- Would it be worth to have it's own transition queue instead of always using one of the global background queues?

@appleguy @Adlai-Holler @levi Would be great if I could get a review and thoughts
",maicki,levi
1839,2016-07-01 17:27:28,"Currently measurement always needs to happen on the main thread if implicit hierarchy management is enabled as adding and removing from nodes needs to happen on the main thread. We now will trampoline to the main thread to do the insertion and deletion of nodes.

This also resolves the issue that can occur if a node is already loaded deep in the layout hierarchy in the layout that the node is transforming to. Before insertion or deletion is happening we need to crawl the layout hierarchy to check that though.

_Open things:_
- This theoretically that would enable us always measure nodes in the data controller asynchronous
- Furthermore this also would us allow to get rid of the `shouldMeasureAsync` parameter in `transitionLayoutWithAnimation:shouldMeasureAsync:measurementCompletion:` that I think should not be exposed at all - @levi any thoughts on that?
- Do we need to check somehow the transition id in `_applyLayout:layoutTransition:` to abort the insertion or deletion of nodes if the block runs on the main thread?
- Would it be worth to have it's own transition queue instead of always using one of the global background queues?

@appleguy @Adlai-Holler @levi Would be great if I could get a review and thoughts
",maicki,appleguy
1839,2016-07-01 17:27:28,"Currently measurement always needs to happen on the main thread if implicit hierarchy management is enabled as adding and removing from nodes needs to happen on the main thread. We now will trampoline to the main thread to do the insertion and deletion of nodes.

This also resolves the issue that can occur if a node is already loaded deep in the layout hierarchy in the layout that the node is transforming to. Before insertion or deletion is happening we need to crawl the layout hierarchy to check that though.

_Open things:_
- This theoretically that would enable us always measure nodes in the data controller asynchronous
- Furthermore this also would us allow to get rid of the `shouldMeasureAsync` parameter in `transitionLayoutWithAnimation:shouldMeasureAsync:measurementCompletion:` that I think should not be exposed at all - @levi any thoughts on that?
- Do we need to check somehow the transition id in `_applyLayout:layoutTransition:` to abort the insertion or deletion of nodes if the block runs on the main thread?
- Would it be worth to have it's own transition queue instead of always using one of the global background queues?

@appleguy @Adlai-Holler @levi Would be great if I could get a review and thoughts
",maicki,Adlai-Holler
1839,2016-07-04 17:16:21,"@Adlai-Holler Theoretically this can happen, in fact this can already happen with the current implementation too. So in this nothing will change. I don't know at the moment a good way to fix that, but we definitely should consider it in the broader refactoring around layout transitions that I'm working on.

@levi Addressed your comments

@levi @appleguy @Adlai-Holler Can I get another look on it. Thanks!
",maicki,levi
1839,2016-07-04 17:16:21,"@Adlai-Holler Theoretically this can happen, in fact this can already happen with the current implementation too. So in this nothing will change. I don't know at the moment a good way to fix that, but we definitely should consider it in the broader refactoring around layout transitions that I'm working on.

@levi Addressed your comments

@levi @appleguy @Adlai-Holler Can I get another look on it. Thanks!
",maicki,appleguy
1834,2016-06-30 14:45:02,"Changing the range mode needs to access the view within the node. If the view was not loaded at this point it will trigger a view load, but that's not necessarily wanted so prevent changing it if the node is not loaded yet.

cc @garrettmoon Garrett does this change makes sense or do you have other ideas around it?
",maicki,garrettmoon
1834,2016-07-01 23:10:40,"@garrettmoon Added a pending state in ASCollectionNode and ASTableNode for the range mode

cc @Adlai-Holler @appleguy
",maicki,appleguy
1834,2016-07-01 23:10:40,"@garrettmoon Added a pending state in ASCollectionNode and ASTableNode for the range mode

cc @Adlai-Holler @appleguy
",maicki,Adlai-Holler
1833,2016-06-30 14:22:13,"This fixes an issue where the propagation of trait collections trigger are creation of the node if the node view was not loaded yet.

cc @rcancro Does this make sense or am I overlooking something?
",maicki,rcancro
1829,2016-06-29 16:06:10,"@alan2080: Although we support supplementary nodes, it looks like we don't support decoration nodes.

@Adlai-Holler: Do you know if there are reasons why decoration views would not be able to work?
",hannahmbanana,Adlai-Holler
1829,2016-11-17 00:58:50,"@alan2080 @itjunkii83, @craighowarth has disabled our assertion against layout attributes for decoration views, and so decoration views are now usable with `ASCollectionNode` in the same way that they're used with `UICollectionView` – register a class or nib for each decoration view kind.

For example, if you wanted to show an `AHSparkleNode` for decoration views of kind `AHDecorationKindSparkle`, you might create a class like:



And then in your view controller, do something like:



Please reopen this issue or DM me on Slack if this doesn't work perfectly for you. Cheers!
",Adlai-Holler,craighowarth
1828,2016-06-29 02:49:38,"This reduces the number of calls to -length, and also releases the lock as soon as possible.  

Because we use the local variable, there is a chance that another thread will set _attributedString before me, but self.accessibilityLabel after me, and they'd fall out of sync. Since mitigation would be so ugly, this is considered an acceptable risk. Review? @maicki @appleguy 
",Adlai-Holler,appleguy
1828,2016-06-29 02:49:38,"This reduces the number of calls to -length, and also releases the lock as soon as possible.  

Because we use the local variable, there is a chance that another thread will set _attributedString before me, but self.accessibilityLabel after me, and they'd fall out of sync. Since mitigation would be so ugly, this is considered an acceptable risk. Review? @maicki @appleguy 
",Adlai-Holler,maicki
1827,2016-06-29 00:13:55,"When an ASCellNode performs a layout that results in a size change, it informs its collection view which must update the layout to account for the new size. This was achieved by submitting an empty update block to the collection view. We do the same thing for table view, with `beginUpdates/endUpdates`.

However, unlike a table view, a collection view generates expensive animations when given an empty update. Instead, we can simply invalidate the layout and it will be updated using the normal Core Animation layout system.

Since this is so much cheaper, we can invalidate the layout synchronously and ensure that another frame is not drawn between the node relayout and the collection view relayout.
- Use `invalidateLayoutWithContext:` rather than `performBatchUpdates:^{}` to handle cell node size changes.
- Invalidate the layout synchronously rather than coalescing in the main queue. This is possible now because invalidating the layout multiple times in the same run loop is not expensive. This **critically** guarantees that another frame will not be composited in between the node relayout and the corresponding collection view layout.
- Ignore batch updates that don't contain changes.
  - These can cause a performance hit.
  - ASDK has a separate way to resize cell nodes.
  - Using an empty batch update to resize cells is an undocumented feature of UIKit.
- Remove an unused variable from ASDataController

Plz review @maicki @appleguy
",Adlai-Holler,appleguy
1827,2016-06-29 00:13:55,"When an ASCellNode performs a layout that results in a size change, it informs its collection view which must update the layout to account for the new size. This was achieved by submitting an empty update block to the collection view. We do the same thing for table view, with `beginUpdates/endUpdates`.

However, unlike a table view, a collection view generates expensive animations when given an empty update. Instead, we can simply invalidate the layout and it will be updated using the normal Core Animation layout system.

Since this is so much cheaper, we can invalidate the layout synchronously and ensure that another frame is not drawn between the node relayout and the collection view relayout.
- Use `invalidateLayoutWithContext:` rather than `performBatchUpdates:^{}` to handle cell node size changes.
- Invalidate the layout synchronously rather than coalescing in the main queue. This is possible now because invalidating the layout multiple times in the same run loop is not expensive. This **critically** guarantees that another frame will not be composited in between the node relayout and the corresponding collection view layout.
- Ignore batch updates that don't contain changes.
  - These can cause a performance hit.
  - ASDK has a separate way to resize cell nodes.
  - Using an empty batch update to resize cells is an undocumented feature of UIKit.
- Remove an unused variable from ASDataController

Plz review @maicki @appleguy
",Adlai-Holler,maicki
1826,2016-06-29 06:44:28,"@hannahmbanana: latest checkout 1812 from yesterday (28.07.), Previously it worked fine without any problems.

**Reverted** the changes from @Adlai-Holler **#1812** and everything is working fine again. 
",CR34L,Adlai-Holler
1823,2016-06-27 17:23:31,"The header contents are wrapped in `#if PIN_REMOTE_IMAGE` so we won't compile anything for users that are on our ""Core"" spec. I've tested this and it resolves #1815 and behaves well for Core & default subspecs. @appleguy @maicki 
",Adlai-Holler,appleguy
1823,2016-06-27 17:23:31,"The header contents are wrapped in `#if PIN_REMOTE_IMAGE` so we won't compile anything for users that are on our ""Core"" spec. I've tested this and it resolves #1815 and behaves well for Core & default subspecs. @appleguy @maicki 
",Adlai-Holler,maicki
1816,2016-07-06 01:41:06,"@Adlai-Holler @maicki @appleguy: rebased & ready for review again
",hannahmbanana,appleguy
1816,2016-07-06 01:41:06,"@Adlai-Holler @maicki @appleguy: rebased & ready for review again
",hannahmbanana,maicki
1816,2016-07-07 06:24:27,"@maicki @Adlai-Holler @appleguy: I addressed @appleguy's latest comments. I think this is ready to be merged.   
",hannahmbanana,appleguy
1816,2016-07-07 06:24:27,"@maicki @Adlai-Holler @appleguy: I addressed @appleguy's latest comments. I think this is ready to be merged.   
",hannahmbanana,maicki
1815,2016-06-26 18:33:57,"@Adlai-Holler: This seems important to expose this, but what are the implications if PINRemoteImage isn't linked and someone were to call into it? Do we need to add a runtime check to make sure nil isn't returned?
",appleguy,Adlai-Holler
1814,2016-07-08 20:25:51,"@appleguy @Adlai-Holler Any thoughts on merging that?
",maicki,appleguy
1812,2016-06-24 22:25:51,"This patch gets our thrash tests passing! 🎉 
- Split section reloads into delete and insert.
- Improve the logic for computing final indexes from initial indexes.
- Improve logging/loggability of update events.
- Add more type annotations.
#### Reloads and Moves

I removed `ASDataController`s implementation of reloadSections/reloadItems. Reloads and moves are ""composite"" operations – they require knowledge of the entire batch update so they can be decomposed into deletes (at old indexes) and inserts (at new indexes). ASDataController was intentionally set up to receive updates in ""safe order"" so that it can modify its internal arrays bit-by-bit during updates. There is no such ""safe order"" for moves and reloads as such. The responsibility falls for `ASChangeSetDataController` to decompose all updates into deletes & inserts.

The logic for moves is not touched by this diff, but there is currently an issue where moves may lead to incorrect behavior when combined with other operations in a batch. Moves are tricky business because you have to perform the deletes stashing the nodes away, and then use those nodes when you perform the inserts later. ASChangeSetDataController could provide its superclass with a structure specifying which nodes should be used when inserting which sections/items, at the beginning of the batch update.

There are currently ASDataController-called subclass override methods like `willReloadSections:`. These are used by ASCollectionDataController to maintain supplementary items.
- Since reloads are necessarily split into two operations which will typically not be performed back-to-back, this kind of callback doesn't totally make sense.
- Since the operations we need to perform on supplementary items are basically direct mirrors of the operations we perform for cell items, this pattern is a little wonky. The ideal solution would be to treat supplementary items and cells the same way. This is how UICollectionView works but it will require pretty major refactoring.
- For this PR I've removed `willReloadSections` and `willReloadItems`. The combination of `willDelete` and `willInsert`, called at the appropriate times, achieves the same result or better.
- Something similar will probably have to be done for moves, if we choose not to refactor the supplementary item handling first.

There's obviously a lot more to be done here – unifying cells and supplementary views, handling moves – but I'm very confident this is an extremely worthwhile step forward. @appleguy @maicki @levi Could I get a review on this?
",Adlai-Holler,levi
1812,2016-06-24 22:25:51,"This patch gets our thrash tests passing! 🎉 
- Split section reloads into delete and insert.
- Improve the logic for computing final indexes from initial indexes.
- Improve logging/loggability of update events.
- Add more type annotations.
#### Reloads and Moves

I removed `ASDataController`s implementation of reloadSections/reloadItems. Reloads and moves are ""composite"" operations – they require knowledge of the entire batch update so they can be decomposed into deletes (at old indexes) and inserts (at new indexes). ASDataController was intentionally set up to receive updates in ""safe order"" so that it can modify its internal arrays bit-by-bit during updates. There is no such ""safe order"" for moves and reloads as such. The responsibility falls for `ASChangeSetDataController` to decompose all updates into deletes & inserts.

The logic for moves is not touched by this diff, but there is currently an issue where moves may lead to incorrect behavior when combined with other operations in a batch. Moves are tricky business because you have to perform the deletes stashing the nodes away, and then use those nodes when you perform the inserts later. ASChangeSetDataController could provide its superclass with a structure specifying which nodes should be used when inserting which sections/items, at the beginning of the batch update.

There are currently ASDataController-called subclass override methods like `willReloadSections:`. These are used by ASCollectionDataController to maintain supplementary items.
- Since reloads are necessarily split into two operations which will typically not be performed back-to-back, this kind of callback doesn't totally make sense.
- Since the operations we need to perform on supplementary items are basically direct mirrors of the operations we perform for cell items, this pattern is a little wonky. The ideal solution would be to treat supplementary items and cells the same way. This is how UICollectionView works but it will require pretty major refactoring.
- For this PR I've removed `willReloadSections` and `willReloadItems`. The combination of `willDelete` and `willInsert`, called at the appropriate times, achieves the same result or better.
- Something similar will probably have to be done for moves, if we choose not to refactor the supplementary item handling first.

There's obviously a lot more to be done here – unifying cells and supplementary views, handling moves – but I'm very confident this is an extremely worthwhile step forward. @appleguy @maicki @levi Could I get a review on this?
",Adlai-Holler,appleguy
1812,2016-06-24 22:25:51,"This patch gets our thrash tests passing! 🎉 
- Split section reloads into delete and insert.
- Improve the logic for computing final indexes from initial indexes.
- Improve logging/loggability of update events.
- Add more type annotations.
#### Reloads and Moves

I removed `ASDataController`s implementation of reloadSections/reloadItems. Reloads and moves are ""composite"" operations – they require knowledge of the entire batch update so they can be decomposed into deletes (at old indexes) and inserts (at new indexes). ASDataController was intentionally set up to receive updates in ""safe order"" so that it can modify its internal arrays bit-by-bit during updates. There is no such ""safe order"" for moves and reloads as such. The responsibility falls for `ASChangeSetDataController` to decompose all updates into deletes & inserts.

The logic for moves is not touched by this diff, but there is currently an issue where moves may lead to incorrect behavior when combined with other operations in a batch. Moves are tricky business because you have to perform the deletes stashing the nodes away, and then use those nodes when you perform the inserts later. ASChangeSetDataController could provide its superclass with a structure specifying which nodes should be used when inserting which sections/items, at the beginning of the batch update.

There are currently ASDataController-called subclass override methods like `willReloadSections:`. These are used by ASCollectionDataController to maintain supplementary items.
- Since reloads are necessarily split into two operations which will typically not be performed back-to-back, this kind of callback doesn't totally make sense.
- Since the operations we need to perform on supplementary items are basically direct mirrors of the operations we perform for cell items, this pattern is a little wonky. The ideal solution would be to treat supplementary items and cells the same way. This is how UICollectionView works but it will require pretty major refactoring.
- For this PR I've removed `willReloadSections` and `willReloadItems`. The combination of `willDelete` and `willInsert`, called at the appropriate times, achieves the same result or better.
- Something similar will probably have to be done for moves, if we choose not to refactor the supplementary item handling first.

There's obviously a lot more to be done here – unifying cells and supplementary views, handling moves – but I'm very confident this is an extremely worthwhile step forward. @appleguy @maicki @levi Could I get a review on this?
",Adlai-Holler,maicki
1811,2016-07-01 18:23:07,"@maicki: @levi: some really easy API questions:
- I think we should add border width as an argument. Is that okay?
- I think we should remove the as_\* prefix (looks weird) and at the next ASDK sync, point to the ASDK versions
",hannahmbanana,levi
1811,2016-07-01 18:23:07,"@maicki: @levi: some really easy API questions:
- I think we should add border width as an argument. Is that okay?
- I think we should remove the as_\* prefix (looks weird) and at the next ASDK sync, point to the ASDK versions
",hannahmbanana,maicki
1811,2016-07-01 18:29:54,"- It's gonna be a lot of parameters to this method, but I agree that a border width would be handy. What about creating an API where we pass in an object that has properties with default values that you can change before passing in? @levi  thoughts
- I don't think we should remove the `as_` prefix. This is common practice and prevents us from clashing with Apple API's.
",maicki,levi
1809,2016-06-24 18:39:09,"@appleguy: could you review if / when you have time? The first 3 property types fail (but not the subsequent 5 properties) when setting in the same exact way. 
",hannahmbanana,appleguy
1808,2016-06-24 17:25:17,"@hannahmbanana @Adlai-Holler @rcancro Could I get some eyes on that please? Thanks!
",maicki,rcancro
1808,2016-06-24 17:25:17,"@hannahmbanana @Adlai-Holler @rcancro Could I get some eyes on that please? Thanks!
",maicki,hannahmbanana
1808,2016-06-24 17:25:17,"@hannahmbanana @Adlai-Holler @rcancro Could I get some eyes on that please? Thanks!
",maicki,Adlai-Holler
1806,2016-06-23 22:53:43,"@Adlai-Holler Can I have some eyes. Small change to support `preferredFrameSize` in `ASButtonNode`
",maicki,Adlai-Holler
1805,2016-06-23 19:26:00,"This is mostly a PoC/proposal to see what people think about this. The goal is, for the most part, to be able to specify a complex layout spec in one gigantic declarative-style call and avoid intermediate variables and order-inversion while building it. I think it's an improvement but still sort of daunting.

I don't expect to merge this necessarily. It didn't take long to create so I'm not married to it. But it proves that something like this is possible and I think beneficial.
- Add methods like `-(instancetype)withFlexGrow:(BOOL)flexGrow` to ASLayoutable to set properties while chaining
- Add methods like `-(ASInsetLayoutSpec *)withInset:(UIEdgeInsets)insets` to ASLayoutable to embed layoutables while chaining
- Implementations for these methods are stored in a ASLayoutableConvenienceImpl macro, which is added to ASDisplayNode.mm and ASLayoutSpec.m
- All indentation is Xcode-correct. There are questions about where newlines should go but I think ASDKgram::PhotoCellNode has a pretty nice style.
- Update a couple sample app layout spec methods as demo.

@appleguy @maicki @levi @hannahmbanana Thoughts?
",Adlai-Holler,levi
1805,2016-06-23 19:26:00,"This is mostly a PoC/proposal to see what people think about this. The goal is, for the most part, to be able to specify a complex layout spec in one gigantic declarative-style call and avoid intermediate variables and order-inversion while building it. I think it's an improvement but still sort of daunting.

I don't expect to merge this necessarily. It didn't take long to create so I'm not married to it. But it proves that something like this is possible and I think beneficial.
- Add methods like `-(instancetype)withFlexGrow:(BOOL)flexGrow` to ASLayoutable to set properties while chaining
- Add methods like `-(ASInsetLayoutSpec *)withInset:(UIEdgeInsets)insets` to ASLayoutable to embed layoutables while chaining
- Implementations for these methods are stored in a ASLayoutableConvenienceImpl macro, which is added to ASDisplayNode.mm and ASLayoutSpec.m
- All indentation is Xcode-correct. There are questions about where newlines should go but I think ASDKgram::PhotoCellNode has a pretty nice style.
- Update a couple sample app layout spec methods as demo.

@appleguy @maicki @levi @hannahmbanana Thoughts?
",Adlai-Holler,appleguy
1805,2016-06-23 19:26:00,"This is mostly a PoC/proposal to see what people think about this. The goal is, for the most part, to be able to specify a complex layout spec in one gigantic declarative-style call and avoid intermediate variables and order-inversion while building it. I think it's an improvement but still sort of daunting.

I don't expect to merge this necessarily. It didn't take long to create so I'm not married to it. But it proves that something like this is possible and I think beneficial.
- Add methods like `-(instancetype)withFlexGrow:(BOOL)flexGrow` to ASLayoutable to set properties while chaining
- Add methods like `-(ASInsetLayoutSpec *)withInset:(UIEdgeInsets)insets` to ASLayoutable to embed layoutables while chaining
- Implementations for these methods are stored in a ASLayoutableConvenienceImpl macro, which is added to ASDisplayNode.mm and ASLayoutSpec.m
- All indentation is Xcode-correct. There are questions about where newlines should go but I think ASDKgram::PhotoCellNode has a pretty nice style.
- Update a couple sample app layout spec methods as demo.

@appleguy @maicki @levi @hannahmbanana Thoughts?
",Adlai-Holler,hannahmbanana
1805,2016-06-23 19:26:00,"This is mostly a PoC/proposal to see what people think about this. The goal is, for the most part, to be able to specify a complex layout spec in one gigantic declarative-style call and avoid intermediate variables and order-inversion while building it. I think it's an improvement but still sort of daunting.

I don't expect to merge this necessarily. It didn't take long to create so I'm not married to it. But it proves that something like this is possible and I think beneficial.
- Add methods like `-(instancetype)withFlexGrow:(BOOL)flexGrow` to ASLayoutable to set properties while chaining
- Add methods like `-(ASInsetLayoutSpec *)withInset:(UIEdgeInsets)insets` to ASLayoutable to embed layoutables while chaining
- Implementations for these methods are stored in a ASLayoutableConvenienceImpl macro, which is added to ASDisplayNode.mm and ASLayoutSpec.m
- All indentation is Xcode-correct. There are questions about where newlines should go but I think ASDKgram::PhotoCellNode has a pretty nice style.
- Update a couple sample app layout spec methods as demo.

@appleguy @maicki @levi @hannahmbanana Thoughts?
",Adlai-Holler,maicki
1802,2016-06-23 00:16:07,"Good news and bad news, folks! Good news is we now have a thrash tester to tell us if we have data integrity problems in table view. Bad news is, we have data integrity problems in table view. 
### What I Did
- You can switch between UIKit/ASDK so we can shift blame as needed.
- Base test ""testThrashingWildly"" runs 100 iterations of random updates to a 20x20 table view.
- When a thrash test fails, it logs what it was attempting to do and a Base64 representation of the failed update. 
- You can copy this Base64 into the ""ASThrashTestRecordedCase"" file and the ""testRecordedThrashCase"" method will load it and try again now that you've fixed the issue.
### What It Did

UIKit reliably passes the thrash testing. This is actually good! Because it means that the updates I'm generating are consistently valid. ASDK reliably doesn't pass the thrash testing – it submits invalid updates up to UITableView and triggers assertion failures. This isn't good. I'll find out why shortly.
### What I Will Do

Next step is to migrate to collection view and add supplementary views. That probably won't happen until after this basic hurdle is passed and other stuff is also done too.

@maicki @nguyenhuy @appleguy @levi 
",Adlai-Holler,nguyenhuy
1802,2016-06-23 00:16:07,"Good news and bad news, folks! Good news is we now have a thrash tester to tell us if we have data integrity problems in table view. Bad news is, we have data integrity problems in table view. 
### What I Did
- You can switch between UIKit/ASDK so we can shift blame as needed.
- Base test ""testThrashingWildly"" runs 100 iterations of random updates to a 20x20 table view.
- When a thrash test fails, it logs what it was attempting to do and a Base64 representation of the failed update. 
- You can copy this Base64 into the ""ASThrashTestRecordedCase"" file and the ""testRecordedThrashCase"" method will load it and try again now that you've fixed the issue.
### What It Did

UIKit reliably passes the thrash testing. This is actually good! Because it means that the updates I'm generating are consistently valid. ASDK reliably doesn't pass the thrash testing – it submits invalid updates up to UITableView and triggers assertion failures. This isn't good. I'll find out why shortly.
### What I Will Do

Next step is to migrate to collection view and add supplementary views. That probably won't happen until after this basic hurdle is passed and other stuff is also done too.

@maicki @nguyenhuy @appleguy @levi 
",Adlai-Holler,appleguy
1802,2016-06-23 00:16:07,"Good news and bad news, folks! Good news is we now have a thrash tester to tell us if we have data integrity problems in table view. Bad news is, we have data integrity problems in table view. 
### What I Did
- You can switch between UIKit/ASDK so we can shift blame as needed.
- Base test ""testThrashingWildly"" runs 100 iterations of random updates to a 20x20 table view.
- When a thrash test fails, it logs what it was attempting to do and a Base64 representation of the failed update. 
- You can copy this Base64 into the ""ASThrashTestRecordedCase"" file and the ""testRecordedThrashCase"" method will load it and try again now that you've fixed the issue.
### What It Did

UIKit reliably passes the thrash testing. This is actually good! Because it means that the updates I'm generating are consistently valid. ASDK reliably doesn't pass the thrash testing – it submits invalid updates up to UITableView and triggers assertion failures. This isn't good. I'll find out why shortly.
### What I Will Do

Next step is to migrate to collection view and add supplementary views. That probably won't happen until after this basic hurdle is passed and other stuff is also done too.

@maicki @nguyenhuy @appleguy @levi 
",Adlai-Holler,maicki
1802,2016-06-23 00:16:07,"Good news and bad news, folks! Good news is we now have a thrash tester to tell us if we have data integrity problems in table view. Bad news is, we have data integrity problems in table view. 
### What I Did
- You can switch between UIKit/ASDK so we can shift blame as needed.
- Base test ""testThrashingWildly"" runs 100 iterations of random updates to a 20x20 table view.
- When a thrash test fails, it logs what it was attempting to do and a Base64 representation of the failed update. 
- You can copy this Base64 into the ""ASThrashTestRecordedCase"" file and the ""testRecordedThrashCase"" method will load it and try again now that you've fixed the issue.
### What It Did

UIKit reliably passes the thrash testing. This is actually good! Because it means that the updates I'm generating are consistently valid. ASDK reliably doesn't pass the thrash testing – it submits invalid updates up to UITableView and triggers assertion failures. This isn't good. I'll find out why shortly.
### What I Will Do

Next step is to migrate to collection view and add supplementary views. That probably won't happen until after this basic hurdle is passed and other stuff is also done too.

@maicki @nguyenhuy @appleguy @levi 
",Adlai-Holler,levi
1800,2016-06-22 23:51:56,"@flovouin thank you, both for the awesome new features and your detailed write up! Having the test project is very helpful.

These features are fairly advanced, in the sense that most users will not need them. I think it is a good idea to support them, but we might want to look at any small ways that we can help stratify the API of these classes to help ensure that new readers are not overwhelmed by the length of the file. This could be as simple as grouping more advanced features in part of the header file, using a category, or perhaps we don't need to worry about this for right now.

@yunnanwu, @maicki, @binl, 
",appleguy,maicki
1797,2016-06-22 22:17:25,"Thanks @nickvelloff for testing this out!
",hannahmbanana,nickvelloff
1794,2016-06-21 21:59:34,"@maicki @appleguy Review?
",Adlai-Holler,appleguy
1794,2016-06-21 21:59:34,"@maicki @appleguy Review?
",Adlai-Holler,maicki
1790,2016-06-23 03:34:54,"@Adlai-Holler @maicki: this PR LGTM. It's an easy one-liner (excluding testing code). 
",hannahmbanana,maicki
1790,2016-06-23 03:34:54,"@Adlai-Holler @maicki: this PR LGTM. It's an easy one-liner (excluding testing code). 
",hannahmbanana,Adlai-Holler
1788,2016-06-21 23:39:10,"@Xinchi is going to try this out and let us know if it fixes his issue. Right? :)
",hannahmbanana,Xinchi
1788,2016-06-23 03:40:05,"@Xinchi: were you able to test this out?
",hannahmbanana,Xinchi
1788,2016-07-02 15:29:58,"@gazreese Another great change. I noticed that the image is being reset because when we first call `generatePlaceholderImage` the AVAsset has no tracks and so we call completion with `nil` and clear the image. This is certainly not an intended behavior.

I think the ideal behavior here is to clear self.image in -setAsset: _if it was automatically set_ but otherwise the node itself should never `self.image = nil`. Thoughts @gazreese @appleguy ?

Thanks again for this and all your other well-made contributions lately. Landing this immediately!
",Adlai-Holler,appleguy
1785,2016-06-20 23:55:18,"The index paths passed into these methods may not correspond to the same item in the user's data source as they expect, if there are pending edit operations in the collection view. This is not obvious to users and we've received reports of issues caused by users passing index paths from these methods into their data source.

This is one part of a broader issue for users of ASDK: the separation between ""data source index space"" and ""completed nodes index space."" Given an NSIndexPath that comes from the table view, the user may not be safe to query their data source with it if there are enqueued edit operations. Likewise, the user may not be safe to query the table view with an index path from their data source.

Since these methods don't appear to be widely used in client apps, for now we should deprecate them. I considered also adding new `tableView:willDisplayNode:` etc methods which omit the confusing index paths, but under the bias for subtraction I say we start by doing this. We can easily add those methods in the future.

Ideally we would add API to convert between the index spaces. It would be quite expensive to achieve – we would need a queue of changesets in the data controller (hard) and methods to convert index paths bi-directionally across a given changeset (easy). We would also need to reset this mapping for reloadData etc. Here's how the API could be:



Thoughts @appleguy @maicki 
",Adlai-Holler,appleguy
1785,2016-06-20 23:55:18,"The index paths passed into these methods may not correspond to the same item in the user's data source as they expect, if there are pending edit operations in the collection view. This is not obvious to users and we've received reports of issues caused by users passing index paths from these methods into their data source.

This is one part of a broader issue for users of ASDK: the separation between ""data source index space"" and ""completed nodes index space."" Given an NSIndexPath that comes from the table view, the user may not be safe to query their data source with it if there are enqueued edit operations. Likewise, the user may not be safe to query the table view with an index path from their data source.

Since these methods don't appear to be widely used in client apps, for now we should deprecate them. I considered also adding new `tableView:willDisplayNode:` etc methods which omit the confusing index paths, but under the bias for subtraction I say we start by doing this. We can easily add those methods in the future.

Ideally we would add API to convert between the index spaces. It would be quite expensive to achieve – we would need a queue of changesets in the data controller (hard) and methods to convert index paths bi-directionally across a given changeset (easy). We would also need to reset this mapping for reloadData etc. Here's how the API could be:



Thoughts @appleguy @maicki 
",Adlai-Holler,maicki
1783,2016-06-20 17:39:16,"@garrettmoon Can I get some eyes on that. Thank you!
",maicki,garrettmoon
1780,2016-06-20 07:31:31,"Issue 1:
ASDK uses preprocessor macros to declare `PIN_REMOTE_IMAGE` that are defined in the Podspec, thus only available to CocoaPods build.

Issue 2:
`PinRemoteImage` must be forked and example projects removed to actually build cleanly. Really old issue for this repo, here: https://github.com/pinterest/PINRemoteImage/issues/25#issuecomment-227062812

Basically every attempt to resolve this leads to a fork. 

@hannahmbanana Thanks!
",nickvelloff,hannahmbanana
1777,2016-06-19 22:00:24,"The purpose of this PR is to move from an ObjC object to a struct for drawing parameters in ASTextNode and ASImageNode.

Furthermore as we improved the performance by going from the class drawing method to an instance drawing method we prevent custom drawing in ASTextNode or ASImageNode subclasses now.
If we decide to merge that PR we should close: #1728 as this is not necessary anymore.

cc @appleguy @ocrickard @garrettmoon: Curious about your thoughts about this PR.
",maicki,garrettmoon
1777,2016-06-19 22:00:24,"The purpose of this PR is to move from an ObjC object to a struct for drawing parameters in ASTextNode and ASImageNode.

Furthermore as we improved the performance by going from the class drawing method to an instance drawing method we prevent custom drawing in ASTextNode or ASImageNode subclasses now.
If we decide to merge that PR we should close: #1728 as this is not necessary anymore.

cc @appleguy @ocrickard @garrettmoon: Curious about your thoughts about this PR.
",maicki,appleguy
1777,2016-06-19 22:00:24,"The purpose of this PR is to move from an ObjC object to a struct for drawing parameters in ASTextNode and ASImageNode.

Furthermore as we improved the performance by going from the class drawing method to an instance drawing method we prevent custom drawing in ASTextNode or ASImageNode subclasses now.
If we decide to merge that PR we should close: #1728 as this is not necessary anymore.

cc @appleguy @ocrickard @garrettmoon: Curious about your thoughts about this PR.
",maicki,ocrickard
1776,2016-06-20 17:26:00,"@Adlai-Holler @appleguy  Can I get a look over it. Thanks!
",maicki,appleguy
1776,2016-06-20 17:26:00,"@Adlai-Holler @appleguy  Can I get a look over it. Thanks!
",maicki,Adlai-Holler
1773,2016-07-10 05:46:25,"@erichoracek thanks for the fix, just getting back to this now as I'm wrapping up the 1.9.81 release.

There is a lot of good information in the linked issues, and @Adlai-Holler will follow up here.  He has implemented new, high-quality thrash testers for ASCollectionView and is adding supplementary node support to them.  The tester is capable of recording a randomized series of edit transactions for later reproduction of issues, once it uncovers crashes.

Please let us know if you hit any further issues.  One thing I did notice reading the code is that there is no -prepareForDeleteSections: method; I'm not sure if this is required, but it should come up during the audit if so.
",appleguy,Adlai-Holler
1771,2016-06-18 20:16:35,"@tungvoduc: I confirmed that this is a regression after merging PR #1629 (cc @erichoracek). 

@maicki: Are you familiar with this change? 
",hannahmbanana,maicki
1771,2016-06-18 20:16:35,"@tungvoduc: I confirmed that this is a regression after merging PR #1629 (cc @erichoracek). 

@maicki: Are you familiar with this change? 
",hannahmbanana,erichoracek
1770,2016-06-18 05:53:37,"I noticed that @ejensen has made the run loop configurable for animated images (in #1723, thanks!) and that's probably because he encountered the same issue as I did. With the default run loop mode we use (`NSDefaultRunLoop`) animated images pause while they are scrolling if they are in a scroll view. Thanks to @ejensen that can now be fixed by setting `animatedImageRunLoopMode` to `NSRunLoopCommonModes`.

I suspect most users would expect an animated image to continue animating while scrolling. While there is a fix (set `imageNode.animatedImageRunLoopMode = NSRunLoopCommonModes` on any nodes that are in a scroll view), it's not the default functionality and it's not obvious what needs to be done without some research.

I think it makes more sense to make `NSRunLoopCommonModes` the default and send the developer what wants animated images to pause while scrolling digging for the answer (they will likely be thinking about performance tuning, hopefully they would find it quickly.) This would be a breaking change technically, but I think it would be a good one to make pre-2.0.

In looking at the PR comments, @koheku had a really interesting [suggestion](https://github.com/facebook/AsyncDisplayKit/pull/1723#issuecomment-224858795) from FLAnimated image. Maybe this is an even better overall solution.

Thoughts? @ejensen @appleguy @garrettmoon @koheku
",eanagel,garrettmoon
1770,2016-06-18 05:53:37,"I noticed that @ejensen has made the run loop configurable for animated images (in #1723, thanks!) and that's probably because he encountered the same issue as I did. With the default run loop mode we use (`NSDefaultRunLoop`) animated images pause while they are scrolling if they are in a scroll view. Thanks to @ejensen that can now be fixed by setting `animatedImageRunLoopMode` to `NSRunLoopCommonModes`.

I suspect most users would expect an animated image to continue animating while scrolling. While there is a fix (set `imageNode.animatedImageRunLoopMode = NSRunLoopCommonModes` on any nodes that are in a scroll view), it's not the default functionality and it's not obvious what needs to be done without some research.

I think it makes more sense to make `NSRunLoopCommonModes` the default and send the developer what wants animated images to pause while scrolling digging for the answer (they will likely be thinking about performance tuning, hopefully they would find it quickly.) This would be a breaking change technically, but I think it would be a good one to make pre-2.0.

In looking at the PR comments, @koheku had a really interesting [suggestion](https://github.com/facebook/AsyncDisplayKit/pull/1723#issuecomment-224858795) from FLAnimated image. Maybe this is an even better overall solution.

Thoughts? @ejensen @appleguy @garrettmoon @koheku
",eanagel,appleguy
1770,2016-06-18 05:53:37,"I noticed that @ejensen has made the run loop configurable for animated images (in #1723, thanks!) and that's probably because he encountered the same issue as I did. With the default run loop mode we use (`NSDefaultRunLoop`) animated images pause while they are scrolling if they are in a scroll view. Thanks to @ejensen that can now be fixed by setting `animatedImageRunLoopMode` to `NSRunLoopCommonModes`.

I suspect most users would expect an animated image to continue animating while scrolling. While there is a fix (set `imageNode.animatedImageRunLoopMode = NSRunLoopCommonModes` on any nodes that are in a scroll view), it's not the default functionality and it's not obvious what needs to be done without some research.

I think it makes more sense to make `NSRunLoopCommonModes` the default and send the developer what wants animated images to pause while scrolling digging for the answer (they will likely be thinking about performance tuning, hopefully they would find it quickly.) This would be a breaking change technically, but I think it would be a good one to make pre-2.0.

In looking at the PR comments, @koheku had a really interesting [suggestion](https://github.com/facebook/AsyncDisplayKit/pull/1723#issuecomment-224858795) from FLAnimated image. Maybe this is an even better overall solution.

Thoughts? @ejensen @appleguy @garrettmoon @koheku
",eanagel,ejensen
1770,2016-06-18 22:53:11,"In one of the other threads, we'd actually made a decision to change the default.  @eanagel @ejensen could one of you submit a PR?
",appleguy,ejensen
1769,2016-06-18 20:24:08,"@levi @maicki: I put it in the data source to be consistent with the _current_ state of ASCollectionView. Should I switch it to the delegate assuming #1740 will eventually be committed?
",hannahmbanana,maicki
1769,2016-06-18 22:45:15,"I had discussed this with Hannah.  I suggested the Data Source because it is unclear to me if we will land the other PR.  If we do, unfortunately we will need to introduce code that detects the method existing on the data source.  Otherwise it is a very problematic “silent” error that could cause a lot of grief for app developers who update to 2.0, but don’t happen to test a deep corner of their app that uses this method.  I’ve seen in the community it is quite common to not set the .delegate, whether or not this is advisable (it is supported by Apple).

There is also a close parallelism between the nodeFor: and constrainedSizeFor: methods, but ultimately we need to make a decision on the other PR’s course to landing safely before deciding if this should also be in the delegate.

> On Jun 18, 2016, at 1:24 PM, Hannah Troisi notifications@github.com wrote:
> 
> @levi https://github.com/levi @maicki https://github.com/maicki: I put it in the data source to be consistent with the current state of ASCollectionView. Should I switch it to the delegate assuming #1740 https://github.com/facebook/AsyncDisplayKit/pull/1740 will eventually be committed?
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1769#issuecomment-226963051, or mute the thread https://github.com/notifications/unsubscribe/AAigA5jRVZ85I6uuJP_YiWgHOKHynvEfks5qNFPrgaJpZM4I41cp.
",appleguy,maicki
1767,2016-06-17 17:39:22,"@hannahmbanana @maicki @nguyenhuy @appleguy take a looky-loo?
",Adlai-Holler,nguyenhuy
1767,2016-06-17 17:39:22,"@hannahmbanana @maicki @nguyenhuy @appleguy take a looky-loo?
",Adlai-Holler,appleguy
1767,2016-06-17 17:39:22,"@hannahmbanana @maicki @nguyenhuy @appleguy take a looky-loo?
",Adlai-Holler,maicki
1767,2016-06-17 17:39:22,"@hannahmbanana @maicki @nguyenhuy @appleguy take a looky-loo?
",Adlai-Holler,hannahmbanana
1767,2016-06-18 13:25:22,"In general looks good to me. We just have to be careful as I think this will be an API breaking change?

@Adlai-Holler Is the plan to merge that before 2.0? cc @appleguy 
",maicki,appleguy
1766,2016-06-17 17:24:02,"@Eke discovered that we don't support applyLayoutAttributes: on ASCellNode. 

He has already tested this patch on one collection and it worked. He has 4 other collection views that need custom animations, etc and so he'll update us as he tests it on each of those collections. 
",hannahmbanana,Eke
1766,2016-06-18 19:57:56,"@maicki: You'd think I'd know better than to forget the documentation. :) 
",hannahmbanana,maicki
1765,2016-06-17 17:23:40,"@maicki @ocrickard @appleguy 
",Adlai-Holler,appleguy
1765,2016-06-17 17:23:40,"@maicki @ocrickard @appleguy 
",Adlai-Holler,maicki
1765,2016-06-17 17:23:40,"@maicki @ocrickard @appleguy 
",Adlai-Holler,ocrickard
1765,2016-06-20 16:25:56,"Since this code is so critical, I need to add some additional context/validation here. After this range controller change I'm working on I'll attempt to create a test project that reproduces this issue and validates it's resolved. For the time being (and so I don't lose it!) here's the simplified backtrace that caused the deadlock during random futzing:



You can see that thread 48 is traversing down the node hierarchy. `cancelLayoutTransitionsInProgress` locks self, and then updates the hierarchy state of the entire subtree (taking each of those locks). So the locks overlap ""downward.""

Thread 1 in `removeFromSupernode` locks self, and then attempts to read `supernode.layerBacked` which takes the lock. So the locks overlap ""upward.""

We should avoid this overlapping behavior as much as possible. If it has to happen, we should do it in a consistent order to avoid deadlocks. ""Downward"" is the natural default here – it's how trees work – so this PR removes the upward overlapping in `removeFromSupernode`. @appleguy 
",Adlai-Holler,appleguy
1765,2016-06-20 21:38:32,"I've created a demo project:
[Deadlock1765.zip](https://github.com/facebook/AsyncDisplayKit/files/324362/Deadlock1765.zip)

Simply run it and you'll see it deadlocks. Switch the commenting in `Podfile` and `pod install` to get the revision after the change, re-run it, and you'll see it doesn't deadlock. The code is all in AppDelegate.m @appleguy 
",Adlai-Holler,appleguy
1757,2016-06-16 21:48:31,"This works around an issue where ASCollectionView may mysteriously be leaked and outlive its layer under iOS < 9. This only occurs under some view controller containment/transition situations and makes crashes virtually inevitable.

The leak does not seem to originate in ASDK. Manual investigation, plus the fact that it depends on iOS version & view controller transition/containment scheme, plus the fact that even if ASDK simply leaked the view, the layer should survive along with it, all point to an internal UIKit/Core Animation issue that was fixed in iOS 9. @maicki @appleguy 
",Adlai-Holler,appleguy
1757,2016-06-16 21:48:31,"This works around an issue where ASCollectionView may mysteriously be leaked and outlive its layer under iOS < 9. This only occurs under some view controller containment/transition situations and makes crashes virtually inevitable.

The leak does not seem to originate in ASDK. Manual investigation, plus the fact that it depends on iOS version & view controller transition/containment scheme, plus the fact that even if ASDK simply leaked the view, the layer should survive along with it, all point to an internal UIKit/Core Animation issue that was fixed in iOS 9. @maicki @appleguy 
",Adlai-Holler,maicki
1755,2016-06-16 18:00:15,"- Fix not using itemSize of UICollectionViewFlowLayout
- Move automatic constrained size calculation to the ASCollectionViewFlowLayoutInspector
- Provide a null layout inspector for throwing exceptions if a custom
  UICollectionView is given but no ASCollectionViewLayoutInspecting
- Fix not checking for optional layout inspecting data source methods
  are implemented or not
- Improving tests around ASCollectionViewLayoutInspecting

cc @levi that's the pull request we talked the other day about. Let me know what you think
",maicki,levi
1755,2016-06-16 18:02:25,"Possible improvement / idea: Instead of providing a `ASCollectionViewNullLayoutInspector` we provide a default one that would return a default calculated constrained size. The question is just what would we do with the supplemented view callbacks?

cc @levi 
",maicki,levi
1755,2016-06-17 20:36:16,"@levi Added a simple layout inspector for custom UICollectionViewLayout's.

Furthermore for documentation purposes attached is a graph how this structure looks like now.

![ascollectionviewlayoutinspecting](https://cloud.githubusercontent.com/assets/25288/16163857/71fbf9a0-3490-11e6-9f89-25bd3df19a74.png)

cc @hannahmbanana 
",maicki,levi
1755,2016-06-17 20:36:16,"@levi Added a simple layout inspector for custom UICollectionViewLayout's.

Furthermore for documentation purposes attached is a graph how this structure looks like now.

![ascollectionviewlayoutinspecting](https://cloud.githubusercontent.com/assets/25288/16163857/71fbf9a0-3490-11e6-9f89-25bd3df19a74.png)

cc @hannahmbanana 
",maicki,hannahmbanana
1755,2016-06-19 14:33:22,"Recently a lot of requests for how to integrate a custom `UICollectionViewLayout`. We should improve the documentation for that after this PR landed.

cc @hannahmbanana 
",maicki,hannahmbanana
1755,2016-06-21 03:28:45,"@levi @Adlai-Holler Could you guys take another look over it when you find some time and let me know your thoughts if you think it would be worth to merge soon?

cc @appleguy 
",maicki,appleguy
1755,2016-06-21 03:28:45,"@levi @Adlai-Holler Could you guys take another look over it when you find some time and let me know your thoughts if you think it would be worth to merge soon?

cc @appleguy 
",maicki,Adlai-Holler
1753,2016-06-16 17:13:36,"@george-gw: Great question - thanks for watching out for the consistency of ASDK's API!

@aaronschubert0: It looks like you were the original author of this feature. Could you weigh in on this? Was this the intended behavior?
",hannahmbanana,aaronschubert0
1752,2016-06-16 05:11:21,"Provide checklists for new Pull Requests and Issues via https://help.github.com/articles/helping-people-contribute-to-your-project/ 

I went a little overkill with the PR one. Let me know which ones you think are useful or not. 

Should we also do a checklist for new issues or just PRs?

@maicki @Adlai-Holler 
",hannahmbanana,maicki
1752,2016-06-16 05:11:21,"Provide checklists for new Pull Requests and Issues via https://help.github.com/articles/helping-people-contribute-to-your-project/ 

I went a little overkill with the PR one. Let me know which ones you think are useful or not. 

Should we also do a checklist for new issues or just PRs?

@maicki @Adlai-Holler 
",hannahmbanana,Adlai-Holler
1752,2016-06-20 05:41:14,"@levi: Notes / formal documentation from our GitHub maintainers meeting last week. 
",hannahmbanana,levi
1752,2016-06-21 02:47:07,"@maicki: This is ready to merge I believe. Let me know when do so that I can check that the ISSUE template works.
",hannahmbanana,maicki
1749,2016-06-15 23:59:22,"@appleguy @Adlai-Holler Can I have a first code review please
",maicki,appleguy
1749,2016-06-15 23:59:22,"@appleguy @Adlai-Holler Can I have a first code review please
",maicki,Adlai-Holler
1749,2016-06-16 00:33:00,"Sure man, I'll review it first thing tomorrow

Sent from my iPhone

> On Jun 15, 2016, at 4:59 PM, Michael Schneider notifications@github.com wrote:
> 
> @appleguy @Adlai-Holler Can I have a first code review please
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",Adlai-Holler,appleguy
1749,2016-06-16 00:33:00,"Sure man, I'll review it first thing tomorrow

Sent from my iPhone

> On Jun 15, 2016, at 4:59 PM, Michael Schneider notifications@github.com wrote:
> 
> @appleguy @Adlai-Holler Can I have a first code review please
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",Adlai-Holler,Adlai-Holler
1749,2016-06-16 02:43:59,"@garrettmoon @rcancro @ocrickard @shannonma in case you guys have an opportunity to review in the next few days...this is a top priority for me, but I have no chance to review until Saturday morning, which is much too slow IMO for this diff!
",appleguy,garrettmoon
1749,2016-06-16 02:43:59,"@garrettmoon @rcancro @ocrickard @shannonma in case you guys have an opportunity to review in the next few days...this is a top priority for me, but I have no chance to review until Saturday morning, which is much too slow IMO for this diff!
",appleguy,rcancro
1749,2016-06-16 02:43:59,"@garrettmoon @rcancro @ocrickard @shannonma in case you guys have an opportunity to review in the next few days...this is a top priority for me, but I have no chance to review until Saturday morning, which is much too slow IMO for this diff!
",appleguy,shannonma
1749,2016-06-16 02:43:59,"@garrettmoon @rcancro @ocrickard @shannonma in case you guys have an opportunity to review in the next few days...this is a top priority for me, but I have no chance to review until Saturday morning, which is much too slow IMO for this diff!
",appleguy,ocrickard
1749,2016-06-16 23:06:30,"@Adlai-Holler @ocrickard @garrettmoon Could you guys give me another look over the code. I tried to address all of your comments as well as I found some more things.

Changes:
- Add lock to _rendererAttributes
- Add locking to _linkAttributeValueAtPoint:attributeName:range:inAdditionalTruncationMessage:forHighlighting: as we access the attributed text in there
- Add locking to touchesBegan:withEvent: as we are accessing the [ASTextKitRenderer firstVisibleRange]
- Add locking for highlightStyle
- Move accessing delegate property access to instance variable access
",maicki,garrettmoon
1745,2016-06-14 03:46:34,"cc @hannahmbanana 
",maicki,hannahmbanana
1743,2016-06-21 06:50:27,"Note: This is my first bash script, and it's a terribly gross hack using -head and -tail that won't run all examples if we add more than 2 more additional examples. I will work on fixing this but I wanted to put up something fast to get us around the _extra_ long run times we experienced today. 

Findings:
- the elapsed time as reported by Travis is incorrect because it ran 5 of the builds in parallel (~20 min) and then the life-without-cocoa-pods afterwards (~3 min), so it only reports the 3 min elapsed time. Total time was really **~25 minutes: this is a reduction from previous build time**. Perhaps there is a 5 build limit per run?
- no matter what order I ran and reran our builds in, this build always was queued last. Supposedly builds are queued in order across all OSS projects, but I'm wondering if the extra resources required to run this more parallel job somehow de-prioritized it?
- 25 min total run time is better than the 1 hr+ we experienced today, except that the lead time 'til the batch starts is now the long pole. **Most of our builds were queued for 3-4 hours before they started today**. 
- It looks like there is a 164 build limit for OSS projects on Travis, which gets maxed out during normal working hours (9am - 7pm). You can see the status here: https://www.traviscistatus.com/ 
- Several options if this becomes unacceptable: pay $129/mo for 2 concurrent builds spots on Travis (supposedly the best github integration and low maintainence), pay $50/mo for Circle CI (Adlai used this before, reports comparing the two services I found online said iOS builds have issues failing on Circle and are hard to debug), Jenkins (issues with plugins to GitHub, LOTS of maintainence required, could run on our own fast hardware, have experts at Pintrest already?)

@Adlai-Holler @maicki
",hannahmbanana,maicki
1743,2016-06-21 06:50:27,"Note: This is my first bash script, and it's a terribly gross hack using -head and -tail that won't run all examples if we add more than 2 more additional examples. I will work on fixing this but I wanted to put up something fast to get us around the _extra_ long run times we experienced today. 

Findings:
- the elapsed time as reported by Travis is incorrect because it ran 5 of the builds in parallel (~20 min) and then the life-without-cocoa-pods afterwards (~3 min), so it only reports the 3 min elapsed time. Total time was really **~25 minutes: this is a reduction from previous build time**. Perhaps there is a 5 build limit per run?
- no matter what order I ran and reran our builds in, this build always was queued last. Supposedly builds are queued in order across all OSS projects, but I'm wondering if the extra resources required to run this more parallel job somehow de-prioritized it?
- 25 min total run time is better than the 1 hr+ we experienced today, except that the lead time 'til the batch starts is now the long pole. **Most of our builds were queued for 3-4 hours before they started today**. 
- It looks like there is a 164 build limit for OSS projects on Travis, which gets maxed out during normal working hours (9am - 7pm). You can see the status here: https://www.traviscistatus.com/ 
- Several options if this becomes unacceptable: pay $129/mo for 2 concurrent builds spots on Travis (supposedly the best github integration and low maintainence), pay $50/mo for Circle CI (Adlai used this before, reports comparing the two services I found online said iOS builds have issues failing on Circle and are hard to debug), Jenkins (issues with plugins to GitHub, LOTS of maintainence required, could run on our own fast hardware, have experts at Pintrest already?)

@Adlai-Holler @maicki
",hannahmbanana,Adlai-Holler
1741,2016-06-10 23:03:39,"@appleguy: I scanned the full diff, but it would be reassuring to have another set of eyes. 
- for all **.h .m .mm** and **.swift** files **(excluding files /Pods folder)**
- preserved author & date when included
- converged on a consistent header comment style with consistent Facebook licensing text

_*If anyone needs to do this in the future, I can send you a script._
",hannahmbanana,appleguy
1741,2016-06-10 23:03:55,"@levi @maicki @Adlai-Holler @nguyenhuy @appleguy: future file additions should conform to the header styles below. I’ll update the contributions file shortly. 

**ASDK FILES:**

//
//  ASPagerFlowLayout.h
//  AsyncDisplayKit
//
//  Created by Levi McCallum on 2/12/16.
//
//  Copyright (c) 2014-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under the BSD-style license found in the
//  LICENSE file in the root directory of this source tree. An additional grant
//  of patent rights can be found in the PATENTS file in the same directory.
//

**EXAMPLE FILES:**

//
//  PhotoCellNode.m
//  Sample
//
//  Created by Levi McCallum on 2/12/16.
//
//  Copyright (c) 2014-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under the BSD-style license found in the
//  LICENSE file in the root directory of this source tree. An additional grant
//  of patent rights can be found in the PATENTS file in the same directory.
//
//  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//  FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
//   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//  
",hannahmbanana,levi
1741,2016-06-10 23:03:55,"@levi @maicki @Adlai-Holler @nguyenhuy @appleguy: future file additions should conform to the header styles below. I’ll update the contributions file shortly. 

**ASDK FILES:**

//
//  ASPagerFlowLayout.h
//  AsyncDisplayKit
//
//  Created by Levi McCallum on 2/12/16.
//
//  Copyright (c) 2014-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under the BSD-style license found in the
//  LICENSE file in the root directory of this source tree. An additional grant
//  of patent rights can be found in the PATENTS file in the same directory.
//

**EXAMPLE FILES:**

//
//  PhotoCellNode.m
//  Sample
//
//  Created by Levi McCallum on 2/12/16.
//
//  Copyright (c) 2014-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under the BSD-style license found in the
//  LICENSE file in the root directory of this source tree. An additional grant
//  of patent rights can be found in the PATENTS file in the same directory.
//
//  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//  FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
//   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//  
",hannahmbanana,appleguy
1741,2016-06-10 23:03:55,"@levi @maicki @Adlai-Holler @nguyenhuy @appleguy: future file additions should conform to the header styles below. I’ll update the contributions file shortly. 

**ASDK FILES:**

//
//  ASPagerFlowLayout.h
//  AsyncDisplayKit
//
//  Created by Levi McCallum on 2/12/16.
//
//  Copyright (c) 2014-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under the BSD-style license found in the
//  LICENSE file in the root directory of this source tree. An additional grant
//  of patent rights can be found in the PATENTS file in the same directory.
//

**EXAMPLE FILES:**

//
//  PhotoCellNode.m
//  Sample
//
//  Created by Levi McCallum on 2/12/16.
//
//  Copyright (c) 2014-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under the BSD-style license found in the
//  LICENSE file in the root directory of this source tree. An additional grant
//  of patent rights can be found in the PATENTS file in the same directory.
//
//  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//  FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
//   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//  
",hannahmbanana,maicki
1741,2016-06-10 23:03:55,"@levi @maicki @Adlai-Holler @nguyenhuy @appleguy: future file additions should conform to the header styles below. I’ll update the contributions file shortly. 

**ASDK FILES:**

//
//  ASPagerFlowLayout.h
//  AsyncDisplayKit
//
//  Created by Levi McCallum on 2/12/16.
//
//  Copyright (c) 2014-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under the BSD-style license found in the
//  LICENSE file in the root directory of this source tree. An additional grant
//  of patent rights can be found in the PATENTS file in the same directory.
//

**EXAMPLE FILES:**

//
//  PhotoCellNode.m
//  Sample
//
//  Created by Levi McCallum on 2/12/16.
//
//  Copyright (c) 2014-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under the BSD-style license found in the
//  LICENSE file in the root directory of this source tree. An additional grant
//  of patent rights can be found in the PATENTS file in the same directory.
//
//  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//  FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
//   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//  
",hannahmbanana,nguyenhuy
1741,2016-06-10 23:03:55,"@levi @maicki @Adlai-Holler @nguyenhuy @appleguy: future file additions should conform to the header styles below. I’ll update the contributions file shortly. 

**ASDK FILES:**

//
//  ASPagerFlowLayout.h
//  AsyncDisplayKit
//
//  Created by Levi McCallum on 2/12/16.
//
//  Copyright (c) 2014-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under the BSD-style license found in the
//  LICENSE file in the root directory of this source tree. An additional grant
//  of patent rights can be found in the PATENTS file in the same directory.
//

**EXAMPLE FILES:**

//
//  PhotoCellNode.m
//  Sample
//
//  Created by Levi McCallum on 2/12/16.
//
//  Copyright (c) 2014-present, Facebook, Inc.  All rights reserved.
//  This source code is licensed under the BSD-style license found in the
//  LICENSE file in the root directory of this source tree. An additional grant
//  of patent rights can be found in the PATENTS file in the same directory.
//
//  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//  FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
//   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//  
",hannahmbanana,Adlai-Holler
1739,2016-07-10 07:01:38,"@ocrickard I think we're in pretty good shape here now.  Let us know if you notice any other clear issues and we'll prioritize them.

@shannonma FYI ^.  Interested on how your version upgrade goes!  We do plan to refactor / improve the architecture of ASTextNode in the next 2 months, but it will probably be August or September.
",appleguy,shannonma
1738,2016-06-12 23:13:02,"@gazialankus you're right, caching is not currently available.  For _most_ apps, this is definitely the correct behavior.  For example, on Facebook, Instagram, Pinterest, or even most YouTube sessions - it's unlikely enough for a user to come back to watch a previous video that it is likely a waste of space.  However, caching one video up to a maximum of ~50MB, maybe 500MB for a very video-heavy app, could make sense if the user wants to come back and resume a current video.

Because of this highly app-dependent need, I'm not sure that video caching will be implemented by the core ASDK team in the near future.  We are definitely interested to ensure that it is possible for a developer to do this, though.  @Eke or @lappp9 might have some thoughts on the right API override points to make this possible.  Ironically, since it now descends from ASNetworkImageNode, we might be able to plug into the downloader API (or use it for inspiration) to create a Video downloader / data source API.
",appleguy,Eke
1738,2016-06-12 23:13:02,"@gazialankus you're right, caching is not currently available.  For _most_ apps, this is definitely the correct behavior.  For example, on Facebook, Instagram, Pinterest, or even most YouTube sessions - it's unlikely enough for a user to come back to watch a previous video that it is likely a waste of space.  However, caching one video up to a maximum of ~50MB, maybe 500MB for a very video-heavy app, could make sense if the user wants to come back and resume a current video.

Because of this highly app-dependent need, I'm not sure that video caching will be implemented by the core ASDK team in the near future.  We are definitely interested to ensure that it is possible for a developer to do this, though.  @Eke or @lappp9 might have some thoughts on the right API override points to make this possible.  Ironically, since it now descends from ASNetworkImageNode, we might be able to plug into the downloader API (or use it for inspiration) to create a Video downloader / data source API.
",appleguy,lappp9
1737,2016-06-15 14:36:24,"@appleguy You think we could land that pretty soon?
",maicki,appleguy
1737,2016-06-16 20:00:51,"@Adlai-Holler @rcancro You guys can give me code review please.
",maicki,rcancro
1737,2016-06-16 20:00:51,"@Adlai-Holler @rcancro You guys can give me code review please.
",maicki,Adlai-Holler
1735,2016-06-09 06:58:37,"@levi awesome work here! I had been hoping this code would be cleaned up for a while now, but had not mentioned it to anyone. So it is a great surprise to see such improvements!

I will need help to review this, because the code is very core and that's critical to get right.  @nguyenhuy would be the person most familiar with the existing code, but I believe @maicki is also an expert here.  @Adlai-Holler may have some familiarity with it.

Once there is one very detailed review signoff, I am happy to take a final look and get this merged. Send me a note when that happens!
",appleguy,maicki
1735,2016-06-09 06:58:37,"@levi awesome work here! I had been hoping this code would be cleaned up for a while now, but had not mentioned it to anyone. So it is a great surprise to see such improvements!

I will need help to review this, because the code is very core and that's critical to get right.  @nguyenhuy would be the person most familiar with the existing code, but I believe @maicki is also an expert here.  @Adlai-Holler may have some familiarity with it.

Once there is one very detailed review signoff, I am happy to take a final look and get this merged. Send me a note when that happens!
",appleguy,nguyenhuy
1735,2016-06-09 06:58:37,"@levi awesome work here! I had been hoping this code would be cleaned up for a while now, but had not mentioned it to anyone. So it is a great surprise to see such improvements!

I will need help to review this, because the code is very core and that's critical to get right.  @nguyenhuy would be the person most familiar with the existing code, but I believe @maicki is also an expert here.  @Adlai-Holler may have some familiarity with it.

Once there is one very detailed review signoff, I am happy to take a final look and get this merged. Send me a note when that happens!
",appleguy,Adlai-Holler
1731,2016-06-09 05:28:36,"@boreys: Great question! There are two issues at play here: (1) the limits of ASDK's gif support and (2) the fact that a size is required to layout all ASDK image nodes. 

I believe that ASNeworkImageNode's gif support was not designed to support a large number of gifs. Depending on the size of the gifs (resolution, length), it could take a significant amount of memory and disk space to decode them, especially with many in a scrolling view. @garrettmoon: could you provide some insight on the limits of gif support?

If your goal is to show small (~20x20) gifs embedded in the text of the comments, I believe I have seen this done using a node as an attachment to the attributed string provided to the ASTextNode.

Comments on your code:
1. You can delete the imageNodeDidFinishDecoding: method. It is not needed in this use case. 
2. Your layoutSpecThatFits code is very close to working. However for image nodes specifically, you will need to specify the size of the node. This is confusing and not very well documented so I apologize. One way to do this is using the mediaNode.preferredFrameSize property. You could set this either in layoutSpecThatFits or in the imageNode:didLoadImage: method. 
3. FYI - layoutSpecs and nodes both conform to the ASLayoutable protocol, which means that you can mix and match them in the setChildren method. A more clean (and extensible) way to implement the layout you have would be to do something like below. Check out how the mediaNode is vertically stacked with the commentsNode inside the mainStack. 
   
   it could be cleaned up  has an issue. 


",hannahmbanana,garrettmoon
1729,2016-06-08 22:14:40,"@nguyenhuy, you'll love this.
",levi,nguyenhuy
1728,2016-06-08 20:14:55,"ASTextNode and ASImageNode currently implement drawing methods as instance methods. This breaks the custom class drawing methods. They will never be called for a subclass. Fixing it by adding a delegate object to the text / image node drawing methods to be able to dispatch the call to the instance method in ASDisplayNode.

To be able to work this way the original parameters needs to be passed to the superclass if a subclass calls the superclasses class drawing method.

cc @appleguy As we talked about this is a first proposal how we could tackle the broken custom class drawing methods. As also said we need to look into the locking issue that is already happening and likely still happening with this solution.
",maicki,appleguy
1728,2016-06-09 01:34:15,"Yep that's the reason, they where changed to instance methods and that's the reason. To be honest I don't have to context to that change either, but @appleguy should have more information about that.
",maicki,appleguy
1724,2016-06-09 05:34:38,"cc @garrettmoon.  Woo, great find @ejensen !
",appleguy,garrettmoon
1723,2016-06-09 10:36:06,"@ejensen Great idea ! I had the same issue and was planning a similar PR 👍
@appleguy [FLAnimatedImage](https://github.com/Flipboard/FLAnimatedImage/blob/master/FLAnimatedImage/FLAnimatedImageView.m) also lets you set either `NSDefaultRunLoopMode` or `NSRunLoopCommonModes`, here is [their default](https://github.com/Flipboard/FLAnimatedImage/blob/master/FLAnimatedImage/FLAnimatedImageView.m) :


",koheku,appleguy
1721,2016-06-07 20:21:15,"No real reason. @appleguy said that the NSDictionary I was using was showing up in profiling, so I had arrays on the brain. Though I do worry about returning `children` from a map. Even with keys of 0,1,2,... do we know that the children will be returned in their index order? 
",rcancro,appleguy
1713,2016-06-05 05:49:02,"Reverts facebook/AsyncDisplayKit#1674

@maicki some careful bisecting discovered that this caused a layout regression in the Pinterest feed, so I need to revert it for now.  Looking forward to re-landing once fixed.  Fortunately the issue reproduces every time.

![img_0104](https://cloud.githubusercontent.com/assets/565251/15803836/832e42b2-2aa6-11e6-85f9-19eed092bf29.PNG)
![img_0105](https://cloud.githubusercontent.com/assets/565251/15803837/834c0978-2aa6-11e6-8ff0-13c2825199de.PNG)
",appleguy,maicki
1710,2016-06-05 04:31:49,"@Xinchi @Eke @ejensen @maicki @chourobin have a look!
",appleguy,Eke
1710,2016-06-05 04:31:49,"@Xinchi @Eke @ejensen @maicki @chourobin have a look!
",appleguy,maicki
1710,2016-06-05 04:31:49,"@Xinchi @Eke @ejensen @maicki @chourobin have a look!
",appleguy,ejensen
1710,2016-06-05 04:31:49,"@Xinchi @Eke @ejensen @maicki @chourobin have a look!
",appleguy,chourobin
1710,2016-06-05 04:31:49,"@Xinchi @Eke @ejensen @maicki @chourobin have a look!
",appleguy,Xinchi
1703,2016-05-31 17:27:28,"Posting here as a response to conversation started in Slack channel with @maicki and @appleguy about sharing relevant crashes.

Here's a handful of crashes we are getting that all seem to be somewhat related to the ASTextKitContext in our production app.  They are very hard to reproduce, as I have not yet reproduced any of them.

http://crashes.to/s/57615585859

http://crashes.to/s/78e5fd29225

http://crashes.to/s/bc12fcdb09d

http://crashes.to/s/f52975e6375

http://crashes.to/s/7f34274b048

http://crashes.to/s/d4f445cb196

http://crashes.to/s/521acd4737b

http://crashes.to/s/3c246834890

http://crashes.to/s/ac645e3d425

http://crashes.to/s/adfc74114fa
",klivin,appleguy
1703,2016-05-31 17:27:28,"Posting here as a response to conversation started in Slack channel with @maicki and @appleguy about sharing relevant crashes.

Here's a handful of crashes we are getting that all seem to be somewhat related to the ASTextKitContext in our production app.  They are very hard to reproduce, as I have not yet reproduced any of them.

http://crashes.to/s/57615585859

http://crashes.to/s/78e5fd29225

http://crashes.to/s/bc12fcdb09d

http://crashes.to/s/f52975e6375

http://crashes.to/s/7f34274b048

http://crashes.to/s/d4f445cb196

http://crashes.to/s/521acd4737b

http://crashes.to/s/3c246834890

http://crashes.to/s/ac645e3d425

http://crashes.to/s/adfc74114fa
",klivin,maicki
1700,2016-05-30 02:46:58,"@1nput0utput great change!  @garrettmoon any input on the approach here?  If you review, I can merge.
",appleguy,garrettmoon
1699,2016-06-10 18:11:54,"I looked into that a bit. The disappearing cells is a general problem of UICollectionView if you use `setContentOffset` without animation and within an animation block.

One way to have an animation duration with a custom curve is to drive the animation manually via `CADisplayLink`. Either you roll it by your own or you use a library like [AnimationEngine](https://github.com/intuit/AnimationEngine/). The code would look something like:



cc @hannahmbanana In case this question comes up again
",maicki,hannahmbanana
1697,2016-05-26 05:53:09,"During various layout changes that trigger content size changes, batch fetching needs to recalulate it's number of screens left to scroll before the delegate -collectionView:beginBatchFetchingWithContext: is called. 

Just exposes `[self _checkForBatchFetching];`

**UPDATE:**
Due to conversations with @appleguy the approach has changed to triggering `[self _checkForBatchFetching];`internally, at the appropriate times.

After some digging, it appears triggering this on `- (NSArray *)visibleNodeIndexPathsForRangeController:(ASRangeController *)rangeController` exhibits the least amount of additional calculations, but covers a range of use cases that require a batch fetch re-measurement.

From the code comments:

> // We must re-check the batch measurement range when additional cells enter the same visual area
>   // Use case is - User has 10 items visible, and wants to trigger batch updates at 2x visible screen size, so 20 records need to be fetched. User modifies the collection view (by pinch or other means) and it results in 15 items in the visible space. In order to achieve the 2x batch promise, we now need 30 records. This accounts for that by triggering a remeasurement at the appropriate time.
",nickvelloff,appleguy
1697,2016-06-17 10:57:49,"@appleguy I think I may have found the appropriate place to trigger this internally. It seems to fire at the appropriate times, and not frequently. 
",nickvelloff,appleguy
1697,2016-06-22 20:26:41,"OK. This time we are going to add delegate method `- (void)didCompleteUpdatesInRangeController:(ASRangeController *)rangeController` to `ASRangeControllerDelegate`

Then trigger at the end of `_updateVisibleNodeIndexPaths` in `ASRangeController`
cc @appleguy this is working well for me.
",nickvelloff,appleguy
1693,2016-06-02 17:51:31,"@levi @appleguy Can you take a look at these updates?
",rcancro,appleguy
1693,2016-06-02 22:30:31,"I'd love to land as soon as any reviewer gives a green light!  Send me a ping when so.

> On Jun 2, 2016, at 10:51 AM, ricky notifications@github.com wrote:
> 
> @levi https://github.com/levi @appleguy https://github.com/appleguy Can you take a look at these updates?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1693#issuecomment-223369212, or mute the thread https://github.com/notifications/unsubscribe/AAigAxHIIZPNbWkaJtqMv4iSj8u1PluKks5qHxgngaJpZM4Ik-md.
",appleguy,appleguy
1692,2016-06-09 01:43:37,"@ocrickard Thanks for the review. I addressed your comments in the last commit.
",maicki,ocrickard
1691,2016-05-23 21:12:34,"The purpose of this PR is to explore approaches to invalidating and remeasuring a cell node's constrained size. Particularly useful during an interactive transition where cells are resized by some type of gesture.

Approach 1: 
- expose `- (void)relayoutAllNodes` in `ASCollectionDataController` to `ASCollectionView` and `ASTableView`
-  call `relayoutItems()` in `ASCollectionView` to trigger all nodes to force their size to invalidate and remeasure

Approach 2: 
- in `ASDisplayNode`, modify `__setNeedsLayout` so `oldConstrainedSize` checks new `[self __constrainedSizeForLayout]`
- in `ASDisplayNode` private `__constrainedSizeForLayout` returns default `_constrainedSize`
- in `ASCellNode` we override `__constrainedSizeForLayout` to return new `ASSizeRange` calling new `constrainedSizeForLayoutWithOldConstrainedSize` delegate method in `ASCellNodeDelegate`
- `ASCollectionView` implements `ASCellNodeDelegate` `constrainedSizeForLayoutWithOldConstrainedSize` delegate method and returns `_asyncDataSource` `constrainedSizeForNodeAtIndexPath` effectively getting the new constrained size from the user's `collectionView` `constrainedSizeForNodeAtIndexPath` `ASCollectionDataSource` delegate implementation 
- User just needs to call `setNeedsLayout()` on any `ASCellNode` to force it's size to invalidate and remeasure

Findings so far:
Approach 1 works well, but may be a bit coarse a solution and perhaps more expensive than it needs to be.
Approach 2 _almost_ works, and is a more elegant solution but it appears to be fighting something else listening to the invalidation, that is getting it wrong. More research to do here.

Demo:
Points to my ASDK fork with these changes.
git@github.com:the-grid/zoom-demo.git
Branch `relayoutAllNodes` uses approach 1
Branch `setNeedsLayout` uses approach 2

cc/ @nguyenhuy @appleguy for all the guidance. I think we are getting close here.
",nickvelloff,nguyenhuy
1691,2016-05-23 21:12:34,"The purpose of this PR is to explore approaches to invalidating and remeasuring a cell node's constrained size. Particularly useful during an interactive transition where cells are resized by some type of gesture.

Approach 1: 
- expose `- (void)relayoutAllNodes` in `ASCollectionDataController` to `ASCollectionView` and `ASTableView`
-  call `relayoutItems()` in `ASCollectionView` to trigger all nodes to force their size to invalidate and remeasure

Approach 2: 
- in `ASDisplayNode`, modify `__setNeedsLayout` so `oldConstrainedSize` checks new `[self __constrainedSizeForLayout]`
- in `ASDisplayNode` private `__constrainedSizeForLayout` returns default `_constrainedSize`
- in `ASCellNode` we override `__constrainedSizeForLayout` to return new `ASSizeRange` calling new `constrainedSizeForLayoutWithOldConstrainedSize` delegate method in `ASCellNodeDelegate`
- `ASCollectionView` implements `ASCellNodeDelegate` `constrainedSizeForLayoutWithOldConstrainedSize` delegate method and returns `_asyncDataSource` `constrainedSizeForNodeAtIndexPath` effectively getting the new constrained size from the user's `collectionView` `constrainedSizeForNodeAtIndexPath` `ASCollectionDataSource` delegate implementation 
- User just needs to call `setNeedsLayout()` on any `ASCellNode` to force it's size to invalidate and remeasure

Findings so far:
Approach 1 works well, but may be a bit coarse a solution and perhaps more expensive than it needs to be.
Approach 2 _almost_ works, and is a more elegant solution but it appears to be fighting something else listening to the invalidation, that is getting it wrong. More research to do here.

Demo:
Points to my ASDK fork with these changes.
git@github.com:the-grid/zoom-demo.git
Branch `relayoutAllNodes` uses approach 1
Branch `setNeedsLayout` uses approach 2

cc/ @nguyenhuy @appleguy for all the guidance. I think we are getting close here.
",nickvelloff,appleguy
1691,2016-06-06 01:32:04,"@levi @maicki @nguyenhuy any thoughts here?  I'm hustling fast on many things, and worry that it could be too long before I can properly understand the tradeoffs here.  We should not have PRs standing open for a long time.
",appleguy,levi
1691,2016-06-06 01:32:04,"@levi @maicki @nguyenhuy any thoughts here?  I'm hustling fast on many things, and worry that it could be too long before I can properly understand the tradeoffs here.  We should not have PRs standing open for a long time.
",appleguy,maicki
1691,2016-06-06 01:32:04,"@levi @maicki @nguyenhuy any thoughts here?  I'm hustling fast on many things, and worry that it could be too long before I can properly understand the tradeoffs here.  We should not have PRs standing open for a long time.
",appleguy,nguyenhuy
1687,2016-05-21 03:11:56,"Cool beans.  @nguyenhuy or @maicki could you review and let me know when ready to merge?

I assume this would be a step in the direction of having a mode where we can re-run an existing ASLayoutSpec with a new constrained size, without calling layoutSpecThatFits?  This is actually the key / main capability needed to unblock @hannahmbanana's layout spec playground test app.
",appleguy,nguyenhuy
1687,2016-05-21 03:11:56,"Cool beans.  @nguyenhuy or @maicki could you review and let me know when ready to merge?

I assume this would be a step in the direction of having a mode where we can re-run an existing ASLayoutSpec with a new constrained size, without calling layoutSpecThatFits?  This is actually the key / main capability needed to unblock @hannahmbanana's layout spec playground test app.
",appleguy,maicki
1687,2016-05-21 03:11:56,"Cool beans.  @nguyenhuy or @maicki could you review and let me know when ready to merge?

I assume this would be a step in the direction of having a mode where we can re-run an existing ASLayoutSpec with a new constrained size, without calling layoutSpecThatFits?  This is actually the key / main capability needed to unblock @hannahmbanana's layout spec playground test app.
",appleguy,hannahmbanana
1685,2016-06-06 06:08:49,"@wy19901227 - thanks for contributing to the AsyncDisplayKit community by asking your question here! Let me know if you have any follow up questions, either by reopening this issue, or contacting any of us on Slack (#1582). 

@hannahmbanana: can you add this topic to your list for the website / documentation upgrade?
",appleguy,hannahmbanana
1683,2016-05-19 20:05:05,"cc @nguyenhuy 
",nickvelloff,nguyenhuy
1681,2016-05-19 12:49:22,"There is a use cases that might make sense to support a batch fetching update/enhancement:

If all loaded items are within visible bounds, fetching never triggers because this is triggered by a scroll event. If I have 10 of 100 items loaded, then pinch to zoom a collection view where all 10 fit nicely the trigger to fetch additional items will never get called.

This would commonly occur on pinch/zoom out with a collection view. 

cc /@maicki 
",nickvelloff,maicki
1679,2016-05-18 22:48:50,"@levi lol!  This is actually very compelling, and I think the name is quite good.  @rcancro what do you think?  Any other name ideas?
",appleguy,rcancro
1677,2016-05-18 07:46:14,"@appleguy @Xinchi @Eke @ejensen @maicki @chourobin 

The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.

I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
",gazreese,appleguy
1677,2016-05-18 07:46:14,"@appleguy @Xinchi @Eke @ejensen @maicki @chourobin 

The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.

I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
",gazreese,ejensen
1677,2016-05-18 07:46:14,"@appleguy @Xinchi @Eke @ejensen @maicki @chourobin 

The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.

I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
",gazreese,chourobin
1677,2016-05-18 07:46:14,"@appleguy @Xinchi @Eke @ejensen @maicki @chourobin 

The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.

I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
",gazreese,Eke
1677,2016-05-18 07:46:14,"@appleguy @Xinchi @Eke @ejensen @maicki @chourobin 

The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.

I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
",gazreese,maicki
1677,2016-05-18 07:46:14,"@appleguy @Xinchi @Eke @ejensen @maicki @chourobin 

The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.

I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
",gazreese,Xinchi
1677,2016-05-18 07:56:07,"@gazreese, thanks for this awesome PR!  We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.

I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode.  Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.

If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image.  If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such.  Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.

This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.

I will be flying out of town in the next day, but will check in by Monday or so.  Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass.  If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!

Cheers,



> On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> 
> I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> Commit Summary
> 
> Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> File Changes
> 
> M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> Patch Links:
> 
> https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
",appleguy,appleguy
1677,2016-05-18 07:56:07,"@gazreese, thanks for this awesome PR!  We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.

I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode.  Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.

If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image.  If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such.  Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.

This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.

I will be flying out of town in the next day, but will check in by Monday or so.  Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass.  If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!

Cheers,



> On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> 
> I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> Commit Summary
> 
> Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> File Changes
> 
> M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> Patch Links:
> 
> https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
",appleguy,ejensen
1677,2016-05-18 07:56:07,"@gazreese, thanks for this awesome PR!  We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.

I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode.  Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.

If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image.  If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such.  Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.

This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.

I will be flying out of town in the next day, but will check in by Monday or so.  Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass.  If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!

Cheers,



> On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> 
> I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> Commit Summary
> 
> Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> File Changes
> 
> M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> Patch Links:
> 
> https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
",appleguy,chourobin
1677,2016-05-18 07:56:07,"@gazreese, thanks for this awesome PR!  We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.

I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode.  Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.

If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image.  If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such.  Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.

This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.

I will be flying out of town in the next day, but will check in by Monday or so.  Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass.  If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!

Cheers,



> On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> 
> I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> Commit Summary
> 
> Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> File Changes
> 
> M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> Patch Links:
> 
> https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
",appleguy,Eke
1677,2016-05-18 07:56:07,"@gazreese, thanks for this awesome PR!  We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.

I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode.  Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.

If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image.  If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such.  Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.

This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.

I will be flying out of town in the next day, but will check in by Monday or so.  Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass.  If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!

Cheers,



> On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> 
> I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> Commit Summary
> 
> Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> File Changes
> 
> M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> Patch Links:
> 
> https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
",appleguy,maicki
1677,2016-05-18 07:56:07,"@gazreese, thanks for this awesome PR!  We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.

I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode.  Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.

If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image.  If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such.  Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.

This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.

I will be flying out of town in the next day, but will check in by Monday or so.  Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass.  If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!

Cheers,



> On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> 
> I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> Commit Summary
> 
> Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> File Changes
> 
> M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> Patch Links:
> 
> https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
",appleguy,Xinchi
1677,2016-05-18 07:59:39,"Hi @applyguy

Sounds good to me. I’m out of the office travelling today so I’ll have a better look into it tomorrow.

> On 18 May 2016, at 08:56, appleguy notifications@github.com wrote:
> 
> @gazreese, thanks for this awesome PR! We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.
> 
> I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode. Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.
> 
> If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image. If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such. Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.
> 
> This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.
> 
> I will be flying out of town in the next day, but will check in by Monday or so. Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass. If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!
> 
> Cheers,
> 
> -- Scott
> 
> > On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> > 
> > @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> > The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> > 
> > I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> > 
> > You can view, comment on, or merge this pull request online at:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> > Commit Summary
> > 
> > Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> > File Changes
> > 
> > M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> > M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> > M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> > M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> > M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> > Patch Links:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677#issuecomment-219953063
",gazreese,ejensen
1677,2016-05-18 07:59:39,"Hi @applyguy

Sounds good to me. I’m out of the office travelling today so I’ll have a better look into it tomorrow.

> On 18 May 2016, at 08:56, appleguy notifications@github.com wrote:
> 
> @gazreese, thanks for this awesome PR! We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.
> 
> I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode. Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.
> 
> If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image. If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such. Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.
> 
> This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.
> 
> I will be flying out of town in the next day, but will check in by Monday or so. Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass. If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!
> 
> Cheers,
> 
> -- Scott
> 
> > On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> > 
> > @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> > The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> > 
> > I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> > 
> > You can view, comment on, or merge this pull request online at:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> > Commit Summary
> > 
> > Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> > File Changes
> > 
> > M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> > M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> > M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> > M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> > M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> > Patch Links:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677#issuecomment-219953063
",gazreese,chourobin
1677,2016-05-18 07:59:39,"Hi @applyguy

Sounds good to me. I’m out of the office travelling today so I’ll have a better look into it tomorrow.

> On 18 May 2016, at 08:56, appleguy notifications@github.com wrote:
> 
> @gazreese, thanks for this awesome PR! We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.
> 
> I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode. Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.
> 
> If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image. If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such. Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.
> 
> This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.
> 
> I will be flying out of town in the next day, but will check in by Monday or so. Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass. If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!
> 
> Cheers,
> 
> -- Scott
> 
> > On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> > 
> > @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> > The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> > 
> > I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> > 
> > You can view, comment on, or merge this pull request online at:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> > Commit Summary
> > 
> > Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> > File Changes
> > 
> > M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> > M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> > M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> > M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> > M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> > Patch Links:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677#issuecomment-219953063
",gazreese,Eke
1677,2016-05-18 07:59:39,"Hi @applyguy

Sounds good to me. I’m out of the office travelling today so I’ll have a better look into it tomorrow.

> On 18 May 2016, at 08:56, appleguy notifications@github.com wrote:
> 
> @gazreese, thanks for this awesome PR! We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.
> 
> I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode. Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.
> 
> If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image. If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such. Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.
> 
> This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.
> 
> I will be flying out of town in the next day, but will check in by Monday or so. Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass. If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!
> 
> Cheers,
> 
> -- Scott
> 
> > On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> > 
> > @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> > The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> > 
> > I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> > 
> > You can view, comment on, or merge this pull request online at:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> > Commit Summary
> > 
> > Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> > File Changes
> > 
> > M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> > M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> > M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> > M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> > M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> > Patch Links:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677#issuecomment-219953063
",gazreese,maicki
1677,2016-05-18 07:59:39,"Hi @applyguy

Sounds good to me. I’m out of the office travelling today so I’ll have a better look into it tomorrow.

> On 18 May 2016, at 08:56, appleguy notifications@github.com wrote:
> 
> @gazreese, thanks for this awesome PR! We're super fortunate to have benefitted from your contributions and are excited to actively develop this class together.
> 
> I believe Max and Yunnan (Xinchi / yunnanwu) have been planning to change the superclass of ASVideoNode to ASNetworkImageNode. Although this may sound nontraditional, it turns out to provide exactly the desired functionality with exceptionally low overhead.
> 
> If a user desires a fixed, static asset placeholder image or to apply one themselves, they could set videoNode.image. If a thumbnail URL, they simply set videoNode.url, which we could mirror to placeholderImageURL or such. Even the playButton will properly display over the top of the image content, as would the AVPlayerLayer when added.
> 
> This should mean that it's not necessary to set .image / .url = nil even to play the video, although we could do so if we decide to (it would save memory, and the PINRemoteImage fully automatic / default-on memory + disk cache should have us covered.
> 
> I will be flying out of town in the next day, but will check in by Monday or so. Please hop on Slack and pull together a few of the contributors to discuss if we should adapt this PR to change the superclass. If you're interested to just try this out, I think it should be a straightforward change, mostly deleting the placeholderImageNode!
> 
> Cheers,
> 
> -- Scott
> 
> > On May 18, 2016, at 12:46 AM, gazreese notifications@github.com wrote:
> > 
> > @appleguy https://github.com/appleguy @Xinchi https://github.com/Xinchi @Eke https://github.com/Eke @ejensen https://github.com/ejensen @maicki https://github.com/maicki @chourobin https://github.com/chourobin
> > The intention of this is to allow the user of ASVideoNode to set placeholder images independently of the video decoding process. The iOS code doesn't appear to be capable of pulling a placeholder image from an HLS video stream (the video node appears blank until you tap play), and for my project I need placeholders. This also allows the user to set a placeholder that isn't necessarily a frame of the video.
> > 
> > I've updated one of the test apps and this appears to be working fine. It's also working fine in my project. Please let me know if you have any comments / concerns / changes and I'll get it sorted.
> > 
> > You can view, comment on, or merge this pull request online at:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677 https://github.com/facebook/AsyncDisplayKit/pull/1677
> > Commit Summary
> > 
> > Exposed the placeholderImageNode property of ASVideoNode so that users of the class can set placeholder images independently of the video decoding process.
> > File Changes
> > 
> > M AsyncDisplayKit/ASVideoNode.h https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-0 (2)
> > M AsyncDisplayKit/ASVideoNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-1 (40)
> > M AsyncDisplayKitTests/ASVideoNodeTests.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-2 (27)
> > M examples/Videos/Sample.xcodeproj/project.pbxproj https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-3 (1208)
> > M examples/Videos/Sample/ViewController.m https://github.com/facebook/AsyncDisplayKit/pull/1677/files#diff-4 (29)
> > Patch Links:
> > 
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.patch https://github.com/facebook/AsyncDisplayKit/pull/1677.patch
> > https://github.com/facebook/AsyncDisplayKit/pull/1677.diff https://github.com/facebook/AsyncDisplayKit/pull/1677.diff
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1677#issuecomment-219953063
",gazreese,Xinchi
1677,2016-06-05 04:31:28,"@gazreese @hannahmbanana got to this one!  https://github.com/facebook/AsyncDisplayKit/pull/1710
",appleguy,hannahmbanana
1676,2016-05-19 05:15:56,"@maicki @yunnanwu @levi @garrettmoon on API design / naming!
",appleguy,levi
1676,2016-05-19 05:15:56,"@maicki @yunnanwu @levi @garrettmoon on API design / naming!
",appleguy,garrettmoon
1676,2016-05-19 05:15:56,"@maicki @yunnanwu @levi @garrettmoon on API design / naming!
",appleguy,maicki
1671,2016-05-17 17:00:43,"@levi thanks for comments, will fix in few hours
",Eke,levi
1668,2016-06-04 21:39:17,"@Xinchi @Eke - do you think this would be better as an option rather than the default? It seems like this behavior's desirability would very much depend on the application.  
",hannahmbanana,Eke
1667,2016-05-16 16:07:46,"1. Use NSFastEnumeration directly instead of getting a NSEnumerator for iterating through completedNodes which should improve performance
2. Use the sorted array in `reloadRowsAtIndexPaths:withAnimationOptions:`. Before we just sorted it, but didn't use it :/
3. Remove FIXME about sorting index paths for deleting rows. @Adlai-Holler I saw you added the FIXME, why do you think we should order in descending order before deleting?

cc @appleguy 
",maicki,appleguy
1667,2016-05-16 16:07:46,"1. Use NSFastEnumeration directly instead of getting a NSEnumerator for iterating through completedNodes which should improve performance
2. Use the sorted array in `reloadRowsAtIndexPaths:withAnimationOptions:`. Before we just sorted it, but didn't use it :/
3. Remove FIXME about sorting index paths for deleting rows. @Adlai-Holler I saw you added the FIXME, why do you think we should order in descending order before deleting?

cc @appleguy 
",maicki,Adlai-Holler
1663,2016-05-14 19:15:26,"CocoaPods was having trouble building ASDK as a dependency of an extension pod I made, and this fixed it right up. 

This fixes https://github.com/CocoaPods/CocoaPods/issues/5230 and probably also #431 . @appleguy @maicki thoughts?
",Adlai-Holler,appleguy
1663,2016-05-14 19:15:26,"CocoaPods was having trouble building ASDK as a dependency of an extension pod I made, and this fixed it right up. 

This fixes https://github.com/CocoaPods/CocoaPods/issues/5230 and probably also #431 . @appleguy @maicki thoughts?
",Adlai-Holler,maicki
1663,2016-05-14 19:23:31,"@Adlai-Holler You have any idea what can cause that or why this is happening? Is it related to using Swift in the extension pod and the whole bridging mechanism is creating some issues? Furthermore did this just start happen with Cocoapod 1.0 and was fine with < 1.0?

Overall I would be fine with the change, if this resolves the issue to have ASDK as dependency under some circumstances.

@appleguy Any idea why we have them as Framework-Style Imports in the first place?
",maicki,appleguy
1657,2016-06-09 20:08:47,"@hannahmbanana @appleguy  I think we had that issue on our Slack channel and it will be resolved by calling `setNeedsLayout`. Good to close in my opinion.

<img width=""650"" alt=""screen shot 2016-06-09 at 1 08 29 pm"" src=""https://cloud.githubusercontent.com/assets/25288/15944623/4b625b3e-2e43-11e6-8ada-40c9ebaef9e7.png"">
",maicki,appleguy
1656,2016-06-04 21:39:09,"@Xinchi I've thought carefully about this and also discussed with @hannahmbanana about API naming.  My original opinion matched @binl and I think there is some question about the flexibility of the original API name.  Your work here matched it perfectly and is correct, it simply exposed some limitations in the flexibility of the original name choice.

However, after further consideration, I think we should move forward with this as-is.  I am likely to want to rename this to something more generic later, like ASCellNodeInterfaceEvent..., but this would be a breaking API change and is not worth doing at this moment (we should consider it for 2.0 though).

In the end, the reason I'm happy to land this is that I definitely agree the functionality is related to the use cases for the other values.  They are all related to a cell monitoring its relationship with the scrollable content area.  It is always possible to solve problems like this at the application level - however, ASDK's main goal is to provide conveniences wherever they don't get in the way / slow things down, specifically to reduce the complexity of application code and make powerful capabilities easy.  Avoiding the need for application level delegate patterns is definitely a simplification.

Thanks for carefully thinking about this, making a very clean change to core framework code, and advocating for why this is the right solution — as well as thinking through alternatives.

If you can rebase it, I'll merge ASAP.
",appleguy,hannahmbanana
1648,2016-06-06 02:16:30,"@appleguy, @maicki has a better solution for this already landed. Closing out.
",levi,maicki
1642,2016-05-10 18:18:53,"Currently, the only way to set an ASPagerNode's initial cell is to call `scrollToItemAtIndex`.  However, this method can only be called after the ASPagerNode's data has been fully loaded and the view laid out.

One workaround consists in wrapping the call to `scrollToItemAtIndex` inside an `async_after`, another is to call it after `reloadDataImmediately`.

The first workaround is just an ugly hack, the second is too expensive.  A better and more convenient way to set an ASPagerNode's initial cell would be nice.

cc @hannahmbanana 
",plm75,hannahmbanana
1640,2016-05-10 15:41:39,"@bimawa: As discussed on Slack, does Implicit Node Hierarchy Management suffice? Or is there some other functionality that is missing?

http://asyncdisplaykit.org/docs/implicit-hierarchy-mgmt.html

This is a beta feature developed by @levi that will soon be on by default. When enabled, Implicit Node Hierarchy Management means that your nodes no longer require addSubnode: or removeFromSupernode method calls. The presence or absence of the INHM node and its subnodes are determined in the layoutSpecThatFits: method.
",hannahmbanana,levi
1640,2016-05-11 06:42:32,"@hannahmbanana @levi yes a little bit another functional i want. What we have today:



its epic hard to understanding and overkill at first time with additional `if` cases. What i need for simple disable/enable layoutSpec;



Pretty cool? more usefull, and clear for understand?

How i think we must add new property `gone` or similar for `ASLayoutSpec` class.
",bimawa,levi
1640,2016-05-11 17:44:05,"Here's the summary from the Slack conversation: 
- @nguyenhuy: Very cool idea! I imagine this `gone` property can be used to simplify layout code in many cases. One minor downside of it is that it makes the layout system a bit less declarative. do you have any thoughts about its implementation?
- @bimawa: I have only one idea its add property to ASLayoutSpec class. But maybe community can invent better ideas? but like u spot its make a bit less declarative. But from another side its property like `flexShrink` similar props. We can try add this to `ASLayoutable.h` protocol. Call it like `flexVisible` with default propery `YES` and if this property is `NO` skip Spec from calculation in layouts.
- @nguyenhuy: that’s one good approach. The thing I’m concerning is how this implementation would affect other properties, especially stack related ones. I need a bit more time to think about this. Could you explore this option and perhaps put up a PR? It will definitely help us to have a better idea and open detailed discussions
",hannahmbanana,nguyenhuy
1638,2016-06-06 13:46:11,"@pixel4 This should be fixed with version 1.9.8 that was released last night. Can you please verify

cc @appleguy
",maicki,appleguy
1632,2016-05-07 05:00:43,"In a recent update to PINRemoteImage, its memory cache went from storing UIImage instances to containers of NSData which are used to generate a UIImage instance on demand. Unfortunately, these UIImage instances show `isEqual: NO` compared to one another.

Since the images appear to be different, if you wire `ASMultiplexImageNodeDataSource.imageForImageIdentifier` up to synchronously retrieve an image from the PINRemoteImageManager instance, the image will change every time, which will call setNeedsDisplay, which will call displayWillStart, which will call fetchData, which will generate a new UIImage instance.

To break this cycle, this patch avoids requesting the image for an already-loaded image identifier from the multiplex node's data source. The only issue I can see with this is, if you load an image into a multiplex node and then manually set `image` on the multiplex image node (sidestepping the image loading mechanism), the node may continue using that image rather than attempting to refetch. It's not ideal, but I can't imagine a use case for that.

@garrettmoon @appleguy 

As a separate issue, `ASPINRemoteImageDownloader` uses a private image manager instance which completely surprised me. I think this behavior is pretty misleading; for instance if I want to clear the memory/disk cache, or print the disk cache size for diagnostics, I couldn't and most users probably wouldn't even know that there were two PINRemoteImageManager instances.
",Adlai-Holler,garrettmoon
1632,2016-05-07 05:00:43,"In a recent update to PINRemoteImage, its memory cache went from storing UIImage instances to containers of NSData which are used to generate a UIImage instance on demand. Unfortunately, these UIImage instances show `isEqual: NO` compared to one another.

Since the images appear to be different, if you wire `ASMultiplexImageNodeDataSource.imageForImageIdentifier` up to synchronously retrieve an image from the PINRemoteImageManager instance, the image will change every time, which will call setNeedsDisplay, which will call displayWillStart, which will call fetchData, which will generate a new UIImage instance.

To break this cycle, this patch avoids requesting the image for an already-loaded image identifier from the multiplex node's data source. The only issue I can see with this is, if you load an image into a multiplex node and then manually set `image` on the multiplex image node (sidestepping the image loading mechanism), the node may continue using that image rather than attempting to refetch. It's not ideal, but I can't imagine a use case for that.

@garrettmoon @appleguy 

As a separate issue, `ASPINRemoteImageDownloader` uses a private image manager instance which completely surprised me. I think this behavior is pretty misleading; for instance if I want to clear the memory/disk cache, or print the disk cache size for diagnostics, I couldn't and most users probably wouldn't even know that there were two PINRemoteImageManager instances.
",Adlai-Holler,appleguy
1632,2016-05-07 05:17:14,"Thanks for keeping a close eye on this!

We recently made some pretty deep overhauls to PINRemoteImage, in order to add seamless support for Animated GIFs at both the image library and ASDK / UI component level.  I can definitely understand the issue you’re pointing out, and wish we caught it, but am glad you did for us.

These changes were done in a very compressed timeline, and overall I think they were very well architected (protocol setup to ensure that even ASDK can build without PINRemoteImage despite the tight GIF integration), including consideration of future animatable image formats / custom extensions for other image formats.  Nonetheless it is certainly worth another careful look through the cache paths to ensure nothing else was disrupted, but I suspect the fix will be pretty feasible.

@garrettmoon, definitely a good thing to have for 3.0 non-beta (as ASDK is pointing to the Beta right now, even in its production release).  I know it’s a tough time to pull aside cycles to spend on the release, but we should plan out what’s required for 3.0 in the next week and decide the timeline it should be done in (maybe end of month?)

> On May 6, 2016, at 10:00 PM, Adlai Holler notifications@github.com wrote:
> 
> In a recent update to PINRemoteImage, its memory cache went from storing UIImage instances to containers of NSData which are used to generate a UIImage instance on demand. Unfortunately, these UIImage instances show isEqual: NO compared to one another.
> 
> Since the images appear to be different, if you wire ASMultiplexImageNodeDataSource.imageForImageIdentifier up to synchronously retrieve an image from the PINRemoteImageManager instance, the image will change every time, which will call setNeedsDisplay, which will call displayWillStart, which will call fetchData, which will generate a new UIImage instance.
> 
> To break this cycle, this patch avoids requesting the image for an already-loaded image identifier from the multiplex node's data source. The only issue I can see with this is, if you load an image into a multiplex node and then manually set image on the multiplex image node (sidestepping the image loading mechanism), the node may continue using that image rather than attempting to refetch. It's not ideal, but I can't imagine a use case for that.
> 
> @garrettmoon https://github.com/garrettmoon @appleguy https://github.com/appleguy
> As a separate issue, ASPINRemoteImageDownloader uses a private image manager instance which completely surprised me. I think this behavior is pretty misleading; for instance if I want to clear the memory/disk cache, or print the disk cache size for diagnostics, I couldn't and most users probably wouldn't even know that there were two PINRemoteImageManager instances.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/1632 https://github.com/facebook/AsyncDisplayKit/pull/1632
> Commit Summary
> 
> [ASMultiplexImageNode] Do not request already-loaded images from data source to avoid loop
> File Changes
> 
> M AsyncDisplayKit/ASMultiplexImageNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1632/files#diff-0 (6)
> Patch Links:
> 
> https://github.com/facebook/AsyncDisplayKit/pull/1632.patch https://github.com/facebook/AsyncDisplayKit/pull/1632.patch
> https://github.com/facebook/AsyncDisplayKit/pull/1632.diff https://github.com/facebook/AsyncDisplayKit/pull/1632.diff
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1632
",appleguy,garrettmoon
1632,2016-05-07 05:17:14,"Thanks for keeping a close eye on this!

We recently made some pretty deep overhauls to PINRemoteImage, in order to add seamless support for Animated GIFs at both the image library and ASDK / UI component level.  I can definitely understand the issue you’re pointing out, and wish we caught it, but am glad you did for us.

These changes were done in a very compressed timeline, and overall I think they were very well architected (protocol setup to ensure that even ASDK can build without PINRemoteImage despite the tight GIF integration), including consideration of future animatable image formats / custom extensions for other image formats.  Nonetheless it is certainly worth another careful look through the cache paths to ensure nothing else was disrupted, but I suspect the fix will be pretty feasible.

@garrettmoon, definitely a good thing to have for 3.0 non-beta (as ASDK is pointing to the Beta right now, even in its production release).  I know it’s a tough time to pull aside cycles to spend on the release, but we should plan out what’s required for 3.0 in the next week and decide the timeline it should be done in (maybe end of month?)

> On May 6, 2016, at 10:00 PM, Adlai Holler notifications@github.com wrote:
> 
> In a recent update to PINRemoteImage, its memory cache went from storing UIImage instances to containers of NSData which are used to generate a UIImage instance on demand. Unfortunately, these UIImage instances show isEqual: NO compared to one another.
> 
> Since the images appear to be different, if you wire ASMultiplexImageNodeDataSource.imageForImageIdentifier up to synchronously retrieve an image from the PINRemoteImageManager instance, the image will change every time, which will call setNeedsDisplay, which will call displayWillStart, which will call fetchData, which will generate a new UIImage instance.
> 
> To break this cycle, this patch avoids requesting the image for an already-loaded image identifier from the multiplex node's data source. The only issue I can see with this is, if you load an image into a multiplex node and then manually set image on the multiplex image node (sidestepping the image loading mechanism), the node may continue using that image rather than attempting to refetch. It's not ideal, but I can't imagine a use case for that.
> 
> @garrettmoon https://github.com/garrettmoon @appleguy https://github.com/appleguy
> As a separate issue, ASPINRemoteImageDownloader uses a private image manager instance which completely surprised me. I think this behavior is pretty misleading; for instance if I want to clear the memory/disk cache, or print the disk cache size for diagnostics, I couldn't and most users probably wouldn't even know that there were two PINRemoteImageManager instances.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/1632 https://github.com/facebook/AsyncDisplayKit/pull/1632
> Commit Summary
> 
> [ASMultiplexImageNode] Do not request already-loaded images from data source to avoid loop
> File Changes
> 
> M AsyncDisplayKit/ASMultiplexImageNode.mm https://github.com/facebook/AsyncDisplayKit/pull/1632/files#diff-0 (6)
> Patch Links:
> 
> https://github.com/facebook/AsyncDisplayKit/pull/1632.patch https://github.com/facebook/AsyncDisplayKit/pull/1632.patch
> https://github.com/facebook/AsyncDisplayKit/pull/1632.diff https://github.com/facebook/AsyncDisplayKit/pull/1632.diff
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1632
",appleguy,appleguy
1631,2016-05-06 20:39:44,"ASDK version: 1.9.73 (May 4)

With both ASTableView and ASCollectionView, willBeginBatchFetchWithContext is being called right after viewDidAppear even without any input/touch.

Please, correct me if I'm wrong but this is not the same behaviour as version 1.9.7 and I think that batchFetch is not supposed to be called without a scroll event toward the end of the scrollview.

@appleguy could you please take a look at this? We are ready to release an app with 1.9.73, should I downgrade to 1.9.7 or wait for a fix? Thanks!
",jsspalding,appleguy
1631,2016-05-06 21:51:49,"This is actually intentional, provided that the end of the contentSize is within the number of screens for batch fetching.  The previous implementation did not handle a few important cases such as if the initially loaded content didn't have enough space to scroll, it would never load at all.

If you'd like the previous behavior, feel free to set the number to 0 and then make it the desired number of screens ahead for loading once you see the first scrollViewDidBeginScrolling:

If you notice a bug, such as the load being started even when you have a contentSize (determined by items in the data source) big enough to fill the number of screen dimensions below / to the right of the initial, definitely let us know those details and we will aim to fix in the upcoming 1.9.8 release.

Michael, is it possible that for some apps, the first layout batch size might not cover enough size and we trigger a load before allowing the layout batches to finish?  I assume this is fully handled already as I believe your code is using the completion event of all layout from the initial load finishing.

Sent from my iPhone

> On May 6, 2016, at 1:39 PM, Jonathas Spalding notifications@github.com wrote:
> 
> ASDK version: 1.9.73 (May 4)
> 
> With both ASTableView and ASCollectionView, willBeginBatchFetchWithContext is being called right after viewDidAppear even without any input/touch.
> 
> Please, correct me if I'm wrong but this is not the same behaviour as version 1.9.7 and I think it's not supposed to call beginFetch without a scroll event to the end of the scrollview.
> 
> @appleguy could you please take a look at this? We are ready to release an app with 1.9.73, should I downgrade to 1.9.7 or wait for a fix? Thanks!
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",appleguy,appleguy
1631,2016-05-06 22:08:48,"cc @maicki
",hannahmbanana,maicki
1631,2016-05-07 00:55:54,"@jsspalding: The documentation is a work-in-progress still, but much improved from before. 

You should also join our Slack Channel (see #1582). We answer questions even more quickly over there. :) 

I am not familiar with Swift, but yes, that does make sense. Perhaps you can translate / interpret from the Objective-C block for now? There should be a switch at the top of the code blocks on the website. 

@lappp9 - can you check if our documentation is incorrect here?
",hannahmbanana,lappp9
1631,2016-11-17 21:14:24,"To get a bit more information on this issue: We first need a reliable way from within `ASDataController` to be able to know when certain batch updates finished completely (so inserts / deletes / updates where performed) to be able to inform the delegate that it's time to perform a batch fetch.

@Adlai-Holler Any update on an API like that (""data controller did finish"" or something similar) or should we file a new issue specifically for that?

Will also move it to 2.1 for now.
",maicki,Adlai-Holler
1630,2016-05-05 23:52:07,"@appleguy @Xinchi Could you guys please look over the code
",maicki,appleguy
1630,2016-05-05 23:52:07,"@appleguy @Xinchi Could you guys please look over the code
",maicki,Xinchi
1629,2016-05-14 06:49:31,"@maicki take a review pass here if you get a chance as you know this code as well as anyone :)
",appleguy,maicki
1628,2016-05-17 17:43:34,"@tettoffensive , @maicki recently committed a fix to master for a regression in ASDataController which could conceivably be related.  I have not had chance to do a new release and am taking an international flight in the next 36hrs, so I might suggest you ship your next release with master (we do this as a matter of course with Pinterest, so it should be good enough :) — typically better than the last 'stable' release).

@maicki if you know of any blockers for me pushing 1.9.74, let me know, otherwise I'll try to do that tonight.
",appleguy,maicki
1624,2016-05-05 19:50:03,"@levi, @nguyenhuy, anyone else who could give this a review?  Happy to merge as soon as one person gives a close analysis.
",appleguy,levi
1624,2016-05-05 19:50:03,"@levi, @nguyenhuy, anyone else who could give this a review?  Happy to merge as soon as one person gives a close analysis.
",appleguy,nguyenhuy
1622,2016-05-04 18:57:22,"Currently in a race condition situation it can happen that subnodes get transition ids from supernodes where the supernodes transition id was reset but the subnode still has the old transition id value. This will trigger an exception although the assignment of the transition id is totally valid. This PR should address this by not reseting the transition id at all for a node and increase the transition id for new transitions.

cc @nguyenhuy @appleguy @levi
",maicki,nguyenhuy
1622,2016-05-04 18:57:22,"Currently in a race condition situation it can happen that subnodes get transition ids from supernodes where the supernodes transition id was reset but the subnode still has the old transition id value. This will trigger an exception although the assignment of the transition id is totally valid. This PR should address this by not reseting the transition id at all for a node and increase the transition id for new transitions.

cc @nguyenhuy @appleguy @levi
",maicki,appleguy
1622,2016-05-04 18:57:22,"Currently in a race condition situation it can happen that subnodes get transition ids from supernodes where the supernodes transition id was reset but the subnode still has the old transition id value. This will trigger an exception although the assignment of the transition id is totally valid. This PR should address this by not reseting the transition id at all for a node and increase the transition id for new transitions.

cc @nguyenhuy @appleguy @levi
",maicki,levi
1622,2016-05-06 03:31:43,"@appleguy @nguyenhuy Addressed comments from @nguyenhuy 
- Move from ASSentinel to atomic int
- Better return statement for ""_shouldAbortTransitionWithID""
",maicki,nguyenhuy
1622,2016-05-06 03:31:43,"@appleguy @nguyenhuy Addressed comments from @nguyenhuy 
- Move from ASSentinel to atomic int
- Better return statement for ""_shouldAbortTransitionWithID""
",maicki,appleguy
1619,2016-05-04 00:37:18,"@appleguy @nguyenhuy Thoughts?
",Adlai-Holler,nguyenhuy
1619,2016-05-04 00:37:18,"@appleguy @nguyenhuy Thoughts?
",Adlai-Holler,appleguy
1619,2016-05-04 03:53:56,"This is definitely a very sensitive to change, I'm also a very important one that we have been intending to make with high priority. As with several such things, no one has been available to work on it in the foreseeable future, so I appreciate you picking up!

I know that Michael Schneider is familiar with some of the timing considerations in this code, which are not intuitive and affect only certain editing patterns or situation such as memory warnings for freeing of memory upon suspend of the app. There're also a few special considerations with changing the range mode.

I will review this as soon as I can, but unfortunately this Will not be for at least a few days, and it would be helpful to see if anyone else in the community has initial feedback.

> On May 3, 2016, at 5:37 PM, Adlai Holler notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy @nguyenhuy https://github.com/nguyenhuy Thoughts?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1619#issuecomment-216710184
",appleguy,nguyenhuy
1619,2016-05-04 03:53:56,"This is definitely a very sensitive to change, I'm also a very important one that we have been intending to make with high priority. As with several such things, no one has been available to work on it in the foreseeable future, so I appreciate you picking up!

I know that Michael Schneider is familiar with some of the timing considerations in this code, which are not intuitive and affect only certain editing patterns or situation such as memory warnings for freeing of memory upon suspend of the app. There're also a few special considerations with changing the range mode.

I will review this as soon as I can, but unfortunately this Will not be for at least a few days, and it would be helpful to see if anyone else in the community has initial feedback.

> On May 3, 2016, at 5:37 PM, Adlai Holler notifications@github.com wrote:
> 
> @appleguy https://github.com/appleguy @nguyenhuy https://github.com/nguyenhuy Thoughts?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/pull/1619#issuecomment-216710184
",appleguy,appleguy
1619,2016-05-04 18:26:50,"OK understood. I definitely don't want to rush this through but I believe it's a critical stepping stone toward getting the best of both worlds with ASDK – guarantees about initial states + smooth lookahead/concurrent rendering.

@maicki If you've got bandwidth, let's work together on this. We'll iterate a little more before @appleguy jumps in.
",Adlai-Holler,maicki
1619,2016-05-14 06:51:54,"@maicki I know you have been _very_ busy, for good reasons, in **addition** to being overseas with family! :)  When you have another workday - Monday - let's prioritize getting a round of feedback to Adlai here.  I won't have time due to needing to begin packing for Vietnam, and you are by far the best person on the team to review this (I have a similar level of understanding of this code but don't want to block progress).  Let me know on iMessage if you have any questions or concerns and want to check if I have the same impression about how the existing code works.
",appleguy,maicki
1619,2016-05-20 20:08:36,"Great points @maicki! With them in mind, I'm thinking about how to improve this approach. I'm just going to store some thoughts here as I attack this.

### The Goal

We want to update the range controller **synchronously**, just **after** each **batch** of visible node changes is committed.
- _After_ because during `willDisplayCell:` the cell isn't quite setup for the new item (i.e. in the hierarchy, in the lookup tables, at the correct frame) yet, so unexpected behavior (like the indexPathForCell: failing) may occur if we pretend otherwise.
- _Synchronous_ because we want to guarantee that the range state is correct before the next frame is drawn.
- _Batch_ because it's potentially expensive to recalculate the ranges more than once per layout change. **Q** I haven't profiled this yet – it would be good to know the relative cost.

### How UITableView/UICollectionView Change Visible Index Paths

There are three reasons for a visible index paths change:
1. bounds change (scrolling, resizing). 
   - This case is pretty easy to cover. Table view and collection view always perform visible cell changes during `layoutSubviews`.
   - We can simply add a flag like `visibleIndexPathsDidChangeDuringLayoutSubviews`, and check it after `[super layoutSubviews]`.
   - If it's changed, then we tell the range controller to update.
2. A batch of editing operations that intersects the visible area.
3. A single editing operation that intersects the visible area.

### Our Hooks
- `willDisplayCell:` This is called just before a cell is assigned an index path and added into the view. Note that the cell may already be in the view (for some previous item) or it may not.
- `didEndDisplayingCell:` This is called just after a cell is unassigned its index path. Note that the cell may be removed from the view or it may not.
- `super layoutSubviews:` Useful override point.
- `super performBatchUpdates:` Useful override point. UICollectionView synchronously updates visible cells during this, including calls to `willDisplay:` and `didEndDisplaying:`
- `super insert/delete/move/reload:` We call these and I suspect **Q** that collection view & table view synchronously update the visible index paths if these are called outside a batch.

### Other Case: Update Animation End

When a table view (**Q** also collection view?) update animation ends, we may get a `didEndDisplayingCell:` call. This can't be predicted and it's not tied into the UIKit layout passes. Unfortunately, the only case where we get a update animation completion hook is in the UICollectionView batch update case. 

We could expand that hook to cover all updates, if we always wrap isolated update calls (e.g. `insertItemsAtIndexPaths:`) in batch updates but that still leaves us out in the cold for table view updates. As far as I know, there is no table view update animation completion hook.

I'm going to keep playing with this and mulling it over, because it's so valuable and yet so delicate. Feedback/thoughts much appreciated @maicki @appleguy @nguyenhuy 
",Adlai-Holler,nguyenhuy
1619,2016-06-20 18:50:56,"This PR got pretty huge =/. Here's what ended up happening:
- Remove `ASRangeController.scrollDirection` and replace with new data source method `scrollDirectionForRangeController:`
- ASRangeController now exposes 2 update methods `setNeedsUpdate` and `updateIfNeeded`
- setNeedsUpdate sets a flag and (if needed) enqueues an `updateIfNeeded` call onto the main queue
- updateIfNeeded clears the flag and performs the update
- Table and collection view call setNeedsUpdate in willDisplayCell:/didDisplayCell:
- Table and collection view call `updateIfNeeded` after `-layoutSubviews`, after submitting data update operations, and after update animations end (only supported for collection view.)
- Optimize `ASTableView.indexPathsForVisibleNodes:` significantly
- Add conditional code to ASRangeController to log frames that contain multiple range updates.
  - Currently during scrolling we never see this, but we sometimes see 2-5 updates during the same frame when update operations are occurring or when table/collections appear.
  - The code in `-[Collection/Table didMoveToWindow:]` needs scrutiny. Are both calls necessary?
- Move enforcement of cell node neverShowPlaceholders into the cell node's visibility callback, out from willDisplayCell:. This way `ensureDisplay` is called after the cell is already added to the hierarchy, and it also reduces class interdependency.

Notes:
- In -[ASCollectionView layoutSubviews] I had to gate the -updateIfNeeded behind `if (self.window != nil)`. If this isn't present, the client app crashes (~80% reliable) with a collection view data integrity problem under certain conditions. It's a very weird issue, I dug into it a little and bailed because we'll flush the range update in didMoveToWindow anyway.

Questions:
- ASRangeController has a `_rangeIsValid` flag that seems to trigger a re-evaluation of the range states of all nodes when the collection view data is updated. Is that correct? I'm thinking we rename it to avoid confusion between `_rangeIsValid` and the new `_needsRangeUpdate` flag.

This has been tested thoroughly but it's obviously a very significant change to very important code. Sorry for the burden, but I think it'll be worth it! Feel free to meet with me in person as needed. Need review @appleguy @maicki @nguyenhuy 
",Adlai-Holler,nguyenhuy
1619,2016-07-06 06:18:48,"@Adlai-Holler sorry I haven't been able to review this yet - if this is blocked on me, could you let me know & also send me a list of any other PRs that you'd say are blocked on me?

@eanagel has the background on the pending index path.  Unfortunately it was very necessary and we were able to prove that UITableView does not necessarily include information that we expected it should be guaranteed to.  I looked into the history around this in detail about a month ago, it can be found by seeking back through various PRs and related issues.  It would be fantastic to eliminate.

@eanagel if you have any mechanism for us to test that original issue - I think you had a test project, or at least ability to reproduce it in your app - that would help.  Running your app against this PR would in fact be of phenomenal value to the community.
",appleguy,eanagel
1614,2016-05-03 13:55:53,"cc @hannahmbanana 
",maicki,hannahmbanana
1612,2016-05-03 07:18:37,"Thanks for creating a reproduction case, that is tremendously helpful!  @garrettmoon, I know you have several urgent tasks on your plate this week, but could you investigate this next week or with a 1hr initial investigation this week?

> On May 2, 2016, at 11:51 PM, Pavel Gurov notifications@github.com wrote:
> 
> Just to make sure that it is an issue on my side, I created this sample project for you to check out.
> https://github.com/pashaisthebest/ASImageNodeTest https://github.com/pashaisthebest/ASImageNodeTest
> Reproduction steps are just like the steps that you can see in the video, that I posted earlier.
> The frame of the node is shown in green. I also noticed, that UIViewContentModeScaleAspectFill is just not working the way I expect it to for this image for example:
> 
> https://pp.vk.me/c627530/v627530193/3ddfb/tgKrnJGP51w.jpg https://pp.vk.me/c627530/v627530193/3ddfb/tgKrnJGP51w.jpg
> When I pull down the table I expect to see something like this:
> 
> But instead I get:
> 
> —
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub https://github.com/facebook/AsyncDisplayKit/issues/1612#issuecomment-216453023
",appleguy,garrettmoon
1611,2016-05-02 06:28:21,"@adamastern Thanks for the great report.  I think we should treat these nodes specially, doing something like an implied flexBasis of 1 / numberOfItems or some other mechanism for automatically constraining them in the infinite dimension.  Importantly, do you have any ideas for how the layout might be made valid in this case?

@nguyenhuy, @maicki how might we address this?  Is it tracked in whole or in part by a task in Ship, or related to any other planned changes?  It is possible that there is not actually a defined solution to this (I can't immediately think of one).
",appleguy,nguyenhuy
1611,2016-05-02 06:28:21,"@adamastern Thanks for the great report.  I think we should treat these nodes specially, doing something like an implied flexBasis of 1 / numberOfItems or some other mechanism for automatically constraining them in the infinite dimension.  Importantly, do you have any ideas for how the layout might be made valid in this case?

@nguyenhuy, @maicki how might we address this?  Is it tracked in whole or in part by a task in Ship, or related to any other planned changes?  It is possible that there is not actually a defined solution to this (I can't immediately think of one).
",appleguy,maicki
1609,2016-05-01 22:19:35,"@lappp9 we do have a Ship task filed to revisit ASDimension, as well as both sizeRange and preferredFrameSize, as blocking elements of 2.0.  The main problem is staffing, which we've needed to allocate to shorter term urgencies rather than these improvements (despite their very high importance and relatively modest scope).

cc @maicki, @nguyenhuy, @levi, @rcancro I think it is important for our work at Pinterest - and by extension, the entire community - to address this in the next few weeks.  It also affects the tutorial that @lappp9 is writing, and has held the launch of in order to wait for us to make these API revisions.
",appleguy,nguyenhuy
1609,2016-05-01 22:19:35,"@lappp9 we do have a Ship task filed to revisit ASDimension, as well as both sizeRange and preferredFrameSize, as blocking elements of 2.0.  The main problem is staffing, which we've needed to allocate to shorter term urgencies rather than these improvements (despite their very high importance and relatively modest scope).

cc @maicki, @nguyenhuy, @levi, @rcancro I think it is important for our work at Pinterest - and by extension, the entire community - to address this in the next few weeks.  It also affects the tutorial that @lappp9 is writing, and has held the launch of in order to wait for us to make these API revisions.
",appleguy,rcancro
1609,2016-05-01 22:19:35,"@lappp9 we do have a Ship task filed to revisit ASDimension, as well as both sizeRange and preferredFrameSize, as blocking elements of 2.0.  The main problem is staffing, which we've needed to allocate to shorter term urgencies rather than these improvements (despite their very high importance and relatively modest scope).

cc @maicki, @nguyenhuy, @levi, @rcancro I think it is important for our work at Pinterest - and by extension, the entire community - to address this in the next few weeks.  It also affects the tutorial that @lappp9 is writing, and has held the launch of in order to wait for us to make these API revisions.
",appleguy,maicki
1609,2016-05-01 22:19:35,"@lappp9 we do have a Ship task filed to revisit ASDimension, as well as both sizeRange and preferredFrameSize, as blocking elements of 2.0.  The main problem is staffing, which we've needed to allocate to shorter term urgencies rather than these improvements (despite their very high importance and relatively modest scope).

cc @maicki, @nguyenhuy, @levi, @rcancro I think it is important for our work at Pinterest - and by extension, the entire community - to address this in the next few weeks.  It also affects the tutorial that @lappp9 is writing, and has held the launch of in order to wait for us to make these API revisions.
",appleguy,levi
1609,2016-08-14 22:29:04,"@lappp9: @maicki is currently working creating a new & improved Layout API for the 2.0 release that was specifically designed to address the top 5 ""pain points"" of the current Layout API, one of which is the ASRelativeDimension confusion. :) 

I believe Michael is currently considering something similar to this line of thought. Once he has a PR up, I'm sure he'd appreciate your feedback. 
",hannahmbanana,maicki
1608,2016-05-01 13:13:46,"@Xinchi  did everything mentioned in your comments, thanks for review ! please take a look at delegate setter and getter, not sure if 100% correct
",Eke,Xinchi
1608,2016-05-02 15:59:26,"@Eke They look good to me! Thanks for fixing them! @appleguy is it possible to merge this pull request after your review?
",Xinchi,appleguy
1607,2016-04-29 01:27:21,"Following up with issue #1600, the following PR modifies `-fetchData` so that we can prepare an asset (HLS and non-HLS) for playback in a uniform way.

Namely:
1. Calls [`-loadValuesAsynchronouslyForKeys:completionHandler:`](https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAsynchronousKeyValueLoading_Protocol/index.html#//apple_ref/occ/intfm/AVAsynchronousKeyValueLoading/loadValuesAsynchronouslyForKeys:completionHandler:) in `-fetchData`.
2. Creates the `AVPlayerItem` and `AVPlayer` in `-prepareToPlayAsset:withKeys:`.
3. No longer extracts the URL from an AVAsset.

In doing so, the AVPlayer is not immediately available when `-fetchData` is called. Thanks and let me know your thoughts :)

@gazreese @ejensen 
",chourobin,ejensen
1607,2016-04-29 01:27:21,"Following up with issue #1600, the following PR modifies `-fetchData` so that we can prepare an asset (HLS and non-HLS) for playback in a uniform way.

Namely:
1. Calls [`-loadValuesAsynchronouslyForKeys:completionHandler:`](https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAsynchronousKeyValueLoading_Protocol/index.html#//apple_ref/occ/intfm/AVAsynchronousKeyValueLoading/loadValuesAsynchronouslyForKeys:completionHandler:) in `-fetchData`.
2. Creates the `AVPlayerItem` and `AVPlayer` in `-prepareToPlayAsset:withKeys:`.
3. No longer extracts the URL from an AVAsset.

In doing so, the AVPlayer is not immediately available when `-fetchData` is called. Thanks and let me know your thoughts :)

@gazreese @ejensen 
",chourobin,gazreese
1605,2016-04-29 05:03:38,"Thanks @lappp9 !  @maicki, @levi, @nguyenhuy I could use your help considering the API here.

We definitely need these call points.  Things like displayWillStart are not actually called for elements that don't have a literal display method, and something like -clearFetchedData doesn't feel parallel to -visibilityDidChange:.

That said, I'm not a fan of these particular names.  They seem a bit too long, at least the ""Range"" part should probably be removed as we plan to have ASViewController also have an independent ASInterfaceState, which might be in the fetch data state just by being one of the non-selected tabs of a tab bar controller (not a range exactly).

We should see if any names could be found that will allow the BOOL parameter to work, as it fully halves the number of strings that a developer needs to remember to use the API without looking at headers or reference.  ..., displayStateDidChange: is one candidate, not sure it's great though.
",appleguy,levi
1605,2016-04-29 05:03:38,"Thanks @lappp9 !  @maicki, @levi, @nguyenhuy I could use your help considering the API here.

We definitely need these call points.  Things like displayWillStart are not actually called for elements that don't have a literal display method, and something like -clearFetchedData doesn't feel parallel to -visibilityDidChange:.

That said, I'm not a fan of these particular names.  They seem a bit too long, at least the ""Range"" part should probably be removed as we plan to have ASViewController also have an independent ASInterfaceState, which might be in the fetch data state just by being one of the non-selected tabs of a tab bar controller (not a range exactly).

We should see if any names could be found that will allow the BOOL parameter to work, as it fully halves the number of strings that a developer needs to remember to use the API without looking at headers or reference.  ..., displayStateDidChange: is one candidate, not sure it's great though.
",appleguy,maicki
1605,2016-04-29 05:03:38,"Thanks @lappp9 !  @maicki, @levi, @nguyenhuy I could use your help considering the API here.

We definitely need these call points.  Things like displayWillStart are not actually called for elements that don't have a literal display method, and something like -clearFetchedData doesn't feel parallel to -visibilityDidChange:.

That said, I'm not a fan of these particular names.  They seem a bit too long, at least the ""Range"" part should probably be removed as we plan to have ASViewController also have an independent ASInterfaceState, which might be in the fetch data state just by being one of the non-selected tabs of a tab bar controller (not a range exactly).

We should see if any names could be found that will allow the BOOL parameter to work, as it fully halves the number of strings that a developer needs to remember to use the API without looking at headers or reference.  ..., displayStateDidChange: is one candidate, not sure it's great though.
",appleguy,nguyenhuy
1605,2016-05-03 01:59:08,"I guess we could actually rename it if we want, since the only other method people use today is -fetchData, which is replaced by this.

Is there anything besides ""fetch"" that could be used for this, maybe even one word?  I've used variants that are more network-focused but I want it to also encompass the idea of going to a database or disk cache.

cc @maicki  @garrettmoon, @levi  for API naming insights!
",appleguy,levi
1605,2016-05-03 01:59:08,"I guess we could actually rename it if we want, since the only other method people use today is -fetchData, which is replaced by this.

Is there anything besides ""fetch"" that could be used for this, maybe even one word?  I've used variants that are more network-focused but I want it to also encompass the idea of going to a database or disk cache.

cc @maicki  @garrettmoon, @levi  for API naming insights!
",appleguy,garrettmoon
1605,2016-05-03 01:59:08,"I guess we could actually rename it if we want, since the only other method people use today is -fetchData, which is replaced by this.

Is there anything besides ""fetch"" that could be used for this, maybe even one word?  I've used variants that are more network-focused but I want it to also encompass the idea of going to a database or disk cache.

cc @maicki  @garrettmoon, @levi  for API naming insights!
",appleguy,maicki
1605,2016-06-12 05:21:17,"@lappp9 thanks for making this!  @maicki @levi @Adlai-Holler @nguyenhuy @hannahmbanana - make sure you are familiar with these important new APIs, which supercede fetchData, clearFetchedData, clearContents, and visibilityDidChange:.  Please weigh in with any thoughts on naming improvements as they are currently free to change.  Note that previously an equivalent to displayStateDidChange:YES did not exist; displayWillStart is NOT a direct equivalent.  The :NO variant is equivalent to -clearContents, currently.

@hannahmbanana we need to update the documentation for this.
",appleguy,hannahmbanana
1605,2016-06-12 05:21:17,"@lappp9 thanks for making this!  @maicki @levi @Adlai-Holler @nguyenhuy @hannahmbanana - make sure you are familiar with these important new APIs, which supercede fetchData, clearFetchedData, clearContents, and visibilityDidChange:.  Please weigh in with any thoughts on naming improvements as they are currently free to change.  Note that previously an equivalent to displayStateDidChange:YES did not exist; displayWillStart is NOT a direct equivalent.  The :NO variant is equivalent to -clearContents, currently.

@hannahmbanana we need to update the documentation for this.
",appleguy,Adlai-Holler
1605,2016-06-12 05:21:17,"@lappp9 thanks for making this!  @maicki @levi @Adlai-Holler @nguyenhuy @hannahmbanana - make sure you are familiar with these important new APIs, which supercede fetchData, clearFetchedData, clearContents, and visibilityDidChange:.  Please weigh in with any thoughts on naming improvements as they are currently free to change.  Note that previously an equivalent to displayStateDidChange:YES did not exist; displayWillStart is NOT a direct equivalent.  The :NO variant is equivalent to -clearContents, currently.

@hannahmbanana we need to update the documentation for this.
",appleguy,nguyenhuy
1604,2016-04-28 06:11:36,"cc @rcancro 
",appleguy,rcancro
1603,2016-04-27 22:50:06,"@levi @appleguy Can I get a code review please
",maicki,levi
1603,2016-04-27 22:50:06,"@levi @appleguy Can I get a code review please
",maicki,appleguy
1603,2016-05-01 23:44:14,"cc @levi, let me know if you can't fit in this review on Monday - I'd also be personally interested to learn more about the code / challenge at hand to provide a good review, though also have other reviews to dig into.
",appleguy,levi
1600,2016-04-27 06:45:03,"I'm not sure whether this is a bug, but thought I'd raise it anyway for discussion with @appleguy.



In my original changes to add URL / HLS Video support to the ASVideoNode I had explicit construction from either a URL or an AVAsset. This was because during my testing I had problems with the AVPlayerItem if I tried to construct from an HLS AVURLAsset rather than constructing directly from the URL. I can't remember exactly what the problem was if I'm honest, but it seemed prudent to mirror the construction of the AVPlayerItem in the ASVideoNode interface as this was the underlying tech.

Since the original merge the API for ASVideoNode has been simplified to only take an AVAsset. I assume someone has run into similar problems I had however as looking at the code above the internals have been reverted to creating the AVPlayerItem directly from the URL, except this time the URL is extracted from the AVAsset and the player item is constructed without it.

What this does however is drop the use of the AVURLAsset that the user uses for construction without any warning. If the user constructed the video node with a normal AVAsset then after construction videoNode.playerItem.asset would be the same as videoNode.asset. If the user observed anything in the AVAsset before construction or accessed anything inside videoNode.asset everything would work.

Looking at it now however if the user constructs with an AVURLAsset the asset is dropped. I assume the AVPlayerItem makes a new asset if you construct with the raw URL, so videoNode.playerItem.asset would no longer be the same object as videoNode.asset.

The .asset property is also used throughout the class, i.e.



Looking at where this is called, you can see we're probably generating the placeholder image from the AVAsset that we're no longer using:



Like I say, I'm not sure this is even a bug but it just didn't look ideal so thought I'd raise it for discussion.
",gazreese,appleguy
1599,2016-04-27 05:43:42,"@ejensen now that I recall some of the issues we had with APIs as simple as .duration at Instagram, I believe I understand the severe impact of this issue and am fully supportive of this change.

However, can you please clarify if you're confident that this new implementation will address the behavior and that the check of the number of tracks originally intended to provide? I believe it related to HTTP live streaming.  cc @gazreese
",appleguy,gazreese
1595,2016-04-26 20:17:31,"Hello,
I have an issue while trying to make an ASTextNode accessible.
After doing both these lines:
self.textMessegeNode.accessibilityIdentifier = ""textNode""
self.textMessegeNode.isAccessibilityElement = true

The text node is still not accessible.

I did the same thing for an ASImageNode like so:
self.imageMessegeNode.accessibilityIdentifier = ""imageNode""
self.imageMessegeNode.isAccessibilityElement = true

And the image node is accessible.

I need the node to be accessible for UI testing, end to end testing, and for accessibility purposes.
Why is the ASTextNode not accessible, but the ASImageNode is?

Any help would be appreciated.

@appleguy I would greatly appreciate your input on this issue.

Thank you
",DavidSchechter,appleguy
1595,2016-04-27 05:44:41,"@DavidSchechter: ASTextNodes _should_ be accessible. Several of the framework developers have put a great deal of effort into integrating with accessibility APIs, even in seemingly impossible situations, such as when a node hierarchy has no views associated with it (layerBacked, or completely flattened rasterized hierarchy). Even in these cases, the current version of ASDK should provide granule, specific, sub-rectangles that may each have individual accessibility parameters. 

What version of ASDK are you using? Are you on the ASDK slack channel (#1582)? This is an area of  top focus right now, so it would be great if you could be in direct contact. 

@maicki: are you aware of any issues here? 
",hannahmbanana,maicki
1595,2016-04-28 17:12:46,"Hello,
I created a sample project that can be found here  - https://github.com/DavidSchechter/testAsyncAccesbility - where the issue can be reproduced.

After talking with @maicki on the Slack channel, we figured out that the following line creates issues with accessibility for ASTextNodes -
textMessegeNode.passthroughNonlinkTouches = true

After commenting that line out, the ASTextNode is accessible.

I Hope this helps out others in the future and that this issue can be fixed.

@maicki thanks again for all you help
",DavidSchechter,maicki
1595,2016-05-02 21:49:19,"@DavidSchechter thanks!!  We will take a look as soon as possible.  We're a few days behind on some key release stuff but should be able to circle back no later than next week.  cc @rahul-malik, @maicki 
",appleguy,maicki
1595,2016-05-02 21:49:19,"@DavidSchechter thanks!!  We will take a look as soon as possible.  We're a few days behind on some key release stuff but should be able to circle back no later than next week.  cc @rahul-malik, @maicki 
",appleguy,rahul-malik
1594,2016-05-07 08:45:22,"@klivin: Thanks for reporting this! Sorry for the delay in response. Are you a part of the ASDK Slack Channel (#1582)? We're usually able to respond on there within an hour or two. :)  

@appleguy: any ideas here? 
",hannahmbanana,appleguy
1592,2016-05-02 03:27:35,"@rcancro  Overall seems good to me. Just one thing I'm thinking about is that the naming of the ASDisplayTraits is a bit different as all the other states that we start with ""ASEnvironment..."" Just thinking if we should internally use ASEnvironmentDisplayTraitsState and for the public API we expose it as displayTraits as we already do?

 cc @appleguy
",maicki,appleguy
1592,2016-05-05 03:07:08,"@rcancro I am re-running, but I think this may be a real failure.  Probably worth opening the CarthageBuildTest to run it locally and see what the detailed failure is, and confirm the build server's result that before this change, it builds.  It is possible that there is a new problem in master that hasn't been noticed yet though, as we did just adopt a new PINRemoteImage which apparently has some issue with Carthage.  cc @garrettmoon 

▸ Building Sample/CarthageExample [Debug]
▸ Check Dependencies
▸ Compiling main.m
▸ Compiling AppDelegate.m
❌  /Users/travis/build/facebook/AsyncDisplayKit/examples/CarthageBuildTest/CarthageExample/AppDelegate.m:9:9: could not build module 'AsyncDisplayKit'
@import AsyncDisplayKit;
",appleguy,garrettmoon
1592,2016-05-05 03:09:23,"@rcancro @levi if ASDisplayTraits is directly analogous to UITraitCollection, can we call it ASTraitCollection instead?  I assume it will be a struct directly inside ASEnvironment struct.

Sincere apologies that I have not been able to review this yet.  I really badly want to, but haven't been able to reach the minimum sleep quota recently even without touching ASDK diffs in the last week :(.  Will plan to review on the plane on Friday or on return flight.
",appleguy,levi
1590,2016-04-25 20:18:12,"@garrettmoon @Adlai-Holler Can you take a looker over it. Thanks!
",maicki,garrettmoon
1590,2016-04-25 20:18:12,"@garrettmoon @Adlai-Holler Can you take a looker over it. Thanks!
",maicki,Adlai-Holler
1588,2016-04-25 16:04:08,"@nickvelloff: thanks for reviewing our new documentation! It is still a work in progress, so expect a few hiccups. :)

The sentence before the code looks correct. I could probably make it more clear that `initWithNode:` is the ASViewController's designated initializer. This is the strategy for using an ASCollectionNode with an ASViewController, but it is also possible to use an ASCollectionNode without managing it with an ASViewController. 

Is it an issue with the Swift code? I am not familiar with Swift syntax. cc: @lappp9
",hannahmbanana,lappp9
1588,2016-04-25 16:13:46,"@nickvelloff - happy to help, could you clarify your question?  The designated initializer for ASVC is initWithNode - the code you have looks largely correct, but I'm not sure how to call that initializer in Swift.  Wouldn't it be super.initWithNode(node: collectionNode) ?

cc @nguyenhuy, if you want to check my Swift here.

If you're not on our Slack yet, please join and we'd love to collaborate with you live!  Just email me at asyncdisplaykit@gmail.com - to request an invite.
",appleguy,nguyenhuy
1587,2016-04-29 05:06:38,"This is very exciting, can't wait to continue expanding this already-fantastic example app @maicki !  With @hannahmbanana 's ASDKgram, these two apps alone are now a new level of quality and utility in the examples.  We can really use this app in particular to provide copy-paste friendly sample code for people to grab and integrate into their first ASDK projects.
",appleguy,hannahmbanana
1586,2016-05-01 07:16:31,"@alexrmacleod haha, having seen those (very cleanly designed) screenshots, I'm definitely really engaged with helping you figure this out.  It reminds me more than a little of building a highly-optimized cell for Apple's Stocks.app, including the first predecessor design of view-based asynchronous rendering that I made for the chart rendering.  No other first-party app used a similar approach at least through 4.3, and I doubt afterwards :-P.  I'd love to see your app succeed technically and have insanely perfect performance.

However, I think the best way is to simply rebuild the swiping functionality, and we could put it in ASCellNode itself.  Honestly it should not be that hard to take an array of colors and strings for the button types revealed by the drag, right?  Do you have a video of interacting with a few examples of this component, maybe with 1, 2, 3 items etc?

The one problem is that I have a significant time crunch in the next few days.  Still, I could work with either you or someone else from the community to build it within a week (max 1 total day of work including API design and full implementation through testing).

I'm wondering if you would be able to send over the code, dropped into a duplicate of any project in Examples / (you can just do Cmd-D on any folder in examples, rename the folder, and delete any code not necessary to get up and running one ASCellNode in a similar environment to your app where we could test dragging to reveal the menu).

If this sounds OK, you could cut out any data model and any other part of the app, just hardcoding some string values.  If you feel motivated, it would be better to have it as a table with 100-200 items, maybe repeating ~10 stock infos of varying lengths, character sets, etc.  Then I could profile it and make sure scrolling is optimized.

Then, it'd be up to you, but this would actually make a sweet app for examples/ .  Or I can keep the code completely confidential and delete it after our work.

Make sure to ping @maicki, @hannahmbanana and myself for any questions on Slack.  I don't think there's a great route to use MGSwipeTableCell and make very direct use of ASDK though.
",appleguy,maicki
1586,2016-05-01 15:27:18,"**Do you have a video of interacting with a few examples of this component, maybe with 1, 2, 3 items etc?**

@appleguy, @maicki, @hannahmbanana I don’t have a video but I made a gif below. Take note of how when the buttons are exposed on one TableViewCell, you can swipe another TableViewCell and the original TableViewCell with the buttons exposed closes automatically. The same goes for vertical swiping on the UITableView. If there is a button exposed on a swiped TableViewCell the user can still interact with the UITableView by swiping vertically, and the swiped TableViewCell closes automagically.    

![ascellnode and beyond](https://cloud.githubusercontent.com/assets/7895493/14941787/26bfa254-0fdb-11e6-8bac-fe1312368366.gif)

Also in this [link](https://github.com/MortimerGoro/MGSwipeTableCell) there are more gifs showing what the swipe gestures could look like. I really like the Border transition, Static transition and Drag transition.

**(you can just do Cmd-D on any folder in examples, rename the folder, and delete any code not necessary to get up and running one ASCellNode in a similar environment to your app where we could test dragging to reveal the menu).**

Will this do? 
[Swift.zip](https://github.com/facebook/AsyncDisplayKit/files/244185/Swift.zip)

**Then, it'd be up to you, but this would actually make a sweet app for examples/ . Or I can keep the code completely confidential and delete it after our work.**

Lets make a sample app, if you can get this working the AsyncDisplayKit community is going to need a sample to play around with. Willing to help where I can.

I watched your asyncDisplayKit talks on youtube and remembered you saying you built the apple stock app. One of my favourite apps and hands down the best stock charts i’ve seen in iOS, simple, fast and easy on the eyes! 🙌 

Would you be willing to help out and implement a simple variation of the apple stock app UIPageViewController that swipes between company fundamentals and the chart - which works inside the header of an ASTableVIew? 
",alexrmacleod,maicki
1584,2016-04-22 23:08:14,"`waitUntilAllUpdatesAreCommitted` is great! Could we go even further and make a variant that waits until the initial nodes are all measured and inserted as well?

I've got a pager node with 3 tabs, and I'd like to push a VC already jumped to the third tab, but I can't. I add `waitUntilAllUpdatedAreCommitted` in `viewWillAppear` and it has no effect, because `_editingTransactionQueue` is empty but numberOfSections is 0. `viewDidLayoutSubviews` is no help either because my view controller's view is a container that holds the pager inside it. Currently my best option is to async out of `viewWillAppear:` and hope that by then the nodes are ready, else to poll repeatedly and jump as soon as I see `numberOfItemsInSection:` is correct but these aren't ideal.

@nguyenhuy Any advice?
",Adlai-Holler,nguyenhuy
1581,2016-04-22 02:26:33,"Hmm, we need to figure out how to make sure the example apps are getting the latest PINRemoteImage...@garrettmoon, any ideas?

/Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKit/Details/ASPINRemoteImageDownloader.m:177:44: error: property 'renderedImageQuality' not found on object of type 'PINRemoteImageManagerResult *'
        progressBlock(result.image, result.renderedImageQuality, result.UUID);
",appleguy,garrettmoon
1581,2016-04-24 06:29:53,"@wendylu I had to take another diff that went up before this one, and touched the same files - unfortunately it created some conflicts.  I'm not expecting much other work landing here, so rebase when you're ready.

@garrettmoon, without more than half a day or so, is it possible to create a PINRemoteImage release branch with the necessary support, while hiding or +Beta'ing the API changes you'd like to hold back?  I wasn't aware that the GIF support in ASDK isn't usable without engineers knowing about the special branch to point to.  If this isn't feasible, I suppose we need to comment above the APIs in ASDK / rename the category AnimatedImageBeta, and a comment pointing people to the branch would also be reasonable.
",appleguy,garrettmoon
1577,2016-04-23 02:22:03,"@Adlai-Holler thanks for your efforts here even when you're so short on time!

@maicki could you file a followup / cleanup task, in Ship, Priority 2 for 2.0, and link to this?
",appleguy,maicki
1575,2016-04-21 08:35:04,"@appleguy Here are my improvements based upon your comments. Feels a lot better now.
",aaronschubert0,appleguy
1571,2016-04-20 20:13:02,"@appleguy Addressed your comments
",maicki,appleguy
1569,2016-04-20 15:06:27,"I have a ASViewController with ASTableNode, when navigating back to previous controller the app crashes.
![screen shot 2016-04-20 at 9 47 16 am](https://cloud.githubusercontent.com/assets/103670/14679405/19fc9674-06f0-11e6-97fd-7df76cdf14ba.png)

Here is a sample project:
https://github.com/hebertialmeida/ASDKCrash

Open the project > Tap on Settings > Back to profile and Crash.

Any help would be nice.

---

**Update:** @maicki Found that the problem is related to `ASViewController`.

---

**Update2:** The problem only happen when the ASTableNode is defined with Style Grouped `ASTableNode(style: .Grouped)`, probably not related to `ASViewController`.
",hebertialmeida,maicki
1554,2016-04-19 18:45:25,"@appleguy @maicki - can you comment on the main thread node initialization? Would this be something useful to have on the website?
",hannahmbanana,appleguy
1554,2016-04-19 18:45:25,"@appleguy @maicki - can you comment on the main thread node initialization? Would this be something useful to have on the website?
",hannahmbanana,maicki
1552,2016-04-19 04:00:34,"@chourobin thanks for this, I really appreciate putting up the minimal fix for now. It seems like a good approach to me, as this issue seems more like a strange idiosyncrasy of Apple's implementation than an intentional or beneficial API design.

What is on is that in one of the test project where we use hey streaming URL, it did work after my change. Maybe the URL is not a completely rigorous test because it is not a true live stream, rather a streaming playback of recorded content.

cc @lappp9, @gazreese, @yunnan-wu, @ejensen 
",appleguy,gazreese
1552,2016-04-19 04:00:34,"@chourobin thanks for this, I really appreciate putting up the minimal fix for now. It seems like a good approach to me, as this issue seems more like a strange idiosyncrasy of Apple's implementation than an intentional or beneficial API design.

What is on is that in one of the test project where we use hey streaming URL, it did work after my change. Maybe the URL is not a completely rigorous test because it is not a true live stream, rather a streaming playback of recorded content.

cc @lappp9, @gazreese, @yunnan-wu, @ejensen 
",appleguy,ejensen
1552,2016-04-19 04:00:34,"@chourobin thanks for this, I really appreciate putting up the minimal fix for now. It seems like a good approach to me, as this issue seems more like a strange idiosyncrasy of Apple's implementation than an intentional or beneficial API design.

What is on is that in one of the test project where we use hey streaming URL, it did work after my change. Maybe the URL is not a completely rigorous test because it is not a true live stream, rather a streaming playback of recorded content.

cc @lappp9, @gazreese, @yunnan-wu, @ejensen 
",appleguy,lappp9
1550,2016-04-18 21:40:04,"The issue was: The left operand of '>=' is a garbage value in else if check for lengths[i+1][j] ... I had to rewrite the algorithm to quiet the static analyzer.

I also added a couple of tests for _asdk_commonIndexesWithArray:

@levi @appleguy Could you guys take a look over it please.
",maicki,levi
1550,2016-04-18 21:40:04,"The issue was: The left operand of '>=' is a garbage value in else if check for lengths[i+1][j] ... I had to rewrite the algorithm to quiet the static analyzer.

I also added a couple of tests for _asdk_commonIndexesWithArray:

@levi @appleguy Could you guys take a look over it please.
",maicki,appleguy
1548,2016-04-19 05:11:58,"Thanks @lappp9 !  I can hardly express my gratitude for your work on the site and guides.  @RCacheaux, @hannahmbanana it has been on my mind for literally years and is more of a dream come true for me than you might expect, to have proactive and detailed support on this.  Keep pinging me if I can help! :)
",appleguy,RCacheaux
1548,2016-04-19 05:11:58,"Thanks @lappp9 !  I can hardly express my gratitude for your work on the site and guides.  @RCacheaux, @hannahmbanana it has been on my mind for literally years and is more of a dream come true for me than you might expect, to have proactive and detailed support on this.  Keep pinging me if I can help! :)
",appleguy,hannahmbanana
1545,2016-04-18 03:15:26,"FYI @gazreese, @yunnan-wu, @lappp9, @ekurutepe
",appleguy,ekurutepe
1545,2016-04-18 03:15:26,"FYI @gazreese, @yunnan-wu, @lappp9, @ekurutepe
",appleguy,gazreese
1545,2016-04-18 03:15:26,"FYI @gazreese, @yunnan-wu, @lappp9, @ekurutepe
",appleguy,lappp9
1544,2016-04-18 02:25:04,"@lappp9 @appleguy - We don't need the _site/\* files for the website to work, since it appears that GitHub Pages automatically generates the site from our source code. The _site folder is generated when running it locally with Jekyll. We should remove this from the _site folder from the current repository as well. 

Also, we have a docs folder under ASDK master (not updated in 2 years) which duplicates everything in gh-pages. Can we get rid of that @appleguy?
",hannahmbanana,appleguy
1543,2016-04-16 12:28:43,"@hannahmbanana @appleguy @garrettmoon 

Thanks for waiting a bit longer while I spent a deeper time looking at this issue. Apologies @hannahmbanana after re-reading your implementation another time it's clear that the issue would be fixed your way also.

However upon reproducing your initial crash (I created a sample project with your example code) and walking through the code, I realised that this assert is no longer needed and is actually a misguiding assert, YES - `self.calculatedSize` may be zero _but_ this is actually ok. This is because previously we used to set `self.options.size` to `self.calculatedSize` without any check but this is now in place L:127 & L:281 so this assert is no longer needed. I'm confident that this will solve your issue but please put it to test fully and let me know of your results.
",aaronschubert0,garrettmoon
1543,2016-04-16 12:28:43,"@hannahmbanana @appleguy @garrettmoon 

Thanks for waiting a bit longer while I spent a deeper time looking at this issue. Apologies @hannahmbanana after re-reading your implementation another time it's clear that the issue would be fixed your way also.

However upon reproducing your initial crash (I created a sample project with your example code) and walking through the code, I realised that this assert is no longer needed and is actually a misguiding assert, YES - `self.calculatedSize` may be zero _but_ this is actually ok. This is because previously we used to set `self.options.size` to `self.calculatedSize` without any check but this is now in place L:127 & L:281 so this assert is no longer needed. I'm confident that this will solve your issue but please put it to test fully and let me know of your results.
",aaronschubert0,appleguy
1543,2016-04-16 12:28:43,"@hannahmbanana @appleguy @garrettmoon 

Thanks for waiting a bit longer while I spent a deeper time looking at this issue. Apologies @hannahmbanana after re-reading your implementation another time it's clear that the issue would be fixed your way also.

However upon reproducing your initial crash (I created a sample project with your example code) and walking through the code, I realised that this assert is no longer needed and is actually a misguiding assert, YES - `self.calculatedSize` may be zero _but_ this is actually ok. This is because previously we used to set `self.options.size` to `self.calculatedSize` without any check but this is now in place L:127 & L:281 so this assert is no longer needed. I'm confident that this will solve your issue but please put it to test fully and let me know of your results.
",aaronschubert0,hannahmbanana
1543,2016-04-16 22:41:25,"@aaronschubert0 I'm pretty sure this was added recently, as @Adlai-Holler discovered that MapKit will internally crash if provided a zero size options.    If it was not this particular assertion, there were other changes intended to protect against zero sized snapshots that are definitely still required. 

I'm not understanding  how this would fix the issue Hannah ran into, though.  If the options has never been set to a non-zero size, and setAnnotations: is called (eg before the view is created, and before layout), we trigger a snapshot.  And it will be zero sized.

How does this address that issue?
",appleguy,Adlai-Holler
1543,2016-04-17 08:10:08,"Hey @appleguy, I actually added that assert in when I first implemented ASMapNode and the reason was to combat options.size being set to zero. That's why I can be so certain that we can remove this. Since following the changes that @Adlai-Holler made, there are no code paths possible where options.size can be set to zero (and it's set to 256x256 from MapKit by default)

Hannah's issue wasn't that options.size was zero sized. It was that her code hit this false assert, options.size was never set to zero. If Hannah tries out this fix then I'm certain her issue will be resolved. 

I also made a sample project based upon Hannah's example code that I can post if you want to look at that before Hannah gets a chance to try out this fix. 
",aaronschubert0,Adlai-Holler
1538,2016-04-16 23:54:45,"lol!  @Adlai-Holler did this get stripped out with your epic thread infinity patch?
",appleguy,Adlai-Holler
1535,2016-04-15 16:52:06,"AVPlayer may stall if buffer runs empty. But it does not resume automatically. This fixes that. 

@appleguy 
",yunnan-wu,appleguy
1534,2016-04-15 06:13:52,"@maicki @aaronschubert0 - could you help review? 

`.setAnnotations` in the `init:` of an ASCellNode was triggering takeSnapshot before layout. 

![screen shot 2016-04-14 at 10 20 45 pm](https://cloud.githubusercontent.com/assets/3419380/14552837/7f180c7c-0296-11e6-8d61-69aeda6c197f.png)

![screen shot 2016-04-14 at 10 20 58 pm](https://cloud.githubusercontent.com/assets/3419380/14552838/843428ee-0296-11e6-9fd0-5b19c22065e2.png)
",hannahmbanana,aaronschubert0
1534,2016-04-15 06:13:52,"@maicki @aaronschubert0 - could you help review? 

`.setAnnotations` in the `init:` of an ASCellNode was triggering takeSnapshot before layout. 

![screen shot 2016-04-14 at 10 20 45 pm](https://cloud.githubusercontent.com/assets/3419380/14552837/7f180c7c-0296-11e6-8d61-69aeda6c197f.png)

![screen shot 2016-04-14 at 10 20 58 pm](https://cloud.githubusercontent.com/assets/3419380/14552838/843428ee-0296-11e6-9fd0-5b19c22065e2.png)
",hannahmbanana,maicki
1527,2016-04-15 16:01:04,"@rcancro @garrettmoon Can you guys take another look over this please
",maicki,rcancro
1527,2016-04-15 16:59:05,"@garrettmoon @rcancro Good for review again. I created a helper function now that does not lock and this can be used if already in a locked state.
",maicki,rcancro
1527,2016-04-15 17:53:51,"@garrettmoon rectsForTextRange works the same way as before now, it just calls the unlocked version of the method.

@rcancro Currently the unlocked version is not exposed and can just be used within the method were it is defined. I hope the comment at the top makes it clear or is enough that developers don't use it without locking.

@appleguy Can you please review now
",maicki,appleguy
1526,2016-04-20 02:40:56,"@Adlai-Holler Thanks!  I'd be happy to merge this if you can fix the conflict.

@garrettmoon, could you review this and take mental note of the other issues mentioned?  If you have enough context to tackle any of them easily, I'm sure it would be appreciated - although I know we won't invest much work in Multiplex as we don't use it at Pinterest and there are few clients.  You might want to sync with Adlai about how Photos.framework can be most easily supported in Network without adding much complexity.
",appleguy,garrettmoon
1526,2016-04-22 18:14:09,"@garrettmoon @appleguy Thanks for the feedback guys! I think this one's ready for love. I tested it pretty thorough with Tripstr.
",Adlai-Holler,garrettmoon
1519,2016-04-21 19:44:41,"I have the same issue to when try to submit the app I'm working on to the App store.
@appleguy what are your thought on this matter?
",DavidSchechter,appleguy
1519,2016-04-22 08:11:15,"I quite frankly don't understand why everybody blames this issue on CocoaPods!

I might be wrong but look at AsyncDisplayKit's latest PodSpec, released by the one and only @appleguy 

https://github.com/CocoaPods/Specs/blob/master/Specs/AsyncDisplayKit/1.9.7.2/AsyncDisplayKit.podspec.json

The version clearly in the spec says 1.9.7.2 and is 4 slices therefore is rejected by Apple. A valid version number is 3 slices only.

This issue is not in any ways related to CocoaPods or use_frameworks. Someone has to fix the version number of the Podspec please.
",vandadschibsted,appleguy
1519,2016-04-26 02:37:22,"@yury @smyrgl @DavidSchechter @vandadschibsted @aaronschubert0 

Hey everyone, thanks for your patience here.  Initially we had only one report of this.  Then weeks later, a second report.  Only now is it clear that this is affecting a lot of people.  Most developers I've worked directly with are using the static library because of its superior performance, so I didn't realize the impact of this.

I would consider it a Cocoapods issue insofar as 1) Cocoapods permits these version numbers with no warning, and they do not cause an issue for static libraries, 2) This issue does not affect Carthage users, to my knowledge, 3) Cocoapods could easily overwrite the framework version in the metadata with any value they want, as it is not used at that stage, especially for 4-digit version numbers that their stack accepts as valid pod versions.

That said, we will push a new version of the framework in the next day or two.  @maicki and I are getting ready for this unplanned release.  We will need to distort the version numbering scheme and use something like 1.9.73 as we have a large amount of material tracked under the 1.9.8, etc releases and GitHub provides no batch editing functionality.  So we will release that as 1.9.80.  Once 2.0 is released, we will resume a strictly 3-number versioning scheme and eliminate the two-digit minor version.  Let me know if you have any better ideas, but this seems like a relatively low-cost fix (annoying, but I think it is less annoying than changing all our release tracking documents and running into 1.9.10)
",appleguy,maicki
1515,2016-04-12 07:03:03,"@smyrgl thanks for the report - this is no doubt caused by the large recent change to this code, which we have an improvement for coming tomorrow.  However, I wasn't aware it was causing any bugs, so I will bump 1.9.7.2 to a version that doesn't include this commit.  You can rely on that for the time being.

cc @maicki 
",appleguy,maicki
1515,2016-04-12 19:21:53,"Ok so @maicki and I discussed this and I think we may want to hold off reverting this.  Yes this change causes a break with existing behavior but @maicki has sound reasoning for this change and I agree with the logic.  I would hold off on merging this in master until we've had a chance to explore it a bit further.
",smyrgl,maicki
1515,2016-04-20 04:36:13,"It looks like this was comprehensively addressed. Great opportunity to close out this issue, thank you for making it possible @maicki !
",appleguy,maicki
1512,2016-04-12 07:35:12,"@tomizimobile I was able to reproduce by typing, but I cannot get to the screenshot you are showing that has a back button.  Tapping the cells does nothing...

It would be much easier to debug with a one-shot reproduction like you describe, any tips?  cc @maicki FYI
",appleguy,maicki
1503,2016-04-10 08:19:38,"This is extremely exciting! It is literally the first material site update since the project launched, around 2 years ago.

Thank you, also to @hannahmbanana for working on much of the content included here and @lappp9 for going above and beyond running the tutorials to also update the site architecture!
",appleguy,hannahmbanana
1500,2016-04-10 05:16:41,"@lappp9 , @hannahmbanana 
",appleguy,hannahmbanana
1500,2016-04-10 05:16:41,"@lappp9 , @hannahmbanana 
",appleguy,lappp9
1496,2016-04-08 21:09:01,"~~1. Corrects map between `AVLayerVideoGravityResize` and its corresponding `UIViewContentMode` (`ScaleToFill` instead of `Redraw`).~~ https://github.com/facebook/AsyncDisplayKit/pull/1549
~~2. Changing gravity now updates the placeholder node's `contentMode`.~~ https://github.com/facebook/AsyncDisplayKit/pull/1549
~~3. Switching assets now updates the placeholder image.~~ https://github.com/facebook/AsyncDisplayKit/pull/1553
~~4. Placeholder image is now cleared in `clearFetchedData` ([prevents runaway memory usage](https://s3.amazonaws.com/f.cl.ly/items/3i1b3o2G3o1D1u2Y091c/before_after.png)).~~ https://github.com/facebook/AsyncDisplayKit/pull/1553
~~5. Replacing the `playButton` now cleans-up the previous button's state.~~ https://github.com/facebook/AsyncDisplayKit/pull/1549
~~6. `_player` layer is now created in 1 place instead of 4.~~ https://github.com/facebook/AsyncDisplayKit/pull/1553
~~7. Simplified visibility state change handling.~~ https://github.com/facebook/AsyncDisplayKit/pull/1553
~~8. Fix video stalling caused by backgrounding & foregrounding the app.~~ https://github.com/facebook/AsyncDisplayKit/pull/1549

I'd appreciate an second set of eyes particularly on 6-7. I found it difficult to follow all the cases in the previous code. So I very well might have missed some corner cases. cc. @lappp9

I'd also appreciate any feedback on the best approach to make placeholder image generation more flexible. I'd like to make a way (in a future PR) for ASDK consumers to provide placeholder images if `AVAssetImageGenerator` is not the best option for their use case.
",ejensen,lappp9
1496,2016-04-09 23:08:49,"cc @ekurutepe
",appleguy,ekurutepe
1493,2016-06-26 19:08:23,"@ankorko: @Adlai-Holler found a similar crash by building a comprehensive thrash tester and it is believed to be fixed by PR #1812. Could you try this out and let Adlai know if you have any further issues? 
",appleguy,Adlai-Holler
1493,2016-06-30 11:57:47,"@appleguy @Adlai-Holler thanks for looking into this. I have installed ASDK from the commit of the PR being merged and I still got the same error. Here is a stack trace

[bt_all.txt](https://github.com/facebook/AsyncDisplayKit/files/341344/bt_all.txt)
",ankorko,Adlai-Holler
1491,2016-04-08 04:00:21,"Sure, no problem. In this example I'm prepending the total number of items at the time they were created to the the text in each cell so that you can see when and where the cells are loaded for each fetch. 

Here you can see the content offset working as expected. The batch fetch happens while scrolling up,  adds data to the head, content is loaded in the bg, etc. 
http://i.imgur.com/kJOdLo4.gifv

In this example I hit the top of the list while it is still fetching. Content gets loaded at the head, but the tableview jumps to the top of the list. 
http://i.imgur.com/13cpy7s.gifv

cc @appleguy 
",atainter,appleguy
1490,2016-04-07 23:37:53,"Hello,
I found issues number #11 and #1017, but I need more clarification on this issue.
I want to be able to detect long presses on a ASCellNode (or ASTextNode) and when one does occur I want to open a UIMenuController.
I found a way doing it in the following manner:
override public func didLoad() {
        super.didLoad()
        let longPressRecognizer = UILongPressGestureRecognizer(target: self, action: Selector(""longPressHappened:""))
        view.addGestureRecognizer(longPressRecognizer)
    }

longPressHappened will open the UIMenuController and by overriding these methods I will close it:

override public func touchesBegan(touches: Set<NSObject>!, withEvent event: UIEvent!) 
override public func touchesEnded(touches: Set<NSObject>!, withEvent event: UIEvent!) 
override public func touchesCancelled(touches: Set<NSObject>!, withEvent event: UIEvent!) 

However, this does not seem as the best approach.

I saw the @appleguy said in issue #1017 the following  - ""I think it is possible to hook up the UIMenuController, though it is not very flexible and so there was some discussion about whether it would be best to build a custom callout bubble (that style of button selector)"" - what is a custom callout bubble? what is style button selector?

Any help with this issue would be appreciated.

Thank you,
David
",DavidSchechter,appleguy
1489,2016-04-19 23:54:53,"@Eke I finally got back to this - gosh there were so many ASVideoNode PRs recently, and so many conflicts!  Very exciting and good though, now most are closed and things are more calm :).

@ejensen, @yunnan-wu, @maicki could you weigh in here with any thoughts on the API improvement?  Any concerns with landing this?  It looks pretty good to me, but I also don't extensively use video node.  In the worst case I think we could add an ASVideoNode+Beta.h and expose this there.  But ideally we can commit to a public API direction to allow developers to support building a play head / track that moves as the video plays.
",appleguy,maicki
1489,2016-04-19 23:54:53,"@Eke I finally got back to this - gosh there were so many ASVideoNode PRs recently, and so many conflicts!  Very exciting and good though, now most are closed and things are more calm :).

@ejensen, @yunnan-wu, @maicki could you weigh in here with any thoughts on the API improvement?  Any concerns with landing this?  It looks pretty good to me, but I also don't extensively use video node.  In the worst case I think we could add an ASVideoNode+Beta.h and expose this there.  But ideally we can commit to a public API direction to allow developers to support building a play head / track that moves as the video plays.
",appleguy,ejensen
1485,2016-04-12 22:16:11,"Reviewed and looks great to me. @appleguy?
",levi,appleguy
1480,2016-04-05 23:44:16,"It seems like this is related how images are created (I guess in PINRemoteImage), but seems like it can be ignored based on an Apple Engineer entry in this Apple Developers Forum's thread https://forums.developer.apple.com/thread/21723: 

> this is a harmless message that can be ignored.

Still not optimal if you see a glitch as this is happening ...

cc @appleguy @garrettmoon 
",maicki,garrettmoon
1480,2016-04-05 23:44:16,"It seems like this is related how images are created (I guess in PINRemoteImage), but seems like it can be ignored based on an Apple Engineer entry in this Apple Developers Forum's thread https://forums.developer.apple.com/thread/21723: 

> this is a harmless message that can be ignored.

Still not optimal if you see a glitch as this is happening ...

cc @appleguy @garrettmoon 
",maicki,appleguy
1476,2016-04-07 17:56:02,"@appleguy @rahul-malik Can you take another look over the pull request please
",maicki,appleguy
1476,2016-04-07 17:56:02,"@appleguy @rahul-malik Can you take another look over the pull request please
",maicki,rahul-malik
1476,2016-04-08 17:11:09,"@rahul-malik @appleguy Ready for another review
",maicki,appleguy
1474,2016-04-06 05:03:28,"@aaronschubert0 not urgent, but if you circle back to this code at some point, it might be worth adding a comment about the fact that ideally we could clear out the options if the size gets set to zero. One good way to implement this might be to set aside the options object given a new instance variable, and if the size is later setback to a nonzero value, reuse the old options object to maintain the other settings it has.

@Adlai-Holler thank you for this fix, I know your schedule is extremely tight right now and so I really value your contributions.
",appleguy,aaronschubert0
1468,2016-04-04 01:04:05,"@klivin @MarvinNazari @lappp9 thanks for the report and workaround! Does anyone have time to create a small PR to address the bug?
",appleguy,lappp9
1468,2016-04-04 03:26:17,"Yeah I can look at it tonight or tomorrow!
On Sun, Apr 3, 2016 at 8:04 PM appleguy notifications@github.com wrote:

> @klivin https://github.com/klivin @MarvinNazari
> https://github.com/MarvinNazari @lappp9 https://github.com/lappp9
> thanks for the report and workaround! Does anyone have time to create a
> small PR to address the bug?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/issues/1468#issuecomment-205092619
",lappp9,lappp9
1464,2016-03-31 11:18:55,"When @appleguy asked me to check out `PINRemoteImage` in #1447 I understood that ASDK integrates with PINRemoteImage via a cache/downloader class called `ASPINRemoteImageDownloader`.

If you use Cocoapods, the `PIN_REMOTE_IMAGE` preprocessor flag does all the magic and things get compiled in the way that you'd expect. You get a tight integration.

However, when using Carthage you must include PINRemoteImage as a completely separate dependency to AsyncDisplayKit (by design).  Further, `ASPINRemoteImageDownloader.h` is not exposed as a public header, which means you can't just go `#import <AsyncDisplayKit/ASPINRemoteImageDownloader.h>` — the file won't be found.

So the only way to access `ASPINRemoteImageDownloader` at all is to copy its source code straight into your project, which would be managed separately from ASDK. Even then, you need to remove the PIN_REMOTE_IMAGE #if macros and fix some imports if you want it to compile.

This is the best solution right now and I can't help but think it should be handled better somehow.

I think a bit of documentation would be nice, because `ASBasicDownloader/Cache` is really not a sensible option for most apps.
",fatuhoku,appleguy
1462,2016-05-10 21:13:51,"@rcancro has a more complete implementation up.
",levi,rcancro
1460,2016-03-31 05:49:35,"@aphylotus this use case is definitely not too strange, and I greatly appreciate the level of detail you were able to include in your report. The way this particular system is implemented is not up to the standard of the rest of the framework, but fortunately it should be pretty easy to improve and address this issue now that you have done the hard work of identifying it.

This will be a priority for the next release. as long as we can reproduce (necessary to be able to test).  If you have the time to do so, it would be helpful to try reproducing this in one of the many apps like examples/ASCollectionView that support pushing additional controllers to test lifecycle things such as this.  But we will investigate either way.

cc @nguyenhuy, @maicki 
",appleguy,nguyenhuy
1460,2016-03-31 05:49:35,"@aphylotus this use case is definitely not too strange, and I greatly appreciate the level of detail you were able to include in your report. The way this particular system is implemented is not up to the standard of the rest of the framework, but fortunately it should be pretty easy to improve and address this issue now that you have done the hard work of identifying it.

This will be a priority for the next release. as long as we can reproduce (necessary to be able to test).  If you have the time to do so, it would be helpful to try reproducing this in one of the many apps like examples/ASCollectionView that support pushing additional controllers to test lifecycle things such as this.  But we will investigate either way.

cc @nguyenhuy, @maicki 
",appleguy,maicki
1459,2016-03-31 05:34:57,"@binchensjtu thanks for reporting this issue. What is an example of an application user interface that has this kind of access pattern? It seems likely that the clear fetch data call could occur slightly before the display call for the next item, or even before the next item is in the fetch data range, so fixing this specific case does not seem likely to address the overall issue with your application reusing images regularly.

That said, I believe the disk cash is intended to keep the information even in a situation like this. Which version of the framework are you using? Note that there were several improvements to the behavior of caching with 1.9.7.1 and 2.1.2.

cc @garrettmoon 
",appleguy,garrettmoon
1457,2016-04-12 07:50:00,"@hannahmbanana thank you for working on this!

Overall, it is by far the cleanest _and_ most full-featured app in examples/ .  Really.  It is also the only app in examples/ with room to grow, both architecturally and in concept.  There's been a lot of iteration here, and I'm going to merge this initial diff because it has already served as a resource for the community & has no blockers.

It would be awesome to see continued work here.  Both the handful of cleanup areas mentioned (all more minor than the issues affecting every other app in examples/), but also additional features like perhaps viewing user profiles for 500px photographers with an ASCollectionView of their photos - and maybe use ASMapNode on a Location page, reusing the ASCollectionView of photos - perhaps wrapping up the example with opening / closing photos and using an ASPagerNode for fullscreen swiping?

If you use ASViewController to contain the user profile or other views, this example would be only one even close to engaging all four ASDisplayNode container types :)  cc @maicki @levi for thinking about developer intuitiveness / documentation, and how we may be able to leverage this code as an easy-to-read example for things like ""go check out X for an example of using implicit hierarchy management to resize a cell with -setNeedsLayout"".
",appleguy,levi
1457,2016-04-12 07:50:00,"@hannahmbanana thank you for working on this!

Overall, it is by far the cleanest _and_ most full-featured app in examples/ .  Really.  It is also the only app in examples/ with room to grow, both architecturally and in concept.  There's been a lot of iteration here, and I'm going to merge this initial diff because it has already served as a resource for the community & has no blockers.

It would be awesome to see continued work here.  Both the handful of cleanup areas mentioned (all more minor than the issues affecting every other app in examples/), but also additional features like perhaps viewing user profiles for 500px photographers with an ASCollectionView of their photos - and maybe use ASMapNode on a Location page, reusing the ASCollectionView of photos - perhaps wrapping up the example with opening / closing photos and using an ASPagerNode for fullscreen swiping?

If you use ASViewController to contain the user profile or other views, this example would be only one even close to engaging all four ASDisplayNode container types :)  cc @maicki @levi for thinking about developer intuitiveness / documentation, and how we may be able to leverage this code as an easy-to-read example for things like ""go check out X for an example of using implicit hierarchy management to resize a cell with -setNeedsLayout"".
",appleguy,maicki
1451,2016-03-30 06:09:50,"@fatuhoku What version of ASDK are you using?  Can you print out a) the [[UIWindow keyWindow] recursiveDescription] for your app and attach a text file, and b) consider locally linking against this PR and screen-capturing the results in the simulator?

You might also try the newer API in +Beta, which specifies rangeMode.  Try setting the ranges for the Full modes.  cc @maicki 
",appleguy,maicki
1450,2016-03-28 11:33:01,"I'm trying to configure `ASRangeController` behaviour as mentioned by @appleguy in his talks at NSLondon.  I come upon `ASCollectionView.setTuningParameters:forRangeMode:rangeType:` and I was thoroughly confused by `rangeType`. `rangeMode` I understand as various system-driven modes that hook up to whether the app is active, inactive or received memory warnings. I get that.

But this...



confuses me.

I remember from the NSLondon/NSSpain there's different working ranges — a 'display' range, a 'pre-render' range and a 'network' range. How does this map?

By intuition...
- display range = `ASLayoutRangeTypeDisplay`
- pre-render range = ?!?#?@#
- network range = `ASLayoutRangeTypeFetchData`

Also, does ASDK set any sensible tuning parameter defaults for these types / modes? I must assume that everything's set to zero at the minute.

Would really appreciate it if someone could help me understand this.
Meanwhile I'll go experiment... Thanks!

EDIT: !!!!!!!!  I had no idea that setting the last element of an enum as a count of all the elements in the enum a convention... for the longest time I thought `ASLayoutRangeTypeCount` was actually a `RangeType`...
",fatuhoku,appleguy
1450,2016-04-26 18:59:55,"@fatuhoku: Thanks for asking this question. I believe that @lappp9 and @hannahmbanana have update the website docs to explain ASRangeController / Intelligent Preloading http://asyncdisplaykit.org/docs/intelligent-preloading.html

I'm going to close this issue, but feel free to reopen it, start another issue or ping us on slack if there is a way to improve the website documentation. 
",appleguy,lappp9
1446,2016-03-30 06:15:37,"cc @levi @maicki @nguyenhuy @hannahmbanana @lappp9 @RCacheaux  about the very good point that we need to ensure the documentation we're all working on includes all the details necessary for most app developers to hit 60FPS at least on the iPad 2 and iPhone 4S (iPad 3 or iPhone 4 is a far harder bar)
",appleguy,hannahmbanana
1446,2016-03-30 06:15:37,"cc @levi @maicki @nguyenhuy @hannahmbanana @lappp9 @RCacheaux  about the very good point that we need to ensure the documentation we're all working on includes all the details necessary for most app developers to hit 60FPS at least on the iPad 2 and iPhone 4S (iPad 3 or iPhone 4 is a far harder bar)
",appleguy,levi
1446,2016-03-30 06:15:37,"cc @levi @maicki @nguyenhuy @hannahmbanana @lappp9 @RCacheaux  about the very good point that we need to ensure the documentation we're all working on includes all the details necessary for most app developers to hit 60FPS at least on the iPad 2 and iPhone 4S (iPad 3 or iPhone 4 is a far harder bar)
",appleguy,nguyenhuy
1446,2016-03-30 06:15:37,"cc @levi @maicki @nguyenhuy @hannahmbanana @lappp9 @RCacheaux  about the very good point that we need to ensure the documentation we're all working on includes all the details necessary for most app developers to hit 60FPS at least on the iPad 2 and iPhone 4S (iPad 3 or iPhone 4 is a far harder bar)
",appleguy,lappp9
1446,2016-03-30 06:15:37,"cc @levi @maicki @nguyenhuy @hannahmbanana @lappp9 @RCacheaux  about the very good point that we need to ensure the documentation we're all working on includes all the details necessary for most app developers to hit 60FPS at least on the iPad 2 and iPhone 4S (iPad 3 or iPhone 4 is a far harder bar)
",appleguy,maicki
1446,2016-03-30 06:15:37,"cc @levi @maicki @nguyenhuy @hannahmbanana @lappp9 @RCacheaux  about the very good point that we need to ensure the documentation we're all working on includes all the details necessary for most app developers to hit 60FPS at least on the iPad 2 and iPhone 4S (iPad 3 or iPhone 4 is a far harder bar)
",appleguy,RCacheaux
1444,2016-03-28 04:40:13,"@akathrowaway thank you for the detailed post. I have some important things to finish tonight and have not yet had a chance to fully understand all of the details here, but I definitely will do so at my soonest opportunity and really appreciate you taking the time to include the detail.

This framework is not widely tested for usage of nodes outside of some form of container / root element.  the reason is simple... in this configuration, there is no system that will trigger the asynchronous layout for display in advance of the content coming on screen, which essentially guarantees that content will ""flash"".

Could you explain a use case, or an example project that demonstrates one, whether one of the many projects in examples/ (feel free to modify one) or one that you create, that exhibits any inconvenient behavior when using ASCellNode with Table, Collection, or Pager - or using an ASViewController?  Also, I assume you're using the latest version of the framework?

These root container objects handled the responsibility of calling measure, as well as triggering display and proactively managing memory. Feel free to check out the description of these components in the NSSpain talk (sorry it's not the greatest - more docs on the way soon, @lappp9 would you be okay with linking your current version of the first tutorial here?)  https://www.youtube.com/watch?v=RY_X7l1g79Q

Anyway, the layout system of this framework is the most different aspect of its design from UIKit, although it is also tightly integrated. I have not actually encountered a case yet (from anyone in the community) that describes the resizing behavior as inconvenient, but this only increases my interest in understanding the use cases where it is problematic, and ensuring that this is not simply due to incomplete adoption of the framework such is lacking a root element. For example, when using a cell node, it is typically extremely convenient to be able to call setNeedsLayout and rely on the overall cell changing height automatically - even inside a table or collection.

It is even customizable whether those layouts should be performed in an animated or non-animated way, And it is also possible to write your layout in such a way that it does not rely on the size of its subnodes to determine its height, So as far as I'm aware of there is complete control over the behavior you want.

All this said, I want to reiterate that the layout system that has been in the framework and widely used for the past nine months is still a very poorly documented despite its high degree of testing and flexibility, which makes it almost impossible to jump into and completely understand the conventions and capabilities. This is one reason why I am so active in the Community and try to help everyone understand the best way to get a lot out of the framework, and why am looking forward to the documentation projects that members of the community have been willing to advance. It is now higher priority for me as certain critical projects in my day job are wrapping up.  I'm sorry for the trouble in understanding this stuff and hope to be able to help.  Reply here and email me any time at asyncdisplaykit@gmail.com !
",appleguy,lappp9
1441,2016-03-27 06:26:17,"This resolves https://github.com/facebook/AsyncDisplayKit/issues/1436

cc @Adlai-Holler, @maicki, @nguyenhuy, @garrettmoon, @rahul-malik 
",appleguy,nguyenhuy
1441,2016-03-27 06:26:17,"This resolves https://github.com/facebook/AsyncDisplayKit/issues/1436

cc @Adlai-Holler, @maicki, @nguyenhuy, @garrettmoon, @rahul-malik 
",appleguy,garrettmoon
1441,2016-03-27 06:26:17,"This resolves https://github.com/facebook/AsyncDisplayKit/issues/1436

cc @Adlai-Holler, @maicki, @nguyenhuy, @garrettmoon, @rahul-malik 
",appleguy,maicki
1441,2016-03-27 06:26:17,"This resolves https://github.com/facebook/AsyncDisplayKit/issues/1436

cc @Adlai-Holler, @maicki, @nguyenhuy, @garrettmoon, @rahul-malik 
",appleguy,rahul-malik
1441,2016-03-27 06:26:17,"This resolves https://github.com/facebook/AsyncDisplayKit/issues/1436

cc @Adlai-Holler, @maicki, @nguyenhuy, @garrettmoon, @rahul-malik 
",appleguy,Adlai-Holler
1432,2016-03-25 16:57:18,"- Refactor ASDataController layout nodes methods
- Don't crash if dataSource becomes nil while layout is happening

@appleguy @nguyenhuy Could you guys take a look, it should address for now: #1181 
",maicki,nguyenhuy
1432,2016-03-25 16:57:18,"- Refactor ASDataController layout nodes methods
- Don't crash if dataSource becomes nil while layout is happening

@appleguy @nguyenhuy Could you guys take a look, it should address for now: #1181 
",maicki,appleguy
1421,2016-03-24 05:12:38,"I have some insanely complex table view cells, and as I scroll through them, I eventually get an `NSFastEnumerationMutation` exception when a node leaves the display range. It's crunch time and I'm exhausted, so I don't know what code on my end is modifying the layer tree due to leaving the display range, but I'll attach some snapshots. It's easy to reproduce so if you want to investigate @appleguy let me know. Nothing interesting or consistent going on on other threads.

This also corrects the property declaration for `ASDisplayNode.subnodes`.
",Adlai-Holler,appleguy
1417,2016-06-18 02:38:58,"@wy19901227 - @maicki has fixed the disappearing divider line! Here's his explanation: 

_""UITableViewCell traverses through all its descendant views and adjusts their background color accordingly either to [UIColor clearColor], although potentially it could use the same color as the selection highlight itself. After selection, the same trick is performed again in reverse, putting all the backgrounds back as they used to be. But in our case, we don't want to have the background color disappearing so we reset it after highlighting or selection is done.""_
",hannahmbanana,maicki
1413,2016-03-22 19:22:25,"@appleguy I hit a NSFastEnumerationMutation exception on this variable, for a particularly rambunctious table view. Snuck in a small optimization as well, love the recent improvements!
",Adlai-Holler,appleguy
1411,2016-06-17 06:55:57,"@alibasta if that PR does resolve your issue, it would actually be really great to know, because I have not landed it only due to the lack of a test case the team has to verify the change.  So your verification would allow us to land it :).  @maicki could you please watch for this, and if it doesn't work, look at another way to verify 1139 is correct / ready for merge?
",appleguy,maicki
1408,2016-03-22 00:17:27,"Very awesome, @ejensen !  @levi or @Adlai-Holler let me know if you have time to review tonight or I might just merge.  Same for https://github.com/facebook/AsyncDisplayKit/pull/1409
",appleguy,levi
1408,2016-03-22 00:17:27,"Very awesome, @ejensen !  @levi or @Adlai-Holler let me know if you have time to review tonight or I might just merge.  Same for https://github.com/facebook/AsyncDisplayKit/pull/1409
",appleguy,Adlai-Holler
1405,2016-03-20 08:05:04,"@stowy thank you!

Try it out, everyone!  @Adlai-Holler, @knopp, @eanagel, @tomizimobile, @smyrgl, @aaronschubert0, @lappp9, @jflinter, @eke, @ekurutepe 

What do you all think - since Relative is such a vague term, should we rename this to ASRectAlignLayoutSpec or something else before 2.0?  Any name proposals?  Shoot me a note at asyncdisplaykit@gmail.com .

[totally random @jflinter - we just adopted your JFMemoryNoodler at Pinterest ;) ]
",appleguy,knopp
1405,2016-03-20 08:05:04,"@stowy thank you!

Try it out, everyone!  @Adlai-Holler, @knopp, @eanagel, @tomizimobile, @smyrgl, @aaronschubert0, @lappp9, @jflinter, @eke, @ekurutepe 

What do you all think - since Relative is such a vague term, should we rename this to ASRectAlignLayoutSpec or something else before 2.0?  Any name proposals?  Shoot me a note at asyncdisplaykit@gmail.com .

[totally random @jflinter - we just adopted your JFMemoryNoodler at Pinterest ;) ]
",appleguy,aaronschubert0
1405,2016-03-20 08:05:04,"@stowy thank you!

Try it out, everyone!  @Adlai-Holler, @knopp, @eanagel, @tomizimobile, @smyrgl, @aaronschubert0, @lappp9, @jflinter, @eke, @ekurutepe 

What do you all think - since Relative is such a vague term, should we rename this to ASRectAlignLayoutSpec or something else before 2.0?  Any name proposals?  Shoot me a note at asyncdisplaykit@gmail.com .

[totally random @jflinter - we just adopted your JFMemoryNoodler at Pinterest ;) ]
",appleguy,Adlai-Holler
1405,2016-03-20 08:05:04,"@stowy thank you!

Try it out, everyone!  @Adlai-Holler, @knopp, @eanagel, @tomizimobile, @smyrgl, @aaronschubert0, @lappp9, @jflinter, @eke, @ekurutepe 

What do you all think - since Relative is such a vague term, should we rename this to ASRectAlignLayoutSpec or something else before 2.0?  Any name proposals?  Shoot me a note at asyncdisplaykit@gmail.com .

[totally random @jflinter - we just adopted your JFMemoryNoodler at Pinterest ;) ]
",appleguy,stowy
1405,2016-03-20 08:05:04,"@stowy thank you!

Try it out, everyone!  @Adlai-Holler, @knopp, @eanagel, @tomizimobile, @smyrgl, @aaronschubert0, @lappp9, @jflinter, @eke, @ekurutepe 

What do you all think - since Relative is such a vague term, should we rename this to ASRectAlignLayoutSpec or something else before 2.0?  Any name proposals?  Shoot me a note at asyncdisplaykit@gmail.com .

[totally random @jflinter - we just adopted your JFMemoryNoodler at Pinterest ;) ]
",appleguy,ekurutepe
1405,2016-03-20 08:05:04,"@stowy thank you!

Try it out, everyone!  @Adlai-Holler, @knopp, @eanagel, @tomizimobile, @smyrgl, @aaronschubert0, @lappp9, @jflinter, @eke, @ekurutepe 

What do you all think - since Relative is such a vague term, should we rename this to ASRectAlignLayoutSpec or something else before 2.0?  Any name proposals?  Shoot me a note at asyncdisplaykit@gmail.com .

[totally random @jflinter - we just adopted your JFMemoryNoodler at Pinterest ;) ]
",appleguy,lappp9
1405,2016-03-20 08:05:04,"@stowy thank you!

Try it out, everyone!  @Adlai-Holler, @knopp, @eanagel, @tomizimobile, @smyrgl, @aaronschubert0, @lappp9, @jflinter, @eke, @ekurutepe 

What do you all think - since Relative is such a vague term, should we rename this to ASRectAlignLayoutSpec or something else before 2.0?  Any name proposals?  Shoot me a note at asyncdisplaykit@gmail.com .

[totally random @jflinter - we just adopted your JFMemoryNoodler at Pinterest ;) ]
",appleguy,tomizimobile
1405,2016-03-20 08:05:04,"@stowy thank you!

Try it out, everyone!  @Adlai-Holler, @knopp, @eanagel, @tomizimobile, @smyrgl, @aaronschubert0, @lappp9, @jflinter, @eke, @ekurutepe 

What do you all think - since Relative is such a vague term, should we rename this to ASRectAlignLayoutSpec or something else before 2.0?  Any name proposals?  Shoot me a note at asyncdisplaykit@gmail.com .

[totally random @jflinter - we just adopted your JFMemoryNoodler at Pinterest ;) ]
",appleguy,eanagel
1404,2016-03-20 03:00:00,"Includes fix for https://github.com/facebook/AsyncDisplayKit/issues/681 (cc @Adlai-Holler)
",appleguy,Adlai-Holler
1403,2016-03-20 02:08:08,"cc @levi -- this looks correct to me, but let me know if not!
",appleguy,levi
1401,2016-03-19 13:44:02,"Hello guys,

I have application based on video content, so there is video player in every corner :smile_cat: 

The whole app except video player is made with AsyncDisplayKit and i want to change this.

We have custom video player, like ASVideoNode and it has a lot of delegate methods, for many cases which we use.

I am trying to implement such thing in `ASVideoNode`, so i forked it and made few changes listed bellow.

It will be super if i can hear some ideas from you. If my changes will be useful and it's not bad what i did, i will continue and at the will make pull request :blush:

Here is [link](https://github.com/Eke/AsyncDisplayKit/commit/d8e752f3fafd697506428199639f49469030a9be) to my `ASVideoNode` branch latest commit, which implements everything listed bellow

Added `ASVideoNodePlayerState` and two delegate methods, `videoNode:willChangePlayerState:toState:` and `videoNode:shouldChangePlayerStateTo:`

 `videoNode:willChangePlayerState:toState:`  notifies delegate that `ASVideoNode` is going to change player state.

`videoNode:shouldChangePlayerStateTo:` asks delegate if `ASVideoNode` should change state to new one. for example in some cases you can disable video pause or play.

In `ASVideoNode` class replaced : 
`[self play]` with `self.playerState = ASVideoNodePlayerStatePlaying;` 
`[self pause]` with `self.playerState = ASVideoNodePlayerStatePaused;`

Added new method `setPlayerState:` which decides must `ASVideoNode` call play or pause methods.

If this changes are ok, must remove public play and pause methods from header file. Must use `setPlayerState:` instead

@appleguy Can you take a look?
",Eke,appleguy
1400,2016-04-02 05:44:27,"@eanagel - the reason this assertion exists is because transitions are capable of performing detailed animations and even addition and removal of subnodes at every level of the hierarchy beneath the call point. For obvious reasons, especially considering that the API is thread safe and that the measurement calculations can be easily performed on a background thread simply by calling transition there, it is important to ensure consistency. 

If you could elaborate on your use case, which is probably valid and worth supporting, we can think about the way to support it. The architecture in this area is actually in great shape to modify this behavior, potentially doing something like allowing a subtree that is animating to take precedence over animations of the parent, but we will need to think through certain threading implications. 

cc @levi @nguyenhuy (don't worry about implementing now, just something to brainstorm about for the longer term future of the transition API)
",appleguy,levi
1400,2016-04-02 05:44:27,"@eanagel - the reason this assertion exists is because transitions are capable of performing detailed animations and even addition and removal of subnodes at every level of the hierarchy beneath the call point. For obvious reasons, especially considering that the API is thread safe and that the measurement calculations can be easily performed on a background thread simply by calling transition there, it is important to ensure consistency. 

If you could elaborate on your use case, which is probably valid and worth supporting, we can think about the way to support it. The architecture in this area is actually in great shape to modify this behavior, potentially doing something like allowing a subtree that is animating to take precedence over animations of the parent, but we will need to think through certain threading implications. 

cc @levi @nguyenhuy (don't worry about implementing now, just something to brainstorm about for the longer term future of the transition API)
",appleguy,nguyenhuy
1399,2016-03-19 06:33:03,"@aaronschubert0 would love your review - if you have time!
",appleguy,aaronschubert0
1398,2016-03-20 04:18:33,"@maicki @garrettmoon (ASImageNode changes) @nguyenhuy it would be great to have a review from one or two of you. Until then, I am going to go ahead and land this, so that I can get increased test coverage over the weekend as I continue to do development on other branches that I would like to rebase with this change.
",appleguy,nguyenhuy
1398,2016-03-20 04:18:33,"@maicki @garrettmoon (ASImageNode changes) @nguyenhuy it would be great to have a review from one or two of you. Until then, I am going to go ahead and land this, so that I can get increased test coverage over the weekend as I continue to do development on other branches that I would like to rebase with this change.
",appleguy,garrettmoon
1398,2016-03-20 04:18:33,"@maicki @garrettmoon (ASImageNode changes) @nguyenhuy it would be great to have a review from one or two of you. Until then, I am going to go ahead and land this, so that I can get increased test coverage over the weekend as I continue to do development on other branches that I would like to rebase with this change.
",appleguy,maicki
1398,2016-03-20 04:19:29,"cc @Adlai-Holler regarding the change for multiplex.  Note that placeholder fading out now works reliably as well.
",appleguy,Adlai-Holler
1396,2016-03-18 19:19:26,"@appleguy Not sure who our resident ASLayout expert is, but I could use a hand here.
",eanagel,appleguy
1396,2016-03-19 06:49:11,"@eanagel I'm pretty sure that this will work if you set flexShrink on the text node, which I assume is what must have been the case on the message bubble beneath. Setting it on the inset unfortunately does not have a propagating effect to its children, although for that particular kind of spec, it probably should.

For layout specs with multiple children, such as a stack, setting flexShrink on the layout spec itself of course has a very different meaning than on one of the children.

@nguyenhuy @levi @maicki @hannahmbanana Does this answer sound correct to you, and how might we improve the API with automatic propagation of ASLayoutable / ASStackLayoutable properties? Would it be possible to do this automatically for all ASLayoutSpecs with a child count of 1?
",appleguy,nguyenhuy
1396,2016-03-19 06:49:11,"@eanagel I'm pretty sure that this will work if you set flexShrink on the text node, which I assume is what must have been the case on the message bubble beneath. Setting it on the inset unfortunately does not have a propagating effect to its children, although for that particular kind of spec, it probably should.

For layout specs with multiple children, such as a stack, setting flexShrink on the layout spec itself of course has a very different meaning than on one of the children.

@nguyenhuy @levi @maicki @hannahmbanana Does this answer sound correct to you, and how might we improve the API with automatic propagation of ASLayoutable / ASStackLayoutable properties? Would it be possible to do this automatically for all ASLayoutSpecs with a child count of 1?
",appleguy,hannahmbanana
1396,2016-03-19 06:49:11,"@eanagel I'm pretty sure that this will work if you set flexShrink on the text node, which I assume is what must have been the case on the message bubble beneath. Setting it on the inset unfortunately does not have a propagating effect to its children, although for that particular kind of spec, it probably should.

For layout specs with multiple children, such as a stack, setting flexShrink on the layout spec itself of course has a very different meaning than on one of the children.

@nguyenhuy @levi @maicki @hannahmbanana Does this answer sound correct to you, and how might we improve the API with automatic propagation of ASLayoutable / ASStackLayoutable properties? Would it be possible to do this automatically for all ASLayoutSpecs with a child count of 1?
",appleguy,levi
1396,2016-03-19 06:49:11,"@eanagel I'm pretty sure that this will work if you set flexShrink on the text node, which I assume is what must have been the case on the message bubble beneath. Setting it on the inset unfortunately does not have a propagating effect to its children, although for that particular kind of spec, it probably should.

For layout specs with multiple children, such as a stack, setting flexShrink on the layout spec itself of course has a very different meaning than on one of the children.

@nguyenhuy @levi @maicki @hannahmbanana Does this answer sound correct to you, and how might we improve the API with automatic propagation of ASLayoutable / ASStackLayoutable properties? Would it be possible to do this automatically for all ASLayoutSpecs with a child count of 1?
",appleguy,maicki
1396,2016-06-06 06:21:14,"@hannahmbanana: could you add this to our 2.0 release upgraded documentation to-do list? 
",appleguy,hannahmbanana
1395,2016-04-01 19:14:50,"@Baevra: 1k+ items in your dataSource shouldn't be a problem for ASDK depending on how you've implemented it in your app. 

Could you provide some code here so that we can help you out? Or a sample project would be most ideal. Alternatively, you can email @appleguy at AsyncDisplayKit@gmail.com if your project is more sensitive. 
",hannahmbanana,appleguy
1394,2016-03-20 00:07:21,"@jellenbogen very interesting fix. I am left wondering how this is working for the use cases we have in the Pinterest app... Anyway, it is a to do item for us to make a public the basic animation controller that automatically fades in new sub nodes and fades out removed ones. It might be something about how that is set up that avoids the issue.

@nguyenhuy @levi @maicki does this change seem safe? How could we test it better?
",appleguy,nguyenhuy
1394,2016-03-20 00:07:21,"@jellenbogen very interesting fix. I am left wondering how this is working for the use cases we have in the Pinterest app... Anyway, it is a to do item for us to make a public the basic animation controller that automatically fades in new sub nodes and fades out removed ones. It might be something about how that is set up that avoids the issue.

@nguyenhuy @levi @maicki does this change seem safe? How could we test it better?
",appleguy,maicki
1394,2016-03-20 00:07:21,"@jellenbogen very interesting fix. I am left wondering how this is working for the use cases we have in the Pinterest app... Anyway, it is a to do item for us to make a public the basic animation controller that automatically fades in new sub nodes and fades out removed ones. It might be something about how that is set up that avoids the issue.

@nguyenhuy @levi @maicki does this change seem safe? How could we test it better?
",appleguy,levi
1394,2016-03-20 00:58:41,"@nguyenhuy I did get a crash on a Commerce pin while running with this, but it might be a separate issue (as discussed, Commerce is triggering some things that wouldn't happen to most clients).  Or could this be due to the change?

<img width=""1362"" alt=""screen shot 2016-03-19 at 5 56 27 pm"" src=""https://cloud.githubusercontent.com/assets/565251/13902187/2c7d159c-edfc-11e5-92cb-4f4560d2e81f.png"">
<img width=""1362"" alt=""screen shot 2016-03-19 at 5 55 15 pm"" src=""https://cloud.githubusercontent.com/assets/565251/13902188/2cb3df3c-edfc-11e5-8dcc-7f83224df75f.png"">
",appleguy,nguyenhuy
1388,2016-03-20 00:16:52,"Thanks @hannahmbanana !  cc @lappp9 congrats on your component becoming mainstream - lots of users already!  https://github.com/facebook/AsyncDisplayKit/pull/1402
",appleguy,hannahmbanana
1388,2016-03-20 00:16:52,"Thanks @hannahmbanana !  cc @lappp9 congrats on your component becoming mainstream - lots of users already!  https://github.com/facebook/AsyncDisplayKit/pull/1402
",appleguy,lappp9
1387,2016-03-16 10:12:09,"@levi I was testing out the new layoutSpec transitions in my app and was modeling my code off the example you've created for the animated form. However when I come to animateLayoutTransition in my example app, initialFrameForNode and finalFrameForNode return the same value from the supplied ASContextTransitioning.

I was stepping through the code and it looks like when calling transitionLayoutWithSizeRange, the first thing that is done is to iterate through all the subnodes and set the following:



Then immediately following this the newLayout is created, which I assume is the layout that takes into consideration all state changes that have happened and is where finalFrameForNode gets its values. The issue I'm seeing is that the newLayout calls this in the transitionBlock:



But when going through this pass of calculateLayoutThatFits, calling measureWithSizeRange on each subnode does nothing since we have just set the hierarchyState and pendingTransactionID on each subnode. So measureWithSizeRange fails when checking:



So my question is am I doing something wrong here or should measureWithSizeRange always perform a measurement in the case where it is called in calculateLayoutThatFits via transitionLayoutWithAnimation?

I've attached the code for a test app I created just to show just this one example. If you or anyone else has a moment to take a look that'd be awesome, maybe something will stand out for you that I'm just missing. Either way I appreciate any help I can get!

[LayoutTransitionTestApp.zip](https://github.com/facebook/AsyncDisplayKit/files/175674/LayoutTransitionTestApp.zip)
",jellenbogen,levi
1387,2016-03-19 06:53:49,"@levi @nguyenhuy @maicki 
",appleguy,levi
1387,2016-03-19 06:53:49,"@levi @nguyenhuy @maicki 
",appleguy,maicki
1387,2016-03-19 06:53:49,"@levi @nguyenhuy @maicki 
",appleguy,nguyenhuy
1384,2016-03-16 00:12:42,"Thanks @nguyenhuy !  @maicki we may want to create that ""opposite of ASHierarchyState"" thing to signal ""upward-hierarchy"" information and then port this feature to be based on it.
",appleguy,maicki
1384,2016-03-16 00:18:11,"That would be ideal, @appleguy @maicki.
",nguyenhuy,maicki
1382,2016-03-16 17:36:53,"@appleguy Addressed comments
",maicki,appleguy
1381,2016-03-17 13:37:18,"this is causing a crash for us @appleguy 
",MarvinNazari,appleguy
1371,2016-03-12 02:03:23,"Reviews from @appleguy, @levi and @rahul-malik were performed on https://github.com/nguyenhuy/AsyncDisplayKit/commit/f2075e7aae180702127a24a2c645ea0c5119571a and https://github.com/nguyenhuy/AsyncDisplayKit/commit/2b40304cb7c93ac31ca51dd476c3d2827815fe81.

This PR contains some cleanups and fixes on top of these commits.
",nguyenhuy,levi
1371,2016-03-12 02:03:23,"Reviews from @appleguy, @levi and @rahul-malik were performed on https://github.com/nguyenhuy/AsyncDisplayKit/commit/f2075e7aae180702127a24a2c645ea0c5119571a and https://github.com/nguyenhuy/AsyncDisplayKit/commit/2b40304cb7c93ac31ca51dd476c3d2827815fe81.

This PR contains some cleanups and fixes on top of these commits.
",nguyenhuy,appleguy
1371,2016-03-12 02:03:23,"Reviews from @appleguy, @levi and @rahul-malik were performed on https://github.com/nguyenhuy/AsyncDisplayKit/commit/f2075e7aae180702127a24a2c645ea0c5119571a and https://github.com/nguyenhuy/AsyncDisplayKit/commit/2b40304cb7c93ac31ca51dd476c3d2827815fe81.

This PR contains some cleanups and fixes on top of these commits.
",nguyenhuy,rahul-malik
1368,2016-04-30 00:02:39,"@wpK I think your layout is totally fine. It's just the text node laying (we use internally Core Text) out your text this way as you have a sample text with very long words and wrapping it the right way is kind of complicated and so 

Just set your sample text to something different and I think you will have the right representation (look into the gist, you can also add some more character and you will see it)

Furthermore you don't need to wrap the layout in a static layout spec too :)

Here is a new gist: https://gist.github.com/maicki/f7e53bc4c93651c73b7faeb3f3d7afb5

Let me know if we understand it right what you wanna have. Maybe a more extended sample project would help that show's in what problems you are run into.

cc @appleguy @hannahmbanana 
",maicki,appleguy
1367,2016-03-17 04:41:53,"@binl thank you for proposing this. You definitely discovered a real, important issue that was caused by very recent changes related to triggering range updates upon a table / collection moving into or out of a window. In addition to the memory footprint, this was causing back to back calls to visibilityDidChange: separated by just one run loop turn, and although the state always ended up correct, this extra thrash was both inefficient and potentially a problem for certain implementations that might not check to filter out noisy calls.

I feel it is very important to continue to observe this behavior to ensure that we are addressing any root causes of these kind of unnecessary calls, and believe that the system is now behaving in a significantly more calm and efficient way after https://github.com/facebook/AsyncDisplayKit/pull/1382 .  If we find more causes, we should revisit to see if they have as concrete of a solution as was possible in that change.

That said, I would not be to surprise if we end up reopening this change and going in this direction. Overall, the range mode API is very new and Will not B production API for at least another month, possibly more. So we do have sometime to continue to inspect the behavior of the system in a variety of complex circumstances, and this change should continue to apply smoothly if we reopen the PR (no need to create a new one since it's so easy to reopen).

Give the new behavior a try, and let me know which scenarios are still producing noisy calls. I am nearly certain that there are at least a handful of cases that do so, potentially with very significant negative impact, and would be very motivated to start digging into why they happen.

Lastly, I am thrilled to see this new pull request from @hannahmbanana - it allows it visualizing the current range controllers in the system, which will dramatically assist in detecting these kind of problems. It is still a fairly rough implementation, but already amazingly useful, and can be expanded and improved as we learn which capabilities are most valuable.  https://github.com/facebook/AsyncDisplayKit/pull/1390

![screen shot 2016-03-16 at 8 15 54 pm](https://cloud.githubusercontent.com/assets/3419380/13835809/bc0b98f0-ebb8-11e5-8f50-421cb0f320c2.png)
",appleguy,hannahmbanana
1366,2016-03-17 09:43:00,"@cc-lam You're right - this does seem like it would cause a performance hit.

@levi - did you mean to compare bounds.size rather than bounds in the following function in MosaicCollectionViewLayout? Was this meant to support rotation? Are there other reasons this app would want to invalidate layout upon bounds change? I can throw up a quick PR for the one line of code if that's the case. I know you're super busy optimizing the rest of the framework. Btw - great choice on photos!
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds
  {
  if (!CGRectEqualToRect(self.collectionView.bounds, newBounds)) {
    return YES;
  }
  return NO;
  }
",hannahmbanana,levi
1361,2016-11-16 03:18:33,"@lsnpatryks - thanks for putting together a sample project! 

FYI - ASDK does not support Auto Layout, so I replaced 



with 



You're right about the `.flexShrink` on line `69` being the issue. @maicki - can you comment on whether this is expected behavior?
",hannahmbanana,maicki
1361,2016-11-18 22:33:37,"@maicki this has existed for a long time - we should definitely check what's going on to be confident in the 2.0 implementation.  Let's try it against the new setNeedsLayout as that is the future :)
",appleguy,maicki
1358,2016-03-12 06:44:09,"@ejensen I particularly appreciate this one; thank you. The test that is far less reliable is related to asynchronous transactions, which has never once failed for an engineer locally, but fails on the build server around a quarter of the time which is pretty awful.

It only started happening after the excellent changes from @knopp, but he also added a lot of tests and his change was tremendously impactful / very stable from the beginning, so I'm pretty confident it is either a Travis or test structure change.  If you are looking around in that area, definitely let me know if the problem is apparent to you even if you're not able to fix.

Seriously, don't hesitate to email me any time, asyncdisplaykit@gmail.com .  I am super happy to have these unexpected surprise diffs land in our PR queue!!  If you are doing a project with the framework I'd be happy to help advise on architecture or approach (or issues you encounter), or if you are interested in taking on a bigger change, there are a ton of impactful directions.
",appleguy,knopp
1351,2016-03-10 08:27:10,"LOL nice!  cc @lappp9 hehe
",appleguy,lappp9
1348,2016-03-09 18:01:53,"..if layoutSubviews has not been called yet. This is a more conservative approach than the previous PR #1344 which caused issues for @tomizimobile. This fixes the issues I was seeing and shouldn't break anything else ;) (Previous version could keep the initial relayoutAllNodes from being called in layoutSubviews in some situations.)
",eanagel,tomizimobile
1348,2016-03-09 20:05:29,"Ok @tomizimobile has checked that his use case works with this change and mine does too. I'm comfortable merging once it's been reviewed.
",eanagel,tomizimobile
1347,2016-03-09 15:13:34,"@appleguy Appreciate your super busy at the moment.

Little fix to address #1295. There is an easy workaround for this but turned out to be a simple fix to correct it to the expected behaviour.
",aaronschubert0,appleguy
1345,2017-01-13 04:28:09,I heard another report of this on Slack recently. @Adlai-Holler - is this a quick fix? ,hannahmbanana,Adlai-Holler
1339,2016-11-15 05:04:18,"@maicki - could you make a call on fix / won't fix please?
",hannahmbanana,maicki
1322,2016-05-11 03:19:05,"@smyrgl: It would be great if you could try out @erichoracek's awesome contribution and confirm that this works for you!
",appleguy,erichoracek
1317,2016-03-03 23:13:39,"@appleguy : Putting this up for initial review and profiling. We should determine the correct heuristic and/or batch size for each run loop and ultimately if this is a meaningful change in the framework. Feedback welcome as I'm sure this might require a few iterations before we get a solution we feel is an improvement.
",rahul-malik,appleguy
1301,2016-03-01 21:17:21,"FYI @nguyenhuy @levi 
",lkzhao,nguyenhuy
1301,2016-03-01 21:17:21,"FYI @nguyenhuy @levi 
",lkzhao,levi
1301,2016-03-01 21:36:05,"cc @Adlai-Holler
",nguyenhuy,Adlai-Holler
1298,2016-03-01 15:25:00,"Hey @appleguy @nguyenhuy 6d463da has caused a regression on the issue I reported at the weekend.

Specifically the issue was that `- (ASSizeRange)collectionView:(ASCollectionView *)collectionView constrainedSizeForNodeAtIndexPath:(NSIndexPath *)indexPath;` was called concurrently. This commit seems to have re-introduced that behaviour. What can we do to fix this? 
",aaronschubert0,nguyenhuy
1298,2016-03-01 15:25:00,"Hey @appleguy @nguyenhuy 6d463da has caused a regression on the issue I reported at the weekend.

Specifically the issue was that `- (ASSizeRange)collectionView:(ASCollectionView *)collectionView constrainedSizeForNodeAtIndexPath:(NSIndexPath *)indexPath;` was called concurrently. This commit seems to have re-introduced that behaviour. What can we do to fix this? 
",aaronschubert0,appleguy
1296,2016-03-01 20:31:55,"Thanks!  @nguyenhuy is on the case.
",appleguy,nguyenhuy
1296,2016-03-01 23:39:17,"@nguyenhuy If you need me to retest let me know...I assume this has to do with supplementary nodes because I have isolated everything else I can think of and its 100% reproducible on this VC but if you want me to test something let me know.
",smyrgl,nguyenhuy
1291,2016-02-29 19:38:57,"based on @Adlai-Holler comments in #1288
",nguyenhuy,Adlai-Holler
1285,2016-02-29 07:16:59,"@smyrgl just checking, this is not a change in behavior from previous versions correct?  1.9.7 is so vastly improved over 1.9.6 that I'm hesitant to hold the release any longer, despite the importance of this.

We are actively working on a fix for this, it may not make the next release assuming it is not a regression, that it should be available in master within the next week. This is a tough call, because this is a very important issue to fix, but there are subtleties in doing this correctly (e.g. so that content doesn't flash when returning, and ideally supporting UIViewController rather than just AS*).

cc @levi, @maicki, @nguyenhuy 
",appleguy,levi
1285,2016-02-29 07:16:59,"@smyrgl just checking, this is not a change in behavior from previous versions correct?  1.9.7 is so vastly improved over 1.9.6 that I'm hesitant to hold the release any longer, despite the importance of this.

We are actively working on a fix for this, it may not make the next release assuming it is not a regression, that it should be available in master within the next week. This is a tough call, because this is a very important issue to fix, but there are subtleties in doing this correctly (e.g. so that content doesn't flash when returning, and ideally supporting UIViewController rather than just AS*).

cc @levi, @maicki, @nguyenhuy 
",appleguy,maicki
1285,2016-02-29 07:16:59,"@smyrgl just checking, this is not a change in behavior from previous versions correct?  1.9.7 is so vastly improved over 1.9.6 that I'm hesitant to hold the release any longer, despite the importance of this.

We are actively working on a fix for this, it may not make the next release assuming it is not a regression, that it should be available in master within the next week. This is a tough call, because this is a very important issue to fix, but there are subtleties in doing this correctly (e.g. so that content doesn't flash when returning, and ideally supporting UIViewController rather than just AS*).

cc @levi, @maicki, @nguyenhuy 
",appleguy,nguyenhuy
1284,2016-02-29 07:31:41,"@rcancro have you encountered any issues like this in your work, or do you have a test harness that could help isolate where in the stack it's occurring?

@nvh thanks a lot, I'm looking forward to getting the text stuff dialed in for good as soon as we can.  There are now a couple full time folks working on ASDK, and though this will not be their top priority for a few weeks, a fix should be possible before the end of March.
",appleguy,rcancro
1283,2016-02-27 07:21:00,"@appleguy pointed out a pretty common deadlock case here and suggested this solution. I think it's a winner!
",Adlai-Holler,appleguy
1279,2016-02-26 02:28:33,"cc @garrettmoon, @Adlai-Holler
",appleguy,garrettmoon
1279,2016-02-26 02:28:33,"cc @garrettmoon, @Adlai-Holler
",appleguy,Adlai-Holler
1279,2016-02-26 02:44:47,"@Adlai-Holler - if there is a spot in the unit tests you know of that could help test this behavior, sepecifically / especially when a node is already loaded and it's called on main, that would be great to add in the next few weeks.
",appleguy,Adlai-Holler
1273,2016-02-25 09:39:10,"Hi @appleguy, apologies for not being as involved lately but have finally gotten some good time for tvOS support. 

Here is the current state of ASDK on tvOS in my opinion (after this PR):
- ASControlNode. The base class has 95% focus engine support. This is basically complete all for the fact that currently I wasn't able to find a way to receive a long press event (gesture recognizer didn't work). So the default behaviour of being able to hold down a control node and cause it to be 'impressed' into the UI isn't supported.
- ASImageNode. This has about 25% focus engine support. This is a lot trickier and would love some of community to help out on this. The built in effects of UIImageView when `.adjustsImageWhenAncestorFocused = YES` are gorgeous and would need to be replicated in order to use it in production. Also sometimes the focus engine effects aren't escaped properly (in the current implementation)
- Since PINRemoteImage is now a subspec of ASDK then we will need to enable tvOS support for that project too, but I doubt that this would be very hard, maybe @garrettmoon has more info on this? Happy to do this piece of work in a new PR.

Once ASImageNode is complete then the next piece of work would be to make it work inside a ASCellNode for use with ASCollection/TableView. That would be mostly it, in my opinion. So not huge amounts of work but just need to perfect certain aspects of ASDK in order for it to be truly viable.

Obviously other nodes will need to be tested when we get to that but once these points are done then I'd be confident with moving ahead. Otherwise I might have to reside to use UICollectionView's with UICollectionViewCells and UIImageView's and only use ASDK for sub views which wouldn't be that great!

cc @levi @nguyenhuy @Adlai-Holler 
",aaronschubert0,levi
1273,2016-02-25 09:39:10,"Hi @appleguy, apologies for not being as involved lately but have finally gotten some good time for tvOS support. 

Here is the current state of ASDK on tvOS in my opinion (after this PR):
- ASControlNode. The base class has 95% focus engine support. This is basically complete all for the fact that currently I wasn't able to find a way to receive a long press event (gesture recognizer didn't work). So the default behaviour of being able to hold down a control node and cause it to be 'impressed' into the UI isn't supported.
- ASImageNode. This has about 25% focus engine support. This is a lot trickier and would love some of community to help out on this. The built in effects of UIImageView when `.adjustsImageWhenAncestorFocused = YES` are gorgeous and would need to be replicated in order to use it in production. Also sometimes the focus engine effects aren't escaped properly (in the current implementation)
- Since PINRemoteImage is now a subspec of ASDK then we will need to enable tvOS support for that project too, but I doubt that this would be very hard, maybe @garrettmoon has more info on this? Happy to do this piece of work in a new PR.

Once ASImageNode is complete then the next piece of work would be to make it work inside a ASCellNode for use with ASCollection/TableView. That would be mostly it, in my opinion. So not huge amounts of work but just need to perfect certain aspects of ASDK in order for it to be truly viable.

Obviously other nodes will need to be tested when we get to that but once these points are done then I'd be confident with moving ahead. Otherwise I might have to reside to use UICollectionView's with UICollectionViewCells and UIImageView's and only use ASDK for sub views which wouldn't be that great!

cc @levi @nguyenhuy @Adlai-Holler 
",aaronschubert0,garrettmoon
1273,2016-02-25 09:39:10,"Hi @appleguy, apologies for not being as involved lately but have finally gotten some good time for tvOS support. 

Here is the current state of ASDK on tvOS in my opinion (after this PR):
- ASControlNode. The base class has 95% focus engine support. This is basically complete all for the fact that currently I wasn't able to find a way to receive a long press event (gesture recognizer didn't work). So the default behaviour of being able to hold down a control node and cause it to be 'impressed' into the UI isn't supported.
- ASImageNode. This has about 25% focus engine support. This is a lot trickier and would love some of community to help out on this. The built in effects of UIImageView when `.adjustsImageWhenAncestorFocused = YES` are gorgeous and would need to be replicated in order to use it in production. Also sometimes the focus engine effects aren't escaped properly (in the current implementation)
- Since PINRemoteImage is now a subspec of ASDK then we will need to enable tvOS support for that project too, but I doubt that this would be very hard, maybe @garrettmoon has more info on this? Happy to do this piece of work in a new PR.

Once ASImageNode is complete then the next piece of work would be to make it work inside a ASCellNode for use with ASCollection/TableView. That would be mostly it, in my opinion. So not huge amounts of work but just need to perfect certain aspects of ASDK in order for it to be truly viable.

Obviously other nodes will need to be tested when we get to that but once these points are done then I'd be confident with moving ahead. Otherwise I might have to reside to use UICollectionView's with UICollectionViewCells and UIImageView's and only use ASDK for sub views which wouldn't be that great!

cc @levi @nguyenhuy @Adlai-Holler 
",aaronschubert0,appleguy
1273,2016-02-25 09:39:10,"Hi @appleguy, apologies for not being as involved lately but have finally gotten some good time for tvOS support. 

Here is the current state of ASDK on tvOS in my opinion (after this PR):
- ASControlNode. The base class has 95% focus engine support. This is basically complete all for the fact that currently I wasn't able to find a way to receive a long press event (gesture recognizer didn't work). So the default behaviour of being able to hold down a control node and cause it to be 'impressed' into the UI isn't supported.
- ASImageNode. This has about 25% focus engine support. This is a lot trickier and would love some of community to help out on this. The built in effects of UIImageView when `.adjustsImageWhenAncestorFocused = YES` are gorgeous and would need to be replicated in order to use it in production. Also sometimes the focus engine effects aren't escaped properly (in the current implementation)
- Since PINRemoteImage is now a subspec of ASDK then we will need to enable tvOS support for that project too, but I doubt that this would be very hard, maybe @garrettmoon has more info on this? Happy to do this piece of work in a new PR.

Once ASImageNode is complete then the next piece of work would be to make it work inside a ASCellNode for use with ASCollection/TableView. That would be mostly it, in my opinion. So not huge amounts of work but just need to perfect certain aspects of ASDK in order for it to be truly viable.

Obviously other nodes will need to be tested when we get to that but once these points are done then I'd be confident with moving ahead. Otherwise I might have to reside to use UICollectionView's with UICollectionViewCells and UIImageView's and only use ASDK for sub views which wouldn't be that great!

cc @levi @nguyenhuy @Adlai-Holler 
",aaronschubert0,nguyenhuy
1273,2016-02-25 09:39:10,"Hi @appleguy, apologies for not being as involved lately but have finally gotten some good time for tvOS support. 

Here is the current state of ASDK on tvOS in my opinion (after this PR):
- ASControlNode. The base class has 95% focus engine support. This is basically complete all for the fact that currently I wasn't able to find a way to receive a long press event (gesture recognizer didn't work). So the default behaviour of being able to hold down a control node and cause it to be 'impressed' into the UI isn't supported.
- ASImageNode. This has about 25% focus engine support. This is a lot trickier and would love some of community to help out on this. The built in effects of UIImageView when `.adjustsImageWhenAncestorFocused = YES` are gorgeous and would need to be replicated in order to use it in production. Also sometimes the focus engine effects aren't escaped properly (in the current implementation)
- Since PINRemoteImage is now a subspec of ASDK then we will need to enable tvOS support for that project too, but I doubt that this would be very hard, maybe @garrettmoon has more info on this? Happy to do this piece of work in a new PR.

Once ASImageNode is complete then the next piece of work would be to make it work inside a ASCellNode for use with ASCollection/TableView. That would be mostly it, in my opinion. So not huge amounts of work but just need to perfect certain aspects of ASDK in order for it to be truly viable.

Obviously other nodes will need to be tested when we get to that but once these points are done then I'd be confident with moving ahead. Otherwise I might have to reside to use UICollectionView's with UICollectionViewCells and UIImageView's and only use ASDK for sub views which wouldn't be that great!

cc @levi @nguyenhuy @Adlai-Holler 
",aaronschubert0,Adlai-Holler
1270,2016-02-24 23:22:14,"@appleguy This is pretty critical, since if you have a live map and it leaves the display range but stays in the fetch data range, and you scroll back to it, your map will be gone!

I used ASPerformBlockOnMainThread because I believe `fetchData` and `clearFetchedData` may be called off the main thread. If that's not correct, or some other approach is needed, let me know.
",Adlai-Holler,appleguy
1270,2016-02-25 00:59:40,"@Adlai-Holler as of today they are never called off main, but I think we should make that API change for 2.0.  cc @maicki, would you be interested in looking at a couple structural upgrades to the range controller that would allow us to reduce main thread overhead (quite significantly, actually) by calling the display / fetchData methods off of main?
",appleguy,maicki
1268,2016-02-24 19:11:58,"Initialize `_asyncDelegateImplementsScrollviewDidScroll` so we forward `scrollViewDidScroll:` calls correctly.
@Xinchi 
",eanagel,Xinchi
1268,2016-02-24 19:13:29,"@appleguy Can you take a look at this one when you get a chance? I need this fix to implement virtualization.
",eanagel,appleguy
1264,2016-02-23 20:31:48,"@appleguy Any ideas?
",eanagel,appleguy
1264,2016-02-24 06:05:19,"@nguyenhuy thanks for jumping on this! @eanagel give it a try, post further questions any time - feel free to close this one out if it works for you.  @RCacheaux, @lappp9 can you make sure the static spec is covered briefly in your tutorial?
",appleguy,RCacheaux
1264,2016-02-24 06:05:19,"@nguyenhuy thanks for jumping on this! @eanagel give it a try, post further questions any time - feel free to close this one out if it works for you.  @RCacheaux, @lappp9 can you make sure the static spec is covered briefly in your tutorial?
",appleguy,lappp9
1263,2016-02-23 17:37:36,"Talked to @nguyenhuy and it sounds like there wasn't any need for disabling animations during this resize operation. Enabling this fixes a few animation issues we've been seeing in m3 as of late.
",levi,nguyenhuy
1262,2016-03-15 06:51:38,"@ekurutepe @erichoracek - hey guys, sorry I am just not going to have a chance to look into this for at least a few weeks. We are just a matter of about 3 weeks from the largest application launch in Pinterest history, and so I have to focus on that before Learning more about Carthage.

If either of you are able to fix this, I would be really thrilled to merge the change. I am very interested in ensuring support for Carthage is both fully integrated and reliable, and can also commit to providing binary builds of future releases, but only if tooling like this can be put in place by the community. Thanks a lot for any help you can provide!
",appleguy,erichoracek
1260,2016-02-23 01:22:20,"The current implementation of this method inside `ASPagerNode.m` is:



ASDataController calls this method off the main thread, but this method may access `self.view.bounds.size` which is a violation of UIKit's main-thread requirement. @levi Thoughts?
",Adlai-Holler,levi
1260,2016-02-29 07:13:55,"@Adlai-Holler thanks for reporting this. Ironically, before I read this issue, I just recently discovered that we were calling this method off of the main thread. I think this is a much more important issue than just the pager implementation, because we are passing an index Path here and so there is a data model consistency issue just as there would be if we requested actual nodes in this way.

I think it is rare in practice for developers to have an implementation of this method where this is a critical problem, but for those who do, it could result in a pretty serious issue.  @nguyenhuy is currently working on a fix, but we will see if it gets into the next release. I have a pull request up that Restore is the behavior of previous versions of the framework, but it does not fix this particular issue.

I agree with you that we can change the minimum value to be the same as the maximum so that the page size is by default guaranteed to match the bound size.
",appleguy,nguyenhuy
1257,2016-02-23 02:49:15,"@appleguy OK I ditched the stack locker objects. Thoughts on the style here? I'd like to use an actual {} scope but I'd have to declare the variables in advance which feels a little cumbersome.
",Adlai-Holler,appleguy
1256,2016-02-22 16:58:46,"@appleguy Wow this feels better! Thanks for helping me get the level of quality here up :+1: 
",Adlai-Holler,appleguy
1256,2016-02-22 17:09:59,"@appleguy You requested an assertion in ASDisplayNodeShouldApplyBridgedWriteToView that the lock is held. How should I implement that? ASDN::Mutex doesn't seem to have any way to check the lock, or maybe I'm dumb, or both.
",Adlai-Holler,appleguy
1256,2016-02-22 23:56:48,"Huh, a random ASImageDownloader failure and a timeout. Tests are passing locally. Maybe the internet connection on the test machine is bad? @appleguy Mind triggering a rebuild?
",Adlai-Holler,appleguy
1251,2016-02-22 17:30:46,"@appleguy We decided to integrate ASDK to our project which uses Carthage. With the current umbrella header, the built framework causes warnings to be thrown when consumers import it as a module. 

Since I'm pretty new to the project and I'm not sure about the purpose of different headers, I made the minimally invasive set of changes to make the framework target build with the correct module headers and get rid of the warnings. 

I actually assumed that the _ headers are not meant to be public the build failed when I removed them from the umbrella header. So it seems like there is some house-keeping work necessary to ensure everything builds fine and with the correct visibility. 

If you can provide me with some pointers on which headers should not be visible publicly, I'm happy to move things around and clean up the headers. 
",ekurutepe,appleguy
1246,2016-02-20 06:25:40,"This is a very exciting capability to have! Thank you, @Xinchi !  cc @Adlai-Holler
",appleguy,Adlai-Holler
1242,2016-03-01 07:01:09,"@levi it does exist for collection today, right?  just checking.

@Adlai-Holler thanks for filing this.  @nguyenhuy confirmed it would be easy to add after his recent refactor, so we should try to do this in the next month before 2.0GM.
",appleguy,nguyenhuy
1241,2016-02-23 04:43:48,"@garrettmoon, could you investigate? I'd like to ship 1.9.7 tomorrow, so ideally we can fix this soon.
",appleguy,garrettmoon
1238,2016-06-24 07:37:35,"@pilot34: Thanks for trying out the PR and reporting back to us! @Adlai-Holler is planning on investigating supplementary nodes in the next few days. Hopefully he will have a fix for you soon. 
",hannahmbanana,Adlai-Holler
1238,2016-07-10 05:53:38,"@pilot34 thanks for all the details here, including trying out the PR, and sharing your test case.  It is extremely valuable and appreciated.

We just landed #1773, but I have opened a detailed task in our internal bug tracker Ship for @Adlai-Holler to continue his thrash tester implementation and audit of this code.  We should have a fix in the next ~2 weeks.
",appleguy,Adlai-Holler
1236,2016-02-18 06:30:56,"@garrettmoon, @Adlai-Holler -- any ideas on the scenario that would cause this? If it is of no concern that this is possible, I'm happy to merge this.
",appleguy,garrettmoon
1236,2016-02-18 06:30:56,"@garrettmoon, @Adlai-Holler -- any ideas on the scenario that would cause this? If it is of no concern that this is possible, I'm happy to merge this.
",appleguy,Adlai-Holler
1235,2016-02-17 03:47:16,"A good old fashioned main-thread short-circuit for our image loading. @appleguy 
",Adlai-Holler,appleguy
1233,2016-02-16 23:36:42,"@appleguy I decided to run this alongside the existing cables for `_ASTableViewCellDelegate`. 

It works great! With this change, I was able to ensure the first cell in a presented table view was rendered before it came on screen! :zap: 
",Adlai-Holler,appleguy
1232,2016-02-18 06:29:30,"cc @levi, @Adlai-Holler, @nguyenhuy -- any tips?
",appleguy,levi
1232,2016-02-18 06:29:30,"cc @levi, @Adlai-Holler, @nguyenhuy -- any tips?
",appleguy,nguyenhuy
1232,2016-02-18 06:29:30,"cc @levi, @Adlai-Holler, @nguyenhuy -- any tips?
",appleguy,Adlai-Holler
1230,2016-02-16 19:30:19,"@adlai-holler @appleguy @rahul-malik

What we are currently doing when batchUpdating:
1. remove the delete items/sections from internal datasource
2. remove the reloading items/section from internal datasource
3. insert reloading items/section from internal datasource
4. insert the insertion items/sections
5. call [super performBatchUpdate] when all nodes are completed.

However, even with index shifting, we run into crashes at step 2 because after we delete items from internal data array in step 1, the indexes of reloads are no longer valid. e.g. original array (item0, item1), we delete item at 0, and reload item at 1. after removing item 0 from internal data array, we try to remove item at index 1, and it crashes.

I think the most straight forward way for us to handle reloads is to just split the changes into deletes and inserts and coalesce them with the existing deletes and inserts.

Right now it's working for all my tests, but they are probably not holistic.

Thoughts?
",binl,appleguy
1230,2016-02-16 19:30:19,"@adlai-holler @appleguy @rahul-malik

What we are currently doing when batchUpdating:
1. remove the delete items/sections from internal datasource
2. remove the reloading items/section from internal datasource
3. insert reloading items/section from internal datasource
4. insert the insertion items/sections
5. call [super performBatchUpdate] when all nodes are completed.

However, even with index shifting, we run into crashes at step 2 because after we delete items from internal data array in step 1, the indexes of reloads are no longer valid. e.g. original array (item0, item1), we delete item at 0, and reload item at 1. after removing item 0 from internal data array, we try to remove item at index 1, and it crashes.

I think the most straight forward way for us to handle reloads is to just split the changes into deletes and inserts and coalesce them with the existing deletes and inserts.

Right now it's working for all my tests, but they are probably not holistic.

Thoughts?
",binl,rahul-malik
1227,2016-02-16 19:29:18,"@smyrgl, we would be glad to take this as long as it is off by default, because WebP adds a fairly significant amount to the compilation time in resulting binary size. My understanding is that a similar set up is already in place for FLAnimatedImage, in that it can be enabled but is off by default. @garrettmoon is the author of the PINRemoteImage framework and implementer of the integration with ASDK.
",appleguy,garrettmoon
1220,2016-02-12 07:57:43,"Addressed issues @Adlai-Holler mentioned in the [previous PR](https://github.com/facebook/AsyncDisplayKit/pull/1219)

Added an internal API:
`- (void)reloadRowsAtIndexPaths:(NSArray *)indexPaths withIndexPathsAfterUpdates:(NSArray *)indexPathAfterUpdates withAnimationOptions:(ASDataControllerAnimationOptions)animationOptions`
because with reloads as we just delete+insert them, and after the inserted nodes are completed, we call the super methods on the UICollectionView. This means that the delete indexPaths should be current and insert indexPaths should be future, which will be different in many cases, but we are passing through the same set.

@appleguy @rahul-malik

We need a lot of testing on this, I'll try to write a testing app soon, but I'm really out of cycles at the moment.
",binl,appleguy
1220,2016-02-12 07:57:43,"Addressed issues @Adlai-Holler mentioned in the [previous PR](https://github.com/facebook/AsyncDisplayKit/pull/1219)

Added an internal API:
`- (void)reloadRowsAtIndexPaths:(NSArray *)indexPaths withIndexPathsAfterUpdates:(NSArray *)indexPathAfterUpdates withAnimationOptions:(ASDataControllerAnimationOptions)animationOptions`
because with reloads as we just delete+insert them, and after the inserted nodes are completed, we call the super methods on the UICollectionView. This means that the delete indexPaths should be current and insert indexPaths should be future, which will be different in many cases, but we are passing through the same set.

@appleguy @rahul-malik

We need a lot of testing on this, I'll try to write a testing app soon, but I'm really out of cycles at the moment.
",binl,rahul-malik
1220,2016-02-12 07:57:43,"Addressed issues @Adlai-Holler mentioned in the [previous PR](https://github.com/facebook/AsyncDisplayKit/pull/1219)

Added an internal API:
`- (void)reloadRowsAtIndexPaths:(NSArray *)indexPaths withIndexPathsAfterUpdates:(NSArray *)indexPathAfterUpdates withAnimationOptions:(ASDataControllerAnimationOptions)animationOptions`
because with reloads as we just delete+insert them, and after the inserted nodes are completed, we call the super methods on the UICollectionView. This means that the delete indexPaths should be current and insert indexPaths should be future, which will be different in many cases, but we are passing through the same set.

@appleguy @rahul-malik

We need a lot of testing on this, I'll try to write a testing app soon, but I'm really out of cycles at the moment.
",binl,Adlai-Holler
1219,2016-02-11 22:16:41,"I'm basically updating the indexPaths of all the reloads based on any deletion/insertions before it.

Here's the verified UIKit behavior, for reference:
**delete/reload** indexPaths that you pass in should all be their*\* current*\* indexPaths
**insert** indexPaths that you pass in should all be their **future** indexPaths after deletions

@appleguy @rahul-malik @Adlai-Holler
",binl,appleguy
1219,2016-02-11 22:16:41,"I'm basically updating the indexPaths of all the reloads based on any deletion/insertions before it.

Here's the verified UIKit behavior, for reference:
**delete/reload** indexPaths that you pass in should all be their*\* current*\* indexPaths
**insert** indexPaths that you pass in should all be their **future** indexPaths after deletions

@appleguy @rahul-malik @Adlai-Holler
",binl,rahul-malik
1219,2016-02-11 22:16:41,"I'm basically updating the indexPaths of all the reloads based on any deletion/insertions before it.

Here's the verified UIKit behavior, for reference:
**delete/reload** indexPaths that you pass in should all be their*\* current*\* indexPaths
**insert** indexPaths that you pass in should all be their **future** indexPaths after deletions

@appleguy @rahul-malik @Adlai-Holler
",binl,Adlai-Holler
1212,2016-02-10 09:37:03,"@appleguy @rahul-malik @nguyenhuy 
",binl,nguyenhuy
1212,2016-02-10 09:37:03,"@appleguy @rahul-malik @nguyenhuy 
",binl,appleguy
1212,2016-02-10 09:37:03,"@appleguy @rahul-malik @nguyenhuy 
",binl,rahul-malik
1210,2016-02-09 22:21:47,"@jamesgpearce @appleguy 
",bhamodi,appleguy
1210,2016-02-09 22:21:47,"@jamesgpearce @appleguy 
",bhamodi,jamesgpearce
1208,2016-02-09 20:37:22,"@smyrgl @binl @nguyenhuy is this addressed by https://github.com/facebook/AsyncDisplayKit/pull/1207 ?
",appleguy,nguyenhuy
1208,2016-02-10 06:22:26,"@Adlai-Holler -- to be honest, the initial signs indicate that the best fix for this might be illuminating thread affinity. Thread affinity is the only reason why there is a check for whether or not the node is loaded in the data controller layout pass, and it is definitely suboptimal.

@levi ultimately this also relates to your work, in that we will want the notion of the ""pending layout"" that we discussed today, in order to gracefully support asynchronous measurement for nodes that have already been loaded and even are currently onscreen.

@rahul-malik I think the modifications we made it in you're awesome diff to add support for node blocks caused the recent change in behavior, but don't worry; that change is overall much more important for the framework, and in the amazingly fast progress the community is making towards 2.0, I feel we should fix forward with the equally significant patches on their way in from Levi and Adlai.
",appleguy,levi
1208,2016-02-10 06:22:26,"@Adlai-Holler -- to be honest, the initial signs indicate that the best fix for this might be illuminating thread affinity. Thread affinity is the only reason why there is a check for whether or not the node is loaded in the data controller layout pass, and it is definitely suboptimal.

@levi ultimately this also relates to your work, in that we will want the notion of the ""pending layout"" that we discussed today, in order to gracefully support asynchronous measurement for nodes that have already been loaded and even are currently onscreen.

@rahul-malik I think the modifications we made it in you're awesome diff to add support for node blocks caused the recent change in behavior, but don't worry; that change is overall much more important for the framework, and in the amazingly fast progress the community is making towards 2.0, I feel we should fix forward with the equally significant patches on their way in from Levi and Adlai.
",appleguy,rahul-malik
1208,2016-02-10 06:22:26,"@Adlai-Holler -- to be honest, the initial signs indicate that the best fix for this might be illuminating thread affinity. Thread affinity is the only reason why there is a check for whether or not the node is loaded in the data controller layout pass, and it is definitely suboptimal.

@levi ultimately this also relates to your work, in that we will want the notion of the ""pending layout"" that we discussed today, in order to gracefully support asynchronous measurement for nodes that have already been loaded and even are currently onscreen.

@rahul-malik I think the modifications we made it in you're awesome diff to add support for node blocks caused the recent change in behavior, but don't worry; that change is overall much more important for the framework, and in the amazingly fast progress the community is making towards 2.0, I feel we should fix forward with the equally significant patches on their way in from Levi and Adlai.
",appleguy,Adlai-Holler
1208,2016-02-11 08:49:05,"@smyrgl thanks for the information!  It definitely helps clarify the issue.

Locking overhead is one of the most measurable parts of AsyncDisplayKit on the main thread with app architectures that minimize their own usage of main.  That said, the deadlock I mentioned in the commit log was obviously the prompt to investigate the change, which is far as I can tell does not compromise thread safety.

It is very complex to use Core Data in an app with multithreaded UI. This was experience in the main Facebook app with its architecture before ASDK & ComponentKit.  It was also experienced when building the Paper app which was based on Core Data for the first year of its development until it was ported off of it before launch.

The framework is one of the best in the world for dealing with certain types of data sets, and is also used by one of the very best contributors to the project (@Adlai-Holler).  Fortunately, the source of the deadlock can be very easily understood based on the AsyncDisplayKit threading model. Unfortunately, there is no documentation written about this.  The three part tutorial series from Ray Wenderlich may have an opportunity to cover this in the third tutorial, but I will definitely make sure it is added to the website documentation in the next couple months.

Specifically, the framework requires that background threads never synchronously wait on the main thread. The main thread is allowed to synchronously wait on any background thread, As this is necessary in a variety of URI timing sensitive operations that desire explicitly synchronous layout or display.

I think it would be very interesting to discuss this with anyone in the community who has better experience with Core Data than I do, as I am a couple years out of date (and ASDK itself was different then).  One thing that we'll almost certainly help your app architecture overcome this in a reliable and graceful way is the change from @Adlai-Holler (surprise!) That he is planning to finish in the next few days, in order to remove thread affinity assertions and oh allow even UIKit and CA bridge properties to be set in the background (even after isNodeLoaded).

It will not facilitate reading the values of /bridged/ properties in that same situation, but this is very rare and almost always possible to work around easily.  Reading is possible from all ASDK properties like attributedString, URL, image, are expected by the framework to be threadsafe (locking is practiced quite consistently in the framework, though some ~20% may need auditing - these cases are almost inconceivable to use in a concurrent way).

Thanks for your email, really glad to be in touch with you and excited to find a solution together!
",appleguy,Adlai-Holler
1208,2016-02-12 17:45:17,"@appleguy @Adlai-Holler Ahhhhh...that's interesting and not something I was aware of but it makes sense.  Just one point of clarification: I assume when you say that I can't wait on the main thread from a background thread what you really mean is that I can't wait on an ADK queue background thread for the main thread?  In other words this would be ok?


",smyrgl,Adlai-Holler
1208,2016-12-12 18:29:18,"Leaving this in the backlog, but @appleguy think's @Adlai-Holler is the best fit.",garrettmoon,Adlai-Holler
1207,2016-02-09 19:26:51,"@levi @appleguy @nguyenhuy 
When user performs a batchUpdate on a collectionView and combines insertions and reloads:
e.g.



At this point, the data sources for these rows should've updated, meaning:



With our current implementation, when you try to update row at old index 3:
You either pass in the index 3:



Or you pass in the index 4:



Therefore, Update/Reloads should happen after insertion/deletions.
",binl,levi
1207,2016-02-09 19:26:51,"@levi @appleguy @nguyenhuy 
When user performs a batchUpdate on a collectionView and combines insertions and reloads:
e.g.



At this point, the data sources for these rows should've updated, meaning:



With our current implementation, when you try to update row at old index 3:
You either pass in the index 3:



Or you pass in the index 4:



Therefore, Update/Reloads should happen after insertion/deletions.
",binl,appleguy
1207,2016-02-09 19:26:51,"@levi @appleguy @nguyenhuy 
When user performs a batchUpdate on a collectionView and combines insertions and reloads:
e.g.



At this point, the data sources for these rows should've updated, meaning:



With our current implementation, when you try to update row at old index 3:
You either pass in the index 3:



Or you pass in the index 4:



Therefore, Update/Reloads should happen after insertion/deletions.
",binl,nguyenhuy
1207,2016-02-10 02:35:50,"Thank you for bringing this up! This is hugely important. I like this change, but I believe we need to map the reloaded indexes to their after-the-update values. The indexes the user provides us for reloads are before-the-update indexes, so as soon as we process any inserts/deletes, those indexes are invalid.

_ASHierarchyChangeSet already has `newSectionForOldSection` so what we need to do is write a corresponding `newIndexPathForOldIndexPath` method. Then use those methods to map all the reloaded indexes/paths to their new values, and then call `[super reload…]` using those new indexes.

`newIndexPathForOldIndexPath` is a medium-difficulty task, if we want it to be efficient.

The first part is easy – use newSectionForOldSection to see what new section the item corresponds to. This should never return `NSNotFound` because we filter out reloads that target inserted/reloaded sections.

The harder part is, we need to compute a pair of NSIndexSets for each section that was modified, and just like in `newSectionForOldSection`, we'll use two calls to `countOfIndexesInRange` to compute the new item index, reading the deletes from the old section and inserts from the new one.

Here's an example implementation:



Also, we need to fix the implementation of `newSectionForOldSection` because as I look at it, I see it uses `[_insertedSections countOfIndexesInRange:]` to do inserts, which isn't safe because of the way a prior insert can make a later insert affect the given item. That newSectionForOldSection should compute the new section using the same method I showed above, with `enumerateIndexesUsingBlock`. 

Are you up for handling this? I can absolutely answer any questions or trouble you encounter but I'm a bit bandwidth-limited right now. Also @appleguy should take a looky-loo.
",Adlai-Holler,appleguy
1205,2016-02-09 06:07:13,"@Adlai-Holler lol!  @garrettmoon had just noticed / reported this behavior on Friday.

If either of you could put up a diff, (and fix that open brace too!), I definitely don't think this is a reasonable behavior.

Not that we should be optimizing for a no cache case, but the only reasonable thing I can imagine doing would be to expand the fetch data range so we keep Data a bit longer... But this is not something we should worry about right now,
",appleguy,garrettmoon
1204,2016-02-08 23:33:54,"Hey @secretiverhyme, I was trying to update the documentation on the .org site but I'm running into some problems. 

What I tried to do was checking out the gh-pages branch, adding a page to it, and then pushing it back out.  When I do that I get an email from github saying that the build of my pages failed due to symlinks not existing.  

Is this the right way to go about editing the documentation or is there a better way?  I notice if you click [edit] on one of the pages it takes you do the markdown files in the /doc folder on the master branch.  Is editing these files the actual way to update the documentation?

I've never really used jekyll or gh-pages so I could be totally missing something simple!
",lappp9,secretiverhyme
1200,2016-02-09 06:21:30,"hmm, this is concerning... @knopp any possibility this is from your changes?  Although they have been stable in my use cases, I would like to push out a new release in less than a week to fix some important issues, including a swift build error. So we should make sure to do any final vetting on the new transaction system.

/Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKitTests/ASDisplayLayerTests.m:515: ((ASDisplayNodeRunRunLoopUntilBlockIsTrue(^BOOL{ return (layer2Delegate.displayCount == 1); })) is true) failed:
512   dispatch_resume([_ASDisplayLayer displayQueue]);
513   XCTAssertTrue(ASDisplayNodeRunRunLoopUntilBlockIsTrue(^BOOL{
514     return (layer2Delegate.displayCount == 1);
515   }));
      ~~~~
516 
517   // check layer1 has not had async display run
━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    ✗ -[_ASDisplayLayerTests testTransaction](30004 ms) (0)
    236 passed, 1 failed, 0 errored, 237 total (49162 ms)
Failures:
  0) -[_ASDisplayLayerTests testTransaction](AsyncDisplayKitTests.xctest)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
/Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKitTests/ASDisplayLayerTests.m:515: ((ASDisplayNodeRunRunLoopUntilBlockIsTrue(^BOOL{ return (layer2Delegate.displayCount == 1); })) is true) failed:
512   dispatch_resume([_ASDisplayLayer displayQueue]);
513   XCTAssertTrue(ASDisplayNodeRunRunLoopUntilBlockIsTrue(^BOOL{
514     return (layer2Delegate.displayCount == 1);
515   }));
      ~~~~
516 
517   // check layer1 has not had async display run
",appleguy,knopp
1199,2016-02-09 06:29:31,"Thanks @maicki !  cc @garrettmoon :) ++threadSafety
",appleguy,garrettmoon
1189,2016-02-05 19:34:23,"@maicki I would have never expected this!  Sorry for a much greater difficulty with this task than I would have expected :(
",appleguy,maicki
1187,2016-02-07 07:52:17,"@yxztj thanks **a lot** for creating the test project and reporting this.  We will figure this one out.

cc @nguyenhuy, @levi do you even have a guess as to what could cause this?
",appleguy,nguyenhuy
1187,2016-02-07 07:52:17,"@yxztj thanks **a lot** for creating the test project and reporting this.  We will figure this one out.

cc @nguyenhuy, @levi do you even have a guess as to what could cause this?
",appleguy,levi
1187,2016-11-18 22:38:22,"@maicki @yxztj can one of you verify this is fixed in master?  It should be.
",appleguy,maicki
1181,2016-02-04 23:22:58,"This caused an assertion failure for me because the data controller was trying to layout nodes to fit constrained size of (0,0). It's also a potential performance hazard if your user opens a giant feed and then immediately closes it and tries to do something else.

I'm honestly too scared to try to touch this one myself. My instinct would be, in `_layoutNode:withConstrainedSize:` to return early if `_dataSource` is nil. @nguyenhuy Thoughts?
",Adlai-Holler,nguyenhuy
1181,2016-02-07 07:18:13,"@Adlai-Holler Great find, thanks for reporting this. Certainly makes sense to me, and should not be too hard to fix; I had just never thought about this case, even though it is relatively obvious.

@rahul-malik, @lkzhao this is also close to code that you have recently changed, so if you feel motivated, it would be nice to fix this one soon.
",appleguy,rahul-malik
1181,2016-02-07 07:22:25,"cc @maicki this may also fit into your work.
",appleguy,maicki
1174,2016-02-04 04:10:43,"Hotfix for some layout issues seen in master by @samhsiung.
",levi,samhsiung
1171,2016-02-03 07:34:01,"Calls reloadData & reloadSection on UITableView/UICollectionView instead of deleting/inserting one by one.  
Similar to #1093.

Please review this but do not merge yet. still seeing that bug where collectionView will cause inconsistent crash when inserting rows unless [collectionView numberOfSections] is called before inserting.
@nguyenhuy 
@appleguy  
",lkzhao,nguyenhuy
1171,2016-02-03 07:34:01,"Calls reloadData & reloadSection on UITableView/UICollectionView instead of deleting/inserting one by one.  
Similar to #1093.

Please review this but do not merge yet. still seeing that bug where collectionView will cause inconsistent crash when inserting rows unless [collectionView numberOfSections] is called before inserting.
@nguyenhuy 
@appleguy  
",lkzhao,appleguy
1171,2016-02-04 06:25:07,"@lkzhao this is great, very glad to see this! Are there any areas in particular that I should focus on for review?  @nguyenhuy 's original disk to attempt something similar was reverted a couple times, but I can't remember if we ever really landed it after the second time… this this is a attempting to do something similar with a new approach, correct? Just want to make sure I understand where the prior one left off, it will not re-land again?
",appleguy,nguyenhuy
1170,2016-02-07 08:22:51,"Great report, thank you @dermotos.  cc @levi, can you ping Austin about this (not sure his Github handle) as he is looking at some ASViewController bridging stuff?  I think @nguyenhuy is also involved in that work (it is all related to the closeup pager).

I am not totally sure which of the three classes, if not all of them, will require changes. Ideally we can pass on these events to any UIViewController without depending on ASViewController, which might mean the change relates to ASCellNode's support for UIViewController containment, or simply ASPagerNode itself.
",appleguy,levi
1170,2016-02-07 08:22:51,"Great report, thank you @dermotos.  cc @levi, can you ping Austin about this (not sure his Github handle) as he is looking at some ASViewController bridging stuff?  I think @nguyenhuy is also involved in that work (it is all related to the closeup pager).

I am not totally sure which of the three classes, if not all of them, will require changes. Ideally we can pass on these events to any UIViewController without depending on ASViewController, which might mean the change relates to ASCellNode's support for UIViewController containment, or simply ASPagerNode itself.
",appleguy,nguyenhuy
1166,2016-02-07 07:40:47,"@levi the Ray Wenderlich three-part tutorial series should help this a lot.  @RCacheaux and @lappp9 are writing it now and it should be ready in a few weeks.  @nguyenhuy also linked to an interactive edu-game thing that tries to teach some of this stuff, but yours is a really excellent resource too.

@lappp9 maybe you could prioritize adding a new page to the.org website with a collection of links, Similar to the two interactive ones mentioned? Especially until the tutorial is available, and even after then, I think having a set of links to a wide variety of flex box related documentation and examples Will really help people get off the ground.  We can link to the page in questions here, and also add a callout to it on the homepage at some point. It would be really nice to do a very basic update to the homepage to callout a bullet list of some of the 2.0 features, and put the link to the layout spec resource page there.
",appleguy,RCacheaux
1166,2016-02-07 07:40:47,"@levi the Ray Wenderlich three-part tutorial series should help this a lot.  @RCacheaux and @lappp9 are writing it now and it should be ready in a few weeks.  @nguyenhuy also linked to an interactive edu-game thing that tries to teach some of this stuff, but yours is a really excellent resource too.

@lappp9 maybe you could prioritize adding a new page to the.org website with a collection of links, Similar to the two interactive ones mentioned? Especially until the tutorial is available, and even after then, I think having a set of links to a wide variety of flex box related documentation and examples Will really help people get off the ground.  We can link to the page in questions here, and also add a callout to it on the homepage at some point. It would be really nice to do a very basic update to the homepage to callout a bullet list of some of the 2.0 features, and put the link to the layout spec resource page there.
",appleguy,nguyenhuy
1166,2016-02-07 07:40:47,"@levi the Ray Wenderlich three-part tutorial series should help this a lot.  @RCacheaux and @lappp9 are writing it now and it should be ready in a few weeks.  @nguyenhuy also linked to an interactive edu-game thing that tries to teach some of this stuff, but yours is a really excellent resource too.

@lappp9 maybe you could prioritize adding a new page to the.org website with a collection of links, Similar to the two interactive ones mentioned? Especially until the tutorial is available, and even after then, I think having a set of links to a wide variety of flex box related documentation and examples Will really help people get off the ground.  We can link to the page in questions here, and also add a callout to it on the homepage at some point. It would be really nice to do a very basic update to the homepage to callout a bullet list of some of the 2.0 features, and put the link to the layout spec resource page there.
",appleguy,lappp9
1165,2016-02-02 16:33:34,"This may just be a misunderstanding of how I would achieve this in ASDK but I'm having trouble rendering nodes as subnodes of a ASScrollNode. This is what I'm doing:



Now coming from UIKit, I would imagine that I would have to add nodes as subnodes of self.backgroundNode. Like so



This works, in the sense that I can validate that the nodes are added as sub nodes, the trouble is that nodes aren't being rendered, it just causes a blank screen. 

My initial suspicion is that the layoutSpec that I've defined for `self` isn't being used when my 'child' nodes are being added to the `ASScrollNode`, is this a possibility? If so how would I go about fixing this?

Has anyone got any ideas?
cc @appleguy  @nguyenhuy 
",aaronschubert0,nguyenhuy
1165,2016-02-02 16:33:34,"This may just be a misunderstanding of how I would achieve this in ASDK but I'm having trouble rendering nodes as subnodes of a ASScrollNode. This is what I'm doing:



Now coming from UIKit, I would imagine that I would have to add nodes as subnodes of self.backgroundNode. Like so



This works, in the sense that I can validate that the nodes are added as sub nodes, the trouble is that nodes aren't being rendered, it just causes a blank screen. 

My initial suspicion is that the layoutSpec that I've defined for `self` isn't being used when my 'child' nodes are being added to the `ASScrollNode`, is this a possibility? If so how would I go about fixing this?

Has anyone got any ideas?
cc @appleguy  @nguyenhuy 
",aaronschubert0,appleguy
1164,2016-02-07 07:37:13,"@GitGadd this is a perfect form for this type of question. Sorry it took a week to get back to you, but I'm glad you asked.

In my opinion, in validating the collection review layout itself is too expensive to do every frame, although I know it is a relatively common practice. Once you were doing this, it is actually quite cheap in comparison to reload the item at the index Path being manipulated. Have you tried doing this?

Go ahead and also try calling -setNeedsLayout on the ASCellNode at that in next path. I believe this is set up to re-request the constrainedSizeForNodeAtIndexPath: from the data source.  cc @nguyenhuy who can correct me if this is wrong.

Definitely let me know the results you find, and this could make for a great example app or use case to discuss in one of the upcoming framework tutorials that are currently being written!

Also feel free to email me directly at asyncdisplaykit@gmail.com, any time.  I'll typically be able to reply more quickly, although it works best if you post here and give me a heads up in email with any other details you might not be able to share (such as code references from your app).  Sometimes other members of the community are able to reply more quickly.
",appleguy,nguyenhuy
1155,2016-02-02 00:22:19,"@appleguy Updated the diff to introduce `minimumTuningParameters`. Range controller now selects whether the normal or minimum ranges should be used. The minimum ones are used when the view is not visible, not scrolling or normal ranges were not used before. We switch to normal ones once user starts scrolling, which I think is a good signal. 

Working on a layout delegate that will trigger a switch to normal ranges once cells in minimum ones are taken cared of.
",nguyenhuy,appleguy
1147,2016-01-29 17:30:17,"Hey @appleguy, I added muting the video and a delegate method to override tap behavior.  
",lappp9,appleguy
1139,2016-01-28 22:16:12,"@nguyenhuy, @knopp, @levi do you have time to help me review this? Thanks for the change! Very glad to have some people helping out in this code in such a material way, @zintus <3 :)
",appleguy,nguyenhuy
1139,2016-01-28 22:16:12,"@nguyenhuy, @knopp, @levi do you have time to help me review this? Thanks for the change! Very glad to have some people helping out in this code in such a material way, @zintus <3 :)
",appleguy,knopp
1139,2016-01-28 22:16:12,"@nguyenhuy, @knopp, @levi do you have time to help me review this? Thanks for the change! Very glad to have some people helping out in this code in such a material way, @zintus <3 :)
",appleguy,levi
1139,2016-03-24 04:07:17,"@zintus thank you for this change!  Sorry it has taken this long to review it. This looks very good to me, but I am going to defer to the people who actively use this feature in their applications to make sure they have an opportunity to test it as well as do a quick review.

@eanagel, @Adlai-Holler — I think you both heavily rely on this content adjustment feature.  Thoughts?
",appleguy,eanagel
1139,2016-03-24 04:07:17,"@zintus thank you for this change!  Sorry it has taken this long to review it. This looks very good to me, but I am going to defer to the people who actively use this feature in their applications to make sure they have an opportunity to test it as well as do a quick review.

@eanagel, @Adlai-Holler — I think you both heavily rely on this content adjustment feature.  Thoughts?
",appleguy,Adlai-Holler
1139,2016-03-24 04:30:53,"I haven't used the content offset adjustment in a while so nothing useful from me. 😬

Sent from my iPhone

> On Mar 23, 2016, at 9:07 PM, appleguy notifications@github.com wrote:
> 
> @zintus thank you for this change! Sorry it has taken this long to review it. This looks very good to me, but I am going to defer to the people who actively use this feature in their applications to make sure they have an opportunity to test it as well as do a quick review.
> 
> @eanagel, @Adlai-Holler — I think you both heavily rely on this content adjustment feature. Thoughts?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",Adlai-Holler,eanagel
1139,2016-03-24 04:30:53,"I haven't used the content offset adjustment in a while so nothing useful from me. 😬

Sent from my iPhone

> On Mar 23, 2016, at 9:07 PM, appleguy notifications@github.com wrote:
> 
> @zintus thank you for this change! Sorry it has taken this long to review it. This looks very good to me, but I am going to defer to the people who actively use this feature in their applications to make sure they have an opportunity to test it as well as do a quick review.
> 
> @eanagel, @Adlai-Holler — I think you both heavily rely on this content adjustment feature. Thoughts?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",Adlai-Holler,Adlai-Holler
1139,2016-06-17 16:54:38,"@Adlai-Holler @maicki: This is just needs a line by line read by 1 of you to make sure there are no off-by one indexing issues or anything else. 
",hannahmbanana,maicki
1134,2016-01-28 05:34:21,"@appleguy and @yury  I tested it. All Worked! Thanks a lot for that. I try add Unit test check pls. #865 
",bimawa,appleguy
1134,2016-01-28 05:34:21,"@appleguy and @yury  I tested it. All Worked! Thanks a lot for that. I try add Unit test check pls. #865 
",bimawa,yury
1130,2016-01-28 04:06:25,"@Adlai-Holler
",appleguy,Adlai-Holler
1129,2016-01-27 23:00:07,"Often my default simulator is the iPhone 6s Plus and running tests fail because the snapshot tests are looking for a 3x image. @nguyenhuy mentioned that it's a pretty straight forward process, albeit I have no idea right now how the snapshot library works.
",levi,nguyenhuy
1125,2016-01-27 18:53:04,"so when someone is trying to insert/delete/update cells/sections at the same time can batch them in an easy fashion:



@appleguy @levi 
",binl,levi
1125,2016-01-27 18:53:04,"so when someone is trying to insert/delete/update cells/sections at the same time can batch them in an easy fashion:



@appleguy @levi 
",binl,appleguy
1123,2016-04-18 08:37:33,"[SocialAppLayoutSwift.zip](https://github.com/facebook/AsyncDisplayKit/files/223309/SocialAppLayoutSwift.zip)

@appleguy @yury @lakhman @aaronschubert0 @robmontesinos Attached is a working **swift** version of the **SocialAppLayout**. Add it to the -> https://github.com/facebook/AsyncDisplayKit/tree/master/examples for all the swift coders out there. @appleguy might need to look at the didselectrowatindexpath on the main viewcontroller something is funky when selecting the cell. 

Questions:
Why is the SocialAppLayout built with UIViewcontroller and ASTableView unlike the **Swift [Swift]** example project which uses ASViewController and ASTableNode?  
- is it possible to achieve this social layout with ASTableNode?
- should I try convert this SocialAppLayout swift version to use ASTableNode or would that be a waste of time?

Finally I noticed the SocialAppLayout uses ASControlNode for the buttons... why is that.... you guys built ASButtonNode? what are the benefits of using one over the other?
",alexrmacleod,appleguy
1123,2016-04-18 08:37:33,"[SocialAppLayoutSwift.zip](https://github.com/facebook/AsyncDisplayKit/files/223309/SocialAppLayoutSwift.zip)

@appleguy @yury @lakhman @aaronschubert0 @robmontesinos Attached is a working **swift** version of the **SocialAppLayout**. Add it to the -> https://github.com/facebook/AsyncDisplayKit/tree/master/examples for all the swift coders out there. @appleguy might need to look at the didselectrowatindexpath on the main viewcontroller something is funky when selecting the cell. 

Questions:
Why is the SocialAppLayout built with UIViewcontroller and ASTableView unlike the **Swift [Swift]** example project which uses ASViewController and ASTableNode?  
- is it possible to achieve this social layout with ASTableNode?
- should I try convert this SocialAppLayout swift version to use ASTableNode or would that be a waste of time?

Finally I noticed the SocialAppLayout uses ASControlNode for the buttons... why is that.... you guys built ASButtonNode? what are the benefits of using one over the other?
",alexrmacleod,yury
1121,2016-01-26 21:54:18,"Hey @levi 

I am seeing a bug with ASPagerNode that i believes stems from it's use of the `rangeController`, `ASDisplayNode::setInterfaceState` and this line: `ASRangeTuningParameters renderParams = { .leadingBufferScreenfuls = 1.0, .trailingBufferScreenfuls = 1.0 };`

When a pager has more than 3 pages, when viewing pages +2 or -2 away, `+drawRect` does not get called on any of the pager's subnodes.

It seems like when `setInterfaceState` turns on the display and `[self setDisplaySuspended:NO];` is called, the `setDisplaySuspended` function breaks on this line.
![screen shot 2016-01-26 at 12 24 15 pm](https://cloud.githubusercontent.com/assets/3641335/12593847/ff076660-c427-11e5-8caa-e43b0f359074.png)
which seems to indicate that displaySuspended gets set to 0 somehow.

lemme know if you need more details and/or would like me to create a sample project and thank you in advance!
",frankenthumbs,levi
1111,2016-01-25 21:44:06,"@yury thanks a lot for porting the other CK commits!!  @ocrickard anything else we should be aware of?  I wonder if there's a way to set up something similar to a Herald rule to notify me when text components change :)
",appleguy,ocrickard
1110,2016-01-25 22:03:40,"@appleguy as my debugging shows, `[self truncater]` is called only to get visibleRange to detect links. And it is to late at that moment.

Truncated should be initialized ahead of size calculation so it can actually truncate string in it's initializer.
@tomizimobile patch here https://github.com/facebook/AsyncDisplayKit/issues/1033 also init truncater ahead. 
",yury,tomizimobile
1110,2016-01-26 02:05:55,"Merging this for correctness now, optimization later with a test case.  Please email me at asyncdisplaykit@gmail.com with any other thoughts!  cc @tomizimobile
",appleguy,tomizimobile
1109,2016-02-07 07:11:18,"@Adlai-Holler - have you tried the whole module optimization in your app? Give it a whirl and let me know if it crashes the compiler… I'm really not sure if this is a framework problem, or some kind of interaction with Extensions or other code that @CodeEagle has in their application.
",appleguy,Adlai-Holler
1105,2016-01-25 02:44:08,"@knopp, please do take a look!  Is there any more efficient way you can think to do this?  I'm particularly bummed about creating all the index paths - I think we could make an alternate codepath that iterates over the nodes themselves, keeping a local integer of section and item number, doing something like the multidimensional helper function does internally by building up the index path by index - but not having to create a full array of them.  This might not help efficiency much, though it would also eliminate accessing the nodes out of the 2D array.
",appleguy,knopp
1105,2016-01-25 13:07:03,"I hear you, but in the end, you still need to check
fetchDataIndexPaths, displayIndexPaths and visibleIndexPaths, and you need
NSIndexPaths for that, don’t you? And you need to do it for every single
item. But with separate code path you could maybe at least
avoid NSMutableOrderedSet overhead, which miight not be small if you have
thousands of index paths.

-Matej

On Mon, Jan 25, 2016 at 3:44 AM, appleguy notifications@github.com wrote:

> @knopp https://github.com/knopp, please do take a look! Is there any
> more efficient way you can think to do this? I'm particularly bummed about
> creating all the index paths - I think we could make an alternate codepath
> that iterates over the nodes themselves, keeping a local integer of section
> and item number, doing something like the multidimensional helper function
> does internally by building up the index path by index - but not having to
> create a full array of them. This might not help efficiency much, though it
> 
> ## would also eliminate accessing the nodes out of the 2D array.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/1105
> Commit Summary
> - [ASRangeControllerBeta] Scan all nodes after edit operations.
> 
> File Changes
> - _M_ AsyncDisplayKit/Details/ASRangeControllerBeta.mm
>   https://github.com/facebook/AsyncDisplayKit/pull/1105/files#diff-0
>   (4)
> 
> Patch Links:
> - https://github.com/facebook/AsyncDisplayKit/pull/1105.patch
> - https://github.com/facebook/AsyncDisplayKit/pull/1105.diff
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/pull/1105.
",knopp,knopp
1101,2016-01-24 21:15:54,"cc @knopp, @nguyenhuy, @tomizimobile - please test it out!  BTW I did detailed performance checking on iPhone 4 and the performance difference is absolutely negligible compared to the other operations in this method.  I can think of a couple different optimizations but they're not worth pursuing at this time as there would be an increase in code complexity.
",appleguy,nguyenhuy
1101,2016-01-24 21:15:54,"cc @knopp, @nguyenhuy, @tomizimobile - please test it out!  BTW I did detailed performance checking on iPhone 4 and the performance difference is absolutely negligible compared to the other operations in this method.  I can think of a couple different optimizations but they're not worth pursuing at this time as there would be an increase in code complexity.
",appleguy,knopp
1101,2016-01-24 21:15:54,"cc @knopp, @nguyenhuy, @tomizimobile - please test it out!  BTW I did detailed performance checking on iPhone 4 and the performance difference is absolutely negligible compared to the other operations in this method.  I can think of a couple different optimizations but they're not worth pursuing at this time as there would be an increase in code complexity.
",appleguy,tomizimobile
1100,2016-01-24 08:58:03,"This also fixes three fairly subtle but serious bugs: #1076, #1046 and #1031.

cc @aaronschubert0 - note I ended up tracing a logic flaw to the most recent patch in this area (#1079), which altered the inset handling with the shadower.  I'm still glad you put up this change because it did very clearly appear to improve the behavior, but worsened other situations, like the centering case.  

@nvh - you'd be the most valuable tester, although I confirmed both types of clipping miscalculations very strategically recreated in your awesome sample app appear fully corrected.

@yxztj - I actually was using your sample app for the majority of the time it took me to carefully understand and adjust this code.

@bsmith11, @timominous, @AttilaTheFun, @nguyenhuy, @1nput0utput, @stowy, @lappp9, @RCacheaux, @samhsiung, @binl, @rcancro - Please join us in testing!

I'm excited that I feel confident working in this part of the codebase; it's probably one of the few scary corners remaining to be confronted.  One of the primary needs now is a big expansion in automated performance and logic testing...

The overall code quality and engineering style in the framework, to me, feels awesome. I'm glad to be working on continuing to do industry-first things as a community together!
",appleguy,aaronschubert0
1100,2016-01-24 08:58:03,"This also fixes three fairly subtle but serious bugs: #1076, #1046 and #1031.

cc @aaronschubert0 - note I ended up tracing a logic flaw to the most recent patch in this area (#1079), which altered the inset handling with the shadower.  I'm still glad you put up this change because it did very clearly appear to improve the behavior, but worsened other situations, like the centering case.  

@nvh - you'd be the most valuable tester, although I confirmed both types of clipping miscalculations very strategically recreated in your awesome sample app appear fully corrected.

@yxztj - I actually was using your sample app for the majority of the time it took me to carefully understand and adjust this code.

@bsmith11, @timominous, @AttilaTheFun, @nguyenhuy, @1nput0utput, @stowy, @lappp9, @RCacheaux, @samhsiung, @binl, @rcancro - Please join us in testing!

I'm excited that I feel confident working in this part of the codebase; it's probably one of the few scary corners remaining to be confronted.  One of the primary needs now is a big expansion in automated performance and logic testing...

The overall code quality and engineering style in the framework, to me, feels awesome. I'm glad to be working on continuing to do industry-first things as a community together!
",appleguy,rcancro
1100,2016-01-24 08:58:03,"This also fixes three fairly subtle but serious bugs: #1076, #1046 and #1031.

cc @aaronschubert0 - note I ended up tracing a logic flaw to the most recent patch in this area (#1079), which altered the inset handling with the shadower.  I'm still glad you put up this change because it did very clearly appear to improve the behavior, but worsened other situations, like the centering case.  

@nvh - you'd be the most valuable tester, although I confirmed both types of clipping miscalculations very strategically recreated in your awesome sample app appear fully corrected.

@yxztj - I actually was using your sample app for the majority of the time it took me to carefully understand and adjust this code.

@bsmith11, @timominous, @AttilaTheFun, @nguyenhuy, @1nput0utput, @stowy, @lappp9, @RCacheaux, @samhsiung, @binl, @rcancro - Please join us in testing!

I'm excited that I feel confident working in this part of the codebase; it's probably one of the few scary corners remaining to be confronted.  One of the primary needs now is a big expansion in automated performance and logic testing...

The overall code quality and engineering style in the framework, to me, feels awesome. I'm glad to be working on continuing to do industry-first things as a community together!
",appleguy,stowy
1100,2016-01-24 08:58:03,"This also fixes three fairly subtle but serious bugs: #1076, #1046 and #1031.

cc @aaronschubert0 - note I ended up tracing a logic flaw to the most recent patch in this area (#1079), which altered the inset handling with the shadower.  I'm still glad you put up this change because it did very clearly appear to improve the behavior, but worsened other situations, like the centering case.  

@nvh - you'd be the most valuable tester, although I confirmed both types of clipping miscalculations very strategically recreated in your awesome sample app appear fully corrected.

@yxztj - I actually was using your sample app for the majority of the time it took me to carefully understand and adjust this code.

@bsmith11, @timominous, @AttilaTheFun, @nguyenhuy, @1nput0utput, @stowy, @lappp9, @RCacheaux, @samhsiung, @binl, @rcancro - Please join us in testing!

I'm excited that I feel confident working in this part of the codebase; it's probably one of the few scary corners remaining to be confronted.  One of the primary needs now is a big expansion in automated performance and logic testing...

The overall code quality and engineering style in the framework, to me, feels awesome. I'm glad to be working on continuing to do industry-first things as a community together!
",appleguy,nguyenhuy
1100,2016-01-24 08:58:03,"This also fixes three fairly subtle but serious bugs: #1076, #1046 and #1031.

cc @aaronschubert0 - note I ended up tracing a logic flaw to the most recent patch in this area (#1079), which altered the inset handling with the shadower.  I'm still glad you put up this change because it did very clearly appear to improve the behavior, but worsened other situations, like the centering case.  

@nvh - you'd be the most valuable tester, although I confirmed both types of clipping miscalculations very strategically recreated in your awesome sample app appear fully corrected.

@yxztj - I actually was using your sample app for the majority of the time it took me to carefully understand and adjust this code.

@bsmith11, @timominous, @AttilaTheFun, @nguyenhuy, @1nput0utput, @stowy, @lappp9, @RCacheaux, @samhsiung, @binl, @rcancro - Please join us in testing!

I'm excited that I feel confident working in this part of the codebase; it's probably one of the few scary corners remaining to be confronted.  One of the primary needs now is a big expansion in automated performance and logic testing...

The overall code quality and engineering style in the framework, to me, feels awesome. I'm glad to be working on continuing to do industry-first things as a community together!
",appleguy,nvh
1100,2016-01-24 08:58:03,"This also fixes three fairly subtle but serious bugs: #1076, #1046 and #1031.

cc @aaronschubert0 - note I ended up tracing a logic flaw to the most recent patch in this area (#1079), which altered the inset handling with the shadower.  I'm still glad you put up this change because it did very clearly appear to improve the behavior, but worsened other situations, like the centering case.  

@nvh - you'd be the most valuable tester, although I confirmed both types of clipping miscalculations very strategically recreated in your awesome sample app appear fully corrected.

@yxztj - I actually was using your sample app for the majority of the time it took me to carefully understand and adjust this code.

@bsmith11, @timominous, @AttilaTheFun, @nguyenhuy, @1nput0utput, @stowy, @lappp9, @RCacheaux, @samhsiung, @binl, @rcancro - Please join us in testing!

I'm excited that I feel confident working in this part of the codebase; it's probably one of the few scary corners remaining to be confronted.  One of the primary needs now is a big expansion in automated performance and logic testing...

The overall code quality and engineering style in the framework, to me, feels awesome. I'm glad to be working on continuing to do industry-first things as a community together!
",appleguy,lappp9
1100,2016-01-24 08:58:03,"This also fixes three fairly subtle but serious bugs: #1076, #1046 and #1031.

cc @aaronschubert0 - note I ended up tracing a logic flaw to the most recent patch in this area (#1079), which altered the inset handling with the shadower.  I'm still glad you put up this change because it did very clearly appear to improve the behavior, but worsened other situations, like the centering case.  

@nvh - you'd be the most valuable tester, although I confirmed both types of clipping miscalculations very strategically recreated in your awesome sample app appear fully corrected.

@yxztj - I actually was using your sample app for the majority of the time it took me to carefully understand and adjust this code.

@bsmith11, @timominous, @AttilaTheFun, @nguyenhuy, @1nput0utput, @stowy, @lappp9, @RCacheaux, @samhsiung, @binl, @rcancro - Please join us in testing!

I'm excited that I feel confident working in this part of the codebase; it's probably one of the few scary corners remaining to be confronted.  One of the primary needs now is a big expansion in automated performance and logic testing...

The overall code quality and engineering style in the framework, to me, feels awesome. I'm glad to be working on continuing to do industry-first things as a community together!
",appleguy,yxztj
1100,2016-01-24 08:58:03,"This also fixes three fairly subtle but serious bugs: #1076, #1046 and #1031.

cc @aaronschubert0 - note I ended up tracing a logic flaw to the most recent patch in this area (#1079), which altered the inset handling with the shadower.  I'm still glad you put up this change because it did very clearly appear to improve the behavior, but worsened other situations, like the centering case.  

@nvh - you'd be the most valuable tester, although I confirmed both types of clipping miscalculations very strategically recreated in your awesome sample app appear fully corrected.

@yxztj - I actually was using your sample app for the majority of the time it took me to carefully understand and adjust this code.

@bsmith11, @timominous, @AttilaTheFun, @nguyenhuy, @1nput0utput, @stowy, @lappp9, @RCacheaux, @samhsiung, @binl, @rcancro - Please join us in testing!

I'm excited that I feel confident working in this part of the codebase; it's probably one of the few scary corners remaining to be confronted.  One of the primary needs now is a big expansion in automated performance and logic testing...

The overall code quality and engineering style in the framework, to me, feels awesome. I'm glad to be working on continuing to do industry-first things as a community together!
",appleguy,RCacheaux
1100,2016-01-24 08:58:03,"This also fixes three fairly subtle but serious bugs: #1076, #1046 and #1031.

cc @aaronschubert0 - note I ended up tracing a logic flaw to the most recent patch in this area (#1079), which altered the inset handling with the shadower.  I'm still glad you put up this change because it did very clearly appear to improve the behavior, but worsened other situations, like the centering case.  

@nvh - you'd be the most valuable tester, although I confirmed both types of clipping miscalculations very strategically recreated in your awesome sample app appear fully corrected.

@yxztj - I actually was using your sample app for the majority of the time it took me to carefully understand and adjust this code.

@bsmith11, @timominous, @AttilaTheFun, @nguyenhuy, @1nput0utput, @stowy, @lappp9, @RCacheaux, @samhsiung, @binl, @rcancro - Please join us in testing!

I'm excited that I feel confident working in this part of the codebase; it's probably one of the few scary corners remaining to be confronted.  One of the primary needs now is a big expansion in automated performance and logic testing...

The overall code quality and engineering style in the framework, to me, feels awesome. I'm glad to be working on continuing to do industry-first things as a community together!
",appleguy,samhsiung
1098,2016-01-23 23:05:24,"@appleguy here is the new layout spec I wrote, based very much on the ASCenterLayoutSpec but with more versatility / functionality. Would be useful for example for my badge node in the cat sample, to position the badge in the bottom left or bottom right of the image, depending on RTL.

Haven't added any tests for it, not familiar with how they are implemented here.
",stowy,appleguy
1098,2016-01-24 01:17:08,"cc @rcancro, @nguyenhuy 
",appleguy,nguyenhuy
1098,2016-01-24 01:17:08,"cc @rcancro, @nguyenhuy 
",appleguy,rcancro
1098,2016-02-02 07:11:41,"@stowy @nguyenhuy thanks a lot for working together to refine this and make it production ready, especially including tests!

@Adlai-Holler, @RCacheaux, @lappp9, @rcancro, @levi what do you guys think we should do with the center layout spec? Keep it as is? Make it a special case built on top of this? Delete it entirely? Is there any more descriptive name for this class than Relative, especially because there is a relative type of dimension that doesn't relate to the alignment features of this class?
",appleguy,rcancro
1098,2016-02-02 07:11:41,"@stowy @nguyenhuy thanks a lot for working together to refine this and make it production ready, especially including tests!

@Adlai-Holler, @RCacheaux, @lappp9, @rcancro, @levi what do you guys think we should do with the center layout spec? Keep it as is? Make it a special case built on top of this? Delete it entirely? Is there any more descriptive name for this class than Relative, especially because there is a relative type of dimension that doesn't relate to the alignment features of this class?
",appleguy,Adlai-Holler
1098,2016-02-02 07:11:41,"@stowy @nguyenhuy thanks a lot for working together to refine this and make it production ready, especially including tests!

@Adlai-Holler, @RCacheaux, @lappp9, @rcancro, @levi what do you guys think we should do with the center layout spec? Keep it as is? Make it a special case built on top of this? Delete it entirely? Is there any more descriptive name for this class than Relative, especially because there is a relative type of dimension that doesn't relate to the alignment features of this class?
",appleguy,levi
1098,2016-02-02 07:11:41,"@stowy @nguyenhuy thanks a lot for working together to refine this and make it production ready, especially including tests!

@Adlai-Holler, @RCacheaux, @lappp9, @rcancro, @levi what do you guys think we should do with the center layout spec? Keep it as is? Make it a special case built on top of this? Delete it entirely? Is there any more descriptive name for this class than Relative, especially because there is a relative type of dimension that doesn't relate to the alignment features of this class?
",appleguy,lappp9
1098,2016-02-02 07:11:41,"@stowy @nguyenhuy thanks a lot for working together to refine this and make it production ready, especially including tests!

@Adlai-Holler, @RCacheaux, @lappp9, @rcancro, @levi what do you guys think we should do with the center layout spec? Keep it as is? Make it a special case built on top of this? Delete it entirely? Is there any more descriptive name for this class than Relative, especially because there is a relative type of dimension that doesn't relate to the alignment features of this class?
",appleguy,RCacheaux
1096,2016-01-23 19:49:08,"This adds a very small change on top of @aaronschubert0's original PR to make the dynamic framework build.

https://github.com/facebook/AsyncDisplayKit/pull/1059
",appleguy,aaronschubert0
1096,2016-01-23 20:28:57,"I am unusually excited to land this — thank you so much, @aaronschubert0 !
",appleguy,aaronschubert0
1094,2016-01-22 06:40:50,"@appleguy 
There's only one public interface that allows users to create a collectionNode/View with the new layoutFacilitator, and the interface is hidden in the +beta header.
",binl,appleguy
1088,2016-01-20 09:39:03,"@appleguy As discussed in #1078
",aaronschubert0,appleguy
1087,2016-01-20 09:30:33,"As specified in #1086. Hey @appleguy Turns out these links have been there all along but were just hidden since they were using http (I think). The img.shields.io is a bit unstable at times but seems to be the best solution so far. Will update in future if better solutions come up!
",aaronschubert0,appleguy
1087,2016-01-21 10:14:56,"@appleguy There doesn't seem to be a way to automatically pull the download numbers from Cocoapods and create a badge at the moment. So this adds a manual downloads badge. But it can easily be changed by altering the text in the URL. Maybe we can write a small function and submit a PR to the badges project (https://github.com/badges/shields) so that we can handle this automatically in the future.
",aaronschubert0,appleguy
1086,2016-01-20 08:40:09,"ASDK has over 115,000 downloads and is used in almost 1,700 apps, including 515 unique apps that are actively developing with it enough to have used pod install with it this week.  Pretty awesome!

http://cocoapods.org/pods/AsyncDisplayKit

Let's add a badge to showcase this.  This is an old task and may not explain how to add the badges correctly, but we should check it out.  @aaronschubert0 have you ever looked at this?

https://github.com/CocoaPods/CocoaPods/issues/1092
",appleguy,aaronschubert0
1084,2016-01-20 03:51:35,"@appleguy 
",lkzhao,appleguy
1081,2016-01-26 03:56:23,"@AttilaTheFun Do post any other questions!  @levi just started his first day at Pinterest working with me,and incidentally was the person who implemented / added support for supplementary nodes like headers in collections :)
",appleguy,levi
1079,2016-01-19 13:22:37,"Hey @appleguy This is to fix the bug specified in #1076. I'm not entirely sure this is the correct place in the stack to fix this issue. The issue stems from the fact that the `headIndent` property of NSAttributedString actually alters the origin of the boundRect rather than just increase it's size. This bug fix address this by incorporating the origin offset into the final size calculation.

The `tailIndent` property seems to break things even more, that can be fix in a future diff (haven't got to the bottom of that)
",aaronschubert0,appleguy
1078,2016-01-19 11:44:13,"Nice and easy fix.
Details: #1077 

@appleguy 
",aaronschubert0,appleguy
1075,2016-01-26 03:53:55,"@RCacheaux do you have any really early material you might be able to share here?  @lappp9?
",appleguy,RCacheaux
1075,2016-01-26 03:53:55,"@RCacheaux do you have any really early material you might be able to share here?  @lappp9?
",appleguy,lappp9
1071,2016-01-16 21:01:06,"So I was trying to convert some of my manual layout code to layout specs and I can't seem to figure out a good way to get my collection view headers to be the right size.  It seems like it should be really easy but I can't quite get it there.  The problem in my mind, is that I don't see a place to specify the size range for the layout spec.  Since the min is {0, 0} and the max is {375, 45} I'm getting a bar that only fills up half the width since the buttons are only so big.  Is there a way to get the stack layout to expand to take the entire width or a way to just specify the min and max for a collection views supplementary view? @nguyenhuy ?

<img width=""375"" alt=""screen shot 2016-01-16 at 2 56 14 pm"" src=""https://cloud.githubusercontent.com/assets/432875/12374446/7178d5f4-bc61-11e5-94dd-25070d7d698e.png"">

My layout spec:


- if the button names are confusing I'm in the middle of swapping out the buttons, lol

The desired look, in case my description wasn't clear:
<img width=""375"" alt=""screen shot 2016-01-16 at 3 20 09 pm"" src=""https://cloud.githubusercontent.com/assets/432875/12374564/b731a898-bc64-11e5-869b-f2bd8ce52c3b.png"">
",lappp9,nguyenhuy
1071,2016-01-17 17:33:51,"Sure, happy to help. 

The first thing to do (and seems like the missing piece here) is to tell the stack to fill the entire width available. There are a few ways that I can think of to achieve this:
1. Return a fixed constrained width (min width equals max width) via `-collectionView:constrainedSizeForSupplementaryNodeOfKind:atIndexPath:`. This method is defined by `ASCollectionViewLayoutInspecting` protocol. I honestly haven't played around with collection view inspector and so don't know off the top of my head where to implement/override this method. @levi must know though.
2. Wrap the entire stack inside a static spec, and assign to the stack a size range that has an exact 100% width. This way, even the constrained size given to the supplementary node has a min of {0, 0}, the stack will still be required to expand.
3. As a general tip, if you have a horizontal stack inside a vertical stack, make sure to set the horizontal stack's `alignSelf` property to `ASStackLayoutAlignSelfStretch`.

As soon as the stack is required to fill the entire width, it will try to figure out how to eat up that much space. Since none of the buttons can grow, justifyContent will be considered. I think you will use either ""space between"" or ""space around"", probably the former. You also may need to set `spacingBefore` for the first button and `spacingAfter` for the last button, or to wrap the stack inside an inset spec.

Let me know if this helps!
",nguyenhuy,levi
1071,2016-01-17 18:42:59,"Yeah, I would prefer using delegate method as well. Again, @levi knows about collection view layout more than me.
",nguyenhuy,levi
1065,2016-01-19 04:21:33,"@kielgillard thank you for reporting this.  I think this might be caused by https://github.com/facebook/AsyncDisplayKit/issues/1062

@Adlai-Holler, does that sound right to you?  Sorry for the short reply, I'm on a tight timeline for the next ~36 hours, but should be able to work on this on Wednesday afternoon!

@nguyenhuy, since you're one of the few Swift gurus at Pinterest, maybe you could take a look at this tomorrow?
",appleguy,nguyenhuy
1065,2016-01-19 04:21:33,"@kielgillard thank you for reporting this.  I think this might be caused by https://github.com/facebook/AsyncDisplayKit/issues/1062

@Adlai-Holler, does that sound right to you?  Sorry for the short reply, I'm on a tight timeline for the next ~36 hours, but should be able to work on this on Wednesday afternoon!

@nguyenhuy, since you're one of the few Swift gurus at Pinterest, maybe you could take a look at this tomorrow?
",appleguy,Adlai-Holler
1064,2016-01-14 23:47:22,"Adding a LayoutFacilitator delegate for ASCollectionViews, the purpose is so that we could use this to provide information that the layout might need about the ASCV.

Details up for debate:
- I created this new delegate instead of adding the hooks to the inspector because I think the two has very different responsibilities.
- The hooks are invoked when the rangeController's delegate methods are called, because that's when the cellNodes are fully measured and ready to be used by any layout.

Thoughts? @appleguy @levi 
",binl,levi
1064,2016-01-14 23:47:22,"Adding a LayoutFacilitator delegate for ASCollectionViews, the purpose is so that we could use this to provide information that the layout might need about the ASCV.

Details up for debate:
- I created this new delegate instead of adding the hooks to the inspector because I think the two has very different responsibilities.
- The hooks are invoked when the rangeController's delegate methods are called, because that's when the cellNodes are fully measured and ready to be used by any layout.

Thoughts? @appleguy @levi 
",binl,appleguy
1064,2016-01-22 05:10:43,"@binl I'm going to merge this now so that you can continue at full speed, but it's important to me that we move this initializer into a +Beta.h file so that it can't be used without an engineer being clear that it's a new API that hasn't been widely tested / broadly discussed with tech leads of different apps with their many differences in use cases.

In particular we should work together to solidify the relationship between the layout inspector and the layout facilitator, and although I think it's likely the API will remain unchanged for the final version (just as you have it now), it's important to put it in +Beta because there could be some bugs / inconsistencies that haven't been sorted out yet (like supporting @nguyenhuy's new reloading setup).

I need to release a new version of ASDK in the next ~24hrs, so if you won't have a chance to create the +Beta.h file, just let me know and I can make the tweak before that release goes out (it's needed for a couple other critical fixes).
",appleguy,nguyenhuy
1060,2016-01-13 20:38:46,"This addresses #1028 #1055 #1047 .

The issue seems to be caused by one of the changes in ffcddf3 where we stopped checking if the range was valid before removing nodes from the working range. I just reverted that change exactly as-was and the issue is gone for me.

@appleguy I'm not sure the implications of this change. I suspect it means that under certain conditions, nodes won't be removed from the working range. We may now be throwing the baby out with the bathwater.
",Adlai-Holler,appleguy
1059,2016-01-13 10:47:33,"This is currently WIP but I wanted to issue a PR to start a discussion about how to best support tvOS. My initial findings are that it is relatively easy to make ASDK build on tvOS and further more expose the relevant methods (`UIFocusEnvironment` Protocol) that are needed to lay the foundation of tvOS support, as witnessed by this PR.

The **main** work is making all the nodes in ASDK respond to the UIFocus Engine. I am in favour of having a default behaviour implementation on ASDisplayNode that is then inherited by all other nodes. This will ensure that all nodes have a basic behaviour, which can then be overridden to provide a better experience.

Once the default behaviour approach is decided, the second decision to be made is who's responsibility it is to provide great UIFocus behaviour? Would it be the author of that certain node or would someone provide a coherent experience across all the nodes? I'm wanting to implement a tvOS app at work soon using ASDK, so I'm happy to provide a heavy lift to support these efforts, especially for ASImageNode which has the most work to do to match the focus behaviour of UIImageView. Having said that, it could be faster, and/or favoured by the community to implement their own behaviours. 

Another aspect is that the design of the tvOS UI is counter-culture to what has been recommended for ASDK, mainly when items are in focus. tvOS makes heavy use of rounded corners and drop shadows, which ASDK has traditionally (for performance reasons) been strongly against.

A number of nodes are currently affected by a lack of certain properties/frameworks in tvOS, I need to do more research to fully determine these aspects but here is the initial list:
- `ASEditableTextNode`. UITextView.editable isn't currently available on tvOS, therefore undermining the purpose of this node.
-  `ASMapNode`. MapKit isn't available on tvOS 9.0 but _is_ available on tvOS 9.2, so this isn't a big deal currently.
- `ASMultiplexImageNode`. The Photos and AssetsLibrary frameworks aren't available on tvOS so ASMultiplexImageNode is currently relegated to only displaying URL's from the web (which is probably the biggest use case, but still)
- `ASPagerNode`. UICollectionView.pagingEnabled & .scrollsToTop properties aren't available on tvOS, I suspect this is due a new mechanism for paging tvOS, so maybe this node can be adapted for this. cc @levi 
- `ASTableViewProtocols`. UITableViewRowAction is not available on tvOS. I have currently only gated the method that highlights this (for Swift support) but further investigation is needed to see if UITableViews are editable at all.

There are still a number of things to test and to-do to fully lay the ground work. I have only tested this with CocoaPods (which works). There are the things still to test/to-do, which I will update, as I come across additional items:
- [ ] Provide a static tvOS framework build
- [ ] Thoroughly test each node's behaviour 
- [ ] Provide a tvOS example app, similar to UIKitCatalog to showcase all of ASDK's nodes in a tvOS environment

@appleguy Could you have a look this, and also as you know the community better, could you tag as many people from the community who could best input? 
",aaronschubert0,levi
1059,2016-01-13 10:47:33,"This is currently WIP but I wanted to issue a PR to start a discussion about how to best support tvOS. My initial findings are that it is relatively easy to make ASDK build on tvOS and further more expose the relevant methods (`UIFocusEnvironment` Protocol) that are needed to lay the foundation of tvOS support, as witnessed by this PR.

The **main** work is making all the nodes in ASDK respond to the UIFocus Engine. I am in favour of having a default behaviour implementation on ASDisplayNode that is then inherited by all other nodes. This will ensure that all nodes have a basic behaviour, which can then be overridden to provide a better experience.

Once the default behaviour approach is decided, the second decision to be made is who's responsibility it is to provide great UIFocus behaviour? Would it be the author of that certain node or would someone provide a coherent experience across all the nodes? I'm wanting to implement a tvOS app at work soon using ASDK, so I'm happy to provide a heavy lift to support these efforts, especially for ASImageNode which has the most work to do to match the focus behaviour of UIImageView. Having said that, it could be faster, and/or favoured by the community to implement their own behaviours. 

Another aspect is that the design of the tvOS UI is counter-culture to what has been recommended for ASDK, mainly when items are in focus. tvOS makes heavy use of rounded corners and drop shadows, which ASDK has traditionally (for performance reasons) been strongly against.

A number of nodes are currently affected by a lack of certain properties/frameworks in tvOS, I need to do more research to fully determine these aspects but here is the initial list:
- `ASEditableTextNode`. UITextView.editable isn't currently available on tvOS, therefore undermining the purpose of this node.
-  `ASMapNode`. MapKit isn't available on tvOS 9.0 but _is_ available on tvOS 9.2, so this isn't a big deal currently.
- `ASMultiplexImageNode`. The Photos and AssetsLibrary frameworks aren't available on tvOS so ASMultiplexImageNode is currently relegated to only displaying URL's from the web (which is probably the biggest use case, but still)
- `ASPagerNode`. UICollectionView.pagingEnabled & .scrollsToTop properties aren't available on tvOS, I suspect this is due a new mechanism for paging tvOS, so maybe this node can be adapted for this. cc @levi 
- `ASTableViewProtocols`. UITableViewRowAction is not available on tvOS. I have currently only gated the method that highlights this (for Swift support) but further investigation is needed to see if UITableViews are editable at all.

There are still a number of things to test and to-do to fully lay the ground work. I have only tested this with CocoaPods (which works). There are the things still to test/to-do, which I will update, as I come across additional items:
- [ ] Provide a static tvOS framework build
- [ ] Thoroughly test each node's behaviour 
- [ ] Provide a tvOS example app, similar to UIKitCatalog to showcase all of ASDK's nodes in a tvOS environment

@appleguy Could you have a look this, and also as you know the community better, could you tag as many people from the community who could best input? 
",aaronschubert0,appleguy
1057,2016-01-19 05:17:10,"@Cabus thanks for asking about this.  This is almost certainly on the cusp of working, but not quite there.  I have actually never tried an animated layout change, and neither has anyone asked me about it, which is pretty surprising...but for that reason we probably need a few lines of changes within the framework.

Example causes might be:
- We need to ensure all of the cells have calculated their new layout in order to animate; this may have to be forced to occur synchronously.  Good news is we have facilities to block the main thread on a concurrent background operation, so this should literally double performance compared to UIKit normally.
- itemSize is not fully integrated with the layout system, because it is not as expressive / well-integrated with the layout system as constrainedSize is.  It's also trapped by the non-threadsafe UICollectionViewLayout object :).  That said, this really is a bug / limitation more than anything else: particularly if constrainedSizeForItemAtIndexPath: is not implemented, we should be using itemSize.  I think there might already be some code to do this, but it hasn't been rigorously tested, and we might need something like an invalidateLayout call when itemSize changes etc.

@levi are you familiar with collection view animations?  I'm wondering if you could audit the code for issues in the area of fixed itemSize and animations / transitions, just to highlight what areas might need work, even if you don't have time to make the change.
",appleguy,levi
1056,2016-01-19 04:29:08,"@ashishyadav311 Thanks!  That's much more actionable.  The Google tool is showing that we could get some gains from optimizing the images, which makes sense, so we'll definitely do that.

I'm not seeing the same results as you posted above though.  What URL did you run it on?  I ran it on asyncdisplaykit.org.  Are you testing some other page, like one of the guides?

If you could just write a few more words in your comments about what you're thinking here, it would be much more clear.  I apologize for the back-and-forth, but you've been pointing to a couple separate tools and not really sharing the URLs being used or how you might suggest we improve.  Though I'm an expert in native app programming, I am not an expert in web optimization — I definitely have a lot of respect for the art of page speedup and am certainly glad you raised this to our attention, so thank you again for helping us understand fully.

@lappp9 could you check in the new, optimized images?  We could use pngcrush --brute, or Google appears to let you download optimized images directly from their tool, which is pretty great.

https://developers.google.com/speed/pagespeed/insights/?url=asyncdisplaykit.org

<img width=""1142"" alt=""screen shot 2016-01-18 at 8 28 19 pm"" src=""https://cloud.githubusercontent.com/assets/565251/12409782/3469d15a-be22-11e5-8472-7472d6834825.png"">

<img width=""1119"" alt=""screen shot 2016-01-18 at 8 28 41 pm"" src=""https://cloud.githubusercontent.com/assets/565251/12409772/1873fed0-be22-11e5-8186-ba74394a7f7e.png"">
",appleguy,lappp9
1055,2016-01-11 13:13:35,"Yes, problem appears in 1.9.4.
1.9.3 works fine

cc @appleguy 
",vitalybaev,appleguy
1053,2016-01-10 10:43:22,"@knopp - check this out if you are still using the Beta range controller.  To a degree, I hope not as it was indeed at least a bit slower than the old one, although Pinterest toughed it out!  The last two diffs have drastically improved performance, although I'm not sure what the Stable to Beta comparison is yet.
",appleguy,knopp
1050,2016-01-09 15:37:25,"As discussed with @appleguy, creating a pull request for review for this sample project we have been collaborating on.

This includes a new layout spec 'ASRelativePositionLayoutSpec' used for positioning views, much like the center layout spec, but with more options - center, left/top or right/bottom align - on both axis.

The sample project includes a fairly complex node layout, as well as infinite scrolling. 

Cat deals FTW! :-)
",stowy,appleguy
1050,2016-01-10 11:04:58,"@stowy love it, thanks Sam!  It's been a blast working with you.

@lappp9 you might be interested in checking this out.  We could consider using elements from it for the main sample project, or at least keep it in mind as part of the portfolio of sample projects if we want to go in a different direction.  Whatever we do should definitely include orthogonal nested scrollers, like an ASPagerNode containing ASTableNodes, or vertical ASCollectionNode containing a horizontal one in some of its cells (like the photo story side-scroll units in Facebook)
",appleguy,lappp9
1048,2016-01-08 07:53:22,"Yo @appleguy here's something pretty neat. Let me know what you think!
- Optimize `_ASPendingState` by removing unneeded sets, and by loading all flags at once before doing batch comparisons.
- Add `ASWeakSet` that is built on top of `NSMapTable`. This does not support ordering, so if it's valuable to be able to flush nodes in the order that they were dirtied, we can change the approach to be built on top of `NSMutableOrderedSet` but it'll be a little less pleasant.
- Add `ASPendingStateController` singleton that keeps a weak set of dirty nodes and flushes them at the end of each turn of the run loop. You can also flush it manually at any time from the main queue (obviously if you want to flush from the background, just use `dispatch`.) It does not yet support dividing the work up into chunks. It'd be easy enough to only handle max N nodes per pass but I wanted to wait for your comments before diving into that optimization.
- Modify `ASDisplayNode` to always have a pending state. It no longer discards the pending state after node is loaded; instead it just clears the pending state's flags.
- Modify display node's `UIViewBridging` category to:
  - Always read properties from `ASPendingState`.
  - Always write properties to `ASPendingState`.
  - If properties are modified on main and node is loaded, properties are immediately propagated to view/layer.
  - If node is not dirty, but is loaded, and a bridged property is set off-main, we register the node with the pending state controller. Note that we register it before updating the pending state, but this is safe because we hold the node's property lock during this time and pending states can't be applied until lock is relinquished. 

I'm using `performSelectorOnMainThread:withObject:waitUntilDone:inModes` to schedule the run loop flush event, and it works well even when the change originated from an async dispatch onto a global concurrent queue. The docs are a little confusing here though – it mentions at one point that it dispatches onto ""the run loop of the main thread"" and then later that it registers with ""the runloop of its current context"". I can definitely swap it out with an `NSTimer` of duration 0 to act as the run loop observer but it's a bit less direct. Thoughts?

TODO:
- [x] Add more tests for the pending state controller.
- [x] Talk about back-propagation i.e. if user sets property on view/layer, what do we do? Only API-safe way to know about it is to swizzle UIView/CALayer properties which is a non-starter.
- [x] Talk about run loop amortization as an optimization.
- [x] Figure out why bridging `backgroundColor` won't work. I've tried migrating ASPendingState over to `UIColor *backgroundColor` but no dice. It's probably something stupid.
",Adlai-Holler,appleguy
1048,2016-01-24 23:08:50,"@appleguy, @Adlai-Holler, assuming this gets finished, will it be eventually possible to relayout on background thread?
",knopp,appleguy
1048,2016-02-12 03:34:40,"@appleguy Yo! This thing is so insanely close, but I'm having trouble taking it to the hoop.

ASCellNode overrides `setNeedsLayout`, and it's currently tied to the node's thread affinity because it's involved with the layout system. Whenever I fiddle with it to get it to be safe to call `[ASCellNode setNeedsLayout]` from the background, I break the table view tests.

So the state is, all tests are passing (including the new `ASBridgedPropertiesTests`) except the ones to do with cell nodes. Can we get a cell node expert in here to help me out? @nguyenhuy @levi 
",Adlai-Holler,nguyenhuy
1048,2016-02-12 03:34:40,"@appleguy Yo! This thing is so insanely close, but I'm having trouble taking it to the hoop.

ASCellNode overrides `setNeedsLayout`, and it's currently tied to the node's thread affinity because it's involved with the layout system. Whenever I fiddle with it to get it to be safe to call `[ASCellNode setNeedsLayout]` from the background, I break the table view tests.

So the state is, all tests are passing (including the new `ASBridgedPropertiesTests`) except the ones to do with cell nodes. Can we get a cell node expert in here to help me out? @nguyenhuy @levi 
",Adlai-Holler,appleguy
1048,2016-02-12 03:34:40,"@appleguy Yo! This thing is so insanely close, but I'm having trouble taking it to the hoop.

ASCellNode overrides `setNeedsLayout`, and it's currently tied to the node's thread affinity because it's involved with the layout system. Whenever I fiddle with it to get it to be safe to call `[ASCellNode setNeedsLayout]` from the background, I break the table view tests.

So the state is, all tests are passing (including the new `ASBridgedPropertiesTests`) except the ones to do with cell nodes. Can we get a cell node expert in here to help me out? @nguyenhuy @levi 
",Adlai-Holler,levi
1048,2016-02-18 04:32:06,"@appleguy Progress report: I've added a demo project to test the thread affinitylessness and resolved more issues. The demo app works well but I've got two issues remaining:

#### Layout Transitions

Running layout transition animations from the background doesn't work. The current issue is the implicit hierarchy management. After we make that thread-safe we'll need to (sometimes) asynchronously jump to the main thread to run the actual animation. That should be easy, although defining (and capturing) the ""correct"" initial/final animation could take a little thinking.

#### `setFrame:`

Bridging setFrame is troublesome. The current implementation works and maintains the old behavior very well, but there's duplicated code between ASDisplayNode and ASPendingState, and without thread affinity, there are order of operation edge cases – if I set frame then set bounds on a synchronous wrapper node, we should apply the update in the same order.

There are two modes for setting the frame on a node – synchronous wrapper nodes like ASTableNode need to receive setFrame: intact. For all other nodes, we prefer setting bounds and position so that the node's transform doesn't invalidate the frame. The problem is, we can't decompose a frame into bounds/position without reading the current bounds & anchorPoint, which we can't do in the background.

Currently the solution is to wait to decompose the new frame until `pendingViewState applyToView:`, which is working well but results in some extra code for ASPendingState to encapsulate the same logic.

#### Next Up

The only tests that are failing for me are the table view layout count tests. They all expect X layouts on the main thread but they're observing (X + 1) layouts. I'll investigate this tomorrow.
",Adlai-Holler,appleguy
1048,2016-02-18 22:32:04,"@appleguy Woot! This thing is ready for review! For QA the new BackgroundPropertySetting app and all tests are working great. 

setFrame ended up being pretty messy, and unfortunately we still can't layout loaded nodes off-main because of implicit hierarchy management. I'm scared to tackle modifying the hierarchy of loaded nodes off-main so I reckon we'll do that later.
",Adlai-Holler,appleguy
1047,2016-01-08 07:27:46,"I use the pod version which is 1.9.4. It crashes when a ASTableView deletes some cell in a section. The url of a test case is https://github.com/tuyuan2012/TestDeleteRow.git. In the older version there is not such problem. 
Well, our app will be uploaded to apple store recently. So I am a little worrying. Then, how can pop the older version. Thank you @appleguy very much....
The follow image shows the crash log of mine project not the test case. 
![08642c85-d52a-42a8-9c5d-fd3028a2caf9](https://cloud.githubusercontent.com/assets/3121889/12193562/782eda30-b624-11e5-95dd-6509d51b1be5.png)
",tuyuan2012,appleguy
1046,2016-01-19 05:45:03,"@nguyenhuy, @samhsiung if you have a chance to take a look in the next day or two — please do!  The 6 month plan review is tomorrow, so I'm pretty jammed until late Wednesday or around the end of the week.  But this could be a bug important enough to do a hotfix for, if somehow we've missed detecting it previously.
",appleguy,nguyenhuy
1046,2016-01-19 05:45:03,"@nguyenhuy, @samhsiung if you have a chance to take a look in the next day or two — please do!  The 6 month plan review is tomorrow, so I'm pretty jammed until late Wednesday or around the end of the week.  But this could be a bug important enough to do a hotfix for, if somehow we've missed detecting it previously.
",appleguy,samhsiung
1043,2016-01-06 23:23:27,"So last week I came across this CSS Flexbox game (http://flexboxfroggy.com/) and really liked the idea. I have some free time tonight and decided to port it to ASDK's layout system. After some hours of banging the keyboard (and trying to learn JS), I think the port is in a good shape. Please try it out here: http://nguyenhuy.github.io/froggy-asdk-layout/ and let me know what you think!

I know that @lappp9 is working on new documentation for the layout system, which is tremendously helpful and greatly appreciated. Hopefully this little game provides some value to the community and helps new developers to learn ASStackLayoutSpec faster!

I'm still not sure about whether I should make a PR to merge the whole game to ASDK's gh-pages branch, or to add a link somewhere in the documentation. Let me know your thoughts :)

![flexbox_froggy](https://cloud.githubusercontent.com/assets/587874/12157810/2f54bb1a-b4dd-11e5-9467-ad1e68b58a5a.png)
",nguyenhuy,lappp9
1042,2016-01-06 20:19:57,"- selected state isn't implicitly controlled by ASControlNode anymore
- highlighted state can be overriden by users
- Decouple ASButtonNode's state from control events

@appleguy @connor
",binl,appleguy
1040,2016-01-06 07:32:24,"@knopp - take a look, I think this will resolve #1034.  I don't have a way to test it, as I don't have a reproduction case yet, but this did pass the unit test suite.  Beware: I have not run it with even an example app yet.  I will try it with Pinterest and some example apps tomorrow, and if you're able to try it out with good results, will certainly land it at that stage.
",appleguy,knopp
1038,2016-01-06 01:10:05,"following the UIControl design, removed ASButtonState from ASButtonNode and added ASControlState to ASControlNodes, also added a selectedState to all ASControlNodes.

@appleguy @connor
",binl,appleguy
1036,2016-01-05 13:48:51,"@appleguy this will resolve #988 

Breaking Change:
`region` property has been superseded by `options` which is a MKMapSnapshotOptions object. This allows for more flexibility and customisation. All snapshot options will be applied to the MKMapView when it is activated.

Currently working on an example app and tests to better showcase ASMapNode!
",aaronschubert0,appleguy
1036,2016-01-10 04:55:19,"@aaronschubert0 This is really great, thanks for continuing with followups here!  I'm excited to hear that you are doing a sample app (definitely beyond my expectations).  If you happen to be interested in pursuing another ASDK project, let me know and I'll come up with some ideas for you to consider :).  You might also want to work with @lappp9 who is leading our documentation effort, including a large new sample app that will integrate ASMapNode and other components.
",appleguy,lappp9
1036,2016-01-11 18:44:11,"@appleguy Wow! I'm definitely interesting in pursuing another ASDK project. I have just returned from the Apple TV Tech Talk so I'm feeling inspired to provide basic tvOS support for ASDK next (#809). I'd love to hear the ideas that you come up with just now so I can start having a think about them! :)

In terms of working with @lappp9 I'm more than happy to contribute to those efforts concurrently. Would it be better for the project if I spent the time I would have allocated to a sample app, to @lappp9 efforts instead?

In terms of this PR, I will post some follow up diffs shortly!
",aaronschubert0,lappp9
1034,2016-01-04 18:09:03,"@appleguy, it seems that the way `ASRangeControllerBeta` works is that it takes union of FetchData, Display and Visible index paths and updates each node in the set. However when scrollToItemAtIndexPath is used, nodes that were previously visible might not be part of the set (because they are too far, and not even members of FetchData set) and thus retain old interface state, even though they are no longer visible.

I understand that the idea is that the range controller doesn't keep any unnecessary state, but it doesn't seem to be very reliable when jumping further than range tuning parameters for fetch data.

One possible solution would be to set _scrollDirection = 0 on collectionView when manually jumping to an offset (or using scrollToIndexPath, etc) and then refresh nodes at all existing indexPaths in `_updateVisibleNodeIndexPaths`.
",knopp,appleguy
1028,2016-01-04 03:37:06,"@binchensjtu Thanks for reporting this.  That logic was indeed changed late in the release (cc @knopp)  Unfortunately I don't have a test case that can trigger this issue, making it very difficult to fix without simply reverting the change (which itself addresses a known, reproducible issue).

One option you may want to try is the new ASRangeControllerBeta.  It is significantly improved and is available if you import ASDisplayNode+Beta.h, and call [ASDisplayNode setShouldUseNewRenderingRange:YES];

I have been using this by default for the internal / development version of Pinterest, and so far it is working very well.  However, it is changing rapidly and not widely tested yet, so you may experience some issues with that as well.  I'd appreciate your feedback / report if you can try your code with it, to see if any similar issues arise - but I'm fairly confident that you won't see a crash, and at worst may see some issues where content isn't pre-loaded as early as expected or potentially higher memory usage.

If we identify a fix for this issue, I can release a 1.9.4.1 or 1.9.5.
",appleguy,knopp
1025,2016-01-16 05:31:54,"@appleguy finally got some time to make these small changes. I've removed all the convenient methods for title, only kept one, `setTitle:withFont:withColor:forState`.

@wy19901227 here's the background image for ASButtonNode. #1049 
",1nput0utput,appleguy
1025,2016-01-19 05:41:20,"This looks very clean.  I think it can land as-is, but I haven't been able to fully complete a review yet.  I should be able to do so within the next few days.  If you can drop in isLayerBacked = YES, great - but that is not at all a blocker and I can do it later pretty easily.

@nguyenhuy / @rcancro / @garrettmoon if any of you get a chance to review this code, go for it, and I'm happy to merge if you give it the go-ahead.
",appleguy,nguyenhuy
1025,2016-01-19 05:41:20,"This looks very clean.  I think it can land as-is, but I haven't been able to fully complete a review yet.  I should be able to do so within the next few days.  If you can drop in isLayerBacked = YES, great - but that is not at all a blocker and I can do it later pretty easily.

@nguyenhuy / @rcancro / @garrettmoon if any of you get a chance to review this code, go for it, and I'm happy to merge if you give it the go-ahead.
",appleguy,garrettmoon
1025,2016-01-19 05:41:20,"This looks very clean.  I think it can land as-is, but I haven't been able to fully complete a review yet.  I should be able to do so within the next few days.  If you can drop in isLayerBacked = YES, great - but that is not at all a blocker and I can do it later pretty easily.

@nguyenhuy / @rcancro / @garrettmoon if any of you get a chance to review this code, go for it, and I'm happy to merge if you give it the go-ahead.
",appleguy,rcancro
1022,2015-12-31 08:22:15,"cc @levi, @stowy maybe we can fix this at some point soon, but for now, away they go - they're not safe to use unless reconciled with the async layout delay.
",appleguy,levi
1022,2015-12-31 08:22:15,"cc @levi, @stowy maybe we can fix this at some point soon, but for now, away they go - they're not safe to use unless reconciled with the async layout delay.
",appleguy,stowy
1021,2015-12-31 07:45:08,"Reverts facebook/AsyncDisplayKit#1008 -- cc @yury 

I want to make sure this is supported for all ASCellNodes before it is delivered in a production release.  I investigated supporting it in ASCollectionView and ran into some concerns with how the frames are set on the node (they are not necessarily equal to the size of the item cell, yet are at a 0, 0 position that can't be controlled by the engineer).  This could cause regressions for some apps where the touch target becomes smaller than they desire / currently experience.

I think the right fix for this could be to use ASControlNode or similar inside the ASCellNode, rather than relying on the UITableView or UICollectionView tap delegate methods responding only to an area that is smaller than the UIKit component actually is.  That said, I'm still open to doing this, but it needs to be approached holistically by making sure it works reliably for all the ASCellNode use cases.
",appleguy,yury
1020,2015-12-31 06:45:37,"This is a fix for #1011.  @knopp, give it a try when you have a chance!  I think I'll include this in 1.9.4.
",appleguy,knopp
1013,2015-12-29 22:02:53,"@binchensjtu Thank you for reporting this!  Support for the languages of the world has been a top motivator for me since the first prototypes of AsyncDisplayKit, because many languages take more computational effort to perform layout as well as rasterization than the English-biased developers frequently building iOS frameworks.  A few questions:
- Have you replicated this test with UILabel, UITextField, or UITextView?  How about the older NSString-based sizing methods that pass in a font directly?
- Have you tried using CoreText or TextKit directly, which are what ASTextNode is built on?
- Do you have a set of recommendations or test cases for how I could verify what behavior is correct / expected?  Do you feel that the sizing behavior of NSAttributedString itself is consistently correct?

@ocrickard - I promise not to invoke you on every text issue we run across (you may be surprised that I've fixed several recently and am becoming increasingly comfortable with the rendering code that was previously opaque to me).  However, I have to ask: has anything like this (let's say CJK languages in general) been studied, or issues reported, with ComponentKit?

@rcancro, @nguyenhuy - I know you guys have at least some additional expertise here beyond my own, and you may know native CJK speakers who have used TextKit / Core Text in detail and could help us audit the behavior.  Let me know.
",appleguy,nguyenhuy
1013,2015-12-29 22:02:53,"@binchensjtu Thank you for reporting this!  Support for the languages of the world has been a top motivator for me since the first prototypes of AsyncDisplayKit, because many languages take more computational effort to perform layout as well as rasterization than the English-biased developers frequently building iOS frameworks.  A few questions:
- Have you replicated this test with UILabel, UITextField, or UITextView?  How about the older NSString-based sizing methods that pass in a font directly?
- Have you tried using CoreText or TextKit directly, which are what ASTextNode is built on?
- Do you have a set of recommendations or test cases for how I could verify what behavior is correct / expected?  Do you feel that the sizing behavior of NSAttributedString itself is consistently correct?

@ocrickard - I promise not to invoke you on every text issue we run across (you may be surprised that I've fixed several recently and am becoming increasingly comfortable with the rendering code that was previously opaque to me).  However, I have to ask: has anything like this (let's say CJK languages in general) been studied, or issues reported, with ComponentKit?

@rcancro, @nguyenhuy - I know you guys have at least some additional expertise here beyond my own, and you may know native CJK speakers who have used TextKit / Core Text in detail and could help us audit the behavior.  Let me know.
",appleguy,rcancro
1013,2015-12-29 22:02:53,"@binchensjtu Thank you for reporting this!  Support for the languages of the world has been a top motivator for me since the first prototypes of AsyncDisplayKit, because many languages take more computational effort to perform layout as well as rasterization than the English-biased developers frequently building iOS frameworks.  A few questions:
- Have you replicated this test with UILabel, UITextField, or UITextView?  How about the older NSString-based sizing methods that pass in a font directly?
- Have you tried using CoreText or TextKit directly, which are what ASTextNode is built on?
- Do you have a set of recommendations or test cases for how I could verify what behavior is correct / expected?  Do you feel that the sizing behavior of NSAttributedString itself is consistently correct?

@ocrickard - I promise not to invoke you on every text issue we run across (you may be surprised that I've fixed several recently and am becoming increasingly comfortable with the rendering code that was previously opaque to me).  However, I have to ask: has anything like this (let's say CJK languages in general) been studied, or issues reported, with ComponentKit?

@rcancro, @nguyenhuy - I know you guys have at least some additional expertise here beyond my own, and you may know native CJK speakers who have used TextKit / Core Text in detail and could help us audit the behavior.  Let me know.
",appleguy,ocrickard
1013,2017-01-13 02:01:21,"@appleguy @garrettmoon @hannahmbanana #2894 could be related, and I found a quick fix for that.",yxztj,hannahmbanana
1013,2017-02-16 01:56:59,@hannahmbanana #3026 should be fixing this issue(which should be the same as #2894),yxztj,hannahmbanana
1012,2015-12-29 07:04:07,"@NatashaTheRobot hey, thank you!  I've seen you on twitter (before earlier today of course, too) - great to have you here :).  I'm happy to say that another community member, @lappp9, is starting a huge push on updating the website and the documentation for 2.0 (note the 1.9.x releases contain most of the features that 2.0 will, but has not GM'd due to the lack of documentation).

Our strategy regarding Swift, briefly, is as follows:
- We're now actively listening to the Swift community for feedback on the API design and what improvements can be made; some of our top contributors are are using Swift in their day jobs.
- The new, redesigned example app that the 2.0 programming guide will walk through will be written with both Objective-C and Swift (although, the initial version will start with Objective-C).
- The site will include an inline switcher for each code snippet to toggle between the languages.
- In 6-12 months, we'll likely be Swift-first for example apps and documentation changes, with back-ports to Objective-C continuing for a couple years.  Usage within the framework will probably start around this time, especially if 3.0 means the runtime won't need to be bundled in each app.

Considering the extreme lack of documentation for rather powerful APIs like ASLayoutSpec, don't hesitate to reach out with any feedback or questions — I'd sincerely enjoy talking to you about it!  I can give you my iMessage number if you email asyncdisplaykit@gmail.com.
",appleguy,lappp9
1009,2015-12-28 20:35:56,"@appleguy This is a first-pass implementation, I'm not satisfied with it for a number of reasons, and I don't expect to merge it. But this will get the ball rolling and hopefully expose important questions. 

The major problems I have with this branch are:
- If the user directly sets properties on the underlying view, we won't find out about it. If they read the corresponding node property, we'll return the old value. This is a tough problem, because we HAVE to buffer property values outside the view to make them readable from any thread. I can't see any solution to this except swizzling the UIKit setters :scream:.
- Order-of-operations is not preserved. If you're in the middle of buffering main-queue commands on thread A and you set a property to X, and then on thread B (while not in a transaction) you set it to Y, and then A flushes the main queue command buffer, the property will get set to X when it should be Y. What's worse, the pending-state value and the view-value will be out-of-sync. This one shouldn't be hard to solve – we should always store the pending value in the pending state, and then always flush THAT rather than just enqueuing individual property sets.
- Related to above, hard to debug since we don't explicitly track the pending state of a node (in fact, such a state barely exists).

For the next pass here's the plan:
- Construct a ""weak set"" using a weak-to-strong-objects NSMapTable that goes `ASDisplayNode : [NSNull null]`. 
- Create a singleton that has a weak set of nodes that have pending state. When you set a bridged node property off-main on a loaded node, if the pending state was previously empty, we add this node into that set. 
- For setting 
- For the flush, the singleton just calls `applyToView:` or `applyToLayer:` on all the dirty nodes' pending states.
- For transactionalization, I think all we need is to ensure that there are no open transactions when the flush happens, right?
  - Let's say we have four background threads A, B, C, and D:
  - Thread A opens a transaction and starts setting some properties.
  - Thread B opens a transaction and starts setting some properties.
  - Thread C sets a property outside any transaction.
  - Thread A's transaction ends.
  - Thread B's transaction ends.
  - We notice there are no transactions and no flush enqueued. Enqueue a flush on the main thread.
  - Thread D opens a transaction.
  - Main thread: it's time to flush. Lock the singleton (@appleguy dangerous?). But oh! There's an open transaction. Reject flush.
  - Thread D closes its transaction.
  - We notice there are no transactions and no flush enqueued. Enqueue a flush on the main thread.
  - Main thread: it's time to flush. Lock the singleton, confirm no open transactions, let's do this. Apply all pending states to nodes in weak set, empty the set, unlock the singleton.
  - Would it be valuable to have an option to tell the singleton ""flush everything NOW"" on the main thread? 
    I think this would be doable if we accept that the flush may get rejected. Maybe something like `flushChangesWithCompletion:^{}`, so we can wait for any open transactions to end?

Maybe I'm making this way more complicated than it needs to be. 
",Adlai-Holler,appleguy
1009,2015-12-29 03:08:41,"Woah, thanks @Adlai-Holler!!  Even just getting this started is **huge**.  I have a handful of comparably risky / ambitious changes planned for right after 1.9.4 is cut (any day now, for reals :) ), and will keep running Pinterest internal against the latest to get us fairly substantial test coverage on these things.  @lappp9 has the programming guide / 2.0 documentation underway, and we plan to add more tests soon too.

We should catch up soon about one of the most important use cases in the framework: ASDataController / ASRangeController and its possible successors / improvements.  Most relevant to this, I want to remove the current checks for isNodeLoaded doing main thread measurement, and I also want things like reloadSection to first process the new state and then apply the updates rather than deleting the existing one initially and then adding the replacement when it's done.

Somewhat more tangentially, there's also my upcoming change to support a ""cellNodeBlock"" so that the block can capture call-time data state and yet be used to allocate the cell node on a background thread, along with the allocation range / measurement range / virtualization stuff we discussed (in service of the need to measure only slightly more than is required to populate a given rect, allowing more liberal use of synchronously preparing those areas).

But lastly and also relevant to the idea of a transactional system we might expand here, there is the increasingly-essential (for my use cases at least) concept of transparent ""runloop amortization"", where the materialization of views and layers is spread out over multiple runloop turns to allow the system opportunities to service display link timers (physics-based animations) or gestures or network callbacks.  This is tricky because it will also involve applying the properties to those views and we can't allow the sub-hierarchy onscreen until it is fully materialized, even if a later call does force it to be.  It will be most useful when the ASRangeController has a cell node entering the display range, or a view controller wants to pre-load its contents, but once the cell is visible or the controller is being presented it is too late to use this technique (unlike synchronous concurrency, which blocks main on a concurrent background operation).  So we will need the ability to force-finish in one runloop an operation that is in the process of being amortized across multiple loops, and that's where waiting on a transaction type setup (calling ""run"" or ""finish"" on the transaction, perhaps, if the contents of that transaction is responsible for poking the view / layer and applying pending state).

Rambling complete, I'm now leaving the Chipotle in Central California (Grapevine, CA) to continue the drive home to SoCal :).  Hope to see you again soon - I'll be online and working for the next week if you want to talk by FaceTime Audio about this.  Thanks for the delightful surprise and ideas to think about on the drive!
",appleguy,lappp9
1008,2015-12-29 09:08:53,"@appleguy  Please take a look at [sample project](https://github.com/yury/BubbleCells). Works fine for me.

`hitTest` seems not in ASCellNode
",yury,appleguy
1005,2015-12-27 23:39:53,"This behavior changed in 1.9.3 and introduced flickering in some cases.  Preserving the contents is closer to UIKit behavior.

Thank you @tuyuan2012 for reporting this in https://github.com/facebook/AsyncDisplayKit/issues/991, and providing a test project that made it easier to fix in the most correct way!  @Adlai-Holler, heads up regarding this behavior - I think you may have been expecting it to clear the contents here, so make sure your app calls -clearFetchedData and/or -clearContents manually if so.  I am thinking of other ways to refine this behavior in the future, such as suspending updates to interfaceState in certain situations and then un-suspending them to apply a pending state.
",appleguy,Adlai-Holler
1001,2015-12-27 00:57:49,"This is because ASLayoutOptionsPrivate.mm implements a #define that forwards the setter / getter methods for AS*Layoutable properties to an internal ASLayoutOptions object, used as an override point for complex apps that need to piggyback information through the layout system.

The ASLayoutOptions architecture is useful, but the user experience is disastrous, as it is very important that these properties can be researched by developers new to AsyncDisplayKit when exploring example apps or a large codebase written with it.  This is true because the ASLayoutable suite of properties is arguably the most substantial API surface unique to ASDK / not part of UIKit, and has some of the deepest / most subtle behavior (being what drives the behavior of ASLayoutSpec).

I'm not sure what we can do to essentially trick the compiler into going to ASLayoutSpec.h instead, but hopefully there is a crafty way to do so!  @lappp9, you might consider investigating this as one of the highest value documentation contributions.
",appleguy,lappp9
997,2015-12-26 21:03:25,"Originally added in this commit, Coveralls has proved to be a very useful tool:

https://github.com/facebook/AsyncDisplayKit/pull/434

I've spent a couple hours so far looking into how this stuff is implemented, and checked all appropriate project settings, but unfortunately am not having any luck restoring it.  The code coverage stuff is crashing the tests at the end, too.  It looks like Apple is aggressively deprecating gcov and trying to replace it with llvm-cov, but I don't see evidence that Coveralls supports that — perhaps we need to switch to another tool?

@dasmer, @modocache, @Daniel1of1 - do any of you guys have experience with Xcode 7 gcov support, or have time to investigate this?  I'm glad we are on Xcode 7 on Travis now, but am regretting it a bit because the coverage stats are critical for the contributors who are just now ramping up on writing a new wave of tests for AsyncDisplayKit.
",appleguy,dasmer
995,2015-12-25 22:34:21,"This supersedes https://github.com/facebook/AsyncDisplayKit/pull/664 - now merged with latest master.

Thanks so much @Adlai-Holler for crafting the original version of this PR!  I'm quite excited to resurrect it this Christmas Day 2015!
",appleguy,Adlai-Holler
988,2015-12-24 04:40:53,"cc @aaronschubert0 
",appleguy,aaronschubert0
987,2015-12-24 04:07:33,"In addition to being a nice cleanly refactoring, this should resolve the task from @tomizimobile - https://github.com/facebook/AsyncDisplayKit/issues/982

It also supersedes / integrates the work from @RuiAAPeres to ensure that both ASTableView and ASCollectionView can run without any delegate set on them, since those protocols are technically optional (though very commonly used).  That is to say, this diff replaces https://github.com/facebook/AsyncDisplayKit/pull/960
",appleguy,tomizimobile
986,2015-12-24 03:26:09,"Hi Guys long time no speak. I finally had time to try and start implementing Supplementary view from @levi.  

I manage to display the view fine but when I scroll back to it I get the following error `Terminating app due to uncaught exception 'NSRangeException', reason: '*** -[__NSArrayM objectAtIndex:]: index 0 beyond bounds for empty array'`



At the moment my node is a hybrid as it is a very complex layout I haven't yet fully implemented it in Nodes. Maybe this is the issue?

Here is my `ASCellNode`



Thank you for your help
",wieseljonas,levi
986,2015-12-24 04:05:25,"cc @levi.  @wieseljonas could you confirm what commit of ASDK you're using?  An issue like this was fixed in master, and is about to go out with 1.9.4 in the next couple days.  I want to make absolutely sure your issue is resolved before I launch the release, if at all possible.  Feel free to email me at asyncdisplaykit@gmail.com too and I'll give you my iMessage for faster coordination..
",appleguy,levi
985,2016-01-16 22:17:41,"OK, I just pushed some updates that bring this patch up to speed with the feedback and also provides unit test coverage for the new functionally. I'm having some issues running the entire test suite when it comes to the snapshot tests. They seem to be looking for an image asset to compare to, but unable to find one. I haven't looked too closely into the issue, but hoping this is something others have encountered (cc/ @appleguy, @nguyenhuy).
",levi,nguyenhuy
983,2016-01-17 00:24:25,"@aaronschubert0 you could add this one!
",appleguy,aaronschubert0
978,2015-12-23 10:23:23,"This fixes #971 as raised by @tomizimobile. It also greatly improves the internal logic of ASMapNode. Most notably:
- You can now set _liveMap = YES on a background thread, and it will only be actioned when that node comes on screen.
- Added asserts to handle layer backing scenarios.
- Added a few additional comments to improve documentation.

Will add an example app and tests in a future diff (soon :D )
@appleguy 
",aaronschubert0,appleguy
978,2015-12-23 10:23:23,"This fixes #971 as raised by @tomizimobile. It also greatly improves the internal logic of ASMapNode. Most notably:
- You can now set _liveMap = YES on a background thread, and it will only be actioned when that node comes on screen.
- Added asserts to handle layer backing scenarios.
- Added a few additional comments to improve documentation.

Will add an example app and tests in a future diff (soon :D )
@appleguy 
",aaronschubert0,tomizimobile
977,2015-12-23 21:13:34,"@zintus thanks for working on this!  It's an interesting improvement.  I will need to think a bit more about this because I am also working in this area, and might be going a slightly different direction.  However it is definitely true that right now it is possible to have loaded a subnode of a cell node, and then trigger an assertion on layout when the cell node tries to measure off the main thread (because the cell itself isn't loaded).  This improvement would fix that and enable a few other improvements.

In the not too distant future, @Adlai-Holler and I plan to completely rewrite the ASDK thread affinity system to actually remove the requirement to use only on the main thread after they are loaded.  That's a primary reason I'm wondering if this is the right direction...
",appleguy,Adlai-Holler
977,2015-12-24 05:37:27,"No problem, I'm completely ok with holding this feature until new threading
model arrives 🌞
On Thu, 24 Dec 2015 at 04:13, appleguy notifications@github.com wrote:

> @zintus https://github.com/zintus thanks for working on this! It's an
> interesting improvement. I will need to think a bit more about this because
> I am also working in this area, and might be going a slightly different
> direction. However it is definitely true that right now it is possible to
> have loaded a subnode of a cell node, and then trigger an assertion on
> layout when the cell node tries to measure off the main thread (because the
> cell itself isn't loaded). This improvement would fix that and enable a few
> other improvements.
> 
> In the not too distant future, @Adlai-Holler
> https://github.com/Adlai-Holler and I plan to completely rewrite the
> ASDK thread affinity system to actually remove the requirement to use only
> on the main thread after they are loaded. That's a primary reason I'm
> wondering if this is the right direction...
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/pull/977#issuecomment-166990824
> .
",zintus,Adlai-Holler
977,2016-03-20 05:53:50,"@zintus thank goodness, the new threading model has been landed for a while now and has proven to be quite stable even with extensive usage!

Although I am not certain if this is 100% supported yet, in the very very near future it should be possible to have even loaded no it hierarchies be measured off the main thread by ASDataController.  In fact, we are using this capability in Pinterest - asynchronous measurement of loaded node hierarchies, with an animated transition being triggered at the moment that the measurement completes. This system has been constructed with thread safety front and center, so that even a call to -setNeedsLayout in the middle of the asynchronous measurement phase or the transition itself is handled consistently.

That support is relatively new, although also enjoying widespread use in a very stressful use case at Pinterest (multiple calls to -transition potentially before the prior finishes, due to various updates coming in to the underlying app / server data model).  The one part that I am not as certain of is, if the transition API is not use directly as is the case for the data controller, can we remove the support for main thread layout of loaded nodes?

@nguyenhuy wouldn't know the answer to this question, and although it Would take us at least a couple weeks to investigate, I think that will be the ultimate fix here...rather than supporting more easily creating dual-path code intending to support the previous, rather frustrating threading model.

Just as a quick note, it is still not thread safe to read properties that are bridged to the system objects off of the main thread, after the backing system objects are created. There is no plan to support this in the near future, although it might be possible with further sophistication in the pending state... The reason is that in my many years of using this framework, I have found that it is always quite easy to avoid relying on this capability.  Paper had a write-from-background threading model supported in its version of the framework, but I was always able to ensure that Reading from the background was avoided by providing other facilities (e.g. instead of self.bounds, look at constrainedSize).
",appleguy,nguyenhuy
973,2015-12-22 18:10:17,"After a quick debugging, it turns out that you need to have a separate inspector class, because both `ASCollectionViewLayoutInspecting` and `ASCollectionViewDataSource` protocols declare `collectionView:constrainedSizeForNodeAtIndexPath:`. So if a class conforms to both protocols and provides a zero constrained size, that size will be picked up by `ASCollectionView` ([code](https://github.com/facebook/AsyncDisplayKit/blob/937b72b64a01d1735052e8b49acf73959b4d3844/AsyncDisplayKit/ASCollectionView.mm#L671)) and thus all cell nodes will be measured using the invalid size.

@levi Is there anything we can do to avoid this kind of mistake? Like having `ASCollectionViewLayoutInspecting` to require a method with a slightly different signature?

@fatuhoku You may want to take a look at the `MosaicCollectionViewLayout` in CustomCollectionView example. It produces a Pinterest-like layout that is pretty close to what you are trying to achieve with `SelfSizingWaterfallCollectionViewLayout`. For difficulties building a custom collection view layout, definitely ask @levi. He is the expert :)
",nguyenhuy,levi
972,2015-12-22 15:42:30,"Thank you for trying out ASDK and welcome to the community! We use neither Slack nor IRC currently. The same matter ~~has been~~ was discussed in #729 couple of months ago. I agree that such channel will be useful and not sure why we haven't created it yet. cc @appleguy :P
",nguyenhuy,appleguy
972,2016-03-24 11:18:00,"**I took the initiative to create a Slack group over here**:

https://asyncdisplaykit.slack.com

@nguyenhuy @appleguy @chrene  please feel free to join and chat about ASDK and add any relevant people! I feel like ASDK is really missing its support network.
",fatuhoku,appleguy
971,2015-12-23 07:41:02,"@aaronschubert0 could you look at this at your earliest convenience?  I'd decided to sit on 1.9.4 for a couple days for stability testing with Pinterest and other things, and was thinking about launching it tonight because a few reports have come in about bugs that are actually fixed.  If there's any chance you can fix this tomorrow, I'd love to launch 1.9.4 shortly thereafter.  If you won't have a chance (family or away from computer), don't feel bad - just let me know and I will work on it tomorrow.

@tomizimobile thanks for doing enough debugging to describe the issue - we'll get it patched up for you quickly!
",appleguy,aaronschubert0
969,2015-12-23 17:18:01,"I'm also really confused about what constrained size actually is. I'm also really unclear about which of `-layout`, `-layoutSpecThatFits:`. How is this related to `-calculateSizeThatFits:`?

@nguyenhuy any ideas
",fatuhoku,nguyenhuy
969,2015-12-23 17:46:37,"I'd love to see something like this too, @yury. @appleguy, I know you've mentioned this in the past. Let's start the discussion on making this API a reality.
",levi,appleguy
969,2016-06-17 04:55:23,"@maicki: should this go into `2.1` or `2.2` or `3.0`?
",hannahmbanana,maicki
963,2015-12-21 02:37:37,"@appleguy This small change allows content alignment like in the UIButton. The reason I had initially implemented this was to align 4 ASButtonNodes with flexBasis set with ASRelativeDimension(type: .Percent, value: 0.25). I simply wanted the ability to align ASButtonNode's content to make my whole view look good. I will create another PR for other behaviours I have in my app.

<img width=""377"" alt=""screen shot 2015-12-20 at 9 36 10 pm"" src=""https://cloud.githubusercontent.com/assets/823899/11922135/d0ca31e8-a761-11e5-8e5d-da9d86838218.png"">
",1nput0utput,appleguy
963,2015-12-21 07:26:00,"Thanks for thinking about improvements to ASButtonNode!  @rcancro, @nguyenhuy, @Adlai-Holler - any ideas on a different way to do this with the current layout system, or does this seem like the best way?  It does minimize exposing different properties of the stack, and we can't really expose the stack layout spec directly anyway without holding a reference to it, which is not allowed with the current design.
",appleguy,nguyenhuy
963,2015-12-21 07:26:00,"Thanks for thinking about improvements to ASButtonNode!  @rcancro, @nguyenhuy, @Adlai-Holler - any ideas on a different way to do this with the current layout system, or does this seem like the best way?  It does minimize exposing different properties of the stack, and we can't really expose the stack layout spec directly anyway without holding a reference to it, which is not allowed with the current design.
",appleguy,rcancro
963,2015-12-21 07:26:00,"Thanks for thinking about improvements to ASButtonNode!  @rcancro, @nguyenhuy, @Adlai-Holler - any ideas on a different way to do this with the current layout system, or does this seem like the best way?  It does minimize exposing different properties of the stack, and we can't really expose the stack layout spec directly anyway without holding a reference to it, which is not allowed with the current design.
",appleguy,Adlai-Holler
955,2015-12-22 05:13:15,"@smyrgl update on my side.  I dove into ImageIO and have been pretty desperately trying to figure out the best way to determine if an image is compressed or not.  The sad news is that I am pretty sure it can't be done in a practical way without access to the original data - you can go down a weird path with CGDataProvider but that doesn't seem to always work either, but better than that is to inspect the actual NSData using CGImageSource.

I'm thinking of changing the Downloader and Cache protocols to return NSData in their completion blocks rather than CGImageRef.  This could be done as a breaking change for the 2.0 API for anyone who is not using ASBasicImageDownloader, which would certainly be one way to ensure that everyone is using the framework as intended.  We could inspect the NSDatas in DEBUG mode to ensure they are compressed, and if almost all are decompressed, we know something funny is going on (like a user getting the data out of an image after another library decompresses it).

Really though, I want to get the PINRemoteImage integration accomplished.  PIRI supports WebP, but also Progressive JPEG, GIF, etc...and ASDK absolutely needs a ""1st party""-quality image downloader and decoding suite.  @Adlai-Holler has done a lot of work on ASMultiplexImageNode recently and might have some further thoughts here.

One last thing - the implementation of ASImageNode's async draw method can be significantly improved for the case where a decoded image IS provided.  It was much more efficient for the version used by Paper.  The current version is using UIGraphics contexts regardless of the incoming image, since we can't check if it is decoded.  If it is decoded, we can use the image directly as the contents (potentially setting contentsCenter / contentsRect if necessary) to reduce by approximately half the memory consumed (depends on how much upscaling / downscaling is currently being done by allocating the new buffer of exactly the right size).

There's a great deal more that can be done with image handling; for example the Paper version would decode images at native size if they were smaller than the area to be shown in, rather than drawing them at the final size; if they were larger than the ideal size, it would redraw them into the ideal size to save memory.  Very simple and clearly just the beginning compared to using progressive JPEG to its fullest potential, supporting awesome fading transitions (the current placeholderFadesOut option is pretty shady), etc.
",appleguy,Adlai-Holler
955,2016-03-19 01:07:31,"@smyrgl we now support PINRemoteImage and so this issue is resolved by default.

I will keep this issue open to add support for webP, and we should separately revisit whether there is a way to detect that a developer's custom downloader set up is erroneously providing decoded images to the framework.

At the moment, I am not aware of the way to reliably detect whether an image reference is decoded or not. Please let me know if you can think of a way to do this.  cc @garrettmoon, @maicki 
",appleguy,garrettmoon
955,2016-03-19 01:07:31,"@smyrgl we now support PINRemoteImage and so this issue is resolved by default.

I will keep this issue open to add support for webP, and we should separately revisit whether there is a way to detect that a developer's custom downloader set up is erroneously providing decoded images to the framework.

At the moment, I am not aware of the way to reliably detect whether an image reference is decoded or not. Please let me know if you can think of a way to do this.  cc @garrettmoon, @maicki 
",appleguy,maicki
952,2015-12-19 06:29:36,"Awesome, thanks @lappp9!  @Adlai-Holler, you should give us your feedback - still very early, but we want to start adding more APIs that become more opinionated on how things like the playhead / scrubber are specified and customized.  I'm thinking we will have a play-in-place mode that doesn't right away have support for a full scrubber control, but also offer a fullscreen mode backed by the existing UIKit media player.  The core value proposition would be efficient async fetchData / display range support for the thumbnail image as well as smoothly triggering autoplay upon the Visible .interfaceState (if some property like .autoplay = YES).
",appleguy,Adlai-Holler
952,2015-12-19 06:30:24,"@Eke, you're using a video node as well!  Who am I forgetting?  I am sure there was at least 1 or 2 other great folks who also were planning to use this soon & I talked to recently...
",appleguy,Eke
947,2015-12-17 02:19:27,"This will help performance incrementally but relevantly, because main thread view / layer materialization is by far the most common ""thunk"" of work that ASDK does on the main thread.  Just as importantly, it will make profiles easier to read / more concise in cases such as:

@Adlai-Holler, @lappp9 you might be interested in this one!  It would be pretty quick to rename some of these to C functions and / or consolidate them where it makes sense.

Running Time    Self (ms)       Symbol Name
28.0ms    1.8%  0.0                               -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:]
28.0ms    1.8%  0.0                                -[ASCollectionView collectionView:cellForItemAtIndexPath:]
17.0ms    1.1%  0.0                                 -[ASRangeController configureContentView:forCellNode:]
15.0ms    0.9%  0.0                                  -[ASDisplayNode view]
15.0ms    0.9%  0.0                                   -[ASDisplayNode _loadViewOrLayerIsLayerBacked:]
14.0ms    0.9%  0.0                                    -[ASDisplayNode _addSubnodeViewsAndLayers]
14.0ms    0.9%  0.0                                     -[ASDisplayNode _addSubnodeSubviewOrSublayer:]
13.0ms    0.8%  0.0                                      -[ASDisplayNode view]
13.0ms    0.8%  0.0                                       -[ASDisplayNode _loadViewOrLayerIsLayerBacked:]
12.0ms    0.7%  0.0                                        -[ASDisplayNode _addSubnodeViewsAndLayers]
12.0ms    0.7%  0.0                                         -[ASDisplayNode _addSubnodeSubviewOrSublayer:]
8.0ms    0.5%   0.0                                          -[ASDisplayNode view]
8.0ms    0.5%   0.0                                           -[ASDisplayNode _loadViewOrLayerIsLayerBacked:]
6.0ms    0.3%   0.0                                            -[ASDisplayNode _addSubnodeViewsAndLayers]
6.0ms    0.3%   0.0                                             -[ASDisplayNode _addSubnodeSubviewOrSublayer:]
4.0ms    0.2%   0.0                                              -[ASDisplayNode view]
4.0ms    0.2%   0.0                                               -[ASDisplayNode _loadViewOrLayerIsLayerBacked:]
3.0ms    0.1%   0.0                                                -[ASDisplayNode _addSubnodeViewsAndLayers]
3.0ms    0.1%   0.0                                                 -[ASDisplayNode _addSubnodeSubviewOrSublayer:]
2.0ms    0.1%   0.0                                                  -[ASDisplayNode view]
2.0ms    0.1%   0.0                                                   -[ASDisplayNode _loadViewOrLayerIsLayerBacked:]
2.0ms    0.1%   0.0                                                    -[ASDisplayNode _applyPendingStateToViewOrLayer]
2.0ms    0.1%   0.0                                                     -[_ASPendingState applyToView:]
2.0ms    0.1%   0.0                                                      -[_ASDisplayView setContentMode:]
2.0ms    0.1%   0.0                                                       -[CALayer setContentsGravity:]
",appleguy,lappp9
947,2015-12-17 02:19:27,"This will help performance incrementally but relevantly, because main thread view / layer materialization is by far the most common ""thunk"" of work that ASDK does on the main thread.  Just as importantly, it will make profiles easier to read / more concise in cases such as:

@Adlai-Holler, @lappp9 you might be interested in this one!  It would be pretty quick to rename some of these to C functions and / or consolidate them where it makes sense.

Running Time    Self (ms)       Symbol Name
28.0ms    1.8%  0.0                               -[UICollectionView _createPreparedCellForItemAtIndexPath:withLayoutAttributes:applyAttributes:isFocused:]
28.0ms    1.8%  0.0                                -[ASCollectionView collectionView:cellForItemAtIndexPath:]
17.0ms    1.1%  0.0                                 -[ASRangeController configureContentView:forCellNode:]
15.0ms    0.9%  0.0                                  -[ASDisplayNode view]
15.0ms    0.9%  0.0                                   -[ASDisplayNode _loadViewOrLayerIsLayerBacked:]
14.0ms    0.9%  0.0                                    -[ASDisplayNode _addSubnodeViewsAndLayers]
14.0ms    0.9%  0.0                                     -[ASDisplayNode _addSubnodeSubviewOrSublayer:]
13.0ms    0.8%  0.0                                      -[ASDisplayNode view]
13.0ms    0.8%  0.0                                       -[ASDisplayNode _loadViewOrLayerIsLayerBacked:]
12.0ms    0.7%  0.0                                        -[ASDisplayNode _addSubnodeViewsAndLayers]
12.0ms    0.7%  0.0                                         -[ASDisplayNode _addSubnodeSubviewOrSublayer:]
8.0ms    0.5%   0.0                                          -[ASDisplayNode view]
8.0ms    0.5%   0.0                                           -[ASDisplayNode _loadViewOrLayerIsLayerBacked:]
6.0ms    0.3%   0.0                                            -[ASDisplayNode _addSubnodeViewsAndLayers]
6.0ms    0.3%   0.0                                             -[ASDisplayNode _addSubnodeSubviewOrSublayer:]
4.0ms    0.2%   0.0                                              -[ASDisplayNode view]
4.0ms    0.2%   0.0                                               -[ASDisplayNode _loadViewOrLayerIsLayerBacked:]
3.0ms    0.1%   0.0                                                -[ASDisplayNode _addSubnodeViewsAndLayers]
3.0ms    0.1%   0.0                                                 -[ASDisplayNode _addSubnodeSubviewOrSublayer:]
2.0ms    0.1%   0.0                                                  -[ASDisplayNode view]
2.0ms    0.1%   0.0                                                   -[ASDisplayNode _loadViewOrLayerIsLayerBacked:]
2.0ms    0.1%   0.0                                                    -[ASDisplayNode _applyPendingStateToViewOrLayer]
2.0ms    0.1%   0.0                                                     -[_ASPendingState applyToView:]
2.0ms    0.1%   0.0                                                      -[_ASDisplayView setContentMode:]
2.0ms    0.1%   0.0                                                       -[CALayer setContentsGravity:]
",appleguy,Adlai-Holler
938,2015-12-14 23:18:39,"@smyrgl thanks for the idea and analysis!  This is a pretty heavy consideration.  UICollectionView has noticeably poorer performance than UITableView for table-like scenarios, and though we can mitigate some of these issues (and should further quantify them on modern hardware and recent iOS versions), most are due to the overhead / object creation of UICollectionViewLayout's objects (which we won't be able to avoid even using something like ASFlowLayoutController).

@levi, @eanagel, @Adlai-Holler would be interested in your thoughts here.  @smyrgl I do know that Ethan has made a very interesting ASListNode component that is basically like a lightweight, ASDK-native, ultra fast table with special features for virtualizing data sources.  It is not finished yet, but it could meaningfully support this direction, where my primary hesitancy is forcing the overhead of UICollectionView on clients with table-only needs.
",appleguy,levi
938,2015-12-14 23:18:39,"@smyrgl thanks for the idea and analysis!  This is a pretty heavy consideration.  UICollectionView has noticeably poorer performance than UITableView for table-like scenarios, and though we can mitigate some of these issues (and should further quantify them on modern hardware and recent iOS versions), most are due to the overhead / object creation of UICollectionViewLayout's objects (which we won't be able to avoid even using something like ASFlowLayoutController).

@levi, @eanagel, @Adlai-Holler would be interested in your thoughts here.  @smyrgl I do know that Ethan has made a very interesting ASListNode component that is basically like a lightweight, ASDK-native, ultra fast table with special features for virtualizing data sources.  It is not finished yet, but it could meaningfully support this direction, where my primary hesitancy is forcing the overhead of UICollectionView on clients with table-only needs.
",appleguy,eanagel
938,2015-12-14 23:18:39,"@smyrgl thanks for the idea and analysis!  This is a pretty heavy consideration.  UICollectionView has noticeably poorer performance than UITableView for table-like scenarios, and though we can mitigate some of these issues (and should further quantify them on modern hardware and recent iOS versions), most are due to the overhead / object creation of UICollectionViewLayout's objects (which we won't be able to avoid even using something like ASFlowLayoutController).

@levi, @eanagel, @Adlai-Holler would be interested in your thoughts here.  @smyrgl I do know that Ethan has made a very interesting ASListNode component that is basically like a lightweight, ASDK-native, ultra fast table with special features for virtualizing data sources.  It is not finished yet, but it could meaningfully support this direction, where my primary hesitancy is forcing the overhead of UICollectionView on clients with table-only needs.
",appleguy,Adlai-Holler
938,2016-02-08 16:26:52,"@appleguy I've never noticed or read anything about the worst performance of UICollectionView towards UITableView, although it makes completely sense. Do you have some inputs to share about this ?  

@eanagel I would be very interested by your ASListNode, do you have some hints for when it should be publicly available / or a link if it's already the case ?
",macistador,eanagel
938,2016-06-26 19:46:58,"@smyrgl @eanagel @macistador: I have nothing specific to report here, but I wanted to let you know that @Adlai-Holler (ASDK's new full-time developer) is currently exploring this idea for a post 2.0 release. 
",hannahmbanana,Adlai-Holler
937,2015-12-14 02:09:59,"Yes.  However, we actually also need to do something like this for all ASLayouts.  Under-specified Stack layouts can crash due to setting NaN and/or Inf on CALayer, and they also routinely set really uneven floating point numbers.  Any idea on what layer we could inject this to properly apply that effect without messing up more manual calculations that folks do based on calculatedLayout?  I think ASLayout itself will just need to return the rounded values.  Wonder if the snapshot tests would pass with this.

cc @rcancro, @Adlai-Holler, @nguyenhuy 

This patch is fine to merge and I'm ready to take it, but since it would probably be superseded / replaced by the other change, I'm wondering if we can quickly find the right spot to drop that in.
",appleguy,nguyenhuy
937,2015-12-14 02:09:59,"Yes.  However, we actually also need to do something like this for all ASLayouts.  Under-specified Stack layouts can crash due to setting NaN and/or Inf on CALayer, and they also routinely set really uneven floating point numbers.  Any idea on what layer we could inject this to properly apply that effect without messing up more manual calculations that folks do based on calculatedLayout?  I think ASLayout itself will just need to return the rounded values.  Wonder if the snapshot tests would pass with this.

cc @rcancro, @Adlai-Holler, @nguyenhuy 

This patch is fine to merge and I'm ready to take it, but since it would probably be superseded / replaced by the other change, I'm wondering if we can quickly find the right spot to drop that in.
",appleguy,rcancro
931,2015-12-11 04:00:42,"@lappp9 awesome head start on this feature - a highly desired one for a number of use cases, including @levi's ASPagerNode!  Will review / give feedback soon.
",appleguy,levi
930,2015-12-09 22:17:26,"@ocrickard @levi this is a regression from the CK text engine...any ideas?
",appleguy,levi
930,2015-12-09 22:17:26,"@ocrickard @levi this is a regression from the CK text engine...any ideas?
",appleguy,ocrickard
926,2015-12-09 02:14:22,"@nivanchikov fantastic, thank you!  @rcancro can help us review this important new addition.  I know that @nguyenhuy / @levi and others are extremely interested in the possibility of enabling a per-item alignment in stacks as well (which in one of the orientations would translate to a per-item vertical alignment).  So my main question is how, if at all, we should integrate this with that.

Could you share a couple examples of the use cases you have found for this?  I'll note that it seems to me like this option will only take effect if the user sets the frame of the text node to be larger than it calculates for itself during the measurement pass.  This is something that should be avoided whenever convenient, because more memory is consumed by the blank areas in the larger backing store (and also, more blending / texture upload cost for the GPU).  Still, I think it is a worthwhile flexibility to have in the framework.
",appleguy,nguyenhuy
926,2015-12-09 02:14:22,"@nivanchikov fantastic, thank you!  @rcancro can help us review this important new addition.  I know that @nguyenhuy / @levi and others are extremely interested in the possibility of enabling a per-item alignment in stacks as well (which in one of the orientations would translate to a per-item vertical alignment).  So my main question is how, if at all, we should integrate this with that.

Could you share a couple examples of the use cases you have found for this?  I'll note that it seems to me like this option will only take effect if the user sets the frame of the text node to be larger than it calculates for itself during the measurement pass.  This is something that should be avoided whenever convenient, because more memory is consumed by the blank areas in the larger backing store (and also, more blending / texture upload cost for the GPU).  Still, I think it is a worthwhile flexibility to have in the framework.
",appleguy,rcancro
926,2015-12-09 02:14:22,"@nivanchikov fantastic, thank you!  @rcancro can help us review this important new addition.  I know that @nguyenhuy / @levi and others are extremely interested in the possibility of enabling a per-item alignment in stacks as well (which in one of the orientations would translate to a per-item vertical alignment).  So my main question is how, if at all, we should integrate this with that.

Could you share a couple examples of the use cases you have found for this?  I'll note that it seems to me like this option will only take effect if the user sets the frame of the text node to be larger than it calculates for itself during the measurement pass.  This is something that should be avoided whenever convenient, because more memory is consumed by the blank areas in the larger backing store (and also, more blending / texture upload cost for the GPU).  Still, I think it is a worthwhile flexibility to have in the framework.
",appleguy,levi
924,2015-12-08 10:44:09,"Hey @appleguy, here are changes based on your latest feedback
Notable changes:
- Changed init method to `-initWithRegion:` instead of `initWithCoordinate:`
- You can now call setLiveMap before ASMapNode has been loaded to start off with a live map view.
- Smaller syntax changes and clean up.

Just had a thought though, would it be useful for people to be able to change the region after the initialisation of ASMapNode, should we provide a method for this?
",aaronschubert0,appleguy
922,2015-12-09 16:39:54,"@tomizimobile Thanks for another awesomely-thorough report!

On animations: I believe the reason `setAnimationsEnabled` isn't working in this case is, ASTableView enqueues those animations asynchronously after returning from `endUpdates`. In your test project, calling `tableView.endUpdatesAnimated(false, completion: nil)` does the trick for me. It's not API-compatible with UIKit, but is that OK?

On crashing when reloading data: This is indeed a bug in the framework! Diving in, I've found that during the `[super reloadData]`, `ASTableView` is returning 12 sections (the pre-filter value) when your table view data source is only returning 6 – the data controller must requery the underlying data source immediately, or else this `titleForHeader:` crash is inevitable. I tried shuffling around the implementation of `ASTableView.reloadData` but no luck.

The fact that `titleForHeader:` is a delegate method, not a data-source method, is kind of screwing with the data architecture of ASTableView, because it allows the client to talk directly to UITableView about its data, which isn't what's up. @nguyenhuy can you think of an approach that wouldn't tear ASTableView apart?
",Adlai-Holler,nguyenhuy
920,2015-12-07 08:09:43,"Hi, @appleguy :

I've been recently reading the source code of ASDK, It's really awesome! 

My question is : have you considered using CALayer's API: 

`- (void)renderInContext:(CGContextRef)ctx;""`?

Here is some sudo code:



This way I can still use UIKit objects and get layer's snapshot on the background thread.

Is there any thread-safety reason or other problems with this method? 
",vizlabxt,appleguy
920,2015-12-07 16:00:44,"@aaronschubert0 I'm not talking about ASDisplayNode here. I'm thinking if I can get a snapshot from a normal UIKit object on the background thread, I don't have to use ASDK to achieve the asynchronous rendering. As @appleguy says, the CoreAnimation API is designed for main thread only. However, the `[self.headIcon.layer renderInContext:context];` can be executed safely on the background thread.
",vizlabxt,appleguy
915,2015-12-06 06:28:49,"This fixes the recently-reported deadlock, at least to the extent of my testing so far (100% repro with @Adlai-Holler 's test app before, 0% after).

It also adds a new header, ASDisplayNode+FrameworkPrivate.h, to avoid over-usage of *Internal and *+Subclasses.  I cleaned up several such usages.  Having wanted to do this for quite some time, I'm pretty happy to have the file established and know there is more cathartic refactoring to come!

ASHierarchyState itself is obviously similar to ASInterfaceState, but currently has only two state types and does /not/ currently perform operations when the state changes.  Instead, the state is checked by several key codepaths.  I would like to consider expanding this in the future to integrate things like isInHierarchy, and possibly finer-grained definitions of that such as ""in window"" vs ""in subtree / any hierarchy"".  Would love ideas both on the current behavior and future possibilities for refactoring + unification around a feature such as this.

The main thing remaining to do here is implement some tests, especially including the combination of the Rasterization and RangeManaged options in the same tree, with runtime enabling + disabling of Rasterization at different levels of the hierarchy.  Should also test that RangeManaged is not set on an ASCellNode used in isolation, but is in both ASTableView and ASCollectionView.  If anyone wants to give this a shot, please do - we need improved test harnesses too, and it may be necessary to do that to get strong coverage of this particular set of behaviors.

I'd love to have a couple community reviewers on this diff before landing it, so please comment!  At the same time, I want to land it quickly and get some testing from at least one or two users who have seen the deadlock.  Lastly, I need to ship this with 1.9.3 by end-of-day tomorrow (Sunday) or I will fall behind during the week.
",appleguy,Adlai-Holler
915,2015-12-06 21:59:27,"@Adlai-Holler so I implemented this in such a way that ASCellNode will behave like a regular node if it is not actually ingested by the ASTableView/ASCollectionView machinery.  The idea is that ASCellNode is a convenient superclass for things that may be used both standalone and inside a table / collection.  I wouldn't necessarily recommend this widely, but if it can be supported easily, it seems like more intuitive behavior rather than mysteriously breaking things like image loading.

The upshot is that this test you added fails, as it does go into the InHierarchy state after being added to a view.  What do you think: if an interface state is set on the node manually, should that trigger us to avoid automatically manipulating the state?  Or should we ""blow it away"" with the automatic behavior?  I think blowing it away (and changing this assert to check for InHierarchy) may be the best option for now.

<img width=""733"" alt=""screen shot 2015-12-06 at 1 56 28 pm"" src=""https://cloud.githubusercontent.com/assets/565251/11615897/8e86c60c-9c21-11e5-88dc-51d882c2a646.png"">
",appleguy,Adlai-Holler
915,2015-12-06 23:08:34,"@levi, @Adlai-Holler, @nguyenhuy thanks so much for the feedback!  Indeed you guys found a couple clear issues that reflect the fact that I hadn't yet seriously tested this, but by calling them out, you definitely saved me time and have bettered 1.9.3 because of it :).

I've been head-desk-banging a bit because the tests are still not passing.  In fact the output of the snapshot tests is blank for many ASLayoutSpec tests, even though ASLayoutSpec-based apps are running fine.  I haven't found an example app with a visible bug yet, which is strange, so I'm suspecting something about the highly artificial force-display mechanisms used by the test harnesses.  Still I don't want to make a change that breaks those, at least until they're working again (at which point I'd like to replace the hackily... method signature with the properly-supported -recursivelyEnsureDisplay or similar).

Let me know if you have any intuition on why layer snapshot comparisons are failing, but I will continue investigating.
",appleguy,levi
915,2015-12-06 23:08:34,"@levi, @Adlai-Holler, @nguyenhuy thanks so much for the feedback!  Indeed you guys found a couple clear issues that reflect the fact that I hadn't yet seriously tested this, but by calling them out, you definitely saved me time and have bettered 1.9.3 because of it :).

I've been head-desk-banging a bit because the tests are still not passing.  In fact the output of the snapshot tests is blank for many ASLayoutSpec tests, even though ASLayoutSpec-based apps are running fine.  I haven't found an example app with a visible bug yet, which is strange, so I'm suspecting something about the highly artificial force-display mechanisms used by the test harnesses.  Still I don't want to make a change that breaks those, at least until they're working again (at which point I'd like to replace the hackily... method signature with the properly-supported -recursivelyEnsureDisplay or similar).

Let me know if you have any intuition on why layer snapshot comparisons are failing, but I will continue investigating.
",appleguy,nguyenhuy
913,2015-12-04 21:15:48,"This resolves #897. I added two test cases, and also posted a toy project https://github.com/Adlai-Holler/ASDKPlainNodeTest.
##### Changes
- Add new interface state `ASInterfaceStateInHierarchy` that unites all others. This is the interface state for non cell-hosted nodes that are in the window hierarchy. I don't like the name – I considered `Unknown` but that seems like none more than all, and I considered `All` but that's not very informative.
##### Questions
- What's the safest way to push the `inCellNode`ness down the hierarchy? It's sort of unsafe to walk up the node hierarchy to check during `willEnterHierarchy` and `didExitHierarchy`
- I added `checkViewHierarchy:` param to `_supernodeWithClass` but honestly I wish I had just removed that behavior altogether. We don't call `_supernodeWithClass` anywhere in our code. But I wanted to ask because I haven't thought through the possible benefits of walking up the view hierarchy.

@appleguy What do you think? 
",Adlai-Holler,appleguy
907,2015-12-04 01:55:55,"@Adlai-Holler Interesting.  Seems a bit silly.  This is probably a vestigial behavior from Paper where, perhaps, there were some views that may have linkified text returned from the server but we didn't want any part of the gesture system to react to this.

Do you think the fix is as simple as deleting the if() at the end of the quoted code segment?  That's the fix I would suggest, but this is an area I am not deeply familiar with in the codebase.  @bdaz did work in this area a long time ago, as did @ocrickard, but I think it's a longshot that they would know the answer so let's hypothesize a solution proactively!
",appleguy,bdaz
907,2015-12-04 01:55:55,"@Adlai-Holler Interesting.  Seems a bit silly.  This is probably a vestigial behavior from Paper where, perhaps, there were some views that may have linkified text returned from the server but we didn't want any part of the gesture system to react to this.

Do you think the fix is as simple as deleting the if() at the end of the quoted code segment?  That's the fix I would suggest, but this is an area I am not deeply familiar with in the codebase.  @bdaz did work in this area a long time ago, as did @ocrickard, but I think it's a longshot that they would know the answer so let's hypothesize a solution proactively!
",appleguy,ocrickard
901,2015-12-02 01:54:43,":-D there's also a whole world of weird and (wonderful?) autolayout-related methods that @rcancro taught me about.  We got useful name inspiration from them, for things I'd never heard of like preferredFrameSize!
",appleguy,rcancro
898,2015-12-01 01:24:03,"@nguyenhuy @appleguy Experimenting with Kittens shows that when you enlarge the image this still correctly updates the table view, but when you swap the image and text it correctly does not bother the table view.
- Change delegate method `nodeDidRelayout:` to `nodeDidRelayoutWithSizeChange:` to filter layouts that don't affect height.
- In `ASTableView`, `ASCollectionView`, enqueue `beginUpdates()/endUpdates()` in the run loop. These calls can be expensive – querying 100 nodes for their heights and enqueuing an animation – so this should be worth the effort.
",Adlai-Holler,nguyenhuy
898,2015-12-01 01:24:03,"@nguyenhuy @appleguy Experimenting with Kittens shows that when you enlarge the image this still correctly updates the table view, but when you swap the image and text it correctly does not bother the table view.
- Change delegate method `nodeDidRelayout:` to `nodeDidRelayoutWithSizeChange:` to filter layouts that don't affect height.
- In `ASTableView`, `ASCollectionView`, enqueue `beginUpdates()/endUpdates()` in the run loop. These calls can be expensive – querying 100 nodes for their heights and enqueuing an animation – so this should be worth the effort.
",Adlai-Holler,appleguy
897,2015-12-01 06:46:27,"I'm sorry for this regression, thanks for bringing it up! At the heart of this issue is our reliance on the range controller to inform nodes of their interface state. Unfortunately I'm not sure the old code is super good either – this code may be called on a background thread but it accesses the `superlayer` property, and having a superlayer hardly implies that we should download an image. 

@appleguy Would it be insane to, as long as only our cell nodes will get interface state info, check to see if we have an `ASCellNode` ancestor? Something roughly like `if ((self.as_cellNode == nil && self.isNodeLoaded) || self.interfaceState & ASInterfaceStateFetchData)`? It's not gorgeous, but it should get us decent interim behavior – cell nodes will load intelligently and all other nodes will fire away the download immediately, so long as the node is loaded. And then when the node gets loaded, if we're not in a cell node, we fire away also.
",Adlai-Holler,appleguy
896,2015-12-04 03:50:03,"@nguyenhuy, @levi this one is a bit unusual.  Did something leave an update transaction open?  I am still investigating, but definitely surprised.


",appleguy,nguyenhuy
896,2015-12-04 03:50:03,"@nguyenhuy, @levi this one is a bit unusual.  Did something leave an update transaction open?  I am still investigating, but definitely surprised.


",appleguy,levi
896,2015-12-04 05:23:19,"@tomizimobile so I believe this is fixed in master - please try it out and let me know what you find!  I also verified memory behavior — using Leaks / Allocations tool, ensured all of the ASDK-associated objects that are created by the button press are torn down. It seems stable over multiple launches of the modal view.

I was studying the code for this and realized the most likely cause is a ""performOnMain"" call that happens just before deallocation.  Then the main call occurs with something like reloadData, in the next runloop, and triggers the layout assertion.

Then I realized that a diff I had open to review would almost certainly address this condition.  Turns out it did, which is an awesome coincidence (and shows how a layout change triggered by tear-down could even cause asynchronous data reloading -- no good!).  https://github.com/facebook/AsyncDisplayKit/pull/898  Thank you @Adlai-Holler !
",appleguy,Adlai-Holler
895,2015-11-30 05:23:28,"@appleguy #894
",Adlai-Holler,appleguy
894,2015-11-30 01:37:20,"The first commit is the actual relevant change. The second commit is for consistency with the rest of the framework plus mutexes are more flexible than spin locks. The third commit fixes two issues 1) we shouldn't copy the array in the getter and 2) we should deep copy the array in the setter.

This is pursuant to the mention in #850 @appleguy 
",Adlai-Holler,appleguy
893,2015-11-29 01:12:56,"@stowy Thanks for reporting.  What kind of collection layout are you using?  Supplementary nodes are supported out of the box with Flow Layouts, but for custom layouts, it is necessary that you implement the ...LayoutInspecting API / delegate.  An example of this is here: https://github.com/facebook/AsyncDisplayKit/pull/879/files  The author of the example is also the author of the supplementary node support, so if you provide more detail on your implementation, we should be able to help resolve any issues.

@levi in any case, we should ensure that it is very difficult to cause a crash even if LayoutInspecting or something else is not implemented correctly.

@stowy can you please include a /full/ crash log of where the crash is occurring, include any console logs (such as strings printed by an NSException), and describe what action causes the crash? (simply launching the app / viewing the collection, or if it requires scrolling, etc)
",appleguy,levi
893,2015-11-30 01:17:14,"@stowy awesome, thanks for the details.  What commit hash is the HEAD of your version of ASDK?  Can you re-link your project against the latest master version and let me know if the crash either goes away or changes?

I notice in the stack some stuff about GPRaptorEngine, and then a trampoline call.  Are you absolutely certain that the asyncDataSource and asyncDelegate are in a consistent state?  Remember, ASCollectionView has special behavior that creates a separation between the UIKit layer and the ASDK layer to facilitate asynchronous computation, so if your subclass of ASCollectionView is doing fancy stuff at the UIKit layer (such as calling UICollectionView methods that aren't bridged / implemented by ASCollectionView), it could cause a variety of issues like this.

It may well be that the bug is in ASDK, but it would be important to know if the reason is that ASDK is missing an override for some UICollectionView method that we didn't think of which your class may be using.  cc @levi 
",appleguy,levi
892,2015-11-29 01:02:01,"cc @levi, @vitalybaev 
",appleguy,levi
892,2015-11-29 01:02:01,"cc @levi, @vitalybaev 
",appleguy,vitalybaev
892,2016-06-18 15:11:50,"Oops, @hannahmbanana
",levi,hannahmbanana
889,2016-11-28 01:40:32,"@Adlai-Holler has looked at the async display system a good bit (transactions), so he could coordinate with @nguyenhuy to decide which one of them has cycles post-2.0 to investigate.",appleguy,nguyenhuy
889,2016-11-28 01:40:32,"@Adlai-Holler has looked at the async display system a good bit (transactions), so he could coordinate with @nguyenhuy to decide which one of them has cycles post-2.0 to investigate.",appleguy,Adlai-Holler
886,2015-11-28 03:05:55,"@bimawa the .isFinalLayoutable flag is not intended for users of the framework to set in this situation.  It is actually a very advanced feature that few users should need (@rcancro, we should make sure this is properly documented).

You can check the .calculatedLayout property to get the currently calculated ASLayout, which will not be set until the layout pass is completely done.  However, I caution that what you describe with multiple threads being involved sounds risky / difficult to get right.  I would be happy to advise further if you are able to explain in more detail 1) what you are trying to accomplish, and 2) what the details of your multithreading technique are.
",appleguy,rcancro
884,2015-11-25 02:13:56,"This resolves #869. @appleguy

See below. ~~The diff is hard-to-read since I reordered lines, but all that is different is when we enumerate changes in reverse (for deletes) our ""end index"" is actually the _first_ index in the set, not the last index.~~
",Adlai-Holler,appleguy
884,2015-11-25 02:55:23,"OK @appleguy now it's ready to rock. Go with split view for the diff IMO. We're trying to coalesce changes into contiguous blocks that all have the same animation option, so we can submit them in safe order up to the data controller.

The way the grouping works now, for each element in the sorted array, we do:
1) End current group if non-empty and animation option for this change doesn't match it.
2) Update current animation option if current group is empty.
3) Add element to current group.

And then after the enumeration, if the current group is non-empty, we end that group as well.
",Adlai-Holler,appleguy
884,2015-11-26 01:22:52,"@appleguy I know this is a tricky PR because it's touching such important code that currently has low test coverage. Let me know if I can do anything to ameliorate that other than add tests – which I can do later but don't have time/energy for right now.
",Adlai-Holler,appleguy
884,2015-11-26 21:20:51,"Thanks @Adlai-Holler - this makes my Thanksgiving! :-D  @levi, @nguyenhuy, @eanagel if any one of you has a chance to review, please do.  I may land this before anyone else can review (in part because I really trust the four of you, from past experience seeing the quality of your work and testing), but Because this code has had trouble since its inception, additional reviews of fixes are always good to help spot issues. 
",appleguy,levi
884,2015-11-26 21:20:51,"Thanks @Adlai-Holler - this makes my Thanksgiving! :-D  @levi, @nguyenhuy, @eanagel if any one of you has a chance to review, please do.  I may land this before anyone else can review (in part because I really trust the four of you, from past experience seeing the quality of your work and testing), but Because this code has had trouble since its inception, additional reviews of fixes are always good to help spot issues. 
",appleguy,nguyenhuy
884,2015-11-26 21:20:51,"Thanks @Adlai-Holler - this makes my Thanksgiving! :-D  @levi, @nguyenhuy, @eanagel if any one of you has a chance to review, please do.  I may land this before anyone else can review (in part because I really trust the four of you, from past experience seeing the quality of your work and testing), but Because this code has had trouble since its inception, additional reviews of fixes are always good to help spot issues. 
",appleguy,eanagel
882,2015-11-24 00:07:19,"@appleguy This may be fixed in your working window PR, but I encountered a tough case today. I have a table view whose content is pretty static, and its cells contain multiplex image nodes. Seemingly at random after a lot of browsing around, I got into a state like this:



No threads were doing anything interesting. Since `ASImageNode.image` was set correctly, the multiplex logic seems to be working right.

The `ASImageNode` hadn't displayed since getting the high res image set. I ran `po [imageNode setNeedsDisplay]` and sure enough, the image node re-rendered at full-res.  Maybe the range controller suppressed a display and then forgot to come back and redo it?

I'm currently trying to think of a workaround because these blurry images are in a build for investors. ~~I'm thinking I'll override `willEnterHierarchy` and, with some leeway, make sure that the node has been/will be displayed soon.~~

EDIT: I've come up with a workaround in my app. In our multiplex image node subclass, we do:


",Adlai-Holler,appleguy
880,2015-11-24 06:07:27,"@robmontesinos Hey, thanks for bringing this up.  Could you share a bit more information about the condition you're aiming to detect?  Does the server give an HTTP 404 or some other error when you access the other URL?

In general, it would be best for the app to be able to detect and adjust to this condition without relying simply on the URL request.  There are many reasons a URL request can fail, and of course it takes a full round trip time to figure out what has happened.

I'd suggest, for example, if the user changes their profile picture then immediately trigger a query of the server for any ""current user"" objects or other loaded data to get updated URLs - before the URLs are actually needed to be displayed.  A key reason for this is that the code which knows how to find the right URL, if the current one fails, is at a higher level in the architecture of the app than just the lowly image node.  The image node should not understand the true ""source"" of the image or how it would go about requesting an updated data model directly from the server.

All that said, yes it is probably fairly straightforward to add a callback to an image node delegate (I think Multiplex already has a  delegate or datasource API; Network might also) which reports any loading errors to the owner of the node.  This I think would be a reasonable step even if you don't use it for the purpose described, which I'd recommend avoiding.  The main consideration is whether the ASImageDownloader protocol is actually the best place to support this kind of thing.  For example, ASBasicImageDownloader could provide the error callback directly.  If it were added to the protocol itself, then it would require all downloaders to support passing the errors to the node just so the node could pass them to an /optional/ delegate method...and we don't want that.

You may want to use this AsyncDisplayKit-integrated version of SDWebImage: https://github.com/ide/WebASDKImageManager

Pinterest is also currently working on some special custom integrations between PINRemoteImage and AsyncDisplayKit, but this won't be available for a few months and we haven't thought about an error API outside the framework.

@Adlai-Holler has done work throughout the image nodes, and may have thoughts on it!
",appleguy,Adlai-Holler
877,2015-11-22 21:38:20,"@soniccat thanks for investigating this, and especially for providing a test project.

AsyncDisplayKit is not considered compatible with Interface Builder.  If this fix is carefully tested to be safe for all use cases that don't rely on Interface Builder, and also doesn't have any negative impact on performance, I'm happy to take it even if it only benefits IB.  However, the text code paths are tremendously critical to the framework so we need to move very carefully here.

If you could tweak the brace style to match the nearby methods and remove the Podfile.lock method, we'll be closer to landing.

@levi or @rcancro if you happen to have time to look into the test project to understand the issue and the fix, that would be great.  It will take me at least a week to get back to this because of some key deliverables before Thanksgiving, and then visiting family for the rest of the week, but we will keep this PR open until a decision is made.

Good to have you engaging with the project @soniccat - let us know if we can help with your implementation!
",appleguy,levi
877,2015-11-22 21:38:20,"@soniccat thanks for investigating this, and especially for providing a test project.

AsyncDisplayKit is not considered compatible with Interface Builder.  If this fix is carefully tested to be safe for all use cases that don't rely on Interface Builder, and also doesn't have any negative impact on performance, I'm happy to take it even if it only benefits IB.  However, the text code paths are tremendously critical to the framework so we need to move very carefully here.

If you could tweak the brace style to match the nearby methods and remove the Podfile.lock method, we'll be closer to landing.

@levi or @rcancro if you happen to have time to look into the test project to understand the issue and the fix, that would be great.  It will take me at least a week to get back to this because of some key deliverables before Thanksgiving, and then visiting family for the rest of the week, but we will keep this PR open until a decision is made.

Good to have you engaging with the project @soniccat - let us know if we can help with your implementation!
",appleguy,rcancro
877,2015-11-24 07:26:21,"@appleguy @levi thanks for your comments and advice. I fixed braces, layer support and Podfile.lock.  
 Now I work at a project where we use xibs and actually I like them. Now I'm investigating of how AsyncDisplayKit can improve performance just in my case.
",soniccat,levi
877,2015-11-30 20:15:07,"@soniccat I'm still looking at this one actively - thanks for your patience, and providing detailed information.  Is it correct to understand this diff as automatically re-measuring the text /synchronously on the drawing thread/ in the event there is a size mismatch?

@ocrickard, @levi I would be interested in your thoughts on this behavior.  I really don't think this is necessarily the right behavior to fix the XIB case, but it may be a better behavior for the framework overall.  In the XIB case, we might as well skip the first measurement entirely if the text node's size is not essential to calculating the layout (e.g., if the layout defines the text node's constrained size, but the calculated size is not actually needed).

@nguyenhuy, @soniccat my concern with this is that the overall layout may be incorrect in this scenario, and this behavior could potentially hide the incorrectness in some cases (e.g. making it behave correctly when the actual inputs / code flows are not normal, such as requiring double-sizing of text).

The alternative might be to rely on -invalidateLayout or some other call, and ensure that if the display pass detects there is a mismatch, it triggers as complete of a layout pass is necessary to guarantee that any components that are affected by the newly calculated size of the text have a chance to be adjusted.  This could even mean abandoning the current display pass with an early return and calling -setNeedsDisplay, awaiting a new display call after the relayout is complete?
",appleguy,levi
877,2015-11-30 20:15:07,"@soniccat I'm still looking at this one actively - thanks for your patience, and providing detailed information.  Is it correct to understand this diff as automatically re-measuring the text /synchronously on the drawing thread/ in the event there is a size mismatch?

@ocrickard, @levi I would be interested in your thoughts on this behavior.  I really don't think this is necessarily the right behavior to fix the XIB case, but it may be a better behavior for the framework overall.  In the XIB case, we might as well skip the first measurement entirely if the text node's size is not essential to calculating the layout (e.g., if the layout defines the text node's constrained size, but the calculated size is not actually needed).

@nguyenhuy, @soniccat my concern with this is that the overall layout may be incorrect in this scenario, and this behavior could potentially hide the incorrectness in some cases (e.g. making it behave correctly when the actual inputs / code flows are not normal, such as requiring double-sizing of text).

The alternative might be to rely on -invalidateLayout or some other call, and ensure that if the display pass detects there is a mismatch, it triggers as complete of a layout pass is necessary to guarantee that any components that are affected by the newly calculated size of the text have a chance to be adjusted.  This could even mean abandoning the current display pass with an early return and calling -setNeedsDisplay, awaiting a new display call after the relayout is complete?
",appleguy,nguyenhuy
877,2015-11-30 20:15:07,"@soniccat I'm still looking at this one actively - thanks for your patience, and providing detailed information.  Is it correct to understand this diff as automatically re-measuring the text /synchronously on the drawing thread/ in the event there is a size mismatch?

@ocrickard, @levi I would be interested in your thoughts on this behavior.  I really don't think this is necessarily the right behavior to fix the XIB case, but it may be a better behavior for the framework overall.  In the XIB case, we might as well skip the first measurement entirely if the text node's size is not essential to calculating the layout (e.g., if the layout defines the text node's constrained size, but the calculated size is not actually needed).

@nguyenhuy, @soniccat my concern with this is that the overall layout may be incorrect in this scenario, and this behavior could potentially hide the incorrectness in some cases (e.g. making it behave correctly when the actual inputs / code flows are not normal, such as requiring double-sizing of text).

The alternative might be to rely on -invalidateLayout or some other call, and ensure that if the display pass detects there is a mismatch, it triggers as complete of a layout pass is necessary to guarantee that any components that are affected by the newly calculated size of the text have a chance to be adjusted.  This could even mean abandoning the current display pass with an early return and calling -setNeedsDisplay, awaiting a new display call after the relayout is complete?
",appleguy,ocrickard
875,2015-11-21 02:16:31,"@yilei wow, great find - this is certainly esoteric!  :)  Thank you for filing the task.

If I'm honest, I'm not familiar with the finer points of the differences between the standards.  @chpwn @toulouse I know you are more expert in language / compiler details than me; do you have a suggestion for which ASDK should be referencing?  I'd certainly assume c++11...
",appleguy,toulouse
874,2015-11-21 02:27:42,"@smyrgl Thanks for the report.  This is a known issue, I believe you simply need to set .flexShrink = YES on the Inset spec.  I agree this is NOT intuitive, although note that it is the same behavior as ComponentKit.

@rcancro and @nguyenhuy have discussed this with me and we are trying to figure out the right behavior.  Because the layout system is so configurable, there are pitfalls to most changes; for example I have a PR up to set flexShrink on by default for ASTextNode, because it seems more intuitive, but I haven't landed it yet as it does have a couple tradeoffs.

This isolated case may be easier to fix if we decide that the Inset should inherit flexGrow or flexShrink from its child.  However, another case we've considered is when you have a vertical stack and every item (say they are ASTextNodes) has flexShrink set.  If we did this for Inset and not for Stack, it could be confusing; but if we did it for both, there are other tradeoffs and it still wouldn't apply to custom specs.

Anyway, we'd be thrilled if you have any thoughts (read: value judgements - what seems like the ""right"" behavior for these subjective decisions?) to share with us.  In fact, this specific issue and a small handful of related ones are the primary reason that we are at 1.9.x and not 2.0 yet.  Let's make this the most intuitive implementation of Box Model around and get it shipped!
",appleguy,nguyenhuy
874,2015-11-21 02:27:42,"@smyrgl Thanks for the report.  This is a known issue, I believe you simply need to set .flexShrink = YES on the Inset spec.  I agree this is NOT intuitive, although note that it is the same behavior as ComponentKit.

@rcancro and @nguyenhuy have discussed this with me and we are trying to figure out the right behavior.  Because the layout system is so configurable, there are pitfalls to most changes; for example I have a PR up to set flexShrink on by default for ASTextNode, because it seems more intuitive, but I haven't landed it yet as it does have a couple tradeoffs.

This isolated case may be easier to fix if we decide that the Inset should inherit flexGrow or flexShrink from its child.  However, another case we've considered is when you have a vertical stack and every item (say they are ASTextNodes) has flexShrink set.  If we did this for Inset and not for Stack, it could be confusing; but if we did it for both, there are other tradeoffs and it still wouldn't apply to custom specs.

Anyway, we'd be thrilled if you have any thoughts (read: value judgements - what seems like the ""right"" behavior for these subjective decisions?) to share with us.  In fact, this specific issue and a small handful of related ones are the primary reason that we are at 1.9.x and not 2.0 yet.  Let's make this the most intuitive implementation of Box Model around and get it shipped!
",appleguy,rcancro
867,2015-11-19 21:07:40,"The bug may actually lie in how you set up the stack, or configured its contents.  You may need to use flexGrow or flexShrink on the stack or the stack items.  Could you share the full implementation of at least the layoutSpecThatFits method, and also provide a screenshot of what it is resulting in?  A test project would be the gold standard to help us find a solution quickly, but I think this issue can likely be solved with a bigger snippet that shows at least layout and ideally also node allocation / setup.

cc @nguyenhuy, @levi who know Swift better than I do as well :).
",appleguy,nguyenhuy
867,2015-11-19 21:07:40,"The bug may actually lie in how you set up the stack, or configured its contents.  You may need to use flexGrow or flexShrink on the stack or the stack items.  Could you share the full implementation of at least the layoutSpecThatFits method, and also provide a screenshot of what it is resulting in?  A test project would be the gold standard to help us find a solution quickly, but I think this issue can likely be solved with a bigger snippet that shows at least layout and ideally also node allocation / setup.

cc @nguyenhuy, @levi who know Swift better than I do as well :).
",appleguy,levi
861,2015-11-30 01:11:54,"@Adlai-Holler solid debugging here — a very clear explanation of the problem.  I think this is strong support for the impression that ASRangeController needs its first big refactor, as today its core logic is from the same era as the original ASDataController (!!!).

@1nput0utput could you share any details on the issue you encountered?  Was your case specific to reloadData (and thus fixed by the patch linked above), or is the editing scenario described later the one you are seeing?

As per usual with these issues, not having a test case is one inhibition to fixing with confidence.  I'm actively mucking about in ASRangeController (and @levi too, who did a sweeping cleanup of naming and organization of the file in prep for deeper changes).  But with the weekend dwindling, I may not be able to fix this in time for 1.9.2...

The PR I just landed, with ASInterfaceState, holds the potential to help us fix this.  It makes nodes tolerant to ""sloppy"" behavior of a class like ASRangeController, in that if the class were too chatty and told it to enter or exit a state multiple times, it would short-circuit and not actually cause errant calls to fetchData / clearContents / etc (this was not the case before the patch).  So if we found the right point at which to do a reconciliation (setting the intended state on all the nodes involved), it could actually be pretty efficient.

The ideal refactor for ASRangeController will be to eliminate ASRangeHandler entirely, and call setInterfaceState only once per node on a given pass.  This would particularly optimize the case being described here where new / replacement nodes may need to have multiple elements of the state set (such as visible, display, fetchData).
",appleguy,levi
860,2015-11-29 01:25:19,"@tomizimobile Thank you for the clear description of the issue, especially referencing the version you're using!

I believe this is a real bug, and before noticing this issue had just filed this one: https://github.com/facebook/AsyncDisplayKit/issues/892

@levi, @vitalybaev - your time is very valuable and I have no explicit expectation, so don't worry if you're busy.  If you do have time, this is one of the most valuable areas you could help ASDK!  Next time I'll move a bit more slowly before adding a feature like selection, as it surely has some more details than we first imagined :)
",appleguy,levi
860,2015-11-29 01:25:19,"@tomizimobile Thank you for the clear description of the issue, especially referencing the version you're using!

I believe this is a real bug, and before noticing this issue had just filed this one: https://github.com/facebook/AsyncDisplayKit/issues/892

@levi, @vitalybaev - your time is very valuable and I have no explicit expectation, so don't worry if you're busy.  If you do have time, this is one of the most valuable areas you could help ASDK!  Next time I'll move a bit more slowly before adding a feature like selection, as it surely has some more details than we first imagined :)
",appleguy,vitalybaev
858,2015-11-18 13:45:33,"Correct solution https://github.com/facebook/AsyncDisplayKit/pull/848

Until then you can try to create an ASDisplayNode (spacerNode) with flexGrow = YES and set the children to [likeButtonNode, spacerNode, moreButtonNode]

@nguyenhuy are there any other approaches atm?
",smiLLe,nguyenhuy
857,2015-11-17 16:21:16,"I was looking for a sample code to answer [@bimawa's question in #855](https://github.com/facebook/AsyncDisplayKit/issues/855#issuecomment-157397779) when I found out that, although a reserve-image-ratio logic is available in PostNode of SocialAppLayout example, it isn't used. No use no more :)
",nguyenhuy,bimawa
853,2016-06-18 03:46:05,"@molon @WildDylan: Thanks for reporting this strange behavior! @maicki got to the bottom of this issue today and he has a plan for resolving it. Watch for an update from him. 
",hannahmbanana,maicki
852,2015-11-19 21:16:00,"Yes, presumably ASTableView and ASCollectionView cells can also provide a bridging point - honestly even a node that has a view directly added to the hierarchy should be able to do this, although only after the view is created.

@garrettmoon, @rcancro we should aim to do this if possible / useful.  I know we have an internal copy of trait collection for iOS 7 support, so maybe we could use a protocol or a couple nasty typecasts if the methods we need to call on UITraitCollection are in fact named the same thing on CBLTraitCollection.
",appleguy,garrettmoon
852,2015-11-19 21:16:00,"Yes, presumably ASTableView and ASCollectionView cells can also provide a bridging point - honestly even a node that has a view directly added to the hierarchy should be able to do this, although only after the view is created.

@garrettmoon, @rcancro we should aim to do this if possible / useful.  I know we have an internal copy of trait collection for iOS 7 support, so maybe we could use a protocol or a couple nasty typecasts if the methods we need to call on UITraitCollection are in fact named the same thing on CBLTraitCollection.
",appleguy,rcancro
851,2015-11-16 23:44:15,"It is a hard question, but do you think this is net beneficial?  @rcancro @nguyenhuy @eanagel @levi @vitalybaev - note that I needed to install the flexShrink = NO cases to make the SocialAppLayout example layout correctly.

However, I think the more common case is to have a text node in a vertical stack that needs to wrap, or a text node in a horizontal stack with images and it needs to wrap (with the images staying their preferred size).  The tricky cases come up only when you have multiple text nodes in the same HORIZONTAL stack, and in that case users would have to set flexShrink = YES on some anyway; this changes it so that they would need to set flexShrink = NO.  My hope is that it is net beneficial in that it reduces the total number of flexShrink sets in a given app, and especially for users' first attempt using the tools so they don't feel overwhelmed by all the options + ultimately get stuck without the layout working how they intend.

The line here with the real name, username, and time node is an interesting example:

![pasted_image_at_2015_11_16_03_28_pm](https://cloud.githubusercontent.com/assets/565251/11198313/cb895f50-8c78-11e5-94ed-f7c8ba1a429e.png)
",appleguy,nguyenhuy
851,2015-11-16 23:44:15,"It is a hard question, but do you think this is net beneficial?  @rcancro @nguyenhuy @eanagel @levi @vitalybaev - note that I needed to install the flexShrink = NO cases to make the SocialAppLayout example layout correctly.

However, I think the more common case is to have a text node in a vertical stack that needs to wrap, or a text node in a horizontal stack with images and it needs to wrap (with the images staying their preferred size).  The tricky cases come up only when you have multiple text nodes in the same HORIZONTAL stack, and in that case users would have to set flexShrink = YES on some anyway; this changes it so that they would need to set flexShrink = NO.  My hope is that it is net beneficial in that it reduces the total number of flexShrink sets in a given app, and especially for users' first attempt using the tools so they don't feel overwhelmed by all the options + ultimately get stuck without the layout working how they intend.

The line here with the real name, username, and time node is an interesting example:

![pasted_image_at_2015_11_16_03_28_pm](https://cloud.githubusercontent.com/assets/565251/11198313/cb895f50-8c78-11e5-94ed-f7c8ba1a429e.png)
",appleguy,rcancro
851,2015-11-16 23:44:15,"It is a hard question, but do you think this is net beneficial?  @rcancro @nguyenhuy @eanagel @levi @vitalybaev - note that I needed to install the flexShrink = NO cases to make the SocialAppLayout example layout correctly.

However, I think the more common case is to have a text node in a vertical stack that needs to wrap, or a text node in a horizontal stack with images and it needs to wrap (with the images staying their preferred size).  The tricky cases come up only when you have multiple text nodes in the same HORIZONTAL stack, and in that case users would have to set flexShrink = YES on some anyway; this changes it so that they would need to set flexShrink = NO.  My hope is that it is net beneficial in that it reduces the total number of flexShrink sets in a given app, and especially for users' first attempt using the tools so they don't feel overwhelmed by all the options + ultimately get stuck without the layout working how they intend.

The line here with the real name, username, and time node is an interesting example:

![pasted_image_at_2015_11_16_03_28_pm](https://cloud.githubusercontent.com/assets/565251/11198313/cb895f50-8c78-11e5-94ed-f7c8ba1a429e.png)
",appleguy,levi
851,2015-11-16 23:44:15,"It is a hard question, but do you think this is net beneficial?  @rcancro @nguyenhuy @eanagel @levi @vitalybaev - note that I needed to install the flexShrink = NO cases to make the SocialAppLayout example layout correctly.

However, I think the more common case is to have a text node in a vertical stack that needs to wrap, or a text node in a horizontal stack with images and it needs to wrap (with the images staying their preferred size).  The tricky cases come up only when you have multiple text nodes in the same HORIZONTAL stack, and in that case users would have to set flexShrink = YES on some anyway; this changes it so that they would need to set flexShrink = NO.  My hope is that it is net beneficial in that it reduces the total number of flexShrink sets in a given app, and especially for users' first attempt using the tools so they don't feel overwhelmed by all the options + ultimately get stuck without the layout working how they intend.

The line here with the real name, username, and time node is an interesting example:

![pasted_image_at_2015_11_16_03_28_pm](https://cloud.githubusercontent.com/assets/565251/11198313/cb895f50-8c78-11e5-94ed-f7c8ba1a429e.png)
",appleguy,vitalybaev
851,2015-11-16 23:44:15,"It is a hard question, but do you think this is net beneficial?  @rcancro @nguyenhuy @eanagel @levi @vitalybaev - note that I needed to install the flexShrink = NO cases to make the SocialAppLayout example layout correctly.

However, I think the more common case is to have a text node in a vertical stack that needs to wrap, or a text node in a horizontal stack with images and it needs to wrap (with the images staying their preferred size).  The tricky cases come up only when you have multiple text nodes in the same HORIZONTAL stack, and in that case users would have to set flexShrink = YES on some anyway; this changes it so that they would need to set flexShrink = NO.  My hope is that it is net beneficial in that it reduces the total number of flexShrink sets in a given app, and especially for users' first attempt using the tools so they don't feel overwhelmed by all the options + ultimately get stuck without the layout working how they intend.

The line here with the real name, username, and time node is an interesting example:

![pasted_image_at_2015_11_16_03_28_pm](https://cloud.githubusercontent.com/assets/565251/11198313/cb895f50-8c78-11e5-94ed-f7c8ba1a429e.png)
",appleguy,eanagel
851,2015-11-30 23:33:04,"@nguyenhuy thanks for your comments - they're very valuable to this important decision.

Is the reason the CSS spec says that because it considers flex-shrink a <number> rather than a boolean?  Maybe 1 is essentially the same as NO / no-op?

As far as affecting current users — I think this is a change we'd make in the 2.0 final version, and indeed this is one of the things that I've emphasized with 1.9 (that the ASLayoutSpec APIs may see changes requiring authors to make modifications, although we did promise that the updates wouldn't be technically difficult to make).  I'm comfortable with very highly emphasizing this in release notes so that there is no ambiguity around the cause of any behavior changes for updaters.  We may even roll a 2.0 Beta first to get the first pass of people experiencing this to see how disruptive it is, and try to spread the word.

@levi, @Adlai-Holler, @rcancro, I'd really appreciate your weighing in on this call!
",appleguy,levi
851,2015-11-30 23:33:04,"@nguyenhuy thanks for your comments - they're very valuable to this important decision.

Is the reason the CSS spec says that because it considers flex-shrink a <number> rather than a boolean?  Maybe 1 is essentially the same as NO / no-op?

As far as affecting current users — I think this is a change we'd make in the 2.0 final version, and indeed this is one of the things that I've emphasized with 1.9 (that the ASLayoutSpec APIs may see changes requiring authors to make modifications, although we did promise that the updates wouldn't be technically difficult to make).  I'm comfortable with very highly emphasizing this in release notes so that there is no ambiguity around the cause of any behavior changes for updaters.  We may even roll a 2.0 Beta first to get the first pass of people experiencing this to see how disruptive it is, and try to spread the word.

@levi, @Adlai-Holler, @rcancro, I'd really appreciate your weighing in on this call!
",appleguy,Adlai-Holler
851,2016-04-20 02:55:19,"@aaronschubert0 @rcancro @nguyenhuy @levi @maicki okay, this change is rebased. I suppose we should land it soon, but perhaps after 1.9.8?  Could anyone at Pinterest try it out and see how many layouts need to be revised?
",appleguy,maicki
850,2015-11-30 00:56:58,"@Adlai-Holler - check it out.  Can you try this with a quick modification to ASMultiplexImageNode to see if you can have it kick off the network load if self.interfaceState & ASInterfaceStateFetchData?
",appleguy,Adlai-Holler
848,2015-11-16 00:06:40,"The specs of these options can be found here: http://www.w3.org/TR/css-flexbox-1/#valdef-justify-content-space-between

For both options, I couldn't find a documented way to handle the case when there is a remaining space after spacing division. So I made them up based on what I think are ""sensible"" behaviours.

Once this diff is landed, there will be no need to use a flexible spacer between children to push them away from each other. cc @levi @hashemp206, @lappp9.
",nguyenhuy,levi
848,2015-11-16 00:06:40,"The specs of these options can be found here: http://www.w3.org/TR/css-flexbox-1/#valdef-justify-content-space-between

For both options, I couldn't find a documented way to handle the case when there is a remaining space after spacing division. So I made them up based on what I think are ""sensible"" behaviours.

Once this diff is landed, there will be no need to use a flexible spacer between children to push them away from each other. cc @levi @hashemp206, @lappp9.
",nguyenhuy,lappp9
842,2015-11-12 12:26:37,"I've started implementing an ASMapNode as discussed here #59 this node uses the `MKMapSnapshotter` API to provide a snapshot of a map. It then supports turning that snapshot into a `MKMapView` when the user taps on it which fully supports the `MKMapView` delegate, as well as annotations.

I'm still in two minds whether the snapshot should use an `ASImageNode` or whether it'd be better to just draw the image directly to the node.

The main issue I'm still facing is a stutter on scrolling when objects are being dealloc'ed in `clearFetchedData` I'm certain this can be improved, and would love community help on this.

cc @appleguy 
",aaronschubert0,appleguy
842,2015-11-12 18:30:04,"@aaronschubert0 fantastic, thank you!  @garrettmoon, what is Bin's github handle?
",appleguy,garrettmoon
842,2015-12-03 11:40:32,"Hey @appleguy implemented most of the feedback that you gave. The changes from the previous iteration are:
- ASMapNode now inherits from ASImageNode, rather than ASControlNode. The mapImage property has been removed because of this change. 
- The mapView property is now a MKMapView rather than a ASDisplayNode
- The mapSize property has been removed. If developers wish to set an explicit size for ASMapNode, then they can set the preferredFrameSize property.
- ""automaticallyReloadsMapImageOnOrientationChange"" has been renamed to ""needsMapReloadOnBoundsChange""
- ""-addAnnotations:"" has been renamed ""setAnnotations:""
- All scalar size properties (_maxSize & _nodeSize) have been removed (yay!) in favour of `self.bounds.size` or `self.calculatedSize`
- ""-calculateSizeThatFits:"" has been removed as suggested by @nguyenhuy 
- ASMapNode now automatically fetches a new map snapshot if it's size is changed, as opposed to only on orientation change.
- A new internal ""CLLocationCoordinate2D"" property has been introduced. This is to support an ASMapNode (that has liveMap = YES) to return to the correct liveMap view after the user has scrolled from the node and then returned to it at a later occasion. 
- Syntax cleanup.

P.S. I don't think Travis CI is running against these commits?
",aaronschubert0,nguyenhuy
832,2015-11-09 21:43:19,"This was a bug I introduced when porting @eanagel's diff from being view-based to layer-based.

-subviews returns a copy of the array and is actually safe to mutate directly, so I removed the -copy that Ethan had added.  However once I made it -sublayers instead, this was no longer safe.
",appleguy,eanagel
831,2015-11-09 03:05:56,"@rcancro @nguyenhuy - should we make it so that accessing self.child checks if the self.children array is count == 1, and then actually return the object?  That would seem pretty reasonable to me...
",appleguy,nguyenhuy
831,2015-11-09 03:05:56,"@rcancro @nguyenhuy - should we make it so that accessing self.child checks if the self.children array is count == 1, and then actually return the object?  That would seem pretty reasonable to me...
",appleguy,rcancro
828,2015-11-09 01:44:05,"@eanagel @ERussel I'm happy to report that this does resolve the issue of some nodes being stranded in a deletion / insertion use case, as reproduced by @eanagel's virtualization demo.  Now that I can reproduce it, we'll go ahead and merge something close to #798 as a short-term fix, as this diff is at least a full weekend away from being possible to land (and even then, would be prudent to test for a couple weeks / roll into 2.0 rather than something like 1.9.1).
",appleguy,eanagel
825,2015-11-07 15:10:17,"I had some free time on a plane yesterday and saw this piece of low hanging fruit that didn't require much focus. I would like to contribute an ASLabelNode in the next couple of weeks and updating the backing renderer is a much needed addition before implementing methods like `minimumFontSize` and `adjustsFontSizeToFitWidth`.

Some unit tests are failing right now, as it seems that the floating point math doesn't produce consistent results. @appleguy, you might have deeper insight into why this is. Going to dig a bit deeper into the TextKit sizing behavior to see what changed from the original implementation of ASTextNodeRenderer.

There were some API differences. I ended up adding an exclusionPaths attribute to the CKTextKitRenderer, which probably would make sense to contribute back to ComponentKit. `isTruncated` is reimplemented, as the truncation range is no longer exposed. And I ran into a build error when trying to include `ASTextKitRenderer.h` in the umbrella AsyncDisplayKit.h, as it seems to be trying to build the header as a C header and is confused where to find the `#import <vector>` c++ std lib header. I haven't worked much with Xcode's C++ integration, so help would be appreciated.

I removed the legacy tests that were specific to the original renderer API. Naturally, I would like to bring up the tests to speed and need to decide a good testing strategy for this implementation. CK has a great suite of unit tests and there might be some value in copying them over to increase the coverage stats in the project. On the integration side, a snapshot test or two could be valuable, but need to identify possible areas of regression before spending too much time on creating test cases.

Resolves #804
",levi,appleguy
825,2015-11-07 23:32:01,"Fantastic, thanks @levi!  This is something that @ocrickard and I have talked about doing for basically a year.  Oliver, if you have a few minutes to skim this or have any notable comments (e.g., known issues or planned work in the CK version) — please do :)
",appleguy,ocrickard
825,2015-11-09 15:21:16,"cc @mboyd1017 can you help review?

Ahh, yeah now I remember. There's a hack in ASTextNode that allows that test to work. It was added by @mboyd1017. Not sure exactly how to fix that in the cached renderer world... perhaps store a value with the calculated size as its key in the renderer cache?

Both CoreText and TextKit will return different values when laid out with one constraint, then recompute the layout with the calculated bounds. Due to a combination of float math, complex line breaking algorithms, and magic... it's inconsistent. The best we can do is workaround it.

BTW, I didn't notice before, but this doesn't pull in the renderer cache. You're gonna miss out on some of the perf and memory benefits without that... but this should be a cleaner implementation to support in the future.
",ocrickard,mboyd1017
823,2015-11-09 02:52:45,"This is beautiful!  Super funny choice of filler content — but I definitely approve (@nguyenhuy, check it out).

I have some style nits, but let's address those in followups.  Probably the biggest one is that the indent width should be 2 spaces.  @vitalybaev if you want to do that change (with Xcode's re-indent feature, it should be fast), then the code will correctly ""blame"" to you after the change.  Otherwise I'm completely happy to do it, just don't want to take credit for all your code!

@rcancro @garrettmoon this should probably be the new go-to app for teaching people about ASDK, and we should probably look at it in more depth to see if we can clean it up for further enhanced readability (more comments, style consistency, etc).  We could expand it with different cell types that implement various common things with ASLayoutSpec so that folks who take a look and say ""I want something like that!"" can see the implementation.
",appleguy,nguyenhuy
823,2015-11-09 02:52:45,"This is beautiful!  Super funny choice of filler content — but I definitely approve (@nguyenhuy, check it out).

I have some style nits, but let's address those in followups.  Probably the biggest one is that the indent width should be 2 spaces.  @vitalybaev if you want to do that change (with Xcode's re-indent feature, it should be fast), then the code will correctly ""blame"" to you after the change.  Otherwise I'm completely happy to do it, just don't want to take credit for all your code!

@rcancro @garrettmoon this should probably be the new go-to app for teaching people about ASDK, and we should probably look at it in more depth to see if we can clean it up for further enhanced readability (more comments, style consistency, etc).  We could expand it with different cell types that implement various common things with ASLayoutSpec so that folks who take a look and say ""I want something like that!"" can see the implementation.
",appleguy,garrettmoon
823,2015-11-09 02:52:45,"This is beautiful!  Super funny choice of filler content — but I definitely approve (@nguyenhuy, check it out).

I have some style nits, but let's address those in followups.  Probably the biggest one is that the indent width should be 2 spaces.  @vitalybaev if you want to do that change (with Xcode's re-indent feature, it should be fast), then the code will correctly ""blame"" to you after the change.  Otherwise I'm completely happy to do it, just don't want to take credit for all your code!

@rcancro @garrettmoon this should probably be the new go-to app for teaching people about ASDK, and we should probably look at it in more depth to see if we can clean it up for further enhanced readability (more comments, style consistency, etc).  We could expand it with different cell types that implement various common things with ASLayoutSpec so that folks who take a look and say ""I want something like that!"" can see the implementation.
",appleguy,rcancro
822,2015-11-08 04:31:12,"@levi, could you check this out since you've been in ASTextNode recently?  Make sure we don't break ASDK link handling with the CK renderer...
",appleguy,levi
819,2015-11-06 01:57:49,"@rcancro It looks like the string method does `@[ self.child ]` and the static layout spec returns nil for its child, so we get an exception in `NSArray`. Here's my code that breaks it:


",Adlai-Holler,rcancro
819,2015-11-08 04:25:27,"Haha, good find — thanks!  @samhsiung @rcancro @garrettmoon let me know if you can fix soon and I'll roll into the 1.9.1 release (hope to release one tomorrow, but we'll see if I make it).
",appleguy,garrettmoon
819,2015-11-08 04:25:27,"Haha, good find — thanks!  @samhsiung @rcancro @garrettmoon let me know if you can fix soon and I'll roll into the 1.9.1 release (hope to release one tomorrow, but we'll see if I make it).
",appleguy,rcancro
819,2015-11-08 04:25:27,"Haha, good find — thanks!  @samhsiung @rcancro @garrettmoon let me know if you can fix soon and I'll roll into the 1.9.1 release (hope to release one tomorrow, but we'll see if I make it).
",appleguy,samhsiung
817,2015-11-08 04:36:17,"Thanks so much for helping here, @vitalybaev!  It's really wonderful to have you in the community.

@KieranLafferty likewise, thanks for bringing us this question.  It's a good use case for us to better document and use in examples, as the solution is not immediately clear.  @rcancro & @garrettmoon, could you include this or something conceptually similar in our documentation effort?  Setting the fixed 1px/1pt height along with the width flexibility consideration is a useful building block for layout specs.
",appleguy,garrettmoon
817,2015-11-08 04:36:17,"Thanks so much for helping here, @vitalybaev!  It's really wonderful to have you in the community.

@KieranLafferty likewise, thanks for bringing us this question.  It's a good use case for us to better document and use in examples, as the solution is not immediately clear.  @rcancro & @garrettmoon, could you include this or something conceptually similar in our documentation effort?  Setting the fixed 1px/1pt height along with the width flexibility consideration is a useful building block for layout specs.
",appleguy,rcancro
817,2016-06-06 06:17:35,"@hannahmbanana: could you add this to our 2.0 documentation to-do list? Thanks!
",appleguy,hannahmbanana
815,2015-11-04 14:28:51,"Thanks for reporting this, @yxztj and @vitalybaev.

I believe this issue is caused by #642. Reverting the commit in that PR fixes the problem. cc @appleguy 

@vitalybaev Sorry for not answering your earlier issue. Could you please try to check with your project and confirm whether #642 is to be blamed?
",nguyenhuy,appleguy
815,2015-11-04 15:08:22,"@vitalybaev Thanks for the heads up. #642 was merged 2 weeks before your issue reported. I tested @yxztj's project with and without #642. Waiting for @appleguy since I'm not really familiar with the render  range handler and its working window.
",nguyenhuy,appleguy
814,2016-12-11 09:09:18,"@garrettmoon No, unfortunately this is still an issue.  In fact, I'd say it is easily within the top 3 most frequently requested features.  We should open one of those feedback boards where we can have people rank them :).

The use case is as ""simple"" as having a horizontal collection that goes into a vertical scroll view, and wanting to know the height of the overall collection in consideration of its items.  Another is when showing a modal sheet, if it is wrapping a small ASTableNode that may only have 3 or 4 items, calculating the necessary height of the modal can be tough.

@Adlai-Holler had looked into this a bit to see if we could at least provide a well-defined hook that, by its call time, contentSize is set.  It seems like even this is difficult, even after controlling for the async measurement operations, but I'm not exactly sure why.  I'd suggest we consider this for 2.1 as it is a capability that would come from the data controller & layout work that Adlai is hoping to take on.",appleguy,Adlai-Holler
809,2015-11-08 04:47:03,"Thanks a lot @clooth & @zdenektopic :).  I just created my first tvOS app today and am very very excited to get ASDK working on it.  Unfortunately I'm bogged down with a bunch of other stuff that I absolutely have to prioritize (even though it would be so much more satisfying to hack on this for the weekend, seriously hard to resist lol!!)

Please do let me know if you end up creating a sample app with it.  I definitely anticipated the Photos and AssetLibrary issues (@Adlai-Holler knows that code well and may be able to help us gate the frameworks).  exclusiveTouch is a funny thing to specifically remove...I could imagine a future TV having a bigger trackpad with multitouch...but fair enough, should also be easy to work around.
",appleguy,Adlai-Holler
808,2015-11-03 01:43:53,"@Adlai-Holler great question.  This is absolutely a valid use case and we need a way to support it...ideally automatically as it should always be the case that relayouts triggered by ASEditableTextNode have this concern.

@nguyenhuy what do you think?  It seems important to me that we not have the delegate method called (e.g. nodeForRowAtIndexPath: should definitely not be called due to a -setNeedsLayout on the cell)...and likewise, because removing a node from the hierarchy may cause its contents to be purged, we should also not move the node from one UITableViewCell to another one (if UITableView asks ASTableView for a new cell upon ""reload"")
",appleguy,nguyenhuy
807,2015-11-09 03:10:07,"@vitalybaev - any input here?  This issue is pretty bad.  I am tempted to disable the feature until we can fix...
",appleguy,vitalybaev
803,2015-11-01 03:16:09,"Animating between ASLayoutSpecs should not be hard to implement.  What would be more difficult, and far more powerful to become a core mechanic used by most ASDK clients, would be supporting the ability for an ASLayoutSpec transition to add and remove nodes as well.

All of the necessary information is in the ASLayoutSpec.  If a node is present in the spec hierarchy that wasn't previously, it needs to be added (and by default, fade in).  If one was present in the old spec but no longer, it needs to be removed (and fade out).  Because ASLayoutSpecs are only designed to handle immediate children of the current node, this makes it clear where in the hierarchy the subnodes should be added.

Naturally an important consideration is to figure out how to execute the transition recursively, but without undue performance overhead.

Community thought leaders who might want to think about this and weigh in on API naming details or implementation approaches: @nguyenhuy, @rcancro, @garrettmoon, @eanagel, @levi 
",appleguy,nguyenhuy
803,2015-11-01 03:16:09,"Animating between ASLayoutSpecs should not be hard to implement.  What would be more difficult, and far more powerful to become a core mechanic used by most ASDK clients, would be supporting the ability for an ASLayoutSpec transition to add and remove nodes as well.

All of the necessary information is in the ASLayoutSpec.  If a node is present in the spec hierarchy that wasn't previously, it needs to be added (and by default, fade in).  If one was present in the old spec but no longer, it needs to be removed (and fade out).  Because ASLayoutSpecs are only designed to handle immediate children of the current node, this makes it clear where in the hierarchy the subnodes should be added.

Naturally an important consideration is to figure out how to execute the transition recursively, but without undue performance overhead.

Community thought leaders who might want to think about this and weigh in on API naming details or implementation approaches: @nguyenhuy, @rcancro, @garrettmoon, @eanagel, @levi 
",appleguy,garrettmoon
803,2015-11-01 03:16:09,"Animating between ASLayoutSpecs should not be hard to implement.  What would be more difficult, and far more powerful to become a core mechanic used by most ASDK clients, would be supporting the ability for an ASLayoutSpec transition to add and remove nodes as well.

All of the necessary information is in the ASLayoutSpec.  If a node is present in the spec hierarchy that wasn't previously, it needs to be added (and by default, fade in).  If one was present in the old spec but no longer, it needs to be removed (and fade out).  Because ASLayoutSpecs are only designed to handle immediate children of the current node, this makes it clear where in the hierarchy the subnodes should be added.

Naturally an important consideration is to figure out how to execute the transition recursively, but without undue performance overhead.

Community thought leaders who might want to think about this and weigh in on API naming details or implementation approaches: @nguyenhuy, @rcancro, @garrettmoon, @eanagel, @levi 
",appleguy,rcancro
803,2015-11-01 03:16:09,"Animating between ASLayoutSpecs should not be hard to implement.  What would be more difficult, and far more powerful to become a core mechanic used by most ASDK clients, would be supporting the ability for an ASLayoutSpec transition to add and remove nodes as well.

All of the necessary information is in the ASLayoutSpec.  If a node is present in the spec hierarchy that wasn't previously, it needs to be added (and by default, fade in).  If one was present in the old spec but no longer, it needs to be removed (and fade out).  Because ASLayoutSpecs are only designed to handle immediate children of the current node, this makes it clear where in the hierarchy the subnodes should be added.

Naturally an important consideration is to figure out how to execute the transition recursively, but without undue performance overhead.

Community thought leaders who might want to think about this and weigh in on API naming details or implementation approaches: @nguyenhuy, @rcancro, @garrettmoon, @eanagel, @levi 
",appleguy,levi
803,2015-11-01 03:16:09,"Animating between ASLayoutSpecs should not be hard to implement.  What would be more difficult, and far more powerful to become a core mechanic used by most ASDK clients, would be supporting the ability for an ASLayoutSpec transition to add and remove nodes as well.

All of the necessary information is in the ASLayoutSpec.  If a node is present in the spec hierarchy that wasn't previously, it needs to be added (and by default, fade in).  If one was present in the old spec but no longer, it needs to be removed (and fade out).  Because ASLayoutSpecs are only designed to handle immediate children of the current node, this makes it clear where in the hierarchy the subnodes should be added.

Naturally an important consideration is to figure out how to execute the transition recursively, but without undue performance overhead.

Community thought leaders who might want to think about this and weigh in on API naming details or implementation approaches: @nguyenhuy, @rcancro, @garrettmoon, @eanagel, @levi 
",appleguy,eanagel
803,2016-02-11 05:05:02,"@levi This is some great stuff! Super excited to use it!
",eanagel,levi
801,2015-10-31 23:45:16,"So far unable to reproduce the reports of rows or items not being released.

@eanagel, @levi, @nguyenhuy, @ERussel — anyone plz help!  I'm more than happy to finish testing & refining the fix that @eanagel has put up, but multiple attempts have never reproduced the issue.  I've tried more with ASTableView than ASCollectionView, but in this example with ASCollectionView I still haven't seen the behavior.  Here's a memory trace showing about 5 copies of the controller being pushed, scrolled, and popped with no leaks or obvious latent memory shown.

<img width=""1273"" alt=""screen shot 2015-10-31 at 4 44 49 pm"" src=""https://cloud.githubusercontent.com/assets/565251/10866520/c133290a-7fee-11e5-9910-60fe0cd84771.png"">
",appleguy,levi
801,2015-10-31 23:45:16,"So far unable to reproduce the reports of rows or items not being released.

@eanagel, @levi, @nguyenhuy, @ERussel — anyone plz help!  I'm more than happy to finish testing & refining the fix that @eanagel has put up, but multiple attempts have never reproduced the issue.  I've tried more with ASTableView than ASCollectionView, but in this example with ASCollectionView I still haven't seen the behavior.  Here's a memory trace showing about 5 copies of the controller being pushed, scrolled, and popped with no leaks or obvious latent memory shown.

<img width=""1273"" alt=""screen shot 2015-10-31 at 4 44 49 pm"" src=""https://cloud.githubusercontent.com/assets/565251/10866520/c133290a-7fee-11e5-9910-60fe0cd84771.png"">
",appleguy,nguyenhuy
801,2015-10-31 23:45:16,"So far unable to reproduce the reports of rows or items not being released.

@eanagel, @levi, @nguyenhuy, @ERussel — anyone plz help!  I'm more than happy to finish testing & refining the fix that @eanagel has put up, but multiple attempts have never reproduced the issue.  I've tried more with ASTableView than ASCollectionView, but in this example with ASCollectionView I still haven't seen the behavior.  Here's a memory trace showing about 5 copies of the controller being pushed, scrolled, and popped with no leaks or obvious latent memory shown.

<img width=""1273"" alt=""screen shot 2015-10-31 at 4 44 49 pm"" src=""https://cloud.githubusercontent.com/assets/565251/10866520/c133290a-7fee-11e5-9910-60fe0cd84771.png"">
",appleguy,eanagel
801,2015-11-02 18:48:02,"I basically tried similar things to reproduce the leaks. But after reading @eanagel comment in #797, I think it could be possible that the number of leaked nodes after _each_ reload/delete is small, but after a while the total number is material. I'm thinking about writing some test cases to _assert_ whether backing stores are correctly removed from the working window.
",nguyenhuy,eanagel
800,2015-10-31 22:14:56,"Thanks to @garrettmoon at Pinterest for writing this.  It's been a long time coming — originally planned for development in the 1.1 era, we finally have a simple default button built on top of the widely used ASControlNode.  The main reason we've made it so far without it is that both ASImageNode and ASTextNode can addTarget/action pairs and respond to control events, but it has remained inconvenient to pair a simple image / icon with text in a button.
",appleguy,garrettmoon
798,2015-10-31 00:58:16,"This is a short-term fix for #797 and #791 suggested by @appleguy. I'm using a tweaked build of 1.2.3 and this seems to be working well for me. It clears any ASCellNodes that were in the Render state when the ASRangeController is dealloced (ultimately.) It is still possible for ASCellNodes to ""leak"" temporarily while the ASRangeController is alive. The good news is that this code will make sure it is cleaned up when the parent ASTable/CollectionView is dealloced.

I haven't tested this on master though (I'm not really set up for that at the moment), can someone give it a spin and make sure it plays well with all the amazing code in 1.9+?
",eanagel,appleguy
797,2015-10-30 21:08:30,"I've been tracking leaking ASCellNodes in my application and, thanks to reading up on #791, I think I'm on the right track. 

The first issue seems pretty simple to fix - we don't always exit all our ranges in tear down. 

The second issue is deeper and is more of a structural problem. This has to do when we perform updates (inserts/deletes, etc). The ASRangeController is maintaining an array of index paths for each range (Render and Preload) and as the range of visible index paths change we update these arrays and call enter or exit for each underlying node. This all works fins until we insert or delete items. At that point our index paths become invalid. Currently we set a flag (_rangeIsValid = NO) and discard all the old index paths. The problem is that we don't exit these index paths, so it's possible we will either enter them twice or never exit them at all. Failing to exit nodes in the Rendered range will cause the cell nodes to be retained in memory forever (they will accumulate in the ASRangeHandlerRender's workingWindow.)

I could totally be wrong about this (maybe all the issues I'm seeing are entirely from the first issue), I'd love to get some additional eyes on this. I'm looking specifically at  [ASRangeController.mm:117](https://github.com/facebook/AsyncDisplayKit/blob/a1dee22a0959b81835706caef510ae62df26c30e/AsyncDisplayKit/Details/ASRangeController.mm#L117). Funny thing about that part of the code base (_rangeIsValid handling), I think I was the last one to touch it. @appleguy, @levi and @nguyenhuy, what do you think, am I right about this being a problem?

I've been considering a couple fixes for this:
1. exiting all ranges/nodes when we first have changes is probably safest but would likely cause other issues and have a significant performance cost.
2. Somehow tracking the nodes either instead of or in addition to the indexPaths for each range. This could allow us to handle this edge case, but we would have to be careful not to retain the cellNodes too long.
3. A hybrid approach. While everything is valid we work off of index paths the way we do today but we track nodes during changes. So it would look something like the following
   - When we first start making changes (begin updates), capture the nodes associated with all current ranges.
   - When we are done making changes, grab the current visible index paths and get the nodes for each. Compare the previous nodes with the new ones and make sure we exit/enter the deltas. 
",eanagel,levi
797,2015-10-30 21:08:30,"I've been tracking leaking ASCellNodes in my application and, thanks to reading up on #791, I think I'm on the right track. 

The first issue seems pretty simple to fix - we don't always exit all our ranges in tear down. 

The second issue is deeper and is more of a structural problem. This has to do when we perform updates (inserts/deletes, etc). The ASRangeController is maintaining an array of index paths for each range (Render and Preload) and as the range of visible index paths change we update these arrays and call enter or exit for each underlying node. This all works fins until we insert or delete items. At that point our index paths become invalid. Currently we set a flag (_rangeIsValid = NO) and discard all the old index paths. The problem is that we don't exit these index paths, so it's possible we will either enter them twice or never exit them at all. Failing to exit nodes in the Rendered range will cause the cell nodes to be retained in memory forever (they will accumulate in the ASRangeHandlerRender's workingWindow.)

I could totally be wrong about this (maybe all the issues I'm seeing are entirely from the first issue), I'd love to get some additional eyes on this. I'm looking specifically at  [ASRangeController.mm:117](https://github.com/facebook/AsyncDisplayKit/blob/a1dee22a0959b81835706caef510ae62df26c30e/AsyncDisplayKit/Details/ASRangeController.mm#L117). Funny thing about that part of the code base (_rangeIsValid handling), I think I was the last one to touch it. @appleguy, @levi and @nguyenhuy, what do you think, am I right about this being a problem?

I've been considering a couple fixes for this:
1. exiting all ranges/nodes when we first have changes is probably safest but would likely cause other issues and have a significant performance cost.
2. Somehow tracking the nodes either instead of or in addition to the indexPaths for each range. This could allow us to handle this edge case, but we would have to be careful not to retain the cellNodes too long.
3. A hybrid approach. While everything is valid we work off of index paths the way we do today but we track nodes during changes. So it would look something like the following
   - When we first start making changes (begin updates), capture the nodes associated with all current ranges.
   - When we are done making changes, grab the current visible index paths and get the nodes for each. Compare the previous nodes with the new ones and make sure we exit/enter the deltas. 
",eanagel,appleguy
797,2015-10-30 21:08:30,"I've been tracking leaking ASCellNodes in my application and, thanks to reading up on #791, I think I'm on the right track. 

The first issue seems pretty simple to fix - we don't always exit all our ranges in tear down. 

The second issue is deeper and is more of a structural problem. This has to do when we perform updates (inserts/deletes, etc). The ASRangeController is maintaining an array of index paths for each range (Render and Preload) and as the range of visible index paths change we update these arrays and call enter or exit for each underlying node. This all works fins until we insert or delete items. At that point our index paths become invalid. Currently we set a flag (_rangeIsValid = NO) and discard all the old index paths. The problem is that we don't exit these index paths, so it's possible we will either enter them twice or never exit them at all. Failing to exit nodes in the Rendered range will cause the cell nodes to be retained in memory forever (they will accumulate in the ASRangeHandlerRender's workingWindow.)

I could totally be wrong about this (maybe all the issues I'm seeing are entirely from the first issue), I'd love to get some additional eyes on this. I'm looking specifically at  [ASRangeController.mm:117](https://github.com/facebook/AsyncDisplayKit/blob/a1dee22a0959b81835706caef510ae62df26c30e/AsyncDisplayKit/Details/ASRangeController.mm#L117). Funny thing about that part of the code base (_rangeIsValid handling), I think I was the last one to touch it. @appleguy, @levi and @nguyenhuy, what do you think, am I right about this being a problem?

I've been considering a couple fixes for this:
1. exiting all ranges/nodes when we first have changes is probably safest but would likely cause other issues and have a significant performance cost.
2. Somehow tracking the nodes either instead of or in addition to the indexPaths for each range. This could allow us to handle this edge case, but we would have to be careful not to retain the cellNodes too long.
3. A hybrid approach. While everything is valid we work off of index paths the way we do today but we track nodes during changes. So it would look something like the following
   - When we first start making changes (begin updates), capture the nodes associated with all current ranges.
   - When we are done making changes, grab the current visible index paths and get the nodes for each. Compare the previous nodes with the new ones and make sure we exit/enter the deltas. 
",eanagel,nguyenhuy
791,2015-10-29 16:00:11,"@ERussel Thanks for reporting this!  Just to confirm, you're not using ASNetworkImageNode or ASBasicImageDownloader, correct?

This should be an easy fix if the cause you highlighted is correct.  @levi, @nguyenhuy could this have been impacted by recent refactoring?  I would be pretty surprised if no one else had reported this if it is a longstanding issue, but it's certainly possible.
",appleguy,levi
791,2015-10-29 16:00:11,"@ERussel Thanks for reporting this!  Just to confirm, you're not using ASNetworkImageNode or ASBasicImageDownloader, correct?

This should be an easy fix if the cause you highlighted is correct.  @levi, @nguyenhuy could this have been impacted by recent refactoring?  I would be pretty surprised if no one else had reported this if it is a longstanding issue, but it's certainly possible.
",appleguy,nguyenhuy
791,2015-10-29 16:10:37,"@appleguy indeed could be a regression from the recent changes. I don't have much time this week to take a look, Sunday at the earliest. @nguyenhuy if you're able to check this out earlier that would be awesome!
",levi,nguyenhuy
790,2015-10-29 00:42:30,"@appleguy I tested this with a `nil` delegate an a non-nil delegate. The `height` behaves as expected in both cases. The `didSelectRowAtIndexPath` is also being called as expected for a non-nil delegate. 

I need to figure out what's going with the tests yet.

cc @levi 
",RuiAAPeres,levi
790,2015-10-29 00:42:30,"@appleguy I tested this with a `nil` delegate an a non-nil delegate. The `height` behaves as expected in both cases. The `didSelectRowAtIndexPath` is also being called as expected for a non-nil delegate. 

I need to figure out what's going with the tests yet.

cc @levi 
",RuiAAPeres,appleguy
790,2015-10-29 01:18:28,"@appleguy @levi you can find a test project [here](https://dl.dropboxusercontent.com/u/14102938/DelegateNil.zip), which describes the scenario I mentioned above. I am building AsyncDisplayKit with this `075843addc6af1a6020481075ae6a120df93d227` commit.
",RuiAAPeres,appleguy
785,2015-10-28 09:35:36,"Hi @appleguy ,In  useing ASDK, I used automatic Layout,It's very cool. But when I update the layout,I found I must write the logic in the layoutSpecThatFits: method by set a BOOL property, For exzample,When I want to hidden a ImageView,I should write the Logic in setting the layoutSpe's children to make sure the ImageView is in the layoutSpe's childrenarray or not.
It's OK but If can offer a property of node,when I set this property ,It will change it's layout in the layoutSpe?
",wy19901227,appleguy
785,2015-10-29 10:34:11,"@wy19901227 Thanks for reporting the divider problems (here and #775), I will investigate them later this week. 

Regarding the pod version, looks like v1.9 hasn't been pushed to CocoaPods repo (cc @appleguy). For the moment, you can edit your Podfile to use the release tag


",nguyenhuy,appleguy
783,2015-10-28 10:45:47,"Great, thanks a lot. Need to wait for @appleguy to merge though-- I don't (and shouldn't) have the permission to merge PRs :P
",nguyenhuy,appleguy
782,2015-10-28 04:32:21,"If you take a look at _ASPendingState we correctly release/retain CGColors in our setters but we fail to release them on dealloc (in fact there is no dealloc.) The end result is that any CGColor set in an _ASPendingState will live on forever.

@appleguy We should probably hit this before release. I won't have time to actually take this on myself for a couple days yet.
",eanagel,appleguy
780,2015-10-27 17:55:32,"To me this seems like a good idea, although a bit dicy haha :).

This would only work for scrollers where you can position everything they'll contain up-front, and thus size them together too.

Are you able to share any specifics on your use case?  That would help us assess the very best API direction (e.g. @nguyenhuy & @eanagel & @rcancro)
",appleguy,nguyenhuy
780,2015-10-27 17:55:32,"To me this seems like a good idea, although a bit dicy haha :).

This would only work for scrollers where you can position everything they'll contain up-front, and thus size them together too.

Are you able to share any specifics on your use case?  That would help us assess the very best API direction (e.g. @nguyenhuy & @eanagel & @rcancro)
",appleguy,rcancro
780,2015-10-27 17:55:32,"To me this seems like a good idea, although a bit dicy haha :).

This would only work for scrollers where you can position everything they'll contain up-front, and thus size them together too.

Are you able to share any specifics on your use case?  That would help us assess the very best API direction (e.g. @nguyenhuy & @eanagel & @rcancro)
",appleguy,eanagel
780,2015-11-01 22:08:16,"@levi is it fair to say that this issue should be solved independently from ASViewController, just as long as the solution does work elegantly with ASVC?

Any ideas on how we can accomplish this?  @nguyenhuy you may have the best intuition.  Clearly ASLayoutSpec is capable of performing all the calculations needed; we just need to determine what a reasonable specialized behavior is for ASScrollNode and how to integrate it seamlessly in a way that is intuitive.

One way might be: children of ASScrollNodes are given unbounded size in the direction of scrolling, if we can determine the scroll direction at layout time.  Then we need a way to actually set the contentSize, which might be based on using CGRect unions of all of the layout specs / nodes within the scroll node and using the maximum width of that joint rect?
",appleguy,nguyenhuy
775,2015-10-26 21:12:12,"@wy19901227 did you watch the NSSpain tech talk?  It does give an overview of the system.  We're working on additional documentation and sample apps.

You can also look at the KittenNode implementation in examples/Kittens, which defines a -layoutSpecThatFits: method.  There are other projects that have example code too, like if you're using swift, @nguyenhuy's AsyncMessagesViewController project has some pretty sophisticated layout specs.
",appleguy,nguyenhuy
775,2015-10-28 04:35:59,"@wy19901227 I'm sorry I doubted your finding.  You're correct, something weird is going on here.

I'm going to rename your task to track this.  We'll get it fixed soon.  I can probably look at it tomorrow.  @nguyenhuy you may be curious to observe this phenomenon - since you have worked on the Kittens app - very strange!
",appleguy,nguyenhuy
774,2015-10-26 05:49:30,"Since this PR contains a revert commit. I think it's easier to review commits individually.

cc @Adlai-Holler
",nguyenhuy,Adlai-Holler
773,2015-10-26 02:43:04,"@Adlai-Holler could you look at the test failure in your original PR and make any changes necessary to ensure tests pass?  @nguyenhuy already fixed the flaky table view test so we should be in a reliable test state now...with the exception that tests can only be run under Xcode 6.4, due to a tooling bug that Apple has acknowledged.
",appleguy,nguyenhuy
773,2015-10-26 02:43:04,"@Adlai-Holler could you look at the test failure in your original PR and make any changes necessary to ensure tests pass?  @nguyenhuy already fixed the flaky table view test so we should be in a reliable test state now...with the exception that tests can only be run under Xcode 6.4, due to a tooling bug that Apple has acknowledged.
",appleguy,Adlai-Holler
772,2015-10-27 05:09:56,"@levi, @nguyenhuy, @eanagel - hate to bug you guys, but this looks like code that may have changed recently in ASDataController; can you take a quick look and comment if you recognize a possible fault here?

I vaguely recall seeing some code that did call lock on the datasource added recently.  I let it go through review because it would be nice to continue supporting asyncDataFetching even though it's currently disabled, because I plan to re-enable it soon after a round of refactoring.  However, I may not get to this right away, so I would be supportive if anyone wants to entirely remove data source locking.

Indeed, the time to remove it would be before 2.0, as we can make breaking API changes.  We can always re-add it later.
",appleguy,levi
772,2015-10-27 05:09:56,"@levi, @nguyenhuy, @eanagel - hate to bug you guys, but this looks like code that may have changed recently in ASDataController; can you take a quick look and comment if you recognize a possible fault here?

I vaguely recall seeing some code that did call lock on the datasource added recently.  I let it go through review because it would be nice to continue supporting asyncDataFetching even though it's currently disabled, because I plan to re-enable it soon after a round of refactoring.  However, I may not get to this right away, so I would be supportive if anyone wants to entirely remove data source locking.

Indeed, the time to remove it would be before 2.0, as we can make breaking API changes.  We can always re-add it later.
",appleguy,nguyenhuy
772,2015-10-27 05:09:56,"@levi, @nguyenhuy, @eanagel - hate to bug you guys, but this looks like code that may have changed recently in ASDataController; can you take a quick look and comment if you recognize a possible fault here?

I vaguely recall seeing some code that did call lock on the datasource added recently.  I let it go through review because it would be nice to continue supporting asyncDataFetching even though it's currently disabled, because I plan to re-enable it soon after a round of refactoring.  However, I may not get to this right away, so I would be supportive if anyone wants to entirely remove data source locking.

Indeed, the time to remove it would be before 2.0, as we can make breaking API changes.  We can always re-add it later.
",appleguy,eanagel
772,2015-10-27 15:50:54,"I'll check this out today, Scott. Moreover, what are the current issues with asyncDataFetching that prevent it from being enabled within the framework?

> On Oct 26, 2015, at 22:09, appleguy notifications@github.com wrote:
> 
> @levi, @nguyenhuy, @eanagel - hate to bug you guys, but this looks like code that may have changed recently in ASDataController; can you take a quick look and comment if you recognize a possible fault here?
> 
> I vaguely recall seeing some code that did call lock on the datasource added recently. I let it go through review because it would be nice to continue supporting asyncDataFetching even though it's currently disabled, because I plan to re-enable it soon after a round of refactoring. However, I may not get to this right away, so I would be supportive if anyone wants to entirely remove data source locking.
> 
> Indeed, the time to remove it would be before 2.0, as we can make breaking API changes. We can always re-add it later.
> 
> —
> Reply to this email directly or view it on GitHub.
",levi,levi
772,2015-10-27 15:50:54,"I'll check this out today, Scott. Moreover, what are the current issues with asyncDataFetching that prevent it from being enabled within the framework?

> On Oct 26, 2015, at 22:09, appleguy notifications@github.com wrote:
> 
> @levi, @nguyenhuy, @eanagel - hate to bug you guys, but this looks like code that may have changed recently in ASDataController; can you take a quick look and comment if you recognize a possible fault here?
> 
> I vaguely recall seeing some code that did call lock on the datasource added recently. I let it go through review because it would be nice to continue supporting asyncDataFetching even though it's currently disabled, because I plan to re-enable it soon after a round of refactoring. However, I may not get to this right away, so I would be supportive if anyone wants to entirely remove data source locking.
> 
> Indeed, the time to remove it would be before 2.0, as we can make breaking API changes. We can always re-add it later.
> 
> —
> Reply to this email directly or view it on GitHub.
",levi,nguyenhuy
772,2015-10-27 15:50:54,"I'll check this out today, Scott. Moreover, what are the current issues with asyncDataFetching that prevent it from being enabled within the framework?

> On Oct 26, 2015, at 22:09, appleguy notifications@github.com wrote:
> 
> @levi, @nguyenhuy, @eanagel - hate to bug you guys, but this looks like code that may have changed recently in ASDataController; can you take a quick look and comment if you recognize a possible fault here?
> 
> I vaguely recall seeing some code that did call lock on the datasource added recently. I let it go through review because it would be nice to continue supporting asyncDataFetching even though it's currently disabled, because I plan to re-enable it soon after a round of refactoring. However, I may not get to this right away, so I would be supportive if anyone wants to entirely remove data source locking.
> 
> Indeed, the time to remove it would be before 2.0, as we can make breaking API changes. We can always re-add it later.
> 
> —
> Reply to this email directly or view it on GitHub.
",levi,eanagel
769,2015-10-25 05:09:57,"@hashemp206 Thanks, this is a very creative use of ASCollectionView — I may want to use a similar technique to implement ASPagerNode.  It should definitely work given that it does with UICollectionView, but no one had encountered this yet.

I may be able to look at this tomorrow, but realistically I will probably not get too deep.  @levi & @nguyenhuy, you have both already donated a lot of time to the community in these components, so I don't want you to feel like you need to do everything in these classes — but if you have any immediate thoughts on what about ASRangeController is incompatible with this, we should be able to fix it at Pinterest.
",appleguy,nguyenhuy
769,2015-10-25 05:09:57,"@hashemp206 Thanks, this is a very creative use of ASCollectionView — I may want to use a similar technique to implement ASPagerNode.  It should definitely work given that it does with UICollectionView, but no one had encountered this yet.

I may be able to look at this tomorrow, but realistically I will probably not get too deep.  @levi & @nguyenhuy, you have both already donated a lot of time to the community in these components, so I don't want you to feel like you need to do everything in these classes — but if you have any immediate thoughts on what about ASRangeController is incompatible with this, we should be able to fix it at Pinterest.
",appleguy,levi
768,2015-10-24 18:08:11,"OK now it's that dang `Test did not run: The simulator failed to start, or the TEST_HOST application failed to run. Simulator error: Exception encountered connecting to CoreSimulatorBridge: Unable to connect to CoreSimulatorBridge`

@appleguy @nguyenhuy This one's ready for final review!
",Adlai-Holler,nguyenhuy
768,2015-10-24 18:08:11,"OK now it's that dang `Test did not run: The simulator failed to start, or the TEST_HOST application failed to run. Simulator error: Exception encountered connecting to CoreSimulatorBridge: Unable to connect to CoreSimulatorBridge`

@appleguy @nguyenhuy This one's ready for final review!
",Adlai-Holler,appleguy
768,2015-10-25 19:47:45,"I'm hoping this passes tests once landed, as the tests continue to fail even after re-running with @nguyenhuy's fix merged.  However the failure does not seem related to this diff and is occurring on at least one other PR.
",appleguy,nguyenhuy
763,2015-10-24 03:57:50,"@victormayorov I'm looking at this code and realized there are a few decisions in its architecture that I'm not fully familiar with and wondering if you can weigh in.

We create our own NSURLSession, instead of using +sharedSession.  Is this necessary?  It would seem to be more efficient to use the same object, especially because the session probably does some degree of concurrency limiting to more efficiently manage the network bandwidth.

More importantly, it would then also make sense to avoid using the delegate property entirely, and have a completion block.  The block would of course retain self during the task pending, but if it gets cancelled (which occurs when the ASNetworkImageNode is deallocating) or finishes naturally, then the block would run and be destroyed — freeing the ASBasicImageDownloader and breaking the cycle.

If you have any time to look at the code and consider making those changes, I'd be greatly appreciative.  It would allow me to focus on a few other changes I'd like to do.  Just let me know if you're not available though, and I will start reading more deeply about NSURLSession (since it came out with iOS 7 & I used custom networkers in most of my projects, it's quite new to me).
",appleguy,victormayorov
763,2015-10-26 02:54:02,"@garrettmoon and I are going to investigate integrating PINRemoteImage with ASDK as a solution for this.  If we do so, ASBasicImageDownloader would be powered by PINRemoteImage (or perhaps replaced / removed entirely).

If anyone else has time to investigate a more targeted fix here, which requires some refactoring of ASBasicImageDownloader, it would be appreciated.  @TernTuring I'm pretty confident you could figure out a solution, too; basically we need to use something like a completionBlock instead of a persistent delegate so that the retain cycle is only temporary, and does end when the request finishes or is cancelled.
",appleguy,garrettmoon
762,2015-10-22 06:20:00,"Went through @appleguy's post-merge review on #694 and cleaned up various aspects of the supplementary node implementation.
",levi,appleguy
761,2015-10-21 22:58:45,"@zintus funny that you bring this up, because @garrettmoon just encountered a use case for this earlier today :).  This does make it a priority for the project overall.

The most important thing is to come up with the right API for doing this.  I think in many use cases, what is desired is a single method call that can do a one-shot synchronous load (akin to a -reloadDataImmediately), although a persistent mode that enables always-synchronous behavior is something to think about (I think there are more risks / considerations with this...we'd probably want to force on neverShowPlaceholders for all cell nodes in such a case).
",appleguy,garrettmoon
759,2015-10-21 00:13:01,"@nguyenhuy based on the screenshot image link (https://dl.dropboxusercontent.com/u/47066165/ASDK-screenshot.png) can you see what's going wrong?  @robmontesinos thanks for including the screenshot, as it is very helpful to understand the use case (BTW, I approve of the app content ;) )

I'm thinking that you may need to set a property like flexBasis or flexGrow in order to have the horizontal stack increase its height to the full height the vertical stack would use.  However this doesn't seem like it should be absolutely necessary to me in this scenario so I'm looking forward to figuring out the right answer.
",appleguy,nguyenhuy
759,2015-10-21 01:03:04,"@robmontesinos silly me, I forgot that the Kittens app has a /very/ similar layout.  Sure enough, the key property is .flexShrink.  Let me know when you can confirm that fixes your issue.

This clearly needs to be covered well in documentation / guides.  It may even be reasonable to set it as default-on for textNode.  @rcancro, @nguyenhuy what do you think about that as a default?

Here's the KittenNode implementation:


",appleguy,nguyenhuy
759,2015-10-21 01:03:04,"@robmontesinos silly me, I forgot that the Kittens app has a /very/ similar layout.  Sure enough, the key property is .flexShrink.  Let me know when you can confirm that fixes your issue.

This clearly needs to be covered well in documentation / guides.  It may even be reasonable to set it as default-on for textNode.  @rcancro, @nguyenhuy what do you think about that as a default?

Here's the KittenNode implementation:


",appleguy,rcancro
759,2015-10-21 17:31:51,"@robmontesinos Do you somehow provide a fixed constrained height for each cell node? I asked this question because currently ASTableViewDataSource can't provide different constrained heights for each cells. And without a fixed constrained height (63, right?), the text nodes can grow vertically to wrap their texts. I think it makes sense to have -constrainedHeightForNodeAtIndexPath: in ASTableViewDataSource (note: not constrained size but constrained height, because we want table view cells to always fill the table view width). @appleguy, @rcancro: What do you think?

In case you are curious about why setting ""all three"" works, here is my explanation:
- Since the vertical stack is a child of a horizontal stack, enabling flexShrink on the vertical stack means it can shrink horizontally (flexShrink is effective on the stack direction). So the vertical stack fills the available width.
- The 2 text nodes are children of a vertical stack, so flexShrink means they can shrink vertically and thus fill the available height, which is 63 in this case.

Also, can the caption text (and title text) be really long? If so then it is possible that one of the 2 text nodes (likely titleTextNode because caption text is usually much longer) will be asked to shrink to a very small size that it cannot render even 1 line of text (or even asked to shrink to 0). This is because stack layout spec distributes stack-dimension violations evenly to all of its flexible children. Fortunately, you can easily handle this case. 
- Instead of enabling flexShrink on titleTextNode, you can set its maximumLineCount to 1 (or maybe 2). This change causes titleTextNode to always have enough space to render at most 1 line, and captionTextNode can fill the remaining height.
- Or if the caption is optional, you can just disable flexShrink on titleTextNode. This way, titleTextNode will take as much (vertical) space as it wants.

And of course, feel free to ask if you have problems with more complex layouts. We are happy to help :)
",nguyenhuy,rcancro
759,2015-10-21 17:41:33,"@appleguy: I think it's a good idea to have flexShrink enabled by default for text nodes. @rcancro: How about you?

> One framework improvement that would be nice — but may not be logically compatible with the overall layout rules of Flexbox... — would be if a stack containing all flexShrink = YES items were automatically flexShrink itself.

Since flexShrink is used against the stack dimension of the parent stack, I think this can confuse other developers. For example, if all children in a vertical stack can shrink (vertically), that doesn't always mean the vertical stack itself should shrink horizontally (if added inside a horizontally stack). It is true in @robmontesinos's layout because he happens to want a fixed height, but not in other (normal) cases.
",nguyenhuy,rcancro
758,2015-10-20 20:15:38,"This is a better problem to have than multiple relayouts...but it's unusual and a bit concerning that the failure seems to happen only on some runs.

@nguyenhuy here is one of the most recent failures: https://travis-ci.org/facebook/AsyncDisplayKit/jobs/86258557

Failures:
  0) -[ASTableViewTests testRelayoutAllRowsWithNonZeroSizeInitially](AsyncDisplayKitTests.xctest)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━���━━━
/Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKitTests/ASTableViewTests.m:283: ((node.numberOfLayoutsOnMainThread) equal to (1)) failed: (""0"") is not equal to (""1""):
280       for (int row = 0; row < NumberOfRowsPerSection; row++) {
281         NSIndexPath _indexPath = [NSIndexPath indexPathForRow:row inSection:section];
282         ASTestTextCellNode *node = (ASTestTextCellNode *)[tableView nodeForRowAtIndexPath:indexPath];
283         XCTAssertEqual(node.numberOfLayoutsOnMainThread, 1);
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
284         XCTAssertEqual(node.constrainedSizeForCalculatedLayout.max.width, newSize.width);
285       }
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  1) -[ASTableViewTests testRelayoutAllRowsWithZeroSizeInitially](AsyncDisplayKitTests.xctest)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
/Users/travis/build/facebook/AsyncDisplayKit/AsyncDisplayKitTests/ASTableViewTests.m:283: ((node.numberOfLayoutsOnMainThread) equal to (1)) failed: (""0"") is not equal to (""1""):
280       for (int row = 0; row < NumberOfRowsPerSection; row++) {
281         NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row inSection:section];
282         ASTestTextCellNode *node = (ASTestTextCellNode *)[tableView nodeForRowAtIndexPath:indexPath];
283         XCTAssertEqual(node.numberOfLayoutsOnMainThread, 1);
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
284         XCTAssertEqual(node.constrainedSizeForCalculatedLayout.max.width, newSize.width);
285       }
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
*_ TEST FAILED: 210 passed, 2 failed, 0 errored, 212 total *\* (57595 ms)
",appleguy,nguyenhuy
757,2015-10-20 20:19:45,"@wy19901227 do you mean, why are they not the same width?

The reason is that the text is actually not exactly the same width.  The width of a given character, in this case the digit, does vary a little in most fonts.  Only in true Monospace fonts is that not true.

The right way to solve this depends on how you want the design to look.  For example, if you really did want the grey region to not reach to the left and right sides of the screen, you would need to have a mechanism to determine the text that is maximum width and then make sure that all the other ones also adopt that width.

@rcancro I bet there is a way to do this with layout specs, automatically, but I'm not totally sure what it would be...if you imagined that the 0-9 cells were actually all subnodes of a single ASCellNode, and the ASCellNode returned an ASStackLayoutSpec from -layoutSpecThatFits, would it work to set the .flexBasis = ASRelativeDimensionMakeWithPercent(1.0) on each of the text nodes contained by the stack?
",appleguy,rcancro
755,2015-10-20 20:30:05,"@nguyenhuy since you just significantly revised how batch processing works, take a look at this stack and let us know if you think it would be addressed by your diff.

@nvh, please look at the active PR that is up for that.  If you were already running against master, if you could do a quick test for us against @nguyenhuy's patch it would be really awesome.

Batch updates in particular have been a weak spot for a long time; my ASDataController refactor from a couple months ago stabilized the basic editing flows, but it's taken until now to get the critical investment needed to finally eliminate all remaining issues with slightly more complex editing flows.  This is arguably the #1 priority of the project right now, so being able to confirm whether Huy's patch is sufficient or incomplete will be excellent input.
",appleguy,nguyenhuy
755,2015-10-27 05:54:55,"@nguyenhuy thanks a bunch for digging into this.  We absolutely have to fix this.  @nvh we appreciate you trying yet another patch and apologize for the fact that this has not worked in your app.

@levi, was it your app that had an NSFetchedResultsController?  We really need to make a checked-in examples/ test case that uses an FRC and can reproduce a case as stressful as @nvh's app causes, as I think we have at least 5 different apps with pretty serious edit behavior that haven't yet broken master.
",appleguy,levi
753,2015-10-19 19:54:32,"#684, #693.

@levi, @Adlai-Holler: Please also let me know your thoughts on this PR. Thanks.
- [x] Implement ASChangetSetDataController 
- [x] Failing ASTableViewTests (#758)
- [x] Write documentation for ASChangetSetDataController
- [x] Remove duplicate steps while coalescing changes in _ASHierarchyChangeSet
- [ ] Write tests for ASChangetSetDataController
",nguyenhuy,levi
753,2015-10-19 19:54:32,"#684, #693.

@levi, @Adlai-Holler: Please also let me know your thoughts on this PR. Thanks.
- [x] Implement ASChangetSetDataController 
- [x] Failing ASTableViewTests (#758)
- [x] Write documentation for ASChangetSetDataController
- [x] Remove duplicate steps while coalescing changes in _ASHierarchyChangeSet
- [ ] Write tests for ASChangetSetDataController
",nguyenhuy,Adlai-Holler
753,2015-10-20 05:27:55,"Clean addition on top of data controller. Would love it if the reasoning behind the design was well documented at the `ASChangeSetDataController` level (as described in a massive conversation in #684) and @Adlai-Holler's design of the change set objects at the internal level. Thanks for doing this, @nguyenhuy , I can tell you there will be a few happy people on my team once this lands. :+1: 
",levi,Adlai-Holler
753,2015-10-26 04:32:13,"Oh, weird that it didn't rebase when re-running the build.  I'm pretty sure it normally does that, but maybe some other automatic action usually triggers the rebase builds.  Thanks, I'm excited to have almost all the open PRs merged.

Now we need master to be hit with a day of testing to pave out the recent table changes.  I'd like to reset the 1.9 release tag point to include the recent improvements, if at all possible.

Could folks bump the ASDK version you're testing against and let us know if you hit anything?  @rcancro, @eanagel, @levi, @Adlai-Holler
",appleguy,rcancro
753,2015-10-26 04:32:13,"Oh, weird that it didn't rebase when re-running the build.  I'm pretty sure it normally does that, but maybe some other automatic action usually triggers the rebase builds.  Thanks, I'm excited to have almost all the open PRs merged.

Now we need master to be hit with a day of testing to pave out the recent table changes.  I'd like to reset the 1.9 release tag point to include the recent improvements, if at all possible.

Could folks bump the ASDK version you're testing against and let us know if you hit anything?  @rcancro, @eanagel, @levi, @Adlai-Holler
",appleguy,eanagel
742,2015-10-19 03:35:44,"@bimawa you may also be interested in the slide deck — sorry if I already sent it to you and forgot! ^^
",appleguy,bimawa
742,2015-10-20 03:15:03,"@bimawa I'd like to avoid sharing that link, because it has a few key problems that will be fixed in the upload that I post about.

Unfortunately I got sick not just once, but twice back-to-back in the past 2 weeks, and many of my plans have been disrupted.  The final video should go up in the next few days: most likely Wednesday, but at the latest this next weekend.

In more positive news, I met @levi in person on Sunday, which was really fun!  Thanks for your understanding about the delays.  If you can wait until the final version is up before sharing the link, it would be great having your help distributing the properly edited version to any friends you think may be interested in it.
",appleguy,levi
739,2015-10-14 04:40:53,"Hey @nguyenhuy, here's the issue as promised.  

I experimented a little more tonight but didn't make much progress.  I'm sure it'll be easy for you to see where the mistakes are.  Here's a demo project of what I have so far on the cells.  The only problems at the moment are that the +1 isn't inside the gray circle for the profilePictureGroupNode, the likes aren't aligned to the right, and when the message has an image, the text should be added to the bottom of that image.  

Oh, also, I can't get the profileGroupNode to layout without wrapping it in a staticLayoutSpec which doesn't seem like it should be necessary.  I assume I'm doing something with its layout wrong too but maybe thats just the way it works?

[Demo App](https://github.com/lappp9/layoutPractice)

Thanks again and let me know if I need to clarify anything!

<em>What I have so far</em>
![current](https://cloud.githubusercontent.com/assets/432875/10496685/90bb5c1c-7287-11e5-8524-016d324c4a6a.png)

<em>What the table view should look like</em>

<img alt=""desired"" src=""https://cloud.githubusercontent.com/assets/432875/10497074/9b37f612-7289-11e5-8740-7fba30215de3.png"">
",lappp9,nguyenhuy
731,2015-10-13 05:07:03,"@bimawa haven't forgotten!  I have unfortunately not been able to post the talk yet, and am waiting on some materials from NSSpain.  I hope to post it by the end of Wednesday pacific time, but if I miss that for any reason, it won't be until at least Saturday.  All of Tuesday, Thursday, and Friday I have meetings at work and need to catch up with the day's email at night.

Attached is an early form of documentation for ASLayoutSpec that one of the most experienced iOS engineers at Pinterest is working on (@rcancro).  I'll post and let you know ASAP if the video or other documentation becomes available.  The main place to watch is the Releases section here, or a post in Paper Engineering Community (Facebook) and the Google Group (AsyncDisplayKit).

[ASLayoutSpecs 10-12-15.pdf](https://github.com/facebook/AsyncDisplayKit/files/12187/ASLayoutSpecs.10-12-15.pdf)
",appleguy,rcancro
730,2015-10-21 03:09:55,"@hashemp206 thanks a lot for providing the sample code!  I apologize that I have not been able to get to this question yet.  There have been a lot of questions asked recently, which is really exciting and makes me quite happy :).

Other community folks - @eanagel, @levi, @nguyenhuy et al - feel free to take a look if you have a few minutes before I do.  This weekend will probably be my best chance.
",appleguy,levi
730,2015-10-21 03:09:55,"@hashemp206 thanks a lot for providing the sample code!  I apologize that I have not been able to get to this question yet.  There have been a lot of questions asked recently, which is really exciting and makes me quite happy :).

Other community folks - @eanagel, @levi, @nguyenhuy et al - feel free to take a look if you have a few minutes before I do.  This weekend will probably be my best chance.
",appleguy,nguyenhuy
730,2015-10-21 03:09:55,"@hashemp206 thanks a lot for providing the sample code!  I apologize that I have not been able to get to this question yet.  There have been a lot of questions asked recently, which is really exciting and makes me quite happy :).

Other community folks - @eanagel, @levi, @nguyenhuy et al - feel free to take a look if you have a few minutes before I do.  This weekend will probably be my best chance.
",appleguy,eanagel
725,2015-10-07 19:18:16,"@nguyenhuy thanks!  Please also address @garrettmoon's comment - we should take the property lock at the beginning of the method.  It's recursive, so it should be safe to do.
",appleguy,garrettmoon
724,2015-10-28 23:29:38,"OK, I don't understand WTF is going on with this PR.  In the files changed, it is just @nguyenhuy's awesome test additions for static layout spec.  And it shows that the PR can be merged, even though this has already been landed.

@RuiAAPeres would you be able to re-submit your fixed version of the nil delegate handling patch?  Naturally the discussion was about a mysterious part of the change that no one could explain the necessity of, but I'm willing to land that change and later investigate the details, as clearly it will improve the behavior for a few apps.
",appleguy,nguyenhuy
718,2015-10-06 22:25:44,"@vitalybaev ah, so are you asking about animating the size of the cells?  I am very happy you provided images as it REALLY helps understand your use case.  However, I don't completely understand these because neither of them have an image placeholder state, and the first one also doesn't show the ""some text at the bottom"".  So I'm not sure what the desired behavior is, that you would like it to have, to get from the placeholder state to the final state.  Happy to help figure it out once I better understand the intended behavior!

Look at the examples/Kittens app for some examples of cell resizing and relayout.  When you tap on a cell, it does a relayout, which involves calling -invalidateCalculatedLayout and calling -reloadRowAtIndexPath:.

@nguyenhuy sorry to ask again, but could you remind me if there were any other method calls required here?  The ASTableView /SHOULD/ be able to detect that the cell has an invalidated layout, and requires a synchronous measure pass as part of the row reload, but does it do that right now?  Lastly, can you think of an API improvement we can make for this to be a one-line call?  Two ideas for that:
          - Method on ASCellNode, like ""reload"" (but different name), that triggers a full relayout /and/ messages the owning ASTableView or ASCollectionView to reload its index path.
          - Method on each ASTableView and ASCollectionView to ""relayoutAndAnimateHeightForIndexPath:"" or something.
",appleguy,nguyenhuy
716,2015-10-06 15:45:54,"I started replacing my previous solution (a `UIPageViewController`) with a `ASCollectionView`,since it would allow me create cells ahead of time (working range). The thing I am seeing and is validated by this #540, is that the cells won't be deallocated, so the `UIViewController` it has as a subview, will be kept alive. After scrolling  for about 50 cells, the app eventually gets killed due to memory constrains. What would be the best approach in this case? 

After seeing @ryanfitz's approach by keeping a reference to the header node and then calling `recursivelyClearContents` is something I am contemplating, but I wonder if I am missing something here.

The cell itself is quite simple and the mechanism maybe slightly archaic:



I understand the need to get all the different cells in order to calculate the size of each cell. But my expectations were: if a cell is out of the working range, it should be purged. 
",RuiAAPeres,ryanfitz
716,2016-01-19 06:09:00,"This is now implemented - thanks @lappp9 !  -[ASCellNode initWithViewControllerBlock:].
",appleguy,lappp9
709,2015-10-05 20:02:26,"@hashemp206 - Neon looks like a cool framework!  However, it wouldn't integrate with ASDK without a fair amount of work.  Also, it seems like many of the features are already supported natively by ASLayoutSpec.  A small number of the features are things that would fit nicely within the mental model / implementation framework of ASLayoutSpec / ASLayoutable, so if there are any that jump out to you as particularly valuable let's get them written down as feature requests in the Issues section!

I'll write a note about how to lay out the example above as soon as I can (just in a meeting now).  @rcancro or @nguyenhuy may get to it before me.
",appleguy,rcancro
709,2015-10-05 20:02:26,"@hashemp206 - Neon looks like a cool framework!  However, it wouldn't integrate with ASDK without a fair amount of work.  Also, it seems like many of the features are already supported natively by ASLayoutSpec.  A small number of the features are things that would fit nicely within the mental model / implementation framework of ASLayoutSpec / ASLayoutable, so if there are any that jump out to you as particularly valuable let's get them written down as feature requests in the Issues section!

I'll write a note about how to lay out the example above as soon as I can (just in a meeting now).  @rcancro or @nguyenhuy may get to it before me.
",appleguy,nguyenhuy
708,2015-10-05 18:44:00,"@appleguy @nguyenhuy Been majorly frustrated at work lately so it feels super good to have a nice, clean improvement to offer.
",Adlai-Holler,nguyenhuy
708,2015-10-05 18:44:00,"@appleguy @nguyenhuy Been majorly frustrated at work lately so it feels super good to have a nice, clean improvement to offer.
",Adlai-Holler,appleguy
707,2015-10-05 22:47:12,"cc @levi, @eanagel, @nguyenhuy if you have a chance to look at this and offer a speculation, it would be helpful!

I will examine ASAP, although it is tough for me during the week.  At the latest, I'll study it in detail this weekend, but hopefully Wednesday.
",appleguy,levi
707,2015-10-05 22:47:12,"cc @levi, @eanagel, @nguyenhuy if you have a chance to look at this and offer a speculation, it would be helpful!

I will examine ASAP, although it is tough for me during the week.  At the latest, I'll study it in detail this weekend, but hopefully Wednesday.
",appleguy,nguyenhuy
707,2015-10-05 22:47:12,"cc @levi, @eanagel, @nguyenhuy if you have a chance to look at this and offer a speculation, it would be helpful!

I will examine ASAP, although it is tough for me during the week.  At the latest, I'll study it in detail this weekend, but hopefully Wednesday.
",appleguy,eanagel
707,2015-10-09 20:15:48,"@Adlai-Holler of course.  I think you'll need to iterate over the nodes before they are running in the background to first catch any that have been loaded previously, to do their measurement there.  Definitely agree there are subtleties involved, may even need some kind of property on cellNode like .needsMeasurement?  Keep in mind that @levi  has a big open PR in this area and we may want to wait for that to land, although your change would probably be the easier one to rebase onto his.
",appleguy,levi
700,2015-10-03 01:17:09,"Currently, ASLayoutSpecs use frame to layout layers and views, however if laying out a layer with a non-identity transform, setting the frame isn't valid (and in fact asserts in ASDisplayNode+UIViewBridging), instead bounds and position should be set.

Any chance you'd be interesting in looking at this @nguyenhuy?
",garrettmoon,nguyenhuy
700,2015-10-03 17:33:52,"Firstly, just to be 100% precise, ASLayoutSpecs don't position backing stores (--i.e layers/views). If you are talking about laying out subnodes, it's actually done by their parent node ([here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASDisplayNode.mm#L1640)). 

But yeah, frame is used for laying out subnodes. It has been that way since the beginning, and I don't know the reason of such decision (perhaps @appleguy or someone else does?). That's said, I agree with you that setting frame isn't safe in some cases. Since frame is just a computed value (calculated from position, bounds and anchorPoint), I think we can instead use bounds and position.

Do you have a diff ready to go? I can give it a try if you don't have time for this :)
",nguyenhuy,appleguy
700,2015-10-03 19:41:43,"Right, makes sense that we are just computing ASLayout objects and then it is actually an ASDisplayNode task to set the values on subnodes.

Huy, if you have time to draft a patch, it would be appreciated--we haven't attempted yet.  I have a few other things higher on my ASDK list.  I'm hoping this change is simple because it should have essentially that one override point, and not require changing each layout spec.

Sent from my iPhone

> On Oct 3, 2015, at 10:33 AM, Huy Nguyen notifications@github.com wrote:
> 
> Well, firstly, just to be 100% precise, ASLayoutSpecs don't layout backing stores (--i.e layers/views). If you are talking about laying out subnodes, it's actually done by the parent node (here). 
> But yeah, frame is used while laying out subnodes. And it has been like that since the beginning. I don't have the knowledge of why it was decided that way in the first place (perhaps @appleguy or someone else does?). That's said, I agree with you that setting frame isn't safe in some cases. And since frame is just a computed value (calculated from position, bounds and anchorPoint), I think we can instead use bounds and position.
> 
> Do you have a diff ready to go? I can give it a try if you don't have time for this :)
> 
> —
> Reply to this email directly or view it on GitHub.
",appleguy,appleguy
699,2015-10-02 22:57:24,"I noticed when creating a static layout that the sizeRange of the children was being ignored. The case was:

I had an image as a child of a static layout
The image was set to have an exact range of 90x90
When the static layout was measured, the constrained size came in as 375xInf (the width of the containing node and unbounded)
The static layout computed its final size as 375x90

According to the comments in component kit's header file the static layout  ""[c]omputes a size that is the union of all childrens' frames."" It appeared that we are only doing that in the unbounded direction. My fix is to do it in both directions.

@nguyenhuy Please take a look and let me know what you think.
",rcancro,nguyenhuy
698,2015-11-08 05:21:00,"@nguyenhuy @levi @eanagel have any of you thought about how we might fix this, or encountered it in your apps?  I'm not certain how high priority this is compared to the many other improvements / refinements we might implement, especially since ASDataController is now substantially improved and appears to be mostly stable (no crashes in Pinterest after a week of heavy public use).  Still though, it would be really great to ensure ASDK remains super animation-friendly.
",appleguy,nguyenhuy
698,2015-11-08 05:21:00,"@nguyenhuy @levi @eanagel have any of you thought about how we might fix this, or encountered it in your apps?  I'm not certain how high priority this is compared to the many other improvements / refinements we might implement, especially since ASDataController is now substantially improved and appears to be mostly stable (no crashes in Pinterest after a week of heavy public use).  Still though, it would be really great to ensure ASDK remains super animation-friendly.
",appleguy,eanagel
698,2015-11-08 05:21:00,"@nguyenhuy @levi @eanagel have any of you thought about how we might fix this, or encountered it in your apps?  I'm not certain how high priority this is compared to the many other improvements / refinements we might implement, especially since ASDataController is now substantially improved and appears to be mostly stable (no crashes in Pinterest after a week of heavy public use).  Still though, it would be really great to ensure ASDK remains super animation-friendly.
",appleguy,levi
698,2017-01-03 19:20:18,"As @garrettmoon mentioned, might be better to keep duplicate issues together. So I'll repost my previous issue here: #2845 

We've been rebuilding parts of our app as a feasibility test for using ASDK. So far ASDK has been awesome and we've resolved most of the issues except for one thing. The `moveItem:` animation for ASCollectionNode.

For our app, the `moveItem:` animation is actually quite critical to help inform our users to changes. A simple fade-out-fade-in animation provides a lot less visual cue to the eyes.

@Adlai-Holler: I have a colleague who's much more comfortable with Objc than I am. If you will not be able to get to this issue anytime soon, mind if my colleague contact you and see if he can help get this issue moving?

Thanks very much in advance!",leotumwattana,garrettmoon
694,2015-10-13 02:52:10,"@appleguy: Still looking into why these tests aren't passing in travis. But in the meantime, I've discovered a strange issue while running ASViewController/Sample (1 out of 10 runs). Seems like it's accessing `completedNodes` via `ASDataController#nodesAtIndexPaths:` and failing to insert into the `deletedElements` collection. I've posted a screenshot below. @nguyenhuy has done some work on switching between a completedNodes copy to provide safe accessing at all time. I was wondering if this was related? I've not touched the range controller much in this patch and curious why it's coming up now.

<img width=""1440"" alt=""asmultidimensionalarrayutils_mm"" src=""https://cloud.githubusercontent.com/assets/8493/10444362/72230f0c-711a-11e5-97ae-6618163f05e5.png"">
",levi,nguyenhuy
694,2015-10-14 20:43:50,"I looked at the crash reported. It occurs when visible range is updated. I guess there is something wrong with the updated visible index paths. Do index paths of header and footer nodes included? If yes then there might be a problem because completedNodes setter returns [normal rows only](https://github.com/facebook/AsyncDisplayKit/pull/694/files#diff-c03b807fdd44839fd88691746d9dcc27R914), no?

I could reproduce the crash on this branch, but not master. I suspect it's a new bug, but nothing for sure right now. I will spend more time on it later on.

> @nguyenhuy has done some work on switching between a completedNodes copy to provide safe accessing at all time.

My previous patch allows ASDataController to switch to a completedNodes copy, but only during a transaction.
",nguyenhuy,nguyenhuy
693,2015-09-29 19:37:08,":warning: Not ready to merge :warning: 

I may be way off in the woods here, so I'm looking for comments on the general direction before I continue to testing and refining. Don't hold back!
- Create a new `_ASHierarchyChangeSet` class that stores and processes changes. The intention here is, you submit your changes with their animation options in arbitrary order, and when you're done it generates sorted changes, coalesced by animationOptions. This way we have the minimum possible number of updates but still in a safe order for use by ASDataController.
- In ASDataController our enqueued edit command blocks are now `(_ASHierarchyChangeSet -> Void)`. During `endUpdates` we create a change set, run all the blocks to load it up with data, then call `markCompleted` so the changeset does its logic, then we do `accessDataSourceWithBlock` and go through the sorted, coalesced changes, applying them using the same code that we USED to use in the edit command block.

I copied & pasted the edit command code pretty directly, so I'm not sure if e.g. we can get rid of some of the `[editTransactionQueue waitUntilAllOperationsAreFinished]` or what the fastest safe behavior we can achieve there is.

@nguyenhuy @appleguy 
",Adlai-Holler,nguyenhuy
693,2015-09-29 19:37:08,":warning: Not ready to merge :warning: 

I may be way off in the woods here, so I'm looking for comments on the general direction before I continue to testing and refining. Don't hold back!
- Create a new `_ASHierarchyChangeSet` class that stores and processes changes. The intention here is, you submit your changes with their animation options in arbitrary order, and when you're done it generates sorted changes, coalesced by animationOptions. This way we have the minimum possible number of updates but still in a safe order for use by ASDataController.
- In ASDataController our enqueued edit command blocks are now `(_ASHierarchyChangeSet -> Void)`. During `endUpdates` we create a change set, run all the blocks to load it up with data, then call `markCompleted` so the changeset does its logic, then we do `accessDataSourceWithBlock` and go through the sorted, coalesced changes, applying them using the same code that we USED to use in the edit command block.

I copied & pasted the edit command code pretty directly, so I'm not sure if e.g. we can get rid of some of the `[editTransactionQueue waitUntilAllOperationsAreFinished]` or what the fastest safe behavior we can achieve there is.

@nguyenhuy @appleguy 
",Adlai-Holler,appleguy
693,2015-10-01 02:08:30,"This is really awesome, thanks so much @Adlai-Holler for your large-scale contributions!  I will review in detail this weekend.

Let me start by saying that I'm not afraid of a change that hugely changes ASDataController — obviously it would need to be rigorously tested, but let's face it, the class needs some upgrades.  The critical piece: we must get the architecture RIGHT.  It isn't worth the testing pain of a really big change if we can spot any difficult limitations of its structure that wouldn't be resolvable with later improvements moving in the same direction.

That said, it does seem likely that we could solve this problem with a more surgical change.  I'd buy it that this direction may be BETTER despite the higher initial risk, if we believe it results in code that is easier to debug, read, maintain, extend, or more performant — or any combination of a few of those.

@Adlai-Holler, what's your general philosophy on this?  @levi, @eanagel - interested to hear your thoughts.  Don't worry guys, I won't merge something like this without personally helping to test it heavily with stressful use cases in Pinterest and upgraded thrash testers, and I will also not merge something that breaks any client's app — so let's critique and brainstorm what the ideal architectural approach is before worrying about the risk of any given change.
",appleguy,levi
693,2015-10-01 02:08:30,"This is really awesome, thanks so much @Adlai-Holler for your large-scale contributions!  I will review in detail this weekend.

Let me start by saying that I'm not afraid of a change that hugely changes ASDataController — obviously it would need to be rigorously tested, but let's face it, the class needs some upgrades.  The critical piece: we must get the architecture RIGHT.  It isn't worth the testing pain of a really big change if we can spot any difficult limitations of its structure that wouldn't be resolvable with later improvements moving in the same direction.

That said, it does seem likely that we could solve this problem with a more surgical change.  I'd buy it that this direction may be BETTER despite the higher initial risk, if we believe it results in code that is easier to debug, read, maintain, extend, or more performant — or any combination of a few of those.

@Adlai-Holler, what's your general philosophy on this?  @levi, @eanagel - interested to hear your thoughts.  Don't worry guys, I won't merge something like this without personally helping to test it heavily with stressful use cases in Pinterest and upgraded thrash testers, and I will also not merge something that breaks any client's app — so let's critique and brainstorm what the ideal architectural approach is before worrying about the risk of any given change.
",appleguy,eanagel
691,2015-09-28 16:39:16,"Issue #690 brought up a good point I've been thinking about as I was putting together the supplementary view architecture briefly this weekend. The current data controller integration with ASCollectionView reiles upon layout invalidation from reloading/inserting/deleting/moving items or @nguyenhuy's new relayout items based upon the collection view's bounds changes. These behaviors closely model the specific implementation of a table view, but it's clear as we have begun to mature the behavior of our collection view most of the sizing events and values (namely constrainedSizeForNode:) have been built around the powerful Collection view layouts.

I've been doing a bit of research into the `invalidateLayout` and `invaldateLayoutWithContext:` methods. While the provided context is not as granular as I initially hoped, I believe these events are great candidates for us to use as hooks for relayout events in the collection view's data controller.

Moreover, as we query the collection view for constrained sizes I think we should start asking the collection view layout for specific values. This will move the layout (constrainedSizeForNode:) code we currently have in ASCollectionView into a separate place that is specific to the current collection view layout.

With that, a couple of solutions have come to mind:
1. Make ASDataController an abstract class that table view and collection view have concrete implementations of. This will give each view the ability to add custom behavior such as supplementary views for collection views and header/footer nodes for tables views.
2. Once that we have a concrete ASCollectionDataController with supplementary view support, the data controller interfaces with a strategy object that provides all the necessary answers to questions from the data controller about the current layout. For example, ""how many supplementary views are in this section?"", ""what's the constrained size for this node?"". This strategy is provided by the client of ASCollectionView and either set directly as a property on ASCollectionDataController or is composed in ASViewController and its values returned at specific points of the data controllers data source method (I'm leaning toward the latter). The default limitation would be a generic strategy for flow layouts.
3. We migrate ASCollectionView to start node invalidation and relayout on ‘invalidateLayout‘ events. I already have the proxying of invalidateLayout working in a branch, but it's beyond the scope of implementing supplementary views into ASCollectionView. This will allow us to support ‘itemSize‘ changes in a flow layout, for example, and respect the layout invalidation events that can at times use animation transitions to change the item's sizes. 
#1 and #2 is where I'm planning to go this week to get my branch building and running. I feel that it should be a flexible enough solution to test and also to continue composing as custom layout authors investigate using their layouts with supplementary views. #3 is where I'd like to start discussion, as it's a little more involved and not something I'm planning to do this week.

Wrote this on my phone, so let me know if anything doesn't make sense.
",levi,nguyenhuy
688,2015-09-27 20:29:55,"My attempt to fix #619. The idea is to capture ASDataController's _completedNodes and use that cache for any external queries until a current update transaction finishes.

Let me know what you think on this diff. If we don't want to cater ASDataController to work with UITableView and UICollectionView specific behaviours, I can simply make a wrapper/subclass that sits between UITableView/UICollectionView and ASDataController. It can intercept transaction calls as well as external data queries, and ensures data consistency using the same technique here.

I tested this diff by abusing Kitten sample with a bunch of insertions, deletions and device rotations. Really appreciate if @eanagel, @ryanfitz, @Adlai-Holler and @smyrgl can help me to test as well.

I have another diff that tries to fix the issue by calling beginUpdates, edit command blocks and endUpdates in a single run loop. That diff is more complex and doesn't cover all the edge cases:
- It has to catch and queue all delegating blocks, then executes them on main thread. 
- It doesn't handle the case when data is accessed externally after some edit commands finished,  but before the (single) beginUpdates/endUpdates run loop is executed. It crashes because _completedNodes was modified and is different from what the table view/collection view expects.
",nguyenhuy,ryanfitz
688,2015-09-27 20:29:55,"My attempt to fix #619. The idea is to capture ASDataController's _completedNodes and use that cache for any external queries until a current update transaction finishes.

Let me know what you think on this diff. If we don't want to cater ASDataController to work with UITableView and UICollectionView specific behaviours, I can simply make a wrapper/subclass that sits between UITableView/UICollectionView and ASDataController. It can intercept transaction calls as well as external data queries, and ensures data consistency using the same technique here.

I tested this diff by abusing Kitten sample with a bunch of insertions, deletions and device rotations. Really appreciate if @eanagel, @ryanfitz, @Adlai-Holler and @smyrgl can help me to test as well.

I have another diff that tries to fix the issue by calling beginUpdates, edit command blocks and endUpdates in a single run loop. That diff is more complex and doesn't cover all the edge cases:
- It has to catch and queue all delegating blocks, then executes them on main thread. 
- It doesn't handle the case when data is accessed externally after some edit commands finished,  but before the (single) beginUpdates/endUpdates run loop is executed. It crashes because _completedNodes was modified and is different from what the table view/collection view expects.
",nguyenhuy,eanagel
688,2015-09-27 20:29:55,"My attempt to fix #619. The idea is to capture ASDataController's _completedNodes and use that cache for any external queries until a current update transaction finishes.

Let me know what you think on this diff. If we don't want to cater ASDataController to work with UITableView and UICollectionView specific behaviours, I can simply make a wrapper/subclass that sits between UITableView/UICollectionView and ASDataController. It can intercept transaction calls as well as external data queries, and ensures data consistency using the same technique here.

I tested this diff by abusing Kitten sample with a bunch of insertions, deletions and device rotations. Really appreciate if @eanagel, @ryanfitz, @Adlai-Holler and @smyrgl can help me to test as well.

I have another diff that tries to fix the issue by calling beginUpdates, edit command blocks and endUpdates in a single run loop. That diff is more complex and doesn't cover all the edge cases:
- It has to catch and queue all delegating blocks, then executes them on main thread. 
- It doesn't handle the case when data is accessed externally after some edit commands finished,  but before the (single) beginUpdates/endUpdates run loop is executed. It crashes because _completedNodes was modified and is different from what the table view/collection view expects.
",nguyenhuy,Adlai-Holler
688,2015-09-27 21:05:03,"@Adlai-Holler explains the problem clearly [here](https://github.com/facebook/AsyncDisplayKit/issues/684#issuecomment-143495549):

> For example, say you have 1 section with 7 items ABCDEFG. You want to do a batch update with (move 5 to 1), (insert X at 0), so you expect the end result to be XFABCDEG.
> If you tell ASTableView about the changes in that order you'll end up with XAFBCDEG which is wrong. If you tell ASTableView about the changes in reverse order you'll end up with XEABCDFG
",nguyenhuy,Adlai-Holler
688,2015-09-28 07:01:17,"Thanks, @appleguy. I'm not very proud of the name either, but it was the best I could come up with (other alternatives were backingStoreNodes and delegateStateNodes). So feel free to change it. May ""shadowWhileBatchingNodes"" sound better? Man, I ~~really suck~~ am really bad at naming things.

@Adlai-Holler said he can take the ordering issue.
",nguyenhuy,Adlai-Holler
687,2015-09-25 23:13:40,"Obviously this introduces the requirement of the Photos framework which is bad. I wanted to know whether y'all are even interested in this before taking the time to fix that. @appleguy Is it too dirty to put this in a subspec? Is there a cleaner way? 
",Adlai-Holler,appleguy
687,2015-09-26 05:39:49,"Cool new area, @Adlai-Holler!  There are a number of image handling conveniences I would love to see added to ASDK, and improved Photos.framework integration is definitely a good area.

This is very close to mergable.  In fact, if we could make ASPhotosImageRequest something that most ASDK users would not need to know about (by parsing URLs directly handed to Multiplex), then we shouldn't even worry about the name at this point.

For a more visible API, the ASPhotos prefix sounds possibly ambiguous to me.  I jumped into reading the patch before finishing your intro, and didn't immediately notice that the class was Photos.framework specific, as opposed to a general image downloader.  What do you think about calling it ASPhotosAssetRequest, or ASPhotosFrameworkImageRequest?  If you feel the current name is better, keep it — just some ideas.

For the other classes you mentioned, let's definitely talk!  There are some other folks at Pinterest who would like to discuss image loading and caching, as we are working in similar areas and may be able to share a solution.  You may have seen PINRemoteImage and PINCache on GitHub.  We are hoping to integrate at least the former with ASDK, eventually with Progressive Scan JPEG support.  @garrettmoon @rcancro 
",appleguy,garrettmoon
687,2015-09-26 05:39:49,"Cool new area, @Adlai-Holler!  There are a number of image handling conveniences I would love to see added to ASDK, and improved Photos.framework integration is definitely a good area.

This is very close to mergable.  In fact, if we could make ASPhotosImageRequest something that most ASDK users would not need to know about (by parsing URLs directly handed to Multiplex), then we shouldn't even worry about the name at this point.

For a more visible API, the ASPhotos prefix sounds possibly ambiguous to me.  I jumped into reading the patch before finishing your intro, and didn't immediately notice that the class was Photos.framework specific, as opposed to a general image downloader.  What do you think about calling it ASPhotosAssetRequest, or ASPhotosFrameworkImageRequest?  If you feel the current name is better, keep it — just some ideas.

For the other classes you mentioned, let's definitely talk!  There are some other folks at Pinterest who would like to discuss image loading and caching, as we are working in similar areas and may be able to share a solution.  You may have seen PINRemoteImage and PINCache on GitHub.  We are hoping to integrate at least the former with ASDK, eventually with Progressive Scan JPEG support.  @garrettmoon @rcancro 
",appleguy,rcancro
684,2015-10-19 03:40:23,"So, we just merged @levi's epic change touching this code.  That was really the main thing that meant it was inadvisable to start this project.  Now, this is really the only absolutely-critical fix to develop related to table / collection, and is something that would be ideal to have in place for the 2.0 GM.

@eanagel, @Adlai-Holler, @b3ll, @nguyenhuy are any of you up to the challenge?  I understand it's a big commitment, so don't be shy to say ""no"" outright (it might encourage others! ;) )  
",appleguy,levi
684,2015-10-19 03:40:23,"So, we just merged @levi's epic change touching this code.  That was really the main thing that meant it was inadvisable to start this project.  Now, this is really the only absolutely-critical fix to develop related to table / collection, and is something that would be ideal to have in place for the 2.0 GM.

@eanagel, @Adlai-Holler, @b3ll, @nguyenhuy are any of you up to the challenge?  I understand it's a big commitment, so don't be shy to say ""no"" outright (it might encourage others! ;) )  
",appleguy,eanagel
684,2015-10-19 13:42:38,"Negative, I'm on vacation till Thursday

Sent from my iPhone

> On Oct 18, 2015, at 11:40 PM, appleguy notifications@github.com wrote:
> 
> So, we just merged @levi's epic change touching this code. That was really the main thing that meant it was inadvisable to start this project. Now, this is really the only absolutely-critical fix to develop related to table / collection, and is something that would be ideal to have in place for the 2.0 GM.
> 
> @eanagel, @Adlai-Holler, @b3ll, @nguyenhuy are any of you up to the challenge? I understand it's a big commitment, so don't be shy to say ""no"" outright (it might encourage others! ;) )
> 
> —
> Reply to this email directly or view it on GitHub.
",Adlai-Holler,levi
684,2015-10-19 13:42:38,"Negative, I'm on vacation till Thursday

Sent from my iPhone

> On Oct 18, 2015, at 11:40 PM, appleguy notifications@github.com wrote:
> 
> So, we just merged @levi's epic change touching this code. That was really the main thing that meant it was inadvisable to start this project. Now, this is really the only absolutely-critical fix to develop related to table / collection, and is something that would be ideal to have in place for the 2.0 GM.
> 
> @eanagel, @Adlai-Holler, @b3ll, @nguyenhuy are any of you up to the challenge? I understand it's a big commitment, so don't be shy to say ""no"" outright (it might encourage others! ;) )
> 
> —
> Reply to this email directly or view it on GitHub.
",Adlai-Holler,eanagel
671,2015-09-19 20:06:09,"@appleguy Pursuant to https://github.com/facebook/AsyncDisplayKit/pull/664#issuecomment-141697512 , here's a branch that just has the Travis updates. On my local machine using Xcode 7A220 I still get the same unrecognized selector errors for category properties like `CALayer.asyncdisplaykit_node`
",Adlai-Holler,appleguy
671,2015-09-19 20:55:09,"Interesting, so it is an Xcode 7 specific issue with our test harness I would suppose?  Testing often results in test-specific issues :(.

This code has been working since the late versions of Xcode 4.6 or so, and thus although it may need a change to handle the Xcode changes, I don't think it has been recently broken.

Can you confirm running the tests locally reproduces the issue?  I'm away from a computer but if no one has figured it out by the time the plane boards, I will debug.

Sent from my iPhone

> On Sep 19, 2015, at 10:06 PM, Adly Holler notifications@github.com wrote:
> 
> @appleguy Pursuant to #664 (comment) , here's a branch that just has the Travis updates. On my local machine using Xcode 7A220 I still get the same unrecognized selector errors for category properties like CALayer.asyncdisplaykit_node
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/facebook/AsyncDisplayKit/pull/671
> 
> Commit Summary
> 
> Bump SDK in build.sh
> Bump the .travis.yml OS X image requirement for Xcode 7
> File Changes
> 
> M .travis.yml (1)
> M build.sh (4)
> Patch Links:
> 
> https://github.com/facebook/AsyncDisplayKit/pull/671.patch
> https://github.com/facebook/AsyncDisplayKit/pull/671.diff
> —
> Reply to this email directly or view it on GitHub.
",appleguy,appleguy
671,2015-09-22 18:01:26,"Spent some time looking into this, but have run out.  I have a number of other priorities that I can't bump in the next couple weeks, and am worried I just won't have time to get the testing system running on Xcode 7 in September.

If anyone wants to take a deeper look, the help would be thoroughly appreciated!  I got past several of the issues, but it remains a mystery why they are popping up at all (e.g., the implementation counterpart to the CALayer @dynamic for asyncdisplaykit_node indeed seems to be missing, and adding the implementation fixes that issue, but uncovers a bunch of similar ones).  Before forging ahead to blindly ""fix"" anything ""missing"", we should go back to 6.4 to understand what might have changed / how it was working before.  cc @nguyenhuy, @levi 
",appleguy,nguyenhuy
671,2015-09-22 18:01:26,"Spent some time looking into this, but have run out.  I have a number of other priorities that I can't bump in the next couple weeks, and am worried I just won't have time to get the testing system running on Xcode 7 in September.

If anyone wants to take a deeper look, the help would be thoroughly appreciated!  I got past several of the issues, but it remains a mystery why they are popping up at all (e.g., the implementation counterpart to the CALayer @dynamic for asyncdisplaykit_node indeed seems to be missing, and adding the implementation fixes that issue, but uncovers a bunch of similar ones).  Before forging ahead to blindly ""fix"" anything ""missing"", we should go back to 6.4 to understand what might have changed / how it was working before.  cc @nguyenhuy, @levi 
",appleguy,levi
669,2015-09-18 21:22:39,"Supplementary views aren't supported by ASCollectionView right now; there was an assertion added for this a while back that I believe is still in 1.2.3 and Master (if you have 1.2.2, it may not be there).

@levi has been working on implementing support for supplementary views, but also has a full-time job.  Levi, are there any updates in terms of the strategy and path from here to having support?
",appleguy,levi
664,2015-09-18 23:31:19,"@appleguy If this is too big a change for one external PR, I'd be glad to target a separate branch so others can work on it too
",Adlai-Holler,appleguy
664,2015-09-19 18:39:34,"@appleguy Sweet! I got it to the point where it'll build on Travis, but now some tests are failing because of missing implementations of category properties like `[_ASDisplayLayer asyncdisplaykit_isAsyncTransactionContainer]: unrecognized selector`. I added an implementation for one of them, and then it crashed on a different one. 

I don't quite understand how these methods were ever getting implemented in the first place. All I can find is `@dynamic [name]` specifiers with no implementation code in sight. Any pointers? @nguyenhuy ?
",Adlai-Holler,nguyenhuy
650,2015-09-14 22:05:03,"There are still some warnings left (see below). @rcancro will look at them later on.


",nguyenhuy,rcancro
649,2015-10-06 01:14:46,"@richardoti I'm so glad to report that this was in fact a framework bug.  It is now FIXED!  Thank you, @garrettmoon!

The change that resolves it is https://github.com/facebook/AsyncDisplayKit/pull/710.

I tested your code locally and it works fine with this.  As I alluded to before, I was pretty torn by the fact that there were any visual differences with the rasterize mode on, as it should not be the case even if the layout code is not ideally factored.  I can imagine certain substantial misuses of the API that might cause that, but although I didn't completely understand the layout implementation in your test code, it did implement both -calculateSizeThatFits and -layout — so it should work.

That said, I'd love to help you adopt the 2.0 layout constructs if that is something you're interested in.

Depending on your layout, indeed it may be important to set a non-zero minimum size.  Call -measureWithSizeRange: instead of -measure:.  This is also a new API in 2.0.  We will likely discontinue the -measure API (mark it deprecated) because it is somewhat confusing to have this behavior, where the min size is set to zero by default if you use -measure.

Could you open a new task for us to continue the interesting discussion on the new layout patterns, and then close this one?  The feedback from following your experience trying out the new API is very useful.  Of course, given that there is no documentation, I apologize it will be a rough road to learn some of this stuff — that's entirely not your fault!  So I encourage frequent questions if you find them helpful :)
",appleguy,garrettmoon
640,2015-09-06 19:49:15,"After taking a look at how `ASCollectionView` loads data the first time after it being initialized, I found out that `reloadData` is the one being called, probably by the implementation of the super class itself (`UICollectionView`). And it looks like [`initialDataLoadingWithAnimationOptions`](https://github.com/facebook/AsyncDisplayKit/blob/3983bf2289790cbfa1412b9a250b012cdecae34d/AsyncDisplayKit/Details/ASDataController.h#L134) is never called. The description says that it can be used in `viewWillAppear`, but it would be too late by that time anyway-- i.e `reloadData` is called automatically when the collection view (and perhaps table view) is added to the view hierarchy, so by the time `initialDataLoadingWithAnimationOptions` is called in `viewWillAppear` (if ever), it would do useless (if not harmful) [insertions](https://github.com/facebook/AsyncDisplayKit/blob/80bbf790461483ff8b52bf29e18b84fb7458f48d/AsyncDisplayKit/Details/ASDataController.mm#L213).

The commit history indicates that this method is firstly added in [this commit](https://github.com/facebook/AsyncDisplayKit/commit/f7f5988fcd816f5f879be2c3cfcfcab501509461#diff-afbefb9fd5294bc200915566df88d290R93), but I couldn't find the reason behind, let alone its usage.

So I'm thinking maybe we can get rid of this method, assuming everything I said above is true. If  @tanliboy and @appleguy have some insights here, please share. Thanks!
",nguyenhuy,appleguy
640,2015-09-06 19:49:15,"After taking a look at how `ASCollectionView` loads data the first time after it being initialized, I found out that `reloadData` is the one being called, probably by the implementation of the super class itself (`UICollectionView`). And it looks like [`initialDataLoadingWithAnimationOptions`](https://github.com/facebook/AsyncDisplayKit/blob/3983bf2289790cbfa1412b9a250b012cdecae34d/AsyncDisplayKit/Details/ASDataController.h#L134) is never called. The description says that it can be used in `viewWillAppear`, but it would be too late by that time anyway-- i.e `reloadData` is called automatically when the collection view (and perhaps table view) is added to the view hierarchy, so by the time `initialDataLoadingWithAnimationOptions` is called in `viewWillAppear` (if ever), it would do useless (if not harmful) [insertions](https://github.com/facebook/AsyncDisplayKit/blob/80bbf790461483ff8b52bf29e18b84fb7458f48d/AsyncDisplayKit/Details/ASDataController.mm#L213).

The commit history indicates that this method is firstly added in [this commit](https://github.com/facebook/AsyncDisplayKit/commit/f7f5988fcd816f5f879be2c3cfcfcab501509461#diff-afbefb9fd5294bc200915566df88d290R93), but I couldn't find the reason behind, let alone its usage.

So I'm thinking maybe we can get rid of this method, assuming everything I said above is true. If  @tanliboy and @appleguy have some insights here, please share. Thanks!
",nguyenhuy,tanliboy
638,2015-09-06 00:41:40,"Hey Connor, I left the same note as a pull request on your repo, but I'll post it here too for reference:

> When a collection view is instantiated and its `layoutSubviews` method is called, it will automatically call `reloadData` to initialize the data within the collection. Problem is ASDK loads collection view cells off the main thread, delegating the bulk of the work to the `ASDataController` to notify the collection view to reload specific sections and items when the nodes in `_editingNodes` transition into the `_completedNodes` collection. Thus you won't have any data until the data controller is completely done with its initial rendering of the cells in your data source. The most straight forward way to work around this is the `reloadDataWithCompletion:` method which will give you a callback to do any work once the reloadData is done in the data controller.

It's not a completely obvious solution at first glance and @eanagel has brought up a good note in #587 about possible ways to make handling callbacks fired from the data controller clearer. Feel free to leave some feedback on that thread if you have ideas on how to improve the experience of dealing with async rendering.
",levi,eanagel
637,2015-09-03 08:26:56,"@ocrickard - thanks for taking a look here, really appreciate your expertise in this area! cc @rcancro.

I agree this is not the right fix, as clearly this adjustment wouldn't necessarily apply to other languages / scripts.

Does this happen on all recent iOS versions?  Have you tried iOS 9?
",appleguy,rcancro
637,2015-09-05 18:42:03,"@lorixx — Thanks for your analysis, it's much appreciated!  Wish we could be working together :).

@rcancro should take a look at this as he has been pixel-pushing text layout recently.  I want to make sure he can trivially reproduce the problem, at least as a starter.

@ocrickard do you have reason to believe that if we adopted the newer text layout engine (revised for ComponentKit), that it would fix this issue?  If you could test that for me and confirm, it would be really helpful.
",appleguy,rcancro
636,2015-09-02 12:46:17,"[Here](https://github.com/facebook/AsyncDisplayKit/pull/631/files#r38378312) is the motivation for this PR.

@garrettmoon Please also give feedback on this diff. Thanks!
",nguyenhuy,garrettmoon
632,2015-09-16 19:48:30,"Thanks @paulyoung!  @nguyenhuy is aware of the failure, and we'll try to get it fixed promptly.  I also let @rcancro know about the C++ ""header pollution"" issue.  I'm going to merge this now anyway.
",appleguy,nguyenhuy
632,2015-09-16 19:48:30,"Thanks @paulyoung!  @nguyenhuy is aware of the failure, and we'll try to get it fixed promptly.  I also let @rcancro know about the C++ ""header pollution"" issue.  I'm going to merge this now anyway.
",appleguy,rcancro
623,2015-08-22 04:05:51,"Thanks for the comments -- I think I have them all addressed. I also got the tests working again. 

This change was easy, huge props to @nguyenhuy for getting the layout specs in to ASDK!
",rcancro,nguyenhuy
622,2015-08-21 17:06:37,"@nguyenhuy Is this what you had in mind?
",rcancro,nguyenhuy
619,2015-08-24 17:25:17,"Ok, here is another clue. I have also seen this crash when inspecting visibleIndexPaths along these lines:



Seems like this should never cause a problem, correct @appleguy?
",eanagel,appleguy
619,2015-08-26 20:55:16,"Ok I think I understand the problem here. Each change we ultimately push to UIViewController happens in a separate run loop (beginUpdates, insert, delete, endUpdates in separate blocks, for instance), so it is possible to do things on the main thread while we are in the middle of a begin/end updates block. When this is true, UITableView sees the original state, but we are updating _completedNodes as we go so it sees the updated state. Therefore, index paths that appear valid according to UITableView may be invalid (or wrong) when using nodeForRowAtIndexPath: This means it's not safe to get the node for an indexPath while this is happening, which I have several use cases for.

I think the ultimate solution would be to make sure all changes are committed to UITableView in a single runloop (beginUpdates/insert/delete/endUpdates in a single block) This would require some possibly significant refactoring of ASDataController to accomplish. My work around was is to keep a flag indicating I'm in begin/end updates and defer anything that might ultimately rely on _completedNodes. (Which is not a pretty picture, btw.)

@appleguy I'm a little nervous about touching this code, maybe we can chat about an approach to fix this?
",eanagel,appleguy
613,2015-08-17 18:39:09,"This PR aims to improve the performance of `ASDisplayNode -init` by offloading invariant tasks to `+initialize`. This is done in a thread-safe manner by adding a method to each subclass of `ASDisplayNode` (and `ASDisplayNode` itself) which sets `_flags` and `_methodOverrides` with pre-calculated values. (Previously we were doing this work on each init.) Because `+initialize` is guaranteed to run before any other methods in the class, I believe it is thread-safe and reasonably goof-proof.

Of course due to the dynamic nature of Objective C, this can be broken. In fact, my initial implementation was broken immediately by our own tests which use a dynamic implementation of respondsToSelector for it's tests. I've added code that handles this case (degrading to the old functionality if it detects that `+respondsToSelector` or `-respondsToSelector` has been overridden.), but there are still a couple ways a really creative developer could break things: by adding methods we are testing using `class_addMethod` and friends, or by changing the return value of the respondsToSelector results after an instance has been created (which would break the current implementation as well.) These seem like pretty unlikely scenarios to me.

Since this does impact each and every instance of a node, it probably deserves some close inspection before we merge it in. I've tried to structure things so future developers can add to it without getting into the weeds too much.

Note: @appleguy I' did a trial merge into 1.2.3 to test in my application and found it pretty challenging because the code bases are shifting apart a bit here. It's doable, but I found in the end it's a little closer to a re-implementation than a merge ;) Happy to help with that if and when the time comes.
",eanagel,appleguy
612,2015-08-17 07:20:12,"Thank you for reporting this, @FelixYin66 and @fox3013. Based on the stack trace, I guess the crash is caused by the recent change in #607. 

@appleguy must have a good idea on how it occurs and be able to fix it when time permits. Meanwhile, if you have time to investigate more, a PR will be very appreciated :)
",nguyenhuy,appleguy
611,2015-08-18 00:18:54,"Yeah actually, I agree with Huy.  The ascender / descender thing in ASLayoutable didn't sit perfectly with me.  I think the right abstraction is some form of verticalOffset / baselineOffset property.  verticalOffset is the most general, which is great especially for something that applies to ALL nodes and specs...not just text nodes, and not just stack specs.

verticalOffset does tempt a different direction, though, something like a UIEdgeInsets.  That would capture the ascender / descender model, and it could be layoutOffset or something.

Interested in your thoughts Ricky — is there a compelling case for ascender and descender separately?  I know you're a Swift fan; it would be nice to have protocol extensions to support ASLayoutable evolving into more domain-specific areas without too much pollution of the common protocol.

A key reason to avoid putting too much stuff into it is that engineers new to the framework will often balk / fail to understand the abstraction if it has a ton of stuff, which is already a problem with ASLayoutable considering the stack-specific elements.  @nguyenhuy let us know if you have any ideas for how this could be improved (even if you can't do the change), because we only have about a month before we can't easily change it.
",appleguy,nguyenhuy
610,2015-08-13 18:00:02,"@appleguy In reference to issue #606 

This modifies the ASTextNodeRenderer to set `_calculatedSize` to `CGSizeZero` when the attributedString is either nil or an empty string

I've also added test coverage for these expectations :sunglasses: 

I thought this was the most logical place, but if you think it belongs else where please let me know!
",SRandazzo,appleguy
590,2015-07-31 05:02:46,"Thanks @rcancro !  This is indeed very useful, and now quite essential in the world of ASLayoutSpec. @nguyenhuy to also review and consider — I think it is likely that we should push this down to ASDisplayNode, next to the flexBasis and other properties.
",appleguy,nguyenhuy
587,2015-07-26 15:53:03,"I've been thinking about this since adding the completion handlers for reloadData and endUpdates and #581 by @frankenthumb got me thinking about it more. The essential issue is that, without these completion handlers, there is no guarantee that the UITableView's data is in sync with the asyncDataSource. You can handle some things by always relying on ASTableView (or ASCollectionView) as the source of truth for your data, but sometimes you just need them to be in sync. (My #1 use case is positioning to a specific row after reload.)

I've been thinking it might be simpler and more elegant to introduce a new method that solves this problem more generally. One that basically says ""run this block when all changes up to this point have been committed."" Technically, that's what these completion blocks are, but they are only available for these two methods currently.

I've been struggling with what this method sholud be called, but let's say we call it `-(void)syncEditsWithCompletion:(void (^)())completion;`. This would call _completion_ on the main thread as soon as all currently scheduled updates (which should include reloadData begin/endUpdates or any of the editing commands) have completed and before any others have been initiated.

@appleguy I'm thinking we can just schedule this completion on the editingTransationQueue to accomplish this easily. That would work, right? I'm also wondering exactly how reloadData works W.R.T. the editingTransactionQueue and if that approach would work with that.

Would love some feedback on this idea.
",eanagel,appleguy
587,2015-09-06 19:20:29,"I've been thinking about #638 for the last few days and eventually came up with an idea similar to this one. So thanks @eanagel, @levi and @connor for bringing this up.

Regarding the implementation of this new method, I suspect that it would look similar to (if not exactly like) what I've done in -relayoutAllRows [here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/Details/ASDataController.mm#L562), of course, with a parameterized block. Once we have that new method, -relayoutAllRows will simply call it with its own block.

With that, I guess the main issue left is the naming (assuming there is no objection against this new method).
",nguyenhuy,levi
585,2015-07-26 04:49:50,"Cherry picks from master to an extension of the 1.2.2 branch.

This is primarily to exclude the new ASLayoutSpec-based layout system (aka box model).

Huge thanks to @eanagel for both authoring the majority of commits in this release, as well as preparing the release branch!
",appleguy,eanagel
576,2015-07-25 20:51:27,"@eanagel has been working in this code with me.  We're about to publish 1.2.3, either today or tomorrow, which may resolve your issue; it does have an animated: property on the batch update call.
",appleguy,eanagel
574,2015-07-18 21:15:20,"@tuantavan thanks for reporting this.  I read your report a few times, but am not completely certain the scenario / symptoms you are describing.  Would you be able to try describing it again, perhaps including 2 or 3 screenshots (or much better yet — a screen capture video, which QuickTime X can do for free with the simulator)?

We are currently working on this area, as you can see with the open pull request from @eanagel there is some work to build in better support for adjusting scroll position when changing the data source.  You may need to use the endUpdatesAnimated:completion: method he added.  The completion is necessary for your case, because even after you do an insert or a reload, there is a short asynchronous delay before you can do the scrolling command; otherwise the cell will not have been asynchronously sized and added to the table.  This is very likely at the root of your issue.

I'll work hard to make sure that what you would like to do is as easy as possible, if you're able to provide more descriptive detail.  Of course, a test case that allows reproducing the problem in isolation is the best way to get this fixed quickly.

One side tip: messaging apps often find it useful to flip the table / collection view upside down (transform the entire thing), and then flip each of the cells upside down (also transform them) so the content still shows right-side-up.  What this accomplishes is more efficient loading and an easier time staying at the ""bottom"" / most current messages (assuming they get added at the bottom as new messages come in, and you usually want the focus to stay there).  I'm not totally sure, but I think this is how @nguyenhuy 's project (AsyncMessagesViewController — ASDK based messaging) is implemented.
",appleguy,nguyenhuy
574,2015-07-18 21:15:20,"@tuantavan thanks for reporting this.  I read your report a few times, but am not completely certain the scenario / symptoms you are describing.  Would you be able to try describing it again, perhaps including 2 or 3 screenshots (or much better yet — a screen capture video, which QuickTime X can do for free with the simulator)?

We are currently working on this area, as you can see with the open pull request from @eanagel there is some work to build in better support for adjusting scroll position when changing the data source.  You may need to use the endUpdatesAnimated:completion: method he added.  The completion is necessary for your case, because even after you do an insert or a reload, there is a short asynchronous delay before you can do the scrolling command; otherwise the cell will not have been asynchronously sized and added to the table.  This is very likely at the root of your issue.

I'll work hard to make sure that what you would like to do is as easy as possible, if you're able to provide more descriptive detail.  Of course, a test case that allows reproducing the problem in isolation is the best way to get this fixed quickly.

One side tip: messaging apps often find it useful to flip the table / collection view upside down (transform the entire thing), and then flip each of the cells upside down (also transform them) so the content still shows right-side-up.  What this accomplishes is more efficient loading and an easier time staying at the ""bottom"" / most current messages (assuming they get added at the bottom as new messages come in, and you usually want the focus to stay there).  I'm not totally sure, but I think this is how @nguyenhuy 's project (AsyncMessagesViewController — ASDK based messaging) is implemented.
",appleguy,eanagel
574,2015-07-21 05:55:28,"@nguyenhuy Thanks for your comments. For now, we fixed the problem by applying #564 fix of @eanagel, then manually maintain the contentOffset of ASCollectionView. 

Hope that @eanagel fixes (#575) pass all test cases and merged to the next release.
",AgeOfMobile,eanagel
574,2015-07-21 07:23:46,"Finally, we fixed this problem by applying #564 , #575 .
@appleguy, @nguyenhuy , @eanagel , @AgeOfMobile : Thanks a lot for your helping!
",tuantavan,eanagel
571,2015-12-19 04:04:27,"Hmm, this is a good bug.  We just fixed some attribute handling in ASTextNode, but if I'm understanding the test project correctly, this one is still not fixed.  Sorry about that guys — I'm not sure what's going on yet, especially since Paper and Instant Articles both clearly use non-default link colors and most certainly uses ASTextNode.

@mmiedlarz just want to say again how much I appreciate you uploading the test project.  It is very helpful to getting something like this fixed.  I'm sorry there's been a long delay on this, but as you can see there has been a lot of activity on the project with really big efforts, like adopting a big update to the text rendering engine and important internal capabilities like .interfaceState and .hierarchyState.  We are now starting to get to issues like this.

@samhsiung - I don't expect you to spend a lot of time looking at this, but since you recently figured out some really quite tricky issues with ASTextNode and attribute handling, do you think this bug might stand out to you?  There is definitely special handling of NSLinkAttributeName in the code, and that's probably to blame, considering that removing that attribute from the sample code provided causes the color to come through correctly.
",appleguy,samhsiung
563,2015-08-09 02:51:08,"@yxztj Just wanted to say that I saw this issue when you submitted it, and still intend to fix.  Sorry for the delay.  The placeholder fade-out feature was added by @rnystrom a while back, and hasn't gotten a lot of usage / testing yet.  That's not a good reason for it to have bugs, but suffice it to say that there are a few cool ways we could improve both the API and the implementation.

Right now I'm working on the display system, which is closely related to how placeholders are shown and removed.  Because it is still possible for a client to implement their own placeholder mechanics, I will have to prioritize this after the other display work, but it may well be possible to fix at the same time.

Thanks for trying out the framework, and let us know if you have any other issues or questions!
",appleguy,rnystrom
556,2015-07-10 13:13:30,"Follow-up issue after #468:

There are some places (e.g: ASStackLayoutSpec) where an array is created and passed to a method, just to be unpacked into a C++ structure (i.e: std::vector). This trick is used to bridge between the (pure Objective-C) public API and the (C++ heavy) internal implementation.

As @appleguy suggested, perhaps we should provide an internal API for those areas to use a fast-path.
",nguyenhuy,appleguy
550,2015-07-24 17:20:40,"Something is really messed up with travis!  @eanagel I wonder if It could be any changes we made to the tests?

Restarting the build.
",appleguy,eanagel
548,2015-07-09 07:19:30,"This PR adds a new property for ASTableView (automaticallyAdjustsContentOffset) that, when enabled, will adjust the contentOffset for inserts and deletes before the visible viewport so the users view is maintained. In order to use this effectively, animations must be disabled while performing updates. To facilitate this an option has been added to endUpdates (and also a completion handler that has many uses.) Because this only works well with animations are disabled and it may require some thought to use effectively, it defaults to off.

You can see this in action with a simple demo app at: https://github.com/eanagel/ASDKVirtualizationDemo

There is a performance trade-off for this feature that I'd like anyone to weigh in on. In order to make this work, we need to know the heights of the nodes being inserted or deleted. (well we actually only need to know the heights of the ones before the visible cells.) I've extended our delegates to pass that information own to the ASTableView, but if it's not used it is a waste. These data is pretty easily available for inserting nodes, but in the case of deleting nodes, there is the additional overhead of capturing the deleted items and passing them down. There are alternative approaches I'm sure we could work out of this seems like it could be a big performance hit.

Additionally, this includes a **speculative** fix for a problem where ASDataController appears to be calling it's endUpdates delegate method before the didInsert/Delete delegate methods. The fix included here works for my tests but it does **not** pass the ASTableViewStressTest, so there may be more to the story here. I bow to @appleguy's wisdom on this one. See issue #564 for more details.

I think this handles the common cases for virtualization, but there's more that could be added to it to make it even more robust. Right now, it doesn't handle insertion/deletion of sections and you must explicitly disable animations in endUpdate to make it work correctly. If we wanted to make things more automatic we could separate the items that would be inserted before the visual window and make those insertions/deletions without animations (in a separate begin/end update block) and then follow up with any other updates in an animated fashion. It's considerably more work, but that would make this an ""it just works"" feature which I like ;)

Attempts to resolve issue #564, which must work correctly for this code to function.
",eanagel,appleguy
546,2015-11-29 20:28:02,"Thanks @appleguy!
Cc @paulyoung 
",nickvelloff,paulyoung
546,2015-11-30 11:28:01,"The only warnings I'm currently aware of are:
- for `AsyncDisplayKit.xcodeproj` to update to recommended settings
- a warning related to the C++ ""header pollution"" issue described in https://github.com/facebook/AsyncDisplayKit/pull/632#issuecomment-140858968 which @appleguy let @rcancro know about

This is using an older release of AsyncDisplayKit, so these may have been addressed since then.

I'll try updating and report back soon.
",paulyoung,rcancro
537,2015-10-07 11:38:02,"> More generally, how do you make the ASTableView re-render and update the visible rows? ( I tried measure: but that didn't work either).

The cheapest way would be to [reload](https://github.com/facebook/AsyncDisplayKit/blob/c8518c7fa6304f99db84b5480afce8f0b6ddb66e/AsyncDisplayKit/ASTableView.h#L207) the specific cell. But I would advise reading [this](https://github.com/facebook/AsyncDisplayKit/issues/600#issuecomment-129499491) from @nguyenhuy. 
",RuiAAPeres,nguyenhuy
536,2015-07-07 17:24:21,"@nguyenhuy is going to investigate this within the next couple weeks
",appleguy,nguyenhuy
535,2015-06-30 17:02:26,"This helps work around a bug we are seeing in some rare cases (selected background view overlaps other cells if size of ASCellNode has changed.)

There is an edge case I ignored for this PR - if you set ASCellNode clipsToBounds while the cell is currently visible it will not propagate to the Cell until it is next displayed. (Just because it doesn't seem worth the added complexity.)

@appleguy I've tested this with my ADKFlicker test and my internal project and it masks the issue in both cases.
",eanagel,appleguy
530,2015-06-29 20:57:06,"First want to say thanks for this great library, have been getting familiar and am loving it.

I've seen there has been a lot of work recently on ASTableView, specifically stress testing to address some known issues, so this may not be valid. If you can point me towards a commit i'd love to see if that resolves my issue, which is as follows:

At random intervals, I am experiencing a deadlock in `ASFlowLayoutController.mm`, line 191, in the `while` loop. I can pause to catch the loop and step through, but it looks like the condition is just never being met. 

I've posted two screenshots of where i caught this infinite loop, as well as the values of startIter and endIter. 

I am doing some rapid updates to the tableview, calling reloadData, or reloadItemAtIndexPath frequently

![screen shot 2015-06-29 at 4 55 03 pm](https://cloud.githubusercontent.com/assets/307819/8418239/d57fb458-1e7f-11e5-90ee-381841b2d38f.png)
![screen shot 2015-06-29 at 4 55 42 pm](https://cloud.githubusercontent.com/assets/307819/8418242/d7ed1ce4-1e7f-11e5-8752-81928c72c6b6.png)

Thanks Facebook + @appleguy !
",SRandazzo,appleguy
530,2015-07-02 05:21:38,"@SRandazzo Yes, this is a known issue and is a P0 / top priority for myself and a couple others.  I'm gunning to get through the work-week so I can finalize a fix to this issue on the weekend, if folks like @RCacheaux aren't able to fix it before I have the opportunity.  This is in fact the only thing holding up landing my other PR that overhauls ASDataController and substantially improves its robustness, such that it passes the rather rigorous ASTableViewStressTest :).

If you have any chance to debug this and submit a patch, go wild!  Not to worry, though, I hope to have a fix up by the end of Saturday.
",appleguy,RCacheaux
521,2015-06-27 07:15:30,"(Note: this is the same PR as #513, which I've closed - I wanted to issue this PR from a different fork, and don't know of a more elegant way to do it).

@appleguy: thanks for the review. I'm not 100% sure of things here, since I'm not insanely experienced working with the responder chain, but here are my thoughts so far regarding your questions:
- layer-backed/rasterized nodes shouldn't ever care about becoming first responder, as this only really pertains to `UIView` hierarchies. To be more explicit about this, I now check if a node is `layerBacked` when calling `becomeFirstResponder`/`resignFirstResponder` and immediately return `NO` if so.
- I'm not really sure how to measure the performance degradation you're worried about. I don't know how UIKit keeps track of what views can become the first responder - presumably it tracks some kind of internal state on each view in the hierarchy to avoid having to recompute the first responder every time it's handling a touch event. That feels pretty lightweight in concept to me, but I suppose you could probably devise a worst-case scenario that might require traversing a lot of views when adding/removing children. Honestly, I'd be surprised if the responder chain was really a performance bottleneck when dealing with complex view hierarchies, but  ¯\_(ツ)_/¯
- My intended use case is actually the same as #11 - I'd like to allow long-pressing on an `ASTextNode` subclass in order to show a `UIMenuController` and copy its contents. I'm currently doing this is in the app I'm working on (pointing at my branch of ASDK) and it's working well. Also, not sure if this really counts as a use case, but I've also updated `ASEditableTextNode` to implement these methods properly and it feels sane to me.
- I've added a couple of simple unit tests. They mostly just test that the default/subclassed/`layerBacked` behavior works as intended.

Ultimately, given that the changes here require opting-in via subclassing anyway, I'm in favor of merging early and waiting to see if anyone actually encounters any performance issues in practice, but I'm obviously a bit biased : )
",jflinter,appleguy
514,2015-06-25 21:36:44,"This is a candidate fix for the race condition @appleguy tracked down in #458. This version uses the single pending `NSIndexPath` approach but adds code to validate that the pending index path is always contiguous with respect to `UITableView`'s `indexPathsForVisibleNodes`. (I had previously discovered that the approach of tracking all visible nodes using willDisplay/didEndDisplaying is flawed because `UITableView` doesn't always call didEndDisplaying. Boo. See #427)

In order to do this we may make up to two calls to `-[ASDataController  numberOfRowsInSection:]` but this _only_ happens when we have a pending index that is not part of the existing visible range (a rare but important edge case.) From what I've seen this happens pretty rarely and should not impact overall system performance.

I took great pains to validate the logic for the `isAfter(...)` method, so I think we are in good shape there. (It even covers odd situations like sections with no rows.) One caveat, if the pending value is an invalid `NSIndexPath` for our dataSource for some reason, weird things can happen. If we need to cover this edge case as well it can be done, but it would require additional calls to `ASDataController` to validate it.
",eanagel,appleguy
512,2015-07-07 17:27:43,"Thanks for reporting this!  We will use this as an example case to improve with the ""relayout"" work that @nguyenhuy is working on for AsyncDisplayKit 2.0.  The current master branch is now ""2.0 Beta"" because it includes his extensive changes to the layout system, which will significantly help us deal with this situation.

That said, this is an area where AsyncDisplayKit 1.x requires some manual work from the programmer to set -invalidateCalculatedSize and perform a new -measure / -layoutIfNeeded pass.  One reason is that the relayout could either be done synchronously or asynchronously, and the original framework didn't make an assumption about what is best for all apps when the frame changes (so this behavior forces the app developer to explicitly implement the desired behavior — after calling -invalidate, you can either call -measure on the main thread to block synchronously, or you can call it on a background queue to prepare the new layout asynchronously).
",appleguy,nguyenhuy
512,2015-09-16 12:37:59,"@jaichaudhry thanks for reporting this with all the details :).  @nguyenhuy has finished a lot of work here, and the Kittens example now does relayout both on rotation and on tapping cells.  Please retry your use cases, and please do open a new issue if you experience any problems!
",appleguy,nguyenhuy
488,2015-06-18 20:17:59,"Thanks @victormayorov for finding an issue in this code.  Here's a refactoring that reads more cleanly.  Does it still look correct?
",appleguy,victormayorov
487,2015-06-18 09:30:01,"Yes, currently updating methods don't have callback. I agree that having a completion callback would be very useful. @appleguy may have a better opinion about whether or not supporting this feature is a good idea.

For the time being, I guess a possible workaround is to use [`-performBatchUpdates:`](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASCollectionView.mm#L286), which does accept a completion block. There may be runtime overhead, but it should not be significant.
",nguyenhuy,appleguy
473,2015-06-07 02:27:12,"@eanagel may have a chance to look at this.

https://github.com/facebook/AsyncDisplayKit/pull/439
",appleguy,eanagel
465,2015-06-07 23:56:34,"@mvasiliniuc, thanks for the detailed report — it really helps.  @markmark1 I also appreciate your confirmation, and apologize for the trouble.

I believe @rnystrom was the most recent committer to this code, and I'm not currently familiar with the implementation here.  If Ryan is unable to, I'll prioritize investigating this.
",appleguy,rnystrom
458,2015-06-22 00:07:51,"@eanagel as it turns out, this can cause a very severe wedging of ASLayoutController...it's possible for the pending index to be disjoint from the other indices in a way that makes for an unsolvable set of constraints for the flow layout controller, which causes it to live-lock and burn as much memory and CPU as is available :(.

Do you have a reproduction case for the original issue?  I do fortunately have a reproduction case for the live-lock issue.

Here's some example output alongside the screenshot:

(lldb) p _scrollDirection
(ASScrollDirection) $0 = 4
(lldb) po visibleNodePaths
<__NSArrayI 0x7fc1c2f9a2d0>(
<NSIndexPath: 0xc000000000220056> {length = 2, path = 1 - 68},
<NSIndexPath: 0xc000000000228056> {length = 2, path = 1 - 69},
<NSIndexPath: 0xc000000000230056> {length = 2, path = 1 - 70},
<NSIndexPath: 0xc000000000038116> {length = 2, path = 4 - 7}
)

(lldb) po _delegate
<ASTableView: 0x7fc1ba815c00; baseClass = UITableView; frame = (0 0; 100 500); clipsToBounds = YES; gestureRecognizers = <NSArray: 0x7fc1b9632dc0>; layer = <CALayer: 0x7fc1b962fe70>; contentOffset: {0, 36343}; contentSize: {100, 172800}>

(lldb) po [_delegate indexPathsForVisibleRows]
<__NSArrayM 0x7fc1bb16a380>(
<NSIndexPath: 0xc000000000220056> {length = 2, path = 1 - 68},
<NSIndexPath: 0xc000000000228056> {length = 2, path = 1 - 69},
<NSIndexPath: 0xc000000000230056> {length = 2, path = 1 - 70}
)

![screen shot 2015-06-21 at 4 56 55 pm](https://cloud.githubusercontent.com/assets/565251/8273962/0ad7ef7e-1838-11e5-8a8b-56bc64abc1db.png)
",appleguy,eanagel
449,2015-05-14 08:51:54,"@secretiverhyme, any concerns for how this could affect the Facebook build systems?  I'll let you make the call on merging here.
",appleguy,secretiverhyme
432,2015-05-17 08:19:44,"@tonklon thanks for both the implementation and the tests!  My apologies for the delayed merge; should be more prompt from here out.

@ocrickard, do your improvements to the text stack in CK happen to include exclusionPaths?  If not, perhaps you can apply this there to ensure we don't lose the functionality if the code is shared.
",appleguy,ocrickard
414,2016-04-27 23:43:03,"@ReizSoon @appleguy This issue should be already fixed with one of the latest versions. Furthermore if you overwrite the touch method on a custom ASCellNode there is now a warning to call super.

@appleguy I think we can close that
",maicki,appleguy
409,2015-04-08 23:41:42,"Oh wow, this is a really interesting find. Let me do a little profiling w/ this as well. There shouldn't be any significant side effects. I'll pull @secretiverhyme into the discussion as well. Thank you!
",rnystrom,secretiverhyme
407,2015-05-04 02:26:09,"Sorry for the delay!  @rnystrom, do you know this code best?  If not I'll take a look as soon as I can.
",appleguy,rnystrom
394,2015-05-17 08:31:35,"@tberman Thanks for filing this task!  We just merged @tonklon's diff to address this.  Wish we got to it sooner, but I expect it will be useful to others with advanced text needs as well.
",appleguy,tonklon
375,2015-03-12 21:10:34,"Hm.  The `tint` property is of type ASImageNodeTint and can be either `.Normal` or `.Greyscale`.  There's a new image modification block, `ASImageNodeTintColorModificationBlock()` — it was added by @andyscott in #283, and an argument could be made that we should delete the `tint` property in favour of it.

I think this is actually a reasonable justification to support image modification blocks on stretchable images, beyond simply maintaining consistency.  Deleting the `tint` option would further simplify this code path.  Thoughts?
",secretiverhyme,andyscott
371,2015-03-11 23:48:02,"Also making a note from @appleguy that thrashing a `UIWindow` like this will likely incur some wasted processing on the main thread. Something we should be aware of and fix soon.
",rnystrom,appleguy
369,2015-03-10 18:55:52,"I've run into a problem using ASCollectionView which is similar to what @ryanfitz describes here: https://github.com/facebook/AsyncDisplayKit/issues/344#issuecomment-77764729 and is probably a bug.

When you attempt to combine one of the update methods with another one the app will crash. ASDataController will call dataControllerLockDataSource from performDataFetchingWithBlock: on its data source for each group of changes (so once for deleteItemsAtIndexPaths:, once for insertItemsAtIndexPaths: and once for reloadItemsAtIndexPaths:). After the first call the datasource is already locked which will result in a crash on the second call because of the Assert in dataControllerLockDataSource in ASCollectionView.

I'm assuming this is not intended behavior. To solve this I've added a lock counter to ASCollectionView which gets incremented in dataControllerLockDataSource and only locks asyncDataSource on the first call. The counter gets decremented in dataControllerUnlockDataSource and unlocks asyncDataSource when the counter reaches zero.

I can create a PR if you guys think this is a good way to fix this.

EDIT: Just realized that in my solution it would probably make a lot more sense to add the counter to ASDataController.
",smeis,ryanfitz
364,2015-03-09 19:18:29,"In ASNetworkImageNode:



The following race condition exists:
1.  image node enters fetching range, this `dispatch_async()` is triggered
2.  image node exits fetching range, `_cancelImageDownload` is synchronously executed
3.  this asynchronous block executes and image downloading continues

Let's move this dispatch out of the image node and into ASBasicImageDownloader, and let the downloader object be responsible for cancelling not-yet-executed download blocks.  We should probably also update the `ASImageDownloaderProtocol` docblock to require that implementations not block the main thread — we shouldn't work around this in individual nodes.  h/t @appleguy
",secretiverhyme,appleguy
362,2015-03-11 20:40:55,"> If you are on master, you can increase the working range so that the image can be downloaded much earlier. (See - [ASTableView setTuningParameters:forRangeType:])

Working ranges have been configurable since AsyncDisplayKit 1.0 via the `rangeTuningParameters` property, so you actually don't need to be on master to increase the range's size.  The API @lxcid mentioned will be released in ASDK 1.2 because we're now differentiating between ""rendering"" and ""network"" ranges — you can, e.g. enable 1-screenful render-ahead but 3-screenful download-ahead.

> ASDK does not provide a caching support for image but does provide hooks for caching to be supported through 3rd party implementation.

Note that if you're using the default downloader, your requests are cached — ASBasicImageDownloader uses NSURLSession, which uses your app's shared NSURLCache.  `[[ASNetworkImageNode alloc] init]` should Just Work™ out of the box; if you require a more flexible or explicit cacheing strategy, you can easily implement your own.  @ide's [WebASDKImageManager](https://github.com/ide/WebASDKImageManager) may also be worth a look.
",secretiverhyme,ide
359,2015-03-07 22:39:00,"(cc @rnystrom — this would be a good thing to write a unit test for)
",secretiverhyme,rnystrom
347,2015-06-23 04:58:52,"Hey, great to have you in the community @lappp9!  Would love to help however I can.
1. Embarrassing, but I'm actually not sure how the linter is set up for ASDK if we have one.  If there's an oclint configuration in the project, run it!  I haven't been doing this on my changes, lol.
2. I wouldn't worry about updating the docs as a blocker for this, but yes, if you can update the gh-pages branch with any relevant information then that would be really cool.  There are also generated doc pages (accessible from some links on asyncdisplaykit.org) but those are created by running a script on the codebase, scraped from the specific comment format that we use in header files.  We are due to re-generate them now, actually (although it's possible @secretiverhyme set up a magical automatic updating script :) )
3. Yes, just submit a pull request that diffs between your forked project's branch and the facebook/AsyncDisplayKit master branch.
",appleguy,secretiverhyme
346,2015-03-01 23:02:56,"cc @tanliboy
",secretiverhyme,tanliboy
344,2015-03-01 22:49:53,"ASTableView's `-beginUpdates` and `-endUpdates` are available in master and will be included in the upcoming 1.2 release.  You can try it out now by pointing your Podfile at the GitHub repository directly.

Cell reloads aren't as expensive as a full `-reloadData` call, but they're not yet optimised and there may be a better way to achieve what you're trying to do.  You're likely seeing flickering because the new nodes come onscreen before they're fully rendered -- this can be avoided with a few cumbersome workarounds, but we're hoping to solve this more elegantly directly in ASTableView.

Have you considered using updates (delete & insert rows) instead of reloads?  We strongly recommend using updates where possible for a number of reasons.  @toulouse's [BKDeltaCalculator](https://github.com/Basket/BKDeltaCalculator) might be helpful if you're not sure how to start.

cc @tanliboy
",secretiverhyme,tanliboy
344,2015-03-01 22:49:53,"ASTableView's `-beginUpdates` and `-endUpdates` are available in master and will be included in the upcoming 1.2 release.  You can try it out now by pointing your Podfile at the GitHub repository directly.

Cell reloads aren't as expensive as a full `-reloadData` call, but they're not yet optimised and there may be a better way to achieve what you're trying to do.  You're likely seeing flickering because the new nodes come onscreen before they're fully rendered -- this can be avoided with a few cumbersome workarounds, but we're hoping to solve this more elegantly directly in ASTableView.

Have you considered using updates (delete & insert rows) instead of reloads?  We strongly recommend using updates where possible for a number of reasons.  @toulouse's [BKDeltaCalculator](https://github.com/Basket/BKDeltaCalculator) might be helpful if you're not sure how to start.

cc @tanliboy
",secretiverhyme,toulouse
341,2015-03-02 20:45:59,"@rnystrom, while we're at it, can we revisit the `-[ASBatchContext completeBatchFetching:]` API?  Passing `NO` is a no-op, and the presence of `-[ASBatchContext cancelBatchFetching]` makes the argument seem superfluous.
",secretiverhyme,rnystrom
341,2016-02-07 03:35:16,"@lxcid I just confirmed that this is still happening. Disappointed that it took a year to fix this bug, but at least I can say with confidence that the framework development has been focused on some really big things in the meantime. It is now absolutely time to clean up and improve the batch fetching APIs though. This will be fixed in the next release.

@maicki, this change reproduces the issue. If the user initiates a drag, even though it will rubber band back into place, that will trigger the load. I think that is why this issue has not been widely reported. Probably the right thing to do is to use a new Hook from the ranch controller to check whether a batch fetch needs to be triggered, because the range controller runs its update pass in a variety of situations including edit operations and the appearance or disappearance of cells.

-static const NSInteger kLitterSize = 20;            // intial number of kitten cells in ASTableView
+static const NSInteger kLitterSize = 1;            // intial number of kitten cells in ASTableView
",appleguy,maicki
341,2016-04-20 02:51:44,"@maicki: thanks for fixing this long standing issue. @lxcid - Sorry this took so long to get around too. I hope you are still using ASDK. Let us know if we can help you out with any more issues. 
",appleguy,maicki
338,2015-02-26 04:52:13,"cc @tanliboy, @rnystrom, #303.

The data source locking methods are supposed to be called even when async data fetching is disabled, which is why @tanliboy wanted to make them a required part of the async data source protocol.  If that's not the case, then we have a bug on our hands.

More generally, I think it would be worth revisiting this API before 1.2 ships.  On the one hand, these lock/unlock methods are necessary if you want to avoid expensive work happening on the main thread, and because AsyncDisplayKit is all about unblocking the main thread, this feature is clearly necessary.  On the other, it's not immediately obvious what the advantages and disadvantages of enabling ""async data fetching"" are, and we could expand on how the data source locking methods work.
",secretiverhyme,rnystrom
338,2015-02-26 04:52:13,"cc @tanliboy, @rnystrom, #303.

The data source locking methods are supposed to be called even when async data fetching is disabled, which is why @tanliboy wanted to make them a required part of the async data source protocol.  If that's not the case, then we have a bug on our hands.

More generally, I think it would be worth revisiting this API before 1.2 ships.  On the one hand, these lock/unlock methods are necessary if you want to avoid expensive work happening on the main thread, and because AsyncDisplayKit is all about unblocking the main thread, this feature is clearly necessary.  On the other, it's not immediately obvious what the advantages and disadvantages of enabling ""async data fetching"" are, and we could expand on how the data source locking methods work.
",secretiverhyme,tanliboy
338,2015-02-26 06:01:12,"Also, I asynchronously load new data myself in large batches (as the API loads lists based on numerical ranges rather than per-element object ids); using a percentage of the scroll position is easy enough to understand, but it's unclear how the intelligent network preloading range described in @appleguy 's presentations is related to this API.
",cfcommando,appleguy
333,2015-02-25 02:00:14,"@tanliboy wanted these methods to be required even when people don't opt into asynchronous data fetching, as a safety measure.
",secretiverhyme,tanliboy
332,2015-03-02 18:28:18,"There are no uses of `-tableViewLockDataSource:` or its counterpart in the example projects, no tests covering it, and the provided test target in ASDK contains the above warnings.

There are 12 warnings in my project, two of which are unavoidable limitations of CocoaPods; these are the other ten, and I'd prefer not to use empty implementations before I understand their proper usage.

@tanliboy - Can we _please_ have a concrete example of how these methods are intended to be implemented? Or can we make them optional until there is documentation explaining how they should be implemented?

Thanks.
",cfcommando,tanliboy
330,2016-02-07 02:29:36,"@cfcommando sorry this is taking so long; fortunately, in nearly all use cases, the object will have its targets and actions added during the initialization process (always single-threaded). It is incredibly rare to see concurrent access to target / action information in a real application, as they do not frequently change and only the main thread triggers the events.

However, this is not a good reason to leave out locking in this class, especially because it is a core component of the framework. We will make sure it is added soon

@maicki since you are familiar with this code from recent work, could you add a MutexLocker similar to how they are used in classes like the text, image, and display nodes?
",appleguy,maicki
327,2015-02-24 19:12:20,"Thanks for the report!  cc @ocrickard
",secretiverhyme,ocrickard
312,2015-02-25 01:17:48,"@secretiverhyme thanks so much for the feedback! Really really good catches. I rebased on master (woof) and made some updates in a separate commit.
",rnystrom,secretiverhyme
312,2015-02-25 20:24:19,"@jeroenleenarts awesome thanks! I'll look into this. @secretiverhyme I probably need to update this PR if this is the case and figure out an elegant solution that doesn't thrash the API call when dealing with small data sets or rows.
",rnystrom,secretiverhyme
306,2015-11-02 20:10:33,"@appleguy Woohoo 2.1 milestone! This is definitely one the top of my wish list. Let me know if you need any testing/feedback help.
",aaronschubert0,appleguy
306,2016-03-12 09:26:08,"@appleguy Was thinking we should close older issues just yesterday! You & @levi will be happy to know, we're using ASPagerNode extensively already :)
",aaronschubert0,levi
302,2015-02-10 00:38:50,"Reverts facebook/AsyncDisplayKit#228 (cc @andyscott) — it introduced a bug where, if the best image identifier is unavailable (e.g., 404 error), ASMultiplexImageNode infinite-loops in an attempt to load it.
",secretiverhyme,andyscott
301,2015-02-10 00:45:48,"Not yet, unfortunately, though this is something we'd like to add!  ASTableView only sizes cell nodes once and bypasses the standard ""height for row at index path"" UITableView machinery.  We'd like to build full-featured async resize support, which will likely require new subclass hooks on ASDisplayNode itself (see also #214; cc @rnystrom and @tanliboy).
",secretiverhyme,rnystrom
301,2015-02-10 00:45:48,"Not yet, unfortunately, though this is something we'd like to add!  ASTableView only sizes cell nodes once and bypasses the standard ""height for row at index path"" UITableView machinery.  We'd like to build full-featured async resize support, which will likely require new subclass hooks on ASDisplayNode itself (see also #214; cc @rnystrom and @tanliboy).
",secretiverhyme,tanliboy
297,2015-02-09 03:13:49,"@blessingLopes: @tanliboy might be better suited to answer this but i'll give it a shot:

When `ASCollectionView` begins to load your cells, it loads many `ASCellNode` objects at once and sizes them (I don't believe the process of allocating each is asynchronous and by this I mean each cell is allocated sequentially, but the layout and rendering is, someone can correct me on this!).  This means you'll see your `nodeForItemAtIndexPath` called consecutively until it reaches the end (does it still do this post-batch updating merge @tanliboy or is it only working range cells that get allocated now?).  Meaning if you're doing any image decoding (e.g. calling `UIImage(named: dataSource[indexPath.item])`)  in this call or in your `ASCellNode` subclass `init` method then it must wait to decode said images until it can continue and begin showing your table.  

Not only that, since `ASCellNode` is not reused, if you give the cell a strong reference to an image, it will live in memory until that cell is destroyed for some reason (like from a `reloadData` call).  This can bring a lot of memory pressure quick and In my experience caused an out-of-memory crash at some point once it begins to render many many images.

By moving your image decoding to a on-screen basis (and making sure to dump it from memory in either the exit hierarchy call or in an overridden `reclaimMemory` method) you cut all of that processing required to allocate and size each cell, so it can get to the whole showing your table part faster.

Maybe's there's an even better solution to all of this, but I haven't had too much time to experiment other then using the `willEnter/didExitHierarchy` methods.  Perhaps `didLoad` could work also?
",kylehickinson,tanliboy
297,2015-02-09 04:06:59,"In general, if you're using ASNetworkImageNode or ASMultiplexImageNode, everything should Just Work(tm).  As to the 50-second slowdown on app launch... that's #288.

Unfortunately, in order to support edit/update methods on ASTableView and ASCollectionView, we had to make data loading thread-affined:  if you call `-insertSections:` on a background queue, nodes will be processed on that queue, but when UIKit initially renders ASTV and ASCV, it processes nodes on the main thread.  For now, you need to start out with an empty data source and then add all content (e.g., using `-insertSections:`) on a background queue to avoid blocking with large data sets.  This is clearly not great, but improving it is possible now that editing support has stabilised.  =]

@kylehickinson, here's a bit of context on `-willEnterHierarchy`/`-didExitHierarchy` and friends (cc @rnystrom, who's working on the changes described here in #285):

We originally built AsyncDisplayKit as a necessary first step before building [Paper](http://facebook.com/paper).  The Paper story strip isn't a UICollectionView and its working range isn't powered by ASRangeController.  Since it isn't a UIKit component and isn't based on view reuse, its working range directly corresponds to ""everything in the view hierarchy"" — Paper keeps many card nodes offscreen, and uses `-removeFromSuperview` to keep memory usage in check.  `-didExitHierarchy` was therefore the logical place to free up memory (images, text rendering objects, and the like).

Of course, this design doesn't work in apps that use standard UIKit components and navigation!  Even scrolling through an ASTableView or ASCollectionView is enough to trigger many `-willEnterHierarchy` and `-didExitHierarchy` calls as the cells are reused (NB: ASCellNodes are not reused, but their containing cells are).  So, we replaced `-willEnterHierarchy` with `-displayWillStart` and introduced `-reclaimMemory` in lieu of `-didExitHierarchy` (79e65342b1b1273130392d75867ded5d793a7074).

This works for nodes that implement custom drawing, as ASTextNode and ASImageNode do, but it's only a first step.  For the ASDK 1.2 release, we're changing these subclass hooks to something like this (method names not final):

**rendering range** — formerly ""working range"", most people won't need to use these:
- `-displayWillStart` — called as nodes enter the working range and first start rendering
- `-clearRendering` — called as nodes exit the rendering range and should clear their backing stores

**network range:**
- `-fetchRemoteContent` — the appropriate place for custom nodes to load data, e.g., downloading images from the network
- `-clearFetchedContent` — called as nodes exit the network range and should clear their fetched content

This should hopefully be clearer and offer more flexibility.  It'll be possible to tune the rendering and network ranges, and they'll differ by default.  This will let you, for example, keep a small number of fully-rendered decompressed JPEGs around (`layer.contents`) but store a larger number of downloaded compressed JPEGs (`.image`).
",secretiverhyme,rnystrom
285,2015-02-05 02:28:49,"Awesome!  ~~Some~~A bunch of thoughts:
- Let's preserve the default asymmetricity of ASRangeController ranges.  The idea is for the bulk of render-ahead to be ""stuff you're scrolling towards"" (the ""leading"" parameter), with just enough ""stuff you're scrolling away from"" (""trailing"") staying in memory for the experience to not be jarring when you change your scroll direction.  I'd suggest that the render range stay 2 leading/1 trailing and the preload range become 3 leading/2 trailing.
- Our range-related methods are starting to look a little unwieldy.  There's currently no explicit `-render` method, but when we add one, we'll have `-fetchExternalContent`/`-purgeFetchedContent` and `-render`/`-reclaimMemory` balanced range entry/exit methods.  Introducing an allocation range will further complicate the matter (`-load`/`-unload`?).
  
  What do you think about adopting a ""verb""/""clearVerb'sResult"" pattern for these methods?  For example, we could use something like `-fetchData`/`-clearFetchedData`, `-render`/`-clearRendering`, etc.  This would also make it clearer what you're supposed to clear where.
- `-recursivelyPurgeFetchedContent` in ASDisplayNode.mm:L1355 recursively reclaims memory, instead of purging content.  :)
- Let's not make `-fetchExternalContent` automatically recursive — just like UIView's `-layoutSubviews` and CALayer's `-display`, most methods on nodes only apply to the receiver.  (We might want to revisit this at some point, but let's favour consistent-but-confusing over confusingly-inconsistent.  :D)
- Can we update ASMultiplexImageNode using the new API, mirroring these changes to ASNetworkImageNode?
- In ASFlowLayoutController.mm:L36, let's explicitly set tuning parameters for the render and preload ranges using the ASLayoutRange enum values -- if someone re-orders the contents of that enum, this code will silently start doing the wrong thing.
- What do you think about renaming `ASLayoutRange` to `ASLayoutRangeType` and the methods to `...ForRangeType:(ASLayoutRangeType)rangeType`, so it's clearer that we're passing in an enum value and not, for example, an actual range?

cc @tanliboy for the AS{FlowLayout,Layout,Range}Controller changes.
",secretiverhyme,tanliboy
267,2015-01-27 18:49:38,"That'd be pretty cool. Any ideas on how you'd implement it.

Thoughts @secretiverhyme @ocrickard?
",rnystrom,secretiverhyme
267,2015-01-27 18:49:38,"That'd be pretty cool. Any ideas on how you'd implement it.

Thoughts @secretiverhyme @ocrickard?
",rnystrom,ocrickard
261,2015-01-27 19:12:39,"For records sake, here's a screenshot of the repro. Good find :)

![kitten](https://cloud.githubusercontent.com/assets/739696/5925012/648092a0-a615-11e4-8e68-a252837d9682.png)

cc @ocrickard.

edit: After looking into this, it seems this isn't a ""flip of a switch"" fix. Either there is an issue in the `NSLayoutManager` drawing stack or our truncation support is flaky.

FWIW, `NSLineBreakByTruncatingTail` seems to be working correctly. It's `Head/Middle` that are having issues.
",rnystrom,ocrickard
261,2016-02-07 02:19:35,"I confirmed this is still happening.  Attached a diff.

An easy workaround is to use NSParagraphStyle to set the .lineBreakMode.  Still, this bug is very strange.

@ocrickard, I'm not sure if there is a comparable API in component kit to directly set the truncation mode separate from the paragraph style, or if there are any other known bugs with truncation in the renderer, but please let me know if so!

[TruncationOverlap.txt](https://github.com/facebook/AsyncDisplayKit/files/120540/TruncationOverlap.txt)

![simulator screen shot feb 6 2016 6 19 10 pm](https://cloud.githubusercontent.com/assets/565251/12870528/2a3abdc6-ccfe-11e5-8754-fadba007976c.png)
![simulator screen shot feb 6 2016 6 18 21 pm](https://cloud.githubusercontent.com/assets/565251/12870529/2a5c2b3c-ccfe-11e5-97fe-a63e5753ab98.png)
",appleguy,ocrickard
255,2015-01-26 02:58:19,"Agreed — a camera extension to this node would be worth considering, thanks for the suggestion!

Subspecs are on our radar, possibly for version 1.3 of the framework.  (@rnystrom and I were chatting about splitting out AsyncDisplayKitCore for the low level machinery and various UI subspecs for images, text, etc., but we haven't yet reached the point where the benefits would outweigh the maintenance costs.)
",secretiverhyme,rnystrom
255,2016-03-31 04:48:45,"@lappp9 implemented this a few months ago, and it has gained new features and greater adoption ever since! There's a lot more to do with this component, but this task is done. I have filed a new issue in our regular task tracker to investigate binary size reductions and possible separation of a user interface component library to allow more selective inclusion of features.
",appleguy,lappp9
252,2015-01-25 22:45:09,"@kylehickinson is correct.  @tanliboy is working on adding support for explicit update batches — for now, you should simply call `-insertRowsAtIndexPaths:…` directly.
",secretiverhyme,tanliboy
252,2015-01-30 06:59:59,"cc @nolanw ^
",toulouse,nolanw
251,2015-01-25 22:43:24,"This is expected behaviour due to the way ASTableView and ASCollectionView work.  The `-reloadData` call on these classes is substantially more expensive than on the UIKit versions, since it must…
- reallocate all nodes in your data source
- run a new measurement pass on all nodes
- re-enqueue asynchronous display of nodes in the working range

As such, you should try to use update methods (insert sections, delete rows, &c.) whenever possible.

(ccing @tanliboy in case he'd like to chime in)
",secretiverhyme,tanliboy
250,2015-01-26 19:01:53,":laughing: that prefix

Should we be using the new initialization from #235?

@toulouse the gesture recognizer should be exposed through the `view` property here, which is a `UIScrollView`, right?
",rnystrom,toulouse
250,2015-02-02 19:03:51,"@toulouse — there's a simple answer to this.  Remember FBStoryNode?  It's just one example of many where a node hierarchy needs to contain a scroll view, and unless the UIScrollView is wrapped in a node, asynchronous layout will be interrupted for children of the scrollable region.

We addressed this in Paper by doing an initWithViewClass:.  We now have initWithViewBlock:, which is an improvement, but still—scrollable areas are such a fundamental part of iOS UI, that a scroll node fits right alongside ASControlNode, ASImageNode, ASTextNode, ASTableView, ASCollectionView...

Beyond the unambiguous utility (although it may not save a lot of work for developers, it is definitely going to be used and also does reduce client code while cleaning up style), it will also serve as an example for developers about how to wrap synchronous views.  It'll be referenced in my upcoming presentation as well as documentation as such an example, in fact.

That said, I appreciate you weighing in here and asking these legitimate questions as we are making API changes.  It is really great having more eyes on this.  In the future we might open FBScrollView, but we don't have time to clean it up or expose more functionality before implementing other key classes like ASPageNode.
",appleguy,toulouse
249,2015-01-24 20:01:10,"Fixes #239.  (Thanks @rnystrom!)
",secretiverhyme,rnystrom
243,2015-01-23 20:41:17,"Quoting @ocrickard in #152:

> It's trivial to add maximumNumberOfLines property on ASTextNode as-is. The ASTextNodeRenderer would just have to set it on the NSTextContainer. We're open to Pull-requests!

Infinite-width hacks will work, but this is the most proper solution that I'm aware of.  I don't see any reason not to expose `maximumNumberOfLines` on ASTextNode as well as any future ASLabelNode, if you feel like taking a stab at it!  =]
",secretiverhyme,ocrickard
243,2015-01-23 20:49:49,"I'll take a stab early next week.

On Friday, January 23, 2015, Nadine Salter notifications@github.com wrote:

> Quoting @ocrickard https://github.com/ocrickard in #152
> https://github.com/facebook/AsyncDisplayKit/issues/152:
> 
> It's trivial to add maximumNumberOfLines property on ASTextNode as-is. The
> ASTextNodeRenderer would just have to set it on the NSTextContainer. We're
> open to Pull-requests!
> 
> Infinite-width hacks will work, but this is the most proper solution that
> I'm aware of. I don't see any reason not to expose maximumNumberOfLines
> on ASTextNode as well as any future ASLabelNode, if you feel like taking a
> stab at it! =]
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/facebook/AsyncDisplayKit/issues/243#issuecomment-71261998
> .
",andyscott,ocrickard
236,2015-01-20 20:22:12,"Merging #211 broke the build (fixed in 7542f7ca17626bed2e0eabf53aeea73fea2cfdac) — looks like we're expecting UITableView-style update bracketing as opposed to UICollectionView-style update blocks.  @tanliboy, once you're back, please double-check to make sure this is doing the right thing!  =]
",secretiverhyme,tanliboy
235,2015-01-20 19:32:52,"Thanks for the pull request!

ASDisplayNode is intended to support synchronous wrapper nodes as first-class nodes — they should be indistinguishable from any other node with asynchronous display disabled.  So, instead of creating an additional wrapper-only node, we should fix these problems in the base node class.

It looks like this is more or less the same line of thought as #109 (which I haven't gotten to yet — sorry @aleclarson!).  @ide, if you'd like to hoist this functionality into the base node and add CALayer support, I'd be happy to merge it in and close both PRs.  =]
",secretiverhyme,aleclarson
234,2015-01-19 19:02:13,"This is a swift version of 'ASCollectionView' sample project that was contributed by @secretiverhyme back in November 18th 2014.
",DaniArnaout,secretiverhyme
231,2015-01-20 19:08:59,"@cxa and @aleclarson put up a couple of pull requests to fix this (#150, #151) but it looks like I never had a chance to manually merge them after the ASRangeController rewrite landed.  @rnystrom, want to grab this one?
",secretiverhyme,rnystrom
231,2015-01-20 19:08:59,"@cxa and @aleclarson put up a couple of pull requests to fix this (#150, #151) but it looks like I never had a chance to manually merge them after the ASRangeController rewrite landed.  @rnystrom, want to grab this one?
",secretiverhyme,aleclarson
229,2015-01-20 20:35:13,"I'm actually not sure off the top of my head whether there's an elegant way to handle intrinsically-sized UIViews in node hierarchies — synchronous nodes are mostly useful for things like wrapping UIScrollView or UITextView, where UIKit's functionality is desirable but layout can still be handled asynchronously.  @appleguy might have some thoughts here.
",secretiverhyme,appleguy
225,2015-01-21 00:57:28,"Another idea that came to mind would be to use two different nodes. Say you have two `ASTextNode`s: one as a placeholder that says ""See more..."" and another w/ the full content but with its alpha set to 0. When you tap the placeholder, in an animation block set its alpha to 0 while setting the full content's alpha to 1.

There's more work that would go into this, like positioning and such, but its an idea.

cc @secretiverhyme for any other thoughts
",rnystrom,secretiverhyme
225,2015-09-21 06:16:25,"@adly-holler Thanks for actively contributing to ASDK. You're awesome :+1: :cool: 

I tried to run your demo and it actually works. Based on your comment [here](https://github.com/adly-holler/AsyncDisplayKitGrowingTextCellDemo/blob/master/AsyncDisplayKitTableCellTextView/ViewController.m#L29), perhaps your question is: why calling `invalidateCalculatedLayout` doesn't cause a relayout. The answer is that `invalidateCalculatedLayout` simply marks the calculated layout of the node invalidated. It neither triggers a relayout nor propagates the invalidation to its supernode.

I was a bit surprised when [calling -setNeedsLayout on the cell node](https://github.com/adly-holler/AsyncDisplayKitGrowingTextCellDemo/blob/master/AsyncDisplayKitTableCellTextView/ViewController.m#L31) works. The rule of thumb for relayout is that developers should call `-setNeedsLayout` on the node that causes a layout change, in this case it is the editable text node. Failing to do that usually would cause the (text) node to use its old cached layout. The reason your demo works is that ASEditableTextNode invalidates its layout in `-textViewDidChange` ([here](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASEditableTextNode.mm#L421)). And that leads to 2 interesting questions:
- Should editable text node calls `-setNeedsLayout` instead? This actually makes sense and will make relayout more robust-- i.e any layout changes originated from an editable text node automatically trigger a relayout. 
  - The only problem I see is that `ASCellNode` must then somehow trigger an empty batch editing transaction (so that the hosting table/collection view will animate to the cell node's new size). This can be done either by a delegation or allowing `ASCellNode` to have a weak reference to the hosting table/collection view.
- Should we eliminate `-invalidateCalculatedLayout` completely? Or at least, for backward compatibility, make it to call `-setNeedsLayout` internally?
  - ~~One drawback of this approach is that relayout will be done very frequently-- i.e every time `-setNeedsLayout` is called on a node. We can fix this by scheduling the relayout to be done in the next layout call of the main run loop-- i.e the next time -layoutSubviews is called.~~

Would love to know your thoughts on this matter, @adly-holler, @appleguy and anyone else.
",nguyenhuy,appleguy
211,2015-01-23 00:00:01,"@wockerwalker — yes, we're planning changes to this behaviour in order to better handle large data sets (cc @rnystrom).  ASTableView and ASCollectionView currently blindly instantiate and measure _all_ available nodes as soon as they're available, but the ""a node is never onscreen if it hasn't been measured"" invariant can be preserved with incremental loading.  We're thinking of adapting the working range to only instantiate nodes when they're likely to be needed / destroy them as necessary for memory warnings.

For a stopgap measure, your suggestion of feeding ASTableView data in chunks — tail-loading, à la infinite scroll — is your best bet.  It's possible to have your code execute closer to display time using, for example, `-displayWillStart`, but this may actually be detrimental depending on what you're trying to do.

Hope this helps!  =]
",secretiverhyme,rnystrom
209,2015-01-12 17:09:18,"cc @secretiverhyme 
",rnystrom,secretiverhyme
207,2016-04-02 05:47:48,"@geoffmacd @MrReN @debug29 @RuiAAPeres @martin-gearzero 

Great news! @garrettmoon has implemented this recently and is planning to merge it upstream later this coming week. The integration should be quite seamless for most apps. Look for the pull request and feel free to start using it against the master branch when it lands. Expect it to be included in the 1.9.8 release (this is release is several weeks out however). 
",appleguy,garrettmoon
200,2015-01-06 21:56:48,"@tanliboy would you mind taking a peak at this and seeing if its something we can optimize w/ the way we insert nodes? Either in batches or something. We can jam on some ideas, just grab me :smiley: 
",rnystrom,tanliboy
195,2014-12-30 19:24:00,"Also removed `isRasterizing` as its unused (h/t @ocrickard)
",rnystrom,ocrickard
159,2014-12-17 19:41:23,"@secretiverhyme we could probably just remove [these lines](https://github.com/facebook/AsyncDisplayKit/blob/master/AsyncDisplayKit/ASMultiplexImageNode.mm#L621-624) entirely, right? Since there is already a check to see if `image` exists. That way if there is an error and an image is skipped and there's another in the queue it just moves along? Basically fails silently.
",rnystrom,secretiverhyme
158,2014-12-16 04:41:29,"Ooh, nice catch.  @rnystrom, want to add a short-circuit in the CGSizeZero case?
",secretiverhyme,rnystrom
156,2014-12-15 20:07:10,"@rnystrom, any thoughts on this one?
",secretiverhyme,rnystrom
154,2014-12-14 22:13:01,"Thanks for the report!  We can consider adding a `-didFinishSizing:` delegate call to ASRangeController (cc @tanliboy).  I'm surprised ASTableView's `.contentSize` isn't being updated correctly -- we use UITableView's standard ""add rows and sections"" API to add nodes to the table view once they've been sized.  Are you noticing incorrect scrolling behaviour, or just invalid property values?
",secretiverhyme,tanliboy
150,2014-12-17 22:19:57,"Nice catch, thanks!  Now that @tanliboy's major refactors have landed we can pull this (and #151) in.  I can manually merge these a little later today.
",secretiverhyme,tanliboy
138,2014-12-07 23:20:44,"Nice find!  I'll go ahead and merge #147 now.  As a heads-up, @tanliboy's ASRangeController overhaul (#31) is scheduled to land in the next few days, so the entire `-sizeNextBlock` codepath should be going away shortly.
",secretiverhyme,tanliboy
129,2014-12-03 03:06:49,"Hm, doesn't look like GitHub likes… ""stacked branches"", to abuse notation.  This one's simple enough that it can land in master directly without @rnystrom and @tanliboy reviewing.
",secretiverhyme,rnystrom
129,2014-12-03 03:06:49,"Hm, doesn't look like GitHub likes… ""stacked branches"", to abuse notation.  This one's simple enough that it can land in master directly without @rnystrom and @tanliboy reviewing.
",secretiverhyme,tanliboy
111,2014-11-16 19:25:55,"Very nice polish improvement; thank you @kylehickinson!

@ocrickard is one of the most familiar with this code, so I'll wait for him to have a look.
",appleguy,ocrickard
108,2014-11-15 18:00:39,"cc @appleguy 
",secretiverhyme,appleguy
102,2014-11-14 21:39:19,"Seems reasonable.  cc @toulouse in case he wants to take a look.
",secretiverhyme,toulouse
101,2014-11-12 21:12:16,"Very cool.  Thanks for putting this together!  =]

At a glance, this architecture matches what I'd had in mind for a possible ASCollectionView — most of the core async logic can still be shared in ASRangeController, and this will make it easier to implement editing / updates support for ASTableView and ASCollectionView simultaneously.

One complication:  ASRangeController can compute working ranges for any single-axis scroll view (table views, flow layouts, …), but UICollectionView supports arbitrary layouts (like two-dimensional scrolling and panning).  It might be worth replacing `ASCalculateWorkingRange()` with a block property, so collection views can have custom working-range logic for custom layouts.

cc @appleguy — one of us should be able to do a more-detailed code review soon.
",secretiverhyme,appleguy
83,2014-11-03 18:53:00,"This seems strictly good, though I will give @secretiverhyme a chance to comment (and make the final decision on accepting this PR) before it is committed to API :).
",appleguy,secretiverhyme
65,2014-10-17 20:29:20,"cc @acoomans 
",secretiverhyme,acoomans
60,2014-12-04 01:09:11,"> Hi! Is reloadRowAtIndexPath already available?

@nguyenhuy implemented this in #122, but we're holding off on merging it until @tanliboy's refactor is ready to go.  In the meantime, you can patch the pull request into your local copy of ASDK.  =]

> but right now I'm forced to call in the main thread the measure method of the cell when I have all the details to be shown, due to restrictions in how ASDisplayNode asserts work

Thanks for calling this out!  We're taking everyone's feedback and looking into changing this for the ASDK 1.2 release (#134).
",secretiverhyme,nguyenhuy
60,2014-12-04 01:09:11,"> Hi! Is reloadRowAtIndexPath already available?

@nguyenhuy implemented this in #122, but we're holding off on merging it until @tanliboy's refactor is ready to go.  In the meantime, you can patch the pull request into your local copy of ASDK.  =]

> but right now I'm forced to call in the main thread the measure method of the cell when I have all the details to be shown, due to restrictions in how ASDisplayNode asserts work

Thanks for calling this out!  We're taking everyone's feedback and looking into changing this for the ASDK 1.2 release (#134).
",secretiverhyme,tanliboy
32,2014-10-02 17:38:34,"Okay, so in talking to @secretiverhyme it seems like this /may/ be intended behavior. The method naming suggests an attribute need only be a member of `.linkAttributeNames` to be treated as a link - and hence, tappable. If being highlight-able is a requirement, a clarifying comment or a clearer API would be much appreciated.
",toulouse,secretiverhyme
31,2014-12-04 01:14:23,"Hey folks — sorry for the radio silence on this task!  We've been thinking about the right way to implement this, and @tanliboy is working on overhauling ASRangeController to add update methods to both ASTableView and ASCollectionView.  Sit tight, it'll be ready soon!
",secretiverhyme,tanliboy
26,2014-09-24 21:30:55,"I like it — let's round up the other methods that require super and include them too!  cc @acoomans
",secretiverhyme,acoomans
19,2014-10-15 03:59:05,"@appleguy changed the default to 8 — keeping the task open for future consideration.
",secretiverhyme,appleguy
15,2014-08-14 21:01:41,"Thanks for the report, @pyrtsa!  We're considering renaming `-sizeToFit:` to something more along the lines of `-prepareLayoutWithConstrainedSize:` — verbose, but also impossible to conflate with the UIKit method.  (cc @acoomans)
",secretiverhyme,acoomans
13,2014-08-09 05:44:41,"@acoomans caught this in #12, I think.
",secretiverhyme,acoomans
