issue_num,datetime,body,login,mention_login
2258,2017-03-17 15:59:57,"@chriseppstein Are you kidding me? I already answered this in prev reported issue, I tired that with colon too. also I mentioned here!",dehghani-mehdi,chriseppstein
2257,2017-03-14 05:26:35,"@chriseppstein I tired that before reporting this issue, do you closing other issues like this?",dehghani-mehdi,chriseppstein
2248,2017-02-23 14:47:43,"Thanks @nex3, I can use something less flexible for now but your tip is good to know!",NicolasGraph,nex3
2240,2017-02-08 19:00:40,"Thanks @mprins.

I have solved the problem in the following way:

I define a `Constants.scss` file with all of my Constants, and at the top of each module that uses the constants, a simple `@import` does the trick:

In `Constants.scss`:


In `Foo.scss`:


I think I was overthinking the problem. So I will close this issue. If someone feels I am really onto something here, then feel free to reopen. üòÑ 
",radiovisual,mprins
2239,2017-02-08 12:53:53,"@nex3 
Well, this results in my `.component h1:first-child` to have a `margin-top` of `8px`, and my `.component h1:last-child` a `margin-bottom` of `8px`. How would I go about coding that whilst also keeping my code DRY? ",CupOfTea696,nex3
2239,2017-02-09 14:27:16,"@nex3 awesome, thanks",CupOfTea696,nex3
2236,2017-02-07 08:48:55,"@nex3 well than it should have. There are a lot of issues caused by missing concept for log levels. Because there is some kind of ""log level"" with `@error` `@warn` and `@debug` but there is not concept for it.",DaSchTour,nex3
2236,2017-02-09 08:00:55,"@nex3 well, looks like a nice idea. How do I manage to control this on a CI level? How can I change the variable depending on if the build is done locally or on CI server?",DaSchTour,nex3
2235,2017-02-02 23:47:53,"@xzyfer <del>Only</del> Sass 3.5 RC <ins>and 4.0.0-alpha.1.edec1af</ins> (and `dart-sass`) produce the correct output.

 * `3.4.23` ‚ùå 


 * `3.5.0-rc.1.3983be8`  ‚úÖ 


 * `4.0.0.alpha.1.af6c039` ‚ùå 


 * <ins>`4.0.0-alpha.1.edec1af` ‚úÖ 

</ins>",tony19,xzyfer
2234,2017-02-14 01:53:52,"@nex3 Thanks for the reference, I didn't realize it was explained there. I was wondering why you decided to treat null variables as unassigned when using the !default flag? Following that definition shouldn't something like:

output:

As of now it doesn't output anything since $color is now null. Is the behavior in the first comment something you would consider adding as a feature? I think it fits better with the way !default behaves. The syntax $someVar: null !default; is written like you are assigning a value to a variable. If you wanted to declare a variable without an assignment, perhaps another type of syntax should be used.",pat270,nex3
2220,2017-01-12 02:19:08,@nex3 This makes sense now. I was scratching my head why it wasn't working. Thanks for your help!,jwandrews,nex3
2219,2017-01-06 23:31:18,"@nex3 is this purely-cosmetic? Looks like it changes the semantics of the output CSS


vs
",xzyfer,nex3
2218,2017-01-07 06:40:50,"@nex3 it looks like all but one of the Fixnum references are in comments which describe the type of data returned from a method.  The one reference to Fixnum inside actual executable code, when changed to Integer, does not break any tests, and the binary continues to compile .scss files to .css for all the Ruby versions I tested (1.8.7, 1.9.3, 2.0.0, 2.3.1, and 2.4.0).

What do you think of having Fixnum-related comments which apply to versions earlier than 2.4, and Integer-related comments which apply to 2.4 and above?",richiethomas,nex3
2218,2017-01-07 21:59:21,@richiethomas I think it's fine to just update the comments to be `Integer` instead for all versions.,nex3,richiethomas
2218,2017-01-07 22:20:59,"@nex3 OK will do.  When I was familiarizing myself with the comments, I had questions about the following 2 items:

1) In error.rb, there's a ""sass_mixin"" method which is meant to return an integer.  However, when I looked for this method in the MiniTest test suite (specifically, engine_test.rb line 403), I noticed an equality assertion comparing the return value of ""sass_mixin"" with a String intance.  I ran that test assertion and logged the value of the sass_mixin method, and it was indeed a string.  Does this mean the method should not return a Fixnum nor an Integer, but rather a string?

2) On line 75 of ""staleness_checker.rb"", the ""mtime"" param appears to be an instance of Time, not Fixnum nor Integer.  I determined this by running the relevant MiniTest, similar to #1 above.  Should the documentation be changed accordingly?

I'll do a PR as soon as I have your feedback on the 2 questions above.",richiethomas,nex3
2192,2016-12-12 09:49:25,"@nex3 Thanks for reply

It's slightly unclear why HSL has been chosen at first place despite wide popularity of HSV?

It seems to be quite odd pick, since in most cases with Sass works people which, well, having to deal quite a lot with colors, and in most cases they will stumble exactly upon HSV. So, it's unclear why it has been chosen to enforce less popular those days implementation on them.

The extension approach in Sass doesn't work quite well those days, because of environmental differences. Some projects running on Ruby, some on node-sass, and this means that extensions can't be made universally portable that easily.",ArmorDarks,nex3
2192,2016-12-13 10:00:44,"@nex3 Thanks for reply once again

> HSL wasn't chosen so much as inherited. CSS supports it, and we want to be compatible with CSS, so we support it as well.

Ah, I see. Well, then it's quite logical. Too bad that HSL is surprisingly unintuitive and very hard to work with due to lightness shifting other parameters.

> An extension that's written in pure Sass should be plenty portable.

Extensions of such kind written in pure Sass are quite slow due to calculations, even on libsass. I guess it's because a lot of underhood magic happens with types casting and so on. In the end, even `node-sass` function ends to be much cleaner and faster, but less portable.

Considering that some people have very large codebase, trading portability for such resources waste isn't an option too, unfortunately.

Well, I guess it doesn't change anything anyway. Thank you for finding time to take a look at this issue, though, and for Sass, of course :)",ArmorDarks,nex3
2172,2016-10-18 14:38:09,"@HugoGiraudel Are the spaces still useless when they break functionality?
",eaglejohn,HugoGiraudel
2172,2016-10-18 16:02:42,"@HugoGiraudel What's breaking my code then? Since changing the compiling method fixes the issue. On Google I find more issues with webfonts and missing spaces.

@douglasdeodato Thanks, I'll look into it!
",eaglejohn,HugoGiraudel
2172,2016-10-18 18:12:58,"@HugoGiraudel http://www.tamarakingtattoos.com/ the font ""Schluber"" is not loading, although the paths are correct. Path example: http://www.tamarakingtattoos.com/wp/wp-content/themes/tamaraking/fonts/Schluber.eot
",eaglejohn,HugoGiraudel
2172,2016-10-19 17:24:59,"@HugoGiraudel Did you find some time to take a look? The website is live and I can't have it live with the font not loading for much longer...
",eaglejohn,HugoGiraudel
2172,2016-10-20 15:52:34,"@HugoGiraudel Can we track this down to the way the file is compiled? Or is it something else? I recompiled the file again because it's a live website. So from now on the font is loading again. Still would like to use the compressed method since it's saving a lot of loading time.

When I load the css (using the compressed method) with the <link> tag everything is fine. As I said in my first post, I'm including the css in <style> tags.
",eaglejohn,HugoGiraudel
2171,2016-10-19 08:33:20,"@HugoGiraudel After some more fiddling with it I found that when I would remove one of the variables from `$drawer-profile-height` that it would work. It looks as if there is a limit of how many variables you can use on one line. 
",SuperDJ,HugoGiraudel
2171,2016-10-19 09:05:04,"@HugoGiraudel I'm not exactly sure of how to share but:

<p class=""sassmeister"" data-gist-id=""e90a4beee6e957158a05541c066600b8"" data-height=""480"" data-theme=""tomorrow""><a href=""http://sassmeister.com/gist/e90a4beee6e957158a05541c066600b8"">Play with this gist on SassMeister.</a></p><script src=""http://cdn.sassmeister.com/js/embed.js"" async></script>

Don't know if it's important to know which version I'm using:
SCSS: 3.4.22
Gulp: 3.9.1
gulp-sass: 2.3.1

I run Gulp trough PHPStorm
",SuperDJ,HugoGiraudel
2157,2016-12-18 17:51:03,"@nex3, Natalie, you closed without merge a multi line operator feature which had a bounty source, was requested for years and was rewritten from initial implementation to a version that suited you (with Chris we opted for more minimal solution). I remember waiting for your responses on issues while you were changing bio note about yourself. As a user you made me move to Stylus, and to other projects as a contributor. It was huge disappointment to work with you.",lokson,nex3
2157,2016-12-18 17:51:31,@nex3 rebase to next ready.,lokson,nex3
2157,2016-12-21 14:59:25,@nex3 I somehow closed sass-spec related MR without a merge. Here is a new one: https://github.com/sass/sass-spec/pull/1020,lokson,nex3
2156,2016-12-18 17:56:41,@nex3 rebase to next ready,lokson,nex3
2156,2016-12-21 15:02:55,@nex3 https://github.com/sass/sass-spec/pull/933 rebased,lokson,nex3
2146,2016-10-18 22:04:07,"Thanks @HugoGiraudel
",seeliang,HugoGiraudel
2135,2016-09-08 18:07:13,"@chriseppstein Oh, awesome, thanks!
",tedw,chriseppstein
2124,2016-08-24 22:49:45,"@chriseppstein sure. It will be in `spec/sass_3_5` untill end of this week.
",lokson,chriseppstein
2124,2016-08-25 22:07:10,"@chriseppstein, @xzyfer https://github.com/sass/sass-spec/pull/896
",lokson,chriseppstein
2124,2016-12-18 17:58:17,@nex3 rebase into next ready,lokson,nex3
2124,2016-12-21 15:05:12,@nex3 https://github.com/sass/sass-spec/pull/896 rebased to master,lokson,nex3
2123,2016-08-19 07:57:25,"@xzyfer  thanks but I am still not understanding.
",douglasdeodato,xzyfer
2121,2017-01-06 23:15:21,@xzyfer Definitely. `==` and hash equality are always the same.,nex3,xzyfer
2112,2016-08-24 22:49:33,"@chriseppstein sure. It will be in `spec/sass_3_5` untill end of this week.
",lokson,chriseppstein
2112,2016-12-18 18:00:20,@nex3 rebase onto master done.,lokson,nex3
2112,2016-12-21 15:09:38,@nex3 https://github.com/sass/sass-spec/pull/897 rebased onto master,lokson,nex3
2110,2016-08-01 14:22:40,"Thanks @chriseppstein. We've moved the CSS import directive for the google font outside of Sass which works well for us. I don't know if I'll get the OK to fix the underlying issue, but I appreciate the info about AST. Feel free to close. Thanks for the awesome work on Sass!
",midwire,chriseppstein
2106,2016-08-25 22:26:31,"@chriseppstein, @xzyfer https://github.com/sass/sass-spec/pull/897
",lokson,chriseppstein
2103,2016-07-27 20:03:17,"@chriseppstein thanks for the answer !

I expected it is off the roadmap for now, but I just wanted to be sure I am not missing something or working on a object-like system it will be released soon.
For know with first class functions and bunch of methodology I was able to make a similar pattern, so no rush üëç 
",LoicGoyet,chriseppstein
2101,2016-07-27 06:53:00,"Thanks for looking at this @chriseppstein and sorry for the delay in getting back to you.

I ended up implementing that approach and it's working well. When I said it ""wasn't quite there"" I was merely referring to how I preferred it to look personally in my stylesheets. It was more a readability thing.

Do you think a `@context` directive, or similar, has any value (as in my first example)?
",hatzipanis,chriseppstein
2099,2016-11-06 20:31:07,"@nex3 

This author's error is result of opting Sass to not use quotes for string literals. Now because of that we're forced to continue suffer with obscure syntax for accessing object properties?

I think it would be better to leave that choice to users ‚Äî to use more handy syntax, but risk errors, or stay on safe rails. In the end of all, it matters does user understand what he does or no. Besides, as you demonstrated, current syntax neither eliminates any errors, so what's the point?

Well, now when I though about it, ironically it seems that `$colors.green` sounds even safer than `map-get($colors, green)`, because in first case we're 100% sure that `green` is string literal and not `#00f`.

> I've never liked JS's conflation of dereferencing and map access

Didn't like that statement. Sowwy.
",ArmorDarks,nex3
2095,2016-07-05 06:35:57,"@xzyfer why not add these implementation on the official repo then ?
",sideffect0,xzyfer
2094,2016-07-08 12:18:55,"@chriseppstein 
Thanks for a feedback. Update is ready and it covers all of your examples.

In a first version, a multiline operator worked on all nested lines 
no matter how deep they were nested.

For example



Was transformed into:



And now it becomes:



After this commit multiline operator is concatenating only directly nested lines, 
(nested one level deeper than a line with operator).

And to have a multiline block nested in an another multiline block
(which will all end as a one line) - two multiline operators should be used.



Is transformed into:


",lokson,chriseppstein
2094,2016-07-08 20:38:03,"@nex3 Let's talk about this today. I know that's how the other languages work, but I find this approach in keeping with other indented syntax features an also having much less visual clutter.
",chriseppstein,nex3
2094,2016-07-09 10:00:55,"@nex3 
Commit is ready. A traditional syntax is surely easier to implement.

This change makes a multiline operator `\` act like in most languages.
It is replaced by a space and joined with a next line. Indentation of joined
line doesn't matter.

Multiline operator can be chained across several lines and it ignores
comment lines. For example:



Is changed into:


",lokson,nex3
2094,2016-07-11 01:26:24,"@xzyfer 
1. To which sass-spec folder add the tests? (I got lost there)
2. Should I do it before end of this pull request?
",lokson,xzyfer
2094,2016-07-11 23:12:10,"@nex3 do you want this to land on `next` or on `stable`? I was assuming `next` but it's currently a PR against `stable`.
",chriseppstein,nex3
2094,2016-07-15 19:13:04,"@lokson Specs should go in the [sass-spec repo](https://github.com/sass/sass-spec), under `spec/sass_3_5`, probably in a new `mutliline` directory. Feel free to do that after this lands, though.

@chriseppstein This should definitely land on `next`.
",nex3,chriseppstein
2094,2016-07-23 13:30:00,"@xzyfer https://github.com/sass/sass-spec/pull/895
",lokson,xzyfer
2094,2016-10-27 10:11:17,"I still miss you, dear short syntax:

One idea: lets add second multi line operator '|' that would not need to be repeated



It would mimic similar construct of yaml format.



@chriseppstein @nex3 
",lokson,nex3
2094,2016-10-27 10:11:17,"I still miss you, dear short syntax:

One idea: lets add second multi line operator '|' that would not need to be repeated



It would mimic similar construct of yaml format.



@chriseppstein @nex3 
",lokson,chriseppstein
2090,2016-08-07 04:39:54,"@chriseppstein Sorry for the delay in replying to you.

I am using SASS via Jekyll, which is why I did not know how to provide the `-q` command line option.  (I don't know how to provide any command line options to SASS in the context of Jekyll, since Jekyll kicks of SASS as part of its own build process.) Do you know how to control the SASS output with options like `-q` when Jekyll is running SASS?

In the meantime, I used a comment as per your advice which worked great.

My use case for leaving in the empty selectors was readability. I like seeing the full nested structure of my tags in the CSS, because it helps me think through and reason about the HTML structure when I'm writing CSS styling. It is probably more concise to omit it, but one of my favorite things about SASS is that I can ""see"" the HTML hierarchy in CSS.

Thanks again for your help on this -- much appreciated.
",jerzygangi,chriseppstein
2078,2016-06-20 16:37:04,"@chriseppstein I'm currently using Less followed by  [cssnext](https://www.npmjs.com/package/postcss-cssnext). I'd like to swap out Less for Sass/SCSS, but currently cannot because I get errors.

**Edit:**
Without [less-plugin-future-compat](https://www.npmjs.com/less-plugin-future-compat), Less will error as well. I had tried to do the same for libsass ([libsass#1911](https://github.com/sass/libsass/issues/1911)), but it wasn't possible.
",stevenvachon,chriseppstein
2078,2016-07-13 19:15:24,"@chriseppstein ?

It would be awesome if 3.4.x could get this feature as an option.
",stevenvachon,chriseppstein
2078,2016-10-27 17:12:48,"@chriseppstein is there an issue or something for the function prefixing in v4 that we can follow?
",stevenvachon,chriseppstein
2074,2016-06-09 07:51:33,"@chriseppstein Thanks for that, you prompted me to try the full use-case I put in the description on [SassMeister](http://www.sassmeister.com/) and it actually works as long as there is a non-empty use of `%abstract` later in the code. That means your `!optional` suggestion is also applicable to flag `.instance` as `%abstract` without being sure that `%abstract` will be used anywhere.

Originally I tried only this code on SassMeister



and got the warning. I then expected that the `@extend` will not properly work with later uses of `%abstract`. Since this isn't true, I'm closing the issue. Thanks for the help.
",hon2a,chriseppstein
2073,2016-06-07 07:41:42,"@chriseppstein not really, I include an extend from _icons.scss inside _extends.scss that are both imported in _styles-main in a correct order, plus, there are more .scss files in the project.

There is something wrong with the package version after the sass update on this project.

I tried downgrading gulp and npm and it didnt help, couldn't downgrade node-sass though.

Curious is that if i make a dummy project somewhere else on my PC with just these 3 files - it works.
",alexcracea,chriseppstein
2066,2016-05-23 20:54:02,"Hi @chriseppstein 

Thanks for your reply!

Ah, I see, as I've supposed they're indeed immutable. That's fine, of course.

Though, I'm trying really hard to apply you code and understand how does it solve described issue, without any luck. Am I missing something?
",ArmorDarks,chriseppstein
2066,2017-03-03 11:27:51,"@chriseppstein any chances for this to be reviewed?

Judging from your newer issues you're now less opposed to side-effects in functions.

Personally, I'm not fan of side effects too, but in some scenarios Sass just forces you to use them, because there are no easy way to pass certain values (for example, between mixins https://github.com/sass/sass/issues/871).

I do not think that your solution is good example, because it breaks the point of those functions. They supposed to encapsulate logic of assigning and retrieving to those global variables in the way, that user even may not need to know about those temporary global functions. But instead you're suggesting to expose this global variable for assignment. This way app just can't expose to user normal methods for set\get.

I propose at least to re-open this issue.

Thanks.",ArmorDarks,chriseppstein
2066,2017-03-11 21:51:35,"@chriseppstein? @nex3? Anyone?

If reply on this issue can't be provided right away, please, at least __re-open this issue__. I think it is very impolite to close issue right away without any meaningful solution.",ArmorDarks,chriseppstein
2064,2016-05-25 23:05:04,"@nex3 All code review comments have been addressed. üëç ?
",chriseppstein,nex3
2063,2016-05-23 21:11:54,"@chriseppstein Thanks for explanation, I didn't see that PR. My bad. That was exactly what I've been asking about. So, no more strings in calls, as I've thought. Sadly enough.

Won't it be possible to automatically call `$__tempFuncRef__: function-reference({{ functionName }});` by Sass itself before any `call`, which uphold string as first argument? This will allow to preserve previous behavior and avoid depreciation.
",ArmorDarks,chriseppstein
2059,2016-05-12 14:21:42,"@xzyfer great, though the output is the same no matter what version I test it against: http://www.sassmeister.com/gist/caaadc02bbacce49790781fa2b122fbd 
",cH40z-Lord,xzyfer
2057,2016-09-09 12:35:56,"@chriseppstein any updates on this getting merged?
",lifeiscontent,chriseppstein
2057,2016-10-04 20:39:55,"@chriseppstein I'm also interested on if there are updates for this pull request. It seems like #2061 was merged in.
",internetErik,chriseppstein
2052,2016-05-11 22:06:40,"@chriseppstein I agree that it is not a common enough use case to worry about, if it requires too many changes. I'm using SASS for few years now and bumping into this just now. Also thank you for the work around, it does look better than separate block. {:
",marek-saji,chriseppstein
2047,2016-05-04 12:02:17,"^ Was just about to post what @xzyfer said, haha. Except, you should probably use `$i * 1px` instead of `#{$i}px` so it's an actual length value and not a string.
",davidkpiano,xzyfer
2047,2016-05-04 12:15:26,"OK, thanks guys!

@xzyfer Interesting example with the list!

I will only need a handful of these variables, so i'll just write them out without a loop... 
",wouter-muller,xzyfer
2040,2016-05-03 21:32:57,"@nex3 Thanks for reviewing. Commit 6e8a053f3f1b3c58d3c7db057d7df80e8fee3752 has the changes you suggested.
",chriseppstein,nex3
2035,2016-04-22 19:24:33,"thanks for looking into it, @chriseppstein - I'm trying to create a super simple test case on a fresh rails app to reproduce the issue. 

I'll either reproduce it, in which case I'll push the test case to github and share it here, or I won't be able to reproduce it and I'll have to dissect what the difference between my app and the test app is, in which case I will post my findings here and close this issue. 
",erichummel,chriseppstein
2035,2016-04-22 20:26:16,"welp, try as I might, I couldn't reproduce the issue in a new rails app, and in the process of noting the difference between my app and the test case I tracked down a few more erroneous `@extends` and voila, the problem has disappeared. 

I guess I must have been so bleary eyed while stuck in the weeds with this yesterday that I misread the error or something.

At any rate, if anyone else runs into a problem like this while upgrading sass to 3.4.x, check all your `@extends` and make sure that their dependencies are actually being `@imported` before they're extended. Also, make sure you're not calling `@extend` from within media query blocks to extend with selectors defined outside of those blocks.

thanks @chriseppstein and @cimmanon 
",erichummel,chriseppstein
2030,2016-04-11 19:37:09,"@chriseppstein:

> I'm not saying that this applies specifically here, just that as a general statement, I disagree with it :)

You're right, and as a general statement, I don‚Äôt agree with it myself üòÑ 

> [‚Ä¶] we believe that most users expect there to be a parent selector in scope when they use it and so this error speeds up the debugging process of an authoring mistake

Totally understand that position of making life much easier on an use case that a lot more people will run into. Opened the issue with the hopes that both scenarios could be covered, but alas not. I‚Äôll find a workaround.

As for @cimmanon‚Äôs suggestion, I appreciate it, but it‚Äôd imply calling the mixin for each selector group I want to namespace, resulting in one `@media` block per selector group, which isn‚Äôt desirable.
",paulozoom,chriseppstein
2023,2016-04-11 17:49:25,"@nex3 this seems like a bug to me. The `@charset` is needed in partials to declare the charset but then it cannot be imported except at the top level. This seems like an oversight in the implementation.
",chriseppstein,nex3
2023,2016-04-18 18:17:21,"I discussed this with @nex3 and we decided that it should be considered a bug.
",chriseppstein,nex3
2016,2016-03-17 22:33:51,"@glebm Well, @nex3 has consistently rejected patches that fix this so far, arguing that ruby warnings are not in line with our preferred coding standard for this project. So I will let her weigh in. Personally, I am not opposed to Sass running without warnings when running with `-w` set.
",chriseppstein,glebm
2016,2016-03-18 01:30:45,"@chriseppstein This is undocumented in rake, but to disable warnings, `verbose` also needs to be disabled [like here](https://github.com/twbs/bootstrap-rubygem/blob/23b55fc0e064a9ccc105320ba8f05c99b7fad61a/Rakefile#L8-L9). I don't know how to make it only hide the Sass warnings but not other warnings.
",glebm,chriseppstein
2016,2016-03-22 17:29:28,"@nex3 @chriseppstein Please consider to merge this for the Community sanity.

Sass is a dependency for hundreds of gems and thousands of applications that will see these warnings (and they are a lot). Of course they can decide to opt-out for Ruby warnings, but that prevents OSS maintainers to keep them enabled.

:pray: 

---

**UPDATE:** Here's an example of what I'm saying: a Travis CI build that fails and it reports:

> This log is too long to be displayed. Please reduce the verbosity of your build or download the raw log.

![screen shot 2016-03-22 at 19 14 22](https://cloud.githubusercontent.com/assets/5089/13962693/78c19ec4-f062-11e5-82e2-70c48448bf4f.png)

Source: https://travis-ci.org/hanami/assets/jobs/117776354
",jodosha,chriseppstein
2016,2016-03-22 21:41:13,"@chriseppstein Thank you for that merge and for maintaining Sass :green_heart: 
",jodosha,chriseppstein
2015,2016-03-22 20:45:44,"@glebm Thanks for the patch!
",chriseppstein,glebm
2012,2016-03-12 07:57:36,"@chriseppstein: Well, Stylus is good too.  :)  Thanks for at least considering the idea.  I think that viewpoint the Sass maintainers have is good as well, good intentions.  It was worth a shot at least.  :P
",jamen,chriseppstein
2006,2016-03-04 09:08:25,"@chriseppstein , sorry, I am not sure what you're talking about. The reason I complained was very high CPU usage and messages from sass in the terminal about changes made (new files detected) in sass files in other directories. 
Also, I'm using version 3.4.21
",tigrr,chriseppstein
2004,2016-02-29 22:16:07,"@chriseppstein i am working on a HOWTO for this tonight for you guys, found out about this where it asked if someone wanted to do it on twitter.
",ubergeekzone,chriseppstein
2004,2016-03-01 01:32:49,"@chriseppstein  Hi, thanks for advice, but I've already checked this article and tried to follow all steps. But on a step **Map to network resource** when I right click on style.scss there are no options to choose file. Here is screenshot  - http://clip2net.com/s/3uZ2fab

Maybe the problem can be cuz I'm running file on a local machine and a format is file:/// instead of localhost?

It might be very helpful for a new users to read detailed HOWTO with all explanations. I spent about 2-3 days serfing forums and still can't find working solution.

Thanks for your help.
Best Regards.
",DeoThemes,chriseppstein
2002,2016-03-10 04:57:46,"@chriseppstein Thanks for the opportunity to participate. I'll look for other places to do so, but admittedly I'm a ruby n00b
",lowenthal-jason,chriseppstein
1996,2016-05-16 18:15:57,"@HugoGiraudel That's a good point. maybe we'll just turn issues off on the new repo.
",chriseppstein,HugoGiraudel
1988,2016-05-19 19:12:39,"@chriseppstein I'm not a fan of overloading functions like that‚Äîit makes it difficult for people unfamiliar with the function to read code that uses it. It should do exactly what the name says. I'd prefer to have a separate `content-arity()` function for that.
",nex3,chriseppstein
1988,2016-05-19 19:28:41,"@nex3 Agreed. I actually had come to the same realization before I read your comment üëç 
",chriseppstein,nex3
1985,2016-02-08 20:34:01,"@chriseppstein Thanks so much for looking into this! I'll report back here if I am able to find out any more info.
",lencioni,chriseppstein
1968,2016-01-15 18:02:23,"@Alphmega What @HugoGiraudel says is true: 



If you're getting a different result, I'm very confused as to how. I guess you can tell us what version and implementation you are using -- maybe you just need to upgrade -- I dunno.
",chriseppstein,HugoGiraudel
1968,2016-01-16 04:32:31,"@chriseppstein @HugoGiraudel After upgrading sass, it returns correct return. Thanks for answering 
",Alphmega,HugoGiraudel
1968,2016-01-16 04:32:31,"@chriseppstein @HugoGiraudel After upgrading sass, it returns correct return. Thanks for answering 
",Alphmega,chriseppstein
1963,2016-01-11 19:17:27,"@chriseppstein Thanks for the clarification regarding example 2, being aware of #216, didn't think it'll apply to CSS constructs in addition to Sass constructs such as maps‚Ä¶

Didn't think to write my intended value for `grid-template-areas` that way before.
",lozandier,chriseppstein
1963,2016-01-12 00:26:24,"@xzyfer I'm not opposed, but we create feature flags when the syntax is backwards compatible but the semantics change. What point would a flag serve? It would be a syntax error during compilation if the new syntax is encountered.
",chriseppstein,xzyfer
1963,2016-01-12 00:47:13,"> Maybe the point is moot without conditional `@import`.

@xzyfer Exactly. All sass files are parsed and there's no way to avoid the syntax error by scripting.
",chriseppstein,xzyfer
1963,2016-01-13 21:51:08,"@chriseppstein @nex3  @tabatkins This all makes sense to me. Thanks @xzyfer for reminding me to not forget about the awesomeness of `unquote`. 
",lozandier,nex3
1963,2016-01-13 21:51:08,"@chriseppstein @nex3  @tabatkins This all makes sense to me. Thanks @xzyfer for reminding me to not forget about the awesomeness of `unquote`. 
",lozandier,chriseppstein
1963,2016-01-13 21:51:08,"@chriseppstein @nex3  @tabatkins This all makes sense to me. Thanks @xzyfer for reminding me to not forget about the awesomeness of `unquote`. 
",lozandier,xzyfer
1961,2016-12-11 22:39:29,"@jeremyevans I'm happy to merge something like this in, but I'll need you to merge with the latest stable and figure out how to get Rubocop happy if it's still complaining.",nex3,jeremyevans
1959,2016-01-09 01:19:54,"@nex3, if this is per design (although unintuitive to me), these details should be in the documentation.

@chriseppstein 

> Sass 3.2.12 is very old 

That's what's in the Ubuntu 14.04 official repository, and there is no maintained PPA for Sass (the only one I could find is inactive since 2011).
",Hibou57,nex3
1959,2016-01-09 01:19:54,"@nex3, if this is per design (although unintuitive to me), these details should be in the documentation.

@chriseppstein 

> Sass 3.2.12 is very old 

That's what's in the Ubuntu 14.04 official repository, and there is no maintained PPA for Sass (the only one I could find is inactive since 2011).
",Hibou57,chriseppstein
1958,2016-01-06 20:56:33,"@chriseppstein not here


",tcurdt,chriseppstein
1958,2016-01-07 18:07:54,"@chriseppstein looks like all from `2.7.x` on upwords should be broken
Just installing the latest `listen` gem should be enough to reproduce it.

Maybe the easier way would be to have `sass` really be a script that calls `bundle exec`? Obviously there are many incompatibilities between the `listen` versions. So supporting all does not really sound like the best path forward.
",tcurdt,chriseppstein
1957,2016-01-06 18:04:57,"Hi @chriseppstein 

Thanks for your answer

> That is not valid syntax for a media query, so you get an error.

But `b: $x;` is also interpolated, the result is also not valid css syntax and it still works, i.e. it is substituted and nothing fails. Is this interpolation done at a later stage or why is there not error here?

Maybe you could be so kind and give me a hint on how to circumvent the Sass parser here to receive `@media (max-width: <<macro>>)` in the output? Or is this not possible under any circumstances?
",felixhayashi,chriseppstein
1957,2016-01-06 18:53:24," @chriseppstein 

> I think you have an old version of node-sass installed. the latest version gives an error on this input.

Seems you are right. In `node-sass@1.2.3` it worked and now with `node-sass@3.4.2` it doesn't anymore. That's bad news for me :(

> I assume you are doing some sort of post processing I suggest that you used valid css syntax for your markers and you won't have this issue. E.g. -my-macro works fine.

Thanks for this suggestion. Unfortunately, I cannot control the macro syntax (it is predefined by the environment where the css is used in and actually even a bit more complex than in the example above). I think I'll stick with @davidkpiano's suggestion then as it seems to be the easies to work with.

Thanks
",felixhayashi,chriseppstein
1957,2016-01-06 19:48:11,"> @felixbuenemann output.gsub(/-my-macro/,""<<macro>>"")

@chriseppstein Thanks, but there are quite a lot of different macro expressions in my script and even some other directives that have a comlicated syntax so it would require some complicated regexps and not even sure if that will do it here. I tested @davidkpiano's solution with Ruby Sass `sass-3.4.20.gem` and it does compile with custom at-rules. However `node-sass@3.4.2` fails here again. Should I report this divergence somewhere?
",felixhayashi,chriseppstein
1956,2016-01-17 18:49:49,"@chriseppstein Do you think that with adding the simple restriction that properties can not be repeated for declaration blocks assigned to variables, my original proposal can be feasible?

I think it would be valuable since, even today, maps currently _are_ being used as declaration blocks, and the syntax isn't the best, nor is the need to convert the map to a declaration block.

I'm willing to help on this in any way I can.

**EDIT:** I read #1582 a while back and my understanding is that it's trying to solve a problem set in the context of `@mixins`. This proposal is not related to `@mixins` since it will only refer to a single node, which is the map-like declaration block, which would be treated as a first-class value. It's simpler to represent since it does _not_ include selectors.
",davidkpiano,chriseppstein
1949,2016-01-04 21:03:24,"@chriseppstein  thanks for the quick response. You were on the right track. Although my sass gem was up to date, the gulp-sass node provided with the sage/roots WP theme I was using needed to be updated. Sorry for the false alarm.
",kmcaloon,chriseppstein
1946,2016-01-05 13:02:07,"@chriseppstein when testing on Sass 3.4.20 and 4.0.0.alpha.1 removing the `;` did fix the issue.

My guess is that it's because the [STATIC_VALUE](https://github.com/sass/sass/blob/9077d95ffa6ab9388f59074483f1ef508d75d448/lib/sass/scss/rx.rb#L137) only matches if there is a trailing `[;}]`.
",xzyfer,chriseppstein
1946,2016-01-09 14:52:04,"@chriseppstein any updates on the proposed fix presented by xzyfer?
",mgreter,chriseppstein
1943,2015-12-18 21:49:24,"@chriseppstein Interesting. Very interesting.
",Undistraction,chriseppstein
1935,2015-12-16 10:00:22,"Hi @chriseppstein ,

Thank you so much for clearing this up for me! This makes much more sense.

Cheers!
",Sector22,chriseppstein
1934,2015-12-15 06:10:19,"@chriseppstein let me describe the possible use case: you have to use some SCSS framework. You almost can't change it. In your project you want to use BEM and you want to build semantic naming scheme. I.e. you want to have:



On other page:



Today `item-control` and `project-control` are buttons, tomorrow some of them may be links, etc. There is no chance that `item-control` and `project-control` will be siblings.

Which solution is better here? How it's possible to implement that without `@extend` and to not get a lot of extra CSS?
",andreev-artem,chriseppstein
1934,2015-12-15 12:16:29,"@chriseppstein By the way, `:matches` is now supported in every browser except IE. Any chance to enable it in this case, if IE is not vital for our project?
",artch,chriseppstein
1934,2015-12-16 07:02:59,"@chriseppstein 

> Agree. When :matches is well supported, it will.

Good. And let me ask it again: `:matches` is already supported in all major browsers except IE. When it is considered to be supported enough? What if our project disregards IE totally and we are already ready to make use of it? Probably some explicit opt-in configuration?
",artch,chriseppstein
1934,2016-01-20 09:34:06,"@chriseppstein I'd like to bump this as I didn't receive an answer here.
",artch,chriseppstein
1916,2015-12-03 12:44:53,"@chriseppstein can you make a statement whether errors, warnings and/or inspect should ignore user settings or not? Would be helpful to know that, since I'm currently relying on trial and error here and always unsure if something like this is a ruby sass bug or a libsass issue!? 
",mgreter,chriseppstein
1916,2015-12-14 23:50:45,"@xzyfer @mgreter @saper I'd like to close this or get to some sort of actionable resolution. 
",chriseppstein,xzyfer
1916,2015-12-15 16:46:26,"@xzyfer Yes, that's reasonable, imo. The annoying thing is that for some types, inspect is used to construct the css representation.
",chriseppstein,xzyfer
1913,2015-11-28 01:20:18,"@chriseppstein I expect this:



To return `6`.
",scottkellum,chriseppstein
1913,2015-12-11 00:32:29,"@HugoGiraudel I think `min($list...)` and `min($list)` are the same amount of confusing if the list is not comprised solely of numbers.
",chriseppstein,HugoGiraudel
1912,2015-12-04 20:29:15,"@chriseppstein That sounds good if we can come up with a close-to-bulletproof strategy for deprecation warnings. Can you work on that?
",nex3,chriseppstein
1912,2015-12-11 00:35:15,"@nex3 I can take a swing at it, I'm still learning my way around the nitty gritty aspects of the script parser code.
",chriseppstein,nex3
1904,2016-04-22 23:37:23,"@nex3 Can we land this in `next`?
",chriseppstein,nex3
1904,2016-04-29 18:17:35,"@nex3 I'm willing to help wrangle it. My question was whether this feature set could go out in the 3.5 release.
",chriseppstein,nex3
1904,2016-12-11 22:40:19,"I don't think @chriseppstein ended up having the cycles to work on this, so I'm going to close it out. If someone else wants to adopt in in the future, I'll re-open.",nex3,chriseppstein
1885,2015-11-05 19:24:21,"Oh, My bad @chriseppstein :'(
Seems there was one issue for that already (#1172). Guess I missed it because I just searched for 'placeholder', not 'placeholder parent' to filter out better.

May I suggest improving the doc to mention that `%placeholder` has scope if used inside a selector?

Thank you.
",RaphaelDDL,chriseppstein
1885,2015-11-10 20:35:39,"@chriseppstein Yup, I did (I even linked it on first post).

I've re-read it over and over but I couldn't make the link that `#id { %placeholder {} }` would be the same as `#id %placeholder {}`. For me, they are two different scenarios from what I would've call a 'placeholder for replace' and a 'truly placeholder' (I'll explain below). 

Looking at [the example](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders), it shows an use that it works as a ""placeholder for replace"" for the class you are extending it from. So if I do the placeholder as part of a CSS selector (say `#id %placeholder {}`), then when I do `.whatever { @extend %placeholder; }`, I should expect my class to ""replace"" the placeholder part, the same way it would work with regex `()` matchers which then you replace/reefer the parts with `$n`. Thus resulting `#id .whatever {}`.

But I thought that, without being part of a CSS selector - simply a ""truly placeholder"" class -, wouldn't affect the outcome. [Here](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_) there's this quote:

> On their own, without any use of @extend, rulesets that use placeholder selectors will not be rendered to CSS.

From that I assumed they wouldn't do anything nor should have selector ""scope"" because they are ""on their own"", that is, simply `%placeholder` independent of position.

But I could truly understand after reading nex3's explanation in #1172. I realized that what I thought ""without being part of a CSS selector"" is utterly wrong. When we do 
`#id { %placeholder {} }` we are indeed making it as part of the CSS selector, using the nesting provided by sass engine.. Therefore it is indeed the same as `#id %placeholder {}`.

Not sure if it's my own problem, since my native language isn't English. But I feel (less) dumb knowing I wasn't the only person that thought the way I thought lol. Anyway, deeply sorry if I didn't make any sense..

Thank you for your time reading through this.
And thank you again, this time for Compass lol :)
",RaphaelDDL,chriseppstein
1882,2015-11-04 02:12:57,"Thanks for the explanation @chriseppstein. My understanding was that just the properties of the class were inherited (or copied) not that they would be tied together in other declarations using the base class.  Would placeholders behave the same way here?  
",lisatassone,chriseppstein
1878,2016-02-04 19:38:54,"@royels Do you plan to address the code review comments?
",chriseppstein,royels
1878,2016-02-04 20:35:30,"Whoops, I'm super sorry for falling off the face of the planet.
At any rate, yep, I addressed the code review comments (except for the first, I don't think I hit the spirit of ""clean"" refactor in my last commit. So still trying to figure that out.)

EDIT: I've removed the method, but more or less re-implemented its idea into the arglist handler. 
I'm genuinely unclear on what @nex3 meant by not modifying comma detection. If I understand correctly, isn't the point of the issue that we need to detect commas that are the last character before the right parentheses?
",royels,nex3
1878,2016-03-07 21:17:54,"@nex3 I think we should just clean this up and land it do to the latency of updates.
",chriseppstein,nex3
1878,2016-03-07 21:33:57,"I agree, after hammering at it for a while, I was still puzzled on how to address the issue by incorporating @nex3 's suggestions. Quite interested to see what it was supposed to look like.
",royels,nex3
1878,2016-03-11 20:15:07,"@chriseppstein Can you take charge of that?
",nex3,chriseppstein
1875,2015-11-23 20:22:35,"Thanks @nex3 for the review. All comments addressed, and I've squashed into one commit.
",srawlins,nex3
1875,2015-11-24 21:30:22,"Oops, my bad @nex3. Addressed and squashed.
",srawlins,nex3
1875,2015-11-25 00:24:30,"Thanks @nex3 , good catch. Addressed and squashed. Brought in a change to to_css.rb.
",srawlins,nex3
1868,2015-10-27 17:59:56,"@srawlins This appears to be an oversight. We just didn't think that comment nodes were important from a source-mapping perspective or we missed it.

We just don't pass a source range when we make a `Sass::Tree::CommentNode`:
- .scss syntax: https://github.com/sass/sass/blob/stable/lib/sass/scss/parser.rb#L176
- .sass syntax: https://github.com/sass/sass/blob/stable/lib/sass/engine.rb#L779

Hopefully that's enough to get you going on a patch.
",chriseppstein,srawlins
1864,2015-10-27 17:56:58,"Sounds great :) thanks @chriseppstein
",duivvv,chriseppstein
1864,2015-11-03 21:20:21,"While I agree with @nex3 in general, this syntax is stable and locked in.  It met with great enthusiasm in the group, and is what MQs were originally supposed to look like (but way back in the day you had to actually worry about putting a `<` in a `<style>`. 

If y'all feel like supporting it, I'm confident that it's safe to do so.
",tabatkins,nex3
1864,2017-02-10 21:39:41,@nex3 I think we should bump the priority of this compat issue now.,chriseppstein,nex3
1857,2015-10-15 23:24:35,"Hey @chriseppstein, thanks for responding so quickly and for the discussion above. I only filed this as an issue because there was a discrepancy between LibSass 3.2.5 and Ruby 3.4.14 parsers. The code above compiles with LibSass but errors in Ruby. See http://sassmeister.com/gist/36486158ba84062cd13f.

I admit I don't know anything about the sass engine, all I have to go on is http://sass-lang.com/documentation/file.SASS_REFERENCE.html#parent-selector. It states ""& must appear at the beginning of a compound selector, but it can be followed by a suffix that will be added to the parent selector."" With this definition, the behavior of the work around you suggested, and the response from nex3 in the issue above I think it supports my expectation.
",pat270,chriseppstein
1854,2015-10-09 22:14:12,"I'm not a fan. I don't like the idea of adding a new construct for something that isn't encouraged anyway, and given that Sass already has a distinction between functions and mixins anyway, I'm happy to say that side-effect-only reusable chunks of code should always be mixins.

@davidkpiano's use-case is compelling, though. @chriseppstein, what do you think about allowing `@include` in functions as long as the mixin doesn't emit any actual CSS?
",nex3,chriseppstein
1854,2015-10-13 12:20:29,"> @chriseppstein, what do you think about allowing @include in functions as long as the mixin doesn't emit any actual CSS?

My thought, exactly. Although that might be greedy to determine? Also, I'm worried about the complexity overhead of allowing mixins includes in functions some times, but not always. But I don't see a better option.
",HugoGiraudel,chriseppstein
1854,2016-11-23 20:02:31,"@nex3 I just came across this issue while looking into a feature of SASS that doesn't exist: calling functions without a left-hand side.

Before I begin, I would first like to say thank you for putting the work you (and others) put into this tool, as it is mighty helpful, and I wish the W3C would take a page from SASS's book. Keep up the good work, and hopefully my 2cents can be of some use to help remedy this issue (and any others similar to it).

### some feedback on the issue from an outsider perspective,

I will admit that I am not a Ruby programmer, nor am I some shmuck whom thinks their opinions about an open-source tool or piece of software should be taken as law and implemented at my whim. However, with that being said... As a heavy user of SASS (SCSS syntax specifically) who wants to see the language flourish and become better (not saying it's bad by any means), I feel that a lot of your reservations about adding features, specifically how a user uses functions and mixins are quite dogmatic.

It is a fact that there are many people, myself included, whom want ""better"" functions. By ""better"" I mean acting as a function should in any other language, but for CSS;

* Can be called anywhere. Outside of a selector, inside a selector without a left-hand side, and inside a selector with a left-hand side.
  * __Note:__ Preferably without the need for an `@rule` like mixins need `@include`. However if an `@rule` is necessary, I do like the suggestions in this thread, `@call` and `@exec`. Even then.. It's not very clean to use functions with an `@rule` IMO. I digress...
* Does not have to return a value,
* Can produce side-effects (rulesets and values),

just to name a few.

The biggest concern/worry I get from your reservations is that you don't want users to be confused on when to use a mixin over a function, and vice-versa. This is totally understandable, admirable even, especially to me as a new developer who is mega confused by a lot of silly things in the JavaScript community. However, with that in mind, I think you would do well to consider that your stance on the matter is not the correct one, since many people seem to disagree with you.

### now for my ideas/recommendations

Have you ever considered having mixins and functions being the same thing with the only difference being syntax/semantics. I bring this up because they are mighty similar to one another (even with your reservations in place). If you look at almost any other language, there are usually at least 2 ways of doing the exact same thing with the only difference being opinion of syntax, which leads me to my next point;

I personally think that if you did away with mixins entirely, no one would miss them because functions can do everything. To replace the mixin directive, you can add a built-in SASS function called `mixin()` or `include()` and have it take an argument of a selector, variable, or maybe a file path that would output the contents of the argument ... Think of PHP's `file_get_contents()`, `include()` and `require()` statements as a comparison of functionality.

That's all for now, 

Sincerely,


Jordan",jordanbrauer,nex3
1854,2017-03-01 09:03:03,"I tend to agree with @chriseppstein 

Currently we already have very blurred mixins and functions, and out-of-place usage of mixins to make side effects. Mixins originally had to produce styles, not any side-effects, so it always felt to me rather like a hack.  Thus I'm voting for a clear way to use functions for same purpose.

I wonder why @nex3 leaved this discussion? Is this like an act of protest? :)",ArmorDarks,nex3
1854,2017-03-01 09:03:03,"I tend to agree with @chriseppstein 

Currently we already have very blurred mixins and functions, and out-of-place usage of mixins to make side effects. Mixins originally had to produce styles, not any side-effects, so it always felt to me rather like a hack.  Thus I'm voting for a clear way to use functions for same purpose.

I wonder why @nex3 leaved this discussion? Is this like an act of protest? :)",ArmorDarks,chriseppstein
1851,2015-10-07 08:39:27,"@chriseppstein Where did you get that selector-nest()? I can't find it in the sass documentation.
",basvandenheuvel,chriseppstein
1847,2015-09-29 00:13:52,"@chriseppstein Interesting, I just tried `--precision` and that has the semantics I was looking for. However, is it possible to limit the setting within a block or some such?

My use case (which admittedly isn't critical to get the job done) is that I would like to do `precision(random() * $something, 1)` instead of `round(random() * $something * 10) / 10` because it's more readable and it's also cleaner in the sense that it will generate `0.5px` and `1px` instead of `0.5px` and `1.4px`. The fact that I care less about the fraction for numbers >= 1 is perhaps not very common.
",blixt,chriseppstein
1847,2016-03-07 21:25:36,"@nex3 The semantics of inspect is that it is for debugging. I don't want to confuse that by telling people inspect is sometimes how you put a css value into css output. I'd rather just make an entirely new function for this.

But tbh, my pref is still to just set an instance level precision for the numbers where it matters and let the sass numeric output code do it's thing.
",chriseppstein,nex3
1832,2015-10-05 12:09:50,"@voondo Hi, it's grossly inaccurate Polymer is going in the wrong direction with this. This capability of Polymer was supervised by an established CSS spec writer that was already planning to have this functionality be standardized which it has since its widespread use in the Polymer project: http://tabatkins.github.io/specs/css-apply-rule/

This functionality  are _custom property sets & css properties_ rather than selectors, so I'd also ignore the outdated reference above by @mprins (CSS custom properties beyond the vendor prefixes didn't exist in 2011). 

Perhaps they are a officially a subset of selectors, but that's an outdated reference nonetheless unless you're referring to how Sass is maybe interpreting it as such because it may lack the understanding of  such property sets
",lozandier,mprins
1827,2016-02-27 13:50:20,"@chriseppstein There's really not many steps to reproduce this. My environment is Mac OSX.

Once SASS is installed:

![image](https://cloud.githubusercontent.com/assets/7915144/13373213/b4317e42-dd26-11e5-8c4b-fccd5f69140b.png)

If I include the backtrace, it looks just like what @wildpine posted
",lowenthal-jason,chriseppstein
1817,2017-02-20 02:01:29,"As of 2017, what is the correct way to namespace imports? @nex3 @chriseppstein Sorry for tagging you but I can't find any other info on this.",GusRuss89,nex3
1817,2017-02-20 02:01:29,"As of 2017, what is the correct way to namespace imports? @nex3 @chriseppstein Sorry for tagging you but I can't find any other info on this.",GusRuss89,chriseppstein
1811,2015-08-26 14:21:41,"@chriseppstein Thanks for your time and consideration of this issue, makes sense to be consistent.

For anyone else wondering this behavior is also consistent with media queries.
http://sassmeister.com/gist/09545a51a563e77a1a35
",FranDias,chriseppstein
1797,2015-08-21 20:14:07,"@nex3 you're right. I'm feeling it too. I do think this will increase the performance of Sass, but it wouldn't be ideal for readability.

I think we could close this PR TBH since ruby 3.0 will make strings immutable by default. Partly due to devs like me are submitting PRs for the usage of `String#freeze`.
",BenMorganIO,nex3
1795,2015-08-16 18:10:40,"""It's not something worth supporting in the core language"" -> Issue closed. 

Seriously? Well, thanks a ton, @nex3 ... O_o
",b44rd,nex3
1791,2015-08-06 14:09:05,"@HugoGiraudel Great thanks! 
",KupuJIJI,HugoGiraudel
1782,2016-12-17 15:56:44,"@nex3, yes, of course I can provide a demonstration. But I tried opening the CodePen I created in IE10, to no avail. The page was unresponsive.

I've created a [GitHub Gist](https://gist.github.com/CaelanStewart/027f522f17fd3fd05ecf8c5fe001f724#file-test-case-html).

On the image on the left, there is an 'A' tag overlaid, which initially has its background-color set to transparent. Upon hover, the background-color is updated to 'rgba(0, 0, 0, 0.25)'.

The image on the right is exactly the same, except that the initial background-color value is set to 'rgba(0, 0, 0, 0)'.

I've tested this on IE9 and 10 on BrowserStack, and the overlay on the left does not respond to the hover state, nor can you even click the link.

Now, fair enough, old browsers don't support RGBA values, but its becoming less and less important to support browsers less than IE9. jQuery, Bootstrap and others have already dropped support for IE8.

So, in my opinion, I believe that I should not have to apply a workaround when using SCSS to support newer browsers. If somebody needs to support an older browser, it's logical that they should be the ones to apply some workaround.

Now, albeit true this is some sort of typical IE bug, I just think that quietly converting color formats in the background to support and older browser should not be the responsibility of SCSS. I believe SCSS should just be a transpiler, and not interfere with or modify the user's original intent.",CaelanStewart,nex3
1781,2015-07-23 19:59:06,"@cimmanon Thanks for that! That works great and it won't be too hard to add into my current stuff.

@chriseppstein I'm not experienced with using lazy evaluation, but while researching about it, it looked like the answer I needed and only seemed to solve problems. I was thinking this would be a new behavior that would extend the current behavior for all arguments without requiring new syntax, since, as far as I'm aware, it wouldn't hurt any existing user code. The only thing that would change is the point in time something gets evaluated, which would be from, ""as soon as I can"", to, ""only when/until I have to"". I have no idea about how much work it would be to implement it in this way. If a new syntax were required for this I think that would open up a whole new can of issues.

In general though, I'm fairly happy with the work around @cimmanon provided.
",whaaaley,chriseppstein
1780,2015-08-07 00:34:36,"@joseorihuela @apfelbox This is essentially the same thing as `@extend`ing a `%placeholder` selector. :)
",davidkpiano,apfelbox
1780,2015-08-07 06:47:32,"@davidkpiano what @apfelbox said. I was thinking more along the lines of being able to utilize vendor frameworks in a more semantic way without all of the extending selectors muddying things up.
",joseorihuela,apfelbox
1778,2015-09-07 23:52:51,"Thanks for the write up @nex3. Apologies for the delayed response, I initially responded via chat.

We're :+1: to having clear semantics and expectations around how interpolants should interact with strings. A decent amount of technical complexity has been introduced into LibSass recently in order to best emulate how Ruby Sass renders strings with interpolants on a case by case basis. Anything that can be done to simplify this has our support.

LibSass does not have the same legacy baggage as Ruby Sass, and we also do not have a specific SassScript parser. Given a clear set of rules and updated Sass specs we should be able to move quickly on this.

I think this is a great opportunity for the Ruby Sass team to trial developing against Sass Spec, thoughts?
",xzyfer,nex3
1778,2015-09-12 01:08:56,"In service of determining how to go about deprecating the current semantics of SassScript interpolation, I want to precisely define them. @xzyfer, this may help with libsass compatibility as well.

For our purposes, we only care about _free interpolation_‚Äîthat is, interpolation outside the context of a string or a special function (e.g. `calc()`) that's parsed like a string.

The grammar for interpolation is straightforward. Note that the representation below elides much of the unrelated complexity of the SassScript grammar. The `Operation` and `UnaryOperation` productions should be understood to encompass all binary and unary operations supported by SassScript, except for `,` which is handled by the `CommaList` production. Note that this _includes_ the implicit adjacency operator that normally creates space-separated lists. `Value` should be understood to encompass literals, parenthesized expressions, maps, and function calls.



The complexity lies in how this representation is evaluated. Because the semantics of string interpolation is already clear, I'll describe the evaluation of free interpolation in terms of its **equivalent string interpolation** (or ""ESI"" for short). To clarify that the strings returned by the ESI should be unquoted, I'll use backticks instead of double quotes to delimit them (so ``foo`` would have the same value as `unquote(""foo"")`).

The ESI for an `Interpolation` production is, predictably, ``#{CommaList}``.

Similarly, for a `UnaryOperation` with an operator and an `Interpolation` operand, the ESI is ``~` + ESI(Interpolation)` = ``~#{CommaList}``. If there was any whitespace in the source text between the operator and the `Interpolation`, a single space is also added after the operator in ESI.

| SassScript | ESI | CSS |
| --- | --- | --- |
| `-1` | `-1` | `-1` |
| `- 1` | `-1` | `-1` |
| `-#{1}` | ``-#{1}`` | `-1` |
| `- #{1}` | ``- #{1}`` | `- 1` |

For an `Operation` production, all _adjacent_ `UnaryOperation` sub-expressions that are _not_ `Interpolation`s are parsed as normal, and interpolated into the ESI alongside the `Interpolation` subexpressions, separated by the operation in question. As with a `UnaryOperation`, a space will be included before or after the `Interpolation`s depending on whether whitespace appeared in the corresponding location in the source. This is also what allows interpolation in identifiers to work, since adjacent expressions are considered to implicitly have a space operator.

| SassScript | ESI | CSS |
| --- | --- | --- |
| `1 + 2 + 3` | `1 + 2 + 3` | `6` |
| `1 + #{2} + 3` | ``#{1} + #{2} + #{3}`` | `1 + 2 + 3` |
| `1 +#{2}+ 3` | ``#{1} +#{2}+ #{3}`` | `1 +2+ 3` |
| `1 + 2 + #{3}` | ``#{1 + 2} + #{3}`` | `3 + 3` |
| `#{1} + 2 + 3` | ``#{1 + 2} + #{3}`` | `3 + 3` |
| `1 #{2} 3` | ``#{1} #{2} #{3}`` | `1 2 3` |
| `a#{b}c` | ``#{a}#{b}#{c}`` | `abc` |

Finally, `CommaList` productions behave almost the same as `Operation`s. The only difference is that if _only_ the first `Operation` sub-expression is an `Interpolation`, the rest of the list isn't included in the interpolation.

| SassScript | ESI | CSS |
| --- | --- | --- |
| `1, #{2}, 3` | ``#{1}, #{2}, #{3}`` | `1, 2, 3` |
| `1, 2, #{3}` | ``#{1, 2}, #{3}`` | `1, 2, 3` |
| `#{1}, 2, 3` | ``#{1}`, 2, 3` | `1, 2, 3` |
| `#{1}, #{2}, 3` | ``#{1}, #{2}, #{3}`` | `1, 2, 3` |
",nex3,xzyfer
1778,2015-09-21 13:19:51,"Thanks a lot for the really clear write up @nex3. These changes are looking great.
",xzyfer,nex3
1778,2015-09-23 19:28:45,"> the implementation should emit a deprecation warning.

@nex3 Sorry, I don't see how this deprecated behavior would work. How does the user silence the deprecation warning? By changing to a string with interpolation? How does the code interoperate between both values? It seems like there's information loss.
",chriseppstein,nex3
1778,2015-10-10 00:51:58,"I just found one additional case where the new behavior differs from the old, and it's a doozy. It comes up when a dynamic value is included in an interpolated string without an explicit `#{}`‚Äîthat is, for every location that doesn't have a `#{}` in the SassScript but does in the ESI. _If that value is a quoted string_, it will retain its quotes, where if it were explicitly interpolated it would lose them. For example:

| SassScript | ESI | Current CSS | CSS for ESI |
| --- | --- | --- | --- |
| `""foo"" #{a}` | ``#{""foo""} #{a}`` | ``""foo"" a`` | ``foo a`` |
| `$var: ""foo""; $var + #{a}` | ``#{$var} + #{a}`` | ``""foo"" + a`` | ``foo + a`` |

What this means is that the ESI is no longer actually equivalent in all cases, because any of the newly interpolated values may or may not be a quoted string. We can detect this in simple cases like the first example, but not in general.

Hopefully, not too many people are relying on cases we can't detect in practice. I think we should still move forward with the deprecation and accept that our heuristic isn't perfect, but I wanted to put this out there and get people's opinions.

@xzyfer @chriseppstein 
",nex3,chriseppstein
1778,2015-10-10 00:51:58,"I just found one additional case where the new behavior differs from the old, and it's a doozy. It comes up when a dynamic value is included in an interpolated string without an explicit `#{}`‚Äîthat is, for every location that doesn't have a `#{}` in the SassScript but does in the ESI. _If that value is a quoted string_, it will retain its quotes, where if it were explicitly interpolated it would lose them. For example:

| SassScript | ESI | Current CSS | CSS for ESI |
| --- | --- | --- | --- |
| `""foo"" #{a}` | ``#{""foo""} #{a}`` | ``""foo"" a`` | ``foo a`` |
| `$var: ""foo""; $var + #{a}` | ``#{$var} + #{a}`` | ``""foo"" + a`` | ``foo + a`` |

What this means is that the ESI is no longer actually equivalent in all cases, because any of the newly interpolated values may or may not be a quoted string. We can detect this in simple cases like the first example, but not in general.

Hopefully, not too many people are relying on cases we can't detect in practice. I think we should still move forward with the deprecation and accept that our heuristic isn't perfect, but I wanted to put this out there and get people's opinions.

@xzyfer @chriseppstein 
",nex3,xzyfer
1761,2015-07-10 23:20:20,"Thanks for the fix, @nex3 !
",srawlins,nex3
1745,2015-08-21 21:55:49,"@nex3 Ah ha!  I added the loadPath to my grunt-contrib-sass task of '.' and that fixes that problem for me. Thank you.
",mscarchilli,nex3
1739,2015-06-05 21:41:25,"@nex3 yes @blackfalcon is referring to my non-native library which used lists of pairs; I have a newer version which implements the same argument patterns for `map-get-z()` and `map-merge-z()` with native maps‚Äîhttps://github.com/lunelson/sass-maps-plus ‚Äîand so what do you think of comma-separated keys syntax for `map-merge`? Notably, in my implementation, providing a non-map as the final argument causes causes it to work like a `map-set()`, and empty keys/nests are created as necessary. So you could write merges in one of two ways:


",lunelson,nex3
1739,2015-06-11 08:59:26,"@chriseppstein what's your opinion on my comment above?
",lunelson,chriseppstein
1739,2015-06-11 11:30:13,"@HugoGiraudel Can you share with us your opinion why is it so, in mentioned issue above? Thanks in advance
",ArmorDarks,HugoGiraudel
1739,2015-06-11 11:49:43,"@ArmorDarks contrived example: (cc @HugoGiraudel)

This is legal:



However, `map-get($map, foo.bar)` is (currently) not legal syntax. If it were, which value should it refer to? `'baz'` or `'qux'`? There is ambiguity, so dot notation would be a bad idea because of the nature of CSS selectors and the necessity for Sass to play nicely with them.
",davidkpiano,HugoGiraudel
1739,2015-06-11 15:52:44,"@HugoGiraudel hm, can't agree with it. JavaScript is object-based, with hard rely on functions too. So, it shouldn't use dot notation too, since two ways to do same thing would make things disharmoned? Same for Python, etc.

Not to mention, that JS has dot notation, brackets notation and special functions for getting values from ES6 maps (not objects). And you can write your own function to get values from objects too. Which makes about 4 ways to do, from first glance, same thing, but each approach was introduced to target specific purposes.

@davidkpiano Thanks for your input. Though, I think that discussion should go into mentioned issue above, since we're diving into offtopic deeper.

Since you replied here, I'm probably forced to reply here too.

Regarding your example ‚Äî there is no error here. With `map-get($map, nth(&, 1));` you get `baz`, because you're refering to function which is key. With `map-get($map, foo.bar)` you will get `qux`. since you're traversing through existing keys, which are `foo` and `bar`.

`map-get($map, foo.bar)` is totally == to `map-get($map, foo, bar)` if endless arguments for `map-get()` would be implemented ever. So far I don't see issues with it. Maybe I'm missing something.

---

Once again, I'm sorry for post, that raised another discussion here, which in fact should be discussed here https://github.com/sass/sass/issues/1349.

Let's back to our current issue. I doubt that someone will argue with fact, that all would only benefit from having `map-get()` and `map-merge()` which will accept endless number of arguments.

To summarize, I think that there were only few little things that were missed:

> Notably, in my implementation, providing a non-map as the final argument causes causes it to work like a map-set(), and empty keys/nests are created as necessary. So you could write merges in one of two ways:

by @lunelson https://github.com/sass/sass/issues/1739#issuecomment-109447612

And my proposal to use `$path` argument with list inside instead of endless arguments https://github.com/sass/sass/issues/1739#issuecomment-109562901

Regarding my proposal ‚Äî it seems that Sass community more appreciate endless arguments approach, and using of `$path` argument with list seems to be a bit against current approaches of Sass.
",ArmorDarks,HugoGiraudel
1739,2015-07-16 01:11:42,"@chriseppstein Reply to [(comment)](https://github.com/sass/sass/issues/1739#issuecomment-110457642) about map merge. I can see this working in a couple of different ways. Going under the assumption `map-get` is implemented like `map-get($map, foo, bar, baz)`.
1. a. Update `map-merge` to work like this awesome [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function written by @HugoGiraudel. This way `map-merge` is strickly for merging multiple maps, and it adds a recursive functionality that wouldn't break the current implementation.
   b. Add a new `map-set` function that would work exactly like `map-get` except the last argument would be the value that's set.
   
   
   
   The down side would be having to combine it with `map-get` for combining deep maps. But the upside is that you leave the functionality of `map-merge` to just merge maps which is what I would think it would do based off the name. For more examples on how `map-set` would be useful see below.
2. a. Update `map-merge` to work just like `map-get` except the last argument would be the map to merge
   
   
   
   It would return the map of the first argument's map in the arguments list, not the 2nd to last(aka: `baz`) arguments map.
   b. Add a new `map-extend` [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function. It solves a lot of merging issues you may run into when merging multiple maps, and it's recursive.
3. A quazi hybrid of `map-get`, and @HugoGiraudel [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function
   
   

All 3 `map-merge` options are backwards compatable to sass 3.3+. So they're all viable options. Personally I like #1 the most because it would match `map-get` closer for consistency, and because I'm not a huge fan of space delimited lists used in #2. But I can see how #2 is appealing because no new functions have to be added to deal with map merging and it still adds all the functionality of the [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1).

No matter which is direction is chosen for dealing with merging maps, I would still like to see a `map-set` function added that's specifically used for setting values in a map. I think it would be useful because sometimes you need to update a value of a map and at the same time remove some keys from a map, and sometimes you just want to set a single key in a map; and, in my opinion, writing `map-merge($map, (foo: ""bar""))` to set a single value in a map is weird.

If `map-set` was implemented then there wouldn't be a need to update `map-remove` which would be good because since `map-remove` already uses a an args list and dot notation isn't gonna happen, the first argument would have to be a space delimited list to get to deep values, and then it would have to return the map of first item in the list. Here are some examples more examples of `map-set` combined with `map-remove`, and how you would do it without `map-set`.


- **Note:** `map-remove` would still return a new map of the map that it was passed.
- **Note:** these examples are using `map-merge` suggestion `#1` from above

#### Examples: With `map-set`

###### Remove values of a nested map, and not update values.



###### Removing `qux`, and `quux`, and setting `baz` to `""waldo""`



###### Setting a value of a nested map



#### Examples: The same examples without `map-set`

###### Remove values of a nested map, and not update values.



###### Removing `qux`, and `quux`, and setting `baz` to `""waldo""`



###### Setting a value of a nested map



In all cases `map-set` uses less characters and parentheses than `map-merge`, and less which increases readability. As mentioned before this would leave the functionality of `map-merge` to be just for merging maps which in my opinion would very good thing. Hope this leads to a solution for this issue.
",tjbenton,HugoGiraudel
1739,2015-07-16 01:11:42,"@chriseppstein Reply to [(comment)](https://github.com/sass/sass/issues/1739#issuecomment-110457642) about map merge. I can see this working in a couple of different ways. Going under the assumption `map-get` is implemented like `map-get($map, foo, bar, baz)`.
1. a. Update `map-merge` to work like this awesome [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function written by @HugoGiraudel. This way `map-merge` is strickly for merging multiple maps, and it adds a recursive functionality that wouldn't break the current implementation.
   b. Add a new `map-set` function that would work exactly like `map-get` except the last argument would be the value that's set.
   
   
   
   The down side would be having to combine it with `map-get` for combining deep maps. But the upside is that you leave the functionality of `map-merge` to just merge maps which is what I would think it would do based off the name. For more examples on how `map-set` would be useful see below.
2. a. Update `map-merge` to work just like `map-get` except the last argument would be the map to merge
   
   
   
   It would return the map of the first argument's map in the arguments list, not the 2nd to last(aka: `baz`) arguments map.
   b. Add a new `map-extend` [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function. It solves a lot of merging issues you may run into when merging multiple maps, and it's recursive.
3. A quazi hybrid of `map-get`, and @HugoGiraudel [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function
   
   

All 3 `map-merge` options are backwards compatable to sass 3.3+. So they're all viable options. Personally I like #1 the most because it would match `map-get` closer for consistency, and because I'm not a huge fan of space delimited lists used in #2. But I can see how #2 is appealing because no new functions have to be added to deal with map merging and it still adds all the functionality of the [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1).

No matter which is direction is chosen for dealing with merging maps, I would still like to see a `map-set` function added that's specifically used for setting values in a map. I think it would be useful because sometimes you need to update a value of a map and at the same time remove some keys from a map, and sometimes you just want to set a single key in a map; and, in my opinion, writing `map-merge($map, (foo: ""bar""))` to set a single value in a map is weird.

If `map-set` was implemented then there wouldn't be a need to update `map-remove` which would be good because since `map-remove` already uses a an args list and dot notation isn't gonna happen, the first argument would have to be a space delimited list to get to deep values, and then it would have to return the map of first item in the list. Here are some examples more examples of `map-set` combined with `map-remove`, and how you would do it without `map-set`.


- **Note:** `map-remove` would still return a new map of the map that it was passed.
- **Note:** these examples are using `map-merge` suggestion `#1` from above

#### Examples: With `map-set`

###### Remove values of a nested map, and not update values.



###### Removing `qux`, and `quux`, and setting `baz` to `""waldo""`



###### Setting a value of a nested map



#### Examples: The same examples without `map-set`

###### Remove values of a nested map, and not update values.



###### Removing `qux`, and `quux`, and setting `baz` to `""waldo""`



###### Setting a value of a nested map



In all cases `map-set` uses less characters and parentheses than `map-merge`, and less which increases readability. As mentioned before this would leave the functionality of `map-merge` to be just for merging maps which in my opinion would very good thing. Hope this leads to a solution for this issue.
",tjbenton,chriseppstein
1739,2015-11-13 22:43:00,"@nex3 I'm not entirely sure what you are proposing.

You want `map-merge($map1, $keys, $map2)`? Or, just leave `map-merge` as it is with two maps? Would `$map2` support being a nested map?

Can you provide some examples of what you are proposing?
",hcatlin,nex3
1726,2015-05-23 02:08:27,"@nex3 Doesn't your example use a `.scss` file, whereas mine uses a `.css` file?
",cvrebert,nex3
1721,2015-05-11 15:39:40,"@nex3 

>  by contrast, a missing key in a map is much more likely to be purposeful.

Isn't that more in the category of opinion than a rule ‚Äì null or error in all cases 
would be a more consistent choice.    
",jakob-e,nex3
1715,2015-05-09 00:51:51,"Thanks for the reply, I appreciate the detail. Where would I find the docs
for the Ruby API?

On Friday, May 8, 2015, Natalie Weizenbaum notifications@github.com wrote:

> Closed #1715 https://github.com/sass/sass/issues/1715.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1715#event-300728212.

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowski
1710,2016-02-09 06:06:15,"@chriseppstein lighter dependencies is great, but not if it makes my i7 spin half of it's power to the ruby process :)

I'd gladly trade a sucky dependency structure for battery life and a silent computer. I literally only noticed something was up because it was blowing like an airplane while just working in sublime.
",actuallymentor,chriseppstein
1707,2015-04-21 21:10:55,"@nex3 Excellent, thank you! Might look into contributing this on the next hack night if no one beats me to it (please do).
",henrik,nex3
1697,2015-06-23 00:28:46,"Hi @nex3, I've redone the implementation to match the behavior of top-level double-spacing. Looks better.
",srawlins,nex3
1689,2015-04-02 13:49:16,"@Snugug Ah, ok. Missed that one, probably because it's closed.
",hon2a,Snugug
1684,2015-04-22 09:06:36,"@nex3 `.wont-extend-hover a:hover` has specificity 21, not 11. So, `.will-extend-hover a:hover` should be generated.
",piouPiouM,nex3
1684,2015-04-23 00:01:39,"The specificity of `.wont-extend-hover a:hover` doesn't matter. The only specificity guarantee that Sass provides is that the generated selector will have specificity greater than or equal to **the extender**, which is `.wont-extend-hover a`.

@HugoGiraudel You're misreading that sentence; the `it` there refers to `a:hover`.
",nex3,HugoGiraudel
1684,2015-04-23 07:49:38,"> @HugoGiraudel You're misreading that sentence; the it there refers to a:hover.

My bad. I had a quick read. :)
",HugoGiraudel,HugoGiraudel
1663,2015-07-10 08:24:26,"@nex3 that doesn't help. Output for that one character is still `content: ' √î√á‚ïë';` instead of `content: ' ‚Ä∫';`.

I've put `@charset 'utf-8';` in the file where the character is, made 5000% sure it's actually saved as utf-8, and I've even put the `@charset` declaration in _every_ scss file. No juice.
",thany,nex3
1642,2015-02-22 12:19:26,"No, `rgb()` and `rgba()` are handled the same way, but please see http://jsfiddle.net/2qsfh8ka/3/

`.icon.home` isn't shown with Firefox as it uses a hex value as the path fill color. `.icon.user` and `.icon.search` are working correctly. The problem with `rgba()` is purely that I don't expect a hex value to be rendered. Imagine a highly variable driven setup, where multiple pages are supported and the colors will be inserted to the svg background like `<path fill=""#{$buttons-fill-color}""`. So in theory I _could_ use all kinds of colors for `$buttons-fill-color`, but with the current fallback to hex this is kind of confusing without finding it in the docs.

So, @nex3: can you please document the fallback?
",tatze,nex3
1631,2015-02-14 16:02:47,"@nex3, apologies i should have updated this.  It is entirely driven by an underlying issue with the RB-FSevent gem.   I don't have enough knowledge to provide anything definitive on this, but it seems that RB-FSevent sometimes cannot handle camelCasedDirNames.   Once I moved the contents to another directory, without caps in the name, I had no issues. 
",crispen-smith,nex3
1627,2015-02-06 15:52:24,"@HugoGiraudel is right. The `&` character in Sass (at least in the latest versions), in your usage, is treated as a variable.



To fix your code, you can just concatenate: `div#{&+__child}`
",davidkpiano,HugoGiraudel
1620,2015-11-11 19:47:40,"@chriseppstein want to give an example of how this might look in Ruby Sass, so that people can maybe try and do it?
",hcatlin,chriseppstein
1619,2016-09-29 10:29:45,"@nex3 I am just curious if you could provide a link/reference that `>>>` will be pulled from the spec. All the material I can find states that `/deep/` will be replaced by `>>>`

https://drafts.csswg.org/css-scoping/
",aronallen,nex3
1608,2015-01-20 18:43:04,"@Snugug It is similar in that we need to standardize the configuration format. But it's orthogonal to this issue.
",chriseppstein,Snugug
1608,2015-01-30 23:31:01,"@nex3 Sass extensions are currently a major impediment to making Sass projects portable across implementations. We _need_ to provide a way for people to have a sass file that can run reliably across several implementations even if that sass file using host-language extensions. Without mitigation, we still have the schism we're trying to avoid in the community. You only addressed option #2 here and I agree that Lua or something else is probably premature. Instead, my preference right now is to have a standard way of making several host implementations of a sass extension work together. 
",chriseppstein,nex3
1608,2015-02-09 23:28:16,"@nex3 I suppose it would just be a ruby file that defines functions. those would be class_eval'd into a module and that would get included into the evaluation context based on finding it with `@use`. in terms of lookup, I guess we'd need an extension load path or to just piggy back the sass load path for this.
",chriseppstein,nex3
1602,2015-01-29 04:30:47,"@nex3 Sorry for the slow reply.  I agree that I would prefer consistent behavior with 1 or multiple files, but I did not mean to suggest that this behavior should be changed.  I merely wanted to document this behavior.  If you'd rather update the behavior, that's of course fine by me (not that it's my call).

Is there anything I can do to help push thing along?  I could submit a PR for the actual code change, but that looks like a small component of deprecating the feature... Thoughts?
",danfinnie,nex3
1602,2015-02-04 01:10:41,"@nex3 I took a stab at this today.  I noticed that your deprecation noticed mentioned directories.  My interpretation of this was anytime you passed multiple files on the command line, whether because you specified a directory or because you listed 2 files explicitly.  Is this how you're seeing it?
",danfinnie,nex3
1599,2015-03-27 22:28:31,"@nex3 any ideas when this might be fixed?
",lifeiscontent,nex3
1598,2015-01-28 15:59:27," :-1:  
@nex3 Not saying not true ‚Äì but in the case of url the following does work and is a major FTW when it comes to deployment on shifting path structures.¬† 


",jakob-e,nex3
1598,2015-11-07 00:34:33,"@nex3,

This is so annoying. If we allow importing of CSS files in #556 (and already with @chriseppstein's https://github.com/chriseppstein/sass-css-importer I don't see why you wouldn't be able to override `url()`.

I'm importing a 3rd-party CSS file (that I don't want to modify), but it has relative urls to the assets. Without being able to override the `url()` function (and reset it after import preferably), I have to modify the 3rd party CSS. :(
",davidbarratt,nex3
1597,2015-01-17 14:22:13,"@Stephn-R Here's the Gruntfile
https://gist.github.com/jawittdesigns/da37c9335808234a3291

@nex3 How do you get a stack trace
",jawittdesigns,nex3
1596,2015-01-17 02:49:05,"@justinryder is right that this violate's Sass's specificity guarantees, as strange as the input seems.

@chriseppstein that would be next to impossible to dedup without completely tearing out every optimization Sass does here.
",nex3,chriseppstein
1596,2015-01-17 05:51:35,"Thank you @lolmaus for the clarification and @chriseppstein for the example. Those are completely valid reasons for having a repeated selector like that.
",Stephn-R,chriseppstein
1591,2015-01-16 22:54:41,"I believe I fixed this issue @chriseppstein by changing the variable name in the keyframes to use interpolation. Terribly sorry if this wasted your time. This requirement must have changed since the latest version of Sass.
",NomNomCameron,chriseppstein
1590,2015-01-13 23:03:48,"Makes sense. Thanks for the explanations @chriseppstein & @HugoGiraudel 
",una,HugoGiraudel
1590,2015-01-13 23:03:48,"Makes sense. Thanks for the explanations @chriseppstein & @HugoGiraudel 
",una,chriseppstein
1583,2015-05-11 18:34:20,"@HugoGiraudel there isn't a plan to change that behavior. `hello world` is a list, not a string, so it's not a valid value for `quote()`.
",nex3,HugoGiraudel
1582,2015-01-08 18:47:36,"@chriseppstein I know ‚Äì¬†it was just a bit of crazy thinking :)
",jakob-e,chriseppstein
1582,2015-01-09 17:00:19,"@nex3 I agree with your comments about the data format and look forward to discussing what we think that should look like. I have a few ideas that I can propose as a starting point for discussion but nothing I am wedded to.

Regarding the state of the captured data, the only thing that makes sense to me is that it is fully resolved CSS from the lexical scope of the include. At the point that this content is placed into the stylesheet again, they can use Sass constructs like `&` and `@at-root` to manipulate the new context of the content. Reproducing Sass code like you mention is exactly what mixins are good for and if we ever needed such a construct it would probably be some sort of lambda equivalent for mixins.
",chriseppstein,nex3
1582,2015-02-17 18:18:36,"@nex3 



Obviously, in this simplified example there's no need for the component indirection, but you can imagine that the component system allows precision tweaks to registered components in different contexts or themes that makes it necessary to manipulate the evaluation time result of the mixin as data before outputting it.
",chriseppstein,nex3
1582,2015-03-03 22:22:57,"@nex3, yes, but we need to intercept the results of running that mixin to merge it with other information in our theming/component system. We need the results of the mixin _as data_.
",chriseppstein,nex3
1582,2015-03-04 09:12:55,"Here's a slightly more complex example that might demonstrate the idea @chriseppstein and I have tossed around...



To be fair, the above example can be achieved purely using the `capture-mixin-output` mixin mentioned above, but it means we're now limited to only using the result within a mixin context. That is, we couldn't use `get-component-styles` as a function to do other data manipulation in another function call.
",eoneill,chriseppstein
1574,2015-01-05 23:58:05,"@Snugug We do support bare words, but bare words that are colors are colors.
",chriseppstein,Snugug
1574,2015-01-06 01:46:21,"@chriseppstein Yup, I think that's what I meant to say in some way.
",Snugug,chriseppstein
1573,2014-12-26 14:28:42,"@Snugug, you are right. Mixins can do this right now. But what is wrong with the following CSS:



If we have to support old browsers (e.g. IE8), we have to include a fallback to px or other unit.  We could add a mixin, for example, to add that support. That is going change all the selectors that use rem units. When the support for old browsers drops you end up with a mixin that do nothing but write the same it was written in the original CSS.

Polyfills address these problems attaching fallbacks and behaviours to the missing features. I would like to have the same tools in SASS language for properties. But it is only my opinion.
",victorherraiz,Snugug
1573,2014-12-26 15:32:08,"@Snugug, will your suggestion fall back to rendering `.example { display: flex };` if the `flex` mixin was not defined?
",lolmaus,Snugug
1573,2014-12-26 15:41:31,"@Snugug, both examples share the same problem: a property with a value that is not fully supported. Stylus, for example, does not have the ""!property"" flag, every property inside a transparent mixin is a real one. 

My flex box example is really out of date, I've been working for projects that has to support a ""stupid"" amount of browsers. I am getting a little rusty lately :smile: 
",victorherraiz,Snugug
1573,2014-12-26 15:59:29,"My point here is that ultimately what's being discussed is a transparent syntax for mixins, something specifically discussed in #366, making this a duplicate of that and not warranting an entirely new directive and flag.

@lolmaus that syntax would not, but if you read #366 there's discussion on it and that's a place to have that discussion. I personally dislike the Hell out of the transparent syntax as it adds a lot of really hard to debug abstraction.

> On Dec 26, 2014, at 10:41 AM, victorherraiz notifications@github.com wrote:
> 
> @Snugug, both examples share the same problem: a property with a value that is not fully supported. Stylus, for example, does not have the ""!property"" flag, every property inside a transparent mixin is a real one.
> 
> My flex box example is really out of date, I've been working for projects that has to support a ""stupid"" amount of browsers. I am getting a little rusty lately 
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,Snugug
1573,2014-12-26 16:19:17,"@Snugug, I do not like the idea of every single mixin could be use as a transparent one (e.i. Stylus). That is why the new syntax/feature request and also a new thread to discuss it. 

In my opinion, we are having the same debug problems with autoprefixer and the best solution I could imagine at the moment to fully control the CSS output and debug info for fallbacks is a mixin.
",victorherraiz,Snugug
1573,2014-12-28 11:55:47,"@HugoGiraudel, SASS already has functions. Not long ago, I remember a developer wondering: Where do we have the ""calc"" function?. I agree that transparent mixins could be use for 'evil' but, in my humble opinion, SASS should not protect developers from their own mistakes. 
",victorherraiz,HugoGiraudel
1573,2015-02-06 13:10:40,"@chriseppstein and @Snugug, many thanks for your replies :+1: 
",victorherraiz,Snugug
1573,2015-02-06 13:10:40,"@chriseppstein and @Snugug, many thanks for your replies :+1: 
",victorherraiz,chriseppstein
1572,2015-01-10 22:10:14,"@chriseppstein This seems to go against the [W3C spec for distance units](http://www.w3.org/TR/css3-values/#lengths) which states:

> ...for zero lengths the unit identifier is optional (i.e. can be syntactically represented as the <number> ‚Äò0‚Äô).

It seems unnatural to put a unit for a zero value, and I feel that expressions should allow zero values to have optional unit identifiers, at least for distance values.


",davidkpiano,chriseppstein
1572,2015-02-07 15:51:53,"@chriseppstein Is there anything you would like to add regarding @davidkpiano's comment? I am asking because I have [a pending issue about this on Sass Guidelines](https://github.com/HugoGiraudel/sass-guidelines/issues/74).
",HugoGiraudel,chriseppstein
1570,2014-12-22 18:00:20,"@lolmaus @Snugug I didn't notice that, now i see what sass is doing. The behaviour was not straightforward for me so I didn't check the invalid css. Thanks!
",maxgalbu,Snugug
1564,2015-01-05 23:44:13,"@nex3, you understand it wrong. I do already have a lot of existing css code, and I want to wrap it around, namely put that code somewhere, not wrap inner of every selector.
",nazar-pc,nex3
1563,2015-01-09 17:29:14,"There are problems with the Sass cache file naming on windows. As seen here: https://github.com/Compass/compass/issues/1791. @nex3 I consider this a Sass bug even though it's mostly been compass users bumping into it. Though, I'm not sure what the fix should be. Maybe on windows we should mangle the cache file names more?
",chriseppstein,nex3
1563,2015-02-11 13:17:55,"Thanks for the info @chriseppstein The _removed_ is David so the paths is C:/Users/David/AppData/Local/Temp... 
",davidtme,chriseppstein
1563,2015-03-06 00:19:50,"@chriseppstein This limitation has actually been removed some 15 years ago in Windows 2000. Paths can be 65535 characters long (or bytes, not sure), when using the ""new"" APIs.
",thany,chriseppstein
1562,2015-01-17 03:31:19,"I suspect @chriseppstein is correct. I don't think this is making Sass unusable for all Windows developers‚Äîwe would have heard much more about it if so‚Äîwhich suggests that it's specific to your configuration, and likely the size of your working directory. In that case there's not much we can do.
",nex3,chriseppstein
1561,2014-12-18 16:31:07,"@HugoGiraudel, yea that is what comments are for.

I guess I was asking a mix of semantic naming conventions and if there would be room or a need for something like JavaDoc but for Sass.
",allejo,HugoGiraudel
1561,2014-12-18 16:37:16,"@allejo, i asked @HugoGiraudel to comment on this because Hugo is building JavaDoc for Sass: https://github.com/SassDoc/sassdoc

Currently SassDoc aims at documenting functions API. I hoped Hugo would come up with a suggestion for documenting variables.
",lolmaus,HugoGiraudel
1561,2014-12-18 16:40:40,"Actually SassDoc is perfectly able to document variables, and for a while
now. Functions, mixins and placeholders as well. And version 2 is coming in
early January for much more coolness.

Le Jeu 18 D√©c 2014 17:37, Andrey Mikhaylov (lolmaus) <
notifications@github.com> a √©crit :

> @allejo https://github.com/allejo, i asked @HugoGiraudel
> https://github.com/HugoGiraudel to comment on this because Hugo is
> building JavaDoc for Sass: https://github.com/SassDoc/sassdoc
> 
> Currently SassDoc aims at documenting functions API. I hoped Hugo would
> come up with a suggestion for documenting variables.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1561#issuecomment-67514006.
",HugoGiraudel,HugoGiraudel
1560,2014-12-17 10:56:36,"@HugoGiraudel, here's a counter-argument: Sass aims not to derive from CSS standard, and CSS does use `/` as part of a property. 
",lolmaus,HugoGiraudel
1560,2015-01-12 10:37:56,"What do you consider to be ""semantically valid Sass""? Is it what you expect it to be?

From my point of view, ""syntactically valid Sass"" is what @nex3 and @chriseppstein determine to be.
",lolmaus,chriseppstein
1551,2017-01-11 08:36:40,"@nex3 Just to chime in (since im am also experiencing the same problem): The problem still persists even if using the current version of jruby (9.1.6.0). Our plugin definition in maven looks like this:


I agree that this is a jruby bug - buuut: Some digging around showed that (at least with the current version) it might be related to the fact that the output path is not existing. The error reads as follows:

If I now go ahead an manually create ``target\generated-resources\saas\resources\default\css`` the problem goes away. Perhaps that might be a feasible workaround?


",sebcramer,nex3
1548,2014-12-06 01:12:18,"@nex3: just checked the C, Perl and PHP implementation and they include the upper bound for `rand`:
http://www.w3schools.com/php/func_math_rand.asp
`If you want a random integer between 10 and 100 (inclusive), use rand (10,100).`
http://man7.org/linux/man-pages/man3/rand.3.html
`returns a pseudo-random integer in the range 0 to RAND_MAX inclusive`
But I also checked c++ `uniform_real_distribution` which seems to exclude the upper bound!
`rand(x | a, b) -> 1/(b-a) -> a <= x < b`
",mgreter,nex3
1547,2014-12-02 15:12:02,"Correct me if I am wrong @HugoGiraudel but I believe that this is not an issue about whether an ""applicator"" is needed or not, the issue is with how the `@include` directive was designed.

It was not originally designed for those types of operations. Plus, there would be a serious concern with scope. For example, if you did the following:



These variables would exist outside the scope of the initial Sass compilation sequence and be rendered useless. 

HOWEVER, I would consider just using something like a **_variables.scss** file to import. This is what I use and have found it very helpful.

Reference: http://thesassway.com/beginner/how-to-structure-a-sass-project
",Stephn-R,HugoGiraudel
1539,2014-11-28 12:32:30,"@nex3 i just wanted to encapsulate all styles for h1 inside it without duplicating - it was just PoC. I was wondering if there is a possibility of writing SCSS without duplicates.
",kl3ryk,nex3
1535,2014-11-25 10:04:40,"Thanks @nex3, this is my first sass project, so useful to see what you can do with it. Will keep your example as a reference.
",SWGFL,nex3
1530,2014-11-19 21:07:28,"@nex3 I feel like using index as a solution to this is unclear and relies on too specific a behavior of another function.

As a writer/reader of sass, it makes the code less accessible and readable. Also this behavior is not very documented and likely leads to authors reinventing the wheel when faced with this issue.
",whmii,nex3
1529,2014-11-19 13:20:20,"Hi, @nex3: Thanks for the quick reply! However, I don't see anything in #1527 that addresses the error I'm seeing or offers me a solution. I'm trying to restore my Sass workflow to working order. Please reopen this issue or direct me to a solution I can implement? Thanks!
",circa1977,nex3
1528,2014-11-18 21:08:39,"Ok, thanks! Just wanted to make sure I wasn't doing something wrong.

On Tuesday, November 18, 2014, Natalie Weizenbaum notifications@github.com
wrote:

> Yes, this is expected. Sass follows other UNIX commands in this regard;
> you'll see the same behavior with cp, for example.
> 
> --update works differently because it's often responsible for recreating
> an entire directory tree.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1528#issuecomment-63543984.

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowski
1528,2014-11-22 02:49:09,"@robwierzbowski I think you posted that in the wrong thread
",nex3,robwierzbowski
1527,2014-11-25 02:04:05,"@nex3 - yes I considered that too, I'm just overloaded with bugfixes right now - so the overhead of a new gem will be greater (considering I need to rethink some points), while I'm sure a lot of people would be happy to get this fixed right now. 

I'll get the review points addressed soon, so that's no problem on my side - no matter how happy I'd be to skip merging this and have a new `listen-compat` gem ready. Unfortunately, I strongly believe bugfixes have a higher priority than inter-gem refactorings.
",e2,nex3
1521,2014-11-13 12:52:40,"@Snugug I totally undestand the repercussions of this. That's why I assumed the idea might get rejected at first. But bear with me for sec.

Let's consider the part of your answer about permutations. Cannot implementation be chosen to be conservative in this regard and thoughful of a way to minimize the amount of generated media queries? I mean, look, the `@extend` directive. It may also at first seem prone to expand your code with all permutations but it doesn't so much, right? So my point is when a though put into this a way can be found.

As to using the mixins.. 
Let's consider a common - and real - usage scenario. I bower-install a SASS-based package, say, Zurb Foundation (I already mentioned it). Okay, they provide variables to customize the look, say, height of a top bar. But they use only one(!) height variable for this. A single height for three visual variations (small, medium, large). So _without_ altering the Foundation code or overwriting parts of their code, it seems, I cannot achieve my goal (and my goal is to have varying heights based on the resolution). I cannot use mixins, for it means changing _thier_ code.

The way out seems to be in split-variables. Can you see my point now?
",AndrewRevinsky,Snugug
1521,2014-11-13 23:55:34,"@Snugug Thanks for the suggestions, the links, and the code snippet. (A link was a waste of your energy, though. 'Cos ""I've been there, done that"" before writing here. Let's hope it'll help educate others.)
So.. 
Regarding your concern that since a variable is used in many places it may break something. But this is exactly what I am after. See, there's so many places a variable might be used in (esp. when we talk of 3rd parties') that it's just a nuisanse to embark on code hunting for it, recreate fixtures (sometimes we need to recreate contexts) in your code, and there will still be lots of chances that you've overlooked something. One bullet in form of a _split variable_ (I cling to the term I invented) might just accomplish a hectic task.

Regarding the code you supplied. Thanks again. It has a caveat. It relies on the assumption there's a module involved that generates styles for a certain block. However there might not be a separate module. And besides, is it feasible to re-run the entire module when I already indicrectly included it by referencing 'foundation.scss' (I use it here as an example, you understand)? What will be the overhead in terms of over-populated CSS code? 

Besides, concerning your argument on mixins. I see it as a hack in my use case. What is wrong in requesting a language feature? Like in any language, doesn't a certain expected task or a solid usage scenario warrant a feature? (Introduction of a new keyword, reuse of old ones, etc.?) I mean, there are tons of examples. And I believe I sketched a good, reasonable use case to try and convince people that what currently gives a warning/error during compilation might actually be implemented to be a great feature and to allow to accomplish a task with less amount of code. 

If there's a fear that this feature will become over-zealous, you can always tame it with compile-time options.
",AndrewRevinsky,Snugug
1521,2014-11-14 00:01:06,"@cimmanon Thanks.
Isn't it about time to start thinking there may be something in it, if _""the question pops up on SO often enough""_?

Adding extra styling sometimes isn't an easy option. I believe SASS/SCSS was created to save people from complexity giving them means to style with less effort. No? (Please also read my reply to @Snugug.) 
",AndrewRevinsky,Snugug
1512,2015-03-07 17:53:53,"I just had a look at this and I actually agree with @xzyfer.

Take this example:



Ruby Sass (3.4.12):



Libsass:



IMO the output of Ruby Sass changes the semantics. The original expression would only evaluate true if `baz: baz` is true. In the Ruby Sass output, the whole expression is also true if only `foo: foo` is true. Either the semantics of css for `and`/`or` is strange or am I missing something else? IMO `and` has always higher precedence than `or` operations!? Although I couldn't find anything specific in the [specs](http://dev.w3.org/csswg/mediaqueries/#mq-syntax).
",mgreter,xzyfer
1512,2015-03-11 00:31:32,"Actually I'm not sure with whom you agree (you didn't clearly state that). But let me explain it a little more. The example given by @xzyfer is unfortunately not optimal, since the `and` comes before the `or`, and in this situation the parentheses don't make a difference, since the `and` will be evaluated first (as it should to its precedence). But this changes if you have the `or` first. The key here is that `and` has a higher precedence than `or`, so the parentheses are needed if we want to give `or` the highest precedence in the expression (and ruby sass seems to remove exactly these parentheses).

Take this haskell example:



Or in Perl



I gave this example in my post above:



Which ruby sass changes to:



I actually created a test, and now comes the clue: It seems that the specs @cimmanon mentioned are implemented pretty strict, so that something like the following will always be ignored:



So take this example:



This actually shows `works` in every browser I tested (firefox, chrome, opera). That should prove that removing the parentheses actually does change the behavior, although in a different way than I expected!
//CC @nex3 @chriseppstein 
",mgreter,nex3
1512,2015-03-11 00:31:32,"Actually I'm not sure with whom you agree (you didn't clearly state that). But let me explain it a little more. The example given by @xzyfer is unfortunately not optimal, since the `and` comes before the `or`, and in this situation the parentheses don't make a difference, since the `and` will be evaluated first (as it should to its precedence). But this changes if you have the `or` first. The key here is that `and` has a higher precedence than `or`, so the parentheses are needed if we want to give `or` the highest precedence in the expression (and ruby sass seems to remove exactly these parentheses).

Take this haskell example:



Or in Perl



I gave this example in my post above:



Which ruby sass changes to:



I actually created a test, and now comes the clue: It seems that the specs @cimmanon mentioned are implemented pretty strict, so that something like the following will always be ignored:



So take this example:



This actually shows `works` in every browser I tested (firefox, chrome, opera). That should prove that removing the parentheses actually does change the behavior, although in a different way than I expected!
//CC @nex3 @chriseppstein 
",mgreter,xzyfer
1509,2014-11-07 18:57:07,"I didn't think my post was vague I just didn't want to propose a solution because I wanted to see what people thought before I put forward my own theories.

@nex3 While the example you've provided does do the job of solving the problem in my example, it still quite messy and with more complicated scenarios it doesn't replicate very well.

For example if you want to write lots of variants of the following:



It becomes difficult to read and as far as I know this is not possible to solve with mixins.

If you've used CSS Crush before you might have seen it has a feature which allows you to create [selector aliases](http://the-echoplex.net/csscrush/#core--selector-aliases) which helps when writing your styles.

They work like this:



From your post though it sounds like you don't have any plans on expanding Sass to support something like this.
",sevenupcan,nex3
1509,2014-11-07 20:17:45,"@cimmanon awesome, I wasn't aware you could do this! Looks like this would come in really handy. Thanks.

I guess the only problem here there is I would still have to create a function for each alias.

Unless I create a generic function which I pass other functions in like @nex3 suggestion (still not ideal but better than nothing).


",sevenupcan,nex3
1496,2015-11-13 20:30:51,"What are the thoughts here on the `===` unitless comparison? Seems like it might make the deprecation warning have a more useful suggestion. @nex3?
",hcatlin,nex3
1484,2014-10-31 20:53:50,"@robwierzbowski That presents size issues for the resulting CSS document. I don't think most users would want a gigantic base64 comments in the stylesheet that everyone downloads.
",nex3,robwierzbowski
1484,2014-10-31 21:12:54,"Well you wouldn't want to create sourcemaps for production assets. I think
that's a case of knowing how to use your tools.

On Friday, October 31, 2014, Natalie Weizenbaum notifications@github.com
wrote:

> @robwierzbowski https://github.com/robwierzbowski That presents size
> issues for the resulting CSS document. I don't think most users would want
> a gigantic base64 comments in the stylesheet that everyone downloads.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1484#issuecomment-61329855.

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowski
1477,2014-10-23 17:44:28,"@dustindowell22 Quite clever :+1: 
@HugoGiraudel My thought too
",jakob-e,HugoGiraudel
1477,2014-12-22 16:59:33,"@dustindowell22 @HugoGiraudel @jakob-e 

I've implemented the optional percentage in the above pull request, but am noticing only slightly different values from @dustindowell22's implementation. 

https://github.com/jshawl/sass-invert-tests 
",jshawl,HugoGiraudel
1472,2014-10-16 12:29:24,"@Snugug Could you explain as why this is a duplicate? As I see it #1094 is a compilation of `@import` related issues but it doesn't contain any ideas as explained above.
",fnky,Snugug
1466,2015-01-09 17:46:18,"@nex3 Once libsass is at feature parity I think we need a few things to keep things that way:
1. A clear explanation of every language change in english (not just a code delta).
2. Every language change needs to be named so that we can report compatibility on it.
3. A way for libsass to weigh in on whether a language change should be made. If a feature
   is onerous for them to implement or would have undue performance impacts, then we should
   consider that carefully before going forward.

We're keeping two projects in sync now. It's going to involve some process beyond just adding some tests to sass-spec. I don't want the process to be cumbersome, Maybe it's as simple as getting :+1: from the libsass team on the Sass issue tracker to know they've acknoledged a feature is coming and they don't have any major reservations about it
",chriseppstein,nex3
1466,2015-01-20 17:56:42,"@nex3 So, basically, this nullifies what we said we would do at SassConf. You're saying you're not going to go out of your way to define the language outside of helping write some tests and now you're saying you're not going to wait for them to release. What exactly are we going to do to keep these communities from significantly diverging? 
",chriseppstein,nex3
1466,2015-01-20 18:42:13,"@nex3 Another thing to note is that speed is not the only driver of libsass adoption. libsass makes it trivial to use sass in a variety of host languages where exec'ing out to a ruby environment is complex and slow. libsass is the preferred implementation for php, node, java, and perl environments because it's less hassle to install.
",chriseppstein,nex3
1466,2015-01-20 20:54:40,"I have to agree with @chriseppstein here. Performance is a reason to use Libsass, but it's far from the only one.

For instance Libsass
- is a better fit for the current generation of node based frontend tooling.
- allows companies who for whatever reason cannot use Ruby in their operating environments. 
- can free developers of what is potentially their only Ruby dependency (and the costs and risk of support another language, and point of failure i.e. rubygems.org)

The final point is the case for my workplace, and many others I'm sure.
",xzyfer,chriseppstein
1464,2015-01-17 15:14:08,"@nex3 You're right that on sass-meister that error is not thrown but on my computer it is.
Anyway even if on sass-meister there is no error compilation, final compiled CSS is still not as expected

Compiled



Expected



This is how it looks on my computer
![error](https://cloud.githubusercontent.com/assets/1313605/5789263/b8455592-9e63-11e4-8154-4bf7faf2a5e2.gif)
",hinok,nex3
1464,2015-01-23 22:20:17,"@nex3 Compiled and Expected results are from sass-meister.com
![zrzut ekranu 2015-01-23 o 23 17 31](https://cloud.githubusercontent.com/assets/1313605/5883831/4c84ddd0-a356-11e4-93cb-b64ab3ce4268.png)

I cannot reproduce only that strange error while compiling my project (look gif).
",hinok,nex3
1458,2014-10-02 06:15:24,"@nex3, `@warn` only outputs a result of an evaluation. To use it, you have to know in advance where this evaluation is done in the code.

What we're asking for is the opposite: we see a line of resulting CSS and want to determine from what line of Sass source it originates from.

I had a situation where i needed that badly last week, with my own code. :sweat: I had overcomplicated things and had hard time debugging it without a way to trace CSS rules to Sass `@include` calls.
",lolmaus,nex3
1453,2014-10-01 19:56:39,"@pdaoust Yes, I've found far too often the need to do `$_my-private-foo` which... feels unclean.

I think it goes without saying too, that this behavior should be extended to functions if it is accepted/implemented.
",northborndesign,pdaoust
1453,2014-10-03 15:33:01,"@nex3 Any particular thread in which these plans are being discussed?
",northborndesign,nex3
1452,2014-09-29 16:49:06,"@pdaoust, Sass has no reasoning behind this behavior. It simply mechanically executes arithmetic operations in the specified order.
",lolmaus,pdaoust
1452,2014-09-29 18:16:40,"@pdaoust how would you convert degrees multiplied by radians?
",lolmaus,pdaoust
1451,2014-09-26 20:14:42,"@nex3, the problem happens with line comments as well.
",lolmaus,nex3
1451,2014-09-26 20:21:59,"> @nex3, the problem happens with line comments as well.

Hmm, that's probably undesirable behavior. Unfortunately, it's also the sort of thing that can only really be fixed with a complete overhaul of the indented syntax parser, which is unlikely to happen any time soon.
",nex3,nex3
1449,2014-09-26 21:40:05,"Thanks for clearing this up, @nex3! :+1: 
",mikefowler,nex3
1430,2014-09-12 11:14:58,"@Snugug yes, I know. But why?
",extempl,Snugug
1425,2014-09-12 21:22:41,"@nex3, thank you for clarifications.

But don't you agree that 



Is way too much typing, compared to LESS'



There _should_ be a simple way to write that. In projects using this convention, people type it like 100 times every day.
",lolmaus,nex3
1425,2014-09-13 20:27:02,"Thank you for changing your mind, @nex3. People keep stumbling upon this: https://github.com/sass/sass/issues/1436
",lolmaus,nex3
1424,2014-09-09 18:20:58,"I wish `@extend` behaved like a pattern to be applied to extending selector, like described in the top post.

Can this be considered a feature request?

PS @chriseppstein, can you please explain the [inconsistency](http://sassmeister.com/gist/a9a9a2edf2b43623a72d) between the plain and interpolated parent selector and between normal and at-root?
",lolmaus,chriseppstein
1424,2014-09-11 14:47:33,"@chriseppstein thanks for your answer.

> > optionally work across all @media when an !allmedia flag is present.
> 
> See #1050.

I was actually dreaming of something like this:



rendering this:



...basically `!allmedia` ignoring the @media context where the `@extend` is used - hunting down the %subject-selector where ever it's found across all @media.

This would allow for very powerful, and easy to use extend libraries.
",maranomynet,chriseppstein
1424,2014-09-11 14:54:07,"@Snugug  That's very nice! Thanks :-)
",maranomynet,Snugug
1416,2014-09-05 16:36:16,"@nex3 I think we should put a statement to this effect in our API documentation. Do you concur?
",chriseppstein,nex3
1411,2014-09-08 03:54:30,"@nex3 unfortunately I can't let you SSH into my machine where I can replicate the issue, but I can do a screen share with you sometime this week to try and help find a diagnosis.
",tbremer,nex3
1411,2014-09-13 02:05:34,"@nex3 I'll send you an email on Monday when I know my meeting schedule a little better and we'll set a time up!
",tbremer,nex3
1411,2014-09-13 05:33:25,"I am digging through the source code a bit, @nex3 are you purposefully using a hash from April 11 as the vendor/listen version??


",tbremer,nex3
1411,2014-09-15 23:00:11,"> I am digging through the source code a bit, @nex3 are you purposefully using a hash from April 11 as the vendor/listen version??

Yes. More recent versions of listen don't support Ruby 1.8.7, but Sass does, so we vendor in an old version to maintain compatibility.
",nex3,nex3
1411,2014-09-20 02:35:21,"@nex3 your fix works great! thank you for addressing this issue. I'm sorry I got caught up in a big project at work work and wasn't able to help / do the screen share.

:relieved: :beers: 
",tbremer,nex3
1409,2014-09-03 07:31:59,"@nex3 My watched folder is on a network drive, not local.
",cyril-lamotte,nex3
1402,2014-08-28 14:18:02,"Thank you for your research, @Snugug. O_O
",lolmaus,Snugug
1402,2014-08-28 14:23:23,"@Snugug thanks for the info. I do have a lot of nested maps, so I frequently use `map-fetch`. I did see a notable performance gain from caching, enough to implement it. I think I created around 3-4 different caching maps for specific repeated tasks, such as fetching the same value 4 times for each breakpoint. Went from compile times of around ~300s to ~200s. But, this might also be because I moved all of the heavy string-related functions over to Ruby when possible.
",ezekg,Snugug
1402,2014-08-28 18:32:01,"@ezekg Can you come up with an example where you're seeing exponential behavior that doesn't involve pulling in all of flint?

@Snugug I have a hard time believing that `call` is actually faster than a literal function call, since all it does is construct a function call node and run it.
",nex3,Snugug
1402,2014-08-28 19:04:57,"@nex3 I can't tell you why or how. I can tell you that [at this place in Singularity](https://github.com/Team-Sass/Singularity/blob/1.x.x/stylesheets/singularitygs/_api.scss#L58), having run tests with a direct function call vs `call`, `call` was faster.
",Snugug,nex3
1402,2014-08-29 08:35:26,"@nex3 for what it's worth, I just revisited `call` vs direct function call and it being faster only appears to still hold true for Sass 3.3. In Sass 3.4 the two methods appear to be identically fast.
",Snugug,nex3
1402,2014-10-01 23:37:06,"@nex3 @Snugug just an update on this, I reversed the order that I am merging maps with `map-merge`; I'm now placing the newest item at the beginning as opposed to the end. My performance benchmarks (from Flint's test suite) show an increase of 23%. Gained another 15% by writing a `map-fetch` function in Ruby to use, when available, in place of the one written in pure Sass.



Still haven't had time to attempt to replicate it outside of Flint, sorry.
",ezekg,Snugug
1402,2014-10-01 23:37:06,"@nex3 @Snugug just an update on this, I reversed the order that I am merging maps with `map-merge`; I'm now placing the newest item at the beginning as opposed to the end. My performance benchmarks (from Flint's test suite) show an increase of 23%. Gained another 15% by writing a `map-fetch` function in Ruby to use, when available, in place of the one written in pure Sass.



Still haven't had time to attempt to replicate it outside of Flint, sorry.
",ezekg,nex3
1398,2014-08-28 20:39:09,"We used this syntax to convert &mdash;as mentioned in [Sass official' docs](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#syntax): 



So maybe we need to try with what you suggest. Is there a specific documentation for this somewhere?

Ping @pascalduez.
",HugoGiraudel,pascalduez
1398,2014-09-12 21:43:24,"@HugoGiraudel All those comments look fine to me (modulo #1432). What's wrong with them?
",nex3,HugoGiraudel
1396,2014-08-25 18:42:42,"@Snugug, it's not a font issue: the old CSS output should've produced the same characters as the new one. And the guy is only unhappy with the new output.

@slawaEremin, that's intended and valid CSS. Extract from Sass 3.4.0 [changelog](http://sass-lang.com/documentation/file.SASS_CHANGELOG.html):

> Sass now follows the CSS Syntax Level 3 specification for determining a stylesheet‚Äôs encoding. In addition, it now only emits UTF-8 CSS rather than trying to match the source encoding.

I don't know how to revert to the old output, you should wait for @nex3 to comment on that. But why doesn't the new format suit you in the first place?
",lolmaus,Snugug
1395,2014-09-03 18:37:32,"@nex3 It seems like there's no good way to construct an escape sequence now. I think we need a fn to construct a character from an escape value. E.g. `char(""f205"")` would return the equivalent of `""\f205""`.
",chriseppstein,nex3
1395,2014-09-04 18:22:43,"@chriseppstein I agree we should have a function that does that, although that's more the purview of #659.
",nex3,chriseppstein
1395,2014-09-19 01:28:32,"@nex3 Any ETA on when we might see this? Thanks!
",probablyup,nex3
1395,2014-09-24 20:28:24,"@nex3 <code>$fatag: \f02b;</code> does not work in 3.4.x.  it outputs <code>\f02b</code> which throws off any icon webfonts being used.  

Has anyone found a workaround for this?  looks like going back to 3.3.x is the only solution that I can find
",jonofthedead,nex3
1395,2014-10-25 12:22:15,"@nex3 This happens to me in Firefox on OS X. It did some research and the last I checked they knew about the bug, but I don't think anyone was working on fixing it.
",whaaaley,nex3
1395,2014-11-02 20:49:52,"@nex3 In Firefox 33 and 33.0.2 (latest) on OS X 10.9.5 and then after I upgraded to 10.10, I'm getting square ligatures. I tried with and without `@charset: ""UTF-8"";`. No BOM. I'm compiling the latest Font-Awesome. It doesn't matter which output style is selected.

Works everywhere else though. Chrome, Safari, Opera on desktop and Chrome, Opera, Firefox on Android. It's just desktop Firefox for me.
",whaaaley,nex3
1395,2014-11-10 19:27:08,"@nex3 Finally sat down and found my problem. Total fail on my part. I had an old Font-Awesome font installed locally from a looong time ago. Firefox wasn't pulling them in and my font paths were wrong. I completely forgot I did that. My bad. Everything is good and working. Sorry about that.
",whaaaley,nex3
1395,2014-12-01 16:36:30,"Your welcome @larsbo! As for a more permanent fix, @nex3, is it possible to include a new function that kinda does the following:



Is this realistic or should we stick with rough fixes like these?
",Stephn-R,nex3
1395,2015-01-17 16:46:19,"@nex3, Sorry I am not trying to argue or anything here. Our perspectives might be just a little different is all. I updated the codepen to show the js. http://codepen.io/coltpini/pen/gbmNrx 

and maybe where I am wrong is this assumption. JS  ""renders"" to DOM and Sass renders to CSS. With that mentality.

JS: ""\e9"" + ""00"" => e900
JS: ""\\e9"" + ""00"" => \e900
JS: ""\""\\e9"" + ""00\"""" => ""\e900""

Sass: ""\e9"" + ""00"" => √©00
Sass: ""\\e9"" + ""00"" => \\e900
Sass: ""\""\\e9"" + ""00\"""" => ""√©900""

this gist is the only way that I could get ""\e900"" (the js third result) out of Sass.
https://gist.github.com/coltpini/b59b3064d6ecde760c6a

I hope that helps in understanding the dilemma I am facing.
",coltpini,nex3
1395,2015-01-23 23:47:09,"Yes. The problem I am running into is that in my css I need `""\e900""` so that the browser can take that and put it into the unicode char. The only thing I can get, with out the workaround, is `""√©00""` or `""\\e900""` both of which won't give me the char in the PUA. 

Your post gave me another thought so I updated http://codepen.io/coltpini/pen/gbmNrx with an icon5 span that tries to break everything out. The problem is that `""\""` won't compile because the `\` is escaping the `""` and `""\\""` compiles to `""\\""` so how can I get my css file to have `""\""`? That is an honest question that I would like to know. I don't know how prevalent of a problem it is but it seems it might be at the root of some of the issues presented here.

I don't know the answer, and maybe the workaround is the answer?

Thanks for your time on this @nex3! 
",coltpini,nex3
1393,2014-08-28 23:46:30,"Okay @nex3 - think I'm onto something, --watch is now (I swear it was failing _all the time_ when I raised this!) only when I give an _absolute_ directory watch path.

I run sass via this script to keep the `.sass-cache` directory out of my project(s).

https://gist.github.com/magnetikonline/5735040

So from that - this works:



this does not:


",magnetikonline,nex3
1393,2014-08-28 23:51:27,"@nex3  yeah tested that... I have symlinks to project paths and have even tried with/without the symlinks to the project roots. In every case if I give a relative path it's now working fine - absolutes (which my script does via `pwd`) fails to watch.

**EDIT:** actually, now I'm getting confused :smile:  it's the symlinks that are doing it.
",magnetikonline,nex3
1393,2014-08-28 23:57:33,"@nex3 yeah I get an initial build, afterwards `touch` to a file does nothing/no recompile.

Just to confirm I have isolated it to giving a watch path that is part of symlink (soft, not hard symlink). Even with the sass-globbing library enabled/disabled it's consistent behaviour.

This used to be okay with pre 3.4 releases.
",magnetikonline,nex3
1393,2014-08-29 00:04:24,"@nex3 yep - at least for me :)

Revised my sass watch script - now getting the resolved path using `pwd -P`, does the trick for me. :smile: .

https://gist.github.com/magnetikonline/5735040/revisions

**EDIT:** thanks heaps Natalie, appreciate your time on this. For me at least, I'm a happy camper now :)
",magnetikonline,nex3
1393,2014-09-06 22:12:23,"@imohkay Might be worthwhile for @nex3 to provide the output for the following.



 Pete
",magnetikonline,nex3
1393,2014-09-13 18:05:26,"@nex3 my directory structure is  a main.scss inside /assets/sass and I have a folder at /assets/css where the sass files are to be compiled to css. Inside assets/sass is a partials folder: i.e. /assets/sass/partials. The main.scss contains the import directives, so basically the only compiled file is main.css inside /assets/css. Again, to clarify, no libraries like compass/bourbon and just a static project.. (3.4.2 doesn't watch on 2 static projects I've tested it on...).
The command is:
sass  --watch assets/sass/style.scss:assets/css/style.css 
",imohkay,nex3
1390,2016-05-20 21:59:36,"@chriseppstein Can this be closed out, or is there more you want to do?
",nex3,chriseppstein
1382,2014-10-24 20:37:33,"@nex3 Thanks for responding, it turns out it was a problem on my end. I had 2 directories with same structure and was running the command from the wrong directory. Thanks again, and sorry about that.
",zquintana,nex3
1378,2014-08-19 17:52:56,"@nex3 According to @patw0929 the sass version was 3.3
",chriseppstein,nex3
1373,2014-08-23 04:09:30,"@nex3 the SASS documentation doesn't seem to be clear on this but I personally I would have thought that for the "":expanded"" style, it's more consistent to have each selector on it's own line (i.e. line break after comma), rather than grouping pseudo selectors.
",brian-hay,nex3
1373,2014-08-23 04:14:24,"@nex3 Disclosure: I work a lot with Drupal and its code style guidelines (and automated code review tools) demand one selector per line.

So, I'm happy to acknowledge my bias / self-interest :-)

Regardless I think one selector per line (always breaking at comma) is more consistent and easier to code because there are no special cases.
",brian-hay,nex3
1366,2014-08-07 20:28:47,"Just following up as a maintainer of the `sass-json-vars` repo. @chriseppstein -- is the recommended route to implement an `mtime` method as you have done in `sass-globbing`? If not, is there a reference you could point me to for the best practice for implementing an `Importer` plugin?

Here is what I am referencing:
https://github.com/chriseppstein/sass-globbing/blob/master/lib/sass/globbing/importer.rb#L54-L71
",nhunzaker,chriseppstein
1357,2015-10-29 03:51:14,"@nex3 That is not true. The inline option say, include the source text in the sourcemap. Not how .map file link to the source file. As @donotknow say, setting the sourcemap option to inline or file produce the same result. Obviously this is incorrect and broken in sass compiler. I have tested it on version 3.4.6. The result is the same as @donotknow finding.

Please reopen this ticket. This is a valid ticket.
",jamesmoey,nex3
1349,2015-06-10 12:52:26,"Though, very little chances, :+1: for reconsideration.

@chriseppstein

> But we are reticent to introduce new syntax and break future compatibility for this case.

May we ask, what exactly potentially it may break in future?

Brackets and dot notations are so common in popular programming languages those days that I really hardly imagine what else for they can be used in future.
",ArmorDarks,chriseppstein
1349,2015-07-13 19:40:32,"@ArmorDarks He did say

> ""Maybe it's something we can include in a future release if people find it useful.""
>  @chriseppstein 

If we can get the word out, and let people know about this issue then maybe it will gain some traction and it might get reopened for consideration.
",tjbenton,chriseppstein
1349,2016-05-03 14:05:25,"@davidkpiano This doesn't solve situations, when you have nested lists (arrays) inside maps (objects). You will get same mess of nested functions.

Sassdash makes it better, that true. But making things better not always means solving them. Particularly, Sassdash's `_get` due to slicing and substitutions will have larger impact on performance on large projects (my assumption) than native implementation.

@HugoGiraudel Can't tell for all, but I've never encountered in production Sass maps with keys as anything. And if you will, just for that cases you can use already defined `map-get()`. For rest of cases, it's too verbose and unneeded.

This is the reason why in ES2016 we have objects _and_ maps. Because maps needed in very few situations.

And don't forget bracket notation, which solves that issue too. Though, I assume parenthesis exactly representing bracket notation in your example.
",ArmorDarks,HugoGiraudel
1349,2016-05-04 00:26:06,"I finally gave up and switched to stylus, dot notation problem: solved!

On Tuesday, May 3, 2016, Serj Lavrin notifications@github.com wrote:

> @davidkpiano https://github.com/davidkpiano This doesn't solve
> situations, when you have nested lists (arrays) inside maps (objects). You
> will get same mess of nested functions.
> 
> Sassdash makes it better, that true. But making things better not always
> means solving them. Particularly, Sassdash's _get due to slicing and
> substitutions will have larger impact on performance on large projects (my
> assumption) than native implementation.
> 
> @HugoGiraudel https://github.com/HugoGiraudel Can't tell for all, but
> I've never encountered in production Sass maps with keys as anything. And
> if you will, just for that cases you can use already defined map-get().
> For rest of cases, it's too verbose and unneeded.
> 
> This is the reason why in ES2016 we have objects _and_ maps. Because maps
> needed in very few situations.
> 
> And don't forget bracket notation, which solves that issue too. Though, I
> assume parenthesis exactly representing bracket notation in your example.
> 
> ‚Äî
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1349#issuecomment-216538010

## 

Sincerely,

Jessica Kennedy
Triad Webcrafters
www.triadwebcrafters.com
336-298-1511
",mistersender,HugoGiraudel
1348,2014-07-31 20:28:39,"@chriseppstein I guess my problem with using a mixin is that the name `mixin` makes sense when you are mixing function into a selector, but here it feels like it is being misused, and the necessity of the unused `$temp` variable only makes it feel more so. It feels kind of hacky.

This feels like a perfectly reasonable (and helpful) use-case to me that can only be achieved in a convoluted way. Would you mind explaining why this kind of 'side effect' is discouraged?

I would also question that if you allow a null return value, why not make this implicit, though I suppose this is tied into avoiding functions created specifically for their side-effects.
",Undistraction,chriseppstein
1348,2014-08-01 20:50:16,"@chriseppstein Concur. I don't want to encourage functions with side effects.
",nex3,chriseppstein
1348,2014-08-01 21:12:53,"@chriseppstein Thanks for taking the time to respond. I appreciate it. 
",Undistraction,chriseppstein
1348,2014-08-15 12:07:39,"In most modern programming languages, especially the scripted ones, there is no distinction between _functions_ (return a value without side effects) and _procedures_ (cause side effects without returning a value). Instead, there are _methods_ that do both things.

I see no reason why Sass should uphold the distinction. In fact, Sass functions _are_ side effects-capable already, so the distinction is completely artificial.

Also, while the custom mixin way is a valid workaround, it's what every Sass framework developer will find himself doing. Custom mixins will breed like rabbits, varying in implementation and size. Sass should totally provide a default and scaffolding-free way to do that.

So i strongly support that Sass should allow executing functions without an obligation to accept a value into a variable.

Sass 4.0 could probably even completely remove the distinction.

@Snugug, please consider moving your custom mixin implementation into Toolkit.
",lolmaus,Snugug
1348,2014-08-15 12:17:34,"@Snugug, you rock.
",lolmaus,Snugug
1348,2014-08-15 20:30:38,"> I've spent the last 3 years in Haskell land and I haven't missed side-effects one bit. I haven't really missed variables, either.
> ...
> It just sounds like you're clinging to inferior programming patterns because you haven't learned that there are better, safer ways of achieving the same result.

Those are just different paradigms. Functional programming is not by default better than non-functional. Yes, it has certain serious advantages, but substantial disadvantages as well, the most important of which (from my point of view) is that it doesn't match the normal programmer's way of thinking: you have to adjust the way you think to correspond to the language.

For example, the `pull` function exists in all languages that i've had the honour to work with: Ruby, JavaScript, Python, PHP. It is a very convenient and very broadly used technique, but it violates the no side effects approach.

No programmer has ever complained that functions in JavaScript or Python allow side effects.

Let's not start a holy war here. The fact is that Sass is not functional and the necessity to write `$i-am-never-used: some-func()` does not in any way prevent the user from introducing a side effect in `some-func()`.

> If your string needs to be uppercased from now until the end of time, why didn't you uppercase it when you were assigning it in the first place?

Because it came as an argument? A very common situation is that you accept raw data as an argument and you need to parse/sanitize it before using. You may need to use the processed data more than once in your function, or you may want to split a chain of operations over the raw data into multiple lines for the sake of readability (and Sass doesn't support method chaining due to the lack of a method concept), so you end up with an `$i-am-never-used` or `$argument: f($argument)`.

Another very common situation, which both @Undistraction and @Snugug mentioned, is the necessity to let the user CRUD settings stored in a map. The variable that contains the map is hidden from the user so that he can't mess it up by modifying it directly.
",lolmaus,Snugug
1341,2014-07-29 20:46:54,"@nex3 :+1: ?
",chriseppstein,nex3
1328,2014-07-20 21:25:45,"@robwierzbowski :exclamation: I just noticed that if we replace all backslashes with forward slashes, it works!

I've tried that after reading your linked Jekyll thread which mentions [Ruby normalizing the path separators to forward slashes](https://github.com/jekyll/jekyll/issues/1948#issuecomment-32447533). I'm not sure but, IIRC, Sass recommends always using forward slashes.
",UltCombo,robwierzbowski
1328,2014-07-25 23:25:56,"@nex3 This seems to be a rather localized issue.

I've only managed to reproduce it using the `--update` option and with a path containing an upper case letter. In this case, the drive letter is being appended at the end of the path.

Test cases:



It emits a different error with `--force`, but due to the same reason I believe.



Weirdly enough, the error does not happen when using a relative path from a current working directory path which contains an upper case letter.



Tests ran on Sass 3.3.10, Ruby 2.0.0p481 x64, Windows 7 Ultimate x64.
",UltCombo,nex3
1328,2014-07-26 03:25:19,"@nex3 here it is:


",UltCombo,nex3
1328,2014-08-01 18:32:34,"@nex3 Thanks for the effort, but same error still.

I should have some free time later today, I could try to trace this issue but I'm not really a Ruby guy. I'll be up for a remote debugging with TeamViewer or similar if you'd like.
",UltCombo,nex3
1328,2014-08-01 20:35:40,"@nex3 



I'm still using Sass 3.3.10, I can upgrade to 3.3.12 or bleeding edge if you'd like.
",UltCombo,nex3
1328,2014-08-02 01:10:26,"@nex3 yay, you got it! It works now, good job.
",UltCombo,nex3
1305,2014-07-06 23:58:11,"@chriseppstein what would be the specific rules to throw an error?
- When a selector contains more than one vendor-prefixed selector?
- When a vendor-prefixed selector is combined (`,`) with another selector? In this case, both selectors will work in one browser and both will fail in another browser. This is probably unintended, but might be intended by the author as well.

Ultimately, trying to shield the developer from himself is unnecessary overhead, imho. I'd opt for a warning over an error.
",UltCombo,chriseppstein
1304,2014-07-04 20:52:59,"@HugoGiraudel, `join` produces a flattened result of certain list type.
",lolmaus,HugoGiraudel
1304,2014-07-31 09:15:51,"@lolmaus  @HugoGiraudel  I've finished the first version of my grid system. please have a look :)
https://github.com/P233/Rebar-Grid

As you can see in https://github.com/P233/Rebar-Grid/blob/master/rebar-grid/data/_container-list.scss#L37 , I need to combine multiple lists inside a `@for` loop. That why I am looking for a way to combine list.

@nex3 Thank you for your reply, the `append()` only accept singe value, it doesn't combine list unless I append the lists after an empty value. This example may explain my question  http://sassmeister.com/gist/efe05764ee61d0e76c03
",P233,nex3
1304,2014-07-31 09:15:51,"@lolmaus  @HugoGiraudel  I've finished the first version of my grid system. please have a look :)
https://github.com/P233/Rebar-Grid

As you can see in https://github.com/P233/Rebar-Grid/blob/master/rebar-grid/data/_container-list.scss#L37 , I need to combine multiple lists inside a `@for` loop. That why I am looking for a way to combine list.

@nex3 Thank you for your reply, the `append()` only accept singe value, it doesn't combine list unless I append the lists after an empty value. This example may explain my question  http://sassmeister.com/gist/efe05764ee61d0e76c03
",P233,HugoGiraudel
1304,2014-07-31 21:00:38,"Hi @chriseppstein I have a few space separated lists and I'd like to combine them into one big comma separated list, like this `one two, three four, five six`, this list has three values and each value is a space separated sub list. But if I use `join()` and set comma as separator, I will get a single list with 6 values: `one, two, three, four, five, six`.
",P233,chriseppstein
1304,2014-07-31 21:39:44,"Thanks @chriseppstein, I am currently using this way in my project. 

In http://sass-lang.com/documentation/Sass/Script/Functions.html#append-instance_method, `appen()` only accept single value, and we cann't directly combine two list with `append()`



But if we `append()` a list to `()` first and keep appending other lists, it works as expected. My question is why we have to append list to `()` first, is it legal or is it a feature of Sass?

I am sorry for my poor English, I didn't express my question clearly and make you misunderstood :(
",P233,chriseppstein
1304,2014-07-31 21:58:57,"@chriseppstein Thank you so much, I understand now.
",P233,chriseppstein
1303,2014-07-04 05:31:16,"Thanks @jina for the effort
",paazmaya,jina
1300,2014-06-27 13:34:41,"Actually it work.... :/ you have to excuse me @chriseppstein for not believe you at the beginning but I can't understand why now it work... I already tried to update compass gem and it didn't work. 

Also I still don't get why one computer works without the need of this gem compass specification and the other don't.

In addiction I can't understand why it complains just about middleman and never talked about compass(which I don't even use in the project !!!) and now is using sass 3.3.8 and middleman doesn't complain anymore   ...!!

Well, thank you anyway @lolmaus (and everybody replay), you made my day!
",gsambrotta,chriseppstein
1298,2014-06-25 03:37:04,"@Snugug duh, of course -- totally forgot that Opera had dropped their own engine. Thanks for the reminder :)
",pdaoust,Snugug
1291,2015-11-13 20:33:23,"@nex3 is this ""planned"" to do `str-is-quoted($str)`?
",hcatlin,nex3
1291,2015-11-14 00:39:34,"@nex3 Just clarifying... so in this case, we would name it `str-is-quoted()` until post-4.0 when it will convert to `is-quoted()` with in the `str` package. So this should be implemented as I specified?
",hcatlin,nex3
1289,2014-06-17 20:33:28,"@lolmaus I'll use the example of a grid system. Assuming the grid system has a global config file, which lets you define a float direction. Let's say we chose a float direction of left, but for a few areas on our project, we need the float direction to be right. It's not logical to have a `$float` argument for the mixin if it would only be used in edge cases, so we can define an exception using the directive that would allow this:



And then you wouldn't get redundant float declarations in your code if you chose to override it. It gives opportunity to create edge case exceptions without defining argument variables that are going to be virtually useless for the typical use case. Additionally, see the example below.

# 

@chriseppstein I agree, that's one of the reasons I created the issue. I'm currently using a similar system where I'm essentially using maps to accomplish this, but I feel like it is a hacky solution when we have a `@content` directive that has the ability to hold all these variables for us.



The former doesn't seem like it's a solution, but rather a workaround for something that should be a directive. I really hope that isn't too confusing.

Here's the idea in context,
https://gist.github.com/ezekg/ccf842e5ee74287f1868
",ezekg,chriseppstein
1289,2014-06-17 20:36:14,"This is a feature we decided long ago not to support, and our reasoning then still holds true now.

At a high level, features like this treat the document structurally rather than semantically. What I mean by that is that they ignore how the styles will apply to HTML (the semantics), and instead focus just on how they exist in the document: what properties are contained within each rule block, what specific selectors are used for each rule, etc. (the structure).

In a more practical sense, in CSS writing `.foo {color: blue} .foo {font-weight: bold}` means the same thing as `.foo {color: blue; font-weight: bold}`. Providing a way to say ""get all the properties in the current block"" or even ""get all the properties for a given selector"" is bad because it violates this invariant. It also violates the relationships between selectors: the properties in `.foo .bar { ... }` should sometimes interact with those in `.bar { ... }`, and features like this are fundamentally unable to handle that complexity, because they work structurally.

This is the same reason [`@extend` works the way it does](https://github.com/sass/sass/issues/1284#issuecomment-46055417).

@chriseppstein I like your proposal better, because it captures a well-defined and explicitly-provided structure rather than looking up external structure in the problematic way I described above. A lot of thought would have to be put into the capturing syntax, though, as well as the SassScript representation of the captured structure.
",nex3,chriseppstein
1289,2014-06-17 20:48:41,"@ezekg, Sass has both named arguments and argument defaults. Your example is _perfectly_ solved with that:



Not only this is already possible with Sass, but this syntax is shorter than what you suggest and allows customization (e. g. automatically apply margins on the given direction of floating).

And if your case is VERY rare, you can just override defaults below the mixin call, producing slight duplication. But who cares, it's just a very rare duplicate line. Gzip will squash it anyway.

I don't imply that your idea is worthless. I say that you haven't yet provided an example of a situation where this approach would be beneficial.

@chriseppstein, i think that maps are being overabused lately. I'm worried that introducing subj will further encourage people to create needlessly complex meta Sass code.

![Put everything into maps!](http://i.imgur.com/jUasNVg.png)
",lolmaus,chriseppstein
1289,2014-06-17 20:58:08,"@lolmaus I know about named arguments and argument defaults. I updated my post above with another example, as well as the full use-case for a feature like this. https://gist.github.com/ezekg/ccf842e5ee74287f1868

Using maps seems very hacky and like @chriseppstein said, not like CSS.
",ezekg,chriseppstein
1289,2014-06-17 21:03:14,"@nex3 I agree. That gist is something we can throw darts at if you're intested in pursuing this.

@lolmaus I don't want people to put styles into maps. That's _exactly_ what I'm trying to avoid. We can say ""don't do that"" but if people want to write powerful pure-sass implementations of non-trivial things, they end up _having_ to do that. Consider a RTL flipping feature. Sure you can make `$right` and `$left` variables and set them to the opposite value, but a proper implementation is property aware and transforms things like the border shorthand when 4 values are provide by swapping the 2nd and 4th values. Should people have to know to call `@include rtl-border(2px, 4px, 2px, 6px)`? to get things flipped correctly? What if they are using a library that doesn't include RTL support but writes a border property out. What if you just forget to call the RTL-based mixins one time because you're coding bleary eyed at 2am to hit a deadline tomorrow. There are features like this (vendor expansion is another one) where you mostly want an opt-out strategy instead of an opt-in strategy that mixins provide. For this reason `@include rtl { ... arbitrary sass stuff ... }` and `@include vendor-prefixed { ... arbitrary sass stuff ... }` make a lot more sense to the average programmer.

Furthermore, we know that there is demand for such a feature because this is essentially what https://github.com/reworkcss/rework is only they use JS instead of the writing this feature in the stylesheet syntax itself which severely limits the portability of stylesheets written on rework. Like LESS and the CSS syntax, I think this is a place where we can take Sass in a direction that is clear and with an API that is more flexible and has fewer downsides.
",chriseppstein,nex3
1289,2014-06-17 21:11:15,"@chriseppstein, thank you for a convincing example. It's hard to disagree.

But when i was reading your example, i thought that dynamic RTL/LTR support is a very advanced and very rare feature. That a person doing it is ready to withstand extra difficulty and complexity. Are there more common use cases for that?

The second thing that i thought about is that your examples are an ideal case for a CSS postprocessor. Then i read you mentioning Rework and googled up this: https://github.com/sindresorhus/gulp-rework .
",lolmaus,chriseppstein
1289,2014-06-18 13:35:07,"@lolmaus so, we should resort to a post-processor to clean up messy code instead of preventing it in the first place? Isn't that in opposition to the point you just made earlier about messy code? Just because the person is more advanced in the language **does not** mean that they should have to deal with extra complexity and hacky workarounds.

@chriseppstein I just looked over your gist and I really, really like your syntax. Being able to capture only the data you need would be immensely beneficial. Having a JSON-esque capture map like you had in the comments would be great.
",ezekg,chriseppstein
1289,2014-06-18 13:41:49,"@ezekg, i didn't say that you should. I only meant that if you're already in a desperate need for clean-up routines, there are tools you can start using right away.

I like @chriseppstein's approach as much as you do, though it still seems to be very hard to deal with all edge cases when parsing JSONified (mapified) styles.
",lolmaus,chriseppstein
1289,2014-06-18 13:51:54,"@Anahkiasen, that's because @nex3 closes most feature requests right away, but this time he made an exception. :)
",lolmaus,nex3
1289,2014-06-27 03:31:48,"@nex3 @chriseppstein I think we should continue to discuss a feature like this.
",ezekg,nex3
1289,2014-06-27 03:31:48,"@nex3 @chriseppstein I think we should continue to discuss a feature like this.
",ezekg,chriseppstein
1287,2014-06-17 09:49:24,"@nex3 Sass wouldn't decide the order of the source, it would replicate the current order. All it would do is merge duplicate branches, keeping duplicate style attributes in  previously declared order. Unless there is something I'm missing?
",savingschampion,nex3
1282,2014-06-14 09:54:20,"@lolmaus +1

@nex3 In recent releases of Ruby Test::Unit has been deprecated in favour of minitest
",movitto,nex3
1282,2014-06-28 00:11:16,"@nex3, hey srry for belated response. Had missed a few instances where the old API was used. Travis is now green.
",movitto,nex3
1277,2014-06-10 15:31:03,"@Snugug Thanks for fast response. I read these posts earlier. I'm aware of these changes.
What doesn't change the fact that I can't use multiple selectors now...

In my current project I used a lot of multiple classes selectors like the example above.
It would be great if I could get the string in some way from ampersand (&) and use interpolation like this



Any ideas to solve this problem?
",hinok,Snugug
1275,2014-06-14 10:26:05,"@nex3 done. I hope I've handled it correctly. I'm presuming we don't need to handle `$keys` as a keyword argument.
",myabc,nex3
1269,2014-06-06 21:02:48,"@nex3 you'll need to be the one who does this. I don't have admin access to the sass repo. Let me know what you need.
",chriseppstein,nex3
1266,2014-06-04 09:35:57,"@apfelbox, thx.
",lolmaus,apfelbox
1266,2014-06-04 10:47:04,"@apfelbox, thank you for support. I'm from Russia and my language knowledge is limited :)
@lolmaus thank you for examples, but you the last offered solution is identically to mine (and I have long used it as well as I hadn't asked you how to solve it, so it is not XY problem, but still thx).

From my point of view it will be useful store ""@media"" rule in the string and then escape it. Thats all!)
",timfayz,apfelbox
1266,2014-06-07 08:44:40,"@nex3 , thank you for explanation. 
",timfayz,nex3
1256,2014-06-05 00:55:20,"@nex3, you had comments here (https://github.com/nex3/sass/issues/1122#issuecomment-37700189) that succinctly describe why changing how key lookup works might be a good idea. Particularly: ""If [value] doesn't mean the exact same thing in all contexts, even if the differences seem benign, it encourages users to believe that other values may mean different things in other contexts."" and ""...they may (reasonably) suspect that it's because of some other hidden behavior that they're unaware of. Once users start believing this, their belief that they understand what Sass is doing goes down, which means effectively that their understanding goes down as well. This is bad.""
",honzie,nex3
1256,2014-06-06 18:26:48,"@nex3 I'm having a hard time justifying saying no here given that we automatically unquote strings when being interpolated in a selector. An error in all cases would be a better experience, IMO.
",chriseppstein,nex3
1256,2014-06-06 20:55:53,"First of all, it's clear that supporting unquoted map keys causes a substantial amount of confusion with colors. I'm very tempted to just make Sass emit a warning whenever _either_ an unquoted string or a color is used as a map key in a map literal. This does violate the invariant that any Sass value can be used as a key, but I think (given that these keys may be added programmatically) the benefit of driving users towards quoted keys will be worth the pain.

@chriseppstein, I don't understand the relevance of automatically unquoting strings.
",nex3,chriseppstein
1256,2014-06-06 21:01:32,"> Sass emit a warning whenever either an unquoted string or a color is used as a map key in a map literal.

:-1: That is going to cause a lot of heartache and ugly code.

@nex3 this isn't a map problem. it's a color output problem. that has been the source confusion for quite some time even before maps. The issue only matters when the keys are placed into selectors.
",chriseppstein,nex3
1256,2014-06-06 21:48:26,"@nex3 We currently automatically unquote any quoted string that is interpolated into a selector because we know that quotes are not legal in that context. So my point is that we already are special-casing output of interpolation in a selector.

I see two possible approaches. We make it so that in a selector context named colors always output as a string instead of as a color irrespective of the output format if the color is a named color. If the color is not a named color, it would be illegal syntax in all output modes. Alternatively, we simply outlaw color being output in a selector context even for named colors.
",chriseppstein,nex3
1256,2015-12-19 10:21:18,"@nex3 good point!

> Sass interprets property values in the same way CSS does

This is a crucial insight. The problem case is when Sass interprets things which aren't property values (they're keys in a map, which is a data structure with no CSS equivalent) as if they were.

> why color functions don't work with named colors

This is perhaps they key to fixing this. The only time Sass functionality depends upon colour interpolation is when is when it needs to operate upon said colours. This is similar to how jQuery methods involving animation will try to interpret a passed in strings of `slow` & `fast` as indicating a duration of 600 or 200 milliseconds respectively.

These insights suggests 2 concrete methods for fixing the issue:
1. Make colour string interpretation a feature of colour functions - ie only perform it when we need to manipulate colours
2. Only interpret colour strings when they are used as property values

There is still a problem space around the fact that 'colors' are a basic type in Sass, which raises some expectations. The documentation makes explicit reference to this (and the issue that you have to quote CSS-valid color names if you intend to use them as strings) [here](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#colors).

The reason this is problematic is that users might write their own functionality which depends upon `type-of( red ) === color` and pre-conversion for manipulation. But AFAICT this does not predicate that all string color references be pre-converted to hex references - it just demands that the color type be extended to allow and recognise strings. So the solution then seems to be:
- Recognise CSS color string input as entities of type color, but do not prematurely transform them into shortest possible hex representation by default. 

We already have things like alpha manipulation on strings which may otherwise be output as short-form hex, so it's not as if Sass isn't capable of intelligently keeping color references in memory as flexible types capable of a variety of outputs. So I would prefer us to stick to the first solution, and fall back to the second if that isn't possible - in which case we'd probably have to introduce coercion logic for string comparison (such that `red == 'red'`, similar to how `1 == '1'`).

I tried reading the test suite to see if these expectations are tested for, but couldn't really make heads or tails of it. Would a straight functional PR be good, or do we need to write the tests that guard against violating these expectations?
",barneycarroll,nex3
1256,2015-12-19 10:25:59,"@nex3 sorry, just reading back through the thread again - is this suggestion what the v4 alpha commit [here](https://github.com/sass/sass/commit/5bba828be89461043564911a7cdf08eec35dc359) is about?
",barneycarroll,nex3
1253,2014-05-19 10:10:23,"Thank you for correcting me, @mprins. I've looked into a more recent spec:
- http://www.w3.org/TR/css3-syntax/#determine-the-fallback-encoding
- http://www.w3.org/TR/css3-syntax/#charset-rule

and found that the `@charset` rule was regulated by the CSS2 spec to be parsed in binary form. O_o Thus, case sensitivity.
",lolmaus,mprins
1253,2014-05-20 07:35:56,"@nex3 are you sure about that? The first link from @lolmaus mentions

> 4) Otherwise, use utf-8 as the fallback encoding.
",apfelbox,nex3
1251,2014-05-19 21:38:02,"Why are you nesting this?

Edit: I see your explanation now. @apfelbox is right, you need to use @root with this.

@nex3 I think it's a bug that @font-face bubbles.
",chriseppstein,apfelbox
1251,2014-05-30 18:34:06,"@chriseppstein Handling this is an interesting question. It's an intentional feature that unknown directives are bubbled (b8f4bab008b196b2ed8028635beb932533caa72c), and currently we have no special logic for `@font-face` so it falls into this category.

I'm a little leery of adding this sort of special logic; it violates our general policy of encoding the semantics of specific CSS identifiers as little as possible. If we add support for top-level-only directives, we'll need to do so for all directives that we currently know are top-level-only, which in turn means that new directives that are top-level-only may violate user expectations. I'd kind of prefer to just leave the behavior as-is.
",nex3,chriseppstein
1250,2014-05-15 11:06:43,"my god... I'm a dumbass...

Thanks @Snugug
",larrybotha,Snugug
1247,2014-05-28 19:23:37,"Having a map like @chriseppstein described would be cool, but I think I'm kind of nerdy about this. A string is probably well enough for most cases.
",HugoGiraudel,chriseppstein
1247,2015-06-12 11:35:07,"@chriseppstein What is the status on this? :)
",HugoGiraudel,chriseppstein
1243,2014-05-09 20:40:20,"@nex3 I think the proposed behavior is more in line with the way we handle directive bubbling and would make sass more consistent. There are some theoretical changes to cascade resolution if we made this change. We can detect this (same property used by a selector with the same specificity) and deprecate it. Honestly, I don't think it will affect that many users. They can either move the property or repeat the selector during the deprecation phase.

I think it's a good change to make, but I also don't consider it high-priority. this behavior has been in place since day one and we haven't gotten many complaints.
",chriseppstein,nex3
1243,2014-05-09 20:46:29,"@nex3 and @chriseppstein Thanks for the consideration -- I can imagine that it's a difficult issue now that this is out in the wild. I figured that a number of people would be relying on the current behaviour (either intentionally or unintentionally). I thought of suggesting a compiler option, but that doesn't feel right because a Sass file should always compile down to the same CSS file (compression settings notwithstanding).

Anyhow, if nothing ever happens on this front, I'll be okay. I've got other ways to skin this cat; e.g., the above pattern where I wrap the remaining stuff in an `& { }` selector.
",pdaoust,nex3
1243,2014-05-09 20:46:29,"@nex3 and @chriseppstein Thanks for the consideration -- I can imagine that it's a difficult issue now that this is out in the wild. I figured that a number of people would be relying on the current behaviour (either intentionally or unintentionally). I thought of suggesting a compiler option, but that doesn't feel right because a Sass file should always compile down to the same CSS file (compression settings notwithstanding).

Anyhow, if nothing ever happens on this front, I'll be okay. I've got other ways to skin this cat; e.g., the above pattern where I wrap the remaining stuff in an `& { }` selector.
",pdaoust,chriseppstein
1227,2014-07-30 06:41:40,"@nex3
What if sass would detect automatically, where the variable is used and writes the new calculated properties into that media query?

For example:



At compiling sass detects where the variable $container-width is used and compiles to:


",bahuma20,nex3
1224,2014-04-22 14:43:29,"And then you'll can't differentiate 0.12 from 0.11999999999999‚Ä¶ and that's another issue. Like @HugoGiraudel said, Javascript has the same problem and @nex3 seems to say that the issue is related to float number and not just sass. In fact I'm pretty sure I saw a floating number issue with PHP too but can't remember it.
I'm not saying there is no solution but that it seems to be a language agnostic unsolved issue ;).
",cahnory,HugoGiraudel
1224,2014-04-22 14:43:29,"And then you'll can't differentiate 0.12 from 0.11999999999999‚Ä¶ and that's another issue. Like @HugoGiraudel said, Javascript has the same problem and @nex3 seems to say that the issue is related to float number and not just sass. In fact I'm pretty sure I saw a floating number issue with PHP too but can't remember it.
I'm not saying there is no solution but that it seems to be a language agnostic unsolved issue ;).
",cahnory,nex3
1224,2014-04-24 19:00:33,"@chriseppstein, thank you for supporting the discussion.

Creating such a function is trivial. The problem here is that it's very bulky to use.

What about creating a group of approximate comparison operators, with tolerance controlled by a configuration variable? I'd suggest putting the variable onto the upcoming `sass.json`, but i've got a feeling that @nex3 will be against exposing a variable, changing which can break edge cases. Thus, my suggestion is Compass extension style:



It is still very new and embarrasing to me that approximate comparison for flawed floats is missing in stdlibs of all languages. So i've got no idea whether my suggestion is rational. It seems very rational to myself. :)
",lolmaus,nex3
1224,2014-04-24 19:00:33,"@chriseppstein, thank you for supporting the discussion.

Creating such a function is trivial. The problem here is that it's very bulky to use.

What about creating a group of approximate comparison operators, with tolerance controlled by a configuration variable? I'd suggest putting the variable onto the upcoming `sass.json`, but i've got a feeling that @nex3 will be against exposing a variable, changing which can break edge cases. Thus, my suggestion is Compass extension style:



It is still very new and embarrasing to me that approximate comparison for flawed floats is missing in stdlibs of all languages. So i've got no idea whether my suggestion is rational. It seems very rational to myself. :)
",lolmaus,chriseppstein
1223,2014-04-21 19:44:38,"@Snugug Oh ok, well that makes sense now.

I was using the article below as a reference, but I can see that `tint()` and `shade()` are part of [Bourbon](http://bourbon.io/), and I was mistaken to think that they were Sass color functions. 

http://robots.thoughtbot.com/controlling-color-with-sass-color-functions

Looking forward to Sass supporting `tint()` and `shade()` some time soon.

Thanks!
",ricardozea,Snugug
1220,2014-04-18 20:44:35,"@nex3 rather than abruptly closing this PR, please describe ""weird global effects"" and other concerns you have.  The paths feature is explicitly requested in import_v2 wishlist and something that the community finds value in, but you seem to disagree here.  Paths is a basic feature and critical to how other static file tools use ie. RequireJS.

If you can describe your thoughts on this matter, we can find a solution to implementing this feature.

#1094 

### Paths

A way to setup shortcut paths (like Require.js)

// No syntax intended, only the purpose


",drewwells,nex3
1220,2014-04-18 22:55:14,"@nex3 My comment was directed to @drewwells and @emphaticsunshine. I don't understand why the features in Sass 3.3 are not sufficient for them.
",chriseppstein,nex3
1220,2014-04-18 23:02:12,"@chriseppstein, what feature?

> Imports may contain #{} interpolation, but only with certain restrictions. It‚Äôs not possible to dynamically import a Sass file based on a variable; interpolation is only for CSS imports. As such, it only works with url() imports. For example:

Issues have been filed #1218 , but marked as duplicate #739, a ticket with no obvious objective.
",drewwells,chriseppstein
1220,2014-04-18 23:09:16,"@drewwells In that ticket, @nex3 explained that you can define a mixin that implements the branching logic that you need.

#739 is a generic proposal to allow interpolation within and conditionals around @import statements.
",chriseppstein,nex3
1213,2014-04-12 01:00:11,"@nex3 - You already do this for variables (making $foo-bar and $foo_bar equivalent). I think this is simply an extension of the policy to be code aesthetic neutral. It would make it possible to actually choose best in class components rather than being stuck choosing monolithic libraries. IMO, that makes it worthy of Sass-core.

@cimmanon - You already have to be careful about name collisions & scope when using multiple libraries. Hopefully, being able to choose best in class components rather than getting stuck with an entire library would mean that components that are not scoping well and/or using generic class names would be much less likely to be used. 
",stubbornella,nex3
1213,2014-04-12 01:29:27,"@nex3 Enabling mix-and-match frameworks is a core use case for sass. Every framework that generates selectors could build selector style generation into their capabilities but that's a lot of work and it's unlikely that any framework would do this given the readability impact to their code.

@snugug That would be fine if the framework exposes a placeholder API, but this use case is to support frameworks that are generating css selectors. Extend is not a good way to accomplish this.
",chriseppstein,nex3
1213,2014-04-12 02:05:26,"Yeah, these libs aren't built with placeholder selectors. You could argue that they should be, but I'm not so sure since you do end up wanting to use most of their classes and it would make interacting with the libraries much more complex.

On Sat, Apr 12, 2014 at 11:29 AM, Chris Eppstein notifications@github.com
wrote:

> @nex3 Enabling mix-and-match frameworks is a core use case for sass. Every framework that generates selectors could build selector style generation into their capabilities but that's a lot of work and it's unlikely that any framework would do this given the readability impact to their code.
> 
> ## @snugug That would be fine if the framework exposes a placeholder API, but this use case is to support frameworks that are generating css selectors. Extend is not a good way to accomplish this.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/1213#issuecomment-40268300
",stubbornella,nex3
1213,2014-04-12 02:23:13,"@chriseppstein I'd argue that the core ask is to be able to normalize class names across multiple frameworks in a controlled way. Assuming an individual framework doesn't share the exact same class name (and said class name doesn't do something different across multiple frameworks) that `@extend` would work for that. If it doesn't fit that case, you'll have a problem regardless of if Sass did it automatically or not. Ideal, no, but a totally workable solution.
",Snugug,chriseppstein
1213,2014-04-12 10:44:58,"@chriseppstein I happen to know that the frameworks she's talking about so not use compound class selectors so while you are absolutely correct, that is not the use case here.
",Snugug,chriseppstein
1213,2014-04-14 23:07:03,"@stubbornella Hyphen-neutrality in variables and mixins is less about a policy of being aesthetically neutral and more about historical backwards-compatibility with stylesheets that were written before we allowed hyphens in Sass identifiers.

@chriseppstein We can support this explicitly by supporting the ability to `@use` a stylesheet in a way that makes its selectors visible for extension but not emitted directly to the stylesheet. That's a feature I'd like to support anyway, and it supports arbitrary remappings in addition to the specific ones requested here.

I don't like how implicit this is; I don't like command-line flags modifying the behavior of stylesheets; I don't like plain CSS having different semantics than it would in the browser; and I don't like building in knowledge of naming styles to Sass. There are a lot of things going against this change, and I don't see much reason not to just handle it externally or explicitly.
",nex3,chriseppstein
1212,2014-04-12 15:54:07,"@nex3, thanks for the response.... Here is the file structure we are currently using with a little bit of explanation on whats happening:



Here is a screen shot, if that helps visualize anything for you:
![screen shot 2014-04-12 at 10 35 05 am](https://cloud.githubusercontent.com/assets/2998575/2687511/4819b974-c25a-11e3-8c75-53f656f0c87e.png)

Next: if i run `gem list listen` the output it:



If I run: `gem list` I get:



And, finally here is the sass --watch I will typically run for this project: 



When I run said watch (with changes) this is the output:



Edit note: I have tried creating the directories directly & not symlinking anything with no positive results.
",tbremer,nex3
1212,2014-04-15 16:13:00,"@nex3 gladly -- whats the best way to get this to you?

Also, in preparing to send you the directories I wanted to test everything again.

Uninstalled and reinstalled SASS (it updated to version 3.3.5). I put the directories on my Desktop (~/Desktop) and was able to compile the css as would be expect. Though I did get the ""Listen will fall back to polling"" error.

Are there any known issues of running sass --watch on a separate partition? Like, I have a my User / System HD (Macintosh HD) and a separate partition on the same HD (CODE) where all of my codebases live.

So I am running sass from /Volumes/Macintosh HD & the code is compiling from & to : /Volumes/CODE
",tbremer,nex3
1212,2014-04-15 19:19:32,"> @nex3 gladly -- whats the best way to get this to you?

Email it to nex342@gmail.com.

> Uninstalled and reinstalled SASS (it updated to version 3.3.5). I put the directories on my Desktop (~/Desktop) and was able to compile the css as would be expect. Though I did get the ""Listen will fall back to polling"" error.

It's strange that it would fall back to polling. Do you still have `rb-fsevent` installed?

Does this mean you can no longer reproduce the issue you were seeing earlier?

> Are there any known issues of running sass --watch on a separate partition? Like, I have a my User / System HD (Macintosh HD) and a separate partition on the same HD (CODE) where all of my codebases live.

This shouldn't matter, but it's not impossible that it does. If you can still reproduce the issue, do you also see it if you build the same project on your User partition?
",nex3,nex3
1212,2014-04-15 22:01:17,"@nex3 Emailed!

> It's strange that it would fall back to polling. Do you still have rb-fsevent installed?

You were right about rb-fsevent, I forgot to reinstall after installing SASS again, does not fall back to polling now.

> Does this mean you can no longer reproduce the issue you were seeing earlier?
> This shouldn't matter, but it's not impossible that it does. If you can still reproduce the issue, do you also see it if you build the same project on your User partition?

The error seems to only present when I am running a sass --watch from code partition. I should say I can and have successfully updated my stylesheets by running a sass --update and can compile individual files by pointing to their direct *.scss files
",tbremer,nex3
1212,2014-05-07 18:33:45,"I am convinced this is a lone issue that has to do something with our larger file structure. I have tried testing this in many different scenarios and the one thing I keep coming back to is our actual codebase. So, it's something to do with the way that we architected our directory structure.

I have found a suitable work around using FSWatch (from Homebrew) and running a `sass --update $scss:$css` -- while this isn't ideal, it has proven to be stable.

Also @nex3, sorry for the long delay in response time.

I was discussing this with another developer on my team and he is running sass 3.2.19 just fine (without listen work arounds) were there changes in the listen part of the 3.3.x?

Working with the same developer he encounters the same issue with SASS 3.3.7, but is on OSX 10.8, so, it seems to be isolated to our directory structure,  but not to OS version
",tbremer,nex3
1206,2014-04-11 19:45:02,"@pdaoust is right, this is already supported on master.
",nex3,pdaoust
1203,2016-04-11 02:32:03,"@nex3 Sorry, I was wrong. Sass can support all CSS Selectors 4 Syntax in advance.
",yisibl,nex3
1200,2014-04-04 00:10:51,"@HugoGiraudel thanks for the tip, wonder if its been fixed.  @lolmaus I am using the latest version of Sass but I'll verify my Grunt set-up isn't doing something funny.
",ptlu,HugoGiraudel
1196,2014-04-11 01:57:28,"@nex3 I'm working on a fix for [sprockets-sass](https://github.com/petebrowne/sprockets-sass/issues/26), but I could use some input from you.

I could [remove the custom Importer](https://github.com/petebrowne/sprockets-sass/tree/sass-3.3) and follow Sprockets' lead, but I lose some important functionality as a result. Can you think of any other options?

Is the requirement for Importers to be marshalable only affect source maps? Is there a way we can disable that caching if we're not using source maps?
",petebrowne,nex3
1194,2015-10-09 12:51:55,"@nex3 What was the solution for @import directives are not allowed inside mixins and functions? 
",jgacuca567,nex3
1194,2015-10-10 04:32:14,"@nex3 How did you solve the problem? 
",jgacuca567,nex3
1193,2014-04-04 22:45:09,"@nex3 :

How would a module-based import model allow for polyfilling?
",jslegers,nex3
1193,2014-04-05 08:53:44,"@nex3 :

So modules are somewhat like namespaces? I can't really say I favor that...

Also, my use case requires the exact opposite behavior.

Suppose that I'm using Sass in combination with Compass and Cascade Framework :
- If Cascade Framework defines `str-replace`, my custom project will use that definition. If not, it will use its own definition.
- If Compass defines `str-replace`, Cascade Framework will use that definition. If not, it will use its own definition.
- If Sass defines `str-replace`, Compass will use that definition. If not, it will use its own definition.

So the idea is to use the definition of a function defined in the lowest layer of your architecture.
This means that :
- improvements to Sass and Compass will automaticly be included in the higher layers
- functions can be defined once and used everywhere
- missing features in older versions of Sass or Compass will be polyfilled
- deprecated features in newer versions of Sass or Compass will be polyfilled

This should have a positive impact on performance and make any code written in Sass more portable to different versions of Sass.
",jslegers,nex3
1193,2014-04-12 13:55:48,"@nex3 :

**Both techniques increases the portability** of any code between different platforms. They just have different use cases :
- **Namespaces** (which you seem to refer to as modules) are used to define logic specific to a particular library, framework or application. They isolate classes and methods to provide freedom with regards to naming conventions without any risk for conflict with other libraries, frameworks or applications.
- **Polyfilling** is used to add missing features to a language, library or framework that have well-defined specs. Typically, this is used to add features from a newer version of a language to an older version of a language, library or framework or the other way around. It's also used to port popular features of one language, library or framework to another.

I'm not very familiar with Ruby, but polyfilling is commonly used in both PHP and Javascript communities. I don't see any reason why it shouldn't be used in Sass as well...
",jslegers,nex3
1191,2014-03-27 08:28:12,"`sass --trace --watch css/` is not going to resolve your issue. This command will produce a meaningful stacktrace which might help @nex3 to understand the reason behind your issue.
",lolmaus,nex3
1189,2014-04-04 21:07:48,"@nex3 selector comments are on by default in compass. I've fielded countless ""I hate the comments that compass litters my css output with"" Many times they don't even realize that feature can be turned off. even though there's a comment that explains how to do in by default in the configuration file.

I think it's useful, but it's also going to be a support issue. A sass config will significantly improve the experience in either scenario.
",chriseppstein,nex3
1184,2014-04-04 01:57:58,"@chriseppstein Thanks, I'll try your official patch now.  
",phasebash,chriseppstein
1175,2014-03-17 17:59:42,"Thank you for keeping the 3.2 branch healthy, @chriseppstein.
",lolmaus,chriseppstein
1175,2014-03-17 22:40:26,"@nex3 Yes, I will own the 3.2 stable releases.
",chriseppstein,nex3
1171,2014-03-19 19:56:26,"@nex3 Cool, and thanks. (I assume you refer to sstephenson/sprockets#541? Any other changes I should expect to wait for?)
",smudge,nex3
1167,2014-08-22 14:25:10,"@nex3 It's been five months and my little project ([Inch](http://trivelop.de/inch)) and its badge web service (Inch Pages) have made lots of progress. Actually, Inch Pages, the GitHub Pages powered static jekyll site, is being retired -- it is replaced by [Inch CI](http://inch-ci.org), an actual web service.

Over 200 projects are currently showing these badges in their README and over 100 maintainers have hooked up their projects to be [automatically evaluated](http://inch-ci.org/howto/webhook). I do not mention those things to put peer pressure on you, but to show that I took this ""hunch"" of a project and kept at it. There have been nearly [200 commits](https://github.com/rrrene/inch/compare/02c9016a3e97622d1f513e9d7920a7964b0a7fc4...language-support) to Inch since we last discussed the topic.

I would kindly ask you to review this new iteration of the idea ""badge for inline-docs"". What do you think?
",rrrene,nex3
1156,2014-03-10 18:42:38,"@nex3 listen 2.4.1
I have manually downgraded 'listen' because 2.7 version broke sass starting (as describe in #1151).
But now it don't want to exit properly.
",SamyCookie,nex3
1155,2014-03-10 20:20:54,"@chriseppstein We should use YAML, not JSON. JSON isn't exactly human readable/writable, whereas YAML is, and you can have in-line comments in YAML which makes it much easier to work with in practice.

@lolmaus you are not the community. If we are to have a config file for Sass, it should absolutely, no questions asked, be interoperable between different implementations of Sass. The three formats I can think of that do this are INI (original proposal), JSON, and YAML.
",Snugug,chriseppstein
1155,2014-03-10 20:23:10,"@chriseppstein This [Stack Overflow answer](http://stackoverflow.com/questions/1726802/what-is-the-difference-between-yaml-and-json-when-to-prefer-one-over-the-other#answers-header) sums up fairly well why I like YAML for configuration over JSON. Long story sort, YAML is JSON for humans (heck, it's a superset of JSON and can be turned into valid JSON for machine-readable config)
",Snugug,chriseppstein
1155,2014-03-10 20:25:45,"@Snugug That didn't convince me. Most of the pluses mentioned there make yaml a superior data serialization format (which it is) but not more end-user accessible. Blueprint used to use yaml for configuration and web devs were _very_ confused by it. 
",chriseppstein,Snugug
1155,2014-03-10 20:27:46,"@chriseppstein Interesting. In my experience dealing with end-users (especially JR web developers) and those coming to configuration for the first time, YAML has been far easier for them to grasp than JSON. Would love to dive into that a bit. The two things I like most about YAML for configuration is you're less likely to get syntax errors as there's hardly a syntax to speak of and you can have comments which I find to be critical to onboarding (hell, even comments in the middle of a nested chain)
",Snugug,chriseppstein
1155,2014-03-10 21:01:13,"I think both YAML and JSON are good options. I agree with @Snugug that YAML is simpler/easier to read and quite common, but I have no problem with JSON. YAML feels like markdown, like it was written for humans. JSON feels like it was written for computers. 
",mirisuzanne,Snugug
1155,2014-03-10 21:02:10,"@lolmaus I'm not particularly interested in the configuration being powerful. If you value power over simplicity, you can easily write a script that spins up `sass --watch`. I am interested in it being safe, compatible, and easy to use.

@chriseppstein We've been using YAML as the configuration syntax for [Pub](http://pub.dartlang.org/) with good results. JSON is not well-suited for human modification, despite being widely-known. It doesn't support comments, and it requires verbose punctuation for even the simplest examples.
",nex3,chriseppstein
1155,2015-11-09 20:32:47,"I think that this made sense in a previous world, it's less useful today as a language-wide feature. Each adapter / system should have it's own, natural way to configure such options.

@chriseppstein you still wanting this? Or can we close it?
",hcatlin,chriseppstein
1143,2014-02-28 19:18:52,"@nex3 @chriseppstein I can tell you that we've needed to [create our own](https://github.com/Team-Sass/Singularity/blob/1.x.x/stylesheets/singularitygs/helpers/_directions.scss) in Singularity for the same reason. I'd love to see this in Core, especially if it includes `ltr`/`rtl`
",Snugug,nex3
1143,2014-02-28 19:24:02,"@Snugug Yeah, exactly. ltr/rtl support would be amazing. :)
",corysimmons,Snugug
1143,2014-02-28 19:53:49,"@chriseppstein Thanks Chris
",corysimmons,chriseppstein
1137,2014-02-27 20:32:54,"@piouPiouM I don't advocate that for the particular use case because the cost of starting sass/ruby/etc is so much greater than the cost of the code. You will need many runs to bring the error bars of the code you're actually measuring down to significance.
",chriseppstein,piouPiouM
1137,2014-02-27 21:50:46,"@chriseppstein I totally agree with you and I thank you for your code that will help me too in the future!
I took advantage of the issue to remind the existence of a shell command often forgotten.

Sorry for the off-topic.
",piouPiouM,chriseppstein
1137,2014-02-27 22:22:16,"@piouPiouM at first I was going to suggest the `time` utility too ;)
",chriseppstein,piouPiouM
1136,2014-02-27 01:02:22,"@nex3 There's a few such things we can optimize for if we know we can rely on modern browser support. I wonder if we should take a generic approach to it or just have a flag for each feature.
",chriseppstein,nex3
1128,2014-02-24 21:10:49,"@nex3 We can't just say ""use a string if you go outside [some restrictive subset of all values]"" because (a) it's author-hostile, because the boundary between valid and invalid will be pretty non-obvious, and (b) it's future-hostile, because we can add more stuff to CSS in the future that'll violate that subset.

There is probably _some_ subset that would work half-reasonably, but it would be wider than what you want - it would include things that have special meaning in SASS today.  So that wouldn't work anyway.

If you want full CSS-as-SCSS compat, you have to just ignore all SASS things inside of var-\* properties.  (And var() functions, as the fallback arg has the same syntax constraints.)  That's your option 1.

I'm with Chris, though - the places where SASS syntax collides with allowable var-\* values aren't realistic.  Just go with your option 2.
",tabatkins,nex3
1128,2015-10-07 22:04:19,"@nex3 I don't like any of our options here but let's figure out a game plan for how we're going to support this. Failure to address this in the next few months will start to cause users to abandon Sass for alternatives that work.

Here's some options that I see:
1. Don't allow interpolation or SassScript in a --var property. Thus ensuring maximal compatibility with CSS.
   
   If we do this, I think we should create a parser-level function called `sass-script(...)` within which any arbitrary sass script expression is allowed. We will parse any `--var` property without any SassScript processing unless the value is set to a `sass-script(...)`.
2. Treat --var properties as normal css properties that works with SassScript, interpolation, etc. For most users, this will be what they want.
   
   If we do this, I think we should introduce a new directive `@raw` or something similar which basically turns Sass parsing off and parses everything inside as a string that gets passed along to the css file. This has the side benefit of being an escape hatch for any future CSS incompatibilities.
3. Like other places in Sass, allow only interpolation when access to SassScript is needed.
   
   If we do this, We should allow interpolation to be escaped (probably `\#{` and a corresponding `\}` or maybe a double the hash sign `##{ ... }`) and when it is, it is passed through to css untouched. This accounts for the use case where some custom property syntax tramples on Sass's interpolation syntax.

Other suggestions welcome, these are just at the top of my head.
",chriseppstein,nex3
1128,2015-10-07 23:18:58,"@chriseppstein To have a more explicit validation, All this will enable a state where Sass can accept the following to work correctly, right? 


",lozandier,chriseppstein
1128,2015-10-16 20:57:16,"I agree with everything @chriseppstein said.
",nex3,chriseppstein
1122,2014-02-28 19:20:21,"I don't like attaching hidden information to SassScript values. I'd feel better if the `precision` function just converted a number to a string, but I think increasing the precision wholesale may be a better option. I'd like users not to have to think about it, and I'd rather err on the side of correctness than terseness.

@glebm, what is the smallest precision that would make your use-cases work?
",nex3,glebm
1122,2014-02-28 23:41:08,"@nex3 it's hard to say because the error only happens on some browsers / versions. Perhaps rounding errors compound with IEEE 754 (?) errors, and then get multiplied by the viewport raster size, which depends on pixel density, screen size, whether subpixel rendering is present, etc... `10` has been consistently reported to work in Foundation and Bootstrap, but this value is not necessarily the minimum. 
",glebm,nex3
1122,2014-03-03 12:18:58,"Thanks @glebm for escalating this issue.
",Ne-Ne,glebm
1122,2014-03-13 22:02:21,"@chriseppstein Higher precision causes less bloat than it may seem since common fractions are gzipped efficiently.
",glebm,chriseppstein
1122,2014-03-14 21:48:06,"@chriseppstein It erodes user faith that they know what values their variables contain. If `1` doesn't mean the exact same thing in all contexts, even if the differences seem benign, it encourages users to believe that other values may mean different things in other contexts. If their stylesheet isn't working how they expect, even in ways that have nothing to do with numeric precision or `!important`, they may (reasonably) suspect that it's because of some other hidden behavior that they're unaware of. Once users start believing this, their belief that they understand what Sass is doing goes down, which means effectively that their understanding goes down as well. This is bad.

I agree with @glebm that increased precision will add less pain than it will alleviate. Even if I weren't against hidden metadata in general, I would be against it here. HTML pages being displayed correctly are more important than the relatively few extra bytes that a precision increase will bring.
",nex3,glebm
1122,2014-03-14 21:48:06,"@chriseppstein It erodes user faith that they know what values their variables contain. If `1` doesn't mean the exact same thing in all contexts, even if the differences seem benign, it encourages users to believe that other values may mean different things in other contexts. If their stylesheet isn't working how they expect, even in ways that have nothing to do with numeric precision or `!important`, they may (reasonably) suspect that it's because of some other hidden behavior that they're unaware of. Once users start believing this, their belief that they understand what Sass is doing goes down, which means effectively that their understanding goes down as well. This is bad.

I agree with @glebm that increased precision will add less pain than it will alleviate. Even if I weren't against hidden metadata in general, I would be against it here. HTML pages being displayed correctly are more important than the relatively few extra bytes that a precision increase will bring.
",nex3,chriseppstein
1122,2014-03-14 22:06:23,"@nex3 I think you're very mistaken on this. The extra precision is useful in only very specific situations. Mostly when assigning column widths for float-based layouts. It's a lot of extra bloat for this use case. We don't need a sledgehammer to fix this, we need a scalpel.

Furthermore, I don't accept your argument for this erosion of confidence in this case (I do in general, btw, which is why I tend to shun action at a distance). `1` is always the same value. `2/7` however will print out the default precision and `precision(2/7, 10)` will print out 10 digits of precision. The source of that precision difference is something that isn't magical, it's readable in the stylesheet itself and usually at the exact site where the precision is being output. There's not magic here; there's just functions with clear and documented behavior.

If you absolutely hate the precision attribute as an instance attribute for numbers then I'd rather just return a string from the `precision` function.
",chriseppstein,nex3
1122,2014-03-22 00:37:47,"@chriseppstein Making the function documentation clear doesn't reassure me at all. My point is that this will affect users who aren't familiar with all the Sass documentation. It doesn't matter that the hidden information that actually exists can be inspected using functions--what I'm worried about is the hidden information that users think might exist.

I'm also worried about it becoming a de facto standard that users write `precision()` every time they declare a number in case that number ends up getting used somewhere where it matters. Users shouldn't have to worry about precision at all; if we're able to allow them not to think about it, we should do so.

If @glebm's research is accurate, a seven-digit precision will be adequate. This is only an increase of two digits; do you find that acceptable?
",nex3,glebm
1122,2014-03-22 00:37:47,"@chriseppstein Making the function documentation clear doesn't reassure me at all. My point is that this will affect users who aren't familiar with all the Sass documentation. It doesn't matter that the hidden information that actually exists can be inspected using functions--what I'm worried about is the hidden information that users think might exist.

I'm also worried about it becoming a de facto standard that users write `precision()` every time they declare a number in case that number ends up getting used somewhere where it matters. Users shouldn't have to worry about precision at all; if we're able to allow them not to think about it, we should do so.

If @glebm's research is accurate, a seven-digit precision will be adequate. This is only an increase of two digits; do you find that acceptable?
",nex3,chriseppstein
1122,2014-03-23 14:16:45,"@nex3 If I understand this right, when we get 10,000px displays, this number may go up to 8.
",glebm,nex3
1122,2014-03-23 14:38:13,"Precision refers to number of decimal places and only will increase the number of digits after a decimal in a floating point number (and only when needed) and will have no effect on integers.

> On Mar 23, 2014, at 10:16 AM, Gleb Mazovetskiy notifications@github.com wrote:
> 
> @nex3 If I understand this right, when we get 10000px displays, this number will go up to 8
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,nex3
1122,2014-03-23 14:52:32,"@Snugug, did you have a look at @glebm's test case?
",lolmaus,Snugug
1122,2014-03-23 14:52:32,"@Snugug, did you have a look at @glebm's test case?
",lolmaus,glebm
1122,2014-03-28 17:56:02,"I doubt my opinion matters, but i'm totally on @chriseppstein's side here.

First of all, i fail to understand why one would want to make precision lower than maximum possible. 

Second, i would expect any calculations to be precise and would search for a bug in my calculations before i realize that it's low precision that causes inconsistencies.

Third, i believe that low precision is able to cause a lot of unexpected problems, especially for people lacking advanced programming backround. @glebm has produced a demonstration of the issue, where a gap appears out of nowhere.

Fourth, there are (sometimes unusual) applications of Sass where math is used extensively. For example, [mother effing text shadow](http://sassymothereffingtextshadow.com/#lmao) or [modular scale](https://github.com/Team-Sass/modular-scale). Precision doesn't matter for all of them, of course, but it might matter to some. And you're forcing their users to revert to Ruby or JS.
",lolmaus,glebm
1122,2014-03-28 17:56:02,"I doubt my opinion matters, but i'm totally on @chriseppstein's side here.

First of all, i fail to understand why one would want to make precision lower than maximum possible. 

Second, i would expect any calculations to be precise and would search for a bug in my calculations before i realize that it's low precision that causes inconsistencies.

Third, i believe that low precision is able to cause a lot of unexpected problems, especially for people lacking advanced programming backround. @glebm has produced a demonstration of the issue, where a gap appears out of nowhere.

Fourth, there are (sometimes unusual) applications of Sass where math is used extensively. For example, [mother effing text shadow](http://sassymothereffingtextshadow.com/#lmao) or [modular scale](https://github.com/Team-Sass/modular-scale). Precision doesn't matter for all of them, of course, but it might matter to some. And you're forcing their users to revert to Ruby or JS.
",lolmaus,chriseppstein
1122,2014-03-31 17:05:03,"@lolmaus it seems like you're more in agreement with @nex3 on this issue.

@nex3 My intuition is based on the numerous times where people cared about the output format that we felt they shouldn't. E.g. Selector formatting, comment formatting, color formatting. People care about the way their output looks. I don't think I'm being unreasonable by saying that users who care -- those users I most want to be using Sass -- should have a documented, simple way to achieve their desired output.
",chriseppstein,nex3
1122,2014-04-04 20:39:31,"@chriseppstein I don't think we have evidence that people will care about the numeric precision in particular, and I don't think it makes sense to pre-emptively make every aspect of the output format configurable. In fact, I think there are aspects‚Äîpossibly including precision‚Äîthat it doesn't make sense to make configurable at all.
",nex3,chriseppstein
1122,2014-04-05 01:07:18,"I can see a divided opinion above, but after finding the grid bug with foundation @glebm has done many examples to show the importance of getting the precision working.

I can see that the foundation grid breaks (or a big bug at least). I would agree that clean output is important but this is now a month old..

I feel that the precision should be minimum to what is needed, but it goes hand in hand with 33.33% as a percentage. Browsers should respect this decimal. However this thread seems to be a double ended sword as a high precision will be needed for graceful fallback.
",Ne-Ne,glebm
1117,2014-02-15 05:25:35,"@nex3 Maybe "".foo, .baz"" ?
",jlong,nex3
1106,2014-02-08 00:01:52,"Thanks for all the bug reports, @xzyfer.
",nex3,xzyfer
1096,2014-01-31 10:26:53,"Thanks for the reply @HugoGiraudel 

TIL! Ok I think I understand that response. So hyphens and underscores are treated the same, and it's a matter of aesthetics and conventions. With that understanding, sass-convert should not enforce conventions onto the user, the hyphen should not be converted to an underscore.

I've struggled to find any official documentation about this in the sass documentation, I've only found documentation from blogs. 
",badsyntax,HugoGiraudel
1094,2014-02-04 19:12:19,"@HugoGiraudel this came from #690 
The problem with `folder/*` is you can't control the import order, you would expect an alphabetical one but it's too implicit.
Having a standard `_module.scss` responsible for importing in the correct order would be better. 
",JulienCabanes,HugoGiraudel
1094,2014-03-30 12:47:14,"@JulienCabanes & @HugoGiraudel & @Anahkiasen :

I love the suggestion made by @Anahkiasen.

An alternate solution would be to have a different syntax depending on what you're loading:
- If the path ends with a letter of number, it's considered a file
- If the path ends with `/`, it's considered a folder and an index file will be loaded... which could be named `_module.scss`, `_index.scss`, `_component.scss`, `_loader.scss`, ... Maybe the devs could leave it do users to configure what name they want for their index file? I'm pretty sure we're all unlikeoy to want to give up our personal preference here.
- If the path ends with `/*`, it's considered a folder and all files will be loaded alphabetically.

## Example code


",jslegers,HugoGiraudel
1094,2014-03-30 18:39:08,"@HugoGiraudel :

I'm not familiar with that convention, but it's but a minor difference...


",jslegers,HugoGiraudel
1094,2014-12-04 13:21:37,"@robwierzbowski a css placeholder can be defined with `%`


",koenpunt,robwierzbowski
1094,2015-05-09 03:52:44,"@nex3 are you asking why someone would want variables in @import strings? Simple:

Lets say you have a file that imports a couple dozen other files:



Then lets say you have to change `my/path/` to something else. You now how to change it for all the import strings. If you could use variables though you could have something like this:



It makes changing tons of import strings a piece of cake and opens the door for dynamic build systems.
",Jakobud,nex3
1094,2015-09-11 21:39:40,"@chriseppstein That's going in a cool direction, but the README is super vague.
",nex3,chriseppstein
1094,2015-09-28 21:29:11,"As suggested by @chriseppstein, cssmodules has cool stuffs like [composition and dependencies](https://github.com/css-modules/css-modules#dependencies) which looks like LESS's `@import (reference)`


",JulienCabanes,chriseppstein
1094,2015-09-29 00:52:45,"@xzyfer Here's some of my initial thoughts on how ICSS imports, aliasing, and other constructs can look like in SCSS and using W3 grammar on [media features](http://www.w3.org/TR/mediaqueries-4/#mq-features), as well as using `@import` as an [at-rule that accepts a block](http://www.w3.org/TR/css-syntax-3/#at-rule):



**Using @import with (reference) media feature**



**Using `@import` as an at-rule with block:**



**Overloading `@extend`**



In summary, I'm not a huge fan of how ICSS uses the syntax for properties and values outside of an at-rule to define imports and exports, and am _especially_ against the use of pseudo-selectors (that don't select anything) where at-rules are more appropriate.

We can make minimal changes to SCSS syntax and still get all the benefits of how imports, exports, local aliases, etc. are done in ICSS, with greater adherence to W3C syntax grammar. The changes are:
- Giving Sass comprehension of certain media features, such as `(reference)`, with regard to `@import`
- Allowing `@import` to contain a block
- Overloading `@extend` to comprehend `from` as such:
  - `@extend <string> from [ <url> | <string> ];`

What do you think?
",davidkpiano,xzyfer
1094,2015-10-13 20:55:38,"@chriseppstein Whoops, not aware of that; could you point me over this new directive's discussion ?

By the way; you have my syntax proposal.
the way we `@extend` doesn't really matter for me, but it would be usefull to name the import locally, as it would be a bit painful to write :


",long-lazuli,chriseppstein
1088,2014-10-30 22:46:29,"@nex3 how much refactoring are we talking about here? Would you mind pointing me to the relevant files so that I could take a look? I was going to make the switch to the indented syntax, but this was kind of a deal breaker since we use maps a lot. We're using Coffee and MtHaml, so wanted to keep the indented syntax consistent throughout our development stack.
",ezekg,nex3
1087,2014-01-21 16:53:38,"> When you swap line 1 and line 2 without also swapping line 3 and line 4

Hey @Snugug, the order of `@extend` statements does not matter here. Swapping lines 3 and 4 does not influence anything. Only the order of lines 1 and 2 influences the order of resulting CSS.

@TopView, Sass does not have telepathic powers. `A { @extend B; }` basically means ""find B above and add A next to it"". The position of B in your code defines where A appears in code, because A always appears next to B, and B appears where you type it. So yes, it's totally your problem.
",lolmaus,Snugug
1087,2014-01-21 16:57:00,"@lolmaus is right about 3/4. Typing faster than thinking

> On Jan 21, 2014, at 11:53 AM, lolmaus notifications@github.com wrote:
> 
> When you swap line 1 and line 2 without also swapping line 3 and line 4
> 
> Hey @Snugug, the order of @extend statements does not matter here. Swapping lines 3 and 4 does not influence anything. Only the order of lines 1 and 2 influences the order of resulting CSS.
> 
> @TopView, Sass does not have telepathic powers. A { @extend B; } basically means ""find B above and add A next to it"". The position of B in your code defines where A appears in code, because A always appears next to B, and B appears where you type it. So yes, it's totally your problem.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,Snugug
1082,2014-01-13 22:31:30,"I reproduced it. @nex3, the problem is that we need to add a `:tabs` accessor to the comment node.
",chriseppstein,nex3
1075,2014-01-10 00:35:18,"@nex3 Why did you close this? The fix had to be adapted to master, because the underlying code had changed significantly compared to stable.
",felixbuenemann,nex3
1071,2015-01-30 21:24:23,"@HugoGiraudel can you open a new issue for that?
",nex3,HugoGiraudel
1064,2014-01-06 21:56:43,"@felixbuenemann Thanks!
",chriseppstein,felixbuenemann
1063,2014-01-07 17:01:00,"@felixbuenemann yes please. Master is a god place for it. 
",chriseppstein,felixbuenemann
1057,2014-01-25 00:12:18,"@cheald yeah I went ahead and just did that :+1:
the fix is to add `gem 'sass', git: 'https://github.com/nex3/sass.git'` to your gemfile
",morenoh149,cheald
1051,2017-01-04 20:44:34,@HugoGiraudel: The link http://sassylists.com doesn't work anymore (domain seems deleted).,strarsis,HugoGiraudel
1050,2013-12-30 07:24:25,"@robwierzbowski If we add this flag, it will likely have the behavior you suggest. Changing the source order is something we're very keen to avoid.
",nex3,robwierzbowski
1050,2014-01-06 19:18:15,"@chriseppstein The issue with what you've written is it actually goes against the best practices of responsive web design. When working with media queries, the best practice is to make changes as needed and not necessarily group them all together, especially true when it comes to grids as different layouts tend to ebb and flow much more than `full-to-half`. With the way you've described, every single different permutation of change between every single set of grids one may have across all permutations of media queries would need to be made available which is a maintenance nightmare and will easily become hard to decipher for developers. On the other hand, if each layout were to have their own extendable and could be called as such, that would make it infinitely easier to mix and match, and what was happening would be easier to grok.

Let's also not forget that this isn't just for layouts, it's for any number of items. Background image, clearfixes, box sizing, fonts stacks and definitions, all can benefit from being able to be extended from within a MQ and have a context created and needing to create extendable classes for all of their potential permutations seems like a maintenance headache as well.
",Snugug,chriseppstein
1050,2014-01-06 19:51:25,"+1, I'm completely agree with the latest comment of @Snugug.
I already had this need, and had to do some code gymnastics to get round this limitation. This gave things ‚Äã‚Äãless flexible, and more difficult to read and maintain.
",emagnier,Snugug
1050,2014-01-06 22:44:24,"My example was based off @Snugug's (which I think is valid). But disagreeing with the example is not a disagreement with the issue.

@chriseppstein Do you think we shouldn't be able to extend a(ny) value from within a media query? By which I mean apply `<rules>` to `<selector>`, where `<selector>` is `.class` or `@media (foo) { .class }`. 

In my experience this is one of the most often requested features in Sass, both verbally among my peers and from what I see in issue queues and comment threads on the internet.
",robwierzbowski,Snugug
1050,2014-01-06 22:44:24,"My example was based off @Snugug's (which I think is valid). But disagreeing with the example is not a disagreement with the issue.

@chriseppstein Do you think we shouldn't be able to extend a(ny) value from within a media query? By which I mean apply `<rules>` to `<selector>`, where `<selector>` is `.class` or `@media (foo) { .class }`. 

In my experience this is one of the most often requested features in Sass, both verbally among my peers and from what I see in issue queues and comment threads on the internet.
",robwierzbowski,chriseppstein
1050,2014-01-07 23:21:28,"I want to continue considering this. Even if it's the case that there's a better factoring available for every stylesheet that wants to extend out of a media query, it's clear that users aren't able to see that refactoring easily. @robwierzbowski is right that this is highly-requested functionality. People run into the issue of extending out of media queries frequently, and I'd like a solution that we can at least explain in the error message.
",nex3,robwierzbowski
1050,2014-02-24 22:45:05,"@nex3 I'm not convinced. We've only just introduced `@at-root` and there is a learning/education period that is required to decide that. Furthermore, we have a way to produce bloat: mixins. I am against making @extend sometimes a selector operation and sometimes a rule copy operation. I'd rather see users write mixins that conditionally extend or include. This is not a feature Sass needs to add.

Additionally, I feel this will only increase the confusion about how people think that placeholder selectors can only be used like simple mixin declarations (having no arguments) rather than the powerful selector concept that they are.
",chriseppstein,nex3
1050,2014-02-25 01:09:57,"I really appreciate the points on both sides here, and I think they're
making the argument for extend with a flag very strong. It's a syntax that
users expect, and the code result proposed is no larger than any equivalent
code produced by at-root.

I agree with Nathan that users (like myself) specifically want to extend
the styles but scope them to the query. I can imagine a couple ways of
creating mixins with at root that would accomplish this, but none so direct
or understandable as processing at the Sass level with extend.

On Monday, February 24, 2014, Nathan Weizenbaum notifications@github.com
wrote:

> @at-root (without: media) { & { extend .something; }} removes the runtime
> context so that the extend operation can be performed as if it were not
> within a media context. This is useful in places where the base definition
> is a constant across all media definitions or is appropriately overridden
> via the cascade even when applied across media types.
> 
> This doesn't scope the definition to the media query, though, which I
> think is what users are trying to express. Ensuring that the properties
> cascade so that a top-level extension works out is complicated and
> contingent on the specifics of the user's CSS.
> 
> I want this too. Opting-in using !duplicate or some other syntax makes
> the user think about it. Not requiring an opt-in causes huge surprise when
> the stylesheet bloats like using mixins. I think we have reached the
> boundary where @extend can be implemented in a preprocessor without being
> a leaky abstraction.
> 
> I agree that the abstraction is still leaky, but !duplicate (or whatever)
> makes it less leaky, and there's value in that. @extend is how users
> expect to be able to express this -- we have ample evidence of that from
> the volume of requests we get for it to work.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-35961979
> .

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowski
1050,2014-02-25 19:31:31,"@robwierzbowski Yes. As long as you can name each break point. Mixins, at-root, and extend are powerful enough to express the exact behavior that is desired. I guess I need to write a Sass library that demonstrates how.
",chriseppstein,robwierzbowski
1050,2014-02-26 15:03:59,"Sass isn't only for newcomers. Preserving source order at the expense of a
little more markup is a positive trade IMO.

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com

On Wed, Feb 26, 2014 at 9:57 AM, cimmanon notifications@github.com wrote:

>  Sometimes it acts like extend and sometimes it acts like include.
> 
> Newcomers to Sass don't understand the difference or why it matters.
> 
> The most important aspect of @extend https://github.com/extend is that
> is preserves the function of the cascade.
> 
> Again, most users don't understand this. All they understand is that it
> consolidates selectors, which means more compact CSS to them (though this
> isn't always the case). Users are disappointed that code like this doesn't
> work:
> 
> %clearfix {
>     /\* clearfix stuff */}
> .one {
>     color: blue;
>     @extend %clearfix;}
> .two {
>     color: green;
>     @media (min-width: 50em) {
>         @extend %clearfix;
>     }}
> .three {
>     @extend %clearfix;}
> .four {
>     color: orange;
>     @media (min-width: 40em) {
>         @extend %clearfix;
>     }}
> 
> The normal expectation is that it would generate something like this:
> 
> .one, .three {
>     /\* clearfix stuff _/}
> .one {
>     color: blue;}
> @media (min-width: 50em) {
>     .two {
>         color: green;
>         /_ clearfix stuff _/
>     }}
> @media (min-width: 40em) {
>     .four {
>         color: orange;
>         /_ clearfix stuff */
>     }}
> 
> To propose sprinkling extra media queries everywhere is the exact opposite
> of what users expect when they use media queries (smaller CSS). Easier to
> write doesn't make for a good experience. Would adding a LESS-style include
> (where classes are also mixins with no arguments) really be that bad? I
> don't think anyone cares what it's called (extend vs include vs
> copy-it-here-because-i-said-so), they just want the behavior.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-36133080
> .
",robwierzbowski,robwierzbowski
1050,2014-02-26 17:07:35,"If I understand it correctly, I'm all for Chris's last suggested
implementation. Sounds like exactly what I'd expect, and would be crazy
useful.

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com

On Wed, Feb 26, 2014 at 11:45 AM, Chris Eppstein
notifications@github.comwrote:

>  Newcomers to Sass don't understand the difference or why it matters.
> All they understand is that it consolidates selectors
> 
> @cimmanon https://github.com/cimmanon, Whether or not they understand
> that there is a fundamental theory behind @extend is irrelevant. There
> is, and that theory is what makes it work consistently in practice for
> _all_ of our users.
> 
> To propose sprinkling extra media queries everywhere is the exact opposite
> of what users expect
> 
> I get it and it's why we're talking about it. But I'm ok with things not
> matching expectations as long as there is a clear explanation that will
> help them understand. It is easy to construct an example where the output
> that was originally suggested would differ from the _behavior_ that is
> implied by the source code.
> 
> Does it make sense to add a separate, media query-friendly include
> directive?
> 
> Not to me. I don't see a new fundamental abstraction here. Ultimately, if
> we ever make an optimizer, it could clean up this output and coalesce media
> queries according to heuristics, optimization levels, etc.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-36146497
> .
",robwierzbowski,robwierzbowski
1050,2014-02-27 02:57:19,"> Well, the semantics I'm seeing asked for don't make sense to me. Sometimes it acts like extend and sometimes it acts like include. I very much dislike this.

By ""semantics"", I was referring to the styling semantics: the relationship between the Sass stylesheet and how the page is styled, not the relationship between the Sass stylesheet and the generated CSS. In terms of styling semantics, the proposed flag brings `@extend` closer to the stated goal of ""this element should be styled as though it also matches this selector"".

> Instead, I think a solution would need to add `@media` directives all over the document -- wherever an extended selector is found; just like we do with selectors now.

Sorry, I should have been clearer: this is what I'm arguing for. I didn't read @Snugug's example closely enough to figure out that it wasn't identical to this.

> To be clear, I'm not in favor of adding a flag here. If we're going to allow `@extend` within directives having a runtime dependency then we should just allow it. Furthermore, the strategy I outlined above works fine for `@supports`, `@media`, `@page` and even unknown directives.

I think a flag is important to avoid users having massive unexpected bloat, although I'm open to being convinced otherwise.
",nex3,Snugug
1050,2014-02-27 18:53:58,"> Sorry, I should have been clearer: this is what I'm arguing for. I didn't read @Snugug's example closely enough to figure out that it wasn't identical to this.

:facepunch: 

> I think a flag is important to avoid users having massive unexpected bloat

This is Sass's curse for many of it's features. I support flags that change behavior or imply making something succeed that would fail/warn otherwise. This just implies that the user understands what they are doing. They need to understand this once, but then we force them to type this flag for all eternity. I'd rather them just learn this by reading the output and asking ""why?"".
",chriseppstein,Snugug
1050,2014-03-19 21:06:58,"@chriseppstein My impression was that you and @nex3 decided that the feature is necessary but neither agreed on resulting behavior nor confirmed that it's technically feasible.
",lolmaus,nex3
1050,2014-03-19 21:06:58,"@chriseppstein My impression was that you and @nex3 decided that the feature is necessary but neither agreed on resulting behavior nor confirmed that it's technically feasible.
",lolmaus,chriseppstein
1050,2014-09-12 21:48:28,"@nex3 The issue with mixins is the bloated output. people want to condence the output using comma selectors. I've been thinking that maybe we can simply add support to @extend to extend mixins.
",chriseppstein,nex3
1050,2014-09-18 17:53:51,"@nex3 a few points:
1. only 58% of web traffic is gzip compressed. better output for the other 42% seems prudent.
2. Output that approximates hand-optimized CSS is a part of the craftsmanship that I want to support for our authors.
3. I don't think there's a safe optimization that will do a good job here. But if there is, that is clearly and interesting direction and I'd be interested in knowing how you think that would work.
",chriseppstein,nex3
1050,2014-12-09 22:24:04,"I just read this discussion in its entirety to reach a conclusion on the status. I gather the consensus is to go with the solution described by @chriseppstein in https://github.com/sass/sass/issues/1050#issuecomment-36097901. If that's the case, could we create a new issue describing the issue, so folk such as me can track the progress? The title of this issue is now irrelevant and thus misleading.
",OliverJAsh,chriseppstein
1050,2015-08-18 10:16:21,"I totally agree with @nex3.

Having this feature is much more important than caring about bloat that only affects non-gzipped CSS.

I also think that hand-optimized CSS is important, but in that case you might not use this feature, right?

Post-optimization is definitely possible. The question is how good it will be while staying safe.
",luksak,nex3
1050,2016-07-27 17:44:45,"@chriseppstein Please, keep us updated on the progress, as there are a lot of us waiting for this feature to be added to Sass as soon as this is possible.
",matthewmorek,chriseppstein
1048,2014-01-08 13:48:50,"@chriseppstein there's been no problem with single quotes :)
",costa,chriseppstein
1047,2014-01-07 23:09:15,"I think the diagnosis is correct; although the working directory was always in the load path, for some reason it wasn't being watched for changes in 3.2. Something about the listen changes in 3.3 made it start to be watched instead.

The 3.3 behavior is arguably correct, but since it's new behavior and we're deprecating the working directory load path anyway, we could just rip it out to do away with this performance problem. @chriseppstein, thoughts?
",nex3,chriseppstein
1041,2013-12-12 04:45:55,"@Snugug thanks for blasting the dust I had stuck in my eyes for all these years :+1: 
",jcayzac,Snugug
1040,2014-08-07 17:00:02,"@nex3 I know you're against this feature, but I still believe strongly that we should make importance an aspect of a value expression. I think it is very consistent. I cannot rewrite every compass mixin to have support for important being attached to any possible value that can be passed in to a mixin or function, it's a support nightmare.
",chriseppstein,nex3
1037,2014-08-19 03:28:21,"Hi @nex3,
i have tried both 3.3 and 3.4

Sass 3.3.14 is still giving me 
`Encoding::UndefinedConversionError on line [""833""] of /Users/user/.rvm/gems/ruby-1.9.3-p547/gems/sass-3.3.14/lib/sass/util.rb: ""\xE2"" from ASCII-8BIT to UTF-8`

but with Sass 3.4.0.rc.1, Everything works just fine. Thanks you
",munwr,nex3
1036,2013-12-07 06:25:25,"@chriseppstein, the complexity of using the parent selector is getting ridiculous.

In another thread @nex3 [says](https://github.com/nex3/sass/issues/996#issuecomment-30038445): _The syntax needs to be easy to understand when reading the code for someone with only passing familiarity with Sass, and easy to remember when writing Sass._

The burden of using the parent selector contradicts that statement.
",lolmaus,nex3
1036,2013-12-07 06:25:25,"@chriseppstein, the complexity of using the parent selector is getting ridiculous.

In another thread @nex3 [says](https://github.com/nex3/sass/issues/996#issuecomment-30038445): _The syntax needs to be easy to understand when reading the code for someone with only passing familiarity with Sass, and easy to remember when writing Sass._

The burden of using the parent selector contradicts that statement.
",lolmaus,chriseppstein
1036,2013-12-08 01:33:28,"I agree with @nex3 on this one; the expected result is closer to the the non-@at-root output and should reflect that. While I agree that magical manipulations should be done with explicit calls, I don‚Äôt feel this is one of those instance and the current behavior is both generally useless and breaks an at-a-glance understanding of how it should work.  

On Saturday, December 7, 2013 at 8:26 PM, Chris Eppstein wrote:

> @lolmaus (https://github.com/lolmaus) What is hard to understand about & being passed to a well-named function?
> Exposing & to scripting is to enable complex selector manipulation. Magical selector manipulation can and should only happen through explicit and well-defined selector syntax.  
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/1036#issuecomment-30072474).
",Snugug,nex3
1036,2013-12-08 21:03:10,"@nex3 I've been thinking about your proposal and it is growing on me. Having `&` always represent a single selector and letting sass evaluate the selector expression once for each comma delimited selector does have a certain appeal. The only use case it precludes is letting the user have a more global view on several comma-delimited selectors and how they should be combined at the script level. However, I don't have a good use case for this and it could be introduced later by creating a special syntax for ""all the selectors"".

This is a big change to make for something that's already been called a release candidate, all the existing code that does `nth(&, 1)` or `@each $selector in &` will break. Caveat emptor?
",chriseppstein,nex3
1033,2013-12-10 19:17:29,"Nice, it looks like #1039 fixes the problem indeed, thanks @glebm ! 
",ahmeij,glebm
1033,2013-12-13 13:59:43,"it works! please do the pull request @nex3 
thanks @glebm 
",ServusJon,glebm
1032,2013-12-16 21:48:28,"@HugoGiraudel file a separate issue and we'll discuss it there.
",nex3,HugoGiraudel
1028,2013-12-07 00:58:59,"@nex3 Do you have any thoughts or recommendations to add to sstephenson/sprockets#507?
",spohlenz,nex3
1027,2015-12-23 12:48:49,"@chriseppstein Suppose I am importing something from JSON to a map in sass. JSON doesn't support number keys but I know my keys are numbers and the numbers are important.

SASS isn't always the primary consumer of data, and I shouldn't have to make all my data work around SASS. SASS really lacks the ability to parse data or makes it incredibly difficult and it really hurts its interoperability with other tools.

This hurts for stuff like fonts, colours and other collections of information that my other languages want access to. Basically anywhere that I want SASS to communicate with the rest of my application instead of being this cumbersome thing that I have to maintain twice.

It doesn't even matter that it doesn't support the parsing of things like JSON which are ridiculously common, I'm happy to write or source that myself, but basic features like type casting really should be in the core.

In fact following that argument why doesn't all data start off in the format it is needed in? Because the same piece of data can be consumed by multiple things in different ways.
",georeith,chriseppstein
1025,2013-12-11 22:54:23,"As @robwierzbowski noted. There are good uses for overriding a spec function. 
",chriseppstein,robwierzbowski
1023,2013-12-07 01:19:39,"This is expected. Sass doesn't use whitespace to determine whether to consider an operation unary or not, and `-` has higher precedence than ` `, so your property value is actually parsed like`0 (auto - ($footer-height + 1)) 0`.

You can use @HugoGiraudel's workaround or write `0 auto (-($footer-height + 1)) 0`.
",nex3,HugoGiraudel
1019,2013-11-25 17:53:46,"@xzyfer You can email the test code: chris@eppsteins.net
",chriseppstein,xzyfer
1019,2013-12-20 03:59:03,"@chriseppstein did you end up looking into that project? Otherwise I'll commit some time to this over the week holiday break.
",xzyfer,chriseppstein
1019,2013-12-23 20:54:30,"@Snugug Those slow downs could very easily be a compass issue and not a sass issue, the compass css3 mixins are significantly slower than they were before (Because they do so much more than they used to).
",chriseppstein,Snugug
1019,2013-12-23 21:27:17,"@chriseppstein I removed all Compass CSS3 mixins

UPDATE: In what I was running I noticed that there was still use of CSS3 Background Gradients. Having removed the calls to that and the Compass imports for Background Gradients, and the compile time hasn't improved by any substantial amount (reduces average compile time by ~2s). As a for instance, one stylesheet that absolutely does not touch Compass CSS3 mixins use to take around 15.3 seconds to compile, now takes around 21.6 seconds to compile.

It's fair to not rule out Compass as the source of slowness (as everything is being compiled through Compass for both runs), but it's not due to the CSS3 mixins.
",Snugug,chriseppstein
1019,2014-06-02 20:37:36,"@nex3 code example of iterative tree traversal: https://gist.github.com/chriseppstein/27c45a9bf87d56152033
",chriseppstein,nex3
1019,2014-06-04 17:53:11,"@thedarkone  I think you've got an old version of susy. Using susy (2.1.2), sass 3.3.8

$ sass -r susy slowfile.sass slowfile.css
",chriseppstein,thedarkone
1019,2014-07-04 05:45:45,"@chriseppstein thank you for trying. I also quickly tested your branch with the test defined here and have the same result as you (~2.5% slower). That would have been too easy.
",idflood,chriseppstein
1019,2014-07-04 09:10:05,"@idflood @chriseppstein that @tenderlove's article is easy to misunderstand. On MRI defining a method via `define_method` (instead of `class_eval`) uses 2x less memory **per method** definition, but as you've found out is slower **per method call** (about 30% slower on MRI, your diff of only about 2% is because overall not that much time is spent in invoking those methods). I don't think there is any difference in object allocation (or GC overhead) **per method call** between `define_method` and `class_eval`.
",thedarkone,chriseppstein
1015,2013-11-26 06:34:02,"I am trying to understand the opposition to this. `@import` was around before sass. Sass appropriated it so that the import is performed at compile time rather than request time. But then scss proceeds to break relative urls in it's implementation... 

I don't understand the viewpoint that urls would be ""mangled"" by fixing this. They'd be fixed, not mangled.

Nor do I understand @chriseppstein's point about 3rd party libs (and it's obvious he's given this thought). I think I need an example of where a fix for this might fail. My guess is it has something to do with urls pointing to dynamic endpoints? Eg `url(not/a/real/path/dynamic-image)`

(If we had been talking about fixing this in a `@sass-import` directive however, that would be different and I would understand the resistance).
",CrescentFresh,chriseppstein
1014,2013-11-14 14:49:57,"@Snugug Why not?  Maybe new features _should_ be an extension first.  Then, if the feature is popular enough, it can become a core feature of Compass, then a core feature of Sass.

I'm not saying no, but I don't see how HSB is any better than any other format provided by Adobe products.  The last several versions have a single field containing the hex value, which seams more convenient to me than trying to copy from 3 individual fields.

![color-picker](https://f.cloud.github.com/assets/2333706/1541679/86b398f6-4d3b-11e3-9a9c-02aca09e0799.jpg)
",cimmanon,Snugug
1013,2013-11-13 15:52:28,"@Snugug The linked `sass-import-once` seems to be the de facto solution, copied, pasted, and reinvented regularly, however the drawback is:



I'm very much looking forward to native `@import once`, don't get me wrong.

As far as it's measure of improvement; it is ""nice to have"", perhaps ""very nice to have"" ( _though I'll concede, not's not ""required""_ ). Code clarity is improved because the mental overhead of nested conditions is reduced.

A more familiar keyword, such as `@return` may assist those coming to the language, I'm not sure. I know that, given it were named `@return`, it would behave rather predictably based on my experience with other environments, namely templating languages. I assume because both PHP and ASP.NET ( _with Razor_ ) are ubiquitous, it wouldn't be a far stretch.
",northborndesign,Snugug
1013,2013-11-13 16:23:32,"We've digressed a bit. The reason behind my suggestion was that `@end` allows one to escape from a file primarily for the `@import once` use case. Since we cannot conditionally `@import` files, we can achieve the desired behavior by conditionally _leaving_ the file preemptively.

I haven't followed the discussion on `@import once` as intently as others have, however the longevity of the discussion lacking implementation reinforces the difficulty of implementing it. I have suggested this as an alternative that may or may not have less implementation overhead.

The condition linearization was merely icing.

Also @Snugug, note:

> PHP ( yea, I know, PHP ) [...]

As a PHP developer, I'm very aware of the ... problems. I participate in discussion with core contributors to improve the ""rat's nest"" that is PHP. I assure you this idea arose in isolation, with no inspiration from PHP. It was merely an example of another language exhibiting similar behavior ( _along with ASP.NET Razor_ )
",northborndesign,Snugug
1013,2013-11-13 16:49:24,"@chriseppstein Fair enough. Looking forward to conditional imports then.
",northborndesign,chriseppstein
1013,2013-11-13 17:56:55,"> @Snugug 
> As for the suggestion that it's in PHP and therefore it's okay, to quote @chriseppstein:
> 
> > [W]e do not take any inspiration from the language design of PHP and most programmers view PHP as the quintessential example of bad language design

How about `require_once`? It appears to me as a feature that Sass would benefit from.

Consider the situation: two separate modules both depend on Toolkit, and Toolkit unconditionally emits some CSS when required. An `@import-once` could resolve the issue without a need to manually implement it in every Compass extension (you didn't do it for Toolkit, so...).
",lolmaus,Snugug
1013,2013-11-13 17:56:55,"> @Snugug 
> As for the suggestion that it's in PHP and therefore it's okay, to quote @chriseppstein:
> 
> > [W]e do not take any inspiration from the language design of PHP and most programmers view PHP as the quintessential example of bad language design

How about `require_once`? It appears to me as a feature that Sass would benefit from.

Consider the situation: two separate modules both depend on Toolkit, and Toolkit unconditionally emits some CSS when required. An `@import-once` could resolve the issue without a need to manually implement it in every Compass extension (you didn't do it for Toolkit, so...).
",lolmaus,chriseppstein
1010,2013-11-11 16:54:41,"@chriseppstein In Singularity we use Breakpoint to query media context. If my media query matches my medium breakpoint then use the grid associated with it. I use media a lot more for context querying than selectors.

Auto generating a fallback for things like rgba is a good one for property querying. If something has rgba I can query the selector and write a hex value fallback, then duplicate the property and write the rgba value.
",scottkellum,chriseppstein
1010,2014-10-19 12:09:01,"@Snugug I'm not here to pick a fight ‚Äì just to understand and provide what little I have. IMO what you are asking for seems too complex and does not help to automate things. I could be wrong ‚Äì but I'm failing to see how you would use such a feature generically while keeping it simple and understandable. 
Best to you and the guys ‚Äì roger out :-)
",jakob-e,Snugug
1010,2014-10-20 13:59:52,"For me, the mental model of using `&` still works because MQs are combined like selectors and Sass allows nesting them like selectors. I‚Äôm sure @nex3 great insight into the language details and complications of this. I‚Äôm not sure we need a whole new model for context as the `&` model works well. I would be open to new models but as a language feature it should be simple, not too clever, and match existing mental models.

@jakob-e:

> A minor detail about the function I described is the concept of splitting the context into groups ‚Äì it might come in handy if looking for "".grid"" in parent selector only or...

I think one of the main sources of confusion is that this conversation is getting to be really off-topic and maybe you should start a new thread for context querying. It‚Äôs not a feature I would necessarily advocate for but you can have a discussion about those details there.
",scottkellum,nex3
1004,2013-11-16 00:49:08,"@Snugug, thank you. You're right, i haven't read documentation for Sass 3.3 features yet (does it exist already?). I'm sorry for bothering you and others.
",lolmaus,Snugug
1001,2013-12-13 18:05:30,"@nex3 The nav-\* properties have accepted an ID since at least 2004, per spec: http://www.w3.org/TR/2004/CR-css3-ui-20040511/#nav-dir.  I think this change predates SASS by at least a little bit.  ^_^
",tabatkins,nex3
999,2016-11-01 12:21:38,"@nex3 Closed and old issue I know, but I can't find an open and relevant issue for this. Here's an example of where Stylus bests Sass because of property lookup:

Sass:



Stylus:



It's not a big deal but I think it helps a lot with readability. Whereas with a var you can't immediately visually grep how often a var is used (and what the consequences are of changing it), you can immediately tell with a property lookup that there is a direct connection between two properties that doesn't affect anything else.
",SamHH,nex3
998,2013-12-06 22:27:58,"I agree with @chriseppstein. This isn't something that's widely useful enough to warrant inclusion. Sass also exposes a pretty reasonable Ruby API for watching files, so it's easy to make something like this for yourself without needing it to be in the Sass core.
",nex3,chriseppstein
997,2013-11-04 19:49:59,"@chriseppstein different calculations can create very large numbers before reducing them to the answer, for example using wilson's theorem to calculate prime numbers uses a factorial of `n` to determine if it's prime. Which in this case would make 24 the highest number you could use.

The maclaurin series does the same thing, which is used to calculate many trigonometric functions (`cos`, `sin`, `tan`, ...)
",thejameskyle,chriseppstein
996,2013-12-06 23:41:16,"@nex3 what about something like the following:


",Snugug,nex3
996,2014-01-10 03:46:20,"I got curious how Python folk resolve this issue, as Python doesn't boast to be syntactically sweet as well as Sass.

It turned out, they [use an `enumerate` helper function](http://stackoverflow.com/questions/522563/accessing-the-index-in-python-for-loops) for this which does a simple job: turns an array into a dictionary.

So i made a similar function for Sass.

Usage:



Source:



Seems to be working fine and handy to use.

Demo: http://sassmeister.com/gist/8346425

It doesn't cover @Snugug's nifty use case though.
",lolmaus,Snugug
993,2013-11-02 21:38:13,"Your problem is not related to extending. You just forgot the ampersands, while you didn't forget them in the workaround.

Here you go:



Result:



Demo: http://sassmeister.com/gist/7283712

@Snugug's first example won't work either due to missing ampersands.

I think this approach violates the [KISS principle](https://en.wikipedia.org/wiki/KISS_principle) a lot. I find your workaround to be way more readable and maintainable.
",lolmaus,Snugug
993,2013-11-02 22:52:55,"@lolmaus I actually had hoped I wasn't forgetting them! I was riding on the idea that placeholders would ""cut and paste"" my `:hover`, etc. ""selectors"" onto the ampersand and behave like decorators to the parent selectors. Your solution and @Snugug's both work nicely. and answer the original question, so thanks!

FWIW, I prefer @Snugug's namespacing, but @lolmaus raises an interesting point that perhaps forgoing extension at all (my ""workaround"") actually results in cleaner code. I am actually slightly on board with this idea, and since that's what's in my repo now it might become what it stays.

Good learning experiences from both of you, thanks a ton!
",tylrtrmbl,Snugug
991,2013-12-13 00:28:21,"@nex3 Nope, that is it. If you have specifics you'd like to see cleared up or have questions, this is the place: https://lists.mozilla.org/listinfo/dev-js-sourcemap
",fitzgen,nex3
990,2014-06-10 14:03:07,"@nex3 Your example doesn't work anymore in Sass 3.3.8. Is there a way to solve this in another way?
",hinok,nex3
984,2013-10-23 21:40:37,"Thank you @chriseppstein, you're awesome!
",lolmaus,chriseppstein
982,2013-12-06 22:26:44,"@nex3  Comments taken and code updated
",twalpole,nex3
982,2013-12-08 07:25:10,"@nex3  ok - changes made and support extended to the current released version of Listen - From my tests a note will need to go with the 3.3 release that if users are on ruby < 1.9.3 they will need to also specify listen < 2.0 in their gemfile for gem to be able to work out the correct versions
",twalpole,nex3
982,2013-12-14 06:16:23,"@nex3  What about  removing the listen dependency from the Gem, and only enabling the --watch functionality if listen is separately included into the users project?  That way there could be a message explaining the issue if the user tries to use watch without having listen available, but wouldn't limit 1.9.3+ users to an old listen
",twalpole,nex3
982,2013-12-14 07:40:26,"@nex3  or I could implement the method from http://en.wikibooks.org/wiki/Ruby_Programming/RubyGems#How_to_install_different_versions_of_gems_depending_on_which_version_of_ruby_the_installee_is_using. To possibly solve the issue?
",twalpole,nex3
982,2013-12-14 20:10:11,"@chriseppstein Ok -- what about the option of removing the dependency and having a message if someone tries to use the watch functionality telling them they need to also include listen?
",twalpole,chriseppstein
982,2014-01-13 20:17:59,"@nex3 I've used 3.2 with multiple projects using Guard and haven't encountered any issues, primarily since I explicitly avoid any SASS-related watches. I just run my stuff through the compiler. Obviously what @chriseppstein is proposing is the sane alternative, but how long would that take? I would not mind to just get an error message if the version of 'listen' I depend on cannot be used for one reason or another, or to be ""downgraded"" to on-demand compilation. I mean, how would a setup like it is now work out for someone with Guard on a Rails project for example? There clearly are two use cases here: one where SASS is run as a library, and the other where it's run standalone and they are getting mixed up.
",julik,nex3
982,2014-01-13 20:17:59,"@nex3 I've used 3.2 with multiple projects using Guard and haven't encountered any issues, primarily since I explicitly avoid any SASS-related watches. I just run my stuff through the compiler. Obviously what @chriseppstein is proposing is the sane alternative, but how long would that take? I would not mind to just get an error message if the version of 'listen' I depend on cannot be used for one reason or another, or to be ""downgraded"" to on-demand compilation. I mean, how would a setup like it is now work out for someone with Guard on a Rails project for example? There clearly are two use cases here: one where SASS is run as a library, and the other where it's run standalone and they are getting mixed up.
",julik,chriseppstein
971,2014-01-15 02:34:20,"This patch is against stable. I've been trying to get it working on master.

I've also implemented @nex3's suggestion to memoize all the offsets and it also tracks line numbers now too. I should be able to get a bow on this tomorrow then we should benchmark it again.

@shepmaster do you have the files you were using for benchmarking your changes anywhere?
",chriseppstein,nex3
971,2014-01-15 02:37:48,"@nex3 A general problem I've noticed with stringscanner is that scanner.pos tracks the byte offset and not the character offset. I'm pretty sure we're misreporting column numbers when multibyte characters are involved. I'm not going to touch that aspect here and it's not clear whether sourcemaps are character based or byte-based. If they are byte-based, we need to track bytes for sourcemaps and characters for error reporting. Sigh.
",chriseppstein,nex3
971,2014-01-15 19:21:12,"@chriseppstein `Sass::Util::MultibyteStringScanner` should handle multibyte characters correctly. Until we hear otherwise, I think it's safe to assume that source maps use characters rather than bytes.
",nex3,chriseppstein
966,2015-02-27 00:04:09,"@nex3 Do note that it's not a new feature; it's a regression. Used to work.

If I do ever find some spare time, I'll pick it up where I left off!
",pcantrell,nex3
955,2013-11-25 16:10:29,"@nex3 Given mavericks shipped with Ruby 2.0, is there any movement on supporting newer versions?  We're evaluating whether we want to maintain a fork in the interim vs waiting for a fix in master.
",spicycode,nex3
955,2014-01-28 02:21:12,"Thanks @nex3 awesome work!
",metaskills,nex3
949,2013-10-15 20:03:22,"This would be a very useful addition that prevents repetition without making the developer worry about it. I can repeat the same style any number of times but my code won't be bloated. 

Its not too transparent, but this is pretty much how your CSS is going to work and with source maps, it should be easy to detect, where this particular **final** style is being computed from. 

I know there are many ways to overcome this problem and this is not really a limitation in sass, but I would totally :+1: this feature!

Another example, for @pdaoust is as below 
It doesn't seem too useful because we are using the mixin below only a few times. But imagine a big project, where these mixins are called over and over but overrides happen once in a while. Doesn't make sense to make it an optional parameter either. Doesn't make sense to have dual declarations. 


",rvinay88,pdaoust
949,2013-10-15 23:33:10,"@pdaoust, I suggested it as a generic improvement. I trying implement OOCSS on a project. In which, I use jade for _templating out_ UI controls. I'm worried that the **weight** of the CSS would increase, as the project gets more complex.

So, I suggest that, _two **exactly identical** rules within the same scope_ could be removed from the **resulting CSS**.

And, Is there a way to label this as a ""feature""?
",viswanathct,pdaoust
944,2013-09-30 20:36:44,"@pdaoust Than you for your feedback.

After a lot of refactoring this is how I'm trying to solve this:



But generated CSS is like this:


",mohsen1,pdaoust
944,2013-10-03 17:43:59,"Thank you @pdaoust! That answers my question! I like the idea of hashmaps. When I started using Sass I thought even `if` and `for` statements are too much for CSS but now that I am demanding even more complex language features! 
",mohsen1,pdaoust
931,2013-10-04 00:24:06,"@nex3 by the same argument you should remove numbers between 0 and 1 for lighten ?
",AlexRiedler,nex3
909,2013-09-06 23:49:33,"@nex3 

the source of `colorOpacity` looks like this



I'm expecting



output: 


",lifeiscontent,nex3
905,2013-09-09 18:04:02,"@jakob-e I appreciate your work on this. I've had to do some similarly gnarly work arounds myself. Have you ever tried to explain this to new team members? The main point of this thread is that the simple (native) solution to this problem exists and is about to be removed.

@MrOrz I like your general concept. 

What I think could work:
- create some documentation educating developers on some common cases for unintentional output (Nicole Sullivan of OOCSS talks about some of these here https://www.youtube.com/watch?v=GhX8iPcDSsI)
- keep the existing behaviour shown by @MrOrz (for placeholders only IMHO)
- change the warning output from a deprecation warning to `""this could potentially result in duplicate output""` warning with a link to said documentation
- add a directive for suppressing warnings inline e.g. `@extend %placeholder !acknowledge` similar to what exists in [PHP](http://php.net/manual/en/language.operators.errorcontrol.php), [Ruby](http://api.rubyonrails.org/classes/Kernel.html#method-i-suppress), [JShint](https://github.com/jshint/jshint/issues/757#issuecomment-17376443)

I'm suggesting this because it introduces a small number for changes to sass core, as well making an attempt to help move the community as a whole forward with education. It's not new for tools to return useful link and documentation as output. I also think the `""this could potentially result in duplicate output""` warning could be applicable in a number of other use cases in future releases.

Ideally I'd be great if the existing functionality could be extended so that the example demonstrated by @nex3 (https://github.com/nex3/sass/issues/905#issuecomment-23974599) was functional i.e. not needing to wrap placeholders in a mixin inorder to inject them into a context.
",xzyfer,nex3
905,2013-10-21 06:22:35,"@chriseppstein do have an initial draft on this, or could you point me in the direction to investigate myself?

I could be mistaken but I've yet to see this addressed either in the spec outlined in #774 or the test cases added for the resulting `@at-root` pull requests.

> Specifically, this allows you to extend a selector via a mixin for all media contexts instead of just within the current media block.

I'm referring specifically to the use case of defining a `%placeholder` or `.normal-class` once without any `@media` directives and being able to **extend a [it] via a mixin for all media contexts instead of just within the current media block**
",xzyfer,chriseppstein
901,2013-08-29 20:36:13,"I share @nex3's perspective here. Scripting happens before all the selectors exist and so a script check for this seems like an inversion of control. We will have other ways of managing the ability to use `@extend` in `@media` in 3.3. 
",chriseppstein,nex3
901,2013-09-05 18:23:22,"That's reasonable, no worries. My use was centered around `@media`, building a mixin wrapping mixin that says ""placeholder exists? extend placeholder. !placeholder exists? create new placeholder with mixin content"". @chriseppstein, can you point me to the 3.3 issue on extend/mqs?
",robwierzbowski,chriseppstein
901,2016-02-08 18:52:03,"Not all Sass concepts are created equally. Placeholders are a kind of selector -- they are not part of SassScript. If we add this, we would also be able to add `classname-exists()`, `id-exists()`, etc. 

@robwierzbowski @lukewatts The right way to do this is to track whether you have created the placeholder in question by storing that state a global variable.
",chriseppstein,robwierzbowski
901,2016-02-08 20:38:59,"@chriseppstein Hmmm. Not ideal but I do understand that placeholders are a different construct than functions and mixins, and it's probably not a priority. I often use mixins with extends and it just bugs me I can't existence check for them and offer a graceful alternative if they're not there. Thanks for clarifying though.
",lukewatts,chriseppstein
892,2013-08-23 23:47:16,"Yes, this is expected. See Chris's explanation in the issue @Snugug linked.
",nex3,Snugug
887,2013-08-15 23:34:31,"@chriseppstein So `$foo: some-new-default !default;` would need to be replaced by `$foo: if(variable-exists(foo),$foo,some-new-default);` for users to be able to override the value with `null`? I'm wondering, why doesn't `!default` already have that behavior? Currently, `$foo: null;` is equivalent to not declaring it at all, which renders it useless, but it seems a legitimate use case to me to want to override the default value with `null` sometimes. 

Any 3rd party Sass framework that have a lot of variables with default values to allow customization would now have to change how they declare those variables in order to provide their end-users the most flexibility in customization. 
",alicexyl,chriseppstein
887,2013-11-19 00:17:07,"@chriseppstein the solution provided is really going to help, happy to have it. :)  But any chance we could have a similar but different keyword? like !defaulted or !existing or something? It's not a huge deal, but my users are mostly not sass people, so something like ""$foo: some-new-default !existing;"" would probably confuse them less....
",gabriellecrawford,chriseppstein
884,2013-08-08 13:44:27,"Thanks for the swift response, @chriseppstein. After further research it appears to be an [issue with the YUI compressor](https://github.com/yui/yuicompressor/issues/59). Sorry for posting a non-existent bug with Sass.
",dcalhoun,chriseppstein
877,2013-08-02 13:30:15,"@chriseppstein why doesn't the following generate all the possible selectors?



Generated:



Irony would have it in practice I actually would have liked `.T .T1 .a` in such a context. :)

The use case for the example is when specifying style modifiers/context; 99% of the time I would like it to just use the immediate selector and then place the result in the context of the other selectors.
",srcspider,chriseppstein
871,2013-09-17 05:58:41,"@chriseppstein passing arguments to `@content` would be incredibly useful. Can we prioritize this issue?
",elisechant,chriseppstein
871,2013-09-17 06:01:00,"Yes please! I came across this issue recently and would love this to help
tidy up some loops I've had to duplicate.

On Tuesday, September 17, 2013, Elise Chant wrote:

> @chriseppstein https://github.com/chriseppstein passing arguments to
> @content would be incredibly useful. Can we prioritize this issue?
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-24565751
> .
",cjcheshire,chriseppstein
871,2014-03-21 14:14:29,"@apfelbox No! Don't say it's like PHP, it'll never get implemented! ;-)
Kidding, of course; kinda. I like the `using` syntax too. It's trivial, but I favor it as part of the ""call"" than of the content body:



Instead of:


",northborndesign,apfelbox
871,2014-11-28 10:29:57,"Hi @chriseppstein and co.
Has this (or similar) recently been implemented?
I have a mixin and include which previously worked using the old method of declaring an empty global variable, changing it with a mixin, then it being available in the include statement via @content

But now (in 3.4.9, ruby, windows command line, also latest version of prepros) the include statement is receiving an empty instance.

A copy of prepros using sass 3.3.8 seems to allow the variable to pass as expected
",davebeesley,chriseppstein
871,2015-08-02 15:25:58,"@nex3 Where can I see libsass status?
",stereokai,nex3
871,2015-11-20 14:31:05,"@xzyfer a 2-months late thank you. Missed your comment. Looks like you guys definitely have a lot on your hands, but I'm glad it's finally officially acknowledged and part of milestone 4.
",stereokai,xzyfer
871,2016-02-26 11:54:22,"Just for the information, Jinja has quite similar solution with macros: http://jinja.pocoo.org/docs/dev/templates/#call

Transfering it into Sass would look like this:



Or for mentioned by @chriseppstein example at the beginning:



Very simple and clean. And fully backward compatible.
",ArmorDarks,chriseppstein
870,2014-01-22 10:14:02,"Hey, @robwierzbowski, @nex3,

We're hitting this same issue where we're **wrapping some third party libraries** inside a class. This is producing some invalid CSS for us.

Bubbling the @-rules would prevent generating invalid CSS in such a case.

What do you think?

Thanks!
",jbalsas,robwierzbowski
870,2014-01-22 10:14:02,"Hey, @robwierzbowski, @nex3,

We're hitting this same issue where we're **wrapping some third party libraries** inside a class. This is producing some invalid CSS for us.

Bubbling the @-rules would prevent generating invalid CSS in such a case.

What do you think?

Thanks!
",jbalsas,nex3
870,2014-01-22 18:31:46,"@nex3 That would solve our (@jbalsas and I) use case, since I agree, there's no valid way to namespace `@keyframes` (but there's no valid way to namespace any at-rule, just any selectors inside of them).

IMHO, bubbling them out makes the most sense for no other reason than preserving the validity (and preventing a case where, while vendors are working with them being nested now, it possibly breaking in the future).

Thanks for reconsidering this :)
",natecavanaugh,nex3
870,2014-01-24 09:47:34,"@nex3 Thanks a lot for considering this!

I'd like to add, that making sure we generate valid CSS will also improve interoperability between other tools. For instance, right now, we're having issues with a library that uses `css-parse` to go through our generated styles and fails because it can't parse them properly.
",jbalsas,nex3
869,2013-07-30 12:13:28,"@Snugug I can see how #139 _might_ fix it, but I don't see how the semantics of %selector in the context of an import are completely equivalent to an @import that doesn't run twice in all contexts, so I think this should stay open until #139 is comes to a conclusion/implementation.

For what it's worth even a `@depends` directive is implemented, why should the behavior I describe not work in the context of an `@import` when %select is meant to be a virtual selector; meaning it makes no sense for the same color definition in one instance to be considered different than the same color definition in another instance that was loaded in.

ie. even if I have TWO files with TWO `%something` if both have `color: red` there should be only one shared `color: red`.
",srcspider,Snugug
869,2013-08-02 22:54:36,"As @Snugug has mentioned, this is the expected behavior. If you import the file that defines `%placeholder` twice, then it will be defined twice and extended twice. In the future we'll move to an import system that will import a file only once by default.
",nex3,Snugug
865,2013-07-28 19:46:41,"@Snugug - that is a larger conversation to have. At the moment, Sass-meister is a completely independent project from Sass, and its long term management, direction, and financial management of its donation system haven't been discussed directly. 

As it stands today, officially pointing to Sassmeister is a bit like http://git-scm.com/ pointing to github.com. It's not impossible, but the official git project would want to have to talk a bit before that happened.

I _really want to_ have those discussions, but I believe that for today, linking to the more official 'drop-in replacement' of '/try.html' is the simplest first step to figuring out how an official ""Try Sass"" feature might work into the seemingly more startupy / codepen.io-style roadmap of Sassmeister. 

Also, note that the Sass site doesn't link to Compass either... only in Chris' bio. 
",hcatlin,Snugug
857,2013-07-22 17:09:34,"@Snugug Ya, I feel like I'm talking to a wall too, so I'm going to stop for now. I have more productive things to do.
",chriseppstein,Snugug
857,2013-07-22 19:23:13,"@Snugug  @chriseppstein 

Nevermind. I must have made a mistake experimenting with it the first time and wrongly interpreted issue https://github.com/nex3/sass/issues/336. I apologise for wasting your time with that.

I guess I don't see any blocking issues with Sass at the moment, although issue https://github.com/nex3/sass/issues/324 still makes me cringe...
",jslegers,Snugug
857,2013-07-22 19:23:13,"@Snugug  @chriseppstein 

Nevermind. I must have made a mistake experimenting with it the first time and wrongly interpreted issue https://github.com/nex3/sass/issues/336. I apologise for wasting your time with that.

I guess I don't see any blocking issues with Sass at the moment, although issue https://github.com/nex3/sass/issues/324 still makes me cringe...
",jslegers,chriseppstein
857,2014-03-30 00:17:01,"@Snugug & @chriseppstein :

Even though I've been able to improve my syntax significantly due to various improvements in Sass 3.3, the lack of dynamic mixins remains a problem for my implementations. No matter how much I improve the architecture of the meta-framework I'm building, I keep stumbling on the lack of dynamic mixins as a blocking issue.

Just today, I found two use cases for interpolated mixins that I struggle to implement without interpolated mixins. 

This is the first one :

## Input:



---

## Output:



---

This is the second one :

## Input:



---

## Output:



See also https://github.com/nex3/sass/issues/626 .
",jslegers,Snugug
857,2014-03-30 00:17:01,"@Snugug & @chriseppstein :

Even though I've been able to improve my syntax significantly due to various improvements in Sass 3.3, the lack of dynamic mixins remains a problem for my implementations. No matter how much I improve the architecture of the meta-framework I'm building, I keep stumbling on the lack of dynamic mixins as a blocking issue.

Just today, I found two use cases for interpolated mixins that I struggle to implement without interpolated mixins. 

This is the first one :

## Input:



---

## Output:



---

This is the second one :

## Input:



---

## Output:



See also https://github.com/nex3/sass/issues/626 .
",jslegers,chriseppstein
855,2013-07-19 21:45:51,"@nex3 I've seen cases where the charset was stripped if the file had no non-ascii characters, even if it was specified explicitly. I think may be ruby version dependent. 
",chriseppstein,nex3
855,2013-07-19 22:17:12,"@nex3 That might be tough to provide, as the issue is most apparent in our main.scss file with over 30 imports. I'll take some time this weekend and try to localize the issue to a certain file, or a certain combination of files.
",danapplegate,nex3
855,2013-08-06 00:32:11,"@chriseppstein I definitely have a reproducible case of this. Sass seems to remove an explicitly specified `@charset` if it doesn't think it's required, which I don't think is intended. (It's certainly annoying.)



Happy to provide environment details. Ruby is 'ruby 1.9.3p429 (2013-05-15) [x86_64-linux] Brightbox' from the Brightbox PPA on Ubuntu 12.04. On this machine:



Noticed this when our asset pipeline starting coming up with different fingerprints from 1.9 and 1.8 rubies. Here's the expected output, when run with 1.8:


",dominics,chriseppstein
855,2013-08-06 02:33:26,"@nex3 See reproduction case above?
",dominics,nex3
854,2014-02-18 00:15:11,"@nex3 I hope I've addressed all of your feedback with these recent commits. Please let me know if there are any other improvements to be made. 
",eriwen,nex3
852,2014-10-08 06:48:46,"@HugoGiraudel, @jakob-e: This is awesome! I'm trying to write my own `map-merge-recursive`, any idea how to achieve that? If I will succeed, I will post my solution here.
",cibulka,HugoGiraudel
851,2015-04-21 13:14:21,"@HugoGiraudel :+1: We really need the compass functionality built in at the sass level. LibSass won't add this functionality until its standard in sass. We need better consistency across the projects in that respect. @nex3 what are the updates on the module system?
",Nevraeka,HugoGiraudel
851,2015-04-21 13:14:21,"@HugoGiraudel :+1: We really need the compass functionality built in at the sass level. LibSass won't add this functionality until its standard in sass. We need better consistency across the projects in that respect. @nex3 what are the updates on the module system?
",Nevraeka,nex3
851,2016-02-08 15:36:03,"@nex3 According to http://sass-compatibility.github.io/ libsass 3.3 has reached full feature parity. What compatibility issues that block this issue are still left?
",mootari,nex3
840,2013-07-08 19:41:38,"@robwierzbowski, no serious problems, but let's assume we have tags with ids `item-blue`, `item-aqua` and `item-green` that we want to style by the `@each` depending on their names:



There will be backgrounds for `#item-blue`, `#item-cyan` and `#item-green`, but not for the `#item-aqua`. These color name replacement exceptions must be remembered and styled separately.
",lukaszgrolik,robwierzbowski
838,2014-02-05 20:11:45,"@nex3 confused where I should put the ruby code example to make sourcemap URLs absolute. Is there some in config.ru where I should put it?
",chanpory,nex3
837,2013-07-15 16:14:49,"@HugoGiraudel To expand on @chriseppstein's explanation, the parenthesis don't actually make the list, but like in math they give grouping or precedence. So in `a b, c (1 2) d, e f` Sass says ""`1 2` is a group, do that first. What do I do with it? The space makes it a list"".
",robwierzbowski,HugoGiraudel
837,2013-07-15 16:14:49,"@HugoGiraudel To expand on @chriseppstein's explanation, the parenthesis don't actually make the list, but like in math they give grouping or precedence. So in `a b, c (1 2) d, e f` Sass says ""`1 2` is a group, do that first. What do I do with it? The space makes it a list"".
",robwierzbowski,chriseppstein
837,2013-08-15 07:24:41,"@HugoGiraudel 's recently blogged `slice()` function can also be used, to create a function that can define a single-item list containing an arbitrary list of items (variable checks removed) [EDIT: this is essentially the same approach as @jakob-e proposed in the 3rd comment; to wrap up a list of items as a single-item list you have to do it with a function]:




",lunelson,HugoGiraudel
834,2013-09-30 23:04:25,"@nex3 do you :+1: now?
",chriseppstein,nex3
832,2013-07-19 20:49:24,"> @chriseppstein wrote:
> So we'd need to make a DeprecatedFalse class or something to that effect?

If we wanted to do the deprecation thing, yes.

> I think we should also return `null` instead of `0` for `str-index()`.

Agreed.

> @HugoGiraudel wrote:
> Why not returning `false`? It makes sense.

Because `null` is the standard value for indicating a lack of a result.
",nex3,HugoGiraudel
832,2013-07-19 20:49:24,"> @chriseppstein wrote:
> So we'd need to make a DeprecatedFalse class or something to that effect?

If we wanted to do the deprecation thing, yes.

> I think we should also return `null` instead of `0` for `str-index()`.

Agreed.

> @HugoGiraudel wrote:
> Why not returning `false`? It makes sense.

Because `null` is the standard value for indicating a lack of a result.
",nex3,chriseppstein
832,2013-12-04 22:50:22,"@chriseppstein I agree with returning `null` too -- I was just toying around with `str-index()` for the first time today, expecting it to work like `index()`, and discovered this myself. (By the way, thank you for having made `index()` return a falsy value rather than `-1` like JavaScript does.)
",pdaoust,chriseppstein
832,2013-12-09 23:57:45,"@nex3 I was referring to the return value of `index()` rather than `str-index()`.
",pdaoust,nex3
821,2013-09-27 23:16:25,"There's one test failing. Landing #934 will allow me to fix. @nex3 if you have alternate suggestions for how to fix that test, please suggest.
",chriseppstein,nex3
821,2013-10-02 22:58:44,"@nex3 moar review please.
",chriseppstein,nex3
818,2013-11-07 22:11:56,"@chriseppstein what kind of indication would be good for you to enable it, i would find this an immensely useful feature seeing the impending death of ie8.
",mcgoooo,chriseppstein
818,2013-11-07 22:50:34,"@cimmanon  is absolutely right that `calc()` can't be used in projects that require maximum browser coverage. I'm not using it for this reason in any of my projects.

But this is not the case for everybody. I'm digging into Derby.js, a modern full stack framework based on Node. It doesn't support IE8 at all and is perfect for building rich internet applications that aren't supposed to be used on mobile.

In this case, i would totally use `calc()`, so i'm looking forward to @chriseppstein and other Compass maintainers to implement its proper support.
",lolmaus,chriseppstein
818,2014-03-25 15:19:15,"Super glad I found this issue!

The [interpolate tip](https://github.com/nex3/sass/issues/818#issuecomment-19935841) @Snugug pointed out works like a champ, but I would love to see this handled automatically at some point. 

For now, the work around will suffice.
",manovotny,Snugug
818,2015-09-09 21:50:00,"Ok, here's my proposal for calc integration.

calc() expressions should be parsed into SassScript AST expressions. The parsing should use the calc grammar with the exception that it will allow Sass variable references in place of a value. I think this is the most natural expectation from the author's perspective.

Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a `calc()` expression.

Any `calc()` expression that can be resolved statically will evaluate to static value in the output instead of outputting as a `calc()` expression.

We need to decide how intermediate expressions will work.

For example:



This could be an error at line 2 (because `3px + 2rem` immediately resolves to a calc string) or it could output a value for derived-expression as `calc( ( 3px + 2rem ) / 2 )`. I lean towards the latter, even though it is harder to implement. Expressions would resolve their variable references into values, but otherwise unresolvable expressions would stay as expression references instead of values until output so that they can be composed with other expressions.

If we want SassScript expressions to be mixable in the same line of code with Calc expressions, I think we'd need a better parsing hint than interpolation (which always results in a string). Probably `sass-script(...expression...)`. E.g. `calc(1px + 2em + sass-script($foo % 3))` Personally, I think this is unnecessary at this time.

If we do this right, basically the calc() expression syntax is an implementation detail and not something that our users will need to use directly unless they want to.

@nex3, @xzyfer, @mgreter thoughts?
",chriseppstein,nex3
818,2015-09-09 22:02:27,"@chriseppstein would this proposal also support similar operations on calc expressions themselves?

E.g. `calc(3px + 4rem) + 1rem - calc(2px + 5%) == calc(1px + 5rem - 5%)`, treating `calc()` as if they were parentheses.
",davidkpiano,chriseppstein
818,2015-09-09 22:16:45,"@chriseppstein :+1: 
thanks, even a simple version of this would save me so many headaches.
",mcgoooo,chriseppstein
818,2015-09-11 21:06:35,"@chriseppstein 

> Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a `calc()` expression.

This has potentially serious browser support implications. Based on [caniuse](http://caniuse.com/#search=calc), there are about 10% of browsers in use today that don't fully support `calc()`, and for users targeting those browsers automatic `calc()` generation is a ticking time bomb‚Äîit'll look like it works when they test on their main browser, but will fail in potentially-confusing ways on more obscure platforms.

This is something I think we should consider someday, but I don't think it's time for it yet.

The rest of your proposal sounds solid to me. I'm even okay with _explicitly declared_ `calc()` values supporting arithmetic with normal numbers. This makes `calc()` a clear signal that something not-fully-compile-time is going on without having to write it over and over again.
",nex3,chriseppstein
818,2015-09-13 12:31:22,"@nex3 i fully disagree with this, for websites such as the one i run (https://boomf.com) the support on desktop browsers is at 99%ish of our desktop browsers, and there is different concerns on mobile. 

to put it in context, we have made a business choice to not support below ie9, which supports calc with one minor bug (doesn't work in background position values)

We have been using this on production for close to a year with absolutely no problems, as it solves a lot of problems, and pushes the web forward. We give less than perfect to the 0.5% that is still usable.

I also disagree fundamentally with the aspect of not including something in case a professional in the field does not know how to use something in a reasonable and good manor, our job is to work around browser problems. you don't stop people using the feature by not including it, you just make it more difficult (and liable to bugs) The type of people that are going to be using experimental features, are likely to understand how to use these things correctly.

The only outlier is android, of which  and with general responsive layouts these days, it is more needed in the field of desktop, which is at full support level pretty much. there is one minor bug in ie9 that does not really affect general usage.

## ![screen shot 2015-09-13 at 13 18 07](https://cloud.githubusercontent.com/assets/248888/9836673/07e95c20-5a1a-11e5-9c18-d359cf71b777.png)

one month of browser usage
![screen shot 2015-09-13 at 13 25 03](https://cloud.githubusercontent.com/assets/248888/9836697/ee50ed9a-5a1a-11e5-8b06-b4c7bd58d5db.png)

and internet explorer usage
![screen shot 2015-09-13 at 13 25 11](https://cloud.githubusercontent.com/assets/248888/9836698/f6c5c310-5a1a-11e5-99c4-88f6b5536977.png)
",mcgoooo,nex3
818,2015-09-14 04:00:21,"@nex3 10% is low enough for some users. I'd like to build this and keep it behind a feature flag that can be enabled at compile time. When the percentage is low enough we can change the default.

> On Sep 11, 2015, at 2:06 PM, Natalie Weizenbaum wrote:
> 
> @chriseppstein
> Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a calc() expression.
> 
> This has potentially serious browser support implications. Based on caniuse, there are about 10% of browsers in use today that don't fully support calc(), and for users targeting those browsers automatic calc() generation is a ticking time bomb‚Äîit'll look like it works when they test on their main browser, but will fail in potentially-confusing ways on more obscure platforms.
",chriseppstein,nex3
818,2015-09-14 04:00:21,"@nex3 10% is low enough for some users. I'd like to build this and keep it behind a feature flag that can be enabled at compile time. When the percentage is low enough we can change the default.

> On Sep 11, 2015, at 2:06 PM, Natalie Weizenbaum wrote:
> 
> @chriseppstein
> Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a calc() expression.
> 
> This has potentially serious browser support implications. Based on caniuse, there are about 10% of browsers in use today that don't fully support calc(), and for users targeting those browsers automatic calc() generation is a ticking time bomb‚Äîit'll look like it works when they test on their main browser, but will fail in potentially-confusing ways on more obscure platforms.
",chriseppstein,chriseppstein
818,2015-09-14 08:20:36,"Apologies for my naivety. Is the issue with calc() purely that it allows
arithmetic on units that Sass considers erroneous, or is there more to it?
On 14 Sep 2015 14:00, ""Chris Eppstein"" notifications@github.com wrote:

> @nex3 10% is low enough for some users. I'd like to build this and keep it
> behind a feature flag that can be enabled at compile time. When the
> percentage is low enough we can change the default.
> 
> > On Sep 11, 2015, at 2:06 PM, Natalie Weizenbaum wrote:
> > 
> > @chriseppstein
> > Any SassScript expression that cannot be computed because the units are
> > incompatible will no longer result in an error, instead that expression
> > will output as a calc() expression.
> > 
> > This has potentially serious browser support implications. Based on
> > caniuse, there are about 10% of browsers in use today that don't fully
> > support calc(), and for users targeting those browsers automatic calc()
> > generation is a ticking time bomb‚Äîit'll look like it works when they test
> > on their main browser, but will fail in potentially-confusing ways on more
> > obscure platforms.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/818#issuecomment-139957146.
",xzyfer,nex3
818,2015-09-14 08:20:36,"Apologies for my naivety. Is the issue with calc() purely that it allows
arithmetic on units that Sass considers erroneous, or is there more to it?
On 14 Sep 2015 14:00, ""Chris Eppstein"" notifications@github.com wrote:

> @nex3 10% is low enough for some users. I'd like to build this and keep it
> behind a feature flag that can be enabled at compile time. When the
> percentage is low enough we can change the default.
> 
> > On Sep 11, 2015, at 2:06 PM, Natalie Weizenbaum wrote:
> > 
> > @chriseppstein
> > Any SassScript expression that cannot be computed because the units are
> > incompatible will no longer result in an error, instead that expression
> > will output as a calc() expression.
> > 
> > This has potentially serious browser support implications. Based on
> > caniuse, there are about 10% of browsers in use today that don't fully
> > support calc(), and for users targeting those browsers automatic calc()
> > generation is a ticking time bomb‚Äîit'll look like it works when they test
> > on their main browser, but will fail in potentially-confusing ways on more
> > obscure platforms.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/818#issuecomment-139957146.
",xzyfer,chriseppstein
818,2015-09-14 22:30:44,"> Is the issue with calc() purely that it allows arithmetic on units that Sass considers erroneous, or is there more to it?

@xzyfer There's lots of issues with calc.
- Presently we treat calc values as essentially strings right now, so when you change a variable from `2em` to `calc(2em - 2px)` which is still conceptually a numeric value but it can't be used in any further mathematical calculations because it became a string.
- We can optimize calc values that can be fully resolved at compile time but we don't.
- We can change an error into a success (as you mentioned)
- Calc Expressions and SassScript Expressions are two ways of writing numeric expressions, but once parsed to an expression (AST), they are like scss vs sass syntaxes there's no reason they can't interoperate. 
",chriseppstein,xzyfer
818,2015-10-02 22:31:59,"@chriseppstein Exactly :smiley:.
",nex3,chriseppstein
818,2015-10-05 08:46:27,"I like how this has ended up. I think @nex3 and @cimmanon are on to something good here.
",xzyfer,nex3
818,2015-10-05 09:26:15,"Me too +1

On Monday, October 5, 2015, Michael Mifsud notifications@github.com wrote:

> I like how this has ended up. I think @nex3 https://github.com/nex3 and
> @cimmanon https://github.com/cimmanon are on to something good here.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/818#issuecomment-145465393.
",mcgoooo,nex3
818,2016-04-19 17:29:55,"@chriseppstein Yepp I just figured it out. I'm using `grunt` and I needed to updated a version number. That was a big headache for such a small fix... üòê  Thanks for your help, all.
",jrauh,chriseppstein
818,2017-01-14 00:08:50,@nex3 I think it's 1.0.1. Maybe that's why. x],trusktr,nex3
809,2013-06-21 06:44:29,"As a matter of fact, I know and use `--check` (in several of my Makefiles). :smile:

Unfortunately I don't know Ruby to do this myself, otherwise I would've given it a shot in creating a script. However, I figured that this makes sense as part of the Sass tool. To paraphrase @chriseppstein from above, the cli command is an interface from the Sass world to other Unix tools in the user's shell. As such I think, that



is more natural than, e.g., a new command


",Boldewyn,chriseppstein
807,2013-06-18 03:24:59,"@nex3 Thank you for the tip about scss.
",deemytch,nex3
806,2013-06-18 10:50:17,"@nex3 I've updated to 3.2.9 but I get the same issue...



...that's the compiled output?
",Integralist,nex3
806,2013-06-18 11:07:48,"Yes, that's the expected output. It's not human readable, it's machine readable for tools like FireSass or Chrome's built in Sass support.

On Jun 18, 2013, at 6:50 AM, Mark McDonnell notifications@github.com wrote:

> @nex3 I've updated to 3.2.9 but I get the same issue...
> 
> @media -sass-debug-info{filename{font-family:file:\/\/\/Users\/markmcdonnell\/Code\/vosbox\/workspace\/tabloid\/webapp\/static\/sass\/guts\/styleguide\/_grid.scss}line{font-family:\00003201}}
> ...that's the compiled output?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,nex3
805,2013-06-18 18:13:37,"@nex3 

Files are saved as UTF8, all files have @charset ""utf8"" declaration and the config sets encoding to utf8 too. It still happens when compileing Sass via Compass (I don't use Sass alone) on Windows, that these chars get destroyed.
",djesse,nex3
803,2013-06-17 20:25:23,"@nex3 We tried to standardize on Compass, but what we've run in to is lots of people just don't use Compass, or are moving to Ruby-less Sass compiling systems like Grunt through libsass/sassc. Having a language level way of including 3rd party code would provide a standard language level way of providing advanced functionality.

As for the concern between a Ruby based config file and a Sass file, then maybe the answer is to have an `extensions.rb` that Sass can read that effectively does the same thing as Compass's `require` in `config.rb`.
",Snugug,nex3
803,2013-06-17 22:23:12,"> @Snugug wrote:
> We tried to standardize on Compass, but what we've run in to is lots of people just don't use Compass, or are moving to Ruby-less Sass compiling systems like Grunt through libsass/sassc.

My understanding is that most people don't use Compass because they perceive it as ""heavyweight"" (as Rob mentioned). Having a package manager whose sole purpose is managing packages is a different proposition. People don't like requiring Compass to get access to a single compatibility mixin, but with a separate package manager it feels much more like just requiring the compatibility package.

>  Having a language level way of including 3rd party code would provide a standard language level way of providing advanced functionality.

I don't think it's even possible to do package management at the language level. I'm happy to read proposals, but I've got no idea how you'd (cleanly) support versioning and dependency management within the context of the language. I think it requires a tool with a broader notion of what a ""package"" is and how they interrelate.

> @robwierzbowski wrote:
> Creating a separate slim extension to import SassScript is an option, but fragments the user base even more ‚Äî now we have Compass extensions, SassScript Importer extensions, and vanilla, usable everywhere Sass.

I can't speak for @chriseppstein, but I suspect he'd be supportive of migrating Compass and its extensions to a separate package-management system. I'd be supportive of including some support for such a system in the `sass` command-line tool. If we coordinate our efforts and if the package manager can effectively address the use cases it's trying to, I don't think fragmentation is something we need to worry about.

> That's reasonable. What about a command line option to import a SassScript file? 
> 
> 
> 
> That's an explicit choice by the user.

The `--require` flag has done this since Sass 3.0.13.

One more thing I want to mention: as various Sass ports are maturing, people are getting more concerned -- and rightly so -- about the compatibility of Ruby-based extensions. At the same time, many of the things that Ruby extensions do, such as file IO, aren't likely to ever be natively supported in core Sass. Having a notion of packages and a package manager that's separate from the Ruby-based Sass presents one possibility for handling this. In the same way that Rubygems supports natively-compiled packages for multiple platforms, a Sass package manager could support a single package with implementations in several different languages -- Ruby, PHP, C, and one day JavaScript.
",nex3,Snugug
803,2013-06-17 22:23:12,"> @Snugug wrote:
> We tried to standardize on Compass, but what we've run in to is lots of people just don't use Compass, or are moving to Ruby-less Sass compiling systems like Grunt through libsass/sassc.

My understanding is that most people don't use Compass because they perceive it as ""heavyweight"" (as Rob mentioned). Having a package manager whose sole purpose is managing packages is a different proposition. People don't like requiring Compass to get access to a single compatibility mixin, but with a separate package manager it feels much more like just requiring the compatibility package.

>  Having a language level way of including 3rd party code would provide a standard language level way of providing advanced functionality.

I don't think it's even possible to do package management at the language level. I'm happy to read proposals, but I've got no idea how you'd (cleanly) support versioning and dependency management within the context of the language. I think it requires a tool with a broader notion of what a ""package"" is and how they interrelate.

> @robwierzbowski wrote:
> Creating a separate slim extension to import SassScript is an option, but fragments the user base even more ‚Äî now we have Compass extensions, SassScript Importer extensions, and vanilla, usable everywhere Sass.

I can't speak for @chriseppstein, but I suspect he'd be supportive of migrating Compass and its extensions to a separate package-management system. I'd be supportive of including some support for such a system in the `sass` command-line tool. If we coordinate our efforts and if the package manager can effectively address the use cases it's trying to, I don't think fragmentation is something we need to worry about.

> That's reasonable. What about a command line option to import a SassScript file? 
> 
> 
> 
> That's an explicit choice by the user.

The `--require` flag has done this since Sass 3.0.13.

One more thing I want to mention: as various Sass ports are maturing, people are getting more concerned -- and rightly so -- about the compatibility of Ruby-based extensions. At the same time, many of the things that Ruby extensions do, such as file IO, aren't likely to ever be natively supported in core Sass. Having a notion of packages and a package manager that's separate from the Ruby-based Sass presents one possibility for handling this. In the same way that Rubygems supports natively-compiled packages for multiple platforms, a Sass package manager could support a single package with implementations in several different languages -- Ruby, PHP, C, and one day JavaScript.
",nex3,robwierzbowski
803,2013-06-17 22:23:12,"> @Snugug wrote:
> We tried to standardize on Compass, but what we've run in to is lots of people just don't use Compass, or are moving to Ruby-less Sass compiling systems like Grunt through libsass/sassc.

My understanding is that most people don't use Compass because they perceive it as ""heavyweight"" (as Rob mentioned). Having a package manager whose sole purpose is managing packages is a different proposition. People don't like requiring Compass to get access to a single compatibility mixin, but with a separate package manager it feels much more like just requiring the compatibility package.

>  Having a language level way of including 3rd party code would provide a standard language level way of providing advanced functionality.

I don't think it's even possible to do package management at the language level. I'm happy to read proposals, but I've got no idea how you'd (cleanly) support versioning and dependency management within the context of the language. I think it requires a tool with a broader notion of what a ""package"" is and how they interrelate.

> @robwierzbowski wrote:
> Creating a separate slim extension to import SassScript is an option, but fragments the user base even more ‚Äî now we have Compass extensions, SassScript Importer extensions, and vanilla, usable everywhere Sass.

I can't speak for @chriseppstein, but I suspect he'd be supportive of migrating Compass and its extensions to a separate package-management system. I'd be supportive of including some support for such a system in the `sass` command-line tool. If we coordinate our efforts and if the package manager can effectively address the use cases it's trying to, I don't think fragmentation is something we need to worry about.

> That's reasonable. What about a command line option to import a SassScript file? 
> 
> 
> 
> That's an explicit choice by the user.

The `--require` flag has done this since Sass 3.0.13.

One more thing I want to mention: as various Sass ports are maturing, people are getting more concerned -- and rightly so -- about the compatibility of Ruby-based extensions. At the same time, many of the things that Ruby extensions do, such as file IO, aren't likely to ever be natively supported in core Sass. Having a notion of packages and a package manager that's separate from the Ruby-based Sass presents one possibility for handling this. In the same way that Rubygems supports natively-compiled packages for multiple platforms, a Sass package manager could support a single package with implementations in several different languages -- Ruby, PHP, C, and one day JavaScript.
",nex3,chriseppstein
803,2013-06-18 01:24:36,"Thanks for giving point by point input on this, Nathan. I appreciate the thoroughness.

I'm personally unconcerned about package management ‚Äî Bower handles everything I need for Sass/Compass extensions.

I wasn't aware of `require`; I'll have to play around with it. If it works the way I'm guessing I think adding a Sass extension directory structure with a default require directory (like Compass' `lib`) would cover @Snugug's original request.
",robwierzbowski,Snugug
803,2013-06-18 19:14:31,"@chriseppstein I agree on rallying around Compass and @robwierzbowski‚Äôs work has provided a means to use Compass in tandem with Bower. I was a hold out for a while on Compass and I think Compass needs to be branded better as a meta framework instead of a collection of CSS3 mixins. @nex3, maybe the Sass site can push harder for Compass as it is not mentioned anywhere ont he Sass home page? A lot of people probably use Sass yet have no idea what Compass is.

While I‚Äôm happy to see a project like libsass take on the very real issues of performance it is also what worries me the most. There are things that need to be written in Ruby in order to remain efficient like exponents and string parsing. I see no way to efficiently support libsass when we have to go to a deeper language to handle more complex things. I get it, we are going way outside the box with these features and maybe the solution is that we need to work harder to stay within the sandbox of Sass.
",scottkellum,nex3
803,2013-06-18 19:14:31,"@chriseppstein I agree on rallying around Compass and @robwierzbowski‚Äôs work has provided a means to use Compass in tandem with Bower. I was a hold out for a while on Compass and I think Compass needs to be branded better as a meta framework instead of a collection of CSS3 mixins. @nex3, maybe the Sass site can push harder for Compass as it is not mentioned anywhere ont he Sass home page? A lot of people probably use Sass yet have no idea what Compass is.

While I‚Äôm happy to see a project like libsass take on the very real issues of performance it is also what worries me the most. There are things that need to be written in Ruby in order to remain efficient like exponents and string parsing. I see no way to efficiently support libsass when we have to go to a deeper language to handle more complex things. I get it, we are going way outside the box with these features and maybe the solution is that we need to work harder to stay within the sandbox of Sass.
",scottkellum,robwierzbowski
803,2013-06-18 19:14:31,"@chriseppstein I agree on rallying around Compass and @robwierzbowski‚Äôs work has provided a means to use Compass in tandem with Bower. I was a hold out for a while on Compass and I think Compass needs to be branded better as a meta framework instead of a collection of CSS3 mixins. @nex3, maybe the Sass site can push harder for Compass as it is not mentioned anywhere ont he Sass home page? A lot of people probably use Sass yet have no idea what Compass is.

While I‚Äôm happy to see a project like libsass take on the very real issues of performance it is also what worries me the most. There are things that need to be written in Ruby in order to remain efficient like exponents and string parsing. I see no way to efficiently support libsass when we have to go to a deeper language to handle more complex things. I get it, we are going way outside the box with these features and maybe the solution is that we need to work harder to stay within the sandbox of Sass.
",scottkellum,chriseppstein
803,2013-06-19 18:29:10,"@chriseppstein What's the value in keeping them together?  Just the work involved?  Portions of Compass have become standard features of Sass in the past, haven't they?  Extensions just seem like they should be a natural feature of Sass.
",cimmanon,chriseppstein
799,2013-06-07 22:01:37,"@thedarkone I was just looking at that gem. What is the benefit of using `ThreadSafe::Cache` instead of `ThreadSafe::Hash`?
",chriseppstein,thedarkone
799,2013-06-08 00:15:24,"@chriseppstein basically both `TS::Array` and `TS::Hash` have a really naive [""toy"" implementations](https://github.com/headius/thread_safe/blob/master/lib/thread_safe.rb). Whereas `TS::Cache` (a Hash like cache) is a ""serious business (tm)"" thing :) (truly concurrent, mostly lock-free, with custom Ruby VM dependent backends: native JRuby ext, Rubinius, MRI etc), it also has useful ""cache"" methods like `compute_if_absent(key, &block)`, `put_if_absent(key, value)`, `get_and_set(key, value)` and others.

I wouldn't recommend using `TS::Array` or `TS::Hash`, on other hand `TS::Cache` should be production ready (and is a Rails 4.0 dependency).
",thedarkone,chriseppstein
798,2013-06-07 16:36:37,"Thanks @chriseppstein, I figured it was something like that; it's a bummer because it does make things more compact, especially for conditionally assigning a variable. 

In my recent use cases, the drawback of the `@if` directive is that it has a different scope, so a variable has to first exist outside the directive in order for the directive to be able to conditionally assign it. It would be nice to see a true branch-executing same-scope `if()` function. 

I gather then, that it simply can't be done in SassScript and has to be built at a deeper level?
",lunelson,chriseppstein
796,2013-06-11 15:55:40,"@nex3 One reason why we might want to return true for features that we implement in 3.3 even though `sass-supports` is a new feature is that it would give other Sass implementations the ability to ship syntactic compatibility with 3.3 without needing to delay the release while they implement the other features. E.g. libsass or sassc might return false for `sourcemaps` while we return true.

/cc @akhleung @hcatlin
",chriseppstein,nex3
796,2013-06-11 22:23:22,"@nex3 I'm done addressing your comments to-date on this PR.
",chriseppstein,nex3
796,2013-06-19 21:11:17,"@nex3 I've addressed all remaining comments. Good to merge?
",chriseppstein,nex3
790,2013-12-14 07:19:04,"@nex3 Thank you! <3
",pwnall,nex3
788,2013-06-04 19:32:16,"Hey @chriseppstein,

Here is a better example of our issue.

We have this Sass:



We expect that should return:



But instead, its returning this, which is inconsistent with Sass versions prior to v3.2.8:



Thoughts?
",craigkeller,chriseppstein
788,2013-06-04 21:17:21,"thanks, @chriseppstein
",craigkeller,chriseppstein
788,2013-06-07 20:04:42,"@chriseppstein I think only the `c: d` selector in your example is incorrect. For `e: f`, putting `.parent1` before `.context` fulfills `.parent1 .child1 { @extend %bar }` and `.parent2 { @extend %foo }`. Similarly for `g: h`.

I'm working on fixing the incorrect compilation here, though.
",nex3,chriseppstein
788,2013-06-07 20:24:20,"Just reverting 3700884c8c150e61da8d24168d25db34fccbd19b didn't fix the issue; it looks like 5bc676942daa24e81f4a473894652a18b8b85a41 is also contributing somehow. Reverting both commits simultaneously does fix @craigkeller's issue.

Even going back before 3700884c8c150e61da8d24168d25db34fccbd19b doesn't fix @chriseppstein's `c: d` issue, which suggests that it may have a different root cause.
",nex3,chriseppstein
784,2013-05-31 20:36:32,"@chriseppstein Just to be clear: I don't care much about my own copyright either, but I believe the library authors deserve some credit and I'm legally required to leave their copyright in there anyway.
",superlukas,chriseppstein
784,2013-05-31 21:15:07,"@chriseppstein The use-case you're describing is relevant for all output styles but compressed, right? Maybe changing the behaviour based on the output style is the simplest solution. [Most](https://github.com/GoalSmashers/clean-css#how-to-use-clean-css-programmatically) [other](https://github.com/gruntjs/grunt-contrib-uglify#preservecomments) minifiers take some kind of options hash, but I'm not sure if thats practical since there's only one option in the first place.
",superlukas,chriseppstein
784,2013-05-31 21:16:41,"@superlukas it applies specifically to compressed mode. That is the point of loud comments.
",chriseppstein,superlukas
784,2013-05-31 21:46:52,"@nex3 has a point. I just did some testing though and @chriseppstein is right too, Sass doesn't remove the comments. It seems to be a problem with Sprockets and/or Sprockets-Sass. I guess the content is piped through Sass more than just once and the comments are lost somewhere on the way.
",superlukas,nex3
784,2013-05-31 21:46:52,"@nex3 has a point. I just did some testing though and @chriseppstein is right too, Sass doesn't remove the comments. It seems to be a problem with Sprockets and/or Sprockets-Sass. I guess the content is piped through Sass more than just once and the comments are lost somewhere on the way.
",superlukas,chriseppstein
784,2013-05-31 22:15:41,"@nex3 Sass cares about the output. We want it to be beautiful. To look like hand-written code. I want to enable that, but no one has specifically asked for this so I'm not going to go to the mat for it. Feel free to take out the stripping logic, the multi-processor use case is a compelling one.
",chriseppstein,nex3
783,2013-05-31 17:20:50,"Yep, the `@for` directive is more efficient at this because index lookup is slower then index access.



Though I grant you that both of these examples are less perfect than the one @Snugug provided in #570.

Note that I think the need for index is actually going to diminish when we introduce maps. People don't want selectors named `.selector_N`. Colors like this have meaning. So expect this code will be more common:


",chriseppstein,Snugug
780,2013-05-31 03:15:08,"Hey @chriseppstein 

Thanks for the prompt reply. Let me see if I can make this clearer
I want to know if it is possible to use my **Sass variable names** as **CSS selectors** using mixins 

So I have the following variables declared



So in the #{$i} at the end, I want it to be replaced with the actual variable value (#xxx) from above 
But in the .blk-***, I want to print the name of the variable held by $i. 

$primary-color should print primary-color 
$primary-color-light should print primary-color-light
$primary-color-dark should print primary-color-dark

I think its one level of abstraction too deep. Just wanted to know if this is currently possible or possible through maps feature. Hope this helps clarify what I am really asking for
",rvinay88,chriseppstein
780,2013-06-01 05:06:26,"Thanks @chriseppstein...Yeah I get the idea...very excited about the maps feature!!
",rvinay88,chriseppstein
779,2013-05-30 20:27:28,"I emailed a reply but I don't see it here:

@nex3 I'd like to discuss this with you. I don't see how optional imports are wasted effort with future development plans -- would like to understand why you think this is true.

This use case is an interesting one and I'd like to think about it more before discarding it out of hand.
",chriseppstein,nex3
779,2016-05-26 19:09:48,"@tam5 I don't think that @nex3 will change her opinion. She closed it!
",yordis,nex3
777,2013-06-21 17:49:47,"@nex3 I've addressed your code review comments. I've also refactored the watching code further to delegate watched directories and files to the importer objects and I've added tests for the watcher.
",chriseppstein,nex3
774,2013-05-28 20:44:57,"@nex3 it is semantically ambiguous, but not syntactically.
",chriseppstein,nex3
774,2013-05-29 17:40:58,"> @nex3 it is semantically ambiguous, but not syntactically.
> 
> That is, it would be a semantic conflict if there was ever a html element added named without-xxx. But this is just a selector sequence at parse time.

Whatever you want to call it, I don't want to hijack some specific valid selector syntax to have a special meaning in this context.
",nex3,nex3
774,2013-05-31 23:38:27,"I like the consistent syntax of @robwierzbowski's suggestion, but I don't like how verbose it makes the simple cases. What used to be `@at-root #{&}-foo { ... }` becomes `@selector (without: parent) { #{&}-foo { ... } }`, which is a lot more burdensome to read and write.
",nex3,robwierzbowski
773,2013-05-28 21:04:43,"I've filed the issue. Thank you for your kind help, @chriseppstein.
",lolmaus,chriseppstein
765,2013-05-23 21:29:32,"I'm skeptical that this will happen at all. Writing a formal specification is a colossal amount of work. That work has to be done by someone -- presumably @chriseppstein or myself -- and it would come straight out of time that could otherwise be spent improving the language. The value provided by a specification is just not large enough to warrant the effort.

It's also worth noting that a specification won't make it easier to port Sass to other languages; it will just make it easier for those ports to be confident that they're handling every edge case correctly. Currently I don't know of any Sass ports that have feature parity with the reference implementation. Without ports that can make use of it, writing a spec provides no value at all.
",nex3,chriseppstein
764,2013-09-13 08:48:53,"You're right @nex3, misread some comments, sorry about that. Keep up the good work! :+1: 
",stephanvane,nex3
756,2013-05-21 00:06:39,"What @chriseppstein said. Also worth noting that we couldn't just do this universally because it could unpredictably re-order the source code.

#116 is broadly tracking our optimization efforts.
",nex3,chriseppstein
754,2013-05-30 15:27:50,"@chriseppstein I don't think, that replaceing `transparent` with `rgba(0,0,0,0)` is the way to go:
IE8- will not understand it and ignore the rule...
and since the market share for IE8 is still a factor, it might cause some issues...
",stryju,chriseppstein
754,2013-05-30 16:50:19,"@chriseppstein great :)
",stryju,chriseppstein
754,2013-05-30 18:39:35,"@nex3 I'm somewhat torn on #363 when it comes to emitting values that have
a more browser compatible representation. First off, it could cause
regressions for existing users, and second off, I think we should always
favor end-user experience over an aesthetic feature like #363. So I think
we'll end up with a happy medium when that issue is addressed and I think
`rgb(0,0,0,0)` should still output as `transparent` after that is closed.

On Thu, May 30, 2013 at 11:02 AM, Nathan Weizenbaum <
notifications@github.com> wrote:

> Don't rely on rgba(0,0,0,0) being transformed to transparent, though;
> when #363 https://github.com/nex3/sass/issues/363 is fixed, it will be
> output in whatever format the author used.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/754#issuecomment-18697165
> .
",chriseppstein,nex3
747,2014-06-17 13:10:04,"This also would be great to avoid doing this over and over:



@chriseppstein: how do you plan `@error` to work?
",battaglr,chriseppstein
740,2013-05-21 00:19:26,"@chriseppstein I'm certainly sympathetic to those concerns. At the same time, we've been moving in the direction of adding more introspective functions, and right now there really isn't a way to do what these functions are doing. But maybe you're right and there isn't a reason to do what these functions are doing in the first place.

I agree that we should see some use cases before we put these in.
",nex3,chriseppstein
740,2013-05-22 17:58:38,"Actually `strip-unit()` is what I call it in my own code too. I agreed with @nex3's point that `one-unit()` wasn't necessary and I'm amenable to calling the other two `with-unit()` and `without-unit()` but infact I call them `strip-unit()` and `assert-unit()`.

As for the return statements you wrote above, it's precisely because of buggy results in using `$number / ($number * 0 + 1)` as a means to strip units, that I chose to write them in SassScript, which has proven to be much more robust.
",lunelson,nex3
740,2013-05-25 01:02:09,"@cimmanon the `strip-unit` calls in that code are superfluous. `$font-size` and `$desired-size` both have `em` as their unit, so `$font-size / $desired-size` has no unit anyway.

@lunelson writing functions that don't think about units sounds like an anti-pattern.

> The input value might be in the range 0-100, with or without a percentage unit, or it might be in the range 0-1.

This sounds very confusing. How do I know whether `fn(1)` is going to treat `1` as `1%` or `1.0`? This is why units exist: to make it clear what you're specifying.

If the unit math doesn't work out in your functions, that seems a logic smell rather than an indication that Sass needs an easier way to add/remove units.

@robwierzbowski `1#{unit($number)}` doesn't work how you want it to. It returns a string, not a number.

### Summary

I don't find these use cases very compelling; I'm leaning toward's @chriseppstein's position here, that these functions would encourage more sloppy code than they do add expressive power.
",nex3,chriseppstein
740,2013-05-25 01:21:36,"@nex3, Sorry, you're right. Should be something like `$number * 0 + 1`, but the point is moot.
",robwierzbowski,nex3
740,2015-04-21 22:40:29,"@chriseppstein a valid use case for stripping units is in doing math to convert to or from vw/vh units (for example calculating suitable px or em values for fallback in browsers that lack vw/vh support). Since there is no uniform way of handling this conversion it must be done on a case-by-case basis, and requires stripping units.
",amclin,chriseppstein
739,2013-05-31 22:04:45,"@nex3 Mixins are good for small blocks of code meant to be re-used. A theme is a large block of code potentially spanning several files. Dynamic imports are an ideal way of handling this. Especially if you want to provide a code separation between the authoring of the core design and the theme. 
",chriseppstein,nex3
739,2014-02-12 23:51:29,"@chriseppstein @nex3 any updates here?
",lifeiscontent,nex3
739,2014-02-12 23:51:29,"@chriseppstein @nex3 any updates here?
",lifeiscontent,chriseppstein
739,2014-03-28 17:15:33,"@nex3 : In https://github.com/nex3/sass/issues/779 you mentioned that you were planning on deprecating the `@import` feature, which is used in pretty much every Sass implementation of moderate to high complexity.

Why not just extend the possibilities of the `@import` feature by allowing it to be used within control directives and/or mixins? This is how PHP's `include` ( http://www.php.net/manual/en/function.include.php ) is implemented. It allows dynamic loading, greater modularity, easy polyfilling and many more features without having to change or deprecate the `@import` syntax.

Implementing the possibility of dynamic dependencies by allowing @import statements within control directives or mixins has one main advantage: Sass users would not notice any difference between ""old school"" dependency management and ""new school"" dependency management.

While the underlying mechanism may have to be altered significantly or even rewritten completely, the syntax for the ""end user"" would remain completely the same. No new syntax would have to be learnt and old `@import` statements would not have to be changed to be compatible with new versions of Sass.

Examples :



---



---



---



See also https://github.com/nex3/sass/issues/1194, where I posted this request as a separate issue.
",jslegers,nex3
739,2014-04-04 22:42:37,"@nex3 :

There's always a reason to maintain compatibility : stopping old code from breaking when you upgrade to a new version of Sass.

This kind of crazy decisions makes me want to reconsider adopting Sass and just stick with plain CSS... or write my own Sass equivalent.
",jslegers,nex3
739,2014-04-05 08:56:15,"@nex3 :

Another great use for polyfilling : if I could polyfill either the `@import` syntax or the new syntax in some way, I would not have to worry about deprecation. 

And then, of course, there's theming (https://github.com/sass/sass/issues/279).
",jslegers,nex3
739,2015-07-11 09:50:57,"@nex3 

thanks for your reply! While I can agree that theming somehow can be solved with maps/mixins and so on, can you comment on about raised question in my reply https://github.com/sass/sass/issues/739#issuecomment-72394908, please? It something that can't be solved with mixins.

Thanks in advance
",ArmorDarks,nex3
739,2015-07-18 00:10:56,"@nex3 can you elaborate on that?
",Jakobud,nex3
739,2016-05-17 21:44:26,"Can someone implement @nex3 s last suggestion on Semantic UI? I can't get it to work..
",ShaggyDude,nex3
739,2017-01-12 20:46:45,"@iErik @jslegers @alvinsight 

I don't see this happening anytime soon. Reading through the whole thread it seems that @nex3 (the primary contributor to this repo) is opposed to the idea and hasn't been sold on it by the further commentary.",natecox,nex3
739,2017-02-08 20:32:43,"@nex3 because there is not a predetermined number of files. I'm not sure how your mixin suggestion solves that, because you still have to dynamically include them, and you don't know what the files are/will be.

Lets look at it from a really simple standpoint:

1) A project has a 'generated' directory. This directory may or may not contain files. Could be one, could be ten billion. Doesn't matter.
2) I want to include all of those files.

To pretend like that is not and never will be a valid use case, or like writing tool-specific build script code so that said tool doesn't have to have a feature to do something as simple as a glob/star import is, honestly, confusing me. It's already a proven, effective pattern used in a massive number of libraries. I understand that maybe it's complicated to build but it's not impossible as was already stated by some of the team members on multiple occasions. But as I said above, the team has made it clear that they think this is indeed not a good idea or a useful feature. I, and others in this thread, are trying to warn you against not listening to your users, because that's how platforms fall out of favor.

Totally up to you guys, I respect your decisions, just know that the second another tool beats out SASS in utility, I will switch to it without hesitation. It really is about cost/ease of implementation over anything else, after all.",layton-glympse,nex3
739,2017-02-08 21:15:11,"@layton-glympse When I read you description, different images flashes in my mind, but I can't clearly understand what exactly you're trying to do, thus can't provide best solution for it. Maybe it would be better if you'll demonstrate mock of a project, in which you're facing described issue?

If @nex3 described your issue properly, I'm agreeing with her solution. That's how it should be done in static language. If you can't control imports, control the invocation, and in Sass this done through mixins.

By writing my answers above, I merely tried to say, that maybe you should approach issue from different side, try different architecture. If you will read my first contributions to this issue, you will see that at first I didn't see a way to work with such static imports too. It took me awhile to realise, that in Sass those issues simply have to be treated differently, there are already tools for it. After all, Sass is not the only language, in which imports are completely static (ES6 System imports, hello!). And those languages usually don't have issues with building complex modular applications at all.",ArmorDarks,nex3
739,2017-02-09 09:36:32,"@nex3 @ArmorDarks  

> Why not emit mixins rather than emitting files that directly include styles? Then you can choose whether and how to include each mixin.

Because that's not how things work in a well-designed theming / skinning architecture. It simply doesn't work, for reasons I'll try to explain below.

> I can't clearly understand what exactly you're trying to do, thus can't provide best solution for it. Maybe it would be better if you'll demonstrate mock of a project, in which you're facing described issue?

I can't speak for @layton-glympse, but what I expect from a preprocessor language, is the ability to...

1. Assign a value `themename` to a `$theme` variable in a `_properties.scss` file
2. Dynamically import a `${theme}/_properties.scss`  file that overrides or sets the defaults of my framework
3. Dynamically import a `${theme}/_bootstrap.scss` file that describes all the theme-specific files that need to be loaded
4. Dynamically import ANY variable number of `${theme}/${whatever}/_${stuff}.scss` files from `${theme}/_bootstrap.scss` or its descendants

In such an architecture, changing the theme of my framework should be as simple as changing the value of my `$theme` variable, without imposing any restrictions on the architecture of the theme itself.

Loading all of my themes and then determining which one to actually use with a dynamic mixin is simply not an option.

> Then you can just write @import 'generated/fonts' in your hand-authored code and have access to all the generated mixins.

Imagine a library with 1000s of themes for a particular framework. Loading 1000s of themes just to be able to use a single theme is highly inefficient, and imposes all kinds of nastiness, from performance nightmares to maintenance hell, that simply wouldn't exist with dynamic dependencies.

With dynamic dependencies, replacing one theme with another really would be as simple as changing one single variable. Only a single theme would have to be loaded, and adding or removing a theme from the framework would be as simple as adding or removing a folder with that theme. 

> After all, Sass is not the only language, in which imports are completely static (ES6 System imports, hello!).

NodeJS is not exactly a mature environment. On the other hand, browser-side JavaScript has achieved some level of maturity. Not only does browser-side JavaScript allow dynamically loading JS files on demand, but many front-end developers have been doing this for years. Long before [Require.JS](https://github.com/requirejs/requirejs) came to dominate the market, the totally awesome [yepnope](https://github.com/SlexAxton/yepnope.js/) & [LABjs](https://github.com/getify/LABjs) already provided easy-to-use, stable, minimalistic, cross-browser interfaces for the on-demand dynamical loading of any JS file.

All that is irrelevant, though. SCSS is a language used to create CSS layouts, CSS themes & CSS frameworks. What's important, here, is whether there are meaningful use cases for SCSS specifically that require files to be imported dynamically. 

While I would agree that such use cases are probably few and far and between for simple one-use-only CSS layouts, dynamic dependencies become an essential feature once you start building a CSS framework architecture with support for flexible theming. 

Dynamic dependencies are a feature I've been waiting for ever since I decided to re-write [Cascade Framework](http://jslegers.github.io/cascadeframework/) in SASS back in 2014. And because dynamic dependencies are a **core feature** for my particular use case, the lack of this feature in SASS actually has blocked any further development of my framework ever since 2014.",jslegers,nex3
739,2017-02-09 11:08:11,"@nex3 I don't think you understood what @layton-glympse is trying to say, but as far as I understand he needs a mechanism to include a file or set of files that are not pre-determined, that is, he doesn't know what files are these in advance, it could be thousands of files, since they are dynamically generated, so he'd like to dynamically import them. He doesn't want SASS to be aware of all these files that COULD be relevant, he just wants to be able to set a variable in a centralized configuration file and let SASS import only the relevant file(s).

Now, as far as I understand, using your approach it would be necessary to know what files are these in advance and manually import them, but how would this replace dynamic imports? The whole point of dynamic imports is that it wouldn't be necessary to do exactly that.

In any case, is this even a matter of lack of use cases at this point? This issue have been open since 2013 and users have been arguing in favor of it since, if you scroll up a little bit, you'll find plenty reasonable use cases, and the fact that this feature is already present in LESS since 2011 is a sign that there may be indeed use cases for it. It would be more helpful for the Dev Team to explain that this feature cannot be implemented because of this or that design problem in the architecture, so that we wouldn't waste our time explaining why and how we would use Dynamic Imports in the hope that we can convince the Dev Team to implement such feature that simply cannot be implemented.",iErik,nex3
739,2017-02-09 11:24:27,"> @nex3 I don't think you understood what @layton-glympse is trying to say, but as far as I understand he needs a mechanism to include a file or set of files that are not pre-determined, that is, he doesn't know what files are these in advance, it could be thousands of files, since they are dynamically generated, so he'd like to dynamically import them. He doesn't want SASS to be aware of all these files that COULD be relevant, he just wants to be able to set a variable in a centralized configuration file and let SASS import only the relevant file(s).

Same for my use case (‚Üí see [my previous post](https://github.com/sass/sass/issues/739#issuecomment-278591776) for details).

It could be 1 file. It could be 1000s of files. And whichever files you load entirely depends on which theme you want to use and how that particular theme is designed.

* Loading all of the theme files from all of the themes would be utter madness when you need just one theme every single time.
* Forcing a simple generic theme with limited features and a giant theme with all the bells & whistles to have the exact same number of files & the exact same folder structure doesn't make any sense either - you want to be able to define this on a per-theme basis - You might even want to be able to define sub-themes and sub-sub-themes if themes become too complex

> In any case, is this even a matter of lack of use cases at this point? This issue have been open since 2013 and users have been arguing in favor of it since, if you scroll up a little bit, you'll find plenty reasonable use cases, and the fact that this feature is already present in LESS since 2011 is a sign that there may be indeed use cases for it.

And even if the number of use cases is minimal... Consider that a single themable framework with just a handful of base themes could serve as the foundation of many tens of thousands of other projects. Imagine the impact if a CSS framework as popular as Bootstrap or Foundation would use dynamic dependencies under the hood.",jslegers,nex3
739,2017-02-09 18:43:27,"Guys, calm down. Devs are listening. @nex3 replied above, because she follows this issues.

There won't be any major features till Sass will be completely moved to Dart, that it. It takes time, That's not their main job, you know.",ArmorDarks,nex3
739,2017-02-10 10:27:16,"> Sorry I didn't care to read the rest of the discussion but my conclusion is that SASS simply might not be the best choice for projects of that nature, even thought I'd very much prefer to use SASS it seems that when dealing with scenarios like this, LESS might be a better option. And I say that not because I'm trying to undermine the SASS language or the Dev Team, but simply because I think SASS is usually better than other pre-processors and if possible I'd like to see it better, even though the Dev Team seem to completely ignore our arguments. If more than 3 years of discussion did not convince the Dev Team that Dynamic Imports are a very useful feature, I don't think they're going to be convinced now.

> I think part of the problem here is that the dev team is not actually listening to what we're saying.
> 
> It's this simple: There are cases where dynamic imports would be a lovely thing. To say ""your architecture needs to change"" without understanding the spec or scope of the application is... well... hubris. And no, we as users do not want to send over passwords to Jira and Google Docs so you can peruse the entirety of our application architecture to then decide whether or not our use cases are worthy. They are. Trust us. We're your user community. We like your product, and our relationship is based on trust. So please trust us.
> 
> I think we can probably just stop the discussion here, because this is the third or fourth time that I've given the simplest use case I can think of that makes dynamic imports valid, which, IMHO, is all you need to put a feature in the pipe.
> 
>[...]
>
> I still want to thank the SASS team for their hard work in making a great product, and it saddens me that I may eventually end up switching after so many years of loyal evangelism.

I couldn't possibly agree more, with both of these statements!!

> Guys, calm down. Devs are listening. @nex3 replied above, because she follows this issues.

They aren't listening. Multiple people have been arguing ad nauseam why their use case requires dynamic dependencies and all the core devs are doing is trying to convince us we're foolish. That's not listening.

If we tell you that we're tried everything we can think of and we keep ending up getting blocked due to the lack of dynamic dependencies, stop trying to convince us that we're doing something wrong. Just because you don't understand our reasons, that doesn't mean our reasons don't make perfect sense in the context of what we're trying to achieve. Just stop it! You're insulting our intelligence!

> There won't be any major features till Sass will be completely moved to Dart, that it. It takes time, That's not their main job, you know.

Open source is a bitch. Projects that get any attention at all are few and far in between. Maintaining existing projects takes a ridiculous amount of time (that most people simply don't have), and most involved don't get neither any pay nor any recognition / prestige from the hard work they put into open source. Yet, the same rules that apply to other products also apply to open source products : it's either adapt & evolve or wither & die. If you don't listen to your users, your users will leave faster than you can say ""supercalifragilisticexpialidocious""... and you end up having no users at all. 

If the Sass core devs don't listen to what their users want, users will move on to other pre-processor languages where the core devs do listen to what their users want. When users find somewhere else what they've been direly missing in Sass, they will ditch Sass for this other tech just as easily as they ditched jQuery for Angular2 or Zend for Symfony2... or just as easily as they ditched MySpace for Facebook ;-)",jslegers,nex3
739,2017-02-10 23:19:18,"I've talked this over once again with @chriseppstein, and I think we've found a compromise that will largely address the patterns people want here while mitigating my concerns about comprehensibility and static analysis. We won't allow `@import` (or its forthcoming replacement, `@use`) to be used dynamically. Instead, we'll provide a function (I'll call it `load()` for now, but don't take that as final) that will load a file and provide its contents in a form that's accessible to SassScript. In particular, it will return a map with the following keys:

* `""functions""` will be a map from function names to function references (as returned by `get-function()`). It will contain all functions defined in the loaded file.
* `""mixins""` will be the same, but for mixins.
* `""css""` will be a single mixin reference that, when included, emits the CSS output of the loaded file.

This will allow theming systems *et al* to expose their desired APIs and load files at runtime while retaining the ability for users and tools to reason about the top-level scope independently of the actual execution of the code in question.",nex3,chriseppstein
739,2017-02-10 23:31:38,"@nex3 
Much appreciated that you guys gave this some thought/discussion. Very exciting to get an actionable response on this.

Let me see if I understand it straight (I understand that this is a conceptual discussion and subject to huge modification):

This (potentially) new `load()` function will be something we can pass a filepath to, which then returns a map containing functions, mixins, and CSS as _keys_ on a new object instead of injecting them straight into the document wholesale like `@import` does now. That is _very cool_.

If I understand that correctly, though, I'm missing the part where this will be any different conceptually from `@import` in that it likely won't allow wildcard paths, unless you're going to return an array of these maps.

Can you enlighten me as to how this addresses the concept of wildcard imports, where the developer does not know the name of the target file(s)?

If it doesn't, I do see the merit in what you are doing. The thing this _would_ allow us to do is at least choose a predictable naming pattern (i.e. `file0`, `file1`, `file2`, etc) for the unknown files and load them in a loop or something until a load fails?

Okay, cool. It gives us at least a form in which to achieve what one might call semi-dynamic imports, something I would be happy enough with.

Can you fill me in if I'm missing or misunderstanding any of your concept?
",layton-glympse,nex3
728,2013-05-10 16:10:57,"Thanks @chriseppstein for taking it here.
",Subash,chriseppstein
727,2013-04-30 06:39:00,"@robwierzbowski 

it's explained on this page, near the bottom: http://learnboost.github.io/stylus/docs/bifs.html. The basic idea is that add-property() is a function which takes two arguments, one for a property name, one for the value(s), and the value argument can also contain functions. It might get hairy if you try to pass a function which also wants to add a property but in theory that could also be handled.

To translate the Stylus example with the imagined syntax we're discussing here and adding a function as value:



would return:



beyond that, you have `current-property` which allows some interesting conditions. In the ""Nib"" library for Stylus for example, the entire processing of linear-gradients, including prefixing and legacy webkit syntax, is done as a function not a mixin, so you simply write `background: linear-gradient(...)` in the same vanilla syntax as CSS but it's processed out to all the additional declarations. It's ""set and forget"" and you don't have to remember (let alone write out) a mixin syntax, it's very nice. Stylus doesn't happen to use it for vendor-prefixing but it would work there too.
",lunelson,robwierzbowski
727,2013-04-30 14:23:31,"A `current-property()` function seems fine to me. We're adding `&` to SassScript and that is basically `current-selector()`.

I agree with @Snugug here. A mixins job is to emit multiple properties. But I think the point here is that a value can be represented differently when it comes to different properties or even for the same property as fallback values. In ruby extensions I accomplished this for gradients by having functions return a special object that a mixin would inspect and decide whether to emit some particular property. Here's that code: https://github.com/chriseppstein/compass/blob/stable/frameworks/compass/stylesheets/compass/css3/_images.scss#L68

And so I wonder if we can find a way to return a value that has a default representation but also has other representations that a mixin could inspect and use. It's less magical than stylus's approach but I think it's keeps the concepts more pure and hence more composable.
",chriseppstein,Snugug
727,2013-04-30 14:56:19,"After reading up on Stylus, it's much closer to programatic language and is comfortable adding a lot of magic (invisible mixins, language defined variables, etc.). Since that's not the philosophy of Sass, and since without them I can't see `add-prop()` being simple or predictable (especially when a function is a single value in a value list), I don't think it's a good fit. 

@chriseppstein, `current-property()` would be awesome. Slightly OT question: does `aspect` take the place of adding [maps](#642) to Sass?
",robwierzbowski,chriseppstein
727,2013-04-30 15:14:42,"I updated my code example, please re-read it if you read it already.

@robwierzbowski re: maps. I had the thought of whether maps make this need go away but decided they didn't. Here's how they're different: Aspects have a default value. This allows them to work with code that doesn't expect aspect values. Additionally, an aspect exists on a complex value (a list or a map) if that complex value has a value within it that has that aspect. And when you extract a particular aspect from a complex value, the values which do not have that aspect simply return their default value.
",chriseppstein,robwierzbowski
727,2013-04-30 16:56:22,"@chriseppstein I'm not sure I understand aspects: is it adding another value to a variable? How is the example above more efficient than a typical rem mixin? @cimmanon's example looks equivalent to me, at least in terms of verbosity.

However I agree that `current-property()` would be nice, and have uses beyond the use-case of adding properties from `@functions`, such as referring to map-names by property-names; though it would require variable-name interpolation which we don't have yet. FWIW, an adaptation of my maps hack from #642, imagining property-to-map reference


",lunelson,chriseppstein
727,2013-05-10 02:48:37,"@nex3 I understand your initial reaction to this. Happy to brainstorm to see if we can come up with something better. 
",chriseppstein,nex3
727,2013-06-07 09:45:25,"@chriseppstein re: your comment above, that `&` == `current-selector()`, are you suggesting that `current-property()` might already be possible in ruby? Would you be willing to shed some light on how it would work? If the SassScript methods for it already exist I'd _really_ like to implement it in my own code.

As for core Sass, I understand all the objections above but personally regard functions and mixins as not fundamentally different. Notably, it is already possible to add a property from a function, you just can't put it on a new line. What's missing here is only an automatic way to retrieve the name of the current property, and possibly also a boolean of whether or not you are in a property declaration, as opposed to a variable declaration:




",lunelson,chriseppstein
727,2013-07-07 21:58:22,"@chriseppstein Re: your suggestion for aspects, I added a function to Team Sass's [Jacket](https://github.com/Team-Sass/jacket) that does something similar. Could be useful if people want to build things with aspect-like functionality until something is worked out on the Sass level.
",robwierzbowski,chriseppstein
719,2013-05-23 14:30:11,"Our listen dependency should be declared in our gemspec so that the version can be resolved correctly by tools like bundler. Also, @nex3, what is needed to support the more recent API? Is there an issue tracking that?
",chriseppstein,nex3
719,2013-05-23 21:13:17,"bea480bd6b70ffd8f41ec75dfecb3e922d2ebe85, which closed the issue, makes sure Sass stable won't load listen >= 1.0. 47381156165c00870099b227d675b6b4f64dd7dc stops bundling it on master, and declares a version constraint that excludes listen >= 1.0. There should be no way to use the wrong listen version now.

@chriseppstein guard/listen#112 has been fixed, but guard/listen#111 is still blocking our use of listen.
",nex3,chriseppstein
713,2013-05-31 20:54:34,"@nex3 Sure I'd be happy to. I'll ping you in the initial comment.
",ryanburnette,nex3
713,2013-06-12 04:47:18,"@nex3 As requested, I've updated the commit to retain the comments when converting from sass to scss, rather than throwing them away. I've set the type on the (previously discarded) comments to `:quiet`. I'm not sure if that's correct or a mistake: let me know if it's important to support the `/*! loud comment */` type for this use case.
",fblee,nex3
706,2013-04-18 20:59:15,"@lolmaus as @robwierzbowski pointed out, adding an extra set of parentheses doesn't create an extra level of list nesting. Parentheses aren't list delimiters; they just group order of operations. `($a)` is always the same as `$a`.

> This definitely seems like a bug though ‚Äî no matter what you do with a single dimensional list, even if it's explicitly space separated, `append()` with a comma separator turns it into a comma separated list.
> 
> 

This is the expected behavior. From the [documentation of `append`](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#append-instance_method):

> If [the `$separator` argument] is `comma` or `space`, that is always the separator; if [it] is `auto` (the default), the separator is the same as that used by the list.
",nex3,robwierzbowski
706,2013-04-18 21:13:55,"@nex3 You're right, this is the documented behavior. I don't mind the way things work, but in general I think people are surprised when append transforms existing list separators.

Correct me if I'm wrong, but I believe parenthesis can be list delimiters.


",robwierzbowski,nex3
706,2013-04-18 21:27:17,"> @nex3 You're right, this is the documented behavior. I don't mind the way things work, but in general I think people are surprised when append transforms existing list separators.

The returned list has to have a separator. If you want it to keep the old separator, don't pass an argument to `$separator`. If you're passing `$separator`, I don't understand how it's unexpected for the returned list to have that separator. What result would you expect for  `append(1 2, 3, $separator: comma)` other than `1, 2, 3`?

> Correct me if I'm wrong, but I believe parenthesis can be list delimiters.
> 
> 

That's just using them for expression grouping. You're grouping the expressions `1 2` and `3 4 5` so that the inner list-separation operators are performed before the outer list-separation operator. It's the same principle behind `(1 + 2) * (3 + 4 + 5)`.
",nex3,nex3
701,2013-04-17 23:04:29,"Thanks, @nex3. Ruby beginner.
",robwierzbowski,nex3
695,2013-03-22 20:08:47,"You make a pretty compelling case for the utility of some of these warnings. That said, I still don't like the idea of warnings that make the code less readable, like the warnings for `!:foo` and to some degree uninitialized instance variables (although the `@throw_err` issue is worrisome).

I'll go through the individual commits and leave review comments. Once those are addressed, I'll merge in everything other than the literal-in-conditional and uninitialized-ivars. I'll fix the `@throw_err` thing myself.

Thanks for the PR, @tenderlove.
",nex3,tenderlove
695,2013-03-22 21:28:19,"> You make a pretty compelling case for the utility of some of these warnings. That said, I still don't like the idea of > warnings that make the code less readable, like the warnings for !:foo and to some degree uninitialized instance variables (although the @throw_err issue is worrisome).

I prefer my libraries to run warning free so that app developers are free to make the choice to use `-w` or not, but I definitely see where you're coming from.  `-w` helps me track down bugs (like some of these) and it's nice to have the option to use it.

> I'll go through the individual commits and leave review comments. Once those are addressed, I'll merge in everything other than the literal-in-conditional and uninitialized-ivars. I'll fix the @throw_err thing myself.

Awesome, thank you! :smile:

> Thanks for the PR, @tenderlove.

No problem, I'm glad to help out.  I've pushed a commit that fixes all the stuff you commented on except for the circular require issue.  If you feel strongly about that one, then I'll change it as well.

Thanks for your time!
",tenderlove,tenderlove
691,2013-03-27 17:27:53,"Thanks @robwierzbowski: Yea, there are various workarounds, they're just less intuitive. I don't know how high of a priority a native implementation would be, but it'd still be nice to see.
",northborndesign,robwierzbowski
691,2013-07-17 16:03:49,"The flexibility in the version @chriseppstein posted would be great. As noted; sure, it's easy enough to do _most_ things by hand, but the brevity afforded by some native support ( _not to mention the flexibility of something like `by` in this case_ ) would be more than welcomed ( _and leveraged_ ) I'm sure.
",northborndesign,chriseppstein
691,2013-07-19 14:33:31,"@nex3: If you're going to use the logic that going by 2 is easy to do by hand, going by -1 should be easy enough...



I think that adding some sort of extension to change the step would be a good thing.
",Undeterminant,nex3
691,2013-09-17 06:58:12,"I added a PR for implementing a decrementing loop (`@for $i from 10 to 1` as @nex3 suggested). Sorry I couldn't get hub to add the PR to the issue directly, had a lot of trouble with it - seems there are some problems with Github's new 2FA.
",robinroestenburg,nex3
690,2013-03-23 00:20:42,"@robwierzbowski Globbing won't really work with a module system though. Modules should have a single entry point where they 'export' what consumers need.
",anthonyshort,robwierzbowski
690,2014-11-24 03:35:54,"+1 in general. Coming to Sass I kinda expected this feature to already be implemented and thought I had discovered a bug.

@jslegers -1 
If you allow customizing the name of the index file, you'll end up with incompatible vendor packages. If vendor A settles for `_module.s[ac]ss`, but vendor B goes with `_entry-point.s[ac]ss` and the user (you) decides to use `_index.s[ac]ss`, they won't be able to use any of the vendor's packages/modules.
Besides that, there is no such thing as a config file. You'd either have to mingle this config into your Sass files (very ugly!) or pass it as an option to the compiler (not much less ugly).

Sass should decide which name to use to prevent this mess. I recommend using `_module-index.s[ac]ss` or `_import-index.s[ac]ss`, depending on wether or not this gets implemented in dependence of the module feature. The name is expressive and the risk of already having partials named like that is fairly low.

@chriseppstein I recommend getting this in before the module feature, as this is a low-level feature in the language. It's virtually nothing different than a macro. The `@import ""some/directory""` statement should be availabe, without having to use higher-level concepts such as modules.

I'm highly anticipating this feature and would love to see it before the next major version update, especially in libsass, as that's what I'm using! :)

As soon as the core contributors can settle on a name or chain of names (look for xyz, if not found for abc, if not found for ... - however I discourage this), this rather ""trivial"" patch could be implemented in libsass and would be available to thousands of Node.js users in an instant.
",buschtoens,chriseppstein
684,2013-03-22 22:08:44,"@nex3 I want to remove the need for Ruby in the modular scale extension. While CodeKit, Mixture, and other tools do support extensions, the process is far too complex for a significant portion of that audience. Distributing Ruby extensions via Bower is also problematic.

to be clear, `pow(5px, 2) = 25px` and `pow(5px, 2.5) = 55.901699437px`. Your example would result in square pixels.  I have found half units to be useful when setting type on an exponential(modular) scale and the scale moves too quickly in that area.
",scottkellum,nex3
684,2013-03-22 22:32:00,"> @nex3 I want to remove the need for Ruby in the modular scale extension. While CodeKit, Mixture, and other tools do support extensions, the process is far too complex for a significant portion of that audience. Distributing Ruby extensions via Bower is also problematic.

What makes this so difficult? Ruby-based extensions are never going to be completely avoidable for complex operations. I'd like to make them easier to use rather than essentially unusable.

> `pow(5px, 2) = 25px`
> 
> Your example would result in square pixels.

These two statements seem contradictory.

> I have found half units to be useful when setting type on an exponential(modular) scale and the scale moves too quickly in that area.

What do you mean by ""half units"" and ""the scale moves too quickly""?
",nex3,nex3
684,2013-03-22 23:35:43,"@robwierzbowski Kinda like https://github.com/scottkellum/sassy-math :tongue: 
If we're missing something, happy to add more.
",Snugug,robwierzbowski
684,2014-12-01 15:55:07,"I was just working on the exact same thing @Snugug. At some point an x^2.4 was needed for almost all colors in that calculation. Using the Sass-native `pow()` function from https://github.com/terkel/mathsass 10 times resulted in a serious slowdown in compile speed. This was the only Sass-implementation I was able to find for decimal exponents.

My purpose with this was automatic color adjustment to ensure AA-compatible color contrasts. The contrast-calculating function was the one doing the ^2.4.

I managed to cook up something a bit faster, but still very slow:



x^1/5 = the fifth root of x.

I proceded to implement an nth-root-function: (note the hard-coded $guess!)


",torkiljohnsen,Snugug
684,2015-03-25 11:00:33,"I realize a conversation I had with @nex3 at SassConf about this somehow didn't make it in to this thread.

She said that she would be much more likely to be OK with more Sass-land functions (including a full math package) once #1094 landed and they could be bundled as optional libraries someone could pull in. Actually, on second read, she seems to mention it [in this commend above](https://github.com/sass/sass/issues/684#issuecomment-15326443). Either way, right now there is a very stable Ruby implementation of advanced math functions, and now that custom functions has landed in `node-sass`, expect one for that too.
",Snugug,nex3
684,2015-03-25 12:19:04,"@Snugug @nex3 I understand that Sass can easily be extended with Ruby, as a [lib extension](https://github.com/sass/libsass/pull/919), or through [Eyeglass](https://github.com/sass-eyeglass/eyeglass). However I think the argument this thread is trying to make is that this is important as a core feature of the Sass spec. There are environments where deep level Sass extensions are difficult and they dramatically increase the complexity of installing and distributing code.
",scottkellum,Snugug
684,2015-03-25 12:19:04,"@Snugug @nex3 I understand that Sass can easily be extended with Ruby, as a [lib extension](https://github.com/sass/libsass/pull/919), or through [Eyeglass](https://github.com/sass-eyeglass/eyeglass). However I think the argument this thread is trying to make is that this is important as a core feature of the Sass spec. There are environments where deep level Sass extensions are difficult and they dramatically increase the complexity of installing and distributing code.
",scottkellum,nex3
684,2015-03-25 14:10:08,"The idea is, once namespacing is available, if I understood @nex3 correctly, is that more core functions could be shipped as optional imports so as to not pollute the namespace.
",Snugug,nex3
679,2013-03-09 01:44:46,"@nex3, that's the case I was missing. I got around that exact situation by using and testing for comma separated lists at points in my code, but it was a bit hackey.
",robwierzbowski,nex3
677,2013-03-08 09:26:17,"Thank you for fixing this @nex3 
",lukearmstrong,nex3
665,2014-03-13 13:37:15,"@borodean, well, it's technically allowed to shoot yourself in the foot. :)

Seriously though (pun not intended), it's a matter of understanding how the Sass parser interprets code. It tries to treat an item as a color before trying to treat it as a string.

It's just an unfortunate thing that every Sass newbie stumbles upon. But changing the way it works will break most existing code, so @nex3 will never go for that. So just always keep it in mind and you're good to go.

As for creating a special treatment for key names in lists, special cases are generally to be avoided. It would increase parser complexity and contribute to ambiguity. On the one hand, it will encourage newbies not to quote color-like strings. On the other hand, it will produce unexpected results when an actual color is used as a key (hardly a good practice, but still feasible).
",lolmaus,nex3
659,2015-06-19 10:02:15,"We are facing this issue in Font Awesome

I just noticed that suggested solution does not work for all sass implementations

E.g, with @andrewgrewell 's approach:

Input:



Output:
http://sassmeister.com/gist/d484e00fe9243d4ba0c8 



## 

http://jsfiddle.net/tagliala/s4xh54k3/



@kaelig 's approach doesn't work at all on jsfiddle

Refers to https://github.com/FortAwesome/Font-Awesome/pull/6728
",tagliala,kaelig
652,2013-02-25 19:13:54,"@mxcl That's not fair. @nex3 explained the behavior and believing it to be not a problem, he closed the issue. He didn't misunderstand it. The working directory is a good default for most users -- especially for local development, but as a production concern it could be important to invoke sass compilation with the `-I` option to specify the root of your project's sass directory so that files will always be found there even if your working directory changes.

Please note that users of compass are unaffected by this because it has a project directory context and the full sass directory is always be placed on the load path.
",chriseppstein,nex3
646,2013-02-22 22:07:05,"Is it not stated in the SASS Reference File that the compiler does delete / omit null values and empty list in the CSS output? Hence I am with @robwierzbowski here. I just had a small encounter of the same type, which does confirm.
",StefanoRausch,robwierzbowski
642,2013-05-31 21:40:18,"@nex3 It's a good point that you make about clarity there.

I like how python distinguishes keywords from positional arguments. Anyways, this is an orthogonal issue I'll think about it more and create a separate issue down the road after actually having used the current plan in practice. The pain of deprecation is already incurred, so delaying doesn't really add much cost.
",chriseppstein,nex3
640,2013-02-02 02:14:37,"As @robwierzbowski explains, `@extend` is all about moving selectors around -- **not** CSS rules. In order to support cross-`@media` extend, actual CSS rules would have to be copied and moved, which is unexpected and contrary to the way `@extend` behaves in every other circumstances. In addition, it can cause unexpected changes in specificity to the CSS output.

If copying the CSS is the behavior you want, we recommend you use mixins for that, as they're the language construct that explicitly supports copying.
",nex3,robwierzbowski
626,2013-02-23 00:29:59,"I'll take a swing at it. @nex3 do you prefer `call` or `invoke` (or something else) for a generic function calling function?
",chriseppstein,nex3
626,2013-03-11 12:15:31,"@lunelson Interpolating a @media string (which gets printed straight out to CSS) and interpolating a mixin call (which then needs to dynamically call another piece of code) are very different processes, so it shouldn't be too surprising that it didn't work (especially considering you can't interpolate variables or functions either).

As stated above by @chriseppstein, he thinks that they'll be able in do interpolation for mixins with the current `@include` syntax and he and @nex3 have agreed they like the `call` syntax for functions, I don't think we need to confuse the issue w/more proposed syntaxes.
",Snugug,nex3
626,2013-03-11 12:15:31,"@lunelson Interpolating a @media string (which gets printed straight out to CSS) and interpolating a mixin call (which then needs to dynamically call another piece of code) are very different processes, so it shouldn't be too surprising that it didn't work (especially considering you can't interpolate variables or functions either).

As stated above by @chriseppstein, he thinks that they'll be able in do interpolation for mixins with the current `@include` syntax and he and @nex3 have agreed they like the `call` syntax for functions, I don't think we need to confuse the issue w/more proposed syntaxes.
",Snugug,chriseppstein
626,2013-03-11 13:14:57,"Thanks @Snugug, I see your point and I missed @chriseppstein's mention concerning `@include` above. All good then, glad to hear it.
",lunelson,Snugug
626,2013-03-11 13:14:57,"Thanks @Snugug, I see your point and I missed @chriseppstein's mention concerning `@include` above. All good then, glad to hear it.
",lunelson,chriseppstein
626,2013-03-23 07:40:38,"@chriseppstein how goes the work on the call/invoke methods? I ran into the need today and spent an hour trying to homebrew a solution in pure SASS before I realized it was impossible. I'd love to help, but unfortunately I have no ruby experience, and glancing over the apparently relevant files (interpolation.rb and functions.rb?), I realized this might not be the best project to jump in on headfirst.

If there's anything I can do to help, please let me know. In the interim, is their a recommended solution around this? Should I just build a lookup table for the functions I plan to use and a behemoth if tree?

Thanks! 
",joshuafcole,chriseppstein
626,2013-06-24 17:27:32,"@Snugug @cimmanon The issue here is that using a variable is not forced. Any valid SassScript expression would be allowed, including no indirection at all. So any syntax we choose must allow for a bare identifier to be unambiguous. This is the case for `@include $my-mixin`, but this implies that `@include $my-mixin($a, $b)` or `@include some-fn-that-returns-a-mixin-name($asdf)($a, $b)` would be valid, but they make me a bit squeemish.
",chriseppstein,Snugug
626,2013-06-24 17:31:52,"@chriseppstein That's exactly what I'm implying. I would assume the same would be true for either of your proposed syntaxes, and that's how it would work with interpolation.  For me, the most common use for this feature would be something like the following (and why I like interpolation):



Or, with interpolation, would look something like the following:


",Snugug,chriseppstein
626,2013-06-24 17:39:55,"@Snugug the problem is that we need to know what parts of that expression are the SassScript that means the mixin name and what parts are the argument list so that we can parse them appropriately. It's very hard to suss out the last parenthesis group using either a regexp or recursive descent parsing. As such, I'm pretty sure we need to have a way to demarcate the argument list expressions from the name expression. (correct me if I'm wrong, @nex3)
",chriseppstein,Snugug
626,2013-06-24 17:39:55,"@Snugug the problem is that we need to know what parts of that expression are the SassScript that means the mixin name and what parts are the argument list so that we can parse them appropriately. It's very hard to suss out the last parenthesis group using either a regexp or recursive descent parsing. As such, I'm pretty sure we need to have a way to demarcate the argument list expressions from the name expression. (correct me if I'm wrong, @nex3)
",chriseppstein,nex3
626,2013-06-24 19:47:09,"@Snugug right. As I stated originally ""What i don't like about this is that it makes include seem like it could include things that aren't mixins"". But I don't want to solve this with interpolation, nor a new directive. Some other keywords are fine though.
",chriseppstein,Snugug
626,2013-06-24 20:14:17,"@chriseppstein Unless the user is _really_ confused, I highly doubt anyone is going to believe that `@include` can be used on anything other than a mixin.  Other languages seem to do just fine without adding new language constructs for functions vs variables containing functions.

It's been quite a while since I've used PHP, but this _should_ work (also note that passing functions around as arguments to other function is done with the function name as a string, or at least it used to be).



JavaScript that we all know and love...



I've been using Haskell in my day to day programming for the past year or so and there's no differentiation between ""variable"" and ""function"" (partially because there's no such thing as variables in Haskell), everything is an expression.



If I try to pass an argument to an expression that takes no arguments (eg. `foo False`), then the compiler informs me that I'm doing it wrong.
",cimmanon,chriseppstein
626,2013-06-24 20:24:02,"@chriseppstein: Is your argument against interpolation solely readability? Each of the alternate suggestions puts a higher mental burden on me than reading an interpolated string.

If interpolation isn't going away for variables, i.e. `#{$foo}-something`, I would much rather see an existing language construct reused for an expected result than a new new directive added. 

For me, `#{$foo}(args)` is the most understandable, readable option so far.
",robwierzbowski,chriseppstein
626,2013-06-24 20:32:20,"@cimmanon I don't let PHP inspire any of my language design :)

In the javascript case, the variable foo is bound to a function reference. SassScript does not have first class references for mixins and functions. Are you proposing that we create such a construct? To this point, it hasn't seemed necessary and I still don't see a strong argument for it. It implies we have to introduce new definition constructs, etc. which I'm not a big fan of.

@robwierzbowski We've rejected interpolation for variables. Instead, we're adding a map data structure in 3.3. Regarding you claim that you find interpolation easier to read than a keyword, all I can say is that whenever I see a large block of code making heavy use of interpolation, I find it ugly and unreadable. Maybe this isolated use is not, in and of itself unreadable. But it adds to a general unreadability for code en-masse. It's obviously an aesthetic, so we're not going to reach agreement through persuasive arguments, but I appreciate your feedback.
",chriseppstein,robwierzbowski
626,2013-06-24 20:41:25,"@chriseppstein Thanks. If the common interpolation use case is being replaced with maps I rescind my argument. 
",robwierzbowski,chriseppstein
626,2013-06-25 00:28:35,"@chriseppstein Until I started using languages that offered first-class functions and currying, I didn't think I needed them either.  Of course I'm not suggesting that you take inspiration from PHP, but for better or worse it _is_ a language most web programmers are familiar with.  As for the JavaScript example, I could have just as easily written `var foo = parseInt` or any other previously defined function.

Consider a project like [Sassy Buttons](http://jaredhardy.com/sassy-buttons/).  No disrespect intended towards the author, but all of those arguments make one _imposing_ mixin.



To get the same conciseness, you'd have to muck around with global variables. 
",cimmanon,chriseppstein
626,2013-06-26 00:03:39,"@robwierzbowski I had two concerns with that:
1. it obviously precludes defining a mixin named `mixin`. I'm not super worried about this one. as the same issue exists for the `call` function. However, there's an interesting side note: you _can_ use `call` to call a `call` you've defined yourself.
2. Maybe it's mental baggage, but imagining a function that calls my function and returns the value it returns seems nice and tidy because the forms of the two are so similar. But with mixins, the presence of `@include` makes the word `mixin` seem like it's not the same thing as a mixin. But try as I might, I keep not finding any rational explanation for this feeling.

So maybe it's ok. Thoughts, @nex3?
",chriseppstein,robwierzbowski
626,2013-06-26 00:03:39,"@robwierzbowski I had two concerns with that:
1. it obviously precludes defining a mixin named `mixin`. I'm not super worried about this one. as the same issue exists for the `call` function. However, there's an interesting side note: you _can_ use `call` to call a `call` you've defined yourself.
2. Maybe it's mental baggage, but imagining a function that calls my function and returns the value it returns seems nice and tidy because the forms of the two are so similar. But with mixins, the presence of `@include` makes the word `mixin` seem like it's not the same thing as a mixin. But try as I might, I keep not finding any rational explanation for this feeling.

So maybe it's ok. Thoughts, @nex3?
",chriseppstein,nex3
626,2013-06-26 16:33:56,"The more I see `@include mixin $foo [with (arglist)]`, I'm generally OK with it, but I'd have to agree with @lunelson that, while I'm OK with it, it doesn't seem as elegant a solution as interpolation (which I know you dislike). All of the suggestions presented, including the functions presented by @robwierzbowski and the flag syntax I proposed, while are good alternative syntaxes, do not provide the same instantly-understandable interpolation syntax that, especially for system developers like us, we're very use to needing to do it currently. 

In the end, while I'm just generally going to be ecstatic with getting this feature in, maybe we don't have to push so hard for a new syntax? But that's me.

Also, very interested in @nex3's thoughts.
",Snugug,robwierzbowski
626,2013-06-26 16:33:56,"The more I see `@include mixin $foo [with (arglist)]`, I'm generally OK with it, but I'd have to agree with @lunelson that, while I'm OK with it, it doesn't seem as elegant a solution as interpolation (which I know you dislike). All of the suggestions presented, including the functions presented by @robwierzbowski and the flag syntax I proposed, while are good alternative syntaxes, do not provide the same instantly-understandable interpolation syntax that, especially for system developers like us, we're very use to needing to do it currently. 

In the end, while I'm just generally going to be ecstatic with getting this feature in, maybe we don't have to push so hard for a new syntax? But that's me.

Also, very interested in @nex3's thoughts.
",Snugug,nex3
626,2013-06-26 21:02:20,"We need a :+1: from @nex3. :pray: 
",chriseppstein,nex3
626,2013-06-28 20:48:39,"@chriseppstein I didn't mean to provoke, I was simply acknowledging that one might validly object to how it looks. However I dont' think it's jibberish either. I think devs who need this feature will find it readable. 

That being said I see your point re: interpolating of CSS declarations vs interpolating of Sass directives in terms of logical consistency; but if one decides that this is not a place to use string interpolation, then consider whether variables should be allowed directly, e.g. `@include $foo($x, $y);` (which is just your syntax with the keywords removed): if that doesn't seem right to you, then doesn't it suggest that interpolation is sensible?
",lunelson,chriseppstein
626,2013-06-28 21:03:37,"> I didn't mean to provoke

I didn't mean to sound so harsh.

> I think devs who need this feature will find it readable.

Perhaps. But I think the devs who don't need this feature but are trying to understand the code built by the people who did, will be very confused. This is a very important use case to me.

>  if that doesn't seem right to you

It doesn't seem right to me. It makes it look like the value returned by `$foo` is some sort of callable value which it is not, it is just a string which will have special meaning to the include directive so I want it to look very much. There are other parsing based reasons to not allow that syntax as I've mentioned above, for instance the expression can and should be any SassScript expression including but not limited to function calls, strings, string concatenation, etc. Many of those use cases will look very strange with this syntax.

> then doesn't it suggest that interpolation is sensible?

Nope. there's not only two options here.

I get that for the most part this is an aesthetic bikeshed and we probably won't make everyone happy with the decision. I'd like to put this conversation on hold until we have @nex3's thoughts on the matter.
",chriseppstein,nex3
626,2013-07-07 21:35:56,"I've been thinking about it, while a bit clunky, I'm OK with it. @nex3, thoughts? This functionality is really needed for advanced Sass work.
",Snugug,nex3
626,2013-07-19 23:51:23,"@ chriseppstein

I had started issue https://github.com/nex3/sass/issues/857 a day ago. It was user @Snugug who said it was a duplicate of this issue, refered me to here and closed my issue.

Should I reopen it? 
",jslegers,Snugug
626,2013-10-30 10:55:15,"So this thread has been inactive for a while. Those who were most interested are probably working with 3.3.0rc1 now to see what can be done; but as far as I can tell the original concerns haven't been completely addressed and I'm wondering where it all stands. As @chriseppstein said:

> it's incongruous from a user's perspective why they can interpolate a placeholder selector for extend but not for mixin & function definitions and calls

In 3.3 we have a `call()` function for dynamic function calls, and maps as a workaround for variable interpolation but still no dynamic calling of mixins. So what's the state of mind then, re `include $mixin with` or an `include($mixin, $args...)` function? I would also say that IMHO the `call()` function suggests an obvious and simple way to handle dynamic variables, namely: `return($variable-name)`. Such a function would handle the use-case of accessing variables by [interpolated] name (i.e. without the `$` sign), just as `call($function-name, $args...)` does for functions. I say this because I find that maps functionality‚Äîof which I am a big fan, and which creates exciting new potentials‚Äîis overkill in many cases for simple dynamic call of a variable.
",lunelson,chriseppstein
626,2013-10-31 16:43:37,"@chriseppstein :

If people prefer interpolation to maps for a specific implementation, shouldn't they be able to so choose that syntax instead of having the language creators decide it for them?

And while I get your point about variable interpolation, i don't see why you don't just allow any part of your SCSS to be interpolated with the `#{$var}` syntax? 

Not only would you have consistent interpolation syntax and behavior across your language, but it would allow you to do  stuff like this :



This is the sort of flexibility that I take for granted when using PHP and that I constantly miss whenever I'm using SCSS.
",jslegers,chriseppstein
626,2013-12-26 14:11:19,"Having recently written my first code using the new `call()` functionality of 3.3, I'd like to revisit this as I truly love how dynamic it makes my libraries.

I firmly believe that mixin interpolation is a must-have feature for Sass, so we should work out defining a syntax we're al happy with. So far, the two front runners seem to be interpolation and `@include mixin()`. Having worked with `call()` and having come up with `@include mixin` this morning only to see that @robwierzbowski and I have already mentioned it before, I believe that's the way to go.

To go back to earlier concerns, yes it has the potential to look like a function call, but all mixins run that issue. I, however, don't see that issue. Instead, I see the semantics as read; include a mixin named X with arguments Y and Z which is pretty much identical to how an include statement reads now. It also has the advantage of sharing the syntax meaning anything you'd expect to be able to do with a mixin you can without changing any of your syntax.

Thoughts again I guess @chriseppstein and @nex3?
",Snugug,nex3
626,2013-12-26 14:11:19,"Having recently written my first code using the new `call()` functionality of 3.3, I'd like to revisit this as I truly love how dynamic it makes my libraries.

I firmly believe that mixin interpolation is a must-have feature for Sass, so we should work out defining a syntax we're al happy with. So far, the two front runners seem to be interpolation and `@include mixin()`. Having worked with `call()` and having come up with `@include mixin` this morning only to see that @robwierzbowski and I have already mentioned it before, I believe that's the way to go.

To go back to earlier concerns, yes it has the potential to look like a function call, but all mixins run that issue. I, however, don't see that issue. Instead, I see the semantics as read; include a mixin named X with arguments Y and Z which is pretty much identical to how an include statement reads now. It also has the advantage of sharing the syntax meaning anything you'd expect to be able to do with a mixin you can without changing any of your syntax.

Thoughts again I guess @chriseppstein and @nex3?
",Snugug,robwierzbowski
626,2013-12-26 14:11:19,"Having recently written my first code using the new `call()` functionality of 3.3, I'd like to revisit this as I truly love how dynamic it makes my libraries.

I firmly believe that mixin interpolation is a must-have feature for Sass, so we should work out defining a syntax we're al happy with. So far, the two front runners seem to be interpolation and `@include mixin()`. Having worked with `call()` and having come up with `@include mixin` this morning only to see that @robwierzbowski and I have already mentioned it before, I believe that's the way to go.

To go back to earlier concerns, yes it has the potential to look like a function call, but all mixins run that issue. I, however, don't see that issue. Instead, I see the semantics as read; include a mixin named X with arguments Y and Z which is pretty much identical to how an include statement reads now. It also has the advantage of sharing the syntax meaning anything you'd expect to be able to do with a mixin you can without changing any of your syntax.

Thoughts again I guess @chriseppstein and @nex3?
",Snugug,chriseppstein
626,2014-03-29 23:20:26,"@chriseppstein :

Due to various improvements in Sass 3.3 (muchos kudos for that!), I've found a far more elegant syntax for my implementation, although I still need interpolation of mixins to get where I want.

This is basically the sort of thing I'd like to achieve...

## Input:



---

## Output:


",jslegers,chriseppstein
626,2014-03-29 23:47:09,"@chriseppstein :

Additional to easy polyfilling, another use case would be custom CSS properties.

See this example :

## Input:



---

## Output:


",jslegers,chriseppstein
626,2014-10-02 16:35:40,"@lunelson Ok. I retract ""I don't like that this directive now looks like a function call, where all the others look like statements."" This is the best option we have.

I support adding

`@include ($mixin-name, $arg-list...)`

and a corresponding syntax for defining mixins:

`@mixin ($mixin-name, <arglist definition>)`

@nex3 what say you?
",chriseppstein,nex3
626,2014-10-02 16:40:22,"Would arglist allow for named arguments? I think, especially for mixins, that they'd important

> On Oct 2, 2014, at 12:35 PM, Chris Eppstein notifications@github.com wrote:
> 
> @lunelson Ok. I retract ""I don't like that this directive now looks like a function call, where all the others look like statements."" This is the best option we have.
> 
> I support adding
> 
> @include ($mixin-name, $arg-list...)
> 
> and a corresponding syntax for defining mixins:
> 
> @mixin ($mixin-name, <arglist definition>)
> 
> @nex3 what say you?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,nex3
626,2014-10-02 16:43:50,"@Snugug yes, we support this now if you pass arglist as a map. You can pass positional and keyword args as `@include foo($args..., $kw-arg-map...)` since 3.3.
",chriseppstein,Snugug
626,2014-10-11 14:50:36,"@chriseppstein it seems to me a use-case for dynamically creating mixins would be passing a `@content` block from the running mixin to the one that's being created‚Äîsort of a 'factory' mixin if you will. 
However, this would require that the `@content` be passed on as SassScript and not be evaluated... only evaluated later, at the runtime of the new `@mixin`. Thoughts?
",lunelson,chriseppstein
626,2014-12-15 15:05:03,"@Undistraction you can currently do [`call($name, $args...)`](http://sass-lang.com/documentation/Sass/Script/Functions.html#call-instance_method), so dynamic function calls are possible.

@nex3 I like `@include call($name, $args...)` and agree that mirroring the function syntax would be good.
",Snugug,nex3
626,2014-12-15 15:07:43,"@Snugug Calls yes, but not declarations. 
",Undistraction,Snugug
626,2015-01-30 21:30:03,"@chriseppstein If you strongly prefer that to `@include include()` or `@include call()` I could be persuaded.
",nex3,chriseppstein
626,2015-01-30 23:06:33,"@nex3 Well my preference was for `@include ($mixin-name, $arglist...)` but if we have to have a special mixin name then of those three, I feel `mixin` is by far the most readable.
",chriseppstein,nex3
626,2015-02-12 10:36:12,"Wow, great thread.

I've stumbled upon this due to wanting to dynamically call a mixin within a loop and I hit the problem you've all faced.

@chriseppstein - :+1: for being so awesome...(schmoozing over)...how close are you guys to getting something like this in? It'd be a life saver right about now :) 
",danielpeplow,chriseppstein
626,2015-03-29 18:51:19,"+1 @chriseppstein suggestion `@include ($mixin-name, $arglist...)` reads better.
",mtpultz,chriseppstein
626,2015-09-01 08:48:37,"I would agree with @chriseppstein: including mixins dynamic doesn't need to be similar to invoking functions dynamically.

Indeed, the `@include` part is already very explicit about what you are doing and what is going on ‚Äì when invoking functions doesn't involve such a keyword. I do think it is more intuitive if the syntax looks similar to including mixins regularly, by passing arguments inside of parentheses.

Therefore,  the `@include mixin($mixin-name, $args..);` seems the most readable and intuitive to me. And it actually _does_ look similar to invoking functions dynamically, since you pass the mixin's name as first argument, just like you do with the `call` function.

So, +1 for `@include mixin($mixin-name, $args..);`. Looking forward to see this feature in Sass!
",yoannisj,chriseppstein
626,2015-09-07 00:32:08,"I would love to see this in sass,
@chriseppstein @nex3 When there's an agreement on syntax I'll gladly kick off a modest bounty to help this along.
",gkiely,nex3
626,2015-09-07 00:32:08,"I would love to see this in sass,
@chriseppstein @nex3 When there's an agreement on syntax I'll gladly kick off a modest bounty to help this along.
",gkiely,chriseppstein
626,2015-10-20 06:15:20,"No worries @nex3 I appreciate yours and others work on this, and hopefully it's something that makes it into sass eventually.
",gkiely,nex3
626,2015-12-11 22:57:47,"@chriseppstein If we have good namespacing in Sass 4 (which I hope to), we can define this mixin in some sort of `meta` namespace and avoid collisions. I'd really like to support that sort of namespacing‚Äîit's a big reason I'm okay with adding a bunch of new functions‚Äîso I think we should hold off on deprecating existing mixins.
",nex3,chriseppstein
626,2015-12-15 16:43:26,"@nex3 This isn't a mixin, it's syntax that is ambiguous with the name of a mixin. If Sass was actually exposing mixins, then I would agree that is a proper solution for this case. But this is special syntax for invoking a mixin and that syntax should be global, just like the `call` method for invoking functions dynamically. Worse, is that we currently allow users to define a function named `call` which would break Sass semantics. We should deprecate both and not make things complex by allowing important builtins to be swapped around locally with different semantics.
",chriseppstein,nex3
626,2016-01-08 22:31:44,"@nex3 it's not an actual mixin that is special, it's a name that is special cased to behave differently. If it were the former, I would agree with you, but it's not.
",chriseppstein,nex3
626,2016-01-08 23:15:40,"@nex3 @chriseppstein 

> But we could get that benefit without adding a special case. We could define a built-in mixin in the meta namespace that does exactly that, and then we'd get to avoid the pain of deprecation and special casing.

Whenever possible, it's always better to add new features in a way that doesn't break backward compatibility.
",jslegers,nex3
626,2016-01-08 23:15:40,"@nex3 @chriseppstein 

> But we could get that benefit without adding a special case. We could define a built-in mixin in the meta namespace that does exactly that, and then we'd get to avoid the pain of deprecation and special casing.

Whenever possible, it's always better to add new features in a way that doesn't break backward compatibility.
",jslegers,chriseppstein
626,2016-02-11 23:23:20,"Hi @nex3 @chriseppstein has there been any update on this feature?
",gkiely,nex3
626,2016-02-11 23:23:20,"Hi @nex3 @chriseppstein has there been any update on this feature?
",gkiely,chriseppstein
577,2012-12-11 20:04:13,"@Snugug oks thanks, you have more details about this? is only for a course that I am giving.
",Writkas,Snugug
577,2012-12-11 20:10:32,"We had this discussion in the Breakpoint issue queue (http://github.com/Canarymason/breakpoint). Check out the closed issues

On Dec 11, 2012, at 3:04 PM, Mat√≠as Mu√±oz Espinoza notifications@github.com wrote:

> @Snugug oks thanks, you have more details about this? is only for a course that I am giving.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,Snugug
577,2012-12-11 20:13:47,"@Snugug oks, thanks for the help :+1: 
",Writkas,Snugug
577,2012-12-12 04:01:13,"@chriseppstein thanks :+1:
",Writkas,chriseppstein
576,2012-11-27 08:51:20,"Thank you @nex3 ;)
",kud,nex3
561,2013-05-24 23:46:03,"@nex3 the $global flag, when set to true would ask whether the global variable exists (ignores local scopes).
",chriseppstein,nex3
556,2013-07-01 18:50:52,"@chriseppstein great, thanks! I'll replace my custom importer with that. One less thing I have to maintain :+1:
",joefiorini,chriseppstein
556,2013-08-08 14:59:44,"@chriseppstein You Sir are Great, Thanks!
",monsdroid,chriseppstein
556,2013-11-04 13:21:13,"@Snugug absolutely correct! Thanks.
",spieglio,Snugug
556,2013-11-04 14:50:10,"@Snugug Thank you for your detailed comment and once again, sorry for flaming.

My point is that the abstracted language Sass is very limited. It's extending with a general-purpose programming language that makes Sass shine. It lets you:
- manipulate colors: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/colors.rb);
- analyze values: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb);
- generate gradients [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/gradient_support.rb);
- analyze image files: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/image_size.rb);
- embed images into css code: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/inline_image.rb);
- manipulate lists: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb), [Toolkit](https://github.com/Team-Sass/toolkit/blob/1.x.x/compass/lib/toolkit.rb), [Modular Scale](https://github.com/Team-Sass/modular-scale/blob/master/lib/modular-scale.rb#L102), [Jacket](https://github.com/Team-Sass/jacket/blob/master/lib/jacket.rb);
- do math: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/math.rb), [SassyLIsts](https://github.com/Team-Sass/SassyLists/blob/master/lib/SassyLists.rb), [Modular Scale](https://github.com/Team-Sass/modular-scale/blob/master/lib/modular-scale.rb), [Harsh](https://github.com/bookcasey/harsh/blob/master/lib/harsh.rb), [Sassy-math](https://github.com/Team-Sass/Sassy-math/blob/master/compass/lib/sassy-math.rb);
- generate sprites: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/sprites.rb);
- generate Sass variables and functions with a template engine (!): [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sprite_importer/content.erb);
- pass environment variables from OS into Sass: [a random Compass config](https://gist.github.com/darren131/5402087);
- and basically anything else you can imagine that's relevant to generating CSS.

Please get me right. I don't argue against porting sass-css-importer into the abstracted language Sass. 

They deprive their preprocessor from its general-purpose programming language extendability and then ask to implement amputated goodies in its base standard. Okay, Sass devs may be cool with porting sass-css-importer into base Sass. But then someone will need another extnesion merged into the base language, say, working with large numbers ([which fail in Sass miserably](http://sassmeister.com/gist/7302404)), or importing a folder with one `@import` statement, or raising numbers to a power, or producing custom gradients...

Most Node.js developers either use grunt-contrib-compass to leverage the full power of the Sass/Compass infrastructure, or use LESS or Stylus/Styl and their capability to extend its base language with Node's native JS. But some guys just want to eat the fruit without climbing the tree.
",lolmaus,Snugug
556,2014-03-03 06:28:58,"+1 this need

Thanks for the heads up @Snugug :)

Seems like the solution could be to import as usual and if a file isn't found with .sass or .scss, a file with .css is located and imported as if it were a .scss file without any Sassyness in it.

Using Sass with Bower components just got harder. Anyone got any work arounds to this? I haven't read this whole thread yet.
",adamstac,Snugug
556,2014-04-16 22:45:54,"When @chriseppstein released the initial dev version of this tool (sass-css-importer) I have written a blog about how to use it. I hope it still applies (will update the blog if functions in this have changed recently). 

Link: http://www.rajibpaudyal.com/blog/import-css-sass
",rajibmp,chriseppstein
556,2014-07-31 02:55:57,"@chriseppstein did not mean to imply that, you guys do amazing work. I'm not totally sure it should be necessary to use the same syntax (`@inline url('path/to/file.css'`) perhaps? inlining is a slightly different intention to `@import` anyway) or perhaps could leave off the extension (is it really that 'strange', as you initially suggested? - throw an error if there's more than one file with that name?), or use an option like !inline just before the semicolon? I'm not sure what the best approach would be
",tbredin,chriseppstein
556,2014-08-01 00:21:00,"@chriseppstein thanks, that sounds pretty good! I appreciate the effort these things take. Would be interested to hear more about the intention for `@use` as well. Renaming css files wasn't super simple simple if using something like bower, but I'm going to just pipe my vendor css through gulp. I did try your inliner as well but haven't had much success (probably my bad, I haven't had time to explore it yet). 

@ckihneman thanks; I was thinking about writing something like this as well - yoink!
",tbredin,chriseppstein
556,2014-08-26 15:16:36,"@ckihneman I tried @chriseppstein 's tool https://github.com/chriseppstein/sass-css-importer but have 2 problems with it

1) It just import .css into .scss as a normal CSS import. There will be still an extra http reuest.
2) It @import the file at the top in Global.css while I want to load it after ABC.scss
",jitendravyas,chriseppstein
556,2014-11-07 23:16:30,"Okay, so I'm going to throw in my two cents, because... fuck it. I'm pretty certain I've never seen a piece of production Sass code that used `@import ""file.css"";` as a traditional CSS import. Afaik, browser CSS imports are notoriously bad for performance and are now basically an unused feature. (http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)

I know that the `@use` syntax in 4.0 is going to be rock'n. @nex3 I saw your gist and it's pretty damn cool. And, I can't wait for that. But, I think the argument of breaking backwards compatibility or CSS compatibility is flawed in that I'm unaware of it actually being used. I'm sure someone has used it, but it's far less used (and therefore traumatic) than the global scoping change made in 3.4!

I think in 3.5 that `@import ""file.css"";` should just load in the damn file, if it can find it in the normal search paths, otherwise post a warning and just print out the `@import` as CSS. Also, `@import url('a.css');` should probably just be considered a regular CSS import, since it's specifying `url()`;

In fact, let's say someone was referencing a real CSS file, that was local to the Sass file, and they were using a CSS `@import` because they were unaware of its performance implications. I'd think it would be a magical, helpful thing, if the file actually ended up bundled into the main CSS file they were generating. I can't imagine someone being upset at enhanced CSS bundling. Remember, the browser has to stop when it sees the CSS `@import` and literally can't render anything on the page until it goes and issues a full other upstream request. Hence, why this CSS feature is a really bad idea.

The CSS ecosystem has changed wildly since we first implemented the rules for `@import` and I think that we're unduly inconveniencing people with rich front end build systems and huge CSS libraries, who use Sass as a central part of their CSS platform, in order to not break behaviour. Again, I know that we want to implement `@use` as a richer answer, but this seems pretty simple to implement _now_ and I'd suggest reconsidering the original response.
",hcatlin,nex3
556,2014-12-04 16:13:15,":+1: 

@bradleyflood I have exactly the same use case, and I really hope to either see 4.0 out soon (with its new `@use` directive) or some kind of reasonable stopgap like @hcatlin [described.](https://github.com/sass/sass/issues/556#issuecomment-62229812)

In the meantime, @chriseppstein's [hack](https://github.com/sass/sass/issues/556#issuecomment-64730080) looks like what I'll be doing for now.
",mnquintana,chriseppstein
556,2014-12-15 23:54:23,"Am I just doing something completely wrong? In my codepen I'm able to load a .css file into a SCSS file but in my application it doesn't work. I think the fact that SCSS/SASS couldn't import regular .css files from the very beginning is silly. If what we're doing is extending how the @import works then why not keep how it already worked and add on top of it?

http://codepen.io/CWSites/pen/ByKeNO

As a general note to @nex3 and @chriseppstein, I'm sorry for the earlier twitter exchange. Trying to have a discussion with less than 140 characters doesn't work well and I'm sure that I came across way worse than what I was intending...combined with my lack of knowledge on certain subjects. I realize that you guys do a lot, I wasn't trying to demand you work on anything. Just trying to understand why this has been going on for so long.
",CWSites,nex3
556,2014-12-15 23:54:23,"Am I just doing something completely wrong? In my codepen I'm able to load a .css file into a SCSS file but in my application it doesn't work. I think the fact that SCSS/SASS couldn't import regular .css files from the very beginning is silly. If what we're doing is extending how the @import works then why not keep how it already worked and add on top of it?

http://codepen.io/CWSites/pen/ByKeNO

As a general note to @nex3 and @chriseppstein, I'm sorry for the earlier twitter exchange. Trying to have a discussion with less than 140 characters doesn't work well and I'm sure that I came across way worse than what I was intending...combined with my lack of knowledge on certain subjects. I realize that you guys do a lot, I wasn't trying to demand you work on anything. Just trying to understand why this has been going on for so long.
",CWSites,chriseppstein
543,2014-10-10 02:40:50,"@nex3 that is a good point -- confirmed (not that I doubted you) http://codepen.io/zaus/pen/Cukty



which you basically point out in the deprecation ticket.  Since I can't remember that far back, I'm going to assume there was a reason _then_ to compare explicitly, which was also deprecated when the function changed.
",zaus,nex3
538,2012-10-16 05:38:49,"@nex3 Thanks for replying. I haven't been able to ascertain the root cause on the MacRuby side. I'm looking at using hcatlin/libsass now instead (which I have compiled into a bundle that's working in MacRuby). However, it's important that I have access to Compass, which obviously will not work with libsass. The thought crossed my mind to monkeypatch Sass's rendering and replace it with calls into libsass? Would that even be possible or is this just a pipe dream?
",joefiorini,nex3
533,2013-01-08 00:34:10,"@robwierzbowski Thanks for the tip; I'll incorporate it into my own stuff and see if it works!
",pdaoust,robwierzbowski
533,2013-07-17 11:49:04,"Function from @robwierzbowski works great. I'd love to see this native. It occurred to me it comes in handy sometimes. 
",HugoGiraudel,robwierzbowski
533,2013-07-22 17:15:19,"@HugoGiraudel I gave my concerns and I asked for use cases. Your most recent comment is unproductive and unpersuasive.
",chriseppstein,HugoGiraudel
533,2013-07-22 17:47:03,"@robwierzbowski This actually makes my point. It's nonsense mathematically to perform and exponential operation with a dimensional value. Taking the unit off, makes the operation succeed, but it doesn't make sense. What does `2px ^ 5em` mean? By doing this, you're making something succeed that should be an error to the caller.

@HugoGiraudel That article is just another case of people who do not understand how arithmetic with dimensional values works. I want us to focus on training them on how to do the math correctly, not giving tools to enable bad behavior.
",chriseppstein,HugoGiraudel
533,2013-07-22 17:47:03,"@robwierzbowski This actually makes my point. It's nonsense mathematically to perform and exponential operation with a dimensional value. Taking the unit off, makes the operation succeed, but it doesn't make sense. What does `2px ^ 5em` mean? By doing this, you're making something succeed that should be an error to the caller.

@HugoGiraudel That article is just another case of people who do not understand how arithmetic with dimensional values works. I want us to focus on training them on how to do the math correctly, not giving tools to enable bad behavior.
",chriseppstein,robwierzbowski
533,2013-07-22 17:55:01,"@chriseppstein: Note with the example function there's no way to do `2px ^ 5em`. The exponent can only be a unitless number, and the without-unit is only applied when multiplying the measurement to itself. It is correct math.

But, I would like to see some real world, in-use examples. Like I said, at one point I wanted this but haven't needed it for quite a while, and have no opinion on whether it should be part of Sass or not.
",robwierzbowski,chriseppstein
533,2013-07-22 18:01:54,"@robwierzbowski Oh, sorry I misread that. Again, this is a misunderstanding of how dimensional values work. 2ft ^ 2 is 4 square feet (an area), not 4 ft (which would be a length). The correct thing to do in this calculation is let the units multiply along with the number. the easiest way to think how to properly do math with units is to think of a unit like it is an unknown quantity in algebra. `(2 * x) ^ 2` is `4 * x^2`. If the units at the end of a calculation don't cancel out to become the dimension you're expecting, this is a good sign that a mathematical error was made.
",chriseppstein,robwierzbowski
533,2013-07-22 18:09:03,"I don't have any use cases for stripping units. I just enjoy solving the puzzle. I have 3-4 more useless Sass functions if anyone wants them. 

I think we did try to manipulate units early on with Susy, and quickly realized - after a scolding from Chris :) - that it was much simpler and more reliable to keep the units in place. I agree with @chriseppstein that there is really no good reason for this, at least not one I've ever thought of.
",mirisuzanne,chriseppstein
533,2013-07-22 18:11:27,"@chriseppstein Thanks, that makes a lot of sense.
",robwierzbowski,chriseppstein
533,2013-07-22 18:20:27,"I think @chriseppstein's point is that you/we should be using Sass math to convert between units because it is idiomatic and less prone to accidental failure. I'm sure you can convert rem to em in your mixin without stripping the unit.
",robwierzbowski,chriseppstein
533,2013-07-23 20:51:48,"@pdaoust I'd do it like this:


",chriseppstein,pdaoust
533,2013-07-23 20:59:52,"@HugoGiraudel ya. that works too. This was easier to write on the fly :)
",chriseppstein,HugoGiraudel
533,2013-07-26 18:53:50,"you know, actually, I was in the process of reimplementing my conversion functions as two-dimensional lists :) Thanks, @chriseppstein, for the example converter -- once I parsed it, I understood the math that was going on.
",pdaoust,chriseppstein
533,2014-02-28 05:57:23,"@montmanu That's a very unusual, but very interesting and valid, use case. I can understand the core team's reluctance to make this a built-in function, but @robwierzbowski 's snippet is perfectly adequate. You could just call it `parse-int()` or whatever you like:


",pdaoust,robwierzbowski
533,2014-02-28 16:12:14,"@pdaoust So do I.. I was reluctant to even share that example knowing that this issue has generated a bit of disagreement and is now closed, so I wasn't sure what value it would add to the discussion. @robwierzbowski's solution is what I ended up using and it has met my needs. Maybe worth mentioning that when naming the function `parse-int()` the grunt-contrib-compass task I was using had problems compiling. I didn't do too much digging to find out why, but when I renamed it to something less likely to create a namespace conflict (e.g., `strip-units()`) it compiled successfully. 
",montmanu,pdaoust
533,2014-02-28 16:12:14,"@pdaoust So do I.. I was reluctant to even share that example knowing that this issue has generated a bit of disagreement and is now closed, so I wasn't sure what value it would add to the discussion. @robwierzbowski's solution is what I ended up using and it has met my needs. Maybe worth mentioning that when naming the function `parse-int()` the grunt-contrib-compass task I was using had problems compiling. I didn't do too much digging to find out why, but when I renamed it to something less likely to create a namespace conflict (e.g., `strip-units()`) it compiled successfully. 
",montmanu,robwierzbowski
533,2014-02-28 17:30:36,"@chriseppstein Yes, it is shorter, but to someone who isn't familiar with what's going on here, 1px looks like some sort of magic number.  Using a clearly-named function removes this ambiguity.
",cimmanon,chriseppstein
533,2014-05-06 19:39:49,"Sick `strip-units()` function @robwierzbowski 

 :+1: 
",drewlustro,robwierzbowski
533,2014-05-06 20:01:33,"Thanks, not my own! Copied/adapted from another source far in the past.

Honestly I haven't had to strip units since this issue was posted.
@chriseppstien ++

On Tuesday, May 6, 2014, Drew Lustro notifications@github.com wrote:

> Sick strip-units() function @robwierzbowskihttps://github.com/robwierzbowski
> 
> [image: :+1:]
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/533#issuecomment-42348889
> .

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowski
482,2012-08-15 22:48:48,"@nex3 How about include this on a `3.2.1` release? 
",linjunpop,nex3
476,2012-08-10 12:04:44,"@chriseppstein I added a [pull request](https://github.com/nex3/sass/pull/479) for a possible solution.
I'm not sure if this covers all the bases, but it seems to be doing what it's supposed to do.

My commit seems to involve a lot of unintended whitespace changes. Could this be related to the fact that I'm developing on a windows machine?
",HeadOnAPlate,chriseppstein
475,2012-08-15 07:25:36,"@chriseppstein thx, good to know that trick. also got answer from stackoverflow. just need to add /**/, so it's not empty.
",dbashyal,chriseppstein
473,2012-10-10 19:37:03,"@nex3 agreed re: mixins adding variables; that could get confusing. However, I do agree with previous commenters; a !local keyword would be awesome; it would be more in line with the way a lot of languages work -- JavaScript, for instance (which a lot of front-end developers would be familiar with already) allows you to shadow variables at your discretion. This slipped me up already...
",pdaoust,nex3
473,2013-09-06 20:47:08,"@nex3 Whoa. I was using version 0.0.5 of `scssphp` when I got this result. I just tested it with `sass` 3.2.7 and you are right. I need to upgrade the `scssphp` or just use `sass`. Thanks for alerting me to this.
",drgrib,nex3
473,2013-09-26 12:21:35,"@nex3 @chriseppstein as I understand, it's more or less implemented in 3.3?

source: [[CSSconf.eu 2013] Chris Eppstein - The Mind-blowing Power of Sass 3.3](http://www.youtube.com/watch?v=-ZJeOJGazgE&feature=youtu.be&t=36m50s)
",stryju,nex3
473,2013-09-26 12:21:35,"@nex3 @chriseppstein as I understand, it's more or less implemented in 3.3?

source: [[CSSconf.eu 2013] Chris Eppstein - The Mind-blowing Power of Sass 3.3](http://www.youtube.com/watch?v=-ZJeOJGazgE&feature=youtu.be&t=36m50s)
",stryju,chriseppstein
469,2017-02-08 22:56:06,"@chriseppstein: In terms of percentage browser support for CSS3 colours and/or IE8 percentage market share, when would you be happy with this behaviour becoming the default, if at all?

I ask because [97.8% of user-agents now support CSS3 colours](http://caniuse.com/#search=hsl), and IE8 now has only [3.2% market share](https://www.netmarketshare.com/browser-market-share.aspx?qprid=2&qpcustomd=0)\* (obviously depending slightly on who you ask).

\*that site seems to only show data intermittently/based on referrer; here's a screenshot:

![image](https://cloud.githubusercontent.com/assets/9433472/22760727/a520f366-ee4f-11e6-8032-8659f2a2dd52.png)
",anowlcalledjosh,chriseppstein
469,2017-02-08 23:25:15,"Please keep in mind this issue was from 2012, a lot has changed.

@nex3 this might be worth another look given 3.5 is aimed at IE9+",xzyfer,nex3
468,2014-02-27 21:15:36,"@nex3 Hey there. I'm on sass 3.1.20 and I've got this problem on my mac too. I tried to set `@charset ""UTF-8"";` at the top of my Sass files, as my editor saves all files in UTF-8, but it didn't make any difference.

By the way: collimarco said this already 2 years ago (by editing his issues). As far as I can tell we are not able to reopen the issue as you suggested.
",tobiasmuecksch,nex3
468,2014-02-27 21:33:46,"@nex3 Thanks for your advice. I'm sorry i caused you to reopen this issue. It wasn't an encoding problem in my case. I've opened another issue #1141 describing my problem. Thanks anyway. Feel free to delete my obsolete comments in this issue.
",tobiasmuecksch,nex3
466,2012-08-08 17:54:52,"@nex3 it's possible to disable the asset pipeline and use the `Sass::Plugin` instead. `Sass::Plugin` can check whether the asset pipeline is enabled. In `compass-rails` we use this to check:


",chriseppstein,nex3
466,2012-08-11 01:37:24,"@nex3 Isn't it the default behavior?
",chriseppstein,nex3
456,2013-12-03 06:55:48,"@scottkellum, @WillsB3, it seems that Sass maintainers just don't want us to be able to do that. :(

I also [tried](https://github.com/nex3/sass/issues/984) to bring this problem up (i'm sorry for creating a duplicate issue). I suggested that Sass should maintain a separate extendable list of selectors for each unique media query. But @chriseppstein considers this to be counter-intuitive for many users.

@chriseppstein points out that Sass does allow to extend from media queries. To do this, you have to declare a separate extendable selector for each unique media query, so that _the extended value wasn't found outside the media query_. This can be done either manually or using a technique called [""Maps, Media & Extend, Oh my!""](http://sassmeister.com/gist/7764882).

Basically, the ""Oh, my"" technique requires that:
- all extendable selectors should be declared:
  - from within an initialization mixin,
  - via `@at-root` directive,
  - with an interpolated media query name within each selector's name;
- you have to maintain a global table of what extendables have been initialized for what media queries;
- you have to call the mixin prior to each `@extend` call.

Oh my, it's _so intuitive_ that i'm still not sure whether i correctly understand what's going on in that example. So you can correct me if you grasped it better.

---

Well, this is the direction where modern Sass is heading for. Another example of the tendency is the way parent selector can be interpolated.

In LESS and Stylus you can do:



To achieve the same result in Sass, you have to do:



I guess that if you choose Sass over other preprocessors then you just have to accept that ""intuitive"" means not ""intuitive from the perspective of users"" but rather ""from the perspective of the internal logic of the Sass compiler"". 
",lolmaus,chriseppstein
456,2013-12-07 06:24:52,"@nex3 Say, a user wants to extend from a media query. Consider @WillsB3's [use case](#issuecomment-29621364) as an example. As extending from media queries is impossible, what workaround will he use? What does everybody use in this situation?

Mixins. It's the only thing that works.

I find these in all my projects:



This looks redundant and it is. But i'm forced into having both mixins and extends implementations of snippets because i need them inside media queries.

The mixins workaround produces a CSS much larger than the proposed functionality of extends ""silently multiplying the size of their selectors"", because each mixin usage will have a duplicate rule in CSS, whereas each extend will only have a single duplicate per media query.

Say, you have three different media queries and you're trying to extend four times in each of them and four times outside media queries. The suggested extends approach will produce 4 CSS rules and the mixin workaround will produce 13.

So basically:
1. You say you don't want to implement this because you care for resulting CSS size. But by rejecting to implement it you doom people who need it into multiple times larger CSS size.
2. You neglect the demands of people who use extends extensively and instead care about newbies who might eventually extend from a media query without knowing the mechanism and wonder why there's a duplicate rule in CSS.

Please reconsider.

PS There's of course the ""Oh, my"" workaround (see above), but it does absolutely the same: producing a unique extendable for each media query. It's the same what we ask here, but with absolutely ridiculous usage complexity.
",lolmaus,nex3
456,2013-12-14 14:32:42,"@lolmaus There is a Latin phrase that I think sums up the counter-point to your argument: _Ignorantia juris non excusat_ or ""Ignorance of the law does not excuse"". Suggesting that it's OK to codify bad behavior because people don't know any better is a terrible suggestion made worse by the rude delivery. I, and many fellow framework developers, know exactly how `@extend` works and work hard to optimize our code around its benefits. Extension, especially in a pre-process language, is tricky as hell (as evidenced by the fact that really only the Ruby implementation of Sass gets it right of all CSS Preprocessors, and that's because it's caught most of the edge cases already and takes hard lines against bad output). When used properly, extension can actually produce CSS that's _smaller_ than you would write by hand as you're able to micro-optimize in a system where otherwise you wouldn't think to. Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one, missing the point of @nex3's argument against; it's about predictability of and a silent change in the way an interaction happens, not necessarily the actual duplicated code.

As for your tangent into other features of Sass 3.3, while `@at-root` is more verbose, it's much more predictable (again that word) than the way it's handled in Less and Stylus. It also provides users with options and can be used in more places than just interpolating a nested selector, providing a consistent and predictable (again) interface for referring to the root of a document. Merging identical media queries? As stated time and time again by @nex3 and discussed at length in #241, re-ordering media queries is dangerous and (gasp) unpredictable. Instead, a direct approach (`@target`) has been proposed.

One of the key aspects of User Experience (of which Developer Experience, what we're talking about, falls under) is that actions should have predictable outcomes. On a website, if a red button had the text ""Free Shipping"" and if clicked on a product page, it provided free shipping, but if clicked on from an item in a carousel shipping was $5 because somewhere in the business logic of that button it's only free from a product page, people would be pissed off. The argument is for making the ""Free Shipping"" button always mean ""Free Shipping"" and if shipping isn't free, make sure the user explicitly knows.
",Snugug,nex3
456,2013-12-14 14:46:40,"Speaking of Free Shipping, @nex3 @chriseppstein thoughts on providing a way for users to explicitly state that they wish a new extension context be created (i.e. duplicate the thing being extended and use that where appropriate)? Something like the following:



_would compile to_



Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical `@media` contexts (but include ones in `or` chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal `@extend` pattern of ""all"" doesn't quite make sense here, but because it is an explicit call, a user will understand that they're changing how it works.
",Snugug,nex3
456,2013-12-14 14:46:40,"Speaking of Free Shipping, @nex3 @chriseppstein thoughts on providing a way for users to explicitly state that they wish a new extension context be created (i.e. duplicate the thing being extended and use that where appropriate)? Something like the following:



_would compile to_



Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical `@media` contexts (but include ones in `or` chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal `@extend` pattern of ""all"" doesn't quite make sense here, but because it is an explicit call, a user will understand that they're changing how it works.
",Snugug,chriseppstein
456,2013-12-14 21:54:15,"@Snugug 

> Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical @media contexts (but include ones in or chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal @extend pattern of ""all"" doesn't quite make sense here

Maybe you didn't undersand what i'm suggesting and that's why we have this argument...

I'm suggesting that a new extend context should be unconditionally created for every unique media query type. Within each such context, `@extend` should work as usual. Extends from different contexts should not be aware of each other.

This behaviour is absolutely predictable, it does not require Sass to do any decision making, it does not require rearranging selectors ""to the first or last item"", and the ""normal `@extend` pattern"" will still make perfect sense here.

---

> Suggesting that it's OK to codify bad

If you consider this behaviour bad, please provide concrete examples and arguments. I provide mine below.

---

> I, and many fellow framework developers, know exactly how @extend works and work hard to optimize our code around its benefits.

Currently Sass does not allow to extend the same selectors inside different media queries (or inside + outside a media query). It just doesn't work, and this fact has no benefit at all.

---

> Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one

I never did such an argument. My argument was: Let users do what is currently impossible. If they want to use it, they can read docs and learn how it will work for them.

If they're neglectful so much that they don't read, then they will hardly notice the difference. @nex3 cares about how users will be surprised by the change, but they are already [misusing](https://github.com/nex3/sass/issues/1038) `@extend` all the time and most of them don't even notice it. Also, how can you be surprised by something you're not doing?

Let me empathize this. Nobody is currently extending same selectors within different media queries because it just doesn't work! Enabling this will not change the output of existing code.

Only people who read that extending same selectors from different media queries has been enabled in Sass 3.3 will start using it. And they will know how it works because they have just read it!

There also will be newbies who will ignorantly use extends in media queries without knowing how it works. But it will not hurt them because:
1. they will see in the browser exactly what they wanted;
2. resulting CSS size will not be larger than the mixin alternative;
3. the suggested behavior does not introduce new collisions of any kind or any unwanted behaviour (other than the fact that when you ask for an extend within a media query then you ‚Äîsurpise!‚Äî get an extend within a media query).

---

> @at-root is more verbose, it's much more predictable

So why do people stumble on it all the time? Parent selector is probably the most misused feature in Sass 3.2. ""Why does my `&-foo` not work"" is the most popular question on Stackoverflow, with ""Why does my `#{&}-foo` produce bloated markup"" being close on the heels. Again, a lot of users just don't notice that their `#{&}-foo` produces bloated markup.

As for `@at-root`, it looks logical for Sass gurus who know Sass inside out, but it is counter-intuitive for normal users. And @chriseppstein's suggestion to consider parent selector's [crazy behavior](https://github.com/nex3/sass/issues/1036) to be normal and to work around it with `.foo, .bar { #{append-to-selector(&, "".baz"")} {a:b;}}` is ridiculous. No sane person (who's not a Sass maintainer/guru) will consider _that_ to be intuitive.

I just don't understand why you let that counter-intuitive stuff pass and ban the possibility of extending from different media queries. It just does not make sense. :(

---

> Merging identical media queries? re-ordering media queries is dangerous and (gasp) unpredictable

The `@extend` directive always merges selectors. So if Sass 3.3 produced a merged media query for each extend, it will not be unpredictable. Also, it will not break anything.

---

> `@extend %half !duplicate;`
> because it is an explicit call, a user will understand that they're changing how it works.

Because doing this without `!duplicate` will still be impossible, this is how users will feel when using `!duplicate`:


",lolmaus,nex3
456,2013-12-14 21:54:15,"@Snugug 

> Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical @media contexts (but include ones in or chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal @extend pattern of ""all"" doesn't quite make sense here

Maybe you didn't undersand what i'm suggesting and that's why we have this argument...

I'm suggesting that a new extend context should be unconditionally created for every unique media query type. Within each such context, `@extend` should work as usual. Extends from different contexts should not be aware of each other.

This behaviour is absolutely predictable, it does not require Sass to do any decision making, it does not require rearranging selectors ""to the first or last item"", and the ""normal `@extend` pattern"" will still make perfect sense here.

---

> Suggesting that it's OK to codify bad

If you consider this behaviour bad, please provide concrete examples and arguments. I provide mine below.

---

> I, and many fellow framework developers, know exactly how @extend works and work hard to optimize our code around its benefits.

Currently Sass does not allow to extend the same selectors inside different media queries (or inside + outside a media query). It just doesn't work, and this fact has no benefit at all.

---

> Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one

I never did such an argument. My argument was: Let users do what is currently impossible. If they want to use it, they can read docs and learn how it will work for them.

If they're neglectful so much that they don't read, then they will hardly notice the difference. @nex3 cares about how users will be surprised by the change, but they are already [misusing](https://github.com/nex3/sass/issues/1038) `@extend` all the time and most of them don't even notice it. Also, how can you be surprised by something you're not doing?

Let me empathize this. Nobody is currently extending same selectors within different media queries because it just doesn't work! Enabling this will not change the output of existing code.

Only people who read that extending same selectors from different media queries has been enabled in Sass 3.3 will start using it. And they will know how it works because they have just read it!

There also will be newbies who will ignorantly use extends in media queries without knowing how it works. But it will not hurt them because:
1. they will see in the browser exactly what they wanted;
2. resulting CSS size will not be larger than the mixin alternative;
3. the suggested behavior does not introduce new collisions of any kind or any unwanted behaviour (other than the fact that when you ask for an extend within a media query then you ‚Äîsurpise!‚Äî get an extend within a media query).

---

> @at-root is more verbose, it's much more predictable

So why do people stumble on it all the time? Parent selector is probably the most misused feature in Sass 3.2. ""Why does my `&-foo` not work"" is the most popular question on Stackoverflow, with ""Why does my `#{&}-foo` produce bloated markup"" being close on the heels. Again, a lot of users just don't notice that their `#{&}-foo` produces bloated markup.

As for `@at-root`, it looks logical for Sass gurus who know Sass inside out, but it is counter-intuitive for normal users. And @chriseppstein's suggestion to consider parent selector's [crazy behavior](https://github.com/nex3/sass/issues/1036) to be normal and to work around it with `.foo, .bar { #{append-to-selector(&, "".baz"")} {a:b;}}` is ridiculous. No sane person (who's not a Sass maintainer/guru) will consider _that_ to be intuitive.

I just don't understand why you let that counter-intuitive stuff pass and ban the possibility of extending from different media queries. It just does not make sense. :(

---

> Merging identical media queries? re-ordering media queries is dangerous and (gasp) unpredictable

The `@extend` directive always merges selectors. So if Sass 3.3 produced a merged media query for each extend, it will not be unpredictable. Also, it will not break anything.

---

> `@extend %half !duplicate;`
> because it is an explicit call, a user will understand that they're changing how it works.

Because doing this without `!duplicate` will still be impossible, this is how users will feel when using `!duplicate`:


",lolmaus,chriseppstein
456,2013-12-14 21:54:15,"@Snugug 

> Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical @media contexts (but include ones in or chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal @extend pattern of ""all"" doesn't quite make sense here

Maybe you didn't undersand what i'm suggesting and that's why we have this argument...

I'm suggesting that a new extend context should be unconditionally created for every unique media query type. Within each such context, `@extend` should work as usual. Extends from different contexts should not be aware of each other.

This behaviour is absolutely predictable, it does not require Sass to do any decision making, it does not require rearranging selectors ""to the first or last item"", and the ""normal `@extend` pattern"" will still make perfect sense here.

---

> Suggesting that it's OK to codify bad

If you consider this behaviour bad, please provide concrete examples and arguments. I provide mine below.

---

> I, and many fellow framework developers, know exactly how @extend works and work hard to optimize our code around its benefits.

Currently Sass does not allow to extend the same selectors inside different media queries (or inside + outside a media query). It just doesn't work, and this fact has no benefit at all.

---

> Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one

I never did such an argument. My argument was: Let users do what is currently impossible. If they want to use it, they can read docs and learn how it will work for them.

If they're neglectful so much that they don't read, then they will hardly notice the difference. @nex3 cares about how users will be surprised by the change, but they are already [misusing](https://github.com/nex3/sass/issues/1038) `@extend` all the time and most of them don't even notice it. Also, how can you be surprised by something you're not doing?

Let me empathize this. Nobody is currently extending same selectors within different media queries because it just doesn't work! Enabling this will not change the output of existing code.

Only people who read that extending same selectors from different media queries has been enabled in Sass 3.3 will start using it. And they will know how it works because they have just read it!

There also will be newbies who will ignorantly use extends in media queries without knowing how it works. But it will not hurt them because:
1. they will see in the browser exactly what they wanted;
2. resulting CSS size will not be larger than the mixin alternative;
3. the suggested behavior does not introduce new collisions of any kind or any unwanted behaviour (other than the fact that when you ask for an extend within a media query then you ‚Äîsurpise!‚Äî get an extend within a media query).

---

> @at-root is more verbose, it's much more predictable

So why do people stumble on it all the time? Parent selector is probably the most misused feature in Sass 3.2. ""Why does my `&-foo` not work"" is the most popular question on Stackoverflow, with ""Why does my `#{&}-foo` produce bloated markup"" being close on the heels. Again, a lot of users just don't notice that their `#{&}-foo` produces bloated markup.

As for `@at-root`, it looks logical for Sass gurus who know Sass inside out, but it is counter-intuitive for normal users. And @chriseppstein's suggestion to consider parent selector's [crazy behavior](https://github.com/nex3/sass/issues/1036) to be normal and to work around it with `.foo, .bar { #{append-to-selector(&, "".baz"")} {a:b;}}` is ridiculous. No sane person (who's not a Sass maintainer/guru) will consider _that_ to be intuitive.

I just don't understand why you let that counter-intuitive stuff pass and ban the possibility of extending from different media queries. It just does not make sense. :(

---

> Merging identical media queries? re-ordering media queries is dangerous and (gasp) unpredictable

The `@extend` directive always merges selectors. So if Sass 3.3 produced a merged media query for each extend, it will not be unpredictable. Also, it will not break anything.

---

> `@extend %half !duplicate;`
> because it is an explicit call, a user will understand that they're changing how it works.

Because doing this without `!duplicate` will still be impossible, this is how users will feel when using `!duplicate`:


",lolmaus,Snugug
456,2013-12-16 22:12:39,"@lolmaus Please keep your language civil. I've edited out your profanity, and further cursing will result in me deleting your comments entirely. These discussions are public and I won't have them taking a tone that makes the community looks like a bunch of squabbling adolescents.

Having `@extend` silently ignore all selectors outside of the current directive context is a bad idea. Not only does it not match the user's expectation of the behavior or the semantics of extend, it does so without any indication of why or in what way it's failing. To a user who (reasonably) expects `@extend` to work across `@media` boundaries, it will look as though some of their styles work and some don't. They'll need to do serious debugging to figure out what's going on and why.

The idea that users already have trouble understanding how `@extend` works, so we shouldn't worry about making it harder to understand is deeply misguided. The fact that `@extend` is already complex indicates that we should do everything we can to make it predictable and straightforward, while preserving the semantics it was designed to provide. You're right that there are plenty of users who have trouble comprehending `@extend`, but there are plenty more who get it. Every time we make it more complicated, the set of people who get it gets smaller.

@Snugug Adding a flag for this behavior is certainly one way to allow a back door for users to be explicit. Feel free to file a separate issue about it where we can discuss it further.
",nex3,Snugug
456,2013-12-17 09:08:24,"@nex3 I fully agree to what you said, there is nothing worse than a machine that does something because a User made a mistake. It should never ignore errors and keep the user thinking he did everything right. Meanwhile the Machine would have to do something that it thought that the user wanted to have. But How should the machine know?
I fully believe in the future of SASS, because the maintainers fight hard to keep up the Quality. As I said above: ""protect the bungling!""
",Hannes-III,nex3
447,2012-08-27 17:38:47,"@nex3 thoughts -- the parsing issues might not be a big deal, but the user issues might be.
",chriseppstein,nex3
442,2013-06-11 02:33:54,"@nex3, @chriseppstein Please let me know if I can help, once you've figured out the syntax and how this would fit in the codebase!
",pwnall,nex3
442,2013-06-11 02:33:54,"@nex3, @chriseppstein Please let me know if I can help, once you've figured out the syntax and how this would fit in the codebase!
",pwnall,chriseppstein
442,2013-12-05 21:41:59,"@nex3 Could you please explain why this is something your not interested in supporting given the context of needing vendor CSS files? Perhaps a reasonable explanation would help those of us who :+1: this PR. 
",jpdesigndev,nex3
442,2013-12-09 21:33:27,"@nex3 Your right, you did mention this previously. Certainly, this seems reasonable enough for me to drop it :)

Thanks for the explanation.
",jpdesigndev,nex3
442,2013-12-09 21:35:19,"@nex3 My offer (to help out with the grunt work once you have the design figured out) still stands :heart: 
",pwnall,nex3
442,2014-12-15 19:42:46,"@nex3 Is there any timeline for the import revamp?

This is a feature I need now, and I see this is an old issue. Any updates? I'm also more than happy to provide help where needed as I'm using sass professionally.
",pthrasher,nex3
441,2012-12-05 10:17:46,"@pwnall but i find this syntax not support relative path:



will be error ~
",windyGex,pwnall
441,2012-12-05 12:50:30,"@windyGex Sorry, but @nex3 has already rejected this proposal in #442
",pwnall,nex3
430,2012-06-24 18:21:24,"@chriseppstein Thanks for the response but the variables.scss and borders.scss already have underscores in their file name. Sass allows you to not have to specify the underscore when importing. But be assured that the only file that is generated is the top level file (eg the file that has the above content) all other files have underscores in their file name
",Integralist,chriseppstein
430,2012-07-01 12:17:22,"@nex3 thank you! that appears to have been the problem :-)
",Integralist,nex3
429,2012-08-24 17:26:06,"Yes, but 



stays



which is the problem @dustinwilson reported and @Snugug confirmed.
",samuelvogel,Snugug
429,2014-08-01 21:23:05,"As @nex3 noted, this issue is still open.
",chriseppstein,nex3
429,2014-08-06 11:36:32,"@chriseppstein Are you planning a solution for this? If so, when can we expect that update?
",Gespinha,chriseppstein
429,2014-08-07 08:46:18,"@chriseppstein The code doesn't work.



generates this:



So the problem is still there. SASS should be able to interpolate @ directives. This would simplify interpolation and dynamic directives generation over a whole project, thus making development much easier and intuitive.
",Gespinha,chriseppstein
429,2014-08-07 16:25:35,"@chriseppstein Is this something complicated (long development) to resolve? Because it is a really annoying obstacle ;)
",Gespinha,chriseppstein
429,2014-08-07 16:38:03,"@chriseppstein Can we expect a solution to this before 3.4? That would be just great! (thanks by the compass snippet btw)
",Gespinha,chriseppstein
425,2013-12-20 03:09:51,"@nex3 
May I ask where you want to modify it specifically? I hope as soon as possible to have a clear argument to specify the output indentation size.
",yisibl,nex3
412,2012-10-30 16:35:32,"@nex3 Forgive my amateur questions, but I appear to be the only one plugging away at this at the moment. 

Does :filename need special handling now? The only way I could patch Compass to work was by using the gsub in your test/sass/plugin_test.rb on sass_filename before it was passed to the options hash 

see here: https://github.com/krisbulman/compass/commit/3de54c895a9f7244332e60ed7a39bc9fc33b55ea

and it doesn't work on multiple imports (as noted by the comment someone posted). 
",krisbulman,nex3
407,2012-07-02 12:44:25,"+1to @alanhogan's suggestion

I have `@include` in a partial that's used by two different stylesheets. I would like to make the mixin noop in one stylesheet, and to generate the appropriate code in the other one.

Right now I'm getting this error `Mixin ""foo-bar"" does not accept a content block.`

My current workaround is to define `foo-bar` mixin with a never-executing conditional:


",sidonath,alanhogan
407,2016-05-09 17:06:43,"@alanhogan want to check if `@content` is passed. How are using this? Would love to see a sample of your code.
",ogbaoghene,alanhogan
401,2012-05-31 17:56:41,"Oh hey...those are links. Guess I should fully explore the page before asking questions. Those should work just fine. Thanks @chriseppstein 
",micahgodbolt,chriseppstein
401,2012-05-31 18:00:30,"@chriseppstein: Sounds very promising. RE `join`: joins two lists together, I should probably have used `implode` as in join a list and return a string, e.g. `implode('.', join((hello), (world), space)) -> 'hello.world'`.

I keep a handy `_functions.scss` around, hopefully lists (and other string extras) can be implemented as pure Sass `@-function`s. Is that the preferred approach when logic allows it?
",StanAngeloff,chriseppstein
401,2012-10-04 14:37:29,"could you plz merge it, I need that functionality :) @chriseppstein thanks for good work!
",industral,chriseppstein
401,2012-12-13 23:53:55,"@chriseppstein any chance to address the comments (especially the deletion of what looks like some critical code in the case switching) so this can get merged?

(also thanks, this is great!)
",jkmaxwell,chriseppstein
401,2013-01-17 16:19:19,"@chriseppstein please address comments
",jkmaxwell,chriseppstein
401,2013-02-09 19:41:09,"@chriseppstein Would be great to see this merged. How can I help? Happy to take on the needed code changes.
",brentd,chriseppstein
394,2012-06-03 19:50:31,"@shaldipur Do you have the `rb-fsevent` gem installed? sass uses pooling by default when there is no adapter installed on the system.
@nex3 Maybe you could add an info message telling people that sass doesn't come with Listen adapters and that they need to install it separately? Otherwise, people could be confused that something went wrong.
",Maher4Ever,nex3
394,2012-06-03 21:14:49,"@Maher4Ever I don't have this one installed, but I recall having installed it when I installed the Listen gem separately.  I still got the same error.
",shaldipur,Maher4Ever
392,2012-05-17 23:39:06,"thx @chriseppstein. its not different than `:not()` ... except that `:except()` implemented in sass could be backward-compatible with CSS2 browsers. ;)
",mikesmullin,chriseppstein
391,2012-05-15 14:51:09,"As per @chriseppstein's Twitter request, I made a gist showing how I'm using extend (very simplified): https://gist.github.com/2702326

All extendable classes are scoped inside the media directives in which they are used.
",rachelnabors,chriseppstein
380,2012-05-12 09:18:08,"@nex3 I'd say that list manipulation may not be very important to every day Sass users, but for those of us building frameworks in Sass, lists are very important and using and manipulating them winds up being a fairly hacky process. More robust list, and for that matter string, functions in Sass would be a great boon to the language.
",Snugug,nex3
380,2012-05-12 10:08:10,"I agree with this sentiment. But I think @nex3's point was simply that the behavior needn't be core to the language. A list function may suffice. 

Hunt & pecked on my iPhone... Sorry if it's brief!

On May 12, 2012, at 10:18 AM, Snugugreply@reply.github.com wrote:

> @nex3 I'd say that list manipulation may not be very important to every day Sass users, but for those of us building frameworks in Sass, lists are very important and using and manipulating them winds up being a fairly hacky process. More robust list, and for that matter string, functions in Sass would be a great boon to the language.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/380#issuecomment-5666997
",chriseppstein,nex3
378,2013-01-27 03:22:46,"@nex3 While it is understood Sass isn't a ""full-fledged programming language"", and that it is targeted at both developers and designers alike, control structures/directives such as `@break` and `@continue` would alleviate the need for deeply nested `@if` blocks. Furthermore, it is understood that this adds complexity, for both the developers (you folks) and consumers (me folks) of the language, but no matter how you slice it, Sass has become a programming language (full-fledged or not). The programming-savvy will reap the benefits from such features, and the rest won't be hindered in any way.
",northborndesign,nex3
378,2015-01-07 07:08:33,"@function getAnimationTime($arrayTime, $index){
  $this_duration:();
  $this_delay:();
  $index: if(($index <= 0), 1, $index);
  @each $elAniTime in $arrayTime {
    //no break, continue or index of loop is supported, bad luck
  }

  $animationTime: $this_duration $this_delay;
  @return $animationTime;
}

@nex3 
break, continue, even index of loop is great.
",IEfucker,nex3
377,2012-05-03 18:24:25,"@nex3 I reinstalled the whole thing and the error disappeared, so it might have had something to do with a crippled Ruby install on my end. Let's forget it for now (as I can't reproduce it anymore).

Also, I don't get the fallback message anymore (so it ""pretends"" it's actually listening the file, but ""listen"" is not installed (as it doesn't get installed with sass, using RubyInstaller on Windows)). This is extremely weird and confusing as sass should at least fallback to polling, instead of doing nothing at all.

Is there anything else I can do to help you resolve this?
",TheDutchCoder,nex3
377,2012-05-04 14:38:23,"@ReinierK Your first problem where Listen crashes is caused because for some reason `ntuser.dat.LOG1` was checked for content modifications, although it's a protected Windows file. I'll see what we can do in Listen to avoid these issues in the future.

I couldn't reproduce your second issue in which sass stops working after the first time. I tried it with ruby 1.9.3-p125 on WIndows 7 SP-1 (64-bit) and Ubuntu 11.10 (32-bit).

@nex3 After looking closely at how Listen gets included in sass, I realized that some dependencies of Listen does not get installed. That's why Listen falls to polling on some machines, I didn't see this the previous time because the Listen-gem is of course already installed on my machines. Listen is dependent on 3 other gems (which work as adapters for different operating-systems). I would suggest either including the Listen gem as a dependency in the `.gemspec` file, or just packing the other dependent gems and adding them to the loadpath, just like Listen is currently included in sass. I'll be glad to help with this process if any help is needed.
",Maher4Ever,nex3
377,2012-05-04 14:56:10,"@Maher4Ever Are you completely sure Listen is included in sass? Because in every clean install I do, after installing sass, there's no listen gem to be found. I first need to install the dev kit and then manually install listen for it to show up (not that it works after that, but still).

I'm a complete Ruby newbee (and honestly enough I don't want to invest a lot of time learning it), so that might be part of the issue here.

Is there any way to see what ""listen"" is doing from the prompt? I have a strong feeling after the initial launch is keeps running in the background and causes the problem where it won't be listening for any other files after 1 run.
",TheDutchCoder,Maher4Ever
377,2012-05-04 17:31:08,"@Maher4Ever Okay thanks for clearing that up for me. I located the listener now, so it should be fine indeed.
There are no ruby processes running after I abort the current --watch, but it could very well be inside a svchost if it's something that's run from a dll, so there's no real way of checking that for me.

I will do a complete re-install today, double check if listen is in the folders (and if I can get it running) and see if I can come up with a scenario that you can reproduce.
",TheDutchCoder,Maher4Ever
377,2012-05-04 22:28:18,"@ReinierK I can't reproduce this on Windows either. I've tried all the scenarios you've mentioned and they all work fine for me. What version of Windows are you running?

It's also worth noting that apparently Windows paths using backslashes were being handled incorrectly. This should be fixed by 3ee3411077b1df9d6747d71ab8bf4ab4506917aa. I don't think this is the source of most of your errors, though.

@Maher4Ever The way Sass used FSSM was to bundle just the core polling and glue code, and allow users to install the full gem if they want to take advantage of native OS facilities.

I'm going to release Sass 3.1.17 some time today, with has @Maher4Ever's fix. If I keep getting reports that it's not working, though, I may have to go back to FSSM :-/.
",nex3,Maher4Ever
377,2012-05-04 23:03:05,"@nex3 I'm having this issue on Windows 7 (64-bit). On Vista (64-bit) sometimes it works, sometimes it doesn't. If it works (polling is used), polling takes anywhere between 10 and 30 seconds, which (for me) is not good enough to work with.
",TheDutchCoder,nex3
377,2012-05-04 23:10:37,"@nex3 Ok, I understand what you are saying. After all, the `force_polling` option was added for these usecases :)

I've spent quite some time today looking at how sass works and I almost [rewrote](https://github.com/Maher4Ever/sass/commit/03a68aad6b758960adece5fbc8aaf5782e40ba18) how the listener is created in sass. It's simpler now, but also works. The plugin didn't account for new files being added, so no callbacks were registered for them; hence why new directories didn't get picked up. 

Also, there is no need to keep a list of files in the plugin as Listen already does that. I didn't send a pull request because 2 tests fail ( because of [this line](https://github.com/Maher4Ever/sass/commit/03a68aad6b758960adece5fbc8aaf5782e40ba18#L0R191) ). I disabled the OS-specific plugins and thus there is no need for any extra dependency.

I'm still not familiar with sass internals, so please take a look at it and maybe you can adapt it for a better integration with Listen.
",Maher4Ever,nex3
377,2012-05-05 00:05:34,"@Maher4Ever Thanks for the change; I've made a few edits and merged it in.

@ReinierK I'll be releasing this as 3.1.17 shortly.
",nex3,Maher4Ever
377,2012-05-05 01:50:19,"@nex3 Thanks so much, after a quick test I found it's been working (with listen, no polling), although the actual updating is still a little slow (between 5 to 10 secs for me)
",TheDutchCoder,nex3
377,2012-05-05 12:00:11,"@nex3 Don't worry about it, I'd like to see this work well for everyone as I love sass! ;-)
It takes long to both update the command line and the file. In fact, as soon as the command line updates, the file itself updates immediately as well, so it's not a visual lag on the prompt, but ""real"" lag with updating.

I know the default latency is 0.5 seconds, but the update now takes about 3 seconds (give or take, sometimes it's faster, sometimes slower).

I'm a little worried about the CPU load still, on my Core Duo it takes 75% of both cores when watching. I know nothing about ruby, but to me that seems wrong, or at least inefficient (even for a 0.5 second latency).
",TheDutchCoder,nex3
377,2012-05-06 13:49:27,"@nex3 @Maher4Ever Okay thanks guys, then the first step has been taken successfully (getting sass to work again) and I'll try to help out Listen as much as I can!
",TheDutchCoder,nex3
377,2012-05-06 13:49:27,"@nex3 @Maher4Ever Okay thanks guys, then the first step has been taken successfully (getting sass to work again) and I'll try to help out Listen as much as I can!
",TheDutchCoder,Maher4Ever
374,2012-05-06 20:38:45,"@petebrowne The reason to omit properties that are set to null, an empty string, or an empty list is that it optimizes a very common case of omitting a property that not explicitly passed without a bunch of `@if` boilerplate. It's also not obviously a conceptual error because if you set a property to nothing has a very similar feeling to not setting it.
",chriseppstein,petebrowne
374,2012-05-11 22:25:42,"Awesome! @chriseppstein, @nex3 Thanks for the help & suggestions
",petebrowne,nex3
374,2012-05-11 22:25:42,"Awesome! @chriseppstein, @nex3 Thanks for the help & suggestions
",petebrowne,chriseppstein
366,2012-08-27 21:42:05,"@Snugug Note the arguments are more like CSS making it much more awesome when doing things like vendor prefixing.


",scottkellum,Snugug
366,2012-08-27 22:09:23,"@chriseppstein Because I'm not setting a property and the semicolon is the property syntax. That syntax, at a glance, would look to me like a property and therefore sets up my mental model to expect a a single output that will look similar to the input. CSS3 prefixing mixins and Compass background mixins make sense this way, but to me, thinking about the projects I'm a part of, grid and media query mixins don't make sense in this snytax.

@MoOx And I don't like them there either.
",Snugug,chriseppstein
366,2012-08-27 23:26:20,"@Snugug in the output you're not setting a property, but conceptually, you are in a way. In some sense, this code example is saying `.foo` has a property of `grid-span` with a value of `1, 2`. Where the property is implemented by you (or a library) by re-writing into other properties and potentially sub-selectors.
",chriseppstein,Snugug
366,2012-08-27 23:48:46,"Right, I don't like that mental model and I think that's potentially confusing for new users. It's actually something I specifically dislike about Stylus

On Monday, August 27, 2012 at 7:26 PM, Chris Eppstein wrote:

> @Snugug (https://github.com/Snugug) in the output you're not setting a property, but conceptually, you are in a way. In some sense, this code example is saying .foo has a property of grid-span with a value of 1, 2. Where the property is implemented by you (or a library) by re-writing into other properties and potentially sub-selectors.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/366#issuecomment-8074533).  
",Snugug,Snugug
366,2012-09-28 20:49:04,"After having this sit in my head for a few weeks, I like the `++mixin: argument` syntax more than I dislike it. I'd love to see this moved on and implemented as soon as there's some dev time to do so and assuming @nex3 and @chriseppstein are still on board.
",Snugug,chriseppstein
366,2013-07-29 19:02:48,"@Snugug Nothing happened to it. It's still on the table.

@hcatlin 

> What does it look like if there are no args?

I consider this a sugar for a subset of the `@include` syntax. I don't think it should support content blocks, for example. As such, I'm not particularly worried about the no argument version. I think, in most cases, placeholders should be used when no arguments are desired. I'm ok with making doing the wrong thing harder here.

> But, maybe my bigger concern is the use of a comma separated list after the "":"" If we want it to look like a CSS attributes, commas don't make too much sense then.

It's true that CSS prefers spaces to separate arguments and comma to separate multiple values for the same property. But I don't see a way around this and this issue would exist in the other forms that use colon instead of parens. And getting rid of the parens is a key goal for me here. I really do want to make things look more like properties.

> Also, combining those looks like an operation... ""+="" or ""+:"".. especially with the spacing how you have it.

Yes, that was actually the inspiration. It shows ""adding into"". except the thing being added into is the ruleset, not the mixin.

> my-mixin+: arg1, arg2;
> my-mixin +: arg1, arg2;
> my-mixin+: arg1 arg2;

All of these are fine, as long as there is no space between `+` and `:`.

> What about non-comma delim, and just a + instead of the "":""?

Not sure why, but this idea doesn't sit well with me. It just doesn't seem to have any analog with existing code. But I think it would be ok from a parsing perspective.
",chriseppstein,Snugug
366,2013-08-01 23:39:42,"After waiting a couple days and sleeping on it... I'm growing fond of +:

On Mon, Jul 29, 2013 at 12:02 PM, Chris Eppstein
notifications@github.comwrote:

> @Snugug https://github.com/Snugug Nothing happened to it. It's still on
> the table.
> 
> @hcatlin https://github.com/hcatlin
> 
> What does it look like if there are no args?
> 
> I consider this a sugar for a subset of the @include syntax. I don't
> think it should support content blocks, for example. As such, I'm not
> particularly worried about the no argument version. I think, in most cases,
> placeholders should be used when no arguments are desired. I'm ok with
> making doing the wrong thing harder here.
> 
> But, maybe my bigger concern is the use of a comma separated list after
> the "":"" If we want it to look like a CSS attributes, commas don't make too
> much sense then.
> 
> It's true that CSS prefers spaces to separate arguments and comma to
> separate multiple values for the same property. But I don't see a way
> around this and this issue would exist in the other forms that use colon
> instead of parens. And getting rid of the parens is a key goal for me here.
> I really do want to make things look more like properties.
> 
> Also, combining those looks like an operation... ""+="" or ""+:"".. especially
> with the spacing how you have it.
> 
> Yes, that was actually the inspiration. It shows ""adding into"". except the
> thing being added into is the ruleset, not the mixin.
> 
> my-mixin+: arg1, arg2;
> my-mixin +: arg1, arg2;
> my-mixin+: arg1 arg2;
> 
> All of these are fine, as long as there is no space between + and :.
> 
> What about non-comma delim, and just a + instead of the "":""?
> 
> Not sure why, but this idea doesn't sit well with me. It just doesn't seem
> to have any analog with existing code. But I think it would be ok from a
> parsing perspective.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/366#issuecomment-21743137
> .
",hcatlin,Snugug
366,2015-01-03 17:18:22,"I think +myMixin() syntax is the clearest. With parens so as to disambiguate between a mixin invocation and the sibling selector. @chriseppstein could you make the call on this so it can move forward?
",geddski,chriseppstein
366,2015-01-03 18:46:01,"The problem, as stated by @chriseppstein [earlier in](https://github.com/sass/sass/issues/366#issuecomment-7559687) [this thread](https://github.com/sass/sass/issues/366#issuecomment-7560114) with `+my-mixin` (or `+ my-mixin`) is that it's ambiguous with the adjacent sibling selector. The two proposed syntaxes that have been discussed (besides transparent mixins like Stylus, which @nex3 believes is [""‚Ä¶a pretty grievous misfeature in Stylus.""](https://github.com/sass/sass/issues/525#issuecomment-8995033) ) are `++my-mixin` and `my-mixin +:`
",Snugug,chriseppstein
363,2012-05-09 14:47:25,"@chriseppstein To reference your comment in the previous issue (#343), you state that the keywords are used to reduce space. If SASS were really trying to conserve the number of bytes it outputs, shouldn't it actually convert #ffffff and #000000 to #fff and #000 since those are each 2 bytes less rather than their keywords?

In any event, this is still something that needs to be a configuration option. If you are supporting IE and want to output background gradients using DXImageTransform.Microsoft.gradient, you must pass it a hex color. See http://msdn.microsoft.com/en-us/library/ms532997(v=vs.85).aspx for more information on it. Your own Compass has a hack for this, which I think is the wrong way to go about things. https://github.com/chriseppstein/compass/blob/stable/frameworks/compass/stylesheets/compass/css3/_images.scss#L87
",shaneriley,chriseppstein
363,2012-05-09 20:47:49,"@shaneriley I agree with Chris, configuration is not the correct solution for IE filters. It would put you into a situation where your stylesheets would only work correctly with a certain configuration, which is not something we want. `ie-hex-str` is a pretty good solution, given the awfulness that is IE.

@chriseppstein We don't fully parse simple static properties for performance reasons. If we did, parse time for stylesheets would increase dramatically. It's possible it's worth the tradeoff in compressed mode, but I'm skeptical. I think it would just register as ""my stylesheets suddenly take a lot longer to compile"" for many people.

At some point we may want to introduce a `-O` flag to control the optimization/time tradeoff explicitly.
",nex3,chriseppstein
363,2012-05-09 20:50:07,"@nex3 I'll do a perf test to see how much cost comes from that change to compressed mode for our app. If it's small enough (~1-2%) I think it's worth it.
",chriseppstein,nex3
363,2013-07-01 21:18:09,"@chriseppstein The problem is that changing the color names breaks things in some cases. 

I have to maintain a fork of sass (https://github.com/joevandyk/sass/commit/e48a18e247819b70f4524a56629c3ca5397b0733) just for this reason (as I want compressed output, but with the colors as I enter them).
",joevandyk,chriseppstein
363,2014-02-15 01:50:07,"@nex3 there an eta of when this will get released?
",joevandyk,nex3
363,2014-12-02 17:46:16,"@nex3 any chance that there is a similar force function for rgb? can't seem to find it in the docs.
",adamward84,nex3
363,2014-12-03 04:50:17,"You know the code is broken whenever developers ( users ) are looking for
workarounds to your ""feature"". This makes no sense to me at all.

On Tuesday, December 2, 2014, adamward84 notifications@github.com wrote:

> @nex3 https://github.com/nex3 any chance that there is a similar force
> function for rgb? can't seem to find it in the docs.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/363#issuecomment-65272162.
",justnorris,nex3
363,2014-12-04 17:36:44,"Aaaaaaand, I'm a lazy idiot. I just wrote my own force-rbga based on the force-hsl method above from @nex3. Here it is for anyone else who wants to be lazy like I did:


",adamward84,nex3
362,2012-04-27 06:48:48,"@farneman what is your system setup?
@nex3 Listen isn't a dependency of sass?
",thibaudgg,nex3
362,2012-04-27 18:37:34,"@nex3 So would the difference in which Listen is used be why the `WARNING: Listen has fallen back to polling, learn more at https://github.com/guard/listen#fallback.` message is not showing for me after I installed the Listen gem separately?
",farneman,nex3
362,2012-04-27 20:11:32,"@Maher4Ever Thanks for looking into this.
",nex3,Maher4Ever
361,2012-04-29 19:07:56,"What do you think @nex3 @chriseppstein? Should `1 + null` return `1` or raise a SyntaxError?
",petebrowne,nex3
360,2012-08-08 18:25:23,"@nex3 it seems like the work done for #286 would probably enable this. I give it a +1.
",chriseppstein,nex3
353,2012-04-16 03:37:00,"@nex3 Do you have a list of what needs to be supported? I'll be glad to draw up a proposal.
",jleclanche,nex3
353,2012-04-25 02:15:28,"@nex3 Any comments on the proposal?
",jleclanche,nex3
353,2013-05-29 16:16:54,"@chriseppstein Understood. Should new proposals be appended here or filed as a new issue?

Did you know that each time you use `@import` in an `.scss` file, Sass actually copies the contents of the linked stylesheet to the file after compilation? This means that if you use that same import statement more than once, even in different sass files, you get duplicate CSS? This creates a TON of duplicate CSS and creates incredible bloat.

I'm just surprised that functionality like `@import`, which is so core to the Sass experience, has this kind of major side effect. I hear what you're saying about reaching an agreement, but **in the meantime** shouldn't there be at least be a temporary workaround to limit the problems this issue causes?

Maybe I'm using `@import` wrong or I'm ignorant of work-arounds/fixes for this. Please let me know how you're dealing with this issue in your own projects.
",zakdances,chriseppstein
353,2013-05-29 16:33:56,"Thank you @chriseppstein for that article link. I've been really struggling with CSS organization in larger projects lately so this is honestly helps a great deal.

For anyone else reading this, there's also a `node.js` library called [clean-css](https://github.com/GoalSmashers/clean-css) which [added a feature](https://github.com/GoalSmashers/clean-css/issues/29) a few months ago to remove duplicate css. It can be used as a [grunt task](https://github.com/gruntjs/grunt-contrib-cssmin).
",zakdances,chriseppstein
349,2013-08-02 18:17:41,"The site is maintaining its unique and feminine branding, while removing the possible-to-see-as-ditzy character from the logo. This issue wasn't the primary reason for redesigning the logo, but redesigning the logo gave the Sass design team opportunity to address these concerns while they were at it. @nex3, @hcatlin, @jina, and the Sass design team have already taken care of this. It's a win-win ‚Äî everybody has already won.

The Sass community needs to be inclusive, and if there are easy steps to make it more inclusive without any negative side effects those steps should be taken. When someone points to code that works but with trivial effort can be re-written to be more elegant, we re-write it. That doesn't mean the original code was inherently wrong or bad, and all those who used and enjoyed it are shamed by proxy. It just means together we've found a better way to write it.

@chriseppstein, I appreciate your metaphor.
",robwierzbowski,nex3
349,2013-08-02 18:17:41,"The site is maintaining its unique and feminine branding, while removing the possible-to-see-as-ditzy character from the logo. This issue wasn't the primary reason for redesigning the logo, but redesigning the logo gave the Sass design team opportunity to address these concerns while they were at it. @nex3, @hcatlin, @jina, and the Sass design team have already taken care of this. It's a win-win ‚Äî everybody has already won.

The Sass community needs to be inclusive, and if there are easy steps to make it more inclusive without any negative side effects those steps should be taken. When someone points to code that works but with trivial effort can be re-written to be more elegant, we re-write it. That doesn't mean the original code was inherently wrong or bad, and all those who used and enjoyed it are shamed by proxy. It just means together we've found a better way to write it.

@chriseppstein, I appreciate your metaphor.
",robwierzbowski,chriseppstein
349,2013-08-02 19:46:04,"I think everything that needs to be said about this has already been said. I encourage anyone who's legitimately interested in understanding more about sexism in tech to go read any of the many excellent blog posts and articles written by women in the industry on the subject. This issue, however, is not the place to discuss it.

Lacking the ability to close comments on this issue, I'll just delete any further comments not by @chriseppstein, @hcatlin, or myself.
",nex3,chriseppstein
349,2013-08-02 20:32:31,"Love the new logo, and i want to say thank you very much to @chriseppstein, @hcatlin, and @nex3 for listening. (And @hcatlin, thanks even more for the story about why you were going for a ""feminine"" vibe in the first place! As a woman in tech i really do appreciate the intent; the execution was just frustrating. ""Woman on telephone in '50s/'60s clip art style"" totally reads as ""secretary"" to me. (cf these actual retro images: http://thehose.net/wp-content/uploads/2012/03/secretary.jpg and http://www.illustrationsof.com/royalty-free-phone-clipart-illustration-1049789.jpg) And as noted in my bug report, there are just So Damn Many reminders to women that we ""don't belong here"" in the industry, so it is easy to feel excluded by little things that weren't intended that way.)
",adrienne,nex3
349,2013-08-02 20:32:31,"Love the new logo, and i want to say thank you very much to @chriseppstein, @hcatlin, and @nex3 for listening. (And @hcatlin, thanks even more for the story about why you were going for a ""feminine"" vibe in the first place! As a woman in tech i really do appreciate the intent; the execution was just frustrating. ""Woman on telephone in '50s/'60s clip art style"" totally reads as ""secretary"" to me. (cf these actual retro images: http://thehose.net/wp-content/uploads/2012/03/secretary.jpg and http://www.illustrationsof.com/royalty-free-phone-clipart-illustration-1049789.jpg) And as noted in my bug report, there are just So Damn Many reminders to women that we ""don't belong here"" in the industry, so it is easy to feel excluded by little things that weren't intended that way.)
",adrienne,chriseppstein
349,2013-10-15 01:49:55,"@nex3 I love it! Thanks for letting me know! :) And thanks again for listening.
",adrienne,nex3
338,2014-07-04 05:10:06,"No I would NOT support deprecating and removing nested, expanded and compact output styles then. Those are features which are already in the library, and the sight of seeing them sacrificed on the altar of our prized _multiline silent comments_ will be a sad sight indeed.

Anyways, for me, (any many many more devs) this issue of commenting-out a block of scss with each line having a `//` is taken care of by SublimeText and it's Sass plugin. One keystroke is all it takes.

Also, even though I too have wished for something along these lines in the past,  I feel @nex3 is right in pointing out that there are enough options to cover all needs.

Just because I can make a nice, fancy french-window in my toilet doesn't mean I'll go ahead and do it.
",kumarharsh,nex3
337,2012-04-06 20:42:09,"@nex3 Do you still need the sample app?
",yfeldblum,nex3
337,2012-06-04 13:12:08,"@nex3, I have an app up at https://github.com/lgebhardt/simple_bs_app_demo. Sorry it took so long.
",lgebhardt,nex3
337,2012-06-20 17:06:07,"@nex3, what platform did you test this on? I was running it on a Windows box. I'll test the same code on mac or linux soon.
",lgebhardt,nex3
337,2012-06-22 20:30:20,"I tested on Linux. I don't have a Windows box easily available to test on,
but I don't think the OS would affect this.
On Jun 20, 2012 10:06 AM, ""Larry Gebhardt"" <
reply@reply.github.com>
wrote:

> @nex3, what platform did you test this on? I was running it on a Windows
> box. I'll test the same code on mac or linux soon.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/337#issuecomment-6460730
",nex3,nex3
336,2016-02-10 21:16:52,"Is the [example](https://github.com/sass/sass/issues/336#issuecomment-21310219) posted by @Snugug no longer valid?

When I run it under `node-sass`, the `$foo: $foo + 1` assignment has no effect. Pasting it into [sass-meister](http://www.sassmeister.com/), I get the same result - assignment doesn't work.

However, paste it into [jsbin](https://jsbin.com) and it works without problems.

What gives? Is this supposed to work or not?

If not, when did this change? I have a [grid mixin](https://gist.github.com/mindplay-dk/6795939) that seems to have stopped working - and as far as I can figure, it can only be implemented using this feature?
",mindplay-dk,Snugug
334,2012-03-26 03:03:43,"@chriseppstein thanks for the quick reply. I understand your rationale, and I can't say I disagree with you. Having `$font-size` and `$font_size` in the same file isn't exactly a best practice.

However, in my case, I was converting someone else's code and using the hyphens as a way to separate my variables from his, and since I wasn't expecting them to cause naming collisions, it took me forever to finally figure out that this was the root of the issue.

Perhaps explicitly stating this somewhere [in the docs](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#variables_) would prevent this from happening to others.
",philipwalton,chriseppstein
328,2012-03-21 22:20:54,"@nex3 Are you a Python guy? ;) Just kidding.

Anyway, what you describe is pretty much what Python has implemented.



But at least, they have it codified. If you like that behavior we shell go with that but still, we have to raise a few more exceptions and be more explicit about how arguments can be passed in.

I'm raising this issue now because I'm about to work on #138 and it involves changes to arguments handling.

Still I'm in favor of of my proposition because it's more flexible. It may be harder to read but let's see where functions are used (called). It's either inside frameworks, or in user stylesheets. Either way those calls are maintained (mostly) by the same people who wrote them. If they've managed to write it and get result they wanted, they probably will be able to read it too. Also everyone can decide for himself if he wants to use it or not.

Either way this is non-breaking change. Sure, only for code that didn't abuse syntax quirk for no gain.

PS: you can ping me on IRC if you think that can be better place for discussion.
",pointlessone,nex3
327,2012-03-21 13:33:37,"@chriseppstein Not that much, just under 100ms on my Compass-based stylesheets. That's very small portion of the overal time and can be dismissed as a measurement error. I assume, that's because most funcalls don't use named arguments.
",pointlessone,chriseppstein
326,2013-08-24 06:40:25,"I found this a big surprise, too! I've been using the indented syntax every day for at least a year--I'm not an expert on the edge cases of the language, but a competent user I'd say I must be.

Apparently inline comments are not supported, or intended to be supported. I've been using them all along and had no idea. The new -pre version of sass that supports source maps causes some failures on inline comments that previously used to work, this is how I found out.

Here is the note I raised, and @nex3 pointing out that it's not really intended to be used.
https://github.com/nex3/sass/issues/895

Just a heads up for all who may come after!
(though reliable inline comments would be really extra special... :)
",SimplGy,nex3
326,2013-08-26 16:44:39,"@nex3 I think this is a bug.
",chriseppstein,nex3
324,2013-07-22 15:18:08,"@cimmanon 

What version of Sass are you using?

I've tried two different online compilers ( http://sass-lang.com/try.html and http://sassmeister.com/gist/5260832 ) and they both give the same incorrect result.

Also, @nex3 didn't just confirm this behavior but also stated that it was intentional. See https://github.com/nex3/sass/issues/856 .
",jslegers,nex3
310,2012-03-21 13:12:32,"@nex3 In the past you have rejected this functionality claiming that it makes optimization harder. Do you still feel this way? This functionality would enable the dynamic construction of variable names -- not a feature that exists in sass functions.
",chriseppstein,nex3
310,2012-08-08 18:36:31,"@nex3 can we get this in 3.2?
",chriseppstein,nex3
310,2012-08-11 01:36:24,"talked to @nex3 about this, and I agree that ruby functions shouldn't be able to do things that sass functions can't. This would allow access to local variables in the calling context and also setting variables in the local scope.
",chriseppstein,nex3
310,2012-08-13 19:47:42,"@Snugug this use case is covered by #286.
",chriseppstein,Snugug
310,2012-08-13 22:15:41,"@jede any interest in taking another whack at this?
",chriseppstein,jede
310,2012-08-14 12:18:32,"@chriseppstein sure! So the problem is, if I understand @nex3 correctly, that ruby methods should not be able to access everything? It would be really good with an example of this (i.e. something this would allow that you cannot do with sass).
",jede,nex3
310,2012-08-14 12:18:32,"@chriseppstein sure! So the problem is, if I understand @nex3 correctly, that ruby methods should not be able to access everything? It would be really good with an example of this (i.e. something this would allow that you cannot do with sass).
",jede,chriseppstein
310,2012-09-09 17:32:11,"This should work now. I added tests to cover the case @nex3 provided, please have a look and see what you think! Don't know why @travisbot hasn't commented, but the tests pass: http://travis-ci.org/#!/nex3/sass/builds/2377423
",jede,nex3
309,2012-03-05 22:10:02,"One must be very careful, duplicated properties are basically the only approach to x-browser support. How can we know this isn't because `blue` isn't supported and `red` is the fallback value?

I think @nex3's idea is to use mixin boundaries to decide whether to keep or not, but this would break if the ""duplication"" was actually building on the concept of the previous mixin call, not overwriting it.
",chriseppstein,nex3
309,2012-03-05 22:19:06,"@necolas Your mixin example is very close to the ""ignore overridden declarations"" example in #116.

@chriseppstein I think using `!replace` removes some substantial benefits of this approach. Part of the goal is that it can work together with other optimizations to remove unnecessary properties that the user may not realize are redundant. `!replace` relies on the user to effectively do that work themselves.

I think a better way to avoid the issue would be to make cross-context fallbacks explicit. I think they're a much less frequent use case. A solution to #249 might provide an answer here.
",nex3,chriseppstein
292,2012-02-27 21:03:35,"I dislike the idea of a `@var` keyword. The distinction between when to use `var` and when not to is unclear to many Javascript programmers, even those who have experience with scoping issues in other programming languages. Adding it to Sass seems unlikely to promote comprehension.

I'm closing this issue since the specific proposal is rejected. @chriseppstein, feel free to open a new issue to discuss the broader issue of how to bring our variables in line with the CSS proposal.
",nex3,chriseppstein
290,2012-02-26 07:48:07,"@chriseppstein We aren't currently parsing `@-moz-document`; this is hitting the directive fallback code.

I think we should actually support the `@-moz-document` syntax, as we do for `::-moz-any` and other vendor-specific syntaxes.
",nex3,chriseppstein
290,2012-02-26 19:04:53,"@nex3 I thought we didn't parse unknown directives and just consumed everything to the first `;` or `{` as a string.
",chriseppstein,nex3
290,2012-02-27 20:48:31,"@chriseppstein That heuristic would fail when encountering quoted strings or other grammar edge cases. The fallback behavior for an unknown directive is to try to parse the tokens after it as a selector or, failing that, as an expression.
",nex3,chriseppstein
289,2012-02-22 21:32:53,"@nex3 ok, I've understood the arguments against `prefix&` case, but don't the `&postfix` is different? There are a lot of techs that are heavy class-based due to rendering speed optimizations, so having such feature would be great.

Also, why other preprocessors do this and you can't :)
",kizu,nex3
286,2012-04-13 23:38:36,"@chriseppstein @nex3 - any thoughts on that? It's a blocker for the next Susy update, so it would be good to know if and when it might land. Thanks!
",mirisuzanne,nex3
286,2012-04-13 23:38:36,"@chriseppstein @nex3 - any thoughts on that? It's a blocker for the next Susy update, so it would be good to know if and when it might land. Thanks!
",mirisuzanne,chriseppstein
286,2012-09-12 16:08:00,"@nex3 this seems really fiddly. Given:



I would expect the output



However I end up with:



Seems broken or at-least doesn't do what I want it to do :(
",phillip-haydon,nex3
285,2012-02-22 00:45:54,"@chriseppstein Yes I know the normal way and in most cases you will also become a target. But I think the idea makes the mixin maybe a little more flexible - than they are now :)

You write both of which can be in the mixin itself Ampersand depend on the class, the problem now is that my mixin it always presupposes a selector.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  &.mixinclass
    height: $height
    width: $width
    ....

.container
  +myMix(20px, 30px)
</code></pre>


So I go and write to the mixin, take the ampersand out again and the mixin can load it into the root of the stylesheet.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  .mixinclass
    height: 20px
    width: 30px
    ....

+myMix(20px, 30px)
</code></pre>


Next time I will hang the mixin to a child selector, so I write my mixin to return.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  & > .mixinclass
    height: 20px
    width: 30px
    ....

.container
  +myMix(20px, 30px)
</code></pre>


As I said, there is no problem to do that, I can also write the mixin, which I add conditionals to the different types as you can attach a mixin, simply can control by (@if). This may vary depending on the complexity mixins also be a good long mixin. Adjacent selector, Child Selector Silbing, and so on.

But as written, it goes without :)
",gisu,chriseppstein
282,2012-02-20 20:06:03,"@nex3 I think there are some compelling use cases for refining a class definition by element type. And while I understand the syntactic advantages of treating `&` like an element, I'm left wondering if we can do better. This is just one of a number of compelling use cases that can't currently be supported by the `&` selector. For instance, Inserting a selector sequence just before the selector's parent. Taken together, it seems like there's an opportunity for improvement here.
",chriseppstein,nex3
279,2014-10-31 15:07:28,"I agree with @Snugug. IMO, dynamic imports are essential for flexible theming.

I'm thinking especially of the following feature :

![File structure](http://i59.tinypic.com/5nodph.png)



Another obvious use case would be polyfilling (https://github.com/sass/sass/issues/739).
",jslegers,Snugug
277,2012-02-14 20:02:29,"@SimpleAsCouldBe It doesn't actually produce invalid CSS, as far as the grammar is concerned; `linear-gradient top, rgb(255,190,75) 0%, ...` is a valid property value.

@chriseppstein There are some difficulties in making this an error. We can't just say ""no putting comma lists in space lists"" since we don't want `@each (foo, bar) (bip, bop) (whiz, bang)` to randomly fail. We could make the error appear at stringification time, but I'm not sure it would be particularly clear.

I'm tempted to say that because this syntax isn't valid in CSS anyway, it's not worth worrying too much about how Sass handles it.
",nex3,chriseppstein
277,2012-02-14 20:42:12,"@SimpleAsCouldBe To elaborate on Chris's reply, Sass tries hard to avoid having specific knowledge of which properties and values exist in CSS and how they're used. It doesn't know that `-webkit-linear-gradient` is a function as opposed to, say, a border type like `solid`. This allows it to be very flexible when adapting to changing CSS standards, but it does mean we can't detect cases like this where you're doing something syntactically valid but semantically meaningless.

@chriseppstein I agree that good error messages are valuable, but I'm having a hard time figuring out how to generate a helpful error message for this case without making other cases more obscure. Since this is (I assume) a pretty uncommon error case, I'm not too worried about getting a great error for it.
",nex3,chriseppstein
260,2012-02-01 10:32:15,"Sorry @nex3 my bad, I did the example by hand, just for the sake of proving what I meant. But your example has the same issue for me. Because the rule I extended was only the <code>p</code> rule and not <code>.my-other-rule-context p</code>. I didn't do <code>@extend p .my-other-rule-context</code> (although I know this currently isn't possible).
",hefler,nex3
258,2012-01-30 01:54:08,"@chriseppstein Could you please explain why this is part of the design?
",twoolie,chriseppstein
258,2012-02-01 04:44:37,"> I'm going to close this issue because it certainly won't change on its own.

@nex3 does this mean it won't change without someone pushing the change, or it won't change until the language changes as well?
- If you need someone to make the changes and give you a pull request, I volunteer.
- If no change is to be made, can someone please add this to the documentation on variable scoping?
",twoolie,nex3
255,2013-11-25 14:02:02,"@Snugug just to be sure we aren't talking at cross purposes. Is this what you mean: http://codepen.io/benfrain/pen/djEhf

?

I don't _seem_ to have any issue in Chrome/Safari/Firefox




",benfrain,Snugug
249,2012-03-17 12:59:57,"@nex3 I don't really know what makes most sense. Semantically, you could argue that & means ""this element"", and &width means ""this element's width"", especially since you would never have (afaik) a case where, currently, you would write &foo or &-prefix-foo.

However, and this is just a random thought because I don't know if it's already possible in sass, we could expand this to include more properties. A function might make more sense.



`prop(element, property[, default])` where element can be &. This might be doable with syntax but unsure how. Maybe &->color, #foo->color, (#foo input)->color but sounds weird, and introduces a new selector.
",jleclanche,nex3
241,2012-01-27 08:12:26,"@nex3 I see your point about some kind of intelligent re-ordering being a problem. But would there be any way of allowing this so the developer has control over where the rules are placed?

So throughout the file you would be able to say something like `@target handheld {display: inline}` and then at the end of the file you would be able to then call all the rules in a way like this:



Obviously you may get times when rules conflict, but that would be no different from coding the CSS manually.
",MattyBalaam,nex3
241,2012-08-13 22:34:39,"I really don't understand what objections to `@target` that @nex3 has other than it's possible to do this in other ways -- seeing as how all of Sass can be done in other ways.
",chriseppstein,nex3
241,2012-08-16 00:57:02,"@nex3 it's not the same. The differences:
1. additional s[ac]ss files must be created and configured
2. The behavior of `@target` is to hide all the things not in the target. So the code would actually have to be:


1. It seems likely that `@target` would be have better performance.
",chriseppstein,nex3
241,2012-08-16 11:55:16,"Thanks for chiming in Rich, but I think that actually is the opposite of what we're looking to do.

This is a language level change, so an end user shouldn't need to write an @each statement anywhere; the idea is to just wrap a piece of code and, at a language level, have it generate a separate stylesheet with just that wrapped code, so no need for the @each, and more importantly, we don't want to flat out @import all of style, we want separate stylesheets with desecrate code. If we take the @each out, then the `@as` directive as you've proposed doesn't seem to allow us to specify just what selectors from `#foo` or from `@media` we want to use; it seems to be all or nothing. I feel is may be worse from a user's perspective as the control for it is a bit clumsy; where does it start? Where does it end? Does it carry through partials? What if I want some code to go to all stylesheets, others to go to just one of the children sheets? I think a wrapped solution, either being `@target` or the `@if` is a better way to go, and feel that `@target` is the best of the three.

While I'm here though, a suggestion for either solution: the ability to specify that the output should be put in more than one spot, so something like this:



or



Also, funny, now that I just wrote out those two, I would really hate to write out the `@if` for everything, really does hurt my mental model and could lead to some very easy to get wrong syntax errors expecting to be able to write a full `@if` statement. I now much prefer `@target`.

@nex3, with `@if`, what would the expected output of the following be? If we add onto `@if`, what happens here?



Does `$target` become the first reserved variable name in Sass? What happens if someone creates a `$target` variable? Will they get an error at all? If so, where? At variable creation or at use? Should it error at all? Maybe they just want to use the variable namespace `$target` without creating separate stylesheets? What happens if an existing mixin/function has `$target` as an argument? What will happen with all of those?

Can you chain target if statements with non-target if statements? If so, what happens when you do; does it only print if the entire if statement evals to true as per normal, or will it generate the the stylesheet than continue evaluating the if statement?

Essentially, the question is, what happens when you add new and unexpected functionality into preexisting mental models? Wouldn't it be better to create a new mental model for this truly new functionality?
",Snugug,nex3
241,2012-08-20 17:42:50,"@Snugug I'm not particularly swayed by the idea that `@if` statements are harder to write or less semantic. You could always just write a mixin to make it more clear:



There's also no reserved variable names or other magic going on. There would just be a command-line argument to Sass that allowed you to set a global variable (`$target`) externally. It would function in every way like a global variable, including being assignable from local scopes.

@chriseppstein The differences you bring up are more compelling, although I'm not entirely sure why you'd want the separate target stylesheets not to have the contents from the primary stylesheet.

@scottkellum I don't understand what you mean by ""isolating styles across partials."" Can you give a more concrete example of how this was awkward?
",nex3,Snugug
241,2012-08-20 17:42:50,"@Snugug I'm not particularly swayed by the idea that `@if` statements are harder to write or less semantic. You could always just write a mixin to make it more clear:



There's also no reserved variable names or other magic going on. There would just be a command-line argument to Sass that allowed you to set a global variable (`$target`) externally. It would function in every way like a global variable, including being assignable from local scopes.

@chriseppstein The differences you bring up are more compelling, although I'm not entirely sure why you'd want the separate target stylesheets not to have the contents from the primary stylesheet.

@scottkellum I don't understand what you mean by ""isolating styles across partials."" Can you give a more concrete example of how this was awkward?
",nex3,chriseppstein
241,2012-08-20 17:47:42,"@nex3 because, in this case, you serve both stylesheets to the browser.
",chriseppstein,nex3
241,2012-08-20 18:20:26,"@nex3 See yepnope.js, it's a very common strategy.
",chriseppstein,nex3
241,2012-08-20 20:21:54,"@nex3 if there is only one dimension then the approach you've identified makes sense and is most optimal. But if there are two or more dimensions the approach falls apart as you have to permute all the dimensions in order to have a stylesheet to load that matches the exact client needs.
",chriseppstein,nex3
241,2012-08-20 20:28:36,"@Snugug My suggestion wasn't to load two stylesheets, one basic and another basic + IE8; rather, it was to only load the basic + IE8 stylesheet on IE8.

@chriseppstein I take your point. That would indeed be difficult to deal with in my suggested approach.

All right, I'm sufficiently convinced that `@target` is the best way to handle this use case.
",nex3,Snugug
241,2012-08-20 20:28:36,"@Snugug My suggestion wasn't to load two stylesheets, one basic and another basic + IE8; rather, it was to only load the basic + IE8 stylesheet on IE8.

@chriseppstein I take your point. That would indeed be difficult to deal with in my suggested approach.

All right, I'm sufficiently convinced that `@target` is the best way to handle this use case.
",nex3,chriseppstein
241,2012-11-27 10:34:31,"I agree with @nex3's comments on #577, `@buffer` is useful in a single case, but `@target` as discussed is much more powerful. 

Look forward to seeing progress on this.
",replete,nex3
241,2014-02-13 03:34:22,"Hey everybody, 
Adding a bump in here. Is there any movement on this? I think that this functionality is terribly needed. @Snugug, thanks for all the use cases; they're all things that I'm running into and have a real need to solve.
",bradfrost,Snugug
241,2016-01-21 03:06:10,"Actually I was looking for exactly this! 
My use case: 

I have a Drupal project with multiple projects separated through domains. Every domain has a generally the same theme, but domain specific adjustments. 
So on one side the headlines are bold, or the background colors are different etc. 

I would really love something like 



To split all domain specific styles to domain specific files. That way I would not have to use a domain class selector and deeper cascading. 

@Snugug 
Your Gulp plugin looks great. You helped my years ago at the DrupalCon in Munich through some conversations and you help me here again with your plugin (and all the time through other stuff like the breakpoint library or singularity ^^).
Thanks so much man! 
",webcultist,Snugug
233,2012-01-22 15:43:47,"Hi everyone!

As suggested by @paulirish, I tried to improve the typography a bit. I also made some tweaks to the design so it matches better with the Sass website.

As promised, I published it on GitHub: https://github.com/Kaelig/Sass-reference

@chriseppstein and @nex3, I added as contributors on the project, since you are the authors of the reference.

What's our next move? Do you want to publish it on sass-lang.com ? (it's ok with me)
",kaelig,nex3
233,2012-01-22 17:31:24,"I _think_ the site is available over here:
https://github.com/nex3/sass/tree/sass-pages

might to see how to integrate the two

On Sun, Jan 22, 2012 at 7:43 AM, Kaelig <
reply@reply.github.com

> wrote:
> 
> Hi everyone!
> 
> As suggested by @paulirish, I tried to improve the typography a bit. I
> also made some tweaks to the design so it matches better with the Sass
> website.
> 
> As promised, I published it on GitHub:
> https://github.com/Kaelig/Sass-reference
> 
> @chriseppstein and @nex3, I added as contributors on the project, since
> you are the authors of the reference.
> 
> What's our next move? Do you want to publish it on sass-lang.com ? (it's
> ok with me)
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/233#issuecomment-3603699
",paulirish,nex3
228,2015-02-19 22:36:37,"There's a very solid workaround to the ""very hard to read"" argument.

Can it be an _optional_ thing? The nice (truly, truly wonderful) thing about Stylus is that it doesn't enforce either. You can be as slim or as verbose as you want. It doesn't have an opinion. You can use colons if you want or not; entirely up to taste/need. That is a happy medium. If you work in an editor that hates syntax highlighting, use colons. If you're using something that highlights, no need.

@nex3 I understand your comment about editors, so this scenario (optional colons) addresses both needs.

Why would anyone not want colons? I've worked in both SASS and Stylus extensively, and hands down, the non-colon option is the winner in my book. It's easier to type, just as easy to read (in the right editor, see embeds). But there's an actual additional reason. When using Jade or Slim hand in hand, it becomes even easier to copy back and forth from a `.jade` or `.slim` file and a `.sass` file. Because the syntax is identical. Colons just add noise in that specific scenario. This is an experiential thing, and I realize not everyone will care about that, but it's optimal for some people, and OPTIONAL syntax is a win-win for everyone.

Side note, for those who do use contextual highlighting editors, they do scan the same:

![image](https://cloud.githubusercontent.com/assets/111424/6277544/76cb9a0e-b85d-11e4-9714-38df25b33a84.png)

It would be nice for this issue to get some more serious consideration, not just based on preference. I've tried to present the pros in a way that works for everyone.

**Update/Aside**: I updated my comment to be more pleasant. This is something I _would_ actually love to see implemented, and would absolutely be valuable, so I'm trying to make the case instead of just expressing sentiment.
",arxpoetica,nex3
220,2011-12-07 05:54:59,"@chriseppstein, I do not understand what ""reformat the properties to be on a single line"" is. Do you mean that we should adding `--oneline` to make close parentheses behave like the old way?
",hlb,chriseppstein
220,2011-12-19 15:16:03,"@nex3 Thank you for the feedback. I have split them into two commits.
",hlb,nex3
216,2014-11-04 22:38:03,"@myabc I'm really glad to see someone looking into this, but I'm not a fan of the way this parsing works. Allowing completely arbitrary expressions but requiring them to be indented beneath variable declarations seems likely to paint us into a corner with respect to backwards compatibility once we do rewrite the indented syntax parser.

> How Sass-like should the syntax be?

My vision for the rewritten parser is that it will support both an indented style and a delimiter-based style, similar to how YAML works. For example, you could write:



I'd like for this to extend to map literals in the way you suggest, although doing so gets a little tricky due to the separation between the statement-level parser and the expression-level parser.
",nex3,myabc
216,2014-11-11 14:09:21,"@myabc Great news! This is is a huge step
",baires,myabc
216,2015-04-18 13:05:17,"@chriseppstein I did submit a patch (see #1504), but I'll admit that it wasn't a particularly elegant solution. It seems that doing this right hinges on doing a rewrite of the parser for Sass syntax.

I would certainly be up for helping out with this, but it wouldn't be something I'd want to embark on without some guidance from the core team. Embarking on a a rewrite also begs the question, given the interest in [libsass](https://github.com/sass/libsass), as to whether it's worth investing time in a Ruby variant, rather than developing in C++.
",myabc,chriseppstein
216,2015-12-03 16:52:15,"> Kind of like how libsass does it?

@hcatlin I've not read the details of that implementation yet, so I can't say for sure. But, at a high level, yes. This was the idea I floated for supporting the indented syntax during when we created SCSS, but @nex3 had some reservations about the implementation I suggested. I have since had some ideas that would not have the downsides that my original implementation approach would have had.
",chriseppstein,nex3
193,2012-02-20 19:37:57,"@chriseppstein There's a number of cases, but the primary one for me is including third party modules and libraries which have their own css. I would like to use sass to process my own scss files and then compile _all_ css into a single download to the browser. 
",sean-lynch,chriseppstein
193,2012-02-20 20:06:35,"@chriseppstein Requiring me to rename files in separate modules breaks the benefits modularity. I know it seems minor, but it's one of those code smells I actively try to avoid if at all possible.

For example, when ever we need to update a third-party package, I'd have to make sure to rename the css files it provides to .scss. It's a small step, but just another thing that can be forgotten when doing upgrades or missing from a README file when distributing source to others. It's the same reason modifying libraries directly is frowned upon rather than monkey-patching them separately as part of the project source you control.
",sean-lynch,chriseppstein
193,2012-07-05 22:56:06,"@chriseppstein, how about the following?

`@import ""file.css"";` embeds the input. Given the current behavior with SCSS files, I think that's what everyone expects.

`@import url(file.css);` does not embed the input. I think the syntax makes it obvious that no embedding will happen here.
",pwnall,chriseppstein
193,2012-07-05 23:58:44,"@chriseppstein Then how about this

`@import ""file.css"";` implements the current behavior, and issues a warning recommending one of the two forms below:

`@import url(file.css);` CSS @import directive

`@import file(file.css);` embed the file; I'm not too attached to the `file` keyword, `inline` sounds just as fine to me.
",pwnall,chriseppstein
193,2012-07-06 06:45:45,"@chriseppstein Sorry for being brief earlier, I was putting out the fire that issue caused.

Here is the rationale behind my request for warnings: generating `@import url` directives with relative paths is dangerous, because Chrome and Firefox resolve the URLs relative to the CSS file that contains them, whereas Internet Explorer <= 9 resolves the URLs relative to the site root. (no clue what IE 10 does). So I consider that silently generating `@import url()` directives is an unpleasant surprise, and I hope SASS will do better.
",pwnall,chriseppstein
193,2012-07-13 21:55:00,"@nex3 thank you for thinking of a solution for this problem.

I think the @import treatment of .css files made sense when sass could only parse the indented syntax (.sass files), but is currently a nasty surprise. Sass is a really well thought-out and refined language, so I believe most folks were / will be rather surprised by @import's special casing of files that end in "".css"".

I felt backstabbed, because emitting an ""@import url()"" directive based on what's likely to be a filesystem path will result in code doesn't work across browsers, and I'm used to having sass work on my side, and helping me write good CSS. I really think that only ""@import url(x)"" should emit a url directive.

Last, the requirement to rename files adds friction when dealing with 3rd party code -- I think it's not unreasonable for developers to aim to minimize the modifications to such code. Renaming can add extra hassle when merging in-house changes with upstream changes, and makes it harder to track a file's origin by googling its name.

One of the big benefits of sass is that it lets me organize my css as I wish on the server, and still serve a single file to browsers. The special handling of .css files breaks this promise a bit.

In closing, thank you very much for taking a look at `@import`. I've come to rely heavily on sass, and it broke my heart when it screwed me over and caused to me break a site. I look forward to seeing this wrinkle go away.
",pwnall,nex3
193,2014-02-18 11:13:41,"@pwnall still have no method to fix this solution?
",singleseeker,pwnall
193,2014-02-25 23:23:38,"@chriseppstein does it work with compass watch? there are some open issues which suggest it does not... 
",loostro,chriseppstein
193,2014-02-26 09:38:55,"@chriseppstein great! i'll be testing it soon then :) 
",loostro,chriseppstein
193,2014-03-01 15:49:11,"@chriseppstein Where can we see those changes, and what the syntax is? It's of interest since 3.3 is in RC now :)
",rawtaz,chriseppstein
183,2015-01-05 21:54:51,"@nex3 Thanks for the helpful function!
",davevasquez,nex3
168,2011-09-12 09:24:34,"About it being slow: @nex3
I am currently working on a new project, so style wise its very small, but even so.
Currently the project have about 30 sass files which together are about 2000 rows of very simple sass.
For every file it takes about 100-200 ms to compile, 3-4 seconds for all of them. If I concatenate them together before I do the sass compilation it takes 1 second which is more ok. The just this experiments shows me that the tear-up/tear-down takes most of the time, but even the compilation takes time.

This might feel ridiculous complaining about seconds, but when you work with a project and you compile all the time these seconds are getting annoying. And this get a lot worse when working with a project that has hundreds of sass files. I have another project where I need to wait almost 30 seconds.

About cached sass files: @chriseppstein
All our sass files are compiled and concatenated in a specific order into ""all.css"", so I don't have the css file anywhere.
That way if sass cached them separately the speed of compiling the all.css would go much faster, if you only changed some of the files. But this issue isn't that important anyway, if you manage to speed the compiler.
",Zakay,nex3
168,2011-09-12 09:24:34,"About it being slow: @nex3
I am currently working on a new project, so style wise its very small, but even so.
Currently the project have about 30 sass files which together are about 2000 rows of very simple sass.
For every file it takes about 100-200 ms to compile, 3-4 seconds for all of them. If I concatenate them together before I do the sass compilation it takes 1 second which is more ok. The just this experiments shows me that the tear-up/tear-down takes most of the time, but even the compilation takes time.

This might feel ridiculous complaining about seconds, but when you work with a project and you compile all the time these seconds are getting annoying. And this get a lot worse when working with a project that has hundreds of sass files. I have another project where I need to wait almost 30 seconds.

About cached sass files: @chriseppstein
All our sass files are compiled and concatenated in a specific order into ""all.css"", so I don't have the css file anywhere.
That way if sass cached them separately the speed of compiling the all.css would go much faster, if you only changed some of the files. But this issue isn't that important anyway, if you manage to speed the compiler.
",Zakay,chriseppstein
168,2011-09-12 11:01:32,"@chriseppstein Yes, I am running it once per file, but I just found out that is running using stdin, so the reason why there is no cached file is because the compiler doesn't know the filename. This is because the sass files goes through another filter before passing sass compiler. And of course coming from stdin the compiler doesn't know if the file has any changes.

So I am in the process to re-do this step so that I can call the compiler with a filename instead.

Would be nice anyway to profile the compiler, and optimize it :)
",Zakay,chriseppstein
168,2011-09-12 11:29:02,"@chriseppstein I now changed our environment to use the filename instead, so the compile cache files now exist, BUT next time i execute the compilation I get the same results, no speed improvments at all, which is very weird.
",Zakay,chriseppstein
168,2011-09-13 09:27:54,"@chriseppstein the problem is that if you have a project that combines other style sheets that SASS, then you really can't use the update nor the watch command.

So, even if you have the compiled cache files it still takes the same amount of time compiling each file, which tells me that the compilation itself isn't slow but the tear-up or tear-down, but I'am guessing it the first setting up process which is slow in the SASS compile script. Is there a way to profile ruby? I haven't coded any ruby at all.
I would recommend profiling it and check where/what it spends most of the time, this process can probably be optimized a lot.
",Zakay,chriseppstein
168,2011-09-13 15:27:17,"133-249ms for one file is perfectly reasonable if you're calling sass on each file individually. most of that time has nothing to do with compiling the sass file, but with loading ruby itself, parsing the ruby code, interpreting or running on the VM, and so forth. Using your file as an example, named test.sass by itself with no cache:



Using just that number, one would assume that compiling 200 versions of that file would take 41.4 seconds (0.207 \* 200 = 41.4). However, using 200 versions of that file each with a different name in a ""sass"" subdirectory and output to a ""css"" subdirectory:



And on a subsequent cache-warm run:



This is why @nex3 and @chriseppstein have suggested a workflow where you can use --watch or --update. The bulk of the time cost you're seeing can be avoided entirely.
",ttilley,nex3
168,2011-09-13 15:27:17,"133-249ms for one file is perfectly reasonable if you're calling sass on each file individually. most of that time has nothing to do with compiling the sass file, but with loading ruby itself, parsing the ruby code, interpreting or running on the VM, and so forth. Using your file as an example, named test.sass by itself with no cache:



Using just that number, one would assume that compiling 200 versions of that file would take 41.4 seconds (0.207 \* 200 = 41.4). However, using 200 versions of that file each with a different name in a ""sass"" subdirectory and output to a ""css"" subdirectory:



And on a subsequent cache-warm run:



This is why @nex3 and @chriseppstein have suggested a workflow where you can use --watch or --update. The bulk of the time cost you're seeing can be avoided entirely.
",ttilley,chriseppstein
168,2011-09-13 16:48:05,"in that scenario you have a few options. you can go the hacky route and make _three.scss a symlink to three.css if you absolutely cannot convert it to sass. then in all.sass you would have:



that should just work, but it's hacky and ugly. also, your css file needs to be correct and parsable css. there are css hacks for targeting specific browsers that might parse, but not to what you had intended (comment hacks, for example).

another option would be to move the concat/compress phase out of sass and into another tool entirely. an excellent choice for handling multiple rulesets based on file change events is `guard`: https://github.com/guard/guard

using guard, guard-sass, and guard-shell, you would simply run ""guard"" in a directory with a guardfile like so:



A recently popular (thanks to rails 3.1) options is to use the sprockets asset pipeline, but that would be significantly more complex: https://github.com/sstephenson/sprockets

...I'd say the simplest option is to let sass do what it's good at, switch to using --watch or a guardfile, and have something else be responsible for concatenating or compressing your css together. If you're ok with using guard, it does make it simpler to have multiple simultaneous rulesets for multiple tools (including running your unit tests when source files change, checking the syntax of your javascript using jslint, using livereload to refresh the css in your running browser the second you save your sass/css file, etc). At the least, it'd have a process that stays resident and your speed problem goes away.

@nex3, @chriseppstein - if you have better suggestions, i'd love to hear them as well. Either way, I'd say that it's safe to close this bug. Perhaps someone with more motivation than me should make a blog post or write a wiki article. ;)
",ttilley,nex3
168,2011-09-13 16:48:05,"in that scenario you have a few options. you can go the hacky route and make _three.scss a symlink to three.css if you absolutely cannot convert it to sass. then in all.sass you would have:



that should just work, but it's hacky and ugly. also, your css file needs to be correct and parsable css. there are css hacks for targeting specific browsers that might parse, but not to what you had intended (comment hacks, for example).

another option would be to move the concat/compress phase out of sass and into another tool entirely. an excellent choice for handling multiple rulesets based on file change events is `guard`: https://github.com/guard/guard

using guard, guard-sass, and guard-shell, you would simply run ""guard"" in a directory with a guardfile like so:



A recently popular (thanks to rails 3.1) options is to use the sprockets asset pipeline, but that would be significantly more complex: https://github.com/sstephenson/sprockets

...I'd say the simplest option is to let sass do what it's good at, switch to using --watch or a guardfile, and have something else be responsible for concatenating or compressing your css together. If you're ok with using guard, it does make it simpler to have multiple simultaneous rulesets for multiple tools (including running your unit tests when source files change, checking the syntax of your javascript using jslint, using livereload to refresh the css in your running browser the second you save your sass/css file, etc). At the least, it'd have a process that stays resident and your speed problem goes away.

@nex3, @chriseppstein - if you have better suggestions, i'd love to hear them as well. Either way, I'd say that it's safe to close this bug. Perhaps someone with more motivation than me should make a blog post or write a wiki article. ;)
",ttilley,chriseppstein
157,2011-08-22 15:12:15,"@moeffju thanks for tracking this down!
",chriseppstein,moeffju
156,2014-02-01 20:28:11,"@chriseppstein Did this get merged into 3.3 or is it still just a plugin?
",jlong,chriseppstein
154,2012-04-19 21:40:09,"@chriseppstein This stuff seriously changed the way I write code (wrote an unpublished article and framework about this). File size seems better when preprocessing @extend although native mixins would do wonders for CSS size.
",scottkellum,chriseppstein
154,2012-04-21 01:26:28,"@nex3 yes it is just for code size. I guess gzip would solve that issue but I would love to handle it on the CSS level.
",scottkellum,nex3
140,2011-07-22 19:06:28,"@nex3 I think a lot of our users are not used to the UNIX convention of success being indicated by no output.
",chriseppstein,nex3
140,2011-07-22 19:10:29,"@chriseppstein Be sure I know that, I'm just on Windows temporarily ;)
",OyoKooN,chriseppstein
140,2011-07-22 19:13:14,"@nex3 I had forgotten this case, what a shame...
So consider that I've never opened this issue and that everything is working on Windows 7 ;)
",OyoKooN,nex3
139,2011-09-30 14:48:48,"@chriseppstein:  The best example I can give is a diamond-style dependency pattern, which occurs in larger software.

So let's say you have these four files in a big system that's been well-factored into small units:
- _DropDownMenu.scss
- _CarModelPicker.scss:  @import ""DropDownMenu"";
- _ColorPicker.scss:  @import ""DropDownMenu"";
- FindACarPage.scss:  @import ""CarModelPicker""; @import ""ColorPicker"";

So ""DropDownMenu"" has the stylings for general, shared dropdown menus that appear when somebody clicks a dropdown button.  ""CarModelPicker"" is the layout for a frequently-reused blob of markup that, say, lets a user choose a car by its year and make and model, and that markup contains dropdown menus.  ""ColorPicker"" is the layout for a frequently-reused blob of markup that lets a user choose a color, and that markup also contains dropdown menus.  Finally, the ""FindACar"" page displays both a model-picker and a color-picker to let a user find a car.

See the problem?  On the ""FindACar"" page, if you don't design ""DropDownMenu"" to be imported only once, you'll get the same dropdown-menu CSS generated twice --- two different places in the same resulting FindACar.css file.  You don't need to use @mixins or anything fancier than @import to demonstrate the problem.

In a large system where the CSS has been heavily sliced-and-diced like this --- like our flagship application with 1.2 million lines of code in it --- the @imports of a single page can end up both broad and deep.  It's possible for the same page to unknowingly import, say, ""_Links.scss"" twenty times, because from the page's perspective, it's listing out its dependencies, and each of those dependencies are listing theirs, and so on until you get to a few base styles that nearly everybody needs.

For a small application, this isn't an issue anyone would notice; but for a big application like ours, avoiding redundant imports is absolutely critical.
",seanofw,chriseppstein
139,2011-10-05 13:49:54,"@chriseppstein:  The answer is because of the potential for misuse.  I work in a large software shop, and believe me, even among really smart, capable coders, if somebody _can_ do it wrong, they _will_ do it wrong.

By making _DropDownMenu.scss the one to declare ""You can only import me once,"" you don't give anybody the option of screwing it up and importing it six times; you can't do it wrong even if you want to.  But if _CarModelPicker.scss and _ColorPicker.scss are the ones that are responsible for saying, ""Only import DropDownMenu once,"" that provides two points for failure instead of one:  It's two different places where somebody can --- and will --- screw it up.  And in a large system, two points for failure quickly become twenty, and those twenty quickly become two hundred.

Putting it inside _DropDownMenu.scss is a form of encapsulation, to use an OO term; _DropDownMenu.scss is then guarding itself against misuse.

Another thing to consider:  Is there ever a scenario when it makes sense for a single .scss file to be able to both be imported many times by some callers and only once by others?  Is there any scenario where that's sane, desirable behavior?  If the answer is no (and I think it's no), then the system should guard against it, because that then must be an accident --- undesirable behavior --- if it happens.
",seanofw,chriseppstein
139,2012-04-03 22:21:26,"This feature seems fundamental for having clean re-usable code in an architecture with inheritance. I wish I had it even for <a href=""http://pastebin.com/ggCMtuH2"">this very simple use case</a>.

Plus, I agree with @jacobrask, and think <code>require</code> and <coe>import-once</code> are particularly clear and intuitive.
",verekia,jacobrask
139,2013-01-31 15:04:04,"@Snugug That's kinda the motive behind my suggestion. You see, mixins can be included multiple times. It's already known how `@include 'mixing'` works. So, by analogy, `@include 'file'` would work the same way. You may think conflicting files and mixin names would be a problem, but since the context is mutually exclusive, i.e. you always use a `@include mixin` inside a rule and `@include file` outside one, it shouldn't be a problem at all.  
",svallory,Snugug
139,2013-01-31 15:51:52,"@Snugug thank you for your comment. I missed that point. I have nothing more to say than I totally agree with you.
",svallory,Snugug
139,2013-06-18 18:27:02,"@kaelig it's something we intend to handle in Sass 4.0 when we create a proper concept of sass modules and namespacing and revamp how `@import` works.
",chriseppstein,kaelig
139,2013-08-29 08:34:31,"Aiming at being objective here: 
- Changing @import is a seriously _breaking_ change, it will not happen.
- +1ing doesn't add anything to the conversation.

---

Do we have a clear proposal / suggestion that @chriseppstein or @nex3 have agreed with? Is there an actionable development path? 

If you've got an opinion, I suggest that you submit a proposal‚Ä¶ if its solid, and simple, it'll get agreed upon. 

2 year old issues don't resolve themselves without buy-in, folks. 
",benschwarz,chriseppstein
139,2013-09-06 05:57:27,"@xzyfer That is an _incredible find_!  I would say the first solution is better (except the lack of a !default suffix), because you can use %placeholders inside it.  They aren't allowed inside mixins.  That was my main argument for ""import-once.""  Wooooohoooooo!

Totally now using this on [JSMACSS](https://github.com/thejase/jsmacss)!!!!
",thejase,xzyfer
138,2011-07-15 17:04:31,"@chriseppstein This is more a proof of concept. There's a room for cleanup and probably a bit of optimization for speed.
",pointlessone,chriseppstein
138,2012-01-02 01:30:55,"@nex3  Do any of my proposed syntaxes feel right to you? I'd really like to see this in 3.2.

Another option:



@cheba are you still interested in working on this?
",chriseppstein,nex3
138,2012-01-02 12:38:03,"@chriseppstein I'd like to. But I have no time to at least 6th of January. If you guys are short on time for 3.2 you can take it.

Of all the proposed variants I'm for the ellipsis:



The last one is even better if the comma is mistakenly missed. Otherwise it's just inconsistent.



Also there are a few questions I have in my head. Here are a few of them.
1. Can glob be only the last in signature?
2. What do we do with unknown named arguments?
3. What's the precedence of arguments? At the time of this pull request it was positioned arguments had precedence of named arguments. I believe, it should be the other way: named over positioned.
",pointlessone,chriseppstein
138,2012-01-10 16:58:38,"@nex3 I'd really like to get this feature into 3.2 Can you weigh in on syntax please.
",chriseppstein,nex3
138,2012-07-08 21:42:52,"I'm once again working on this. I've faced a problem with order of parameters.

Currently error is raised if positional (unnamed) parameter passed after named one.



This will raise ""Syntax error: Function a was passed argument $b both by position and by name""

On the other hand, mixins report missing parameter $c.



The code above will raise ""Syntax error: Mixin a is missing argument $c"". I think, this should be unified. At least in terms of consistent message.

Next problem I have can be illustrated by the next example:



This code raises ""Syntax error: Positional arguments must come before keyword arguments"".

This exception in combination with previous one (on functions) and the desire to have glob argument only at the end makes it impossible to use both glob arguments and named parameters.



The `a` property will raise ""positional before keyword"" and the `b` property will result in ""position and by name"" error.

Possible solutions:
- Drop keyword after position rule
- Give keyword a preference
- Forbid using keywords wherever glob argument is present

#### Drop keyword after position rule

This one I see as the least effective.



You have to keep in its position to avoid ""name and position"" error. This almost annihilates any benefit having named parameter. Maybe just adding a bit of readability for functions and mixins with lots of arguments.

#### Give keyword a preference



This is probably the most logical solution. At least I see it as such. This variant eliminates ""name and position"" error entirely.

Algorithm is following:
1. Pick argument from function/mixin definition
2. Check if we have named parameter for it in the call
3. Take it if we have and go to next argument (step 1)
4. Check if we have any positional parameters left in the call
5. Take it if we have and go to next argument (step 1)
6. Check if we have default value for this argument
7. Take if if we have and go to next argument (step 1)
8. Panic if we don't

After all arguments have been processed pile all positional parameters that left into glob argument if there's one or raise an error about too many parameters.

This solution is compatible with current implementation. But not vice versa, obviously.

The key difference to current implementation if that if there's a named parameter all positional parameters are shifted to the right while current implementation doesn't do that.

It may be illustrated like this:



I know that this was proposed before. I've been proposing it. But @nex3 was for simpler Python-like syntax and it was turned down.

#### Forbid using keywords wherever glob argument is present

This is the easiest of all but I wouldn't go for it. It's confusing. It makes programmer chose if he wants to use named parameters or glob args, not both. Also it may brake old code if you add glob arg to a function. All of a sudden you can not use named parameters in calls/includes where you could. Thus instead of improving API we could make it worse.

On the other hand, this is exactly what Python does.



---

PS: As there was no consensus or any strong opinions, or decisions from maintainers, I took a liberty to choose `...$arg` syntax. `!arg` looks to similar to `!important` keyword from CSS and may be misleading about its purpose and function.
",pointlessone,nex3
138,2012-07-13 19:40:33,"@chriseppstein and I were brainstorming syntaxes for this and ways to integrate var args with keyword arguments... Chris, do you have a link to the gist handy? I believe the syntax we settled on was `$argname...` for both defining and calling the mixin. Also, we specified how that would interact with variable keyword arguments, both in the short and long term.

I'm not a fan of allowing the re-ordering of parameters under any circumstances. I don't think adding variable arguments to a mixin or function will actually break any callers of it. For example, the following would work:



Since existing callers wouldn't be using the variable arguments anyway, it would work out fine.
",nex3,chriseppstein
138,2012-07-14 19:26:10,"@nex3 I'd like to take a look at the gist. Any pointer to where I can find it?



Would definitely work. I didn't say that it will break existing code. I said that it will feel awkward for new code.

For example:



This will not work as positional argument can not be after named one. That's how it's currently implemented.



This again will not work (in current argument handling implementation) as `$b` gets two values. Also it rearranges arguments and you don't want that.

So the only valid (in current implementation) variant is the one without named arguments:


",pointlessone,nex3
138,2012-07-16 18:31:42,"@chriseppstein @nex3 
Well, that's a great doc.

It looks like arglist doesn't map to any basic data type (like list of hash). I see it acting like a list but this way you can only get positioned arguments out of it. For named arguments you need to extract those out of arglist. I'm not sure that such kind of object orientation is a good idea for stylesheet declaration language such as CSS or SASS. In any case I can't find any other example of such behavior.

The least I could think of to ease this object orientation is to treat positional and named arguments in more symmetric way. Say, treating it like a special data type that doesn't work as a list but a list can be extracted out of it. As well as a hash of named arguments.

Next, I'd prefer to use same syntax for arglist declaration and call expansion. I think, that simplifies syntax a bit. That would eliminate the need to think if I have to place ellipsis after or before var name and instead do something useful. There's simple no way that one can be used in places where the other can. I'm more in favor of trail ellipsis.

BTW, this is illustrated nicely in the section [Expanding a map into keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#expanding-a-map-into-keyword-arguments).

Section [Fixing the semantics of calling with mixed positional and keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#fixing-the-semantics-of-calling-with-mixed-positional-and-keyword-arguments) basically describes what I've written about in [my comment from a few days ago](https://github.com/nex3/sass/pull/138#issuecomment-6835200). Specifically the variant of giving preference to named arguments. I salute you on this decision.

Also I must point that example of current implementation is not correct.

> This means that the following calls are currently equivalent:
> 
> 

They are only equivalent in that that they both will produce an error. The first one will give you ""positional after named"" error and the second one will give ""by position and by name"" error.
",pointlessone,nex3
138,2012-07-16 18:31:42,"@chriseppstein @nex3 
Well, that's a great doc.

It looks like arglist doesn't map to any basic data type (like list of hash). I see it acting like a list but this way you can only get positioned arguments out of it. For named arguments you need to extract those out of arglist. I'm not sure that such kind of object orientation is a good idea for stylesheet declaration language such as CSS or SASS. In any case I can't find any other example of such behavior.

The least I could think of to ease this object orientation is to treat positional and named arguments in more symmetric way. Say, treating it like a special data type that doesn't work as a list but a list can be extracted out of it. As well as a hash of named arguments.

Next, I'd prefer to use same syntax for arglist declaration and call expansion. I think, that simplifies syntax a bit. That would eliminate the need to think if I have to place ellipsis after or before var name and instead do something useful. There's simple no way that one can be used in places where the other can. I'm more in favor of trail ellipsis.

BTW, this is illustrated nicely in the section [Expanding a map into keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#expanding-a-map-into-keyword-arguments).

Section [Fixing the semantics of calling with mixed positional and keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#fixing-the-semantics-of-calling-with-mixed-positional-and-keyword-arguments) basically describes what I've written about in [my comment from a few days ago](https://github.com/nex3/sass/pull/138#issuecomment-6835200). Specifically the variant of giving preference to named arguments. I salute you on this decision.

Also I must point that example of current implementation is not correct.

> This means that the following calls are currently equivalent:
> 
> 

They are only equivalent in that that they both will produce an error. The first one will give you ""positional after named"" error and the second one will give ""by position and by name"" error.
",pointlessone,chriseppstein
138,2012-07-16 18:37:59,"Commented too soon...

But I think it should stay unedited as the comment only on the document itself.

Now I see some of my concerns have been addressed in comments.

On the other hand, @nex3 basically says that [Fixing the semantics of calling with mixed positional and keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#fixing-the-semantics-of-calling-with-mixed-positional-and-keyword-arguments) section is not the way to go. Which brings us back to ""what should we do with arguments?"" question.
",pointlessone,nex3
138,2012-07-20 20:43:10,"> It looks like arglist doesn't map to any basic data type (like list of hash). I see it acting like a list but this way you can only get positioned arguments out of it. For named arguments you need to extract those out of arglist. I'm not sure that such kind of object orientation is a good idea for stylesheet declaration language such as CSS or SASS. In any case I can't find any other example of such behavior.

I agree that it seems weird to have this be a special type, but I think that's just an emergent property of the inherent weirdness involved in trying to shoehorn powerful function-signature constructs into a language that's designed to have a minimal programming surface area. I don't think there's a good way of handling this case without introducing some sort of new type.

> The least I could think of to ease this object orientation is to treat positional and named arguments in more symmetric way. Say, treating it like a special data type that doesn't work as a list but a list can be extracted out of it. As well as a hash of named arguments.

Case in point: this is also a special type. I don't think requiring the user to write `arguments-list($args)` really provides any value to the user. I suppose it's conceptually a little cleaner, but I think the vast majority of use-cases of variable arguments will either be passing them directly through to another mixin/function or accessing them as a list. I suspect that actually accessing variable keyword arguments is an edge case, and I'm fine with making it weirder/more difficult if that allows us to make the list accessing simpler and easier.

> Next, I'd prefer to use same syntax for arglist declaration and call expansion. I think, that simplifies syntax a bit. That would eliminate the need to think if I have to place ellipsis after or before var name and instead do something useful. There's simple no way that one can be used in places where the other can. I'm more in favor of trail ellipsis.
> 
> BTW, this is illustrated nicely in the section [Expanding a map into keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#expanding-a-map-into-keyword-arguments).

Agree.

> On the other hand, @nex3 basically says that [Fixing the semantics of calling with mixed positional and keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#fixing-the-semantics-of-calling-with-mixed-positional-and-keyword-arguments) section is not the way to go. Which brings us back to ""what should we do with arguments?"" question.

I'm happy with the current behavior of keyword arguments. As to how they'll interact with variable arguments, I envision it working just as though the arguments were provided long-form. Some examples:



Note that the latter two examples won't work in v3.2, since we're not supporting an actual Map data type immediately.
",nex3,nex3
136,2013-01-27 21:33:30,"Matching the CSS variable semantics presents a number of complications that I do not know how to solve in a preprocessor because variable resolution depends on the document structure (a better name for css variables would be 'custom css properties' in terms of how they work).

I agree that our variable semantics need work. But if `!local` is off the table (for the very good reasons that @nex3 has given) then this is a fairly big change. Changing the lookup semantics is actually very easy, but in order to not break every sass file, we would have to create an upgrade script that correctly declares variables that are presently global as such in the new version (and this would need to be done in a major version release: 4.0).

In the meantime, a (disgusting) workaround would be to declare all your local variables as an argument with a default value of `null`.
",chriseppstein,nex3
131,2011-12-16 22:46:53,"@nex3 I'm not convinced. We should chat. 
",chriseppstein,nex3
131,2011-12-16 23:13:41,"@chriseppstein Sure; ping me.
",nex3,chriseppstein
122,2012-01-10 19:37:17,"@chriseppstein No objections here. Probably want to have ""--from less"" etc print an error through 3.2, though.

Maybe the best way to have ""--from less"" working in future is to use less.js to parse the file, then dump it to JSON and load it into Sass? It seems easier than rewriting sass/tree in Javascript.
",nex3,chriseppstein
122,2012-07-20 20:14:48,"@chriseppstein You mean having ""--from less"" print an error?
",nex3,chriseppstein
115,2011-11-15 23:02:45,"@chriseppstein Who or what are you addressing? I think I'm missing your point.
",timmolendijk,chriseppstein
109,2011-07-15 20:59:27,"@chriseppstein Ah, didn't see your response before I posted. I didn't know this was already discussed somewhere else. If you have already come to some decision not to do this, then you could go ahead and close this.
",deleteme,chriseppstein
109,2015-10-13 22:03:03,"@nex3 Sorry I should have mentioned you in the previous comment
",chriseppstein,nex3
96,2011-08-10 21:37:29,"This is a tricky one. @imathis, in your example, the line you say works fine doesn't actually do what it seems like it should. For example:



compiles to



with no `@media` in sight. When it comes down to it, this is probably correct. The alternative is the following:



which doesn't uphold `@extend`'s guarantee of not duplicating classes.

Since any use of `@extend` within `@media` or other directives behaves in this unintuitive manner, I'm tempted to disallow it wholesale. @chriseppstein, what do you think?
",nex3,chriseppstein
96,2011-08-10 21:49:32,"@nex3, It's very natural to want to use `@extend` within an `@media` block. But since  `@extend` is a compile time directive and `@media` is a runtime directive, having it allowed only causes confusion. I'm +1 on disallowing it.
",chriseppstein,nex3
92,2012-05-03 11:49:39,"@nex3 Yep I can confirm that 3.2.0.alpha.104 works fine so something somewhere is breaking it in version 3.1.6. :o)
",norfali,nex3
83,2012-09-10 02:47:16,"@chriseppstein How about the case of percentages? 90% of 100% is still 90%, as far as I can tell.
",bwilkins,chriseppstein
77,2011-05-09 20:19:16,"@nex3, yup and thus why I also submitted this feature request: https://github.com/nex3/sass/issues/78

If plugins could register custom visitors during the compilation phases, then that would be great.
",tav,nex3
66,2011-08-11 05:55:36,"@nex3, well, `@import ""icon/*.png"";` is for sure Compass thing https://github.com/chriseppstein/compass/blob/stable/lib/compass/sprite_importer.rb
According to you, automatic imports feature as dangerous as globbing (BTW, nobody should rely on the order of the CSS rules, it's a bad habit)
",nashbridges,nex3
66,2011-08-11 06:26:49,"@nashbridges:

I don't know where you heard that that ""nobody should rely on the order of the CSS rules"" but that's just nonsense.

If you want a globbing feature it's available as a plugin: https://github.com/chriseppstein/sass-globbing I used it on a project recently and it cost me an hour to debug an issue related to import order -- hopefully you'll have more luck since you never rely on the order of your css rules.

@nex3, I'm having second thoughts about this feature anyway. Close it?
",chriseppstein,nex3
66,2011-08-11 07:01:28,"@chriseppstein: Done.
",nex3,chriseppstein
65,2011-05-18 03:41:48,"@chriseppstein helped me work around this issue by converting the absolute paths to relative paths. Still not sure why the absolute paths wouldn't work.
",ravinggenius,chriseppstein
53,2012-05-25 11:56:32,"@chriseppstein This is true. However, most CSS editors do not highlight the code properly in this case. Would it be possible to to close the comment as SeanTAllen suggested?
",damjankuznar,chriseppstein
48,2012-08-16 00:11:34,"@chriseppstein Do you know what's causing this error? Is it a Compass issue?
",nex3,chriseppstein
48,2012-08-16 03:51:24,"@nex3 it's just a ridiculously long argument list and the parser runs out of memory. I think the fix would be for Sass to have a parser that isn't stack based -- obviously this not likely to happen unless Sass starts using a parser generator.
",chriseppstein,nex3
25,2015-09-24 18:38:46,"@nex3 I'd Iike to introduce `is` and `is not` as the new equality operators in our next release. I'd like to deprecate `==` and `!=` at that time. Objections?
",chriseppstein,nex3
4,2011-11-30 07:04:39,"@nex3, please backport [ie_hex_str](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/colors.rb#L37) function.

We need that function in pure SCSS (without Compass)
",yury,nex3
2263,2017-03-23 01:26:56,"# Sass
// prefix list
$prefix: -webkit- """";

// transition
@mixin transition($value) {
    @each $val in $prefix {
        #{$val}transition: if($value == transform, $val + $value, $value);
    }
}

# Use
body {
  @include transition(transform .4s);
}

# Result
body {
  -webkit-transition: transform 0.4s;
  transition: transform 0.4s;
}

# Want result
body {
  -webkit-transition: **-webkit-transform** 0.4s;
  transition: transform 0.4s;
}


_This is also true if using ‚Äúcompass/css3‚Äù;_

@nex3      sos
",huzedong2015,nex3
2252,2017-03-02 15:01:49,"I drew some ideas from Clojure and how everything in it reassembled by simple data structures. So I tried to apply those knowledges to Sass, and, if possible, simplify already existing in Sass concept ‚Äî maps, tighten up already existing Sass syntax closer to its origins, CSS, and by the way make work with CSS fragments not only reality, but intuitive and simple thing.

This issue takes a long jump, makes big claims and tries to solve few issues at once, so, first of all, calm down and buckle up tight.

In short, __this issue is about defining CSS fragments and other structural data in a better (or alternative) way__.

Disclaimer: some things might be broken or incomplete overlooked or oversighted. Some might hurt your feelings.

To be honest, I hesitated a lot to publish this or no... But here it goes.

## Goals

1. Unify existing in Sass data structures with already existing ones in CSS. In some sense, to redefine boundaries between those two.
2. Make basement for solving https://github.com/sass/sass/issues/1582 and similar issues.
3. Make work with CSS fragments easy and intuitive.
4. Make work with CSS fragments powerful.
5. Define format, which should expressively describe CSS fragments.
6. Define format, which should be easy to write and easy to understand for end-user.
7. Define format, which should be easily accessible.
8. Define format, which should be easy to manipulate.
9. Define format, which should provide easy introspection.
10. Define format, which should not introduce radically new syntax to CSS.

## The road

For this part, I will need your imagination. Stay tuned; do not think about unimportant parts rights now. (Yeap, literally just ignore all my mistakes and take it as granted *makes Jedi movement with his hand*).

Let us imagine that we could build whatever we want and any way we want.

And, as first part of this ugly plan, let's imagine new Object, which we can use as an alternative to maps:



Note curly brackets `{}` and `;` instead of usual for maps `()` and `,`. This syntactically makes Objects very similar to CSS, but from other side seems to do same thing as usual Sass map. As a side benefit, `;` seems to be more logical for last element in Object then trailing comma in Sass maps.

Object properties can be easily accessible. I will use for now and in future JavaScript syntax, since it have necessary means to make what we want to do here, but for now just imagine like you are reading warm and cozy Sass with some extensions:



It is possible, because on contrary to maps, Object are simpler data structures and they can't contain as Object keys _any_ value, but only strings or numbers literals. Let's leave maps to more complex scenarios.

For now, all of this seems to be completely irrelevant. You can tell, that this just a representation of data, another version of Sass map, and this doesn't do anything with CSS fragments. Indeed, you are right. We can use those exactly as typical data structures. But there is a catch.

Let's say, we want to add in this Object a bit of CSS:



Yes, it just that easy for end-user to write it. We just made a colossal thing, for which many Sass framework developers would kill, since before they were forced to find most odd ways to describe CSS in their data structures as Sass map.

But here we're doing exactly the thing ‚Äî giving them ability to write CSS just as a part of their data structure with clear and familiar syntax.

This opens a hatch for a lot of creativity, since from now CSS parts can be stored in variables, in Sass maps, passed from one variable to another, manipulated an so on.

Selectors are harder to access directly, but it seems to me reasonable. Think of jQuery ‚Äî you need to write full selector if you want to access properties directly.

Same thing we have here:



I think additional external tools can eliminate this issue. Like a jQuery for Sass, which will provide even better ways to access Object properties based on queries. We just need to provide basement for such tools.

Of course, things not that easy under the hood. In fact, while `props` are normal part of data structure, usual Object properties, `.article h1, .article h2` is a _syntax sugar_. Same as we have for [methods declaration of Classes in ES2016](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes). Under the hood, it transforms into more usual and introspective data structure, which I will describe later.

So, let's take a look at structure which we have in result:



Some might say ‚Äî wait, but this is nothing new! We already have this thing, and it‚Äôs called CSS. That's the whole point. My proposal is about embracing and extending already known to CSS concept. CSS already have data structure, which CSS represents itself, and I do not see reasons why we should not embrace it.

It is very powerful abstraction, which will eliminate a lot of issues Sass frameworks developers facing those days, especially when they end up mapping properties of CSS to Sass maps, and then generate something based on them (let's say, themes). With current Sass capabilities we are encouraging strange practice to mimic one data structure (CSS) with another (Sass map), while we could just use first one directly, thus eliminating undesired additional layer of complication.

In the end of the day, we can use those objects for many things:

1. To compose new selectors based on Object or other data structures.

   Generating new selectors is easy, because you can just iterate upon Object and output all selectors as... selectors.

2. To compose new data based on different Objects

   

   `$result` will contain

   

3. Since it is a data structure, it can be ""mutated"" by accessing and changing it's properties and values:

   

   This will reshape fragment into

   

4. To use it as a form of mixin:

   

   will yield

   

   Syntax is debatable, but I can see it demonstrates the point.

5. To use it as a closer to CSS alternative to maps.

   Objects provide a way to store usual, not related to CSS fragments, data with more accessible way. Since it isn't that broad as maps, it's easier to access with dot notation and make any manipulations based on it.

   

6. Since it is usual CSS (or more to say ‚Äî Sass), you can use any expected Sass features inside Objects, like other mixins, functions, concatenation with `#{}`, etc.

   

7. Think about your ways. It will be your homeworks. My fantasy is quite limited.

Some might raise few questions here:

1. What if Object contains unknown to CSS properties and we will try to mix it into real selector, like

   

   Answer: it will output all properties, which you're passing it, resulting in

   

   Sass is not validator of CSS properties, so what you are passing in you are getting out. We should understand that in this proposal Object is broader than CSS fragment. __It is extension of CSS data structure__, which allows you to store any data you want, not only CSS values, and it is up to you where you will use it ‚Äî as part of CSS, or as a storage in you framework. Yes, literally it blurs edges between regular CSS and data, and it is good thing.

   If we think about it, whole CSS file can represent large Object, in which you can easily access any selector and it's values without need to define additional variables.

2. To some people syntax of declaring selectors might look like odd thing.

   Indeed, we are using `:` for keywords (typically for Object/dict structures in many languages), but selectors suddenly do not use any colons.

   First, we should think about it as granted: CSS _already has this syntax_. And secondly, it might be unexpected syntax unless Lisp or [Clojure](https://kimh.github.io/clojure-by-example/#let) languages will run somewhere nearby ‚Äî they have very similar syntax, and it is quite effective, in fact.

Well, it might be slightly unobvious, but described above approaches solves (I hope so) most of estimated goals: it is easy to write, it is easy to read, it is a simple data structure, easy to manipulate, and it does not introduce new syntax to CSS.

However, we are still not done. In https://github.com/sass/sass/issues/1582 was mentioned important thing ‚Äî those data structures should be __introspectable__. And because of this, CSS fragments can't be represented as a primitive data structure ‚Äî it will be very uneasy to distinguish selectors or at-rules from typical properties. Thus, any CSS fragment should under hood turn into real data. That's why I said at first that any selectors or at rules in Object are just a syntax sugar, which in reality turning out to understandable and mutable data structures under the hood.


## Internal structure

Here https://github.com/sass/sass/issues/1582#issuecomment-72259831 @chriseppstein and @eoneill proposes their own vision.

Obvious benefit of that structure is that it's very descriptive. It seems to get everything right.

However, there are few issues:

1. It has very uneasy cognitive model. It's really hard to read.
2. It seems to be mostly inaccessible with normal tools. This means, that you should write funky Sass, or introduce new to Sass functions, like mentioned `ruleset()` or `at-rule()`, to help with this complexions. Usually this is a bad sign.
3. Because of previous issue, it is easy to declare manually or mutate.

I took some inspiration from [JSON Schema draft](http://json-schema.org/examples.html) and [tcomb](https://github.com/gcanti/tcomb) internals.

I will use for this example JavaScript Object, because, sorry, but `()` and `()` (you see the difference? I don't too) for arrays and maps makes any example magnificently and incredibly unreadable.

So let's take example in mentioned comment, and put it in our lands first:



And imagine we log out our object to console (don't ask me how, I don't know, I don't want to hear anything about Sass is a compiled language it doesn't log anything to console STOP! Calm down! Let's continue):



We will see following data structure:



This structure is:

1. Much easier to read ‚Äî it is same cascade as we already have in CSS.
2. It is easy to access properties, since no tricky routing needed ‚Äî all values available in plain form, with straightforward paths.
3. Types and other meta information of keywords is easy to introspect ‚Äî everything available under `meta` property. Note, that current proposed meta might be not full, it's just an proposal of format, not features.
4. Since it is easy to access internals, it is also easy to change. You can access and redefine any value with dot notation or already existing Sass tools without funky paths.
5. This construction is easy to write or generate ‚Äî for cases when we want to declare it manually, in form of pure data structure.
6. Since it has easy structure, we do not need additional Sass function to decrease pain during defining or manipulation. We just do not have this pain at first place.
7. Think about some other benefits. Those seems to be unimpressive, and I'm afraid that maintainers will instantly close this issue (but don't tell them about this one!).

Unfortunately, not everything perfect, and my proposal have few obvious fatal flaws too:

1. Properties or selectors, at rules, comments can occur few times. You can see it with `color` property. Indeed, in most cases, data structures does not allow anything with duplication of keywoards (which is `color` in our case).

   At least, this will demonstrate to some folks why @chriseppstein and @eoneill opted to use so hard-to-read-list-based notation in their [example](https://github.com/sass/sass/issues/1582#issuecomment-72259831).

   To be honest, so far I don't see clear solution to this issue. However, from other point of view, CSS object structure allows having multiple properties with same keywoard. So, maybe we should allow it too. But, while I'm typing it, I'm feeling how other language pointing a gun to my head and sign with cardinal sin starts to flash on my screen. Nevertheless, maybe it is just a signature of unique CSS nature?

3. Anyway, EVEN if we do allow duplication of properties in Object, there still will be serious issue ‚Äî how to access that second or first property? Introduce some weird syntax? Like `$myObj[.foo, .bar].color[0]` for first occurrence and `$myObj[.foo, .bar].color[1]`?

Probably they solvable, probably not. Maybe we can put all duplicated properties into another array:



Which might be not worst idea, since in most cases we would want to filter them out anyway, but still it looks like a complication.

Anyway, my point here is that this structure should be as easy as possible, and described above model is what I, and I believe, many other Sass developers would like to see. I mean, the direction, to this. So it be like an object. You know, without lists, easy to read. With a nesting, and some nice metas. Ah, whatever, I think you have understood what I mean!


## Outro

I feel that there will be especially a lot of criticism about my attempt to unify CSS with data structures, which to some people might look like so different. The thing is, for me CSS selectors always felt like a typical language object or dict, but with slightly different syntax. I think that by embracing and extending them we will make Sass ~~great again~~ easier (since there will be less concepts to learn) and will introduce a lot of new possibilities (because of impossible before data manipulations and combinations).

Even if this whole concept will fail with loudest sounds of falling down on a peaceful tourist tree, I still hope that it will serve as a basement for some new, even better features.

I also sincerely hope that I was able to deliver at least piece of my vision. If I didn't ‚Äî don't blame me, just read issue few times again!

Just kidding... Thanks for reading!
",ArmorDarks,chriseppstein
2246,2017-02-19 21:50:34,"## Problem
For whatever reason, Sass con't enable the use of CSS variables within functions as expected; this is particularly problematic with color functions.

## Sass Code (Used Sass 4.0 & LibSass 3.5)

## Expected Result


## Actual Result


It seems the parser doesn't resolve CSS variables when they are parameters of Sass functions
## Recommended Reviewers
- @nex3 & @chriseppstein being very familiar with how Sass has evolved to support CSS variables",lozandier,nex3
2246,2017-02-19 21:50:34,"## Problem
For whatever reason, Sass con't enable the use of CSS variables within functions as expected; this is particularly problematic with color functions.

## Sass Code (Used Sass 4.0 & LibSass 3.5)

## Expected Result


## Actual Result


It seems the parser doesn't resolve CSS variables when they are parameters of Sass functions
## Recommended Reviewers
- @nex3 & @chriseppstein being very familiar with how Sass has evolved to support CSS variables",lozandier,chriseppstein
2228,2017-01-15 05:10:35,cc @xzyfer ,nex3,xzyfer
2218,2017-01-06 00:01:32,"It appears Fixnum and Bignum are being deprecated starting with Ruby 2.4.0:

[https://github.com/rails/rails/pull/26732/files/cb0452e9a50e97f8ab2100f6226fbdd47a970a34]

I'd like to claim this issue.  My first thought is to add a new switch statement referencing the ""Integer"" class, with the same implementation as the ""Fixnum"" switch statement, just before said ""Fixnum"" statement.  @chriseppstein @nex3 - thoughts?  ",richiethomas,nex3
2218,2017-01-06 00:01:32,"It appears Fixnum and Bignum are being deprecated starting with Ruby 2.4.0:

[https://github.com/rails/rails/pull/26732/files/cb0452e9a50e97f8ab2100f6226fbdd47a970a34]

I'd like to claim this issue.  My first thought is to add a new switch statement referencing the ""Integer"" class, with the same implementation as the ""Fixnum"" switch statement, just before said ""Fixnum"" statement.  @chriseppstein @nex3 - thoughts?  ",richiethomas,chriseppstein
2218,2017-01-06 03:55:12,"I was going to propose the following for the fix for this issue:



But I just tried this on my local and it doesn't eliminate the warning.  I also tried splitting the ""Integer"" and ""Fixnum"" references into separate 'when' clauses (with ""Integer"" first), and that didn't eliminate the warning either.

The only thing that worked was to delete the ""Fixnum"" clause altogether, and replace it with an ""Integer"" clause.  I tried this both with Ruby 2.4.0 and Ruby 2.3.1, and it worked in both cases.  I don't want to dig any deeper before getting the core team's thoughts on the above.  If it sounds good to y'all, I can submit a PR ASAP.  Cheers @chriseppstein and @nex3. :-)

I see the 'json_value_of' method, and specifically its handling of the Fixnum class, is already covered by tests in 'util_test.rb'.  Looks like the same case would cover Integers as well for Ruby 2.4.0.  I'd like to be able to verify that before submitting a PR by running the same command that @sinkaszab mentioned (sass filenameA.scss filenameA.css), but am unsure how to ",richiethomas,nex3
2218,2017-01-06 03:55:12,"I was going to propose the following for the fix for this issue:



But I just tried this on my local and it doesn't eliminate the warning.  I also tried splitting the ""Integer"" and ""Fixnum"" references into separate 'when' clauses (with ""Integer"" first), and that didn't eliminate the warning either.

The only thing that worked was to delete the ""Fixnum"" clause altogether, and replace it with an ""Integer"" clause.  I tried this both with Ruby 2.4.0 and Ruby 2.3.1, and it worked in both cases.  I don't want to dig any deeper before getting the core team's thoughts on the above.  If it sounds good to y'all, I can submit a PR ASAP.  Cheers @chriseppstein and @nex3. :-)

I see the 'json_value_of' method, and specifically its handling of the Fixnum class, is already covered by tests in 'util_test.rb'.  Looks like the same case would cover Integers as well for Ruby 2.4.0.  I'd like to be able to verify that before submitting a PR by running the same command that @sinkaszab mentioned (sass filenameA.scss filenameA.css), but am unsure how to ",richiethomas,chriseppstein
2216,2016-12-28 01:27:22,"If LibSass is allowing imports in `@include`s, that's a bug. It should match the behavior of Ruby Sass here.

/cc @xzyfer @mgreter",nex3,xzyfer
2178,2016-11-17 08:29:25,"You are right. This thread should be closed.

/cc @chriseppstein 
",joneff,chriseppstein
2163,2016-10-07 10:31:21,"I had a quick chat to @nex3 which pointed me to the lexer/parse
as the root cause of the observed inconsistencies.

I think the general approach is sound. I'm sure the implementation
could be tidied up.

Fixes #2160
Spec sass/sass-spec#940
",xzyfer,nex3
2163,2016-10-08 04:36:03,"@nex3 @chriseppstein this is ready for review
",xzyfer,nex3
2163,2016-10-08 04:36:03,"@nex3 @chriseppstein this is ready for review
",xzyfer,chriseppstein
2160,2016-10-04 01:51:52,"@nex3 confirmed this is a bug. There is currently a sass spec asserting this broken behaviour which is causing LibSass to fail CI.



Sass 3.4.21



Expected


",xzyfer,nex3
2157,2016-12-19 01:46:07,"@lokson I'm really sorry, and I understand why you're unhappy. I'll do my best to explain why this happened how it did. Over the months since you first filed #2094, I was focused almost exclusively on [Dart Sass](http://blog.sass-lang.com/posts/1022316-announcing-dart-sass) while @chriseppstein was extremely busy with his job at LinkedIn. This left no one to work the issue tracker and continue iterating on pull requests. We should have devoted more time to this repo, but we didn't communicate between each other well enough to actually make that happen. That's our fault, and again, I apologize.

Eventually, Dart Sass became solid enough that we were able to get decent performance data out of it. Based on that among other considerations, we decided to move towards Dart Sass as the reference implementation. Once that was decided, it no longer made sense to land new features‚Äîincluding your multiline patch‚Äîin Ruby Sass only. So I regrettably put your pull request on ice.

I really do appreciate your contributions, and I think your multiline feature is a good one. I'm sorry once again that we didn't respond quicker or communicate better.",nex3,chriseppstein
2151,2016-09-27 18:15:20,"Reason for this implementation was @nex3 suggestion in https://github.com/sass/sass/issues/360. @long-lazuli Could you give any example where `.foo.foo` would be desirable?
",lokson,nex3
2151,2016-09-29 00:01:19,"@long-lazuli Right, it is possible to use `.foo.foo` to rise selector specifity. I'm perfectly fine to remove this part of pull request. @nex3, @chriseppstein, what's your opinion on this?
",lokson,nex3
2151,2016-09-29 00:01:19,"@long-lazuli Right, it is possible to use `.foo.foo` to rise selector specifity. I'm perfectly fine to remove this part of pull request. @nex3, @chriseppstein, what's your opinion on this?
",lokson,chriseppstein
2132,2016-09-02 05:32:42,"[I raised the issue that libsass doesn't match the Ruby Sass exit code](https://github.com/sass/libsass/issues/2162), which is causing issues when trying to port the sass-spec for node-sass. @mgreter helpfully pointed out that [65 has a different meaning on window](https://github.com/sass/libsass/pull/2163#issuecomment-244283645)

Not sure, but it seems like `EINVAL` might work http://blog.honeybadger.io/understanding-rubys-strange-errno-exceptions/

/cc @mgreter @xzyfer 
",nschonni,xzyfer
2124,2016-08-25 22:07:10,"@chriseppstein, @xzyfer https://github.com/sass/sass-spec/pull/896
",lokson,xzyfer
2106,2016-07-29 22:28:20,"Huh. Yeah, I would consider this a bug in ruby sass. A content block is not allowed to that mixin. @nex3 can you confirm?
",chriseppstein,nex3
2106,2016-08-25 22:26:31,"@chriseppstein, @xzyfer https://github.com/sass/sass-spec/pull/897
",lokson,xzyfer
2099,2016-07-15 19:35:11,"We considered this when we added maps but ultimately decided against adding new syntax because of the risks it creates if CSS adds conflicting syntax. However, we are using dot notation in Sass 4.0 for <module>.<identifier> resolution. So now that we've decided that, maybe it's worth revisiting this idea. @nex3 thoughts?
",chriseppstein,nex3
2092,2016-06-30 17:24:24,"It seems to me that the issue is with [this line](https://github.com/sass/sass/pull/2092/files#diff-2f15a542ab2d3add779eeae7eddee77cR142). Skipping when there's no importer shouldn't be necessary in the case of `:inline` as we have the contents of the file (E.g. this may be the case when reading from `stdin`).

@nex3 knows this part of the code better than me, so I'll defer to her.
",chriseppstein,nex3
2066,2017-03-11 21:51:35,"@chriseppstein? @nex3? Anyone?

If reply on this issue can't be provided right away, please, at least __re-open this issue__. I think it is very impolite to close issue right away without any meaningful solution.",ArmorDarks,nex3
2053,2016-05-06 23:47:21,"Closes #2050

@chriseppstein This is incompatible with some sass-spec specs; I'm not sure the right way to land it without breaking either our tests or libsass's.
",nex3,chriseppstein
2049,2016-05-05 19:20:39,"If a identifier ends with parens indicating it is a function call. E.g. `un#{quo}te(asdf)` then in Sass 3.5: we get `unquote(asdf)` as output but in Sass 4.0 we get `unquo te(asdf)` (note: the introduction of a space).

According to @nex3 this is an unintended change.
",chriseppstein,nex3
2046,2016-05-05 20:43:18,"@royels FYI this is landing finally.
",chriseppstein,royels
2036,2016-04-25 17:37:24,"@nex3 thoughts?
",chriseppstein,nex3
2033,2016-04-15 13:19:48,"You're probably not getting the expected results because (and correct me if I'm wrong @nex3) `@extend` tries to match the specificity of the extendee. That probably results in the simplification of the output selector.
",davidkpiano,nex3
2033,2016-04-15 19:34:52,"> You're probably not getting the expected results because (and correct me if I'm wrong @nex3) `@extend` tries to match the specificity of the extendee. That probably results in the simplification of the output selector.

This isn't quite right. For every extending selector, `@extend` guarantees that the generated selector will contain at least one complex selector with two properties:
1. the complex selector matches all elements that are matched by the extending selector, and
2. the complex selector has specificity greater than or equal to the extending selector.

It's possible for those two properties to be satisfied without literally including the extending selector in the output, in which case the original selector will be omitted. This can look strange, but it shouldn't affect the actual rendering of the page unless you're relying on the generated selector having even greater specificity than the extending selector, which is not safe‚Äîand not something we could guarantee even if we produced every element of the combinatorial explosion of possible selectors we could generate.
",nex3,nex3
2031,2016-04-11 20:10:52,"Ok. so it seems that being inside the `@media` declaration is what causes the deprecation to happen. @nex3 I think this is a bug.
",chriseppstein,nex3
2023,2016-03-30 16:00:32,"@nex3 thoughts?
",chriseppstein,nex3
2016,2016-03-15 00:09:40,"@chriseppstein Any blockers to merging this?
",glebm,chriseppstein
2016,2016-03-17 22:33:51,"@glebm Well, @nex3 has consistently rejected patches that fix this so far, arguing that ruby warnings are not in line with our preferred coding standard for this project. So I will let her weigh in. Personally, I am not opposed to Sass running without warnings when running with `-w` set.
",chriseppstein,nex3
2016,2016-03-22 17:29:28,"@nex3 @chriseppstein Please consider to merge this for the Community sanity.

Sass is a dependency for hundreds of gems and thousands of applications that will see these warnings (and they are a lot). Of course they can decide to opt-out for Ruby warnings, but that prevents OSS maintainers to keep them enabled.

:pray: 

---

**UPDATE:** Here's an example of what I'm saying: a Travis CI build that fails and it reports:

> This log is too long to be displayed. Please reduce the verbosity of your build or download the raw log.

![screen shot 2016-03-22 at 19 14 22](https://cloud.githubusercontent.com/assets/5089/13962693/78c19ec4-f062-11e5-82e2-70c48448bf4f.png)

Source: https://travis-ci.org/hanami/assets/jobs/117776354
",jodosha,nex3
2012,2016-03-08 15:44:29,"@dustindowell22 You can use [Sassdash](https://github.com/davidkpiano/sassdash) if you want that functionality right now, using the [`_(...)` function](http://davidkpiano.github.io/sassdash/sassdoc/index.html#function-_). 

Here's your pseudocode brought to life:



When I talked to @nex3, she told me she envisioned Sass as an imperative language that _creates_ declarative CSS code, instead of a declarative/functional language from the start, which makes sense.
",davidkpiano,nex3
1996,2016-02-24 20:28:36,"@nex3 :+1: on this idea?
",chriseppstein,nex3
1988,2016-02-12 19:43:00,"Maybe `content-exists()`. @nex3 thoughts?
",chriseppstein,nex3
1979,2016-01-29 17:58:20,"Pretty sure this is a duplicate but I can't find it. This is how Sass has worked since before I got here. I don't like it, but changing it is a big deprecation -- though maybe worth doing at 4.0. Maybe @nex3 can weigh in. 

For now, the direct properties of a selector are not split up by child selectors when nesting. If you need to maintain this order, you'll need to repeat the `.photo` selector or toss in a `&` selector like so:


",chriseppstein,nex3
1970,2016-01-18 17:53:53,"@mgreter Looks like our list parsing code raises the error without letting it fall back to the map's parsing. I don't know whether @nex3 considers this a bug or not.
",chriseppstein,nex3
1960,2016-01-08 18:53:38,"Ah, it was the deprecation warning that @nex3 added recently that is the culprit. Fixed!
",chriseppstein,nex3
1959,2016-01-07 19:37:48,"@Hibou57 That's a fair point. @nex3 did all the extend optimizations so I'll let her respond.
",chriseppstein,nex3
1957,2016-01-06 18:31:20,"@felixbuenemann I think you have an old version of node-sass installed. the latest version gives an error on this input.
",chriseppstein,felixbuenemann
1957,2016-01-06 19:11:45,"@felixbuenemann `output.gsub(/-my-macro/,""<<macro>>"")`
",chriseppstein,felixbuenemann
1957,2016-01-06 19:48:11,"> @felixbuenemann output.gsub(/-my-macro/,""<<macro>>"")

@chriseppstein Thanks, but there are quite a lot of different macro expressions in my script and even some other directives that have a comlicated syntax so it would require some complicated regexps and not even sure if that will do it here. I tested @davidkpiano's solution with Ruby Sass `sass-3.4.20.gem` and it does compile with custom at-rules. However `node-sass@3.4.2` fails here again. Should I report this divergence somewhere?
",felixhayashi,felixbuenemann
1957,2016-01-06 20:33:54,"@felixbuenemann you can report bugs for libsass here: https://github.com/sass/libsass/issues
",chriseppstein,felixbuenemann
1954,2016-01-06 19:24:53,"> IMO `sub-1` should be evaluated too.

See #1912.

> The differences between sub-1 and sub-5 seem wrong.

Agree. I don't know why `sub-5` isn't the same output as `sub-1`. Perhaps @nex3 does.
",chriseppstein,nex3
1912,2015-11-24 18:25:50,"@cimmanon and I was just about to point out what @darvishzadeh just wrote about the counter-intuitive-ness of it. Syntactically, I don't think you should need the parenthesis.
",akaScooter,darvishzadeh
1912,2015-12-01 21:38:47,"@nex3 Thoughts on changing the parsing of binary operators to require a surrounding space and forcing unary operands to never allow a space at 4.0? We can have sass-convert take care of the expressions and re-parenthesize them during the upgrade process.
",chriseppstein,nex3
1910,2015-11-23 19:19:47,"While working on @nex3's comments on #1875, switching to `assert_parses_with_mapping`, it was super hard to diagnose the following error:



This comes from [`assert_ranges_equal`](https://github.com/sass/sass/blob/stable/test/sass/source_map_test.rb#L922..L926).
",srawlins,nex3
1904,2015-11-15 22:44:17,"Now, map-merge, map-get, and map-has-key all accept various forms of nested Map logic as per @nex3's specifications in #1739, with the addition of a nested compatible map-has-key.

Removed the weird commit that snuck in to the previous request and hopefully bought us Ruby 1.8.7 compatibility again.
",hcatlin,nex3
1903,2015-11-15 22:15:13,"My thoughts are that we should take the functions as they are, especially the prefixed ones, and in prep for `4.0`, we can reorganize stuff so that it makes more sense and will make it so that @nex3 can focus on the important parts of the module system.

My proposal is as follows:
- Break up the functions into the groups that will (eventually) become modules (str-, map-)
- Create prefixed versions of all (even legacy) functions and use those as the current recommended
- Allow for simple deprecation warnings of ""str-"" prefixed (and non-prefixed legacy) functions in `4.0` itself
- Change the way we use `declare` to make deprecation warnings easier, and to build a logical grouping around what will become standard lib modules later.

Basically, @nex3, would you be up for letting me dig into the functions and function tests and start getting them ready for the work that you'll be doing with 4.0?
",hcatlin,nex3
1896,2015-11-13 17:39:33,"Now, map-merge, map-get, and map-has-key all accept various forms of nested Map logic as per @nex3's specifications in #1739, with the addition of a nested compatible map-has-key.
",hcatlin,nex3
1893,2015-11-12 20:01:37,"# Application Scenario

External Vendor css files that are loaded using ``@import` is too slow compared to embedding (copy/paste). I realise it is a planned feature.
# Application Solution

Embed those specific notorious css files in the master.sass file
# Noted concerns and alternates
- Admins didn't want to use `!force` in the past
- Admins wanted to use @use syntax, which I am not sure what it is or where it is
- I like @chriseppstein extension and liked it for a while now. Just looking at web as such there are already technologies (UI applications) for technologies (Web) for technologies (CSS) for technologies (SASS). I pity the younger kids who have to learn all this and find a full-stack job knowing all the 100 languages and frameworks.
# Request
- What syntax can we use? `@include ""folder/file.css""`? Since include seems to be popular term in several languages/frameworks ng-include, #include and so on.
- What is a simple clean built-in solution in SASS?
",abibell,chriseppstein
1891,2015-11-11 20:11:03,"I'm starting a new thread for this request, because while it's a solution to #1122, it's not the same as the title of that issue.

I propose that we treat precision like we do units. Set Sass::Script::Value to have precision not just defined as a class variable, but instead an instance variable. By default, we set it to whatever the default is. If you want to use a higher precision (or control it in your library/module), you can modify it with a function call. The left-hand value in any operation is the one that determines the output precision.

Adding two functions:

1) `value-precision($number)` which returns the current precision of the number
2) `value-set-precision($number)` returns a new copy of `$number` with a new precision set

We could also drop the `value-` prefix or use something else, if it seems more elegant. To work with future modules, I'd suggest whatever is on the left hand side would be the standard library name for these kinds of functions. Maybe `numeric` or `format`?

Here's some example usage.



I think this is much better way to deal with the problem... each library can make it's own call about aesthetics. The function names are longer than normal people would want to write all the time (a concern @nex3 brought up in #1122) and I think would cover those cases where we _know_ precision isn't set.

This shouldn't break any existing code. It has almost no side effects. It would solve the issues these users are highlighting. 
",hcatlin,nex3
1891,2015-11-12 22:34:12,"I don't understand why we are revisiting this without any new ideas being proposed except a different name for a function that @nex3 rejected for grounds that would still apply here as well.
",chriseppstein,nex3
1888,2015-11-12 22:57:16,"The function names and stubs look good, and seem to be pretty similar.

Obviously, you are using the `@import ""fs(dir)"";` because that's the only real hook you have in the current Sass syntax, but I think we can agree that wouldn't be the form we'd want this to take.

Also, I really, really want to start thinking about how to form these utilities into standard-library modules that can be optionally included (or, in the case of fs, disallow it in many instances).

Hence, translate these into `$fs.exists($dir)` from `fs-exists($dir)`... I think this is something we could do easily across the board as equivalent functions.

@nex3 are you willing to consider revisiting our relationship to the file system?
",hcatlin,nex3
1870,2015-10-27 17:46:56,"https://tabatkins.github.io/specs/css-nesting/#at-nest

We should parse `@nest` directives as nested selectors and just drop the `@nest` directive in our output. Later if `@nest` becomes well supported we can output all nested selectors as `@nest` directives instead of permuting/expanding them.

@tabatkins @nex3 thoughts?
",chriseppstein,nex3
1864,2015-10-27 17:42:23,"We sometimes add support for drafts when they are likely to land or when the syntax can be transpiled to a supported syntax. Both of which are true for this feature.

We'll add support for the syntax because it's very dev friendly and we can convert it to supported syntax during compilation. That is: `(width < 200px)` will compile to (max-width: 199.99999px) and `(20em < device-width <= 50em)` will become: `(min-device-width: 20.00001em) and (max-device-width: 50em)`.

/cc @nex3 
",chriseppstein,nex3
1854,2015-10-07 20:51:16,"It is fairly common to have functions that register information at the global level. Doing this involves some syntax that usually quite ugly. The two ways of doing this are to set a variable that is then disregarded or to assign a property to the output of the function which returns null thus causing the property to not be output.

Calling functions strictly for their side-effects is not something I'm particularly keen on encouraging -- especially since Sass functions mostly return a useful value. That said, I think we should have the conversation about whether we should allow a bare function to be called at the root-level of the stylesheet since I've had several people ask me for this feature.

Example:



Note: we could add a directive to do this with existing syntax rules. but this offers so little over `@include` that I don't think it's worth it.

@nex3 thoughts?
",chriseppstein,nex3
1847,2016-03-03 19:26:21,"This is complicated because `round()` returns a number and Sass will still round that number to the global precision setting unless we somehow set that number with a flag that says ""this instance of this number has this particular precision."" Alternatively it can return a string but that number could no longer be used for further math calculations. @nex3 is against the idea of flagging a number to have an instance specific precision and strings create other complications that will end up creating headaches for people. So basically, we don't have a consensus a good solution to this issue is.
",chriseppstein,nex3
1836,2015-10-07 08:40:05,">  just in case selectors with a leading tilde actually becomes valid in the future.

In the beginning Sass didn't even parse selectors, we just grabbed a string of stuff until the curly brace and said ""this is a selector"". As sass matured, our parsing of selectors has grown to support the features we've added (E.g. `@extend`) but our errors tend to be very simple like ""you can't have a . without a classname that follows it"" and these are mostly generated by our parser just being confused based on the selector grammar. Sass's selector grammar allows leading combinators because nested selectors allows leading combinators. This is to say, that we aren't raising an error here because we just don't raise selector errors unless Sass is confused. Sass generally doesn't raise errors because we think a browser will be confused. Usually Sass gets confused on behalf of browsers because we're all on the same CSS team but not always.

All that said, @kareems there is an easy way to get the behavior you seek:



Sass does not remove the parent selector when the parent reference (`&`) is used in SassScript contexts. usually this is just a pain in the ass requiring the use of `@at-root` but in this case it's helpful.

So. The larger issue here is ""Should Sass raise errors for clearly invalid selectors?"" For example, Sass will happily pass `~ ~ ~ .foo { ... }` along to a browser. I don't know why we don't raise an error for combinators that aren't combinating other than ""we just never wrote that code"". Since @nex3 wrote most, if not all, of the selector code I'd like her to weigh in.
",chriseppstein,nex3
1836,2015-10-07 16:11:59,"That's really well said, Chris. It's funny now that most of the newer CSS programs start as CSS parsers as their first step, where we initially avoided tackling that. Like, the selectors are between you and your browser.

Definitely something to reconsider these days, but I'll also say @nex3 is the one I want to hear from.
",hcatlin,nex3
1819,2015-08-28 22:07:30,"Pending review from @nex3 
",chriseppstein,nex3
1817,2015-08-31 19:39:04,"re-opening for consideration of import v2. I actually think there's an expectation that import context does not work the same as selector nesting and I'd like to think about changing this. @nex3 what do you think about making the selector context outside the import not be a standard nesting for imported selectors. This would also allow those imported selectors to still define top-level constructs like mixins, etc.
",chriseppstein,nex3
1807,2015-08-25 22:41:12,"@nex3 can you weigh in here? This is a superselector according to sass. I thought we basically choose the longest superselector in the extended selector to be shared with the extending selector, so I suspect this is a bug.


",chriseppstein,nex3
1805,2015-11-15 21:55:57,"@chriseppstein Can you take a look at this? I'd like to get all the TODOs fixed or intentionally disabled before we merge.
",nex3,chriseppstein
1792,2015-08-14 20:47:36,"(a) Yes.

(b) Somewhat. @chriseppstein would be able to continue the language design, and [LibSass](https://github.com/sass/libsass) is in a good position to carry forward development efforts.

(c) There is quite a lot of API documentation, although in practice it doesn't seem to contribute to a lot of external contributions.
",nex3,chriseppstein
1782,2016-12-18 23:55:36,"I'm re-opening for now, but I need to talk to @chriseppstein about how we want to handle this. Due to the holidays, that may take a few weeks.",nex3,chriseppstein
1778,2015-07-18 01:02:05,"Spurred by #1774, I started thinking about how messy interpolation is in SassScript at the moment and how to clean it up. This issue is the result of that thought process. I'm especially interested in hearing what other implementors have to say, but community members are welcome to chime in as always.
### History

Long ago, when only the indented syntax existed, SassScript couldn't be used directly in property values. In order to give properties dynamically-generated values, they had to be interpolated using `#{}`. Eventually, we figured out how to make SassScript compatible enough with CSS property values that we decided to just let properties use it directly. For backwards compatibility, these properties still needed to support interpolation, so we came up with a way to have interpolation work more or less anywhere in a SassScript expression.

Unfortunately, working ""more or less anywhere"" was a parsing nightmare, and the specifics of where interpolation can be used and its effect on the surrounding script are bizarre and arcane. @chriseppstein and I want to fix that by substantially limiting the places `#{}` can appear and clarifying exactly what it does to the surrounding script.
### Proposal

I propose that, as today, `#{}` be allowed either within strings (quoted or unquoted) or on its own. However, its effect will be limited to the strings that contain it or to its own value. Specifically:
- When parsing or evaluating a quoted string, treat interpolation the same way it's treated today.
- When parsing an identifier, treat interpolation as though it's an alphabetic character. When evaluating an interpolated unquoted string, concatenate the literal identifier characters with the values of the interpolated segments.
- Otherwise, parse an interpolation as an individual expression. When evaluating it, return its value as an unquoted string.

Here are some examples (I'm including quotes for unquoted strings in the output to clarify their extents):
- `""a #{b} c""` would continue to produce `""a b c""`.
- `a#{b}c` would continue to produce `""abc""`.
- `a #{b}c` currently produces `""a bc""` but would produce `""a"" ""bc""`.
- `a#{b} c` currently produces `""ab c""` but would produce `""ab"" ""c""`.
- `a b#{c}d e` currently produces `""a bcd e""` but would produce `""a"" ""bcd"" ""e""`.
- `a #{b} c` currently produces `""a b c""` but would produce `""a"" ""b"" ""c""`.
### Design decisions

The primary question when figuring out how to handle this was how much interpolation should be restricted. @chriseppstein and I agree that interpolation in SassScript reads strangely in many situations, but we ended up deciding to continue allowing it in most places. One major reason for this is backwards-compatibility: no matter what we do, the process of making this change will be painful, and any functionality we can preserve will help mitigate that pain. But there were also compelling use cases for retaining interpolation in various situations.
#### Interpolation in unquoted strings

It was tempting to restrict interpolation for use _only_ in quoted strings. Interpolation in unquoted strings can be mimicked using `+`, and allowing it in unquoted strings could produce the incorrect impression that interpolation is performed before any other SassScript resolution. However, we decided to allow this for several reasons:
- Backwards compatibility, as described above.
- Similarity with quoted strings. It's not always obvious that unquoted strings and quoted strings are the same sorts of value under the hood, but sharing capabilities helps reinforce that idea.
- Similarity with other identifiers. Interpolation can be used in almost all most non-SassScript contexts where identifiers appear, most notably property names, so it's natural that users would think that all Sass identifiers can be interpolated.
- Vendor prefixes. It would be very difficult to dynamically choose vendor prefixes for function names or other values, since `-` on its own is not an identifier.
- Aesthetics. Although `font-stretch: $amount + -condensed` is legal, it's less clear and less pleasant than `font-stretch: #{$amount}-condensed`.
#### Interpolation outside of strings

The other big decision was whether to allow a bare interpolation expression that wasn't attached to any string at all. Both of us were fine with deprecating this until we remembered one situation where it's by far the best solution: a slash delimited. Right now when users want a slash delimiter for the values of properties such as `font`, and they want one of its values to be dynamic, by far the best way to do that is with interpolation: `font: 12pt/#{$var} sans-serif`.

We considered coming up with a new way to produce a literal slash without using interpolation, but we didn't find anything that was clear enough to warrant the migration cost for all the stylesheets using the current method. In the end, we decided that since the current method looks pretty decent and can work with a more reasonable definition of standalone interpolation, we would leave it as-is.
### Deprecation process

Any change we make here will be backwards-incompatible. Since interpolation is such an old feature, we have to be very careful to only surface deprecation warnings to people whose stylesheet semantics will actually change (or as close as possible), and to provide them with actionable ways to fix those stylesheets. This is complicated by the fact that the effects of this change are difficult to reason about locally; an expression like `a #{b} c` remains valid, and whether it's problematic in practice depends on things like whether its value is used in some string-specific way.

I haven't fully thought through how to handle the deprecation, but a set of heuristics seems like a good place to start. First, let S1 be the value of an expression containing interpolation under the old rules, and E the value of the same expression, to the extent that S1 covers. Let S2 be the conversion of E to CSS.

For example, suppose the expression in question is `a #{b} + c`. S1 is `""a b + c""`, E is `""a"" ""bc""`, and S2 is `""a bc""`.
- If S1 and S2 aren't semantically identical when interpreted as CSS, issue a warning. This means that `#{a} + b` would emit a warning since S1 is `""a + b""` but S2 is `""ab""`. However, `#{a} b c` would not emit a warning, since S1 and S2 are both `""a b c""`. Note that an expressions like `#{a} / b` _should not_ emit a warning here, since we know that it will produce `a/b` under the new semantics.
- Otherwise, if E is not a string, set an ""interpolated"" flag on S1. If any operation is performed on S1 that wouldn't first convert it to a string, emit a warning.

Obviously this requires a more explicit notion of how to detect when S1 and S2 are CSS-semantically identical, and how to tell which operations would be a problem in the second case. But I think it's a good starting point.
",nex3,chriseppstein
1778,2015-08-25 01:29:27,"@mgreter @xzyfer thoughts?
",chriseppstein,xzyfer
1761,2015-06-30 23:29:11,"Subtraction and hyphens tripped me up for a while today before I realized that `margin: 2em-1em` will not perform subtraction. I thought that since [Division and /](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#division-and-slash) was so well documented, then it was the only exception to the operators. :stuck_out_tongue: not so!

I'm not an authority on the statements I made in this change, but I used @nex3's explanation in #853 as guidelines.
",srawlins,nex3
1716,2015-05-03 02:16:51,"cc-ing @chriseppstein, just in case the use of Compass has something to do with this. 

The stylesheet in question is from one of my users, so I can't disclose it without his permission. It's far too complex for me to remove the Compass dependency and test compiling with just Sass.
",bdkjones,chriseppstein
1642,2015-02-17 15:47:35,"Yes this is the expected behavior. Refer to @chriseppstein or @nex3 for doc changes.
",Stephn-R,nex3
1642,2015-02-17 15:47:35,"Yes this is the expected behavior. Refer to @chriseppstein or @nex3 for doc changes.
",Stephn-R,chriseppstein
1625,2015-02-04 18:12:53,"Hmmm. I specifically wrote code to [deduplicate watched paths](https://github.com/sass/sass/blob/stable/lib/sass/plugin/compiler.rb#L411-L425). I wonder if it's not working correctly or if @nex3 changed something that causes this to be bypassed now.
",chriseppstein,nex3
1608,2015-01-20 17:49:37,"Sass extensions are currently ruby based. This was all well and good while we only had one implementation but with libsass in the mix, there is no way to introduce sass extensions that can work everywhere. The ruby extensions syntax is highly dependent on the specifics of the ruby implementation. I see a couple options:
1. Define a way to create extensions that support implementation specific code. For libsass this would be a shared object file and some way to initialize it. For ruby this would be much like what we have right now.
2. Choose a highly interoperable language for writing sass extensions and a common API in that language that all implementations would need to support. The most likely candidate for this is probably Lua. It is lightweight, fast, and fairly easy to write code in.

In addition to the extension support, I think it would be good for code that depends on extensions to make that dependency explicit using some special directive in the sass file itself. This could be as simple as letting `@import` (or some sass 4.0 equivalent) refer to sass ""extensions"" (since conceptually they define functions not unlike a sass file could). Or we could introduce some new directive for this.

/cc @akhleung @hcatlin @xzyfer

This is a major hurdle for making compass cross-implementation compatible.
",chriseppstein,xzyfer
1602,2015-01-17 15:25:55,"Currently, the `sass` and `scss` executables silently switch to `--update` mode if multiple colon-separated paths are passed on the command line. This leads to confusing differences between `sass foo:bar` and `sass foo:bar baz:bang`, especially if `foo` and `bar` are directories.

We should change the behavior to never enable `--update` mode without the flag itself being explicitly passed. This means we'll need to deprecate handling directories without `--update`.

This issue has been retargeted by @nex3. Original issue follows:

---

I've been working on a [pull request for grunt-contrib-sass](https://github.com/gruntjs/grunt-contrib-sass/issues/178) and noticed that when passed only one file, the sass executable automatically acts as if `--force` was passed.  I believe this is caused by the `@args.size` clause in an [if statement in sass_scss.rb](https://github.com/sass/sass/blob/af77545b39e042a42b1e3200c6dfa4679d2c0221/lib/sass/exec/sass_scss.rb#L40-L47).

I wrote a shell script to demonstrate this behavior:



This is the output on my system:



I haven't been able to find any documentation that references this feature.  Is it an intended feature?  If so, would you accept a PR to add this to the documentation?
",danfinnie,nex3
1598,2015-11-07 00:34:33,"@nex3,

This is so annoying. If we allow importing of CSS files in #556 (and already with @chriseppstein's https://github.com/chriseppstein/sass-css-importer I don't see why you wouldn't be able to override `url()`.

I'm importing a 3rd-party CSS file (that I don't want to modify), but it has relative urls to the assets. Without being able to override the `url()` function (and reset it after import preferably), I have to modify the 3rd party CSS. :(
",davidbarratt,chriseppstein
1596,2015-01-16 10:47:24,"Hey @Stephn-R, you're missing the point here.

You're right that @nex3 added removal of duplicate classnames as an optimization. The `.foo.foo` selector indeed targets the same elements as `.foo`.

But @justinryder has pointed out that a `.foo.foo` CSS selector has specificity different from `.foo`, and reducing `.foo.foo` to `.foo` may actually change the looks and/or layout of the page.

Consider this [example](http://sassmeister.com/gist/6fd6837ebacf730e3f57):



A `<div class='foo'></div>` element will be red. But if you replace `.foo.foo` with `.foo` in Sass, then the element will be blue.

This is a neat technique to override the default looks of elements styled with third-party CSS, without caring for the order of imports.

@nex3, looks like this feature was intended as an optimization to remove redundancy but it actually modifies CSS semantics, huh?
",lolmaus,nex3
1590,2015-01-12 01:11:41,"Because the final computed color can change at run-time based on a large number of things, from nesting to multiple classes to inline styles and can change on a per-page basis based on all of those things.

In #1582 @chriseppstein is proposing a way to get a data structure of the current CSS that would be placed using `@content` that may work with some custom helpers around it.
",Snugug,chriseppstein
1573,2014-12-27 23:25:56,"I recall reading a comment from @nex3 where she explained she does not want to include transparent mixins in Sass. Sass code should be obvious. You should not have some logic hidden behind what looks like a regular CSS declaration.
",HugoGiraudel,nex3
1573,2015-01-06 01:48:47,"The exact issue and comment is [#525/8995033](https://github.com/sass/sass/issues/525#issuecomment-8995033). Quoting @nex3 from that issue:

> I don't like this sort of thing at all. I consider it a pretty grievous misfeature in Stylus. It's very important that someone reading a Sass file be able to consistently determine what's going to be directly compiled to CSS and what's going to have additional processing applied; silently converting properties that look identical to plain CSS blows this completely out of the water. The closest I'd be willing to come is some variation on the proposals in #366.
> 
> Additional problems with this approach include:
> - SCSS is a CSS superset. Part of what that means is that valid CSS should have the same semantics in SCSS as it does in CSS. This proposal violates that.
> - Sass carefully avoids any knowledge of specific CSS properties and their semantics so as to ensure that it doesn't become too tightly coupled to the way CSS works at any specific point in time. This proposal violates that as well.
> - Compass's CSS3-compatibility mixins allow users to thoroughly customize which browser prefixes to show using standard Sass language features. This proposal does now.
>   This is backwards-incompatible with existing Sass stylesheets.
",Snugug,nex3
1562,2015-01-09 17:24:28,"In 3.4.5 @nex3 changed the watcher to observe the current working directory (Commit e68d72b8). My guess is that your current working directory has a lot of files or maybe it includes network shares as mentioned by @Stephn-R. That change addressed issues #1393 and #1411 so if we were to revert this, we'd need to find other ways to fix those.
",chriseppstein,nex3
1560,2015-01-12 10:37:56,"What do you consider to be ""semantically valid Sass""? Is it what you expect it to be?

From my point of view, ""syntactically valid Sass"" is what @nex3 and @chriseppstein determine to be.
",lolmaus,nex3
1555,2014-12-09 22:24:51,"The solution described by @chriseppstein in https://github.com/sass/sass/issues/1050#issuecomment-36097901 solves my problem.
",OliverJAsh,chriseppstein
1534,2014-11-20 21:11:31,"@nex3 What is the reason for not having a support chatroom?
",ankurp,nex3
1531,2014-11-18 22:04:26,"I am not quite sure why Sass does not provide a built-in way to compare (therefore allow operations on) angles from different units (`deg`, `grad`, `rad`, `turn`). 

@chriseppstein wrote this function a while back to do it, but I can't see any reason for Sass not to be able to perform such operations given that there is no context involved whatsoever.



Do you think like this could be added so we don't have to move this function around?
",HugoGiraudel,chriseppstein
1521,2014-11-13 12:58:25,"@nex3, @chriseppstein, @thedarkone SASS people, may I draw your attention as well to this? 
",AndrewRevinsky,nex3
1521,2014-11-13 12:58:25,"@nex3, @chriseppstein, @thedarkone SASS people, may I draw your attention as well to this? 
",AndrewRevinsky,chriseppstein
1521,2014-11-13 12:58:25,"@nex3, @chriseppstein, @thedarkone SASS people, may I draw your attention as well to this? 
",AndrewRevinsky,thedarkone
1512,2015-03-11 00:31:32,"Actually I'm not sure with whom you agree (you didn't clearly state that). But let me explain it a little more. The example given by @xzyfer is unfortunately not optimal, since the `and` comes before the `or`, and in this situation the parentheses don't make a difference, since the `and` will be evaluated first (as it should to its precedence). But this changes if you have the `or` first. The key here is that `and` has a higher precedence than `or`, so the parentheses are needed if we want to give `or` the highest precedence in the expression (and ruby sass seems to remove exactly these parentheses).

Take this haskell example:



Or in Perl



I gave this example in my post above:



Which ruby sass changes to:



I actually created a test, and now comes the clue: It seems that the specs @cimmanon mentioned are implemented pretty strict, so that something like the following will always be ignored:



So take this example:



This actually shows `works` in every browser I tested (firefox, chrome, opera). That should prove that removing the parentheses actually does change the behavior, although in a different way than I expected!
//CC @nex3 @chriseppstein 
",mgreter,chriseppstein
1484,2014-10-23 14:15:49,"Some users want to use sourcemaps in development without creating any additional files, or even entirely over stdin/stdout. We should add an additional sourcemap type (`in-css`? `base64`? `super-inline`?) that does this.

**Edited by @nex3 to retarget the issue. Previous report below:**

I can't find any possibility to get the sourcemap without having to write both, the compiled `.css` and the sourcemap file to disk.

I am looking for something like:



which would output the sourcemap instead of the compiled `.css`.

This is relevant when writing transformers in certain frameworks since they only work in memory.
",enyo,nex3
1466,2014-10-07 22:53:47,"As a followup to our announcement that Ruby Sass and libsass would have tighter collaboration, I'd like to create a separate repo in the sass organization where we will centralize all new features and changes to Sass: The Language‚Ñ¢.

Features there will be closed when the change has been approved and implemented in sass-spec, sass, and libsass.

I'd like to keep the RFC process very informal. Anyone and everyone should be able to follow along and weigh in -- just like our current issue tracker.

As a transition plan, I think we should just link to existing Sass feature requests but any new requests should originate there.

This new repo is where we'd be able to track what features are in what versions of Sass: The Language‚Ñ¢ starting with what's in 4.0 (assuming 4.0 is the release after 3.4).

I'd like each RFC to be named for release and detectable using feature detection (aka feature-exists())

cc: @nex3 @hcatlin @akhleung 
",chriseppstein,nex3
1465,2014-10-07 18:55:24,"Sass might be resolving interpolation before it knows whether it's a block comment. We should wait for @nex3 to comment on this.
",lolmaus,nex3
1464,2014-10-21 01:37:14,"@nex3 Can we please re-open this issue?  
",thejase,nex3
1454,2014-09-29 17:06:39,"@pavellishin, yes, as you noticed, this behavior was introduced in the recent version. Let's wait for @nex3 to tell whether it is a feature or a regression.

I consider this a regression because it breaks existing code and i can't think of any reasoning behind it.
",lolmaus,nex3
1444,2014-09-19 22:14:22,"Currently Sass supports Ruby versions back through 1.8.7, despite the fact that it's reached its official end of life. This is largely because Mac OS X through version 10.8 bundled Ruby 1.8, and Mac users make up a substantial portion of our user base.

Most users are using Mac OS 10.9+ these days, though. Not enough to safely remove 1.8.7 support, but enough to figure out a plan for how we want to do so in the future. We have analytics set up for [the Sass website](http://sass-lang.com), which should match our user demographics reasonably well. Right now the numbers say we have 89% of our visitors on 10.9+, which leaves 11% on versions that run the risk of being broken if we were to remove 1.8.7 support today.

I'd like to find a threshold percentage after which we start acting to remove 1.8.7 support. 5% is my initial instinct. It took 10.8+ about 25 months to reach 95% share after release, but 10.9 seems to be gaining adoption much faster, so we may be able to turn down 1.8.7 support in the next year.

When we do make the call and decide to remove support, we should immediately add a deprecation warning to whatever the current stable version of Sass is at the time, notifying users that their Ruby version will soon be unsupported and encouraging them to upgrade. In the next breaking release, we will remove support entirely.

@chriseppstein Thoughts?
",nex3,chriseppstein
1440,2014-09-18 13:45:05,"@dustindowell22, i doubt that it has anything to do with CodeKit.

For the availability of the warning, let's wait for @nex3's comment.
",lolmaus,nex3
1426,2014-09-11 16:11:19,"What exactly do you consider to be a bug? If this:

> It seems to me that %foo within print `@media` should just be silently ignored.

then you're seeing the intended behavior and @nex3 and @chriseppstein are perfectly aware of it.

I had been asking them to make `@extend` produce separate sets of extended classes for each media query. This would make using extends in media queries much simpler and it seems that you want the same thing. Well, my request was denied and its discussion was consolidated into #1050.
",lolmaus,chriseppstein
1426,2014-09-11 16:11:19,"What exactly do you consider to be a bug? If this:

> It seems to me that %foo within print `@media` should just be silently ignored.

then you're seeing the intended behavior and @nex3 and @chriseppstein are perfectly aware of it.

I had been asking them to make `@extend` produce separate sets of extended classes for each media query. This would make using extends in media queries much simpler and it seems that you want the same thing. Well, my request was denied and its discussion was consolidated into #1050.
",lolmaus,nex3
1425,2014-09-10 14:07:36,"I might be wrong about the deprecation status.

Unfortunately, @chriseppstein [did not](https://github.com/sass/sass/issues/1424#issuecomment-55002054) explain the [differences](http://sassmeister.com/gist/a9a9a2edf2b43623a72d) in behavior between the normal and interpolated parent selector. I believe it might be as follows:
1. If `&` appears in the selector, the previous selector in hierarchy is reconstructed.
2. If `&` does not appear in the selector, the current selector is appended to the previous selector.
3.  Interpolated `&` is not treated as an appearance.
4. The `@at-root` directive removes the previous selector, unless it's explicitly inserted via `&`.
",lolmaus,chriseppstein
1406,2014-08-29 18:02:57,"I saw this today too. bootstrap-sass 2.3.2.2 is returning a bad path [here](https://github.com/twbs/bootstrap-sass/blob/v2.3.2.2/lib/bootstrap-sass.rb#L22) for my app.

Looks like sass ~~master~~ stable is OK, this [new commit](https://github.com/sass/sass/commit/46bb5d4aeae0c121413a295f7840ec50f21fc951) seems to solve it. @nex3 can that be released?
",boone,nex3
1402,2014-08-28 13:43:21,"I briefly talked to @chriseppstein on Twitter and was pointed here. I'm trying to pinpoint why [Flint's](https://github.com/ezekg/flint) compile time seems to exponentially grow as the cache/instance maps get larger. Are you aware of any performance issues for maps within SassScript? My project compile times are averaging ~200s. I've already implemented a pretty robust caching system for Flint, but really didn't see _much_ gain in performance. From what I can pinpoint, it seems that using `map-get` on large maps is the bottleneck.

For example, running this locally and watching the debug output you can see the performance regression as each instance is stored and fetched from the global `$flint__instances` map.



The above code will output 200 instances, one instance for each breakpoint (4) per mixin call. Here is an example of a single instance map. My projects range from about 100-200 of these, all stored in the global `$flint__instances` map.



Like I said, I've been unable to put in the amount of debugging time I need to wholly test if this is a Sass issue, or rather an issue with Flint. I'm really filling the issue to see if maps themselves have any performance issues I can look into. 
",ezekg,chriseppstein
1396,2014-08-25 18:42:42,"@Snugug, it's not a font issue: the old CSS output should've produced the same characters as the new one. And the guy is only unhappy with the new output.

@slawaEremin, that's intended and valid CSS. Extract from Sass 3.4.0 [changelog](http://sass-lang.com/documentation/file.SASS_CHANGELOG.html):

> Sass now follows the CSS Syntax Level 3 specification for determining a stylesheet‚Äôs encoding. In addition, it now only emits UTF-8 CSS rather than trying to match the source encoding.

I don't know how to revert to the old output, you should wait for @nex3 to comment on that. But why doesn't the new format suit you in the first place?
",lolmaus,nex3
1376,2014-08-18 23:59:57,"@nex3 Says this is fixed.
",chriseppstein,nex3
1368,2014-08-09 05:37:58,"That throws an error in sass 3.3.14:



@chriseppstein could we reopen this?
",geddski,chriseppstein
1361,2014-08-07 01:09:59,"the url function in CSS has special parsing rules to allow it to treat the argument as a string. Sass has special handling for this, but when it's triggered it's a special string instead of a function call. @nex3 perhaps we should parse the url as a function call with an unquoted string as the argument instead of as a special string?
",chriseppstein,nex3
1349,2015-07-13 15:27:41,"Sorry in advance for the lengthy post, but someone need to do it. This is a reply to [#1739 (comment)](https://github.com/sass/sass/issues/1739#issuecomment-111102236).
@HugoGiraudel, @davidkpiano, @ArmorDarks I understand that sass is a function based language and that's part of the reason I love using it because it makes doing difficult tasks easy; however using functions **alone** to handle maps and lists can make what should be simple tasks seem overly complicated. In my issue #1349 I suggested using dot/bracket notation for variables only, and the way I suggested it to be implemented would not interfere with the sass ecosystem and instead be a huge improvement to the best preprocessor available. The longer implementing dot/bracket notation is ignored, the bigger the issue becomes. There are several notable libraries out there that have implemented their own way of handling maps, including some that @HugoGiraudel has written. The mere fact that there have been so many libraries attempting to solve this problem should be a clear indicator that it‚Äôs an issue worth standardizing.  It also means everyone learns how to handle large sass maps in a different way, and therefore every time someone moves jobs they have to change the way they deal with sass maps and that means relearning something that should have been implemented from the start. These various implementations make it harder to understand what's going on in people‚Äôs code, and it make it even more difficult for new people who are trying to learn sass to understand what they are seeing.

@davidkpiano Is 100% correct `map-get($map, foo.bar)` is a very bad idea. That's why I didn't suggest using dot notation in this way. However, if you implement dot notation similarly to how other notable languages use dot notation, it would solve these ridiculous problems everyone runs in to with maps.

In `js` and other languages that use dot/bracket notation you **can't** add `.` into the variable/key name for good reason, and it's pretty much the same point that @davidkpiano is trying to make. The difference being sass **does** follow suit and doesn't accept `.` in a variable/key name. If you tried to set a map key to be `foo.bar` you will get an error. The reason it returns an error is because sass interprets it as a css selector and since a css selector can't be followed by `:` an error is returned. Variables can't have a dot in them either for the same reason. So how does his example work? Well a sass key can be a type of `string`, `list`, `number`, `color`, or `map`. This means we can set a key to anything we want, and that allows us to do things like he's showing in his example. The reason his example works is because `nth(&, 1)` is a type of `list`. So when `map-get($map, nth(&, 1))` is called it's looking for key that matches the list of `nth(&, 1)`. If you absolutely have to have a `.` in your key name then you can do the same thing other languages do; just add quotes around the declaration to note that it's a string `""foo.bar""`‚Äî and that makes the key valid. 

Here's @davidkpiano example explained in depth, and the live example is on [sassmiester](http://sassmeister.com/gist/61a28cfb00edde026269) if you would like to see the output



##### These use cases can still use dot/bracket notation without any special functions being added



Implementing dot/bracket notation is something that needs to happen. It would make sass tremendously more readable, and it would make it easier for beginners with background knowledge of `js` and other languages that use dot/bracket notation easier to dive in to sass because they don't have to re-learn the same concept of structures/maps in a different way than they already know. The reason why I started using sass is because of it's extensibility, simplicity, and ease of understanding. The way maps(aka structures) are currently implemented makes it more complex than it needs to be. While I understand sass maps and use them on a daily basis, trying to teach a developer how to use sass map functions is harder than it needs to be and every time each developer has said ""Well why didn't they just use dot notation? That would be so much easier!‚Äù. I believe if there was a poll on implementing dot/bracket notation in sass and it was asked on all the major sass resource sites and email lists the majority of sass developers would agree that sass needs dot/bracket notation.

### Examples and use cases

Here are some more examples and use cases, how they are written with the current implementation of maps, and how they could be written using dot/bracket notation:

#### Setting a key value using other values from the same map.

Here is a [live](http://codepen.io/tjbenton21/pen/WvJWBz?editors=110) example that I had to use on codepen.



###### With map functions



###### With dot/bracket notation



#### Calling a dynamic key

This would be a use case for mixins and functions to call a key based off an argument that was passed:



###### With map functions



###### With dot/bracket notation



#### Getting a variable from a deeply nested map

This example is taken from the original post

###### With map functions



###### With dot/bracket notation



#### Setting a value on a deeply nested key

This example uses the same map from the original post.

###### With functions

The only real possibility to do this is to use a third party functions, like the one that @HugoGiraudel wrote and shared on [sitepoint](http://www.sitepoint.com/extra-map-functions-sass/), or the one that was written by @Snugug for [Sass-maps](https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss#L13), or another that was written by @cahnory for [PlastiCSS](https://github.com/cahnory/PlastiCSS/blob/master/function/_map-set.scss), or the one that was written by @pascalduez [gist](https://gist.github.com/pascalduez/14ef79d644483fc262da), these are just a few I came across in a single post by @chriscoyier on [csstricks](https://css-tricks.com/snippets/sass/deep-getset-maps/) and there are so many more out there, this was just from the first link in google.



###### With dot/bracket notation



#### Using `map-remove` with nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-keys`, and `map-values` on a nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-has-key` on a nested map

###### With map functions



###### With dot/bracket notation



### Bracket notation for sass lists

The bracket notation should also be applied to sass lists because it's still dealing with the same concept of getting and setting things in variables.

#### Getting/setting an item in a list(aka array)



###### With list functions



###### With bracket notation

Since sass isn't zero based like js the first item in the array would still be accesed through `1` and the last element would be accesed by the length of the list



#### Getting/setting an item in a list(aka array) that is nested in a map



###### With map/list functions



###### With dot/bracket notation



Dot notation is a very simple concept to understand regardless of your coding background, as it is already very common in several other languages. This would make it easer for other developers to learn sass, and utilize the power of sass maps. Implement it correctly would reduce the amount of wasted time by developers creating their own implementations of the sass map functions, as well as definitively solve a problem that others have already tried to hack their way around.
",tjbenton,pascalduez
1349,2015-07-13 15:27:41,"Sorry in advance for the lengthy post, but someone need to do it. This is a reply to [#1739 (comment)](https://github.com/sass/sass/issues/1739#issuecomment-111102236).
@HugoGiraudel, @davidkpiano, @ArmorDarks I understand that sass is a function based language and that's part of the reason I love using it because it makes doing difficult tasks easy; however using functions **alone** to handle maps and lists can make what should be simple tasks seem overly complicated. In my issue #1349 I suggested using dot/bracket notation for variables only, and the way I suggested it to be implemented would not interfere with the sass ecosystem and instead be a huge improvement to the best preprocessor available. The longer implementing dot/bracket notation is ignored, the bigger the issue becomes. There are several notable libraries out there that have implemented their own way of handling maps, including some that @HugoGiraudel has written. The mere fact that there have been so many libraries attempting to solve this problem should be a clear indicator that it‚Äôs an issue worth standardizing.  It also means everyone learns how to handle large sass maps in a different way, and therefore every time someone moves jobs they have to change the way they deal with sass maps and that means relearning something that should have been implemented from the start. These various implementations make it harder to understand what's going on in people‚Äôs code, and it make it even more difficult for new people who are trying to learn sass to understand what they are seeing.

@davidkpiano Is 100% correct `map-get($map, foo.bar)` is a very bad idea. That's why I didn't suggest using dot notation in this way. However, if you implement dot notation similarly to how other notable languages use dot notation, it would solve these ridiculous problems everyone runs in to with maps.

In `js` and other languages that use dot/bracket notation you **can't** add `.` into the variable/key name for good reason, and it's pretty much the same point that @davidkpiano is trying to make. The difference being sass **does** follow suit and doesn't accept `.` in a variable/key name. If you tried to set a map key to be `foo.bar` you will get an error. The reason it returns an error is because sass interprets it as a css selector and since a css selector can't be followed by `:` an error is returned. Variables can't have a dot in them either for the same reason. So how does his example work? Well a sass key can be a type of `string`, `list`, `number`, `color`, or `map`. This means we can set a key to anything we want, and that allows us to do things like he's showing in his example. The reason his example works is because `nth(&, 1)` is a type of `list`. So when `map-get($map, nth(&, 1))` is called it's looking for key that matches the list of `nth(&, 1)`. If you absolutely have to have a `.` in your key name then you can do the same thing other languages do; just add quotes around the declaration to note that it's a string `""foo.bar""`‚Äî and that makes the key valid. 

Here's @davidkpiano example explained in depth, and the live example is on [sassmiester](http://sassmeister.com/gist/61a28cfb00edde026269) if you would like to see the output



##### These use cases can still use dot/bracket notation without any special functions being added



Implementing dot/bracket notation is something that needs to happen. It would make sass tremendously more readable, and it would make it easier for beginners with background knowledge of `js` and other languages that use dot/bracket notation easier to dive in to sass because they don't have to re-learn the same concept of structures/maps in a different way than they already know. The reason why I started using sass is because of it's extensibility, simplicity, and ease of understanding. The way maps(aka structures) are currently implemented makes it more complex than it needs to be. While I understand sass maps and use them on a daily basis, trying to teach a developer how to use sass map functions is harder than it needs to be and every time each developer has said ""Well why didn't they just use dot notation? That would be so much easier!‚Äù. I believe if there was a poll on implementing dot/bracket notation in sass and it was asked on all the major sass resource sites and email lists the majority of sass developers would agree that sass needs dot/bracket notation.

### Examples and use cases

Here are some more examples and use cases, how they are written with the current implementation of maps, and how they could be written using dot/bracket notation:

#### Setting a key value using other values from the same map.

Here is a [live](http://codepen.io/tjbenton21/pen/WvJWBz?editors=110) example that I had to use on codepen.



###### With map functions



###### With dot/bracket notation



#### Calling a dynamic key

This would be a use case for mixins and functions to call a key based off an argument that was passed:



###### With map functions



###### With dot/bracket notation



#### Getting a variable from a deeply nested map

This example is taken from the original post

###### With map functions



###### With dot/bracket notation



#### Setting a value on a deeply nested key

This example uses the same map from the original post.

###### With functions

The only real possibility to do this is to use a third party functions, like the one that @HugoGiraudel wrote and shared on [sitepoint](http://www.sitepoint.com/extra-map-functions-sass/), or the one that was written by @Snugug for [Sass-maps](https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss#L13), or another that was written by @cahnory for [PlastiCSS](https://github.com/cahnory/PlastiCSS/blob/master/function/_map-set.scss), or the one that was written by @pascalduez [gist](https://gist.github.com/pascalduez/14ef79d644483fc262da), these are just a few I came across in a single post by @chriscoyier on [csstricks](https://css-tricks.com/snippets/sass/deep-getset-maps/) and there are so many more out there, this was just from the first link in google.



###### With dot/bracket notation



#### Using `map-remove` with nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-keys`, and `map-values` on a nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-has-key` on a nested map

###### With map functions



###### With dot/bracket notation



### Bracket notation for sass lists

The bracket notation should also be applied to sass lists because it's still dealing with the same concept of getting and setting things in variables.

#### Getting/setting an item in a list(aka array)



###### With list functions



###### With bracket notation

Since sass isn't zero based like js the first item in the array would still be accesed through `1` and the last element would be accesed by the length of the list



#### Getting/setting an item in a list(aka array) that is nested in a map



###### With map/list functions



###### With dot/bracket notation



Dot notation is a very simple concept to understand regardless of your coding background, as it is already very common in several other languages. This would make it easer for other developers to learn sass, and utilize the power of sass maps. Implement it correctly would reduce the amount of wasted time by developers creating their own implementations of the sass map functions, as well as definitively solve a problem that others have already tried to hack their way around.
",tjbenton,Snugug
1349,2015-07-13 15:27:41,"Sorry in advance for the lengthy post, but someone need to do it. This is a reply to [#1739 (comment)](https://github.com/sass/sass/issues/1739#issuecomment-111102236).
@HugoGiraudel, @davidkpiano, @ArmorDarks I understand that sass is a function based language and that's part of the reason I love using it because it makes doing difficult tasks easy; however using functions **alone** to handle maps and lists can make what should be simple tasks seem overly complicated. In my issue #1349 I suggested using dot/bracket notation for variables only, and the way I suggested it to be implemented would not interfere with the sass ecosystem and instead be a huge improvement to the best preprocessor available. The longer implementing dot/bracket notation is ignored, the bigger the issue becomes. There are several notable libraries out there that have implemented their own way of handling maps, including some that @HugoGiraudel has written. The mere fact that there have been so many libraries attempting to solve this problem should be a clear indicator that it‚Äôs an issue worth standardizing.  It also means everyone learns how to handle large sass maps in a different way, and therefore every time someone moves jobs they have to change the way they deal with sass maps and that means relearning something that should have been implemented from the start. These various implementations make it harder to understand what's going on in people‚Äôs code, and it make it even more difficult for new people who are trying to learn sass to understand what they are seeing.

@davidkpiano Is 100% correct `map-get($map, foo.bar)` is a very bad idea. That's why I didn't suggest using dot notation in this way. However, if you implement dot notation similarly to how other notable languages use dot notation, it would solve these ridiculous problems everyone runs in to with maps.

In `js` and other languages that use dot/bracket notation you **can't** add `.` into the variable/key name for good reason, and it's pretty much the same point that @davidkpiano is trying to make. The difference being sass **does** follow suit and doesn't accept `.` in a variable/key name. If you tried to set a map key to be `foo.bar` you will get an error. The reason it returns an error is because sass interprets it as a css selector and since a css selector can't be followed by `:` an error is returned. Variables can't have a dot in them either for the same reason. So how does his example work? Well a sass key can be a type of `string`, `list`, `number`, `color`, or `map`. This means we can set a key to anything we want, and that allows us to do things like he's showing in his example. The reason his example works is because `nth(&, 1)` is a type of `list`. So when `map-get($map, nth(&, 1))` is called it's looking for key that matches the list of `nth(&, 1)`. If you absolutely have to have a `.` in your key name then you can do the same thing other languages do; just add quotes around the declaration to note that it's a string `""foo.bar""`‚Äî and that makes the key valid. 

Here's @davidkpiano example explained in depth, and the live example is on [sassmiester](http://sassmeister.com/gist/61a28cfb00edde026269) if you would like to see the output



##### These use cases can still use dot/bracket notation without any special functions being added



Implementing dot/bracket notation is something that needs to happen. It would make sass tremendously more readable, and it would make it easier for beginners with background knowledge of `js` and other languages that use dot/bracket notation easier to dive in to sass because they don't have to re-learn the same concept of structures/maps in a different way than they already know. The reason why I started using sass is because of it's extensibility, simplicity, and ease of understanding. The way maps(aka structures) are currently implemented makes it more complex than it needs to be. While I understand sass maps and use them on a daily basis, trying to teach a developer how to use sass map functions is harder than it needs to be and every time each developer has said ""Well why didn't they just use dot notation? That would be so much easier!‚Äù. I believe if there was a poll on implementing dot/bracket notation in sass and it was asked on all the major sass resource sites and email lists the majority of sass developers would agree that sass needs dot/bracket notation.

### Examples and use cases

Here are some more examples and use cases, how they are written with the current implementation of maps, and how they could be written using dot/bracket notation:

#### Setting a key value using other values from the same map.

Here is a [live](http://codepen.io/tjbenton21/pen/WvJWBz?editors=110) example that I had to use on codepen.



###### With map functions



###### With dot/bracket notation



#### Calling a dynamic key

This would be a use case for mixins and functions to call a key based off an argument that was passed:



###### With map functions



###### With dot/bracket notation



#### Getting a variable from a deeply nested map

This example is taken from the original post

###### With map functions



###### With dot/bracket notation



#### Setting a value on a deeply nested key

This example uses the same map from the original post.

###### With functions

The only real possibility to do this is to use a third party functions, like the one that @HugoGiraudel wrote and shared on [sitepoint](http://www.sitepoint.com/extra-map-functions-sass/), or the one that was written by @Snugug for [Sass-maps](https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss#L13), or another that was written by @cahnory for [PlastiCSS](https://github.com/cahnory/PlastiCSS/blob/master/function/_map-set.scss), or the one that was written by @pascalduez [gist](https://gist.github.com/pascalduez/14ef79d644483fc262da), these are just a few I came across in a single post by @chriscoyier on [csstricks](https://css-tricks.com/snippets/sass/deep-getset-maps/) and there are so many more out there, this was just from the first link in google.



###### With dot/bracket notation



#### Using `map-remove` with nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-keys`, and `map-values` on a nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-has-key` on a nested map

###### With map functions



###### With dot/bracket notation



### Bracket notation for sass lists

The bracket notation should also be applied to sass lists because it's still dealing with the same concept of getting and setting things in variables.

#### Getting/setting an item in a list(aka array)



###### With list functions



###### With bracket notation

Since sass isn't zero based like js the first item in the array would still be accesed through `1` and the last element would be accesed by the length of the list



#### Getting/setting an item in a list(aka array) that is nested in a map



###### With map/list functions



###### With dot/bracket notation



Dot notation is a very simple concept to understand regardless of your coding background, as it is already very common in several other languages. This would make it easer for other developers to learn sass, and utilize the power of sass maps. Implement it correctly would reduce the amount of wasted time by developers creating their own implementations of the sass map functions, as well as definitively solve a problem that others have already tried to hack their way around.
",tjbenton,HugoGiraudel
1349,2015-07-13 19:54:14,"@tjbenton Sure

@HugoGiraudel I know you had different position regarding dot notation in past. Can you make any comments based on https://github.com/sass/sass/issues/1349#issuecomment-120967912 and https://github.com/sass/sass/issues/1739#issuecomment-111181142? Thanks in advance
",ArmorDarks,HugoGiraudel
1349,2016-08-19 12:53:06,"@michaelklishin THX ! Stylus is really a better choice for node developer !
",linkdesu,michaelklishin
1348,2014-07-31 20:17:54,"Sass has a `null` value. So you can `@return null` instead of `none` which is a string.

Also, side-effects are intentionally discouraged so if pure side-effect functions are awkward to use, this doesn't bother me, I actually like the mixin here, because mixins exist purely to perform side-effects.

@nex3 concur?
",chriseppstein,nex3
1342,2014-08-01 20:30:07,"I think this is caused by @chriseppstein's site deployment setup. It doesn't seem to be a problem for me, so it'll be fixed when I re-deploy later tonight.
",nex3,chriseppstein
1332,2014-07-23 15:44:24,"My bet is that @nex3 will turn this down because it will make Sass more different from CSS.

Meanwhile, you can use a custom function to do that. `c(13)` isn't much longer to write than `#13`.
",lolmaus,nex3
1327,2014-07-22 18:09:48,"@nex3 Thoughts?
",chriseppstein,nex3
1306,2014-08-29 23:46:43,"Oh I missed the notification, thanks for the quick fix @nex3! `:D`
",UltCombo,nex3
1304,2014-07-04 18:34:26,"Thank @lolmaus . I am creating a new Gird System and doing some test. A function will grab data from Sass map and create a comma separated list of multiple space separated lists, and then pass the list to Sass 3.3 `@each` directive to generate grids. That's why I was focusing on creating list. I just did some test that I might use a `@for` loop and the `nth()` function instead of `@each`. I'll keep working on it and let you know :)

@nex3 @chriseppstein It would be handy if Sass could support merge multiple lists into one nested list   :)
",P233,nex3
1304,2014-07-04 18:34:26,"Thank @lolmaus . I am creating a new Gird System and doing some test. A function will grab data from Sass map and create a comma separated list of multiple space separated lists, and then pass the list to Sass 3.3 `@each` directive to generate grids. That's why I was focusing on creating list. I just did some test that I might use a `@for` loop and the `nth()` function instead of `@each`. I'll keep working on it and let you know :)

@nex3 @chriseppstein It would be handy if Sass could support merge multiple lists into one nested list   :)
",P233,chriseppstein
1304,2014-07-04 20:46:38,"@P233, have a look at this example: http://sassmeister.com/gist/74c2bba1ac3744a236d2

For grids, you should check out [Singularity](https://github.com/Team-Sass/Singularity). It has this all figured out.

For advanced list manipulations, have a look at [SassyLists](https://github.com/Team-Sass/SassyLists/) from @HugoGiraudel.
",lolmaus,HugoGiraudel
1278,2014-06-10 16:05:08,"@jina I just noticed that the sass logo is slightly cropped at the right and at the bottom on the GitHub avatar
",LaurentGoderre,jina
1269,2014-06-05 22:26:53,"@nex3, I'd like to move the Sass repo to the Sass organization.

https://github.com/sass

Any objections?

https://help.github.com/articles/how-to-transfer-a-repository
",chriseppstein,nex3
1263,2014-06-01 06:14:34,"Hello,

This comes from a short discussion I had with @chriseppstein on Twitter.

I'd like to be able to use the compact output style without including comments.

uncompiled code:



compiled code:



At the time, there was a mentioned of more nuanced output options rather than a set of styles.

https://twitter.com/chriseppstein/status/468819519440297984

Cheers,
Pete
",peterwilsoncc,chriseppstein
1251,2014-05-19 21:38:02,"Why are you nesting this?

Edit: I see your explanation now. @apfelbox is right, you need to use @root with this.

@nex3 I think it's a bug that @font-face bubbles.
",chriseppstein,nex3
1247,2014-05-14 21:00:37,"I could see exposing this as a global `$-sass-version` variable. @chriseppstein?
",nex3,chriseppstein
1243,2014-05-09 19:49:53,"If I had the decision to make over again from the beginning, I'd probably have it follow your expected semantics. At this point, though, there's a lot of Sass out there whose behavior this could potentially change in subtle and difficult-to-track-down ways. I don't know that the benefit is worth that level of backwards incompatibility.

That said, if we did decide this was important, we do have room for some breaking changes in 4.0. We could also warn about it earlier than that and even make `sass-convert` re-order peoples' source to preserve the old behavior. @chriseppstein, what do you think?
",nex3,chriseppstein
1220,2014-04-18 15:24:06,"@nex3 or @chriseppstein can you please give it a look? This is very important feature for the company I work for. This feature enables us to do some A/B testing in sensible manner.
",emphaticsunshine,nex3
1220,2014-04-18 15:24:06,"@nex3 or @chriseppstein can you please give it a look? This is very important feature for the company I work for. This feature enables us to do some A/B testing in sensible manner.
",emphaticsunshine,chriseppstein
1178,2014-03-18 18:58:27,"Currently, the suggested and only api to extend Sass script functions are to monkey patch the `Sass::Script::Functions` module.

This can often lead to some plugin functions conflicting with others. Multiple `Sass::Engine`s maybe running in the same Ruby environments with different purposes. Its common to use Sass just as a css minifer since it does a good job. In this use case, you might not want any other functions leaking into the environment.

The idea is that you could pass in a module thats only extended on the `Engine`'s environment rather than globally.



I'm not attached to the api or option name. Just setting up a straw man. 

cc @nex3 @rafaelfranca
",josh,nex3
1175,2014-03-17 17:32:37,"Fixed by d4c5fff0160a78b66d78f10d7e60a92fc6a16d49.

I need to release a new 3.2 stable with this fix. @nex3 Please advise on how we can release new stable releases based on the 3.2 codebase.

I have branched off of the 3.2.15 tag: https://github.com/nex3/sass/compare/sass_3_2

We also need to roll this fix into the stable and master branches.
",chriseppstein,nex3
1143,2014-02-28 19:13:23,"@chriseppstein, do you think this is general-purpose enough to warrant inclusion in the core?
",nex3,chriseppstein
1143,2014-02-28 19:18:52,"@nex3 @chriseppstein I can tell you that we've needed to [create our own](https://github.com/Team-Sass/Singularity/blob/1.x.x/stylesheets/singularitygs/helpers/_directions.scss) in Singularity for the same reason. I'd love to see this in Core, especially if it includes `ltr`/`rtl`
",Snugug,chriseppstein
1138,2014-02-27 14:38:40,"The indented `.sass` syntax already has `=` for `@mixin` and `+` for `@include`.

I believe that other shorthand directives should follow the same pattern.

We need:
- `@function`;
- `@extend`;
- `@import`.

I don't think that @nex3 and @chriseppstein will accept this because it would make indented Sass kinda cryptic. On the other hand, i use `=` and `+` all the time and it's helping a lot, so...
",lolmaus,nex3
1138,2014-02-27 14:38:40,"The indented `.sass` syntax already has `=` for `@mixin` and `+` for `@include`.

I believe that other shorthand directives should follow the same pattern.

We need:
- `@function`;
- `@extend`;
- `@import`.

I don't think that @nex3 and @chriseppstein will accept this because it would make indented Sass kinda cryptic. On the other hand, i use `=` and `+` all the time and it's helping a lot, so...
",lolmaus,chriseppstein
1133,2014-02-25 20:39:02,"You need to use a more recent version of Compass. @chriseppstein can provide more details about which versions are compatible.
",nex3,chriseppstein
1110,2014-02-11 04:59:24,"Hey @chriseppstein: 3.3.2-RC3 Majestic Maple I believe. I uninstalled and worked fine with the stable gem.
",kevinSuttle,chriseppstein
1096,2014-02-01 10:02:17,"Thanks @nex3!
",badsyntax,nex3
1080,2014-01-10 11:52:11,"Great suggestion, i second that.

But i bet @nex3 will say as usual that it's counter-intuitive, will confuse users and thus shall not be implemented.
",lolmaus,nex3
1072,2014-01-07 01:23:28,"@chriseppstein Choose whichever solution you prefer and I'll squash.

The `assert_permutation` method should be generic enough to use it in other tests as well. However it is complex enough to warrant its own unit test.
",felixbuenemann,chriseppstein
1072,2014-01-15 00:44:01,"I toyed around with what it would take to make the Sass AST have a semantic equality check and it got hairy pretty fast.

None of these options make me particularly happy. Ultimately, I think we will find that and AST-based comparison is the most robust way of testing CSS equality -- especially as a way to test the output from other Sass implementations where minor output differences are irrelevant to be considered ""compatible"". However, for the time being, I think I prefer 28a99115b9b6925e22189d3d789ca019effba191 because it's a small fix even though it's not general.

@nex3 I leave the final decision to you.
",chriseppstein,nex3
1072,2014-01-15 00:52:25,"I've been playing around with this with sass-spec branches. Hard. Hard.
Hard.

On Tue, Jan 14, 2014 at 4:44 PM, Chris Eppstein notifications@github.comwrote:

> I toyed around with what it would take to make the Sass AST have a
> semantic equality check and it got hairy pretty fast.
> 
> None of these options make me particularly happy. Ultimately, I think we
> will find that and AST-based comparison is the most robust way of testing
> CSS equality -- especially as a way to test the output from other Sass
> implementations where minor output differences are irrelevant to be
> considered ""compatible"". However, for the time being, I think I prefer
> 28a9911https://github.com/nex3/sass/commit/28a99115b9b6925e22189d3d789ca019effba191because it's a small fix even though it's not general.
> 
> @nex3 https://github.com/nex3 I leave the final decision to you.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/1072#issuecomment-32324238
> .
",hcatlin,nex3
1072,2014-01-15 13:00:27,"I believe @nex3 already commented, that he would prefer to wait on the fix to ruby 2.1.0, which should land in the next minor release. I believe in that case ruby 2.1.0 should be marked as ""Allowed Failures"" on Travis CI for the time being.
",felixbuenemann,nex3
1062,2014-01-04 23:16:36,"I read through @nex3's code comments on the random function pull request and implemented the requested changes. I also added some extra tests that weren't requested.

See original pull request here: https://github.com/nex3/sass/pull/968
",hcatlin,nex3
1056,2013-12-22 11:42:32,"I'm sorry, what is the question here?

I assume it is that  you need a fraction and that it's printing out the division? If that's the case, unfortunately it's a case of pre-Blink Opera deciding to go against the trend of all other implementors and the W3C itself and requiring `o-dpr` to be a string as opposed to a number, not an issue with Sass. When you write `1.3 / 1`, as pointed out by @nex3 in #1030, Sass assumes that a space followed by a mathematical operation followed by a space should, in fact, be a mathematical operation. When working in pre-processed land, that is the most logical thing to do. The answer is to simply print it out as a string.

If, on the other hand, the issue is that Sass should be smart enough to know you meant a fraction there and only there, I'm afraid you're going to be out of luck as A) that version of Opera's device pixel ratio feature doesn't exist in stable Opera any more and is actively being depreciated and B) Sass has a fairly strict rule of being blind to browser-specific problems and implementations in order to best be future friendly.
",Snugug,nex3
1055,2013-12-20 03:48:22,"@chriseppstein and I have decided that, given that `@at-root #{&}-suffix` doesn't work as well as we'd hoped, it's worth the downsides to support `&-suffix` on its own.

This should throw an error if it generates an invalid selector. This error should be clear about how that selector was constructed from the source code.
",nex3,chriseppstein
1052,2013-12-18 04:48:27,"## Intro

I declare some simple `@extend`-only selectors:



Then I `@extend` them accordingly:



Now, I noticed that when you nest a previously declared `@extend`-only selector, it compiles nicely:



Will compile to:



Which is great! Rather than rely on the implementations, I can rely on the abstractions, and the compiled CSS respects this containing all declared concretions as descendants of the container.
## Issue

However, if when declaring the concretions you also define descendant structure:



Everything kinda goes sour:



The problem here is that it compiles various permutations of the descendants of `.container`. This _bloats_ the CSS unnecessarily, since the intent was:



But not:



The resulting CSS will still ""work"" when used, but can easily get out of hand with respect to the selector lists generated, especially given the fact that `@extend` can get out of hand if you're not careful anyway.

Now, I suspect this is essentially the same ""expected behavior"" as described by @chriseppstein in his gist https://gist.github.com/chriseppstein/6114279 (except that this doesn't involve the parent selector `&`, I don't know if that was relevant to the question that prompted the gist)

Anyway, I think it would be more sensible that this be controlled with a flag or similar mechanism, provided this is possible at all. Based on the gist, it sounds like the extraneous selectors are being purposefully generated, so it'd be nice to see that made optional. Whether such a flag should be inline or global, I'm not sure.
## Full Example
### SCSS


### Expected Output


### Actual Output


",northborndesign,chriseppstein
1036,2013-12-06 22:58:17,"The following SCSS behaves in a reasonable way:



It produces:



However, when we use `@at-root` and script `&` to do the same thing, it behaves very poorly:



It produces:



This is partly a consequence of the fact that `&` contains the full selector list; for example, in this context it's `(("".foo""), ("".bar""))` rather than just `("".foo"")` or `("".bar"")`. However, to fix this we'd need to make `&` ""fork"" the current rule; if you referred to it in the context of a comma rule, that rule would be split into two, each with `&` referring to one of the complex selectors.

It's possible the current behavior is acceptable, but I'm inclined to think that the different behavior between `&` and `#{&}` in addition to the uselessness of the current behavior in the context of comma selectors indicates that we should change it. In any case, we need to decide _before_ we release 3.3. @chriseppstein, what you think?

See also #1003.
",nex3,chriseppstein
1034,2013-12-06 05:52:50,"Sass 3.3 introduces the `!global` flag for modifying globals. Leaving this flag out emits a deprecation warning like below

> Assigning to global variable ""$modules"" by default is deprecated.
> In future versions of Sass, this will create a new local variable.
> If you want to assign to the global variable, use ""$modules: append($modules, $name) !global"" instead.

However adding the `!global` emits an error in sass 3.2. This is essentially a BC break since authors can't write code that'll compile in 3.2 and not emit deprecation warnings in 3.3.

I briefly mentioned this with @chriseppstein [on twitter](https://twitter.com/xzyfer/status/408828453031407616)
",xzyfer,chriseppstein
1034,2013-12-10 00:24:30,"I'd like to clarify.

The BC break will be from Sass 3.2 and Sass.next (3.4 or 4.0..). My rationale is that there is a lot of Sass code currently in the wild that relies on globals. All of that code will deprecation warnings in Sass 3.3 which I agree is the price of moving forward. However all that code will fail to compile (I presume) in Sass.next.

Since Sass 3.2 doesn't have the variable scoping that 3.3 has it makes writing some kinds of libraries that work in both 3.2 and .next impossible eg https://github.com/wilsonpage/sass-import-once/blob/master/_sass-import-once.scss. Correct me if I'm wrong.

I don't believe @chriseppstein was suggesting support for `!global` be added to 3.2, but instead patching 3.2 to ignore `!global` rather than causing a parse error.
",xzyfer,chriseppstein
1033,2013-12-13 13:59:43,"it works! please do the pull request @nex3 
thanks @glebm 
",ServusJon,nex3
1030,2013-12-14 01:13:06,"This isn't actually caused by the hyphen being consumed as part of an identifier, nor does it have anything to do with nested parentheses. It's caused by the space operator plus the unary `-` operator having higher precedence than the binary minus.

I think this is misleading enough that it's worth fixing. My instinct is that it's unlikely that anyone is relying on this behavior; browsers don't seem to consider `10px-20px` to be a valid substitute for `10px -20px`. I'm fine with fixing this without a deprecation period. @chriseppstein, what do you think?
",nex3,chriseppstein
1026,2013-12-07 00:50:10,"Usually we try to do this, but sometimes things get messy. Since @chriseppstein and I have a limited amount of time to devote to Sass in the first place, it's difficult to justify spending a lot of it tending the issue tracker to make sure all our duplicates point to the oldest possible thread, rather than working on actual code.
",nex3,chriseppstein
1025,2013-12-07 00:47:08,"I really don't like the idea of Sass having a list of known CSS functions. That list will inevitably get out-of-sync with the real world, eroding user confidence in its correctness and by extension Sass's correctness as a whole.

That said, in this specific instance, I could potentially see it working, since the list would only be used for emitting warnings and there will only be false negatives, not false positives (assuming CSS never removes an existing function). I would want to make this remain a warning, though; I don't want a list of supported CSS names affecting the behavior of Sass in a non-advisory way. @chriseppstein, what do you think?
",nex3,chriseppstein
1019,2013-11-22 18:43:57,"Reported by @xzyfer even after my recent performance fixes (#1006) landed.

https://docs.google.com/a/eppsteins.net/spreadsheet/ccc?key=0AtCLoNy3e0WXdEZERnZkc3pIUmVtSS1wdm5XQUZ4YlE&usp=sharing#gid=0

@xzyfer, can you please provide the source files used for that testing as a folder that we can run profiling against?
",chriseppstein,xzyfer
1019,2014-07-04 09:10:05,"@idflood @chriseppstein that @tenderlove's article is easy to misunderstand. On MRI defining a method via `define_method` (instead of `class_eval`) uses 2x less memory **per method** definition, but as you've found out is slower **per method call** (about 30% slower on MRI, your diff of only about 2% is because overall not that much time is spent in invoking those methods). I don't think there is any difference in object allocation (or GC overhead) **per method call** between `define_method` and `class_eval`.
",thedarkone,tenderlove
1013,2013-11-13 15:42:50,"If we look at the [@import once](https://github.com/nex3/sass/issues/156) feature request, we can see that the maintainers are interested in offering this functionality in an upcoming release, and as they stated at SassConf, they are looking to move to a more rapid release cycle, pushing out features when they're ready instead of holding a bunch of features back for a huge release. This sounds like a hack for a hack for something that will be deprecated.

As for implementing `@import once` now, it's actually very easy to do mimic right now with literally no hacking of Sass proper. Take a look at [sass-import-once](https://github.com/wilsonpage/sass-import-once/blob/master/sass-import-once.scss). That's all that's needed to effectively have it working now.

As for the suggestion that it'd linearize conditional output, let's use @chriseppstein's yardstick for introducing new vocabulary to the Sass lexicon: does the new vocabulary significantly improve the clarity of code for someone who has never seen the language before, or is it just a ""nice to have"". How does @end improve the clarity over `@else if`? It doesn't even save any characters.
",Snugug,chriseppstein
1013,2013-11-13 16:05:31,"We already have a `@return` method, it's for functions.

I still don't see how:



Is inherently more clear and has less of a mental overhead than



The former requires more code and breaks out of our file before the second `@if` is called from inside the first `@if`, which is a huge break in the current mental model for sequential `@if` statements, which in every other language (and in Sass as it exists now) are both expected to get evaluated. The mental model around `@else if` is precisely ""I want this or this or this"".

As for the suggestion that it's in PHP and therefore it's okay, [to quote @chriseppstein](https://github.com/nex3/sass/issues/626#issuecomment-27711024):

> [W]e do not take any inspiration from the language design of PHP and most programmers view PHP as the quintessential example of bad language design

Moreover, returning from an include file in PHP [is considered bad coding style](http://stackoverflow.com/questions/1314162/return-from-include-file#comment1147017_1314198), even for PHP.
",Snugug,chriseppstein
1004,2013-11-15 23:36:02,"This also fails miserably:



Produces:



Should produce:



In Less and Stylus this works fine since forever.

@kizu, could you please mention ""parent selector"" and ""&"" in this thread's title?

UPD: works as a charm like this (kudos to @Snugug):


",lolmaus,Snugug
1000,2013-11-05 07:56:06,"**EDIT**

Looking again, I see that `create-map()` was just an example to demonstrate the `keywords()` function; but my question below still applies. This function doesn't seem to offer anything new (in any case it doesn't do what I was hoping it would do). In the given example, the `create-map()` function is non-dynamic and actually more verbose than simply writing out the map in the regular syntax...



**ORIGINAL POST**

I've been trying out map functions based on the info in the [changelog](https://github.com/nex3/sass/blob/master/doc-src/SASS_CHANGELOG.md) and @chriseppstein's [CSSConf.EU presentation](https://www.youtube.com/watch?v=-ZJeOJGazgE), but stumped on `create-map()`. It seems like it should be the complement to the ability to pass maps as splat-like arguments to functions, which breaks a map out in to individual `$`-named variables: that is, create-map would seem to allow you pack up a series of variables in to a map again. However in testing it at Sassmeister it doesn't seem to work. Is it not part of the current RC1 release?

This is what I'm testing:



and this is what I get:



...I'm using the following to debug maps (edit: no need for this, there's an `inspect()` function now)


",lunelson,chriseppstein
998,2013-11-04 18:58:34,":-1: I dislike that this bells after each file is compiled. Most files take a very short time, this would be quite annoying. I also dislike the extra option for watching.

As specified in http://sass-lang.com/community#Contribute it's a good idea to propose ideas to the issue tracker and get feedback on them before coding them up. if we were to accept this, it would need docs, tests, etc as specified in the contribution guide. But I would wait on doing any further work until @nex3 has weighed in.
",chriseppstein,nex3
991,2013-11-04 20:55:03,"@nex3 let's get this in 3.3?
",chriseppstein,nex3
988,2013-12-06 21:48:36,"This is likely related to @chriseppstein's changes to make writing to the Sass cache atomic. I don't have the means to test solutions to this problem, but if anyone else can come up with one that preserves the atomicity of cache writes, pull requests are welcome.
",nex3,chriseppstein
971,2013-12-01 02:59:44,"@nex3 Doing my monthly check-in to see if there is anything more I can do to help push this along. Thanks!

:v: :deciduous_tree: :bear: 
",shepmaster,nex3
968,2013-12-12 01:04:06,"@nex3 Please review. You promised this would get into 3.3. Though you may have been too drunk to remember. But I have a witness: @snugug ;)
",chriseppstein,nex3
968,2013-12-12 03:27:07,"I am a witness!

> On Dec 11, 2013, at 8:04 PM, Chris Eppstein notifications@github.com wrote:
> 
> @nex3 Please review. You promised this would get into 3.3. Though you may have been too drunk to remember. But I have a witness: @snugug ;)
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,nex3
925,2013-12-14 00:56:47,"@chriseppstein has done a substantial amount of work recently to make Sass more threadsafe and to make the cache accesses atomic. This should fix this issue. Feel free to re-open if it doesn't.
",nex3,chriseppstein
923,2013-09-17 06:55:10,"PR to implement decrementing for-loops as discussed in issue #691 (sorry, couldn't get Hub to attach the pull-request to the issue directly).

From the CHANGELOG:



I did not add the `by` part to the `@for` loop as suggested by @chriseppstein in issue #691. I'd be happy to implement this in another PR. 

I am a bit unsure about adding the constants to the `ForNode`, they seem a bit out of place there. At first I was going to calculate the direction of the loop in the `ForNode` as well, but you can't do that because the environment can change the values of `from` and `to` later on, right?

Let me know what you think!
",robinroestenburg,chriseppstein
917,2013-09-10 15:35:47,"> CSS doesn't have maps, the property: value syntax is more like an imperative style collection of commands (apply this style, then apply the next style, etc.). Just because it looks like a duck from another language doesn't mean that it is a duck in this language.

That is your personal interpretation of the surface syntax. I think they look like maps. For whatever it is worth, @chriseppstein made this connection in the issue that inspired map support in Sass. Regardless, I never said CSS had maps. I said it had `k: v` pairs, which I think is an uncontroversial statement. Since this is a fairly tangential point I am going to avoid arguing it further in this thread.
",monsanto,chriseppstein
905,2013-08-29 18:50:56,"This is a tricky situation. In general, if a selector is defined both inside and outside of a `@media` query and it's `@extend`ed from inside, the user is likely to expect that that `@extend` will work on all instances of the selector. That means it's correct to throw an error in that situation. However, that also means that this workaround that explicitly indicates that the selectors should be duplicated in each context doesn't work.

@chriseppstein, what are your thoughts?
",nex3,chriseppstein
894,2013-08-23 16:11:54,"Nevermind, just found a near identical proposal from @chriseppstein from 3 weeks ago https://github.com/nex3/sass/issues/871
",northborndesign,chriseppstein
892,2013-08-18 19:07:27,"This appears to be the exact same behavior described in #877 in which @chriseppstein gave a [detailed explanation](https://gist.github.com/chriseppstein/6114279) as to why this happens. Long story short, this is not a bug and behaves as expected.
",Snugug,chriseppstein
871,2015-08-14 20:49:38,"@stereokai ask @xzyfer.
",nex3,xzyfer
870,2013-07-30 14:31:49,"_Title edited by @nex3._

**Bug Report Version** (potentially simple fix)

@-webkit-keyframes needs to pop out of selectors. 

Currently it's treated as any other rule.

**Feature Version**

The following may be very desirable for short one-time uses of this particular case.

**example.scss**



**example.css**


",srcspider,nex3
865,2013-07-28 18:45:16,"Oh, and make sure to ping @chriseppstein 
",hcatlin,chriseppstein
863,2013-09-26 15:33:09,"@nex3 Ping. 
",chriseppstein,nex3
854,2013-07-17 01:21:41,"This PR addresses a couple of @nex3's [requests](https://github.com/nex3/sass/issues/593#issuecomment-11631340) on nex3/sass#593. 

I will submit a different pull request to add metadata to SyntaxErrors, but I'm less sure of how that work will end up. 

I'm just adding tests and docs here. There is a persistent test failure `test_extend_sourcemap_scss` unrelated to this change. 

Hope you approve :)
",eriwen,nex3
852,2014-08-25 16:04:25,"This was closed by @nex3 but I don't see a reason. Recently ran into the want of `slice`. Any chance of getting this re-opened and implemented?
",Snugug,nex3
851,2013-09-19 14:49:27,"@nex3 do you object?
",chriseppstein,nex3
847,2013-08-21 14:32:54,"Don't get me wrong, I still _very_ much want that kind of compression and minification, along with linting. In fact, I have been trying to handle this with Grunt or Rake tasks lately, so I'm glad this discussion is happening now (yes, I use and am aware of the compressed style of output). What we're talking about is pushing Sass beyond compression into linting. Maybe it could fit into the goals of Sass, I dunno. I think the discussion would have to be with a wider audience.

Maybe it could be an option in Compass? + @chriseppstein
",kevinSuttle,chriseppstein
842,2013-07-09 17:50:03,"@nex3 here's a very valid use case for alloying dynamic imports. This should be implementable in ""user space"" based on a conditional, but it's not.

See #739.
",chriseppstein,nex3
836,2013-07-03 23:41:35,"addressed my own code comments. ready for your review @nex3.
",chriseppstein,nex3
819,2013-06-24 22:01:05,"It's been more than a month since @chriseppstein is working at Linkedin (congrats, man).

Also, his blog has moved since 2009 I believe. Updating the link to it could be done at the same time his bio is updated.
",kaelig,chriseppstein
818,2013-06-24 21:07:57,"@nex3 is this intentional?
",chriseppstein,nex3
818,2013-06-28 01:36:12,"> @nex3 is this intentional?

More or less. `calc` is considered to be a type of string literal, similarly to how `url` is treated. We could theoretically include a parser for the `calc` mini-grammar that would have explicit rules about how variables work, but then variables would work differently in that context than any other context, which may be unexpected.

I'm going to mark this as a feature request and leave it open until we come to a decision about what behavior we'd ideally like for `calc`.
",nex3,nex3
818,2015-09-09 21:50:00,"Ok, here's my proposal for calc integration.

calc() expressions should be parsed into SassScript AST expressions. The parsing should use the calc grammar with the exception that it will allow Sass variable references in place of a value. I think this is the most natural expectation from the author's perspective.

Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a `calc()` expression.

Any `calc()` expression that can be resolved statically will evaluate to static value in the output instead of outputting as a `calc()` expression.

We need to decide how intermediate expressions will work.

For example:



This could be an error at line 2 (because `3px + 2rem` immediately resolves to a calc string) or it could output a value for derived-expression as `calc( ( 3px + 2rem ) / 2 )`. I lean towards the latter, even though it is harder to implement. Expressions would resolve their variable references into values, but otherwise unresolvable expressions would stay as expression references instead of values until output so that they can be composed with other expressions.

If we want SassScript expressions to be mixable in the same line of code with Calc expressions, I think we'd need a better parsing hint than interpolation (which always results in a string). Probably `sass-script(...expression...)`. E.g. `calc(1px + 2em + sass-script($foo % 3))` Personally, I think this is unnecessary at this time.

If we do this right, basically the calc() expression syntax is an implementation detail and not something that our users will need to use directly unless they want to.

@nex3, @xzyfer, @mgreter thoughts?
",chriseppstein,xzyfer
808,2013-06-17 20:24:25,"@nex3 Just added some explanation. Let me know if you think it's clear enough...
",ggilder,nex3
799,2013-06-08 22:32:25,"@nex3 do you object to adding this gem as a dependency?
",chriseppstein,nex3
788,2013-06-04 21:31:58,"I think I follow what @nex3 was trying to do in that commit but I don't think it quite accomplishes it.

I found some other disconcerting issues when I started poking around.



Which I expected to generate:



But instead I get:



So we're completely missing the case where the children could be the same element and we've got some extraneous parent selectors getting mixed into the selectors which should be optimized out when the selector gets more complex.
",chriseppstein,nex3
785,2013-05-31 21:05:45,"@nex3 Here's the issue you asked me to open based on my comment on https://github.com/nex3/sass/pull/713.

I wanted to convert some Scss files from a project I use frequently into Sass just because that's my preferred syntax. I found that some comment structures seem to render invalid output from sass-convert.

Many files in this project error out when converted. I had a brief discussion with the owner of that repo you can reference as well. Perhaps the comments are formatted in such a way that they are to blame. I just wouldn't have though it would matter.
https://github.com/jlong/sass-twitter-bootstrap/issues/75

Here's an example.

Original:
[original.scss](https://dl.dropboxusercontent.com/u/8483722/Github/Sass/sass-convert-issue/original.scss)

Command:
`sass-convert original.scss sass-output.sass`

Output:
[sass-output.sass](https://dl.dropboxusercontent.com/u/8483722/Github/Sass/sass-convert-issue/sass-output.sass)
",ryanburnette,nex3
765,2013-05-23 15:55:23,"_Edited by @nex3 to change the title._

Hi,
I think SASS should be a specification that developers are free to implement in any programming language.

Ruby SASS compiler should be one of his implementation.

This may help others implementation (PHPSass, sass.js, pyScss, ...) to stay up to date.

some web designer are interested by SASS but can't use it because they don't work with Ruby...
Current other implementations are sometime buggy and rarely updated...
",yukulele,nex3
757,2013-06-07 18:34:21,"I spent a couple weekends working on content for the new site. It's
currently being reviewed by @jina. My goal was to get it launch able, not
perfect. But, I believe it's better than the current site even in the state
it's in.

I do like the superpower line. I've used it a couple places. But, Chris, I
agree. Some community feedback would be great!

And, @blackfalcon, a lot of the Sass design team is in the east coast. ;)

On Thursday, June 6, 2013, Chris Eppstein wrote:

> @blackfalcon https://github.com/blackfalcon Not much is happening
> there. [image: :cry:]
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/757#issuecomment-19063885
> .
",hcatlin,jina
757,2013-06-07 23:44:41,"Hi guys. It's off topic from what this PR is about but since I was mentioned re: the Sass site, I figured I would chime in. I pulled things into my local branch and was fixing up some of the CSS I was working on locally to work for the new content but didn't finish before heading off to Europe for some conferences. I realize I should be communicating these things better and I will from now on. ""Nothing is happening"" is inaccurate. It's more like things are going slower than initially anticipated. Chris, I feel bad for frustrating you but I don't want the wrong message getting out. I did work on it before my travels and its really close. The site is gonna be rad & way better. & I fully planned to work on it again when I get back to the states. Sorry about the lack of transparency. Like I said, will get better about that. :-) as for on topic for this PR: I have no opinion for this because its just gonna get replaced with a new site anyway. :-P I'm into the super powers thing. ;-)
‚Äî
Sent from Mailbox for iPhone

On Fri, Jun 7, 2013 at 8:34 PM, Hampton Catlin notifications@github.com
wrote:

> I spent a couple weekends working on content for the new site. It's
> currently being reviewed by @jina. My goal was to get it launch able, not
> perfect. But, I believe it's better than the current site even in the state
> it's in.
> I do like the superpower line. I've used it a couple places. But, Chris, I
> agree. Some community feedback would be great!
> And, @blackfalcon, a lot of the Sass design team is in the east coast. ;)
> On Thursday, June 6, 2013, Chris Eppstein wrote:
> 
> > @blackfalcon https://github.com/blackfalcon Not much is happening
> > there. [image: :cry:]
> > 
> > ‚Äî
> > Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/757#issuecomment-19063885
> > .
> > 
> > ---
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/nex3/sass/pull/757#issuecomment-19124953
",jina,jina
754,2013-05-30 16:20:45,"@stryju The commit that @nex3 made causes all colors that end up equivalent to `rgba(0,0,0,0)` regardless of their authored format to be output as `transparent`. So this actually increases IE8 support.
",chriseppstein,nex3
740,2013-05-25 01:02:09,"@cimmanon the `strip-unit` calls in that code are superfluous. `$font-size` and `$desired-size` both have `em` as their unit, so `$font-size / $desired-size` has no unit anyway.

@lunelson writing functions that don't think about units sounds like an anti-pattern.

> The input value might be in the range 0-100, with or without a percentage unit, or it might be in the range 0-1.

This sounds very confusing. How do I know whether `fn(1)` is going to treat `1` as `1%` or `1.0`? This is why units exist: to make it clear what you're specifying.

If the unit math doesn't work out in your functions, that seems a logic smell rather than an indication that Sass needs an easier way to add/remove units.

@robwierzbowski `1#{unit($number)}` doesn't work how you want it to. It returns a string, not a number.

### Summary

I don't find these use cases very compelling; I'm leaning toward's @chriseppstein's position here, that these functions would encourage more sloppy code than they do add expressive power.
",nex3,robwierzbowski
739,2016-05-02 15:27:32,"@etnbrd it's very likely related to this: https://medium.com/@xzyfer/why-node-sass-broke-your-code-and-semver-1b3e409c57b9#.mj58qxo8c
",stipsan,xzyfer
704,2013-04-18 04:56:42,"AWESOME. Thanks a lot @nex3 
",MoOx,nex3
681,2013-03-12 18:47:15,"@chriseppstein this is more your purview than mine.
",nex3,chriseppstein
667,2013-02-25 23:20:07,"@nex3 I don't know that there's much that can be done here. Do you agree?
",chriseppstein,nex3
659,2013-02-13 23:41:21,"_Edited by @nex3 to change the title._

From the [documentation](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#import):

> Imports may contain #{} interpolation, but only with certain restrictions. It‚Äôs not possible to dynamically import a Sass file based on a variable; interpolation is only for CSS imports. As such, it only works with url() imports. For example:
> 
> 
> 
> would compile to
> 
> 

However, Sass 3.2.5 compiles to:



Some other nuances of the slash behavior, e.g. for `$foo: 83`:
- `content: ""\#{$foo}""` compiles to `content: ""#{$foo}""`
- `content: ""\\#{$foo}""` compiles to `content: ""\\83""`
- There does not appear to be a way to get simply `content: ""\83""`

This makes it difficult to do things like embed unicode characters in SCSS based on variable values.
",Ry7n,nex3
659,2013-02-26 03:15:27,"@chriseppstein does `unescape-string` sound reasonable to you?
",nex3,chriseppstein
649,2013-02-04 17:35:17,"This was incorrectly posted in the Compass queue, re-posting here on behalf of @nschonni as I see value in unit omission for zero values. 



https://github.com/stubbornella/csslint/wiki/Disallow-units-for-zero-values
",krisbulman,nschonni
648,2013-02-22 23:36:21,"This is a reasonable request, but before we do it we need to figure out what the following should compile to:



Unfortunately, `foo:not(.baz .qux)` is invalid. This is pretty important, since nested extenders are quite common.

@chriseppstein, what do you think?
",nex3,chriseppstein
642,2013-01-25 22:54:13,"_Edited by @nex3 to change the title._

I don't find tickets about collections.

I read some closed tickets abouts namespaces and scopes, but they don't seems to describe what I'm thinking about.

So, instead of a description, here is an example :



This would output :



More than collections, for this to work, we should be able to pass more arguments than mixins wants, as long as they are named.

In short, this should work without throwing error (sass should just ignore named arguments which are not in its signature):



Sorry for being so long.
",ByScripts,nex3
642,2013-03-05 04:02:05,"I want to start working on this in earnest soon, so I'm going to start brainstorming syntax and function names. I think the two biggest things we need to nail down is the map-creation syntax and the element access syntax. There are some other ancillary things, but creating and accessing maps are by far the most common use cases.

@chriseppstein, I'm looking for your input on all this in particular.

### Creating Maps

There are two main paths to explore here. Either we have built-in syntax for creating maps, or we farm it out to a function. The former is terser and closer to what scripting languages do, but there's also intrinsic conceptual load to introducing syntax, as well as a greater risk of running into syntax conflicts with CSS.

#### New Syntax

What would this look like? Would it have explicit delimiters as in scripting languages, or would it follow Sass lists and have no delimiters with the option to use parentheses? The lack of delimiters on Sass lists has proven challenging. However, much of this challenge comes from treating individual values as single-item lists, which is not an issue for maps, and delimiters eat up syntax that might be used by CSS.

Would keys be prefixed with `$` or would they be bare strings? `$` fits the syntax of named arguments, the closest analogue to maps that we have at the moment, but it adds another context where `$foo` doesn't refer to the variable `$foo`. It also makes it impossible to use variables as keys, and it's unclear what would happen if you tried to programmatically access the key. It seems clear that bare-string keys are preferable.

What about non-string keys? Would we allow `1: value`? `#fff: value`?

One approach here would be to match the syntax of media queries. This would mean no explicit delimiters and bare-string keys. It would allow `@media #{$map}` to work.

#### Function

The most obvious way to make a function to create a map would be to use the existing keyword argument syntax, as in `create-map($key1: value1, $key2: value2)`. However, this has the same issues as using `$` in a new syntax, most notably making it impossible to create a map with programmatically-generated keys. This seems like an unacceptable sacrifice.

The other option is to use our existing data structure, lists, to do something like `create-map(key1 value1, key2 value2)`. This doesn't read as well as a custom syntax would, but it's possible that the benefits of using a function outweigh that downside.

### Accessing Maps

Once again we're choosing between adding new syntax and adding a function. The clear choice for the access syntax would be `$map[key]`. There are many downsides to this, though. In addition to all the normal issues with adding new syntax, this would be confusingly different than the use of a function to access lists (`nth`).

The question then becomes what name to give the access function. `get` is terse but extremely general and likely to come into conflict. `map-get` follows the naming convention used by the new string functions, but still suffers from the relative vagueness of ""get"".
",nex3,chriseppstein
631,2013-02-02 01:37:12,"It's also possible that we should treat `custom()` as a faux-string-boundary, like we do `calc()` and other functions with unusual syntaxes. That has the downside of being unable to include variables and other script literally within `custom()`, though. @chriseppstein, what do you think?
",nex3,chriseppstein
630,2013-01-17 00:02:02,"Twitter Bootstrap has (of course) grid related classes, .span1, .span2, etc... It also has selector statements such as `[class*=""span""]`. When I have a ID-based selector and include `@extend .span<a number>;` as a rule, the resulting CSS doesn't include the latter.

Per @nex3 this is currently not possible but if it doesn't require ridiculous parser gymnastics would be awesome because it would make these two features much more powerful.
",billsaysthis,nex3
608,2012-12-29 19:32:35,"Can you try to increase `listen` latency? (I don't know if `sass` let you set that). @Maher4Ever have you another idea?
",thibaudgg,Maher4Ever
608,2015-06-19 23:45:34,"According to @Maher4Ever on a3031856b22bc834a5417dedecb038b7be9b9e3e, the native Windows watcher is much slower than polling, so Sass [currently has it disabled](https://github.com/sass/sass/blob/stable/lib/sass/plugin/compiler.rb#L318-L320). You can try removing the `|| Sass::Util.windows?` there and seeing what that does to the latency and CPU usage.
",nex3,Maher4Ever
593,2012-12-11 19:38:58,"I would like Sass's command line utility to optionally return errors in a JSON format. I envision something like this:



The reason I ask is that having the output in a parseable format allows _infinitely_ better integration of Sass in third-party applications that want to do custom formatting of the Sass compiler's return messages. 

I strongly recommend that you adopt JSON over alternatives such as CSV and XML. JSON is cleaner, smaller, more easily read by humans (in case they need to do so), faster to parse in almost every instance and is quickly replacing XML as the default on the modern web. 

/cc @nex3 @chriseppstein 
",bdkjones,nex3
593,2012-12-11 19:38:58,"I would like Sass's command line utility to optionally return errors in a JSON format. I envision something like this:



The reason I ask is that having the output in a parseable format allows _infinitely_ better integration of Sass in third-party applications that want to do custom formatting of the Sass compiler's return messages. 

I strongly recommend that you adopt JSON over alternatives such as CSV and XML. JSON is cleaner, smaller, more easily read by humans (in case they need to do so), faster to parse in almost every instance and is quickly replacing XML as the default on the modern web. 

/cc @nex3 @chriseppstein 
",bdkjones,chriseppstein
592,2012-12-11 06:42:06,"The W3C specification for CSS 3 states that these two lines are exactly equivalent. See here: http://www.w3.org/TR/CSS21/cascade.html#at-import



Currently, Sass will not attempt to compile any imported file that is brought in using the url() syntax. I propose that this be changed so that:



causes Sass to process this imported file. Sass should look for the presence of ""://"" and "".css"" within the string contained by the parentheses. If either of those exist, THEN the import statement should be copied, verbatim, to the compiled output. The presence of a media type can also trigger the verbatim copy (as it currently does). 

The reason I propose this change is to bring Sass in line with the W3C standard. I've had numerous people email me something to the effect of ""CodeKit doesn't compile the code in my file, X!"" only to find that the user does not realize the subtle effect of using the url() syntax as opposed to the """" syntax.

Sass should adhere to the W3C spec when possible. In this case, it is possible.

/cc @chriseppstein 
",bdkjones,chriseppstein
592,2012-12-11 06:52:33,"I would also add that Less _does_ process Less files brought in with the url() syntax. (Although Less's @import statement support is much more rudimentary. It does not allow comma-separated multi imports and so forth.)

Folks switching to Sass from Less stand a good chance of being caught unawares by Sass's non-standard treatment of url() imports. Unless there is an overwhelming reason for the current behavior, I strongly suggest adopting the W3C spec.

/cc @chriseppstein 
",bdkjones,chriseppstein
561,2013-05-24 17:12:31,":thumbsup: also `variable-exists($varname, $global)`. I think I prefer a function per-type instead of a generic exists function. Thoughts, @nex3?
",chriseppstein,nex3
556,2012-10-28 21:12:13,"I've recently wanted to start including .css files and have them parsed as Sass. The idea behind this is that a component might be added to the project as a third-party component and I'll want to import their CSS for use in Sass.

This would allow us to have project in Bower (and other package managers) for reusable CSS components that would work with or without Sass. Take the Normalize.css file for example, I would like to be able to add this to a project using Bower and import it into the project as I would an SCSS file rather than creating a vanilla CSS import.

I imagine this would mean letting this syntax:



look for `normalize.sass`, `normalise.scss` or `normalize.css` and pull it in. Currently it will ignore it if it only finds a css file.

Would there be any downsides to this?

/cc @chriseppstein 
",anthonyshort,chriseppstein
550,2012-11-02 23:50:55,"First of all, I'm not a big fan of changing the semantics of a stylesheet by external means like Ruby customizations. As much as possible, Sass stylesheets should have the same meaning regardless of external factors.

As for the `@unit` proposal, I'm generally wary of extensions that look too much like plain CSS. This runs a real risk of allowing users to define units that are later added to the spec.

@chriseppstein, what are your thoughts on this?
",nex3,chriseppstein
543,2014-09-30 10:57:25,"Check out the [SassyLists](http://sassylists.com/) library by @HugoGiraudel.



Demo: http://sassmeister.com/gist/17c6c7759b889374a341
",lolmaus,HugoGiraudel
487,2012-08-16 00:16:41,"I'd say the best guide is just ""do what Compass does"". To my knowledge, no one's written any sort of formal document, although @chriseppstein may know of one. To address your questions in particular:

> I like to write mixins, variables and functions in lowerCamelCase to get a better differentiation between the native CSS & SASS functions, and the custom elements writed in Scss.

The style for identifier names is to make them all lower-case, separated by hyphens (e.g. `my-sass-identifier`). If you're worried about being confused between Sass and CSS functions, I'd say add a vendor-style prefix (e.g. `-my-function`).

> In nested elements, I'm always writing CSS properties first, and then in new lines the sub nested elements.

This is definitely correct. Sass will always move the properties above any nested elements, so keeping them that way in the source helps make it correspond more closely to the output.
",nex3,chriseppstein
476,2012-08-08 17:44:28,"@nex3, I can reproduce this. Seems like a real bug.
",chriseppstein,nex3
468,2012-08-02 16:35:11,"I am working with Sass 3.1.20 (Brainy Betty) and Rails 3.2.6.

I have a mixin with an em dash:



I use it as follows in _another file_:



I got something like `√¢‚Ç¨""`, while everything works when I use:



UPDATE:
@nex3 Those solutions doesn't work. (but I cannot reopen because I don't have permission...)
",collimarco,nex3
440,2012-07-11 00:59:35,"@chriscoyier That's a good question, I'm really not sure how @extend works on a low level... I wish I had enough foo to contribute to this though! :/

@thierryk A lot of SASS's extra features are used with the @ sign... such as @extend, @include.

@verekia , I do like the @namespace mynamespace  {...} you proposed better, less is more!

@ReinierK I think my JavaScript mindset was triggering that thinking for syntax :)  @chriseppstein Commented via twitter about possibly using the & symbol for this use case and referenced this: https://github.com/nex3/sass/issues/286 so the syntax
",AdamBrodzinski,chriseppstein
440,2012-07-13 20:05:21,"I'm not sure this is the right axis along which to work towards modularity.

The reason you want to namespace classes is presumably because you're writing a style module that will be used in multiple places alongside many other style modules. You don't want the classes defined by your module to conflict with other modules' classes, or with unrelated classes that ultimately end up on the HTML page.

However, I think the way style modules will ultimately end up looking won't involve concrete classes at all. Once Sass 3.2 is released with placeholder selectors, I think the correct way to write a module like this will be pervasive use of those. The client stylesheet would use `@extend` to attach your styles to its selectors, and it would know enough about the holistic structure of the stylesheets to avoid collisions.

The upcoming redesign of `@import` should also include support for avoiding name conflicts between separate libraries, so even if two modules define `%container` it won't be a problem.

@chriseppstein, what are your thoughts on this?
",nex3,chriseppstein
434,2012-06-29 22:23:26,"This is the expected behavior; from the second example in the documentation:



That said, this does seem like something that should be possible. @chriseppstein, thoughts?
",nex3,chriseppstein
420,2012-08-08 18:07:04,"Something like this is needed. perhaps this might tie into a module system, @nex3?
",chriseppstein,nex3
412,2012-09-28 20:58:37,"@krisbulman Is there a bug in this commit that's causing errors in compass, or is it just a matter of updating Compass to use the new semantics? /cc @chriseppstein
",nex3,chriseppstein
412,2012-09-28 21:43:31,"Unfortunately I was only able to track down the source of the problem, but not determine which it is. I am assuming the latter, perhaps @chriseppstein can provide some insight?
",krisbulman,chriseppstein
407,2012-06-03 17:49:53,"I had intended that `@content` would be a no-op if it was not passed. @nex3, you and I should sort this out.
",chriseppstein,nex3
407,2012-06-03 19:06:17,"My current work-around is this (where my-mixin expects content but I don‚Äôt want to pass any, and in fact is perhaps not even defined by myself):



That way when this is resolved I can just remove those -no-op: 1 lines.

IMO, @content as a no-op when not passed would be better than a test for seeing if it would be passed, since it would mean less code (no pointless conditionals).

But better than that is both options. I know some Compass functions do some tricky conditional stuff based on what arguments are actually passed. I can‚Äôt imagine there wouldn‚Äôt be any cases where testing for @content would not be useful, as well.

Best: Both test & no-op
Good: No-op
Fine: test

On Jun 3, 2012, at 10:49 AM, Chris Eppstein wrote:

> I had intended that `@content` would be a no-op if it was not passed. @nex3, you and I should sort this out.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/407#issuecomment-6087432
",alanhogan,nex3
407,2012-06-17 23:42:19,"I think this is simply a bug/oversight. @nex3 this needs to be in 3.2. 

Hunt & pecked on my iPhone... Sorry if it's brief!

On Jun 16, 2012, at 12:52 AM, Alan Hoganreply@reply.github.com wrote:

> Would love to see sass 3.2 with a no-op-if-none-passed @content.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/407#issuecomment-6371496
",chriseppstein,nex3
407,2012-08-08 18:07:59,"@nex3 can we please address this before 3.2 ships?
",chriseppstein,nex3
401,2012-08-08 18:10:22,"We put this off because 3.2 was going to ship soon. @nex3, let's ship or merge this.
",chriseppstein,nex3
401,2012-08-13 22:20:17,"@nex3 I will add a CHANGELOG entry for 3.3 for this. Any further comment before it lands on master?
",chriseppstein,nex3
394,2012-05-19 00:36:27,"@Maher4Ever and @thibaudgg, do you have any insight? It looks like this may be a Listen issue.
",nex3,Maher4Ever
394,2012-05-19 19:51:21,"Mmm I think @Maher4Ever will be more in position to find this issue.
",thibaudgg,Maher4Ever
384,2012-05-07 18:46:54,"Ok,
So I'm building my awesome reusable pattern library. And I have about 20 files and growing. So I organize them in folders. (hey even @chriseppstein does it http://d.pr/i/SfqX)

So the idea here is to be able to name a folder with a underscore, instead of naming each and every file in that folder with an underscore. Because let's face it. We all want to compile only one (or maybe for some crazy reason two) CSS File(s). The underscored thing should be the other way around actually :).  
Because that might be a _little bit_ over the top, I would like to think, that having folders with underscores would help everyone.
",justnorris,chriseppstein
384,2012-08-08 18:22:01,"@nex3 thoughts?
",chriseppstein,nex3
378,2013-02-02 02:01:55,"I'm still pretty skeptical of this. The issue is that the more seldom-used control structures exist in Sass, the harder it is for something with only passing familiarity with the language to read stylesheets that use those control structures. That's why it started out with the bare minimum set of structures needed to do anything: because in many cases it makes sense to skew towards a smaller surface area of the language rather than optimal semantics for writing complex code.

@chriseppstein, what do you think about this proposal?
",nex3,chriseppstein
377,2012-05-03 18:16:15,"@ReinierK Can you provide the non-confidential portion of the segfault stack trace?

@Maher4Ever If this is happening with 3.2.0.alpha.104, that means that it includes your patch. Any insight as to why `--watch` might still not be working?
",nex3,Maher4Ever
377,2012-05-03 19:37:32,"@Maher4Ever probably has more insight about this than I do... I'm not familiar with the inner workings of Listen.
",nex3,Maher4Ever
366,2012-08-07 13:32:16,"+1 for the + as `@include`. It'll be so awesome.
I think @chriseppstein want it too.

Sass syntax is nice, but I don't like to be dependent of the indentation.
",MoOx,chriseppstein
366,2012-08-07 15:02:05,"I'm not sure I get the issue with indentation. I indent my CSS now anyway.
I also use classes, not id's, specifically so blocks of style code are
re-usable. It's part of establishing an overall design unity. What's
interesting to me is nesting, and variables. The @include is also a big
one. The indentation seems like it is key when using nesting declarations.
And should help visually identify mixins quickly.

On Tue, Aug 7, 2012 at 9:32 AM, Maxime Thirouin notifications@github.comwrote:

> +1 for the + as @include. It'll be so awesome.
> I think @chriseppstein https://github.com/chriseppstein want it too.
> 
> Sass syntax is nice, but I don't like to be dependent of the indentation.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/366#issuecomment-7553235.

## 

Max West
",maxw3st,chriseppstein
366,2012-09-28 20:49:04,"After having this sit in my head for a few weeks, I like the `++mixin: argument` syntax more than I dislike it. I'd love to see this moved on and implemented as soon as there's some dev time to do so and assuming @nex3 and @chriseppstein are still on board.
",Snugug,nex3
366,2015-01-03 18:46:01,"The problem, as stated by @chriseppstein [earlier in](https://github.com/sass/sass/issues/366#issuecomment-7559687) [this thread](https://github.com/sass/sass/issues/366#issuecomment-7560114) with `+my-mixin` (or `+ my-mixin`) is that it's ambiguous with the adjacent sibling selector. The two proposed syntaxes that have been discussed (besides transparent mixins like Stylus, which @nex3 believes is [""‚Ä¶a pretty grievous misfeature in Stylus.""](https://github.com/sass/sass/issues/525#issuecomment-8995033) ) are `++my-mixin` and `my-mixin +:`
",Snugug,nex3
366,2015-01-05 19:00:22,"@nex3 Please comment.
",chriseppstein,nex3
363,2012-05-09 19:53:36,"@shaneriley sass does do that. Except it seems that it doesn't do it when it doesn't have to fully parse the property value. This is a bug IMO. @nex3 should weigh in.

Try running:



thru: `scss -t compressed`

and you'll get:



The compass function exists and is now in Sass itself. It exists because IE has a non-standard treatment of alpha channels where hex takes the form of `#AARRGGBB` and also because they do not support `rgb()` or even shorthand hex. Therefore this is the one place in all of CSS where the output format matters and therefore a hack exists to accomodate the hack that is IE filters.

As such, I do not see a reason to add a configuration option for this. when in non compressed modes, preserving css-valid author formats makes sense as the behavior. That said, feel free to make other use cases if you like, maybe one of those will convince me.
",chriseppstein,nex3
362,2012-04-23 23:35:07,"@Maher4Ever @thibaudgg Do you two have any insight about this? Is it a known issue?
",nex3,Maher4Ever
361,2012-04-29 19:07:56,"What do you think @nex3 @chriseppstein? Should `1 + null` return `1` or raise a SyntaxError?
",petebrowne,chriseppstein
353,2012-04-16 06:35:35,"Nothing really written down. There are a number of issues in the tracker that are related. Off the top of my head:
- Non-transitive imports (if A imports B and B imports C, A shouldn't necessarily see everything from C).
- A way of getting around non-transitive imports.
- Namespacing, as in this proposal. Not just for mixins but also variables and probably placeholder selectors as well.
- Disabling CSS output, both selectively and wholesale. The importer may want to `@extend` the rules in the importee but not have them concretely present, or it may want to suppress rules matching a certain selector.
- Renaming classes. This isn't something I'm 100% sold on, but it has been requested. Maybe the correct way to do this is some combination of namespacing and `@extend`.

@chriseppstein Can you think of any I'm missing?
",nex3,chriseppstein
349,2012-04-10 19:42:34,"I'm glad you spoke up about this. I've seen this sort of discussion go sour way more times than I'd like, so I appreciate the risk you took in posting the issue.

It looks like @jina, the designer in charge of the redesign, is on board with re-doing the logo, so I'm going to close this issue.
",nex3,jina
349,2013-08-01 20:49:28,"The site redesign is still ongoing. The work has been speareheaded by the awesome @jina and can be seen at https://github.com/sass/sass.github.com --- any help on that effort is very much appreciated!

And, as the selector of the original branding package, I always find this line of commentary surprising. I'll start with the statement though that intention is NOT the most important thing, but impression is. So, if its seen as sexist and negative against women, then by definition it is.

To me, the Sass woman is not at all a ""blonde airhead"". This branding was meant to go along with the original Haml branding, which was a similar-style drawing of a young boy. Both of them, to me, seem to say ""I'm very clever and I have a mischievous secret""... which is how I originally thought of both Sass and Haml. As tools that a minority would use, but would have great power because of it. 

Also, I wanted to do strongly ""female"" branding as a way to address my being gay head on with a public branding of my work as effeminate. At the time for me, it was a strong statement for me. Less so as I've gotten older and am able to be more publicly out.

The way I was thinking about it was...: ""Why do technologies have to be so ""male"" all the time? Why be afraid of some pink? I need a counterpoint to the male-centric branding of Haml.""

Again, the fact that several people over the years have felt that the branding was insulting... that is a great regret to me, as it was never where my heart was. And so, we are trying to replace this branding at the moment.

But! The new branding package exists... it holds onto the feminine branding, but (hopefully) removing the iconography that can read as ""airhead"". We're hoping to launch the site before SassConf in October.
",hcatlin,jina
349,2013-08-02 18:17:41,"The site is maintaining its unique and feminine branding, while removing the possible-to-see-as-ditzy character from the logo. This issue wasn't the primary reason for redesigning the logo, but redesigning the logo gave the Sass design team opportunity to address these concerns while they were at it. @nex3, @hcatlin, @jina, and the Sass design team have already taken care of this. It's a win-win ‚Äî everybody has already won.

The Sass community needs to be inclusive, and if there are easy steps to make it more inclusive without any negative side effects those steps should be taken. When someone points to code that works but with trivial effort can be re-written to be more elegant, we re-write it. That doesn't mean the original code was inherently wrong or bad, and all those who used and enjoyed it are shamed by proxy. It just means together we've found a better way to write it.

@chriseppstein, I appreciate your metaphor.
",robwierzbowski,jina
345,2012-04-03 17:56:43,"I really want to see this. But I have not yet convinced @nex3 of the necessity.
",chriseppstein,nex3
333,2012-08-08 18:33:06,"@nex3 I think a simple version.rb file would suffice, but I think there are build scripts that are not checked in that depend on the current scheme.
",chriseppstein,nex3
319,2016-01-20 12:41:33,"@nex3 hello, wow how time flies, just noticed this ticket is from 2012, anyway i would like to support the addition of another decimal for extra precision and to aid modern browsers in rounding up values. 

Note: I only support the addition of an extra decimal, because most browsers round up the result if 6 decimals are present in the css output.

**Case Study**.:  in a parent element that has **1200px** width, we have **3** columns that have a calculated width output of **33.33333%**. 

Each browser treats css differently and chooses what decimals to ignore.

**CHROME**: reads and interprets the output as is but **doesn't round up unless it has 6 decimals**. For the above mentioned example chrome will calculate the width of the column as **399.984px**. If SASS could output 6 decimals by default, meaning we would have gotten a width of **33.333333%** chrome would round up the calculated width to **400px**.

**FIREFOX**: reads the output of the CSS correctly but chooses to display in inspect element only 4 decimals, for reasons known only to the firefox devs. Thus being said, For the above mentioned example firefox will calculate the width of the column as **399.983px**. If SASS could output 6 decimals meaning we would have gotten a width of **33.333333%** firefox would still display the value with only 4 decimals but it would calculate and perform drawing of the said element with the value gotten from the css and it would also round up the width the same as chrome does to **400px**.

**EDGE**: we all know where this is going, it's a decent browser but it has flaws. However many decimals you output in the CSS it will choose to display in inspect element only 2 and use for calculations only 2. So if we have 5 decimals or 6 decimals it doesn't matter to EDGE output will be the same, meaning **399.96px**.

I would like to make a note on how chrome and firefox rounds up values [close to perfection] and how edge rounds up values.

Anyway i only noticed this while trying to build a custom block only grid for pixel perfect precision. I was constrained to block grid because i am not allowed to drop support for older browsers yet.

Thank you, and i hope i've convinced @nex3 about adding a 6th decimal as a default simply because 2 major and powerful browsers are able to round up if they have 6 decimals.

P.S.: Was unable to test this on safari 9.
",lexstefan,nex3
312,2012-03-09 19:30:21,"No there is not.

@chriseppstein thoughts on adding this?
",nex3,chriseppstein
293,2012-02-29 12:38:53,"@nex3 or @chriseppstein: Did either of these functions previously accept percentages? I find it odd that a percentage would have made it into the documentation if they didn't at one point.

The way they are right now, in any case, doesn't translate to percentages. They don't actually multiply the starting alpha value but simply increase or decrease the original value by the value passed to the function.
",mikefowler,nex3
293,2012-02-29 12:38:53,"@nex3 or @chriseppstein: Did either of these functions previously accept percentages? I find it odd that a percentage would have made it into the documentation if they didn't at one point.

The way they are right now, in any case, doesn't translate to percentages. They don't actually multiply the starting alpha value but simply increase or decrease the original value by the value passed to the function.
",mikefowler,chriseppstein
290,2012-02-25 18:27:06,"@tixz what version of Sass are you using?

From the [spec](http://www.w3.org/TR/css3-conditional/#at-document), using double-quotes are safe in this context. @nex3 I think it's strange that we're parsing the `@-moz-document` directive. But if we are going to, it seems like we'll need to make `url-prefix` and quote like we do for `url`.
",chriseppstein,nex3
277,2012-02-14 16:43:15,"I see. @nex3 Seems like nesting a comma delimited list inside a space delimited list (as this code would be) is strange. Should it be an error?
",chriseppstein,nex3
258,2012-01-30 02:11:23,"It was a decision that was made before I worked on the project. Maybe @nex3 can shed some light.
",chriseppstein,nex3
239,2012-01-08 18:20:40,"@nex3 Well we knew this day would come. The question is how to handle it.

I think the most correct thing is to introduce a prefix for sass functions `-s-`, deprecate all the function calls to sass functions without a prefix on stable, and add sass-convert support to facilitate the change. Conceptually Sass is a vendor that is introducing experimental features and we should be a well behaved one.

But that is an awfully big reaction to the first collision so some other remedies should be considered too:
- We can introduce an escape to force functions that are defined in sass to be considered browser functions. Something like `'grayscale'(...)` or `-browser-grayscale(...)` which would be output as `grayscale(...)` (don't get too hung up on syntax here) The downside is that all sass users have to know that grayscale is a sass function and they cannot simply copy and paste CSS code examples into an scss file.
- Rename `grayscale()` to `gray()` -- not sure what the right approach to deprecation should be here but it won't be pretty.
- Introduce property-aware value parsing and some way for sass to be configured to ""just work"".

Did I miss any other options?
",chriseppstein,nex3
235,2011-12-30 01:04:18,"@nex3 I asked @barraponto to file this after a thread on the compass mailing list. I think this is a case where the meaning of the comment is changed significantly when placed on the next line. Are you opposed to special casing this?
",chriseppstein,nex3
233,2012-01-22 15:43:47,"Hi everyone!

As suggested by @paulirish, I tried to improve the typography a bit. I also made some tweaks to the design so it matches better with the Sass website.

As promised, I published it on GitHub: https://github.com/Kaelig/Sass-reference

@chriseppstein and @nex3, I added as contributors on the project, since you are the authors of the reference.

What's our next move? Do you want to publish it on sass-lang.com ? (it's ok with me)
",kaelig,chriseppstein
233,2012-01-22 17:31:24,"I _think_ the site is available over here:
https://github.com/nex3/sass/tree/sass-pages

might to see how to integrate the two

On Sun, Jan 22, 2012 at 7:43 AM, Kaelig <
reply@reply.github.com

> wrote:
> 
> Hi everyone!
> 
> As suggested by @paulirish, I tried to improve the typography a bit. I
> also made some tweaks to the design so it matches better with the Sass
> website.
> 
> As promised, I published it on GitHub:
> https://github.com/Kaelig/Sass-reference
> 
> @chriseppstein and @nex3, I added as contributors on the project, since
> you are the authors of the reference.
> 
> What's our next move? Do you want to publish it on sass-lang.com ? (it's
> ok with me)
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/233#issuecomment-3603699
",paulirish,chriseppstein
233,2012-03-13 00:09:35,"There's currently a task force being led by @jina with the goal of redesigning the Sass website and documentation. One of the primary concerns is the experience of a user getting started without getting bogged down in unnecessary complexity.
",nex3,jina
217,2011-11-26 06:07:58,"This is a cherry-pick and merge of @chriseppstein's commit in #106 in easy pull request form
",nevir,chriseppstein
216,2011-11-23 21:07:48,"_Edited by @nex3 to change the title._

[cross-posted from http://stackoverflow.com/questions/8248976/sass-indented-syntax-on-multiple-lines]

I love indented syntax, I think it's much cleaner.

There's one issue I have with it. If I have a really long mixin declaration, there's no way to split it into multiple lines (obeying the 80 character limit, for example)

Take this example, first written in SCSS.



I'm able to split up one long declaration in to multiple lines. With the indented syntax, I don't think there's a way. I have to put the declaration on one line, which is way less readable.



Is there some way I don't know of? And if not, can there be one? :)
",talsafran,nex3
216,2014-08-29 06:41:51,":thumbsup: +1000 OMG, I thought it was just me. 

Unless it's been discussed before in duplicate issue boxes, has @hcatlin, @nex3, or @hcatlin discussed the biggest caveats of adding this feature that may not be immediately obvious to most? 
",lozandier,nex3
211,2011-11-10 22:40:52,"What I'm looking for is a way to @extend a selector without printing it. 

I'm looking for this feature because I write some styles that are used several by several markups, but I don't want to tie them to any markup. Currently, I'm using classes starting with - (hyphen) since they are probably not being used in the actual markup.

@nex3 once suggested using a @quiet directive to define these non-printing classes. I thought of using _ (underscore) in the beginning of the selector, to make it consistent with partials. Either way will do.
",barraponto,nex3
202,2012-01-10 16:29:04,"That syntax will extend all the places where `.two.columns` appear together. If you mean for it to be functionally equivalent to `@extend .two; @extend .columns;` then I think the syntax would be `@extend .two, .columns;`.

Seems pretty easy to add. @nex3 do you have any objection?
",chriseppstein,nex3
193,2012-07-05 23:41:51,"I suggested that to @nex3 and he had a good reason why that wouldn't work, but I've forgotten what it was.
",chriseppstein,nex3
181,2011-09-30 12:23:28,"> I agree that ""updating"" should be changed to ""updated"" now that these are run after the stylesheet is created. Be sure to alias #on_updating_stylesheet, though.

Hmm. I think the only clean way of doing this (without a hard cut) is to leave the old callback with its old behavior and extend it with a deprecation warning. Aliasing the old callback with the new one could lead to unexpected behavior. I won't write into the deprecation warning: ""Hey, this callback is deprecated... actually, it does something different now, which might lead to confusing results!""

So, despite @chriseppstein's concerns about adding another callback, this is what I am going to do now. In difference to  https://github.com/nex3/sass/pull/151, I am going to add a deprecation warning to **updating_stylesheets**, though.
",ChristianPeters,chriseppstein
167,2011-09-11 21:13:56,"Here's a gist where I first explored this concept. some of the comments there might be relevant: https://gist.github.com/407318

In particular, @hagenburger suggested using `@content` instead of `@children`.

I like `@content` but I'm worried that it might get used by the w3c someday.
",chriseppstein,hagenburger
166,2011-09-09 00:11:59,"This is the sort of thing that belongs in an extension to Sass, such as Compass. In fact, Compass may already support it; @chriseppstein?
",nex3,chriseppstein
166,2011-09-09 00:54:01,"Yep. It's in compass and it's called inline-image(). 

http://compass-style.org/reference/compass/helpers/inline-data/

Hunt & pecked on my iPhone... Sorry if it's brief!

On Sep 8, 2011, at 5:11 PM, Nathan Weizenbaumreply@reply.github.com wrote:

> This is the sort of thing that belongs in an extension to Sass, such as Compass. In fact, Compass may already support it; @chriseppstein?
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/166#issuecomment-2046647
",chriseppstein,chriseppstein
163,2011-09-09 00:15:15,"I'm assigning this to @chriseppstein, since he knows more about Rails integration than I do at this point.
",nex3,chriseppstein
151,2011-09-12 07:09:35,"I don't understand why @nex3 chose to fire the event before the file was written. Having both seems unnecessary. Can we just move when the `updating_stylesheet` event runs to ensure the file has been written?
",chriseppstein,nex3
151,2011-10-16 17:57:36,"@nex3 any preference here?
",chriseppstein,nex3
147,2012-08-08 18:51:30,"@nex3 can you comment?
",chriseppstein,nex3
139,2013-08-29 08:34:31,"Aiming at being objective here: 
- Changing @import is a seriously _breaking_ change, it will not happen.
- +1ing doesn't add anything to the conversation.

---

Do we have a clear proposal / suggestion that @chriseppstein or @nex3 have agreed with? Is there an actionable development path? 

If you've got an opinion, I suggest that you submit a proposal‚Ä¶ if its solid, and simple, it'll get agreed upon. 

2 year old issues don't resolve themselves without buy-in, folks. 
",benschwarz,nex3
137,2012-01-02 01:35:33,"look ok to me. Might cause some regressions for some users who are passing these words as unquoted strings to functions expecting a string object. Seems like an acceptable risk.

@nex3 do you +1?
",chriseppstein,nex3
136,2012-05-07 00:32:30,"bump. @nex3 is this a candidate for 3.2?
",chriseppstein,nex3
122,2012-01-10 15:39:16,"Less.rb is old and deprecated, it doesn't support the current less syntax. A less to sass converter is a good thing to have, but a rewrite of this feature is required to achieve that.

@nex3, I'm going to remove the less support from sass-convert unless you object. I think a less to sass converter can and should be provided by a separate project -- maybe it would be built on less.js's internals instead of sass's.
",chriseppstein,nex3
113,2011-06-09 05:58:02,"Currently, Sass insists that all indentation in a file be completely consistent. However, this means that it's not possible to get rid of a line without re-indenting everything beneath it, which is annoying when debugging code.

We want to allow variable indentation as long as it's unambiguous. For example, the following:



should be the same as



However, wherever we currently would raise an error, a warning should be printed.

Ambiguous cases should still be marked as erroneous. For example, the following



should raise an error on the ""down: two spaces"" line.

This is conceptually the same as issue #28, but since Sass and Haml don't share parser code, they're listed separately.

[Originally filed](https://github.com/nex3/haml/issues/29) by @nex3.
",chriseppstein,nex3
111,2011-06-09 05:51:12,"It's probably a coding mistake if no selector matches an @extend directive. Sass could issue a warning in this case and save costly time spent in debugging.

[Originally filed](https://github.com/nex3/haml/issues/150) by @chriseppstein.
",chriseppstein,chriseppstein
109,2015-09-24 18:47:24,"@nex3 thoughts?
",chriseppstein,nex3
108,2011-06-09 05:45:25,"The ""[Try Online](http://sass-lang.com/try.html)"" page can only use SASS currently. It would be great if user can use SCSS too, and even better if SCSS is the default option.

[Originally filed](https://github.com/nex3/haml/issues/317) by @hlb
",chriseppstein,hlb
107,2011-06-09 05:43:33,"I'd like to have an expanded and nested SCSS output like:



I hardcoded this behaviour in lib/sass/tree/node.rb of haml 3.0.13 for myself with:



[Originally filed](https://github.com/nex3/haml/issues/205) by @topaxi and commented on by @nex3 and @graywh
",chriseppstein,nex3
106,2011-06-09 05:24:28,"[Orginally filed](https://github.com/nex3/haml/issues/229) against haml by @nex3 and commented on by @endymion & @tbranyen.

This should work for `@media` and unrecognized selectors. It may also be worth allowing variables directly at some places in `@media`, although this may create confusion if they aren't allowed directly in other selectors.
",chriseppstein,nex3
105,2011-06-09 05:21:19,"[Originally filed](https://github.com/nex3/haml/issues/242) against haml by @nex3.

E.g.



`$iconImage` should be accessible after running this statement.
",chriseppstein,nex3
96,2011-06-07 20:07:39,"got some reports on twitter about this too. @nex3 any ideas what's the cause?
",chriseppstein,nex3
65,2011-04-24 20:30:13,"Whether or not this should be supported is up to @nex3, I don't see a good use for it, it results in fragile stylesheets.
",chriseppstein,nex3
