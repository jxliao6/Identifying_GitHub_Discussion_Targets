issue_num,datetime,body,login,mention_login
2258,2017-03-17 15:59:57,"@chriseppstein Are you kidding me? I already answered this in prev reported issue, I tired that with colon too. also I mentioned here!",dehghani-mehdi,chriseppstein
2257,2017-03-14 05:26:35,"@chriseppstein I tired that before reporting this issue, do you closing other issues like this?",dehghani-mehdi,chriseppstein
2248,2017-02-23 14:47:43,"Thanks @nex3, I can use something less flexible for now but your tip is good to know!",NicolasGraph,nex3
2244,2017-02-13 10:23:38,@clarcharr thanks,evilebottnawi,clarcharr
2240,2017-02-08 19:00:40,"Thanks @mprins.

I have solved the problem in the following way:

I define a `Constants.scss` file with all of my Constants, and at the top of each module that uses the constants, a simple `@import` does the trick:

In `Constants.scss`:


In `Foo.scss`:


I think I was overthinking the problem. So I will close this issue. If someone feels I am really onto something here, then feel free to reopen. üòÑ 
",radiovisual,mprins
2239,2017-02-08 12:53:53,"@nex3 
Well, this results in my `.component h1:first-child` to have a `margin-top` of `8px`, and my `.component h1:last-child` a `margin-bottom` of `8px`. How would I go about coding that whilst also keeping my code DRY? ",CupOfTea696,nex3
2239,2017-02-09 14:27:16,"@nex3 awesome, thanks",CupOfTea696,nex3
2236,2017-02-07 08:48:55,"@nex3 well than it should have. There are a lot of issues caused by missing concept for log levels. Because there is some kind of ""log level"" with `@error` `@warn` and `@debug` but there is not concept for it.",DaSchTour,nex3
2236,2017-02-09 08:00:55,"@nex3 well, looks like a nice idea. How do I manage to control this on a CI level? How can I change the variable depending on if the build is done locally or on CI server?",DaSchTour,nex3
2235,2017-02-02 23:25:26,@tony19 can you confirm the output is broken in the Ruby Sass 3.5. RC and Sass 4.0.0-alpha1?,xzyfer,tony19
2235,2017-02-02 23:47:53,"@xzyfer <del>Only</del> Sass 3.5 RC <ins>and 4.0.0-alpha.1.edec1af</ins> (and `dart-sass`) produce the correct output.

 * `3.4.23` ‚ùå 


 * `3.5.0-rc.1.3983be8`  ‚úÖ 


 * `4.0.0.alpha.1.af6c039` ‚ùå 


 * <ins>`4.0.0-alpha.1.edec1af` ‚úÖ 

</ins>",tony19,xzyfer
2235,2017-02-02 23:50:19,"Thanks @tony19. My guess the 4.0 failure is just because the latest updates haven't been merged into that branch.

As for node-sass we have an issue for this in https://github.com/sass/libsass/issues/2076",xzyfer,tony19
2234,2017-02-14 01:53:52,"@nex3 Thanks for the reference, I didn't realize it was explained there. I was wondering why you decided to treat null variables as unassigned when using the !default flag? Following that definition shouldn't something like:

output:

As of now it doesn't output anything since $color is now null. Is the behavior in the first comment something you would consider adding as a feature? I think it fits better with the way !default behaves. The syntax $someVar: null !default; is written like you are assigning a value to a variable. If you wanted to declare a variable without an assignment, perhaps another type of syntax should be used.",pat270,nex3
2225,2017-01-14 19:21:02,@yoostk is right: the actual output and your expected output are semantically identical.,nex3,yoostk
2220,2017-01-12 02:19:08,@nex3 This makes sense now. I was scratching my head why it wasn't working. Thanks for your help!,jwandrews,nex3
2219,2017-01-06 23:31:18,"@nex3 is this purely-cosmetic? Looks like it changes the semantics of the output CSS


vs
",xzyfer,nex3
2218,2017-01-06 03:55:12,"I was going to propose the following for the fix for this issue:



But I just tried this on my local and it doesn't eliminate the warning.  I also tried splitting the ""Integer"" and ""Fixnum"" references into separate 'when' clauses (with ""Integer"" first), and that didn't eliminate the warning either.

The only thing that worked was to delete the ""Fixnum"" clause altogether, and replace it with an ""Integer"" clause.  I tried this both with Ruby 2.4.0 and Ruby 2.3.1, and it worked in both cases.  I don't want to dig any deeper before getting the core team's thoughts on the above.  If it sounds good to y'all, I can submit a PR ASAP.  Cheers @chriseppstein and @nex3. :-)

I see the 'json_value_of' method, and specifically its handling of the Fixnum class, is already covered by tests in 'util_test.rb'.  Looks like the same case would cover Integers as well for Ruby 2.4.0.  I'd like to be able to verify that before submitting a PR by running the same command that @sinkaszab mentioned (sass filenameA.scss filenameA.css), but am unsure how to ",richiethomas,sinkaszab
2218,2017-01-06 14:21:38,"@sinkaszab I'm wondering if removing the reference to the deprecated class would be a breaking change for users of older Ruby versions.  I tested Ruby 2.3.1 yesterday (no problems there) and today I'll test 2.0.0 and 1.9.3, provided this project still supports those versions.  If those versions behave the same with the Integer class, I can't think of anything else which would stop us from just switching Fixnum to Integer.  Then again, I'm still learning as well. :-)  Let's see what the core team has to say.",richiethomas,sinkaszab
2218,2017-01-07 06:40:50,"@nex3 it looks like all but one of the Fixnum references are in comments which describe the type of data returned from a method.  The one reference to Fixnum inside actual executable code, when changed to Integer, does not break any tests, and the binary continues to compile .scss files to .css for all the Ruby versions I tested (1.8.7, 1.9.3, 2.0.0, 2.3.1, and 2.4.0).

What do you think of having Fixnum-related comments which apply to versions earlier than 2.4, and Integer-related comments which apply to 2.4 and above?",richiethomas,nex3
2218,2017-01-07 18:10:37,"@sinkaszab looks like you're right, going all the way back to at least 1.8.7.",richiethomas,sinkaszab
2218,2017-01-07 21:59:21,@richiethomas I think it's fine to just update the comments to be `Integer` instead for all versions.,nex3,richiethomas
2218,2017-01-07 22:20:59,"@nex3 OK will do.  When I was familiarizing myself with the comments, I had questions about the following 2 items:

1) In error.rb, there's a ""sass_mixin"" method which is meant to return an integer.  However, when I looked for this method in the MiniTest test suite (specifically, engine_test.rb line 403), I noticed an equality assertion comparing the return value of ""sass_mixin"" with a String intance.  I ran that test assertion and logged the value of the sass_mixin method, and it was indeed a string.  Does this mean the method should not return a Fixnum nor an Integer, but rather a string?

2) On line 75 of ""staleness_checker.rb"", the ""mtime"" param appears to be an instance of Time, not Fixnum nor Integer.  I determined this by running the relevant MiniTest, similar to #1 above.  Should the documentation be changed accordingly?

I'll do a PR as soon as I have your feedback on the 2 questions above.",richiethomas,nex3
2218,2017-03-17 16:39:08,@dhh would this thread be updated once fixed? ‚Äìdh,danielhaim1,dhh
2192,2016-12-12 09:49:25,"@nex3 Thanks for reply

It's slightly unclear why HSL has been chosen at first place despite wide popularity of HSV?

It seems to be quite odd pick, since in most cases with Sass works people which, well, having to deal quite a lot with colors, and in most cases they will stumble exactly upon HSV. So, it's unclear why it has been chosen to enforce less popular those days implementation on them.

The extension approach in Sass doesn't work quite well those days, because of environmental differences. Some projects running on Ruby, some on node-sass, and this means that extensions can't be made universally portable that easily.",ArmorDarks,nex3
2192,2016-12-13 10:00:44,"@nex3 Thanks for reply once again

> HSL wasn't chosen so much as inherited. CSS supports it, and we want to be compatible with CSS, so we support it as well.

Ah, I see. Well, then it's quite logical. Too bad that HSL is surprisingly unintuitive and very hard to work with due to lightness shifting other parameters.

> An extension that's written in pure Sass should be plenty portable.

Extensions of such kind written in pure Sass are quite slow due to calculations, even on libsass. I guess it's because a lot of underhood magic happens with types casting and so on. In the end, even `node-sass` function ends to be much cleaner and faster, but less portable.

Considering that some people have very large codebase, trading portability for such resources waste isn't an option too, unfortunately.

Well, I guess it doesn't change anything anyway. Thank you for finding time to take a look at this issue, though, and for Sass, of course :)",ArmorDarks,nex3
2183,2016-12-12 00:04:27,"@luckypoem You can pass `-v 3.3.0` to install version 3.3.0.

@Koshmaar 4.0 is not yet released. You can install 4.0.0-alpha.1, but it's very old at this point and releasing new versions is not currently a high priority. Your best bet is probably do install from the Git repository.",nex3,luckypoem
2183,2016-12-12 00:04:27,"@luckypoem You can pass `-v 3.3.0` to install version 3.3.0.

@Koshmaar 4.0 is not yet released. You can install 4.0.0-alpha.1, but it's very old at this point and releasing new versions is not currently a high priority. Your best bet is probably do install from the Git repository.",nex3,Koshmaar
2177,2016-12-12 15:53:33,"I had a similar case where I thought the same was happening. It was seemingly not working in SASS version 3.4.22 but in 3.2.19.

What solved it for me was to make sure that any file using `@extend` was a **partial** (i.e. starting with an underscore). (Or, obviously, the file using the `@extend` would need to `@import` as well.)

@heaven, in your case I wonder what `./bootstrap_overrides` is. If it's a directory, make sure its contents are only partials. If it's a file, make sure it's a partial, etc.
",selfthinker,heaven
2175,2016-12-11 23:49:32,@stevenvachon I don't think this is a duplicate of that. This is specifically about passing `var()` to the existing plain-CSS functions.,nex3,stevenvachon
2172,2016-10-18 14:21:20,"ok @eaglejohn  so the problem is when you compile right? are u using command line for compile?  have you tried use command line of sass or grunt sass task? 
",douglasdeodato,eaglejohn
2172,2016-10-18 14:38:09,"@HugoGiraudel Are the spaces still useless when they break functionality?
",eaglejohn,HugoGiraudel
2172,2016-10-18 14:42:43,"@eaglejohn  sometimes the spaces make broke the compiling.

if you are using sublime text, I suggest u install this: http://blog.revathskumar.com/2012/08/sublimetext-remove-tailing-spaces-on-file-save.html

that will remove all your spaces and tailing spaces of your code.

I sugest to you install as well: https://packagecontrol.io/packages/CSS%20Format

I hope helped you somehow.
",douglasdeodato,eaglejohn
2172,2016-10-18 16:02:42,"@HugoGiraudel What's breaking my code then? Since changing the compiling method fixes the issue. On Google I find more issues with webfonts and missing spaces.

@douglasdeodato Thanks, I'll look into it!
",eaglejohn,douglasdeodato
2172,2016-10-18 16:02:42,"@HugoGiraudel What's breaking my code then? Since changing the compiling method fixes the issue. On Google I find more issues with webfonts and missing spaces.

@douglasdeodato Thanks, I'll look into it!
",eaglejohn,HugoGiraudel
2172,2016-10-18 18:12:58,"@HugoGiraudel http://www.tamarakingtattoos.com/ the font ""Schluber"" is not loading, although the paths are correct. Path example: http://www.tamarakingtattoos.com/wp/wp-content/themes/tamaraking/fonts/Schluber.eot
",eaglejohn,HugoGiraudel
2172,2016-10-19 17:24:59,"@HugoGiraudel Did you find some time to take a look? The website is live and I can't have it live with the font not loading for much longer...
",eaglejohn,HugoGiraudel
2172,2016-10-20 15:52:34,"@HugoGiraudel Can we track this down to the way the file is compiled? Or is it something else? I recompiled the file again because it's a live website. So from now on the font is loading again. Still would like to use the compressed method since it's saving a lot of loading time.

When I load the css (using the compressed method) with the <link> tag everything is fine. As I said in my first post, I'm including the css in <style> tags.
",eaglejohn,HugoGiraudel
2172,2016-10-23 14:33:05,"@eaglejohn you have a UTF-8 BOM in your styles. Guess that is causing your problems. Your tools don't seem to handle UTF-8 files correctly (not sure how you concat/embedd them into your html).

![sass-merge-error](https://cloud.githubusercontent.com/assets/282293/19627016/5131c444-993e-11e6-8d7c-a4c2ef88566b.png)
",mgreter,eaglejohn
2171,2016-10-19 08:33:20,"@HugoGiraudel After some more fiddling with it I found that when I would remove one of the variables from `$drawer-profile-height` that it would work. It looks as if there is a limit of how many variables you can use on one line. 
",SuperDJ,HugoGiraudel
2171,2016-10-19 09:05:04,"@HugoGiraudel I'm not exactly sure of how to share but:

<p class=""sassmeister"" data-gist-id=""e90a4beee6e957158a05541c066600b8"" data-height=""480"" data-theme=""tomorrow""><a href=""http://sassmeister.com/gist/e90a4beee6e957158a05541c066600b8"">Play with this gist on SassMeister.</a></p><script src=""http://cdn.sassmeister.com/js/embed.js"" async></script>

Don't know if it's important to know which version I'm using:
SCSS: 3.4.22
Gulp: 3.9.1
gulp-sass: 2.3.1

I run Gulp trough PHPStorm
",SuperDJ,HugoGiraudel
2170,2016-10-14 13:14:00,"@thany  what version sass you are using? I don't get this problem using even the 3.4
",douglasdeodato,thany
2157,2016-12-11 22:54:54,"@lokson Same as other PRs: can you rebase onto the latest next (or stable, since this isn't a very big change)?",nex3,lokson
2157,2016-12-18 17:51:03,"@nex3, Natalie, you closed without merge a multi line operator feature which had a bounty source, was requested for years and was rewritten from initial implementation to a version that suited you (with Chris we opted for more minimal solution). I remember waiting for your responses on issues while you were changing bio note about yourself. As a user you made me move to Stylus, and to other projects as a contributor. It was huge disappointment to work with you.",lokson,nex3
2157,2016-12-18 17:51:31,@nex3 rebase to next ready.,lokson,nex3
2157,2016-12-19 01:46:07,"@lokson I'm really sorry, and I understand why you're unhappy. I'll do my best to explain why this happened how it did. Over the months since you first filed #2094, I was focused almost exclusively on [Dart Sass](http://blog.sass-lang.com/posts/1022316-announcing-dart-sass) while @chriseppstein was extremely busy with his job at LinkedIn. This left no one to work the issue tracker and continue iterating on pull requests. We should have devoted more time to this repo, but we didn't communicate between each other well enough to actually make that happen. That's our fault, and again, I apologize.

Eventually, Dart Sass became solid enough that we were able to get decent performance data out of it. Based on that among other considerations, we decided to move towards Dart Sass as the reference implementation. Once that was decided, it no longer made sense to land new features‚Äîincluding your multiline patch‚Äîin Ruby Sass only. So I regrettably put your pull request on ice.

I really do appreciate your contributions, and I think your multiline feature is a good one. I'm sorry once again that we didn't respond quicker or communicate better.",nex3,lokson
2157,2016-12-21 14:59:25,@nex3 I somehow closed sass-spec related MR without a merge. Here is a new one: https://github.com/sass/sass-spec/pull/1020,lokson,nex3
2157,2016-12-29 19:51:44,@lokson Looks like the Travis build is still failing. You may need to update some more spec results in your sass-spec branch.,nex3,lokson
2156,2016-12-11 22:54:04,"@lokson Same as other PRs: can you rebase onto the latest `next` (or `stable`, since this isn't a very big change)?",nex3,lokson
2156,2016-12-18 17:56:41,@nex3 rebase to next ready,lokson,nex3
2156,2016-12-21 15:02:55,@nex3 https://github.com/sass/sass-spec/pull/933 rebased,lokson,nex3
2152,2016-09-27 09:06:01,"@MCTaylor17  check out: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#import
",douglasdeodato,MCTaylor17
2152,2016-10-04 00:03:38,"@douglasdeodato, I guess I didn't elaborate very well.  I'd like Sass to make an HTTP request to retrieve the asset so that I can work with it (eg extending classes, using variables from it, etc).
",MCTaylor17,douglasdeodato
2151,2016-09-27 18:15:20,"Reason for this implementation was @nex3 suggestion in https://github.com/sass/sass/issues/360. @long-lazuli Could you give any example where `.foo.foo` would be desirable?
",lokson,long-lazuli
2151,2016-09-29 00:01:19,"@long-lazuli Right, it is possible to use `.foo.foo` to rise selector specifity. I'm perfectly fine to remove this part of pull request. @nex3, @chriseppstein, what's your opinion on this?
",lokson,long-lazuli
2146,2016-10-18 22:04:07,"Thanks @HugoGiraudel
",seeliang,HugoGiraudel
2140,2016-09-21 12:31:17,"@acarlstein ‚Äì¬†try using mixins ‚Äì¬†this works for me 



Output:


",jakob-e,acarlstein
2140,2016-10-18 14:01:30,"@acarlstein I believe @jakob-e found a solution to your problem. If it is indeed fixed, feel free to close this issue. :)
",HugoGiraudel,jakob-e
2140,2016-10-18 14:01:30,"@acarlstein I believe @jakob-e found a solution to your problem. If it is indeed fixed, feel free to close this issue. :)
",HugoGiraudel,acarlstein
2137,2016-09-11 19:59:28,"@Cratyz No it's being worked on as a feature in Sass 4.0. As it says in the original issue. There are a number of work-arounds, the simplest being to simply rename the files to have a different extension.
",chriseppstein,Cratyz
2135,2016-09-08 18:07:13,"@chriseppstein Oh, awesome, thanks!
",tedw,chriseppstein
2129,2016-08-30 16:00:15,"@GMchris, Sounds like a mixin would be a better solution, in my opinion. 

**Some potential issues** 
- automatically arranging css properties by alphabetical order
",jessepinuelas,GMchris
2129,2016-08-31 08:01:27,"@jessepinuelas How do you mean? Wouldn't properties be evaluated first, and all assigned 100px (in this case), after which additional manipulations could be applied. And by mixin I assume you mean something like:

`@include multiple((max-height, min-height, height), 100px)`

But this kind of defeats the purpose of writing less, and on top of that is less readable.
",GMchris,jessepinuelas
2124,2016-08-24 22:49:45,"@chriseppstein sure. It will be in `spec/sass_3_5` untill end of this week.
",lokson,chriseppstein
2124,2016-08-25 22:07:10,"@chriseppstein, @xzyfer https://github.com/sass/sass-spec/pull/896
",lokson,chriseppstein
2124,2016-12-11 22:19:21,@lokson Same request as for #2112: can you rebase onto `next`?,nex3,lokson
2124,2016-12-18 17:58:17,@nex3 rebase into next ready,lokson,nex3
2124,2016-12-21 15:05:12,@nex3 https://github.com/sass/sass-spec/pull/896 rebased to master,lokson,nex3
2123,2016-08-19 07:57:25,"@xzyfer  thanks but I am still not understanding.
",douglasdeodato,xzyfer
2123,2016-08-23 20:02:22,"@douglasdeodato You should quote color names if you want them to be identifiers instead of color values.
",chriseppstein,douglasdeodato
2121,2017-01-06 23:15:21,@xzyfer Definitely. `==` and hash equality are always the same.,nex3,xzyfer
2112,2016-08-24 22:49:33,"@chriseppstein sure. It will be in `spec/sass_3_5` untill end of this week.
",lokson,chriseppstein
2112,2016-12-11 22:18:09,@lokson Sorry for the long turnaround time on this! Can you rebase this onto the latest `master`? It has a change that'll make this run specs against your sass-spec pull request.,nex3,lokson
2112,2016-12-18 18:00:20,@nex3 rebase onto master done.,lokson,nex3
2112,2016-12-21 15:09:38,@nex3 https://github.com/sass/sass-spec/pull/897 rebased onto master,lokson,nex3
2110,2016-08-01 14:22:40,"Thanks @chriseppstein. We've moved the CSS import directive for the google font outside of Sass which works well for us. I don't know if I'll get the OK to fix the underlying issue, but I appreciate the info about AST. Feel free to close. Thanks for the awesome work on Sass!
",midwire,chriseppstein
2106,2016-08-25 22:26:31,"@chriseppstein, @xzyfer https://github.com/sass/sass-spec/pull/897
",lokson,chriseppstein
2105,2016-07-27 19:00:15,"If you look at the generated css you will see why:



Basically you've got



So, of course, because of how the CSS cascade resolution works, the second selector takes precedence. As @GabeJonson noted, if you do your extended selector after the base selector this will work.
",chriseppstein,GabeJonson
2103,2016-07-27 20:03:17,"@chriseppstein thanks for the answer !

I expected it is off the roadmap for now, but I just wanted to be sure I am not missing something or working on a object-like system it will be released soon.
For know with first class functions and bunch of methodology I was able to make a similar pattern, so no rush üëç 
",LoicGoyet,chriseppstein
2101,2016-07-27 06:53:00,"Thanks for looking at this @chriseppstein and sorry for the delay in getting back to you.

I ended up implementing that approach and it's working well. When I said it ""wasn't quite there"" I was merely referring to how I preferred it to look personally in my stylesheets. It was more a readability thing.

Do you think a `@context` directive, or similar, has any value (as in my first example)?
",hatzipanis,chriseppstein
2101,2016-07-27 18:43:41,"@hatzipanis I think our existing primitives are sufficient for this use case. Mixins and mixin content are the best ways to duplicate blocks of styles.
",chriseppstein,hatzipanis
2099,2016-11-06 20:31:07,"@nex3 

This author's error is result of opting Sass to not use quotes for string literals. Now because of that we're forced to continue suffer with obscure syntax for accessing object properties?

I think it would be better to leave that choice to users ‚Äî to use more handy syntax, but risk errors, or stay on safe rails. In the end of all, it matters does user understand what he does or no. Besides, as you demonstrated, current syntax neither eliminates any errors, so what's the point?

Well, now when I though about it, ironically it seems that `$colors.green` sounds even safer than `map-get($colors, green)`, because in first case we're 100% sure that `green` is string literal and not `#00f`.

> I've never liked JS's conflation of dereferencing and map access

Didn't like that statement. Sowwy.
",ArmorDarks,nex3
2096,2016-07-12 20:10:17,"@DaveKin CSS dimensions are linear, but if you multiply two linear dimensions you get an area, If you multiply again you get a volume. CSS doesn't currently have any properties that are expressed as an area or volume (tho it may someday) and so Sass gives you an error because you've computed an area but you must be meaning to specify a linear dimension. It may be that one of your numbers is actually a ratio and that you're not fully specifying its units. For example the value `$px-per-em: 12px / 1em` is a ratio that can be multiplied by an `em` value to compute pixels (E.g. `$px-per-em * 2em => 24px`)
",chriseppstein,DaveKin
2095,2016-07-05 06:35:57,"@xzyfer why not add these implementation on the official repo then ?
",sideffect0,xzyfer
2094,2016-07-08 12:18:55,"@chriseppstein 
Thanks for a feedback. Update is ready and it covers all of your examples.

In a first version, a multiline operator worked on all nested lines 
no matter how deep they were nested.

For example



Was transformed into:



And now it becomes:



After this commit multiline operator is concatenating only directly nested lines, 
(nested one level deeper than a line with operator).

And to have a multiline block nested in an another multiline block
(which will all end as a one line) - two multiline operators should be used.



Is transformed into:


",lokson,chriseppstein
2094,2016-07-08 20:38:03,"@nex3 Let's talk about this today. I know that's how the other languages work, but I find this approach in keeping with other indented syntax features an also having much less visual clutter.
",chriseppstein,nex3
2094,2016-07-09 10:00:55,"@nex3 
Commit is ready. A traditional syntax is surely easier to implement.

This change makes a multiline operator `\` act like in most languages.
It is replaced by a space and joined with a next line. Indentation of joined
line doesn't matter.

Multiline operator can be chained across several lines and it ignores
comment lines. For example:



Is changed into:


",lokson,nex3
2094,2016-07-11 01:26:24,"@xzyfer 
1. To which sass-spec folder add the tests? (I got lost there)
2. Should I do it before end of this pull request?
",lokson,xzyfer
2094,2016-07-11 23:12:10,"@nex3 do you want this to land on `next` or on `stable`? I was assuming `next` but it's currently a PR against `stable`.
",chriseppstein,nex3
2094,2016-07-15 19:13:04,"@lokson Specs should go in the [sass-spec repo](https://github.com/sass/sass-spec), under `spec/sass_3_5`, probably in a new `mutliline` directory. Feel free to do that after this lands, though.

@chriseppstein This should definitely land on `next`.
",nex3,lokson
2094,2016-07-15 19:13:04,"@lokson Specs should go in the [sass-spec repo](https://github.com/sass/sass-spec), under `spec/sass_3_5`, probably in a new `mutliline` directory. Feel free to do that after this lands, though.

@chriseppstein This should definitely land on `next`.
",nex3,chriseppstein
2094,2016-07-23 13:30:00,"@xzyfer https://github.com/sass/sass-spec/pull/895
",lokson,xzyfer
2094,2016-07-25 00:52:41,"Thanks @lokson 
",xzyfer,lokson
2094,2016-10-27 10:11:17,"I still miss you, dear short syntax:

One idea: lets add second multi line operator '|' that would not need to be repeated



It would mimic similar construct of yaml format.



@chriseppstein @nex3 
",lokson,nex3
2094,2016-10-27 10:11:17,"I still miss you, dear short syntax:

One idea: lets add second multi line operator '|' that would not need to be repeated



It would mimic similar construct of yaml format.



@chriseppstein @nex3 
",lokson,chriseppstein
2090,2016-08-07 04:39:54,"@chriseppstein Sorry for the delay in replying to you.

I am using SASS via Jekyll, which is why I did not know how to provide the `-q` command line option.  (I don't know how to provide any command line options to SASS in the context of Jekyll, since Jekyll kicks of SASS as part of its own build process.) Do you know how to control the SASS output with options like `-q` when Jekyll is running SASS?

In the meantime, I used a comment as per your advice which worked great.

My use case for leaving in the empty selectors was readability. I like seeing the full nested structure of my tags in the CSS, because it helps me think through and reason about the HTML structure when I'm writing CSS styling. It is probably more concise to omit it, but one of my favorite things about SASS is that I can ""see"" the HTML hierarchy in CSS.

Thanks again for your help on this -- much appreciated.
",jerzygangi,chriseppstein
2090,2016-08-08 20:19:59,"@jerzygangi Sounds good. I'm going to leave this closed then. I think our current behavior is sufficient.
",chriseppstein,jerzygangi
2088,2016-06-29 23:23:00,"> I still can say that & is not respected when there is no space after it as in my first example.

@menocomp The space is semantically important because a space is the difference between an descendant combinator and adding classes (etc) to the parent selector.
",chriseppstein,menocomp
2087,2016-06-29 19:19:45,"@olalonde is webpack looking for css files or other Sass files?

There's this one: https://github.com/jtangelder/sass-loader but it's meant to be used with node-sass.

This one claims to work with ruby sass: https://www.npmjs.com/package/ruby-sass-loader, but a quick scan of the implementation tells me it probably doesn't work too well. The right way would use a ruby library to create an [Importer](http://sass-lang.com/documentation/Sass/Importers.html) not unlike [this one I made](https://github.com/chriseppstein/sass-css-importer)
",chriseppstein,olalonde
2085,2016-06-17 10:18:07,"First there is such a SCSS
.a{
       XXXX xxxx;
     .b{
          XXXX xxxx;
         XXXX xxxx;
         XXXX xxxx;
     }
}
.c{
     I need the style inside of.B;
}

I don't want to add @at-root to the front of the.B.
Is there a way to solve it?

@douglasdeodato 
",chinajoy,douglasdeodato
2085,2016-06-17 11:57:15,"The easiest way is to make the styles inside of B a mixin. Then include
that mixin in both B and C.
On 17 Jun 2016 8:18 PM, ""Ê∑∑Âú®ÊàêÈÉΩ"" notifications@github.com wrote:

> First there is such a SCSS
> .a{
> XXXX xxxx;
> .b{
> XXXX xxxx;
> XXXX xxxx;
> XXXX xxxx;
> }
> }
> .c{
> I need the style inside of.B;
> }
> 
> I don't want to add @at-root https://github.com/at-root to the front of
> the.B.
> Is there a way to solve it?
> 
> @douglasdeodato https://github.com/douglasdeodato
> 
> ‚Äî
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/sass/sass/issues/2085#issuecomment-226733979, or mute
> the thread
> https://github.com/notifications/unsubscribe/AAjZWCBW4PTKK2IpYmhQoLzojaGD3BNZks5qMnRhgaJpZM4I4NuO
> .
",xzyfer,douglasdeodato
2082,2016-06-15 20:05:39,"@wheresrhys that url is a 404 for me.

However, the block of an `@if` or `@else` follow the same scoping rules as every other conditional block and loop. These are ""semi-global"" scopes. The follow slightly different scoping rules when used directly in the global scope (as opposed to when they are used in the local scope of a function, mixin, or selector). This is by design because conditionals and loops are frequently used to initialize global variables and forcing them to add `!global` to set a global variable in that context seems cumbersome.

I think you're right that this specific behavior is undocumented in the language reference. We should document it better.

> Which is confusing, and leads to hard to track down bugs, as the variable in the global scope may be defined in a different file.

This is, more generally, a problem with global variables in Sass, independent of whether they are used in a conditional. Specifically in Sass 4.0 our module system will scope global variables to the module and provide syntax for avoiding unintended name collisions across modules.
",chriseppstein,wheresrhys
2078,2016-06-14 23:37:26,"> A possible solution is providing the option to prefix all Sass functions

This is a feature of Sass 4.0.

In Sass 3.5, there will be a generic work around that could be done in the stylesheet, without needing a patch release.

In sass 3.4 (current release), we will need to do a patch release to handle this.

@tabatkins There's a ton of functions here that will stomp all over a bunch of Sass functions and probably some user-defined ones. That's fine, obv, but what is the current browser support for this new spec? I'm surprised users are hitting this already.
",chriseppstein,tabatkins
2078,2016-06-14 23:50:52,"@stevenvachon According to @tabatkins this spec is still very much in flux, especially around the `color()` function that you're using here. What is your current use case?
",chriseppstein,tabatkins
2078,2016-06-14 23:50:52,"@stevenvachon According to @tabatkins this spec is still very much in flux, especially around the `color()` function that you're using here. What is your current use case?
",chriseppstein,stevenvachon
2078,2016-06-20 16:37:04,"@chriseppstein I'm currently using Less followed by  [cssnext](https://www.npmjs.com/package/postcss-cssnext). I'd like to swap out Less for Sass/SCSS, but currently cannot because I get errors.

**Edit:**
Without [less-plugin-future-compat](https://www.npmjs.com/less-plugin-future-compat), Less will error as well. I had tried to do the same for libsass ([libsass#1911](https://github.com/sass/libsass/issues/1911)), but it wasn't possible.
",stevenvachon,chriseppstein
2078,2016-07-13 19:15:24,"@chriseppstein ?

It would be awesome if 3.4.x could get this feature as an option.
",stevenvachon,chriseppstein
2078,2016-07-14 18:52:06,"@stevenvachon In Sass 3.5 there is a good work-around that is already landed. In Sass 3.4 you can do:



I know it's not ideal. But it does produce the desired output.
",chriseppstein,stevenvachon
2078,2016-07-14 20:03:25,"@stevenvachon we'll announce on twitter when it's released.
",chriseppstein,stevenvachon
2078,2016-07-14 22:06:58,"@stevenvachon not in the next month. I'd like to leave this open for now.
",chriseppstein,stevenvachon
2078,2016-10-27 17:12:48,"@chriseppstein is there an issue or something for the function prefixing in v4 that we can follow?
",stevenvachon,chriseppstein
2074,2016-06-07 08:32:50,"@andypinet Yeah, I said that near the end of the description. Still, it'd be nicer if it worked without the work-around.
",hon2a,andypinet
2074,2016-06-09 07:51:33,"@chriseppstein Thanks for that, you prompted me to try the full use-case I put in the description on [SassMeister](http://www.sassmeister.com/) and it actually works as long as there is a non-empty use of `%abstract` later in the code. That means your `!optional` suggestion is also applicable to flag `.instance` as `%abstract` without being sure that `%abstract` will be used anywhere.

Originally I tried only this code on SassMeister



and got the warning. I then expected that the `@extend` will not properly work with later uses of `%abstract`. Since this isn't true, I'm closing the issue. Thanks for the help.
",hon2a,chriseppstein
2073,2016-06-07 07:41:42,"@chriseppstein not really, I include an extend from _icons.scss inside _extends.scss that are both imported in _styles-main in a correct order, plus, there are more .scss files in the project.

There is something wrong with the package version after the sass update on this project.

I tried downgrading gulp and npm and it didnt help, couldn't downgrade node-sass though.

Curious is that if i make a dummy project somewhere else on my PC with just these 3 files - it works.
",alexcracea,chriseppstein
2071,2016-06-29 22:04:59,"Hi @thiagorb Thanks for the patch, sorry for the delay in reviewing it.

My first and biggest concern is that this implementation of the gray() is going to give different results than [the algorithm that is specified by the gray() function in CSS](https://drafts.csswg.org/css-color/#gray-to-rgb).

The color spec level 4 has a bunch of new algorithms for color handling and this is our first foray into them. And you thought this was going to be easy üòõ?

Fortunately, there's some [example JS code provided](https://drafts.csswg.org/css-color/#color-conversion-code) that we can port to ruby. I think for the gray function, there's probably an optimized path through that code, but eventually we'll need to implement the full spectrum of that color handling (great pun I know), so I don't think it's worth the effort to find it.

Beyond the algorithm issue, things look pretty good.
",chriseppstein,thiagorb
2069,2016-06-02 21:02:23,"What @mgreter said. Although, a random weird comment isn't very self documenting so maybe wrap it up in a mixin:


",chriseppstein,mgreter
2069,2016-06-03 00:26:57,"It works, thanks @mgreter. Could you tell more about why sass remove empty selectors?
",camsong,mgreter
2069,2016-06-06 17:45:53,"> Could you tell more about why sass remove empty selectors?

@camsong 
1. A selector with no properties has no meaning to a browser.
2. It is the selector analog of pruning out properties that are set to `null`.
3. It cleans up the use case of including a mixin into a selector that conditionally produces no output based on configuration settings, global state, etc. In those cases, a selector is undesired as is an additional conditional at the call site.
",chriseppstein,camsong
2066,2016-05-23 20:54:02,"Hi @chriseppstein 

Thanks for your reply!

Ah, I see, as I've supposed they're indeed immutable. That's fine, of course.

Though, I'm trying really hard to apply you code and understand how does it solve described issue, without any luck. Am I missing something?
",ArmorDarks,chriseppstein
2066,2017-03-03 11:27:51,"@chriseppstein any chances for this to be reviewed?

Judging from your newer issues you're now less opposed to side-effects in functions.

Personally, I'm not fan of side effects too, but in some scenarios Sass just forces you to use them, because there are no easy way to pass certain values (for example, between mixins https://github.com/sass/sass/issues/871).

I do not think that your solution is good example, because it breaks the point of those functions. They supposed to encapsulate logic of assigning and retrieving to those global variables in the way, that user even may not need to know about those temporary global functions. But instead you're suggesting to expose this global variable for assignment. This way app just can't expose to user normal methods for set\get.

I propose at least to re-open this issue.

Thanks.",ArmorDarks,chriseppstein
2066,2017-03-11 21:51:35,"@chriseppstein? @nex3? Anyone?

If reply on this issue can't be provided right away, please, at least __re-open this issue__. I think it is very impolite to close issue right away without any meaningful solution.",ArmorDarks,chriseppstein
2066,2017-03-13 20:08:11,"@ArmorDarks The solution is to write your code differently so that the calling code performs the mutation in place instead of relying on side-effects.




Then use this function mutate an existing map in the scope where it is defined:





",chriseppstein,ArmorDarks
2066,2017-03-13 20:11:35,"@ArmorDarks FWIW, I never suggested that you create global variables per se. just that if you have a global variable you are mutating in a local scope to make sure to use the `!global` modifier when you update the variable reference. I think a best practice is to avoid globals as much as possible.",chriseppstein,ArmorDarks
2064,2016-05-25 23:05:04,"@nex3 All code review comments have been addressed. üëç ?
",chriseppstein,nex3
2063,2016-05-23 20:59:12,"@ArmorDarks Sass already has the `call` function for invoking functions by value. And we already have variable arguments. See the release notes for Sass 3.3: http://sass-lang.com/documentation/file.SASS_CHANGELOG.html#330_7_march_2014
",chriseppstein,ArmorDarks
2063,2016-05-23 21:11:54,"@chriseppstein Thanks for explanation, I didn't see that PR. My bad. That was exactly what I've been asking about. So, no more strings in calls, as I've thought. Sadly enough.

Won't it be possible to automatically call `$__tempFuncRef__: function-reference({{ functionName }});` by Sass itself before any `call`, which uphold string as first argument? This will allow to preserve previous behavior and avoid depreciation.
",ArmorDarks,chriseppstein
2063,2016-05-23 21:24:39,"@ArmorDarks No. In 4.0, the issue is that in many cases the code performing the call is in a different module than the code specifying the name of the function to invoke. In 4.0 global functions don't exist. Lexical scoping rules mean that it's quite unlikely that the code performing the call would be able to resolve the function name from that scope or worse, it may resolve to a different function of the same name. 
",chriseppstein,ArmorDarks
2059,2016-05-12 14:03:12,"@cH40z-Lord you can test Ruby Sass output online with http://sassmeister.com/
",xzyfer,cH40z-Lord
2059,2016-05-12 14:21:42,"@xzyfer great, though the output is the same no matter what version I test it against: http://www.sassmeister.com/gist/caaadc02bbacce49790781fa2b122fbd 
",cH40z-Lord,xzyfer
2057,2016-09-09 12:35:56,"@chriseppstein any updates on this getting merged?
",lifeiscontent,chriseppstein
2057,2016-10-04 20:39:55,"@chriseppstein I'm also interested on if there are updates for this pull request. It seems like #2061 was merged in.
",internetErik,chriseppstein
2056,2016-05-11 18:03:03,"@Kasheftin That syntax is indistinguishable from CSS syntax so for forward-compatibility with future versions of CSS that may occur between Sass releases, we do not have a white-list of legal CSS functions.
",chriseppstein,Kasheftin
2052,2016-05-11 22:06:40,"@chriseppstein I agree that it is not a common enough use case to worry about, if it requires too many changes. I'm using SASS for few years now and bumping into this just now. Also thank you for the work around, it does look better than separate block. {:
",marek-saji,chriseppstein
2047,2016-05-04 12:02:17,"^ Was just about to post what @xzyfer said, haha. Except, you should probably use `$i * 1px` instead of `#{$i}px` so it's an actual length value and not a string.
",davidkpiano,xzyfer
2047,2016-05-04 12:03:35,"@davidkpiano makes sense, updated.
",xzyfer,davidkpiano
2047,2016-05-04 12:15:26,"OK, thanks guys!

@xzyfer Interesting example with the list!

I will only need a handful of these variables, so i'll just write them out without a loop... 
",wouter-muller,xzyfer
2040,2016-05-03 21:32:57,"@nex3 Thanks for reviewing. Commit 6e8a053f3f1b3c58d3c7db057d7df80e8fee3752 has the changes you suggested.
",chriseppstein,nex3
2038,2016-04-23 08:28:05,"@dangreen any time LibSass and Sass differ it is a LibSass bug. Please open an issue with LibSass.
",xzyfer,dangreen
2035,2016-04-21 23:39:45,"@cimmanon the only difference between a partial and a regular css file is the leading underscore, right?

`@import ""common/icons""` is referring to the file common/_icons.scss, likewise, `@import ""desktop/modals""` is referring to desktop/_modals.scss

[EDIT] and both of them are imported in a manifest file that `@imports` loads of partials
",erichummel,cimmanon
2035,2016-04-22 19:19:53,"@erichummel I cannot reproduce this issue according to your description unless I try to compile `desktop/modals` directly (since you say it doesn't import `common/icons` itself (which I think was what @cimmanon was trying to say. if you run `sass --update` or `sass --watch` and desktop/modals is not a partial then sass will try to compile it.
",chriseppstein,erichummel
2035,2016-04-22 19:19:53,"@erichummel I cannot reproduce this issue according to your description unless I try to compile `desktop/modals` directly (since you say it doesn't import `common/icons` itself (which I think was what @cimmanon was trying to say. if you run `sass --update` or `sass --watch` and desktop/modals is not a partial then sass will try to compile it.
",chriseppstein,cimmanon
2035,2016-04-22 19:24:33,"thanks for looking into it, @chriseppstein - I'm trying to create a super simple test case on a fresh rails app to reproduce the issue. 

I'll either reproduce it, in which case I'll push the test case to github and share it here, or I won't be able to reproduce it and I'll have to dissect what the difference between my app and the test app is, in which case I will post my findings here and close this issue. 
",erichummel,chriseppstein
2035,2016-04-22 20:26:16,"welp, try as I might, I couldn't reproduce the issue in a new rails app, and in the process of noting the difference between my app and the test case I tracked down a few more erroneous `@extends` and voila, the problem has disappeared. 

I guess I must have been so bleary eyed while stuck in the weeds with this yesterday that I misread the error or something.

At any rate, if anyone else runs into a problem like this while upgrading sass to 3.4.x, check all your `@extends` and make sure that their dependencies are actually being `@imported` before they're extended. Also, make sure you're not calling `@extend` from within media query blocks to extend with selectors defined outside of those blocks.

thanks @chriseppstein and @cimmanon 
",erichummel,chriseppstein
2035,2016-04-22 20:26:16,"welp, try as I might, I couldn't reproduce the issue in a new rails app, and in the process of noting the difference between my app and the test case I tracked down a few more erroneous `@extends` and voila, the problem has disappeared. 

I guess I must have been so bleary eyed while stuck in the weeds with this yesterday that I misread the error or something.

At any rate, if anyone else runs into a problem like this while upgrading sass to 3.4.x, check all your `@extends` and make sure that their dependencies are actually being `@imported` before they're extended. Also, make sure you're not calling `@extend` from within media query blocks to extend with selectors defined outside of those blocks.

thanks @chriseppstein and @cimmanon 
",erichummel,cimmanon
2030,2016-04-11 13:15:10,"@cimmanon: I‚Äôd be happy to debate the pros and cons of developing with immutable utility classes, but that‚Äôs not what this request is about. Whether it makes sense for your/one‚Äôs projects or not, whether you/one likes it or not, it‚Äôs undeniable that **it is** a philosophy for CSS development, one already widely used in many responsive layout frameworks, and one that, I‚Äôd argue, is only growing in adoption. This is what the request is about: making Sass more useful for those who prefer to develop this way.

In short, let others do what makes sense for them.
",paulozoom,cimmanon
2030,2016-04-11 18:26:06,"> In short, let others do what makes sense for them.

We get a lot of requests for `@include my-mixin($args) !important` which would then mark every property declaration in that mixin as important. We have rejected this feature not because it's hard but because it is bad to use `!important` like that. As such, we are frequently in the position of deciding whether language features in Sass encourage ""Good CSS"" or ""Bad CSS"" and we frequently have to use our own opinions on what constitutes good and bad stylesheet authoring practices. I'm not saying that this applies specifically here, just that as a general statement, I disagree with it :)

In this case, we want `&` to result in an error when there is no parent selector because we believe that most users expect there to be a parent selector in scope when they use it and so this error speeds up the debugging process of an authoring mistake.

My proposal to you is to change your implementation to use a prefix even for the global scope. This accomplishes all of your goals except for the exact naming you prefer. Alternatively, you can use the implementation suggestion that @cimmanon has made which seems pretty nice to me.
",chriseppstein,cimmanon
2030,2016-04-11 19:37:09,"@chriseppstein:

> I'm not saying that this applies specifically here, just that as a general statement, I disagree with it :)

You're right, and as a general statement, I don‚Äôt agree with it myself üòÑ 

> [‚Ä¶] we believe that most users expect there to be a parent selector in scope when they use it and so this error speeds up the debugging process of an authoring mistake

Totally understand that position of making life much easier on an use case that a lot more people will run into. Opened the issue with the hopes that both scenarios could be covered, but alas not. I‚Äôll find a workaround.

As for @cimmanon‚Äôs suggestion, I appreciate it, but it‚Äôd imply calling the mixin for each selector group I want to namespace, resulting in one `@media` block per selector group, which isn‚Äôt desirable.
",paulozoom,chriseppstein
2030,2016-04-11 19:37:09,"@chriseppstein:

> I'm not saying that this applies specifically here, just that as a general statement, I disagree with it :)

You're right, and as a general statement, I don‚Äôt agree with it myself üòÑ 

> [‚Ä¶] we believe that most users expect there to be a parent selector in scope when they use it and so this error speeds up the debugging process of an authoring mistake

Totally understand that position of making life much easier on an use case that a lot more people will run into. Opened the issue with the hopes that both scenarios could be covered, but alas not. I‚Äôll find a workaround.

As for @cimmanon‚Äôs suggestion, I appreciate it, but it‚Äôd imply calling the mixin for each selector group I want to namespace, resulting in one `@media` block per selector group, which isn‚Äôt desirable.
",paulozoom,cimmanon
2023,2016-04-11 17:49:25,"@nex3 this seems like a bug to me. The `@charset` is needed in partials to declare the charset but then it cannot be imported except at the top level. This seems like an oversight in the implementation.
",chriseppstein,nex3
2023,2016-04-18 18:17:21,"I discussed this with @nex3 and we decided that it should be considered a bug.
",chriseppstein,nex3
2022,2016-03-29 16:55:14,"As @davidkpiano mentioned, `*:before` and `:before` are semantically identical. There is no bug here.
",chriseppstein,davidkpiano
2017,2016-03-17 18:39:07,"As noted in the issue linked by @cimmanon, the correct solution here is to use Sass maps which we added a couple versions ago to handle this use case.
",chriseppstein,cimmanon
2016,2016-03-17 22:33:51,"@glebm Well, @nex3 has consistently rejected patches that fix this so far, arguing that ruby warnings are not in line with our preferred coding standard for this project. So I will let her weigh in. Personally, I am not opposed to Sass running without warnings when running with `-w` set.
",chriseppstein,glebm
2016,2016-03-18 01:30:45,"@chriseppstein This is undocumented in rake, but to disable warnings, `verbose` also needs to be disabled [like here](https://github.com/twbs/bootstrap-rubygem/blob/23b55fc0e064a9ccc105320ba8f05c99b7fad61a/Rakefile#L8-L9). I don't know how to make it only hide the Sass warnings but not other warnings.
",glebm,chriseppstein
2016,2016-03-22 17:29:28,"@nex3 @chriseppstein Please consider to merge this for the Community sanity.

Sass is a dependency for hundreds of gems and thousands of applications that will see these warnings (and they are a lot). Of course they can decide to opt-out for Ruby warnings, but that prevents OSS maintainers to keep them enabled.

:pray: 

---

**UPDATE:** Here's an example of what I'm saying: a Travis CI build that fails and it reports:

> This log is too long to be displayed. Please reduce the verbosity of your build or download the raw log.

![screen shot 2016-03-22 at 19 14 22](https://cloud.githubusercontent.com/assets/5089/13962693/78c19ec4-f062-11e5-82e2-70c48448bf4f.png)

Source: https://travis-ci.org/hanami/assets/jobs/117776354
",jodosha,chriseppstein
2016,2016-03-22 21:41:13,"@chriseppstein Thank you for that merge and for maintaining Sass :green_heart: 
",jodosha,chriseppstein
2015,2016-03-22 20:45:44,"@glebm Thanks for the patch!
",chriseppstein,glebm
2014,2016-03-11 23:38:00,"@davidkpiano has got it right. no need for interpolation there.
",chriseppstein,davidkpiano
2012,2016-03-12 07:57:36,"@chriseppstein: Well, Stylus is good too.  :)  Thanks for at least considering the idea.  I think that viewpoint the Sass maintainers have is good as well, good intentions.  It was worth a shot at least.  :P
",jamen,chriseppstein
2010,2016-06-01 21:02:31,"@Jujucristine do you remember how you fixed this locally?
",paulmoliva,Jujucristine
2010,2016-08-29 00:38:38,"@paulmoliva you may wish to run with ""expanded"" theme, `sass -t expanded`. Your output looks like correct ""nested"" output theme which is the default.

test.scss



then `./sass -t expanded /tmp/test.scs`

and result is



@Jujucristine could you post example with wrong behavior?
",lokson,paulmoliva
2010,2016-08-29 00:38:38,"@paulmoliva you may wish to run with ""expanded"" theme, `sass -t expanded`. Your output looks like correct ""nested"" output theme which is the default.

test.scss



then `./sass -t expanded /tmp/test.scs`

and result is



@Jujucristine could you post example with wrong behavior?
",lokson,Jujucristine
2010,2016-08-31 21:51:07,"@Jujucristine I typed out the screenshot from above:



And it compiles to this:



Which is what is expected and is not what you initially reported. I don't have an actual source file to use to attempt to reproduce this issue, so it's closed. Please provide a reproducible test case.
",chriseppstein,Jujucristine
2007,2016-03-04 18:47:32,"@fabiospampinato ah I think I see the issue here. we're in violent agreement. I thought you were requesting that we don't output anything instead of just omitting the `:not()`.

TL;DR we both fail at reading comprehension.
",chriseppstein,fabiospampinato
2006,2016-03-04 09:08:25,"@chriseppstein , sorry, I am not sure what you're talking about. The reason I complained was very high CPU usage and messages from sass in the terminal about changes made (new files detected) in sass files in other directories. 
Also, I'm using version 3.4.21
",tigrr,chriseppstein
2004,2016-02-29 20:00:51,"@DeoThemes See if this will help you out any at all https://robots.thoughtbot.com/sass-source-maps-chrome-magic
",ubergeekzone,DeoThemes
2004,2016-02-29 22:16:07,"@chriseppstein i am working on a HOWTO for this tonight for you guys, found out about this where it asked if someone wanted to do it on twitter.
",ubergeekzone,chriseppstein
2004,2016-03-01 01:32:49,"@chriseppstein  Hi, thanks for advice, but I've already checked this article and tried to follow all steps. But on a step **Map to network resource** when I right click on style.scss there are no options to choose file. Here is screenshot  - http://clip2net.com/s/3uZ2fab

Maybe the problem can be cuz I'm running file on a local machine and a format is file:/// instead of localhost?

It might be very helpful for a new users to read detailed HOWTO with all explanations. I spent about 2-3 days serfing forums and still can't find working solution.

Thanks for your help.
Best Regards.
",DeoThemes,chriseppstein
2002,2016-03-07 21:13:00,"@lowenthal-jason Thanks for the patch. It missed some corner cases and lacked a test case, so I fixed it in a different commit. will be in the next stable release.
",chriseppstein,lowenthal-jason
2002,2016-03-10 04:57:46,"@chriseppstein Thanks for the opportunity to participate. I'll look for other places to do so, but admittedly I'm a ruby n00b
",lowenthal-jason,chriseppstein
1996,2016-05-16 18:15:57,"@HugoGiraudel That's a good point. maybe we'll just turn issues off on the new repo.
",chriseppstein,HugoGiraudel
1988,2016-05-19 19:12:39,"@chriseppstein I'm not a fan of overloading functions like that‚Äîit makes it difficult for people unfamiliar with the function to read code that uses it. It should do exactly what the name says. I'd prefer to have a separate `content-arity()` function for that.
",nex3,chriseppstein
1988,2016-05-19 19:28:41,"@nex3 Agreed. I actually had come to the same realization before I read your comment üëç 
",chriseppstein,nex3
1985,2016-02-08 20:34:01,"@chriseppstein Thanks so much for looking into this! I'll report back here if I am able to find out any more info.
",lencioni,chriseppstein
1982,2016-02-02 18:08:20,"Thank you @cimmanon.  Clearly I locked onto the wrong problem.  My final code looked like this: 


",MCTaylor17,cimmanon
1973,2016-01-19 19:14:04,"@hcatlin When we can take donations online, let's add that.
",chriseppstein,hcatlin
1970,2016-01-18 17:53:53,"@mgreter Looks like our list parsing code raises the error without letting it fall back to the map's parsing. I don't know whether @nex3 considers this a bug or not.
",chriseppstein,mgreter
1968,2016-01-15 18:02:23,"@Alphmega What @HugoGiraudel says is true: 



If you're getting a different result, I'm very confused as to how. I guess you can tell us what version and implementation you are using -- maybe you just need to upgrade -- I dunno.
",chriseppstein,HugoGiraudel
1968,2016-01-15 18:02:23,"@Alphmega What @HugoGiraudel says is true: 



If you're getting a different result, I'm very confused as to how. I guess you can tell us what version and implementation you are using -- maybe you just need to upgrade -- I dunno.
",chriseppstein,Alphmega
1968,2016-01-16 04:32:31,"@chriseppstein @HugoGiraudel After upgrading sass, it returns correct return. Thanks for answering 
",Alphmega,HugoGiraudel
1968,2016-01-16 04:32:31,"@chriseppstein @HugoGiraudel After upgrading sass, it returns correct return. Thanks for answering 
",Alphmega,chriseppstein
1963,2016-01-11 19:17:27,"@chriseppstein Thanks for the clarification regarding example 2, being aware of #216, didn't think it'll apply to CSS constructs in addition to Sass constructs such as maps‚Ä¶

Didn't think to write my intended value for `grid-template-areas` that way before.
",lozandier,chriseppstein
1963,2016-01-12 00:26:24,"@xzyfer I'm not opposed, but we create feature flags when the syntax is backwards compatible but the semantics change. What point would a flag serve? It would be a syntax error during compilation if the new syntax is encountered.
",chriseppstein,xzyfer
1963,2016-01-12 00:47:13,"> Maybe the point is moot without conditional `@import`.

@xzyfer Exactly. All sass files are parsed and there's no way to avoid the syntax error by scripting.
",chriseppstein,xzyfer
1963,2016-01-13 21:51:08,"@chriseppstein @nex3  @tabatkins This all makes sense to me. Thanks @xzyfer for reminding me to not forget about the awesomeness of `unquote`. 
",lozandier,tabatkins
1963,2016-01-13 21:51:08,"@chriseppstein @nex3  @tabatkins This all makes sense to me. Thanks @xzyfer for reminding me to not forget about the awesomeness of `unquote`. 
",lozandier,nex3
1963,2016-01-13 21:51:08,"@chriseppstein @nex3  @tabatkins This all makes sense to me. Thanks @xzyfer for reminding me to not forget about the awesomeness of `unquote`. 
",lozandier,chriseppstein
1963,2016-01-13 21:51:08,"@chriseppstein @nex3  @tabatkins This all makes sense to me. Thanks @xzyfer for reminding me to not forget about the awesomeness of `unquote`. 
",lozandier,xzyfer
1961,2016-12-11 22:39:29,"@jeremyevans I'm happy to merge something like this in, but I'll need you to merge with the latest stable and figure out how to get Rubocop happy if it's still complaining.",nex3,jeremyevans
1960,2016-01-08 17:54:05,"@mgreter yeah, that shouldn't be an error, but it's also deprecated. I'll fix it anyway :)
",chriseppstein,mgreter
1959,2016-01-07 19:37:48,"@Hibou57 That's a fair point. @nex3 did all the extend optimizations so I'll let her respond.
",chriseppstein,Hibou57
1959,2016-01-07 19:40:18,"@Hibou57 either way, Sass 3.2.12 is very old and I encourage you to upgrade -- any possible changes would only be made on the latest versions.
",chriseppstein,Hibou57
1959,2016-01-07 19:52:06,"I think the issue is that @Hibou57 is treating the placeholder selector as a `@mixin`. Extended selectors should never have a specificity greater than the extending selector, which is why `:hover` is added to `input`, but not `input[type]`, since you can consider `%ph:hover` to have a specificity of `0 2 0`. The automatic insertion of `:hover` is necessary to abide by this rule, and is happenstance in this case (though it is peculiar how Sass decides to add that...)

A potential solution is to either use `@mixin` or to explicitly extend the `:hover` states:


",davidkpiano,Hibou57
1959,2016-01-09 01:19:54,"@nex3, if this is per design (although unintuitive to me), these details should be in the documentation.

@chriseppstein 

> Sass 3.2.12 is very old 

That's what's in the Ubuntu 14.04 official repository, and there is no maintained PPA for Sass (the only one I could find is inactive since 2011).
",Hibou57,nex3
1959,2016-01-09 01:19:54,"@nex3, if this is per design (although unintuitive to me), these details should be in the documentation.

@chriseppstein 

> Sass 3.2.12 is very old 

That's what's in the Ubuntu 14.04 official repository, and there is no maintained PPA for Sass (the only one I could find is inactive since 2011).
",Hibou57,chriseppstein
1958,2016-01-06 20:56:33,"@chriseppstein not here


",tcurdt,chriseppstein
1958,2016-01-07 18:07:54,"@chriseppstein looks like all from `2.7.x` on upwords should be broken
Just installing the latest `listen` gem should be enough to reproduce it.

Maybe the easier way would be to have `sass` really be a script that calls `bundle exec`? Obviously there are many incompatibilities between the `listen` versions. So supporting all does not really sound like the best path forward.
",tcurdt,chriseppstein
1957,2016-01-06 18:04:57,"Hi @chriseppstein 

Thanks for your answer

> That is not valid syntax for a media query, so you get an error.

But `b: $x;` is also interpolated, the result is also not valid css syntax and it still works, i.e. it is substituted and nothing fails. Is this interpolation done at a later stage or why is there not error here?

Maybe you could be so kind and give me a hint on how to circumvent the Sass parser here to receive `@media (max-width: <<macro>>)` in the output? Or is this not possible under any circumstances?
",felixhayashi,chriseppstein
1957,2016-01-06 18:05:51,"@felixhayashi If you are able to format the at-rule after it has been parsed and output by the Sass compiler (which, if you're using macros, it seems like this is feasible for your use-case), you can use custom at-rules to get around Sass' proprietary handling of `@media` at-rules:



Successfully compiles (in Ruby Sass) to:



**EDIT:** You just need to remember to change the `@--media` custom at-rules to normal `@media`.
",davidkpiano,felixhayashi
1957,2016-01-06 18:24:23,"Hi @davidkpiano

thanks for this input, this would be a possible solution, altough still a bit hacky.

However what I find truly strange is that `gulp-sass` doesn't throw an error and just does what I expect/want it to do (as stated in the OP).

Having a sass file



Interpreted by the following gulp script‚Ä¶



produces‚Ä¶



-Felix
",felixhayashi,davidkpiano
1957,2016-01-06 18:53:24," @chriseppstein 

> I think you have an old version of node-sass installed. the latest version gives an error on this input.

Seems you are right. In `node-sass@1.2.3` it worked and now with `node-sass@3.4.2` it doesn't anymore. That's bad news for me :(

> I assume you are doing some sort of post processing I suggest that you used valid css syntax for your markers and you won't have this issue. E.g. -my-macro works fine.

Thanks for this suggestion. Unfortunately, I cannot control the macro syntax (it is predefined by the environment where the css is used in and actually even a bit more complex than in the example above). I think I'll stick with @davidkpiano's suggestion then as it seems to be the easies to work with.

Thanks
",felixhayashi,chriseppstein
1957,2016-01-06 18:53:24," @chriseppstein 

> I think you have an old version of node-sass installed. the latest version gives an error on this input.

Seems you are right. In `node-sass@1.2.3` it worked and now with `node-sass@3.4.2` it doesn't anymore. That's bad news for me :(

> I assume you are doing some sort of post processing I suggest that you used valid css syntax for your markers and you won't have this issue. E.g. -my-macro works fine.

Thanks for this suggestion. Unfortunately, I cannot control the macro syntax (it is predefined by the environment where the css is used in and actually even a bit more complex than in the example above). I think I'll stick with @davidkpiano's suggestion then as it seems to be the easies to work with.

Thanks
",felixhayashi,davidkpiano
1957,2016-01-06 19:48:11,"> @felixbuenemann output.gsub(/-my-macro/,""<<macro>>"")

@chriseppstein Thanks, but there are quite a lot of different macro expressions in my script and even some other directives that have a comlicated syntax so it would require some complicated regexps and not even sure if that will do it here. I tested @davidkpiano's solution with Ruby Sass `sass-3.4.20.gem` and it does compile with custom at-rules. However `node-sass@3.4.2` fails here again. Should I report this divergence somewhere?
",felixhayashi,chriseppstein
1957,2016-01-06 19:48:11,"> @felixbuenemann output.gsub(/-my-macro/,""<<macro>>"")

@chriseppstein Thanks, but there are quite a lot of different macro expressions in my script and even some other directives that have a comlicated syntax so it would require some complicated regexps and not even sure if that will do it here. I tested @davidkpiano's solution with Ruby Sass `sass-3.4.20.gem` and it does compile with custom at-rules. However `node-sass@3.4.2` fails here again. Should I report this divergence somewhere?
",felixhayashi,davidkpiano
1956,2016-01-17 18:49:49,"@chriseppstein Do you think that with adding the simple restriction that properties can not be repeated for declaration blocks assigned to variables, my original proposal can be feasible?

I think it would be valuable since, even today, maps currently _are_ being used as declaration blocks, and the syntax isn't the best, nor is the need to convert the map to a declaration block.

I'm willing to help on this in any way I can.

**EDIT:** I read #1582 a while back and my understanding is that it's trying to solve a problem set in the context of `@mixins`. This proposal is not related to `@mixins` since it will only refer to a single node, which is the map-like declaration block, which would be treated as a first-class value. It's simpler to represent since it does _not_ include selectors.
",davidkpiano,chriseppstein
1949,2016-01-04 20:45:05,"@kmcaloon what version of Sass are you using? In Sass `3.4.20` I get `.snippet--showdate .snippet__date-flag`.
",chriseppstein,kmcaloon
1949,2016-01-04 21:03:24,"@chriseppstein  thanks for the quick response. You were on the right track. Although my sass gem was up to date, the gulp-sass node provided with the sage/roots WP theme I was using needed to be updated. Sorry for the false alarm.
",kmcaloon,chriseppstein
1949,2016-01-04 21:06:37,"@kmcaloon No worries, glad we got it sorted out.
",chriseppstein,kmcaloon
1946,2016-01-05 13:02:07,"@chriseppstein when testing on Sass 3.4.20 and 4.0.0.alpha.1 removing the `;` did fix the issue.

My guess is that it's because the [STATIC_VALUE](https://github.com/sass/sass/blob/9077d95ffa6ab9388f59074483f1ef508d75d448/lib/sass/scss/rx.rb#L137) only matches if there is a trailing `[;}]`.
",xzyfer,chriseppstein
1946,2016-01-09 14:52:04,"@chriseppstein any updates on the proposed fix presented by xzyfer?
",mgreter,chriseppstein
1946,2016-04-28 18:35:22,"@mgreter No work has been done on this yet, but I think it makes sense to not do any static parsing when in compressed mode so that we can always compress output the best.
",chriseppstein,mgreter
1945,2015-12-21 16:33:05,"Hey @pentzzsolt, let's break this down. You currently have:



And later on, you're extending:



So what this means is that:
- `a` is extending `%extend`, which is to say that you are styling `a` as if it matches `%extend`
- `a` must be a general descendant of `form` (child, grandchild, etc.)

But when you extend `%extend`, you have these additional constraints:
- `%extend` is a general descendant of `.error`, meaning...
- `a` must also be a general descendant of `.error`, since it's being styled as if it matches `%extend`.

Therefore, `a` must be a general descendant of both `form` and `.error`. Now, Sass has no way of knowing which one comes first, since a general descendant means that the selector can be a child, grandchild, great-grandchild, etc. of the parent selector (`form` and `.error` in this example). So, with the child analogy, consider these two possibilities:
- `a` is the child of `form` and the grandchild of `.error`, giving you `.error form a`
- `a` is the child of `.error` and the grandchild of `form`, giving you `form .error a`

Both of these match the constraints that _you_ set up, and both of these selectors are valid. Remember: Sass is not a mind reader, so it will output the most feasible/common permutations of selectors.

Now, if you want to avoid this potential selector explosion in the future, avoid the **general descendant combinator** if you can. By having a selector such as `form a`, you're basically saying that you have no idea where `a` is, you just know it's inside a `form` somewhere. You can have stricter constraints (and a much easier time predicting what `@extend` will do) when you use the **direct descendant combinator**, such as `form > a` or `.error > %extend`.

Hope this helps!
",davidkpiano,pentzzsolt
1945,2015-12-21 16:41:29,"Hey @davidkpiano!

Thank you for your quick response, much appreciated!

Although I forgot to mention, but I did experiment with the **direct descendant combinator** and realized that using that does not lead to a selector explosion. Unfortunately, in my case, as you said, I have absolutely no idea where my selector is going to end up inside my parent selector's DOM tree.

What you wrote and the way you broke it down makes perfect sense. I wonder though, if there is any way to somehow override this effect, group with parenthesis somehow for instance.
",pentzzsolt,davidkpiano
1943,2015-12-18 21:49:24,"@chriseppstein Interesting. Very interesting.
",Undistraction,chriseppstein
1943,2015-12-18 22:38:31,"@Undistraction I think you're missing something. This exact example would work like so (syntax is all placeholder obviously)



Granted this is a little more verbose, but this is also a lot more powerful than simply allowing names.
",chriseppstein,Undistraction
1943,2015-12-18 23:00:32," Thanks. That‚Äôs what I needed. The penny has dropped.

On Fri, 18 Dec 2015 at 22:38 Chris Eppstein notifications@github.com
wrote:

> @Undistraction https://github.com/Undistraction I think you're missing
> something. This exact example would work like so (syntax is all placeholder
> obviously)
> 
> @mixin example {
>     .alpha {
>         @content(alpha);
>     }
> 
> 
> 
> }
> @include example with($slot) {
>   @if $slot == alpha {    /\* Alpha content _/
>   } @else if slot == beta {    /_ Beta content */
>   }
> }
> 
> Granted this is a little more verbose, but this is also a lot more
> powerful than simply allowing names.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1943#issuecomment-165912990.
",Undistraction,Undistraction
1936,2015-12-14 13:49:33,"Thanks @cimmanon! It was only on reading the post I realised some of those keys were highlighted differently‚Ä¶ :0
",barneycarroll,cimmanon
1935,2015-12-16 10:00:22,"Hi @chriseppstein ,

Thank you so much for clearing this up for me! This makes much more sense.

Cheers!
",Sector22,chriseppstein
1934,2015-12-14 17:48:53,"What @davidkpiano said.

FWIW, once the CSS `:matches()` pseudo selector is well supported, Sass will be able to emit a much more elegant output selector here: `:matches(.person-edit, .person-create, .person-delete) + :matches(.person-edit, .person-create, .person-delete)`
",chriseppstein,davidkpiano
1934,2015-12-14 23:58:17,"@artch Extend semantics are very well defined -- there's no reasonable way to configure them without meaningfully changing the definition of extend. The solution here is to not use extend for the places where you don't want this behavior.
",chriseppstein,artch
1934,2015-12-15 06:10:19,"@chriseppstein let me describe the possible use case: you have to use some SCSS framework. You almost can't change it. In your project you want to use BEM and you want to build semantic naming scheme. I.e. you want to have:



On other page:



Today `item-control` and `project-control` are buttons, tomorrow some of them may be links, etc. There is no chance that `item-control` and `project-control` will be siblings.

Which solution is better here? How it's possible to implement that without `@extend` and to not get a lot of extra CSS?
",andreev-artem,chriseppstein
1934,2015-12-15 12:16:29,"@chriseppstein By the way, `:matches` is now supported in every browser except IE. Any chance to enable it in this case, if IE is not vital for our project?
",artch,chriseppstein
1934,2015-12-15 13:36:53,"@andreev-artem To do that, remove the rule that gives styling to adjacent buttons. That is a constraint that doesn't match your intended constraint.
- `%btn + %btn` says ""**Any** button next to **any** button""
- `.project-control + .project-control` says ""**Only** `.project-control` next to **only** `.project-control`

In this case, it's better (IMO) to have a placeholder selector describing the styling for your intended constraint outside of the context of `%btn`:

**SCSS:**



Generates this **CSS**:



@artch Sass will already output `:matches(...)` selectors correctly, so feel free to use it with `@extend`! :tada: 
",davidkpiano,andreev-artem
1934,2015-12-15 13:36:53,"@andreev-artem To do that, remove the rule that gives styling to adjacent buttons. That is a constraint that doesn't match your intended constraint.
- `%btn + %btn` says ""**Any** button next to **any** button""
- `.project-control + .project-control` says ""**Only** `.project-control` next to **only** `.project-control`

In this case, it's better (IMO) to have a placeholder selector describing the styling for your intended constraint outside of the context of `%btn`:

**SCSS:**



Generates this **CSS**:



@artch Sass will already output `:matches(...)` selectors correctly, so feel free to use it with `@extend`! :tada: 
",davidkpiano,artch
1934,2015-12-15 14:30:48,"@davidkpiano I can't remove/refactor that - it's contained in external framework. And I think that's quite general situation. Just not all want to fight with that and just use what framework has. And looks like SASS can't help here.
",andreev-artem,davidkpiano
1934,2015-12-15 14:37:30,"@davidkpiano chriseppstein wrote this few comments above:

> FWIW, once the CSS :matches() pseudo selector is well supported, Sass will be able to emit a much more elegant output selector here: :matches(.person-edit, .person-create, .person-delete) + :matches(.person-edit, .person-create, .person-delete)

My question was about when is this expected.
",artch,davidkpiano
1934,2015-12-15 15:10:48,"@artch You still have to be explicit about it.


",davidkpiano,artch
1934,2015-12-15 15:18:45,"@davidkpiano Yes, but is not supported by SASS yet. This SCSS:



Generates this CSS:



Which is just an overkill, since it is identical to:



It would be great if SASS can handle `@extend` this way.
",artch,davidkpiano
1934,2015-12-16 07:02:59,"@chriseppstein 

> Agree. When :matches is well supported, it will.

Good. And let me ask it again: `:matches` is already supported in all major browsers except IE. When it is considered to be supported enough? What if our project disregards IE totally and we are already ready to make use of it? Probably some explicit opt-in configuration?
",artch,chriseppstein
1934,2016-01-20 09:34:06,"@chriseppstein I'd like to bump this as I didn't receive an answer here.
",artch,chriseppstein
1932,2015-12-14 19:35:14,"Good catch, @mgreter.
",chriseppstein,mgreter
1925,2015-12-06 13:40:13,"**(Edit: I just learned that it's spelled Sass, not SASS).**

@jt4000 Sass and SCSS help you writing less code that you can then reuse. The idea behind it is that you don't ""specify"" a stylesheet but ""program"" it, using concepts like variables, mixins (similar to user-defined functions) and proper functions.

Let's say you designed a site. It's good, right? The stylesheet however is up to 17324 lines, and you repeated the font-family and size in many places. How does it feel to fix it? Yeah, I know you can use search/replace, but wouldn't it be better for you to define a variable? Let's say...



What if you didn't like the typography? Instead of performing a search/replace again, you could change one variable instead:



Suddenly, your design got better.

However, someone told you that pixels on typography aren't cool anymore because these aren't looking good in 4k screens; you change again with search/replace... but then your site doesn't look good in mobile phones, what do you do? search/replace again or... modify a variable instead:



You could use other things provided by Sass such as mixins to define proportional widths and heights, handle colours, get grids with different properties, avoid using prefixes for older browsers and all that.

If this is clear enough for you, you can find more of these ideas along with better source codes than the ones I can write here in https://sass-lang.com/. That also means it's not an issue (it's not like Sass doesn't work, right?) and that you might want to try it somewhere else. And since it's not an issue, you shouldn't open an issue on GitHub.

Hopefully this clarifies your doubts :)
",ghost,jt4000
1922,2015-12-03 21:47:55,"@chris-lock To fix, use `@include test('black')`, where `'black'` is a quoted string instead of a color value.
",davidkpiano,chris-lock
1916,2015-12-03 12:44:53,"@chriseppstein can you make a statement whether errors, warnings and/or inspect should ignore user settings or not? Would be helpful to know that, since I'm currently relying on trial and error here and always unsure if something like this is a ruby sass bug or a libsass issue!? 
",mgreter,chriseppstein
1916,2015-12-11 00:47:02,"@mgreter I won't say ""ignore user settings"" as that seems overly broad and I'm not sure what all the implications would be, but I can't think of a use case where outputting a value compressed into a warning or error message is desired or helpful for a user who will need to debug their code.
",chriseppstein,mgreter
1916,2015-12-14 23:50:45,"@xzyfer @mgreter @saper I'd like to close this or get to some sort of actionable resolution. 
",chriseppstein,mgreter
1916,2015-12-14 23:50:45,"@xzyfer @mgreter @saper I'd like to close this or get to some sort of actionable resolution. 
",chriseppstein,xzyfer
1916,2015-12-15 16:46:26,"@xzyfer Yes, that's reasonable, imo. The annoying thing is that for some types, inspect is used to construct the css representation.
",chriseppstein,xzyfer
1913,2015-11-27 21:08:46,"@scottkellum what behavior would you expect if two lists of numbers were passed? Max over all of them? Error? A list of maximums?
",chriseppstein,scottkellum
1913,2015-11-28 01:20:18,"@chriseppstein I expect this:



To return `6`.
",scottkellum,chriseppstein
1913,2015-11-30 17:57:20,"@scottkellum Chris is asking about this case:



For what it's worth, Haskell only allows 2 arguments to be passed to the `min` function (eg. `min 1 2`). Lists must be passed through the `minimum` function (eg. `minimum [1, 2, 3, 4 ,5]`), and lists of lists are allowed:



I don't see the benefit to expanding min/max to accept lists when Sass already offers a construct to expand a list to fill in a function's arguments, and getting the minimum from 2 different lists seems like an unlikely task.  However, the documentation for the min/max functions _could_ use an example of how to pass in a list, since that is a fairly common operation that a user might want to perform.
",cimmanon,scottkellum
1913,2015-11-30 18:04:46,"@cimmanon I agree that a documentation change is a minimally sufficient response to this issue for the current release.

But I also want Sass to be intuitive -- having to read docs for **common operations** means that we have failed to ""Just Work"" and the principle of least surprise is what we endeavor to adhere to for all our APIs.
",chriseppstein,cimmanon
1913,2015-11-30 18:07:58,"@cimmanon Oh, that can throw an error for sure. Multi dimensional lists certainly seem like invalid inputs for this, as do strings and other things that aren‚Äôt comparable values.

I created this issue because I assumed lists of numbers would work. Apparently it is currently implemented the way many other languages are implemented and because I don‚Äôt have much of a programming background I was not aware of this pattern.
",scottkellum,cimmanon
1913,2015-12-11 00:32:29,"@HugoGiraudel I think `min($list...)` and `min($list)` are the same amount of confusing if the list is not comprised solely of numbers.
",chriseppstein,HugoGiraudel
1912,2015-11-24 18:23:33,"@cimmanon Yes, but that's counter-intuitive - you shouldn't need to add parentheses.

These should all produce the same result:


",davidkpiano,cimmanon
1912,2015-11-24 18:24:16,"@hcatlin : it happens in standard, just like I showed. :(

@cimmanon : thx! that does work as well. However, I still consider it a bug because Sass is not treating `auto` as either a value or a variable ‚Äî the problem may not come from Sass trying to perform an evaluation (as in your example), because no subtraction was performed.
",akaScooter,cimmanon
1912,2015-11-24 18:24:16,"@hcatlin : it happens in standard, just like I showed. :(

@cimmanon : thx! that does work as well. However, I still consider it a bug because Sass is not treating `auto` as either a value or a variable ‚Äî the problem may not come from Sass trying to perform an evaluation (as in your example), because no subtraction was performed.
",akaScooter,hcatlin
1912,2015-11-24 18:25:50,"@cimmanon and I was just about to point out what @darvishzadeh just wrote about the counter-intuitive-ness of it. Syntactically, I don't think you should need the parenthesis.
",akaScooter,cimmanon
1912,2015-11-25 03:01:04,"@akaScooter, I think you meant @davidkpiano 
",darvishzadeh,akaScooter
1912,2015-11-25 03:01:04,"@akaScooter, I think you meant @davidkpiano 
",darvishzadeh,davidkpiano
1912,2015-12-04 20:29:15,"@chriseppstein That sounds good if we can come up with a close-to-bulletproof strategy for deprecation warnings. Can you work on that?
",nex3,chriseppstein
1912,2015-12-11 00:35:15,"@nex3 I can take a swing at it, I'm still learning my way around the nitty gritty aspects of the script parser code.
",chriseppstein,nex3
1904,2016-04-22 23:37:23,"@nex3 Can we land this in `next`?
",chriseppstein,nex3
1904,2016-04-29 18:03:59,"This is currently assigned to @hcatlin and marked as a work in progress‚ÄîI wasn't aware it was ready for another round of review, let alone a candidate for landing.
",nex3,hcatlin
1904,2016-04-29 18:17:35,"@nex3 I'm willing to help wrangle it. My question was whether this feature set could go out in the 3.5 release.
",chriseppstein,nex3
1904,2016-12-11 22:40:19,"I don't think @chriseppstein ended up having the cycles to work on this, so I'm going to close it out. If someone else wants to adopt in in the future, I'll re-open.",nex3,chriseppstein
1885,2015-11-05 19:24:21,"Oh, My bad @chriseppstein :'(
Seems there was one issue for that already (#1172). Guess I missed it because I just searched for 'placeholder', not 'placeholder parent' to filter out better.

May I suggest improving the doc to mention that `%placeholder` has scope if used inside a selector?

Thank you.
",RaphaelDDL,chriseppstein
1885,2015-11-05 21:03:42,"@RaphaelDDL You read this documentation? http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders It seems to cover it from my understanding of it, but maybe I'm too close to the problem.
",chriseppstein,RaphaelDDL
1885,2015-11-10 20:35:39,"@chriseppstein Yup, I did (I even linked it on first post).

I've re-read it over and over but I couldn't make the link that `#id { %placeholder {} }` would be the same as `#id %placeholder {}`. For me, they are two different scenarios from what I would've call a 'placeholder for replace' and a 'truly placeholder' (I'll explain below). 

Looking at [the example](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders), it shows an use that it works as a ""placeholder for replace"" for the class you are extending it from. So if I do the placeholder as part of a CSS selector (say `#id %placeholder {}`), then when I do `.whatever { @extend %placeholder; }`, I should expect my class to ""replace"" the placeholder part, the same way it would work with regex `()` matchers which then you replace/reefer the parts with `$n`. Thus resulting `#id .whatever {}`.

But I thought that, without being part of a CSS selector - simply a ""truly placeholder"" class -, wouldn't affect the outcome. [Here](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_) there's this quote:

> On their own, without any use of @extend, rulesets that use placeholder selectors will not be rendered to CSS.

From that I assumed they wouldn't do anything nor should have selector ""scope"" because they are ""on their own"", that is, simply `%placeholder` independent of position.

But I could truly understand after reading nex3's explanation in #1172. I realized that what I thought ""without being part of a CSS selector"" is utterly wrong. When we do 
`#id { %placeholder {} }` we are indeed making it as part of the CSS selector, using the nesting provided by sass engine.. Therefore it is indeed the same as `#id %placeholder {}`.

Not sure if it's my own problem, since my native language isn't English. But I feel (less) dumb knowing I wasn't the only person that thought the way I thought lol. Anyway, deeply sorry if I didn't make any sense..

Thank you for your time reading through this.
And thank you again, this time for Compass lol :)
",RaphaelDDL,chriseppstein
1883,2015-11-04 23:06:57,"@mgreter good catch. we had the precision hard coded in our round function.
",chriseppstein,mgreter
1882,2015-11-04 02:12:57,"Thanks for the explanation @chriseppstein. My understanding was that just the properties of the class were inherited (or copied) not that they would be tied together in other declarations using the base class.  Would placeholders behave the same way here?  
",lisatassone,chriseppstein
1878,2016-02-04 19:38:54,"@royels Do you plan to address the code review comments?
",chriseppstein,royels
1878,2016-02-04 20:35:30,"Whoops, I'm super sorry for falling off the face of the planet.
At any rate, yep, I addressed the code review comments (except for the first, I don't think I hit the spirit of ""clean"" refactor in my last commit. So still trying to figure that out.)

EDIT: I've removed the method, but more or less re-implemented its idea into the arglist handler. 
I'm genuinely unclear on what @nex3 meant by not modifying comma detection. If I understand correctly, isn't the point of the issue that we need to detect commas that are the last character before the right parentheses?
",royels,nex3
1878,2016-03-07 21:17:54,"@nex3 I think we should just clean this up and land it do to the latency of updates.
",chriseppstein,nex3
1878,2016-03-07 21:33:57,"I agree, after hammering at it for a while, I was still puzzled on how to address the issue by incorporating @nex3 's suggestions. Quite interested to see what it was supposed to look like.
",royels,nex3
1878,2016-03-11 20:15:07,"@chriseppstein Can you take charge of that?
",nex3,chriseppstein
1876,2015-11-24 12:12:32,"@strarsis Thank you for sharing this.
",gajus,strarsis
1875,2015-11-23 20:22:35,"Thanks @nex3 for the review. All comments addressed, and I've squashed into one commit.
",srawlins,nex3
1875,2015-11-24 21:30:22,"Oops, my bad @nex3. Addressed and squashed.
",srawlins,nex3
1875,2015-11-25 00:24:30,"Thanks @nex3 , good catch. Addressed and squashed. Brought in a change to to_css.rb.
",srawlins,nex3
1869,2015-10-27 18:25:56,"@EddAvila I'm glad you have a work around. Unfortunately, none of the Sass developers have a Windows machine so we can't reproduce this.



All the similar issues I see on google indicate that this is due to a corrupted ruby install or gem.
",chriseppstein,EddAvila
1868,2015-10-27 17:59:56,"@srawlins This appears to be an oversight. We just didn't think that comment nodes were important from a source-mapping perspective or we missed it.

We just don't pass a source range when we make a `Sass::Tree::CommentNode`:
- .scss syntax: https://github.com/sass/sass/blob/stable/lib/sass/scss/parser.rb#L176
- .sass syntax: https://github.com/sass/sass/blob/stable/lib/sass/engine.rb#L779

Hopefully that's enough to get you going on a patch.
",chriseppstein,srawlins
1864,2015-10-27 17:56:58,"Sounds great :) thanks @chriseppstein
",duivvv,chriseppstein
1864,2015-11-03 21:20:21,"While I agree with @nex3 in general, this syntax is stable and locked in.  It met with great enthusiasm in the group, and is what MQs were originally supposed to look like (but way back in the day you had to actually worry about putting a `<` in a `<style>`. 

If y'all feel like supporting it, I'm confident that it's safe to do so.
",tabatkins,nex3
1864,2017-02-10 21:39:41,@nex3 I think we should bump the priority of this compat issue now.,chriseppstein,nex3
1860,2015-10-14 13:02:25,"Yes, looking at #1849 i can see that my problem (aside from the convolution) is from trying to pass:
2 variables and an arglist
into map-deep-get that's expecting
a variable and an argilst

arglists are just a little less flexible than i assumed.

Thank you @cimmanon 
",mkstix6,cimmanon
1860,2015-10-14 13:07:34,"@cimmanon If you had time could you expand a little on the convolution you're seeing. It might help me in the long run.
",mkstix6,cimmanon
1857,2015-10-15 23:24:35,"Hey @chriseppstein, thanks for responding so quickly and for the discussion above. I only filed this as an issue because there was a discrepancy between LibSass 3.2.5 and Ruby 3.4.14 parsers. The code above compiles with LibSass but errors in Ruby. See http://sassmeister.com/gist/36486158ba84062cd13f.

I admit I don't know anything about the sass engine, all I have to go on is http://sass-lang.com/documentation/file.SASS_REFERENCE.html#parent-selector. It states ""& must appear at the beginning of a compound selector, but it can be followed by a suffix that will be added to the parent selector."" With this definition, the behavior of the work around you suggested, and the response from nex3 in the issue above I think it supports my expectation.
",pat270,chriseppstein
1857,2015-10-16 12:11:42,"@pat270 When there is a discrepancy between LibSass and the official Ruby Sass, the bug report should be filed against LibSass.
",cimmanon,pat270
1857,2015-10-16 15:01:41,"Thanks @cimmanon, I filed an issue at https://github.com/sass/libsass/issues/1601.
",pat270,cimmanon
1855,2015-10-13 19:49:23,"> it is just so limiting

It is limiting on purpose. See the issue thread #132 that @cimmanon noted for a full explanation.
",chriseppstein,cimmanon
1854,2015-10-08 00:03:20,"@davidkpiano That's another good use case.
",chriseppstein,davidkpiano
1854,2015-10-08 00:55:55,"We use side-effect functions for things like updating config settings and do just about exactly what @davidkpiano describes.

We then expose a mixin that does...



So now we have a side-effect mixin for invoking a side-effect function :)

I'd much rather just `set-config(...)` and not have to worry about the result. It could be used in a function or a mixin and doesn't feel weird.
",eoneill,davidkpiano
1854,2015-10-09 22:14:12,"I'm not a fan. I don't like the idea of adding a new construct for something that isn't encouraged anyway, and given that Sass already has a distinction between functions and mixins anyway, I'm happy to say that side-effect-only reusable chunks of code should always be mixins.

@davidkpiano's use-case is compelling, though. @chriseppstein, what do you think about allowing `@include` in functions as long as the mixin doesn't emit any actual CSS?
",nex3,chriseppstein
1854,2015-10-09 22:14:12,"I'm not a fan. I don't like the idea of adding a new construct for something that isn't encouraged anyway, and given that Sass already has a distinction between functions and mixins anyway, I'm happy to say that side-effect-only reusable chunks of code should always be mixins.

@davidkpiano's use-case is compelling, though. @chriseppstein, what do you think about allowing `@include` in functions as long as the mixin doesn't emit any actual CSS?
",nex3,davidkpiano
1854,2015-10-13 12:20:29,"> @chriseppstein, what do you think about allowing @include in functions as long as the mixin doesn't emit any actual CSS?

My thought, exactly. Although that might be greedy to determine? Also, I'm worried about the complexity overhead of allowing mixins includes in functions some times, but not always. But I don't see a better option.
",HugoGiraudel,chriseppstein
1854,2015-10-30 21:37:35,"> Not all that bad, it's a simple refactoring from mixin to function and the creation of a new mixin of the same name that invokes the function. It let's people use `@include` where that makes sense, but also to invoke it from a function if that's their context. This is a totally workable solution, though the boilerplate is annoying.

Why would we force people to call the same chunk of code with the same semantics in two different ways when we could just make it work the same way everywhere? Why would we define the language semantics in a way to set people up for annoying boilerplate?

> What is it about global side-effects that we aren't encouraging? AFAIK, the stated reason that globals are bad is namespace pollution. Furthermore we intend to address the ""everything is global"" in Sass 4.0., which is the soonest this feature would land, so why should we discourage module-level globals?

Mutable global state‚Äîwhether or not it's in a global scope‚Äîand functions with side-effects are both always more difficult to reason about in large systems than immutable local values and pure functions.

> This pattern is the only mechanism for configuring frameworks in Sass. If we don't want people to use globals, what better construct should we give them? Is it the ability to pass local vars to the `@content` from an `@include` so that context can be maintained without globals? (Issue #871)

I'm not saying we should ban global values entirely. Clearly they do have valid uses in some cases, but that doesn't mean that we should optimize the language to maximize the comfort of using them. Adding an entirely new directive is a very large cost, and I don't think this use-case justifies that cost when it can be accomplished less expensively.

> Redefining mixins as ""side-effect creation"" instead of ""produces style fragments"" may seem natural to you, but I seriously doubt our users think of producing styles as a side-effect.

I think you're wrong. They may not explicitly characterize mixins that produce styles as having side-effects, but I'm confident they differentiate functions and mixins by functions returning values and mixins not doing so.

> Anways, it seems like we have no consensus here, I move to close this issue and maintain the status quo.

I still consider @davidkpiano's use-case compelling, and I'd like to settle on a solution.
",nex3,davidkpiano
1854,2016-07-15 19:15:20,"@sgonyea Those are reasonable critiques, but this isn't really the issue for them. I will say that those are issues we're looking into when designing the new module system.
",nex3,sgonyea
1854,2016-11-23 20:02:31,"@nex3 I just came across this issue while looking into a feature of SASS that doesn't exist: calling functions without a left-hand side.

Before I begin, I would first like to say thank you for putting the work you (and others) put into this tool, as it is mighty helpful, and I wish the W3C would take a page from SASS's book. Keep up the good work, and hopefully my 2cents can be of some use to help remedy this issue (and any others similar to it).

### some feedback on the issue from an outsider perspective,

I will admit that I am not a Ruby programmer, nor am I some shmuck whom thinks their opinions about an open-source tool or piece of software should be taken as law and implemented at my whim. However, with that being said... As a heavy user of SASS (SCSS syntax specifically) who wants to see the language flourish and become better (not saying it's bad by any means), I feel that a lot of your reservations about adding features, specifically how a user uses functions and mixins are quite dogmatic.

It is a fact that there are many people, myself included, whom want ""better"" functions. By ""better"" I mean acting as a function should in any other language, but for CSS;

* Can be called anywhere. Outside of a selector, inside a selector without a left-hand side, and inside a selector with a left-hand side.
  * __Note:__ Preferably without the need for an `@rule` like mixins need `@include`. However if an `@rule` is necessary, I do like the suggestions in this thread, `@call` and `@exec`. Even then.. It's not very clean to use functions with an `@rule` IMO. I digress...
* Does not have to return a value,
* Can produce side-effects (rulesets and values),

just to name a few.

The biggest concern/worry I get from your reservations is that you don't want users to be confused on when to use a mixin over a function, and vice-versa. This is totally understandable, admirable even, especially to me as a new developer who is mega confused by a lot of silly things in the JavaScript community. However, with that in mind, I think you would do well to consider that your stance on the matter is not the correct one, since many people seem to disagree with you.

### now for my ideas/recommendations

Have you ever considered having mixins and functions being the same thing with the only difference being syntax/semantics. I bring this up because they are mighty similar to one another (even with your reservations in place). If you look at almost any other language, there are usually at least 2 ways of doing the exact same thing with the only difference being opinion of syntax, which leads me to my next point;

I personally think that if you did away with mixins entirely, no one would miss them because functions can do everything. To replace the mixin directive, you can add a built-in SASS function called `mixin()` or `include()` and have it take an argument of a selector, variable, or maybe a file path that would output the contents of the argument ... Think of PHP's `file_get_contents()`, `include()` and `require()` statements as a comparison of functionality.

That's all for now, 

Sincerely,


Jordan",jordanbrauer,nex3
1854,2017-03-01 09:03:03,"I tend to agree with @chriseppstein 

Currently we already have very blurred mixins and functions, and out-of-place usage of mixins to make side effects. Mixins originally had to produce styles, not any side-effects, so it always felt to me rather like a hack.  Thus I'm voting for a clear way to use functions for same purpose.

I wonder why @nex3 leaved this discussion? Is this like an act of protest? :)",ArmorDarks,nex3
1854,2017-03-01 09:03:03,"I tend to agree with @chriseppstein 

Currently we already have very blurred mixins and functions, and out-of-place usage of mixins to make side effects. Mixins originally had to produce styles, not any side-effects, so it always felt to me rather like a hack.  Thus I'm voting for a clear way to use functions for same purpose.

I wonder why @nex3 leaved this discussion? Is this like an act of protest? :)",ArmorDarks,chriseppstein
1852,2015-10-06 14:55:00,"@davidkpiano The way I see it essentially a `@copy` would be the same as an `@extend` however with out the grouping on to one line. That is the issue I am having with `@extend` and having to resort to `@mixin` which I sort of assumed were more like functions.
",elistone,davidkpiano
1851,2015-10-07 05:43:57,"@davidkpiano Thanks for the answer. I gues that looks like the best ""sass"" way of doing it. I guess i just keep my code in this case since i think thats more readable.
",basvandenheuvel,davidkpiano
1851,2015-10-07 08:39:27,"@chriseppstein Where did you get that selector-nest()? I can't find it in the sass documentation.
",basvandenheuvel,chriseppstein
1849,2015-10-02 03:10:49,"ah doh - didn't realize that was valid syntax. thanks @cimmanon 
",mil,cimmanon
1847,2015-09-29 00:13:52,"@chriseppstein Interesting, I just tried `--precision` and that has the semantics I was looking for. However, is it possible to limit the setting within a block or some such?

My use case (which admittedly isn't critical to get the job done) is that I would like to do `precision(random() * $something, 1)` instead of `round(random() * $something * 10) / 10` because it's more readable and it's also cleaner in the sense that it will generate `0.5px` and `1px` instead of `0.5px` and `1.4px`. The fact that I care less about the fraction for numbers >= 1 is perhaps not very common.
",blixt,chriseppstein
1847,2015-10-07 07:49:32,"> The fact that I care less about the fraction for numbers >= 1 is perhaps not very common.

@blixt I agree. I think a custom function that does the rounding to your desired `>1` precision is best for this.
",chriseppstein,blixt
1847,2016-03-05 05:36:34,"I like @stevenvachon's idea. Seems simple from a user's perspective. Plus it has more use than simply limiting decimals for output. I can't think of any scenario where I had wanted to round to the nearest whatever decimal and wanted it to be a string. If that were the case I'd imagine there would be lots of people casting strings to numbers for more math.
",whaaaley,stevenvachon
1847,2016-03-07 21:25:36,"@nex3 The semantics of inspect is that it is for debugging. I don't want to confuse that by telling people inspect is sometimes how you put a css value into css output. I'd rather just make an entirely new function for this.

But tbh, my pref is still to just set an instance level precision for the numbers where it matters and let the sass numeric output code do it's thing.
",chriseppstein,nex3
1847,2016-03-08 18:33:04,"@stevenvachon I totally agree. Its too long and round is clear.. `decimal-round()` is fine, but since this is sort of a variant of rounding I would go with `round-decimal()` instead.
",whaaaley,stevenvachon
1846,2015-09-27 20:20:25,"@cimmanon I read through it and I agree with the general sentiment that you shouldn't compare stuff like `5em == 5` because it doesn't semantically make sense. I think that the concept of zero warrants something that is not a mathematical operation (because of the additional issues that causes around equality), but rather a function such as `zero(0px) == zero(0)`.

The reason I think zero makes sense as a special case is because it is a special case in CSS (`border-width: 0;`, `transform: translate(0, 3px);` etc).
",blixt,cimmanon
1846,2015-09-27 22:07:55,"@blixt I tend to agree but the W3C only [explicitly allows unitless values for lengths](http://www.w3.org/TR/css3-values/#lengths):

> However, for zero lengths the unit identifier is optional (i.e. can be syntactically represented as the <number> 0).

Given this, most browsers only permit optional unit identifiers for **only length values**, and not other values, such as time values.


",davidkpiano,blixt
1846,2015-09-27 22:15:23,"@davidkpiano Yep I agree, hence my note regarding degrees which just like times may not be unitless. That said, lengths are one of the most common types of values that you work with in CSS so I still see the benefit of being able to check for zero.

If there is a risk of abuse of this function with non-length values, would it be possible to make it more restrictive in specification so that it may only apply to lengths and unitless values? For example, `zero-length(0)` and `zero-length(0px)` work, but `zero-length(0deg)` and `zero-length(0s)` throw an error? I'm not sure if it's needed and don't really prefer it as it adds complexity, but it seems like a solvable problem (if it is a conceivable problem in the first place).
",blixt,davidkpiano
1836,2015-10-07 08:40:05,">  just in case selectors with a leading tilde actually becomes valid in the future.

In the beginning Sass didn't even parse selectors, we just grabbed a string of stuff until the curly brace and said ""this is a selector"". As sass matured, our parsing of selectors has grown to support the features we've added (E.g. `@extend`) but our errors tend to be very simple like ""you can't have a . without a classname that follows it"" and these are mostly generated by our parser just being confused based on the selector grammar. Sass's selector grammar allows leading combinators because nested selectors allows leading combinators. This is to say, that we aren't raising an error here because we just don't raise selector errors unless Sass is confused. Sass generally doesn't raise errors because we think a browser will be confused. Usually Sass gets confused on behalf of browsers because we're all on the same CSS team but not always.

All that said, @kareems there is an easy way to get the behavior you seek:



Sass does not remove the parent selector when the parent reference (`&`) is used in SassScript contexts. usually this is just a pain in the ass requiring the use of `@at-root` but in this case it's helpful.

So. The larger issue here is ""Should Sass raise errors for clearly invalid selectors?"" For example, Sass will happily pass `~ ~ ~ .foo { ... }` along to a browser. I don't know why we don't raise an error for combinators that aren't combinating other than ""we just never wrote that code"". Since @nex3 wrote most, if not all, of the selector code I'd like her to weigh in.
",chriseppstein,kareems
1832,2015-10-05 12:09:50,"@voondo Hi, it's grossly inaccurate Polymer is going in the wrong direction with this. This capability of Polymer was supervised by an established CSS spec writer that was already planning to have this functionality be standardized which it has since its widespread use in the Polymer project: http://tabatkins.github.io/specs/css-apply-rule/

This functionality  are _custom property sets & css properties_ rather than selectors, so I'd also ignore the outdated reference above by @mprins (CSS custom properties beyond the vendor prefixes didn't exist in 2011). 

Perhaps they are a officially a subset of selectors, but that's an outdated reference nonetheless unless you're referring to how Sass is maybe interpreting it as such because it may lack the understanding of  such property sets
",lozandier,voondo
1832,2015-10-05 12:09:50,"@voondo Hi, it's grossly inaccurate Polymer is going in the wrong direction with this. This capability of Polymer was supervised by an established CSS spec writer that was already planning to have this functionality be standardized which it has since its widespread use in the Polymer project: http://tabatkins.github.io/specs/css-apply-rule/

This functionality  are _custom property sets & css properties_ rather than selectors, so I'd also ignore the outdated reference above by @mprins (CSS custom properties beyond the vendor prefixes didn't exist in 2011). 

Perhaps they are a officially a subset of selectors, but that's an outdated reference nonetheless unless you're referring to how Sass is maybe interpreting it as such because it may lack the understanding of  such property sets
",lozandier,mprins
1832,2015-10-05 12:46:59,"@voondo Feel free to ping the Polymer Slack community about this.
",lozandier,voondo
1827,2016-02-27 13:50:20,"@chriseppstein There's really not many steps to reproduce this. My environment is Mac OSX.

Once SASS is installed:

![image](https://cloud.githubusercontent.com/assets/7915144/13373213/b4317e42-dd26-11e5-8c4b-fccd5f69140b.png)

If I include the backtrace, it looks just like what @wildpine posted
",lowenthal-jason,wildpine
1827,2016-02-27 13:50:20,"@chriseppstein There's really not many steps to reproduce this. My environment is Mac OSX.

Once SASS is installed:

![image](https://cloud.githubusercontent.com/assets/7915144/13373213/b4317e42-dd26-11e5-8c4b-fccd5f69140b.png)

If I include the backtrace, it looks just like what @wildpine posted
",lowenthal-jason,chriseppstein
1817,2017-02-20 02:01:29,"As of 2017, what is the correct way to namespace imports? @nex3 @chriseppstein Sorry for tagging you but I can't find any other info on this.",GusRuss89,nex3
1817,2017-02-20 02:01:29,"As of 2017, what is the correct way to namespace imports? @nex3 @chriseppstein Sorry for tagging you but I can't find any other info on this.",GusRuss89,chriseppstein
1811,2015-08-26 14:21:41,"@chriseppstein Thanks for your time and consideration of this issue, makes sense to be consistent.

For anyone else wondering this behavior is also consistent with media queries.
http://sassmeister.com/gist/09545a51a563e77a1a35
",FranDias,chriseppstein
1806,2017-01-31 23:04:38,@marschro the trailing semicolon on the last declaration is not needed in CSS so it was left out as an optimisation.,xzyfer,marschro
1802,2015-08-26 15:51:58,"@schneems it makes sense that sprockets needs to assist with the decision of which paths need to be transformed and maybe even the work of transforming them

Do you plan on adding something like that?
",bughit,schneems
1797,2015-08-21 20:14:07,"@nex3 you're right. I'm feeling it too. I do think this will increase the performance of Sass, but it wouldn't be ideal for readability.

I think we could close this PR TBH since ruby 3.0 will make strings immutable by default. Partly due to devs like me are submitting PRs for the usage of `String#freeze`.
",BenMorganIO,nex3
1795,2015-08-16 18:10:40,"""It's not something worth supporting in the core language"" -> Issue closed. 

Seriously? Well, thanks a ton, @nex3 ... O_o
",b44rd,nex3
1795,2015-08-16 18:13:30,"Perhaps some other character might be more ideal, @cimmanon. :) But I would really like to be able to writhe styles under a scope without overspecifying stuff (which by the way is the only thing I hate about scss at the moment). :)
",b44rd,cimmanon
1795,2015-08-16 18:22:06,"@b44rd I have no real influence over the direction of the Sass project.  It is my opinion that over-qualification is a problem you're making for yourself, not one that Sass should be solving.  Using comments is your best option in this case.
",cimmanon,b44rd
1795,2015-08-17 10:10:27,"@cimmanon I understand. Comments wouldn¬¥t be ideal imho, but perhaps a mixin might work well. 

Just out of curiousity: How would I write a mixin like that? Thanks. 
",b44rd,cimmanon
1791,2015-08-06 14:09:05,"@HugoGiraudel Great thanks! 
",KupuJIJI,HugoGiraudel
1790,2015-08-05 21:47:27,"Thank you! Glad to know there's a way. 
I'm gonna close the issue @cimmanon, but do you think I should create an issue to make this a possibility? 



compiling to:


",sbussard,cimmanon
1790,2015-08-07 18:08:24,"@cimmanon the only thing about that method is that if you use more than one selector (Ex `.BlockA, .BlockB { ... }`) it gets really jumbled
",sbussard,cimmanon
1782,2016-12-16 10:39:14,"I just encountered the same problem @bazzel, had me pulling out my hair when I just could not figure out why I couldn't hover over an element. Turns out, under certain conditions, if you give an element background-color: transparent, no hover is triggered in IE10, but if I changed it to rgba(0,0,0,0) in the output CSS manually, it worked fine.

IMO, that is just another reason as to why the way a colour is defined by an author should be preserved throughout the compilation process.

Also, you can workaround this by doing: `rgba(0, 0, 0, 0.0001)`.",CaelanStewart,bazzel
1782,2016-12-17 01:46:17,"@CaelanStewart Can you provide a CodePen that reproduces the case where IE10 doesn't understand `transparent`?

Generally we try to emit the most compatible representation of a color, but this poses a problem since older IE versions understand `transparent` but *not* `rgba(0,0,0,0)` (which is why we prefer the string `transparent` in the first place).",nex3,CaelanStewart
1782,2016-12-17 15:56:44,"@nex3, yes, of course I can provide a demonstration. But I tried opening the CodePen I created in IE10, to no avail. The page was unresponsive.

I've created a [GitHub Gist](https://gist.github.com/CaelanStewart/027f522f17fd3fd05ecf8c5fe001f724#file-test-case-html).

On the image on the left, there is an 'A' tag overlaid, which initially has its background-color set to transparent. Upon hover, the background-color is updated to 'rgba(0, 0, 0, 0.25)'.

The image on the right is exactly the same, except that the initial background-color value is set to 'rgba(0, 0, 0, 0)'.

I've tested this on IE9 and 10 on BrowserStack, and the overlay on the left does not respond to the hover state, nor can you even click the link.

Now, fair enough, old browsers don't support RGBA values, but its becoming less and less important to support browsers less than IE9. jQuery, Bootstrap and others have already dropped support for IE8.

So, in my opinion, I believe that I should not have to apply a workaround when using SCSS to support newer browsers. If somebody needs to support an older browser, it's logical that they should be the ones to apply some workaround.

Now, albeit true this is some sort of typical IE bug, I just think that quietly converting color formats in the background to support and older browser should not be the responsibility of SCSS. I believe SCSS should just be a transpiler, and not interfere with or modify the user's original intent.",CaelanStewart,nex3
1781,2015-07-23 19:59:06,"@cimmanon Thanks for that! That works great and it won't be too hard to add into my current stuff.

@chriseppstein I'm not experienced with using lazy evaluation, but while researching about it, it looked like the answer I needed and only seemed to solve problems. I was thinking this would be a new behavior that would extend the current behavior for all arguments without requiring new syntax, since, as far as I'm aware, it wouldn't hurt any existing user code. The only thing that would change is the point in time something gets evaluated, which would be from, ""as soon as I can"", to, ""only when/until I have to"". I have no idea about how much work it would be to implement it in this way. If a new syntax were required for this I think that would open up a whole new can of issues.

In general though, I'm fairly happy with the work around @cimmanon provided.
",whaaaley,chriseppstein
1781,2015-07-23 19:59:06,"@cimmanon Thanks for that! That works great and it won't be too hard to add into my current stuff.

@chriseppstein I'm not experienced with using lazy evaluation, but while researching about it, it looked like the answer I needed and only seemed to solve problems. I was thinking this would be a new behavior that would extend the current behavior for all arguments without requiring new syntax, since, as far as I'm aware, it wouldn't hurt any existing user code. The only thing that would change is the point in time something gets evaluated, which would be from, ""as soon as I can"", to, ""only when/until I have to"". I have no idea about how much work it would be to implement it in this way. If a new syntax were required for this I think that would open up a whole new can of issues.

In general though, I'm fairly happy with the work around @cimmanon provided.
",whaaaley,cimmanon
1780,2015-08-06 18:58:04,"@joseorihuela what you want is basically an `@extend` that removes the class itself from the source. I am not sure whether this is feasible, as you can't know whether the class is used anywhere (in your HTML). The problem is that as soon as your `@inject .navbar` would find `.navbar` it needs to exist in your code and therefore will be included in the compiled CSS.

But I think there might be a solution, that should also solve your use case:

`@import`ing files with direct output of any SCSS. You would basically just include the whole selectors without producing output.

### How that would look like:

File `_import-me.scss`



File `app.scss`



What this would produce:



### Usage with Bootstrap



Output:


",apfelbox,joseorihuela
1780,2015-08-07 00:34:36,"@joseorihuela @apfelbox This is essentially the same thing as `@extend`ing a `%placeholder` selector. :)
",davidkpiano,apfelbox
1780,2015-08-07 00:34:36,"@joseorihuela @apfelbox This is essentially the same thing as `@extend`ing a `%placeholder` selector. :)
",davidkpiano,joseorihuela
1780,2015-08-07 00:46:11,"@davidkpiano that is correct, **except** when you have no control of your vendor code (like when using any (S)CSS framework out there ‚Äì like bootstrap).
",apfelbox,davidkpiano
1780,2015-08-07 06:47:32,"@davidkpiano what @apfelbox said. I was thinking more along the lines of being able to utilize vendor frameworks in a more semantic way without all of the extending selectors muddying things up.
",joseorihuela,apfelbox
1780,2015-08-07 06:47:32,"@davidkpiano what @apfelbox said. I was thinking more along the lines of being able to utilize vendor frameworks in a more semantic way without all of the extending selectors muddying things up.
",joseorihuela,davidkpiano
1779,2015-07-20 01:47:21,"@cimmanon Good catch I changed it right before I created the issue, and forgot to update the selector used with the `@extend`. But it's updated now.

I understand that the error is happing because the `@keyframe` bubbled out which leaves `%keyframes--pulse` empty, and you can't extend onto an empty selector. My issue is that it bubbles out no matter what selector it's in. 

I love the ability to nest a `@keyframe` inside of a CSS selector, and have it bubble out of that selector because it makes perfect sense and it allows you to keep custom keyframe animations associated with the selector it's being used on. But it doesn't make sense for SASS placeholder selectors. To my knowledge **anything** (except `@keyframes`) that you put inside of a SASS placeholder selector doesn't get compiled unless that silent selector is extended onto. This is what makes them so powerful.

At my company we give our developer/designers a large list of animations that they can use, and this list of animations is a part of our boilerplate that we use for every project so we don't have to rewrite animations for every project. This is great for consistency across our sites. However not all of the animations are used on every single site. Without this feature this forces me to figure out what animations were used and which ones weren't, and then go to the animations file every time the project is complete delete all animation that aren't used one by one; instead of just not extending to them during development.
",tjbenton,cimmanon
1778,2015-09-07 23:52:51,"Thanks for the write up @nex3. Apologies for the delayed response, I initially responded via chat.

We're :+1: to having clear semantics and expectations around how interpolants should interact with strings. A decent amount of technical complexity has been introduced into LibSass recently in order to best emulate how Ruby Sass renders strings with interpolants on a case by case basis. Anything that can be done to simplify this has our support.

LibSass does not have the same legacy baggage as Ruby Sass, and we also do not have a specific SassScript parser. Given a clear set of rules and updated Sass specs we should be able to move quickly on this.

I think this is a great opportunity for the Ruby Sass team to trial developing against Sass Spec, thoughts?
",xzyfer,nex3
1778,2015-09-12 01:08:56,"In service of determining how to go about deprecating the current semantics of SassScript interpolation, I want to precisely define them. @xzyfer, this may help with libsass compatibility as well.

For our purposes, we only care about _free interpolation_‚Äîthat is, interpolation outside the context of a string or a special function (e.g. `calc()`) that's parsed like a string.

The grammar for interpolation is straightforward. Note that the representation below elides much of the unrelated complexity of the SassScript grammar. The `Operation` and `UnaryOperation` productions should be understood to encompass all binary and unary operations supported by SassScript, except for `,` which is handled by the `CommaList` production. Note that this _includes_ the implicit adjacency operator that normally creates space-separated lists. `Value` should be understood to encompass literals, parenthesized expressions, maps, and function calls.



The complexity lies in how this representation is evaluated. Because the semantics of string interpolation is already clear, I'll describe the evaluation of free interpolation in terms of its **equivalent string interpolation** (or ""ESI"" for short). To clarify that the strings returned by the ESI should be unquoted, I'll use backticks instead of double quotes to delimit them (so ``foo`` would have the same value as `unquote(""foo"")`).

The ESI for an `Interpolation` production is, predictably, ``#{CommaList}``.

Similarly, for a `UnaryOperation` with an operator and an `Interpolation` operand, the ESI is ``~` + ESI(Interpolation)` = ``~#{CommaList}``. If there was any whitespace in the source text between the operator and the `Interpolation`, a single space is also added after the operator in ESI.

| SassScript | ESI | CSS |
| --- | --- | --- |
| `-1` | `-1` | `-1` |
| `- 1` | `-1` | `-1` |
| `-#{1}` | ``-#{1}`` | `-1` |
| `- #{1}` | ``- #{1}`` | `- 1` |

For an `Operation` production, all _adjacent_ `UnaryOperation` sub-expressions that are _not_ `Interpolation`s are parsed as normal, and interpolated into the ESI alongside the `Interpolation` subexpressions, separated by the operation in question. As with a `UnaryOperation`, a space will be included before or after the `Interpolation`s depending on whether whitespace appeared in the corresponding location in the source. This is also what allows interpolation in identifiers to work, since adjacent expressions are considered to implicitly have a space operator.

| SassScript | ESI | CSS |
| --- | --- | --- |
| `1 + 2 + 3` | `1 + 2 + 3` | `6` |
| `1 + #{2} + 3` | ``#{1} + #{2} + #{3}`` | `1 + 2 + 3` |
| `1 +#{2}+ 3` | ``#{1} +#{2}+ #{3}`` | `1 +2+ 3` |
| `1 + 2 + #{3}` | ``#{1 + 2} + #{3}`` | `3 + 3` |
| `#{1} + 2 + 3` | ``#{1 + 2} + #{3}`` | `3 + 3` |
| `1 #{2} 3` | ``#{1} #{2} #{3}`` | `1 2 3` |
| `a#{b}c` | ``#{a}#{b}#{c}`` | `abc` |

Finally, `CommaList` productions behave almost the same as `Operation`s. The only difference is that if _only_ the first `Operation` sub-expression is an `Interpolation`, the rest of the list isn't included in the interpolation.

| SassScript | ESI | CSS |
| --- | --- | --- |
| `1, #{2}, 3` | ``#{1}, #{2}, #{3}`` | `1, 2, 3` |
| `1, 2, #{3}` | ``#{1, 2}, #{3}`` | `1, 2, 3` |
| `#{1}, 2, 3` | ``#{1}`, 2, 3` | `1, 2, 3` |
| `#{1}, #{2}, 3` | ``#{1}, #{2}, #{3}`` | `1, 2, 3` |
",nex3,xzyfer
1778,2015-09-21 13:19:51,"Thanks a lot for the really clear write up @nex3. These changes are looking great.
",xzyfer,nex3
1778,2015-09-23 19:28:45,"> the implementation should emit a deprecation warning.

@nex3 Sorry, I don't see how this deprecated behavior would work. How does the user silence the deprecation warning? By changing to a string with interpolation? How does the code interoperate between both values? It seems like there's information loss.
",chriseppstein,nex3
1778,2015-10-10 00:51:58,"I just found one additional case where the new behavior differs from the old, and it's a doozy. It comes up when a dynamic value is included in an interpolated string without an explicit `#{}`‚Äîthat is, for every location that doesn't have a `#{}` in the SassScript but does in the ESI. _If that value is a quoted string_, it will retain its quotes, where if it were explicitly interpolated it would lose them. For example:

| SassScript | ESI | Current CSS | CSS for ESI |
| --- | --- | --- | --- |
| `""foo"" #{a}` | ``#{""foo""} #{a}`` | ``""foo"" a`` | ``foo a`` |
| `$var: ""foo""; $var + #{a}` | ``#{$var} + #{a}`` | ``""foo"" + a`` | ``foo + a`` |

What this means is that the ESI is no longer actually equivalent in all cases, because any of the newly interpolated values may or may not be a quoted string. We can detect this in simple cases like the first example, but not in general.

Hopefully, not too many people are relying on cases we can't detect in practice. I think we should still move forward with the deprecation and accept that our heuristic isn't perfect, but I wanted to put this out there and get people's opinions.

@xzyfer @chriseppstein 
",nex3,chriseppstein
1778,2015-10-10 00:51:58,"I just found one additional case where the new behavior differs from the old, and it's a doozy. It comes up when a dynamic value is included in an interpolated string without an explicit `#{}`‚Äîthat is, for every location that doesn't have a `#{}` in the SassScript but does in the ESI. _If that value is a quoted string_, it will retain its quotes, where if it were explicitly interpolated it would lose them. For example:

| SassScript | ESI | Current CSS | CSS for ESI |
| --- | --- | --- | --- |
| `""foo"" #{a}` | ``#{""foo""} #{a}`` | ``""foo"" a`` | ``foo a`` |
| `$var: ""foo""; $var + #{a}` | ``#{$var} + #{a}`` | ``""foo"" + a`` | ``foo + a`` |

What this means is that the ESI is no longer actually equivalent in all cases, because any of the newly interpolated values may or may not be a quoted string. We can detect this in simple cases like the first example, but not in general.

Hopefully, not too many people are relying on cases we can't detect in practice. I think we should still move forward with the deprecation and accept that our heuristic isn't perfect, but I wanted to put this out there and get people's opinions.

@xzyfer @chriseppstein 
",nex3,xzyfer
1778,2015-10-16 20:48:59,"@mgreter Please always feel free to ask me for clarification about the underlying logic/algorithms behind Sass behavior.
",nex3,mgreter
1769,2015-10-01 15:36:11,"Thanks @slunt32, that worked perfectly!  Cheers!
",ecseley,slunt32
1769,2015-10-02 07:21:45,"Perfect, @slunt32 :)
",ksundmyhr,slunt32
1769,2015-10-02 18:50:44,"@slunt32 you saved my day !!! 
",Msimoneau,slunt32
1769,2015-10-03 09:04:49,"@slunt32 Thanks for the trick, it helped ! ;-)
",Devnco,slunt32
1769,2015-10-04 19:20:10,"@slunt32 Thanks for the trick!
",FreDeRoover,slunt32
1769,2015-10-06 09:47:58,"@slunt32 Thank you
",stafast,slunt32
1769,2015-10-06 16:01:26,"thanks @slunt32 @endoplasmic saved me a headache!
",4everyoungz,slunt32
1769,2015-10-07 10:09:04,"Good! We can continue with our paylisp.... Thanks @slunt32 
",jjalonso,slunt32
1769,2015-10-08 17:54:27,"thanks @slunt32 @endoplasmic
",frank-castro,slunt32
1769,2015-10-11 10:12:14,"@slunt32 You are my favourite person right now.
",swordling,slunt32
1769,2015-10-11 15:38:22,"Thanks @slunt32!
",joebell93,slunt32
1769,2015-10-12 06:32:52,"thanks @slunt32 <3
",maxigor,slunt32
1769,2015-10-12 07:22:15,"Cheers @slunt32!
",olivertappin,slunt32
1769,2015-10-12 14:17:08,"@slunt32 Worked perfectly for me, Thank you !
",walterspieler,slunt32
1769,2015-10-13 18:29:47,"@slunt32 appreciate, and the way I found the solution was someone was having issues with cocopods a few years back. I tried the command with the sass gem and it magically worked :D 
",endoplasmic,slunt32
1769,2015-10-14 02:04:46,"@slunt32,THX.
",codezyc,slunt32
1769,2015-10-14 09:27:24,"Wow! Worked great @slunt32! Thank you!
",zeshanshani,slunt32
1769,2015-10-15 08:52:22,"@slunt32 Thank you!
",toptalo,slunt32
1769,2015-10-16 01:07:34,"@slunt32 Thank you!
",Raynner,slunt32
1769,2015-10-16 19:53:39,"@slunt32 thanks!
",lricoy,slunt32
1769,2015-10-19 17:07:04,"@slunt32 Live saver
",scottyg,slunt32
1769,2015-10-20 03:36:14,"@slunt32 Thank you very much
",yourpleasure,slunt32
1769,2015-10-21 03:47:05,"@slunt32 thanks+1
",ssjssh,slunt32
1769,2015-10-21 20:06:34,"thank you @slunt32
",clintonpaquin,slunt32
1769,2015-10-22 08:40:02,"@slunt32 thanks!
",jihchi,slunt32
1769,2015-10-22 18:19:29,"@slunt32 Thanks!
",vicdantas,slunt32
1769,2015-10-27 21:23:25,"@slunt32 saved the day, thanks!
",JamesIves,slunt32
1769,2015-11-02 10:41:56,"@slunt32 You're the man!
",cristifilip,slunt32
1769,2015-11-02 14:04:24,"@slunt32 Thanks! Worked fine here too!
",unwiredtech,slunt32
1768,2015-09-10 16:24:15,"@endoplasmic that worked for me thanks! :+1: 
",astrism,endoplasmic
1768,2015-09-10 20:46:49,"@unclenorton 's link to Gorails ruby upgrade instructions worked for me
",jacobmiller,unclenorton
1768,2015-09-11 02:53:15,"@endoplasmic, thanks it worked.
",stgeorgiev,endoplasmic
1768,2015-09-11 13:25:43,"@endoplasmic Thank you. it worked.
",gary-Shen,endoplasmic
1768,2015-09-12 20:30:06,"@endoplasmic, thank you for the right solution.
",TalD,endoplasmic
1768,2015-09-14 19:39:05,"@endoplasmic Thank you so much, it's working.
",yanwsh,endoplasmic
1768,2015-09-15 02:20:50,"Tks, @endoplasmic!
",marcuswd,endoplasmic
1768,2015-09-19 04:09:43,"Work like a charm! Thx! @endoplasmic
",sunaiwen,endoplasmic
1768,2015-09-19 18:58:12,"THx @endoplasmic !
",wKoza,endoplasmic
1768,2015-09-30 09:49:37,"Works perfectly with @endoplasmic command line ! Thx !
",ghamaide,endoplasmic
1768,2015-09-30 21:39:49,"@endoplasmic, this `-n /usr/local/bin` works for `sass` and `stringex`, but doesn‚Äôt for `jekyll`


",pepelsbey,endoplasmic
1768,2015-10-01 14:51:08,"Thank you so much @endoplasmic! You saved the day.
",amberstickel,endoplasmic
1768,2015-10-01 15:44:07,"@pepelsbey Just dropping a line to report that installing Jekyll to `/usr/local/bin` DID work for me. I'm no Rubyist, so I'm not sure I can offer much beyond that, but wanted to throw it out there!
",jcastelli,pepelsbey
1768,2015-10-01 15:45:30,"Oh, and I must also thank @endoplasmic ‚Äì I didn't even know you could specify a directory to drop the binaries. Awesome!
",jcastelli,endoplasmic
1768,2015-10-02 00:42:46,"Thank you so much @endoplasmic ...you rock!
",ijmorgado,endoplasmic
1768,2015-10-02 06:20:56,"thank you guys it worked for me using @unclenorton's suggestion to reinstall Ruby and @endoplasmic's way for installing gems
",r1seUp,endoplasmic
1768,2015-10-02 06:20:56,"thank you guys it worked for me using @unclenorton's suggestion to reinstall Ruby and @endoplasmic's way for installing gems
",r1seUp,unclenorton
1768,2015-10-02 10:09:27,"Thank you @endoplasmic, this saved me some headaches!
",aufmkolk,endoplasmic
1768,2015-10-02 19:06:11,"@endoplasmic ‚ù§ /thanks
",bferioli,endoplasmic
1768,2015-10-02 19:13:36,"@endoplasmic This is the solution, thanks
",ravenjam,endoplasmic
1768,2015-10-02 22:52:28,"Thanks @endoplasmic :+1: 
",eneserdogan,endoplasmic
1768,2015-10-03 08:42:02,"@endoplasmic :+1: thanks
",atakangktepe,endoplasmic
1768,2015-10-03 09:05:23,"@endoplasmic thanks worked for me as well
",L1lle,endoplasmic
1768,2015-10-03 16:57:26,"Thank @endoplasmic that worked for me. Cheers :+1: :+1: 
",guygunaratne,endoplasmic
1768,2015-10-03 18:32:53,"@endoplasmic you're the man!
",soberman,endoplasmic
1768,2015-10-05 12:13:08,"@endoplasmic :+1: thanks
",ilkeryilmaz,endoplasmic
1768,2015-10-05 20:12:38,"@endoplasmic much kudos!
",mehanig,endoplasmic
1768,2015-10-06 00:43:50,"@endoplasmic it worked! very helpful! thx!
",webfacer,endoplasmic
1768,2015-10-06 13:49:24,"@endoplasmic Worked like a charm, thank you!
",Trullus,endoplasmic
1768,2015-10-07 18:38:51,"@endoplasmic you saved the day! Thank you so much!
",KevinSleegers,endoplasmic
1768,2015-10-07 19:12:02,"@endoplasmic === legend.
",ampersanddigital,endoplasmic
1768,2015-10-08 15:42:06,"@ousenko  Thanks. I believe installing this more recent ruby is better :smile:
",shrekuu,ousenko
1768,2015-10-14 09:21:20,"@endoplasmic - Lifesaver!!
",jpieterse84,endoplasmic
1768,2015-10-15 20:53:51,"thank you @endoplasmic , it works with `sudo gem install -n /usr/local/bin compass`.
",windmaomao,endoplasmic
1768,2015-10-16 19:53:14,"Good lookin @ousenko and @endoplasmic, worked like a charm!
",Joebobent,ousenko
1768,2015-10-16 19:53:14,"Good lookin @ousenko and @endoplasmic, worked like a charm!
",Joebobent,endoplasmic
1768,2015-10-17 00:32:36,"Thanks @endoplasmic. It rocks.
",jimmyko,endoplasmic
1768,2015-10-19 19:19:09,"Thanks @endoplasmic! 
",jasewarner,endoplasmic
1768,2015-10-26 09:55:08,"Thanks @endoplasmic 
",vineshhpatel,endoplasmic
1768,2015-10-27 05:27:40,"Thank you @endoplasmic. it works!
",Coolkevs,endoplasmic
1768,2015-11-01 16:21:38,"Thanks @endoplasmic ! ;)
",rafaelign,endoplasmic
1768,2015-11-02 20:56:25,"That did it--thanks @endoplasmic 
",lukehollis,endoplasmic
1768,2015-11-08 06:20:47,"@endoplasmic Thanks mate!! That did the trick.
",richardsison,endoplasmic
1768,2015-11-13 05:12:04,"@endoplasmic  Thank you so much! It worked for me.
",clampdown,endoplasmic
1768,2015-11-13 09:25:48,"The solution presented by @endoplasmic worked for me as well. Thank you!
",ajuliano,endoplasmic
1768,2015-11-13 15:07:21,"Thanks @endoplasmic  !
",LesleyMerks,endoplasmic
1768,2015-11-13 18:49:19,"@endoplasmic Thanks a lot!
",Macstyg,endoplasmic
1768,2015-11-16 15:44:28,"@endoplasmic Cheers!! üí™
",jamigibbs,endoplasmic
1768,2015-11-19 22:55:30,"@endoplasmic Muchas graciasssssssssss
",Dianna,endoplasmic
1768,2015-11-24 11:53:04,"Thanks @endoplasmic!
",niuserre,endoplasmic
1768,2015-11-25 08:20:44,"@endoplasmic thanks man :)
",EnlightenedCSF,endoplasmic
1768,2015-11-26 13:53:53,"+1 @endoplasmic,  you are definitely the hero of this thread. Cheers
",AnderUstarroz,endoplasmic
1768,2015-11-27 13:12:57,"Thanks @endoplasmic and @jgacuca567 :) You just saved a ton of my time!
",Kofaka,jgacuca567
1768,2015-11-27 13:12:57,"Thanks @endoplasmic and @jgacuca567 :) You just saved a ton of my time!
",Kofaka,endoplasmic
1768,2015-12-02 07:23:18,"+1 @endoplasmic and @jgacuca567  
",wangdetong,jgacuca567
1768,2015-12-02 07:23:18,"+1 @endoplasmic and @jgacuca567  
",wangdetong,endoplasmic
1768,2015-12-05 20:47:32,"@endoplasmic much appreciated! 
",matthewhirsch,endoplasmic
1768,2015-12-10 08:19:32,"@endoplasmic you saved my day! thx!
",PokimLee,endoplasmic
1768,2015-12-12 00:45:03,"Just throwing in my @endoplasmic thanks for the day
",fatisar,endoplasmic
1768,2015-12-13 02:15:19,"@endoplasmic  It Work!
",GThatchapit,endoplasmic
1768,2015-12-16 01:17:26,"@endoplasmic :+1: 
",shiraji,endoplasmic
1768,2015-12-27 15:59:58,"@endoplasmic thank you very very very much!
",xiaoshier,endoplasmic
1768,2015-12-28 22:05:56,"you probably haven't been told this enough yet, but thank you very much @endoplasmic.
",xturgorex,endoplasmic
1768,2015-12-31 22:27:39,"@endoplasmic very thanks. so gratitude. 
",lukemoderwell,endoplasmic
1761,2015-07-10 23:20:20,"Thanks for the fix, @nex3 !
",srawlins,nex3
1751,2015-06-23 19:42:42,"This is intended. All nested properties are emitted before any nested rules at all times. This helps ensure that when nested rules and properties are intermixed (as in @cimmanon's example) there isn't unnecessary duplication of the top-level rule.
",nex3,cimmanon
1751,2015-06-23 23:35:54,"@cimmanon Of course, if I'm using nesting, I _certainly_ know what and why I'm doing.

Don't take minimal testcases too seriously. Exact elements have nothing to do with the issue itself.

If `UL`/`LI` pair (fwiw, `UL LI` does not affect `LI` elements inside `OL` lists) looks somewhat misleading for you, consider `.foo`/`.bar` instead.
",Marat-Tanalin,cimmanon
1745,2015-08-21 20:16:17,"@mscarchilli It looks like my fix only worked when `--stdin` was passed explicitly. I'll fix it to work with implicit stdin input as well.

A way better solution that reverting is to explicitly pass `--load-path .`, though. This is the only future-proof way to import from the working directory when loading Sass via standard input.
",nex3,mscarchilli
1745,2015-08-21 21:55:49,"@nex3 Ah ha!  I added the loadPath to my grunt-contrib-sass task of '.' and that fixes that problem for me. Thank you.
",mscarchilli,nex3
1743,2015-06-16 08:18:31,"@DiegoAlbertoTorres if you're not using (ruby) Sass but (node) libsass this is in the wrong tracker. Please close this and report in [sass/node-sass](https://github.com/sass/node-sass/issues)
",mprins,DiegoAlbertoTorres
1739,2015-06-05 21:41:25,"@nex3 yes @blackfalcon is referring to my non-native library which used lists of pairs; I have a newer version which implements the same argument patterns for `map-get-z()` and `map-merge-z()` with native maps‚Äîhttps://github.com/lunelson/sass-maps-plus ‚Äîand so what do you think of comma-separated keys syntax for `map-merge`? Notably, in my implementation, providing a non-map as the final argument causes causes it to work like a `map-set()`, and empty keys/nests are created as necessary. So you could write merges in one of two ways:


",lunelson,blackfalcon
1739,2015-06-05 21:41:25,"@nex3 yes @blackfalcon is referring to my non-native library which used lists of pairs; I have a newer version which implements the same argument patterns for `map-get-z()` and `map-merge-z()` with native maps‚Äîhttps://github.com/lunelson/sass-maps-plus ‚Äîand so what do you think of comma-separated keys syntax for `map-merge`? Notably, in my implementation, providing a non-map as the final argument causes causes it to work like a `map-set()`, and empty keys/nests are created as necessary. So you could write merges in one of two ways:


",lunelson,nex3
1739,2015-06-05 21:52:18,"@lunelson :+1: 
",nex3,lunelson
1739,2015-06-08 10:28:25,"@ArmorDarks The upside of this (so-called) `map-get-z()` argument syntax is that it can also be a simple `map-get()`: that is, it works as either nested or non-nested depending on the number of arguments provided. So this proposal is not really for a new `map-get-z()` function but rather to consider an extension to the utility of the existing `map-get()`: nothing breaks, nothing changes; but if you provide more arguments they would be assumed to be keys at which to address nested maps. The idea was also, simply, that comma-separating keys reads in a similar way, to the way you address objects in javascript or other languages, i.e. dot notation.

WRT your other point, I'm sure this is because curly braces and square braces have very specific meanings in CSS and they wish to avoid confusion. Sass has always restricted itself to syntax styles that seem like part of CSS, and  round braces are the only kind seen in vanilla CSS rules (e.g. css transforms etc.)
",lunelson,ArmorDarks
1739,2015-06-11 08:59:26,"@chriseppstein what's your opinion on my comment above?
",lunelson,chriseppstein
1739,2015-06-11 11:30:13,"@HugoGiraudel Can you share with us your opinion why is it so, in mentioned issue above? Thanks in advance
",ArmorDarks,HugoGiraudel
1739,2015-06-11 11:49:43,"@ArmorDarks contrived example: (cc @HugoGiraudel)

This is legal:



However, `map-get($map, foo.bar)` is (currently) not legal syntax. If it were, which value should it refer to? `'baz'` or `'qux'`? There is ambiguity, so dot notation would be a bad idea because of the nature of CSS selectors and the necessity for Sass to play nicely with them.
",davidkpiano,HugoGiraudel
1739,2015-06-11 11:49:43,"@ArmorDarks contrived example: (cc @HugoGiraudel)

This is legal:



However, `map-get($map, foo.bar)` is (currently) not legal syntax. If it were, which value should it refer to? `'baz'` or `'qux'`? There is ambiguity, so dot notation would be a bad idea because of the nature of CSS selectors and the necessity for Sass to play nicely with them.
",davidkpiano,ArmorDarks
1739,2015-06-11 12:00:09,"@ArmorDarks The short answer is that CSS (and thus Sass) is function based. If I am not mistaken, this is the main reason why Sass decided to go with functional notation instead of dot notation. Introducing the dot would not only be the source of hard to track bugs like the one explained by @davidkpiano, but also disrupt the global harmony.
",HugoGiraudel,ArmorDarks
1739,2015-06-11 12:00:09,"@ArmorDarks The short answer is that CSS (and thus Sass) is function based. If I am not mistaken, this is the main reason why Sass decided to go with functional notation instead of dot notation. Introducing the dot would not only be the source of hard to track bugs like the one explained by @davidkpiano, but also disrupt the global harmony.
",HugoGiraudel,davidkpiano
1739,2015-06-11 15:52:44,"@HugoGiraudel hm, can't agree with it. JavaScript is object-based, with hard rely on functions too. So, it shouldn't use dot notation too, since two ways to do same thing would make things disharmoned? Same for Python, etc.

Not to mention, that JS has dot notation, brackets notation and special functions for getting values from ES6 maps (not objects). And you can write your own function to get values from objects too. Which makes about 4 ways to do, from first glance, same thing, but each approach was introduced to target specific purposes.

@davidkpiano Thanks for your input. Though, I think that discussion should go into mentioned issue above, since we're diving into offtopic deeper.

Since you replied here, I'm probably forced to reply here too.

Regarding your example ‚Äî there is no error here. With `map-get($map, nth(&, 1));` you get `baz`, because you're refering to function which is key. With `map-get($map, foo.bar)` you will get `qux`. since you're traversing through existing keys, which are `foo` and `bar`.

`map-get($map, foo.bar)` is totally == to `map-get($map, foo, bar)` if endless arguments for `map-get()` would be implemented ever. So far I don't see issues with it. Maybe I'm missing something.

---

Once again, I'm sorry for post, that raised another discussion here, which in fact should be discussed here https://github.com/sass/sass/issues/1349.

Let's back to our current issue. I doubt that someone will argue with fact, that all would only benefit from having `map-get()` and `map-merge()` which will accept endless number of arguments.

To summarize, I think that there were only few little things that were missed:

> Notably, in my implementation, providing a non-map as the final argument causes causes it to work like a map-set(), and empty keys/nests are created as necessary. So you could write merges in one of two ways:

by @lunelson https://github.com/sass/sass/issues/1739#issuecomment-109447612

And my proposal to use `$path` argument with list inside instead of endless arguments https://github.com/sass/sass/issues/1739#issuecomment-109562901

Regarding my proposal ‚Äî it seems that Sass community more appreciate endless arguments approach, and using of `$path` argument with list seems to be a bit against current approaches of Sass.
",ArmorDarks,lunelson
1739,2015-06-11 15:52:44,"@HugoGiraudel hm, can't agree with it. JavaScript is object-based, with hard rely on functions too. So, it shouldn't use dot notation too, since two ways to do same thing would make things disharmoned? Same for Python, etc.

Not to mention, that JS has dot notation, brackets notation and special functions for getting values from ES6 maps (not objects). And you can write your own function to get values from objects too. Which makes about 4 ways to do, from first glance, same thing, but each approach was introduced to target specific purposes.

@davidkpiano Thanks for your input. Though, I think that discussion should go into mentioned issue above, since we're diving into offtopic deeper.

Since you replied here, I'm probably forced to reply here too.

Regarding your example ‚Äî there is no error here. With `map-get($map, nth(&, 1));` you get `baz`, because you're refering to function which is key. With `map-get($map, foo.bar)` you will get `qux`. since you're traversing through existing keys, which are `foo` and `bar`.

`map-get($map, foo.bar)` is totally == to `map-get($map, foo, bar)` if endless arguments for `map-get()` would be implemented ever. So far I don't see issues with it. Maybe I'm missing something.

---

Once again, I'm sorry for post, that raised another discussion here, which in fact should be discussed here https://github.com/sass/sass/issues/1349.

Let's back to our current issue. I doubt that someone will argue with fact, that all would only benefit from having `map-get()` and `map-merge()` which will accept endless number of arguments.

To summarize, I think that there were only few little things that were missed:

> Notably, in my implementation, providing a non-map as the final argument causes causes it to work like a map-set(), and empty keys/nests are created as necessary. So you could write merges in one of two ways:

by @lunelson https://github.com/sass/sass/issues/1739#issuecomment-109447612

And my proposal to use `$path` argument with list inside instead of endless arguments https://github.com/sass/sass/issues/1739#issuecomment-109562901

Regarding my proposal ‚Äî it seems that Sass community more appreciate endless arguments approach, and using of `$path` argument with list seems to be a bit against current approaches of Sass.
",ArmorDarks,HugoGiraudel
1739,2015-06-11 15:52:44,"@HugoGiraudel hm, can't agree with it. JavaScript is object-based, with hard rely on functions too. So, it shouldn't use dot notation too, since two ways to do same thing would make things disharmoned? Same for Python, etc.

Not to mention, that JS has dot notation, brackets notation and special functions for getting values from ES6 maps (not objects). And you can write your own function to get values from objects too. Which makes about 4 ways to do, from first glance, same thing, but each approach was introduced to target specific purposes.

@davidkpiano Thanks for your input. Though, I think that discussion should go into mentioned issue above, since we're diving into offtopic deeper.

Since you replied here, I'm probably forced to reply here too.

Regarding your example ‚Äî there is no error here. With `map-get($map, nth(&, 1));` you get `baz`, because you're refering to function which is key. With `map-get($map, foo.bar)` you will get `qux`. since you're traversing through existing keys, which are `foo` and `bar`.

`map-get($map, foo.bar)` is totally == to `map-get($map, foo, bar)` if endless arguments for `map-get()` would be implemented ever. So far I don't see issues with it. Maybe I'm missing something.

---

Once again, I'm sorry for post, that raised another discussion here, which in fact should be discussed here https://github.com/sass/sass/issues/1349.

Let's back to our current issue. I doubt that someone will argue with fact, that all would only benefit from having `map-get()` and `map-merge()` which will accept endless number of arguments.

To summarize, I think that there were only few little things that were missed:

> Notably, in my implementation, providing a non-map as the final argument causes causes it to work like a map-set(), and empty keys/nests are created as necessary. So you could write merges in one of two ways:

by @lunelson https://github.com/sass/sass/issues/1739#issuecomment-109447612

And my proposal to use `$path` argument with list inside instead of endless arguments https://github.com/sass/sass/issues/1739#issuecomment-109562901

Regarding my proposal ‚Äî it seems that Sass community more appreciate endless arguments approach, and using of `$path` argument with list seems to be a bit against current approaches of Sass.
",ArmorDarks,davidkpiano
1739,2015-07-13 18:06:42,"@ArmorDarks I agree with you about list/arrays and maps/objects in your [comment](https://github.com/sass/sass/issues/1739#issuecomment-109562901). I would have liked to see these features implemented in the same way that `js` and other major languages. It would make complex things easier to read because you can actually see the difference between getting a value from a map or list and calling a function with that value, and see the difference between `()` for order of operations, and `()` that are just getting a value to use inside of the order of operations. I think that the `()` are over used in sass and at times has cause a lot of confusion when developing functions/mixins and using lists inside of maps that call other functions that have `()`.  I've see `))))))` at the end of a line and I have no idea what `)` is doing what without taking a few min to break it down into multiple lines. When it could be simplified to be `)))` if dot/bracket notation was implemented.

In less than 3 seconds can you determine this `)` is tied to in the example below?  Order of operations, map a function, part of abs function?



Here's the same test with dot notation. 


",tjbenton,ArmorDarks
1739,2015-07-13 18:58:41,"@tjbenton thanks for the support. I totally agree with you.

More of it, I was always confused, why Sass preferred to use `()` for maps. Some people pointing, that it's because CSS rules already using `{}`.

But am I the only person, that seeing, that in fact CSS's rules are _objects_ itself, but only with `;` instead of `,` as delimiter? You can even drop last `;` in ruleset, just like in JavaScript's object, or Python's dict.

For the sake of illustration, object-like ruleset in CSS:



and JavaScript object:



I hope everybody can see how they are close. Why would we need to invent new syntax with `()`, which already were used by functions and lists (arrays), while we already had objects in fact?

We can open issue about `{}` instead for objects and `[]` for maps, but I don't believe that it will be changed ever... though, I must admit, it's possible to add `{}` and `{}` as optional notation (it won't break anything so far), so that well-pointed overused `()` could be used by legacy projects and would be dropped in future, after few major versions.
",ArmorDarks,tjbenton
1739,2015-07-13 19:05:49,"@ArmorDarks Keep in mind that CSS rulesets are _not exactly_ objects like JavaScript objects. This is legal in CSS but not legal as an object/dict/map:


",davidkpiano,ArmorDarks
1739,2015-07-13 19:48:50,"@davidkpiano I'm talking not about literal similarity, but about same conceptual approach. CSS's rulestes are objects by it's nature, but with slightly another syntax

@lunelson I can't agree with that. Introducing of `()` for list and in same time for maps (for two different entities) nor make syntax looks like CSS (because in CSS `()` used only for inner values, like `url()`, not for associated values), nor doesn't sound like solution to that problem, not to mention that it doesn't increase accessibility for new users, because `()` for arrays and objects are very uncommon in other languages. On top of it, mentioned by @tjbenton issue with `(((((())))))` in functions with maps, lists etc.
",ArmorDarks,lunelson
1739,2015-07-13 19:48:50,"@davidkpiano I'm talking not about literal similarity, but about same conceptual approach. CSS's rulestes are objects by it's nature, but with slightly another syntax

@lunelson I can't agree with that. Introducing of `()` for list and in same time for maps (for two different entities) nor make syntax looks like CSS (because in CSS `()` used only for inner values, like `url()`, not for associated values), nor doesn't sound like solution to that problem, not to mention that it doesn't increase accessibility for new users, because `()` for arrays and objects are very uncommon in other languages. On top of it, mentioned by @tjbenton issue with `(((((())))))` in functions with maps, lists etc.
",ArmorDarks,tjbenton
1739,2015-07-13 19:48:50,"@davidkpiano I'm talking not about literal similarity, but about same conceptual approach. CSS's rulestes are objects by it's nature, but with slightly another syntax

@lunelson I can't agree with that. Introducing of `()` for list and in same time for maps (for two different entities) nor make syntax looks like CSS (because in CSS `()` used only for inner values, like `url()`, not for associated values), nor doesn't sound like solution to that problem, not to mention that it doesn't increase accessibility for new users, because `()` for arrays and objects are very uncommon in other languages. On top of it, mentioned by @tjbenton issue with `(((((())))))` in functions with maps, lists etc.
",ArmorDarks,davidkpiano
1739,2015-07-13 23:10:33,"While @davidkpiano is correct

> CSS rule sets are not exactly objects like JavaScript objects
> But it looks very similar, and when new people learn css with a JS background it's how they think of the styles because they think of a rule set as an Object. If you run `typeof document.styleSheets[0].cssRules[0].style` in a browser you can see that JS stores the rules in an Object. So it's not a far leap to think of them in that way.

@lunelson Adding dot notation and curly-brace object notation wouldn't conflict with existing CSS syntactical patterns. It would actually be more inline with CSS patterns that what is currently implemented. 

#### Dots
- CSS uses dots to increase the specificity level
- Dot notation uses dots to take you deeper into a map

#### Brackets
- CSS uses brackets to allow you to select attributes and that increases the specificity level
- Bracket notation is used to select items via a `variable`, `string`, or because the key is a `list` or `map`, and that takes you one level deeper in the map. 

#### Rule set/structure
- A CSS rule set is comprised of a selector followed by a declaration block of properties and values; the rule set applies the declarations listed in the declaration block to all elements matched by the selector.
  `scss
  .foo{
  border: {
  top: {
  right: {
   radius: 6px;
  };
  };
  };
  }
  `
  - A curly brace structure is comprised of a variable(key, or in an array) followed by a declaration block of keys and values; the structure is  associated with the variable/array/key



Using `[]` for lists instead `()` is the only one that doesn't follow css. But you can't honestly, tell me that using `()` follows css either. You can try argue that `linear-gradient(#fff 0%, #000 100%)` is the reason that `()` were used and why you can have space and comma delimited lists. But I don't think that's a valid argument because in CSS `linear-gradient` is a CSS function and the lists inside of it are actually an arguments list. You could also argue that the reason why you can have both spaces and commas are because that is how CSS selectors work, but css selectors don't have `()` in them unless it includes a pseudo selector like `:matches(section, article, aside, nav)` which is acting like a function.

As for the parsing of it, I don't think that it would be that difficult because the only dot/bracket notation has to be tied to a variable. When the variable is defined it has to be followed by a `:` and you can't end a css selector with a `:` because it's not a valid selector. Every SASS variable has to start with a `$`. Given that information it's easy to tell the difference between a sass variable and a css selector. Even when used in interpolation it would still be easy to see the difference



While I would _love_ to see sass change to use `{}`, and `[]` I don't see sass changing it or even having it be an optional syntax while the other is phased out, and if by some miracle it was approved, It would take a while for it into production.
",tjbenton,lunelson
1739,2015-07-13 23:10:33,"While @davidkpiano is correct

> CSS rule sets are not exactly objects like JavaScript objects
> But it looks very similar, and when new people learn css with a JS background it's how they think of the styles because they think of a rule set as an Object. If you run `typeof document.styleSheets[0].cssRules[0].style` in a browser you can see that JS stores the rules in an Object. So it's not a far leap to think of them in that way.

@lunelson Adding dot notation and curly-brace object notation wouldn't conflict with existing CSS syntactical patterns. It would actually be more inline with CSS patterns that what is currently implemented. 

#### Dots
- CSS uses dots to increase the specificity level
- Dot notation uses dots to take you deeper into a map

#### Brackets
- CSS uses brackets to allow you to select attributes and that increases the specificity level
- Bracket notation is used to select items via a `variable`, `string`, or because the key is a `list` or `map`, and that takes you one level deeper in the map. 

#### Rule set/structure
- A CSS rule set is comprised of a selector followed by a declaration block of properties and values; the rule set applies the declarations listed in the declaration block to all elements matched by the selector.
  `scss
  .foo{
  border: {
  top: {
  right: {
   radius: 6px;
  };
  };
  };
  }
  `
  - A curly brace structure is comprised of a variable(key, or in an array) followed by a declaration block of keys and values; the structure is  associated with the variable/array/key



Using `[]` for lists instead `()` is the only one that doesn't follow css. But you can't honestly, tell me that using `()` follows css either. You can try argue that `linear-gradient(#fff 0%, #000 100%)` is the reason that `()` were used and why you can have space and comma delimited lists. But I don't think that's a valid argument because in CSS `linear-gradient` is a CSS function and the lists inside of it are actually an arguments list. You could also argue that the reason why you can have both spaces and commas are because that is how CSS selectors work, but css selectors don't have `()` in them unless it includes a pseudo selector like `:matches(section, article, aside, nav)` which is acting like a function.

As for the parsing of it, I don't think that it would be that difficult because the only dot/bracket notation has to be tied to a variable. When the variable is defined it has to be followed by a `:` and you can't end a css selector with a `:` because it's not a valid selector. Every SASS variable has to start with a `$`. Given that information it's easy to tell the difference between a sass variable and a css selector. Even when used in interpolation it would still be easy to see the difference



While I would _love_ to see sass change to use `{}`, and `[]` I don't see sass changing it or even having it be an optional syntax while the other is phased out, and if by some miracle it was approved, It would take a while for it into production.
",tjbenton,davidkpiano
1739,2015-07-16 01:11:42,"@chriseppstein Reply to [(comment)](https://github.com/sass/sass/issues/1739#issuecomment-110457642) about map merge. I can see this working in a couple of different ways. Going under the assumption `map-get` is implemented like `map-get($map, foo, bar, baz)`.
1. a. Update `map-merge` to work like this awesome [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function written by @HugoGiraudel. This way `map-merge` is strickly for merging multiple maps, and it adds a recursive functionality that wouldn't break the current implementation.
   b. Add a new `map-set` function that would work exactly like `map-get` except the last argument would be the value that's set.
   
   
   
   The down side would be having to combine it with `map-get` for combining deep maps. But the upside is that you leave the functionality of `map-merge` to just merge maps which is what I would think it would do based off the name. For more examples on how `map-set` would be useful see below.
2. a. Update `map-merge` to work just like `map-get` except the last argument would be the map to merge
   
   
   
   It would return the map of the first argument's map in the arguments list, not the 2nd to last(aka: `baz`) arguments map.
   b. Add a new `map-extend` [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function. It solves a lot of merging issues you may run into when merging multiple maps, and it's recursive.
3. A quazi hybrid of `map-get`, and @HugoGiraudel [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function
   
   

All 3 `map-merge` options are backwards compatable to sass 3.3+. So they're all viable options. Personally I like #1 the most because it would match `map-get` closer for consistency, and because I'm not a huge fan of space delimited lists used in #2. But I can see how #2 is appealing because no new functions have to be added to deal with map merging and it still adds all the functionality of the [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1).

No matter which is direction is chosen for dealing with merging maps, I would still like to see a `map-set` function added that's specifically used for setting values in a map. I think it would be useful because sometimes you need to update a value of a map and at the same time remove some keys from a map, and sometimes you just want to set a single key in a map; and, in my opinion, writing `map-merge($map, (foo: ""bar""))` to set a single value in a map is weird.

If `map-set` was implemented then there wouldn't be a need to update `map-remove` which would be good because since `map-remove` already uses a an args list and dot notation isn't gonna happen, the first argument would have to be a space delimited list to get to deep values, and then it would have to return the map of first item in the list. Here are some examples more examples of `map-set` combined with `map-remove`, and how you would do it without `map-set`.


- **Note:** `map-remove` would still return a new map of the map that it was passed.
- **Note:** these examples are using `map-merge` suggestion `#1` from above

#### Examples: With `map-set`

###### Remove values of a nested map, and not update values.



###### Removing `qux`, and `quux`, and setting `baz` to `""waldo""`



###### Setting a value of a nested map



#### Examples: The same examples without `map-set`

###### Remove values of a nested map, and not update values.



###### Removing `qux`, and `quux`, and setting `baz` to `""waldo""`



###### Setting a value of a nested map



In all cases `map-set` uses less characters and parentheses than `map-merge`, and less which increases readability. As mentioned before this would leave the functionality of `map-merge` to be just for merging maps which in my opinion would very good thing. Hope this leads to a solution for this issue.
",tjbenton,HugoGiraudel
1739,2015-07-16 01:11:42,"@chriseppstein Reply to [(comment)](https://github.com/sass/sass/issues/1739#issuecomment-110457642) about map merge. I can see this working in a couple of different ways. Going under the assumption `map-get` is implemented like `map-get($map, foo, bar, baz)`.
1. a. Update `map-merge` to work like this awesome [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function written by @HugoGiraudel. This way `map-merge` is strickly for merging multiple maps, and it adds a recursive functionality that wouldn't break the current implementation.
   b. Add a new `map-set` function that would work exactly like `map-get` except the last argument would be the value that's set.
   
   
   
   The down side would be having to combine it with `map-get` for combining deep maps. But the upside is that you leave the functionality of `map-merge` to just merge maps which is what I would think it would do based off the name. For more examples on how `map-set` would be useful see below.
2. a. Update `map-merge` to work just like `map-get` except the last argument would be the map to merge
   
   
   
   It would return the map of the first argument's map in the arguments list, not the 2nd to last(aka: `baz`) arguments map.
   b. Add a new `map-extend` [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function. It solves a lot of merging issues you may run into when merging multiple maps, and it's recursive.
3. A quazi hybrid of `map-get`, and @HugoGiraudel [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1) function
   
   

All 3 `map-merge` options are backwards compatable to sass 3.3+. So they're all viable options. Personally I like #1 the most because it would match `map-get` closer for consistency, and because I'm not a huge fan of space delimited lists used in #2. But I can see how #2 is appealing because no new functions have to be added to deal with map merging and it still adds all the functionality of the [extend](https://gist.github.com/HugoGiraudel/7525f0546479acd1d6e1).

No matter which is direction is chosen for dealing with merging maps, I would still like to see a `map-set` function added that's specifically used for setting values in a map. I think it would be useful because sometimes you need to update a value of a map and at the same time remove some keys from a map, and sometimes you just want to set a single key in a map; and, in my opinion, writing `map-merge($map, (foo: ""bar""))` to set a single value in a map is weird.

If `map-set` was implemented then there wouldn't be a need to update `map-remove` which would be good because since `map-remove` already uses a an args list and dot notation isn't gonna happen, the first argument would have to be a space delimited list to get to deep values, and then it would have to return the map of first item in the list. Here are some examples more examples of `map-set` combined with `map-remove`, and how you would do it without `map-set`.


- **Note:** `map-remove` would still return a new map of the map that it was passed.
- **Note:** these examples are using `map-merge` suggestion `#1` from above

#### Examples: With `map-set`

###### Remove values of a nested map, and not update values.



###### Removing `qux`, and `quux`, and setting `baz` to `""waldo""`



###### Setting a value of a nested map



#### Examples: The same examples without `map-set`

###### Remove values of a nested map, and not update values.



###### Removing `qux`, and `quux`, and setting `baz` to `""waldo""`



###### Setting a value of a nested map



In all cases `map-set` uses less characters and parentheses than `map-merge`, and less which increases readability. As mentioned before this would leave the functionality of `map-merge` to be just for merging maps which in my opinion would very good thing. Hope this leads to a solution for this issue.
",tjbenton,chriseppstein
1739,2015-11-13 21:59:55,"Looking at this again, I've changed my mind about `map-merge()`. Giving it the same semantics as the semantic `map-set` function produces confusion. I'd like to preserve the invariant that `map-merge($map1, ($k: $v))` is always the same as `map-merge($map1, $k, $v)`, but that's not backwards-compatible when `$v` is itself a map.

Given that, I think I agree with @tjbenton's option 1: require `map-merge`'s final parameter to _always_ be a map, and add a new `map-set` function for setting individual values.
",nex3,tjbenton
1739,2015-11-13 22:43:00,"@nex3 I'm not entirely sure what you are proposing.

You want `map-merge($map1, $keys, $map2)`? Or, just leave `map-merge` as it is with two maps? Would `$map2` support being a nested map?

Can you provide some examples of what you are proposing?
",hcatlin,nex3
1735,2015-05-26 19:44:42,"@cimmanon Interesting. I didn't even think to check that.

I'll post a bug on the library which was causing my sass to fail for this reason.

Thanks!
",mendelk,cimmanon
1731,2015-05-31 02:10:33,"Interesting. Thanks for that @cimmanon, but why does it let me modify the map without `!global` when the `if/else` is removed?
",stowball,cimmanon
1726,2015-05-23 02:08:27,"@nex3 Doesn't your example use a `.scss` file, whereas mine uses a `.css` file?
",cvrebert,nex3
1722,2015-07-24 19:46:17,"@ezekg All you've managed to do there is make something Sass can compile, but it doesn't work at all when you try and apply it to the HTML.



When applied to this markup:



Only makes the text red, it doesn't apply the border.

http://sassmeister.com/gist/f4f56b15f56ba9d6ff45
",cimmanon,ezekg
1722,2015-07-24 19:53:31,"CSS allows for escaping most characters by putting a \ in front of it except for hexadecimal characters.  This is because it also allows for escaping via a \ followed by a 1 to 6 digit hex number (followed by a space if less than 6 digits and the following character is a hexadecimal character).  So to escape 007 for a class selector you need to do  .\30 07   or .\00003007  as @cimmanon shows.   .\007  would just be whatever character code 7 is.
",twalpole,cimmanon
1721,2015-05-11 15:39:40,"@nex3 

>  by contrast, a missing key in a map is much more likely to be purposeful.

Isn't that more in the category of opinion than a rule ‚Äì null or error in all cases 
would be a more consistent choice.    
",jakob-e,nex3
1719,2016-01-04 18:26:24,"@timbodeit jekyll should strip the front matter before passing the file to Sass. Please file a bug with that project.
",chriseppstein,timbodeit
1718,2015-05-08 21:37:21,"Duplicate of #1469.

@Wordius Check out the questions I asked @WillsB3 on that issue, and provide your own answers to them there.
",nex3,Wordius
1715,2015-05-09 00:51:51,"Thanks for the reply, I appreciate the detail. Where would I find the docs
for the Ruby API?

On Friday, May 8, 2015, Natalie Weizenbaum notifications@github.com wrote:

> Closed #1715 https://github.com/sass/sass/issues/1715.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1715#event-300728212.

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowski
1713,2016-02-10 15:16:55,"@mikemonteith can you share with us the work-around? I have the same thing to do.
",mburger81,mikemonteith
1713,2016-02-10 15:26:29,"@mburger81 I wish I could remember what I was working on back then to find the code. I've changed job since then so it's likely I don't have access to the code any more anyway. Sorry :disappointed: 
",mikemonteith,mburger81
1710,2016-02-08 18:55:05,"@actuallymentor Recent versions of listen have a _lot_ of ruby dependencies. We ship a version of listen that is older and did not have as many dependencies. Ideally, we'd use a lighter weight library, and extract the CLI to it's own gem so people who are just using the core compiler can do so without all the CLI dependencies.
",chriseppstein,actuallymentor
1710,2016-02-09 06:06:15,"@chriseppstein lighter dependencies is great, but not if it makes my i7 spin half of it's power to the ruby process :)

I'd gladly trade a sucky dependency structure for battery life and a silent computer. I literally only noticed something was up because it was blowing like an airplane while just working in sublime.
",actuallymentor,chriseppstein
1710,2016-02-11 01:12:15,"@actuallymentor I hear you. Fortunately, there's a work around (installing a newer version of listen that we will use instead), while you wait for us to refactor.
",chriseppstein,actuallymentor
1707,2015-04-21 21:10:55,"@nex3 Excellent, thank you! Might look into contributing this on the next hack night if no one beats me to it (please do).
",henrik,nex3
1697,2015-06-23 00:28:46,"Hi @nex3, I've redone the implementation to match the behavior of top-level double-spacing. Looks better.
",srawlins,nex3
1689,2015-04-02 13:49:16,"@Snugug Ah, ok. Missed that one, probably because it's closed.
",hon2a,Snugug
1684,2015-04-22 09:06:36,"@nex3 `.wont-extend-hover a:hover` has specificity 21, not 11. So, `.will-extend-hover a:hover` should be generated.
",piouPiouM,nex3
1684,2015-04-23 00:01:39,"The specificity of `.wont-extend-hover a:hover` doesn't matter. The only specificity guarantee that Sass provides is that the generated selector will have specificity greater than or equal to **the extender**, which is `.wont-extend-hover a`.

@HugoGiraudel You're misreading that sentence; the `it` there refers to `a:hover`.
",nex3,HugoGiraudel
1684,2015-04-23 07:49:38,"> @HugoGiraudel You're misreading that sentence; the it there refers to a:hover.

My bad. I had a quick read. :)
",HugoGiraudel,HugoGiraudel
1683,2015-04-21 21:08:13,"@cimmanon You're right about this being because of scope, but wrong that it should cause an error. `$value` is defined at the top level, so every use of `$value` that runs after that definition will at least refer to the global variable.

@Brunni132 Let me walk you through what's happening here. First, before you include anything, Sass creates a global `$value` variable. Then you include `example`, which refers to this global `$value` variable. Then you include `smaller`, in which Sass runs `@content`, which points to the block passed to `smaller`. Within that block, it runs `$value: 24px`. This is where your expectations break down.

In Sass 3.4, this is a _local variable declaration_. What this means is, because the variable declaration is in a scope (designated by `{` and `}`), it doesn't refer to the same variable as the top-level `$value`. This is important: it means that it's possible to use variable names freely within mixins, functions, and nested selectors without having to worry about whether those names happen to be defined globally in some vastly separate Sass file. But it also means that this variable assignment doesn't do anything. It's only relevant within the `{` and the `}`; it's not even visible to `example`.

If you want to pass values into a mixin, though, there's a built-in way to do exactly that: parameters. You could rewrite your example like this:



and never have to worry about variable scoping at all.
",nex3,Brunni132
1683,2015-04-21 21:08:13,"@cimmanon You're right about this being because of scope, but wrong that it should cause an error. `$value` is defined at the top level, so every use of `$value` that runs after that definition will at least refer to the global variable.

@Brunni132 Let me walk you through what's happening here. First, before you include anything, Sass creates a global `$value` variable. Then you include `example`, which refers to this global `$value` variable. Then you include `smaller`, in which Sass runs `@content`, which points to the block passed to `smaller`. Within that block, it runs `$value: 24px`. This is where your expectations break down.

In Sass 3.4, this is a _local variable declaration_. What this means is, because the variable declaration is in a scope (designated by `{` and `}`), it doesn't refer to the same variable as the top-level `$value`. This is important: it means that it's possible to use variable names freely within mixins, functions, and nested selectors without having to worry about whether those names happen to be defined globally in some vastly separate Sass file. But it also means that this variable assignment doesn't do anything. It's only relevant within the `{` and the `}`; it's not even visible to `example`.

If you want to pass values into a mixin, though, there's a built-in way to do exactly that: parameters. You could rewrite your example like this:



and never have to worry about variable scoping at all.
",nex3,cimmanon
1679,2015-04-23 00:05:32,"@IGRACH what ended up being the issue here?
",nex3,IGRACH
1676,2015-03-25 12:25:54,"@danieldiekmeier There are external libraries you can use to accomplish this, such as [Sassy Lists](http://sassylists.com/documentation/#function-sl-slice) or [the `_slice()` function in Sassdash](https://github.com/davidkpiano/sassdash) (which accepts negative start values for retrieving items from the end of a list).
",davidkpiano,danieldiekmeier
1676,2015-03-25 12:31:08,"@davidkpiano Sassdash looks amazing, I'll definitely have a look. Thank you for your work there!
",danieldiekmeier,davidkpiano
1674,2015-03-20 12:48:19,"@Naddiseo is there anything wrong with just making a new mixin that uses the old one?



That would be the sensible way to do it - and you get the benefit of namespacing, which will prevent unwanted side-effects, especially from other stylesheets in your project that include the original `@mixin foo()`.
",davidkpiano,Naddiseo
1674,2015-03-20 12:50:32,"I think it would be better if it was just a configurable mixin to begin with. I don't think augmenting and overriding is doable until something like content functions, #1582, are a thing. Jakob-e's example looks similar.

@davidkpiano Duplicate CSS if you're changing a previously styled background to blue in `new-foo`.

@lolmaus AbsurdJS looks cool, though obviously not as pretty as Sass.
",whaaaley,lolmaus
1674,2015-03-20 12:50:32,"I think it would be better if it was just a configurable mixin to begin with. I don't think augmenting and overriding is doable until something like content functions, #1582, are a thing. Jakob-e's example looks similar.

@davidkpiano Duplicate CSS if you're changing a previously styled background to blue in `new-foo`.

@lolmaus AbsurdJS looks cool, though obviously not as pretty as Sass.
",whaaaley,davidkpiano
1674,2015-03-20 14:45:09,"@davidkpiano, creating a new mixin is fine if all I wanted to do is change the output in my code, but if I also want to override the the library's calls to the same function, I can't. Also, exactly what @dustindowell22 said, it's not DRY.
",Naddiseo,davidkpiano
1674,2015-04-23 00:22:29,"This isn't something we're planning to do. Overriding and wrapping existing mixins is not something we've really seen a compelling need for.

@lolmaus This is something I've considered, and it would certainly do a good job of fleshing out the long tail of power-user features, but I'm pretty sure that wouldn't come close to making up for the pain of integrating nicely with CSS syntax. The fact of the matter is that the vast majority of time spent with a CSS processor is spent writing styles rather than writing framework code, so sacrificing the usability of the former in order to increase the power of the latter is rarely a winning proposition.
",nex3,lolmaus
1669,2015-03-19 03:47:15,"@JackNUMBER I wouldn't say this would make Sass harder to learn. Implementing this wouldn't break anything because the current way of nesting inside pseudo elements compiles invalid CSS. In CSS pseudo elements always have to come after the selector. Always pushing the pseudo element to the end of the selector seems logical.
",whaaaley,JackNUMBER
1663,2015-05-23 01:32:02,"@thany You have to include `@charset ""utf-8"";` in the actual files that use the non-ASCII characters. It doesn't transfer from file to file.

@bmains911 Yours is working as intended. `\e000` is equivalent CSS to `ÓÄÄ` (which is why it worked in browsers). Sass doesn't keep track of whether characters in input strings were escaped, so it always emits them as literal Unicode code-points to be safe.
",nex3,thany
1663,2015-05-23 01:32:02,"@thany You have to include `@charset ""utf-8"";` in the actual files that use the non-ASCII characters. It doesn't transfer from file to file.

@bmains911 Yours is working as intended. `\e000` is equivalent CSS to `ÓÄÄ` (which is why it worked in browsers). Sass doesn't keep track of whether characters in input strings were escaped, so it always emits them as literal Unicode code-points to be safe.
",nex3,bmains911
1663,2015-07-10 08:24:26,"@nex3 that doesn't help. Output for that one character is still `content: ' √î√á‚ïë';` instead of `content: ' ‚Ä∫';`.

I've put `@charset 'utf-8';` in the file where the character is, made 5000% sure it's actually saved as utf-8, and I've even put the `@charset` declaration in _every_ scss file. No juice.
",thany,nex3
1663,2015-11-09 02:21:57,"Had this exact problem too, just wanted to thank @thany for the detail you provided in this thread! Fixed my issue.
",tdmalone,thany
1659,2015-03-01 19:19:32,"@kmcaloon I'd keep track of issue #1582 - if/when that feature is introduced into Sass, it would give you an easy way to do what you're trying to accomplish.
",davidkpiano,kmcaloon
1645,2015-02-19 13:20:06,"@cimmanon 



Used `grunt-contrib-sass@^0.9.2` and `grunt-sass@0.18.0`

Btw http://sassmeister.com/ compiles well
",monolithed,cimmanon
1645,2017-02-15 09:29:23,"@cimmanon
thanks! your solution saved me hours ",vincefliek,cimmanon
1642,2015-02-20 19:40:11,"@tatze If some browsers treat `rgb()`/`rgba()` differently, that may change the equation. Is there a document anywhere describing the difference?
",nex3,tatze
1642,2015-02-22 12:19:26,"No, `rgb()` and `rgba()` are handled the same way, but please see http://jsfiddle.net/2qsfh8ka/3/

`.icon.home` isn't shown with Firefox as it uses a hex value as the path fill color. `.icon.user` and `.icon.search` are working correctly. The problem with `rgba()` is purely that I don't expect a hex value to be rendered. Imagine a highly variable driven setup, where multiple pages are supported and the colors will be inserted to the svg background like `<path fill=""#{$buttons-fill-color}""`. So in theory I _could_ use all kinds of colors for `$buttons-fill-color`, but with the current fallback to hex this is kind of confusing without finding it in the docs.

So, @nex3: can you please document the fallback?
",tatze,nex3
1642,2015-02-22 13:02:42,"@tatze Firefox doesn't _have_ a problem with hex colors.  It has a problem with unencoded hashes in the URL.  If you replace `#` with `%23`, it works.

http://jsfiddle.net/2qsfh8ka/4/
",cimmanon,tatze
1642,2015-02-22 13:20:23,"@cimmanon bu√§rks! Thanks! :D
",tatze,cimmanon
1637,2015-02-13 21:33:07,"@cimmanon is correct. `.mr++` is not a valid selector.
",nex3,cimmanon
1636,2015-02-13 21:32:04,"@davidkpiano explained this well.
",nex3,davidkpiano
1631,2015-02-14 16:02:47,"@nex3, apologies i should have updated this.  It is entirely driven by an underlying issue with the RB-FSevent gem.   I don't have enough knowledge to provide anything definitive on this, but it seems that RB-FSevent sometimes cannot handle camelCasedDirNames.   Once I moved the contents to another directory, without caps in the name, I had no issues. 
",crispen-smith,nex3
1627,2015-02-06 15:52:24,"@HugoGiraudel is right. The `&` character in Sass (at least in the latest versions), in your usage, is treated as a variable.



To fix your code, you can just concatenate: `div#{&+__child}`
",davidkpiano,HugoGiraudel
1620,2015-11-11 19:47:40,"@chriseppstein want to give an example of how this might look in Ruby Sass, so that people can maybe try and do it?
",hcatlin,chriseppstein
1619,2016-09-29 10:29:45,"@nex3 I am just curious if you could provide a link/reference that `>>>` will be pulled from the spec. All the material I can find states that `/deep/` will be replaced by `>>>`

https://drafts.csswg.org/css-scoping/
",aronallen,nex3
1608,2015-01-20 18:43:04,"@Snugug It is similar in that we need to standardize the configuration format. But it's orthogonal to this issue.
",chriseppstein,Snugug
1608,2015-01-30 23:31:01,"@nex3 Sass extensions are currently a major impediment to making Sass projects portable across implementations. We _need_ to provide a way for people to have a sass file that can run reliably across several implementations even if that sass file using host-language extensions. Without mitigation, we still have the schism we're trying to avoid in the community. You only addressed option #2 here and I agree that Lua or something else is probably premature. Instead, my preference right now is to have a standard way of making several host implementations of a sass extension work together. 
",chriseppstein,nex3
1608,2015-02-09 23:28:16,"@nex3 I suppose it would just be a ruby file that defines functions. those would be class_eval'd into a module and that would get included into the evaluation context based on finding it with `@use`. in terms of lookup, I guess we'd need an extension load path or to just piggy back the sass load path for this.
",chriseppstein,nex3
1605,2015-01-19 17:08:35,"@StefanoRausch, it's a really bad idea to use block comments to document source code. Every user of your library will have his CSS bloated with your documentation irrelevant to his website.
",lolmaus,StefanoRausch
1605,2015-01-19 18:03:42,"I'm with you @lolmaus ‚Äî just giving a ( simple ) solution. It's up to the developer :wink: 
",StefanoRausch,lolmaus
1603,2015-01-22 17:43:04,"@davidkpiano To answer those questions:
- Not defined == null / error
- Defined after `#container` == I'm not sure what you mean - it wouldn't make a difference
- Does not have a `width` property set == null / error
- Changes its `width` property later == It would behave the same as a variable would

I disagree that this would be impossible because it's basically just a variable. I'd opt for a function looking syntax though, because using a selector as a value seems weird to me.



All that said, this is pretty much what variables were made for. If it's really important, you should give it a name and you could use it anywhere.
",whaaaley,davidkpiano
1603,2015-01-24 12:44:26,"@cimmanon 

I don't think media queries are big deal in this case. Values defined inside them are intended only for that particular case so only properties defined outside media queries should be copied. If no properties are defined an exception should be thrown.

Properties that are defined several times may look a bit confusing at first but since you expect the property value to be the same as the source, I think it would make more sense to copy all the properties.



so after compiling .bar would become:


",levani,cimmanon
1602,2015-01-29 04:30:47,"@nex3 Sorry for the slow reply.  I agree that I would prefer consistent behavior with 1 or multiple files, but I did not mean to suggest that this behavior should be changed.  I merely wanted to document this behavior.  If you'd rather update the behavior, that's of course fine by me (not that it's my call).

Is there anything I can do to help push thing along?  I could submit a PR for the actual code change, but that looks like a small component of deprecating the feature... Thoughts?
",danfinnie,nex3
1602,2015-02-04 01:10:41,"@nex3 I took a stab at this today.  I noticed that your deprecation noticed mentioned directories.  My interpretation of this was anytime you passed multiple files on the command line, whether because you specified a directory or because you listed 2 files explicitly.  Is this how you're seeing it?
",danfinnie,nex3
1599,2015-03-27 22:28:31,"@nex3 any ideas when this might be fixed?
",lifeiscontent,nex3
1599,2016-12-14 01:21:25,"@ArmorDarks When you write `A {@extend B}`, that means ""all elements that match A should be styled as though they also matched B"". In the example above, that translates to ""all elements that match `.c` should be styled as though they also matched `.a.b`"". If an element matches `.a.b`, that means it also matches both `.a` and `.b` individually, so `.c {@extend .a.b}` should mean the same thing as `.c {@extend .a; @extend .b}`.",nex3,ArmorDarks
1598,2015-01-28 15:59:27," :-1:  
@nex3 Not saying not true ‚Äì but in the case of url the following does work and is a major FTW when it comes to deployment on shifting path structures.¬† 


",jakob-e,nex3
1598,2015-01-31 02:21:18,"@jakob-e that redefinition isn't going to work consistently, though... it depends on the specific details of how each `url()` call is parsed, which is inconsistent and hard for users to understand. Wouldn't it be clearer if you renamed it to something like `scoped-url()`?
",nex3,jakob-e
1598,2015-11-07 00:34:33,"@nex3,

This is so annoying. If we allow importing of CSS files in #556 (and already with @chriseppstein's https://github.com/chriseppstein/sass-css-importer I don't see why you wouldn't be able to override `url()`.

I'm importing a 3rd-party CSS file (that I don't want to modify), but it has relative urls to the assets. Without being able to override the `url()` function (and reset it after import preferably), I have to modify the 3rd party CSS. :(
",davidbarratt,nex3
1598,2015-11-13 20:48:37,"@davidbarratt That wouldn't work anyway. For starters, as I mentioned above, pure-CSS `url()` functions are parsed as string literals‚Äîthey never go through the function-call logic under any circumstances. Also, importing a CSS file imports is _as CSS_, not as SCSS‚Äîit doesn't have access to any SCSS features, including functions.
",nex3,davidbarratt
1597,2015-01-17 14:22:13,"@Stephn-R Here's the Gruntfile
https://gist.github.com/jawittdesigns/da37c9335808234a3291

@nex3 How do you get a stack trace
",jawittdesigns,Stephn-R
1597,2015-01-17 14:22:13,"@Stephn-R Here's the Gruntfile
https://gist.github.com/jawittdesigns/da37c9335808234a3291

@nex3 How do you get a stack trace
",jawittdesigns,nex3
1596,2015-01-16 10:47:24,"Hey @Stephn-R, you're missing the point here.

You're right that @nex3 added removal of duplicate classnames as an optimization. The `.foo.foo` selector indeed targets the same elements as `.foo`.

But @justinryder has pointed out that a `.foo.foo` CSS selector has specificity different from `.foo`, and reducing `.foo.foo` to `.foo` may actually change the looks and/or layout of the page.

Consider this [example](http://sassmeister.com/gist/6fd6837ebacf730e3f57):



A `<div class='foo'></div>` element will be red. But if you replace `.foo.foo` with `.foo` in Sass, then the element will be blue.

This is a neat technique to override the default looks of elements styled with third-party CSS, without caring for the order of imports.

@nex3, looks like this feature was intended as an optimization to remove redundancy but it actually modifies CSS semantics, huh?
",lolmaus,Stephn-R
1596,2015-01-16 10:47:24,"Hey @Stephn-R, you're missing the point here.

You're right that @nex3 added removal of duplicate classnames as an optimization. The `.foo.foo` selector indeed targets the same elements as `.foo`.

But @justinryder has pointed out that a `.foo.foo` CSS selector has specificity different from `.foo`, and reducing `.foo.foo` to `.foo` may actually change the looks and/or layout of the page.

Consider this [example](http://sassmeister.com/gist/6fd6837ebacf730e3f57):



A `<div class='foo'></div>` element will be red. But if you replace `.foo.foo` with `.foo` in Sass, then the element will be blue.

This is a neat technique to override the default looks of elements styled with third-party CSS, without caring for the order of imports.

@nex3, looks like this feature was intended as an optimization to remove redundancy but it actually modifies CSS semantics, huh?
",lolmaus,justinryder
1596,2015-01-17 02:49:05,"@justinryder is right that this violate's Sass's specificity guarantees, as strange as the input seems.

@chriseppstein that would be next to impossible to dedup without completely tearing out every optimization Sass does here.
",nex3,chriseppstein
1596,2015-01-17 02:49:05,"@justinryder is right that this violate's Sass's specificity guarantees, as strange as the input seems.

@chriseppstein that would be next to impossible to dedup without completely tearing out every optimization Sass does here.
",nex3,justinryder
1596,2015-01-17 05:51:35,"Thank you @lolmaus for the clarification and @chriseppstein for the example. Those are completely valid reasons for having a repeated selector like that.
",Stephn-R,chriseppstein
1596,2015-01-17 05:51:35,"Thank you @lolmaus for the clarification and @chriseppstein for the example. Those are completely valid reasons for having a repeated selector like that.
",Stephn-R,lolmaus
1594,2016-11-11 10:10:52,"@iErik I agree! But for SASS maps in particular in indented syntax, I think its quite damaging to the readability of the code. Its good that you can still use them in separate files with SCSS syntax, but maintaining two different syntaxes just doesn't feel right.
",Gespinha,iErik
1593,2015-01-13 13:16:15,"Sorry @cimmanon. I did a search of issues and didn‚Äôt see anything, so I went ahead and created this.
",lachlanjc,cimmanon
1591,2015-01-16 22:54:41,"I believe I fixed this issue @chriseppstein by changing the variable name in the keyframes to use interpolation. Terribly sorry if this wasted your time. This requirement must have changed since the latest version of Sass.
",NomNomCameron,chriseppstein
1590,2015-01-13 23:03:48,"Makes sense. Thanks for the explanations @chriseppstein & @HugoGiraudel 
",una,HugoGiraudel
1590,2015-01-13 23:03:48,"Makes sense. Thanks for the explanations @chriseppstein & @HugoGiraudel 
",una,chriseppstein
1588,2015-01-08 17:01:41,"@cimmanon : I Missed an `}` at input example. Pls paste on http://sassmeister.com/, exactly same output

@jakob-e : isn't about compile, it's an wrong output(in my opinion) without any alert/throw
",mateuspv,jakob-e
1588,2015-01-08 17:01:41,"@cimmanon : I Missed an `}` at input example. Pls paste on http://sassmeister.com/, exactly same output

@jakob-e : isn't about compile, it's an wrong output(in my opinion) without any alert/throw
",mateuspv,cimmanon
1588,2015-01-08 18:34:39,"@mateuspv My point was it would require Sass to evaluate **content (and order)** and IMO that would be wrong. If you move a { } to the top everything is fine.         


",jakob-e,mateuspv
1583,2015-05-11 18:34:20,"@HugoGiraudel there isn't a plan to change that behavior. `hello world` is a list, not a string, so it's not a valid value for `quote()`.
",nex3,HugoGiraudel
1582,2015-01-08 18:43:45,"@lolmaus yes. I don't see why it shouldn't.
",chriseppstein,lolmaus
1582,2015-01-08 18:47:36,"@chriseppstein I know ‚Äì¬†it was just a bit of crazy thinking :)
",jakob-e,chriseppstein
1582,2015-01-09 17:00:19,"@nex3 I agree with your comments about the data format and look forward to discussing what we think that should look like. I have a few ideas that I can propose as a starting point for discussion but nothing I am wedded to.

Regarding the state of the captured data, the only thing that makes sense to me is that it is fully resolved CSS from the lexical scope of the include. At the point that this content is placed into the stylesheet again, they can use Sass constructs like `&` and `@at-root` to manipulate the new context of the content. Reproducing Sass code like you mention is exactly what mixins are good for and if we ever needed such a construct it would probably be some sort of lambda equivalent for mixins.
",chriseppstein,nex3
1582,2015-02-17 18:18:36,"@nex3 



Obviously, in this simplified example there's no need for the component indirection, but you can imagine that the component system allows precision tweaks to registered components in different contexts or themes that makes it necessary to manipulate the evaluation time result of the mixin as data before outputting it.
",chriseppstein,nex3
1582,2015-03-03 22:22:57,"@nex3, yes, but we need to intercept the results of running that mixin to merge it with other information in our theming/component system. We need the results of the mixin _as data_.
",chriseppstein,nex3
1582,2015-03-04 09:12:55,"Here's a slightly more complex example that might demonstrate the idea @chriseppstein and I have tossed around...



To be fair, the above example can be achieved purely using the `capture-mixin-output` mixin mentioned above, but it means we're now limited to only using the result within a mixin context. That is, we couldn't use `get-component-styles` as a function to do other data manipulation in another function call.
",eoneill,chriseppstein
1582,2015-12-03 15:26:33,"@helarqjsc Things move slowly here in Sasslandia. We close issues when we decide not to do them. Right now, what we need is a design for how to represent the css abstract syntax tree as Sass values. That design needs to be very flexible, and also very user friendly.

Then what we need is an API that is efficient at mutating that AST -- all of the current Sass APIs really are quite bad at mutating deeply nested data structures. This API might be AST specific or it might just be optimizations for existing data types. It's not clear what the best way to handle this is. I can imagine a few different APIs and approaches to capturing the AST.

Then we can start writing code :) This is probably too big of a feature to make it into Sass 4.0 (a new module system is our top ""big feature"" priority right now) so it's hard to imagine this landing in the next 6 months.
",chriseppstein,helarqjsc
1581,2015-01-05 12:59:36,"Thanks @cimmanon!
",ankur-goel,cimmanon
1574,2015-01-05 23:58:05,"@Snugug We do support bare words, but bare words that are colors are colors.
",chriseppstein,Snugug
1574,2015-01-06 01:46:21,"@chriseppstein Yup, I think that's what I meant to say in some way.
",Snugug,chriseppstein
1573,2014-12-25 08:52:15,"There is nothing wrong about mixins and I know about autoprefixer. But there are several scenarios related to property support.

Autoprefixer is great to add every needed prefix but a different solution is needed to add rem unit support in old browsers. If sass let us attach a hook at any property, autoprefixer is not logger need it.



I think is nice to write standard css and fix it (as autoprefixer does or JavaScripts polyfills do). Another nice feature of this approach is that when the property mixin in not required anymore, just delete it, with no other changes.

@lolmaus, could you be more specific on: ""What you suggest is wrong in several ways.""
",victorherraiz,lolmaus
1573,2014-12-25 12:37:13,"This request is not for flexbox but for a new language feature thats allow to attach a mixin-like behaviour to a CSS property. This is not a mixin replacement.

@cimmanon, Autoprefixer exists for a reason but you are the one who choose if you want to use it or not. if you use rem units,  woff/woff2 fonts, svg backgrounds...  you have to use fallbacks at some point and  this feature could help us. You could still have exceptions with ""!property flag"".

It could also help you to detect bad property usage (or just undesired) and deliver warn messages at compilation time.

It could help in my projects but is my humble opinion.
",victorherraiz,cimmanon
1573,2014-12-25 12:59:19,"@victorherraiz That's just it, I don't _want_ Autoprefixer.  Never did and never will.  Clearly you do, because you're the one asking for it to be added to Sass.
",cimmanon,victorherraiz
1573,2014-12-26 00:23:59,"@Stephn-R, I would like to know the reasons for your decision.  
",victorherraiz,Stephn-R
1573,2014-12-26 14:28:42,"@Snugug, you are right. Mixins can do this right now. But what is wrong with the following CSS:



If we have to support old browsers (e.g. IE8), we have to include a fallback to px or other unit.  We could add a mixin, for example, to add that support. That is going change all the selectors that use rem units. When the support for old browsers drops you end up with a mixin that do nothing but write the same it was written in the original CSS.

Polyfills address these problems attaching fallbacks and behaviours to the missing features. I would like to have the same tools in SASS language for properties. But it is only my opinion.
",victorherraiz,Snugug
1573,2014-12-26 15:32:08,"@Snugug, will your suggestion fall back to rendering `.example { display: flex };` if the `flex` mixin was not defined?
",lolmaus,Snugug
1573,2014-12-26 15:41:31,"@Snugug, both examples share the same problem: a property with a value that is not fully supported. Stylus, for example, does not have the ""!property"" flag, every property inside a transparent mixin is a real one. 

My flex box example is really out of date, I've been working for projects that has to support a ""stupid"" amount of browsers. I am getting a little rusty lately :smile: 
",victorherraiz,Snugug
1573,2014-12-26 15:59:29,"My point here is that ultimately what's being discussed is a transparent syntax for mixins, something specifically discussed in #366, making this a duplicate of that and not warranting an entirely new directive and flag.

@lolmaus that syntax would not, but if you read #366 there's discussion on it and that's a place to have that discussion. I personally dislike the Hell out of the transparent syntax as it adds a lot of really hard to debug abstraction.

> On Dec 26, 2014, at 10:41 AM, victorherraiz notifications@github.com wrote:
> 
> @Snugug, both examples share the same problem: a property with a value that is not fully supported. Stylus, for example, does not have the ""!property"" flag, every property inside a transparent mixin is a real one.
> 
> My flex box example is really out of date, I've been working for projects that has to support a ""stupid"" amount of browsers. I am getting a little rusty lately 
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,Snugug
1573,2014-12-26 15:59:29,"My point here is that ultimately what's being discussed is a transparent syntax for mixins, something specifically discussed in #366, making this a duplicate of that and not warranting an entirely new directive and flag.

@lolmaus that syntax would not, but if you read #366 there's discussion on it and that's a place to have that discussion. I personally dislike the Hell out of the transparent syntax as it adds a lot of really hard to debug abstraction.

> On Dec 26, 2014, at 10:41 AM, victorherraiz notifications@github.com wrote:
> 
> @Snugug, both examples share the same problem: a property with a value that is not fully supported. Stylus, for example, does not have the ""!property"" flag, every property inside a transparent mixin is a real one.
> 
> My flex box example is really out of date, I've been working for projects that has to support a ""stupid"" amount of browsers. I am getting a little rusty lately 
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,lolmaus
1573,2014-12-26 16:19:17,"@Snugug, I do not like the idea of every single mixin could be use as a transparent one (e.i. Stylus). That is why the new syntax/feature request and also a new thread to discuss it. 

In my opinion, we are having the same debug problems with autoprefixer and the best solution I could imagine at the moment to fully control the CSS output and debug info for fallbacks is a mixin.
",victorherraiz,Snugug
1573,2014-12-28 11:55:47,"@HugoGiraudel, SASS already has functions. Not long ago, I remember a developer wondering: Where do we have the ""calc"" function?. I agree that transparent mixins could be use for 'evil' but, in my humble opinion, SASS should not protect developers from their own mistakes. 
",victorherraiz,HugoGiraudel
1573,2015-02-06 13:10:40,"@chriseppstein and @Snugug, many thanks for your replies :+1: 
",victorherraiz,Snugug
1573,2015-02-06 13:10:40,"@chriseppstein and @Snugug, many thanks for your replies :+1: 
",victorherraiz,chriseppstein
1572,2015-01-10 22:10:14,"@chriseppstein This seems to go against the [W3C spec for distance units](http://www.w3.org/TR/css3-values/#lengths) which states:

> ...for zero lengths the unit identifier is optional (i.e. can be syntactically represented as the <number> ‚Äò0‚Äô).

It seems unnatural to put a unit for a zero value, and I feel that expressions should allow zero values to have optional unit identifiers, at least for distance values.


",davidkpiano,chriseppstein
1572,2015-02-07 15:51:53,"@chriseppstein Is there anything you would like to add regarding @davidkpiano's comment? I am asking because I have [a pending issue about this on Sass Guidelines](https://github.com/HugoGiraudel/sass-guidelines/issues/74).
",HugoGiraudel,chriseppstein
1572,2015-02-07 15:51:53,"@chriseppstein Is there anything you would like to add regarding @davidkpiano's comment? I am asking because I have [a pending issue about this on Sass Guidelines](https://github.com/HugoGiraudel/sass-guidelines/issues/74).
",HugoGiraudel,davidkpiano
1570,2014-12-22 18:00:20,"@lolmaus @Snugug I didn't notice that, now i see what sass is doing. The behaviour was not straightforward for me so I didn't check the invalid css. Thanks!
",maxgalbu,Snugug
1570,2014-12-22 18:00:20,"@lolmaus @Snugug I didn't notice that, now i see what sass is doing. The behaviour was not straightforward for me so I didn't check the invalid css. Thanks!
",maxgalbu,lolmaus
1564,2015-01-05 23:44:13,"@nex3, you understand it wrong. I do already have a lot of existing css code, and I want to wrap it around, namely put that code somewhere, not wrap inner of every selector.
",nazar-pc,nex3
1563,2015-01-09 17:29:14,"There are problems with the Sass cache file naming on windows. As seen here: https://github.com/Compass/compass/issues/1791. @nex3 I consider this a Sass bug even though it's mostly been compass users bumping into it. Though, I'm not sure what the fix should be. Maybe on windows we should mangle the cache file names more?
",chriseppstein,nex3
1563,2015-02-11 13:17:55,"Thanks for the info @chriseppstein The _removed_ is David so the paths is C:/Users/David/AppData/Local/Temp... 
",davidtme,chriseppstein
1563,2015-03-06 00:19:50,"@chriseppstein This limitation has actually been removed some 15 years ago in Windows 2000. Paths can be 65535 characters long (or bytes, not sure), when using the ""new"" APIs.
",thany,chriseppstein
1563,2015-05-16 08:17:47,"@thany, that is NTFS feature. The `260` characters limitation persists in Windows till date. Win32API imposes extra constraints over what NTFS capabilities. See docs: http://msdn.microsoft.com/en-us/library/aa365247.aspx:

> ##### Maximum Path Length Limitation
> 
> In the Windows API (with some exceptions discussed in the following paragraphs), the maximum length for a path is MAX_PATH, which is defined as 260 characters. 

Note the exceptions being that `//?/` prefix thingy which is not convenient in _most_ of the cases, because then everything associated would need to support utf-16 paths. Such addresses bypass win32 and directly handled by FileSystem (which does not come without side-effects either). More in these (quasi-official) comments: https://github.com/Microsoft/msbuild/issues/53#issuecomment-91359834. 

NPM version of this problem: https://github.com/npm/npm/issues/3697. 
Moreover, see [this feedback](https://social.technet.microsoft.com/Forums/en-US/e84bb703-27df-4966-bdf1-2b5760c71a1f/filesystem-path-too-long?forum=WinPreview2014Feedback) for upcoming Windows 10.  
",am11,thany
1562,2015-01-09 17:24:28,"In 3.4.5 @nex3 changed the watcher to observe the current working directory (Commit e68d72b8). My guess is that your current working directory has a lot of files or maybe it includes network shares as mentioned by @Stephn-R. That change addressed issues #1393 and #1411 so if we were to revert this, we'd need to find other ways to fix those.
",chriseppstein,Stephn-R
1562,2015-01-17 03:31:19,"I suspect @chriseppstein is correct. I don't think this is making Sass unusable for all Windows developers‚Äîwe would have heard much more about it if so‚Äîwhich suggests that it's specific to your configuration, and likely the size of your working directory. In that case there's not much we can do.
",nex3,chriseppstein
1562,2016-01-27 13:19:33,"Had the same problem [ on Windows ], @ideeaco solution works for me.
",narayanwaraich,ideeaco
1562,2016-02-11 06:05:24,"great..@ideeaco solution work for me (on windows) 
",arpanpatel,ideeaco
1561,2014-12-18 16:31:07,"@HugoGiraudel, yea that is what comments are for.

I guess I was asking a mix of semantic naming conventions and if there would be room or a need for something like JavaDoc but for Sass.
",allejo,HugoGiraudel
1561,2014-12-18 16:37:16,"@allejo, i asked @HugoGiraudel to comment on this because Hugo is building JavaDoc for Sass: https://github.com/SassDoc/sassdoc

Currently SassDoc aims at documenting functions API. I hoped Hugo would come up with a suggestion for documenting variables.
",lolmaus,HugoGiraudel
1561,2014-12-18 16:37:16,"@allejo, i asked @HugoGiraudel to comment on this because Hugo is building JavaDoc for Sass: https://github.com/SassDoc/sassdoc

Currently SassDoc aims at documenting functions API. I hoped Hugo would come up with a suggestion for documenting variables.
",lolmaus,allejo
1561,2014-12-18 16:40:40,"Actually SassDoc is perfectly able to document variables, and for a while
now. Functions, mixins and placeholders as well. And version 2 is coming in
early January for much more coolness.

Le Jeu 18 D√©c 2014 17:37, Andrey Mikhaylov (lolmaus) <
notifications@github.com> a √©crit :

> @allejo https://github.com/allejo, i asked @HugoGiraudel
> https://github.com/HugoGiraudel to comment on this because Hugo is
> building JavaDoc for Sass: https://github.com/SassDoc/sassdoc
> 
> Currently SassDoc aims at documenting functions API. I hoped Hugo would
> come up with a suggestion for documenting variables.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1561#issuecomment-67514006.
",HugoGiraudel,HugoGiraudel
1561,2014-12-18 16:40:40,"Actually SassDoc is perfectly able to document variables, and for a while
now. Functions, mixins and placeholders as well. And version 2 is coming in
early January for much more coolness.

Le Jeu 18 D√©c 2014 17:37, Andrey Mikhaylov (lolmaus) <
notifications@github.com> a √©crit :

> @allejo https://github.com/allejo, i asked @HugoGiraudel
> https://github.com/HugoGiraudel to comment on this because Hugo is
> building JavaDoc for Sass: https://github.com/SassDoc/sassdoc
> 
> Currently SassDoc aims at documenting functions API. I hoped Hugo would
> come up with a suggestion for documenting variables.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1561#issuecomment-67514006.
",HugoGiraudel,allejo
1560,2014-12-17 10:56:36,"@HugoGiraudel, here's a counter-argument: Sass aims not to derive from CSS standard, and CSS does use `/` as part of a property. 
",lolmaus,HugoGiraudel
1560,2014-12-21 20:17:02,"@thany which is it now?  Sass is throwing an error because you're doing something invalid (division with incompatible units) or Sass is generating invalid CSS?  It can't be doing both.
",cimmanon,thany
1560,2015-01-12 10:37:56,"What do you consider to be ""semantically valid Sass""? Is it what you expect it to be?

From my point of view, ""syntactically valid Sass"" is what @nex3 and @chriseppstein determine to be.
",lolmaus,chriseppstein
1560,2015-01-12 12:13:26,"@thany Sass isn't generating invalid CSS, it is raising an error telling you that you f'ed up.  How the division operator behaves is well documented.

http://sass-lang.com/documentation/file.SASS_REFERENCE.html#division-and-slash
",cimmanon,thany
1551,2017-01-11 08:36:40,"@nex3 Just to chime in (since im am also experiencing the same problem): The problem still persists even if using the current version of jruby (9.1.6.0). Our plugin definition in maven looks like this:


I agree that this is a jruby bug - buuut: Some digging around showed that (at least with the current version) it might be related to the fact that the output path is not existing. The error reads as follows:

If I now go ahead an manually create ``target\generated-resources\saas\resources\default\css`` the problem goes away. Perhaps that might be a feasible workaround?


",sebcramer,nex3
1548,2014-12-05 20:56:59,"This is unexpected behavior, but I agree with @mgreter that breaking backwards-compatibility here would be bad. If we were to change the behavior, it would be very difficult to do a deprecation period. I'll just change the docs.

> This spec seems pretty counterintuitive as all `rand` functions I normally use include the upper boundary.

@mgreter I find this surprising. Ruby, C#, and Java all exclude the upper bound.
",nex3,mgreter
1548,2014-12-06 01:12:18,"@nex3: just checked the C, Perl and PHP implementation and they include the upper bound for `rand`:
http://www.w3schools.com/php/func_math_rand.asp
`If you want a random integer between 10 and 100 (inclusive), use rand (10,100).`
http://man7.org/linux/man-pages/man3/rand.3.html
`returns a pseudo-random integer in the range 0 to RAND_MAX inclusive`
But I also checked c++ `uniform_real_distribution` which seems to exclude the upper bound!
`rand(x | a, b) -> 1/(b-a) -> a <= x < b`
",mgreter,nex3
1547,2014-12-02 15:12:02,"Correct me if I am wrong @HugoGiraudel but I believe that this is not an issue about whether an ""applicator"" is needed or not, the issue is with how the `@include` directive was designed.

It was not originally designed for those types of operations. Plus, there would be a serious concern with scope. For example, if you did the following:



These variables would exist outside the scope of the initial Sass compilation sequence and be rendered useless. 

HOWEVER, I would consider just using something like a **_variables.scss** file to import. This is what I use and have found it very helpful.

Reference: http://thesassway.com/beginner/how-to-structure-a-sass-project
",Stephn-R,HugoGiraudel
1547,2014-12-02 16:08:07,"@Stephn-R, this has nothing to do with variables, and your suggested output it invalid CSS.
",lolmaus,Stephn-R
1547,2014-12-02 21:55:11,"@lolmaus, that is the exact example you provided

Perhaps you meant something like this?

SCSS:



CSS:


",Stephn-R,lolmaus
1547,2014-12-03 22:18:10,"@lolmaus I agree that this way is still bulky. I think a better solution would be what's been mentioned in #366 which would make includes less bulky and more CSS looking. Then these small helper mixins wouldn't be almost equally as painful to use and look at as it would be to just write it out by hand.

Then the proposed:



Could possibly be turned into a mixin with this syntax:



Which isn't much worse, but still much better than:


",whaaaley,lolmaus
1539,2014-11-28 12:32:30,"@nex3 i just wanted to encapsulate all styles for h1 inside it without duplicating - it was just PoC. I was wondering if there is a possibility of writing SCSS without duplicates.
",kl3ryk,nex3
1535,2014-11-25 10:04:40,"Thanks @nex3, this is my first sass project, so useful to see what you can do with it. Will keep your example as a reference.
",SWGFL,nex3
1530,2014-11-19 21:07:28,"@nex3 I feel like using index as a solution to this is unclear and relies on too specific a behavior of another function.

As a writer/reader of sass, it makes the code less accessible and readable. Also this behavior is not very documented and likely leads to authors reinventing the wheel when faced with this issue.
",whmii,nex3
1529,2014-11-19 13:20:20,"Hi, @nex3: Thanks for the quick reply! However, I don't see anything in #1527 that addresses the error I'm seeing or offers me a solution. I'm trying to restore my Sass workflow to working order. Please reopen this issue or direct me to a solution I can implement? Thanks!
",circa1977,nex3
1529,2014-11-19 19:39:42,"@circa1977  - You can simply downgrade and freeze your Listen gem version, see: https://github.com/guard/listen/issues/275#issuecomment-63697308
",e2,circa1977
1528,2014-11-18 21:08:39,"Ok, thanks! Just wanted to make sure I wasn't doing something wrong.

On Tuesday, November 18, 2014, Natalie Weizenbaum notifications@github.com
wrote:

> Yes, this is expected. Sass follows other UNIX commands in this regard;
> you'll see the same behavior with cp, for example.
> 
> --update works differently because it's often responsible for recreating
> an entire directory tree.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1528#issuecomment-63543984.

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowski
1528,2014-11-22 02:49:09,"@robwierzbowski I think you posted that in the wrong thread
",nex3,robwierzbowski
1527,2014-11-25 01:51:36,"@e2 Before you address the code review comments, we should decide whether we want to pull this out into a separate gem. 4c003d3c67237dfebb781dec96050e833579ebed will get Sass working for now, so the added complexity from this PR may be better spent towards a separate reusable gem.
",nex3,e2
1527,2014-11-25 02:04:05,"@nex3 - yes I considered that too, I'm just overloaded with bugfixes right now - so the overhead of a new gem will be greater (considering I need to rethink some points), while I'm sure a lot of people would be happy to get this fixed right now. 

I'll get the review points addressed soon, so that's no problem on my side - no matter how happy I'd be to skip merging this and have a new `listen-compat` gem ready. Unfortunately, I strongly believe bugfixes have a higher priority than inter-gem refactorings.
",e2,nex3
1521,2014-11-13 12:52:40,"@Snugug I totally undestand the repercussions of this. That's why I assumed the idea might get rejected at first. But bear with me for sec.

Let's consider the part of your answer about permutations. Cannot implementation be chosen to be conservative in this regard and thoughful of a way to minimize the amount of generated media queries? I mean, look, the `@extend` directive. It may also at first seem prone to expand your code with all permutations but it doesn't so much, right? So my point is when a though put into this a way can be found.

As to using the mixins.. 
Let's consider a common - and real - usage scenario. I bower-install a SASS-based package, say, Zurb Foundation (I already mentioned it). Okay, they provide variables to customize the look, say, height of a top bar. But they use only one(!) height variable for this. A single height for three visual variations (small, medium, large). So _without_ altering the Foundation code or overwriting parts of their code, it seems, I cannot achieve my goal (and my goal is to have varying heights based on the resolution). I cannot use mixins, for it means changing _thier_ code.

The way out seems to be in split-variables. Can you see my point now?
",AndrewRevinsky,Snugug
1521,2014-11-13 23:55:34,"@Snugug Thanks for the suggestions, the links, and the code snippet. (A link was a waste of your energy, though. 'Cos ""I've been there, done that"" before writing here. Let's hope it'll help educate others.)
So.. 
Regarding your concern that since a variable is used in many places it may break something. But this is exactly what I am after. See, there's so many places a variable might be used in (esp. when we talk of 3rd parties') that it's just a nuisanse to embark on code hunting for it, recreate fixtures (sometimes we need to recreate contexts) in your code, and there will still be lots of chances that you've overlooked something. One bullet in form of a _split variable_ (I cling to the term I invented) might just accomplish a hectic task.

Regarding the code you supplied. Thanks again. It has a caveat. It relies on the assumption there's a module involved that generates styles for a certain block. However there might not be a separate module. And besides, is it feasible to re-run the entire module when I already indicrectly included it by referencing 'foundation.scss' (I use it here as an example, you understand)? What will be the overhead in terms of over-populated CSS code? 

Besides, concerning your argument on mixins. I see it as a hack in my use case. What is wrong in requesting a language feature? Like in any language, doesn't a certain expected task or a solid usage scenario warrant a feature? (Introduction of a new keyword, reuse of old ones, etc.?) I mean, there are tons of examples. And I believe I sketched a good, reasonable use case to try and convince people that what currently gives a warning/error during compilation might actually be implemented to be a great feature and to allow to accomplish a task with less amount of code. 

If there's a fear that this feature will become over-zealous, you can always tame it with compile-time options.
",AndrewRevinsky,Snugug
1521,2014-11-14 00:01:06,"@cimmanon Thanks.
Isn't it about time to start thinking there may be something in it, if _""the question pops up on SO often enough""_?

Adding extra styling sometimes isn't an easy option. I believe SASS/SCSS was created to save people from complexity giving them means to style with less effort. No? (Please also read my reply to @Snugug.) 
",AndrewRevinsky,Snugug
1521,2014-11-14 00:01:06,"@cimmanon Thanks.
Isn't it about time to start thinking there may be something in it, if _""the question pops up on SO often enough""_?

Adding extra styling sometimes isn't an easy option. I believe SASS/SCSS was created to save people from complexity giving them means to style with less effort. No? (Please also read my reply to @Snugug.) 
",AndrewRevinsky,cimmanon
1518,2016-01-04 18:22:35,"@tobymackenzie Can you provide a demo on codepen or something similar showing how these representations are treated different by a browser?
",chriseppstein,tobymackenzie
1512,2015-03-07 17:53:53,"I just had a look at this and I actually agree with @xzyfer.

Take this example:



Ruby Sass (3.4.12):



Libsass:



IMO the output of Ruby Sass changes the semantics. The original expression would only evaluate true if `baz: baz` is true. In the Ruby Sass output, the whole expression is also true if only `foo: foo` is true. Either the semantics of css for `and`/`or` is strange or am I missing something else? IMO `and` has always higher precedence than `or` operations!? Although I couldn't find anything specific in the [specs](http://dev.w3.org/csswg/mediaqueries/#mq-syntax).
",mgreter,xzyfer
1512,2015-03-11 00:31:32,"Actually I'm not sure with whom you agree (you didn't clearly state that). But let me explain it a little more. The example given by @xzyfer is unfortunately not optimal, since the `and` comes before the `or`, and in this situation the parentheses don't make a difference, since the `and` will be evaluated first (as it should to its precedence). But this changes if you have the `or` first. The key here is that `and` has a higher precedence than `or`, so the parentheses are needed if we want to give `or` the highest precedence in the expression (and ruby sass seems to remove exactly these parentheses).

Take this haskell example:



Or in Perl



I gave this example in my post above:



Which ruby sass changes to:



I actually created a test, and now comes the clue: It seems that the specs @cimmanon mentioned are implemented pretty strict, so that something like the following will always be ignored:



So take this example:



This actually shows `works` in every browser I tested (firefox, chrome, opera). That should prove that removing the parentheses actually does change the behavior, although in a different way than I expected!
//CC @nex3 @chriseppstein 
",mgreter,nex3
1512,2015-03-11 00:31:32,"Actually I'm not sure with whom you agree (you didn't clearly state that). But let me explain it a little more. The example given by @xzyfer is unfortunately not optimal, since the `and` comes before the `or`, and in this situation the parentheses don't make a difference, since the `and` will be evaluated first (as it should to its precedence). But this changes if you have the `or` first. The key here is that `and` has a higher precedence than `or`, so the parentheses are needed if we want to give `or` the highest precedence in the expression (and ruby sass seems to remove exactly these parentheses).

Take this haskell example:



Or in Perl



I gave this example in my post above:



Which ruby sass changes to:



I actually created a test, and now comes the clue: It seems that the specs @cimmanon mentioned are implemented pretty strict, so that something like the following will always be ignored:



So take this example:



This actually shows `works` in every browser I tested (firefox, chrome, opera). That should prove that removing the parentheses actually does change the behavior, although in a different way than I expected!
//CC @nex3 @chriseppstein 
",mgreter,xzyfer
1512,2015-03-11 00:31:32,"Actually I'm not sure with whom you agree (you didn't clearly state that). But let me explain it a little more. The example given by @xzyfer is unfortunately not optimal, since the `and` comes before the `or`, and in this situation the parentheses don't make a difference, since the `and` will be evaluated first (as it should to its precedence). But this changes if you have the `or` first. The key here is that `and` has a higher precedence than `or`, so the parentheses are needed if we want to give `or` the highest precedence in the expression (and ruby sass seems to remove exactly these parentheses).

Take this haskell example:



Or in Perl



I gave this example in my post above:



Which ruby sass changes to:



I actually created a test, and now comes the clue: It seems that the specs @cimmanon mentioned are implemented pretty strict, so that something like the following will always be ignored:



So take this example:



This actually shows `works` in every browser I tested (firefox, chrome, opera). That should prove that removing the parentheses actually does change the behavior, although in a different way than I expected!
//CC @nex3 @chriseppstein 
",mgreter,cimmanon
1512,2015-03-11 03:17:30,"@mgreter None of that validates, not the ""or"" operator, nor the nested parentheses with media queries.  The logical ""or"" and nested parentheses are only features of feature queries.  The logical ""or"" is done with a comma in media queries.


",cimmanon,mgreter
1512,2015-03-11 10:47:35,"@cimmanon please re-read my posts above. Parentheses work in `@supports` rules, while they don't in `@media` (and the original report is only about `@supports`). That's why removing the parentheses for `@supports` rules is an actual bug. IMO I cannot provide more clear examples ...
",mgreter,cimmanon
1512,2015-04-23 00:43:10,"Re-opening based on @cimmanon's spec snippet. I don't remember seeing that when I read the spec when originally implementing this; I wonder if it changed?
",nex3,cimmanon
1509,2014-11-04 14:42:27,"Hey @sevenupcan, your request is very vague and is likely to be shot down on sight.

Do you have any specific suggestion in mind?

PS Have you looked at the indented `.sass` syntax? Here's how it would look:



I can't imagine anything cleaner than that.
",lolmaus,sevenupcan
1509,2014-11-07 18:57:07,"I didn't think my post was vague I just didn't want to propose a solution because I wanted to see what people thought before I put forward my own theories.

@nex3 While the example you've provided does do the job of solving the problem in my example, it still quite messy and with more complicated scenarios it doesn't replicate very well.

For example if you want to write lots of variants of the following:



It becomes difficult to read and as far as I know this is not possible to solve with mixins.

If you've used CSS Crush before you might have seen it has a feature which allows you to create [selector aliases](http://the-echoplex.net/csscrush/#core--selector-aliases) which helps when writing your styles.

They work like this:



From your post though it sounds like you don't have any plans on expanding Sass to support something like this.
",sevenupcan,nex3
1509,2014-11-07 19:35:28,"@sevenupcan You aren't restricted to mixins if what you're after is selector name reuse, you can use functions and variables for this purpose as well.



or


",cimmanon,sevenupcan
1509,2014-11-07 20:17:45,"@cimmanon awesome, I wasn't aware you could do this! Looks like this would come in really handy. Thanks.

I guess the only problem here there is I would still have to create a function for each alias.

Unless I create a generic function which I pass other functions in like @nex3 suggestion (still not ideal but better than nothing).


",sevenupcan,nex3
1509,2014-11-07 20:17:45,"@cimmanon awesome, I wasn't aware you could do this! Looks like this would come in really handy. Thanks.

I guess the only problem here there is I would still have to create a function for each alias.

Unless I create a generic function which I pass other functions in like @nex3 suggestion (still not ideal but better than nothing).


",sevenupcan,cimmanon
1496,2015-06-19 23:11:48,"@Wordius assuming `$px-values` is, as the name indicates, in `px`, you would do `$value == 0px`.
",nex3,Wordius
1496,2015-11-13 20:30:51,"What are the thoughts here on the `===` unitless comparison? Seems like it might make the deprecation warning have a more useful suggestion. @nex3?
",hcatlin,nex3
1484,2014-10-31 20:53:50,"@robwierzbowski That presents size issues for the resulting CSS document. I don't think most users would want a gigantic base64 comments in the stylesheet that everyone downloads.
",nex3,robwierzbowski
1484,2014-10-31 21:12:54,"Well you wouldn't want to create sourcemaps for production assets. I think
that's a case of knowing how to use your tools.

On Friday, October 31, 2014, Natalie Weizenbaum notifications@github.com
wrote:

> @robwierzbowski https://github.com/robwierzbowski That presents size
> issues for the resulting CSS document. I don't think most users would want
> a gigantic base64 comments in the stylesheet that everyone downloads.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1484#issuecomment-61329855.

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowski
1483,2014-10-25 12:07:06,"@andrewjtait Because it's not always just a dash. I guess that was a poor example. I also could have left the mixin part out. I just always end up writing a bunch of one line if statements to modify a variable based on something else and if that fails I always revert it back to the default mixin value. Most of my mixins are like this. I thought it'd be better to stay consistent with `@if`.
",whaaaley,andrewjtait
1477,2014-10-23 17:44:28,"@dustindowell22 Quite clever :+1: 
@HugoGiraudel My thought too
",jakob-e,HugoGiraudel
1477,2014-12-22 16:59:33,"@dustindowell22 @HugoGiraudel @jakob-e 

I've implemented the optional percentage in the above pull request, but am noticing only slightly different values from @dustindowell22's implementation. 

https://github.com/jshawl/sass-invert-tests 
",jshawl,jakob-e
1477,2014-12-22 16:59:33,"@dustindowell22 @HugoGiraudel @jakob-e 

I've implemented the optional percentage in the above pull request, but am noticing only slightly different values from @dustindowell22's implementation. 

https://github.com/jshawl/sass-invert-tests 
",jshawl,HugoGiraudel
1477,2014-12-23 02:35:26,"@jshawl Looking over your code and doing some quick math, wouldn't 255 need to be 256 instead? If we're inverting colors we'd go from 0-255 to 1-256, and then subtract from that.
",whaaaley,jshawl
1476,2014-10-24 00:06:49,"@brunopgalvao, you need to downgrade Sass, not `sass-rails`. Your `Gemfile` should have:



Then run `bundle update sass`. Once this is fixed and a new version is released, remove the `gem 'sass'` line and run `bundle update sass` again.
",jbhannah,brunopgalvao
1476,2014-10-24 19:20:04,"Also having the same problem, when working with Foundation.
Seems like that update ""Parent selectors now work in selector pseudoclasses (for example, :not(&))."" caused some trouble.
Just downgraded to 3.4.5 as @rpedroni said.
",jltemple,rpedroni
1476,2014-10-27 19:37:51,"+1. Also reproduced this issue. Thanks for the work around @bradvogel
",abepetrillo,bradvogel
1476,2015-09-08 09:17:34,"@riazek Your version is extremely out of date. Please update & check again.
",mgol,riazek
1476,2015-09-11 20:51:11,"@riazek Please post the full 3.4.18 stack trace for the error you're seeing.
",nex3,riazek
1472,2014-10-16 12:29:24,"@Snugug Could you explain as why this is a duplicate? As I see it #1094 is a compilation of `@import` related issues but it doesn't contain any ideas as explained above.
",fnky,Snugug
1469,2015-02-06 21:50:14,"@walt What version of listen do you have installed when you see those errors? What's your directory structure? What directories are you seeing the errors for?
",nex3,walt
1469,2015-02-09 23:01:22,"> What version of listen do you have installed when you see those errors?

listen (2.8.5)

> What's your directory structure?

I have multiple site directories within `~/Sites`. So, for example, a project might have a `~/Sites/[project]/sass` source and a `~/Sites/[project]/html/css` destination.

> What directories are you seeing the errors for?

I usually cancel it pretty quickly once it starts dumping errors but most of the ones I've seen are for directories within `~/Library`.

**One more thing:** You asked @isoph, ""In what directory are you running Sass?"" I usually run it in my home directory but when I tried running it in `~/Sites` it seems to work perfectly with or without listen installed. So I suspect that's going to be my workaround for the time being.

Thank you for your help with this.
",walt,isoph
1469,2015-02-20 19:21:40,"Is it possible that this is the same as #1631? Does changing the casing of your directory names help? What about passing `--poll`?

@walt, @isoph can you do like an ASCII diagram of your directory structure?

@walt When you were running in your home directory, were you pointing the executable at `~/Sites`?
",nex3,walt
1469,2015-02-20 19:21:40,"Is it possible that this is the same as #1631? Does changing the casing of your directory names help? What about passing `--poll`?

@walt, @isoph can you do like an ASCII diagram of your directory structure?

@walt When you were running in your home directory, were you pointing the executable at `~/Sites`?
",nex3,isoph
1469,2015-05-08 21:36:52,"@WillsB3

> I don't understand why if I'm expclitly watching one file I get warnings about completely unrelated files and folders (that aren't in the `static` folder at all) being watched.

There are two reasons you might get more stuff watched than you expect. First, OS X simply doesn't support watching an individual file, so we have to watch the directory containing that file. Second, Sass used to include the current working directory on its load path. While it doesn't do so anymore, it still watches the working directory for updates in order to make `--watch` work nicely with stylesheets within the working directory that import relative to themselves. See #1393 where not doing this caused people problems.

Now, to address the errors you're seeing. We deduplicate the paths we watch to avoid sending duplicates to `listen`, so I'm not sure why this error is popping up. I'm going to need your help to figure it out. First of all, which version of `listen` are you using? Does your working directory recursively contain any symlinks? If you `cd` further down into `static/css`, do the errors eventually stop happening? If so, when?
",nex3,WillsB3
1469,2015-07-10 18:35:56,"@frickenate I'm not sure why you posted that comment in this issue, but I'll try to address it as best I can. The command-line executable is never going to have all the options that everyone might conceivably want; adding options has a real cost in terms of complexity and comprehensibility, so we don't do it very often. The good news is that the Ruby API is available and pretty easy-to-use, so people like you with very specific needs with respect to what gets watched can create their own watcher process that does exactly that.

If that's not satisfying, I encourage you to pitch in and help us watch files based on what's actually imported. Once that's in place, there'll no longer be any need to watch the working directory.
",nex3,frickenate
1466,2014-10-07 23:53:47,"@lolmaus The goal is to converge implementations, not create a loophole for some implementations to add features that aren't in ruby sass. 
",chriseppstein,lolmaus
1466,2014-10-08 00:05:25,"@lolmaus but if those features have been approved, but just not implemented, then yes, once we implement them.
",chriseppstein,lolmaus
1466,2014-10-08 15:40:04,"+1

On Tue, Oct 7, 2014 at 8:05 PM, Chris Eppstein notifications@github.com
wrote:

> @lolmaus https://github.com/lolmaus but if those features have been
> approved, but just not implemented, then yes, once we implement them.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1466#issuecomment-58283578.
",hcatlin,lolmaus
1466,2015-01-09 17:46:18,"@nex3 Once libsass is at feature parity I think we need a few things to keep things that way:
1. A clear explanation of every language change in english (not just a code delta).
2. Every language change needs to be named so that we can report compatibility on it.
3. A way for libsass to weigh in on whether a language change should be made. If a feature
   is onerous for them to implement or would have undue performance impacts, then we should
   consider that carefully before going forward.

We're keeping two projects in sync now. It's going to involve some process beyond just adding some tests to sass-spec. I don't want the process to be cumbersome, Maybe it's as simple as getting :+1: from the libsass team on the Sass issue tracker to know they've acknoledged a feature is coming and they don't have any major reservations about it
",chriseppstein,nex3
1466,2015-01-20 17:56:42,"@nex3 So, basically, this nullifies what we said we would do at SassConf. You're saying you're not going to go out of your way to define the language outside of helping write some tests and now you're saying you're not going to wait for them to release. What exactly are we going to do to keep these communities from significantly diverging? 
",chriseppstein,nex3
1466,2015-01-20 18:42:13,"@nex3 Another thing to note is that speed is not the only driver of libsass adoption. libsass makes it trivial to use sass in a variety of host languages where exec'ing out to a ruby environment is complex and slow. libsass is the preferred implementation for php, node, java, and perl environments because it's less hassle to install.
",chriseppstein,nex3
1466,2015-01-20 20:54:40,"I have to agree with @chriseppstein here. Performance is a reason to use Libsass, but it's far from the only one.

For instance Libsass
- is a better fit for the current generation of node based frontend tooling.
- allows companies who for whatever reason cannot use Ruby in their operating environments. 
- can free developers of what is potentially their only Ruby dependency (and the costs and risk of support another language, and point of failure i.e. rubygems.org)

The final point is the case for my workplace, and many others I'm sure.
",xzyfer,chriseppstein
1465,2014-10-07 18:39:27,"@lolmaus, as discussed at https://github.com/sass/libsass/issues/424; if there is an issue in multi-line comment, wouldn't it be nice to raise a warning instead of syntax error? Something like:



(if this is something pursuable, should it be reported at separate issue or reopening this issue be a good idea).

Thanks @hcatlin! :)
",am11,lolmaus
1465,2014-10-07 18:39:27,"@lolmaus, as discussed at https://github.com/sass/libsass/issues/424; if there is an issue in multi-line comment, wouldn't it be nice to raise a warning instead of syntax error? Something like:



(if this is something pursuable, should it be reported at separate issue or reopening this issue be a good idea).

Thanks @hcatlin! :)
",am11,hcatlin
1464,2014-10-17 10:22:24,":+1:  @thejase By reverting to version 3.4.5 from 3.4.6 worked for me too.
",RajRoR,thejase
1464,2015-01-17 02:32:08,"@hinok this should be fixed as of 3.4.7. can you provide a code example the demonstrates the problem?
",nex3,hinok
1464,2015-01-17 15:14:08,"@nex3 You're right that on sass-meister that error is not thrown but on my computer it is.
Anyway even if on sass-meister there is no error compilation, final compiled CSS is still not as expected

Compiled



Expected



This is how it looks on my computer
![error](https://cloud.githubusercontent.com/assets/1313605/5789263/b8455592-9e63-11e4-8154-4bf7faf2a5e2.gif)
",hinok,nex3
1464,2015-01-23 21:40:06,"@hinok If you can't reproduce your error on SassMeister, I can't do much to help you.

> Compiled
> 
> 
> 
> Expected
> 
> 

This I can do something about.
",nex3,hinok
1464,2015-01-23 22:20:17,"@nex3 Compiled and Expected results are from sass-meister.com
![zrzut ekranu 2015-01-23 o 23 17 31](https://cloud.githubusercontent.com/assets/1313605/5883831/4c84ddd0-a356-11e4-93cb-b64ab3ce4268.png)

I cannot reproduce only that strange error while compiling my project (look gif).
",hinok,nex3
1459,2014-10-13 15:20:42,"This feature is exactly what I need. I have App A that embeds another app, App B. App B can be stand-alone or embedded in App A. I have one App B sass file that wraps all of the App B imports in a class selector so that App A can embed a chunk of App B with that class wrapped around it.

When App B is compiled to run independently it generates:



When it's compiled to be embedded in App A, it generates:



via



But of course this breaks the ampersand operator as @tomahl mentioned.

I don't see how to allow this with the selector functions, however if I was able to add a rule saying to add a #ns wrapper to everything from App B then every other rule in appBstyles*.scss could stay as is.
",sambaker,tomahl
1459,2016-11-17 04:24:59,"@reduardo7 `@import` doesn't work on expand the ampersand in a ideal way.
@sambaker Did you finally get the way to scope a scss block?
",zheeeng,reduardo7
1459,2016-11-17 04:24:59,"@reduardo7 `@import` doesn't work on expand the ampersand in a ideal way.
@sambaker Did you finally get the way to scope a scss block?
",zheeeng,sambaker
1458,2014-10-02 06:15:24,"@nex3, `@warn` only outputs a result of an evaluation. To use it, you have to know in advance where this evaluation is done in the code.

What we're asking for is the opposite: we see a line of resulting CSS and want to determine from what line of Sass source it originates from.

I had a situation where i needed that badly last week, with my own code. :sweat: I had overcomplicated things and had hard time debugging it without a way to trace CSS rules to Sass `@include` calls.
",lolmaus,nex3
1454,2014-09-29 17:02:25,"@pavellishin, `@include` is a Sass directive. But the problem occurs not in `@include`, but rather in `@keyframes`, which is a CSS directive.
",lolmaus,pavellishin
1454,2014-09-29 17:06:39,"@pavellishin, yes, as you noticed, this behavior was introduced in the recent version. Let's wait for @nex3 to tell whether it is a feature or a regression.

I consider this a regression because it breaks existing code and i can't think of any reasoning behind it.
",lolmaus,pavellishin
1453,2014-10-01 19:56:39,"@pdaoust Yes, I've found far too often the need to do `$_my-private-foo` which... feels unclean.

I think it goes without saying too, that this behavior should be extended to functions if it is accepted/implemented.
",northborndesign,pdaoust
1453,2014-10-03 15:33:01,"@nex3 Any particular thread in which these plans are being discussed?
",northborndesign,nex3
1452,2014-09-29 16:49:06,"@pdaoust, Sass has no reasoning behind this behavior. It simply mechanically executes arithmetic operations in the specified order.
",lolmaus,pdaoust
1452,2014-09-29 18:16:40,"@pdaoust how would you convert degrees multiplied by radians?
",lolmaus,pdaoust
1452,2014-09-29 18:22:21,"@lolmaus detailed previously -- they would be converted to a common unit, as with addition/subtraction (probably the unit of the first value, for consistency with addition/subtraction) and then have their units squared, e.g., `deg¬≤` or in Sass terms `deg*deg`. That's essentially what's happening already whenever you multiply compatible units; it just doesn't do the step of converting.
",pdaoust,lolmaus
1451,2014-09-26 20:14:42,"@nex3, the problem happens with line comments as well.
",lolmaus,nex3
1451,2014-09-26 20:21:59,"> @nex3, the problem happens with line comments as well.

Hmm, that's probably undesirable behavior. Unfortunately, it's also the sort of thing that can only really be fixed with a complete overhaul of the indented syntax parser, which is unlikely to happen any time soon.
",nex3,nex3
1450,2014-09-26 21:11:57,"@brewster1134, how come maps don't help you?

Instead of doing `$foo-#{$bar}`, you can do `map-get($foo, $bar)`.

If you find `map-get` too bulky, you can fix up a function to be used like this: `foo($bar)`.
",lolmaus,brewster1134
1450,2014-09-26 21:49:25,"@brewster1134, 

> but in the end, i still need to support the $color-black style variables

This is the root of your problem. Looks like you're dealing with legacy Sass 3.2 code that you have no power to refactor.

As a workaround, you can use a template engine to define variables dynamically. See how Compass [was doing it](https://github.com/Compass/compass/blob/0.12.7/lib/compass/sprite_importer/content.erb) in `v0.12`.
",lolmaus,brewster1134
1450,2014-09-27 01:32:22,"@brewster1134  The answer to the ""we want interpolation for variable names"" feature request is ""we're giving you mappings instead""  (see: https://github.com/sass/sass/issues/329#issuecomment-4625697).  There was never a promise that we would get variable variables or dynamic variable creation.
",cimmanon,brewster1134
1449,2014-09-26 12:37:36,"@Stephn-R I did some research and it needs to be declared if you use non-english characters in your CSS and your HTML is encoded differently.

Here's a link about charsets if it helps anyone.
http://www.w3.org/International/questions/qa-css-charset.en.php
",whaaaley,Stephn-R
1449,2014-09-26 21:40:05,"Thanks for clearing this up, @nex3! :+1: 
",mikefowler,nex3
1442,2014-09-18 12:52:15,"@lolmaus I can only agree. But I think it would be great to add this feature and you can however still 
decide against!
",julmot,lolmaus
1440,2014-09-18 13:46:45,"@lolmaus I didn't mean that it did have anything to do with Codekit. Only that it was running an older version of Sass. I agree with you.
",whaaaley,lolmaus
1436,2014-09-13 22:00:04,"@Panya at that point, you may as well not nest.  You'd be saving yourself quite a few keystrokes.
",cimmanon,Panya
1436,2014-09-13 22:03:20,"@cimmanon yep, all this `&`-prefixing/suffixing stuff is little messy at this point in Sass.
",Panya,cimmanon
1433,2014-09-13 00:32:08,"Hey now. Don't close this yet.

It doesn't sound like you guys are understanding what I'm getting at. This directive (which would be at the SASS level, not the Compass level @lolmaus) would enforce partial import order without having to import files multiple times at the top of a partial module.
",webbower,lolmaus
1431,2014-09-12 21:41:49,"@ykjsw This isn't really the right place for support requests. Try [the mailing list](https://groups.google.com/forum/#!forum/sass-lang).
",nex3,ykjsw
1430,2014-09-12 11:14:58,"@Snugug yes, I know. But why?
",extempl,Snugug
1429,2014-09-12 12:58:04,"@julmot You did notice that's from 2012, right?  I find it hard to believe that was true even back then.  Are you sure your problem isn't this?  http://stackoverflow.com/questions/17976140/false-positive-undefined-variable-error-when-compiling-scss
",cimmanon,julmot
1429,2014-09-12 14:56:57,"@cimmanon @lolmaus

Unfortunately I found out, that it was my fault. I extended a element which has only a background-image in it. After searching for the .test-class which extends the other class I did not found it on the correct position. But after searching again now, I found out that it will append the selector in the position where the extended class is defined, not in the position where I defined the .test-class. So I am very sorry!
",julmot,lolmaus
1429,2014-09-12 14:56:57,"@cimmanon @lolmaus

Unfortunately I found out, that it was my fault. I extended a element which has only a background-image in it. After searching for the .test-class which extends the other class I did not found it on the correct position. But after searching again now, I found out that it will append the selector in the position where the extended class is defined, not in the position where I defined the .test-class. So I am very sorry!
",julmot,cimmanon
1425,2014-09-10 12:20:11,"Use interpolation, @maranomynet:



Demo: http://sassmeister.com/gist/da2394d0d28b0fe95d59

Works in Sass 3.4.
",lolmaus,maranomynet
1425,2014-09-12 21:22:41,"@nex3, thank you for clarifications.

But don't you agree that 



Is way too much typing, compared to LESS'



There _should_ be a simple way to write that. In projects using this convention, people type it like 100 times every day.
",lolmaus,nex3
1425,2014-09-13 20:27:02,"Thank you for changing your mind, @nex3. People keep stumbling upon this: https://github.com/sass/sass/issues/1436
",lolmaus,nex3
1424,2014-09-09 18:20:58,"I wish `@extend` behaved like a pattern to be applied to extending selector, like described in the top post.

Can this be considered a feature request?

PS @chriseppstein, can you please explain the [inconsistency](http://sassmeister.com/gist/a9a9a2edf2b43623a72d) between the plain and interpolated parent selector and between normal and at-root?
",lolmaus,chriseppstein
1424,2014-09-09 19:39:59,"@lolmaus there's a lot there. What are you referring to in particular.
",chriseppstein,lolmaus
1424,2014-09-09 21:42:45,"> It seems like you think that extend is operating on the Sass selectors instead of the generated CSS selectors.

Yes, this is what i was expecting, and i think @maranomynet too.

> For instance, given your example above, how should we handle `@extend %button-text`

If my expectations were true and `%button { &-text {...}}` were manipulating extending selectors (e. g. `.fancyButton`) rather than generating more silent selectors, then there would be no `%button-text` silent selector defined. It would result in a warning.

> or worse, how should `@extend .fancyButton-text` work since those classes wouldn't exist until after nesting is removed. 

I didn't think of that, Chris. I never extend normal selectors because i consider it unsafe: for me it constantly results in bloated CSS and hidden side effects.

I imagine a new type of silent selectors that would work as instructions to apply on those selectors that are extending it. Example:





Alternatively, instead of a new silent selector type it could be a new directive that works only with silent selectors:





The above example would feel like using a mixin, but it would not explode your CSS with duplication.
",lolmaus,maranomynet
1424,2014-09-11 14:47:33,"@chriseppstein thanks for your answer.

> > optionally work across all @media when an !allmedia flag is present.
> 
> See #1050.

I was actually dreaming of something like this:



rendering this:



...basically `!allmedia` ignoring the @media context where the `@extend` is used - hunting down the %subject-selector where ever it's found across all @media.

This would allow for very powerful, and easy to use extend libraries.
",maranomynet,chriseppstein
1424,2014-09-11 14:51:06,"@maranomynet You can essentially do that by placing your media queries inside your placeholder selectors. http://sassmeister.com/gist/be04f420bc978eb8e234
",Snugug,maranomynet
1424,2014-09-11 14:54:07,"@Snugug  That's very nice! Thanks :-)
",maranomynet,Snugug
1416,2014-09-05 16:36:16,"@nex3 I think we should put a statement to this effect in our API documentation. Do you concur?
",chriseppstein,nex3
1413,2014-09-04 18:22:43,"thanks @lolmaus. That is handy :) 
",rhacker,lolmaus
1411,2014-09-04 15:40:43,"I have a developer who is seeing the same issue, it appears that Listen isn't coming through as a required gem when installing SASS 3.4.2.. Our watch is..



Their system is:
Macbook Pro mid 2012
OSX 10.8.5
Ruby version: `ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-darwin13.0]`

@cssyren what version of Ruby are you running? `ruby -v` to check

When she installed `Listen` the SASS Watch executed perfectly.

Edit: I am not super familiar with Ruby, but it appears that the Listen gem is required per your Gemfile spec (sass/Gemfile):


",tbremer,cssyren
1411,2014-09-04 18:33:15,"@cssyren @tbremer what are the full paths of the directories being watched? are any of the parent directories symlinks, on network drives, anything like that?

Also, @cssyren, if you run `gem install listen` does it start working?
",nex3,tbremer
1411,2014-09-04 18:33:15,"@cssyren @tbremer what are the full paths of the directories being watched? are any of the parent directories symlinks, on network drives, anything like that?

Also, @cssyren, if you run `gem install listen` does it start working?
",nex3,cssyren
1411,2014-09-08 03:54:30,"@nex3 unfortunately I can't let you SSH into my machine where I can replicate the issue, but I can do a screen share with you sometime this week to try and help find a diagnosis.
",tbremer,nex3
1411,2014-09-11 21:05:40,"I'm having the same issue as @Paxa, where did you include the line of code in complier.rb ?
",canaandavis,Paxa
1411,2014-09-12 21:30:35,"@Paxa that's expected. `sass --watch` only watches files/directories that are actually passed on the command line (as well as those on your load path). Either watch the entire directory or add the path to the files you import to your load path.

@tbremer Assuming you're not seeing the same issue as @Paxa, can we do a screenshare sometime next week? I'm free pretty much any afternoon other than Monday; just send me an email with a time at nex342@gmail.com.
",nex3,tbremer
1411,2014-09-12 21:30:35,"@Paxa that's expected. `sass --watch` only watches files/directories that are actually passed on the command line (as well as those on your load path). Either watch the entire directory or add the path to the files you import to your load path.

@tbremer Assuming you're not seeing the same issue as @Paxa, can we do a screenshare sometime next week? I'm free pretty much any afternoon other than Monday; just send me an email with a time at nex342@gmail.com.
",nex3,Paxa
1411,2014-09-13 02:05:34,"@nex3 I'll send you an email on Monday when I know my meeting schedule a little better and we'll set a time up!
",tbremer,nex3
1411,2014-09-13 05:33:25,"I am digging through the source code a bit, @nex3 are you purposefully using a hash from April 11 as the vendor/listen version??


",tbremer,nex3
1411,2014-09-15 03:38:18,"@Paxa, feel free to email if this doesn't help you out.. Your issue is not what this open ticket is about...

**Assume this DIR structure**



**Within your`style.sass` file you would have...**



**So, your sass watch would then be:** `sass --watch sass/:css/`
",tbremer,Paxa
1411,2014-09-15 23:00:11,"> I am digging through the source code a bit, @nex3 are you purposefully using a hash from April 11 as the vendor/listen version??

Yes. More recent versions of listen don't support Ruby 1.8.7, but Sass does, so we vendor in an old version to maintain compatibility.
",nex3,nex3
1411,2014-09-20 02:35:21,"@nex3 your fix works great! thank you for addressing this issue. I'm sorry I got caught up in a big project at work work and wasn't able to help / do the screen share.

:relieved: :beers: 
",tbremer,nex3
1409,2014-09-03 07:31:59,"@nex3 My watched folder is on a network drive, not local.
",cyril-lamotte,nex3
1409,2015-04-21 03:51:42,"@Techno-Tut Same questions as everyone else: what other gems do you have installed? In particular, what version of `listen` (if any)?

What exact invocation of `sass --watch` are you using? Is there anything unusual about the file or directory you're watching‚Äîsymbolic links, on a different drive, anything like that?
",nex3,Techno-Tut
1407,2014-09-10 13:34:42,"@joshuakelly, i encountered situations where you have no other options.

Imagine that:
1. you have a page component with a complex HTML structure, 
2. you have to nest its instances into one another,
3. the looks of an instance should vary depending on its context (e. g. how deep it's nested, what's its state, etc).

In this case, it becomes impossible to target elements by single class because their looks depends on context, and it's impossible to use the descendent combinator (space) because it would affect all nested elements.

I had to target all elements by abusing the immediate child (`>`) combinator. I didn't end up with more than four selectors combined, but still.
",lolmaus,joshuakelly
1405,2014-08-29 11:28:53,"What @lolmaus is trying to say is that before posting issues you should look through at least the currently open issues to see if someone else has the same problem, even if the title isn't the same.

This issues is more or less an exact duplicate of the currently open (and still at the top of the issue queue) #1395

As an aside, @lolmaus, I'd encourage you to read the [Sass Community Guidelines](http://sass-lang.com/community-guidelines)
",Snugug,lolmaus
1402,2014-08-28 14:18:02,"Thank you for your research, @Snugug. O_O
",lolmaus,Snugug
1402,2014-08-28 14:23:23,"@Snugug thanks for the info. I do have a lot of nested maps, so I frequently use `map-fetch`. I did see a notable performance gain from caching, enough to implement it. I think I created around 3-4 different caching maps for specific repeated tasks, such as fetching the same value 4 times for each breakpoint. Went from compile times of around ~300s to ~200s. But, this might also be because I moved all of the heavy string-related functions over to Ruby when possible.
",ezekg,Snugug
1402,2014-08-28 18:32:01,"@ezekg Can you come up with an example where you're seeing exponential behavior that doesn't involve pulling in all of flint?

@Snugug I have a hard time believing that `call` is actually faster than a literal function call, since all it does is construct a function call node and run it.
",nex3,Snugug
1402,2014-08-28 18:32:01,"@ezekg Can you come up with an example where you're seeing exponential behavior that doesn't involve pulling in all of flint?

@Snugug I have a hard time believing that `call` is actually faster than a literal function call, since all it does is construct a function call node and run it.
",nex3,ezekg
1402,2014-08-28 19:04:57,"@nex3 I can't tell you why or how. I can tell you that [at this place in Singularity](https://github.com/Team-Sass/Singularity/blob/1.x.x/stylesheets/singularitygs/_api.scss#L58), having run tests with a direct function call vs `call`, `call` was faster.
",Snugug,nex3
1402,2014-08-29 08:35:26,"@nex3 for what it's worth, I just revisited `call` vs direct function call and it being faster only appears to still hold true for Sass 3.3. In Sass 3.4 the two methods appear to be identically fast.
",Snugug,nex3
1402,2014-10-01 23:37:06,"@nex3 @Snugug just an update on this, I reversed the order that I am merging maps with `map-merge`; I'm now placing the newest item at the beginning as opposed to the end. My performance benchmarks (from Flint's test suite) show an increase of 23%. Gained another 15% by writing a `map-fetch` function in Ruby to use, when available, in place of the one written in pure Sass.



Still haven't had time to attempt to replicate it outside of Flint, sorry.
",ezekg,Snugug
1402,2014-10-01 23:37:06,"@nex3 @Snugug just an update on this, I reversed the order that I am merging maps with `map-merge`; I'm now placing the newest item at the beginning as opposed to the end. My performance benchmarks (from Flint's test suite) show an increase of 23%. Gained another 15% by writing a `map-fetch` function in Ruby to use, when available, in place of the one written in pure Sass.



Still haven't had time to attempt to replicate it outside of Flint, sorry.
",ezekg,nex3
1400,2014-08-27 17:11:32,"@okolehao, please remove large pieces of code and share them via https://gist.github.com .
",lolmaus,okolehao
1400,2014-08-27 17:46:33,"Thanks @lolmaus  - reproed on SASSmeister

https://gist.github.com/okolehao/98870871ec1d40263e8e

Change config to 3.4.1 and it fails (Invalid CSS after """": expected selector, was ""0%"") , swap back to 3.3.14 and it compiles
",okolehao,lolmaus
1398,2014-08-28 20:39:09,"We used this syntax to convert &mdash;as mentioned in [Sass official' docs](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#syntax): 



So maybe we need to try with what you suggest. Is there a specific documentation for this somewhere?

Ping @pascalduez.
",HugoGiraudel,pascalduez
1398,2014-09-12 21:43:24,"@HugoGiraudel All those comments look fine to me (modulo #1432). What's wrong with them?
",nex3,HugoGiraudel
1397,2014-08-25 19:35:11,"@lolmaus understood, I use bundler in my Ruby projects.  In this case I am using sass as a general utility to watch/compile minify my scss files.  I should create a Gemfile for these projects though.
",danreed121,lolmaus
1396,2014-08-25 18:42:42,"@Snugug, it's not a font issue: the old CSS output should've produced the same characters as the new one. And the guy is only unhappy with the new output.

@slawaEremin, that's intended and valid CSS. Extract from Sass 3.4.0 [changelog](http://sass-lang.com/documentation/file.SASS_CHANGELOG.html):

> Sass now follows the CSS Syntax Level 3 specification for determining a stylesheet‚Äôs encoding. In addition, it now only emits UTF-8 CSS rather than trying to match the source encoding.

I don't know how to revert to the old output, you should wait for @nex3 to comment on that. But why doesn't the new format suit you in the first place?
",lolmaus,Snugug
1396,2014-08-25 18:42:42,"@Snugug, it's not a font issue: the old CSS output should've produced the same characters as the new one. And the guy is only unhappy with the new output.

@slawaEremin, that's intended and valid CSS. Extract from Sass 3.4.0 [changelog](http://sass-lang.com/documentation/file.SASS_CHANGELOG.html):

> Sass now follows the CSS Syntax Level 3 specification for determining a stylesheet‚Äôs encoding. In addition, it now only emits UTF-8 CSS rather than trying to match the source encoding.

I don't know how to revert to the old output, you should wait for @nex3 to comment on that. But why doesn't the new format suit you in the first place?
",lolmaus,slawaEremin
1396,2014-08-26 10:00:42,"@dwightjack, well, if you have a reason that forces your team into using obsolete IDEs, it might as well justify using an older version of Sass?
",lolmaus,dwightjack
1396,2014-08-26 10:22:09,"I assume we can close this one. @dwightjack is right that this is a duplicate of #1395 which is older and has a better formulated title.
",lolmaus,dwightjack
1395,2014-08-26 10:41:04,"@lolmaus Compliance matters, but sometimes projects didn't comply :p 

> I've specifically tried it and Sass 3.4.1 does not produce a BOM for me (though it didn't convert \f000 into Unicode for some reason, i had to manually type ÔÄÄ into the source Sass). 

I've experienced the conversion problem just with .sass extension and sass syntax. switching to .scss works as expected
",dwightjack,lolmaus
1395,2014-08-26 11:00:20,"@dwightjack, tried with `.sass`, still no BOM.
",lolmaus,dwightjack
1395,2014-08-26 12:08:22,"@lolmaus yep the BOM issue doesn't come up by changing extension, what's changing is that with .scss `\f000` is preserved, while with .sass it's converted in `ÔÄÄ`
",dwightjack,lolmaus
1395,2014-08-26 16:20:14,"@lolmaus it's right in the documentation. If you output in compressed style and any utf-8 chars are detected, the file is outputted as UTF-8 with a BOM. 
",probablyup,lolmaus
1395,2014-09-03 17:55:02,"@chrisdrackett, it shouldn't make any difference. Do you have your icon font applied correctly?
",lolmaus,chrisdrackett
1395,2014-09-03 18:37:32,"@nex3 It seems like there's no good way to construct an escape sequence now. I think we need a fn to construct a character from an escape value. E.g. `char(""f205"")` would return the equivalent of `""\f205""`.
",chriseppstein,nex3
1395,2014-09-04 18:22:43,"@chriseppstein I agree we should have a function that does that, although that's more the purview of #659.
",nex3,chriseppstein
1395,2014-09-19 01:28:32,"@nex3 Any ETA on when we might see this? Thanks!
",probablyup,nex3
1395,2014-09-19 21:16:54,"@danny-englander `$fatag: \f02b;` should still work in 3.4.

@3lux Not particularly. There's a lot to do, and this isn't particularly high on the priority list.
",nex3,danny-englander
1395,2014-09-24 20:28:24,"@nex3 <code>$fatag: \f02b;</code> does not work in 3.4.x.  it outputs <code>\f02b</code> which throws off any icon webfonts being used.  

Has anyone found a workaround for this?  looks like going back to 3.3.x is the only solution that I can find
",jonofthedead,nex3
1395,2014-09-26 21:54:29,"Please explain precisely what output you're expecting in terms of the generated CSS rather than the browser behavior. @jonofthedead, just saying ""this does not work"" doesn't help me understand what output you expected and in what way the new output doesn't work.
",nex3,jonofthedead
1395,2014-09-26 22:13:44,"So Natalie,

  if I have:

$contentvar: ""\f001"";

.class:before{
content: $contentvar;

}

I expect the css output to be:

.class:before{
  content: ""\f001"";
}

But what is getting output is:

.class:before{
  content: ""fi"";
}

On Fri, Sep 26, 2014 at 5:54 PM, Natalie Weizenbaum <
notifications@github.com> wrote:

> Please explain precisely what output you're expecting in terms of the
> generated CSS rather than the browser behavior. @jonofthedead
> https://github.com/jonofthedead, just saying ""this does not work""
> doesn't help me understand what output you expected and in what way the new
> output doesn't work.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1395#issuecomment-57025598.
",jonofthedead,jonofthedead
1395,2014-09-26 22:27:14,"@jonofthedead, but it still works: http://sassmeister.com/gist/22743e406eeb3744988c
",lolmaus,jonofthedead
1395,2014-09-26 22:28:10,"@jonofthedead you're not getting the separate characters ""f"" and ""i"", you're getting the ligature ""ÔÄÅ"". This is the [value of U+F001](http://www.fileformat.info/info/unicode/char/f001/index.htm), and is [entirely equivalent to including the ASCII escape sequence](http://dev.w3.org/csswg/css-syntax-3/#escaping). If a browser is interpreting the two differently, that would be very surprising and would represent a bug in that browser.
",nex3,jonofthedead
1395,2014-10-02 16:15:41,"@Stephn-R Thank you for the tip! I'm really glad that I found it after spending two hours on trying to finding solution for the same problem.
",FlyingDR,Stephn-R
1395,2014-10-02 16:41:21,"Thank you @Stephn-R for figuring that out, it was driving me nuts!

Here is a reusable function to use else where if needed.


",tjbenton,Stephn-R
1395,2014-10-19 23:41:15,"I experienced this after regenerating all our scss recently. We deploy stylesheets that are shared by multiple apps (explicitly, they load the same URL).

One site had issues and was displaying the ligature ""ÔÄÅ"". As near as I can tell, the only reason for the difference on that one site is that it serves HTML with ISO-8859-15 encoding specified in the http header. Does the encoding of the HTML page affect the rendering of css generated content? It seems like it does to me. We are not specifying the encoding on the CSS we serve, perhaps specifying UTF-8 there would help.

Appreciate this is a bit of an edge case but will be looking at the methods here for keeping the ASCII encoding on our generated CSS files for this reason.

ps: @tjbenton function works great, thanks!
",bboyle,tjbenton
1395,2014-10-24 20:02:17,"@bboyle What browser(s) are you seeing the incorrect encoding on? Does the issue go away if you replace the unicode character with an explicit escape? Are you using the compressed output format?
",nex3,bboyle
1395,2014-10-25 12:22:15,"@nex3 This happens to me in Firefox on OS X. It did some research and the last I checked they knew about the bug, but I don't think anyone was working on fixing it.
",whaaaley,nex3
1395,2014-10-30 23:45:01,"@bboyle Are you using compressed mode? Sass uses a BOM rather than a `@charset` there so save space.

Alternately, what happens on your test page if you manually add a BOM to `unicode-no-charset.css`?
",nex3,bboyle
1395,2014-10-31 20:09:42,"@bboyle Glad to hear that Chrome isn't misbehaving.

@dustindowell22 What exact behavior were you seeing on Firefox? Did the document have a BOM, a `@charset` declaration, or neither? What version of Firefox were you testing?
",nex3,bboyle
1395,2014-11-02 20:49:52,"@nex3 In Firefox 33 and 33.0.2 (latest) on OS X 10.9.5 and then after I upgraded to 10.10, I'm getting square ligatures. I tried with and without `@charset: ""UTF-8"";`. No BOM. I'm compiling the latest Font-Awesome. It doesn't matter which output style is selected.

Works everywhere else though. Chrome, Safari, Opera on desktop and Chrome, Opera, Firefox on Android. It's just desktop Firefox for me.
",whaaaley,nex3
1395,2014-11-10 19:27:08,"@nex3 Finally sat down and found my problem. Total fail on my part. I had an old Font-Awesome font installed locally from a looong time ago. Firefox wasn't pulling them in and my font paths were wrong. I completely forgot I did that. My bad. Everything is good and working. Sorry about that.
",whaaaley,nex3
1395,2014-12-01 14:01:40,"I got the  ""ÔÄÅ"" issue, too. In my case it only happend in a speciific combination:

I stored the unicode in a sass variable like
`$icon: ""\f006"";`
and used it (in another file) with
`content: $icon;`
This for this works fine (sass 3.4.5)!

After running critical css (https://github.com/pocketjoso/penthouse) over it, it writes ""ÔÄÅ"" inside the critical inline part. And only for the unicode stored inside a sass variable; all the other ones used inside my sass files are correctly copied to the critical css part.

Maybe this can help (or confuse) a little bit? :smile: 
It might be a utf-8/iso-15 issue, too. I can check this, if needed.

Nevertheless @Stephn-R solution works for mee! Thank you.
",larsbo,Stephn-R
1395,2014-12-01 16:36:30,"Your welcome @larsbo! As for a more permanent fix, @nex3, is it possible to include a new function that kinda does the following:



Is this realistic or should we stick with rough fixes like these?
",Stephn-R,larsbo
1395,2014-12-01 16:36:30,"Your welcome @larsbo! As for a more permanent fix, @nex3, is it possible to include a new function that kinda does the following:



Is this realistic or should we stick with rough fixes like these?
",Stephn-R,nex3
1395,2015-01-01 05:18:34,"After a ton of trying to work around this I finally hit this thread, Thanks a ton @larsbo!!

Here is the problem that I saw, below is a link to a gist that documents the solution.

I am trying to create a list that holds the names to all the icons in my icon font. I am working on a very large website in a large company. Our icon font is organized in sections and is located in the PUI in the unicode standard.

I created a loop to go through the list and create a rule for each icon. Using the index (converting to hex) to spit out the proper unicode. resulting in essentially, ""\e9"" + ""00"", in different variables. The problem that I was having is that, in the quotes, the ""\e"" would render as ""√©"" so the compiled css would be content: ""√©00"".
Naturally I thought that I could escaped the \ with \\. But that didn't escape. ""\\e9"" + ""00"" would result in - content: ""\\e900"";

That got really frustrating really quickly. No matter how I tried I could not escape the . I even tried ""\005ce"" + ""00"" (\005c is the ascii for '\') to try and get ""\e900"". That compiled in the css to content: ""\\e900"". At that point I was pulling out my hair. I used many many number of combinations of quote and unquote, except for the one above, with no avail.

So I see two problems. (I admit I am new to sass, coming from stylus, which didn't have this problem at all)

1) One when compiling it is really frustrating to have '\e900' to compile to 'Ó§Ä'. That is not the behavior that I would expect. I would expect a value of '\e900' to remain '\e900' when I compile to css.

2)  There doesn't seem to be a way to escape the `\`.

I need to mention all of this is not talking about rendering in the browser, this is all compiling sass to css. These issues are from looking at the resultant css file so this isn't browser behavior.

Here is the code to my working solution.
https://gist.github.com/coltpini/b59b3064d6ecde760c6a
",coltpini,larsbo
1395,2015-01-16 21:34:03,"@mariusc23 Can you produce a reproduction of the chrome bug? That is, a CSS file + an HTML file (with a correctly-declared encoding) that produces the right glyph for an escape but not for the literal character?

@coltpini Sass strings have the same semantics as CSS strings, which is why you're seeing that behavior. To the eyes of CSS (and thus Sass as well), `\e900` is a single character in a string that happens to be represented in the source by five characters, just like `\n` in other languages.
",nex3,coltpini
1395,2015-01-16 21:34:03,"@mariusc23 Can you produce a reproduction of the chrome bug? That is, a CSS file + an HTML file (with a correctly-declared encoding) that produces the right glyph for an escape but not for the literal character?

@coltpini Sass strings have the same semantics as CSS strings, which is why you're seeing that behavior. To the eyes of CSS (and thus Sass as well), `\e900` is a single character in a string that happens to be represented in the source by five characters, just like `\n` in other languages.
",nex3,mariusc23
1395,2015-01-17 16:46:19,"@nex3, Sorry I am not trying to argue or anything here. Our perspectives might be just a little different is all. I updated the codepen to show the js. http://codepen.io/coltpini/pen/gbmNrx 

and maybe where I am wrong is this assumption. JS  ""renders"" to DOM and Sass renders to CSS. With that mentality.

JS: ""\e9"" + ""00"" => e900
JS: ""\\e9"" + ""00"" => \e900
JS: ""\""\\e9"" + ""00\"""" => ""\e900""

Sass: ""\e9"" + ""00"" => √©00
Sass: ""\\e9"" + ""00"" => \\e900
Sass: ""\""\\e9"" + ""00\"""" => ""√©900""

this gist is the only way that I could get ""\e900"" (the js third result) out of Sass.
https://gist.github.com/coltpini/b59b3064d6ecde760c6a

I hope that helps in understanding the dilemma I am facing.
",coltpini,nex3
1395,2015-01-23 23:47:09,"Yes. The problem I am running into is that in my css I need `""\e900""` so that the browser can take that and put it into the unicode char. The only thing I can get, with out the workaround, is `""√©00""` or `""\\e900""` both of which won't give me the char in the PUA. 

Your post gave me another thought so I updated http://codepen.io/coltpini/pen/gbmNrx with an icon5 span that tries to break everything out. The problem is that `""\""` won't compile because the `\` is escaping the `""` and `""\\""` compiles to `""\\""` so how can I get my css file to have `""\""`? That is an honest question that I would like to know. I don't know how prevalent of a problem it is but it seems it might be at the root of some of the issues presented here.

I don't know the answer, and maybe the workaround is the answer?

Thanks for your time on this @nex3! 
",coltpini,nex3
1395,2015-10-02 22:31:15,"@PCateNumbersUSA @RichardSison We plan to add a flag to always escape non-ASCII characters, as well as a function to take a Unicode code point number and return its corresponding character. This issue is marked ""help wanted"", though, which indicates that external contributions will be the best way to make that happen.
",nex3,PCateNumbersUSA
1395,2016-02-08 08:28:27,"Thank you @Stephn-R your little snippet is very helpful and solved my long lasted problem..
Thanks again from INDIA..
",bantya,Stephn-R
1395,2016-02-10 06:54:32,"No problem @bantya ! I still use the work around to this day
",Stephn-R,bantya
1395,2016-06-01 07:39:36,"After hours of searching I came across your comment @Perkovec. Works like a charm! Thanks.
",rickdoesburg,Perkovec
1393,2014-08-28 23:33:11,"@magnetikonline Weird indeed. For me, watching for a complete directory works the first time when I make changes but then after that I have to either delete the .sass-cache folder and re-run sass --watch ~/example:~/example2
",aft3rlife,magnetikonline
1393,2014-08-28 23:46:30,"Okay @nex3 - think I'm onto something, --watch is now (I swear it was failing _all the time_ when I raised this!) only when I give an _absolute_ directory watch path.

I run sass via this script to keep the `.sass-cache` directory out of my project(s).

https://gist.github.com/magnetikonline/5735040

So from that - this works:



this does not:


",magnetikonline,nex3
1393,2014-08-28 23:49:58,"Still can't reproduce this, even using 1.9.3p484 and using identical invocations to the opening example.  I could still use a Gemfile, though.

@magnetikonline I've been running with absolute paths without reproducing the issue, although the fact that it matters for you is certainly interesting information. Can you reproduce this if you run without your script or any additional flags on just a dummy script?

Also, it's possible that the specific path to your CSS matters. Is there any chance it's on a different drive or something than your working directory or cache?
",nex3,magnetikonline
1393,2014-08-28 23:51:27,"@nex3  yeah tested that... I have symlinks to project paths and have even tried with/without the symlinks to the project roots. In every case if I give a relative path it's now working fine - absolutes (which my script does via `pwd`) fails to watch.

**EDIT:** actually, now I'm getting confused :smile:  it's the symlinks that are doing it.
",magnetikonline,nex3
1393,2014-08-28 23:57:33,"@nex3 yeah I get an initial build, afterwards `touch` to a file does nothing/no recompile.

Just to confirm I have isolated it to giving a watch path that is part of symlink (soft, not hard symlink). Even with the sass-globbing library enabled/disabled it's consistent behaviour.

This used to be okay with pre 3.4 releases.
",magnetikonline,nex3
1393,2014-08-29 00:04:24,"@nex3 yep - at least for me :)

Revised my sass watch script - now getting the resolved path using `pwd -P`, does the trick for me. :smile: .

https://gist.github.com/magnetikonline/5735040/revisions

**EDIT:** thanks heaps Natalie, appreciate your time on this. For me at least, I'm a happy camper now :)
",magnetikonline,nex3
1393,2014-09-05 19:01:25,"Hey @imohkay, try locking your Sass version and its dependencies with Bundler.

Install Bundler with `gem install bundler`.

Create a `Gemfile` in the root of your project with the following content:



If you're using Compass, also add this:



Then run `bundle install` in that folder.

Then try using Sass/Compass command line prepending it with `bundle exec`. E. g.:



or



If the issue persists, share your `Gemfile` and `Gemfile.lock` files via https://gist.github.com/ . The  `Gemfile.lock` file will appear also in the project root.
",lolmaus,imohkay
1393,2014-09-06 22:12:23,"@imohkay Might be worthwhile for @nex3 to provide the output for the following.



 Pete
",magnetikonline,nex3
1393,2014-09-06 22:12:23,"@imohkay Might be worthwhile for @nex3 to provide the output for the following.



 Pete
",magnetikonline,imohkay
1393,2014-09-12 20:58:31,"@imohkay I'd still like more details about your directory structure.

@DinkoMiletic `--watch` only watches the files and directories you explicitly pass to it. You're telling it to just watch `style.scss`, not anything it imports. You probably want to run `sass --watch .:css` or possibly `sass --watch style.scss:style.css lib:.`.
",nex3,DinkoMiletic
1393,2014-09-12 20:58:31,"@imohkay I'd still like more details about your directory structure.

@DinkoMiletic `--watch` only watches the files and directories you explicitly pass to it. You're telling it to just watch `style.scss`, not anything it imports. You probably want to run `sass --watch .:css` or possibly `sass --watch style.scss:style.css lib:.`.
",nex3,imohkay
1393,2014-09-13 18:05:26,"@nex3 my directory structure is  a main.scss inside /assets/sass and I have a folder at /assets/css where the sass files are to be compiled to css. Inside assets/sass is a partials folder: i.e. /assets/sass/partials. The main.scss contains the import directives, so basically the only compiled file is main.css inside /assets/css. Again, to clarify, no libraries like compass/bourbon and just a static project.. (3.4.2 doesn't watch on 2 static projects I've tested it on...).
The command is:
sass  --watch assets/sass/style.scss:assets/css/style.css 
",imohkay,nex3
1393,2015-04-21 03:48:14,"@djonatanb If you're having trouble with the `guard` or `listen` executables, you should report that on those packages' repos, not here.
",nex3,djonatanb
1390,2016-05-20 21:59:36,"@chriseppstein Can this be closed out, or is there more you want to do?
",nex3,chriseppstein
1388,2014-08-22 11:56:38,"@lolmaus that bug says attribute selectors. Mine is just a class selector.
",satya164,lolmaus
1388,2014-08-22 11:57:15,"@satya164, sorry, i gave wrong issue number. I've modified my comment, adding the valid issue number.
",lolmaus,satya164
1388,2014-08-22 11:58:01,"@lolmaus Thanks. Closing this issue.
",satya164,lolmaus
1383,2014-08-22 20:23:30,"@DirtyHerri that's a different issue. I've filed it as sass/sass#1391.
",nex3,DirtyHerri
1382,2014-10-24 20:07:17,"@zquintana What versions of Sass and Ruby are you using? How about gems?
",nex3,zquintana
1382,2014-10-24 20:37:33,"@nex3 Thanks for responding, it turns out it was a problem on my end. I had 2 directories with same structure and was running the command from the wrong directory. Thanks again, and sorry about that.
",zquintana,nex3
1378,2014-08-19 17:52:56,"@nex3 According to @patw0929 the sass version was 3.3
",chriseppstein,nex3
1378,2014-08-19 17:52:56,"@nex3 According to @patw0929 the sass version was 3.3
",chriseppstein,patw0929
1373,2014-08-22 22:53:18,"@brian-hay I'd expect that to produce


",nex3,brian-hay
1373,2014-08-23 04:09:30,"@nex3 the SASS documentation doesn't seem to be clear on this but I personally I would have thought that for the "":expanded"" style, it's more consistent to have each selector on it's own line (i.e. line break after comma), rather than grouping pseudo selectors.
",brian-hay,nex3
1373,2014-08-23 04:14:24,"@nex3 Disclosure: I work a lot with Drupal and its code style guidelines (and automated code review tools) demand one selector per line.

So, I'm happy to acknowledge my bias / self-interest :-)

Regardless I think one selector per line (always breaking at comma) is more consistent and easier to code because there are no special cases.
",brian-hay,nex3
1369,2014-08-10 00:26:58,"@hail2u thanks for the heads-up on that. I'm moving over from LESS due to work so I'm still trying to get my bearings in SCSS.

I'm curious of the reason for this extra syntax since the docs state `&` as a reference to the parent selector.
",subhaze,hail2u
1369,2014-08-14 18:25:49,"As mentioned by @hail2u, This is addressed in 3.4
",chriseppstein,hail2u
1368,2014-08-09 15:16:51,"@geddski update Sass to 3.4.x, as it [introduced the `&` back into SassScript](https://github.com/sass/sass/blob/master/doc-src/SASS_CHANGELOG.md?utm_content=buffer8987d&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer#340-unreleased); that feature isn't available in 3.3 for reasons explained [here](https://gist.github.com/nex3/8050187). I have a project that uses a custom Ruby function as a polyfill though. To use it, add this to the bottom of your `config.rb` file.



You can call it the same way you would call a normal Sass function.
",ezekg,geddski
1366,2014-08-07 00:00:30,"@briangonzalez The importer is not allowed to be nil. Can I see a stack trace and also a list of rubygems that you are using with your project?
",chriseppstein,briangonzalez
1366,2014-08-07 20:28:47,"Just following up as a maintainer of the `sass-json-vars` repo. @chriseppstein -- is the recommended route to implement an `mtime` method as you have done in `sass-globbing`? If not, is there a reference you could point me to for the best practice for implementing an `Importer` plugin?

Here is what I am referencing:
https://github.com/chriseppstein/sass-globbing/blob/master/lib/sass/globbing/importer.rb#L54-L71
",nhunzaker,chriseppstein
1366,2014-08-07 21:32:08,"@nhunzaker looks great :+1: 
",chriseppstein,nhunzaker
1357,2015-10-29 03:51:14,"@nex3 That is not true. The inline option say, include the source text in the sourcemap. Not how .map file link to the source file. As @donotknow say, setting the sourcemap option to inline or file produce the same result. Obviously this is incorrect and broken in sass compiler. I have tested it on version 3.4.6. The result is the same as @donotknow finding.

Please reopen this ticket. This is a valid ticket.
",jamesmoey,nex3
1357,2015-10-29 03:51:14,"@nex3 That is not true. The inline option say, include the source text in the sourcemap. Not how .map file link to the source file. As @donotknow say, setting the sourcemap option to inline or file produce the same result. Obviously this is incorrect and broken in sass compiler. I have tested it on version 3.4.6. The result is the same as @donotknow finding.

Please reopen this ticket. This is a valid ticket.
",jamesmoey,donotknow
1349,2015-06-10 12:52:26,"Though, very little chances, :+1: for reconsideration.

@chriseppstein

> But we are reticent to introduce new syntax and break future compatibility for this case.

May we ask, what exactly potentially it may break in future?

Brackets and dot notations are so common in popular programming languages those days that I really hardly imagine what else for they can be used in future.
",ArmorDarks,chriseppstein
1349,2015-07-13 15:27:41,"Sorry in advance for the lengthy post, but someone need to do it. This is a reply to [#1739 (comment)](https://github.com/sass/sass/issues/1739#issuecomment-111102236).
@HugoGiraudel, @davidkpiano, @ArmorDarks I understand that sass is a function based language and that's part of the reason I love using it because it makes doing difficult tasks easy; however using functions **alone** to handle maps and lists can make what should be simple tasks seem overly complicated. In my issue #1349 I suggested using dot/bracket notation for variables only, and the way I suggested it to be implemented would not interfere with the sass ecosystem and instead be a huge improvement to the best preprocessor available. The longer implementing dot/bracket notation is ignored, the bigger the issue becomes. There are several notable libraries out there that have implemented their own way of handling maps, including some that @HugoGiraudel has written. The mere fact that there have been so many libraries attempting to solve this problem should be a clear indicator that it‚Äôs an issue worth standardizing.  It also means everyone learns how to handle large sass maps in a different way, and therefore every time someone moves jobs they have to change the way they deal with sass maps and that means relearning something that should have been implemented from the start. These various implementations make it harder to understand what's going on in people‚Äôs code, and it make it even more difficult for new people who are trying to learn sass to understand what they are seeing.

@davidkpiano Is 100% correct `map-get($map, foo.bar)` is a very bad idea. That's why I didn't suggest using dot notation in this way. However, if you implement dot notation similarly to how other notable languages use dot notation, it would solve these ridiculous problems everyone runs in to with maps.

In `js` and other languages that use dot/bracket notation you **can't** add `.` into the variable/key name for good reason, and it's pretty much the same point that @davidkpiano is trying to make. The difference being sass **does** follow suit and doesn't accept `.` in a variable/key name. If you tried to set a map key to be `foo.bar` you will get an error. The reason it returns an error is because sass interprets it as a css selector and since a css selector can't be followed by `:` an error is returned. Variables can't have a dot in them either for the same reason. So how does his example work? Well a sass key can be a type of `string`, `list`, `number`, `color`, or `map`. This means we can set a key to anything we want, and that allows us to do things like he's showing in his example. The reason his example works is because `nth(&, 1)` is a type of `list`. So when `map-get($map, nth(&, 1))` is called it's looking for key that matches the list of `nth(&, 1)`. If you absolutely have to have a `.` in your key name then you can do the same thing other languages do; just add quotes around the declaration to note that it's a string `""foo.bar""`‚Äî and that makes the key valid. 

Here's @davidkpiano example explained in depth, and the live example is on [sassmiester](http://sassmeister.com/gist/61a28cfb00edde026269) if you would like to see the output



##### These use cases can still use dot/bracket notation without any special functions being added



Implementing dot/bracket notation is something that needs to happen. It would make sass tremendously more readable, and it would make it easier for beginners with background knowledge of `js` and other languages that use dot/bracket notation easier to dive in to sass because they don't have to re-learn the same concept of structures/maps in a different way than they already know. The reason why I started using sass is because of it's extensibility, simplicity, and ease of understanding. The way maps(aka structures) are currently implemented makes it more complex than it needs to be. While I understand sass maps and use them on a daily basis, trying to teach a developer how to use sass map functions is harder than it needs to be and every time each developer has said ""Well why didn't they just use dot notation? That would be so much easier!‚Äù. I believe if there was a poll on implementing dot/bracket notation in sass and it was asked on all the major sass resource sites and email lists the majority of sass developers would agree that sass needs dot/bracket notation.

### Examples and use cases

Here are some more examples and use cases, how they are written with the current implementation of maps, and how they could be written using dot/bracket notation:

#### Setting a key value using other values from the same map.

Here is a [live](http://codepen.io/tjbenton21/pen/WvJWBz?editors=110) example that I had to use on codepen.



###### With map functions



###### With dot/bracket notation



#### Calling a dynamic key

This would be a use case for mixins and functions to call a key based off an argument that was passed:



###### With map functions



###### With dot/bracket notation



#### Getting a variable from a deeply nested map

This example is taken from the original post

###### With map functions



###### With dot/bracket notation



#### Setting a value on a deeply nested key

This example uses the same map from the original post.

###### With functions

The only real possibility to do this is to use a third party functions, like the one that @HugoGiraudel wrote and shared on [sitepoint](http://www.sitepoint.com/extra-map-functions-sass/), or the one that was written by @Snugug for [Sass-maps](https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss#L13), or another that was written by @cahnory for [PlastiCSS](https://github.com/cahnory/PlastiCSS/blob/master/function/_map-set.scss), or the one that was written by @pascalduez [gist](https://gist.github.com/pascalduez/14ef79d644483fc262da), these are just a few I came across in a single post by @chriscoyier on [csstricks](https://css-tricks.com/snippets/sass/deep-getset-maps/) and there are so many more out there, this was just from the first link in google.



###### With dot/bracket notation



#### Using `map-remove` with nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-keys`, and `map-values` on a nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-has-key` on a nested map

###### With map functions



###### With dot/bracket notation



### Bracket notation for sass lists

The bracket notation should also be applied to sass lists because it's still dealing with the same concept of getting and setting things in variables.

#### Getting/setting an item in a list(aka array)



###### With list functions



###### With bracket notation

Since sass isn't zero based like js the first item in the array would still be accesed through `1` and the last element would be accesed by the length of the list



#### Getting/setting an item in a list(aka array) that is nested in a map



###### With map/list functions



###### With dot/bracket notation



Dot notation is a very simple concept to understand regardless of your coding background, as it is already very common in several other languages. This would make it easer for other developers to learn sass, and utilize the power of sass maps. Implement it correctly would reduce the amount of wasted time by developers creating their own implementations of the sass map functions, as well as definitively solve a problem that others have already tried to hack their way around.
",tjbenton,ArmorDarks
1349,2015-07-13 16:06:59,"@tjbenton Thanks for your post! I totally support it

Just to mention, `dot` notation not always means using of dots. Some langauge using a another syntax ‚Äî for exmple, PHP implements `foo->bar` instead of `foo.bar`.

But dot so far seems to be the most common and the most comfortable syntax.
",ArmorDarks,tjbenton
1349,2015-07-13 16:42:16,"@tjbenton P.S. Sassdash supports the lodash way of delimiting keys with dots: `$value: _get($map, 'foo.bar.baz');` and it checks if `foo.bar.baz` is an existing key first.

I'm still on the fence, though. The native Sass `map-get` works like JavaScript's handling of _maps_, not objects, which makes sense since map keys can be anything, not just strings or numbers. You'd still have to do `Map.prototype.get.apply(...` for ES6 maps, which is even more verbose.
",davidkpiano,tjbenton
1349,2015-07-13 17:22:12,"@davidkpiano I have seen the sassdash implementation of `_get` before and I forgot to add it to the list of the different way's libs handle maps. While it does allow you to use dot notation which is cool. It's still a hackey solution that we shouldn't have to deal with, and something like getting and setting a nested property in a map should be standard across the board for sass but every lib implements it differently, which will causes huge issues when you try to import code snippets from a lib because you have to track down how they implemented maps and update the functions to work with the framework you're using.
",tjbenton,davidkpiano
1349,2015-07-13 19:40:32,"@ArmorDarks He did say

> ""Maybe it's something we can include in a future release if people find it useful.""
>  @chriseppstein 

If we can get the word out, and let people know about this issue then maybe it will gain some traction and it might get reopened for consideration.
",tjbenton,chriseppstein
1349,2015-07-13 19:40:32,"@ArmorDarks He did say

> ""Maybe it's something we can include in a future release if people find it useful.""
>  @chriseppstein 

If we can get the word out, and let people know about this issue then maybe it will gain some traction and it might get reopened for consideration.
",tjbenton,ArmorDarks
1349,2015-07-13 19:54:14,"@tjbenton Sure

@HugoGiraudel I know you had different position regarding dot notation in past. Can you make any comments based on https://github.com/sass/sass/issues/1349#issuecomment-120967912 and https://github.com/sass/sass/issues/1739#issuecomment-111181142? Thanks in advance
",ArmorDarks,tjbenton
1349,2015-07-14 18:29:11,"I'm with @tjbenton on this, it needs to be supported.
",ds8k,tjbenton
1349,2015-07-14 18:38:02,"couldnt agree more with @tjbenton  #freedotnotation !
",mdsither,tjbenton
1349,2015-07-14 18:38:40,"With @tjbenton on this. Please support.
",alexandreescu,tjbenton
1349,2015-07-14 19:21:47,"@tjbenton knows whats up! 
",Happelation,tjbenton
1349,2016-05-03 03:39:19,"@ArmorDarks There are recursive/deep map functions coming up in the next version of Sass. For now, you can easily just use a library like [Sassdash](https://github.com/davidkpiano/sassdash) if you really want dot notation:


",davidkpiano,ArmorDarks
1349,2016-05-03 08:03:20,"@davidkpiano The fact that the 2nd argument of the _get method contains dots does not make it a dot accessor. This would be: `$palette.primary.dark`.

I gave my opinion on this topic already: dot notation is fine when you use strings as keys, like JavaScript objects. It is a whole another story when a map key can be of any type. 


",HugoGiraudel,davidkpiano
1349,2016-05-03 14:05:25,"@davidkpiano This doesn't solve situations, when you have nested lists (arrays) inside maps (objects). You will get same mess of nested functions.

Sassdash makes it better, that true. But making things better not always means solving them. Particularly, Sassdash's `_get` due to slicing and substitutions will have larger impact on performance on large projects (my assumption) than native implementation.

@HugoGiraudel Can't tell for all, but I've never encountered in production Sass maps with keys as anything. And if you will, just for that cases you can use already defined `map-get()`. For rest of cases, it's too verbose and unneeded.

This is the reason why in ES2016 we have objects _and_ maps. Because maps needed in very few situations.

And don't forget bracket notation, which solves that issue too. Though, I assume parenthesis exactly representing bracket notation in your example.
",ArmorDarks,HugoGiraudel
1349,2016-05-03 14:05:25,"@davidkpiano This doesn't solve situations, when you have nested lists (arrays) inside maps (objects). You will get same mess of nested functions.

Sassdash makes it better, that true. But making things better not always means solving them. Particularly, Sassdash's `_get` due to slicing and substitutions will have larger impact on performance on large projects (my assumption) than native implementation.

@HugoGiraudel Can't tell for all, but I've never encountered in production Sass maps with keys as anything. And if you will, just for that cases you can use already defined `map-get()`. For rest of cases, it's too verbose and unneeded.

This is the reason why in ES2016 we have objects _and_ maps. Because maps needed in very few situations.

And don't forget bracket notation, which solves that issue too. Though, I assume parenthesis exactly representing bracket notation in your example.
",ArmorDarks,davidkpiano
1349,2016-05-04 00:26:06,"I finally gave up and switched to stylus, dot notation problem: solved!

On Tuesday, May 3, 2016, Serj Lavrin notifications@github.com wrote:

> @davidkpiano https://github.com/davidkpiano This doesn't solve
> situations, when you have nested lists (arrays) inside maps (objects). You
> will get same mess of nested functions.
> 
> Sassdash makes it better, that true. But making things better not always
> means solving them. Particularly, Sassdash's _get due to slicing and
> substitutions will have larger impact on performance on large projects (my
> assumption) than native implementation.
> 
> @HugoGiraudel https://github.com/HugoGiraudel Can't tell for all, but
> I've never encountered in production Sass maps with keys as anything. And
> if you will, just for that cases you can use already defined map-get().
> For rest of cases, it's too verbose and unneeded.
> 
> This is the reason why in ES2016 we have objects _and_ maps. Because maps
> needed in very few situations.
> 
> And don't forget bracket notation, which solves that issue too. Though, I
> assume parenthesis exactly representing bracket notation in your example.
> 
> ‚Äî
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1349#issuecomment-216538010

## 

Sincerely,

Jessica Kennedy
Triad Webcrafters
www.triadwebcrafters.com
336-298-1511
",mistersender,HugoGiraudel
1349,2016-05-04 00:26:06,"I finally gave up and switched to stylus, dot notation problem: solved!

On Tuesday, May 3, 2016, Serj Lavrin notifications@github.com wrote:

> @davidkpiano https://github.com/davidkpiano This doesn't solve
> situations, when you have nested lists (arrays) inside maps (objects). You
> will get same mess of nested functions.
> 
> Sassdash makes it better, that true. But making things better not always
> means solving them. Particularly, Sassdash's _get due to slicing and
> substitutions will have larger impact on performance on large projects (my
> assumption) than native implementation.
> 
> @HugoGiraudel https://github.com/HugoGiraudel Can't tell for all, but
> I've never encountered in production Sass maps with keys as anything. And
> if you will, just for that cases you can use already defined map-get().
> For rest of cases, it's too verbose and unneeded.
> 
> This is the reason why in ES2016 we have objects _and_ maps. Because maps
> needed in very few situations.
> 
> And don't forget bracket notation, which solves that issue too. Though, I
> assume parenthesis exactly representing bracket notation in your example.
> 
> ‚Äî
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1349#issuecomment-216538010

## 

Sincerely,

Jessica Kennedy
Triad Webcrafters
www.triadwebcrafters.com
336-298-1511
",mistersender,davidkpiano
1349,2016-05-04 03:31:57,"@mistersender thanks for the tip, I'll checkout stylus also!
",johnnyshields,mistersender
1349,2016-05-04 06:56:12,"@mistersender Of course that is none of my business, but if your choice of CSS preprocessor relies on the ability to use dot-notation, I am afraid you missed the point. 
",HugoGiraudel,mistersender
1348,2014-07-31 20:28:39,"@chriseppstein I guess my problem with using a mixin is that the name `mixin` makes sense when you are mixing function into a selector, but here it feels like it is being misused, and the necessity of the unused `$temp` variable only makes it feel more so. It feels kind of hacky.

This feels like a perfectly reasonable (and helpful) use-case to me that can only be achieved in a convoluted way. Would you mind explaining why this kind of 'side effect' is discouraged?

I would also question that if you allow a null return value, why not make this implicit, though I suppose this is tied into avoiding functions created specifically for their side-effects.
",Undistraction,chriseppstein
1348,2014-08-01 07:13:11,"@cimmanon Because in your example you are using it to mix-in a selector to the root of the document which is doing what the name `mix-in` in this context implies ‚Äì mixing in properties to selector or mixing in selectors to the document.

In my example it mixes-in absolutely nothing. I am using it only as a way create a context (for want of a better word) where I am able to call a function. The bi-product of the function call is a variable declaration which again is only present because I can't call the function without assigning it to something.

I don't really really see any similarity between your example and mine at all.
",Undistraction,cimmanon
1348,2014-08-01 20:50:16,"@chriseppstein Concur. I don't want to encourage functions with side effects.
",nex3,chriseppstein
1348,2014-08-01 21:12:53,"@chriseppstein Thanks for taking the time to respond. I appreciate it. 
",Undistraction,chriseppstein
1348,2014-08-15 12:07:39,"In most modern programming languages, especially the scripted ones, there is no distinction between _functions_ (return a value without side effects) and _procedures_ (cause side effects without returning a value). Instead, there are _methods_ that do both things.

I see no reason why Sass should uphold the distinction. In fact, Sass functions _are_ side effects-capable already, so the distinction is completely artificial.

Also, while the custom mixin way is a valid workaround, it's what every Sass framework developer will find himself doing. Custom mixins will breed like rabbits, varying in implementation and size. Sass should totally provide a default and scaffolding-free way to do that.

So i strongly support that Sass should allow executing functions without an obligation to accept a value into a variable.

Sass 4.0 could probably even completely remove the distinction.

@Snugug, please consider moving your custom mixin implementation into Toolkit.
",lolmaus,Snugug
1348,2014-08-15 12:14:12,"@lolmaus that's literally where I'm linking to. Already there.
",Snugug,lolmaus
1348,2014-08-15 12:17:34,"@Snugug, you rock.
",lolmaus,Snugug
1348,2014-08-15 18:20:14,"@Undeterminant,
1. Sass is not a functional language and is never going to be. Having a single functional-like restriction and forcing numerous users to work around it is pointless.
2. CSS is all about side effects, though this fact is not relevant to the matter.
3. Sass is a _programming_ language of sorts. It uses a lot of techniques from general purpose programming languages and more techniques [are](https://github.com/sass/sass/issues/871) [demanded](https://github.com/sass/sass/issues/996). More and more sophisticated Sass libraries are created.
4. Not all side effects are bad. For example, `pull` in Ruby removes an item from an array (side effect) and returns the removed item. Introducing unwanted positional side effects is a concern of a coder using Sass. Sass should not enforce inconvenient usage just because someone might misuse it. It's like suggesting to ban kitchen knives because someone might cut his finger off.
5. Sass maps introduced a whole new style of developing with Sass. It involves storing and manipulating a lot of data. This approach could really benefit from subj. And it has nothing to do with positional side effects.
6. Sass mixins are originally meant for reusing/generating CSS output. Using them solely for executing side effects is a hack. Using it is no better than doing `$i-am-never-used: reset-grid()`, it's just a matter of which approach hurts your programmer's taste less.
7. In Ruby, you can do `some_string.upcase` which would return a new string and `some_string.upcase!` which would modify the string stored in the variable. I need the latter in every Sass project i work with, and i'm not alone (i wasn't the one to start this feature request). There _should_ be a clean way of doing that, e. g. `remove-duplicates-mod($list)` instead of `$list: remove-duplicates($list)`.
8. Sass standard library is very scanty. Libraries like sassy-maps, sassy-lists, color-schemer, toolkit, etc exist to fill the void. It is ridiculous that every library has to provide a mixin counterpart for every function that can be used to modify an object rather than return a new one.
",lolmaus,Undeterminant
1348,2014-08-15 19:14:25,"@lolmaus

You haven't really explained why side effects are good.  I've spent the last 3 years in Haskell land and I haven't missed side-effects one bit.  I haven't really missed variables, either.

Keep in mind that not everyone who's using Sass is an experienced programmer.  Functions with side effects are more difficult for novices to understand.  You argue that it would be a minor quality of life improvement for you, but I'm not buying it.  Functions with side effects are, without a doubt, _more difficult to debug_.

Yes, writing `remove-duplicates-mod($list)` is certainly more convenient than `$list: remove-duplicates($list)`, but not by much.  At the end of the day, what are you doing with `$list`?  Surely you're not just having it sit there doing nothing.  Why assign it to a variable at all if you're just passing it off to another function/mixin/whatever?  Are you sure you aren't resorting to doing this because Sass does not offer things Functional programmers know and love like map, filter, fold, and anonymous functions/lambdas?  If your string needs to be uppercased from now until the end of time, why didn't you uppercase it when you were assigning it in the first place?

It just sounds like you're clinging to inferior programming patterns because you haven't learned that there are better, safer ways of achieving the same result.
",cimmanon,lolmaus
1348,2014-08-15 20:30:38,"> I've spent the last 3 years in Haskell land and I haven't missed side-effects one bit. I haven't really missed variables, either.
> ...
> It just sounds like you're clinging to inferior programming patterns because you haven't learned that there are better, safer ways of achieving the same result.

Those are just different paradigms. Functional programming is not by default better than non-functional. Yes, it has certain serious advantages, but substantial disadvantages as well, the most important of which (from my point of view) is that it doesn't match the normal programmer's way of thinking: you have to adjust the way you think to correspond to the language.

For example, the `pull` function exists in all languages that i've had the honour to work with: Ruby, JavaScript, Python, PHP. It is a very convenient and very broadly used technique, but it violates the no side effects approach.

No programmer has ever complained that functions in JavaScript or Python allow side effects.

Let's not start a holy war here. The fact is that Sass is not functional and the necessity to write `$i-am-never-used: some-func()` does not in any way prevent the user from introducing a side effect in `some-func()`.

> If your string needs to be uppercased from now until the end of time, why didn't you uppercase it when you were assigning it in the first place?

Because it came as an argument? A very common situation is that you accept raw data as an argument and you need to parse/sanitize it before using. You may need to use the processed data more than once in your function, or you may want to split a chain of operations over the raw data into multiple lines for the sake of readability (and Sass doesn't support method chaining due to the lack of a method concept), so you end up with an `$i-am-never-used` or `$argument: f($argument)`.

Another very common situation, which both @Undistraction and @Snugug mentioned, is the necessity to let the user CRUD settings stored in a map. The variable that contains the map is hidden from the user so that he can't mess it up by modifying it directly.
",lolmaus,Undistraction
1348,2014-08-15 20:30:38,"> I've spent the last 3 years in Haskell land and I haven't missed side-effects one bit. I haven't really missed variables, either.
> ...
> It just sounds like you're clinging to inferior programming patterns because you haven't learned that there are better, safer ways of achieving the same result.

Those are just different paradigms. Functional programming is not by default better than non-functional. Yes, it has certain serious advantages, but substantial disadvantages as well, the most important of which (from my point of view) is that it doesn't match the normal programmer's way of thinking: you have to adjust the way you think to correspond to the language.

For example, the `pull` function exists in all languages that i've had the honour to work with: Ruby, JavaScript, Python, PHP. It is a very convenient and very broadly used technique, but it violates the no side effects approach.

No programmer has ever complained that functions in JavaScript or Python allow side effects.

Let's not start a holy war here. The fact is that Sass is not functional and the necessity to write `$i-am-never-used: some-func()` does not in any way prevent the user from introducing a side effect in `some-func()`.

> If your string needs to be uppercased from now until the end of time, why didn't you uppercase it when you were assigning it in the first place?

Because it came as an argument? A very common situation is that you accept raw data as an argument and you need to parse/sanitize it before using. You may need to use the processed data more than once in your function, or you may want to split a chain of operations over the raw data into multiple lines for the sake of readability (and Sass doesn't support method chaining due to the lack of a method concept), so you end up with an `$i-am-never-used` or `$argument: f($argument)`.

Another very common situation, which both @Undistraction and @Snugug mentioned, is the necessity to let the user CRUD settings stored in a map. The variable that contains the map is hidden from the user so that he can't mess it up by modifying it directly.
",lolmaus,Snugug
1341,2014-07-29 20:46:54,"@nex3 :+1: ?
",chriseppstein,nex3
1339,2014-08-01 18:16:58,"@lolmaus is correct; we don't want to step on CSS's toes here.
",nex3,lolmaus
1332,2014-07-25 21:27:18,"@lolmaus is right: we aren't going to support a non-CSS-compatible color literal format.
",nex3,lolmaus
1332,2014-07-25 21:28:31,"@tabatkins is there a spec for that up somewhere?
",nex3,tabatkins
1328,2014-07-20 21:25:45,"@robwierzbowski :exclamation: I just noticed that if we replace all backslashes with forward slashes, it works!

I've tried that after reading your linked Jekyll thread which mentions [Ruby normalizing the path separators to forward slashes](https://github.com/jekyll/jekyll/issues/1948#issuecomment-32447533). I'm not sure but, IIRC, Sass recommends always using forward slashes.
",UltCombo,robwierzbowski
1328,2014-07-25 21:03:01,"Sass should always accept native-style paths.

@UltCombo can you confirm whether `File.mtime()` fails on Windows-style paths (or paths with mixed backslash and forward-slash separators) fails on Windows in general?
",nex3,UltCombo
1328,2014-07-25 23:25:56,"@nex3 This seems to be a rather localized issue.

I've only managed to reproduce it using the `--update` option and with a path containing an upper case letter. In this case, the drive letter is being appended at the end of the path.

Test cases:



It emits a different error with `--force`, but due to the same reason I believe.



Weirdly enough, the error does not happen when using a relative path from a current working directory path which contains an upper case letter.



Tests ran on Sass 3.3.10, Ruby 2.0.0p481 x64, Windows 7 Ultimate x64.
",UltCombo,nex3
1328,2014-07-26 00:37:49,"@UltCombo That looks like Sass is having trouble splitting apart the two paths. We do have logic for doing that correctly on absolute Windows paths, though, and the original error doesn't include the appended path. It's especially strange that the order of the two paths is reversed.

Can you try applying the following diff, run the example again, and include the output here?


",nex3,UltCombo
1328,2014-07-26 03:25:19,"@nex3 here it is:


",UltCombo,nex3
1328,2014-08-01 18:14:16,"@UltCombo I think I've figured out what's going on here. Try this diff and let me know if it fixes the issue:


",nex3,UltCombo
1328,2014-08-01 18:32:34,"@nex3 Thanks for the effort, but same error still.

I should have some free time later today, I could try to trace this issue but I'm not really a Ruby guy. I'll be up for a remote debugging with TeamViewer or similar if you'd like.
",UltCombo,nex3
1328,2014-08-01 20:35:40,"@nex3 



I'm still using Sass 3.3.10, I can upgrade to 3.3.12 or bleeding edge if you'd like.
",UltCombo,nex3
1328,2014-08-02 01:10:26,"@nex3 yay, you got it! It works now, good job.
",UltCombo,nex3
1327,2014-07-21 22:11:47,"@ezekg Can you give me a use case where detecting this helps you do a work around?
",chriseppstein,ezekg
1305,2014-07-06 19:56:39,"@iManu If you're reporting an issue, you really need to look at the compiled CSS to confirm that it is behaving improperly.  Sass will only prevent you from creating syntactically invalid CSS.  It won't protect you from creating invalid selectors or use nonexistant properties or various other things that browsers won't understand.

http://sassmeister.com/gist/7aca93066481ac3c96c3

Your sample Sass generates this:



In order for a browser to see this as a valid selector, it has to understand both `::-webkit-input-placeholder` _and_ `:-moz-placeholder`.  There isn't such a browser.
",cimmanon,iManu
1305,2014-07-06 20:12:14,"> @cimmanon:
> 
> Your sample Sass generates this:
> 
> 
> 
> In order for a browser to see this as a valid selector, it has to understand both `::-webkit-input-placeholder` and `:-moz-placeholder`. There isn't such a browser.

I see it works the way you say, but why? It kinda contradicts my experience. Shouldn't the comma make it two separate selectors? Or is there special treatment for pseudoelements?
",lolmaus,cimmanon
1305,2014-07-06 20:15:19,"@lolmaus http://stackoverflow.com/questions/13816764/what-is-the-rationale-behind-dropping-css-rules-with-an-invalid-selector
",UltCombo,lolmaus
1305,2014-07-06 20:18:39,"@lolmaus 

http://www.w3.org/TR/CSS21/syndata.html#rule-sets

> The selector (see also the section on selectors) consists of everything up to (but not including) the first left curly brace ({). A selector always goes together with a declaration block. When a user agent cannot parse the selector (i.e., it is not valid CSS 2.1), it must ignore the selector and the following declaration block (if any) as well. 
> 
> CSS 2.1 gives a special meaning to the comma (,) in selectors. However, since it is not known if the comma may acquire other meanings in future updates of CSS, the whole statement should be ignored if there is an error anywhere in the selector, even though the rest of the selector may look reasonable in CSS 2.1.

Browsers are just following the rules.
",cimmanon,lolmaus
1305,2014-07-06 22:23:43,"@iManu No problem, and yeah, that's what I attempted to explain in my first comment. `;)` I've also linked to a mixin which does that job in my first comment.
",UltCombo,iManu
1305,2014-07-06 23:07:59,"This seems like it is a legitimate situation where sass can raise an error. I've been caught by this one and it's quite hard to debug. 

Hunt & pecked on my iPhone... Sorry if it's brief!

> On Jul 6, 2014, at 12:56 PM, cimmanon notifications@github.com wrote:
> 
> @iManu If you're reporting an issue, you really need to look at the compiled CSS to confirm that it is behaving improperly. Sass will only prevent you from creating syntactically invalid CSS. It won't protect you from creating invalid selectors or use nonexistant properties or various other things that browsers won't understand.
> 
> http://sassmeister.com/gist/7aca93066481ac3c96c3
> 
> Your sample Sass generates this:
> 
> ::-webkit-input-placeholder, :-moz-placeholder {
>   font-family: serif;
> }
> In order for a browser to see this as a valid selector, it has to understand both ::-webkit-input-placeholder and :-moz-placeholder. There isn't such a browser.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",chriseppstein,iManu
1305,2014-07-06 23:58:11,"@chriseppstein what would be the specific rules to throw an error?
- When a selector contains more than one vendor-prefixed selector?
- When a vendor-prefixed selector is combined (`,`) with another selector? In this case, both selectors will work in one browser and both will fail in another browser. This is probably unintended, but might be intended by the author as well.

Ultimately, trying to shield the developer from himself is unnecessary overhead, imho. I'd opt for a warning over an error.
",UltCombo,chriseppstein
1304,2014-07-04 13:39:38,"Thanks @lolmaus  this really helps. 
",P233,lolmaus
1304,2014-07-04 17:06:28,"Hi @lolmaus , It seems using comma can only create a list of two space separated lists, but how can I create a list of multiple lists?

Here is my code: http://sassmeister.com/gist/47ef0a768698e0ba1e70

I am expecting to output



Is there a way to do that?  thanks
",P233,lolmaus
1304,2014-07-04 17:33:51,"@lolmaus  Thank you for your reply. unfortunately in my project the sub-list is not  a single value, it has 3-5 values. That would be a pain to create such a list. I'd better find another way. Thanks again!
",P233,lolmaus
1304,2014-07-04 17:36:13,"@P233, you could recieve more help if you provided a SassMeister demo of what you're actually trying to achieve.
",lolmaus,P233
1304,2014-07-04 18:34:26,"Thank @lolmaus . I am creating a new Gird System and doing some test. A function will grab data from Sass map and create a comma separated list of multiple space separated lists, and then pass the list to Sass 3.3 `@each` directive to generate grids. That's why I was focusing on creating list. I just did some test that I might use a `@for` loop and the `nth()` function instead of `@each`. I'll keep working on it and let you know :)

@nex3 @chriseppstein It would be handy if Sass could support merge multiple lists into one nested list   :)
",P233,lolmaus
1304,2014-07-04 20:46:38,"@P233, have a look at this example: http://sassmeister.com/gist/74c2bba1ac3744a236d2

For grids, you should check out [Singularity](https://github.com/Team-Sass/Singularity). It has this all figured out.

For advanced list manipulations, have a look at [SassyLists](https://github.com/Team-Sass/SassyLists/) from @HugoGiraudel.
",lolmaus,P233
1304,2014-07-04 20:48:24,"> @P233, have a look at this example: http://sassmeister.com/gist/74c2bba1ac3744a236d2

Why don't you use `join`?
",HugoGiraudel,P233
1304,2014-07-04 20:52:59,"@HugoGiraudel, `join` produces a flattened result of certain list type.
",lolmaus,HugoGiraudel
1304,2014-07-05 17:43:50,"@lolmaus all my values are generated by function, and the list has to be created by `@for` loop, I am afraid that I can't use your `join-lists` function. 

I should explain the circumstance more clearly:
- A function will generate several space separated list


- the amount of sub-list is uncertain but can be known
- I need combine all sub-lists into one comme separated list, so I can pass it to a `@each` directive



But this is not going to work as you explained the `$list` will become a very deeply nested list.

---

Currently, I've found two workarounds:

**Wrokaround 1**



Create a flattened list, then



**Wrokaround 2**



Even the `append()` function only accepts _single_ value, but it works. And I also noticed that when using `append()` to combine lists, the very first value _must be empty_.

Here is another example, sorry I can't login sassmeister.com with any browsers today :(



I am much prefer the workaround 2, but I assume this is illgal.
",P233,lolmaus
1304,2014-07-31 09:15:51,"@lolmaus  @HugoGiraudel  I've finished the first version of my grid system. please have a look :)
https://github.com/P233/Rebar-Grid

As you can see in https://github.com/P233/Rebar-Grid/blob/master/rebar-grid/data/_container-list.scss#L37 , I need to combine multiple lists inside a `@for` loop. That why I am looking for a way to combine list.

@nex3 Thank you for your reply, the `append()` only accept singe value, it doesn't combine list unless I append the lists after an empty value. This example may explain my question  http://sassmeister.com/gist/efe05764ee61d0e76c03
",P233,nex3
1304,2014-07-31 09:15:51,"@lolmaus  @HugoGiraudel  I've finished the first version of my grid system. please have a look :)
https://github.com/P233/Rebar-Grid

As you can see in https://github.com/P233/Rebar-Grid/blob/master/rebar-grid/data/_container-list.scss#L37 , I need to combine multiple lists inside a `@for` loop. That why I am looking for a way to combine list.

@nex3 Thank you for your reply, the `append()` only accept singe value, it doesn't combine list unless I append the lists after an empty value. This example may explain my question  http://sassmeister.com/gist/efe05764ee61d0e76c03
",P233,HugoGiraudel
1304,2014-07-31 09:15:51,"@lolmaus  @HugoGiraudel  I've finished the first version of my grid system. please have a look :)
https://github.com/P233/Rebar-Grid

As you can see in https://github.com/P233/Rebar-Grid/blob/master/rebar-grid/data/_container-list.scss#L37 , I need to combine multiple lists inside a `@for` loop. That why I am looking for a way to combine list.

@nex3 Thank you for your reply, the `append()` only accept singe value, it doesn't combine list unless I append the lists after an empty value. This example may explain my question  http://sassmeister.com/gist/efe05764ee61d0e76c03
",P233,lolmaus
1304,2014-07-31 20:40:14,"@P233 Use `join()` to combine two lists and provide a separator value for the result.
",chriseppstein,P233
1304,2014-07-31 21:00:38,"Hi @chriseppstein I have a few space separated lists and I'd like to combine them into one big comma separated list, like this `one two, three four, five six`, this list has three values and each value is a space separated sub list. But if I use `join()` and set comma as separator, I will get a single list with 6 values: `one, two, three, four, five, six`.
",P233,chriseppstein
1304,2014-07-31 21:39:44,"Thanks @chriseppstein, I am currently using this way in my project. 

In http://sass-lang.com/documentation/Sass/Script/Functions.html#append-instance_method, `appen()` only accept single value, and we cann't directly combine two list with `append()`



But if we `append()` a list to `()` first and keep appending other lists, it works as expected. My question is why we have to append list to `()` first, is it legal or is it a feature of Sass?

I am sorry for my poor English, I didn't express my question clearly and make you misunderstood :(
",P233,chriseppstein
1304,2014-07-31 21:52:32,"@P233 right. because you're saying add the `$two` list as a single element to the `$one` list when you do append like that. Basically, you're not treating $one and $two the same. If you need $one to be a comma delimited list containing a space delimited list  you should declare it with a trailing comma, then it will work like you want it to.


",chriseppstein,P233
1304,2014-07-31 21:58:57,"@chriseppstein Thank you so much, I understand now.
",P233,chriseppstein
1303,2014-07-04 05:31:16,"Thanks @jina for the effort
",paazmaya,jina
1300,2014-06-27 13:34:41,"Actually it work.... :/ you have to excuse me @chriseppstein for not believe you at the beginning but I can't understand why now it work... I already tried to update compass gem and it didn't work. 

Also I still don't get why one computer works without the need of this gem compass specification and the other don't.

In addiction I can't understand why it complains just about middleman and never talked about compass(which I don't even use in the project !!!) and now is using sass 3.3.8 and middleman doesn't complain anymore   ...!!

Well, thank you anyway @lolmaus (and everybody replay), you made my day!
",gsambrotta,lolmaus
1300,2014-06-27 13:34:41,"Actually it work.... :/ you have to excuse me @chriseppstein for not believe you at the beginning but I can't understand why now it work... I already tried to update compass gem and it didn't work. 

Also I still don't get why one computer works without the need of this gem compass specification and the other don't.

In addiction I can't understand why it complains just about middleman and never talked about compass(which I don't even use in the project !!!) and now is using sass 3.3.8 and middleman doesn't complain anymore   ...!!

Well, thank you anyway @lolmaus (and everybody replay), you made my day!
",gsambrotta,chriseppstein
1298,2014-06-24 18:09:30,"@lolmaus I've heard browsers are already promising to support it, or have already implemented it in their development branches. Two notes: I couldn't find anything for Opera, and IE only has a 'we're looking into it' promise.

https://code.google.com/p/chromium/issues/detail?id=384254
https://bugzilla.mozilla.org/show_bug.cgi?id=1024642
https://bugs.webkit.org/show_bug.cgi?id=133804
https://connect.microsoft.com/IE/feedback/details/895019/support-beccapurple-as-html-named-color
",pdaoust,lolmaus
1298,2014-06-25 03:37:04,"@Snugug duh, of course -- totally forgot that Opera had dropped their own engine. Thanks for the reminder :)
",pdaoust,Snugug
1291,2014-06-24 17:04:09,"@Undeterminant that doesn't work. strings are equal despite their quotes.
",chriseppstein,Undeterminant
1291,2015-11-12 10:14:17,"@Undeterminant - let me give you an example:



`font-family` must have quotes because of the commas. the other properties of `$typography` could be anything. I use this functions which I wrote as helpers for layout variables:



I get an error from SASS:

> DEPRECATION WARNING: Passing 14px, a non-string value, to unquote()
>    will be an error in future versions of Sass.

If I don't use `unquote` in my `typography` function, then the font family won't work in CSS (it must be unquoted)
",yairEO,Undeterminant
1291,2015-11-12 14:07:39,"@yairEO  You don't need quotes here, you need parentheses.


",cimmanon,yairEO
1291,2015-11-12 14:23:07,":+1:@cimmanon's answer is the correct approach, since one of the items in that list may also be quoted: e.g.


",lunelson,cimmanon
1291,2015-11-13 20:33:23,"@nex3 is this ""planned"" to do `str-is-quoted($str)`?
",hcatlin,nex3
1291,2015-11-13 20:49:13,"@hcatlin Quick nit: are there any other types besides a string that can be quoted? Will the function be called `str-is-quoted` or `is-quoted`? Might be good to choose the latter so that any non-string will always return false (e.g. `is-quoted(12)`)
",davidkpiano,hcatlin
1291,2015-11-14 00:39:34,"@nex3 Just clarifying... so in this case, we would name it `str-is-quoted()` until post-4.0 when it will convert to `is-quoted()` with in the `str` package. So this should be implemented as I specified?
",hcatlin,nex3
1289,2014-06-17 20:19:06,"@ezekg, please describe a situation where an API mixin would accept user input with arbitrary styles and override some of them.
",lolmaus,ezekg
1289,2014-06-17 20:33:28,"@lolmaus I'll use the example of a grid system. Assuming the grid system has a global config file, which lets you define a float direction. Let's say we chose a float direction of left, but for a few areas on our project, we need the float direction to be right. It's not logical to have a `$float` argument for the mixin if it would only be used in edge cases, so we can define an exception using the directive that would allow this:



And then you wouldn't get redundant float declarations in your code if you chose to override it. It gives opportunity to create edge case exceptions without defining argument variables that are going to be virtually useless for the typical use case. Additionally, see the example below.

# 

@chriseppstein I agree, that's one of the reasons I created the issue. I'm currently using a similar system where I'm essentially using maps to accomplish this, but I feel like it is a hacky solution when we have a `@content` directive that has the ability to hold all these variables for us.



The former doesn't seem like it's a solution, but rather a workaround for something that should be a directive. I really hope that isn't too confusing.

Here's the idea in context,
https://gist.github.com/ezekg/ccf842e5ee74287f1868
",ezekg,chriseppstein
1289,2014-06-17 20:33:28,"@lolmaus I'll use the example of a grid system. Assuming the grid system has a global config file, which lets you define a float direction. Let's say we chose a float direction of left, but for a few areas on our project, we need the float direction to be right. It's not logical to have a `$float` argument for the mixin if it would only be used in edge cases, so we can define an exception using the directive that would allow this:



And then you wouldn't get redundant float declarations in your code if you chose to override it. It gives opportunity to create edge case exceptions without defining argument variables that are going to be virtually useless for the typical use case. Additionally, see the example below.

# 

@chriseppstein I agree, that's one of the reasons I created the issue. I'm currently using a similar system where I'm essentially using maps to accomplish this, but I feel like it is a hacky solution when we have a `@content` directive that has the ability to hold all these variables for us.



The former doesn't seem like it's a solution, but rather a workaround for something that should be a directive. I really hope that isn't too confusing.

Here's the idea in context,
https://gist.github.com/ezekg/ccf842e5ee74287f1868
",ezekg,lolmaus
1289,2014-06-17 20:36:14,"This is a feature we decided long ago not to support, and our reasoning then still holds true now.

At a high level, features like this treat the document structurally rather than semantically. What I mean by that is that they ignore how the styles will apply to HTML (the semantics), and instead focus just on how they exist in the document: what properties are contained within each rule block, what specific selectors are used for each rule, etc. (the structure).

In a more practical sense, in CSS writing `.foo {color: blue} .foo {font-weight: bold}` means the same thing as `.foo {color: blue; font-weight: bold}`. Providing a way to say ""get all the properties in the current block"" or even ""get all the properties for a given selector"" is bad because it violates this invariant. It also violates the relationships between selectors: the properties in `.foo .bar { ... }` should sometimes interact with those in `.bar { ... }`, and features like this are fundamentally unable to handle that complexity, because they work structurally.

This is the same reason [`@extend` works the way it does](https://github.com/sass/sass/issues/1284#issuecomment-46055417).

@chriseppstein I like your proposal better, because it captures a well-defined and explicitly-provided structure rather than looking up external structure in the problematic way I described above. A lot of thought would have to be put into the capturing syntax, though, as well as the SassScript representation of the captured structure.
",nex3,chriseppstein
1289,2014-06-17 20:48:41,"@ezekg, Sass has both named arguments and argument defaults. Your example is _perfectly_ solved with that:



Not only this is already possible with Sass, but this syntax is shorter than what you suggest and allows customization (e. g. automatically apply margins on the given direction of floating).

And if your case is VERY rare, you can just override defaults below the mixin call, producing slight duplication. But who cares, it's just a very rare duplicate line. Gzip will squash it anyway.

I don't imply that your idea is worthless. I say that you haven't yet provided an example of a situation where this approach would be beneficial.

@chriseppstein, i think that maps are being overabused lately. I'm worried that introducing subj will further encourage people to create needlessly complex meta Sass code.

![Put everything into maps!](http://i.imgur.com/jUasNVg.png)
",lolmaus,chriseppstein
1289,2014-06-17 20:48:41,"@ezekg, Sass has both named arguments and argument defaults. Your example is _perfectly_ solved with that:



Not only this is already possible with Sass, but this syntax is shorter than what you suggest and allows customization (e. g. automatically apply margins on the given direction of floating).

And if your case is VERY rare, you can just override defaults below the mixin call, producing slight duplication. But who cares, it's just a very rare duplicate line. Gzip will squash it anyway.

I don't imply that your idea is worthless. I say that you haven't yet provided an example of a situation where this approach would be beneficial.

@chriseppstein, i think that maps are being overabused lately. I'm worried that introducing subj will further encourage people to create needlessly complex meta Sass code.

![Put everything into maps!](http://i.imgur.com/jUasNVg.png)
",lolmaus,ezekg
1289,2014-06-17 20:58:08,"@lolmaus I know about named arguments and argument defaults. I updated my post above with another example, as well as the full use-case for a feature like this. https://gist.github.com/ezekg/ccf842e5ee74287f1868

Using maps seems very hacky and like @chriseppstein said, not like CSS.
",ezekg,chriseppstein
1289,2014-06-17 20:58:08,"@lolmaus I know about named arguments and argument defaults. I updated my post above with another example, as well as the full use-case for a feature like this. https://gist.github.com/ezekg/ccf842e5ee74287f1868

Using maps seems very hacky and like @chriseppstein said, not like CSS.
",ezekg,lolmaus
1289,2014-06-17 21:02:22,"@ezekg, still a synthetic example. Can you describe a situation where this approach is very very necessary?
",lolmaus,ezekg
1289,2014-06-17 21:03:14,"@nex3 I agree. That gist is something we can throw darts at if you're intested in pursuing this.

@lolmaus I don't want people to put styles into maps. That's _exactly_ what I'm trying to avoid. We can say ""don't do that"" but if people want to write powerful pure-sass implementations of non-trivial things, they end up _having_ to do that. Consider a RTL flipping feature. Sure you can make `$right` and `$left` variables and set them to the opposite value, but a proper implementation is property aware and transforms things like the border shorthand when 4 values are provide by swapping the 2nd and 4th values. Should people have to know to call `@include rtl-border(2px, 4px, 2px, 6px)`? to get things flipped correctly? What if they are using a library that doesn't include RTL support but writes a border property out. What if you just forget to call the RTL-based mixins one time because you're coding bleary eyed at 2am to hit a deadline tomorrow. There are features like this (vendor expansion is another one) where you mostly want an opt-out strategy instead of an opt-in strategy that mixins provide. For this reason `@include rtl { ... arbitrary sass stuff ... }` and `@include vendor-prefixed { ... arbitrary sass stuff ... }` make a lot more sense to the average programmer.

Furthermore, we know that there is demand for such a feature because this is essentially what https://github.com/reworkcss/rework is only they use JS instead of the writing this feature in the stylesheet syntax itself which severely limits the portability of stylesheets written on rework. Like LESS and the CSS syntax, I think this is a place where we can take Sass in a direction that is clear and with an API that is more flexible and has fewer downsides.
",chriseppstein,nex3
1289,2014-06-17 21:03:14,"@nex3 I agree. That gist is something we can throw darts at if you're intested in pursuing this.

@lolmaus I don't want people to put styles into maps. That's _exactly_ what I'm trying to avoid. We can say ""don't do that"" but if people want to write powerful pure-sass implementations of non-trivial things, they end up _having_ to do that. Consider a RTL flipping feature. Sure you can make `$right` and `$left` variables and set them to the opposite value, but a proper implementation is property aware and transforms things like the border shorthand when 4 values are provide by swapping the 2nd and 4th values. Should people have to know to call `@include rtl-border(2px, 4px, 2px, 6px)`? to get things flipped correctly? What if they are using a library that doesn't include RTL support but writes a border property out. What if you just forget to call the RTL-based mixins one time because you're coding bleary eyed at 2am to hit a deadline tomorrow. There are features like this (vendor expansion is another one) where you mostly want an opt-out strategy instead of an opt-in strategy that mixins provide. For this reason `@include rtl { ... arbitrary sass stuff ... }` and `@include vendor-prefixed { ... arbitrary sass stuff ... }` make a lot more sense to the average programmer.

Furthermore, we know that there is demand for such a feature because this is essentially what https://github.com/reworkcss/rework is only they use JS instead of the writing this feature in the stylesheet syntax itself which severely limits the portability of stylesheets written on rework. Like LESS and the CSS syntax, I think this is a place where we can take Sass in a direction that is clear and with an API that is more flexible and has fewer downsides.
",chriseppstein,lolmaus
1289,2014-06-17 21:11:15,"@chriseppstein, thank you for a convincing example. It's hard to disagree.

But when i was reading your example, i thought that dynamic RTL/LTR support is a very advanced and very rare feature. That a person doing it is ready to withstand extra difficulty and complexity. Are there more common use cases for that?

The second thing that i thought about is that your examples are an ideal case for a CSS postprocessor. Then i read you mentioning Rework and googled up this: https://github.com/sindresorhus/gulp-rework .
",lolmaus,chriseppstein
1289,2014-06-18 13:35:07,"@lolmaus so, we should resort to a post-processor to clean up messy code instead of preventing it in the first place? Isn't that in opposition to the point you just made earlier about messy code? Just because the person is more advanced in the language **does not** mean that they should have to deal with extra complexity and hacky workarounds.

@chriseppstein I just looked over your gist and I really, really like your syntax. Being able to capture only the data you need would be immensely beneficial. Having a JSON-esque capture map like you had in the comments would be great.
",ezekg,chriseppstein
1289,2014-06-18 13:35:07,"@lolmaus so, we should resort to a post-processor to clean up messy code instead of preventing it in the first place? Isn't that in opposition to the point you just made earlier about messy code? Just because the person is more advanced in the language **does not** mean that they should have to deal with extra complexity and hacky workarounds.

@chriseppstein I just looked over your gist and I really, really like your syntax. Being able to capture only the data you need would be immensely beneficial. Having a JSON-esque capture map like you had in the comments would be great.
",ezekg,lolmaus
1289,2014-06-18 13:41:49,"@ezekg, i didn't say that you should. I only meant that if you're already in a desperate need for clean-up routines, there are tools you can start using right away.

I like @chriseppstein's approach as much as you do, though it still seems to be very hard to deal with all edge cases when parsing JSONified (mapified) styles.
",lolmaus,chriseppstein
1289,2014-06-18 13:41:49,"@ezekg, i didn't say that you should. I only meant that if you're already in a desperate need for clean-up routines, there are tools you can start using right away.

I like @chriseppstein's approach as much as you do, though it still seems to be very hard to deal with all edge cases when parsing JSONified (mapified) styles.
",lolmaus,ezekg
1289,2014-06-18 13:51:54,"@Anahkiasen, that's because @nex3 closes most feature requests right away, but this time he made an exception. :)
",lolmaus,nex3
1289,2014-06-18 13:51:54,"@Anahkiasen, that's because @nex3 closes most feature requests right away, but this time he made an exception. :)
",lolmaus,Anahkiasen
1289,2014-06-27 03:31:48,"@nex3 @chriseppstein I think we should continue to discuss a feature like this.
",ezekg,nex3
1289,2014-06-27 03:31:48,"@nex3 @chriseppstein I think we should continue to discuss a feature like this.
",ezekg,chriseppstein
1287,2014-06-16 18:56:51,"@lolmaus it looks like this is requesting a source-to-source transformation, not an output optimization.

@savingschampion doing this with intervening source code is unsafe, since the order of rules matters to CSS.
",nex3,savingschampion
1287,2014-06-16 18:56:51,"@lolmaus it looks like this is requesting a source-to-source transformation, not an output optimization.

@savingschampion doing this with intervening source code is unsafe, since the order of rules matters to CSS.
",nex3,lolmaus
1287,2014-06-17 09:49:24,"@nex3 Sass wouldn't decide the order of the source, it would replicate the current order. All it would do is merge duplicate branches, keeping duplicate style attributes in  previously declared order. Unless there is something I'm missing?
",savingschampion,nex3
1287,2014-06-17 14:51:56,"@savingschampion the element `img` in your second example could be matched by a multitude of selectors, not just the ones prefixed with `.img-container`.

Which selectors match is not determinable by sass, therefore it should not change the order of selectors - even the ones which seem not to be related.

_edit: some code_ 





Here you can't merge the `.img-container .img` at the bottom with the top one.
",apfelbox,savingschampion
1282,2014-06-14 09:54:20,"@lolmaus +1

@nex3 In recent releases of Ruby Test::Unit has been deprecated in favour of minitest
",movitto,nex3
1282,2014-06-14 09:54:20,"@lolmaus +1

@nex3 In recent releases of Ruby Test::Unit has been deprecated in favour of minitest
",movitto,lolmaus
1282,2014-06-28 00:11:16,"@nex3, hey srry for belated response. Had missed a few instances where the old API was used. Travis is now green.
",movitto,nex3
1277,2014-06-10 15:31:03,"@Snugug Thanks for fast response. I read these posts earlier. I'm aware of these changes.
What doesn't change the fact that I can't use multiple selectors now...

In my current project I used a lot of multiple classes selectors like the example above.
It would be great if I could get the string in some way from ampersand (&) and use interpolation like this



Any ideas to solve this problem?
",hinok,Snugug
1275,2014-06-14 10:26:05,"@nex3 done. I hope I've handled it correctly. I'm presuming we don't need to handle `$keys` as a keyword argument.
",myabc,nex3
1270,2014-06-06 20:50:07,"Scientific notation is currently only supported on the master branch.

On stable, what's going on here is that `1E5DF` is being parsed as two values, just as @FWeinb said: `1E` and `5DF`. When serializing a space-separated list of values, Sass always separates them with spaces.

However, Sass also includes some heuristics for determining when a plain property declaration doesn't need to be parsed, which allows it to parse the file faster. `raw: 1E5DF` falls under these heuristics, which means that Sass doesn't parse it at all and just emits it as-is. That's why it doesn't get a space.
",nex3,FWeinb
1269,2014-06-06 01:14:40,"@andrew Thanks!
",chriseppstein,andrew
1269,2014-06-06 21:02:48,"@nex3 you'll need to be the one who does this. I don't have admin access to the sass repo. Let me know what you need.
",chriseppstein,nex3
1266,2014-06-04 08:37:27,"@lolmaus: @kalopsia just wants the system to be so flexible, that the content can either be wrapped by a regular class, or by a `@media` tag.
",apfelbox,lolmaus
1266,2014-06-04 09:35:57,"@apfelbox, thx.
",lolmaus,apfelbox
1266,2014-06-04 10:47:04,"@apfelbox, thank you for support. I'm from Russia and my language knowledge is limited :)
@lolmaus thank you for examples, but you the last offered solution is identically to mine (and I have long used it as well as I hadn't asked you how to solve it, so it is not XY problem, but still thx).

From my point of view it will be useful store ""@media"" rule in the string and then escape it. Thats all!)
",timfayz,apfelbox
1266,2014-06-04 10:47:04,"@apfelbox, thank you for support. I'm from Russia and my language knowledge is limited :)
@lolmaus thank you for examples, but you the last offered solution is identically to mine (and I have long used it as well as I hadn't asked you how to solve it, so it is not XY problem, but still thx).

From my point of view it will be useful store ""@media"" rule in the string and then escape it. Thats all!)
",timfayz,lolmaus
1266,2014-06-04 20:47:00,"@lolmaus, I think this comment should be typed first. Explanation why this feature can't be easily implemented much more useful and doesn't cause additional issues.
",timfayz,lolmaus
1266,2014-06-07 08:44:40,"@nex3 , thank you for explanation. 
",timfayz,nex3
1260,2016-04-22 19:49:06,"@biblesyme can you please open a new issue with your stack trace and using the latest version of sass?
",chriseppstein,biblesyme
1256,2014-06-05 00:55:20,"@nex3, you had comments here (https://github.com/nex3/sass/issues/1122#issuecomment-37700189) that succinctly describe why changing how key lookup works might be a good idea. Particularly: ""If [value] doesn't mean the exact same thing in all contexts, even if the differences seem benign, it encourages users to believe that other values may mean different things in other contexts."" and ""...they may (reasonably) suspect that it's because of some other hidden behavior that they're unaware of. Once users start believing this, their belief that they understand what Sass is doing goes down, which means effectively that their understanding goes down as well. This is bad.""
",honzie,nex3
1256,2014-06-06 18:26:48,"@nex3 I'm having a hard time justifying saying no here given that we automatically unquote strings when being interpolated in a selector. An error in all cases would be a better experience, IMO.
",chriseppstein,nex3
1256,2014-06-06 20:55:53,"First of all, it's clear that supporting unquoted map keys causes a substantial amount of confusion with colors. I'm very tempted to just make Sass emit a warning whenever _either_ an unquoted string or a color is used as a map key in a map literal. This does violate the invariant that any Sass value can be used as a key, but I think (given that these keys may be added programmatically) the benefit of driving users towards quoted keys will be worth the pain.

@chriseppstein, I don't understand the relevance of automatically unquoting strings.
",nex3,chriseppstein
1256,2014-06-06 21:01:32,"> Sass emit a warning whenever either an unquoted string or a color is used as a map key in a map literal.

:-1: That is going to cause a lot of heartache and ugly code.

@nex3 this isn't a map problem. it's a color output problem. that has been the source confusion for quite some time even before maps. The issue only matters when the keys are placed into selectors.
",chriseppstein,nex3
1256,2014-06-06 21:48:26,"@nex3 We currently automatically unquote any quoted string that is interpolated into a selector because we know that quotes are not legal in that context. So my point is that we already are special-casing output of interpolation in a selector.

I see two possible approaches. We make it so that in a selector context named colors always output as a string instead of as a color irrespective of the output format if the color is a named color. If the color is not a named color, it would be illegal syntax in all output modes. Alternatively, we simply outlaw color being output in a selector context even for named colors.
",chriseppstein,nex3
1256,2015-12-19 10:21:18,"@nex3 good point!

> Sass interprets property values in the same way CSS does

This is a crucial insight. The problem case is when Sass interprets things which aren't property values (they're keys in a map, which is a data structure with no CSS equivalent) as if they were.

> why color functions don't work with named colors

This is perhaps they key to fixing this. The only time Sass functionality depends upon colour interpolation is when is when it needs to operate upon said colours. This is similar to how jQuery methods involving animation will try to interpret a passed in strings of `slow` & `fast` as indicating a duration of 600 or 200 milliseconds respectively.

These insights suggests 2 concrete methods for fixing the issue:
1. Make colour string interpretation a feature of colour functions - ie only perform it when we need to manipulate colours
2. Only interpret colour strings when they are used as property values

There is still a problem space around the fact that 'colors' are a basic type in Sass, which raises some expectations. The documentation makes explicit reference to this (and the issue that you have to quote CSS-valid color names if you intend to use them as strings) [here](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#colors).

The reason this is problematic is that users might write their own functionality which depends upon `type-of( red ) === color` and pre-conversion for manipulation. But AFAICT this does not predicate that all string color references be pre-converted to hex references - it just demands that the color type be extended to allow and recognise strings. So the solution then seems to be:
- Recognise CSS color string input as entities of type color, but do not prematurely transform them into shortest possible hex representation by default. 

We already have things like alpha manipulation on strings which may otherwise be output as short-form hex, so it's not as if Sass isn't capable of intelligently keeping color references in memory as flexible types capable of a variety of outputs. So I would prefer us to stick to the first solution, and fall back to the second if that isn't possible - in which case we'd probably have to introduce coercion logic for string comparison (such that `red == 'red'`, similar to how `1 == '1'`).

I tried reading the test suite to see if these expectations are tested for, but couldn't really make heads or tails of it. Would a straight functional PR be good, or do we need to write the tests that guard against violating these expectations?
",barneycarroll,nex3
1256,2015-12-19 10:25:59,"@nex3 sorry, just reading back through the thread again - is this suggestion what the v4 alpha commit [here](https://github.com/sass/sass/commit/5bba828be89461043564911a7cdf08eec35dc359) is about?
",barneycarroll,nex3
1254,2014-05-20 20:45:11,"@nordfjord that's a different error message. That looks like your load paths are mixing UTF-8 and CP850 character encodings, which probably indicates a configuration issue on your end.
",nex3,nordfjord
1253,2014-05-19 10:04:33,"@lolmaus the spec http://www.w3.org/TR/CSS2/syndata.html#charset says: 

>  @charset must be written literally, i.e., the 10 characters '@charset ""' (lowercase, no backslash escapes), followed by the encoding name, followed by '"";'.
",mprins,lolmaus
1253,2014-05-19 10:10:23,"Thank you for correcting me, @mprins. I've looked into a more recent spec:
- http://www.w3.org/TR/css3-syntax/#determine-the-fallback-encoding
- http://www.w3.org/TR/css3-syntax/#charset-rule

and found that the `@charset` rule was regulated by the CSS2 spec to be parsed in binary form. O_o Thus, case sensitivity.
",lolmaus,mprins
1253,2014-05-19 12:34:49,"@lolmaus actually, the spec doesn't exactly say, that it is case insensitive.

The `@charset""` is parsed binary, then encoding `XX*`, then `"";`.
The encoding `XX*` is interpreted as ASCII (doesn't say anything about case (in)sensitivity).

> Otherwise, check the byte stream. If the first 1024 bytes of the stream begin with the hex sequence
> 40 63 68 61 72 73 65 74 20 22 XX\* 22 3B
> where each XX byte is a value between 016 and 2116 inclusive or a value between 2316 and 7F16 inclusive, then get an encoding for the sequence of XX bytes, interpreted as ASCII. 

But: the spec itself uses lowercase, so...

> [...]
> If neither of these options are available, authors should begin the stylesheet with a UTF-8 BOM or the exact characters
> 
> @charset ""utf-8"";
",apfelbox,lolmaus
1253,2014-05-20 07:35:56,"@nex3 are you sure about that? The first link from @lolmaus mentions

> 4) Otherwise, use utf-8 as the fallback encoding.
",apfelbox,nex3
1253,2014-05-20 07:35:56,"@nex3 are you sure about that? The first link from @lolmaus mentions

> 4) Otherwise, use utf-8 as the fallback encoding.
",apfelbox,lolmaus
1251,2014-05-19 21:38:02,"Why are you nesting this?

Edit: I see your explanation now. @apfelbox is right, you need to use @root with this.

@nex3 I think it's a bug that @font-face bubbles.
",chriseppstein,apfelbox
1251,2014-05-19 21:43:15,"@atombender, I understand the intent of nesting, but the font-face declaration won't actually do anything unless the new font-family name you've declared is referenced. You can namespace the font family name if you want make certain the name doesn't ""leak"" out of your widget.


",xiwcx,atombender
1251,2014-05-30 18:34:06,"@chriseppstein Handling this is an interesting question. It's an intentional feature that unknown directives are bubbled (b8f4bab008b196b2ed8028635beb932533caa72c), and currently we have no special logic for `@font-face` so it falls into this category.

I'm a little leery of adding this sort of special logic; it violates our general policy of encoding the semantics of specific CSS identifiers as little as possible. If we add support for top-level-only directives, we'll need to do so for all directives that we currently know are top-level-only, which in turn means that new directives that are top-level-only may violate user expectations. I'd kind of prefer to just leave the behavior as-is.
",nex3,chriseppstein
1250,2014-05-15 11:06:43,"my god... I'm a dumbass...

Thanks @Snugug
",larrybotha,Snugug
1247,2014-05-28 19:23:37,"Having a map like @chriseppstein described would be cool, but I think I'm kind of nerdy about this. A string is probably well enough for most cases.
",HugoGiraudel,chriseppstein
1247,2015-06-12 11:35:07,"@chriseppstein What is the status on this? :)
",HugoGiraudel,chriseppstein
1243,2014-05-09 20:40:20,"@nex3 I think the proposed behavior is more in line with the way we handle directive bubbling and would make sass more consistent. There are some theoretical changes to cascade resolution if we made this change. We can detect this (same property used by a selector with the same specificity) and deprecate it. Honestly, I don't think it will affect that many users. They can either move the property or repeat the selector during the deprecation phase.

I think it's a good change to make, but I also don't consider it high-priority. this behavior has been in place since day one and we haven't gotten many complaints.
",chriseppstein,nex3
1243,2014-05-09 20:46:29,"@nex3 and @chriseppstein Thanks for the consideration -- I can imagine that it's a difficult issue now that this is out in the wild. I figured that a number of people would be relying on the current behaviour (either intentionally or unintentionally). I thought of suggesting a compiler option, but that doesn't feel right because a Sass file should always compile down to the same CSS file (compression settings notwithstanding).

Anyhow, if nothing ever happens on this front, I'll be okay. I've got other ways to skin this cat; e.g., the above pattern where I wrap the remaining stuff in an `& { }` selector.
",pdaoust,nex3
1243,2014-05-09 20:46:29,"@nex3 and @chriseppstein Thanks for the consideration -- I can imagine that it's a difficult issue now that this is out in the wild. I figured that a number of people would be relying on the current behaviour (either intentionally or unintentionally). I thought of suggesting a compiler option, but that doesn't feel right because a Sass file should always compile down to the same CSS file (compression settings notwithstanding).

Anyhow, if nothing ever happens on this front, I'll be okay. I've got other ways to skin this cat; e.g., the above pattern where I wrap the remaining stuff in an `& { }` selector.
",pdaoust,chriseppstein
1242,2014-05-06 17:02:25,"The syntax you're looking for is:



You pass in the variable name as a string because, if you pass in `$variable` it'll try to pass the value of a potentially non-existent variable.

**Edit**: @lolmaus I see you beat me to it :) I started writing this before I went for coffee.
",pdaoust,lolmaus
1237,2014-05-02 19:35:26,"Interesting, thanks for that link, @robocoder.
",nex3,robocoder
1227,2014-07-30 06:41:40,"@nex3
What if sass would detect automatically, where the variable is used and writes the new calculated properties into that media query?

For example:



At compiling sass detects where the variable $container-width is used and compiles to:


",bahuma20,nex3
1224,2014-04-22 07:49:42,"@lolmaus I think you'll have to write a function to test approximate equality. The difference is about 0.0000000000001 something like that (but I did one test only with 0.1 + 0.02)
",cahnory,lolmaus
1224,2014-04-22 14:43:29,"And then you'll can't differentiate 0.12 from 0.11999999999999‚Ä¶ and that's another issue. Like @HugoGiraudel said, Javascript has the same problem and @nex3 seems to say that the issue is related to float number and not just sass. In fact I'm pretty sure I saw a floating number issue with PHP too but can't remember it.
I'm not saying there is no solution but that it seems to be a language agnostic unsolved issue ;).
",cahnory,HugoGiraudel
1224,2014-04-22 14:43:29,"And then you'll can't differentiate 0.12 from 0.11999999999999‚Ä¶ and that's another issue. Like @HugoGiraudel said, Javascript has the same problem and @nex3 seems to say that the issue is related to float number and not just sass. In fact I'm pretty sure I saw a floating number issue with PHP too but can't remember it.
I'm not saying there is no solution but that it seems to be a language agnostic unsolved issue ;).
",cahnory,nex3
1224,2014-04-24 19:00:33,"@chriseppstein, thank you for supporting the discussion.

Creating such a function is trivial. The problem here is that it's very bulky to use.

What about creating a group of approximate comparison operators, with tolerance controlled by a configuration variable? I'd suggest putting the variable onto the upcoming `sass.json`, but i've got a feeling that @nex3 will be against exposing a variable, changing which can break edge cases. Thus, my suggestion is Compass extension style:



It is still very new and embarrasing to me that approximate comparison for flawed floats is missing in stdlibs of all languages. So i've got no idea whether my suggestion is rational. It seems very rational to myself. :)
",lolmaus,nex3
1224,2014-04-24 19:00:33,"@chriseppstein, thank you for supporting the discussion.

Creating such a function is trivial. The problem here is that it's very bulky to use.

What about creating a group of approximate comparison operators, with tolerance controlled by a configuration variable? I'd suggest putting the variable onto the upcoming `sass.json`, but i've got a feeling that @nex3 will be against exposing a variable, changing which can break edge cases. Thus, my suggestion is Compass extension style:



It is still very new and embarrasing to me that approximate comparison for flawed floats is missing in stdlibs of all languages. So i've got no idea whether my suggestion is rational. It seems very rational to myself. :)
",lolmaus,chriseppstein
1223,2014-04-21 19:44:38,"@Snugug Oh ok, well that makes sense now.

I was using the article below as a reference, but I can see that `tint()` and `shade()` are part of [Bourbon](http://bourbon.io/), and I was mistaken to think that they were Sass color functions. 

http://robots.thoughtbot.com/controlling-color-with-sass-color-functions

Looking forward to Sass supporting `tint()` and `shade()` some time soon.

Thanks!
",ricardozea,Snugug
1220,2014-04-18 20:44:35,"@nex3 rather than abruptly closing this PR, please describe ""weird global effects"" and other concerns you have.  The paths feature is explicitly requested in import_v2 wishlist and something that the community finds value in, but you seem to disagree here.  Paths is a basic feature and critical to how other static file tools use ie. RequireJS.

If you can describe your thoughts on this matter, we can find a solution to implementing this feature.

#1094 

### Paths

A way to setup shortcut paths (like Require.js)

// No syntax intended, only the purpose


",drewwells,nex3
1220,2014-04-18 22:55:14,"@nex3 My comment was directed to @drewwells and @emphaticsunshine. I don't understand why the features in Sass 3.3 are not sufficient for them.
",chriseppstein,emphaticsunshine
1220,2014-04-18 22:55:14,"@nex3 My comment was directed to @drewwells and @emphaticsunshine. I don't understand why the features in Sass 3.3 are not sufficient for them.
",chriseppstein,nex3
1220,2014-04-18 22:55:14,"@nex3 My comment was directed to @drewwells and @emphaticsunshine. I don't understand why the features in Sass 3.3 are not sufficient for them.
",chriseppstein,drewwells
1220,2014-04-18 23:02:12,"@chriseppstein, what feature?

> Imports may contain #{} interpolation, but only with certain restrictions. It‚Äôs not possible to dynamically import a Sass file based on a variable; interpolation is only for CSS imports. As such, it only works with url() imports. For example:

Issues have been filed #1218 , but marked as duplicate #739, a ticket with no obvious objective.
",drewwells,chriseppstein
1220,2014-04-18 23:09:16,"@drewwells In that ticket, @nex3 explained that you can define a mixin that implements the branching logic that you need.

#739 is a generic proposal to allow interpolation within and conditionals around @import statements.
",chriseppstein,nex3
1220,2014-04-18 23:09:16,"@drewwells In that ticket, @nex3 explained that you can define a mixin that implements the branching logic that you need.

#739 is a generic proposal to allow interpolation within and conditionals around @import statements.
",chriseppstein,drewwells
1220,2014-04-18 23:44:57,"You're saying we should put our entire codebase in mixins?  If I told my
team that is the solution offered by SASS, they would throw me in the mad
house.

On Fri, Apr 18, 2014 at 6:09 PM, Chris Eppstein notifications@github.comwrote:

> @drewwells https://github.com/drewwells In that ticket, @nex3https://github.com/nex3explained that you can define a mixin that implements the branching logic
> that you need.
> 
> #739 https://github.com/nex3/sass/issues/739 is a generic proposal to
> allow interpolation within and conditionals around @importhttps://github.com/importstatements.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/1220#issuecomment-40852242
> .
",drewwells,drewwells
1217,2014-04-16 21:28:45,"Yep, this is a duplicate. Thanks @cimmanon.
",nex3,cimmanon
1213,2014-04-12 01:00:11,"@nex3 - You already do this for variables (making $foo-bar and $foo_bar equivalent). I think this is simply an extension of the policy to be code aesthetic neutral. It would make it possible to actually choose best in class components rather than being stuck choosing monolithic libraries. IMO, that makes it worthy of Sass-core.

@cimmanon - You already have to be careful about name collisions & scope when using multiple libraries. Hopefully, being able to choose best in class components rather than getting stuck with an entire library would mean that components that are not scoping well and/or using generic class names would be much less likely to be used. 
",stubbornella,nex3
1213,2014-04-12 01:00:11,"@nex3 - You already do this for variables (making $foo-bar and $foo_bar equivalent). I think this is simply an extension of the policy to be code aesthetic neutral. It would make it possible to actually choose best in class components rather than being stuck choosing monolithic libraries. IMO, that makes it worthy of Sass-core.

@cimmanon - You already have to be careful about name collisions & scope when using multiple libraries. Hopefully, being able to choose best in class components rather than getting stuck with an entire library would mean that components that are not scoping well and/or using generic class names would be much less likely to be used. 
",stubbornella,cimmanon
1213,2014-04-12 01:29:27,"@nex3 Enabling mix-and-match frameworks is a core use case for sass. Every framework that generates selectors could build selector style generation into their capabilities but that's a lot of work and it's unlikely that any framework would do this given the readability impact to their code.

@snugug That would be fine if the framework exposes a placeholder API, but this use case is to support frameworks that are generating css selectors. Extend is not a good way to accomplish this.
",chriseppstein,nex3
1213,2014-04-12 02:05:26,"Yeah, these libs aren't built with placeholder selectors. You could argue that they should be, but I'm not so sure since you do end up wanting to use most of their classes and it would make interacting with the libraries much more complex.

On Sat, Apr 12, 2014 at 11:29 AM, Chris Eppstein notifications@github.com
wrote:

> @nex3 Enabling mix-and-match frameworks is a core use case for sass. Every framework that generates selectors could build selector style generation into their capabilities but that's a lot of work and it's unlikely that any framework would do this given the readability impact to their code.
> 
> ## @snugug That would be fine if the framework exposes a placeholder API, but this use case is to support frameworks that are generating css selectors. Extend is not a good way to accomplish this.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/1213#issuecomment-40268300
",stubbornella,nex3
1213,2014-04-12 02:23:13,"@chriseppstein I'd argue that the core ask is to be able to normalize class names across multiple frameworks in a controlled way. Assuming an individual framework doesn't share the exact same class name (and said class name doesn't do something different across multiple frameworks) that `@extend` would work for that. If it doesn't fit that case, you'll have a problem regardless of if Sass did it automatically or not. Ideal, no, but a totally workable solution.
",Snugug,chriseppstein
1213,2014-04-12 10:44:58,"@chriseppstein I happen to know that the frameworks she's talking about so not use compound class selectors so while you are absolutely correct, that is not the use case here.
",Snugug,chriseppstein
1213,2014-04-14 23:07:03,"@stubbornella Hyphen-neutrality in variables and mixins is less about a policy of being aesthetically neutral and more about historical backwards-compatibility with stylesheets that were written before we allowed hyphens in Sass identifiers.

@chriseppstein We can support this explicitly by supporting the ability to `@use` a stylesheet in a way that makes its selectors visible for extension but not emitted directly to the stylesheet. That's a feature I'd like to support anyway, and it supports arbitrary remappings in addition to the specific ones requested here.

I don't like how implicit this is; I don't like command-line flags modifying the behavior of stylesheets; I don't like plain CSS having different semantics than it would in the browser; and I don't like building in knowledge of naming styles to Sass. There are a lot of things going against this change, and I don't see much reason not to just handle it externally or explicitly.
",nex3,chriseppstein
1213,2014-04-14 23:07:03,"@stubbornella Hyphen-neutrality in variables and mixins is less about a policy of being aesthetically neutral and more about historical backwards-compatibility with stylesheets that were written before we allowed hyphens in Sass identifiers.

@chriseppstein We can support this explicitly by supporting the ability to `@use` a stylesheet in a way that makes its selectors visible for extension but not emitted directly to the stylesheet. That's a feature I'd like to support anyway, and it supports arbitrary remappings in addition to the specific ones requested here.

I don't like how implicit this is; I don't like command-line flags modifying the behavior of stylesheets; I don't like plain CSS having different semantics than it would in the browser; and I don't like building in knowledge of naming styles to Sass. There are a lot of things going against this change, and I don't see much reason not to just handle it externally or explicitly.
",nex3,stubbornella
1212,2014-04-10 01:00:42,"@chadjuehring If you run: 
`sudo ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future gem update`
and allow all of your gems do update, can you then compile?
",tbremer,chadjuehring
1212,2014-04-11 20:06:42,"You shouldn't need to install any extra gems to use `sass --watch`. It includes a bundled version of `listen` which should work out of the box, in part because gems like `nio4r` are so difficult to install.

@tbremer Can you provide an example stylesheet directory that you're seeing compilation problems on? Also, can you run `gem list listen` and include the output here?

@chadjuehring Can you run `sass --trace --watch` in the directory you were seeing the sqlite3 error in and include the output here? There shouldn't be anything loading sqlite3 at all, so that's very puzzling. It may also help if you can include the output of `gem list listen` as well.
",nex3,tbremer
1212,2014-04-11 20:06:42,"You shouldn't need to install any extra gems to use `sass --watch`. It includes a bundled version of `listen` which should work out of the box, in part because gems like `nio4r` are so difficult to install.

@tbremer Can you provide an example stylesheet directory that you're seeing compilation problems on? Also, can you run `gem list listen` and include the output here?

@chadjuehring Can you run `sass --trace --watch` in the directory you were seeing the sqlite3 error in and include the output here? There shouldn't be anything loading sqlite3 at all, so that's very puzzling. It may also help if you can include the output of `gem list listen` as well.
",nex3,chadjuehring
1212,2014-04-11 20:56:19,"I can't fathom why running Sass would try to _compile_ sqlite3. @chadjuehring, did it look like it was actively compiling, or just printing some output that was stored somewhere?

If anyone else is seeing this issue, getting a stack trace for it would be great.
",nex3,chadjuehring
1212,2014-04-11 21:04:50,"From what i could tell, it seemed to be dumping the contents of a
gem_make.out file, but unfortunately I also have absolutely zero idea why
that would happen.

On Fri, Apr 11, 2014 at 3:56 PM, Nathan Weizenbaum <notifications@github.com

> wrote:
> 
> I can't fathom why running Sass would try to _compile_ sqlite3.
> @chadjuehring https://github.com/chadjuehring, did it look like it was
> actively compiling, or just printing some output that was stored somewhere?
> 
> If anyone else is seeing this issue, getting a stack trace for it would be
> great.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1212#issuecomment-40252448
> .
",chadjuehring,chadjuehring
1212,2014-04-12 15:54:07,"@nex3, thanks for the response.... Here is the file structure we are currently using with a little bit of explanation on whats happening:



Here is a screen shot, if that helps visualize anything for you:
![screen shot 2014-04-12 at 10 35 05 am](https://cloud.githubusercontent.com/assets/2998575/2687511/4819b974-c25a-11e3-8c75-53f656f0c87e.png)

Next: if i run `gem list listen` the output it:



If I run: `gem list` I get:



And, finally here is the sass --watch I will typically run for this project: 



When I run said watch (with changes) this is the output:



Edit note: I have tried creating the directories directly & not symlinking anything with no positive results.
",tbremer,nex3
1212,2014-04-14 22:38:22,"@tbremer is there any chance you could tar up your directory and send it to me so I can test it locally?
",nex3,tbremer
1212,2014-04-15 16:13:00,"@nex3 gladly -- whats the best way to get this to you?

Also, in preparing to send you the directories I wanted to test everything again.

Uninstalled and reinstalled SASS (it updated to version 3.3.5). I put the directories on my Desktop (~/Desktop) and was able to compile the css as would be expect. Though I did get the ""Listen will fall back to polling"" error.

Are there any known issues of running sass --watch on a separate partition? Like, I have a my User / System HD (Macintosh HD) and a separate partition on the same HD (CODE) where all of my codebases live.

So I am running sass from /Volumes/Macintosh HD & the code is compiling from & to : /Volumes/CODE
",tbremer,nex3
1212,2014-04-15 19:19:32,"> @nex3 gladly -- whats the best way to get this to you?

Email it to nex342@gmail.com.

> Uninstalled and reinstalled SASS (it updated to version 3.3.5). I put the directories on my Desktop (~/Desktop) and was able to compile the css as would be expect. Though I did get the ""Listen will fall back to polling"" error.

It's strange that it would fall back to polling. Do you still have `rb-fsevent` installed?

Does this mean you can no longer reproduce the issue you were seeing earlier?

> Are there any known issues of running sass --watch on a separate partition? Like, I have a my User / System HD (Macintosh HD) and a separate partition on the same HD (CODE) where all of my codebases live.

This shouldn't matter, but it's not impossible that it does. If you can still reproduce the issue, do you also see it if you build the same project on your User partition?
",nex3,nex3
1212,2014-04-15 22:01:17,"@nex3 Emailed!

> It's strange that it would fall back to polling. Do you still have rb-fsevent installed?

You were right about rb-fsevent, I forgot to reinstall after installing SASS again, does not fall back to polling now.

> Does this mean you can no longer reproduce the issue you were seeing earlier?
> This shouldn't matter, but it's not impossible that it does. If you can still reproduce the issue, do you also see it if you build the same project on your User partition?

The error seems to only present when I am running a sass --watch from code partition. I should say I can and have successfully updated my stylesheets by running a sass --update and can compile individual files by pointing to their direct *.scss files
",tbremer,nex3
1212,2014-04-25 21:38:12,"@tbremer I can't reproduce this; I may not be doing it right, or it may be because I'm not on OS X. Can you explain exactly what you're modifying that's causing it not to recompile? Are there any files that _do_ cause it to recompile?

Also, can you reproduce this if you install a different version of listen via `gem install listen`?
",nex3,tbremer
1212,2014-05-07 18:33:45,"I am convinced this is a lone issue that has to do something with our larger file structure. I have tried testing this in many different scenarios and the one thing I keep coming back to is our actual codebase. So, it's something to do with the way that we architected our directory structure.

I have found a suitable work around using FSWatch (from Homebrew) and running a `sass --update $scss:$css` -- while this isn't ideal, it has proven to be stable.

Also @nex3, sorry for the long delay in response time.

I was discussing this with another developer on my team and he is running sass 3.2.19 just fine (without listen work arounds) were there changes in the listen part of the 3.3.x?

Working with the same developer he encounters the same issue with SASS 3.3.7, but is on OSX 10.8, so, it seems to be isolated to our directory structure,  but not to OS version
",tbremer,nex3
1206,2014-04-11 19:45:02,"@pdaoust is right, this is already supported on master.
",nex3,pdaoust
1203,2015-01-30 20:10:45,"@yisibl what do you mean?
",nex3,yisibl
1203,2016-04-11 02:32:03,"@nex3 Sorry, I was wrong. Sass can support all CSS Selectors 4 Syntax in advance.
",yisibl,nex3
1201,2014-04-04 15:37:37,"Hmmm. I would have thought that #363 would have fixed this. Still, @lolmaus is right, if you require an exact string, use quotes for words that are also colors -- compressed output could result in a selector you don't want.
",chriseppstein,lolmaus
1200,2014-04-04 00:10:51,"@HugoGiraudel thanks for the tip, wonder if its been fixed.  @lolmaus I am using the latest version of Sass but I'll verify my Grunt set-up isn't doing something funny.
",ptlu,HugoGiraudel
1200,2014-04-04 00:10:51,"@HugoGiraudel thanks for the tip, wonder if its been fixed.  @lolmaus I am using the latest version of Sass but I'll verify my Grunt set-up isn't doing something funny.
",ptlu,lolmaus
1200,2014-04-04 20:46:30,"@ptlu I'm seeing your expected output on 3.3.4. This looks similar to #1148, so I suspect something about your local setup is misconfigured to use an older version of Sass. Try running `gem uninstall --all sass` and then `gem install sass` to make sure you only have the most recent version installed.
",nex3,ptlu
1199,2014-04-01 22:10:57,"Wowww!!! eval is not evil!!! huauhahu...

@lolmaus How can I make a push for $map in Sass?

**Javascript Example**


",lagden,lolmaus
1199,2014-04-01 22:22:48,"@Anahkiasen, you forgot an assignment and lost a bracket. Should be:



If you're lucky to use Compass and Bundler, try [Sassy Maps](https://github.com/Team-Sass/Sassy-Maps/). They lt you do this:



Saves you one layer of parens.
",lolmaus,Anahkiasen
1196,2014-04-11 01:57:28,"@nex3 I'm working on a fix for [sprockets-sass](https://github.com/petebrowne/sprockets-sass/issues/26), but I could use some input from you.

I could [remove the custom Importer](https://github.com/petebrowne/sprockets-sass/tree/sass-3.3) and follow Sprockets' lead, but I lose some important functionality as a result. Can you think of any other options?

Is the requirement for Importers to be marshalable only affect source maps? Is there a way we can disable that caching if we're not using source maps?
",petebrowne,nex3
1194,2015-10-09 12:51:55,"@nex3 What was the solution for @import directives are not allowed inside mixins and functions? 
",jgacuca567,nex3
1194,2015-10-10 04:32:14,"@nex3 How did you solve the problem? 
",jgacuca567,nex3
1193,2014-04-04 22:45:09,"@nex3 :

How would a module-based import model allow for polyfilling?
",jslegers,nex3
1193,2014-04-05 08:53:44,"@nex3 :

So modules are somewhat like namespaces? I can't really say I favor that...

Also, my use case requires the exact opposite behavior.

Suppose that I'm using Sass in combination with Compass and Cascade Framework :
- If Cascade Framework defines `str-replace`, my custom project will use that definition. If not, it will use its own definition.
- If Compass defines `str-replace`, Cascade Framework will use that definition. If not, it will use its own definition.
- If Sass defines `str-replace`, Compass will use that definition. If not, it will use its own definition.

So the idea is to use the definition of a function defined in the lowest layer of your architecture.
This means that :
- improvements to Sass and Compass will automaticly be included in the higher layers
- functions can be defined once and used everywhere
- missing features in older versions of Sass or Compass will be polyfilled
- deprecated features in newer versions of Sass or Compass will be polyfilled

This should have a positive impact on performance and make any code written in Sass more portable to different versions of Sass.
",jslegers,nex3
1193,2014-04-12 13:55:48,"@nex3 :

**Both techniques increases the portability** of any code between different platforms. They just have different use cases :
- **Namespaces** (which you seem to refer to as modules) are used to define logic specific to a particular library, framework or application. They isolate classes and methods to provide freedom with regards to naming conventions without any risk for conflict with other libraries, frameworks or applications.
- **Polyfilling** is used to add missing features to a language, library or framework that have well-defined specs. Typically, this is used to add features from a newer version of a language to an older version of a language, library or framework or the other way around. It's also used to port popular features of one language, library or framework to another.

I'm not very familiar with Ruby, but polyfilling is commonly used in both PHP and Javascript communities. I don't see any reason why it shouldn't be used in Sass as well...
",jslegers,nex3
1191,2014-03-27 08:28:12,"`sass --trace --watch css/` is not going to resolve your issue. This command will produce a meaningful stacktrace which might help @nex3 to understand the reason behind your issue.
",lolmaus,nex3
1189,2014-04-04 21:07:48,"@nex3 selector comments are on by default in compass. I've fielded countless ""I hate the comments that compass litters my css output with"" Many times they don't even realize that feature can be turned off. even though there's a comment that explains how to do in by default in the configuration file.

I think it's useful, but it's also going to be a support issue. A sass config will significantly improve the experience in either scenario.
",chriseppstein,nex3
1188,2014-03-25 21:43:09,"@xiwcx is right. `@at-root` isn't part of a selector, it's a directive that's followed by a selector.
",nex3,xiwcx
1187,2014-03-25 11:34:08,"@meefox if that is indeed the expected result, this sounds like it's related to, if not a duplicate of, #241 
",Snugug,meefox
1184,2014-03-28 03:44:40,"@phasebash I have [a commit](https://github.com/nex3/sass/commit/dbc8e02cd398d86013859067718e3dc011067358) on the stable_3_2 branch that does exactly that. However, a user reported that it didn't fix the problem. Can you please test against that branch and let me know if it's working for you? I don't have access to a windows box for testing >_<
",chriseppstein,phasebash
1184,2014-03-28 04:08:20,"@phasebash I just installed it :) My email is chris@eppsteins.net thanks!
",chriseppstein,phasebash
1184,2014-03-28 15:40:54,"@phasebash it hasn't been released yet. if you checkout the git repo, switch to that branch, you can then `rake package` to make a gem file that can be installed locally.
",chriseppstein,phasebash
1184,2014-04-04 01:57:58,"@chriseppstein Thanks, I'll try your official patch now.  
",phasebash,chriseppstein
1175,2014-03-17 17:59:42,"Thank you for keeping the 3.2 branch healthy, @chriseppstein.
",lolmaus,chriseppstein
1175,2014-03-17 22:40:26,"@nex3 Yes, I will own the 3.2 stable releases.
",chriseppstein,nex3
1171,2014-03-19 19:56:26,"@nex3 Cool, and thanks. (I assume you refer to sstephenson/sprockets#541? Any other changes I should expect to wait for?)
",smudge,nex3
1167,2014-08-22 14:25:10,"@nex3 It's been five months and my little project ([Inch](http://trivelop.de/inch)) and its badge web service (Inch Pages) have made lots of progress. Actually, Inch Pages, the GitHub Pages powered static jekyll site, is being retired -- it is replaced by [Inch CI](http://inch-ci.org), an actual web service.

Over 200 projects are currently showing these badges in their README and over 100 maintainers have hooked up their projects to be [automatically evaluated](http://inch-ci.org/howto/webhook). I do not mention those things to put peer pressure on you, but to show that I took this ""hunch"" of a project and kept at it. There have been nearly [200 commits](https://github.com/rrrene/inch/compare/02c9016a3e97622d1f513e9d7920a7964b0a7fc4...language-support) to Inch since we last discussed the topic.

I would kindly ask you to review this new iteration of the idea ""badge for inline-docs"". What do you think?
",rrrene,nex3
1166,2014-03-12 17:15:15,"@lolmaus does it require Compass?
",Gespinha,lolmaus
1166,2014-05-22 15:24:12,"@nicooprat Check out #216, sadly this is a long standing bug.
",Arcovion,nicooprat
1166,2017-01-25 21:41:47,"@Anaphase 

SASS > SCSS in the real world. This is just a fluke.",OutThisLife,Anaphase
1166,2017-01-25 21:49:21,"@OutThisLife, So people have been writing all their SASS maps on one line for years and years now? That's insane! That makes SASS totally unusable for me. Back to [Stylus](http://stylus-lang.com/) it is!

Anyway, I see there's more activity over on #216, sorry for bumping this old thread.",Anaphase,OutThisLife
1166,2017-01-25 22:07:18,"@OutThisLife Nothing, really. I'm only looking into SASS because I'm using ZURB Foundation's [Foundation for Emails](http://foundation.zurb.com/emails.html) framework and [their template project](https://github.com/zurb/foundation-emails-template) uses SASS. However, they use `.scss` and I wanted to convert everything over to `.sass` since I prefer whitespace-dependent syntaxes.

Everything was trivial to covert, except for the [maps in the settings file](https://github.com/zurb/foundation-emails-template/blob/14934dbb5777c439caa843052e2e210977fedd35/src/assets/scss/_settings.scss#L97). After lots of debugging, reading documenting, and sifting through error message red herrings, I finally landed here only to discover that the ""solution"" is to just write my map like this:



It's just bizarre to me that people are able to look past this bug and still use SASS... That would drive me nuts. I suppose one workaround would be to just define all your maps in a separate `.scss` file and import them into whatever `.sass` file you want.",Anaphase,OutThisLife
1162,2014-04-25 20:54:41,"Is this still an issue? cc @nathany 
",dodeja,nathany
1162,2014-04-28 21:02:38,"@dodeja Not sure. Still locked to 3.2, I need to try it out.
",nathany,dodeja
1162,2014-07-11 13:39:17,"@dodeja I upgraded to sass 3.3.9 and I'm having the issue with Sprockets.
",YoranBrondsema,dodeja
1162,2014-08-27 17:52:41,"@ogminor  +1
Somebody can explain this?
",the-teacher,ogminor
1156,2014-03-10 18:42:38,"@nex3 listen 2.4.1
I have manually downgraded 'listen' because 2.7 version broke sass starting (as describe in #1151).
But now it don't want to exit properly.
",SamyCookie,nex3
1155,2014-03-10 20:20:54,"@chriseppstein We should use YAML, not JSON. JSON isn't exactly human readable/writable, whereas YAML is, and you can have in-line comments in YAML which makes it much easier to work with in practice.

@lolmaus you are not the community. If we are to have a config file for Sass, it should absolutely, no questions asked, be interoperable between different implementations of Sass. The three formats I can think of that do this are INI (original proposal), JSON, and YAML.
",Snugug,lolmaus
1155,2014-03-10 20:20:54,"@chriseppstein We should use YAML, not JSON. JSON isn't exactly human readable/writable, whereas YAML is, and you can have in-line comments in YAML which makes it much easier to work with in practice.

@lolmaus you are not the community. If we are to have a config file for Sass, it should absolutely, no questions asked, be interoperable between different implementations of Sass. The three formats I can think of that do this are INI (original proposal), JSON, and YAML.
",Snugug,chriseppstein
1155,2014-03-10 20:23:10,"@chriseppstein This [Stack Overflow answer](http://stackoverflow.com/questions/1726802/what-is-the-difference-between-yaml-and-json-when-to-prefer-one-over-the-other#answers-header) sums up fairly well why I like YAML for configuration over JSON. Long story sort, YAML is JSON for humans (heck, it's a superset of JSON and can be turned into valid JSON for machine-readable config)
",Snugug,chriseppstein
1155,2014-03-10 20:25:45,"@Snugug That didn't convince me. Most of the pluses mentioned there make yaml a superior data serialization format (which it is) but not more end-user accessible. Blueprint used to use yaml for configuration and web devs were _very_ confused by it. 
",chriseppstein,Snugug
1155,2014-03-10 20:27:33,"@lolmaus Yes. We agree on that. It's less powerful.
",chriseppstein,lolmaus
1155,2014-03-10 20:27:46,"@chriseppstein Interesting. In my experience dealing with end-users (especially JR web developers) and those coming to configuration for the first time, YAML has been far easier for them to grasp than JSON. Would love to dive into that a bit. The two things I like most about YAML for configuration is you're less likely to get syntax errors as there's hardly a syntax to speak of and you can have comments which I find to be critical to onboarding (hell, even comments in the middle of a nested chain)
",Snugug,chriseppstein
1155,2014-03-10 21:01:13,"I think both YAML and JSON are good options. I agree with @Snugug that YAML is simpler/easier to read and quite common, but I have no problem with JSON. YAML feels like markdown, like it was written for humans. JSON feels like it was written for computers. 
",mirisuzanne,Snugug
1155,2014-03-10 21:02:10,"@lolmaus I'm not particularly interested in the configuration being powerful. If you value power over simplicity, you can easily write a script that spins up `sass --watch`. I am interested in it being safe, compatible, and easy to use.

@chriseppstein We've been using YAML as the configuration syntax for [Pub](http://pub.dartlang.org/) with good results. JSON is not well-suited for human modification, despite being widely-known. It doesn't support comments, and it requires verbose punctuation for even the simplest examples.
",nex3,chriseppstein
1155,2014-03-10 21:02:10,"@lolmaus I'm not particularly interested in the configuration being powerful. If you value power over simplicity, you can easily write a script that spins up `sass --watch`. I am interested in it being safe, compatible, and easy to use.

@chriseppstein We've been using YAML as the configuration syntax for [Pub](http://pub.dartlang.org/) with good results. JSON is not well-suited for human modification, despite being widely-known. It doesn't support comments, and it requires verbose punctuation for even the simplest examples.
",nex3,lolmaus
1155,2015-11-09 20:32:47,"I think that this made sense in a previous world, it's less useful today as a language-wide feature. Each adapter / system should have it's own, natural way to configure such options.

@chriseppstein you still wanting this? Or can we close it?
",hcatlin,chriseppstein
1147,2014-03-05 17:56:12,"@lolmaus thanks!
",tinganho,lolmaus
1143,2014-02-28 19:18:52,"@nex3 @chriseppstein I can tell you that we've needed to [create our own](https://github.com/Team-Sass/Singularity/blob/1.x.x/stylesheets/singularitygs/helpers/_directions.scss) in Singularity for the same reason. I'd love to see this in Core, especially if it includes `ltr`/`rtl`
",Snugug,nex3
1143,2014-02-28 19:24:02,"@Snugug Yeah, exactly. ltr/rtl support would be amazing. :)
",corysimmons,Snugug
1143,2014-02-28 19:53:49,"@chriseppstein Thanks Chris
",corysimmons,chriseppstein
1141,2014-02-27 21:35:28,"@cimmanon Thanks for that advice. That's the problem.
",tobiasmuecksch,cimmanon
1137,2014-02-27 20:32:54,"@piouPiouM I don't advocate that for the particular use case because the cost of starting sass/ruby/etc is so much greater than the cost of the code. You will need many runs to bring the error bars of the code you're actually measuring down to significance.
",chriseppstein,piouPiouM
1137,2014-02-27 21:50:46,"@chriseppstein I totally agree with you and I thank you for your code that will help me too in the future!
I took advantage of the issue to remind the existence of a shell command often forgotten.

Sorry for the off-topic.
",piouPiouM,chriseppstein
1137,2014-02-27 22:22:16,"@piouPiouM at first I was going to suggest the `time` utility too ;)
",chriseppstein,piouPiouM
1136,2014-02-27 01:02:22,"@nex3 There's a few such things we can optimize for if we know we can rely on modern browser support. I wonder if we should take a generic approach to it or just have a flag for each feature.
",chriseppstein,nex3
1130,2014-02-28 16:55:19,"@aladine updated xcode and I'm still getting the same error.
",ebowers,aladine
1128,2014-02-24 20:41:13,"Ok. So here's my philosophy on this: CSS is a very forgiving language. It recovers (mostly silently) from all sorts of invalid values. One of the values that Sass brings to authors is delivering an error during compilation where CSS would not. Maybe `var-add-with-one: 1px +; margin: calc(var(add-with-one) 2px)` is valid CSS resulting in `margin: 3px`, but it is terrible code and I'd rather give an error than support CSS allowing authors to do stupid things as a side-effect of it also allowing authors to do awesome things.

Maybe I'm missing a use case for doing something good with the syntax violations of a standard property but until I see one I think we should continue to parse `var-xxx` as a standard property. We already have the escape that @tabatkins mentions in the form of `unquote(""$bar"")`. I suspect we will never encounter a real world use case where an author is peeved at Sass for giving an error in one of these edge case situations.
",chriseppstein,tabatkins
1128,2014-02-24 21:10:49,"@nex3 We can't just say ""use a string if you go outside [some restrictive subset of all values]"" because (a) it's author-hostile, because the boundary between valid and invalid will be pretty non-obvious, and (b) it's future-hostile, because we can add more stuff to CSS in the future that'll violate that subset.

There is probably _some_ subset that would work half-reasonably, but it would be wider than what you want - it would include things that have special meaning in SASS today.  So that wouldn't work anyway.

If you want full CSS-as-SCSS compat, you have to just ignore all SASS things inside of var-\* properties.  (And var() functions, as the fallback arg has the same syntax constraints.)  That's your option 1.

I'm with Chris, though - the places where SASS syntax collides with allowable var-\* values aren't realistic.  Just go with your option 2.
",tabatkins,nex3
1128,2014-03-28 16:31:59,"@tabatkins Thank you for the update.
",chriseppstein,tabatkins
1128,2015-08-14 20:49:08,"@nazar-pc Unless you're willing to contribute work to the project, please try to avoid decrees about what our priorities should be.
",nex3,nazar-pc
1128,2015-10-07 22:04:19,"@nex3 I don't like any of our options here but let's figure out a game plan for how we're going to support this. Failure to address this in the next few months will start to cause users to abandon Sass for alternatives that work.

Here's some options that I see:
1. Don't allow interpolation or SassScript in a --var property. Thus ensuring maximal compatibility with CSS.
   
   If we do this, I think we should create a parser-level function called `sass-script(...)` within which any arbitrary sass script expression is allowed. We will parse any `--var` property without any SassScript processing unless the value is set to a `sass-script(...)`.
2. Treat --var properties as normal css properties that works with SassScript, interpolation, etc. For most users, this will be what they want.
   
   If we do this, I think we should introduce a new directive `@raw` or something similar which basically turns Sass parsing off and parses everything inside as a string that gets passed along to the css file. This has the side benefit of being an escape hatch for any future CSS incompatibilities.
3. Like other places in Sass, allow only interpolation when access to SassScript is needed.
   
   If we do this, We should allow interpolation to be escaped (probably `\#{` and a corresponding `\}` or maybe a double the hash sign `##{ ... }`) and when it is, it is passed through to css untouched. This accounts for the use case where some custom property syntax tramples on Sass's interpolation syntax.

Other suggestions welcome, these are just at the top of my head.
",chriseppstein,nex3
1128,2015-10-07 23:18:58,"@chriseppstein To have a more explicit validation, All this will enable a state where Sass can accept the following to work correctly, right? 


",lozandier,chriseppstein
1128,2015-10-08 00:05:00,"@lozandier option 2 would not work with that code. For that option it would be the following:


",chriseppstein,lozandier
1128,2015-10-08 00:11:49,"@nazar-pc The `@raw` directive would work in any location. I don't think you understood the proposal for that option.
",chriseppstein,nazar-pc
1128,2015-10-13 10:50:10,"If the assumption below is correct I would prefer to back @tabatkins `!sass` suffix suggestion, which would allow us to continue being a super set of CSS.



The assumption being that the UA's parser will hit the unrecognised `!` and bail out until it reaches the `;` or `}`. Not sure if this is how things work in this case, and I don't know that any UAs support this feature to test it. Any chance you can confirm or deny this behaviour @tabatkins?
",xzyfer,tabatkins
1128,2015-10-13 20:02:35,"> If the assumption below is correct I would prefer to back @tabatkins `!sass` suffix suggestion, which would allow us to continue being a super set of CSS.

For my tastes, being a 100% absolutely pure superset of CSS even if that corner case makes the 99% use case annoying is not worth it. Beyond CSS values the primary use case demonstrated is javascript syntax. `#{}` is not a syntax in either of these languages (except if it were used in a string) so by allowing it to be used and also escaped we are optimizing for the 99% use case but not making the work around especially onerous. If this ever affects a user their workflow will be ""Get an error, realize it's an interpolation, google for how to escape it, move on."" I'm ok with this -- errors are a better workflow than all the failure scenarios that users will hit when #{} just fails silently for them because they didn't add a `!sass` suffix.
",chriseppstein,tabatkins
1128,2015-10-16 20:57:16,"I agree with everything @chriseppstein said.
",nex3,chriseppstein
1128,2016-02-19 20:32:44,"@Draccoz Your code as written will almost certainly not work. Your `--my-mixin` declaration is valid plain CSS, and we want to limit the degree to which we step on plain CSS syntax as much as we possibly can. If we want to support people injecting statement-level CSS into custom properties‚Äîwhich I agree seems useful‚Äîwe need to find a way to do it within `#{}`.

We've already talked about treating block-level CSS as a first-class object in #1582. Once that's in place, it would be a short step to add a function that converts a variable containing CSS into a string that you can interpolate here.
",nex3,Draccoz
1122,2014-02-18 22:14:40,"@lolmaus It is caused by Sass rounding ""errors"", please see the issues linked above
",glebm,lolmaus
1122,2014-02-28 19:20:21,"I don't like attaching hidden information to SassScript values. I'd feel better if the `precision` function just converted a number to a string, but I think increasing the precision wholesale may be a better option. I'd like users not to have to think about it, and I'd rather err on the side of correctness than terseness.

@glebm, what is the smallest precision that would make your use-cases work?
",nex3,glebm
1122,2014-02-28 23:41:08,"@nex3 it's hard to say because the error only happens on some browsers / versions. Perhaps rounding errors compound with IEEE 754 (?) errors, and then get multiplied by the viewport raster size, which depends on pixel density, screen size, whether subpixel rendering is present, etc... `10` has been consistently reported to work in Foundation and Bootstrap, but this value is not necessarily the minimum. 
",glebm,nex3
1122,2014-03-03 12:18:58,"Thanks @glebm for escalating this issue.
",Ne-Ne,glebm
1122,2014-03-13 22:02:21,"@chriseppstein Higher precision causes less bloat than it may seem since common fractions are gzipped efficiently.
",glebm,chriseppstein
1122,2014-03-14 21:48:06,"@chriseppstein It erodes user faith that they know what values their variables contain. If `1` doesn't mean the exact same thing in all contexts, even if the differences seem benign, it encourages users to believe that other values may mean different things in other contexts. If their stylesheet isn't working how they expect, even in ways that have nothing to do with numeric precision or `!important`, they may (reasonably) suspect that it's because of some other hidden behavior that they're unaware of. Once users start believing this, their belief that they understand what Sass is doing goes down, which means effectively that their understanding goes down as well. This is bad.

I agree with @glebm that increased precision will add less pain than it will alleviate. Even if I weren't against hidden metadata in general, I would be against it here. HTML pages being displayed correctly are more important than the relatively few extra bytes that a precision increase will bring.
",nex3,glebm
1122,2014-03-14 21:48:06,"@chriseppstein It erodes user faith that they know what values their variables contain. If `1` doesn't mean the exact same thing in all contexts, even if the differences seem benign, it encourages users to believe that other values may mean different things in other contexts. If their stylesheet isn't working how they expect, even in ways that have nothing to do with numeric precision or `!important`, they may (reasonably) suspect that it's because of some other hidden behavior that they're unaware of. Once users start believing this, their belief that they understand what Sass is doing goes down, which means effectively that their understanding goes down as well. This is bad.

I agree with @glebm that increased precision will add less pain than it will alleviate. Even if I weren't against hidden metadata in general, I would be against it here. HTML pages being displayed correctly are more important than the relatively few extra bytes that a precision increase will bring.
",nex3,chriseppstein
1122,2014-03-14 22:06:23,"@nex3 I think you're very mistaken on this. The extra precision is useful in only very specific situations. Mostly when assigning column widths for float-based layouts. It's a lot of extra bloat for this use case. We don't need a sledgehammer to fix this, we need a scalpel.

Furthermore, I don't accept your argument for this erosion of confidence in this case (I do in general, btw, which is why I tend to shun action at a distance). `1` is always the same value. `2/7` however will print out the default precision and `precision(2/7, 10)` will print out 10 digits of precision. The source of that precision difference is something that isn't magical, it's readable in the stylesheet itself and usually at the exact site where the precision is being output. There's not magic here; there's just functions with clear and documented behavior.

If you absolutely hate the precision attribute as an instance attribute for numbers then I'd rather just return a string from the `precision` function.
",chriseppstein,nex3
1122,2014-03-22 00:37:47,"@chriseppstein Making the function documentation clear doesn't reassure me at all. My point is that this will affect users who aren't familiar with all the Sass documentation. It doesn't matter that the hidden information that actually exists can be inspected using functions--what I'm worried about is the hidden information that users think might exist.

I'm also worried about it becoming a de facto standard that users write `precision()` every time they declare a number in case that number ends up getting used somewhere where it matters. Users shouldn't have to worry about precision at all; if we're able to allow them not to think about it, we should do so.

If @glebm's research is accurate, a seven-digit precision will be adequate. This is only an increase of two digits; do you find that acceptable?
",nex3,glebm
1122,2014-03-22 00:37:47,"@chriseppstein Making the function documentation clear doesn't reassure me at all. My point is that this will affect users who aren't familiar with all the Sass documentation. It doesn't matter that the hidden information that actually exists can be inspected using functions--what I'm worried about is the hidden information that users think might exist.

I'm also worried about it becoming a de facto standard that users write `precision()` every time they declare a number in case that number ends up getting used somewhere where it matters. Users shouldn't have to worry about precision at all; if we're able to allow them not to think about it, we should do so.

If @glebm's research is accurate, a seven-digit precision will be adequate. This is only an increase of two digits; do you find that acceptable?
",nex3,chriseppstein
1122,2014-03-23 14:16:45,"@nex3 If I understand this right, when we get 10,000px displays, this number may go up to 8.
",glebm,nex3
1122,2014-03-23 14:38:13,"Precision refers to number of decimal places and only will increase the number of digits after a decimal in a floating point number (and only when needed) and will have no effect on integers.

> On Mar 23, 2014, at 10:16 AM, Gleb Mazovetskiy notifications@github.com wrote:
> 
> @nex3 If I understand this right, when we get 10000px displays, this number will go up to 8
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,nex3
1122,2014-03-23 14:52:32,"@Snugug, did you have a look at @glebm's test case?
",lolmaus,Snugug
1122,2014-03-23 14:52:32,"@Snugug, did you have a look at @glebm's test case?
",lolmaus,glebm
1122,2014-03-28 17:56:02,"I doubt my opinion matters, but i'm totally on @chriseppstein's side here.

First of all, i fail to understand why one would want to make precision lower than maximum possible. 

Second, i would expect any calculations to be precise and would search for a bug in my calculations before i realize that it's low precision that causes inconsistencies.

Third, i believe that low precision is able to cause a lot of unexpected problems, especially for people lacking advanced programming backround. @glebm has produced a demonstration of the issue, where a gap appears out of nowhere.

Fourth, there are (sometimes unusual) applications of Sass where math is used extensively. For example, [mother effing text shadow](http://sassymothereffingtextshadow.com/#lmao) or [modular scale](https://github.com/Team-Sass/modular-scale). Precision doesn't matter for all of them, of course, but it might matter to some. And you're forcing their users to revert to Ruby or JS.
",lolmaus,glebm
1122,2014-03-28 17:56:02,"I doubt my opinion matters, but i'm totally on @chriseppstein's side here.

First of all, i fail to understand why one would want to make precision lower than maximum possible. 

Second, i would expect any calculations to be precise and would search for a bug in my calculations before i realize that it's low precision that causes inconsistencies.

Third, i believe that low precision is able to cause a lot of unexpected problems, especially for people lacking advanced programming backround. @glebm has produced a demonstration of the issue, where a gap appears out of nowhere.

Fourth, there are (sometimes unusual) applications of Sass where math is used extensively. For example, [mother effing text shadow](http://sassymothereffingtextshadow.com/#lmao) or [modular scale](https://github.com/Team-Sass/modular-scale). Precision doesn't matter for all of them, of course, but it might matter to some. And you're forcing their users to revert to Ruby or JS.
",lolmaus,chriseppstein
1122,2014-03-31 17:05:03,"@lolmaus it seems like you're more in agreement with @nex3 on this issue.

@nex3 My intuition is based on the numerous times where people cared about the output format that we felt they shouldn't. E.g. Selector formatting, comment formatting, color formatting. People care about the way their output looks. I don't think I'm being unreasonable by saying that users who care -- those users I most want to be using Sass -- should have a documented, simple way to achieve their desired output.
",chriseppstein,nex3
1122,2014-03-31 17:05:03,"@lolmaus it seems like you're more in agreement with @nex3 on this issue.

@nex3 My intuition is based on the numerous times where people cared about the output format that we felt they shouldn't. E.g. Selector formatting, comment formatting, color formatting. People care about the way their output looks. I don't think I'm being unreasonable by saying that users who care -- those users I most want to be using Sass -- should have a documented, simple way to achieve their desired output.
",chriseppstein,lolmaus
1122,2014-04-04 20:39:31,"@chriseppstein I don't think we have evidence that people will care about the numeric precision in particular, and I don't think it makes sense to pre-emptively make every aspect of the output format configurable. In fact, I think there are aspects‚Äîpossibly including precision‚Äîthat it doesn't make sense to make configurable at all.
",nex3,chriseppstein
1122,2014-04-05 01:07:18,"I can see a divided opinion above, but after finding the grid bug with foundation @glebm has done many examples to show the importance of getting the precision working.

I can see that the foundation grid breaks (or a big bug at least). I would agree that clean output is important but this is now a month old..

I feel that the precision should be minimum to what is needed, but it goes hand in hand with 33.33% as a percentage. Browsers should respect this decimal. However this thread seems to be a double ended sword as a high precision will be needed for graceful fallback.
",Ne-Ne,glebm
1122,2015-03-15 05:17:13,"@easy-one I think it was already decided that there's no such thing as a default that everyone is going to be okay with. I think 6 decimal places might fix your grid system but could break others. My personal grid uses 5. I think the argument now is whether or not we need a syntax for changing this on the fly rather than all together once at compile. I want to be able to change this on the fly. I want to distribute components that work no matter what the end user decides to use throughout the rest of their project.
",whaaaley,easy-one
1117,2014-02-15 05:25:35,"@nex3 Maybe "".foo, .baz"" ?
",jlong,nex3
1110,2014-02-10 22:28:39,"@justinshea @kevinSuttle @benseven can you all post the versions of `listen` you had installed when this was failing? Also, @justinshea, can you include your Ruby version?
",nex3,benseven
1110,2014-02-10 22:28:39,"@justinshea @kevinSuttle @benseven can you all post the versions of `listen` you had installed when this was failing? Also, @justinshea, can you include your Ruby version?
",nex3,justinshea
1110,2014-02-10 22:28:39,"@justinshea @kevinSuttle @benseven can you all post the versions of `listen` you had installed when this was failing? Also, @justinshea, can you include your Ruby version?
",nex3,kevinSuttle
1106,2014-02-08 00:01:52,"Thanks for all the bug reports, @xzyfer.
",nex3,xzyfer
1101,2014-02-05 18:39:56,"@donaldpipowitch node-sass (specifically, libsass which powers it) differs quite a bit from Ruby Sass. For one thing, it is to versions behind (currently tracking 3.1.0 whereas 3.3.0 is almost out), and it's currently well known for being really bad at extends, although they're working on fixing that,
",Snugug,donaldpipowitch
1097,2014-02-01 22:21:47,"@Anahkiasen is correct. When you pass a file to Sass on the command line, it tries to deduce whether it's SCSS or the indented syntax based on the file extension. If it can't, as in this case, it will assume it's the indented syntax, which is what's causing the parse error.
",nex3,Anahkiasen
1096,2014-01-31 10:26:53,"Thanks for the reply @HugoGiraudel 

TIL! Ok I think I understand that response. So hyphens and underscores are treated the same, and it's a matter of aesthetics and conventions. With that understanding, sass-convert should not enforce conventions onto the user, the hyphen should not be converted to an underscore.

I've struggled to find any official documentation about this in the sass documentation, I've only found documentation from blogs. 
",badsyntax,HugoGiraudel
1095,2014-01-30 09:08:28,"@molovo read the very last line of my bug report ;)
",stowball,molovo
1095,2014-01-30 09:11:13,"@lolmaus It should only convert colours in property values, not in selectors, surely? I'm perfectly happy for it to convert `color: white` to `color: #fff`
",stowball,lolmaus
1095,2014-01-30 09:22:06,"@molovo No, typing white manually outputs correctly. I understand there may be technical limitations for this difference, but as an end user, it's really confusing.

@lolmaus Also, I've literally just discovered that GitHub's search bar searches issues when on the issues page _face palm_
",stowball,molovo
1095,2014-01-30 09:22:06,"@molovo No, typing white manually outputs correctly. I understand there may be technical limitations for this difference, but as an end user, it's really confusing.

@lolmaus Also, I've literally just discovered that GitHub's search bar searches issues when on the issues page _face palm_
",stowball,lolmaus
1094,2014-01-30 08:11:40,"Wow, great job @JulienCabanes.
",lolmaus,JulienCabanes
1094,2014-02-04 19:12:19,"@HugoGiraudel this came from #690 
The problem with `folder/*` is you can't control the import order, you would expect an alphabetical one but it's too implicit.
Having a standard `_module.scss` responsible for importing in the correct order would be better. 
",JulienCabanes,HugoGiraudel
1094,2014-03-30 12:47:14,"@JulienCabanes & @HugoGiraudel & @Anahkiasen :

I love the suggestion made by @Anahkiasen.

An alternate solution would be to have a different syntax depending on what you're loading:
- If the path ends with a letter of number, it's considered a file
- If the path ends with `/`, it's considered a folder and an index file will be loaded... which could be named `_module.scss`, `_index.scss`, `_component.scss`, `_loader.scss`, ... Maybe the devs could leave it do users to configure what name they want for their index file? I'm pretty sure we're all unlikeoy to want to give up our personal preference here.
- If the path ends with `/*`, it's considered a folder and all files will be loaded alphabetically.

## Example code


",jslegers,HugoGiraudel
1094,2014-03-30 12:47:14,"@JulienCabanes & @HugoGiraudel & @Anahkiasen :

I love the suggestion made by @Anahkiasen.

An alternate solution would be to have a different syntax depending on what you're loading:
- If the path ends with a letter of number, it's considered a file
- If the path ends with `/`, it's considered a folder and an index file will be loaded... which could be named `_module.scss`, `_index.scss`, `_component.scss`, `_loader.scss`, ... Maybe the devs could leave it do users to configure what name they want for their index file? I'm pretty sure we're all unlikeoy to want to give up our personal preference here.
- If the path ends with `/*`, it's considered a folder and all files will be loaded alphabetically.

## Example code


",jslegers,JulienCabanes
1094,2014-03-30 12:47:14,"@JulienCabanes & @HugoGiraudel & @Anahkiasen :

I love the suggestion made by @Anahkiasen.

An alternate solution would be to have a different syntax depending on what you're loading:
- If the path ends with a letter of number, it's considered a file
- If the path ends with `/`, it's considered a folder and an index file will be loaded... which could be named `_module.scss`, `_index.scss`, `_component.scss`, `_loader.scss`, ... Maybe the devs could leave it do users to configure what name they want for their index file? I'm pretty sure we're all unlikeoy to want to give up our personal preference here.
- If the path ends with `/*`, it's considered a folder and all files will be loaded alphabetically.

## Example code


",jslegers,Anahkiasen
1094,2014-03-30 18:39:08,"@HugoGiraudel :

I'm not familiar with that convention, but it's but a minor difference...


",jslegers,HugoGiraudel
1094,2014-07-17 08:38:16,"@Anahkiasen I would just do the alphabetical import, without the automatic check for the `_modules.scss` file. Because if I care for the order of my imports (and can't name them `_1-modules.scss` or something like that = I already have to be specific) I can be so specific to just write `@import ""foo/modules"";`
",apfelbox,Anahkiasen
1094,2014-12-04 13:21:37,"@robwierzbowski a css placeholder can be defined with `%`


",koenpunt,robwierzbowski
1094,2015-01-05 23:22:34,"I hav to agree with @aripalo:

Some sort of `@import` directive inside a mixin would be great, especially for including third party styles. 
",andi1984,aripalo
1094,2015-01-05 23:33:39,"@andi1984 see #739
",chriseppstein,andi1984
1094,2015-04-21 15:45:26,"Wait @sammorrisdesign does that mixin actually work? How are you able to import using a variable $component?
",Jakobud,sammorrisdesign
1094,2015-04-25 15:33:19,"@Jakobud Nah, we tried to write something like that. But it didn't work. Hence the +1 to be able to use `@import` inside mixins and with variable names.

Would be great if it did though ;)
",sammorrisdesign,Jakobud
1094,2015-05-09 01:48:37,"@jlukic Why?
",nex3,jlukic
1094,2015-05-09 03:52:44,"@nex3 are you asking why someone would want variables in @import strings? Simple:

Lets say you have a file that imports a couple dozen other files:



Then lets say you have to change `my/path/` to something else. You now how to change it for all the import strings. If you could use variables though you could have something like this:



It makes changing tons of import strings a piece of cake and opens the door for dynamic build systems.
",Jakobud,nex3
1094,2015-05-09 13:54:29,"@Jakobud Read the linked issue again, that's not what's being asked for.  You're asking for a completely different issue that can be solved by features that already exist in Sass (see: https://github.com/sass/sass/issues/279#issuecomment-100204040)
",cimmanon,Jakobud
1094,2015-06-28 19:25:58,"+1 for a LESS like feature of `import (reference) ""filename"";` as @backnight asked for in his comment. It's the only thing there's holding me back from switching to SASS.
",sulfo,backnight
1094,2015-07-06 18:33:29,"@cimmanon 

> You're asking for a completely different issue that can be solved by features that already exist in Sass (see: #279 (comment))

That only applies for someone using vanilla Ruby SASS at the command line. Not easy (or not possible in many cases) for everyone using SASS via CodeKit, Grunt, Gulp, ANT, Node, and a 100 other build tools with custom SASS pipelines.
",Jakobud,cimmanon
1094,2015-09-11 21:39:40,"@chriseppstein That's going in a cool direction, but the README is super vague.
",nex3,chriseppstein
1094,2015-09-28 21:29:11,"As suggested by @chriseppstein, cssmodules has cool stuffs like [composition and dependencies](https://github.com/css-modules/css-modules#dependencies) which looks like LESS's `@import (reference)`


",JulienCabanes,chriseppstein
1094,2015-09-29 00:52:45,"@xzyfer Here's some of my initial thoughts on how ICSS imports, aliasing, and other constructs can look like in SCSS and using W3 grammar on [media features](http://www.w3.org/TR/mediaqueries-4/#mq-features), as well as using `@import` as an [at-rule that accepts a block](http://www.w3.org/TR/css-syntax-3/#at-rule):



**Using @import with (reference) media feature**



**Using `@import` as an at-rule with block:**



**Overloading `@extend`**



In summary, I'm not a huge fan of how ICSS uses the syntax for properties and values outside of an at-rule to define imports and exports, and am _especially_ against the use of pseudo-selectors (that don't select anything) where at-rules are more appropriate.

We can make minimal changes to SCSS syntax and still get all the benefits of how imports, exports, local aliases, etc. are done in ICSS, with greater adherence to W3C syntax grammar. The changes are:
- Giving Sass comprehension of certain media features, such as `(reference)`, with regard to `@import`
- Allowing `@import` to contain a block
- Overloading `@extend` to comprehend `from` as such:
  - `@extend <string> from [ <url> | <string> ];`

What do you think?
",davidkpiano,xzyfer
1094,2015-10-13 19:47:35,"@long-lazuli we're introducing a new directive and @import will be purely for generating a CSS import (after a deprecation period). So consistency is not an overriding concern. Good syntax is the main goal.
",chriseppstein,long-lazuli
1094,2015-10-13 20:55:38,"@chriseppstein Whoops, not aware of that; could you point me over this new directive's discussion ?

By the way; you have my syntax proposal.
the way we `@extend` doesn't really matter for me, but it would be usefull to name the import locally, as it would be a bit painful to write :


",long-lazuli,chriseppstein
1094,2015-11-05 17:37:24,"@amster I should have had that in my example, definitely `@use ""file"" as identifier` is something that we'll do. I think it's mentioned somewhere above. I was just showing a shorthand version that I like to have as an option.
",hcatlin,amster
1094,2015-11-06 21:18:44,"To clarify, the syntax and semantics for `@use` are still very much up in the air. @hcatlin was presenting an idea that's in the vein of what we're looking at, but it's not at all final or binding.
",nex3,hcatlin
1094,2015-12-07 03:17:29,"Thanks @koenpunt 

But I already tried that, and it didn't worked for me.

Using:
""grunt-sass"": ""^1.1.0"",

Although it works in online compiler http://sassmeister.com/

Any clue, why it would not work for me?
",saas786,koenpunt
1094,2015-12-07 06:16:58,"I did give it another try,

this time I did write some simple scss code, just to verify whether my grunt setup is incorrect or I have some other issue, and for simple code it worked.

Then I did some digging into my code, and found out that if I try override variables after the code file has already been imported (where this variable is going to use), then it will not work.

Note: Ideally it should have worked, as compilers first import all variables / code and only then compile them. Not sure why sass compiler didn't worked for me.

Like

`// _vars.scss
$color: blue !default;`

`// main.scss
body {
  background: $color;
}`

`// _override_vars.scss
$color: green;`

which I was doing in (LESS), and tried to keep same structure in SASS.

Thanks @koenpunt for pinging me about it, and it forced to me give it another try, otherwise I had given up on it, and rewritten my code already, but I like this approach :)
",saas786,koenpunt
1094,2015-12-07 11:33:07,"@koenpunt 

What exactly is the difference between...



... and...


",jslegers,koenpunt
1094,2015-12-07 11:38:30,"@jslegers This example will output the same.

But the following one...



... will generate this CSS:


",p2media,jslegers
1094,2015-12-10 23:58:05,"@mscarchilli Dynamic imports are complicated because it makes it impossible to statically analyze the Sass files to determine dependencies, and this means we cannot quickly invalidate compilation results. See #739 for a write up on what is required to support that use case (note: it's complicated)
",chriseppstein,mscarchilli
1094,2016-02-24 07:53:22,"@Kazzaky while it won't be compiled if you grab a directory containing it, it'll still be compiled into the file importing it, though. Unless there's an undocumented option? 
",JD-Robbs,Kazzaky
1094,2016-02-24 08:52:17,"@JD-Robbs you are right... my bad
",Kazzaky,JD-Robbs
1093,2014-02-01 01:06:54,"Changing the Sass file was the piece I was missing, thanks @IdahoEv.

It looks like this is the same issue as #1028. I'm going to close this one out; we can continue discussion there.
",nex3,IdahoEv
1088,2014-10-30 22:46:29,"@nex3 how much refactoring are we talking about here? Would you mind pointing me to the relevant files so that I could take a look? I was going to make the switch to the indented syntax, but this was kind of a deal breaker since we use maps a lot. We're using Coffee and MtHaml, so wanted to keep the indented syntax consistent throughout our development stack.
",ezekg,nex3
1088,2014-10-30 23:41:46,"@ezekg Basically the entire indented-syntax parser would have to be rewritten from the ground up to handle this correctly. It's a major task, but if you want to take a look, the current parser is in `lib/sass/engine.rb`.
",nex3,ezekg
1088,2015-06-23 14:24:18,"Thanks @theknightsky!
Previously I did it like this:



But your solution is much cleaner, obviously. =)
",CREEATION,theknightsky
1087,2014-01-21 16:53:38,"> When you swap line 1 and line 2 without also swapping line 3 and line 4

Hey @Snugug, the order of `@extend` statements does not matter here. Swapping lines 3 and 4 does not influence anything. Only the order of lines 1 and 2 influences the order of resulting CSS.

@TopView, Sass does not have telepathic powers. `A { @extend B; }` basically means ""find B above and add A next to it"". The position of B in your code defines where A appears in code, because A always appears next to B, and B appears where you type it. So yes, it's totally your problem.
",lolmaus,Snugug
1087,2014-01-21 16:53:38,"> When you swap line 1 and line 2 without also swapping line 3 and line 4

Hey @Snugug, the order of `@extend` statements does not matter here. Swapping lines 3 and 4 does not influence anything. Only the order of lines 1 and 2 influences the order of resulting CSS.

@TopView, Sass does not have telepathic powers. `A { @extend B; }` basically means ""find B above and add A next to it"". The position of B in your code defines where A appears in code, because A always appears next to B, and B appears where you type it. So yes, it's totally your problem.
",lolmaus,TopView
1087,2014-01-21 16:57:00,"@lolmaus is right about 3/4. Typing faster than thinking

> On Jan 21, 2014, at 11:53 AM, lolmaus notifications@github.com wrote:
> 
> When you swap line 1 and line 2 without also swapping line 3 and line 4
> 
> Hey @Snugug, the order of @extend statements does not matter here. Swapping lines 3 and 4 does not influence anything. Only the order of lines 1 and 2 influences the order of resulting CSS.
> 
> @TopView, Sass does not have telepathic powers. A { @extend B; } basically means ""find B above and add A next to it"". The position of B in your code defines where A appears in code, because A always appears next to B, and B appears where you type it. So yes, it's totally your problem.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,Snugug
1087,2014-01-21 16:57:00,"@lolmaus is right about 3/4. Typing faster than thinking

> On Jan 21, 2014, at 11:53 AM, lolmaus notifications@github.com wrote:
> 
> When you swap line 1 and line 2 without also swapping line 3 and line 4
> 
> Hey @Snugug, the order of @extend statements does not matter here. Swapping lines 3 and 4 does not influence anything. Only the order of lines 1 and 2 influences the order of resulting CSS.
> 
> @TopView, Sass does not have telepathic powers. A { @extend B; } basically means ""find B above and add A next to it"". The position of B in your code defines where A appears in code, because A always appears next to B, and B appears where you type it. So yes, it's totally your problem.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,lolmaus
1087,2014-01-21 16:57:00,"@lolmaus is right about 3/4. Typing faster than thinking

> On Jan 21, 2014, at 11:53 AM, lolmaus notifications@github.com wrote:
> 
> When you swap line 1 and line 2 without also swapping line 3 and line 4
> 
> Hey @Snugug, the order of @extend statements does not matter here. Swapping lines 3 and 4 does not influence anything. Only the order of lines 1 and 2 influences the order of resulting CSS.
> 
> @TopView, Sass does not have telepathic powers. A { @extend B; } basically means ""find B above and add A next to it"". The position of B in your code defines where A appears in code, because A always appears next to B, and B appears where you type it. So yes, it's totally your problem.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,TopView
1087,2014-01-21 18:00:11,"I agree with @TopView here, you guys are being pretty hard on him. This is a very normal reaction when someone finds a feature that doesn't fit their mental model of how it should work. We get this **all the time**. Chastising people who use strong language in their reaction to our features is not how we became the most used css pre-processor. I encourage everyone who comments on our issue tracker to ask questions and explore objections, to explain the features that we have and why they work the way they do. And lastly, as your mother encouraged: if you can't say something nice, don't say anything at all.

@TopView I'm sorry Sass doesn't fit your needs. I assure you that `@extend` is based on a theory of styling that is very sound. Selector inheritance using `@extend` is one of the most likely features of Sass to be included in CSS exactly as-is. If the people on the CSS working group think it's that good and that in line with the philosophy of CSS it's quite likely that we don't have it wrong.

For what it's worth, this is a better write up on the theory of this feature (instead of the implementation): https://github.com/nex3/sass/issues/324#issuecomment-4607184
",chriseppstein,TopView
1087,2014-01-22 17:39:48,"@TopView I think you're misunderstanding how `@extend` is supposed to work. This isn't a case where it's failing to respect the cascade; in fact, the behavior you're seeing is precisely the behavior that makes `@extend` work well _with_ the cascade.

Let me explain. When you write `A { @extend B }`, what that means is that ""all elements that match `A` should be styled as though they also match `B`."" Sass does its best to make this work, and in most\* cases it does so 100% correctly. Your example is one of those cases. You're saying ""`option` tags should be styled as though they had `class=""b1 b0""`"".

Since `.b0` is declared before `.b1`, `.b1` takes precedence, because of the cascade. A border appears when you use `@extend` because a border would appear if you manually added `class=""b1 b0""`. The cascade is being respected here just like it would be if you weren't using `@extend`.

---

*: The cases where this fails are either because we don't have the necessary browser context to do the necessary property resolution, or because doing it completely generally would create extremely large CSS size.
",nex3,TopView
1085,2014-01-15 15:10:58,"Oh, it's [there in comments](https://github.com/nex3/sass/issues/116#issuecomment-5166163)! Thanks @Anahkiasen.
",lolmaus,Anahkiasen
1082,2014-01-13 22:31:30,"I reproduced it. @nex3, the problem is that we need to add a `:tabs` accessor to the comment node.
",chriseppstein,nex3
1081,2014-01-10 22:23:08,"@emagnier I really like @append-in. I'm trying to think of a use-case of @prepend-in. Can you think of one? Regardless, I think it's good to be explicit and complete in cases like these.
",ariroseonline,emagnier
1075,2014-01-10 00:35:18,"@nex3 Why did you close this? The fix had to be adapted to master, because the underlying code had changed significantly compared to stable.
",felixbuenemann,nex3
1071,2014-05-18 12:43:57,"@zoechi - Classic ruby monkey patching. lol. The good ole hammer :) 
",Nevraeka,zoechi
1071,2015-01-30 21:24:23,"@HugoGiraudel can you open a new issue for that?
",nex3,HugoGiraudel
1069,2014-01-06 18:42:23,"@cimmanon nailed it. The null value causes the property to not be output.

Also, in all cases, the `!` syntax is a simple modifier keyword, not an expression, so this would be a marked change from the css syntax.
",chriseppstein,cimmanon
1065,2017-03-24 22:46:39,"I have to agree with @lolmaus, this feature would be extremely convenient and seems to be consistent with the current syntax.",cjcenizal,lolmaus
1064,2014-01-06 21:56:43,"@felixbuenemann Thanks!
",chriseppstein,felixbuenemann
1063,2014-01-07 17:01:00,"@felixbuenemann yes please. Master is a god place for it. 
",chriseppstein,felixbuenemann
1057,2014-01-25 00:04:52,"@morenoh149 The fix has been merged - try specifying a git URL for Sass until the next release.
",cheald,morenoh149
1057,2014-01-25 00:12:18,"@cheald yeah I went ahead and just did that :+1:
the fix is to add `gem 'sass', git: 'https://github.com/nex3/sass.git'` to your gemfile
",morenoh149,cheald
1051,2017-01-04 20:44:34,@HugoGiraudel: The link http://sassylists.com doesn't work anymore (domain seems deleted).,strarsis,HugoGiraudel
1050,2013-12-30 07:24:25,"@robwierzbowski If we add this flag, it will likely have the behavior you suggest. Changing the source order is something we're very keen to avoid.
",nex3,robwierzbowski
1050,2014-01-06 19:18:15,"@chriseppstein The issue with what you've written is it actually goes against the best practices of responsive web design. When working with media queries, the best practice is to make changes as needed and not necessarily group them all together, especially true when it comes to grids as different layouts tend to ebb and flow much more than `full-to-half`. With the way you've described, every single different permutation of change between every single set of grids one may have across all permutations of media queries would need to be made available which is a maintenance nightmare and will easily become hard to decipher for developers. On the other hand, if each layout were to have their own extendable and could be called as such, that would make it infinitely easier to mix and match, and what was happening would be easier to grok.

Let's also not forget that this isn't just for layouts, it's for any number of items. Background image, clearfixes, box sizing, fonts stacks and definitions, all can benefit from being able to be extended from within a MQ and have a context created and needing to create extendable classes for all of their potential permutations seems like a maintenance headache as well.
",Snugug,chriseppstein
1050,2014-01-06 19:51:25,"+1, I'm completely agree with the latest comment of @Snugug.
I already had this need, and had to do some code gymnastics to get round this limitation. This gave things ‚Äã‚Äãless flexible, and more difficult to read and maintain.
",emagnier,Snugug
1050,2014-01-06 22:44:24,"My example was based off @Snugug's (which I think is valid). But disagreeing with the example is not a disagreement with the issue.

@chriseppstein Do you think we shouldn't be able to extend a(ny) value from within a media query? By which I mean apply `<rules>` to `<selector>`, where `<selector>` is `.class` or `@media (foo) { .class }`. 

In my experience this is one of the most often requested features in Sass, both verbally among my peers and from what I see in issue queues and comment threads on the internet.
",robwierzbowski,Snugug
1050,2014-01-06 22:44:24,"My example was based off @Snugug's (which I think is valid). But disagreeing with the example is not a disagreement with the issue.

@chriseppstein Do you think we shouldn't be able to extend a(ny) value from within a media query? By which I mean apply `<rules>` to `<selector>`, where `<selector>` is `.class` or `@media (foo) { .class }`. 

In my experience this is one of the most often requested features in Sass, both verbally among my peers and from what I see in issue queues and comment threads on the internet.
",robwierzbowski,chriseppstein
1050,2014-01-07 23:21:28,"I want to continue considering this. Even if it's the case that there's a better factoring available for every stylesheet that wants to extend out of a media query, it's clear that users aren't able to see that refactoring easily. @robwierzbowski is right that this is highly-requested functionality. People run into the issue of extending out of media queries frequently, and I'd like a solution that we can at least explain in the error message.
",nex3,robwierzbowski
1050,2014-02-24 22:45:05,"@nex3 I'm not convinced. We've only just introduced `@at-root` and there is a learning/education period that is required to decide that. Furthermore, we have a way to produce bloat: mixins. I am against making @extend sometimes a selector operation and sometimes a rule copy operation. I'd rather see users write mixins that conditionally extend or include. This is not a feature Sass needs to add.

Additionally, I feel this will only increase the confusion about how people think that placeholder selectors can only be used like simple mixin declarations (having no arguments) rather than the powerful selector concept that they are.
",chriseppstein,nex3
1050,2014-02-25 01:09:57,"I really appreciate the points on both sides here, and I think they're
making the argument for extend with a flag very strong. It's a syntax that
users expect, and the code result proposed is no larger than any equivalent
code produced by at-root.

I agree with Nathan that users (like myself) specifically want to extend
the styles but scope them to the query. I can imagine a couple ways of
creating mixins with at root that would accomplish this, but none so direct
or understandable as processing at the Sass level with extend.

On Monday, February 24, 2014, Nathan Weizenbaum notifications@github.com
wrote:

> @at-root (without: media) { & { extend .something; }} removes the runtime
> context so that the extend operation can be performed as if it were not
> within a media context. This is useful in places where the base definition
> is a constant across all media definitions or is appropriately overridden
> via the cascade even when applied across media types.
> 
> This doesn't scope the definition to the media query, though, which I
> think is what users are trying to express. Ensuring that the properties
> cascade so that a top-level extension works out is complicated and
> contingent on the specifics of the user's CSS.
> 
> I want this too. Opting-in using !duplicate or some other syntax makes
> the user think about it. Not requiring an opt-in causes huge surprise when
> the stylesheet bloats like using mixins. I think we have reached the
> boundary where @extend can be implemented in a preprocessor without being
> a leaky abstraction.
> 
> I agree that the abstraction is still leaky, but !duplicate (or whatever)
> makes it less leaky, and there's value in that. @extend is how users
> expect to be able to express this -- we have ample evidence of that from
> the volume of requests we get for it to work.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-35961979
> .

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowski
1050,2014-02-25 19:31:31,"@robwierzbowski Yes. As long as you can name each break point. Mixins, at-root, and extend are powerful enough to express the exact behavior that is desired. I guess I need to write a Sass library that demonstrates how.
",chriseppstein,robwierzbowski
1050,2014-02-26 15:03:59,"Sass isn't only for newcomers. Preserving source order at the expense of a
little more markup is a positive trade IMO.

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com

On Wed, Feb 26, 2014 at 9:57 AM, cimmanon notifications@github.com wrote:

>  Sometimes it acts like extend and sometimes it acts like include.
> 
> Newcomers to Sass don't understand the difference or why it matters.
> 
> The most important aspect of @extend https://github.com/extend is that
> is preserves the function of the cascade.
> 
> Again, most users don't understand this. All they understand is that it
> consolidates selectors, which means more compact CSS to them (though this
> isn't always the case). Users are disappointed that code like this doesn't
> work:
> 
> %clearfix {
>     /\* clearfix stuff */}
> .one {
>     color: blue;
>     @extend %clearfix;}
> .two {
>     color: green;
>     @media (min-width: 50em) {
>         @extend %clearfix;
>     }}
> .three {
>     @extend %clearfix;}
> .four {
>     color: orange;
>     @media (min-width: 40em) {
>         @extend %clearfix;
>     }}
> 
> The normal expectation is that it would generate something like this:
> 
> .one, .three {
>     /\* clearfix stuff _/}
> .one {
>     color: blue;}
> @media (min-width: 50em) {
>     .two {
>         color: green;
>         /_ clearfix stuff _/
>     }}
> @media (min-width: 40em) {
>     .four {
>         color: orange;
>         /_ clearfix stuff */
>     }}
> 
> To propose sprinkling extra media queries everywhere is the exact opposite
> of what users expect when they use media queries (smaller CSS). Easier to
> write doesn't make for a good experience. Would adding a LESS-style include
> (where classes are also mixins with no arguments) really be that bad? I
> don't think anyone cares what it's called (extend vs include vs
> copy-it-here-because-i-said-so), they just want the behavior.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-36133080
> .
",robwierzbowski,robwierzbowski
1050,2014-02-26 16:45:21,"> Newcomers to Sass don't understand the difference or why it matters.
> All they understand is that it consolidates selectors

@cimmanon, Whether or not they understand that there is a fundamental theory behind `@extend` is irrelevant. There is, and that theory is what makes it work consistently in practice for _all_ of our users.

> To propose sprinkling extra media queries everywhere is the exact opposite of what users expect

I get it and it's why we're talking about it. But I'm ok with things not matching expectations as long as there is a clear explanation that will help them understand. It is easy to construct an example where the output that was originally suggested would differ from the _behavior_ that is implied by the source code.

> Does it make sense to add a separate, media query-friendly include directive?

Not to me. I don't see a new fundamental abstraction here. Ultimately, if we ever make an optimizer, it could clean up this output and coalesce media queries according to heuristics, optimization levels, etc.
",chriseppstein,cimmanon
1050,2014-02-26 17:07:35,"If I understand it correctly, I'm all for Chris's last suggested
implementation. Sounds like exactly what I'd expect, and would be crazy
useful.

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com

On Wed, Feb 26, 2014 at 11:45 AM, Chris Eppstein
notifications@github.comwrote:

>  Newcomers to Sass don't understand the difference or why it matters.
> All they understand is that it consolidates selectors
> 
> @cimmanon https://github.com/cimmanon, Whether or not they understand
> that there is a fundamental theory behind @extend is irrelevant. There
> is, and that theory is what makes it work consistently in practice for
> _all_ of our users.
> 
> To propose sprinkling extra media queries everywhere is the exact opposite
> of what users expect
> 
> I get it and it's why we're talking about it. But I'm ok with things not
> matching expectations as long as there is a clear explanation that will
> help them understand. It is easy to construct an example where the output
> that was originally suggested would differ from the _behavior_ that is
> implied by the source code.
> 
> Does it make sense to add a separate, media query-friendly include
> directive?
> 
> Not to me. I don't see a new fundamental abstraction here. Ultimately, if
> we ever make an optimizer, it could clean up this output and coalesce media
> queries according to heuristics, optimization levels, etc.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-36146497
> .
",robwierzbowski,robwierzbowski
1050,2014-02-26 17:07:35,"If I understand it correctly, I'm all for Chris's last suggested
implementation. Sounds like exactly what I'd expect, and would be crazy
useful.

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com

On Wed, Feb 26, 2014 at 11:45 AM, Chris Eppstein
notifications@github.comwrote:

>  Newcomers to Sass don't understand the difference or why it matters.
> All they understand is that it consolidates selectors
> 
> @cimmanon https://github.com/cimmanon, Whether or not they understand
> that there is a fundamental theory behind @extend is irrelevant. There
> is, and that theory is what makes it work consistently in practice for
> _all_ of our users.
> 
> To propose sprinkling extra media queries everywhere is the exact opposite
> of what users expect
> 
> I get it and it's why we're talking about it. But I'm ok with things not
> matching expectations as long as there is a clear explanation that will
> help them understand. It is easy to construct an example where the output
> that was originally suggested would differ from the _behavior_ that is
> implied by the source code.
> 
> Does it make sense to add a separate, media query-friendly include
> directive?
> 
> Not to me. I don't see a new fundamental abstraction here. Ultimately, if
> we ever make an optimizer, it could clean up this output and coalesce media
> queries according to heuristics, optimization levels, etc.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-36146497
> .
",robwierzbowski,cimmanon
1050,2014-02-27 02:57:19,"> Well, the semantics I'm seeing asked for don't make sense to me. Sometimes it acts like extend and sometimes it acts like include. I very much dislike this.

By ""semantics"", I was referring to the styling semantics: the relationship between the Sass stylesheet and how the page is styled, not the relationship between the Sass stylesheet and the generated CSS. In terms of styling semantics, the proposed flag brings `@extend` closer to the stated goal of ""this element should be styled as though it also matches this selector"".

> Instead, I think a solution would need to add `@media` directives all over the document -- wherever an extended selector is found; just like we do with selectors now.

Sorry, I should have been clearer: this is what I'm arguing for. I didn't read @Snugug's example closely enough to figure out that it wasn't identical to this.

> To be clear, I'm not in favor of adding a flag here. If we're going to allow `@extend` within directives having a runtime dependency then we should just allow it. Furthermore, the strategy I outlined above works fine for `@supports`, `@media`, `@page` and even unknown directives.

I think a flag is important to avoid users having massive unexpected bloat, although I'm open to being convinced otherwise.
",nex3,Snugug
1050,2014-02-27 18:53:58,"> Sorry, I should have been clearer: this is what I'm arguing for. I didn't read @Snugug's example closely enough to figure out that it wasn't identical to this.

:facepunch: 

> I think a flag is important to avoid users having massive unexpected bloat

This is Sass's curse for many of it's features. I support flags that change behavior or imply making something succeed that would fail/warn otherwise. This just implies that the user understands what they are doing. They need to understand this once, but then we force them to type this flag for all eternity. I'd rather them just learn this by reading the output and asking ""why?"".
",chriseppstein,Snugug
1050,2014-03-19 20:27:58,"I was ready to write an example usecase for how we'd love to be able to use `@extend` within a media query, but @cimmanon beat me to it. The clearfix example further up the thread is exactly what I was going to show. Until we can do exactly that, Sass 3.3 is crippled for making responsive sites while abstracting out code into placeholders (which is essential in my opinion).

After much exploring over the last couple years, by far the best way to handle responsive Sass is to write a module for mobile first, then sprinkle nested media queries in that module to keep everything in one, easily understood place. We simply can't do that reliably now because we can't use our placeholders the way we want to.

I'd love to see either solution. A flag on `@extend` to allow a new rule context within the media query or more media queries. Though it could be argued that the latter approach would bloat your output even more than starting a new rule context in the given media query. Really hope you guys come to an agreement on how to proceed.
",strann,cimmanon
1050,2014-03-19 20:45:38,"@lolmaus There's no reason to special case placeholder selectors. Any solution that works for placeholders will work for standard css selectors.
",chriseppstein,lolmaus
1050,2014-03-19 20:58:43,"@lolmaus The premise of your question seems to be that we've decided to not add this feature. but if you read up, you'll see that is no longer the case.
",chriseppstein,lolmaus
1050,2014-03-19 21:06:58,"@chriseppstein My impression was that you and @nex3 decided that the feature is necessary but neither agreed on resulting behavior nor confirmed that it's technically feasible.
",lolmaus,nex3
1050,2014-03-19 21:06:58,"@chriseppstein My impression was that you and @nex3 decided that the feature is necessary but neither agreed on resulting behavior nor confirmed that it's technically feasible.
",lolmaus,chriseppstein
1050,2014-03-19 21:19:03,"@lolmaus AFAICT, we disagree only about whether there should be an opt-in flag.
",chriseppstein,lolmaus
1050,2014-09-12 20:59:58,"@unyo If the semantics you're looking for are just ""use this set of styling for a bunch of classes"", just use a mixin.
",nex3,unyo
1050,2014-09-12 21:48:28,"@nex3 The issue with mixins is the bloated output. people want to condence the output using comma selectors. I've been thinking that maybe we can simply add support to @extend to extend mixins.
",chriseppstein,nex3
1050,2014-09-18 17:53:51,"@nex3 a few points:
1. only 58% of web traffic is gzip compressed. better output for the other 42% seems prudent.
2. Output that approximates hand-optimized CSS is a part of the craftsmanship that I want to support for our authors.
3. I don't think there's a safe optimization that will do a good job here. But if there is, that is clearly and interesting direction and I'd be interested in knowing how you think that would work.
",chriseppstein,nex3
1050,2014-12-09 22:24:04,"I just read this discussion in its entirety to reach a conclusion on the status. I gather the consensus is to go with the solution described by @chriseppstein in https://github.com/sass/sass/issues/1050#issuecomment-36097901. If that's the case, could we create a new issue describing the issue, so folk such as me can track the progress? The title of this issue is now irrelevant and thus misleading.
",OliverJAsh,chriseppstein
1050,2015-04-10 19:43:46,"@davidkpiano That would be an acceptable compromise if it helps ease implementation. Eventually though, I'd expect even that to work by combining the media queries with `and`.



(Sorry for the contrived example.)
",Ajedi32,davidkpiano
1050,2015-08-18 10:16:21,"I totally agree with @nex3.

Having this feature is much more important than caring about bloat that only affects non-gzipped CSS.

I also think that hand-optimized CSS is important, but in that case you might not use this feature, right?

Post-optimization is definitely possible. The question is how good it will be while staying safe.
",luksak,nex3
1050,2016-07-20 18:38:22,"@t22james we have a design, but it's not slated for any release at this time.
",chriseppstein,t22james
1050,2016-07-27 17:44:45,"@chriseppstein Please, keep us updated on the progress, as there are a lot of us waiting for this feature to be added to Sass as soon as this is possible.
",matthewmorek,chriseppstein
1048,2014-01-07 16:55:44,"@costa what do you mean?
",chriseppstein,costa
1048,2014-01-08 13:48:50,"@chriseppstein there's been no problem with single quotes :)
",costa,chriseppstein
1047,2014-01-07 23:09:15,"I think the diagnosis is correct; although the working directory was always in the load path, for some reason it wasn't being watched for changes in 3.2. Something about the listen changes in 3.3 made it start to be watched instead.

The 3.3 behavior is arguably correct, but since it's new behavior and we're deprecating the working directory load path anyway, we could just rip it out to do away with this performance problem. @chriseppstein, thoughts?
",nex3,chriseppstein
1041,2013-12-12 04:45:55,"@Snugug thanks for blasting the dust I had stuck in my eyes for all these years :+1: 
",jcayzac,Snugug
1040,2014-08-07 17:00:02,"@nex3 I know you're against this feature, but I still believe strongly that we should make importance an aspect of a value expression. I think it is very consistent. I cannot rewrite every compass mixin to have support for important being attached to any possible value that can be passed in to a mixin or function, it's a support nightmare.
",chriseppstein,nex3
1037,2014-01-07 17:03:49,"@lucascaton thanks for the follow up. 
",chriseppstein,lucascaton
1037,2014-01-20 14:37:18,"@wangyazhen I'm using the windows too and I have the same problem. 
Maybe it's time to buy a Macbook :)
",hamedqaderi,wangyazhen
1037,2014-08-19 03:28:21,"Hi @nex3,
i have tried both 3.3 and 3.4

Sass 3.3.14 is still giving me 
`Encoding::UndefinedConversionError on line [""833""] of /Users/user/.rvm/gems/ruby-1.9.3-p547/gems/sass-3.3.14/lib/sass/util.rb: ""\xE2"" from ASCII-8BIT to UTF-8`

but with Sass 3.4.0.rc.1, Everything works just fine. Thanks you
",munwr,nex3
1036,2013-12-07 06:25:25,"@chriseppstein, the complexity of using the parent selector is getting ridiculous.

In another thread @nex3 [says](https://github.com/nex3/sass/issues/996#issuecomment-30038445): _The syntax needs to be easy to understand when reading the code for someone with only passing familiarity with Sass, and easy to remember when writing Sass._

The burden of using the parent selector contradicts that statement.
",lolmaus,nex3
1036,2013-12-07 06:25:25,"@chriseppstein, the complexity of using the parent selector is getting ridiculous.

In another thread @nex3 [says](https://github.com/nex3/sass/issues/996#issuecomment-30038445): _The syntax needs to be easy to understand when reading the code for someone with only passing familiarity with Sass, and easy to remember when writing Sass._

The burden of using the parent selector contradicts that statement.
",lolmaus,chriseppstein
1036,2013-12-08 01:26:29,"@lolmaus What is hard to understand about & being passed to a well-named function?

Exposing `&` to scripting is to enable complex selector manipulation. Magical selector manipulation can and should only happen through explicit and well-defined  selector syntax. 
",chriseppstein,lolmaus
1036,2013-12-08 01:33:28,"I agree with @nex3 on this one; the expected result is closer to the the non-@at-root output and should reflect that. While I agree that magical manipulations should be done with explicit calls, I don‚Äôt feel this is one of those instance and the current behavior is both generally useless and breaks an at-a-glance understanding of how it should work.  

On Saturday, December 7, 2013 at 8:26 PM, Chris Eppstein wrote:

> @lolmaus (https://github.com/lolmaus) What is hard to understand about & being passed to a well-named function?
> Exposing & to scripting is to enable complex selector manipulation. Magical selector manipulation can and should only happen through explicit and well-defined selector syntax.  
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/1036#issuecomment-30072474).
",Snugug,lolmaus
1036,2013-12-08 01:33:28,"I agree with @nex3 on this one; the expected result is closer to the the non-@at-root output and should reflect that. While I agree that magical manipulations should be done with explicit calls, I don‚Äôt feel this is one of those instance and the current behavior is both generally useless and breaks an at-a-glance understanding of how it should work.  

On Saturday, December 7, 2013 at 8:26 PM, Chris Eppstein wrote:

> @lolmaus (https://github.com/lolmaus) What is hard to understand about & being passed to a well-named function?
> Exposing & to scripting is to enable complex selector manipulation. Magical selector manipulation can and should only happen through explicit and well-defined selector syntax.  
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/1036#issuecomment-30072474).
",Snugug,nex3
1036,2013-12-08 21:03:10,"@nex3 I've been thinking about your proposal and it is growing on me. Having `&` always represent a single selector and letting sass evaluate the selector expression once for each comma delimited selector does have a certain appeal. The only use case it precludes is letting the user have a more global view on several comma-delimited selectors and how they should be combined at the script level. However, I don't have a good use case for this and it could be introduced later by creating a special syntax for ""all the selectors"".

This is a big change to make for something that's already been called a release candidate, all the existing code that does `nth(&, 1)` or `@each $selector in &` will break. Caveat emptor?
",chriseppstein,nex3
1033,2013-12-10 19:17:29,"Nice, it looks like #1039 fixes the problem indeed, thanks @glebm ! 
",ahmeij,glebm
1033,2013-12-13 13:59:43,"it works! please do the pull request @nex3 
thanks @glebm 
",ServusJon,glebm
1032,2013-12-16 21:48:28,"@HugoGiraudel file a separate issue and we'll discuss it there.
",nex3,HugoGiraudel
1028,2013-12-07 00:58:59,"@nex3 Do you have any thoughts or recommendations to add to sstephenson/sprockets#507?
",spohlenz,nex3
1028,2014-02-10 20:19:21,"@nyarly An importer is in charge of knowing everything about how to resolve a set of URIs into a Sass source file. Part of that is saying how that source file can be accessed from a browser. I don't think it makes sense to split these out into two separate classes when the resolution is going to be logically similar much of the time.
",nex3,nyarly
1028,2014-03-10 19:34:22,"@mikeyhogarth sstephenson/sprockets#507 is the bug to track for this.
",nex3,mikeyhogarth
1028,2014-08-22 08:42:03,"@larslevie Hallelujah +1
",sandelius,larslevie
1027,2015-12-23 12:48:49,"@chriseppstein Suppose I am importing something from JSON to a map in sass. JSON doesn't support number keys but I know my keys are numbers and the numbers are important.

SASS isn't always the primary consumer of data, and I shouldn't have to make all my data work around SASS. SASS really lacks the ability to parse data or makes it incredibly difficult and it really hurts its interoperability with other tools.

This hurts for stuff like fonts, colours and other collections of information that my other languages want access to. Basically anywhere that I want SASS to communicate with the rest of my application instead of being this cumbersome thing that I have to maintain twice.

It doesn't even matter that it doesn't support the parsing of things like JSON which are ridiculously common, I'm happy to write or source that myself, but basic features like type casting really should be in the core.

In fact following that argument why doesn't all data start off in the format it is needed in? Because the same piece of data can be consumed by multiple things in different ways.
",georeith,chriseppstein
1027,2015-12-23 13:10:53,"@georeith Why not take a look at some third-party libraries such as [SassyJSON](https://github.com/HugoGiraudel/SassyJSON) or [Sassport](https://github.com/davidkpiano/sassport) to handle JSON and sharing data between Sass and JS, or [Sassdash](https://github.com/davidkpiano/sassdash) for list/map utilities? I think it was an intentional design to not bloat Sass with too many functions that can be handled by libraries (though that's not to say Sass 4.0 won't have a few nice new features for handling lists/maps).
",davidkpiano,georeith
1027,2015-12-23 14:16:29,"@davidkpiano I think you misinterpreted my comment. I'm not looking for a JSON parser, I'm saying you need to cast when you are working with data that wasn't originally intended for SASS or is intended for multiple consumers, e.g., you are using SassyJSON. E.g., a JSON string key that I need as a number value in SASS
",georeith,davidkpiano
1027,2016-05-24 17:57:51,"@rhythmus ^
",chriseppstein,rhythmus
1025,2013-12-11 22:54:23,"As @robwierzbowski noted. There are good uses for overriding a spec function. 
",chriseppstein,robwierzbowski
1023,2013-12-07 01:19:39,"This is expected. Sass doesn't use whitespace to determine whether to consider an operation unary or not, and `-` has higher precedence than ` `, so your property value is actually parsed like`0 (auto - ($footer-height + 1)) 0`.

You can use @HugoGiraudel's workaround or write `0 auto (-($footer-height + 1)) 0`.
",nex3,HugoGiraudel
1019,2013-11-25 17:53:46,"@xzyfer You can email the test code: chris@eppsteins.net
",chriseppstein,xzyfer
1019,2013-12-20 03:59:03,"@chriseppstein did you end up looking into that project? Otherwise I'll commit some time to this over the week holiday break.
",xzyfer,chriseppstein
1019,2013-12-23 20:54:30,"@Snugug Those slow downs could very easily be a compass issue and not a sass issue, the compass css3 mixins are significantly slower than they were before (Because they do so much more than they used to).
",chriseppstein,Snugug
1019,2013-12-23 21:27:17,"@chriseppstein I removed all Compass CSS3 mixins

UPDATE: In what I was running I noticed that there was still use of CSS3 Background Gradients. Having removed the calls to that and the Compass imports for Background Gradients, and the compile time hasn't improved by any substantial amount (reduces average compile time by ~2s). As a for instance, one stylesheet that absolutely does not touch Compass CSS3 mixins use to take around 15.3 seconds to compile, now takes around 21.6 seconds to compile.

It's fair to not rule out Compass as the source of slowness (as everything is being compiled through Compass for both runs), but it's not due to the CSS3 mixins.
",Snugug,chriseppstein
1019,2014-06-02 20:08:46,"@lolmaus the snapshot that was being looked at was a simple !global upgrade, no new architecture, so it's a good before/after comparison.

> On Jun 2, 2014, at 2:46 PM, xzyfer notifications@github.com wrote:
> 
> FWIW since I had a ruby-prof profiling environment setup I did some really quick profiling comparing a loop with and without the span mixin call. Granted profiling isn't really my thing, but there is a significant increase in the number of function calls in the code with the mixin call.
> 
> May be nothing, may be something.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,lolmaus
1019,2014-06-02 20:37:36,"@nex3 code example of iterative tree traversal: https://gist.github.com/chriseppstein/27c45a9bf87d56152033
",chriseppstein,nex3
1019,2014-06-04 17:53:11,"@thedarkone  I think you've got an old version of susy. Using susy (2.1.2), sass 3.3.8

$ sass -r susy slowfile.sass slowfile.css
",chriseppstein,thedarkone
1019,2014-07-03 23:24:33,"@idflood It looked promising so I tried it out.
https://github.com/chriseppstein/sass/commit/38552b5919a11739f7c99645fa91e138d0f00926

But it actually slowed the Sass stable branch tests down.

Before:
- Ruby 2.0 (16.2978182 seconds average of 5 test runs)
- Ruby ree-1.8.7 (17.9358288 seconds average of 5 test runs)

After:
- Ruby 2.0 (16.7046996 seconds average of 5 test runs) 2.5% slower.
- Ruby ree-1.8.7 (18.1737122 seconds average of 5 test runs) 1.3% slower.
",chriseppstein,idflood
1019,2014-07-04 05:45:45,"@chriseppstein thank you for trying. I also quickly tested your branch with the test defined here and have the same result as you (~2.5% slower). That would have been too easy.
",idflood,chriseppstein
1019,2014-07-04 09:10:05,"@idflood @chriseppstein that @tenderlove's article is easy to misunderstand. On MRI defining a method via `define_method` (instead of `class_eval`) uses 2x less memory **per method** definition, but as you've found out is slower **per method call** (about 30% slower on MRI, your diff of only about 2% is because overall not that much time is spent in invoking those methods). I don't think there is any difference in object allocation (or GC overhead) **per method call** between `define_method` and `class_eval`.
",thedarkone,idflood
1019,2014-07-04 09:10:05,"@idflood @chriseppstein that @tenderlove's article is easy to misunderstand. On MRI defining a method via `define_method` (instead of `class_eval`) uses 2x less memory **per method** definition, but as you've found out is slower **per method call** (about 30% slower on MRI, your diff of only about 2% is because overall not that much time is spent in invoking those methods). I don't think there is any difference in object allocation (or GC overhead) **per method call** between `define_method` and `class_eval`.
",thedarkone,chriseppstein
1019,2015-09-11 21:25:41,"@djam90 Can you [file an issue for that](https://github.com/sass/libsass/issues/new)?
",nex3,djam90
1019,2016-02-24 18:32:19,"@phaza I was experiencing the same thing with Foundation(6). I was also extending .rows and .columns (the way I think they encourage, I could be wrong). Perhaps we should relay that to @zurb for an answer. It may be that those classes spider down deeply.
",mkstix6,phaza
1019,2016-08-29 19:52:24,"@phaza @mkstix6 I have also experienced performance issues with multiple`@extend` calls to bootstrap row/column/form classes, which led to 3-4 minute compile times.
",AlanFoster,mkstix6
1019,2016-08-29 19:52:24,"@phaza @mkstix6 I have also experienced performance issues with multiple`@extend` calls to bootstrap row/column/form classes, which led to 3-4 minute compile times.
",AlanFoster,phaza
1015,2013-11-26 06:34:02,"I am trying to understand the opposition to this. `@import` was around before sass. Sass appropriated it so that the import is performed at compile time rather than request time. But then scss proceeds to break relative urls in it's implementation... 

I don't understand the viewpoint that urls would be ""mangled"" by fixing this. They'd be fixed, not mangled.

Nor do I understand @chriseppstein's point about 3rd party libs (and it's obvious he's given this thought). I think I need an example of where a fix for this might fail. My guess is it has something to do with urls pointing to dynamic endpoints? Eg `url(not/a/real/path/dynamic-image)`

(If we had been talking about fixing this in a `@sass-import` directive however, that would be different and I would understand the resistance).
",CrescentFresh,chriseppstein
1014,2013-11-14 11:44:18,"@lolmaus the answer to every feature request is not ""create a Compass extension"" or ""why bother there's a Compass extension"".

I, for one, think this would get quite a bit of traction with designers as it's not just Adobe products that have HSB as a primary color mode; a lot of the color scheming products I use outside of Adobe do as well.

> On Nov 14, 2013, at 6:07 AM, lolmaus notifications@github.com wrote:
> 
> You should create a Compass exension: http://compass-style.org/help/tutorials/extensions/
> 
> It will allow you to extend Sass with almost unlimited functionality.
> 
> You can use this template: https://github.com/Team-Sass/Compass-Extension-Template
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,lolmaus
1014,2013-11-14 14:49:57,"@Snugug Why not?  Maybe new features _should_ be an extension first.  Then, if the feature is popular enough, it can become a core feature of Compass, then a core feature of Sass.

I'm not saying no, but I don't see how HSB is any better than any other format provided by Adobe products.  The last several versions have a single field containing the hex value, which seams more convenient to me than trying to copy from 3 individual fields.

![color-picker](https://f.cloud.github.com/assets/2333706/1541679/86b398f6-4d3b-11e3-9a9c-02aca09e0799.jpg)
",cimmanon,Snugug
1014,2013-11-14 15:06:25,"@cimmanon You're right, hex colors are more handy at first look, but If you implement a given design, the colors become more comparable and searchable in both directions. For example I have something like this:



Then, for me it's not obvious, what the difference of them are.



This is much more readable and calculatable width `$lightOrange: adjust-hue($orange, 3deg);`

But at the moment I have to use e.g. colorzilla.org to convert them to hsl. And if I try to compare the colors from a PSD and my SASS Code I always have to translate myself.
",sja,cimmanon
1014,2013-12-06 23:16:16,"I agree with @cimmanon in that I like the idea of making this sort of thing an extension and upgrading from there.
",nex3,cimmanon
1013,2013-11-13 15:26:41,"@lolmaus Definitely not. It's a file-scoped `@return`. There is no jumping; at least, nowhere but out of the file.
",northborndesign,lolmaus
1013,2013-11-13 15:39:08,"@cimmanon Definitely similar support elsewhere.
PHP ( _yea, I know, PHP_ ) allows one to `return` from a file, resulting in similar behavior.
ASP.NET C# Razor templating allows the same ( _the templates are processed to native C# methods, so the `return` keyword simply returns from a `void` method_ )

@lolmaus Off-hand the immediate use case is conditional imports, but it could be used in lieu of deeply nested `@if` blocks, to linearize the conditional output of a given file:


",northborndesign,lolmaus
1013,2013-11-13 15:39:08,"@cimmanon Definitely similar support elsewhere.
PHP ( _yea, I know, PHP_ ) allows one to `return` from a file, resulting in similar behavior.
ASP.NET C# Razor templating allows the same ( _the templates are processed to native C# methods, so the `return` keyword simply returns from a `void` method_ )

@lolmaus Off-hand the immediate use case is conditional imports, but it could be used in lieu of deeply nested `@if` blocks, to linearize the conditional output of a given file:


",northborndesign,cimmanon
1013,2013-11-13 15:52:28,"@Snugug The linked `sass-import-once` seems to be the de facto solution, copied, pasted, and reinvented regularly, however the drawback is:



I'm very much looking forward to native `@import once`, don't get me wrong.

As far as it's measure of improvement; it is ""nice to have"", perhaps ""very nice to have"" ( _though I'll concede, not's not ""required""_ ). Code clarity is improved because the mental overhead of nested conditions is reduced.

A more familiar keyword, such as `@return` may assist those coming to the language, I'm not sure. I know that, given it were named `@return`, it would behave rather predictably based on my experience with other environments, namely templating languages. I assume because both PHP and ASP.NET ( _with Razor_ ) are ubiquitous, it wouldn't be a far stretch.
",northborndesign,Snugug
1013,2013-11-13 16:23:32,"We've digressed a bit. The reason behind my suggestion was that `@end` allows one to escape from a file primarily for the `@import once` use case. Since we cannot conditionally `@import` files, we can achieve the desired behavior by conditionally _leaving_ the file preemptively.

I haven't followed the discussion on `@import once` as intently as others have, however the longevity of the discussion lacking implementation reinforces the difficulty of implementing it. I have suggested this as an alternative that may or may not have less implementation overhead.

The condition linearization was merely icing.

Also @Snugug, note:

> PHP ( yea, I know, PHP ) [...]

As a PHP developer, I'm very aware of the ... problems. I participate in discussion with core contributors to improve the ""rat's nest"" that is PHP. I assure you this idea arose in isolation, with no inspiration from PHP. It was merely an example of another language exhibiting similar behavior ( _along with ASP.NET Razor_ )
",northborndesign,Snugug
1013,2013-11-13 16:49:24,"@chriseppstein Fair enough. Looking forward to conditional imports then.
",northborndesign,chriseppstein
1013,2013-11-13 17:56:55,"> @Snugug 
> As for the suggestion that it's in PHP and therefore it's okay, to quote @chriseppstein:
> 
> > [W]e do not take any inspiration from the language design of PHP and most programmers view PHP as the quintessential example of bad language design

How about `require_once`? It appears to me as a feature that Sass would benefit from.

Consider the situation: two separate modules both depend on Toolkit, and Toolkit unconditionally emits some CSS when required. An `@import-once` could resolve the issue without a need to manually implement it in every Compass extension (you didn't do it for Toolkit, so...).
",lolmaus,Snugug
1013,2013-11-13 17:56:55,"> @Snugug 
> As for the suggestion that it's in PHP and therefore it's okay, to quote @chriseppstein:
> 
> > [W]e do not take any inspiration from the language design of PHP and most programmers view PHP as the quintessential example of bad language design

How about `require_once`? It appears to me as a feature that Sass would benefit from.

Consider the situation: two separate modules both depend on Toolkit, and Toolkit unconditionally emits some CSS when required. An `@import-once` could resolve the issue without a need to manually implement it in every Compass extension (you didn't do it for Toolkit, so...).
",lolmaus,chriseppstein
1013,2013-12-06 04:45:44,"@bracketworks @lolmaus fwiw import-once semantics have now landed in compass/master https://github.com/chriseppstein/compass/issues/1463
",xzyfer,lolmaus
1010,2013-11-11 16:54:41,"@chriseppstein In Singularity we use Breakpoint to query media context. If my media query matches my medium breakpoint then use the grid associated with it. I use media a lot more for context querying than selectors.

Auto generating a fallback for things like rgba is a good one for property querying. If something has rgba I can query the selector and write a hex value fallback, then duplicate the property and write the rgba value.
",scottkellum,chriseppstein
1010,2014-10-17 17:44:51,"@jakob-e I tend not to use set breakpoints and instead use explicit values on many projects. There are absolutely ways to architected this. I use [Breakpoints context](https://github.com/at-import/breakpoint/wiki/Breakpoint-Context) in my own projects.

Currently I am using the Breakpoint context API for responsive logic in plugins like Singularity and Modular Scale but it would be nice to do this natively and remove the dependencies around Breakpoint. This will allow for greater portability of frameworks that contain responsive logic.
",scottkellum,jakob-e
1010,2014-10-19 11:09:09,"@scottkellum I'm not sure I understand ‚Äì why would you not use a centralized configuration of your breakpoints? You would need to create a relation between ""medium"" and eg. ""(min-width: 20.0625em) and (max-width: 40em)"" anyways... sorry if I'm just not getting it :-)

Test: http://sassmeister.com/gist/82c8ee37295f5015df49




",jakob-e,scottkellum
1010,2014-10-19 11:25:31,"@jakob-e, do not try to manage breakpoints, that's impossible. Instead, only try to realize the truth: [there is no breakpoint](http://seesparkbox.com/foundry/there_is_no_breakpoint). Then you see that it is not you who determines the breakpoints, it is only the content.
",lolmaus,jakob-e
1010,2014-10-19 11:39:01,"@lolmaus - I get that ‚Äì  but how then would you create a relation between a specific query and eg. a column? I don't see how a native context would be of much help.

To me it is about mapping the breakpoints you use - like ""lok-at-me-im-retina""
",jakob-e,lolmaus
1010,2014-10-19 11:49:53,"@jakob-e We're getting off topic, and the example you've included to bump this thread is more or less identical to what everyone else (including the post immediately above yours) has said.

As for your question, what @scottkellum is referring to is [Singularity's Responsive Contexts](https://github.com/at-import/singularity#responsive-grids) where Singularity doesn't need to know what your final queries are in order to know, through [Breakpoint's Query Context](https://github.com/at-import/breakpoint/wiki/Breakpoint-Context), what grid settings you'd like to be using when you call Singularity inside of a media query.

The gist of this issue isn't to see everyone's way of handling media queries or to suggest that we get a native form of one of the many `breakpoint` mixins, it's to be able to introspect a media query while inside it, what Breakpoint's query context allows for.
",Snugug,jakob-e
1010,2014-10-19 11:49:53,"@jakob-e We're getting off topic, and the example you've included to bump this thread is more or less identical to what everyone else (including the post immediately above yours) has said.

As for your question, what @scottkellum is referring to is [Singularity's Responsive Contexts](https://github.com/at-import/singularity#responsive-grids) where Singularity doesn't need to know what your final queries are in order to know, through [Breakpoint's Query Context](https://github.com/at-import/breakpoint/wiki/Breakpoint-Context), what grid settings you'd like to be using when you call Singularity inside of a media query.

The gist of this issue isn't to see everyone's way of handling media queries or to suggest that we get a native form of one of the many `breakpoint` mixins, it's to be able to introspect a media query while inside it, what Breakpoint's query context allows for.
",Snugug,scottkellum
1010,2014-10-19 12:09:01,"@Snugug I'm not here to pick a fight ‚Äì just to understand and provide what little I have. IMO what you are asking for seems too complex and does not help to automate things. I could be wrong ‚Äì but I'm failing to see how you would use such a feature generically while keeping it simple and understandable. 
Best to you and the guys ‚Äì roger out :-)
",jakob-e,Snugug
1010,2014-10-19 14:20:02,"For clarity, this is probably more of a toolmakers feature request instead of a site-builder request. There are absolutely solutions for this in projects as @jakob-e points out. As a tool builder we have no idea what your breakpoint configuration and mixins might look like on your projects.

This feature request would allow users of things like Singularity, Modular Scale, Susy, and other tools that behave differently depending on context to manage breakpoints in the way you specify or however else they want to manage breakpoints. It will also dramatically reduce complexity of these tools and their dependencies.

Your solution is solid @jakob-e, no one is arguing against it or suggesting it is a bad solution. The problem is just that not everyone manages their breakpoints this way and that causes problems for us tool makers.
",scottkellum,jakob-e
1010,2014-10-19 16:22:01,"@scottkellum :-) It may have been (very) unclear from my part ‚Äì but I also wanted to add the question about mapping to the discussion. If we look at the [Multiple Context Query example](https://github.com/at-import/breakpoint/wiki/Breakpoint-Context): 



The amount of handling needed in @mixin tool could be quite heavy - unit conversion, min-max-width ranges, how to handle in combination with orientation, resolution or...   



My thought was to steer clear of this menace by letting the user declare the relationship between a query and the expected tool output ‚Äì and using keys seemed a little less verbose compared to queries:



You could also (and this is where I see the feature use case) provide a map to the tool with the media queries and a expected return value. But It still requires the mapping to be made ‚Äì and I think you would like the user to be in control while keeping your tool simple (as in tool not framework)  

Did it make sense?
",jakob-e,scottkellum
1010,2014-10-19 17:47:21,"@jakob-e Ah, I am still not quite grokking your examples but, interesting. So you are expecting the output of the proposed `&(media)` or whatever to be a map of `@media` properties?



Where `$media` would be a map that looks like:



I really like this, it‚Äôs really similar to how Breakpoint works. As a core language feature it may need some tweaking though to support comma separated media lists. This can get super complicated fairly quickly with an example like this:



where you end up with a `@media` context of:



and your `&(media)` might return a map like:



Again, not quite grokking your last post but going line by line for measure:

> The amount of handling needed in @mixin tool could be quite heavy - unit conversion, min-max-width ranges, how to handle in combination with orientation, resolution or...

It could be, but in most cases doesn‚Äôt need to be. In most cases just knowing the first `min-width` call in whatever units are specified by the user is more than sufficient. There will likely be a config for the tool itself and assuming the author keeps units the same in both places it is a straightforward process to adapt the tool output for the context.

> My thought was to steer clear of this menace by letting the user declare the relationship between a query and the expected tool output ‚Äì and using keys seemed a little less verbose compared to queries

We do this already in our tools and it is what I am trying to avoid. Having the user manually insert a value is not usually a problem but it can be a hassle and it is something I would really like to automate. As I said in my last comment this is an elegant solution we can do today to curb this issue and we are doing it everywhere we can. I think we can do better though and I am frustrated by having to tell users how to set up their contexts and breakpoints. This is especially a problem when someone introduces a new tool to an old project where changing how contexts work may be a hassle. Again, I feel like I am going back to my previous argument so I may still be misunderstanding what you are trying to illustrate here.

### A concrete example of what I am trying to solve

I started this issue because I was having trouble applying responsive logic to modular-scale while upholding the install and setup standards I wanted. This is what I want people to do:



Even if `&(media)` was a string like `&` returns with selectors you could quickly query what a value is like this:



Then use `>` or `<` logic to find where it is in relation to the tools configuration.
",scottkellum,jakob-e
1010,2014-10-19 23:54:52,"@scottkellum I think we are talking past each other ‚Äì so I'll shift to talk about how a context feature could look and work... then someone smarter than me on the inner life of SASS can dismiss the idea :)

This is just a brainstorm - please fill in the blanks 

First I think it should be a introspection like function returning the entire context at the given point of use.
The returned value could be a list of string values (I think this would be the best fit considering the variety of contexts we could encounter)



Calling a function would not change the context 



Called in includes it would return the value at the time of render  



Comma separated styles are placed in the same context group  


",jakob-e,scottkellum
1010,2014-10-20 12:07:50,"@jakob-e You are describing the current behavior of `&` and it already exists: http://sassmeister.com/gist/a31765281413bde89032

I am simply proposing adding media query introspection to this.
",scottkellum,jakob-e
1010,2014-10-20 13:31:56,"@scottkellum 
& is a parent selector and media does not fit that description. That is why I'm suggesting a  function to   return the full context; directives, parents,...  



How would the output look if you add media?

A minor detail about the function I described is the concept of splitting the context into groups ‚Äì it might come in handy if looking for "".grid"" in parent selector only or... 



 { creates a separator

you could add functions to handle both cases like get-context-list() and get-context-string() and maybe even a get-context-directive-list()...  
",jakob-e,scottkellum
1010,2014-10-20 13:59:52,"For me, the mental model of using `&` still works because MQs are combined like selectors and Sass allows nesting them like selectors. I‚Äôm sure @nex3 great insight into the language details and complications of this. I‚Äôm not sure we need a whole new model for context as the `&` model works well. I would be open to new models but as a language feature it should be simple, not too clever, and match existing mental models.

@jakob-e:

> A minor detail about the function I described is the concept of splitting the context into groups ‚Äì it might come in handy if looking for "".grid"" in parent selector only or...

I think one of the main sources of confusion is that this conversation is getting to be really off-topic and maybe you should start a new thread for context querying. It‚Äôs not a feature I would necessarily advocate for but you can have a discussion about those details there.
",scottkellum,nex3
1010,2014-10-20 13:59:52,"For me, the mental model of using `&` still works because MQs are combined like selectors and Sass allows nesting them like selectors. I‚Äôm sure @nex3 great insight into the language details and complications of this. I‚Äôm not sure we need a whole new model for context as the `&` model works well. I would be open to new models but as a language feature it should be simple, not too clever, and match existing mental models.

@jakob-e:

> A minor detail about the function I described is the concept of splitting the context into groups ‚Äì it might come in handy if looking for "".grid"" in parent selector only or...

I think one of the main sources of confusion is that this conversation is getting to be really off-topic and maybe you should start a new thread for context querying. It‚Äôs not a feature I would necessarily advocate for but you can have a discussion about those details there.
",scottkellum,jakob-e
1004,2013-11-14 11:04:56,"@isyara no it is not: http://sassmeister.com/gist/7464997 and http://sassmeister.com/gist/7465014
",kizu,isyara
1004,2013-11-15 23:36:02,"This also fails miserably:



Produces:



Should produce:



In Less and Stylus this works fine since forever.

@kizu, could you please mention ""parent selector"" and ""&"" in this thread's title?

UPD: works as a charm like this (kudos to @Snugug):


",lolmaus,kizu
1004,2013-11-15 23:42:12,"@lolmaus seems as if you have not read how the interpolated selectors work properly.

What you are saying is you would like to interpolate the selector and best it under the current selector, which produces normal nested selectors. On the other hand, if you were to prefix the interpolation with `@at-root`, you say that you want to interpolate the selector and put it at the root of your document, which produces the expected results.
",Snugug,lolmaus
1004,2013-11-16 00:49:08,"@Snugug, thank you. You're right, i haven't read documentation for Sass 3.3 features yet (does it exist already?). I'm sorry for bothering you and others.
",lolmaus,Snugug
1004,2013-11-16 20:01:00,"When using & in a script context (like interpolation) you need to combine this with an @at-root directive. Search the issues and you'll see plenty of examples. 

Hunt & pecked on my iPhone... Sorry if it's brief!

> On Nov 15, 2013, at 3:36 PM, lolmaus notifications@github.com wrote:
> 
> This also fails miserably:
> 
> .fieldset {
>   background: red;
>   #{&}-field {
>     background: blue;
>     #{&}-label {
>       background: green;
>     }
>   }
> }
> Produces:
> 
> .fieldset {
>   background: red;
> }
> .fieldset .fieldset-field {
>   background: blue;
> }
> .fieldset .fieldset-field .fieldset .fieldset-field-label {
>   background: green;
> }
> Should produce:
> 
> .fieldset {
>   background: red;
> }
> .fieldset-field {
>   background: blue;
> }
> .fieldset-field-label {
>   background: green;
> }
> In Less and Stylus this works fine since forever.
> 
> @kizu, could you please mention ""parent selector"" and ""&"" in this thread's title?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",chriseppstein,kizu
1004,2013-12-06 23:39:20,"> @kizu wrote: And are there any use cases when `&` inside an interpolation could be used without `@at-root`? I see only the opposite and it is strange that we need to use a lot of extras to get the most common cases.
> 
> @shabunc wrote: Indeed, why do we need explicitly type `@at-root` at all?

The issue is that it's impossible to tell, in general, whether `&` was used. We could pretty easily check whether it was explicitly used in the selector itself, but that breaks unexpectedly if you store it in a variable and use it. We could attach some metadata to the object `&` refers to itself, but then what if you parse and manipulate it? Clever inference like you're suggesting only works when the user can rely on it; otherwise it just leaves them feeling like they don't understand what's going on.

I'm closing this; #1036 is tracking the underlying issue.
",nex3,kizu
1004,2013-12-06 23:39:20,"> @kizu wrote: And are there any use cases when `&` inside an interpolation could be used without `@at-root`? I see only the opposite and it is strange that we need to use a lot of extras to get the most common cases.
> 
> @shabunc wrote: Indeed, why do we need explicitly type `@at-root` at all?

The issue is that it's impossible to tell, in general, whether `&` was used. We could pretty easily check whether it was explicitly used in the selector itself, but that breaks unexpectedly if you store it in a variable and use it. We could attach some metadata to the object `&` refers to itself, but then what if you parse and manipulate it? Clever inference like you're suggesting only works when the user can rely on it; otherwise it just leaves them feeling like they don't understand what's going on.

I'm closing this; #1036 is tracking the underlying issue.
",nex3,shabunc
1001,2013-12-13 18:05:30,"@nex3 The nav-\* properties have accepted an ID since at least 2004, per spec: http://www.w3.org/TR/2004/CR-css3-ui-20040511/#nav-dir.  I think this change predates SASS by at least a little bit.  ^_^
",tabatkins,nex3
999,2013-12-06 23:28:48,"@lolmaus is correct that relying on DOM values is impossible, since Sass is a **pre**compiler. It compiles the CSS long before it's ever seen by a browser.

Accessing properties from within the same selector context is something that's been requested fairly often, but I've never seen a compelling use case where it's substantially more powerful than assigning the value to a variable first. This would be a large and often difficult-to-understand feature to add, and it's not worth it if it's just going to save a few lines.
",nex3,lolmaus
999,2016-11-01 12:21:38,"@nex3 Closed and old issue I know, but I can't find an open and relevant issue for this. Here's an example of where Stylus bests Sass because of property lookup:

Sass:



Stylus:



It's not a big deal but I think it helps a lot with readability. Whereas with a var you can't immediately visually grep how often a var is used (and what the consequences are of changing it), you can immediately tell with a property lookup that there is a direct connection between two properties that doesn't affect anything else.
",SamHH,nex3
999,2016-11-01 12:38:24,"@SamHH #109 is still open, you can try adding your suggestion there.
",lolmaus,SamHH
998,2013-12-06 22:27:58,"I agree with @chriseppstein. This isn't something that's widely useful enough to warrant inclusion. Sass also exposes a pretty reasonable Ruby API for watching files, so it's easy to make something like this for yourself without needing it to be in the Sass core.
",nex3,chriseppstein
997,2013-11-04 19:49:59,"@chriseppstein different calculations can create very large numbers before reducing them to the answer, for example using wilson's theorem to calculate prime numbers uses a factorial of `n` to determine if it's prime. Which in this case would make 24 the highest number you could use.

The maclaurin series does the same thing, which is used to calculate many trigonometric functions (`cos`, `sin`, `tan`, ...)
",thejameskyle,chriseppstein
996,2013-12-06 23:41:16,"@nex3 what about something like the following:


",Snugug,nex3
996,2014-01-10 03:46:20,"I got curious how Python folk resolve this issue, as Python doesn't boast to be syntactically sweet as well as Sass.

It turned out, they [use an `enumerate` helper function](http://stackoverflow.com/questions/522563/accessing-the-index-in-python-for-loops) for this which does a simple job: turns an array into a dictionary.

So i made a similar function for Sass.

Usage:



Source:



Seems to be working fine and handy to use.

Demo: http://sassmeister.com/gist/8346425

It doesn't cover @Snugug's nifty use case though.
",lolmaus,Snugug
993,2013-11-02 21:38:13,"Your problem is not related to extending. You just forgot the ampersands, while you didn't forget them in the workaround.

Here you go:



Result:



Demo: http://sassmeister.com/gist/7283712

@Snugug's first example won't work either due to missing ampersands.

I think this approach violates the [KISS principle](https://en.wikipedia.org/wiki/KISS_principle) a lot. I find your workaround to be way more readable and maintainable.
",lolmaus,Snugug
993,2013-11-02 21:45:57,"@lolmaus please reread my initial comment. The first code block is a slightly reworked version of the original to display what Sass sees without offering a solution; what is happening is described underneath. The second code block is a working example designed to be selector-independent. (hence the namespacing). You could namespace in place in your example if you would like, but I prefer to separate out placeholder selectors from full selector nesting in order to prevent unexpected selectors creeping in if I choose to reuse that placeholder elsewhere, making it much more reusable. If done in the same vicinity as the primary selector when you initially want to use it, the change to your cascade shouldn't be noticable.
",Snugug,lolmaus
993,2013-11-02 22:52:55,"@lolmaus I actually had hoped I wasn't forgetting them! I was riding on the idea that placeholders would ""cut and paste"" my `:hover`, etc. ""selectors"" onto the ampersand and behave like decorators to the parent selectors. Your solution and @Snugug's both work nicely. and answer the original question, so thanks!

FWIW, I prefer @Snugug's namespacing, but @lolmaus raises an interesting point that perhaps forgoing extension at all (my ""workaround"") actually results in cleaner code. I am actually slightly on board with this idea, and since that's what's in my repo now it might become what it stays.

Good learning experiences from both of you, thanks a ton!
",tylrtrmbl,Snugug
993,2013-11-02 22:52:55,"@lolmaus I actually had hoped I wasn't forgetting them! I was riding on the idea that placeholders would ""cut and paste"" my `:hover`, etc. ""selectors"" onto the ampersand and behave like decorators to the parent selectors. Your solution and @Snugug's both work nicely. and answer the original question, so thanks!

FWIW, I prefer @Snugug's namespacing, but @lolmaus raises an interesting point that perhaps forgoing extension at all (my ""workaround"") actually results in cleaner code. I am actually slightly on board with this idea, and since that's what's in my repo now it might become what it stays.

Good learning experiences from both of you, thanks a ton!
",tylrtrmbl,lolmaus
991,2013-12-06 22:39:45,"@fitzgen is there a more polished spec than [this one](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k)? There are a lot of things it doesn't make clear.
",nex3,fitzgen
991,2013-12-13 00:28:21,"@nex3 Nope, that is it. If you have specifics you'd like to see cleared up or have questions, this is the place: https://lists.mozilla.org/listinfo/dev-js-sourcemap
",fitzgen,nex3
990,2014-06-10 14:03:07,"@nex3 Your example doesn't work anymore in Sass 3.3.8. Is there a way to solve this in another way?
",hinok,nex3
990,2014-06-13 19:49:54,"@hinok You'll need to wait until script `&` is reintroduced in Sass 3.4, I'm afraid.
",nex3,hinok
988,2014-02-06 18:31:59,"@aripollak I did not know about `close!`. It's worth a try to see if it clears up the issue.
",chriseppstein,aripollak
984,2013-10-23 21:40:37,"Thank you @chriseppstein, you're awesome!
",lolmaus,chriseppstein
982,2013-12-06 22:26:44,"@nex3  Comments taken and code updated
",twalpole,nex3
982,2013-12-08 07:25:10,"@nex3  ok - changes made and support extended to the current released version of Listen - From my tests a note will need to go with the 3.3 release that if users are on ruby < 1.9.3 they will need to also specify listen < 2.0 in their gemfile for gem to be able to work out the correct versions
",twalpole,nex3
982,2013-12-14 06:16:23,"@nex3  What about  removing the listen dependency from the Gem, and only enabling the --watch functionality if listen is separately included into the users project?  That way there could be a message explaining the issue if the user tries to use watch without having listen available, but wouldn't limit 1.9.3+ users to an old listen
",twalpole,nex3
982,2013-12-14 07:40:26,"@nex3  or I could implement the method from http://en.wikibooks.org/wiki/Ruby_Programming/RubyGems#How_to_install_different_versions_of_gems_depending_on_which_version_of_ruby_the_installee_is_using. To possibly solve the issue?
",twalpole,nex3
982,2013-12-14 20:10:11,"@chriseppstein Ok -- what about the option of removing the dependency and having a message if someone tries to use the watch functionality telling them they need to also include listen?
",twalpole,chriseppstein
982,2014-01-13 20:17:59,"@nex3 I've used 3.2 with multiple projects using Guard and haven't encountered any issues, primarily since I explicitly avoid any SASS-related watches. I just run my stuff through the compiler. Obviously what @chriseppstein is proposing is the sane alternative, but how long would that take? I would not mind to just get an error message if the version of 'listen' I depend on cannot be used for one reason or another, or to be ""downgraded"" to on-demand compilation. I mean, how would a setup like it is now work out for someone with Guard on a Rails project for example? There clearly are two use cases here: one where SASS is run as a library, and the other where it's run standalone and they are getting mixed up.
",julik,nex3
982,2014-01-13 20:17:59,"@nex3 I've used 3.2 with multiple projects using Guard and haven't encountered any issues, primarily since I explicitly avoid any SASS-related watches. I just run my stuff through the compiler. Obviously what @chriseppstein is proposing is the sane alternative, but how long would that take? I would not mind to just get an error message if the version of 'listen' I depend on cannot be used for one reason or another, or to be ""downgraded"" to on-demand compilation. I mean, how would a setup like it is now work out for someone with Guard on a Rails project for example? There clearly are two use cases here: one where SASS is run as a library, and the other where it's run standalone and they are getting mixed up.
",julik,chriseppstein
971,2013-10-18 13:59:07,"@shepmaster This is awesome. Nice work! I'm copying your commit message here, so that your fantastic explanation is front-and-center:


",seejee,shepmaster
971,2014-01-15 02:34:20,"This patch is against stable. I've been trying to get it working on master.

I've also implemented @nex3's suggestion to memoize all the offsets and it also tracks line numbers now too. I should be able to get a bow on this tomorrow then we should benchmark it again.

@shepmaster do you have the files you were using for benchmarking your changes anywhere?
",chriseppstein,shepmaster
971,2014-01-15 02:34:20,"This patch is against stable. I've been trying to get it working on master.

I've also implemented @nex3's suggestion to memoize all the offsets and it also tracks line numbers now too. I should be able to get a bow on this tomorrow then we should benchmark it again.

@shepmaster do you have the files you were using for benchmarking your changes anywhere?
",chriseppstein,nex3
971,2014-01-15 02:37:48,"@nex3 A general problem I've noticed with stringscanner is that scanner.pos tracks the byte offset and not the character offset. I'm pretty sure we're misreporting column numbers when multibyte characters are involved. I'm not going to touch that aspect here and it's not clear whether sourcemaps are character based or byte-based. If they are byte-based, we need to track bytes for sourcemaps and characters for error reporting. Sigh.
",chriseppstein,nex3
971,2014-01-15 19:21:12,"@chriseppstein `Sass::Util::MultibyteStringScanner` should handle multibyte characters correctly. Until we hear otherwise, I think it's safe to assume that source maps use characters rather than bytes.
",nex3,chriseppstein
971,2014-01-21 19:33:27,"Meh, I couldn't get the tests back to green before I gave up on this because I had to move on to higher priority tasks. Hopefully @shepmaster will keep going with it.
",chriseppstein,shepmaster
971,2014-01-22 18:04:06,"@shepmaster I'd like to get this into the upcoming 3.3.0-rc.3, but I can't do so unless we iterate on this code review.
",nex3,shepmaster
966,2015-02-27 00:04:09,"@nex3 Do note that it's not a new feature; it's a regression. Used to work.

If I do ever find some spare time, I'll pick it up where I left off!
",pcantrell,nex3
955,2013-11-25 16:10:29,"@nex3 Given mavericks shipped with Ruby 2.0, is there any movement on supporting newer versions?  We're evaluating whether we want to maintain a fork in the interim vs waiting for a fix in master.
",spicycode,nex3
955,2014-01-28 02:21:12,"Thanks @nex3 awesome work!
",metaskills,nex3
949,2013-10-15 19:22:20,"@viswanathct : what is the SCSS code that would produce that desired CSS in your use case?
",pdaoust,viswanathct
949,2013-10-15 20:03:22,"This would be a very useful addition that prevents repetition without making the developer worry about it. I can repeat the same style any number of times but my code won't be bloated. 

Its not too transparent, but this is pretty much how your CSS is going to work and with source maps, it should be easy to detect, where this particular **final** style is being computed from. 

I know there are many ways to overcome this problem and this is not really a limitation in sass, but I would totally :+1: this feature!

Another example, for @pdaoust is as below 
It doesn't seem too useful because we are using the mixin below only a few times. But imagine a big project, where these mixins are called over and over but overrides happen once in a while. Doesn't make sense to make it an optional parameter either. Doesn't make sense to have dual declarations. 


",rvinay88,pdaoust
949,2013-10-15 23:33:10,"@pdaoust, I suggested it as a generic improvement. I trying implement OOCSS on a project. In which, I use jade for _templating out_ UI controls. I'm worried that the **weight** of the CSS would increase, as the project gets more complex.

So, I suggest that, _two **exactly identical** rules within the same scope_ could be removed from the **resulting CSS**.

And, Is there a way to label this as a ""feature""?
",viswanathct,pdaoust
949,2013-10-18 20:13:39,"@viswanathct Post-compilation is probably a good place to do this, you're right. I think that, if the maintainers think this issue is a good idea (and it sounds like they do), they'll give it a 'feature request' label.

I'm still curious, what would be the SCSS code that would produce your desired output:



The intent of the code wasn't clear from your example.
",pdaoust,viswanathct
944,2013-09-30 19:10:09,"Hi, @mohsen1 . Nested string interpolation works for me, using your example. However, I did notice a typo on one of the lines:



should be:



Perhaps that was the cause of your issue?
",pdaoust,mohsen1
944,2013-09-30 20:36:44,"@pdaoust Than you for your feedback.

After a lot of refactoring this is how I'm trying to solve this:



But generated CSS is like this:


",mohsen1,pdaoust
944,2013-10-03 17:43:59,"Thank you @pdaoust! That answers my question! I like the idea of hashmaps. When I started using Sass I thought even `if` and `for` statements are too much for CSS but now that I am demanding even more complex language features! 
",mohsen1,pdaoust
934,2013-10-01 18:35:39,"@cjcheshire nope.
",chriseppstein,cjcheshire
931,2013-10-04 00:24:06,"@nex3 by the same argument you should remove numbers between 0 and 1 for lighten ?
",AlexRiedler,nex3
917,2013-09-10 14:01:08,"It sounds like your problem would be better solved by adjusting your coding style, not the language:



The likelihood of moving the first item in the collection is exceptionally rare compared to how often one would rearrange the elements that follow or append additional elements.

@monsanto CSS doesn't _have_ maps, the `property: value` syntax is more like an imperative style collection of commands (apply this style, then apply the next style, etc.).  Just because it looks like a duck from another language doesn't mean that it _is_ a duck in this language.
",cimmanon,monsanto
915,2014-03-29 17:40:03,"@jakob-e & @lunelson :

You might want to try my implementation below. IMO it's one of the more readable solutions for dynamic placeholders both outside media queries and inside media queries and results in a pretty optimised CSS output.

Note, however, that you'll need Sass 3.3 for this to work. Also, you still get the repetition of the `@media` statement (which is hard to avoid unless you use a more complex architecture). 

## Configuration



---

## String functions



---

## The magic



---

## Examples



---

## The output



See also https://gist.github.com/jslegers/9805919
",jslegers,jakob-e
915,2014-03-29 17:40:03,"@jakob-e & @lunelson :

You might want to try my implementation below. IMO it's one of the more readable solutions for dynamic placeholders both outside media queries and inside media queries and results in a pretty optimised CSS output.

Note, however, that you'll need Sass 3.3 for this to work. Also, you still get the repetition of the `@media` statement (which is hard to avoid unless you use a more complex architecture). 

## Configuration



---

## String functions



---

## The magic



---

## Examples



---

## The output



See also https://gist.github.com/jslegers/9805919
",jslegers,lunelson
915,2016-06-02 15:16:16,"Yeah so.. that doesn't work anymore @lunelson 

hash tag sigh.
",entozoon,lunelson
915,2016-06-02 17:43:41,"@entozoon actually it does work; I wrote that gist before Sass introduced the `!global` flag. This is required in order to modify a global variable from inside of a mixin ‚Äî for example the `mq ()`mixin in that gist. Here's the updated code

http://www.sassmeister.com/gist/cd999df6a2712b1959d2b68d4505602b
",lunelson,entozoon
910,2013-09-06 15:00:46,"@jpka- Yes. Maybe someone in the community will want to write an automated tool on top of sass.
",chriseppstein,jpka-
909,2013-09-06 23:49:33,"@nex3 

the source of `colorOpacity` looks like this



I'm expecting



output: 


",lifeiscontent,nex3
905,2013-09-06 22:35:42,"I agree that the duplication still needs to happen with placeholders, however I disagree that it's incorrect behaviour. Exactly the opposite in fact. As with @MrOrz I believe the current behaviour of producing output within the context a placeholder was extending is a behaviour that's depended on heavily, and easy to reason about.

In practice if this feature is removed there'll be few to no options for writing clean sass when dealing with media queries. For each context a developer wants to extend a selector they'll either be forced to:
- explicitly duplicate that selector in each context they want to extend it
- wrap that select in a mixin and include it into a each context they want to extend it

Neither of these are intuitive, or clean and the former cannot be DRY. 
IMHO placeholders are conceptually different enough to solve this problem, and easy for developers to reason about.

As a developer, being able to define a placeholder in a single context, and extend it in any context with the knowledge that it will be made available on demand is great. To be honest defining a placeholder in multiple context is counter intuitive because, as you mentioned above, I'd expect all the extended selectors to have been inserted into all context. 

---

If there is fact a way to write DRY sass across multiple media query contexts that I'm not aware of I humbly withdraw my objections here.
",xzyfer,MrOrz
905,2013-09-06 23:46:40,"You're correct about your example, but we can work currently work around that limitation as @MrOrz has shown



I think it make sense for placeholders to be further distinguished from selectors beyond ""they don't produce output on their own"". Allowing them to be extending into different context's is one such desirable feature. 

The cost of some documentation is small price to pay for the added cleanliness, all around maintainability of large responsive sass projects. 

It's not that I don't understand why you want to remove these features, but I can't help thinking:
- shouldn't developers be making an effort to be aware of the output they're producing?
- does preventing new features, and/or removing existing features, in order to help the lazy/ignorant at the cost of tying the hands of project authors in the best interests of a project? 

---

Personally I would like to see at the very least, is the mixin work around to continue to work, and I'm wishful fo your example to become functional in the same way. Obviously not at the cost of introducing breaking behaviour.

A compromise to achieve the same result, with similar DRY'ness would be to enable @imports within @media. 


",xzyfer,MrOrz
905,2013-09-09 18:04:02,"@jakob-e I appreciate your work on this. I've had to do some similarly gnarly work arounds myself. Have you ever tried to explain this to new team members? The main point of this thread is that the simple (native) solution to this problem exists and is about to be removed.

@MrOrz I like your general concept. 

What I think could work:
- create some documentation educating developers on some common cases for unintentional output (Nicole Sullivan of OOCSS talks about some of these here https://www.youtube.com/watch?v=GhX8iPcDSsI)
- keep the existing behaviour shown by @MrOrz (for placeholders only IMHO)
- change the warning output from a deprecation warning to `""this could potentially result in duplicate output""` warning with a link to said documentation
- add a directive for suppressing warnings inline e.g. `@extend %placeholder !acknowledge` similar to what exists in [PHP](http://php.net/manual/en/language.operators.errorcontrol.php), [Ruby](http://api.rubyonrails.org/classes/Kernel.html#method-i-suppress), [JShint](https://github.com/jshint/jshint/issues/757#issuecomment-17376443)

I'm suggesting this because it introduces a small number for changes to sass core, as well making an attempt to help move the community as a whole forward with education. It's not new for tools to return useful link and documentation as output. I also think the `""this could potentially result in duplicate output""` warning could be applicable in a number of other use cases in future releases.

Ideally I'd be great if the existing functionality could be extended so that the example demonstrated by @nex3 (https://github.com/nex3/sass/issues/905#issuecomment-23974599) was functional i.e. not needing to wrap placeholders in a mixin inorder to inject them into a context.
",xzyfer,MrOrz
905,2013-09-09 18:04:02,"@jakob-e I appreciate your work on this. I've had to do some similarly gnarly work arounds myself. Have you ever tried to explain this to new team members? The main point of this thread is that the simple (native) solution to this problem exists and is about to be removed.

@MrOrz I like your general concept. 

What I think could work:
- create some documentation educating developers on some common cases for unintentional output (Nicole Sullivan of OOCSS talks about some of these here https://www.youtube.com/watch?v=GhX8iPcDSsI)
- keep the existing behaviour shown by @MrOrz (for placeholders only IMHO)
- change the warning output from a deprecation warning to `""this could potentially result in duplicate output""` warning with a link to said documentation
- add a directive for suppressing warnings inline e.g. `@extend %placeholder !acknowledge` similar to what exists in [PHP](http://php.net/manual/en/language.operators.errorcontrol.php), [Ruby](http://api.rubyonrails.org/classes/Kernel.html#method-i-suppress), [JShint](https://github.com/jshint/jshint/issues/757#issuecomment-17376443)

I'm suggesting this because it introduces a small number for changes to sass core, as well making an attempt to help move the community as a whole forward with education. It's not new for tools to return useful link and documentation as output. I also think the `""this could potentially result in duplicate output""` warning could be applicable in a number of other use cases in future releases.

Ideally I'd be great if the existing functionality could be extended so that the example demonstrated by @nex3 (https://github.com/nex3/sass/issues/905#issuecomment-23974599) was functional i.e. not needing to wrap placeholders in a mixin inorder to inject them into a context.
",xzyfer,jakob-e
905,2013-09-09 18:04:02,"@jakob-e I appreciate your work on this. I've had to do some similarly gnarly work arounds myself. Have you ever tried to explain this to new team members? The main point of this thread is that the simple (native) solution to this problem exists and is about to be removed.

@MrOrz I like your general concept. 

What I think could work:
- create some documentation educating developers on some common cases for unintentional output (Nicole Sullivan of OOCSS talks about some of these here https://www.youtube.com/watch?v=GhX8iPcDSsI)
- keep the existing behaviour shown by @MrOrz (for placeholders only IMHO)
- change the warning output from a deprecation warning to `""this could potentially result in duplicate output""` warning with a link to said documentation
- add a directive for suppressing warnings inline e.g. `@extend %placeholder !acknowledge` similar to what exists in [PHP](http://php.net/manual/en/language.operators.errorcontrol.php), [Ruby](http://api.rubyonrails.org/classes/Kernel.html#method-i-suppress), [JShint](https://github.com/jshint/jshint/issues/757#issuecomment-17376443)

I'm suggesting this because it introduces a small number for changes to sass core, as well making an attempt to help move the community as a whole forward with education. It's not new for tools to return useful link and documentation as output. I also think the `""this could potentially result in duplicate output""` warning could be applicable in a number of other use cases in future releases.

Ideally I'd be great if the existing functionality could be extended so that the example demonstrated by @nex3 (https://github.com/nex3/sass/issues/905#issuecomment-23974599) was functional i.e. not needing to wrap placeholders in a mixin inorder to inject them into a context.
",xzyfer,nex3
905,2013-10-21 06:22:35,"@chriseppstein do have an initial draft on this, or could you point me in the direction to investigate myself?

I could be mistaken but I've yet to see this addressed either in the spec outlined in #774 or the test cases added for the resulting `@at-root` pull requests.

> Specifically, this allows you to extend a selector via a mixin for all media contexts instead of just within the current media block.

I'm referring specifically to the use case of defining a `%placeholder` or `.normal-class` once without any `@media` directives and being able to **extend a [it] via a mixin for all media contexts instead of just within the current media block**
",xzyfer,chriseppstein
904,2013-08-29 03:23:18,"@benjaminboxler    random(1) should return always 0 so you could test that. Also, since its based on rand which is a pseudo random number generator you can seed it via a call to srand and then rand will produce the same ""random"" sequence each time - so you could verify using that -  although that really ties the testing to the implementation rather than just the functionality.  
",twalpole,benjaminboxler
901,2013-08-29 20:36:13,"I share @nex3's perspective here. Scripting happens before all the selectors exist and so a script check for this seems like an inversion of control. We will have other ways of managing the ability to use `@extend` in `@media` in 3.3. 
",chriseppstein,nex3
901,2013-09-05 18:23:22,"That's reasonable, no worries. My use was centered around `@media`, building a mixin wrapping mixin that says ""placeholder exists? extend placeholder. !placeholder exists? create new placeholder with mixin content"". @chriseppstein, can you point me to the 3.3 issue on extend/mqs?
",robwierzbowski,chriseppstein
901,2016-02-08 18:52:03,"Not all Sass concepts are created equally. Placeholders are a kind of selector -- they are not part of SassScript. If we add this, we would also be able to add `classname-exists()`, `id-exists()`, etc. 

@robwierzbowski @lukewatts The right way to do this is to track whether you have created the placeholder in question by storing that state a global variable.
",chriseppstein,robwierzbowski
901,2016-02-08 18:52:03,"Not all Sass concepts are created equally. Placeholders are a kind of selector -- they are not part of SassScript. If we add this, we would also be able to add `classname-exists()`, `id-exists()`, etc. 

@robwierzbowski @lukewatts The right way to do this is to track whether you have created the placeholder in question by storing that state a global variable.
",chriseppstein,lukewatts
901,2016-02-08 20:38:59,"@chriseppstein Hmmm. Not ideal but I do understand that placeholders are a different construct than functions and mixins, and it's probably not a priority. I often use mixins with extends and it just bugs me I can't existence check for them and offer a graceful alternative if they're not there. Thanks for clarifying though.
",lukewatts,chriseppstein
896,2013-08-29 18:15:36,"@lydell is correct; neither SCSS nor the indented syntax require an asterisk on each line of a comment.
",nex3,lydell
892,2013-08-23 23:47:16,"Yes, this is expected. See Chris's explanation in the issue @Snugug linked.
",nex3,Snugug
889,2014-10-10 14:20:38,"I don't think @samme or myself want this directive to solve for difficulty, but code readability. Sass wouldn't be the first to implement such a directive when `if not` already exists. Just my 2 cents.
",adamjgrant,samme
887,2013-08-15 22:47:44,"@alicexyl I think you're asking about how to not override a variable that is `null` with `!default`. In 3.3, this will be possible with `$foo: if(variable-exists(foo),$foo,some-new-default)`
",chriseppstein,alicexyl
887,2013-08-15 23:34:31,"@chriseppstein So `$foo: some-new-default !default;` would need to be replaced by `$foo: if(variable-exists(foo),$foo,some-new-default);` for users to be able to override the value with `null`? I'm wondering, why doesn't `!default` already have that behavior? Currently, `$foo: null;` is equivalent to not declaring it at all, which renders it useless, but it seems a legitimate use case to me to want to override the default value with `null` sometimes. 

Any 3rd party Sass framework that have a lot of variables with default values to allow customization would now have to change how they declare those variables in order to provide their end-users the most flexibility in customization. 
",alicexyl,chriseppstein
887,2013-11-19 00:17:07,"@chriseppstein the solution provided is really going to help, happy to have it. :)  But any chance we could have a similar but different keyword? like !defaulted or !existing or something? It's not a huge deal, but my users are mostly not sass people, so something like ""$foo: some-new-default !existing;"" would probably confuse them less....
",gabriellecrawford,chriseppstein
884,2013-08-08 13:44:27,"Thanks for the swift response, @chriseppstein. After further research it appears to be an [issue with the YUI compressor](https://github.com/yui/yuicompressor/issues/59). Sorry for posting a non-existent bug with Sass.
",dcalhoun,chriseppstein
877,2013-08-02 13:30:15,"@chriseppstein why doesn't the following generate all the possible selectors?



Generated:



Irony would have it in practice I actually would have liked `.T .T1 .a` in such a context. :)

The use case for the example is when specifying style modifiers/context; 99% of the time I would like it to just use the immediate selector and then place the result in the context of the other selectors.
",srcspider,chriseppstein
877,2013-08-04 18:19:54,"@srcspider :

I also don't think it makes sense how your initial example is compiled.

Still, I prefer to use plain placeholders that don't have any ancestor elements. I also prefer to nest descendant elements into ancestor elements rather than the other way around. That way, your code is more readable and don't have the problem you're describing. Consider the following code as alternative implementations of your use cases.

CASE 1 : 









CASE 2 :








",jslegers,srcspider
877,2013-08-04 18:36:34,"@srcspider :

Personally, I very much like using the following design pattern. It might be useful for your use cases as well.








",jslegers,srcspider
877,2013-08-05 06:33:42,"@jslegers thanks. In the first example though I don't think you need the extra `&`, tested it and the same output appears to be generated for both examples if the `&` is ommited.
",srcspider,jslegers
877,2013-08-05 13:00:47,"@srcspider :

The ampersand is optional when it comes first. I prefer to use it anyway for the sake of readability and consistency, but that's really just a matter of taste. 
",jslegers,srcspider
874,2013-08-01 19:02:51,"What @cimmanon says is true. However with custom fonts, it's possible to define a font family that is also a color name, which would reproduce this issue without that technicality.

We have, so far, refused to implement property-aware value parsing -- which is something that CSS does and lets them get away with this. We do this because it would mean that the value of a variable has different meanings in different property contexts, which is highly unusual from a programming perspective.

Note, that if you were not using an intervening variable, you would not have this issue, because Sass wouldn't parse the value as SassScript, it would just capture a string and pass it along.

So this is one of those cases, where you need to do things slightly differently than you might expect by knowing CSS so that lots of other expectations regarding software behavior are met.
",chriseppstein,cimmanon
871,2013-08-05 01:35:17,"The part I'm not a fan of is how much additional code this adds from a reuse standpoint.  Using global variables is worse when it comes to authoring the mixins, but more convenient for using them.  Shorter is better.  If it must be a keyword, `@receive` or `@args` is better than `@receive-content` or `@content-arguments`, even though they may be better descriptors.

Borrowing a bit from Haskell here:



Using a Ruby style syntax as @hcatlin suggests would also be acceptable.
",cimmanon,hcatlin
871,2013-08-09 20:20:52,"I'm more of a fan of @cimmanon's example than any of the others I've seen. Placing the arguments before the `{` puts them firmly in the context of `@include`, both from the parser's standpoint and the reader's standpoint.

I'm not a big fan of `->`. Sass tends to use words over symbols where possible, so something like `@include foo(red, blue) with ($c, $d, $e)` or `taking ($c, $d, $e)` might be better.
",nex3,cimmanon
871,2013-08-09 21:00:51,"I actually really like the `with` or `taking` syntax and I'm sad I didn't think of it first ;)

Leaning towards taking. I also like `receiving`, but as @hcatlin points out people always misspell that. However, we could also support `recieving` and print out a message mocking their inability to spell.
",chriseppstein,hcatlin
871,2013-09-17 05:58:41,"@chriseppstein passing arguments to `@content` would be incredibly useful. Can we prioritize this issue?
",elisechant,chriseppstein
871,2013-09-17 06:01:00,"Yes please! I came across this issue recently and would love this to help
tidy up some loops I've had to duplicate.

On Tuesday, September 17, 2013, Elise Chant wrote:

> @chriseppstein https://github.com/chriseppstein passing arguments to
> @content would be incredibly useful. Can we prioritize this issue?
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-24565751
> .
",cjcheshire,chriseppstein
871,2013-09-18 00:07:44,"@cjcheshire agree. As our applications become more modular and extensible this is becoming more and more important.
Bourbon's Neat uses some interesting logic on topic (that doesn't work) at `/neat/grid/_media.scss`


",elisechant,cjcheshire
871,2014-03-21 14:14:29,"@apfelbox No! Don't say it's like PHP, it'll never get implemented! ;-)
Kidding, of course; kinda. I like the `using` syntax too. It's trivial, but I favor it as part of the ""call"" than of the content body:



Instead of:


",northborndesign,apfelbox
871,2014-03-22 15:23:36,"@jackmahoney Precisely. Very much looking forward to this feature. It's definitely going to bring about a whole new set of reusability patterns.
",northborndesign,jackmahoney
871,2014-11-28 10:29:57,"Hi @chriseppstein and co.
Has this (or similar) recently been implemented?
I have a mixin and include which previously worked using the old method of declaring an empty global variable, changing it with a mixin, then it being available in the include statement via @content

But now (in 3.4.9, ruby, windows command line, also latest version of prepros) the include statement is receiving an empty instance.

A copy of prepros using sass 3.3.8 seems to allow the variable to pass as expected
",davebeesley,chriseppstein
871,2014-11-29 09:46:56,"@davebeesley, try the `!global` flag.
",lolmaus,davebeesley
871,2014-12-03 09:15:31,"Hey @lolmaus I'm not intentionally ignoring you. I'm not currently on that project at the moment (and have worked around it by compiling with an older version of prepros). I shall give when I next have a quiet moment.
",davebeesley,lolmaus
871,2015-06-29 23:26:27,"Damn. I really wanted to use this today. The design in the last comment of @adjavaherian is something that looks super understandable. I'd move to see this added.
",ocbaker,adjavaherian
871,2015-07-10 18:22:14,"This is a high-priority feature, but Sass is currently on feature-freeze to give LibSass time to catch up.

@rafegoldberg since this involves new syntax, it's going to be a change that requires modifying every layer of the implementation. You'd need to change both [the SCSS parser](https://github.com/sass/sass/blob/stable/lib/sass/scss/parser.rb) and [the indented syntax parser](https://github.com/sass/sass/blob/stable/lib/sass/engine.rb), [the AST](https://github.com/sass/sass/tree/stable/lib/sass/tree), [the runtime](https://github.com/sass/sass/blob/stable/lib/sass/tree/visitors/perform.rb), and [the convesion code](https://github.com/sass/sass/blob/stable/lib/sass/tree/visitors/convert.rb), as well as [adding tests](https://github.com/sass/sass/tree/stable/test/sass) to make sure all of that works properly.
",nex3,rafegoldberg
871,2015-08-02 15:25:58,"@nex3 Where can I see libsass status?
",stereokai,nex3
871,2015-08-14 20:49:38,"@stereokai ask @xzyfer.
",nex3,stereokai
871,2015-08-18 02:10:12,"@stereokai there's no official status page. 

https://sass-compatibility.github.io/ gives a high level run down of what features are supported.
http://sassmeister.com/ is a good playground for checking if a feature or syntax is supported.

You can also check out our [known bugs list](https://github.com/sass/libsass/issues?q=is%3Aopen+is%3Aissue+label%3A%22Bug+-+Confirmed%22).
",xzyfer,stereokai
871,2015-11-20 14:31:05,"@xzyfer a 2-months late thank you. Missed your comment. Looks like you guys definitely have a lot on your hands, but I'm glad it's finally officially acknowledged and part of milestone 4.
",stereokai,xzyfer
871,2016-02-26 11:54:22,"Just for the information, Jinja has quite similar solution with macros: http://jinja.pocoo.org/docs/dev/templates/#call

Transfering it into Sass would look like this:



Or for mentioned by @chriseppstein example at the beginning:



Very simple and clean. And fully backward compatible.
",ArmorDarks,chriseppstein
871,2016-04-08 11:33:07,"@hairarrow it seems to be fragile, since variable names can easily collide with already existing mixin arguments.
",ArmorDarks,hairarrow
870,2014-01-22 10:14:02,"Hey, @robwierzbowski, @nex3,

We're hitting this same issue where we're **wrapping some third party libraries** inside a class. This is producing some invalid CSS for us.

Bubbling the @-rules would prevent generating invalid CSS in such a case.

What do you think?

Thanks!
",jbalsas,robwierzbowski
870,2014-01-22 10:14:02,"Hey, @robwierzbowski, @nex3,

We're hitting this same issue where we're **wrapping some third party libraries** inside a class. This is producing some invalid CSS for us.

Bubbling the @-rules would prevent generating invalid CSS in such a case.

What do you think?

Thanks!
",jbalsas,nex3
870,2014-01-22 17:45:29,"@jbalsas That's a tough case, because it's not clear what the correct behavior is there. When you're wrapping an import in a class, it's clear that you want some sort of namespacing on the selectors etc that you're importing, but there's no good way to namespace `@keyframes` rules there. Putting them into the global namespace seems risky. It's not necessarily wrong, though, so I'll reopen this and mark it as ""under consideration"".

To be clear, if we support this, there would be no automatic prefix attached to bubbled keyframes directives.
",nex3,jbalsas
870,2014-01-22 18:31:46,"@nex3 That would solve our (@jbalsas and I) use case, since I agree, there's no valid way to namespace `@keyframes` (but there's no valid way to namespace any at-rule, just any selectors inside of them).

IMHO, bubbling them out makes the most sense for no other reason than preserving the validity (and preventing a case where, while vendors are working with them being nested now, it possibly breaking in the future).

Thanks for reconsidering this :)
",natecavanaugh,nex3
870,2014-01-22 18:31:46,"@nex3 That would solve our (@jbalsas and I) use case, since I agree, there's no valid way to namespace `@keyframes` (but there's no valid way to namespace any at-rule, just any selectors inside of them).

IMHO, bubbling them out makes the most sense for no other reason than preserving the validity (and preventing a case where, while vendors are working with them being nested now, it possibly breaking in the future).

Thanks for reconsidering this :)
",natecavanaugh,jbalsas
870,2014-01-24 09:47:34,"@nex3 Thanks a lot for considering this!

I'd like to add, that making sure we generate valid CSS will also improve interoperability between other tools. For instance, right now, we're having issues with a library that uses `css-parse` to go through our generated styles and fails because it can't parse them properly.
",jbalsas,nex3
869,2013-07-30 12:13:28,"@Snugug I can see how #139 _might_ fix it, but I don't see how the semantics of %selector in the context of an import are completely equivalent to an @import that doesn't run twice in all contexts, so I think this should stay open until #139 is comes to a conclusion/implementation.

For what it's worth even a `@depends` directive is implemented, why should the behavior I describe not work in the context of an `@import` when %select is meant to be a virtual selector; meaning it makes no sense for the same color definition in one instance to be considered different than the same color definition in another instance that was loaded in.

ie. even if I have TWO files with TWO `%something` if both have `color: red` there should be only one shared `color: red`.
",srcspider,Snugug
869,2013-08-02 22:54:36,"As @Snugug has mentioned, this is the expected behavior. If you import the file that defines `%placeholder` twice, then it will be defined twice and extended twice. In the future we'll move to an import system that will import a file only once by default.
",nex3,Snugug
865,2013-07-28 19:46:41,"@Snugug - that is a larger conversation to have. At the moment, Sass-meister is a completely independent project from Sass, and its long term management, direction, and financial management of its donation system haven't been discussed directly. 

As it stands today, officially pointing to Sassmeister is a bit like http://git-scm.com/ pointing to github.com. It's not impossible, but the official git project would want to have to talk a bit before that happened.

I _really want to_ have those discussions, but I believe that for today, linking to the more official 'drop-in replacement' of '/try.html' is the simplest first step to figuring out how an official ""Try Sass"" feature might work into the seemingly more startupy / codepen.io-style roadmap of Sassmeister. 

Also, note that the Sass site doesn't link to Compass either... only in Chris' bio. 
",hcatlin,Snugug
861,2013-07-30 12:52:49,"@Undeterminant If `.parent{}` has content later on in your Sass cascade (NOT if something's added through JavaScript, for instance), it'll extend the later one just fine.
",Snugug,Undeterminant
857,2013-07-22 16:22:47,"@jslegers Metaprogramming is one way to accomplish what you're thinking, but there are others. We are already adding a bunch of meta programming abilities from the calling side, but the definition side seems less useful from all the use cases I've seen so far. I'd rather approach this problem from use cases and end-user APIs and capabilities. I'd like to understand why defining a mixin dynamically provides some ability that defining it statically does not and then I'd need to weigh that complexity against the understandability and learnability for new users. For instance, dynamic definitions will almost certainly require the introduction of closures and possibly anonymous functions and mixins. I think these are very advanced concepts that make the language harder to comprehend.
",chriseppstein,jslegers
857,2013-07-22 17:09:34,"@Snugug Ya, I feel like I'm talking to a wall too, so I'm going to stop for now. I have more productive things to do.
",chriseppstein,Snugug
857,2013-07-22 19:23:13,"@Snugug  @chriseppstein 

Nevermind. I must have made a mistake experimenting with it the first time and wrongly interpreted issue https://github.com/nex3/sass/issues/336. I apologise for wasting your time with that.

I guess I don't see any blocking issues with Sass at the moment, although issue https://github.com/nex3/sass/issues/324 still makes me cringe...
",jslegers,Snugug
857,2013-07-22 19:23:13,"@Snugug  @chriseppstein 

Nevermind. I must have made a mistake experimenting with it the first time and wrongly interpreted issue https://github.com/nex3/sass/issues/336. I apologise for wasting your time with that.

I guess I don't see any blocking issues with Sass at the moment, although issue https://github.com/nex3/sass/issues/324 still makes me cringe...
",jslegers,chriseppstein
857,2014-03-30 00:17:01,"@Snugug & @chriseppstein :

Even though I've been able to improve my syntax significantly due to various improvements in Sass 3.3, the lack of dynamic mixins remains a problem for my implementations. No matter how much I improve the architecture of the meta-framework I'm building, I keep stumbling on the lack of dynamic mixins as a blocking issue.

Just today, I found two use cases for interpolated mixins that I struggle to implement without interpolated mixins. 

This is the first one :

## Input:



---

## Output:



---

This is the second one :

## Input:



---

## Output:



See also https://github.com/nex3/sass/issues/626 .
",jslegers,Snugug
857,2014-03-30 00:17:01,"@Snugug & @chriseppstein :

Even though I've been able to improve my syntax significantly due to various improvements in Sass 3.3, the lack of dynamic mixins remains a problem for my implementations. No matter how much I improve the architecture of the meta-framework I'm building, I keep stumbling on the lack of dynamic mixins as a blocking issue.

Just today, I found two use cases for interpolated mixins that I struggle to implement without interpolated mixins. 

This is the first one :

## Input:



---

## Output:



---

This is the second one :

## Input:



---

## Output:



See also https://github.com/nex3/sass/issues/626 .
",jslegers,chriseppstein
857,2014-11-21 03:58:16,"I think I ran into this as well. I'm customizing the Bootstrap grid mixins, and wanted to print out the classes for prototyping:



Saw @jslegers prompt [here](http://stackoverflow.com/questions/15748937/how-to-define-a-dynamic-mixin-name-in-sass). Hopefully that's helpful!
",laras126,jslegers
855,2013-07-19 21:45:51,"@nex3 I've seen cases where the charset was stripped if the file had no non-ascii characters, even if it was specified explicitly. I think may be ruby version dependent. 
",chriseppstein,nex3
855,2013-07-19 22:17:12,"@nex3 That might be tough to provide, as the issue is most apparent in our main.scss file with over 30 imports. I'll take some time this weekend and try to localize the issue to a certain file, or a certain combination of files.
",danapplegate,nex3
855,2013-08-06 00:32:11,"@chriseppstein I definitely have a reproducible case of this. Sass seems to remove an explicitly specified `@charset` if it doesn't think it's required, which I don't think is intended. (It's certainly annoying.)



Happy to provide environment details. Ruby is 'ruby 1.9.3p429 (2013-05-15) [x86_64-linux] Brightbox' from the Brightbox PPA on Ubuntu 12.04. On this machine:



Noticed this when our asset pipeline starting coming up with different fingerprints from 1.9 and 1.8 rubies. Here's the expected output, when run with 1.8:


",dominics,chriseppstein
855,2013-08-06 02:33:26,"@nex3 See reproduction case above?
",dominics,nex3
854,2014-02-18 00:15:11,"@nex3 I hope I've addressed all of your feedback with these recent commits. Please let me know if there are any other improvements to be made. 
",eriwen,nex3
852,2014-10-08 06:48:46,"@HugoGiraudel, @jakob-e: This is awesome! I'm trying to write my own `map-merge-recursive`, any idea how to achieve that? If I will succeed, I will post my solution here.
",cibulka,HugoGiraudel
852,2014-10-08 06:48:46,"@HugoGiraudel, @jakob-e: This is awesome! I'm trying to write my own `map-merge-recursive`, any idea how to achieve that? If I will succeed, I will post my solution here.
",cibulka,jakob-e
851,2015-04-21 13:14:21,"@HugoGiraudel :+1: We really need the compass functionality built in at the sass level. LibSass won't add this functionality until its standard in sass. We need better consistency across the projects in that respect. @nex3 what are the updates on the module system?
",Nevraeka,HugoGiraudel
851,2015-04-21 13:14:21,"@HugoGiraudel :+1: We really need the compass functionality built in at the sass level. LibSass won't add this functionality until its standard in sass. We need better consistency across the projects in that respect. @nex3 what are the updates on the module system?
",Nevraeka,nex3
851,2016-02-08 15:36:03,"@nex3 According to http://sass-compatibility.github.io/ libsass 3.3 has reached full feature parity. What compatibility issues that block this issue are still left?
",mootari,nex3
847,2013-09-16 02:43:11,"@Undeterminant It looks like the font list compression is already present in master. If I've misunderstood, please add another example and I'll take a look.
",fblee,Undeterminant
840,2013-07-08 17:43:03,"@lukaszgrolik, what issues were you experiencing because of identical color name replacement?
",robwierzbowski,lukaszgrolik
840,2013-07-08 19:41:38,"@robwierzbowski, no serious problems, but let's assume we have tags with ids `item-blue`, `item-aqua` and `item-green` that we want to style by the `@each` depending on their names:



There will be backgrounds for `#item-blue`, `#item-cyan` and `#item-green`, but not for the `#item-aqua`. These color name replacement exceptions must be remembered and styled separately.
",lukaszgrolik,robwierzbowski
838,2014-02-05 20:11:45,"@nex3 confused where I should put the ruby code example to make sourcemap URLs absolute. Is there some in config.ru where I should put it?
",chanpory,nex3
838,2014-02-05 20:42:56,"@chanpory that snippet is intended to run as a standalone script (with some variables set beforehand). If you want to integrate it with an existing build process, the details of that will depend on how the build process works.
",nex3,chanpory
837,2013-07-15 16:14:49,"@HugoGiraudel To expand on @chriseppstein's explanation, the parenthesis don't actually make the list, but like in math they give grouping or precedence. So in `a b, c (1 2) d, e f` Sass says ""`1 2` is a group, do that first. What do I do with it? The space makes it a list"".
",robwierzbowski,HugoGiraudel
837,2013-07-15 16:14:49,"@HugoGiraudel To expand on @chriseppstein's explanation, the parenthesis don't actually make the list, but like in math they give grouping or precedence. So in `a b, c (1 2) d, e f` Sass says ""`1 2` is a group, do that first. What do I do with it? The space makes it a list"".
",robwierzbowski,chriseppstein
837,2013-08-15 07:24:41,"@HugoGiraudel 's recently blogged `slice()` function can also be used, to create a function that can define a single-item list containing an arbitrary list of items (variable checks removed) [EDIT: this is essentially the same approach as @jakob-e proposed in the 3rd comment; to wrap up a list of items as a single-item list you have to do it with a function]:




",lunelson,HugoGiraudel
837,2013-08-15 07:24:41,"@HugoGiraudel 's recently blogged `slice()` function can also be used, to create a function that can define a single-item list containing an arbitrary list of items (variable checks removed) [EDIT: this is essentially the same approach as @jakob-e proposed in the 3rd comment; to wrap up a list of items as a single-item list you have to do it with a function]:




",lunelson,jakob-e
837,2013-08-15 07:40:03,"`append()` is obviously neater for this as @jakob-e pointed out; results same as above. 


",lunelson,jakob-e
834,2013-09-30 23:04:25,"@nex3 do you :+1: now?
",chriseppstein,nex3
832,2013-07-19 20:49:24,"> @chriseppstein wrote:
> So we'd need to make a DeprecatedFalse class or something to that effect?

If we wanted to do the deprecation thing, yes.

> I think we should also return `null` instead of `0` for `str-index()`.

Agreed.

> @HugoGiraudel wrote:
> Why not returning `false`? It makes sense.

Because `null` is the standard value for indicating a lack of a result.
",nex3,HugoGiraudel
832,2013-07-19 20:49:24,"> @chriseppstein wrote:
> So we'd need to make a DeprecatedFalse class or something to that effect?

If we wanted to do the deprecation thing, yes.

> I think we should also return `null` instead of `0` for `str-index()`.

Agreed.

> @HugoGiraudel wrote:
> Why not returning `false`? It makes sense.

Because `null` is the standard value for indicating a lack of a result.
",nex3,chriseppstein
832,2013-12-04 22:50:22,"@chriseppstein I agree with returning `null` too -- I was just toying around with `str-index()` for the first time today, expecting it to work like `index()`, and discovered this myself. (By the way, thank you for having made `index()` return a falsy value rather than `-1` like JavaScript does.)
",pdaoust,chriseppstein
832,2013-12-09 23:57:45,"@nex3 I was referring to the return value of `index()` rather than `str-index()`.
",pdaoust,nex3
828,2013-09-12 20:40:25,"@zaius that's plausibly caused by stuff this change addresses. Try merging it and let us know if that helps.
",nex3,zaius
821,2013-08-27 18:00:58,"Holy crap, +1 to @jslegers question!
",r4j4h,jslegers
821,2013-09-27 23:16:25,"There's one test failing. Landing #934 will allow me to fix. @nex3 if you have alternate suggestions for how to fix that test, please suggest.
",chriseppstein,nex3
821,2013-10-02 22:58:44,"@nex3 moar review please.
",chriseppstein,nex3
818,2013-11-07 22:11:56,"@chriseppstein what kind of indication would be good for you to enable it, i would find this an immensely useful feature seeing the impending death of ie8.
",mcgoooo,chriseppstein
818,2013-11-07 22:17:59,"@mcgoooo Why do you think there is some magical impending death of IE8 on the horizon?  Windows XP is still the 2nd most popular OS right now and it cannot upgrade beyond IE8.  IE8 is also more popular than any other IE version at the moment.

Even if IE8 wasn't a concern, Android still is (no version of Android supports calc).
",cimmanon,mcgoooo
818,2013-11-07 22:50:34,"@cimmanon  is absolutely right that `calc()` can't be used in projects that require maximum browser coverage. I'm not using it for this reason in any of my projects.

But this is not the case for everybody. I'm digging into Derby.js, a modern full stack framework based on Node. It doesn't support IE8 at all and is perfect for building rich internet applications that aren't supposed to be used on mobile.

In this case, i would totally use `calc()`, so i'm looking forward to @chriseppstein and other Compass maintainers to implement its proper support.
",lolmaus,chriseppstein
818,2013-11-07 22:50:34,"@cimmanon  is absolutely right that `calc()` can't be used in projects that require maximum browser coverage. I'm not using it for this reason in any of my projects.

But this is not the case for everybody. I'm digging into Derby.js, a modern full stack framework based on Node. It doesn't support IE8 at all and is perfect for building rich internet applications that aren't supposed to be used on mobile.

In this case, i would totally use `calc()`, so i'm looking forward to @chriseppstein and other Compass maintainers to implement its proper support.
",lolmaus,cimmanon
818,2013-11-07 22:52:35,"@lolmaus i think you said it better than me :+1: 
",mcgoooo,lolmaus
818,2014-03-25 15:19:15,"Super glad I found this issue!

The [interpolate tip](https://github.com/nex3/sass/issues/818#issuecomment-19935841) @Snugug pointed out works like a champ, but I would love to see this handled automatically at some point. 

For now, the work around will suffice.
",manovotny,Snugug
818,2015-09-09 21:13:23,"@cimmanon i beleive ie8 is dead now, as is ie9 just about. Is there any way you could point me in the direction to fix this myself and put a patch in?
",mcgoooo,cimmanon
818,2015-09-09 21:50:00,"Ok, here's my proposal for calc integration.

calc() expressions should be parsed into SassScript AST expressions. The parsing should use the calc grammar with the exception that it will allow Sass variable references in place of a value. I think this is the most natural expectation from the author's perspective.

Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a `calc()` expression.

Any `calc()` expression that can be resolved statically will evaluate to static value in the output instead of outputting as a `calc()` expression.

We need to decide how intermediate expressions will work.

For example:



This could be an error at line 2 (because `3px + 2rem` immediately resolves to a calc string) or it could output a value for derived-expression as `calc( ( 3px + 2rem ) / 2 )`. I lean towards the latter, even though it is harder to implement. Expressions would resolve their variable references into values, but otherwise unresolvable expressions would stay as expression references instead of values until output so that they can be composed with other expressions.

If we want SassScript expressions to be mixable in the same line of code with Calc expressions, I think we'd need a better parsing hint than interpolation (which always results in a string). Probably `sass-script(...expression...)`. E.g. `calc(1px + 2em + sass-script($foo % 3))` Personally, I think this is unnecessary at this time.

If we do this right, basically the calc() expression syntax is an implementation detail and not something that our users will need to use directly unless they want to.

@nex3, @xzyfer, @mgreter thoughts?
",chriseppstein,nex3
818,2015-09-09 22:02:27,"@chriseppstein would this proposal also support similar operations on calc expressions themselves?

E.g. `calc(3px + 4rem) + 1rem - calc(2px + 5%) == calc(1px + 5rem - 5%)`, treating `calc()` as if they were parentheses.
",davidkpiano,chriseppstein
818,2015-09-09 22:08:08,"@davidkpiano Yes. though the output would probably be the following:

`calc(3px + 4rem + 1rem - ( 2px + 5% ) )`

We can write an expression simplifier as a follow-on feature at some point if it's a big deal.
",chriseppstein,davidkpiano
818,2015-09-09 22:16:45,"@chriseppstein :+1: 
thanks, even a simple version of this would save me so many headaches.
",mcgoooo,chriseppstein
818,2015-09-11 21:06:35,"@chriseppstein 

> Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a `calc()` expression.

This has potentially serious browser support implications. Based on [caniuse](http://caniuse.com/#search=calc), there are about 10% of browsers in use today that don't fully support `calc()`, and for users targeting those browsers automatic `calc()` generation is a ticking time bomb‚Äîit'll look like it works when they test on their main browser, but will fail in potentially-confusing ways on more obscure platforms.

This is something I think we should consider someday, but I don't think it's time for it yet.

The rest of your proposal sounds solid to me. I'm even okay with _explicitly declared_ `calc()` values supporting arithmetic with normal numbers. This makes `calc()` a clear signal that something not-fully-compile-time is going on without having to write it over and over again.
",nex3,chriseppstein
818,2015-09-13 12:31:22,"@nex3 i fully disagree with this, for websites such as the one i run (https://boomf.com) the support on desktop browsers is at 99%ish of our desktop browsers, and there is different concerns on mobile. 

to put it in context, we have made a business choice to not support below ie9, which supports calc with one minor bug (doesn't work in background position values)

We have been using this on production for close to a year with absolutely no problems, as it solves a lot of problems, and pushes the web forward. We give less than perfect to the 0.5% that is still usable.

I also disagree fundamentally with the aspect of not including something in case a professional in the field does not know how to use something in a reasonable and good manor, our job is to work around browser problems. you don't stop people using the feature by not including it, you just make it more difficult (and liable to bugs) The type of people that are going to be using experimental features, are likely to understand how to use these things correctly.

The only outlier is android, of which  and with general responsive layouts these days, it is more needed in the field of desktop, which is at full support level pretty much. there is one minor bug in ie9 that does not really affect general usage.

## ![screen shot 2015-09-13 at 13 18 07](https://cloud.githubusercontent.com/assets/248888/9836673/07e95c20-5a1a-11e5-9c18-d359cf71b777.png)

one month of browser usage
![screen shot 2015-09-13 at 13 25 03](https://cloud.githubusercontent.com/assets/248888/9836697/ee50ed9a-5a1a-11e5-8b06-b4c7bd58d5db.png)

and internet explorer usage
![screen shot 2015-09-13 at 13 25 11](https://cloud.githubusercontent.com/assets/248888/9836698/f6c5c310-5a1a-11e5-99c4-88f6b5536977.png)
",mcgoooo,nex3
818,2015-09-13 18:02:28,"@cimmanon that makes sense, it is definitely a tough and tricky problem and may cause some problems.  
it would be nice to have it in sass, but if's not really possible/desirable, that is understandable, you have much better knowledge of how this would trip up users.

i may of jumped the gun a couple of years ago when i was bringing it up, but as a css feature it is mature enough to be used in production. with the cycle of android and lollipop replacing out the native browser with chrome, i can imagine it will be garnering wider attention in the next year or so. it can create some really amazing layouts.
",mcgoooo,cimmanon
818,2015-09-14 04:00:21,"@nex3 10% is low enough for some users. I'd like to build this and keep it behind a feature flag that can be enabled at compile time. When the percentage is low enough we can change the default.

> On Sep 11, 2015, at 2:06 PM, Natalie Weizenbaum wrote:
> 
> @chriseppstein
> Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a calc() expression.
> 
> This has potentially serious browser support implications. Based on caniuse, there are about 10% of browsers in use today that don't fully support calc(), and for users targeting those browsers automatic calc() generation is a ticking time bomb‚Äîit'll look like it works when they test on their main browser, but will fail in potentially-confusing ways on more obscure platforms.
",chriseppstein,nex3
818,2015-09-14 04:00:21,"@nex3 10% is low enough for some users. I'd like to build this and keep it behind a feature flag that can be enabled at compile time. When the percentage is low enough we can change the default.

> On Sep 11, 2015, at 2:06 PM, Natalie Weizenbaum wrote:
> 
> @chriseppstein
> Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a calc() expression.
> 
> This has potentially serious browser support implications. Based on caniuse, there are about 10% of browsers in use today that don't fully support calc(), and for users targeting those browsers automatic calc() generation is a ticking time bomb‚Äîit'll look like it works when they test on their main browser, but will fail in potentially-confusing ways on more obscure platforms.
",chriseppstein,chriseppstein
818,2015-09-14 08:20:36,"Apologies for my naivety. Is the issue with calc() purely that it allows
arithmetic on units that Sass considers erroneous, or is there more to it?
On 14 Sep 2015 14:00, ""Chris Eppstein"" notifications@github.com wrote:

> @nex3 10% is low enough for some users. I'd like to build this and keep it
> behind a feature flag that can be enabled at compile time. When the
> percentage is low enough we can change the default.
> 
> > On Sep 11, 2015, at 2:06 PM, Natalie Weizenbaum wrote:
> > 
> > @chriseppstein
> > Any SassScript expression that cannot be computed because the units are
> > incompatible will no longer result in an error, instead that expression
> > will output as a calc() expression.
> > 
> > This has potentially serious browser support implications. Based on
> > caniuse, there are about 10% of browsers in use today that don't fully
> > support calc(), and for users targeting those browsers automatic calc()
> > generation is a ticking time bomb‚Äîit'll look like it works when they test
> > on their main browser, but will fail in potentially-confusing ways on more
> > obscure platforms.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/818#issuecomment-139957146.
",xzyfer,nex3
818,2015-09-14 08:20:36,"Apologies for my naivety. Is the issue with calc() purely that it allows
arithmetic on units that Sass considers erroneous, or is there more to it?
On 14 Sep 2015 14:00, ""Chris Eppstein"" notifications@github.com wrote:

> @nex3 10% is low enough for some users. I'd like to build this and keep it
> behind a feature flag that can be enabled at compile time. When the
> percentage is low enough we can change the default.
> 
> > On Sep 11, 2015, at 2:06 PM, Natalie Weizenbaum wrote:
> > 
> > @chriseppstein
> > Any SassScript expression that cannot be computed because the units are
> > incompatible will no longer result in an error, instead that expression
> > will output as a calc() expression.
> > 
> > This has potentially serious browser support implications. Based on
> > caniuse, there are about 10% of browsers in use today that don't fully
> > support calc(), and for users targeting those browsers automatic calc()
> > generation is a ticking time bomb‚Äîit'll look like it works when they test
> > on their main browser, but will fail in potentially-confusing ways on more
> > obscure platforms.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/818#issuecomment-139957146.
",xzyfer,chriseppstein
818,2015-09-14 22:30:44,"> Is the issue with calc() purely that it allows arithmetic on units that Sass considers erroneous, or is there more to it?

@xzyfer There's lots of issues with calc.
- Presently we treat calc values as essentially strings right now, so when you change a variable from `2em` to `calc(2em - 2px)` which is still conceptually a numeric value but it can't be used in any further mathematical calculations because it became a string.
- We can optimize calc values that can be fully resolved at compile time but we don't.
- We can change an error into a success (as you mentioned)
- Calc Expressions and SassScript Expressions are two ways of writing numeric expressions, but once parsed to an expression (AST), they are like scss vs sass syntaxes there's no reason they can't interoperate. 
",chriseppstein,xzyfer
818,2015-09-14 22:43:26,"> I am very uncomfortable with Sass silently converting expressions using incompatible units to calc. We already have a lot of confused users who don't understand that #{10}px is a string and that you can't do anything with it other than print it as is. You can't do greater/less than comparisons on it, you can't send it through the unitless function and get anything other than true. Having Sass do this without any explicit say-so is going to add to the confusion (why does Sass think this is a string? I am using numbers in my expression!).

@cimmanon I think there's some miscommunication here. My proposal is not that calc would evaluate immediately to a string, but instead to some intermediate ""expression"" representation that is not a simple value yet. A lot can be done to that expression that can't be done to a string.

>  You can't do greater/less than comparisons on it

This is true, trying to do a comparison would raise an error because there's not a calc-compatible if statement (yet).

>  you can't send it through the unitless function and get anything other than true

Not so, I can determine that there is no unit on the value `calc(10 - 2)` and that the unit of `calc(2em - 2px)` is `em` without actually performing the math on it.

> why does Sass think this is a string? 

Sass wouldn't think it's a string. It would give better error messages with my proposal than the current system. E.g. `calc(2em + 3px) % 1em` would return the error like ""Error: cannot take the modulus of runtime expressions."" (because calc doesn't have a modulo operator).
",chriseppstein,cimmanon
818,2015-09-15 00:51:36,"I think @cimmanon's point about strings is a more general one: that users don't have a strong sense of the non-visible semantics of SassScript values. `#{12}px` is one example of that, but silently generating `calc()` tickles it in different ways. Users doing what looks like a normal numeric operation with two numbers get back an object that doesn't behave like a number in a lot of situations.

And the visibility of automatic calc-conversion would be _very_ low. Not only is it happening at runtime on stylesheets with no `calc()` in the source, it's triggered based on units, which users already have a hard time tracking and understanding. It's just a recipe for non-local errors that users can't understand or stylesheets with `calc()`s in their `@media` queries failing to style things properly in production.

I don't think it's onerous to require the user to explicitly write `calc()` in places where they want calc-y unit behavior. It follows the general Sass philosophy of making preprocessing visible, and if we make the `calc()`iness of a value contagious it'll be possible to use them pervasively without needing to annotate every operation.
",nex3,cimmanon
818,2015-10-02 22:31:59,"@chriseppstein Exactly :smiley:.
",nex3,chriseppstein
818,2015-10-05 08:46:27,"I like how this has ended up. I think @nex3 and @cimmanon are on to something good here.
",xzyfer,nex3
818,2015-10-05 08:46:27,"I like how this has ended up. I think @nex3 and @cimmanon are on to something good here.
",xzyfer,cimmanon
818,2015-10-05 09:26:15,"Me too +1

On Monday, October 5, 2015, Michael Mifsud notifications@github.com wrote:

> I like how this has ended up. I think @nex3 https://github.com/nex3 and
> @cimmanon https://github.com/cimmanon are on to something good here.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/818#issuecomment-145465393.
",mcgoooo,nex3
818,2015-10-05 09:26:15,"Me too +1

On Monday, October 5, 2015, Michael Mifsud notifications@github.com wrote:

> I like how this has ended up. I think @nex3 https://github.com/nex3 and
> @cimmanon https://github.com/cimmanon are on to something good here.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/818#issuecomment-145465393.
",mcgoooo,cimmanon
818,2015-10-19 16:56:57,"@shmdhussain Don't worry, that's not a Sass problem. You just need to add a space before and after the minus operator: `calc(-#{$large-up-font-size} - 18px);`
",davidkpiano,shmdhussain
818,2016-04-19 13:23:24,"@jrauh Using `calc()` isn't _supposed_ to evaluate the expression.  I cannot reproduce what you're claiming.  When I compile it, I get the expected output of this:


",cimmanon,jrauh
818,2016-04-19 17:14:11,"@jrauh Sass does not evaluate `calc` expressions. Are you running your compiled CSS through any other compressors or processors?
",chriseppstein,jrauh
818,2016-04-19 17:29:55,"@chriseppstein Yepp I just figured it out. I'm using `grunt` and I needed to updated a version number. That was a big headache for such a small fix... üòê  Thanks for your help, all.
",jrauh,chriseppstein
818,2016-12-14 21:11:57,@speedplane What version of Sass are you using? I can't reproduce that on the latest stable.,nex3,speedplane
818,2017-01-11 13:28:22,"@speedplane came here for the same reason, then found out a small mistake: forgot to close a double parenthesis, maybe the same applies to you.

This line:

`transform: translateX(calc(($edge-threshold/2)*-1 - #{$size}) translateY($vertical-space);`
Results in SASS complaining with this error:


Slightly bit confusing, as probably it should point the mistake like this:

",luigimannoni,speedplane
818,2017-01-13 22:45:48,@trusktr That example works for me. What version of Sass are you using?,nex3,trusktr
818,2017-01-14 00:08:50,@nex3 I think it's 1.0.1. Maybe that's why. x],trusktr,nex3
817,2013-06-25 12:49:16,"Thanks so much @cimmanon , this helped me underway. I haven't nailed the issue but I do have a deeper understanding of the Compass/Sass color functions now ;)
",Wolfr,cimmanon
816,2013-07-01 19:04:16,"I agree with @graysonwright. Sass makes it easy to divide your styles into multiple files. What's more, this sort of sectioning can easily be accomplished with comments.
",nex3,graysonwright
811,2014-01-10 20:16:06,"@polikin It looks like maybe you don't have Sass installed. I'm not sure how that would have happened, but try running `gem install sass` and see if that works.

For future reference, [the mailing list](https://groups.google.com/forum/#!forum/sass-lang) is a better place to ask support questions.
",nex3,polikin
811,2014-01-10 20:18:45,"I have Sass 3.2.13 (Media Mark). When I try with 3.3 .. I see those 
errors when I try to compile.

## 

On 2014-01-10 15:16, Nathan Weizenbaum wrote:

> @polikin https://github.com/polikin It looks like maybe you don't 
> have Sass installed. I'm not sure how that would have happened, but 
> try running |gem install sass| and see if that works.
> 
> For future reference, the mailing list 
> https://groups.google.com/forum/#%21forum/sass-lang is a better 
> place to ask support questions.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub 
> https://github.com/nex3/sass/issues/811#issuecomment-32061692.
",polikin,polikin
809,2013-06-21 06:44:29,"As a matter of fact, I know and use `--check` (in several of my Makefiles). :smile:

Unfortunately I don't know Ruby to do this myself, otherwise I would've given it a shot in creating a script. However, I figured that this makes sense as part of the Sass tool. To paraphrase @chriseppstein from above, the cli command is an interface from the Sass world to other Unix tools in the user's shell. As such I think, that



is more natural than, e.g., a new command


",Boldewyn,chriseppstein
807,2013-06-18 03:24:59,"@nex3 Thank you for the tip about scss.
",deemytch,nex3
806,2013-06-18 10:50:17,"@nex3 I've updated to 3.2.9 but I get the same issue...



...that's the compiled output?
",Integralist,nex3
806,2013-06-18 11:07:48,"Yes, that's the expected output. It's not human readable, it's machine readable for tools like FireSass or Chrome's built in Sass support.

On Jun 18, 2013, at 6:50 AM, Mark McDonnell notifications@github.com wrote:

> @nex3 I've updated to 3.2.9 but I get the same issue...
> 
> @media -sass-debug-info{filename{font-family:file:\/\/\/Users\/markmcdonnell\/Code\/vosbox\/workspace\/tabloid\/webapp\/static\/sass\/guts\/styleguide\/_grid.scss}line{font-family:\00003201}}
> ...that's the compiled output?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,nex3
805,2013-06-18 18:13:37,"@nex3 

Files are saved as UTF8, all files have @charset ""utf8"" declaration and the config sets encoding to utf8 too. It still happens when compileing Sass via Compass (I don't use Sass alone) on Windows, that these chars get destroyed.
",djesse,nex3
803,2013-06-17 20:25:23,"@nex3 We tried to standardize on Compass, but what we've run in to is lots of people just don't use Compass, or are moving to Ruby-less Sass compiling systems like Grunt through libsass/sassc. Having a language level way of including 3rd party code would provide a standard language level way of providing advanced functionality.

As for the concern between a Ruby based config file and a Sass file, then maybe the answer is to have an `extensions.rb` that Sass can read that effectively does the same thing as Compass's `require` in `config.rb`.
",Snugug,nex3
803,2013-06-17 22:23:12,"> @Snugug wrote:
> We tried to standardize on Compass, but what we've run in to is lots of people just don't use Compass, or are moving to Ruby-less Sass compiling systems like Grunt through libsass/sassc.

My understanding is that most people don't use Compass because they perceive it as ""heavyweight"" (as Rob mentioned). Having a package manager whose sole purpose is managing packages is a different proposition. People don't like requiring Compass to get access to a single compatibility mixin, but with a separate package manager it feels much more like just requiring the compatibility package.

>  Having a language level way of including 3rd party code would provide a standard language level way of providing advanced functionality.

I don't think it's even possible to do package management at the language level. I'm happy to read proposals, but I've got no idea how you'd (cleanly) support versioning and dependency management within the context of the language. I think it requires a tool with a broader notion of what a ""package"" is and how they interrelate.

> @robwierzbowski wrote:
> Creating a separate slim extension to import SassScript is an option, but fragments the user base even more ‚Äî now we have Compass extensions, SassScript Importer extensions, and vanilla, usable everywhere Sass.

I can't speak for @chriseppstein, but I suspect he'd be supportive of migrating Compass and its extensions to a separate package-management system. I'd be supportive of including some support for such a system in the `sass` command-line tool. If we coordinate our efforts and if the package manager can effectively address the use cases it's trying to, I don't think fragmentation is something we need to worry about.

> That's reasonable. What about a command line option to import a SassScript file? 
> 
> 
> 
> That's an explicit choice by the user.

The `--require` flag has done this since Sass 3.0.13.

One more thing I want to mention: as various Sass ports are maturing, people are getting more concerned -- and rightly so -- about the compatibility of Ruby-based extensions. At the same time, many of the things that Ruby extensions do, such as file IO, aren't likely to ever be natively supported in core Sass. Having a notion of packages and a package manager that's separate from the Ruby-based Sass presents one possibility for handling this. In the same way that Rubygems supports natively-compiled packages for multiple platforms, a Sass package manager could support a single package with implementations in several different languages -- Ruby, PHP, C, and one day JavaScript.
",nex3,Snugug
803,2013-06-17 22:23:12,"> @Snugug wrote:
> We tried to standardize on Compass, but what we've run in to is lots of people just don't use Compass, or are moving to Ruby-less Sass compiling systems like Grunt through libsass/sassc.

My understanding is that most people don't use Compass because they perceive it as ""heavyweight"" (as Rob mentioned). Having a package manager whose sole purpose is managing packages is a different proposition. People don't like requiring Compass to get access to a single compatibility mixin, but with a separate package manager it feels much more like just requiring the compatibility package.

>  Having a language level way of including 3rd party code would provide a standard language level way of providing advanced functionality.

I don't think it's even possible to do package management at the language level. I'm happy to read proposals, but I've got no idea how you'd (cleanly) support versioning and dependency management within the context of the language. I think it requires a tool with a broader notion of what a ""package"" is and how they interrelate.

> @robwierzbowski wrote:
> Creating a separate slim extension to import SassScript is an option, but fragments the user base even more ‚Äî now we have Compass extensions, SassScript Importer extensions, and vanilla, usable everywhere Sass.

I can't speak for @chriseppstein, but I suspect he'd be supportive of migrating Compass and its extensions to a separate package-management system. I'd be supportive of including some support for such a system in the `sass` command-line tool. If we coordinate our efforts and if the package manager can effectively address the use cases it's trying to, I don't think fragmentation is something we need to worry about.

> That's reasonable. What about a command line option to import a SassScript file? 
> 
> 
> 
> That's an explicit choice by the user.

The `--require` flag has done this since Sass 3.0.13.

One more thing I want to mention: as various Sass ports are maturing, people are getting more concerned -- and rightly so -- about the compatibility of Ruby-based extensions. At the same time, many of the things that Ruby extensions do, such as file IO, aren't likely to ever be natively supported in core Sass. Having a notion of packages and a package manager that's separate from the Ruby-based Sass presents one possibility for handling this. In the same way that Rubygems supports natively-compiled packages for multiple platforms, a Sass package manager could support a single package with implementations in several different languages -- Ruby, PHP, C, and one day JavaScript.
",nex3,robwierzbowski
803,2013-06-17 22:23:12,"> @Snugug wrote:
> We tried to standardize on Compass, but what we've run in to is lots of people just don't use Compass, or are moving to Ruby-less Sass compiling systems like Grunt through libsass/sassc.

My understanding is that most people don't use Compass because they perceive it as ""heavyweight"" (as Rob mentioned). Having a package manager whose sole purpose is managing packages is a different proposition. People don't like requiring Compass to get access to a single compatibility mixin, but with a separate package manager it feels much more like just requiring the compatibility package.

>  Having a language level way of including 3rd party code would provide a standard language level way of providing advanced functionality.

I don't think it's even possible to do package management at the language level. I'm happy to read proposals, but I've got no idea how you'd (cleanly) support versioning and dependency management within the context of the language. I think it requires a tool with a broader notion of what a ""package"" is and how they interrelate.

> @robwierzbowski wrote:
> Creating a separate slim extension to import SassScript is an option, but fragments the user base even more ‚Äî now we have Compass extensions, SassScript Importer extensions, and vanilla, usable everywhere Sass.

I can't speak for @chriseppstein, but I suspect he'd be supportive of migrating Compass and its extensions to a separate package-management system. I'd be supportive of including some support for such a system in the `sass` command-line tool. If we coordinate our efforts and if the package manager can effectively address the use cases it's trying to, I don't think fragmentation is something we need to worry about.

> That's reasonable. What about a command line option to import a SassScript file? 
> 
> 
> 
> That's an explicit choice by the user.

The `--require` flag has done this since Sass 3.0.13.

One more thing I want to mention: as various Sass ports are maturing, people are getting more concerned -- and rightly so -- about the compatibility of Ruby-based extensions. At the same time, many of the things that Ruby extensions do, such as file IO, aren't likely to ever be natively supported in core Sass. Having a notion of packages and a package manager that's separate from the Ruby-based Sass presents one possibility for handling this. In the same way that Rubygems supports natively-compiled packages for multiple platforms, a Sass package manager could support a single package with implementations in several different languages -- Ruby, PHP, C, and one day JavaScript.
",nex3,chriseppstein
803,2013-06-18 01:24:36,"Thanks for giving point by point input on this, Nathan. I appreciate the thoroughness.

I'm personally unconcerned about package management ‚Äî Bower handles everything I need for Sass/Compass extensions.

I wasn't aware of `require`; I'll have to play around with it. If it works the way I'm guessing I think adding a Sass extension directory structure with a default require directory (like Compass' `lib`) would cover @Snugug's original request.
",robwierzbowski,Snugug
803,2013-06-18 19:14:31,"@chriseppstein I agree on rallying around Compass and @robwierzbowski‚Äôs work has provided a means to use Compass in tandem with Bower. I was a hold out for a while on Compass and I think Compass needs to be branded better as a meta framework instead of a collection of CSS3 mixins. @nex3, maybe the Sass site can push harder for Compass as it is not mentioned anywhere ont he Sass home page? A lot of people probably use Sass yet have no idea what Compass is.

While I‚Äôm happy to see a project like libsass take on the very real issues of performance it is also what worries me the most. There are things that need to be written in Ruby in order to remain efficient like exponents and string parsing. I see no way to efficiently support libsass when we have to go to a deeper language to handle more complex things. I get it, we are going way outside the box with these features and maybe the solution is that we need to work harder to stay within the sandbox of Sass.
",scottkellum,nex3
803,2013-06-18 19:14:31,"@chriseppstein I agree on rallying around Compass and @robwierzbowski‚Äôs work has provided a means to use Compass in tandem with Bower. I was a hold out for a while on Compass and I think Compass needs to be branded better as a meta framework instead of a collection of CSS3 mixins. @nex3, maybe the Sass site can push harder for Compass as it is not mentioned anywhere ont he Sass home page? A lot of people probably use Sass yet have no idea what Compass is.

While I‚Äôm happy to see a project like libsass take on the very real issues of performance it is also what worries me the most. There are things that need to be written in Ruby in order to remain efficient like exponents and string parsing. I see no way to efficiently support libsass when we have to go to a deeper language to handle more complex things. I get it, we are going way outside the box with these features and maybe the solution is that we need to work harder to stay within the sandbox of Sass.
",scottkellum,robwierzbowski
803,2013-06-18 19:14:31,"@chriseppstein I agree on rallying around Compass and @robwierzbowski‚Äôs work has provided a means to use Compass in tandem with Bower. I was a hold out for a while on Compass and I think Compass needs to be branded better as a meta framework instead of a collection of CSS3 mixins. @nex3, maybe the Sass site can push harder for Compass as it is not mentioned anywhere ont he Sass home page? A lot of people probably use Sass yet have no idea what Compass is.

While I‚Äôm happy to see a project like libsass take on the very real issues of performance it is also what worries me the most. There are things that need to be written in Ruby in order to remain efficient like exponents and string parsing. I see no way to efficiently support libsass when we have to go to a deeper language to handle more complex things. I get it, we are going way outside the box with these features and maybe the solution is that we need to work harder to stay within the sandbox of Sass.
",scottkellum,chriseppstein
803,2013-06-19 17:45:22,"@scottkellum It's been a marketing challenge to convince someone to install a ""meta-framework"". Compass's initial branding was very much along those lines but no one knows what a ""meta-framework"" is or why they need one. Instead, we've taken the approach of making Compass compelling in-and-of itself but to ""subversively"" provide all the things we need as a community to get to a vibrant ecosystem. Honestly, it would be easier for most people to think of Compass as ""Sass for your project"" and Sass as ""Just the barebones Sass Compiler"".

I think libsass is a Good Thing&trade; but I agree that it also has a fragmenting force on the community and it's existence necessarily forces us to consider broadening the language's core capabilities to minimize the need for native extensions.

@cimmanon While, I agree that compass could be, in essence, 2 or even 3 distinct projects. What would be the value in separating them? It's a lot of work, it makes it harder to get started with sass. I'm not completely opposed, but given the effort, I think a compelling argument is needed.
",chriseppstein,scottkellum
803,2013-06-19 17:45:22,"@scottkellum It's been a marketing challenge to convince someone to install a ""meta-framework"". Compass's initial branding was very much along those lines but no one knows what a ""meta-framework"" is or why they need one. Instead, we've taken the approach of making Compass compelling in-and-of itself but to ""subversively"" provide all the things we need as a community to get to a vibrant ecosystem. Honestly, it would be easier for most people to think of Compass as ""Sass for your project"" and Sass as ""Just the barebones Sass Compiler"".

I think libsass is a Good Thing&trade; but I agree that it also has a fragmenting force on the community and it's existence necessarily forces us to consider broadening the language's core capabilities to minimize the need for native extensions.

@cimmanon While, I agree that compass could be, in essence, 2 or even 3 distinct projects. What would be the value in separating them? It's a lot of work, it makes it harder to get started with sass. I'm not completely opposed, but given the effort, I think a compelling argument is needed.
",chriseppstein,cimmanon
803,2013-06-19 18:29:10,"@chriseppstein What's the value in keeping them together?  Just the work involved?  Portions of Compass have become standard features of Sass in the past, haven't they?  Extensions just seem like they should be a natural feature of Sass.
",cimmanon,chriseppstein
803,2013-06-19 19:32:18,"@cimmanon It's true, many features of compass have found their way into Sass. That said, the boundaries of Sass's features are very clear right now: The language and basic tools for compiling Sass files. Package management has traditionally been a language concern only to the point where the necessary hooks and environmental capabilities are provided. From there, it is usually a separate project: Perl has CPAN, Ruby has gem, Node has NPM, Java has maven, Python has pip. As far as I know, only Go has built package management into the language. Maybe this is a case of everyone is doing it wrong. but why move package management into Sass core and leave the std library of compass out? The only argument I really see is that they do not have essentially linked release schedules and that users may want to install new compilation and dev tools without changing their compilation dependencies. But so far, I do not hear that pain from our users.
",chriseppstein,cimmanon
799,2013-06-07 22:01:37,"@thedarkone I was just looking at that gem. What is the benefit of using `ThreadSafe::Cache` instead of `ThreadSafe::Hash`?
",chriseppstein,thedarkone
799,2013-06-08 00:15:24,"@chriseppstein basically both `TS::Array` and `TS::Hash` have a really naive [""toy"" implementations](https://github.com/headius/thread_safe/blob/master/lib/thread_safe.rb). Whereas `TS::Cache` (a Hash like cache) is a ""serious business (tm)"" thing :) (truly concurrent, mostly lock-free, with custom Ruby VM dependent backends: native JRuby ext, Rubinius, MRI etc), it also has useful ""cache"" methods like `compute_if_absent(key, &block)`, `put_if_absent(key, value)`, `get_and_set(key, value)` and others.

I wouldn't recommend using `TS::Array` or `TS::Hash`, on other hand `TS::Cache` should be production ready (and is a Rails 4.0 dependency).
",thedarkone,chriseppstein
798,2013-06-07 16:36:37,"Thanks @chriseppstein, I figured it was something like that; it's a bummer because it does make things more compact, especially for conditionally assigning a variable. 

In my recent use cases, the drawback of the `@if` directive is that it has a different scope, so a variable has to first exist outside the directive in order for the directive to be able to conditionally assign it. It would be nice to see a true branch-executing same-scope `if()` function. 

I gather then, that it simply can't be done in SassScript and has to be built at a deeper level?
",lunelson,chriseppstein
796,2013-06-11 15:55:40,"@nex3 One reason why we might want to return true for features that we implement in 3.3 even though `sass-supports` is a new feature is that it would give other Sass implementations the ability to ship syntactic compatibility with 3.3 without needing to delay the release while they implement the other features. E.g. libsass or sassc might return false for `sourcemaps` while we return true.

/cc @akhleung @hcatlin
",chriseppstein,nex3
796,2013-06-11 22:23:22,"@nex3 I'm done addressing your comments to-date on this PR.
",chriseppstein,nex3
796,2013-06-19 21:11:17,"@nex3 I've addressed all remaining comments. Good to merge?
",chriseppstein,nex3
790,2013-12-14 07:19:04,"@nex3 Thank you! <3
",pwnall,nex3
788,2013-06-04 19:32:16,"Hey @chriseppstein,

Here is a better example of our issue.

We have this Sass:



We expect that should return:



But instead, its returning this, which is inconsistent with Sass versions prior to v3.2.8:



Thoughts?
",craigkeller,chriseppstein
788,2013-06-04 20:39:17,"Ok. Thanks @craigkeller I see the issue now. Reopening -- I agree this is a regression.

This was changed in 3700884c8c150e61da8d24168d25db34fccbd19b which was first released in 3.2.8.

For what it's worth, as a work around, this code works and I think it more succinctly expresses your particular use case:


",chriseppstein,craigkeller
788,2013-06-04 21:17:21,"thanks, @chriseppstein
",craigkeller,chriseppstein
788,2013-06-07 20:04:42,"@chriseppstein I think only the `c: d` selector in your example is incorrect. For `e: f`, putting `.parent1` before `.context` fulfills `.parent1 .child1 { @extend %bar }` and `.parent2 { @extend %foo }`. Similarly for `g: h`.

I'm working on fixing the incorrect compilation here, though.
",nex3,chriseppstein
788,2013-06-07 20:24:20,"Just reverting 3700884c8c150e61da8d24168d25db34fccbd19b didn't fix the issue; it looks like 5bc676942daa24e81f4a473894652a18b8b85a41 is also contributing somehow. Reverting both commits simultaneously does fix @craigkeller's issue.

Even going back before 3700884c8c150e61da8d24168d25db34fccbd19b doesn't fix @chriseppstein's `c: d` issue, which suggests that it may have a different root cause.
",nex3,craigkeller
788,2013-06-07 20:24:20,"Just reverting 3700884c8c150e61da8d24168d25db34fccbd19b didn't fix the issue; it looks like 5bc676942daa24e81f4a473894652a18b8b85a41 is also contributing somehow. Reverting both commits simultaneously does fix @craigkeller's issue.

Even going back before 3700884c8c150e61da8d24168d25db34fccbd19b doesn't fix @chriseppstein's `c: d` issue, which suggests that it may have a different root cause.
",nex3,chriseppstein
785,2013-06-10 17:40:24,"@ryanburnette Actually both of them are block based too, If you indent under them:


",chriseppstein,ryanburnette
784,2013-05-31 20:36:32,"@chriseppstein Just to be clear: I don't care much about my own copyright either, but I believe the library authors deserve some credit and I'm legally required to leave their copyright in there anyway.
",superlukas,chriseppstein
784,2013-05-31 21:15:07,"@chriseppstein The use-case you're describing is relevant for all output styles but compressed, right? Maybe changing the behaviour based on the output style is the simplest solution. [Most](https://github.com/GoalSmashers/clean-css#how-to-use-clean-css-programmatically) [other](https://github.com/gruntjs/grunt-contrib-uglify#preservecomments) minifiers take some kind of options hash, but I'm not sure if thats practical since there's only one option in the first place.
",superlukas,chriseppstein
784,2013-05-31 21:16:41,"@superlukas it applies specifically to compressed mode. That is the point of loud comments.
",chriseppstein,superlukas
784,2013-05-31 21:46:52,"@nex3 has a point. I just did some testing though and @chriseppstein is right too, Sass doesn't remove the comments. It seems to be a problem with Sprockets and/or Sprockets-Sass. I guess the content is piped through Sass more than just once and the comments are lost somewhere on the way.
",superlukas,nex3
784,2013-05-31 21:46:52,"@nex3 has a point. I just did some testing though and @chriseppstein is right too, Sass doesn't remove the comments. It seems to be a problem with Sprockets and/or Sprockets-Sass. I guess the content is piped through Sass more than just once and the comments are lost somewhere on the way.
",superlukas,chriseppstein
784,2013-05-31 22:15:41,"@nex3 Sass cares about the output. We want it to be beautiful. To look like hand-written code. I want to enable that, but no one has specifically asked for this so I'm not going to go to the mat for it. Feel free to take out the stripping logic, the multi-processor use case is a compelling one.
",chriseppstein,nex3
784,2013-06-19 17:01:49,"@jdmarshall You shouldn't be affected by this issue if you're using Compass' or Sass' CLI. I've tested both and they're doing everything right. I blame [petebrowne/sprockets-sass](https://github.com/petebrowne/sprockets-sass) in my case (or some other part of my asset pipeline).
",superlukas,jdmarshall
783,2013-05-31 17:20:50,"Yep, the `@for` directive is more efficient at this because index lookup is slower then index access.



Though I grant you that both of these examples are less perfect than the one @Snugug provided in #570.

Note that I think the need for index is actually going to diminish when we introduce maps. People don't want selectors named `.selector_N`. Colors like this have meaning. So expect this code will be more common:


",chriseppstein,Snugug
781,2013-05-31 14:26:30,"@cimmanon thank you very much!
",tinganho,cimmanon
780,2013-05-31 03:15:08,"Hey @chriseppstein 

Thanks for the prompt reply. Let me see if I can make this clearer
I want to know if it is possible to use my **Sass variable names** as **CSS selectors** using mixins 

So I have the following variables declared



So in the #{$i} at the end, I want it to be replaced with the actual variable value (#xxx) from above 
But in the .blk-***, I want to print the name of the variable held by $i. 

$primary-color should print primary-color 
$primary-color-light should print primary-color-light
$primary-color-dark should print primary-color-dark

I think its one level of abstraction too deep. Just wanted to know if this is currently possible or possible through maps feature. Hope this helps clarify what I am really asking for
",rvinay88,chriseppstein
780,2013-06-01 05:06:26,"Thanks @chriseppstein...Yeah I get the idea...very excited about the maps feature!!
",rvinay88,chriseppstein
779,2013-05-30 19:53:43,"@imathis Can you restructure your theme folder so that you could do this with the Sass globbing plugin?



Just a thought.
",jlong,imathis
779,2013-05-30 20:27:28,"I emailed a reply but I don't see it here:

@nex3 I'd like to discuss this with you. I don't see how optional imports are wasted effort with future development plans -- would like to understand why you think this is true.

This use case is an interesting one and I'd like to think about it more before discarding it out of hand.
",chriseppstein,nex3
779,2014-03-28 16:56:07,"What about conditional loading within control directives and/or mixins?

The use case described by @imathis could also be implemented like this :



Not only does it solve the same problem a different way, but it would also allow one to do stuff like this :



---



---



I posted this as a separate issue, since my use case is a lot broader and the syntax is very different.
https://github.com/nex3/sass/issues/1194
",jslegers,imathis
779,2016-05-26 19:09:48,"@tam5 I don't think that @nex3 will change her opinion. She closed it!
",yordis,nex3
779,2016-05-26 19:09:48,"@tam5 I don't think that @nex3 will change her opinion. She closed it!
",yordis,tam5
779,2016-09-12 18:31:43,"Until it gets implemented, I have come across two potential workarounds which may be helpful depending on the use case so I'll post them:

### 1 - Internal `sass` solution (files must exist):

Create a file `app.scss` which contains something like this:



Then, in each of the ""component"" files you wrap all styles within something like this:



You have to include an import for each file and all files must exist, so this solution isn't all that much better than just deciding which `@imports` to include. However, @imathis's use case was primarily for a better user experience and a higher level of abstraction, which could be accomplished by playing around with this approach.

### 2 - Javascript... (More involved but full flexibility):

Very likely, your application will have to include some sort of build process, only part of which will be to process the `sass`, but which may also include `gulp`, `webpack`, etc. tasks. If you are using something like that, you can have the script that processes your css take care of the ""optional"" or logical imports. I know this may be annoying to configure, but it does give the greatest flexibility.

If you want an example to copy from have a look [here](https://github.com/tam5/laravel-materialize/blob/master/tasks/sass.js).
",tam5,imathis
777,2013-06-21 17:49:47,"@nex3 I've addressed your code review comments. I've also refactored the watching code further to delegate watched directories and files to the importer objects and I've added tests for the watcher.
",chriseppstein,nex3
774,2013-05-28 20:44:57,"@nex3 it is semantically ambiguous, but not syntactically.
",chriseppstein,nex3
774,2013-05-29 15:46:54,"@Hannes-III I like this.
",chriseppstein,Hannes-III
774,2013-05-29 17:40:58,"> @nex3 it is semantically ambiguous, but not syntactically.
> 
> That is, it would be a semantic conflict if there was ever a html element added named without-xxx. But this is just a selector sequence at parse time.

Whatever you want to call it, I don't want to hijack some specific valid selector syntax to have a special meaning in this context.
",nex3,nex3
774,2013-05-31 23:38:27,"I like the consistent syntax of @robwierzbowski's suggestion, but I don't like how verbose it makes the simple cases. What used to be `@at-root #{&}-foo { ... }` becomes `@selector (without: parent) { #{&}-foo { ... } }`, which is a lot more burdensome to read and write.
",nex3,robwierzbowski
773,2013-05-28 20:26:36,"@lolmaus I'm skeptical about your assertion that Sass is reporting the ruby line number. Please open an issue about that with a reproducible test case. I have opened a new bug about `@debug` using `$stderr` instead of the logger.
",chriseppstein,lolmaus
773,2013-05-28 21:04:43,"I've filed the issue. Thank you for your kind help, @chriseppstein.
",lolmaus,chriseppstein
765,2013-05-23 21:29:32,"I'm skeptical that this will happen at all. Writing a formal specification is a colossal amount of work. That work has to be done by someone -- presumably @chriseppstein or myself -- and it would come straight out of time that could otherwise be spent improving the language. The value provided by a specification is just not large enough to warrant the effort.

It's also worth noting that a specification won't make it easier to port Sass to other languages; it will just make it easier for those ports to be confident that they're handling every edge case correctly. Currently I don't know of any Sass ports that have feature parity with the reference implementation. Without ports that can make use of it, writing a spec provides no value at all.
",nex3,chriseppstein
765,2013-07-01 18:59:30,"@richthegeek Formal specifications or comprehensive cross-platform test suites are useful for ensuring that every relevant edge case works identically between implementations. They're not necessary for getting basic feature parity, which no ports have yet reached. Until they have, work spent on a specification isn't providing value to anyone.

It's also worth noting that the Sass syntax is not context-free, so it can't be represented entirely in BNF.
",nex3,richthegeek
764,2013-09-12 20:29:55,"@stephanvane according to @thibaudgg, that's inaccurate.
",nex3,stephanvane
764,2013-09-13 08:48:53,"You're right @nex3, misread some comments, sorry about that. Keep up the good work! :+1: 
",stephanvane,nex3
759,2013-05-20 18:17:47,"@bjmiller It does. I'd love to integrate such a thing into compass.
",chriseppstein,bjmiller
757,2013-06-06 15:25:38,"@hcatlin can you do some community outreach to get some different taglines to test and then some user research to find out what different tag lines evoke in people? I'm fine with changing the tagline, I just don't know what to change it to. Some data may crystalize this for us.
",chriseppstein,hcatlin
757,2013-06-06 17:58:07,"@hcatlin `Well, on the new site they are saying ""Sass: CSS with superpowers"" ...`

What is the status of the new site? I have spoken to others in the Sass community, mainly from the East coast, and there is very little insight as to what is happening there. You may gain more support if there was more transparency as to what is happening to re-brand Sass. 
",blackfalcon,hcatlin
757,2013-06-06 18:15:15,"@blackfalcon Not much is happening there. :cry: 
",chriseppstein,blackfalcon
757,2013-06-07 18:34:21,"I spent a couple weekends working on content for the new site. It's
currently being reviewed by @jina. My goal was to get it launch able, not
perfect. But, I believe it's better than the current site even in the state
it's in.

I do like the superpower line. I've used it a couple places. But, Chris, I
agree. Some community feedback would be great!

And, @blackfalcon, a lot of the Sass design team is in the east coast. ;)

On Thursday, June 6, 2013, Chris Eppstein wrote:

> @blackfalcon https://github.com/blackfalcon Not much is happening
> there. [image: :cry:]
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/757#issuecomment-19063885
> .
",hcatlin,blackfalcon
757,2013-06-07 23:44:41,"Hi guys. It's off topic from what this PR is about but since I was mentioned re: the Sass site, I figured I would chime in. I pulled things into my local branch and was fixing up some of the CSS I was working on locally to work for the new content but didn't finish before heading off to Europe for some conferences. I realize I should be communicating these things better and I will from now on. ""Nothing is happening"" is inaccurate. It's more like things are going slower than initially anticipated. Chris, I feel bad for frustrating you but I don't want the wrong message getting out. I did work on it before my travels and its really close. The site is gonna be rad & way better. & I fully planned to work on it again when I get back to the states. Sorry about the lack of transparency. Like I said, will get better about that. :-) as for on topic for this PR: I have no opinion for this because its just gonna get replaced with a new site anyway. :-P I'm into the super powers thing. ;-)
‚Äî
Sent from Mailbox for iPhone

On Fri, Jun 7, 2013 at 8:34 PM, Hampton Catlin notifications@github.com
wrote:

> I spent a couple weekends working on content for the new site. It's
> currently being reviewed by @jina. My goal was to get it launch able, not
> perfect. But, I believe it's better than the current site even in the state
> it's in.
> I do like the superpower line. I've used it a couple places. But, Chris, I
> agree. Some community feedback would be great!
> And, @blackfalcon, a lot of the Sass design team is in the east coast. ;)
> On Thursday, June 6, 2013, Chris Eppstein wrote:
> 
> > @blackfalcon https://github.com/blackfalcon Not much is happening
> > there. [image: :cry:]
> > 
> > ‚Äî
> > Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/757#issuecomment-19063885
> > .
> > 
> > ---
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/nex3/sass/pull/757#issuecomment-19124953
",jina,blackfalcon
756,2013-05-21 00:06:39,"What @chriseppstein said. Also worth noting that we couldn't just do this universally because it could unpredictably re-order the source code.

#116 is broadly tracking our optimization efforts.
",nex3,chriseppstein
754,2013-05-20 18:40:49,"@cimmanon speaks the truth. http://www.w3.org/TR/css3-color/#transparent is `rgba(0,0,0,0)`. We should create a color object when we see this identifier and we can compact transparent black in compressed mode to `transparent` (which saves 2 characters).
",chriseppstein,cimmanon
754,2013-05-30 15:27:50,"@chriseppstein I don't think, that replaceing `transparent` with `rgba(0,0,0,0)` is the way to go:
IE8- will not understand it and ignore the rule...
and since the market share for IE8 is still a factor, it might cause some issues...
",stryju,chriseppstein
754,2013-05-30 16:20:45,"@stryju The commit that @nex3 made causes all colors that end up equivalent to `rgba(0,0,0,0)` regardless of their authored format to be output as `transparent`. So this actually increases IE8 support.
",chriseppstein,stryju
754,2013-05-30 16:50:19,"@chriseppstein great :)
",stryju,chriseppstein
754,2013-05-30 18:39:35,"@nex3 I'm somewhat torn on #363 when it comes to emitting values that have
a more browser compatible representation. First off, it could cause
regressions for existing users, and second off, I think we should always
favor end-user experience over an aesthetic feature like #363. So I think
we'll end up with a happy medium when that issue is addressed and I think
`rgb(0,0,0,0)` should still output as `transparent` after that is closed.

On Thu, May 30, 2013 at 11:02 AM, Nathan Weizenbaum <
notifications@github.com> wrote:

> Don't rely on rgba(0,0,0,0) being transformed to transparent, though;
> when #363 https://github.com/nex3/sass/issues/363 is fixed, it will be
> output in whatever format the author used.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/754#issuecomment-18697165
> .
",chriseppstein,nex3
753,2013-05-17 13:35:02,"@ahfeel I ran your code through [SassMeister](http://sassmeister.com/), and there was no issues with the output?



had the expected return of



I removed the dependency on Compass and processed as simply Sass just to verify if Sass related. When I added back in the Compass gem, the output was the same. 
",blackfalcon,ahfeel
751,2013-05-16 21:15:23,"@cimmanon: When you use a compile-to-CSS metalanguage, such as SASS/SCSS, then the CSS that it generates becomes not code per se, but a throwaway build product.  If you don't treat it this way, then you run the risk of people directly hacking the CSS without knowing better, and having their changes thrown away when anyone modifies the original source and builds the CSS.

Where this is a problem is when both: a) You can't store CSS in your source tree, you need it to be built fresh with each deployment, and b) You aren't using Rails, and you therefore can't guarantee that Ruby is even available within your build environment.

I have this exact scenario.  Simply using ""scss --watch"" to generate CSS on the developer level is not an option.

We don't need to port the whole thing over to Javascript, I don't think.  One valid strategy might be to make the compile the Ruby process down to an LLVM binary, and use Emscripten to make Javascript out of it.  The whole process, if possible at all, would be entirely scriptable.  You can have it auto-generate every time you cut a release.  As long as you state up front that you're not going to support it if it fails, I don't think it would add any real extra work - outside of the initial setup.

Another strategy might be to try hammering JRuby into running it, thus extending it to at least the Java environment.  To my understanding, that doesn't work well right now for some reason.

There are a handful of abandoned projects around, where people gave an honest go at doing SCSS-in-another-language.  But, between the sheer size of it, and the fact that the development here on the core language makes it a moving target, it's easy to see why no one has been able to finish it.
",bjmiller,cimmanon
751,2013-05-17 01:58:44,"@bjmiller: Thanks for your answer. You have a very good point about the port to another language, all the SCSS-in-another-language are still very incomplete or abandoned.

I already used a version of the Sass compiler with IronRuby (.NET) but it was extremely slow. I will try to do it via JRuby. If I find a way to generate a standalone and fast compiler on Windows, this would be perfect for my needs.
",emagnier,bjmiller
747,2014-06-17 13:10:04,"This also would be great to avoid doing this over and over:



@chriseppstein: how do you plan `@error` to work?
",battaglr,chriseppstein
740,2013-05-21 00:19:26,"@chriseppstein I'm certainly sympathetic to those concerns. At the same time, we've been moving in the direction of adding more introspective functions, and right now there really isn't a way to do what these functions are doing. But maybe you're right and there isn't a reason to do what these functions are doing in the first place.

I agree that we should see some use cases before we put these in.
",nex3,chriseppstein
740,2013-05-22 17:58:38,"Actually `strip-unit()` is what I call it in my own code too. I agreed with @nex3's point that `one-unit()` wasn't necessary and I'm amenable to calling the other two `with-unit()` and `without-unit()` but infact I call them `strip-unit()` and `assert-unit()`.

As for the return statements you wrote above, it's precisely because of buggy results in using `$number / ($number * 0 + 1)` as a means to strip units, that I chose to write them in SassScript, which has proven to be much more robust.
",lunelson,nex3
740,2013-05-25 01:02:09,"@cimmanon the `strip-unit` calls in that code are superfluous. `$font-size` and `$desired-size` both have `em` as their unit, so `$font-size / $desired-size` has no unit anyway.

@lunelson writing functions that don't think about units sounds like an anti-pattern.

> The input value might be in the range 0-100, with or without a percentage unit, or it might be in the range 0-1.

This sounds very confusing. How do I know whether `fn(1)` is going to treat `1` as `1%` or `1.0`? This is why units exist: to make it clear what you're specifying.

If the unit math doesn't work out in your functions, that seems a logic smell rather than an indication that Sass needs an easier way to add/remove units.

@robwierzbowski `1#{unit($number)}` doesn't work how you want it to. It returns a string, not a number.

### Summary

I don't find these use cases very compelling; I'm leaning toward's @chriseppstein's position here, that these functions would encourage more sloppy code than they do add expressive power.
",nex3,chriseppstein
740,2013-05-25 01:02:09,"@cimmanon the `strip-unit` calls in that code are superfluous. `$font-size` and `$desired-size` both have `em` as their unit, so `$font-size / $desired-size` has no unit anyway.

@lunelson writing functions that don't think about units sounds like an anti-pattern.

> The input value might be in the range 0-100, with or without a percentage unit, or it might be in the range 0-1.

This sounds very confusing. How do I know whether `fn(1)` is going to treat `1` as `1%` or `1.0`? This is why units exist: to make it clear what you're specifying.

If the unit math doesn't work out in your functions, that seems a logic smell rather than an indication that Sass needs an easier way to add/remove units.

@robwierzbowski `1#{unit($number)}` doesn't work how you want it to. It returns a string, not a number.

### Summary

I don't find these use cases very compelling; I'm leaning toward's @chriseppstein's position here, that these functions would encourage more sloppy code than they do add expressive power.
",nex3,lunelson
740,2013-05-25 01:02:09,"@cimmanon the `strip-unit` calls in that code are superfluous. `$font-size` and `$desired-size` both have `em` as their unit, so `$font-size / $desired-size` has no unit anyway.

@lunelson writing functions that don't think about units sounds like an anti-pattern.

> The input value might be in the range 0-100, with or without a percentage unit, or it might be in the range 0-1.

This sounds very confusing. How do I know whether `fn(1)` is going to treat `1` as `1%` or `1.0`? This is why units exist: to make it clear what you're specifying.

If the unit math doesn't work out in your functions, that seems a logic smell rather than an indication that Sass needs an easier way to add/remove units.

@robwierzbowski `1#{unit($number)}` doesn't work how you want it to. It returns a string, not a number.

### Summary

I don't find these use cases very compelling; I'm leaning toward's @chriseppstein's position here, that these functions would encourage more sloppy code than they do add expressive power.
",nex3,cimmanon
740,2013-05-25 01:21:36,"@nex3, Sorry, you're right. Should be something like `$number * 0 + 1`, but the point is moot.
",robwierzbowski,nex3
740,2013-05-25 16:31:22,"@lunelson thank you for the patch, but I think the cons outweigh the pros here.
",chriseppstein,lunelson
740,2015-04-21 22:40:29,"@chriseppstein a valid use case for stripping units is in doing math to convert to or from vw/vh units (for example calculating suitable px or em values for fallback in browsers that lack vw/vh support). Since there is no uniform way of handling this conversion it must be done on a case-by-case basis, and requires stripping units.
",amclin,chriseppstein
739,2013-05-31 22:04:45,"@nex3 Mixins are good for small blocks of code meant to be re-used. A theme is a large block of code potentially spanning several files. Dynamic imports are an ideal way of handling this. Especially if you want to provide a code separation between the authoring of the core design and the theme. 
",chriseppstein,nex3
739,2014-02-12 23:51:29,"@chriseppstein @nex3 any updates here?
",lifeiscontent,nex3
739,2014-02-12 23:51:29,"@chriseppstein @nex3 any updates here?
",lifeiscontent,chriseppstein
739,2014-03-28 17:15:33,"@nex3 : In https://github.com/nex3/sass/issues/779 you mentioned that you were planning on deprecating the `@import` feature, which is used in pretty much every Sass implementation of moderate to high complexity.

Why not just extend the possibilities of the `@import` feature by allowing it to be used within control directives and/or mixins? This is how PHP's `include` ( http://www.php.net/manual/en/function.include.php ) is implemented. It allows dynamic loading, greater modularity, easy polyfilling and many more features without having to change or deprecate the `@import` syntax.

Implementing the possibility of dynamic dependencies by allowing @import statements within control directives or mixins has one main advantage: Sass users would not notice any difference between ""old school"" dependency management and ""new school"" dependency management.

While the underlying mechanism may have to be altered significantly or even rewritten completely, the syntax for the ""end user"" would remain completely the same. No new syntax would have to be learnt and old `@import` statements would not have to be changed to be compatible with new versions of Sass.

Examples :



---



---



---



See also https://github.com/nex3/sass/issues/1194, where I posted this request as a separate issue.
",jslegers,nex3
739,2014-04-04 22:42:37,"@nex3 :

There's always a reason to maintain compatibility : stopping old code from breaking when you upgrade to a new version of Sass.

This kind of crazy decisions makes me want to reconsider adopting Sass and just stick with plain CSS... or write my own Sass equivalent.
",jslegers,nex3
739,2014-04-05 08:56:15,"@nex3 :

Another great use for polyfilling : if I could polyfill either the `@import` syntax or the new syntax in some way, I would not have to worry about deprecation. 

And then, of course, there's theming (https://github.com/sass/sass/issues/279).
",jslegers,nex3
739,2015-02-09 22:00:38,"@jlukic it's not a blocking issue because you can always refactor your code to work without this capability. Albiet, the code is not as ""pretty"".

The basic strategy is that you must wrap up the code in mixins. Import everything and then only include those mixins that apply for the given runtime configuration.
",chriseppstein,jlukic
739,2015-02-12 00:54:05,"@jlukic I don't know what to tell you. Less and Sass are very different projects with different design philosophies. The goal of ""preprocessor ambivalent"" means you are choosing to use the lowest common denominator of what several languages can do with a relatively straightforward transformation. Variables in imports are not part of the LCD of the features available so you'll need to forgo them in your project to achieve all your stated requirements. 
",chriseppstein,jlukic
739,2015-07-11 09:50:57,"@nex3 

thanks for your reply! While I can agree that theming somehow can be solved with maps/mixins and so on, can you comment on about raised question in my reply https://github.com/sass/sass/issues/739#issuecomment-72394908, please? It something that can't be solved with mixins.

Thanks in advance
",ArmorDarks,nex3
739,2015-07-18 00:10:56,"@nex3 can you elaborate on that?
",Jakobud,nex3
739,2015-08-14 20:40:33,"@Jakobud something like this:



Then a theme could be defined as:


",nex3,Jakobud
739,2015-09-24 23:53:04,"@jlukic the above comment looks like it might work.
",brianespinosa,jlukic
739,2016-04-22 09:21:11,"I have the same error message than @shinurag.
I am using jspm and the [plugin-sass](https://github.com/mobilexag/plugin-sass) loader to load [react-toolbox](http://react-toolbox.com/#/components/tooltip) components.

As the conditional import is part of the react-toolbox, it makes me guess it worked on the developers machine, and therefore they must have used another sass implementation that allows imports inside conditionals.
",etnbrd,shinurag
739,2016-05-02 15:27:32,"@etnbrd it's very likely related to this: https://medium.com/@xzyfer/why-node-sass-broke-your-code-and-semver-1b3e409c57b9#.mj58qxo8c
",stipsan,etnbrd
739,2016-05-17 21:44:26,"Can someone implement @nex3 s last suggestion on Semantic UI? I can't get it to work..
",ShaggyDude,nex3
739,2016-11-16 09:03:23,"@partounian Nope
",ArmorDarks,partounian
739,2017-01-12 12:06:30,"@alvinsight

I'm afraid not. Considering they seem to have been ignoring this issue since 2015, I guess the core dev team is totally disinterested in adding a feature as important as dynamic dependencies...",jslegers,alvinsight
739,2017-01-12 20:15:40,@gchaumont Does LESS has this feature? If it does I'm switching right now,iErik,gchaumont
739,2017-01-12 20:46:45,"@iErik @jslegers @alvinsight 

I don't see this happening anytime soon. Reading through the whole thread it seems that @nex3 (the primary contributor to this repo) is opposed to the idea and hasn't been sold on it by the further commentary.",natecox,jslegers
739,2017-01-12 20:46:45,"@iErik @jslegers @alvinsight 

I don't see this happening anytime soon. Reading through the whole thread it seems that @nex3 (the primary contributor to this repo) is opposed to the idea and hasn't been sold on it by the further commentary.",natecox,alvinsight
739,2017-01-12 20:46:45,"@iErik @jslegers @alvinsight 

I don't see this happening anytime soon. Reading through the whole thread it seems that @nex3 (the primary contributor to this repo) is opposed to the idea and hasn't been sold on it by the further commentary.",natecox,nex3
739,2017-01-12 20:46:45,"@iErik @jslegers @alvinsight 

I don't see this happening anytime soon. Reading through the whole thread it seems that @nex3 (the primary contributor to this repo) is opposed to the idea and hasn't been sold on it by the further commentary.",natecox,iErik
739,2017-01-12 21:21:53,@iErik Yes LESS does have this feature. I was using it all the time back in the days. ,lekkerduidelijk,iErik
739,2017-01-13 19:16:36,"@jslegers This kind of retaliatory hyperbole doesn't help anyone. SASS is extremely popular due to the hard work of a few people and the involvement of the community behind them. Generally, it's better to be appreciative instead of aggressively demeaning.

If you see a strong case for this, fork this repo and implement the feature as you see it, then issue a pull request and let the community decide.",natecox,jslegers
739,2017-02-06 08:46:08,"I have a use case for this.
I'm using webpack to inject some ENV vars into SASS which are available globally. Before webpack runs, it uses Grunt to run grunt-webfont, which generates a font for me based off an arbitrary set of settings. The webfont aside, this settings file also points to any other fonts that the project might use, effectively meaning that the settings file determines which fonts are to be included in the project, dynamically. This could be any number of generated fonts, as well as static font assets or even font imports.

Once all that generation is done, I'm building a SASS list of maps that describe each font. In the case of my generated fonts, I need to be able to dynamically include the generated SASS partial for that font. Since this application is configuration-based and could change depending on the implementation of the project, you have no way of knowing what fonts will be available, and therefore what files to import. It is completely out of the question to ""reconsider the architecture"" as has been mentioned by the dev team because by the very nature of the application it needs to be dynamic.

I am surprised that now in 2017 dynamic imports are still not a thing. I'm not being impatient, but I would like to point out that once a dev team starts dictating what their user base's use cases will and will not be, the product suffers. Look at the difference between angular 1 and angular 2 - angular 2 is light years better because they made less assumptions about what the use cases were and just made features available that are likely to be useful at some point.

Just some food for thought. I should have checked this before starting my build, because now I'll probably have to convert the entire project over to LESS (ouch), but that's my own fault. Its just a bummer, because I've been touting SASS over LESS and other preprocessors for years, however I have to agree with @jslegers that it seems as though SASS may be overtaken by the flexibility of other preprocessors if the core team doesn't start listening to the community more. Look at the size of this thread, for starters! It's kind of a no-brainer!",dudewad,jslegers
739,2017-02-06 09:11:35,"@dudewad You need to take this issue higher, in this case it isn't Sass responsibility, Sass just receives feed of information from Grunt in form of Sass file. `grunt-webfont` allows to write your own template files for generated webfonts. Write font declarations there based on feeded from grunt information. Thus, you won't need any dynamic imports.

This isn't perfectly relative example, but you can see similar thing for sprites [here](https://github.com/LotusTM/Kotsu/blob/master/tasks/sprites.coffee#L16) in Kotsu. Though, here we don't use fonts declarations, since we don't use more than one sprite set and webicons set per project, but you can catch the idea. It's quite easy thing to add font declarations there too. Just declare fonts in your Grunt config in form of object or array under, let's say, `fonts` property, and then loop through this property in your `grunt-webfont` template via `grunt.config('fonts')` and outputting needed `@font-face`s.

If you don't want to declare font-faces in template, you can output there a Sass map with font-faces names via wrapper around `grunt.config('fonts')`, then iterate in your own Sass files based on this Sass map and output necessary font-face declarations.

In any case, Sass will receive already prepared information, as it should happen in proper application architecture. You just import generated file, and Sass should do all the magic based on it's content, not on how many different files you have.",ArmorDarks,dudewad
739,2017-02-06 09:23:31,"@ArmorDarks I'm not sure you fully understand my use case.  Grunt-webfont isn't even interacting directly with SASS in any way. You can forget I even mentioned it, the point is that ""there's an existing sass file or set of files which is not pre-determined"".

At the end of the day, the point was to illustrate that there  _are_ use cases that make this feature valid. It's obvious, though, through answers like yours, that you guys aren't interested in recognizing that fact. I was just trying to help sway the opinion. However, since we community users should look for functionality elsewhere according to the dev team, we will.

Between the time that I wrote my last comment and your reply, I already wrote a webpack script that achieves my desired functionality. It's just a pain to have to do that, when all this could be so easily resolved with a feature in SASS itself... And we'd love you guys for it!",dudewad,ArmorDarks
739,2017-02-06 09:57:39,"@ArmorDarks 
First off, I didn't intend to sound combative/rude if that's how it came off. I'm very appreciative for the work you guys are doing. Love SASS.

A use case, (in this scenario, _my_ use case) is that I have a build system outputting SASS files that are ignorant to what the surrounding ecosystem does/will do/wants. Its just a sass file (or any arbitrary number of them) with some font info in it.

Given that this build system will be leveraged across various implementations, and those implementations configure the build system with a ""settings"" file that will include any arbitrary setup to generate these SASS files, there is no way to predict with accuracy what files will be generated. Nor should we want to!

Basically, all said and done, wouldn't it be convenient to know that the SASS project _does know_ or _is aware_ that there is going to be a pile of files to import from, say, a ""generated"" directory, and that all it cares about is that it should just import those files?

I can think of lots of cases where this would apply outside of fonts, for instance, a dynamically built project that includes components that may or may not need CSS applied to them, etc. This allows for looser-coupling of build steps and a smoother overall build because I don't have to have my build system know anything about the SASS architecture. The build system just has to know to generate some files, and dump them in a folder. SASS, in turn, just knows it needs some files, and to get them from the folder. In the current case, however, I have to have the build system write a specific SASS file to import the additional items because there's no way to do that.

Does that help/make any sense?",dudewad,ArmorDarks
739,2017-02-08 20:26:25,@dudewad Why not emit mixins rather than emitting files that directly include styles? Then you can choose whether and how to include each mixin.,nex3,dudewad
739,2017-02-08 20:32:43,"@nex3 because there is not a predetermined number of files. I'm not sure how your mixin suggestion solves that, because you still have to dynamically include them, and you don't know what the files are/will be.

Lets look at it from a really simple standpoint:

1) A project has a 'generated' directory. This directory may or may not contain files. Could be one, could be ten billion. Doesn't matter.
2) I want to include all of those files.

To pretend like that is not and never will be a valid use case, or like writing tool-specific build script code so that said tool doesn't have to have a feature to do something as simple as a glob/star import is, honestly, confusing me. It's already a proven, effective pattern used in a massive number of libraries. I understand that maybe it's complicated to build but it's not impossible as was already stated by some of the team members on multiple occasions. But as I said above, the team has made it clear that they think this is indeed not a good idea or a useful feature. I, and others in this thread, are trying to warn you against not listening to your users, because that's how platforms fall out of favor.

Totally up to you guys, I respect your decisions, just know that the second another tool beats out SASS in utility, I will switch to it without hesitation. It really is about cost/ease of implementation over anything else, after all.",layton-glympse,nex3
739,2017-02-08 21:15:11,"@layton-glympse When I read you description, different images flashes in my mind, but I can't clearly understand what exactly you're trying to do, thus can't provide best solution for it. Maybe it would be better if you'll demonstrate mock of a project, in which you're facing described issue?

If @nex3 described your issue properly, I'm agreeing with her solution. That's how it should be done in static language. If you can't control imports, control the invocation, and in Sass this done through mixins.

By writing my answers above, I merely tried to say, that maybe you should approach issue from different side, try different architecture. If you will read my first contributions to this issue, you will see that at first I didn't see a way to work with such static imports too. It took me awhile to realise, that in Sass those issues simply have to be treated differently, there are already tools for it. After all, Sass is not the only language, in which imports are completely static (ES6 System imports, hello!). And those languages usually don't have issues with building complex modular applications at all.",ArmorDarks,layton-glympse
739,2017-02-08 21:15:11,"@layton-glympse When I read you description, different images flashes in my mind, but I can't clearly understand what exactly you're trying to do, thus can't provide best solution for it. Maybe it would be better if you'll demonstrate mock of a project, in which you're facing described issue?

If @nex3 described your issue properly, I'm agreeing with her solution. That's how it should be done in static language. If you can't control imports, control the invocation, and in Sass this done through mixins.

By writing my answers above, I merely tried to say, that maybe you should approach issue from different side, try different architecture. If you will read my first contributions to this issue, you will see that at first I didn't see a way to work with such static imports too. It took me awhile to realise, that in Sass those issues simply have to be treated differently, there are already tools for it. After all, Sass is not the only language, in which imports are completely static (ES6 System imports, hello!). And those languages usually don't have issues with building complex modular applications at all.",ArmorDarks,nex3
739,2017-02-09 09:36:32,"@nex3 @ArmorDarks  

> Why not emit mixins rather than emitting files that directly include styles? Then you can choose whether and how to include each mixin.

Because that's not how things work in a well-designed theming / skinning architecture. It simply doesn't work, for reasons I'll try to explain below.

> I can't clearly understand what exactly you're trying to do, thus can't provide best solution for it. Maybe it would be better if you'll demonstrate mock of a project, in which you're facing described issue?

I can't speak for @layton-glympse, but what I expect from a preprocessor language, is the ability to...

1. Assign a value `themename` to a `$theme` variable in a `_properties.scss` file
2. Dynamically import a `${theme}/_properties.scss`  file that overrides or sets the defaults of my framework
3. Dynamically import a `${theme}/_bootstrap.scss` file that describes all the theme-specific files that need to be loaded
4. Dynamically import ANY variable number of `${theme}/${whatever}/_${stuff}.scss` files from `${theme}/_bootstrap.scss` or its descendants

In such an architecture, changing the theme of my framework should be as simple as changing the value of my `$theme` variable, without imposing any restrictions on the architecture of the theme itself.

Loading all of my themes and then determining which one to actually use with a dynamic mixin is simply not an option.

> Then you can just write @import 'generated/fonts' in your hand-authored code and have access to all the generated mixins.

Imagine a library with 1000s of themes for a particular framework. Loading 1000s of themes just to be able to use a single theme is highly inefficient, and imposes all kinds of nastiness, from performance nightmares to maintenance hell, that simply wouldn't exist with dynamic dependencies.

With dynamic dependencies, replacing one theme with another really would be as simple as changing one single variable. Only a single theme would have to be loaded, and adding or removing a theme from the framework would be as simple as adding or removing a folder with that theme. 

> After all, Sass is not the only language, in which imports are completely static (ES6 System imports, hello!).

NodeJS is not exactly a mature environment. On the other hand, browser-side JavaScript has achieved some level of maturity. Not only does browser-side JavaScript allow dynamically loading JS files on demand, but many front-end developers have been doing this for years. Long before [Require.JS](https://github.com/requirejs/requirejs) came to dominate the market, the totally awesome [yepnope](https://github.com/SlexAxton/yepnope.js/) & [LABjs](https://github.com/getify/LABjs) already provided easy-to-use, stable, minimalistic, cross-browser interfaces for the on-demand dynamical loading of any JS file.

All that is irrelevant, though. SCSS is a language used to create CSS layouts, CSS themes & CSS frameworks. What's important, here, is whether there are meaningful use cases for SCSS specifically that require files to be imported dynamically. 

While I would agree that such use cases are probably few and far and between for simple one-use-only CSS layouts, dynamic dependencies become an essential feature once you start building a CSS framework architecture with support for flexible theming. 

Dynamic dependencies are a feature I've been waiting for ever since I decided to re-write [Cascade Framework](http://jslegers.github.io/cascadeframework/) in SASS back in 2014. And because dynamic dependencies are a **core feature** for my particular use case, the lack of this feature in SASS actually has blocked any further development of my framework ever since 2014.",jslegers,layton-glympse
739,2017-02-09 09:36:32,"@nex3 @ArmorDarks  

> Why not emit mixins rather than emitting files that directly include styles? Then you can choose whether and how to include each mixin.

Because that's not how things work in a well-designed theming / skinning architecture. It simply doesn't work, for reasons I'll try to explain below.

> I can't clearly understand what exactly you're trying to do, thus can't provide best solution for it. Maybe it would be better if you'll demonstrate mock of a project, in which you're facing described issue?

I can't speak for @layton-glympse, but what I expect from a preprocessor language, is the ability to...

1. Assign a value `themename` to a `$theme` variable in a `_properties.scss` file
2. Dynamically import a `${theme}/_properties.scss`  file that overrides or sets the defaults of my framework
3. Dynamically import a `${theme}/_bootstrap.scss` file that describes all the theme-specific files that need to be loaded
4. Dynamically import ANY variable number of `${theme}/${whatever}/_${stuff}.scss` files from `${theme}/_bootstrap.scss` or its descendants

In such an architecture, changing the theme of my framework should be as simple as changing the value of my `$theme` variable, without imposing any restrictions on the architecture of the theme itself.

Loading all of my themes and then determining which one to actually use with a dynamic mixin is simply not an option.

> Then you can just write @import 'generated/fonts' in your hand-authored code and have access to all the generated mixins.

Imagine a library with 1000s of themes for a particular framework. Loading 1000s of themes just to be able to use a single theme is highly inefficient, and imposes all kinds of nastiness, from performance nightmares to maintenance hell, that simply wouldn't exist with dynamic dependencies.

With dynamic dependencies, replacing one theme with another really would be as simple as changing one single variable. Only a single theme would have to be loaded, and adding or removing a theme from the framework would be as simple as adding or removing a folder with that theme. 

> After all, Sass is not the only language, in which imports are completely static (ES6 System imports, hello!).

NodeJS is not exactly a mature environment. On the other hand, browser-side JavaScript has achieved some level of maturity. Not only does browser-side JavaScript allow dynamically loading JS files on demand, but many front-end developers have been doing this for years. Long before [Require.JS](https://github.com/requirejs/requirejs) came to dominate the market, the totally awesome [yepnope](https://github.com/SlexAxton/yepnope.js/) & [LABjs](https://github.com/getify/LABjs) already provided easy-to-use, stable, minimalistic, cross-browser interfaces for the on-demand dynamical loading of any JS file.

All that is irrelevant, though. SCSS is a language used to create CSS layouts, CSS themes & CSS frameworks. What's important, here, is whether there are meaningful use cases for SCSS specifically that require files to be imported dynamically. 

While I would agree that such use cases are probably few and far and between for simple one-use-only CSS layouts, dynamic dependencies become an essential feature once you start building a CSS framework architecture with support for flexible theming. 

Dynamic dependencies are a feature I've been waiting for ever since I decided to re-write [Cascade Framework](http://jslegers.github.io/cascadeframework/) in SASS back in 2014. And because dynamic dependencies are a **core feature** for my particular use case, the lack of this feature in SASS actually has blocked any further development of my framework ever since 2014.",jslegers,nex3
739,2017-02-09 09:36:32,"@nex3 @ArmorDarks  

> Why not emit mixins rather than emitting files that directly include styles? Then you can choose whether and how to include each mixin.

Because that's not how things work in a well-designed theming / skinning architecture. It simply doesn't work, for reasons I'll try to explain below.

> I can't clearly understand what exactly you're trying to do, thus can't provide best solution for it. Maybe it would be better if you'll demonstrate mock of a project, in which you're facing described issue?

I can't speak for @layton-glympse, but what I expect from a preprocessor language, is the ability to...

1. Assign a value `themename` to a `$theme` variable in a `_properties.scss` file
2. Dynamically import a `${theme}/_properties.scss`  file that overrides or sets the defaults of my framework
3. Dynamically import a `${theme}/_bootstrap.scss` file that describes all the theme-specific files that need to be loaded
4. Dynamically import ANY variable number of `${theme}/${whatever}/_${stuff}.scss` files from `${theme}/_bootstrap.scss` or its descendants

In such an architecture, changing the theme of my framework should be as simple as changing the value of my `$theme` variable, without imposing any restrictions on the architecture of the theme itself.

Loading all of my themes and then determining which one to actually use with a dynamic mixin is simply not an option.

> Then you can just write @import 'generated/fonts' in your hand-authored code and have access to all the generated mixins.

Imagine a library with 1000s of themes for a particular framework. Loading 1000s of themes just to be able to use a single theme is highly inefficient, and imposes all kinds of nastiness, from performance nightmares to maintenance hell, that simply wouldn't exist with dynamic dependencies.

With dynamic dependencies, replacing one theme with another really would be as simple as changing one single variable. Only a single theme would have to be loaded, and adding or removing a theme from the framework would be as simple as adding or removing a folder with that theme. 

> After all, Sass is not the only language, in which imports are completely static (ES6 System imports, hello!).

NodeJS is not exactly a mature environment. On the other hand, browser-side JavaScript has achieved some level of maturity. Not only does browser-side JavaScript allow dynamically loading JS files on demand, but many front-end developers have been doing this for years. Long before [Require.JS](https://github.com/requirejs/requirejs) came to dominate the market, the totally awesome [yepnope](https://github.com/SlexAxton/yepnope.js/) & [LABjs](https://github.com/getify/LABjs) already provided easy-to-use, stable, minimalistic, cross-browser interfaces for the on-demand dynamical loading of any JS file.

All that is irrelevant, though. SCSS is a language used to create CSS layouts, CSS themes & CSS frameworks. What's important, here, is whether there are meaningful use cases for SCSS specifically that require files to be imported dynamically. 

While I would agree that such use cases are probably few and far and between for simple one-use-only CSS layouts, dynamic dependencies become an essential feature once you start building a CSS framework architecture with support for flexible theming. 

Dynamic dependencies are a feature I've been waiting for ever since I decided to re-write [Cascade Framework](http://jslegers.github.io/cascadeframework/) in SASS back in 2014. And because dynamic dependencies are a **core feature** for my particular use case, the lack of this feature in SASS actually has blocked any further development of my framework ever since 2014.",jslegers,ArmorDarks
739,2017-02-09 11:08:11,"@nex3 I don't think you understood what @layton-glympse is trying to say, but as far as I understand he needs a mechanism to include a file or set of files that are not pre-determined, that is, he doesn't know what files are these in advance, it could be thousands of files, since they are dynamically generated, so he'd like to dynamically import them. He doesn't want SASS to be aware of all these files that COULD be relevant, he just wants to be able to set a variable in a centralized configuration file and let SASS import only the relevant file(s).

Now, as far as I understand, using your approach it would be necessary to know what files are these in advance and manually import them, but how would this replace dynamic imports? The whole point of dynamic imports is that it wouldn't be necessary to do exactly that.

In any case, is this even a matter of lack of use cases at this point? This issue have been open since 2013 and users have been arguing in favor of it since, if you scroll up a little bit, you'll find plenty reasonable use cases, and the fact that this feature is already present in LESS since 2011 is a sign that there may be indeed use cases for it. It would be more helpful for the Dev Team to explain that this feature cannot be implemented because of this or that design problem in the architecture, so that we wouldn't waste our time explaining why and how we would use Dynamic Imports in the hope that we can convince the Dev Team to implement such feature that simply cannot be implemented.",iErik,layton-glympse
739,2017-02-09 11:08:11,"@nex3 I don't think you understood what @layton-glympse is trying to say, but as far as I understand he needs a mechanism to include a file or set of files that are not pre-determined, that is, he doesn't know what files are these in advance, it could be thousands of files, since they are dynamically generated, so he'd like to dynamically import them. He doesn't want SASS to be aware of all these files that COULD be relevant, he just wants to be able to set a variable in a centralized configuration file and let SASS import only the relevant file(s).

Now, as far as I understand, using your approach it would be necessary to know what files are these in advance and manually import them, but how would this replace dynamic imports? The whole point of dynamic imports is that it wouldn't be necessary to do exactly that.

In any case, is this even a matter of lack of use cases at this point? This issue have been open since 2013 and users have been arguing in favor of it since, if you scroll up a little bit, you'll find plenty reasonable use cases, and the fact that this feature is already present in LESS since 2011 is a sign that there may be indeed use cases for it. It would be more helpful for the Dev Team to explain that this feature cannot be implemented because of this or that design problem in the architecture, so that we wouldn't waste our time explaining why and how we would use Dynamic Imports in the hope that we can convince the Dev Team to implement such feature that simply cannot be implemented.",iErik,nex3
739,2017-02-09 11:24:27,"> @nex3 I don't think you understood what @layton-glympse is trying to say, but as far as I understand he needs a mechanism to include a file or set of files that are not pre-determined, that is, he doesn't know what files are these in advance, it could be thousands of files, since they are dynamically generated, so he'd like to dynamically import them. He doesn't want SASS to be aware of all these files that COULD be relevant, he just wants to be able to set a variable in a centralized configuration file and let SASS import only the relevant file(s).

Same for my use case (‚Üí see [my previous post](https://github.com/sass/sass/issues/739#issuecomment-278591776) for details).

It could be 1 file. It could be 1000s of files. And whichever files you load entirely depends on which theme you want to use and how that particular theme is designed.

* Loading all of the theme files from all of the themes would be utter madness when you need just one theme every single time.
* Forcing a simple generic theme with limited features and a giant theme with all the bells & whistles to have the exact same number of files & the exact same folder structure doesn't make any sense either - you want to be able to define this on a per-theme basis - You might even want to be able to define sub-themes and sub-sub-themes if themes become too complex

> In any case, is this even a matter of lack of use cases at this point? This issue have been open since 2013 and users have been arguing in favor of it since, if you scroll up a little bit, you'll find plenty reasonable use cases, and the fact that this feature is already present in LESS since 2011 is a sign that there may be indeed use cases for it.

And even if the number of use cases is minimal... Consider that a single themable framework with just a handful of base themes could serve as the foundation of many tens of thousands of other projects. Imagine the impact if a CSS framework as popular as Bootstrap or Foundation would use dynamic dependencies under the hood.",jslegers,layton-glympse
739,2017-02-09 11:24:27,"> @nex3 I don't think you understood what @layton-glympse is trying to say, but as far as I understand he needs a mechanism to include a file or set of files that are not pre-determined, that is, he doesn't know what files are these in advance, it could be thousands of files, since they are dynamically generated, so he'd like to dynamically import them. He doesn't want SASS to be aware of all these files that COULD be relevant, he just wants to be able to set a variable in a centralized configuration file and let SASS import only the relevant file(s).

Same for my use case (‚Üí see [my previous post](https://github.com/sass/sass/issues/739#issuecomment-278591776) for details).

It could be 1 file. It could be 1000s of files. And whichever files you load entirely depends on which theme you want to use and how that particular theme is designed.

* Loading all of the theme files from all of the themes would be utter madness when you need just one theme every single time.
* Forcing a simple generic theme with limited features and a giant theme with all the bells & whistles to have the exact same number of files & the exact same folder structure doesn't make any sense either - you want to be able to define this on a per-theme basis - You might even want to be able to define sub-themes and sub-sub-themes if themes become too complex

> In any case, is this even a matter of lack of use cases at this point? This issue have been open since 2013 and users have been arguing in favor of it since, if you scroll up a little bit, you'll find plenty reasonable use cases, and the fact that this feature is already present in LESS since 2011 is a sign that there may be indeed use cases for it.

And even if the number of use cases is minimal... Consider that a single themable framework with just a handful of base themes could serve as the foundation of many tens of thousands of other projects. Imagine the impact if a CSS framework as popular as Bootstrap or Foundation would use dynamic dependencies under the hood.",jslegers,nex3
739,2017-02-09 13:57:57,"@jslegers

> NodeJS is not exactly a mature environment. On the other hand, browser-side JavaScript is. Not only does browser-side JavaScript allow dynamically loading JS files on demand, but many front-end developers have been doing this for years. Long before Require.JS came to dominate the market, the totally awesome yepnope & LABjs already provided stable, minimalistic, cross-browser & easy-to-use interfaces for on-demand dynamical loading of any JS file.

I meant that ES2015 imports are static according to specs, and JavaScript isn't the only language in which all imports are completely static for performance reasons and static resolution of dependencies.

> Imagine a library with 1000s of skins for a particular framework. Loading 1000s of skins just to be able to use a single skin is highly inefficient, and imposes all kinds of nastiness, from performance issues to maintenance nightmares, that simply wouldn't exist with dynamic dependencies.

Yes, that's sounds reasonable. However, that's where you need to look at architecture of application from other side. In most cases for complex projects you will already have a builder, which determinates everything. Grunt, Gulp, Webpack, whatever. It's responsibility of this tool to determinate which skin should be used, since it holds the top-level config.  Builder based on provided settings can serve to Sass specific file, like `_index.sass`, which will content import of exactly theme you would like to use and assigned `$gulp-skin` variable for you to use conditionally whenever you need.

However, it would much more appropriate to serve Sass map with parameters of theme via `node-sass` custom function. Then feed that map to your mixin, that forms theme based on provided parameters.

[Check this](https://github.com/LotusTM/Kotsu/blob/master/source/styles/settings/_themes.scss#L13). Not exactly what I've described, since it not served from Grunt (we simply don't need it), but exactly illustrates Sass map that can be used to describe your theme and generate with mixin final styles based on it.

It's just bare skins and bones, pure data. Same as you would do it in any other language ‚Äî deattach implementation (styles) from data (Sass map).

In result you will receive not just obscure, already prepared file with non-reusable styles, but colors and other properties, that can be later reused in other parts of your styles. Well, if you will learn how mentioned [Kotsu](https://github.com/LotusTM/Kotsu) generating themes based on provided parameters, you will suddenly discover, that you even don't need standalone files with themes, just data for them.

@iErik

> I don't think you understood what @layton-glympse is trying to say, but as far as I understand he needs a mechanism to include a file or set of files that are not pre-determined, that is, he doesn't know what files are these in advance, it could be thousands, since they are dynamically generated, so he'd like to dynamically import them. He doesn't want SASS to be aware of all these files that COULD be relevant, he just wants to be able to set a variable in a centralized configuration file and let SASS import only the relevant file(s).

What you're describing here sounds to me like you need globbing, not dynamic imports. That already can be done with `node-sass` ([example](https://github.com/britco/node-sass-globbing)) or even with native Sass ([example]()).

> And even if the number of use cases is minimal... Consider that a single themable framework with just a handful of base themes could serve as the foundation of many tens of thousands of other projects. Imagine the impact if a CSS framework as popular as Bootstrap or Foundation would use dynamic dependencies under the hood.

If we will rely on already built project that might be flawed in it's original design as source of truth, we will only spread the corruption, you know. In other words, just because a lot of frameworks use specific approaches doesn't mean those approaches are proper. Those framework might be forced by environment, lack of tools, lack of people wisdom, dated decisions, etc.

Just get me correct ‚Äî I don't have anything against those projects or that feature. I'm just saying that we should think better before doing something.",ArmorDarks,jslegers
739,2017-02-09 13:57:57,"@jslegers

> NodeJS is not exactly a mature environment. On the other hand, browser-side JavaScript is. Not only does browser-side JavaScript allow dynamically loading JS files on demand, but many front-end developers have been doing this for years. Long before Require.JS came to dominate the market, the totally awesome yepnope & LABjs already provided stable, minimalistic, cross-browser & easy-to-use interfaces for on-demand dynamical loading of any JS file.

I meant that ES2015 imports are static according to specs, and JavaScript isn't the only language in which all imports are completely static for performance reasons and static resolution of dependencies.

> Imagine a library with 1000s of skins for a particular framework. Loading 1000s of skins just to be able to use a single skin is highly inefficient, and imposes all kinds of nastiness, from performance issues to maintenance nightmares, that simply wouldn't exist with dynamic dependencies.

Yes, that's sounds reasonable. However, that's where you need to look at architecture of application from other side. In most cases for complex projects you will already have a builder, which determinates everything. Grunt, Gulp, Webpack, whatever. It's responsibility of this tool to determinate which skin should be used, since it holds the top-level config.  Builder based on provided settings can serve to Sass specific file, like `_index.sass`, which will content import of exactly theme you would like to use and assigned `$gulp-skin` variable for you to use conditionally whenever you need.

However, it would much more appropriate to serve Sass map with parameters of theme via `node-sass` custom function. Then feed that map to your mixin, that forms theme based on provided parameters.

[Check this](https://github.com/LotusTM/Kotsu/blob/master/source/styles/settings/_themes.scss#L13). Not exactly what I've described, since it not served from Grunt (we simply don't need it), but exactly illustrates Sass map that can be used to describe your theme and generate with mixin final styles based on it.

It's just bare skins and bones, pure data. Same as you would do it in any other language ‚Äî deattach implementation (styles) from data (Sass map).

In result you will receive not just obscure, already prepared file with non-reusable styles, but colors and other properties, that can be later reused in other parts of your styles. Well, if you will learn how mentioned [Kotsu](https://github.com/LotusTM/Kotsu) generating themes based on provided parameters, you will suddenly discover, that you even don't need standalone files with themes, just data for them.

@iErik

> I don't think you understood what @layton-glympse is trying to say, but as far as I understand he needs a mechanism to include a file or set of files that are not pre-determined, that is, he doesn't know what files are these in advance, it could be thousands, since they are dynamically generated, so he'd like to dynamically import them. He doesn't want SASS to be aware of all these files that COULD be relevant, he just wants to be able to set a variable in a centralized configuration file and let SASS import only the relevant file(s).

What you're describing here sounds to me like you need globbing, not dynamic imports. That already can be done with `node-sass` ([example](https://github.com/britco/node-sass-globbing)) or even with native Sass ([example]()).

> And even if the number of use cases is minimal... Consider that a single themable framework with just a handful of base themes could serve as the foundation of many tens of thousands of other projects. Imagine the impact if a CSS framework as popular as Bootstrap or Foundation would use dynamic dependencies under the hood.

If we will rely on already built project that might be flawed in it's original design as source of truth, we will only spread the corruption, you know. In other words, just because a lot of frameworks use specific approaches doesn't mean those approaches are proper. Those framework might be forced by environment, lack of tools, lack of people wisdom, dated decisions, etc.

Just get me correct ‚Äî I don't have anything against those projects or that feature. I'm just saying that we should think better before doing something.",ArmorDarks,layton-glympse
739,2017-02-09 13:57:57,"@jslegers

> NodeJS is not exactly a mature environment. On the other hand, browser-side JavaScript is. Not only does browser-side JavaScript allow dynamically loading JS files on demand, but many front-end developers have been doing this for years. Long before Require.JS came to dominate the market, the totally awesome yepnope & LABjs already provided stable, minimalistic, cross-browser & easy-to-use interfaces for on-demand dynamical loading of any JS file.

I meant that ES2015 imports are static according to specs, and JavaScript isn't the only language in which all imports are completely static for performance reasons and static resolution of dependencies.

> Imagine a library with 1000s of skins for a particular framework. Loading 1000s of skins just to be able to use a single skin is highly inefficient, and imposes all kinds of nastiness, from performance issues to maintenance nightmares, that simply wouldn't exist with dynamic dependencies.

Yes, that's sounds reasonable. However, that's where you need to look at architecture of application from other side. In most cases for complex projects you will already have a builder, which determinates everything. Grunt, Gulp, Webpack, whatever. It's responsibility of this tool to determinate which skin should be used, since it holds the top-level config.  Builder based on provided settings can serve to Sass specific file, like `_index.sass`, which will content import of exactly theme you would like to use and assigned `$gulp-skin` variable for you to use conditionally whenever you need.

However, it would much more appropriate to serve Sass map with parameters of theme via `node-sass` custom function. Then feed that map to your mixin, that forms theme based on provided parameters.

[Check this](https://github.com/LotusTM/Kotsu/blob/master/source/styles/settings/_themes.scss#L13). Not exactly what I've described, since it not served from Grunt (we simply don't need it), but exactly illustrates Sass map that can be used to describe your theme and generate with mixin final styles based on it.

It's just bare skins and bones, pure data. Same as you would do it in any other language ‚Äî deattach implementation (styles) from data (Sass map).

In result you will receive not just obscure, already prepared file with non-reusable styles, but colors and other properties, that can be later reused in other parts of your styles. Well, if you will learn how mentioned [Kotsu](https://github.com/LotusTM/Kotsu) generating themes based on provided parameters, you will suddenly discover, that you even don't need standalone files with themes, just data for them.

@iErik

> I don't think you understood what @layton-glympse is trying to say, but as far as I understand he needs a mechanism to include a file or set of files that are not pre-determined, that is, he doesn't know what files are these in advance, it could be thousands, since they are dynamically generated, so he'd like to dynamically import them. He doesn't want SASS to be aware of all these files that COULD be relevant, he just wants to be able to set a variable in a centralized configuration file and let SASS import only the relevant file(s).

What you're describing here sounds to me like you need globbing, not dynamic imports. That already can be done with `node-sass` ([example](https://github.com/britco/node-sass-globbing)) or even with native Sass ([example]()).

> And even if the number of use cases is minimal... Consider that a single themable framework with just a handful of base themes could serve as the foundation of many tens of thousands of other projects. Imagine the impact if a CSS framework as popular as Bootstrap or Foundation would use dynamic dependencies under the hood.

If we will rely on already built project that might be flawed in it's original design as source of truth, we will only spread the corruption, you know. In other words, just because a lot of frameworks use specific approaches doesn't mean those approaches are proper. Those framework might be forced by environment, lack of tools, lack of people wisdom, dated decisions, etc.

Just get me correct ‚Äî I don't have anything against those projects or that feature. I'm just saying that we should think better before doing something.",ArmorDarks,iErik
739,2017-02-09 18:35:07,"@danyalaytekin

> requires that file to be updated whenever the contents of the folder/tree change (this is [a] a repetition of information, given that the filenames are already in the folder/tree, and [b] gets tedious, fast)

You will need to control what you want to pass and import somewhere anyway. In most cases that should be building tool, which will look at your config or existing files, loop over them, and provide to Sass with final output.

The point here that you will need to control it somewhere anyway.

If you just want to grab bunch of files from specific directory, use mentioned above libs for adding globing to Sass. Considering you're saying ""[a] a repetition of information, given that the filenames are already in the folder/tree"" ‚Äî that's exactly what you want.

@jslegers

> What if my theme has multiple modules that I want to turn on / off? Sure, I can just (un)comment an import statement for that as well...

Put them in mixins. Invoke them conditionally.

> but what if those modules have dependencies on other modules? And how many files will I have to configure just to set up a single configurable theme?

yeah, dependencies are quite an issue. Obviously, dependencies resolution in CSS isn't that easy as in JS due to nature of CSS, but current stream of examples and ideas doesn't solve that issue in any form.

So far the only way to make dependencies work is to encapsulate every module in mixin and never output content of imported file with anything, but mixin (this, or additional). That file can be imported on demand in any files, even 100 times, and be rest sure that non of those CSS will end up in final CSS until you will invoke those mixins. Think of it as of imported/required functions in JavaScript. There is no need to set paths with variables for this to work.

Here is example of few files, relaying on same mixins:







I can't say that it's bad way, because it sounds to me familiar ‚Äî as in JS we came from globals to encapsulating everything in functions, exported by modules, same way in Sass we can come to moving everything from global scope to mixins and exporting them.

I won't mind if Sass would have better handling for imports and exports processes. But it has little to do with ability to set import path conditionally.

> The point is to be able to have a single repository with a core framework and a library of themes that can be shared by multiple projects. Every project would use reference that single, shared repository. Parameterization at the project level would determine which themes are loaded and which settings are passed on to core framework + theme.

Hm, still can't see reason for dynamic imports. In simplest form it can be done this way in enduser Sass file:

",ArmorDarks,jslegers
739,2017-02-09 18:35:07,"@danyalaytekin

> requires that file to be updated whenever the contents of the folder/tree change (this is [a] a repetition of information, given that the filenames are already in the folder/tree, and [b] gets tedious, fast)

You will need to control what you want to pass and import somewhere anyway. In most cases that should be building tool, which will look at your config or existing files, loop over them, and provide to Sass with final output.

The point here that you will need to control it somewhere anyway.

If you just want to grab bunch of files from specific directory, use mentioned above libs for adding globing to Sass. Considering you're saying ""[a] a repetition of information, given that the filenames are already in the folder/tree"" ‚Äî that's exactly what you want.

@jslegers

> What if my theme has multiple modules that I want to turn on / off? Sure, I can just (un)comment an import statement for that as well...

Put them in mixins. Invoke them conditionally.

> but what if those modules have dependencies on other modules? And how many files will I have to configure just to set up a single configurable theme?

yeah, dependencies are quite an issue. Obviously, dependencies resolution in CSS isn't that easy as in JS due to nature of CSS, but current stream of examples and ideas doesn't solve that issue in any form.

So far the only way to make dependencies work is to encapsulate every module in mixin and never output content of imported file with anything, but mixin (this, or additional). That file can be imported on demand in any files, even 100 times, and be rest sure that non of those CSS will end up in final CSS until you will invoke those mixins. Think of it as of imported/required functions in JavaScript. There is no need to set paths with variables for this to work.

Here is example of few files, relaying on same mixins:







I can't say that it's bad way, because it sounds to me familiar ‚Äî as in JS we came from globals to encapsulating everything in functions, exported by modules, same way in Sass we can come to moving everything from global scope to mixins and exporting them.

I won't mind if Sass would have better handling for imports and exports processes. But it has little to do with ability to set import path conditionally.

> The point is to be able to have a single repository with a core framework and a library of themes that can be shared by multiple projects. Every project would use reference that single, shared repository. Parameterization at the project level would determine which themes are loaded and which settings are passed on to core framework + theme.

Hm, still can't see reason for dynamic imports. In simplest form it can be done this way in enduser Sass file:

",ArmorDarks,danyalaytekin
739,2017-02-09 18:43:27,"Guys, calm down. Devs are listening. @nex3 replied above, because she follows this issues.

There won't be any major features till Sass will be completely moved to Dart, that it. It takes time, That's not their main job, you know.",ArmorDarks,nex3
739,2017-02-10 10:27:16,"> Sorry I didn't care to read the rest of the discussion but my conclusion is that SASS simply might not be the best choice for projects of that nature, even thought I'd very much prefer to use SASS it seems that when dealing with scenarios like this, LESS might be a better option. And I say that not because I'm trying to undermine the SASS language or the Dev Team, but simply because I think SASS is usually better than other pre-processors and if possible I'd like to see it better, even though the Dev Team seem to completely ignore our arguments. If more than 3 years of discussion did not convince the Dev Team that Dynamic Imports are a very useful feature, I don't think they're going to be convinced now.

> I think part of the problem here is that the dev team is not actually listening to what we're saying.
> 
> It's this simple: There are cases where dynamic imports would be a lovely thing. To say ""your architecture needs to change"" without understanding the spec or scope of the application is... well... hubris. And no, we as users do not want to send over passwords to Jira and Google Docs so you can peruse the entirety of our application architecture to then decide whether or not our use cases are worthy. They are. Trust us. We're your user community. We like your product, and our relationship is based on trust. So please trust us.
> 
> I think we can probably just stop the discussion here, because this is the third or fourth time that I've given the simplest use case I can think of that makes dynamic imports valid, which, IMHO, is all you need to put a feature in the pipe.
> 
>[...]
>
> I still want to thank the SASS team for their hard work in making a great product, and it saddens me that I may eventually end up switching after so many years of loyal evangelism.

I couldn't possibly agree more, with both of these statements!!

> Guys, calm down. Devs are listening. @nex3 replied above, because she follows this issues.

They aren't listening. Multiple people have been arguing ad nauseam why their use case requires dynamic dependencies and all the core devs are doing is trying to convince us we're foolish. That's not listening.

If we tell you that we're tried everything we can think of and we keep ending up getting blocked due to the lack of dynamic dependencies, stop trying to convince us that we're doing something wrong. Just because you don't understand our reasons, that doesn't mean our reasons don't make perfect sense in the context of what we're trying to achieve. Just stop it! You're insulting our intelligence!

> There won't be any major features till Sass will be completely moved to Dart, that it. It takes time, That's not their main job, you know.

Open source is a bitch. Projects that get any attention at all are few and far in between. Maintaining existing projects takes a ridiculous amount of time (that most people simply don't have), and most involved don't get neither any pay nor any recognition / prestige from the hard work they put into open source. Yet, the same rules that apply to other products also apply to open source products : it's either adapt & evolve or wither & die. If you don't listen to your users, your users will leave faster than you can say ""supercalifragilisticexpialidocious""... and you end up having no users at all. 

If the Sass core devs don't listen to what their users want, users will move on to other pre-processor languages where the core devs do listen to what their users want. When users find somewhere else what they've been direly missing in Sass, they will ditch Sass for this other tech just as easily as they ditched jQuery for Angular2 or Zend for Symfony2... or just as easily as they ditched MySpace for Facebook ;-)",jslegers,nex3
739,2017-02-10 23:19:18,"I've talked this over once again with @chriseppstein, and I think we've found a compromise that will largely address the patterns people want here while mitigating my concerns about comprehensibility and static analysis. We won't allow `@import` (or its forthcoming replacement, `@use`) to be used dynamically. Instead, we'll provide a function (I'll call it `load()` for now, but don't take that as final) that will load a file and provide its contents in a form that's accessible to SassScript. In particular, it will return a map with the following keys:

* `""functions""` will be a map from function names to function references (as returned by `get-function()`). It will contain all functions defined in the loaded file.
* `""mixins""` will be the same, but for mixins.
* `""css""` will be a single mixin reference that, when included, emits the CSS output of the loaded file.

This will allow theming systems *et al* to expose their desired APIs and load files at runtime while retaining the ability for users and tools to reason about the top-level scope independently of the actual execution of the code in question.",nex3,chriseppstein
739,2017-02-10 23:31:38,"@nex3 
Much appreciated that you guys gave this some thought/discussion. Very exciting to get an actionable response on this.

Let me see if I understand it straight (I understand that this is a conceptual discussion and subject to huge modification):

This (potentially) new `load()` function will be something we can pass a filepath to, which then returns a map containing functions, mixins, and CSS as _keys_ on a new object instead of injecting them straight into the document wholesale like `@import` does now. That is _very cool_.

If I understand that correctly, though, I'm missing the part where this will be any different conceptually from `@import` in that it likely won't allow wildcard paths, unless you're going to return an array of these maps.

Can you enlighten me as to how this addresses the concept of wildcard imports, where the developer does not know the name of the target file(s)?

If it doesn't, I do see the merit in what you are doing. The thing this _would_ allow us to do is at least choose a predictable naming pattern (i.e. `file0`, `file1`, `file2`, etc) for the unknown files and load them in a loop or something until a load fails?

Okay, cool. It gives us at least a form in which to achieve what one might call semi-dynamic imports, something I would be happy enough with.

Can you fill me in if I'm missing or misunderstanding any of your concept?
",layton-glympse,nex3
733,2013-05-08 19:39:03,"@Symb Which browsers have problems with 3-digit hex values?  I doubt there are any, but if there are, you'd have to go all the way back to the earliest browsers that support CSS (Netscape 4, IE 3 or 4, Opera 4 or 5) to find one.

@bradcater Sass chooses the color format based on the compression setting and makes all colors the same format when possible, regardless of how you originally wrote them.  If you want the 3-digit format, use a more compact setting.
",cimmanon,bradcater
733,2013-05-08 19:39:03,"@Symb Which browsers have problems with 3-digit hex values?  I doubt there are any, but if there are, you'd have to go all the way back to the earliest browsers that support CSS (Netscape 4, IE 3 or 4, Opera 4 or 5) to find one.

@bradcater Sass chooses the color format based on the compression setting and makes all colors the same format when possible, regardless of how you originally wrote them.  If you want the 3-digit format, use a more compact setting.
",cimmanon,Symb
733,2013-05-10 00:26:06,"@cimmanon is correct; the output format for colors doesn't take into account their input format. #363 is tracking this.
",nex3,cimmanon
728,2013-05-10 16:10:57,"Thanks @chriseppstein for taking it here.
",Subash,chriseppstein
727,2013-04-29 12:57:48,"@lunelson, how does Stylus deal with `@add-prop` when functions that are only part of a value? E.g.,


",robwierzbowski,lunelson
727,2013-04-30 06:39:00,"@robwierzbowski 

it's explained on this page, near the bottom: http://learnboost.github.io/stylus/docs/bifs.html. The basic idea is that add-property() is a function which takes two arguments, one for a property name, one for the value(s), and the value argument can also contain functions. It might get hairy if you try to pass a function which also wants to add a property but in theory that could also be handled.

To translate the Stylus example with the imagined syntax we're discussing here and adding a function as value:



would return:



beyond that, you have `current-property` which allows some interesting conditions. In the ""Nib"" library for Stylus for example, the entire processing of linear-gradients, including prefixing and legacy webkit syntax, is done as a function not a mixin, so you simply write `background: linear-gradient(...)` in the same vanilla syntax as CSS but it's processed out to all the additional declarations. It's ""set and forget"" and you don't have to remember (let alone write out) a mixin syntax, it's very nice. Stylus doesn't happen to use it for vendor-prefixing but it would work there too.
",lunelson,robwierzbowski
727,2013-04-30 14:23:31,"A `current-property()` function seems fine to me. We're adding `&` to SassScript and that is basically `current-selector()`.

I agree with @Snugug here. A mixins job is to emit multiple properties. But I think the point here is that a value can be represented differently when it comes to different properties or even for the same property as fallback values. In ruby extensions I accomplished this for gradients by having functions return a special object that a mixin would inspect and decide whether to emit some particular property. Here's that code: https://github.com/chriseppstein/compass/blob/stable/frameworks/compass/stylesheets/compass/css3/_images.scss#L68

And so I wonder if we can find a way to return a value that has a default representation but also has other representations that a mixin could inspect and use. It's less magical than stylus's approach but I think it's keeps the concepts more pure and hence more composable.
",chriseppstein,Snugug
727,2013-04-30 14:56:19,"After reading up on Stylus, it's much closer to programatic language and is comfortable adding a lot of magic (invisible mixins, language defined variables, etc.). Since that's not the philosophy of Sass, and since without them I can't see `add-prop()` being simple or predictable (especially when a function is a single value in a value list), I don't think it's a good fit. 

@chriseppstein, `current-property()` would be awesome. Slightly OT question: does `aspect` take the place of adding [maps](#642) to Sass?
",robwierzbowski,chriseppstein
727,2013-04-30 15:14:42,"I updated my code example, please re-read it if you read it already.

@robwierzbowski re: maps. I had the thought of whether maps make this need go away but decided they didn't. Here's how they're different: Aspects have a default value. This allows them to work with code that doesn't expect aspect values. Additionally, an aspect exists on a complex value (a list or a map) if that complex value has a value within it that has that aspect. And when you extract a particular aspect from a complex value, the values which do not have that aspect simply return their default value.
",chriseppstein,robwierzbowski
727,2013-04-30 16:56:22,"@chriseppstein I'm not sure I understand aspects: is it adding another value to a variable? How is the example above more efficient than a typical rem mixin? @cimmanon's example looks equivalent to me, at least in terms of verbosity.

However I agree that `current-property()` would be nice, and have uses beyond the use-case of adding properties from `@functions`, such as referring to map-names by property-names; though it would require variable-name interpolation which we don't have yet. FWIW, an adaptation of my maps hack from #642, imagining property-to-map reference


",lunelson,chriseppstein
727,2013-04-30 16:56:22,"@chriseppstein I'm not sure I understand aspects: is it adding another value to a variable? How is the example above more efficient than a typical rem mixin? @cimmanon's example looks equivalent to me, at least in terms of verbosity.

However I agree that `current-property()` would be nice, and have uses beyond the use-case of adding properties from `@functions`, such as referring to map-names by property-names; though it would require variable-name interpolation which we don't have yet. FWIW, an adaptation of my maps hack from #642, imagining property-to-map reference


",lunelson,cimmanon
727,2013-04-30 17:55:11,"@cimmanon I agree with you about side effects. Although functions and mixins can have side effects when they change global variables, I want to keep this to a minimum. The aspect functionality is _already_ in use in compass to make the style of mixins in #366 actually viable. I think the code you wrote is better for this particular example. But when you look at what compass has done with this feature concept in the css3 mixins I think the justification for it is clear. This just gives first class status to that pattern so that sass users can do it without resorting to writing ruby code.
",chriseppstein,cimmanon
727,2013-04-30 17:57:31,"@lunelson It's not adding another value to a variable, it would be adding another representation of a value to the value referenced by a variable.
",chriseppstein,lunelson
727,2013-05-10 02:48:37,"@nex3 I understand your initial reaction to this. Happy to brainstorm to see if we can come up with something better. 
",chriseppstein,nex3
727,2013-06-07 09:45:25,"@chriseppstein re: your comment above, that `&` == `current-selector()`, are you suggesting that `current-property()` might already be possible in ruby? Would you be willing to shed some light on how it would work? If the SassScript methods for it already exist I'd _really_ like to implement it in my own code.

As for core Sass, I understand all the objections above but personally regard functions and mixins as not fundamentally different. Notably, it is already possible to add a property from a function, you just can't put it on a new line. What's missing here is only an automatic way to retrieve the name of the current property, and possibly also a boolean of whether or not you are in a property declaration, as opposed to a variable declaration:




",lunelson,chriseppstein
727,2013-06-08 22:31:29,"@lunelson no, there's no way for that to work at this time.
",chriseppstein,lunelson
727,2013-07-07 21:58:22,"@chriseppstein Re: your suggestion for aspects, I added a function to Team Sass's [Jacket](https://github.com/Team-Sass/jacket) that does something similar. Could be useful if people want to build things with aspect-like functionality until something is worked out on the Sass level.
",robwierzbowski,chriseppstein
723,2013-04-24 19:28:11,"@Somebi thta's actually incorrect. You can do something very simple like the following:



And so on and so forth for each of your inputs. See als [Sass Number Operations](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#number_operations)
",Snugug,Somebi
719,2013-04-29 10:56:57,"@athaeryn, your fork breaks the `--sourcemap` option.
",mgol,athaeryn
719,2013-05-03 15:08:18,"@jaredbeck the downgrading worked for me , Thanks for the Tip :+1: 
",ya7ya,jaredbeck
719,2013-05-07 07:19:49,"@jaredbeck thanks a lot !
",18601673727,jaredbeck
719,2013-05-23 14:30:11,"Our listen dependency should be declared in our gemspec so that the version can be resolved correctly by tools like bundler. Also, @nex3, what is needed to support the more recent API? Is there an issue tracking that?
",chriseppstein,nex3
719,2013-05-23 21:13:17,"bea480bd6b70ffd8f41ec75dfecb3e922d2ebe85, which closed the issue, makes sure Sass stable won't load listen >= 1.0. 47381156165c00870099b227d675b6b4f64dd7dc stops bundling it on master, and declares a version constraint that excludes listen >= 1.0. There should be no way to use the wrong listen version now.

@chriseppstein guard/listen#112 has been fixed, but guard/listen#111 is still blocking our use of listen.
",nex3,chriseppstein
719,2013-12-12 14:03:40,"@bennidhamma Yes. See README for grunt-contrib-sass (or grunt-contrib-compass if you also use compass).
",mgol,bennidhamma
719,2013-12-12 14:06:18,"OK will do thanks guys.
On Dec 12, 2013 8:03 AM, ""Micha≈Ç Go≈Çƒôbiowski"" notifications@github.com
wrote:

> @bennidhamma https://github.com/bennidhamma Yes. See README for
> grunt-contrib-sass (or grunt-contrib-compass if you also use compass).
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/719#issuecomment-30424016
> .
",bennidhamma,bennidhamma
713,2013-05-31 20:53:19,"@ryanburnette If you're getting invalid output, that's a different issue. It's hard to tell what's going on from those screenshots, though. Can you open a new issue with minimal, non-screenshot examples of input that produces invalid output?
",nex3,ryanburnette
713,2013-05-31 20:54:34,"@nex3 Sure I'd be happy to. I'll ping you in the initial comment.
",ryanburnette,nex3
713,2013-06-12 04:47:18,"@nex3 As requested, I've updated the commit to retain the comments when converting from sass to scss, rather than throwing them away. I've set the type on the (previously discarded) comments to `:quiet`. I'm not sure if that's correct or a mistake: let me know if it's important to support the `/*! loud comment */` type for this use case.
",fblee,nex3
712,2013-04-16 14:51:17,"@cimmanon On compass website there's only a tutorial explaining how to 'create' extensions. Google showed me some lists but mostly are extensions for grid, vendor stuff and else ( https://github.com/chriseppstein/compass/wiki/Compass-Plugins , http://rubygems.org/search?query=compass ). Found some ones for bootstrap but as I said, ours are based on so can't use the plugin for the raw one.

Nothing related to external import it seems.

I believe you might be pointing me to actually create one, but I have zero knowledge of Ruby to actually write an extension myself so I'll just give up on the idea (for now, until I finish learning what I'm already studying. Too bad can't write extensions with shell/bash or PHP lol). 

Thanks for pointing the extensions, too bad seems noone made anything near.
",RaphaelDDL,cimmanon
706,2013-04-18 20:59:15,"@lolmaus as @robwierzbowski pointed out, adding an extra set of parentheses doesn't create an extra level of list nesting. Parentheses aren't list delimiters; they just group order of operations. `($a)` is always the same as `$a`.

> This definitely seems like a bug though ‚Äî no matter what you do with a single dimensional list, even if it's explicitly space separated, `append()` with a comma separator turns it into a comma separated list.
> 
> 

This is the expected behavior. From the [documentation of `append`](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#append-instance_method):

> If [the `$separator` argument] is `comma` or `space`, that is always the separator; if [it] is `auto` (the default), the separator is the same as that used by the list.
",nex3,robwierzbowski
706,2013-04-18 20:59:15,"@lolmaus as @robwierzbowski pointed out, adding an extra set of parentheses doesn't create an extra level of list nesting. Parentheses aren't list delimiters; they just group order of operations. `($a)` is always the same as `$a`.

> This definitely seems like a bug though ‚Äî no matter what you do with a single dimensional list, even if it's explicitly space separated, `append()` with a comma separator turns it into a comma separated list.
> 
> 

This is the expected behavior. From the [documentation of `append`](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#append-instance_method):

> If [the `$separator` argument] is `comma` or `space`, that is always the separator; if [it] is `auto` (the default), the separator is the same as that used by the list.
",nex3,lolmaus
706,2013-04-18 21:13:55,"@nex3 You're right, this is the documented behavior. I don't mind the way things work, but in general I think people are surprised when append transforms existing list separators.

Correct me if I'm wrong, but I believe parenthesis can be list delimiters.


",robwierzbowski,nex3
706,2013-04-18 21:27:17,"> @nex3 You're right, this is the documented behavior. I don't mind the way things work, but in general I think people are surprised when append transforms existing list separators.

The returned list has to have a separator. If you want it to keep the old separator, don't pass an argument to `$separator`. If you're passing `$separator`, I don't understand how it's unexpected for the returned list to have that separator. What result would you expect for  `append(1 2, 3, $separator: comma)` other than `1, 2, 3`?

> Correct me if I'm wrong, but I believe parenthesis can be list delimiters.
> 
> 

That's just using them for expression grouping. You're grouping the expressions `1 2` and `3 4 5` so that the inner list-separation operators are performed before the outer list-separation operator. It's the same principle behind `(1 + 2) * (3 + 4 + 5)`.
",nex3,nex3
706,2013-04-18 21:45:00,"Expression grouping: good to know. 

When I first started manipulating lists in Sass I expected the same thing as @lolmaus. A space-list appended to a space-list with a comma would equal a comma-list of space-lists.



The confusion occurs when people think `$separator` is the separator for this append only, not the separator for the entire resulting list. Creating multidimensional sass lists by switching from comma separators to space separators puts you in that mindset. You assume that append is working more like a serial string constructor: ""append with a comma"", ""append with a space"", ""append with whatever separator the list is using"".

To re-iterate, I'm fine with the current behavior.
",robwierzbowski,lolmaus
701,2013-04-17 23:04:29,"Thanks, @nex3. Ruby beginner.
",robwierzbowski,nex3
695,2013-03-22 20:08:47,"You make a pretty compelling case for the utility of some of these warnings. That said, I still don't like the idea of warnings that make the code less readable, like the warnings for `!:foo` and to some degree uninitialized instance variables (although the `@throw_err` issue is worrisome).

I'll go through the individual commits and leave review comments. Once those are addressed, I'll merge in everything other than the literal-in-conditional and uninitialized-ivars. I'll fix the `@throw_err` thing myself.

Thanks for the PR, @tenderlove.
",nex3,tenderlove
695,2013-03-22 21:28:19,"> You make a pretty compelling case for the utility of some of these warnings. That said, I still don't like the idea of > warnings that make the code less readable, like the warnings for !:foo and to some degree uninitialized instance variables (although the @throw_err issue is worrisome).

I prefer my libraries to run warning free so that app developers are free to make the choice to use `-w` or not, but I definitely see where you're coming from.  `-w` helps me track down bugs (like some of these) and it's nice to have the option to use it.

> I'll go through the individual commits and leave review comments. Once those are addressed, I'll merge in everything other than the literal-in-conditional and uninitialized-ivars. I'll fix the @throw_err thing myself.

Awesome, thank you! :smile:

> Thanks for the PR, @tenderlove.

No problem, I'm glad to help out.  I've pushed a commit that fixes all the stuff you commented on except for the circular require issue.  If you feel strongly about that one, then I'll change it as well.

Thanks for your time!
",tenderlove,tenderlove
694,2013-03-22 01:10:30,"@Darkwing371 you need to start command prompt with ruby and type `sass -v` and `ruby -v`
![screenshot 22](https://f.cloud.github.com/assets/1824291/288946/47239920-928d-11e2-995f-b7eb93e951dd.png)

![screenshot 21](https://f.cloud.github.com/assets/1824291/288943/2c0c12f2-928d-11e2-9e2a-7527762bb792.png)
",atomicpages,Darkwing371
694,2013-03-22 01:19:39,"Nope ‚Äì Scout is extremly ""straight forward"" concerning user interface. ^^ No About.

@atomicpages: sorry, but I use Scout ‚Äì I don‚Äôt have what you suggest.

BUT: I looked inside of the Scout directory itself, and what‚Äôs inside:

These gems are installed with Scout:

![gems](https://f.cloud.github.com/assets/3890213/288972/42b6e652-928e-11e2-91f2-420fb79ab01d.png)

We see I have Sass 3.2.1.

And I have a ""jruby-complete.jar"", but I don‚Äôt know where I could possibly find a file, that tells the version number:

![jruby](https://f.cloud.github.com/assets/3890213/288979/899032f4-928e-11e2-9ebd-d3f572f45040.png)

Do one of you?

THX!
",Darkwing371,atomicpages
694,2013-03-22 01:33:23,"I can't reproduce this on Sass 3.2.1 on either JRuby 1.7.2 or JRuby 1.6.7.2. It's possible this is specific to Windows, specific to a version of JRuby that @Darkwing371 has but I didn't try, or specific to Scout.

I'm going to guess that the problem is with Scout, since I haven't heard any reports of it happening with Sass alone, I can't reproduce it personally, and it seems to be happening frequently with Scout. As such, I'm closing this issue for now. If someone can reproduce this using Sass alone, I'll re-open.
",nex3,Darkwing371
691,2013-03-27 17:27:53,"Thanks @robwierzbowski: Yea, there are various workarounds, they're just less intuitive. I don't know how high of a priority a native implementation would be, but it'd still be nice to see.
",northborndesign,robwierzbowski
691,2013-07-17 16:03:49,"The flexibility in the version @chriseppstein posted would be great. As noted; sure, it's easy enough to do _most_ things by hand, but the brevity afforded by some native support ( _not to mention the flexibility of something like `by` in this case_ ) would be more than welcomed ( _and leveraged_ ) I'm sure.
",northborndesign,chriseppstein
691,2013-07-19 14:33:31,"@nex3: If you're going to use the logic that going by 2 is easy to do by hand, going by -1 should be easy enough...



I think that adding some sort of extension to change the step would be a good thing.
",Undeterminant,nex3
691,2013-09-17 06:58:12,"I added a PR for implementing a decrementing loop (`@for $i from 10 to 1` as @nex3 suggested). Sorry I couldn't get hub to add the PR to the issue directly, had a lot of trouble with it - seems there are some problems with Github's new 2FA.
",robinroestenburg,nex3
690,2013-03-23 00:20:42,"@robwierzbowski Globbing won't really work with a module system though. Modules should have a single entry point where they 'export' what consumers need.
",anthonyshort,robwierzbowski
690,2013-03-23 05:12:14,"@anthonyshort You're totally right. Took me a min to get my head around it. 
",robwierzbowski,anthonyshort
690,2014-11-24 03:35:54,"+1 in general. Coming to Sass I kinda expected this feature to already be implemented and thought I had discovered a bug.

@jslegers -1 
If you allow customizing the name of the index file, you'll end up with incompatible vendor packages. If vendor A settles for `_module.s[ac]ss`, but vendor B goes with `_entry-point.s[ac]ss` and the user (you) decides to use `_index.s[ac]ss`, they won't be able to use any of the vendor's packages/modules.
Besides that, there is no such thing as a config file. You'd either have to mingle this config into your Sass files (very ugly!) or pass it as an option to the compiler (not much less ugly).

Sass should decide which name to use to prevent this mess. I recommend using `_module-index.s[ac]ss` or `_import-index.s[ac]ss`, depending on wether or not this gets implemented in dependence of the module feature. The name is expressive and the risk of already having partials named like that is fairly low.

@chriseppstein I recommend getting this in before the module feature, as this is a low-level feature in the language. It's virtually nothing different than a macro. The `@import ""some/directory""` statement should be availabe, without having to use higher-level concepts such as modules.

I'm highly anticipating this feature and would love to see it before the next major version update, especially in libsass, as that's what I'm using! :)

As soon as the core contributors can settle on a name or chain of names (look for xyz, if not found for abc, if not found for ... - however I discourage this), this rather ""trivial"" patch could be implemented in libsass and would be available to thousands of Node.js users in an instant.
",buschtoens,jslegers
690,2014-11-24 03:35:54,"+1 in general. Coming to Sass I kinda expected this feature to already be implemented and thought I had discovered a bug.

@jslegers -1 
If you allow customizing the name of the index file, you'll end up with incompatible vendor packages. If vendor A settles for `_module.s[ac]ss`, but vendor B goes with `_entry-point.s[ac]ss` and the user (you) decides to use `_index.s[ac]ss`, they won't be able to use any of the vendor's packages/modules.
Besides that, there is no such thing as a config file. You'd either have to mingle this config into your Sass files (very ugly!) or pass it as an option to the compiler (not much less ugly).

Sass should decide which name to use to prevent this mess. I recommend using `_module-index.s[ac]ss` or `_import-index.s[ac]ss`, depending on wether or not this gets implemented in dependence of the module feature. The name is expressive and the risk of already having partials named like that is fairly low.

@chriseppstein I recommend getting this in before the module feature, as this is a low-level feature in the language. It's virtually nothing different than a macro. The `@import ""some/directory""` statement should be availabe, without having to use higher-level concepts such as modules.

I'm highly anticipating this feature and would love to see it before the next major version update, especially in libsass, as that's what I'm using! :)

As soon as the core contributors can settle on a name or chain of names (look for xyz, if not found for abc, if not found for ... - however I discourage this), this rather ""trivial"" patch could be implemented in libsass and would be available to thousands of Node.js users in an instant.
",buschtoens,chriseppstein
690,2016-01-01 13:37:55,"@milesj If you're using Node-Sass, both [Eyeglass](https://github.com/sass-eyeglass/eyeglass) and [Sassport](https://github.com/davidkpiano/sassport) support the automatic resolving of `index.sass` (or `index.scss`, `_index.sass`, `_index.scss`) from imports, and you might find that to be a good solution in the meantime.
",davidkpiano,milesj
687,2015-01-16 21:27:39,"@indrekpaas that requires knowledge of the semantics of the `font-family` property, and so isn't the sort of thing we'd do.
",nex3,indrekpaas
684,2013-03-22 22:08:44,"@nex3 I want to remove the need for Ruby in the modular scale extension. While CodeKit, Mixture, and other tools do support extensions, the process is far too complex for a significant portion of that audience. Distributing Ruby extensions via Bower is also problematic.

to be clear, `pow(5px, 2) = 25px` and `pow(5px, 2.5) = 55.901699437px`. Your example would result in square pixels.  I have found half units to be useful when setting type on an exponential(modular) scale and the scale moves too quickly in that area.
",scottkellum,nex3
684,2013-03-22 22:32:00,"> @nex3 I want to remove the need for Ruby in the modular scale extension. While CodeKit, Mixture, and other tools do support extensions, the process is far too complex for a significant portion of that audience. Distributing Ruby extensions via Bower is also problematic.

What makes this so difficult? Ruby-based extensions are never going to be completely avoidable for complex operations. I'd like to make them easier to use rather than essentially unusable.

> `pow(5px, 2) = 25px`
> 
> Your example would result in square pixels.

These two statements seem contradictory.

> I have found half units to be useful when setting type on an exponential(modular) scale and the scale moves too quickly in that area.

What do you mean by ""half units"" and ""the scale moves too quickly""?
",nex3,nex3
684,2013-03-22 23:31:23,"That's reasonable. @scottkellum, want to collab on a Sassy Math package?
",robwierzbowski,scottkellum
684,2013-03-22 23:35:43,"@robwierzbowski Kinda like https://github.com/scottkellum/sassy-math :tongue: 
If we're missing something, happy to add more.
",Snugug,robwierzbowski
684,2014-12-01 15:55:07,"I was just working on the exact same thing @Snugug. At some point an x^2.4 was needed for almost all colors in that calculation. Using the Sass-native `pow()` function from https://github.com/terkel/mathsass 10 times resulted in a serious slowdown in compile speed. This was the only Sass-implementation I was able to find for decimal exponents.

My purpose with this was automatic color adjustment to ensure AA-compatible color contrasts. The contrast-calculating function was the one doing the ^2.4.

I managed to cook up something a bit faster, but still very slow:



x^1/5 = the fifth root of x.

I proceded to implement an nth-root-function: (note the hard-coded $guess!)


",torkiljohnsen,Snugug
684,2014-12-02 12:58:30,"FWIW I think we should keep this discussion focused on arguments for or against the Sass feature in question (native `pow()` function). Examples of use cases are helpful arguments for this but details and work arounds to implement specific use cases are likely not helping the debate here.

@torkiljohnsen The [Ruby dependency thread on sass-a11y](https://github.com/at-import/sass-a11y/issues/3) may be a better place for these workaround suggestions.

To sum up arguments for a native `pow()` function in Sass:
- Unable to do complex modular scale calculations without this.
- Helpful for color logic in comparing values.
- workarounds are dependent on rubysass or have a negative impact on performance.
- The [code to implement this in rubysass is already written](https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/math.rb#L89-L95).
- [All the things Ana Tudor makes on CodePen](http://codepen.io/thebabydino/).
",scottkellum,torkiljohnsen
684,2015-03-24 23:42:50,":+1:

I also want to use decimals within `pow` for a modular scale lib I'm working on.

@jakob-e makes some pretty compelling arguments as well.

It's goofy Sass doesn't support math.
",corysimmons,jakob-e
684,2015-03-25 00:42:32,"@corysimmons This is the closest I can get: https://gist.github.com/davidkpiano/ad6e6771df050ff3727f
",davidkpiano,corysimmons
684,2015-03-25 01:16:06,"@davidkpiano So `math-pow(12, 3.4)` returns `4668.92127` without having to get Compass and all that stuff involved??
",corysimmons,davidkpiano
684,2015-03-25 01:32:07,"@corysimmons That's correct. No dependencies. Gotta love [Maclaurin series](http://mathworld.wolfram.com/MaclaurinSeries.html) :smile: 
",davidkpiano,corysimmons
684,2015-03-25 09:01:13,"What @jakob-e said. Look to Less.
",torkiljohnsen,jakob-e
684,2015-03-25 09:02:23,"How is the performance @davidkpiano? That's been my main obstacle so far.
",torkiljohnsen,davidkpiano
684,2015-03-25 10:43:59,"@torkiljohnsen performance is a problem due to the many (slow) iterations. You can gain a little
using memoization (if you run the same calculations many times). Here is a simple [example](http://sassmeister.com/gist/85669d248f084318a69c) based on [mathsass](https://github.com/terkel/). But as stated IMO math is expected in any languages and not having a native method causes tool builders to include their own different versions and after import it becomes mirky which is used (at least to me ;-). 

This is my shortlist of what I would like to see:
- pow()
- sqrt()
- sin()
- asin()
- cos()
- acos()
- tan()
- atan()

.. and also a couple of constants:
- E()  =>  2.718281828459045
- PI() =>  3.141592653589793
- PHI()=>   1.618033988749894
- LN2()=>   0.693147180559945
- SQRT2() => 1.414213562373095
",jakob-e,torkiljohnsen
684,2015-03-25 10:47:06,"@jakob-e Agreed^1000. There should ideally be _one_, correct implementation of `pow()`. Having everyone and their grandmother implement their own versions, with perhaps accuracy tradeoffs for extra speed, is not ideal. 

Math is expected in any language.
",torkiljohnsen,jakob-e
684,2015-03-25 11:00:33,"I realize a conversation I had with @nex3 at SassConf about this somehow didn't make it in to this thread.

She said that she would be much more likely to be OK with more Sass-land functions (including a full math package) once #1094 landed and they could be bundled as optional libraries someone could pull in. Actually, on second read, she seems to mention it [in this commend above](https://github.com/sass/sass/issues/684#issuecomment-15326443). Either way, right now there is a very stable Ruby implementation of advanced math functions, and now that custom functions has landed in `node-sass`, expect one for that too.
",Snugug,nex3
684,2015-03-25 11:20:33,"@corysimmons Namespaced imports in that issue.
",Snugug,corysimmons
684,2015-03-25 12:15:52,"@jakob-e Oddly enough, the (undocumented) functions `pi()` and `e()` exist in Ruby Sass, which return the respective constants. I can't really remember how I stumbled upon those.


",davidkpiano,jakob-e
684,2015-03-25 12:19:04,"@Snugug @nex3 I understand that Sass can easily be extended with Ruby, as a [lib extension](https://github.com/sass/libsass/pull/919), or through [Eyeglass](https://github.com/sass-eyeglass/eyeglass). However I think the argument this thread is trying to make is that this is important as a core feature of the Sass spec. There are environments where deep level Sass extensions are difficult and they dramatically increase the complexity of installing and distributing code.
",scottkellum,Snugug
684,2015-03-25 12:19:04,"@Snugug @nex3 I understand that Sass can easily be extended with Ruby, as a [lib extension](https://github.com/sass/libsass/pull/919), or through [Eyeglass](https://github.com/sass-eyeglass/eyeglass). However I think the argument this thread is trying to make is that this is important as a core feature of the Sass spec. There are environments where deep level Sass extensions are difficult and they dramatically increase the complexity of installing and distributing code.
",scottkellum,nex3
684,2015-03-25 12:20:52,"@davidkpiano [You sure that isn‚Äôt from Compass](http://compass-style.org/reference/compass/helpers/math/)?
",scottkellum,davidkpiano
684,2015-03-25 12:29:38,"@scottkellum EDIT: Apparently Compass passes functions even without being imported.
",davidkpiano,scottkellum
684,2015-03-25 12:32:09,"@davidkpiano Yeah, Sassmeister and Codepen both use Compass.

EDIT: It doesn‚Äôt matter if you import Compass, Ruby functions are passed through without imports. If you are compiling your Sass with Compass then all the Ruby extensions are available by default.
",scottkellum,davidkpiano
684,2015-03-25 13:54:07,"@scottkellum agreed, but until it's available, there are fairly easy to use plugin implementations.

@corysimmons Take a read of that thread. It's a total re-write of Sass's import system.
",Snugug,corysimmons
684,2015-03-25 13:54:07,"@scottkellum agreed, but until it's available, there are fairly easy to use plugin implementations.

@corysimmons Take a read of that thread. It's a total re-write of Sass's import system.
",Snugug,scottkellum
684,2015-03-25 14:08:18,"I read it, and a few of the linked threads, still seemed like it was just referring to how it imports Sass files, not exposing Ruby functions. I'm probably stupid - been up all night.

I'd still agree with @scottkellum that core math functions (like support for exponents) should probably be part of Sass core - especially if it's going to take another year or so for the import system to get rewrote.

You can always pull core stuff out to modules once the import-rewrite PR goes through, so even if you were just to add these math functions in now, and then in 2-3 years when this goes through you could just take them out (along with a bunch of other stuff to make Sass more modular).
",corysimmons,scottkellum
684,2015-03-25 14:10:08,"The idea is, once namespacing is available, if I understood @nex3 correctly, is that more core functions could be shipped as optional imports so as to not pollute the namespace.
",Snugug,nex3
684,2015-03-26 11:04:34,"@scottkellum IMO you should keep the syntax as close to ""basic front end"" (HTML,CSS,JS) as possible ‚Äì why pow($base, $exponent) is the better choice (and why ^ (XOR) should not be used either).



**PS**. in relation to my suggested constant functions ‚Äì if/when namespaces becomes available I picture  them looking something like this math.$LN2 or @math.$LN2 or... but that's another story :)
",jakob-e,scottkellum
684,2016-03-16 20:52:51,"@corysimmons No, 3 years to come up with a good, solid spec and implementation of namespacing and modules, while also handling all the other bugs and improvements that a popular living project like Sass generates.

Being rude can feel a little good in the moment, but it's never polite, and it's a major contributor to project-maintainer burnout. Next time you feel the need to leave a comment while annoyed, please consider waiting a while to cool down, and if you still feel like being a little rude, consider not posting at all.
",tabatkins,corysimmons
680,2013-04-27 18:16:30,"@hasft I just went out on a limb and followed the directions that the terminal presented to me and now everything works. 
",marclarr,hasft
679,2013-03-08 22:56:14,"I just finished coding some complex list logic in Sass, and I think the current behavior works well. My experience:

Single items work great with Sass list functions:



So manipulating single items as if they were lists or list parts is no problem.

If single list items stay typed as lists you'd have to unwrap them before performing any logic or operations on them (e.g., `>` and `<` comparison, math, concatenation). The current code (which I used quite a bit):



would have to become 



Not the end of the world, but clunky, verbose and less enjoyable all around.

Strong typing seems a bit much for Sass. In general Sass is programming language lite ‚Äî just a bit of logic, a few functions, see what you can build. And I love that about it.

@myakura, I'm sure I missed situations where single list items are useful. What was your use case?

If you're curious, here's the [extension](https://github.com/robwierzbowski/breakpoint/tree/2.x.x-parens/stylesheets) I was working on, and here's a [partial with a lot of list handling and manipulation](https://github.com/robwierzbowski/breakpoint/blob/2.x.x-parens/stylesheets/breakpoint/_parse.scss).
",robwierzbowski,myakura
679,2013-03-09 01:38:45,"Off topic @StefanoRausch: 

My function needed to return one deep nested lists, not entirely flattened (e.g., from `(one two) ((three four) (five six))` to `(one two), (three four), (five six)`. Thanks for reading the code, and if you want to chat more hit me up on the repo issue queue or twitter.
",robwierzbowski,StefanoRausch
679,2013-03-09 01:44:46,"@nex3, that's the case I was missing. I got around that exact situation by using and testing for comma separated lists at points in my code, but it was a bit hackey.
",robwierzbowski,nex3
677,2013-03-08 09:26:17,"Thank you for fixing this @nex3 
",lukearmstrong,nex3
671,2016-06-29 23:27:05,"@danawoodman It's impossible for Sass to know the difference between the selector `.test color red` and `.test div a` without creating a whitelist of all possible html elements. If we did that, we would have forward compatibility issues if a new html element is added... also Sass is designed to work with arbitrary xml document styling (as is CSS) so it's basically impossible to know what elements are legal names and decide if what we're looking at is a selector or a malformed property.
",chriseppstein,danawoodman
665,2014-03-13 13:19:13,"@borodean ![meme](http://i.memeful.com/memes/d6KenVw/Joker-Mind-Loss.jpg)
",lolmaus,borodean
665,2014-03-13 13:21:45,"@lolmaus Joker could have been right if unquoted key names were not technically allowed.
",borodean,lolmaus
665,2014-03-13 13:37:15,"@borodean, well, it's technically allowed to shoot yourself in the foot. :)

Seriously though (pun not intended), it's a matter of understanding how the Sass parser interprets code. It tries to treat an item as a color before trying to treat it as a string.

It's just an unfortunate thing that every Sass newbie stumbles upon. But changing the way it works will break most existing code, so @nex3 will never go for that. So just always keep it in mind and you're good to go.

As for creating a special treatment for key names in lists, special cases are generally to be avoided. It would increase parser complexity and contribute to ambiguity. On the one hand, it will encourage newbies not to quote color-like strings. On the other hand, it will produce unexpected results when an actual color is used as a key (hardly a good practice, but still feasible).
",lolmaus,nex3
665,2014-03-13 13:37:15,"@borodean, well, it's technically allowed to shoot yourself in the foot. :)

Seriously though (pun not intended), it's a matter of understanding how the Sass parser interprets code. It tries to treat an item as a color before trying to treat it as a string.

It's just an unfortunate thing that every Sass newbie stumbles upon. But changing the way it works will break most existing code, so @nex3 will never go for that. So just always keep it in mind and you're good to go.

As for creating a special treatment for key names in lists, special cases are generally to be avoided. It would increase parser complexity and contribute to ambiguity. On the one hand, it will encourage newbies not to quote color-like strings. On the other hand, it will produce unexpected results when an actual color is used as a key (hardly a good practice, but still feasible).
",lolmaus,borodean
659,2014-10-22 12:36:24,"@lunelson Thanks for the test. Seems like I haven't tested this with leading zero values. Good to know.
",drublic,lunelson
659,2015-01-29 18:50:59,"Thanks @andrewgrewell!
",williamboman,andrewgrewell
659,2015-02-13 09:51:48,"@andrewgrewell, you've just saved my day. Thanks a lot!
",clockwise-dwarf,andrewgrewell
659,2015-03-12 03:37:50,"Thank you so much, @andrewgrewell. I scoured the Interwebs for this solution, after banging my head for a long time. I knew there was a solution. Cheers.
",brentdanley,andrewgrewell
659,2015-06-19 10:02:15,"We are facing this issue in Font Awesome

I just noticed that suggested solution does not work for all sass implementations

E.g, with @andrewgrewell 's approach:

Input:



Output:
http://sassmeister.com/gist/d484e00fe9243d4ba0c8 



## 

http://jsfiddle.net/tagliala/s4xh54k3/



@kaelig 's approach doesn't work at all on jsfiddle

Refers to https://github.com/FortAwesome/Font-Awesome/pull/6728
",tagliala,kaelig
659,2015-06-19 10:02:15,"We are facing this issue in Font Awesome

I just noticed that suggested solution does not work for all sass implementations

E.g, with @andrewgrewell 's approach:

Input:



Output:
http://sassmeister.com/gist/d484e00fe9243d4ba0c8 



## 

http://jsfiddle.net/tagliala/s4xh54k3/



@kaelig 's approach doesn't work at all on jsfiddle

Refers to https://github.com/FortAwesome/Font-Awesome/pull/6728
",tagliala,andrewgrewell
659,2015-07-01 12:02:38,"@andrewgrewell - thanks, you saved my day ! :)
",Anydog,andrewgrewell
659,2015-08-20 23:52:03,"@andrewgrewell saved the day!
",cesarzeppini,andrewgrewell
659,2016-05-24 23:10:10,"thank you for the update,@f3ndot 
",seeliang,f3ndot
652,2013-02-25 19:13:54,"@mxcl That's not fair. @nex3 explained the behavior and believing it to be not a problem, he closed the issue. He didn't misunderstand it. The working directory is a good default for most users -- especially for local development, but as a production concern it could be important to invoke sass compilation with the `-I` option to specify the root of your project's sass directory so that files will always be found there even if your working directory changes.

Please note that users of compass are unaffected by this because it has a project directory context and the full sass directory is always be placed on the load path.
",chriseppstein,nex3
652,2013-02-25 19:13:54,"@mxcl That's not fair. @nex3 explained the behavior and believing it to be not a problem, he closed the issue. He didn't misunderstand it. The working directory is a good default for most users -- especially for local development, but as a production concern it could be important to invoke sass compilation with the `-I` option to specify the root of your project's sass directory so that files will always be found there even if your working directory changes.

Please note that users of compass are unaffected by this because it has a project directory context and the full sass directory is always be placed on the load path.
",chriseppstein,mxcl
646,2013-02-22 22:07:05,"Is it not stated in the SASS Reference File that the compiler does delete / omit null values and empty list in the CSS output? Hence I am with @robwierzbowski here. I just had a small encounter of the same type, which does confirm.
",StefanoRausch,robwierzbowski
642,2013-05-25 20:09:52,"I was just playing around with maps, and then found this issue. Glad to see this is something you guys want to do.

For anyone who comes to this issue after this and before it's implemented, I implemented a tuple lookup function you can see here:

https://gist.github.com/nwwells/5644618

It's basically the same as @lunelson's but I support tuples rather than maps only. Also, you can specify a default value.
",nwwells,lunelson
642,2013-05-31 21:40:18,"@nex3 It's a good point that you make about clarity there.

I like how python distinguishes keywords from positional arguments. Anyways, this is an orthogonal issue I'll think about it more and create a separate issue down the road after actually having used the current plan in practice. The pain of deprecation is already incurred, so delaying doesn't really add much cost.
",chriseppstein,nex3
641,2013-02-02 02:05:10,"Allowing variable argument lists before static arguments makes it very easy for arguments to go where they're not supposed to if the variable argument list changes size (as variable lists are wont to do). In addition, there are many other ways to accomplish this behavior, such as using a list argument as @jakob-e suggests, re-ordering the arguments in the mixin, or appending the additional arguments to the list.
",nex3,jakob-e
640,2013-02-02 02:14:37,"As @robwierzbowski explains, `@extend` is all about moving selectors around -- **not** CSS rules. In order to support cross-`@media` extend, actual CSS rules would have to be copied and moved, which is unexpected and contrary to the way `@extend` behaves in every other circumstances. In addition, it can cause unexpected changes in specificity to the CSS output.

If copying the CSS is the behavior you want, we recommend you use mixins for that, as they're the language construct that explicitly supports copying.
",nex3,robwierzbowski
626,2013-02-23 00:29:59,"I'll take a swing at it. @nex3 do you prefer `call` or `invoke` (or something else) for a generic function calling function?
",chriseppstein,nex3
626,2013-03-11 12:15:31,"@lunelson Interpolating a @media string (which gets printed straight out to CSS) and interpolating a mixin call (which then needs to dynamically call another piece of code) are very different processes, so it shouldn't be too surprising that it didn't work (especially considering you can't interpolate variables or functions either).

As stated above by @chriseppstein, he thinks that they'll be able in do interpolation for mixins with the current `@include` syntax and he and @nex3 have agreed they like the `call` syntax for functions, I don't think we need to confuse the issue w/more proposed syntaxes.
",Snugug,nex3
626,2013-03-11 12:15:31,"@lunelson Interpolating a @media string (which gets printed straight out to CSS) and interpolating a mixin call (which then needs to dynamically call another piece of code) are very different processes, so it shouldn't be too surprising that it didn't work (especially considering you can't interpolate variables or functions either).

As stated above by @chriseppstein, he thinks that they'll be able in do interpolation for mixins with the current `@include` syntax and he and @nex3 have agreed they like the `call` syntax for functions, I don't think we need to confuse the issue w/more proposed syntaxes.
",Snugug,chriseppstein
626,2013-03-11 12:15:31,"@lunelson Interpolating a @media string (which gets printed straight out to CSS) and interpolating a mixin call (which then needs to dynamically call another piece of code) are very different processes, so it shouldn't be too surprising that it didn't work (especially considering you can't interpolate variables or functions either).

As stated above by @chriseppstein, he thinks that they'll be able in do interpolation for mixins with the current `@include` syntax and he and @nex3 have agreed they like the `call` syntax for functions, I don't think we need to confuse the issue w/more proposed syntaxes.
",Snugug,lunelson
626,2013-03-11 13:14:57,"Thanks @Snugug, I see your point and I missed @chriseppstein's mention concerning `@include` above. All good then, glad to hear it.
",lunelson,Snugug
626,2013-03-11 13:14:57,"Thanks @Snugug, I see your point and I missed @chriseppstein's mention concerning `@include` above. All good then, glad to hear it.
",lunelson,chriseppstein
626,2013-03-23 07:40:38,"@chriseppstein how goes the work on the call/invoke methods? I ran into the need today and spent an hour trying to homebrew a solution in pure SASS before I realized it was impossible. I'd love to help, but unfortunately I have no ruby experience, and glancing over the apparently relevant files (interpolation.rb and functions.rb?), I realized this might not be the best project to jump in on headfirst.

If there's anything I can do to help, please let me know. In the interim, is their a recommended solution around this? Should I just build a lookup table for the functions I plan to use and a behemoth if tree?

Thanks! 
",joshuafcole,chriseppstein
626,2013-06-24 17:27:32,"@Snugug @cimmanon The issue here is that using a variable is not forced. Any valid SassScript expression would be allowed, including no indirection at all. So any syntax we choose must allow for a bare identifier to be unambiguous. This is the case for `@include $my-mixin`, but this implies that `@include $my-mixin($a, $b)` or `@include some-fn-that-returns-a-mixin-name($asdf)($a, $b)` would be valid, but they make me a bit squeemish.
",chriseppstein,Snugug
626,2013-06-24 17:27:32,"@Snugug @cimmanon The issue here is that using a variable is not forced. Any valid SassScript expression would be allowed, including no indirection at all. So any syntax we choose must allow for a bare identifier to be unambiguous. This is the case for `@include $my-mixin`, but this implies that `@include $my-mixin($a, $b)` or `@include some-fn-that-returns-a-mixin-name($asdf)($a, $b)` would be valid, but they make me a bit squeemish.
",chriseppstein,cimmanon
626,2013-06-24 17:31:52,"@chriseppstein That's exactly what I'm implying. I would assume the same would be true for either of your proposed syntaxes, and that's how it would work with interpolation.  For me, the most common use for this feature would be something like the following (and why I like interpolation):



Or, with interpolation, would look something like the following:


",Snugug,chriseppstein
626,2013-06-24 17:39:55,"@Snugug the problem is that we need to know what parts of that expression are the SassScript that means the mixin name and what parts are the argument list so that we can parse them appropriately. It's very hard to suss out the last parenthesis group using either a regexp or recursive descent parsing. As such, I'm pretty sure we need to have a way to demarcate the argument list expressions from the name expression. (correct me if I'm wrong, @nex3)
",chriseppstein,Snugug
626,2013-06-24 17:39:55,"@Snugug the problem is that we need to know what parts of that expression are the SassScript that means the mixin name and what parts are the argument list so that we can parse them appropriately. It's very hard to suss out the last parenthesis group using either a regexp or recursive descent parsing. As such, I'm pretty sure we need to have a way to demarcate the argument list expressions from the name expression. (correct me if I'm wrong, @nex3)
",chriseppstein,nex3
626,2013-06-24 19:47:09,"@Snugug right. As I stated originally ""What i don't like about this is that it makes include seem like it could include things that aren't mixins"". But I don't want to solve this with interpolation, nor a new directive. Some other keywords are fine though.
",chriseppstein,Snugug
626,2013-06-24 20:14:17,"@chriseppstein Unless the user is _really_ confused, I highly doubt anyone is going to believe that `@include` can be used on anything other than a mixin.  Other languages seem to do just fine without adding new language constructs for functions vs variables containing functions.

It's been quite a while since I've used PHP, but this _should_ work (also note that passing functions around as arguments to other function is done with the function name as a string, or at least it used to be).



JavaScript that we all know and love...



I've been using Haskell in my day to day programming for the past year or so and there's no differentiation between ""variable"" and ""function"" (partially because there's no such thing as variables in Haskell), everything is an expression.



If I try to pass an argument to an expression that takes no arguments (eg. `foo False`), then the compiler informs me that I'm doing it wrong.
",cimmanon,chriseppstein
626,2013-06-24 20:24:02,"@chriseppstein: Is your argument against interpolation solely readability? Each of the alternate suggestions puts a higher mental burden on me than reading an interpolated string.

If interpolation isn't going away for variables, i.e. `#{$foo}-something`, I would much rather see an existing language construct reused for an expected result than a new new directive added. 

For me, `#{$foo}(args)` is the most understandable, readable option so far.
",robwierzbowski,chriseppstein
626,2013-06-24 20:32:20,"@cimmanon I don't let PHP inspire any of my language design :)

In the javascript case, the variable foo is bound to a function reference. SassScript does not have first class references for mixins and functions. Are you proposing that we create such a construct? To this point, it hasn't seemed necessary and I still don't see a strong argument for it. It implies we have to introduce new definition constructs, etc. which I'm not a big fan of.

@robwierzbowski We've rejected interpolation for variables. Instead, we're adding a map data structure in 3.3. Regarding you claim that you find interpolation easier to read than a keyword, all I can say is that whenever I see a large block of code making heavy use of interpolation, I find it ugly and unreadable. Maybe this isolated use is not, in and of itself unreadable. But it adds to a general unreadability for code en-masse. It's obviously an aesthetic, so we're not going to reach agreement through persuasive arguments, but I appreciate your feedback.
",chriseppstein,robwierzbowski
626,2013-06-24 20:32:20,"@cimmanon I don't let PHP inspire any of my language design :)

In the javascript case, the variable foo is bound to a function reference. SassScript does not have first class references for mixins and functions. Are you proposing that we create such a construct? To this point, it hasn't seemed necessary and I still don't see a strong argument for it. It implies we have to introduce new definition constructs, etc. which I'm not a big fan of.

@robwierzbowski We've rejected interpolation for variables. Instead, we're adding a map data structure in 3.3. Regarding you claim that you find interpolation easier to read than a keyword, all I can say is that whenever I see a large block of code making heavy use of interpolation, I find it ugly and unreadable. Maybe this isolated use is not, in and of itself unreadable. But it adds to a general unreadability for code en-masse. It's obviously an aesthetic, so we're not going to reach agreement through persuasive arguments, but I appreciate your feedback.
",chriseppstein,cimmanon
626,2013-06-24 20:41:25,"@chriseppstein Thanks. If the common interpolation use case is being replaced with maps I rescind my argument. 
",robwierzbowski,chriseppstein
626,2013-06-25 00:28:35,"@chriseppstein Until I started using languages that offered first-class functions and currying, I didn't think I needed them either.  Of course I'm not suggesting that you take inspiration from PHP, but for better or worse it _is_ a language most web programmers are familiar with.  As for the JavaScript example, I could have just as easily written `var foo = parseInt` or any other previously defined function.

Consider a project like [Sassy Buttons](http://jaredhardy.com/sassy-buttons/).  No disrespect intended towards the author, but all of those arguments make one _imposing_ mixin.



To get the same conciseness, you'd have to muck around with global variables. 
",cimmanon,chriseppstein
626,2013-06-25 00:35:13,"@cimmanon I've used plenty of languages with first class functions. I'm well aware of the benefits they provide.

I'm confused. The Sassy Buttons example seems like you're making a case for whether it should be possible to invoke a mixin by determining the name of the mixin in SassScript, but that is not the subject of this conversation, we've already agreed to that. The question is simply what syntax it should take.
",chriseppstein,cimmanon
626,2013-06-26 00:03:39,"@robwierzbowski I had two concerns with that:
1. it obviously precludes defining a mixin named `mixin`. I'm not super worried about this one. as the same issue exists for the `call` function. However, there's an interesting side note: you _can_ use `call` to call a `call` you've defined yourself.
2. Maybe it's mental baggage, but imagining a function that calls my function and returns the value it returns seems nice and tidy because the forms of the two are so similar. But with mixins, the presence of `@include` makes the word `mixin` seem like it's not the same thing as a mixin. But try as I might, I keep not finding any rational explanation for this feeling.

So maybe it's ok. Thoughts, @nex3?
",chriseppstein,robwierzbowski
626,2013-06-26 00:03:39,"@robwierzbowski I had two concerns with that:
1. it obviously precludes defining a mixin named `mixin`. I'm not super worried about this one. as the same issue exists for the `call` function. However, there's an interesting side note: you _can_ use `call` to call a `call` you've defined yourself.
2. Maybe it's mental baggage, but imagining a function that calls my function and returns the value it returns seems nice and tidy because the forms of the two are so similar. But with mixins, the presence of `@include` makes the word `mixin` seem like it's not the same thing as a mixin. But try as I might, I keep not finding any rational explanation for this feeling.

So maybe it's ok. Thoughts, @nex3?
",chriseppstein,nex3
626,2013-06-26 16:13:56,"@lunelson That's a very good point. And I like where that is going, except I don't like that this directive now looks like a function call, where all the others look like statements.

After all this, I still find the keyword based syntax to be the most readable and unambiguous:



However, maybe there are better keywords. E.g. `with` could be `passing`, `mixin` could be `named`?
",chriseppstein,lunelson
626,2013-06-26 16:33:56,"The more I see `@include mixin $foo [with (arglist)]`, I'm generally OK with it, but I'd have to agree with @lunelson that, while I'm OK with it, it doesn't seem as elegant a solution as interpolation (which I know you dislike). All of the suggestions presented, including the functions presented by @robwierzbowski and the flag syntax I proposed, while are good alternative syntaxes, do not provide the same instantly-understandable interpolation syntax that, especially for system developers like us, we're very use to needing to do it currently. 

In the end, while I'm just generally going to be ecstatic with getting this feature in, maybe we don't have to push so hard for a new syntax? But that's me.

Also, very interested in @nex3's thoughts.
",Snugug,lunelson
626,2013-06-26 16:33:56,"The more I see `@include mixin $foo [with (arglist)]`, I'm generally OK with it, but I'd have to agree with @lunelson that, while I'm OK with it, it doesn't seem as elegant a solution as interpolation (which I know you dislike). All of the suggestions presented, including the functions presented by @robwierzbowski and the flag syntax I proposed, while are good alternative syntaxes, do not provide the same instantly-understandable interpolation syntax that, especially for system developers like us, we're very use to needing to do it currently. 

In the end, while I'm just generally going to be ecstatic with getting this feature in, maybe we don't have to push so hard for a new syntax? But that's me.

Also, very interested in @nex3's thoughts.
",Snugug,robwierzbowski
626,2013-06-26 16:33:56,"The more I see `@include mixin $foo [with (arglist)]`, I'm generally OK with it, but I'd have to agree with @lunelson that, while I'm OK with it, it doesn't seem as elegant a solution as interpolation (which I know you dislike). All of the suggestions presented, including the functions presented by @robwierzbowski and the flag syntax I proposed, while are good alternative syntaxes, do not provide the same instantly-understandable interpolation syntax that, especially for system developers like us, we're very use to needing to do it currently. 

In the end, while I'm just generally going to be ecstatic with getting this feature in, maybe we don't have to push so hard for a new syntax? But that's me.

Also, very interested in @nex3's thoughts.
",Snugug,nex3
626,2013-06-26 21:02:20,"We need a :+1: from @nex3. :pray: 
",chriseppstein,nex3
626,2013-06-28 14:49:31,"@lunelson It's not just ""less pretty"". It's complete jibberish and it's the kind of thing that in aggregate makes Sass unapproachable to inexperienced developers. We don't use interpolation like that for any Sass construct. In all cases, interpolation is a way for Sass to inject itself on top of existing CSS syntax.

@blackfalcon The map data structure is discussed in #642 and I don't know what you mean by ""marry these concepts together"". Regarding the indented syntax, I have to admit that I don't like the direct translation of the shorthand include notation for this proposal and I think we'd just require use of the full `@include` in the indented syntax to get dynamic evaluation of mixin names.
",chriseppstein,blackfalcon
626,2013-06-28 14:49:31,"@lunelson It's not just ""less pretty"". It's complete jibberish and it's the kind of thing that in aggregate makes Sass unapproachable to inexperienced developers. We don't use interpolation like that for any Sass construct. In all cases, interpolation is a way for Sass to inject itself on top of existing CSS syntax.

@blackfalcon The map data structure is discussed in #642 and I don't know what you mean by ""marry these concepts together"". Regarding the indented syntax, I have to admit that I don't like the direct translation of the shorthand include notation for this proposal and I think we'd just require use of the full `@include` in the indented syntax to get dynamic evaluation of mixin names.
",chriseppstein,lunelson
626,2013-06-28 20:48:39,"@chriseppstein I didn't mean to provoke, I was simply acknowledging that one might validly object to how it looks. However I dont' think it's jibberish either. I think devs who need this feature will find it readable. 

That being said I see your point re: interpolating of CSS declarations vs interpolating of Sass directives in terms of logical consistency; but if one decides that this is not a place to use string interpolation, then consider whether variables should be allowed directly, e.g. `@include $foo($x, $y);` (which is just your syntax with the keywords removed): if that doesn't seem right to you, then doesn't it suggest that interpolation is sensible?
",lunelson,chriseppstein
626,2013-06-28 21:03:37,"> I didn't mean to provoke

I didn't mean to sound so harsh.

> I think devs who need this feature will find it readable.

Perhaps. But I think the devs who don't need this feature but are trying to understand the code built by the people who did, will be very confused. This is a very important use case to me.

>  if that doesn't seem right to you

It doesn't seem right to me. It makes it look like the value returned by `$foo` is some sort of callable value which it is not, it is just a string which will have special meaning to the include directive so I want it to look very much. There are other parsing based reasons to not allow that syntax as I've mentioned above, for instance the expression can and should be any SassScript expression including but not limited to function calls, strings, string concatenation, etc. Many of those use cases will look very strange with this syntax.

> then doesn't it suggest that interpolation is sensible?

Nope. there's not only two options here.

I get that for the most part this is an aesthetic bikeshed and we probably won't make everyone happy with the decision. I'd like to put this conversation on hold until we have @nex3's thoughts on the matter.
",chriseppstein,nex3
626,2013-07-07 21:35:56,"I've been thinking about it, while a bit clunky, I'm OK with it. @nex3, thoughts? This functionality is really needed for advanced Sass work.
",Snugug,nex3
626,2013-07-19 22:20:56,"@jslegers also, I think what you're trying to do has already been done by this plugin: https://github.com/linkedin/archetype. We use it at work, but I dislike the syntax it uses, and I want to make it more in line with standard sass/css syntax.
",chriseppstein,jslegers
626,2013-07-19 22:31:48,"@jslegers This is a great discussion for the [Sass mailing list](]https://groups.google.com/forum/#!forum/sass-lang)

Issues on point with isolated code examples.
",scottkellum,jslegers
626,2013-07-19 22:32:33,"@jslegers There's about a dozen people on this thread. I'd like to move it elsewhere. This is about dynamic includes, you're asking for dynamic mixin definitions. I'm pretty sure this isn't going to happen, but if you want to continue the conversation, let's start a new issue.
",chriseppstein,jslegers
626,2013-07-19 23:51:23,"@ chriseppstein

I had started issue https://github.com/nex3/sass/issues/857 a day ago. It was user @Snugug who said it was a duplicate of this issue, refered me to here and closed my issue.

Should I reopen it? 
",jslegers,Snugug
626,2013-10-30 10:55:15,"So this thread has been inactive for a while. Those who were most interested are probably working with 3.3.0rc1 now to see what can be done; but as far as I can tell the original concerns haven't been completely addressed and I'm wondering where it all stands. As @chriseppstein said:

> it's incongruous from a user's perspective why they can interpolate a placeholder selector for extend but not for mixin & function definitions and calls

In 3.3 we have a `call()` function for dynamic function calls, and maps as a workaround for variable interpolation but still no dynamic calling of mixins. So what's the state of mind then, re `include $mixin with` or an `include($mixin, $args...)` function? I would also say that IMHO the `call()` function suggests an obvious and simple way to handle dynamic variables, namely: `return($variable-name)`. Such a function would handle the use-case of accessing variables by [interpolated] name (i.e. without the `$` sign), just as `call($function-name, $args...)` does for functions. I say this because I find that maps functionality‚Äîof which I am a big fan, and which creates exciting new potentials‚Äîis overkill in many cases for simple dynamic call of a variable.
",lunelson,chriseppstein
626,2013-10-30 14:59:44,"I fully agree with @lunelson.

I really like the PHP syntax for variable interpolation : just add another $ sign for every level of interpolation :



It may not be the most readable code, but it does seriously open up SCSS's metaprogramming potential... which is very useful at a (meta)framework level.
",jslegers,lunelson
626,2013-10-31 16:43:37,"@chriseppstein :

If people prefer interpolation to maps for a specific implementation, shouldn't they be able to so choose that syntax instead of having the language creators decide it for them?

And while I get your point about variable interpolation, i don't see why you don't just allow any part of your SCSS to be interpolated with the `#{$var}` syntax? 

Not only would you have consistent interpolation syntax and behavior across your language, but it would allow you to do  stuff like this :



This is the sort of flexibility that I take for granted when using PHP and that I constantly miss whenever I'm using SCSS.
",jslegers,chriseppstein
626,2013-12-26 14:11:19,"Having recently written my first code using the new `call()` functionality of 3.3, I'd like to revisit this as I truly love how dynamic it makes my libraries.

I firmly believe that mixin interpolation is a must-have feature for Sass, so we should work out defining a syntax we're al happy with. So far, the two front runners seem to be interpolation and `@include mixin()`. Having worked with `call()` and having come up with `@include mixin` this morning only to see that @robwierzbowski and I have already mentioned it before, I believe that's the way to go.

To go back to earlier concerns, yes it has the potential to look like a function call, but all mixins run that issue. I, however, don't see that issue. Instead, I see the semantics as read; include a mixin named X with arguments Y and Z which is pretty much identical to how an include statement reads now. It also has the advantage of sharing the syntax meaning anything you'd expect to be able to do with a mixin you can without changing any of your syntax.

Thoughts again I guess @chriseppstein and @nex3?
",Snugug,nex3
626,2013-12-26 14:11:19,"Having recently written my first code using the new `call()` functionality of 3.3, I'd like to revisit this as I truly love how dynamic it makes my libraries.

I firmly believe that mixin interpolation is a must-have feature for Sass, so we should work out defining a syntax we're al happy with. So far, the two front runners seem to be interpolation and `@include mixin()`. Having worked with `call()` and having come up with `@include mixin` this morning only to see that @robwierzbowski and I have already mentioned it before, I believe that's the way to go.

To go back to earlier concerns, yes it has the potential to look like a function call, but all mixins run that issue. I, however, don't see that issue. Instead, I see the semantics as read; include a mixin named X with arguments Y and Z which is pretty much identical to how an include statement reads now. It also has the advantage of sharing the syntax meaning anything you'd expect to be able to do with a mixin you can without changing any of your syntax.

Thoughts again I guess @chriseppstein and @nex3?
",Snugug,robwierzbowski
626,2013-12-26 14:11:19,"Having recently written my first code using the new `call()` functionality of 3.3, I'd like to revisit this as I truly love how dynamic it makes my libraries.

I firmly believe that mixin interpolation is a must-have feature for Sass, so we should work out defining a syntax we're al happy with. So far, the two front runners seem to be interpolation and `@include mixin()`. Having worked with `call()` and having come up with `@include mixin` this morning only to see that @robwierzbowski and I have already mentioned it before, I believe that's the way to go.

To go back to earlier concerns, yes it has the potential to look like a function call, but all mixins run that issue. I, however, don't see that issue. Instead, I see the semantics as read; include a mixin named X with arguments Y and Z which is pretty much identical to how an include statement reads now. It also has the advantage of sharing the syntax meaning anything you'd expect to be able to do with a mixin you can without changing any of your syntax.

Thoughts again I guess @chriseppstein and @nex3?
",Snugug,chriseppstein
626,2014-03-29 23:20:26,"@chriseppstein :

Due to various improvements in Sass 3.3 (muchos kudos for that!), I've found a far more elegant syntax for my implementation, although I still need interpolation of mixins to get where I want.

This is basically the sort of thing I'd like to achieve...

## Input:



---

## Output:


",jslegers,chriseppstein
626,2014-03-29 23:47:09,"@chriseppstein :

Additional to easy polyfilling, another use case would be custom CSS properties.

See this example :

## Input:



---

## Output:


",jslegers,chriseppstein
626,2014-10-02 16:35:40,"@lunelson Ok. I retract ""I don't like that this directive now looks like a function call, where all the others look like statements."" This is the best option we have.

I support adding

`@include ($mixin-name, $arg-list...)`

and a corresponding syntax for defining mixins:

`@mixin ($mixin-name, <arglist definition>)`

@nex3 what say you?
",chriseppstein,nex3
626,2014-10-02 16:35:40,"@lunelson Ok. I retract ""I don't like that this directive now looks like a function call, where all the others look like statements."" This is the best option we have.

I support adding

`@include ($mixin-name, $arg-list...)`

and a corresponding syntax for defining mixins:

`@mixin ($mixin-name, <arglist definition>)`

@nex3 what say you?
",chriseppstein,lunelson
626,2014-10-02 16:40:22,"Would arglist allow for named arguments? I think, especially for mixins, that they'd important

> On Oct 2, 2014, at 12:35 PM, Chris Eppstein notifications@github.com wrote:
> 
> @lunelson Ok. I retract ""I don't like that this directive now looks like a function call, where all the others look like statements."" This is the best option we have.
> 
> I support adding
> 
> @include ($mixin-name, $arg-list...)
> 
> and a corresponding syntax for defining mixins:
> 
> @mixin ($mixin-name, <arglist definition>)
> 
> @nex3 what say you?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,nex3
626,2014-10-02 16:40:22,"Would arglist allow for named arguments? I think, especially for mixins, that they'd important

> On Oct 2, 2014, at 12:35 PM, Chris Eppstein notifications@github.com wrote:
> 
> @lunelson Ok. I retract ""I don't like that this directive now looks like a function call, where all the others look like statements."" This is the best option we have.
> 
> I support adding
> 
> @include ($mixin-name, $arg-list...)
> 
> and a corresponding syntax for defining mixins:
> 
> @mixin ($mixin-name, <arglist definition>)
> 
> @nex3 what say you?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,lunelson
626,2014-10-02 16:43:50,"@Snugug yes, we support this now if you pass arglist as a map. You can pass positional and keyword args as `@include foo($args..., $kw-arg-map...)` since 3.3.
",chriseppstein,Snugug
626,2014-10-11 14:50:36,"@chriseppstein it seems to me a use-case for dynamically creating mixins would be passing a `@content` block from the running mixin to the one that's being created‚Äîsort of a 'factory' mixin if you will. 
However, this would require that the `@content` be passed on as SassScript and not be evaluated... only evaluated later, at the runtime of the new `@mixin`. Thoughts?
",lunelson,chriseppstein
626,2014-10-17 01:01:38,"The more I think about it, the less I like adding new syntax for this. I'd rather mirror what we do with `call` and have a built-in mixin that dynamically invokes other mixins (`include` or maybe just `call`). The parallel with function calls is a huge benefit, as is not adding new syntax. It also provides readers of the code a very straightforward path to looking up the functionality and figuring out what's going on if they don't understand it.

I'm extremely skeptical about dynamically defining mixins. That level of dynamism can be very difficult to understand, and it will have global performance implications once we start compiling to Ruby, since it will essentially never be possible to statically determine which mixin is being included at the include site.

@Undistraction For that use case, I'd just define a mixin that takes the property name as a parameter.
",nex3,Undistraction
626,2014-10-17 01:30:59,"@thejase If it's a statement that starts with `@include`, it's a mixin; if it's an expression, it's a function.
",nex3,thejase
626,2014-12-15 15:05:03,"@Undistraction you can currently do [`call($name, $args...)`](http://sass-lang.com/documentation/Sass/Script/Functions.html#call-instance_method), so dynamic function calls are possible.

@nex3 I like `@include call($name, $args...)` and agree that mirroring the function syntax would be good.
",Snugug,Undistraction
626,2014-12-15 15:05:03,"@Undistraction you can currently do [`call($name, $args...)`](http://sass-lang.com/documentation/Sass/Script/Functions.html#call-instance_method), so dynamic function calls are possible.

@nex3 I like `@include call($name, $args...)` and agree that mirroring the function syntax would be good.
",Snugug,nex3
626,2014-12-15 15:07:43,"@Snugug Calls yes, but not declarations. 
",Undistraction,Snugug
626,2014-12-15 15:08:26,"@Undistraction Misunderstood your comment, sorry.
",Snugug,Undistraction
626,2015-01-30 21:30:03,"@chriseppstein If you strongly prefer that to `@include include()` or `@include call()` I could be persuaded.
",nex3,chriseppstein
626,2015-01-30 23:06:33,"@nex3 Well my preference was for `@include ($mixin-name, $arglist...)` but if we have to have a special mixin name then of those three, I feel `mixin` is by far the most readable.
",chriseppstein,nex3
626,2015-02-12 10:36:12,"Wow, great thread.

I've stumbled upon this due to wanting to dynamically call a mixin within a loop and I hit the problem you've all faced.

@chriseppstein - :+1: for being so awesome...(schmoozing over)...how close are you guys to getting something like this in? It'd be a life saver right about now :) 
",danielpeplow,chriseppstein
626,2015-03-29 18:51:19,"+1 @chriseppstein suggestion `@include ($mixin-name, $arglist...)` reads better.
",mtpultz,chriseppstein
626,2015-09-01 08:48:37,"I would agree with @chriseppstein: including mixins dynamic doesn't need to be similar to invoking functions dynamically.

Indeed, the `@include` part is already very explicit about what you are doing and what is going on ‚Äì when invoking functions doesn't involve such a keyword. I do think it is more intuitive if the syntax looks similar to including mixins regularly, by passing arguments inside of parentheses.

Therefore,  the `@include mixin($mixin-name, $args..);` seems the most readable and intuitive to me. And it actually _does_ look similar to invoking functions dynamically, since you pass the mixin's name as first argument, just like you do with the `call` function.

So, +1 for `@include mixin($mixin-name, $args..);`. Looking forward to see this feature in Sass!
",yoannisj,chriseppstein
626,2015-09-07 00:32:08,"I would love to see this in sass,
@chriseppstein @nex3 When there's an agreement on syntax I'll gladly kick off a modest bounty to help this along.
",gkiely,nex3
626,2015-09-07 00:32:08,"I would love to see this in sass,
@chriseppstein @nex3 When there's an agreement on syntax I'll gladly kick off a modest bounty to help this along.
",gkiely,chriseppstein
626,2015-10-20 06:15:20,"No worries @nex3 I appreciate yours and others work on this, and hopefully it's something that makes it into sass eventually.
",gkiely,nex3
626,2015-12-11 22:57:47,"@chriseppstein If we have good namespacing in Sass 4 (which I hope to), we can define this mixin in some sort of `meta` namespace and avoid collisions. I'd really like to support that sort of namespacing‚Äîit's a big reason I'm okay with adding a bunch of new functions‚Äîso I think we should hold off on deprecating existing mixins.
",nex3,chriseppstein
626,2015-12-15 16:43:26,"@nex3 This isn't a mixin, it's syntax that is ambiguous with the name of a mixin. If Sass was actually exposing mixins, then I would agree that is a proper solution for this case. But this is special syntax for invoking a mixin and that syntax should be global, just like the `call` method for invoking functions dynamically. Worse, is that we currently allow users to define a function named `call` which would break Sass semantics. We should deprecate both and not make things complex by allowing important builtins to be swapped around locally with different semantics.
",chriseppstein,nex3
626,2016-01-08 22:31:44,"@nex3 it's not an actual mixin that is special, it's a name that is special cased to behave differently. If it were the former, I would agree with you, but it's not.
",chriseppstein,nex3
626,2016-01-08 23:15:40,"@nex3 @chriseppstein 

> But we could get that benefit without adding a special case. We could define a built-in mixin in the meta namespace that does exactly that, and then we'd get to avoid the pain of deprecation and special casing.

Whenever possible, it's always better to add new features in a way that doesn't break backward compatibility.
",jslegers,nex3
626,2016-01-08 23:15:40,"@nex3 @chriseppstein 

> But we could get that benefit without adding a special case. We could define a built-in mixin in the meta namespace that does exactly that, and then we'd get to avoid the pain of deprecation and special casing.

Whenever possible, it's always better to add new features in a way that doesn't break backward compatibility.
",jslegers,chriseppstein
626,2016-02-11 23:23:20,"Hi @nex3 @chriseppstein has there been any update on this feature?
",gkiely,nex3
626,2016-02-11 23:23:20,"Hi @nex3 @chriseppstein has there been any update on this feature?
",gkiely,chriseppstein
626,2016-05-11 10:08:05,"@fronteed For such cases we already have maps. During retrieving process from maps you can form path in whatever form you need. Please, take a look at https://github.com/sass/sass/issues/132 for details.
",ArmorDarks,fronteed
625,2013-02-02 00:58:27,"@svallory: you're correct, `:filesystem_importer` should be sufficient.
",nex3,svallory
616,2013-01-04 21:33:26,"As @Anahkiasen mentioned, this is a duplicate of many other issues.
",nex3,Anahkiasen
607,2012-12-27 02:08:55,"I am experiencing this same issue as @firedev after upgrading from 3.1.20 to 3.2.4 (also using compass 0.12.2). Thought I was doing something wrong, but maybe it is conflicting on which selector to extend? As @firedev said, when you remove the `span.rc` then the warning disappears. If this is deliberate then maybe the warning could reflect this? I found ""No selectors matching "".rc"""" to be misleading.

Edit: adding in more details of my environment.
",jdeblank,firedev
599,2012-12-21 11:54:08,"@jshb I see how defining your variables inside an array could dry out your code and be useful.

Do you have a gist that would help me to understand a use case for it?  The example you gave is clear, but the simplified use-case doesn't require the functionality you mentioned.

Current functionality allows you to make arrays of variables. Does that satisfy the majority of your use-cases?
https://gist.github.com/4216347
https://gist.github.com/4352329
",matthewcopeland,jshb
577,2012-11-27 14:46:05,"Hi @replete ! You can try my [implementation](https://github.com/artemrizhov/sass) (in beta now) of such feature. Comments and suggestions are welcome! :) Description and discussion is in issue #116.
",artemrizhov,replete
577,2012-12-11 20:04:13,"@Snugug oks thanks, you have more details about this? is only for a course that I am giving.
",Writkas,Snugug
577,2012-12-11 20:10:32,"We had this discussion in the Breakpoint issue queue (http://github.com/Canarymason/breakpoint). Check out the closed issues

On Dec 11, 2012, at 3:04 PM, Mat√≠as Mu√±oz Espinoza notifications@github.com wrote:

> @Snugug oks thanks, you have more details about this? is only for a course that I am giving.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,Snugug
577,2012-12-11 20:13:47,"@Snugug oks, thanks for the help :+1: 
",Writkas,Snugug
577,2012-12-12 04:01:13,"@chriseppstein thanks :+1:
",Writkas,chriseppstein
576,2012-11-27 08:51:20,"Thank you @nex3 ;)
",kud,nex3
569,2012-11-21 19:25:12,"Note that @paulirish says this feature is not SASS / SCSS specific and should work with any CSS pre-processing language. https://github.com/cloudhead/less.js/pull/1038
",matthew-dean,paulirish
569,2012-12-05 12:49:12,"@ruudk: You did not specify the actual cache location after `--cache-location`, thus sass thinks that `--sourcemap` IS your desired `--cache-location` value.
",crdev,ruudk
561,2013-05-24 23:46:03,"@nex3 the $global flag, when set to true would ask whether the global variable exists (ignores local scopes).
",chriseppstein,nex3
556,2013-04-01 05:51:14,"@bjmiller We cannot just rename a css each time we import one. This is so annoying. Counter productive.
When you grab one css it's okay, but when you use several CSS from different projects + need to maintain that by hand ... :bangbang: 
",MoOx,bjmiller
556,2013-04-01 11:33:00,"I won't do bower install bootstrap, blahblah, project-X, hello and rename
bootstrap.css
 as bootstrap.scss, blahblah.css -> blahblah.scss etc.

Plus @cimmanon it means that we have to maintain every css project as
compass/sass project just because sass doesn't want to support css as a
scss import? A bit huge in my opinion.

On 1 April 2013 07:51, Maxime Thirouin notifications@github.com wrote:

> @bjmiller https://github.com/bjmiller We cannot just rename a css each
> time we import one. This is so annoying. Counter productive.
> When you grab one css it's okay, but when you use several CSS from
> different projects + need to maintain that by hand ... [image: :bangbang:]
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/556#issuecomment-15705145
> .

## 

_Erwann Mest_

kud.io
",kud,bjmiller
556,2013-04-01 11:33:00,"I won't do bower install bootstrap, blahblah, project-X, hello and rename
bootstrap.css
 as bootstrap.scss, blahblah.css -> blahblah.scss etc.

Plus @cimmanon it means that we have to maintain every css project as
compass/sass project just because sass doesn't want to support css as a
scss import? A bit huge in my opinion.

On 1 April 2013 07:51, Maxime Thirouin notifications@github.com wrote:

> @bjmiller https://github.com/bjmiller We cannot just rename a css each
> time we import one. This is so annoying. Counter productive.
> When you grab one css it's okay, but when you use several CSS from
> different projects + need to maintain that by hand ... [image: :bangbang:]
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/556#issuecomment-15705145
> .

## 

_Erwann Mest_

kud.io
",kud,cimmanon
556,2013-04-01 13:14:22,"@kud The alternative is what?  Copy/paste your css files into every single project?
",cimmanon,kud
556,2013-04-01 13:30:27,"For the moment, I bower install bootstrap, I copy/paste from components to my scss folder all css and rename it .scss and import it via sass. It's boring.

I just would like to do

`@import ../components/bootstrap/bootstrap.css` as a scss, not w3c way. 

`@import ""file.css"" !force` as @MoOx advises sounds good to me.
",kud,MoOx
556,2013-07-01 18:50:52,"@chriseppstein great, thanks! I'll replace my custom importer with that. One less thing I have to maintain :+1:
",joefiorini,chriseppstein
556,2013-08-08 14:59:44,"@chriseppstein You Sir are Great, Thanks!
",monsdroid,chriseppstein
556,2013-09-05 20:51:03,"@csmosx I threw css importing into sass-rails because I could :)
",chriseppstein,csmosx
556,2013-09-05 21:29:28,"FYI, if you're using Half Pipe (a Grunt-based asset pipeline replacement)
you can @import ""bower!normalize-css/normalize"" to import a CSS template.

On Thu, Sep 5, 2013 at 4:51 PM, Chris Eppstein notifications@github.comwrote:

> @csmosx https://github.com/csmosx I threw css importing into sass-rails
> because I could :)
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/556#issuecomment-23900619
> .
",joefiorini,csmosx
556,2013-11-04 10:27:33,"@oskarrough yes I have seen that but it does not work with libsass and I just got rid of all the ruby dependencies of my project. I hope that both the official sass as well as libsass will eventually work with importing css files.

My current workaround is the method @kud uses (renaming the css files into scss).
",spieglio,oskarrough
556,2013-11-04 10:27:33,"@oskarrough yes I have seen that but it does not work with libsass and I just got rid of all the ruby dependencies of my project. I hope that both the official sass as well as libsass will eventually work with importing css files.

My current workaround is the method @kud uses (renaming the css files into scss).
",spieglio,kud
556,2013-11-04 12:34:30,"@lolmaus so why is this issue still open? For me it looks like the SASS community is actually thinking to add this to the official sass standard.

All this above is not related to this feature. We (@kud and I) just would like to see a official standard, so that libsass can implement a official version and not work around.

For me this topic is done. Either the ruby sass will implement it or not. We do not have to discuss this any more.
",spieglio,kud
556,2013-11-04 12:34:30,"@lolmaus so why is this issue still open? For me it looks like the SASS community is actually thinking to add this to the official sass standard.

All this above is not related to this feature. We (@kud and I) just would like to see a official standard, so that libsass can implement a official version and not work around.

For me this topic is done. Either the ruby sass will implement it or not. We do not have to discuss this any more.
",spieglio,lolmaus
556,2013-11-04 12:47:37,"@lolmaus I'd like to direct you to the first two comments in this thread, one by Chris and one by Nathan (who, BTW, are the primary maintainers of Compass and Sass respectively) who have both shown support for this feature in a future release of Sass. It boggles my mind that you enflame this issue so much because you specifically don't need it.

Here's the wonderful thing about Sass. While yes the primary implementation is written in Ruby, it's grown so large and has such a great and diverse enough community that people want to be able to use it natively with other languages. Sass isn't the Ruby gem, it's the language. There's a very active PHP port, there's the fantastic libsass, and I'm sure there are more. We shouldn't be attempting to force everyone to use the Ruby implementation if it's not right for their workflow; instead the core language should be improved so that the other implementations can be improved as well without needing to fork the language. Just because someone who primarily uses libsass wants this feature doesn't mean it's a bad feature and absolutely doesn't mean he should just use Compass; it means that they would like to see a feature added to a language they love.

At the end of the day, here's the thing. This feature would be useful to huge swaths of people regardless of if you'd use it or not. Doubly so with non-Ruby front-end stacks like the ever-increasing-in-popularity Bower/Grunt stack. But regardless of all of that, there's one thing you always need to keep in mind; just as you cannot choose what device a user accesses your website with, you cannot choose the tools another developer uses. Instead, make the underlying system (in our case, the abstracted language Sass) robust enough to work with the needs of many.
",Snugug,lolmaus
556,2013-11-04 13:21:13,"@Snugug absolutely correct! Thanks.
",spieglio,Snugug
556,2013-11-04 13:24:41,"Btw, @lolmaus it seems you are not aware of who make [libsass](http://libsass.org/) alive: it's Hampton Catlin (@hcatlin), the creator of Sass. So you should revise what you said about Sass. So read this http://libsass.org/ & be quiet please. Also https://twitter.com/chriseppstein/status/342091777999790081. #kthxbye.
",MoOx,lolmaus
556,2013-11-04 14:50:10,"@Snugug Thank you for your detailed comment and once again, sorry for flaming.

My point is that the abstracted language Sass is very limited. It's extending with a general-purpose programming language that makes Sass shine. It lets you:
- manipulate colors: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/colors.rb);
- analyze values: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb);
- generate gradients [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/gradient_support.rb);
- analyze image files: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/image_size.rb);
- embed images into css code: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/inline_image.rb);
- manipulate lists: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb), [Toolkit](https://github.com/Team-Sass/toolkit/blob/1.x.x/compass/lib/toolkit.rb), [Modular Scale](https://github.com/Team-Sass/modular-scale/blob/master/lib/modular-scale.rb#L102), [Jacket](https://github.com/Team-Sass/jacket/blob/master/lib/jacket.rb);
- do math: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/math.rb), [SassyLIsts](https://github.com/Team-Sass/SassyLists/blob/master/lib/SassyLists.rb), [Modular Scale](https://github.com/Team-Sass/modular-scale/blob/master/lib/modular-scale.rb), [Harsh](https://github.com/bookcasey/harsh/blob/master/lib/harsh.rb), [Sassy-math](https://github.com/Team-Sass/Sassy-math/blob/master/compass/lib/sassy-math.rb);
- generate sprites: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/sprites.rb);
- generate Sass variables and functions with a template engine (!): [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sprite_importer/content.erb);
- pass environment variables from OS into Sass: [a random Compass config](https://gist.github.com/darren131/5402087);
- and basically anything else you can imagine that's relevant to generating CSS.

Please get me right. I don't argue against porting sass-css-importer into the abstracted language Sass. 

They deprive their preprocessor from its general-purpose programming language extendability and then ask to implement amputated goodies in its base standard. Okay, Sass devs may be cool with porting sass-css-importer into base Sass. But then someone will need another extnesion merged into the base language, say, working with large numbers ([which fail in Sass miserably](http://sassmeister.com/gist/7302404)), or importing a folder with one `@import` statement, or raising numbers to a power, or producing custom gradients...

Most Node.js developers either use grunt-contrib-compass to leverage the full power of the Sass/Compass infrastructure, or use LESS or Stylus/Styl and their capability to extend its base language with Node's native JS. But some guys just want to eat the fruit without climbing the tree.
",lolmaus,Snugug
556,2013-11-04 14:57:53,".@lolmaus' life: Compass;
",kud,lolmaus
556,2013-11-04 15:48:28,"@lolmaus but we are commenting on the sass repo. Not the compass repo. And yes Compass might be an awesome tool for sass but it is not sass. It is a framework that uses the sass language just like many others do.
",spieglio,lolmaus
556,2014-03-03 06:28:58,"+1 this need

Thanks for the heads up @Snugug :)

Seems like the solution could be to import as usual and if a file isn't found with .sass or .scss, a file with .css is located and imported as if it were a .scss file without any Sassyness in it.

Using Sass with Bower components just got harder. Anyone got any work arounds to this? I haven't read this whole thread yet.
",adamstac,Snugug
556,2014-04-03 15:47:11,"To anyone using Bower, what you can do in the meantime is use the `postinstal` script to run your `copy:cssAsScss` grunt task (sugested by @kud).

Just add something like:



to you .bowerrc file.
",pirelenito,kud
556,2014-04-16 21:45:22,"Thanks for sharing that @ckihneman! Will check it out :+1: 
",adamstac,ckihneman
556,2014-04-16 22:45:54,"When @chriseppstein released the initial dev version of this tool (sass-css-importer) I have written a blog about how to use it. I hope it still applies (will update the blog if functions in this have changed recently). 

Link: http://www.rajibpaudyal.com/blog/import-css-sass
",rajibmp,chriseppstein
556,2014-04-28 00:34:10,"@pirelenito absolutely brilliant ... Thank you
",ahmadalfy,pirelenito
556,2014-07-31 01:53:11,"@tbredin I know! We _clearly_ have our heads up our asses for wanting to not break existing users who may be depending on CSS statements working how they are designed to work in CSS.
",chriseppstein,tbredin
556,2014-07-31 02:55:57,"@chriseppstein did not mean to imply that, you guys do amazing work. I'm not totally sure it should be necessary to use the same syntax (`@inline url('path/to/file.css'`) perhaps? inlining is a slightly different intention to `@import` anyway) or perhaps could leave off the extension (is it really that 'strange', as you initially suggested? - throw an error if there's more than one file with that name?), or use an option like !inline just before the semicolon? I'm not sure what the best approach would be
",tbredin,chriseppstein
556,2014-08-01 00:21:00,"@chriseppstein thanks, that sounds pretty good! I appreciate the effort these things take. Would be interested to hear more about the intention for `@use` as well. Renaming css files wasn't super simple simple if using something like bower, but I'm going to just pipe my vendor css through gulp. I did try your inliner as well but haven't had much success (probably my bad, I haven't had time to explore it yet). 

@ckihneman thanks; I was thinking about writing something like this as well - yoink!
",tbredin,ckihneman
556,2014-08-01 00:21:00,"@chriseppstein thanks, that sounds pretty good! I appreciate the effort these things take. Would be interested to hear more about the intention for `@use` as well. Renaming css files wasn't super simple simple if using something like bower, but I'm going to just pipe my vendor css through gulp. I did try your inliner as well but haven't had much success (probably my bad, I haven't had time to explore it yet). 

@ckihneman thanks; I was thinking about writing something like this as well - yoink!
",tbredin,chriseppstein
556,2014-08-01 01:28:25,"@bfred-it See my comment above yours, [gulp-import-css](https://github.com/yuguo/gulp-import-css) breaks source maps. Only way I can see to keep source maps is to rename css files to scss and import them like that. If someone has a better way to keep source map support, please do share.

@tbredin np, hoped it would help someone out there :)
",ckihneman,bfred-it
556,2014-08-01 01:28:25,"@bfred-it See my comment above yours, [gulp-import-css](https://github.com/yuguo/gulp-import-css) breaks source maps. Only way I can see to keep source maps is to rename css files to scss and import them like that. If someone has a better way to keep source map support, please do share.

@tbredin np, hoped it would help someone out there :)
",ckihneman,tbredin
556,2014-08-10 14:43:05,"Here is how I'm using gulp to solve this:



And then I added this to the .bowerrc file (as suggested by @pirelenito)



Works like a charm!
",lilianchisca,pirelenito
556,2014-08-26 15:16:36,"@ckihneman I tried @chriseppstein 's tool https://github.com/chriseppstein/sass-css-importer but have 2 problems with it

1) It just import .css into .scss as a normal CSS import. There will be still an extra http reuest.
2) It @import the file at the top in Global.css while I want to load it after ABC.scss
",jitendravyas,chriseppstein
556,2014-08-26 15:16:36,"@ckihneman I tried @chriseppstein 's tool https://github.com/chriseppstein/sass-css-importer but have 2 problems with it

1) It just import .css into .scss as a normal CSS import. There will be still an extra http reuest.
2) It @import the file at the top in Global.css while I want to load it after ABC.scss
",jitendravyas,ckihneman
556,2014-08-26 16:24:36,"@lolmaus I didn't get this part ""It's whole point is to avoid that. So i assume you're misusing it.""
",jitendravyas,lolmaus
556,2014-08-26 16:27:57,"@jitendravyas: sass-css-importer is created in order to embed CSS files into Sass. You say ""It just import .css into .scss as a normal CSS import. There will be still an extra http reuest."", but that's what vanilla Sass does.
",lolmaus,jitendravyas
556,2014-08-26 23:35:10,"@jitendravyas you must not be giving the url to the importer correctly. It cannot end in .css or else Sass's logic kicks in.



The file would be at `<sass-dir>/some_folder/some_css_file.css""
",chriseppstein,jitendravyas
556,2014-11-07 23:16:30,"Okay, so I'm going to throw in my two cents, because... fuck it. I'm pretty certain I've never seen a piece of production Sass code that used `@import ""file.css"";` as a traditional CSS import. Afaik, browser CSS imports are notoriously bad for performance and are now basically an unused feature. (http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)

I know that the `@use` syntax in 4.0 is going to be rock'n. @nex3 I saw your gist and it's pretty damn cool. And, I can't wait for that. But, I think the argument of breaking backwards compatibility or CSS compatibility is flawed in that I'm unaware of it actually being used. I'm sure someone has used it, but it's far less used (and therefore traumatic) than the global scoping change made in 3.4!

I think in 3.5 that `@import ""file.css"";` should just load in the damn file, if it can find it in the normal search paths, otherwise post a warning and just print out the `@import` as CSS. Also, `@import url('a.css');` should probably just be considered a regular CSS import, since it's specifying `url()`;

In fact, let's say someone was referencing a real CSS file, that was local to the Sass file, and they were using a CSS `@import` because they were unaware of its performance implications. I'd think it would be a magical, helpful thing, if the file actually ended up bundled into the main CSS file they were generating. I can't imagine someone being upset at enhanced CSS bundling. Remember, the browser has to stop when it sees the CSS `@import` and literally can't render anything on the page until it goes and issues a full other upstream request. Hence, why this CSS feature is a really bad idea.

The CSS ecosystem has changed wildly since we first implemented the rules for `@import` and I think that we're unduly inconveniencing people with rich front end build systems and huge CSS libraries, who use Sass as a central part of their CSS platform, in order to not break behaviour. Again, I know that we want to implement `@use` as a richer answer, but this seems pretty simple to implement _now_ and I'd suggest reconsidering the original response.
",hcatlin,nex3
556,2014-11-27 00:28:07,"@hcatlin libsass can handle this like Sass does, right now. Additionally, there's really no issue with either Ruby sass or libsass resolving `@import ""foo/bar""` to a css file. The only issue is when the explicit css extension is specified. We would break backwards compat.

In fact, you can make Ruby Sass resolve extensionless imports to css files like so:



This can be added to a compass configuration file, or it can be placed into a ruby file (e.g. `css_imports.rb`) and required with `-r ./css_imports.rb` to the sass command line.

Personally, I do not object to making this change to sass as the default.

Some environments (like rails) already allow css imports like this, as their default behavior.
",chriseppstein,hcatlin
556,2014-11-27 01:18:49,"Just a quick add to the conversation. I know that people have libraries of code written in CSS that they want to easily import into a project. As clearly illustrated here, breaking the norm functionality of the `@import` with standard CSS is not ideal. But to @hcatlin point, what is he advocating for is `@import` with CSS to act the same way as Sass. 

Ok, here it is .....  is it really all that hard/bad to change CSS files to SCSS and then just make them part of the natural functionality of the language?

I don't have two years to wait for augmented functionality, I have problems to solve and this works ok for me. If this is 'bad' to some people, I would love to know the case. 

This discussion makes me feel like we are over-engineering a solution. 
",blackfalcon,hcatlin
556,2014-11-27 02:08:38,"@blackfalcon Here is my scenario:

I'm building an application that uses Bower to manage packages and dependancies. It include multiple CSS based components (such as Normalize, and style sheets for specific Javascript packages).
The `bower_components` folder is never included on the production server nor in the Git repository, it is only used for local development. When compiling in development I want SASS to grab these CSS files from bower_components and compile and minify them with all my SCSS files, outputting 1 minified css file for development and production.

`@import '../bower_components/Magnific-Popup/dist/magnific-popup.css';`

I think it wrong in principle to be changing the .css files in the bower_components folder to .scss. As mentioned the bower_components folder is not kept in git (just like you generally wouldn't keep node_modules either).
Is the ideal solution then that each new developer downloading the Git repo has to then go and rename certain bower_components .css files to .scss? If so that is error prone and not ideal.
If not what is the proposed solution?

Currently I am using Grunt to do this for me but this is not ideal and I would like to move away from Grunt yet still be able to include and import outside .css files.
",bradleyflood,blackfalcon
556,2014-11-27 07:42:24,"@bradleyflood I agree, when trying to manage CSS files in a Bower package, this can be an issue. 

I too ran into this issue and included this process into my grunt script where I pull CSS files from my Bower package, rename and place into a vendor directory. Similar to this [solution](http://gotofritz.net/blog/geekery/rename-files-while-copying-grunt/). 

To me, I don't see this as 'crazy', it keeps my packages intact and I get what I need. You may see this differently. 

I see the argument on both sides and I see the potential of the new `@use` directive. Guess we will see what happens. 
",blackfalcon,bradleyflood
556,2014-12-04 16:13:15,":+1: 

@bradleyflood I have exactly the same use case, and I really hope to either see 4.0 out soon (with its new `@use` directive) or some kind of reasonable stopgap like @hcatlin [described.](https://github.com/sass/sass/issues/556#issuecomment-62229812)

In the meantime, @chriseppstein's [hack](https://github.com/sass/sass/issues/556#issuecomment-64730080) looks like what I'll be doing for now.
",mnquintana,chriseppstein
556,2014-12-04 16:13:15,":+1: 

@bradleyflood I have exactly the same use case, and I really hope to either see 4.0 out soon (with its new `@use` directive) or some kind of reasonable stopgap like @hcatlin [described.](https://github.com/sass/sass/issues/556#issuecomment-62229812)

In the meantime, @chriseppstein's [hack](https://github.com/sass/sass/issues/556#issuecomment-64730080) looks like what I'll be doing for now.
",mnquintana,bradleyflood
556,2014-12-04 16:13:15,":+1: 

@bradleyflood I have exactly the same use case, and I really hope to either see 4.0 out soon (with its new `@use` directive) or some kind of reasonable stopgap like @hcatlin [described.](https://github.com/sass/sass/issues/556#issuecomment-62229812)

In the meantime, @chriseppstein's [hack](https://github.com/sass/sass/issues/556#issuecomment-64730080) looks like what I'll be doing for now.
",mnquintana,hcatlin
556,2014-12-15 23:54:23,"Am I just doing something completely wrong? In my codepen I'm able to load a .css file into a SCSS file but in my application it doesn't work. I think the fact that SCSS/SASS couldn't import regular .css files from the very beginning is silly. If what we're doing is extending how the @import works then why not keep how it already worked and add on top of it?

http://codepen.io/CWSites/pen/ByKeNO

As a general note to @nex3 and @chriseppstein, I'm sorry for the earlier twitter exchange. Trying to have a discussion with less than 140 characters doesn't work well and I'm sure that I came across way worse than what I was intending...combined with my lack of knowledge on certain subjects. I realize that you guys do a lot, I wasn't trying to demand you work on anything. Just trying to understand why this has been going on for so long.
",CWSites,nex3
556,2014-12-15 23:54:23,"Am I just doing something completely wrong? In my codepen I'm able to load a .css file into a SCSS file but in my application it doesn't work. I think the fact that SCSS/SASS couldn't import regular .css files from the very beginning is silly. If what we're doing is extending how the @import works then why not keep how it already worked and add on top of it?

http://codepen.io/CWSites/pen/ByKeNO

As a general note to @nex3 and @chriseppstein, I'm sorry for the earlier twitter exchange. Trying to have a discussion with less than 140 characters doesn't work well and I'm sure that I came across way worse than what I was intending...combined with my lack of knowledge on certain subjects. I realize that you guys do a lot, I wasn't trying to demand you work on anything. Just trying to understand why this has been going on for so long.
",CWSites,chriseppstein
556,2014-12-16 10:04:32,"@CWSites It probably doesn't work in your application because the CSS-file is not in the public directory. In CodePen the CSS-file is obviously accessible, but it may not be in your situation? As Sass doesn't compile the @import into anything but a regular CSS-import, the file has to be accessible for the browser.

I think there should be a clarification here from one of the maintainers on the situation of this issue. Many people don't read the older comments (can't blame them, there's 110 total) but still post +1's and other comments that have been said already. I'm not very clear myself on what the situation is at the moment.
",codeclown,CWSites
556,2014-12-16 14:59:49,"@CWSites Where is the disconnect? Although I definitely think it could be worded more clearly (since I didn't even realize this was the case until I found out the hard way), it does say that `@import` will ""compile to a CSS `@import` rule... [I]f the file's extension is `.css`.""
",mnquintana,CWSites
556,2014-12-21 05:59:57,"@CWSites It's a bit late but, CodePen doesn't use vanilla Sass by default (I think), and you can't Import CSS with vanilla Sass. It's set to use Compass (I think), which has the ability to import CSS (I think). You can see what you're using if you look at your CodePen settings.
",whaaaley,CWSites
556,2014-12-22 15:31:37,"@CWSites If you use dev tools on the iframe where CodePen puts the result, you can see the imports were treated as usual CSS imports. So, as I said earlier, the issue must be that in your enrivonment the CSS-file is not accessible. In CodePen it is (you can just [access it on your browser](http://dev.matthaff.com/codepen/sample.css)), so that's why the import still works, even though it is just a regular CSS import.
",codeclown,CWSites
556,2015-02-15 23:00:38,"+1

btw @joseluis Thanks for this workaround 
",kencaron,joseluis
554,2013-05-22 20:42:39,"@swrobel Your mixin would be a lot cleaner if you just used variables:


",cimmanon,swrobel
554,2013-05-22 20:51:13,"@cimmanon This is cleaner but it fails to enforce strong constraints about what breakpoints are supported, which is a key aspect of such an API. We are adding maps in 3.3 and then this will work more like this:


",chriseppstein,cimmanon
554,2014-06-26 21:15:17,"Hey @jonathanfalkner, you should totally release it on Compass/RubyGems and Bower.
",lolmaus,jonathanfalkner
554,2015-05-05 04:51:03,"@jonathanfalkner:

In NetBeans I'll get the following error: Unexpected token EXCLAMATION_MARK found
Now I want to know if your switch/case script is a sass (.scss) or an ruby script.

Lines are affected:



Well I just tried it out with the following code:



My output:

.test {
  color: white;
  color: rgba(0, 0, 0, 0.5);
  color: rgba(255, 0, 0, 0.5); }

Why I'm getting three outs instand of the requested one? Hope you or anybody can help me pls.

Oh ... yes, I want to make a mixin/function to get very fast the given color name or the default ones and, if given, the color with an opacity value.

I know ... will be a very long list, if I include all combinations ... but I've the time to do it ^^.
",chaos234,jonathanfalkner
554,2015-05-05 13:19:30,"Thank you @jonathanfalkner for your fast feedback.

Well, I useing the latest SASS version so it can result in my problem. But with your corrected code I'll try to make it as a new version for my project.

One question: If I type ""rgba($name_val, $opacity_val);"" then I can also use the hex-color-code, if I've understand the documentation correctly, right?
",chaos234,jonathanfalkner
544,2012-11-05 19:27:37,"Yes, you're right @micahgodbolt, but @includes shouldn't be used for this imho, as they're not really mixins, but simply place holders that I want to be accessible throughout my code, regardless of where I am (inside or outside a media query).
",TheDutchCoder,micahgodbolt
543,2012-11-18 10:38:35,"Thanks for that @brianmcallister !
",lunelson,brianmcallister
543,2013-02-13 17:54:04,"@lunelson: You could alternately use [`index`](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#index-instance_method) to check for the item, instead of `@each`:



After looking at it, you don't really need another function, since you'll check if `contains` equals false anyway -- stick with `index`.
",zaus,lunelson
543,2013-02-14 07:03:58,"Huh. That's an elegant solution @zaus. You are right, `index` is of course implicitly making the same check, no reason to reinvent it. Thanks for that!
",lunelson,zaus
543,2014-09-30 10:21:53,"@zaus: I was having an issue where this line was returning `false` for everything:



From the [docs](http://sass-lang.com/documentation/Sass/Script/Functions.html#index-instance_method]) for `index`:

> Returns the position of a value within a list. If the value isn‚Äôt found, returns null instead. 

For me to get a `true/false` back I had to modify the statement to:


",adamtomat,zaus
543,2014-10-10 02:40:50,"@nex3 that is a good point -- confirmed (not that I doubted you) http://codepen.io/zaus/pen/Cukty



which you basically point out in the deprecation ticket.  Since I can't remember that far back, I'm going to assume there was a reason _then_ to compare explicitly, which was also deprecated when the function changed.
",zaus,nex3
538,2012-10-16 05:38:49,"@nex3 Thanks for replying. I haven't been able to ascertain the root cause on the MacRuby side. I'm looking at using hcatlin/libsass now instead (which I have compiled into a bundle that's working in MacRuby). However, it's important that I have access to Compass, which obviously will not work with libsass. The thought crossed my mind to monkeypatch Sass's rendering and replace it with calls into libsass? Would that even be possible or is this just a pipe dream?
",joefiorini,nex3
533,2013-01-08 00:34:10,"@robwierzbowski Thanks for the tip; I'll incorporate it into my own stuff and see if it works!
",pdaoust,robwierzbowski
533,2013-07-17 11:49:04,"Function from @robwierzbowski works great. I'd love to see this native. It occurred to me it comes in handy sometimes. 
",HugoGiraudel,robwierzbowski
533,2013-07-22 17:15:19,"@HugoGiraudel I gave my concerns and I asked for use cases. Your most recent comment is unproductive and unpersuasive.
",chriseppstein,HugoGiraudel
533,2013-07-22 17:47:03,"@robwierzbowski This actually makes my point. It's nonsense mathematically to perform and exponential operation with a dimensional value. Taking the unit off, makes the operation succeed, but it doesn't make sense. What does `2px ^ 5em` mean? By doing this, you're making something succeed that should be an error to the caller.

@HugoGiraudel That article is just another case of people who do not understand how arithmetic with dimensional values works. I want us to focus on training them on how to do the math correctly, not giving tools to enable bad behavior.
",chriseppstein,HugoGiraudel
533,2013-07-22 17:47:03,"@robwierzbowski This actually makes my point. It's nonsense mathematically to perform and exponential operation with a dimensional value. Taking the unit off, makes the operation succeed, but it doesn't make sense. What does `2px ^ 5em` mean? By doing this, you're making something succeed that should be an error to the caller.

@HugoGiraudel That article is just another case of people who do not understand how arithmetic with dimensional values works. I want us to focus on training them on how to do the math correctly, not giving tools to enable bad behavior.
",chriseppstein,robwierzbowski
533,2013-07-22 17:55:01,"@chriseppstein: Note with the example function there's no way to do `2px ^ 5em`. The exponent can only be a unitless number, and the without-unit is only applied when multiplying the measurement to itself. It is correct math.

But, I would like to see some real world, in-use examples. Like I said, at one point I wanted this but haven't needed it for quite a while, and have no opinion on whether it should be part of Sass or not.
",robwierzbowski,chriseppstein
533,2013-07-22 18:01:54,"@robwierzbowski Oh, sorry I misread that. Again, this is a misunderstanding of how dimensional values work. 2ft ^ 2 is 4 square feet (an area), not 4 ft (which would be a length). The correct thing to do in this calculation is let the units multiply along with the number. the easiest way to think how to properly do math with units is to think of a unit like it is an unknown quantity in algebra. `(2 * x) ^ 2` is `4 * x^2`. If the units at the end of a calculation don't cancel out to become the dimension you're expecting, this is a good sign that a mathematical error was made.
",chriseppstein,robwierzbowski
533,2013-07-22 18:09:03,"I don't have any use cases for stripping units. I just enjoy solving the puzzle. I have 3-4 more useless Sass functions if anyone wants them. 

I think we did try to manipulate units early on with Susy, and quickly realized - after a scolding from Chris :) - that it was much simpler and more reliable to keep the units in place. I agree with @chriseppstein that there is really no good reason for this, at least not one I've ever thought of.
",mirisuzanne,chriseppstein
533,2013-07-22 18:11:27,"@chriseppstein Thanks, that makes a lot of sense.
",robwierzbowski,chriseppstein
533,2013-07-22 18:20:27,"I think @chriseppstein's point is that you/we should be using Sass math to convert between units because it is idiomatic and less prone to accidental failure. I'm sure you can convert rem to em in your mixin without stripping the unit.
",robwierzbowski,chriseppstein
533,2013-07-23 20:51:48,"@pdaoust I'd do it like this:


",chriseppstein,pdaoust
533,2013-07-23 20:59:52,"@HugoGiraudel ya. that works too. This was easier to write on the fly :)
",chriseppstein,HugoGiraudel
533,2013-07-26 18:53:50,"you know, actually, I was in the process of reimplementing my conversion functions as two-dimensional lists :) Thanks, @chriseppstein, for the example converter -- once I parsed it, I understood the math that was going on.
",pdaoust,chriseppstein
533,2014-02-28 05:57:23,"@montmanu That's a very unusual, but very interesting and valid, use case. I can understand the core team's reluctance to make this a built-in function, but @robwierzbowski 's snippet is perfectly adequate. You could just call it `parse-int()` or whatever you like:


",pdaoust,montmanu
533,2014-02-28 05:57:23,"@montmanu That's a very unusual, but very interesting and valid, use case. I can understand the core team's reluctance to make this a built-in function, but @robwierzbowski 's snippet is perfectly adequate. You could just call it `parse-int()` or whatever you like:


",pdaoust,robwierzbowski
533,2014-02-28 16:12:14,"@pdaoust So do I.. I was reluctant to even share that example knowing that this issue has generated a bit of disagreement and is now closed, so I wasn't sure what value it would add to the discussion. @robwierzbowski's solution is what I ended up using and it has met my needs. Maybe worth mentioning that when naming the function `parse-int()` the grunt-contrib-compass task I was using had problems compiling. I didn't do too much digging to find out why, but when I renamed it to something less likely to create a namespace conflict (e.g., `strip-units()`) it compiled successfully. 
",montmanu,pdaoust
533,2014-02-28 16:12:14,"@pdaoust So do I.. I was reluctant to even share that example knowing that this issue has generated a bit of disagreement and is now closed, so I wasn't sure what value it would add to the discussion. @robwierzbowski's solution is what I ended up using and it has met my needs. Maybe worth mentioning that when naming the function `parse-int()` the grunt-contrib-compass task I was using had problems compiling. I didn't do too much digging to find out why, but when I renamed it to something less likely to create a namespace conflict (e.g., `strip-units()`) it compiled successfully. 
",montmanu,robwierzbowski
533,2014-02-28 16:15:31,"@montmanu This code is actually shorter and it works:


",chriseppstein,montmanu
533,2014-02-28 17:30:36,"@chriseppstein Yes, it is shorter, but to someone who isn't familiar with what's going on here, 1px looks like some sort of magic number.  Using a clearly-named function removes this ambiguity.
",cimmanon,chriseppstein
533,2014-05-06 19:39:49,"Sick `strip-units()` function @robwierzbowski 

 :+1: 
",drewlustro,robwierzbowski
533,2014-05-06 20:01:33,"Thanks, not my own! Copied/adapted from another source far in the past.

Honestly I haven't had to strip units since this issue was posted.
@chriseppstien ++

On Tuesday, May 6, 2014, Drew Lustro notifications@github.com wrote:

> Sick strip-units() function @robwierzbowskihttps://github.com/robwierzbowski
> 
> [image: :+1:]
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/533#issuecomment-42348889
> .

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowski
533,2014-08-18 18:10:45,"@marknotton That function returns a string not a number. Please. Just use unit based arithmetic and you'll never need this function.
",chriseppstein,marknotton
512,2016-04-04 19:59:40,"@bkazi Just send a pull request and we'll walk you through the process :smiley: 
",nex3,bkazi
501,2012-08-24 21:29:57,"Yep, @nathggns is right, the semantics of min/max are standardized in media queries -- this can be done safely.
",chriseppstein,nathggns
495,2012-09-14 21:44:58,"@GBH Similarly to the above, without a stylesheet that I can compile to see the slowness myself, I can't do anything about it.
",nex3,GBH
495,2012-10-27 23:35:39,"@dgdavid I see you also use `@extend` to bring in bootstrap definitions instead of polluting your html with ridiculous classes like `table.table.table-striped.table-bordered.table-hover.table-condensed.table-shutthefuckup`. I like bootstrap in theory, but I really dislike how I'm forced to use it. `@extend` looked like a decent solution, but it doesn't scale (massive definitions if you have a lot of css) and incredibly slow even with version of sass that didn't make it several magnitudes slower.
",GBH,dgdavid
495,2012-11-03 00:38:48,"@dgdavid Thanks for posting that repo. That'll definitely help me track down this issue.
",nex3,dgdavid
495,2014-10-17 00:37:11,"@unyo Can you provide the stylesheets that are compiling slowly for you?
",nex3,unyo
482,2012-08-15 22:48:48,"@nex3 How about include this on a `3.2.1` release? 
",linjunpop,nex3
482,2012-08-16 00:19:11,"@linjunpop Absolutely.
",nex3,linjunpop
482,2012-08-16 10:36:30,"@hpyhacking Or upgrade to 3.2.1 or 3.3.0.alpha.3.
",thomasklemm,hpyhacking
476,2012-08-10 12:04:44,"@chriseppstein I added a [pull request](https://github.com/nex3/sass/pull/479) for a possible solution.
I'm not sure if this covers all the bases, but it seems to be doing what it's supposed to do.

My commit seems to involve a lot of unintended whitespace changes. Could this be related to the fact that I'm developing on a windows machine?
",HeadOnAPlate,chriseppstein
475,2012-08-15 07:25:36,"@chriseppstein thx, good to know that trick. also got answer from stackoverflow. just need to add /**/, so it's not empty.
",dbashyal,chriseppstein
473,2012-10-05 21:45:47,"@lunelson I think that leads to a very confusing experience when reading the code. It makes it very mysterious where the imported variable comes from. In addition, it doesn't really make sense with the mechanics of `@extend`.
",nex3,lunelson
473,2012-10-10 19:37:03,"@nex3 agreed re: mixins adding variables; that could get confusing. However, I do agree with previous commenters; a !local keyword would be awesome; it would be more in line with the way a lot of languages work -- JavaScript, for instance (which a lot of front-end developers would be familiar with already) allows you to shadow variables at your discretion. This slipped me up already...
",pdaoust,nex3
473,2013-04-10 18:14:24,"@millermedeiros Re: local vars overwriting global vars being unintuitive, It depends on which language you're familiar with. JavaScript and C#, for example, both allow you to overwrite a variable in a containing context by default, and they have a local scope keyword (`var` in both cases) that gets used in declaration (I know C# also allows you to specify the type at declaration instead, but I'm trying to keep it simple).

Ruby, on the other hand, scopes all variables to their immediate context, except variables with a special notation (`$var` for globals and `@var` for instance variables). It might be nice to use something similar -- a symbol notation for defining scope -- since SASS has its roots in Ruby and is used by a lot of Ruby developers. However, we don't have a lot of symbols that aren't already being used by something else in CSS. I like your `!local` flag, although it does create an issue of syntactic ambiguity. Let's say we have this:



What is `width` in the mixin? `40px` or `30px`? The only solution I can think of is to 'hoist' the !local flag to the first `$wid` assignment/declaration, in which case all instances of `$wid` inside the mixin would be local. This would make sense to a JavaScript developer, but as with JavaScript, the intent isn't clear.

The `!global` identifier would become a bit clearer:



The trouble with this is that it would break a lot of SASS that people have already written, if they're expecting mixins to be able to modify global variables. Perhaps the best solution is to use some sort of naming convention in your mixins to avoid collisions, something like `$_var`.

It could be argued that this should be a developer practice: mixins, functions, and style blocks should never cause side-effects like changes to variables. But this may be hard to enforce when you're working with third-party libraries; who knows what sort of magic undocumented globals they might be using?
",pdaoust,millermedeiros
473,2013-04-11 04:51:23,"@bjmiller Those observations have got my amen.
",pdaoust,bjmiller
473,2013-09-06 20:47:08,"@nex3 Whoa. I was using version 0.0.5 of `scssphp` when I got this result. I just tested it with `sass` 3.2.7 and you are right. I need to upgrade the `scssphp` or just use `sass`. Thanks for alerting me to this.
",drgrib,nex3
473,2013-09-26 12:21:35,"@nex3 @chriseppstein as I understand, it's more or less implemented in 3.3?

source: [[CSSconf.eu 2013] Chris Eppstein - The Mind-blowing Power of Sass 3.3](http://www.youtube.com/watch?v=-ZJeOJGazgE&feature=youtu.be&t=36m50s)
",stryju,nex3
473,2013-09-26 12:21:35,"@nex3 @chriseppstein as I understand, it's more or less implemented in 3.3?

source: [[CSSconf.eu 2013] Chris Eppstein - The Mind-blowing Power of Sass 3.3](http://www.youtube.com/watch?v=-ZJeOJGazgE&feature=youtu.be&t=36m50s)
",stryju,chriseppstein
473,2013-10-04 00:40:34,"@stryju no, this is currently unimplemented. It's not clear whether or not it will make it into 3.3.
",nex3,stryju
472,2013-01-15 01:25:46,"@cimmanon The functionality you're discussing is more germane to #626.
",nex3,cimmanon
469,2014-05-28 20:17:19,"@kevinSuttle I think you want to pass `$color` to `alpha()`, not `$alpha`.

> Aside: Shouldn't it be up to the developer which browsers s/he supports? That's not really a tooling decision.

Sass is in the business of dynamically working with colors and in the business of serializing those colors to CSS. As such, it makes sense that Sass makes decisions about what format to use for serialization. The choice of the maximally compatible format is a feature for most users, who are able to freely use the `hsl()` and `hsla()` functions in Sass without fear of breaking older browsers.
",nex3,kevinSuttle
469,2015-03-06 15:40:53,"@daneden Thanks for the tip! 

For me, I want to use only HSL/HSLA colors consistently ‚Äì I like at least having the option of controlling output, especially when designing. At this point, for my personal projects, <IE8 (the last holdouts for HSL) could get their own minimal stylesheet with hex values. Anyway, there are plenty things besides color that I want to use that IE8 won‚Äôt like.

Your code works for me, but your second function should read:



---

Also, I thought that using HSLA instead of hex would increase output file size slightly, but gzipped the HSLA output was slightly smaller for stylesheet that I tested (31k, 200 color declarations). The extra characters had no effect on the delivered file size (6k gzipped).
",opattison,daneden
469,2017-02-08 22:56:06,"@chriseppstein: In terms of percentage browser support for CSS3 colours and/or IE8 percentage market share, when would you be happy with this behaviour becoming the default, if at all?

I ask because [97.8% of user-agents now support CSS3 colours](http://caniuse.com/#search=hsl), and IE8 now has only [3.2% market share](https://www.netmarketshare.com/browser-market-share.aspx?qprid=2&qpcustomd=0)\* (obviously depending slightly on who you ask).

\*that site seems to only show data intermittently/based on referrer; here's a screenshot:

![image](https://cloud.githubusercontent.com/assets/9433472/22760727/a520f366-ee4f-11e6-8032-8659f2a2dd52.png)
",anowlcalledjosh,chriseppstein
469,2017-02-08 23:25:15,"Please keep in mind this issue was from 2012, a lot has changed.

@nex3 this might be worth another look given 3.5 is aimed at IE9+",xzyfer,nex3
468,2014-02-27 21:15:36,"@nex3 Hey there. I'm on sass 3.1.20 and I've got this problem on my mac too. I tried to set `@charset ""UTF-8"";` at the top of my Sass files, as my editor saves all files in UTF-8, but it didn't make any difference.

By the way: collimarco said this already 2 years ago (by editing his issues). As far as I can tell we are not able to reopen the issue as you suggested.
",tobiasmuecksch,nex3
468,2014-02-27 21:33:46,"@nex3 Thanks for your advice. I'm sorry i caused you to reopen this issue. It wasn't an encoding problem in my case. I've opened another issue #1141 describing my problem. Thanks anyway. Feel free to delete my obsolete comments in this issue.
",tobiasmuecksch,nex3
466,2012-08-08 17:54:52,"@nex3 it's possible to disable the asset pipeline and use the `Sass::Plugin` instead. `Sass::Plugin` can check whether the asset pipeline is enabled. In `compass-rails` we use this to check:


",chriseppstein,nex3
466,2012-08-11 01:37:24,"@nex3 Isn't it the default behavior?
",chriseppstein,nex3
456,2013-12-02 14:30:41,"This behaviour is preventing us from what I see as a valid use case for using @extend within a media query. We are using Glue (with some modifications to generate a scss file instead of css) and style our icons up like this:



Now, this works fine... Until you need to show a different icon for a different viewport size for example:



Is there anything we can do to work around this? I tried the mixin suggested by @ntreadway above but that didn't seem to work.
",WillsB3,ntreadway
456,2013-12-03 06:55:48,"@scottkellum, @WillsB3, it seems that Sass maintainers just don't want us to be able to do that. :(

I also [tried](https://github.com/nex3/sass/issues/984) to bring this problem up (i'm sorry for creating a duplicate issue). I suggested that Sass should maintain a separate extendable list of selectors for each unique media query. But @chriseppstein considers this to be counter-intuitive for many users.

@chriseppstein points out that Sass does allow to extend from media queries. To do this, you have to declare a separate extendable selector for each unique media query, so that _the extended value wasn't found outside the media query_. This can be done either manually or using a technique called [""Maps, Media & Extend, Oh my!""](http://sassmeister.com/gist/7764882).

Basically, the ""Oh, my"" technique requires that:
- all extendable selectors should be declared:
  - from within an initialization mixin,
  - via `@at-root` directive,
  - with an interpolated media query name within each selector's name;
- you have to maintain a global table of what extendables have been initialized for what media queries;
- you have to call the mixin prior to each `@extend` call.

Oh my, it's _so intuitive_ that i'm still not sure whether i correctly understand what's going on in that example. So you can correct me if you grasped it better.

---

Well, this is the direction where modern Sass is heading for. Another example of the tendency is the way parent selector can be interpolated.

In LESS and Stylus you can do:



To achieve the same result in Sass, you have to do:



I guess that if you choose Sass over other preprocessors then you just have to accept that ""intuitive"" means not ""intuitive from the perspective of users"" but rather ""from the perspective of the internal logic of the Sass compiler"". 
",lolmaus,WillsB3
456,2013-12-03 06:55:48,"@scottkellum, @WillsB3, it seems that Sass maintainers just don't want us to be able to do that. :(

I also [tried](https://github.com/nex3/sass/issues/984) to bring this problem up (i'm sorry for creating a duplicate issue). I suggested that Sass should maintain a separate extendable list of selectors for each unique media query. But @chriseppstein considers this to be counter-intuitive for many users.

@chriseppstein points out that Sass does allow to extend from media queries. To do this, you have to declare a separate extendable selector for each unique media query, so that _the extended value wasn't found outside the media query_. This can be done either manually or using a technique called [""Maps, Media & Extend, Oh my!""](http://sassmeister.com/gist/7764882).

Basically, the ""Oh, my"" technique requires that:
- all extendable selectors should be declared:
  - from within an initialization mixin,
  - via `@at-root` directive,
  - with an interpolated media query name within each selector's name;
- you have to maintain a global table of what extendables have been initialized for what media queries;
- you have to call the mixin prior to each `@extend` call.

Oh my, it's _so intuitive_ that i'm still not sure whether i correctly understand what's going on in that example. So you can correct me if you grasped it better.

---

Well, this is the direction where modern Sass is heading for. Another example of the tendency is the way parent selector can be interpolated.

In LESS and Stylus you can do:



To achieve the same result in Sass, you have to do:



I guess that if you choose Sass over other preprocessors then you just have to accept that ""intuitive"" means not ""intuitive from the perspective of users"" but rather ""from the perspective of the internal logic of the Sass compiler"". 
",lolmaus,scottkellum
456,2013-12-03 06:55:48,"@scottkellum, @WillsB3, it seems that Sass maintainers just don't want us to be able to do that. :(

I also [tried](https://github.com/nex3/sass/issues/984) to bring this problem up (i'm sorry for creating a duplicate issue). I suggested that Sass should maintain a separate extendable list of selectors for each unique media query. But @chriseppstein considers this to be counter-intuitive for many users.

@chriseppstein points out that Sass does allow to extend from media queries. To do this, you have to declare a separate extendable selector for each unique media query, so that _the extended value wasn't found outside the media query_. This can be done either manually or using a technique called [""Maps, Media & Extend, Oh my!""](http://sassmeister.com/gist/7764882).

Basically, the ""Oh, my"" technique requires that:
- all extendable selectors should be declared:
  - from within an initialization mixin,
  - via `@at-root` directive,
  - with an interpolated media query name within each selector's name;
- you have to maintain a global table of what extendables have been initialized for what media queries;
- you have to call the mixin prior to each `@extend` call.

Oh my, it's _so intuitive_ that i'm still not sure whether i correctly understand what's going on in that example. So you can correct me if you grasped it better.

---

Well, this is the direction where modern Sass is heading for. Another example of the tendency is the way parent selector can be interpolated.

In LESS and Stylus you can do:



To achieve the same result in Sass, you have to do:



I guess that if you choose Sass over other preprocessors then you just have to accept that ""intuitive"" means not ""intuitive from the perspective of users"" but rather ""from the perspective of the internal logic of the Sass compiler"". 
",lolmaus,chriseppstein
456,2013-12-07 06:24:52,"@nex3 Say, a user wants to extend from a media query. Consider @WillsB3's [use case](#issuecomment-29621364) as an example. As extending from media queries is impossible, what workaround will he use? What does everybody use in this situation?

Mixins. It's the only thing that works.

I find these in all my projects:



This looks redundant and it is. But i'm forced into having both mixins and extends implementations of snippets because i need them inside media queries.

The mixins workaround produces a CSS much larger than the proposed functionality of extends ""silently multiplying the size of their selectors"", because each mixin usage will have a duplicate rule in CSS, whereas each extend will only have a single duplicate per media query.

Say, you have three different media queries and you're trying to extend four times in each of them and four times outside media queries. The suggested extends approach will produce 4 CSS rules and the mixin workaround will produce 13.

So basically:
1. You say you don't want to implement this because you care for resulting CSS size. But by rejecting to implement it you doom people who need it into multiple times larger CSS size.
2. You neglect the demands of people who use extends extensively and instead care about newbies who might eventually extend from a media query without knowing the mechanism and wonder why there's a duplicate rule in CSS.

Please reconsider.

PS There's of course the ""Oh, my"" workaround (see above), but it does absolutely the same: producing a unique extendable for each media query. It's the same what we ask here, but with absolutely ridiculous usage complexity.
",lolmaus,WillsB3
456,2013-12-07 06:24:52,"@nex3 Say, a user wants to extend from a media query. Consider @WillsB3's [use case](#issuecomment-29621364) as an example. As extending from media queries is impossible, what workaround will he use? What does everybody use in this situation?

Mixins. It's the only thing that works.

I find these in all my projects:



This looks redundant and it is. But i'm forced into having both mixins and extends implementations of snippets because i need them inside media queries.

The mixins workaround produces a CSS much larger than the proposed functionality of extends ""silently multiplying the size of their selectors"", because each mixin usage will have a duplicate rule in CSS, whereas each extend will only have a single duplicate per media query.

Say, you have three different media queries and you're trying to extend four times in each of them and four times outside media queries. The suggested extends approach will produce 4 CSS rules and the mixin workaround will produce 13.

So basically:
1. You say you don't want to implement this because you care for resulting CSS size. But by rejecting to implement it you doom people who need it into multiple times larger CSS size.
2. You neglect the demands of people who use extends extensively and instead care about newbies who might eventually extend from a media query without knowing the mechanism and wonder why there's a duplicate rule in CSS.

Please reconsider.

PS There's of course the ""Oh, my"" workaround (see above), but it does absolutely the same: producing a unique extendable for each media query. It's the same what we ask here, but with absolutely ridiculous usage complexity.
",lolmaus,nex3
456,2013-12-14 01:33:50,"@lolmaus The issue isn't just the output size in an absolute sense; in general, people tend to overestimate the impact of duplicated text and underestimate the effectiveness of gzip compression_. The primary issue is the ability of users to reason about what their output will look like. Both the mixin solution you describe and Chris's solution have the extremely valuable advantage of *_making the functioning of the compiler explicit**.

When a user writes `@include background-foo` they know that that's going to copy the styles rather than move around their selectors, because they're explicitly requesting it. If we just allowed `@extend` to silently behave very differently when used across media queries, it would be doing something the users didn't expect and didn't intend. Even if often that will have the same result as what they tried, it won't always, and that's a problem.

You're also underestimating the degree of extra text that would be generated if we silently copied selectors. In addition to the selectors being extended, the full media query would need to be copied in order to preserve the order that the selectors were defined in (which is clearly important). For example:



would need to be compiled to



\* This quirk of estimation means that generating more output than users expect will make them very unhappy, but generating large amounts of output that they do expect won't cause many problems.
",nex3,lolmaus
456,2013-12-14 14:32:42,"@lolmaus There is a Latin phrase that I think sums up the counter-point to your argument: _Ignorantia juris non excusat_ or ""Ignorance of the law does not excuse"". Suggesting that it's OK to codify bad behavior because people don't know any better is a terrible suggestion made worse by the rude delivery. I, and many fellow framework developers, know exactly how `@extend` works and work hard to optimize our code around its benefits. Extension, especially in a pre-process language, is tricky as hell (as evidenced by the fact that really only the Ruby implementation of Sass gets it right of all CSS Preprocessors, and that's because it's caught most of the edge cases already and takes hard lines against bad output). When used properly, extension can actually produce CSS that's _smaller_ than you would write by hand as you're able to micro-optimize in a system where otherwise you wouldn't think to. Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one, missing the point of @nex3's argument against; it's about predictability of and a silent change in the way an interaction happens, not necessarily the actual duplicated code.

As for your tangent into other features of Sass 3.3, while `@at-root` is more verbose, it's much more predictable (again that word) than the way it's handled in Less and Stylus. It also provides users with options and can be used in more places than just interpolating a nested selector, providing a consistent and predictable (again) interface for referring to the root of a document. Merging identical media queries? As stated time and time again by @nex3 and discussed at length in #241, re-ordering media queries is dangerous and (gasp) unpredictable. Instead, a direct approach (`@target`) has been proposed.

One of the key aspects of User Experience (of which Developer Experience, what we're talking about, falls under) is that actions should have predictable outcomes. On a website, if a red button had the text ""Free Shipping"" and if clicked on a product page, it provided free shipping, but if clicked on from an item in a carousel shipping was $5 because somewhere in the business logic of that button it's only free from a product page, people would be pissed off. The argument is for making the ""Free Shipping"" button always mean ""Free Shipping"" and if shipping isn't free, make sure the user explicitly knows.
",Snugug,nex3
456,2013-12-14 14:32:42,"@lolmaus There is a Latin phrase that I think sums up the counter-point to your argument: _Ignorantia juris non excusat_ or ""Ignorance of the law does not excuse"". Suggesting that it's OK to codify bad behavior because people don't know any better is a terrible suggestion made worse by the rude delivery. I, and many fellow framework developers, know exactly how `@extend` works and work hard to optimize our code around its benefits. Extension, especially in a pre-process language, is tricky as hell (as evidenced by the fact that really only the Ruby implementation of Sass gets it right of all CSS Preprocessors, and that's because it's caught most of the edge cases already and takes hard lines against bad output). When used properly, extension can actually produce CSS that's _smaller_ than you would write by hand as you're able to micro-optimize in a system where otherwise you wouldn't think to. Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one, missing the point of @nex3's argument against; it's about predictability of and a silent change in the way an interaction happens, not necessarily the actual duplicated code.

As for your tangent into other features of Sass 3.3, while `@at-root` is more verbose, it's much more predictable (again that word) than the way it's handled in Less and Stylus. It also provides users with options and can be used in more places than just interpolating a nested selector, providing a consistent and predictable (again) interface for referring to the root of a document. Merging identical media queries? As stated time and time again by @nex3 and discussed at length in #241, re-ordering media queries is dangerous and (gasp) unpredictable. Instead, a direct approach (`@target`) has been proposed.

One of the key aspects of User Experience (of which Developer Experience, what we're talking about, falls under) is that actions should have predictable outcomes. On a website, if a red button had the text ""Free Shipping"" and if clicked on a product page, it provided free shipping, but if clicked on from an item in a carousel shipping was $5 because somewhere in the business logic of that button it's only free from a product page, people would be pissed off. The argument is for making the ""Free Shipping"" button always mean ""Free Shipping"" and if shipping isn't free, make sure the user explicitly knows.
",Snugug,lolmaus
456,2013-12-14 14:46:40,"Speaking of Free Shipping, @nex3 @chriseppstein thoughts on providing a way for users to explicitly state that they wish a new extension context be created (i.e. duplicate the thing being extended and use that where appropriate)? Something like the following:



_would compile to_



Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical `@media` contexts (but include ones in `or` chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal `@extend` pattern of ""all"" doesn't quite make sense here, but because it is an explicit call, a user will understand that they're changing how it works.
",Snugug,nex3
456,2013-12-14 14:46:40,"Speaking of Free Shipping, @nex3 @chriseppstein thoughts on providing a way for users to explicitly state that they wish a new extension context be created (i.e. duplicate the thing being extended and use that where appropriate)? Something like the following:



_would compile to_



Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical `@media` contexts (but include ones in `or` chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal `@extend` pattern of ""all"" doesn't quite make sense here, but because it is an explicit call, a user will understand that they're changing how it works.
",Snugug,chriseppstein
456,2013-12-14 21:54:15,"@Snugug 

> Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical @media contexts (but include ones in or chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal @extend pattern of ""all"" doesn't quite make sense here

Maybe you didn't undersand what i'm suggesting and that's why we have this argument...

I'm suggesting that a new extend context should be unconditionally created for every unique media query type. Within each such context, `@extend` should work as usual. Extends from different contexts should not be aware of each other.

This behaviour is absolutely predictable, it does not require Sass to do any decision making, it does not require rearranging selectors ""to the first or last item"", and the ""normal `@extend` pattern"" will still make perfect sense here.

---

> Suggesting that it's OK to codify bad

If you consider this behaviour bad, please provide concrete examples and arguments. I provide mine below.

---

> I, and many fellow framework developers, know exactly how @extend works and work hard to optimize our code around its benefits.

Currently Sass does not allow to extend the same selectors inside different media queries (or inside + outside a media query). It just doesn't work, and this fact has no benefit at all.

---

> Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one

I never did such an argument. My argument was: Let users do what is currently impossible. If they want to use it, they can read docs and learn how it will work for them.

If they're neglectful so much that they don't read, then they will hardly notice the difference. @nex3 cares about how users will be surprised by the change, but they are already [misusing](https://github.com/nex3/sass/issues/1038) `@extend` all the time and most of them don't even notice it. Also, how can you be surprised by something you're not doing?

Let me empathize this. Nobody is currently extending same selectors within different media queries because it just doesn't work! Enabling this will not change the output of existing code.

Only people who read that extending same selectors from different media queries has been enabled in Sass 3.3 will start using it. And they will know how it works because they have just read it!

There also will be newbies who will ignorantly use extends in media queries without knowing how it works. But it will not hurt them because:
1. they will see in the browser exactly what they wanted;
2. resulting CSS size will not be larger than the mixin alternative;
3. the suggested behavior does not introduce new collisions of any kind or any unwanted behaviour (other than the fact that when you ask for an extend within a media query then you ‚Äîsurpise!‚Äî get an extend within a media query).

---

> @at-root is more verbose, it's much more predictable

So why do people stumble on it all the time? Parent selector is probably the most misused feature in Sass 3.2. ""Why does my `&-foo` not work"" is the most popular question on Stackoverflow, with ""Why does my `#{&}-foo` produce bloated markup"" being close on the heels. Again, a lot of users just don't notice that their `#{&}-foo` produces bloated markup.

As for `@at-root`, it looks logical for Sass gurus who know Sass inside out, but it is counter-intuitive for normal users. And @chriseppstein's suggestion to consider parent selector's [crazy behavior](https://github.com/nex3/sass/issues/1036) to be normal and to work around it with `.foo, .bar { #{append-to-selector(&, "".baz"")} {a:b;}}` is ridiculous. No sane person (who's not a Sass maintainer/guru) will consider _that_ to be intuitive.

I just don't understand why you let that counter-intuitive stuff pass and ban the possibility of extending from different media queries. It just does not make sense. :(

---

> Merging identical media queries? re-ordering media queries is dangerous and (gasp) unpredictable

The `@extend` directive always merges selectors. So if Sass 3.3 produced a merged media query for each extend, it will not be unpredictable. Also, it will not break anything.

---

> `@extend %half !duplicate;`
> because it is an explicit call, a user will understand that they're changing how it works.

Because doing this without `!duplicate` will still be impossible, this is how users will feel when using `!duplicate`:


",lolmaus,nex3
456,2013-12-14 21:54:15,"@Snugug 

> Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical @media contexts (but include ones in or chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal @extend pattern of ""all"" doesn't quite make sense here

Maybe you didn't undersand what i'm suggesting and that's why we have this argument...

I'm suggesting that a new extend context should be unconditionally created for every unique media query type. Within each such context, `@extend` should work as usual. Extends from different contexts should not be aware of each other.

This behaviour is absolutely predictable, it does not require Sass to do any decision making, it does not require rearranging selectors ""to the first or last item"", and the ""normal `@extend` pattern"" will still make perfect sense here.

---

> Suggesting that it's OK to codify bad

If you consider this behaviour bad, please provide concrete examples and arguments. I provide mine below.

---

> I, and many fellow framework developers, know exactly how @extend works and work hard to optimize our code around its benefits.

Currently Sass does not allow to extend the same selectors inside different media queries (or inside + outside a media query). It just doesn't work, and this fact has no benefit at all.

---

> Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one

I never did such an argument. My argument was: Let users do what is currently impossible. If they want to use it, they can read docs and learn how it will work for them.

If they're neglectful so much that they don't read, then they will hardly notice the difference. @nex3 cares about how users will be surprised by the change, but they are already [misusing](https://github.com/nex3/sass/issues/1038) `@extend` all the time and most of them don't even notice it. Also, how can you be surprised by something you're not doing?

Let me empathize this. Nobody is currently extending same selectors within different media queries because it just doesn't work! Enabling this will not change the output of existing code.

Only people who read that extending same selectors from different media queries has been enabled in Sass 3.3 will start using it. And they will know how it works because they have just read it!

There also will be newbies who will ignorantly use extends in media queries without knowing how it works. But it will not hurt them because:
1. they will see in the browser exactly what they wanted;
2. resulting CSS size will not be larger than the mixin alternative;
3. the suggested behavior does not introduce new collisions of any kind or any unwanted behaviour (other than the fact that when you ask for an extend within a media query then you ‚Äîsurpise!‚Äî get an extend within a media query).

---

> @at-root is more verbose, it's much more predictable

So why do people stumble on it all the time? Parent selector is probably the most misused feature in Sass 3.2. ""Why does my `&-foo` not work"" is the most popular question on Stackoverflow, with ""Why does my `#{&}-foo` produce bloated markup"" being close on the heels. Again, a lot of users just don't notice that their `#{&}-foo` produces bloated markup.

As for `@at-root`, it looks logical for Sass gurus who know Sass inside out, but it is counter-intuitive for normal users. And @chriseppstein's suggestion to consider parent selector's [crazy behavior](https://github.com/nex3/sass/issues/1036) to be normal and to work around it with `.foo, .bar { #{append-to-selector(&, "".baz"")} {a:b;}}` is ridiculous. No sane person (who's not a Sass maintainer/guru) will consider _that_ to be intuitive.

I just don't understand why you let that counter-intuitive stuff pass and ban the possibility of extending from different media queries. It just does not make sense. :(

---

> Merging identical media queries? re-ordering media queries is dangerous and (gasp) unpredictable

The `@extend` directive always merges selectors. So if Sass 3.3 produced a merged media query for each extend, it will not be unpredictable. Also, it will not break anything.

---

> `@extend %half !duplicate;`
> because it is an explicit call, a user will understand that they're changing how it works.

Because doing this without `!duplicate` will still be impossible, this is how users will feel when using `!duplicate`:


",lolmaus,chriseppstein
456,2013-12-14 21:54:15,"@Snugug 

> Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical @media contexts (but include ones in or chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal @extend pattern of ""all"" doesn't quite make sense here

Maybe you didn't undersand what i'm suggesting and that's why we have this argument...

I'm suggesting that a new extend context should be unconditionally created for every unique media query type. Within each such context, `@extend` should work as usual. Extends from different contexts should not be aware of each other.

This behaviour is absolutely predictable, it does not require Sass to do any decision making, it does not require rearranging selectors ""to the first or last item"", and the ""normal `@extend` pattern"" will still make perfect sense here.

---

> Suggesting that it's OK to codify bad

If you consider this behaviour bad, please provide concrete examples and arguments. I provide mine below.

---

> I, and many fellow framework developers, know exactly how @extend works and work hard to optimize our code around its benefits.

Currently Sass does not allow to extend the same selectors inside different media queries (or inside + outside a media query). It just doesn't work, and this fact has no benefit at all.

---

> Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one

I never did such an argument. My argument was: Let users do what is currently impossible. If they want to use it, they can read docs and learn how it will work for them.

If they're neglectful so much that they don't read, then they will hardly notice the difference. @nex3 cares about how users will be surprised by the change, but they are already [misusing](https://github.com/nex3/sass/issues/1038) `@extend` all the time and most of them don't even notice it. Also, how can you be surprised by something you're not doing?

Let me empathize this. Nobody is currently extending same selectors within different media queries because it just doesn't work! Enabling this will not change the output of existing code.

Only people who read that extending same selectors from different media queries has been enabled in Sass 3.3 will start using it. And they will know how it works because they have just read it!

There also will be newbies who will ignorantly use extends in media queries without knowing how it works. But it will not hurt them because:
1. they will see in the browser exactly what they wanted;
2. resulting CSS size will not be larger than the mixin alternative;
3. the suggested behavior does not introduce new collisions of any kind or any unwanted behaviour (other than the fact that when you ask for an extend within a media query then you ‚Äîsurpise!‚Äî get an extend within a media query).

---

> @at-root is more verbose, it's much more predictable

So why do people stumble on it all the time? Parent selector is probably the most misused feature in Sass 3.2. ""Why does my `&-foo` not work"" is the most popular question on Stackoverflow, with ""Why does my `#{&}-foo` produce bloated markup"" being close on the heels. Again, a lot of users just don't notice that their `#{&}-foo` produces bloated markup.

As for `@at-root`, it looks logical for Sass gurus who know Sass inside out, but it is counter-intuitive for normal users. And @chriseppstein's suggestion to consider parent selector's [crazy behavior](https://github.com/nex3/sass/issues/1036) to be normal and to work around it with `.foo, .bar { #{append-to-selector(&, "".baz"")} {a:b;}}` is ridiculous. No sane person (who's not a Sass maintainer/guru) will consider _that_ to be intuitive.

I just don't understand why you let that counter-intuitive stuff pass and ban the possibility of extending from different media queries. It just does not make sense. :(

---

> Merging identical media queries? re-ordering media queries is dangerous and (gasp) unpredictable

The `@extend` directive always merges selectors. So if Sass 3.3 produced a merged media query for each extend, it will not be unpredictable. Also, it will not break anything.

---

> `@extend %half !duplicate;`
> because it is an explicit call, a user will understand that they're changing how it works.

Because doing this without `!duplicate` will still be impossible, this is how users will feel when using `!duplicate`:


",lolmaus,Snugug
456,2013-12-16 22:12:39,"@lolmaus Please keep your language civil. I've edited out your profanity, and further cursing will result in me deleting your comments entirely. These discussions are public and I won't have them taking a tone that makes the community looks like a bunch of squabbling adolescents.

Having `@extend` silently ignore all selectors outside of the current directive context is a bad idea. Not only does it not match the user's expectation of the behavior or the semantics of extend, it does so without any indication of why or in what way it's failing. To a user who (reasonably) expects `@extend` to work across `@media` boundaries, it will look as though some of their styles work and some don't. They'll need to do serious debugging to figure out what's going on and why.

The idea that users already have trouble understanding how `@extend` works, so we shouldn't worry about making it harder to understand is deeply misguided. The fact that `@extend` is already complex indicates that we should do everything we can to make it predictable and straightforward, while preserving the semantics it was designed to provide. You're right that there are plenty of users who have trouble comprehending `@extend`, but there are plenty more who get it. Every time we make it more complicated, the set of people who get it gets smaller.

@Snugug Adding a flag for this behavior is certainly one way to allow a back door for users to be explicit. Feel free to file a separate issue about it where we can discuss it further.
",nex3,Snugug
456,2013-12-16 22:12:39,"@lolmaus Please keep your language civil. I've edited out your profanity, and further cursing will result in me deleting your comments entirely. These discussions are public and I won't have them taking a tone that makes the community looks like a bunch of squabbling adolescents.

Having `@extend` silently ignore all selectors outside of the current directive context is a bad idea. Not only does it not match the user's expectation of the behavior or the semantics of extend, it does so without any indication of why or in what way it's failing. To a user who (reasonably) expects `@extend` to work across `@media` boundaries, it will look as though some of their styles work and some don't. They'll need to do serious debugging to figure out what's going on and why.

The idea that users already have trouble understanding how `@extend` works, so we shouldn't worry about making it harder to understand is deeply misguided. The fact that `@extend` is already complex indicates that we should do everything we can to make it predictable and straightforward, while preserving the semantics it was designed to provide. You're right that there are plenty of users who have trouble comprehending `@extend`, but there are plenty more who get it. Every time we make it more complicated, the set of people who get it gets smaller.

@Snugug Adding a flag for this behavior is certainly one way to allow a back door for users to be explicit. Feel free to file a separate issue about it where we can discuss it further.
",nex3,lolmaus
456,2013-12-17 09:08:24,"@nex3 I fully agree to what you said, there is nothing worse than a machine that does something because a User made a mistake. It should never ignore errors and keep the user thinking he did everything right. Meanwhile the Machine would have to do something that it thought that the user wanted to have. But How should the machine know?
I fully believe in the future of SASS, because the maintainers fight hard to keep up the Quality. As I said above: ""protect the bungling!""
",Hannes-III,nex3
450,2016-06-13 15:25:31,"@ZChunara  looks like in the gist was a . in the last line check out this: http://www.sassmeister.com/gist/858d3b3bf9ec2a95dccfaa11d830b701
",douglasdeodato,ZChunara
447,2012-08-27 17:38:47,"@nex3 thoughts -- the parsing issues might not be a big deal, but the user issues might be.
",chriseppstein,nex3
447,2013-01-14 23:41:00,"@ianstormtaylor Please show me a code example where words are a markedly worse experience for you.
",chriseppstein,ianstormtaylor
442,2013-05-21 07:59:17,"@devinfd To solve this temporarily we use https://github.com/suisho/grunt-cssjoin
",LoicMahieu,devinfd
442,2013-06-11 02:33:54,"@nex3, @chriseppstein Please let me know if I can help, once you've figured out the syntax and how this would fit in the codebase!
",pwnall,nex3
442,2013-06-11 02:33:54,"@nex3, @chriseppstein Please let me know if I can help, once you've figured out the syntax and how this would fit in the codebase!
",pwnall,chriseppstein
442,2013-12-05 21:41:59,"@nex3 Could you please explain why this is something your not interested in supporting given the context of needing vendor CSS files? Perhaps a reasonable explanation would help those of us who :+1: this PR. 
",jpdesigndev,nex3
442,2013-12-09 21:33:27,"@nex3 Your right, you did mention this previously. Certainly, this seems reasonable enough for me to drop it :)

Thanks for the explanation.
",jpdesigndev,nex3
442,2013-12-09 21:35:19,"@nex3 My offer (to help out with the grunt work once you have the design figured out) still stands :heart: 
",pwnall,nex3
442,2014-12-15 19:42:46,"@nex3 Is there any timeline for the import revamp?

This is a feature I need now, and I see this is an old issue. Any updates? I'm also more than happy to provide help where needed as I'm using sass professionally.
",pthrasher,nex3
441,2012-12-05 10:17:46,"@pwnall but i find this syntax not support relative path:



will be error ~
",windyGex,pwnall
441,2012-12-05 12:50:30,"@windyGex Sorry, but @nex3 has already rejected this proposal in #442
",pwnall,nex3
441,2012-12-05 12:50:30,"@windyGex Sorry, but @nex3 has already rejected this proposal in #442
",pwnall,windyGex
440,2012-07-08 01:59:19,"I like the idea of having a built-in namespacing feature but just like @chriscoyier I don't know the Sass implementation enough to tell if it's conceivable.

Also, in terms of syntax, this could be an alternative too:



It is really close to the current mixins syntax (without parameters):



So I guess the implementation would be easier with this one.

That being said, there is already a way to add some modularity to namespaces via string interpolation:



Which outputs:



It's a little bit verbose but does the job :)
",verekia,chriscoyier
440,2012-07-11 00:59:35,"@chriscoyier That's a good question, I'm really not sure how @extend works on a low level... I wish I had enough foo to contribute to this though! :/

@thierryk A lot of SASS's extra features are used with the @ sign... such as @extend, @include.

@verekia , I do like the @namespace mynamespace  {...} you proposed better, less is more!

@ReinierK I think my JavaScript mindset was triggering that thinking for syntax :)  @chriseppstein Commented via twitter about possibly using the & symbol for this use case and referenced this: https://github.com/nex3/sass/issues/286 so the syntax
",AdamBrodzinski,chriscoyier
440,2012-07-11 00:59:35,"@chriscoyier That's a good question, I'm really not sure how @extend works on a low level... I wish I had enough foo to contribute to this though! :/

@thierryk A lot of SASS's extra features are used with the @ sign... such as @extend, @include.

@verekia , I do like the @namespace mynamespace  {...} you proposed better, less is more!

@ReinierK I think my JavaScript mindset was triggering that thinking for syntax :)  @chriseppstein Commented via twitter about possibly using the & symbol for this use case and referenced this: https://github.com/nex3/sass/issues/286 so the syntax
",AdamBrodzinski,verekia
440,2012-07-11 00:59:35,"@chriscoyier That's a good question, I'm really not sure how @extend works on a low level... I wish I had enough foo to contribute to this though! :/

@thierryk A lot of SASS's extra features are used with the @ sign... such as @extend, @include.

@verekia , I do like the @namespace mynamespace  {...} you proposed better, less is more!

@ReinierK I think my JavaScript mindset was triggering that thinking for syntax :)  @chriseppstein Commented via twitter about possibly using the & symbol for this use case and referenced this: https://github.com/nex3/sass/issues/286 so the syntax
",AdamBrodzinski,thierryk
440,2012-07-11 01:10:36,"@AdamBrodzinski Thanks! I don't know why I thought I had to reply to your ""request"" on twitter when obviously I know nothing about the subject :)
",thierryk,AdamBrodzinski
440,2012-07-11 01:12:38,"@thierryk Maybe someday you'll switch to dark side... I mean the pre-processor side =)
",AdamBrodzinski,thierryk
430,2012-06-24 18:21:24,"@chriseppstein Thanks for the response but the variables.scss and borders.scss already have underscores in their file name. Sass allows you to not have to specify the underscore when importing. But be assured that the only file that is generated is the top level file (eg the file that has the above content) all other files have underscores in their file name
",Integralist,chriseppstein
430,2012-07-01 12:17:22,"@nex3 thank you! that appears to have been the problem :-)
",Integralist,nex3
429,2012-08-24 17:26:06,"Yes, but 



stays



which is the problem @dustinwilson reported and @Snugug confirmed.
",samuelvogel,dustinwilson
429,2012-08-24 17:26:06,"Yes, but 



stays



which is the problem @dustinwilson reported and @Snugug confirmed.
",samuelvogel,Snugug
429,2012-08-24 17:54:42,"As @dustinwilson mentioned for dynamic `@keyframes` or `@viewport` definitions with browser prefixes.
",samuelvogel,dustinwilson
429,2014-08-01 21:23:05,"As @nex3 noted, this issue is still open.
",chriseppstein,nex3
429,2014-08-06 11:36:32,"@chriseppstein Are you planning a solution for this? If so, when can we expect that update?
",Gespinha,chriseppstein
429,2014-08-06 23:18:27,"@Gespinha what I see here looks fine for the most part as long as the `@` is not being interpolated.
",chriseppstein,Gespinha
429,2014-08-07 08:46:18,"@chriseppstein The code doesn't work.



generates this:



So the problem is still there. SASS should be able to interpolate @ directives. This would simplify interpolation and dynamic directives generation over a whole project, thus making development much easier and intuitive.
",Gespinha,chriseppstein
429,2014-08-07 08:50:09,"@lolmaus indeed!
",Gespinha,lolmaus
429,2014-08-07 16:22:04,"@Gespinha Right, I was saying that it should work, that's why this issue is still open.
",chriseppstein,Gespinha
429,2014-08-07 16:25:35,"@chriseppstein Is this something complicated (long development) to resolve? Because it is a really annoying obstacle ;)
",Gespinha,chriseppstein
429,2014-08-07 16:33:59,"@Gespinha  It requires a change to the Sass parser and evaluator. It's a few hours of work. I agree it's annoying and [I feel your pain](https://github.com/Compass/compass/blob/master/core/stylesheets/compass/css3/_animation.scss#L37-L48) too.
",chriseppstein,Gespinha
429,2014-08-07 16:38:03,"@chriseppstein Can we expect a solution to this before 3.4? That would be just great! (thanks by the compass snippet btw)
",Gespinha,chriseppstein
429,2014-08-07 16:38:58,"@Gespinha No, this is not slated for 3.4 at this time.
",chriseppstein,Gespinha
429,2016-01-21 15:47:41,"@KarstenBuckstegge Can you post your Sass code that's not working? This works:


",davidkpiano,KarstenBuckstegge
425,2013-12-20 03:09:51,"@nex3 
May I ask where you want to modify it specifically? I hope as soon as possible to have a clear argument to specify the output indentation size.
",yisibl,nex3
422,2012-06-30 01:32:41,"Thanks @dustinwilson, that was enough to get a reproduction up and running.
",nex3,dustinwilson
412,2012-09-28 20:58:37,"@krisbulman Is there a bug in this commit that's causing errors in compass, or is it just a matter of updating Compass to use the new semantics? /cc @chriseppstein
",nex3,krisbulman
412,2012-10-30 16:35:32,"@nex3 Forgive my amateur questions, but I appear to be the only one plugging away at this at the moment. 

Does :filename need special handling now? The only way I could patch Compass to work was by using the gsub in your test/sass/plugin_test.rb on sass_filename before it was passed to the options hash 

see here: https://github.com/krisbulman/compass/commit/3de54c895a9f7244332e60ed7a39bc9fc33b55ea

and it doesn't work on multiple imports (as noted by the comment someone posted). 
",krisbulman,nex3
412,2012-11-03 00:30:07,"@sascha-egerer Can you provide an example where it generates the wrong output?
",nex3,sascha-egerer
408,2013-05-08 02:15:29,"@cimmanon @erfanimani Currently this limitation is created by our need to be able to efficiently compute dependencies for files that have not been compiled.

However, I do believe there is a way to have a more dynamically discovered dependency graph which would provide the same level of performance benefit for recompilation and allow us to remove the limitation for static analysis of @import directives.
",chriseppstein,erfanimani
408,2013-05-08 02:15:29,"@cimmanon @erfanimani Currently this limitation is created by our need to be able to efficiently compute dependencies for files that have not been compiled.

However, I do believe there is a way to have a more dynamically discovered dependency graph which would provide the same level of performance benefit for recompilation and allow us to remove the limitation for static analysis of @import directives.
",chriseppstein,cimmanon
407,2012-07-02 12:44:25,"+1to @alanhogan's suggestion

I have `@include` in a partial that's used by two different stylesheets. I would like to make the mixin noop in one stylesheet, and to generate the appropriate code in the other one.

Right now I'm getting this error `Mixin ""foo-bar"" does not accept a content block.`

My current workaround is to define `foo-bar` mixin with a never-executing conditional:


",sidonath,alanhogan
407,2016-05-09 17:06:43,"@alanhogan want to check if `@content` is passed. How are using this? Would love to see a sample of your code.
",ogbaoghene,alanhogan
401,2012-05-31 17:52:51,"@micahgodbolt the tests are a good overview. did you read those yet?
",chriseppstein,micahgodbolt
401,2012-05-31 17:56:41,"Oh hey...those are links. Guess I should fully explore the page before asking questions. Those should work just fine. Thanks @chriseppstein 
",micahgodbolt,chriseppstein
401,2012-05-31 17:58:01,"@StanAngeloff I am planning on making a separate pull for lists soon. we already have `join` for lists.
",chriseppstein,StanAngeloff
401,2012-05-31 18:00:30,"@chriseppstein: Sounds very promising. RE `join`: joins two lists together, I should probably have used `implode` as in join a list and return a string, e.g. `implode('.', join((hello), (world), space)) -> 'hello.world'`.

I keep a handy `_functions.scss` around, hopefully lists (and other string extras) can be implemented as pure Sass `@-function`s. Is that the preferred approach when logic allows it?
",StanAngeloff,chriseppstein
401,2012-05-31 20:09:31,"> Is that the preferred approach when logic allows it?

@StanAngeloff I'm on the fence about that and am curious how your experience has been. we should chat about that in a separate thread.
",chriseppstein,StanAngeloff
401,2012-10-04 14:37:29,"could you plz merge it, I need that functionality :) @chriseppstein thanks for good work!
",industral,chriseppstein
401,2012-12-13 23:53:55,"@chriseppstein any chance to address the comments (especially the deletion of what looks like some critical code in the case switching) so this can get merged?

(also thanks, this is great!)
",jkmaxwell,chriseppstein
401,2013-01-17 16:19:19,"@chriseppstein please address comments
",jkmaxwell,chriseppstein
401,2013-02-09 19:41:09,"@chriseppstein Would be great to see this merged. How can I help? Happy to take on the needed code changes.
",brentd,chriseppstein
401,2013-12-06 23:43:25,"@Anahkiasen: not currently.

@rvinay88: it was renamed to `str-slice`.
",nex3,rvinay88
401,2013-12-06 23:43:25,"@Anahkiasen: not currently.

@rvinay88: it was renamed to `str-slice`.
",nex3,Anahkiasen
394,2012-06-01 05:14:52,"@shaldipur Have you tried to update your Dropbox client?
",thibaudgg,shaldipur
394,2012-06-03 19:50:31,"@shaldipur Do you have the `rb-fsevent` gem installed? sass uses pooling by default when there is no adapter installed on the system.
@nex3 Maybe you could add an info message telling people that sass doesn't come with Listen adapters and that they need to install it separately? Otherwise, people could be confused that something went wrong.
",Maher4Ever,shaldipur
394,2012-06-03 19:50:31,"@shaldipur Do you have the `rb-fsevent` gem installed? sass uses pooling by default when there is no adapter installed on the system.
@nex3 Maybe you could add an info message telling people that sass doesn't come with Listen adapters and that they need to install it separately? Otherwise, people could be confused that something went wrong.
",Maher4Ever,nex3
394,2012-06-03 21:14:49,"@Maher4Ever I don't have this one installed, but I recall having installed it when I installed the Listen gem separately.  I still got the same error.
",shaldipur,Maher4Ever
394,2012-06-05 19:03:12,"@shaldipur could you try the solution given in issue #362: https://github.com/nex3/sass/issues/362#issuecomment-6112881
",thibaudgg,shaldipur
392,2012-05-17 23:39:06,"thx @chriseppstein. its not different than `:not()` ... except that `:except()` implemented in sass could be backward-compatible with CSS2 browsers. ;)
",mikesmullin,chriseppstein
391,2012-05-15 14:51:09,"As per @chriseppstein's Twitter request, I made a gist showing how I'm using extend (very simplified): https://gist.github.com/2702326

All extendable classes are scoped inside the media directives in which they are used.
",rachelnabors,chriseppstein
380,2012-05-12 09:18:08,"@nex3 I'd say that list manipulation may not be very important to every day Sass users, but for those of us building frameworks in Sass, lists are very important and using and manipulating them winds up being a fairly hacky process. More robust list, and for that matter string, functions in Sass would be a great boon to the language.
",Snugug,nex3
380,2012-05-12 10:08:10,"I agree with this sentiment. But I think @nex3's point was simply that the behavior needn't be core to the language. A list function may suffice. 

Hunt & pecked on my iPhone... Sorry if it's brief!

On May 12, 2012, at 10:18 AM, Snugugreply@reply.github.com wrote:

> @nex3 I'd say that list manipulation may not be very important to every day Sass users, but for those of us building frameworks in Sass, lists are very important and using and manipulating them winds up being a fairly hacky process. More robust list, and for that matter string, functions in Sass would be a great boon to the language.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/380#issuecomment-5666997
",chriseppstein,nex3
378,2013-01-27 03:22:46,"@nex3 While it is understood Sass isn't a ""full-fledged programming language"", and that it is targeted at both developers and designers alike, control structures/directives such as `@break` and `@continue` would alleviate the need for deeply nested `@if` blocks. Furthermore, it is understood that this adds complexity, for both the developers (you folks) and consumers (me folks) of the language, but no matter how you slice it, Sass has become a programming language (full-fledged or not). The programming-savvy will reap the benefits from such features, and the rest won't be hindered in any way.
",northborndesign,nex3
378,2015-01-07 07:08:33,"@function getAnimationTime($arrayTime, $index){
  $this_duration:();
  $this_delay:();
  $index: if(($index <= 0), 1, $index);
  @each $elAniTime in $arrayTime {
    //no break, continue or index of loop is supported, bad luck
  }

  $animationTime: $this_duration $this_delay;
  @return $animationTime;
}

@nex3 
break, continue, even index of loop is great.
",IEfucker,nex3
377,2012-05-03 18:24:25,"@nex3 I reinstalled the whole thing and the error disappeared, so it might have had something to do with a crippled Ruby install on my end. Let's forget it for now (as I can't reproduce it anymore).

Also, I don't get the fallback message anymore (so it ""pretends"" it's actually listening the file, but ""listen"" is not installed (as it doesn't get installed with sass, using RubyInstaller on Windows)). This is extremely weird and confusing as sass should at least fallback to polling, instead of doing nothing at all.

Is there anything else I can do to help you resolve this?
",TheDutchCoder,nex3
377,2012-05-04 14:38:23,"@ReinierK Your first problem where Listen crashes is caused because for some reason `ntuser.dat.LOG1` was checked for content modifications, although it's a protected Windows file. I'll see what we can do in Listen to avoid these issues in the future.

I couldn't reproduce your second issue in which sass stops working after the first time. I tried it with ruby 1.9.3-p125 on WIndows 7 SP-1 (64-bit) and Ubuntu 11.10 (32-bit).

@nex3 After looking closely at how Listen gets included in sass, I realized that some dependencies of Listen does not get installed. That's why Listen falls to polling on some machines, I didn't see this the previous time because the Listen-gem is of course already installed on my machines. Listen is dependent on 3 other gems (which work as adapters for different operating-systems). I would suggest either including the Listen gem as a dependency in the `.gemspec` file, or just packing the other dependent gems and adding them to the loadpath, just like Listen is currently included in sass. I'll be glad to help with this process if any help is needed.
",Maher4Ever,nex3
377,2012-05-04 14:56:10,"@Maher4Ever Are you completely sure Listen is included in sass? Because in every clean install I do, after installing sass, there's no listen gem to be found. I first need to install the dev kit and then manually install listen for it to show up (not that it works after that, but still).

I'm a complete Ruby newbee (and honestly enough I don't want to invest a lot of time learning it), so that might be part of the issue here.

Is there any way to see what ""listen"" is doing from the prompt? I have a strong feeling after the initial launch is keeps running in the background and causes the problem where it won't be listening for any other files after 1 run.
",TheDutchCoder,Maher4Ever
377,2012-05-04 17:31:08,"@Maher4Ever Okay thanks for clearing that up for me. I located the listener now, so it should be fine indeed.
There are no ruby processes running after I abort the current --watch, but it could very well be inside a svchost if it's something that's run from a dll, so there's no real way of checking that for me.

I will do a complete re-install today, double check if listen is in the folders (and if I can get it running) and see if I can come up with a scenario that you can reproduce.
",TheDutchCoder,Maher4Ever
377,2012-05-04 22:28:18,"@ReinierK I can't reproduce this on Windows either. I've tried all the scenarios you've mentioned and they all work fine for me. What version of Windows are you running?

It's also worth noting that apparently Windows paths using backslashes were being handled incorrectly. This should be fixed by 3ee3411077b1df9d6747d71ab8bf4ab4506917aa. I don't think this is the source of most of your errors, though.

@Maher4Ever The way Sass used FSSM was to bundle just the core polling and glue code, and allow users to install the full gem if they want to take advantage of native OS facilities.

I'm going to release Sass 3.1.17 some time today, with has @Maher4Ever's fix. If I keep getting reports that it's not working, though, I may have to go back to FSSM :-/.
",nex3,Maher4Ever
377,2012-05-04 23:03:05,"@nex3 I'm having this issue on Windows 7 (64-bit). On Vista (64-bit) sometimes it works, sometimes it doesn't. If it works (polling is used), polling takes anywhere between 10 and 30 seconds, which (for me) is not good enough to work with.
",TheDutchCoder,nex3
377,2012-05-04 23:10:37,"@nex3 Ok, I understand what you are saying. After all, the `force_polling` option was added for these usecases :)

I've spent quite some time today looking at how sass works and I almost [rewrote](https://github.com/Maher4Ever/sass/commit/03a68aad6b758960adece5fbc8aaf5782e40ba18) how the listener is created in sass. It's simpler now, but also works. The plugin didn't account for new files being added, so no callbacks were registered for them; hence why new directories didn't get picked up. 

Also, there is no need to keep a list of files in the plugin as Listen already does that. I didn't send a pull request because 2 tests fail ( because of [this line](https://github.com/Maher4Ever/sass/commit/03a68aad6b758960adece5fbc8aaf5782e40ba18#L0R191) ). I disabled the OS-specific plugins and thus there is no need for any extra dependency.

I'm still not familiar with sass internals, so please take a look at it and maybe you can adapt it for a better integration with Listen.
",Maher4Ever,nex3
377,2012-05-05 00:05:34,"@Maher4Ever Thanks for the change; I've made a few edits and merged it in.

@ReinierK I'll be releasing this as 3.1.17 shortly.
",nex3,Maher4Ever
377,2012-05-05 01:50:19,"@nex3 Thanks so much, after a quick test I found it's been working (with listen, no polling), although the actual updating is still a little slow (between 5 to 10 secs for me)
",TheDutchCoder,nex3
377,2012-05-05 12:00:11,"@nex3 Don't worry about it, I'd like to see this work well for everyone as I love sass! ;-)
It takes long to both update the command line and the file. In fact, as soon as the command line updates, the file itself updates immediately as well, so it's not a visual lag on the prompt, but ""real"" lag with updating.

I know the default latency is 0.5 seconds, but the update now takes about 3 seconds (give or take, sometimes it's faster, sometimes slower).

I'm a little worried about the CPU load still, on my Core Duo it takes 75% of both cores when watching. I know nothing about ruby, but to me that seems wrong, or at least inefficient (even for a 0.5 second latency).
",TheDutchCoder,nex3
377,2012-05-06 13:49:27,"@nex3 @Maher4Ever Okay thanks guys, then the first step has been taken successfully (getting sass to work again) and I'll try to help out Listen as much as I can!
",TheDutchCoder,nex3
377,2012-05-06 13:49:27,"@nex3 @Maher4Ever Okay thanks guys, then the first step has been taken successfully (getting sass to work again) and I'll try to help out Listen as much as I can!
",TheDutchCoder,Maher4Ever
374,2012-05-06 20:38:45,"@petebrowne The reason to omit properties that are set to null, an empty string, or an empty list is that it optimizes a very common case of omitting a property that not explicitly passed without a bunch of `@if` boilerplate. It's also not obviously a conceptual error because if you set a property to nothing has a very similar feeling to not setting it.
",chriseppstein,petebrowne
374,2012-05-11 22:25:42,"Awesome! @chriseppstein, @nex3 Thanks for the help & suggestions
",petebrowne,nex3
374,2012-05-11 22:25:42,"Awesome! @chriseppstein, @nex3 Thanks for the help & suggestions
",petebrowne,chriseppstein
366,2012-08-07 12:40:42,"@jeremyw well, there's also the code indent, afaik
",stryju,jeremyw
366,2012-08-27 21:42:05,"@Snugug Note the arguments are more like CSS making it much more awesome when doing things like vendor prefixing.


",scottkellum,Snugug
366,2012-08-27 22:09:23,"@chriseppstein Because I'm not setting a property and the semicolon is the property syntax. That syntax, at a glance, would look to me like a property and therefore sets up my mental model to expect a a single output that will look similar to the input. CSS3 prefixing mixins and Compass background mixins make sense this way, but to me, thinking about the projects I'm a part of, grid and media query mixins don't make sense in this snytax.

@MoOx And I don't like them there either.
",Snugug,MoOx
366,2012-08-27 22:09:23,"@chriseppstein Because I'm not setting a property and the semicolon is the property syntax. That syntax, at a glance, would look to me like a property and therefore sets up my mental model to expect a a single output that will look similar to the input. CSS3 prefixing mixins and Compass background mixins make sense this way, but to me, thinking about the projects I'm a part of, grid and media query mixins don't make sense in this snytax.

@MoOx And I don't like them there either.
",Snugug,chriseppstein
366,2012-08-27 23:26:20,"@Snugug in the output you're not setting a property, but conceptually, you are in a way. In some sense, this code example is saying `.foo` has a property of `grid-span` with a value of `1, 2`. Where the property is implemented by you (or a library) by re-writing into other properties and potentially sub-selectors.
",chriseppstein,Snugug
366,2012-08-27 23:48:46,"Right, I don't like that mental model and I think that's potentially confusing for new users. It's actually something I specifically dislike about Stylus

On Monday, August 27, 2012 at 7:26 PM, Chris Eppstein wrote:

> @Snugug (https://github.com/Snugug) in the output you're not setting a property, but conceptually, you are in a way. In some sense, this code example is saying .foo has a property of grid-span with a value of 1, 2. Where the property is implemented by you (or a library) by re-writing into other properties and potentially sub-selectors.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/366#issuecomment-8074533).  
",Snugug,Snugug
366,2012-09-28 20:49:04,"After having this sit in my head for a few weeks, I like the `++mixin: argument` syntax more than I dislike it. I'd love to see this moved on and implemented as soon as there's some dev time to do so and assuming @nex3 and @chriseppstein are still on board.
",Snugug,chriseppstein
366,2013-07-27 21:57:52,"@hcatlin big fan of that as well but it has all the same language issues as the + did. Instead of the next sibling selector the ~ represents the [following sibling selector](http://dev.w3.org/csswg/selectors4/#general-sibling-combinators).
",scottkellum,hcatlin
366,2013-07-29 19:02:48,"@Snugug Nothing happened to it. It's still on the table.

@hcatlin 

> What does it look like if there are no args?

I consider this a sugar for a subset of the `@include` syntax. I don't think it should support content blocks, for example. As such, I'm not particularly worried about the no argument version. I think, in most cases, placeholders should be used when no arguments are desired. I'm ok with making doing the wrong thing harder here.

> But, maybe my bigger concern is the use of a comma separated list after the "":"" If we want it to look like a CSS attributes, commas don't make too much sense then.

It's true that CSS prefers spaces to separate arguments and comma to separate multiple values for the same property. But I don't see a way around this and this issue would exist in the other forms that use colon instead of parens. And getting rid of the parens is a key goal for me here. I really do want to make things look more like properties.

> Also, combining those looks like an operation... ""+="" or ""+:"".. especially with the spacing how you have it.

Yes, that was actually the inspiration. It shows ""adding into"". except the thing being added into is the ruleset, not the mixin.

> my-mixin+: arg1, arg2;
> my-mixin +: arg1, arg2;
> my-mixin+: arg1 arg2;

All of these are fine, as long as there is no space between `+` and `:`.

> What about non-comma delim, and just a + instead of the "":""?

Not sure why, but this idea doesn't sit well with me. It just doesn't seem to have any analog with existing code. But I think it would be ok from a parsing perspective.
",chriseppstein,Snugug
366,2013-07-29 19:02:48,"@Snugug Nothing happened to it. It's still on the table.

@hcatlin 

> What does it look like if there are no args?

I consider this a sugar for a subset of the `@include` syntax. I don't think it should support content blocks, for example. As such, I'm not particularly worried about the no argument version. I think, in most cases, placeholders should be used when no arguments are desired. I'm ok with making doing the wrong thing harder here.

> But, maybe my bigger concern is the use of a comma separated list after the "":"" If we want it to look like a CSS attributes, commas don't make too much sense then.

It's true that CSS prefers spaces to separate arguments and comma to separate multiple values for the same property. But I don't see a way around this and this issue would exist in the other forms that use colon instead of parens. And getting rid of the parens is a key goal for me here. I really do want to make things look more like properties.

> Also, combining those looks like an operation... ""+="" or ""+:"".. especially with the spacing how you have it.

Yes, that was actually the inspiration. It shows ""adding into"". except the thing being added into is the ruleset, not the mixin.

> my-mixin+: arg1, arg2;
> my-mixin +: arg1, arg2;
> my-mixin+: arg1 arg2;

All of these are fine, as long as there is no space between `+` and `:`.

> What about non-comma delim, and just a + instead of the "":""?

Not sure why, but this idea doesn't sit well with me. It just doesn't seem to have any analog with existing code. But I think it would be ok from a parsing perspective.
",chriseppstein,hcatlin
366,2013-08-01 23:39:42,"After waiting a couple days and sleeping on it... I'm growing fond of +:

On Mon, Jul 29, 2013 at 12:02 PM, Chris Eppstein
notifications@github.comwrote:

> @Snugug https://github.com/Snugug Nothing happened to it. It's still on
> the table.
> 
> @hcatlin https://github.com/hcatlin
> 
> What does it look like if there are no args?
> 
> I consider this a sugar for a subset of the @include syntax. I don't
> think it should support content blocks, for example. As such, I'm not
> particularly worried about the no argument version. I think, in most cases,
> placeholders should be used when no arguments are desired. I'm ok with
> making doing the wrong thing harder here.
> 
> But, maybe my bigger concern is the use of a comma separated list after
> the "":"" If we want it to look like a CSS attributes, commas don't make too
> much sense then.
> 
> It's true that CSS prefers spaces to separate arguments and comma to
> separate multiple values for the same property. But I don't see a way
> around this and this issue would exist in the other forms that use colon
> instead of parens. And getting rid of the parens is a key goal for me here.
> I really do want to make things look more like properties.
> 
> Also, combining those looks like an operation... ""+="" or ""+:"".. especially
> with the spacing how you have it.
> 
> Yes, that was actually the inspiration. It shows ""adding into"". except the
> thing being added into is the ruleset, not the mixin.
> 
> my-mixin+: arg1, arg2;
> my-mixin +: arg1, arg2;
> my-mixin+: arg1 arg2;
> 
> All of these are fine, as long as there is no space between + and :.
> 
> What about non-comma delim, and just a + instead of the "":""?
> 
> Not sure why, but this idea doesn't sit well with me. It just doesn't seem
> to have any analog with existing code. But I think it would be ok from a
> parsing perspective.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/366#issuecomment-21743137
> .
",hcatlin,Snugug
366,2013-08-01 23:39:42,"After waiting a couple days and sleeping on it... I'm growing fond of +:

On Mon, Jul 29, 2013 at 12:02 PM, Chris Eppstein
notifications@github.comwrote:

> @Snugug https://github.com/Snugug Nothing happened to it. It's still on
> the table.
> 
> @hcatlin https://github.com/hcatlin
> 
> What does it look like if there are no args?
> 
> I consider this a sugar for a subset of the @include syntax. I don't
> think it should support content blocks, for example. As such, I'm not
> particularly worried about the no argument version. I think, in most cases,
> placeholders should be used when no arguments are desired. I'm ok with
> making doing the wrong thing harder here.
> 
> But, maybe my bigger concern is the use of a comma separated list after
> the "":"" If we want it to look like a CSS attributes, commas don't make too
> much sense then.
> 
> It's true that CSS prefers spaces to separate arguments and comma to
> separate multiple values for the same property. But I don't see a way
> around this and this issue would exist in the other forms that use colon
> instead of parens. And getting rid of the parens is a key goal for me here.
> I really do want to make things look more like properties.
> 
> Also, combining those looks like an operation... ""+="" or ""+:"".. especially
> with the spacing how you have it.
> 
> Yes, that was actually the inspiration. It shows ""adding into"". except the
> thing being added into is the ruleset, not the mixin.
> 
> my-mixin+: arg1, arg2;
> my-mixin +: arg1, arg2;
> my-mixin+: arg1 arg2;
> 
> All of these are fine, as long as there is no space between + and :.
> 
> What about non-comma delim, and just a + instead of the "":""?
> 
> Not sure why, but this idea doesn't sit well with me. It just doesn't seem
> to have any analog with existing code. But I think it would be ok from a
> parsing perspective.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/366#issuecomment-21743137
> .
",hcatlin,hcatlin
366,2013-08-01 23:42:24,"@hcatlin how do you like



I like that much more than `+:`
",Snugug,hcatlin
366,2013-08-02 23:03:34,"What I don't like about the forward placement is that a list won't line up.

width: 40px;
height: 40px;
++border-radius: 5px;
size: 10px;

It sticks out!

On Thursday, August 1, 2013, Snugug wrote:

> @hcatlin https://github.com/hcatlin how do you like
> 
> .foo {
>   ++mixin: args;}
> 
> I like that much more than +:
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/366#issuecomment-21977801
> .
",hcatlin,hcatlin
366,2013-08-02 23:23:56,"It's a mixin! Shouldn't it stick out so I know something's happening? Border radius is a bad example as its a mixin for a CSS3 property (and one that doesn't need prefixing), but something like a grid or Clearfix mixin should probably not skim like a normal CSS property

On Aug 2, 2013, at 7:03 PM, Hampton Catlin notifications@github.com wrote:

> What I don't like about the forward placement is that a list won't line up. 
> 
> width: 40px; 
> height: 40px; 
> ++border-radius: 5px; 
> size: 10px; 
> 
> It sticks out! 
> 
> On Thursday, August 1, 2013, Snugug wrote: 
> 
> > @hcatlin https://github.com/hcatlin how do you like 
> > 
> > .foo { 
> > ++mixin: args;} 
> > 
> > I like that much more than +: 
> > 
> > ‚Äî 
> > Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/366#issuecomment-21977801 
> > . 
> > 
> > ‚Äî
> > Reply to this email directly or view it on GitHub.
",Snugug,hcatlin
366,2013-10-17 01:11:52,"+1 for this syntactic sugar!

With the new `@at-root` directive and the [BEM](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/) syntax, I would love to write something like that:
(inspired by 2 [mixins](http://blog.unakravets.com/post/64113156740/sass-3-3-at-root-bem) from @scottkellum)



This would become a lot more readable, and would output:


",emagnier,scottkellum
366,2015-01-03 17:18:22,"I think +myMixin() syntax is the clearest. With parens so as to disambiguate between a mixin invocation and the sibling selector. @chriseppstein could you make the call on this so it can move forward?
",geddski,chriseppstein
366,2015-01-03 18:46:01,"The problem, as stated by @chriseppstein [earlier in](https://github.com/sass/sass/issues/366#issuecomment-7559687) [this thread](https://github.com/sass/sass/issues/366#issuecomment-7560114) with `+my-mixin` (or `+ my-mixin`) is that it's ambiguous with the adjacent sibling selector. The two proposed syntaxes that have been discussed (besides transparent mixins like Stylus, which @nex3 believes is [""‚Ä¶a pretty grievous misfeature in Stylus.""](https://github.com/sass/sass/issues/525#issuecomment-8995033) ) are `++my-mixin` and `my-mixin +:`
",Snugug,chriseppstein
363,2012-05-09 14:47:25,"@chriseppstein To reference your comment in the previous issue (#343), you state that the keywords are used to reduce space. If SASS were really trying to conserve the number of bytes it outputs, shouldn't it actually convert #ffffff and #000000 to #fff and #000 since those are each 2 bytes less rather than their keywords?

In any event, this is still something that needs to be a configuration option. If you are supporting IE and want to output background gradients using DXImageTransform.Microsoft.gradient, you must pass it a hex color. See http://msdn.microsoft.com/en-us/library/ms532997(v=vs.85).aspx for more information on it. Your own Compass has a hack for this, which I think is the wrong way to go about things. https://github.com/chriseppstein/compass/blob/stable/frameworks/compass/stylesheets/compass/css3/_images.scss#L87
",shaneriley,chriseppstein
363,2012-05-09 19:53:36,"@shaneriley sass does do that. Except it seems that it doesn't do it when it doesn't have to fully parse the property value. This is a bug IMO. @nex3 should weigh in.

Try running:



thru: `scss -t compressed`

and you'll get:



The compass function exists and is now in Sass itself. It exists because IE has a non-standard treatment of alpha channels where hex takes the form of `#AARRGGBB` and also because they do not support `rgb()` or even shorthand hex. Therefore this is the one place in all of CSS where the output format matters and therefore a hack exists to accomodate the hack that is IE filters.

As such, I do not see a reason to add a configuration option for this. when in non compressed modes, preserving css-valid author formats makes sense as the behavior. That said, feel free to make other use cases if you like, maybe one of those will convince me.
",chriseppstein,shaneriley
363,2012-05-09 20:47:49,"@shaneriley I agree with Chris, configuration is not the correct solution for IE filters. It would put you into a situation where your stylesheets would only work correctly with a certain configuration, which is not something we want. `ie-hex-str` is a pretty good solution, given the awfulness that is IE.

@chriseppstein We don't fully parse simple static properties for performance reasons. If we did, parse time for stylesheets would increase dramatically. It's possible it's worth the tradeoff in compressed mode, but I'm skeptical. I think it would just register as ""my stylesheets suddenly take a lot longer to compile"" for many people.

At some point we may want to introduce a `-O` flag to control the optimization/time tradeoff explicitly.
",nex3,chriseppstein
363,2012-05-09 20:47:49,"@shaneriley I agree with Chris, configuration is not the correct solution for IE filters. It would put you into a situation where your stylesheets would only work correctly with a certain configuration, which is not something we want. `ie-hex-str` is a pretty good solution, given the awfulness that is IE.

@chriseppstein We don't fully parse simple static properties for performance reasons. If we did, parse time for stylesheets would increase dramatically. It's possible it's worth the tradeoff in compressed mode, but I'm skeptical. I think it would just register as ""my stylesheets suddenly take a lot longer to compile"" for many people.

At some point we may want to introduce a `-O` flag to control the optimization/time tradeoff explicitly.
",nex3,shaneriley
363,2012-05-09 20:50:07,"@nex3 I'll do a perf test to see how much cost comes from that change to compressed mode for our app. If it's small enough (~1-2%) I think it's worth it.
",chriseppstein,nex3
363,2012-05-10 18:26:18,"@shaneriley Could you create a new issue for that?
",nex3,shaneriley
363,2012-06-29 15:36:15,"@plindelauf the current solution is to use ie-hex-str($color) to emit filter-safe color values.
",chriseppstein,plindelauf
363,2012-06-29 19:03:40,"Thanks for your reply Chris. However, it does not seem to work out of the box with Rails 3.2.6, sass 3.1.19 and sass-rails 3.2.5. Is there something more I need?

Op 29 jun. 2012, om 17:36 heeft Chris Eppstein het volgende geschreven:

> @plindelauf the current solution is to use ie-hex-str($color) to emit filter-safe strings.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/363#issuecomment-6665280
",plindelauf,plindelauf
363,2013-03-08 20:37:40,"@joevandyk We will be continuing to change colors to their smallest possible output in compressed mode. If you don't want fully compressed, the compact mode is probably best for your needs.
",chriseppstein,joevandyk
363,2013-06-20 20:17:02,"@justnorris That's not true in my tests:



In uncompressed mode, both are translated to `white`, and in compressed mode, both are translated to `#fff`.
",nex3,justnorris
363,2013-07-01 21:18:09,"@chriseppstein The problem is that changing the color names breaks things in some cases. 

I have to maintain a fork of sass (https://github.com/joevandyk/sass/commit/e48a18e247819b70f4524a56629c3ca5397b0733) just for this reason (as I want compressed output, but with the colors as I enter them).
",joevandyk,chriseppstein
363,2013-07-01 22:02:50,"@joevandyk We're going to add this behavior because it enables more efficient debugging -- not to support specific implementations of css parsers. Just don't use the compressed output and you'll be fine.
",chriseppstein,joevandyk
363,2014-02-15 01:50:07,"@nex3 there an eta of when this will get released?
",joevandyk,nex3
363,2014-12-02 17:46:16,"@nex3 any chance that there is a similar force function for rgb? can't seem to find it in the docs.
",adamward84,nex3
363,2014-12-03 04:50:17,"You know the code is broken whenever developers ( users ) are looking for
workarounds to your ""feature"". This makes no sense to me at all.

On Tuesday, December 2, 2014, adamward84 notifications@github.com wrote:

> @nex3 https://github.com/nex3 any chance that there is a similar force
> function for rgb? can't seem to find it in the docs.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/363#issuecomment-65272162.
",justnorris,nex3
363,2014-12-03 05:09:31,"@justnorris - In my case, it makes a lot of sense to automatically convert given a non-dominative browser support. Overall, it makes more sense to convert to the smallest equivalent color possible when you're talking about minifying code. For standard output, I agree it shouldn't be trying to parse it into a smaller / different type/format.
",kratsg,justnorris
363,2014-12-03 20:49:09,"Yeah, I think code minifiers/beautifiers should do that, not a pseudo
language like Sass. I hope that this is fixed some day....

On Wednesday, December 3, 2014, Giordon Stark notifications@github.com
wrote:

> @justnorris https://github.com/justnorris - In my case, it makes a lot
> of sense to automatically convert given a non-dominative browser support.
> Overall, it makes more sense to convert to the smallest equivalent color
> possible when you're talking about minifying code. For standard output, I
> agree it shouldn't be trying to parse it into a smaller / different
> type/format.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/363#issuecomment-65356989.
",justnorris,justnorris
363,2014-12-04 17:36:44,"Aaaaaaand, I'm a lazy idiot. I just wrote my own force-rbga based on the force-hsl method above from @nex3. Here it is for anyone else who wants to be lazy like I did:


",adamward84,nex3
363,2014-12-05 20:47:58,"> You know the code is broken whenever developers ( users ) are looking for workarounds to your ""feature"". This makes no sense to me at all.

@justnorris This is a na√Øve perspective. No feature will be best for everyone all the time. The current behavior works well for the most common use case, and is easy to work around when different behavior is desired.

> Just to add a potentially different perspective, I'm evaluating Sass for use in an application that uses CSS standard to drive something other than web content. We have our own properties, and our own formatting requirements, which are still CSS compliant.

@adamward84 Sass guarantees that, for valid CSS input, it will produce semantically identical CSS output. Per spec, the representation of a color doesn't matter. Why is it important to you?

> I am surprised (and a little miffed) to find a bunch of browser-specific workarounds/hacks/considerations baked into the APIs, to such an extent that they aren't even optional.

They are optional in the sense that you can write (and have written) a mixin to produce different behavior. I'm a big fan of the mixin approach since it makes it very explicit where you're varying from standard behavior and why.

Here's a slightly more flexible version of that mixin:


",nex3,justnorris
363,2014-12-05 20:47:58,"> You know the code is broken whenever developers ( users ) are looking for workarounds to your ""feature"". This makes no sense to me at all.

@justnorris This is a na√Øve perspective. No feature will be best for everyone all the time. The current behavior works well for the most common use case, and is easy to work around when different behavior is desired.

> Just to add a potentially different perspective, I'm evaluating Sass for use in an application that uses CSS standard to drive something other than web content. We have our own properties, and our own formatting requirements, which are still CSS compliant.

@adamward84 Sass guarantees that, for valid CSS input, it will produce semantically identical CSS output. Per spec, the representation of a color doesn't matter. Why is it important to you?

> I am surprised (and a little miffed) to find a bunch of browser-specific workarounds/hacks/considerations baked into the APIs, to such an extent that they aren't even optional.

They are optional in the sense that you can write (and have written) a mixin to produce different behavior. I'm a big fan of the mixin approach since it makes it very explicit where you're varying from standard behavior and why.

Here's a slightly more flexible version of that mixin:


",nex3,adamward84
363,2015-08-26 14:37:14,"@sdhull No, the problem is that you are using the wrong type.  It has been a long standing problem over and over and over again where users think that because `foo == 'foo'` that `white == 'white'` (meanwhile forgetting that `2 != '2'`). 
",cimmanon,sdhull
363,2015-08-26 18:28:16,"@cimmanon that's a fair point, and I'll admit I'm not super familiar with sass script. `$var1: foo; $var2: ""foo""; .panel-#{$var1} { color: white; }; .panel-#{$var2} { color: white; };` outputs `.panel-foo` rule twice. Confusing or naw?

Anyway you're kinda glossing over my point -- which is that (in Rails), development environments and production environments should work as close to the same as possible. As I demonstrated in that snippet, they actually work _opposite_ -- in production, hex remains hex and color names are converted to hex; in development hex is converted to color names and color names remain color names. Do you see my point here?



While I agree that in _my particular case_, the problem was developer error, can you not see how it was compounded by this tool behaving differently in production than development environments?  If it behaved the same in both environments, we would have noticed our error before deploying to production and fixed it. Meanwhile we were able to make styles work as expected locally only to have them break upon deploy.
",sdhull,cimmanon
363,2015-10-12 21:03:54,"@xak It's not a bug when a browser ignores invalid CSS.  See https://github.com/sass/sass/issues/1642
",cimmanon,xak
363,2015-10-12 21:54:52,"@xak You need to encode the hash, so `#cc7c7f` becomes `%23cc7c7f`. I wish Sass had a native `encode()` function (my Sassdash library does have `_encode()`, though), but yeah, it's not a bug.
",davidkpiano,xak
363,2015-10-15 10:44:29,"I am having exactly same problem as @xak, looking forward to this.
",evenfrost,xak
363,2015-10-15 19:57:32,"@cimmanon thanks! 
@evenfrost i opted to use the workaround `fill=""#{rgba($color__form--error, 0.999999)}""` works fine.
",xak,evenfrost
363,2015-10-15 19:57:32,"@cimmanon thanks! 
@evenfrost i opted to use the workaround `fill=""#{rgba($color__form--error, 0.999999)}""` works fine.
",xak,cimmanon
363,2016-03-04 16:00:40,"@defaye You're supposed to use the `ie-hex-str` function when using filters.



Note that if your color happens to have transparency, ie-hex-str will generate the correct value for that.
",cimmanon,defaye
363,2016-03-04 20:04:24,"@cimmanon ah thanks! Thanks for the tip. Had no idea about that.
",defaye,cimmanon
363,2016-08-09 12:49:10,"Thanks for the workaround, @cimmanon !!! Just ran into the exact same problem with Firefox and SVG.
",ptrwllrd,cimmanon
362,2012-04-24 19:35:29,"@thibaudgg:

Windows 7 Enterprise, SP1
ruby 1.8.7 (2011-02-18 patchlevel 334) [i386-mingw32]
Rubygems 1.5.2

**\* LOCAL GEMS ***

addressable (2.2.6)
chunky_png (1.2.5)
css_parser (1.2.5, 1.1.8, 1.1.5)
fssm (0.2.8.1)
haml (3.0.25)
hpricot (0.8.4)
htmlentities (4.3.0, 4.2.4)
nokogiri (1.5.0 x86-mingw32, 1.4.4.1 x86-mingw32)
premailer (1.7.3, 1.6.2)
rake (0.9.2.2, 0.8.7)
rdebug (0.1)
rdiscount (1.6.8)
sass (3.2.0.alpha.103)

I'm not sure of the hardware, but I can get that info for you.

Certainly not the environment of my choice, but this is what we use at work. Thanks for looking into this!
",davidrivers,thibaudgg
362,2012-04-27 06:48:48,"@farneman what is your system setup?
@nex3 Listen isn't a dependency of sass?
",thibaudgg,nex3
362,2012-04-27 06:48:48,"@farneman what is your system setup?
@nex3 Listen isn't a dependency of sass?
",thibaudgg,farneman
362,2012-04-27 13:31:11,"@thibaudgg I'm using Sass 3.1.16 on Mac OS X 10.6.8. 

I've tried both the system default Ruby 1.8.7 and Ruby 1.9.3 with RVM. 

Using RubyGems 1.8.23.

Gems:
**\* LOCAL GEMS ***

abstract (1.0.0)
actionmailer (3.2.3, 3.2.2, 3.2.1, 3.1.1, 3.0.12, 3.0.9)
actionpack (3.2.3, 3.2.2, 3.2.1, 3.1.4, 3.1.1, 3.0.12, 3.0.9)
activemodel (3.2.3, 3.2.2, 3.2.1, 3.1.4, 3.1.1, 3.0.12, 3.0.9)
activerecord (3.2.3, 3.2.2, 3.2.1, 3.1.1, 3.0.12, 3.0.9)
activeresource (3.2.3, 3.2.2, 3.2.1, 3.1.1, 3.0.12, 3.0.9)
activesupport (3.2.3, 3.2.2, 3.2.1, 3.1.4, 3.1.1, 3.0.12, 3.0.9)
acts_as_ferret (0.5.4, 0.5.3)
ansi (1.4.2, 1.4.1)
arel (3.0.2, 3.0.0, 2.2.3, 2.2.1, 2.0.10)
bcrypt-ruby (3.0.1, 2.1.4)
bourbon (1.4.0, 1.3.6, 0.1.1)
builder (3.0.0, 2.1.2)
bundler (1.1.3, 1.0.21)
capistrano (2.12.0, 2.11.2, 2.9.0)
carrierwave (0.6.2, 0.6.1, 0.5.8)
chunky_png (1.2.5)
cocaine (0.2.1, 0.1.0)
coffee-rails (3.2.2, 3.1.1)
coffee-script (2.2.0)
coffee-script-source (1.3.1, 1.2.0, 1.1.3)
compass (0.12.1, 0.11.7)
daemons (1.1.8, 1.1.6)
devise (2.0.4, 1.4.2)
dnssd (2.0)
docsplit (0.6.3, 0.5.2)
erubis (2.7.0, 2.6.6)
execjs (1.3.1, 1.3.0, 1.2.9)
fastthread (1.0.7)
fcgi (0.8.8)
ferret (0.11.8.4)
ffi (1.0.11)
fssm (0.2.9, 0.2.8.1)
highline (1.6.11)
hike (1.2.1)
hpricot (0.8.6)
i18n (0.6.0, 0.5.0)
jk-ferret (0.11.8.3)
journey (1.0.3, 1.0.1)
jquery-rails (2.0.2, 1.0.17)
json (1.6.6, 1.6.5)
jtable-rails (0.2.5)
listen (0.4.1)
mail (2.4.4, 2.4.1, 2.3.3, 2.3.0, 2.2.19)
mime-types (1.18, 1.17.2, 1.16)
multi_json (1.3.2, 1.2.0, 1.0.4, 1.0.3)
net-scp (1.0.4)
net-sftp (2.0.5)
net-ssh (2.3.0, 2.2.1)
net-ssh-gateway (1.1.0)
orm_adapter (0.0.7, 0.0.5)
paperclip (3.0.2, 3.0.1, 2.3.16)
polyglot (0.3.3)
rack (1.4.1, 1.3.6, 1.3.5, 1.2.5, 1.2.3)
rack-cache (1.2, 1.1)
rack-mount (0.8.3, 0.6.14)
rack-ssl (1.3.2)
rack-test (0.6.1, 0.5.7)
rails (3.2.3, 3.2.2, 3.0.12)
railties (3.2.3, 3.2.2, 3.1.4, 3.0.12)
rake (0.9.2.2)
rb-fchange (0.0.5)
rb-fsevent (0.9.1)
rb-inotify (0.8.8)
rdoc (3.12)
RedCloth (4.2.9)
rmagick (2.13.1)
ruby-openid (2.1.8)
rubygems-bundler (0.9.0)
rubygems-update (1.8.23, 1.8.21, 1.8.17, 1.8.15)
rvm (1.11.3.3)
sass (3.1.16, 3.1.15, 3.1.14, 3.1.4)
sprockets (2.4.1, 2.4.0, 2.3.0, 2.1.3, 2.1.2, 2.0.4, 2.0.3)
sqlite3 (1.3.6, 1.3.5)
sqlite3-ruby (1.3.3)
thor (0.14.6)
tilt (1.3.3)
treetop (1.4.10)
tzinfo (0.3.33, 0.3.31, 0.3.29)
warden (1.1.1, 1.0.6, 1.0.5)
xmpp4r (0.5)
",farneman,thibaudgg
362,2012-04-27 17:56:52,"@thibaudgg Sass bundles Listen so that `sass --watch` will work without the user needing to install extra dependencies. The bundled version is not used if the user has Listen installed elsewhere.
",nex3,thibaudgg
362,2012-04-27 18:37:34,"@nex3 So would the difference in which Listen is used be why the `WARNING: Listen has fallen back to polling, learn more at https://github.com/guard/listen#fallback.` message is not showing for me after I installed the Listen gem separately?
",farneman,nex3
362,2012-04-27 18:49:08,"I was able to reproduce this issue on my Windows machine. The reason for it was a bug in handeling relative paths (as the example above shows, things like `--watch .`), but we have [fixed it](https://github.com/guard/listen/commit/5f867959c7c5d1176fa8ab885dcd2079d0b9f5ee) on the master branch of Listen. The new changes to Listen breaks the current Sass plugin for Listen.

Also, while debugging this issue, I have seen a very poor preformnace from the Windows adapter. The best thing for now to do will be to use the polling adapter on Windows until @thibaudgg and me discus this. I'll first update Listen to fix some Windows specific bugs I found today and then I'll send a pull request with a fixed Sass plugin.
",Maher4Ever,thibaudgg
362,2012-04-27 20:11:32,"@Maher4Ever Thanks for looking into this.
",nex3,Maher4Ever
361,2012-04-29 19:07:56,"What do you think @nex3 @chriseppstein? Should `1 + null` return `1` or raise a SyntaxError?
",petebrowne,nex3
360,2012-08-08 18:25:23,"@nex3 it seems like the work done for #286 would probably enable this. I give it a +1.
",chriseppstein,nex3
356,2012-05-07 15:50:45,"Here is the [prefix-whitespace.js](https://github.com/twitter/recess/blob/master/lib/compile/prefix-whitespace.js) file from [twitter/recess](https://github.com/twitter/recess) that @Anahkiasen mentioned that handles the formatting of the vendor prefixes.

I tried to look through the code a bit for Sass to see if something similar could be worked in easily, but Recess has the sibling nodes available, and I do not believe that is the case in Sass.

For the `:nested` and `:expanded` css outputs, it would be possible to at least prefix the vendor specific properties, but not the standard property, ie:



Check if the property name starts with a vendor prefix and add the padding. But, without access to sibling properties (or adding a `@last_node` variable), I cannot see a way to properly format it.

Hopefully someone else can look into this and find a good way to implement it, because stylistically, I really like this.
",mckramer,Anahkiasen
353,2012-04-16 03:37:00,"@nex3 Do you have a list of what needs to be supported? I'll be glad to draw up a proposal.
",jleclanche,nex3
353,2012-04-25 02:15:28,"@nex3 Any comments on the proposal?
",jleclanche,nex3
353,2013-05-29 15:52:20,"@zakdances Have patience. This is the main feature we have planned for Sass 4.0. We would like to see proposals for how this would work and get feedback on such proposals (Like @noprompt's #749). Just plowing forward and writing code without an agreement for what we are building seems likely to waste a lot of time.
",chriseppstein,zakdances
353,2013-05-29 16:16:54,"@chriseppstein Understood. Should new proposals be appended here or filed as a new issue?

Did you know that each time you use `@import` in an `.scss` file, Sass actually copies the contents of the linked stylesheet to the file after compilation? This means that if you use that same import statement more than once, even in different sass files, you get duplicate CSS? This creates a TON of duplicate CSS and creates incredible bloat.

I'm just surprised that functionality like `@import`, which is so core to the Sass experience, has this kind of major side effect. I hear what you're saying about reaching an agreement, but **in the meantime** shouldn't there be at least be a temporary workaround to limit the problems this issue causes?

Maybe I'm using `@import` wrong or I'm ignorant of work-arounds/fixes for this. Please let me know how you're dealing with this issue in your own projects.
",zakdances,chriseppstein
353,2013-05-29 16:24:42,"@zakdances A gist linked to this issue would be a good way to make a proposal. Yes, I'm very aware of how `@import` works -- I'm one of the core developers of Sass. They way you manage the behavior of the import directive effectively is to keep separate things that need to be re-used (mixins, functions, variable definitions, etc) from the things that should only appear once and then judiciously import the latter. Here's an article on [best practices for project organization](http://thesassway.com/beginner/how-to-structure-a-sass-project).
",chriseppstein,zakdances
353,2013-05-29 16:33:56,"Thank you @chriseppstein for that article link. I've been really struggling with CSS organization in larger projects lately so this is honestly helps a great deal.

For anyone else reading this, there's also a `node.js` library called [clean-css](https://github.com/GoalSmashers/clean-css) which [added a feature](https://github.com/GoalSmashers/clean-css/issues/29) a few months ago to remove duplicate css. It can be used as a [grunt task](https://github.com/gruntjs/grunt-contrib-cssmin).
",zakdances,chriseppstein
353,2017-03-16 06:48:12,"@NitroBAY yeah I'm hoping something would come out of this...
came here because CSS module's 'composes' doesn't actually 'compose' styles, but instead adds up classnames so overriding doesn't work.

was thinking about using sass import-extend, but sass import can't do 'selective' import & etc :(",devdoomari,NitroBAY
350,2012-08-03 06:02:01,"@paulyoung Blesscss looks cool but I think for this use-case the check needs to be built into Sass so that you get alerted about the problem _before_ you spend time trying to figure out why some of your CSS is being mysteriously ignored. 
",eoinkelly,paulyoung
350,2016-01-27 17:50:05,"@joevandyk if you are using grunt as part of your build process then you could just throw - `grunt-scss-lint` https://github.com/ahmednuaman/grunt-scss-lint into one of your tasks.

Also a cool trick i have done in the past (before SCSS and GRUNT) is add banners to your site that say `IE RULE LIMIT REACHED` then add `display:none` styles right at the bottom of your stylesheet. This way if you reach the limit and are testing in IE you will see the banners when there is an issue.
",albybarber,joevandyk
349,2013-08-02 17:50:40,"I feel inclined to agree with @cimmanon's and @throwawayaccount11's comments. I don't think your comparison to the stubbed toe is really applicable.
",jacaetevha,throwawayaccount11
349,2013-08-02 17:50:40,"I feel inclined to agree with @cimmanon's and @throwawayaccount11's comments. I don't think your comparison to the stubbed toe is really applicable.
",jacaetevha,cimmanon
349,2013-08-02 18:17:41,"The site is maintaining its unique and feminine branding, while removing the possible-to-see-as-ditzy character from the logo. This issue wasn't the primary reason for redesigning the logo, but redesigning the logo gave the Sass design team opportunity to address these concerns while they were at it. @nex3, @hcatlin, @jina, and the Sass design team have already taken care of this. It's a win-win ‚Äî everybody has already won.

The Sass community needs to be inclusive, and if there are easy steps to make it more inclusive without any negative side effects those steps should be taken. When someone points to code that works but with trivial effort can be re-written to be more elegant, we re-write it. That doesn't mean the original code was inherently wrong or bad, and all those who used and enjoyed it are shamed by proxy. It just means together we've found a better way to write it.

@chriseppstein, I appreciate your metaphor.
",robwierzbowski,nex3
349,2013-08-02 18:17:41,"The site is maintaining its unique and feminine branding, while removing the possible-to-see-as-ditzy character from the logo. This issue wasn't the primary reason for redesigning the logo, but redesigning the logo gave the Sass design team opportunity to address these concerns while they were at it. @nex3, @hcatlin, @jina, and the Sass design team have already taken care of this. It's a win-win ‚Äî everybody has already won.

The Sass community needs to be inclusive, and if there are easy steps to make it more inclusive without any negative side effects those steps should be taken. When someone points to code that works but with trivial effort can be re-written to be more elegant, we re-write it. That doesn't mean the original code was inherently wrong or bad, and all those who used and enjoyed it are shamed by proxy. It just means together we've found a better way to write it.

@chriseppstein, I appreciate your metaphor.
",robwierzbowski,chriseppstein
349,2013-08-02 18:17:41,"The site is maintaining its unique and feminine branding, while removing the possible-to-see-as-ditzy character from the logo. This issue wasn't the primary reason for redesigning the logo, but redesigning the logo gave the Sass design team opportunity to address these concerns while they were at it. @nex3, @hcatlin, @jina, and the Sass design team have already taken care of this. It's a win-win ‚Äî everybody has already won.

The Sass community needs to be inclusive, and if there are easy steps to make it more inclusive without any negative side effects those steps should be taken. When someone points to code that works but with trivial effort can be re-written to be more elegant, we re-write it. That doesn't mean the original code was inherently wrong or bad, and all those who used and enjoyed it are shamed by proxy. It just means together we've found a better way to write it.

@chriseppstein, I appreciate your metaphor.
",robwierzbowski,hcatlin
349,2013-08-02 19:46:04,"I think everything that needs to be said about this has already been said. I encourage anyone who's legitimately interested in understanding more about sexism in tech to go read any of the many excellent blog posts and articles written by women in the industry on the subject. This issue, however, is not the place to discuss it.

Lacking the ability to close comments on this issue, I'll just delete any further comments not by @chriseppstein, @hcatlin, or myself.
",nex3,chriseppstein
349,2013-08-02 19:46:04,"I think everything that needs to be said about this has already been said. I encourage anyone who's legitimately interested in understanding more about sexism in tech to go read any of the many excellent blog posts and articles written by women in the industry on the subject. This issue, however, is not the place to discuss it.

Lacking the ability to close comments on this issue, I'll just delete any further comments not by @chriseppstein, @hcatlin, or myself.
",nex3,hcatlin
349,2013-08-02 20:30:50,"Just a last quick note incase anybody stumbles onto this issue in the future. It is officially closed. @adrienne had some good points and we took them into account while working on the new branding and website redesign. 

The logo [redesign is complete](http://dribbble.com/shots/760641-Getting-Sassy-Final-Logo).

We're working to complete the full site redesign to launch at http://sassconf.com/. All issues pertaining to the redesign should probably happen over at https://github.com/sass/sass.github.com.
",bpainter,adrienne
349,2013-08-02 20:32:31,"Love the new logo, and i want to say thank you very much to @chriseppstein, @hcatlin, and @nex3 for listening. (And @hcatlin, thanks even more for the story about why you were going for a ""feminine"" vibe in the first place! As a woman in tech i really do appreciate the intent; the execution was just frustrating. ""Woman on telephone in '50s/'60s clip art style"" totally reads as ""secretary"" to me. (cf these actual retro images: http://thehose.net/wp-content/uploads/2012/03/secretary.jpg and http://www.illustrationsof.com/royalty-free-phone-clipart-illustration-1049789.jpg) And as noted in my bug report, there are just So Damn Many reminders to women that we ""don't belong here"" in the industry, so it is easy to feel excluded by little things that weren't intended that way.)
",adrienne,nex3
349,2013-08-02 20:32:31,"Love the new logo, and i want to say thank you very much to @chriseppstein, @hcatlin, and @nex3 for listening. (And @hcatlin, thanks even more for the story about why you were going for a ""feminine"" vibe in the first place! As a woman in tech i really do appreciate the intent; the execution was just frustrating. ""Woman on telephone in '50s/'60s clip art style"" totally reads as ""secretary"" to me. (cf these actual retro images: http://thehose.net/wp-content/uploads/2012/03/secretary.jpg and http://www.illustrationsof.com/royalty-free-phone-clipart-illustration-1049789.jpg) And as noted in my bug report, there are just So Damn Many reminders to women that we ""don't belong here"" in the industry, so it is easy to feel excluded by little things that weren't intended that way.)
",adrienne,chriseppstein
349,2013-08-02 20:32:31,"Love the new logo, and i want to say thank you very much to @chriseppstein, @hcatlin, and @nex3 for listening. (And @hcatlin, thanks even more for the story about why you were going for a ""feminine"" vibe in the first place! As a woman in tech i really do appreciate the intent; the execution was just frustrating. ""Woman on telephone in '50s/'60s clip art style"" totally reads as ""secretary"" to me. (cf these actual retro images: http://thehose.net/wp-content/uploads/2012/03/secretary.jpg and http://www.illustrationsof.com/royalty-free-phone-clipart-illustration-1049789.jpg) And as noted in my bug report, there are just So Damn Many reminders to women that we ""don't belong here"" in the industry, so it is easy to feel excluded by little things that weren't intended that way.)
",adrienne,hcatlin
349,2013-10-14 02:20:42,"The new site had launched! @adrienne, what do you think?
",nex3,adrienne
349,2013-10-15 01:49:55,"@nex3 I love it! Thanks for letting me know! :) And thanks again for listening.
",adrienne,nex3
340,2012-03-28 10:36:20,"a possible input would be:



and the output would be:



right now, I have to re-write exactly the same css inside the media query, for the values to update. in the way I'm proposing, all the css that had references to that variable would be automatically generated to reflect the new values.

basically, what @Anahkiasen said.
",ricardogo,Anahkiasen
338,2013-10-20 23:06:42,"I agree with @WebDevCA. I have several terminal commands commented at the top of some of my SCSS files that I would like to be able to copy and paste into the prompt as a block without having `//` screwing with each line. These comments only relate to Sass stuff and should not appear in the compiled CSS. I should not be restricted to compressed mode for this, I don't want to lose the comments all together in the CSS. Surely something like this would be a simple syntax:



Usage would be far from edge-case, Sass is all about mixins, which are getting more complex and and deserve proper multi-line introductory comments documenting your code as you would in JS or any other language. These sorts of comments should not appear in the compiled CSS.

As an example of the syntax effort people are going through: https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/css3/_background.scss
",jaydenseric,WebDevCA
338,2014-07-03 08:43:40,"Although I agree with your points @jaydenseric and @WebDevCA , do keep the fact in mind that the compiled css **must** be compressed before distribution for production, thereby removing all the comments (excepts ones starting with `!`). And for development, it just doesn't matter how long or useless the comments are in your css file.
",kumarharsh,WebDevCA
338,2014-07-03 08:43:40,"Although I agree with your points @jaydenseric and @WebDevCA , do keep the fact in mind that the compiled css **must** be compressed before distribution for production, thereby removing all the comments (excepts ones starting with `!`). And for development, it just doesn't matter how long or useless the comments are in your css file.
",kumarharsh,jaydenseric
338,2014-07-03 23:10:40,"@kumarharsh Would you support deprecating and removing nested, expanded and compact output styles then?

Comments are a part of the CSS spec. Sass is about making CSS easier. There are times developers want to compile Sass to readable CSS, comments and all.
",jaydenseric,kumarharsh
338,2014-07-04 05:10:06,"No I would NOT support deprecating and removing nested, expanded and compact output styles then. Those are features which are already in the library, and the sight of seeing them sacrificed on the altar of our prized _multiline silent comments_ will be a sad sight indeed.

Anyways, for me, (any many many more devs) this issue of commenting-out a block of scss with each line having a `//` is taken care of by SublimeText and it's Sass plugin. One keystroke is all it takes.

Also, even though I too have wished for something along these lines in the past,  I feel @nex3 is right in pointing out that there are enough options to cover all needs.

Just because I can make a nice, fancy french-window in my toilet doesn't mean I'll go ahead and do it.
",kumarharsh,nex3
338,2015-04-10 09:01:07,"I do not agree with @kumarharsh. I think Sass needs some option for disabling required multiline comments on output. Not everyone have to use Sass according to your logic.

For example I am preparing a theme to sell it on Market. So I am using Sass to organise my CSS. I want to add some multiline comments that will helpful to me only on Sass codes. Also I want my CSS files ""--expanded"" so the customer easily look into css codes and make the replacements for his use.

On another scenerio; I am building a large amout of mixins that has CSS effects that I can use later on. And I want to add usage of them to the scss file's top. (Eg: some HTML code, some description etc.) I can use ""//"" comments to make this but when I try to copy the HTML code, I am removing all ""//"". Yes, with some text editors you can easily remove them. But not everyone have to use Sublime Text to write his own code. Everyone has its own preferences. So I believe It's not that hard to add a feature to disable some multiline comments. And I think this feature is required for most of people.
",gkhno,kumarharsh
338,2015-08-17 15:06:19,"I do not agree with @kumarharsh too. It's not right to simply assume practices and an environment like that, it's just the easiest way to make points. 

Some people want to document their code in a readable way (come on, don't say that a lot of `//` is as readable and organised as `/** [..]`), and they don't want it to be in the CSS file. I don't think it is hard to understand at all.

> do keep the fact in mind that the compiled css must be compressed before distribution for production

Also, there are some code I don't want neither to compress nor minify. Yes, **it is that simple**.

Anyway...

## Solution for multiline Sass comments



> GitHub's syntax higlight isn't working properly. See screenshots below.

#### Input

<img width=""369"" alt=""screen shot 2015-08-17 at 11 59 17"" src=""https://cloud.githubusercontent.com/assets/5303585/9307998/d875fb62-44d7-11e5-8928-d6bc17d70a2f.png"">

#### Output

<img width=""177"" alt=""screen shot 2015-08-17 at 11 59 25"" src=""https://cloud.githubusercontent.com/assets/5303585/9308003/de1d7dce-44d7-11e5-8a35-91b288d25d81.png"">

I tried it on [CodePen](http://codepen.io). :-)
",diessica,kumarharsh
337,2012-04-06 20:42:09,"@nex3 Do you still need the sample app?
",yfeldblum,nex3
337,2012-05-22 18:11:32,"@lgebhardt Can you produce a sample app that demonstrates the issue?
",nex3,lgebhardt
337,2012-06-04 13:12:08,"@nex3, I have an app up at https://github.com/lgebhardt/simple_bs_app_demo. Sorry it took so long.
",lgebhardt,nex3
337,2012-06-15 21:46:41,"@lgebhardt As far as I can tell, your example doesn't have exponential compile time. Adding more content to the stylesheet doesn't seem to increase the compile time any more than linearly. It looks like the ""compress"" flag just adds some additional, constant overhead (about 5s on my machine).

Closing again because I can't reproduce.
",nex3,lgebhardt
337,2012-06-20 17:06:07,"@nex3, what platform did you test this on? I was running it on a Windows box. I'll test the same code on mac or linux soon.
",lgebhardt,nex3
337,2012-06-22 20:30:20,"I tested on Linux. I don't have a Windows box easily available to test on,
but I don't think the OS would affect this.
On Jun 20, 2012 10:06 AM, ""Larry Gebhardt"" <
reply@reply.github.com>
wrote:

> @nex3, what platform did you test this on? I was running it on a Windows
> box. I'll test the same code on mac or linux soon.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/337#issuecomment-6460730
",nex3,nex3
336,2016-02-10 21:16:52,"Is the [example](https://github.com/sass/sass/issues/336#issuecomment-21310219) posted by @Snugug no longer valid?

When I run it under `node-sass`, the `$foo: $foo + 1` assignment has no effect. Pasting it into [sass-meister](http://www.sassmeister.com/), I get the same result - assignment doesn't work.

However, paste it into [jsbin](https://jsbin.com) and it works without problems.

What gives? Is this supposed to work or not?

If not, when did this change? I have a [grid mixin](https://gist.github.com/mindplay-dk/6795939) that seems to have stopped working - and as far as I can figure, it can only be implemented using this feature?
",mindplay-dk,Snugug
336,2016-02-10 21:19:26,"@mindplay-dk See https://github.com/sass/sass/issues/1511
",cimmanon,mindplay-dk
334,2012-03-26 03:03:43,"@chriseppstein thanks for the quick reply. I understand your rationale, and I can't say I disagree with you. Having `$font-size` and `$font_size` in the same file isn't exactly a best practice.

However, in my case, I was converting someone else's code and using the hyphens as a way to separate my variables from his, and since I wasn't expecting them to cause naming collisions, it took me forever to finally figure out that this was the root of the issue.

Perhaps explicitly stating this somewhere [in the docs](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#variables_) would prevent this from happening to others.
",philipwalton,chriseppstein
334,2015-02-15 05:49:45,"We've recently run into this in Libsass (https://github.com/sass/libsass/issues/877). It appears this feature is still largely undocumented aside from this mention

> Since the named arguments are variable names, underscores and dashes can be used interchangeably.
> http://sass-lang.com/documentation/file.SASS_REFERENCE.html#keyword_arguments

As @philipwalton points out it would be great to have a definitive reference for what this behaviour is applied to as it's currently unclear /cc https://github.com/sass/libsass/issues/877#issuecomment-74405004
",xzyfer,philipwalton
328,2012-03-21 22:20:54,"@nex3 Are you a Python guy? ;) Just kidding.

Anyway, what you describe is pretty much what Python has implemented.



But at least, they have it codified. If you like that behavior we shell go with that but still, we have to raise a few more exceptions and be more explicit about how arguments can be passed in.

I'm raising this issue now because I'm about to work on #138 and it involves changes to arguments handling.

Still I'm in favor of of my proposition because it's more flexible. It may be harder to read but let's see where functions are used (called). It's either inside frameworks, or in user stylesheets. Either way those calls are maintained (mostly) by the same people who wrote them. If they've managed to write it and get result they wanted, they probably will be able to read it too. Also everyone can decide for himself if he wants to use it or not.

Either way this is non-breaking change. Sure, only for code that didn't abuse syntax quirk for no gain.

PS: you can ping me on IRC if you think that can be better place for discussion.
",pointlessone,nex3
327,2012-03-21 13:33:37,"@chriseppstein Not that much, just under 100ms on my Compass-based stylesheets. That's very small portion of the overal time and can be dismissed as a measurement error. I assume, that's because most funcalls don't use named arguments.
",pointlessone,chriseppstein
326,2013-08-24 06:40:25,"I found this a big surprise, too! I've been using the indented syntax every day for at least a year--I'm not an expert on the edge cases of the language, but a competent user I'd say I must be.

Apparently inline comments are not supported, or intended to be supported. I've been using them all along and had no idea. The new -pre version of sass that supports source maps causes some failures on inline comments that previously used to work, this is how I found out.

Here is the note I raised, and @nex3 pointing out that it's not really intended to be used.
https://github.com/nex3/sass/issues/895

Just a heads up for all who may come after!
(though reliable inline comments would be really extra special... :)
",SimplGy,nex3
326,2013-08-26 16:44:39,"@nex3 I think this is a bug.
",chriseppstein,nex3
324,2013-07-22 15:18:08,"@cimmanon 

What version of Sass are you using?

I've tried two different online compilers ( http://sass-lang.com/try.html and http://sassmeister.com/gist/5260832 ) and they both give the same incorrect result.

Also, @nex3 didn't just confirm this behavior but also stated that it was intentional. See https://github.com/nex3/sass/issues/856 .
",jslegers,nex3
324,2013-07-22 15:18:08,"@cimmanon 

What version of Sass are you using?

I've tried two different online compilers ( http://sass-lang.com/try.html and http://sassmeister.com/gist/5260832 ) and they both give the same incorrect result.

Also, @nex3 didn't just confirm this behavior but also stated that it was intentional. See https://github.com/nex3/sass/issues/856 .
",jslegers,cimmanon
320,2014-07-15 19:54:57,"@julzmon, just extend placeholder selectors of [bootstrap-sass](https://github.com/twbs/bootstrap-sass).
",lolmaus,julzmon
320,2015-10-23 19:44:37,"@lolmaus The problem is when you have @import statements importing the placeholders into your partial file, it ends up duplicating the placeholder output (times how many @imports you have of that particular placeholder).
",crush83,lolmaus
320,2015-10-27 10:36:26,"@crush83 

> @lolmaus The problem is when you have @import statements importing the placeholders into your partial file, it ends up duplicating the placeholder output (times how many @imports you have of that particular placeholder).

Ever heard of `sass-imort-once`?
",lolmaus,lolmaus
320,2015-10-27 10:36:26,"@crush83 

> @lolmaus The problem is when you have @import statements importing the placeholders into your partial file, it ends up duplicating the placeholder output (times how many @imports you have of that particular placeholder).

Ever heard of `sass-imort-once`?
",lolmaus,crush83
319,2016-01-22 21:00:23,"@lexstefan We already plan to increase the precision; see #1122. We just haven't gotten around to implementing it and fixing up all the tests yet. If you're interested in doing so, we'd love a pull request!
",nex3,lexstefan
312,2012-03-09 20:24:34,"@Anahkiasen feel free to open an issue on compass to discuss changes to the compass css3 mixins.
",chriseppstein,Anahkiasen
312,2016-02-11 01:09:28,"@jpdevries That is just not technically possible. `!important` is a property modifier. Extend works by rewriting selectors. If we did this it would have consequences for selectors that were not intended to be important.
",chriseppstein,jpdevries
311,2012-03-09 20:31:22,"@scottkellum Sorry I really should have put some more details about this into the issue. We have conversions built into sass as it is a core syntax concern and part of our arithmetic system: https://github.com/nex3/sass/blob/master/lib/sass/script/number.rb#L424-430
",chriseppstein,scottkellum
310,2012-03-21 13:12:32,"@nex3 In the past you have rejected this functionality claiming that it makes optimization harder. Do you still feel this way? This functionality would enable the dynamic construction of variable names -- not a feature that exists in sass functions.
",chriseppstein,nex3
310,2012-08-08 18:36:31,"@nex3 can we get this in 3.2?
",chriseppstein,nex3
310,2012-08-11 01:36:24,"talked to @nex3 about this, and I agree that ruby functions shouldn't be able to do things that sass functions can't. This would allow access to local variables in the calling context and also setting variables in the local scope.
",chriseppstein,nex3
310,2012-08-13 19:47:42,"@Snugug this use case is covered by #286.
",chriseppstein,Snugug
310,2012-08-13 22:15:41,"@jede any interest in taking another whack at this?
",chriseppstein,jede
310,2012-08-14 12:18:32,"@chriseppstein sure! So the problem is, if I understand @nex3 correctly, that ruby methods should not be able to access everything? It would be really good with an example of this (i.e. something this would allow that you cannot do with sass).
",jede,nex3
310,2012-08-14 12:18:32,"@chriseppstein sure! So the problem is, if I understand @nex3 correctly, that ruby methods should not be able to access everything? It would be really good with an example of this (i.e. something this would allow that you cannot do with sass).
",jede,chriseppstein
310,2012-09-09 17:32:11,"This should work now. I added tests to cover the case @nex3 provided, please have a look and see what you think! Don't know why @travisbot hasn't commented, but the tests pass: http://travis-ci.org/#!/nex3/sass/builds/2377423
",jede,travisbot
310,2012-09-09 17:32:11,"This should work now. I added tests to cover the case @nex3 provided, please have a look and see what you think! Don't know why @travisbot hasn't commented, but the tests pass: http://travis-ci.org/#!/nex3/sass/builds/2377423
",jede,nex3
309,2012-03-05 22:10:02,"One must be very careful, duplicated properties are basically the only approach to x-browser support. How can we know this isn't because `blue` isn't supported and `red` is the fallback value?

I think @nex3's idea is to use mixin boundaries to decide whether to keep or not, but this would break if the ""duplication"" was actually building on the concept of the previous mixin call, not overwriting it.
",chriseppstein,nex3
309,2012-03-05 22:19:06,"@necolas Your mixin example is very close to the ""ignore overridden declarations"" example in #116.

@chriseppstein I think using `!replace` removes some substantial benefits of this approach. Part of the goal is that it can work together with other optimizations to remove unnecessary properties that the user may not realize are redundant. `!replace` relies on the user to effectively do that work themselves.

I think a better way to avoid the issue would be to make cross-context fallbacks explicit. I think they're a much less frequent use case. A solution to #249 might provide an answer here.
",nex3,chriseppstein
309,2012-03-05 22:19:06,"@necolas Your mixin example is very close to the ""ignore overridden declarations"" example in #116.

@chriseppstein I think using `!replace` removes some substantial benefits of this approach. Part of the goal is that it can work together with other optimizations to remove unnecessary properties that the user may not realize are redundant. `!replace` relies on the user to effectively do that work themselves.

I think a better way to avoid the issue would be to make cross-context fallbacks explicit. I think they're a much less frequent use case. A solution to #249 might provide an answer here.
",nex3,necolas
300,2014-04-30 08:56:13,"@AshleyAitken Client-side? How?
",lolmaus,AshleyAitken
300,2014-04-30 13:38:24,"On 30 Apr 2014, at 4:56 pm, lolmaus notifications@github.com wrote:

> @AshleyAitken Client-side? How?

I‚Äôm no expert but by implementing what is currently done in Ruby in Javascript, e.g. how Less does it.  This would only be for development, not production.  The developers of Sass and Compass have suggested (previous response) that they have higher priority design tasks, which is up to them and I have no problem with that (I‚Äôm already very grateful for all they have done).

Cheers,
Ashley.

## 

Dr Ashley Aitken - Principal
Running Code Productions
ashley@runningcode.com.au
http://www.runningcode.com.au
LinkedIn/Twitter/Skype: AshleyAitken
Perth, Western Australia (GMT + 8)
Mb (04) 1226-8159 (Preferred)
Ph (08)  9368-5505
Fx (08) 9271-3160
",AshleyAitken,AshleyAitken
300,2014-04-30 13:42:21,"@AshleyAitken I'm sorry, i pinged you accidentally.

I meant to reply to @Anahkiasen' comment:

> For the note you can use node-sass

AFAIK, node-sass is written in C and i'm not aware of any way to execute it in a browser.
",lolmaus,AshleyAitken
300,2014-04-30 13:42:21,"@AshleyAitken I'm sorry, i pinged you accidentally.

I meant to reply to @Anahkiasen' comment:

> For the note you can use node-sass

AFAIK, node-sass is written in C and i'm not aware of any way to execute it in a browser.
",lolmaus,Anahkiasen
292,2012-02-27 21:03:35,"I dislike the idea of a `@var` keyword. The distinction between when to use `var` and when not to is unclear to many Javascript programmers, even those who have experience with scoping issues in other programming languages. Adding it to Sass seems unlikely to promote comprehension.

I'm closing this issue since the specific proposal is rejected. @chriseppstein, feel free to open a new issue to discuss the broader issue of how to bring our variables in line with the CSS proposal.
",nex3,chriseppstein
290,2012-02-26 07:48:07,"@chriseppstein We aren't currently parsing `@-moz-document`; this is hitting the directive fallback code.

I think we should actually support the `@-moz-document` syntax, as we do for `::-moz-any` and other vendor-specific syntaxes.
",nex3,chriseppstein
290,2012-02-26 19:04:53,"@nex3 I thought we didn't parse unknown directives and just consumed everything to the first `;` or `{` as a string.
",chriseppstein,nex3
290,2012-02-27 20:48:31,"@chriseppstein That heuristic would fail when encountering quoted strings or other grammar edge cases. The fallback behavior for an unknown directive is to try to parse the tokens after it as a selector or, failing that, as an expression.
",nex3,chriseppstein
289,2012-02-22 21:32:53,"@nex3 ok, I've understood the arguments against `prefix&` case, but don't the `&postfix` is different? There are a lot of techs that are heavy class-based due to rendering speed optimizations, so having such feature would be great.

Also, why other preprocessors do this and you can't :)
",kizu,nex3
289,2013-05-31 15:35:02,"@svitaliyv using `&` inside of `#{}` is a proposed feature that we are working on in a branch. it's not completed yet.
",chriseppstein,svitaliyv
289,2014-03-12 19:55:51,"@brewster1134, try `@at-root &.mobile`.
",lolmaus,brewster1134
289,2014-04-22 19:20:17,"@lolmaus this is not what i need to do.  I need to prepend to the root parent.  I used to be able to do this...



should output



i know its sort of hacky, but it was the only way i knew to programmatically modify the parent selector.
",brewster1134,lolmaus
289,2014-04-23 23:04:34,"@brewster1134 see https://gist.github.com/nex3/8050187 for details.
",chriseppstein,brewster1134
286,2012-02-22 00:50:47,"@ZeeAgency That feels like it's much harder to understand than it's worth, given how little it would be used.
",nex3,ZeeAgency
286,2012-04-13 23:38:36,"@chriseppstein @nex3 - any thoughts on that? It's a blocker for the next Susy update, so it would be good to know if and when it might land. Thanks!
",mirisuzanne,nex3
286,2012-04-13 23:38:36,"@chriseppstein @nex3 - any thoughts on that? It's a blocker for the next Susy update, so it would be good to know if and when it might land. Thanks!
",mirisuzanne,chriseppstein
286,2012-08-03 22:41:02,"@phillip-haydon You can do that today, like so:


",nex3,phillip-haydon
286,2012-08-20 18:57:40,"@Grassboy That happens because Sass doesn't understand what you mean when you do `&#{$C}mother`. It expects `&` to be followed by a simple selector (e.g. `.foo`, `#bar`); when it's followed by interpolation, it thinks you're just starting a new selector.

With this change, you'll be able to accomplish your goal by doing `#{&}#{$C}mother`.
",nex3,Grassboy
286,2012-09-12 16:08:00,"@nex3 this seems really fiddly. Given:



I would expect the output



However I end up with:



Seems broken or at-least doesn't do what I want it to do :(
",phillip-haydon,nex3
286,2012-09-14 21:41:22,"@phillip-haydon As @Grassboy points out, `&` refers to the entire parent selector. There's no way for Sass to know that you want it to refer to subsets of that selector -- let alone which subset -- in the example you gave.
",nex3,Grassboy
286,2012-09-14 21:41:22,"@phillip-haydon As @Grassboy points out, `&` refers to the entire parent selector. There's no way for Sass to know that you want it to refer to subsets of that selector -- let alone which subset -- in the example you gave.
",nex3,phillip-haydon
286,2013-02-22 23:38:50,"@kmontag this could be used for something like that, although it would probably require pretty heavy-duty processing on the part of the mixin.
",nex3,kmontag
286,2013-03-27 08:49:37,"I was really surprised so common css usecase @ibc described is such a mess in SASS. That's especially funny when



works, but



doesn't work. Come on, I've just switched .state and &.
Anyway guys I love SASS (thanks for your work) and eagerly awaiting this feature to be implemented in 3.3.
",samilyak,ibc
286,2013-05-10 18:08:21,"@FWeinb Yes, This would work like this:


",chriseppstein,FWeinb
286,2013-05-10 21:26:11,"@FWeinb it will work in Sass 3.3.
",chriseppstein,FWeinb
285,2012-02-22 00:13:02,"@gisu are you aware that you can just write: `&.mixinClass` in the mixin? Is the issue that you don't want the mixin to know that the selectors it defines are being merged into the current context instead of creating descendants? If so, can you show the real-world test case to us?
",chriseppstein,gisu
285,2012-02-22 00:45:54,"@chriseppstein Yes I know the normal way and in most cases you will also become a target. But I think the idea makes the mixin maybe a little more flexible - than they are now :)

You write both of which can be in the mixin itself Ampersand depend on the class, the problem now is that my mixin it always presupposes a selector.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  &.mixinclass
    height: $height
    width: $width
    ....

.container
  +myMix(20px, 30px)
</code></pre>


So I go and write to the mixin, take the ampersand out again and the mixin can load it into the root of the stylesheet.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  .mixinclass
    height: 20px
    width: 30px
    ....

+myMix(20px, 30px)
</code></pre>


Next time I will hang the mixin to a child selector, so I write my mixin to return.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  & > .mixinclass
    height: 20px
    width: 30px
    ....

.container
  +myMix(20px, 30px)
</code></pre>


As I said, there is no problem to do that, I can also write the mixin, which I add conditionals to the different types as you can attach a mixin, simply can control by (@if). This may vary depending on the complexity mixins also be a good long mixin. Adjacent selector, Child Selector Silbing, and so on.

But as written, it goes without :)
",gisu,chriseppstein
282,2012-02-20 20:06:03,"@nex3 I think there are some compelling use cases for refining a class definition by element type. And while I understand the syntactic advantages of treating `&` like an element, I'm left wondering if we can do better. This is just one of a number of compelling use cases that can't currently be supported by the `&` selector. For instance, Inserting a selector sequence just before the selector's parent. Taken together, it seems like there's an opportunity for improvement here.
",chriseppstein,nex3
279,2014-10-31 15:07:28,"I agree with @Snugug. IMO, dynamic imports are essential for flexible theming.

I'm thinking especially of the following feature :

![File structure](http://i59.tinypic.com/5nodph.png)



Another obvious use case would be polyfilling (https://github.com/sass/sass/issues/739).
",jslegers,Snugug
279,2015-02-26 21:59:41,"@niklas-r change that to `/normalize.css` and it'll work ;-)
",davidkpiano,niklas-r
279,2015-02-27 07:34:54,"@davidkpiano I tried that at first but it doesn't work as you might think.

First of all, the variable interpolation still doesn't work even though you try to `@import` a CSS-file.

Secondly, when you `@import` a CSS-file, Sass will output an `@import`-statement in the compiled CSS. You can read more about it here: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#import

This behavior is supposedly a feature but I much prefer the way Less handles it. By directly importing the CSS-file in the compiled CSS. But that's a matter for another ticket.
",niklas-r,davidkpiano
279,2015-02-27 09:42:49,"@niklas-r, if you're trying to import an `.scss` file from Bower, you should store `bower_components` outside of your Sass subfolder and add path to `bower_components` to Sass `import_path`.

Then you can simply do `@import 'normalize.scss/_normalize.scss';`.
",lolmaus,niklas-r
279,2015-02-27 10:16:28,"@lolmaus thank you, didn't think of that!
",niklas-r,lolmaus
279,2015-03-03 13:44:14,"@thom-nic, have `bower_components/bootstrap-sass-official/assets/stylesheets` in Sass load path, then you can do `@import bootstrap-sprockets`.
",lolmaus,thom-nic
279,2015-03-03 14:18:12,"Ah, ok thanks @lolmaus!
",thom-nic,lolmaus
279,2015-04-21 22:36:00,"Agree with @Jakobud 

+1 to add variable to @import functionallity
",paustria,Jakobud
279,2015-05-08 11:47:52,"@cimmanon thanks for the tip. I'm a mostly -backend developer with these things hidden behind wrappers like https://github.com/Kronuz/pyScss
",opyate,cimmanon
279,2015-07-17 22:27:46,"@cimmanon 

> why aren't you using the -I option (--load-path)?

Why are you still using command line SASS?
",Jakobud,cimmanon
279,2015-07-17 22:38:11,"@Jakobud What I use is none of your concern (I happen to use Compass rather than vanilla Sass, and I don't have a use for variables in imports anyway).  If you're using a build tool that does not grant you access to the `-I` option, that seems to be a problem with your build tool.
",cimmanon,Jakobud
279,2016-01-07 15:29:50,"@sabriskay I guess your path isn't correct.
",GesJeremie,sabriskay
279,2016-01-07 17:05:03,"@bbashy :+1: 
",jslegers,bbashy
277,2012-02-14 20:02:29,"@SimpleAsCouldBe It doesn't actually produce invalid CSS, as far as the grammar is concerned; `linear-gradient top, rgb(255,190,75) 0%, ...` is a valid property value.

@chriseppstein There are some difficulties in making this an error. We can't just say ""no putting comma lists in space lists"" since we don't want `@each (foo, bar) (bip, bop) (whiz, bang)` to randomly fail. We could make the error appear at stringification time, but I'm not sure it would be particularly clear.

I'm tempted to say that because this syntax isn't valid in CSS anyway, it's not worth worrying too much about how Sass handles it.
",nex3,chriseppstein
277,2012-02-14 20:42:12,"@SimpleAsCouldBe To elaborate on Chris's reply, Sass tries hard to avoid having specific knowledge of which properties and values exist in CSS and how they're used. It doesn't know that `-webkit-linear-gradient` is a function as opposed to, say, a border type like `solid`. This allows it to be very flexible when adapting to changing CSS standards, but it does mean we can't detect cases like this where you're doing something syntactically valid but semantically meaningless.

@chriseppstein I agree that good error messages are valuable, but I'm having a hard time figuring out how to generate a helpful error message for this case without making other cases more obscure. Since this is (I assume) a pretty uncommon error case, I'm not too worried about getting a great error for it.
",nex3,chriseppstein
273,2012-02-24 20:46:18,"@barraponto is correct. Not only is it a bad idea to try to keep up with every single vendor-prefixed property out there, but it's also a bad idea to have some styles that look identical to plain CSS be manipulated by Sass. It makes it extremely difficult to figure out what's going on in the source without a deep knowledge of the internals of Sass.
",nex3,barraponto
260,2012-02-01 10:32:15,"Sorry @nex3 my bad, I did the example by hand, just for the sake of proving what I meant. But your example has the same issue for me. Because the rule I extended was only the <code>p</code> rule and not <code>.my-other-rule-context p</code>. I didn't do <code>@extend p .my-other-rule-context</code> (although I know this currently isn't possible).
",hefler,nex3
260,2012-02-01 18:49:07,"@hefler That's the intended behavior. `@extend` means ""should be styled as""; if you extend a selector, than all instances of that selector (even as part of other selectors) are modified to match the extending selector as well.
",nex3,hefler
259,2012-05-17 05:53:45,"@mihaibirsan thank you .. i faced this and after i (gem install compass) it worked just fine. thank you all.
",Nilegfx,mihaibirsan
258,2012-01-30 01:54:08,"@chriseppstein Could you please explain why this is part of the design?
",twoolie,chriseppstein
258,2012-02-01 04:44:37,"> I'm going to close this issue because it certainly won't change on its own.

@nex3 does this mean it won't change without someone pushing the change, or it won't change until the language changes as well?
- If you need someone to make the changes and give you a pull request, I volunteer.
- If no change is to be made, can someone please add this to the documentation on variable scoping?
",twoolie,nex3
255,2013-11-25 13:15:06,"Additionally @benfrain, all that says is no restrictions inside the actual definition, but doesn't mention starting with (I know, weird distinction to make, but an important one) AFAIK having just recently done a bunch of research on this, valid class names start `[a-z][A-Z][_-]` or an escaped special character (`\:` for instance) and may contain thereafter any combination of letters in any case, numbers, dashes and underscores, and escaped special characters. Really the absolute only restriction is they can't start with a number, escaped or otherwise.

That is, unless they really can and not a single browser supports it, in which case you should start with the browsers. But in the case of something like selector naming _de facto_ may be more important that _de jure_. Maybe someone from a Browser team can weigh in, like @paulirish.
",Snugug,benfrain
255,2013-11-25 14:02:02,"@Snugug just to be sure we aren't talking at cross purposes. Is this what you mean: http://codepen.io/benfrain/pen/djEhf

?

I don't _seem_ to have any issue in Chrome/Safari/Firefox




",benfrain,Snugug
251,2012-02-03 22:54:20,"@powerbuoy You can get the same results as follows:


",nex3,powerbuoy
249,2012-03-17 12:59:57,"@nex3 I don't really know what makes most sense. Semantically, you could argue that & means ""this element"", and &width means ""this element's width"", especially since you would never have (afaik) a case where, currently, you would write &foo or &-prefix-foo.

However, and this is just a random thought because I don't know if it's already possible in sass, we could expand this to include more properties. A function might make more sense.



`prop(element, property[, default])` where element can be &. This might be doable with syntax but unsure how. Maybe &->color, #foo->color, (#foo input)->color but sounds weird, and introduces a new selector.
",jleclanche,nex3
241,2012-01-26 22:32:28,"@MattyBalaam It's not easy to safely re-order rules in a stylesheet. In your case I believe it works, but consider the following two chunks of CSS:





Under the first, `<div class=""foo bar""></div>` would have `position: relative`, while under the second it would have `position: fixed`. This is why Sass can't naively reorder rules. It's long been a desire of mine to have a way of figuring out ways to safely re-order in order to optimize the generated CSS, but this is a difficult problem that I haven't had time to focus on yet (and probably won't for a while).
",nex3,MattyBalaam
241,2012-01-27 08:12:26,"@nex3 I see your point about some kind of intelligent re-ordering being a problem. But would there be any way of allowing this so the developer has control over where the rules are placed?

So throughout the file you would be able to say something like `@target handheld {display: inline}` and then at the end of the file you would be able to then call all the rules in a way like this:



Obviously you may get times when rules conflict, but that would be no different from coding the CSS manually.
",MattyBalaam,nex3
241,2012-08-13 22:34:39,"I really don't understand what objections to `@target` that @nex3 has other than it's possible to do this in other ways -- seeing as how all of Sass can be done in other ways.
",chriseppstein,nex3
241,2012-08-16 00:57:02,"@nex3 it's not the same. The differences:
1. additional s[ac]ss files must be created and configured
2. The behavior of `@target` is to hide all the things not in the target. So the code would actually have to be:


1. It seems likely that `@target` would be have better performance.
",chriseppstein,nex3
241,2012-08-16 11:55:16,"Thanks for chiming in Rich, but I think that actually is the opposite of what we're looking to do.

This is a language level change, so an end user shouldn't need to write an @each statement anywhere; the idea is to just wrap a piece of code and, at a language level, have it generate a separate stylesheet with just that wrapped code, so no need for the @each, and more importantly, we don't want to flat out @import all of style, we want separate stylesheets with desecrate code. If we take the @each out, then the `@as` directive as you've proposed doesn't seem to allow us to specify just what selectors from `#foo` or from `@media` we want to use; it seems to be all or nothing. I feel is may be worse from a user's perspective as the control for it is a bit clumsy; where does it start? Where does it end? Does it carry through partials? What if I want some code to go to all stylesheets, others to go to just one of the children sheets? I think a wrapped solution, either being `@target` or the `@if` is a better way to go, and feel that `@target` is the best of the three.

While I'm here though, a suggestion for either solution: the ability to specify that the output should be put in more than one spot, so something like this:



or



Also, funny, now that I just wrote out those two, I would really hate to write out the `@if` for everything, really does hurt my mental model and could lead to some very easy to get wrong syntax errors expecting to be able to write a full `@if` statement. I now much prefer `@target`.

@nex3, with `@if`, what would the expected output of the following be? If we add onto `@if`, what happens here?



Does `$target` become the first reserved variable name in Sass? What happens if someone creates a `$target` variable? Will they get an error at all? If so, where? At variable creation or at use? Should it error at all? Maybe they just want to use the variable namespace `$target` without creating separate stylesheets? What happens if an existing mixin/function has `$target` as an argument? What will happen with all of those?

Can you chain target if statements with non-target if statements? If so, what happens when you do; does it only print if the entire if statement evals to true as per normal, or will it generate the the stylesheet than continue evaluating the if statement?

Essentially, the question is, what happens when you add new and unexpected functionality into preexisting mental models? Wouldn't it be better to create a new mental model for this truly new functionality?
",Snugug,nex3
241,2012-08-20 17:42:50,"@Snugug I'm not particularly swayed by the idea that `@if` statements are harder to write or less semantic. You could always just write a mixin to make it more clear:



There's also no reserved variable names or other magic going on. There would just be a command-line argument to Sass that allowed you to set a global variable (`$target`) externally. It would function in every way like a global variable, including being assignable from local scopes.

@chriseppstein The differences you bring up are more compelling, although I'm not entirely sure why you'd want the separate target stylesheets not to have the contents from the primary stylesheet.

@scottkellum I don't understand what you mean by ""isolating styles across partials."" Can you give a more concrete example of how this was awkward?
",nex3,Snugug
241,2012-08-20 17:42:50,"@Snugug I'm not particularly swayed by the idea that `@if` statements are harder to write or less semantic. You could always just write a mixin to make it more clear:



There's also no reserved variable names or other magic going on. There would just be a command-line argument to Sass that allowed you to set a global variable (`$target`) externally. It would function in every way like a global variable, including being assignable from local scopes.

@chriseppstein The differences you bring up are more compelling, although I'm not entirely sure why you'd want the separate target stylesheets not to have the contents from the primary stylesheet.

@scottkellum I don't understand what you mean by ""isolating styles across partials."" Can you give a more concrete example of how this was awkward?
",nex3,scottkellum
241,2012-08-20 17:42:50,"@Snugug I'm not particularly swayed by the idea that `@if` statements are harder to write or less semantic. You could always just write a mixin to make it more clear:



There's also no reserved variable names or other magic going on. There would just be a command-line argument to Sass that allowed you to set a global variable (`$target`) externally. It would function in every way like a global variable, including being assignable from local scopes.

@chriseppstein The differences you bring up are more compelling, although I'm not entirely sure why you'd want the separate target stylesheets not to have the contents from the primary stylesheet.

@scottkellum I don't understand what you mean by ""isolating styles across partials."" Can you give a more concrete example of how this was awkward?
",nex3,chriseppstein
241,2012-08-20 17:47:42,"@nex3 because, in this case, you serve both stylesheets to the browser.
",chriseppstein,nex3
241,2012-08-20 18:20:26,"@nex3 See yepnope.js, it's a very common strategy.
",chriseppstein,nex3
241,2012-08-20 20:21:54,"@nex3 if there is only one dimension then the approach you've identified makes sense and is most optimal. But if there are two or more dimensions the approach falls apart as you have to permute all the dimensions in order to have a stylesheet to load that matches the exact client needs.
",chriseppstein,nex3
241,2012-08-20 20:28:36,"@Snugug My suggestion wasn't to load two stylesheets, one basic and another basic + IE8; rather, it was to only load the basic + IE8 stylesheet on IE8.

@chriseppstein I take your point. That would indeed be difficult to deal with in my suggested approach.

All right, I'm sufficiently convinced that `@target` is the best way to handle this use case.
",nex3,Snugug
241,2012-08-20 20:28:36,"@Snugug My suggestion wasn't to load two stylesheets, one basic and another basic + IE8; rather, it was to only load the basic + IE8 stylesheet on IE8.

@chriseppstein I take your point. That would indeed be difficult to deal with in my suggested approach.

All right, I'm sufficiently convinced that `@target` is the best way to handle this use case.
",nex3,chriseppstein
241,2012-11-27 10:34:31,"I agree with @nex3's comments on #577, `@buffer` is useful in a single case, but `@target` as discussed is much more powerful. 

Look forward to seeing progress on this.
",replete,nex3
241,2014-02-13 03:34:22,"Hey everybody, 
Adding a bump in here. Is there any movement on this? I think that this functionality is terribly needed. @Snugug, thanks for all the use cases; they're all things that I'm running into and have a real need to solve.
",bradfrost,Snugug
241,2014-05-26 20:58:55,"I'm also after a feature like this, the specific use case I'm interested in is to generate an extra inline.css file which will be included inline in the page to optimize above-the-fold render speed/speed index. Pretty much exactly what @ByScripts is after.

Currently I do this by commenting out the section in the file and annotating it with an 'inline' comment, then duplicating the styles in inline.scss.

_some-module.scss



inline.scss


",Tyriar,ByScripts
241,2015-06-11 13:40:20,"@RoboAndie did you try https://github.com/snugug/gulp-css-target ?
",barraponto,RoboAndie
241,2015-06-11 13:56:02,"@barraponto We're going to try that soon, but we'd really prefer to have it be part of core Sass.
",RoboAndie,barraponto
241,2016-01-21 03:06:10,"Actually I was looking for exactly this! 
My use case: 

I have a Drupal project with multiple projects separated through domains. Every domain has a generally the same theme, but domain specific adjustments. 
So on one side the headlines are bold, or the background colors are different etc. 

I would really love something like 



To split all domain specific styles to domain specific files. That way I would not have to use a domain class selector and deeper cascading. 

@Snugug 
Your Gulp plugin looks great. You helped my years ago at the DrupalCon in Munich through some conversations and you help me here again with your plugin (and all the time through other stuff like the breakpoint library or singularity ^^).
Thanks so much man! 
",webcultist,Snugug
235,2011-12-30 01:04:18,"@nex3 I asked @barraponto to file this after a thread on the compass mailing list. I think this is a case where the meaning of the comment is changed significantly when placed on the next line. Are you opposed to special casing this?
",chriseppstein,barraponto
235,2012-11-13 05:23:08,"@barraponto But why do you want to keep comments in final output? 
",jitendravyas,barraponto
235,2012-12-18 15:34:42,"@barraponto I agree, I would like to see this implemented
",chrisslater,barraponto
235,2012-12-18 22:11:29,"+1 for this one. Inline comments can be quite helpful. Some people don't necessarily want to minimize their CSS. And as @barraponto says, in shared stylesheets, documenting via comments is a nice thing to have.
",ricardozea,barraponto
233,2012-01-22 15:43:47,"Hi everyone!

As suggested by @paulirish, I tried to improve the typography a bit. I also made some tweaks to the design so it matches better with the Sass website.

As promised, I published it on GitHub: https://github.com/Kaelig/Sass-reference

@chriseppstein and @nex3, I added as contributors on the project, since you are the authors of the reference.

What's our next move? Do you want to publish it on sass-lang.com ? (it's ok with me)
",kaelig,paulirish
233,2012-01-22 15:43:47,"Hi everyone!

As suggested by @paulirish, I tried to improve the typography a bit. I also made some tweaks to the design so it matches better with the Sass website.

As promised, I published it on GitHub: https://github.com/Kaelig/Sass-reference

@chriseppstein and @nex3, I added as contributors on the project, since you are the authors of the reference.

What's our next move? Do you want to publish it on sass-lang.com ? (it's ok with me)
",kaelig,nex3
233,2012-01-22 17:31:24,"I _think_ the site is available over here:
https://github.com/nex3/sass/tree/sass-pages

might to see how to integrate the two

On Sun, Jan 22, 2012 at 7:43 AM, Kaelig <
reply@reply.github.com

> wrote:
> 
> Hi everyone!
> 
> As suggested by @paulirish, I tried to improve the typography a bit. I
> also made some tweaks to the design so it matches better with the Sass
> website.
> 
> As promised, I published it on GitHub:
> https://github.com/Kaelig/Sass-reference
> 
> @chriseppstein and @nex3, I added as contributors on the project, since
> you are the authors of the reference.
> 
> What's our next move? Do you want to publish it on sass-lang.com ? (it's
> ok with me)
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/233#issuecomment-3603699
",paulirish,paulirish
233,2012-01-22 17:31:24,"I _think_ the site is available over here:
https://github.com/nex3/sass/tree/sass-pages

might to see how to integrate the two

On Sun, Jan 22, 2012 at 7:43 AM, Kaelig <
reply@reply.github.com

> wrote:
> 
> Hi everyone!
> 
> As suggested by @paulirish, I tried to improve the typography a bit. I
> also made some tweaks to the design so it matches better with the Sass
> website.
> 
> As promised, I published it on GitHub:
> https://github.com/Kaelig/Sass-reference
> 
> @chriseppstein and @nex3, I added as contributors on the project, since
> you are the authors of the reference.
> 
> What's our next move? Do you want to publish it on sass-lang.com ? (it's
> ok with me)
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/233#issuecomment-3603699
",paulirish,nex3
228,2015-02-19 22:36:37,"There's a very solid workaround to the ""very hard to read"" argument.

Can it be an _optional_ thing? The nice (truly, truly wonderful) thing about Stylus is that it doesn't enforce either. You can be as slim or as verbose as you want. It doesn't have an opinion. You can use colons if you want or not; entirely up to taste/need. That is a happy medium. If you work in an editor that hates syntax highlighting, use colons. If you're using something that highlights, no need.

@nex3 I understand your comment about editors, so this scenario (optional colons) addresses both needs.

Why would anyone not want colons? I've worked in both SASS and Stylus extensively, and hands down, the non-colon option is the winner in my book. It's easier to type, just as easy to read (in the right editor, see embeds). But there's an actual additional reason. When using Jade or Slim hand in hand, it becomes even easier to copy back and forth from a `.jade` or `.slim` file and a `.sass` file. Because the syntax is identical. Colons just add noise in that specific scenario. This is an experiential thing, and I realize not everyone will care about that, but it's optimal for some people, and OPTIONAL syntax is a win-win for everyone.

Side note, for those who do use contextual highlighting editors, they do scan the same:

![image](https://cloud.githubusercontent.com/assets/111424/6277544/76cb9a0e-b85d-11e4-9714-38df25b33a84.png)

It would be nice for this issue to get some more serious consideration, not just based on preference. I've tried to present the pros in a way that works for everyone.

**Update/Aside**: I updated my comment to be more pleasant. This is something I _would_ actually love to see implemented, and would absolutely be valuable, so I'm trying to make the case instead of just expressing sentiment.
",arxpoetica,nex3
220,2011-12-07 05:54:59,"@chriseppstein, I do not understand what ""reformat the properties to be on a single line"" is. Do you mean that we should adding `--oneline` to make close parentheses behave like the old way?
",hlb,chriseppstein
220,2011-12-19 15:16:03,"@nex3 Thank you for the feedback. I have split them into two commits.
",hlb,nex3
216,2012-01-15 23:29:02,"@pengwynn I like that approach. It's nicer than the way I was thinking, which was adding a \ to the end of line like in Python.
",talsafran,pengwynn
216,2014-02-02 03:34:27,"@lolmaus Here is a sample of my HAML code, and I don't really like it, am I doing it wrong? AFAIK Haml doesn't allow you to simply end a line with comma.


",firedev,lolmaus
216,2014-02-02 09:47:44,"@firedev Does it work when formatted like this?



A shorter way:



I didn't test it, but i format my Haml code similarly and it works.

TL/DR: You don't need a pipe in the end of a line of Haml code if the line ends with a comma.
",lolmaus,firedev
216,2014-09-01 19:38:19,"@lozandier, no caveats, it's just that the logic behind indented syntax is old and funny nobody wants to get their hands dirty.
",lolmaus,lozandier
216,2014-11-02 16:54:46,"I'd love to get some feedback on #1504.

_for @next3 / the maintainers_
- The PR only improves multi-line support in one specific area: for maps and lists as variables. It won't help with mix-in declarations, multi-line properties, etc. While as a user of the indented syntax, I'd like to see this improvement as soon as possible, I could understand why the maintainers might prefer to hold off and improve support for multi-line across the board. 
- I find the organisation of unit tests in the codebase pretty unclear. Thus I'm not sure if I added tests in the right place.

_for everyone_

How Sass-like should the syntax be?

I worked on the basis of the suggestion from @mxlje (https://github.com/sass/sass/issues/216#issuecomment-41361084). 



Something like this might also be possible though:



In other words, we could make commas optional (or even illegal) - This would give map key-values a very similar syntax to properties. Personally, I'm on the fence about whether this would be a good thing.

n.b. since Sass is pretty liberal about what it allows as a list delimiter, this already works:


",myabc,mxlje
216,2014-11-04 22:38:03,"@myabc I'm really glad to see someone looking into this, but I'm not a fan of the way this parsing works. Allowing completely arbitrary expressions but requiring them to be indented beneath variable declarations seems likely to paint us into a corner with respect to backwards compatibility once we do rewrite the indented syntax parser.

> How Sass-like should the syntax be?

My vision for the rewritten parser is that it will support both an indented style and a delimiter-based style, similar to how YAML works. For example, you could write:



I'd like for this to extend to map literals in the way you suggest, although doing so gets a little tricky due to the separation between the statement-level parser and the expression-level parser.
",nex3,myabc
216,2014-11-11 14:09:21,"@myabc Great news! This is is a huge step
",baires,myabc
216,2015-04-18 13:05:17,"@chriseppstein I did submit a patch (see #1504), but I'll admit that it wasn't a particularly elegant solution. It seems that doing this right hinges on doing a rewrite of the parser for Sass syntax.

I would certainly be up for helping out with this, but it wouldn't be something I'd want to embark on without some guidance from the core team. Embarking on a a rewrite also begs the question, given the interest in [libsass](https://github.com/sass/libsass), as to whether it's worth investing time in a Ruby variant, rather than developing in C++.
",myabc,chriseppstein
216,2015-05-03 18:51:14,"For what it's worth, and this may be a temporary solution for @safareli too: I mostly want to use this for values of variables (long lists/maps, etc). Currently I keep those in a `_variables.scss` file and `@import` it into my `.sass` files. Keeps the curly brackets and semi-colons to a single file :)
",roytomeij,safareli
216,2015-12-03 16:52:15,"> Kind of like how libsass does it?

@hcatlin I've not read the details of that implementation yet, so I can't say for sure. But, at a high level, yes. This was the idea I floated for supporting the indented syntax during when we created SCSS, but @nex3 had some reservations about the implementation I suggested. I have since had some ideas that would not have the downsides that my original implementation approach would have had.
",chriseppstein,nex3
216,2015-12-03 16:52:15,"> Kind of like how libsass does it?

@hcatlin I've not read the details of that implementation yet, so I can't say for sure. But, at a high level, yes. This was the idea I floated for supporting the indented syntax during when we created SCSS, but @nex3 had some reservations about the implementation I suggested. I have since had some ideas that would not have the downsides that my original implementation approach would have had.
",chriseppstein,hcatlin
216,2016-07-29 20:03:13,"Hi @simonvomeyser. Could you write an example?
",lokson,simonvomeyser
216,2016-08-02 07:11:07,"Hey @lokson, came here from #1088 ""Multiline declaration of maps in SASS"" - Something like this is not working with the sass-syntax.



these maps have to be in one line to work like so



This seems to be known and I just wanted to give my +1 here. Thanks for asking tough! :)
",simonvomeyser,lokson
216,2016-08-03 09:19:51,"@simonvomeyser 

I believe multiline operator is going to be a part of upcoming Sass v3.5 (https://github.com/sass/sass/pull/2094). After some discussion on the syntax the result is:


",lokson,simonvomeyser
216,2016-08-03 11:35:55,"@lukewatts, what if the chuck of code is at the beginning of a file?
",igoradamenko,lukewatts
216,2016-08-03 12:04:18,"@lukewatts there was ready implementation for something similar (check https://github.com/sass/sass/pull/2094). It would use indentation to join lines, like:



But this approach was voted as untypical and misleading, so it was changed into:


",lokson,lukewatts
216,2016-08-03 18:33:23,"@igoradamenko It wouldn't make a difference. Only items ""nested"" after the `\\` (or whatever special character) would be interpreted as multiline. For example:



Same as comments. If you have a `//` at the beginning and you nest something under that it doesn't mean you're whole file is commented out unless everything is indented one level after the comment.
",lukewatts,igoradamenko
216,2016-08-03 18:41:13,"I agree with @lolmaus Ideally less is more. What if the brackets weren't even required? Why not this:



Isn't that what cson does for json? I mean it's indented. Make indents matter, not symbols
",lukewatts,lolmaus
216,2017-02-28 19:40:16,"@neo-eureka one of the main pillars of open source software is that anyone can contribute to the project. In my opinion this ""issue"" is largely cosmetic, a ""nice-to-have"", and doesn't prevent you from actually using the tool.

Perhaps next time instead of writing an elaborate rant like that you could consider making a pull request?",mlison,neo-eureka
216,2017-02-28 19:58:32,"@neo-eureka , It's very hard for anyone, who comes from outside of a context, to dive into, and fix such problems. I think the authors should responsible to their communities. 

A lot of users are waiting for a simple feature. It seems after 5 years, There is no body to fix it. this approves my reason. because we can not do that within a simple trick. It's take a lot of time to i understand the project structure and etc ...",pylover,neo-eureka
216,2017-02-28 20:01:55,"@neo-eureka , Currently you are using a lot of software made by open source developers, and they are very responsible to their mistakes and feature requests. That's why the open-source world is working for all of us",pylover,neo-eureka
216,2017-02-28 20:02:10,"@pylover your argument depends on an assumption that ""if somebody is the only one who can do it, he is obligated to do it"", and that is, simply, not true.",mlison,pylover
216,2017-02-28 20:04:58,"@mlison, Other users will judge about our ideas.",pylover,mlison
216,2017-02-28 20:11:03,"@pylover Now don't get me wrong, I too prefer projects without issues. The responsibility that you are referring to, though, is only a personal responsibility. It is a choice of whether and how you are going to deal with such problems. The core of your idea is basically ""if you can't do it properly, don't do it at all"" - with that, we would all be very surprised how much open source software wouldn't exist. Publishing software on Github is not a contract between the developer and rest of the world.",mlison,pylover
216,2017-02-28 20:15:03,"@neo-eureka @pylover it is not a ""simple"" feature.

I came up with a hacky implementation a couple of years ago https://github.com/sass/sass/issues/216#issuecomment-61413816. Unfortunately, in addition to being a hack, I didn't get much feedback about the syntax I proposed. There are many who have +1'd this issue, but it seems there are relatively few in the community who are willing to dig in to the specification and implementation details.",myabc,pylover
216,2017-02-28 20:15:03,"@neo-eureka @pylover it is not a ""simple"" feature.

I came up with a hacky implementation a couple of years ago https://github.com/sass/sass/issues/216#issuecomment-61413816. Unfortunately, in addition to being a hack, I didn't get much feedback about the syntax I proposed. There are many who have +1'd this issue, but it seems there are relatively few in the community who are willing to dig in to the specification and implementation details.",myabc,neo-eureka
216,2017-03-01 15:25:14,@neo-eureka Ruby Sass is not maintained anymore and a good MR for multiline feature has been closed without merge: https://github.com/sass/sass/pull/2094,lokson,neo-eureka
216,2017-03-02 19:31:53,"@lokson Well, If I'm not mistaken, there's still node-sass around, right? Anyhow, I don't hold any hopes for the Indented Syntax anymore, for years it seems like they've been trying to kill it anyways, it's just not a thing anymore, despite being much more cleaner and elegant than raw CSS or even SCSS. Personally, I do prefer the Indented Syntax over the Non-Indented one (scss), but maybe scss is just much more simpler to maintain and to learn (even though is not that difficult to learn the Indented Syntax, honestly).",iErik,lokson
211,2011-11-27 17:51:02,"@timplunkett resorting to mixins will print the properties everytime you @include it.
also, if you try to @include an undefined mixin it breaks compilation. if you try to @extend a class that does not exist, everything works just fine.
",barraponto,timplunkett
211,2011-11-27 18:04:30,"@barraponto, not sure that the first part is a bad thing. To the second part, I think that is a bug, see https://github.com/nex3/sass/issues/111
",timplunkett,barraponto
193,2012-02-20 19:37:57,"@chriseppstein There's a number of cases, but the primary one for me is including third party modules and libraries which have their own css. I would like to use sass to process my own scss files and then compile _all_ css into a single download to the browser. 
",sean-lynch,chriseppstein
193,2012-02-20 19:55:54,"@sean-lynch Certainly, but is there something about this that makes process renaming the file onerous?
",chriseppstein,sean-lynch
193,2012-02-20 20:06:35,"@chriseppstein Requiring me to rename files in separate modules breaks the benefits modularity. I know it seems minor, but it's one of those code smells I actively try to avoid if at all possible.

For example, when ever we need to update a third-party package, I'd have to make sure to rename the css files it provides to .scss. It's a small step, but just another thing that can be forgotten when doing upgrades or missing from a README file when distributing source to others. It's the same reason modifying libraries directly is frowned upon rather than monkey-patching them separately as part of the project source you control.
",sean-lynch,chriseppstein
193,2012-02-20 20:47:10,"@sean-lynch Ok. I agree and that is the same rationale I've been using in my own thought experiments. I think the best we can do is introduce a deprecation in 3.2 and then make the change in 4.0 But we have to know where we're heading, and we don't yet have that solved :(
",chriseppstein,sean-lynch
193,2012-07-05 22:56:06,"@chriseppstein, how about the following?

`@import ""file.css"";` embeds the input. Given the current behavior with SCSS files, I think that's what everyone expects.

`@import url(file.css);` does not embed the input. I think the syntax makes it obvious that no embedding will happen here.
",pwnall,chriseppstein
193,2012-07-05 23:58:44,"@chriseppstein Then how about this

`@import ""file.css"";` implements the current behavior, and issues a warning recommending one of the two forms below:

`@import url(file.css);` CSS @import directive

`@import file(file.css);` embed the file; I'm not too attached to the `file` keyword, `inline` sounds just as fine to me.
",pwnall,chriseppstein
193,2012-07-06 06:45:45,"@chriseppstein Sorry for being brief earlier, I was putting out the fire that issue caused.

Here is the rationale behind my request for warnings: generating `@import url` directives with relative paths is dangerous, because Chrome and Firefox resolve the URLs relative to the CSS file that contains them, whereas Internet Explorer <= 9 resolves the URLs relative to the site root. (no clue what IE 10 does). So I consider that silently generating `@import url()` directives is an unpleasant surprise, and I hope SASS will do better.
",pwnall,chriseppstein
193,2012-07-13 21:55:00,"@nex3 thank you for thinking of a solution for this problem.

I think the @import treatment of .css files made sense when sass could only parse the indented syntax (.sass files), but is currently a nasty surprise. Sass is a really well thought-out and refined language, so I believe most folks were / will be rather surprised by @import's special casing of files that end in "".css"".

I felt backstabbed, because emitting an ""@import url()"" directive based on what's likely to be a filesystem path will result in code doesn't work across browsers, and I'm used to having sass work on my side, and helping me write good CSS. I really think that only ""@import url(x)"" should emit a url directive.

Last, the requirement to rename files adds friction when dealing with 3rd party code -- I think it's not unreasonable for developers to aim to minimize the modifications to such code. Renaming can add extra hassle when merging in-house changes with upstream changes, and makes it harder to track a file's origin by googling its name.

One of the big benefits of sass is that it lets me organize my css as I wish on the server, and still serve a single file to browsers. The special handling of .css files breaks this promise a bit.

In closing, thank you very much for taking a look at `@import`. I've come to rely heavily on sass, and it broke my heart when it screwed me over and caused to me break a site. I look forward to seeing this wrinkle go away.
",pwnall,nex3
193,2014-02-18 11:13:41,"@pwnall still have no method to fix this solution?
",singleseeker,pwnall
193,2014-02-19 03:56:05,"@singleseeker Sorry, to the best of my knowledge there's still no way to force Sass to include the contents of a .css file instead of generating an @import CSS directive. In #442, I volunteered to implement the syntax that the Sass maintainers come up with. I'm afraid there's nothing else I can do to push this forward.
",pwnall,singleseeker
193,2014-02-25 23:23:38,"@chriseppstein does it work with compass watch? there are some open issues which suggest it does not... 
",loostro,chriseppstein
193,2014-02-26 00:00:34,"@loostro I made some changes in Sass 3.3 that will enable making this work.
",chriseppstein,loostro
193,2014-02-26 09:38:55,"@chriseppstein great! i'll be testing it soon then :) 
",loostro,chriseppstein
193,2014-03-01 15:49:11,"@chriseppstein Where can we see those changes, and what the syntax is? It's of interest since 3.3 is in RC now :)
",rawtaz,chriseppstein
193,2014-03-03 18:21:34,"@rawtaz The changes are in 0a8289f3a9d76a67add028c20db1bc1d037669f0.

In Sass 3.3 I rewrote the Sass watcher. My plan is to remove Compass's watcher and instead, just configure Sass's watcher. But even without that, the fact that importers can declare where their files are and what should be watched is sufficiently abstract to make any importer and watcher work together.
",chriseppstein,rawtaz
189,2012-06-06 11:33:12,"@smith, your workaround just saved my life ;-)
",schnittchen,smith
189,2013-02-26 00:34:19,"Thanks @wadetandy, I've fixed my comment.
",nex3,wadetandy
189,2014-12-05 20:51:23,"@sztupy That's not how it's expected to behave, and I can't reproduce that behavior locally. What version of Sass are you using?
",nex3,sztupy
183,2014-12-16 21:45:23,"@davevasquez z-index is a great example.

I'd say most designers who work with CSS also, at the very least, dabble in JavaScript, and creating a for loop with i++ is one of the first things you learn. To me, this is no more complicated than using a any kind of loop.
",whaaaley,davevasquez
183,2015-01-05 21:44:04,"@davevasquez for use-specific examples like that, it's very easy to write a function that does it more semantically:


",nex3,davevasquez
183,2015-01-05 21:54:51,"@nex3 Thanks for the helpful function!
",davevasquez,nex3
168,2011-09-12 09:24:34,"About it being slow: @nex3
I am currently working on a new project, so style wise its very small, but even so.
Currently the project have about 30 sass files which together are about 2000 rows of very simple sass.
For every file it takes about 100-200 ms to compile, 3-4 seconds for all of them. If I concatenate them together before I do the sass compilation it takes 1 second which is more ok. The just this experiments shows me that the tear-up/tear-down takes most of the time, but even the compilation takes time.

This might feel ridiculous complaining about seconds, but when you work with a project and you compile all the time these seconds are getting annoying. And this get a lot worse when working with a project that has hundreds of sass files. I have another project where I need to wait almost 30 seconds.

About cached sass files: @chriseppstein
All our sass files are compiled and concatenated in a specific order into ""all.css"", so I don't have the css file anywhere.
That way if sass cached them separately the speed of compiling the all.css would go much faster, if you only changed some of the files. But this issue isn't that important anyway, if you manage to speed the compiler.
",Zakay,nex3
168,2011-09-12 09:24:34,"About it being slow: @nex3
I am currently working on a new project, so style wise its very small, but even so.
Currently the project have about 30 sass files which together are about 2000 rows of very simple sass.
For every file it takes about 100-200 ms to compile, 3-4 seconds for all of them. If I concatenate them together before I do the sass compilation it takes 1 second which is more ok. The just this experiments shows me that the tear-up/tear-down takes most of the time, but even the compilation takes time.

This might feel ridiculous complaining about seconds, but when you work with a project and you compile all the time these seconds are getting annoying. And this get a lot worse when working with a project that has hundreds of sass files. I have another project where I need to wait almost 30 seconds.

About cached sass files: @chriseppstein
All our sass files are compiled and concatenated in a specific order into ""all.css"", so I don't have the css file anywhere.
That way if sass cached them separately the speed of compiling the all.css would go much faster, if you only changed some of the files. But this issue isn't that important anyway, if you manage to speed the compiler.
",Zakay,chriseppstein
168,2011-09-12 09:49:02,"@Zakay given what you said about your structure, all of the imported files should be cached. How are you compiling your stylesheets? Are you running the sass compiler once for each file? Please show us how you get your measurements.
",chriseppstein,Zakay
168,2011-09-12 11:01:32,"@chriseppstein Yes, I am running it once per file, but I just found out that is running using stdin, so the reason why there is no cached file is because the compiler doesn't know the filename. This is because the sass files goes through another filter before passing sass compiler. And of course coming from stdin the compiler doesn't know if the file has any changes.

So I am in the process to re-do this step so that I can call the compiler with a filename instead.

Would be nice anyway to profile the compiler, and optimize it :)
",Zakay,chriseppstein
168,2011-09-12 11:29:02,"@chriseppstein I now changed our environment to use the filename instead, so the compile cache files now exist, BUT next time i execute the compilation I get the same results, no speed improvments at all, which is very weird.
",Zakay,chriseppstein
168,2011-09-12 14:33:33,"@Zakay You're still running it once per file? Most of the time is spent loading ruby and the sass program. You should let sass compile all your files with one call using the `--update` option.
",chriseppstein,Zakay
168,2011-09-13 09:27:54,"@chriseppstein the problem is that if you have a project that combines other style sheets that SASS, then you really can't use the update nor the watch command.

So, even if you have the compiled cache files it still takes the same amount of time compiling each file, which tells me that the compilation itself isn't slow but the tear-up or tear-down, but I'am guessing it the first setting up process which is slow in the SASS compile script. Is there a way to profile ruby? I haven't coded any ruby at all.
I would recommend profiling it and check where/what it spends most of the time, this process can probably be optimized a lot.
",Zakay,chriseppstein
168,2011-09-13 15:27:17,"133-249ms for one file is perfectly reasonable if you're calling sass on each file individually. most of that time has nothing to do with compiling the sass file, but with loading ruby itself, parsing the ruby code, interpreting or running on the VM, and so forth. Using your file as an example, named test.sass by itself with no cache:



Using just that number, one would assume that compiling 200 versions of that file would take 41.4 seconds (0.207 \* 200 = 41.4). However, using 200 versions of that file each with a different name in a ""sass"" subdirectory and output to a ""css"" subdirectory:



And on a subsequent cache-warm run:



This is why @nex3 and @chriseppstein have suggested a workflow where you can use --watch or --update. The bulk of the time cost you're seeing can be avoided entirely.
",ttilley,nex3
168,2011-09-13 15:27:17,"133-249ms for one file is perfectly reasonable if you're calling sass on each file individually. most of that time has nothing to do with compiling the sass file, but with loading ruby itself, parsing the ruby code, interpreting or running on the VM, and so forth. Using your file as an example, named test.sass by itself with no cache:



Using just that number, one would assume that compiling 200 versions of that file would take 41.4 seconds (0.207 \* 200 = 41.4). However, using 200 versions of that file each with a different name in a ""sass"" subdirectory and output to a ""css"" subdirectory:



And on a subsequent cache-warm run:



This is why @nex3 and @chriseppstein have suggested a workflow where you can use --watch or --update. The bulk of the time cost you're seeing can be avoided entirely.
",ttilley,chriseppstein
168,2011-09-13 15:36:13,"@ttilley The issue is if you have an styles not only from sass, then you really can't use the watch/update command. When you really need to re-write the entire ""all.css"".

But if most of the time is ruby, then you really can't do anything about it. I also reached to the conclusions that its not the compiling that is slow, but setting up the script. But what I don't know if its the setting up of the ruby environment or setting up the compiler which takes most of the time. Or maybe 3rdparty ruby libs. But as a guess I wouldn't first blame ruby itself.
",Zakay,ttilley
168,2011-09-13 16:48:05,"in that scenario you have a few options. you can go the hacky route and make _three.scss a symlink to three.css if you absolutely cannot convert it to sass. then in all.sass you would have:



that should just work, but it's hacky and ugly. also, your css file needs to be correct and parsable css. there are css hacks for targeting specific browsers that might parse, but not to what you had intended (comment hacks, for example).

another option would be to move the concat/compress phase out of sass and into another tool entirely. an excellent choice for handling multiple rulesets based on file change events is `guard`: https://github.com/guard/guard

using guard, guard-sass, and guard-shell, you would simply run ""guard"" in a directory with a guardfile like so:



A recently popular (thanks to rails 3.1) options is to use the sprockets asset pipeline, but that would be significantly more complex: https://github.com/sstephenson/sprockets

...I'd say the simplest option is to let sass do what it's good at, switch to using --watch or a guardfile, and have something else be responsible for concatenating or compressing your css together. If you're ok with using guard, it does make it simpler to have multiple simultaneous rulesets for multiple tools (including running your unit tests when source files change, checking the syntax of your javascript using jslint, using livereload to refresh the css in your running browser the second you save your sass/css file, etc). At the least, it'd have a process that stays resident and your speed problem goes away.

@nex3, @chriseppstein - if you have better suggestions, i'd love to hear them as well. Either way, I'd say that it's safe to close this bug. Perhaps someone with more motivation than me should make a blog post or write a wiki article. ;)
",ttilley,nex3
168,2011-09-13 16:48:05,"in that scenario you have a few options. you can go the hacky route and make _three.scss a symlink to three.css if you absolutely cannot convert it to sass. then in all.sass you would have:



that should just work, but it's hacky and ugly. also, your css file needs to be correct and parsable css. there are css hacks for targeting specific browsers that might parse, but not to what you had intended (comment hacks, for example).

another option would be to move the concat/compress phase out of sass and into another tool entirely. an excellent choice for handling multiple rulesets based on file change events is `guard`: https://github.com/guard/guard

using guard, guard-sass, and guard-shell, you would simply run ""guard"" in a directory with a guardfile like so:



A recently popular (thanks to rails 3.1) options is to use the sprockets asset pipeline, but that would be significantly more complex: https://github.com/sstephenson/sprockets

...I'd say the simplest option is to let sass do what it's good at, switch to using --watch or a guardfile, and have something else be responsible for concatenating or compressing your css together. If you're ok with using guard, it does make it simpler to have multiple simultaneous rulesets for multiple tools (including running your unit tests when source files change, checking the syntax of your javascript using jslint, using livereload to refresh the css in your running browser the second you save your sass/css file, etc). At the least, it'd have a process that stays resident and your speed problem goes away.

@nex3, @chriseppstein - if you have better suggestions, i'd love to hear them as well. Either way, I'd say that it's safe to close this bug. Perhaps someone with more motivation than me should make a blog post or write a wiki article. ;)
",ttilley,chriseppstein
163,2011-09-16 07:11:40,"@krainboltgreene the second issue should be filed against sass-rails, but I don't really understand the issue so can you please explain it differently there? The file resolution and lookup is actually done by sprockets -- I just call their method to find it. See:
- https://github.com/rails/sass-rails/blob/master/lib/sass/rails/importer.rb#L33-41
- https://github.com/rails/sass-rails/blob/master/lib/sass/rails/template_handlers.rb#L17

So it might be better to file the bug against sprockets.
",chriseppstein,krainboltgreene
163,2011-09-16 23:50:06,"@krainboltgreene That is why we implemented the importer framework. We don't know what is the semantics of those other extensions. The other web frameworks can implement their own importer that provides the appropriate semantics.
",chriseppstein,krainboltgreene
157,2011-08-22 15:12:15,"@moeffju thanks for tracking this down!
",chriseppstein,moeffju
156,2014-02-01 20:28:11,"@chriseppstein Did this get merged into 3.3 or is it still just a plugin?
",jlong,chriseppstein
156,2014-02-04 21:49:44,"@jlong, it looks like this will be part of the 4.0 release.
",cseeger,jlong
154,2011-09-14 19:45:46,"@ZeeAgency That's pretty tangential to this issue, but no, currently we don't have any concrete plans for that. We're tossing around ideas for a more advanced `@import` mechanism that may allow for file-scoped `@extend` in the future, but the details remain to be seen.
",nex3,ZeeAgency
154,2011-09-16 07:00:06,"@gxclarke this is an interesting idea and theoretically sound, but it's more than just copying the base class, it's all the selectors that involve the `.test` class and if those are in media queries... well it gets complicated fast.
",chriseppstein,gxclarke
154,2012-04-19 21:32:05,"@scottkellum we need to make the case for getting @extend in browsers.
",chriseppstein,scottkellum
154,2012-04-19 21:40:09,"@chriseppstein This stuff seriously changed the way I write code (wrote an unpublished article and framework about this). File size seems better when preprocessing @extend although native mixins would do wonders for CSS size.
",scottkellum,chriseppstein
154,2012-04-20 22:29:22,"@scottkellum It's not a logic issue, it's a bloat issue. It's dangerous to have a construct that produces a relatively manageable amount of output in most contexts but hugely more in certain specific contexts. To say nothing of the potential behavioral issues of re-ordering the document.

For your case in particular, it really feels as though all the `%width-*` rules should be mixins. Conceptually, they aren't classes to be inherited, they're just presentational rules. Is there a reason that they're placeholder selectors? Is it just for code size?
",nex3,scottkellum
154,2012-04-21 01:26:28,"@nex3 yes it is just for code size. I guess gzip would solve that issue but I would love to handle it on the CSS level.
",scottkellum,nex3
154,2012-05-17 21:25:15,"@scottkellum There's another way to do this that works even with this change and I would argue makes the code better organized.



In that way your `article` selector contains all of its extensions in one place.
",aaronjensen,scottkellum
154,2012-05-17 23:45:52,"@Anahkiasen that's the subject of issue #391
",nex3,Anahkiasen
154,2012-05-18 04:33:34,"@aaronjensen unfortunately I would like to reuse the same grid objects throughout the breakpoints fluidly instead of generating a set of objects for each breakpoint.

Also, extending from within the `@media` directive with the rest of your styles results in cleaner CSS output. These directives add a fair amount of weight to a page and the goal is to write one for each breakpoint. Excessive media bubbling can result in duplicate `@media` declarations.
",scottkellum,aaronjensen
154,2012-05-18 05:27:47,"@scottkellum I'm not sure what you mean by ""Excessive media bubbling"" or ""duplicate `@media` declaration"". Could you clarify? My proposal doesn't involve any additional `@media` declarations, and it keeps all of the style about one rule in one place, so it's easier to understand.
",aaronjensen,scottkellum
140,2011-07-22 19:06:28,"@nex3 I think a lot of our users are not used to the UNIX convention of success being indicated by no output.
",chriseppstein,nex3
140,2011-07-22 19:10:29,"@chriseppstein Be sure I know that, I'm just on Windows temporarily ;)
",OyoKooN,chriseppstein
140,2011-07-22 19:13:14,"@nex3 I had forgotten this case, what a shame...
So consider that I've never opened this issue and that everything is working on Windows 7 ;)
",OyoKooN,nex3
139,2011-08-22 15:10:58,"@seanofw Can you please provide the use case of a file that is ""designed to be imported only once""?
",chriseppstein,seanofw
139,2011-09-30 14:48:48,"@chriseppstein:  The best example I can give is a diamond-style dependency pattern, which occurs in larger software.

So let's say you have these four files in a big system that's been well-factored into small units:
- _DropDownMenu.scss
- _CarModelPicker.scss:  @import ""DropDownMenu"";
- _ColorPicker.scss:  @import ""DropDownMenu"";
- FindACarPage.scss:  @import ""CarModelPicker""; @import ""ColorPicker"";

So ""DropDownMenu"" has the stylings for general, shared dropdown menus that appear when somebody clicks a dropdown button.  ""CarModelPicker"" is the layout for a frequently-reused blob of markup that, say, lets a user choose a car by its year and make and model, and that markup contains dropdown menus.  ""ColorPicker"" is the layout for a frequently-reused blob of markup that lets a user choose a color, and that markup also contains dropdown menus.  Finally, the ""FindACar"" page displays both a model-picker and a color-picker to let a user find a car.

See the problem?  On the ""FindACar"" page, if you don't design ""DropDownMenu"" to be imported only once, you'll get the same dropdown-menu CSS generated twice --- two different places in the same resulting FindACar.css file.  You don't need to use @mixins or anything fancier than @import to demonstrate the problem.

In a large system where the CSS has been heavily sliced-and-diced like this --- like our flagship application with 1.2 million lines of code in it --- the @imports of a single page can end up both broad and deep.  It's possible for the same page to unknowingly import, say, ""_Links.scss"" twenty times, because from the page's perspective, it's listing out its dependencies, and each of those dependencies are listing theirs, and so on until you get to a few base styles that nearly everybody needs.

For a small application, this isn't an issue anyone would notice; but for a big application like ours, avoiding redundant imports is absolutely critical.
",seanofw,chriseppstein
139,2011-09-30 19:28:54,"@seanofw I totally understand this pattern and complex structure. My own site is quite complex. but I don't understand why `_DropDownMenu.scss` should be the one to declare it's importing behavior instead of the caller.
",chriseppstein,seanofw
139,2011-10-05 13:49:54,"@chriseppstein:  The answer is because of the potential for misuse.  I work in a large software shop, and believe me, even among really smart, capable coders, if somebody _can_ do it wrong, they _will_ do it wrong.

By making _DropDownMenu.scss the one to declare ""You can only import me once,"" you don't give anybody the option of screwing it up and importing it six times; you can't do it wrong even if you want to.  But if _CarModelPicker.scss and _ColorPicker.scss are the ones that are responsible for saying, ""Only import DropDownMenu once,"" that provides two points for failure instead of one:  It's two different places where somebody can --- and will --- screw it up.  And in a large system, two points for failure quickly become twenty, and those twenty quickly become two hundred.

Putting it inside _DropDownMenu.scss is a form of encapsulation, to use an OO term; _DropDownMenu.scss is then guarding itself against misuse.

Another thing to consider:  Is there ever a scenario when it makes sense for a single .scss file to be able to both be imported many times by some callers and only once by others?  Is there any scenario where that's sane, desirable behavior?  If the answer is no (and I think it's no), then the system should guard against it, because that then must be an accident --- undesirable behavior --- if it happens.
",seanofw,chriseppstein
139,2012-04-03 22:21:26,"This feature seems fundamental for having clean re-usable code in an architecture with inheritance. I wish I had it even for <a href=""http://pastebin.com/ggCMtuH2"">this very simple use case</a>.

Plus, I agree with @jacobrask, and think <code>require</code> and <coe>import-once</code> are particularly clear and intuitive.
",verekia,jacobrask
139,2013-01-18 03:35:53,"I'm with @zakness, importing a file more than once is the odd scenario. Makes more sense to me going with changing `@import` to only import once and make `@include ""filename""` include the file no matter what.
",svallory,zakness
139,2013-01-29 12:17:50,"@svallory except that `@include` is already a keyword for mixins in the Scss format and absolutely should not be repurposed for `@import-once` or some such.
",Snugug,svallory
139,2013-01-29 22:00:05,"+1 to @MoOx's suggestion: `@import 'file' !once;`
",thejase,MoOx
139,2013-01-31 15:04:04,"@Snugug That's kinda the motive behind my suggestion. You see, mixins can be included multiple times. It's already known how `@include 'mixing'` works. So, by analogy, `@include 'file'` would work the same way. You may think conflicting files and mixin names would be a problem, but since the context is mutually exclusive, i.e. you always use a `@include mixin` inside a rule and `@include file` outside one, it shouldn't be a problem at all.  
",svallory,Snugug
139,2013-01-31 15:17:31,"@svallory That's a dangerous, and in fact incorrect, assumption to make. Mixins absolutely do not need to be included inside a rule, and there are many _many_ ""setup"" mixins that you in fact specifically do not include inside a rule. Take, for example, [Compass' `establish-baseline` mixin](http://compass-style.org/reference/compass/typography/vertical_rhythm/#mixin-establish-baseline) which writes the selectors it needs.

Moreover, I firmly believe that the mental model behind a mixin and a file are different enough that context alone isn't a good enough indicator alone of what you mean to do, especially in the case of files that include mixins of the same name. Take a CSS Normalize file as a for instance. The logical name of the file would probably `_normalize.s*ss`, and that file contains `@mixin normalize` and `@mixin normalize-legacy`. When I call `@include normalize`, what should I expect to happen? Should I expect the file to be imported again? Should it be the mixin? Both should really only be imported/used once, and both should be written at doc root (outside of a selector). 

I personally like @MoOx's `!once` suggestion as it's a common enough pattern throughout Sass that I think it's a good fit (we've got `!default` for variables and `!optional` for extends).
",Snugug,svallory
139,2013-01-31 15:17:31,"@svallory That's a dangerous, and in fact incorrect, assumption to make. Mixins absolutely do not need to be included inside a rule, and there are many _many_ ""setup"" mixins that you in fact specifically do not include inside a rule. Take, for example, [Compass' `establish-baseline` mixin](http://compass-style.org/reference/compass/typography/vertical_rhythm/#mixin-establish-baseline) which writes the selectors it needs.

Moreover, I firmly believe that the mental model behind a mixin and a file are different enough that context alone isn't a good enough indicator alone of what you mean to do, especially in the case of files that include mixins of the same name. Take a CSS Normalize file as a for instance. The logical name of the file would probably `_normalize.s*ss`, and that file contains `@mixin normalize` and `@mixin normalize-legacy`. When I call `@include normalize`, what should I expect to happen? Should I expect the file to be imported again? Should it be the mixin? Both should really only be imported/used once, and both should be written at doc root (outside of a selector). 

I personally like @MoOx's `!once` suggestion as it's a common enough pattern throughout Sass that I think it's a good fit (we've got `!default` for variables and `!optional` for extends).
",Snugug,MoOx
139,2013-01-31 15:27:06,"The `@include` debate isn't relevant for me since I use (and will forever
use) indented Sass, but for the sake of simplicity, clarity, and
universality, `@require` seems like the right call to me.

I'm more interested in seeing this happen than I am attached to any
specific implementation or semantics though!

On Thursday, January 31, 2013, Snugug wrote:

> @svallory https://github.com/svallory That's a dangerous, and in fact
> incorrect, assumption to make. Mixins absolutely do not need to be included
> inside a rule, and there are many _many_ ""setup"" mixins that you in fact
> specifically do not include inside a rule. Take, for example, Compass'
> establish-baseline mixinhttp://compass-style.org/reference/compass/typography/vertical_rhythm/#mixin-establish-baselinewhich writes the selectors it needs.
> 
> Moreover, I firmly believe that the mental model behind a mixin and a file
> are different enough that context alone isn't a good enough indicator alone
> of what you mean to do, especially in the case of files that include mixins
> of the same name. Take a CSS Normalize file as a for instance. The logical
> name of the file would probably _normalize.s*ss, and that file contains @mixin
> normalize and @mixin normalize-legacy. When I call @include normalize,
> what should I expect to happen? Should I expect the file to be imported
> again? Should it be the mixin? Both should really only be imported/used
> once, and both should be written at doc root (outside of a selector).
> 
> I personally like @MoOx https://github.com/MoOx's !once suggestion as
> it's a common enough pattern throughout Sass that I think it's a good fit
> (we've got !default for variables and !optional for extends).
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/139#issuecomment-12947011.
",arbales,svallory
139,2013-01-31 15:27:06,"The `@include` debate isn't relevant for me since I use (and will forever
use) indented Sass, but for the sake of simplicity, clarity, and
universality, `@require` seems like the right call to me.

I'm more interested in seeing this happen than I am attached to any
specific implementation or semantics though!

On Thursday, January 31, 2013, Snugug wrote:

> @svallory https://github.com/svallory That's a dangerous, and in fact
> incorrect, assumption to make. Mixins absolutely do not need to be included
> inside a rule, and there are many _many_ ""setup"" mixins that you in fact
> specifically do not include inside a rule. Take, for example, Compass'
> establish-baseline mixinhttp://compass-style.org/reference/compass/typography/vertical_rhythm/#mixin-establish-baselinewhich writes the selectors it needs.
> 
> Moreover, I firmly believe that the mental model behind a mixin and a file
> are different enough that context alone isn't a good enough indicator alone
> of what you mean to do, especially in the case of files that include mixins
> of the same name. Take a CSS Normalize file as a for instance. The logical
> name of the file would probably _normalize.s*ss, and that file contains @mixin
> normalize and @mixin normalize-legacy. When I call @include normalize,
> what should I expect to happen? Should I expect the file to be imported
> again? Should it be the mixin? Both should really only be imported/used
> once, and both should be written at doc root (outside of a selector).
> 
> I personally like @MoOx https://github.com/MoOx's !once suggestion as
> it's a common enough pattern throughout Sass that I think it's a good fit
> (we've got !default for variables and !optional for extends).
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/139#issuecomment-12947011.
",arbales,MoOx
139,2013-01-31 15:51:52,"@Snugug thank you for your comment. I missed that point. I have nothing more to say than I totally agree with you.
",svallory,Snugug
139,2013-04-23 15:04:43,"@aaronjensen What would be the benefit to breaking cases where importing a file multiple times is exactly what is expected (because that's how it worked before) by making ""import once"" the default behavior?  In a perfect world, a user shouldn't upgrade Sass and find out that it broke all of their code.
",cimmanon,aaronjensen
139,2013-04-23 15:13:55,"@cimmanon It's obviously up to the breaking change policy of the project. Maybe that's a major version thing, maybe it doesn't make sense to break ever. I doubt there are too many people that rely on that behavior _knowingly_ but I'm sure given the nature of css there are plenty that rely on it unknowingly and it would be a hard to figure out thing in that case. If the desire is to go for the non-breaking change that's no skin off my back, but I'd recommend updating docs and examples to use that as the default.
",aaronjensen,cimmanon
139,2013-06-17 13:32:30,"I will say exactly the same thing @verekia said: ""This feature seems fundamental for having clean re-usable code in an architecture with inheritance.""
",kaelig,verekia
139,2013-06-18 18:27:02,"@kaelig it's something we intend to handle in Sass 4.0 when we create a proper concept of sass modules and namespacing and revamp how `@import` works.
",chriseppstein,kaelig
139,2013-06-24 14:44:05,"@svallory that'd be great.
",aaronjensen,svallory
139,2013-08-29 08:34:31,"Aiming at being objective here: 
- Changing @import is a seriously _breaking_ change, it will not happen.
- +1ing doesn't add anything to the conversation.

---

Do we have a clear proposal / suggestion that @chriseppstein or @nex3 have agreed with? Is there an actionable development path? 

If you've got an opinion, I suggest that you submit a proposal‚Ä¶ if its solid, and simple, it'll get agreed upon. 

2 year old issues don't resolve themselves without buy-in, folks. 
",benschwarz,chriseppstein
139,2013-09-06 05:57:27,"@xzyfer That is an _incredible find_!  I would say the first solution is better (except the lack of a !default suffix), because you can use %placeholders inside it.  They aren't allowed inside mixins.  That was my main argument for ""import-once.""  Wooooohoooooo!

Totally now using this on [JSMACSS](https://github.com/thejase/jsmacss)!!!!
",thejase,xzyfer
139,2013-09-28 16:07:37,"@thejase: @import-once is integrated into the official code?
",brauliobo,thejase
139,2013-09-28 16:24:06,"@aaronjensen +1 for a native version. it is very needed. the sass developers are considering this??
",brauliobo,aaronjensen
139,2013-09-28 16:28:35,"Safer because your other devs don't need to remember to use an @import-once over and over (humans are flawed like that).¬†

And if you don't own the code, just wrap the check around the import instead.¬†

More specific, less magic.¬†

‚Äî
Sent from Mailbox for iPhone

On Sat, Sep 28, 2013 at 9:24 AM, Br√°ulio Bhavamitra
notifications@github.com wrote:

> ## @aaronjensen +1 for a native version. it is very needed. the sass developers are considering this??
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/139#issuecomment-25301146
",thejase,aaronjensen
139,2013-09-28 16:40:14,"@brauliobo it's not a built in solution, but you can use [SmartSass](https://github.com/theblacksmith/smartsass). It will use the SSS compiler you have installed but replace the importer by one which makes include import files only once
",svallory,brauliobo
139,2013-09-28 16:45:57,"@svallory why shouldn't it be built in?
",brauliobo,svallory
139,2013-09-28 16:47:42,"@brauliobo He's not saying it shouldn't. He's saying this is a possible solution in the meantime. 
",thejase,brauliobo
139,2013-09-28 17:58:45,"@brauliobo It's not ""built in"" because it's not part of the sass compiler. But it's totally transparent for the apps using it. And I sure hope it will be made part of sass someday.
",svallory,brauliobo
139,2013-09-28 18:04:03,"@brauliobo : I do have a slight variation of the solution mentioned above ‚Äî see https://gist.github.com/StefanoRausch/6744610 .

I do import it only once at the very beginning ‚Äîthink framework here, no duplication in every Sass file ‚Äî and from there on I only have to either wrap the code in discussion as content for the mixin or I can use the function, depending on the constraints set by the mixin.

@import file -> @include once( ""<file>"" ) { ... } OR @if( include-once( ""<file>"" ) { ... }

Still a workaround, but nice to have ;)
",StefanoRausch,brauliobo
139,2014-12-11 19:45:13,"Tick, tock.....thought this would have been addressed by now, having read through the entire thread.  

Are @StefanoRausch & @courtsimas workarounds still the only viable solution to not have duplicated css when extending a selector from another (imported) file?
",herringtown,StefanoRausch
138,2011-07-15 17:04:31,"@chriseppstein This is more a proof of concept. There's a room for cleanup and probably a bit of optimization for speed.
",pointlessone,chriseppstein
138,2012-01-02 01:30:55,"@nex3  Do any of my proposed syntaxes feel right to you? I'd really like to see this in 3.2.

Another option:



@cheba are you still interested in working on this?
",chriseppstein,nex3
138,2012-01-02 12:38:03,"@chriseppstein I'd like to. But I have no time to at least 6th of January. If you guys are short on time for 3.2 you can take it.

Of all the proposed variants I'm for the ellipsis:



The last one is even better if the comma is mistakenly missed. Otherwise it's just inconsistent.



Also there are a few questions I have in my head. Here are a few of them.
1. Can glob be only the last in signature?
2. What do we do with unknown named arguments?
3. What's the precedence of arguments? At the time of this pull request it was positioned arguments had precedence of named arguments. I believe, it should be the other way: named over positioned.
",pointlessone,chriseppstein
138,2012-01-10 16:58:38,"@nex3 I'd really like to get this feature into 3.2 Can you weigh in on syntax please.
",chriseppstein,nex3
138,2012-07-08 21:42:52,"I'm once again working on this. I've faced a problem with order of parameters.

Currently error is raised if positional (unnamed) parameter passed after named one.



This will raise ""Syntax error: Function a was passed argument $b both by position and by name""

On the other hand, mixins report missing parameter $c.



The code above will raise ""Syntax error: Mixin a is missing argument $c"". I think, this should be unified. At least in terms of consistent message.

Next problem I have can be illustrated by the next example:



This code raises ""Syntax error: Positional arguments must come before keyword arguments"".

This exception in combination with previous one (on functions) and the desire to have glob argument only at the end makes it impossible to use both glob arguments and named parameters.



The `a` property will raise ""positional before keyword"" and the `b` property will result in ""position and by name"" error.

Possible solutions:
- Drop keyword after position rule
- Give keyword a preference
- Forbid using keywords wherever glob argument is present

#### Drop keyword after position rule

This one I see as the least effective.



You have to keep in its position to avoid ""name and position"" error. This almost annihilates any benefit having named parameter. Maybe just adding a bit of readability for functions and mixins with lots of arguments.

#### Give keyword a preference



This is probably the most logical solution. At least I see it as such. This variant eliminates ""name and position"" error entirely.

Algorithm is following:
1. Pick argument from function/mixin definition
2. Check if we have named parameter for it in the call
3. Take it if we have and go to next argument (step 1)
4. Check if we have any positional parameters left in the call
5. Take it if we have and go to next argument (step 1)
6. Check if we have default value for this argument
7. Take if if we have and go to next argument (step 1)
8. Panic if we don't

After all arguments have been processed pile all positional parameters that left into glob argument if there's one or raise an error about too many parameters.

This solution is compatible with current implementation. But not vice versa, obviously.

The key difference to current implementation if that if there's a named parameter all positional parameters are shifted to the right while current implementation doesn't do that.

It may be illustrated like this:



I know that this was proposed before. I've been proposing it. But @nex3 was for simpler Python-like syntax and it was turned down.

#### Forbid using keywords wherever glob argument is present

This is the easiest of all but I wouldn't go for it. It's confusing. It makes programmer chose if he wants to use named parameters or glob args, not both. Also it may brake old code if you add glob arg to a function. All of a sudden you can not use named parameters in calls/includes where you could. Thus instead of improving API we could make it worse.

On the other hand, this is exactly what Python does.



---

PS: As there was no consensus or any strong opinions, or decisions from maintainers, I took a liberty to choose `...$arg` syntax. `!arg` looks to similar to `!important` keyword from CSS and may be misleading about its purpose and function.
",pointlessone,nex3
138,2012-07-13 19:40:33,"@chriseppstein and I were brainstorming syntaxes for this and ways to integrate var args with keyword arguments... Chris, do you have a link to the gist handy? I believe the syntax we settled on was `$argname...` for both defining and calling the mixin. Also, we specified how that would interact with variable keyword arguments, both in the short and long term.

I'm not a fan of allowing the re-ordering of parameters under any circumstances. I don't think adding variable arguments to a mixin or function will actually break any callers of it. For example, the following would work:



Since existing callers wouldn't be using the variable arguments anyway, it would work out fine.
",nex3,chriseppstein
138,2012-07-14 19:26:10,"@nex3 I'd like to take a look at the gist. Any pointer to where I can find it?



Would definitely work. I didn't say that it will break existing code. I said that it will feel awkward for new code.

For example:



This will not work as positional argument can not be after named one. That's how it's currently implemented.



This again will not work (in current argument handling implementation) as `$b` gets two values. Also it rearranges arguments and you don't want that.

So the only valid (in current implementation) variant is the one without named arguments:


",pointlessone,nex3
138,2012-07-16 18:31:42,"@chriseppstein @nex3 
Well, that's a great doc.

It looks like arglist doesn't map to any basic data type (like list of hash). I see it acting like a list but this way you can only get positioned arguments out of it. For named arguments you need to extract those out of arglist. I'm not sure that such kind of object orientation is a good idea for stylesheet declaration language such as CSS or SASS. In any case I can't find any other example of such behavior.

The least I could think of to ease this object orientation is to treat positional and named arguments in more symmetric way. Say, treating it like a special data type that doesn't work as a list but a list can be extracted out of it. As well as a hash of named arguments.

Next, I'd prefer to use same syntax for arglist declaration and call expansion. I think, that simplifies syntax a bit. That would eliminate the need to think if I have to place ellipsis after or before var name and instead do something useful. There's simple no way that one can be used in places where the other can. I'm more in favor of trail ellipsis.

BTW, this is illustrated nicely in the section [Expanding a map into keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#expanding-a-map-into-keyword-arguments).

Section [Fixing the semantics of calling with mixed positional and keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#fixing-the-semantics-of-calling-with-mixed-positional-and-keyword-arguments) basically describes what I've written about in [my comment from a few days ago](https://github.com/nex3/sass/pull/138#issuecomment-6835200). Specifically the variant of giving preference to named arguments. I salute you on this decision.

Also I must point that example of current implementation is not correct.

> This means that the following calls are currently equivalent:
> 
> 

They are only equivalent in that that they both will produce an error. The first one will give you ""positional after named"" error and the second one will give ""by position and by name"" error.
",pointlessone,nex3
138,2012-07-16 18:31:42,"@chriseppstein @nex3 
Well, that's a great doc.

It looks like arglist doesn't map to any basic data type (like list of hash). I see it acting like a list but this way you can only get positioned arguments out of it. For named arguments you need to extract those out of arglist. I'm not sure that such kind of object orientation is a good idea for stylesheet declaration language such as CSS or SASS. In any case I can't find any other example of such behavior.

The least I could think of to ease this object orientation is to treat positional and named arguments in more symmetric way. Say, treating it like a special data type that doesn't work as a list but a list can be extracted out of it. As well as a hash of named arguments.

Next, I'd prefer to use same syntax for arglist declaration and call expansion. I think, that simplifies syntax a bit. That would eliminate the need to think if I have to place ellipsis after or before var name and instead do something useful. There's simple no way that one can be used in places where the other can. I'm more in favor of trail ellipsis.

BTW, this is illustrated nicely in the section [Expanding a map into keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#expanding-a-map-into-keyword-arguments).

Section [Fixing the semantics of calling with mixed positional and keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#fixing-the-semantics-of-calling-with-mixed-positional-and-keyword-arguments) basically describes what I've written about in [my comment from a few days ago](https://github.com/nex3/sass/pull/138#issuecomment-6835200). Specifically the variant of giving preference to named arguments. I salute you on this decision.

Also I must point that example of current implementation is not correct.

> This means that the following calls are currently equivalent:
> 
> 

They are only equivalent in that that they both will produce an error. The first one will give you ""positional after named"" error and the second one will give ""by position and by name"" error.
",pointlessone,chriseppstein
138,2012-07-16 18:37:59,"Commented too soon...

But I think it should stay unedited as the comment only on the document itself.

Now I see some of my concerns have been addressed in comments.

On the other hand, @nex3 basically says that [Fixing the semantics of calling with mixed positional and keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#fixing-the-semantics-of-calling-with-mixed-positional-and-keyword-arguments) section is not the way to go. Which brings us back to ""what should we do with arguments?"" question.
",pointlessone,nex3
138,2012-07-20 20:43:10,"> It looks like arglist doesn't map to any basic data type (like list of hash). I see it acting like a list but this way you can only get positioned arguments out of it. For named arguments you need to extract those out of arglist. I'm not sure that such kind of object orientation is a good idea for stylesheet declaration language such as CSS or SASS. In any case I can't find any other example of such behavior.

I agree that it seems weird to have this be a special type, but I think that's just an emergent property of the inherent weirdness involved in trying to shoehorn powerful function-signature constructs into a language that's designed to have a minimal programming surface area. I don't think there's a good way of handling this case without introducing some sort of new type.

> The least I could think of to ease this object orientation is to treat positional and named arguments in more symmetric way. Say, treating it like a special data type that doesn't work as a list but a list can be extracted out of it. As well as a hash of named arguments.

Case in point: this is also a special type. I don't think requiring the user to write `arguments-list($args)` really provides any value to the user. I suppose it's conceptually a little cleaner, but I think the vast majority of use-cases of variable arguments will either be passing them directly through to another mixin/function or accessing them as a list. I suspect that actually accessing variable keyword arguments is an edge case, and I'm fine with making it weirder/more difficult if that allows us to make the list accessing simpler and easier.

> Next, I'd prefer to use same syntax for arglist declaration and call expansion. I think, that simplifies syntax a bit. That would eliminate the need to think if I have to place ellipsis after or before var name and instead do something useful. There's simple no way that one can be used in places where the other can. I'm more in favor of trail ellipsis.
> 
> BTW, this is illustrated nicely in the section [Expanding a map into keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#expanding-a-map-into-keyword-arguments).

Agree.

> On the other hand, @nex3 basically says that [Fixing the semantics of calling with mixed positional and keyword arguments](https://gist.github.com/ce0af5c1886f952978c6#fixing-the-semantics-of-calling-with-mixed-positional-and-keyword-arguments) section is not the way to go. Which brings us back to ""what should we do with arguments?"" question.

I'm happy with the current behavior of keyword arguments. As to how they'll interact with variable arguments, I envision it working just as though the arguments were provided long-form. Some examples:



Note that the latter two examples won't work in v3.2, since we're not supporting an actual Map data type immediately.
",nex3,nex3
136,2013-01-27 21:33:30,"Matching the CSS variable semantics presents a number of complications that I do not know how to solve in a preprocessor because variable resolution depends on the document structure (a better name for css variables would be 'custom css properties' in terms of how they work).

I agree that our variable semantics need work. But if `!local` is off the table (for the very good reasons that @nex3 has given) then this is a fairly big change. Changing the lookup semantics is actually very easy, but in order to not break every sass file, we would have to create an upgrade script that correctly declares variables that are presently global as such in the new version (and this would need to be done in a major version release: 4.0).

In the meantime, a (disgusting) workaround would be to declare all your local variables as an argument with a default value of `null`.
",chriseppstein,nex3
131,2011-12-16 22:46:53,"@nex3 I'm not convinced. We should chat. 
",chriseppstein,nex3
131,2011-12-16 23:13:41,"@chriseppstein Sure; ping me.
",nex3,chriseppstein
122,2012-01-10 19:37:17,"@chriseppstein No objections here. Probably want to have ""--from less"" etc print an error through 3.2, though.

Maybe the best way to have ""--from less"" working in future is to use less.js to parse the file, then dump it to JSON and load it into Sass? It seems easier than rewriting sass/tree in Javascript.
",nex3,chriseppstein
122,2012-06-15 21:10:49,"@MSch Not currently, no.
",nex3,MSch
122,2012-07-20 20:14:48,"@chriseppstein You mean having ""--from less"" print an error?
",nex3,chriseppstein
115,2011-11-15 22:56:09,"Yesyesyes **must-have**! Without it Compass' `http_path` configuration parameter is pretty much useless.

Btw, @AriaMinaei & others -- (ugly) work-around:


",timmolendijk,AriaMinaei
115,2011-11-15 23:02:45,"@chriseppstein Who or what are you addressing? I think I'm missing your point.
",timmolendijk,chriseppstein
115,2011-11-15 23:03:59,"@AriaMinaei For your needs, the @import approach will not work, however the compass spriting feature can totally accomodate this need by dropping down to the next lower layer.
",chriseppstein,AriaMinaei
115,2011-11-15 23:04:52,"@timmolendijk sorry I was addressing @AriaMinaei
",chriseppstein,timmolendijk
115,2011-11-15 23:04:52,"@timmolendijk sorry I was addressing @AriaMinaei
",chriseppstein,AriaMinaei
109,2011-07-13 16:24:57,"@chrislloyd, the parity with selectors makes the comma very obvious imo.
",chriseppstein,chrislloyd
109,2011-07-15 20:59:27,"@chriseppstein Ah, didn't see your response before I posted. I didn't know this was already discussed somewhere else. If you have already come to some decision not to do this, then you could go ahead and close this.
",deleteme,chriseppstein
109,2011-07-15 21:00:12,"@deleteme he was talking to me, regarding the + as @include alias on .scss syntax.
",MarioRicalde,deleteme
109,2012-01-14 16:29:57,"I particularly like @deleteme's last idea of referencing other local properties as variables. I need this **all the time**. I sometimes end up having to declare multiple variables in a selector, where non would be required if this feature were available, and it looks quite ugly.
",miracle2k,deleteme
109,2012-01-14 16:37:01,"@miracle2k I think that's the subject of a different issue. 
",jleclanche,miracle2k
109,2015-07-07 04:36:44,"@katacarbix for this use case at least Sass already has a similar feature for property name expansion




",xzyfer,katacarbix
109,2015-10-02 22:19:03,"If we do destructuring assignment, it shouldn't have the same syntax as multiple assignment. Otherwise it's really hard to tell whether `$foo, $bar: $value` is going to assign the variables the same value or a different value. This means that examples like @katacarbix's wouldn't work as expected.

If we want to support both, there are a couple ways we could disambiguate. We could have `$foo, bar:` destructure and `$foo: $bar:` multi-assign. This may pose parsing problems for properties, though, and limits forwards-compatibility with CSS. We could require that the left-hand-side use explicit parens when destructuring, so `($foo, $bar):` destructures and `$foo, bar:` multi-assigns. That's heavy on the punctuation, though, and inconsistent with destructuring in loops.

To be honest, I'm not sold that we need generalized destructuring. It adds a small amount of terseness even relative to multiple assignment, and I'm not particularly happy with either of the syntax options.
",nex3,katacarbix
109,2015-10-13 22:03:03,"@nex3 Sorry I should have mentioned you in the previous comment
",chriseppstein,nex3
109,2016-09-12 18:27:51,"> I'm on board with the idea. I'm less confident about allocating time to implement it.

@mustefa This feature request is unimplemented but not high on our list of things to implement. I've tagged it as ""Help Wanted"" maybe someone will make a patch.
",chriseppstein,mustefa
104,2015-04-23 00:46:05,"@binarious that is not a useful error report. Without giving us some Sass that triggers this error, there's nothing we can do to fix it.
",nex3,binarious
104,2015-05-08 20:55:17,"@Mad-Chemist same issue: without actual Sass code, there's no way for us to know how to fix the issue.
",nex3,Mad-Chemist
102,2012-02-26 01:41:42,"@Cosmius it is already in latest development version of SASS. The syntax is:

%a-silent-ruleset {
  color: pink;
}

.my-selector {
  @extend %a-silent-ruleset;
}

This will output:

.my-selector {
  color: pink;
}
",barraponto,Cosmius
102,2012-07-06 14:05:09,"@alanjds I do agree, abstract classes/types is a [known paradigm](http://en.wikipedia.org/wiki/Abstract_type) and used in many programming languages. But at least the feature does exist nowadays. For me it's a big deal since I wanted to create a base framework that didn't affected the deploy code.
",millermedeiros,alanjds
102,2012-07-06 14:44:29,"@millermedeiros yeah, I wanted this feature since forever.
",barraponto,millermedeiros
101,2012-06-15 21:08:56,"Reopening, since I can reproduce using @demerzel3's example.
",nex3,demerzel3
100,2012-06-29 22:27:45,"@chikamichi Mixins that rely on certain properties to be defined in the rules in which they're included seem very fragile. How does the user know which properties are supposed to exist? How do they remember to use them? It seems like it would be much clearer to the user to pass those values in as arguments to the mixin.
",nex3,chikamichi
96,2011-08-10 21:37:29,"This is a tricky one. @imathis, in your example, the line you say works fine doesn't actually do what it seems like it should. For example:



compiles to



with no `@media` in sight. When it comes down to it, this is probably correct. The alternative is the following:



which doesn't uphold `@extend`'s guarantee of not duplicating classes.

Since any use of `@extend` within `@media` or other directives behaves in this unintuitive manner, I'm tempted to disallow it wholesale. @chriseppstein, what do you think?
",nex3,chriseppstein
96,2011-08-10 21:37:29,"This is a tricky one. @imathis, in your example, the line you say works fine doesn't actually do what it seems like it should. For example:



compiles to



with no `@media` in sight. When it comes down to it, this is probably correct. The alternative is the following:



which doesn't uphold `@extend`'s guarantee of not duplicating classes.

Since any use of `@extend` within `@media` or other directives behaves in this unintuitive manner, I'm tempted to disallow it wholesale. @chriseppstein, what do you think?
",nex3,imathis
96,2011-08-10 21:49:32,"@nex3, It's very natural to want to use `@extend` within an `@media` block. But since  `@extend` is a compile time directive and `@media` is a runtime directive, having it allowed only causes confusion. I'm +1 on disallowing it.
",chriseppstein,nex3
92,2011-05-24 23:41:00,"@jcode does installing the latest fssm fix the issue?
",chriseppstein,jcode
92,2011-05-25 07:24:02,"Thanks @jcode, but `-C` does't do anything for me.

I've discovered that using SASS under Ruby 1.9.2 instead of Mac OS X's bundled Ruby 1.8.7 remedies the issue, however.



Please let me know if you'd like me to try to reproduce the issue with a gem-less install of Ruby 1.8.7 and Ruby 1.9.2.
",jgorset,jcode
92,2012-05-02 18:08:45,"@norfali If you install version 3.2.0.alpha.104, does it work?
",nex3,norfali
92,2012-05-03 11:49:39,"@nex3 Yep I can confirm that 3.2.0.alpha.104 works fine so something somewhere is breaking it in version 3.1.6. :o)
",norfali,nex3
92,2012-05-08 17:55:49,"@norfali Do they show up in 3.1.17? There were several fixes to --watch in that release.
",nex3,norfali
92,2015-02-12 13:07:47,"@jcode your comment about using the cache option saved me a bunch of time, thanks!
",martypowell,jcode
83,2012-09-10 02:47:16,"@chriseppstein How about the case of percentages? 90% of 100% is still 90%, as far as I can tell.
",bwilkins,chriseppstein
83,2012-09-10 23:41:59,"@Anahkiasen We're certainly willing to consider more helpful error messages here, if you have suggestions.

@bwilkins The semantics of `%` in CSS are somewhat muddied. `75%` is not considered to be the same as `0.75`; in most contexts, it means ""75 units, each 1/100 the width/height of the parent element"". Because of this semantic strangeness, we decided not to treat `75%` and `0.75` as the same for the purposes of arithmetic. If you're looking for such behavior, I suggest you use decimals and then convert to percentages using the `percentage()` function once you're done with all calculations.
",nex3,bwilkins
83,2012-09-10 23:41:59,"@Anahkiasen We're certainly willing to consider more helpful error messages here, if you have suggestions.

@bwilkins The semantics of `%` in CSS are somewhat muddied. `75%` is not considered to be the same as `0.75`; in most contexts, it means ""75 units, each 1/100 the width/height of the parent element"". Because of this semantic strangeness, we decided not to treat `75%` and `0.75` as the same for the purposes of arithmetic. If you're looking for such behavior, I suggest you use decimals and then convert to percentages using the `percentage()` function once you're done with all calculations.
",nex3,Anahkiasen
77,2011-05-09 20:19:16,"@nex3, yup and thus why I also submitted this feature request: https://github.com/nex3/sass/issues/78

If plugins could register custom visitors during the compilation phases, then that would be great.
",tav,nex3
66,2011-08-10 20:32:55,"@nashbridges: That's not a Compass feature; it's a Rails feature. It's also dangerous in general, because Sass and CSS are order-dependent, and globbing opens the door for extremely difficult-to-track ordering bugs.

@aratak: Sass doesn't allow embedded Ruby code.
",nex3,nashbridges
66,2011-08-10 20:32:55,"@nashbridges: That's not a Compass feature; it's a Rails feature. It's also dangerous in general, because Sass and CSS are order-dependent, and globbing opens the door for extremely difficult-to-track ordering bugs.

@aratak: Sass doesn't allow embedded Ruby code.
",nex3,aratak
66,2011-08-11 05:55:36,"@nex3, well, `@import ""icon/*.png"";` is for sure Compass thing https://github.com/chriseppstein/compass/blob/stable/lib/compass/sprite_importer.rb
According to you, automatic imports feature as dangerous as globbing (BTW, nobody should rely on the order of the CSS rules, it's a bad habit)
",nashbridges,nex3
66,2011-08-11 06:26:49,"@nashbridges:

I don't know where you heard that that ""nobody should rely on the order of the CSS rules"" but that's just nonsense.

If you want a globbing feature it's available as a plugin: https://github.com/chriseppstein/sass-globbing I used it on a project recently and it cost me an hour to debug an issue related to import order -- hopefully you'll have more luck since you never rely on the order of your css rules.

@nex3, I'm having second thoughts about this feature anyway. Close it?
",chriseppstein,nashbridges
66,2011-08-11 06:26:49,"@nashbridges:

I don't know where you heard that that ""nobody should rely on the order of the CSS rules"" but that's just nonsense.

If you want a globbing feature it's available as a plugin: https://github.com/chriseppstein/sass-globbing I used it on a project recently and it cost me an hour to debug an issue related to import order -- hopefully you'll have more luck since you never rely on the order of your css rules.

@nex3, I'm having second thoughts about this feature anyway. Close it?
",chriseppstein,nex3
66,2011-08-11 07:01:28,"@chriseppstein: Done.
",nex3,chriseppstein
65,2011-05-18 03:41:48,"@chriseppstein helped me work around this issue by converting the absolute paths to relative paths. Still not sure why the absolute paths wouldn't work.
",ravinggenius,chriseppstein
65,2011-07-03 21:27:17,"@stefankroes I am converting all @import paths from absolute to relative with a bit of Ruby:



I am generating this main Sass file in Ruby, so it was pretty easy to add this code to my project. I hope it helps.
",ravinggenius,stefankroes
53,2011-04-02 17:31:50,"@SeanTAllen It's whitespace sensitive so it's legal sass syntax -- try it.
",chriseppstein,SeanTAllen
53,2012-05-25 11:56:32,"@chriseppstein This is true. However, most CSS editors do not highlight the code properly in this case. Would it be possible to to close the comment as SeanTAllen suggested?
",damjankuznar,chriseppstein
49,2014-12-01 16:37:30,"@BenMorel  :+1:  definitely a better idea to help manage code
",Stephn-R,BenMorel
48,2012-08-16 00:11:34,"@chriseppstein Do you know what's causing this error? Is it a Compass issue?
",nex3,chriseppstein
48,2012-08-16 03:51:24,"@nex3 it's just a ridiculously long argument list and the parser runs out of memory. I think the fix would be for Sass to have a parser that isn't stack based -- obviously this not likely to happen unless Sass starts using a parser generator.
",chriseppstein,nex3
46,2014-04-11 19:27:34,"@QuyHP: you're looking for #966.
",nex3,QuyHP
46,2014-05-21 16:08:05,"@srekoble I can't reproduce your issue. Must be a very old version of sass you're using this even works in 3.2
",chriseppstein,srekoble
28,2011-04-26 22:13:34,"@maca: rather than re-opening old, tangentially related issues, please start a new issue. Also, please provide more detailed information about the steps that you're taking, the precise problem you're seeing, and how to reproduce it.
",nex3,maca
25,2012-11-27 01:23:56,"@ZhangBanger You could, or you could start a new PR.
",nex3,ZhangBanger
25,2015-09-24 18:38:46,"@nex3 I'd Iike to introduce `is` and `is not` as the new equality operators in our next release. I'd like to deprecate `==` and `!=` at that time. Objections?
",chriseppstein,nex3
25,2015-09-24 19:01:13,"@cimmanon It's a good point. But I would not just add an alias -- having two syntaxes for the same thing is just confusing.

> people are going to be scratching their heads wondering why the code doesn't work

The error message would be very clear. Something like `""The equality operator has been changed from == to `is`. E.g. $width is 4px""` where the comparison listed would be their actual code's comparison printed out for them.
",chriseppstein,cimmanon
25,2015-09-24 19:26:11,"@scottdavis Like all changes, we would first deprecate the old operators for a release during which they could migrate over the existing code.
",chriseppstein,scottdavis
25,2015-09-28 21:48:55,"I agree with @hcatlin @scottdavis. I don't see the user benefit. The following point stood out for me.

> We had this problem when we released Sass 3.0 and what we did was make upgrading automated via sass-convert.

I don't believe this is a far comparison. Converting your code base is no longer enough, because of how our practices have evolved. It's possible (maybe likely?) teams are now depending on 10s of external dependencies (npm/bower) that can have varying levels of ongoing support.
",xzyfer,scottdavis
25,2015-09-28 21:48:55,"I agree with @hcatlin @scottdavis. I don't see the user benefit. The following point stood out for me.

> We had this problem when we released Sass 3.0 and what we did was make upgrading automated via sass-convert.

I don't believe this is a far comparison. Converting your code base is no longer enough, because of how our practices have evolved. It's possible (maybe likely?) teams are now depending on 10s of external dependencies (npm/bower) that can have varying levels of ongoing support.
",xzyfer,hcatlin
17,2012-11-27 01:26:49,"@svivian I can't reproduce this. It works for me on Ubuntu 12.04 using both the polling and the rb-inotify backend.
",nex3,svivian
7,2013-07-02 23:54:29,"@kflorence you can't put a space after `if`
",chriseppstein,kflorence
4,2010-10-04 01:19:04,"@heygrady, please open a similar issue against http://github.com/chriseppstein/compass 
",chriseppstein,heygrady
4,2011-11-30 07:04:39,"@nex3, please backport [ie_hex_str](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/colors.rb#L37) function.

We need that function in pure SCSS (without Compass)
",yury,nex3
2,2011-06-27 22:16:30,"@hcatlin the cssize visitor is the right place to implement this. The import nodes that are css imports will have been rewritten to directive nodes during the perform step. See Cssize#visit_root for how we handle the @charset directive which has a similar behavior.
",chriseppstein,hcatlin
1,2012-11-03 00:23:49,"@ultimatedelman I don't completely understand the issue you're reporting. Can you post an example of the file or files that are producing the issue, as well as the output you expect and the output you're actually receiving?
",nex3,ultimatedelman
2263,2017-03-23 01:26:56,"# Sass
// prefix list
$prefix: -webkit- """";

// transition
@mixin transition($value) {
    @each $val in $prefix {
        #{$val}transition: if($value == transform, $val + $value, $value);
    }
}

# Use
body {
  @include transition(transform .4s);
}

# Result
body {
  -webkit-transition: transform 0.4s;
  transition: transform 0.4s;
}

# Want result
body {
  -webkit-transition: **-webkit-transform** 0.4s;
  transition: transform 0.4s;
}


_This is also true if using ‚Äúcompass/css3‚Äù;_

@nex3      sos
",huzedong2015,nex3
2263,2017-03-23 01:26:56,"# Sass
// prefix list
$prefix: -webkit- """";

// transition
@mixin transition($value) {
    @each $val in $prefix {
        #{$val}transition: if($value == transform, $val + $value, $value);
    }
}

# Use
body {
  @include transition(transform .4s);
}

# Result
body {
  -webkit-transition: transform 0.4s;
  transition: transform 0.4s;
}

# Want result
body {
  -webkit-transition: **-webkit-transform** 0.4s;
  transition: transform 0.4s;
}


_This is also true if using ‚Äúcompass/css3‚Äù;_

@nex3      sos
",huzedong2015,each
2263,2017-03-23 01:26:56,"# Sass
// prefix list
$prefix: -webkit- """";

// transition
@mixin transition($value) {
    @each $val in $prefix {
        #{$val}transition: if($value == transform, $val + $value, $value);
    }
}

# Use
body {
  @include transition(transform .4s);
}

# Result
body {
  -webkit-transition: transform 0.4s;
  transition: transform 0.4s;
}

# Want result
body {
  -webkit-transition: **-webkit-transform** 0.4s;
  transition: transform 0.4s;
}


_This is also true if using ‚Äúcompass/css3‚Äù;_

@nex3      sos
",huzedong2015,include
2263,2017-03-23 01:26:56,"# Sass
// prefix list
$prefix: -webkit- """";

// transition
@mixin transition($value) {
    @each $val in $prefix {
        #{$val}transition: if($value == transform, $val + $value, $value);
    }
}

# Use
body {
  @include transition(transform .4s);
}

# Result
body {
  -webkit-transition: transform 0.4s;
  transition: transform 0.4s;
}

# Want result
body {
  -webkit-transition: **-webkit-transform** 0.4s;
  transition: transform 0.4s;
}


_This is also true if using ‚Äúcompass/css3‚Äù;_

@nex3      sos
",huzedong2015,mixin
2252,2017-03-02 15:01:49,"I drew some ideas from Clojure and how everything in it reassembled by simple data structures. So I tried to apply those knowledges to Sass, and, if possible, simplify already existing in Sass concept ‚Äî maps, tighten up already existing Sass syntax closer to its origins, CSS, and by the way make work with CSS fragments not only reality, but intuitive and simple thing.

This issue takes a long jump, makes big claims and tries to solve few issues at once, so, first of all, calm down and buckle up tight.

In short, __this issue is about defining CSS fragments and other structural data in a better (or alternative) way__.

Disclaimer: some things might be broken or incomplete overlooked or oversighted. Some might hurt your feelings.

To be honest, I hesitated a lot to publish this or no... But here it goes.

## Goals

1. Unify existing in Sass data structures with already existing ones in CSS. In some sense, to redefine boundaries between those two.
2. Make basement for solving https://github.com/sass/sass/issues/1582 and similar issues.
3. Make work with CSS fragments easy and intuitive.
4. Make work with CSS fragments powerful.
5. Define format, which should expressively describe CSS fragments.
6. Define format, which should be easy to write and easy to understand for end-user.
7. Define format, which should be easily accessible.
8. Define format, which should be easy to manipulate.
9. Define format, which should provide easy introspection.
10. Define format, which should not introduce radically new syntax to CSS.

## The road

For this part, I will need your imagination. Stay tuned; do not think about unimportant parts rights now. (Yeap, literally just ignore all my mistakes and take it as granted *makes Jedi movement with his hand*).

Let us imagine that we could build whatever we want and any way we want.

And, as first part of this ugly plan, let's imagine new Object, which we can use as an alternative to maps:



Note curly brackets `{}` and `;` instead of usual for maps `()` and `,`. This syntactically makes Objects very similar to CSS, but from other side seems to do same thing as usual Sass map. As a side benefit, `;` seems to be more logical for last element in Object then trailing comma in Sass maps.

Object properties can be easily accessible. I will use for now and in future JavaScript syntax, since it have necessary means to make what we want to do here, but for now just imagine like you are reading warm and cozy Sass with some extensions:



It is possible, because on contrary to maps, Object are simpler data structures and they can't contain as Object keys _any_ value, but only strings or numbers literals. Let's leave maps to more complex scenarios.

For now, all of this seems to be completely irrelevant. You can tell, that this just a representation of data, another version of Sass map, and this doesn't do anything with CSS fragments. Indeed, you are right. We can use those exactly as typical data structures. But there is a catch.

Let's say, we want to add in this Object a bit of CSS:



Yes, it just that easy for end-user to write it. We just made a colossal thing, for which many Sass framework developers would kill, since before they were forced to find most odd ways to describe CSS in their data structures as Sass map.

But here we're doing exactly the thing ‚Äî giving them ability to write CSS just as a part of their data structure with clear and familiar syntax.

This opens a hatch for a lot of creativity, since from now CSS parts can be stored in variables, in Sass maps, passed from one variable to another, manipulated an so on.

Selectors are harder to access directly, but it seems to me reasonable. Think of jQuery ‚Äî you need to write full selector if you want to access properties directly.

Same thing we have here:



I think additional external tools can eliminate this issue. Like a jQuery for Sass, which will provide even better ways to access Object properties based on queries. We just need to provide basement for such tools.

Of course, things not that easy under the hood. In fact, while `props` are normal part of data structure, usual Object properties, `.article h1, .article h2` is a _syntax sugar_. Same as we have for [methods declaration of Classes in ES2016](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes). Under the hood, it transforms into more usual and introspective data structure, which I will describe later.

So, let's take a look at structure which we have in result:



Some might say ‚Äî wait, but this is nothing new! We already have this thing, and it‚Äôs called CSS. That's the whole point. My proposal is about embracing and extending already known to CSS concept. CSS already have data structure, which CSS represents itself, and I do not see reasons why we should not embrace it.

It is very powerful abstraction, which will eliminate a lot of issues Sass frameworks developers facing those days, especially when they end up mapping properties of CSS to Sass maps, and then generate something based on them (let's say, themes). With current Sass capabilities we are encouraging strange practice to mimic one data structure (CSS) with another (Sass map), while we could just use first one directly, thus eliminating undesired additional layer of complication.

In the end of the day, we can use those objects for many things:

1. To compose new selectors based on Object or other data structures.

   Generating new selectors is easy, because you can just iterate upon Object and output all selectors as... selectors.

2. To compose new data based on different Objects

   

   `$result` will contain

   

3. Since it is a data structure, it can be ""mutated"" by accessing and changing it's properties and values:

   

   This will reshape fragment into

   

4. To use it as a form of mixin:

   

   will yield

   

   Syntax is debatable, but I can see it demonstrates the point.

5. To use it as a closer to CSS alternative to maps.

   Objects provide a way to store usual, not related to CSS fragments, data with more accessible way. Since it isn't that broad as maps, it's easier to access with dot notation and make any manipulations based on it.

   

6. Since it is usual CSS (or more to say ‚Äî Sass), you can use any expected Sass features inside Objects, like other mixins, functions, concatenation with `#{}`, etc.

   

7. Think about your ways. It will be your homeworks. My fantasy is quite limited.

Some might raise few questions here:

1. What if Object contains unknown to CSS properties and we will try to mix it into real selector, like

   

   Answer: it will output all properties, which you're passing it, resulting in

   

   Sass is not validator of CSS properties, so what you are passing in you are getting out. We should understand that in this proposal Object is broader than CSS fragment. __It is extension of CSS data structure__, which allows you to store any data you want, not only CSS values, and it is up to you where you will use it ‚Äî as part of CSS, or as a storage in you framework. Yes, literally it blurs edges between regular CSS and data, and it is good thing.

   If we think about it, whole CSS file can represent large Object, in which you can easily access any selector and it's values without need to define additional variables.

2. To some people syntax of declaring selectors might look like odd thing.

   Indeed, we are using `:` for keywords (typically for Object/dict structures in many languages), but selectors suddenly do not use any colons.

   First, we should think about it as granted: CSS _already has this syntax_. And secondly, it might be unexpected syntax unless Lisp or [Clojure](https://kimh.github.io/clojure-by-example/#let) languages will run somewhere nearby ‚Äî they have very similar syntax, and it is quite effective, in fact.

Well, it might be slightly unobvious, but described above approaches solves (I hope so) most of estimated goals: it is easy to write, it is easy to read, it is a simple data structure, easy to manipulate, and it does not introduce new syntax to CSS.

However, we are still not done. In https://github.com/sass/sass/issues/1582 was mentioned important thing ‚Äî those data structures should be __introspectable__. And because of this, CSS fragments can't be represented as a primitive data structure ‚Äî it will be very uneasy to distinguish selectors or at-rules from typical properties. Thus, any CSS fragment should under hood turn into real data. That's why I said at first that any selectors or at rules in Object are just a syntax sugar, which in reality turning out to understandable and mutable data structures under the hood.


## Internal structure

Here https://github.com/sass/sass/issues/1582#issuecomment-72259831 @chriseppstein and @eoneill proposes their own vision.

Obvious benefit of that structure is that it's very descriptive. It seems to get everything right.

However, there are few issues:

1. It has very uneasy cognitive model. It's really hard to read.
2. It seems to be mostly inaccessible with normal tools. This means, that you should write funky Sass, or introduce new to Sass functions, like mentioned `ruleset()` or `at-rule()`, to help with this complexions. Usually this is a bad sign.
3. Because of previous issue, it is easy to declare manually or mutate.

I took some inspiration from [JSON Schema draft](http://json-schema.org/examples.html) and [tcomb](https://github.com/gcanti/tcomb) internals.

I will use for this example JavaScript Object, because, sorry, but `()` and `()` (you see the difference? I don't too) for arrays and maps makes any example magnificently and incredibly unreadable.

So let's take example in mentioned comment, and put it in our lands first:



And imagine we log out our object to console (don't ask me how, I don't know, I don't want to hear anything about Sass is a compiled language it doesn't log anything to console STOP! Calm down! Let's continue):



We will see following data structure:



This structure is:

1. Much easier to read ‚Äî it is same cascade as we already have in CSS.
2. It is easy to access properties, since no tricky routing needed ‚Äî all values available in plain form, with straightforward paths.
3. Types and other meta information of keywords is easy to introspect ‚Äî everything available under `meta` property. Note, that current proposed meta might be not full, it's just an proposal of format, not features.
4. Since it is easy to access internals, it is also easy to change. You can access and redefine any value with dot notation or already existing Sass tools without funky paths.
5. This construction is easy to write or generate ‚Äî for cases when we want to declare it manually, in form of pure data structure.
6. Since it has easy structure, we do not need additional Sass function to decrease pain during defining or manipulation. We just do not have this pain at first place.
7. Think about some other benefits. Those seems to be unimpressive, and I'm afraid that maintainers will instantly close this issue (but don't tell them about this one!).

Unfortunately, not everything perfect, and my proposal have few obvious fatal flaws too:

1. Properties or selectors, at rules, comments can occur few times. You can see it with `color` property. Indeed, in most cases, data structures does not allow anything with duplication of keywoards (which is `color` in our case).

   At least, this will demonstrate to some folks why @chriseppstein and @eoneill opted to use so hard-to-read-list-based notation in their [example](https://github.com/sass/sass/issues/1582#issuecomment-72259831).

   To be honest, so far I don't see clear solution to this issue. However, from other point of view, CSS object structure allows having multiple properties with same keywoard. So, maybe we should allow it too. But, while I'm typing it, I'm feeling how other language pointing a gun to my head and sign with cardinal sin starts to flash on my screen. Nevertheless, maybe it is just a signature of unique CSS nature?

3. Anyway, EVEN if we do allow duplication of properties in Object, there still will be serious issue ‚Äî how to access that second or first property? Introduce some weird syntax? Like `$myObj[.foo, .bar].color[0]` for first occurrence and `$myObj[.foo, .bar].color[1]`?

Probably they solvable, probably not. Maybe we can put all duplicated properties into another array:



Which might be not worst idea, since in most cases we would want to filter them out anyway, but still it looks like a complication.

Anyway, my point here is that this structure should be as easy as possible, and described above model is what I, and I believe, many other Sass developers would like to see. I mean, the direction, to this. So it be like an object. You know, without lists, easy to read. With a nesting, and some nice metas. Ah, whatever, I think you have understood what I mean!


## Outro

I feel that there will be especially a lot of criticism about my attempt to unify CSS with data structures, which to some people might look like so different. The thing is, for me CSS selectors always felt like a typical language object or dict, but with slightly different syntax. I think that by embracing and extending them we will make Sass ~~great again~~ easier (since there will be less concepts to learn) and will introduce a lot of new possibilities (because of impossible before data manipulations and combinations).

Even if this whole concept will fail with loudest sounds of falling down on a peaceful tourist tree, I still hope that it will serve as a basement for some new, even better features.

I also sincerely hope that I was able to deliver at least piece of my vision. If I didn't ‚Äî don't blame me, just read issue few times again!

Just kidding... Thanks for reading!
",ArmorDarks,eoneill
2252,2017-03-02 15:01:49,"I drew some ideas from Clojure and how everything in it reassembled by simple data structures. So I tried to apply those knowledges to Sass, and, if possible, simplify already existing in Sass concept ‚Äî maps, tighten up already existing Sass syntax closer to its origins, CSS, and by the way make work with CSS fragments not only reality, but intuitive and simple thing.

This issue takes a long jump, makes big claims and tries to solve few issues at once, so, first of all, calm down and buckle up tight.

In short, __this issue is about defining CSS fragments and other structural data in a better (or alternative) way__.

Disclaimer: some things might be broken or incomplete overlooked or oversighted. Some might hurt your feelings.

To be honest, I hesitated a lot to publish this or no... But here it goes.

## Goals

1. Unify existing in Sass data structures with already existing ones in CSS. In some sense, to redefine boundaries between those two.
2. Make basement for solving https://github.com/sass/sass/issues/1582 and similar issues.
3. Make work with CSS fragments easy and intuitive.
4. Make work with CSS fragments powerful.
5. Define format, which should expressively describe CSS fragments.
6. Define format, which should be easy to write and easy to understand for end-user.
7. Define format, which should be easily accessible.
8. Define format, which should be easy to manipulate.
9. Define format, which should provide easy introspection.
10. Define format, which should not introduce radically new syntax to CSS.

## The road

For this part, I will need your imagination. Stay tuned; do not think about unimportant parts rights now. (Yeap, literally just ignore all my mistakes and take it as granted *makes Jedi movement with his hand*).

Let us imagine that we could build whatever we want and any way we want.

And, as first part of this ugly plan, let's imagine new Object, which we can use as an alternative to maps:



Note curly brackets `{}` and `;` instead of usual for maps `()` and `,`. This syntactically makes Objects very similar to CSS, but from other side seems to do same thing as usual Sass map. As a side benefit, `;` seems to be more logical for last element in Object then trailing comma in Sass maps.

Object properties can be easily accessible. I will use for now and in future JavaScript syntax, since it have necessary means to make what we want to do here, but for now just imagine like you are reading warm and cozy Sass with some extensions:



It is possible, because on contrary to maps, Object are simpler data structures and they can't contain as Object keys _any_ value, but only strings or numbers literals. Let's leave maps to more complex scenarios.

For now, all of this seems to be completely irrelevant. You can tell, that this just a representation of data, another version of Sass map, and this doesn't do anything with CSS fragments. Indeed, you are right. We can use those exactly as typical data structures. But there is a catch.

Let's say, we want to add in this Object a bit of CSS:



Yes, it just that easy for end-user to write it. We just made a colossal thing, for which many Sass framework developers would kill, since before they were forced to find most odd ways to describe CSS in their data structures as Sass map.

But here we're doing exactly the thing ‚Äî giving them ability to write CSS just as a part of their data structure with clear and familiar syntax.

This opens a hatch for a lot of creativity, since from now CSS parts can be stored in variables, in Sass maps, passed from one variable to another, manipulated an so on.

Selectors are harder to access directly, but it seems to me reasonable. Think of jQuery ‚Äî you need to write full selector if you want to access properties directly.

Same thing we have here:



I think additional external tools can eliminate this issue. Like a jQuery for Sass, which will provide even better ways to access Object properties based on queries. We just need to provide basement for such tools.

Of course, things not that easy under the hood. In fact, while `props` are normal part of data structure, usual Object properties, `.article h1, .article h2` is a _syntax sugar_. Same as we have for [methods declaration of Classes in ES2016](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes). Under the hood, it transforms into more usual and introspective data structure, which I will describe later.

So, let's take a look at structure which we have in result:



Some might say ‚Äî wait, but this is nothing new! We already have this thing, and it‚Äôs called CSS. That's the whole point. My proposal is about embracing and extending already known to CSS concept. CSS already have data structure, which CSS represents itself, and I do not see reasons why we should not embrace it.

It is very powerful abstraction, which will eliminate a lot of issues Sass frameworks developers facing those days, especially when they end up mapping properties of CSS to Sass maps, and then generate something based on them (let's say, themes). With current Sass capabilities we are encouraging strange practice to mimic one data structure (CSS) with another (Sass map), while we could just use first one directly, thus eliminating undesired additional layer of complication.

In the end of the day, we can use those objects for many things:

1. To compose new selectors based on Object or other data structures.

   Generating new selectors is easy, because you can just iterate upon Object and output all selectors as... selectors.

2. To compose new data based on different Objects

   

   `$result` will contain

   

3. Since it is a data structure, it can be ""mutated"" by accessing and changing it's properties and values:

   

   This will reshape fragment into

   

4. To use it as a form of mixin:

   

   will yield

   

   Syntax is debatable, but I can see it demonstrates the point.

5. To use it as a closer to CSS alternative to maps.

   Objects provide a way to store usual, not related to CSS fragments, data with more accessible way. Since it isn't that broad as maps, it's easier to access with dot notation and make any manipulations based on it.

   

6. Since it is usual CSS (or more to say ‚Äî Sass), you can use any expected Sass features inside Objects, like other mixins, functions, concatenation with `#{}`, etc.

   

7. Think about your ways. It will be your homeworks. My fantasy is quite limited.

Some might raise few questions here:

1. What if Object contains unknown to CSS properties and we will try to mix it into real selector, like

   

   Answer: it will output all properties, which you're passing it, resulting in

   

   Sass is not validator of CSS properties, so what you are passing in you are getting out. We should understand that in this proposal Object is broader than CSS fragment. __It is extension of CSS data structure__, which allows you to store any data you want, not only CSS values, and it is up to you where you will use it ‚Äî as part of CSS, or as a storage in you framework. Yes, literally it blurs edges between regular CSS and data, and it is good thing.

   If we think about it, whole CSS file can represent large Object, in which you can easily access any selector and it's values without need to define additional variables.

2. To some people syntax of declaring selectors might look like odd thing.

   Indeed, we are using `:` for keywords (typically for Object/dict structures in many languages), but selectors suddenly do not use any colons.

   First, we should think about it as granted: CSS _already has this syntax_. And secondly, it might be unexpected syntax unless Lisp or [Clojure](https://kimh.github.io/clojure-by-example/#let) languages will run somewhere nearby ‚Äî they have very similar syntax, and it is quite effective, in fact.

Well, it might be slightly unobvious, but described above approaches solves (I hope so) most of estimated goals: it is easy to write, it is easy to read, it is a simple data structure, easy to manipulate, and it does not introduce new syntax to CSS.

However, we are still not done. In https://github.com/sass/sass/issues/1582 was mentioned important thing ‚Äî those data structures should be __introspectable__. And because of this, CSS fragments can't be represented as a primitive data structure ‚Äî it will be very uneasy to distinguish selectors or at-rules from typical properties. Thus, any CSS fragment should under hood turn into real data. That's why I said at first that any selectors or at rules in Object are just a syntax sugar, which in reality turning out to understandable and mutable data structures under the hood.


## Internal structure

Here https://github.com/sass/sass/issues/1582#issuecomment-72259831 @chriseppstein and @eoneill proposes their own vision.

Obvious benefit of that structure is that it's very descriptive. It seems to get everything right.

However, there are few issues:

1. It has very uneasy cognitive model. It's really hard to read.
2. It seems to be mostly inaccessible with normal tools. This means, that you should write funky Sass, or introduce new to Sass functions, like mentioned `ruleset()` or `at-rule()`, to help with this complexions. Usually this is a bad sign.
3. Because of previous issue, it is easy to declare manually or mutate.

I took some inspiration from [JSON Schema draft](http://json-schema.org/examples.html) and [tcomb](https://github.com/gcanti/tcomb) internals.

I will use for this example JavaScript Object, because, sorry, but `()` and `()` (you see the difference? I don't too) for arrays and maps makes any example magnificently and incredibly unreadable.

So let's take example in mentioned comment, and put it in our lands first:



And imagine we log out our object to console (don't ask me how, I don't know, I don't want to hear anything about Sass is a compiled language it doesn't log anything to console STOP! Calm down! Let's continue):



We will see following data structure:



This structure is:

1. Much easier to read ‚Äî it is same cascade as we already have in CSS.
2. It is easy to access properties, since no tricky routing needed ‚Äî all values available in plain form, with straightforward paths.
3. Types and other meta information of keywords is easy to introspect ‚Äî everything available under `meta` property. Note, that current proposed meta might be not full, it's just an proposal of format, not features.
4. Since it is easy to access internals, it is also easy to change. You can access and redefine any value with dot notation or already existing Sass tools without funky paths.
5. This construction is easy to write or generate ‚Äî for cases when we want to declare it manually, in form of pure data structure.
6. Since it has easy structure, we do not need additional Sass function to decrease pain during defining or manipulation. We just do not have this pain at first place.
7. Think about some other benefits. Those seems to be unimpressive, and I'm afraid that maintainers will instantly close this issue (but don't tell them about this one!).

Unfortunately, not everything perfect, and my proposal have few obvious fatal flaws too:

1. Properties or selectors, at rules, comments can occur few times. You can see it with `color` property. Indeed, in most cases, data structures does not allow anything with duplication of keywoards (which is `color` in our case).

   At least, this will demonstrate to some folks why @chriseppstein and @eoneill opted to use so hard-to-read-list-based notation in their [example](https://github.com/sass/sass/issues/1582#issuecomment-72259831).

   To be honest, so far I don't see clear solution to this issue. However, from other point of view, CSS object structure allows having multiple properties with same keywoard. So, maybe we should allow it too. But, while I'm typing it, I'm feeling how other language pointing a gun to my head and sign with cardinal sin starts to flash on my screen. Nevertheless, maybe it is just a signature of unique CSS nature?

3. Anyway, EVEN if we do allow duplication of properties in Object, there still will be serious issue ‚Äî how to access that second or first property? Introduce some weird syntax? Like `$myObj[.foo, .bar].color[0]` for first occurrence and `$myObj[.foo, .bar].color[1]`?

Probably they solvable, probably not. Maybe we can put all duplicated properties into another array:



Which might be not worst idea, since in most cases we would want to filter them out anyway, but still it looks like a complication.

Anyway, my point here is that this structure should be as easy as possible, and described above model is what I, and I believe, many other Sass developers would like to see. I mean, the direction, to this. So it be like an object. You know, without lists, easy to read. With a nesting, and some nice metas. Ah, whatever, I think you have understood what I mean!


## Outro

I feel that there will be especially a lot of criticism about my attempt to unify CSS with data structures, which to some people might look like so different. The thing is, for me CSS selectors always felt like a typical language object or dict, but with slightly different syntax. I think that by embracing and extending them we will make Sass ~~great again~~ easier (since there will be less concepts to learn) and will introduce a lot of new possibilities (because of impossible before data manipulations and combinations).

Even if this whole concept will fail with loudest sounds of falling down on a peaceful tourist tree, I still hope that it will serve as a basement for some new, even better features.

I also sincerely hope that I was able to deliver at least piece of my vision. If I didn't ‚Äî don't blame me, just read issue few times again!

Just kidding... Thanks for reading!
",ArmorDarks,chriseppstein
2250,2017-02-25 02:05:18,"Currently, a non-`!optional` `@extend` will produce an error if its target exists but fails to unify with its selector. This doesn't really fit with the original goal of the ""missing target"" error for `@extend`, which was to help catch typos, and it complicates implementation because it means that unused extends can't be detected by simple set operations on extend targets and simple selectors. We should eliminate this error, and allow `@extend`s to silently do nothing if they match but unification fails.",nex3,extend
2246,2017-02-19 21:50:34,"## Problem
For whatever reason, Sass con't enable the use of CSS variables within functions as expected; this is particularly problematic with color functions.

## Sass Code (Used Sass 4.0 & LibSass 3.5)

## Expected Result


## Actual Result


It seems the parser doesn't resolve CSS variables when they are parameters of Sass functions
## Recommended Reviewers
- @nex3 & @chriseppstein being very familiar with how Sass has evolved to support CSS variables",lozandier,nex3
2246,2017-02-19 21:50:34,"## Problem
For whatever reason, Sass con't enable the use of CSS variables within functions as expected; this is particularly problematic with color functions.

## Sass Code (Used Sass 4.0 & LibSass 3.5)

## Expected Result


## Actual Result


It seems the parser doesn't resolve CSS variables when they are parameters of Sass functions
## Recommended Reviewers
- @nex3 & @chriseppstein being very familiar with how Sass has evolved to support CSS variables",lozandier,chriseppstein
2245,2017-02-22 00:23:48,/cc @mgreter for sass2scss,xzyfer,mgreter
2240,2017-02-08 19:00:40,"Thanks @mprins.

I have solved the problem in the following way:

I define a `Constants.scss` file with all of my Constants, and at the top of each module that uses the constants, a simple `@import` does the trick:

In `Constants.scss`:


In `Foo.scss`:


I think I was overthinking the problem. So I will close this issue. If someone feels I am really onto something here, then feel free to reopen. üòÑ 
",radiovisual,import
2239,2017-02-07 16:51:17,"I found a bug in the `@extend` directive, it occurs when extending a child selector of a selector that has children. Below is a simple code example to illustrate the issue.

### Example


### Expected result:


### Actual result:
",CupOfTea696,extend
2238,2017-02-03 11:27:33,"When concatenating two characters together, *some* combinations result in unrecognised characters being output.

The following test case is a real-world case where I want to append a non-breaking space (\feff) to another character that is used in an icon font.

    $char-f: '\66';
    $char-g: '\67';

    .test-1 {
      content: '#{$char-f}\feff';
    }

    .test-2 {
      content: '#{$char-g}\feff';
    }

    // this is broken
    .test-3 {
      content: '\feff#{$char-f}';
    }

    .test-4 {
      content: '\feff#{$char-g}';
    }

Output:

    @charset ""UTF-8"";
    .test-1 {
      content: ""fÔªø"";
    }

    .test-2 {
      content: ""gÔªø"";
    }

    .test-3 {
      content: ""Ûæøø"";
    }

    .test-4 {
      content: ""Ôªøg"";
    }

(Note that \feff is present in 3 of the 4 examples, but it's invisible).

When \feff is concatenated with \66 a single unrecognised character is returned rather than two.

I've been able to replicate this with the https://github.com/sass/node-sass wrapper, as well as pasting the above into http://sass.js.org.",nickdunn,charset
2236,2017-02-01 10:01:28,"I somehow have the feeling that there is something missing between `@warn` and `@debug`. For example for the case that is used in foundation-sites framework, that developers are notified of bad contrast values. I would like to add this as an information and not as a warning. Warnings often irritate inexperienced developers. Such errors on the one hand lead to confusion and make some developers fell uncomfortable and on the other hand it may lead to overlook more important warning. So this additional log level would help to create a better differentiation between such ""warnings"".",DaSchTour,warn
2236,2017-02-01 10:01:28,"I somehow have the feeling that there is something missing between `@warn` and `@debug`. For example for the case that is used in foundation-sites framework, that developers are notified of bad contrast values. I would like to add this as an information and not as a warning. Warnings often irritate inexperienced developers. Such errors on the one hand lead to confusion and make some developers fell uncomfortable and on the other hand it may lead to overlook more important warning. So this additional log level would help to create a better differentiation between such ""warnings"".",DaSchTour,debug
2236,2017-02-02 22:25:09,How would `@info` behave differently than `@warn`?,nex3,info
2236,2017-02-02 22:25:09,How would `@info` behave differently than `@warn`?,nex3,warn
2236,2017-02-07 08:48:55,"@nex3 well than it should have. There are a lot of issues caused by missing concept for log levels. Because there is some kind of ""log level"" with `@error` `@warn` and `@debug` but there is not concept for it.",DaSchTour,error
2236,2017-02-07 08:48:55,"@nex3 well than it should have. There are a lot of issues caused by missing concept for log levels. Because there is some kind of ""log level"" with `@error` `@warn` and `@debug` but there is not concept for it.",DaSchTour,debug
2236,2017-02-07 08:48:55,"@nex3 well than it should have. There are a lot of issues caused by missing concept for log levels. Because there is some kind of ""log level"" with `@error` `@warn` and `@debug` but there is not concept for it.",DaSchTour,warn
2230,2017-01-24 14:58:06,"Hey Sass community! How about implement a feature to delete some class before define in another file? In my case, I use Sass of UIkit(CSS/JS framework)and sometimes I want to implement my own version of some class of uk. So I thought to do sometimes like:
----------------
uikit.scss

.uk-hidden{
display:block;
}
-----------------
myfile.scss
@import 'uikit';
@delete .uk-hidden;
.uk-hidden{
visibility: hidden;
}

----------------------
output.css

.uk-hidden{
visibility: hidden;
}",vendramini2017,delete
2230,2017-01-24 14:58:06,"Hey Sass community! How about implement a feature to delete some class before define in another file? In my case, I use Sass of UIkit(CSS/JS framework)and sometimes I want to implement my own version of some class of uk. So I thought to do sometimes like:
----------------
uikit.scss

.uk-hidden{
display:block;
}
-----------------
myfile.scss
@import 'uikit';
@delete .uk-hidden;
.uk-hidden{
visibility: hidden;
}

----------------------
output.css

.uk-hidden{
visibility: hidden;
}",vendramini2017,import
2228,2017-01-15 05:10:35,cc @xzyfer ,nex3,xzyfer
2225,2017-01-14 16:38:22,"**There is a problem in sass compilation. It's the code i wrote:**

.error {
  border: 1px #f00;
  background: #fdd;
}

.error.intrusion {
  background-color: orangered;
}

.badError {
  @extend .error;
  border-width: 3px;
}

      **It should be compiled down to:**

.error, .badError {
  border: 1px #f00;
  background: #fdd; }

.error.intrusion, .badError.intrusion {
  background-color: orangered; }

.badError {
  border-width: 3px; }


       **but what it does is:**

.error, .badError {
  border: 1px #f00;
  background: #fdd; }

.error.intrusion, .intrusion.badError {
  background-color: orangered; }

.badError {
  border-width: 3px; }

Please can anyone help me ?.",shiranabbasi,extend
2224,2017-01-10 21:58:56,"Every time Sass processes an `@import` statement, it literally includes the imported file in the resulting CSS‚Äîeven if it's been imported before. Here you're importing vars.scss twice, so the `%offscreen` rule gets defined twice and extended twice.

We're working on a major overhaul of the import system that will address this issue among others.",nex3,import
2220,2017-01-04 17:36:12,"I've encountered a bug it seems where consecutive calls to a mixin using a `@for` loop is outputting the same CSS selector chain when it is expected to output the intended limit for the selectors.

Is this a limitation of the language and how it compiles loops? ie async vs sync running of @for loops?

Would a Sass function be better suited for this than a mixin?

Any insight helps.

### Source


### Expected Output


### Actual Output


Here is a link to a Sassmeister example.
[Link to Sassmeister](http://www.sassmeister.com/gist/5633b2047ab68e6c3e968904d50e3a35)",jwandrews,for
2219,2017-01-04 14:27:51,"Whenever you nest an @import and have @if in the root of the file it will lose its nesting.

index.scss

_nesting.scss


results into


This works though
",wardpeet,if
2219,2017-01-04 14:27:51,"Whenever you nest an @import and have @if in the root of the file it will lose its nesting.

index.scss

_nesting.scss


results into


This works though
",wardpeet,import
2218,2017-01-06 00:01:32,"It appears Fixnum and Bignum are being deprecated starting with Ruby 2.4.0:

[https://github.com/rails/rails/pull/26732/files/cb0452e9a50e97f8ab2100f6226fbdd47a970a34]

I'd like to claim this issue.  My first thought is to add a new switch statement referencing the ""Integer"" class, with the same implementation as the ""Fixnum"" switch statement, just before said ""Fixnum"" statement.  @chriseppstein @nex3 - thoughts?  ",richiethomas,nex3
2218,2017-01-06 00:01:32,"It appears Fixnum and Bignum are being deprecated starting with Ruby 2.4.0:

[https://github.com/rails/rails/pull/26732/files/cb0452e9a50e97f8ab2100f6226fbdd47a970a34]

I'd like to claim this issue.  My first thought is to add a new switch statement referencing the ""Integer"" class, with the same implementation as the ""Fixnum"" switch statement, just before said ""Fixnum"" statement.  @chriseppstein @nex3 - thoughts?  ",richiethomas,chriseppstein
2218,2017-01-06 03:55:12,"I was going to propose the following for the fix for this issue:



But I just tried this on my local and it doesn't eliminate the warning.  I also tried splitting the ""Integer"" and ""Fixnum"" references into separate 'when' clauses (with ""Integer"" first), and that didn't eliminate the warning either.

The only thing that worked was to delete the ""Fixnum"" clause altogether, and replace it with an ""Integer"" clause.  I tried this both with Ruby 2.4.0 and Ruby 2.3.1, and it worked in both cases.  I don't want to dig any deeper before getting the core team's thoughts on the above.  If it sounds good to y'all, I can submit a PR ASAP.  Cheers @chriseppstein and @nex3. :-)

I see the 'json_value_of' method, and specifically its handling of the Fixnum class, is already covered by tests in 'util_test.rb'.  Looks like the same case would cover Integers as well for Ruby 2.4.0.  I'd like to be able to verify that before submitting a PR by running the same command that @sinkaszab mentioned (sass filenameA.scss filenameA.css), but am unsure how to ",richiethomas,nex3
2218,2017-01-06 03:55:12,"I was going to propose the following for the fix for this issue:



But I just tried this on my local and it doesn't eliminate the warning.  I also tried splitting the ""Integer"" and ""Fixnum"" references into separate 'when' clauses (with ""Integer"" first), and that didn't eliminate the warning either.

The only thing that worked was to delete the ""Fixnum"" clause altogether, and replace it with an ""Integer"" clause.  I tried this both with Ruby 2.4.0 and Ruby 2.3.1, and it worked in both cases.  I don't want to dig any deeper before getting the core team's thoughts on the above.  If it sounds good to y'all, I can submit a PR ASAP.  Cheers @chriseppstein and @nex3. :-)

I see the 'json_value_of' method, and specifically its handling of the Fixnum class, is already covered by tests in 'util_test.rb'.  Looks like the same case would cover Integers as well for Ruby 2.4.0.  I'd like to be able to verify that before submitting a PR by running the same command that @sinkaszab mentioned (sass filenameA.scss filenameA.css), but am unsure how to ",richiethomas,chriseppstein
2216,2016-12-25 18:05:20,"I can use `@content` to work with almost anything in a local scope. For example, I can declare a namespace, `$_`, for my classes (and placeholders):


Any variable, mixin, and placeholder put inside `scope` is inaccessible by the global scope:

Example:


Another example:


Regarding local variables, as long as `$_` is declared within `scope` include, I can re-use `$_` as a namespace for other modules. With ""local"" imports, I can write exactly what code went into developing any particular module. 

However, this seems to only work when compiling with LibSass and not Ruby Sass. Both CodePen and SassMeister report the following error when using Ruby Sass:


If I put the same code in SassMeister using LibSass, it will report the following error:


The code directly above implies that it's acceptable to use the import directive within the included mixin. With LibSass I can declare `@import` and/or `@mixin` using `@content`. I have a [working project](https://github.com/lithiumiron/checkbox) that uses the `scope` mixin.

Is this a bug? Is it something to consider? Let me know your thoughts on this case. Apologies for any confusion....",lithiumlron,content
2216,2016-12-25 18:05:20,"I can use `@content` to work with almost anything in a local scope. For example, I can declare a namespace, `$_`, for my classes (and placeholders):


Any variable, mixin, and placeholder put inside `scope` is inaccessible by the global scope:

Example:


Another example:


Regarding local variables, as long as `$_` is declared within `scope` include, I can re-use `$_` as a namespace for other modules. With ""local"" imports, I can write exactly what code went into developing any particular module. 

However, this seems to only work when compiling with LibSass and not Ruby Sass. Both CodePen and SassMeister report the following error when using Ruby Sass:


If I put the same code in SassMeister using LibSass, it will report the following error:


The code directly above implies that it's acceptable to use the import directive within the included mixin. With LibSass I can declare `@import` and/or `@mixin` using `@content`. I have a [working project](https://github.com/lithiumiron/checkbox) that uses the `scope` mixin.

Is this a bug? Is it something to consider? Let me know your thoughts on this case. Apologies for any confusion....",lithiumlron,import
2216,2016-12-25 18:05:20,"I can use `@content` to work with almost anything in a local scope. For example, I can declare a namespace, `$_`, for my classes (and placeholders):


Any variable, mixin, and placeholder put inside `scope` is inaccessible by the global scope:

Example:


Another example:


Regarding local variables, as long as `$_` is declared within `scope` include, I can re-use `$_` as a namespace for other modules. With ""local"" imports, I can write exactly what code went into developing any particular module. 

However, this seems to only work when compiling with LibSass and not Ruby Sass. Both CodePen and SassMeister report the following error when using Ruby Sass:


If I put the same code in SassMeister using LibSass, it will report the following error:


The code directly above implies that it's acceptable to use the import directive within the included mixin. With LibSass I can declare `@import` and/or `@mixin` using `@content`. I have a [working project](https://github.com/lithiumiron/checkbox) that uses the `scope` mixin.

Is this a bug? Is it something to consider? Let me know your thoughts on this case. Apologies for any confusion....",lithiumlron,mixin
2216,2016-12-28 01:27:22,"If LibSass is allowing imports in `@include`s, that's a bug. It should match the behavior of Ruby Sass here.

/cc @xzyfer @mgreter",nex3,mgreter
2216,2016-12-28 01:27:22,"If LibSass is allowing imports in `@include`s, that's a bug. It should match the behavior of Ruby Sass here.

/cc @xzyfer @mgreter",nex3,xzyfer
2216,2016-12-28 01:27:22,"If LibSass is allowing imports in `@include`s, that's a bug. It should match the behavior of Ruby Sass here.

/cc @xzyfer @mgreter",nex3,include
2212,2016-12-14 12:01:15,"media.css.scss file:


Run:
sass -t compressed css/media.css.scss css/media.min.css

After compresed with sass media.min.css file:
`@media (min-width: 100px) and (max-width: 200px){.box{background-color:green}}`

But it could be without spaces between media feature's name and value:
`@media (min-width:100px) and (max-width:200px){.box{background-color:green}}`

Both compressed code also passed validation on https://jigsaw.w3.org/css-validator/

I noticed this distinction when tested site performance with https://gtmetrix.com and it offered 
> ""Minify CSS for the following resources to reduce their size by 15B (1% reduction).""

As you might guess there were 15 media features with one space in each.


I know that this improvement offered before, but there was a bunch of improvements.
Improvements to the minifier #687

Removing spaces would be nice.",dks17,media
2206,2016-12-12 08:45:23,"![image](https://cloud.githubusercontent.com/assets/16098072/21092968/3fde9500-c08a-11e6-90cb-8cc73152fdd6.png)

Why can't @import ""/test/A/A.scss"";
",PasDajavu,import
2206,2016-12-12 09:34:27,yesÔºåI want sass @import is absolute path,PasDajavu,import
2188,2016-11-13 01:05:21,"I'm trying to use SASS to develop skins for Firefox but the `@namespace` at-rules which are used in the theme stylesheets are causing errors.

#### `.sass` files: sass works correctly but sassc fails





#### `.scss` files: sass and sassc both fail





",taye,namespace
2185,2016-11-09 08:56:16,"It should be good to have possibility to say which data type is required on input and what is returned by sass mixins and functions.

@mixin example(color $foo, int $bar, list $baz): list{}
//requires color, int and list on input and returns list",mabar,mixin
2184,2016-11-06 19:28:58,"+1... Happens when I `@import 'bootstrap';` I'm guessing it's an alpha bootstrap 4 issue and not just a sass issue.
",dovestyle,import
2184,2017-02-05 15:06:54,"NOt sure what more information i can provide as there is not much in an error message all i can say is it just happend again when i do a @import in the application.scss file similar to the @import 'bootstrap' command but for materialize and nothing changed in repo to make this happen, it just did...",techgurupezza,import
2184,2017-03-04 23:56:41,"Hey guys,

I am also getting a 

when doing an `@import ""bootstrap"";` in my `application.scss` using the new `gem 'bootstrap', '~> 4.0.0.alpha6'`.
I was using `pronto-scss` before which threw me a similar error. Something like:

Anyone knows something about that?
Any help is greatly appreciated!

Thanks!",Smirksta,import
2178,2016-10-28 11:34:20,"Hi. This is a suggestion more than an issue but I am not sure of where to suggest it ...

Would it be possible to call mixins using a syntax such as 

`@mixinName( ... )`rather than `@include mixinName( ... )`?

That would be a lof of typing saved !

Thank you for the great work.
",bmargogne,include
2178,2016-10-28 11:34:20,"Hi. This is a suggestion more than an issue but I am not sure of where to suggest it ...

Would it be possible to call mixins using a syntax such as 

`@mixinName( ... )`rather than `@include mixinName( ... )`?

That would be a lof of typing saved !

Thank you for the great work.
",bmargogne,mixinName
2178,2016-11-17 08:29:25,"You are right. This thread should be closed.

/cc @chriseppstein 
",joneff,chriseppstein
2177,2016-12-11 23:55:12,"It's difficult to know what the underlying issue here is. If you can come up with a minimal reproduction that's displaying incorrect behavior, I'll be able to help you better.

That said, you should probably avoid `@extend`ing a compound selector with multiple components (like `.btn-primary:focus` regardless. That behavior is unintended and is liable to change in the future (see #1599).",nex3,extend
2177,2016-12-12 15:53:33,"I had a similar case where I thought the same was happening. It was seemingly not working in SASS version 3.4.22 but in 3.2.19.

What solved it for me was to make sure that any file using `@extend` was a **partial** (i.e. starting with an underscore). (Or, obviously, the file using the `@extend` would need to `@import` as well.)

@heaven, in your case I wonder what `./bootstrap_overrides` is. If it's a directory, make sure its contents are only partials. If it's a file, make sure it's a partial, etc.
",selfthinker,extend
2177,2016-12-12 15:53:33,"I had a similar case where I thought the same was happening. It was seemingly not working in SASS version 3.4.22 but in 3.2.19.

What solved it for me was to make sure that any file using `@extend` was a **partial** (i.e. starting with an underscore). (Or, obviously, the file using the `@extend` would need to `@import` as well.)

@heaven, in your case I wonder what `./bootstrap_overrides` is. If it's a directory, make sure its contents are only partials. If it's a file, make sure it's a partial, etc.
",selfthinker,import
2177,2016-12-13 08:04:04,"I am debugging it further and it turns that the bug was actually in the older SASS gem, because if you check `vendor/assets/stylesheets/market/_bootstrap.scss` (the partial where we include bootstrap components), it has `//@import ""bootstrap/buttons"";` commented out, so it is supposed to fail, but does work with the older version of SASS gem.",heaven,import
2172,2016-10-16 21:06:16,"My code:

**Compact, works:**

`@font-face { font-family: 'Schluber'; src: url(""www.mywebsite.com/fonts/Schluber.eot""); src: url(""www.mywebsite.com/fonts/Schluber.eot"") format(""embedded-opentype""), url(""www.mywebsite.com/fonts/Schluber.woff2"") format(""woff2""), url(""www.mywebsite.com/fonts/Schluber.woff"") format(""woff""), url(""www.mywebsite.com/fonts/Schluber.ttf"") format(""truetype""), url(""www.mywebsite.com/fonts/Schluber.svg#Schluber"") format(""svg""); }`

**Compressed, doesn't work:**

`@font-face{font-family:'Schluber';src:url(""www.mywebsite.com/fonts/Schluber.eot"");src:url(""www.mywebsite.com/fonts/Schluber.eot"") format(""embedded-opentype""),url(""www.mywebsite.com/fonts/Schluber.woff2"") format(""woff2""),url(""www.mywebsite.com/fonts/Schluber.woff"") format(""woff""),url(""www.mywebsite.com/fonts/Schluber.ttf"") format(""truetype""),url(""www.mywebsite.com/fonts/Schluber.svg#Schluber"") format(""svg"")}`
",eaglejohn,font-face
2172,2016-10-18 14:02:42,"Spaces are being removed after ""@font-face"", after ""{"", etc. If you take a close look at the code you'll see the differences. I copied the links from my website that is not live yet, I only replaced the real domain name with ""www.mywebsite.com"".
",eaglejohn,font-face
2172,2016-10-18 14:31:48,"> Spaces are being removed after ""@font-face"", after ""{"", etc. If you take a close look at the code you'll see the differences.

That is the point. Useless spaces are being removed. That‚Äôs what compression does.
",HugoGiraudel,font-face
2170,2016-10-14 11:58:19,"Consider this snippet of scss:



This will output in the compiled css:



The file in question is saved as utf-8 - in fact ALL files in the project are. I tried adding `@charset 'utf-8';` at the top of the file, but this should be unneccesary as well as it just doesn't help. I've also tried putting this directive in my main.scss (the entry point - not an include), but no juice.

Please keep in mind that when I feed the above snippet as straight css straight to the browser, it'll parse it perfectly fine as utf-8. So from that I have to assume the file is saved as utf-8 and correctly intepreted as such.

So my editor is Brackets, which supports _only_ utf-8. So I can't possibly have saved the file in a different encoding by accident. I'm also on Windows 10, perhaps the ‚Ç¨-character is a different one there, as compared to other platforms. Regardless, any non-ansi character will output garbage.

Now, I _could_ escape all those characters where I use them. I could, but I want my code to be as expressive as possible. so having some weird escape sequence in code where it shouldn't be neccesary, doesn't work with the concept of meaningful code that I try to live by.

So can we please get this problem fixed? I mean, once and for all? Because I recall this exact problem has existed for quite a while.
",thany,charset
2170,2016-12-11 23:41:02,"I'm not sure why your system is reading the input as the wrong encoding, but if you add `@charset ""UTF-8"";` to the top of the file, it will ensure that Sass will *always* read it as UTF-8 regardless of what the system says.",nex3,charset
2163,2016-10-07 10:31:21,"I had a quick chat to @nex3 which pointed me to the lexer/parse
as the root cause of the observed inconsistencies.

I think the general approach is sound. I'm sure the implementation
could be tidied up.

Fixes #2160
Spec sass/sass-spec#940
",xzyfer,nex3
2163,2016-10-08 04:36:03,"@nex3 @chriseppstein this is ready for review
",xzyfer,nex3
2163,2016-10-08 04:36:03,"@nex3 @chriseppstein this is ready for review
",xzyfer,chriseppstein
2162,2016-10-05 10:18:31,"Hello,

I have something like this : 



and in `_icons.scss` 



The generated css then looks like this : 



the `:host /deep/` should not be added in the `@font-face {}`
",gnujeremie,font-face
2162,2016-10-11 14:38:43,"Even simpler example:



produces:



[This is invalid!](https://developer.mozilla.org/de/docs/Web/CSS/@font-face)
",marfnk,font-face
2162,2016-10-11 14:51:36,"It seams like `@font-face' has to be declared at top level. This can be done with



But still I think Sass should not produce invalid CSS.
",marfnk,font-face
2161,2016-10-18 13:45:34,"> fine great, but is not a way to the debug message be showing the file and the line where is defined that palette? instead showing the file and line of the condition?

There is no way to do that. `@error` prints a stack trace, that is a reversed history of what happened before the compiler ended up crashing. You could tweak your error message to give more information about how to fix the error. 

> I found hard to find this palette in a project with more than 2000 .scss files.

I think your problem lives somewhere there. Sass is a great tool to divide your application styling layer into several files, making the whole process of maintaining code much easier. Instead of trying to have `@error` do things it‚Äôs not supposed to do, I‚Äôd reorganise the code so that the palette is easy to find.
",HugoGiraudel,error
2160,2016-10-04 01:51:52,"@nex3 confirmed this is a bug. There is currently a sass spec asserting this broken behaviour which is causing LibSass to fail CI.



Sass 3.4.21



Expected


",xzyfer,nex3
2157,2016-12-19 01:46:07,"@lokson I'm really sorry, and I understand why you're unhappy. I'll do my best to explain why this happened how it did. Over the months since you first filed #2094, I was focused almost exclusively on [Dart Sass](http://blog.sass-lang.com/posts/1022316-announcing-dart-sass) while @chriseppstein was extremely busy with his job at LinkedIn. This left no one to work the issue tracker and continue iterating on pull requests. We should have devoted more time to this repo, but we didn't communicate between each other well enough to actually make that happen. That's our fault, and again, I apologize.

Eventually, Dart Sass became solid enough that we were able to get decent performance data out of it. Based on that among other considerations, we decided to move towards Dart Sass as the reference implementation. Once that was decided, it no longer made sense to land new features‚Äîincluding your multiline patch‚Äîin Ruby Sass only. So I regrettably put your pull request on ice.

I really do appreciate your contributions, and I think your multiline feature is a good one. I'm sorry once again that we didn't respond quicker or communicate better.",nex3,chriseppstein
2154,2016-12-11 23:34:21,"This is the intended behavior. `@extend` is handled after *all* SassScript has been processed, so it only sees selectors with `&` resolved.",nex3,extend
2151,2016-09-27 18:15:20,"Reason for this implementation was @nex3 suggestion in https://github.com/sass/sass/issues/360. @long-lazuli Could you give any example where `.foo.foo` would be desirable?
",lokson,nex3
2151,2016-09-29 00:01:19,"@long-lazuli Right, it is possible to use `.foo.foo` to rise selector specifity. I'm perfectly fine to remove this part of pull request. @nex3, @chriseppstein, what's your opinion on this?
",lokson,nex3
2151,2016-09-29 00:01:19,"@long-lazuli Right, it is possible to use `.foo.foo` to rise selector specifity. I'm perfectly fine to remove this part of pull request. @nex3, @chriseppstein, what's your opinion on this?
",lokson,chriseppstein
2141,2016-09-16 18:39:02,"Hi there,

I'm encountering what I suspect is an issue with managing variables across projects. For some background, what I am doing is moving some of our static images to an external service. Our ""Base"" styling is available as a public repository, so what I'm doing is changing our image paths for `background-image` to be a variable, enabling the base styling to still work with a default setting, while also allowing for path changes within our actual app. 

So, I have a `default-settings` file that includes variable declarations as part of our brec-base styling project (https://github.com/vecnatechnologies/brec-base). The variable in question is `$staticImageUrl` and is used in the `modules/_forms.scss` file.

This brec-base project is then installed via node's package.json, and is included in my app scss files through an `@import`. The app then includes a new `overwrite-settings.scss` file, that replaces variable definitions within the original `default-settings` file with app-specific values.

So, my page's scss begins like this at current, essentially importing Brec's defaults, and then overriding as necessary. 



The variable is set exactly as I would expect it to be at each of those debug statements. When the brec-base repo is imported, the variable is set to `../img/`, and then when the settings overwrite is pulled in, it displays the Url of my new image service. 

The _problem_ is this: I declare in `brec-base` that `.cc-icon` has a background-image based on the variable, `$staticImageUrl`, and even though the new app displays that the variable has updated (as I would expect), because I am not _redeclaring_ that property in the new app, it doesn't appear to update the property itself.

Eg: If I log $staticImageUrl within the declaration of the class in my new app, it will be correct, but won't be updated.



The overwrite will display correctly, but will not actually be used. 
It will update correctly if I do this, and essentially redefine it within the new project:



That ""works"" but it feels like kind of a hacky workaround for something that variables should already cover. If the SCSS was compiled into css before redefining the variable, I'd expect it to be unavailable. If on the other hand, it hasn't been (which is what it seems like), then shouldn't the change in variable value be picked up?
",michaelpelletier,import
2141,2016-12-11 23:20:59,"Sorry to leave this unanswered for so long!

Sass is an *imperative* language, which means that each line of a Sass stylesheet has an effect (in terms of generated CSS) as soon as it's executed. So when you write a style rule that refers to a variable, it uses the variable's value at that point in time. This is part of the language‚Äîit allows us to have language features like `@if` and `@each`.

My recommendation when you want to lazily configure your styles is to define them in a mixin rather than directly in your stylesheets. So in `brec.scss`, you'd write:



and then your app would look like:

",nex3,if
2141,2016-12-11 23:20:59,"Sorry to leave this unanswered for so long!

Sass is an *imperative* language, which means that each line of a Sass stylesheet has an effect (in terms of generated CSS) as soon as it's executed. So when you write a style rule that refers to a variable, it uses the variable's value at that point in time. This is part of the language‚Äîit allows us to have language features like `@if` and `@each`.

My recommendation when you want to lazily configure your styles is to define them in a mixin rather than directly in your stylesheets. So in `brec.scss`, you'd write:



and then your app would look like:

",nex3,each
2140,2016-09-16 17:40:06,"**Summary**

New Feature: @print function which allows for example a string generated in a function to be print in the output CSS file that SASS will generate. Similar to print in C or PrintStream in Java.

**Description**

Let's say we have the following:



This function will generate:



However, I can't use this output because there is no keyword or function that allows me to use it in this fashion:



so we can have SASS generate this CSS output:



If there is a way to do it, please let me know
",acarlstein,print
2138,2016-09-09 06:46:44,"I may be misunderstanding the logic on this error, but I'm getting the following error on my variable. 

'''
Error: Invalid CSS after ""$biko-regular: "": expected expression (e.g. 1px, bold), was ""@include font-f...""
        on line 7 of abstracts/_variables.scss
        from line 6 of main.scss
'''

This is my variable
`$biko-regular: @include font-face(Biko_Regular, ../fonts/Biko_Regular, null, null, otf);`
This is a font variable that uses @include because font-face is a mixin I created to generate a font face rule from font files. The code is as following. 



Is using @include within a variable definition incorrect, or is this a bug?
",surayashivji,include
2135,2016-09-06 00:57:09,"Not sure if this is intended, but would prefer `@at-root` be applied to each parent selector:
### SCSS


### CSS



http://www.sassmeister.com/gist/f5b5db378086086f047570700621b506
",tedw,at-root
2132,2016-09-02 05:32:42,"[I raised the issue that libsass doesn't match the Ruby Sass exit code](https://github.com/sass/libsass/issues/2162), which is causing issues when trying to port the sass-spec for node-sass. @mgreter helpfully pointed out that [65 has a different meaning on window](https://github.com/sass/libsass/pull/2163#issuecomment-244283645)

Not sure, but it seems like `EINVAL` might work http://blog.honeybadger.io/understanding-rubys-strange-errno-exceptions/

/cc @mgreter @xzyfer 
",nschonni,xzyfer
2132,2016-09-02 05:32:42,"[I raised the issue that libsass doesn't match the Ruby Sass exit code](https://github.com/sass/libsass/issues/2162), which is causing issues when trying to port the sass-spec for node-sass. @mgreter helpfully pointed out that [65 has a different meaning on window](https://github.com/sass/libsass/pull/2163#issuecomment-244283645)

Not sure, but it seems like `EINVAL` might work http://blog.honeybadger.io/understanding-rubys-strange-errno-exceptions/

/cc @mgreter @xzyfer 
",nschonni,mgreter
2130,2016-08-31 02:18:54,"You would be cool to be able to do this:

`mixins.scss` :
![image](https://cloud.githubusercontent.com/assets/12506535/18113473/8899333e-6f06-11e6-8f23-76b9bc704b63.png)

Other file, `@include` group:
![image](https://cloud.githubusercontent.com/assets/12506535/18113569/5b14f258-6f07-11e6-8ed2-a0caa389551d.png)

Or

![image](https://cloud.githubusercontent.com/assets/12506535/18113672/01609126-6f08-11e6-9366-9185e7d036cf.png)

A rule `@include` which contain others`@include`.
",wideckop,include
2130,2016-08-31 20:32:05,"I understand that repeatedly typing `@include` is annoying. But to address that I'd rather do #366 than this. Any syntax that we introduced for at-rules I'd want to be generally applicable to all at-rules.
",chriseppstein,include
2129,2016-08-31 08:01:27,"@jessepinuelas How do you mean? Wouldn't properties be evaluated first, and all assigned 100px (in this case), after which additional manipulations could be applied. And by mixin I assume you mean something like:

`@include multiple((max-height, min-height, height), 100px)`

But this kind of defeats the purpose of writing less, and on top of that is less readable.
",GMchris,include
2124,2016-08-25 22:07:10,"@chriseppstein, @xzyfer https://github.com/sass/sass-spec/pull/896
",lokson,xzyfer
2117,2016-08-12 08:19:31,"Hi, I have problem, I need to include/extend few classes from `Bootstrap Framework` in some of my `.scss` files. 
The easiest way is to `@import ""../external-dependencies/bootstrap/assets/stylesheets/bootstrap"";` 
This works, but  the problem that I get all compiled bootstrap classes in my output `CSS` file, that is undesirable behavior, I need only satisfy dependencies like that    



And I don't want to have `bootstrap` classes in my main css.  
I want to get for example something like following output    



Is there any solution for this problem ? 
",CROSP,import
2112,2016-08-06 11:29:29,"Displays error message 'Mixin ""foo"" does not accept a content block.'
for this example:



Before, example was rendered without error and only failed if block
inside `@include` had some statements.

This is fix to:
https://github.com/sass/sass/issues/2106
Tests: sass/sass-spec#897
",lokson,include
2111,2016-08-02 21:15:25,"Rather than introduce lots of complex syntax for parent selector references, we made selectors accessible to SassScript and added [selector functions](http://sass-lang.com/documentation/Sass/Script/Functions.html#selector_functions) to manipulate them in arbitrary ways. Note that you will probably need to compile this into a mixin that takes a content block and utilizes the `@at-root` directive.
",chriseppstein,at-root
2110,2016-07-29 17:30:19,"This is a cross-posted issue here: https://github.com/rails/sass-rails/issues/331#issuecomment-236230570.

When hitting production for the first time after a deploy, or in development after deleting `tmp/cache` and restarting Apache/Passenger, we see in the log:

`Warning. Error encountered while saving cache 7664b4b0d7f5e2ecfb6f548f93c2953c94877abd/typography.sassc: can't dump hash with default proc`

We just upgraded to Rails 5 to start seeing this problem.

It is directly related to importing google fonts through their dynamic `css`:

`@import url(https://fonts.googleapis.com/css?family=Montserrat:400,600,700|Open+Sans:400,600,700)`

... though my hunch is that any `@import url` call that results in a `CssImportNode` is having this problem.

Further investigation reveals a similar issue to [this](https://github.com/rails/sass-rails/issues/36#issuecomment-2189392):
- A Sass::CacheStores::Base instance attempts (and fails) to call Marshal.dump on :
- A Sass::Tree::RootNode instance which amongst its @children nodes has :
- A Sass::Tree::CssImportNode instance which amongst its attributes has :
- A `:uri` which is an instance of `Sass::Script::Tree::Funcall` which fails when trying to call `Marshall.dump` on it
- The `Sass::Script::Tree::Funcall` instance has two attributes (`args`, `options`) both of which fail when trying to call `Marshall.dump` on them.
- Further... the `args` attribute is an `Array` of `Sass::Script::Tree::Literal` instances which has a `value` attribute which is : 
- An instance of `Sass::Script::Value::String` which has an attribute `options` which is an instance of Hash, which fails when trying to call `Marshal.dump` on it.
- That `options` hash does not have a `default_proc` so there must be another embedded hash which does.

I'm currently trying to figure out where those Hash instances get set and by whom. Any insights will be appreciated.


",midwire,import
2110,2016-07-29 17:30:19,"This is a cross-posted issue here: https://github.com/rails/sass-rails/issues/331#issuecomment-236230570.

When hitting production for the first time after a deploy, or in development after deleting `tmp/cache` and restarting Apache/Passenger, we see in the log:

`Warning. Error encountered while saving cache 7664b4b0d7f5e2ecfb6f548f93c2953c94877abd/typography.sassc: can't dump hash with default proc`

We just upgraded to Rails 5 to start seeing this problem.

It is directly related to importing google fonts through their dynamic `css`:

`@import url(https://fonts.googleapis.com/css?family=Montserrat:400,600,700|Open+Sans:400,600,700)`

... though my hunch is that any `@import url` call that results in a `CssImportNode` is having this problem.

Further investigation reveals a similar issue to [this](https://github.com/rails/sass-rails/issues/36#issuecomment-2189392):
- A Sass::CacheStores::Base instance attempts (and fails) to call Marshal.dump on :
- A Sass::Tree::RootNode instance which amongst its @children nodes has :
- A Sass::Tree::CssImportNode instance which amongst its attributes has :
- A `:uri` which is an instance of `Sass::Script::Tree::Funcall` which fails when trying to call `Marshall.dump` on it
- The `Sass::Script::Tree::Funcall` instance has two attributes (`args`, `options`) both of which fail when trying to call `Marshall.dump` on them.
- Further... the `args` attribute is an `Array` of `Sass::Script::Tree::Literal` instances which has a `value` attribute which is : 
- An instance of `Sass::Script::Value::String` which has an attribute `options` which is an instance of Hash, which fails when trying to call `Marshal.dump` on it.
- That `options` hash does not have a `default_proc` so there must be another embedded hash which does.

I'm currently trying to figure out where those Hash instances get set and by whom. Any insights will be appreciated.


",midwire,children
2108,2016-07-28 08:22:36,"Trying the following:
`@debug #{('a', 'b', 'c')};`

I get two different output:
- in compressed mode: `DEBUG: a,b,c`
- in other modes: `DEBUG: a, b, c`

I think that using string interpolation of structured data types must generate the same output always. In my use case I was using interpolation to generate `content` for an `::after` element, and i was not expecting to find two different output.

If this behaviour is correct for other use cases, a possible solution is to create a function like JS `Array.join` method and give more flexibility to the developer.

What do you think about this topic?
Thank you
",giacomozinetti,debug
2108,2016-07-29 23:01:54,"Interpolation assumes the output is headed to the CSS file so it compresses.

You don't need to use string interpolation with `@debug`. The debug function passes it's argument through the `inspect()` function which has the property of producing consistent output that you seek.
",chriseppstein,debug
2107,2016-07-27 08:46:07,"It would be nice if one could import specific variables from other files (similar to EcmaScript 6). It could be done like this:

`@import $myVariable as $variableAlias from 'some-module'`

or like this:

`@import {$myVariable as $variableAlias} from 'some-module'`
",xprt64,import
2106,2016-07-26 15:36:19,"So I was investigation why using libsassc I was getting:



which is completely valid since `something` doesn't use `@content`.

https://github.com/sass/libsass/blob/master/src/expand.cpp#L666

---

Yet on the Ruby side nothing is reported and whilst reading a bit the code:

This method should set `has_content` to true:

https://github.com/sass/sass/blob/stable/lib/sass/tree/visitors/check_nesting.rb#L82

but it doesn't seem to be called anywhere.

Hence this logic won't raise an exception if the mixin has no `@content`:

https://github.com/sass/sass/blob/stable/lib/sass/tree/visitors/perform.rb#L354
",dakull,content
2106,2016-07-29 22:28:20,"Huh. Yeah, I would consider this a bug in ruby sass. A content block is not allowed to that mixin. @nex3 can you confirm?
",chriseppstein,nex3
2106,2016-08-25 22:26:31,"@chriseppstein, @xzyfer https://github.com/sass/sass-spec/pull/897
",lokson,xzyfer
2105,2016-07-26 10:01:02,"Try write a{} before @extend;
As a result, it should come out in
a{ color: blue ... }
#fake-links { @extend a; }
",GabeJonson,extend
2103,2016-07-25 07:18:49,"While I'm currently developing sass with a large scale of algorithm, I found out that my code was pretty messy as a cascading list of `@functions` and `@mixins`. I was looking for a better way to structure my code, I thought objects as it is in javascript or php could be a great feature.

When I write ""objects"" I don't mean JSON like variable, cause obviously `maps` exists, but I mean a class with its own properties and methods that could instantiated into a variable.

Meanwhile I setup in my code bunch of conventions that would make the trick and reproduce as much as I needed objects, but I thought it could be a great feature anyway in the future, or at least a great debate :).
",LoicGoyet,mixins
2103,2016-07-25 07:18:49,"While I'm currently developing sass with a large scale of algorithm, I found out that my code was pretty messy as a cascading list of `@functions` and `@mixins`. I was looking for a better way to structure my code, I thought objects as it is in javascript or php could be a great feature.

When I write ""objects"" I don't mean JSON like variable, cause obviously `maps` exists, but I mean a class with its own properties and methods that could instantiated into a variable.

Meanwhile I setup in my code bunch of conventions that would make the trick and reproduce as much as I needed objects, but I thought it could be a great feature anyway in the future, or at least a great debate :).
",LoicGoyet,functions
2103,2016-07-25 07:22:36,"Sounds like Sass maps. Any reason they don't work for your usecase?

On 7/25/16, Lo√Øc Goyet notifications@github.com wrote:

> While I'm currently developing sass with a large scale of algorithm, I found
> out that my code was pretty messy as a cascading list of `@functions` and
> `@mixins`.
> 
> I was looking for a better way to structure my code, I thought objects as it
> is in javascript or php could be
> 
> ---
> 
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub:
> https://github.com/sass/sass/issues/2103

## 

Regards,
Michael
",xzyfer,mixins
2103,2016-07-25 07:22:36,"Sounds like Sass maps. Any reason they don't work for your usecase?

On 7/25/16, Lo√Øc Goyet notifications@github.com wrote:

> While I'm currently developing sass with a large scale of algorithm, I found
> out that my code was pretty messy as a cascading list of `@functions` and
> `@mixins`.
> 
> I was looking for a better way to structure my code, I thought objects as it
> is in javascript or php could be
> 
> ---
> 
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub:
> https://github.com/sass/sass/issues/2103

## 

Regards,
Michael
",xzyfer,functions
2101,2016-07-21 03:20:33,"I [posted this to SO](http://stackoverflow.com/questions/38469682/sass-mixin-that-references-parent-styles) and after sharing it with a few people they suggested posting it here for your feedback.

We can reference parent selectors using the ampersand `&` but do we have a solution for referencing parent styles?

I'd like to be able to do something like this:



and output:



I can get somewhere quite close with:



...but because Sass doesn't allow us to `@extend` an outer selector from within `@media` that won't work. It would if I wasn't using media queries however. [Someone else posted a solution](http://stackoverflow.com/a/38474952/4794461) which takes a different approach by using `@content` and while it's close, it's still not quite there.

Is this something that has ever come up? And are there roadblocks for implementing it?
",hatzipanis,extend
2101,2016-07-21 03:20:33,"I [posted this to SO](http://stackoverflow.com/questions/38469682/sass-mixin-that-references-parent-styles) and after sharing it with a few people they suggested posting it here for your feedback.

We can reference parent selectors using the ampersand `&` but do we have a solution for referencing parent styles?

I'd like to be able to do something like this:



and output:



I can get somewhere quite close with:



...but because Sass doesn't allow us to `@extend` an outer selector from within `@media` that won't work. It would if I wasn't using media queries however. [Someone else posted a solution](http://stackoverflow.com/a/38474952/4794461) which takes a different approach by using `@content` and while it's close, it's still not quite there.

Is this something that has ever come up? And are there roadblocks for implementing it?
",hatzipanis,content
2101,2016-07-21 03:20:33,"I [posted this to SO](http://stackoverflow.com/questions/38469682/sass-mixin-that-references-parent-styles) and after sharing it with a few people they suggested posting it here for your feedback.

We can reference parent selectors using the ampersand `&` but do we have a solution for referencing parent styles?

I'd like to be able to do something like this:



and output:



I can get somewhere quite close with:



...but because Sass doesn't allow us to `@extend` an outer selector from within `@media` that won't work. It would if I wasn't using media queries however. [Someone else posted a solution](http://stackoverflow.com/a/38474952/4794461) which takes a different approach by using `@content` and while it's close, it's still not quite there.

Is this something that has ever come up? And are there roadblocks for implementing it?
",hatzipanis,media
2101,2016-07-21 19:04:15,"I don't think extend is the right tool for this job. You are not creating an inheritance relationship between these two selectors, you're trying to duplicate them. That means you should be using mixins.

How about this:



produces:



Aaaand I just realized that's the exact solution that you don't think is ""quite there"" so I guess I don't understand why you think that. Again, `@extend` defines an ""is-a"" relationship between two selectors. This just doesn't seem appropriate to your use case.
",chriseppstein,extend
2101,2016-07-27 06:53:00,"Thanks for looking at this @chriseppstein and sorry for the delay in getting back to you.

I ended up implementing that approach and it's working well. When I said it ""wasn't quite there"" I was merely referring to how I preferred it to look personally in my stylesheets. It was more a readability thing.

Do you think a `@context` directive, or similar, has any value (as in my first example)?
",hatzipanis,context
2099,2016-07-15 19:35:11,"We considered this when we added maps but ultimately decided against adding new syntax because of the risks it creates if CSS adds conflicting syntax. However, we are using dot notation in Sass 4.0 for <module>.<identifier> resolution. So now that we've decided that, maybe it's worth revisiting this idea. @nex3 thoughts?
",chriseppstein,nex3
2094,2016-07-11 00:08:40,"Could we also get these specs added to sass-spec. We'll need to update sass2scss for LibSass support /cc @mgreter
",xzyfer,mgreter
2093,2016-07-01 17:58:17,"This closes #1843, which would prevent `sass-convert` from adding newlines in between consecutive `@include` statements.
",Addisonbean,include
2092,2016-06-30 17:24:24,"It seems to me that the issue is with [this line](https://github.com/sass/sass/pull/2092/files#diff-2f15a542ab2d3add779eeae7eddee77cR142). Skipping when there's no importer shouldn't be necessary in the case of `:inline` as we have the contents of the file (E.g. this may be the case when reading from `stdin`).

@nex3 knows this part of the code better than me, so I'll defer to her.
",chriseppstein,nex3
2088,2016-06-28 07:43:13,"As per specs here:
http://sass-lang.com/documentation/file.SASS_REFERENCE.html#parent-selector
consider this example:
`
.btn-default {
  color: red;
}
.btn:hover {
    &.btn-default{
        @extend .btn-default;
    }
}
`
it is now compile to 
`
.btn-default, .btn.btn-default:hover {
  color: red;
}
`
while it should respect the classes order and should be compiled as follow:
`
.btn-default,
.btn:hover.btn-default {
  color: red;
}
`

BTW, this issues is not reproducible in LESS. I am not comparing though. I just moved from LESS to SASS recently and my styles are not working due to this issue.
",menocomp,extend
2088,2016-06-28 19:38:09,"The order difference here is irrelevant to the meaning of the selector, so I'm not sure where the ""should"" comes from. Also note: our reference documentation is not a specification. It exists to provide a high level understanding of our features. People coming from less usually expect `@extend` and `&` to act like search and replace features, but our implementations of those features are much more nuanced than that. 
",chriseppstein,extend
2088,2016-06-29 00:05:59,"Thanks for pointing that the documentation is not considered as s specification.
I did not understand what you mean hear by irrelevant! 
I tried to add space between & and the other selector as follows:
`
.btn:hover {
    & .btn-default{ //space added in this line just after &
        @extend .btn-default;
    }
}
`
and this time it is compiled correctly to
`
.btn-default, .btn:hover .btn-default { // & order here is respected
  color: red;
}
`
I still can say that & is not respected when there is no space after it as in my first example.
",menocomp,extend
2085,2016-06-17 10:18:07,"First there is such a SCSS
.a{
       XXXX xxxx;
     .b{
          XXXX xxxx;
         XXXX xxxx;
         XXXX xxxx;
     }
}
.c{
     I need the style inside of.B;
}

I don't want to add @at-root to the front of the.B.
Is there a way to solve it?

@douglasdeodato 
",chinajoy,at-root
2085,2016-06-17 11:57:15,"The easiest way is to make the styles inside of B a mixin. Then include
that mixin in both B and C.
On 17 Jun 2016 8:18 PM, ""Ê∑∑Âú®ÊàêÈÉΩ"" notifications@github.com wrote:

> First there is such a SCSS
> .a{
> XXXX xxxx;
> .b{
> XXXX xxxx;
> XXXX xxxx;
> XXXX xxxx;
> }
> }
> .c{
> I need the style inside of.B;
> }
> 
> I don't want to add @at-root https://github.com/at-root to the front of
> the.B.
> Is there a way to solve it?
> 
> @douglasdeodato https://github.com/douglasdeodato
> 
> ‚Äî
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/sass/sass/issues/2085#issuecomment-226733979, or mute
> the thread
> https://github.com/notifications/unsubscribe/AAjZWCBW4PTKK2IpYmhQoLzojaGD3BNZks5qMnRhgaJpZM4I4NuO
> .
",xzyfer,at-root
2082,2016-06-15 09:25:57,"If a variable is used in an `@if` block its scope behaves differently depending on whether or not the variable already exists in an outer/the global scope.
- if it exists in an outer scope then the variable references the one in the outer scope
- if it doesn't exist then a new local variable is created

http://www.sassmeister.com/gist/dd6ef43ddeefc4fa499b5b43daaca5da

Which is confusing, and leads to hard to track down bugs, as the variable in the global scope may be defined in a different file.

I can't find this behaviour documented anywhere. Is it a bug or expected behaviour that should be documented?
",wheresrhys,if
2082,2016-06-15 20:05:39,"@wheresrhys that url is a 404 for me.

However, the block of an `@if` or `@else` follow the same scoping rules as every other conditional block and loop. These are ""semi-global"" scopes. The follow slightly different scoping rules when used directly in the global scope (as opposed to when they are used in the local scope of a function, mixin, or selector). This is by design because conditionals and loops are frequently used to initialize global variables and forcing them to add `!global` to set a global variable in that context seems cumbersome.

I think you're right that this specific behavior is undocumented in the language reference. We should document it better.

> Which is confusing, and leads to hard to track down bugs, as the variable in the global scope may be defined in a different file.

This is, more generally, a problem with global variables in Sass, independent of whether they are used in a conditional. Specifically in Sass 4.0 our module system will scope global variables to the module and provide syntax for avoiding unintended name collisions across modules.
",chriseppstein,if
2082,2016-06-15 20:05:39,"@wheresrhys that url is a 404 for me.

However, the block of an `@if` or `@else` follow the same scoping rules as every other conditional block and loop. These are ""semi-global"" scopes. The follow slightly different scoping rules when used directly in the global scope (as opposed to when they are used in the local scope of a function, mixin, or selector). This is by design because conditionals and loops are frequently used to initialize global variables and forcing them to add `!global` to set a global variable in that context seems cumbersome.

I think you're right that this specific behavior is undocumented in the language reference. We should document it better.

> Which is confusing, and leads to hard to track down bugs, as the variable in the global scope may be defined in a different file.

This is, more generally, a problem with global variables in Sass, independent of whether they are used in a conditional. Specifically in Sass 4.0 our module system will scope global variables to the module and provide syntax for avoiding unintended name collisions across modules.
",chriseppstein,else
2080,2016-06-11 22:03:10,"**I'm from Brazil**

I've never seen a Python code before, but added for me to function calling a variable with the given name.

The reason I have done this is to have something like this from Less: `@@var`

**Thank You!**

---

**Exemplo:**

<!-- language: lang-scss -->


",ghost,var
2078,2016-06-14 00:13:55,"If I understand correctly this is referring to the CSS Color Module Level 4 (not 3) [`color` function](https://drafts.csswg.org/css-color-4/#color-function)?

This spec appears to still be an editors draft which means it has the potential to change. Sass traditionally does not implement new specifications before they're stable (read: implemented in a browser) because if the spec changes we're stuck supporting the old and stable versions for a long time.

Technically it is possible for Sass to opt out of parsing `color()` function arguments like it does for `calc()` once we're sure the spec isn't going to change the function name under our feet. Maybe @tabatkins can speak to stability?
",xzyfer,tabatkins
2078,2016-06-14 00:16:58,"And in particular, `color()` did change - what was previously there now lives at `adjust-color()` (and has an issue noting that it needs some serious changes), and the current `color()` is about referring to a color in an arbitrary colorspace defined by a `@color-profile` rule.

I highly recommend not trying to copy whatever we're doing in this case until browsers start shipping it.  (That's a pretty good rule in general; it's not the spec status that matters, it's the shipping implementations.)
",tabatkins,color-profile
2076,2016-06-08 11:40:55,"It would be very handy to have an alternative to `@extend`, that imports the ruleset from another selector. LESS does this in this way:



Output:



P.S. I hope this is not a duplicate, but I didn't find a name for this functionality, so it was rather hard to search for it.
",gligoran,extend
2074,2016-06-06 21:57:59,"At the moment `@extend`ing a selector that is defined just with empty body



throws the following error



suggesting that the `%pattern` definition, being empty, is discarded right away. The code above should be self-explanatory as to why this might be undesirable. Seeing as making the body not empty, e.g. adding a compiled `/* css comment */` makes it work just fine, wouldn't it make more sense to keep the definition for possible extensions even though it doesn't produce CSS at the moment it is parsed?

This doesn't apply only to abstract (placeholder) selectors. It works the same with other types of selectors as well.
",hon2a,extend
2074,2016-06-09 07:51:33,"@chriseppstein Thanks for that, you prompted me to try the full use-case I put in the description on [SassMeister](http://www.sassmeister.com/) and it actually works as long as there is a non-empty use of `%abstract` later in the code. That means your `!optional` suggestion is also applicable to flag `.instance` as `%abstract` without being sure that `%abstract` will be used anywhere.

Originally I tried only this code on SassMeister



and got the warning. I then expected that the `@extend` will not properly work with later uses of `%abstract`. Since this isn't true, I'm closing the issue. Thanks for the help.
",hon2a,extend
2073,2016-06-06 11:26:42,"Hello,

So as I believe there was some updates recently that I found out only by reinstalling my whole OS. Now with a fresh reinstall of nodejs & gulp - sass won't get me to render extends across files:

Here's the file structure
‚îú‚îÄ‚îÄ styles.scss - imports _style-main
‚îú‚îÄ‚îÄ _styles-main.scss - imports _extends and _icons
‚îú‚îÄ‚îÄ _extends.scss
‚îú‚îÄ‚îÄ _icons.scss

in _icons.scss I declare an extend:



in _extends I call the %icons extend upon another extend:



Error message:
Error! _extends.scss
Error: ""%more:after"" failed to @extend ""%icons"".
       The selector ""%icons"" was not found.
       Use ""@extend %icons !optional"" if the extend should be able to fail.
        on line 39 of _extends.scss
     @extend %icons;

The weirdest thing here is that if I import _icons.scss directly at the top of _extends.scss file - it works and it was acting absolutely normal last week when I had an older version of npm. Please help me at least understand what changed and how to fix it - this problem occurs on a already finished project
",alexcracea,extend
2066,2017-03-11 21:51:35,"@chriseppstein? @nex3? Anyone?

If reply on this issue can't be provided right away, please, at least __re-open this issue__. I think it is very impolite to close issue right away without any meaningful solution.",ArmorDarks,nex3
2062,2016-05-19 13:39:12,"I have node.js and gulp.js installed, npm install works fine but then when I try to run the gulp local webserver it stops at 'sass' with the error messages below.

I have tried uninstalling node.js and gulp.js as well as wiping out the node_modules folder and running npm install again but no luck yet. Any suggestions?

`[09:50:25] Starting 'generate-sass-index'...
[09:50:26] Finished 'generate-sass-index' after 68 ms
[09:50:26] Starting 'sass'...
[09:50:26] SOURCE CODE ERROR
[09:50:26] formatted Error: You may not @extend an outer selector from within @media.
   You may only @extend selectors within the same directive.
   From ""@extend .col-md-6"" on line 134 of LocalDistribution/sass/ItemDetails/_item-details.scss
    on line 11 of LocalDistribution/sass/twitter-bootstrap-sass/mixins/_grid-framework.scss

> > [09:50:26] message LocalDistribution\sass\twitter-bootstrap-sass\mixins_grid-framework.scss
> > Error: You may not @extend an outer selector from within @media.
> >    You may only @extend selectors within the same directive.
> >    From ""@extend .col-md-6"" on line 134 of    LocalDistribution/sass/ItemDetails/_item-details.scss
> >     on line 11 of LocalDistribution/sass/twitter-bootstrap-sass/mixins/_grid-framework.scss
> > 
> > [09:50:26] column 245
> > [09:50:26] line 11
> > [09:50:26] file C:/svn/montblanc/LocalDistribution/sass/twitter-bootstrap-sass/mixins/_grid-framework.scss
> > [09:50:26] status 1
> > [09:50:26] messageFormatted LocalDistribution\sass\twitter-bootstrap-sass\mixins_grid-framework.scss
> > Error: You may not @extend an outer selector from within @media.
> >    You may only @extend selectors within the same directive.
> >    From ""@extend .col-md-6"" on line 134 of LocalDistribution/sass/ItemDetails/_item-details.scss
> >     on line 11 of LocalDistribution/sass/twitter-bootstrap-sass/mixins/_grid-framework.scss
> > 
> > [09:50:26] name Error
> > [09:50:26] stack Error: LocalDistribution\sass\twitter-bootstrap-sass\mixins_grid-framework.scss
> > Error: You may not @extend an outer selector from within @media.
> >    You may only @extend selectors within the same directive.
> >    From ""@extend .col-md-6"" on line 134 of LocalDistribution/sass/ItemDetails/_item-details.scss
> >     on line 11 of LocalDistribution/sass/twitter-bootstrap-sass/mixins/_grid-framework.scss
> > 
> > at options.error (C:\svn\montblanc\node_modules\gulp-sass\node_modules\node-sass\lib\index.js:271:32)
> > [09:50:26] showStack false
> > [09:50:26] showProperties true
> > [09:50:26] plugin gulp-sass
> > [09:50:26] Finished 'sass' after 469 ms
> > [09:50:26] Starting 'font-awesome'...
> > [09:50:26] Starting 'clean-sass-tmp'...
> > [09:50:26] Finished 'clean-sass-tmp' after 20 ¬µs

events.js:85
  throw er; // Unhandled 'error' event
        ^
Error: Checksum error in glyf
`
",jalarson1,extend
2062,2016-05-19 13:39:12,"I have node.js and gulp.js installed, npm install works fine but then when I try to run the gulp local webserver it stops at 'sass' with the error messages below.

I have tried uninstalling node.js and gulp.js as well as wiping out the node_modules folder and running npm install again but no luck yet. Any suggestions?

`[09:50:25] Starting 'generate-sass-index'...
[09:50:26] Finished 'generate-sass-index' after 68 ms
[09:50:26] Starting 'sass'...
[09:50:26] SOURCE CODE ERROR
[09:50:26] formatted Error: You may not @extend an outer selector from within @media.
   You may only @extend selectors within the same directive.
   From ""@extend .col-md-6"" on line 134 of LocalDistribution/sass/ItemDetails/_item-details.scss
    on line 11 of LocalDistribution/sass/twitter-bootstrap-sass/mixins/_grid-framework.scss

> > [09:50:26] message LocalDistribution\sass\twitter-bootstrap-sass\mixins_grid-framework.scss
> > Error: You may not @extend an outer selector from within @media.
> >    You may only @extend selectors within the same directive.
> >    From ""@extend .col-md-6"" on line 134 of    LocalDistribution/sass/ItemDetails/_item-details.scss
> >     on line 11 of LocalDistribution/sass/twitter-bootstrap-sass/mixins/_grid-framework.scss
> > 
> > [09:50:26] column 245
> > [09:50:26] line 11
> > [09:50:26] file C:/svn/montblanc/LocalDistribution/sass/twitter-bootstrap-sass/mixins/_grid-framework.scss
> > [09:50:26] status 1
> > [09:50:26] messageFormatted LocalDistribution\sass\twitter-bootstrap-sass\mixins_grid-framework.scss
> > Error: You may not @extend an outer selector from within @media.
> >    You may only @extend selectors within the same directive.
> >    From ""@extend .col-md-6"" on line 134 of LocalDistribution/sass/ItemDetails/_item-details.scss
> >     on line 11 of LocalDistribution/sass/twitter-bootstrap-sass/mixins/_grid-framework.scss
> > 
> > [09:50:26] name Error
> > [09:50:26] stack Error: LocalDistribution\sass\twitter-bootstrap-sass\mixins_grid-framework.scss
> > Error: You may not @extend an outer selector from within @media.
> >    You may only @extend selectors within the same directive.
> >    From ""@extend .col-md-6"" on line 134 of LocalDistribution/sass/ItemDetails/_item-details.scss
> >     on line 11 of LocalDistribution/sass/twitter-bootstrap-sass/mixins/_grid-framework.scss
> > 
> > at options.error (C:\svn\montblanc\node_modules\gulp-sass\node_modules\node-sass\lib\index.js:271:32)
> > [09:50:26] showStack false
> > [09:50:26] showProperties true
> > [09:50:26] plugin gulp-sass
> > [09:50:26] Finished 'sass' after 469 ms
> > [09:50:26] Starting 'font-awesome'...
> > [09:50:26] Starting 'clean-sass-tmp'...
> > [09:50:26] Finished 'clean-sass-tmp' after 20 ¬µs

events.js:85
  throw er; // Unhandled 'error' event
        ^
Error: Checksum error in glyf
`
",jalarson1,media
2059,2016-05-12 19:36:56,"> To me it looks like the entire string is just pasted into its destination without honoring the `,`.

Yes, that's what `#{}` does. It inserts the SassScript expression as a string at that location.

What you wanted was `@at-root #{selector-append("".something-at-root"", &)}`
",chriseppstein,at-root
2057,2016-05-11 20:31:50,"Implements the most requested feature: #626.

The following tasks remain:
- [x] sass-spec tests.
- [x] CHANGELOG.
- [x] Language Reference docs

This feature adds the ability to include a mixin dynamically. It is the mixin equivalent to the `call()` function. A new ""magic"" mixin named `mixin` is exposed who's behavior is to take in the arguments and call another mixin, taking the first positional argument as the mixin name to call. The mixin name can be passed a normal positional argument or it can be passed as a ""splat"" argument. 

We are not deprecating any mixin named `mixin` at this time because 3.5 will only break backwards compat for CSS syntax support. Like all global functions defined by the Sass core, this mixin can be overridden by a user-defined mixin named `mixin`. Instead, if a user defined a mixin named `mixin` they will not be able to use dynamic includes, nor will any of the libraries that they include. In Sass 4.0, the special mixin named `mixin` can be `@use`d thus preventing any possible namespace collision.

Given that in practice, people probably don't have a mixin named `mixin` this seems like an acceptable risk and one that is easily worked around.

Code review summary:
- [x] Add backtrace info for dynamic calls
- [x] Simply initialization of mixin_name
- [ ] Remove Test::Unit tests in favor of sass-spec tests
- [x] Test backtrace line #'s
- [x] Test passing keyword arguments both explicitly and through a captured arglist
",chriseppstein,use
2055,2016-05-10 19:47:21,"After more digging I found a possible cause for this problem.

Inside `@media` declaration each comment, `\* *\` or `\*! *\`, will have a semicolon after it. They shouldn't.

This is the only place where I found this happens
",NicosKaralis,media
2053,2016-05-06 23:47:21,"Closes #2050

@chriseppstein This is incompatible with some sass-spec specs; I'm not sure the right way to land it without breaking either our tests or libsass's.
",nex3,chriseppstein
2049,2016-05-05 19:20:39,"If a identifier ends with parens indicating it is a function call. E.g. `un#{quo}te(asdf)` then in Sass 3.5: we get `unquote(asdf)` as output but in Sass 4.0 we get `unquo te(asdf)` (note: the introduction of a space).

According to @nex3 this is an unintended change.
",chriseppstein,nex3
2049,2016-05-07 00:07:00,"This is more complicated than it looks. In Sass 3.5, `un#{quo}te(asdf)` parses as ``un#{quo}#{te(asdf)}``‚Äîmeaning that it is actually _calling a function_. In this case, there's no function named `te()` defined,  so the function call returns the unquoted string ``te(asdf)``, but that's not necessarily true. For example, if you write `b#{o}red(#abc)` in 3.5, you get ``bo170``, since `red(#abc)` is 170.

In 4.0, we're still parsing the function call as a function call, but we no longer allow that to join the interpolation string. So the parse is instead ``un#{quo}` te(asdf)`, which is the source of the space. Similarly, `b#{o}red(#abc)` produces `bo 170` in 4.0.

We should _certainly_ have a deprecation warning here, since I don't think it makes sense to have the same behavior across 3.5 and 4.0 in all cases. But the question remains what the behavior should be. I can see two options:
1. Allow interpolated function names, and always interpret them as plain-CSS function calls. This is likely to preserve existing behavior in almost all cases, and it's consistent with how we handle interpolated `@import`s. It _mostly_ fits with the principle that all identifiers can be interpolated, except that a function whose _entire_ name is interpolated (e.g. `#{$name}(foo)`) would still be parsed as ``#{$name}` foo`, which isn't consistent with the function behavior (although is consistent with the rest of interpolation).
2. Canonize the current 4.0 behavior as official and make `call()` the official way to dynamically construct CSS function calls as well as Sass ones. This avoids any interpolation special-cases, but is much more likely to break existing stylesheets.

I tend to favor option 1, since it's less likely to cause breakage, but we should talk these through and get to a decision we're confident is the right one.
",nex3,import
2046,2016-05-05 20:43:18,"@royels FYI this is landing finally.
",chriseppstein,royels
2036,2016-04-23 05:00:07,"LibSass will [merge a change](https://github.com/sass/libsass/pull/2032) that fixes the most urgent issues with handling `:not` wrapped selectors. Unfortunately I'm not able to avoid a breaking\* change. For illustration see the following sample:



Compile to (with ruby sass):



With libsass this will yield:



The only difference is that `:not(.asd, .qwe)` is expanded to `:not(.asd):not(.qwe)`. My argument to merge this breaking\* change in libsass is simply that this is [invalid css](https://developer.mozilla.org/en-US/docs/Web/CSS/:not) anyway.

> The negation CSS pseudo-class, :not(X), is a functional notation taking a simple selector X as an argument. It matches an element that is not represented by the argument. X must not contain another negation selector.

Therefore I would like to ask if ruby sass would be willing to adopt this behavior?
IMO it makes specially sense if you look at what happens with the `@extend` above.
",mgreter,extend
2036,2016-04-25 17:37:24,"@nex3 thoughts?
",chriseppstein,nex3
2036,2016-04-29 18:09:17,"This is intended behavior. The `:not(.asd, .qwe)` selector is what the user originally authored; Sass won't create new Selectors 3-incompatible code if it can help it, but we also won't stop the user from doing so.

In general, we don't do _any_ modificiation of user-authored selectors beyond what's necessary to resolve `@extend`. Doing it in this particular instance would be a special case that would muddy the waters about how much users can expect Sass to fix up their limited-compatibility pure CSS.
",nex3,extend
2035,2016-04-21 23:31:52,"I'm in the process of trying to upgrade Sass from 3.2.19 to 3.4.22 (my main goal is updating sprockets, but since the 3.2.19 version of sass is locking sprockets to an older version, I need to update sass).

Basically, I'm getting numerous errors running our test suite like 



For many of these, it makes sense, as the selector in question was removed by our front end guy some time ago and the older version of sass never complained about the fact that it was missing. 

The ones I'm having issues with, however, are situations where the selector exists and is `@import`ed before the css file that uses it, e.g.:



The extend still fails with the error mentioned above. 

What am I doing wrong here? 

Do I need to explicitly `@import` the stylesheet that contains the styles I want in the stylesheet that is doing the `@extending`? 

Or should I convert these shared classes to `@mixins` and use them that way?

My apologies if github issues is not the place for this type of question, but I poured over all the relevant documentation (and googled the shit out of it) and couldn't really find anything that explains how `@extend` scopes the selectors that it uses.
",erichummel,extending
2035,2016-04-21 23:31:52,"I'm in the process of trying to upgrade Sass from 3.2.19 to 3.4.22 (my main goal is updating sprockets, but since the 3.2.19 version of sass is locking sprockets to an older version, I need to update sass).

Basically, I'm getting numerous errors running our test suite like 



For many of these, it makes sense, as the selector in question was removed by our front end guy some time ago and the older version of sass never complained about the fact that it was missing. 

The ones I'm having issues with, however, are situations where the selector exists and is `@import`ed before the css file that uses it, e.g.:



The extend still fails with the error mentioned above. 

What am I doing wrong here? 

Do I need to explicitly `@import` the stylesheet that contains the styles I want in the stylesheet that is doing the `@extending`? 

Or should I convert these shared classes to `@mixins` and use them that way?

My apologies if github issues is not the place for this type of question, but I poured over all the relevant documentation (and googled the shit out of it) and couldn't really find anything that explains how `@extend` scopes the selectors that it uses.
",erichummel,mixins
2035,2016-04-21 23:31:52,"I'm in the process of trying to upgrade Sass from 3.2.19 to 3.4.22 (my main goal is updating sprockets, but since the 3.2.19 version of sass is locking sprockets to an older version, I need to update sass).

Basically, I'm getting numerous errors running our test suite like 



For many of these, it makes sense, as the selector in question was removed by our front end guy some time ago and the older version of sass never complained about the fact that it was missing. 

The ones I'm having issues with, however, are situations where the selector exists and is `@import`ed before the css file that uses it, e.g.:



The extend still fails with the error mentioned above. 

What am I doing wrong here? 

Do I need to explicitly `@import` the stylesheet that contains the styles I want in the stylesheet that is doing the `@extending`? 

Or should I convert these shared classes to `@mixins` and use them that way?

My apologies if github issues is not the place for this type of question, but I poured over all the relevant documentation (and googled the shit out of it) and couldn't really find anything that explains how `@extend` scopes the selectors that it uses.
",erichummel,import
2035,2016-04-21 23:31:52,"I'm in the process of trying to upgrade Sass from 3.2.19 to 3.4.22 (my main goal is updating sprockets, but since the 3.2.19 version of sass is locking sprockets to an older version, I need to update sass).

Basically, I'm getting numerous errors running our test suite like 



For many of these, it makes sense, as the selector in question was removed by our front end guy some time ago and the older version of sass never complained about the fact that it was missing. 

The ones I'm having issues with, however, are situations where the selector exists and is `@import`ed before the css file that uses it, e.g.:



The extend still fails with the error mentioned above. 

What am I doing wrong here? 

Do I need to explicitly `@import` the stylesheet that contains the styles I want in the stylesheet that is doing the `@extending`? 

Or should I convert these shared classes to `@mixins` and use them that way?

My apologies if github issues is not the place for this type of question, but I poured over all the relevant documentation (and googled the shit out of it) and couldn't really find anything that explains how `@extend` scopes the selectors that it uses.
",erichummel,extend
2035,2016-04-21 23:39:45,"@cimmanon the only difference between a partial and a regular css file is the leading underscore, right?

`@import ""common/icons""` is referring to the file common/_icons.scss, likewise, `@import ""desktop/modals""` is referring to desktop/_modals.scss

[EDIT] and both of them are imported in a manifest file that `@imports` loads of partials
",erichummel,imports
2035,2016-04-21 23:39:45,"@cimmanon the only difference between a partial and a regular css file is the leading underscore, right?

`@import ""common/icons""` is referring to the file common/_icons.scss, likewise, `@import ""desktop/modals""` is referring to desktop/_modals.scss

[EDIT] and both of them are imported in a manifest file that `@imports` loads of partials
",erichummel,import
2035,2016-04-22 20:26:16,"welp, try as I might, I couldn't reproduce the issue in a new rails app, and in the process of noting the difference between my app and the test case I tracked down a few more erroneous `@extends` and voila, the problem has disappeared. 

I guess I must have been so bleary eyed while stuck in the weeds with this yesterday that I misread the error or something.

At any rate, if anyone else runs into a problem like this while upgrading sass to 3.4.x, check all your `@extends` and make sure that their dependencies are actually being `@imported` before they're extended. Also, make sure you're not calling `@extend` from within media query blocks to extend with selectors defined outside of those blocks.

thanks @chriseppstein and @cimmanon 
",erichummel,imported
2035,2016-04-22 20:26:16,"welp, try as I might, I couldn't reproduce the issue in a new rails app, and in the process of noting the difference between my app and the test case I tracked down a few more erroneous `@extends` and voila, the problem has disappeared. 

I guess I must have been so bleary eyed while stuck in the weeds with this yesterday that I misread the error or something.

At any rate, if anyone else runs into a problem like this while upgrading sass to 3.4.x, check all your `@extends` and make sure that their dependencies are actually being `@imported` before they're extended. Also, make sure you're not calling `@extend` from within media query blocks to extend with selectors defined outside of those blocks.

thanks @chriseppstein and @cimmanon 
",erichummel,extend
2035,2016-04-22 20:26:16,"welp, try as I might, I couldn't reproduce the issue in a new rails app, and in the process of noting the difference between my app and the test case I tracked down a few more erroneous `@extends` and voila, the problem has disappeared. 

I guess I must have been so bleary eyed while stuck in the weeds with this yesterday that I misread the error or something.

At any rate, if anyone else runs into a problem like this while upgrading sass to 3.4.x, check all your `@extends` and make sure that their dependencies are actually being `@imported` before they're extended. Also, make sure you're not calling `@extend` from within media query blocks to extend with selectors defined outside of those blocks.

thanks @chriseppstein and @cimmanon 
",erichummel,extends
2033,2016-04-15 13:19:48,"You're probably not getting the expected results because (and correct me if I'm wrong @nex3) `@extend` tries to match the specificity of the extendee. That probably results in the simplification of the output selector.
",davidkpiano,extend
2033,2016-04-15 13:19:48,"You're probably not getting the expected results because (and correct me if I'm wrong @nex3) `@extend` tries to match the specificity of the extendee. That probably results in the simplification of the output selector.
",davidkpiano,nex3
2033,2016-04-15 13:31:17,"Probably, I don't know SASS enough to understand why the output in first test is optimized...

If you're right, how could I get around the problem ?

On my project, I have a mixin for card and a mixin for button. Since the selector is passed as an argument for both mixins, my card mixin doesn't know the button selector.

So I wanted to tell that all my buttons in `.card .card_image .actions {@extend %transparent; }` to extend the transparent style (transparent styles are used by buttons, titles, etc.)

Is there another way to do this ? I tried a lot of things without success.
Or maybe I don't use placeholders the right way ?
",Sorendil,extend
2033,2016-04-15 19:34:52,"> You're probably not getting the expected results because (and correct me if I'm wrong @nex3) `@extend` tries to match the specificity of the extendee. That probably results in the simplification of the output selector.

This isn't quite right. For every extending selector, `@extend` guarantees that the generated selector will contain at least one complex selector with two properties:
1. the complex selector matches all elements that are matched by the extending selector, and
2. the complex selector has specificity greater than or equal to the extending selector.

It's possible for those two properties to be satisfied without literally including the extending selector in the output, in which case the original selector will be omitted. This can look strange, but it shouldn't affect the actual rendering of the page unless you're relying on the generated selector having even greater specificity than the extending selector, which is not safe‚Äîand not something we could guarantee even if we produced every element of the combinatorial explosion of possible selectors we could generate.
",nex3,extend
2033,2016-04-15 19:34:52,"> You're probably not getting the expected results because (and correct me if I'm wrong @nex3) `@extend` tries to match the specificity of the extendee. That probably results in the simplification of the output selector.

This isn't quite right. For every extending selector, `@extend` guarantees that the generated selector will contain at least one complex selector with two properties:
1. the complex selector matches all elements that are matched by the extending selector, and
2. the complex selector has specificity greater than or equal to the extending selector.

It's possible for those two properties to be satisfied without literally including the extending selector in the output, in which case the original selector will be omitted. This can look strange, but it shouldn't affect the actual rendering of the page unless you're relying on the generated selector having even greater specificity than the extending selector, which is not safe‚Äîand not something we could guarantee even if we produced every element of the combinatorial explosion of possible selectors we could generate.
",nex3,nex3
2031,2016-04-11 20:10:52,"Ok. so it seems that being inside the `@media` declaration is what causes the deprecation to happen. @nex3 I think this is a bug.
",chriseppstein,media
2031,2016-04-11 20:10:52,"Ok. so it seems that being inside the `@media` declaration is what causes the deprecation to happen. @nex3 I think this is a bug.
",chriseppstein,nex3
2030,2016-04-11 18:26:06,"> In short, let others do what makes sense for them.

We get a lot of requests for `@include my-mixin($args) !important` which would then mark every property declaration in that mixin as important. We have rejected this feature not because it's hard but because it is bad to use `!important` like that. As such, we are frequently in the position of deciding whether language features in Sass encourage ""Good CSS"" or ""Bad CSS"" and we frequently have to use our own opinions on what constitutes good and bad stylesheet authoring practices. I'm not saying that this applies specifically here, just that as a general statement, I disagree with it :)

In this case, we want `&` to result in an error when there is no parent selector because we believe that most users expect there to be a parent selector in scope when they use it and so this error speeds up the debugging process of an authoring mistake.

My proposal to you is to change your implementation to use a prefix even for the global scope. This accomplishes all of your goals except for the exact naming you prefer. Alternatively, you can use the implementation suggestion that @cimmanon has made which seems pretty nice to me.
",chriseppstein,include
2030,2016-04-11 19:37:09,"@chriseppstein:

> I'm not saying that this applies specifically here, just that as a general statement, I disagree with it :)

You're right, and as a general statement, I don‚Äôt agree with it myself üòÑ 

> [‚Ä¶] we believe that most users expect there to be a parent selector in scope when they use it and so this error speeds up the debugging process of an authoring mistake

Totally understand that position of making life much easier on an use case that a lot more people will run into. Opened the issue with the hopes that both scenarios could be covered, but alas not. I‚Äôll find a workaround.

As for @cimmanon‚Äôs suggestion, I appreciate it, but it‚Äôd imply calling the mixin for each selector group I want to namespace, resulting in one `@media` block per selector group, which isn‚Äôt desirable.
",paulozoom,media
2025,2016-04-06 14:39:59,"I've started looking at implementing a colour map for certain projects, which is a nice way of grouping colours based on a base colour.

I was looking at being able to set parameters based on the @content block. 

For instance:



If I wanted to add these colours as a button block, id have to do something like the following:



This would be nicer, and more reusable if we could do this via a mixin like:



This would mean we would have the option of selecting the colour, and defining it based on the block type.
",amonger,content
2024,2016-04-06 08:31:44,"I was thinking about difficulties with implementing third-party extensions in your CSS, mainly due to class name collisions and then I thought it would be nice to have something like `@import as` syntax, similar to [import](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/import) and [export](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/export) in JavaScript.  

Here's a simple example of how this could work.  

**_button.scss**



**app.scss**



Compiled CSS in **app.css**



This is a very simple example to illustrate my point. Now, imagine if you could push it even further by exporting mixins.

**components/_buttonComponent.scss**



**app.scss**



Compiled CSS in **app.css**



You could go with JavaScript syntax and do multiple import/export:

**_buttonComponent.scss**



**app.scss**



---

Long term vision - we have all popular components hosted on Bower, we can import them with ease and adjust settings so that they work nicely with our codebase.

What do you guys think?
",adampoczatek,import
2024,2016-04-11 17:54:50,"We are currently re-designing `@import` for Sass 4.0. See #353 and https://github.com/sass/proposal.module-system

That said, there is not currently any selector re-writing capability in this new module system. I opened an issue against that spec for discussion.
",chriseppstein,import
2023,2016-03-30 14:19:00,"Take this document `one.sass`:



Then this another `_other.sass`:



Then:



Says:



... but I need UTF8 for ¬©! And [docs say that `@charset` only goes into CSS when there's any non-ASCII character](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#encodings), so it should even be automatic.
",Yajo,charset
2023,2016-03-30 16:00:32,"@nex3 thoughts?
",chriseppstein,nex3
2023,2016-03-30 21:01:12,"There are plenty of non-`@charset` ways to load files as UTF-8. Most OSes these days are configured to use UTF-8 by default, and Sass will pick up on that. You can also pass the `-E` parameter to control the default encoding. If you really need to put something in the file itself, you can use a BOM. But `@charset` is explicitly a CSS directive, and we can't emit it as a CSS directive if it's in the middle of the output file, so don't use that.
",nex3,charset
2023,2016-04-04 19:58:39,"We do automatically choose to add or remove a `@charset` declaration at the beginning of the output file depending on whether it's necessary to preserve the semantics of that file. But if you're writing a `@charset` in the middle of your stylesheet‚Äîwhich is effectively what it means for it to be in a partial that you import‚Äîthere's no way we can compile that while preserving the CSS semantics, because the CSS semantics are that it's an error.
",nex3,charset
2023,2016-04-05 07:14:46,"I know, I understand the bug. But it seems it's not a bug in the implementation but in the design.

If you really need to declare the partial as UTF8 as is my case, then you cannot compile at all unless removing all `@charset` declarations and passing the `-E` flag. But that's not good. What happens if I want to use 2 libraries and both have the `@charset` at the top? What if both are different? I'd have to recode and modify at least one of them.

So IMHO if the compiler is smart enough to provide the `@charset` for the CSS output automatically when needed, it should be smart enough to _not_ output them _when it's the first declaration of a partial_, and to convert that partial to the main `.sass` file's encoding when they differ.

So after all, any `@charset` declaration should raise an exception only when not in the first line of any file, partial or not. Otherwise it should be used internally by the compiler, but not for the output.
",Yajo,charset
2023,2016-04-06 15:22:31,"Why can't it just bubble up to the top the same way CSS `@import` statements are handled?  There are people that are surprised when the location of the import changes because they don't realize that what they've written is isn't valid.  Why can't `@charset` be handled the same way?



Output:


",cimmanon,charset
2023,2016-04-06 15:22:31,"Why can't it just bubble up to the top the same way CSS `@import` statements are handled?  There are people that are surprised when the location of the import changes because they don't realize that what they've written is isn't valid.  Why can't `@charset` be handled the same way?



Output:


",cimmanon,import
2023,2016-04-11 17:49:25,"@nex3 this seems like a bug to me. The `@charset` is needed in partials to declare the charset but then it cannot be imported except at the top level. This seems like an oversight in the implementation.
",chriseppstein,charset
2020,2016-03-29 17:01:58,"In Sass there are only two ""falsy"" values: `null` and `false`. All other values are ""truthy"" including `0` and empty strings, lists, and maps. You can explicitly test for `$var == false` or `$var == null` if you want to distinguish between these. In most cases, the best solution is to just use the value as the condition and let Sass cast it to a boolean for you. E.g. `@if $var { ... }` or `if($var, $if-true, $if-null)`.

I think a good place to add this would be to the documentation for `@if` and to reference it for the documentation for the `if()` function. A small note could also be made in the `null` data type section.
",chriseppstein,if
2020,2016-03-30 08:41:00,"The fact that `false` and `null` are the only falsy values is already well documented. I now added a note about distinguishing the two in the `@if` section. I guess it is not important enough to be repeated in the `if()` reference.
",xi,if
2019,2016-03-19 13:14:08,"Hi Guys!
I am working on an AST-based Less to Sass converter for my bachelor's thesis. I'm just studying how your code works and I would like to closer examine the Sass AST structure, as well. I managed to get a part of the AST with the following code:



However, if I pass a file containing an import statement, the import node in the AST has no children.
**I'd like to ask you 2 questions:**
1. What do I do wrong? Is there an option to be passed to the Engine's constructor? Maybe a FileImporter object?
2. How do I generate Sass code out of the AST? I know, that there are `to_sass()` and `to_scss()` methods that return the code as a String. That's why I doubt it would be the right way for me to generate the code.

Thank you :)

The passed file's content:
`@import ""import/this-is-valid.scss""`

import/this-is-valid.scss:
`$my-var: black;`

The output:


",vecerek,import
2017,2016-03-17 15:03:30,"like in less i can use @@var to [get value of a value](http://lesscss.org/features/#variables-feature-variable-names), how may i use this in sass ?
",amoebageek,var
2016,2016-03-15 00:09:40,"@chriseppstein Any blockers to merging this?
",glebm,chriseppstein
2016,2016-03-17 22:33:51,"@glebm Well, @nex3 has consistently rejected patches that fix this so far, arguing that ruby warnings are not in line with our preferred coding standard for this project. So I will let her weigh in. Personally, I am not opposed to Sass running without warnings when running with `-w` set.
",chriseppstein,nex3
2016,2016-03-22 17:29:28,"@nex3 @chriseppstein Please consider to merge this for the Community sanity.

Sass is a dependency for hundreds of gems and thousands of applications that will see these warnings (and they are a lot). Of course they can decide to opt-out for Ruby warnings, but that prevents OSS maintainers to keep them enabled.

:pray: 

---

**UPDATE:** Here's an example of what I'm saying: a Travis CI build that fails and it reports:

> This log is too long to be displayed. Please reduce the verbosity of your build or download the raw log.

![screen shot 2016-03-22 at 19 14 22](https://cloud.githubusercontent.com/assets/5089/13962693/78c19ec4-f062-11e5-82e2-70c48448bf4f.png)

Source: https://travis-ci.org/hanami/assets/jobs/117776354
",jodosha,nex3
2013,2016-03-09 19:00:41,"I have a user who sent me this Sass file, using `*.sass` syntax:



I was very surprised that this file did anything because the multiline comment-start-delimiter `/*` is not paired with a comment-end-delimiter `*/` The example in the Sass docs shows the comment properly closed:

http://sass-lang.com/documentation/file.SASS_REFERENCE.html#comments

Is it the case that in the indented syntax, any line that is indented _more_ than the comment-start-delimiter is considered part of the multiline comment? Can I get the exact rules for multiline comments in the `*.sass` syntax? I have an algorithm that scans for @import statements in these files and ignores those excluded by comments, so I need to know how Sass parses them for the indented syntax. Thanks!
",bdkjones,import
2012,2016-03-08 15:44:29,"@dustindowell22 You can use [Sassdash](https://github.com/davidkpiano/sassdash) if you want that functionality right now, using the [`_(...)` function](http://davidkpiano.github.io/sassdash/sassdoc/index.html#function-_). 

Here's your pseudocode brought to life:



When I talked to @nex3, she told me she envisioned Sass as an imperative language that _creates_ declarative CSS code, instead of a declarative/functional language from the start, which makes sense.
",davidkpiano,nex3
2012,2016-03-08 15:44:29,"@dustindowell22 You can use [Sassdash](https://github.com/davidkpiano/sassdash) if you want that functionality right now, using the [`_(...)` function](http://davidkpiano.github.io/sassdash/sassdoc/index.html#function-_). 

Here's your pseudocode brought to life:



When I talked to @nex3, she told me she envisioned Sass as an imperative language that _creates_ declarative CSS code, instead of a declarative/functional language from the start, which makes sense.
",davidkpiano,dustindowell22
2010,2016-06-02 21:56:26,"I edited the lines I mentioned above. The only problem is that the fix I made makes all indents fixed to one level, so if you nest something like @media queries they will not double indent. Because of this it's more of a palliative, as it works for the majority of the code you'd be writing, but not all.

For the indenting I edited the above line as such:

to_css line 248:
`tab_str = '    ' * (@tabs + node.tabs)`

changed to:
`tab_str = '    '`

I imagine a proper fix would involve making the  (@tabs + node.tabs) work on css levels, and not scss levels.
",Jujucristine,media
2010,2016-06-02 21:56:26,"I edited the lines I mentioned above. The only problem is that the fix I made makes all indents fixed to one level, so if you nest something like @media queries they will not double indent. Because of this it's more of a palliative, as it works for the majority of the code you'd be writing, but not all.

For the indenting I edited the above line as such:

to_css line 248:
`tab_str = '    ' * (@tabs + node.tabs)`

changed to:
`tab_str = '    '`

I imagine a proper fix would involve making the  (@tabs + node.tabs) work on css levels, and not scss levels.
",Jujucristine,tabs
2004,2016-03-01 04:16:20,"What OS are you on? I think the issue is because you are trying to access
it via file://

On Monday, February 29, 2016, DeoThemes notifications@github.com wrote:

> @bergeekzone Hi, thanks for advice, but I've already checked this article
> and tried to follow all steps. But on a step _Map to network resource_
> when I right click on style.scss there are no options to choose file. Here
> is screenshot - http://clip2net.com/s/3uZ2fab
> 
> Maybe the problem can be cuz I'm running file on a local machine and a
> format is file:/// instead of localhost?
> 
> It might be very helpful for a new users to read detailed HOWTO with all
> explanations. I spent about 2-3 days serfing forums and still can't find
> working solution.
> 
> Thanks for your help.
> Best Regards.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/2004#issuecomment-190483385.

## 

Amy Bridges
Owner
P: (404) 487-6003 ext 700
E: amy.bridges@invoate.com
LinkedIn https://www.linkedin.com/in/amy-bridges-ab33b336 | Invoate
http://www.invoate.com | Behance https://www.behance.net/ubergeekzone
",ubergeekzone,bergeekzone
1996,2016-02-24 20:28:36,"@nex3 :+1: on this idea?
",chriseppstein,nex3
1989,2016-02-12 21:31:22,"I have set Vim's `equalprg` for scss files to be:



Which works well for things that look like regular CSS. However, when run it on the following code:



it fails with the following trace:



After thinking about this for a bit, I realized that it probably wasn't detecting the filetype properly (I'm guessing that Vim passes content through via stdin) so it was using the default (which is `css`) and failing because `@include` is not valid CSS. I resolved this by using the `--from` argument:



I don't think there's anything you need to do about this (unless you wanted to make the filetype detection more robust, or perhaps improve error messaging in this case to help people do the right thing), but I figured it would be worth documenting here to help out people who might run into the same issue.
",lencioni,include
1988,2016-02-12 10:24:51,"Hey guys,

is there any way to test @content for any content? like length(@content) ?
",smiLLe,content
1988,2016-02-12 19:43:00,"Maybe `content-exists()`. @nex3 thoughts?
",chriseppstein,nex3
1988,2016-05-16 18:06:55,"I think this function should return the arity of the content block or nil if none given. Right now this would always be zero, but after #871 it could be a positive value. All of which is ""truthy"" so `@if content-given()` can be used without testing for zero.
",chriseppstein,if
1986,2016-02-08 10:08:09,"Based on ""@mixin does-parent-exist"" in sass documentation I created a mixin with this code to generate RTL css:



The scss file looks like this:



and generated this broken RTL output:



but should generate this output:



Is there a way to fix this? e.g. change the mixin code - or is this just a bug? I'm using compass.app that is based on jruby.
",yamlfd,mixin
1983,2016-02-04 01:41:00,"style compressed and his BOM breaks first @font-face rule:
https://i.gyazo.com/075571ab196119ff877f24f9d2c63b33.png
https://i.gyazo.com/7043c4f2f0053a87a42b725e175e8fb9.png
with BOM my first rule with regular font not work
",dartess,font-face
1979,2016-01-29 17:58:20,"Pretty sure this is a duplicate but I can't find it. This is how Sass has worked since before I got here. I don't like it, but changing it is a big deprecation -- though maybe worth doing at 4.0. Maybe @nex3 can weigh in. 

For now, the direct properties of a selector are not split up by child selectors when nesting. If you need to maintain this order, you'll need to repeat the `.photo` selector or toss in a `&` selector like so:


",chriseppstein,nex3
1974,2016-01-21 19:15:25,"Use `@function` for this.


",chriseppstein,function
1970,2016-01-18 17:53:53,"@mgreter Looks like our list parsing code raises the error without letting it fall back to the map's parsing. I don't know whether @nex3 considers this a bug or not.
",chriseppstein,nex3
1963,2016-01-12 00:40:46,"I think the feature would be regarding the ability to parse the grid syntax. Library authors could (maybe?) fallback to string concatenation and unquoting. I'm not very familiar with the grid spec but off the top of my head this gets the job done.



Maybe the point is moot without conditional `@import`s.
",xzyfer,import
1963,2016-01-12 00:47:13,"> Maybe the point is moot without conditional `@import`.

@xzyfer Exactly. All sass files are parsed and there's no way to avoid the syntax error by scripting.
",chriseppstein,import
1960,2016-01-08 18:53:38,"Ah, it was the deprecation warning that @nex3 added recently that is the culprit. Fixed!
",chriseppstein,nex3
1959,2016-01-07 18:40:29,"Using ‚ÄúSass 3.2.12 (Media Mark)‚Äù on Ubuntu 14.04 32 Bits.

Given this:



Expected output should be this:



It is this, instead:



May be an Interesting track to note, is that if I comment‚Äëout the `@extend %ph;` in the second statement, I got this:



The second statement seems to prevent the third statement to be handled as expected.
",Hibou57,extend
1959,2016-01-07 19:37:48,"@Hibou57 That's a fair point. @nex3 did all the extend optimizations so I'll let her respond.
",chriseppstein,nex3
1959,2016-01-07 19:52:06,"I think the issue is that @Hibou57 is treating the placeholder selector as a `@mixin`. Extended selectors should never have a specificity greater than the extending selector, which is why `:hover` is added to `input`, but not `input[type]`, since you can consider `%ph:hover` to have a specificity of `0 2 0`. The automatic insertion of `:hover` is necessary to abide by this rule, and is happenstance in this case (though it is peculiar how Sass decides to add that...)

A potential solution is to either use `@mixin` or to explicitly extend the `:hover` states:


",davidkpiano,mixin
1959,2016-01-08 02:54:19,"I will look at `@mixin` later and will just comment on `@extend`.

> Extended selectors should never have a specificity greater than the extending selector

I solved the issue with a reorganisation based on this (I try to order rules from lower to greater specificity, in CSS, as much as possible). But as you've guessed, I was surprised by `@extend`'s behaviour, as unless I overlooked it, the documentation does not mention this specificity issue, and says this:

> @extend works by inserting the extending selector [‚Ä¶] anywhere in the stylesheet that the extended selector [‚Ä¶] appears.

May be this would be more intuitive if `@extend` was indeed just working like this.

Also, a bit before the documentation says:

> The @extend directive avoids these problems by telling Sass that one selector should inherit the styles of another selector.

And typically, in the computer language world, when a B inherits from an A, this means B is more specific than A (not entirely applicable here, that's just for the big picture).

May be optimisation should be left to another tool, in the UNIX way of ‚Äúdo one thing only, and do it well‚Äù. Or may be an option to disable this optimisation (which is not to me, sorry). If it's in the doc, I may have missed it, as I'm new to Sass. I will search the options list later‚ÄØ‚Ä¶

P.S. There is someone at GitHub, named @extend, who will wonder why xe is mentioned so often here :-D .
",Hibou57,extend
1959,2016-01-08 02:54:19,"I will look at `@mixin` later and will just comment on `@extend`.

> Extended selectors should never have a specificity greater than the extending selector

I solved the issue with a reorganisation based on this (I try to order rules from lower to greater specificity, in CSS, as much as possible). But as you've guessed, I was surprised by `@extend`'s behaviour, as unless I overlooked it, the documentation does not mention this specificity issue, and says this:

> @extend works by inserting the extending selector [‚Ä¶] anywhere in the stylesheet that the extended selector [‚Ä¶] appears.

May be this would be more intuitive if `@extend` was indeed just working like this.

Also, a bit before the documentation says:

> The @extend directive avoids these problems by telling Sass that one selector should inherit the styles of another selector.

And typically, in the computer language world, when a B inherits from an A, this means B is more specific than A (not entirely applicable here, that's just for the big picture).

May be optimisation should be left to another tool, in the UNIX way of ‚Äúdo one thing only, and do it well‚Äù. Or may be an option to disable this optimisation (which is not to me, sorry). If it's in the doc, I may have missed it, as I'm new to Sass. I will search the options list later‚ÄØ‚Ä¶

P.S. There is someone at GitHub, named @extend, who will wonder why xe is mentioned so often here :-D .
",Hibou57,mixin
1959,2016-01-08 17:41:08,"PROTIP: If you backtick `@extend` it doesn't create a mention.
",chriseppstein,extend
1959,2016-01-08 22:22:01,"There are very specific rules for which selectors may and may not be optimized out when resolving `@extend`s, which I [describe in detail here](https://github.com/sass/sass/issues/324#issuecomment-4607184). The second law says that the specificity of the generated selector must be greater than or equal to _the extending selector_ (in this case `input[type]`). This is satisfied by Sass's output: `input[type]` has specificity 11, and so does `input:hover`.
",nex3,extend
1959,2016-01-09 02:53:45,"> If this is in‚Äëdepth details which hardly get a place in the documentation, these details should be transparent (safely ignored), but they are not. So may be that's just too much for a specification.

High-level documentation like the reference can't possibly cover all user-visible behavior and still be usable by ordinary people trying to learn about the language. Detailed documentation about exactly how processes like `@extend` selector trimming work and which specific guarantees they make are the job of the spec.

> The other point is that an optimization is supposed to preserve semantic. This one does not, as it actually change the meaning of the generated CSS (that's how I caught it, wondering what suddenly went wrong while rewriting a big CSS in Sass). So it should not be qualified as an optimization, rather as an Sass specific semantic.

The specific name doesn't really matter. The point is that `@extend` is a Sass construct, and as such it's up to Sass to define exactly what it means. Our definition only guarantees a certain degree of specificity, and so given that guarantee we consider ourselves free to optimize away some intermediate selectors that aren't required to meet it.
",nex3,extend
1957,2016-01-06 18:04:57,"Hi @chriseppstein 

Thanks for your answer

> That is not valid syntax for a media query, so you get an error.

But `b: $x;` is also interpolated, the result is also not valid css syntax and it still works, i.e. it is substituted and nothing fails. Is this interpolation done at a later stage or why is there not error here?

Maybe you could be so kind and give me a hint on how to circumvent the Sass parser here to receive `@media (max-width: <<macro>>)` in the output? Or is this not possible under any circumstances?
",felixhayashi,media
1957,2016-01-06 18:05:51,"@felixhayashi If you are able to format the at-rule after it has been parsed and output by the Sass compiler (which, if you're using macros, it seems like this is feasible for your use-case), you can use custom at-rules to get around Sass' proprietary handling of `@media` at-rules:



Successfully compiles (in Ruby Sass) to:



**EDIT:** You just need to remember to change the `@--media` custom at-rules to normal `@media`.
",davidkpiano,media
1957,2016-01-06 18:31:20,"@felixbuenemann I think you have an old version of node-sass installed. the latest version gives an error on this input.
",chriseppstein,felixbuenemann
1957,2016-01-06 19:11:45,"@felixbuenemann `output.gsub(/-my-macro/,""<<macro>>"")`
",chriseppstein,felixbuenemann
1957,2016-01-06 19:48:11,"> @felixbuenemann output.gsub(/-my-macro/,""<<macro>>"")

@chriseppstein Thanks, but there are quite a lot of different macro expressions in my script and even some other directives that have a comlicated syntax so it would require some complicated regexps and not even sure if that will do it here. I tested @davidkpiano's solution with Ruby Sass `sass-3.4.20.gem` and it does compile with custom at-rules. However `node-sass@3.4.2` fails here again. Should I report this divergence somewhere?
",felixhayashi,felixbuenemann
1957,2016-01-06 20:33:54,"@felixbuenemann you can report bugs for libsass here: https://github.com/sass/libsass/issues
",chriseppstein,felixbuenemann
1956,2016-01-06 14:19:44,"Apologies if this is a duplicate (possibly related to https://github.com/sass/sass/issues/1582 ?), but I'd like to propose a feature to Sass that would make non-nested declaration blocks be treated as a first-class citizen, with the same (or similar) operations as maps. Essentially, declaration blocks could be considered equivalent to flat maps with strings as keys and any valid Sass value type as values.

Here's a simple (slightly contrived) use case:



The **major difference between first-class declaration blocks and `@mixins`** is that the declaration blocks are treated as maps with iterable values, whereas values output by a `@mixin` cannot be manipulated. So, they can be considered constant `@mixin`s whose values can be iterated.

This is especially useful for tasks where the declaration blocks have an unambiguous structure, such as `@keyframe` blocks:



**Result:**



For reference, if I wanted to do that today, I would have to convert each keyframe ruleset to a Sass map value and use a library to get the expected result:


",davidkpiano,mixins
1956,2016-01-06 14:19:44,"Apologies if this is a duplicate (possibly related to https://github.com/sass/sass/issues/1582 ?), but I'd like to propose a feature to Sass that would make non-nested declaration blocks be treated as a first-class citizen, with the same (or similar) operations as maps. Essentially, declaration blocks could be considered equivalent to flat maps with strings as keys and any valid Sass value type as values.

Here's a simple (slightly contrived) use case:



The **major difference between first-class declaration blocks and `@mixins`** is that the declaration blocks are treated as maps with iterable values, whereas values output by a `@mixin` cannot be manipulated. So, they can be considered constant `@mixin`s whose values can be iterated.

This is especially useful for tasks where the declaration blocks have an unambiguous structure, such as `@keyframe` blocks:



**Result:**



For reference, if I wanted to do that today, I would have to convert each keyframe ruleset to a Sass map value and use a library to get the expected result:


",davidkpiano,keyframe
1956,2016-01-06 14:19:44,"Apologies if this is a duplicate (possibly related to https://github.com/sass/sass/issues/1582 ?), but I'd like to propose a feature to Sass that would make non-nested declaration blocks be treated as a first-class citizen, with the same (or similar) operations as maps. Essentially, declaration blocks could be considered equivalent to flat maps with strings as keys and any valid Sass value type as values.

Here's a simple (slightly contrived) use case:



The **major difference between first-class declaration blocks and `@mixins`** is that the declaration blocks are treated as maps with iterable values, whereas values output by a `@mixin` cannot be manipulated. So, they can be considered constant `@mixin`s whose values can be iterated.

This is especially useful for tasks where the declaration blocks have an unambiguous structure, such as `@keyframe` blocks:



**Result:**



For reference, if I wanted to do that today, I would have to convert each keyframe ruleset to a Sass map value and use a library to get the expected result:


",davidkpiano,mixin
1956,2016-01-17 18:49:49,"@chriseppstein Do you think that with adding the simple restriction that properties can not be repeated for declaration blocks assigned to variables, my original proposal can be feasible?

I think it would be valuable since, even today, maps currently _are_ being used as declaration blocks, and the syntax isn't the best, nor is the need to convert the map to a declaration block.

I'm willing to help on this in any way I can.

**EDIT:** I read #1582 a while back and my understanding is that it's trying to solve a problem set in the context of `@mixins`. This proposal is not related to `@mixins` since it will only refer to a single node, which is the map-like declaration block, which would be treated as a first-class value. It's simpler to represent since it does _not_ include selectors.
",davidkpiano,mixins
1954,2016-01-06 19:24:53,"> IMO `sub-1` should be evaluated too.

See #1912.

> The differences between sub-1 and sub-5 seem wrong.

Agree. I don't know why `sub-5` isn't the same output as `sub-1`. Perhaps @nex3 does.
",chriseppstein,nex3
1950,2016-01-05 04:44:33,"@davidkpiano True. Sorry I wasn't more clear.

> As it turns out, in my experimentation, where I was mistaken was that even if there is one selector,& is still a nested list.



_note: selector-parse() isn't required when you're dealing with `&`_
",xzyfer,davidkpiano
1945,2015-12-21 16:33:05,"Hey @pentzzsolt, let's break this down. You currently have:



And later on, you're extending:



So what this means is that:
- `a` is extending `%extend`, which is to say that you are styling `a` as if it matches `%extend`
- `a` must be a general descendant of `form` (child, grandchild, etc.)

But when you extend `%extend`, you have these additional constraints:
- `%extend` is a general descendant of `.error`, meaning...
- `a` must also be a general descendant of `.error`, since it's being styled as if it matches `%extend`.

Therefore, `a` must be a general descendant of both `form` and `.error`. Now, Sass has no way of knowing which one comes first, since a general descendant means that the selector can be a child, grandchild, great-grandchild, etc. of the parent selector (`form` and `.error` in this example). So, with the child analogy, consider these two possibilities:
- `a` is the child of `form` and the grandchild of `.error`, giving you `.error form a`
- `a` is the child of `.error` and the grandchild of `form`, giving you `form .error a`

Both of these match the constraints that _you_ set up, and both of these selectors are valid. Remember: Sass is not a mind reader, so it will output the most feasible/common permutations of selectors.

Now, if you want to avoid this potential selector explosion in the future, avoid the **general descendant combinator** if you can. By having a selector such as `form a`, you're basically saying that you have no idea where `a` is, you just know it's inside a `form` somewhere. You can have stricter constraints (and a much easier time predicting what `@extend` will do) when you use the **direct descendant combinator**, such as `form > a` or `.error > %extend`.

Hope this helps!
",davidkpiano,extend
1943,2015-12-18 22:08:21,"Although on second thoughts, I think that solves a different issue. The beauty of passing multiple blocks is exactly that you aren't constricted to a set of predefined arguments. Unless I'm missing a use case?

By supporting named blocks, a mixin can both render and allow customisation of selectors. At the moment, if a mixin renders more than one selector, the only way to add additional props to additional selectors is by duplicating the selectors outside the mixin (or within the `@content` block).

For example, I can use `@content` in a simple mixin:



But what about:



But with named blocks:


",Undistraction,content
1943,2015-12-18 23:00:32," Thanks. That‚Äôs what I needed. The penny has dropped.

On Fri, 18 Dec 2015 at 22:38 Chris Eppstein notifications@github.com
wrote:

> @Undistraction https://github.com/Undistraction I think you're missing
> something. This exact example would work like so (syntax is all placeholder
> obviously)
> 
> @mixin example {
>     .alpha {
>         @content(alpha);
>     }
> 
> 
> 
> }
> @include example with($slot) {
>   @if $slot == alpha {    /\* Alpha content _/
>   } @else if slot == beta {    /_ Beta content */
>   }
> }
> 
> Granted this is a little more verbose, but this is also a lot more
> powerful than simply allowing names.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1943#issuecomment-165912990.
",Undistraction,if
1943,2015-12-18 23:00:32," Thanks. That‚Äôs what I needed. The penny has dropped.

On Fri, 18 Dec 2015 at 22:38 Chris Eppstein notifications@github.com
wrote:

> @Undistraction https://github.com/Undistraction I think you're missing
> something. This exact example would work like so (syntax is all placeholder
> obviously)
> 
> @mixin example {
>     .alpha {
>         @content(alpha);
>     }
> 
> 
> 
> }
> @include example with($slot) {
>   @if $slot == alpha {    /\* Alpha content _/
>   } @else if slot == beta {    /_ Beta content */
>   }
> }
> 
> Granted this is a little more verbose, but this is also a lot more
> powerful than simply allowing names.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1943#issuecomment-165912990.
",Undistraction,content
1943,2015-12-18 23:00:32," Thanks. That‚Äôs what I needed. The penny has dropped.

On Fri, 18 Dec 2015 at 22:38 Chris Eppstein notifications@github.com
wrote:

> @Undistraction https://github.com/Undistraction I think you're missing
> something. This exact example would work like so (syntax is all placeholder
> obviously)
> 
> @mixin example {
>     .alpha {
>         @content(alpha);
>     }
> 
> 
> 
> }
> @include example with($slot) {
>   @if $slot == alpha {    /\* Alpha content _/
>   } @else if slot == beta {    /_ Beta content */
>   }
> }
> 
> Granted this is a little more verbose, but this is also a lot more
> powerful than simply allowing names.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1943#issuecomment-165912990.
",Undistraction,include
1943,2015-12-18 23:00:32," Thanks. That‚Äôs what I needed. The penny has dropped.

On Fri, 18 Dec 2015 at 22:38 Chris Eppstein notifications@github.com
wrote:

> @Undistraction https://github.com/Undistraction I think you're missing
> something. This exact example would work like so (syntax is all placeholder
> obviously)
> 
> @mixin example {
>     .alpha {
>         @content(alpha);
>     }
> 
> 
> 
> }
> @include example with($slot) {
>   @if $slot == alpha {    /\* Alpha content _/
>   } @else if slot == beta {    /_ Beta content */
>   }
> }
> 
> Granted this is a little more verbose, but this is also a lot more
> powerful than simply allowing names.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1943#issuecomment-165912990.
",Undistraction,mixin
1943,2015-12-18 23:00:32," Thanks. That‚Äôs what I needed. The penny has dropped.

On Fri, 18 Dec 2015 at 22:38 Chris Eppstein notifications@github.com
wrote:

> @Undistraction https://github.com/Undistraction I think you're missing
> something. This exact example would work like so (syntax is all placeholder
> obviously)
> 
> @mixin example {
>     .alpha {
>         @content(alpha);
>     }
> 
> 
> 
> }
> @include example with($slot) {
>   @if $slot == alpha {    /\* Alpha content _/
>   } @else if slot == beta {    /_ Beta content */
>   }
> }
> 
> Granted this is a little more verbose, but this is also a lot more
> powerful than simply allowing names.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1943#issuecomment-165912990.
",Undistraction,else
1939,2015-12-14 23:33:12,"Initially filed by @mgreter on issue #1931:

From: `libsass-closed-issues/issue_550/operator`



Results in


",chriseppstein,mgreter
1934,2015-12-14 08:38:36,"We'd like to use `@extend` and `%placeholder` mechanics to create semantic stylesheet which will look something like that:



It works well until we start using sibling selectors:



This will produce the following CSS: 



Every extended placeholder class bloats into huge number of all possible combinations so that it will generate `button_count ^ 2` total selectors.

Are there any ways to optionally disable such combinations generation for placeholder extended classes?
",artch,extend
1934,2015-12-14 14:19:19,"The `@extend` directive is working as expected here. You're basically saying ""these three classes should be styled as if they were all `%btn`"" and then saying ""whenever any of those `%btn` classes are adjacent to another `%btn` class, give them a `margin-left: 10px`"".

So the problem is that essentially, `.person-edit, .person-create, .person-delete` are all considered the same type of entity, with regard to `%btn`. There are a few ways you can refactor this, by limiting the number of selectors that are extending `%btn`.

Try having a single `.btn` class extend `%btn`, and then in your markup, have both classes: `<button class=""btn person-edit"">` for example. Or you can even do `[class^=""person-""] { @extend %btn; }` if you don't want to add extra classes.
",davidkpiano,extend
1934,2015-12-15 06:10:19,"@chriseppstein let me describe the possible use case: you have to use some SCSS framework. You almost can't change it. In your project you want to use BEM and you want to build semantic naming scheme. I.e. you want to have:



On other page:



Today `item-control` and `project-control` are buttons, tomorrow some of them may be links, etc. There is no chance that `item-control` and `project-control` will be siblings.

Which solution is better here? How it's possible to implement that without `@extend` and to not get a lot of extra CSS?
",andreev-artem,extend
1934,2015-12-15 13:36:53,"@andreev-artem To do that, remove the rule that gives styling to adjacent buttons. That is a constraint that doesn't match your intended constraint.
- `%btn + %btn` says ""**Any** button next to **any** button""
- `.project-control + .project-control` says ""**Only** `.project-control` next to **only** `.project-control`

In this case, it's better (IMO) to have a placeholder selector describing the styling for your intended constraint outside of the context of `%btn`:

**SCSS:**



Generates this **CSS**:



@artch Sass will already output `:matches(...)` selectors correctly, so feel free to use it with `@extend`! :tada: 
",davidkpiano,extend
1934,2015-12-15 15:18:45,"@davidkpiano Yes, but is not supported by SASS yet. This SCSS:



Generates this CSS:



Which is just an overkill, since it is identical to:



It would be great if SASS can handle `@extend` this way.
",artch,extend
1934,2015-12-15 16:47:56,"> It would be great if SASS can handle @extend this way.

Agree. When `:matches` is well supported, it will.
",chriseppstein,extend
1930,2015-12-12 06:00:47,"Hello,

@mixin test($map: $_map_test) {
 // content
}

Did `$_map_test` is same as `$-map-test`?

If yes, i should not use underline?

Thank you so much.
",aboutjquery,mixin
1922,2015-12-03 21:47:55,"@chris-lock To fix, use `@include test('black')`, where `'black'` is a quoted string instead of a color value.
",davidkpiano,include
1919,2015-12-02 17:13:44,"This aims to improve the error message when a file to be imported is not found.

In a project using sass via jekyll we ran into confusion when the sass -> css conversion did not work. After some debugging it was found that the origin was simply a hidden @import (in a file that was itself imported, so not initially visible) so of a file that did not exist, or rather did exist only locally on the designers machine. This was overseen because the file name to be imported was the same as a folder name, misleading the initial debugging effort.

Mentioning where the file is imported would've helped, and this is what this small change does. 

If further work is needed (I was not sure about a test?) please just say so.
",onli,import
1916,2015-12-03 12:10:57,"Valid question. /cc @mgreter @saper. Also seems strange to me. IIRC it's something @mgeter stumbled across in testing with perl-libsass. I'm not convinced there's a valid usecase for this in sass-spec.
",xzyfer,mgeter
1916,2015-12-03 12:10:57,"Valid question. /cc @mgreter @saper. Also seems strange to me. IIRC it's something @mgeter stumbled across in testing with perl-libsass. I'm not convinced there's a valid usecase for this in sass-spec.
",xzyfer,saper
1916,2015-12-03 12:10:57,"Valid question. /cc @mgreter @saper. Also seems strange to me. IIRC it's something @mgeter stumbled across in testing with perl-libsass. I'm not convinced there's a valid usecase for this in sass-spec.
",xzyfer,mgreter
1916,2015-12-14 23:50:45,"@xzyfer @mgreter @saper I'd like to close this or get to some sort of actionable resolution. 
",chriseppstein,saper
1916,2015-12-22 16:27:38,"@saper has chosen to ![ignore this issue](https://github.com/sass/sass-spec/issues/627#issuecomment-166024933) for now. Should this issue be closed?
",gytdau,saper
1912,2015-11-24 18:25:50,"@cimmanon and I was just about to point out what @darvishzadeh just wrote about the counter-intuitive-ness of it. Syntactically, I don't think you should need the parenthesis.
",akaScooter,darvishzadeh
1912,2015-12-01 21:38:47,"@nex3 Thoughts on changing the parsing of binary operators to require a surrounding space and forcing unary operands to never allow a space at 4.0? We can have sass-convert take care of the expressions and re-parenthesize them during the upgrade process.
",chriseppstein,nex3
1910,2015-11-23 19:19:47,"While working on @nex3's comments on #1875, switching to `assert_parses_with_mapping`, it was super hard to diagnose the following error:



This comes from [`assert_ranges_equal`](https://github.com/sass/sass/blob/stable/test/sass/source_map_test.rb#L922..L926).
",srawlins,nex3
1909,2016-03-17 20:28:02,"@tabatkins are there colors expressible in hsl() that the browser will display that cannot be expressed in rgb? Trying to decide if this is a fundamental flaw in Sass's treatment of hsl or just a small bug in our hsl -> rgb algorithm.
",chriseppstein,tabatkins
1907,2015-11-20 14:38:46,"With  SASS parser, a variable inside the parentheses of a media query `@media( * )` remains textual instead of being substituted with its value.
When there is a space between `@media` and `(` this does not happen.

Minimal steps to reproduce:



Strangely, with **scss** syntax this does not happen.

I'm using `Sass::VERSION == ""3.4.19 (Selective Steve)""`.

As a workaround, I'm now using **libsass** which is not affected.
",caesarsol,media
1905,2015-11-18 18:20:06,"Hi,

is it possible to use @import with a path like this `@import modules/*/*`?
The file/directory structure would be



I tried it and the result is: `error ./main.sass (Line 1): File to import not found or unreadable: modules/*/*.`

Is there a way to accomplish this? I can not find it documented and need a hint.
My goal is to have a folder (modules) and to put reusable sass snippets (example, exmaple) in there. With the placeholder in the @import method the placed modules would then automatically be loaded.
",sthag,import
1904,2015-11-15 22:44:17,"Now, map-merge, map-get, and map-has-key all accept various forms of nested Map logic as per @nex3's specifications in #1739, with the addition of a nested compatible map-has-key.

Removed the weird commit that snuck in to the previous request and hopefully bought us Ruby 1.8.7 compatibility again.
",hcatlin,nex3
1903,2015-11-15 22:15:13,"My thoughts are that we should take the functions as they are, especially the prefixed ones, and in prep for `4.0`, we can reorganize stuff so that it makes more sense and will make it so that @nex3 can focus on the important parts of the module system.

My proposal is as follows:
- Break up the functions into the groups that will (eventually) become modules (str-, map-)
- Create prefixed versions of all (even legacy) functions and use those as the current recommended
- Allow for simple deprecation warnings of ""str-"" prefixed (and non-prefixed legacy) functions in `4.0` itself
- Change the way we use `declare` to make deprecation warnings easier, and to build a logical grouping around what will become standard lib modules later.

Basically, @nex3, would you be up for letting me dig into the functions and function tests and start getting them ready for the work that you'll be doing with 4.0?
",hcatlin,nex3
1896,2015-11-13 17:39:33,"Now, map-merge, map-get, and map-has-key all accept various forms of nested Map logic as per @nex3's specifications in #1739, with the addition of a nested compatible map-has-key.
",hcatlin,nex3
1893,2015-11-12 20:01:37,"# Application Scenario

External Vendor css files that are loaded using ``@import` is too slow compared to embedding (copy/paste). I realise it is a planned feature.
# Application Solution

Embed those specific notorious css files in the master.sass file
# Noted concerns and alternates
- Admins didn't want to use `!force` in the past
- Admins wanted to use @use syntax, which I am not sure what it is or where it is
- I like @chriseppstein extension and liked it for a while now. Just looking at web as such there are already technologies (UI applications) for technologies (Web) for technologies (CSS) for technologies (SASS). I pity the younger kids who have to learn all this and find a full-stack job knowing all the 100 languages and frameworks.
# Request
- What syntax can we use? `@include ""folder/file.css""`? Since include seems to be popular term in several languages/frameworks ng-include, #include and so on.
- What is a simple clean built-in solution in SASS?
",abibell,include
1893,2015-11-12 20:01:37,"# Application Scenario

External Vendor css files that are loaded using ``@import` is too slow compared to embedding (copy/paste). I realise it is a planned feature.
# Application Solution

Embed those specific notorious css files in the master.sass file
# Noted concerns and alternates
- Admins didn't want to use `!force` in the past
- Admins wanted to use @use syntax, which I am not sure what it is or where it is
- I like @chriseppstein extension and liked it for a while now. Just looking at web as such there are already technologies (UI applications) for technologies (Web) for technologies (CSS) for technologies (SASS). I pity the younger kids who have to learn all this and find a full-stack job knowing all the 100 languages and frameworks.
# Request
- What syntax can we use? `@include ""folder/file.css""`? Since include seems to be popular term in several languages/frameworks ng-include, #include and so on.
- What is a simple clean built-in solution in SASS?
",abibell,use
1893,2015-11-12 20:01:37,"# Application Scenario

External Vendor css files that are loaded using ``@import` is too slow compared to embedding (copy/paste). I realise it is a planned feature.
# Application Solution

Embed those specific notorious css files in the master.sass file
# Noted concerns and alternates
- Admins didn't want to use `!force` in the past
- Admins wanted to use @use syntax, which I am not sure what it is or where it is
- I like @chriseppstein extension and liked it for a while now. Just looking at web as such there are already technologies (UI applications) for technologies (Web) for technologies (CSS) for technologies (SASS). I pity the younger kids who have to learn all this and find a full-stack job knowing all the 100 languages and frameworks.
# Request
- What syntax can we use? `@include ""folder/file.css""`? Since include seems to be popular term in several languages/frameworks ng-include, #include and so on.
- What is a simple clean built-in solution in SASS?
",abibell,chriseppstein
1893,2015-11-12 20:01:37,"# Application Scenario

External Vendor css files that are loaded using ``@import` is too slow compared to embedding (copy/paste). I realise it is a planned feature.
# Application Solution

Embed those specific notorious css files in the master.sass file
# Noted concerns and alternates
- Admins didn't want to use `!force` in the past
- Admins wanted to use @use syntax, which I am not sure what it is or where it is
- I like @chriseppstein extension and liked it for a while now. Just looking at web as such there are already technologies (UI applications) for technologies (Web) for technologies (CSS) for technologies (SASS). I pity the younger kids who have to learn all this and find a full-stack job knowing all the 100 languages and frameworks.
# Request
- What syntax can we use? `@include ""folder/file.css""`? Since include seems to be popular term in several languages/frameworks ng-include, #include and so on.
- What is a simple clean built-in solution in SASS?
",abibell,import
1891,2015-11-11 20:11:03,"I'm starting a new thread for this request, because while it's a solution to #1122, it's not the same as the title of that issue.

I propose that we treat precision like we do units. Set Sass::Script::Value to have precision not just defined as a class variable, but instead an instance variable. By default, we set it to whatever the default is. If you want to use a higher precision (or control it in your library/module), you can modify it with a function call. The left-hand value in any operation is the one that determines the output precision.

Adding two functions:

1) `value-precision($number)` which returns the current precision of the number
2) `value-set-precision($number)` returns a new copy of `$number` with a new precision set

We could also drop the `value-` prefix or use something else, if it seems more elegant. To work with future modules, I'd suggest whatever is on the left hand side would be the standard library name for these kinds of functions. Maybe `numeric` or `format`?

Here's some example usage.



I think this is much better way to deal with the problem... each library can make it's own call about aesthetics. The function names are longer than normal people would want to write all the time (a concern @nex3 brought up in #1122) and I think would cover those cases where we _know_ precision isn't set.

This shouldn't break any existing code. It has almost no side effects. It would solve the issues these users are highlighting. 
",hcatlin,nex3
1891,2015-11-12 22:34:12,"I don't understand why we are revisiting this without any new ideas being proposed except a different name for a function that @nex3 rejected for grounds that would still apply here as well.
",chriseppstein,nex3
1888,2015-11-09 20:27:36,"I know this issue has been discussed before, wrt to dynamically being able to `@import` with globs, but I feel like it's time to revisit with Sass 4.0, and Sass now being a much more integral part of a lot of major, complex web build systems.

I propose that we allow for a standard library `fs-ls($dir)`  `file-ls($dir)` or  `$fs.ls($dir)` (modules!) function, that lists out the contents of the directory, using naive UTF-8 byte-value sorting, and optionally takes a second argument, that is either a string representing an allowed file extension, or a list of allowed extensions.

An example usage:



Would be equivalent to:



Note: Obviously, the string manipulation part isn't great here, but that's also something we can work on elsewhere...

Note: This proposal would _not_ allow use with `@import` out of the box. I'd later perhaps propose that it's a special case we could handle if all of the arguments were static, but again... not included here.
",hcatlin,import
1888,2015-11-12 22:57:16,"The function names and stubs look good, and seem to be pretty similar.

Obviously, you are using the `@import ""fs(dir)"";` because that's the only real hook you have in the current Sass syntax, but I think we can agree that wouldn't be the form we'd want this to take.

Also, I really, really want to start thinking about how to form these utilities into standard-library modules that can be optionally included (or, in the case of fs, disallow it in many instances).

Hence, translate these into `$fs.exists($dir)` from `fs-exists($dir)`... I think this is something we could do easily across the board as equivalent functions.

@nex3 are you willing to consider revisiting our relationship to the file system?
",hcatlin,nex3
1888,2015-11-12 22:57:16,"The function names and stubs look good, and seem to be pretty similar.

Obviously, you are using the `@import ""fs(dir)"";` because that's the only real hook you have in the current Sass syntax, but I think we can agree that wouldn't be the form we'd want this to take.

Also, I really, really want to start thinking about how to form these utilities into standard-library modules that can be optionally included (or, in the case of fs, disallow it in many instances).

Hence, translate these into `$fs.exists($dir)` from `fs-exists($dir)`... I think this is something we could do easily across the board as equivalent functions.

@nex3 are you willing to consider revisiting our relationship to the file system?
",hcatlin,import
1887,2015-11-09 14:19:30,"You would want to `@extend .site-nav_link:hover` here.
",davidkpiano,extend
1885,2015-11-05 19:01:54,"Hi there,

I found out a bug that when you put your `%placeholder` inside a css selector, parent selector `&` duplicates the parent selector. I feel is a bug for both compiling wrongly because of a non-rendering class and because there's no restriction stated @ [sass](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_) [docs](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders) for where to place them.

Given this following example:



That compiles correctly into:



[jsFiddle for correct compile](http://jsfiddle.net/RaphaelDDL/woqoh180/)
## 

But when the `%placeholder` is placed inside the selector (`body` in this case):



The result is that & duplicates the parent selector:



[jsFiddle for incorrect compile](http://jsfiddle.net/RaphaelDDL/woqoh180/1/)
## 

This happens to any selector (element, id, class). The 'fix' as for now is to keep placeholders outside selectors, but I wanted to put inside of parent selector as the placeholder would be `@extend`ed exclusively by classes inside that parent (`body` in this example).

Reproducible in latest stable: `Sass 3.4.19 (Selective Steve)` with `sass test.scss test.css`.
Was reproducible on 3.2.x too (the version I was when I noticed this).
## 

**Edit:**

Also another issue with placeholders. Considering the first example, where the `&.brandColor` is an inner rule, shouldn't the compiled version be _after_ the `body` one, not before?

See [this jsFiddle](http://jsfiddle.net/RaphaelDDL/woqoh180/2/). If the placeholder is after, then it compiles following the correct flow (parent then inner rules).
## 

Best Regards,
RaphaelDDL
",RaphaelDDL,extend
1885,2015-11-05 19:17:09,"This is not a bug. It is working as intended.

>  I wanted to put inside of parent selector as the placeholder would be @extended exclusively by classes inside that parent

Keeping the base selector outside of the scoped selector is the right thing. You accomplish your goal by only extending the base selector in your scoped context.
",chriseppstein,extended
1885,2015-11-10 20:35:39,"@chriseppstein Yup, I did (I even linked it on first post).

I've re-read it over and over but I couldn't make the link that `#id { %placeholder {} }` would be the same as `#id %placeholder {}`. For me, they are two different scenarios from what I would've call a 'placeholder for replace' and a 'truly placeholder' (I'll explain below). 

Looking at [the example](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholders), it shows an use that it works as a ""placeholder for replace"" for the class you are extending it from. So if I do the placeholder as part of a CSS selector (say `#id %placeholder {}`), then when I do `.whatever { @extend %placeholder; }`, I should expect my class to ""replace"" the placeholder part, the same way it would work with regex `()` matchers which then you replace/reefer the parts with `$n`. Thus resulting `#id .whatever {}`.

But I thought that, without being part of a CSS selector - simply a ""truly placeholder"" class -, wouldn't affect the outcome. [Here](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_) there's this quote:

> On their own, without any use of @extend, rulesets that use placeholder selectors will not be rendered to CSS.

From that I assumed they wouldn't do anything nor should have selector ""scope"" because they are ""on their own"", that is, simply `%placeholder` independent of position.

But I could truly understand after reading nex3's explanation in #1172. I realized that what I thought ""without being part of a CSS selector"" is utterly wrong. When we do 
`#id { %placeholder {} }` we are indeed making it as part of the CSS selector, using the nesting provided by sass engine.. Therefore it is indeed the same as `#id %placeholder {}`.

Not sure if it's my own problem, since my native language isn't English. But I feel (less) dumb knowing I wasn't the only person that thought the way I thought lol. Anyway, deeply sorry if I didn't make any sense..

Thank you for your time reading through this.
And thank you again, this time for Compass lol :)
",RaphaelDDL,extend
1883,2015-11-04 00:47:09,"This catched my eye when I tried to re-implement the epsilon rounding by ruby sass. I hope I can illustrate what I mean by showing an example:

`# cat test.scss`



`# sass test.scss --precision=5`



`# sass test.scss --precision=6`



IMO it should not round up in the second case for `b`, since I explicitly requested a precision of 6 digits. Given the final output for `a`, this feels unintuitive if not even wrong, but not sure if this is intended?

As a side note, I also see something related in error messages and other places (AFAIR `@debug`).


",mgreter,debug
1872,2015-10-28 02:03:09,"I'm getting incompletely generated documentation.

I did the usual:



And I see a lot of errors, and the documentation seems in complete (e.g. the sidebar TOC on the main page only has about 3 top level items in it).

I've attached all the errors. Beyond my skills or time to fix them, but _hope someone has a workaround or a simple fix._  

Hmmm. Don't have permission to attach, so I guess I'll just paste the whole thing here:



 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Malformed HTML starting at ""<SASS_CHECKOUT_DIRECTORY>\n$ bundle\n$ bundle exec sass ...\n$ bundle exec scss ...\n$ bundle exec sass-convert ...""
| ---------------------------------------------------------------------------
| 
| >$ cd <SASS_CHECKOUT_DIRECTORY>
| >$ bundle
| >$ bundle exec sass ...
| >$ bundle exec scss ...
| >$ bundle exec sass-convert ...
| 
| At line 192
|       text     |$ bundle exec sass ...|
|       text     |$ bundle exec scss ...|
|       text     |$ bundle exec sass-convert ...|
|       text --> |N$ cd <SASS_CHECKOUT_DIRECTORY>N$ bundleN$ bundle exec sass ...N$ bundle
| ---------|------------------------------------------------------------------
|          +--- Byte 9
| Shown bytes [0 to 75] of 120:
| >|
|      empty     ||
|    header3     |## Authors|
|      empty     ||
| 
| 
| Elements read in span: 
|  -md_entity(""ldquo"")
| Current string: 
|   "" cd ""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:504:in `read_inline_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:115:in `read_span'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:14:in `parse_span'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_block.rb:287:in `read_paragraph'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Maruku cannot parse this block of HTML/XML:
| |<SASS_CHECKOUT_DIRECTORY>
| |$ bundle
| |$ bundle exec sass ...
| |$ bundle exec scss ...
| |$ bundle exec sass-convert ...
| Missing end tag for 'SASS_CHECKOUT_DIRECTORY' (got ""html"")
| Line: 8
| Position: 270
| Last 80 unconsumed characters:
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/helpers.rb:72:in `rescue in md_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/helpers.rb:67:in `md_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:513:in `read_inline_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:115:in `read_span'
\___________________________________________________________________________

Wrapping bad html in a PRE with class 'markdown-html-error'
|<SASS_CHECKOUT_DIRECTORY>
|$ bundle
|$ bundle exec sass ...
|$ bundle exec scss ...
|$ bundle exec sass-convert ...

 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Fixnum.round"" for md_link(""Fixnum.round"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Fixnum.round"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""path"" for md_link(""path"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""path"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Fixnum.round"" for md_link(""Fixnum.round"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Fixnum.round"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""$end-at"" for md_link(""$end-at"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""$end-at"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""$limit"" for md_link(""$limit"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""$limit"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""sass_file, css_file, sourcemap_file"" for md_link(""sass_file, css_file, sourcemap_file"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""sass_file, css_file, sourcemap_file"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#resolved_rule}
| is referring to. The element before is a String,
| the element after is a String.
|   before: "" and ""
|   after: "" will automatically be set to ""
| 
| ---------------------------------------------------------------------------
| oN`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.EOF
| ---------------------------------------------------------------------------|
|                                                                            +--- Byte 189
| Shown bytes [114 to 75] of 189:
| >This will be nil if the directive didn't have a query. In this
| >case, {#resolved\_type} will automatically be set to
| >`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.
| 
| At line 9
|       text     |This will be nil if the directive didn't have a query. In this|
|       text     |case, {#resolved\_type} will automatically be set to|
|       text     |`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.|
| 
| 
| Elements read in span: 
|  -""This will be nil if the directive didn""
|  -md_entity(""rsquo"")
|  -""t have a query. In this case, ""
|  -md_el(:ald, [], {:ald_id=>""`"", :ald=>[[:ref, ""esolved_type""]]})
|  -"" will automatically be set to ""
|  -md_code("":without"")
|  -"" and ""
|  -md_ial([[:id, ""resolved_rule""]])
|  -"" will automatically be set to ""
|  -md_code(""[\""rule\""]"")
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Map"" for md_link(""Map"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Map"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""List"" for md_link(""List"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""List"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#visit_children}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""Like ""
|   after: "", but doesn""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#parent}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""t set ""
|   after: "".""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#visit_children}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""Like ""
|   after: "", but doesn""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#parent}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""t set ""
|   after: "".""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Sass::Tree::Node"" for md_link(""Sass::Tree::Node"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Sass::Tree::Node"".

[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 493
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 714
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 791
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 854
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 1005
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 1073
[warn]: Unknown tag @comment in file `lib/sass/version.rb` near line 47
[warn]: @param tag has unknown parameter name: name 
    in file `lib/sass/selector.rb' near line 37
[warn]: Unknown tag @comment in file `lib/sass/selector.rb` near line 301
[warn]: Unknown tag @comment in file `lib/sass/source/map.rb` near line 89
[warn]: Unknown tag @comment in file `lib/sass/scss/parser.rb` near line 26
[warn]: Unknown tag @comment in file `lib/sass/exec/sass_scss.rb` near line 261
[warn]: Unknown tag @comment in file `lib/sass/exec/sass_scss.rb` near line 386
[warn]: @param tag has unknown parameter name: template 
    in file `lib/sass/tree/root_node.rb' near line 8
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 359
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 359
[warn]: @param tag has unknown parameter name: function_name 
    in file `lib/sass/script/functions.rb' near line 603
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1125
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1198
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1267
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 2671
[warn]: Unknown tag @options in file `lib/sass/script/tree/node.rb` near line 70
[warn]: @param tag has unknown parameter name: cseq 
    in file `lib/sass/selector/sequence.rb' near line 155
[warn]: Unknown tag @retur in file `lib/sass/selector/sequence.rb` near line 185
[warn]: Unknown tag @comment in file `lib/sass/selector/sequence.rb` near line 342
[warn]: Unknown tag @comment
[warn]: @param tag has unknown parameter name: options 
    in file `lib/sass/script/value/base.rb' near line 32
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 79
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 126
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 135
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 144
[warn]: Unknown tag @options in file `lib/sass/script/value/base.rb` near line 218
[warn]: Unknown tag @options in file `lib/sass/script/value/base.rb` near line 218
[warn]: @param tag has unknown parameter name: filename 
    in file `lib/sass/scss/static_parser.rb' near line 18
[warn]: Unknown tag @comment in file `lib/sass/scss/static_parser.rb` near line 56
[warn]: Unknown tag @options in file `lib/sass/script/value/string.rb` near line 38
[warn]: Unknown tag @options in file `lib/sass/script/value/string.rb` near line 38
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 175
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 249
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 279
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 377
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 136
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 161
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 182
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/perform.rb` near line 14
[warn]: @param tag has unknown parameter name: original 
    in file `lib/sass/selector/simple_sequence.rb' near line 157
[warn]: Unknown tag @comment in file `lib/sass/script/tree/interpolation.rb` near line 41
[warn]: In file `lib/sass/util.rb':16: Cannot resolve link to #check_encoding from text:
[warn]: ...{#check_encoding}...
[warn]: In file `lib/sass/util.rb':847: Cannot resolve link to #check_encoding from text:
[warn]: ...{#check_encoding}...
[warn]: In file `lib/sass/util.rb':354: Cannot resolve link to Array.max from text:
[warn]: ...{Array.max}...
[warn]: In file `lib/sass/util.rb':360: Cannot resolve link to Array.min from text:
[warn]: ...{Array.min}...
[warn]: In file `lib/sass/script/functions.rb':226: Cannot resolve link to #set-nth from text:
[warn]: ...{#set-nth set-nth($list, $n, $value)}...
[warn]: In file `lib/sass/util.rb':1192: Cannot resolve link to #def_static_method from text:
[warn]: ...{#def_static_method}...
[warn]: In file `lib/sass/tree/node.rb':30: Cannot resolve link to #to_s from text:
[warn]: ...{#to_s}...
[warn]: In file `lib/sass/tree/node.rb':146: Cannot resolve link to #to_s from text:
[warn]: ...{#to_s}...
[warn]: In file `lib/sass/environment.rb':84: Cannot resolve link to #parent from text:
[warn]: ...{#parent}...
[warn]: In file `lib/sass/selector/simple.rb':45: Cannot resolve link to #to_a from text:
[warn]: ...{#to_a}...
[warn]: In file `lib/sass/selector/simple.rb':34: Cannot resolve link to #to_a from text:
[warn]: ...{#to_a}...
[warn]: In file `lib/sass/selector/simple.rb':56: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/selector/pseudo.rb':4: Cannot resolve link to #new_selector from text:
[warn]: ...{#new_selector}...
[warn]: In file `lib/sass/selector/pseudo.rb':52: Cannot resolve link to #new_selector from text:
[warn]: ...{#new_selector}...
[warn]: In file `lib/sass/script/functions.rb':495: Cannot resolve link to Environment#caller from text:
[warn]: ...{Environment#caller}...
[warn]: In file `lib/sass/selector/sequence.rb':127: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/tree/visitors/cssize.rb':350: Cannot resolve link to #pop from text:
[warn]: ...{#pop}...
[warn]: In file `lib/sass/selector/comma_sequence.rb':126: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/selector/simple_sequence.rb':225: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
Files:         127
Modules:        32 (    8 undocumented)
Classes:       128 (    9 undocumented)
Constants:       4 (    0 undocumented)
Methods:      1399 (  216 undocumented)
 85.09% documented

",JeNeSuisPasDave,comment
1872,2015-10-28 02:03:09,"I'm getting incompletely generated documentation.

I did the usual:



And I see a lot of errors, and the documentation seems in complete (e.g. the sidebar TOC on the main page only has about 3 top level items in it).

I've attached all the errors. Beyond my skills or time to fix them, but _hope someone has a workaround or a simple fix._  

Hmmm. Don't have permission to attach, so I guess I'll just paste the whole thing here:



 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Malformed HTML starting at ""<SASS_CHECKOUT_DIRECTORY>\n$ bundle\n$ bundle exec sass ...\n$ bundle exec scss ...\n$ bundle exec sass-convert ...""
| ---------------------------------------------------------------------------
| 
| >$ cd <SASS_CHECKOUT_DIRECTORY>
| >$ bundle
| >$ bundle exec sass ...
| >$ bundle exec scss ...
| >$ bundle exec sass-convert ...
| 
| At line 192
|       text     |$ bundle exec sass ...|
|       text     |$ bundle exec scss ...|
|       text     |$ bundle exec sass-convert ...|
|       text --> |N$ cd <SASS_CHECKOUT_DIRECTORY>N$ bundleN$ bundle exec sass ...N$ bundle
| ---------|------------------------------------------------------------------
|          +--- Byte 9
| Shown bytes [0 to 75] of 120:
| >|
|      empty     ||
|    header3     |## Authors|
|      empty     ||
| 
| 
| Elements read in span: 
|  -md_entity(""ldquo"")
| Current string: 
|   "" cd ""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:504:in `read_inline_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:115:in `read_span'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:14:in `parse_span'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_block.rb:287:in `read_paragraph'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Maruku cannot parse this block of HTML/XML:
| |<SASS_CHECKOUT_DIRECTORY>
| |$ bundle
| |$ bundle exec sass ...
| |$ bundle exec scss ...
| |$ bundle exec sass-convert ...
| Missing end tag for 'SASS_CHECKOUT_DIRECTORY' (got ""html"")
| Line: 8
| Position: 270
| Last 80 unconsumed characters:
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/helpers.rb:72:in `rescue in md_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/helpers.rb:67:in `md_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:513:in `read_inline_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:115:in `read_span'
\___________________________________________________________________________

Wrapping bad html in a PRE with class 'markdown-html-error'
|<SASS_CHECKOUT_DIRECTORY>
|$ bundle
|$ bundle exec sass ...
|$ bundle exec scss ...
|$ bundle exec sass-convert ...

 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Fixnum.round"" for md_link(""Fixnum.round"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Fixnum.round"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""path"" for md_link(""path"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""path"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Fixnum.round"" for md_link(""Fixnum.round"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Fixnum.round"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""$end-at"" for md_link(""$end-at"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""$end-at"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""$limit"" for md_link(""$limit"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""$limit"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""sass_file, css_file, sourcemap_file"" for md_link(""sass_file, css_file, sourcemap_file"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""sass_file, css_file, sourcemap_file"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#resolved_rule}
| is referring to. The element before is a String,
| the element after is a String.
|   before: "" and ""
|   after: "" will automatically be set to ""
| 
| ---------------------------------------------------------------------------
| oN`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.EOF
| ---------------------------------------------------------------------------|
|                                                                            +--- Byte 189
| Shown bytes [114 to 75] of 189:
| >This will be nil if the directive didn't have a query. In this
| >case, {#resolved\_type} will automatically be set to
| >`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.
| 
| At line 9
|       text     |This will be nil if the directive didn't have a query. In this|
|       text     |case, {#resolved\_type} will automatically be set to|
|       text     |`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.|
| 
| 
| Elements read in span: 
|  -""This will be nil if the directive didn""
|  -md_entity(""rsquo"")
|  -""t have a query. In this case, ""
|  -md_el(:ald, [], {:ald_id=>""`"", :ald=>[[:ref, ""esolved_type""]]})
|  -"" will automatically be set to ""
|  -md_code("":without"")
|  -"" and ""
|  -md_ial([[:id, ""resolved_rule""]])
|  -"" will automatically be set to ""
|  -md_code(""[\""rule\""]"")
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Map"" for md_link(""Map"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Map"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""List"" for md_link(""List"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""List"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#visit_children}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""Like ""
|   after: "", but doesn""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#parent}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""t set ""
|   after: "".""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#visit_children}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""Like ""
|   after: "", but doesn""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#parent}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""t set ""
|   after: "".""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Sass::Tree::Node"" for md_link(""Sass::Tree::Node"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Sass::Tree::Node"".

[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 493
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 714
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 791
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 854
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 1005
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 1073
[warn]: Unknown tag @comment in file `lib/sass/version.rb` near line 47
[warn]: @param tag has unknown parameter name: name 
    in file `lib/sass/selector.rb' near line 37
[warn]: Unknown tag @comment in file `lib/sass/selector.rb` near line 301
[warn]: Unknown tag @comment in file `lib/sass/source/map.rb` near line 89
[warn]: Unknown tag @comment in file `lib/sass/scss/parser.rb` near line 26
[warn]: Unknown tag @comment in file `lib/sass/exec/sass_scss.rb` near line 261
[warn]: Unknown tag @comment in file `lib/sass/exec/sass_scss.rb` near line 386
[warn]: @param tag has unknown parameter name: template 
    in file `lib/sass/tree/root_node.rb' near line 8
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 359
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 359
[warn]: @param tag has unknown parameter name: function_name 
    in file `lib/sass/script/functions.rb' near line 603
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1125
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1198
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1267
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 2671
[warn]: Unknown tag @options in file `lib/sass/script/tree/node.rb` near line 70
[warn]: @param tag has unknown parameter name: cseq 
    in file `lib/sass/selector/sequence.rb' near line 155
[warn]: Unknown tag @retur in file `lib/sass/selector/sequence.rb` near line 185
[warn]: Unknown tag @comment in file `lib/sass/selector/sequence.rb` near line 342
[warn]: Unknown tag @comment
[warn]: @param tag has unknown parameter name: options 
    in file `lib/sass/script/value/base.rb' near line 32
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 79
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 126
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 135
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 144
[warn]: Unknown tag @options in file `lib/sass/script/value/base.rb` near line 218
[warn]: Unknown tag @options in file `lib/sass/script/value/base.rb` near line 218
[warn]: @param tag has unknown parameter name: filename 
    in file `lib/sass/scss/static_parser.rb' near line 18
[warn]: Unknown tag @comment in file `lib/sass/scss/static_parser.rb` near line 56
[warn]: Unknown tag @options in file `lib/sass/script/value/string.rb` near line 38
[warn]: Unknown tag @options in file `lib/sass/script/value/string.rb` near line 38
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 175
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 249
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 279
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 377
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 136
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 161
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 182
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/perform.rb` near line 14
[warn]: @param tag has unknown parameter name: original 
    in file `lib/sass/selector/simple_sequence.rb' near line 157
[warn]: Unknown tag @comment in file `lib/sass/script/tree/interpolation.rb` near line 41
[warn]: In file `lib/sass/util.rb':16: Cannot resolve link to #check_encoding from text:
[warn]: ...{#check_encoding}...
[warn]: In file `lib/sass/util.rb':847: Cannot resolve link to #check_encoding from text:
[warn]: ...{#check_encoding}...
[warn]: In file `lib/sass/util.rb':354: Cannot resolve link to Array.max from text:
[warn]: ...{Array.max}...
[warn]: In file `lib/sass/util.rb':360: Cannot resolve link to Array.min from text:
[warn]: ...{Array.min}...
[warn]: In file `lib/sass/script/functions.rb':226: Cannot resolve link to #set-nth from text:
[warn]: ...{#set-nth set-nth($list, $n, $value)}...
[warn]: In file `lib/sass/util.rb':1192: Cannot resolve link to #def_static_method from text:
[warn]: ...{#def_static_method}...
[warn]: In file `lib/sass/tree/node.rb':30: Cannot resolve link to #to_s from text:
[warn]: ...{#to_s}...
[warn]: In file `lib/sass/tree/node.rb':146: Cannot resolve link to #to_s from text:
[warn]: ...{#to_s}...
[warn]: In file `lib/sass/environment.rb':84: Cannot resolve link to #parent from text:
[warn]: ...{#parent}...
[warn]: In file `lib/sass/selector/simple.rb':45: Cannot resolve link to #to_a from text:
[warn]: ...{#to_a}...
[warn]: In file `lib/sass/selector/simple.rb':34: Cannot resolve link to #to_a from text:
[warn]: ...{#to_a}...
[warn]: In file `lib/sass/selector/simple.rb':56: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/selector/pseudo.rb':4: Cannot resolve link to #new_selector from text:
[warn]: ...{#new_selector}...
[warn]: In file `lib/sass/selector/pseudo.rb':52: Cannot resolve link to #new_selector from text:
[warn]: ...{#new_selector}...
[warn]: In file `lib/sass/script/functions.rb':495: Cannot resolve link to Environment#caller from text:
[warn]: ...{Environment#caller}...
[warn]: In file `lib/sass/selector/sequence.rb':127: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/tree/visitors/cssize.rb':350: Cannot resolve link to #pop from text:
[warn]: ...{#pop}...
[warn]: In file `lib/sass/selector/comma_sequence.rb':126: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/selector/simple_sequence.rb':225: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
Files:         127
Modules:        32 (    8 undocumented)
Classes:       128 (    9 undocumented)
Constants:       4 (    0 undocumented)
Methods:      1399 (  216 undocumented)
 85.09% documented

",JeNeSuisPasDave,throw
1872,2015-10-28 02:03:09,"I'm getting incompletely generated documentation.

I did the usual:



And I see a lot of errors, and the documentation seems in complete (e.g. the sidebar TOC on the main page only has about 3 top level items in it).

I've attached all the errors. Beyond my skills or time to fix them, but _hope someone has a workaround or a simple fix._  

Hmmm. Don't have permission to attach, so I guess I'll just paste the whole thing here:



 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Malformed HTML starting at ""<SASS_CHECKOUT_DIRECTORY>\n$ bundle\n$ bundle exec sass ...\n$ bundle exec scss ...\n$ bundle exec sass-convert ...""
| ---------------------------------------------------------------------------
| 
| >$ cd <SASS_CHECKOUT_DIRECTORY>
| >$ bundle
| >$ bundle exec sass ...
| >$ bundle exec scss ...
| >$ bundle exec sass-convert ...
| 
| At line 192
|       text     |$ bundle exec sass ...|
|       text     |$ bundle exec scss ...|
|       text     |$ bundle exec sass-convert ...|
|       text --> |N$ cd <SASS_CHECKOUT_DIRECTORY>N$ bundleN$ bundle exec sass ...N$ bundle
| ---------|------------------------------------------------------------------
|          +--- Byte 9
| Shown bytes [0 to 75] of 120:
| >|
|      empty     ||
|    header3     |## Authors|
|      empty     ||
| 
| 
| Elements read in span: 
|  -md_entity(""ldquo"")
| Current string: 
|   "" cd ""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:504:in `read_inline_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:115:in `read_span'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:14:in `parse_span'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_block.rb:287:in `read_paragraph'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Maruku cannot parse this block of HTML/XML:
| |<SASS_CHECKOUT_DIRECTORY>
| |$ bundle
| |$ bundle exec sass ...
| |$ bundle exec scss ...
| |$ bundle exec sass-convert ...
| Missing end tag for 'SASS_CHECKOUT_DIRECTORY' (got ""html"")
| Line: 8
| Position: 270
| Last 80 unconsumed characters:
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/helpers.rb:72:in `rescue in md_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/helpers.rb:67:in `md_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:513:in `read_inline_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:115:in `read_span'
\___________________________________________________________________________

Wrapping bad html in a PRE with class 'markdown-html-error'
|<SASS_CHECKOUT_DIRECTORY>
|$ bundle
|$ bundle exec sass ...
|$ bundle exec scss ...
|$ bundle exec sass-convert ...

 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Fixnum.round"" for md_link(""Fixnum.round"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Fixnum.round"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""path"" for md_link(""path"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""path"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Fixnum.round"" for md_link(""Fixnum.round"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Fixnum.round"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""$end-at"" for md_link(""$end-at"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""$end-at"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""$limit"" for md_link(""$limit"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""$limit"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""sass_file, css_file, sourcemap_file"" for md_link(""sass_file, css_file, sourcemap_file"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""sass_file, css_file, sourcemap_file"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#resolved_rule}
| is referring to. The element before is a String,
| the element after is a String.
|   before: "" and ""
|   after: "" will automatically be set to ""
| 
| ---------------------------------------------------------------------------
| oN`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.EOF
| ---------------------------------------------------------------------------|
|                                                                            +--- Byte 189
| Shown bytes [114 to 75] of 189:
| >This will be nil if the directive didn't have a query. In this
| >case, {#resolved\_type} will automatically be set to
| >`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.
| 
| At line 9
|       text     |This will be nil if the directive didn't have a query. In this|
|       text     |case, {#resolved\_type} will automatically be set to|
|       text     |`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.|
| 
| 
| Elements read in span: 
|  -""This will be nil if the directive didn""
|  -md_entity(""rsquo"")
|  -""t have a query. In this case, ""
|  -md_el(:ald, [], {:ald_id=>""`"", :ald=>[[:ref, ""esolved_type""]]})
|  -"" will automatically be set to ""
|  -md_code("":without"")
|  -"" and ""
|  -md_ial([[:id, ""resolved_rule""]])
|  -"" will automatically be set to ""
|  -md_code(""[\""rule\""]"")
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Map"" for md_link(""Map"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Map"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""List"" for md_link(""List"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""List"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#visit_children}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""Like ""
|   after: "", but doesn""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#parent}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""t set ""
|   after: "".""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#visit_children}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""Like ""
|   after: "", but doesn""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#parent}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""t set ""
|   after: "".""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Sass::Tree::Node"" for md_link(""Sass::Tree::Node"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Sass::Tree::Node"".

[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 493
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 714
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 791
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 854
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 1005
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 1073
[warn]: Unknown tag @comment in file `lib/sass/version.rb` near line 47
[warn]: @param tag has unknown parameter name: name 
    in file `lib/sass/selector.rb' near line 37
[warn]: Unknown tag @comment in file `lib/sass/selector.rb` near line 301
[warn]: Unknown tag @comment in file `lib/sass/source/map.rb` near line 89
[warn]: Unknown tag @comment in file `lib/sass/scss/parser.rb` near line 26
[warn]: Unknown tag @comment in file `lib/sass/exec/sass_scss.rb` near line 261
[warn]: Unknown tag @comment in file `lib/sass/exec/sass_scss.rb` near line 386
[warn]: @param tag has unknown parameter name: template 
    in file `lib/sass/tree/root_node.rb' near line 8
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 359
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 359
[warn]: @param tag has unknown parameter name: function_name 
    in file `lib/sass/script/functions.rb' near line 603
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1125
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1198
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1267
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 2671
[warn]: Unknown tag @options in file `lib/sass/script/tree/node.rb` near line 70
[warn]: @param tag has unknown parameter name: cseq 
    in file `lib/sass/selector/sequence.rb' near line 155
[warn]: Unknown tag @retur in file `lib/sass/selector/sequence.rb` near line 185
[warn]: Unknown tag @comment in file `lib/sass/selector/sequence.rb` near line 342
[warn]: Unknown tag @comment
[warn]: @param tag has unknown parameter name: options 
    in file `lib/sass/script/value/base.rb' near line 32
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 79
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 126
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 135
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 144
[warn]: Unknown tag @options in file `lib/sass/script/value/base.rb` near line 218
[warn]: Unknown tag @options in file `lib/sass/script/value/base.rb` near line 218
[warn]: @param tag has unknown parameter name: filename 
    in file `lib/sass/scss/static_parser.rb' near line 18
[warn]: Unknown tag @comment in file `lib/sass/scss/static_parser.rb` near line 56
[warn]: Unknown tag @options in file `lib/sass/script/value/string.rb` near line 38
[warn]: Unknown tag @options in file `lib/sass/script/value/string.rb` near line 38
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 175
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 249
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 279
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 377
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 136
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 161
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 182
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/perform.rb` near line 14
[warn]: @param tag has unknown parameter name: original 
    in file `lib/sass/selector/simple_sequence.rb' near line 157
[warn]: Unknown tag @comment in file `lib/sass/script/tree/interpolation.rb` near line 41
[warn]: In file `lib/sass/util.rb':16: Cannot resolve link to #check_encoding from text:
[warn]: ...{#check_encoding}...
[warn]: In file `lib/sass/util.rb':847: Cannot resolve link to #check_encoding from text:
[warn]: ...{#check_encoding}...
[warn]: In file `lib/sass/util.rb':354: Cannot resolve link to Array.max from text:
[warn]: ...{Array.max}...
[warn]: In file `lib/sass/util.rb':360: Cannot resolve link to Array.min from text:
[warn]: ...{Array.min}...
[warn]: In file `lib/sass/script/functions.rb':226: Cannot resolve link to #set-nth from text:
[warn]: ...{#set-nth set-nth($list, $n, $value)}...
[warn]: In file `lib/sass/util.rb':1192: Cannot resolve link to #def_static_method from text:
[warn]: ...{#def_static_method}...
[warn]: In file `lib/sass/tree/node.rb':30: Cannot resolve link to #to_s from text:
[warn]: ...{#to_s}...
[warn]: In file `lib/sass/tree/node.rb':146: Cannot resolve link to #to_s from text:
[warn]: ...{#to_s}...
[warn]: In file `lib/sass/environment.rb':84: Cannot resolve link to #parent from text:
[warn]: ...{#parent}...
[warn]: In file `lib/sass/selector/simple.rb':45: Cannot resolve link to #to_a from text:
[warn]: ...{#to_a}...
[warn]: In file `lib/sass/selector/simple.rb':34: Cannot resolve link to #to_a from text:
[warn]: ...{#to_a}...
[warn]: In file `lib/sass/selector/simple.rb':56: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/selector/pseudo.rb':4: Cannot resolve link to #new_selector from text:
[warn]: ...{#new_selector}...
[warn]: In file `lib/sass/selector/pseudo.rb':52: Cannot resolve link to #new_selector from text:
[warn]: ...{#new_selector}...
[warn]: In file `lib/sass/script/functions.rb':495: Cannot resolve link to Environment#caller from text:
[warn]: ...{Environment#caller}...
[warn]: In file `lib/sass/selector/sequence.rb':127: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/tree/visitors/cssize.rb':350: Cannot resolve link to #pop from text:
[warn]: ...{#pop}...
[warn]: In file `lib/sass/selector/comma_sequence.rb':126: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/selector/simple_sequence.rb':225: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
Files:         127
Modules:        32 (    8 undocumented)
Classes:       128 (    9 undocumented)
Constants:       4 (    0 undocumented)
Methods:      1399 (  216 undocumented)
 85.09% documented

",JeNeSuisPasDave,retur
1872,2015-10-28 02:03:09,"I'm getting incompletely generated documentation.

I did the usual:



And I see a lot of errors, and the documentation seems in complete (e.g. the sidebar TOC on the main page only has about 3 top level items in it).

I've attached all the errors. Beyond my skills or time to fix them, but _hope someone has a workaround or a simple fix._  

Hmmm. Don't have permission to attach, so I guess I'll just paste the whole thing here:



 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Malformed HTML starting at ""<SASS_CHECKOUT_DIRECTORY>\n$ bundle\n$ bundle exec sass ...\n$ bundle exec scss ...\n$ bundle exec sass-convert ...""
| ---------------------------------------------------------------------------
| 
| >$ cd <SASS_CHECKOUT_DIRECTORY>
| >$ bundle
| >$ bundle exec sass ...
| >$ bundle exec scss ...
| >$ bundle exec sass-convert ...
| 
| At line 192
|       text     |$ bundle exec sass ...|
|       text     |$ bundle exec scss ...|
|       text     |$ bundle exec sass-convert ...|
|       text --> |N$ cd <SASS_CHECKOUT_DIRECTORY>N$ bundleN$ bundle exec sass ...N$ bundle
| ---------|------------------------------------------------------------------
|          +--- Byte 9
| Shown bytes [0 to 75] of 120:
| >|
|      empty     ||
|    header3     |## Authors|
|      empty     ||
| 
| 
| Elements read in span: 
|  -md_entity(""ldquo"")
| Current string: 
|   "" cd ""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:504:in `read_inline_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:115:in `read_span'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:14:in `parse_span'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_block.rb:287:in `read_paragraph'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Maruku cannot parse this block of HTML/XML:
| |<SASS_CHECKOUT_DIRECTORY>
| |$ bundle
| |$ bundle exec sass ...
| |$ bundle exec scss ...
| |$ bundle exec sass-convert ...
| Missing end tag for 'SASS_CHECKOUT_DIRECTORY' (got ""html"")
| Line: 8
| Position: 270
| Last 80 unconsumed characters:
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/helpers.rb:72:in `rescue in md_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/helpers.rb:67:in `md_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:513:in `read_inline_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:115:in `read_span'
\___________________________________________________________________________

Wrapping bad html in a PRE with class 'markdown-html-error'
|<SASS_CHECKOUT_DIRECTORY>
|$ bundle
|$ bundle exec sass ...
|$ bundle exec scss ...
|$ bundle exec sass-convert ...

 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Fixnum.round"" for md_link(""Fixnum.round"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Fixnum.round"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""path"" for md_link(""path"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""path"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Fixnum.round"" for md_link(""Fixnum.round"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Fixnum.round"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""$end-at"" for md_link(""$end-at"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""$end-at"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""$limit"" for md_link(""$limit"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""$limit"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""sass_file, css_file, sourcemap_file"" for md_link(""sass_file, css_file, sourcemap_file"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""sass_file, css_file, sourcemap_file"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#resolved_rule}
| is referring to. The element before is a String,
| the element after is a String.
|   before: "" and ""
|   after: "" will automatically be set to ""
| 
| ---------------------------------------------------------------------------
| oN`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.EOF
| ---------------------------------------------------------------------------|
|                                                                            +--- Byte 189
| Shown bytes [114 to 75] of 189:
| >This will be nil if the directive didn't have a query. In this
| >case, {#resolved\_type} will automatically be set to
| >`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.
| 
| At line 9
|       text     |This will be nil if the directive didn't have a query. In this|
|       text     |case, {#resolved\_type} will automatically be set to|
|       text     |`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.|
| 
| 
| Elements read in span: 
|  -""This will be nil if the directive didn""
|  -md_entity(""rsquo"")
|  -""t have a query. In this case, ""
|  -md_el(:ald, [], {:ald_id=>""`"", :ald=>[[:ref, ""esolved_type""]]})
|  -"" will automatically be set to ""
|  -md_code("":without"")
|  -"" and ""
|  -md_ial([[:id, ""resolved_rule""]])
|  -"" will automatically be set to ""
|  -md_code(""[\""rule\""]"")
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Map"" for md_link(""Map"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Map"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""List"" for md_link(""List"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""List"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#visit_children}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""Like ""
|   after: "", but doesn""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#parent}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""t set ""
|   after: "".""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#visit_children}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""Like ""
|   after: "", but doesn""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#parent}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""t set ""
|   after: "".""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Sass::Tree::Node"" for md_link(""Sass::Tree::Node"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Sass::Tree::Node"".

[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 493
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 714
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 791
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 854
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 1005
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 1073
[warn]: Unknown tag @comment in file `lib/sass/version.rb` near line 47
[warn]: @param tag has unknown parameter name: name 
    in file `lib/sass/selector.rb' near line 37
[warn]: Unknown tag @comment in file `lib/sass/selector.rb` near line 301
[warn]: Unknown tag @comment in file `lib/sass/source/map.rb` near line 89
[warn]: Unknown tag @comment in file `lib/sass/scss/parser.rb` near line 26
[warn]: Unknown tag @comment in file `lib/sass/exec/sass_scss.rb` near line 261
[warn]: Unknown tag @comment in file `lib/sass/exec/sass_scss.rb` near line 386
[warn]: @param tag has unknown parameter name: template 
    in file `lib/sass/tree/root_node.rb' near line 8
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 359
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 359
[warn]: @param tag has unknown parameter name: function_name 
    in file `lib/sass/script/functions.rb' near line 603
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1125
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1198
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1267
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 2671
[warn]: Unknown tag @options in file `lib/sass/script/tree/node.rb` near line 70
[warn]: @param tag has unknown parameter name: cseq 
    in file `lib/sass/selector/sequence.rb' near line 155
[warn]: Unknown tag @retur in file `lib/sass/selector/sequence.rb` near line 185
[warn]: Unknown tag @comment in file `lib/sass/selector/sequence.rb` near line 342
[warn]: Unknown tag @comment
[warn]: @param tag has unknown parameter name: options 
    in file `lib/sass/script/value/base.rb' near line 32
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 79
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 126
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 135
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 144
[warn]: Unknown tag @options in file `lib/sass/script/value/base.rb` near line 218
[warn]: Unknown tag @options in file `lib/sass/script/value/base.rb` near line 218
[warn]: @param tag has unknown parameter name: filename 
    in file `lib/sass/scss/static_parser.rb' near line 18
[warn]: Unknown tag @comment in file `lib/sass/scss/static_parser.rb` near line 56
[warn]: Unknown tag @options in file `lib/sass/script/value/string.rb` near line 38
[warn]: Unknown tag @options in file `lib/sass/script/value/string.rb` near line 38
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 175
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 249
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 279
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 377
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 136
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 161
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 182
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/perform.rb` near line 14
[warn]: @param tag has unknown parameter name: original 
    in file `lib/sass/selector/simple_sequence.rb' near line 157
[warn]: Unknown tag @comment in file `lib/sass/script/tree/interpolation.rb` near line 41
[warn]: In file `lib/sass/util.rb':16: Cannot resolve link to #check_encoding from text:
[warn]: ...{#check_encoding}...
[warn]: In file `lib/sass/util.rb':847: Cannot resolve link to #check_encoding from text:
[warn]: ...{#check_encoding}...
[warn]: In file `lib/sass/util.rb':354: Cannot resolve link to Array.max from text:
[warn]: ...{Array.max}...
[warn]: In file `lib/sass/util.rb':360: Cannot resolve link to Array.min from text:
[warn]: ...{Array.min}...
[warn]: In file `lib/sass/script/functions.rb':226: Cannot resolve link to #set-nth from text:
[warn]: ...{#set-nth set-nth($list, $n, $value)}...
[warn]: In file `lib/sass/util.rb':1192: Cannot resolve link to #def_static_method from text:
[warn]: ...{#def_static_method}...
[warn]: In file `lib/sass/tree/node.rb':30: Cannot resolve link to #to_s from text:
[warn]: ...{#to_s}...
[warn]: In file `lib/sass/tree/node.rb':146: Cannot resolve link to #to_s from text:
[warn]: ...{#to_s}...
[warn]: In file `lib/sass/environment.rb':84: Cannot resolve link to #parent from text:
[warn]: ...{#parent}...
[warn]: In file `lib/sass/selector/simple.rb':45: Cannot resolve link to #to_a from text:
[warn]: ...{#to_a}...
[warn]: In file `lib/sass/selector/simple.rb':34: Cannot resolve link to #to_a from text:
[warn]: ...{#to_a}...
[warn]: In file `lib/sass/selector/simple.rb':56: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/selector/pseudo.rb':4: Cannot resolve link to #new_selector from text:
[warn]: ...{#new_selector}...
[warn]: In file `lib/sass/selector/pseudo.rb':52: Cannot resolve link to #new_selector from text:
[warn]: ...{#new_selector}...
[warn]: In file `lib/sass/script/functions.rb':495: Cannot resolve link to Environment#caller from text:
[warn]: ...{Environment#caller}...
[warn]: In file `lib/sass/selector/sequence.rb':127: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/tree/visitors/cssize.rb':350: Cannot resolve link to #pop from text:
[warn]: ...{#pop}...
[warn]: In file `lib/sass/selector/comma_sequence.rb':126: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/selector/simple_sequence.rb':225: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
Files:         127
Modules:        32 (    8 undocumented)
Classes:       128 (    9 undocumented)
Constants:       4 (    0 undocumented)
Methods:      1399 (  216 undocumented)
 85.09% documented

",JeNeSuisPasDave,options
1872,2015-10-28 02:03:09,"I'm getting incompletely generated documentation.

I did the usual:



And I see a lot of errors, and the documentation seems in complete (e.g. the sidebar TOC on the main page only has about 3 top level items in it).

I've attached all the errors. Beyond my skills or time to fix them, but _hope someone has a workaround or a simple fix._  

Hmmm. Don't have permission to attach, so I guess I'll just paste the whole thing here:



 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Malformed HTML starting at ""<SASS_CHECKOUT_DIRECTORY>\n$ bundle\n$ bundle exec sass ...\n$ bundle exec scss ...\n$ bundle exec sass-convert ...""
| ---------------------------------------------------------------------------
| 
| >$ cd <SASS_CHECKOUT_DIRECTORY>
| >$ bundle
| >$ bundle exec sass ...
| >$ bundle exec scss ...
| >$ bundle exec sass-convert ...
| 
| At line 192
|       text     |$ bundle exec sass ...|
|       text     |$ bundle exec scss ...|
|       text     |$ bundle exec sass-convert ...|
|       text --> |N$ cd <SASS_CHECKOUT_DIRECTORY>N$ bundleN$ bundle exec sass ...N$ bundle
| ---------|------------------------------------------------------------------
|          +--- Byte 9
| Shown bytes [0 to 75] of 120:
| >|
|      empty     ||
|    header3     |## Authors|
|      empty     ||
| 
| 
| Elements read in span: 
|  -md_entity(""ldquo"")
| Current string: 
|   "" cd ""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:504:in `read_inline_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:115:in `read_span'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:14:in `parse_span'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_block.rb:287:in `read_paragraph'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Maruku cannot parse this block of HTML/XML:
| |<SASS_CHECKOUT_DIRECTORY>
| |$ bundle
| |$ bundle exec sass ...
| |$ bundle exec scss ...
| |$ bundle exec sass-convert ...
| Missing end tag for 'SASS_CHECKOUT_DIRECTORY' (got ""html"")
| Line: 8
| Position: 270
| Last 80 unconsumed characters:
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/helpers.rb:72:in `rescue in md_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/helpers.rb:67:in `md_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:513:in `read_inline_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/input/parse_span.rb:115:in `read_span'
\___________________________________________________________________________

Wrapping bad html in a PRE with class 'markdown-html-error'
|<SASS_CHECKOUT_DIRECTORY>
|$ bundle
|$ bundle exec sass ...
|$ bundle exec scss ...
|$ bundle exec sass-convert ...

 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Fixnum.round"" for md_link(""Fixnum.round"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Fixnum.round"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""path"" for md_link(""path"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""path"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Fixnum.round"" for md_link(""Fixnum.round"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Fixnum.round"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""$end-at"" for md_link(""$end-at"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""$end-at"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""$limit"" for md_link(""$limit"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""$limit"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""sass_file, css_file, sourcemap_file"" for md_link(""sass_file, css_file, sourcemap_file"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""sass_file, css_file, sourcemap_file"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#resolved_rule}
| is referring to. The element before is a String,
| the element after is a String.
|   before: "" and ""
|   after: "" will automatically be set to ""
| 
| ---------------------------------------------------------------------------
| oN`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.EOF
| ---------------------------------------------------------------------------|
|                                                                            +--- Byte 189
| Shown bytes [114 to 75] of 189:
| >This will be nil if the directive didn't have a query. In this
| >case, {#resolved\_type} will automatically be set to
| >`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.
| 
| At line 9
|       text     |This will be nil if the directive didn't have a query. In this|
|       text     |case, {#resolved\_type} will automatically be set to|
|       text     |`:without` and {#resolved\_rule} will automatically be set to `[""rule""]`.|
| 
| 
| Elements read in span: 
|  -""This will be nil if the directive didn""
|  -md_entity(""rsquo"")
|  -""t have a query. In this case, ""
|  -md_el(:ald, [], {:ald_id=>""`"", :ald=>[[:ref, ""esolved_type""]]})
|  -"" will automatically be set to ""
|  -md_code("":without"")
|  -"" and ""
|  -md_ial([[:id, ""resolved_rule""]])
|  -"" will automatically be set to ""
|  -md_code(""[\""rule\""]"")
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Map"" for md_link(""Map"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Map"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""List"" for md_link(""List"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""List"".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = """" for md_link([], nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = """".


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#visit_children}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""Like ""
|   after: "", but doesn""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#parent}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""t set ""
|   after: "".""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#visit_children}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""Like ""
|   after: "", but doesn""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| It's unclear which element the attribute list {:#parent}
| is referring to. The element before is a String,
| the element after is a String.
|   before: ""t set ""
|   after: "".""
| 
| ---------------------------------------------------------------------------
| Like {#visit\_children}, but doesn't set {#parent}.EOF
| ---------------------------------------------------|------------------------
|                                                    +--- Byte 51
| Shown bytes [0 to 51] of 51:
| >Like {#visit\_children}, but doesn't set {#parent}.
| 
| At line 2
|       text     |Like {#visit\_children}, but doesn't set {#parent}.|
| 
| 
| Elements read in span: 
|  -""Like ""
|  -md_ial([[:id, ""visit_children""]])
|  -"", but doesn""
|  -md_entity(""rsquo"")
|  -""t set ""
|  -md_ial([[:id, ""parent""]])
|  -"".""
|
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:101:in `block in merge_ial'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `each_cons'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/attributes.rb:93:in `merge_ial'
\___________________________________________________________________________


 ___________________________________________________________________________
| Maruku tells you:
+---------------------------------------------------------------------------
| Could not find ref_id = ""Sass::Tree::Node"" for md_link(""Sass::Tree::Node"", nil)
| Available refs are []
+---------------------------------------------------------------------------
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:656:in `to_html_link'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:891:in `block in array_to_html'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `each'
!/Users/datihein/Documents/prj/3rd/sass/.gems/gems/maruku-0.7.2/lib/maruku/output/to_html.rb:879:in `array_to_html'
\___________________________________________________________________________

Not creating a link for ref_id = ""Sass::Tree::Node"".

[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 493
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 714
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 791
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 854
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 1005
[warn]: Unknown tag @comment in file `lib/sass/engine.rb` near line 1073
[warn]: Unknown tag @comment in file `lib/sass/version.rb` near line 47
[warn]: @param tag has unknown parameter name: name 
    in file `lib/sass/selector.rb' near line 37
[warn]: Unknown tag @comment in file `lib/sass/selector.rb` near line 301
[warn]: Unknown tag @comment in file `lib/sass/source/map.rb` near line 89
[warn]: Unknown tag @comment in file `lib/sass/scss/parser.rb` near line 26
[warn]: Unknown tag @comment in file `lib/sass/exec/sass_scss.rb` near line 261
[warn]: Unknown tag @comment in file `lib/sass/exec/sass_scss.rb` near line 386
[warn]: @param tag has unknown parameter name: template 
    in file `lib/sass/tree/root_node.rb' near line 8
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 359
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 359
[warn]: @param tag has unknown parameter name: function_name 
    in file `lib/sass/script/functions.rb' near line 603
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1125
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1198
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 1267
[warn]: Unknown tag @comment
[warn]: Unknown tag @comment in file `lib/sass/script/functions.rb` near line 2671
[warn]: Unknown tag @options in file `lib/sass/script/tree/node.rb` near line 70
[warn]: @param tag has unknown parameter name: cseq 
    in file `lib/sass/selector/sequence.rb' near line 155
[warn]: Unknown tag @retur in file `lib/sass/selector/sequence.rb` near line 185
[warn]: Unknown tag @comment in file `lib/sass/selector/sequence.rb` near line 342
[warn]: Unknown tag @comment
[warn]: @param tag has unknown parameter name: options 
    in file `lib/sass/script/value/base.rb' near line 32
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 79
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 126
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 135
[warn]: @param tag has unknown parameter name: other 
    in file `lib/sass/script/value/base.rb' near line 144
[warn]: Unknown tag @options in file `lib/sass/script/value/base.rb` near line 218
[warn]: Unknown tag @options in file `lib/sass/script/value/base.rb` near line 218
[warn]: @param tag has unknown parameter name: filename 
    in file `lib/sass/scss/static_parser.rb' near line 18
[warn]: Unknown tag @comment in file `lib/sass/scss/static_parser.rb` near line 56
[warn]: Unknown tag @options in file `lib/sass/script/value/string.rb` near line 38
[warn]: Unknown tag @options in file `lib/sass/script/value/string.rb` near line 38
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 175
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 249
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 279
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/to_css.rb` near line 377
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 136
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 161
[warn]: Unknown tag @throw in file `lib/sass/script/value/helpers.rb` near line 182
[warn]: Unknown tag @comment in file `lib/sass/tree/visitors/perform.rb` near line 14
[warn]: @param tag has unknown parameter name: original 
    in file `lib/sass/selector/simple_sequence.rb' near line 157
[warn]: Unknown tag @comment in file `lib/sass/script/tree/interpolation.rb` near line 41
[warn]: In file `lib/sass/util.rb':16: Cannot resolve link to #check_encoding from text:
[warn]: ...{#check_encoding}...
[warn]: In file `lib/sass/util.rb':847: Cannot resolve link to #check_encoding from text:
[warn]: ...{#check_encoding}...
[warn]: In file `lib/sass/util.rb':354: Cannot resolve link to Array.max from text:
[warn]: ...{Array.max}...
[warn]: In file `lib/sass/util.rb':360: Cannot resolve link to Array.min from text:
[warn]: ...{Array.min}...
[warn]: In file `lib/sass/script/functions.rb':226: Cannot resolve link to #set-nth from text:
[warn]: ...{#set-nth set-nth($list, $n, $value)}...
[warn]: In file `lib/sass/util.rb':1192: Cannot resolve link to #def_static_method from text:
[warn]: ...{#def_static_method}...
[warn]: In file `lib/sass/tree/node.rb':30: Cannot resolve link to #to_s from text:
[warn]: ...{#to_s}...
[warn]: In file `lib/sass/tree/node.rb':146: Cannot resolve link to #to_s from text:
[warn]: ...{#to_s}...
[warn]: In file `lib/sass/environment.rb':84: Cannot resolve link to #parent from text:
[warn]: ...{#parent}...
[warn]: In file `lib/sass/selector/simple.rb':45: Cannot resolve link to #to_a from text:
[warn]: ...{#to_a}...
[warn]: In file `lib/sass/selector/simple.rb':34: Cannot resolve link to #to_a from text:
[warn]: ...{#to_a}...
[warn]: In file `lib/sass/selector/simple.rb':56: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/selector/pseudo.rb':4: Cannot resolve link to #new_selector from text:
[warn]: ...{#new_selector}...
[warn]: In file `lib/sass/selector/pseudo.rb':52: Cannot resolve link to #new_selector from text:
[warn]: ...{#new_selector}...
[warn]: In file `lib/sass/script/functions.rb':495: Cannot resolve link to Environment#caller from text:
[warn]: ...{Environment#caller}...
[warn]: In file `lib/sass/selector/sequence.rb':127: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/tree/visitors/cssize.rb':350: Cannot resolve link to #pop from text:
[warn]: ...{#pop}...
[warn]: In file `lib/sass/selector/comma_sequence.rb':126: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
[warn]: In file `lib/sass/selector/simple_sequence.rb':225: Cannot resolve link to Interpolation from text:
[warn]: ...{Interpolation}...
Files:         127
Modules:        32 (    8 undocumented)
Classes:       128 (    9 undocumented)
Constants:       4 (    0 undocumented)
Methods:      1399 (  216 undocumented)
 85.09% documented

",JeNeSuisPasDave,param
1870,2015-10-27 17:46:56,"https://tabatkins.github.io/specs/css-nesting/#at-nest

We should parse `@nest` directives as nested selectors and just drop the `@nest` directive in our output. Later if `@nest` becomes well supported we can output all nested selectors as `@nest` directives instead of permuting/expanding them.

@tabatkins @nex3 thoughts?
",chriseppstein,nest
1870,2015-10-27 17:46:56,"https://tabatkins.github.io/specs/css-nesting/#at-nest

We should parse `@nest` directives as nested selectors and just drop the `@nest` directive in our output. Later if `@nest` becomes well supported we can output all nested selectors as `@nest` directives instead of permuting/expanding them.

@tabatkins @nex3 thoughts?
",chriseppstein,nex3
1870,2015-10-27 17:46:56,"https://tabatkins.github.io/specs/css-nesting/#at-nest

We should parse `@nest` directives as nested selectors and just drop the `@nest` directive in our output. Later if `@nest` becomes well supported we can output all nested selectors as `@nest` directives instead of permuting/expanding them.

@tabatkins @nex3 thoughts?
",chriseppstein,tabatkins
1865,2015-10-20 17:23:23,"If you have a custom importer that doesn't specify a filename parameter in the returned `Sass::Engine` object, and that importer shows up twice in the import stack (or another, similarly-behaving importer), you'll erroneously get an `An @import loop has been found` error.

This is because the `visit_import` method [checks](https://github.com/sass/sass/blob/b409aad5fb34f363cec426f2102dd7005e1a45a6/lib/sass/tree/visitors/perform.rb#L318) the stack to see if any element has the same filename as the current importer...which, if both filenames are `nil`, will return true and cause a loop error to occur, even if there is no loop.

In `Sass::Engine`'s [`normalize_options`](https://github.com/sass/sass/blob/4e3e1d5684cc29073a507578fc977434ff488c93/lib/sass/engine.rb#L174) method, it's even recognized that `:filename` [might not](https://github.com/sass/sass/blob/4e3e1d5684cc29073a507578fc977434ff488c93/lib/sass/engine.rb#L179) be passed, but is not considered an error condition.

I'm not sure what the best fix is. The simplest would probably be to exclude nils from the import-loop check, but this may open the door for infinite loops if not done carefully (e.g. in case a no-filename importer was a part of a loop). Or in the next minor version bump, perhaps `:filename` could be made required.
",nanodeath,import
1864,2015-10-18 12:16:07,"The new syntax proposed [in that draft](https://drafts.csswg.org/mediaqueries/) is a working draft. According to the draft itself:

> This is a public copy of the editors‚Äô draft. It is provided for discussion only and may change at any moment. Its publication here does not imply endorsement of its contents by W3C. **Don‚Äôt cite this document other than as work in progress.**

I believe Sass is conservative about what it chooses to implement and what it doesn't - editor's drafts are most likely to change, and working drafts are a little more stable (which is why `:matches` and `:has` work per the spec with `@extend`).

If every editor's draft was allowed in Sass, you'd see a lot more breaking changes in Sass if/when the specs in the drafts change. (Of course, PostCSS doesn't seem to care ¬Ø\_(„ÉÑ)_/¬Ø)

Instead of having to install a new PostCSS plugin in order to do this: 



Just use current syntax instead:


",davidkpiano,extend
1864,2015-10-27 17:42:23,"We sometimes add support for drafts when they are likely to land or when the syntax can be transpiled to a supported syntax. Both of which are true for this feature.

We'll add support for the syntax because it's very dev friendly and we can convert it to supported syntax during compilation. That is: `(width < 200px)` will compile to (max-width: 199.99999px) and `(20em < device-width <= 50em)` will become: `(min-device-width: 20.00001em) and (max-device-width: 50em)`.

/cc @nex3 
",chriseppstein,nex3
1864,2015-10-30 21:53:17,"Paging @tabatkins. What's the status of this spec?
",chriseppstein,tabatkins
1863,2015-10-16 16:28:48,"There appears to be an inconsistency regarding what scope a `@for` loop operates under. It's all explained with an example here: http://stackoverflow.com/questions/33157052/variable-scope-in-sass-for-loops

Baslically, the body of the loop operates in the parent scope (which one would expect), but the loop counter variable is in some other private scope. Is this expected behavior? I can't find anything about it in the documentation.
",Sphinxxxx,for
1863,2015-10-20 23:17:08,"Thanks for the explanation!

My example was slightly different, but the takeaway is that the counter is local to the `@for` loop, and thus won't interfere with a variable that was _accidentally_ called the same in the parent scope (in your example: if the loop counter was called `$g` instead of `$i`).
",Sphinxxxx,for
1856,2015-10-11 14:03:34,"In LESS, it is possible to write:



To do the same in SASS, we need:



This strikes me as overly complicated and ugly. Could support for trailing ampersand parent selectors be added so that we don't have to resort to using @at-root and interpolation? E.g. just as `&.foo` or `&__bar` are valid, why can't `a&` work?
",adamreisnz,at-root
1855,2015-10-09 21:13:04,"  it would be awesome if we can generate variables with interpolation 
for ex 
@for $i from 6 through 1 {
    $h#{$i}-font-size : $i;
    $h#{$i}-font-size-reduction: $i \* 0.5;
  }

@for $i from 1 through 6 {
    h#{$i}{
      font-size: $h#{$i}-font-size - $h#{$i}-font-size-reduction;
    }
  }
",KISdesigners,for
1855,2015-10-09 21:25:59,"it would be so cool to make it at least this way
@for $i from 6 through 1 {
 var-delegate($h#{$i}-font-size : $i ) ; 
or 
var-make($h#{$i}-font-size : $i);
or why not a function such :
@param name : the name of the variable you want to register
@param value : the value of the variable
var-register( $h#{$i}-font-size , $i);
}
and now you have 6 variables as fallow :+1: 
$h1-font-size,
$h2-font-size,
h3-font-size,and so on
",KISdesigners,for
1855,2015-10-09 21:25:59,"it would be so cool to make it at least this way
@for $i from 6 through 1 {
 var-delegate($h#{$i}-font-size : $i ) ; 
or 
var-make($h#{$i}-font-size : $i);
or why not a function such :
@param name : the name of the variable you want to register
@param value : the value of the variable
var-register( $h#{$i}-font-size , $i);
}
and now you have 6 variables as fallow :+1: 
$h1-font-size,
$h2-font-size,
h3-font-size,and so on
",KISdesigners,param
1854,2015-10-07 20:51:16,"It is fairly common to have functions that register information at the global level. Doing this involves some syntax that usually quite ugly. The two ways of doing this are to set a variable that is then disregarded or to assign a property to the output of the function which returns null thus causing the property to not be output.

Calling functions strictly for their side-effects is not something I'm particularly keen on encouraging -- especially since Sass functions mostly return a useful value. That said, I think we should have the conversation about whether we should allow a bare function to be called at the root-level of the stylesheet since I've had several people ask me for this feature.

Example:



Note: we could add a directive to do this with existing syntax rules. but this offers so little over `@include` that I don't think it's worth it.

@nex3 thoughts?
",chriseppstein,nex3
1854,2015-10-07 20:51:16,"It is fairly common to have functions that register information at the global level. Doing this involves some syntax that usually quite ugly. The two ways of doing this are to set a variable that is then disregarded or to assign a property to the output of the function which returns null thus causing the property to not be output.

Calling functions strictly for their side-effects is not something I'm particularly keen on encouraging -- especially since Sass functions mostly return a useful value. That said, I think we should have the conversation about whether we should allow a bare function to be called at the root-level of the stylesheet since I've had several people ask me for this feature.

Example:



Note: we could add a directive to do this with existing syntax rules. but this offers so little over `@include` that I don't think it's worth it.

@nex3 thoughts?
",chriseppstein,include
1854,2015-10-07 20:59:17,"On a global scope, I agree with you -- it doesn't offer much over `@include`-ing a mixin.

However, what about calling impure (side-effect-y) functions within functions? Using the `@include` directive is not allowed within functions, so having a new directive that allows this behavior _might_ be somewhat useful.


",davidkpiano,include
1854,2015-10-09 22:14:12,"I'm not a fan. I don't like the idea of adding a new construct for something that isn't encouraged anyway, and given that Sass already has a distinction between functions and mixins anyway, I'm happy to say that side-effect-only reusable chunks of code should always be mixins.

@davidkpiano's use-case is compelling, though. @chriseppstein, what do you think about allowing `@include` in functions as long as the mixin doesn't emit any actual CSS?
",nex3,include
1854,2015-10-13 12:20:29,"> @chriseppstein, what do you think about allowing @include in functions as long as the mixin doesn't emit any actual CSS?

My thought, exactly. Although that might be greedy to determine? Also, I'm worried about the complexity overhead of allowing mixins includes in functions some times, but not always. But I don't see a better option.
",HugoGiraudel,include
1854,2015-10-13 19:37:22,"Maybe we should have 2 words for this, a `@mixin` which doesn't  allow actual CSS could be call something else, and those would be allowed inside functions ?
",long-lazuli,mixin
1854,2015-10-13 19:41:23,"> @include in functions as long as the mixin doesn't emit any actual CSS?

Not a fan of this idea at all. It's too fragile, IMO, and out of place in that context.

I'd much rather just change the grammar to allow bare function calls or introduce a new directive like `@call`.
",chriseppstein,call
1854,2015-10-13 19:41:23,"> @include in functions as long as the mixin doesn't emit any actual CSS?

Not a fan of this idea at all. It's too fragile, IMO, and out of place in that context.

I'd much rather just change the grammar to allow bare function calls or introduce a new directive like `@call`.
",chriseppstein,include
1854,2015-10-24 00:17:15,"> It's easy for there to be a mixin that has a conditional where it sometimes outputs styles and sometimes doesn't. By changing an argument to the mixin it can become invalid in a function context. This is unexpected.

A well-designed mixin should be clear about whether and when it will emit styles. That's not to say there's no fragility here, but I expect the fragility to be more theoretical than not.

> The existing construct that looks out of place when doing something ""sketchy"" (here defined as running a function for side-effects) is to assign it to a dummy variable. This issue is about finding a less yucky way of accomplishing this. We don't need to add a new yucky way -- we already have one.

To be clear, I personally don't find `@include` in a function out-of-place. My point in bringing up syntactic vinegar here is that for those to whom `@include` in a function _does_ look awkward, it justifies that awkwardness with similarly awkward semantics‚Äîand it's certainly cleaner then a temp variable.

The primary difference in my mind between mixins and functions is that mixins are for side effects, not that mixins emit styles. And that's backed up in practice: all mixins (that aren't no-ops) produce only side effects, but not all of them emit styles.

This brings me to another issue with `@exec`: today, if users want to write a re-usable side-effect-only chunk of code, the most obvious construct for it is a mixin (if they're initially planning on calling it from the top-level or from another mixin). If later they want to use it from within a function, they're in a bad situation‚Äîthis is the problem we're trying to solve.

The issue is that starting out with a mixin will continue to be true even if we add `@exec`. Mixins will always be vastly more common in general, and as I mentioned above the language and culture encourages people to think of mixins as being defined by side effects. If `@exec` is the solution we choose, they'll still have to make a backwards-incompatible change from a mixin to a function if they want to use a side-effect-only chunk of code in a function.
",nex3,exec
1854,2015-10-24 00:17:15,"> It's easy for there to be a mixin that has a conditional where it sometimes outputs styles and sometimes doesn't. By changing an argument to the mixin it can become invalid in a function context. This is unexpected.

A well-designed mixin should be clear about whether and when it will emit styles. That's not to say there's no fragility here, but I expect the fragility to be more theoretical than not.

> The existing construct that looks out of place when doing something ""sketchy"" (here defined as running a function for side-effects) is to assign it to a dummy variable. This issue is about finding a less yucky way of accomplishing this. We don't need to add a new yucky way -- we already have one.

To be clear, I personally don't find `@include` in a function out-of-place. My point in bringing up syntactic vinegar here is that for those to whom `@include` in a function _does_ look awkward, it justifies that awkwardness with similarly awkward semantics‚Äîand it's certainly cleaner then a temp variable.

The primary difference in my mind between mixins and functions is that mixins are for side effects, not that mixins emit styles. And that's backed up in practice: all mixins (that aren't no-ops) produce only side effects, but not all of them emit styles.

This brings me to another issue with `@exec`: today, if users want to write a re-usable side-effect-only chunk of code, the most obvious construct for it is a mixin (if they're initially planning on calling it from the top-level or from another mixin). If later they want to use it from within a function, they're in a bad situation‚Äîthis is the problem we're trying to solve.

The issue is that starting out with a mixin will continue to be true even if we add `@exec`. Mixins will always be vastly more common in general, and as I mentioned above the language and culture encourages people to think of mixins as being defined by side effects. If `@exec` is the solution we choose, they'll still have to make a backwards-incompatible change from a mixin to a function if they want to use a side-effect-only chunk of code in a function.
",nex3,include
1854,2015-10-26 17:12:44,">  If later they want to use it from within a function, they're in a bad situation

Not all that bad, it's a simple refactoring from mixin to function and the creation of a new mixin of the same name that invokes the function. It let's people use `@include` where that makes sense, but also to invoke it from a function if that's their context. This is a totally workable solution, though the boilerplate is annoying.



>  I don't like the idea of adding a new construct for something that isn't encouraged anyway.

What is it about global side-effects that we aren't encouraging? AFAIK, the stated reason that globals are bad is namespace pollution. Furthermore we intend to address the ""everything is global"" in Sass 4.0., which is the soonest this feature would land, so why should we discourage module-level globals?

This pattern is the only mechanism for configuring frameworks in Sass. If we don't want people to use globals, what better construct should we give them? Is it the ability to pass local vars to the `@content` from an `@include` so that context can be maintained without globals? (Issue #871)

To my eye, allowing functions to be called without assignment or directive is just adding syntactic sugar for an existing construct. It's intuitive to the reader.

> To be clear, I personally don't find @include in a function out-of-place.

Redefining mixins as ""side-effect creation"" instead of ""produces style fragments"" may seem natural to you, but I seriously doubt our users think of producing styles as a side-effect.

Anways, it seems like we have no consensus here, I move to close this issue and maintain the status quo.
",chriseppstein,content
1854,2015-10-26 17:12:44,">  If later they want to use it from within a function, they're in a bad situation

Not all that bad, it's a simple refactoring from mixin to function and the creation of a new mixin of the same name that invokes the function. It let's people use `@include` where that makes sense, but also to invoke it from a function if that's their context. This is a totally workable solution, though the boilerplate is annoying.



>  I don't like the idea of adding a new construct for something that isn't encouraged anyway.

What is it about global side-effects that we aren't encouraging? AFAIK, the stated reason that globals are bad is namespace pollution. Furthermore we intend to address the ""everything is global"" in Sass 4.0., which is the soonest this feature would land, so why should we discourage module-level globals?

This pattern is the only mechanism for configuring frameworks in Sass. If we don't want people to use globals, what better construct should we give them? Is it the ability to pass local vars to the `@content` from an `@include` so that context can be maintained without globals? (Issue #871)

To my eye, allowing functions to be called without assignment or directive is just adding syntactic sugar for an existing construct. It's intuitive to the reader.

> To be clear, I personally don't find @include in a function out-of-place.

Redefining mixins as ""side-effect creation"" instead of ""produces style fragments"" may seem natural to you, but I seriously doubt our users think of producing styles as a side-effect.

Anways, it seems like we have no consensus here, I move to close this issue and maintain the status quo.
",chriseppstein,include
1854,2015-10-30 21:37:35,"> Not all that bad, it's a simple refactoring from mixin to function and the creation of a new mixin of the same name that invokes the function. It let's people use `@include` where that makes sense, but also to invoke it from a function if that's their context. This is a totally workable solution, though the boilerplate is annoying.

Why would we force people to call the same chunk of code with the same semantics in two different ways when we could just make it work the same way everywhere? Why would we define the language semantics in a way to set people up for annoying boilerplate?

> What is it about global side-effects that we aren't encouraging? AFAIK, the stated reason that globals are bad is namespace pollution. Furthermore we intend to address the ""everything is global"" in Sass 4.0., which is the soonest this feature would land, so why should we discourage module-level globals?

Mutable global state‚Äîwhether or not it's in a global scope‚Äîand functions with side-effects are both always more difficult to reason about in large systems than immutable local values and pure functions.

> This pattern is the only mechanism for configuring frameworks in Sass. If we don't want people to use globals, what better construct should we give them? Is it the ability to pass local vars to the `@content` from an `@include` so that context can be maintained without globals? (Issue #871)

I'm not saying we should ban global values entirely. Clearly they do have valid uses in some cases, but that doesn't mean that we should optimize the language to maximize the comfort of using them. Adding an entirely new directive is a very large cost, and I don't think this use-case justifies that cost when it can be accomplished less expensively.

> Redefining mixins as ""side-effect creation"" instead of ""produces style fragments"" may seem natural to you, but I seriously doubt our users think of producing styles as a side-effect.

I think you're wrong. They may not explicitly characterize mixins that produce styles as having side-effects, but I'm confident they differentiate functions and mixins by functions returning values and mixins not doing so.

> Anways, it seems like we have no consensus here, I move to close this issue and maintain the status quo.

I still consider @davidkpiano's use-case compelling, and I'd like to settle on a solution.
",nex3,content
1854,2015-10-30 21:37:35,"> Not all that bad, it's a simple refactoring from mixin to function and the creation of a new mixin of the same name that invokes the function. It let's people use `@include` where that makes sense, but also to invoke it from a function if that's their context. This is a totally workable solution, though the boilerplate is annoying.

Why would we force people to call the same chunk of code with the same semantics in two different ways when we could just make it work the same way everywhere? Why would we define the language semantics in a way to set people up for annoying boilerplate?

> What is it about global side-effects that we aren't encouraging? AFAIK, the stated reason that globals are bad is namespace pollution. Furthermore we intend to address the ""everything is global"" in Sass 4.0., which is the soonest this feature would land, so why should we discourage module-level globals?

Mutable global state‚Äîwhether or not it's in a global scope‚Äîand functions with side-effects are both always more difficult to reason about in large systems than immutable local values and pure functions.

> This pattern is the only mechanism for configuring frameworks in Sass. If we don't want people to use globals, what better construct should we give them? Is it the ability to pass local vars to the `@content` from an `@include` so that context can be maintained without globals? (Issue #871)

I'm not saying we should ban global values entirely. Clearly they do have valid uses in some cases, but that doesn't mean that we should optimize the language to maximize the comfort of using them. Adding an entirely new directive is a very large cost, and I don't think this use-case justifies that cost when it can be accomplished less expensively.

> Redefining mixins as ""side-effect creation"" instead of ""produces style fragments"" may seem natural to you, but I seriously doubt our users think of producing styles as a side-effect.

I think you're wrong. They may not explicitly characterize mixins that produce styles as having side-effects, but I'm confident they differentiate functions and mixins by functions returning values and mixins not doing so.

> Anways, it seems like we have no consensus here, I move to close this issue and maintain the status quo.

I still consider @davidkpiano's use-case compelling, and I'd like to settle on a solution.
",nex3,include
1854,2016-07-13 19:40:47,"The answer to ""How do I share my code as a Framework/Module across teams, while allowing overrides?"" is: Set variables with `!default` and have the user override them.

There's a lot of problems with this:
- Hopefully you picked a GREAT name, you really can't change it once people start to use it.
- Deprecations aren't easily do-able.  You have to be really cute with how you structure your code, if you want to provide developer feedback.
- Removing variables won't cause build failures.  Variables are silent.  People won't be aware that something has changed and they need to fix it.  (Therefore you never, ever rename ""public"" variables).

The hack is to tell users to use a top-level `@include set-some-variable(#212121);` which is awful.  The keyword implies that CSS will be emited, but isn't.  But it lets you deprecate with a `@warn`, you can derive a sensible default for other variables there, etc.

That said:  The labor that's involved in creating collaborative Sass code with a good, ""friendly"" experience is high enough that it's never worth the effort.  Everyone loses.

Global variables are an inferior solution to everything else.
",sgonyea,warn
1854,2016-07-13 19:40:47,"The answer to ""How do I share my code as a Framework/Module across teams, while allowing overrides?"" is: Set variables with `!default` and have the user override them.

There's a lot of problems with this:
- Hopefully you picked a GREAT name, you really can't change it once people start to use it.
- Deprecations aren't easily do-able.  You have to be really cute with how you structure your code, if you want to provide developer feedback.
- Removing variables won't cause build failures.  Variables are silent.  People won't be aware that something has changed and they need to fix it.  (Therefore you never, ever rename ""public"" variables).

The hack is to tell users to use a top-level `@include set-some-variable(#212121);` which is awful.  The keyword implies that CSS will be emited, but isn't.  But it lets you deprecate with a `@warn`, you can derive a sensible default for other variables there, etc.

That said:  The labor that's involved in creating collaborative Sass code with a good, ""friendly"" experience is high enough that it's never worth the effort.  Everyone loses.

Global variables are an inferior solution to everything else.
",sgonyea,include
1854,2016-11-23 20:02:31,"@nex3 I just came across this issue while looking into a feature of SASS that doesn't exist: calling functions without a left-hand side.

Before I begin, I would first like to say thank you for putting the work you (and others) put into this tool, as it is mighty helpful, and I wish the W3C would take a page from SASS's book. Keep up the good work, and hopefully my 2cents can be of some use to help remedy this issue (and any others similar to it).

### some feedback on the issue from an outsider perspective,

I will admit that I am not a Ruby programmer, nor am I some shmuck whom thinks their opinions about an open-source tool or piece of software should be taken as law and implemented at my whim. However, with that being said... As a heavy user of SASS (SCSS syntax specifically) who wants to see the language flourish and become better (not saying it's bad by any means), I feel that a lot of your reservations about adding features, specifically how a user uses functions and mixins are quite dogmatic.

It is a fact that there are many people, myself included, whom want ""better"" functions. By ""better"" I mean acting as a function should in any other language, but for CSS;

* Can be called anywhere. Outside of a selector, inside a selector without a left-hand side, and inside a selector with a left-hand side.
  * __Note:__ Preferably without the need for an `@rule` like mixins need `@include`. However if an `@rule` is necessary, I do like the suggestions in this thread, `@call` and `@exec`. Even then.. It's not very clean to use functions with an `@rule` IMO. I digress...
* Does not have to return a value,
* Can produce side-effects (rulesets and values),

just to name a few.

The biggest concern/worry I get from your reservations is that you don't want users to be confused on when to use a mixin over a function, and vice-versa. This is totally understandable, admirable even, especially to me as a new developer who is mega confused by a lot of silly things in the JavaScript community. However, with that in mind, I think you would do well to consider that your stance on the matter is not the correct one, since many people seem to disagree with you.

### now for my ideas/recommendations

Have you ever considered having mixins and functions being the same thing with the only difference being syntax/semantics. I bring this up because they are mighty similar to one another (even with your reservations in place). If you look at almost any other language, there are usually at least 2 ways of doing the exact same thing with the only difference being opinion of syntax, which leads me to my next point;

I personally think that if you did away with mixins entirely, no one would miss them because functions can do everything. To replace the mixin directive, you can add a built-in SASS function called `mixin()` or `include()` and have it take an argument of a selector, variable, or maybe a file path that would output the contents of the argument ... Think of PHP's `file_get_contents()`, `include()` and `require()` statements as a comparison of functionality.

That's all for now, 

Sincerely,


Jordan",jordanbrauer,include
1854,2016-11-23 20:02:31,"@nex3 I just came across this issue while looking into a feature of SASS that doesn't exist: calling functions without a left-hand side.

Before I begin, I would first like to say thank you for putting the work you (and others) put into this tool, as it is mighty helpful, and I wish the W3C would take a page from SASS's book. Keep up the good work, and hopefully my 2cents can be of some use to help remedy this issue (and any others similar to it).

### some feedback on the issue from an outsider perspective,

I will admit that I am not a Ruby programmer, nor am I some shmuck whom thinks their opinions about an open-source tool or piece of software should be taken as law and implemented at my whim. However, with that being said... As a heavy user of SASS (SCSS syntax specifically) who wants to see the language flourish and become better (not saying it's bad by any means), I feel that a lot of your reservations about adding features, specifically how a user uses functions and mixins are quite dogmatic.

It is a fact that there are many people, myself included, whom want ""better"" functions. By ""better"" I mean acting as a function should in any other language, but for CSS;

* Can be called anywhere. Outside of a selector, inside a selector without a left-hand side, and inside a selector with a left-hand side.
  * __Note:__ Preferably without the need for an `@rule` like mixins need `@include`. However if an `@rule` is necessary, I do like the suggestions in this thread, `@call` and `@exec`. Even then.. It's not very clean to use functions with an `@rule` IMO. I digress...
* Does not have to return a value,
* Can produce side-effects (rulesets and values),

just to name a few.

The biggest concern/worry I get from your reservations is that you don't want users to be confused on when to use a mixin over a function, and vice-versa. This is totally understandable, admirable even, especially to me as a new developer who is mega confused by a lot of silly things in the JavaScript community. However, with that in mind, I think you would do well to consider that your stance on the matter is not the correct one, since many people seem to disagree with you.

### now for my ideas/recommendations

Have you ever considered having mixins and functions being the same thing with the only difference being syntax/semantics. I bring this up because they are mighty similar to one another (even with your reservations in place). If you look at almost any other language, there are usually at least 2 ways of doing the exact same thing with the only difference being opinion of syntax, which leads me to my next point;

I personally think that if you did away with mixins entirely, no one would miss them because functions can do everything. To replace the mixin directive, you can add a built-in SASS function called `mixin()` or `include()` and have it take an argument of a selector, variable, or maybe a file path that would output the contents of the argument ... Think of PHP's `file_get_contents()`, `include()` and `require()` statements as a comparison of functionality.

That's all for now, 

Sincerely,


Jordan",jordanbrauer,call
1854,2016-11-23 20:02:31,"@nex3 I just came across this issue while looking into a feature of SASS that doesn't exist: calling functions without a left-hand side.

Before I begin, I would first like to say thank you for putting the work you (and others) put into this tool, as it is mighty helpful, and I wish the W3C would take a page from SASS's book. Keep up the good work, and hopefully my 2cents can be of some use to help remedy this issue (and any others similar to it).

### some feedback on the issue from an outsider perspective,

I will admit that I am not a Ruby programmer, nor am I some shmuck whom thinks their opinions about an open-source tool or piece of software should be taken as law and implemented at my whim. However, with that being said... As a heavy user of SASS (SCSS syntax specifically) who wants to see the language flourish and become better (not saying it's bad by any means), I feel that a lot of your reservations about adding features, specifically how a user uses functions and mixins are quite dogmatic.

It is a fact that there are many people, myself included, whom want ""better"" functions. By ""better"" I mean acting as a function should in any other language, but for CSS;

* Can be called anywhere. Outside of a selector, inside a selector without a left-hand side, and inside a selector with a left-hand side.
  * __Note:__ Preferably without the need for an `@rule` like mixins need `@include`. However if an `@rule` is necessary, I do like the suggestions in this thread, `@call` and `@exec`. Even then.. It's not very clean to use functions with an `@rule` IMO. I digress...
* Does not have to return a value,
* Can produce side-effects (rulesets and values),

just to name a few.

The biggest concern/worry I get from your reservations is that you don't want users to be confused on when to use a mixin over a function, and vice-versa. This is totally understandable, admirable even, especially to me as a new developer who is mega confused by a lot of silly things in the JavaScript community. However, with that in mind, I think you would do well to consider that your stance on the matter is not the correct one, since many people seem to disagree with you.

### now for my ideas/recommendations

Have you ever considered having mixins and functions being the same thing with the only difference being syntax/semantics. I bring this up because they are mighty similar to one another (even with your reservations in place). If you look at almost any other language, there are usually at least 2 ways of doing the exact same thing with the only difference being opinion of syntax, which leads me to my next point;

I personally think that if you did away with mixins entirely, no one would miss them because functions can do everything. To replace the mixin directive, you can add a built-in SASS function called `mixin()` or `include()` and have it take an argument of a selector, variable, or maybe a file path that would output the contents of the argument ... Think of PHP's `file_get_contents()`, `include()` and `require()` statements as a comparison of functionality.

That's all for now, 

Sincerely,


Jordan",jordanbrauer,rule
1854,2016-11-23 20:02:31,"@nex3 I just came across this issue while looking into a feature of SASS that doesn't exist: calling functions without a left-hand side.

Before I begin, I would first like to say thank you for putting the work you (and others) put into this tool, as it is mighty helpful, and I wish the W3C would take a page from SASS's book. Keep up the good work, and hopefully my 2cents can be of some use to help remedy this issue (and any others similar to it).

### some feedback on the issue from an outsider perspective,

I will admit that I am not a Ruby programmer, nor am I some shmuck whom thinks their opinions about an open-source tool or piece of software should be taken as law and implemented at my whim. However, with that being said... As a heavy user of SASS (SCSS syntax specifically) who wants to see the language flourish and become better (not saying it's bad by any means), I feel that a lot of your reservations about adding features, specifically how a user uses functions and mixins are quite dogmatic.

It is a fact that there are many people, myself included, whom want ""better"" functions. By ""better"" I mean acting as a function should in any other language, but for CSS;

* Can be called anywhere. Outside of a selector, inside a selector without a left-hand side, and inside a selector with a left-hand side.
  * __Note:__ Preferably without the need for an `@rule` like mixins need `@include`. However if an `@rule` is necessary, I do like the suggestions in this thread, `@call` and `@exec`. Even then.. It's not very clean to use functions with an `@rule` IMO. I digress...
* Does not have to return a value,
* Can produce side-effects (rulesets and values),

just to name a few.

The biggest concern/worry I get from your reservations is that you don't want users to be confused on when to use a mixin over a function, and vice-versa. This is totally understandable, admirable even, especially to me as a new developer who is mega confused by a lot of silly things in the JavaScript community. However, with that in mind, I think you would do well to consider that your stance on the matter is not the correct one, since many people seem to disagree with you.

### now for my ideas/recommendations

Have you ever considered having mixins and functions being the same thing with the only difference being syntax/semantics. I bring this up because they are mighty similar to one another (even with your reservations in place). If you look at almost any other language, there are usually at least 2 ways of doing the exact same thing with the only difference being opinion of syntax, which leads me to my next point;

I personally think that if you did away with mixins entirely, no one would miss them because functions can do everything. To replace the mixin directive, you can add a built-in SASS function called `mixin()` or `include()` and have it take an argument of a selector, variable, or maybe a file path that would output the contents of the argument ... Think of PHP's `file_get_contents()`, `include()` and `require()` statements as a comparison of functionality.

That's all for now, 

Sincerely,


Jordan",jordanbrauer,exec
1852,2015-10-06 14:19:21,"Due to older browsers not being able to process some newer selectors, this can  cause a whole line to be ignored.

**SASS**



**Resulting CSS**



Using the `@extend` command does not fix this as it outputs same resulting CSS.
Creating a mixin is a kind of fix: 

**SASS**



**Resulting CSS**



A possible fix would be the creation of a `@clone` or `@copy` command which would work as follows:

**SASS**



**Resulting CSS**


",elistone,extend
1852,2015-10-06 14:19:21,"Due to older browsers not being able to process some newer selectors, this can  cause a whole line to be ignored.

**SASS**



**Resulting CSS**



Using the `@extend` command does not fix this as it outputs same resulting CSS.
Creating a mixin is a kind of fix: 

**SASS**



**Resulting CSS**



A possible fix would be the creation of a `@clone` or `@copy` command which would work as follows:

**SASS**



**Resulting CSS**


",elistone,copy
1852,2015-10-06 14:19:21,"Due to older browsers not being able to process some newer selectors, this can  cause a whole line to be ignored.

**SASS**



**Resulting CSS**



Using the `@extend` command does not fix this as it outputs same resulting CSS.
Creating a mixin is a kind of fix: 

**SASS**



**Resulting CSS**



A possible fix would be the creation of a `@clone` or `@copy` command which would work as follows:

**SASS**



**Resulting CSS**


",elistone,clone
1852,2015-10-06 14:39:18,"I'm guessing the problem with `@copy` (or with `@mixin` working on selectors instead of declaration blocks) is that it's difficult to unambiguously determine what should be ""copied"".

In your example, what if we defined later in the same file (or in a different file) more declarations for `li.end-col`? Should those declarations get copied, too? What does that do to the source order of the copying selector? At a certain level, it becomes unpredictable.

A `@mixin` is your best bet for copying declarations (that's what they're for :smile: )
",davidkpiano,copy
1852,2015-10-06 14:39:18,"I'm guessing the problem with `@copy` (or with `@mixin` working on selectors instead of declaration blocks) is that it's difficult to unambiguously determine what should be ""copied"".

In your example, what if we defined later in the same file (or in a different file) more declarations for `li.end-col`? Should those declarations get copied, too? What does that do to the source order of the copying selector? At a certain level, it becomes unpredictable.

A `@mixin` is your best bet for copying declarations (that's what they're for :smile: )
",davidkpiano,mixin
1852,2015-10-06 14:55:00,"@davidkpiano The way I see it essentially a `@copy` would be the same as an `@extend` however with out the grouping on to one line. That is the issue I am having with `@extend` and having to resort to `@mixin` which I sort of assumed were more like functions.
",elistone,extend
1852,2015-10-06 14:55:00,"@davidkpiano The way I see it essentially a `@copy` would be the same as an `@extend` however with out the grouping on to one line. That is the issue I am having with `@extend` and having to resort to `@mixin` which I sort of assumed were more like functions.
",elistone,copy
1852,2015-10-06 14:55:00,"@davidkpiano The way I see it essentially a `@copy` would be the same as an `@extend` however with out the grouping on to one line. That is the issue I am having with `@extend` and having to resort to `@mixin` which I sort of assumed were more like functions.
",elistone,mixin
1851,2015-10-06 13:49:37,"At this point, you'd probably want to make the declaration block a mixin:



(Sidenote: is it expected (when `@extend`ing or otherwise) to allow impossible selectors to be unified such as `li:not(li)`?)
",davidkpiano,extend
1847,2016-03-03 19:26:21,"This is complicated because `round()` returns a number and Sass will still round that number to the global precision setting unless we somehow set that number with a flag that says ""this instance of this number has this particular precision."" Alternatively it can return a string but that number could no longer be used for further math calculations. @nex3 is against the idea of flagging a number to have an instance specific precision and strings create other complications that will end up creating headaches for people. So basically, we don't have a consensus a good solution to this issue is.
",chriseppstein,nex3
1847,2016-03-07 23:23:02,"@charlesroper via `precision()`? I think it looks too cryptic and is not self-documenting.
",stevenvachon,charlesroper
1847,2016-03-08 17:40:36,"@dustindowell22 I think that's too wordy. `round()` is pretty clear, I think. But if necessary, what do you think of `decimal-round()` ?
",stevenvachon,dustindowell22
1836,2015-10-07 08:40:05,">  just in case selectors with a leading tilde actually becomes valid in the future.

In the beginning Sass didn't even parse selectors, we just grabbed a string of stuff until the curly brace and said ""this is a selector"". As sass matured, our parsing of selectors has grown to support the features we've added (E.g. `@extend`) but our errors tend to be very simple like ""you can't have a . without a classname that follows it"" and these are mostly generated by our parser just being confused based on the selector grammar. Sass's selector grammar allows leading combinators because nested selectors allows leading combinators. This is to say, that we aren't raising an error here because we just don't raise selector errors unless Sass is confused. Sass generally doesn't raise errors because we think a browser will be confused. Usually Sass gets confused on behalf of browsers because we're all on the same CSS team but not always.

All that said, @kareems there is an easy way to get the behavior you seek:



Sass does not remove the parent selector when the parent reference (`&`) is used in SassScript contexts. usually this is just a pain in the ass requiring the use of `@at-root` but in this case it's helpful.

So. The larger issue here is ""Should Sass raise errors for clearly invalid selectors?"" For example, Sass will happily pass `~ ~ ~ .foo { ... }` along to a browser. I don't know why we don't raise an error for combinators that aren't combinating other than ""we just never wrote that code"". Since @nex3 wrote most, if not all, of the selector code I'd like her to weigh in.
",chriseppstein,extend
1836,2015-10-07 08:40:05,">  just in case selectors with a leading tilde actually becomes valid in the future.

In the beginning Sass didn't even parse selectors, we just grabbed a string of stuff until the curly brace and said ""this is a selector"". As sass matured, our parsing of selectors has grown to support the features we've added (E.g. `@extend`) but our errors tend to be very simple like ""you can't have a . without a classname that follows it"" and these are mostly generated by our parser just being confused based on the selector grammar. Sass's selector grammar allows leading combinators because nested selectors allows leading combinators. This is to say, that we aren't raising an error here because we just don't raise selector errors unless Sass is confused. Sass generally doesn't raise errors because we think a browser will be confused. Usually Sass gets confused on behalf of browsers because we're all on the same CSS team but not always.

All that said, @kareems there is an easy way to get the behavior you seek:



Sass does not remove the parent selector when the parent reference (`&`) is used in SassScript contexts. usually this is just a pain in the ass requiring the use of `@at-root` but in this case it's helpful.

So. The larger issue here is ""Should Sass raise errors for clearly invalid selectors?"" For example, Sass will happily pass `~ ~ ~ .foo { ... }` along to a browser. I don't know why we don't raise an error for combinators that aren't combinating other than ""we just never wrote that code"". Since @nex3 wrote most, if not all, of the selector code I'd like her to weigh in.
",chriseppstein,at-root
1836,2015-10-07 08:40:05,">  just in case selectors with a leading tilde actually becomes valid in the future.

In the beginning Sass didn't even parse selectors, we just grabbed a string of stuff until the curly brace and said ""this is a selector"". As sass matured, our parsing of selectors has grown to support the features we've added (E.g. `@extend`) but our errors tend to be very simple like ""you can't have a . without a classname that follows it"" and these are mostly generated by our parser just being confused based on the selector grammar. Sass's selector grammar allows leading combinators because nested selectors allows leading combinators. This is to say, that we aren't raising an error here because we just don't raise selector errors unless Sass is confused. Sass generally doesn't raise errors because we think a browser will be confused. Usually Sass gets confused on behalf of browsers because we're all on the same CSS team but not always.

All that said, @kareems there is an easy way to get the behavior you seek:



Sass does not remove the parent selector when the parent reference (`&`) is used in SassScript contexts. usually this is just a pain in the ass requiring the use of `@at-root` but in this case it's helpful.

So. The larger issue here is ""Should Sass raise errors for clearly invalid selectors?"" For example, Sass will happily pass `~ ~ ~ .foo { ... }` along to a browser. I don't know why we don't raise an error for combinators that aren't combinating other than ""we just never wrote that code"". Since @nex3 wrote most, if not all, of the selector code I'd like her to weigh in.
",chriseppstein,nex3
1836,2015-10-07 16:11:59,"That's really well said, Chris. It's funny now that most of the newer CSS programs start as CSS parsers as their first step, where we initially avoided tackling that. Like, the selectors are between you and your browser.

Definitely something to reconsider these days, but I'll also say @nex3 is the one I want to hear from.
",hcatlin,nex3
1831,2015-11-25 15:30:15,"Since browser support for nested `@media` queries is not ubiquitous, how about requiring the ""not"" keyword to appear on either _all_ media queries in a rule (if the parent has it) or on _none_ of them (if the parent does not).  That would make the intent explicit, and future-proof the style sheet for the day when manually nesting `@media` rules is no longer necessary.

Not nesting media queries _sometimes_ does not seem like a good idea.  At the very least it will lead to unexpected failures on IE.

So the example above would be an error.  This would be required:


",andrew-skybound,media
1820,2015-08-31 21:47:45,"<blockquote class=""twitter-tweet"" lang=""en""><p lang=""en"" dir=""ltr""><a href=""https://twitter.com/SassCSS"">@SassCSS</a> I was able to reproduce this issue on Windows 10.</p>&mdash; Barry Tormey (@barry_tormey) <a href=""https://twitter.com/barry_tormey/status/638448818980306944"">August 31, 2015</a></blockquote>

<script async src=""//platform.twitter.com/widgets.js"" charset=""utf-8""></script>
",chriseppstein,barry
1820,2015-08-31 21:47:45,"<blockquote class=""twitter-tweet"" lang=""en""><p lang=""en"" dir=""ltr""><a href=""https://twitter.com/SassCSS"">@SassCSS</a> I was able to reproduce this issue on Windows 10.</p>&mdash; Barry Tormey (@barry_tormey) <a href=""https://twitter.com/barry_tormey/status/638448818980306944"">August 31, 2015</a></blockquote>

<script async src=""//platform.twitter.com/widgets.js"" charset=""utf-8""></script>
",chriseppstein,SassCSS
1819,2015-08-28 22:07:05,"In SassScript, `(29 / 7 * 7) == 29` returns false. Which is bad because anyone who knows math (or in this case, @mknadler) can see this should be true instead.

This PR creates the concept of a floating point epsilon which is derived from the current sass script precision. Any two numbers will now be considered equal if they are within an `epsilon` of each other. If the stylesheet's precision is increased by 1, the epsilon gets divided by 10.

The default precision is `5` and so the default epsilon is `1 / (10 ** (5 + 1))` or `0.000001`.
",chriseppstein,mknadler
1819,2015-08-28 22:07:30,"Pending review from @nex3 
",chriseppstein,nex3
1817,2015-08-31 19:39:04,"re-opening for consideration of import v2. I actually think there's an expectation that import context does not work the same as selector nesting and I'd like to think about changing this. @nex3 what do you think about making the selector context outside the import not be a standard nesting for imported selectors. This would also allow those imported selectors to still define top-level constructs like mixins, etc.
",chriseppstein,nex3
1817,2016-05-20 21:56:34,"I think we're heading in a more `as mixin` direction with `@use` than anything where nested directives would make sense.
",nex3,use
1817,2017-02-22 00:26:23,"You can write an `@import` within a style rule, which is a pretty blunt instrument but works okay in many cases.",nex3,import
1810,2015-08-25 16:57:59,"**Important!**
When I run 'rake assets:precompile' all work fine! 
But, In config/environments/production.rb I wrote:
**config.assets.compile = true**

@import ""filename.css"";
not working to access filename.css in production

https://github.com/rails/rails/issues/21367#issuecomment-134556939
",Sega100500,import
1808,2015-08-25 12:29:18,"yeah!.. having same issue here..  i using this material icons. 
`@import url('https://fonts.googleapis.com/icon?family=Material+Icons');`
and it break on production.
",mkhairi,import
1807,2015-08-24 16:26:26,"I'm surprised by the way that extender selectors containing the child combinator `>` merge with `@extend`.  I'm not sure if this is a bug or by design.

First, consider the output when `>` is not used.

SCSS:



Output CSS:



Next, we'll add a `>` combinator:

SCSS:



Output CSS:



Now, neither of the two generated selectors are what I would expect, considering the fact the `.c .d` is a superselector of `.c > .d`.  Selector 2 has an extra `.d` after the `.c > .d`, and selector 3 strangely places an extra `.d` between the inserted `.a .b` at the end.

This would be ideal:



Or, if `.c > .d` can't merge into `.c .d` for some reason, I would expect it to fall back to this instead:


",andrew-skybound,extend
1807,2015-08-25 22:41:12,"@nex3 can you weigh in here? This is a superselector according to sass. I thought we basically choose the longest superselector in the extended selector to be shared with the extending selector, so I suspect this is a bug.


",chriseppstein,nex3
1806,2015-08-24 19:51:03,"@import url(""../../node_modules/bootstrap/dist/css/bootstrap.min.css"")@import url(""../../node_modules/font-awesome/css/font-awesome.min.css"") etc

Notice how after the first import the semicolon is missing, even though in the initial css it was there. So was the case after the second import.
",radu-matei,import
1806,2015-08-25 06:49:27,"This is the command I use: 
cmd.exe /c grunt -b ""C:\Users..."" --gruntfile ""C:\Users...Gruntfile.js"" sass:dist  

And this is part of the file that needs to be processed:
@charset ""utf-8"";

/_:::: Main Stylesheet ::::_/
$image-path: ""../.."";

@import 'reset.scss';
@import url(""../../node_modules/bootstrap/dist/css/bootstrap.min.css"");
@import url(""../../node_modules/font-awesome/css/font-awesome.min.css"");

Now, when the processing is complete, those semicolons (all 3) are missing.

And this is the grunt  task I use:


",radu-matei,charset
1806,2015-08-25 06:49:27,"This is the command I use: 
cmd.exe /c grunt -b ""C:\Users..."" --gruntfile ""C:\Users...Gruntfile.js"" sass:dist  

And this is part of the file that needs to be processed:
@charset ""utf-8"";

/_:::: Main Stylesheet ::::_/
$image-path: ""../.."";

@import 'reset.scss';
@import url(""../../node_modules/bootstrap/dist/css/bootstrap.min.css"");
@import url(""../../node_modules/font-awesome/css/font-awesome.min.css"");

Now, when the processing is complete, those semicolons (all 3) are missing.

And this is the grunt  task I use:


",radu-matei,import
1806,2015-08-25 17:00:13,"I'm getting exactly the same behaviour with Sass 3.4.17 Selective Steve. With compressed output style.

@import url(MyFontsWebfontsKit.css)html{font-size:62.5%} etc.

no semicolon after @import url()

It's stopping my fonts from loading! No console errors either.

It was fine before I moved / ugraded my dev env. 
Only just installed this too in a new dev environment and probably got all newer versions than what I previously had in my last setup. 

As a workaround and to save trawling about for the problem I've changed output style to 'expanded'. Which is not ideal but gets me out of a tight spot.

Here's my options and style that causes the problem etc:

sass : {
    dist : {
        options : {
            style : 'compressed'
        },
        files : {
            'css/main.css' : 'sass/main.scss'
        }
    }
}

@import 'MyFontsWebfontsKit.css';
html {
  box-sizing: border-box;
  font-size: 62.5%;
}

I'll wait and see what happens here..
",robchenski,import
1805,2015-11-15 21:55:57,"@chriseppstein Can you take a look at this? I'd like to get all the TODOs fixed or intentionally disabled before we merge.
",nex3,chriseppstein
1799,2015-08-19 01:30:22,"I found that ListLiteral nodes (particularly those parsed from an `@each` list), have the end_pos of their _first_ element, rather than the last. Using this patch [1], we can see:



For clarity, here's the positions of the string I gave it:



[1] patch file:


",srawlins,each
1794,2015-08-13 12:22:13,"Hi there,

I am trying to simplify my management upon importing a set of parcials and I am trying the following but its not working:



Doesn't variable interpolation inside @import work in SASS yet?

Thanks in advance
",Gespinha,import
1792,2015-08-14 20:47:36,"(a) Yes.

(b) Somewhat. @chriseppstein would be able to continue the language design, and [LibSass](https://github.com/sass/libsass) is in a good position to carry forward development efforts.

(c) There is quite a lot of API documentation, although in practice it doesn't seem to contribute to a lot of external contributions.
",nex3,chriseppstein
1782,2016-12-18 23:55:36,"I'm re-opening for now, but I need to talk to @chriseppstein about how we want to handle this. Due to the holidays, that may take a few weeks.",nex3,chriseppstein
1780,2015-07-20 08:15:19,"I currently use something similar to this feature in my projects, basically by replacing class definitions with `@mixin classname {}` **vs** `.classname {}`. I find on large projects, when using Bootstrap or Foundation, that being able to inject the class contents into semantic classes reduces the overhead of excessive extending selectors.

**_Example:**_



Recommended Extending Method:



Generated Selectors:



**_Injecting:**_

Using existing classes as @mixin:



Generated Selectors:



Something like this would be nice...


",joseorihuela,mixin
1780,2015-08-06 14:04:58,"Still not sure what `@inject` would do in your example.
",HugoGiraudel,inject
1780,2015-08-06 18:58:04,"@joseorihuela what you want is basically an `@extend` that removes the class itself from the source. I am not sure whether this is feasible, as you can't know whether the class is used anywhere (in your HTML). The problem is that as soon as your `@inject .navbar` would find `.navbar` it needs to exist in your code and therefore will be included in the compiled CSS.

But I think there might be a solution, that should also solve your use case:

`@import`ing files with direct output of any SCSS. You would basically just include the whole selectors without producing output.

### How that would look like:

File `_import-me.scss`



File `app.scss`



What this would produce:



### Usage with Bootstrap



Output:


",apfelbox,extend
1780,2015-08-06 18:58:04,"@joseorihuela what you want is basically an `@extend` that removes the class itself from the source. I am not sure whether this is feasible, as you can't know whether the class is used anywhere (in your HTML). The problem is that as soon as your `@inject .navbar` would find `.navbar` it needs to exist in your code and therefore will be included in the compiled CSS.

But I think there might be a solution, that should also solve your use case:

`@import`ing files with direct output of any SCSS. You would basically just include the whole selectors without producing output.

### How that would look like:

File `_import-me.scss`



File `app.scss`



What this would produce:



### Usage with Bootstrap



Output:


",apfelbox,inject
1780,2015-08-06 18:58:04,"@joseorihuela what you want is basically an `@extend` that removes the class itself from the source. I am not sure whether this is feasible, as you can't know whether the class is used anywhere (in your HTML). The problem is that as soon as your `@inject .navbar` would find `.navbar` it needs to exist in your code and therefore will be included in the compiled CSS.

But I think there might be a solution, that should also solve your use case:

`@import`ing files with direct output of any SCSS. You would basically just include the whole selectors without producing output.

### How that would look like:

File `_import-me.scss`



File `app.scss`



What this would produce:



### Usage with Bootstrap



Output:


",apfelbox,import
1780,2015-08-07 00:34:36,"@joseorihuela @apfelbox This is essentially the same thing as `@extend`ing a `%placeholder` selector. :)
",davidkpiano,extend
1780,2015-08-14 21:01:15,"This is along the lines of one of the features we're looking at for `@import` v2. We want to allow users to write something like a ""placeholder import"", where any imported styles work like placeholder selectors‚Äîthey're extendable, but they aren't compiled to CSS on their own.
",nex3,import
1779,2015-07-19 23:37:11,"There're 2 bugs I found when `@keyframe`s are nested inside of a placeholder selector.
1. They will always be compiled, even if you don't extend onto the placeholder selector. 
2. When you do extend onto the placeholder selector, it returns an error saying the following.
   
   
   
    I know this error happens because there isn't a property defined outside the `@keyframe`. But it shouldn't error because there aren't properties defined out in the `@keyframe`.

Here's a [live example](http://sassmeister.com/gist/bcfd5f396754e5eb6066)

This improvement would be invaluable to keep file size down, by not adding every single keyframe animation from libraries like [animate.css](https://daneden.github.io/animate.css/), and only add them when they're actually used.
",tjbenton,keyframe
1779,2015-07-20 01:47:21,"@cimmanon Good catch I changed it right before I created the issue, and forgot to update the selector used with the `@extend`. But it's updated now.

I understand that the error is happing because the `@keyframe` bubbled out which leaves `%keyframes--pulse` empty, and you can't extend onto an empty selector. My issue is that it bubbles out no matter what selector it's in. 

I love the ability to nest a `@keyframe` inside of a CSS selector, and have it bubble out of that selector because it makes perfect sense and it allows you to keep custom keyframe animations associated with the selector it's being used on. But it doesn't make sense for SASS placeholder selectors. To my knowledge **anything** (except `@keyframes`) that you put inside of a SASS placeholder selector doesn't get compiled unless that silent selector is extended onto. This is what makes them so powerful.

At my company we give our developer/designers a large list of animations that they can use, and this list of animations is a part of our boilerplate that we use for every project so we don't have to rewrite animations for every project. This is great for consistency across our sites. However not all of the animations are used on every single site. Without this feature this forces me to figure out what animations were used and which ones weren't, and then go to the animations file every time the project is complete delete all animation that aren't used one by one; instead of just not extending to them during development.
",tjbenton,extend
1779,2015-07-20 01:47:21,"@cimmanon Good catch I changed it right before I created the issue, and forgot to update the selector used with the `@extend`. But it's updated now.

I understand that the error is happing because the `@keyframe` bubbled out which leaves `%keyframes--pulse` empty, and you can't extend onto an empty selector. My issue is that it bubbles out no matter what selector it's in. 

I love the ability to nest a `@keyframe` inside of a CSS selector, and have it bubble out of that selector because it makes perfect sense and it allows you to keep custom keyframe animations associated with the selector it's being used on. But it doesn't make sense for SASS placeholder selectors. To my knowledge **anything** (except `@keyframes`) that you put inside of a SASS placeholder selector doesn't get compiled unless that silent selector is extended onto. This is what makes them so powerful.

At my company we give our developer/designers a large list of animations that they can use, and this list of animations is a part of our boilerplate that we use for every project so we don't have to rewrite animations for every project. This is great for consistency across our sites. However not all of the animations are used on every single site. Without this feature this forces me to figure out what animations were used and which ones weren't, and then go to the animations file every time the project is complete delete all animation that aren't used one by one; instead of just not extending to them during development.
",tjbenton,keyframes
1779,2015-07-20 01:47:21,"@cimmanon Good catch I changed it right before I created the issue, and forgot to update the selector used with the `@extend`. But it's updated now.

I understand that the error is happing because the `@keyframe` bubbled out which leaves `%keyframes--pulse` empty, and you can't extend onto an empty selector. My issue is that it bubbles out no matter what selector it's in. 

I love the ability to nest a `@keyframe` inside of a CSS selector, and have it bubble out of that selector because it makes perfect sense and it allows you to keep custom keyframe animations associated with the selector it's being used on. But it doesn't make sense for SASS placeholder selectors. To my knowledge **anything** (except `@keyframes`) that you put inside of a SASS placeholder selector doesn't get compiled unless that silent selector is extended onto. This is what makes them so powerful.

At my company we give our developer/designers a large list of animations that they can use, and this list of animations is a part of our boilerplate that we use for every project so we don't have to rewrite animations for every project. This is great for consistency across our sites. However not all of the animations are used on every single site. Without this feature this forces me to figure out what animations were used and which ones weren't, and then go to the animations file every time the project is complete delete all animation that aren't used one by one; instead of just not extending to them during development.
",tjbenton,keyframe
1779,2015-07-21 01:40:12,"I completely understand that you can get this to (quasi) work via a mixin. Here's an [demo](http://sassmeister.com/gist/b567c9408ef7782d1cb8) of how you can use a mixin to hack the desired outcome. 

If you take a look at this [demo](http://sassmeister.com/gist/b567c9408ef7782d1cb8) you will see that you **can** prevent the `@keyframes` from being compile by simply creating a mixin (`animation`) that adds the name(`$name`) of the animation passed to it, to a global list (`$animations`) that holds a list of animations that you have used. Then use another mixin(`placeholder-animation`) that has the keyframes inside of it wrapped in a if statement that checks the global list (`$animations`) and if it's found then write out the `@keyframes`.

As you can see it works. However there is one big catch to making this hackey work around actually work, and that is that you have to call the `animation` mixin before you declare the `placeholder-keyframes`. If you call `@include animation(shake)` after the declared `@include placeholder-animation(shake){...}` then it doesn't output the `@keyframes shake{...}` like it would if this functionality was added to the `@extend`. Before you say anything, I understand that it's not outputting the keyframes because the `placeholder-animations(shake)` is checking to see if `shake` is in the `$animations` list; and it's not in the list yet because it hasn't been added yet by `@include animations(shake)`. 

In this example you can see that the `@extend` part of the `animation` mixin works correctly by extending `.bar` onto `%u-animation--shake`, which is exactly what I want to happen. I just want it to include the `@keyframes` when and only when the placeholder selector `%u-animation--shake` has been extended onto. 

To my knowledge there's no way to check to see if a selector has been extended onto inside of the selector. If there was then I could add a simple check inside of the silent selector(`%u-animation--pulse`) and then output the keyframes. I'm not saying there should be a function that you can use to check if a selector was extended on to, although that would be another solution for this problem. But I don't know when else it would get used.
",tjbenton,keyframes
1779,2015-07-21 01:40:12,"I completely understand that you can get this to (quasi) work via a mixin. Here's an [demo](http://sassmeister.com/gist/b567c9408ef7782d1cb8) of how you can use a mixin to hack the desired outcome. 

If you take a look at this [demo](http://sassmeister.com/gist/b567c9408ef7782d1cb8) you will see that you **can** prevent the `@keyframes` from being compile by simply creating a mixin (`animation`) that adds the name(`$name`) of the animation passed to it, to a global list (`$animations`) that holds a list of animations that you have used. Then use another mixin(`placeholder-animation`) that has the keyframes inside of it wrapped in a if statement that checks the global list (`$animations`) and if it's found then write out the `@keyframes`.

As you can see it works. However there is one big catch to making this hackey work around actually work, and that is that you have to call the `animation` mixin before you declare the `placeholder-keyframes`. If you call `@include animation(shake)` after the declared `@include placeholder-animation(shake){...}` then it doesn't output the `@keyframes shake{...}` like it would if this functionality was added to the `@extend`. Before you say anything, I understand that it's not outputting the keyframes because the `placeholder-animations(shake)` is checking to see if `shake` is in the `$animations` list; and it's not in the list yet because it hasn't been added yet by `@include animations(shake)`. 

In this example you can see that the `@extend` part of the `animation` mixin works correctly by extending `.bar` onto `%u-animation--shake`, which is exactly what I want to happen. I just want it to include the `@keyframes` when and only when the placeholder selector `%u-animation--shake` has been extended onto. 

To my knowledge there's no way to check to see if a selector has been extended onto inside of the selector. If there was then I could add a simple check inside of the silent selector(`%u-animation--pulse`) and then output the keyframes. I'm not saying there should be a function that you can use to check if a selector was extended on to, although that would be another solution for this problem. But I don't know when else it would get used.
",tjbenton,include
1779,2015-07-21 01:40:12,"I completely understand that you can get this to (quasi) work via a mixin. Here's an [demo](http://sassmeister.com/gist/b567c9408ef7782d1cb8) of how you can use a mixin to hack the desired outcome. 

If you take a look at this [demo](http://sassmeister.com/gist/b567c9408ef7782d1cb8) you will see that you **can** prevent the `@keyframes` from being compile by simply creating a mixin (`animation`) that adds the name(`$name`) of the animation passed to it, to a global list (`$animations`) that holds a list of animations that you have used. Then use another mixin(`placeholder-animation`) that has the keyframes inside of it wrapped in a if statement that checks the global list (`$animations`) and if it's found then write out the `@keyframes`.

As you can see it works. However there is one big catch to making this hackey work around actually work, and that is that you have to call the `animation` mixin before you declare the `placeholder-keyframes`. If you call `@include animation(shake)` after the declared `@include placeholder-animation(shake){...}` then it doesn't output the `@keyframes shake{...}` like it would if this functionality was added to the `@extend`. Before you say anything, I understand that it's not outputting the keyframes because the `placeholder-animations(shake)` is checking to see if `shake` is in the `$animations` list; and it's not in the list yet because it hasn't been added yet by `@include animations(shake)`. 

In this example you can see that the `@extend` part of the `animation` mixin works correctly by extending `.bar` onto `%u-animation--shake`, which is exactly what I want to happen. I just want it to include the `@keyframes` when and only when the placeholder selector `%u-animation--shake` has been extended onto. 

To my knowledge there's no way to check to see if a selector has been extended onto inside of the selector. If there was then I could add a simple check inside of the silent selector(`%u-animation--pulse`) and then output the keyframes. I'm not saying there should be a function that you can use to check if a selector was extended on to, although that would be another solution for this problem. But I don't know when else it would get used.
",tjbenton,extend
1778,2015-07-18 01:02:05,"Spurred by #1774, I started thinking about how messy interpolation is in SassScript at the moment and how to clean it up. This issue is the result of that thought process. I'm especially interested in hearing what other implementors have to say, but community members are welcome to chime in as always.
### History

Long ago, when only the indented syntax existed, SassScript couldn't be used directly in property values. In order to give properties dynamically-generated values, they had to be interpolated using `#{}`. Eventually, we figured out how to make SassScript compatible enough with CSS property values that we decided to just let properties use it directly. For backwards compatibility, these properties still needed to support interpolation, so we came up with a way to have interpolation work more or less anywhere in a SassScript expression.

Unfortunately, working ""more or less anywhere"" was a parsing nightmare, and the specifics of where interpolation can be used and its effect on the surrounding script are bizarre and arcane. @chriseppstein and I want to fix that by substantially limiting the places `#{}` can appear and clarifying exactly what it does to the surrounding script.
### Proposal

I propose that, as today, `#{}` be allowed either within strings (quoted or unquoted) or on its own. However, its effect will be limited to the strings that contain it or to its own value. Specifically:
- When parsing or evaluating a quoted string, treat interpolation the same way it's treated today.
- When parsing an identifier, treat interpolation as though it's an alphabetic character. When evaluating an interpolated unquoted string, concatenate the literal identifier characters with the values of the interpolated segments.
- Otherwise, parse an interpolation as an individual expression. When evaluating it, return its value as an unquoted string.

Here are some examples (I'm including quotes for unquoted strings in the output to clarify their extents):
- `""a #{b} c""` would continue to produce `""a b c""`.
- `a#{b}c` would continue to produce `""abc""`.
- `a #{b}c` currently produces `""a bc""` but would produce `""a"" ""bc""`.
- `a#{b} c` currently produces `""ab c""` but would produce `""ab"" ""c""`.
- `a b#{c}d e` currently produces `""a bcd e""` but would produce `""a"" ""bcd"" ""e""`.
- `a #{b} c` currently produces `""a b c""` but would produce `""a"" ""b"" ""c""`.
### Design decisions

The primary question when figuring out how to handle this was how much interpolation should be restricted. @chriseppstein and I agree that interpolation in SassScript reads strangely in many situations, but we ended up deciding to continue allowing it in most places. One major reason for this is backwards-compatibility: no matter what we do, the process of making this change will be painful, and any functionality we can preserve will help mitigate that pain. But there were also compelling use cases for retaining interpolation in various situations.
#### Interpolation in unquoted strings

It was tempting to restrict interpolation for use _only_ in quoted strings. Interpolation in unquoted strings can be mimicked using `+`, and allowing it in unquoted strings could produce the incorrect impression that interpolation is performed before any other SassScript resolution. However, we decided to allow this for several reasons:
- Backwards compatibility, as described above.
- Similarity with quoted strings. It's not always obvious that unquoted strings and quoted strings are the same sorts of value under the hood, but sharing capabilities helps reinforce that idea.
- Similarity with other identifiers. Interpolation can be used in almost all most non-SassScript contexts where identifiers appear, most notably property names, so it's natural that users would think that all Sass identifiers can be interpolated.
- Vendor prefixes. It would be very difficult to dynamically choose vendor prefixes for function names or other values, since `-` on its own is not an identifier.
- Aesthetics. Although `font-stretch: $amount + -condensed` is legal, it's less clear and less pleasant than `font-stretch: #{$amount}-condensed`.
#### Interpolation outside of strings

The other big decision was whether to allow a bare interpolation expression that wasn't attached to any string at all. Both of us were fine with deprecating this until we remembered one situation where it's by far the best solution: a slash delimited. Right now when users want a slash delimiter for the values of properties such as `font`, and they want one of its values to be dynamic, by far the best way to do that is with interpolation: `font: 12pt/#{$var} sans-serif`.

We considered coming up with a new way to produce a literal slash without using interpolation, but we didn't find anything that was clear enough to warrant the migration cost for all the stylesheets using the current method. In the end, we decided that since the current method looks pretty decent and can work with a more reasonable definition of standalone interpolation, we would leave it as-is.
### Deprecation process

Any change we make here will be backwards-incompatible. Since interpolation is such an old feature, we have to be very careful to only surface deprecation warnings to people whose stylesheet semantics will actually change (or as close as possible), and to provide them with actionable ways to fix those stylesheets. This is complicated by the fact that the effects of this change are difficult to reason about locally; an expression like `a #{b} c` remains valid, and whether it's problematic in practice depends on things like whether its value is used in some string-specific way.

I haven't fully thought through how to handle the deprecation, but a set of heuristics seems like a good place to start. First, let S1 be the value of an expression containing interpolation under the old rules, and E the value of the same expression, to the extent that S1 covers. Let S2 be the conversion of E to CSS.

For example, suppose the expression in question is `a #{b} + c`. S1 is `""a b + c""`, E is `""a"" ""bc""`, and S2 is `""a bc""`.
- If S1 and S2 aren't semantically identical when interpreted as CSS, issue a warning. This means that `#{a} + b` would emit a warning since S1 is `""a + b""` but S2 is `""ab""`. However, `#{a} b c` would not emit a warning, since S1 and S2 are both `""a b c""`. Note that an expressions like `#{a} / b` _should not_ emit a warning here, since we know that it will produce `a/b` under the new semantics.
- Otherwise, if E is not a string, set an ""interpolated"" flag on S1. If any operation is performed on S1 that wouldn't first convert it to a string, emit a warning.

Obviously this requires a more explicit notion of how to detect when S1 and S2 are CSS-semantically identical, and how to tell which operations would be a problem in the second case. But I think it's a good starting point.
",nex3,chriseppstein
1778,2015-08-25 01:29:27,"@mgreter @xzyfer thoughts?
",chriseppstein,xzyfer
1778,2015-08-25 01:29:27,"@mgreter @xzyfer thoughts?
",chriseppstein,mgreter
1777,2015-07-17 19:46:01,"I assume that you'd like sass to output something like:



Obviously for this simple use case, it's easy to imagine Sass doing this for you. However, In a complex project, the permutations will expand exponentially. This happens with certain uses of `@extend` and it's why people tend to avoid it.

In such cases, browser which know the current document structure can resolve these value much more efficiently instead of precomputing all possible selectors like Sass would need to do.

This is, in fact, exactly what CSS Variables do and you can use them _right now_ in firefox and soon in chrome. http://caniuse.com/#feat=css-variables
",chriseppstein,extend
1776,2015-07-15 11:59:18,"It would be nice to be able to declare a step-size when looping through a number with a `@for` block. I'm thinking maybe something like this:



Would be an easier / more readable / more declarative way to write:


",thany,for
1769,2015-10-01 09:02:18,"Dunno if this applicable here but @endoplasmic provided a solution in #1768:

<code>This should get you up and running: sudo gem install -n /usr/local/bin GEM_NAME_HERE</code>
",slunt32,endoplasmic
1769,2015-10-06 16:01:26,"thanks @slunt32 @endoplasmic saved me a headache!
",4everyoungz,endoplasmic
1769,2015-10-08 17:54:27,"thanks @slunt32 @endoplasmic
",frank-castro,endoplasmic
1769,2015-10-12 15:10:26,"No problem guys, except don't thank me, all the credit goes to @endoplasmic
",slunt32,endoplasmic
1767,2015-07-17 21:15:10,"> It's not clear what this means. Could you be more specific?

It's clearly the case that a variable declared outside of, say, an `@if` or a `@function` should be assignable from within that block. Nested rules look the same, so they work the same way.

> CSS is a declarative language, not a programming one. Similarities with programming languages are typically considered irrelevant in CSS-related discussions (and SCSS as a preprocessor has much more in common with CSS than with programming languages).
> 
> I have experience in JS, PHP, and C++, and I'm a web developer since 2002, but this behavior is still unexpected for me from **CSS** perspective. It's like if setting background for `UL > LI` would affect background of `UL` ‚Äî totally unexpected and literally confusing. CSS variables (currently implemented in Gecko) do not allow this as well: they can be overridden solely top down, not bottom-up.
> 
> What is the usecase for **altering** parent-rule variable by a declaration inside a nested rule?

Sass is not CSS, and Sass variables are _very much_ not CSS variables. In fact, the reason the syntax for CSS variables is so different than that for Sass variables is to reflect the difference in semantics: the CSS folks wanted people to understand visually that the cascading nature of CSS variables were distinct from the procedural nature of preprocessor variables.

Programming languages are very relevant to Sass's design, precisely because Sass brings various programming conventions into the world of CSS. There's no way we could implement variables with the same semantics as CSS variables; we don't have the document context necessary to make that work. Given that, it makes a lot of sense to implement them with the same semantics as the popular languages whose semantics Sass is importing.
",nex3,if
1767,2015-07-17 21:15:10,"> It's not clear what this means. Could you be more specific?

It's clearly the case that a variable declared outside of, say, an `@if` or a `@function` should be assignable from within that block. Nested rules look the same, so they work the same way.

> CSS is a declarative language, not a programming one. Similarities with programming languages are typically considered irrelevant in CSS-related discussions (and SCSS as a preprocessor has much more in common with CSS than with programming languages).
> 
> I have experience in JS, PHP, and C++, and I'm a web developer since 2002, but this behavior is still unexpected for me from **CSS** perspective. It's like if setting background for `UL > LI` would affect background of `UL` ‚Äî totally unexpected and literally confusing. CSS variables (currently implemented in Gecko) do not allow this as well: they can be overridden solely top down, not bottom-up.
> 
> What is the usecase for **altering** parent-rule variable by a declaration inside a nested rule?

Sass is not CSS, and Sass variables are _very much_ not CSS variables. In fact, the reason the syntax for CSS variables is so different than that for Sass variables is to reflect the difference in semantics: the CSS folks wanted people to understand visually that the cascading nature of CSS variables were distinct from the procedural nature of preprocessor variables.

Programming languages are very relevant to Sass's design, precisely because Sass brings various programming conventions into the world of CSS. There's no way we could implement variables with the same semantics as CSS variables; we don't have the document context necessary to make that work. Given that, it makes a lot of sense to implement them with the same semantics as the popular languages whose semantics Sass is importing.
",nex3,function
1761,2015-06-30 23:29:11,"Subtraction and hyphens tripped me up for a while today before I realized that `margin: 2em-1em` will not perform subtraction. I thought that since [Division and /](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#division-and-slash) was so well documented, then it was the only exception to the operators. :stuck_out_tongue: not so!

I'm not an authority on the statements I made in this change, but I used @nex3's explanation in #853 as guidelines.
",srawlins,nex3
1760,2015-07-01 15:43:15,"thank you, apparenly I was searching the wrong terms.

The last comment says it was addressed in 3.4. Yet using sassmeister with compiler set to 3.4.14 (was on 3.2 by default) I can't seem to get it to function using just the ampersand, although it does function using the `@at-root` method.

Is there any documentation that describes the change in syntax when using ampersand as a compound selector instead of by itself?
",Zxurian,at-root
1757,2015-06-25 21:20:57,"What about omitting `@include` when calling a mixin not followed by a `{}` block?



It does not contain a colon followed by a value, so it's certainly **not** a `property: value;` declaration.

And it is not followed by a `{}` block, so it's certainly **not** a nested rule. So there is no any ambiguity, as well as, unlike the originally-proposed transparent-property syntax, it cannot be confused with regular properties or conflict with future standard CSS properties in any way.

Thanks.

P. S. Please let me know if it'd be better to report a new issue related exactly to omitting `@include`.
",Marat-Tanalin,include
1757,2015-06-25 21:50:54,"#366 is almost entirely about **prefixes/postfixes** as an alternative to `@include`, while I propose to **omit** `@include` entirely.

I found just three comments related to omitting `@include`: [1](https://github.com/sass/sass/issues/366#issuecomment-21673261), [2](https://github.com/sass/sass/issues/366#issuecomment-21673443), [3](https://github.com/sass/sass/issues/366#issuecomment-11549365).

The first one states that ""it has all the same language issues as the + did"". But it's unclear what exact issues he means. As I said, there is no ambiguity: it's certainly not a declaration and not a nested rule.

The second one says that it looks ""like a property with arguments more than a function"". But there are no properties with arguments ‚Äî neither in CSS nor in SCSS, so this does not look like a substantive argument.

The third comment has proposed to ""add short syntax only for mixins without content block"" which is in line with what I've proposed.
",Marat-Tanalin,include
1757,2015-07-03 22:38:07,"So what about omitting `@include` given what I said in my previous [comment](https://github.com/sass/sass/issues/1757#issuecomment-115409145)? Thanks.
",Marat-Tanalin,include
1755,2015-06-24 06:06:26,"Hey,

Trying to create some classes to define opacity with the following code:

<code>
$i : 0;
@while $i <= 1 {
  .opacity-#{$i*100} {
    opacity: $i !important;
  }
  $i : $i + 0.1;
}
</code>

But I get the following error:

Invalid CSS after "".opacity-30."": expected class name, was ""0""

Looks like it's adding a period after while... not sure what might be causing this.

Any ideas?

Thanks!
",vmuhincsod,while
1755,2015-06-24 22:51:14,"Apparently rounding is the answer....
<code>
$i : 0;
@while $i <= 1 {
  .opacity-#{round($i*100)} {
    opacity: $i !important;
  }
  $i : $i + 0.1;
}
</code>
",vmuhincsod,while
1754,2015-06-23 20:00:33,"According to [this post](http://www.w3.org/blog/CSS/2015/06/19/cascade4-fpwd/), CSS is adding support for `supports()` annotations to CSS `@import` directives. Sass should support these in the same way it supports `media()` annotations.
",nex3,import
1748,2015-06-18 20:29:33,"Thank you so much for this tweet: https://twitter.com/chriseppstein/status/611606523698003968.

It would be great to formalize your support with the inclusion of @CoralineAda's code of conduct.

Thanks for your consideration.
",CollectiveInclusion,CoralineAda
1745,2015-06-14 11:07:02,"I use sass in python under flask-assets (webassets)...
i have @import directive with relative import file in my theme.scss 

i.e.
@import 'btn-o';

flask-assets over webassets run sass with following parameters

<pre>
/usr/local/bin/sass --stdin --stylecompressed --line-comments --cache-location /app/src/spf/static/assets/.webassets-cache/sass--scss
</pre>


when i'm using sass 3.4.13 evething work OK,

 but when i'm use sass 3.4.14, i have error

<pre>
Failed, error was: sass: subprocess had error: stderr=Error: File to import not found or unreadable: ./btn-o. on line 1 of standard input
  Use --trace for backtrace. , stdout=, returncode=65
</pre>
",Slach,import
1745,2015-06-18 03:01:56,"I can also confirm relative @import's are broken when piping into `sass --stdin` on version 3.4.14. Version 3.4.13 works fine.
",clausmith,import
1745,2015-06-19 23:26:22,"This is, more or less, intended. In 3.4, we stopped including the working directory on the load path by default because it didn't make sense that `@import` resolution was sensitive to where you ran the command from. There were a couple little places that still had remnants of that behavior, though, and those were rooted out in 3.4.14.

I didn't think there was going to be any executable behavior that would be affected by that change, but it looks like you found a place. If you think about it, the new behavior does make sense: the ""file"" with the `@import` is from STDIN, which has no location, so there's nothing for the `@import` to be relative to. If you want to be able to import from a particular directory, that directory should be passed in via `-I`.

That said, this _is_ a breaking change, which we shouldn't make in a patch version. I'll update it to print a warning for now.
",nex3,import
1742,2015-06-08 03:31:31,"The [`scss-lint` project](https://github.com/brigade/scss-lint) performs a number of static checks against SCSS
code to find style offenses.

`Sequence` objects were returning `nil` when calling `#line`. This was
because `Sequence#line=` was not recording the actual line in an
instance variable like its superclass `AbstractSequence`. Fix this by ensuring the line
number is stored in `@line`.

This will allow the `scss-lint` project to implement
https://github.com/brigade/scss-lint/issues/456
",sds,line
1739,2015-06-04 21:26:50,"@lunelson project **sass-list-maps** has support for nested list maps, using the `map-get-z function`. 
https://github.com/lunelson/sass-list-maps

The following example says it all:



FACT: Up to a point, even when using maps extended naming conventions come into play. Using `map-get-z` we can actually use structure to categorize versus naming conventions. I vote for structure every time. 



I don't mind using the plug-in, but I think that this is a feature that Sass should support natively. 
",blackfalcon,lunelson
1738,2015-06-03 20:15:26,"What you're doing is generating invalid CSS, and Sass won't let you.  Not sure what you're trying to accomplish here, but if you want to debug it, use the `@debug` directive.


",cimmanon,debug
1737,2015-06-01 15:35:29,"## Feature

Give Sass mixins / functions the ability to find & use CSS properties in the selector block they're used in: with `$this`\* & Sass map syntax.

\* _This map name works¬†& seems transparent, but if there's a better option, I'm not tied to this name._
## Code Examples

The following code blocks present sample syntax for `$this` and a simple (simplistic, probably :smile:) use case.
### Syntax

What I'm suggesting could be handled in a reasonably simple way: `$this` is a Sass map with its first key-value pair as `selector: '.current-selector .string'` and the other key-value pairs being CSS property-value pairs. This exposes `$this` data through familiar API: Sass map functions.

I could see adding a `parent: ()` map to `$this` (with subsequent ""grandparents"" as nested parent maps). These maps would be created by explicit Sass nesting, not by any heavy CSS scanning work.





This would expose parents via `map-get($this, parent)`. The other option I'd find useful is $map[dot]key. This would be (IMO) a big win for all Sass map handling, but that's a separate issue, I suppose. üòÄ
### Use Case


## Potential Issues

I can see some potential issues related to supporting a feature like this:
### Handling inherited properties

This is a follow-up feature request I could see devs asking for: ""This element inherited its font-size from its parent: how can I access & use that value?"" I'm all about saying no to that request. Unless it's in a Sass nesting context. As described above, I'd like to add that as a nested `parent: ()` map inside of the `$this` map.
### Error reporting

I think most of the existing Sass errors will make this manageable: can't math a string, etc. As with maps, validation could be left up to the user: `@if map-has-key($this, 'font-size')` etc.
### Properties written after the `@include`

Ideally, the entire selector block would be `$this`; writing a property after calling a `$this`-dependent mixin/function would produce the same code as writing that property before the mixin/function. Having the property written after a `$this`-dependent mixin would override any attempt to output that same property with the mixin.

That brings up the issue of devs attempting to write ""recursive"" mixins with `$this`:



The issue here is that properties defined after the mixin is called would affect its output, but also override it. One answer to this is ""refactor your mixins so you don't need to override their output like that."" Another answer would be to throw an error: ""You can't write recursive property mixins"" but that would require a LOT more contextual awareness than just exposing an object & letting devs do what they need to. I'm leaning toward calling this order/override issue a ""user error"" and teaching people to use the tool correctly.
### Handling `!important` properties

One obvious thing: `!important` should not be given a `$this`-specific function (one that would encourage devs to use this CSS flag for a Sass-y purpose). `!important` will need to be stripped out in order to treat the CSS values as the values/strings/lists they are. If we're going to treat `$this` as an object and make devs use it thoughtfully, there's no reason to ""re-insert"" `!important` - they're writing their mixins/functions & can include it there if they've got good reason to do so. 
### Properties set by other mixins in the selector block

If I set the current `padding-top` with a mixin that calculates a number based on a vertical rhythm measurement and `$this->font-size`, then try to use a `margin` mixin that relies on `$this->padding-*` values, will generated values be available in `$this`? Or worse, two competing `$this`-dependent mixins attempting to set & use matching properties. I'm thinking, ""no, `$this` only gets explicitly written values."" 

\* _Yep, I know `$map->key` isn't Sass syntax; just using it as shorthand in this issue._

I've been working through some use cases (mostly type-scale & vertical rhythm related) where this feature would be really useful. I'm a front-end dev and have no idea how to actually write this for the compiler, but I wanted to make a recommendation here, now that we're almost entirely at Ruby/LibSass feature parity & getting ready for new features. Thanks!
",jdsteinbach,if
1737,2015-06-01 15:35:29,"## Feature

Give Sass mixins / functions the ability to find & use CSS properties in the selector block they're used in: with `$this`\* & Sass map syntax.

\* _This map name works¬†& seems transparent, but if there's a better option, I'm not tied to this name._
## Code Examples

The following code blocks present sample syntax for `$this` and a simple (simplistic, probably :smile:) use case.
### Syntax

What I'm suggesting could be handled in a reasonably simple way: `$this` is a Sass map with its first key-value pair as `selector: '.current-selector .string'` and the other key-value pairs being CSS property-value pairs. This exposes `$this` data through familiar API: Sass map functions.

I could see adding a `parent: ()` map to `$this` (with subsequent ""grandparents"" as nested parent maps). These maps would be created by explicit Sass nesting, not by any heavy CSS scanning work.





This would expose parents via `map-get($this, parent)`. The other option I'd find useful is $map[dot]key. This would be (IMO) a big win for all Sass map handling, but that's a separate issue, I suppose. üòÄ
### Use Case


## Potential Issues

I can see some potential issues related to supporting a feature like this:
### Handling inherited properties

This is a follow-up feature request I could see devs asking for: ""This element inherited its font-size from its parent: how can I access & use that value?"" I'm all about saying no to that request. Unless it's in a Sass nesting context. As described above, I'd like to add that as a nested `parent: ()` map inside of the `$this` map.
### Error reporting

I think most of the existing Sass errors will make this manageable: can't math a string, etc. As with maps, validation could be left up to the user: `@if map-has-key($this, 'font-size')` etc.
### Properties written after the `@include`

Ideally, the entire selector block would be `$this`; writing a property after calling a `$this`-dependent mixin/function would produce the same code as writing that property before the mixin/function. Having the property written after a `$this`-dependent mixin would override any attempt to output that same property with the mixin.

That brings up the issue of devs attempting to write ""recursive"" mixins with `$this`:



The issue here is that properties defined after the mixin is called would affect its output, but also override it. One answer to this is ""refactor your mixins so you don't need to override their output like that."" Another answer would be to throw an error: ""You can't write recursive property mixins"" but that would require a LOT more contextual awareness than just exposing an object & letting devs do what they need to. I'm leaning toward calling this order/override issue a ""user error"" and teaching people to use the tool correctly.
### Handling `!important` properties

One obvious thing: `!important` should not be given a `$this`-specific function (one that would encourage devs to use this CSS flag for a Sass-y purpose). `!important` will need to be stripped out in order to treat the CSS values as the values/strings/lists they are. If we're going to treat `$this` as an object and make devs use it thoughtfully, there's no reason to ""re-insert"" `!important` - they're writing their mixins/functions & can include it there if they've got good reason to do so. 
### Properties set by other mixins in the selector block

If I set the current `padding-top` with a mixin that calculates a number based on a vertical rhythm measurement and `$this->font-size`, then try to use a `margin` mixin that relies on `$this->padding-*` values, will generated values be available in `$this`? Or worse, two competing `$this`-dependent mixins attempting to set & use matching properties. I'm thinking, ""no, `$this` only gets explicitly written values."" 

\* _Yep, I know `$map->key` isn't Sass syntax; just using it as shorthand in this issue._

I've been working through some use cases (mostly type-scale & vertical rhythm related) where this feature would be really useful. I'm a front-end dev and have no idea how to actually write this for the compiler, but I wanted to make a recommendation here, now that we're almost entirely at Ruby/LibSass feature parity & getting ready for new features. Thanks!
",jdsteinbach,include
1731,2015-05-28 01:55:28,"But I don't want to output a map value to CSS. The `a { content: """" }` in my primary example was just a debugging attempt since Sassmeister doesn't support `@debug`.

The issue is that trying to dynamically set a map's key value (or increment it if it exists) and then check to see if it's 1 doesn't work.
",stowball,debug
1731,2015-05-31 00:42:46,"I can't make it any simpler than this: http://sassmeister.com/gist/415d43ce191c38546e7f



The output of which should be:



For some reason, the `@if (map-has-key($_percentage-class-instances, $selector)) {` line, although it will now never match because I removed the other loop (so shouldn't make any difference), breaks in 3.4.

If you remove the if/else and just have the `$_percentage-class-instances: map-merge($_percentage-class-instances, ($selector: 1));` then the `$selector` key will be 1, and the selector output because `@if (map-get($_percentage-class-instances, $selector) == 1) {` matches.

But for some reason, the check for `map-has-key` breaks the map in 3.4, but works in 3.3 and LibSass
",stowball,if
1729,2015-05-23 02:37:57,"The behaviour of interpolation in `@supports` has changed 3.4.14. I expect the new behaviour is the intended behaviour given previous similar issues.



Ruby Sass 3.4.13



Ruby Sass 3.4.14


",xzyfer,supports
1727,2015-05-21 20:31:25,"You created a list of maps. I think the syntax you used to use was a list of lists:



Note that without the colons, a list of lists acts a lot like a map in an `@each` directive.
",chriseppstein,each
1725,2015-05-15 11:52:52,"Not sure if this is intended behaviour, but seems odd. I want several concrete blocks that have most sub-elements in common, but with some variations, so am looking at @extends. Trying something like the following:



Expecting: 



but geting only



If I replace the nested selector with (for example) `& .child`, I get what I'd expect - an HTML child selector correctly shared by the @extends. Also, if I turn `%top-level` into a concrete class, the concatenated class works for it, but not its extension. I.e.:



gives:


",TheEponymousBob,extends
1725,2015-05-15 12:24:38,"Thanks - I checked that, and like I said, it shows the concatenation does work for the class itself, but my issue remains - we don't get a `.concrete__sub-item` rule via `@extends`.
",TheEponymousBob,extends
1719,2015-05-07 15:41:48,"Using sass 3.4.13 in a rails app I'm hitting an error when running `rake assets:precompile`.

The error is `Sass::SyntaxError: Invalid CSS after ""@charset ""UTF-8"""": expected ""{"", was "";""`.  I've gone through all of the app assets and all of the assets in gems and removed any instance of `@charset ""UTF-8"";` and the error still occurs.

Can anyone point me towards where I should be looking next or what I should be looking for?
",alexwhitman,charset
1718,2015-05-08 21:37:21,"Duplicate of #1469.

@Wordius Check out the questions I asked @WillsB3 on that issue, and provide your own answers to them there.
",nex3,WillsB3
1716,2015-05-03 02:16:51,"cc-ing @chriseppstein, just in case the use of Compass has something to do with this. 

The stylesheet in question is from one of my users, so I can't disclose it without his permission. It's far too complex for me to remove the Compass dependency and test compiling with just Sass.
",bdkjones,chriseppstein
1714,2015-04-30 17:08:56,"Current compass output with selector inside the parenthesis:



Uncompiled scss:



w3 documents the `@page` directive should be written like this with the selector outside of the parenthesis:



This is an unfortunate inconsistency in formatting from w3. Other directives are written with selectors inside the parenthesis. Confusing:


",slwfleming,page
1714,2015-05-09 00:58:01,"Nesting only works with selectors and other selectors. `@page` is a directive, so Sass treats it like any other directive and moves it out to the root of the document. If you want to use a selector in `@page`, you'll need to do so manually.
",nex3,page
1713,2015-04-30 13:06:27,"The `@extend` directive is working as expected here. Here's the breakdown:
- `@extend .foo;`
  - when extending selector has a pseudoclass of `:hover`, set `color: blue` (from `.foo:hover`)
  - when extending selector has a class of `.bar` and `.baz`, set `color: red`
- `@extend .bar;`
  - when extending selector has a class of `.foo` or matches `p.extended` (since that extended `.foo`), and has a class of `.baz`, set `color: blue`
- `@extend .baz`
  - when extending selector has a class of `.foo` or matches `p.extended`, and has a class of `.bar` or matches `p.extended` (since that extended `.bar`), set `color: blue`
- remove redundant `p.extended.foo.bar, p.extended.foo.baz, p.extended.bar.baz` selectors since `p.extended` extends `.foo, .bar, .baz`

You're doing some complicated extending here. Try extending only `%placeholder` selectors:



Or something similar. I do not know what you're intending to do, or how you're using this in real life, but hopefully the above example will help guide you.
",davidkpiano,extend
1711,2015-04-29 08:53:47,"This is more of an observation than a bug report, but I think you ought to consider the well being and the mental health of all the teams working with sass gems. The more recent releases cause a lot of headache, the behaviour we rely on keeps changing from one release to another. As a result we all have to coordinate which version of the gem to use across multiple work stations. If one of us is working on multiple sass projects that use different gem version, we have to switch back and forth.

Gem upgrades result in a lot of diff noise. Introduction of the @charset declaration now breaks view systems that use aggregators. And so on. Perhaps for every new feature you introduce, you should provide an option to switch it of via config. 
",hypeJunction,charset
1708,2015-04-21 20:16:37,"This is not intended, and not even really feasible. Although in this case it's clear which selectors get extended where and what the precedence is, that's not always the case; in more complex cases, this will get extremely ambiguous. Also, all SassScript resolution is done strictly before any `@extend` resolution, which is necessary to support things like extending dynamically-generated selectors.
",nex3,extend
1702,2015-04-17 23:59:27,"Hello there,
today i managed to reproduce a bug / a strange behavior with sass lists in combination with an @each-loop.
# **tl;dr**:

![cczm7rbw4aa8djg](https://cloud.githubusercontent.com/assets/1070998/7213056/23f4d6e0-e573-11e4-9430-5782f4cb7ee9.png)
## Example SCSS:

![bildschirmfoto 2015-04-18 um 01 42 00](https://cloud.githubusercontent.com/assets/1070998/7212740/3e6d1386-e56c-11e4-8022-1148a63ac393.png)
## Output: CSS

![bildschirmfoto 2015-04-18 um 01 42 12](https://cloud.githubusercontent.com/assets/1070998/7212741/409ff902-e56c-11e4-9d32-2ce0061259b3.png)

As you can see, there's a problem when you got a (so thought and structured) multidimensional sass list with only one nested list inside: 
- if there's a seperating comma after the nested list, the output code will be given as everybody would expect it. 
- if this seperator is missing, the @each-loop seems to be malforming our nested list into a single list with single comma-seperated values -> the output code is wrong (see compiled preview above)

When using a real multidimensional nested sass-list with more than 1 list, everything is all right. in both cases: with and without a seperating comma at the end of the last nested list.

As you can see, i registered this behavior while developing a font face loop using sass lists, where also a mixin is used within the loop. (i cropped the original function, for better readability :+1: )
## Try it out yourself

here's a link to the example scss on sassmeister:
http://sassmeister.com/gist/72f65ceac6d0f7847045

It's possible to reproduce this with:
- (CLI) Sass 3.4.10+ (Selective Steve)
- (CLI) Sass 3.4.13 (Selective Steve) 

Operating System: 
- Mac OS X 10.10
- Mac OS X 10.9.5
",vsxed,each-loop
1698,2015-04-21 03:38:41,"This is exactly what `@at-root` is for.
",nex3,at-root
1686,2015-04-01 20:25:44,"Can't reproduce issue. This usually occurs when a function (in this case `mg()`) is not defined. In your last example, it looks like you haven't defined `@function mg(...)` yet.
",davidkpiano,function
1686,2015-04-01 21:43:13,"The example I cited was some example I've made to test thing before posting this issue. My situation is the following:

I have a file ( `project direcotry/core/utilities/_utilities.scss` ) whit the definition of `@function mg() ...` (like in the first post). That file is included within another file (`_core.scss`) that is included by another file (`heartbrick.scss`). I've included heartbrick.scss in another file (`main.scss`), and then I've use a function (`get-breakpoint`) that use `mg`.

The strange thing is that if I use `get-breakpoint` with `mg` I get the error, if I replace all the call to `mg` with `map-get` I haven't any errors.

Folder tree (partial):



main.scss:



heartbrick.scss:



_variables.scss:



_core.scss:



_utilities.scss:



I'm sure that when I get the error, the function `mg` was defined. In the last example, for brevity, I haven't wrote it.

I'm working on a project with a great number of functions and mixin', and most of them use `mg`, so when I call `get-breakpoint` I'm sure that `mg` is defined.

However, if `mg` wasn't defined, the error message would be different, right?

Now I've change some call to `mg` to `map-get` and everything works fine. 0 errors.
I've spent a couple of hour today on this issue, but now I successfully manage to get all the thing works properly :)

_(Sorry for my english, I'm trying to write as best as I can)_
",omar-polo,function
1684,2015-04-21 21:19:40,"This has to do with the specificity of the extending selectors. When resolving an `@extend`, Sass guarantees (only) that the resulting selector will have specificity greater than or equal to the extender, in this case `.wont-extend-hover a` and `#will-exend-hover a`.

`.wont-extend-hover a` has specificity 11. One of the selectors in the output is `a:hover`; this matches a superset of the elements that `.wont-extend-hover a:hover` would match, and it also has specificity 11. Thus it fits the criteria, so there's no need to generate a `.wont-extend-hover a:hover` selector.

`#will-extend-hover a`, on the other hand, has specificity 101. So even though `a:hover` matches a superset of the elements of `#will-extend-hover a:hover`, it doesn't have high enough specificity, so `#will-extend-hover a:hover` is generated as well.
",nex3,extend
1683,2015-04-01 15:43:21,"Hi everybody,
Recently I've been debugging a stylesheet written for a former version, which showed issues with the latest version of SASS. The testcase can be rounded down to this:



Basically, my little (twisted?) mind would expect sass to output:



While it does actually output 12px for the div inside of @media. It seems like the @include statement is ""executed"" right when being expanded (at the evaluation of the @content, or by passing it as a parameter). The expected result can be obtained by moving the assignment outside of the content block, as shown below.



Outputting 24px for the @media-nested div. To me it looks like a bug, especially since it looks like this behaviour hasn't always been the standard. And this behaviour is only to be shown when expanded from a @content block (else it works as expected). What do you think?
",Brunni132,content
1683,2015-04-01 15:43:21,"Hi everybody,
Recently I've been debugging a stylesheet written for a former version, which showed issues with the latest version of SASS. The testcase can be rounded down to this:



Basically, my little (twisted?) mind would expect sass to output:



While it does actually output 12px for the div inside of @media. It seems like the @include statement is ""executed"" right when being expanded (at the evaluation of the @content, or by passing it as a parameter). The expected result can be obtained by moving the assignment outside of the content block, as shown below.



Outputting 24px for the @media-nested div. To me it looks like a bug, especially since it looks like this behaviour hasn't always been the standard. And this behaviour is only to be shown when expanded from a @content block (else it works as expected). What do you think?
",Brunni132,media
1683,2015-04-01 15:43:21,"Hi everybody,
Recently I've been debugging a stylesheet written for a former version, which showed issues with the latest version of SASS. The testcase can be rounded down to this:



Basically, my little (twisted?) mind would expect sass to output:



While it does actually output 12px for the div inside of @media. It seems like the @include statement is ""executed"" right when being expanded (at the evaluation of the @content, or by passing it as a parameter). The expected result can be obtained by moving the assignment outside of the content block, as shown below.



Outputting 24px for the @media-nested div. To me it looks like a bug, especially since it looks like this behaviour hasn't always been the standard. And this behaviour is only to be shown when expanded from a @content block (else it works as expected). What do you think?
",Brunni132,include
1683,2015-04-01 15:43:21,"Hi everybody,
Recently I've been debugging a stylesheet written for a former version, which showed issues with the latest version of SASS. The testcase can be rounded down to this:



Basically, my little (twisted?) mind would expect sass to output:



While it does actually output 12px for the div inside of @media. It seems like the @include statement is ""executed"" right when being expanded (at the evaluation of the @content, or by passing it as a parameter). The expected result can be obtained by moving the assignment outside of the content block, as shown below.



Outputting 24px for the @media-nested div. To me it looks like a bug, especially since it looks like this behaviour hasn't always been the standard. And this behaviour is only to be shown when expanded from a @content block (else it works as expected). What do you think?
",Brunni132,media-nested
1683,2015-04-21 21:08:13,"@cimmanon You're right about this being because of scope, but wrong that it should cause an error. `$value` is defined at the top level, so every use of `$value` that runs after that definition will at least refer to the global variable.

@Brunni132 Let me walk you through what's happening here. First, before you include anything, Sass creates a global `$value` variable. Then you include `example`, which refers to this global `$value` variable. Then you include `smaller`, in which Sass runs `@content`, which points to the block passed to `smaller`. Within that block, it runs `$value: 24px`. This is where your expectations break down.

In Sass 3.4, this is a _local variable declaration_. What this means is, because the variable declaration is in a scope (designated by `{` and `}`), it doesn't refer to the same variable as the top-level `$value`. This is important: it means that it's possible to use variable names freely within mixins, functions, and nested selectors without having to worry about whether those names happen to be defined globally in some vastly separate Sass file. But it also means that this variable assignment doesn't do anything. It's only relevant within the `{` and the `}`; it's not even visible to `example`.

If you want to pass values into a mixin, though, there's a built-in way to do exactly that: parameters. You could rewrite your example like this:



and never have to worry about variable scoping at all.
",nex3,content
1681,2015-03-31 21:29:33,"Is it just me or are you not able to use a variable name for the @import string? Would it be difficult to add this functionality?
",Jakobud,import
1681,2015-03-31 21:43:19,"Duplicate of #279

> On Mar 31, 2015, at 5:29 PM, Jake Wilson notifications@github.com wrote:
> 
> Is it just me or are you not able to use a variable name for the @import string? Would it be difficult to add this functionality?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,import
1674,2015-03-20 12:48:19,"@Naddiseo is there anything wrong with just making a new mixin that uses the old one?



That would be the sensible way to do it - and you get the benefit of namespacing, which will prevent unwanted side-effects, especially from other stylesheets in your project that include the original `@mixin foo()`.
",davidkpiano,mixin
1674,2015-03-20 14:35:39,"@dustindowell22, it gets pretty enough with CoffeeScript. But AbsurdJS is very-very primitive. I've got some ideas in mind but little motivation to try implementing them (possibly reusing AbsurdJS for translating a JS object into CSS string). If only i had a teammate... :)
",lolmaus,dustindowell22
1674,2015-03-20 14:45:09,"@davidkpiano, creating a new mixin is fine if all I wanted to do is change the output in my code, but if I also want to override the the library's calls to the same function, I can't. Also, exactly what @dustindowell22 said, it's not DRY.
",Naddiseo,dustindowell22
1671,2015-03-18 00:23:50,"Define a mixin, give it a [variable argument](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#variable_arguments) (i.e. of the form `$var...`), and test its `length()`.

The expected behaviour would be that it counts the number of elements in that variable. _However,_ the length function appears to _instead_ count the number of individual arguments that have been passed.

An example is available [in this SassMeister gist](http://sassmeister.com/gist/ee4a5475fe527b474bf0). Here's the code:



This has a very undesirable effect. If I define a `@mixin gradient-background($stops...)`, I cannot tell the difference between _one stop_ being defined, or an arbitrary number of stops passed as a variable.
",jdahobbs,mixin
1668,2015-03-13 09:55:56,"It would be nice to allow to save @content to a variable.

Example situation:
1. Using mixins for different media query rules.
2. Instead of putting several times the same media query rule into the output i save the contents into a list.
3. I will render each corresponding content at the end of the compilation as a last step so there will be no duplication and the order of media queries can be controlled.

What do you think?
",wintercounter,content
1663,2015-03-05 14:49:15,"An empty scss stylesheet containing just this:



Compiles to this:



So, not good. Even when I add `@charset ""utf-8"";` to the top of my scss, it still outputs the same stuff. My scss really is saved as UTF-8, but without a BOM though (using Brackets as my editor, there's no option for it, as far as I'm aware).

Escaping it:



Outputs:



Kind of expected really. But:



Kind of a mess, but it outputs what I want:



But I really want to be able to use non-ANSI characters straight in my scss files. It makes things much more readable. So this looks like a double-encoding bug that needs fixing, or the `@charset` directive in need of fixing.

I'm using Sass version 3.4.13, Gem system 2.4.6, Ruby 2.1.3p242 x64, Windows 7 x64.
",thany,charset
1663,2015-03-06 21:45:26,"What do you get when you run `ruby -e 'puts ""#{Encoding.default_internal}, #{Encoding.default_external}""'`? Can you upload your input and output files (with `@charset`) somewhere and link them here?
",nex3,charset
1663,2015-05-23 01:32:02,"@thany You have to include `@charset ""utf-8"";` in the actual files that use the non-ASCII characters. It doesn't transfer from file to file.

@bmains911 Yours is working as intended. `\e000` is equivalent CSS to `ÓÄÄ` (which is why it worked in browsers). Sass doesn't keep track of whether characters in input strings were escaped, so it always emits them as literal Unicode code-points to be safe.
",nex3,charset
1663,2015-07-10 08:24:26,"@nex3 that doesn't help. Output for that one character is still `content: ' √î√á‚ïë';` instead of `content: ' ‚Ä∫';`.

I've put `@charset 'utf-8';` in the file where the character is, made 5000% sure it's actually saved as utf-8, and I've even put the `@charset` declaration in _every_ scss file. No juice.
",thany,charset
1643,2015-02-18 15:51:59,"I ran across a weird border case where `@extend` + `:not` result in an invalid selector being generated, causing the browser to discard the rule entirely...

When a class selector is extended by a compound selector, and another selector explicitly excludes the class selector...



... then the resulting output ends up containing an invalid `:not` selector: 



This behavior is consistent across 3.2 - 3.4.  While silently generating an invalid selector probably isn't the right choice, I can't say for sure _what_ the right behavior should be... omit the `:not(li.bar)`, issue a warning / error, or something else?  
",eli-collins,extend
1643,2015-02-18 16:18:00,"The syntax `:not(li.bar)`, where `:not()` contains a complex selector, will be valid in **CSS 4**, so it doesn't make sense to exclude it now. Source: http://www.w3.org/TR/selectors4/#negation-pseudo

Proper usage of `@extend` here would be to set up extensions as a directed graph from the extendee to the extenders, `.foo` and `li.bar`:



**Result:**


",davidkpiano,extend
1643,2015-02-20 19:49:16,"We try pretty hard to avoid generating CSS that's not widely compatible, but in this case there's literally no CSS we could generate that's widely compatible and still satisfies the semantics of `@extend`. I think defaulting to the less-compatible CSS is best here, since at least that will be correct at some point.
",nex3,extend
1642,2015-02-17 15:47:35,"Yes this is the expected behavior. Refer to @chriseppstein or @nex3 for doc changes.
",Stephn-R,nex3
1642,2015-02-17 15:47:35,"Yes this is the expected behavior. Refer to @chriseppstein or @nex3 for doc changes.
",Stephn-R,chriseppstein
1639,2015-02-13 14:49:41,"I have noticed that it is not possible to define SASS variables within @media directives. To give you an idea how useful this is, Foundation comes with basic styling out of the box, with design elements determined by variables.  For example, top-bar (their navigation menu) has variables for background color, link color, top-level bg color, lower-level bg color. etc., etc.  Changing the value of one variable can affect many selectors due to inheritance.  As it is now, to change the background color of child (dropdown) navigation items on desktop, one must add the following CSS rule within an @media directive:

@media #($large-up) {
.top-bar-section .dropdown li:not(.has-form):not(.active) > a:not(.button) {background-color:#333;}
}

If SASS allowed defining (or re-defining) variables within @media directives, one would only have to change the value of the variable:

@media #($large-up) {
$topbar-dropdown-bg:#333;
 }

In the above examples you can see just how difficult it is to find the correct selector(s) to make the change(s), but how easy it is to change one variable.  I do hope you will consider this small but significant enhancement for a future release. 
",banacan,media
1639,2015-02-13 19:00:07,"$topbar-dropdown-bg is defined by default as #222 for all screen sizes.  I want to change that color for screens larger that 64em for example.  Of course, it's not just that one value that I will need to change, there will be many changes needed to create the nav style I want for desktop vs mobile.  The point is, I can't understand why Sass won't allow the value of a variable to be defined when inside an @media directive.  This seems like such a logical use of variables. 

To answer your question directly, I want the CSS to be what is shown in my first example, and any other cascaded elements.  Basically whatever Zurb defines by that variable in Foundation.
",banacan,media
1639,2015-02-13 20:04:55,"Foundation establishes default variable values:
$topbar-bgr: $oil !default;

You can change the value in _setting.scss.   Later in their components Zurb has something like this:
@media #{$topbar-media-query} {
      .top-bar {
        background: $topbar-bg;
        @include clearfix;
        overflow: visible;
        ...
So why can't the value of $topbar-bg be different based on breakpoints/media queries? 
",banacan,media
1639,2015-02-13 20:04:55,"Foundation establishes default variable values:
$topbar-bgr: $oil !default;

You can change the value in _setting.scss.   Later in their components Zurb has something like this:
@media #{$topbar-media-query} {
      .top-bar {
        background: $topbar-bg;
        @include clearfix;
        overflow: visible;
        ...
So why can't the value of $topbar-bg be different based on breakpoints/media queries? 
",banacan,include
1636,2015-02-12 17:46:54,"Apologies if I'm just ignorant of how this is supposed to work, or if this is bad syntax, but seems very strange that anything like this would output two different rules with conflicting idea of how @extend-ing something that uses & should work. Tested on 3.4.11
.scss:



output:
_.bodyclass header .logo, header .bodyclass .logo { display:none; }_

That is, the first rule generated interprets the .bodyclass & as referencing the top parent, while the second interprets it as referencing the immediate parent.  My expectation was that one or the other would be the ""correct"" interpretation of the syntax, rather than it generating both.
",dtipson,extend-ing
1636,2015-02-13 14:58:01,"Here's how `@extend` works in this context - it's based on combinatorial constraints, not on ambiguity, I promise.
1. `header .logo` provides the constraint ""`header` is a **general ancestor** of `.logo`,"" which is a pretty liberal constraint - `header` can be the parent, grandparent, great-grandparent, etc. of `.logo`.
2. `.bodyClass %none` provides a similar constraint - it is a **general ancestor** of the _target simple/compound selector_. In this case, that simple/compound selector is `.logo`.
3. `header .logo { @extend %none; }` combines these two constraints, and states that `.bodyClass` _and_ `header` are **both** general ancestors of the target simple/compound selector, which is `.logo`.

This liberal constraint means that `header` can be a parent ancestor while `.bodyClass` can be a grandparent ancestor, or vice versa (much less any other of the infinite combinations of ancestral relationships). In order to **satisfy both constraints**, both possibilities are output: `.bodyClass` as a greater ancestor than `header`, and `header` as a greater ancestor than `.bodyClass`.

Try not to use the general ancestor combinator (space) too often unless your markup truly requires this ambiguity.
",davidkpiano,extend
1634,2015-02-11 18:00:17,"I would like to keep my placeholders completely silent until they are extended, but it seems that using the `@at-root` directive within a placeholder interferes with their ability to remain silent.
For example,



does not output any CSS until `@extend %myPlaceholder;` is called. This is the desired behavior. But if I construct my placeholder like this:



I get the following output:



regardless of whether my placeholder ever actually gets extended.

There could be a logical purpose for this behavior but I haven't been able to find it. Thanks for all your hard work!
",ghost,extend
1634,2015-02-11 18:00:17,"I would like to keep my placeholders completely silent until they are extended, but it seems that using the `@at-root` directive within a placeholder interferes with their ability to remain silent.
For example,



does not output any CSS until `@extend %myPlaceholder;` is called. This is the desired behavior. But if I construct my placeholder like this:



I get the following output:



regardless of whether my placeholder ever actually gets extended.

There could be a logical purpose for this behavior but I haven't been able to find it. Thanks for all your hard work!
",ghost,at-root
1625,2015-02-04 18:12:53,"Hmmm. I specifically wrote code to [deduplicate watched paths](https://github.com/sass/sass/blob/stable/lib/sass/plugin/compiler.rb#L411-L425). I wonder if it's not working correctly or if @nex3 changed something that causes this to be bypassed now.
",chriseppstein,nex3
1621,2015-02-03 16:20:10,"   @each $color in blue-grey, green, light-blue, light-blue, orange, red, lime, brown, amber, cyan, deep-orange, deep-purple, grey, light-green, light-blue, purple, teal, yellow, indigo, dark  {
    .#{$color} {
      @import ""../../../color-schemas/#{$color}"";
      @include block-variant($darkPrimaryColor, $primaryTextColor, $textPrimaryColor, $primaryColor, $lightPrimaryColor, $secondaryTextColor, $accentColor, $dividerColor);
    }
  }

the problem you already know the error output
sass import directives may not be used within control directives or mixins
",nilsenj,include
1621,2015-02-03 16:20:10,"   @each $color in blue-grey, green, light-blue, light-blue, orange, red, lime, brown, amber, cyan, deep-orange, deep-purple, grey, light-green, light-blue, purple, teal, yellow, indigo, dark  {
    .#{$color} {
      @import ""../../../color-schemas/#{$color}"";
      @include block-variant($darkPrimaryColor, $primaryTextColor, $textPrimaryColor, $primaryColor, $lightPrimaryColor, $secondaryTextColor, $accentColor, $dividerColor);
    }
  }

the problem you already know the error output
sass import directives may not be used within control directives or mixins
",nilsenj,each
1621,2015-02-03 16:20:10,"   @each $color in blue-grey, green, light-blue, light-blue, orange, red, lime, brown, amber, cyan, deep-orange, deep-purple, grey, light-green, light-blue, purple, teal, yellow, indigo, dark  {
    .#{$color} {
      @import ""../../../color-schemas/#{$color}"";
      @include block-variant($darkPrimaryColor, $primaryTextColor, $textPrimaryColor, $primaryColor, $lightPrimaryColor, $secondaryTextColor, $accentColor, $dividerColor);
    }
  }

the problem you already know the error output
sass import directives may not be used within control directives or mixins
",nilsenj,import
1619,2015-08-28 21:38:04,"I just talked to @tabatkins and it sounds like this is going to be pulled from the spec.
",nex3,tabatkins
1612,2015-01-24 18:31:43,"In this case, it looks like you are trying to use something like the `@at-root` directive but by appending the & selector, it would include the parent selectors. I understand now. This feature does not currently exist, however, if we are considering **_""Best Practices""**_, this is not a good practice.

It's not worth it to add a feature to help people write _bad code_
",Stephn-R,at-root
1609,2015-01-21 14:51:08,"I don't see how that's a win over nesting; it makes identifying the selector less clear. It would also require special parsing rules for for `@media` to allow for a specific invalid syntax, but not others (note: there's a difference between extending CSS and outright writing invalid CSS).
",Snugug,media
1608,2015-01-20 17:49:37,"Sass extensions are currently ruby based. This was all well and good while we only had one implementation but with libsass in the mix, there is no way to introduce sass extensions that can work everywhere. The ruby extensions syntax is highly dependent on the specifics of the ruby implementation. I see a couple options:
1. Define a way to create extensions that support implementation specific code. For libsass this would be a shared object file and some way to initialize it. For ruby this would be much like what we have right now.
2. Choose a highly interoperable language for writing sass extensions and a common API in that language that all implementations would need to support. The most likely candidate for this is probably Lua. It is lightweight, fast, and fairly easy to write code in.

In addition to the extension support, I think it would be good for code that depends on extensions to make that dependency explicit using some special directive in the sass file itself. This could be as simple as letting `@import` (or some sass 4.0 equivalent) refer to sass ""extensions"" (since conceptually they define functions not unlike a sass file could). Or we could introduce some new directive for this.

/cc @akhleung @hcatlin @xzyfer

This is a major hurdle for making compass cross-implementation compatible.
",chriseppstein,akhleung
1608,2015-01-20 17:49:37,"Sass extensions are currently ruby based. This was all well and good while we only had one implementation but with libsass in the mix, there is no way to introduce sass extensions that can work everywhere. The ruby extensions syntax is highly dependent on the specifics of the ruby implementation. I see a couple options:
1. Define a way to create extensions that support implementation specific code. For libsass this would be a shared object file and some way to initialize it. For ruby this would be much like what we have right now.
2. Choose a highly interoperable language for writing sass extensions and a common API in that language that all implementations would need to support. The most likely candidate for this is probably Lua. It is lightweight, fast, and fairly easy to write code in.

In addition to the extension support, I think it would be good for code that depends on extensions to make that dependency explicit using some special directive in the sass file itself. This could be as simple as letting `@import` (or some sass 4.0 equivalent) refer to sass ""extensions"" (since conceptually they define functions not unlike a sass file could). Or we could introduce some new directive for this.

/cc @akhleung @hcatlin @xzyfer

This is a major hurdle for making compass cross-implementation compatible.
",chriseppstein,xzyfer
1608,2015-01-20 17:49:37,"Sass extensions are currently ruby based. This was all well and good while we only had one implementation but with libsass in the mix, there is no way to introduce sass extensions that can work everywhere. The ruby extensions syntax is highly dependent on the specifics of the ruby implementation. I see a couple options:
1. Define a way to create extensions that support implementation specific code. For libsass this would be a shared object file and some way to initialize it. For ruby this would be much like what we have right now.
2. Choose a highly interoperable language for writing sass extensions and a common API in that language that all implementations would need to support. The most likely candidate for this is probably Lua. It is lightweight, fast, and fairly easy to write code in.

In addition to the extension support, I think it would be good for code that depends on extensions to make that dependency explicit using some special directive in the sass file itself. This could be as simple as letting `@import` (or some sass 4.0 equivalent) refer to sass ""extensions"" (since conceptually they define functions not unlike a sass file could). Or we could introduce some new directive for this.

/cc @akhleung @hcatlin @xzyfer

This is a major hurdle for making compass cross-implementation compatible.
",chriseppstein,import
1608,2015-01-20 17:49:37,"Sass extensions are currently ruby based. This was all well and good while we only had one implementation but with libsass in the mix, there is no way to introduce sass extensions that can work everywhere. The ruby extensions syntax is highly dependent on the specifics of the ruby implementation. I see a couple options:
1. Define a way to create extensions that support implementation specific code. For libsass this would be a shared object file and some way to initialize it. For ruby this would be much like what we have right now.
2. Choose a highly interoperable language for writing sass extensions and a common API in that language that all implementations would need to support. The most likely candidate for this is probably Lua. It is lightweight, fast, and fairly easy to write code in.

In addition to the extension support, I think it would be good for code that depends on extensions to make that dependency explicit using some special directive in the sass file itself. This could be as simple as letting `@import` (or some sass 4.0 equivalent) refer to sass ""extensions"" (since conceptually they define functions not unlike a sass file could). Or we could introduce some new directive for this.

/cc @akhleung @hcatlin @xzyfer

This is a major hurdle for making compass cross-implementation compatible.
",chriseppstein,hcatlin
1608,2015-01-20 21:00:47,"Lua gets a :+1: from me.

I'm also a fan of explicitly declaring extension dependencies in source. However if overloading `@import` I believe there is a benefit in being able to clearly distinguish extensions and sass sources.

Two cases come to mind
- being able to parse the sass dependency tree i.e. for sass cli style smart watching
- passing configuration options to plugins like in the compass `config.rb` e.g. `@import ""my-extension"" with { foo: true }` _(I'm not proposing a syntax)_
",xzyfer,import
1608,2015-01-20 21:17:18,"@scottdavis mentioned using ruby embedded into all implementations via mruby in another issue: https://github.com/Compass/compass/issues/1916#issuecomment-70733255 so I'm adding that as a possible (more backwards compatible) option here that we can discuss.
",chriseppstein,scottdavis
1608,2015-01-30 23:36:11,"For instance, I think `@load ""<extension-name>"";` could be sufficient. Each implementation could define a standard about how that would work. And in theory, a Sass file that only provides sass functions could be used a fall back implementation in some cases.
",chriseppstein,load
1608,2015-01-31 02:17:16,"I'd be okay with expanding the `Importer` API to allow an importer to provide Ruby functions for a given importer, thus allowing `@use ""<extension-name>""` to work. What mechanism are you thinking for looking up extensions?
",nex3,use
1608,2015-02-06 21:51:57,"What's the algorithm for taking a string in a `@use` declaration and finding, loading, and making available Ruby functions for the document containing that `@use`?
",nex3,use
1608,2015-02-09 23:28:16,"@nex3 I suppose it would just be a ruby file that defines functions. those would be class_eval'd into a module and that would get included into the evaluation context based on finding it with `@use`. in terms of lookup, I guess we'd need an extension load path or to just piggy back the sass load path for this.
",chriseppstein,use
1602,2015-01-17 15:25:55,"Currently, the `sass` and `scss` executables silently switch to `--update` mode if multiple colon-separated paths are passed on the command line. This leads to confusing differences between `sass foo:bar` and `sass foo:bar baz:bang`, especially if `foo` and `bar` are directories.

We should change the behavior to never enable `--update` mode without the flag itself being explicitly passed. This means we'll need to deprecate handling directories without `--update`.

This issue has been retargeted by @nex3. Original issue follows:

---

I've been working on a [pull request for grunt-contrib-sass](https://github.com/gruntjs/grunt-contrib-sass/issues/178) and noticed that when passed only one file, the sass executable automatically acts as if `--force` was passed.  I believe this is caused by the `@args.size` clause in an [if statement in sass_scss.rb](https://github.com/sass/sass/blob/af77545b39e042a42b1e3200c6dfa4679d2c0221/lib/sass/exec/sass_scss.rb#L40-L47).

I wrote a shell script to demonstrate this behavior:



This is the output on my system:



I haven't been able to find any documentation that references this feature.  Is it an intended feature?  If so, would you accept a PR to add this to the documentation?
",danfinnie,args
1602,2015-01-17 15:25:55,"Currently, the `sass` and `scss` executables silently switch to `--update` mode if multiple colon-separated paths are passed on the command line. This leads to confusing differences between `sass foo:bar` and `sass foo:bar baz:bang`, especially if `foo` and `bar` are directories.

We should change the behavior to never enable `--update` mode without the flag itself being explicitly passed. This means we'll need to deprecate handling directories without `--update`.

This issue has been retargeted by @nex3. Original issue follows:

---

I've been working on a [pull request for grunt-contrib-sass](https://github.com/gruntjs/grunt-contrib-sass/issues/178) and noticed that when passed only one file, the sass executable automatically acts as if `--force` was passed.  I believe this is caused by the `@args.size` clause in an [if statement in sass_scss.rb](https://github.com/sass/sass/blob/af77545b39e042a42b1e3200c6dfa4679d2c0221/lib/sass/exec/sass_scss.rb#L40-L47).

I wrote a shell script to demonstrate this behavior:



This is the output on my system:



I haven't been able to find any documentation that references this feature.  Is it an intended feature?  If so, would you accept a PR to add this to the documentation?
",danfinnie,nex3
1601,2015-01-17 14:23:34,"Code:
// vars
$linkColor1: #ccc;
$linkColor2: #ddd;
$linkColor3: #aaa;
// for
@for $i from 1 through 3 {
&:nth-child(3n+{$i}){
    color: $linkColor{$i};
  }
}
",6pm,for
1599,2015-01-17 03:44:13,"Currently, when a compound selector is extended, Sass will only replace instances of the full extendee with the extender. For example:



produces



when it should produce



according to the semantics of `@extend`. We should fix this, especially as CSS moves closer to supporting `@extend` natively.
",nex3,extend
1599,2015-08-31 22:52:23,"To clarify:

`.c { @extend .a.b }` means ""Style elements with class c, as if they had both of the classes .a and .b"", It's semantically identical to `.c { @extend .a; @extend .b; }`
",chriseppstein,extend
1599,2016-12-13 19:29:23,"To be honest, I'm slightly confused.

This example seems to be perfectly right result for `.c {@extend .a.b}`:



It's because we clearly asked to extend `.a` with specified by `.b` selector, not just `.a` or `.b`, or `.a.b`.

If we'd like to receive this:



I'd more expect syntax like



or

",ArmorDarks,extend
1599,2016-12-14 01:21:25,"@ArmorDarks When you write `A {@extend B}`, that means ""all elements that match A should be styled as though they also matched B"". In the example above, that translates to ""all elements that match `.c` should be styled as though they also matched `.a.b`"". If an element matches `.a.b`, that means it also matches both `.a` and `.b` individually, so `.c {@extend .a.b}` should mean the same thing as `.c {@extend .a; @extend .b}`.",nex3,extend
1598,2015-11-07 00:34:33,"@nex3,

This is so annoying. If we allow importing of CSS files in #556 (and already with @chriseppstein's https://github.com/chriseppstein/sass-css-importer I don't see why you wouldn't be able to override `url()`.

I'm importing a 3rd-party CSS file (that I don't want to modify), but it has relative urls to the assets. Without being able to override the `url()` function (and reset it after import preferably), I have to modify the 3rd party CSS. :(
",davidbarratt,chriseppstein
1596,2015-01-15 16:31:32,"[Gist Issue Example](https://gist.github.com/justinryder/71c3ee504f6e1809b35c)

SCSS



Expected



Actual



When using @extend in the context of a selector that uses the same class twice on the same element, the duplicate class is removed in the output of the @extend (.foo.foo becomes .foo). This is not the case for any other styles declared in the same context, for those, the selector is preserved as typed.

A common technique for increasing specificity without over-qualifying is to just duplicate the same class multiple times. This technique cannot be used with extend, because it removes the duplicate classes, thus reducing the specificity that was intentionally added.
",justinryder,extend
1596,2015-01-16 10:47:24,"Hey @Stephn-R, you're missing the point here.

You're right that @nex3 added removal of duplicate classnames as an optimization. The `.foo.foo` selector indeed targets the same elements as `.foo`.

But @justinryder has pointed out that a `.foo.foo` CSS selector has specificity different from `.foo`, and reducing `.foo.foo` to `.foo` may actually change the looks and/or layout of the page.

Consider this [example](http://sassmeister.com/gist/6fd6837ebacf730e3f57):



A `<div class='foo'></div>` element will be red. But if you replace `.foo.foo` with `.foo` in Sass, then the element will be blue.

This is a neat technique to override the default looks of elements styled with third-party CSS, without caring for the order of imports.

@nex3, looks like this feature was intended as an optimization to remove redundancy but it actually modifies CSS semantics, huh?
",lolmaus,nex3
1596,2015-01-17 03:23:08,"After digging into this a bit, it looks like changing it will be quite difficult. The assumption that there are no duplicates in a compound selector goes very deeply into the `@extend` machinery. It'll take more time than I have right now to fix.
",nex3,extend
1593,2015-01-13 13:11:28,"One feature I'd love for Sass to handle is concatenating @media queries. I like to keep my media queries next to the component itself, but unfortunately that translates to way more bytes than necessary in the final stylesheet, repeatedly declaring `@media (max-width: 480px`) and so on. It would be awesome if Sass could move all the code for mobile styling into one media query at the end of the final document.
",lachlanjc,media
1592,2015-01-12 09:15:21,"The following snippet:



causes this error:



If you remove @at-root, it compiles successfully.
",PeterBaltruschat,at-root
1592,2015-01-12 12:14:22,"`@at-root` is part of a selector, while `@keyframes` isn't. That's why you need an extra pair of curly braces.
",lolmaus,keyframes
1592,2015-01-12 12:14:22,"`@at-root` is part of a selector, while `@keyframes` isn't. That's why you need an extra pair of curly braces.
",lolmaus,at-root
1592,2015-01-13 22:19:56,"Confirmed. @at-root accepts a selector on the same line as a shorthand for the common use case. All other css blocks must be enclosed with the curly braces.
",chriseppstein,at-root
1591,2015-01-13 22:46:40,"One of the mixins I wrote that uses keyframe and `@at-root` is also broken after upgrading sass
",NomNomCameron,at-root
1591,2015-01-16 20:20:03,"This example doesn't make sense. `from` is not a selector; it is a keyframe so it can't extend other selectors. Also, by default `@at-root` only escapes the ruleset but not the directives so you'd probably want `@at-root (without: all) { ... }`
",chriseppstein,at-root
1591,2015-01-16 20:20:52,"@sentrathis96 do you want to provide any details, otherwise there's nothing we can do about your issue.
",chriseppstein,sentrathis96
1591,2015-01-16 22:10:44,"My apologies, I thought that `@at-root` being a common problem for both of us a diagnosis could have been made as to what's going on.

Here is a mixin I'm using for a css3 spinner that was working before recently upgrading sass:


",NomNomCameron,at-root
1590,2015-01-12 01:11:41,"Because the final computed color can change at run-time based on a large number of things, from nesting to multiple classes to inline styles and can change on a per-page basis based on all of those things.

In #1582 @chriseppstein is proposing a way to get a data structure of the current CSS that would be placed using `@content` that may work with some custom helpers around it.
",Snugug,content
1590,2015-01-12 01:11:41,"Because the final computed color can change at run-time based on a large number of things, from nesting to multiple classes to inline styles and can change on a per-page basis based on all of those things.

In #1582 @chriseppstein is proposing a way to get a data structure of the current CSS that would be placed using `@content` that may work with some custom helpers around it.
",Snugug,chriseppstein
1582,2015-01-05 23:11:23,"I'd like to introduce a function `content()` that returns a Sass data structure that represents the css specified as mixin content that is normally placed by the `@content` directive. The exact form of this data is something that would need to be well specified, I will work on that if people are in agreement that this is a good idea.

I also think Sass should provide a mixin that effectively translates this data back into CSS. E.g. `@include expand-content(content());` would be identical to `@content;` when used inside a mixin. Sass doesn't currently expose any mixins automatically so we probably just want to make a special import location so that Sass mixins can be manually imported if they are needed. `@import 'stdlib'` or something?

Here's the rationale. I see a lot of users clamoring to use SassScript to manipulate their CSS. To do this, they end up defining their CSS as maps instead of as CSS. I'd like things that are stylesheets to be specified in CSS syntax, not in some it's a map and it's almost css syntax just so that it can be manipulated.

Another use case is that, https://github.com/oddbird/true needs a way to verify that the output of a mixin is correct without relying on string-based output comparison tests. By providing this capability, the css output of a mixin can be tested using SassScript.

In the past, I've proposed special directives to accomplish this, but I don't think that's necessary.
",chriseppstein,content
1582,2015-01-05 23:11:23,"I'd like to introduce a function `content()` that returns a Sass data structure that represents the css specified as mixin content that is normally placed by the `@content` directive. The exact form of this data is something that would need to be well specified, I will work on that if people are in agreement that this is a good idea.

I also think Sass should provide a mixin that effectively translates this data back into CSS. E.g. `@include expand-content(content());` would be identical to `@content;` when used inside a mixin. Sass doesn't currently expose any mixins automatically so we probably just want to make a special import location so that Sass mixins can be manually imported if they are needed. `@import 'stdlib'` or something?

Here's the rationale. I see a lot of users clamoring to use SassScript to manipulate their CSS. To do this, they end up defining their CSS as maps instead of as CSS. I'd like things that are stylesheets to be specified in CSS syntax, not in some it's a map and it's almost css syntax just so that it can be manipulated.

Another use case is that, https://github.com/oddbird/true needs a way to verify that the output of a mixin is correct without relying on string-based output comparison tests. By providing this capability, the css output of a mixin can be tested using SassScript.

In the past, I've proposed special directives to accomplish this, but I don't think that's necessary.
",chriseppstein,include
1582,2015-01-05 23:11:23,"I'd like to introduce a function `content()` that returns a Sass data structure that represents the css specified as mixin content that is normally placed by the `@content` directive. The exact form of this data is something that would need to be well specified, I will work on that if people are in agreement that this is a good idea.

I also think Sass should provide a mixin that effectively translates this data back into CSS. E.g. `@include expand-content(content());` would be identical to `@content;` when used inside a mixin. Sass doesn't currently expose any mixins automatically so we probably just want to make a special import location so that Sass mixins can be manually imported if they are needed. `@import 'stdlib'` or something?

Here's the rationale. I see a lot of users clamoring to use SassScript to manipulate their CSS. To do this, they end up defining their CSS as maps instead of as CSS. I'd like things that are stylesheets to be specified in CSS syntax, not in some it's a map and it's almost css syntax just so that it can be manipulated.

Another use case is that, https://github.com/oddbird/true needs a way to verify that the output of a mixin is correct without relying on string-based output comparison tests. By providing this capability, the css output of a mixin can be tested using SassScript.

In the past, I've proposed special directives to accomplish this, but I don't think that's necessary.
",chriseppstein,import
1582,2015-01-08 11:37:39,"This may be a bit off topic but when talking content manipulation ‚Äì¬†how about using @content as a kind of getter-setter (if possible working like ""map-merge"" to reduce CSS output). I know this example has a lot of unresolved ‚Äì¬†like nested selector output, shorthands and fallbacks (font:1em serif; font-size:1rem; font-size: 16px;). It was not my intention to spam :-) 


",jakob-e,content
1582,2015-01-08 17:28:27,"In general, I like the idea of being able to do:



I think this could be optimized better than using a pure mixin and it's clear that it's based on existing patterns. As long as the variable passed to `@content` is properly structured, it could work with pure data that is assembled by hand -- it wouldn't have to come from the `content()` function.

Regarding the other suggestions here, I think you've missed just how complex the data that is passed as mixin content can be. It can contain selectors, media queries (and other css at-rules), etc. It needn't just be properties. In either respect, I think the fact that the content is returned as a SassScript data structure means that we can use the existing map, string, and list manipulation functions to operate on it.
",chriseppstein,content
1582,2015-01-08 18:24:51,"Does this suggestion also open a possibility of emitting arbitrary content via `@content` without prior capturing the content via `content()`?
",lolmaus,content
1582,2015-01-09 06:46:51,"I'm removing Milestone 4.0 because I don't want to block 4.0 on any major features other than the import overhaul.

This is a piece of functionality that would certainly solve a lot of use cases, but it risks introducing a colossal amount of complexity in the process. I'm on board with the general idea, but I want to be damn sure we have a nice, clean, comprehensible, and minimally-complex data format before we add it to the language.

Here's one example of a tricky principle we'll need to figure out: what state of resolution is the captured data structure in? In particular, how much nesting does it preserve? What happens when the user's code includes `&`? What about a deeply-nested `&`? What about `@at-root`? What about `@if`?
",nex3,at-root
1582,2015-01-09 06:46:51,"I'm removing Milestone 4.0 because I don't want to block 4.0 on any major features other than the import overhaul.

This is a piece of functionality that would certainly solve a lot of use cases, but it risks introducing a colossal amount of complexity in the process. I'm on board with the general idea, but I want to be damn sure we have a nice, clean, comprehensible, and minimally-complex data format before we add it to the language.

Here's one example of a tricky principle we'll need to figure out: what state of resolution is the captured data structure in? In particular, how much nesting does it preserve? What happens when the user's code includes `&`? What about a deeply-nested `&`? What about `@at-root`? What about `@if`?
",nex3,if
1582,2015-01-09 17:00:19,"@nex3 I agree with your comments about the data format and look forward to discussing what we think that should look like. I have a few ideas that I can propose as a starting point for discussion but nothing I am wedded to.

Regarding the state of the captured data, the only thing that makes sense to me is that it is fully resolved CSS from the lexical scope of the include. At the point that this content is placed into the stylesheet again, they can use Sass constructs like `&` and `@at-root` to manipulate the new context of the content. Reproducing Sass code like you mention is exactly what mixins are good for and if we ever needed such a construct it would probably be some sort of lambda equivalent for mixins.
",chriseppstein,at-root
1582,2015-01-30 19:51:22,"I recently sat down with @eoneill to review this design and make sure that it would support a better, more author friendly way of expressing a CSS component system like https://github.com/linkedin/archetype.

We identified a few more aspects of this feature that are needed to properly round out this concept and completely avoid the ""data structures as alternative to CSS"" issue.

The main issue with the proposal here is that it makes late-binding of some kinds of values more complicated. To fix this, my idea is that there should be a function that invokes a mixin in a given selector scope (defaulting to `&`) and returns the resulting CSS as a data structure like `content()` would. For this, I think a function like `content-from-mixin($mixin-name, $selector-context: &, $arglist...)` would suffice. This would allow static CSS and mixins to both work together to produce components. We should also make sure to implement #626 for dynamic mixin definitions and includes.

We also talked about how the css data would be structured.

**CSS Fragment:**



As data:



For constructing this data structure, convenience functions can be provided:



Manipulating this structure in SassScript is tedious at best due to the immutability of maps. I'm not sure what to do about that. Maybe provide some way of walking the ""AST"" by passing a function that can perform specific mutations leaving all the side-effect management to the caller?
",chriseppstein,eoneill
1582,2015-01-30 22:52:16,"So imagine you have a function `current-locale()` that let's you vary behavior based on what locale your css is targeting at that point in the stylesheet. If you check this function when a CSS fragment is captured (at definition time) then the value of `current-locale()` won't be correct. Mixins handle this problem very nicely, but the issue is that you then need to get the output of the mixin as data so that it can be merged with other more static structures. With dynamic mixin invocation, one could, with the help of some global functions, get access to the mixin's output as data, but this would be much more clunky than a function that just does it.



And this approach would make it hard to access this mixin content from within pure functions since `@include` is disallowed with `@function` but since this operation is side-effect free (except for maybe affecting some global variables) there's no reason to make it so hard to use from within a function.
",chriseppstein,function
1582,2015-01-30 22:52:16,"So imagine you have a function `current-locale()` that let's you vary behavior based on what locale your css is targeting at that point in the stylesheet. If you check this function when a CSS fragment is captured (at definition time) then the value of `current-locale()` won't be correct. Mixins handle this problem very nicely, but the issue is that you then need to get the output of the mixin as data so that it can be merged with other more static structures. With dynamic mixin invocation, one could, with the help of some global functions, get access to the mixin's output as data, but this would be much more clunky than a function that just does it.



And this approach would make it hard to access this mixin content from within pure functions since `@include` is disallowed with `@function` but since this operation is side-effect free (except for maybe affecting some global variables) there's no reason to make it so hard to use from within a function.
",chriseppstein,include
1582,2015-11-27 14:28:41,"Are there any plans on implementing it or it was abandoned? 
I've been trying to implement a mixin that will allow you to use media queries in any place and have them combined in the end of the resulting .CSS file. It works, but the syntax is not exactly pretty: https://github.com/helarqjsc/SASS-mixin-joined-media-queries/blob/master/example.scss
Being able to put `@content` into a variable would really help me here.
",helarqjsc,content
1582,2017-02-09 20:54:51,"To be honest, CSS fragments from https://github.com/sass/sass/issues/1582#issuecomment-72259831 blowed my mind. In a bad way. `()` instead of `{}` and `[]` for maps _and_ arrays notation didn't help it too...

Those days there are quite a lot of popular JS libraries (mostly around React), which trying to bring CSS to the object world, so maybe it would be good idea to check them and take some ideas from them.

Constructions like `(ruleset: (selector: (("".foo"",), ("".bar"",)),` as very exessive and hardly friendly for endusers. Logical way to solve it would be to go [Radium](https://github.com/FormidableLabs/radium) way and input selectors and derictives as you would normaly do in CSS or Jquery, like `"".foo.bar""` or `""@media (...)""`. I understand that parsing those strings willl have performance impact, but can't help thinking that this seems to be the only legit way from consumers point of view.

After all, those objects-like data of Radium and other similar libs feels so natural, because they are very close to original CSS ""objects"". Well, in fact they are indeed objects, but with different syntax...",ArmorDarks,media
1580,2015-01-05 05:23:05,"//  Input (SCSS)
//  ---------------------------------------------------------------------------
@mixin highlight($count) {
    > \* {
        @extend %notification;
        width: 45px;
    }
}
@media only screen and (min-width: 1025px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

//  Output (CSS)
//  ---------------------------------------------------------------------------
@media only screen and (min-width: 1025px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

The above sample code works fine & compiled expected result. 
But the following code shows ""You may not @extend an outer selector from within @media."" error.

//  Input (SCSS)
//  ---------------------------------------------------------------------------
@mixin highlight($count) {
    > \* {
        @extend %notification;
        width: 45px;
    }
}
@media only screen and (min-width: 1025px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

@media only screen and (min-width: 769px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

//  Expected Output(CSS)
//  ---------------------------------------------------------------------------
@media only screen and (min-width: 1025px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

@media only screen and (min-width: 769px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

Need a simple solution. Please Help me......... Urgent
",prajith-ta,extend
1580,2015-01-05 05:23:05,"//  Input (SCSS)
//  ---------------------------------------------------------------------------
@mixin highlight($count) {
    > \* {
        @extend %notification;
        width: 45px;
    }
}
@media only screen and (min-width: 1025px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

//  Output (CSS)
//  ---------------------------------------------------------------------------
@media only screen and (min-width: 1025px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

The above sample code works fine & compiled expected result. 
But the following code shows ""You may not @extend an outer selector from within @media."" error.

//  Input (SCSS)
//  ---------------------------------------------------------------------------
@mixin highlight($count) {
    > \* {
        @extend %notification;
        width: 45px;
    }
}
@media only screen and (min-width: 1025px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

@media only screen and (min-width: 769px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

//  Expected Output(CSS)
//  ---------------------------------------------------------------------------
@media only screen and (min-width: 1025px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

@media only screen and (min-width: 769px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

Need a simple solution. Please Help me......... Urgent
",prajith-ta,media
1580,2015-01-05 05:23:05,"//  Input (SCSS)
//  ---------------------------------------------------------------------------
@mixin highlight($count) {
    > \* {
        @extend %notification;
        width: 45px;
    }
}
@media only screen and (min-width: 1025px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

//  Output (CSS)
//  ---------------------------------------------------------------------------
@media only screen and (min-width: 1025px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

The above sample code works fine & compiled expected result. 
But the following code shows ""You may not @extend an outer selector from within @media."" error.

//  Input (SCSS)
//  ---------------------------------------------------------------------------
@mixin highlight($count) {
    > \* {
        @extend %notification;
        width: 45px;
    }
}
@media only screen and (min-width: 1025px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

@media only screen and (min-width: 769px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

//  Expected Output(CSS)
//  ---------------------------------------------------------------------------
@media only screen and (min-width: 1025px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

@media only screen and (min-width: 769px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

Need a simple solution. Please Help me......... Urgent
",prajith-ta,include
1580,2015-01-05 05:23:05,"//  Input (SCSS)
//  ---------------------------------------------------------------------------
@mixin highlight($count) {
    > \* {
        @extend %notification;
        width: 45px;
    }
}
@media only screen and (min-width: 1025px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

//  Output (CSS)
//  ---------------------------------------------------------------------------
@media only screen and (min-width: 1025px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

The above sample code works fine & compiled expected result. 
But the following code shows ""You may not @extend an outer selector from within @media."" error.

//  Input (SCSS)
//  ---------------------------------------------------------------------------
@mixin highlight($count) {
    > \* {
        @extend %notification;
        width: 45px;
    }
}
@media only screen and (min-width: 1025px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

@media only screen and (min-width: 769px) {
    %notification {
        width: auto;
        float: none;
    }
    .help {
        @include highlight(2);
    }
    .push {
        @include highlight(2);
    }
    .pull {
        @include highlight(2);
    }
}

//  Expected Output(CSS)
//  ---------------------------------------------------------------------------
@media only screen and (min-width: 1025px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

@media only screen and (min-width: 769px) {
    .help > *,
    .push > *,
    .pull > \* {
        width: auto;
        float: none;
    }
    .help > \* {
        width: 45px;
    }
    .push > \* {
        width: 45px;
    }
    .pull > \* {
        width: 45px;
    }
}

Need a simple solution. Please Help me......... Urgent
",prajith-ta,mixin
1579,2015-01-03 00:55:20,"When using a lot of mixins your code becomes cluttered with `@include`s. It would be really awesome to be able to have a shorthand syntax for mixins:



as a shorthand for the full syntax: 



This would make using something like csstyle that relies on mixins a lot cleaner.
",geddski,include
1576,2014-12-28 16:11:09,"I test the code  to verify that selector name (padding...)is duplicate when using extend on a selector that is duplicate but with diffent content ( line 1 and 2)  
/_test d */
.selectorbgcolor , .selectorname{¬†background-color: red; }/_1_/
.selectorname {¬†color: green ;}/_2_/
.selectpaddingboth { @extend .selectorname; padding: 10px;   }/_3*/

I use bracket and grunt for compile the code with debug info  i remove here ( after) . In bracket i have this code for the line /_1_/
/*test d before */
.selectorbgcolor, .selectorname, .selectpaddingboth {
  ‚î¨√°background-color: red;
}

There is   ""‚î¨√°""  before background-color:red ;  ! 
I test with 2 css properties in /_1_/ and this appear only in each first line /_1_/ and /_2_/ but not /_3_/
Is is a encoding problem ( BOM UTF8)   ? 

my OS is windows 8.1  64 bit 
github remove some \* so my post content differ from edit and read mode !
regard's 
",lionelgmc,extend
1576,2014-12-28 16:19:37,"seem it resolve by @charset ""UTF-8"";
I shouldsearch in internet before post 
sorry 
",lionelgmc,charset
1573,2014-12-25 18:40:18,"I don't think this is a duplicate of #366. The important part of my request was not invoking a mixin with other syntax  but decorate standard CSS properties. Stylus calls this feature ""transparent mixins"". I do not like Stylus syntax, I prefer to use something closer to CSS (SCSS) anyway.

I choose  `@property` for my example because I do not like the idea of unwanted, present or future, collisions (Stylus). When I write `@property`  I am pointing to a known css property and when a write a `@mixin` I do not expect such behaviour.  The syntax is the less important part of the request but I tried to show a visual difference. 
",victorherraiz,property
1573,2014-12-25 18:40:18,"I don't think this is a duplicate of #366. The important part of my request was not invoking a mixin with other syntax  but decorate standard CSS properties. Stylus calls this feature ""transparent mixins"". I do not like Stylus syntax, I prefer to use something closer to CSS (SCSS) anyway.

I choose  `@property` for my example because I do not like the idea of unwanted, present or future, collisions (Stylus). When I write `@property`  I am pointing to a known css property and when a write a `@mixin` I do not expect such behaviour.  The syntax is the less important part of the request but I tried to show a visual difference. 
",victorherraiz,mixin
1573,2014-12-26 01:01:29,"You are asking for a new directive to be created and a new abstraction be learned with additional indirection to be tied exclusively to properties thus tightly coupling Sass to knowledge of CSS properties in order to have slightly nicer syntactical sugar over mixins for an issue that can be resolved now using mixins for which there is a proposal that essential covers your use case in a more broad way in order to solve a problem that is going away as browsers drop vendor prefixes that are currently out there and in the future.

I'm not in favor.

> On Dec 25, 2014, at 1:58 AM, victorherraiz notifications@github.com wrote:
> 
> I would be nice to write standard css and fix it for ""old"" browsers without using mixin syntax, by pointing property. This could be helpful for new sass developers and css to sass conversions.
> 
> In the following example I use ""!property"" flag to stop recursive calls.
> SCSS:
> 
> @property display($value) {
>     @if $value == flex {
>         display: -webkit-box !property;
>         display: -moz-box !property;
>         display: -ms-flexbox !property;
>         display: -webkit-flex !property;
>         display: flex !property;
>     } @else {
>         display: $value !property;
>     }
> }
> 
> .example {
>     display: flex;
> }
> CSS Output:
> 
> .example {
>     display: -webkit-box;
>     display: -moz-box;
>     display: -ms-flexbox;
>     display: -webkit-flex;
>     display: flex;
> }
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,if
1573,2014-12-26 01:01:29,"You are asking for a new directive to be created and a new abstraction be learned with additional indirection to be tied exclusively to properties thus tightly coupling Sass to knowledge of CSS properties in order to have slightly nicer syntactical sugar over mixins for an issue that can be resolved now using mixins for which there is a proposal that essential covers your use case in a more broad way in order to solve a problem that is going away as browsers drop vendor prefixes that are currently out there and in the future.

I'm not in favor.

> On Dec 25, 2014, at 1:58 AM, victorherraiz notifications@github.com wrote:
> 
> I would be nice to write standard css and fix it for ""old"" browsers without using mixin syntax, by pointing property. This could be helpful for new sass developers and css to sass conversions.
> 
> In the following example I use ""!property"" flag to stop recursive calls.
> SCSS:
> 
> @property display($value) {
>     @if $value == flex {
>         display: -webkit-box !property;
>         display: -moz-box !property;
>         display: -ms-flexbox !property;
>         display: -webkit-flex !property;
>         display: flex !property;
>     } @else {
>         display: $value !property;
>     }
> }
> 
> .example {
>     display: flex;
> }
> CSS Output:
> 
> .example {
>     display: -webkit-box;
>     display: -moz-box;
>     display: -ms-flexbox;
>     display: -webkit-flex;
>     display: flex;
> }
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,property
1573,2014-12-26 01:01:29,"You are asking for a new directive to be created and a new abstraction be learned with additional indirection to be tied exclusively to properties thus tightly coupling Sass to knowledge of CSS properties in order to have slightly nicer syntactical sugar over mixins for an issue that can be resolved now using mixins for which there is a proposal that essential covers your use case in a more broad way in order to solve a problem that is going away as browsers drop vendor prefixes that are currently out there and in the future.

I'm not in favor.

> On Dec 25, 2014, at 1:58 AM, victorherraiz notifications@github.com wrote:
> 
> I would be nice to write standard css and fix it for ""old"" browsers without using mixin syntax, by pointing property. This could be helpful for new sass developers and css to sass conversions.
> 
> In the following example I use ""!property"" flag to stop recursive calls.
> SCSS:
> 
> @property display($value) {
>     @if $value == flex {
>         display: -webkit-box !property;
>         display: -moz-box !property;
>         display: -ms-flexbox !property;
>         display: -webkit-flex !property;
>         display: flex !property;
>     } @else {
>         display: $value !property;
>     }
> }
> 
> .example {
>     display: flex;
> }
> CSS Output:
> 
> .example {
>     display: -webkit-box;
>     display: -moz-box;
>     display: -ms-flexbox;
>     display: -webkit-flex;
>     display: flex;
> }
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,else
1573,2014-12-26 15:22:10,"There is nothing wrong with the CSS you've written. It's CSS.

The proposal in #366 would allow you to write your original proposal as the following:



The advantage of doing it as mixins, as you've shown in your original proposal, is not only do you need to introduce a new directive, `@property` that has identical syntax as a mixin, but you don't need a `!propery` flag to say ""no I want this property to be a property, not a magic property"".

Your most recent example doesn't even follow from your original proposal. When talking about `rem` fallbacks, you're talking about unit level, not a property level, a whole different proposal than what you've originally discussed. Either way, you have the same problem with your `@property` proposal that you say with `@mixin` in that the fallback is human written and therefore would need to be updated as your browser support changes.

As an aside, the flexbox example you are using [is out of date](http://caniuse.com/#feat=flexbox). `-moz` isn't needed any longer, and for most levels of support for flexbox, legacy `-webkit` isn't needed either.
",Snugug,property
1573,2014-12-26 15:22:10,"There is nothing wrong with the CSS you've written. It's CSS.

The proposal in #366 would allow you to write your original proposal as the following:



The advantage of doing it as mixins, as you've shown in your original proposal, is not only do you need to introduce a new directive, `@property` that has identical syntax as a mixin, but you don't need a `!propery` flag to say ""no I want this property to be a property, not a magic property"".

Your most recent example doesn't even follow from your original proposal. When talking about `rem` fallbacks, you're talking about unit level, not a property level, a whole different proposal than what you've originally discussed. Either way, you have the same problem with your `@property` proposal that you say with `@mixin` in that the fallback is human written and therefore would need to be updated as your browser support changes.

As an aside, the flexbox example you are using [is out of date](http://caniuse.com/#feat=flexbox). `-moz` isn't needed any longer, and for most levels of support for flexbox, legacy `-webkit` isn't needed either.
",Snugug,mixin
1573,2014-12-27 23:25:56,"I recall reading a comment from @nex3 where she explained she does not want to include transparent mixins in Sass. Sass code should be obvious. You should not have some logic hidden behind what looks like a regular CSS declaration.
",HugoGiraudel,nex3
1573,2015-01-06 01:48:47,"The exact issue and comment is [#525/8995033](https://github.com/sass/sass/issues/525#issuecomment-8995033). Quoting @nex3 from that issue:

> I don't like this sort of thing at all. I consider it a pretty grievous misfeature in Stylus. It's very important that someone reading a Sass file be able to consistently determine what's going to be directly compiled to CSS and what's going to have additional processing applied; silently converting properties that look identical to plain CSS blows this completely out of the water. The closest I'd be willing to come is some variation on the proposals in #366.
> 
> Additional problems with this approach include:
> - SCSS is a CSS superset. Part of what that means is that valid CSS should have the same semantics in SCSS as it does in CSS. This proposal violates that.
> - Sass carefully avoids any knowledge of specific CSS properties and their semantics so as to ensure that it doesn't become too tightly coupled to the way CSS works at any specific point in time. This proposal violates that as well.
> - Compass's CSS3-compatibility mixins allow users to thoroughly customize which browser prefixes to show using standard Sass language features. This proposal does now.
>   This is backwards-incompatible with existing Sass stylesheets.
",Snugug,nex3
1570,2014-12-22 16:24:29,"If I use index() when using `@each key,value`, index() returns `""""`, but if I use `@each value` index() works fine.

This works (`@each value`):

http://sassmeister.com/gist/9cd0c0618a38048a46c4

This doesn't (`@each key,value`):

http://sassmeister.com/gist/bd7cff5749ef3e8e4e5f
",maxgalbu,each
1567,2014-12-21 15:23:16,"OK, I will use the check against ""null"". But the documentatin is not clear
at all about that, I looked for that for a white before posting the issue...

Thanks for the lights.

2014-12-21 15:31 GMT+01:00 cimmanon notifications@github.com:

> There's a big difference between a variable that is not set vs a variable
> that is set to null. If you want to check nullness, check for null:
> 
> @mixin test-variable($my-variable: null) {
>   @if variable-exists(my-variable) and $my-variable != null {
>     @debug 'exist';
>   }
>   @else {
>     @debug 'not exist';
>   }
> }
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1567#issuecomment-67772091.
",B-Prod,if
1567,2014-12-21 15:23:16,"OK, I will use the check against ""null"". But the documentatin is not clear
at all about that, I looked for that for a white before posting the issue...

Thanks for the lights.

2014-12-21 15:31 GMT+01:00 cimmanon notifications@github.com:

> There's a big difference between a variable that is not set vs a variable
> that is set to null. If you want to check nullness, check for null:
> 
> @mixin test-variable($my-variable: null) {
>   @if variable-exists(my-variable) and $my-variable != null {
>     @debug 'exist';
>   }
>   @else {
>     @debug 'not exist';
>   }
> }
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1567#issuecomment-67772091.
",B-Prod,else
1567,2014-12-21 15:23:16,"OK, I will use the check against ""null"". But the documentatin is not clear
at all about that, I looked for that for a white before posting the issue...

Thanks for the lights.

2014-12-21 15:31 GMT+01:00 cimmanon notifications@github.com:

> There's a big difference between a variable that is not set vs a variable
> that is set to null. If you want to check nullness, check for null:
> 
> @mixin test-variable($my-variable: null) {
>   @if variable-exists(my-variable) and $my-variable != null {
>     @debug 'exist';
>   }
>   @else {
>     @debug 'not exist';
>   }
> }
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1567#issuecomment-67772091.
",B-Prod,debug
1567,2014-12-21 15:23:16,"OK, I will use the check against ""null"". But the documentatin is not clear
at all about that, I looked for that for a white before posting the issue...

Thanks for the lights.

2014-12-21 15:31 GMT+01:00 cimmanon notifications@github.com:

> There's a big difference between a variable that is not set vs a variable
> that is set to null. If you want to check nullness, check for null:
> 
> @mixin test-variable($my-variable: null) {
>   @if variable-exists(my-variable) and $my-variable != null {
>     @debug 'exist';
>   }
>   @else {
>     @debug 'not exist';
>   }
> }
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1567#issuecomment-67772091.
",B-Prod,mixin
1564,2014-12-20 04:30:14,"That was the question:), otherwise your example can be much simpler:



I've played with `@at-root` already
",nazar-pc,at-root
1562,2015-01-09 17:24:28,"In 3.4.5 @nex3 changed the watcher to observe the current working directory (Commit e68d72b8). My guess is that your current working directory has a lot of files or maybe it includes network shares as mentioned by @Stephn-R. That change addressed issues #1393 and #1411 so if we were to revert this, we'd need to find other ways to fix those.
",chriseppstein,nex3
1562,2015-10-19 22:35:09,"Salut
- I'm not so good at written English, skip writing mistakes -

The solution:
(For Linux it work instant, before that it take 20-40 seconds.  I did not test on win or mac)

I. change the directory to your project root or to folder conteining the main .scss file -ex:
octavian@ubuntu-DQ35JO:~$ cd /var/www/scss/fifi/

II. from here run the ' scss --watch' for your .scss file in this folder and for output after ':' use full path -ex:
octavian@ubuntu-DQ35JO:/var/www/scss/fifi$ scss --watch myfile.scss:/var/www/mysite.me/css/myfile.css

! for import something in your main scss file use full path -ex:
// import gridle
@import ""/var/www/scss/fifi/vendor/gridle/gridle"";

The speed problem comes from ruby/scss or something '--watch' all the folders if you use the comand -ex:
octavian@ubuntu-DQ35JO:~$ scss --watch /var/www/scss/fifi/ideeaco.scss:/var/www/mysite.me/css/myfile.css

I notice when i delete some .scss files in another folder,  ruby/scss or something react and thel me someting about .scss files from trash.
",ideeaco,import
1560,2015-01-12 10:37:56,"What do you consider to be ""semantically valid Sass""? Is it what you expect it to be?

From my point of view, ""syntactically valid Sass"" is what @nex3 and @chriseppstein determine to be.
",lolmaus,nex3
1557,2014-12-09 23:10:41,"I have a class for rows and columns, the column layouts turn into rows on mobile - I have designed it in such a way that if I could use the code:

> .column { @extend .row }

The columns would transition to rows based on the media query; however with the nature of the @extend it seems to ignore media queries and @extend outside of the given range for the media query. All my other styles inside of the media queries work fine so it is this extend issue I believe..
",SimpleIX,extend
1556,2014-12-12 21:49:01,"> 

When you interpolate `&`, as with any interpolation, it just converts it to a string and includes that string value. In this case, `&` is `(("".validate""))`, so the selector becomes `.validate-valid` nested underneath `.validate`. When nesting is resolved this becomes `.validate .validate-valid`.

> 

Sass parses `&-valid` in a SassScript context as equivalent to `& -valid`, since `-valid` is a CSS identifier and no operator between two values means that those values are considered to be in a list.

In general, you can't write bare selectors in a SassScript context. SassScript is based on CSS values, not selectors.

> 

Because `&` could be replaced by any selector, it has the same syntactic requirement as the most restrictive simple selectors: it must appear at the beginning of the compound selector. You can't have two in a row because that means one of them isn't at the beginning.

> 

Because now both `&`s are at the beginning of separate compound selectors.

> 

Because interpolation sidesteps the usual parsing rules. Interpolation treats everything as a plain old string, so you can include interpolation basically wherever you want.

The most robust way to write this would be `@at-root #{selector-append(&, &, ""-valid"")}`. In general, if you're using `&` within interpolation, you should be using it with both `@at-root` and selector functions.
",nex3,at-root
1555,2014-12-08 23:11:37,"I want to re-use a class‚Äô styles for another class inside a media query.

The only way to do this today, AFAIK, is to create a mixin with the common styles:



Is there a better way? I understand `@extend` can not provide for my needs here, although I'm not sure what the status of that is now nor that it will be like in the future. If not, could we provide sugar syntax for this, given how often it is needed? Perhaps:



I did a cursory search to see if this had been discussed. Sorry if I missed something.
",OliverJAsh,extend
1555,2014-12-09 22:24:51,"The solution described by @chriseppstein in https://github.com/sass/sass/issues/1050#issuecomment-36097901 solves my problem.
",OliverJAsh,chriseppstein
1553,2014-12-08 06:05:27,"I just ran into a situation today where I needed to scope a bunch of variables inside a mixin. I _could_ prepend something to all the modified variables, but there are a lot of variables in lots of places and the names are already pretty long, **or** I could throw all the code I need into a mixin. I just need to copy all the variables in a bunch of different places like this:



This would be painful, especially if I needed to add more mixins or change/add more variables. I saw this issue #871, but it's kind of the exact opposite of what I need in a way, but maybe it could be made to work? I need a better way to scope variables inside a mixin. I have a few rough ideas how to solve this, but the only super simple one that doesn't really mess with a lot of things is this.

`@scope` It lets variables in, but nothing out:



I understand this is a rare use case. In most cases, you could probably utilize maps somehow if you didn't need to modify the variables often, but in this case I need to use the `bar` mixin in many different places and modify a few variables with different values each time getting very similar, but also very custom result each time.

Edit: This is basically a dup of all of these  #616, #440, #599, #462 and #353. I guess I searched the wrong things before posting. What's the situation with this idea though? Is it still a thing that you guys are open to implementing one day? Or maybe it doesn't fit in anymore as things have progressed?
",whaaaley,scope
1552,2014-12-07 22:30:08,"@dustindowell22 Very interesting. Thanks.
",Undistraction,dustindowell22
1550,2014-12-03 05:46:53,"I am trying to run Sass 3.4.7 on a server with a command like `~/.gem/ruby/1.9.1/bin/sass input.css output.css` but I get an error about an ""Invalid US-ASCII character"" referencing a line with a smart quote. Although a smart quote is not ASCII, from reading the documentation, I would assume that Sass would treat the file as UTF-8, but it does not seem to be doing so.

After some searching, I find that I should add a `@charset` directive and that it has to come at the very beginning of the file:



I added it, but now I just get a different error: `Invalid charset directive '@charset': expected string.`

I added a line to see what `value` is in `parse_charset_directive()`, and it is `""UTF-8"";` (it includes the semicolon). Adding a semicolon to the regex in `parse_charset_directive` seems to fix the error, but I don't know the code enough to know if that fix is correct:


",jminer,charset
1547,2014-11-25 22:00:21,"In my Sass I often find myself applying the same value to multiple properties. Usually to properties such as margin, padding, width and height. I've solved the problem for myself by making a mixin:



Is this something that others would find helpful? Obviously not having the `@include` would be a nicer syntax, but is this the type of feature that would be better fit in the language itself? I would be more than happy to make a patch if this would be beneficial to others.
",Robovirtuoso,include
1547,2014-11-25 22:28:16,"IMO, this is not something appropriate for a language level feature, but best suited libraries built on top of the language.

> On Nov 25, 2014, at 5:00 PM, Alex Williams notifications@github.com wrote:
> 
> In my Sass I often find myself applying the same value to multiple properties. Usually to properties such as margin, padding, width and height. I've solved the problem for myself by making a mixin:
> 
> @mixin property($value, $properties) {
>   @each $property in $properties {
>     #{$property}: $value
>   }
> }
> 
> .box {
>   @include property(30px, padding-left padding-right);
>   @include property(50%, width height);
> }
> Is this something that others would find helpful? Obviously not having the @include would be a nicer syntax, but is this the type of feature that would be better fit in the language itself? I would be more than happy to make a patch if this would be beneficial to others.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,each
1547,2014-11-25 22:28:16,"IMO, this is not something appropriate for a language level feature, but best suited libraries built on top of the language.

> On Nov 25, 2014, at 5:00 PM, Alex Williams notifications@github.com wrote:
> 
> In my Sass I often find myself applying the same value to multiple properties. Usually to properties such as margin, padding, width and height. I've solved the problem for myself by making a mixin:
> 
> @mixin property($value, $properties) {
>   @each $property in $properties {
>     #{$property}: $value
>   }
> }
> 
> .box {
>   @include property(30px, padding-left padding-right);
>   @include property(50%, width height);
> }
> Is this something that others would find helpful? Obviously not having the @include would be a nicer syntax, but is this the type of feature that would be better fit in the language itself? I would be more than happy to make a patch if this would be beneficial to others.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,include
1547,2014-11-25 22:28:16,"IMO, this is not something appropriate for a language level feature, but best suited libraries built on top of the language.

> On Nov 25, 2014, at 5:00 PM, Alex Williams notifications@github.com wrote:
> 
> In my Sass I often find myself applying the same value to multiple properties. Usually to properties such as margin, padding, width and height. I've solved the problem for myself by making a mixin:
> 
> @mixin property($value, $properties) {
>   @each $property in $properties {
>     #{$property}: $value
>   }
> }
> 
> .box {
>   @include property(30px, padding-left padding-right);
>   @include property(50%, width height);
> }
> Is this something that others would find helpful? Obviously not having the @include would be a nicer syntax, but is this the type of feature that would be better fit in the language itself? I would be more than happy to make a patch if this would be beneficial to others.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,mixin
1547,2014-12-02 15:12:02,"Correct me if I am wrong @HugoGiraudel but I believe that this is not an issue about whether an ""applicator"" is needed or not, the issue is with how the `@include` directive was designed.

It was not originally designed for those types of operations. Plus, there would be a serious concern with scope. For example, if you did the following:



These variables would exist outside the scope of the initial Sass compilation sequence and be rendered useless. 

HOWEVER, I would consider just using something like a **_variables.scss** file to import. This is what I use and have found it very helpful.

Reference: http://thesassway.com/beginner/how-to-structure-a-sass-project
",Stephn-R,include
1546,2014-12-05 21:30:01,"For the same reason that `@extend` fails here, we don't have the ability to see whether the selector was defined, `!optional` or no. Even if we could, I don't like this syntax and I don't want to risk running afoul of CSS syntax later on. Ultimately I suspect this isn't a wide enough use case, either.
",nex3,extend
1545,2014-11-26 03:04:48,"Can you expand on the feature you are requesting? How would this differ than from using the @at-root directive?
",Stephn-R,at-root
1545,2014-11-27 13:40:14,"I have something roughly along the lines of:



`@at-root` doesn't help in my case because in some cases I'm including the mixin within a media query (and at other times not). 
",gsnedders,at-root
1545,2014-11-28 17:50:08,"Oh, I'd misunderstood what `@at-root` does. I'd read as far as ""the @at-root directive causes one or more rules to be emitted at the root of the document"" and then looked elsewhere. Still, doesn't really do what I need.

What I need, ideally, to do is to take two selectors, `html.sml *` and `html.article article > h2`, and somehow merge them to come out with `html.sml.article article > h2`. Of course, doing that with an `html` element selector requires knowledge that the tree only contains a single `html` element, which is impractical. However, the `:root` selector by definition only matches a single element, hence it should be possible to merge them.

I can't just do `html.sml #{$selector}` because some of the other selectors need to match classes on the root element (and everything is a mess so changing the HTML will probably lead to other breakage, le sigh‚Ä¶) and hence somehow have to merge the two‚Ä¶
",gsnedders,at-root
1543,2014-11-25 22:16:07,"The semantics of this would be extremely unclear for anyone who doesn't know programming language terminology. The issues with include order will also become largely moot when we move to the more module-based `@use`.
",nex3,use
1540,2014-11-24 16:47:06,"I know this is a crazy edge case, but this bug showed up in the Sass version of bootstrap, so it should be affecting a good number of people when they move to 3.4. 

It works fine in 3.3, but outputs ""@charset ""UTF-8"";"" into the stylesheet in 3.4. This string then breaks our concatenation. 

http://sassmeister.com/gist/17e523cdafe6f107289d
![screenshot 2014-11-24 08 43 49](https://cloud.githubusercontent.com/assets/1434956/5168695/0661b1a4-73b6-11e4-81cb-4a5f77111b70.png)
",micahgodbolt,charset
1540,2014-11-24 21:28:00,"This is intentional. As of 3.4, Sass parses strings according to the CSS spec, which means it interprets Unicode escapes as equivalent to literal Unicode characters. It then always adds a `@charset` declaration if there are any non-ASCII characters in the stylesheet. #1395 is tracking the addition of a flag to force Sass to emit ASCII, but regardless of when that happens I suggest you encourage the other tools on your tool chain (such as concatenation) to properly parse the CSS and handle `@charset` declarations.
",nex3,charset
1534,2014-11-20 21:11:31,"@nex3 What is the reason for not having a support chatroom?
",ankurp,nex3
1534,2014-11-20 21:20:30,"Well, first of all you filed an issue without any text, so there's not really anything there to discuss. You're asking us as maintainers to devote our time and attention to an additional channel without any particular justification about why that channel is important. There's already the [@SassCSS](http://twitter.com/SassCSS) twitter account, the [mailing list](https://groups.google.com/forum/#!forum/sass-lang), the [StackOverflow tag](http://stackoverflow.com/questions/tagged/sass), and the IRC channel at `irc.freenode.net#sass`. Why does this thing you're proposing provide more value than any of these?
",nex3,SassCSS
1531,2014-11-18 22:04:26,"I am not quite sure why Sass does not provide a built-in way to compare (therefore allow operations on) angles from different units (`deg`, `grad`, `rad`, `turn`). 

@chriseppstein wrote this function a while back to do it, but I can't see any reason for Sass not to be able to perform such operations given that there is no context involved whatsoever.



Do you think like this could be added so we don't have to move this function around?
",HugoGiraudel,chriseppstein
1530,2014-11-18 21:29:40,"The idea would be to have a sass function which checks if a given list contains a specified value. I started some initial work on this but wanted to open up the request for discussion.

Something like:



CC @whmii who originally proposed this function.
",dgalarza,whmii
1524,2014-11-14 13:35:08,"If I do



Then sass will put the `@import url` will appear before the imported partial's styles, **changing the precedence order**.

So the developers must be warning or even an error must be raise, because the precedence order is very important.
",brauliobo,import
1524,2014-11-14 23:10:53,"CSS requires that `@import` statements appear before anything else in a stylesheet (other than `@charset` declarations, I guess). We can't really throw an error for that case, because that breaks the ability for partials to declare CSS imports that they use (e.g. for loading font stylesheets).
",nex3,charset
1524,2014-11-14 23:10:53,"CSS requires that `@import` statements appear before anything else in a stylesheet (other than `@charset` declarations, I guess). We can't really throw an error for that case, because that breaks the ability for partials to declare CSS imports that they use (e.g. for loading font stylesheets).
",nex3,import
1521,2014-11-13 11:16:11,"It would be great if SASS/SCSS just could determine whether a variable gets to change its value inside `@media` directives and produce output accordingly.

For instance, ZURB uses $topbar-height variable to control the height of the top bar.

How do I easily make different heights for small and medium, without overloading native code that is? It seems there's no way.

With the suggested feature, the below approach might become possible:



to produce



Thinking about implementation, pardon my uneducated say in this, I think along th—É following approach. SASS could create a shadow variable with attributes marking the duplicated variable with the media-query adherence. And when the consecutive code requires this variable, the pre-processor has to determine whether the variable uses media-based shadows and if yes, generate versions of the code for each copy of the variable under its media query (with the due grouping, of course).

Please give this idea a second thought after you have rejected it at first. :)
",AndrewRevinsky,media
1521,2014-11-13 11:35:21,"While you wouldn't be able to do this through just a variable, #1010 would allow you to write a mixin that can do this, turning it into `@include topbar-height` or something of the sort. You can also use [Breakpoint](https://github.com/at-import/breakpoint) today to do this.

As for variable shadowing like this, IMO it would break scoping hard and I don't think it should be included, not to mention the fact that there are so many different permutations of media queries and the actual semantics of those media queries that variable scope juggling would get super messy super quick. Is a variable scoped to `only screen and (min-width: 40.063em)` also valid with a `only screen and (max-width: 50em)` media query? For about `10em` it seems like it should be. What about `(min-width: 45em)` that is now available for all media types? Or `(orientation: landscape)` which may or may not match. Having Sass automagically change variable scope with all of the different options (these were just to name a few) will lead to unexpected results, but if you specify exactly what you mean in a mixin/function (like you'd be able to with media query context/can with Breakpoint context) then it's an author led decision.
",Snugug,include
1521,2014-11-13 12:36:44,"Once you start thinking about it, there seems to be two implementation paths that could both get achieved. Naturally, both paths are desirable.

First, if a.. let's call it a _split-variable_.. if a split-variable is present inside a `@media` directive, it's output value will be according to the media it is matched against.



to produce



Second, a split variable itself could populate media queries. Like in the example from the initial request.
",AndrewRevinsky,media
1521,2014-11-13 12:52:40,"@Snugug I totally undestand the repercussions of this. That's why I assumed the idea might get rejected at first. But bear with me for sec.

Let's consider the part of your answer about permutations. Cannot implementation be chosen to be conservative in this regard and thoughful of a way to minimize the amount of generated media queries? I mean, look, the `@extend` directive. It may also at first seem prone to expand your code with all permutations but it doesn't so much, right? So my point is when a though put into this a way can be found.

As to using the mixins.. 
Let's consider a common - and real - usage scenario. I bower-install a SASS-based package, say, Zurb Foundation (I already mentioned it). Okay, they provide variables to customize the look, say, height of a top bar. But they use only one(!) height variable for this. A single height for three visual variations (small, medium, large). So _without_ altering the Foundation code or overwriting parts of their code, it seems, I cannot achieve my goal (and my goal is to have varying heights based on the resolution). I cannot use mixins, for it means changing _thier_ code.

The way out seems to be in split-variables. Can you see my point now?
",AndrewRevinsky,extend
1521,2014-11-13 12:58:25,"@nex3, @chriseppstein, @thedarkone SASS people, may I draw your attention as well to this? 
",AndrewRevinsky,nex3
1521,2014-11-13 12:58:25,"@nex3, @chriseppstein, @thedarkone SASS people, may I draw your attention as well to this? 
",AndrewRevinsky,chriseppstein
1521,2014-11-13 12:58:25,"@nex3, @chriseppstein, @thedarkone SASS people, may I draw your attention as well to this? 
",AndrewRevinsky,thedarkone
1518,2016-01-05 13:44:19,"@toby: table for 2 it seems. :) happy new years all. 
",michaelfavia,toby
1512,2015-03-11 00:31:32,"Actually I'm not sure with whom you agree (you didn't clearly state that). But let me explain it a little more. The example given by @xzyfer is unfortunately not optimal, since the `and` comes before the `or`, and in this situation the parentheses don't make a difference, since the `and` will be evaluated first (as it should to its precedence). But this changes if you have the `or` first. The key here is that `and` has a higher precedence than `or`, so the parentheses are needed if we want to give `or` the highest precedence in the expression (and ruby sass seems to remove exactly these parentheses).

Take this haskell example:



Or in Perl



I gave this example in my post above:



Which ruby sass changes to:



I actually created a test, and now comes the clue: It seems that the specs @cimmanon mentioned are implemented pretty strict, so that something like the following will always be ignored:



So take this example:



This actually shows `works` in every browser I tested (firefox, chrome, opera). That should prove that removing the parentheses actually does change the behavior, although in a different way than I expected!
//CC @nex3 @chriseppstein 
",mgreter,chriseppstein
1512,2015-03-11 01:08:45,"By the way, `@media` rules seem to have a slighly different rule, as they don't seem to allow any `or` ops at the top level ~~(although they seem to work when inside parantheses)~~.



This also shows `works`. Looks like I've learned something new today;wouldn't have expected this. Anyway, these top `or`s could be converted to commas to create valid css (not sure if ruby sass wants to support that). Or you could give a warning for invalid rules.

Edit: The rules for `@media` seem to be even stranger. Actually they don't seem to allow any parentheses around ""statements"" at all, but ""statements"" can be or'ed by commas, even if some if the ""statements"" are wrapped in additional parentheses. Pretty weird actually, but browsers seem consistent in their behavior:



But the rules are slightly different for `@supports` as it would show `not either` with the example above, while `@media` shows `yes`. Very confusing indeed ...
",mgreter,supports
1512,2015-03-11 01:08:45,"By the way, `@media` rules seem to have a slighly different rule, as they don't seem to allow any `or` ops at the top level ~~(although they seem to work when inside parantheses)~~.



This also shows `works`. Looks like I've learned something new today;wouldn't have expected this. Anyway, these top `or`s could be converted to commas to create valid css (not sure if ruby sass wants to support that). Or you could give a warning for invalid rules.

Edit: The rules for `@media` seem to be even stranger. Actually they don't seem to allow any parentheses around ""statements"" at all, but ""statements"" can be or'ed by commas, even if some if the ""statements"" are wrapped in additional parentheses. Pretty weird actually, but browsers seem consistent in their behavior:



But the rules are slightly different for `@supports` as it would show `not either` with the example above, while `@media` shows `yes`. Very confusing indeed ...
",mgreter,media
1512,2015-03-11 10:47:35,"@cimmanon please re-read my posts above. Parentheses work in `@supports` rules, while they don't in `@media` (and the original report is only about `@supports`). That's why removing the parentheses for `@supports` rules is an actual bug. IMO I cannot provide more clear examples ...
",mgreter,supports
1512,2015-03-11 10:47:35,"@cimmanon please re-read my posts above. Parentheses work in `@supports` rules, while they don't in `@media` (and the original report is only about `@supports`). That's why removing the parentheses for `@supports` rules is an actual bug. IMO I cannot provide more clear examples ...
",mgreter,media
1510,2014-11-05 13:26:34,"Hi there,

Variable interpolation should be allowed in @import. Projects that depend on a lot of folders could make management easier by interpolating variables which hold the name of certain folders.

Is this planned for the near future?

Thanks in advance ;)
",Gespinha,import
1505,2014-11-02 22:12:59,"Related to #1380 but slightly different: when you `@extend` a simple selector (that's been used in a :not somewhere) inside a compound selector, sass will generate a new :not with that compound selector appended. It seems that this will be supported in [CSS4](http://dev.w3.org/csswg/selectors4/#negation) but for now isn't working in any browsers.

[This Codepen](http://codepen.io/anon/pen/degmw) gives a minimal example of the problem - line 9 expands to



which is not valid.
",guycook,extend
1497,2014-10-30 23:39:41,"It's too likely that people are doing this intentionally to warn about it, and I don't like adding options. When `@use` comes along, that'll make this a lot harder to do accidentally.
",nex3,use
1496,2014-11-08 10:18:08,"This is where having both `==` and `===` would make sense.



This would allow you to preserve backward compatibility while having a clean and standard way to support @ericam's request.
",HugoGiraudel,ericam
1496,2015-06-08 15:42:11,"Clearly, I am not as clued up on this as some. How would I fix the following, specifically `@if $value == 0` is picking up a warning:


",Wordius,if
1495,2014-10-30 23:37:10,"Note that the test case can be simplified considerably:



Anyway, the behavior you're seeing is intended. The selector `.a .c .d.b` is a subselector of `.a .d.b` (that is, everything the former matches is also matched by the latter). As such, it's safe to trim the latter.

The reason that this doesn't happen with `::-webkit-scrollbar` has to do with specificity. Sass guarantees that when you write `A {@extend B}`, the generated selectors will have specificity greater than or equal to the specificity of `A` (we call this the ""extender""). When Sass looks at the generated selector `.a .c .d.b`, it remembers that its extender was `.a .c .b`. Because `.a .c .b` has the same specificity as `.a .d.b` **and** `.a .c .d.b` is a subselector of `.a .d.b`, it's safe to remove `.a .c .d.b`.

With `::-webkit-scrollbar`, on the other hand, the selector we're comparing against is `.a .b::-webkit-scrollbar`. Pseudoelements have lower specificity than classes, so this has less specificity than `.a .c .b`, which means that `.a .c .b::-webkit-scrollbar` can't be trimmed or we'd violate our guarantee.
",nex3,extend
1484,2014-10-23 14:15:49,"Some users want to use sourcemaps in development without creating any additional files, or even entirely over stdin/stdout. We should add an additional sourcemap type (`in-css`? `base64`? `super-inline`?) that does this.

**Edited by @nex3 to retarget the issue. Previous report below:**

I can't find any possibility to get the sourcemap without having to write both, the compiled `.css` and the sourcemap file to disk.

I am looking for something like:



which would output the sourcemap instead of the compiled `.css`.

This is relevant when writing transformers in certain frameworks since they only work in memory.
",enyo,nex3
1483,2014-10-23 09:48:57,"I have a mixin like this to add a dash on the end of a value.



I'd expect either a `null` value, or the default value, to be assigned if no other value is specified. I'm doing this often so it'd be nice to not have to add a null value every time.

Using `@if` isn't terrible, but it would be more readable when looking through my list of variables.
",whaaaley,if
1483,2014-10-24 20:41:00,"Why not create your own `@function` which contains the logic you want to use? This could also tidy the mixin up even further.

Something along the lines of:


",andrewjtait,function
1483,2014-10-25 12:07:06,"@andrewjtait Because it's not always just a dash. I guess that was a poor example. I also could have left the mixin part out. I just always end up writing a bunch of one line if statements to modify a variable based on something else and if that fails I always revert it back to the default mixin value. Most of my mixins are like this. I thought it'd be better to stay consistent with `@if`.
",whaaaley,if
1479,2014-10-20 13:00:49,"More complex example:
http://jsfiddle.net/72800sj5/ (works; `@mixin` instead of `@extend`)
http://jsfiddle.net/1g10z6b4/ (does not work; styles compiled localy using latest version of sass, just replaced `@mixin` with `%` and `@include` with `@extend %`; probably there are an older sass version on jsfiddle, that cannot compile styles correctly)

From http://www.w3.org/TR/CSS2/cascade.html#cascading-order

> To find the value for an element/property combination, user agents must apply the following sorting order:
> 1. Find all declarations that apply to the element and property in question, for the target media type. **Declarations apply if the associated selector matches the element in question** and the target medium matches the media list on all `@media` rules containing the declaration and on all links on the path through which the style sheet was reached.
> 2. Sort according to importance (normal or important) and origin (author, user, or user agent). In ascending order of precedence:
>    1. user agent declarations
>    2. user normal declarations
>    3. author normal declarations
>    4. author important declarations
>    5. user important declarations
> 3. Sort rules with the same importance and origin by specificity of selector: more specific selectors will override more general ones. Pseudo-elements and pseudo-classes are counted as normal elements and classes, respectively.
> 4. Finally, sort by order specified: if two declarations have the same weight, origin and specificity, the latter specified wins. Declarations in imported style sheets are considered to be before any declarations in the style sheet itself.

In case of simple nested selectors
**.menu .button ==  .menu .submenu .button**: `.button` is subselector of `.menu` in both selectors, so we can remove the second. That optimization is correct.

But in case of child selectors
**.menu > .button !==  .menu > .submenu > .button**: selectors are different and they matches different elements (but .menu > .button == .menu > .submenu > .button <=> (iff) .submenu has .menu class). Sass mustn't optimize that code.
",beliarh,extend
1479,2014-10-20 13:00:49,"More complex example:
http://jsfiddle.net/72800sj5/ (works; `@mixin` instead of `@extend`)
http://jsfiddle.net/1g10z6b4/ (does not work; styles compiled localy using latest version of sass, just replaced `@mixin` with `%` and `@include` with `@extend %`; probably there are an older sass version on jsfiddle, that cannot compile styles correctly)

From http://www.w3.org/TR/CSS2/cascade.html#cascading-order

> To find the value for an element/property combination, user agents must apply the following sorting order:
> 1. Find all declarations that apply to the element and property in question, for the target media type. **Declarations apply if the associated selector matches the element in question** and the target medium matches the media list on all `@media` rules containing the declaration and on all links on the path through which the style sheet was reached.
> 2. Sort according to importance (normal or important) and origin (author, user, or user agent). In ascending order of precedence:
>    1. user agent declarations
>    2. user normal declarations
>    3. author normal declarations
>    4. author important declarations
>    5. user important declarations
> 3. Sort rules with the same importance and origin by specificity of selector: more specific selectors will override more general ones. Pseudo-elements and pseudo-classes are counted as normal elements and classes, respectively.
> 4. Finally, sort by order specified: if two declarations have the same weight, origin and specificity, the latter specified wins. Declarations in imported style sheets are considered to be before any declarations in the style sheet itself.

In case of simple nested selectors
**.menu .button ==  .menu .submenu .button**: `.button` is subselector of `.menu` in both selectors, so we can remove the second. That optimization is correct.

But in case of child selectors
**.menu > .button !==  .menu > .submenu > .button**: selectors are different and they matches different elements (but .menu > .button == .menu > .submenu > .button <=> (iff) .submenu has .menu class). Sass mustn't optimize that code.
",beliarh,media
1479,2014-10-20 13:00:49,"More complex example:
http://jsfiddle.net/72800sj5/ (works; `@mixin` instead of `@extend`)
http://jsfiddle.net/1g10z6b4/ (does not work; styles compiled localy using latest version of sass, just replaced `@mixin` with `%` and `@include` with `@extend %`; probably there are an older sass version on jsfiddle, that cannot compile styles correctly)

From http://www.w3.org/TR/CSS2/cascade.html#cascading-order

> To find the value for an element/property combination, user agents must apply the following sorting order:
> 1. Find all declarations that apply to the element and property in question, for the target media type. **Declarations apply if the associated selector matches the element in question** and the target medium matches the media list on all `@media` rules containing the declaration and on all links on the path through which the style sheet was reached.
> 2. Sort according to importance (normal or important) and origin (author, user, or user agent). In ascending order of precedence:
>    1. user agent declarations
>    2. user normal declarations
>    3. author normal declarations
>    4. author important declarations
>    5. user important declarations
> 3. Sort rules with the same importance and origin by specificity of selector: more specific selectors will override more general ones. Pseudo-elements and pseudo-classes are counted as normal elements and classes, respectively.
> 4. Finally, sort by order specified: if two declarations have the same weight, origin and specificity, the latter specified wins. Declarations in imported style sheets are considered to be before any declarations in the style sheet itself.

In case of simple nested selectors
**.menu .button ==  .menu .submenu .button**: `.button` is subselector of `.menu` in both selectors, so we can remove the second. That optimization is correct.

But in case of child selectors
**.menu > .button !==  .menu > .submenu > .button**: selectors are different and they matches different elements (but .menu > .button == .menu > .submenu > .button <=> (iff) .submenu has .menu class). Sass mustn't optimize that code.
",beliarh,include
1479,2014-10-20 13:00:49,"More complex example:
http://jsfiddle.net/72800sj5/ (works; `@mixin` instead of `@extend`)
http://jsfiddle.net/1g10z6b4/ (does not work; styles compiled localy using latest version of sass, just replaced `@mixin` with `%` and `@include` with `@extend %`; probably there are an older sass version on jsfiddle, that cannot compile styles correctly)

From http://www.w3.org/TR/CSS2/cascade.html#cascading-order

> To find the value for an element/property combination, user agents must apply the following sorting order:
> 1. Find all declarations that apply to the element and property in question, for the target media type. **Declarations apply if the associated selector matches the element in question** and the target medium matches the media list on all `@media` rules containing the declaration and on all links on the path through which the style sheet was reached.
> 2. Sort according to importance (normal or important) and origin (author, user, or user agent). In ascending order of precedence:
>    1. user agent declarations
>    2. user normal declarations
>    3. author normal declarations
>    4. author important declarations
>    5. user important declarations
> 3. Sort rules with the same importance and origin by specificity of selector: more specific selectors will override more general ones. Pseudo-elements and pseudo-classes are counted as normal elements and classes, respectively.
> 4. Finally, sort by order specified: if two declarations have the same weight, origin and specificity, the latter specified wins. Declarations in imported style sheets are considered to be before any declarations in the style sheet itself.

In case of simple nested selectors
**.menu .button ==  .menu .submenu .button**: `.button` is subselector of `.menu` in both selectors, so we can remove the second. That optimization is correct.

But in case of child selectors
**.menu > .button !==  .menu > .submenu > .button**: selectors are different and they matches different elements (but .menu > .button == .menu > .submenu > .button <=> (iff) .submenu has .menu class). Sass mustn't optimize that code.
",beliarh,mixin
1477,2014-10-23 17:44:28,"@dustindowell22 Quite clever :+1: 
@HugoGiraudel My thought too
",jakob-e,dustindowell22
1477,2014-12-22 16:59:33,"@dustindowell22 @HugoGiraudel @jakob-e 

I've implemented the optional percentage in the above pull request, but am noticing only slightly different values from @dustindowell22's implementation. 

https://github.com/jshawl/sass-invert-tests 
",jshawl,dustindowell22
1477,2014-12-30 14:28:44,"@dustindowell22 nvm! I implemented your solution, in ruby! Just calls the mix method with a percentage (defaults to 100% if none given)
",jshawl,dustindowell22
1476,2015-09-08 09:45:07,"hi @mzgol ,
 i updated sass to 3.4.18 still getting the same error :(
",riazek,mzgol
1475,2014-10-24 19:55:13,"Does you file use any `@import`s? Can you post the exact command-line invocation you're using to start the watch?
",nex3,import
1472,2014-10-15 00:07:23,"I'd love to have a way to import multiple files from a folder without repeating myself and also be able to move my imports around fast and efficient.

Currently you've to specify a relative path for each import



This becomes very repetitive when you have a large folder structure. The [`sass-globbing`](https://github.com/chriseppstein/sass-globbing) gem can help with this, but doesn't allow for control for which Sass files to include or in which order.

I've come up with a rough idea how `@import` could look like to import from folders ‚Äì adding functionality for easy globbing aswell ‚Äì this should also support the current `@import` syntax.



The `from` keyword determines which directory to import the list of files from.
",fnky,import
1472,2014-10-16 12:29:24,"@Snugug Could you explain as why this is a duplicate? As I see it #1094 is a compilation of `@import` related issues but it doesn't contain any ideas as explained above.
",fnky,import
1472,2014-10-16 13:41:52,"> If ""foo"" is a folder than it tries to import ""foo/_module.scss""

You'd specify which files you'd like to import (and in what order) in `_module.scss` (or something similar) and then just do `@import ""foo"";`
",Snugug,import
1470,2014-10-14 13:29:59,"My team and I are interested in making darken accept a null argument. We'd like to see it return nothing if null is passed, and like Sass does for null variables, remove the property value pair from the selector. We use bootstrap for our front end and this would allow us to return less code for values we don't want to set.

We currently get this error:



Would you be open to a PR?

Thanks,

@stubbornella & @gpleiss 
",stubbornella,gpleiss
1470,2014-10-14 13:29:59,"My team and I are interested in making darken accept a null argument. We'd like to see it return nothing if null is passed, and like Sass does for null variables, remove the property value pair from the selector. We use bootstrap for our front end and this would allow us to return less code for values we don't want to set.

We currently get this error:



Would you be open to a PR?

Thanks,

@stubbornella & @gpleiss 
",stubbornella,stubbornella
1466,2014-10-07 22:53:47,"As a followup to our announcement that Ruby Sass and libsass would have tighter collaboration, I'd like to create a separate repo in the sass organization where we will centralize all new features and changes to Sass: The Language‚Ñ¢.

Features there will be closed when the change has been approved and implemented in sass-spec, sass, and libsass.

I'd like to keep the RFC process very informal. Anyone and everyone should be able to follow along and weigh in -- just like our current issue tracker.

As a transition plan, I think we should just link to existing Sass feature requests but any new requests should originate there.

This new repo is where we'd be able to track what features are in what versions of Sass: The Language‚Ñ¢ starting with what's in 4.0 (assuming 4.0 is the release after 3.4).

I'd like each RFC to be named for release and detectable using feature detection (aka feature-exists())

cc: @nex3 @hcatlin @akhleung 
",chriseppstein,nex3
1466,2014-10-07 22:53:47,"As a followup to our announcement that Ruby Sass and libsass would have tighter collaboration, I'd like to create a separate repo in the sass organization where we will centralize all new features and changes to Sass: The Language‚Ñ¢.

Features there will be closed when the change has been approved and implemented in sass-spec, sass, and libsass.

I'd like to keep the RFC process very informal. Anyone and everyone should be able to follow along and weigh in -- just like our current issue tracker.

As a transition plan, I think we should just link to existing Sass feature requests but any new requests should originate there.

This new repo is where we'd be able to track what features are in what versions of Sass: The Language‚Ñ¢ starting with what's in 4.0 (assuming 4.0 is the release after 3.4).

I'd like each RFC to be named for release and detectable using feature detection (aka feature-exists())

cc: @nex3 @hcatlin @akhleung 
",chriseppstein,akhleung
1466,2014-10-07 22:53:47,"As a followup to our announcement that Ruby Sass and libsass would have tighter collaboration, I'd like to create a separate repo in the sass organization where we will centralize all new features and changes to Sass: The Language‚Ñ¢.

Features there will be closed when the change has been approved and implemented in sass-spec, sass, and libsass.

I'd like to keep the RFC process very informal. Anyone and everyone should be able to follow along and weigh in -- just like our current issue tracker.

As a transition plan, I think we should just link to existing Sass feature requests but any new requests should originate there.

This new repo is where we'd be able to track what features are in what versions of Sass: The Language‚Ñ¢ starting with what's in 4.0 (assuming 4.0 is the release after 3.4).

I'd like each RFC to be named for release and detectable using feature detection (aka feature-exists())

cc: @nex3 @hcatlin @akhleung 
",chriseppstein,hcatlin
1465,2014-10-07 16:17:58,"We're trying to track down the source of this issue in libsass: 
https://github.com/sass/libsass/issues/424

We found that Ruby Sass 3.4 gives a ""no variable"" error if an @each variable is used within a multiline comment. 



See gist here:
http://sassmeister.com/gist/0277dd12d32a99cd97fd

If you define $header above the comment, there is no error.
",malrase,each
1465,2014-10-07 16:22:08,"The `/*@` isn't required. You can add lots of spacing or newlines before the `@each` and it still happens.
",hcatlin,each
1465,2014-10-07 18:55:24,"Sass might be resolving interpolation before it knows whether it's a block comment. We should wait for @nex3 to comment on this.
",lolmaus,nex3
1464,2014-10-07 07:21:18,"Given the following SCSS



I would expect the following output:



However, the parent selector isn't expanded, giving:



What's more, if this is combined with a single usage of @extend then SASS throws an error ‚Äì even when the extend is entirely separate. For example:



As of 3.4, this triggers the following error:


",craigsssmith,extend
1464,2014-10-21 01:37:14,"@nex3 Can we please re-open this issue?  
",thejase,nex3
1462,2014-10-04 17:04:37,"According to http://www.sass-lang.com/documentation/file.SASS_REFERENCE.html , the scss fragnent



complies to 



However Sass actually complies it to



If I understand @at-root correctly, Sass behavior is correct and the documentation is wrong.
",JEManndy,at-root
1459,2016-11-17 04:24:59,"@reduardo7 `@import` doesn't work on expand the ampersand in a ideal way.
@sambaker Did you finally get the way to scope a scss block?
",zheeeng,import
1458,2014-09-30 11:30:28,"At the moment, it is not easily possible to determine why a certain CSS rule is output. You only see where the original in the SASS file is, but you don't know which @extend or @include call was responsible for it. 
For more complex hierarchies of %placeholders and @extends (and when using libraries or frameworks), it is really hard to figure this out manually. You essentially have to resort to commenting out parts of the code in turns to trace the instantiation flow.

Would it be possible to dump a stack trace for certain rules? Or maybe add a @probe statement that adds a watch to a SASS rule and prints information everytime it is instantiated?

Thanks,
 Andreas
",BlackHC,extend
1458,2014-09-30 11:30:28,"At the moment, it is not easily possible to determine why a certain CSS rule is output. You only see where the original in the SASS file is, but you don't know which @extend or @include call was responsible for it. 
For more complex hierarchies of %placeholders and @extends (and when using libraries or frameworks), it is really hard to figure this out manually. You essentially have to resort to commenting out parts of the code in turns to trace the instantiation flow.

Would it be possible to dump a stack trace for certain rules? Or maybe add a @probe statement that adds a watch to a SASS rule and prints information everytime it is instantiated?

Thanks,
 Andreas
",BlackHC,probe
1458,2014-09-30 11:30:28,"At the moment, it is not easily possible to determine why a certain CSS rule is output. You only see where the original in the SASS file is, but you don't know which @extend or @include call was responsible for it. 
For more complex hierarchies of %placeholders and @extends (and when using libraries or frameworks), it is really hard to figure this out manually. You essentially have to resort to commenting out parts of the code in turns to trace the instantiation flow.

Would it be possible to dump a stack trace for certain rules? Or maybe add a @probe statement that adds a watch to a SASS rule and prints information everytime it is instantiated?

Thanks,
 Andreas
",BlackHC,extends
1458,2014-09-30 11:30:28,"At the moment, it is not easily possible to determine why a certain CSS rule is output. You only see where the original in the SASS file is, but you don't know which @extend or @include call was responsible for it. 
For more complex hierarchies of %placeholders and @extends (and when using libraries or frameworks), it is really hard to figure this out manually. You essentially have to resort to commenting out parts of the code in turns to trace the instantiation flow.

Would it be possible to dump a stack trace for certain rules? Or maybe add a @probe statement that adds a watch to a SASS rule and prints information everytime it is instantiated?

Thanks,
 Andreas
",BlackHC,include
1458,2014-10-01 22:17:29,"The sourcemap data actually does contain information about where each individual complex selector comes from, but unfortunately I don't think any browsers surface that information. Luckily, your `@probe` directive pretty much exists, in the form of `@warn`, which will print the full stack trace whenever it's run.
",nex3,probe
1458,2014-10-01 22:17:29,"The sourcemap data actually does contain information about where each individual complex selector comes from, but unfortunately I don't think any browsers surface that information. Luckily, your `@probe` directive pretty much exists, in the form of `@warn`, which will print the full stack trace whenever it's run.
",nex3,warn
1458,2014-10-01 22:25:53,"No, it does not!?
@warn just emits a line number and no full stack trace, even in Sass 3.4.5
(Selective Steve) with --trace and --debug-info. So what are you referring
to? This certainly does not solve my issue.

Thanks,
 Andreas

On Thu, Oct 2, 2014 at 12:17 AM, Natalie Weizenbaum <
notifications@github.com> wrote:

> The sourcemap data actually does contain information about where each
> individual complex selector comes from, but unfortunately I don't think any
> browsers surface that information. Luckily, your @probe directive pretty
> much exists, in the form of @warn, which will print the full stack trace
> whenever it's run.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1458#issuecomment-57550093.

## 

Why is this e-mail so short? Answer: five.sentenc.es.
",BlackHC,probe
1458,2014-10-01 22:25:53,"No, it does not!?
@warn just emits a line number and no full stack trace, even in Sass 3.4.5
(Selective Steve) with --trace and --debug-info. So what are you referring
to? This certainly does not solve my issue.

Thanks,
 Andreas

On Thu, Oct 2, 2014 at 12:17 AM, Natalie Weizenbaum <
notifications@github.com> wrote:

> The sourcemap data actually does contain information about where each
> individual complex selector comes from, but unfortunately I don't think any
> browsers surface that information. Luckily, your @probe directive pretty
> much exists, in the form of @warn, which will print the full stack trace
> whenever it's run.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1458#issuecomment-57550093.

## 

Why is this e-mail so short? Answer: five.sentenc.es.
",BlackHC,warn
1458,2014-10-01 22:51:42,"Sorry for not being more explicit! Your example is a very narrow case and does not cover @extends for example:



only prints:



which does not provide any information on how ""nested a"" came to be instantiated.
I would need to know that it originates from line 9 and line 1, for example.

Thanks,
 Andreas
",BlackHC,extends
1458,2014-10-02 06:15:24,"@nex3, `@warn` only outputs a result of an evaluation. To use it, you have to know in advance where this evaluation is done in the code.

What we're asking for is the opposite: we see a line of resulting CSS and want to determine from what line of Sass source it originates from.

I had a situation where i needed that badly last week, with my own code. :sweat: I had overcomplicated things and had hard time debugging it without a way to trace CSS rules to Sass `@include` calls.
",lolmaus,warn
1458,2014-10-02 06:15:24,"@nex3, `@warn` only outputs a result of an evaluation. To use it, you have to know in advance where this evaluation is done in the code.

What we're asking for is the opposite: we see a line of resulting CSS and want to determine from what line of Sass source it originates from.

I had a situation where i needed that badly last week, with my own code. :sweat: I had overcomplicated things and had hard time debugging it without a way to trace CSS rules to Sass `@include` calls.
",lolmaus,include
1456,2014-09-29 16:25:27,"Hello

I have the problem that in my base-app.scss I have defined a list-style inside `#content`. Now in another file I want to use this style, but because it has of course also other styles that would overwrite the styles inside the other file I can not use `@import`. I am searching a solution to import only the styles of a nested selector inside a file. I can not merge those two files together, so that would not be a solution for me.
",julmot,import
1456,2014-09-29 17:44:44,"Well, thank you. That is a solution that will work, yes. But I think if nested selectors for `@extend` will be available, this would be no big feature. The usage could be like:
`@extend ['selectors': '#content ul', 'file': url]`.

A simple regex.
",julmot,extend
1456,2014-09-29 17:47:15,"> But I think if nested selectors for @extend will be available...

Well, they're [not going to be](https://github.com/sass/sass/issues/1442).
",lolmaus,extend
1455,2014-10-01 20:02:36,"Okay. I see the problem you're having. It is a little weird the way that works. I see how that could be expected. You need to use `@at-root` so it doesn't copy the parent again.



Though, I still think not nesting would be a better bet.
",whaaaley,at-root
1455,2014-10-01 21:52:07,"@dustindowell22 is right. Sass resolves nesting before it does any `@extend` stuff, so what it sees is this:



I agree with @dustindowell22 that you shouldn't use nesting for this sort of namespacing.
",nex3,extend
1455,2014-10-01 21:52:07,"@dustindowell22 is right. Sass resolves nesting before it does any `@extend` stuff, so what it sees is this:



I agree with @dustindowell22 that you shouldn't use nesting for this sort of namespacing.
",nex3,dustindowell22
1454,2014-09-29 17:00:14,"Ah, sorry - again, not super familiar with sass. I wasn't aware that @include was a css directive, I thought it was a mixin...
",pavellishin,include
1454,2014-09-29 17:02:25,"@pavellishin, `@include` is a Sass directive. But the problem occurs not in `@include`, but rather in `@keyframes`, which is a CSS directive.
",lolmaus,keyframes
1454,2014-09-29 17:02:25,"@pavellishin, `@include` is a Sass directive. But the problem occurs not in `@include`, but rather in `@keyframes`, which is a CSS directive.
",lolmaus,include
1454,2014-09-29 17:06:39,"@pavellishin, yes, as you noticed, this behavior was introduced in the recent version. Let's wait for @nex3 to tell whether it is a feature or a regression.

I consider this a regression because it breaks existing code and i can't think of any reasoning behind it.
",lolmaus,nex3
1454,2014-10-01 22:06:33,"`@keyframes` were never supposed to take raw variables. We considered that a bug, so we didn't introduce a deprecation period for it. There's been some confusion, but not too much.
",nex3,keyframes
1453,2014-10-01 22:33:20,"I think this will fall naturally out of the new `@import` work we're planning.
",nex3,import
1451,2014-09-26 14:27:16,"Using a comment one line before ""@each"" with the same indentation, I get the error message ""@else must come after @if.""

_This compiles without errors:_



_This throws an error:_



Also tried it with single-line comments.
Shouldn't comments be ignored?
",pixelpuppe,else
1451,2014-09-26 14:27:16,"Using a comment one line before ""@each"" with the same indentation, I get the error message ""@else must come after @if.""

_This compiles without errors:_



_This throws an error:_



Also tried it with single-line comments.
Shouldn't comments be ignored?
",pixelpuppe,each
1451,2014-09-26 14:27:16,"Using a comment one line before ""@each"" with the same indentation, I get the error message ""@else must come after @if.""

_This compiles without errors:_



_This throws an error:_



Also tried it with single-line comments.
Shouldn't comments be ignored?
",pixelpuppe,if
1451,2014-09-26 20:12:40,"This is intended. Since `/*`-style comments produce CSS output, they can't be used between `@if` and `@else` nodes for the same reason that you couldn't write


",nex3,if
1451,2014-09-26 20:12:40,"This is intended. Since `/*`-style comments produce CSS output, they can't be used between `@if` and `@else` nodes for the same reason that you couldn't write


",nex3,else
1449,2014-09-25 17:52:09,"Yesterday I updated a project from 3.3 to 3.4 (specifically, 3.4.5), and it seems that `@charset ""utf-8"";` is being stripped from files compiled using `:compressed` style. I do not believe this is the intended result.
### Input


### Output (default)

`sass input.scss output.css`


### Output (compressed)

`sass --style=compressed input.scss output.css`


",mikefowler,charset
1449,2014-09-26 20:09:09,"In compressed mode, Sass adds a UTF-8 [byte-order mark](https://en.wikipedia.org/wiki/Byte_order_mark) rather than an explicit `@charset` declaration, since it's more compact. The [decoding algorithm](https://encoding.spec.whatwg.org/#decode) used by the [CSS syntax spec](http://dev.w3.org/csswg/css-syntax-3/#input-byte-stream) mandates that this BOM be detected and handled correctly, and I believe browsers do so.
",nex3,charset
1444,2014-09-19 22:14:22,"Currently Sass supports Ruby versions back through 1.8.7, despite the fact that it's reached its official end of life. This is largely because Mac OS X through version 10.8 bundled Ruby 1.8, and Mac users make up a substantial portion of our user base.

Most users are using Mac OS 10.9+ these days, though. Not enough to safely remove 1.8.7 support, but enough to figure out a plan for how we want to do so in the future. We have analytics set up for [the Sass website](http://sass-lang.com), which should match our user demographics reasonably well. Right now the numbers say we have 89% of our visitors on 10.9+, which leaves 11% on versions that run the risk of being broken if we were to remove 1.8.7 support today.

I'd like to find a threshold percentage after which we start acting to remove 1.8.7 support. 5% is my initial instinct. It took 10.8+ about 25 months to reach 95% share after release, but 10.9 seems to be gaining adoption much faster, so we may be able to turn down 1.8.7 support in the next year.

When we do make the call and decide to remove support, we should immediately add a deprecation warning to whatever the current stable version of Sass is at the time, notifying users that their Ruby version will soon be unsupported and encouraging them to upgrade. In the next breaking release, we will remove support entirely.

@chriseppstein Thoughts?
",nex3,chriseppstein
1442,2014-09-18 12:19:50,"I second @dustindowell22.

Extends are already very confusing. My rule of thumb is to never extend normal selectors, only placeholders, otherwise bloated selectors may be produced, sometimes even causing side effects.
",lolmaus,dustindowell22
1442,2014-09-18 17:26:54,"@dustindowell22 nailed this. The rationale is that if you need to extend a modified thing, that thing is worth naming and extracting to it's own concept.
",chriseppstein,dustindowell22
1440,2014-09-18 13:45:05,"@dustindowell22, i doubt that it has anything to do with CodeKit.

For the availability of the warning, let's wait for @nex3's comment.
",lolmaus,nex3
1440,2014-09-18 13:45:05,"@dustindowell22, i doubt that it has anything to do with CodeKit.

For the availability of the warning, let's wait for @nex3's comment.
",lolmaus,dustindowell22
1434,2014-09-12 23:22:11,"With the introduction of maps, I've seen a huge rise in patterns like this,



Essentially, we're just replacing the `$variable` map with a new, updated version of itself, while not actually modifying `$variable` directly. I'm not sure if this is how it is really handled, but from the looks of it, we're creating an unnecessary duplicate of what _could be_ a rather large map. Seems wasteful. And although the pattern works, I don't really like the repetitive nature of using it all the time, over and over again.

What if we created a new `!bang` flag that can be combined with a `@do` directive. Allowing you to first, invoke a function directly while blocking its return value, sort of like what was discussed [here](https://github.com/sass/sass/issues/1348), but less about omitting `@return` entirely. Secondly, the `!bang` flag modifies the original variable passed into `map-merge` similar to Ruby's `!` bang methods, getting rid of the need to create unneeded duplication and memory waste.

This would also allow us to create streamlined setter functions without the need of a `@mixin` wrapper just to be able to call the function. We can just `@do` the function.



Just a thought.
",ezekg,return
1434,2014-09-12 23:22:11,"With the introduction of maps, I've seen a huge rise in patterns like this,



Essentially, we're just replacing the `$variable` map with a new, updated version of itself, while not actually modifying `$variable` directly. I'm not sure if this is how it is really handled, but from the looks of it, we're creating an unnecessary duplicate of what _could be_ a rather large map. Seems wasteful. And although the pattern works, I don't really like the repetitive nature of using it all the time, over and over again.

What if we created a new `!bang` flag that can be combined with a `@do` directive. Allowing you to first, invoke a function directly while blocking its return value, sort of like what was discussed [here](https://github.com/sass/sass/issues/1348), but less about omitting `@return` entirely. Secondly, the `!bang` flag modifies the original variable passed into `map-merge` similar to Ruby's `!` bang methods, getting rid of the need to create unneeded duplication and memory waste.

This would also allow us to create streamlined setter functions without the need of a `@mixin` wrapper just to be able to call the function. We can just `@do` the function.



Just a thought.
",ezekg,do
1434,2014-09-12 23:22:11,"With the introduction of maps, I've seen a huge rise in patterns like this,



Essentially, we're just replacing the `$variable` map with a new, updated version of itself, while not actually modifying `$variable` directly. I'm not sure if this is how it is really handled, but from the looks of it, we're creating an unnecessary duplicate of what _could be_ a rather large map. Seems wasteful. And although the pattern works, I don't really like the repetitive nature of using it all the time, over and over again.

What if we created a new `!bang` flag that can be combined with a `@do` directive. Allowing you to first, invoke a function directly while blocking its return value, sort of like what was discussed [here](https://github.com/sass/sass/issues/1348), but less about omitting `@return` entirely. Secondly, the `!bang` flag modifies the original variable passed into `map-merge` similar to Ruby's `!` bang methods, getting rid of the need to create unneeded duplication and memory waste.

This would also allow us to create streamlined setter functions without the need of a `@mixin` wrapper just to be able to call the function. We can just `@do` the function.



Just a thought.
",ezekg,mixin
1433,2014-09-12 22:56:04,"It would be awesome to have a syntax in SASS where you can define at the top of a partial file (one whose filename starts with and underscore) what other SASS partials it depends on. For example, lets say I have a _buttons.scss and I make a partial that defines a layout module that requires the _buttons.scss partial, at the top, I could write something like:



where the argument for `@depends` would match the argument for `@import`. Then, when the SASS compiles, if the dependency isn't loaded before this partial, it throws a compilation error.

This would help enforce source order, especially in projects with many contributors, as well as provide a sense of inline documentation (what this partial depends on).
",webbower,depends
1433,2014-09-12 22:56:04,"It would be awesome to have a syntax in SASS where you can define at the top of a partial file (one whose filename starts with and underscore) what other SASS partials it depends on. For example, lets say I have a _buttons.scss and I make a partial that defines a layout module that requires the _buttons.scss partial, at the top, I could write something like:



where the argument for `@depends` would match the argument for `@import`. Then, when the SASS compiles, if the dependency isn't loaded before this partial, it throws a compilation error.

This would help enforce source order, especially in projects with many contributors, as well as provide a sense of inline documentation (what this partial depends on).
",webbower,import
1433,2014-09-13 00:06:10,"Ideally you should just be able to `@import` it and have that work. Because that re-runs the code in the dependency, it's problematic right now, but we're working on a new import directive that will make it much smoother.
",nex3,import
1433,2014-09-19 19:36:59,"`@import` handles everything you're describing already.
",nex3,import
1429,2014-09-12 09:56:58,"Hi,

it is a problem if you want to extend a class in another file, imported with `@import`. This will not work. Please make it available over multiple files so that you can extend classes from a master-file.
",julmot,import
1428,2014-09-12 21:39:53,"**tl;dr: This is intended.**

Let's look at a simpler case to understand why this works the way it does:



First of all, what does that `@extend` mean? It means ""style all elements that match `.d` and have a parent that matches `.c` as though they also matched `%b`."" The only thing we know about how elements matching `%b` are styled is that, if they have a parent that matches `.a`, they have blue text.

Okay, great. How do we combine these? Well, if an element matches `.d`, has a parent that matches `.c`, and has a parent that matches `.a`, it should have blue text. But we don't know anything about how those two parents‚Äîthe one that matches `.c` and the one that matches `.a`‚Äîshould be ordered. Both of these spans should have blue text:



Thus, the CSS we have to generate is the following:



This is where those ""extra"" selectors are coming from.
",nex3,extend
1428,2014-09-19 19:41:45,"You're still thinking of `@extend` in terms of how it manipulates text rather than how it affects styling. An argument from the perspective of text manipulation isn't going to be persuasive, because that's not the plane on which `@extend` operates. If you can make a semantic argument instead, you might make more progress.
",nex3,extend
1426,2014-09-11 15:59:35,"Should this throw an error?



It seems to me that `%foo` within print @media should just be silently ignored.

I realize that workarounds exist, but should workarounds be required at all?
",maranomynet,media
1426,2014-09-11 16:11:19,"What exactly do you consider to be a bug? If this:

> It seems to me that %foo within print `@media` should just be silently ignored.

then you're seeing the intended behavior and @nex3 and @chriseppstein are perfectly aware of it.

I had been asking them to make `@extend` produce separate sets of extended classes for each media query. This would make using extends in media queries much simpler and it seems that you want the same thing. Well, my request was denied and its discussion was consolidated into #1050.
",lolmaus,chriseppstein
1426,2014-09-11 16:11:19,"What exactly do you consider to be a bug? If this:

> It seems to me that %foo within print `@media` should just be silently ignored.

then you're seeing the intended behavior and @nex3 and @chriseppstein are perfectly aware of it.

I had been asking them to make `@extend` produce separate sets of extended classes for each media query. This would make using extends in media queries much simpler and it seems that you want the same thing. Well, my request was denied and its discussion was consolidated into #1050.
",lolmaus,media
1426,2014-09-11 16:11:19,"What exactly do you consider to be a bug? If this:

> It seems to me that %foo within print `@media` should just be silently ignored.

then you're seeing the intended behavior and @nex3 and @chriseppstein are perfectly aware of it.

I had been asking them to make `@extend` produce separate sets of extended classes for each media query. This would make using extends in media queries much simpler and it seems that you want the same thing. Well, my request was denied and its discussion was consolidated into #1050.
",lolmaus,nex3
1426,2014-09-11 16:11:19,"What exactly do you consider to be a bug? If this:

> It seems to me that %foo within print `@media` should just be silently ignored.

then you're seeing the intended behavior and @nex3 and @chriseppstein are perfectly aware of it.

I had been asking them to make `@extend` produce separate sets of extended classes for each media query. This would make using extends in media queries much simpler and it seems that you want the same thing. Well, my request was denied and its discussion was consolidated into #1050.
",lolmaus,extend
1426,2014-09-11 16:13:49,"> > It seems to me that %foo within print @media should just be silently ignored.
> 
> then it's exactly how Sass currently works

It throws an error: http://codepen.io/anon/pen/Bhxnl
",maranomynet,media
1426,2014-09-11 16:26:30,"In #1050 we reject the new feature request, but came up with a way to support extend in directives. You can call it a bug or a feature request, but we just didn't have a good solution to how @extend in directives could work correctly so we explicitly disabled it.
",chriseppstein,extend
1425,2014-09-10 13:27:39,"It's not a hack, it's the way meant to be done.

> ...is not the desired CSS.

In this case, use the `@at-root` directive:



Demo: http://sassmeister.com/gist/8bd827341243d66e61d5
",lolmaus,at-root
1425,2014-09-10 14:07:36,"I might be wrong about the deprecation status.

Unfortunately, @chriseppstein [did not](https://github.com/sass/sass/issues/1424#issuecomment-55002054) explain the [differences](http://sassmeister.com/gist/a9a9a2edf2b43623a72d) in behavior between the normal and interpolated parent selector. I believe it might be as follows:
1. If `&` appears in the selector, the previous selector in hierarchy is reconstructed.
2. If `&` does not appear in the selector, the current selector is appended to the previous selector.
3.  Interpolated `&` is not treated as an appearance.
4. The `@at-root` directive removes the previous selector, unless it's explicitly inserted via `&`.
",lolmaus,at-root
1425,2014-09-10 14:07:36,"I might be wrong about the deprecation status.

Unfortunately, @chriseppstein [did not](https://github.com/sass/sass/issues/1424#issuecomment-55002054) explain the [differences](http://sassmeister.com/gist/a9a9a2edf2b43623a72d) in behavior between the normal and interpolated parent selector. I believe it might be as follows:
1. If `&` appears in the selector, the previous selector in hierarchy is reconstructed.
2. If `&` does not appear in the selector, the current selector is appended to the previous selector.
3.  Interpolated `&` is not treated as an appearance.
4. The `@at-root` directive removes the previous selector, unless it's explicitly inserted via `&`.
",lolmaus,chriseppstein
1425,2016-04-19 19:25:38,"+1 

The selector& syntax is really useful for UI widget architectures where classes affecting display of the a widget are set on the outermost DOM element of the widget.

For example let's say I have a list item widget where multiple child elements of the `li` have some of their styles overridden depending on whether or not a particular icon is disabled.  Rather than modifying each of the child elements I just set a `no_icon` class on the `li`.  

So if my `li` element has the class `widget_list_item` then the selector& syntax lets me do the following:



In this simple example flipping it to use `&.no_icon { ... }` wouldn't make it harder to read.  However once the styles and selectors for different display settings start to accumulate the selector& syntax keeps related styles together, helping with readability and maintainability.

The @at-root syntax would also work here but it's so verbose that I find it makes the SCSS harder to read.
",arkonan,at-root
1424,2014-09-09 15:52:51,"I'm trying to use `@extend` to apply BEM style class-name suffixes - like so:



but all I get is this:



...while what I wanted was this:


",maranomynet,extend
1424,2014-09-09 18:16:39,"Ouch! :-/

`@extend` seems extremely kludgy and underpowered ‚Äî especially compared to LESS' `:extend()`
",maranomynet,extend
1424,2014-09-09 18:20:58,"I wish `@extend` behaved like a pattern to be applied to extending selector, like described in the top post.

Can this be considered a feature request?

PS @chriseppstein, can you please explain the [inconsistency](http://sassmeister.com/gist/a9a9a2edf2b43623a72d) between the plain and interpolated parent selector and between normal and at-root?
",lolmaus,extend
1424,2014-09-09 19:53:17,"Presently, Sass's extend is applied after nesting is removed from the AST. It seems like you think that extend is operating on the Sass selectors instead of the generated CSS selectors. It's not clear to me what the ramifications would be of preserving nesting until after extends are applied.

For instance, given your example above, how should we handle `@extend %button-text` or worse, how should `@extend .fancyButton-text` work since those classes wouldn't exist until after nesting is removed. Would people expect now to be able to extend all manner of half-constructed selectors like `@extend -text` thinking that it would work like `& .text`?
",chriseppstein,extend
1424,2014-09-09 21:42:45,"> It seems like you think that extend is operating on the Sass selectors instead of the generated CSS selectors.

Yes, this is what i was expecting, and i think @maranomynet too.

> For instance, given your example above, how should we handle `@extend %button-text`

If my expectations were true and `%button { &-text {...}}` were manipulating extending selectors (e. g. `.fancyButton`) rather than generating more silent selectors, then there would be no `%button-text` silent selector defined. It would result in a warning.

> or worse, how should `@extend .fancyButton-text` work since those classes wouldn't exist until after nesting is removed. 

I didn't think of that, Chris. I never extend normal selectors because i consider it unsafe: for me it constantly results in bloated CSS and hidden side effects.

I imagine a new type of silent selectors that would work as instructions to apply on those selectors that are extending it. Example:





Alternatively, instead of a new silent selector type it could be a new directive that works only with silent selectors:





The above example would feel like using a mixin, but it would not explode your CSS with duplication.
",lolmaus,extend
1424,2014-09-10 09:12:44,"> I never extend normal selectors because i consider it unsafe: for me it constantly results in bloated CSS and hidden side effects.

Same here. Simple %extend-only selectors allow me to avoid the whole selector-merging mess.

> Instead of a new silent selector type it could be a new directive that works only with silent selectors:

I'd love for such a directive to:
- optionally work across all `@media` when an `!allmedia` flag is present.
- be able to match nested/complex selectors.
- do exact match (no sub-selector matching) by default unless an `!all` flag is present.
- stay away from complex selector-merging and only replace exact substring replacement (like LESS does with the `all` flag)
",maranomynet,media
1424,2014-09-10 16:08:20,">  I never extend normal selectors because i consider it unsafe: for me it constantly results in bloated CSS and hidden side effects.

There is _no difference_ between a class and a placeholder in terms of their behavior with extend. The difference is in how you are _using_ placeholders compared to classes. Probably because you think they are special somehow. The only difference is that there is marginally less output because the extended selector isn't output.

> The above example would feel like using a mixin, but it would not explode your CSS with duplication.

The thing is, placeholders are a kind of selector like an ID or a class. and so they have to have the same semantics as all other selectors do.

TBH, I'd rather give a different way of applying a mixin because that has the _exact_ semantics you're seeking.

> optionally work across all @media when an !allmedia flag is present.

See #1050.

> be able to match nested/complex selectors.

We've decided this is a bad idea. You should extract a placeholder to accomplish this. 

> do exact match (no sub-selector matching) by default unless an !all flag is present.

We're not going to turn extend into some kind of regex tool for manipulating selectors. The definition of extend is to style elements the same. This violates that definition.

> stay away from complex selector-merging and only replace exact substring replacement (like LESS does with the all flag)

As I said above. Extend is not a regex tool. It's a way of declaring a kind of selector matching.

The LESS team decided to appropriate the word ""extend"" to create a different concept. I'm sorry that you came to Sass expecting it to be the same thing, it's not. We can't control that they reused our word in a way that was not semantically appropriate. I wish they had called it `@rewrite-into` or something like that. 
",chriseppstein,media
1424,2014-09-10 16:08:20,">  I never extend normal selectors because i consider it unsafe: for me it constantly results in bloated CSS and hidden side effects.

There is _no difference_ between a class and a placeholder in terms of their behavior with extend. The difference is in how you are _using_ placeholders compared to classes. Probably because you think they are special somehow. The only difference is that there is marginally less output because the extended selector isn't output.

> The above example would feel like using a mixin, but it would not explode your CSS with duplication.

The thing is, placeholders are a kind of selector like an ID or a class. and so they have to have the same semantics as all other selectors do.

TBH, I'd rather give a different way of applying a mixin because that has the _exact_ semantics you're seeking.

> optionally work across all @media when an !allmedia flag is present.

See #1050.

> be able to match nested/complex selectors.

We've decided this is a bad idea. You should extract a placeholder to accomplish this. 

> do exact match (no sub-selector matching) by default unless an !all flag is present.

We're not going to turn extend into some kind of regex tool for manipulating selectors. The definition of extend is to style elements the same. This violates that definition.

> stay away from complex selector-merging and only replace exact substring replacement (like LESS does with the all flag)

As I said above. Extend is not a regex tool. It's a way of declaring a kind of selector matching.

The LESS team decided to appropriate the word ""extend"" to create a different concept. I'm sorry that you came to Sass expecting it to be the same thing, it's not. We can't control that they reused our word in a way that was not semantically appropriate. I wish they had called it `@rewrite-into` or something like that. 
",chriseppstein,rewrite-into
1424,2014-09-11 14:47:33,"@chriseppstein thanks for your answer.

> > optionally work across all @media when an !allmedia flag is present.
> 
> See #1050.

I was actually dreaming of something like this:



rendering this:



...basically `!allmedia` ignoring the @media context where the `@extend` is used - hunting down the %subject-selector where ever it's found across all @media.

This would allow for very powerful, and easy to use extend libraries.
",maranomynet,extend
1424,2014-09-11 14:47:33,"@chriseppstein thanks for your answer.

> > optionally work across all @media when an !allmedia flag is present.
> 
> See #1050.

I was actually dreaming of something like this:



rendering this:



...basically `!allmedia` ignoring the @media context where the `@extend` is used - hunting down the %subject-selector where ever it's found across all @media.

This would allow for very powerful, and easy to use extend libraries.
",maranomynet,media
1424,2014-09-12 21:22:51,"> ...basically `!allmedia` ignoring the `@media` context where the `@extend` is used - hunting down the `%subject-selector` where ever it's found across all `@media`.

We shouldn't just discard the `@media` context of the extender. That violates the semantics of `@extend` and is likely not what the user intends. It's also easy to do explicitly with `@at-root` if that's what you want.

> > > be able to match nested/complex selectors.
> > 
> > We've decided this is a bad idea.
> 
> Out of curiosity: Why is it a bad idea?

There's no way to both make it behave how it looks like it will behave syntactically and follow the underlying semantics of `@extend`. For example, if you write `.foo {@extend .bar .baz}`, what that would mean semantically is ""every element matching `.foo` should be styled as though it also matches `.bar .baz`""; that is, as though it had class `baz` and one of its parents had class `bar`. This would mean it would match the rule `.baz { ... }`, which is likely not what the user expected. Moreover, it means it's almost identical to just writing `.foo {@extend .baz}`.

There's also the question of what, precisely, it would mean for one of its parents to have the class `bar`. Would it match `div.bar .baz`? How do we know whether the imaginary parent we're stipulating that it has is a div or not? We could theoretically just decide on an answer, but doing so would complicate the semantics a lot.
",nex3,extend
1424,2014-09-12 21:22:51,"> ...basically `!allmedia` ignoring the `@media` context where the `@extend` is used - hunting down the `%subject-selector` where ever it's found across all `@media`.

We shouldn't just discard the `@media` context of the extender. That violates the semantics of `@extend` and is likely not what the user intends. It's also easy to do explicitly with `@at-root` if that's what you want.

> > > be able to match nested/complex selectors.
> > 
> > We've decided this is a bad idea.
> 
> Out of curiosity: Why is it a bad idea?

There's no way to both make it behave how it looks like it will behave syntactically and follow the underlying semantics of `@extend`. For example, if you write `.foo {@extend .bar .baz}`, what that would mean semantically is ""every element matching `.foo` should be styled as though it also matches `.bar .baz`""; that is, as though it had class `baz` and one of its parents had class `bar`. This would mean it would match the rule `.baz { ... }`, which is likely not what the user expected. Moreover, it means it's almost identical to just writing `.foo {@extend .baz}`.

There's also the question of what, precisely, it would mean for one of its parents to have the class `bar`. Would it match `div.bar .baz`? How do we know whether the imaginary parent we're stipulating that it has is a div or not? We could theoretically just decide on an answer, but doing so would complicate the semantics a lot.
",nex3,media
1424,2014-09-12 21:22:51,"> ...basically `!allmedia` ignoring the `@media` context where the `@extend` is used - hunting down the `%subject-selector` where ever it's found across all `@media`.

We shouldn't just discard the `@media` context of the extender. That violates the semantics of `@extend` and is likely not what the user intends. It's also easy to do explicitly with `@at-root` if that's what you want.

> > > be able to match nested/complex selectors.
> > 
> > We've decided this is a bad idea.
> 
> Out of curiosity: Why is it a bad idea?

There's no way to both make it behave how it looks like it will behave syntactically and follow the underlying semantics of `@extend`. For example, if you write `.foo {@extend .bar .baz}`, what that would mean semantically is ""every element matching `.foo` should be styled as though it also matches `.bar .baz`""; that is, as though it had class `baz` and one of its parents had class `bar`. This would mean it would match the rule `.baz { ... }`, which is likely not what the user expected. Moreover, it means it's almost identical to just writing `.foo {@extend .baz}`.

There's also the question of what, precisely, it would mean for one of its parents to have the class `bar`. Would it match `div.bar .baz`? How do we know whether the imaginary parent we're stipulating that it has is a div or not? We could theoretically just decide on an answer, but doing so would complicate the semantics a lot.
",nex3,at-root
1422,2014-09-03 23:43:13,"I just want to mention that your versioning scheme is not optimal. The reason for that is because commit https://github.com/sass/sass/commit/79bad1ff473cc06c66b85086403f4a1905938e37 introduced an backwards-incompatible change of your API. [zurb-foundation](https://github.com/zurb/foundation) uses `@if (index(...) == false)` extensivly, so it silently fails since this update. As written in [Semantic Versioning 2.0.0](http://semver.org/), backwards-incompatible changes are required to introduce a new major version. This may not have prevented this issue, but it's a much more obvious hint for application developers that something important has changed. Please consider switching to SemVer since it's very widespread these days and helps other developers (and you) to keep track of major and minor changes.

(refs https://github.com/zurb/foundation/issues/5636)
",tvollstaedt,if
1422,2014-09-04 00:34:50,"They should just do `@if not index(...)`; this will work for all versions of sass because both `false` and `null` are ""falsy"".
",chriseppstein,if
1419,2014-09-05 00:38:19,"This is actually intended. Leading combinators are sometimes used as a hack to cause a rule to be invisible to some but not all browsers, so we support them even in `@extend`.
",nex3,extend
1411,2014-09-09 17:55:41,"Same issue. I figured out that it works only for updates of main file, but when I change included files (via @import) it not updates.



Adding `--poll` option or `gem listen` don't make difference
",Paxa,import
1406,2014-08-29 18:02:57,"I saw this today too. bootstrap-sass 2.3.2.2 is returning a bad path [here](https://github.com/twbs/bootstrap-sass/blob/v2.3.2.2/lib/bootstrap-sass.rb#L22) for my app.

Looks like sass ~~master~~ stable is OK, this [new commit](https://github.com/sass/sass/commit/46bb5d4aeae0c121413a295f7840ec50f21fc951) seems to solve it. @nex3 can that be released?
",boone,nex3
1405,2014-08-29 01:43:04,"Just noticed a bug with the SASS compiler.

It's super specific (almost edge case) but I thought i'd report it anyway...

Pretty much I was looping out a key value pair array for icon font PUA codes using @each mapping  and the compiler seems to 'convert' them to blank unicodes on the way through.

**Version:** 3.4.1
**Input:**



**Expected Output:**



**Actual Output:**



The funny thing is this compiles as expected in 3.3.14
",Si1kIfY,each
1404,2014-08-28 20:07:32,"`config.rb` is Compass, not Sass, so I don't know if it has facilities for doing this. If you're using the Sass command line, you can run `sass --watch scss:css ../lib:css`. As long as a parent directory of the files you want to watch is on the path, those files will be compiled.

Alternately, you could run `sass --watch --load-path ../lib scss:css` and rewrite your import to `@import ""different/file.scss""`. Sass knows to watch all load paths for changes.
",nex3,import
1402,2014-08-28 13:43:21,"I briefly talked to @chriseppstein on Twitter and was pointed here. I'm trying to pinpoint why [Flint's](https://github.com/ezekg/flint) compile time seems to exponentially grow as the cache/instance maps get larger. Are you aware of any performance issues for maps within SassScript? My project compile times are averaging ~200s. I've already implemented a pretty robust caching system for Flint, but really didn't see _much_ gain in performance. From what I can pinpoint, it seems that using `map-get` on large maps is the bottleneck.

For example, running this locally and watching the debug output you can see the performance regression as each instance is stored and fetched from the global `$flint__instances` map.



The above code will output 200 instances, one instance for each breakpoint (4) per mixin call. Here is an example of a single instance map. My projects range from about 100-200 of these, all stored in the global `$flint__instances` map.



Like I said, I've been unable to put in the amount of debugging time I need to wholly test if this is a Sass issue, or rather an issue with Flint. I'm really filling the issue to see if maps themselves have any performance issues I can look into. 
",ezekg,chriseppstein
1400,2014-08-27 17:09:56,"After upgrade, the @- syntax seems to break the SASS parser.  

Sass::SyntaxError: Invalid CSS after """": expected selector, was ""0%""
  /app/styles/partials/_animations.sass:89:
    0%
  /app/styles/_app_second.sass:5:
    @import partials/animations
  (sass):41:
  sass/scss/parser.rb:1163:in `expected'
    raise Sass::SyntaxError.new(
  sass/scss/parser.rb:1099:in`expected'
    self.class.expected(@scanner, @expected || name, @line)
...
(95 additional frame(s) were not displayed)
",okolehao,line
1400,2014-08-27 17:09:56,"After upgrade, the @- syntax seems to break the SASS parser.  

Sass::SyntaxError: Invalid CSS after """": expected selector, was ""0%""
  /app/styles/partials/_animations.sass:89:
    0%
  /app/styles/_app_second.sass:5:
    @import partials/animations
  (sass):41:
  sass/scss/parser.rb:1163:in `expected'
    raise Sass::SyntaxError.new(
  sass/scss/parser.rb:1099:in`expected'
    self.class.expected(@scanner, @expected || name, @line)
...
(95 additional frame(s) were not displayed)
",okolehao,expected
1400,2014-08-27 17:09:56,"After upgrade, the @- syntax seems to break the SASS parser.  

Sass::SyntaxError: Invalid CSS after """": expected selector, was ""0%""
  /app/styles/partials/_animations.sass:89:
    0%
  /app/styles/_app_second.sass:5:
    @import partials/animations
  (sass):41:
  sass/scss/parser.rb:1163:in `expected'
    raise Sass::SyntaxError.new(
  sass/scss/parser.rb:1099:in`expected'
    self.class.expected(@scanner, @expected || name, @line)
...
(95 additional frame(s) were not displayed)
",okolehao,scanner
1400,2014-08-27 17:09:56,"After upgrade, the @- syntax seems to break the SASS parser.  

Sass::SyntaxError: Invalid CSS after """": expected selector, was ""0%""
  /app/styles/partials/_animations.sass:89:
    0%
  /app/styles/_app_second.sass:5:
    @import partials/animations
  (sass):41:
  sass/scss/parser.rb:1163:in `expected'
    raise Sass::SyntaxError.new(
  sass/scss/parser.rb:1099:in`expected'
    self.class.expected(@scanner, @expected || name, @line)
...
(95 additional frame(s) were not displayed)
",okolehao,import
1397,2014-08-25 19:15:37,"I installed a component that required Sass 3.3+ and when I went back to working on another project that had been compiling just fine for months, the result of the following command was no longer correct:

sass $SOURCE_PATH/src/stylesheets/app.scss $SOURCE_PATH/grails-app/assets/stylesheets/app.css

While the compiler didn't report any files that it could not find, it didn't include all the Foundation components.  Yet, to test this, I added some jibberish comment in some of the Foundation source files, and when I ran this command, the comments were present, in the order of ""@import"".

I found this post: 
[Zurb Support](http://foundation.zurb.com/forum/posts/18679-problem-using-sass)

When I went back to using 3.2.19 (Which was the last version I had been using), ran the same command, it the compiled result was as expected.

The way I was including Foundation was to create a copy of the ""_settings.scss"", make any changes there, and at the bottom of that file, import the ""foundation.scss"", which in turn includes all the components I was using.
",danreed121,import
1396,2014-08-25 18:28:04,"Did you also notice `@charset ""UTF-8"";`?

Unicode, baby! :sunglasses: 
",lolmaus,charset
1396,2014-08-25 18:42:42,"@Snugug, it's not a font issue: the old CSS output should've produced the same characters as the new one. And the guy is only unhappy with the new output.

@slawaEremin, that's intended and valid CSS. Extract from Sass 3.4.0 [changelog](http://sass-lang.com/documentation/file.SASS_CHANGELOG.html):

> Sass now follows the CSS Syntax Level 3 specification for determining a stylesheet‚Äôs encoding. In addition, it now only emits UTF-8 CSS rather than trying to match the source encoding.

I don't know how to revert to the old output, you should wait for @nex3 to comment on that. But why doesn't the new format suit you in the first place?
",lolmaus,nex3
1395,2014-08-26 10:14:12,"> now the SCSS file gets flagged as UTF-8, even though I specifically wrote it as ASCII.

That's in compliance with the [CSS Syntax Module Level 3](http://www.w3.org/TR/2013/WD-css-syntax-3-20130919/#determine-the-fallback-encoding).

> Then SASS outputs a file with a BOM, which ends up in the middle of my concatenated files and causes other headaches.

I've specifically tried it and Sass 3.4.1 does not produce a BOM for me (though it didn't convert `\f000` into Unicode for some reason, i had to manually type `ÔÄÄ` into the source Sass).

Anyway, isn't it your concatenation tool's responsibility to produce valid files? BOM aside, the `@charset` directive should only appear in the very beginning of the resulting file. Sass takes care of that for you, but if you postprocess Sass-generated CSS files (which are CSS3-valid) and your postprocessor fails to produce a valid file, there isn't much Sass can do, is it?
",lolmaus,charset
1395,2014-08-28 20:44:12,"This is the expected behavior. Sass parses strings according to the CSS spec, and the spec says to interpret Unicode escapes as Unicode characters. The only reason the escapes might be preserved is the time-saving optimization wherein certain property values aren't parsed if we can guarantee they don't contain any dynamic code.

What is the actual practical problem with producing UTF-8 output? Is it exclusively other tools that don't handle `@charset` declarations/BOMs correctly?
",nex3,charset
1395,2014-08-28 20:46:12,"Well I guess I will never upgrade to 3.4 then. This is a big issue and SASS
shouldn't be fooling around with the input values, especially if we
specifically put a @charset ""ASCII"" at the top.
On Aug 28, 2014 1:44 PM, ""Natalie Weizenbaum"" notifications@github.com
wrote:

> This is the expected behavior. Sass parses strings according to the CSS
> spec, and the spec says to interpret Unicode escapes as Unicode characters.
> The only reason the escapes might be preserved is the time-saving
> optimization wherein certain property values aren't parsed if we can
> guarantee they don't contain any dynamic code.
> 
> What is the actual practical problem with producing UTF-8 output? Is it
> exclusively other tools that don't handle @charset declarations/BOMs
> correctly?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/sass/sass/issues/1395#issuecomment-53795343.
",probablyup,charset
1395,2014-08-28 20:56:38,"> SASS shouldn't be fooling around with the input values

This is literally Sass's entire job.

> especially if we specifically put a @charset ""ASCII"" at the top.

The `@charset` declaration determines what the input character set is, not the output.

You still haven't answered my question: what practical problems does UTF-8 output cause?
",nex3,charset
1395,2014-10-26 02:09:20,"@nex tested in Chrome. Problem resolved by using ""\nnnn"" escape format in CSS (I've changed our build to generate in this format using the function provided in this thread).

The character encoding of the HTML page is a total red herring though. I built a test page: UTF-8 encoding in the CSS is fine: http://dev.benboyle.id.au/sass-1395/

Don't know what was causing the problem for us, but it was broken for 2 days straight until we tracked it down (other sites loading the same CSS off the same domain were fine!)
",bboyle,nex
1395,2014-10-29 01:22:09,"Tracked down the problem we had. We're not getting the `@charset` declaration on the generated css, even when the escapes are converted to unicode characters. I don't know if that's happening in grunt-contrib-compass, compass or sass, or just our particular mix of partials, functions and mixins in scss. We can keep using the ascii solution.
",bboyle,charset
1395,2014-10-30 23:45:01,"@bboyle Are you using compressed mode? Sass uses a BOM rather than a `@charset` there so save space.

Alternately, what happens on your test page if you manually add a BOM to `unicode-no-charset.css`?
",nex3,charset
1395,2014-10-31 04:54:44,"@nex using the BOM fixes it, and yes we do use `compressed'. Spot on!

Thanks for following up, I'm going to check our build pipeline for tasks that might remove the BOM.
",bboyle,nex
1395,2014-10-31 20:09:42,"@bboyle Glad to hear that Chrome isn't misbehaving.

@dustindowell22 What exact behavior were you seeing on Firefox? Did the document have a BOM, a `@charset` declaration, or neither? What version of Firefox were you testing?
",nex3,charset
1395,2014-10-31 20:09:42,"@bboyle Glad to hear that Chrome isn't misbehaving.

@dustindowell22 What exact behavior were you seeing on Firefox? Did the document have a BOM, a `@charset` declaration, or neither? What version of Firefox were you testing?
",nex3,dustindowell22
1395,2014-11-02 20:49:52,"@nex3 In Firefox 33 and 33.0.2 (latest) on OS X 10.9.5 and then after I upgraded to 10.10, I'm getting square ligatures. I tried with and without `@charset: ""UTF-8"";`. No BOM. I'm compiling the latest Font-Awesome. It doesn't matter which output style is selected.

Works everywhere else though. Chrome, Safari, Opera on desktop and Chrome, Opera, Firefox on Android. It's just desktop Firefox for me.
",whaaaley,charset
1395,2014-11-04 22:50:43,"@dustindowell22 Not working even with `@charset` is very puzzling. Is it possible that you don't have the font available to view the ligature? Does it work when you handcraft a CSS file that uses the ASCII escape? Can you put up a test page somewhere that demonstrates the issue?

In my local tests, Firefox 33 properly interprets the BOM even when the page's encoding is different.
",nex3,charset
1395,2014-11-04 22:50:43,"@dustindowell22 Not working even with `@charset` is very puzzling. Is it possible that you don't have the font available to view the ligature? Does it work when you handcraft a CSS file that uses the ASCII escape? Can you put up a test page somewhere that demonstrates the issue?

In my local tests, Firefox 33 properly interprets the BOM even when the page's encoding is different.
",nex3,dustindowell22
1395,2015-01-31 17:49:55,"@yaycmyk I encountered your issue [this week](http://pioupioum.fr/outils-astuces/sass-bom-compass.html). If you are using Compass, you can try this code that I use in a Drupal project to remove the BOM of the generated CSS files:


",piouPiouM,yaycmyk
1395,2015-10-02 22:31:15,"@PCateNumbersUSA @RichardSison We plan to add a flag to always escape non-ASCII characters, as well as a function to take a Unicode code point number and return its corresponding character. This issue is marked ""help wanted"", though, which indicates that external contributions will be the best way to make that happen.
",nex3,RichardSison
1393,2014-08-28 23:29:55,"@Marc-Boisvert-Dupras now the weird thing is - for a single file it **does** work for me, it's only when watching a full path of files that things don't watch correctly.

I see we are on the same version of Ruby (more than likely the Ubuntu default).
",magnetikonline,Marc-Boisvert-Dupras
1393,2014-09-19 20:19:04,"It looks like everyone is seeing the same issue here. When you're using `--watch`, you need to include the directories containing your partials on the command line in order for those partials to be watched.

> So we can conclude that in earlier versions, 3.3.*, watch reacted on changes in partials too? But now we need to explicitly define folders to watch for. Correct?

In practice, yes, but that's not exactly what's happening behind the scenes. In 3.3 and earlier, Sass automatically put the current working directory on the Sass load path. That behavior was removed in 3.4, since it was confusing and contingent on where you were running the `sass` command from. Sass did, and still does, watch everything on the load path; it's just that now that load path doesn't contain the working directory by default, so you don't get automatic watching of everything on the working directory.

At some point, I'd like `--watch` to traverse the `@import` graph to discover which files to watch. Until that's implemented, though, I'll change it to watch the working directory even though it's not on the load path anymore.
",nex3,import
1386,2014-08-21 12:10:13,"If you use `!global` it is working:
http://sassmeister.com/gist/1eab32c886ebe63294ee

It looks like `@if` is creating a new scope.
",FWeinb,if
1386,2014-08-21 12:10:32,"I agree that variable scoping in `@if` constructs is something completely unexpected.

Meanwhile, you can work it around like this:



http://sassmeister.com/gist/42d201c4132fda1e4586
",lolmaus,if
1386,2014-08-21 12:16:14,"This is only a problem when you have an `@if` in your global scope. Same example inside a mixin works fine:
http://sassmeister.com/gist/a9ba57e1f143c87451d0
",Snugug,if
1385,2014-08-20 21:35:58,"This fails to parse:



Originally reported here: https://github.com/Compass/compass/issues/1777 by @ryanburnett.
",chriseppstein,ryanburnett
1383,2014-08-20 09:16:33,"I am using SCSS 3.4.0 on Ubuntu 14.04 64-bit.

I have the following files:

`main.scss`:



`_keyframe.scss`



This is the result (notice the invalid `@keyframe` syntax):


",F21,keyframe
1377,2014-09-29 22:07:30,"I ran into the same issue when trying to use @import after updating and wondered what you did to solve it?
",jackfearing,import
1376,2014-08-18 23:59:57,"@nex3 Says this is fixed.
",chriseppstein,nex3
1373,2014-08-22 23:01:40,"This is definitely worth fixing, but at some point I plan to make parent-selector resolution use the same backend logic as `@extend` and I want to hold off on this until that's in place so as to avoid duplicating effort and logic.
",nex3,extend
1369,2014-08-09 22:18:31,"You can do this with `@at-root` and `#{&}`:


",hail2u,at-root
1368,2014-08-09 05:37:58,"That throws an error in sass 3.3.14:



@chriseppstein could we reopen this?
",geddski,chriseppstein
1363,2014-08-06 11:21:20,"Hi there,

Is '@keyframes' interpolation planned for the future? If so, do you know when can we do something like this?



Thanks ;)
",Gespinha,keyframes
1362,2014-08-06 03:05:44,"Well, I just figured it out. My last `&:before { ... }` somehow had a space with the ASCII code 160 before the curly braces, instead of the usual 32 (I have no idea how that happened, and it's been happening quite often to me lately using Sublime Text (e.g. sometimes just rewriting a line will fix the issue).

Anyway, that single ""fake"" space (it's actually an `&nbsp;`) was breaking the entire chain of extends since SASS just outputs a comma-separated list of all the selectors where I used `@extend`. That's also why I was seeing the odd limitation of 7 selector: adding the 8th would break the entire thing.
",gabrielecirulli,extend
1361,2014-08-05 20:23:00,"I would like to do something about asset-url helpers in Compass and Sprockets. They make writing and using universally compatible libraries very difficult. Example at hand is bootstrap-sass ([1](https://github.com/twbs/bootstrap-sass/blob/v3.2.0%2B1/assets/stylesheets/bootstrap/_variables.scss#L1-L4), [2](https://github.com/twbs/bootstrap-sass/blob/v3.2.0%2B1/assets/stylesheets/bootstrap/_glyphicons.scss#L17-L21), [3](https://github.com/twbs/bootstrap-sass/blob/v3.2.0%2B1/assets/stylesheets/_bootstrap-sprockets.scss), [4](https://github.com/twbs/bootstrap-sass/blob/v3.2.0%2B1/assets/stylesheets/_bootstrap-compass.scss), [5](https://github.com/twbs/bootstrap-sass/blob/v3.2.0%2B1/assets/stylesheets/_bootstrap-mincer.scss)).

Perhaps we can use `url()` and delegate it to the helper automatically, instead of calling the helpers directly. For example, `url(""logo.png"")` would be the same as `url(asset-path(""logo.png""))` in Sprockets. I've started on a pure Sass library that does this via overriding `@function url($path)` here: https://github.com/glebm/sass-rewrite-url. 

It almost works, but can unquoted strings be processed this way?
",glebm,function
1361,2014-08-07 01:09:59,"the url function in CSS has special parsing rules to allow it to treat the argument as a string. Sass has special handling for this, but when it's triggered it's a special string instead of a function call. @nex3 perhaps we should parse the url as a function call with an unquoted string as the argument instead of as a special string?
",chriseppstein,nex3
1354,2014-08-04 11:21:40,"Is this correct behavior?

I expect this to not render anything, unless @extend is used. But it is rendered.


",fiinix,extend
1354,2014-08-04 17:07:18,"That's expected. `@at-root` is equivalent to writing the contents outside of any selector rules.
",nex3,at-root
1349,2015-07-13 15:27:41,"Sorry in advance for the lengthy post, but someone need to do it. This is a reply to [#1739 (comment)](https://github.com/sass/sass/issues/1739#issuecomment-111102236).
@HugoGiraudel, @davidkpiano, @ArmorDarks I understand that sass is a function based language and that's part of the reason I love using it because it makes doing difficult tasks easy; however using functions **alone** to handle maps and lists can make what should be simple tasks seem overly complicated. In my issue #1349 I suggested using dot/bracket notation for variables only, and the way I suggested it to be implemented would not interfere with the sass ecosystem and instead be a huge improvement to the best preprocessor available. The longer implementing dot/bracket notation is ignored, the bigger the issue becomes. There are several notable libraries out there that have implemented their own way of handling maps, including some that @HugoGiraudel has written. The mere fact that there have been so many libraries attempting to solve this problem should be a clear indicator that it‚Äôs an issue worth standardizing.  It also means everyone learns how to handle large sass maps in a different way, and therefore every time someone moves jobs they have to change the way they deal with sass maps and that means relearning something that should have been implemented from the start. These various implementations make it harder to understand what's going on in people‚Äôs code, and it make it even more difficult for new people who are trying to learn sass to understand what they are seeing.

@davidkpiano Is 100% correct `map-get($map, foo.bar)` is a very bad idea. That's why I didn't suggest using dot notation in this way. However, if you implement dot notation similarly to how other notable languages use dot notation, it would solve these ridiculous problems everyone runs in to with maps.

In `js` and other languages that use dot/bracket notation you **can't** add `.` into the variable/key name for good reason, and it's pretty much the same point that @davidkpiano is trying to make. The difference being sass **does** follow suit and doesn't accept `.` in a variable/key name. If you tried to set a map key to be `foo.bar` you will get an error. The reason it returns an error is because sass interprets it as a css selector and since a css selector can't be followed by `:` an error is returned. Variables can't have a dot in them either for the same reason. So how does his example work? Well a sass key can be a type of `string`, `list`, `number`, `color`, or `map`. This means we can set a key to anything we want, and that allows us to do things like he's showing in his example. The reason his example works is because `nth(&, 1)` is a type of `list`. So when `map-get($map, nth(&, 1))` is called it's looking for key that matches the list of `nth(&, 1)`. If you absolutely have to have a `.` in your key name then you can do the same thing other languages do; just add quotes around the declaration to note that it's a string `""foo.bar""`‚Äî and that makes the key valid. 

Here's @davidkpiano example explained in depth, and the live example is on [sassmiester](http://sassmeister.com/gist/61a28cfb00edde026269) if you would like to see the output



##### These use cases can still use dot/bracket notation without any special functions being added



Implementing dot/bracket notation is something that needs to happen. It would make sass tremendously more readable, and it would make it easier for beginners with background knowledge of `js` and other languages that use dot/bracket notation easier to dive in to sass because they don't have to re-learn the same concept of structures/maps in a different way than they already know. The reason why I started using sass is because of it's extensibility, simplicity, and ease of understanding. The way maps(aka structures) are currently implemented makes it more complex than it needs to be. While I understand sass maps and use them on a daily basis, trying to teach a developer how to use sass map functions is harder than it needs to be and every time each developer has said ""Well why didn't they just use dot notation? That would be so much easier!‚Äù. I believe if there was a poll on implementing dot/bracket notation in sass and it was asked on all the major sass resource sites and email lists the majority of sass developers would agree that sass needs dot/bracket notation.

### Examples and use cases

Here are some more examples and use cases, how they are written with the current implementation of maps, and how they could be written using dot/bracket notation:

#### Setting a key value using other values from the same map.

Here is a [live](http://codepen.io/tjbenton21/pen/WvJWBz?editors=110) example that I had to use on codepen.



###### With map functions



###### With dot/bracket notation



#### Calling a dynamic key

This would be a use case for mixins and functions to call a key based off an argument that was passed:



###### With map functions



###### With dot/bracket notation



#### Getting a variable from a deeply nested map

This example is taken from the original post

###### With map functions



###### With dot/bracket notation



#### Setting a value on a deeply nested key

This example uses the same map from the original post.

###### With functions

The only real possibility to do this is to use a third party functions, like the one that @HugoGiraudel wrote and shared on [sitepoint](http://www.sitepoint.com/extra-map-functions-sass/), or the one that was written by @Snugug for [Sass-maps](https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss#L13), or another that was written by @cahnory for [PlastiCSS](https://github.com/cahnory/PlastiCSS/blob/master/function/_map-set.scss), or the one that was written by @pascalduez [gist](https://gist.github.com/pascalduez/14ef79d644483fc262da), these are just a few I came across in a single post by @chriscoyier on [csstricks](https://css-tricks.com/snippets/sass/deep-getset-maps/) and there are so many more out there, this was just from the first link in google.



###### With dot/bracket notation



#### Using `map-remove` with nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-keys`, and `map-values` on a nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-has-key` on a nested map

###### With map functions



###### With dot/bracket notation



### Bracket notation for sass lists

The bracket notation should also be applied to sass lists because it's still dealing with the same concept of getting and setting things in variables.

#### Getting/setting an item in a list(aka array)



###### With list functions



###### With bracket notation

Since sass isn't zero based like js the first item in the array would still be accesed through `1` and the last element would be accesed by the length of the list



#### Getting/setting an item in a list(aka array) that is nested in a map



###### With map/list functions



###### With dot/bracket notation



Dot notation is a very simple concept to understand regardless of your coding background, as it is already very common in several other languages. This would make it easer for other developers to learn sass, and utilize the power of sass maps. Implement it correctly would reduce the amount of wasted time by developers creating their own implementations of the sass map functions, as well as definitively solve a problem that others have already tried to hack their way around.
",tjbenton,davidkpiano
1349,2015-07-13 15:27:41,"Sorry in advance for the lengthy post, but someone need to do it. This is a reply to [#1739 (comment)](https://github.com/sass/sass/issues/1739#issuecomment-111102236).
@HugoGiraudel, @davidkpiano, @ArmorDarks I understand that sass is a function based language and that's part of the reason I love using it because it makes doing difficult tasks easy; however using functions **alone** to handle maps and lists can make what should be simple tasks seem overly complicated. In my issue #1349 I suggested using dot/bracket notation for variables only, and the way I suggested it to be implemented would not interfere with the sass ecosystem and instead be a huge improvement to the best preprocessor available. The longer implementing dot/bracket notation is ignored, the bigger the issue becomes. There are several notable libraries out there that have implemented their own way of handling maps, including some that @HugoGiraudel has written. The mere fact that there have been so many libraries attempting to solve this problem should be a clear indicator that it‚Äôs an issue worth standardizing.  It also means everyone learns how to handle large sass maps in a different way, and therefore every time someone moves jobs they have to change the way they deal with sass maps and that means relearning something that should have been implemented from the start. These various implementations make it harder to understand what's going on in people‚Äôs code, and it make it even more difficult for new people who are trying to learn sass to understand what they are seeing.

@davidkpiano Is 100% correct `map-get($map, foo.bar)` is a very bad idea. That's why I didn't suggest using dot notation in this way. However, if you implement dot notation similarly to how other notable languages use dot notation, it would solve these ridiculous problems everyone runs in to with maps.

In `js` and other languages that use dot/bracket notation you **can't** add `.` into the variable/key name for good reason, and it's pretty much the same point that @davidkpiano is trying to make. The difference being sass **does** follow suit and doesn't accept `.` in a variable/key name. If you tried to set a map key to be `foo.bar` you will get an error. The reason it returns an error is because sass interprets it as a css selector and since a css selector can't be followed by `:` an error is returned. Variables can't have a dot in them either for the same reason. So how does his example work? Well a sass key can be a type of `string`, `list`, `number`, `color`, or `map`. This means we can set a key to anything we want, and that allows us to do things like he's showing in his example. The reason his example works is because `nth(&, 1)` is a type of `list`. So when `map-get($map, nth(&, 1))` is called it's looking for key that matches the list of `nth(&, 1)`. If you absolutely have to have a `.` in your key name then you can do the same thing other languages do; just add quotes around the declaration to note that it's a string `""foo.bar""`‚Äî and that makes the key valid. 

Here's @davidkpiano example explained in depth, and the live example is on [sassmiester](http://sassmeister.com/gist/61a28cfb00edde026269) if you would like to see the output



##### These use cases can still use dot/bracket notation without any special functions being added



Implementing dot/bracket notation is something that needs to happen. It would make sass tremendously more readable, and it would make it easier for beginners with background knowledge of `js` and other languages that use dot/bracket notation easier to dive in to sass because they don't have to re-learn the same concept of structures/maps in a different way than they already know. The reason why I started using sass is because of it's extensibility, simplicity, and ease of understanding. The way maps(aka structures) are currently implemented makes it more complex than it needs to be. While I understand sass maps and use them on a daily basis, trying to teach a developer how to use sass map functions is harder than it needs to be and every time each developer has said ""Well why didn't they just use dot notation? That would be so much easier!‚Äù. I believe if there was a poll on implementing dot/bracket notation in sass and it was asked on all the major sass resource sites and email lists the majority of sass developers would agree that sass needs dot/bracket notation.

### Examples and use cases

Here are some more examples and use cases, how they are written with the current implementation of maps, and how they could be written using dot/bracket notation:

#### Setting a key value using other values from the same map.

Here is a [live](http://codepen.io/tjbenton21/pen/WvJWBz?editors=110) example that I had to use on codepen.



###### With map functions



###### With dot/bracket notation



#### Calling a dynamic key

This would be a use case for mixins and functions to call a key based off an argument that was passed:



###### With map functions



###### With dot/bracket notation



#### Getting a variable from a deeply nested map

This example is taken from the original post

###### With map functions



###### With dot/bracket notation



#### Setting a value on a deeply nested key

This example uses the same map from the original post.

###### With functions

The only real possibility to do this is to use a third party functions, like the one that @HugoGiraudel wrote and shared on [sitepoint](http://www.sitepoint.com/extra-map-functions-sass/), or the one that was written by @Snugug for [Sass-maps](https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss#L13), or another that was written by @cahnory for [PlastiCSS](https://github.com/cahnory/PlastiCSS/blob/master/function/_map-set.scss), or the one that was written by @pascalduez [gist](https://gist.github.com/pascalduez/14ef79d644483fc262da), these are just a few I came across in a single post by @chriscoyier on [csstricks](https://css-tricks.com/snippets/sass/deep-getset-maps/) and there are so many more out there, this was just from the first link in google.



###### With dot/bracket notation



#### Using `map-remove` with nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-keys`, and `map-values` on a nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-has-key` on a nested map

###### With map functions



###### With dot/bracket notation



### Bracket notation for sass lists

The bracket notation should also be applied to sass lists because it's still dealing with the same concept of getting and setting things in variables.

#### Getting/setting an item in a list(aka array)



###### With list functions



###### With bracket notation

Since sass isn't zero based like js the first item in the array would still be accesed through `1` and the last element would be accesed by the length of the list



#### Getting/setting an item in a list(aka array) that is nested in a map



###### With map/list functions



###### With dot/bracket notation



Dot notation is a very simple concept to understand regardless of your coding background, as it is already very common in several other languages. This would make it easer for other developers to learn sass, and utilize the power of sass maps. Implement it correctly would reduce the amount of wasted time by developers creating their own implementations of the sass map functions, as well as definitively solve a problem that others have already tried to hack their way around.
",tjbenton,pascalduez
1349,2015-07-13 15:27:41,"Sorry in advance for the lengthy post, but someone need to do it. This is a reply to [#1739 (comment)](https://github.com/sass/sass/issues/1739#issuecomment-111102236).
@HugoGiraudel, @davidkpiano, @ArmorDarks I understand that sass is a function based language and that's part of the reason I love using it because it makes doing difficult tasks easy; however using functions **alone** to handle maps and lists can make what should be simple tasks seem overly complicated. In my issue #1349 I suggested using dot/bracket notation for variables only, and the way I suggested it to be implemented would not interfere with the sass ecosystem and instead be a huge improvement to the best preprocessor available. The longer implementing dot/bracket notation is ignored, the bigger the issue becomes. There are several notable libraries out there that have implemented their own way of handling maps, including some that @HugoGiraudel has written. The mere fact that there have been so many libraries attempting to solve this problem should be a clear indicator that it‚Äôs an issue worth standardizing.  It also means everyone learns how to handle large sass maps in a different way, and therefore every time someone moves jobs they have to change the way they deal with sass maps and that means relearning something that should have been implemented from the start. These various implementations make it harder to understand what's going on in people‚Äôs code, and it make it even more difficult for new people who are trying to learn sass to understand what they are seeing.

@davidkpiano Is 100% correct `map-get($map, foo.bar)` is a very bad idea. That's why I didn't suggest using dot notation in this way. However, if you implement dot notation similarly to how other notable languages use dot notation, it would solve these ridiculous problems everyone runs in to with maps.

In `js` and other languages that use dot/bracket notation you **can't** add `.` into the variable/key name for good reason, and it's pretty much the same point that @davidkpiano is trying to make. The difference being sass **does** follow suit and doesn't accept `.` in a variable/key name. If you tried to set a map key to be `foo.bar` you will get an error. The reason it returns an error is because sass interprets it as a css selector and since a css selector can't be followed by `:` an error is returned. Variables can't have a dot in them either for the same reason. So how does his example work? Well a sass key can be a type of `string`, `list`, `number`, `color`, or `map`. This means we can set a key to anything we want, and that allows us to do things like he's showing in his example. The reason his example works is because `nth(&, 1)` is a type of `list`. So when `map-get($map, nth(&, 1))` is called it's looking for key that matches the list of `nth(&, 1)`. If you absolutely have to have a `.` in your key name then you can do the same thing other languages do; just add quotes around the declaration to note that it's a string `""foo.bar""`‚Äî and that makes the key valid. 

Here's @davidkpiano example explained in depth, and the live example is on [sassmiester](http://sassmeister.com/gist/61a28cfb00edde026269) if you would like to see the output



##### These use cases can still use dot/bracket notation without any special functions being added



Implementing dot/bracket notation is something that needs to happen. It would make sass tremendously more readable, and it would make it easier for beginners with background knowledge of `js` and other languages that use dot/bracket notation easier to dive in to sass because they don't have to re-learn the same concept of structures/maps in a different way than they already know. The reason why I started using sass is because of it's extensibility, simplicity, and ease of understanding. The way maps(aka structures) are currently implemented makes it more complex than it needs to be. While I understand sass maps and use them on a daily basis, trying to teach a developer how to use sass map functions is harder than it needs to be and every time each developer has said ""Well why didn't they just use dot notation? That would be so much easier!‚Äù. I believe if there was a poll on implementing dot/bracket notation in sass and it was asked on all the major sass resource sites and email lists the majority of sass developers would agree that sass needs dot/bracket notation.

### Examples and use cases

Here are some more examples and use cases, how they are written with the current implementation of maps, and how they could be written using dot/bracket notation:

#### Setting a key value using other values from the same map.

Here is a [live](http://codepen.io/tjbenton21/pen/WvJWBz?editors=110) example that I had to use on codepen.



###### With map functions



###### With dot/bracket notation



#### Calling a dynamic key

This would be a use case for mixins and functions to call a key based off an argument that was passed:



###### With map functions



###### With dot/bracket notation



#### Getting a variable from a deeply nested map

This example is taken from the original post

###### With map functions



###### With dot/bracket notation



#### Setting a value on a deeply nested key

This example uses the same map from the original post.

###### With functions

The only real possibility to do this is to use a third party functions, like the one that @HugoGiraudel wrote and shared on [sitepoint](http://www.sitepoint.com/extra-map-functions-sass/), or the one that was written by @Snugug for [Sass-maps](https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss#L13), or another that was written by @cahnory for [PlastiCSS](https://github.com/cahnory/PlastiCSS/blob/master/function/_map-set.scss), or the one that was written by @pascalduez [gist](https://gist.github.com/pascalduez/14ef79d644483fc262da), these are just a few I came across in a single post by @chriscoyier on [csstricks](https://css-tricks.com/snippets/sass/deep-getset-maps/) and there are so many more out there, this was just from the first link in google.



###### With dot/bracket notation



#### Using `map-remove` with nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-keys`, and `map-values` on a nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-has-key` on a nested map

###### With map functions



###### With dot/bracket notation



### Bracket notation for sass lists

The bracket notation should also be applied to sass lists because it's still dealing with the same concept of getting and setting things in variables.

#### Getting/setting an item in a list(aka array)



###### With list functions



###### With bracket notation

Since sass isn't zero based like js the first item in the array would still be accesed through `1` and the last element would be accesed by the length of the list



#### Getting/setting an item in a list(aka array) that is nested in a map



###### With map/list functions



###### With dot/bracket notation



Dot notation is a very simple concept to understand regardless of your coding background, as it is already very common in several other languages. This would make it easer for other developers to learn sass, and utilize the power of sass maps. Implement it correctly would reduce the amount of wasted time by developers creating their own implementations of the sass map functions, as well as definitively solve a problem that others have already tried to hack their way around.
",tjbenton,cahnory
1349,2015-07-13 15:27:41,"Sorry in advance for the lengthy post, but someone need to do it. This is a reply to [#1739 (comment)](https://github.com/sass/sass/issues/1739#issuecomment-111102236).
@HugoGiraudel, @davidkpiano, @ArmorDarks I understand that sass is a function based language and that's part of the reason I love using it because it makes doing difficult tasks easy; however using functions **alone** to handle maps and lists can make what should be simple tasks seem overly complicated. In my issue #1349 I suggested using dot/bracket notation for variables only, and the way I suggested it to be implemented would not interfere with the sass ecosystem and instead be a huge improvement to the best preprocessor available. The longer implementing dot/bracket notation is ignored, the bigger the issue becomes. There are several notable libraries out there that have implemented their own way of handling maps, including some that @HugoGiraudel has written. The mere fact that there have been so many libraries attempting to solve this problem should be a clear indicator that it‚Äôs an issue worth standardizing.  It also means everyone learns how to handle large sass maps in a different way, and therefore every time someone moves jobs they have to change the way they deal with sass maps and that means relearning something that should have been implemented from the start. These various implementations make it harder to understand what's going on in people‚Äôs code, and it make it even more difficult for new people who are trying to learn sass to understand what they are seeing.

@davidkpiano Is 100% correct `map-get($map, foo.bar)` is a very bad idea. That's why I didn't suggest using dot notation in this way. However, if you implement dot notation similarly to how other notable languages use dot notation, it would solve these ridiculous problems everyone runs in to with maps.

In `js` and other languages that use dot/bracket notation you **can't** add `.` into the variable/key name for good reason, and it's pretty much the same point that @davidkpiano is trying to make. The difference being sass **does** follow suit and doesn't accept `.` in a variable/key name. If you tried to set a map key to be `foo.bar` you will get an error. The reason it returns an error is because sass interprets it as a css selector and since a css selector can't be followed by `:` an error is returned. Variables can't have a dot in them either for the same reason. So how does his example work? Well a sass key can be a type of `string`, `list`, `number`, `color`, or `map`. This means we can set a key to anything we want, and that allows us to do things like he's showing in his example. The reason his example works is because `nth(&, 1)` is a type of `list`. So when `map-get($map, nth(&, 1))` is called it's looking for key that matches the list of `nth(&, 1)`. If you absolutely have to have a `.` in your key name then you can do the same thing other languages do; just add quotes around the declaration to note that it's a string `""foo.bar""`‚Äî and that makes the key valid. 

Here's @davidkpiano example explained in depth, and the live example is on [sassmiester](http://sassmeister.com/gist/61a28cfb00edde026269) if you would like to see the output



##### These use cases can still use dot/bracket notation without any special functions being added



Implementing dot/bracket notation is something that needs to happen. It would make sass tremendously more readable, and it would make it easier for beginners with background knowledge of `js` and other languages that use dot/bracket notation easier to dive in to sass because they don't have to re-learn the same concept of structures/maps in a different way than they already know. The reason why I started using sass is because of it's extensibility, simplicity, and ease of understanding. The way maps(aka structures) are currently implemented makes it more complex than it needs to be. While I understand sass maps and use them on a daily basis, trying to teach a developer how to use sass map functions is harder than it needs to be and every time each developer has said ""Well why didn't they just use dot notation? That would be so much easier!‚Äù. I believe if there was a poll on implementing dot/bracket notation in sass and it was asked on all the major sass resource sites and email lists the majority of sass developers would agree that sass needs dot/bracket notation.

### Examples and use cases

Here are some more examples and use cases, how they are written with the current implementation of maps, and how they could be written using dot/bracket notation:

#### Setting a key value using other values from the same map.

Here is a [live](http://codepen.io/tjbenton21/pen/WvJWBz?editors=110) example that I had to use on codepen.



###### With map functions



###### With dot/bracket notation



#### Calling a dynamic key

This would be a use case for mixins and functions to call a key based off an argument that was passed:



###### With map functions



###### With dot/bracket notation



#### Getting a variable from a deeply nested map

This example is taken from the original post

###### With map functions



###### With dot/bracket notation



#### Setting a value on a deeply nested key

This example uses the same map from the original post.

###### With functions

The only real possibility to do this is to use a third party functions, like the one that @HugoGiraudel wrote and shared on [sitepoint](http://www.sitepoint.com/extra-map-functions-sass/), or the one that was written by @Snugug for [Sass-maps](https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss#L13), or another that was written by @cahnory for [PlastiCSS](https://github.com/cahnory/PlastiCSS/blob/master/function/_map-set.scss), or the one that was written by @pascalduez [gist](https://gist.github.com/pascalduez/14ef79d644483fc262da), these are just a few I came across in a single post by @chriscoyier on [csstricks](https://css-tricks.com/snippets/sass/deep-getset-maps/) and there are so many more out there, this was just from the first link in google.



###### With dot/bracket notation



#### Using `map-remove` with nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-keys`, and `map-values` on a nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-has-key` on a nested map

###### With map functions



###### With dot/bracket notation



### Bracket notation for sass lists

The bracket notation should also be applied to sass lists because it's still dealing with the same concept of getting and setting things in variables.

#### Getting/setting an item in a list(aka array)



###### With list functions



###### With bracket notation

Since sass isn't zero based like js the first item in the array would still be accesed through `1` and the last element would be accesed by the length of the list



#### Getting/setting an item in a list(aka array) that is nested in a map



###### With map/list functions



###### With dot/bracket notation



Dot notation is a very simple concept to understand regardless of your coding background, as it is already very common in several other languages. This would make it easer for other developers to learn sass, and utilize the power of sass maps. Implement it correctly would reduce the amount of wasted time by developers creating their own implementations of the sass map functions, as well as definitively solve a problem that others have already tried to hack their way around.
",tjbenton,chriscoyier
1349,2015-07-13 15:27:41,"Sorry in advance for the lengthy post, but someone need to do it. This is a reply to [#1739 (comment)](https://github.com/sass/sass/issues/1739#issuecomment-111102236).
@HugoGiraudel, @davidkpiano, @ArmorDarks I understand that sass is a function based language and that's part of the reason I love using it because it makes doing difficult tasks easy; however using functions **alone** to handle maps and lists can make what should be simple tasks seem overly complicated. In my issue #1349 I suggested using dot/bracket notation for variables only, and the way I suggested it to be implemented would not interfere with the sass ecosystem and instead be a huge improvement to the best preprocessor available. The longer implementing dot/bracket notation is ignored, the bigger the issue becomes. There are several notable libraries out there that have implemented their own way of handling maps, including some that @HugoGiraudel has written. The mere fact that there have been so many libraries attempting to solve this problem should be a clear indicator that it‚Äôs an issue worth standardizing.  It also means everyone learns how to handle large sass maps in a different way, and therefore every time someone moves jobs they have to change the way they deal with sass maps and that means relearning something that should have been implemented from the start. These various implementations make it harder to understand what's going on in people‚Äôs code, and it make it even more difficult for new people who are trying to learn sass to understand what they are seeing.

@davidkpiano Is 100% correct `map-get($map, foo.bar)` is a very bad idea. That's why I didn't suggest using dot notation in this way. However, if you implement dot notation similarly to how other notable languages use dot notation, it would solve these ridiculous problems everyone runs in to with maps.

In `js` and other languages that use dot/bracket notation you **can't** add `.` into the variable/key name for good reason, and it's pretty much the same point that @davidkpiano is trying to make. The difference being sass **does** follow suit and doesn't accept `.` in a variable/key name. If you tried to set a map key to be `foo.bar` you will get an error. The reason it returns an error is because sass interprets it as a css selector and since a css selector can't be followed by `:` an error is returned. Variables can't have a dot in them either for the same reason. So how does his example work? Well a sass key can be a type of `string`, `list`, `number`, `color`, or `map`. This means we can set a key to anything we want, and that allows us to do things like he's showing in his example. The reason his example works is because `nth(&, 1)` is a type of `list`. So when `map-get($map, nth(&, 1))` is called it's looking for key that matches the list of `nth(&, 1)`. If you absolutely have to have a `.` in your key name then you can do the same thing other languages do; just add quotes around the declaration to note that it's a string `""foo.bar""`‚Äî and that makes the key valid. 

Here's @davidkpiano example explained in depth, and the live example is on [sassmiester](http://sassmeister.com/gist/61a28cfb00edde026269) if you would like to see the output



##### These use cases can still use dot/bracket notation without any special functions being added



Implementing dot/bracket notation is something that needs to happen. It would make sass tremendously more readable, and it would make it easier for beginners with background knowledge of `js` and other languages that use dot/bracket notation easier to dive in to sass because they don't have to re-learn the same concept of structures/maps in a different way than they already know. The reason why I started using sass is because of it's extensibility, simplicity, and ease of understanding. The way maps(aka structures) are currently implemented makes it more complex than it needs to be. While I understand sass maps and use them on a daily basis, trying to teach a developer how to use sass map functions is harder than it needs to be and every time each developer has said ""Well why didn't they just use dot notation? That would be so much easier!‚Äù. I believe if there was a poll on implementing dot/bracket notation in sass and it was asked on all the major sass resource sites and email lists the majority of sass developers would agree that sass needs dot/bracket notation.

### Examples and use cases

Here are some more examples and use cases, how they are written with the current implementation of maps, and how they could be written using dot/bracket notation:

#### Setting a key value using other values from the same map.

Here is a [live](http://codepen.io/tjbenton21/pen/WvJWBz?editors=110) example that I had to use on codepen.



###### With map functions



###### With dot/bracket notation



#### Calling a dynamic key

This would be a use case for mixins and functions to call a key based off an argument that was passed:



###### With map functions



###### With dot/bracket notation



#### Getting a variable from a deeply nested map

This example is taken from the original post

###### With map functions



###### With dot/bracket notation



#### Setting a value on a deeply nested key

This example uses the same map from the original post.

###### With functions

The only real possibility to do this is to use a third party functions, like the one that @HugoGiraudel wrote and shared on [sitepoint](http://www.sitepoint.com/extra-map-functions-sass/), or the one that was written by @Snugug for [Sass-maps](https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss#L13), or another that was written by @cahnory for [PlastiCSS](https://github.com/cahnory/PlastiCSS/blob/master/function/_map-set.scss), or the one that was written by @pascalduez [gist](https://gist.github.com/pascalduez/14ef79d644483fc262da), these are just a few I came across in a single post by @chriscoyier on [csstricks](https://css-tricks.com/snippets/sass/deep-getset-maps/) and there are so many more out there, this was just from the first link in google.



###### With dot/bracket notation



#### Using `map-remove` with nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-keys`, and `map-values` on a nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-has-key` on a nested map

###### With map functions



###### With dot/bracket notation



### Bracket notation for sass lists

The bracket notation should also be applied to sass lists because it's still dealing with the same concept of getting and setting things in variables.

#### Getting/setting an item in a list(aka array)



###### With list functions



###### With bracket notation

Since sass isn't zero based like js the first item in the array would still be accesed through `1` and the last element would be accesed by the length of the list



#### Getting/setting an item in a list(aka array) that is nested in a map



###### With map/list functions



###### With dot/bracket notation



Dot notation is a very simple concept to understand regardless of your coding background, as it is already very common in several other languages. This would make it easer for other developers to learn sass, and utilize the power of sass maps. Implement it correctly would reduce the amount of wasted time by developers creating their own implementations of the sass map functions, as well as definitively solve a problem that others have already tried to hack their way around.
",tjbenton,Snugug
1349,2015-07-13 15:27:41,"Sorry in advance for the lengthy post, but someone need to do it. This is a reply to [#1739 (comment)](https://github.com/sass/sass/issues/1739#issuecomment-111102236).
@HugoGiraudel, @davidkpiano, @ArmorDarks I understand that sass is a function based language and that's part of the reason I love using it because it makes doing difficult tasks easy; however using functions **alone** to handle maps and lists can make what should be simple tasks seem overly complicated. In my issue #1349 I suggested using dot/bracket notation for variables only, and the way I suggested it to be implemented would not interfere with the sass ecosystem and instead be a huge improvement to the best preprocessor available. The longer implementing dot/bracket notation is ignored, the bigger the issue becomes. There are several notable libraries out there that have implemented their own way of handling maps, including some that @HugoGiraudel has written. The mere fact that there have been so many libraries attempting to solve this problem should be a clear indicator that it‚Äôs an issue worth standardizing.  It also means everyone learns how to handle large sass maps in a different way, and therefore every time someone moves jobs they have to change the way they deal with sass maps and that means relearning something that should have been implemented from the start. These various implementations make it harder to understand what's going on in people‚Äôs code, and it make it even more difficult for new people who are trying to learn sass to understand what they are seeing.

@davidkpiano Is 100% correct `map-get($map, foo.bar)` is a very bad idea. That's why I didn't suggest using dot notation in this way. However, if you implement dot notation similarly to how other notable languages use dot notation, it would solve these ridiculous problems everyone runs in to with maps.

In `js` and other languages that use dot/bracket notation you **can't** add `.` into the variable/key name for good reason, and it's pretty much the same point that @davidkpiano is trying to make. The difference being sass **does** follow suit and doesn't accept `.` in a variable/key name. If you tried to set a map key to be `foo.bar` you will get an error. The reason it returns an error is because sass interprets it as a css selector and since a css selector can't be followed by `:` an error is returned. Variables can't have a dot in them either for the same reason. So how does his example work? Well a sass key can be a type of `string`, `list`, `number`, `color`, or `map`. This means we can set a key to anything we want, and that allows us to do things like he's showing in his example. The reason his example works is because `nth(&, 1)` is a type of `list`. So when `map-get($map, nth(&, 1))` is called it's looking for key that matches the list of `nth(&, 1)`. If you absolutely have to have a `.` in your key name then you can do the same thing other languages do; just add quotes around the declaration to note that it's a string `""foo.bar""`‚Äî and that makes the key valid. 

Here's @davidkpiano example explained in depth, and the live example is on [sassmiester](http://sassmeister.com/gist/61a28cfb00edde026269) if you would like to see the output



##### These use cases can still use dot/bracket notation without any special functions being added



Implementing dot/bracket notation is something that needs to happen. It would make sass tremendously more readable, and it would make it easier for beginners with background knowledge of `js` and other languages that use dot/bracket notation easier to dive in to sass because they don't have to re-learn the same concept of structures/maps in a different way than they already know. The reason why I started using sass is because of it's extensibility, simplicity, and ease of understanding. The way maps(aka structures) are currently implemented makes it more complex than it needs to be. While I understand sass maps and use them on a daily basis, trying to teach a developer how to use sass map functions is harder than it needs to be and every time each developer has said ""Well why didn't they just use dot notation? That would be so much easier!‚Äù. I believe if there was a poll on implementing dot/bracket notation in sass and it was asked on all the major sass resource sites and email lists the majority of sass developers would agree that sass needs dot/bracket notation.

### Examples and use cases

Here are some more examples and use cases, how they are written with the current implementation of maps, and how they could be written using dot/bracket notation:

#### Setting a key value using other values from the same map.

Here is a [live](http://codepen.io/tjbenton21/pen/WvJWBz?editors=110) example that I had to use on codepen.



###### With map functions



###### With dot/bracket notation



#### Calling a dynamic key

This would be a use case for mixins and functions to call a key based off an argument that was passed:



###### With map functions



###### With dot/bracket notation



#### Getting a variable from a deeply nested map

This example is taken from the original post

###### With map functions



###### With dot/bracket notation



#### Setting a value on a deeply nested key

This example uses the same map from the original post.

###### With functions

The only real possibility to do this is to use a third party functions, like the one that @HugoGiraudel wrote and shared on [sitepoint](http://www.sitepoint.com/extra-map-functions-sass/), or the one that was written by @Snugug for [Sass-maps](https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss#L13), or another that was written by @cahnory for [PlastiCSS](https://github.com/cahnory/PlastiCSS/blob/master/function/_map-set.scss), or the one that was written by @pascalduez [gist](https://gist.github.com/pascalduez/14ef79d644483fc262da), these are just a few I came across in a single post by @chriscoyier on [csstricks](https://css-tricks.com/snippets/sass/deep-getset-maps/) and there are so many more out there, this was just from the first link in google.



###### With dot/bracket notation



#### Using `map-remove` with nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-keys`, and `map-values` on a nested map

###### With map functions



###### With dot/bracket notation



#### Using `map-has-key` on a nested map

###### With map functions



###### With dot/bracket notation



### Bracket notation for sass lists

The bracket notation should also be applied to sass lists because it's still dealing with the same concept of getting and setting things in variables.

#### Getting/setting an item in a list(aka array)



###### With list functions



###### With bracket notation

Since sass isn't zero based like js the first item in the array would still be accesed through `1` and the last element would be accesed by the length of the list



#### Getting/setting an item in a list(aka array) that is nested in a map



###### With map/list functions



###### With dot/bracket notation



Dot notation is a very simple concept to understand regardless of your coding background, as it is already very common in several other languages. This would make it easer for other developers to learn sass, and utilize the power of sass maps. Implement it correctly would reduce the amount of wasted time by developers creating their own implementations of the sass map functions, as well as definitively solve a problem that others have already tried to hack their way around.
",tjbenton,HugoGiraudel
1349,2015-07-13 19:54:14,"@tjbenton Sure

@HugoGiraudel I know you had different position regarding dot notation in past. Can you make any comments based on https://github.com/sass/sass/issues/1349#issuecomment-120967912 and https://github.com/sass/sass/issues/1739#issuecomment-111181142? Thanks in advance
",ArmorDarks,HugoGiraudel
1349,2016-08-19 12:53:06,"@michaelklishin THX ! Stylus is really a better choice for node developer !
",linkdesu,michaelklishin
1348,2014-07-31 20:17:54,"Sass has a `null` value. So you can `@return null` instead of `none` which is a string.

Also, side-effects are intentionally discouraged so if pure side-effect functions are awkward to use, this doesn't bother me, I actually like the mixin here, because mixins exist purely to perform side-effects.

@nex3 concur?
",chriseppstein,return
1348,2014-07-31 20:17:54,"Sass has a `null` value. So you can `@return null` instead of `none` which is a string.

Also, side-effects are intentionally discouraged so if pure side-effect functions are awkward to use, this doesn't bother me, I actually like the mixin here, because mixins exist purely to perform side-effects.

@nex3 concur?
",chriseppstein,nex3
1348,2014-08-01 20:59:03,"> I guess my problem with using a mixin is that the name mixin makes sense when you are mixing function into a selector, but here it feels like it is being misused, and the necessity of the unused $temp variable only makes it feel more so. It feels kind of hacky.

I agree. It's hacky.

> This feels like a perfectly reasonable (and helpful) use-case to me that can only be achieved in a convoluted way.

There is simply no existing parsing rules in CSS that would accommodate this. It would be a huge departure from all existing CSS constructs. **If** we did something to enable side-effects it would need to be a new directive. E.g. `@perform some-side-effect()`.

> Would you mind explaining why this kind of 'side effect' is discouraged?

Because side-effects create software that is more brittle and hard to reason about.

> I would also question that if you allow a null return value, why not make this implicit, though I suppose this is tied into avoiding functions created specifically for their side-effects.

Mostly it exists to prevent users from forgetting to return a value which is the most common case. Less common cases while supported are not optimized at the cost of the primary use case.
",chriseppstein,perform
1348,2014-08-15 01:20:49,"The best I could offer here is a special directive E.g. `@call doSomeSideEffect(args...)` that executes a function and probably forbids an `@return` that isn't `null`. But now we're really only quibbling about whether this is more understandable than writing `@include doSomeSideEffect(args...)`.

I'm not saying this couldn't be made more elegant, I'm saying that the amount by which the elegance increases for an uncommon use case is not worth the amount of additional syntax and learning that is required for that feature to exist.
",chriseppstein,return
1348,2014-08-15 01:20:49,"The best I could offer here is a special directive E.g. `@call doSomeSideEffect(args...)` that executes a function and probably forbids an `@return` that isn't `null`. But now we're really only quibbling about whether this is more understandable than writing `@include doSomeSideEffect(args...)`.

I'm not saying this couldn't be made more elegant, I'm saying that the amount by which the elegance increases for an uncommon use case is not worth the amount of additional syntax and learning that is required for that feature to exist.
",chriseppstein,call
1348,2014-08-15 01:20:49,"The best I could offer here is a special directive E.g. `@call doSomeSideEffect(args...)` that executes a function and probably forbids an `@return` that isn't `null`. But now we're really only quibbling about whether this is more understandable than writing `@include doSomeSideEffect(args...)`.

I'm not saying this couldn't be made more elegant, I'm saying that the amount by which the elegance increases for an uncommon use case is not worth the amount of additional syntax and learning that is required for that feature to exist.
",chriseppstein,include
1348,2014-08-15 11:04:14,"I have a couple of projects where I need users to be able to get and set settings, and I did exactly what Chris suggested. In fact, I abstracted it (https://github.com/Team-Sass/toolkit/blob/2.x.x/stylesheets/toolkit/_settings.scss) to make it easier to use.

That being said, with maps I don't think the getter/setter pattern is an edge case (lots of us are adopting it) but I find the mixin approach totally useable and so far have had 0 people complain about it as it's a pattern people have seen before in Sass (mixins at the root of a document)

> On Aug 14, 2014, at 9:20 PM, Chris Eppstein notifications@github.com wrote:
> 
> The best I could offer here is a special directive E.g. @call doSomeSideEffect(args...) that executes a function and probably forbids an @return that isn't null. But now we're really only quibbling about whether this is more understandable than writing @include doSomeSideEffect(args...).
> 
> I'm not saying this couldn't be made more elegant, I'm saying that the amount by which the elegance increases for an uncommon use case is not worth the amount of additional syntax and learning that is required for that feature to exist.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,return
1348,2014-08-15 11:04:14,"I have a couple of projects where I need users to be able to get and set settings, and I did exactly what Chris suggested. In fact, I abstracted it (https://github.com/Team-Sass/toolkit/blob/2.x.x/stylesheets/toolkit/_settings.scss) to make it easier to use.

That being said, with maps I don't think the getter/setter pattern is an edge case (lots of us are adopting it) but I find the mixin approach totally useable and so far have had 0 people complain about it as it's a pattern people have seen before in Sass (mixins at the root of a document)

> On Aug 14, 2014, at 9:20 PM, Chris Eppstein notifications@github.com wrote:
> 
> The best I could offer here is a special directive E.g. @call doSomeSideEffect(args...) that executes a function and probably forbids an @return that isn't null. But now we're really only quibbling about whether this is more understandable than writing @include doSomeSideEffect(args...).
> 
> I'm not saying this couldn't be made more elegant, I'm saying that the amount by which the elegance increases for an uncommon use case is not worth the amount of additional syntax and learning that is required for that feature to exist.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,call
1348,2014-08-15 11:04:14,"I have a couple of projects where I need users to be able to get and set settings, and I did exactly what Chris suggested. In fact, I abstracted it (https://github.com/Team-Sass/toolkit/blob/2.x.x/stylesheets/toolkit/_settings.scss) to make it easier to use.

That being said, with maps I don't think the getter/setter pattern is an edge case (lots of us are adopting it) but I find the mixin approach totally useable and so far have had 0 people complain about it as it's a pattern people have seen before in Sass (mixins at the root of a document)

> On Aug 14, 2014, at 9:20 PM, Chris Eppstein notifications@github.com wrote:
> 
> The best I could offer here is a special directive E.g. @call doSomeSideEffect(args...) that executes a function and probably forbids an @return that isn't null. But now we're really only quibbling about whether this is more understandable than writing @include doSomeSideEffect(args...).
> 
> I'm not saying this couldn't be made more elegant, I'm saying that the amount by which the elegance increases for an uncommon use case is not worth the amount of additional syntax and learning that is required for that feature to exist.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,include
1348,2014-08-15 11:48:26,"Mixins are not necessarily a bad way to go about it, and if this doesn't become a feature, that is what I will go with. However, I do think that it is a hacky approach and obscures the purpose of the call. As far as I am concerned, and I may be wrong, the key difference between mixins and functions is that mixins output code whereas functions can return a meaningless value, `null`.

In Java, the only reason for the void return type is to indicate that side-effects are the sole purpose of the function and in sass, enforcing the null return value from an `@call` could serve a similar purpose and make the code more easy to understand.
",joshbambrick,call
1347,2014-07-31 08:49:01,"As you can see in these Stackoverflow Question, i believe this its a bug.
++ What Happens:
- Sass generate an Empty Css-Selector within only an Comment. 
  .text { color: red; }
  .article { /\* Texts within article */ p {@extend .text;} }

++ to Reproduce the Problem:
http://sassmeister.com/gist/3116020d285be50b8807

++ Source:
http://stackoverflow.com/questions/24262499/empty-css-block-from-scss-when-using-extends-only/
",stephanfriedrich,extend
1342,2014-08-01 20:30:07,"I think this is caused by @chriseppstein's site deployment setup. It doesn't seem to be a problem for me, so it'll be fixed when I re-deploy later tonight.
",nex3,chriseppstein
1339,2014-07-27 22:49:40,"The idea I had is to add an `x` or `skip` value, which would be in the same vein as `auto` and `inherit`, that could be used to skip a value, instead of re-defining it or resetting it to 0. Then you could continue still use the CSS shorthand syntax instead of reverting to splitting it up like, `margin-top`, `margin-right` etc.

[I wrote this scss partial, that might do a better job of explaining what exactly I mean](https://github.com/dustindowell22/LifeSaver). I've also added more to it that what I've proposed here: multiple properties, multiple units, and the position property.

The main advantage here is speed in changing values when you don't want to revert or re-define a value. It also keeps everything nice and tidy rather than having blocks of properties for margins and paddings.

With the new `@include` and `@extend` selectors coming up just sticking to my scss partial seems completely plausible now, but I think others might find similar features to be useful too.
",whaaaley,extend
1339,2014-07-27 22:49:40,"The idea I had is to add an `x` or `skip` value, which would be in the same vein as `auto` and `inherit`, that could be used to skip a value, instead of re-defining it or resetting it to 0. Then you could continue still use the CSS shorthand syntax instead of reverting to splitting it up like, `margin-top`, `margin-right` etc.

[I wrote this scss partial, that might do a better job of explaining what exactly I mean](https://github.com/dustindowell22/LifeSaver). I've also added more to it that what I've proposed here: multiple properties, multiple units, and the position property.

The main advantage here is speed in changing values when you don't want to revert or re-define a value. It also keeps everything nice and tidy rather than having blocks of properties for margins and paddings.

With the new `@include` and `@extend` selectors coming up just sticking to my scss partial seems completely plausible now, but I think others might find similar features to be useful too.
",whaaaley,include
1332,2014-07-23 15:44:24,"My bet is that @nex3 will turn this down because it will make Sass more different from CSS.

Meanwhile, you can use a custom function to do that. `c(13)` isn't much longer to write than `#13`.
",lolmaus,nex3
1332,2014-07-23 18:39:01,"@tabatkins Is this going to be legal CSS someday?
",chriseppstein,tabatkins
1327,2014-07-22 18:09:48,"@nex3 Thoughts?
",chriseppstein,nex3
1323,2014-07-18 09:59:14,"/\*     @warn ""Unknown '#{$key}' in $colors.""; */  
 (Line 13: Undefined variable: ""$key"".)
Compilation exited abnormally with code 1
",zhangkaiyulw,warn
1317,2014-07-15 16:30:56,"I'm trying to switch to SASS but LESS has a feature which I can't figure out how to accomplish in SASS. LESS you can do `@import (reference) ""file"";` but there doesn't seem to be a way to do this in SASS.
",julzmon,import
1314,2014-07-12 17:06:23,"When I set a load-path with `--load-path` I get the following error with sass 3.4.0.rc.1:



This works with sass 3.3.10. If I can somehow provide more information, please let me know.

btw, thanks for `@error`
",benib,error
1313,2014-07-12 01:49:08,"Now that 3.4 supports `@error`, it should mention that in `feature-exists`.
",nex3,error
1309,2014-07-11 22:21:52,"OK, thanks. 
Is there any way for a mixin to tell if it is being evaluated within the `@content` context of another mixin?
",alanhogan,content
1307,2014-07-08 23:06:09,"Should be able to use variables in the `@import` path.
Like this:



This should be the same as:



PD: there are any mode to do this in sass 3.3.9
",liamato,import
1307,2014-07-08 23:13:28,"Direct duplicate of #1231 

Master file to track wanted changes to `@import` #1094 
",Snugug,import
1306,2014-08-29 23:46:43,"Oh I missed the notification, thanks for the quick fix @nex3! `:D`
",UltCombo,nex3
1305,2014-07-06 13:41:11,"Using % symbol works in a -webkit- placeholder pseudo classe for @extend's use in it.
It failed in -moz- and -ms- versions, and reset previous -webkit- extends.

http://jsfiddle.net/5v9eH/1/ 

Is that an issue ?

I used Sass -v 3.3.3
",iManu,extend
1304,2014-07-04 13:24:05,"Hi

When I use the `append()` function to merge two space separated list with comma, it returns three sub-lists rather than two. But if I merge the two lists via `@for` loop, that works fine. Any idea please?

![screen shot 2014-07-04 at 14 14 00](https://cloud.githubusercontent.com/assets/1818679/3482220/8310c3e2-037d-11e4-85e5-54235b0cfd0b.png)
",P233,for
1304,2014-07-04 18:34:26,"Thank @lolmaus . I am creating a new Gird System and doing some test. A function will grab data from Sass map and create a comma separated list of multiple space separated lists, and then pass the list to Sass 3.3 `@each` directive to generate grids. That's why I was focusing on creating list. I just did some test that I might use a `@for` loop and the `nth()` function instead of `@each`. I'll keep working on it and let you know :)

@nex3 @chriseppstein It would be handy if Sass could support merge multiple lists into one nested list   :)
",P233,for
1304,2014-07-04 18:34:26,"Thank @lolmaus . I am creating a new Gird System and doing some test. A function will grab data from Sass map and create a comma separated list of multiple space separated lists, and then pass the list to Sass 3.3 `@each` directive to generate grids. That's why I was focusing on creating list. I just did some test that I might use a `@for` loop and the `nth()` function instead of `@each`. I'll keep working on it and let you know :)

@nex3 @chriseppstein It would be handy if Sass could support merge multiple lists into one nested list   :)
",P233,each
1304,2014-07-04 18:34:26,"Thank @lolmaus . I am creating a new Gird System and doing some test. A function will grab data from Sass map and create a comma separated list of multiple space separated lists, and then pass the list to Sass 3.3 `@each` directive to generate grids. That's why I was focusing on creating list. I just did some test that I might use a `@for` loop and the `nth()` function instead of `@each`. I'll keep working on it and let you know :)

@nex3 @chriseppstein It would be handy if Sass could support merge multiple lists into one nested list   :)
",P233,nex3
1304,2014-07-04 18:34:26,"Thank @lolmaus . I am creating a new Gird System and doing some test. A function will grab data from Sass map and create a comma separated list of multiple space separated lists, and then pass the list to Sass 3.3 `@each` directive to generate grids. That's why I was focusing on creating list. I just did some test that I might use a `@for` loop and the `nth()` function instead of `@each`. I'll keep working on it and let you know :)

@nex3 @chriseppstein It would be handy if Sass could support merge multiple lists into one nested list   :)
",P233,chriseppstein
1304,2014-07-04 20:46:38,"@P233, have a look at this example: http://sassmeister.com/gist/74c2bba1ac3744a236d2

For grids, you should check out [Singularity](https://github.com/Team-Sass/Singularity). It has this all figured out.

For advanced list manipulations, have a look at [SassyLists](https://github.com/Team-Sass/SassyLists/) from @HugoGiraudel.
",lolmaus,HugoGiraudel
1304,2014-07-05 17:43:50,"@lolmaus all my values are generated by function, and the list has to be created by `@for` loop, I am afraid that I can't use your `join-lists` function. 

I should explain the circumstance more clearly:
- A function will generate several space separated list


- the amount of sub-list is uncertain but can be known
- I need combine all sub-lists into one comme separated list, so I can pass it to a `@each` directive



But this is not going to work as you explained the `$list` will become a very deeply nested list.

---

Currently, I've found two workarounds:

**Wrokaround 1**



Create a flattened list, then



**Wrokaround 2**



Even the `append()` function only accepts _single_ value, but it works. And I also noticed that when using `append()` to combine lists, the very first value _must be empty_.

Here is another example, sorry I can't login sassmeister.com with any browsers today :(



I am much prefer the workaround 2, but I assume this is illgal.
",P233,for
1304,2014-07-05 17:43:50,"@lolmaus all my values are generated by function, and the list has to be created by `@for` loop, I am afraid that I can't use your `join-lists` function. 

I should explain the circumstance more clearly:
- A function will generate several space separated list


- the amount of sub-list is uncertain but can be known
- I need combine all sub-lists into one comme separated list, so I can pass it to a `@each` directive



But this is not going to work as you explained the `$list` will become a very deeply nested list.

---

Currently, I've found two workarounds:

**Wrokaround 1**



Create a flattened list, then



**Wrokaround 2**



Even the `append()` function only accepts _single_ value, but it works. And I also noticed that when using `append()` to combine lists, the very first value _must be empty_.

Here is another example, sorry I can't login sassmeister.com with any browsers today :(



I am much prefer the workaround 2, but I assume this is illgal.
",P233,each
1304,2014-07-31 09:15:51,"@lolmaus  @HugoGiraudel  I've finished the first version of my grid system. please have a look :)
https://github.com/P233/Rebar-Grid

As you can see in https://github.com/P233/Rebar-Grid/blob/master/rebar-grid/data/_container-list.scss#L37 , I need to combine multiple lists inside a `@for` loop. That why I am looking for a way to combine list.

@nex3 Thank you for your reply, the `append()` only accept singe value, it doesn't combine list unless I append the lists after an empty value. This example may explain my question  http://sassmeister.com/gist/efe05764ee61d0e76c03
",P233,for
1303,2014-07-02 15:58:17,"For this doc: https://github.com/sass/sass/blob/stable/doc-src/INDENTED_SYNTAX.md

As requested by @paazmaya.

See https://github.com/sass/sass-site/issues/83
",jina,paazmaya
1297,2014-06-24 13:04:52,"Hello,

With the help of SASS I've been able to create a fontface `@mixin`, that works very well. However, it breaks when I try to embedd fonts with the word `black` in them and using `--style compressed`.

E.g style nested:



E.g style compressed:



I think this should be regarded as a bug, since not all instances of using the word `black` should be automaticly translated into `#000`.

TYIA.
",kunambi,mixin
1296,2014-06-23 20:53:39,"In the example of `@media (min-width: 960px){}` the SCSS `output_style = :compressed` syntax doesn't eliminate the space between `min-width` and `960px`.

It may be by design to make people compress their own media queries, I'm not sure. At any rate, this is an _extremely_ minor issue. Please don't hate me. :)
",beaudesigns,media
1290,2014-08-21 18:18:18,"The problem is this:



There is no directive named `@-keyframes` it should be `@keyframes`.
",chriseppstein,keyframes
1289,2014-06-17 16:51:42,"I'm not sure if this is an easily implementable option, but I think it would be great if we could loop over the content directive. This could potentially bring in similar functionality to LESS and Stylus' property lookup functions, at least in regards to mixin creation.
### Syntax



The syntax would be similar to using an each loop to iterate over a map. It would treat CSS lists as Sass lists, of course. This could be used along side a feature similar to the one mentioned in issue #871 to create mixins that are capable of responding to properties passed to the content directive. For example, for various grid systems, you could override a float property via the content directive and the mixin could respond to that and not output redundant code.

Using the original content directive might not be the best idea, but similar names such as `@each-content`, `@in-content`, etc. would also work nicely.

If this is something that you think would be worth doing, point me in the right direction and I'd be more than happy to fork the code and try my hand at implementing it.
",ezekg,in-content
1289,2014-06-17 16:51:42,"I'm not sure if this is an easily implementable option, but I think it would be great if we could loop over the content directive. This could potentially bring in similar functionality to LESS and Stylus' property lookup functions, at least in regards to mixin creation.
### Syntax



The syntax would be similar to using an each loop to iterate over a map. It would treat CSS lists as Sass lists, of course. This could be used along side a feature similar to the one mentioned in issue #871 to create mixins that are capable of responding to properties passed to the content directive. For example, for various grid systems, you could override a float property via the content directive and the mixin could respond to that and not output redundant code.

Using the original content directive might not be the best idea, but similar names such as `@each-content`, `@in-content`, etc. would also work nicely.

If this is something that you think would be worth doing, point me in the right direction and I'd be more than happy to fork the code and try my hand at implementing it.
",ezekg,each-content
1289,2014-06-17 17:47:23,"How do you propose this will work in the case of using selectors in the `@content`?


",cimmanon,content
1289,2014-06-17 20:33:28,"@lolmaus I'll use the example of a grid system. Assuming the grid system has a global config file, which lets you define a float direction. Let's say we chose a float direction of left, but for a few areas on our project, we need the float direction to be right. It's not logical to have a `$float` argument for the mixin if it would only be used in edge cases, so we can define an exception using the directive that would allow this:



And then you wouldn't get redundant float declarations in your code if you chose to override it. It gives opportunity to create edge case exceptions without defining argument variables that are going to be virtually useless for the typical use case. Additionally, see the example below.

# 

@chriseppstein I agree, that's one of the reasons I created the issue. I'm currently using a similar system where I'm essentially using maps to accomplish this, but I feel like it is a hacky solution when we have a `@content` directive that has the ability to hold all these variables for us.



The former doesn't seem like it's a solution, but rather a workaround for something that should be a directive. I really hope that isn't too confusing.

Here's the idea in context,
https://gist.github.com/ezekg/ccf842e5ee74287f1868
",ezekg,content
1289,2014-06-17 20:36:14,"This is a feature we decided long ago not to support, and our reasoning then still holds true now.

At a high level, features like this treat the document structurally rather than semantically. What I mean by that is that they ignore how the styles will apply to HTML (the semantics), and instead focus just on how they exist in the document: what properties are contained within each rule block, what specific selectors are used for each rule, etc. (the structure).

In a more practical sense, in CSS writing `.foo {color: blue} .foo {font-weight: bold}` means the same thing as `.foo {color: blue; font-weight: bold}`. Providing a way to say ""get all the properties in the current block"" or even ""get all the properties for a given selector"" is bad because it violates this invariant. It also violates the relationships between selectors: the properties in `.foo .bar { ... }` should sometimes interact with those in `.bar { ... }`, and features like this are fundamentally unable to handle that complexity, because they work structurally.

This is the same reason [`@extend` works the way it does](https://github.com/sass/sass/issues/1284#issuecomment-46055417).

@chriseppstein I like your proposal better, because it captures a well-defined and explicitly-provided structure rather than looking up external structure in the problematic way I described above. A lot of thought would have to be put into the capturing syntax, though, as well as the SassScript representation of the captured structure.
",nex3,extend
1289,2014-06-17 21:03:14,"@nex3 I agree. That gist is something we can throw darts at if you're intested in pursuing this.

@lolmaus I don't want people to put styles into maps. That's _exactly_ what I'm trying to avoid. We can say ""don't do that"" but if people want to write powerful pure-sass implementations of non-trivial things, they end up _having_ to do that. Consider a RTL flipping feature. Sure you can make `$right` and `$left` variables and set them to the opposite value, but a proper implementation is property aware and transforms things like the border shorthand when 4 values are provide by swapping the 2nd and 4th values. Should people have to know to call `@include rtl-border(2px, 4px, 2px, 6px)`? to get things flipped correctly? What if they are using a library that doesn't include RTL support but writes a border property out. What if you just forget to call the RTL-based mixins one time because you're coding bleary eyed at 2am to hit a deadline tomorrow. There are features like this (vendor expansion is another one) where you mostly want an opt-out strategy instead of an opt-in strategy that mixins provide. For this reason `@include rtl { ... arbitrary sass stuff ... }` and `@include vendor-prefixed { ... arbitrary sass stuff ... }` make a lot more sense to the average programmer.

Furthermore, we know that there is demand for such a feature because this is essentially what https://github.com/reworkcss/rework is only they use JS instead of the writing this feature in the stylesheet syntax itself which severely limits the portability of stylesheets written on rework. Like LESS and the CSS syntax, I think this is a place where we can take Sass in a direction that is clear and with an API that is more flexible and has fewer downsides.
",chriseppstein,include
1284,2014-06-13 08:29:34,"Again and again I (I think not only I) bump on the need to include properties from other classes (like in LESS). Let's take example:



Because mixins' names can't be started with . or % it make sense to parse this names differently.. Can this feature be implemented? From my point of view it is quite logical if we can do @extend, then we can do @include.
Like @extend this feature should work with dynamically generated classes and placeholders.

_For heaven's sake don't offer solutions like ""you can do this...[your code], you can do that...[your code]""_
",timfayz,extend
1284,2014-06-13 08:29:34,"Again and again I (I think not only I) bump on the need to include properties from other classes (like in LESS). Let's take example:



Because mixins' names can't be started with . or % it make sense to parse this names differently.. Can this feature be implemented? From my point of view it is quite logical if we can do @extend, then we can do @include.
Like @extend this feature should work with dynamically generated classes and placeholders.

_For heaven's sake don't offer solutions like ""you can do this...[your code], you can do that...[your code]""_
",timfayz,include
1284,2014-06-13 20:17:43,"**tl;dr: Use `@extend`.**

What you're proposing is an ill-defined feature. First, it doesn't make sense to define this feature only for certain selector types; there's nothing special about class selectors or placeholders that makes this appropriate for them and not for, say, ids or element selectors. You'd need to make `@include` work for any selector (we'll ignore the syntactic ambiguity this causes with element selectors).

When you write `@include <selector>`, what does that mean? Does it mean ""include all properties that were defined in CSS rules whose selector is exactly equal to <selector>""? To do so goes against the grain of CSS; it treats selectors like opaque strings of text, rather than semantic entities describing sets of HTML elements. `@include .foo.bar` shouldn't do something different than `@include .bar.foo`. Moreover, `@include .foo` shouldn't just ignore the styles defined in `.parent .foo { ... }`.

So how do we make it work _with_ the semantics of CSS, rather than _against_ them? We need to find a way of generalizing what you're trying to express when you write `@include .shadow-out`. What you want is for the styles that apply to an element with `class=""shadow-out""` to apply to your textareas and inputs as well. In general, then, if you write `@include <selector>` you want all styles that apply to that selector to apply to the extending selector as well.

This is precisely the semantics of `@extend`. The implementation is different than a mixin include, but that shouldn't worry you; the styling works the same.
",nex3,extend
1284,2014-06-13 20:17:43,"**tl;dr: Use `@extend`.**

What you're proposing is an ill-defined feature. First, it doesn't make sense to define this feature only for certain selector types; there's nothing special about class selectors or placeholders that makes this appropriate for them and not for, say, ids or element selectors. You'd need to make `@include` work for any selector (we'll ignore the syntactic ambiguity this causes with element selectors).

When you write `@include <selector>`, what does that mean? Does it mean ""include all properties that were defined in CSS rules whose selector is exactly equal to <selector>""? To do so goes against the grain of CSS; it treats selectors like opaque strings of text, rather than semantic entities describing sets of HTML elements. `@include .foo.bar` shouldn't do something different than `@include .bar.foo`. Moreover, `@include .foo` shouldn't just ignore the styles defined in `.parent .foo { ... }`.

So how do we make it work _with_ the semantics of CSS, rather than _against_ them? We need to find a way of generalizing what you're trying to express when you write `@include .shadow-out`. What you want is for the styles that apply to an element with `class=""shadow-out""` to apply to your textareas and inputs as well. In general, then, if you write `@include <selector>` you want all styles that apply to that selector to apply to the extending selector as well.

This is precisely the semantics of `@extend`. The implementation is different than a mixin include, but that shouldn't worry you; the styling works the same.
",nex3,include
1283,2014-06-13 07:42:03,"From documentation (section @extend):
http://sass-lang.com/documentation/file.SASS_REFERENCE.html#extend

---



These produce, respectively:



---
",timfayz,extend
1278,2014-06-10 16:05:08,"@jina I just noticed that the sass logo is slightly cropped at the right and at the bottom on the GitHub avatar
",LaurentGoderre,jina
1277,2014-06-10 13:44:27,"Just upgraded from 3.3.0.rc.2 to 3.3.8 and unfortunately some of our styles don't compile anymore.

We have the problem with styles like:



I know that since final release 3.3.0 we can write styles without @at-root and just use & instead #{&}. Anyway after changes constructions like below don't compile.



Codepen demo: http://codepen.io/anon/pen/lJfHw
",hinok,at-root
1269,2014-06-05 22:26:53,"@nex3, I'd like to move the Sass repo to the Sass organization.

https://github.com/sass

Any objections?

https://help.github.com/articles/how-to-transfer-a-repository
",chriseppstein,nex3
1267,2014-06-04 04:17:02,"I recently came across an issue with importing assets from within nested/custom directories.

i have a custom path added to the load_path

`config.sass.load_paths << Rails.root.join('app', 'assets', 'stylesheets', 'foo')`

and when i try to import `foo.css.sass` with `@import foo`, i get an error about `File to import not found or unreadable: foo.`

if i rename it to just `foo.sass` it works...
",brewster1134,import
1267,2014-06-06 20:25:56,"Sass doesn't support terse imports for files with the `.css.sass` naming convention. Imported libraries are typically not intended to be compiled directly to CSS, so naming them that was is somewhat misleading.

You can solve this either by renaming your file or writing `@import ""foo.css.sass""` explicitly.
",nex3,import
1266,2014-06-03 20:47:05,"Just leave the `@media` part outside:



Demo: http://sassmeister.com/gist/151e9b70f402e11f768c
",lolmaus,media
1266,2014-06-04 07:37:18,"what about styles under "".no-font-face""? ""@media .no-font-face""?:)
",timfayz,media
1266,2014-06-04 08:13:09,"@kalopsia, i'm not sure that's valid CSS.

Should be something like this, i think:


",lolmaus,kalopsia
1266,2014-06-04 08:21:41,"""@media .no-font-face"" - was a joke. You absolutely can't understand me.. Let me give you example once again:


",timfayz,media
1266,2014-06-04 08:37:27,"@lolmaus: @kalopsia just wants the system to be so flexible, that the content can either be wrapped by a regular class, or by a `@media` tag.
",apfelbox,kalopsia
1266,2014-06-04 08:37:27,"@lolmaus: @kalopsia just wants the system to be so flexible, that the content can either be wrapped by a regular class, or by a `@media` tag.
",apfelbox,media
1266,2014-06-04 09:13:02,"@kalopsia And you had been failing both to explain the desired result ([XY problem](http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem)) and to understand that you're trying to mix two unrelated features.

For that to work, you should be a little more inventive:

http://sassmeister.com/gist/afe0506d0b6d0a41ad36

Not that i'd use that approach myself.

PS @kalopsia, you should use [StackOverflow](http://stackoverflow.com/questions/tagged/sass) for that sort of questions.
",lolmaus,kalopsia
1266,2014-06-04 10:47:04,"@apfelbox, thank you for support. I'm from Russia and my language knowledge is limited :)
@lolmaus thank you for examples, but you the last offered solution is identically to mine (and I have long used it as well as I hadn't asked you how to solve it, so it is not XY problem, but still thx).

From my point of view it will be useful store ""@media"" rule in the string and then escape it. Thats all!)
",timfayz,media
1266,2014-06-04 17:45:38,"@kalopsia Interpolation is not the same as `eval()` from JS, comrade. It probably _could_ work that way if Sass were simply to emit a line of CSS for each line of Sass.

But it way more sophisticated than that. Sass works with directives, not just strings. Directives are complex: media queries bubble up, list of selectors get extended, mixins and functions are redefined, etc.
",lolmaus,kalopsia
1266,2014-06-06 20:46:36,"This is indeed not supported, because the parsing rules for selector rules and for `@`-rules (`@media` in particular) differ substantially and need to be distinguished between before `#{}` is resolved. You can do this sort of switching using a mixin like so:


",nex3,media
1263,2014-06-01 06:14:34,"Hello,

This comes from a short discussion I had with @chriseppstein on Twitter.

I'd like to be able to use the compact output style without including comments.

uncompiled code:



compiled code:



At the time, there was a mentioned of more nuanced output options rather than a set of styles.

https://twitter.com/chriseppstein/status/468819519440297984

Cheers,
Pete
",peterwilsoncc,chriseppstein
1256,2014-06-05 08:43:36,"I was under the impression that map keys _were_ for strings, as maps allow strings without needing quotes - but I forgot this is Sass, which allows anything to be a string! That makes this very difficult to address. 
You're right that this isn't a problem with maps, but I think it _is_ a problem with compression:

Sass is very clever with it's optimization, [I learned recently](https://github.com/nex3/sass/issues/1253#issuecomment-43558436) that 

> Sass will only include a @charset declaration in the CSS output if there are any non-ASCII characters.

which is cool and all, but it's another example of unexpected behaviour.

Things like this make me want to use a normal CSS minifier instead, but I suppose that's the point of `:compressed` mode - to perform aggressive optimisations that normal minifiers can't do...

So, what about adding another output option? One that doesn't convert colour names to hex, and leaves the charset in just for the [principle of least surprise](http://en.wikipedia.org/wiki/Principle_of_least_astonishment); like a normal minifier would, in fact designed to act exactly like a normal minifier.
",Arcovion,charset
1256,2015-12-14 13:48:48,"This had me confused for ages. The fact that Sass maps can take any reference as keys makes sense of the notion that unquoted keys are interpolated. What is very surprising is that Sass takes it upon itself to parse color name references ‚Äî which, in the intended scenario, is simply raw CSS ‚Äî and compile them to hex values. To my mind this is the same kind of design mistake as hijacking the `@import` directive: a user writing plain valid CSS should not expect Sass to second-guess their intent and provide its own interpretation. The byte-shaving this might provide in certain circumstances is trivial, not at all worth this weird functional gotcha: the obfuscation of production code is needless, and moreover Sass has no business deciding how CSS colours are mapped & interpreted. At best, this 'feature' means Sass needs to commit to otherwise redundant updates in step with the CSS Colors module specification.

The difference here is that fixing this mistake won't negatively impact anybody, beyond perhaps adding several bytes to some people's compiled code.

Logging a warning is a good first step, but this should be on the road to deprecation. AFAICT no users have expressed anything other than surprise & frustration at this.
",barneycarroll,import
1253,2014-05-19 06:24:22,"Example:

main.scss:



compile to:



where is string ""@charset 'utf-8';"" ?

My setup: MacOSX 10.9.3 / Ruby 2.1.2 (Rbenv) / SASS 3.3.7.

Thank you!
",barchan,charset
1253,2014-05-19 09:04:22,"_UTF-8_ must be uppercase, your charset directive is invalid, see eg. https://developer.mozilla.org/en-US/docs/Web/CSS/@charset and https://www.iana.org/assignments/character-sets/character-sets.xhtml
",mprins,charset
1253,2014-05-19 09:32:36,"seems `@CHARSET 'UTF-8'` works but that's not valid since the directive should be lc...
",mprins,CHARSET
1253,2014-05-19 09:58:08,"looks like its not a problem, example: http://sassmeister.com/gist/9537678

if any html-character present in any *.scss file, even like comment, SASS automaticly adding '@charset ""UTF-8"";' in compiled .css file.
",barchan,charset
1253,2014-05-19 10:04:33,"@lolmaus the spec http://www.w3.org/TR/CSS2/syndata.html#charset says: 

>  @charset must be written literally, i.e., the 10 characters '@charset ""' (lowercase, no backslash escapes), followed by the encoding name, followed by '"";'.
",mprins,charset
1253,2014-05-19 10:10:23,"Thank you for correcting me, @mprins. I've looked into a more recent spec:
- http://www.w3.org/TR/css3-syntax/#determine-the-fallback-encoding
- http://www.w3.org/TR/css3-syntax/#charset-rule

and found that the `@charset` rule was regulated by the CSS2 spec to be parsed in binary form. O_o Thus, case sensitivity.
",lolmaus,charset
1253,2014-05-19 12:34:49,"@lolmaus actually, the spec doesn't exactly say, that it is case insensitive.

The `@charset""` is parsed binary, then encoding `XX*`, then `"";`.
The encoding `XX*` is interpreted as ASCII (doesn't say anything about case (in)sensitivity).

> Otherwise, check the byte stream. If the first 1024 bytes of the stream begin with the hex sequence
> 40 63 68 61 72 73 65 74 20 22 XX\* 22 3B
> where each XX byte is a value between 016 and 2116 inclusive or a value between 2316 and 7F16 inclusive, then get an encoding for the sequence of XX bytes, interpreted as ASCII. 

But: the spec itself uses lowercase, so...

> [...]
> If neither of these options are available, authors should begin the stylesheet with a UTF-8 BOM or the exact characters
> 
> @charset ""utf-8"";
",apfelbox,charset
1253,2014-05-19 21:10:14,"Sass will only include a `@charset` declaration in the CSS output if there are any non-ASCII characters. CSS is parsed as ASCII by default, so it's unnecessary if the stylesheet is pure ASCII.
",nex3,charset
1253,2014-05-20 19:33:41,"Okay, to be precise, it's parsed as an _ASCII-compatible_ encoding by default, but the result is the same: `@charset` is unnecessary in a pure-ASCII stylesheet.
",nex3,charset
1251,2014-05-19 21:38:02,"Why are you nesting this?

Edit: I see your explanation now. @apfelbox is right, you need to use @root with this.

@nex3 I think it's a bug that @font-face bubbles.
",chriseppstein,nex3
1251,2014-05-19 21:38:02,"Why are you nesting this?

Edit: I see your explanation now. @apfelbox is right, you need to use @root with this.

@nex3 I think it's a bug that @font-face bubbles.
",chriseppstein,root
1251,2014-05-19 21:38:02,"Why are you nesting this?

Edit: I see your explanation now. @apfelbox is right, you need to use @root with this.

@nex3 I think it's a bug that @font-face bubbles.
",chriseppstein,font-face
1251,2014-05-19 21:53:31,"First of all, it is a bug, so regardless of my use case, there is an issue to be fixed.

Secondly, the `@at-root` fixes things. Thanks, I didn't know about it.

As for my particular use case, yes: I can of course declare the font outside. In this particular case, I am using the Ionicons SASS package, which declares both classes (which need to be nested) and a `font-face` (which cannot). I prefer to rely on pristine thirdparty code, not fork it or copy it. I could import it piecemeal, but I think the best solution is to tell the Ionicons people to use `@at-root`. I'm going to do that.
",atombender,at-root
1251,2014-05-30 18:34:06,"@chriseppstein Handling this is an interesting question. It's an intentional feature that unknown directives are bubbled (b8f4bab008b196b2ed8028635beb932533caa72c), and currently we have no special logic for `@font-face` so it falls into this category.

I'm a little leery of adding this sort of special logic; it violates our general policy of encoding the semantics of specific CSS identifiers as little as possible. If we add support for top-level-only directives, we'll need to do so for all directives that we currently know are top-level-only, which in turn means that new directives that are top-level-only may violate user expectations. I'd kind of prefer to just leave the behavior as-is.
",nex3,font-face
1250,2014-05-15 11:00:06,"##### Issue

When providing a list with a single map (this list's purpose is to be extended with additional maps as a site grows) and iterating over the map's values, the key is output correctly, but its value is not output, and then the value of each key is output on the next iteration in place of the key, and again with no output for where the value was specified in the `@each` declaration. The output is essentially twice the length it should be, with values not output as specified in the loop.

This is resolved by either adding more maps to the list, or adding an empty list to the list.
##### Example

I generate subsets of icons based on their functionality. This is done by creating a map for each subset, placing these subsets in a list, and then looping through key value pairs in each subset in the list.



Expected:



Actual:


##### Resolution


",larrybotha,each
1247,2014-05-14 21:00:37,"I could see exposing this as a global `$-sass-version` variable. @chriseppstein?
",nex3,chriseppstein
1246,2014-05-13 00:45:23,"This leaves me with an empty `@vars` hash on the environment instance.

The engine has the correct scss set to the template var, and the tree var returns `(Sass::Tree::RootNode Sass::Tree::CommentNode Sass::Tree::CommentNode Sass::Tree::VariableNode Sass::Tree::CommentNode Sass::Tree::VariableNode)` which i will just have to assume is correct.
",brewster1134,vars
1243,2014-05-09 19:49:53,"If I had the decision to make over again from the beginning, I'd probably have it follow your expected semantics. At this point, though, there's a lot of Sass out there whose behavior this could potentially change in subtle and difficult-to-track-down ways. I don't know that the benefit is worth that level of backwards incompatibility.

That said, if we did decide this was important, we do have room for some breaking changes in 4.0. We could also warn about it earlier than that and even make `sass-convert` re-order peoples' source to preserve the old behavior. @chriseppstein, what do you think?
",nex3,chriseppstein
1241,2014-05-06 13:54:30,"Hi,

Am having trouble with what I suspect is an import statement with too long a path, possibly related to #1076.

I'm using Ext JS 4.2 with Sencha Cmd 4, which bundles a version of SASS with it.

During the build process it has to import lots of different sass content. The recommended approach with sass is to mimic the classes namespace, so that only sass for classes that are referenced is included in the final css. Hope that makes sense.

Anyway, the statement that is failing is:
@import '../../../../../apps/LongNameThatIveChangedButSameLength/sass/src/LongNameThatIveChangedButSameLength/model/data/Clients/Client';

This is from a temporary build directory deep within a workspace, and none of the names are really changeable, at least not without changing namespace and class names etc.

That import statement fails, where as the following succeeds:
@import '../../../../../apps/LongNameThatIveChangedButSameLength/sass/src/LongNameThatIveChangedButSameLength/view/LoginWindow';

I've tried with empty files even, and it's definitely the import statement itself, and not the file content.

Any chance the path length could be increased to something more robust, since this is currently a deal breaker for me.

Cheers,
Westy
",westy,import
1239,2014-05-04 14:16:26,"I have encountered a problem in the CSS output generated by Sass 3.3.7 (Maptastic Maple).

---
##### The problem

I have the following SCSS:



In this case, `%box` is an abstract representation of a floating element with some additional features. Which can only be extended by using `@at-root`.

The code is compiled to the following 'compressed' output:



It basically creates a media block for each of the generated elements while the for-loop is contained _inside_ the media query.

When the code is compiled without the `@at-root` block, all the elements are contained inside a single media query.
",redodo,at-root
1237,2014-05-02 14:50:14,"If sass follows CSS parsing, why does sass join the lines together? (@hcatlin's libsass doesn't)
",robocoder,hcatlin
1235,2014-04-28 19:59:30,"Basically, the default_options in configuration.rb are always used, regardless of rails environment.
1. railties.rb includes plugin.rb
2. plugin.rb includes plugin/generic.rb
3. plugin/generic.rb calls Sass::Plugin.options, which calls Sass::Plugin::configuration.@default_options, which sets :always_check to true.
4. plugin/rails.rb tries to set default_options based on rails_env, but it's too late.  @default_options was already set.
",edlebert,default
1231,2014-04-25 18:28:06,"In the case that I want to use a variable to customize import paths easily:



Should ideally work, but I get the following error with compass:



Is there a workaround to this because it is really convenient to use variables to customize image urls and it would be great if it could be used for @import as well.
",planemad,import
1224,2014-04-21 21:18:54,"This bug has been found by @cahnory. I'm just reporting it here.

It looks like there are some rounding errors with simple calculations. Please consider the following example:



Meanwhile, this should return `true`. `0.10 + 0.02 == 0.12`. That being said, JavaScript produces the same error. I believe this has to do with the fact that all numbers are floats or something?

A fix would be to do:



But that's pretty harsh.

Relevant test case: http://sassmeister.com/gist/11142740.
",HugoGiraudel,cahnory
1220,2014-04-18 15:24:06,"@nex3 or @chriseppstein can you please give it a look? This is very important feature for the company I work for. This feature enables us to do some A/B testing in sensible manner.
",emphaticsunshine,nex3
1220,2014-04-18 15:24:06,"@nex3 or @chriseppstein can you please give it a look? This is very important feature for the company I work for. This feature enables us to do some A/B testing in sensible manner.
",emphaticsunshine,chriseppstein
1220,2014-04-18 23:09:16,"@drewwells In that ticket, @nex3 explained that you can define a mixin that implements the branching logic that you need.

#739 is a generic proposal to allow interpolation within and conditionals around @import statements.
",chriseppstein,import
1220,2014-04-18 23:44:57,"You're saying we should put our entire codebase in mixins?  If I told my
team that is the solution offered by SASS, they would throw me in the mad
house.

On Fri, Apr 18, 2014 at 6:09 PM, Chris Eppstein notifications@github.comwrote:

> @drewwells https://github.com/drewwells In that ticket, @nex3https://github.com/nex3explained that you can define a mixin that implements the branching logic
> that you need.
> 
> #739 https://github.com/nex3/sass/issues/739 is a generic proposal to
> allow interpolation within and conditionals around @importhttps://github.com/importstatements.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/1220#issuecomment-40852242
> .
",drewwells,importhttps
1220,2014-04-18 23:44:57,"You're saying we should put our entire codebase in mixins?  If I told my
team that is the solution offered by SASS, they would throw me in the mad
house.

On Fri, Apr 18, 2014 at 6:09 PM, Chris Eppstein notifications@github.comwrote:

> @drewwells https://github.com/drewwells In that ticket, @nex3https://github.com/nex3explained that you can define a mixin that implements the branching logic
> that you need.
> 
> #739 https://github.com/nex3/sass/issues/739 is a generic proposal to
> allow interpolation within and conditionals around @importhttps://github.com/importstatements.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/1220#issuecomment-40852242
> .
",drewwells,nex3https
1218,2014-04-17 05:00:03,"Modern web development is much more than translating design to code.  We must consider how different pages inherit code, when to override styles vs fork code, managing a/b tests and managing file size and build time considerations.

In doing so, we have hit a major hurdle with SASS.  Something I'm finding easily supported by [less](http://lesscss.org/features/#variables-feature-import-statements).

In order to continue using SASS, our developers find themselves copying large portions to dance around the inflexibility in the import/build philosophy of SASS.  Here's an example.

Home Page is made of many sass partials.

Home
- Base
  - sprite
  - font
  - layout
- Modules
  - Section
  - Widget
- Header
  - Search bar
  - Header links

Let's say I run a test that changes the styling of the Search bar.  In an ideal world my Header partial would look something like this:



In the test, I would set $search_bar to `""_new_search_bar""`.  Due to the static importing this is not possible.  I must fork `Home` make a copy of `Header` just to change the one line `@import ""_new_search_bar""`.

The process of copying and pasting SASS is proving unsustainable as an organization.  We require more flexibility. #1094 Paths is a nice step forward, but inevitably we need more fine grained control of what partials are loaded in a target.

Earlier today, we brainstormed the ideal solution for this.  It hinges on dynamic imports.

control.scss



_paths.scss



_header.scss



test.scss



_test_overrides.scss



By making every import a variable, the developer can pick and choose what files to replace and what styles to override.  This is something we are deeply interested in and would like to know how you plan to facilitate this use case.
",drewwells,import
1213,2014-04-12 01:10:01,"What is recommend is, while you're choosing the best components, namespace them yourself into what you think is usable via `@extend`
",Snugug,extend
1213,2014-04-12 01:29:27,"@nex3 Enabling mix-and-match frameworks is a core use case for sass. Every framework that generates selectors could build selector style generation into their capabilities but that's a lot of work and it's unlikely that any framework would do this given the readability impact to their code.

@snugug That would be fine if the framework exposes a placeholder API, but this use case is to support frameworks that are generating css selectors. Extend is not a good way to accomplish this.
",chriseppstein,snugug
1213,2014-04-12 02:05:26,"Yeah, these libs aren't built with placeholder selectors. You could argue that they should be, but I'm not so sure since you do end up wanting to use most of their classes and it would make interacting with the libraries much more complex.

On Sat, Apr 12, 2014 at 11:29 AM, Chris Eppstein notifications@github.com
wrote:

> @nex3 Enabling mix-and-match frameworks is a core use case for sass. Every framework that generates selectors could build selector style generation into their capabilities but that's a lot of work and it's unlikely that any framework would do this given the readability impact to their code.
> 
> ## @snugug That would be fine if the framework exposes a placeholder API, but this use case is to support frameworks that are generating css selectors. Extend is not a good way to accomplish this.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/1213#issuecomment-40268300
",stubbornella,snugug
1213,2014-04-12 02:23:13,"@chriseppstein I'd argue that the core ask is to be able to normalize class names across multiple frameworks in a controlled way. Assuming an individual framework doesn't share the exact same class name (and said class name doesn't do something different across multiple frameworks) that `@extend` would work for that. If it doesn't fit that case, you'll have a problem regardless of if Sass did it automatically or not. Ideal, no, but a totally workable solution.
",Snugug,extend
1213,2014-04-12 08:54:23,"@snugug you're mistaken. Extend is not suitable for this use unless they are using placeholders. Consider the selector `.a_b .c_d` if you want to extend this to use dashes `.a-b { @extend .a_b; } .c-d {@extend .c_d; }` would produce `.a-b .c-d`, but it would also produce three other selectors that are not desired. 
",chriseppstein,extend
1213,2014-04-12 08:54:23,"@snugug you're mistaken. Extend is not suitable for this use unless they are using placeholders. Consider the selector `.a_b .c_d` if you want to extend this to use dashes `.a-b { @extend .a_b; } .c-d {@extend .c_d; }` would produce `.a-b .c-d`, but it would also produce three other selectors that are not desired. 
",chriseppstein,snugug
1213,2014-04-12 22:43:25,"@snugug and then one day the library makes a nondescript change and it is true. Its clear that extend doesn't solve the generalized use case. Even if what you say is true, the stylesheet now has two concrete selectors instead of one for each original class and the HTML could use either convention. 
",chriseppstein,snugug
1213,2014-04-14 23:07:03,"@stubbornella Hyphen-neutrality in variables and mixins is less about a policy of being aesthetically neutral and more about historical backwards-compatibility with stylesheets that were written before we allowed hyphens in Sass identifiers.

@chriseppstein We can support this explicitly by supporting the ability to `@use` a stylesheet in a way that makes its selectors visible for extension but not emitted directly to the stylesheet. That's a feature I'd like to support anyway, and it supports arbitrary remappings in addition to the specific ones requested here.

I don't like how implicit this is; I don't like command-line flags modifying the behavior of stylesheets; I don't like plain CSS having different semantics than it would in the browser; and I don't like building in knowledge of naming styles to Sass. There are a lot of things going against this change, and I don't see much reason not to just handle it externally or explicitly.
",nex3,use
1211,2014-04-08 15:22:39,"This fixes #1210, wherein the freezing of `true` causes strange side
effects in other gems. It also separates the `value.freeze` call from
the assignment `@value = value`, to emphasize that `value.freeze` is a
side effect that mutates the value, not a function that returns a frozen
copy of the value.
",jcoglan,value
1209,2014-04-11 19:52:30,"This is a little weird, but it's expected. The selector unification algorithm `@extend` uses internally is independent of the location of the selector being extended, so the output can end up in a different order.
",nex3,extend
1205,2014-04-05 20:40:02,"~~Didn't mean to post this without any content. I was gathering together all of the code to help explain the issue correctly.~~ I've ran into a little problem, that looks as if it is a bug (?) because I am almost positive this very same situation used to work in an earlier `--pre` version of Sass.

Anyways, I am attempting to interpolate the `&` selector to keep a map of instances of a mixin, and have run into issues with doing just that. I did find a few issues that are related to this (though I did not keep track of the issue numbers), but upon reading them it seems like it had been implemented at one time, at least when looking at this gist, http://sassmeister.com/gist/7464997 -- if you recompile the Sass, it then breaks.

Here is the basic code, and a SassMeister gist of what I am attempting to accomplish.



See the working code,
http://sassmeister.com/gist/9998080

Also, or a similar note... are there any future plans for allowing interpolation of the `@content` directive? It would be again, very helpful, even if it would simply output a stringified version of the content; allowing you then to loop over each item in the string and slice it accordingly, and store the values in a map. It would be helpful for doing things such as (which is just a crude example, not an actual use case), http://sassmeister.com/gist/9981683 -- and other use cases such as what I've ran into above with checking if a selector already has a style applied. Thanks guys!
",ezekg,content
1202,2014-04-04 23:16:35,"The issue is that `@import` always creates a new copy of the stylesheet you're importing, so there are two copies of the selectors you're `@extend`ing. I'm closing this as a duplicate of #156.
",nex3,extend
1202,2014-04-04 23:16:35,"The issue is that `@import` always creates a new copy of the stylesheet you're importing, so there are two copies of the selectors you're `@extend`ing. I'm closing this as a duplicate of #156.
",nex3,import
1200,2014-04-03 05:37:47,"Hello!

Looks like Sass isn't including the &selectors (parent selectors) of a class that is `@extend`-ed onto the `@extend`-ing class.

**Example 1**
Here is an example with .selectors (class selectors).



Sass 3.3.4 (Maptastic Maple) produces the following:



Only the `.grid-row` selector gets the &selector styles, while the `.settings-row`, `.score-row`, and `.bar-chart-row` selectors are all missing the &selector styles.

I would expect:



This way all styles within the `.grid-row` are applied to the `@extend`-ing classes.

**Example 2**
This even gets worse when using the %selector (placeholder selector), as the final CSS still contains the %selector.

Here is an example:



Which produces the following:



**Possible Solution**
Perhaps you need to run the `@extend` logic before the &selector logic is run?

In the second example if the `@extend` logic were run first, it would take an intermediary form like this:



This intermediary form then compiles correctly.

Please let me know if you have any questions!

Thanks,
Pete
",ptlu,extend
1196,2014-03-29 20:21:45,"I've been digging through an issue that affects users of [Middleman](https://github.com/middleman/middleman) when using Sass 3.3. This problem was not present in the Sass 3.2 line.

The symptom is a message like this:



The cause is that the `Sass::Source::Range` class contains a reference to a `importer`, and `Sass::CacheStores::Base#store` calls `Marshal.dump` on a tree of nodes that includes these `Sass::Source::Range` instances. We use [`sprockets-sass`](https://github.com/petebrowne/sprockets-sass), and [its importer implementation](https://github.com/petebrowne/sprockets-sass/blob/master/lib/sprockets/sass/importer.rb) keeps a reference to the Sprockets context, which is the anonymous class referenced in the error message. I suspect this may affect `sass-rails` as well, since [their importer](https://github.com/rails/sass-rails/blob/master/lib/sass/rails/importer.rb) also has a reference to the Sprockets context.

This seems very similar to #147, and the solution there was to avoid caching the options hash that could contain the Sprockets context or other uninteresting things - hopefully something similar could be done here. I'd be happy to help if somebody would be able to give some guidance on the correct approach to solving the problem.

/cc @tdreyno
",bhollis,tdreyno
1194,2014-03-28 16:35:13,"In https://github.com/nex3/sass/issues/1193, I mentioned why it would be a great idea to allow function or mixing definitions within control directives.

An alternative solution would be to allow `@import` statements within control directives.  This would also solve https://github.com/nex3/sass/issues/739 .

This would allow one to do the following :



It would also allow one to do the following :



And that's just one of the many ways to use this technique. It could also be used to make code more modular.

For example, consider the following :



Finally, it could be used to load partials only if a certain partial is found in the filesystem. As such, it would be an alternative implementation for https://github.com/nex3/sass/issues/779 .


",jslegers,import
1194,2015-10-09 12:51:55,"@nex3 What was the solution for @import directives are not allowed inside mixins and functions? 
",jgacuca567,import
1193,2014-03-28 16:32:51,"Javascript allows me to do the following :



PHP allows me to do the following :



While this technique is typically used for writing polyfills, it can be used in other contexts as well. For example, it can also be useful to demonstrate features that don't exist in a language yet but may be added in the future to the language or a popular library/framework for that language.

The beauty of this technique is that it allows one to detect whether a feature exists and always use the default implementation when it already exists.

In Sass, I wanted to do do the following :



This would allow me to define a string replacement function in Sass, named `str-replace`. In case any function defined as `@function str-replace($string, $old, $new)` already exists (eg. in a future version of Sass, Compass or Bourbon), it would automaticly skip my definition and not generate any errors.
",jslegers,function
1188,2014-03-25 07:35:11,"This code below fails with: `Syntax error: Invalid CSS after "".foo &,"": expected ""{"", was ""@at-root .bar""`



But this works:


",tillkruss,at-root
1188,2014-03-25 13:26:01,"I believe that for the [inline syntax](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#at-root) to work you would have to write it like this:



or



The double `@at-root` is a no go.
",xiwcx,at-root
1188,2014-03-25 21:43:09,"@xiwcx is right. `@at-root` isn't part of a selector, it's a directive that's followed by a selector.
",nex3,at-root
1187,2014-03-25 06:36:21,"Why aren't you using `@if`?
",lolmaus,if
1187,2014-03-25 11:32:53,"This is different :)
Because more important part is content above of @only



This should be a part of all.css and should't be in ie.css

So with @only you could avoid this necessary @if in each selectors when you don't have IE fixes.



Main point is to have something which will give possibility to split one selector between files.
",meefox,if
1187,2014-03-25 11:32:53,"This is different :)
Because more important part is content above of @only



This should be a part of all.css and should't be in ie.css

So with @only you could avoid this necessary @if in each selectors when you don't have IE fixes.



Main point is to have something which will give possibility to split one selector between files.
",meefox,only
1187,2014-03-25 21:30:50,"`@if` and `@else` are sufficient for this use case.
",nex3,if
1187,2014-03-25 21:30:50,"`@if` and `@else` are sufficient for this use case.
",nex3,else
1186,2014-03-23 14:36:02,"Currently, Sass will use whatever version of a mixin was last defined, so if a framework comes with a mixin named Clearfix and after you've imported that you define a mixin named Clearfix, yours will be used.

> On Mar 23, 2014, at 10:33 AM, Eli Collins notifications@github.com wrote:
> 
> Feature:
> 
> It would be nice to be able to use the !default modifier with mixins, much like with variable assignment. For example:
> 
> @mixin foo() !default 
> {
> }
> The main place I can think of that would be a great use-case is frameworks like Foundation. If all of Foundation's mixins were defined with !default, then the application-specific settings.scss file could override not just variables, but mixins as well, making it a lot easier to customize the output of such frameworks. As it stands now, you can tweak the variables, but mixins are either ""accept them as they are or don't use them"".
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,mixin
1186,2014-03-23 14:40:54,"I understand.

While the following isn't a solution to that problem, I encourage you to file an issue with your framework of choice having them require user input (as opposed to an @import) to kick off things being output to your stylesheet. It sound like a framework architecture issue.

> On Mar 23, 2014, at 10:38 AM, Eli Collins notifications@github.com wrote:
> 
> That's the inverse of what I'm envisioning. In a framework like Foundation, the logic flows as follows: application controlled settings.scss is loaded, defining some variables. Foundation is then imported, which defaults some default values, defines some mixins, and then runs those mixins. You don't have the opportunity to redefine the mixins before they are executed.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,import
1186,2014-03-28 16:25:31,"It's true that the overwrite-based approach has limitations.

Imagine you have a file `_framework.scss` and it imports `framework/_mixins.scss`. What you'd like to be able to do is override some mixin defined in `framework/_mixins.scss` and have it be used instead. But because Sass imports the library it always resets the mixin definitions -- there's no way to get in between the import statement and the output of the `_framework.scss` file.

However, this is a problem created by the import strategy, not by how mixins are defined and overridden. If a file was only imported once, you would be able to import the framework mixins, override them, and then import the main `framework` file. That the framework imported the mixins again would be a no-op and your definition would be used. The framework itself did not have to participate in the overriding scheme.

IMO, this is a capability that you will get for free when sass introduces `@use` and until then you can include http://rubygems.org/gems/compass-import-once into your project and get this behavior now.

Many languages have guarded variable assignment (that is the technical term for `!default`). However, very few languages have conditional method declaration. Instead the convention of programming languages is to provide an override mechanism for methods and/or a generic method invocation abstraction. I don't see a good reason for sass to buck the trend here -- however I do think Sass needs to implement what every other language does for dependency management: only import dependencies once.
",chriseppstein,use
1186,2014-03-28 19:09:14,"I disagree about 'very few languages have conditional method declaration'.  I think the need is quite common in languages where class inheritance isn't commonly used or available. For example, I've seen C and javascript code jump go to great (but achievable) lengths to get conditional method declaration. 

But my main issue with the `@use` solution is connected to my main motivation for this feature request... which so that I could override a mixin with the Foundation framework. Unfortunately Foundation has the pattern of single-file `foundation/components/_<component name>.scss` which sets up default vars, sets up mixins, and generates output for a particular subject, all in one file. 

It seemed a rather sane layout to me, but are you saying that's not how sass should be used, and that the proper way to get this to work would be to convince Foundation to split every components file into `foundation/components/<component>/_defaults_and_mixins.scss` and `foundation/components/<component>/_output.scss`? If so, I'm not looking forward to convincing their devs to do all that work just so a mixin or two can be overridden, whereas I figured asking them to add `!default` after all their mixins would be a relatively painless.  

Ah well, I guess it's settled in any case :(
",eli-collins,use
1183,2014-03-22 10:47:03,"Sorry for the mistakes I've made - I'm not Englishman.
I wrote a big amount of code at the top of 3.2 version and `@while` directive the most frequently used. After 3.3 release I'm faced with some confusion moments. For example the code below:



thrown the warning: `Assigning to global variable ""$i"" by default is deprecated.` I've read one of the latest post about variable scope in 3.3. Is it mean that now the code above should be the following form:



If so why it is not documented yet?
",timfayz,while
1183,2014-03-28 15:59:12,"@kalopsia what exactly do you think should be documented differently?
",chriseppstein,kalopsia
1179,2014-03-19 06:19:36,"In Ruby, the nil singleton object is not frozen. Freezing it breaks some other gems. When `Sass::Script::Value::Null` calls `new(nil)`, the Base class ends up freezing nil.



Conveniently, the `unless` syntax leaves `@value` as good ol' nil, so there's no need for a ternary. :honeybee: 

Tests pass.
",BMorearty,value
1178,2014-03-18 18:58:27,"Currently, the suggested and only api to extend Sass script functions are to monkey patch the `Sass::Script::Functions` module.

This can often lead to some plugin functions conflicting with others. Multiple `Sass::Engine`s maybe running in the same Ruby environments with different purposes. Its common to use Sass just as a css minifer since it does a good job. In this use case, you might not want any other functions leaking into the environment.

The idea is that you could pass in a module thats only extended on the `Engine`'s environment rather than globally.



I'm not attached to the api or option name. Just setting up a straw man. 

cc @nex3 @rafaelfranca
",josh,nex3
1178,2014-03-18 18:58:27,"Currently, the suggested and only api to extend Sass script functions are to monkey patch the `Sass::Script::Functions` module.

This can often lead to some plugin functions conflicting with others. Multiple `Sass::Engine`s maybe running in the same Ruby environments with different purposes. Its common to use Sass just as a css minifer since it does a good job. In this use case, you might not want any other functions leaking into the environment.

The idea is that you could pass in a module thats only extended on the `Engine`'s environment rather than globally.



I'm not attached to the api or option name. Just setting up a straw man. 

cc @nex3 @rafaelfranca
",josh,rafaelfranca
1175,2014-03-17 17:32:37,"Fixed by d4c5fff0160a78b66d78f10d7e60a92fc6a16d49.

I need to release a new 3.2 stable with this fix. @nex3 Please advise on how we can release new stable releases based on the 3.2 codebase.

I have branched off of the 3.2.15 tag: https://github.com/nex3/sass/compare/sass_3_2

We also need to roll this fix into the stable and master branches.
",chriseppstein,nex3
1174,2014-03-17 15:07:32,"There appears to be a conflict when wrapping an `@font-face` declaration inside of an `@at-root` declaration when it is already at the root of the document. Sass throws the following syntax error:



A simple code example that will cause this error:



Moving that `@font-face` out of `@at-root` is OK. This is not constrained to `@font-face` either, `@viewport` (or really any `@directive` that can take properties directly) seems to fail with that error if wrapped inside `@at-root`.

Interestingly enough, simply moving the `@at-root` inside of a selector will solve this and produce the required result, although is insanely hackey. The following works fine:


",Snugug,directive
1174,2014-03-17 15:07:32,"There appears to be a conflict when wrapping an `@font-face` declaration inside of an `@at-root` declaration when it is already at the root of the document. Sass throws the following syntax error:



A simple code example that will cause this error:



Moving that `@font-face` out of `@at-root` is OK. This is not constrained to `@font-face` either, `@viewport` (or really any `@directive` that can take properties directly) seems to fail with that error if wrapped inside `@at-root`.

Interestingly enough, simply moving the `@at-root` inside of a selector will solve this and produce the required result, although is insanely hackey. The following works fine:


",Snugug,viewport
1174,2014-03-17 15:07:32,"There appears to be a conflict when wrapping an `@font-face` declaration inside of an `@at-root` declaration when it is already at the root of the document. Sass throws the following syntax error:



A simple code example that will cause this error:



Moving that `@font-face` out of `@at-root` is OK. This is not constrained to `@font-face` either, `@viewport` (or really any `@directive` that can take properties directly) seems to fail with that error if wrapped inside `@at-root`.

Interestingly enough, simply moving the `@at-root` inside of a selector will solve this and produce the required result, although is insanely hackey. The following works fine:


",Snugug,at-root
1174,2014-03-17 15:07:32,"There appears to be a conflict when wrapping an `@font-face` declaration inside of an `@at-root` declaration when it is already at the root of the document. Sass throws the following syntax error:



A simple code example that will cause this error:



Moving that `@font-face` out of `@at-root` is OK. This is not constrained to `@font-face` either, `@viewport` (or really any `@directive` that can take properties directly) seems to fail with that error if wrapped inside `@at-root`.

Interestingly enough, simply moving the `@at-root` inside of a selector will solve this and produce the required result, although is insanely hackey. The following works fine:


",Snugug,font-face
1172,2014-03-14 10:31:06,"When using `@extend` right in (not deeper) referencing parent selector (`&`) and placeholder selector (`%`) is defined in a same level, then it causes bad output.

Example:



Compiles to:



I should be just (am I wrong?):


",seyd,extend
1170,2014-03-13 21:49:37,"What version of Sass are you using? Using Sass 3.3.x and Sass 3.2.x, this compiles just fine and adds the appropriate `@charset ""UTF-8"";`. Libsass fails, but gracefully. Check out [this SassMeister](http://sassmeister.com/gist/9537678) that shows it rocking fine (recommend w/Chrome and the Chromoji extension)
",Snugug,charset
1170,2014-03-13 22:00:08,"Sass doesn't know what encoding your file is using. You need to either set your computer's default encoding to UTF-8 (the specifics of this depend on your operating system), or include `@encoding ""UTF-8"";` at the top of your file.
",nex3,encoding
1170,2014-03-13 22:05:59,"Adding `@charset ""UTF-8"";` worked; I had put that in my `_base.scss` and thought it would import into `screen.scss` for some reason.

Thanks!
",dunn,charset
1169,2014-03-13 10:34:58,"This patch indents `@param` tags that are associated with an `@overload` tag like suggested here (and already applied in other parts of the code): http://rubydoc.info/gems/yard/file/docs/Tags.md#overload

It further fixes some instances where the YARD docs are broken: http://rubydoc.info/gems/sass/3.3.2/Sass/Script/Functions#change_color-instance_method
(look below ""examples"" where the overload signature continues unintentionally)
",rrrene,overload
1169,2014-03-13 10:34:58,"This patch indents `@param` tags that are associated with an `@overload` tag like suggested here (and already applied in other parts of the code): http://rubydoc.info/gems/yard/file/docs/Tags.md#overload

It further fixes some instances where the YARD docs are broken: http://rubydoc.info/gems/sass/3.3.2/Sass/Script/Functions#change_color-instance_method
(look below ""examples"" where the overload signature continues unintentionally)
",rrrene,param
1167,2014-03-12 21:02:12,"Ah, you are right. [Inch](http://trivelop.de/inch) is not recognizing the `@overload` tag correctly. I have to work on that.

Besides this unfortunate bad first impression: What do you think of my little project to raise awareness for inline docs? And would you be willing to re-evalutate a future version of this, when the project is more mature? 
",rrrene,overload
1155,2014-03-09 14:40:11,"Having recently started to need to build config files myself, I'm with @ericam here. Visible > Hidden, Human Readable > Machine Readable. I've recently found that users really like `.yml` files; they're easy to read, easy to extend, and super human readable. We could have something like a `sass.yml` file available at the file root like `config.rb` or Compass, and then other systems (including Compass) could extend `sass.yml` to add their options. Something like the following:



Then, Compass could expand upon the `directories` property for its directories and create a `compass` option for its options (like `environment`), or create other top-level properties like `dependencies`.
",Snugug,ericam
1143,2014-02-28 19:13:23,"@chriseppstein, do you think this is general-purpose enough to warrant inclusion in the core?
",nex3,chriseppstein
1143,2014-02-28 19:18:52,"@nex3 @chriseppstein I can tell you that we've needed to [create our own](https://github.com/Team-Sass/Singularity/blob/1.x.x/stylesheets/singularitygs/helpers/_directions.scss) in Singularity for the same reason. I'd love to see this in Core, especially if it includes `ltr`/`rtl`
",Snugug,chriseppstein
1142,2014-02-28 14:56:03,"# @Switch Function

Hello,
I searched and saw that there is no @switch function, it's sad and i think it's would be very helpful.

*Sorry About My English
",yotamN,switch
1142,2014-02-28 14:56:03,"# @Switch Function

Hello,
I searched and saw that there is no @switch function, it's sad and i think it's would be very helpful.

*Sorry About My English
",yotamN,Switch
1142,2014-02-28 19:10:09,"It's easy enough to do this with `@if`. I don't think it's worth adding extra syntax.
",nex3,if
1141,2014-02-27 21:33:26,"The `@content` directive was introduced in Sass 3.2.  So no, it won't work in the version of Sass you're using.
",cimmanon,content
1138,2014-02-27 14:15:37,"I find that I'm using more and more @includes in my stylesheets which is obviously a great thing, however it feels like a lot of visual noise is added by `@include`, `@extend` etc.

I think it would be great for Sass to support alternative shortened versions of these keywords, for example:


",Undistraction,includes
1138,2014-02-27 14:15:37,"I find that I'm using more and more @includes in my stylesheets which is obviously a great thing, however it feels like a lot of visual noise is added by `@include`, `@extend` etc.

I think it would be great for Sass to support alternative shortened versions of these keywords, for example:


",Undistraction,extend
1138,2014-02-27 14:15:37,"I find that I'm using more and more @includes in my stylesheets which is obviously a great thing, however it feels like a lot of visual noise is added by `@include`, `@extend` etc.

I think it would be great for Sass to support alternative shortened versions of these keywords, for example:


",Undistraction,include
1138,2014-02-27 14:38:40,"The indented `.sass` syntax already has `=` for `@mixin` and `+` for `@include`.

I believe that other shorthand directives should follow the same pattern.

We need:
- `@function`;
- `@extend`;
- `@import`.

I don't think that @nex3 and @chriseppstein will accept this because it would make indented Sass kinda cryptic. On the other hand, i use `=` and `+` all the time and it's helping a lot, so...
",lolmaus,extend
1138,2014-02-27 14:38:40,"The indented `.sass` syntax already has `=` for `@mixin` and `+` for `@include`.

I believe that other shorthand directives should follow the same pattern.

We need:
- `@function`;
- `@extend`;
- `@import`.

I don't think that @nex3 and @chriseppstein will accept this because it would make indented Sass kinda cryptic. On the other hand, i use `=` and `+` all the time and it's helping a lot, so...
",lolmaus,nex3
1138,2014-02-27 14:38:40,"The indented `.sass` syntax already has `=` for `@mixin` and `+` for `@include`.

I believe that other shorthand directives should follow the same pattern.

We need:
- `@function`;
- `@extend`;
- `@import`.

I don't think that @nex3 and @chriseppstein will accept this because it would make indented Sass kinda cryptic. On the other hand, i use `=` and `+` all the time and it's helping a lot, so...
",lolmaus,chriseppstein
1138,2014-02-27 14:38:40,"The indented `.sass` syntax already has `=` for `@mixin` and `+` for `@include`.

I believe that other shorthand directives should follow the same pattern.

We need:
- `@function`;
- `@extend`;
- `@import`.

I don't think that @nex3 and @chriseppstein will accept this because it would make indented Sass kinda cryptic. On the other hand, i use `=` and `+` all the time and it's helping a lot, so...
",lolmaus,import
1138,2014-02-27 14:38:40,"The indented `.sass` syntax already has `=` for `@mixin` and `+` for `@include`.

I believe that other shorthand directives should follow the same pattern.

We need:
- `@function`;
- `@extend`;
- `@import`.

I don't think that @nex3 and @chriseppstein will accept this because it would make indented Sass kinda cryptic. On the other hand, i use `=` and `+` all the time and it's helping a lot, so...
",lolmaus,include
1138,2014-02-27 14:38:40,"The indented `.sass` syntax already has `=` for `@mixin` and `+` for `@include`.

I believe that other shorthand directives should follow the same pattern.

We need:
- `@function`;
- `@extend`;
- `@import`.

I don't think that @nex3 and @chriseppstein will accept this because it would make indented Sass kinda cryptic. On the other hand, i use `=` and `+` all the time and it's helping a lot, so...
",lolmaus,function
1138,2014-02-27 14:38:40,"The indented `.sass` syntax already has `=` for `@mixin` and `+` for `@include`.

I believe that other shorthand directives should follow the same pattern.

We need:
- `@function`;
- `@extend`;
- `@import`.

I don't think that @nex3 and @chriseppstein will accept this because it would make indented Sass kinda cryptic. On the other hand, i use `=` and `+` all the time and it's helping a lot, so...
",lolmaus,mixin
1138,2014-05-31 08:50:18,"+1 to shorten `@include` into `@in`! Word _include_ is very long(
",timfayz,in
1138,2014-05-31 08:50:18,"+1 to shorten `@include` into `@in`! Word _include_ is very long(
",timfayz,include
1138,2014-05-31 10:08:59,"@arcovion I'm not insist..may be you are right. The founders know better what to do)
",timfayz,arcovion
1138,2014-07-21 03:20:30,"+1 to shorten `@include` to `@in` as well.

I'm also in favor of `@fn`, `@im`, `@mx`, `@ea`, and `@ex`

They could be added as shorthand alternates rather than changing the existing syntax.
",whaaaley,ex
1138,2014-07-21 03:20:30,"+1 to shorten `@include` to `@in` as well.

I'm also in favor of `@fn`, `@im`, `@mx`, `@ea`, and `@ex`

They could be added as shorthand alternates rather than changing the existing syntax.
",whaaaley,im
1138,2014-07-21 03:20:30,"+1 to shorten `@include` to `@in` as well.

I'm also in favor of `@fn`, `@im`, `@mx`, `@ea`, and `@ex`

They could be added as shorthand alternates rather than changing the existing syntax.
",whaaaley,fn
1138,2014-07-21 03:20:30,"+1 to shorten `@include` to `@in` as well.

I'm also in favor of `@fn`, `@im`, `@mx`, `@ea`, and `@ex`

They could be added as shorthand alternates rather than changing the existing syntax.
",whaaaley,ea
1138,2014-07-21 03:20:30,"+1 to shorten `@include` to `@in` as well.

I'm also in favor of `@fn`, `@im`, `@mx`, `@ea`, and `@ex`

They could be added as shorthand alternates rather than changing the existing syntax.
",whaaaley,include
1138,2014-07-21 03:20:30,"+1 to shorten `@include` to `@in` as well.

I'm also in favor of `@fn`, `@im`, `@mx`, `@ea`, and `@ex`

They could be added as shorthand alternates rather than changing the existing syntax.
",whaaaley,mx
1138,2014-07-21 03:20:30,"+1 to shorten `@include` to `@in` as well.

I'm also in favor of `@fn`, `@im`, `@mx`, `@ea`, and `@ex`

They could be added as shorthand alternates rather than changing the existing syntax.
",whaaaley,in
1138,2014-07-21 19:58:30,"@dustindowell22 Thanks. We considered the request and explained why we're not interested in adding this to Sass.
",chriseppstein,dustindowell22
1136,2014-02-26 23:59:26,"We can avoid the combinatorial explosion of nested selectors and nested extends by using the upcoming `:matches()` pseudo selector.

Example:



Currently compiles to:



But it could compile to:



Which although more text in this contrived example would probably be more compact in real world use cases.

Similarly for `@extend`:



Currently compiles to:



could be compiled to:



And would not require any of the heuristics we currently use to prune selectors.
",chriseppstein,extend
1133,2014-02-25 20:39:02,"You need to use a more recent version of Compass. @chriseppstein can provide more details about which versions are compatible.
",nex3,chriseppstein
1133,2014-02-25 20:49:32,"The latest compass pre release will work.

gem install compass --pre

On Tue, Feb 25, 2014 at 12:39 PM, Nathan Weizenbaum <
notifications@github.com> wrote:

> You need to use a more recent version of Compass. @chriseppsteinhttps://github.com/chriseppsteincan provide more details about which versions are compatible.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1133#issuecomment-36055171
> .
",chriseppstein,chriseppsteinhttps
1128,2014-02-23 02:40:57,"@tabatkins Is there any chance we can get the spec to change to something more preprocessor-friendly? It would be possible to make the variable values something that's a superset of all valid property values -- something like what Sass's static value parser parses -- without making practically any string valid. Users who want non-CSS values could just put them in a string. For example:


",nex3,tabatkins
1128,2015-10-07 22:04:19,"@nex3 I don't like any of our options here but let's figure out a game plan for how we're going to support this. Failure to address this in the next few months will start to cause users to abandon Sass for alternatives that work.

Here's some options that I see:
1. Don't allow interpolation or SassScript in a --var property. Thus ensuring maximal compatibility with CSS.
   
   If we do this, I think we should create a parser-level function called `sass-script(...)` within which any arbitrary sass script expression is allowed. We will parse any `--var` property without any SassScript processing unless the value is set to a `sass-script(...)`.
2. Treat --var properties as normal css properties that works with SassScript, interpolation, etc. For most users, this will be what they want.
   
   If we do this, I think we should introduce a new directive `@raw` or something similar which basically turns Sass parsing off and parses everything inside as a string that gets passed along to the css file. This has the side benefit of being an escape hatch for any future CSS incompatibilities.
3. Like other places in Sass, allow only interpolation when access to SassScript is needed.
   
   If we do this, We should allow interpolation to be escaped (probably `\#{` and a corresponding `\}` or maybe a double the hash sign `##{ ... }`) and when it is, it is passed through to css untouched. This accounts for the use case where some custom property syntax tramples on Sass's interpolation syntax.

Other suggestions welcome, these are just at the top of my head.
",chriseppstein,raw
1128,2015-10-08 00:11:49,"@nazar-pc The `@raw` directive would work in any location. I don't think you understood the proposal for that option.
",chriseppstein,raw
1128,2015-10-08 00:17:40,"OK, I see.
Anyway, I can't agree with:

> For most users, this will be what they want.

Polymer, for instance, encourages to expose support for variables and mixins to customize appearance of custom elements. This means that in most cases there will be no actual definition for variable in scope where it is used. So generally for compatibility reasons it is better not to treat CSS variables as SASS variables. CSS variables are much more powerful and such default behavior will just force many people to put a lot of `@raw` all over the place. Anyone who needs just simple variables already use them with existing syntax.
",nazar-pc,raw
1127,2014-02-21 19:36:29,"79bad1ff473cc06c66b85086403f4a1905938e37 changed `index()` from returning `false` when not finding an element to returning `null`. As discussed in #832, we didn't think this necessitated a deprecation process since we expected users to be writing `@if index(...)`. However, it seems that at least [Foundation](https://github.com/zurb/foundation/blob/2c4f399ee5e06c94f4c1c491d5c2ce344f974193/scss/foundation/_functions.scss#L12) explicitly checks against `false`.

Rather than returning `null` immediately, we'll need to add a `DeprecatedFalse` value that complains if it's used in a way that is incompatible with the future `null` class.
",nex3,if
1127,2014-03-19 22:54:33,"I've used a bit of ""x == false"" stuff in some cases where I care only about if something doesn't exist in a list.

Given we can't (or shouldn't) do x == false, and x == null also throws a warning, what should we do? I can only really think of checking for a ""positive"" value, and then immediately following it with an `@else`. But that seems kludgy.
",mikehdt,else
1127,2014-03-19 23:00:23,"Why can't you write `@if not x`?
",nex3,if
1127,2014-03-19 23:16:01,"You can - perfect! Thanks :) The warning from the compiler only suggested using `@if x`, hence why I was trying to figure a way around it.

Perhaps rather than throwing `For example, instead of ""@if index(...) == false"", just write
""@if index(...)"".` it could suggest `@if not index(...)` instead if that makes sense? (That message was from the Sass compiler in CodeKit 2).
",mikehdt,if
1127,2014-03-20 00:29:58,"Actually, that error should just always say `@if not index(...)`. I'll fix that.
",nex3,if
1125,2014-02-20 21:37:50,"I appreciate this feature has [only just landed](http://nex3.roughdraft.io/8050187) but I've come across some maybe expected behaviour.  I've tested this both in **master** and in **bleeding-edge** 6434174f39dccc92 - [Test case on SASS Meister](http://sassmeister.com/gist/9123594).

Original Scss:



Actual output:



Expected:



Also - interestingly - if you try to `@extend %fizz--buzz;` that throws an error too.
",matthew-andrews,extend
1125,2014-02-20 22:06:50,"This is expected. `@extend` is resolved well after `&`.
",nex3,extend
1125,2014-02-20 23:00:17,"I don't think it's workable. We take pains to make `.foo { &.bar { ... } }` be identical to `.foo.bar { ... }`, and the same should be true for `.foo { &-bar { ... } }`. That means that unless we want `@extend .foo` to match part of every instance of `.foo-bar`, not just the ones created with `&`, we can't do this.
",nex3,extend
1124,2014-02-20 17:40:51,"/cc @hcatlin @akhleung

When Sass (or libsass) encounters `@import 'foo'`, it searches first in the directory of the source file, and then in all the load paths.

Other languages tend to keep relative and absolute imports separate. For instance Ruby has `require` and `require_relative`, and Node distinguishes `require('foo')` (absolute) and `require('./foo')` (relative).

Quick background why I care: I'm working on a Sass plugin for [Broccoli](https://github.com/joliss/broccoli), and one of the big motivators for making Broccoli was making it easier to share frontend JS + CSS code, because we can now use Bower with Broccoli on top. I know people have been distributing Sass files before (e.g. on RubyGems) but I want to see much more of that, and with less friction. I want _libraries that depend on other libraries_. So now I really care about getting the semantics of `@import` right.

Having `@import` be both absolute and relative seems like it might cause problems when there are ambiguities.

I wonder if we should, at some point, change the `@import` semantics to be unambiguous. For instance, on the next major version of Sass, we could print deprecation warnings on relative `@imports` that don't begin with a dot, so that `@import 'foo'` is absolute, and `@import './foo'` is relative.

What do you think?
",joliss,imports
1124,2014-02-20 17:40:51,"/cc @hcatlin @akhleung

When Sass (or libsass) encounters `@import 'foo'`, it searches first in the directory of the source file, and then in all the load paths.

Other languages tend to keep relative and absolute imports separate. For instance Ruby has `require` and `require_relative`, and Node distinguishes `require('foo')` (absolute) and `require('./foo')` (relative).

Quick background why I care: I'm working on a Sass plugin for [Broccoli](https://github.com/joliss/broccoli), and one of the big motivators for making Broccoli was making it easier to share frontend JS + CSS code, because we can now use Bower with Broccoli on top. I know people have been distributing Sass files before (e.g. on RubyGems) but I want to see much more of that, and with less friction. I want _libraries that depend on other libraries_. So now I really care about getting the semantics of `@import` right.

Having `@import` be both absolute and relative seems like it might cause problems when there are ambiguities.

I wonder if we should, at some point, change the `@import` semantics to be unambiguous. For instance, on the next major version of Sass, we could print deprecation warnings on relative `@imports` that don't begin with a dot, so that `@import 'foo'` is absolute, and `@import './foo'` is relative.

What do you think?
",joliss,akhleung
1124,2014-02-20 17:40:51,"/cc @hcatlin @akhleung

When Sass (or libsass) encounters `@import 'foo'`, it searches first in the directory of the source file, and then in all the load paths.

Other languages tend to keep relative and absolute imports separate. For instance Ruby has `require` and `require_relative`, and Node distinguishes `require('foo')` (absolute) and `require('./foo')` (relative).

Quick background why I care: I'm working on a Sass plugin for [Broccoli](https://github.com/joliss/broccoli), and one of the big motivators for making Broccoli was making it easier to share frontend JS + CSS code, because we can now use Bower with Broccoli on top. I know people have been distributing Sass files before (e.g. on RubyGems) but I want to see much more of that, and with less friction. I want _libraries that depend on other libraries_. So now I really care about getting the semantics of `@import` right.

Having `@import` be both absolute and relative seems like it might cause problems when there are ambiguities.

I wonder if we should, at some point, change the `@import` semantics to be unambiguous. For instance, on the next major version of Sass, we could print deprecation warnings on relative `@imports` that don't begin with a dot, so that `@import 'foo'` is absolute, and `@import './foo'` is relative.

What do you think?
",joliss,import
1124,2014-02-20 17:40:51,"/cc @hcatlin @akhleung

When Sass (or libsass) encounters `@import 'foo'`, it searches first in the directory of the source file, and then in all the load paths.

Other languages tend to keep relative and absolute imports separate. For instance Ruby has `require` and `require_relative`, and Node distinguishes `require('foo')` (absolute) and `require('./foo')` (relative).

Quick background why I care: I'm working on a Sass plugin for [Broccoli](https://github.com/joliss/broccoli), and one of the big motivators for making Broccoli was making it easier to share frontend JS + CSS code, because we can now use Bower with Broccoli on top. I know people have been distributing Sass files before (e.g. on RubyGems) but I want to see much more of that, and with less friction. I want _libraries that depend on other libraries_. So now I really care about getting the semantics of `@import` right.

Having `@import` be both absolute and relative seems like it might cause problems when there are ambiguities.

I wonder if we should, at some point, change the `@import` semantics to be unambiguous. For instance, on the next major version of Sass, we could print deprecation warnings on relative `@imports` that don't begin with a dot, so that `@import 'foo'` is absolute, and `@import './foo'` is relative.

What do you think?
",joliss,hcatlin
1124,2014-02-20 17:55:30,"For new-to-Sass users who are familiar with CSS will find that what you're proposing is confusing.  The `@import` directive from CSS interprets `/foo` as being absolute while `../foo`, `./foo`, and `foo` as being relative (note that this is also the behavior for other types of linking in web documents like href, src, etc.).  I would rather see Sass stay faithful to CSS, not Ruby.

I suspect this will also cause a great deal of backwards compatibility headaches.
",cimmanon,import
1124,2014-02-20 17:58:14,"Absolute imports are already a part of Sass. (Note that by ""absolute"" I don't mean ""starting with a slash"".) E.g. `@import ""foo""` will search all the load paths for ""foo.scss"", unlike CSS. My post is about better disambiguating the two.

Hm, if we wanted to avoid confusing people coming from CSS, we could also move absolute imports into a separate directive, like `@import_absolute`.
",joliss,import
1124,2014-02-20 20:21:58,"Supporting both relative and load-path imports using the same syntax just feels vaguely icky to me, like load paths are only an afterthought. Hm, let me try to articulate where this feeling comes from...

So first, it's a bit confusing, because when you see an `@import`, you don't know whether it's relative or absolute.

But it can also be an annoyance when relative files shadow absolute files. For instance, say you have a file `_bootstrap.scss` (imported from `application.scss`), that reads like so:



Then the `@import` won't work because `./_bootstrap.scss` is in the way. So you have to rename `_bootstrap.scss` to accomodate this. As we get a bigger ecosystem of libraries, this might become a more frequent problem.
",joliss,import
1124,2014-02-20 20:31:27,"So I guess what I'm saying is, if I were designing the `@import` directive from scratch today, I'd probably make it always absolute, unless it begins with `./` or `../`.

Now that `@import` exists already, it's less clear to me whether it's worth changing. If the upcoming reworking in 4.0 breaks many imports anyway, it might be worth cleaning this up at the same time, provided that you agree.

(I just noticed that [AMD uses this convention](https://github.com/amdjs/amdjs-api/wiki/AMD#module-id-format-) as well, by the way.)
",joliss,import
1124,2016-04-13 00:16:02,"> You say it's ambiguous, but the semantics are well-defined: a relative import is preferred if one exists. This is how Python's module system works, for example.

So that means that file naming in a sub-folder is constrained by whatever happens to be in the load path, if you want to refer to both the shadow and the shadowed?  That does not seem reasonable.

That along with the ambiguity (you can't tell from the `@import` statement if it's relative or not) makes this far from ideal.

Doing relative lookup only for ./ or ../ eliminates the ambiguity and removes naming constraints.
",bughit,import
1124,2016-04-18 18:49:13,"> Then the @import won't work because ./_bootstrap.scss is in the way. So you have to rename _bootstrap.scss to accomodate this. As we get a bigger ecosystem of libraries, this might become a more frequent problem.

Of primary concern for me is that two libraries included in the same app would work predictably irrespective of the loadpath configuration. In this respect, our current semantics work well, neither will accidently load a library included on the loadpath instead of a file relative to the library file.

Of less concern to me is that a person can add a library to their app without needing to make any change to their application code in order to load that library. Adding the library is safe in that it won't accidently import some new library and having application code with the same name as the library that is in use, is actually confusing whether or not there's some syntactic disambiguation.

There are lots of issues with library code being in the global scope that makes library module interactions-at-a-distance happen in unpredictable ways, and our module system is meant to resolve those use cases, but this particular use case doesn't seem like it's actually hindering adoption of sass libraries in practice.
",chriseppstein,import
1122,2014-02-24 21:49:19,"This is truly a situation where I don't think Sass can make a default that meets everyone's needs. 10 units of precision causes bloat for many users unnecessarily. I think maybe this is a situation where Sass needs a way to specify precision in the Sass file itself instead of as a compiler option.

Some ideas:
1. `@option (numeric-precision: 10);` - a directive that would specify the precision for the Sass file it is contained within. I'm sure there are other sass options that would be useful to set via a sass file.
2.  Similar to above, the option directive be a wrapping directive `@option (numeric-precision: 10) { ... }` that affects the contained code instead of the entire file.
3. `precision($value, $units-of-precision: 5)` -  function that sets the desired output precision on a number and returns that number. If two numbers with precision set are arithmetically combined, we would keep the max precision of the two. This allows the precision to be set on a per-value basis where it is especially important.
",chriseppstein,option
1120,2014-02-17 05:22:57,"With many sass projects it's common to need to bootstrap a file with an import like `@import ""settings.scss"";` 

Would it reasonable to move this bootstrapping to a cli parameter?

`sass --load-path src/scss --requires src/scss/_settings.scss`
",xzyfer,import
1120,2014-02-18 20:50:21,"I don't like including flags that encourage people to write Sass files that require a certain invocation to work correctly. I want Sass files to be able to run anywhere with minimal configuration as much as possible. Adding a flag just to get around writing `@import` statements isn't worth the fragmentation.
",nex3,import
1117,2014-02-22 01:49:09,"Also: `selector-extend($selector, $extendee, $extender)` which works like applying `$extender {@extend $extendee}` to `$selector`.
",nex3,extend
1111,2014-02-10 09:11:41,"Hello everyoneÔºåI encountered a problem with `@at-root`. I have this code:



But the compile time error



My operating environment is as followsÔºö



Why is this ? How do I solve this problem ?„ÄÄ
",airen,at-root
1111,2014-02-10 22:32:13,"Please post separate bug reports in separate GitHub issues.

> Hello everyoneÔºåI encountered a problem with `@at-root`.

Between 3.3.0.rc.2 and 3.3.0.rc.3, we removed support for using `&` in SassScript. For the full justification, you can read [this gist](https://gist.github.com/nex3/8050187). You can write your code like this, though:



> Listen not working with sass-3.3.0.rc.3 - Undfined Method

This is a duplicate of #1110.
",nex3,at-root
1110,2014-02-11 04:59:24,"Hey @chriseppstein: 3.3.2-RC3 Majestic Maple I believe. I uninstalled and worked fine with the stable gem.
",kevinSuttle,chriseppstein
1102,2014-02-05 19:55:13,"The new `@keyframes` parsing added by e6c60c4946d3ecd11996175d9a35b5fe5a3374b1 restrict keyframes blocks from being parsed unless they're textually within a `@keyframes` rule. This breaks mixins like the following:



which is unacceptable.
",nex3,keyframes
1096,2014-02-01 10:02:17,"Thanks @nex3!
",badsyntax,nex3
1094,2014-01-30 03:32:02,"This is a compilation of issues and wishes about @import
### Import CSS files #556



Would import sass, scss or **css** file

> There's a [plugin](https://github.com/chriseppstein/sass-css-importer) for that
### Import Once #139



Multiple syntax suggestions for one time import

> There is a [plugin](https://github.com/chriseppstein/compass/tree/master/import-once) for that
### Import Directory #690

`@import ""foo"";`

If ""foo"" is a folder than it tries to import ""foo/_module.scss""

> reasonable
### Namespaces and Aliases #353



This would put every ""foo"" components (mixins, vars, placeholders...) in a ""bar"" package.

What would be the separator ? `.` or `/` or `\` or `::` ?
Where would go the `$` and `%` ? Before or after the namespace ?
What it would look like :


### Non-transitive imports [#353](https://github.com/nex3/sass/issues/353#issuecomment-5146513)

> if A imports B and B imports C, A shouldn't necessarily see everything from C.
> A way of getting around non-transitive imports.
### Renaming classes [#353](https://github.com/nex3/sass/issues/353#issuecomment-5146513)

> This isn't something I'm 100% sold on, but it has been requested. Maybe the correct way to do this is some combination of namespacing and @extend.
### Disabling CSS output [#353](https://github.com/nex3/sass/issues/353#issuecomment-5146513)

> Both selectively and wholesale. The importer may want to @extend the rules in the importee but not have them concretely present, or it may want to suppress rules matching a certain selector.

This is also related to #320 :



B output would not contain `.foo` & `.bar` definition but only `.baz`;
### Conditional imports #451



It ""worked"" before but never intended.
### Paths

A way to setup shortcut paths (like [Require.js](https://github.com/jrburke/r.js/blob/master/build/example.build.js#L46-L49)) 


",JulienCabanes,extend
1094,2014-01-30 03:32:02,"This is a compilation of issues and wishes about @import
### Import CSS files #556



Would import sass, scss or **css** file

> There's a [plugin](https://github.com/chriseppstein/sass-css-importer) for that
### Import Once #139



Multiple syntax suggestions for one time import

> There is a [plugin](https://github.com/chriseppstein/compass/tree/master/import-once) for that
### Import Directory #690

`@import ""foo"";`

If ""foo"" is a folder than it tries to import ""foo/_module.scss""

> reasonable
### Namespaces and Aliases #353



This would put every ""foo"" components (mixins, vars, placeholders...) in a ""bar"" package.

What would be the separator ? `.` or `/` or `\` or `::` ?
Where would go the `$` and `%` ? Before or after the namespace ?
What it would look like :


### Non-transitive imports [#353](https://github.com/nex3/sass/issues/353#issuecomment-5146513)

> if A imports B and B imports C, A shouldn't necessarily see everything from C.
> A way of getting around non-transitive imports.
### Renaming classes [#353](https://github.com/nex3/sass/issues/353#issuecomment-5146513)

> This isn't something I'm 100% sold on, but it has been requested. Maybe the correct way to do this is some combination of namespacing and @extend.
### Disabling CSS output [#353](https://github.com/nex3/sass/issues/353#issuecomment-5146513)

> Both selectively and wholesale. The importer may want to @extend the rules in the importee but not have them concretely present, or it may want to suppress rules matching a certain selector.

This is also related to #320 :



B output would not contain `.foo` & `.bar` definition but only `.baz`;
### Conditional imports #451



It ""worked"" before but never intended.
### Paths

A way to setup shortcut paths (like [Require.js](https://github.com/jrburke/r.js/blob/master/build/example.build.js#L46-L49)) 


",JulienCabanes,import
1094,2014-03-30 15:09:21,"Convention is to use `**` for folders, `*` for files. Henre `@import ""**/*""`.
",HugoGiraudel,import
1094,2014-07-17 08:38:16,"@Anahkiasen I would just do the alphabetical import, without the automatic check for the `_modules.scss` file. Because if I care for the order of my imports (and can't name them `_1-modules.scss` or something like that = I already have to be specific) I can be so specific to just write `@import ""foo/modules"";`
",apfelbox,import
1094,2014-11-01 21:35:20,"This sort of falls under the conditional imports #451, but slighlty different use case: 

Currently trying to declare `@import` within mixin will result to `Error: Import directives may not be used within control directives or mixins.`-Error.

What I am trying to do is following:



This would be a great way to enforce ""namespaced"" styles for the components (in my case, Angular directives which live in their own separate folders with their javascripts, templates, tests **and styles**), and also allow nice short syntax (that `@include component('foo');`) for importing them.
",aripalo,include
1094,2014-11-01 21:35:20,"This sort of falls under the conditional imports #451, but slighlty different use case: 

Currently trying to declare `@import` within mixin will result to `Error: Import directives may not be used within control directives or mixins.`-Error.

What I am trying to do is following:



This would be a great way to enforce ""namespaced"" styles for the components (in my case, Angular directives which live in their own separate folders with their javascripts, templates, tests **and styles**), and also allow nice short syntax (that `@include component('foo');`) for importing them.
",aripalo,import
1094,2015-01-05 23:22:34,"I hav to agree with @aripalo:

Some sort of `@import` directive inside a mixin would be great, especially for including third party styles. 
",andi1984,import
1094,2015-01-15 16:25:20,"+1 for Paths via variables but _specially_ via something @require-like. 

Having aliases for css module partials would be awesome. Implementing a `_sass_config.scss` to be imported on all files like we do with `require_config.js` on html _(or even having a default file name at project sass root folder that would be self-imported, following the idea of `@import 'folder'` importing a default `_modules.scss` inside that folder)_.

An addition to the idea is to have a keyword pointing to project root folder, for example:



This way we leave sass to resolve the root folder path (as some projects are run in multiple OSes so Windows is C:/ but Mac ~/ and so on) and also because sometimes we want to import one single file - without making a full path alias for it - and having `@import ""myProjRoot/features/aThing/something""` is so much easier/faster to understand than `@import ""../../../../../../../../../../../features/aThing/something""`. 
",RaphaelDDL,require-like
1094,2015-01-15 16:25:20,"+1 for Paths via variables but _specially_ via something @require-like. 

Having aliases for css module partials would be awesome. Implementing a `_sass_config.scss` to be imported on all files like we do with `require_config.js` on html _(or even having a default file name at project sass root folder that would be self-imported, following the idea of `@import 'folder'` importing a default `_modules.scss` inside that folder)_.

An addition to the idea is to have a keyword pointing to project root folder, for example:



This way we leave sass to resolve the root folder path (as some projects are run in multiple OSes so Windows is C:/ but Mac ~/ and so on) and also because sometimes we want to import one single file - without making a full path alias for it - and having `@import ""myProjRoot/features/aThing/something""` is so much easier/faster to understand than `@import ""../../../../../../../../../../../features/aThing/something""`. 
",RaphaelDDL,import
1094,2015-03-26 19:50:15,"Hello, I would like to know where is the current development state of these features ? Especially for a feature like this in less : http://lesscss.org/features/#import-options

=> @import (reference) ""filename"";

Thank you.
",backnight,import
1094,2015-03-31 21:31:38,"The ability to use a variable name for your @import string would be very nice. Right now this functionality is missing from SASS.
",Jakobud,import
1094,2015-04-21 11:25:48,"I'll +1 the ability to use `@import` inside of a mixin with variable names. We just tried to write something like this for our third party components.



which would be called with...



Which would allow us to add new components with less maintenance.
",sammorrisdesign,import
1094,2015-04-25 15:33:19,"@Jakobud Nah, we tried to write something like that. But it didn't work. Hence the +1 to be able to use `@import` inside mixins and with variable names.

Would be great if it did though ;)
",sammorrisdesign,import
1094,2015-05-09 03:52:44,"@nex3 are you asking why someone would want variables in @import strings? Simple:

Lets say you have a file that imports a couple dozen other files:



Then lets say you have to change `my/path/` to something else. You now how to change it for all the import strings. If you could use variables though you could have something like this:



It makes changing tons of import strings a piece of cake and opens the door for dynamic build systems.
",Jakobud,import
1094,2015-07-06 18:14:57,"Not to turn this into a +1 thread, but I also cannot use SASS without `@import (reference) 'filename'`.  It is the number one way of allowing reuse of css objects/patterns while keeping compiled output sizes to a minimum.
",dehuszar,import
1094,2015-07-16 12:09:11,"+1 @import (reference) ""filename"";
",kouki-o,import
1094,2015-09-11 08:15:18,"+1 @import (reference) ""filename"";
",meishier,import
1094,2015-09-25 18:35:43,":+1: if you could @import (reference) ""filename""; Chris Coyier just highlighted my ignorance of this, and now I will LESS my SASS output when done to see what that makes of it.
",Lewiscowles1986,import
1094,2015-09-26 02:38:41,"+1 for `@import (reference) ...`!
",jfurrow,import
1094,2015-09-27 16:56:35,"+1

> +1 for @import (reference) ...!
",gherkins,import
1094,2015-09-28 21:29:11,"As suggested by @chriseppstein, cssmodules has cool stuffs like [composition and dependencies](https://github.com/css-modules/css-modules#dependencies) which looks like LESS's `@import (reference)`


",JulienCabanes,import
1094,2015-09-29 00:52:45,"@xzyfer Here's some of my initial thoughts on how ICSS imports, aliasing, and other constructs can look like in SCSS and using W3 grammar on [media features](http://www.w3.org/TR/mediaqueries-4/#mq-features), as well as using `@import` as an [at-rule that accepts a block](http://www.w3.org/TR/css-syntax-3/#at-rule):



**Using @import with (reference) media feature**



**Using `@import` as an at-rule with block:**



**Overloading `@extend`**



In summary, I'm not a huge fan of how ICSS uses the syntax for properties and values outside of an at-rule to define imports and exports, and am _especially_ against the use of pseudo-selectors (that don't select anything) where at-rules are more appropriate.

We can make minimal changes to SCSS syntax and still get all the benefits of how imports, exports, local aliases, etc. are done in ICSS, with greater adherence to W3C syntax grammar. The changes are:
- Giving Sass comprehension of certain media features, such as `(reference)`, with regard to `@import`
- Allowing `@import` to contain a block
- Overloading `@extend` to comprehend `from` as such:
  - `@extend <string> from [ <url> | <string> ];`

What do you think?
",davidkpiano,extend
1094,2015-09-29 00:52:45,"@xzyfer Here's some of my initial thoughts on how ICSS imports, aliasing, and other constructs can look like in SCSS and using W3 grammar on [media features](http://www.w3.org/TR/mediaqueries-4/#mq-features), as well as using `@import` as an [at-rule that accepts a block](http://www.w3.org/TR/css-syntax-3/#at-rule):



**Using @import with (reference) media feature**



**Using `@import` as an at-rule with block:**



**Overloading `@extend`**



In summary, I'm not a huge fan of how ICSS uses the syntax for properties and values outside of an at-rule to define imports and exports, and am _especially_ against the use of pseudo-selectors (that don't select anything) where at-rules are more appropriate.

We can make minimal changes to SCSS syntax and still get all the benefits of how imports, exports, local aliases, etc. are done in ICSS, with greater adherence to W3C syntax grammar. The changes are:
- Giving Sass comprehension of certain media features, such as `(reference)`, with regard to `@import`
- Allowing `@import` to contain a block
- Overloading `@extend` to comprehend `from` as such:
  - `@extend <string> from [ <url> | <string> ];`

What do you think?
",davidkpiano,import
1094,2015-10-02 22:23:48,"It's interesting to look at ICSS for inspiration, but we're not going to be directly borrowing the syntax. We're also moving away from the `@import` keyword in general, so there's no need to be tethered to valid CSS syntax (not that there really was anyway).
",nex3,import
1094,2015-10-13 18:30:23,"For consistency, I would prefer `@import '_partial' !reference;`


",long-lazuli,import
1094,2015-10-13 19:47:35,"@long-lazuli we're introducing a new directive and @import will be purely for generating a CSS import (after a deprecation period). So consistency is not an overriding concern. Good syntax is the main goal.
",chriseppstein,import
1094,2015-10-13 20:55:38,"@chriseppstein Whoops, not aware of that; could you point me over this new directive's discussion ?

By the way; you have my syntax proposal.
the way we `@extend` doesn't really matter for me, but it would be usefull to name the import locally, as it would be a bit painful to write :


",long-lazuli,extend
1094,2015-10-23 11:12:19,"I have already posted this in [issue #279 ](https://github.com/sass/sass/issues/279), but that is an old issue and as wishes and suggestions for importing sass files has moved here, I repeat it here.

It would be very useful to allow aliasing in paths to import/load. Aliases could be a configuration option for the Sass Compiler. For example, we could add a [:load_aliases] option which would be similarl to the [`:load_paths` option](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#load_paths-option), but offer more flexibility by taking an object where the keys can be used to point to a specific load path in `@import`.

This extra flexibility covers a lot of different use cases:
- import stylesheets directly from bower-components (see note below)
- allow for a more complex project structure, where sass files are scattered in different directories/bundles but need to compile into a single file
- swap source directories based on a config file (e.g. for theming)

**options**



**sass file** (can be anywhere, for example in './src/main/stylesheets/' or whatever)


",yoannisj,import
1094,2015-11-05 06:27:50,"Hi, I thought I just saw @hcatlin present on the new `@use` to pull a file in such that



I guess I find it it weird that `""somefile""` would turn into a variable of the same name. What if the filename has characters in it that can't turn into a variable name? Might it be clearer to extend the `@import` syntax to explicitly tell the reader what variable to use?


",amster,import
1094,2015-11-05 06:27:50,"Hi, I thought I just saw @hcatlin present on the new `@use` to pull a file in such that



I guess I find it it weird that `""somefile""` would turn into a variable of the same name. What if the filename has characters in it that can't turn into a variable name? Might it be clearer to extend the `@import` syntax to explicitly tell the reader what variable to use?


",amster,use
1094,2015-11-05 06:27:50,"Hi, I thought I just saw @hcatlin present on the new `@use` to pull a file in such that



I guess I find it it weird that `""somefile""` would turn into a variable of the same name. What if the filename has characters in it that can't turn into a variable name? Might it be clearer to extend the `@import` syntax to explicitly tell the reader what variable to use?


",amster,hcatlin
1094,2015-11-05 17:37:24,"@amster I should have had that in my example, definitely `@use ""file"" as identifier` is something that we'll do. I think it's mentioned somewhere above. I was just showing a shorthand version that I like to have as an option.
",hcatlin,use
1094,2015-11-06 21:18:44,"To clarify, the syntax and semantics for `@use` are still very much up in the air. @hcatlin was presenting an idea that's in the vein of what we're looking at, but it's not at all final or binding.
",nex3,use
1094,2015-11-24 05:47:43,"**+1**
For allowing import as reference only.
`@import (reference) ""somefile"";`

**+1**
For allowing variable names in import
`@import ""#{$rootpath}/somepath/#{$somefile}"";`

**+1**
For allowing dynamic variables
Ref: https://github.com/gruntjs/grunt-contrib-less#modifyvars
",saas786,import
1094,2015-12-09 16:08:52,"I wrote a PostCSS plugin (and am working on the next set of features) which emulates LESS's `@import (reference)` set of functionality.  I chose to use my own @reference atRule so as to not overload the @import or @extend plugins, which are written by different authors, and would require too much cross-communication between plugins, but if it's helpful to anyone here, [here it is](github.com/dehuszar/postcss-reference).
",dehuszar,reference
1094,2015-12-09 16:08:52,"I wrote a PostCSS plugin (and am working on the next set of features) which emulates LESS's `@import (reference)` set of functionality.  I chose to use my own @reference atRule so as to not overload the @import or @extend plugins, which are written by different authors, and would require too much cross-communication between plugins, but if it's helpful to anyone here, [here it is](github.com/dehuszar/postcss-reference).
",dehuszar,extend
1094,2015-12-09 16:08:52,"I wrote a PostCSS plugin (and am working on the next set of features) which emulates LESS's `@import (reference)` set of functionality.  I chose to use my own @reference atRule so as to not overload the @import or @extend plugins, which are written by different authors, and would require too much cross-communication between plugins, but if it's helpful to anyone here, [here it is](github.com/dehuszar/postcss-reference).
",dehuszar,import
1094,2016-01-30 17:19:12,"+1 for `import (reference)`.

Just wondering if `@import (reference)` is planned? I can't see any other ways of achieving partial code re-use from other frameworks _unless_ they offer mixins for _everything_.  LESS's `@import (reference)` makes this super simple.
",JD-Robbs,import
1094,2016-04-07 01:28:45,"+1 `@import (reference) ""filename"";`
",TSMMark,import
1087,2014-01-21 15:26:40,"If you swap the first two lines below, in other words put the .b1 line above and before the .b0  line  you get different css output.  

In one case it processes the first option line first, and in the other case it processes the 2nd option line first.

It shouldn't matter what order the first two lines are written in I don't think.

.b0 {border: 0;         }
.b1 {border: 1px solid; }
option  {@extend .b1;   }
option  {@extend .b0;   }

Ruby 1.9.3p484 (2013-11-22) [i386-mingw32]
Sass 3.2.13 (Media Mark)

Thanks for all of your work.  Have fun with this one.  I can see that how you do the processing is not so simple.  But to be sure I was under the impression that css was suppose to be cascading, and until this is fixed this fails that criteria.  

I'm brand new to sass, so perhaps there is something obvious I'm missing.
",TopView,extend
1087,2014-01-21 16:14:40,"I think the issue is a misunderstanding of how `@extend` works. `@extend` simply takes the item being extended and comma separates (moves) the selector with the original extended selector. It doesn't introspect the items being extended to determine if there are overrides, it is a straight move. When you swap line 1 and line 2 without also swapping line 3 and line 4, Sass is doing exactly what you've asked, it's rearranging your source order based upon the direct calls you've asked. If `.b0` had any other properties, it wouldn't have mattered; you just happen to have constructed a set of extends that override your desired results.
",Snugug,extend
1087,2014-01-21 16:44:28,"If you'd like the technical write up on how @extend works, see Nex's post here https://gist.github.com/nex3/7609394

Extend is a way of changing your cascade and rearranging selectors, not just reducing output. It doesn't introspect the properties being extended or the selectors, only rearranges as a user has asked.

> On Jan 21, 2014, at 11:35 AM, Howard notifications@github.com wrote:
> 
> You're kidding, right? You want me to imagine that swapping two lines like this is my problem and not sass's? Well, I've got a pretty good imagination, but not a good enough to imagine that css should cascade only some of the time.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,extend
1087,2014-01-21 16:53:38,"> When you swap line 1 and line 2 without also swapping line 3 and line 4

Hey @Snugug, the order of `@extend` statements does not matter here. Swapping lines 3 and 4 does not influence anything. Only the order of lines 1 and 2 influences the order of resulting CSS.

@TopView, Sass does not have telepathic powers. `A { @extend B; }` basically means ""find B above and add A next to it"". The position of B in your code defines where A appears in code, because A always appears next to B, and B appears where you type it. So yes, it's totally your problem.
",lolmaus,extend
1087,2014-01-21 16:57:00,"@lolmaus is right about 3/4. Typing faster than thinking

> On Jan 21, 2014, at 11:53 AM, lolmaus notifications@github.com wrote:
> 
> When you swap line 1 and line 2 without also swapping line 3 and line 4
> 
> Hey @Snugug, the order of @extend statements does not matter here. Swapping lines 3 and 4 does not influence anything. Only the order of lines 1 and 2 influences the order of resulting CSS.
> 
> @TopView, Sass does not have telepathic powers. A { @extend B; } basically means ""find B above and add A next to it"". The position of B in your code defines where A appears in code, because A always appears next to B, and B appears where you type it. So yes, it's totally your problem.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,extend
1087,2014-01-21 18:00:11,"I agree with @TopView here, you guys are being pretty hard on him. This is a very normal reaction when someone finds a feature that doesn't fit their mental model of how it should work. We get this **all the time**. Chastising people who use strong language in their reaction to our features is not how we became the most used css pre-processor. I encourage everyone who comments on our issue tracker to ask questions and explore objections, to explain the features that we have and why they work the way they do. And lastly, as your mother encouraged: if you can't say something nice, don't say anything at all.

@TopView I'm sorry Sass doesn't fit your needs. I assure you that `@extend` is based on a theory of styling that is very sound. Selector inheritance using `@extend` is one of the most likely features of Sass to be included in CSS exactly as-is. If the people on the CSS working group think it's that good and that in line with the philosophy of CSS it's quite likely that we don't have it wrong.

For what it's worth, this is a better write up on the theory of this feature (instead of the implementation): https://github.com/nex3/sass/issues/324#issuecomment-4607184
",chriseppstein,extend
1087,2014-01-22 08:22:05,"First, I want to say again how much I appreciate all of your input and feedback.

I took a look at less, and it has the same exact problem that sass has.  

So here is your opportunity to out do them, and I have a couple of suggestions as to how.

Clearly this problem is because the algorithm used to implement @extend is simple and elegant, even if it does not work all of the time as expected.  Gosh I've been coding for 35 years and I've seen plenty of algorithms that work 99% of the time, but not 100% of the time.  And in that condition they are more trouble than they are worth in my opinion.  I expect you are all experienced enough to know what I am talking about.

SOLUTION:  There could be some sort of non-fatal error (or lint) for this sort of issue.  

It would be relatively easy I think to check when a tag is getting defined a second time (in this case the 2nd option) and then check if one of the attributes being included appears defined above but before the definition of where it was previously referenced.  Without coding this up I can't for see exactly how it would actually work, but it would help alert a CSS coder of potential problems.

This approach would have the advantage of fixing this problem thus making @extend more stable but without breaking any existing code.

Please note that even though I gave you this example in only 4 lines I had to first dig it out of a 700 line css file.  And while the last two lines were next to each other in my css, they were quite far from the first two lines.  It just was not reasonable to assume that including a couple of things above would change the order of two lines below.  .. or that simply reordering the first two lines would so silently break something far below.

.b0 {border: 0; }
.b1 {border: 1px solid; }

... many lines between

option {@extend .b1; }
option {@extend .b0; }

When 'option' is found again (the second time in this case) look to see if the 'border' it is pointing to is above the border it previously referred to.  If so flag an error or a warning depending on a switch on sass, ... or with another optional permission switch on then automatically fix it by moving .b0 below .b1 so that option cascades properly.  Obviously this involves checking that it doesn't break something else, which will involve flagging the change  so that it can't be done twice (i.e. reversed) without a fatal error.  Because this only needs to check a fairly limited class of syntax it should not add that much more processing overhead, even if the check itself is somewhat compute intensive.

I look forward to testing this when you get it working.  Thanks again.
",TopView,extend
1087,2014-01-22 17:39:48,"@TopView I think you're misunderstanding how `@extend` is supposed to work. This isn't a case where it's failing to respect the cascade; in fact, the behavior you're seeing is precisely the behavior that makes `@extend` work well _with_ the cascade.

Let me explain. When you write `A { @extend B }`, what that means is that ""all elements that match `A` should be styled as though they also match `B`."" Sass does its best to make this work, and in most\* cases it does so 100% correctly. Your example is one of those cases. You're saying ""`option` tags should be styled as though they had `class=""b1 b0""`"".

Since `.b0` is declared before `.b1`, `.b1` takes precedence, because of the cascade. A border appears when you use `@extend` because a border would appear if you manually added `class=""b1 b0""`. The cascade is being respected here just like it would be if you weren't using `@extend`.

---

*: The cases where this fails are either because we don't have the necessary browser context to do the necessary property resolution, or because doing it completely generally would create extremely large CSS size.
",nex3,extend
1087,2014-01-22 18:58:49,".x {@extend .y} should extend .y not .q.
",TopView,extend
1087,2014-01-22 19:05:09,"> `x {@extend y}` should extend `y` not `q`.

And indeed it does.
",nex3,extend
1087,2014-01-22 19:57:34,"Glad you agree with me that .x {@extend .y} should extend .y not .q. 

So consider this:

.y {color: red;}
.q {color: blue;}

.x {@extend .q}
.x {@extend .y}

You said .x extends .y.  But it does not here. If you paint with .x it is blue and not red.  So it extends .q.

Yes @extend works correctly MOST of the time.  But in this case it does not. 

Yes I can see how the code is ACTUALLY written.  But lexically it makes no sense.  It asks the css author to keep track of a detail that is obscure and not obvious.  And it unnecessarily does this.

Lexically .x should extend .y.  Since it already does this 99.9% of the time, I think it should do this 100% of the time.
",TopView,extend
1085,2014-01-15 14:24:25,"Yes, i know about `@medi` befavior, but for some reason i'm thinking how to group these..
I have thought about creating come extra to sass ( on ruby ), but i need to learn it first )))
the thing is that i will try to do will looke something like:



And expected output will be ( with modefied partialmixin )



Of course something like these i can't write right now, i don't have much knowlage, but may be in future )) or if someone likes that idea will already be done in future ))
",muxahuk,medi
1085,2014-01-15 16:57:32,"sorry, noobie here..
Where i can find that `@buffer` and how can i install it to my project ?
can't find it, aldought a whole year is passed after that comment ( from #116 )
",muxahuk,buffer
1085,2014-01-15 17:08:49,"but isn't there a way to include to project an extention or module wich will improve sass functionality and add `@buffer` ?
",muxahuk,buffer
1083,2014-01-10 21:12:24,"I'd like to propose a new function: `can-extend($name)`

In the same spirit as the `*_exists` functions in master (at the time of this writing), a function to determine whether an `@extend`-only selector exists or not would be quite useful.

The specific use-case that this arose from was: extend if exists, otherwise create then extend.



This produces the (expected) output of:



The issue being that the `.menu, .side` declaration is now duplicated. This can get explosive:



Producing:



Which negates the whole point here. Rewriting the `@mixin` with a hypothetical function:



The above, of course, would _not_ redefine the `%column-*` selector if it exists. The `.a` - `.f` example would then produce only:



I don't fully understand the internals of how `@extend`-only selectors are handled by Sass, so perhaps this isn't feasible. I'd imagine that it would have otherwise been done already, provided that the implementation were similar enough to the other `*_exists` functions.
",northborndesign,extend
1083,2014-01-10 21:12:24,"I'd like to propose a new function: `can-extend($name)`

In the same spirit as the `*_exists` functions in master (at the time of this writing), a function to determine whether an `@extend`-only selector exists or not would be quite useful.

The specific use-case that this arose from was: extend if exists, otherwise create then extend.



This produces the (expected) output of:



The issue being that the `.menu, .side` declaration is now duplicated. This can get explosive:



Producing:



Which negates the whole point here. Rewriting the `@mixin` with a hypothetical function:



The above, of course, would _not_ redefine the `%column-*` selector if it exists. The `.a` - `.f` example would then produce only:



I don't fully understand the internals of how `@extend`-only selectors are handled by Sass, so perhaps this isn't feasible. I'd imagine that it would have otherwise been done already, provided that the implementation were similar enough to the other `*_exists` functions.
",northborndesign,mixin
1083,2014-01-10 21:26:29,"This isn't really possible, since `@extend` works with selectors either before or after the actual `@extend`, and functions are evaluated only with the knowledge of what came before. For example, there would be no correct way to compile this:


",nex3,extend
1083,2014-01-10 21:30:28,"Damn, I sort of feared that. I was initially going to propose that multiple instances of `@extend`-only selectors be merged (or something along that line) but quickly realized that would break all the things.

Is there no way to achieve the desired behavior as I outlined? Merging selectors would break everything, `can-extend` can't happen; any other possibilities?

Perhaps,



Subsequent attempts to redefine `%selector` would be ignored.

My `@mixin` would then be further simplified:



**Update** -- I just realized this could conflict with the ""selector target"" proposal of `parent > !target > child` I've seen floating around. Either way, a means of indicating that redefining an `@extend`-only would be ignored.
",northborndesign,extend
1083,2014-01-10 21:30:28,"Damn, I sort of feared that. I was initially going to propose that multiple instances of `@extend`-only selectors be merged (or something along that line) but quickly realized that would break all the things.

Is there no way to achieve the desired behavior as I outlined? Merging selectors would break everything, `can-extend` can't happen; any other possibilities?

Perhaps,



Subsequent attempts to redefine `%selector` would be ignored.

My `@mixin` would then be further simplified:



**Update** -- I just realized this could conflict with the ""selector target"" proposal of `parent > !target > child` I've seen floating around. Either way, a means of indicating that redefining an `@extend`-only would be ignored.
",northborndesign,mixin
1083,2014-01-10 21:49:15,"I don't think there's a great way to support this use case. In general, I feel like parameterized inclusions are a better fit for mixins anyway. I don't think you get much mileage out of using `@extend` here at all.
",nex3,extend
1083,2014-01-10 21:56:46,"I see your point; the `width` property in this case wouldn't eat many bytes. I was considering cases where the `@mixin` would produce more output, and thus duplication may be problematic (browser-prefixed gradients, shadows, etc.), however I suppose _that_ could be wrapped into an `@extend`-only selector manually.

It seemed like a good abstraction pattern.
",northborndesign,extend
1083,2014-01-10 21:56:46,"I see your point; the `width` property in this case wouldn't eat many bytes. I was considering cases where the `@mixin` would produce more output, and thus duplication may be problematic (browser-prefixed gradients, shadows, etc.), however I suppose _that_ could be wrapped into an `@extend`-only selector manually.

It seemed like a good abstraction pattern.
",northborndesign,mixin
1082,2014-01-13 20:19:51,"Did some more digging.  It's the CSS comment in there.  I imagine that's because it is in an @at-root without actually being in a declaration.  If I switch it from /\* to // the problem seems to go away. 
",Fernker,at-root
1081,2014-01-10 19:07:03,"**Feature**:

An @extend-mixin directive would be really handy when working with SASS code that's been encapsulated into a ruby gem (or other modular code package). 

It's basically a way of reopening the @mixin definition later in your code. The word ""Extend"" in the definition _might_ be confusing (because of the other Sass @extend directive); however, this is really just the idea of extending a mixin later in your code, just as one can extend a CSS class with the @extend directive.



This would allow you to tailor some mixins for your application without having to create additional mixins that @include or @extend the original one. It seems wrong to have to namespace all of the mixins with mysite-originalmixinname when the functionality stays pretty much the same. I'm sure it would have many other uses as well when it comes to complex OO, modular client-side apps. 

**Background: How I Ran Into This Problem**
When I use Sass gems for Rails projects or any Sass modular plugin, I often need to adjust a @mixin definition from its default. However, the original @mixin definition is buried in the Gem code, that I shouldn't be touching (e.g. ""@mixin container"" from the Susy gem).

What I'm trying to do is to edit/update/reopen/add-to a @mixin definition _without_:

a) going into the guts of the gem and editing the mixin definition directly
b) forking the entire Gem's repo
c) creating my own idiosyncratic 'mysite-container' mixin that @includes or @extends the original container. I'd like to keep the same name as the mixin in the original repo, for maintenance and other reasons.
",ariroseonline,includes
1081,2014-01-10 19:07:03,"**Feature**:

An @extend-mixin directive would be really handy when working with SASS code that's been encapsulated into a ruby gem (or other modular code package). 

It's basically a way of reopening the @mixin definition later in your code. The word ""Extend"" in the definition _might_ be confusing (because of the other Sass @extend directive); however, this is really just the idea of extending a mixin later in your code, just as one can extend a CSS class with the @extend directive.



This would allow you to tailor some mixins for your application without having to create additional mixins that @include or @extend the original one. It seems wrong to have to namespace all of the mixins with mysite-originalmixinname when the functionality stays pretty much the same. I'm sure it would have many other uses as well when it comes to complex OO, modular client-side apps. 

**Background: How I Ran Into This Problem**
When I use Sass gems for Rails projects or any Sass modular plugin, I often need to adjust a @mixin definition from its default. However, the original @mixin definition is buried in the Gem code, that I shouldn't be touching (e.g. ""@mixin container"" from the Susy gem).

What I'm trying to do is to edit/update/reopen/add-to a @mixin definition _without_:

a) going into the guts of the gem and editing the mixin definition directly
b) forking the entire Gem's repo
c) creating my own idiosyncratic 'mysite-container' mixin that @includes or @extends the original container. I'd like to keep the same name as the mixin in the original repo, for maintenance and other reasons.
",ariroseonline,extend
1081,2014-01-10 19:07:03,"**Feature**:

An @extend-mixin directive would be really handy when working with SASS code that's been encapsulated into a ruby gem (or other modular code package). 

It's basically a way of reopening the @mixin definition later in your code. The word ""Extend"" in the definition _might_ be confusing (because of the other Sass @extend directive); however, this is really just the idea of extending a mixin later in your code, just as one can extend a CSS class with the @extend directive.



This would allow you to tailor some mixins for your application without having to create additional mixins that @include or @extend the original one. It seems wrong to have to namespace all of the mixins with mysite-originalmixinname when the functionality stays pretty much the same. I'm sure it would have many other uses as well when it comes to complex OO, modular client-side apps. 

**Background: How I Ran Into This Problem**
When I use Sass gems for Rails projects or any Sass modular plugin, I often need to adjust a @mixin definition from its default. However, the original @mixin definition is buried in the Gem code, that I shouldn't be touching (e.g. ""@mixin container"" from the Susy gem).

What I'm trying to do is to edit/update/reopen/add-to a @mixin definition _without_:

a) going into the guts of the gem and editing the mixin definition directly
b) forking the entire Gem's repo
c) creating my own idiosyncratic 'mysite-container' mixin that @includes or @extends the original container. I'd like to keep the same name as the mixin in the original repo, for maintenance and other reasons.
",ariroseonline,extends
1081,2014-01-10 19:07:03,"**Feature**:

An @extend-mixin directive would be really handy when working with SASS code that's been encapsulated into a ruby gem (or other modular code package). 

It's basically a way of reopening the @mixin definition later in your code. The word ""Extend"" in the definition _might_ be confusing (because of the other Sass @extend directive); however, this is really just the idea of extending a mixin later in your code, just as one can extend a CSS class with the @extend directive.



This would allow you to tailor some mixins for your application without having to create additional mixins that @include or @extend the original one. It seems wrong to have to namespace all of the mixins with mysite-originalmixinname when the functionality stays pretty much the same. I'm sure it would have many other uses as well when it comes to complex OO, modular client-side apps. 

**Background: How I Ran Into This Problem**
When I use Sass gems for Rails projects or any Sass modular plugin, I often need to adjust a @mixin definition from its default. However, the original @mixin definition is buried in the Gem code, that I shouldn't be touching (e.g. ""@mixin container"" from the Susy gem).

What I'm trying to do is to edit/update/reopen/add-to a @mixin definition _without_:

a) going into the guts of the gem and editing the mixin definition directly
b) forking the entire Gem's repo
c) creating my own idiosyncratic 'mysite-container' mixin that @includes or @extends the original container. I'd like to keep the same name as the mixin in the original repo, for maintenance and other reasons.
",ariroseonline,include
1081,2014-01-10 19:07:03,"**Feature**:

An @extend-mixin directive would be really handy when working with SASS code that's been encapsulated into a ruby gem (or other modular code package). 

It's basically a way of reopening the @mixin definition later in your code. The word ""Extend"" in the definition _might_ be confusing (because of the other Sass @extend directive); however, this is really just the idea of extending a mixin later in your code, just as one can extend a CSS class with the @extend directive.



This would allow you to tailor some mixins for your application without having to create additional mixins that @include or @extend the original one. It seems wrong to have to namespace all of the mixins with mysite-originalmixinname when the functionality stays pretty much the same. I'm sure it would have many other uses as well when it comes to complex OO, modular client-side apps. 

**Background: How I Ran Into This Problem**
When I use Sass gems for Rails projects or any Sass modular plugin, I often need to adjust a @mixin definition from its default. However, the original @mixin definition is buried in the Gem code, that I shouldn't be touching (e.g. ""@mixin container"" from the Susy gem).

What I'm trying to do is to edit/update/reopen/add-to a @mixin definition _without_:

a) going into the guts of the gem and editing the mixin definition directly
b) forking the entire Gem's repo
c) creating my own idiosyncratic 'mysite-container' mixin that @includes or @extends the original container. I'd like to keep the same name as the mixin in the original repo, for maintenance and other reasons.
",ariroseonline,mixin
1081,2014-01-10 19:07:03,"**Feature**:

An @extend-mixin directive would be really handy when working with SASS code that's been encapsulated into a ruby gem (or other modular code package). 

It's basically a way of reopening the @mixin definition later in your code. The word ""Extend"" in the definition _might_ be confusing (because of the other Sass @extend directive); however, this is really just the idea of extending a mixin later in your code, just as one can extend a CSS class with the @extend directive.



This would allow you to tailor some mixins for your application without having to create additional mixins that @include or @extend the original one. It seems wrong to have to namespace all of the mixins with mysite-originalmixinname when the functionality stays pretty much the same. I'm sure it would have many other uses as well when it comes to complex OO, modular client-side apps. 

**Background: How I Ran Into This Problem**
When I use Sass gems for Rails projects or any Sass modular plugin, I often need to adjust a @mixin definition from its default. However, the original @mixin definition is buried in the Gem code, that I shouldn't be touching (e.g. ""@mixin container"" from the Susy gem).

What I'm trying to do is to edit/update/reopen/add-to a @mixin definition _without_:

a) going into the guts of the gem and editing the mixin definition directly
b) forking the entire Gem's repo
c) creating my own idiosyncratic 'mysite-container' mixin that @includes or @extends the original container. I'd like to keep the same name as the mixin in the original repo, for maintenance and other reasons.
",ariroseonline,extend-mixin
1081,2014-01-10 21:42:57,"This is a good idea.
What about `@append-in` and `@prepend-in` (to insert code before the original rules)?
",emagnier,append-in
1081,2014-01-10 21:42:57,"This is a good idea.
What about `@append-in` and `@prepend-in` (to insert code before the original rules)?
",emagnier,prepend-in
1081,2014-01-10 22:23:08,"@emagnier I really like @append-in. I'm trying to think of a use-case of @prepend-in. Can you think of one? Regardless, I think it's good to be explicit and complete in cases like these.
",ariroseonline,append-in
1081,2014-01-10 22:23:08,"@emagnier I really like @append-in. I'm trying to think of a use-case of @prepend-in. Can you think of one? Regardless, I think it's good to be explicit and complete in cases like these.
",ariroseonline,prepend-in
1080,2014-01-10 11:52:11,"Great suggestion, i second that.

But i bet @nex3 will say as usual that it's counter-intuitive, will confuse users and thus shall not be implemented.
",lolmaus,nex3
1076,2014-01-07 23:23:02,"I am using sass 3.2.12 on Windows.

I note that the `@import` directive begins to fail when it encounters a particularly long chain of relative paths.  Although I am happy to respect some limit in path length, the current failure state seems unnecessary: each successive import creates its relative path based on the relative path of all imports before it.  Observe this failure message:



Based on the error message, I infer that it is attempting to load a file using this very long path:



This monstrous path is 304 characters long, and I find it quite reasonable that such a long path should fail.  However, note all those "".."" bits in there!  If those were resolved, the _true_ path would be simply:



At only 81 characters, it seems much more reasonable.

If I rename `5_I_Am_Very_Well_Acquainted_Too_With_Matters_Mathematical/Mathematical.scss` to merely `5b/M.scss` (and adjust the corresponding `@import` statement), the problem goes away.

Although this example is contrived, I am actually encountering this in a real-world scenario.  While I am using compass, the problem occurs even when I use the sass compiler directly.

Thanks!
",altearius,import
1072,2014-01-07 01:23:28,"@chriseppstein Choose whichever solution you prefer and I'll squash.

The `assert_permutation` method should be generic enough to use it in other tests as well. However it is complex enough to warrant its own unit test.
",felixbuenemann,chriseppstein
1072,2014-01-15 00:44:01,"I toyed around with what it would take to make the Sass AST have a semantic equality check and it got hairy pretty fast.

None of these options make me particularly happy. Ultimately, I think we will find that and AST-based comparison is the most robust way of testing CSS equality -- especially as a way to test the output from other Sass implementations where minor output differences are irrelevant to be considered ""compatible"". However, for the time being, I think I prefer 28a99115b9b6925e22189d3d789ca019effba191 because it's a small fix even though it's not general.

@nex3 I leave the final decision to you.
",chriseppstein,nex3
1072,2014-01-15 00:52:25,"I've been playing around with this with sass-spec branches. Hard. Hard.
Hard.

On Tue, Jan 14, 2014 at 4:44 PM, Chris Eppstein notifications@github.comwrote:

> I toyed around with what it would take to make the Sass AST have a
> semantic equality check and it got hairy pretty fast.
> 
> None of these options make me particularly happy. Ultimately, I think we
> will find that and AST-based comparison is the most robust way of testing
> CSS equality -- especially as a way to test the output from other Sass
> implementations where minor output differences are irrelevant to be
> considered ""compatible"". However, for the time being, I think I prefer
> 28a9911https://github.com/nex3/sass/commit/28a99115b9b6925e22189d3d789ca019effba191because it's a small fix even though it's not general.
> 
> @nex3 https://github.com/nex3 I leave the final decision to you.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/1072#issuecomment-32324238
> .
",hcatlin,nex3
1072,2014-01-15 13:00:27,"I believe @nex3 already commented, that he would prefer to wait on the fix to ruby 2.1.0, which should land in the next minor release. I believe in that case ruby 2.1.0 should be marked as ""Allowed Failures"" on Travis CI for the time being.
",felixbuenemann,nex3
1071,2014-01-06 23:11:22,"Orignally filed by @ebidel on compass at: https://github.com/chriseppstein/compass/issues/1490

Shadow DOM's next Cat (^^) and Hat (^) selectors throw compiler errors. With it, one can write rules that penetrate the shadow boundary:



Reference:
https://github.com/html5rocks/www.html5rocks.com/blob/master/content/tutorials/webcomponents/shadowdom-201/en/index.md#the--and--combinators
",chriseppstein,ebidel
1071,2014-05-18 12:42:06,"+1 @stevenbirr . That is good to know. I don't code with Dart (yet) but a good amount of the Web Components community is using it. I guess the question should be is this a Dart problem or a SASS problem.
",Nevraeka,stevenbirr
1068,2014-01-06 08:15:37,"Hi, lolmaus:

If use `@each` for this case is very nice,but if i need like this:



it is not good with `@each`.
",airen,each
1062,2014-01-04 23:16:36,"I read through @nex3's code comments on the random function pull request and implemented the requested changes. I also added some extra tests that weren't requested.

See original pull request here: https://github.com/nex3/sass/pull/968
",hcatlin,nex3
1059,2013-12-30 07:35:58,"In some cases, it would be useful to use logical operators in `@if` (and anywhere else).

E.g.:



Depending of what is decided here: https://github.com/nex3/sass/issues/25 we could use `and` and/or `&&`, `or` and/or `||`, etc.
",emagnier,if
1056,2013-12-22 11:42:32,"I'm sorry, what is the question here?

I assume it is that  you need a fraction and that it's printing out the division? If that's the case, unfortunately it's a case of pre-Blink Opera deciding to go against the trend of all other implementors and the W3C itself and requiring `o-dpr` to be a string as opposed to a number, not an issue with Sass. When you write `1.3 / 1`, as pointed out by @nex3 in #1030, Sass assumes that a space followed by a mathematical operation followed by a space should, in fact, be a mathematical operation. When working in pre-processed land, that is the most logical thing to do. The answer is to simply print it out as a string.

If, on the other hand, the issue is that Sass should be smart enough to know you meant a fraction there and only there, I'm afraid you're going to be out of luck as A) that version of Opera's device pixel ratio feature doesn't exist in stable Opera any more and is actively being depreciated and B) Sass has a fairly strict rule of being blind to browser-specific problems and implementations in order to best be future friendly.
",Snugug,nex3
1055,2013-12-20 03:48:22,"@chriseppstein and I have decided that, given that `@at-root #{&}-suffix` doesn't work as well as we'd hoped, it's worth the downsides to support `&-suffix` on its own.

This should throw an error if it generates an invalid selector. This error should be clear about how that selector was constructed from the source code.
",nex3,at-root
1055,2013-12-20 03:48:22,"@chriseppstein and I have decided that, given that `@at-root #{&}-suffix` doesn't work as well as we'd hoped, it's worth the downsides to support `&-suffix` on its own.

This should throw an error if it generates an invalid selector. This error should be clear about how that selector was constructed from the source code.
",nex3,chriseppstein
1055,2013-12-20 03:57:52,"Does this mean the `@at-root` directive is being dropped, or simply the need to use interpolation on `&` ?

**edit** already answered https://gist.github.com/nex3/8050187
",xzyfer,at-root
1055,2013-12-20 04:05:35,"`@at-root` will not be dropped, although support for `&` in a script context is being delayed until the next release.

See also https://gist.github.com/nex3/8050187.
",nex3,at-root
1054,2013-12-19 04:25:13,"This is open to interpretation but since IMHO it violated the principal of least surprise I wanted to open the discussion.

Looping over the result of a function that may return `null`, like `map-get`, iterates once. I would have expected it to not iterate at all. 

**From the map-get docs**

> @return [Sass::Script::Value::Base] The value indexed by `$key`, or `null` if the map doesn't contain the given key



I suspect it's a result of sass' ""everything is a list of length 1"" rule. 
I understand this can be worked around by explicitly checking the return value of `return-list-or-null` before looping.

**edit** updated the example to be less trivial.
",xzyfer,return
1054,2013-12-20 02:11:59,"`null` isn't the same thing as the empty list. We have empty lists to represent empty lists.

My ideal behavior here would be for `@each` to throw an error, but unfortunately due to the nature of CSS lists we have to treat single values as singleton lists, which leads to this behavior inexorably.
",nex3,each
1052,2013-12-18 04:48:27,"## Intro

I declare some simple `@extend`-only selectors:



Then I `@extend` them accordingly:



Now, I noticed that when you nest a previously declared `@extend`-only selector, it compiles nicely:



Will compile to:



Which is great! Rather than rely on the implementations, I can rely on the abstractions, and the compiled CSS respects this containing all declared concretions as descendants of the container.
## Issue

However, if when declaring the concretions you also define descendant structure:



Everything kinda goes sour:



The problem here is that it compiles various permutations of the descendants of `.container`. This _bloats_ the CSS unnecessarily, since the intent was:



But not:



The resulting CSS will still ""work"" when used, but can easily get out of hand with respect to the selector lists generated, especially given the fact that `@extend` can get out of hand if you're not careful anyway.

Now, I suspect this is essentially the same ""expected behavior"" as described by @chriseppstein in his gist https://gist.github.com/chriseppstein/6114279 (except that this doesn't involve the parent selector `&`, I don't know if that was relevant to the question that prompted the gist)

Anyway, I think it would be more sensible that this be controlled with a flag or similar mechanism, provided this is possible at all. Based on the gist, it sounds like the extraneous selectors are being purposefully generated, so it'd be nice to see that made optional. Whether such a flag should be inline or global, I'm not sure.
## Full Example
### SCSS


### Expected Output


### Actual Output


",northborndesign,extend
1052,2013-12-18 04:48:27,"## Intro

I declare some simple `@extend`-only selectors:



Then I `@extend` them accordingly:



Now, I noticed that when you nest a previously declared `@extend`-only selector, it compiles nicely:



Will compile to:



Which is great! Rather than rely on the implementations, I can rely on the abstractions, and the compiled CSS respects this containing all declared concretions as descendants of the container.
## Issue

However, if when declaring the concretions you also define descendant structure:



Everything kinda goes sour:



The problem here is that it compiles various permutations of the descendants of `.container`. This _bloats_ the CSS unnecessarily, since the intent was:



But not:



The resulting CSS will still ""work"" when used, but can easily get out of hand with respect to the selector lists generated, especially given the fact that `@extend` can get out of hand if you're not careful anyway.

Now, I suspect this is essentially the same ""expected behavior"" as described by @chriseppstein in his gist https://gist.github.com/chriseppstein/6114279 (except that this doesn't involve the parent selector `&`, I don't know if that was relevant to the question that prompted the gist)

Anyway, I think it would be more sensible that this be controlled with a flag or similar mechanism, provided this is possible at all. Based on the gist, it sounds like the extraneous selectors are being purposefully generated, so it'd be nice to see that made optional. Whether such a flag should be inline or global, I'm not sure.
## Full Example
### SCSS


### Expected Output


### Actual Output


",northborndesign,chriseppstein
1050,2013-12-16 23:53:04,"_Edit_: The current plan here is to allow `@extend` across media queries by duplicating the queries the current `@extend` is in and unifying them with any media queries the extendee is in. For example:



would produce



and



would produce



Original issue follows:

---

As originally brought up in #456, one way to allow extending across media queries would be to have a flag for `@extend` to explicitly tell Sass that you're OK with creating a duplicate context in a similar fashion to how the `!optional` flag currently works. 

The syntax as currently proposed would look/work something like the following:



_would compile to_



Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical `@media` contexts (but include ones in `or` chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal `@extend` pattern of ""all"" doesn't quite make sense here, but because it is an explicit call, a user will understand that they're changing how it works.
",Snugug,extend
1050,2013-12-16 23:53:04,"_Edit_: The current plan here is to allow `@extend` across media queries by duplicating the queries the current `@extend` is in and unifying them with any media queries the extendee is in. For example:



would produce



and



would produce



Original issue follows:

---

As originally brought up in #456, one way to allow extending across media queries would be to have a flag for `@extend` to explicitly tell Sass that you're OK with creating a duplicate context in a similar fashion to how the `!optional` flag currently works. 

The syntax as currently proposed would look/work something like the following:



_would compile to_



Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical `@media` contexts (but include ones in `or` chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal `@extend` pattern of ""all"" doesn't quite make sense here, but because it is an explicit call, a user will understand that they're changing how it works.
",Snugug,media
1050,2013-12-29 19:28:16,"I like the idea of combining contexts/queries per extend, but not necessarily combining contexts/queries between different extends or with non-extended rulesets. My ideal would be:

#### SCSS



#### CSS



...keeping source order and general extend behavior as expected. For me, simplicity of behavior and sticking close to existing patterns trumps optimization. I'd prefer to combine all mqs with a post processor or optional Sass flag in a separate step.

I'm not sure what the status of this behavior (which has been proposed a couple times) is; if anyone knows of an issue tracking/rejecting it, please let me know. Really, anything that gets `@extend`s and MQs working together is good for me.
",robwierzbowski,extend
1050,2014-01-06 22:44:24,"My example was based off @Snugug's (which I think is valid). But disagreeing with the example is not a disagreement with the issue.

@chriseppstein Do you think we shouldn't be able to extend a(ny) value from within a media query? By which I mean apply `<rules>` to `<selector>`, where `<selector>` is `.class` or `@media (foo) { .class }`. 

In my experience this is one of the most often requested features in Sass, both verbally among my peers and from what I see in issue queues and comment threads on the internet.
",robwierzbowski,media
1050,2014-02-24 22:15:52,"The definition of `A { @extend B; }` is to style elements matching A as if it matched selector B.

The definition of `@media (some runtime expression) { A { @extend B; } }` is to style elements matching A as if matching B when the media matches some runtime expression.

I'm not trying to tell people that they are wrong for wanting this to work. I think they are right for wanting this to work. Hell, I want this to work. But the bottom line is that a precompiler simply cannot implement this semantic without yielding output that we've deemed as too magical and bloat prone.

I'm love that you guys want this feature. You're preaching to the choir. You need to take this argument up with the CSS working group. Until then, I feel the `@at-root` directive provides enough of an escape hatch for people who know what they are doing to accomplish their needs.

I don't see any point in continuing to beat this dead horse. 
",chriseppstein,extend
1050,2014-02-24 22:15:52,"The definition of `A { @extend B; }` is to style elements matching A as if it matched selector B.

The definition of `@media (some runtime expression) { A { @extend B; } }` is to style elements matching A as if matching B when the media matches some runtime expression.

I'm not trying to tell people that they are wrong for wanting this to work. I think they are right for wanting this to work. Hell, I want this to work. But the bottom line is that a precompiler simply cannot implement this semantic without yielding output that we've deemed as too magical and bloat prone.

I'm love that you guys want this feature. You're preaching to the choir. You need to take this argument up with the CSS working group. Until then, I feel the `@at-root` directive provides enough of an escape hatch for people who know what they are doing to accomplish their needs.

I don't see any point in continuing to beat this dead horse. 
",chriseppstein,media
1050,2014-02-24 22:15:52,"The definition of `A { @extend B; }` is to style elements matching A as if it matched selector B.

The definition of `@media (some runtime expression) { A { @extend B; } }` is to style elements matching A as if matching B when the media matches some runtime expression.

I'm not trying to tell people that they are wrong for wanting this to work. I think they are right for wanting this to work. Hell, I want this to work. But the bottom line is that a precompiler simply cannot implement this semantic without yielding output that we've deemed as too magical and bloat prone.

I'm love that you guys want this feature. You're preaching to the choir. You need to take this argument up with the CSS working group. Until then, I feel the `@at-root` directive provides enough of an escape hatch for people who know what they are doing to accomplish their needs.

I don't see any point in continuing to beat this dead horse. 
",chriseppstein,at-root
1050,2014-02-24 22:22:42,"I think it's reasonable to allow users to opt in to the extra bloat. As I mentioned above, it's clear that users aren't able to easily figure out how to use `@at-root` to work around this.
",nex3,at-root
1050,2014-02-24 22:45:05,"@nex3 I'm not convinced. We've only just introduced `@at-root` and there is a learning/education period that is required to decide that. Furthermore, we have a way to produce bloat: mixins. I am against making @extend sometimes a selector operation and sometimes a rule copy operation. I'd rather see users write mixins that conditionally extend or include. This is not a feature Sass needs to add.

Additionally, I feel this will only increase the confusion about how people think that placeholder selectors can only be used like simple mixin declarations (having no arguments) rather than the powerful selector concept that they are.
",chriseppstein,extend
1050,2014-02-24 22:45:05,"@nex3 I'm not convinced. We've only just introduced `@at-root` and there is a learning/education period that is required to decide that. Furthermore, we have a way to produce bloat: mixins. I am against making @extend sometimes a selector operation and sometimes a rule copy operation. I'd rather see users write mixins that conditionally extend or include. This is not a feature Sass needs to add.

Additionally, I feel this will only increase the confusion about how people think that placeholder selectors can only be used like simple mixin declarations (having no arguments) rather than the powerful selector concept that they are.
",chriseppstein,at-root
1050,2014-02-24 23:03:43,"> We've only just introduced @at-root and there is a learning/education period that is required to decide that.

Can you summarize tersely how to take any cross-media `@extend` and make it work using `@at-root`? I don't fully understand the process myself.

> Furthermore, we have a way to produce bloat: mixins. I am against making @extend sometimes a selector operation and sometimes a rule copy operation.

I would rather have users think of `@extend` as a semantic operation than in terms of its effect on the physical stylesheet. Making users switch between `@extend` and `@include` based on whether they're within a `@media` block makes the semantic abstraction more leaky, while having Sass make `@extend` itself work however necessary makes it less leaky.

> Additionally, I feel this will only increase the confusion about how people think that placeholder selectors can only be used like simple mixin declarations (having no arguments) rather than the powerful selector concept that they are.

I'd rather focus our education efforts here than on complex work-arounds for `@extend` in `@media`.
",nex3,extend
1050,2014-02-24 23:03:43,"> We've only just introduced @at-root and there is a learning/education period that is required to decide that.

Can you summarize tersely how to take any cross-media `@extend` and make it work using `@at-root`? I don't fully understand the process myself.

> Furthermore, we have a way to produce bloat: mixins. I am against making @extend sometimes a selector operation and sometimes a rule copy operation.

I would rather have users think of `@extend` as a semantic operation than in terms of its effect on the physical stylesheet. Making users switch between `@extend` and `@include` based on whether they're within a `@media` block makes the semantic abstraction more leaky, while having Sass make `@extend` itself work however necessary makes it less leaky.

> Additionally, I feel this will only increase the confusion about how people think that placeholder selectors can only be used like simple mixin declarations (having no arguments) rather than the powerful selector concept that they are.

I'd rather focus our education efforts here than on complex work-arounds for `@extend` in `@media`.
",nex3,at-root
1050,2014-02-24 23:03:43,"> We've only just introduced @at-root and there is a learning/education period that is required to decide that.

Can you summarize tersely how to take any cross-media `@extend` and make it work using `@at-root`? I don't fully understand the process myself.

> Furthermore, we have a way to produce bloat: mixins. I am against making @extend sometimes a selector operation and sometimes a rule copy operation.

I would rather have users think of `@extend` as a semantic operation than in terms of its effect on the physical stylesheet. Making users switch between `@extend` and `@include` based on whether they're within a `@media` block makes the semantic abstraction more leaky, while having Sass make `@extend` itself work however necessary makes it less leaky.

> Additionally, I feel this will only increase the confusion about how people think that placeholder selectors can only be used like simple mixin declarations (having no arguments) rather than the powerful selector concept that they are.

I'd rather focus our education efforts here than on complex work-arounds for `@extend` in `@media`.
",nex3,include
1050,2014-02-24 23:03:43,"> We've only just introduced @at-root and there is a learning/education period that is required to decide that.

Can you summarize tersely how to take any cross-media `@extend` and make it work using `@at-root`? I don't fully understand the process myself.

> Furthermore, we have a way to produce bloat: mixins. I am against making @extend sometimes a selector operation and sometimes a rule copy operation.

I would rather have users think of `@extend` as a semantic operation than in terms of its effect on the physical stylesheet. Making users switch between `@extend` and `@include` based on whether they're within a `@media` block makes the semantic abstraction more leaky, while having Sass make `@extend` itself work however necessary makes it less leaky.

> Additionally, I feel this will only increase the confusion about how people think that placeholder selectors can only be used like simple mixin declarations (having no arguments) rather than the powerful selector concept that they are.

I'd rather focus our education efforts here than on complex work-arounds for `@extend` in `@media`.
",nex3,media
1050,2014-02-24 23:31:58,"> Can you summarize tersely how to take any cross-media @extend and make it work using @at-root? I don't fully understand the process myself.

`@at-root (without: media) { & { extend .something; }}` removes the runtime context so that the extend operation can be performed as if it were not within a media context. This is useful in places where the base definition is a constant across all media definitions or is appropriately overridden via the cascade even when applied across media types.

> I would rather have users think of `@extend` as a semantic operation than in terms of its effect on the physical stylesheet.

I want this too. Opting-in using `!duplicate` or some other syntax makes the user think about it. Not requiring an opt-in causes huge surprise when the stylesheet bloats like using mixins. I think we have reached the boundary where `@extend` can be implemented in a preprocessor without being a leaky abstraction.

> I'd rather focus our education efforts here than on complex work-arounds for @extend in @media.

There is going to be education required no matter how we tackle this problem.
",chriseppstein,extend
1050,2014-02-24 23:31:58,"> Can you summarize tersely how to take any cross-media @extend and make it work using @at-root? I don't fully understand the process myself.

`@at-root (without: media) { & { extend .something; }}` removes the runtime context so that the extend operation can be performed as if it were not within a media context. This is useful in places where the base definition is a constant across all media definitions or is appropriately overridden via the cascade even when applied across media types.

> I would rather have users think of `@extend` as a semantic operation than in terms of its effect on the physical stylesheet.

I want this too. Opting-in using `!duplicate` or some other syntax makes the user think about it. Not requiring an opt-in causes huge surprise when the stylesheet bloats like using mixins. I think we have reached the boundary where `@extend` can be implemented in a preprocessor without being a leaky abstraction.

> I'd rather focus our education efforts here than on complex work-arounds for @extend in @media.

There is going to be education required no matter how we tackle this problem.
",chriseppstein,at-root
1050,2014-02-24 23:31:58,"> Can you summarize tersely how to take any cross-media @extend and make it work using @at-root? I don't fully understand the process myself.

`@at-root (without: media) { & { extend .something; }}` removes the runtime context so that the extend operation can be performed as if it were not within a media context. This is useful in places where the base definition is a constant across all media definitions or is appropriately overridden via the cascade even when applied across media types.

> I would rather have users think of `@extend` as a semantic operation than in terms of its effect on the physical stylesheet.

I want this too. Opting-in using `!duplicate` or some other syntax makes the user think about it. Not requiring an opt-in causes huge surprise when the stylesheet bloats like using mixins. I think we have reached the boundary where `@extend` can be implemented in a preprocessor without being a leaky abstraction.

> I'd rather focus our education efforts here than on complex work-arounds for @extend in @media.

There is going to be education required no matter how we tackle this problem.
",chriseppstein,media
1050,2014-02-25 00:43:59,"> `@at-root (without: media) { & { extend .something; }}` removes the runtime context so that the extend operation can be performed as if it were not within a media context. This is useful in places where the base definition is a constant across all media definitions or is appropriately overridden via the cascade even when applied across media types.

This doesn't scope the definition to the media query, though, which I think is what users are trying to express. Ensuring that the properties cascade so that a top-level extension works out is complicated and contingent on the specifics of the user's CSS.

> I want this too. Opting-in using `!duplicate` or some other syntax makes the user think about it. Not requiring an opt-in causes huge surprise when the stylesheet bloats like using mixins. I think we have reached the boundary where `@extend` can be implemented in a preprocessor without being a leaky abstraction.

I agree that the abstraction is still leaky, but `!duplicate` (or whatever) makes it less leaky, and there's value in that. `@extend` is how users expect to be able to express this -- we have ample evidence of that from the volume of requests we get for it to work.
",nex3,extend
1050,2014-02-25 00:43:59,"> `@at-root (without: media) { & { extend .something; }}` removes the runtime context so that the extend operation can be performed as if it were not within a media context. This is useful in places where the base definition is a constant across all media definitions or is appropriately overridden via the cascade even when applied across media types.

This doesn't scope the definition to the media query, though, which I think is what users are trying to express. Ensuring that the properties cascade so that a top-level extension works out is complicated and contingent on the specifics of the user's CSS.

> I want this too. Opting-in using `!duplicate` or some other syntax makes the user think about it. Not requiring an opt-in causes huge surprise when the stylesheet bloats like using mixins. I think we have reached the boundary where `@extend` can be implemented in a preprocessor without being a leaky abstraction.

I agree that the abstraction is still leaky, but `!duplicate` (or whatever) makes it less leaky, and there's value in that. `@extend` is how users expect to be able to express this -- we have ample evidence of that from the volume of requests we get for it to work.
",nex3,at-root
1050,2014-02-25 01:09:57,"I really appreciate the points on both sides here, and I think they're
making the argument for extend with a flag very strong. It's a syntax that
users expect, and the code result proposed is no larger than any equivalent
code produced by at-root.

I agree with Nathan that users (like myself) specifically want to extend
the styles but scope them to the query. I can imagine a couple ways of
creating mixins with at root that would accomplish this, but none so direct
or understandable as processing at the Sass level with extend.

On Monday, February 24, 2014, Nathan Weizenbaum notifications@github.com
wrote:

> @at-root (without: media) { & { extend .something; }} removes the runtime
> context so that the extend operation can be performed as if it were not
> within a media context. This is useful in places where the base definition
> is a constant across all media definitions or is appropriately overridden
> via the cascade even when applied across media types.
> 
> This doesn't scope the definition to the media query, though, which I
> think is what users are trying to express. Ensuring that the properties
> cascade so that a top-level extension works out is complicated and
> contingent on the specifics of the user's CSS.
> 
> I want this too. Opting-in using !duplicate or some other syntax makes
> the user think about it. Not requiring an opt-in causes huge surprise when
> the stylesheet bloats like using mixins. I think we have reached the
> boundary where @extend can be implemented in a preprocessor without being
> a leaky abstraction.
> 
> I agree that the abstraction is still leaky, but !duplicate (or whatever)
> makes it less leaky, and there's value in that. @extend is how users
> expect to be able to express this -- we have ample evidence of that from
> the volume of requests we get for it to work.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-35961979
> .

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,extend
1050,2014-02-25 01:09:57,"I really appreciate the points on both sides here, and I think they're
making the argument for extend with a flag very strong. It's a syntax that
users expect, and the code result proposed is no larger than any equivalent
code produced by at-root.

I agree with Nathan that users (like myself) specifically want to extend
the styles but scope them to the query. I can imagine a couple ways of
creating mixins with at root that would accomplish this, but none so direct
or understandable as processing at the Sass level with extend.

On Monday, February 24, 2014, Nathan Weizenbaum notifications@github.com
wrote:

> @at-root (without: media) { & { extend .something; }} removes the runtime
> context so that the extend operation can be performed as if it were not
> within a media context. This is useful in places where the base definition
> is a constant across all media definitions or is appropriately overridden
> via the cascade even when applied across media types.
> 
> This doesn't scope the definition to the media query, though, which I
> think is what users are trying to express. Ensuring that the properties
> cascade so that a top-level extension works out is complicated and
> contingent on the specifics of the user's CSS.
> 
> I want this too. Opting-in using !duplicate or some other syntax makes
> the user think about it. Not requiring an opt-in causes huge surprise when
> the stylesheet bloats like using mixins. I think we have reached the
> boundary where @extend can be implemented in a preprocessor without being
> a leaky abstraction.
> 
> I agree that the abstraction is still leaky, but !duplicate (or whatever)
> makes it less leaky, and there's value in that. @extend is how users
> expect to be able to express this -- we have ample evidence of that from
> the volume of requests we get for it to work.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-35961979
> .

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,at-root
1050,2014-02-26 07:18:00,"> We have the power to provide precisely the semantics they're asking for

Well, the semantics I'm seeing asked for don't make sense to me. Sometimes it acts like extend and sometimes it acts like include. I very much dislike this. The most important aspect of `@extend` is that is preserves the function of the cascade. The proposal on the table here is to copy things to the location of the @extend statement -- this is going to change the cascade and makes the implementation complex because the extend step now has to do a lot more than selector rewriting.

Instead, I think a solution would need to add @media directives all over the document -- wherever an extended selector is found; just like we do with selectors now.

An example:



would compile to:



The implementation of this is a lot less complex as well.
",chriseppstein,extend
1050,2014-02-26 07:18:00,"> We have the power to provide precisely the semantics they're asking for

Well, the semantics I'm seeing asked for don't make sense to me. Sometimes it acts like extend and sometimes it acts like include. I very much dislike this. The most important aspect of `@extend` is that is preserves the function of the cascade. The proposal on the table here is to copy things to the location of the @extend statement -- this is going to change the cascade and makes the implementation complex because the extend step now has to do a lot more than selector rewriting.

Instead, I think a solution would need to add @media directives all over the document -- wherever an extended selector is found; just like we do with selectors now.

An example:



would compile to:



The implementation of this is a lot less complex as well.
",chriseppstein,media
1050,2014-02-26 14:57:15,"> Sometimes it acts like extend and sometimes it acts like include.

Newcomers to Sass don't understand the difference or why it matters.

> The most important aspect of  @extend  is that is preserves the function of the cascade.

Again, most users don't understand this.  All they understand is that it consolidates selectors, which means more compact CSS to them (though this isn't always the case).  Users are disappointed that code like this doesn't work:



The normal expectation is that it would generate something like this:



To propose sprinkling extra media queries everywhere is the exact opposite of what users expect when they use extend (smaller CSS).  Easier to write doesn't make for a good experience.  Would adding a LESS-style include (where classes are also mixins with no arguments) really be that bad?  I don't think anyone cares what it's called (extend vs include vs copy-it-here-because-i-said-so), they just want the behavior.
",cimmanon,extend
1050,2014-02-26 15:03:59,"Sass isn't only for newcomers. Preserving source order at the expense of a
little more markup is a positive trade IMO.

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com

On Wed, Feb 26, 2014 at 9:57 AM, cimmanon notifications@github.com wrote:

>  Sometimes it acts like extend and sometimes it acts like include.
> 
> Newcomers to Sass don't understand the difference or why it matters.
> 
> The most important aspect of @extend https://github.com/extend is that
> is preserves the function of the cascade.
> 
> Again, most users don't understand this. All they understand is that it
> consolidates selectors, which means more compact CSS to them (though this
> isn't always the case). Users are disappointed that code like this doesn't
> work:
> 
> %clearfix {
>     /\* clearfix stuff */}
> .one {
>     color: blue;
>     @extend %clearfix;}
> .two {
>     color: green;
>     @media (min-width: 50em) {
>         @extend %clearfix;
>     }}
> .three {
>     @extend %clearfix;}
> .four {
>     color: orange;
>     @media (min-width: 40em) {
>         @extend %clearfix;
>     }}
> 
> The normal expectation is that it would generate something like this:
> 
> .one, .three {
>     /\* clearfix stuff _/}
> .one {
>     color: blue;}
> @media (min-width: 50em) {
>     .two {
>         color: green;
>         /_ clearfix stuff _/
>     }}
> @media (min-width: 40em) {
>     .four {
>         color: orange;
>         /_ clearfix stuff */
>     }}
> 
> To propose sprinkling extra media queries everywhere is the exact opposite
> of what users expect when they use media queries (smaller CSS). Easier to
> write doesn't make for a good experience. Would adding a LESS-style include
> (where classes are also mixins with no arguments) really be that bad? I
> don't think anyone cares what it's called (extend vs include vs
> copy-it-here-because-i-said-so), they just want the behavior.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-36133080
> .
",robwierzbowski,extend
1050,2014-02-26 15:03:59,"Sass isn't only for newcomers. Preserving source order at the expense of a
little more markup is a positive trade IMO.

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com

On Wed, Feb 26, 2014 at 9:57 AM, cimmanon notifications@github.com wrote:

>  Sometimes it acts like extend and sometimes it acts like include.
> 
> Newcomers to Sass don't understand the difference or why it matters.
> 
> The most important aspect of @extend https://github.com/extend is that
> is preserves the function of the cascade.
> 
> Again, most users don't understand this. All they understand is that it
> consolidates selectors, which means more compact CSS to them (though this
> isn't always the case). Users are disappointed that code like this doesn't
> work:
> 
> %clearfix {
>     /\* clearfix stuff */}
> .one {
>     color: blue;
>     @extend %clearfix;}
> .two {
>     color: green;
>     @media (min-width: 50em) {
>         @extend %clearfix;
>     }}
> .three {
>     @extend %clearfix;}
> .four {
>     color: orange;
>     @media (min-width: 40em) {
>         @extend %clearfix;
>     }}
> 
> The normal expectation is that it would generate something like this:
> 
> .one, .three {
>     /\* clearfix stuff _/}
> .one {
>     color: blue;}
> @media (min-width: 50em) {
>     .two {
>         color: green;
>         /_ clearfix stuff _/
>     }}
> @media (min-width: 40em) {
>     .four {
>         color: orange;
>         /_ clearfix stuff */
>     }}
> 
> To propose sprinkling extra media queries everywhere is the exact opposite
> of what users expect when they use media queries (smaller CSS). Easier to
> write doesn't make for a good experience. Would adding a LESS-style include
> (where classes are also mixins with no arguments) really be that bad? I
> don't think anyone cares what it's called (extend vs include vs
> copy-it-here-because-i-said-so), they just want the behavior.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-36133080
> .
",robwierzbowski,media
1050,2014-02-26 16:45:21,"> Newcomers to Sass don't understand the difference or why it matters.
> All they understand is that it consolidates selectors

@cimmanon, Whether or not they understand that there is a fundamental theory behind `@extend` is irrelevant. There is, and that theory is what makes it work consistently in practice for _all_ of our users.

> To propose sprinkling extra media queries everywhere is the exact opposite of what users expect

I get it and it's why we're talking about it. But I'm ok with things not matching expectations as long as there is a clear explanation that will help them understand. It is easy to construct an example where the output that was originally suggested would differ from the _behavior_ that is implied by the source code.

> Does it make sense to add a separate, media query-friendly include directive?

Not to me. I don't see a new fundamental abstraction here. Ultimately, if we ever make an optimizer, it could clean up this output and coalesce media queries according to heuristics, optimization levels, etc.
",chriseppstein,extend
1050,2014-02-26 17:07:35,"If I understand it correctly, I'm all for Chris's last suggested
implementation. Sounds like exactly what I'd expect, and would be crazy
useful.

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com

On Wed, Feb 26, 2014 at 11:45 AM, Chris Eppstein
notifications@github.comwrote:

>  Newcomers to Sass don't understand the difference or why it matters.
> All they understand is that it consolidates selectors
> 
> @cimmanon https://github.com/cimmanon, Whether or not they understand
> that there is a fundamental theory behind @extend is irrelevant. There
> is, and that theory is what makes it work consistently in practice for
> _all_ of our users.
> 
> To propose sprinkling extra media queries everywhere is the exact opposite
> of what users expect
> 
> I get it and it's why we're talking about it. But I'm ok with things not
> matching expectations as long as there is a clear explanation that will
> help them understand. It is easy to construct an example where the output
> that was originally suggested would differ from the _behavior_ that is
> implied by the source code.
> 
> Does it make sense to add a separate, media query-friendly include
> directive?
> 
> Not to me. I don't see a new fundamental abstraction here. Ultimately, if
> we ever make an optimizer, it could clean up this output and coalesce media
> queries according to heuristics, optimization levels, etc.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1050#issuecomment-36146497
> .
",robwierzbowski,extend
1050,2014-02-26 20:46:11,"To be clear, I'm not in favor of adding a flag here. If we're going to allow `@extend` within directives having a runtime dependency then we should just allow it. Furthermore, the strategy I outlined above works fine for `@supports`, `@media`, `@page` and even unknown directives.
",chriseppstein,page
1050,2014-02-26 20:46:11,"To be clear, I'm not in favor of adding a flag here. If we're going to allow `@extend` within directives having a runtime dependency then we should just allow it. Furthermore, the strategy I outlined above works fine for `@supports`, `@media`, `@page` and even unknown directives.
",chriseppstein,extend
1050,2014-02-26 20:46:11,"To be clear, I'm not in favor of adding a flag here. If we're going to allow `@extend` within directives having a runtime dependency then we should just allow it. Furthermore, the strategy I outlined above works fine for `@supports`, `@media`, `@page` and even unknown directives.
",chriseppstein,supports
1050,2014-02-26 20:46:11,"To be clear, I'm not in favor of adding a flag here. If we're going to allow `@extend` within directives having a runtime dependency then we should just allow it. Furthermore, the strategy I outlined above works fine for `@supports`, `@media`, `@page` and even unknown directives.
",chriseppstein,media
1050,2014-02-27 02:57:19,"> Well, the semantics I'm seeing asked for don't make sense to me. Sometimes it acts like extend and sometimes it acts like include. I very much dislike this.

By ""semantics"", I was referring to the styling semantics: the relationship between the Sass stylesheet and how the page is styled, not the relationship between the Sass stylesheet and the generated CSS. In terms of styling semantics, the proposed flag brings `@extend` closer to the stated goal of ""this element should be styled as though it also matches this selector"".

> Instead, I think a solution would need to add `@media` directives all over the document -- wherever an extended selector is found; just like we do with selectors now.

Sorry, I should have been clearer: this is what I'm arguing for. I didn't read @Snugug's example closely enough to figure out that it wasn't identical to this.

> To be clear, I'm not in favor of adding a flag here. If we're going to allow `@extend` within directives having a runtime dependency then we should just allow it. Furthermore, the strategy I outlined above works fine for `@supports`, `@media`, `@page` and even unknown directives.

I think a flag is important to avoid users having massive unexpected bloat, although I'm open to being convinced otherwise.
",nex3,extend
1050,2014-02-27 02:57:19,"> Well, the semantics I'm seeing asked for don't make sense to me. Sometimes it acts like extend and sometimes it acts like include. I very much dislike this.

By ""semantics"", I was referring to the styling semantics: the relationship between the Sass stylesheet and how the page is styled, not the relationship between the Sass stylesheet and the generated CSS. In terms of styling semantics, the proposed flag brings `@extend` closer to the stated goal of ""this element should be styled as though it also matches this selector"".

> Instead, I think a solution would need to add `@media` directives all over the document -- wherever an extended selector is found; just like we do with selectors now.

Sorry, I should have been clearer: this is what I'm arguing for. I didn't read @Snugug's example closely enough to figure out that it wasn't identical to this.

> To be clear, I'm not in favor of adding a flag here. If we're going to allow `@extend` within directives having a runtime dependency then we should just allow it. Furthermore, the strategy I outlined above works fine for `@supports`, `@media`, `@page` and even unknown directives.

I think a flag is important to avoid users having massive unexpected bloat, although I'm open to being convinced otherwise.
",nex3,supports
1050,2014-02-27 02:57:19,"> Well, the semantics I'm seeing asked for don't make sense to me. Sometimes it acts like extend and sometimes it acts like include. I very much dislike this.

By ""semantics"", I was referring to the styling semantics: the relationship between the Sass stylesheet and how the page is styled, not the relationship between the Sass stylesheet and the generated CSS. In terms of styling semantics, the proposed flag brings `@extend` closer to the stated goal of ""this element should be styled as though it also matches this selector"".

> Instead, I think a solution would need to add `@media` directives all over the document -- wherever an extended selector is found; just like we do with selectors now.

Sorry, I should have been clearer: this is what I'm arguing for. I didn't read @Snugug's example closely enough to figure out that it wasn't identical to this.

> To be clear, I'm not in favor of adding a flag here. If we're going to allow `@extend` within directives having a runtime dependency then we should just allow it. Furthermore, the strategy I outlined above works fine for `@supports`, `@media`, `@page` and even unknown directives.

I think a flag is important to avoid users having massive unexpected bloat, although I'm open to being convinced otherwise.
",nex3,media
1050,2014-02-27 02:57:19,"> Well, the semantics I'm seeing asked for don't make sense to me. Sometimes it acts like extend and sometimes it acts like include. I very much dislike this.

By ""semantics"", I was referring to the styling semantics: the relationship between the Sass stylesheet and how the page is styled, not the relationship between the Sass stylesheet and the generated CSS. In terms of styling semantics, the proposed flag brings `@extend` closer to the stated goal of ""this element should be styled as though it also matches this selector"".

> Instead, I think a solution would need to add `@media` directives all over the document -- wherever an extended selector is found; just like we do with selectors now.

Sorry, I should have been clearer: this is what I'm arguing for. I didn't read @Snugug's example closely enough to figure out that it wasn't identical to this.

> To be clear, I'm not in favor of adding a flag here. If we're going to allow `@extend` within directives having a runtime dependency then we should just allow it. Furthermore, the strategy I outlined above works fine for `@supports`, `@media`, `@page` and even unknown directives.

I think a flag is important to avoid users having massive unexpected bloat, although I'm open to being convinced otherwise.
",nex3,page
1050,2014-03-19 20:27:58,"I was ready to write an example usecase for how we'd love to be able to use `@extend` within a media query, but @cimmanon beat me to it. The clearfix example further up the thread is exactly what I was going to show. Until we can do exactly that, Sass 3.3 is crippled for making responsive sites while abstracting out code into placeholders (which is essential in my opinion).

After much exploring over the last couple years, by far the best way to handle responsive Sass is to write a module for mobile first, then sprinkle nested media queries in that module to keep everything in one, easily understood place. We simply can't do that reliably now because we can't use our placeholders the way we want to.

I'd love to see either solution. A flag on `@extend` to allow a new rule context within the media query or more media queries. Though it could be argued that the latter approach would bloat your output even more than starting a new rule context in the given media query. Really hope you guys come to an agreement on how to proceed.
",strann,extend
1050,2014-09-09 00:19:30,"Is it possible to turn something like this...



...into this?



Right now in order to keep things DRY, I need to A) create a @mixin where the bulk of the styling is, B) create a custom named %placeholder for every @media query, and C) @extend that custom named placeholder for every media query.

If I have 4 @media queries, that means I need to make %common-image-area, %common-image-area-2, %common-image-area-3, and %common-image-area-4 to work around the error message.

Maybe I'm missing something? I looked at the @at-root example but I don't think that accomplishes the above effect. Are there any examples on how to do this the SASS way?
",unyo,extend
1050,2014-09-09 00:19:30,"Is it possible to turn something like this...



...into this?



Right now in order to keep things DRY, I need to A) create a @mixin where the bulk of the styling is, B) create a custom named %placeholder for every @media query, and C) @extend that custom named placeholder for every media query.

If I have 4 @media queries, that means I need to make %common-image-area, %common-image-area-2, %common-image-area-3, and %common-image-area-4 to work around the error message.

Maybe I'm missing something? I looked at the @at-root example but I don't think that accomplishes the above effect. Are there any examples on how to do this the SASS way?
",unyo,media
1050,2014-09-09 00:19:30,"Is it possible to turn something like this...



...into this?



Right now in order to keep things DRY, I need to A) create a @mixin where the bulk of the styling is, B) create a custom named %placeholder for every @media query, and C) @extend that custom named placeholder for every media query.

If I have 4 @media queries, that means I need to make %common-image-area, %common-image-area-2, %common-image-area-3, and %common-image-area-4 to work around the error message.

Maybe I'm missing something? I looked at the @at-root example but I don't think that accomplishes the above effect. Are there any examples on how to do this the SASS way?
",unyo,at-root
1050,2014-09-09 00:19:30,"Is it possible to turn something like this...



...into this?



Right now in order to keep things DRY, I need to A) create a @mixin where the bulk of the styling is, B) create a custom named %placeholder for every @media query, and C) @extend that custom named placeholder for every media query.

If I have 4 @media queries, that means I need to make %common-image-area, %common-image-area-2, %common-image-area-3, and %common-image-area-4 to work around the error message.

Maybe I'm missing something? I looked at the @at-root example but I don't think that accomplishes the above effect. Are there any examples on how to do this the SASS way?
",unyo,mixin
1050,2014-09-12 21:48:28,"@nex3 The issue with mixins is the bloated output. people want to condence the output using comma selectors. I've been thinking that maybe we can simply add support to @extend to extend mixins.
",chriseppstein,extend
1050,2014-09-12 22:07:12,"The sort of bloat that mixins produce is the sort that gzip is very good at handling. I'd like to see data indicating that the post-gzip size of mixin-based stylesheets is substantially worse than extend-based equivalents before we compromise the semantics of `@extend`.

It also seems like the sort of thing that a post-perform optimization step could plausibly handle, depending on how smart it can be about combining rules.
",nex3,extend
1050,2016-01-13 09:14:38,"Was looking for a workaround and stumbled on [benschwarz/metaquery](https://github.com/benschwarz/metaquery). TL;DR: use Javascript to apply classes to <body> instead of media queries.

Otherwise I completely agree that this issue should be worked out. `@extend` is a huge chunk of SASS functionality, and at the point where developers _really_ care that much about file size they will be smart enough to optimize a different way.
",mattidupre,extend
1050,2016-10-04 21:33:50,"Many of us are still waiting on this feature to land. It seems like with all the discussion previously around this it'd have some more weight in its priority. 

The fact that you can't @extend from within a media query feels awkward. Can you generate mixins and workarounds? Sure, but you just expect it to work no matter where you @extend from as long as whatever you are extending is available to the file you are using it in.
",brandensilva,extend
1050,2017-01-12 12:07:43,"Are we any closer with this? I presume it's a case of not merging the media queries that contain `@extends` with the ones that don't? I doubt it's an easy feat either way.

I could really do with extending some utility classes (to maintain consistency above all) where it's otherwise awkward to use them in the markup _and_ with the @\<breakpoint> suffix.",jakdotspiral,extends
1046,2013-12-20 02:40:12,"I would assume that too, but an `a` inside a `.color1` element and a `.color2` element could be perceived as either `.color1 a` or `.color2 a`, hence why the ambiguity was specified with an `@extend`. Unsure if this is against the CSS standard, and that you should just assume the most nested, but either way, this is required to make the code work in Firefox for me.
",Undeterminant,extend
1046,2013-12-20 02:49:13,"The only difference is the specificity, but Sass makes very clear specificity guarantees with `@extend` that are being followed here (see [this comment](https://github.com/nex3/sass/issues/324#issuecomment-4607184) for more detail).
",nex3,extend
1043,2013-12-13 23:59:08,"Having them in an imported file should not make a difference and does not make a difference when tested. My suggestion is to build a reduced example and add back in code until you find your error; I'm willing to bet you have a syntax error somewhere, not that `@media screen` doesn't work.
",Snugug,media
1041,2013-12-12 01:38:50,"So I must miss something from the docs, because something as simple as `@media not(print)` doesn't work in my .scss (it gives `Syntax error: Invalid CSS after ""@media not"": expected ""{"", was ""(print) {""`).

If I change to `@media (not print)`, then it compiles without error, but to `@media (false)`.

What am I missing?

Sass 3.2.12, using SCSS syntax. Media queries are not nested inside rules.
",jcayzac,media
1041,2013-12-12 01:41:12,"`@media not print` works as expected. Still, the other ones are just as valid CSS.
",jcayzac,media
1041,2013-12-12 03:29:43,"Assuming I can read the syntax section of http://www.w3.org/TR/css3-mediaqueries/ correctly, the only syntactically correct example you've given is `@media not print`. The others are, in fact, invalid

> On Dec 11, 2013, at 8:41 PM, Julien Cayzac notifications@github.com wrote:
> 
> @media not print works as expected. Still, the other ones are just as valid CSS.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,media
1037,2013-12-16 23:09:58,"Does it still happen if you create a file using `touch file.scss` and then run `sass file.scss`?

The fact that your system encoding is set to ASCII is part of the problem. I'm not sure how to set it on OS X, but you probably want it to be UTF-8 instead.

I'm concerned that this is producing an error even on an empty file, though. It's possible your grunt task is eagerly loading Compass files, but I believe all of those have proper `@charset` annotations that Sass should respect.
",nex3,charset
1037,2014-08-18 23:19:12,"@munawarahmed You're using Sass 3.2, which is pretty old at this point. Can anyone reproduce this using Sass 3.3 or 3.4?
",nex3,munawarahmed
1036,2013-12-06 22:58:17,"The following SCSS behaves in a reasonable way:



It produces:



However, when we use `@at-root` and script `&` to do the same thing, it behaves very poorly:



It produces:



This is partly a consequence of the fact that `&` contains the full selector list; for example, in this context it's `(("".foo""), ("".bar""))` rather than just `("".foo"")` or `("".bar"")`. However, to fix this we'd need to make `&` ""fork"" the current rule; if you referred to it in the context of a comma rule, that rule would be split into two, each with `&` referring to one of the complex selectors.

It's possible the current behavior is acceptable, but I'm inclined to think that the different behavior between `&` and `#{&}` in addition to the uselessness of the current behavior in the context of comma selectors indicates that we should change it. In any case, we need to decide _before_ we release 3.3. @chriseppstein, what you think?

See also #1003.
",nex3,at-root
1036,2013-12-06 22:58:17,"The following SCSS behaves in a reasonable way:



It produces:



However, when we use `@at-root` and script `&` to do the same thing, it behaves very poorly:



It produces:



This is partly a consequence of the fact that `&` contains the full selector list; for example, in this context it's `(("".foo""), ("".bar""))` rather than just `("".foo"")` or `("".bar"")`. However, to fix this we'd need to make `&` ""fork"" the current rule; if you referred to it in the context of a comma rule, that rule would be split into two, each with `&` referring to one of the complex selectors.

It's possible the current behavior is acceptable, but I'm inclined to think that the different behavior between `&` and `#{&}` in addition to the uselessness of the current behavior in the context of comma selectors indicates that we should change it. In any case, we need to decide _before_ we release 3.3. @chriseppstein, what you think?

See also #1003.
",nex3,chriseppstein
1036,2013-12-08 01:33:28,"I agree with @nex3 on this one; the expected result is closer to the the non-@at-root output and should reflect that. While I agree that magical manipulations should be done with explicit calls, I don‚Äôt feel this is one of those instance and the current behavior is both generally useless and breaks an at-a-glance understanding of how it should work.  

On Saturday, December 7, 2013 at 8:26 PM, Chris Eppstein wrote:

> @lolmaus (https://github.com/lolmaus) What is hard to understand about & being passed to a well-named function?
> Exposing & to scripting is to enable complex selector manipulation. Magical selector manipulation can and should only happen through explicit and well-defined selector syntax.  
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/1036#issuecomment-30072474).
",Snugug,at-root
1036,2013-12-08 21:03:10,"@nex3 I've been thinking about your proposal and it is growing on me. Having `&` always represent a single selector and letting sass evaluate the selector expression once for each comma delimited selector does have a certain appeal. The only use case it precludes is letting the user have a more global view on several comma-delimited selectors and how they should be combined at the script level. However, I don't have a good use case for this and it could be introduced later by creating a special syntax for ""all the selectors"".

This is a big change to make for something that's already been called a release candidate, all the existing code that does `nth(&, 1)` or `@each $selector in &` will break. Caveat emptor?
",chriseppstein,each
1034,2013-12-06 05:52:50,"Sass 3.3 introduces the `!global` flag for modifying globals. Leaving this flag out emits a deprecation warning like below

> Assigning to global variable ""$modules"" by default is deprecated.
> In future versions of Sass, this will create a new local variable.
> If you want to assign to the global variable, use ""$modules: append($modules, $name) !global"" instead.

However adding the `!global` emits an error in sass 3.2. This is essentially a BC break since authors can't write code that'll compile in 3.2 and not emit deprecation warnings in 3.3.

I briefly mentioned this with @chriseppstein [on twitter](https://twitter.com/xzyfer/status/408828453031407616)
",xzyfer,chriseppstein
1034,2013-12-10 00:24:30,"I'd like to clarify.

The BC break will be from Sass 3.2 and Sass.next (3.4 or 4.0..). My rationale is that there is a lot of Sass code currently in the wild that relies on globals. All of that code will deprecation warnings in Sass 3.3 which I agree is the price of moving forward. However all that code will fail to compile (I presume) in Sass.next.

Since Sass 3.2 doesn't have the variable scoping that 3.3 has it makes writing some kinds of libraries that work in both 3.2 and .next impossible eg https://github.com/wilsonpage/sass-import-once/blob/master/_sass-import-once.scss. Correct me if I'm wrong.

I don't believe @chriseppstein was suggesting support for `!global` be added to 3.2, but instead patching 3.2 to ignore `!global` rather than causing a parse error.
",xzyfer,chriseppstein
1034,2013-12-10 14:25:59,"No amount of patching 3.2 is going to help people who already have 3.2.  No logical person is going to think of upgrading to a version that suppresses errors, assuming they even understand why they are getting errors in the first place.  I don't see how this differs from any other new feature Sass has added in the past (`@extend`, etc.).

Compass extensions have a way of specifying minimum versions of Sass or other dependencies in their gemspec:


",cimmanon,extend
1033,2013-12-13 13:59:43,"it works! please do the pull request @nex3 
thanks @glebm 
",ServusJon,nex3
1030,2013-12-14 01:13:06,"This isn't actually caused by the hyphen being consumed as part of an identifier, nor does it have anything to do with nested parentheses. It's caused by the space operator plus the unary `-` operator having higher precedence than the binary minus.

I think this is misleading enough that it's worth fixing. My instinct is that it's unlikely that anyone is relying on this behavior; browsers don't seem to consider `10px-20px` to be a valid substitute for `10px -20px`. I'm fine with fixing this without a deprecation period. @chriseppstein, what do you think?
",nex3,chriseppstein
1029,2013-11-30 15:44:29,"This simply adds `_dump` and `::load` methods for ImportNode, which avoids dumping the `@options` instance variable, which may be undumpable for reasons external to Sass. For example, sass-rails has anonymous classes and Hashes with default procs, neither of which can be marshaled, and prevents sass from doing its caching work.
",cheald,options
1028,2014-02-01 01:47:22,"Thanks to @nyarly and @IdahoEv on #1093, I've managed to track down what's going on here. It doesn't have anything to do with options at all. When we parse a Sass file, we attach source range information to each parsed node. These source ranges have enough information to determine precisely where the parsed node came from, which includes the importer that produced that node. It's marshaling these nodes that's causing the problem.

The question now is what to do about it. I don't think it's possible to eliminate the need for importers to be marshalable without making a breaking change to the importer API. The precise importer instance that existed when the node was created has to be available later to provide a public URL for the file in question -- a URL that may be based on the location of the sourcemap, which isn't known at cache-time.

We could add an additional method to `Importer::Base` to provide a means to associate importers with their source ranges, but in order to avoid serializing any importers this method would need to be implemented by all of them. That means that older importers would break with newer versions of Sass, which isn't something we want.

The final possibility is that Sprockets' importer make itself serializable. I get that it has unserializable context (although I'm not entirely clear on why), so perhaps the way to do this is to -- hackily -- rely on global state. If the context can be made globally available, `SassImporter` can implement `marshal_dump` and `marshal_load` to make itself serializable while it's cached.

I'm closing this issue, since I don't think there's anything Sass core can do about this. If anyone has any ideas, though, by all means let me know.
",nex3,nyarly
1028,2014-02-01 01:47:22,"Thanks to @nyarly and @IdahoEv on #1093, I've managed to track down what's going on here. It doesn't have anything to do with options at all. When we parse a Sass file, we attach source range information to each parsed node. These source ranges have enough information to determine precisely where the parsed node came from, which includes the importer that produced that node. It's marshaling these nodes that's causing the problem.

The question now is what to do about it. I don't think it's possible to eliminate the need for importers to be marshalable without making a breaking change to the importer API. The precise importer instance that existed when the node was created has to be available later to provide a public URL for the file in question -- a URL that may be based on the location of the sourcemap, which isn't known at cache-time.

We could add an additional method to `Importer::Base` to provide a means to associate importers with their source ranges, but in order to avoid serializing any importers this method would need to be implemented by all of them. That means that older importers would break with newer versions of Sass, which isn't something we want.

The final possibility is that Sprockets' importer make itself serializable. I get that it has unserializable context (although I'm not entirely clear on why), so perhaps the way to do this is to -- hackily -- rely on global state. If the context can be made globally available, `SassImporter` can implement `marshal_dump` and `marshal_load` to make itself serializable while it's cached.

I'm closing this issue, since I don't think there's anything Sass core can do about this. If anyone has any ideas, though, by all means let me know.
",nex3,IdahoEv
1028,2014-02-08 02:10:16,"Reviewing the situation on the Sprockets side, it seems like the Sprockets::SassImporter could _load without it's context object (which it uses so that on @import it can register the SASS file as a dependency of the parent asset bundle) and still fulfill the role of an Importer.

But looking at it like that, aren't Importers being used for two completely separate concerns: on the one hand, to locate and load source files, and then (having gone through a marshalling round trip) to satisfy requests generated by the browser from a source map?

In short, the Sprockets Importer _could_ be made to marshal back in a lobotomized form - since, as I understand it, on the other side of the marshalling, the importer no longer needs to update processing dependencies - but aren't Importers doing double duty here? Shouldn't there be a separate ""SourceMapper"" or something?
",nyarly,import
1027,2013-12-01 21:58:47,"Unit conversion (one to another, stripping units) is one I can think of off of the top of my head. The `unit` function returns in strings, so what we need to do now is one of a handful of hacks and improvised switch statements with `@if/else`.
",Snugug,if
1026,2013-12-07 00:50:10,"Usually we try to do this, but sometimes things get messy. Since @chriseppstein and I have a limited amount of time to devote to Sass in the first place, it's difficult to justify spending a lot of it tending the issue tracker to make sure all our duplicates point to the oldest possible thread, rather than working on actual code.
",nex3,chriseppstein
1025,2013-11-27 14:53:54,"I see where you're coming from, but overwriting the functions can be an advantage _or_ a disadvantage.  Compass overwrites the linear-gradient and radial-gradient functions to make prefixing easier while making writing the `@background` mixin's arguments look like natural CSS.
- http://compass-style.org/examples/compass/css3/gradient/
- https://github.com/chriseppstein/compass/blob/9ee6b422262668e8a7e154d2ac34f350ee331dc0/lib/compass/sass_extensions/functions/gradient_support.rb
",cimmanon,background
1025,2013-12-07 00:47:08,"I really don't like the idea of Sass having a list of known CSS functions. That list will inevitably get out-of-sync with the real world, eroding user confidence in its correctness and by extension Sass's correctness as a whole.

That said, in this specific instance, I could potentially see it working, since the list would only be used for emitting warnings and there will only be false negatives, not false positives (assuming CSS never removes an existing function). I would want to make this remain a warning, though; I don't want a list of supported CSS names affecting the behavior of Sass in a non-advisory way. @chriseppstein, what do you think?
",nex3,chriseppstein
1019,2013-11-22 18:43:57,"Reported by @xzyfer even after my recent performance fixes (#1006) landed.

https://docs.google.com/a/eppsteins.net/spreadsheet/ccc?key=0AtCLoNy3e0WXdEZERnZkc3pIUmVtSS1wdm5XQUZ4YlE&usp=sharing#gid=0

@xzyfer, can you please provide the source files used for that testing as a folder that we can run profiling against?
",chriseppstein,xzyfer
1019,2013-11-23 07:51:00,"FWIW the main culprits of the performance issues (not specifically regressions) we were able to identify were frequent list iteration, and surprisingly `@import`s. 

Our framework has a tree-like hierarchy. The result is many leaf files (components) have import branches that share mixin and function files. Since sass has no `import-once` semantic these duplicate files are imported multiple times. Removing the duplicate imports resulted in a noticeable speed up (IIRC ~15%), but isn't ideal as it puts the onus on the end user to resolve the dependency tree in their downstream projects when importing a component.
",xzyfer,import
1019,2014-06-02 12:04:52,"I also noticed a huge performance regression after updating sass, compass and susy.

I did a simple test with a loop and the most problematic function seems to come from susy:



This simple example compile in **12** seconds. Replacing the `+span(1)` with a simple css attribute like `width: 25%` and the compilation goes down to 0.670 seconds. I also tried to import susyone and changed the `+span(1)` with a `+span-columns(1)`. This made the compilation took only 1.477 seconds.

For reference, I also tested with `@extend`, `.js &` and calling a simple mixin but it didn't lead to any significant problem.
",idflood,extend
1019,2014-06-04 14:50:43,"Guys, I'm sorry, I feel like an idiot, but how do I repro?

If I use stable gems and a project generated with `compass create . -r susy -u susy` with `screen.sass` (otherwise I have no idea how to use `sass` with `susy` from a console without `compass`):



I get:



If I try to use current `master`:
- I get `_support.scss: Undefined variable: ""$experimental-support-for-mozilla""` I fixed that by adding `@import ""compass""`,
- but they I run into `@warn` issues: `Line 60 of _functions.scss: Invalid CSS after ""    @warn "": expected expression (e.g. 1px, bold), was """"Susy works bes...""`,
- after I comment out all `@warn` directives from the `susy` gem I still end up at: `Line 5: Undefined mixin 'span'.`,
- if I try to use `master` of `susy` bundler complains that `susy` wants `sass (~> 3.3.0) ruby`, while `master` of sass is at `sass (3.4.0.alpha)`.
",thedarkone,warn
1019,2014-06-04 14:50:43,"Guys, I'm sorry, I feel like an idiot, but how do I repro?

If I use stable gems and a project generated with `compass create . -r susy -u susy` with `screen.sass` (otherwise I have no idea how to use `sass` with `susy` from a console without `compass`):



I get:



If I try to use current `master`:
- I get `_support.scss: Undefined variable: ""$experimental-support-for-mozilla""` I fixed that by adding `@import ""compass""`,
- but they I run into `@warn` issues: `Line 60 of _functions.scss: Invalid CSS after ""    @warn "": expected expression (e.g. 1px, bold), was """"Susy works bes...""`,
- after I comment out all `@warn` directives from the `susy` gem I still end up at: `Line 5: Undefined mixin 'span'.`,
- if I try to use `master` of `susy` bundler complains that `susy` wants `sass (~> 3.3.0) ruby`, while `master` of sass is at `sass (3.4.0.alpha)`.
",thedarkone,import
1019,2014-07-04 09:10:05,"@idflood @chriseppstein that @tenderlove's article is easy to misunderstand. On MRI defining a method via `define_method` (instead of `class_eval`) uses 2x less memory **per method** definition, but as you've found out is slower **per method call** (about 30% slower on MRI, your diff of only about 2% is because overall not that much time is spent in invoking those methods). I don't think there is any difference in object allocation (or GC overhead) **per method call** between `define_method` and `class_eval`.
",thedarkone,tenderlove
1019,2015-04-30 20:49:19,"Just wanted to chime in that I went from 10s compile time down to 3s by replacing a few (10-12) `@extend` calls with mixins. Was primarily `@extend`ing `.row` and `.<size>-<columns>` classes from foundation. Hopefully it can be useful for testing.
",phaza,extend
1019,2016-02-24 18:32:19,"@phaza I was experiencing the same thing with Foundation(6). I was also extending .rows and .columns (the way I think they encourage, I could be wrong). Perhaps we should relay that to @zurb for an answer. It may be that those classes spider down deeply.
",mkstix6,zurb
1019,2016-08-29 19:52:24,"@phaza @mkstix6 I have also experienced performance issues with multiple`@extend` calls to bootstrap row/column/form classes, which led to 3-4 minute compile times.
",AlanFoster,extend
1015,2013-11-15 09:26:55,"Shouldn't URLs be maintained when importing .scss files from other directories?

e.g.

File structure:
css/
- main.scss
- dir/
- - dir.scss

main.scss:



dir.scss:



Generated CSS (in css/)



Shouldn't SASS see that the .scss file being imported is one directory above it and then move all directories up accordingly? So:



CSS @import will 'preserve' proper URLs not because it changes them (I think), but because each @import is handled as a separate HTTP request to the CSS file being 'imported'. 
",denniszhao,import
1015,2013-11-26 06:34:02,"I am trying to understand the opposition to this. `@import` was around before sass. Sass appropriated it so that the import is performed at compile time rather than request time. But then scss proceeds to break relative urls in it's implementation... 

I don't understand the viewpoint that urls would be ""mangled"" by fixing this. They'd be fixed, not mangled.

Nor do I understand @chriseppstein's point about 3rd party libs (and it's obvious he's given this thought). I think I need an example of where a fix for this might fail. My guess is it has something to do with urls pointing to dynamic endpoints? Eg `url(not/a/real/path/dynamic-image)`

(If we had been talking about fixing this in a `@sass-import` directive however, that would be different and I would understand the resistance).
",CrescentFresh,sass-import
1015,2013-11-26 06:34:02,"I am trying to understand the opposition to this. `@import` was around before sass. Sass appropriated it so that the import is performed at compile time rather than request time. But then scss proceeds to break relative urls in it's implementation... 

I don't understand the viewpoint that urls would be ""mangled"" by fixing this. They'd be fixed, not mangled.

Nor do I understand @chriseppstein's point about 3rd party libs (and it's obvious he's given this thought). I think I need an example of where a fix for this might fail. My guess is it has something to do with urls pointing to dynamic endpoints? Eg `url(not/a/real/path/dynamic-image)`

(If we had been talking about fixing this in a `@sass-import` directive however, that would be different and I would understand the resistance).
",CrescentFresh,import
1015,2013-11-29 03:04:53,"Wait, what about a ""base case"" of simply `@import(path/to/plain_old_stylesheet.css)`? (Ie not a scss file that must be parsed and compiled, that may contain mixins, that may call compass extensions, etc).

Just a plain stylesheet import. If `plain_old_stylesheet.css` includes the rule `background-image:url(a.png)`, why couldn't that rule be resolved to `background-image:url(path/to/a.png)` once inlined into the parent?

I think I get the problem with trying to address this when importing .scss case. But I feel like I'm missing something about this simple case.
",CrescentFresh,import
1015,2013-11-29 03:14:41,"Currently Sass [does neither parse nor embed](https://github.com/nex3/sass/issues/556) CSS files when importing them.

In your ""base case"" of simply `@import(path/to/plain_old_stylesheet.css)` you'll end up with an `@import(path/to/plain_old_stylesheet.css);` line in your resulting CSS.

You might want to ask in #556 for what you want.
",lolmaus,import
1015,2015-10-15 10:39:05,"Please make this an option. I'm using NPM (same for Bower though) to install bootstrap-sass and font-awesome. I then @import them in my app.scss. Both have fonts referenced. I use gulp to build my app. If I run a url reworker after the sass compilation, I can't get the original path because it's now all in app.css. If I run it before the sass compilation, there are no references because the `@import`s have not been processed yet. There is no way for me to fix the paths if Sass doesn't include an option for fixing relative urls, or at least providing some sort of hook.
",felixfbecker,import
1013,2013-11-13 15:20:26,"Apologies if this has been covered in one way or another.

I'd like to propose an `@end` keyword, which at file scope will end the parsing of that file. In the scope of an imported file, the `@end` keyword will return the parser to after the point of inclusion.

An example:



The reasoning is, at the time of this writing, `@import` cannot be performed conditionally, ( _IIRC for the purpose of static analysis_ ) which makes the ""import once"" practice difficult to implement without hacking the Sass core.



This keyword would only be valid at file-scope, and should be an error in `@mixin` or `@function` scope.
",northborndesign,mixin
1013,2013-11-13 15:20:26,"Apologies if this has been covered in one way or another.

I'd like to propose an `@end` keyword, which at file scope will end the parsing of that file. In the scope of an imported file, the `@end` keyword will return the parser to after the point of inclusion.

An example:



The reasoning is, at the time of this writing, `@import` cannot be performed conditionally, ( _IIRC for the purpose of static analysis_ ) which makes the ""import once"" practice difficult to implement without hacking the Sass core.



This keyword would only be valid at file-scope, and should be an error in `@mixin` or `@function` scope.
",northborndesign,function
1013,2013-11-13 15:20:26,"Apologies if this has been covered in one way or another.

I'd like to propose an `@end` keyword, which at file scope will end the parsing of that file. In the scope of an imported file, the `@end` keyword will return the parser to after the point of inclusion.

An example:



The reasoning is, at the time of this writing, `@import` cannot be performed conditionally, ( _IIRC for the purpose of static analysis_ ) which makes the ""import once"" practice difficult to implement without hacking the Sass core.



This keyword would only be valid at file-scope, and should be an error in `@mixin` or `@function` scope.
",northborndesign,end
1013,2013-11-13 15:20:26,"Apologies if this has been covered in one way or another.

I'd like to propose an `@end` keyword, which at file scope will end the parsing of that file. In the scope of an imported file, the `@end` keyword will return the parser to after the point of inclusion.

An example:



The reasoning is, at the time of this writing, `@import` cannot be performed conditionally, ( _IIRC for the purpose of static analysis_ ) which makes the ""import once"" practice difficult to implement without hacking the Sass core.



This keyword would only be valid at file-scope, and should be an error in `@mixin` or `@function` scope.
",northborndesign,import
1013,2013-11-13 15:26:41,"@lolmaus Definitely not. It's a file-scoped `@return`. There is no jumping; at least, nowhere but out of the file.
",northborndesign,return
1013,2013-11-13 15:35:15,"@bracketworks, you're right, but it's still kinda hacky. Ain't it more reasonable to request proper `@import-once` implementation rather than a hack?

Does this proposed feature has any applications other than a workaround for conditional importing?
",lolmaus,bracketworks
1013,2013-11-13 15:35:15,"@bracketworks, you're right, but it's still kinda hacky. Ain't it more reasonable to request proper `@import-once` implementation rather than a hack?

Does this proposed feature has any applications other than a workaround for conditional importing?
",lolmaus,import-once
1013,2013-11-13 15:39:08,"@cimmanon Definitely similar support elsewhere.
PHP ( _yea, I know, PHP_ ) allows one to `return` from a file, resulting in similar behavior.
ASP.NET C# Razor templating allows the same ( _the templates are processed to native C# methods, so the `return` keyword simply returns from a `void` method_ )

@lolmaus Off-hand the immediate use case is conditional imports, but it could be used in lieu of deeply nested `@if` blocks, to linearize the conditional output of a given file:


",northborndesign,if
1013,2013-11-13 15:42:50,"If we look at the [@import once](https://github.com/nex3/sass/issues/156) feature request, we can see that the maintainers are interested in offering this functionality in an upcoming release, and as they stated at SassConf, they are looking to move to a more rapid release cycle, pushing out features when they're ready instead of holding a bunch of features back for a huge release. This sounds like a hack for a hack for something that will be deprecated.

As for implementing `@import once` now, it's actually very easy to do mimic right now with literally no hacking of Sass proper. Take a look at [sass-import-once](https://github.com/wilsonpage/sass-import-once/blob/master/sass-import-once.scss). That's all that's needed to effectively have it working now.

As for the suggestion that it'd linearize conditional output, let's use @chriseppstein's yardstick for introducing new vocabulary to the Sass lexicon: does the new vocabulary significantly improve the clarity of code for someone who has never seen the language before, or is it just a ""nice to have"". How does @end improve the clarity over `@else if`? It doesn't even save any characters.
",Snugug,end
1013,2013-11-13 15:42:50,"If we look at the [@import once](https://github.com/nex3/sass/issues/156) feature request, we can see that the maintainers are interested in offering this functionality in an upcoming release, and as they stated at SassConf, they are looking to move to a more rapid release cycle, pushing out features when they're ready instead of holding a bunch of features back for a huge release. This sounds like a hack for a hack for something that will be deprecated.

As for implementing `@import once` now, it's actually very easy to do mimic right now with literally no hacking of Sass proper. Take a look at [sass-import-once](https://github.com/wilsonpage/sass-import-once/blob/master/sass-import-once.scss). That's all that's needed to effectively have it working now.

As for the suggestion that it'd linearize conditional output, let's use @chriseppstein's yardstick for introducing new vocabulary to the Sass lexicon: does the new vocabulary significantly improve the clarity of code for someone who has never seen the language before, or is it just a ""nice to have"". How does @end improve the clarity over `@else if`? It doesn't even save any characters.
",Snugug,else
1013,2013-11-13 15:42:50,"If we look at the [@import once](https://github.com/nex3/sass/issues/156) feature request, we can see that the maintainers are interested in offering this functionality in an upcoming release, and as they stated at SassConf, they are looking to move to a more rapid release cycle, pushing out features when they're ready instead of holding a bunch of features back for a huge release. This sounds like a hack for a hack for something that will be deprecated.

As for implementing `@import once` now, it's actually very easy to do mimic right now with literally no hacking of Sass proper. Take a look at [sass-import-once](https://github.com/wilsonpage/sass-import-once/blob/master/sass-import-once.scss). That's all that's needed to effectively have it working now.

As for the suggestion that it'd linearize conditional output, let's use @chriseppstein's yardstick for introducing new vocabulary to the Sass lexicon: does the new vocabulary significantly improve the clarity of code for someone who has never seen the language before, or is it just a ""nice to have"". How does @end improve the clarity over `@else if`? It doesn't even save any characters.
",Snugug,chriseppstein
1013,2013-11-13 15:42:50,"If we look at the [@import once](https://github.com/nex3/sass/issues/156) feature request, we can see that the maintainers are interested in offering this functionality in an upcoming release, and as they stated at SassConf, they are looking to move to a more rapid release cycle, pushing out features when they're ready instead of holding a bunch of features back for a huge release. This sounds like a hack for a hack for something that will be deprecated.

As for implementing `@import once` now, it's actually very easy to do mimic right now with literally no hacking of Sass proper. Take a look at [sass-import-once](https://github.com/wilsonpage/sass-import-once/blob/master/sass-import-once.scss). That's all that's needed to effectively have it working now.

As for the suggestion that it'd linearize conditional output, let's use @chriseppstein's yardstick for introducing new vocabulary to the Sass lexicon: does the new vocabulary significantly improve the clarity of code for someone who has never seen the language before, or is it just a ""nice to have"". How does @end improve the clarity over `@else if`? It doesn't even save any characters.
",Snugug,import
1013,2013-11-13 15:52:28,"@Snugug The linked `sass-import-once` seems to be the de facto solution, copied, pasted, and reinvented regularly, however the drawback is:



I'm very much looking forward to native `@import once`, don't get me wrong.

As far as it's measure of improvement; it is ""nice to have"", perhaps ""very nice to have"" ( _though I'll concede, not's not ""required""_ ). Code clarity is improved because the mental overhead of nested conditions is reduced.

A more familiar keyword, such as `@return` may assist those coming to the language, I'm not sure. I know that, given it were named `@return`, it would behave rather predictably based on my experience with other environments, namely templating languages. I assume because both PHP and ASP.NET ( _with Razor_ ) are ubiquitous, it wouldn't be a far stretch.
",northborndesign,return
1013,2013-11-13 15:52:28,"@Snugug The linked `sass-import-once` seems to be the de facto solution, copied, pasted, and reinvented regularly, however the drawback is:



I'm very much looking forward to native `@import once`, don't get me wrong.

As far as it's measure of improvement; it is ""nice to have"", perhaps ""very nice to have"" ( _though I'll concede, not's not ""required""_ ). Code clarity is improved because the mental overhead of nested conditions is reduced.

A more familiar keyword, such as `@return` may assist those coming to the language, I'm not sure. I know that, given it were named `@return`, it would behave rather predictably based on my experience with other environments, namely templating languages. I assume because both PHP and ASP.NET ( _with Razor_ ) are ubiquitous, it wouldn't be a far stretch.
",northborndesign,import
1013,2013-11-13 16:05:31,"We already have a `@return` method, it's for functions.

I still don't see how:



Is inherently more clear and has less of a mental overhead than



The former requires more code and breaks out of our file before the second `@if` is called from inside the first `@if`, which is a huge break in the current mental model for sequential `@if` statements, which in every other language (and in Sass as it exists now) are both expected to get evaluated. The mental model around `@else if` is precisely ""I want this or this or this"".

As for the suggestion that it's in PHP and therefore it's okay, [to quote @chriseppstein](https://github.com/nex3/sass/issues/626#issuecomment-27711024):

> [W]e do not take any inspiration from the language design of PHP and most programmers view PHP as the quintessential example of bad language design

Moreover, returning from an include file in PHP [is considered bad coding style](http://stackoverflow.com/questions/1314162/return-from-include-file#comment1147017_1314198), even for PHP.
",Snugug,return
1013,2013-11-13 16:05:31,"We already have a `@return` method, it's for functions.

I still don't see how:



Is inherently more clear and has less of a mental overhead than



The former requires more code and breaks out of our file before the second `@if` is called from inside the first `@if`, which is a huge break in the current mental model for sequential `@if` statements, which in every other language (and in Sass as it exists now) are both expected to get evaluated. The mental model around `@else if` is precisely ""I want this or this or this"".

As for the suggestion that it's in PHP and therefore it's okay, [to quote @chriseppstein](https://github.com/nex3/sass/issues/626#issuecomment-27711024):

> [W]e do not take any inspiration from the language design of PHP and most programmers view PHP as the quintessential example of bad language design

Moreover, returning from an include file in PHP [is considered bad coding style](http://stackoverflow.com/questions/1314162/return-from-include-file#comment1147017_1314198), even for PHP.
",Snugug,if
1013,2013-11-13 16:05:31,"We already have a `@return` method, it's for functions.

I still don't see how:



Is inherently more clear and has less of a mental overhead than



The former requires more code and breaks out of our file before the second `@if` is called from inside the first `@if`, which is a huge break in the current mental model for sequential `@if` statements, which in every other language (and in Sass as it exists now) are both expected to get evaluated. The mental model around `@else if` is precisely ""I want this or this or this"".

As for the suggestion that it's in PHP and therefore it's okay, [to quote @chriseppstein](https://github.com/nex3/sass/issues/626#issuecomment-27711024):

> [W]e do not take any inspiration from the language design of PHP and most programmers view PHP as the quintessential example of bad language design

Moreover, returning from an include file in PHP [is considered bad coding style](http://stackoverflow.com/questions/1314162/return-from-include-file#comment1147017_1314198), even for PHP.
",Snugug,chriseppstein
1013,2013-11-13 16:05:31,"We already have a `@return` method, it's for functions.

I still don't see how:



Is inherently more clear and has less of a mental overhead than



The former requires more code and breaks out of our file before the second `@if` is called from inside the first `@if`, which is a huge break in the current mental model for sequential `@if` statements, which in every other language (and in Sass as it exists now) are both expected to get evaluated. The mental model around `@else if` is precisely ""I want this or this or this"".

As for the suggestion that it's in PHP and therefore it's okay, [to quote @chriseppstein](https://github.com/nex3/sass/issues/626#issuecomment-27711024):

> [W]e do not take any inspiration from the language design of PHP and most programmers view PHP as the quintessential example of bad language design

Moreover, returning from an include file in PHP [is considered bad coding style](http://stackoverflow.com/questions/1314162/return-from-include-file#comment1147017_1314198), even for PHP.
",Snugug,else
1013,2013-11-13 16:15:50,"@else seems to solve this issue pretty cleanly and in a predictable way.

On Wednesday, November 13, 2013, Snugug wrote:

> We already have a @return method, it's for functions.
> 
> I still don't see how:
> 
> @if ($foo) {
>    ‚Ä¶
>    @end;}
> @if ($bar) {
>   ‚Ä¶
>   @end;}
> 
> Is inherently more clear and has less of a mental overhead than
> 
> @if ($foo) {
>    ‚Ä¶}@else if ($bar) {
>   ‚Ä¶}
> 
> The former requires more code and breaks out of our file before the second
> @if is called from inside the first @if, which is a huge break in the
> current mental model for sequential @if statements, which in every other
> language (and in Sass as it exists now) are both expected to get evaluated.
> The mental model around @else if is precisely ""I want this or this or
> this"".
> 
> As for the suggestion that it's in PHP and therefore it's okay, to quote
> @chriseppsteinhttps://github.com/nex3/sass/issues/626#issuecomment-27711024
> :
> 
> [W]e do not take any inspiration from the language design of PHP and most
> programmers view PHP as the quintessential example of bad language design
> 
> Moreover, returning from an include file in PHP is considered bad coding
> stylehttp://stackoverflow.com/questions/1314162/return-from-include-file#comment1147017_1314198,
> even for PHP.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1013#issuecomment-28407205
> .
",hcatlin,return
1013,2013-11-13 16:15:50,"@else seems to solve this issue pretty cleanly and in a predictable way.

On Wednesday, November 13, 2013, Snugug wrote:

> We already have a @return method, it's for functions.
> 
> I still don't see how:
> 
> @if ($foo) {
>    ‚Ä¶
>    @end;}
> @if ($bar) {
>   ‚Ä¶
>   @end;}
> 
> Is inherently more clear and has less of a mental overhead than
> 
> @if ($foo) {
>    ‚Ä¶}@else if ($bar) {
>   ‚Ä¶}
> 
> The former requires more code and breaks out of our file before the second
> @if is called from inside the first @if, which is a huge break in the
> current mental model for sequential @if statements, which in every other
> language (and in Sass as it exists now) are both expected to get evaluated.
> The mental model around @else if is precisely ""I want this or this or
> this"".
> 
> As for the suggestion that it's in PHP and therefore it's okay, to quote
> @chriseppsteinhttps://github.com/nex3/sass/issues/626#issuecomment-27711024
> :
> 
> [W]e do not take any inspiration from the language design of PHP and most
> programmers view PHP as the quintessential example of bad language design
> 
> Moreover, returning from an include file in PHP is considered bad coding
> stylehttp://stackoverflow.com/questions/1314162/return-from-include-file#comment1147017_1314198,
> even for PHP.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1013#issuecomment-28407205
> .
",hcatlin,end
1013,2013-11-13 16:15:50,"@else seems to solve this issue pretty cleanly and in a predictable way.

On Wednesday, November 13, 2013, Snugug wrote:

> We already have a @return method, it's for functions.
> 
> I still don't see how:
> 
> @if ($foo) {
>    ‚Ä¶
>    @end;}
> @if ($bar) {
>   ‚Ä¶
>   @end;}
> 
> Is inherently more clear and has less of a mental overhead than
> 
> @if ($foo) {
>    ‚Ä¶}@else if ($bar) {
>   ‚Ä¶}
> 
> The former requires more code and breaks out of our file before the second
> @if is called from inside the first @if, which is a huge break in the
> current mental model for sequential @if statements, which in every other
> language (and in Sass as it exists now) are both expected to get evaluated.
> The mental model around @else if is precisely ""I want this or this or
> this"".
> 
> As for the suggestion that it's in PHP and therefore it's okay, to quote
> @chriseppsteinhttps://github.com/nex3/sass/issues/626#issuecomment-27711024
> :
> 
> [W]e do not take any inspiration from the language design of PHP and most
> programmers view PHP as the quintessential example of bad language design
> 
> Moreover, returning from an include file in PHP is considered bad coding
> stylehttp://stackoverflow.com/questions/1314162/return-from-include-file#comment1147017_1314198,
> even for PHP.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1013#issuecomment-28407205
> .
",hcatlin,else
1013,2013-11-13 16:15:50,"@else seems to solve this issue pretty cleanly and in a predictable way.

On Wednesday, November 13, 2013, Snugug wrote:

> We already have a @return method, it's for functions.
> 
> I still don't see how:
> 
> @if ($foo) {
>    ‚Ä¶
>    @end;}
> @if ($bar) {
>   ‚Ä¶
>   @end;}
> 
> Is inherently more clear and has less of a mental overhead than
> 
> @if ($foo) {
>    ‚Ä¶}@else if ($bar) {
>   ‚Ä¶}
> 
> The former requires more code and breaks out of our file before the second
> @if is called from inside the first @if, which is a huge break in the
> current mental model for sequential @if statements, which in every other
> language (and in Sass as it exists now) are both expected to get evaluated.
> The mental model around @else if is precisely ""I want this or this or
> this"".
> 
> As for the suggestion that it's in PHP and therefore it's okay, to quote
> @chriseppsteinhttps://github.com/nex3/sass/issues/626#issuecomment-27711024
> :
> 
> [W]e do not take any inspiration from the language design of PHP and most
> programmers view PHP as the quintessential example of bad language design
> 
> Moreover, returning from an include file in PHP is considered bad coding
> stylehttp://stackoverflow.com/questions/1314162/return-from-include-file#comment1147017_1314198,
> even for PHP.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1013#issuecomment-28407205
> .
",hcatlin,if
1013,2013-11-13 16:15:50,"@else seems to solve this issue pretty cleanly and in a predictable way.

On Wednesday, November 13, 2013, Snugug wrote:

> We already have a @return method, it's for functions.
> 
> I still don't see how:
> 
> @if ($foo) {
>    ‚Ä¶
>    @end;}
> @if ($bar) {
>   ‚Ä¶
>   @end;}
> 
> Is inherently more clear and has less of a mental overhead than
> 
> @if ($foo) {
>    ‚Ä¶}@else if ($bar) {
>   ‚Ä¶}
> 
> The former requires more code and breaks out of our file before the second
> @if is called from inside the first @if, which is a huge break in the
> current mental model for sequential @if statements, which in every other
> language (and in Sass as it exists now) are both expected to get evaluated.
> The mental model around @else if is precisely ""I want this or this or
> this"".
> 
> As for the suggestion that it's in PHP and therefore it's okay, to quote
> @chriseppsteinhttps://github.com/nex3/sass/issues/626#issuecomment-27711024
> :
> 
> [W]e do not take any inspiration from the language design of PHP and most
> programmers view PHP as the quintessential example of bad language design
> 
> Moreover, returning from an include file in PHP is considered bad coding
> stylehttp://stackoverflow.com/questions/1314162/return-from-include-file#comment1147017_1314198,
> even for PHP.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/1013#issuecomment-28407205
> .
",hcatlin,chriseppsteinhttps
1013,2013-11-13 16:23:32,"We've digressed a bit. The reason behind my suggestion was that `@end` allows one to escape from a file primarily for the `@import once` use case. Since we cannot conditionally `@import` files, we can achieve the desired behavior by conditionally _leaving_ the file preemptively.

I haven't followed the discussion on `@import once` as intently as others have, however the longevity of the discussion lacking implementation reinforces the difficulty of implementing it. I have suggested this as an alternative that may or may not have less implementation overhead.

The condition linearization was merely icing.

Also @Snugug, note:

> PHP ( yea, I know, PHP ) [...]

As a PHP developer, I'm very aware of the ... problems. I participate in discussion with core contributors to improve the ""rat's nest"" that is PHP. I assure you this idea arose in isolation, with no inspiration from PHP. It was merely an example of another language exhibiting similar behavior ( _along with ASP.NET Razor_ )
",northborndesign,end
1013,2013-11-13 16:23:32,"We've digressed a bit. The reason behind my suggestion was that `@end` allows one to escape from a file primarily for the `@import once` use case. Since we cannot conditionally `@import` files, we can achieve the desired behavior by conditionally _leaving_ the file preemptively.

I haven't followed the discussion on `@import once` as intently as others have, however the longevity of the discussion lacking implementation reinforces the difficulty of implementing it. I have suggested this as an alternative that may or may not have less implementation overhead.

The condition linearization was merely icing.

Also @Snugug, note:

> PHP ( yea, I know, PHP ) [...]

As a PHP developer, I'm very aware of the ... problems. I participate in discussion with core contributors to improve the ""rat's nest"" that is PHP. I assure you this idea arose in isolation, with no inspiration from PHP. It was merely an example of another language exhibiting similar behavior ( _along with ASP.NET Razor_ )
",northborndesign,import
1013,2013-11-13 16:45:09,"If we do something like this, it would probably be to expose @return to mixins to provide an early exit. Definitely not going to add a bare return from a file.

Furthermore, I'd rather make imports allowed in conditional contexts as I've outlined in #739 so that the file doing the import can simply decide to import or not import other partials.
",chriseppstein,return
1013,2013-11-13 17:56:55,"> @Snugug 
> As for the suggestion that it's in PHP and therefore it's okay, to quote @chriseppstein:
> 
> > [W]e do not take any inspiration from the language design of PHP and most programmers view PHP as the quintessential example of bad language design

How about `require_once`? It appears to me as a feature that Sass would benefit from.

Consider the situation: two separate modules both depend on Toolkit, and Toolkit unconditionally emits some CSS when required. An `@import-once` could resolve the issue without a need to manually implement it in every Compass extension (you didn't do it for Toolkit, so...).
",lolmaus,import-once
1013,2013-12-06 04:45:44,"@bracketworks @lolmaus fwiw import-once semantics have now landed in compass/master https://github.com/chriseppstein/compass/issues/1463
",xzyfer,bracketworks
1012,2013-11-13 02:59:12,"Not sure if this is a feature request already, but I think it would be very helpful to still see the placeholder selectors in CSS via comments. It's possible to output them dynamically via @mixins, but because they're silent, it may be harder to tell what selectors are available for use. This would become an issue when using code written by others and debugging. 
",alice-liu,mixins
1010,2013-11-09 19:06:57,"It would be useful to query other contexts like `@meida` and style properties other than selectors using the new SassScript &.

Maybe something like this:



And for style properties:


",scottkellum,meida
1010,2014-10-19 16:22:01,"@scottkellum :-) It may have been (very) unclear from my part ‚Äì but I also wanted to add the question about mapping to the discussion. If we look at the [Multiple Context Query example](https://github.com/at-import/breakpoint/wiki/Breakpoint-Context): 



The amount of handling needed in @mixin tool could be quite heavy - unit conversion, min-max-width ranges, how to handle in combination with orientation, resolution or...   



My thought was to steer clear of this menace by letting the user declare the relationship between a query and the expected tool output ‚Äì and using keys seemed a little less verbose compared to queries:



You could also (and this is where I see the feature use case) provide a map to the tool with the media queries and a expected return value. But It still requires the mapping to be made ‚Äì and I think you would like the user to be in control while keeping your tool simple (as in tool not framework)  

Did it make sense?
",jakob-e,mixin
1010,2014-10-19 17:47:21,"@jakob-e Ah, I am still not quite grokking your examples but, interesting. So you are expecting the output of the proposed `&(media)` or whatever to be a map of `@media` properties?



Where `$media` would be a map that looks like:



I really like this, it‚Äôs really similar to how Breakpoint works. As a core language feature it may need some tweaking though to support comma separated media lists. This can get super complicated fairly quickly with an example like this:



where you end up with a `@media` context of:



and your `&(media)` might return a map like:



Again, not quite grokking your last post but going line by line for measure:

> The amount of handling needed in @mixin tool could be quite heavy - unit conversion, min-max-width ranges, how to handle in combination with orientation, resolution or...

It could be, but in most cases doesn‚Äôt need to be. In most cases just knowing the first `min-width` call in whatever units are specified by the user is more than sufficient. There will likely be a config for the tool itself and assuming the author keeps units the same in both places it is a straightforward process to adapt the tool output for the context.

> My thought was to steer clear of this menace by letting the user declare the relationship between a query and the expected tool output ‚Äì and using keys seemed a little less verbose compared to queries

We do this already in our tools and it is what I am trying to avoid. Having the user manually insert a value is not usually a problem but it can be a hassle and it is something I would really like to automate. As I said in my last comment this is an elegant solution we can do today to curb this issue and we are doing it everywhere we can. I think we can do better though and I am frustrated by having to tell users how to set up their contexts and breakpoints. This is especially a problem when someone introduces a new tool to an old project where changing how contexts work may be a hassle. Again, I feel like I am going back to my previous argument so I may still be misunderstanding what you are trying to illustrate here.

### A concrete example of what I am trying to solve

I started this issue because I was having trouble applying responsive logic to modular-scale while upholding the install and setup standards I wanted. This is what I want people to do:



Even if `&(media)` was a string like `&` returns with selectors you could quickly query what a value is like this:



Then use `>` or `<` logic to find where it is in relation to the tools configuration.
",scottkellum,mixin
1010,2014-10-19 17:47:21,"@jakob-e Ah, I am still not quite grokking your examples but, interesting. So you are expecting the output of the proposed `&(media)` or whatever to be a map of `@media` properties?



Where `$media` would be a map that looks like:



I really like this, it‚Äôs really similar to how Breakpoint works. As a core language feature it may need some tweaking though to support comma separated media lists. This can get super complicated fairly quickly with an example like this:



where you end up with a `@media` context of:



and your `&(media)` might return a map like:



Again, not quite grokking your last post but going line by line for measure:

> The amount of handling needed in @mixin tool could be quite heavy - unit conversion, min-max-width ranges, how to handle in combination with orientation, resolution or...

It could be, but in most cases doesn‚Äôt need to be. In most cases just knowing the first `min-width` call in whatever units are specified by the user is more than sufficient. There will likely be a config for the tool itself and assuming the author keeps units the same in both places it is a straightforward process to adapt the tool output for the context.

> My thought was to steer clear of this menace by letting the user declare the relationship between a query and the expected tool output ‚Äì and using keys seemed a little less verbose compared to queries

We do this already in our tools and it is what I am trying to avoid. Having the user manually insert a value is not usually a problem but it can be a hassle and it is something I would really like to automate. As I said in my last comment this is an elegant solution we can do today to curb this issue and we are doing it everywhere we can. I think we can do better though and I am frustrated by having to tell users how to set up their contexts and breakpoints. This is especially a problem when someone introduces a new tool to an old project where changing how contexts work may be a hassle. Again, I feel like I am going back to my previous argument so I may still be misunderstanding what you are trying to illustrate here.

### A concrete example of what I am trying to solve

I started this issue because I was having trouble applying responsive logic to modular-scale while upholding the install and setup standards I wanted. This is what I want people to do:



Even if `&(media)` was a string like `&` returns with selectors you could quickly query what a value is like this:



Then use `>` or `<` logic to find where it is in relation to the tools configuration.
",scottkellum,media
1005,2013-11-07 16:55:53,"I'd like a sass command that can take a source.scss file as an input, resolve its dependencies (declared with syntax like `@import grid.scss;`) and output a single dest.scss file that is the concatenation of all imported files and source.scss.

At a later stage I will then run sass on the dest.scss file to produce a final css file.

Does anything like this exist and if not, are there developer docs I can read to help me get started implementing the feature?
",marrs,import
1005,2013-11-07 17:24:41,"1. I get a CSS file. 
2. I'm not doing that at the moment but I think the end result is the same, isn't it?  

The background to this is that I have a base.scss that is composed of many modules with interdependencies.  That base.scss is then used by an external project that has its own domain specific scss files.  It may also have its own asset rendering process.

There are many projects with different technology stacks.  It would simplify things for the project owners considerably if they could have access to a single SCSS file that they can then @import into their stylesheets.

Having an SCSS file is important because then the project can make use of the various helpers that are in the base.scss
",marrs,import
1004,2013-11-15 23:36:02,"This also fails miserably:



Produces:



Should produce:



In Less and Stylus this works fine since forever.

@kizu, could you please mention ""parent selector"" and ""&"" in this thread's title?

UPD: works as a charm like this (kudos to @Snugug):


",lolmaus,Snugug
1004,2013-11-15 23:42:12,"@lolmaus seems as if you have not read how the interpolated selectors work properly.

What you are saying is you would like to interpolate the selector and best it under the current selector, which produces normal nested selectors. On the other hand, if you were to prefix the interpolation with `@at-root`, you say that you want to interpolate the selector and put it at the root of your document, which produces the expected results.
",Snugug,at-root
1004,2013-11-16 20:01:00,"When using & in a script context (like interpolation) you need to combine this with an @at-root directive. Search the issues and you'll see plenty of examples. 

Hunt & pecked on my iPhone... Sorry if it's brief!

> On Nov 15, 2013, at 3:36 PM, lolmaus notifications@github.com wrote:
> 
> This also fails miserably:
> 
> .fieldset {
>   background: red;
>   #{&}-field {
>     background: blue;
>     #{&}-label {
>       background: green;
>     }
>   }
> }
> Produces:
> 
> .fieldset {
>   background: red;
> }
> .fieldset .fieldset-field {
>   background: blue;
> }
> .fieldset .fieldset-field .fieldset .fieldset-field-label {
>   background: green;
> }
> Should produce:
> 
> .fieldset {
>   background: red;
> }
> .fieldset-field {
>   background: blue;
> }
> .fieldset-field-label {
>   background: green;
> }
> In Less and Stylus this works fine since forever.
> 
> @kizu, could you please mention ""parent selector"" and ""&"" in this thread's title?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",chriseppstein,at-root
1004,2013-11-16 20:11:57,"> When using & in a script context (like interpolation) you need to combine this with an @at-root directive.

And are there any use cases when `&` inside an interpolation could be used without `@at-root`? I see only the opposite and it is strange that we need to use a lot of extras to get the most common cases.
",kizu,at-root
1004,2013-11-18 08:35:10,"Indeed, why do we need explicitly type @at-root at all? 
",shabunc,at-root
1004,2013-12-06 23:39:20,"> @kizu wrote: And are there any use cases when `&` inside an interpolation could be used without `@at-root`? I see only the opposite and it is strange that we need to use a lot of extras to get the most common cases.
> 
> @shabunc wrote: Indeed, why do we need explicitly type `@at-root` at all?

The issue is that it's impossible to tell, in general, whether `&` was used. We could pretty easily check whether it was explicitly used in the selector itself, but that breaks unexpectedly if you store it in a variable and use it. We could attach some metadata to the object `&` refers to itself, but then what if you parse and manipulate it? Clever inference like you're suggesting only works when the user can rely on it; otherwise it just leaves them feeling like they don't understand what's going on.

I'm closing this; #1036 is tracking the underlying issue.
",nex3,at-root
1003,2013-11-07 06:26:43,"When you have multiple selectors and then inside of the block you have `@at-root`, then you'd get a somewhat inoptimal ouput.

This:



Renders now (using `gem install sass --pre`) to:



You can see how there is one `.foo` per selector in the original multiple selector.
",kizu,at-root
1003,2013-12-06 22:58:38,"This brings up a much more serious issue -- why is one rule with four selectors being generated, rather than four rules? It looks like `@at-root` and script `&` generally fail to play nice with comma selectors, which is something that needs to be addressed before 3.3 is released. I've filed #1036 to track that; it's likely that fixing that will also solve this issue.
",nex3,at-root
1001,2013-12-13 16:53:16,"@tabatkins thoughts?
",chriseppstein,tabatkins
1000,2013-11-05 07:56:06,"**EDIT**

Looking again, I see that `create-map()` was just an example to demonstrate the `keywords()` function; but my question below still applies. This function doesn't seem to offer anything new (in any case it doesn't do what I was hoping it would do). In the given example, the `create-map()` function is non-dynamic and actually more verbose than simply writing out the map in the regular syntax...



**ORIGINAL POST**

I've been trying out map functions based on the info in the [changelog](https://github.com/nex3/sass/blob/master/doc-src/SASS_CHANGELOG.md) and @chriseppstein's [CSSConf.EU presentation](https://www.youtube.com/watch?v=-ZJeOJGazgE), but stumped on `create-map()`. It seems like it should be the complement to the ability to pass maps as splat-like arguments to functions, which breaks a map out in to individual `$`-named variables: that is, create-map would seem to allow you pack up a series of variables in to a map again. However in testing it at Sassmeister it doesn't seem to work. Is it not part of the current RC1 release?

This is what I'm testing:



and this is what I get:



...I'm using the following to debug maps (edit: no need for this, there's an `inspect()` function now)


",lunelson,chriseppstein
999,2013-11-04 19:49:28,"I was thinking that it would be great if we had a way of copying values from other properties by passing a selector. Here's how I can imagine this being used:



Or maybe having something like `@value`, IDK.

I know this can be accomplished by using variables but it could be useful anyway.
",rafaelrinaldi,value
998,2013-11-04 18:58:34,":-1: I dislike that this bells after each file is compiled. Most files take a very short time, this would be quite annoying. I also dislike the extra option for watching.

As specified in http://sass-lang.com/community#Contribute it's a good idea to propose ideas to the issue tracker and get feedback on them before coding them up. if we were to accept this, it would need docs, tests, etc as specified in the contribution guide. But I would wait on doing any further work until @nex3 has weighed in.
",chriseppstein,nex3
996,2013-12-06 23:21:57,"The suggested syntax steps on the toes of the map/pair iteration in 3.3, so that's not workable.

I'm not entirely opposed to this if a very elegant syntax can be devised, but I'm skeptical of that. The syntax needs to be easy to understand when reading the code for someone with only passing familiarity with Sass, and easy to remember when writing Sass. It should also not give users the impression that constructs like `@each` can have a million different configurations that do different things. I think this is a tall order, but you're welcome to try.

In the meantime, I don't think it's too burdensome to use a `@for` loop here. Many languages more powerful than Sass make do with that.
",nex3,for
996,2013-12-06 23:21:57,"The suggested syntax steps on the toes of the map/pair iteration in 3.3, so that's not workable.

I'm not entirely opposed to this if a very elegant syntax can be devised, but I'm skeptical of that. The syntax needs to be easy to understand when reading the code for someone with only passing familiarity with Sass, and easy to remember when writing Sass. It should also not give users the impression that constructs like `@each` can have a million different configurations that do different things. I think this is a tall order, but you're welcome to try.

In the meantime, I don't think it's too burdensome to use a `@for` loop here. Many languages more powerful than Sass make do with that.
",nex3,each
996,2013-12-14 01:15:28,"> `@each $color in $colors with index $i`

This is okay, although it relies on users knowing the term ""index"". I'm also not a big fan of requiring two words; I think that contributes to the ""word salad"" feeling about `@each`.

> `@each $color as $index in $colors`

`as` isn't descriptive enough.
",nex3,each
996,2013-12-14 05:15:21,"IMO requiring people to know what ""index"" means when dealing with iterators is OK, but maybe ""counter"" would work too (although I bet most people who would use this feature would prefer ""index"")

How about something like this:

`@each $color in $colors, index $i` (or w/o the `,`)
- or -

`@each $color in $colors, counter $i`
",Snugug,each
993,2013-11-02 21:32:04,"They way you have this written, the output you're getting is actually expected, although the logic can be a bit weird if you haven't worked with `@extend` before.

Let's rewrite this code a little bit to get a better idea of exactly what's happening:



Simply rewriting like this (how Sass sees it), it now becomes a little bit more clear what's happening. What you're saying for `hover`, `focus`, and `active` is that you would like to extend `.btn-blue%active` (the compound selector that gets created). Because your nested items aren't attached to `.btn-blue` (the parent selector) but are for the `.btn-blue` attached to `%active`, it appears as if you get double `.btn-blue` selectors when in reality it's just the one on `%active`. Those then get nested under the children `.btn-blue`, which is what gives you the double `.btn-blue` class.

Good news is there's a simple and easy way to get this to work! If you rewrite like the following, the extends will work fine.



While you don't need to namespace your placeholder selector like I did, I always find it useful to.
",Snugug,extend
991,2013-11-04 20:55:03,"@nex3 let's get this in 3.3?
",chriseppstein,nex3
988,2013-12-06 21:48:36,"This is likely related to @chriseppstein's changes to make writing to the Sass cache atomic. I don't have the means to test solutions to this problem, but if anyone else can come up with one that preserves the atomicity of cache writes, pull requests are welcome.
",nex3,chriseppstein
987,2013-10-24 22:27:11,"I am currently experimenting with `@at-root` and placeholder classes and I've found, unexpectedly, that they don't work. I have the following code:



And the output CSS I get follows:



Whereas the expected output is:



However, if I `@extend %square--red;`, this works. I assume this is happening because it's creating a new silent selector, but I believe the expected output is that I would be able to extend `%square` and get the root extension as well.
",Snugug,extend
987,2013-10-24 22:27:11,"I am currently experimenting with `@at-root` and placeholder classes and I've found, unexpectedly, that they don't work. I have the following code:



And the output CSS I get follows:



Whereas the expected output is:



However, if I `@extend %square--red;`, this works. I assume this is happening because it's creating a new silent selector, but I believe the expected output is that I would be able to extend `%square` and get the root extension as well.
",Snugug,at-root
987,2013-12-06 21:43:50,"`@at-root` and all interpolation is resolved before any `@extend`ing happens. So first the document is transformed into:



which then produces the output you're seeing.
",nex3,extend
987,2013-12-06 21:43:50,"`@at-root` and all interpolation is resolved before any `@extend`ing happens. So first the document is transformed into:



which then produces the output you're seeing.
",nex3,at-root
984,2013-10-23 21:13:49,"This example is too abstract to provide a better way of writing it.

While a browser implementation of extend would exhibit this behavior, we feel the output of this would be unexpected by many users and result in unwanted css bloat.

As such, we have provided a number of tools in sass 3.3 to implement this pattern using mixins, `@at-root`, and maps.

I show how this can be made in a recent presentation of mine:

http://sass-3-3-presentation.herokuapp.com/#slide-25 (change the code drop down to ""Maps, Media & Extend, Oh my!"")
",chriseppstein,at-root
978,2013-11-23 01:45:48,"If this is a bug and not just a weird one-off behavior, it's a bug with guard/listen.

/cc @thibaudgg
",nex3,thibaudgg
975,2013-11-23 01:39:30,"Everything within an `@at-root` will end up below its containing selector, regardless of where it is relative to its sibling rules (or `@extend`s). So this is expected, since the intermediate step looks like this:


",nex3,extend
975,2013-11-23 01:39:30,"Everything within an `@at-root` will end up below its containing selector, regardless of where it is relative to its sibling rules (or `@extend`s). So this is expected, since the intermediate step looks like this:


",nex3,at-root
971,2013-12-01 02:59:44,"@nex3 Doing my monthly check-in to see if there is anything more I can do to help push this along. Thanks!

:v: :deciduous_tree: :bear: 
",shepmaster,nex3
969,2013-10-16 01:53:35,"I've found an issue with parent `&` selectors and `@extend` usage together. The following example illustrates what is happening. I also looked through _extend_test.rb_ to see if this case was covered, which it is not.


",georgemarshall,extend
969,2013-10-18 17:44:51,"Isn't this how @extend is supposed to work? The &:hover is pulled up to where the @extend is located. So the SASS code you end up with before it's compiled is actually:



I would say you need to move the location of your @extend.
",mturnwall,extend
968,2013-12-12 01:04:06,"@nex3 Please review. You promised this would get into 3.3. Though you may have been too drunk to remember. But I have a witness: @snugug ;)
",chriseppstein,snugug
968,2013-12-12 01:04:06,"@nex3 Please review. You promised this would get into 3.3. Though you may have been too drunk to remember. But I have a witness: @snugug ;)
",chriseppstein,nex3
968,2013-12-12 03:27:07,"I am a witness!

> On Dec 11, 2013, at 8:04 PM, Chris Eppstein notifications@github.com wrote:
> 
> @nex3 Please review. You promised this would get into 3.3. Though you may have been too drunk to remember. But I have a witness: @snugug ;)
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,snugug
968,2013-12-12 03:27:07,"I am a witness!

> On Dec 11, 2013, at 8:04 PM, Chris Eppstein notifications@github.com wrote:
> 
> @nex3 Please review. You promised this would get into 3.3. Though you may have been too drunk to remember. But I have a witness: @snugug ;)
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,nex3
965,2013-10-12 20:00:47,"Have you seen [`@extend`](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#extend)?
",nex3,extend
949,2014-11-10 11:59:54,"This would be so awesome! Would revamp the practical use of @extend directives
",Gespinha,extend
946,2013-10-04 01:19:40,"This is weird, but more or less expected, due to a confluence of factors. The root of it is that Sass tries to avoid as much as possible encoding knowledge about the specifics of valid CSS, outside of the syntax -- for example, it doesn't keep track of which properties are valid. This helps a given version of Sass remain useful as specs and browser implementations change.

The reason this is relevant here is that one of the things Sass is very liberal about is `@`-rules. We want to be forwards-compatible with any `@`-rules that are introduced in the future. Unfortunately, `@`-rules can have very weird syntax, so maintaining this forwards-compatibility requires us to be very liberal in what we allow in some cases.

One of the weirdest `@`-rules, syntax-wise, is `@keyframes`. It starts looking like a normal rule with a block, but the syntax inside that block is different than normal CSS syntax. You can write percentages with blocks following them, as in `@keyframes whatever {50% {left: 10}}`, which is a construction we see nowhere else in CSS.

To handle `@keyframes`' weird syntax, as well as potential future weird `@`-rule syntaxes, Sass has the ability to parse any old expression that you might find in a property value within a selector. This supports `50% { ... }`, but also means that as far as Sass is concerned, `"""" .somethingElse { ... }` is valid as well, which is the source of the confusion here.

I'm going to leave this issue open since we should be able to mitigate this issue by only allowing this expanded selector syntax when we're actually parsing an unknown `@`-rule.
",nex3,keyframes
943,2013-09-30 16:57:10,"I'm proposing the `@include` loop recursion restriction be lifted.

I'm unaware of the intent of this restriction, whether it has technical merit or not, however as far as I can see without further information, it only exists to prevent end-users from unwittingly causing a ""stack overflow"".

An alternative to lifting the restriction entirely, could instead be a recursion depth counter; only when hitting `<arbitrary number>` will a warning/error be issued. PHP behaves this way when running with XDebug, and will fatal if the stack count reaches 100.

Patching this per-project is all well and good, but it would make sense to remove or change this restriction if it only exists to insulate users from themselves.

For reference: http://stackoverflow.com/questions/15531004/sass-mixin-recursion-include-loop

_As a side note, I'm happy to say I've learned enough Ruby at this point to patch this behavior and others, such as some of the `CheckNesting` constraints. Looking forward to contributing in the future._
",northborndesign,include
942,2013-09-30 15:54:45,"We need to create a tutorial for how to use create Sass functions in ruby and also fully document the relevant ruby API provided by Sass including marking all relevant API with `@since` documentation.
",chriseppstein,since
930,2013-09-20 23:40:12,"**Edit**: I've modified this issue because I now believe it all has to do with scriptable `&` rather than `@at-root`, because if you run the code below, the comment at the beginning of the `context` mixin shows that `&` has already lost knowledge of its parent, before `@at-root` is even used.

I've got a snippet of code in the new Sass 3.3 which is giving me a bit of trouble:



Output:



Apologies for the convoluted code; this is a simplification of a real-life situation.
1. I invoke the `question-mark-symbol` mixin.
2. `question-mark-symbol` creates a rule, using the passed argument as a selector.
3. Inside that rule, it uses a simplification of my `context` mixin (which handles classes on the root element, but in real life also handles `@media` queries and other junk).
4. The `context` mixin outputs the style in a `.generated-content` class (which is a class that some feature-detecting JS puts on the `<html>` element, if you're curious).

The funny thing is that, whenever a rule is created in a mixin and then that mixin calls another mixin, the inner mixin can't see the selector from the previous mixin. I don't know if this is a design choice or a bug, but it was very unexpected to me, because I assumed that a rule was always added to the parent.
",pdaoust,at-root
930,2013-09-20 23:40:12,"**Edit**: I've modified this issue because I now believe it all has to do with scriptable `&` rather than `@at-root`, because if you run the code below, the comment at the beginning of the `context` mixin shows that `&` has already lost knowledge of its parent, before `@at-root` is even used.

I've got a snippet of code in the new Sass 3.3 which is giving me a bit of trouble:



Output:



Apologies for the convoluted code; this is a simplification of a real-life situation.
1. I invoke the `question-mark-symbol` mixin.
2. `question-mark-symbol` creates a rule, using the passed argument as a selector.
3. Inside that rule, it uses a simplification of my `context` mixin (which handles classes on the root element, but in real life also handles `@media` queries and other junk).
4. The `context` mixin outputs the style in a `.generated-content` class (which is a class that some feature-detecting JS puts on the `<html>` element, if you're curious).

The funny thing is that, whenever a rule is created in a mixin and then that mixin calls another mixin, the inner mixin can't see the selector from the previous mixin. I don't know if this is a design choice or a bug, but it was very unexpected to me, because I assumed that a rule was always added to the parent.
",pdaoust,media
930,2013-09-23 17:04:53,"More info: it seems that the tree can normally see rules defined in a mixin, but '#{&}' can't. Check out this even simpler version, with no selectors passed as arguments and no `@at-root` directive:



This gives the output:



The `&` remembers the `.outer` selector from the previous mixin, as seen in the `.inner &` selector in the `inner` mixin. However, the `#{&}` in the same inner mixin, in the comment just above the rule, has no knowledge of that same `.outer` selector.
",pdaoust,at-root
928,2013-09-20 19:32:05,"When multiple partials with variables and classes are involved, importing them in several places may lead to CSS duplication if those partials define CSS styles.

To avoid this duplication, a @import option may be added.
",brauliobo,import
926,2015-08-29 18:59:54,"I got around this somehow by converting my code to the following format.

Pass arguments as an array `@include someMixin($token: ($var1, $var2))`.
",nerdfiles,include
925,2013-12-14 00:56:47,"@chriseppstein has done a substantial amount of work recently to make Sass more threadsafe and to make the cache accesses atomic. This should fix this issue. Feel free to re-open if it doesn't.
",nex3,chriseppstein
923,2013-09-17 06:55:10,"PR to implement decrementing for-loops as discussed in issue #691 (sorry, couldn't get Hub to attach the pull-request to the issue directly).

From the CHANGELOG:



I did not add the `by` part to the `@for` loop as suggested by @chriseppstein in issue #691. I'd be happy to implement this in another PR. 

I am a bit unsure about adding the constants to the `ForNode`, they seem a bit out of place there. At first I was going to calculate the direction of the loop in the `ForNode` as well, but you can't do that because the environment can change the values of `from` and `to` later on, right?

Let me know what you think!
",robinroestenburg,for
923,2013-09-17 06:55:10,"PR to implement decrementing for-loops as discussed in issue #691 (sorry, couldn't get Hub to attach the pull-request to the issue directly).

From the CHANGELOG:



I did not add the `by` part to the `@for` loop as suggested by @chriseppstein in issue #691. I'd be happy to implement this in another PR. 

I am a bit unsure about adding the constants to the `ForNode`, they seem a bit out of place there. At first I was going to calculate the direction of the loop in the `ForNode` as well, but you can't do that because the environment can change the values of `from` and `to` later on, right?

Let me know what you think!
",robinroestenburg,chriseppstein
921,2013-09-14 09:51:24,"Would it be possible to have a mechanism that would prepend a default selector that would act as an identifier to the output selectors list of an @extend?

That would help finding out in the debugger what all this list of selectors is about.

I'm thinking something along the lines of : 



which would output



Of course we could directly @extend an id which would do something quite similar, but there are two advantages to the approach I'm suggesting : 
- extending a selector has already proven dangerous because we can easily pollute the output rules inadvertently due to the way @extend works. So keeping the placeholder system is a much safer bet
- more importantly, a placeholder only has existence in the CSS if it is being implemented. Thanks to that, it gets very useful to develop some functionnality snippet libraries in the form of placeholders, and we'd like to be able to keep it this way while still being able to recognize from the debugger what this bunch of selectors represents.
",mlarcher,extend
921,2013-09-14 15:29:18,"This seems like a hackie solution at best to a problem that already has good solutions. Right now you can turn on debug info to see where selectors are coming from, and in 3.3 we're getting full blown source maps. Both of these will solutions give you a better idea where a selector is coming from than what is proposed.

On Sep 14, 2013, at 11:51 AM, mlarcher notifications@github.com wrote:

> Would it be possible to have a mechanism that would prepend a default selector that would act as an identifier to the output selectors list of an @extend?
> 
> That would help finding out in the debugger what all this list of selectors is about.
> 
> I'm thinking something along the lines of :
> 
> %inlineBlock[#_INLINE_BLOCK] {
> display: inline-block;
> .ltie8 & {
> display: inline;
> }
> }
> .someClass {
> @extend %inlineBlock;
> }
> .someOtherClass {
> @extend %inlineBlock;
> }
> 
> which would output
> 
> #_INLINE_BLOCK,
> .someClass,
> .someOtherClass {
> display: inline-block;
> }
> 
> .ltie8 #_INLINE_BLOCK,
> .ltie8 .someClass,
> .ltie8 .someOtherClass {
> display: inline;
> }
> 
> Of course we could directly @extend an id which would do something quite similar, but there are two advantages to the approach I'm suggesting :
> 
> extending a selector has already proven dangerous because we can easily pollute the output rules inadvertently due to the way @extend works. So keeping the placeholder system is a much safer bet
> 
> more importantly, a placeholder only has existence in the CSS if it is being implemented. Thanks to that, it gets very useful to develop some functionnality snippet libraries in the form of placeholders, and we'd like to be able to keep it this way while still being able to recognize from the css what this bunch of selectos represents.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,extend
920,2013-09-13 11:18:29,"Like in selectors, strings should be automatically unquoted during interpolation in an `@at-root` context.
",chriseppstein,at-root
918,2013-09-11 12:04:10,"So if you have to do this, I'd be inclined as a work around to either have
them separate either with a condition in html or use the traditional import
in your scss file: ""@import ""horrible-ie6-must-have.css"";"" ala
http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#directives.

On 11 September 2013 11:55, RobinQu notifications@github.com wrote:

> This line is written in favor of hacks for IE6. And we are not authorized
> to rewrite it.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/918#issuecomment-24230654
> .
",cjcheshire,import
917,2013-09-10 15:35:47,"> CSS doesn't have maps, the property: value syntax is more like an imperative style collection of commands (apply this style, then apply the next style, etc.). Just because it looks like a duck from another language doesn't mean that it is a duck in this language.

That is your personal interpretation of the surface syntax. I think they look like maps. For whatever it is worth, @chriseppstein made this connection in the issue that inspired map support in Sass. Regardless, I never said CSS had maps. I said it had `k: v` pairs, which I think is an uncontroversial statement. Since this is a fairly tangential point I am going to avoid arguing it further in this thread.
",monsanto,chriseppstein
917,2013-09-12 20:28:36,"I don't have a problem with this, although we'd certainly want to make maps and lists consistent. This would also probably end up supporting @eevee's proposed syntax for single-element lists in #837.
",nex3,eevee
915,2013-09-09 14:43:14,"## Extending within the @media directive

As this topic seems to pop-up quite often I decided to see if I could make it work 
without having to bother nex3 and all you other champs more than I've already done.  

Here is what I came up with:
_Please comment :)_

Best, 
Jakob E

**Note!** mediaExtend causes deprecation warning
mediaExtend Back-to-Hack-Edition added below
### Mixins and config


### How to use


### mediaExtend Back-to-Hack-Edition

While the mediaExtend solution above was **nice** and **clean** and **made perfect sense**
it will cause a deprecation warning (crashed CodeKit) - **sucks big time!!!!**

It looks as if we are still allowed to extend within the media directive as long as there are
no naming conflicts with other extends. This solution uses a media prefix to create a 
sort of namespace. In no way as flexible, intuitive or as simple as the first version. 

**Note!** the breakpoints list and media mixin remains the same  


### Constants

Just a small might-be-of-some-use note - use constants


",jakob-e,media
915,2013-09-10 08:12:22,"Interesting approach using `media(all)`, to limit the scope of extension, for declarations that one would otherwise write without any media query.. `@extend` can otherwise be a bit problematic in this way, as it neither strictly obeys query scope nor source order, so that's a useful technique.
",lunelson,extend
915,2014-03-29 17:40:03,"@jakob-e & @lunelson :

You might want to try my implementation below. IMO it's one of the more readable solutions for dynamic placeholders both outside media queries and inside media queries and results in a pretty optimised CSS output.

Note, however, that you'll need Sass 3.3 for this to work. Also, you still get the repetition of the `@media` statement (which is hard to avoid unless you use a more complex architecture). 

## Configuration



---

## String functions



---

## The magic



---

## Examples



---

## The output



See also https://gist.github.com/jslegers/9805919
",jslegers,media
915,2014-05-29 16:57:19,"I'm encountering this same issue with @extend and @media.

The solutions so far seem overthought. A less messy solution would be to create a new operator, @copy that just copies whatever you point it to. You can still use extend with the same class, however.



This knows to simply copy in the styles. Nothing fancy.


",adamjgrant,extend
915,2014-05-29 16:57:19,"I'm encountering this same issue with @extend and @media.

The solutions so far seem overthought. A less messy solution would be to create a new operator, @copy that just copies whatever you point it to. You can still use extend with the same class, however.



This knows to simply copy in the styles. Nothing fancy.


",adamjgrant,media
915,2014-05-29 16:57:19,"I'm encountering this same issue with @extend and @media.

The solutions so far seem overthought. A less messy solution would be to create a new operator, @copy that just copies whatever you point it to. You can still use extend with the same class, however.



This knows to simply copy in the styles. Nothing fancy.


",adamjgrant,copy
915,2014-05-29 17:22:35,"You can effectively do this already, it requires only setting up an automatic condition to execute `@include` vs. `@extend`: http://sassmeister.com/gist/c66d64f9447859ebaf39
",lunelson,extend
915,2014-05-29 17:22:35,"You can effectively do this already, it requires only setting up an automatic condition to execute `@include` vs. `@extend`: http://sassmeister.com/gist/c66d64f9447859ebaf39
",lunelson,include
914,2013-09-09 10:21:32,"The new Ampersand and @at-root did not work with the latest Master ( expected expression).
",gisu,at-root
914,2013-09-12 19:49:12,"Your example works for me (if I replace `@include element` with `@include modifier`). You'll need the master branch at b6f71a816b6d7fd3c54def0dbb2eb4266c1585d1 or later for this.
",nex3,include
912,2013-09-05 15:19:17,"I believe where some of the confusion may come from the fact that Sass has clearly defined mixins and extendables with different purposes whereas LESS doesn't make that distinction. In Sass, `@extend` is used for moving a copy of the selector to a new place in the cascade and comma-separating it with what it is extending. This allows for moving both up and down the cascade. `@mixin`, on the other hand, behaves like a function that ""returns"" properties. In LESS, there is no good comparison with what `@extend` does, and guards help to confuse the point further (there are proper [control directives](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#control_directives) in Sass) as they allow you to define the same mixin multiple times with different outcomes. In Sass, you would only create a single mixin and use control directives to direct it's output.

As for linear inheritance, this exists because in Sass, you can override existing mixins with new mixins, say overriding the `clearfix` mixin that comes with [Compass](http://compass-style.org/) with your own custom one. If a mixin could come from anywhere, it would be very hard to figure out exactly which one you want. This same linear inheritance doesn't exist for extendables again because of their nature of moving selectors around the cascade. 

Hope this helps.
",Snugug,extend
912,2013-09-05 15:19:17,"I believe where some of the confusion may come from the fact that Sass has clearly defined mixins and extendables with different purposes whereas LESS doesn't make that distinction. In Sass, `@extend` is used for moving a copy of the selector to a new place in the cascade and comma-separating it with what it is extending. This allows for moving both up and down the cascade. `@mixin`, on the other hand, behaves like a function that ""returns"" properties. In LESS, there is no good comparison with what `@extend` does, and guards help to confuse the point further (there are proper [control directives](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#control_directives) in Sass) as they allow you to define the same mixin multiple times with different outcomes. In Sass, you would only create a single mixin and use control directives to direct it's output.

As for linear inheritance, this exists because in Sass, you can override existing mixins with new mixins, say overriding the `clearfix` mixin that comes with [Compass](http://compass-style.org/) with your own custom one. If a mixin could come from anywhere, it would be very hard to figure out exactly which one you want. This same linear inheritance doesn't exist for extendables again because of their nature of moving selectors around the cascade. 

Hope this helps.
",Snugug,mixin
911,2013-09-05 13:46:22,"I don't think the following is currently possible. What I'd like to do is dynamically pipe some content to a separate file or perhaps to the location of a bookmark of some sort (which could later be split out).

The use case is building stylesheets which could be lazy-loaded; the best example is exporting some stuff to an old-IE stylesheet directly via a function or mixin or other form of directive.

For instance, some media query mixins have a fallback option which basically takes `@content` and puts it inside a block with a fallback class. Using this method, the stylesheet is littered with `.no-mq` or `.oldie` classes which probably ought be put in a separate file and loaded inside a conditional comment or using YepNope/RequireJS etc.
",dalgard,content
907,2013-08-31 14:29:05,"This is actually to fix a bug in the Netbeans plug-in, where @import doesn't work because sass tries to create a directory in \Program Files\Netbeans, and it can't because the user doesn't have Administrator access.

The patch uses the builtin Dir::tmpdir to find the system temporary directory, and then uses File.join to build the cache path. This replaces the default behaviour which creates a directory wherever sass happens to be running.
",Moosemorals,import
905,2013-08-29 03:08:15,"I know that `@extend` an selector outside an `@media` directive is not supported before the browser supports `@extend` natively.

Therefore I came up with a work-around : Put my class (or placeholder) within a mixin and include it in both inside and outside the `@media` directive. Although it duplicates the included mixin code in the compiled CSS file, it still benefits me because I only need to manage one copy of code in SASS source.

The following code demonstrates the idea explained above:  https://gist.github.com/MrOrz/6373773



And it worked great in Sass 3.2.10. The compiled code totally makes sense:



However, when passed to the compiler it still gives me a deprecation warning. I am worried that this work-around, which is completely valid, would throw an error in Sass 3.3. Please take this work-around into consideration and alter the algorithm of `@extend` error detection.
",MrOrz,extend
905,2013-08-29 03:08:15,"I know that `@extend` an selector outside an `@media` directive is not supported before the browser supports `@extend` natively.

Therefore I came up with a work-around : Put my class (or placeholder) within a mixin and include it in both inside and outside the `@media` directive. Although it duplicates the included mixin code in the compiled CSS file, it still benefits me because I only need to manage one copy of code in SASS source.

The following code demonstrates the idea explained above:  https://gist.github.com/MrOrz/6373773



And it worked great in Sass 3.2.10. The compiled code totally makes sense:



However, when passed to the compiler it still gives me a deprecation warning. I am worried that this work-around, which is completely valid, would throw an error in Sass 3.3. Please take this work-around into consideration and alter the algorithm of `@extend` error detection.
",MrOrz,media
905,2013-08-29 18:50:56,"This is a tricky situation. In general, if a selector is defined both inside and outside of a `@media` query and it's `@extend`ed from inside, the user is likely to expect that that `@extend` will work on all instances of the selector. That means it's correct to throw an error in that situation. However, that also means that this workaround that explicitly indicates that the selectors should be duplicated in each context doesn't work.

@chriseppstein, what are your thoughts?
",nex3,extend
905,2013-08-29 18:50:56,"This is a tricky situation. In general, if a selector is defined both inside and outside of a `@media` query and it's `@extend`ed from inside, the user is likely to expect that that `@extend` will work on all instances of the selector. That means it's correct to throw an error in that situation. However, that also means that this workaround that explicitly indicates that the selectors should be duplicated in each context doesn't work.

@chriseppstein, what are your thoughts?
",nex3,media
905,2013-08-29 18:50:56,"This is a tricky situation. In general, if a selector is defined both inside and outside of a `@media` query and it's `@extend`ed from inside, the user is likely to expect that that `@extend` will work on all instances of the selector. That means it's correct to throw an error in that situation. However, that also means that this workaround that explicitly indicates that the selectors should be duplicated in each context doesn't work.

@chriseppstein, what are your thoughts?
",nex3,chriseppstein
905,2013-09-06 06:15:49,"Although not being able to `@extend` normal selectors within media queries makes perfect sense, IMHO the current behaviour of inserting the placeholder'd content within the media query context that it's being `@extend`ed is intuitive. Losing this feature would really marginalise the general usefulness of placeholders.
",xzyfer,extend
905,2013-09-06 22:56:48,"I'm not sure you completely understand the current behavior. Right now, the following code will result in no output at all:



I don't believe that there is an intuitive way for that example to work. It's unintuitive for the contents of `%foo` to be emitted twice; that's contrary to the way `@extend` works in every other case and risks silently creating a huge amount of unexpected output bloat. It's unintuitive for `%foo` to be silently not extended, because of course the user has indicated that they want it to be extended.

There are several compromises we could have chosen to handle this case. We chose the one we judged most likely to make the user aware of the issue. That way if they want to duplicate the selector they're able to do so explicitly, and if they're able to structure their stylesheet to avoid that they're able to do that as well.
",nex3,extend
905,2013-09-06 23:46:40,"You're correct about your example, but we can work currently work around that limitation as @MrOrz has shown



I think it make sense for placeholders to be further distinguished from selectors beyond ""they don't produce output on their own"". Allowing them to be extending into different context's is one such desirable feature. 

The cost of some documentation is small price to pay for the added cleanliness, all around maintainability of large responsive sass projects. 

It's not that I don't understand why you want to remove these features, but I can't help thinking:
- shouldn't developers be making an effort to be aware of the output they're producing?
- does preventing new features, and/or removing existing features, in order to help the lazy/ignorant at the cost of tying the hands of project authors in the best interests of a project? 

---

Personally I would like to see at the very least, is the mixin work around to continue to work, and I'm wishful fo your example to become functional in the same way. Obviously not at the cost of introducing breaking behaviour.

A compromise to achieve the same result, with similar DRY'ness would be to enable @imports within @media. 


",xzyfer,imports
905,2013-09-06 23:46:40,"You're correct about your example, but we can work currently work around that limitation as @MrOrz has shown



I think it make sense for placeholders to be further distinguished from selectors beyond ""they don't produce output on their own"". Allowing them to be extending into different context's is one such desirable feature. 

The cost of some documentation is small price to pay for the added cleanliness, all around maintainability of large responsive sass projects. 

It's not that I don't understand why you want to remove these features, but I can't help thinking:
- shouldn't developers be making an effort to be aware of the output they're producing?
- does preventing new features, and/or removing existing features, in order to help the lazy/ignorant at the cost of tying the hands of project authors in the best interests of a project? 

---

Personally I would like to see at the very least, is the mixin work around to continue to work, and I'm wishful fo your example to become functional in the same way. Obviously not at the cost of introducing breaking behaviour.

A compromise to achieve the same result, with similar DRY'ness would be to enable @imports within @media. 


",xzyfer,media
905,2013-09-07 02:18:27,"I think we can come up with a specific keyword for SASS to copy the specified placeholder from outside the `@media` directory. Something like this should do the trick:



By carefully selecting the keyword that conveys the idea of compiled code bloat, the developers using such keyword would notice the difference between normal `@extend`.

If the approach above seems too automatic, we can also let the developer manually duplicate the placeholder using `@include`, then provide a keyword for them to suppress the deprecation warning or error.  This approach is more flexible because the developer can control how the code is duplicated, like in the example in the beginning of this thread:


",MrOrz,extend
905,2013-09-07 02:18:27,"I think we can come up with a specific keyword for SASS to copy the specified placeholder from outside the `@media` directory. Something like this should do the trick:



By carefully selecting the keyword that conveys the idea of compiled code bloat, the developers using such keyword would notice the difference between normal `@extend`.

If the approach above seems too automatic, we can also let the developer manually duplicate the placeholder using `@include`, then provide a keyword for them to suppress the deprecation warning or error.  This approach is more flexible because the developer can control how the code is duplicated, like in the example in the beginning of this thread:


",MrOrz,media
905,2013-09-07 02:18:27,"I think we can come up with a specific keyword for SASS to copy the specified placeholder from outside the `@media` directory. Something like this should do the trick:



By carefully selecting the keyword that conveys the idea of compiled code bloat, the developers using such keyword would notice the difference between normal `@extend`.

If the approach above seems too automatic, we can also let the developer manually duplicate the placeholder using `@include`, then provide a keyword for them to suppress the deprecation warning or error.  This approach is more flexible because the developer can control how the code is duplicated, like in the example in the beginning of this thread:


",MrOrz,include
905,2013-09-09 15:31:51,"[Extending within the @media directive](https://github.com/nex3/sass/issues/915)
",jakob-e,media
905,2013-09-09 18:04:02,"@jakob-e I appreciate your work on this. I've had to do some similarly gnarly work arounds myself. Have you ever tried to explain this to new team members? The main point of this thread is that the simple (native) solution to this problem exists and is about to be removed.

@MrOrz I like your general concept. 

What I think could work:
- create some documentation educating developers on some common cases for unintentional output (Nicole Sullivan of OOCSS talks about some of these here https://www.youtube.com/watch?v=GhX8iPcDSsI)
- keep the existing behaviour shown by @MrOrz (for placeholders only IMHO)
- change the warning output from a deprecation warning to `""this could potentially result in duplicate output""` warning with a link to said documentation
- add a directive for suppressing warnings inline e.g. `@extend %placeholder !acknowledge` similar to what exists in [PHP](http://php.net/manual/en/language.operators.errorcontrol.php), [Ruby](http://api.rubyonrails.org/classes/Kernel.html#method-i-suppress), [JShint](https://github.com/jshint/jshint/issues/757#issuecomment-17376443)

I'm suggesting this because it introduces a small number for changes to sass core, as well making an attempt to help move the community as a whole forward with education. It's not new for tools to return useful link and documentation as output. I also think the `""this could potentially result in duplicate output""` warning could be applicable in a number of other use cases in future releases.

Ideally I'd be great if the existing functionality could be extended so that the example demonstrated by @nex3 (https://github.com/nex3/sass/issues/905#issuecomment-23974599) was functional i.e. not needing to wrap placeholders in a mixin inorder to inject them into a context.
",xzyfer,extend
905,2013-09-09 19:50:35,"Thanks xzyfer,

What initiated my work was this [question](https://github.com/nex3/sass/issues/640) and the answer provided by [robwierzbowski](https://github.com/nex3/sass/issues/640#issuecomment-12770202) and [nex3](https://github.com/nex3/sass/issues/640#issuecomment-13023139). I see the point in SCSS extends being about moving content and mixins to create/duplicate it.

I don't see any confusion or problems in my [solution](https://github.com/nex3/sass/issues/915) - so I hope you are not telling me that @extends can't be produced by mixins (or passed by @content)... In this case it would cut the frameworkability of SCSS in half :(  
As I see it there are no conflicts in any of the steps below - nor no confusion about what is being extended
...as you only extend from within each media directive.

Am I missing something? 



Best,
Jakob E
",jakob-e,content
905,2013-09-09 19:50:35,"Thanks xzyfer,

What initiated my work was this [question](https://github.com/nex3/sass/issues/640) and the answer provided by [robwierzbowski](https://github.com/nex3/sass/issues/640#issuecomment-12770202) and [nex3](https://github.com/nex3/sass/issues/640#issuecomment-13023139). I see the point in SCSS extends being about moving content and mixins to create/duplicate it.

I don't see any confusion or problems in my [solution](https://github.com/nex3/sass/issues/915) - so I hope you are not telling me that @extends can't be produced by mixins (or passed by @content)... In this case it would cut the frameworkability of SCSS in half :(  
As I see it there are no conflicts in any of the steps below - nor no confusion about what is being extended
...as you only extend from within each media directive.

Am I missing something? 



Best,
Jakob E
",jakob-e,extends
905,2013-09-15 12:34:22,"And by the way (if possible) being able to set options from within SCSS would be nice 

Like:
@option style:nested;
@option cache:true;
@option quiet:true;
",jakob-e,option
905,2013-09-18 00:51:15,"Closing this issue. It's not a bug. It's the way Sass is going to work.

Between the `unique-id()` helper and `@at-root`, it will not be that hard to support different medias.

I will be blogging on how to work around the new limitation using these features.
",chriseppstein,at-root
905,2013-10-21 06:22:35,"@chriseppstein do have an initial draft on this, or could you point me in the direction to investigate myself?

I could be mistaken but I've yet to see this addressed either in the spec outlined in #774 or the test cases added for the resulting `@at-root` pull requests.

> Specifically, this allows you to extend a selector via a mixin for all media contexts instead of just within the current media block.

I'm referring specifically to the use case of defining a `%placeholder` or `.normal-class` once without any `@media` directives and being able to **extend a [it] via a mixin for all media contexts instead of just within the current media block**
",xzyfer,at-root
905,2013-10-21 06:22:35,"@chriseppstein do have an initial draft on this, or could you point me in the direction to investigate myself?

I could be mistaken but I've yet to see this addressed either in the spec outlined in #774 or the test cases added for the resulting `@at-root` pull requests.

> Specifically, this allows you to extend a selector via a mixin for all media contexts instead of just within the current media block.

I'm referring specifically to the use case of defining a `%placeholder` or `.normal-class` once without any `@media` directives and being able to **extend a [it] via a mixin for all media contexts instead of just within the current media block**
",xzyfer,media
901,2013-08-28 18:06:19,"Coming from https://github.com/nex3/sass/pull/821, can placeholder existance checks be added? Checking existence, especially within the current (`@media`) scope, would be useful.
",robwierzbowski,media
901,2013-08-29 18:42:08,"Checking the existence of selectors is very tricky. With things like variables and mixins, when you check the existence you're asking the question, ""if I use this, will it break?"". But it's perfectly valid for you to extend a placeholder and then define it later on. It's impossible to detect in general whether a placeholder will be defined later on in the file, which means that a `placeholder-defined` function would work differently from all the other definition-checking functions in a reasonably subtle way.

Given these constraints, and the fact that you can just do `@extend %placeholder !optional` to avoid getting undefined-selector warnings, I don't think this is something we're likely to support.
",nex3,extend
901,2013-08-29 20:36:13,"I share @nex3's perspective here. Scripting happens before all the selectors exist and so a script check for this seems like an inversion of control. We will have other ways of managing the ability to use `@extend` in `@media` in 3.3. 
",chriseppstein,extend
901,2013-08-29 20:36:13,"I share @nex3's perspective here. Scripting happens before all the selectors exist and so a script check for this seems like an inversion of control. We will have other ways of managing the ability to use `@extend` in `@media` in 3.3. 
",chriseppstein,media
901,2013-09-05 18:23:22,"That's reasonable, no worries. My use was centered around `@media`, building a mixin wrapping mixin that says ""placeholder exists? extend placeholder. !placeholder exists? create new placeholder with mixin content"". @chriseppstein, can you point me to the 3.3 issue on extend/mqs?
",robwierzbowski,media
899,2013-08-30 23:16:35,"I see. Thank you for the clarification. If I add a specific style aside from the @extends then all of the selectors do indeed come through. I can see why this occurs when they all extend the same selector.
",r4j4h,extends
894,2013-08-23 16:09:29,"I'd like to propose we discuss adding arguments to `@content`.
### Issue

Currently, the content of a `@content` block cannot see the variables scoped to it's `@mixin`. This is perfectly understandable:



Will yield the error:



And currently, the only solution ( _that I'm aware of_ ) is to first define a global variable which will be modified by the `@mixin` body.



However, this obviously introduces global state, in all its' flimsy glory.
### Proposal

What I'm proposing for consideration, is the addition of optional arguments to the `@content` placeholder keyword.



This would bind the value of `$computed` from within the `@mixin` scope, to the scope of content block, therefore:


### Considerations

If ( _continuing with my example_ ) a variable named `$computed` were to already exist in the scope of the content block, a warning should be issued to ensure the developer is aware.



This behavior would be analogous to assigning the value with the `!default` flag, except with a warning.

Additional syntax options could include assignment or the `as` keyword:



These would affect the name of the variable to which the value is bound in the content scope.
",northborndesign,content
894,2013-08-23 16:09:29,"I'd like to propose we discuss adding arguments to `@content`.
### Issue

Currently, the content of a `@content` block cannot see the variables scoped to it's `@mixin`. This is perfectly understandable:



Will yield the error:



And currently, the only solution ( _that I'm aware of_ ) is to first define a global variable which will be modified by the `@mixin` body.



However, this obviously introduces global state, in all its' flimsy glory.
### Proposal

What I'm proposing for consideration, is the addition of optional arguments to the `@content` placeholder keyword.



This would bind the value of `$computed` from within the `@mixin` scope, to the scope of content block, therefore:


### Considerations

If ( _continuing with my example_ ) a variable named `$computed` were to already exist in the scope of the content block, a warning should be issued to ensure the developer is aware.



This behavior would be analogous to assigning the value with the `!default` flag, except with a warning.

Additional syntax options could include assignment or the `as` keyword:



These would affect the name of the variable to which the value is bound in the content scope.
",northborndesign,mixin
894,2013-08-23 16:11:54,"Nevermind, just found a near identical proposal from @chriseppstein from 3 weeks ago https://github.com/nex3/sass/issues/871
",northborndesign,chriseppstein
892,2013-08-18 18:57:44,"Sass (version 3.2.10) outputs additional and inaccurate selectors when a _descendant selector_ ( **.parent .child** ) uses **@extend** to extend another selector or silent selector that uses _parent selector references_ ( **&** sign).

example :



compiles into :



while the expected result is :



The bug doesn't happen when the _extending_ selector is a child selector (.parent > .child), nor when the _extended_ selector makes no use of the ‚Äò&‚Äô sign.
",yoannisj,extend
892,2013-08-18 19:07:27,"This appears to be the exact same behavior described in #877 in which @chriseppstein gave a [detailed explanation](https://gist.github.com/chriseppstein/6114279) as to why this happens. Long story short, this is not a bug and behaves as expected.
",Snugug,chriseppstein
889,2013-08-16 20:00:38,"Writing `@if not` isn't difficult enough to warrant a new directive.
",nex3,if
889,2014-10-10 17:10:08,"`@if not` is more readable because the condition that's met is always associated with the main block of the statement, and the negative of that is associated with the `@else`. `@unless` moves these blocks around so that the negative is on top and the positive is on the bottom, which leaves more room for mistakes.
",Undeterminant,if
889,2014-10-10 17:10:08,"`@if not` is more readable because the condition that's met is always associated with the main block of the statement, and the negative of that is associated with the `@else`. `@unless` moves these blocks around so that the negative is on top and the positive is on the bottom, which leaves more room for mistakes.
",Undeterminant,unless
889,2014-10-10 17:10:08,"`@if not` is more readable because the condition that's met is always associated with the main block of the statement, and the negative of that is associated with the `@else`. `@unless` moves these blocks around so that the negative is on top and the positive is on the bottom, which leaves more room for mistakes.
",Undeterminant,else
889,2014-10-10 17:38:30,"""the condition that's met is always associated with the main block of the statement""
How is that not true for `@unless`? If `@unless` is a direct map to `@if not`, how could that be true?

""`@unless` moves these blocks around so that the negative is on top and the positive is on the bottom""
This is referring to a poor usage of `@unless`, where the user has used an `@else` condition at all. The value in using an `@unless` is to create a single condition block with a single directive.



Again, it's not killing me to not have it. I can live with `@if not`. It's not more work or more code, I just think it should be pointed out that difficulty is not the problem being solved.


",adamjgrant,if
889,2014-10-10 17:38:30,"""the condition that's met is always associated with the main block of the statement""
How is that not true for `@unless`? If `@unless` is a direct map to `@if not`, how could that be true?

""`@unless` moves these blocks around so that the negative is on top and the positive is on the bottom""
This is referring to a poor usage of `@unless`, where the user has used an `@else` condition at all. The value in using an `@unless` is to create a single condition block with a single directive.



Again, it's not killing me to not have it. I can live with `@if not`. It's not more work or more code, I just think it should be pointed out that difficulty is not the problem being solved.


",adamjgrant,unless
889,2014-10-10 17:38:30,"""the condition that's met is always associated with the main block of the statement""
How is that not true for `@unless`? If `@unless` is a direct map to `@if not`, how could that be true?

""`@unless` moves these blocks around so that the negative is on top and the positive is on the bottom""
This is referring to a poor usage of `@unless`, where the user has used an `@else` condition at all. The value in using an `@unless` is to create a single condition block with a single directive.



Again, it's not killing me to not have it. I can live with `@if not`. It's not more work or more code, I just think it should be pointed out that difficulty is not the problem being solved.


",adamjgrant,else
889,2014-10-17 01:15:47,"Ruby and CoffeeScript have very different design philosophies than Sass. It's much more important for Sass to keep its surface area as small as possible than it is for Ruby and CoffeeScript, since so many of its users are designers by training and don't come in familiar with programming language idioms. The learning curve of `@unless` may not be very high on its own, but to someone still figuring out control structures at all having yet another new thing to learn is a serious burden.
",nex3,unless
878,2013-08-01 15:48:23,"This worked on 3.2.7, but since 3.2.8 through 3.2.10, it behaves differently. ( _I didn't actually test 3.2.9_ )



The _expected_ result is:



But the _actual_ result is:



Note that the `:after` selectors aren't extended to include the `alpha: ""hello"";` property. Of course, I could just `@include alpha` in the omega `@mixin`, however that changes the grouping; and besides, this _should_ work so far as I can tell.

I don't know what your position is on the correct behavior here, so perhaps this is behaving expectedly, but I can't imagine that it is.

Just to clarify, the reason for both the `@mixin` and `%rule` is I use the `%rule` in the current media scope, and redefine it using the `@mixin` in different media scopes.
",northborndesign,include
878,2013-08-01 15:48:23,"This worked on 3.2.7, but since 3.2.8 through 3.2.10, it behaves differently. ( _I didn't actually test 3.2.9_ )



The _expected_ result is:



But the _actual_ result is:



Note that the `:after` selectors aren't extended to include the `alpha: ""hello"";` property. Of course, I could just `@include alpha` in the omega `@mixin`, however that changes the grouping; and besides, this _should_ work so far as I can tell.

I don't know what your position is on the correct behavior here, so perhaps this is behaving expectedly, but I can't imagine that it is.

Just to clarify, the reason for both the `@mixin` and `%rule` is I use the `%rule` in the current media scope, and redefine it using the `@mixin` in different media scopes.
",northborndesign,mixin
878,2013-08-01 17:30:51,"Ah, I see. I didn't thoroughly test it ( _without the `@mixin`_ ) and got onto other things.

So the core of the issue is compound selectors ( _pseudo-classes, actual classes_ ) not extending properly. I'll edit the issue slightly to correct it.
",northborndesign,mixin
876,2013-08-01 08:57:06,"Hi,

_Context_: Rails 4.0.0, Sass 3.2.9.

I am working with a Rails Engine which defines a `$white` variable. For the purpose of the test, it sets its value to `yellow`.

This engine is included in a main Rails app, and the sass file defining the `$white` variable is @imported. Without anything in-between, the `$white` variable is overriden to `white`.

Later on, referencing `$white` through ""direct"" calls, such as `color: $white`, leads to the expected result: `white` trumping `yellow`. But, when `$white` is referenced in, say, a mixin, such as `+link-color($default: $white)`, its value is `yellow` and the overriding value, `white`, never shows up.

Is this related to the use of Engine, or a problem with sass/my usage of sass?
",chikamichi,imported
871,2013-07-30 15:22:35,"Mixin content is great and has done wonders for code implementing wrapper and context abstractions. However, there is often some setup done in the mixin and that setup needs to be available to the content when it is included. The current strategy is to use global variables, which works, but is obviously not ideal.

I'd like to introduce a way for mixins to include their content block and to pass arguments to the content.
### Calling the content with arguments

In order to pass arguments to content blocks an argument list can be passed to the content directive. This accepts positional and keyword arguments for passing to a content block. Variable argument semantics are allowed.


### Receiving arguments within a content block

A content block receives arguments using a new directive called `@receive`. The directive allows an argument list declaration that is the same as for functions and mixins. Positional arguments, default values, and variable arguments are all allowed.


",chriseppstein,receive
871,2013-07-30 17:06:25,"Not crazy about the syntax for `@receive`, but very interested in the concept.
",cimmanon,receive
871,2013-08-01 21:46:18,"At first blush, I like it.

How about @bind instead of @receive... maybe that's too nerdy?

On Thu, Aug 1, 2013 at 2:32 PM, Gabriel Nau notifications@github.comwrote:

> It's really fine !
> 1. global variables are not ideal like you said
> 2. it explicits what variables the nested block needs
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-21971416
> .
",hcatlin,bind
871,2013-08-01 21:46:18,"At first blush, I like it.

How about @bind instead of @receive... maybe that's too nerdy?

On Thu, Aug 1, 2013 at 2:32 PM, Gabriel Nau notifications@github.comwrote:

> It's really fine !
> 1. global variables are not ideal like you said
> 2. it explicits what variables the nested block needs
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-21971416
> .
",hcatlin,receive
871,2013-08-02 17:37:25,"The problem with `$arguments` is that it only work for positional arguments. I'd like consistency with all other argument passing and definitions. With `arguments(...)` I really don't like the idea of a function that sets instead of receives arguments.

Re: Naming, I'm not a fan of `@bind` for this. Maybe `@content-arguments` is better; it show's it's related to the `@content` directive.
",chriseppstein,bind
871,2013-08-02 17:37:25,"The problem with `$arguments` is that it only work for positional arguments. I'd like consistency with all other argument passing and definitions. With `arguments(...)` I really don't like the idea of a function that sets instead of receives arguments.

Re: Naming, I'm not a fan of `@bind` for this. Maybe `@content-arguments` is better; it show's it's related to the `@content` directive.
",chriseppstein,content
871,2013-08-02 17:37:25,"The problem with `$arguments` is that it only work for positional arguments. I'd like consistency with all other argument passing and definitions. With `arguments(...)` I really don't like the idea of a function that sets instead of receives arguments.

Re: Naming, I'm not a fan of `@bind` for this. Maybe `@content-arguments` is better; it show's it's related to the `@content` directive.
",chriseppstein,content-arguments
871,2013-08-03 01:59:35,"I'm not a fan of `@receive` either; the directive format is not a good fit for receiving arguments. That said, I do want this feature, and I can't think of any other syntax that would be better.
",nex3,receive
871,2013-08-04 16:38:14,"I guess I'm not a fan of receive due to it being commonly misspelled. Just
brainstorming....

@take
@pass
@get
@->
@vars
@name

On Friday, August 2, 2013, Nathan Weizenbaum wrote:

> I'm not a fan of @receive either; the directive format is not a good fit
> for receiving arguments. That said, I do want this feature, and I can't
> think of any other syntax that would be better.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-22046560
> .
",hcatlin,pass
871,2013-08-04 16:38:14,"I guess I'm not a fan of receive due to it being commonly misspelled. Just
brainstorming....

@take
@pass
@get
@->
@vars
@name

On Friday, August 2, 2013, Nathan Weizenbaum wrote:

> I'm not a fan of @receive either; the directive format is not a good fit
> for receiving arguments. That said, I do want this feature, and I can't
> think of any other syntax that would be better.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-22046560
> .
",hcatlin,get
871,2013-08-04 16:38:14,"I guess I'm not a fan of receive due to it being commonly misspelled. Just
brainstorming....

@take
@pass
@get
@->
@vars
@name

On Friday, August 2, 2013, Nathan Weizenbaum wrote:

> I'm not a fan of @receive either; the directive format is not a good fit
> for receiving arguments. That said, I do want this feature, and I can't
> think of any other syntax that would be better.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-22046560
> .
",hcatlin,take
871,2013-08-04 16:38:14,"I guess I'm not a fan of receive due to it being commonly misspelled. Just
brainstorming....

@take
@pass
@get
@->
@vars
@name

On Friday, August 2, 2013, Nathan Weizenbaum wrote:

> I'm not a fan of @receive either; the directive format is not a good fit
> for receiving arguments. That said, I do want this feature, and I can't
> think of any other syntax that would be better.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-22046560
> .
",hcatlin,receive
871,2013-08-04 16:38:14,"I guess I'm not a fan of receive due to it being commonly misspelled. Just
brainstorming....

@take
@pass
@get
@->
@vars
@name

On Friday, August 2, 2013, Nathan Weizenbaum wrote:

> I'm not a fan of @receive either; the directive format is not a good fit
> for receiving arguments. That said, I do want this feature, and I can't
> think of any other syntax that would be better.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-22046560
> .
",hcatlin,name
871,2013-08-04 16:38:14,"I guess I'm not a fan of receive due to it being commonly misspelled. Just
brainstorming....

@take
@pass
@get
@->
@vars
@name

On Friday, August 2, 2013, Nathan Weizenbaum wrote:

> I'm not a fan of @receive either; the directive format is not a good fit
> for receiving arguments. That said, I do want this feature, and I can't
> think of any other syntax that would be better.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-22046560
> .
",hcatlin,vars
871,2013-08-04 18:30:34,"I think I like @content-arguments best so far.
",chriseppstein,content-arguments
871,2013-08-04 19:12:54,"Hrrm... as I look at the use case more, this seems like something we think
would be pretty regularly used. Aka, I could make a Sass library that uses
this as a common API for interaction. And, with that in mind, this overall
approach of making it a directive line is odd to me. I'd much rather it
somehow work into the syntax more directly.

We could steal some Ruby syntax!



On Sun, Aug 4, 2013 at 11:30 AM, Chris Eppstein notifications@github.comwrote:

> I think I like @content-arguments best so far.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-22076323
> .
",hcatlin,content-arguments
871,2013-08-05 01:35:17,"The part I'm not a fan of is how much additional code this adds from a reuse standpoint.  Using global variables is worse when it comes to authoring the mixins, but more convenient for using them.  Shorter is better.  If it must be a keyword, `@receive` or `@args` is better than `@receive-content` or `@content-arguments`, even though they may be better descriptors.

Borrowing a bit from Haskell here:



Using a Ruby style syntax as @hcatlin suggests would also be acceptable.
",cimmanon,args
871,2013-08-05 01:35:17,"The part I'm not a fan of is how much additional code this adds from a reuse standpoint.  Using global variables is worse when it comes to authoring the mixins, but more convenient for using them.  Shorter is better.  If it must be a keyword, `@receive` or `@args` is better than `@receive-content` or `@content-arguments`, even though they may be better descriptors.

Borrowing a bit from Haskell here:



Using a Ruby style syntax as @hcatlin suggests would also be acceptable.
",cimmanon,receive-content
871,2013-08-05 01:35:17,"The part I'm not a fan of is how much additional code this adds from a reuse standpoint.  Using global variables is worse when it comes to authoring the mixins, but more convenient for using them.  Shorter is better.  If it must be a keyword, `@receive` or `@args` is better than `@receive-content` or `@content-arguments`, even though they may be better descriptors.

Borrowing a bit from Haskell here:



Using a Ruby style syntax as @hcatlin suggests would also be acceptable.
",cimmanon,content-arguments
871,2013-08-05 01:35:17,"The part I'm not a fan of is how much additional code this adds from a reuse standpoint.  Using global variables is worse when it comes to authoring the mixins, but more convenient for using them.  Shorter is better.  If it must be a keyword, `@receive` or `@args` is better than `@receive-content` or `@content-arguments`, even though they may be better descriptors.

Borrowing a bit from Haskell here:



Using a Ruby style syntax as @hcatlin suggests would also be acceptable.
",cimmanon,receive
871,2013-08-09 20:20:52,"I'm more of a fan of @cimmanon's example than any of the others I've seen. Placing the arguments before the `{` puts them firmly in the context of `@include`, both from the parser's standpoint and the reader's standpoint.

I'm not a big fan of `->`. Sass tends to use words over symbols where possible, so something like `@include foo(red, blue) with ($c, $d, $e)` or `taking ($c, $d, $e)` might be better.
",nex3,include
871,2013-08-11 00:24:45,"How about `@include foo(red, blue) using ($a, $b, $c)` ?
",Undeterminant,include
871,2013-08-11 04:41:12,"I think `as` is too unclear, and `returns`/`returning` are confusing given that `@return` already exists and does something different.

I like `using`. That may be my favorite so far.
",nex3,return
871,2013-08-23 16:20:04,"From my short-lived https://github.com/nex3/sass/issues/894, since the `@mixin` is defining variables to be bound in the content block scope, the content block scope should automatically bind them, but do so with an implicit `!default` and a warning.

Optionally a `using` keyword could allow the `@mixin` caller to rename variables before they are bound ( _and thus wouldn't issue a warning_ )



I just don't see a reason to force all variables to be explicitly named ( _as previously discussed_ ); it's not particularly magical if done implicitly as the mixin consumers will need to refer to argument documentation regardless.

`</2-cents>`
",northborndesign,mixin
871,2013-09-17 05:58:41,"@chriseppstein passing arguments to `@content` would be incredibly useful. Can we prioritize this issue?
",elisechant,content
871,2013-09-17 06:01:00,"Yes please! I came across this issue recently and would love this to help
tidy up some loops I've had to duplicate.

On Tuesday, September 17, 2013, Elise Chant wrote:

> @chriseppstein https://github.com/chriseppstein passing arguments to
> @content would be incredibly useful. Can we prioritize this issue?
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-24565751
> .
",cjcheshire,content
871,2013-09-18 00:01:47,"Yea I have something similar but like you say you can't do the loop within
the mixin - yet :)

I wanted the loop within a mixin as then it's tidier and cleans the code up
so much.

I'm happy it's being discussed - I thought about it the other day and
figured I was asking for something mad.

On Wednesday, September 18, 2013, Elise Chant wrote:

> For anyone interested, my workaround at the moment requires a repeating
> loop:
> _config.scss
> 
> // Category theme settings
> // ------------------------------------
> // store config in an associated array so we can loop through
> // and correctly assign values
> //
> // Use this like this:
> // Note - The repeated loop cannot be abstracted to a mixin becuase
> // sass wont yet allow us to pass arguments to the @content directive
> // Place the loop inside the selector
> 
> $themes:
>     'category-a' $color-quaternary,
>     'catgeory-b' $color-tertiary,
>     'catgeory-c' $color-secondary
> ;
> 
> _breadcrumb.scss
> 
> #el {
>     @each $theme in $themes {
>         $class: nth($theme, 1);
>         $color-prop: nth($theme, 2);
> 
> 
> 
> }
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-24631853
> .
",cjcheshire,content
871,2013-09-18 00:01:47,"Yea I have something similar but like you say you can't do the loop within
the mixin - yet :)

I wanted the loop within a mixin as then it's tidier and cleans the code up
so much.

I'm happy it's being discussed - I thought about it the other day and
figured I was asking for something mad.

On Wednesday, September 18, 2013, Elise Chant wrote:

> For anyone interested, my workaround at the moment requires a repeating
> loop:
> _config.scss
> 
> // Category theme settings
> // ------------------------------------
> // store config in an associated array so we can loop through
> // and correctly assign values
> //
> // Use this like this:
> // Note - The repeated loop cannot be abstracted to a mixin becuase
> // sass wont yet allow us to pass arguments to the @content directive
> // Place the loop inside the selector
> 
> $themes:
>     'category-a' $color-quaternary,
>     'catgeory-b' $color-tertiary,
>     'catgeory-c' $color-secondary
> ;
> 
> _breadcrumb.scss
> 
> #el {
>     @each $theme in $themes {
>         $class: nth($theme, 1);
>         $color-prop: nth($theme, 2);
> 
> 
> 
> }
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/871#issuecomment-24631853
> .
",cjcheshire,each
871,2014-03-21 14:26:51,"@bracketworks I had the same thought while writing it, lol. :sweat_smile:
",apfelbox,bracketworks
871,2014-03-22 06:46:28,"@bracketworks - first example looks great.


",jackmahoney,bracketworks
871,2014-11-28 10:29:57,"Hi @chriseppstein and co.
Has this (or similar) recently been implemented?
I have a mixin and include which previously worked using the old method of declaring an empty global variable, changing it with a mixin, then it being available in the include statement via @content

But now (in 3.4.9, ruby, windows command line, also latest version of prepros) the include statement is receiving an empty instance.

A copy of prepros using sass 3.3.8 seems to allow the variable to pass as expected
",davebeesley,content
871,2014-12-08 07:01:37,"What about..



It's short, there's no ""ing"", it won't be confused with the new upcoming `@use` like `using` might have been, and it's not commonly misspelled.
",whaaaley,use
871,2015-08-14 20:49:38,"@stereokai ask @xzyfer.
",nex3,xzyfer
870,2013-07-30 14:31:49,"_Title edited by @nex3._

**Bug Report Version** (potentially simple fix)

@-webkit-keyframes needs to pop out of selectors. 

Currently it's treated as any other rule.

**Feature Version**

The following may be very desirable for short one-time uses of this particular case.

**example.scss**



**example.css**


",srcspider,nex3
870,2014-01-22 17:45:29,"@jbalsas That's a tough case, because it's not clear what the correct behavior is there. When you're wrapping an import in a class, it's clear that you want some sort of namespacing on the selectors etc that you're importing, but there's no good way to namespace `@keyframes` rules there. Putting them into the global namespace seems risky. It's not necessarily wrong, though, so I'll reopen this and mark it as ""under consideration"".

To be clear, if we support this, there would be no automatic prefix attached to bubbled keyframes directives.
",nex3,keyframes
870,2014-01-22 18:31:46,"@nex3 That would solve our (@jbalsas and I) use case, since I agree, there's no valid way to namespace `@keyframes` (but there's no valid way to namespace any at-rule, just any selectors inside of them).

IMHO, bubbling them out makes the most sense for no other reason than preserving the validity (and preventing a case where, while vendors are working with them being nested now, it possibly breaking in the future).

Thanks for reconsidering this :)
",natecavanaugh,keyframes
869,2013-07-30 11:36:28,"_Some basic context: I came across this while trying to split the rules applied from the selectors by writing rules in a separate assets folder under %selectors and the actual selectors in an equity folder that mirrors the site page structure._

Sass 3.3.0.alpha.149 (Bleeding Edge)
Compass 0.12.2.sourcemaps (Alnilam)

To get the new source maps to work I'm combining my files in a single file by importing the relevant pages; and hence my problem.

The issue is that @import'ing %selector multiple times will duplicate the rules even when asking for compressed output. (it's clearer in the example)

Here is a basic example that reproduces the error:



**test.scss**



**x.scss**



**y.scss**



**all.scss**



You will get the following faulty _all.css_



Expected: single `.x, .y` rule and if I have a rule in a file then no matter what @import structure I use it's still a single rule (since it doesn't make sense to have multiple copies). ie. the following `(%test, test.scss, color, red)` is unique.
",srcspider,import
869,2013-07-30 12:13:28,"@Snugug I can see how #139 _might_ fix it, but I don't see how the semantics of %selector in the context of an import are completely equivalent to an @import that doesn't run twice in all contexts, so I think this should stay open until #139 is comes to a conclusion/implementation.

For what it's worth even a `@depends` directive is implemented, why should the behavior I describe not work in the context of an `@import` when %select is meant to be a virtual selector; meaning it makes no sense for the same color definition in one instance to be considered different than the same color definition in another instance that was loaded in.

ie. even if I have TWO files with TWO `%something` if both have `color: red` there should be only one shared `color: red`.
",srcspider,depends
869,2013-07-30 12:13:28,"@Snugug I can see how #139 _might_ fix it, but I don't see how the semantics of %selector in the context of an import are completely equivalent to an @import that doesn't run twice in all contexts, so I think this should stay open until #139 is comes to a conclusion/implementation.

For what it's worth even a `@depends` directive is implemented, why should the behavior I describe not work in the context of an `@import` when %select is meant to be a virtual selector; meaning it makes no sense for the same color definition in one instance to be considered different than the same color definition in another instance that was loaded in.

ie. even if I have TWO files with TWO `%something` if both have `color: red` there should be only one shared `color: red`.
",srcspider,import
869,2013-07-30 12:27:45,"In which case, this becomes a potential duplicate of #116 as well.

I think you may be misunderstanding what `@extend` does.  It takes every instance of the item you're extending and comma separates it, allowing you to move selectors around. Think of the `%placeholder` selectors not as entirely different and novel concepts, bur rather as a class that simply won't print if it's not extended. In addition, Sass, in an effort not to not to misinterpret your meaning and potentially mess up your cascade, does exactly what you say. You said you wanted to import that placeholder selector twice, so it's going to. Removing one of the extends could negatively affect your cascade, so it currently doesn't do that. 

Moreover, the way you would solve your current issue would be as follows:

**all.scss**



If this doesn't work for you because you are creating a framework, then you are precisely looking for the solution in #139. You would then write something like the following (syntax not final):

**x.scss**



**y.scss**


",Snugug,extend
869,2013-07-30 13:30:52,"(yes that's how I already solved it)

The problem with the solution is that it can only be ever used at the top level safely so it's more of a stop-gap measure (albeit I don't really have a problem with it since it's cleaner than having `@import`s in every file); anywhere else and you're likely to have someone `@import` it twice. The second `!once` solution has a similar semantic problem, if after the first `@import !once` someone then does `@import`'s **y.scss** twice the same undesirable effect would happen.

Should I convert the issue to a feature request for a alternative `@extend` or `%placeholder` syntax that ignores the cascade when generating? ie. ""ignore the current position of the element; inject the element and all its children relative to the position of the %placeholder."" Or in laymans terms the placeholder's position is the significant one, not the position of the element that calls `@extend`.
",srcspider,extend
869,2013-07-30 13:30:52,"(yes that's how I already solved it)

The problem with the solution is that it can only be ever used at the top level safely so it's more of a stop-gap measure (albeit I don't really have a problem with it since it's cleaner than having `@import`s in every file); anywhere else and you're likely to have someone `@import` it twice. The second `!once` solution has a similar semantic problem, if after the first `@import !once` someone then does `@import`'s **y.scss** twice the same undesirable effect would happen.

Should I convert the issue to a feature request for a alternative `@extend` or `%placeholder` syntax that ignores the cascade when generating? ie. ""ignore the current position of the element; inject the element and all its children relative to the position of the %placeholder."" Or in laymans terms the placeholder's position is the significant one, not the position of the element that calls `@extend`.
",srcspider,import
865,2013-07-28 18:45:16,"Oh, and make sure to ping @chriseppstein 
",hcatlin,chriseppstein
863,2013-09-26 15:33:09,"@nex3 Ping. 
",chriseppstein,nex3
856,2013-07-20 00:07:48,"Sass has very precise rules for how specificity works when using `@extend`. I've gone on at length about them [elsewhere](https://github.com/nex3/sass/issues/324#issuecomment-4607184), but the relevant part here is that the minimum specificity of the generated selector is based on the specificity of the selector doing the extending.

In the first example, the selector that extends `%border-init` is `table input`, which has specificity 2. That meant that the generated selector would have to have at least specificity 2, so `table input` was preserved in the output. However, in the second example, the selector doing the extending was just `table`, with specificity 1. This means that the extra specificity in `table input` was unnecessary since `input` already existed, so `table input` was discarded.
",nex3,extend
855,2013-07-17 15:55:46,"Hi, I'm experiencing a strange issue.

We're using Vagrant to build and deploy our assets across our team. However, when uploading our Sass-compiled CSS files, we discovered that they were being interpreted in the wrong encoding. We use several UTF symbols and a symbol library to handle the icons on our site, and these were being rendered as strange character sequences.

Checking the output CSS files, they have a `@charset ""ISO-8859-1"";` directive added to the top. This does not happen on our local Mac machines.

Even after placing an explicit `@charset ""UTF-8"";` directive at the top of our sass files, the output CSS still has the ISO-8859-1 charset at the top.

This is using Sass v3.2.9, Ruby 1.9.3p448, on Mac OS X v10.7.5. The Vagrant virtual machine is running Ubuntu 12.04 LTS.

Any ideas on what this could be?

Thanks,
Dan
",danapplegate,charset
855,2013-07-19 21:36:11,"I'm still interested in getting a copy of the file that triggered this. If you write `@charset ""UTF-8""`, Sass should emit UTF-8 code with a UTF-8 charset declared.
",nex3,charset
855,2013-08-06 00:32:11,"@chriseppstein I definitely have a reproducible case of this. Sass seems to remove an explicitly specified `@charset` if it doesn't think it's required, which I don't think is intended. (It's certainly annoying.)



Happy to provide environment details. Ruby is 'ruby 1.9.3p429 (2013-05-15) [x86_64-linux] Brightbox' from the Brightbox PPA on Ubuntu 12.04. On this machine:



Noticed this when our asset pipeline starting coming up with different fingerprints from 1.9 and 1.8 rubies. Here's the expected output, when run with 1.8:


",dominics,charset
854,2013-07-17 01:21:41,"This PR addresses a couple of @nex3's [requests](https://github.com/nex3/sass/issues/593#issuecomment-11631340) on nex3/sass#593. 

I will submit a different pull request to add metadata to SyntaxErrors, but I'm less sure of how that work will end up. 

I'm just adding tests and docs here. There is a persistent test failure `test_extend_sourcemap_scss` unrelated to this change. 

Hope you approve :)
",eriwen,nex3
852,2014-08-25 16:04:25,"This was closed by @nex3 but I don't see a reason. Recently ran into the want of `slice`. Any chance of getting this re-opened and implemented?
",Snugug,nex3
851,2013-09-19 14:49:27,"@nex3 do you object?
",chriseppstein,nex3
848,2013-07-12 11:33:22,"I'm trying to accomplish the following CSS output with Sass:



The @extend directive should do the job:



But it seems @extend has problems with the two parent references (&) in the @extend definition (%sibling-selector).
This is the output:



The @extend directive is making sibling selectors for each combination of selectors that use the @extend definition.

While I would expect the @extend directive stays in the ""scope"" of the current selector, and both ampersands are replaced by the current selector and not referring to previous ones.
",huyby,extend
847,2013-08-21 14:32:54,"Don't get me wrong, I still _very_ much want that kind of compression and minification, along with linting. In fact, I have been trying to handle this with Grunt or Rake tasks lately, so I'm glad this discussion is happening now (yes, I use and am aware of the compressed style of output). What we're talking about is pushing Sass beyond compression into linting. Maybe it could fit into the goals of Sass, I dunno. I think the discussion would have to be with a wider audience.

Maybe it could be an option in Compass? + @chriseppstein
",kevinSuttle,chriseppstein
847,2013-08-21 14:42:22,"Linting could also be something that could be a part of a GUI app like Codekit. Thoughts @bdkjones?
",kevinSuttle,bdkjones
847,2013-08-21 15:16:33,"CodeKit already offers the compressed option for Sass output. 

Is there a good Sass lint tool available?

Sent from my iPhone

On Aug 21, 2013, at 7:42, Kevin Suttle notifications@github.com wrote:

> Linting could also be something that could be a part of a GUI app like Codekit. Thoughts @bdkjones?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",bdkjones,bdkjones
846,2013-07-10 23:40:10,"Using: Sass 3.3.0.alpha.198 (Bleeding Edge)

When using `--stdin` and `--sourcemap` together I get this error:



(docpad/docpad-plugin-sass#14 @balupton)
",jking90,balupton
845,2013-07-08 09:10:47,"I think there is a bug with @extend (or at least has a very unusual behavior).
Here is a _sample code_:



What I try to achieve here is alter the %code-text in the article scope to extend with a color for later use. Later in the code I wanted to extend footer with %code-text, obviously without the color.
This is the compiled output:



If you look closely, you can see there is strange selector: article footer. It's definitely  generated because of ""scoped"" placeholder selector.
Although the result works as it's expected, I'm not sure it's because of it has to do as I wanted or because of a bug.
",pcdevil,extend
843,2013-07-09 18:02:27,"The CSS import directive is required to be at the top of a CSS file. This is Sass saving you from yourself :four_leaf_clover:

From the [spec](http://www.w3.org/TR/CSS2/cascade.html#at-import):

>  In CSS 2.1, any `@import` rules must precede all other rules (except the `@charset` rule, if present).
",chriseppstein,charset
843,2013-07-09 18:02:27,"The CSS import directive is required to be at the top of a CSS file. This is Sass saving you from yourself :four_leaf_clover:

From the [spec](http://www.w3.org/TR/CSS2/cascade.html#at-import):

>  In CSS 2.1, any `@import` rules must precede all other rules (except the `@charset` rule, if present).
",chriseppstein,import
843,2013-07-09 18:13:21,"Look a little closer.  Yes, `@import` must **must precede all other rules**.  The OP didn't make it clear, but the problem is that they want to have the comments appear with the import.

What they want:



What they're getting:



Comments _are_ allowed to precede imports.
",cimmanon,import
842,2013-07-06 01:14:12,"During development I prefer to not concatenate my javascript or CSS files so I can see which file errors occur in etc.

This doesn't seem possible at the moment when using SASS.

This could potentially be implemented using `@import` in CSS.
I don't know how the SASS compilation works at all but with sprockets it's possible to get an array of filenames back when requesting the path to a javascript file so perhaps the same is possible with SASS?
",ansman,import
842,2013-07-09 17:50:03,"@nex3 here's a very valid use case for alloying dynamic imports. This should be implementable in ""user space"" based on a conditional, but it's not.

See #739.
",chriseppstein,nex3
840,2013-07-08 19:41:38,"@robwierzbowski, no serious problems, but let's assume we have tags with ids `item-blue`, `item-aqua` and `item-green` that we want to style by the `@each` depending on their names:



There will be backgrounds for `#item-blue`, `#item-cyan` and `#item-green`, but not for the `#item-aqua`. These color name replacement exceptions must be remembered and styled separately.
",lukaszgrolik,each
836,2013-07-03 23:41:35,"addressed my own code comments. ready for your review @nex3.
",chriseppstein,nex3
836,2013-07-11 07:23:21,"This would definitely be a very cool fix. I've been bothered by this behaviour a couple of days ago; had to wrap the whole thing into a conditional @if statement. Not great.

Can we expect this patch for v3.3 maybe? Or even before?
",HugoGiraudel,if
835,2013-07-02 21:32:29,"Right now, the [Sass function documentation](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html) uses the Ruby-style underscored names for functions with multiple-word names rather than Sass-style hyphenated names (e.g. `scale_color` as opposed to `scale-color`). The underscored names work fine, but they're not the recommended style.

Unfortunately, if a hyphenated name is used in YARD's `@overload` tag, it cuts off the hyphen and anything after it. We're likely to need to monkey-patch YARD to get this to work as desired.
",nex3,overload
835,2013-07-02 21:32:58,"Pinging @lsegal to see if he has insight into the best way to hack the `@overload` tag.
",nex3,lsegal
835,2013-07-02 21:32:58,"Pinging @lsegal to see if he has insight into the best way to hack the `@overload` tag.
",nex3,overload
830,2013-06-28 20:00:21,"sass --version #Sass 3.2.9 (Media Mark)

SASS FILE (.scss):
# copied from http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixin-content

=apply-to-ie6-only
- html
  @content

+apply-to-ie6-only
  #logo
    background-image: url(/logo.gif)

ERROR:
/*
Syntax error: Invalid CSS after ""/\* END WORKS */"": expected selector or at-rule, was ""=apply-to-ie6-only""
        on line 25 of /var/www/dev1_html/wp-content/themes/reverie-child/sass/test.scss

Backtrace:
/var/www/dev1_html/wp-content/themes/reverie-child/sass/test.scss:25
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/sass-3.2.9/lib/sass/scss/parser.rb:1146:in `expected'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/sass-3.2.9/lib/sass/scss/parser.rb:1084:in`expected'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/sass-3.2.9/lib/sass/scss/parser.rb:28:in `parse'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/sass-3.2.9/lib/sass/engine.rb:342:in`_to_tree'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/sass-3.2.9/lib/sass/engine.rb:315:in `_render'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/sass-3.2.9/lib/sass/engine.rb:262:in`render'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/compiler.rb:140:in `block (2 levels) in compile'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/compiler.rb:126:in`timed'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/compiler.rb:139:in `block in compile'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/logger.rb:45:in`red'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/compiler.rb:138:in `compile'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/compiler.rb:118:in`compile_if_required'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/compiler.rb:103:in `block (2 levels) in run'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/compiler.rb:101:in`each'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/compiler.rb:101:in `block in run'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/compiler.rb:126:in`timed'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/compiler.rb:100:in `run'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/commands/watch_project.rb:147:in`recompile'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/path.rb:73:in `call'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/path.rb:73:in`run_callback'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/path.rb:55:in `callback_action'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/path.rb:35:in`update'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/state/directory.rb:39:in `block in modified'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/state/directory.rb:37:in`each'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/state/directory.rb:37:in `modified'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/state/directory.rb:18:in`refresh'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/backends/inotify.rb:12:in `block in add_handler'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/rb-inotify-0.9.0/lib/rb-inotify/notifier.rb:201:in`call'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/rb-inotify-0.9.0/lib/rb-inotify/notifier.rb:201:in `block in watch'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/rb-inotify-0.9.0/lib/rb-inotify/watcher.rb:41:in`[]'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/rb-inotify-0.9.0/lib/rb-inotify/watcher.rb:41:in `callback!'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/rb-inotify-0.9.0/lib/rb-inotify/event.rb:128:in`callback!'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/rb-inotify-0.9.0/lib/rb-inotify/notifier.rb:234:in `block in process'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/rb-inotify-0.9.0/lib/rb-inotify/notifier.rb:234:in`each'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/rb-inotify-0.9.0/lib/rb-inotify/notifier.rb:234:in `process'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/rb-inotify-0.9.0/lib/rb-inotify/notifier.rb:217:in`run'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/backends/inotify.rb:20:in `run'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm/monitor.rb:26:in`run'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/fssm-0.2.10/lib/fssm.rb:70:in `monitor'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/commands/watch_project.rb:87:in`perform'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/commands/base.rb:18:in `execute'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/commands/project_base.rb:19:in`execute'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/exec/sub_command_ui.rb:43:in `perform!'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/lib/compass/exec/sub_command_ui.rb:15:in`run!'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/bin/compass:30:in `block in <top (required)>'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/bin/compass:44:in`call'
/usr/local/rvm/gems/ruby-2.0.0-p195/gems/compass-0.12.2/bin/compass:44:in `<top (required)>'
/usr/local/rvm/gems/ruby-2.0.0-p195/bin/compass:23:in`load'
/usr/local/rvm/gems/ruby-2.0.0-p195/bin/compass:23:in `<main>'
/usr/local/rvm/gems/ruby-2.0.0-p195/bin/ruby_noexec_wrapper:14:in`eval'
/usr/local/rvm/gems/ruby-2.0.0-p195/bin/ruby_noexec_wrapper:14:in `<main>'
_/
body:before {
  white-space: pre;
  font-family: monospace;
  content: ""Syntax error: Invalid CSS after \""/_ END WORKS */\"": expected selector or at-rule, was \""=apply-to-ie6-only\""\A         on line 25 of /var/www/dev1_html/wp-content/themes/reverie-child/sass/test.scss""; }

..but if I switch the file to .sass

/\* END WORKS */
- html #logo {
  background-image: url(/logo.gif); }
",kimdcottrell,content
827,2013-06-27 09:16:26,"On Win 7/64, if a SASS file is at the path that contains any _left_ square bracket character, e.g. ""c:/dev/[ web ]/my_project"", @import directives can't find partials and compilation fails. Having a _right_ square bracket character in the path doesn't cause the same effect.

Trivial test:

**test.scss**



**partial.scss**



put it in the folder named ""c:/[ test ]"" and try to compile.
",snobo,import
819,2013-06-24 22:01:05,"It's been more than a month since @chriseppstein is working at Linkedin (congrats, man).

Also, his blog has moved since 2009 I believe. Updating the link to it could be done at the same time his bio is updated.
",kaelig,chriseppstein
818,2013-06-24 21:07:57,"@nex3 is this intentional?
",chriseppstein,nex3
818,2013-06-28 01:36:12,"> @nex3 is this intentional?

More or less. `calc` is considered to be a type of string literal, similarly to how `url` is treated. We could theoretically include a parser for the `calc` mini-grammar that would have explicit rules about how variables work, but then variables would work differently in that context than any other context, which may be unexpected.

I'm going to mark this as a feature request and leave it open until we come to a decision about what behavior we'd ideally like for `calc`.
",nex3,nex3
818,2014-07-28 19:20:41,"@csdco, this shouldn't be so. Can you elaborate on your environment, versions, etc?
",lolmaus,csdco
818,2015-09-09 21:50:00,"Ok, here's my proposal for calc integration.

calc() expressions should be parsed into SassScript AST expressions. The parsing should use the calc grammar with the exception that it will allow Sass variable references in place of a value. I think this is the most natural expectation from the author's perspective.

Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a `calc()` expression.

Any `calc()` expression that can be resolved statically will evaluate to static value in the output instead of outputting as a `calc()` expression.

We need to decide how intermediate expressions will work.

For example:



This could be an error at line 2 (because `3px + 2rem` immediately resolves to a calc string) or it could output a value for derived-expression as `calc( ( 3px + 2rem ) / 2 )`. I lean towards the latter, even though it is harder to implement. Expressions would resolve their variable references into values, but otherwise unresolvable expressions would stay as expression references instead of values until output so that they can be composed with other expressions.

If we want SassScript expressions to be mixable in the same line of code with Calc expressions, I think we'd need a better parsing hint than interpolation (which always results in a string). Probably `sass-script(...expression...)`. E.g. `calc(1px + 2em + sass-script($foo % 3))` Personally, I think this is unnecessary at this time.

If we do this right, basically the calc() expression syntax is an implementation detail and not something that our users will need to use directly unless they want to.

@nex3, @xzyfer, @mgreter thoughts?
",chriseppstein,mgreter
818,2015-09-09 21:50:00,"Ok, here's my proposal for calc integration.

calc() expressions should be parsed into SassScript AST expressions. The parsing should use the calc grammar with the exception that it will allow Sass variable references in place of a value. I think this is the most natural expectation from the author's perspective.

Any SassScript expression that cannot be computed because the units are incompatible will no longer result in an error, instead that expression will output as a `calc()` expression.

Any `calc()` expression that can be resolved statically will evaluate to static value in the output instead of outputting as a `calc()` expression.

We need to decide how intermediate expressions will work.

For example:



This could be an error at line 2 (because `3px + 2rem` immediately resolves to a calc string) or it could output a value for derived-expression as `calc( ( 3px + 2rem ) / 2 )`. I lean towards the latter, even though it is harder to implement. Expressions would resolve their variable references into values, but otherwise unresolvable expressions would stay as expression references instead of values until output so that they can be composed with other expressions.

If we want SassScript expressions to be mixable in the same line of code with Calc expressions, I think we'd need a better parsing hint than interpolation (which always results in a string). Probably `sass-script(...expression...)`. E.g. `calc(1px + 2em + sass-script($foo % 3))` Personally, I think this is unnecessary at this time.

If we do this right, basically the calc() expression syntax is an implementation detail and not something that our users will need to use directly unless they want to.

@nex3, @xzyfer, @mgreter thoughts?
",chriseppstein,xzyfer
818,2015-09-15 00:51:36,"I think @cimmanon's point about strings is a more general one: that users don't have a strong sense of the non-visible semantics of SassScript values. `#{12}px` is one example of that, but silently generating `calc()` tickles it in different ways. Users doing what looks like a normal numeric operation with two numbers get back an object that doesn't behave like a number in a lot of situations.

And the visibility of automatic calc-conversion would be _very_ low. Not only is it happening at runtime on stylesheets with no `calc()` in the source, it's triggered based on units, which users already have a hard time tracking and understanding. It's just a recipe for non-local errors that users can't understand or stylesheets with `calc()`s in their `@media` queries failing to style things properly in production.

I don't think it's onerous to require the user to explicitly write `calc()` in places where they want calc-y unit behavior. It follows the general Sass philosophy of making preprocessing visible, and if we make the `calc()`iness of a value contagious it'll be possible to use them pervasively without needing to annotate every operation.
",nex3,media
818,2015-10-19 16:06:25,"This is not working as i am substituting  $xlarge-up-font-size  and $large-up-font-size with values 1.38vw and 22 px
@media #{$large} {
       margin-top: calc(-#{$large-up-font-size}-18px); 
}
@media #{$xlarge} {
       margin-top: calc(-#{$xlarge-up-font-size}-18px); 
}

What I am getting is 
![screen shot 2015-10-19 at 8 05 59 pm](https://cloud.githubusercontent.com/assets/4039657/10583212/d4b8e27c-769c-11e5-9916-dc874a2f1e66.png)
",shmdhussain,media
817,2013-06-24 09:57:38,"Hi,

I am building a UI framework ( getclank.com ) One component is buttons:

http://getclank.com/demos/buttons.html

I want to dynamically adjust the primary button color based on the value given for a variable called $accent-color. E.g. if the accent color is light, I would want to make the primary button darker, but when the accent color is dark, I want to make my primary button brighter.

Now, if I try to do this with @if it doesn't update the $accent-color-primary value, instead I get a message that it doesn't exist:



Any ideas on how to achieve this within the current Sass language?
",Wolfr,if
817,2013-06-24 16:40:59,"Right, variables defined within an `@if` statement are only local within that block (see: scope).  If you need to use it outside the `@if` statement, you initialize it outside.  Alternatively, you could use the `if()` function:


",cimmanon,if
816,2013-06-23 12:59:50,"Hi,

first of all, thanks for the great work done so far. I have a small request that would help code readability and it is present in C#.

I request we would have a @region or some other named tag, that you can use to group code with out affecting the output.

Example:



Like in C#, these regions would not effect the output in anyway. This can be beneficial in cases where you don't want to split the code into multiple section or files. The same could be done in many ways, one being:



But this approach can be hard to track if you have 20 elements in the file. You could also use the import but you will just risk creating many short files.

There is also an interesting feature that could be added to @region. We could include regions from all the scss files found within the files reach with a @get-regions Menu type of syntax.

This would work similar to @include. You could then easily generate css files that have specific styling code in them, without needing to change the underlying scss structure.

You could for example generate files like menu.css, dialogs.css and at the same time have an page specific sass structure like: _profile.scss, _users.scss, _homepage.scss.
",WallRushGO,get-regions
816,2013-06-23 12:59:50,"Hi,

first of all, thanks for the great work done so far. I have a small request that would help code readability and it is present in C#.

I request we would have a @region or some other named tag, that you can use to group code with out affecting the output.

Example:



Like in C#, these regions would not effect the output in anyway. This can be beneficial in cases where you don't want to split the code into multiple section or files. The same could be done in many ways, one being:



But this approach can be hard to track if you have 20 elements in the file. You could also use the import but you will just risk creating many short files.

There is also an interesting feature that could be added to @region. We could include regions from all the scss files found within the files reach with a @get-regions Menu type of syntax.

This would work similar to @include. You could then easily generate css files that have specific styling code in them, without needing to change the underlying scss structure.

You could for example generate files like menu.css, dialogs.css and at the same time have an page specific sass structure like: _profile.scss, _users.scss, _homepage.scss.
",WallRushGO,include
816,2013-06-23 12:59:50,"Hi,

first of all, thanks for the great work done so far. I have a small request that would help code readability and it is present in C#.

I request we would have a @region or some other named tag, that you can use to group code with out affecting the output.

Example:



Like in C#, these regions would not effect the output in anyway. This can be beneficial in cases where you don't want to split the code into multiple section or files. The same could be done in many ways, one being:



But this approach can be hard to track if you have 20 elements in the file. You could also use the import but you will just risk creating many short files.

There is also an interesting feature that could be added to @region. We could include regions from all the scss files found within the files reach with a @get-regions Menu type of syntax.

This would work similar to @include. You could then easily generate css files that have specific styling code in them, without needing to change the underlying scss structure.

You could for example generate files like menu.css, dialogs.css and at the same time have an page specific sass structure like: _profile.scss, _users.scss, _homepage.scss.
",WallRushGO,region
815,2013-06-23 12:58:49,"Hi,

first of all, thanks for the great work done so far. I have a small request that would help code readability and it is present in C#.

I request we would have a @region or some other named tag, that you can use to group code with out affecting the output.

Example:
.page {
    @region Variables {
          $smallPadding: 10px;
          $largePadding: 20px;
    }
    @region Menu styling {
          .menu li {
                padding: $smallPadding;
          }
    } 



}

Like in C#, these regions would not effect the output in anyway. This can be beneficial in cases where you don't want to split the code into multiple section or files. The same could be done in many ways, one being:

//Relates to dialog
.page .dialog {
}

//Relates to menus
.page .menu {
}

But this approach can be hard to track if you have 20 elements in the file. You could also use the import but you will just risk creating many short files.

There is also an interesting feature that could be added to @region. We could include regions from all the scss files found within the files reach with a @get-regions Menu type of syntax.

This would work similar to @include. You could then easily generate css files that have specific styling code in them, without needing to change the underlying scss structure.

You could for example generate files like menu.css, dialogs.css and at the same time have an page specific sass structure like: _profile.scss, _users.scss, _homepage.scss.
",WallRushGO,get-regions
815,2013-06-23 12:58:49,"Hi,

first of all, thanks for the great work done so far. I have a small request that would help code readability and it is present in C#.

I request we would have a @region or some other named tag, that you can use to group code with out affecting the output.

Example:
.page {
    @region Variables {
          $smallPadding: 10px;
          $largePadding: 20px;
    }
    @region Menu styling {
          .menu li {
                padding: $smallPadding;
          }
    } 



}

Like in C#, these regions would not effect the output in anyway. This can be beneficial in cases where you don't want to split the code into multiple section or files. The same could be done in many ways, one being:

//Relates to dialog
.page .dialog {
}

//Relates to menus
.page .menu {
}

But this approach can be hard to track if you have 20 elements in the file. You could also use the import but you will just risk creating many short files.

There is also an interesting feature that could be added to @region. We could include regions from all the scss files found within the files reach with a @get-regions Menu type of syntax.

This would work similar to @include. You could then easily generate css files that have specific styling code in them, without needing to change the underlying scss structure.

You could for example generate files like menu.css, dialogs.css and at the same time have an page specific sass structure like: _profile.scss, _users.scss, _homepage.scss.
",WallRushGO,include
815,2013-06-23 12:58:49,"Hi,

first of all, thanks for the great work done so far. I have a small request that would help code readability and it is present in C#.

I request we would have a @region or some other named tag, that you can use to group code with out affecting the output.

Example:
.page {
    @region Variables {
          $smallPadding: 10px;
          $largePadding: 20px;
    }
    @region Menu styling {
          .menu li {
                padding: $smallPadding;
          }
    } 



}

Like in C#, these regions would not effect the output in anyway. This can be beneficial in cases where you don't want to split the code into multiple section or files. The same could be done in many ways, one being:

//Relates to dialog
.page .dialog {
}

//Relates to menus
.page .menu {
}

But this approach can be hard to track if you have 20 elements in the file. You could also use the import but you will just risk creating many short files.

There is also an interesting feature that could be added to @region. We could include regions from all the scss files found within the files reach with a @get-regions Menu type of syntax.

This would work similar to @include. You could then easily generate css files that have specific styling code in them, without needing to change the underlying scss structure.

You could for example generate files like menu.css, dialogs.css and at the same time have an page specific sass structure like: _profile.scss, _users.scss, _homepage.scss.
",WallRushGO,region
814,2013-06-23 03:16:16,"Assume module `parent` imports module `child`.  An `@extend`-only selector, `%selector`, defined in `parent` will be unavailable in `child`.  This does not correspond with similar constructs, such as mixins.  A mixin defined in `parent` would be available in `child`.  Therefore, this is a breaking behavior.
## Files

**_child.scss**



**parent.scss**


## Output

Command: `sass --check parent.scss`


## Importance

This prevents the use of a particularly clean hooking technique, whereby a framework could `@extend` various `%`-selectors at certain points with the `!optional` flag, allowing applications to implement numerous definitions for the selector.  Provided the `%`-selectors work like normal selectors, the multiple definitions will chain together.
",Zenexer,extend
809,2013-06-20 23:18:07,"> Printing dependencies is not an aspect of compiling Sass files. 

As demonstrated, it is an aspect of integrating with a build tool for compiling sass files. `gcc` provides this ability via the `-M` command line option. From the man page for gcc, the `-M` option: ""Instead of outputting the result of preprocessing, output a rule suitable for make describing the dependencies of the main source file.""

> Emitting the same output we normally do in a machine-readable format is different

Newline separated lists is a very machine readable format designed for use with numerous unix utilities. For example: `sass --dependencies foo.scss | xargs vim` and now I've opened every dependency of my file in my text editor. It also works great with grep.

> You can even make a fair go at invoking it from the command line 

That's not a fair go at it. It doesn't take import paths into account. It doesn't take relative imports into account. Doing these things correctly is non-trivial.

> The issue isn't that sass shouldn't integrate with other tools; it's that listing dependencies is outside its purview.

The claim is that listing dependencies is a form of tool integration. A code example was provided by @codifferous  showing this to be true. Simply stating that the purview of sass is one form of tool integration but not another is not founded in a rational basis. You have made a value judgement that one tool is more important to integrate with than another and that the first one is worth working on and the second one is not.

> this is a narrower use-case than warrants the cost of adding a new option.

This is really the core of your argument. You simply don't think it's worth supporting `make` out of the box. I disagree. Make continues to be an important build tool and I don't find the cost of having this option in the `-h` output onerous. But, to be fair, GCC doesn't list the `-M` option in the `--help` output, it only mentions it in the man page.

>  It doesn't make sense to add every option that would be useful to anyone.

Every option should be evaluated independently. I've certainly rejected many of them. No one has claimed that every option should be added, and using a slippery-slope argument is not productive.
",chriseppstein,codifferous
808,2013-06-17 20:24:25,"@nex3 Just added some explanation. Let me know if you think it's clear enough...
",ggilder,nex3
806,2013-06-18 11:07:48,"Yes, that's the expected output. It's not human readable, it's machine readable for tools like FireSass or Chrome's built in Sass support.

On Jun 18, 2013, at 6:50 AM, Mark McDonnell notifications@github.com wrote:

> @nex3 I've updated to 3.2.9 but I get the same issue...
> 
> @media -sass-debug-info{filename{font-family:file:\/\/\/Users\/markmcdonnell\/Code\/vosbox\/workspace\/tabloid\/webapp\/static\/sass\/guts\/styleguide\/_grid.scss}line{font-family:\00003201}}
> ...that's the compiled output?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,media
805,2013-06-17 19:32:29,"This is impossible to debug without more information. What is a simple input file that triggers the problem? What output does it produce for you? What encoding does the input file use? What's your system encoding?

The issue you linked contains several relevant quotes from the Sass reference. Have you tried adding a `@charset` declaration to your file?
",nex3,charset
805,2013-06-18 18:13:37,"@nex3 

Files are saved as UTF8, all files have @charset ""utf8"" declaration and the config sets encoding to utf8 too. It still happens when compileing Sass via Compass (I don't use Sass alone) on Windows, that these chars get destroyed.
",djesse,charset
805,2013-06-18 18:29:33,"> Files are saved as UTF8, all files have @charset ""utf8"" declaration and the config sets encoding to utf8 too. It still happens when compileing Sass via Compass (I don't use Sass alone) on Windows, that these chars get destroyed.

I'm confused. `@charset ""utf8""` is invalid; the encoding's name is ""utf-8"". This should throw an error. If it's not throwing an error, something much deeper is going wrong.
",nex3,charset
805,2013-06-18 19:17:36,"Sorry, this was just a typo here. Of course @charset ""utf-8"" is used.
",djesse,charset
805,2013-06-18 20:20:15,"When I look at https://github.com/djesse/yaml4-sass/blob/master/sass/yaml/screen/typography.scss, I don't see a `@charset` declaration. Where are you declaring it exactly?
",nex3,charset
805,2013-06-23 12:47:52,"I also don't see the charset declaration in the old yaml4-sass project where the chars have been broken. The project has been moved to a new location yamlcss and now I see most of not all .scss files start wirth @charset ""utf-8"";. Maybe the issue is now solved and the dirty string replacement workaround in the Grunt file can be removed?
",yamlfd,charset
803,2013-06-10 20:35:36,"I like the idea of declaring a host-language dependency from a sass file. I'm not sure that `@import` is the right place for such a thing. What's more, such a construct would imply that the functionality is only available during the compilation of the sass files into which this import called which is doable, but tricky.
",chriseppstein,import
803,2013-06-10 20:40:19,"Maybe an `@require` syntax?
",Snugug,require
803,2013-06-17 16:03:38,"Is Compass's method of securing custom SassScript portable to Sass? 

I think what we're looking for is a way to extend the language as we would in Compass, but without being dependent on Compass itself. Most of the @Team-Sass extensions could be vanilla Sass, and be more useful to the community as a whole, if there was a way to add custom SassScript functions at this level.
",robwierzbowski,Team-Sass
803,2013-06-20 18:57:20,"There's lots of issues being discussed here; hopefully sectioning this post will avoid any conflation.

#### Sass Packages

> Package management has traditionally been a language concern only to the point where the necessary hooks and environmental capabilities are provided. From there, it is usually a separate project

Exactly. Until proven beyond any doubt, package management is a project concern. Defining packages can be a language concern ‚Äî it's Sass's job to standardize what an extension is, and to make it easy to consume in a project. 

Compass has vetted a highly successful package format. We know it works, we know people are building great tools with it and other people are easily incorporating those tools into their projects. For many tools the ability to add custom Ruby functions is an essential part of that package ‚Äî for complex processing, to add new features, or for performance reasons.

Most of the developers in this issue would like to see Compass's package definition (and Ruby exposure) added to vanilla Sass. The benefits include:
- Reduce the dependency stack by one. _Ruby, Sass, Compass_ becomes _Ruby, Sass_.
- Increase audience, unify community. The bottleneck on advanced extensions becomes Ruby instead of Compass. Only libSass users are excluded.
- Open possibilities for alternatives and experimentation. Right now Compass has a monopoly on advanced features that require Ruby. If you have to install Compass anyways, why reproduce any of its functionality? Even if Compass remains the defacto choice (which it probably will), competition and experimentation leads to a healthier ecosystem.
- A standard package structure makes it easier for authors to write an extension and to collaborate on each other's extensions. 
- Moving package definition and Ruby exposure into Sass doesn't invalidate any of Chris's points in https://github.com/nex3/sass/issues/803#issuecomment-19622766.

#### Package Management

This is a more complex issue for sure. There seem to be two contexts for Sass package consumption: an integrated Ruby/Rails project and a front-end project that uses Sass as a tool. I don't have any experience using Compass in a Rails project, but this is what I can add from my perspective:

_[edit] When I wrote this I wasn't super familiar with how Compass works in a Rails project. After learning more I think the distinction is mostly moot. RubyGems and Bower both would manage Sass packages equally well. Compass is only needed for bundling templates/boilerplate._

**Bower for Sass-package-as-component projects** 

In a Sass-package-as-component project, Sass extensions are just front-end components, the same as any JavaScript, CSS, image, font, or CoffeeScript component. @Bower manages all of these packages lightly, has a friendly user interface, and is a fixture in the JavaScript tooling community that's being embraced by the larger front-end community at a rapid pace. It also works with Sass and Compass extensions right now. 

I think there's a good case for Sass to have an official scheme or recommendation for package distribution by Bower, even if it's not the only package manager. Bower is aggressively single task ‚Äî from what I know it can't replace everything Compass does in a Ruby/Rails project, but if I'm using Bower on a project I'm going to use it to manage all of my front-end components, including Sass. 

#### Compass as a library

> Why move package management into Sass core and leave the std library of compass out? 

There's still a clear line between language and library. Compass is a huge part of the Sass community, enough that in many developer's minds the distinction between the two is blurred. But competitors and alternatives exist, and I think it's important that Compass stands on its merits as a framework/library without hindering those that want to try new solutions to the same problems.

Take [Bourbon](https://github.com/thoughtbot/bourbon) by @thoughtbot, an alternate Sass library, or @AI's [Autoprefixer](https://github.com/ai/autoprefixer), which I've been testing and love. Projects like Autoprefixer make me think the future of Sass could be just programatic CSS construction, tools, and style mixins. I personally don't ever want to use another CSS3 compatibility mixin again. 

CSS preprocessing is still in its adolescence. I don't think we can say any library-level problems are definitively solved, but we can use language extensions tested in libraries to strengthen Sass itself (if that foggy distinction makes any sense).
",robwierzbowski,AI
803,2013-06-20 18:57:20,"There's lots of issues being discussed here; hopefully sectioning this post will avoid any conflation.

#### Sass Packages

> Package management has traditionally been a language concern only to the point where the necessary hooks and environmental capabilities are provided. From there, it is usually a separate project

Exactly. Until proven beyond any doubt, package management is a project concern. Defining packages can be a language concern ‚Äî it's Sass's job to standardize what an extension is, and to make it easy to consume in a project. 

Compass has vetted a highly successful package format. We know it works, we know people are building great tools with it and other people are easily incorporating those tools into their projects. For many tools the ability to add custom Ruby functions is an essential part of that package ‚Äî for complex processing, to add new features, or for performance reasons.

Most of the developers in this issue would like to see Compass's package definition (and Ruby exposure) added to vanilla Sass. The benefits include:
- Reduce the dependency stack by one. _Ruby, Sass, Compass_ becomes _Ruby, Sass_.
- Increase audience, unify community. The bottleneck on advanced extensions becomes Ruby instead of Compass. Only libSass users are excluded.
- Open possibilities for alternatives and experimentation. Right now Compass has a monopoly on advanced features that require Ruby. If you have to install Compass anyways, why reproduce any of its functionality? Even if Compass remains the defacto choice (which it probably will), competition and experimentation leads to a healthier ecosystem.
- A standard package structure makes it easier for authors to write an extension and to collaborate on each other's extensions. 
- Moving package definition and Ruby exposure into Sass doesn't invalidate any of Chris's points in https://github.com/nex3/sass/issues/803#issuecomment-19622766.

#### Package Management

This is a more complex issue for sure. There seem to be two contexts for Sass package consumption: an integrated Ruby/Rails project and a front-end project that uses Sass as a tool. I don't have any experience using Compass in a Rails project, but this is what I can add from my perspective:

_[edit] When I wrote this I wasn't super familiar with how Compass works in a Rails project. After learning more I think the distinction is mostly moot. RubyGems and Bower both would manage Sass packages equally well. Compass is only needed for bundling templates/boilerplate._

**Bower for Sass-package-as-component projects** 

In a Sass-package-as-component project, Sass extensions are just front-end components, the same as any JavaScript, CSS, image, font, or CoffeeScript component. @Bower manages all of these packages lightly, has a friendly user interface, and is a fixture in the JavaScript tooling community that's being embraced by the larger front-end community at a rapid pace. It also works with Sass and Compass extensions right now. 

I think there's a good case for Sass to have an official scheme or recommendation for package distribution by Bower, even if it's not the only package manager. Bower is aggressively single task ‚Äî from what I know it can't replace everything Compass does in a Ruby/Rails project, but if I'm using Bower on a project I'm going to use it to manage all of my front-end components, including Sass. 

#### Compass as a library

> Why move package management into Sass core and leave the std library of compass out? 

There's still a clear line between language and library. Compass is a huge part of the Sass community, enough that in many developer's minds the distinction between the two is blurred. But competitors and alternatives exist, and I think it's important that Compass stands on its merits as a framework/library without hindering those that want to try new solutions to the same problems.

Take [Bourbon](https://github.com/thoughtbot/bourbon) by @thoughtbot, an alternate Sass library, or @AI's [Autoprefixer](https://github.com/ai/autoprefixer), which I've been testing and love. Projects like Autoprefixer make me think the future of Sass could be just programatic CSS construction, tools, and style mixins. I personally don't ever want to use another CSS3 compatibility mixin again. 

CSS preprocessing is still in its adolescence. I don't think we can say any library-level problems are definitively solved, but we can use language extensions tested in libraries to strengthen Sass itself (if that foggy distinction makes any sense).
",robwierzbowski,thoughtbot
803,2013-06-20 18:57:20,"There's lots of issues being discussed here; hopefully sectioning this post will avoid any conflation.

#### Sass Packages

> Package management has traditionally been a language concern only to the point where the necessary hooks and environmental capabilities are provided. From there, it is usually a separate project

Exactly. Until proven beyond any doubt, package management is a project concern. Defining packages can be a language concern ‚Äî it's Sass's job to standardize what an extension is, and to make it easy to consume in a project. 

Compass has vetted a highly successful package format. We know it works, we know people are building great tools with it and other people are easily incorporating those tools into their projects. For many tools the ability to add custom Ruby functions is an essential part of that package ‚Äî for complex processing, to add new features, or for performance reasons.

Most of the developers in this issue would like to see Compass's package definition (and Ruby exposure) added to vanilla Sass. The benefits include:
- Reduce the dependency stack by one. _Ruby, Sass, Compass_ becomes _Ruby, Sass_.
- Increase audience, unify community. The bottleneck on advanced extensions becomes Ruby instead of Compass. Only libSass users are excluded.
- Open possibilities for alternatives and experimentation. Right now Compass has a monopoly on advanced features that require Ruby. If you have to install Compass anyways, why reproduce any of its functionality? Even if Compass remains the defacto choice (which it probably will), competition and experimentation leads to a healthier ecosystem.
- A standard package structure makes it easier for authors to write an extension and to collaborate on each other's extensions. 
- Moving package definition and Ruby exposure into Sass doesn't invalidate any of Chris's points in https://github.com/nex3/sass/issues/803#issuecomment-19622766.

#### Package Management

This is a more complex issue for sure. There seem to be two contexts for Sass package consumption: an integrated Ruby/Rails project and a front-end project that uses Sass as a tool. I don't have any experience using Compass in a Rails project, but this is what I can add from my perspective:

_[edit] When I wrote this I wasn't super familiar with how Compass works in a Rails project. After learning more I think the distinction is mostly moot. RubyGems and Bower both would manage Sass packages equally well. Compass is only needed for bundling templates/boilerplate._

**Bower for Sass-package-as-component projects** 

In a Sass-package-as-component project, Sass extensions are just front-end components, the same as any JavaScript, CSS, image, font, or CoffeeScript component. @Bower manages all of these packages lightly, has a friendly user interface, and is a fixture in the JavaScript tooling community that's being embraced by the larger front-end community at a rapid pace. It also works with Sass and Compass extensions right now. 

I think there's a good case for Sass to have an official scheme or recommendation for package distribution by Bower, even if it's not the only package manager. Bower is aggressively single task ‚Äî from what I know it can't replace everything Compass does in a Ruby/Rails project, but if I'm using Bower on a project I'm going to use it to manage all of my front-end components, including Sass. 

#### Compass as a library

> Why move package management into Sass core and leave the std library of compass out? 

There's still a clear line between language and library. Compass is a huge part of the Sass community, enough that in many developer's minds the distinction between the two is blurred. But competitors and alternatives exist, and I think it's important that Compass stands on its merits as a framework/library without hindering those that want to try new solutions to the same problems.

Take [Bourbon](https://github.com/thoughtbot/bourbon) by @thoughtbot, an alternate Sass library, or @AI's [Autoprefixer](https://github.com/ai/autoprefixer), which I've been testing and love. Projects like Autoprefixer make me think the future of Sass could be just programatic CSS construction, tools, and style mixins. I personally don't ever want to use another CSS3 compatibility mixin again. 

CSS preprocessing is still in its adolescence. I don't think we can say any library-level problems are definitively solved, but we can use language extensions tested in libraries to strengthen Sass itself (if that foggy distinction makes any sense).
",robwierzbowski,Bower
799,2013-06-07 21:34:07,"the @dependencies ivar on the StalenessChecker class uses a hash implementation in jruby that is not threadsafe.
",chriseppstein,dependencies
799,2013-06-08 22:32:25,"@nex3 do you object to adding this gem as a dependency?
",chriseppstein,nex3
798,2013-06-07 08:58:40,"I ran in to this while working on mixins which take optional arguments, that may sometimes not be given at all. If the optional arguments are under the splat `$args...`, I can't just use `nth()` on the `$args` list because it fails if the list is empty; therefore need to give `$args` some value if it is empty, so subsequent use of it doesn't fail, even if those evaluate to false. In doing this, I've noticed that the `@if` directive and the `if()` function differ in how they evaluate. 

Side note: I use the compass `blank()` function to check if `$args` is empty because I couldn't find another reliable way to do it in plain Sass; if anyone has a better suggestion please let me know.

e.g. (1) using the `@if` directive



works correctly:



e.g. (2) using the `if()` function



fails; seemingly because the function still tries to evaluate everything:



Thoughts?
",lunelson,if
798,2013-06-07 15:23:16,"The `if` function in Sass is a normal function and it evaluates its arguments before running like every other function. If you need to branch execution, you should use the `@if` directive.

That said, we discussed making `if` a parser-level construct when we first built it and I'm not opposed to doing so at some point.
",chriseppstein,if
798,2013-06-07 16:36:37,"Thanks @chriseppstein, I figured it was something like that; it's a bummer because it does make things more compact, especially for conditionally assigning a variable. 

In my recent use cases, the drawback of the `@if` directive is that it has a different scope, so a variable has to first exist outside the directive in order for the directive to be able to conditionally assign it. It would be nice to see a true branch-executing same-scope `if()` function. 

I gather then, that it simply can't be done in SassScript and has to be built at a deeper level?
",lunelson,if
796,2013-06-11 15:55:40,"@nex3 One reason why we might want to return true for features that we implement in 3.3 even though `sass-supports` is a new feature is that it would give other Sass implementations the ability to ship syntactic compatibility with 3.3 without needing to delay the release while they implement the other features. E.g. libsass or sassc might return false for `sourcemaps` while we return true.

/cc @akhleung @hcatlin
",chriseppstein,akhleung
796,2013-06-11 15:55:40,"@nex3 One reason why we might want to return true for features that we implement in 3.3 even though `sass-supports` is a new feature is that it would give other Sass implementations the ability to ship syntactic compatibility with 3.3 without needing to delay the release while they implement the other features. E.g. libsass or sassc might return false for `sourcemaps` while we return true.

/cc @akhleung @hcatlin
",chriseppstein,hcatlin
794,2013-06-06 08:27:54,"I've browsing the web in search of examples of using the @each function or the ""for..."" loop to iterate over a list which items have an Id like #item1, #item2, etc. There's plenty of examples using classes but haven't found any with id. Any idea? Is there a notation problem maybe if I use operators like #{$i} ?

Thanks!
",miguelRivero,each
793,2013-06-06 01:53:12,"Hi guys.

Is there any way to generate separate file with @extend-Only selectors in it?

Lets say I want to have a separate skin layer for my system. All structural styles go into the <code>base.css.scss</code> file, which may have the following code:



and then this <code>@extend</code> I used, is placed in a separate file <code>skin.css.scss</code> - which I want to be generated and included in my HTML apart from structural styles file.



At the current state all extends are generated at the bottom of the <code>base.css.scss</code>, but the <code>skin.css.scss</code> has no any styles in it, since it doesn't seem to notice any references from the <code>base.css.scss</code>.

Cheers
",ervasive,extend
793,2013-06-06 01:53:12,"Hi guys.

Is there any way to generate separate file with @extend-Only selectors in it?

Lets say I want to have a separate skin layer for my system. All structural styles go into the <code>base.css.scss</code> file, which may have the following code:



and then this <code>@extend</code> I used, is placed in a separate file <code>skin.css.scss</code> - which I want to be generated and included in my HTML apart from structural styles file.



At the current state all extends are generated at the bottom of the <code>base.css.scss</code>, but the <code>skin.css.scss</code> has no any styles in it, since it doesn't seem to notice any references from the <code>base.css.scss</code>.

Cheers
",ervasive,extend-Only
793,2013-06-06 05:23:17,"Ah, now I see what you're looking for. Unfortunately Sass can't do that. Separate files don't have access to each other's content ‚Äî IIRC when one is imported into the other, the files are first concatenated and then processed as a single file. `@import` doesn't create any sort of two-way link.
",robwierzbowski,import
789,2013-06-04 16:35:13,"Maybe I'm too close to the problem, but ""after the directive"" could be misinterpreted as `@extend !optional .foo;` or `@extend .foo; !optional`.

Maybe a better phrasing would be ""after the selector portion of the directive""?
",chriseppstein,extend
788,2013-06-04 15:31:47,"We're having an issue since version >= 3.2.8 of Sass in which extends are not being compiled correctly.

In the Gumby Framework, we're using the following function:



renders out as:



when it should be:



This isn't the only place the @extends are getting ignored.

Any ideas?
",danhere,extends
788,2013-06-04 17:44:48,"It seems that we can't extend multiple classes in a single extend.
Running `@extend .one.column;` doesn't work but `@extend .one;@extend .column;` does.

`@extend .one.column` works up to 3.2.7.
After that though it no longer works. Did something change? Can you no longer extend chained selectors?
",danhere,extend
788,2013-06-04 19:25:45,"Okay so, I boiled it down and this is what I came up with:



Returns:



I guess this is correct and we were just relying on an old bug with the @extend function to work? Seems incorrect to me.
",danhere,extend
788,2013-06-04 21:31:58,"I think I follow what @nex3 was trying to do in that commit but I don't think it quite accomplishes it.

I found some other disconcerting issues when I started poking around.



Which I expected to generate:



But instead I get:



So we're completely missing the case where the children could be the same element and we've got some extraneous parent selectors getting mixed into the selectors which should be optimized out when the selector gets more complex.
",chriseppstein,nex3
788,2013-06-07 20:04:42,"@chriseppstein I think only the `c: d` selector in your example is incorrect. For `e: f`, putting `.parent1` before `.context` fulfills `.parent1 .child1 { @extend %bar }` and `.parent2 { @extend %foo }`. Similarly for `g: h`.

I'm working on fixing the incorrect compilation here, though.
",nex3,extend
785,2013-05-31 21:05:45,"@nex3 Here's the issue you asked me to open based on my comment on https://github.com/nex3/sass/pull/713.

I wanted to convert some Scss files from a project I use frequently into Sass just because that's my preferred syntax. I found that some comment structures seem to render invalid output from sass-convert.

Many files in this project error out when converted. I had a brief discussion with the owner of that repo you can reference as well. Perhaps the comments are formatted in such a way that they are to blame. I just wouldn't have though it would matter.
https://github.com/jlong/sass-twitter-bootstrap/issues/75

Here's an example.

Original:
[original.scss](https://dl.dropboxusercontent.com/u/8483722/Github/Sass/sass-convert-issue/original.scss)

Command:
`sass-convert original.scss sass-output.sass`

Output:
[sass-output.sass](https://dl.dropboxusercontent.com/u/8483722/Github/Sass/sass-convert-issue/sass-output.sass)
",ryanburnette,nex3
783,2013-05-31 17:20:50,"Yep, the `@for` directive is more efficient at this because index lookup is slower then index access.



Though I grant you that both of these examples are less perfect than the one @Snugug provided in #570.

Note that I think the need for index is actually going to diminish when we introduce maps. People don't want selectors named `.selector_N`. Colors like this have meaning. So expect this code will be more common:


",chriseppstein,for
781,2013-05-31 14:18:37,"The problem is the quotes:



Though, if I'm not mistaken, you shouldn't use `@extend` here because each of those selectors has to appear on its own.  Either way, using `@content` is better suited for this task.


",cimmanon,extend
781,2013-05-31 14:18:37,"The problem is the quotes:



Though, if I'm not mistaken, you shouldn't use `@extend` here because each of those selectors has to appear on its own.  Either way, using `@content` is better suited for this task.


",cimmanon,content
779,2013-05-30 16:59:22,"I believe it would be helpful to framework design and stylesheet modularity if there were a way to declare an `@import` which would fail gracefully if a file was not found.

<a href=""#tldr"">Jumpt to the TL;DR</a>
### Syntax

To make it's behavior obvious this could be a flag `!optional` borrowing from the style of `!default` and `!important`. It might look like this:


### Use case

In Octopress I'm trying to make it easy for people to easily install themes and plugins (with their Sass assets) and I want it to be easy for users to customize these theme and plugin stylesheets. At the same time I want it to be possible for users to enjoy Octopress without installing any themes or plugins. As a result I have come up with this method for managing Sass.

Let's look at an Octopress stylesheet directory



The root stylesheets `site.scss`  uses optional imports and globbing to automatically import stylesheets from a theme or plugins.



Here `!optional` imports would allow me to create a zero configuration install experience for end users. Users can install themes or plugins (or not) and they will automatically be imported. Also if I can reasonably expect them not to have any reason to change the `site.scss` file, making it easier for me to make changes to that file if needed.

**Additionally** if I wanted to allow users to easily override theme or plugin settings, I could change the `site.scss` like this:



This will allow a user to create a specific file to set default settings for a theme or plugin before it is imported. Without optional imports, a user must make changes to core files.

<a name='tldr'></a>
### TL;DR

If imports can respect an `!optional` flag, frameworks like Octopress can create a framework which allows users to install new stylesheets without having to manage imports. Essentially this would allow zero-configuration installation for Sass stylesheets.
",imathis,import
779,2013-05-30 18:08:41,"In general, we're not planning on adding anything to the current `@import` syntax. We're planning on a large-scale redesign of importing, so adding functionality to the existing imports will be largely wasted effort.

I'm not sure this is something that's worth putting in the core Sass language. It seems like a reasonable use-case for defining a custom importer, though. #739 would also go part of the way towards obviating the need for this.
",nex3,import
779,2015-08-28 21:51:48,"I don't think this is going to make it into the new `@import` semantics. It's a great use-case for a custom importer, though.
",nex3,import
779,2015-09-07 07:31:50,":+1: for see optional flag in `@import`

Look a very good use case https://github.com/Semantic-Org/Semantic-UI/blob/master/src/theme.less#L36
",yordis,import
779,2016-06-17 15:59:03,"He is a she.
A she that should re-open the issue, as optional imports would also let you catch the situation where an import file doesn't exist, in a useful way..
Say you're bowering in some sass junk but the dev forgot to run bower install.

You could have `$packageIsLoaded: true` in the imported file and then after the optional import, something like
`@if $packageIsLoaded != true { @error ""You haven't run bower install, you numpty!""; }`
",entozoon,if
779,2016-06-17 15:59:03,"He is a she.
A she that should re-open the issue, as optional imports would also let you catch the situation where an import file doesn't exist, in a useful way..
Say you're bowering in some sass junk but the dev forgot to run bower install.

You could have `$packageIsLoaded: true` in the imported file and then after the optional import, something like
`@if $packageIsLoaded != true { @error ""You haven't run bower install, you numpty!""; }`
",entozoon,error
779,2016-08-29 14:15:21,"Optional @import is really important
",migaber,import
779,2016-09-12 18:31:43,"Until it gets implemented, I have come across two potential workarounds which may be helpful depending on the use case so I'll post them:

### 1 - Internal `sass` solution (files must exist):

Create a file `app.scss` which contains something like this:



Then, in each of the ""component"" files you wrap all styles within something like this:



You have to include an import for each file and all files must exist, so this solution isn't all that much better than just deciding which `@imports` to include. However, @imathis's use case was primarily for a better user experience and a higher level of abstraction, which could be accomplished by playing around with this approach.

### 2 - Javascript... (More involved but full flexibility):

Very likely, your application will have to include some sort of build process, only part of which will be to process the `sass`, but which may also include `gulp`, `webpack`, etc. tasks. If you are using something like that, you can have the script that processes your css take care of the ""optional"" or logical imports. I know this may be annoying to configure, but it does give the greatest flexibility.

If you want an example to copy from have a look [here](https://github.com/tam5/laravel-materialize/blob/master/tasks/sass.js).
",tam5,imports
776,2013-05-29 22:50:30,"Hi fellas. I developed a workaround for SCSS's crazy nonsense about not allowing `@extend` within media queries. It works really well. So it turns out,

`It can only work once @extend is supported natively in the browser.`

is a lie.

But one of my placeholders references an outer selector ‚Äî the HTML element, for feature detection ‚Äî and now I'm getting ""deprecation warnings"".

The fact is, this code works fine, and I don't understand why your compiler, which handles this very well, is now telling me it won't in the future, just because you think browsers ought to support `@extend`.

Please stop. Even if browsers did support `@extend`, they won't do so reliably for years, and in the meantime I would like my code to keep working.

Thanks!
",mgerring,extend
776,2013-05-29 23:38:45,"The definition of `A { @extend B; }` is ""Style elements matching selector A as if they also matched selectors applying to the simple selector B."" When you put an `@extend` statement in a media query (or any runtime conditional like `@supports`, `@page`, etc) then you are asking Sass to only apply the inheritance when the condition is true. But Sass cannot know if that condition is true or false and if we apply the inheritance globally across the stylesheet we will simply break many people's websites and violate their unrealistic expectations of what Sass is capable of doing. We know this because before we introduced this many people came to us asking why Sass was broken.

You don't post any code, so I can't really help you find a solution to your problem in a way that doesn't use `@extend` in a nonsensical manner. And, frankly, given the tone of this post, I'm not inclined to want to help you. So I invite you to read through the several issues in the issue tracker that are both open and closed and you will see much advice on how to address your problem and you will also see that we are working on ways to make this less of an issue.
",chriseppstein,page
776,2013-05-29 23:38:45,"The definition of `A { @extend B; }` is ""Style elements matching selector A as if they also matched selectors applying to the simple selector B."" When you put an `@extend` statement in a media query (or any runtime conditional like `@supports`, `@page`, etc) then you are asking Sass to only apply the inheritance when the condition is true. But Sass cannot know if that condition is true or false and if we apply the inheritance globally across the stylesheet we will simply break many people's websites and violate their unrealistic expectations of what Sass is capable of doing. We know this because before we introduced this many people came to us asking why Sass was broken.

You don't post any code, so I can't really help you find a solution to your problem in a way that doesn't use `@extend` in a nonsensical manner. And, frankly, given the tone of this post, I'm not inclined to want to help you. So I invite you to read through the several issues in the issue tracker that are both open and closed and you will see much advice on how to address your problem and you will also see that we are working on ways to make this less of an issue.
",chriseppstein,extend
776,2013-05-29 23:38:45,"The definition of `A { @extend B; }` is ""Style elements matching selector A as if they also matched selectors applying to the simple selector B."" When you put an `@extend` statement in a media query (or any runtime conditional like `@supports`, `@page`, etc) then you are asking Sass to only apply the inheritance when the condition is true. But Sass cannot know if that condition is true or false and if we apply the inheritance globally across the stylesheet we will simply break many people's websites and violate their unrealistic expectations of what Sass is capable of doing. We know this because before we introduced this many people came to us asking why Sass was broken.

You don't post any code, so I can't really help you find a solution to your problem in a way that doesn't use `@extend` in a nonsensical manner. And, frankly, given the tone of this post, I'm not inclined to want to help you. So I invite you to read through the several issues in the issue tracker that are both open and closed and you will see much advice on how to address your problem and you will also see that we are working on ways to make this less of an issue.
",chriseppstein,supports
775,2013-05-28 19:58:48,"Related to #773. `@debug` outputs to `$stderr`. See: https://github.com/nex3/sass/blob/master/lib/sass/tree/visitors/perform.rb#L147
",chriseppstein,debug
774,2013-05-28 18:31:04,"I'd like to nail down the exact spec for how `@at-root` will work.

So here's some test cases:
### inline selector mode




### `&` still works when not in script mode




### `&` works when in script mode




### `@at-root` can take a block




### `@at-root` blocks only affect the nearest child selectors.




### `@at-root` doesn't remove selectors from directives by default.




### `@at-root` in block form can remove a selector from all directives.




### `@at-root` in block form can remove a selector from specific directives.

Media: 





Supports:





Several directives removed:




### Selector inheritance uses the resulting selector and directive context.





In theory we can make `without-xxx` be agnostic of directive type, but this may have issues with prefixed directives. Or we can have a whitelist of directive names.

The cases around directive removal will solve a big problem with the limitations around using `@extend` within media blocks. Specifically, this allows you to extend a selector via a mixin for all media contexts instead of just within the current media block.
",chriseppstein,extend
774,2013-05-28 18:31:04,"I'd like to nail down the exact spec for how `@at-root` will work.

So here's some test cases:
### inline selector mode




### `&` still works when not in script mode




### `&` works when in script mode




### `@at-root` can take a block




### `@at-root` blocks only affect the nearest child selectors.




### `@at-root` doesn't remove selectors from directives by default.




### `@at-root` in block form can remove a selector from all directives.




### `@at-root` in block form can remove a selector from specific directives.

Media: 





Supports:





Several directives removed:




### Selector inheritance uses the resulting selector and directive context.





In theory we can make `without-xxx` be agnostic of directive type, but this may have issues with prefixed directives. Or we can have a whitelist of directive names.

The cases around directive removal will solve a big problem with the limitations around using `@extend` within media blocks. Specifically, this allows you to extend a selector via a mixin for all media contexts instead of just within the current media block.
",chriseppstein,at-root
774,2013-05-28 19:32:06,"`@at-root without-whatever` is syntactically ambiguous with the `@at-root <selector>` syntax. If we're going to add flags like that, I think we'd need to find a better syntax for it. One possibility is using the `!important` flag syntax, as in `@at-root !without-supports`.
",nex3,at-root
774,2013-05-28 20:57:14,"Another test case: Make sure interpolation works in `@at-root`.
",chriseppstein,at-root
774,2013-05-29 15:48:19,"Another test case: ensure that properties are disallowed within a block-style `@at-root`.
",chriseppstein,at-root
774,2013-05-31 22:28:12,"I understand this idea is already pretty solid, so please take this semi-rhetorically.

With the block and flag additions to `@at-root` you're really adding a transform selector directive. Calling it something like `@selector (at-root) (without: media)` would keep the directive abstract and open for any additional selector transforming enhancements in future versions.
",robwierzbowski,selector
774,2013-05-31 22:28:12,"I understand this idea is already pretty solid, so please take this semi-rhetorically.

With the block and flag additions to `@at-root` you're really adding a transform selector directive. Calling it something like `@selector (at-root) (without: media)` would keep the directive abstract and open for any additional selector transforming enhancements in future versions.
",robwierzbowski,at-root
774,2013-05-31 22:38:36,"There are plenty of use cases for stripping `@media` and `@supports` without putting a selector `at-root`, but they're already [possible](https://github.com/Team-Sass/breakpoint/wiki/No-Query-Fallbacks) with [mixins](https://github.com/Team-Sass/jacket/blob/master/test/scss/style.scss#L116-L126). Being able to apply `without` on its own would simplify things though.
",robwierzbowski,supports
774,2013-05-31 22:38:36,"There are plenty of use cases for stripping `@media` and `@supports` without putting a selector `at-root`, but they're already [possible](https://github.com/Team-Sass/breakpoint/wiki/No-Query-Fallbacks) with [mixins](https://github.com/Team-Sass/jacket/blob/master/test/scss/style.scss#L116-L126). Being able to apply `without` on its own would simplify things though.
",robwierzbowski,media
774,2013-05-31 22:49:42,"> There are plenty of use cases for stripping `@media` and `@supports` without putting a selector at-root

That's a good point. But I'm not sure it's common enough to have completely different behaviors. might as well have several directives at that point.
",chriseppstein,supports
774,2013-05-31 22:49:42,"> There are plenty of use cases for stripping `@media` and `@supports` without putting a selector at-root

That's a good point. But I'm not sure it's common enough to have completely different behaviors. might as well have several directives at that point.
",chriseppstein,media
774,2013-05-31 23:01:17,"Either a single directive with multiple flags or multiple nestable directives works equally well for me, as long as the choice is consistant. I think it would be confusing if there's `@at-root (without: media)`, `@without-media`, and `@future-selector-transform (at-root)`.

I prefer single directives/functions/mixins with flags, but I know you're a big fan of breaking things out into descriptive single use pieces :). 
",robwierzbowski,future-selector-transform
774,2013-05-31 23:01:17,"Either a single directive with multiple flags or multiple nestable directives works equally well for me, as long as the choice is consistant. I think it would be confusing if there's `@at-root (without: media)`, `@without-media`, and `@future-selector-transform (at-root)`.

I prefer single directives/functions/mixins with flags, but I know you're a big fan of breaking things out into descriptive single use pieces :). 
",robwierzbowski,at-root
774,2013-05-31 23:01:17,"Either a single directive with multiple flags or multiple nestable directives works equally well for me, as long as the choice is consistant. I think it would be confusing if there's `@at-root (without: media)`, `@without-media`, and `@future-selector-transform (at-root)`.

I prefer single directives/functions/mixins with flags, but I know you're a big fan of breaking things out into descriptive single use pieces :). 
",robwierzbowski,without-media
774,2013-05-31 23:38:27,"I like the consistent syntax of @robwierzbowski's suggestion, but I don't like how verbose it makes the simple cases. What used to be `@at-root #{&}-foo { ... }` becomes `@selector (without: parent) { #{&}-foo { ... } }`, which is a lot more burdensome to read and write.
",nex3,selector
774,2013-05-31 23:38:27,"I like the consistent syntax of @robwierzbowski's suggestion, but I don't like how verbose it makes the simple cases. What used to be `@at-root #{&}-foo { ... }` becomes `@selector (without: parent) { #{&}-foo { ... } }`, which is a lot more burdensome to read and write.
",nex3,at-root
774,2013-06-10 22:29:27,"I'm also not a big fan of adding a bunch of new directives for this. I'd like to find a way to do this with a single directive that can be configured to address the needs of all the use cases, but is easiest to use in the most common case.

One possibility would be to have `@at-root` default to removing all parents, be they directives or selectors, then be configurable using `(with: ...)` or `(without: ...)`. This is very consistent, but it has the notable downside that `@at-root #{&} foo` means something different than `& foo`.

This suggests a second possibility: removing the parent selector but not any parent directives, while still being configurable. This fits the common case better, but is less consistent for more complex cases.

Finally, a much more radical possibility is to start thinking about bubblable directives like `@media` and `@support` as part of the parent selector. Thus something like `.foo { @media screen { .bar { ... } } }` would notionally have the selector `.foo (@media screen) .bar`. Perhaps that could even be writable by the user. Then we could use the first possibility I listed as the semantics for `@at-root`, and have `@at-root #{&} foo` resolve to `.foo (@media screen) .bar foo`, this giving it the same semantics as `& foo`. This would probably make selectors substantially more difficult to manipulate via SassScript, though, and may have other complicating factors as well.
",nex3,at-root
774,2013-06-10 22:29:27,"I'm also not a big fan of adding a bunch of new directives for this. I'd like to find a way to do this with a single directive that can be configured to address the needs of all the use cases, but is easiest to use in the most common case.

One possibility would be to have `@at-root` default to removing all parents, be they directives or selectors, then be configurable using `(with: ...)` or `(without: ...)`. This is very consistent, but it has the notable downside that `@at-root #{&} foo` means something different than `& foo`.

This suggests a second possibility: removing the parent selector but not any parent directives, while still being configurable. This fits the common case better, but is less consistent for more complex cases.

Finally, a much more radical possibility is to start thinking about bubblable directives like `@media` and `@support` as part of the parent selector. Thus something like `.foo { @media screen { .bar { ... } } }` would notionally have the selector `.foo (@media screen) .bar`. Perhaps that could even be writable by the user. Then we could use the first possibility I listed as the semantics for `@at-root`, and have `@at-root #{&} foo` resolve to `.foo (@media screen) .bar foo`, this giving it the same semantics as `& foo`. This would probably make selectors substantially more difficult to manipulate via SassScript, though, and may have other complicating factors as well.
",nex3,support
774,2013-06-10 22:29:27,"I'm also not a big fan of adding a bunch of new directives for this. I'd like to find a way to do this with a single directive that can be configured to address the needs of all the use cases, but is easiest to use in the most common case.

One possibility would be to have `@at-root` default to removing all parents, be they directives or selectors, then be configurable using `(with: ...)` or `(without: ...)`. This is very consistent, but it has the notable downside that `@at-root #{&} foo` means something different than `& foo`.

This suggests a second possibility: removing the parent selector but not any parent directives, while still being configurable. This fits the common case better, but is less consistent for more complex cases.

Finally, a much more radical possibility is to start thinking about bubblable directives like `@media` and `@support` as part of the parent selector. Thus something like `.foo { @media screen { .bar { ... } } }` would notionally have the selector `.foo (@media screen) .bar`. Perhaps that could even be writable by the user. Then we could use the first possibility I listed as the semantics for `@at-root`, and have `@at-root #{&} foo` resolve to `.foo (@media screen) .bar foo`, this giving it the same semantics as `& foo`. This would probably make selectors substantially more difficult to manipulate via SassScript, though, and may have other complicating factors as well.
",nex3,media
774,2013-06-11 18:31:53,"I'm opposed to making the default behavior of `@at-root` be to remove directive context. Such a behavior would ruin the primary use case of using `@at-root` to use `&` in SassScript. If that means we need two directives with different names, then that's what we need.

Regarding making directives part of `&`. I'm glad you're thinking outside the box, but I do not like this idea. I'd much rather introduce functions like `current-media-query()`, `current-support-condition()` and maybe some helper functions for working with the results. If we're going to do expose so much context, we should also expose `current-property()` as was mentioned in #727.
",chriseppstein,at-root
774,2013-06-14 20:22:15,"> I'm opposed to making the default behavior of `@at-root` be to remove directive context. Such a behavior would ruin the primary use case of using `@at-root` to use `&` in SassScript. If that means we need two directives with different names, then that's what we need.

I agree that it's important that the default behavior of `@at-root` should support the primary use-case. However, I'd very much like to avoid additional directives. I'd much rather add options to `at-root` (the second possibility I listed above).

> Regarding making directives part of `&`. I'm glad you're thinking outside the box, but I do not like this idea.

I'm by no means wedded to it, but I would like to understand more about why you dislike it.

> I'd much rather introduce functions like `current-media-query()`, `current-support-condition()` and maybe some helper functions for working with the results.

I'm not a huge fan of adding a separate function for getting each different type of context. Regardless, this is something that will likely not happen for a while; without being necessary for `@at-root`, there's no pressing need to give access to parent directives.

> If we're going to do expose so much context, we should also expose `current-property()` as was mentioned in #727.

This conclusion doesn't follow. Getting block-level parent context is very different than accessing a representation of a property that's actively being defined.
",nex3,at-root
774,2013-06-19 20:50:26,"> However, I'd very much like to avoid additional directives.

I agree with you that the second option is the best so far, it was also what was already proposed :smile: 

> I would like to understand more about why you dislike it.

Although it doesn't seem to have any backwards compatiblity issue at this time, it fundamentally changes (what I think is) the mental model of `&`. As we've agreed, `&` and `@at-root #{&}` should be essentially the same, but the change you're proposing would make `.foo #{&}` create illegal output unless, as you point out, we want to create a syntax for embedding directives within selectors which I'm very reticent to do but I [asked on twitter about it](http://twitter.com/SassCSS/status/347451124867010560) to see what others think.

> I'm not a huge fan of adding a separate function for getting each different type of context.

Obviously, alternative forms of the same concept (using a function to access non-selector context) are welcome and encouraged.

> Getting block-level parent context is very different than accessing a representation of a property that's actively being defined.

I don't see a fundamental difference. Context is context. Please explain.
",chriseppstein,at-root
774,2014-05-15 23:25:27,"Hi, Is there a way to access to the parent element to add a class? I used lot of times the parent to trigger css animations and would like to have something like this:

HTML:



SCSS:



OUTPUT CSS:



and the parameter passed to @go-out(X) indicate the how many levels want to go out.

Thanks!
",PabloMarch,go-out
774,2014-06-03 14:48:11,"Yeah, an @at-node(n) construct to traverse back up the selector tree would be great. I've needed that a few times.
",davestewart,at-node
773,2013-05-28 18:37:53,"Thank you Chris. ^_^

You wanted to say ""set to an instance of a class"".

I'll leave an example here in case someone else is interested.



Note that `@warn` messages will be ignored if `:quiet` option is true.
",lolmaus,warn
773,2013-05-28 18:58:41,"Hey Chris, i found out that only `@warn` messages are collected, while `@debug` go straight to console.

I didn't realizes that at first because i was using `puts` to test.

How do i collect both `@warn` and `@debug` messages?

Also, it reports the line number of the Ruby code. Is it possible to report the line number of the string of SASS code passed to the `sass` method?
",lolmaus,warn
773,2013-05-28 18:58:41,"Hey Chris, i found out that only `@warn` messages are collected, while `@debug` go straight to console.

I didn't realizes that at first because i was using `puts` to test.

How do i collect both `@warn` and `@debug` messages?

Also, it reports the line number of the Ruby code. Is it possible to report the line number of the string of SASS code passed to the `sass` method?
",lolmaus,debug
773,2013-05-28 20:26:36,"@lolmaus I'm skeptical about your assertion that Sass is reporting the ruby line number. Please open an issue about that with a reproducible test case. I have opened a new bug about `@debug` using `$stderr` instead of the logger.
",chriseppstein,debug
771,2013-05-31 21:15:38,"> why not just add the properties manually?

I assume you mean ""Why not just rewrite the base selector manually"". The benefits of `@extend` are just as realizable in a local context as they are in a more global context. Manual selector rewriting is an inversion of control that is also difficult to express correctly in pure sass. What's more, this enables strategies like so:



Note: the above code would _really_ clean up if we could pass arguments to the content block from the mixin.
",chriseppstein,extend
770,2013-05-26 11:13:59,"In the old example, parentheses had no impact because multiplication should have precedence over addition.

Thanks to @inseo for the suggestion.

![96](https://f.cloud.github.com/assets/85783/565240/46f337a8-c5f5-11e2-9802-bcc84f73f82a.gif)
",kaelig,inseo
766,2013-05-24 17:21:10,"There's a number of sass features that we will add in the future which will be syntactically valid in the old version but still not working as intended.

Sass libraries that need to support multiple versions of Sass may be able to do so if we provide a function like `sass-supports($feature-name)` which returns true if the feature is present in the sass implementation.

Hat tip: this idea came from @eoneill.
",chriseppstein,eoneill
765,2013-05-23 15:55:23,"_Edited by @nex3 to change the title._

Hi,
I think SASS should be a specification that developers are free to implement in any programming language.

Ruby SASS compiler should be one of his implementation.

This may help others implementation (PHPSass, sass.js, pyScss, ...) to stay up to date.

some web designer are interested by SASS but can't use it because they don't work with Ruby...
Current other implementations are sometime buggy and rarely updated...
",yukulele,nex3
764,2013-09-12 20:29:55,"@stephanvane according to @thibaudgg, that's inaccurate.
",nex3,thibaudgg
760,2013-05-31 20:52:17,"I don't think `&` and `#{&}` should work differently (with the exception of needing `@at-root` in some cases). So I guess `&, &.foo { ... }` should be an error because `#{&}, &.foo { ... }` would be an error.
",chriseppstein,at-root
759,2013-05-20 14:51:05,"I happened upon this earlier today. I was coding something out and looked at the browser after my SCSS compiled at the @include I added wasn't there. I looked at my SCSS to see @includ where I missed the e

Should this throw an error rather than silently ignoring it?
",sturobson,includ
759,2013-05-20 14:51:05,"I happened upon this earlier today. I was coding something out and looked at the browser after my SCSS compiled at the @include I added wasn't there. I looked at my SCSS to see @includ where I missed the e

Should this throw an error rather than silently ignoring it?
",sturobson,include
757,2013-06-07 18:34:21,"I spent a couple weekends working on content for the new site. It's
currently being reviewed by @jina. My goal was to get it launch able, not
perfect. But, I believe it's better than the current site even in the state
it's in.

I do like the superpower line. I've used it a couple places. But, Chris, I
agree. Some community feedback would be great!

And, @blackfalcon, a lot of the Sass design team is in the east coast. ;)

On Thursday, June 6, 2013, Chris Eppstein wrote:

> @blackfalcon https://github.com/blackfalcon Not much is happening
> there. [image: :cry:]
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/757#issuecomment-19063885
> .
",hcatlin,jina
757,2013-06-07 23:44:41,"Hi guys. It's off topic from what this PR is about but since I was mentioned re: the Sass site, I figured I would chime in. I pulled things into my local branch and was fixing up some of the CSS I was working on locally to work for the new content but didn't finish before heading off to Europe for some conferences. I realize I should be communicating these things better and I will from now on. ""Nothing is happening"" is inaccurate. It's more like things are going slower than initially anticipated. Chris, I feel bad for frustrating you but I don't want the wrong message getting out. I did work on it before my travels and its really close. The site is gonna be rad & way better. & I fully planned to work on it again when I get back to the states. Sorry about the lack of transparency. Like I said, will get better about that. :-) as for on topic for this PR: I have no opinion for this because its just gonna get replaced with a new site anyway. :-P I'm into the super powers thing. ;-)
‚Äî
Sent from Mailbox for iPhone

On Fri, Jun 7, 2013 at 8:34 PM, Hampton Catlin notifications@github.com
wrote:

> I spent a couple weekends working on content for the new site. It's
> currently being reviewed by @jina. My goal was to get it launch able, not
> perfect. But, I believe it's better than the current site even in the state
> it's in.
> I do like the superpower line. I've used it a couple places. But, Chris, I
> agree. Some community feedback would be great!
> And, @blackfalcon, a lot of the Sass design team is in the east coast. ;)
> On Thursday, June 6, 2013, Chris Eppstein wrote:
> 
> > @blackfalcon https://github.com/blackfalcon Not much is happening
> > there. [image: :cry:]
> > 
> > ‚Äî
> > Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/pull/757#issuecomment-19063885
> > .
> > 
> > ---
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/nex3/sass/pull/757#issuecomment-19124953
",jina,jina
756,2013-05-19 13:41:07,"It would be great if Sass could check if a placeholder class is extended just once and if that‚Äôs the case work like @include instead of @extend.



This currently compiles to:



It would be great if it compiles to:



This would improve the output if one uses OOCSS or SMACSS, as one can put layout rules into a placeholder class and theme rules into a ‚Äúreal‚Äù class without adding unnecessary code when there is just one theme. If there is more than one theme it works as expected.
",maxhoffmann,extend
756,2013-05-19 13:41:07,"It would be great if Sass could check if a placeholder class is extended just once and if that‚Äôs the case work like @include instead of @extend.



This currently compiles to:



It would be great if it compiles to:



This would improve the output if one uses OOCSS or SMACSS, as one can put layout rules into a placeholder class and theme rules into a ‚Äúreal‚Äù class without adding unnecessary code when there is just one theme. If there is more than one theme it works as expected.
",maxhoffmann,include
756,2013-05-20 00:11:06,"If we take a look at the testing that came out of the [nested media query debate](http://sasscast.tumblr.com/post/38673939456/sass-and-media-queries) it shows that micro optimizations like these don't have much of an effect, on rendering time or gzipped page weight. And that was with whole @media declarations.

As a kid who used to optimize animated gifs by hand I feel your pain, but I believe this is a case where adding complexity to Sass's code won't have any real benefits.
",robwierzbowski,media
755,2013-05-17 21:46:14,"The CSSWG [has resolved](http://www.w3.org/blog/CSS/2013/05/16/resolutions-92/) to allow `calc()` in `@media` queries, so we should support that.
",nex3,media
754,2013-05-30 16:20:45,"@stryju The commit that @nex3 made causes all colors that end up equivalent to `rgba(0,0,0,0)` regardless of their authored format to be output as `transparent`. So this actually increases IE8 support.
",chriseppstein,nex3
752,2013-05-16 08:27:53,"We didn't have source range tracking for @media in sass, and in scss it was wrong, because ""def block"" would extend the node's source range up to the end of the block.
",crdev,media
749,2013-05-14 18:12:21,"Originally I posted this [here](https://github.com/chriseppstein/chriseppstein.github.com/issues/4#issuecomment-17773249) but I think this is a better forum for this appeal.

I've always wanted `@import` to give you more control over what gets imported and how. While it's very convenient to simply say `@import 'blah';` and get everything in `blah` it has the drawback of making it very difficult to know where certain rules, mixins, etc. are coming from, especially when the stylebase gets heavy. This has given me a few headaches in the past as there can be some unwanted behavior (Ruby's `require` suffers from the same consequences). 

Of course, there are a couple of ways to solve this. 

An organized directory structure is one way to help you see where things are coming from (ie.`@import ""util/clearfix""` meaning give me _everything_ in the file `util/_clearfix.scss`). But there are two tradeoffs that I've encountered. First, you have to be _very_ disciplined. The contents of `_clearfix.scss` should have no more than whatever is needed to implement `clearfix`. In this case maybe just a single mixin. Second, provided you are exercising good discipline, you can end up with an explosion of files. It's a hassle and basically amounts to a lot of babysitting.

Another way to avoid some confusion is to prefix mixin and variable names (ie. `$foo-line-height` or `@mixin foo-button`). This sort of pattern appears in plenty of other languages with relaxed import mechanisms where stuff is just being dumped in to some global namespace. While it _can_ work, it's really just a cheap hack. To make it a _really_ good hack you'd have to combine it with the solution I mentioned above.

TL;DR you have to be very organized _and_ defensive. I contend this does nothing more than add unnecessary complexity and cognitive load. 

So what's the idea? First, let's consider the problem with an example. I have three files `style.scss`, `_foo.scss`, and `_bar.scss`:



From the command line I run `sass style.scss` and get



That sucks. The contents of `_bar.scss` are basically overriding the contents of `_foo.scss`. Surely we can do better. What if we extended `@import` with just a tiny bit of optional syntax? Consider the following proposals:



The `(only: ident [, ident]*)` clause tells Sass to import the _only_ the identifiers listed. 

From the command line I run `sass style.scss` and get



OK. But what if I want to rename, or exclude identifiers?



The `(exclude: ident [, ident]*)` clause tells Sass to import everything _except_ the identifiers listed. The `(rename: l-ident r-ident [, l-ident r-ident]*)` clause takes a comma separated list of identifier pairs and tells Sass to import the identifiers listed but rename the first identifier of the pair to the second. We use `and` to separate clauses.

We run `sass style.scss` and get



This is extremely nice. I know where code is coming from because it's **documented** in the import. I have control over the naming when I import which allows me to resolve potential conflicts and avoid unwanted behavior. The additional syntax doesn't break existing code and it looks syntactically similar to other `@` prefixed syntax in CSS. Finally, it eliminates most of the defensive programming techniques I mentioned above.

FWIW, I understand that implementing this correctly might be a bit involved and could take some time. There's a lot to think about. But the behavior of `@import` has been the single biggest pain point for me when using Sass. I know in the past it was proposed to incorporate the Less style namespaces for this sort of thing, but was ultimately rejected for understandable reasons. This however, should it be considered, would be a vastly cleaner approach to handling imports than Less or what's currently available in Sass.

Please take sometime to consider the idea.
",noprompt,import
749,2013-05-14 18:12:21,"Originally I posted this [here](https://github.com/chriseppstein/chriseppstein.github.com/issues/4#issuecomment-17773249) but I think this is a better forum for this appeal.

I've always wanted `@import` to give you more control over what gets imported and how. While it's very convenient to simply say `@import 'blah';` and get everything in `blah` it has the drawback of making it very difficult to know where certain rules, mixins, etc. are coming from, especially when the stylebase gets heavy. This has given me a few headaches in the past as there can be some unwanted behavior (Ruby's `require` suffers from the same consequences). 

Of course, there are a couple of ways to solve this. 

An organized directory structure is one way to help you see where things are coming from (ie.`@import ""util/clearfix""` meaning give me _everything_ in the file `util/_clearfix.scss`). But there are two tradeoffs that I've encountered. First, you have to be _very_ disciplined. The contents of `_clearfix.scss` should have no more than whatever is needed to implement `clearfix`. In this case maybe just a single mixin. Second, provided you are exercising good discipline, you can end up with an explosion of files. It's a hassle and basically amounts to a lot of babysitting.

Another way to avoid some confusion is to prefix mixin and variable names (ie. `$foo-line-height` or `@mixin foo-button`). This sort of pattern appears in plenty of other languages with relaxed import mechanisms where stuff is just being dumped in to some global namespace. While it _can_ work, it's really just a cheap hack. To make it a _really_ good hack you'd have to combine it with the solution I mentioned above.

TL;DR you have to be very organized _and_ defensive. I contend this does nothing more than add unnecessary complexity and cognitive load. 

So what's the idea? First, let's consider the problem with an example. I have three files `style.scss`, `_foo.scss`, and `_bar.scss`:



From the command line I run `sass style.scss` and get



That sucks. The contents of `_bar.scss` are basically overriding the contents of `_foo.scss`. Surely we can do better. What if we extended `@import` with just a tiny bit of optional syntax? Consider the following proposals:



The `(only: ident [, ident]*)` clause tells Sass to import the _only_ the identifiers listed. 

From the command line I run `sass style.scss` and get



OK. But what if I want to rename, or exclude identifiers?



The `(exclude: ident [, ident]*)` clause tells Sass to import everything _except_ the identifiers listed. The `(rename: l-ident r-ident [, l-ident r-ident]*)` clause takes a comma separated list of identifier pairs and tells Sass to import the identifiers listed but rename the first identifier of the pair to the second. We use `and` to separate clauses.

We run `sass style.scss` and get



This is extremely nice. I know where code is coming from because it's **documented** in the import. I have control over the naming when I import which allows me to resolve potential conflicts and avoid unwanted behavior. The additional syntax doesn't break existing code and it looks syntactically similar to other `@` prefixed syntax in CSS. Finally, it eliminates most of the defensive programming techniques I mentioned above.

FWIW, I understand that implementing this correctly might be a bit involved and could take some time. There's a lot to think about. But the behavior of `@import` has been the single biggest pain point for me when using Sass. I know in the past it was proposed to incorporate the Less style namespaces for this sort of thing, but was ultimately rejected for understandable reasons. This however, should it be considered, would be a vastly cleaner approach to handling imports than Less or what's currently available in Sass.

Please take sometime to consider the idea.
",noprompt,mixin
749,2013-05-15 22:42:13,"We're definitely interested in improving the semantics of `@import` (or rather, creating a new `@import`-like directives with better semantics). There are a number of use cases we're considering, the ones you bring up here among them. I don't think our ultimate solution will end up looking exactly like this, but hopefully it will address the same problems with the current syntax, and others as well.

In any case, the new import syntax is tracked by #353.
",nex3,import
747,2013-05-11 23:26:57,"Users should be able to create an error with `@error <message>`
",chriseppstein,error
747,2014-06-17 13:10:04,"This also would be great to avoid doing this over and over:



@chriseppstein: how do you plan `@error` to work?
",battaglr,error
745,2013-05-10 18:52:01,"It's slightly more complex than that though.... Here's a simplified version of exactly what I am trying to do (my **actual** version has a loop generating several <code>%bar</code>s):



... which should in theory generate the following placeholders:



... and then if I extended these as follows:



... it gives me my desired output:



... but I get a deprecation warning because of the `@extend %foo`. Am I really overcomplicating this?
",jjenzz,extend
745,2013-05-10 23:48:33,"This is an expected warning. Sass doesn't check whether your `@extend` does touch something in the `@media` query; it checks whether it **doesn't** touch something **outside** the query. This is to avoid users expecting it to extend a selector everywhere it appears and being confused when it extends some but not all of the selectors.
",nex3,extend
745,2013-05-10 23:48:33,"This is an expected warning. Sass doesn't check whether your `@extend` does touch something in the `@media` query; it checks whether it **doesn't** touch something **outside** the query. This is to avoid users expecting it to extend a selector everywhere it appears and being confused when it extends some but not all of the selectors.
",nex3,media
744,2013-05-09 05:37:54,"## Background

[IE7 has a content:counter bug](http://bit.ly/XJMscV) where a rule such as:



Will cause IE7 to stop parsing the current stylesheet, all due to the space after the comma. The fix, then, is to remove the space:



And IE7 goes on its merry way parsing the document.
## The Issue

If we write the following in Sass:



It will get compiled out to:



Which includes that pesky space once again.
## Solution

I can see two possible solutions:
1. Don't expand the internals of the 'counter' CSS method
2. Allow an inline setting which says not to expand/parse the following line(s)
### 1. Don't expand 'counter'

This seems like a hacky solution, and very specific to this IE7-only bug.
### 2. An Inline setting

Either as a comment block:



Or a function call:


## Workaround

For anyone else who runs into this issue in the mean-time, it is possible to simply extract the offending rules into a separate file and @import them. As long as the Sass compiler is not run over this new file, it will not break IE7.
The down-side being that this then creates another HTTP request.
",jesstelford,import
740,2013-05-25 01:02:09,"@cimmanon the `strip-unit` calls in that code are superfluous. `$font-size` and `$desired-size` both have `em` as their unit, so `$font-size / $desired-size` has no unit anyway.

@lunelson writing functions that don't think about units sounds like an anti-pattern.

> The input value might be in the range 0-100, with or without a percentage unit, or it might be in the range 0-1.

This sounds very confusing. How do I know whether `fn(1)` is going to treat `1` as `1%` or `1.0`? This is why units exist: to make it clear what you're specifying.

If the unit math doesn't work out in your functions, that seems a logic smell rather than an indication that Sass needs an easier way to add/remove units.

@robwierzbowski `1#{unit($number)}` doesn't work how you want it to. It returns a string, not a number.

### Summary

I don't find these use cases very compelling; I'm leaning toward's @chriseppstein's position here, that these functions would encourage more sloppy code than they do add expressive power.
",nex3,robwierzbowski
739,2013-05-08 02:20:16,"There's a way to compute dependencies efficiently and reliably on a first pass compile that would allow for the second pass to be optimized without needing to statically analyze the sass files for their `@import` dependencies. This would also allow for generic dependencies on things like images when used with compass sprites, or image-dimension helpers.
",chriseppstein,import
739,2013-05-08 02:21:24,"Doing this will allow us to remove the limitations on having no scripting in `@import` directives and allow `@import` to be used in mixins and conditionals.

See #408
",chriseppstein,import
739,2013-05-31 22:23:20,"Imports are fundamentally clunky. They're tightly coupled to the physical filesystem in most cases, they take strings in a DSL that Sass has no means of manipulating (and I'm categorically opposed to adding path/URI manipulation functions). This is fine when they're authored by hand and refer to well-known physical files (or occasionally well-known generated files), but once dynamic code starts touching them I expect it to become very painful and confusing to work with.

Even if the theme is written to emit selectors directly, why not do `%dark-theme { @import ""dark-theme"" }`?
",nex3,import
739,2013-05-31 23:17:12,"> Please explain the use cases you have concerns about.

I don't have specific examples, just a general feeling that adding a feature that motivates people to want to manipulate paths in Sass is a bad idea.

> Using a placeholder like you've suggested adds unnecessary specificity and bloat when it's extended.

I'd rather add support for top-level `@extend` than dynamic dependencies, given the choice.
",nex3,extend
739,2014-03-28 17:15:33,"@nex3 : In https://github.com/nex3/sass/issues/779 you mentioned that you were planning on deprecating the `@import` feature, which is used in pretty much every Sass implementation of moderate to high complexity.

Why not just extend the possibilities of the `@import` feature by allowing it to be used within control directives and/or mixins? This is how PHP's `include` ( http://www.php.net/manual/en/function.include.php ) is implemented. It allows dynamic loading, greater modularity, easy polyfilling and many more features without having to change or deprecate the `@import` syntax.

Implementing the possibility of dynamic dependencies by allowing @import statements within control directives or mixins has one main advantage: Sass users would not notice any difference between ""old school"" dependency management and ""new school"" dependency management.

While the underlying mechanism may have to be altered significantly or even rewritten completely, the syntax for the ""end user"" would remain completely the same. No new syntax would have to be learnt and old `@import` statements would not have to be changed to be compatible with new versions of Sass.

Examples :



---



---



---



See also https://github.com/nex3/sass/issues/1194, where I posted this request as a separate issue.
",jslegers,import
739,2014-04-04 20:20:24,"We're definitely doing a major overhaul of `@import`. The current system is busted for any number of reasons. Given that, there's no real benefit in maintaining compatibility with it.
",nex3,import
739,2014-04-04 23:18:13,"We're going to have a deprecation process; we're not going to blithely break every existing Sass file. The old `@import` syntax will continue working for quite a while, likely a full major version cycle. But we need to have the flexibility to design for five years in the future, not just one year in the future, and sometimes that means removing functionality that once worked.
",nex3,import
739,2014-04-05 08:56:15,"@nex3 :

Another great use for polyfilling : if I could polyfill either the `@import` syntax or the new syntax in some way, I would not have to worry about deprecation. 

And then, of course, there's theming (https://github.com/sass/sass/issues/279).
",jslegers,import
739,2015-02-02 01:03:31,"My two cents into why nor mixins, nor attempts to define what actually should be imported outside of Sass won't be enough.

For instance, let's take some complex web-projects, build entirely with Grunt.

On same stage authors of large projects usually understanding that they have so many paths (sources, builds, temps) that setting them everywhere in static form results in very non-effective project maintaining.

Just imagine, that you have source directory with set of images, which will be later used for responsive images generation by Grunt task. Now, imagine, that Grunt task also generating Sass file with map of those images (so they could be used as `background-image`), which should be imported in main Sass.

Now, that's seems to be nothing serious. But imagine, that you have to change any part of path to generated Sass file with map ‚Äî you have to search and replace it everywhere ‚Äî starting from Grunt, templates (which might want to use some of those images as plain `<img>`) and ending with Sass.

Besides those images you may have tons of other similar assets ‚Äî sprites, images, paths to webfonts, etc. All this will result in even larger set of paths, generated by Grunt tasks, which would be used by Sass, templates etc and which author may need to change anytime.

It becomes quite obvious that it would be much easier to store paths in single place ‚Äî let's say Grunt, and pass it as variables or data to other instances ‚Äî templates, Sass, etc.

And it seems to be quite trivial task to accomplish, except one thing ‚Äî it's impossible to use variables in Sass `@import`, unfortunately.
",ArmorDarks,import
739,2015-02-11 23:06:27,"Having user maintained versions in SCSS and LESS is an impossibility for large projects without using automated tools. Check out [what Bootstrap has to do](https://github.com/twbs/bootstrap-sass/blob/master/tasks/converter/less_conversion.rb) to maintain its SCSS version.

I've tried to keep my project generally ""pre-processor ambivalent"" to make maintaining two versions possible. However Semantic uses a bit more complex of an inheritance system than other UI projects. I have not found any way to automate the conversion of theme loading. The only way I could imagine maintaining an SCSS port is if variables were available inside `@import`.
",jlukic,import
739,2015-03-17 15:37:22,"That's a bummer you guys aren't going to support variables in `@import`. Seems like it would be extremely useful and really open up the doors for some very dynamic build systems.

Are there any alternatives?
",Jakobud,import
739,2015-07-04 19:23:37,"Any updates on this? We've just launched 2.0 and people are still asking about SCSS support. Unable to imagine a way to allow for arbitrary theming without Sass supporting variables in `@import`. 

If no plans on including in [`@import v2`](https://github.com/sass/sass/issues?q=is%3Aopen+is%3Aissue+label%3A%22%40import+v2%22), any workaround or alternative suggestion for supporting themes would be appreciated.
",jlukic,import
739,2015-07-11 16:04:59,"_I apologize ahead of time if this is jumbled, I am taking a break between packing for a trip so this is pretty stream of conscious because of a time crunch._

Another workaround might be to use `sed` or something like it in your build system to change a certain @import line.

Besides that, `arbitrary` theming seems a bit open ended to me -- I don't know how free you want toget with it, but I've had great success with theming by interfaces.

By that I mean like defining a set of variables with defaults (or not when a theme MUST define one) and mixins.

Then my themes each include those shared files and implement that set of variables in their _variable.scss file. Themes have their own sets of mixins/whatevers that use those variables. In the end I have separate css files for each theme, and each is created with the same variable naming scheme and it works fine. I also use variables for pathing prefixes in my css `url()` paths and such. I think this may help towards your comment you are asking.

In a way then the interface there can be seen as the shared naming schemes and resources between the shared theme kernel partial and the themes themselves.

Now one other thing somewhat related to this is having [components based on extends & placeholder selectors](http://sassmeister.com/gist/f5ed65b3116c6cfcdc33). It's a technique that can help separate your styles from the classnames being used to do the styles. This lets me write one theme that can theme a bootstrap site and a foundation site or some custom scheme, for example with the same styling SASS by just swapping the adapter.

Hope one of those three ideas helps!
",r4j4h,import
739,2015-07-17 21:23:17,"I think the long and short is there appears to be no way to specify a pre-packaged theme with a SASS variable.

In our case there we want to support packaged user themes. The theme names are not known by the framework, and are community extensible. It should not require any special build tools (outside of a SASS compiler) and should support an arbitrary number of user themes that are not included in the main project.

This pattern is modelled after [how Wordpress handles theming](https://github.com/WordPress/WordPress/tree/master/wp-content/themes). 

In the Wordpress case ""themes"" just correspond to ""folder paths"". An unsophisticated user can add themes by just dropping a zip file in a folder and changing a config value.  Although Wordpress is obviously not winning any words for _advanced technical ingenuity_, it certainly is a vastly popular, simple, and well understood model for how to download & specify distributed themes.

Our specific implementation (currently in LESS) uses a simple  [theme.config](https://github.com/Semantic-Org/Semantic-UI/blob/master/src/theme.config.example) file which just lets users specify strings which are concatenated into an `@import` path for `variables` and `overrides`. 

You can see our updated [theming guide](http://semantic-ui.com/usage/theming.html) here to see more about what I'm referring to.
",jlukic,import
739,2016-04-21 04:41:47,"Dear All,
 I'm newbie  in ionoic framework and just started learning it. After setting up the sample application  I'm getting an error like this.

node_modules\ionic-angular\components.core.scss
Error: Import directives may not be used within control directives or mixins.
        on line 34 of node_modules/ionic-angular/components.core.scss

> >   @import ""fonts/ionicons"";
> >    --^

Can anyone elaborate about this issue. and help me out how to solve it.
",shinurag,import
739,2016-05-02 15:27:32,"@etnbrd it's very likely related to this: https://medium.com/@xzyfer/why-node-sass-broke-your-code-and-semver-1b3e409c57b9#.mj58qxo8c
",stipsan,xzyfer
739,2016-08-25 20:16:29,"I see that using mixins is a great idea, and does work-- however, when considering the entire scope of development lifecycles, and more complex projects, it's a royal pain.
Small example:
I use bootstrap for theme development in general. I have a CMS that generates markup compatible with bootstrap.

When I hire theme developers, some want to create their own customized version of the bootstrap nav component, however, in general, they want our basic bootstrap setup.

They're left with two options:
Create rules that override all the Bootstrap nav component rules, or edit bootstraps nav file (that is maintained via grunt) to make it be a mixin.

It works, but whenever we now must fork our own bootstrap to make nav a mixin that gets ran when necessary. 
IMO, It'd be GREAT if you could use @import or a similar command to pull in a file optionally, or allow it to be passed by variable. One shortcut that you guys could implement (that'd fix your dependency checks) would be to implement another command that was a ""simple importer"" or such that did not allow imports inside of that-- that way, I could @simpleImport $navFile, and the theme developer could simply set that variable to choose which nav rules to use.. 

It's not that we can't do the other solution, it just seems so 1985, and flies in the face of good development practices.
",jlove73071,simpleImport
739,2016-08-25 20:16:29,"I see that using mixins is a great idea, and does work-- however, when considering the entire scope of development lifecycles, and more complex projects, it's a royal pain.
Small example:
I use bootstrap for theme development in general. I have a CMS that generates markup compatible with bootstrap.

When I hire theme developers, some want to create their own customized version of the bootstrap nav component, however, in general, they want our basic bootstrap setup.

They're left with two options:
Create rules that override all the Bootstrap nav component rules, or edit bootstraps nav file (that is maintained via grunt) to make it be a mixin.

It works, but whenever we now must fork our own bootstrap to make nav a mixin that gets ran when necessary. 
IMO, It'd be GREAT if you could use @import or a similar command to pull in a file optionally, or allow it to be passed by variable. One shortcut that you guys could implement (that'd fix your dependency checks) would be to implement another command that was a ""simple importer"" or such that did not allow imports inside of that-- that way, I could @simpleImport $navFile, and the theme developer could simply set that variable to choose which nav rules to use.. 

It's not that we can't do the other solution, it just seems so 1985, and flies in the face of good development practices.
",jlove73071,import
739,2016-08-25 20:17:58,"@import $file !iSolmenlySwearThatThisFileDoesntImportNewDependencies
Problem solved.
or
!import $file !disableImportingFurtherDependencies
",jlove73071,import
739,2017-01-13 19:15:16,"Well, it worth pointing out, that in many languages imports are completely static. Like `import` in JavaScript (do not confuse with `require`). This is required for static mapping, tree shaking and good performance. However, in same time in all those languages usually you have ability to import something, like function, or value, and then use it or not on demand ‚Äî you have a freedom. In CSS it's quite different ‚Äî when you import something, it immediately ends up in final file, no matter what.

There is workaround, though, Just put all content of your imported file in `@mixin` directive. It will allow you not only pass needed parameters to imported mixin, but also achieve mentioned freedom ‚Äî to call it or not, and decide where and how, under which condition it should be called.

In other words, when it comes to themes, just put each your theme into mixin, or function with Sass map, or whatever, and call it conditionally, when you need and where you need.

Looking on problem from that perspective, we can see that dynamic imports isn't that crucial in most cases.",ArmorDarks,mixin
739,2017-01-13 19:35:37,"> This kind of retaliatory hyperbole doesn't help anyone. 

It's not hyperbole at all. I've been waiting for this feature since 2014. Dynamic imports is an ESSENTIAL feature of the Sass architecture I had in mind for version 2 of [Cascade Framework](http://cascade-framework.com/), and one of the reasons development on Cascade Framework 2 has been put on hold.

Them completely ignoring this important feature since 2015 in spite of popular demand is enough reason for me to move on to Less, PostCSS or another alternative.

> SASS is extremely popular due to the hard work of a few people and the involvement of the community behind them.

Sass became extremely popular because it had awesome features like `@extend`, that did not exist in Less.
It seems to me, however, that Less has caught up on Sass. If Sass devs keep ignoring their users, it's but a matter of time before it becomes obselete and Less, PostCSS or some other alternative will take its position much the same way AngularJS kicked the now mostly obselete jQuery from its throne as most popular JS library.

> Generally, it's better to be appreciative instead of aggressively demeaning.

As I said, I've been waiting for this feature since 2014. My patience is starting to run out!

> If you see a strong case for this, fork this repo and implement the feature as you see it, then issue a pull request and let the community decide.

I'm not a Ruby developer. Also, I don't see the point of investing my precious time in implementing this feature when the core dev team have already expressed their disinterest in such a feature.

I have considered creating my own preprocessor language, though, written from scratch in PHP or JavaScript. But with my own CSS framework to maintain, a social life to attend to and a house to renovate alongside a 40-hour work week as an IT consultant, I just wouldn't know when to find the time.",jslegers,extend
739,2017-01-18 13:25:57,"> There is workaround, though, Just put all content of your imported file in @mixin directive. It will allow you not only pass needed parameters to imported mixin, but also achieve mentioned freedom ‚Äî to call it or not, and decide where and how, under which condition it should be called.

Can you dynamically call a mixin? supposing we're talking about theme modules, I have no idea how you'd achieve the same result of a dynamic import using a mixin and maps, you'd have to know all the colorscheme maps in advance.",iErik,mixin
739,2017-02-06 09:11:35,"@dudewad You need to take this issue higher, in this case it isn't Sass responsibility, Sass just receives feed of information from Grunt in form of Sass file. `grunt-webfont` allows to write your own template files for generated webfonts. Write font declarations there based on feeded from grunt information. Thus, you won't need any dynamic imports.

This isn't perfectly relative example, but you can see similar thing for sprites [here](https://github.com/LotusTM/Kotsu/blob/master/tasks/sprites.coffee#L16) in Kotsu. Though, here we don't use fonts declarations, since we don't use more than one sprite set and webicons set per project, but you can catch the idea. It's quite easy thing to add font declarations there too. Just declare fonts in your Grunt config in form of object or array under, let's say, `fonts` property, and then loop through this property in your `grunt-webfont` template via `grunt.config('fonts')` and outputting needed `@font-face`s.

If you don't want to declare font-faces in template, you can output there a Sass map with font-faces names via wrapper around `grunt.config('fonts')`, then iterate in your own Sass files based on this Sass map and output necessary font-face declarations.

In any case, Sass will receive already prepared information, as it should happen in proper application architecture. You just import generated file, and Sass should do all the magic based on it's content, not on how many different files you have.",ArmorDarks,font-face
739,2017-02-08 20:47:01,"Whether we support globs in imports is a separate issue; this issue is about dynamic imports.

In your case, a pattern I see frequently in the many languages that don't support dynamic imports is to generate a single file that imports all the other generated files. So:



Then you can just write `@import 'generated/fonts'` in your hand-authored code and have access to all the generated mixins.",nex3,import
739,2017-02-09 09:36:32,"@nex3 @ArmorDarks  

> Why not emit mixins rather than emitting files that directly include styles? Then you can choose whether and how to include each mixin.

Because that's not how things work in a well-designed theming / skinning architecture. It simply doesn't work, for reasons I'll try to explain below.

> I can't clearly understand what exactly you're trying to do, thus can't provide best solution for it. Maybe it would be better if you'll demonstrate mock of a project, in which you're facing described issue?

I can't speak for @layton-glympse, but what I expect from a preprocessor language, is the ability to...

1. Assign a value `themename` to a `$theme` variable in a `_properties.scss` file
2. Dynamically import a `${theme}/_properties.scss`  file that overrides or sets the defaults of my framework
3. Dynamically import a `${theme}/_bootstrap.scss` file that describes all the theme-specific files that need to be loaded
4. Dynamically import ANY variable number of `${theme}/${whatever}/_${stuff}.scss` files from `${theme}/_bootstrap.scss` or its descendants

In such an architecture, changing the theme of my framework should be as simple as changing the value of my `$theme` variable, without imposing any restrictions on the architecture of the theme itself.

Loading all of my themes and then determining which one to actually use with a dynamic mixin is simply not an option.

> Then you can just write @import 'generated/fonts' in your hand-authored code and have access to all the generated mixins.

Imagine a library with 1000s of themes for a particular framework. Loading 1000s of themes just to be able to use a single theme is highly inefficient, and imposes all kinds of nastiness, from performance nightmares to maintenance hell, that simply wouldn't exist with dynamic dependencies.

With dynamic dependencies, replacing one theme with another really would be as simple as changing one single variable. Only a single theme would have to be loaded, and adding or removing a theme from the framework would be as simple as adding or removing a folder with that theme. 

> After all, Sass is not the only language, in which imports are completely static (ES6 System imports, hello!).

NodeJS is not exactly a mature environment. On the other hand, browser-side JavaScript has achieved some level of maturity. Not only does browser-side JavaScript allow dynamically loading JS files on demand, but many front-end developers have been doing this for years. Long before [Require.JS](https://github.com/requirejs/requirejs) came to dominate the market, the totally awesome [yepnope](https://github.com/SlexAxton/yepnope.js/) & [LABjs](https://github.com/getify/LABjs) already provided easy-to-use, stable, minimalistic, cross-browser interfaces for the on-demand dynamical loading of any JS file.

All that is irrelevant, though. SCSS is a language used to create CSS layouts, CSS themes & CSS frameworks. What's important, here, is whether there are meaningful use cases for SCSS specifically that require files to be imported dynamically. 

While I would agree that such use cases are probably few and far and between for simple one-use-only CSS layouts, dynamic dependencies become an essential feature once you start building a CSS framework architecture with support for flexible theming. 

Dynamic dependencies are a feature I've been waiting for ever since I decided to re-write [Cascade Framework](http://jslegers.github.io/cascadeframework/) in SASS back in 2014. And because dynamic dependencies are a **core feature** for my particular use case, the lack of this feature in SASS actually has blocked any further development of my framework ever since 2014.",jslegers,import
739,2017-02-09 17:46:31,"> It doesn't. CommonJS has almost nothing to do with JavaScript itself ‚Äî it's relying on Node, and works differently, by injecting in JS something it doesn't have natively.

I was referring to front-end JavaScript. More in particular, I was refering to the various loading techniques used by libraries like [Require.JS](https://github.com/requirejs/requirejs), [yepnope](https://github.com/SlexAxton/yepnope.js/), [LABjs](https://github.com/getify/LABjs), ...

> And RequireJS is quite tricky implementation.

I've always prefered yepnope. It's very lightweight, has a simple syntax and doesn't rely on Ajax. Unfortunately, Alex Sexton (the author) deprecated it, probably because more bloated solutions like Require.js simply were more popular, and because yepnope's implementation - basically, it's based on image pre-loading - is kind of a hack... a brilliant hack, but still a hack!

> I've mentioned that just to remind, that non of current loading methods, except System Imports are native JS methods at all, and still. Yet JS somehow lives and overcomes it.

People came up with all sorts of crazy hacks to implement on-demand dynamic loading of JS files, precisely because they needed that feature for their projects and native JS support was lacking.

The fact that libraries like Require.JS, yepnope & LABjs exist and the fact that Require.JS is still quite popular in heavy-weight corporate JavaScript implementations only proves my point that such a feature is important in browser-side JavaScript. 

> They are showing us that this issue isn't an issue, but a feature request, since it solvable with methods, which language already have.

SCSS and JavaScript are different environments that are used to solve different use cases. What's important in one environment can be totally irrelevant in another and vice versa.

> I'm seriously. Changed theme? Just go to file with imports, and change this
> 
>      @import 'themes/myOldTheme/index'
> 
>  to this
>
>      @import 'themes/myNewTheme/index'

What if my theme has multiple modules that I want to turn on / off?  Sure, I can just (un)comment an import statement for that as well... but what if those modules have dependencies on other modules? And how many files will I have to configure just to set up a single configurable theme? 

How can I do any kind of sane dependency management within a theme without being able to conditionally load which modules to load based on configuration? 

> I especially can't get, why would you keep your themes files (if there are 100 of them) in single project, if you're using for building only one?

The point is to be able to have a single repository with a core framework and a library of themes that can be shared by multiple projects. Every project would use reference that single, shared repository. Parameterization at the project level would determine which themes are loaded and which settings are passed on to core framework + theme. And to make this work, you want the necessary parameterization both as minimal & as flexible as possible. 

> In other words, from mentioned stack it's unclear why simply updating the path to theme isn't enough.

As with any framework or library, the point is to maximize re-usability and sharing of the same codebase across different projects, while providing an easy-to-use, dummy-proof way for enhancement or customization. 

Dynamic dependencies would allow me to create **a sane dependency management system** to take care of Sass dependencies within Sass itself. ",jslegers,import
739,2017-02-10 23:19:18,"I've talked this over once again with @chriseppstein, and I think we've found a compromise that will largely address the patterns people want here while mitigating my concerns about comprehensibility and static analysis. We won't allow `@import` (or its forthcoming replacement, `@use`) to be used dynamically. Instead, we'll provide a function (I'll call it `load()` for now, but don't take that as final) that will load a file and provide its contents in a form that's accessible to SassScript. In particular, it will return a map with the following keys:

* `""functions""` will be a map from function names to function references (as returned by `get-function()`). It will contain all functions defined in the loaded file.
* `""mixins""` will be the same, but for mixins.
* `""css""` will be a single mixin reference that, when included, emits the CSS output of the loaded file.

This will allow theming systems *et al* to expose their desired APIs and load files at runtime while retaining the ability for users and tools to reason about the top-level scope independently of the actual execution of the code in question.",nex3,use
739,2017-02-10 23:19:18,"I've talked this over once again with @chriseppstein, and I think we've found a compromise that will largely address the patterns people want here while mitigating my concerns about comprehensibility and static analysis. We won't allow `@import` (or its forthcoming replacement, `@use`) to be used dynamically. Instead, we'll provide a function (I'll call it `load()` for now, but don't take that as final) that will load a file and provide its contents in a form that's accessible to SassScript. In particular, it will return a map with the following keys:

* `""functions""` will be a map from function names to function references (as returned by `get-function()`). It will contain all functions defined in the loaded file.
* `""mixins""` will be the same, but for mixins.
* `""css""` will be a single mixin reference that, when included, emits the CSS output of the loaded file.

This will allow theming systems *et al* to expose their desired APIs and load files at runtime while retaining the ability for users and tools to reason about the top-level scope independently of the actual execution of the code in question.",nex3,import
739,2017-02-10 23:31:38,"@nex3 
Much appreciated that you guys gave this some thought/discussion. Very exciting to get an actionable response on this.

Let me see if I understand it straight (I understand that this is a conceptual discussion and subject to huge modification):

This (potentially) new `load()` function will be something we can pass a filepath to, which then returns a map containing functions, mixins, and CSS as _keys_ on a new object instead of injecting them straight into the document wholesale like `@import` does now. That is _very cool_.

If I understand that correctly, though, I'm missing the part where this will be any different conceptually from `@import` in that it likely won't allow wildcard paths, unless you're going to return an array of these maps.

Can you enlighten me as to how this addresses the concept of wildcard imports, where the developer does not know the name of the target file(s)?

If it doesn't, I do see the merit in what you are doing. The thing this _would_ allow us to do is at least choose a predictable naming pattern (i.e. `file0`, `file1`, `file2`, etc) for the unknown files and load them in a loop or something until a load fails?

Okay, cool. It gives us at least a form in which to achieve what one might call semi-dynamic imports, something I would be happy enough with.

Can you fill me in if I'm missing or misunderstanding any of your concept?
",layton-glympse,import
727,2013-04-28 13:19:00,"Are there any methods in SassScript that might allow one to construct a `@function` which could add new properties to a declaration (like mixins do) as well as retrieve the current one?

The Stylus pre-processor allows this through built-in ""add-property"" and ""current-property"" functions that can be used inside user-defined functions. I can attest that it is great for a lot stuff for which in Sass we must constantly write `@include`s, which can get tedious for oft-used utility mixins. It might look something like this:





I'd really love to be able to do this with Sass cause it annoys me to have a lot of basic code made more obscure and verbose for the sake of such pedestrian stuff as prefixing or fallbacks.
",lunelson,function
727,2013-04-28 13:19:00,"Are there any methods in SassScript that might allow one to construct a `@function` which could add new properties to a declaration (like mixins do) as well as retrieve the current one?

The Stylus pre-processor allows this through built-in ""add-property"" and ""current-property"" functions that can be used inside user-defined functions. I can attest that it is great for a lot stuff for which in Sass we must constantly write `@include`s, which can get tedious for oft-used utility mixins. It might look something like this:





I'd really love to be able to do this with Sass cause it annoys me to have a lot of basic code made more obscure and verbose for the sake of such pedestrian stuff as prefixing or fallbacks.
",lunelson,include
727,2013-04-29 04:07:10,"If it's possible I'm also very into this feature. Possibly a syntax like:



With as many `@return-additional`s as needed.
",robwierzbowski,return-additional
727,2013-04-29 12:45:35,"A better mixin syntax would also be good, but it's not what I'm asking for. 

I realize it extends the concept of `@function`s to allow them to output property-value declarations in addition to just simple values, but I don't think it's any more of a stretch than such recent additions as passing `@content` blocks to mixins. It's simply a convenience which allows for more flexibility. This is mainly meant for cases such as I describe above, which are just about re-outputting a transformed version of the same declaration, and are the kind of thing you want to just set and forget. Packing this capability in to a function would keep Sass code more clean and let us reserve the use of `@include` (or `+`) for larger blocks of code (parametric or not), which is the thing for which they were originally intended. Such flexibility would reduce the number of `@include` or `+` directives in our code and make it easier to scan.
",lunelson,content
727,2013-04-29 12:45:35,"A better mixin syntax would also be good, but it's not what I'm asking for. 

I realize it extends the concept of `@function`s to allow them to output property-value declarations in addition to just simple values, but I don't think it's any more of a stretch than such recent additions as passing `@content` blocks to mixins. It's simply a convenience which allows for more flexibility. This is mainly meant for cases such as I describe above, which are just about re-outputting a transformed version of the same declaration, and are the kind of thing you want to just set and forget. Packing this capability in to a function would keep Sass code more clean and let us reserve the use of `@include` (or `+`) for larger blocks of code (parametric or not), which is the thing for which they were originally intended. Such flexibility would reduce the number of `@include` or `+` directives in our code and make it easier to scan.
",lunelson,function
727,2013-04-29 12:45:35,"A better mixin syntax would also be good, but it's not what I'm asking for. 

I realize it extends the concept of `@function`s to allow them to output property-value declarations in addition to just simple values, but I don't think it's any more of a stretch than such recent additions as passing `@content` blocks to mixins. It's simply a convenience which allows for more flexibility. This is mainly meant for cases such as I describe above, which are just about re-outputting a transformed version of the same declaration, and are the kind of thing you want to just set and forget. Packing this capability in to a function would keep Sass code more clean and let us reserve the use of `@include` (or `+`) for larger blocks of code (parametric or not), which is the thing for which they were originally intended. Such flexibility would reduce the number of `@include` or `+` directives in our code and make it easier to scan.
",lunelson,include
727,2013-04-29 12:57:48,"@lunelson, how does Stylus deal with `@add-prop` when functions that are only part of a value? E.g.,


",robwierzbowski,add-prop
727,2013-04-30 16:24:43,"Aspect seems better to me ‚Äî as a ""contextual values"" language addition I guarantee it's going to be used for more than just fallback support. Also, don't want to create any confusion with css3 `@supports`.
",robwierzbowski,supports
727,2013-04-30 16:50:34,"The one thing I've come to appreciate from learning and writing Haskell this past year is that functions with side effects are difficult to debug.  Sass is not just for those of us with real programming backgrounds, but for people with little to no programming experience.  I'm just not seeing anything compelling here that would make me change my mind.

chriseppstein's example could have just as easily be written like this:



It does the same thing but is _less_ complicated and invoking the mixin has the same verbosity.  If the issue is ""I don't want to type out `@include`"", it seems to me that https://github.com/nex3/sass/issues/366 addresses this.

Until I see a good use case for the proposed functionality, it looks like change for the sake of change to me.
",cimmanon,include
727,2013-04-30 16:56:22,"@chriseppstein I'm not sure I understand aspects: is it adding another value to a variable? How is the example above more efficient than a typical rem mixin? @cimmanon's example looks equivalent to me, at least in terms of verbosity.

However I agree that `current-property()` would be nice, and have uses beyond the use-case of adding properties from `@functions`, such as referring to map-names by property-names; though it would require variable-name interpolation which we don't have yet. FWIW, an adaptation of my maps hack from #642, imagining property-to-map reference


",lunelson,functions
727,2013-05-21 00:16:17,"More details on how this works in compass right now.

I started with the goal that we could define a mixin that has the exact input syntax for its arguments as the css property of the same name has. Except the output of the mixin would be a fully supported set of prefixed properties and/or fallback values that adhere's to the user's specified browser support matrix. To be clear, any solution that allows me to cleanly meet these requirements is ok by me.

The complexity arises in building a mixin that sometimes has browser support requirements and sometimes doesn't depending on the value. For instance. `@include background(red)` should simply compile to `background: red`. Where as the value of `@include background(image(radial-gradient(#ddd, #aaa 100px), image-url(""4x6.png""), #c00))` should emit something like:



Note that the need for prefixing may occur at any argument or even an argument to a function that itself doesn't require prefixing.

We have overridden several css functions that are vendor prefixed. For this example, we'll consider the [`linear-gradient` function](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/gradient_support.rb#L289-L304). The result of invoking this function is to return a [LinearGradient literal](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/gradient_support.rb#L143). This is a ruby object that acts like any other sass literal and if it is used as a [raw value](https://github.com/chriseppstein/compass/blob/stable/frameworks/compass/stylesheets/compass/css3/_images.scss#L99) then it basically returns a string that essentially looks like its construction which we've made resemble css's linear-gradient exactly.

However, there are some other ruby functions (namely, [prefixed and some prefix functions](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/cross_browser_support.rb#L30-L44)) that can inspect and coerce the ruby object to have other string representations. In the compass case, we simply implement these coercion functions in ruby.

I'd like to set a goal that Sass should be expressive enough to implement the compass css3 module without any ruby code that is not provided by Sass itself.

I don't see how to implement the nice API to these mixins without something like this aspect feature. But I am totally open to other ideas.
",chriseppstein,include
719,2013-05-03 16:09:22,"Yeah, that's a workaround, but it would be nice to fix the real issue and have sass use its own copy of listen, as @mzgol mentioned. Some people might not be able to uninstall listen-1.0.3 without breaking other things.
",athaeryn,mzgol
714,2013-04-19 07:10:46,"Please consider this example:



And if I extract the ""`@include` loop"" from a mixin:



Is this an intended behaviour?
",Cinamonas,include
712,2013-04-16 12:31:03,"Hello there,

I've searched for a bit but couldn't find anything about it so I made a new issue.

I've read there's a new @import (which probabbly will not be named that because of compatibility) being worked on. I'd like to know (and if not, suggest) if it will add support for including external .scss files (not .css) to be parsed.

Let me make an example to best explain:

Currently the company made a 'Standard CSS Framework' for the web products based on Twitter Bootstrap. And all CSS', images and etcetera are served from a CDN to all products. 

So, for e.g., I'd like to serve our 'standard' _mixins.scss and _bootstrap.scss to all projects, but without the developers having to actually copy the file to their project (so they would not mess with them and to keep up-to-date). Therefore using for e.g. `@import_external ""http://example.com/path/sass/_mixin.scss"";` (or whatever the @name would be) would download the .scss file and include in the compilation like it was in a local folder.

In reality, the SASS part of the improvement would be add a new type of `@import` for external files, that buiilders/compilers could know what to do.

Or would be Compass' `watch` job to actually download the file since it's already running on Terminal/Prompt.. Maybe using: 
- `wget` for Linux/OSX;
- `new-object System.Net.WebClient` for Win7;
- `CreateObject(""MSXML2.XMLHTTP"")` for older Wins.

And returning error when http timeout or fails for any reason (configurable through `config.rb` maybe?)

What you guys think?

Best Regards,
RaphaelDDL
",RaphaelDDL,name
712,2013-04-16 12:31:03,"Hello there,

I've searched for a bit but couldn't find anything about it so I made a new issue.

I've read there's a new @import (which probabbly will not be named that because of compatibility) being worked on. I'd like to know (and if not, suggest) if it will add support for including external .scss files (not .css) to be parsed.

Let me make an example to best explain:

Currently the company made a 'Standard CSS Framework' for the web products based on Twitter Bootstrap. And all CSS', images and etcetera are served from a CDN to all products. 

So, for e.g., I'd like to serve our 'standard' _mixins.scss and _bootstrap.scss to all projects, but without the developers having to actually copy the file to their project (so they would not mess with them and to keep up-to-date). Therefore using for e.g. `@import_external ""http://example.com/path/sass/_mixin.scss"";` (or whatever the @name would be) would download the .scss file and include in the compilation like it was in a local folder.

In reality, the SASS part of the improvement would be add a new type of `@import` for external files, that buiilders/compilers could know what to do.

Or would be Compass' `watch` job to actually download the file since it's already running on Terminal/Prompt.. Maybe using: 
- `wget` for Linux/OSX;
- `new-object System.Net.WebClient` for Win7;
- `CreateObject(""MSXML2.XMLHTTP"")` for older Wins.

And returning error when http timeout or fails for any reason (configurable through `config.rb` maybe?)

What you guys think?

Best Regards,
RaphaelDDL
",RaphaelDDL,import
712,2013-04-17 16:03:02,"I still don't get it how you say 'need near no Ruby knowledge'. I think I'll really need Ruby knowledge..

So how would I code something that when compass read the sass/scss:
- see that there is an URL inside `@import` (or create a new `@` by myself);
- detect it points to a .sass/.scss file, download the file (via `wget` or similar);
- save the file in a temp folder;
- dynamically change that `@` for a common sass `@import` pointing to the temp file in a temp folder;
- let compass watch do his compiling magic.

I don't think SassScript can achieve this.

Then again, thanks for pointing that template, really nice.
",RaphaelDDL,import
712,2013-04-17 16:07:49,"Ahhhhh... Now I got what you said. Build an extension and they install as a gem for `@import` like we do with compass utilities, for e.g.?

But then again will fall in the versioning problem (they would need to open the console, check their version and then update). But that would be a workaround while I don't learn Ruby enough to do the steps I told on previous post. 

(That would be neat to release for public).

Thanks for your time, Snug!
",RaphaelDDL,import
711,2013-04-16 11:24:12,"It would be really handy if it was possible to be able to check `@if & != null`. For example:


",jjenzz,if
710,2013-04-12 11:45:07,"Can somebody give me regular expression to match all sass style @imports such as



Sorry for posting in wrong place :).
",Subash,imports
707,2013-04-09 06:45:50,"OS X 10.8.3, Sass 3.2.7 with CodeKit 1.6.1 @bdkjones

If you have a valid, generated style.css file, and then enter something erroneous in the .scss file, the exisiting style.css file will be overwritten with an empty file when sass tries to compile and fails.
",willytk,bdkjones
705,2013-04-08 18:44:17,"Getting more explicit, it appears as though that `@options[:cache_store].retrieve(key, sha)` is returning a `String` instead of an expected instance of `Sass::CacheStore::Base`.

After some further debugging, I noticed that the return value of this call appeared to be an error message; it appears sass was attempting to marshal a previously cached file:



The problem seemed to be resolved by clearing the ./sass-cache folder and re-running the build scripts.

I'll mark this issue as closed for now as it is solvable without introducing new code, but I would expect that sass should gracefully fail in these situations; it was unclear what the problem was from the initial error message.
",kellydunn,options
704,2013-04-18 04:56:42,"AWESOME. Thanks a lot @nex3 
",MoOx,nex3
699,2013-03-28 01:50:29,"Whew - a mouthful. Say that title 5 times fast!
### The Problem: Sass error when multiple arguments in a transition function

When running sass-convert in terminal and converting a .sass file to a .scss file, sass was throwing errors NOT during the conversion, but when trying to process the resultant .scss file.
### The Error

Sass reports: `Mixin transition takes 1 argument but X were passed` (where X is the number -  greater than 1 - of arguments of the transition function).  
### The Fix That Worked for Me

After trying to blame the preprocessing / IDE software I was using, I searched and found a [StackOverflow post answered by Joseph Erickson](http://stackoverflow.com/questions/7895796/can-a-sass-mixin-accept-an-undefined-number-of-arguments) indicating that you can get Sass to pass multiple arguments as a single  argument by placing two sets of quotes around the mixin function, like: `@include transition((background 0.2s ease-out, border-color 0s ease-out, color 0.2s ease-out));`. After putting in additional parens, no sass error was reported.   
### My Assumption(s)

sass-convert can be modified to output double parenthesis around multi-argument functions when converting from .sass to .scss files. I'm also assuming you know that I know _nothing_ about how to get sass-convert to do that myself or I would have tried to offer a solution you could actually implement.
### My Environment
- Sass v 3.2.5
- Mac OS X 10.8.3
",qaid,include
695,2013-03-22 18:19:29,"Hi,

I've read [previous pull requests](https://github.com/nex3/sass/issues/160) that tried to eliminate warnings.  However, I think the Sass codebase contains some great examples on why running with `-w` is a good thing.

I will enumerate the examples here and link to commits that deal with the issue.
## Unused variable warnings

Sass assigns values to variables which are unused.  In some cases, the code has no side effects and can be eliminated.  I was able to delete code:
- 8badbab218f73190eadbbd0f0a54ef0f288465f8
- 58c57a8e390b67f6e4c6d52454bcde1e1bdf0e3e
## Calls to deprecated code

Sass calls methods on URI that will eventually be deleted.  I fixed that [here](https://github.com/tenderlove/sass/commit/c94257db653c6bbe9706b973481a78d705d3a32f).
## Redefined methods

Sass defines tests that never run because the methods were redefined.  I changed the test name [here](https://github.com/tenderlove/sass/commit/3df278a3ff5b6140e18ffdc57c80e1f701e6213f), [here](https://github.com/tenderlove/sass/commit/ff954d1d39e7915724a25c9a943d87d949d9f27d), and could even remove completely duplicated code [here](https://github.com/tenderlove/sass/commit/bd9a56ca2b632bce751c9f3da12377c9aa27f380).
## Uninitialized instance variables

Uninitialized instance variables led me to find an instance variable [that is probably misspelled](https://github.com/sass/sass/blob/bcde8752a704ceaa5ef9405d71b4f8fa3c6146bf/lib/sass/scss/parser.rb#L1154).  `@throw_err` is never set anywhere, and the positive branch of that if statement is never executed in the tests.
## Circular requires

Circular requires could possibly lead to a deadlock, so I [fixed those](https://github.com/tenderlove/sass/commit/ff0d98a0536687b7d2d6f918a198ec81e1494077).
## Shadowed variable warnings

Shadowed variables could refer to variables in the outside scope, so I fixed those [here](https://github.com/tenderlove/sass/commit/c909d1572637dbcf8aad6bc4c02cadce4a3d3e75) and [here](https://github.com/tenderlove/sass/commit/f75d7d2b8b2178d5b7f9af1375b0e7151e3771d5).
## Setting external encodings

I eliminated a warning around [setting the external encoding](https://github.com/tenderlove/sass/commit/220d5c7e966fd3b3dd755d5f827950510246d745).  Does this mean that Sass requires people to set the external_encoding to UTF-8?  I suspect it's possible to eliminate this requirement.
## Literals in conditionals

This is probably my most dubious commit.  I know team Sass uses literals in conditionals as coding style, but it causes warnings (since it will always evaluate the same way).  I changed the literals [to constants](https://github.com/tenderlove/sass/commit/283d8aa7924bf2661be2fc606ebc7a9bcedf5d86) as a compromise between readability and eliminating warnings.
## Duplicate character class warnings

I left these.  I think it's a bug in Ruby, so I [filed a ticket](https://bugs.ruby-lang.org/issues/8151).

Anyway, all of these are great examples of why I like to run `-w` on my code.  I realize Team Sass may not care for using `-w`, so I've purposely not squashed these commits in the hope that some (if not all) of them are merged to mainline.  Please feel free to cherry pick what you do want, and leave what you don't.

Also, I really really want to say thanks for making the tests super easy to get running.  It's not often I can clone a repo and run `rake` and it does the right thing.  THANK YOU! :smile:

:heart::heart::heart::heart::heart::heart::heart::heart::heart::heart::heart::heart::heart::heart:
",tenderlove,throw
695,2013-03-22 20:08:47,"You make a pretty compelling case for the utility of some of these warnings. That said, I still don't like the idea of warnings that make the code less readable, like the warnings for `!:foo` and to some degree uninitialized instance variables (although the `@throw_err` issue is worrisome).

I'll go through the individual commits and leave review comments. Once those are addressed, I'll merge in everything other than the literal-in-conditional and uninitialized-ivars. I'll fix the `@throw_err` thing myself.

Thanks for the PR, @tenderlove.
",nex3,throw
695,2013-03-22 21:28:19,"> You make a pretty compelling case for the utility of some of these warnings. That said, I still don't like the idea of > warnings that make the code less readable, like the warnings for !:foo and to some degree uninitialized instance variables (although the @throw_err issue is worrisome).

I prefer my libraries to run warning free so that app developers are free to make the choice to use `-w` or not, but I definitely see where you're coming from.  `-w` helps me track down bugs (like some of these) and it's nice to have the option to use it.

> I'll go through the individual commits and leave review comments. Once those are addressed, I'll merge in everything other than the literal-in-conditional and uninitialized-ivars. I'll fix the @throw_err thing myself.

Awesome, thank you! :smile:

> Thanks for the PR, @tenderlove.

No problem, I'm glad to help out.  I've pushed a commit that fixes all the stuff you commented on except for the circular require issue.  If you feel strongly about that one, then I'll change it as well.

Thanks for your time!
",tenderlove,throw
691,2013-03-22 23:08:39,"`@for` only counts up. Whether this is a bug or not, you can get around it with negative numbers and the `abs()` (absolute value) function:



Result:


",robwierzbowski,for
691,2013-05-20 20:48:35,"I think adding a `by` clause to `@for` would be very nice. Sure it can always be done via math, but it's a nice sugar.

Examples:



Also, Sass can fairly easily change from increment to decrement when the orientation of the values is flipped. This avoids infinite loops. I'm :thumbsup: on this one.
",chriseppstein,for
691,2013-05-21 00:09:26,"I'm a little ambivalent about supporting `@for ... by`. I'm not sure it's widely useful enough to warrant expanding the `@for` syntax, especially given how easy it is to do by hand.

I do think `@for $i from 10 to 1` should work, though.
",nex3,for
691,2013-07-17 15:53:28,"Just ran into this, so if actual use cases help: I was using a for loop to generate a series of max-width media queries, issue being it was generating larger & larger max-width media queries which would simply override all those prior.  Fixed using `abs()` to get a decrementing `@for` loop.

Can post code if that'd help, but +1 for `@for $i from 10 to 1`, or the alternate syntax Chris proposed.
",dustinhorton,for
691,2013-09-17 06:58:12,"I added a PR for implementing a decrementing loop (`@for $i from 10 to 1` as @nex3 suggested). Sorry I couldn't get hub to add the PR to the issue directly, had a lot of trouble with it - seems there are some problems with Github's new 2FA.
",robinroestenburg,for
690,2014-11-24 03:35:54,"+1 in general. Coming to Sass I kinda expected this feature to already be implemented and thought I had discovered a bug.

@jslegers -1 
If you allow customizing the name of the index file, you'll end up with incompatible vendor packages. If vendor A settles for `_module.s[ac]ss`, but vendor B goes with `_entry-point.s[ac]ss` and the user (you) decides to use `_index.s[ac]ss`, they won't be able to use any of the vendor's packages/modules.
Besides that, there is no such thing as a config file. You'd either have to mingle this config into your Sass files (very ugly!) or pass it as an option to the compiler (not much less ugly).

Sass should decide which name to use to prevent this mess. I recommend using `_module-index.s[ac]ss` or `_import-index.s[ac]ss`, depending on wether or not this gets implemented in dependence of the module feature. The name is expressive and the risk of already having partials named like that is fairly low.

@chriseppstein I recommend getting this in before the module feature, as this is a low-level feature in the language. It's virtually nothing different than a macro. The `@import ""some/directory""` statement should be availabe, without having to use higher-level concepts such as modules.

I'm highly anticipating this feature and would love to see it before the next major version update, especially in libsass, as that's what I'm using! :)

As soon as the core contributors can settle on a name or chain of names (look for xyz, if not found for abc, if not found for ... - however I discourage this), this rather ""trivial"" patch could be implemented in libsass and would be available to thousands of Node.js users in an instant.
",buschtoens,import
690,2014-11-29 07:26:00,"Agreed, @phvcky. A good tool needs to have constraints. Customizing the name of the index file is needless complexity. The benefits are miniscule in comparison to the problems such a feature invites.
",adamjgrant,phvcky
690,2015-11-09 20:38:14,"Yeah, I'm going to strongly recommend that we re-work this issue into something a little more specific. Also, I am very against ""_module"" because of confusion with our upcoming module system. This seems to confuse the concepts of modules and a directory import... it's not clear about the relationship here.

Is `@import ""folder"";` the same thing as the upcoming `@use ""folder"" as ""f"";`? To me, this issue doesn't resolve any of the issues with real modules, and this seems more like something we'd implement as part of the current sequential-import system we use, instead of a more complex module/dependency tree.

If we were going to do this as a simple bulk-import / non-real-module system, I'd highly suggest some form of `index` as that's a lot clearer that it's job is to list files, instead of actually defining a full module interface.
",hcatlin,use
690,2015-11-09 20:38:14,"Yeah, I'm going to strongly recommend that we re-work this issue into something a little more specific. Also, I am very against ""_module"" because of confusion with our upcoming module system. This seems to confuse the concepts of modules and a directory import... it's not clear about the relationship here.

Is `@import ""folder"";` the same thing as the upcoming `@use ""folder"" as ""f"";`? To me, this issue doesn't resolve any of the issues with real modules, and this seems more like something we'd implement as part of the current sequential-import system we use, instead of a more complex module/dependency tree.

If we were going to do this as a simple bulk-import / non-real-module system, I'd highly suggest some form of `index` as that's a lot clearer that it's job is to list files, instead of actually defining a full module interface.
",hcatlin,import
687,2013-03-20 00:05:51,"I found that Yahoo's YUI Compressor manages to minify my CSS to an even smaller file size. So I think there are some extra savings that SASS could be making. I compiled my SASS to vanilla CSS using `--style expanded`, then compiled that using both YUI and SASS with `--style compressed`. Here's a list of the possible savings I got from the diff:
- Remove leading zeroes from decimal values. For example SASS outputs `transition:color 0.2s` whereas YUI outputs `transition:color .2s`.
- Replace `outline:none` with `outline:0`
- Remove extra spaces in media queries. Examples:
  SASS: `@media (min-width: 778px) and (max-width: 1161px)`
  YUI: `@media(min-width:778px) and (max-width:1161px)`
  SASS: `@media handheld, only screen and (max-width: 777px)`
  YUI: `@media handheld,only screen and (max-width:777px)`
- YUI replaces `background:none` with `background:0` but I'm not sure if that's really valid.
- Remove extra spaces in font stacks.
  SASS: `font-family:""Ubuntu"", ""Trebuchet MS"", ""Open Sans"", sans-serif;`
  YUI: `font-family:""Ubuntu"",""Trebuchet MS"",""Open Sans"",sans-serif;`
  (Should be able to remove the unnecessary quotes around `Ubuntu` as well, right?)
- Colors are not compressed: `#ffffff` should be `#fff`, `#dddd66` should be `#dd6`.
- The space between colors in a standalone `linear-gradient` is removed, but in this rule it is not:
  
  

Hope this is useful! :)
",svivian,media
687,2013-03-20 01:36:45,"> - Remove leading zeroes from decimal values. For example SASS outputs `transition:color 0.2s` whereas YUI outputs `transition:color .2s`.
> - Remove extra spaces in media queries. Examples:
>   SASS: `@media (min-width: 778px) and (max-width: 1161px)`
>   YUI: `@media(min-width:778px) and (max-width:1161px)`
>   SASS: `@media handheld, only screen and (max-width: 777px)`
>   YUI: `@media handheld,only screen and (max-width:777px)`
> - Remove extra spaces in font stacks.
>   SASS: `font-family:""Ubuntu"", ""Trebuchet MS"", ""Open Sans"", sans-serif;`
>   YUI: `font-family:""Ubuntu"",""Trebuchet MS"",""Open Sans"",sans-serif;`
>   (Should be able to remove the unnecessary quotes around `Ubuntu` as well, right?)
> - The space between colors in a standalone `linear-gradient` is removed, but in this rule it is not:
>   
>   

These are all doable.

> - Replace `outline:none` with `outline:0`
> - YUI replaces `background:none` with `background:0` but I'm not sure if that's really valid.

This requires more knowledge of the semantics of CSS properties than we're willing to put into Sass.

> - Colors are not compressed: `#ffffff` should be `#fff`, `#dddd66` should be `#dd6`.

This already happens in most cases. However, we have a parsing shortcut that causes us to occasionally avoid fully parsing or compressing properties. This shortcut should be disabled in compressed mode.
",nex3,media
687,2015-03-23 04:17:53,"@stoyan's cssshrink.com/velocity/ has some great options.
",kevinSuttle,stoyan
684,2015-03-25 11:13:29,"I don't mind the idea of bypassing Compass and `@import`ing custom Ruby packages to Sass libs, but I didn't see anything in https://github.com/sass/sass/issues/1094 that had anything to do with this. Maybe I overlooked it.

I'll try to see if I can get memoization working with decimal exponents and if I can't then I'm not going to keep worrying about it. Sass can do it's slow thing.
",corysimmons,import
684,2015-03-26 11:04:34,"@scottkellum IMO you should keep the syntax as close to ""basic front end"" (HTML,CSS,JS) as possible ‚Äì why pow($base, $exponent) is the better choice (and why ^ (XOR) should not be used either).



**PS**. in relation to my suggested constant functions ‚Äì if/when namespaces becomes available I picture  them looking something like this math.$LN2 or @math.$LN2 or... but that's another story :)
",jakob-e,math
682,2013-03-12 16:40:54,"As designed, it's precisely what @extend is meant to do; replace in order. Think of %placeholder as behaving identical to .class, except that if it doesn't get extended, it doesn't get printed

On Mar 12, 2013, at 12:34 PM, tomasz stryjewski notifications@github.com wrote:

> source:
> 
> %foo {
>     color: red;
> }
> %bar {
>     color: blue;
> }
> 
> .bar {
>     @extend %bar;
> }
> .foo {
>     @extend %foo;
> }
> expected output:
> 
> .bar {
>   color:blue
> }
> .foo {
>   color:red
> }
> actual output:
> 
> .foo {
>   color:red
> }
> .bar {
>   color:blue
> }
> bug or a feature?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,extend
682,2013-03-12 16:52:36,"Placeholder selectors are the same thing as normal selectors for @extend with the one change being they inherit the name of the first item getting extended. Their purpose is to change the cascade.

On Mar 12, 2013, at 12:43 PM, tomasz stryjewski notifications@github.com wrote:

> maybe more of a real-case example:
> 
> placeholder-selectors for images - their order will be alphabetical ( when using something lie sprite-map )
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,extend
682,2013-03-12 17:01:26,"Right, that's what it does. @extend doesn't happen in place where it gets called, it happens at the place the primary item lives. The exact same thing would happen if you had actual classes as opposed to placeholders. That's what @extend does by definition.

On Mar 12, 2013, at 12:53 PM, tomasz stryjewski notifications@github.com wrote:

> but the isse here is that they are printed in the order they are being defined, not extended
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,extend
682,2013-03-12 17:03:39,"fair enough.

would be cool to have **@extend-here** or something ;-)
",stryju,extend-here
681,2013-03-12 18:47:15,"@chriseppstein this is more your purview than mine.
",nex3,chriseppstein
681,2014-01-14 00:12:01,"@mzgol you need to set up the sprite load paths in your compass config:


",chriseppstein,mzgol
681,2014-01-14 00:14:12,"@mzgol let's move this over to the compass issue tracker.
",chriseppstein,mzgol
679,2013-03-09 01:24:01,"Interesting. BTW, in `_parse.scss::@function bp-unpack-list($bp-list)` you're stating that Sass doesn't allow recursive functions?

Here is my function I am currently using in one of my projects:



and it works like a charm ;)
",StefanoRausch,function
678,2013-03-07 05:28:26,"Hoo you are right. But the scope of the @media does not work for this case similar to the variables?

Thank you :smile: 
",felquis,media
678,2013-03-07 20:50:55,"No, we decided to have this case produce a warning (and an error in future versions) because we don't want users getting confused about why their `@extend` isn't working outside of `@media`.
",nex3,extend
678,2013-03-07 20:50:55,"No, we decided to have this case produce a warning (and an error in future versions) because we don't want users getting confused about why their `@extend` isn't working outside of `@media`.
",nex3,media
674,2013-03-01 16:09:17,"Media queries already support nesting:



Output:



But what about for `@supports`?



Output:



I was expecting for something more like this for the output:



For my sample code, treating nesting as an AND works, but it is possible that I might want an OR instead.  So maybe the operand should be explicitly required:



http://www.w3.org/TR/css3-conditional/#at-supports
",cimmanon,supports
674,2013-03-18 19:45:02,"I'm against adding the OR syntax; that's what commas are for. Let's keep it close to css. But yes, `@or` directive AND bubbling would be great.
",robwierzbowski,or
674,2013-03-18 20:15:16,"According to the spec, `@supports` is allowed to be nested natively in CSS. In fact, the same is true for `@media`, but there are plenty of implementations that support `@media` without supporting nesting. Can someone confirm that there are implementations that support `@supports` but don't allow it to be nested?
",nex3,supports
674,2013-03-18 20:15:16,"According to the spec, `@supports` is allowed to be nested natively in CSS. In fact, the same is true for `@media`, but there are plenty of implementations that support `@media` without supporting nesting. Can someone confirm that there are implementations that support `@supports` but don't allow it to be nested?
",nex3,media
673,2013-02-28 23:16:12,"Identical to https://github.com/nex3/sass/issues/626

On Feb 28, 2013, at 6:11 PM, Christophe Tauziet notifications@github.com wrote:

> It looks like it's impossible right now to include a mixin using a variable as the identifier.
> 
> You should be able to do this:
> @mixin myMixin($mixinName) {
> @include $mixinName;
> }
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,include
673,2013-02-28 23:16:12,"Identical to https://github.com/nex3/sass/issues/626

On Feb 28, 2013, at 6:11 PM, Christophe Tauziet notifications@github.com wrote:

> It looks like it's impossible right now to include a mixin using a variable as the identifier.
> 
> You should be able to do this:
> @mixin myMixin($mixinName) {
> @include $mixinName;
> }
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,mixin
672,2013-03-01 21:47:45,"By default, Sass will always try to resolve an `@import` relative to the file the `@import` appears in before trying any other load path. If that's not working in `sass-rails`, that's because of their custom import configuration.
",nex3,import
667,2013-02-25 23:20:07,"@nex3 I don't know that there's much that can be done here. Do you agree?
",chriseppstein,nex3
666,2013-02-25 20:24:00,"If I use @extend to apply the rules from a class to my selector, and the extended selector matches an attribute substring selector, it would be nice if the rules from the substring selector also applied to the newly extended selector. Demo at http://codepen.io/tessa-lt/pen/fxugl

EDIT: nevermind. You can extend the attribute selector itself. It's monday. I'm sorry. 
",tessalt,extend
663,2013-02-21 13:49:11,"I have a proposal for a switch statement, I think allowing for this would make for easier management of websites that need things such as responsive design.

The code below will evaluate each block of code to see which is the first to hit true (starting from the top) if none match then @default is executed.

The one that matches gets its contents outputted inline.



If I wanted to make it compare it to another value other than true then I could write it like this. The \* will take the value of the variable passed to the switch statement and use is part of the statement.

Each condition assumes that the variable is on the left so you can use expressions such as ""<=""


",jcampbell05,default
663,2013-02-26 00:29:19,"There are numerous issues with this:
- It's not clear what it would compile to. Even if you could find some sort of `@media`-based target semantics, it would be hard for authors to reason about what output would get generated.
- It's possible that there are some configurations that just aren't possible for a preprocessor to create.
- It's dangerous to introduce a `@switch` directive, as that's the sort of keyword that's likely to be used by CSS itself in the future.
- It's not clear that this directive offers much semantic improvement over plain old `@media` queries.
",nex3,media
663,2013-02-26 00:29:19,"There are numerous issues with this:
- It's not clear what it would compile to. Even if you could find some sort of `@media`-based target semantics, it would be hard for authors to reason about what output would get generated.
- It's possible that there are some configurations that just aren't possible for a preprocessor to create.
- It's dangerous to introduce a `@switch` directive, as that's the sort of keyword that's likely to be used by CSS itself in the future.
- It's not clear that this directive offers much semantic improvement over plain old `@media` queries.
",nex3,switch
661,2013-02-19 13:24:13,"Thank you @snugug for this explanation.

In other words, what do you advise me about how many numbers should be
there after the comma?

I mean, I was on android chrome, android browser, ios safari, ios chrome
and I had this not-full-width problem. Changing my width manually fixed my
problem.

On 19 February 2013 13:37, Snugug notifications@github.com wrote:

> I disagree the greatest solution to a stylesheet wide precision option is
> a percentage specific variable. Additionally, I think your actual issue is
> a misunderstanding of cross-browser percentage rounding issues.
> In Firefox, newer Chrome, and iirc IE8+, percentage rounds are staggered
> up and down to to accommodate for sub pixels. In Safari (and all other
> WebKit for that matter, save new Chrome), it's all rounded down, leading to
> percentages that would add up to 100%, not. In old IE, everything is
> rounded up, meaning its very likely you'll overflow your 100%.
> 
> On Feb 19, 2013, at 7:09 AM, Erwann MEST notifications@github.com
> wrote:
> 
> > Yes, it's one of the solutions, but the greatest thing could be to have
> > a second optional param which is the precision for percentage().
> > 
> > ‚Äî
> > Reply to this email directly or view it on GitHub.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/661#issuecomment-13770352.

## 

_Erwann MEST_

www.kud.fr
",kud,snugug
661,2013-02-19 13:57:30,"Each and every one of those browser are affected by the percentage rounding bug. My honest opinion is to not worry about it, it's not a question of precision it's a question of rendering behavior. John Wilkins has a good write up (http://palantir.net/blog/responsive-design-s-dirty-little-secret) about the issue and a way to ""solve"" it. I personally am not a fan of his proposal, as I'm ok with the rounding issues as they rarely ever bite me, but it does work.

On Feb 19, 2013, at 8:24 AM, Erwann MEST notifications@github.com wrote:

> Thank you @snugug for this explanation. 
> 
> In other words, what do you advise me about how many numbers should be 
> there after the comma? 
> 
> I mean, I was on android chrome, android browser, ios safari, ios chrome 
> and I had this not-full-width problem. Changing my width manually fixed my 
> problem. 
> 
> On 19 February 2013 13:37, Snugug notifications@github.com wrote: 
> 
> > I disagree the greatest solution to a stylesheet wide precision option is 
> > a percentage specific variable. Additionally, I think your actual issue is 
> > a misunderstanding of cross-browser percentage rounding issues. 
> > In Firefox, newer Chrome, and iirc IE8+, percentage rounds are staggered 
> > up and down to to accommodate for sub pixels. In Safari (and all other 
> > WebKit for that matter, save new Chrome), it's all rounded down, leading to 
> > percentages that would add up to 100%, not. In old IE, everything is 
> > rounded up, meaning its very likely you'll overflow your 100%. 
> > 
> > On Feb 19, 2013, at 7:09 AM, Erwann MEST notifications@github.com 
> > wrote: 
> > 
> > > Yes, it's one of the solutions, but the greatest thing could be to have 
> > > a second optional param which is the precision for percentage(). 
> > > 
> > > ‚Äî 
> > > Reply to this email directly or view it on GitHub. 
> > 
> > ‚Äî 
> > Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/661#issuecomment-13770352. 
> 
> ## 
> 
> _Erwann MEST_ 
> 
> www.kud.fr
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,snugug
660,2013-02-16 20:47:40,"By playing around with my friend @harby testing the silent classes, we found a strange compilation issue.

If you have the following **silent class**:



And then you want to **extend** this class to a btn for example but using a different colour:



The final result will be:



This compiles more code than the expected code:



Have anyone notice the same issue? Looks really interesting :)
",andrewckor,harby
659,2013-02-13 23:41:21,"_Edited by @nex3 to change the title._

From the [documentation](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#import):

> Imports may contain #{} interpolation, but only with certain restrictions. It‚Äôs not possible to dynamically import a Sass file based on a variable; interpolation is only for CSS imports. As such, it only works with url() imports. For example:
> 
> 
> 
> would compile to
> 
> 

However, Sass 3.2.5 compiles to:



Some other nuances of the slash behavior, e.g. for `$foo: 83`:
- `content: ""\#{$foo}""` compiles to `content: ""#{$foo}""`
- `content: ""\\#{$foo}""` compiles to `content: ""\\83""`
- There does not appear to be a way to get simply `content: ""\83""`

This makes it difficult to do things like embed unicode characters in SCSS based on variable values.
",Ry7n,nex3
659,2013-02-26 03:15:27,"@chriseppstein does `unescape-string` sound reasonable to you?
",nex3,chriseppstein
659,2013-03-09 14:03:39,"I was trying to do something like this today, hoping that the following would work:



...which is part of an experiment I'm doing concerning automated creation of `@extend` points; but the important bit is interpolating the variable name, since there's no way I could see to unescape the `\$` bit. So the result I got was:



...which obviously doesn't work. I can't quite remember but I think I did this using Stylus, as it does have an `unquote` or `unescape` function if I remember correctly
",lunelson,extend
659,2014-02-22 07:13:46,"+1 @hugogiraudel's comment
",guymeyer,hugogiraudel
657,2013-02-12 21:23:35,"I'm seeing some unexpected behavior with an @extended placeholder class containing >.



This is the output:



This is the expected output:



See it here: http://sassmeister.com/gist/4760254

However the same set of rules with + where the > is produces the expected chain of selectors.  See it here: http://sassmeister.com/gist/4760268

I can't understand why Sass is doing this. Any ideas?
",jedfoster,extended
657,2013-02-26 02:39:44,"Sass provides a very specific set of guarantees about the specificity of selectors it generates via `@extend`. Due to Sass's nature as a preprocessor, it's impossible to be entirely consistent with user expectations here, but the guarantees we do offer are the best we can do to make it easy to reason about specificity when using `@extend`. The pertinent guarantee is what I call ""the second law of extend"": **the specificity of a generated selector should never be less than the specificity of the extending selector**.

In this case, the generated selector is `#expected > header hgroup` with specificity 102, and the extending selector is `#unexpected > section` with specificity 101. This follows the second law of extend, and so is correct.

For further reference, see [this comment](https://github.com/nex3/sass/issues/324#issuecomment-4607184) where I expound at length the details of Sass's handling of specificity.

### tl;dr

Sass does the best it can to handle specificity consistently. If you want more consistency, use `!important`.
",nex3,extend
653,2013-02-11 09:46:26,"It would be nice if nth function had third parameter [seperator].

nth(list, n, [seperator]);

Because i'm using nested lists. 1st level lists are separated with comas but 2nd level lists are separated with white space.

Everything is cool till i have only one 1st level item which contains a list.
And when i do @each function it thinks that it is 1st level list.

Tried to append , 0 at the end to work properly but append as well as join function changes all seperators to comma or space. 
If i use something like that ""#{$list}, 0"" it makes $list to string and it can not be processed as list and so on.

So it would be great if i could select seperator for nth function as well it would be nice to append, join functions only handled seperator between two lists or list and appendable and didn't change any seperator with passed arguments.
",revati,each
652,2013-02-07 19:26:14,"The SASS `@import` directive calculates relative paths based on the working-directory of the shell it is invoked in.

But the CSS `@import` calculates relative paths based on the directory the CSS files resides in.

I can work around this but now I have a bug lurking in the shadows: if I should ever accidentally or deliberately change the working directory of my web server all my SASS files will stop compiling.


",mxcl,import
652,2013-02-22 23:45:49,"Sass `@import`s have a configurable set of load paths that are used when resolving relative imports. By default, these paths include both the directory containing the file in question and the current working directory. The file's directory takes precedence, so if you're worried about breaking your imports by changing your working directory, you can import relative to the files themselves.
",nex3,import
649,2013-02-04 17:35:17,"This was incorrectly posted in the Compass queue, re-posting here on behalf of @nschonni as I see value in unit omission for zero values. 



https://github.com/stubbornella/csslint/wiki/Disallow-units-for-zero-values
",krisbulman,nschonni
649,2013-12-12 17:20:26,"I verified with @tabatkins that it is safe for Sass to omit the unit for **lengths** when the value is 0. This is true for all properties. However, there is one known ambiguity if you have a list of values for the `flex` property without specifying all the values because it mixes two `<number>`s and a `<length>`, and so in some cases you either need a unit specifier or need to follow a particular order.

We should consider adding support for this. Re-opening.
",chriseppstein,tabatkins
648,2013-02-22 23:36:21,"This is a reasonable request, but before we do it we need to figure out what the following should compile to:



Unfortunately, `foo:not(.baz .qux)` is invalid. This is pretty important, since nested extenders are quite common.

@chriseppstein, what do you think?
",nex3,chriseppstein
644,2013-01-31 20:57:53,"Perhaps I'm misunderstanding the imposed limitations of `@extend` with respect to `@media` but I'm seeing the following issue:



Behaves as expected producing:



However, if nested in another query:



It fails to extend, and produces the deprecation error:



And instead yields:



This doesn't seem correct, as the placeholder selector `%foo` being extended is within the same `@media` scope as the extender `.foo-n`.

I initially noticed this on 3.2.3, however while writing this I've updated to 3.2.5 and it remains an issue.
",northborndesign,extend
644,2013-01-31 20:57:53,"Perhaps I'm misunderstanding the imposed limitations of `@extend` with respect to `@media` but I'm seeing the following issue:



Behaves as expected producing:



However, if nested in another query:



It fails to extend, and produces the deprecation error:



And instead yields:



This doesn't seem correct, as the placeholder selector `%foo` being extended is within the same `@media` scope as the extender `.foo-n`.

I initially noticed this on 3.2.3, however while writing this I've updated to 3.2.5 and it remains an issue.
",northborndesign,media
644,2013-02-01 21:43:09,"Is `%foo` also defined outside of the @media block?
",robwierzbowski,media
644,2013-02-01 22:23:12,"This is a bug in Sass. Can you file an issue at
http://github.com/nex3/sass/issues?

Chris

On Fri, Feb 1, 2013 at 2:05 PM, Rob Wierzbowski notifications@github.comwrote:

> Hmm, just tested with:
> 
> @include breakpoint(20em) {
>   %thisplace {
>     color:red;
>   }
> 
>   .redtest {
>     @extend %thisplace;
>   }}
> 
> Everything worked fine, no errors or warnings. Using Sass 3.2.5 and
> Compass 0.12.2.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/644#issuecomment-13016719.
",chriseppstein,extend
644,2013-02-01 22:23:12,"This is a bug in Sass. Can you file an issue at
http://github.com/nex3/sass/issues?

Chris

On Fri, Feb 1, 2013 at 2:05 PM, Rob Wierzbowski notifications@github.comwrote:

> Hmm, just tested with:
> 
> @include breakpoint(20em) {
>   %thisplace {
>     color:red;
>   }
> 
>   .redtest {
>     @extend %thisplace;
>   }}
> 
> Everything worked fine, no errors or warnings. Using Sass 3.2.5 and
> Compass 0.12.2.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/644#issuecomment-13016719.
",chriseppstein,include
643,2013-01-28 16:49:38,"`@supports` only bubbles up when using the SCSS syntax, not the Original Sass syntax. Gists here:

SCSS: http://sassmeister.com/gist/4656613

Sass: http://sassmeister.com/gist/4656638
",roytomeij,supports
642,2013-01-25 22:54:13,"_Edited by @nex3 to change the title._

I don't find tickets about collections.

I read some closed tickets abouts namespaces and scopes, but they don't seems to describe what I'm thinking about.

So, instead of a description, here is an example :



This would output :



More than collections, for this to work, we should be able to pass more arguments than mixins wants, as long as they are named.

In short, this should work without throwing error (sass should just ignore named arguments which are not in its signature):



Sorry for being so long.
",ByScripts,nex3
642,2013-03-05 04:02:05,"I want to start working on this in earnest soon, so I'm going to start brainstorming syntax and function names. I think the two biggest things we need to nail down is the map-creation syntax and the element access syntax. There are some other ancillary things, but creating and accessing maps are by far the most common use cases.

@chriseppstein, I'm looking for your input on all this in particular.

### Creating Maps

There are two main paths to explore here. Either we have built-in syntax for creating maps, or we farm it out to a function. The former is terser and closer to what scripting languages do, but there's also intrinsic conceptual load to introducing syntax, as well as a greater risk of running into syntax conflicts with CSS.

#### New Syntax

What would this look like? Would it have explicit delimiters as in scripting languages, or would it follow Sass lists and have no delimiters with the option to use parentheses? The lack of delimiters on Sass lists has proven challenging. However, much of this challenge comes from treating individual values as single-item lists, which is not an issue for maps, and delimiters eat up syntax that might be used by CSS.

Would keys be prefixed with `$` or would they be bare strings? `$` fits the syntax of named arguments, the closest analogue to maps that we have at the moment, but it adds another context where `$foo` doesn't refer to the variable `$foo`. It also makes it impossible to use variables as keys, and it's unclear what would happen if you tried to programmatically access the key. It seems clear that bare-string keys are preferable.

What about non-string keys? Would we allow `1: value`? `#fff: value`?

One approach here would be to match the syntax of media queries. This would mean no explicit delimiters and bare-string keys. It would allow `@media #{$map}` to work.

#### Function

The most obvious way to make a function to create a map would be to use the existing keyword argument syntax, as in `create-map($key1: value1, $key2: value2)`. However, this has the same issues as using `$` in a new syntax, most notably making it impossible to create a map with programmatically-generated keys. This seems like an unacceptable sacrifice.

The other option is to use our existing data structure, lists, to do something like `create-map(key1 value1, key2 value2)`. This doesn't read as well as a custom syntax would, but it's possible that the benefits of using a function outweigh that downside.

### Accessing Maps

Once again we're choosing between adding new syntax and adding a function. The clear choice for the access syntax would be `$map[key]`. There are many downsides to this, though. In addition to all the normal issues with adding new syntax, this would be confusingly different than the use of a function to access lists (`nth`).

The question then becomes what name to give the access function. `get` is terse but extremely general and likely to come into conflict. `map-get` follows the naming convention used by the new string functions, but still suffers from the relative vagueness of ""get"".
",nex3,media
642,2013-03-05 04:02:05,"I want to start working on this in earnest soon, so I'm going to start brainstorming syntax and function names. I think the two biggest things we need to nail down is the map-creation syntax and the element access syntax. There are some other ancillary things, but creating and accessing maps are by far the most common use cases.

@chriseppstein, I'm looking for your input on all this in particular.

### Creating Maps

There are two main paths to explore here. Either we have built-in syntax for creating maps, or we farm it out to a function. The former is terser and closer to what scripting languages do, but there's also intrinsic conceptual load to introducing syntax, as well as a greater risk of running into syntax conflicts with CSS.

#### New Syntax

What would this look like? Would it have explicit delimiters as in scripting languages, or would it follow Sass lists and have no delimiters with the option to use parentheses? The lack of delimiters on Sass lists has proven challenging. However, much of this challenge comes from treating individual values as single-item lists, which is not an issue for maps, and delimiters eat up syntax that might be used by CSS.

Would keys be prefixed with `$` or would they be bare strings? `$` fits the syntax of named arguments, the closest analogue to maps that we have at the moment, but it adds another context where `$foo` doesn't refer to the variable `$foo`. It also makes it impossible to use variables as keys, and it's unclear what would happen if you tried to programmatically access the key. It seems clear that bare-string keys are preferable.

What about non-string keys? Would we allow `1: value`? `#fff: value`?

One approach here would be to match the syntax of media queries. This would mean no explicit delimiters and bare-string keys. It would allow `@media #{$map}` to work.

#### Function

The most obvious way to make a function to create a map would be to use the existing keyword argument syntax, as in `create-map($key1: value1, $key2: value2)`. However, this has the same issues as using `$` in a new syntax, most notably making it impossible to create a map with programmatically-generated keys. This seems like an unacceptable sacrifice.

The other option is to use our existing data structure, lists, to do something like `create-map(key1 value1, key2 value2)`. This doesn't read as well as a custom syntax would, but it's possible that the benefits of using a function outweigh that downside.

### Accessing Maps

Once again we're choosing between adding new syntax and adding a function. The clear choice for the access syntax would be `$map[key]`. There are many downsides to this, though. In addition to all the normal issues with adding new syntax, this would be confusingly different than the use of a function to access lists (`nth`).

The question then becomes what name to give the access function. `get` is terse but extremely general and likely to come into conflict. `map-get` follows the naming convention used by the new string functions, but still suffers from the relative vagueness of ""get"".
",nex3,chriseppstein
642,2013-03-05 23:53:51,"Another thing to note: Maps need to be ordered. This is because a map may be used to hold a sequence of property name/value pairs and the order of properties is very important.

### Creation Syntax

I really think that a function for creating a map is not the way, the syntax is just too awkward. So what should the syntax be?

My initial reaction is that what css other than selectors and maps? So why not simply let curly braces, when used in a script context be a map?



I prefer semi-colons here for the similarity to rulesets and to avoid requiring parenthesis when creating maps of values to comma-delimited lists which I think will be fairly common.

Unfortunately this creates a syntactic ambiguity that cannot be resolved with a finite look-ahead because of nested properties _if_ we have accessor syntax instead function accessors. Example:



But I think that using functions for map access and manipulation is better and more consistent than creating new syntax.

The other strangeness of this syntax is that is would leave us with semicolons in the middle of a script expression which may cause a readers eye to be mislead about where the end of the expression is. However, I think this will actually be quite rare in practice, most maps will be created separately from where they are used.

### Iteration

I would also amend the `@each` directive to be map-aware:



### Library

I agree that `get` is too general, but I don't think map-get is confusing, so let's go with that and see what people think.
- `map-get($map, $key)` - returns the value stored for the key.
- `map-set($map, $key1, $value1, $key2, $value2, ...)` - returns a new map having the keys set to their corresponding values. if a key already exists, the order of that key will stay the same, but the value it is mapped to will change.
- `length($map)` returns a number that is the number of pairs in the map.
- `map-merge($map1, $map2)` - returns a new map that is the result of successively adding the keys from $map2 to $map1 by calling map-set. while this can be done in pure-sass, having it built-in ruby reduces the number of temporary map objects (and hence GC).
- `map-keys($map)` - returns a comma delimited list of keys in the order they were first set.
- `map-values($map)` - returns a comma delimited list of values in the order they were first set.
- `map-apply($map, $function-name)` - returns a new map where the values have been transformed according to the values returned by the function given by $function-name (which should accept two arguments -- the key and the current value). While this could be done in pure-sass, having it provided internally will avoid the creation of many intermediate map objects because of the immutability of map objects.
- `nth($map, $index)` returns a comma delimited list of the key and value stored at the map's index. 
",chriseppstein,each
642,2013-03-06 01:35:05,"> ### Creation Syntax

There are a lot of look-ahead issues that arise from using `{}`. Not just nested properties, but anywhere that a curly bracket immediately follows script... in `@each`, for example. I'd rather avoid these issues.

> ### Iteration
> 
> I would also amend the `@each` directive to be map-aware:
> 
> 

I agree with this, although I think `@each $key: $value in $map` looks a little better.

> - `map-set($map, $key1, $value1, $key2, $value2, ...)` - returns a new map having the keys set to their corresponding values. if a key already exists, the order of that key will stay the same, but the value it is mapped to will change.

I'm not a big fan of this function. I think we should use `map-merge` as the canonical way of adding values to a map. These functions are pretty much identical in semantics, except that `map-set` is less general. The name also incorrectly implies that it mutates the map.

> - `map-apply($map, $function-name)` - returns a new map where the values have been transformed according to the values returned by the function given by $function-name (which should accept two arguments -- the key and the current value). While this could be done in pure-sass, having it provided internally will avoid the creation of many intermediate map objects because of the immutability of map objects.

This is a pretty wacky function. What are the use cases for it?

> - `length($map)` returns a number that is the number of pairs in the map.
> - `nth($map, $index)` returns a comma delimited list of the key and value stored at the map's index. 

If we implement these, we should have a general policy of list functions treating maps as lists of pairs. This isn't the craziest thing (and makes `()` work nicely as both the empty list and the empty map), but we run into plenty of problems with single-element lists as it is. Do you have ideas for dealing with that? 
",nex3,each
642,2013-05-24 15:34:13,"> ### Creation Syntax
> 
> There are a lot of look-ahead issues that arise from using `{}`. ... I'd rather avoid these issues.

Fair enough. The visual similarity with a ruleset may be confusing to read instead of being helpful.

Though it seems that you're proposing using`()` which seems to introduce similar look-ahead issues with lists because of arbitrary key expressions. Perhaps we should use `[]` instead. Or maybe we should go back to a creation function like `map(key1 value1, key2 value2, key3 value3)`

> ### Iteration
> 
> I agree with this, although I think `@each $key: $value in $map` looks a little better.

I agree that does read better for the common case of maps. Let's consider the edge cases a bit.

First, what should the behavior of `@each $pair in $map` be? Is it an error? or should we simply set `$pair` to `($key, $value)` on each successive iteration. I am a fan of the latter as this allows code to be written which can accept a map or an old-style list of pairs.

I see a fair bit of sass code that boils down to setting variables to successive indexes in a list. We can clean up such code eventually with a multi-set expression like `$a, $b, $c: $list-of-three-elements`.

And so, with the above multi-set I think a map-pair and a list of two elements can be made syntacticly indistinguishable. which leaves me thinking that an automatic multi-set in the `@each` iterator using comma makes for a nice syntax especially if you have a list of n-tuples, etc.

I guess the answer could be allow both syntaxes. where `$key: $value` is handled for a two element list. but I think I prefer a single syntax that serves more use cases and provides syntactic & mental consistency with a multi-set.

> ### map-set function
> 
>  I think we should use map-merge as the canonical way of adding values to a map. 

I think this is good.

> ### map-apply function
> 
> This is a pretty wacky function. What are the use cases for it?

I want to also add `list-apply` which would do a map of values to values. Because I see so much code that looks like this:



which creates a lot of garbage list objects in addition to being less readable than:



Additionally, the list-apply makes it drop-dead simple to pass a mutated list as an argument or use as a property value.  So I suspect that we'll see the same patterns emerge with maps and I know from my own coding experience that transforming a map's values is a fairly common operation. All that said, I'm ok with not adding the `map-apply` function in the initial API and seeing how things evolve in practice.

> ### length and nth functions
> 
> If we implement these, we should have a general policy of list functions treating maps as lists of pairs.

Yes. As I stated above, I'm a big fan of this as well as treating lists of pairs as maps. It makes new code more backwards compatible with existing data structures and I don't think it has any downsides that I can think of.

### Keyword arguments

We didn't cover this yet, but integration with variable arguments was a key driver for this feature. So I just want to give it a mention. As [discussed](https://gist.github.com/chriseppstein/ce0af5c1886f952978c6) we will implement the following:



Similarly, a map can be used to pass keywords. but I don't think we settled on the syntax for that.

Should it accept multiple `...` arguments like so:



Or should it continue to only accept a single `...` argument with a special arglist constructor function:



I prefer the former. I have a fair bit of time today if you want to discuss this.
",chriseppstein,each
642,2013-05-31 20:49:38,"Chris and I discussed this privately a fair amount last week. Here's where we came down (to the best of my recollection):

> length and nth functions

We will treat maps as lists of pairs, so these functions will work transparently. I don't think we'll treat lists of pairs as maps, though... dealing with inconsistencies such as duplicate keys would be too much of a headache.

Functions like `join` and `append` will always return lists, even if they're passed maps.

> ### Creation Syntax

We'll use `(foo: bar)`, with the parentheses mandatory (unlike for lists). Treating maps as lists make `()` work as both the empty map and the empty list.

> ### Iteration

We'll use `@for $pair in $map` or `@for $key, $value in $map`. These will piggyback on a more general ability to destructure a list elements in a loop. This means that `@for $e1, $e2 in (foo bar, baz qux)` will work.

> ### map-apply function

We're not going to support first-class functions in 3.3, so we'll wait on addressing this for now.

> ### Keyword arguments

The syntax for passing a list as variable arguments and a map as keyword arguments will be `fn($list..., $map...)`.
",nex3,for
642,2013-05-31 21:27:08,"> Regarding keyword arguments: for symmetry, I'd like to support 
> 
> 

This seems pretty unclear to me. It leans very heavily on the parameter names to clarify what's going on, and provides no visual indication that the two parameters are doing different things.

> What's more I'm pretty sure I dislike the magic keyword values that are stored behind the argument list. It makes it too easy to author functions and mixins that silently ignore keyword arguments. I would be ok with deprecating it.

I don't understand this objection. We explicitly designed the existing semantics to avoid silently ignoring keyword arguments. If anything, your suggestion makes it easier to screw up in the case where you're forwarding all arguments to a function, because `foo($args...) { @return bar($args...) }` stops working.
",nex3,return
640,2013-01-25 09:15:28,"@extends are great - but why they can't be used in @media I don't understand ???
It becomes a BIG issue when trying to create reusables or frameworks.

Also it seems odd that while you can't use an @extend placed outside @media it 
will mess up the output if named the same inside (test 2 +3)

Thanks for making things a lot better :)
Jakob E (using v. 3.2.5 + CodeKit)

---

1) How it ought to work - but dosn't :(





---

2) Version 3.2.3 allows extends to be placed within - so let's do:





---

3) OK maybe it has something to do with the naming - let's add a and b:




",jakob-e,extend
640,2013-01-25 09:15:28,"@extends are great - but why they can't be used in @media I don't understand ???
It becomes a BIG issue when trying to create reusables or frameworks.

Also it seems odd that while you can't use an @extend placed outside @media it 
will mess up the output if named the same inside (test 2 +3)

Thanks for making things a lot better :)
Jakob E (using v. 3.2.5 + CodeKit)

---

1) How it ought to work - but dosn't :(





---

2) Version 3.2.3 allows extends to be placed within - so let's do:





---

3) OK maybe it has something to do with the naming - let's add a and b:




",jakob-e,media
640,2013-01-25 09:15:28,"@extends are great - but why they can't be used in @media I don't understand ???
It becomes a BIG issue when trying to create reusables or frameworks.

Also it seems odd that while you can't use an @extend placed outside @media it 
will mess up the output if named the same inside (test 2 +3)

Thanks for making things a lot better :)
Jakob E (using v. 3.2.5 + CodeKit)

---

1) How it ought to work - but dosn't :(





---

2) Version 3.2.3 allows extends to be placed within - so let's do:





---

3) OK maybe it has something to do with the naming - let's add a and b:




",jakob-e,extends
640,2013-01-28 06:39:27,"If you search 'media extend' there are a ton of issues that talk about this. At its most basic, `@extend` adds the selector to a list where the placeholder was defined. The short answer why this won't work is that the following isn't valid css:


",robwierzbowski,extend
640,2013-01-28 09:50:22,"That explains how the compiler works - thanks 

But as I see it - if the @media rule were to:
- create a nested placeholder list, referencing the same css values as the original
- restricting append to nested elements
- denying referral of nested lists

... wouldn't we be happy ? :)

Best,
Jakob E 
",jakob-e,media
640,2013-02-02 02:14:37,"As @robwierzbowski explains, `@extend` is all about moving selectors around -- **not** CSS rules. In order to support cross-`@media` extend, actual CSS rules would have to be copied and moved, which is unexpected and contrary to the way `@extend` behaves in every other circumstances. In addition, it can cause unexpected changes in specificity to the CSS output.

If copying the CSS is the behavior you want, we recommend you use mixins for that, as they're the language construct that explicitly supports copying.
",nex3,extend
640,2013-02-02 02:14:37,"As @robwierzbowski explains, `@extend` is all about moving selectors around -- **not** CSS rules. In order to support cross-`@media` extend, actual CSS rules would have to be copied and moved, which is unexpected and contrary to the way `@extend` behaves in every other circumstances. In addition, it can cause unexpected changes in specificity to the CSS output.

If copying the CSS is the behavior you want, we recommend you use mixins for that, as they're the language construct that explicitly supports copying.
",nex3,media
640,2013-04-16 20:26:36,"I think the problem here is that while we can't extend an outer class from within a media query, inner classes (inside a query or nest) are extended along with outer ones when an `@extend` is applied in an outer context. So while we can't extend freely between contexts, we have no way to keep them completely separate either (other than namespacing the classes we want to extend), which makes `@extend` more trouble than its worth.

In my view, `@extend` needs something like a strict mode, which matches only the same selector both in terms of context and in nesting, that would allow us to treat these things as different scopes, and know exactly what was going to extend what.

This is incidentally how the ""Roole"" preprocessor has chosen to implement `@extend` (strict matching, including nested selectors), and they are experimenting with an `@extend-all` directive which would match more broadly.

http://roole.org/#extend
",lunelson,extend
640,2013-04-16 20:26:36,"I think the problem here is that while we can't extend an outer class from within a media query, inner classes (inside a query or nest) are extended along with outer ones when an `@extend` is applied in an outer context. So while we can't extend freely between contexts, we have no way to keep them completely separate either (other than namespacing the classes we want to extend), which makes `@extend` more trouble than its worth.

In my view, `@extend` needs something like a strict mode, which matches only the same selector both in terms of context and in nesting, that would allow us to treat these things as different scopes, and know exactly what was going to extend what.

This is incidentally how the ""Roole"" preprocessor has chosen to implement `@extend` (strict matching, including nested selectors), and they are experimenting with an `@extend-all` directive which would match more broadly.

http://roole.org/#extend
",lunelson,extend-all
640,2013-04-17 14:19:56,"That is an epic workaround! 

IMO it seems like a Pandora's box that's been opened up with the features in 3.2 (but a good one); I'm convinced it must means however that more control or specificity is needed with respect to `@extend` across different contexts. Maybe a `!local` or `!strict` flag after `@extend` declarations to keep from picking up nested or media-scoped instances‚Äîthat would save a lot of trouble‚Äîanyway still thinking, I plan to post a separate issue on it

Awesome work with that approach above
",lunelson,extend
640,2013-04-17 14:39:22,"> In order to support cross-@media extend, actual CSS rules would have to be copied and moved, which is unexpected and contrary to the way @extend behaves in every other circumstances. In addition, it can cause unexpected changes in specificity to the CSS output.

I don't buy this one bit.  ""Why can't I `@extend` within using media queries"" is a question that pops up on SO every now and then (in addition to the number of issues that are regularly opened here), so I would say the opposite is true:  the fact that the styles _aren't_ copied over is the unexpected behavior.

> If copying the CSS is the behavior you want, we recommend you use mixins for that, as they're the language construct that explicitly supports copying.

Until we get mixin interpolation or the ability to pass a mixin as an argument to another mixin, this isn't a reasonable solution in some instances.  I get that you don't want to change how `@extend` behaves, so what about adding a `@copy` construct?
",cimmanon,extend
640,2013-04-17 14:39:22,"> In order to support cross-@media extend, actual CSS rules would have to be copied and moved, which is unexpected and contrary to the way @extend behaves in every other circumstances. In addition, it can cause unexpected changes in specificity to the CSS output.

I don't buy this one bit.  ""Why can't I `@extend` within using media queries"" is a question that pops up on SO every now and then (in addition to the number of issues that are regularly opened here), so I would say the opposite is true:  the fact that the styles _aren't_ copied over is the unexpected behavior.

> If copying the CSS is the behavior you want, we recommend you use mixins for that, as they're the language construct that explicitly supports copying.

Until we get mixin interpolation or the ability to pass a mixin as an argument to another mixin, this isn't a reasonable solution in some instances.  I get that you don't want to change how `@extend` behaves, so what about adding a `@copy` construct?
",cimmanon,media
640,2013-04-17 14:39:22,"> In order to support cross-@media extend, actual CSS rules would have to be copied and moved, which is unexpected and contrary to the way @extend behaves in every other circumstances. In addition, it can cause unexpected changes in specificity to the CSS output.

I don't buy this one bit.  ""Why can't I `@extend` within using media queries"" is a question that pops up on SO every now and then (in addition to the number of issues that are regularly opened here), so I would say the opposite is true:  the fact that the styles _aren't_ copied over is the unexpected behavior.

> If copying the CSS is the behavior you want, we recommend you use mixins for that, as they're the language construct that explicitly supports copying.

Until we get mixin interpolation or the ability to pass a mixin as an argument to another mixin, this isn't a reasonable solution in some instances.  I get that you don't want to change how `@extend` behaves, so what about adding a `@copy` construct?
",cimmanon,copy
640,2013-04-17 21:35:53,"> I think the problem here is that while we can't extend an outer class from within a media query, inner classes (inside a query or nest) are extended along with outer ones when an `@extend` is applied in an outer context. So while we can't extend freely between contexts, we have no way to keep them completely separate either (other than namespacing the classes we want to extend), which makes `@extend` more trouble than its worth.

This isn't a problem; this is exactly how `@extend` is supposed to work. When you're extending a selector, you're saying that the extender should be styled as though it matches the extendee. If `.serious-error` extends `.error`, then `<p class=""serious-error"">` should be styled according to `p.error`. To do otherwise violates the fundamental purpose of `@extend`.

You shouldn't think about `@extend` in terms of the way it transforms the stylesheet. Its behavior in `@media` queries unfortunately forces some awareness of this, but in general you should think of it in terms of its motivating semantics.

> I don't buy this one bit.  ""Why can't I `@extend` within using media queries"" is a question that pops up on SO every now and then (in addition to the number of issues that are regularly opened here), so I would say the opposite is true:  the fact that the styles _aren't_ copied over is the unexpected behavior.

Users have two mutually unsatisfiable expectations. They expect `@extend` to adhere to its semantics within `@media`, and they expect it to generate a limited amount of CSS. We chose to throw an error when these two expectations came into conflict rather than silently failing to fulfill the second expectation. We did this because an error makes it visible that something undesirable is happening and gives the user the ability to explicitly decide to work around it, which is better than having their CSS silently balloon in size.

> Until we get mixin interpolation or the ability to pass a mixin as an argument to another mixin, this isn't a reasonable solution in some instances.  I get that you don't want to change how `@extend` behaves, so what about adding a `@copy` construct?

Mixin interpolation is coming.
",nex3,extend
640,2013-04-17 21:35:53,"> I think the problem here is that while we can't extend an outer class from within a media query, inner classes (inside a query or nest) are extended along with outer ones when an `@extend` is applied in an outer context. So while we can't extend freely between contexts, we have no way to keep them completely separate either (other than namespacing the classes we want to extend), which makes `@extend` more trouble than its worth.

This isn't a problem; this is exactly how `@extend` is supposed to work. When you're extending a selector, you're saying that the extender should be styled as though it matches the extendee. If `.serious-error` extends `.error`, then `<p class=""serious-error"">` should be styled according to `p.error`. To do otherwise violates the fundamental purpose of `@extend`.

You shouldn't think about `@extend` in terms of the way it transforms the stylesheet. Its behavior in `@media` queries unfortunately forces some awareness of this, but in general you should think of it in terms of its motivating semantics.

> I don't buy this one bit.  ""Why can't I `@extend` within using media queries"" is a question that pops up on SO every now and then (in addition to the number of issues that are regularly opened here), so I would say the opposite is true:  the fact that the styles _aren't_ copied over is the unexpected behavior.

Users have two mutually unsatisfiable expectations. They expect `@extend` to adhere to its semantics within `@media`, and they expect it to generate a limited amount of CSS. We chose to throw an error when these two expectations came into conflict rather than silently failing to fulfill the second expectation. We did this because an error makes it visible that something undesirable is happening and gives the user the ability to explicitly decide to work around it, which is better than having their CSS silently balloon in size.

> Until we get mixin interpolation or the ability to pass a mixin as an argument to another mixin, this isn't a reasonable solution in some instances.  I get that you don't want to change how `@extend` behaves, so what about adding a `@copy` construct?

Mixin interpolation is coming.
",nex3,media
640,2013-04-17 21:35:53,"> I think the problem here is that while we can't extend an outer class from within a media query, inner classes (inside a query or nest) are extended along with outer ones when an `@extend` is applied in an outer context. So while we can't extend freely between contexts, we have no way to keep them completely separate either (other than namespacing the classes we want to extend), which makes `@extend` more trouble than its worth.

This isn't a problem; this is exactly how `@extend` is supposed to work. When you're extending a selector, you're saying that the extender should be styled as though it matches the extendee. If `.serious-error` extends `.error`, then `<p class=""serious-error"">` should be styled according to `p.error`. To do otherwise violates the fundamental purpose of `@extend`.

You shouldn't think about `@extend` in terms of the way it transforms the stylesheet. Its behavior in `@media` queries unfortunately forces some awareness of this, but in general you should think of it in terms of its motivating semantics.

> I don't buy this one bit.  ""Why can't I `@extend` within using media queries"" is a question that pops up on SO every now and then (in addition to the number of issues that are regularly opened here), so I would say the opposite is true:  the fact that the styles _aren't_ copied over is the unexpected behavior.

Users have two mutually unsatisfiable expectations. They expect `@extend` to adhere to its semantics within `@media`, and they expect it to generate a limited amount of CSS. We chose to throw an error when these two expectations came into conflict rather than silently failing to fulfill the second expectation. We did this because an error makes it visible that something undesirable is happening and gives the user the ability to explicitly decide to work around it, which is better than having their CSS silently balloon in size.

> Until we get mixin interpolation or the ability to pass a mixin as an argument to another mixin, this isn't a reasonable solution in some instances.  I get that you don't want to change how `@extend` behaves, so what about adding a `@copy` construct?

Mixin interpolation is coming.
",nex3,copy
640,2013-09-09 15:20:57,"**Update.**

I've added a cleaner and simpler version of ""The Workaround"" here:
[Extending within the @media directive](https://github.com/nex3/sass/issues/915)

---
",jakob-e,media
634,2013-01-21 05:19:03,"It would be really great if `!important` could be attached to a mixin/function when it's being called rather than having to work it into the mixin/function e.g.

`@include font-size(20) !important;`
",chris-pearce,include
631,2013-02-02 01:37:12,"It's also possible that we should treat `custom()` as a faux-string-boundary, like we do `calc()` and other functions with unusual syntaxes. That has the downside of being unable to include variables and other script literally within `custom()`, though. @chriseppstein, what do you think?
",nex3,chriseppstein
630,2013-01-17 00:02:02,"Twitter Bootstrap has (of course) grid related classes, .span1, .span2, etc... It also has selector statements such as `[class*=""span""]`. When I have a ID-based selector and include `@extend .span<a number>;` as a rule, the resulting CSS doesn't include the latter.

Per @nex3 this is currently not possible but if it doesn't require ridiculous parser gymnastics would be awesome because it would make these two features much more powerful.
",billsaysthis,extend
630,2013-01-17 00:02:02,"Twitter Bootstrap has (of course) grid related classes, .span1, .span2, etc... It also has selector statements such as `[class*=""span""]`. When I have a ID-based selector and include `@extend .span<a number>;` as a rule, the resulting CSS doesn't include the latter.

Per @nex3 this is currently not possible but if it doesn't require ridiculous parser gymnastics would be awesome because it would make these two features much more powerful.
",billsaysthis,nex3
627,2013-01-14 17:54:46,"I am working on creating some functions that handle various math equations, and in working on an exponential function I have found a rather odd Math error.



On higher value test (like at exp(64)) the line `@debug line $result == ( $result + $increment);` results in true, which simply makes no sense. Anyone have any idea why this particular math fails? The funny part in my mind, is that I've seen SASS handle far larger numbers without issue. Any ideas?
",nathancrank,debug
626,2013-01-13 21:00:56,"I do think it's incongruous from a user's perspective why they can interpolate a placeholder selector for extend but not for mixin & function definitions and calls. It seems like we can add interpolation for @include and @mixin fairly easily. However, function calls are trickier and I think it may be better to have a generic `call($function-name, $arglist...)` function that can be used to call a function with the provided arguments.
",chriseppstein,include
626,2013-01-13 21:00:56,"I do think it's incongruous from a user's perspective why they can interpolate a placeholder selector for extend but not for mixin & function definitions and calls. It seems like we can add interpolation for @include and @mixin fairly easily. However, function calls are trickier and I think it may be better to have a generic `call($function-name, $arglist...)` function that can be used to call a function with the provided arguments.
",chriseppstein,mixin
626,2013-03-11 12:15:31,"@lunelson Interpolating a @media string (which gets printed straight out to CSS) and interpolating a mixin call (which then needs to dynamically call another piece of code) are very different processes, so it shouldn't be too surprising that it didn't work (especially considering you can't interpolate variables or functions either).

As stated above by @chriseppstein, he thinks that they'll be able in do interpolation for mixins with the current `@include` syntax and he and @nex3 have agreed they like the `call` syntax for functions, I don't think we need to confuse the issue w/more proposed syntaxes.
",Snugug,include
626,2013-03-11 12:15:31,"@lunelson Interpolating a @media string (which gets printed straight out to CSS) and interpolating a mixin call (which then needs to dynamically call another piece of code) are very different processes, so it shouldn't be too surprising that it didn't work (especially considering you can't interpolate variables or functions either).

As stated above by @chriseppstein, he thinks that they'll be able in do interpolation for mixins with the current `@include` syntax and he and @nex3 have agreed they like the `call` syntax for functions, I don't think we need to confuse the issue w/more proposed syntaxes.
",Snugug,media
626,2013-03-11 13:14:57,"Thanks @Snugug, I see your point and I missed @chriseppstein's mention concerning `@include` above. All good then, glad to hear it.
",lunelson,include
626,2013-06-24 16:46:26,"After thinking about this more, I don't really like the idea of adding interpolation support to mixin names. I dislike interpolation and only ever want to use it when there is no way of doing a more readable syntax. For example, I find this to be less readable than some of the options I demonstrate below:



Since, we have full control over what is a valid syntax for `@include`, I don't see a need to resort to a syntax hack. So I would like to consider some different syntax options. Som options that come to mind:
1. `@include $some-mixin with ($arg1, $arg2)` -- Any expression that evaluates to a string could be used before the `with` keyword. I think a space after the `with` would be optional. However if the `with` clause is optional for mixins with no arguments (as opposed to `with ()` -- which I dislike), this has a degenerative ambiguity where the expression is a simple identifier. So that leads me to think we need some sort of token early on in the mixin expression.
2. `@include mixin $some-mixin with ($arg1, $arg2)` -- What i don't like about this is that it makes include seem like it could include things that aren't mixins, but it does allow the `with` clause to be omitted for mixins with no arguments. This syntax can be parsed with only a single token look-ahead to disambiguate it from an include of a mixin named `mixin`.

Thoughts?
",chriseppstein,include
626,2013-06-24 17:18:52,"Most of the desire to use interpolation on mixins/functions stems from the fact that they are not first-class entities (ie. they can't be passed as arguments to other mixins/functions).  If mixins should become a first-class entity, we'll have to have some way of expressing that anyway, even if adding interpolation wasn't on the table.

Snugug's proposed `@include $my-mixin` syntax seems the simplest, most logical way to go and would be an easy concept for non-programmers to grasp.
",cimmanon,include
626,2013-06-24 17:27:32,"@Snugug @cimmanon The issue here is that using a variable is not forced. Any valid SassScript expression would be allowed, including no indirection at all. So any syntax we choose must allow for a bare identifier to be unambiguous. This is the case for `@include $my-mixin`, but this implies that `@include $my-mixin($a, $b)` or `@include some-fn-that-returns-a-mixin-name($asdf)($a, $b)` would be valid, but they make me a bit squeemish.
",chriseppstein,include
626,2013-06-24 18:00:11,"Regarding #366, that syntax is simply sugar to support a common use case, but as I envision it, it does not express the full power of the `@include` directive. As such, it's just a shortcut parsing scheme for generating an include directive and it could support interpolation like properties do, since the goal of that syntax is to be more property-like. So I don't consider this decision to be linked to that one.

Forcing the use of a variable is unnecessary and arbitrary -- the only places we do that are where the variable is an L-Value (being assigned to).

And I don't agree that interpolation is a better option than the one I specified above. It's a jumble of curly braces and hash signs and it's hard to read. I don't see a need to escape our own syntax. CSS is a verbose language and we do not need to be terse here. I think the include syntax for dynamic mixin names can and should more closely resemble the `@for` directive.
",chriseppstein,for
626,2013-06-24 18:00:11,"Regarding #366, that syntax is simply sugar to support a common use case, but as I envision it, it does not express the full power of the `@include` directive. As such, it's just a shortcut parsing scheme for generating an include directive and it could support interpolation like properties do, since the goal of that syntax is to be more property-like. So I don't consider this decision to be linked to that one.

Forcing the use of a variable is unnecessary and arbitrary -- the only places we do that are where the variable is an L-Value (being assigned to).

And I don't agree that interpolation is a better option than the one I specified above. It's a jumble of curly braces and hash signs and it's hard to read. I don't see a need to escape our own syntax. CSS is a verbose language and we do not need to be terse here. I think the include syntax for dynamic mixin names can and should more closely resemble the `@for` directive.
",chriseppstein,include
626,2013-06-24 18:10:06,"Maybe where I'm getting caught up is the additions to the `@include` syntax proposed to allow for this to happen with, to me, don't feel right. Maybe the answer is a new directive so we have full control over it, something like `@call`? That way, this would work closer to how #812 works? So something like the following:



I'd even be happy with `@call mixin baz‚Ä¶` instead of just `@call baz` if that meant that there was a SassScript API of some sorts of creating new literals.
",Snugug,call
626,2013-06-24 18:10:06,"Maybe where I'm getting caught up is the additions to the `@include` syntax proposed to allow for this to happen with, to me, don't feel right. Maybe the answer is a new directive so we have full control over it, something like `@call`? That way, this would work closer to how #812 works? So something like the following:



I'd even be happy with `@call mixin baz‚Ä¶` instead of just `@call baz` if that meant that there was a SassScript API of some sorts of creating new literals.
",Snugug,include
626,2013-06-24 19:39:26,"I don't think a completely different directive is warranted to accomplish this. It's still just an include of a mixin. If I'm reading a file and I see `@call` and I don't know what it is and I have to go study it. If I see a slightly different way of using `@include` I can correctly infer what is going on without having been taught it.
",chriseppstein,call
626,2013-06-24 19:39:26,"I don't think a completely different directive is warranted to accomplish this. It's still just an include of a mixin. If I'm reading a file and I see `@call` and I don't know what it is and I have to go study it. If I see a slightly different way of using `@include` I can correctly infer what is going on without having been taught it.
",chriseppstein,include
626,2013-06-24 19:44:09,"I'm not entirely sure I agree with the later part of your statement. If I saw `@include mixin $foo` as a green user, I'd be confused why I needed to tell the interface that's used for using mixins that I'm using a mixin.
",Snugug,include
626,2013-06-24 19:57:00,"Is there a way for us to solve both use cases presented with the current @include syntax? A semantic suffix works when there is an arglist, but not when there isn't. A semantic prefix works without an arglist, but makes it appar as if there could be more to `@import`. What about a flag of some sorts like is being used for `@extend`?



Possible options for `!flag` could be:
- `!optional`
- `!dynamic`
- `!call`
- `!eval`
",Snugug,extend
626,2013-06-24 19:57:00,"Is there a way for us to solve both use cases presented with the current @include syntax? A semantic suffix works when there is an arglist, but not when there isn't. A semantic prefix works without an arglist, but makes it appar as if there could be more to `@import`. What about a flag of some sorts like is being used for `@extend`?



Possible options for `!flag` could be:
- `!optional`
- `!dynamic`
- `!call`
- `!eval`
",Snugug,include
626,2013-06-24 19:57:00,"Is there a way for us to solve both use cases presented with the current @include syntax? A semantic suffix works when there is an arglist, but not when there isn't. A semantic prefix works without an arglist, but makes it appar as if there could be more to `@import`. What about a flag of some sorts like is being used for `@extend`?



Possible options for `!flag` could be:
- `!optional`
- `!dynamic`
- `!call`
- `!eval`
",Snugug,import
626,2013-06-24 20:14:17,"@chriseppstein Unless the user is _really_ confused, I highly doubt anyone is going to believe that `@include` can be used on anything other than a mixin.  Other languages seem to do just fine without adding new language constructs for functions vs variables containing functions.

It's been quite a while since I've used PHP, but this _should_ work (also note that passing functions around as arguments to other function is done with the function name as a string, or at least it used to be).



JavaScript that we all know and love...



I've been using Haskell in my day to day programming for the past year or so and there's no differentiation between ""variable"" and ""function"" (partially because there's no such thing as variables in Haskell), everything is an expression.



If I try to pass an argument to an expression that takes no arguments (eg. `foo False`), then the compiler informs me that I'm doing it wrong.
",cimmanon,include
626,2013-06-26 00:03:39,"@robwierzbowski I had two concerns with that:
1. it obviously precludes defining a mixin named `mixin`. I'm not super worried about this one. as the same issue exists for the `call` function. However, there's an interesting side note: you _can_ use `call` to call a `call` you've defined yourself.
2. Maybe it's mental baggage, but imagining a function that calls my function and returns the value it returns seems nice and tidy because the forms of the two are so similar. But with mixins, the presence of `@include` makes the word `mixin` seem like it's not the same thing as a mixin. But try as I might, I keep not finding any rational explanation for this feeling.

So maybe it's ok. Thoughts, @nex3?
",chriseppstein,include
626,2013-06-26 16:26:59,"However, I'd say perhaps allow straight interpolation anyway? i.e. `@include #{$foo}($x,$y)`‚Äîfor the sake of dryness‚Äîeven if the recommended and documented implementation uses keywords?
",lunelson,include
626,2013-06-26 16:33:56,"The more I see `@include mixin $foo [with (arglist)]`, I'm generally OK with it, but I'd have to agree with @lunelson that, while I'm OK with it, it doesn't seem as elegant a solution as interpolation (which I know you dislike). All of the suggestions presented, including the functions presented by @robwierzbowski and the flag syntax I proposed, while are good alternative syntaxes, do not provide the same instantly-understandable interpolation syntax that, especially for system developers like us, we're very use to needing to do it currently. 

In the end, while I'm just generally going to be ecstatic with getting this feature in, maybe we don't have to push so hard for a new syntax? But that's me.

Also, very interested in @nex3's thoughts.
",Snugug,include
626,2013-06-26 17:01:43,"just did a quick catch-up on this. I'm sure I missed nuance. 

`@include mixin $foo with ($x, $y);` seems like the clearest and easiest to learn syntax put forth. I'd be happy with that. 
",codingdesigner,include
626,2013-06-26 17:20:06,"I‚Äôm ok with this. Seems like `mixin` is implied by `@include` and the args are implied by standard mixin syntax but sounds like there are some technical limitations to that.
",scottkellum,include
626,2013-06-26 17:25:01,"I'm down with `@include mixin $foo with ($x, $y)` as well. If the `mixin` part could be dropped, even better, but if not no problem.
",robwierzbowski,include
626,2013-06-27 17:41:01,"Call me a little crazy, just putting this out there, feel free to put it right back. 

But `@include mixin $foo with ($x, $y)` at first glance from a newb/tutorial perspective is a little confusing. As it currently stands, the name of a mixin is out there without any special characteristics other then being preceded by `@mixin`, `@include` or alternatively `+` or `=`.

As we all know, as of now `mixin` is not a reserved word, it is perfectly legal for me to create a mixin called 'mixin', although is looks pretty stupid, it happens.

Seeing something, like the following, knowing the rules that currently regulate the language, I would assume that I can replace `mixin` with any other 'mixin' name I create. The passing in a variable with arguments is an entirely new construct I would need to learn/understand.  



The interpolation syntax is a little loud and in some cases difficult to read. But any developer looking at this can quickly deduce what is happening as String interpolation is very common. And in this case, I can see very clearly that the result of what is happening is that the string being pulled from the variable is being put in place of the mixin statement and then arguments being applied to said mixin. 



or



Coming into this conversation late is an interesting perspective as I can see all sides of the argument. The one thing that really jumps out at me is Chris' statement **""We've rejected interpolation for variables. Instead, we're adding a map data structure in 3.3.""** 

What does this look like and is there a way to marry these concepts together?
",blackfalcon,include
626,2013-06-27 17:41:01,"Call me a little crazy, just putting this out there, feel free to put it right back. 

But `@include mixin $foo with ($x, $y)` at first glance from a newb/tutorial perspective is a little confusing. As it currently stands, the name of a mixin is out there without any special characteristics other then being preceded by `@mixin`, `@include` or alternatively `+` or `=`.

As we all know, as of now `mixin` is not a reserved word, it is perfectly legal for me to create a mixin called 'mixin', although is looks pretty stupid, it happens.

Seeing something, like the following, knowing the rules that currently regulate the language, I would assume that I can replace `mixin` with any other 'mixin' name I create. The passing in a variable with arguments is an entirely new construct I would need to learn/understand.  



The interpolation syntax is a little loud and in some cases difficult to read. But any developer looking at this can quickly deduce what is happening as String interpolation is very common. And in this case, I can see very clearly that the result of what is happening is that the string being pulled from the variable is being put in place of the mixin statement and then arguments being applied to said mixin. 



or



Coming into this conversation late is an interesting perspective as I can see all sides of the argument. The one thing that really jumps out at me is Chris' statement **""We've rejected interpolation for variables. Instead, we're adding a map data structure in 3.3.""** 

What does this look like and is there a way to marry these concepts together?
",blackfalcon,mixin
626,2013-06-28 14:49:31,"@lunelson It's not just ""less pretty"". It's complete jibberish and it's the kind of thing that in aggregate makes Sass unapproachable to inexperienced developers. We don't use interpolation like that for any Sass construct. In all cases, interpolation is a way for Sass to inject itself on top of existing CSS syntax.

@blackfalcon The map data structure is discussed in #642 and I don't know what you mean by ""marry these concepts together"". Regarding the indented syntax, I have to admit that I don't like the direct translation of the shorthand include notation for this proposal and I think we'd just require use of the full `@include` in the indented syntax to get dynamic evaluation of mixin names.
",chriseppstein,include
626,2013-06-28 20:48:39,"@chriseppstein I didn't mean to provoke, I was simply acknowledging that one might validly object to how it looks. However I dont' think it's jibberish either. I think devs who need this feature will find it readable. 

That being said I see your point re: interpolating of CSS declarations vs interpolating of Sass directives in terms of logical consistency; but if one decides that this is not a place to use string interpolation, then consider whether variables should be allowed directly, e.g. `@include $foo($x, $y);` (which is just your syntax with the keywords removed): if that doesn't seem right to you, then doesn't it suggest that interpolation is sensible?
",lunelson,include
626,2013-07-01 15:39:04,"Hmm, `with no arguments` seems a bit clunky to me  

On Monday, July 1, 2013 at 11:36 AM, Chris Eppstein wrote:

> Another option to avoid a leading keyword: Require a with keyword following the name expression for dynamic includes even when there is no argument. E.g.:
> @include <name expression> with no arguments;  
> 
> or
> @include <name expression> with ();  
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/626#issuecomment-20289734).
",Snugug,include
626,2013-07-19 12:31:46,"There's no harm in just defining both the placeholder and the mixin. Only
the one you use will be in the output and no indirection is necessary.

Chris

On Friday, July 19, 2013, John Slegers wrote:

> Sorry for the duplicate
> 
> I'm currently working on a metaframework in Sass where I wanted to
> implement something like this (nevermind the syntax) :
> 
> @mixin setComponent($component, $rules : (), $components : ()) {
>   @if $extendComponents == true {
>     %#{$component} {
>       @include rules($rules);
>       @include components($components);
>     }
>   } @else {
>     @mixin #{$component} {
>       @include rules($rules);
>       @include components($components);
>     }
>   }
> }
> 
> @mixin getComponent($component) {
>   @if $extendComponents == true {
>     @extend %#{$component};
>   } @else {
>     @include #{$component};
>   }
> }
> 
> @include setComponent(
>   component-block,
>   (
>     (display,block)
>   )
> );
> @include setComponent(
>   component-gutter,
>   (
>     (padding,10px)
>   )
> );
> @include setComponent(
>   component-gutter-block,
>   (
>   ),
>   (
>     (component-block),
>     (component-gutter)
>   )
> );
> 
> .cell {
>   @include getComponent('component-gutter-block');
> }
> 
> For this kind of thing to work, it is quite essential to be able to create
> both extends and mixins dynamicly.
> 
> I was glad to see that dynamic extends work as expected. This construct
> works perfectly :
> 
> %#{$component} {
>      // do something
> }
> 
> Unfortunately, I got stuck with the dynamic mixins. The following gave me
> an error :
> 
> @mixin #{$component} {
>      // do something
> }
> 
> I tried dynamic variables as a workaround, but the following didn't work
> for me either :
> 
> $var1 : parametername;
> $$var1 : 5;
> 
> $var1 : parametername;
> $#{$var1} : 5
> 
> Thusfar, the only workaround I can think of, is to do something like this :
> 
> $dynamicMixins : (
>     (
>         component-block,
>         (
>             (display,block)
>         )
>     ),
>     (
>         component-gutter,
>         (
>             (padding,10px)
>         )
>     ),
>     (
>         component-gutter-block,
>         (
>         ),
>         (
>             (component-block),
>             (component-gutter)
>         )
>     )
> );
> 
> @mixin getDynamicMixin ($component) {
>     @include setParameters(getDynamicMixinPars($component));
> }
> 
> This seems like a very inefficient and convoluted workaround, though,
> which means I'm probably going to skip this feature until dynamic mixins
> are available.
> 
> I can barely wait until they are, though. The meta-programming
> possibilities are endless :-)
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/626#issuecomment-21236740
> .
",chriseppstein,extend
626,2013-07-19 12:31:46,"There's no harm in just defining both the placeholder and the mixin. Only
the one you use will be in the output and no indirection is necessary.

Chris

On Friday, July 19, 2013, John Slegers wrote:

> Sorry for the duplicate
> 
> I'm currently working on a metaframework in Sass where I wanted to
> implement something like this (nevermind the syntax) :
> 
> @mixin setComponent($component, $rules : (), $components : ()) {
>   @if $extendComponents == true {
>     %#{$component} {
>       @include rules($rules);
>       @include components($components);
>     }
>   } @else {
>     @mixin #{$component} {
>       @include rules($rules);
>       @include components($components);
>     }
>   }
> }
> 
> @mixin getComponent($component) {
>   @if $extendComponents == true {
>     @extend %#{$component};
>   } @else {
>     @include #{$component};
>   }
> }
> 
> @include setComponent(
>   component-block,
>   (
>     (display,block)
>   )
> );
> @include setComponent(
>   component-gutter,
>   (
>     (padding,10px)
>   )
> );
> @include setComponent(
>   component-gutter-block,
>   (
>   ),
>   (
>     (component-block),
>     (component-gutter)
>   )
> );
> 
> .cell {
>   @include getComponent('component-gutter-block');
> }
> 
> For this kind of thing to work, it is quite essential to be able to create
> both extends and mixins dynamicly.
> 
> I was glad to see that dynamic extends work as expected. This construct
> works perfectly :
> 
> %#{$component} {
>      // do something
> }
> 
> Unfortunately, I got stuck with the dynamic mixins. The following gave me
> an error :
> 
> @mixin #{$component} {
>      // do something
> }
> 
> I tried dynamic variables as a workaround, but the following didn't work
> for me either :
> 
> $var1 : parametername;
> $$var1 : 5;
> 
> $var1 : parametername;
> $#{$var1} : 5
> 
> Thusfar, the only workaround I can think of, is to do something like this :
> 
> $dynamicMixins : (
>     (
>         component-block,
>         (
>             (display,block)
>         )
>     ),
>     (
>         component-gutter,
>         (
>             (padding,10px)
>         )
>     ),
>     (
>         component-gutter-block,
>         (
>         ),
>         (
>             (component-block),
>             (component-gutter)
>         )
>     )
> );
> 
> @mixin getDynamicMixin ($component) {
>     @include setParameters(getDynamicMixinPars($component));
> }
> 
> This seems like a very inefficient and convoluted workaround, though,
> which means I'm probably going to skip this feature until dynamic mixins
> are available.
> 
> I can barely wait until they are, though. The meta-programming
> possibilities are endless :-)
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/626#issuecomment-21236740
> .
",chriseppstein,if
626,2013-07-19 12:31:46,"There's no harm in just defining both the placeholder and the mixin. Only
the one you use will be in the output and no indirection is necessary.

Chris

On Friday, July 19, 2013, John Slegers wrote:

> Sorry for the duplicate
> 
> I'm currently working on a metaframework in Sass where I wanted to
> implement something like this (nevermind the syntax) :
> 
> @mixin setComponent($component, $rules : (), $components : ()) {
>   @if $extendComponents == true {
>     %#{$component} {
>       @include rules($rules);
>       @include components($components);
>     }
>   } @else {
>     @mixin #{$component} {
>       @include rules($rules);
>       @include components($components);
>     }
>   }
> }
> 
> @mixin getComponent($component) {
>   @if $extendComponents == true {
>     @extend %#{$component};
>   } @else {
>     @include #{$component};
>   }
> }
> 
> @include setComponent(
>   component-block,
>   (
>     (display,block)
>   )
> );
> @include setComponent(
>   component-gutter,
>   (
>     (padding,10px)
>   )
> );
> @include setComponent(
>   component-gutter-block,
>   (
>   ),
>   (
>     (component-block),
>     (component-gutter)
>   )
> );
> 
> .cell {
>   @include getComponent('component-gutter-block');
> }
> 
> For this kind of thing to work, it is quite essential to be able to create
> both extends and mixins dynamicly.
> 
> I was glad to see that dynamic extends work as expected. This construct
> works perfectly :
> 
> %#{$component} {
>      // do something
> }
> 
> Unfortunately, I got stuck with the dynamic mixins. The following gave me
> an error :
> 
> @mixin #{$component} {
>      // do something
> }
> 
> I tried dynamic variables as a workaround, but the following didn't work
> for me either :
> 
> $var1 : parametername;
> $$var1 : 5;
> 
> $var1 : parametername;
> $#{$var1} : 5
> 
> Thusfar, the only workaround I can think of, is to do something like this :
> 
> $dynamicMixins : (
>     (
>         component-block,
>         (
>             (display,block)
>         )
>     ),
>     (
>         component-gutter,
>         (
>             (padding,10px)
>         )
>     ),
>     (
>         component-gutter-block,
>         (
>         ),
>         (
>             (component-block),
>             (component-gutter)
>         )
>     )
> );
> 
> @mixin getDynamicMixin ($component) {
>     @include setParameters(getDynamicMixinPars($component));
> }
> 
> This seems like a very inefficient and convoluted workaround, though,
> which means I'm probably going to skip this feature until dynamic mixins
> are available.
> 
> I can barely wait until they are, though. The meta-programming
> possibilities are endless :-)
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/626#issuecomment-21236740
> .
",chriseppstein,else
626,2013-07-19 12:31:46,"There's no harm in just defining both the placeholder and the mixin. Only
the one you use will be in the output and no indirection is necessary.

Chris

On Friday, July 19, 2013, John Slegers wrote:

> Sorry for the duplicate
> 
> I'm currently working on a metaframework in Sass where I wanted to
> implement something like this (nevermind the syntax) :
> 
> @mixin setComponent($component, $rules : (), $components : ()) {
>   @if $extendComponents == true {
>     %#{$component} {
>       @include rules($rules);
>       @include components($components);
>     }
>   } @else {
>     @mixin #{$component} {
>       @include rules($rules);
>       @include components($components);
>     }
>   }
> }
> 
> @mixin getComponent($component) {
>   @if $extendComponents == true {
>     @extend %#{$component};
>   } @else {
>     @include #{$component};
>   }
> }
> 
> @include setComponent(
>   component-block,
>   (
>     (display,block)
>   )
> );
> @include setComponent(
>   component-gutter,
>   (
>     (padding,10px)
>   )
> );
> @include setComponent(
>   component-gutter-block,
>   (
>   ),
>   (
>     (component-block),
>     (component-gutter)
>   )
> );
> 
> .cell {
>   @include getComponent('component-gutter-block');
> }
> 
> For this kind of thing to work, it is quite essential to be able to create
> both extends and mixins dynamicly.
> 
> I was glad to see that dynamic extends work as expected. This construct
> works perfectly :
> 
> %#{$component} {
>      // do something
> }
> 
> Unfortunately, I got stuck with the dynamic mixins. The following gave me
> an error :
> 
> @mixin #{$component} {
>      // do something
> }
> 
> I tried dynamic variables as a workaround, but the following didn't work
> for me either :
> 
> $var1 : parametername;
> $$var1 : 5;
> 
> $var1 : parametername;
> $#{$var1} : 5
> 
> Thusfar, the only workaround I can think of, is to do something like this :
> 
> $dynamicMixins : (
>     (
>         component-block,
>         (
>             (display,block)
>         )
>     ),
>     (
>         component-gutter,
>         (
>             (padding,10px)
>         )
>     ),
>     (
>         component-gutter-block,
>         (
>         ),
>         (
>             (component-block),
>             (component-gutter)
>         )
>     )
> );
> 
> @mixin getDynamicMixin ($component) {
>     @include setParameters(getDynamicMixinPars($component));
> }
> 
> This seems like a very inefficient and convoluted workaround, though,
> which means I'm probably going to skip this feature until dynamic mixins
> are available.
> 
> I can barely wait until they are, though. The meta-programming
> possibilities are endless :-)
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/626#issuecomment-21236740
> .
",chriseppstein,include
626,2013-07-19 12:31:46,"There's no harm in just defining both the placeholder and the mixin. Only
the one you use will be in the output and no indirection is necessary.

Chris

On Friday, July 19, 2013, John Slegers wrote:

> Sorry for the duplicate
> 
> I'm currently working on a metaframework in Sass where I wanted to
> implement something like this (nevermind the syntax) :
> 
> @mixin setComponent($component, $rules : (), $components : ()) {
>   @if $extendComponents == true {
>     %#{$component} {
>       @include rules($rules);
>       @include components($components);
>     }
>   } @else {
>     @mixin #{$component} {
>       @include rules($rules);
>       @include components($components);
>     }
>   }
> }
> 
> @mixin getComponent($component) {
>   @if $extendComponents == true {
>     @extend %#{$component};
>   } @else {
>     @include #{$component};
>   }
> }
> 
> @include setComponent(
>   component-block,
>   (
>     (display,block)
>   )
> );
> @include setComponent(
>   component-gutter,
>   (
>     (padding,10px)
>   )
> );
> @include setComponent(
>   component-gutter-block,
>   (
>   ),
>   (
>     (component-block),
>     (component-gutter)
>   )
> );
> 
> .cell {
>   @include getComponent('component-gutter-block');
> }
> 
> For this kind of thing to work, it is quite essential to be able to create
> both extends and mixins dynamicly.
> 
> I was glad to see that dynamic extends work as expected. This construct
> works perfectly :
> 
> %#{$component} {
>      // do something
> }
> 
> Unfortunately, I got stuck with the dynamic mixins. The following gave me
> an error :
> 
> @mixin #{$component} {
>      // do something
> }
> 
> I tried dynamic variables as a workaround, but the following didn't work
> for me either :
> 
> $var1 : parametername;
> $$var1 : 5;
> 
> $var1 : parametername;
> $#{$var1} : 5
> 
> Thusfar, the only workaround I can think of, is to do something like this :
> 
> $dynamicMixins : (
>     (
>         component-block,
>         (
>             (display,block)
>         )
>     ),
>     (
>         component-gutter,
>         (
>             (padding,10px)
>         )
>     ),
>     (
>         component-gutter-block,
>         (
>         ),
>         (
>             (component-block),
>             (component-gutter)
>         )
>     )
> );
> 
> @mixin getDynamicMixin ($component) {
>     @include setParameters(getDynamicMixinPars($component));
> }
> 
> This seems like a very inefficient and convoluted workaround, though,
> which means I'm probably going to skip this feature until dynamic mixins
> are available.
> 
> I can barely wait until they are, though. The meta-programming
> possibilities are endless :-)
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/626#issuecomment-21236740
> .
",chriseppstein,mixin
626,2013-12-26 14:11:19,"Having recently written my first code using the new `call()` functionality of 3.3, I'd like to revisit this as I truly love how dynamic it makes my libraries.

I firmly believe that mixin interpolation is a must-have feature for Sass, so we should work out defining a syntax we're al happy with. So far, the two front runners seem to be interpolation and `@include mixin()`. Having worked with `call()` and having come up with `@include mixin` this morning only to see that @robwierzbowski and I have already mentioned it before, I believe that's the way to go.

To go back to earlier concerns, yes it has the potential to look like a function call, but all mixins run that issue. I, however, don't see that issue. Instead, I see the semantics as read; include a mixin named X with arguments Y and Z which is pretty much identical to how an include statement reads now. It also has the advantage of sharing the syntax meaning anything you'd expect to be able to do with a mixin you can without changing any of your syntax.

Thoughts again I guess @chriseppstein and @nex3?
",Snugug,include
626,2014-03-30 18:07:15,"I still think as I did 9 months ago that `@include ($foo, $x, $y)` is the clearest and simplest of these options, and close to what we see with media queries, e.g. `@media (min-width: 20em)` FWIW, so not really weird looking. In this approach, the `@include` directive would either take a keyword, or not. If no keyword is given, the name of the mixin is assumed to be the first argument in the arglist. Thus the two would be equal:


",lunelson,media
626,2014-03-30 18:07:15,"I still think as I did 9 months ago that `@include ($foo, $x, $y)` is the clearest and simplest of these options, and close to what we see with media queries, e.g. `@media (min-width: 20em)` FWIW, so not really weird looking. In this approach, the `@include` directive would either take a keyword, or not. If no keyword is given, the name of the mixin is assumed to be the first argument in the arglist. Thus the two would be equal:


",lunelson,include
626,2014-03-30 18:21:16,"However, I find myself realizing again why I still prefer interpolation to any of these ""call""-like variants, which is simply that `$foo` is not equal to `@mixin bar`, it is only equal to the string `'bar', and with interpolation this fact is always clearly implied. These other approaches might seem more readable/less ugly, but I think logically they are less clear than a string-interpolated statement.
",lunelson,mixin
626,2014-10-02 16:35:40,"@lunelson Ok. I retract ""I don't like that this directive now looks like a function call, where all the others look like statements."" This is the best option we have.

I support adding

`@include ($mixin-name, $arg-list...)`

and a corresponding syntax for defining mixins:

`@mixin ($mixin-name, <arglist definition>)`

@nex3 what say you?
",chriseppstein,include
626,2014-10-02 16:35:40,"@lunelson Ok. I retract ""I don't like that this directive now looks like a function call, where all the others look like statements."" This is the best option we have.

I support adding

`@include ($mixin-name, $arg-list...)`

and a corresponding syntax for defining mixins:

`@mixin ($mixin-name, <arglist definition>)`

@nex3 what say you?
",chriseppstein,mixin
626,2014-10-02 16:40:22,"Would arglist allow for named arguments? I think, especially for mixins, that they'd important

> On Oct 2, 2014, at 12:35 PM, Chris Eppstein notifications@github.com wrote:
> 
> @lunelson Ok. I retract ""I don't like that this directive now looks like a function call, where all the others look like statements."" This is the best option we have.
> 
> I support adding
> 
> @include ($mixin-name, $arg-list...)
> 
> and a corresponding syntax for defining mixins:
> 
> @mixin ($mixin-name, <arglist definition>)
> 
> @nex3 what say you?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,include
626,2014-10-02 16:40:22,"Would arglist allow for named arguments? I think, especially for mixins, that they'd important

> On Oct 2, 2014, at 12:35 PM, Chris Eppstein notifications@github.com wrote:
> 
> @lunelson Ok. I retract ""I don't like that this directive now looks like a function call, where all the others look like statements."" This is the best option we have.
> 
> I support adding
> 
> @include ($mixin-name, $arg-list...)
> 
> and a corresponding syntax for defining mixins:
> 
> @mixin ($mixin-name, <arglist definition>)
> 
> @nex3 what say you?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,mixin
626,2014-10-02 16:43:50,"@Snugug yes, we support this now if you pass arglist as a map. You can pass positional and keyword args as `@include foo($args..., $kw-arg-map...)` since 3.3.
",chriseppstein,include
626,2014-10-11 14:50:36,"@chriseppstein it seems to me a use-case for dynamically creating mixins would be passing a `@content` block from the running mixin to the one that's being created‚Äîsort of a 'factory' mixin if you will. 
However, this would require that the `@content` be passed on as SassScript and not be evaluated... only evaluated later, at the runtime of the new `@mixin`. Thoughts?
",lunelson,content
626,2014-10-11 14:50:36,"@chriseppstein it seems to me a use-case for dynamically creating mixins would be passing a `@content` block from the running mixin to the one that's being created‚Äîsort of a 'factory' mixin if you will. 
However, this would require that the `@content` be passed on as SassScript and not be evaluated... only evaluated later, at the runtime of the new `@mixin`. Thoughts?
",lunelson,mixin
626,2014-10-11 14:54:47,"P.S. `@content` complexities related discussion https://github.com/sass/sass/issues/871
",lunelson,content
626,2014-10-17 01:30:59,"@thejase If it's a statement that starts with `@include`, it's a mixin; if it's an expression, it's a function.
",nex3,include
626,2014-11-26 10:14:56,"And what's about with
@include call(my-mixin, $args...) {...} 

When we can able to use it?
",reactivestudio,include
626,2014-12-15 15:05:03,"@Undistraction you can currently do [`call($name, $args...)`](http://sass-lang.com/documentation/Sass/Script/Functions.html#call-instance_method), so dynamic function calls are possible.

@nex3 I like `@include call($name, $args...)` and agree that mirroring the function syntax would be good.
",Snugug,include
626,2015-01-30 00:45:52,"I don't feel strongly about dynamic mixin definitions. I understand the desire to be similar to call for dynamic functions. But I think `@include mixin($mixin-name, $arglist...)` reads better.
",chriseppstein,include
626,2015-01-30 21:30:03,"@chriseppstein If you strongly prefer that to `@include include()` or `@include call()` I could be persuaded.
",nex3,include
626,2015-01-30 23:06:33,"@nex3 Well my preference was for `@include ($mixin-name, $arglist...)` but if we have to have a special mixin name then of those three, I feel `mixin` is by far the most readable.
",chriseppstein,include
626,2015-03-29 18:51:19,"+1 @chriseppstein suggestion `@include ($mixin-name, $arglist...)` reads better.
",mtpultz,include
626,2015-09-01 08:48:37,"I would agree with @chriseppstein: including mixins dynamic doesn't need to be similar to invoking functions dynamically.

Indeed, the `@include` part is already very explicit about what you are doing and what is going on ‚Äì when invoking functions doesn't involve such a keyword. I do think it is more intuitive if the syntax looks similar to including mixins regularly, by passing arguments inside of parentheses.

Therefore,  the `@include mixin($mixin-name, $args..);` seems the most readable and intuitive to me. And it actually _does_ look similar to invoking functions dynamically, since you pass the mixin's name as first argument, just like you do with the `call` function.

So, +1 for `@include mixin($mixin-name, $args..);`. Looking forward to see this feature in Sass!
",yoannisj,include
626,2015-09-11 20:43:25,"I think we're both reasonably happy with `@include mixin()`.
",nex3,include
626,2015-12-07 17:29:01,"Hi, Is this feature getting added any time soon? I have recently stumbled upon some annoying circumstances I can't seem to get around due to this issue. 

I have a mixin which needs to call another mixin based on its arguments 

@mixin keyframes($name, $strength) {
  @if $name == bounce {
    @include bounce($strength);
  }
  @elseif $name == bounceIn {
    @include bounceIn($strength);
  }
  @elseif $name == bounceInDown {
    @include bounceInDown($strength);
  }
  @elseif $name == bounceInLeft {
    @include bounceInLeft($strength);
  }
}

what I would like to have is :
@mixin keyframes($name, $strength) {
    @include #{$name}($strength);
  }

I currently have a list of 70 of these if/else statements and was hoping to do it with a loop to reduce this very long if statement? 

Anybody know another way of doing this or is it not possible until this issue has been resolved?
",georgeevans1995,elseif
626,2015-12-07 17:29:01,"Hi, Is this feature getting added any time soon? I have recently stumbled upon some annoying circumstances I can't seem to get around due to this issue. 

I have a mixin which needs to call another mixin based on its arguments 

@mixin keyframes($name, $strength) {
  @if $name == bounce {
    @include bounce($strength);
  }
  @elseif $name == bounceIn {
    @include bounceIn($strength);
  }
  @elseif $name == bounceInDown {
    @include bounceInDown($strength);
  }
  @elseif $name == bounceInLeft {
    @include bounceInLeft($strength);
  }
}

what I would like to have is :
@mixin keyframes($name, $strength) {
    @include #{$name}($strength);
  }

I currently have a list of 70 of these if/else statements and was hoping to do it with a loop to reduce this very long if statement? 

Anybody know another way of doing this or is it not possible until this issue has been resolved?
",georgeevans1995,if
626,2015-12-07 17:29:01,"Hi, Is this feature getting added any time soon? I have recently stumbled upon some annoying circumstances I can't seem to get around due to this issue. 

I have a mixin which needs to call another mixin based on its arguments 

@mixin keyframes($name, $strength) {
  @if $name == bounce {
    @include bounce($strength);
  }
  @elseif $name == bounceIn {
    @include bounceIn($strength);
  }
  @elseif $name == bounceInDown {
    @include bounceInDown($strength);
  }
  @elseif $name == bounceInLeft {
    @include bounceInLeft($strength);
  }
}

what I would like to have is :
@mixin keyframes($name, $strength) {
    @include #{$name}($strength);
  }

I currently have a list of 70 of these if/else statements and was hoping to do it with a loop to reduce this very long if statement? 

Anybody know another way of doing this or is it not possible until this issue has been resolved?
",georgeevans1995,include
626,2015-12-07 17:29:01,"Hi, Is this feature getting added any time soon? I have recently stumbled upon some annoying circumstances I can't seem to get around due to this issue. 

I have a mixin which needs to call another mixin based on its arguments 

@mixin keyframes($name, $strength) {
  @if $name == bounce {
    @include bounce($strength);
  }
  @elseif $name == bounceIn {
    @include bounceIn($strength);
  }
  @elseif $name == bounceInDown {
    @include bounceInDown($strength);
  }
  @elseif $name == bounceInLeft {
    @include bounceInLeft($strength);
  }
}

what I would like to have is :
@mixin keyframes($name, $strength) {
    @include #{$name}($strength);
  }

I currently have a list of 70 of these if/else statements and was hoping to do it with a loop to reduce this very long if statement? 

Anybody know another way of doing this or is it not possible until this issue has been resolved?
",georgeevans1995,mixin
626,2015-12-08 14:31:51,"+1 - in whatever syntax

I would prefer:



Here's some thoughts why:

It is ugly, for sure - but People are used to it now. 
Someone familiar with SASS that wants to archive to call a variable-named mixin would try this first, so it might be easiest if it just works on the first try.

I wouldn't care too much about beginners for this usecase - they most likely won't even think about using such a pattern. And if someone is more experienced later he will also expects this to work the same way all the other interpolations in the language do - even if it`s ugly...

Here`s my use-case, i try to internally map bem-style mixin/class names from a basic framework and apply them to maybe-not bem-enabled DOM-Elements or custom selectors for some reason. In the end it should be sort of a factory-mixin that allows to customize something deeper in the framework.



usage, for example map internal BEM-Classes to non-BEM Style DOM in markup: 



Result: 



I currently only get what i wand by ommiting @include #{'base-'}#{$rule}($args); from the factory-mixin and instead adding as @include in the @content param and without $args for the mixin:



what is not really DRY :(
",ModulaShop,content
626,2015-12-08 14:31:51,"+1 - in whatever syntax

I would prefer:



Here's some thoughts why:

It is ugly, for sure - but People are used to it now. 
Someone familiar with SASS that wants to archive to call a variable-named mixin would try this first, so it might be easiest if it just works on the first try.

I wouldn't care too much about beginners for this usecase - they most likely won't even think about using such a pattern. And if someone is more experienced later he will also expects this to work the same way all the other interpolations in the language do - even if it`s ugly...

Here`s my use-case, i try to internally map bem-style mixin/class names from a basic framework and apply them to maybe-not bem-enabled DOM-Elements or custom selectors for some reason. In the end it should be sort of a factory-mixin that allows to customize something deeper in the framework.



usage, for example map internal BEM-Classes to non-BEM Style DOM in markup: 



Result: 



I currently only get what i wand by ommiting @include #{'base-'}#{$rule}($args); from the factory-mixin and instead adding as @include in the @content param and without $args for the mixin:



what is not really DRY :(
",ModulaShop,include
625,2013-01-12 21:40:49,"Hi,

I read other questions about why sass doesn't allow `@import-once`. But I tried to create a custom importer to do it for every import anyway. It seems to be working fine but, since I'm kinda new to sass, I would like to ask you guys if you can see any problem with it.

Basically, it has a list of imported files and if a file was imported before, it returns a new engine with an empty string as the content.

Here is the code:



So, will it work? Or will it blow on my face once I reach more complex sass files?
",svallory,import-once
621,2013-01-09 19:08:29,"Not sure if there is existing functionality for this, but I am looking for a way to declare a mixin that will collect the parent properties and include it in the content.



would render as:



I have just begun to look at the sass code, but if someone more familiar with this codebase could comment on this. This would allow to do things like:



instead of:



From how I understand it, it would need something like `@include_tree` /  `++` directives.
",brewster1134,include
620,2013-01-08 22:22:21,"I'm going to guess that your system encoding is not set to the same encoding that you're using in your file. Sass (or more accurately Ruby) reads the system encoding information to determine what default encoding to use when reading files, and if the encoding that your system lists as the default isn't the same as the encoding the file actually uses you'll get weird errors like this.

There are various OS-specific ways of configuring your system encoding, but a more robust solution would probably be  to add `@charset ""utf-8"";` at the top of your SCSS file.
",nex3,charset
620,2013-01-09 02:07:57,"Thanks.

I do specify the charset at the top of my style sheets:

`@charset ""utf-8"";`

But no dice.

I wouldn't know about looking at my system encoding, before using Sass using the `@charset` rule or setting it in my `.htaccess` file always did the job.
",chris-pearce,charset
620,2013-01-09 02:09:33,"Sass should use `@charset` in preference to any other method of determining the encoding.

Another possibility is that you're using an old version of Ruby. Ruby 1.8.\* doesn't have good encoding support. Could that be it?
",nex3,charset
620,2013-01-13 10:41:22,"Yeah I can't run that test, is it possible you can run it as I'm not a power terminal user? I'm doing the right thing declaring the `@charset` in my style sheet so it shouldn't be mangling it when compiling, annoying as I have to remember to update in the compiled style sheet.
",chris-pearce,charset
620,2013-01-15 01:11:48,"The point of the test was to diagnose what's going on in your system that's causing it to ignore the `@charset` directive, so you'll need to run it.
",nex3,charset
617,2013-01-11 22:10:40,"Selector nesting isn't for encapsulation. It's for making selectors more specific. The semantics of `@extend` are clearly being followed here, so there is no bug.
",nex3,extend
611,2012-12-29 20:13:19,"In Ruby 2.0, respond_to? no longer returns true for protected methods unless you explicitly pass true as a second argument. This causes try_send to fail for @content blocks, keeping sass from knowing that a mixin supports blocks.

Also, Kernel.warn behaves slightly differently. Since the difference is in number of newlines, I figure it's a cosmetic change and made the most expedient fix I could think of.

Let me know if you see any issues!

---

This fix is entirely from [sax](https://github.com/sax) and closes #572 but since that issue has not been updated for a month I thought I'd fix the things commented on in that thread.
",ansman,content
609,2012-12-27 05:44:16,"I understand that nested selectors are not supported in @extend. But will they be? Like in Stylus.



Should compile to:



Is there any reason why it is not supported? What is the best practice around this limitation? Mixins?
",firedev,extend
609,2012-12-27 12:14:08,"I think what you're looking for is a placeholder selector w/extend.



On Dec 27, 2012, at 12:44 AM, Nick notifications@github.com wrote:

> I understand that nested selectors are not supported in @extend. But will they be? Like in Stylus.
> 
> .description .price {}
> .otherplace .price {
>     @extend .description .price;
> }
> Should compile to:
> 
> .description .price, .otherplace .price {}
> Is there any reason why it is not supported? What is the best practice around this limitation? Mixins?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,extend
609,2012-12-28 22:02:43,"Sass doesn't support extending nested selectors because the way it would need to work to be consistent with the overall semantics of `@extend` would be unintuitive for a lot of users.

To understand why this is, you need to understand the semantics of `@extend`. When you write `A { @extend B }`, what you're saying is that all elements matching `A` should be styled as though they match `B` as well. So when you have `.foo { @extend .bar .baz }`, what that means is that all elements matching `.foo` should be styled as though they also match `.bar .baz`.

Now, if an element matches `.bar .baz`, that means it also matches `.baz` on its own. So you get the following behavior:



which would compile to:



That's all well and good. It's not widely useful, since it overlaps almost entirely with `@extend .baz`, but we'd support it if there weren't two easy misinterpretations of the semantics that would confuse users.

### Misinterpretation 1: Search-and-Replace

A lot of users think of `@extend` as a sort of ""search-and-replace"" for selectors. It's actually much more powerful than that, but that's a pretty good rule of thumb for simple cases. However, that rule of thumb breaks down for nested selectors, since `.foo { @extend .bar .baz }` also implies `.foo { @extend .baz }`. This can cause unexpected replacements of `.baz` on its own with `.foo`, which is a problem.

Incidentally, this is the misinterpretation to which Stylus subscribes. For example, in Stylus:



compiles to



### Misinterpretation 2: Namespaced Inheritance

Another way to misinterpret `.foo { @extend .bar .baz }` is to consider the nesting to mean something similar to what it does in the context of a CSS rule: `.foo` should be styled as though it matches `.baz` but only within the context of `.bar`. This would mean that



would compile to



which is wildly different than the output generated by the real semantics of `@extend`.

### tl;dr

There's no way to support nested inheritance that would make sense to all users, and the way that best fits the semantics of `@extend` isn't especially useful.
",nex3,extend
608,2012-12-29 19:32:35,"Can you try to increase `listen` latency? (I don't know if `sass` let you set that). @Maher4Ever have you another idea?
",thibaudgg,Maher4Ever
608,2015-06-19 23:45:34,"According to @Maher4Ever on a3031856b22bc834a5417dedecb038b7be9b9e3e, the native Windows watcher is much slower than polling, so Sass [currently has it disabled](https://github.com/sass/sass/blob/stable/lib/sass/plugin/compiler.rb#L318-L320). You can try removing the `|| Sass::Util.windows?` there and seeing what that does to the latency and CPU usage.
",nex3,Maher4Ever
607,2012-12-24 15:17:18,"No, it works once you remove `span.rc`

However after some fiddling I found a way to make it work. I put the `test { @extend .rc; }` part in a separate file and `@import`ed it from the main `.scss`

`Sass 3.2.4 (Media Mark)`
",firedev,extend
607,2012-12-24 15:17:18,"No, it works once you remove `span.rc`

However after some fiddling I found a way to make it work. I put the `test { @extend .rc; }` part in a separate file and `@import`ed it from the main `.scss`

`Sass 3.2.4 (Media Mark)`
",firedev,import
607,2012-12-24 16:36:36,"Unfortunately after migrating to Compass this problem appeared again. Interesting to note that despite multiple warnings per each `@extend`, scss is compiled correctly.
",firedev,extend
607,2012-12-27 03:04:58,"The fun part is - .css file is compiled correctly. But for each `@extend` it produces 3 or 4 warnings anyway.
",firedev,extend
607,2012-12-27 10:06:05,"I am having the same issue when trying to extend a selector like this:
    label     {    @extend .aClass    }
Instead, I have to extend a class:
    .aLabelClass    {    @extend .aClass    }
",gotardo,extend
606,2012-12-22 03:34:17,"Not sure if this is a feature of caching and not a bug, but the compilation speed is much slower when caching is disabled.

For example:



Note that the use of `@import ""compass"";` is to make it easier to illustrate the point. In my production code, having multiple `@import ""compass/*/*"";` statements suffers the same problem.
",vvasabi,import
604,2012-12-21 21:17:45,"For example:



See also @rzea's comments on #362.
",nex3,rzea
602,2012-12-22 11:54:59,"The use-case I have in mind is when using CSS frameworks, and either not using all of the features - or simply using @extend to mix-in the framework's styles. (I'm using this in combination with Zurb's Foundation at the moment)

In both of these cases it isn't really feasible to remove the selectors manually, a tool like this allows you to build using a framework but then discard any bloat that hasn't been used.

On a single-page site i've recently thrown together, this tool managed to remove 50k of CSS provided by the framework that I wasn't using.
",glenjamin,extend
602,2012-12-28 21:13:01,"The next generation of `@import` should support a way to import a stylesheet so that its selectors are available for `@extend` but don't get emitted to the stylesheet proper.

That said, if you really want to post-process the tree before CSS is generated, the master branch splits out most of `Sass::Tree::RootNode#render` into `Sass::Tree::RootNode#css_tree`, which returns the parse tree of the processed CSS. You can monkey-patch that to do the sort of post processing you're thinking of.
",nex3,extend
602,2012-12-28 21:13:01,"The next generation of `@import` should support a way to import a stylesheet so that its selectors are available for `@extend` but don't get emitted to the stylesheet proper.

That said, if you really want to post-process the tree before CSS is generated, the master branch splits out most of `Sass::Tree::RootNode#render` into `Sass::Tree::RootNode#css_tree`, which returns the parse tree of the processed CSS. You can monkey-patch that to do the sort of post processing you're thinking of.
",nex3,import
599,2012-12-21 13:05:01,"You're now moving away from variable namespacing and into general namespacing. Storing mixins in variables is a terrible idea, with that thinking in mind, what this actually sounds like (and for that matter, looks like) is the next generation @import statements that are being talked about.
",Snugug,import
597,2012-12-19 06:15:16,"In this case, this involve a lot of stuffs having to be merged in Sass core.
What the problem of doing `@import ""compass""` ?.

btw, it's Sass not SASS
",MoOx,import
593,2012-12-11 19:38:58,"I would like Sass's command line utility to optionally return errors in a JSON format. I envision something like this:



The reason I ask is that having the output in a parseable format allows _infinitely_ better integration of Sass in third-party applications that want to do custom formatting of the Sass compiler's return messages. 

I strongly recommend that you adopt JSON over alternatives such as CSV and XML. JSON is cleaner, smaller, more easily read by humans (in case they need to do so), faster to parse in almost every instance and is quickly replacing XML as the default on the modern web. 

/cc @nex3 @chriseppstein 
",bdkjones,nex3
593,2012-12-11 19:38:58,"I would like Sass's command line utility to optionally return errors in a JSON format. I envision something like this:



The reason I ask is that having the output in a parseable format allows _infinitely_ better integration of Sass in third-party applications that want to do custom formatting of the Sass compiler's return messages. 

I strongly recommend that you adopt JSON over alternatives such as CSV and XML. JSON is cleaner, smaller, more easily read by humans (in case they need to do so), faster to parse in almost every instance and is quickly replacing XML as the default on the modern web. 

/cc @nex3 @chriseppstein 
",bdkjones,chriseppstein
592,2012-12-11 06:42:06,"The W3C specification for CSS 3 states that these two lines are exactly equivalent. See here: http://www.w3.org/TR/CSS21/cascade.html#at-import



Currently, Sass will not attempt to compile any imported file that is brought in using the url() syntax. I propose that this be changed so that:



causes Sass to process this imported file. Sass should look for the presence of ""://"" and "".css"" within the string contained by the parentheses. If either of those exist, THEN the import statement should be copied, verbatim, to the compiled output. The presence of a media type can also trigger the verbatim copy (as it currently does). 

The reason I propose this change is to bring Sass in line with the W3C standard. I've had numerous people email me something to the effect of ""CodeKit doesn't compile the code in my file, X!"" only to find that the user does not realize the subtle effect of using the url() syntax as opposed to the """" syntax.

Sass should adhere to the W3C spec when possible. In this case, it is possible.

/cc @chriseppstein 
",bdkjones,chriseppstein
592,2012-12-11 06:52:33,"I would also add that Less _does_ process Less files brought in with the url() syntax. (Although Less's @import statement support is much more rudimentary. It does not allow comma-separated multi imports and so forth.)

Folks switching to Sass from Less stand a good chance of being caught unawares by Sass's non-standard treatment of url() imports. Unless there is an overwhelming reason for the current behavior, I strongly suggest adopting the W3C spec.

/cc @chriseppstein 
",bdkjones,chriseppstein
592,2012-12-11 06:52:33,"I would also add that Less _does_ process Less files brought in with the url() syntax. (Although Less's @import statement support is much more rudimentary. It does not allow comma-separated multi imports and so forth.)

Folks switching to Sass from Less stand a good chance of being caught unawares by Sass's non-standard treatment of url() imports. Unless there is an overwhelming reason for the current behavior, I strongly suggest adopting the W3C spec.

/cc @chriseppstein 
",bdkjones,import
592,2012-12-21 21:14:24,"This is a major semantic change. `url()` is one of the four means Sass uses to try to detect plain-CSS imports (along with `://`, `.css`, and media specifiers). If we change this, we'll break any stylesheet that relies on `url()` to distinguish plain-CSS imports. Even if we were to decide to make the change, it would have to go through a deprecation process that would take multiple Sass versions to end up with the semantics you suggest.

There's also a good reason for the behavior as it stands now. SCSS is advertised as a superset of CSS, and we take that very seriously. Currently the _only_ piece of syntax that can have a different meaning in SCSS than it does in CSS is `@import`. `url()` is an important criterion we use to minimize the number of cases where that distinction matters.

Ultimately, the solution to this -- as to so many of our `@import` woes -- will be our eventual revision of import semantics. This revision will include a different name that won't conflict with CSS, at which point we can have much more freedom in our interpretation of the arguments.
",nex3,import
592,2012-12-21 21:38:12,"I disagree with this analysis. The url() and quotes styles should be interchangeable and Sass should require the .css extension for a regular CSS import. In other words, when an extension is omitted in an import statement, sass should attempt to add *.scss and *.sass only.

It's simple and clean: you can omit the extension as long as you're importing another Sass file. Anything else requires an extension.

Additionally, you cannot rightly call SCSS a superset of CSS if _any_ standard CSS behavior changes in SCSS. In CSS, quotes and url() are interchangeable, so they must also be in a superset.

I don't know what you've got planned for the import overhaul, but I would seriously reconsider the decision to close this issue simply because it's going to be a little work. The current behavior of url() is, admittedly, incorrect. I've opened the same request for Stylus and Less already treats url() correctly. Sass runs the risk of being the only major pre processed languages that handles imports incorrectly.

And lastly, just because ""that's the way it's always been"" doesn't mean that's the way it SHOULD be.

Sent from my iPhone

On Dec 21, 2012, at 16:14, Nathan Weizenbaum notifications@github.com wrote:

> This is a major semantic change. url() is one of the four means Sass uses to try to detect plain-CSS imports (along with ://, .css, and media specifiers). If we change this, we'll break any stylesheet that relies on url() to distinguish plain-CSS imports. Even if we were to decide to make the change, it would have to go through a deprecation process that would take multiple Sass versions to end up with the semantics you suggest.
> 
> There's also a good reason for the behavior as it stands now. SCSS is advertised as a superset of CSS, and we take that very seriously. Currently the only piece of syntax that can have a different meaning in SCSS than it does in CSS is @import. url() is an important criterion we use to minimize the number of cases where that distinction matters.
> 
> Ultimately, the solution to this -- as to so many of our @import woes -- will be our eventual revision of import semantics. This revision will include a different name that won't conflict with CSS, at which point we can have much more freedom in our interpretation of the arguments.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",bdkjones,import
592,2012-12-22 01:02:43,"The issue isn't work on our part. It's a painful migration process for our users. Everyone who currently uses `url()` imports would get a deprecation message through Sass 3.3. The functionality you discuss wouldn't work until Sass 3.4, at which point everyone who didn't heed the deprecation message gets broken. And by then we're likely to have an alternate import syntax be recommended anyway.

I don't buy your argument that we're not following the CSS spec. Sass is not CSS. The spec says nothing about how preprocessors should treat `@imports`. It explains how `@imports` should be handled by the browser, and the current handling of the behavior of `url()` makes SCSS adhere more closely to that behavior.

Yes, Less treats `url()` as you suggest, but the other side of that coin is that fewer valid CSS documents are also valid Less documents.
",nex3,imports
591,2012-12-11 00:23:25,"@bdkjones [reports](http://twitter.com/bdkjones/status/278266546072207361) that comments in `@import` statements in .scss files don't work.
",chriseppstein,bdkjones
591,2012-12-11 00:23:25,"@bdkjones [reports](http://twitter.com/bdkjones/status/278266546072207361) that comments in `@import` statements in .scss files don't work.
",chriseppstein,import
589,2012-12-06 18:23:01,"

Everything is working properly but the terminal is full of warning and deprecation
To me looks like that the .class is inside the @media is it a bug?
",piermariacosina,media
589,2012-12-11 01:26:41,"`+at-breakpoint` is a [Susy](http://susy.oddbird.net/) mixin, it nests the `@content` in a media query so it makes sense that the `@extend` would here throw a warning.
",Anahkiasen,extend
589,2012-12-11 01:26:41,"`+at-breakpoint` is a [Susy](http://susy.oddbird.net/) mixin, it nests the `@content` in a media query so it makes sense that the `@extend` would here throw a warning.
",Anahkiasen,content
589,2012-12-25 16:40:24,"You're probably getting the deprecation warning because you've defined .wide outside of your media query as well. For example, 

**Terminal warning, no output**



**No warning, good output**



**Terminal warning, output is _only_ @media... { .extend-test { color:darkred; } }**



The last warning is especially important if you're extending a class, not just a placeholder, since it's possible to declare a class multiple times in a stylesheet, making unexpected extend behavior more likely. 

All warnings seems correct, so I don't think there's a bug.
",robwierzbowski,media
585,2012-12-02 14:02:49,"The issue is your $base_font_size is now a string not a number. Multiply it by 1px, don't add px

On Dec 2, 2012, at 8:56 AM, Norris notifications@github.com wrote:

> $some_value: 16
> $base_font_size: $some_value + px
> $unit: unit($base_font_size)
> @debug $unit
> @debug $some_value
> @debug $base_font_size
> Generates:
> 
> Syntax error: ""16px"" is not a number for `unit'
>         on line X of file.scs
> I don't even get to the debug messages. I've tried setting $base_font_size with quotes and interpolation, but that didn't help as well. Neither did ""unquote"" before running the unit.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Snugug,debug
581,2012-12-01 00:58:53,"Yes, whenever i call @import ""foundation""; in the application.scss the ruby server crashes with ruby-1.8.7-p371. However, i was able to solve this issue by using REE, so this is more of a ruby issue. Hope this helps.
",aliibrahim,import
577,2012-11-25 16:27:01,"## The problem

To keep things organised in larger projects, we're using a modular system of keeping related styles and templates together as 'modules'. For example, our topbar 'module' is made up of `topbar.scss`, the template `topbar.html`, and some backend logic.

Because of this arrangement, many repeated `@media` declarations end up inside our compiled CSS file, like this:


## Proposing  SASS Regions

Define a region at some point in the SASS chain, and allow SASS content to be repeatedly appended in the order it was called. 

While this example is focussed on `@media` queries, I think Regions is a versatile and useful addition to the SASS language, in-keeping with its goals and current feature set.
### Defining a new region:

`app.scss`, our primary sass stylesheet:


### Appending to a region:

`topbar.scss`, one of our many modules:



`layout.scss`, one of our many modules:


### Processed output:

`app.css`, our final compiled CSS:



Please comment if you would like to see this become a part of SASS.
",replete,media
577,2012-11-25 19:46:43,"This idea could also be extended to reach regions in separate sass scopes.

For instance, I want to add something to the `ie7` region inside the `ie.scss` master file:

`app.scss`:



`ie.scss`:



`ie.css` - rendered:



This concept can also be applied to things more useful than just IE fixes. Also, what I've demonstrated above wouldn't be fun to work with, it would ideally be simplified into a function, that accepts `@content`.
",replete,content
577,2012-11-27 05:51:07,"This is basically a variant of the `@buffer` syntax brought up in #116. I've already mentioned that I prefer the `@target` approach outlined in #241.

In general, I'm not convinced that having many copies of the same `@media` query is a large problem. Other than looking messy (a valid concern but not a critical one), I don't think it causes serious practical problems. It's exactly the sort of textual duplication that gzip compression is excellent at dealing with. Each duplicated query won't end up adding more than a byte or two to the over-the-wire size of the resulting CSS.
",nex3,buffer
577,2012-11-27 05:51:07,"This is basically a variant of the `@buffer` syntax brought up in #116. I've already mentioned that I prefer the `@target` approach outlined in #241.

In general, I'm not convinced that having many copies of the same `@media` query is a large problem. Other than looking messy (a valid concern but not a critical one), I don't think it causes serious practical problems. It's exactly the sort of textual duplication that gzip compression is excellent at dealing with. Each duplicated query won't end up adding more than a byte or two to the over-the-wire size of the resulting CSS.
",nex3,target
577,2012-11-27 05:51:07,"This is basically a variant of the `@buffer` syntax brought up in #116. I've already mentioned that I prefer the `@target` approach outlined in #241.

In general, I'm not convinced that having many copies of the same `@media` query is a large problem. Other than looking messy (a valid concern but not a critical one), I don't think it causes serious practical problems. It's exactly the sort of textual duplication that gzip compression is excellent at dealing with. Each duplicated query won't end up adding more than a byte or two to the over-the-wire size of the resulting CSS.
",nex3,media
572,2012-11-18 00:53:53,"In Ruby 2.0, respond_to? no longer returns true for protected methods unless you explicitly pass `true` as a second argument. This causes try_send to fail for @content blocks, keeping sass from knowing that a mixin supports blocks.

Also, Kernel.warn behaves slightly differently. Since the difference is in number of newlines, I figure it's a cosmetic change and made the most expedient fix I could think of.

Let me know if you see any issues!
",sax,content
570,2012-11-15 23:20:08,"I've been using Ruby a bit recently and just fell in love with each with index. I'd love to see this as added as an extension to the current `@each` implementation as follows.

_Current:_



_Optional Addition:_



The counter would start at `1` like list functions. While this may have limited uses, it won't break existing code, the mental model is easy enough to pick up on quickly, and the places where this would be used it would save time and easy to miss logic errors.

Please!
",Snugug,each
570,2012-11-27 01:12:16,"This is easy enough to do with `@for` and narrow enough in its applications that I don't think it's worth adding to the language.
",nex3,for
567,2012-11-27 06:02:20,"I'm not sure there's a lot of utility in typing out a full additional rule and adding a layer of nesting for what amounts to saving only a few characters. In your example, you easily lose the characters you saved from namespacing to writing `@namespace` alone, to say nothing of the additional indentation characters.
",nex3,namespace
561,2013-05-24 17:12:31,":thumbsup: also `variable-exists($varname, $global)`. I think I prefer a function per-type instead of a generic exists function. Thoughts, @nex3?
",chriseppstein,nex3
560,2012-10-31 22:44:04,"Maybe I haven't search the issues properly or read the documentation thoroughly enough (or I just missunderstod things).
My issue is that it seems to me that if I import scss files that use @extend with placeholder selectors from a _lib_ file, to create a more OO experience, the rules are concatenated into one ruleset but that ruleset is duplicated.

for example:
I have two files, one called main.css and the other youtube.css (main.css imports youtube.css).
I use @extend %reset (sets margin: 0 and padding: 0) in both files and it turns into
html, body, hgroup, h1, h2, footer .vcard .fn, #main .split-me ul, #youtube ul, #youtube ul li .title {
  margin: 0;
  padding: 0; }
which is fine but the rule is duplicated (shows up twice) in the output file.

I'll submit a less incoherrent example if needed.
",ztamizzen,extend
560,2012-11-09 21:08:08,"When you `@import` a file, it's more or less literally included in the source file. So when you `@import` lib in main, header, and sidebar, `%reset` is being independently defined three times, which causes it to be extended three times apiece by body, header, and aside.
",nex3,import
560,2012-11-09 22:36:57,"Not importing 'lib' in every file gives this warning, but the output look okey, I guess:

overwrite compiled/main.css
WARNING on line 2 of scss/product.scss: ""header"" failed to @extend ""%reset"".
  The selector ""%reset"" was not found.
  This will be an error in future releases of Sass.
  Use ""@extend %reset !optional"" if the extend should be able to fail.

  overwrite compiled/product.css
WARNING on line 3 of scss/sidebar.scss: ""aside"" failed to @extend ""%reset"".
  The selector ""%reset"" was not found.
  This will be an error in future releases of Sass.
  Use ""@extend %reset !optional"" if the extend should be able to fail.

  overwrite compiled/sidebar.css
",ztamizzen,extend
557,2012-10-29 10:25:14,"When you forget the argument behind a `@media` declaration, you get a NoMethodError instead of a SyntaxError.


",edwinv,media
556,2012-10-28 21:12:13,"I've recently wanted to start including .css files and have them parsed as Sass. The idea behind this is that a component might be added to the project as a third-party component and I'll want to import their CSS for use in Sass.

This would allow us to have project in Bower (and other package managers) for reusable CSS components that would work with or without Sass. Take the Normalize.css file for example, I would like to be able to add this to a project using Bower and import it into the project as I would an SCSS file rather than creating a vanilla CSS import.

I imagine this would mean letting this syntax:



look for `normalize.sass`, `normalise.scss` or `normalize.css` and pull it in. Currently it will ignore it if it only finds a css file.

Would there be any downsides to this?

/cc @chriseppstein 
",anthonyshort,chriseppstein
556,2012-11-03 00:19:14,"I think the best approach is to integrate this into the next-generation `@import` syntax, which won't actually be called `@import` and so won't have compatibility issues.
",nex3,import
556,2013-02-21 06:44:09,"What about an `@import ""file.css"" !force` ‚Ä¶ like we can do for #156 with `@import ""file"" !once` ?
",MoOx,import
556,2013-03-31 14:23:01,"I really need this feature more and more.

I use to use bower and I can't spend my time to duplicate css into scss.

I'd like to be able to do:

@import ""../components/bootstrap/bootstrap.css"" as a scss, not as css in w3c way.
",kud,import
556,2013-04-01 13:30:27,"For the moment, I bower install bootstrap, I copy/paste from components to my scss folder all css and rename it .scss and import it via sass. It's boring.

I just would like to do

`@import ../components/bootstrap/bootstrap.css` as a scss, not w3c way. 

`@import ""file.css"" !force` as @MoOx advises sounds good to me.
",kud,import
556,2013-04-01 14:30:09,"It strikes me as an easy feature to implement that way.  Maybe you should take a crack at a PR?

Personally, I'm not crazy about using the word ""!force"".  But, that's just me.  I don't think that makes it very clear as to what it's actually doing.  Maybe something like this?:
`@import ""file.css"" !as-scss`

This way, you state plainly what you're doing.
",bjmiller,import
556,2013-04-01 14:32:47,"You're right about the ""parameter"" name.

And yes, I'm thinking about doing a PR.

Thank you ;)

On 1 April 2013 16:30, Brian Miller notifications@github.com wrote:

> It strikes me as an easy feature to implement that way. Maybe you should
> take a crack at a PR?
> 
> Personally, I'm not crazy about using the word ""!force"". But, that's just
> me. I don't think that makes it very clear as to what it's actually doing.
> Maybe something like this?:
> @import https://github.com/import ""file.css"" !as-scss
> 
> This way, you state plainly what you're doing.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/556#issuecomment-15717477
> .

## 

_Erwann Mest_

kud.io
",kud,import
556,2013-04-01 14:33:51,"If I were you I wouldn't do a PR considering the `@import` is planned to be refactored anyway and that this will be one of the key points of it.
",Anahkiasen,import
556,2013-04-01 14:57:02,"I wouldn't do it that way.  You would then be creating  SCSS files that will only parse in your system, where you've applied the patch.

This is a useful enough idea that it's worth doing in an official way.

I also think that adding support for a directive on the import line wouldn't interfere with whatever the new version of ""`@import`"" is going to be.

And, that grunt task was exactly the kind of thing I was thinking of earlier for renaming files.
",bjmiller,import
556,2013-04-01 19:45:56,"We're not going to add new syntax for something that will be solved differently in the future. This is easy enough to work around until the new `@import` syntax is in place.
",nex3,import
556,2013-05-12 20:40:47,"I decided to write my own importer instead of using Grunt to do a file copy/rename. I prefer to serve assets directly via a Connect or Rails server in development rather than work with built files. I'd like to make this into a gem until the new `@import` syntax is done. Would anyone else find that useful?
",joefiorini,import
556,2013-09-05 15:52:27,"Oddly... on Rails (using sass-rails and sprockets) I've found you can `@import` a css into your scss just fine as long as you've added the containing folder to your `config.assets.paths`.

I don't know why this works.
",csmosx,import
556,2013-09-05 21:29:28,"FYI, if you're using Half Pipe (a Grunt-based asset pipeline replacement)
you can @import ""bower!normalize-css/normalize"" to import a CSS template.

On Thu, Sep 5, 2013 at 4:51 PM, Chris Eppstein notifications@github.comwrote:

> @csmosx https://github.com/csmosx I threw css importing into sass-rails
> because I could :)
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/556#issuecomment-23900619
> .
",joefiorini,import
556,2013-11-04 10:12:35,"@cspiegl did you see https://github.com/chriseppstein/sass-css-importer?
",oskarrough,cspiegl
556,2013-11-04 12:03:55,"@cspiegl said: _I hope that both the official sass as well as libsass will eventually work with importing css files._ You added: _Same here as I also use libsass. Need node version of sass-importer._

So yes, what you guys suggest here is migrating certain external functionality into base language so that libsass eventually supports it so that you don't need to bother leveraging Ruby via Compass.

PS Please remove the 2MB gif.
",lolmaus,cspiegl
556,2013-11-04 12:44:51,"Exactly that @cspiegl, thanks.

Make a CSS importer for Sass (ruby), when it's done, libsass community will do the job to write it in libsass way.
",kud,cspiegl
556,2013-11-04 13:24:41,"Btw, @lolmaus it seems you are not aware of who make [libsass](http://libsass.org/) alive: it's Hampton Catlin (@hcatlin), the creator of Sass. So you should revise what you said about Sass. So read this http://libsass.org/ & be quiet please. Also https://twitter.com/chriseppstein/status/342091777999790081. #kthxbye.
",MoOx,hcatlin
556,2013-11-04 14:50:10,"@Snugug Thank you for your detailed comment and once again, sorry for flaming.

My point is that the abstracted language Sass is very limited. It's extending with a general-purpose programming language that makes Sass shine. It lets you:
- manipulate colors: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/colors.rb);
- analyze values: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb);
- generate gradients [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/gradient_support.rb);
- analyze image files: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/image_size.rb);
- embed images into css code: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/inline_image.rb);
- manipulate lists: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb), [Toolkit](https://github.com/Team-Sass/toolkit/blob/1.x.x/compass/lib/toolkit.rb), [Modular Scale](https://github.com/Team-Sass/modular-scale/blob/master/lib/modular-scale.rb#L102), [Jacket](https://github.com/Team-Sass/jacket/blob/master/lib/jacket.rb);
- do math: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/math.rb), [SassyLIsts](https://github.com/Team-Sass/SassyLists/blob/master/lib/SassyLists.rb), [Modular Scale](https://github.com/Team-Sass/modular-scale/blob/master/lib/modular-scale.rb), [Harsh](https://github.com/bookcasey/harsh/blob/master/lib/harsh.rb), [Sassy-math](https://github.com/Team-Sass/Sassy-math/blob/master/compass/lib/sassy-math.rb);
- generate sprites: [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sass_extensions/functions/sprites.rb);
- generate Sass variables and functions with a template engine (!): [Compass](https://github.com/chriseppstein/compass/blob/stable/lib/compass/sprite_importer/content.erb);
- pass environment variables from OS into Sass: [a random Compass config](https://gist.github.com/darren131/5402087);
- and basically anything else you can imagine that's relevant to generating CSS.

Please get me right. I don't argue against porting sass-css-importer into the abstracted language Sass. 

They deprive their preprocessor from its general-purpose programming language extendability and then ask to implement amputated goodies in its base standard. Okay, Sass devs may be cool with porting sass-css-importer into base Sass. But then someone will need another extnesion merged into the base language, say, working with large numbers ([which fail in Sass miserably](http://sassmeister.com/gist/7302404)), or importing a folder with one `@import` statement, or raising numbers to a power, or producing custom gradients...

Most Node.js developers either use grunt-contrib-compass to leverage the full power of the Sass/Compass infrastructure, or use LESS or Stylus/Styl and their capability to extend its base language with Node's native JS. But some guys just want to eat the fruit without climbing the tree.
",lolmaus,import
556,2014-01-15 14:43:15,"Have there been any updates on this? This is a **big** issue for anyone wanting to use `SASS` alongside `bower`. I'm actually pretty surprised this issue isn't more active than it is.

It seems like the discussion left off with the decision to split out the behavior of `@import`ing SCSS files from `@import`ing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.

If I'm understanding correctly, then `@import` should always compile to `@import` (and not pull files in, whether they're scss or not), and the new `@rule` would also merge the files together. Possible names could be `@merge`,  `@include`, `@combine`,  `@insert`,  `@inject`.

Should I make a PR implementing something like this?
",jmeas,combine
556,2014-01-15 14:43:15,"Have there been any updates on this? This is a **big** issue for anyone wanting to use `SASS` alongside `bower`. I'm actually pretty surprised this issue isn't more active than it is.

It seems like the discussion left off with the decision to split out the behavior of `@import`ing SCSS files from `@import`ing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.

If I'm understanding correctly, then `@import` should always compile to `@import` (and not pull files in, whether they're scss or not), and the new `@rule` would also merge the files together. Possible names could be `@merge`,  `@include`, `@combine`,  `@insert`,  `@inject`.

Should I make a PR implementing something like this?
",jmeas,insert
556,2014-01-15 14:43:15,"Have there been any updates on this? This is a **big** issue for anyone wanting to use `SASS` alongside `bower`. I'm actually pretty surprised this issue isn't more active than it is.

It seems like the discussion left off with the decision to split out the behavior of `@import`ing SCSS files from `@import`ing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.

If I'm understanding correctly, then `@import` should always compile to `@import` (and not pull files in, whether they're scss or not), and the new `@rule` would also merge the files together. Possible names could be `@merge`,  `@include`, `@combine`,  `@insert`,  `@inject`.

Should I make a PR implementing something like this?
",jmeas,import
556,2014-01-15 14:43:15,"Have there been any updates on this? This is a **big** issue for anyone wanting to use `SASS` alongside `bower`. I'm actually pretty surprised this issue isn't more active than it is.

It seems like the discussion left off with the decision to split out the behavior of `@import`ing SCSS files from `@import`ing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.

If I'm understanding correctly, then `@import` should always compile to `@import` (and not pull files in, whether they're scss or not), and the new `@rule` would also merge the files together. Possible names could be `@merge`,  `@include`, `@combine`,  `@insert`,  `@inject`.

Should I make a PR implementing something like this?
",jmeas,include
556,2014-01-15 14:43:15,"Have there been any updates on this? This is a **big** issue for anyone wanting to use `SASS` alongside `bower`. I'm actually pretty surprised this issue isn't more active than it is.

It seems like the discussion left off with the decision to split out the behavior of `@import`ing SCSS files from `@import`ing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.

If I'm understanding correctly, then `@import` should always compile to `@import` (and not pull files in, whether they're scss or not), and the new `@rule` would also merge the files together. Possible names could be `@merge`,  `@include`, `@combine`,  `@insert`,  `@inject`.

Should I make a PR implementing something like this?
",jmeas,merge
556,2014-01-15 14:43:15,"Have there been any updates on this? This is a **big** issue for anyone wanting to use `SASS` alongside `bower`. I'm actually pretty surprised this issue isn't more active than it is.

It seems like the discussion left off with the decision to split out the behavior of `@import`ing SCSS files from `@import`ing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.

If I'm understanding correctly, then `@import` should always compile to `@import` (and not pull files in, whether they're scss or not), and the new `@rule` would also merge the files together. Possible names could be `@merge`,  `@include`, `@combine`,  `@insert`,  `@inject`.

Should I make a PR implementing something like this?
",jmeas,rule
556,2014-01-15 14:43:15,"Have there been any updates on this? This is a **big** issue for anyone wanting to use `SASS` alongside `bower`. I'm actually pretty surprised this issue isn't more active than it is.

It seems like the discussion left off with the decision to split out the behavior of `@import`ing SCSS files from `@import`ing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.

If I'm understanding correctly, then `@import` should always compile to `@import` (and not pull files in, whether they're scss or not), and the new `@rule` would also merge the files together. Possible names could be `@merge`,  `@include`, `@combine`,  `@insert`,  `@inject`.

Should I make a PR implementing something like this?
",jmeas,inject
556,2014-01-15 14:45:55,"There was a decision on this, it‚Äôs being considered for the next version of @import (not Sass 3.3, either Sass 3.4 or 4.0).

On Wednesday, January 15, 2014 at 9:43 AM, James Smith wrote:

> Have there been any updates on this? This is a big issue for anyone wanting to use SASS alongside bower. I'm actually pretty surprised this issue isn't more active than it is.
> It seems like the discussion left off with the decision to split out the behavior of @importing SCSS files from @importing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.
> If I'm understanding correctly, then @import should always compile to @import (and not pull files in, whether they're scss or not), and the new @rule would also merge the files together. Possible names could be @merge, @include (https://github.com/include),@combine (https://github.com/combine),@insert (https://github.com/insert),@inject (https://github.com/inject)`.
> Should I make a PR implementing something like this?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/556#issuecomment-32366820).
",Snugug,combine
556,2014-01-15 14:45:55,"There was a decision on this, it‚Äôs being considered for the next version of @import (not Sass 3.3, either Sass 3.4 or 4.0).

On Wednesday, January 15, 2014 at 9:43 AM, James Smith wrote:

> Have there been any updates on this? This is a big issue for anyone wanting to use SASS alongside bower. I'm actually pretty surprised this issue isn't more active than it is.
> It seems like the discussion left off with the decision to split out the behavior of @importing SCSS files from @importing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.
> If I'm understanding correctly, then @import should always compile to @import (and not pull files in, whether they're scss or not), and the new @rule would also merge the files together. Possible names could be @merge, @include (https://github.com/include),@combine (https://github.com/combine),@insert (https://github.com/insert),@inject (https://github.com/inject)`.
> Should I make a PR implementing something like this?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/556#issuecomment-32366820).
",Snugug,import
556,2014-01-15 14:45:55,"There was a decision on this, it‚Äôs being considered for the next version of @import (not Sass 3.3, either Sass 3.4 or 4.0).

On Wednesday, January 15, 2014 at 9:43 AM, James Smith wrote:

> Have there been any updates on this? This is a big issue for anyone wanting to use SASS alongside bower. I'm actually pretty surprised this issue isn't more active than it is.
> It seems like the discussion left off with the decision to split out the behavior of @importing SCSS files from @importing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.
> If I'm understanding correctly, then @import should always compile to @import (and not pull files in, whether they're scss or not), and the new @rule would also merge the files together. Possible names could be @merge, @include (https://github.com/include),@combine (https://github.com/combine),@insert (https://github.com/insert),@inject (https://github.com/inject)`.
> Should I make a PR implementing something like this?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/556#issuecomment-32366820).
",Snugug,insert
556,2014-01-15 14:45:55,"There was a decision on this, it‚Äôs being considered for the next version of @import (not Sass 3.3, either Sass 3.4 or 4.0).

On Wednesday, January 15, 2014 at 9:43 AM, James Smith wrote:

> Have there been any updates on this? This is a big issue for anyone wanting to use SASS alongside bower. I'm actually pretty surprised this issue isn't more active than it is.
> It seems like the discussion left off with the decision to split out the behavior of @importing SCSS files from @importing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.
> If I'm understanding correctly, then @import should always compile to @import (and not pull files in, whether they're scss or not), and the new @rule would also merge the files together. Possible names could be @merge, @include (https://github.com/include),@combine (https://github.com/combine),@insert (https://github.com/insert),@inject (https://github.com/inject)`.
> Should I make a PR implementing something like this?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/556#issuecomment-32366820).
",Snugug,include
556,2014-01-15 14:45:55,"There was a decision on this, it‚Äôs being considered for the next version of @import (not Sass 3.3, either Sass 3.4 or 4.0).

On Wednesday, January 15, 2014 at 9:43 AM, James Smith wrote:

> Have there been any updates on this? This is a big issue for anyone wanting to use SASS alongside bower. I'm actually pretty surprised this issue isn't more active than it is.
> It seems like the discussion left off with the decision to split out the behavior of @importing SCSS files from @importing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.
> If I'm understanding correctly, then @import should always compile to @import (and not pull files in, whether they're scss or not), and the new @rule would also merge the files together. Possible names could be @merge, @include (https://github.com/include),@combine (https://github.com/combine),@insert (https://github.com/insert),@inject (https://github.com/inject)`.
> Should I make a PR implementing something like this?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/556#issuecomment-32366820).
",Snugug,merge
556,2014-01-15 14:45:55,"There was a decision on this, it‚Äôs being considered for the next version of @import (not Sass 3.3, either Sass 3.4 or 4.0).

On Wednesday, January 15, 2014 at 9:43 AM, James Smith wrote:

> Have there been any updates on this? This is a big issue for anyone wanting to use SASS alongside bower. I'm actually pretty surprised this issue isn't more active than it is.
> It seems like the discussion left off with the decision to split out the behavior of @importing SCSS files from @importing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.
> If I'm understanding correctly, then @import should always compile to @import (and not pull files in, whether they're scss or not), and the new @rule would also merge the files together. Possible names could be @merge, @include (https://github.com/include),@combine (https://github.com/combine),@insert (https://github.com/insert),@inject (https://github.com/inject)`.
> Should I make a PR implementing something like this?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/556#issuecomment-32366820).
",Snugug,rule
556,2014-01-15 14:45:55,"There was a decision on this, it‚Äôs being considered for the next version of @import (not Sass 3.3, either Sass 3.4 or 4.0).

On Wednesday, January 15, 2014 at 9:43 AM, James Smith wrote:

> Have there been any updates on this? This is a big issue for anyone wanting to use SASS alongside bower. I'm actually pretty surprised this issue isn't more active than it is.
> It seems like the discussion left off with the decision to split out the behavior of @importing SCSS files from @importing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.
> If I'm understanding correctly, then @import should always compile to @import (and not pull files in, whether they're scss or not), and the new @rule would also merge the files together. Possible names could be @merge, @include (https://github.com/include),@combine (https://github.com/combine),@insert (https://github.com/insert),@inject (https://github.com/inject)`.
> Should I make a PR implementing something like this?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/556#issuecomment-32366820).
",Snugug,importing
556,2014-01-15 14:45:55,"There was a decision on this, it‚Äôs being considered for the next version of @import (not Sass 3.3, either Sass 3.4 or 4.0).

On Wednesday, January 15, 2014 at 9:43 AM, James Smith wrote:

> Have there been any updates on this? This is a big issue for anyone wanting to use SASS alongside bower. I'm actually pretty surprised this issue isn't more active than it is.
> It seems like the discussion left off with the decision to split out the behavior of @importing SCSS files from @importing CSS files. This seems like a good idea, and one that wouldn't be that hard to implement, I think.
> If I'm understanding correctly, then @import should always compile to @import (and not pull files in, whether they're scss or not), and the new @rule would also merge the files together. Possible names could be @merge, @include (https://github.com/include),@combine (https://github.com/combine),@insert (https://github.com/insert),@inject (https://github.com/inject)`.
> Should I make a PR implementing something like this?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub (https://github.com/nex3/sass/issues/556#issuecomment-32366820).
",Snugug,inject
556,2014-07-31 02:55:57,"@chriseppstein did not mean to imply that, you guys do amazing work. I'm not totally sure it should be necessary to use the same syntax (`@inline url('path/to/file.css'`) perhaps? inlining is a slightly different intention to `@import` anyway) or perhaps could leave off the extension (is it really that 'strange', as you initially suggested? - throw an error if there's more than one file with that name?), or use an option like !inline just before the semicolon? I'm not sure what the best approach would be
",tbredin,inline
556,2014-07-31 02:55:57,"@chriseppstein did not mean to imply that, you guys do amazing work. I'm not totally sure it should be necessary to use the same syntax (`@inline url('path/to/file.css'`) perhaps? inlining is a slightly different intention to `@import` anyway) or perhaps could leave off the extension (is it really that 'strange', as you initially suggested? - throw an error if there's more than one file with that name?), or use an option like !inline just before the semicolon? I'm not sure what the best approach would be
",tbredin,import
556,2014-07-31 17:53:22,"> I'm not sure what the best approach would be

We have detailed what the best approach would be. We are overhauling how `@import` works, will be introducing some new directives (probably `@use`), and this is slated for version 4.0. It's a _lot_ of work. We could hack this feature (in fact, I already have if you read above). And of course, renaming your files to `.scss` while annoying, is not actually that hard. So, please, let's stop with the `+N`s on this issue. This feature is taking a long time because we want to do it right and because the work arounds exist and are not onerous.

Thanks.
",chriseppstein,use
556,2014-07-31 17:53:22,"> I'm not sure what the best approach would be

We have detailed what the best approach would be. We are overhauling how `@import` works, will be introducing some new directives (probably `@use`), and this is slated for version 4.0. It's a _lot_ of work. We could hack this feature (in fact, I already have if you read above). And of course, renaming your files to `.scss` while annoying, is not actually that hard. So, please, let's stop with the `+N`s on this issue. This feature is taking a long time because we want to do it right and because the work arounds exist and are not onerous.

Thanks.
",chriseppstein,import
556,2014-08-01 00:21:00,"@chriseppstein thanks, that sounds pretty good! I appreciate the effort these things take. Would be interested to hear more about the intention for `@use` as well. Renaming css files wasn't super simple simple if using something like bower, but I'm going to just pipe my vendor css through gulp. I did try your inliner as well but haven't had much success (probably my bad, I haven't had time to explore it yet). 

@ckihneman thanks; I was thinking about writing something like this as well - yoink!
",tbredin,use
556,2014-08-26 15:16:36,"@ckihneman I tried @chriseppstein 's tool https://github.com/chriseppstein/sass-css-importer but have 2 problems with it

1) It just import .css into .scss as a normal CSS import. There will be still an extra http reuest.
2) It @import the file at the top in Global.css while I want to load it after ABC.scss
",jitendravyas,import
556,2014-11-07 23:16:30,"Okay, so I'm going to throw in my two cents, because... fuck it. I'm pretty certain I've never seen a piece of production Sass code that used `@import ""file.css"";` as a traditional CSS import. Afaik, browser CSS imports are notoriously bad for performance and are now basically an unused feature. (http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)

I know that the `@use` syntax in 4.0 is going to be rock'n. @nex3 I saw your gist and it's pretty damn cool. And, I can't wait for that. But, I think the argument of breaking backwards compatibility or CSS compatibility is flawed in that I'm unaware of it actually being used. I'm sure someone has used it, but it's far less used (and therefore traumatic) than the global scoping change made in 3.4!

I think in 3.5 that `@import ""file.css"";` should just load in the damn file, if it can find it in the normal search paths, otherwise post a warning and just print out the `@import` as CSS. Also, `@import url('a.css');` should probably just be considered a regular CSS import, since it's specifying `url()`;

In fact, let's say someone was referencing a real CSS file, that was local to the Sass file, and they were using a CSS `@import` because they were unaware of its performance implications. I'd think it would be a magical, helpful thing, if the file actually ended up bundled into the main CSS file they were generating. I can't imagine someone being upset at enhanced CSS bundling. Remember, the browser has to stop when it sees the CSS `@import` and literally can't render anything on the page until it goes and issues a full other upstream request. Hence, why this CSS feature is a really bad idea.

The CSS ecosystem has changed wildly since we first implemented the rules for `@import` and I think that we're unduly inconveniencing people with rich front end build systems and huge CSS libraries, who use Sass as a central part of their CSS platform, in order to not break behaviour. Again, I know that we want to implement `@use` as a richer answer, but this seems pretty simple to implement _now_ and I'd suggest reconsidering the original response.
",hcatlin,use
556,2014-11-07 23:16:30,"Okay, so I'm going to throw in my two cents, because... fuck it. I'm pretty certain I've never seen a piece of production Sass code that used `@import ""file.css"";` as a traditional CSS import. Afaik, browser CSS imports are notoriously bad for performance and are now basically an unused feature. (http://www.stevesouders.com/blog/2009/04/09/dont-use-import/)

I know that the `@use` syntax in 4.0 is going to be rock'n. @nex3 I saw your gist and it's pretty damn cool. And, I can't wait for that. But, I think the argument of breaking backwards compatibility or CSS compatibility is flawed in that I'm unaware of it actually being used. I'm sure someone has used it, but it's far less used (and therefore traumatic) than the global scoping change made in 3.4!

I think in 3.5 that `@import ""file.css"";` should just load in the damn file, if it can find it in the normal search paths, otherwise post a warning and just print out the `@import` as CSS. Also, `@import url('a.css');` should probably just be considered a regular CSS import, since it's specifying `url()`;

In fact, let's say someone was referencing a real CSS file, that was local to the Sass file, and they were using a CSS `@import` because they were unaware of its performance implications. I'd think it would be a magical, helpful thing, if the file actually ended up bundled into the main CSS file they were generating. I can't imagine someone being upset at enhanced CSS bundling. Remember, the browser has to stop when it sees the CSS `@import` and literally can't render anything on the page until it goes and issues a full other upstream request. Hence, why this CSS feature is a really bad idea.

The CSS ecosystem has changed wildly since we first implemented the rules for `@import` and I think that we're unduly inconveniencing people with rich front end build systems and huge CSS libraries, who use Sass as a central part of their CSS platform, in order to not break behaviour. Again, I know that we want to implement `@use` as a richer answer, but this seems pretty simple to implement _now_ and I'd suggest reconsidering the original response.
",hcatlin,import
556,2014-11-08 00:46:50,"If remaining a strict superset is the main concern, then that's valid. But, I think telling people who need this tool to do their job to wait 2 years for a ""big rewrite"" of a major feature just to be able to do so something that seems very simple when you are using it (aka, it doesn't seem complex from the outside).

Again, I totally get, and support, the better modular import system of `@use`, but maybe something temporary like `@import ""file.css"" !force;` isn't the worst idea, just to help people out? Cleanliness of implementation is important, but this seems a little extreme to keep as a practical issue people are having and not fix it.

Plus, from libsass' perspective, we can't just use compass or Chris' importer. We're doing our best to remain a strict implementation of Ruby Sass (and dammit, we will!), but we can't give as easy of an answer to our users at the moment.
",hcatlin,use
556,2014-11-08 00:46:50,"If remaining a strict superset is the main concern, then that's valid. But, I think telling people who need this tool to do their job to wait 2 years for a ""big rewrite"" of a major feature just to be able to do so something that seems very simple when you are using it (aka, it doesn't seem complex from the outside).

Again, I totally get, and support, the better modular import system of `@use`, but maybe something temporary like `@import ""file.css"" !force;` isn't the worst idea, just to help people out? Cleanliness of implementation is important, but this seems a little extreme to keep as a practical issue people are having and not fix it.

Plus, from libsass' perspective, we can't just use compass or Chris' importer. We're doing our best to remain a strict implementation of Ruby Sass (and dammit, we will!), but we can't give as easy of an answer to our users at the moment.
",hcatlin,import
556,2014-11-26 23:13:17,"+1 for @import of .css files
",bradleyflood,import
556,2014-11-27 00:28:07,"@hcatlin libsass can handle this like Sass does, right now. Additionally, there's really no issue with either Ruby sass or libsass resolving `@import ""foo/bar""` to a css file. The only issue is when the explicit css extension is specified. We would break backwards compat.

In fact, you can make Ruby Sass resolve extensionless imports to css files like so:



This can be added to a compass configuration file, or it can be placed into a ruby file (e.g. `css_imports.rb`) and required with `-r ./css_imports.rb` to the sass command line.

Personally, I do not object to making this change to sass as the default.

Some environments (like rails) already allow css imports like this, as their default behavior.
",chriseppstein,import
556,2014-11-27 01:18:49,"Just a quick add to the conversation. I know that people have libraries of code written in CSS that they want to easily import into a project. As clearly illustrated here, breaking the norm functionality of the `@import` with standard CSS is not ideal. But to @hcatlin point, what is he advocating for is `@import` with CSS to act the same way as Sass. 

Ok, here it is .....  is it really all that hard/bad to change CSS files to SCSS and then just make them part of the natural functionality of the language?

I don't have two years to wait for augmented functionality, I have problems to solve and this works ok for me. If this is 'bad' to some people, I would love to know the case. 

This discussion makes me feel like we are over-engineering a solution. 
",blackfalcon,import
556,2014-11-27 02:08:38,"@blackfalcon Here is my scenario:

I'm building an application that uses Bower to manage packages and dependancies. It include multiple CSS based components (such as Normalize, and style sheets for specific Javascript packages).
The `bower_components` folder is never included on the production server nor in the Git repository, it is only used for local development. When compiling in development I want SASS to grab these CSS files from bower_components and compile and minify them with all my SCSS files, outputting 1 minified css file for development and production.

`@import '../bower_components/Magnific-Popup/dist/magnific-popup.css';`

I think it wrong in principle to be changing the .css files in the bower_components folder to .scss. As mentioned the bower_components folder is not kept in git (just like you generally wouldn't keep node_modules either).
Is the ideal solution then that each new developer downloading the Git repo has to then go and rename certain bower_components .css files to .scss? If so that is error prone and not ideal.
If not what is the proposed solution?

Currently I am using Grunt to do this for me but this is not ideal and I would like to move away from Grunt yet still be able to include and import outside .css files.
",bradleyflood,import
556,2014-11-27 07:42:24,"@bradleyflood I agree, when trying to manage CSS files in a Bower package, this can be an issue. 

I too ran into this issue and included this process into my grunt script where I pull CSS files from my Bower package, rename and place into a vendor directory. Similar to this [solution](http://gotofritz.net/blog/geekery/rename-files-while-copying-grunt/). 

To me, I don't see this as 'crazy', it keeps my packages intact and I get what I need. You may see this differently. 

I see the argument on both sides and I see the potential of the new `@use` directive. Guess we will see what happens. 
",blackfalcon,use
556,2014-12-04 16:13:15,":+1: 

@bradleyflood I have exactly the same use case, and I really hope to either see 4.0 out soon (with its new `@use` directive) or some kind of reasonable stopgap like @hcatlin [described.](https://github.com/sass/sass/issues/556#issuecomment-62229812)

In the meantime, @chriseppstein's [hack](https://github.com/sass/sass/issues/556#issuecomment-64730080) looks like what I'll be doing for now.
",mnquintana,use
556,2014-12-15 23:54:23,"Am I just doing something completely wrong? In my codepen I'm able to load a .css file into a SCSS file but in my application it doesn't work. I think the fact that SCSS/SASS couldn't import regular .css files from the very beginning is silly. If what we're doing is extending how the @import works then why not keep how it already worked and add on top of it?

http://codepen.io/CWSites/pen/ByKeNO

As a general note to @nex3 and @chriseppstein, I'm sorry for the earlier twitter exchange. Trying to have a discussion with less than 140 characters doesn't work well and I'm sure that I came across way worse than what I was intending...combined with my lack of knowledge on certain subjects. I realize that you guys do a lot, I wasn't trying to demand you work on anything. Just trying to understand why this has been going on for so long.
",CWSites,import
556,2014-12-16 10:04:32,"@CWSites It probably doesn't work in your application because the CSS-file is not in the public directory. In CodePen the CSS-file is obviously accessible, but it may not be in your situation? As Sass doesn't compile the @import into anything but a regular CSS-import, the file has to be accessible for the browser.

I think there should be a clarification here from one of the maintainers on the situation of this issue. Many people don't read the older comments (can't blame them, there's 110 total) but still post +1's and other comments that have been said already. I'm not very clear myself on what the situation is at the moment.
",codeclown,import
556,2014-12-16 14:59:49,"@CWSites Where is the disconnect? Although I definitely think it could be worded more clearly (since I didn't even realize this was the case until I found out the hard way), it does say that `@import` will ""compile to a CSS `@import` rule... [I]f the file's extension is `.css`.""
",mnquintana,import
556,2014-12-22 06:40:23,"`@use` would work for me too.
",chibicode,use
556,2014-12-23 10:27:08,"Why not `@import ""path.css"" !inline` ? Someone suggested `!force` at the very beginning of this thread.
",arcanis,import
554,2013-05-22 20:11:21,"Switch statements are just syntactic sugar for if/elseif/else:



The only time that's not the case is if you're omiting breaks for the purpose of falling through, but that's usually covered by adding expressions to the `@if` statement (eg. `@if $foo == a or $foo == b`).
",cimmanon,if
554,2013-05-22 20:16:43,"I agree that there is no functional requirement for `@switch`, it's just a little easier to read IMO.  It's just a ""nice to have"".
",parkerault,switch
554,2015-05-05 14:07:00,"@Chaos234 yes, you are correct.  This function accepts rgb as 3 numbers (between 0 and 255), rgba as 4 numbers (3 numbers between 0 and 255, and the last number being the opacity, which requires a value between 0 and 1), color name, color name with opacity, hex code, and hex code with opacity.
",jonathanfalkner,Chaos234
550,2012-11-02 23:50:55,"First of all, I'm not a big fan of changing the semantics of a stylesheet by external means like Ruby customizations. As much as possible, Sass stylesheets should have the same meaning regardless of external factors.

As for the `@unit` proposal, I'm generally wary of extensions that look too much like plain CSS. This runs a real risk of allowing users to define units that are later added to the spec.

@chriseppstein, what are your thoughts on this?
",nex3,chriseppstein
550,2012-11-02 23:50:55,"First of all, I'm not a big fan of changing the semantics of a stylesheet by external means like Ruby customizations. As much as possible, Sass stylesheets should have the same meaning regardless of external factors.

As for the `@unit` proposal, I'm generally wary of extensions that look too much like plain CSS. This runs a real risk of allowing users to define units that are later added to the spec.

@chriseppstein, what are your thoughts on this?
",nex3,unit
550,2012-11-04 09:23:06,"> First of all, I'm not a big fan of changing the semantics of a stylesheet by external means like Ruby customizations. As much as possible, Sass stylesheets should have the same meaning regardless of external factors.

The external (Ruby) API is just a simple way to get this working (for now) as I'm unsure about changing the SCSS/SASS parsers.

> As for the @unit proposal, I'm generally wary of extensions that look too much like plain CSS. This runs a real risk of allowing users to define units that are later added to the spec.

The proposed syntax is the first thing that came to mind. Here is another proposed syntax.



Or:


",fd,unit
550,2012-11-09 20:01:10,"The issue isn't the syntax of `@unit` itself, but rather the usage of the new units. A user seeing `1u` doesn't have any way of knowing if that's a real CSS unit or a custom unit.
",nex3,unit
544,2012-11-05 19:18:54,"@ReinierK I wouldn't say it destroys responsive grids, but it certainly requires using @include over @extend. The issue right now seems to be the ability to call ANY type of extend from within a media query (unless that @extend is inside that same mq directive, which doesn't make sense for your described setup).
",micahgodbolt,extend
544,2012-11-05 19:18:54,"@ReinierK I wouldn't say it destroys responsive grids, but it certainly requires using @include over @extend. The issue right now seems to be the ability to call ANY type of extend from within a media query (unless that @extend is inside that same mq directive, which doesn't make sense for your described setup).
",micahgodbolt,ReinierK
544,2012-11-05 19:18:54,"@ReinierK I wouldn't say it destroys responsive grids, but it certainly requires using @include over @extend. The issue right now seems to be the ability to call ANY type of extend from within a media query (unless that @extend is inside that same mq directive, which doesn't make sense for your described setup).
",micahgodbolt,include
544,2012-11-05 19:27:37,"Yes, you're right @micahgodbolt, but @includes shouldn't be used for this imho, as they're not really mixins, but simply place holders that I want to be accessible throughout my code, regardless of where I am (inside or outside a media query).
",TheDutchCoder,includes
543,2012-10-12 10:23:57,"I'm looking at switching to SASS from Stylus and trying to figure out how the functions I depend on will carry over. I can't see a native way of checking if something is contained in a list. I was hoping for something like these examples



The native list functions as documented on the sass-lang site seem not do this and I'm imagining that doing it in SassScript is going to perform better--especially if it is programmed by someone other than me; but for the moment I've made it as a `@function` like this:



Is there a better way? Is there a chance of a Sass Script version of this functionality making it in, if it doesn't already exist?
",lunelson,function
543,2013-02-13 17:54:04,"@lunelson: You could alternately use [`index`](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#index-instance_method) to check for the item, instead of `@each`:



After looking at it, you don't really need another function, since you'll check if `contains` equals false anyway -- stick with `index`.
",zaus,each
543,2014-09-30 10:57:25,"Check out the [SassyLists](http://sassylists.com/) library by @HugoGiraudel.



Demo: http://sassmeister.com/gist/17c6c7759b889374a341
",lolmaus,HugoGiraudel
534,2012-10-01 12:07:18,"I understand that this selector is invalid, however the error message is inaccurate:

> ""&"" may only be used at the beginning of a selector.)
>       error ./_paleblue.scss (Line 100: Invalid CSS after ""        a"": expected ""{"", was ""& { @extend %pb‚Ä¶""

That's not strictly true, because `&` can also be used at the end of a selector. I think the message should be:

> ""&"" may only be used at the beginning or end of a selector

However this error wouldn't explain why `a&` is invalid. I suggest a separate error is used for that case.
",bradleyayers,extend
533,2013-07-22 17:37:11,"I used to have a real-life use case for this, but I can't find an example in my recent work. Off the top of my head: 



@ericam is the original stackoverflow answer-er, and might have some in-use examples.
",robwierzbowski,ericam
533,2014-05-06 20:01:33,"Thanks, not my own! Copied/adapted from another source far in the past.

Honestly I haven't had to strip units since this issue was posted.
@chriseppstien ++

On Tuesday, May 6, 2014, Drew Lustro notifications@github.com wrote:

> Sick strip-units() function @robwierzbowskihttps://github.com/robwierzbowski
> 
> [image: :+1:]
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/533#issuecomment-42348889
> .

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,robwierzbowskihttps
533,2014-05-06 20:01:33,"Thanks, not my own! Copied/adapted from another source far in the past.

Honestly I haven't had to strip units since this issue was posted.
@chriseppstien ++

On Tuesday, May 6, 2014, Drew Lustro notifications@github.com wrote:

> Sick strip-units() function @robwierzbowskihttps://github.com/robwierzbowski
> 
> [image: :+1:]
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/533#issuecomment-42348889
> .

## 

Rob Wierzbowski
@robwierzbowski http://twitter.com/#!/robwierzbowski
http://github.com/robwierzbowski
http://robwierzbowski.com
",robwierzbowski,chriseppstien
531,2012-09-25 19:39:07,"There's no documentation for the fact that Sass will merge `@media screen { @media (min-width: 200px) { ... } }`.
",nex3,media
531,2013-02-26 04:27:31,"This is incorrect. From the reference:

> `@media` queries can also be nested within one another. The queries will then be combined using the `and` operator. For example:
> 
> 
> 
> is compiled to:
> 
> 

I'm not sure why I couldn't find than when I filed this issue, but it was there.
",nex3,media
521,2012-09-15 13:16:33,"The only implementation possible would be an extremely limited one.

## 

Nathaniel Higgins
http://nath.is

-----Original Message-----
From: Maikel D notifications@github.com
Date: Sat, 15 Sep 2012 06:13:15 
To: nex3/sasssass@noreply.github.com
Reply-To: nex3/sass reply@reply.github.com
Subject: [sass] Access to property values without the use of variables (#521)

Hello,

I'd love to see something like the following implemented in SASS/SCSS.

#container {
    position: absolute;
    left: 50%;
    top: 10%;
    width: 500px;
    margin-left: @width / -2; // -250
}

As you see on the last line, we get the value of 'width' and do some calculations to it.

---

Reply to this email directly or view it on GitHub:
https://github.com/nex3/sass/issues/521
",nathggns,width
519,2012-09-28 20:17:22,"There's some tricky parsing issues with the `+mixin: arg` syntax. In particular, the following construct is ambiguous:



`+bar:baz` there could either be a mixin with a `@content` argument or a selector beginning with the `+` combinator and ending with with the `:baz` pseudoclass. That said, we are considering alternative syntaxes that better match CSS in #366.
",nex3,content
518,2012-09-15 01:03:43,"Since SASS 3.2 we have variable arguments `@function test($args...) {}`, but I tried to pass them with that one variable to different functions like in this example:



And got this error:
`Syntax error: wrong number of arguments (1 for 4) for 'rgba'`
I also tried to use `nth()` function, but it does work very strange in functions, combined with conditionals and cause even more errors. Maybe there are some ways to pass multiple arguments to a function?
",CyberAP,function
511,2013-03-04 05:12:09,"A not quite the same example, but relevant (I think) to this issue is general scoping for placeholders. I‚Äôve put together a gist here: https://gist.github.com/makenosound/5079966.

I can see that you‚Äôd want to have common properties collated in the redundant rule, but ideally the compiler would be smart enough to ignore properties that get overridden in the nested `@extend`.
",makenosound,extend
502,2012-09-06 17:22:57,"I'm pretty sure @scottkellum told me he learned to program via SassScript. The language being accessible and simple, the ability to dig into library code and figure it out, was core to that growth curve.
",chriseppstein,scottkellum
500,2012-08-24 19:02:10,"I tried to combine @extend in nested media queries within a @mixin:



So the first @extend of .icon works, but the extended .small-icon within the media query not.
Without the usage of a mixin both works correctly:



If i define the first media query within the mixin this makes no difference.



Reproduced in OS X 10.8 with SASS 3.2.0.alpha.275 and 3.2.1
",michsch,extend
500,2012-08-24 19:02:10,"I tried to combine @extend in nested media queries within a @mixin:



So the first @extend of .icon works, but the extended .small-icon within the media query not.
Without the usage of a mixin both works correctly:



If i define the first media query within the mixin this makes no difference.



Reproduced in OS X 10.8 with SASS 3.2.0.alpha.275 and 3.2.1
",michsch,mixin
500,2012-08-24 19:53:36,"This is working as intended. the `.icon-calendar` class exists in the media context as well as outside it. It is not possible for a preprocessors to only apply the extend when the media query matches. In this case, you should simply move the extend outside of the `@media` block -- the semantics are the same for your needs as far as I can tell.
",chriseppstein,media
499,2012-08-24 19:25:02,"Why do you have this setup in the first place? If you write `@import ""main""`, it's ambiguous whether you want to import the partial or the non-partial.
",nex3,import
499,2012-08-25 02:52:57,"Apparently so. That is actually the issue.

Here's why. I've been writing @import '_main' in the files that I want to have whatever is in there. To me, a partial is just something that doesn't really deserve a stylesheet dedicated to it, or something that all my stylesheets will share...or a group of them or whatever.

When I write @import 'main' I expect that main.scss or main.sass is included. And when I write @import '_main', _main.sass or main.scss is included.

Also, why doesn't really have anything to do with the issue...I'm just reporting something that didn't make any sense to me. If this was a design decision that I just don't agree with, then I would hope that my reporting it would just increase the verbosity within the partial section of the documentation, or maybe an informative message on the watch output that tells me why it's not compiling the file I changed, so I'll know to rename my partials.
",adiktofsugar,import
499,2012-08-28 21:11:02,"This behavior is certainly by design. It's best practice for `@import` statements to never specify a partial explicitly nor to specify the extension. People who follow this best practice will find it easier to switch syntaxes or convert to/from a partial to a compiled-file.

Can you make a suggestion for what can be added to the docs to make this more clear?
",chriseppstein,import
499,2012-09-02 00:32:40,"Alright. There are two places in the docs where some explicit information could be added that explains what happens when you don't follow best practice. For the record, I don't see (at least near the @import rule declaration) anything about this best practice dealio you're talking about.

I think the most obvious place to put it is in the partials section, at the end. Something like ""If you then also make a file called colors.scss, everything breaks. This is by design. Don't do it"" Maybe highlighted in red with a warning sign. Depends on how serious you want to take this, I guess.
",adiktofsugar,import
495,2012-08-17 22:54:48,"After I updated the sass dependency from 3.1.20 to 3.2.1, I have been noticing a slow recompilation of my CSS files.

With 3.1.20, changing any SASS file and recompiling took about 5 seconds.

Now, with 3.2.1, the same operation takes about 25 seconds.

The only warning I can find, is about extending a missing class, because I'm currently using a `@extend .modal` (a Twitter Bootstrap class).  
Maybe it's trying to find that class and that's causing the slowness?

Other important gems used:


",chalofa,extend
495,2012-09-13 19:53:58,"I can confirm this. In 3.2 and 3.3 alpha compiling took about 18s. Downgrading to 3.1.21 reduced it to 2.5 seconds.

I'm also abusing bootstrap and `@extend`
",GBH,extend
495,2012-10-27 23:35:39,"@dgdavid I see you also use `@extend` to bring in bootstrap definitions instead of polluting your html with ridiculous classes like `table.table.table-striped.table-bordered.table-hover.table-condensed.table-shutthefuckup`. I like bootstrap in theory, but I really dislike how I'm forced to use it. `@extend` looked like a decent solution, but it doesn't scale (massive definitions if you have a lot of css) and incredibly slow even with version of sass that didn't make it several magnitudes slower.
",GBH,extend
495,2012-11-03 01:03:21,"It's worth noting that part of the reason this is so slow is that you're using `@extend` with very deeply nested selectors. `@extend` does a lot more work and produces a lot more output for each additional level of nesting. If you flattened out your stylesheet more, it would be faster and produce much less output.

That's not to say that I won't try to make this optimization faster, of course.
",nex3,extend
495,2012-11-10 01:59:37,"That commit should mitigate the issue until I can fix it entirely. The downside is that deeply nested `@extend`s now won't get thoroughly optimized.
",nex3,extend
495,2012-12-22 00:33:12,"I mean the CSS structure. When you have `@extend`s in selectors like `form div.text_position .nested-fields .control-group-row input[type=text]`, Sass has to do a lot of work to get rid of extra selectors that are generated. That could probably be shortened to `.control-group-row input[type=text]` and work just fine.
",nex3,extend
487,2012-08-16 00:16:41,"I'd say the best guide is just ""do what Compass does"". To my knowledge, no one's written any sort of formal document, although @chriseppstein may know of one. To address your questions in particular:

> I like to write mixins, variables and functions in lowerCamelCase to get a better differentiation between the native CSS & SASS functions, and the custom elements writed in Scss.

The style for identifier names is to make them all lower-case, separated by hyphens (e.g. `my-sass-identifier`). If you're worried about being confused between Sass and CSS functions, I'd say add a vendor-style prefix (e.g. `-my-function`).

> In nested elements, I'm always writing CSS properties first, and then in new lines the sub nested elements.

This is definitely correct. Sass will always move the properties above any nested elements, so keeping them that way in the source helps make it correspond more closely to the output.
",nex3,chriseppstein
483,2012-08-12 17:59:33,"Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following:





Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to [Issue 241](https://github.com/nex3/sass/issues/241) which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome.
",Snugug,parent
483,2012-08-12 17:59:33,"Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following:





Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to [Issue 241](https://github.com/nex3/sass/issues/241) which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome.
",Snugug,content
483,2012-08-12 19:16:49,"This use case is addressed by;

https://github.com/nex3/sass/issues/286

Hunt & pecked on my iPhone... Sorry if it's brief!

On Aug 12, 2012, at 10:59 AM, Snugug notifications@github.com wrote:

> Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following:
> 
> @mixin find-parent {
>   @debug @parent;
> }
> 
> #foo {
>   @include find-parent;
> 
>   .bar {
>     @include find-parent;
>   }
> }
> 
> # As a single string
> 
> '#foo'
> '#foo .bar'
> 
> # As a list
> 
> '#foo'
> '#foo', '.bar'
> Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to Issue 241 which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",chriseppstein,parent
483,2012-08-12 19:16:49,"This use case is addressed by;

https://github.com/nex3/sass/issues/286

Hunt & pecked on my iPhone... Sorry if it's brief!

On Aug 12, 2012, at 10:59 AM, Snugug notifications@github.com wrote:

> Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following:
> 
> @mixin find-parent {
>   @debug @parent;
> }
> 
> #foo {
>   @include find-parent;
> 
>   .bar {
>     @include find-parent;
>   }
> }
> 
> # As a single string
> 
> '#foo'
> '#foo .bar'
> 
> # As a list
> 
> '#foo'
> '#foo', '.bar'
> Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to Issue 241 which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",chriseppstein,include
483,2012-08-12 19:16:49,"This use case is addressed by;

https://github.com/nex3/sass/issues/286

Hunt & pecked on my iPhone... Sorry if it's brief!

On Aug 12, 2012, at 10:59 AM, Snugug notifications@github.com wrote:

> Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following:
> 
> @mixin find-parent {
>   @debug @parent;
> }
> 
> #foo {
>   @include find-parent;
> 
>   .bar {
>     @include find-parent;
>   }
> }
> 
> # As a single string
> 
> '#foo'
> '#foo .bar'
> 
> # As a list
> 
> '#foo'
> '#foo', '.bar'
> Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to Issue 241 which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",chriseppstein,content
483,2012-08-12 19:16:49,"This use case is addressed by;

https://github.com/nex3/sass/issues/286

Hunt & pecked on my iPhone... Sorry if it's brief!

On Aug 12, 2012, at 10:59 AM, Snugug notifications@github.com wrote:

> Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following:
> 
> @mixin find-parent {
>   @debug @parent;
> }
> 
> #foo {
>   @include find-parent;
> 
>   .bar {
>     @include find-parent;
>   }
> }
> 
> # As a single string
> 
> '#foo'
> '#foo .bar'
> 
> # As a list
> 
> '#foo'
> '#foo', '.bar'
> Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to Issue 241 which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",chriseppstein,debug
483,2012-08-12 19:16:49,"This use case is addressed by;

https://github.com/nex3/sass/issues/286

Hunt & pecked on my iPhone... Sorry if it's brief!

On Aug 12, 2012, at 10:59 AM, Snugug notifications@github.com wrote:

> Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following:
> 
> @mixin find-parent {
>   @debug @parent;
> }
> 
> #foo {
>   @include find-parent;
> 
>   .bar {
>     @include find-parent;
>   }
> }
> 
> # As a single string
> 
> '#foo'
> '#foo .bar'
> 
> # As a list
> 
> '#foo'
> '#foo', '.bar'
> Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to Issue 241 which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",chriseppstein,mixin
483,2012-08-12 19:37:30,"I skimmed that, didn't realize it was related as most of it didn't talk about this issue. I look forward to 3.3 (or can we call it 3.2.1?! It's something all of us RWD people want today!)

Sent from my iPad

On Aug 12, 2012, at 3:16 PM, Chris Eppstein notifications@github.com wrote:

> This use case is addressed by; 
> 
> https://github.com/nex3/sass/issues/286 
> 
> Hunt & pecked on my iPhone... Sorry if it's brief! 
> 
> On Aug 12, 2012, at 10:59 AM, Snugug notifications@github.com wrote: 
> 
> > Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following: 
> > 
> > @mixin find-parent { 
> > @debug @parent; 
> > } 
> > 
> > #foo { 
> > @include find-parent; 
> > 
> > .bar { 
> > @include find-parent; 
> > } 
> > } 
> > 
> > # As a single string
> > 
> > '#foo' 
> > '#foo .bar' 
> > 
> > # As a list
> > 
> > '#foo' 
> > '#foo', '.bar' 
> > Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to Issue 241 which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome. 
> > 
> > ‚Äî 
> > Reply to this email directly or view it on GitHub. 
> > 
> > ‚Äî
> > Reply to this email directly or view it on GitHub.
",Snugug,parent
483,2012-08-12 19:37:30,"I skimmed that, didn't realize it was related as most of it didn't talk about this issue. I look forward to 3.3 (or can we call it 3.2.1?! It's something all of us RWD people want today!)

Sent from my iPad

On Aug 12, 2012, at 3:16 PM, Chris Eppstein notifications@github.com wrote:

> This use case is addressed by; 
> 
> https://github.com/nex3/sass/issues/286 
> 
> Hunt & pecked on my iPhone... Sorry if it's brief! 
> 
> On Aug 12, 2012, at 10:59 AM, Snugug notifications@github.com wrote: 
> 
> > Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following: 
> > 
> > @mixin find-parent { 
> > @debug @parent; 
> > } 
> > 
> > #foo { 
> > @include find-parent; 
> > 
> > .bar { 
> > @include find-parent; 
> > } 
> > } 
> > 
> > # As a single string
> > 
> > '#foo' 
> > '#foo .bar' 
> > 
> > # As a list
> > 
> > '#foo' 
> > '#foo', '.bar' 
> > Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to Issue 241 which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome. 
> > 
> > ‚Äî 
> > Reply to this email directly or view it on GitHub. 
> > 
> > ‚Äî
> > Reply to this email directly or view it on GitHub.
",Snugug,include
483,2012-08-12 19:37:30,"I skimmed that, didn't realize it was related as most of it didn't talk about this issue. I look forward to 3.3 (or can we call it 3.2.1?! It's something all of us RWD people want today!)

Sent from my iPad

On Aug 12, 2012, at 3:16 PM, Chris Eppstein notifications@github.com wrote:

> This use case is addressed by; 
> 
> https://github.com/nex3/sass/issues/286 
> 
> Hunt & pecked on my iPhone... Sorry if it's brief! 
> 
> On Aug 12, 2012, at 10:59 AM, Snugug notifications@github.com wrote: 
> 
> > Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following: 
> > 
> > @mixin find-parent { 
> > @debug @parent; 
> > } 
> > 
> > #foo { 
> > @include find-parent; 
> > 
> > .bar { 
> > @include find-parent; 
> > } 
> > } 
> > 
> > # As a single string
> > 
> > '#foo' 
> > '#foo .bar' 
> > 
> > # As a list
> > 
> > '#foo' 
> > '#foo', '.bar' 
> > Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to Issue 241 which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome. 
> > 
> > ‚Äî 
> > Reply to this email directly or view it on GitHub. 
> > 
> > ‚Äî
> > Reply to this email directly or view it on GitHub.
",Snugug,content
483,2012-08-12 19:37:30,"I skimmed that, didn't realize it was related as most of it didn't talk about this issue. I look forward to 3.3 (or can we call it 3.2.1?! It's something all of us RWD people want today!)

Sent from my iPad

On Aug 12, 2012, at 3:16 PM, Chris Eppstein notifications@github.com wrote:

> This use case is addressed by; 
> 
> https://github.com/nex3/sass/issues/286 
> 
> Hunt & pecked on my iPhone... Sorry if it's brief! 
> 
> On Aug 12, 2012, at 10:59 AM, Snugug notifications@github.com wrote: 
> 
> > Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following: 
> > 
> > @mixin find-parent { 
> > @debug @parent; 
> > } 
> > 
> > #foo { 
> > @include find-parent; 
> > 
> > .bar { 
> > @include find-parent; 
> > } 
> > } 
> > 
> > # As a single string
> > 
> > '#foo' 
> > '#foo .bar' 
> > 
> > # As a list
> > 
> > '#foo' 
> > '#foo', '.bar' 
> > Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to Issue 241 which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome. 
> > 
> > ‚Äî 
> > Reply to this email directly or view it on GitHub. 
> > 
> > ‚Äî
> > Reply to this email directly or view it on GitHub.
",Snugug,debug
483,2012-08-12 19:37:30,"I skimmed that, didn't realize it was related as most of it didn't talk about this issue. I look forward to 3.3 (or can we call it 3.2.1?! It's something all of us RWD people want today!)

Sent from my iPad

On Aug 12, 2012, at 3:16 PM, Chris Eppstein notifications@github.com wrote:

> This use case is addressed by; 
> 
> https://github.com/nex3/sass/issues/286 
> 
> Hunt & pecked on my iPhone... Sorry if it's brief! 
> 
> On Aug 12, 2012, at 10:59 AM, Snugug notifications@github.com wrote: 
> 
> > Now that we have @content in Sass 3.2, I'd love the ability to know /what/ is calling my mixin. For this, I'd propose the @parent directive, which would spit back either a single string of the fully compiled parent selector, or a list of selectors in order they get added. So, something like the following: 
> > 
> > @mixin find-parent { 
> > @debug @parent; 
> > } 
> > 
> > #foo { 
> > @include find-parent; 
> > 
> > .bar { 
> > @include find-parent; 
> > } 
> > } 
> > 
> > # As a single string
> > 
> > '#foo' 
> > '#foo .bar' 
> > 
> > # As a list
> > 
> > '#foo' 
> > '#foo', '.bar' 
> > Because I know everyone likes real world usecases when adding this kinda thing, the usecase that I have for this is media query optimizations similar to Issue 241 which is highly requested for my Breakpoint compass extension. I understand the issues you have with including Issue 241 in Sass Core, but giving us Contrib people the power to work that out would be awesome. 
> > 
> > ‚Äî 
> > Reply to this email directly or view it on GitHub. 
> > 
> > ‚Äî
> > Reply to this email directly or view it on GitHub.
",Snugug,mixin
482,2012-08-12 15:22:20,"I'm seeing this too when I use Pow. The EOFError appears to occur when you do an `@include`.


",jeremyw,include
481,2012-08-20 18:46:30,"Okay, I buy it. That does fit the semantics of `@extend`.

> 
> 
> becomes:
> 
> 

This is a separate bug.
",nex3,extend
479,2012-08-10 16:13:26,"Thank @github for the ?w=1 parameter:

https://github.com/nex3/sass/pull/479/files?w=1
",chriseppstein,github
476,2012-08-08 17:44:28,"@nex3, I can reproduce this. Seems like a real bug.
",chriseppstein,nex3
473,2012-10-03 08:51:23,"Another idea I had recently WRT scoping, would be to allow definition of variables inside placeholder declarations, so that when you use `@extend` you extend not only the properties but also inherit variables scoped to that placeholder

Something like this


",lunelson,extend
473,2012-10-05 21:45:47,"@lunelson I think that leads to a very confusing experience when reading the code. It makes it very mysterious where the imported variable comes from. In addition, it doesn't really make sense with the mechanics of `@extend`.
",nex3,extend
473,2013-04-10 18:14:24,"@millermedeiros Re: local vars overwriting global vars being unintuitive, It depends on which language you're familiar with. JavaScript and C#, for example, both allow you to overwrite a variable in a containing context by default, and they have a local scope keyword (`var` in both cases) that gets used in declaration (I know C# also allows you to specify the type at declaration instead, but I'm trying to keep it simple).

Ruby, on the other hand, scopes all variables to their immediate context, except variables with a special notation (`$var` for globals and `@var` for instance variables). It might be nice to use something similar -- a symbol notation for defining scope -- since SASS has its roots in Ruby and is used by a lot of Ruby developers. However, we don't have a lot of symbols that aren't already being used by something else in CSS. I like your `!local` flag, although it does create an issue of syntactic ambiguity. Let's say we have this:



What is `width` in the mixin? `40px` or `30px`? The only solution I can think of is to 'hoist' the !local flag to the first `$wid` assignment/declaration, in which case all instances of `$wid` inside the mixin would be local. This would make sense to a JavaScript developer, but as with JavaScript, the intent isn't clear.

The `!global` identifier would become a bit clearer:



The trouble with this is that it would break a lot of SASS that people have already written, if they're expecting mixins to be able to modify global variables. Perhaps the best solution is to use some sort of naming convention in your mixins to avoid collisions, something like `$_var`.

It could be argued that this should be a developer practice: mixins, functions, and style blocks should never cause side-effects like changes to variables. But this may be hard to enforce when you're working with third-party libraries; who knows what sort of magic undocumented globals they might be using?
",pdaoust,var
473,2013-09-06 19:50:50,"@credford If you run that code, you'll see that `$value` remains `dontChangeThis` even after `shouldntChangeStuff` is run. Sass is lexically scoped; only variables in a lexically-visible parent scope will be overwritten. The feature request here is to add a way to shadow global variables even when they are lexically visible.
",nex3,credford
472,2012-08-06 20:06:49,"This code is in a patch for compass that I'm about to approve and I really feel like this can be cleaned up dramatically by adding some basic functional programming abilities to Sass.

In particular the importance of lists in css and the need to manipulate them using side-effects is causing severe pain in many of the more complex sass projects that I've seen under development recently.

Consider this code written in Sass's current syntax:



I'm not sure what the syntax should be, but so that we have something to throw darts at I propose that if the first statement of a ruleset is `->(<argument list>);` then the block would become an anonymous function if passed to a function. This same syntax could also be used by anonymous content blocks to receive arguments from mixins to their `@content` blocks.



which would emit:



This would necessitate the need for a built-in function that can be used in `@function` to call the anonymous function. Again, maybe there's a better name and semantics, but let's start with `yield`:



would compile to:



Following this, I would like Sass to add a number of Sass functions for operating on lists to make working with them much simpler. For instance a `map-to` function for mapping each value in a list to a new value.  `reject` and `keep` could be used to filter lists, etc.

The question of whether to allow named functions to be passed to other functions is a natural follow on. I would start with no for now because an anonymous function can be used to invoke a named function and we have this same issue with content blocks and named mixins. But later on, I imagine this pointer syntax could be used in a fairly natural way:



With these abilities the above original code above cleans up to:


",chriseppstein,content
472,2012-08-06 20:06:49,"This code is in a patch for compass that I'm about to approve and I really feel like this can be cleaned up dramatically by adding some basic functional programming abilities to Sass.

In particular the importance of lists in css and the need to manipulate them using side-effects is causing severe pain in many of the more complex sass projects that I've seen under development recently.

Consider this code written in Sass's current syntax:



I'm not sure what the syntax should be, but so that we have something to throw darts at I propose that if the first statement of a ruleset is `->(<argument list>);` then the block would become an anonymous function if passed to a function. This same syntax could also be used by anonymous content blocks to receive arguments from mixins to their `@content` blocks.



which would emit:



This would necessitate the need for a built-in function that can be used in `@function` to call the anonymous function. Again, maybe there's a better name and semantics, but let's start with `yield`:



would compile to:



Following this, I would like Sass to add a number of Sass functions for operating on lists to make working with them much simpler. For instance a `map-to` function for mapping each value in a list to a new value.  `reject` and `keep` could be used to filter lists, etc.

The question of whether to allow named functions to be passed to other functions is a natural follow on. I would start with no for now because an anonymous function can be used to invoke a named function and we have this same issue with content blocks and named mixins. But later on, I imagine this pointer syntax could be used in a fairly natural way:



With these abilities the above original code above cleans up to:


",chriseppstein,function
468,2012-08-02 16:35:11,"I am working with Sass 3.1.20 (Brainy Betty) and Rails 3.2.6.

I have a mixin with an em dash:



I use it as follows in _another file_:



I got something like `√¢‚Ç¨""`, while everything works when I use:



UPDATE:
@nex3 Those solutions doesn't work. (but I cannot reopen because I don't have permission...)
",collimarco,nex3
468,2012-08-03 22:39:01,"This sort of thing depends heavily on your system configuration. If you're using Rails, make sure that `Encoding.default_external` is set to the encoding you use in your Sass files; if you're using Sass from the command line, make sure that your system encoding configuration is set appropriately. You can also use the `@charset` directive at the top of your Sass file to manually declare what encoding you're using.

If neither of those solutions work, feel free to re-open this.
",nex3,charset
468,2014-02-27 21:15:36,"@nex3 Hey there. I'm on sass 3.1.20 and I've got this problem on my mac too. I tried to set `@charset ""UTF-8"";` at the top of my Sass files, as my editor saves all files in UTF-8, but it didn't make any difference.

By the way: collimarco said this already 2 years ago (by editing his issues). As far as I can tell we are not able to reopen the issue as you suggested.
",tobiasmuecksch,charset
467,2012-08-02 07:26:50,"### sass code:

<pre>
@mixin linear($color1, $color2)
  background-image: -moz-linear-gradient(top, $color1, $color2)
  background-image: -ms-linear-gradient(top, $color1, $color2)
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($color1), to($color2))
  background-image: -webkit-linear-gradient(top, $color1, $color2)
  background-image: -o-linear-gradient(top, $color1, $color2)
  background-image: linear-gradient(top, $color1, $color2)
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color1', endColorstr='$color2', GradientType=0)
  
.box2
  background-color: #fff
  background-repeat: repeat-x
  @include linear(#ccc, #667)
</pre>

### css code:

<pre>
.box2 {
  background-color: white;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #cccccc, #666677);
  background-image: -ms-linear-gradient(top, #cccccc, #666677);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#cccccc), to(#666677));
  background-image: -webkit-linear-gradient(top, #cccccc, #666677);
  background-image: -o-linear-gradient(top, #cccccc, #666677);
  background-image: linear-gradient(top, #cccccc, #666677);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color1', endColorstr='$color2', GradientType=0);
}
</pre>
",ooxxnm,include
467,2012-08-02 07:26:50,"### sass code:

<pre>
@mixin linear($color1, $color2)
  background-image: -moz-linear-gradient(top, $color1, $color2)
  background-image: -ms-linear-gradient(top, $color1, $color2)
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($color1), to($color2))
  background-image: -webkit-linear-gradient(top, $color1, $color2)
  background-image: -o-linear-gradient(top, $color1, $color2)
  background-image: linear-gradient(top, $color1, $color2)
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color1', endColorstr='$color2', GradientType=0)
  
.box2
  background-color: #fff
  background-repeat: repeat-x
  @include linear(#ccc, #667)
</pre>

### css code:

<pre>
.box2 {
  background-color: white;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient(top, #cccccc, #666677);
  background-image: -ms-linear-gradient(top, #cccccc, #666677);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#cccccc), to(#666677));
  background-image: -webkit-linear-gradient(top, #cccccc, #666677);
  background-image: -o-linear-gradient(top, #cccccc, #666677);
  background-image: linear-gradient(top, #cccccc, #666677);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color1', endColorstr='$color2', GradientType=0);
}
</pre>
",ooxxnm,mixin
459,2012-07-23 23:15:16,"Sass 3.2.0.alpha.275

I have a use case for extending selectors (some of which are in media queries) which previously worked without errors, and now gives warnings. My media queries need to be in a separate stylesheet as they are loaded based on whether or not RWD is required (drupal theme). 

If the selectors do not exist in the same stylesheet, I get warnings that a selector was not found. If everything is compiled in the same stylesheet, the @extend works. 

Here is an example of how the problem arises: https://gist.github.com/fa7a5d56c56941cbb799

Compiling everything in one stylesheet does actually work without warning: https://gist.github.com/c543973ef112be0f9bec
but doesn't solve the problem of needing to separate out the media-queries as a separate stylesheet using this @extend method. 

When a selector doesn't exist, shouldn't @extend just ignore the selector?

The only workaround I have found is to somehow include every selector in some manner, in both the mq and the default stylesheets, even if the selectors are assigned an empty value, at least the method still works. 

Suggestions? 
",krisbulman,extend
459,2012-07-26 00:16:54,"`@extend` warnings were added to make it easier to tell when you've made a mistake by writing an `@extend` that doesn't match any elements. See #111.

You can use the `!optional` flag to declare that an `@extend` shouldn't print a warning if it matches nothing; see [the relevant changelog entry](https://github.com/nex3/sass/blob/0db3cb6c69625af872dc39f2694ba1017516c2bb/doc-src/SASS_CHANGELOG.md#extend-warnings).
",nex3,extend
456,2012-07-23 08:19:12,"Sass 3.2 is throwing this error:



for this code:



It seems like Sass should be ignoring the selectors outside the `@media` context for this new `@extend` behavior and result in no errors.
",scottkellum,extend
456,2012-07-23 08:19:12,"Sass 3.2 is throwing this error:



for this code:



It seems like Sass should be ignoring the selectors outside the `@media` context for this new `@extend` behavior and result in no errors.
",scottkellum,media
456,2012-07-23 14:01:16,"Can I see a concrete use case instead of foos?

Hunt & pecked on my iPhone... Sorry if it's brief!

On Jul 23, 2012, at 1:19 AM, Scott Kellumreply@reply.github.com wrote:

> Sass 3.2 is throwing this error:
> 
> 
> 
> for this code:
> 
> 
> 
> It seems like Sass should be ignoring the selectors outside the `@media` context for this new `@extend` behavior and result in no errors.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/456
",chriseppstein,extend
456,2012-07-23 14:01:16,"Can I see a concrete use case instead of foos?

Hunt & pecked on my iPhone... Sorry if it's brief!

On Jul 23, 2012, at 1:19 AM, Scott Kellumreply@reply.github.com wrote:

> Sass 3.2 is throwing this error:
> 
> 
> 
> for this code:
> 
> 
> 
> It seems like Sass should be ignoring the selectors outside the `@media` context for this new `@extend` behavior and result in no errors.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/456
",chriseppstein,media
456,2012-07-23 14:21:09,"line 45 and 53 here: https://github.com/scottkellum/Singularity/blob/master/stylesheets/singularitygs/_mixins.sass#L53

Having a compile choke in a `@media` environment due to a loose selector outside of that `@media` environment seems counter intuitive to the new isolated `@media` extending behavior. I assumed this was just a bug in the code throwing the warning as isolated environments wouldn‚Äôt care about selectors outside of that environment.
",scottkellum,media
456,2012-07-26 00:04:59,"I'm not convinced this a bug. If a user uses `@extend` inside `@media`, they may well be expecting it to extend matching outer selectors as well. If it fails silently to do that, it could result in very confusing behavior.
",nex3,extend
456,2012-07-26 00:04:59,"I'm not convinced this a bug. If a user uses `@extend` inside `@media`, they may well be expecting it to extend matching outer selectors as well. If it fails silently to do that, it could result in very confusing behavior.
",nex3,media
456,2012-07-26 19:52:04,"We have a very clear idea of how we _want_ `@extend` to work. Unfortunately that's not always possible given the realities of CSS.

In this case, we want `.foo {a: b} @media screen {.bar {@extend .foo}}` to cause `.bar`s to be styled as `.foo`s only on screen devices. But CSS lacks the capability to express that without massive duplication of code and possibly destruction of specificity, so we need to decide what to do to work around that. We can't just have it behave consistently with the espoused semantics for `@extend`, because those semantics break down. So we have to decide in what way they should break.

In general, I think it's a good idea to print errors when the actual behavior can't follow the expected behavior. This protects users who expect behavior consistent with the espoused semantics of `@extend`.
",nex3,extend
456,2012-07-26 19:52:04,"We have a very clear idea of how we _want_ `@extend` to work. Unfortunately that's not always possible given the realities of CSS.

In this case, we want `.foo {a: b} @media screen {.bar {@extend .foo}}` to cause `.bar`s to be styled as `.foo`s only on screen devices. But CSS lacks the capability to express that without massive duplication of code and possibly destruction of specificity, so we need to decide what to do to work around that. We can't just have it behave consistently with the espoused semantics for `@extend`, because those semantics break down. So we have to decide in what way they should break.

In general, I think it's a good idea to print errors when the actual behavior can't follow the expected behavior. This protects users who expect behavior consistent with the espoused semantics of `@extend`.
",nex3,media
456,2012-07-26 20:03:46,"Sorry, maybe I didn‚Äôt make that clear. I do not want this behavior: `.foo {a: b} @media screen {.bar {@extend .foo}}`

Well, I am fine with that behavior, but the issue here is that the new behavior is not consistent. If the contexts are explicitly different then: `.foo {a: b} .bar {@extend .foo} @media screen { .foo {a: b} .bar {@extend .foo} }` should work fine and `.foo {a: b} .bar {@extend .foo} @media screen { .bar {@extend .foo} }` should throw an error saying it doesn‚Äôt know what `.foo` is in the context of `screen`.

If I explicitly place styles inside a context to extend I should be able to extend them, no? I shouldn‚Äôt have to change my whole naming scheme just to extend these.

I too can‚Äôt wait until this comes to browsers, but can we at least make it a somewhat useful feature in Sass? When used correctly it can save so much file size.
",scottkellum,extend
456,2012-07-26 20:03:46,"Sorry, maybe I didn‚Äôt make that clear. I do not want this behavior: `.foo {a: b} @media screen {.bar {@extend .foo}}`

Well, I am fine with that behavior, but the issue here is that the new behavior is not consistent. If the contexts are explicitly different then: `.foo {a: b} .bar {@extend .foo} @media screen { .foo {a: b} .bar {@extend .foo} }` should work fine and `.foo {a: b} .bar {@extend .foo} @media screen { .bar {@extend .foo} }` should throw an error saying it doesn‚Äôt know what `.foo` is in the context of `screen`.

If I explicitly place styles inside a context to extend I should be able to extend them, no? I shouldn‚Äôt have to change my whole naming scheme just to extend these.

I too can‚Äôt wait until this comes to browsers, but can we at least make it a somewhat useful feature in Sass? When used correctly it can save so much file size.
",scottkellum,media
456,2012-07-26 20:49:14,"> `.foo {a: b} .bar {@extend .foo} @media screen { .foo {a: b} .bar {@extend .foo} }` should work fine

The problem with this is that it's still pretty likely that the user intended the `.bar` inside the `@media` to extend the `.foo` outside it. If that is the user's intention, it should be an error.
",nex3,extend
456,2012-07-26 20:49:14,"> `.foo {a: b} .bar {@extend .foo} @media screen { .foo {a: b} .bar {@extend .foo} }` should work fine

The problem with this is that it's still pretty likely that the user intended the `.bar` inside the `@media` to extend the `.foo` outside it. If that is the user's intention, it should be an error.
",nex3,media
456,2013-05-27 18:45:02,"I am new to SASS and I just learned and saw the power of %placehoders. This is a much better way than using mixins for repeating code.

Today I first saw this Warning ""@extending an outer selector from within @media is deprecated"" and I was very disappointed because of the mentioned ""This will be an error in Sass 3.3"".

If one uses it the wrong way it will not work, but if someone knows what he is doing, this is a great way to reduce size of compiled CSS.

By turning the warning into an error, you protect the bungling at a very high cost, by limit the gifted.

You asked for some example code. I made a mixin recently which I wanted to discuss. Let's see, if I am gifted or should be protected ;-)
My mixin was made to show the background of a susy header or footer or whatever over the full width of the parent container.
I hope that this can prove @extend in @media is quite important:



The Placeholder %xxx causes this strange warning, although it is 100% sure that the two elements that use that Placeholder will be in the same @Media section. I do not understand why this should be prohibited.
And ask you to rethink changing this to an ERROR and keep it as a WARNING.
",Hannes-III,extending
456,2013-05-27 18:45:02,"I am new to SASS and I just learned and saw the power of %placehoders. This is a much better way than using mixins for repeating code.

Today I first saw this Warning ""@extending an outer selector from within @media is deprecated"" and I was very disappointed because of the mentioned ""This will be an error in Sass 3.3"".

If one uses it the wrong way it will not work, but if someone knows what he is doing, this is a great way to reduce size of compiled CSS.

By turning the warning into an error, you protect the bungling at a very high cost, by limit the gifted.

You asked for some example code. I made a mixin recently which I wanted to discuss. Let's see, if I am gifted or should be protected ;-)
My mixin was made to show the background of a susy header or footer or whatever over the full width of the parent container.
I hope that this can prove @extend in @media is quite important:



The Placeholder %xxx causes this strange warning, although it is 100% sure that the two elements that use that Placeholder will be in the same @Media section. I do not understand why this should be prohibited.
And ask you to rethink changing this to an ERROR and keep it as a WARNING.
",Hannes-III,media
456,2013-05-27 18:45:02,"I am new to SASS and I just learned and saw the power of %placehoders. This is a much better way than using mixins for repeating code.

Today I first saw this Warning ""@extending an outer selector from within @media is deprecated"" and I was very disappointed because of the mentioned ""This will be an error in Sass 3.3"".

If one uses it the wrong way it will not work, but if someone knows what he is doing, this is a great way to reduce size of compiled CSS.

By turning the warning into an error, you protect the bungling at a very high cost, by limit the gifted.

You asked for some example code. I made a mixin recently which I wanted to discuss. Let's see, if I am gifted or should be protected ;-)
My mixin was made to show the background of a susy header or footer or whatever over the full width of the parent container.
I hope that this can prove @extend in @media is quite important:



The Placeholder %xxx causes this strange warning, although it is 100% sure that the two elements that use that Placeholder will be in the same @Media section. I do not understand why this should be prohibited.
And ask you to rethink changing this to an ERROR and keep it as a WARNING.
",Hannes-III,Media
456,2013-05-27 18:45:02,"I am new to SASS and I just learned and saw the power of %placehoders. This is a much better way than using mixins for repeating code.

Today I first saw this Warning ""@extending an outer selector from within @media is deprecated"" and I was very disappointed because of the mentioned ""This will be an error in Sass 3.3"".

If one uses it the wrong way it will not work, but if someone knows what he is doing, this is a great way to reduce size of compiled CSS.

By turning the warning into an error, you protect the bungling at a very high cost, by limit the gifted.

You asked for some example code. I made a mixin recently which I wanted to discuss. Let's see, if I am gifted or should be protected ;-)
My mixin was made to show the background of a susy header or footer or whatever over the full width of the parent container.
I hope that this can prove @extend in @media is quite important:



The Placeholder %xxx causes this strange warning, although it is 100% sure that the two elements that use that Placeholder will be in the same @Media section. I do not understand why this should be prohibited.
And ask you to rethink changing this to an ERROR and keep it as a WARNING.
",Hannes-III,extend
456,2013-05-28 21:02:41,"Note: In #774 we have proposed a new directive (`@at-root`) that would allow `@extend` to be called from outside the media query even when within the scope of a media query. I think this allows for the valid, advanced use cases that are not currently met for using `@extend` and getting this warning.
",chriseppstein,extend
456,2013-05-28 21:02:41,"Note: In #774 we have proposed a new directive (`@at-root`) that would allow `@extend` to be called from outside the media query even when within the scope of a media query. I think this allows for the valid, advanced use cases that are not currently met for using `@extend` and getting this warning.
",chriseppstein,at-root
456,2013-10-09 20:14:39,"I used @mixin to resolve this warning:



Not sure if it's the best approach but thought I would share.
",ntreadway,mixin
456,2013-12-02 14:30:41,"This behaviour is preventing us from what I see as a valid use case for using @extend within a media query. We are using Glue (with some modifications to generate a scss file instead of css) and style our icons up like this:



Now, this works fine... Until you need to show a different icon for a different viewport size for example:



Is there anything we can do to work around this? I tried the mixin suggested by @ntreadway above but that didn't seem to work.
",WillsB3,extend
456,2013-12-03 06:55:48,"@scottkellum, @WillsB3, it seems that Sass maintainers just don't want us to be able to do that. :(

I also [tried](https://github.com/nex3/sass/issues/984) to bring this problem up (i'm sorry for creating a duplicate issue). I suggested that Sass should maintain a separate extendable list of selectors for each unique media query. But @chriseppstein considers this to be counter-intuitive for many users.

@chriseppstein points out that Sass does allow to extend from media queries. To do this, you have to declare a separate extendable selector for each unique media query, so that _the extended value wasn't found outside the media query_. This can be done either manually or using a technique called [""Maps, Media & Extend, Oh my!""](http://sassmeister.com/gist/7764882).

Basically, the ""Oh, my"" technique requires that:
- all extendable selectors should be declared:
  - from within an initialization mixin,
  - via `@at-root` directive,
  - with an interpolated media query name within each selector's name;
- you have to maintain a global table of what extendables have been initialized for what media queries;
- you have to call the mixin prior to each `@extend` call.

Oh my, it's _so intuitive_ that i'm still not sure whether i correctly understand what's going on in that example. So you can correct me if you grasped it better.

---

Well, this is the direction where modern Sass is heading for. Another example of the tendency is the way parent selector can be interpolated.

In LESS and Stylus you can do:



To achieve the same result in Sass, you have to do:



I guess that if you choose Sass over other preprocessors then you just have to accept that ""intuitive"" means not ""intuitive from the perspective of users"" but rather ""from the perspective of the internal logic of the Sass compiler"". 
",lolmaus,at-root
456,2013-12-03 06:55:48,"@scottkellum, @WillsB3, it seems that Sass maintainers just don't want us to be able to do that. :(

I also [tried](https://github.com/nex3/sass/issues/984) to bring this problem up (i'm sorry for creating a duplicate issue). I suggested that Sass should maintain a separate extendable list of selectors for each unique media query. But @chriseppstein considers this to be counter-intuitive for many users.

@chriseppstein points out that Sass does allow to extend from media queries. To do this, you have to declare a separate extendable selector for each unique media query, so that _the extended value wasn't found outside the media query_. This can be done either manually or using a technique called [""Maps, Media & Extend, Oh my!""](http://sassmeister.com/gist/7764882).

Basically, the ""Oh, my"" technique requires that:
- all extendable selectors should be declared:
  - from within an initialization mixin,
  - via `@at-root` directive,
  - with an interpolated media query name within each selector's name;
- you have to maintain a global table of what extendables have been initialized for what media queries;
- you have to call the mixin prior to each `@extend` call.

Oh my, it's _so intuitive_ that i'm still not sure whether i correctly understand what's going on in that example. So you can correct me if you grasped it better.

---

Well, this is the direction where modern Sass is heading for. Another example of the tendency is the way parent selector can be interpolated.

In LESS and Stylus you can do:



To achieve the same result in Sass, you have to do:



I guess that if you choose Sass over other preprocessors then you just have to accept that ""intuitive"" means not ""intuitive from the perspective of users"" but rather ""from the perspective of the internal logic of the Sass compiler"". 
",lolmaus,extend
456,2013-12-07 01:38:19,"It's very easy to come up with individual examples to justify all kinds of behavior, but that doesn't mean the behavior is good for the ecosystem in general.

This issue in particular is thorny because the ideal behavior just isn't possible for a preprocessor. The semantics of `@extend` simply cannot be satisfied across media queries without violating the user expectation about how many selectors will be generated. Following this expectation is very important; the size of the generated stylesheet concerns users a great deal, both from a bandwidth perspective and for staying within IE's selector limit. Many users use `@extend` specifically because it produces more compact output than mixins. We cannot silently multiply the size of their selectors based on the context in which they use `@extend`.

There's been a lot of discussion about this, here and elsewhere, but really what it all boils down to is ""I wish I could do it."" I wish that too. But it's not enough to want it; it has to be possible. In all this discussion, I've seen practically no one\* address the issues preventing us from making this work. If you want to use `@extend` in media queries, tell us how to make it work. We're all ears.

\* With the notable exception of @rachelnabors who suggested the current scheme of allowing `@extend` in media queries as long as it didn't reach outside them.
",nex3,extend
456,2013-12-07 01:38:19,"It's very easy to come up with individual examples to justify all kinds of behavior, but that doesn't mean the behavior is good for the ecosystem in general.

This issue in particular is thorny because the ideal behavior just isn't possible for a preprocessor. The semantics of `@extend` simply cannot be satisfied across media queries without violating the user expectation about how many selectors will be generated. Following this expectation is very important; the size of the generated stylesheet concerns users a great deal, both from a bandwidth perspective and for staying within IE's selector limit. Many users use `@extend` specifically because it produces more compact output than mixins. We cannot silently multiply the size of their selectors based on the context in which they use `@extend`.

There's been a lot of discussion about this, here and elsewhere, but really what it all boils down to is ""I wish I could do it."" I wish that too. But it's not enough to want it; it has to be possible. In all this discussion, I've seen practically no one\* address the issues preventing us from making this work. If you want to use `@extend` in media queries, tell us how to make it work. We're all ears.

\* With the notable exception of @rachelnabors who suggested the current scheme of allowing `@extend` in media queries as long as it didn't reach outside them.
",nex3,rachelnabors
456,2013-12-14 01:33:50,"@lolmaus The issue isn't just the output size in an absolute sense; in general, people tend to overestimate the impact of duplicated text and underestimate the effectiveness of gzip compression_. The primary issue is the ability of users to reason about what their output will look like. Both the mixin solution you describe and Chris's solution have the extremely valuable advantage of *_making the functioning of the compiler explicit**.

When a user writes `@include background-foo` they know that that's going to copy the styles rather than move around their selectors, because they're explicitly requesting it. If we just allowed `@extend` to silently behave very differently when used across media queries, it would be doing something the users didn't expect and didn't intend. Even if often that will have the same result as what they tried, it won't always, and that's a problem.

You're also underestimating the degree of extra text that would be generated if we silently copied selectors. In addition to the selectors being extended, the full media query would need to be copied in order to preserve the order that the selectors were defined in (which is clearly important). For example:



would need to be compiled to



\* This quirk of estimation means that generating more output than users expect will make them very unhappy, but generating large amounts of output that they do expect won't cause many problems.
",nex3,extend
456,2013-12-14 01:33:50,"@lolmaus The issue isn't just the output size in an absolute sense; in general, people tend to overestimate the impact of duplicated text and underestimate the effectiveness of gzip compression_. The primary issue is the ability of users to reason about what their output will look like. Both the mixin solution you describe and Chris's solution have the extremely valuable advantage of *_making the functioning of the compiler explicit**.

When a user writes `@include background-foo` they know that that's going to copy the styles rather than move around their selectors, because they're explicitly requesting it. If we just allowed `@extend` to silently behave very differently when used across media queries, it would be doing something the users didn't expect and didn't intend. Even if often that will have the same result as what they tried, it won't always, and that's a problem.

You're also underestimating the degree of extra text that would be generated if we silently copied selectors. In addition to the selectors being extended, the full media query would need to be copied in order to preserve the order that the selectors were defined in (which is clearly important). For example:



would need to be compiled to



\* This quirk of estimation means that generating more output than users expect will make them very unhappy, but generating large amounts of output that they do expect won't cause many problems.
",nex3,include
456,2013-12-14 11:40:04,"> The primary issue is the ability of users to reason about what their output will look like.

Oh come on! Sass `@extend` is counter-intuitive in the first place. Common users don't understand how it works. Here's the most recent example, just five days ago: https://github.com/nex3/sass/issues/1038 The same question arises on Stackoverflow every week. The main feature of it is that users don't understand what is going on with their code and blame Sass to be buggy. Even though it is described explicitly in documentation.

But there's more than that. I believe that most users just don't even notice that their incorrectly extended selectors become bloated, simply because it doesn't break the looks.

So my point is: if you use extends, you should either get your ass to learn how it works or just accept the fact that the convenience of using `@extend` may result in not the shortest CSS possible.

Sass 3.3 introduces a lot of new stuff, some of it is far from being intuitive. Why do you expect that common users will be quick to grasp `@at-root #{&}-mymodule` (while it's simply `&-mymodule` in Less and Stylus), and at the same time be unhappy with the fact that `@extend` inside media queries doesn't fail anymore?

I believe that if Sass 3.3 introduces an ability to extend from within media queries, it will not make anyone unhappy with the size of their CSS. If a user is advanced enough to care about the size of generated CSS, it won't be hard for him to learn how Sass 3.3 extends work.

PS Ain't Sass 3.3 capable of merging identical media queries yet? Is there an issue ticket for that already?
",lolmaus,extend
456,2013-12-14 11:40:04,"> The primary issue is the ability of users to reason about what their output will look like.

Oh come on! Sass `@extend` is counter-intuitive in the first place. Common users don't understand how it works. Here's the most recent example, just five days ago: https://github.com/nex3/sass/issues/1038 The same question arises on Stackoverflow every week. The main feature of it is that users don't understand what is going on with their code and blame Sass to be buggy. Even though it is described explicitly in documentation.

But there's more than that. I believe that most users just don't even notice that their incorrectly extended selectors become bloated, simply because it doesn't break the looks.

So my point is: if you use extends, you should either get your ass to learn how it works or just accept the fact that the convenience of using `@extend` may result in not the shortest CSS possible.

Sass 3.3 introduces a lot of new stuff, some of it is far from being intuitive. Why do you expect that common users will be quick to grasp `@at-root #{&}-mymodule` (while it's simply `&-mymodule` in Less and Stylus), and at the same time be unhappy with the fact that `@extend` inside media queries doesn't fail anymore?

I believe that if Sass 3.3 introduces an ability to extend from within media queries, it will not make anyone unhappy with the size of their CSS. If a user is advanced enough to care about the size of generated CSS, it won't be hard for him to learn how Sass 3.3 extends work.

PS Ain't Sass 3.3 capable of merging identical media queries yet? Is there an issue ticket for that already?
",lolmaus,at-root
456,2013-12-14 14:32:42,"@lolmaus There is a Latin phrase that I think sums up the counter-point to your argument: _Ignorantia juris non excusat_ or ""Ignorance of the law does not excuse"". Suggesting that it's OK to codify bad behavior because people don't know any better is a terrible suggestion made worse by the rude delivery. I, and many fellow framework developers, know exactly how `@extend` works and work hard to optimize our code around its benefits. Extension, especially in a pre-process language, is tricky as hell (as evidenced by the fact that really only the Ruby implementation of Sass gets it right of all CSS Preprocessors, and that's because it's caught most of the edge cases already and takes hard lines against bad output). When used properly, extension can actually produce CSS that's _smaller_ than you would write by hand as you're able to micro-optimize in a system where otherwise you wouldn't think to. Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one, missing the point of @nex3's argument against; it's about predictability of and a silent change in the way an interaction happens, not necessarily the actual duplicated code.

As for your tangent into other features of Sass 3.3, while `@at-root` is more verbose, it's much more predictable (again that word) than the way it's handled in Less and Stylus. It also provides users with options and can be used in more places than just interpolating a nested selector, providing a consistent and predictable (again) interface for referring to the root of a document. Merging identical media queries? As stated time and time again by @nex3 and discussed at length in #241, re-ordering media queries is dangerous and (gasp) unpredictable. Instead, a direct approach (`@target`) has been proposed.

One of the key aspects of User Experience (of which Developer Experience, what we're talking about, falls under) is that actions should have predictable outcomes. On a website, if a red button had the text ""Free Shipping"" and if clicked on a product page, it provided free shipping, but if clicked on from an item in a carousel shipping was $5 because somewhere in the business logic of that button it's only free from a product page, people would be pissed off. The argument is for making the ""Free Shipping"" button always mean ""Free Shipping"" and if shipping isn't free, make sure the user explicitly knows.
",Snugug,at-root
456,2013-12-14 14:32:42,"@lolmaus There is a Latin phrase that I think sums up the counter-point to your argument: _Ignorantia juris non excusat_ or ""Ignorance of the law does not excuse"". Suggesting that it's OK to codify bad behavior because people don't know any better is a terrible suggestion made worse by the rude delivery. I, and many fellow framework developers, know exactly how `@extend` works and work hard to optimize our code around its benefits. Extension, especially in a pre-process language, is tricky as hell (as evidenced by the fact that really only the Ruby implementation of Sass gets it right of all CSS Preprocessors, and that's because it's caught most of the edge cases already and takes hard lines against bad output). When used properly, extension can actually produce CSS that's _smaller_ than you would write by hand as you're able to micro-optimize in a system where otherwise you wouldn't think to. Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one, missing the point of @nex3's argument against; it's about predictability of and a silent change in the way an interaction happens, not necessarily the actual duplicated code.

As for your tangent into other features of Sass 3.3, while `@at-root` is more verbose, it's much more predictable (again that word) than the way it's handled in Less and Stylus. It also provides users with options and can be used in more places than just interpolating a nested selector, providing a consistent and predictable (again) interface for referring to the root of a document. Merging identical media queries? As stated time and time again by @nex3 and discussed at length in #241, re-ordering media queries is dangerous and (gasp) unpredictable. Instead, a direct approach (`@target`) has been proposed.

One of the key aspects of User Experience (of which Developer Experience, what we're talking about, falls under) is that actions should have predictable outcomes. On a website, if a red button had the text ""Free Shipping"" and if clicked on a product page, it provided free shipping, but if clicked on from an item in a carousel shipping was $5 because somewhere in the business logic of that button it's only free from a product page, people would be pissed off. The argument is for making the ""Free Shipping"" button always mean ""Free Shipping"" and if shipping isn't free, make sure the user explicitly knows.
",Snugug,extend
456,2013-12-14 14:32:42,"@lolmaus There is a Latin phrase that I think sums up the counter-point to your argument: _Ignorantia juris non excusat_ or ""Ignorance of the law does not excuse"". Suggesting that it's OK to codify bad behavior because people don't know any better is a terrible suggestion made worse by the rude delivery. I, and many fellow framework developers, know exactly how `@extend` works and work hard to optimize our code around its benefits. Extension, especially in a pre-process language, is tricky as hell (as evidenced by the fact that really only the Ruby implementation of Sass gets it right of all CSS Preprocessors, and that's because it's caught most of the edge cases already and takes hard lines against bad output). When used properly, extension can actually produce CSS that's _smaller_ than you would write by hand as you're able to micro-optimize in a system where otherwise you wouldn't think to. Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one, missing the point of @nex3's argument against; it's about predictability of and a silent change in the way an interaction happens, not necessarily the actual duplicated code.

As for your tangent into other features of Sass 3.3, while `@at-root` is more verbose, it's much more predictable (again that word) than the way it's handled in Less and Stylus. It also provides users with options and can be used in more places than just interpolating a nested selector, providing a consistent and predictable (again) interface for referring to the root of a document. Merging identical media queries? As stated time and time again by @nex3 and discussed at length in #241, re-ordering media queries is dangerous and (gasp) unpredictable. Instead, a direct approach (`@target`) has been proposed.

One of the key aspects of User Experience (of which Developer Experience, what we're talking about, falls under) is that actions should have predictable outcomes. On a website, if a red button had the text ""Free Shipping"" and if clicked on a product page, it provided free shipping, but if clicked on from an item in a carousel shipping was $5 because somewhere in the business logic of that button it's only free from a product page, people would be pissed off. The argument is for making the ""Free Shipping"" button always mean ""Free Shipping"" and if shipping isn't free, make sure the user explicitly knows.
",Snugug,target
456,2013-12-14 14:46:40,"Speaking of Free Shipping, @nex3 @chriseppstein thoughts on providing a way for users to explicitly state that they wish a new extension context be created (i.e. duplicate the thing being extended and use that where appropriate)? Something like the following:



_would compile to_



Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical `@media` contexts (but include ones in `or` chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal `@extend` pattern of ""all"" doesn't quite make sense here, but because it is an explicit call, a user will understand that they're changing how it works.
",Snugug,extend
456,2013-12-14 14:46:40,"Speaking of Free Shipping, @nex3 @chriseppstein thoughts on providing a way for users to explicitly state that they wish a new extension context be created (i.e. duplicate the thing being extended and use that where appropriate)? Something like the following:



_would compile to_



Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical `@media` contexts (but include ones in `or` chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal `@extend` pattern of ""all"" doesn't quite make sense here, but because it is an explicit call, a user will understand that they're changing how it works.
",Snugug,media
456,2013-12-14 21:54:15,"@Snugug 

> Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical @media contexts (but include ones in or chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal @extend pattern of ""all"" doesn't quite make sense here

Maybe you didn't undersand what i'm suggesting and that's why we have this argument...

I'm suggesting that a new extend context should be unconditionally created for every unique media query type. Within each such context, `@extend` should work as usual. Extends from different contexts should not be aware of each other.

This behaviour is absolutely predictable, it does not require Sass to do any decision making, it does not require rearranging selectors ""to the first or last item"", and the ""normal `@extend` pattern"" will still make perfect sense here.

---

> Suggesting that it's OK to codify bad

If you consider this behaviour bad, please provide concrete examples and arguments. I provide mine below.

---

> I, and many fellow framework developers, know exactly how @extend works and work hard to optimize our code around its benefits.

Currently Sass does not allow to extend the same selectors inside different media queries (or inside + outside a media query). It just doesn't work, and this fact has no benefit at all.

---

> Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one

I never did such an argument. My argument was: Let users do what is currently impossible. If they want to use it, they can read docs and learn how it will work for them.

If they're neglectful so much that they don't read, then they will hardly notice the difference. @nex3 cares about how users will be surprised by the change, but they are already [misusing](https://github.com/nex3/sass/issues/1038) `@extend` all the time and most of them don't even notice it. Also, how can you be surprised by something you're not doing?

Let me empathize this. Nobody is currently extending same selectors within different media queries because it just doesn't work! Enabling this will not change the output of existing code.

Only people who read that extending same selectors from different media queries has been enabled in Sass 3.3 will start using it. And they will know how it works because they have just read it!

There also will be newbies who will ignorantly use extends in media queries without knowing how it works. But it will not hurt them because:
1. they will see in the browser exactly what they wanted;
2. resulting CSS size will not be larger than the mixin alternative;
3. the suggested behavior does not introduce new collisions of any kind or any unwanted behaviour (other than the fact that when you ask for an extend within a media query then you ‚Äîsurpise!‚Äî get an extend within a media query).

---

> @at-root is more verbose, it's much more predictable

So why do people stumble on it all the time? Parent selector is probably the most misused feature in Sass 3.2. ""Why does my `&-foo` not work"" is the most popular question on Stackoverflow, with ""Why does my `#{&}-foo` produce bloated markup"" being close on the heels. Again, a lot of users just don't notice that their `#{&}-foo` produces bloated markup.

As for `@at-root`, it looks logical for Sass gurus who know Sass inside out, but it is counter-intuitive for normal users. And @chriseppstein's suggestion to consider parent selector's [crazy behavior](https://github.com/nex3/sass/issues/1036) to be normal and to work around it with `.foo, .bar { #{append-to-selector(&, "".baz"")} {a:b;}}` is ridiculous. No sane person (who's not a Sass maintainer/guru) will consider _that_ to be intuitive.

I just don't understand why you let that counter-intuitive stuff pass and ban the possibility of extending from different media queries. It just does not make sense. :(

---

> Merging identical media queries? re-ordering media queries is dangerous and (gasp) unpredictable

The `@extend` directive always merges selectors. So if Sass 3.3 produced a merged media query for each extend, it will not be unpredictable. Also, it will not break anything.

---

> `@extend %half !duplicate;`
> because it is an explicit call, a user will understand that they're changing how it works.

Because doing this without `!duplicate` will still be impossible, this is how users will feel when using `!duplicate`:


",lolmaus,extend
456,2013-12-14 21:54:15,"@Snugug 

> Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical @media contexts (but include ones in or chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal @extend pattern of ""all"" doesn't quite make sense here

Maybe you didn't undersand what i'm suggesting and that's why we have this argument...

I'm suggesting that a new extend context should be unconditionally created for every unique media query type. Within each such context, `@extend` should work as usual. Extends from different contexts should not be aware of each other.

This behaviour is absolutely predictable, it does not require Sass to do any decision making, it does not require rearranging selectors ""to the first or last item"", and the ""normal `@extend` pattern"" will still make perfect sense here.

---

> Suggesting that it's OK to codify bad

If you consider this behaviour bad, please provide concrete examples and arguments. I provide mine below.

---

> I, and many fellow framework developers, know exactly how @extend works and work hard to optimize our code around its benefits.

Currently Sass does not allow to extend the same selectors inside different media queries (or inside + outside a media query). It just doesn't work, and this fact has no benefit at all.

---

> Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one

I never did such an argument. My argument was: Let users do what is currently impossible. If they want to use it, they can read docs and learn how it will work for them.

If they're neglectful so much that they don't read, then they will hardly notice the difference. @nex3 cares about how users will be surprised by the change, but they are already [misusing](https://github.com/nex3/sass/issues/1038) `@extend` all the time and most of them don't even notice it. Also, how can you be surprised by something you're not doing?

Let me empathize this. Nobody is currently extending same selectors within different media queries because it just doesn't work! Enabling this will not change the output of existing code.

Only people who read that extending same selectors from different media queries has been enabled in Sass 3.3 will start using it. And they will know how it works because they have just read it!

There also will be newbies who will ignorantly use extends in media queries without knowing how it works. But it will not hurt them because:
1. they will see in the browser exactly what they wanted;
2. resulting CSS size will not be larger than the mixin alternative;
3. the suggested behavior does not introduce new collisions of any kind or any unwanted behaviour (other than the fact that when you ask for an extend within a media query then you ‚Äîsurpise!‚Äî get an extend within a media query).

---

> @at-root is more verbose, it's much more predictable

So why do people stumble on it all the time? Parent selector is probably the most misused feature in Sass 3.2. ""Why does my `&-foo` not work"" is the most popular question on Stackoverflow, with ""Why does my `#{&}-foo` produce bloated markup"" being close on the heels. Again, a lot of users just don't notice that their `#{&}-foo` produces bloated markup.

As for `@at-root`, it looks logical for Sass gurus who know Sass inside out, but it is counter-intuitive for normal users. And @chriseppstein's suggestion to consider parent selector's [crazy behavior](https://github.com/nex3/sass/issues/1036) to be normal and to work around it with `.foo, .bar { #{append-to-selector(&, "".baz"")} {a:b;}}` is ridiculous. No sane person (who's not a Sass maintainer/guru) will consider _that_ to be intuitive.

I just don't understand why you let that counter-intuitive stuff pass and ban the possibility of extending from different media queries. It just does not make sense. :(

---

> Merging identical media queries? re-ordering media queries is dangerous and (gasp) unpredictable

The `@extend` directive always merges selectors. So if Sass 3.3 produced a merged media query for each extend, it will not be unpredictable. Also, it will not break anything.

---

> `@extend %half !duplicate;`
> because it is an explicit call, a user will understand that they're changing how it works.

Because doing this without `!duplicate` will still be impossible, this is how users will feel when using `!duplicate`:


",lolmaus,at-root
456,2013-12-14 21:54:15,"@Snugug 

> Of course the optimization around this would be difficult, needing to ensure that the matching only happens for identical @media contexts (but include ones in or chains) and a decision would need to be made as to if the selectors should be moved to the first or last item as the normal @extend pattern of ""all"" doesn't quite make sense here

Maybe you didn't undersand what i'm suggesting and that's why we have this argument...

I'm suggesting that a new extend context should be unconditionally created for every unique media query type. Within each such context, `@extend` should work as usual. Extends from different contexts should not be aware of each other.

This behaviour is absolutely predictable, it does not require Sass to do any decision making, it does not require rearranging selectors ""to the first or last item"", and the ""normal `@extend` pattern"" will still make perfect sense here.

---

> Suggesting that it's OK to codify bad

If you consider this behaviour bad, please provide concrete examples and arguments. I provide mine below.

---

> I, and many fellow framework developers, know exactly how @extend works and work hard to optimize our code around its benefits.

Currently Sass does not allow to extend the same selectors inside different media queries (or inside + outside a media query). It just doesn't work, and this fact has no benefit at all.

---

> Your argument that ""it's cool cause no one looks at their output CSS anyway"" is a terrible and misleading one

I never did such an argument. My argument was: Let users do what is currently impossible. If they want to use it, they can read docs and learn how it will work for them.

If they're neglectful so much that they don't read, then they will hardly notice the difference. @nex3 cares about how users will be surprised by the change, but they are already [misusing](https://github.com/nex3/sass/issues/1038) `@extend` all the time and most of them don't even notice it. Also, how can you be surprised by something you're not doing?

Let me empathize this. Nobody is currently extending same selectors within different media queries because it just doesn't work! Enabling this will not change the output of existing code.

Only people who read that extending same selectors from different media queries has been enabled in Sass 3.3 will start using it. And they will know how it works because they have just read it!

There also will be newbies who will ignorantly use extends in media queries without knowing how it works. But it will not hurt them because:
1. they will see in the browser exactly what they wanted;
2. resulting CSS size will not be larger than the mixin alternative;
3. the suggested behavior does not introduce new collisions of any kind or any unwanted behaviour (other than the fact that when you ask for an extend within a media query then you ‚Äîsurpise!‚Äî get an extend within a media query).

---

> @at-root is more verbose, it's much more predictable

So why do people stumble on it all the time? Parent selector is probably the most misused feature in Sass 3.2. ""Why does my `&-foo` not work"" is the most popular question on Stackoverflow, with ""Why does my `#{&}-foo` produce bloated markup"" being close on the heels. Again, a lot of users just don't notice that their `#{&}-foo` produces bloated markup.

As for `@at-root`, it looks logical for Sass gurus who know Sass inside out, but it is counter-intuitive for normal users. And @chriseppstein's suggestion to consider parent selector's [crazy behavior](https://github.com/nex3/sass/issues/1036) to be normal and to work around it with `.foo, .bar { #{append-to-selector(&, "".baz"")} {a:b;}}` is ridiculous. No sane person (who's not a Sass maintainer/guru) will consider _that_ to be intuitive.

I just don't understand why you let that counter-intuitive stuff pass and ban the possibility of extending from different media queries. It just does not make sense. :(

---

> Merging identical media queries? re-ordering media queries is dangerous and (gasp) unpredictable

The `@extend` directive always merges selectors. So if Sass 3.3 produced a merged media query for each extend, it will not be unpredictable. Also, it will not break anything.

---

> `@extend %half !duplicate;`
> because it is an explicit call, a user will understand that they're changing how it works.

Because doing this without `!duplicate` will still be impossible, this is how users will feel when using `!duplicate`:


",lolmaus,media
456,2013-12-16 22:12:39,"@lolmaus Please keep your language civil. I've edited out your profanity, and further cursing will result in me deleting your comments entirely. These discussions are public and I won't have them taking a tone that makes the community looks like a bunch of squabbling adolescents.

Having `@extend` silently ignore all selectors outside of the current directive context is a bad idea. Not only does it not match the user's expectation of the behavior or the semantics of extend, it does so without any indication of why or in what way it's failing. To a user who (reasonably) expects `@extend` to work across `@media` boundaries, it will look as though some of their styles work and some don't. They'll need to do serious debugging to figure out what's going on and why.

The idea that users already have trouble understanding how `@extend` works, so we shouldn't worry about making it harder to understand is deeply misguided. The fact that `@extend` is already complex indicates that we should do everything we can to make it predictable and straightforward, while preserving the semantics it was designed to provide. You're right that there are plenty of users who have trouble comprehending `@extend`, but there are plenty more who get it. Every time we make it more complicated, the set of people who get it gets smaller.

@Snugug Adding a flag for this behavior is certainly one way to allow a back door for users to be explicit. Feel free to file a separate issue about it where we can discuss it further.
",nex3,extend
456,2013-12-16 22:12:39,"@lolmaus Please keep your language civil. I've edited out your profanity, and further cursing will result in me deleting your comments entirely. These discussions are public and I won't have them taking a tone that makes the community looks like a bunch of squabbling adolescents.

Having `@extend` silently ignore all selectors outside of the current directive context is a bad idea. Not only does it not match the user's expectation of the behavior or the semantics of extend, it does so without any indication of why or in what way it's failing. To a user who (reasonably) expects `@extend` to work across `@media` boundaries, it will look as though some of their styles work and some don't. They'll need to do serious debugging to figure out what's going on and why.

The idea that users already have trouble understanding how `@extend` works, so we shouldn't worry about making it harder to understand is deeply misguided. The fact that `@extend` is already complex indicates that we should do everything we can to make it predictable and straightforward, while preserving the semantics it was designed to provide. You're right that there are plenty of users who have trouble comprehending `@extend`, but there are plenty more who get it. Every time we make it more complicated, the set of people who get it gets smaller.

@Snugug Adding a flag for this behavior is certainly one way to allow a back door for users to be explicit. Feel free to file a separate issue about it where we can discuss it further.
",nex3,media
454,2012-07-27 19:37:18,"On line 747 of your first file, you have `input[type='text'], input[type='password'], textarea { @extend label; }`. This is what's causing the additional selectors to be generated.
",nex3,extend
454,2012-07-30 10:10:18,"Bugger!

Thinking and examining it for a while, now I get it.

I still find it curious and not completely logical to make a tag that is a children to inherit a whole set of elements from other side.

I always thought that @extend just did that, extend the properties of the given element on another element, and was just that, I can understand that if I setup label, input, etc. overall, then I must be more careful when editing such elements when inside of tags, because of the CSS cascading, but it doesn't make much sense to me that a extend should behave that way, extending it throughout the whole document.

Still, thanks for the heads up, I'll use extend more carefully, and of course, take it in account when debugging. Have a nice day and thanks a lot for the attention and all your hard work. 
",nanoSpawn,extend
453,2012-07-19 20:27:18,"I think I found a bug using @extend and Parent Selector altogether.
As I tried to demonstrate below:

Source:



Expected output:



Actual output:



Is it really a bug or am I missing any point?
",noAlvaro,extend
451,2012-07-18 16:15:32,"In one of the recent versions, the ability to have `@import` within `@if` has been deprecated. I looked through the changelog. Couldn't find anything mentioning that change,

Anyway, `@import` within `@if` gives the dev a lot of flexibility.

**Example:**



**Explanation:**
Simply, it imports some arabic fonts only in persian.css.
I actually use this feature in almost all of my designs, since they are all multi-language, multi-directional designs. Deprecating it simply breaks all of those styles.

I will be downgrading to an earlier version for now.
",AriaMinaei,if
451,2012-07-18 16:15:32,"In one of the recent versions, the ability to have `@import` within `@if` has been deprecated. I looked through the changelog. Couldn't find anything mentioning that change,

Anyway, `@import` within `@if` gives the dev a lot of flexibility.

**Example:**



**Explanation:**
Simply, it imports some arabic fonts only in persian.css.
I actually use this feature in almost all of my designs, since they are all multi-language, multi-directional designs. Deprecating it simply breaks all of those styles.

I will be downgrading to an earlier version for now.
",AriaMinaei,import
451,2012-07-18 17:19:03,"Given this file:



When I compile it using Sass 3.1.7 I get the following error:



There was a bug where an `@import` that was nested conditionally in a file that was itself imported didn't get checked properly for this condition. I believe that bug was fixed in `3.1.8`.

It was never intended that `@import` would work in a conditional context, this makes it impossible for us to build a dependency tree for recompilation without fully executing the file -- which would be simply terrible for performance.
",chriseppstein,import
451,2012-07-18 17:23:20,"Maybe have a flag in the config file to enable/disable this restriction?
It's too big of a feature to not have.

On Wednesday, July 18, 2012, Chris Eppstein wrote:

> Given this file:
> 
> 
> 
> When I compile it using Sass 3.1.7 I get the following error:
> 
> 
> 
> There was a bug where an `@import` that was nested conditionally in a file
> that was itself imported didn't get checked properly for this condition. I
> believe that bug was fixed in `3.1.8`.
> 
> It was never intended that `@import` would work in a conditional context,
> this makes it impossible for us to build a dependency tree for
> recompilation without fully executing the file -- which would be simply
> terrible for performance.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/451#issuecomment-7075435
",AriaMinaei,import
448,2012-07-20 20:12:24,"Functions do allow `@if`. The trouble here is that you have a syntax error; the indented syntax requires a space between the name of a directive and anything after it. Because you have the parenthesis immediately following `@if`, the parser gets confused and thinks you have an unknown directive, causing it to print that error.
",nex3,if
447,2013-01-15 03:34:30,"Using vanilla CSS as an example, there are plenty of symbols used in favor of words. With selectors we use "","" instead of ""or"", spacing rules instead of ""and"", +, ~, and soon ! to declare specific relationships instead of writing them out (and @media instead of at media, etc., etc.). In any language the important thing is to strike the best balance between symbol and natural language for understanding and usability. 

I'm all for clear rules, but the language/symbol line has some wiggle room. We're using curly brackets `{}`, not `if x then ... fi`. If the argument for words is ""a single rule for clarity and understanding"" it seems `>` would have to be changed to `greaterthan` and `<=` to `lessthanorequalto`.

Sass is already the programmy version of CSS. To use it you have to be familiar with some basic pieces of programming structure, so I don't think an argument of ""novices won't understand"" is as important as ""is it usable?"". For authors coming in from javascript and php, the symbols are familiar and expected.

Reduced examples like



aren't that different to my eyes, but a whole page of code is very different, very much easier to parse with symbols (x1000 without code highlighting). Mentally switching between `==`, `!=`, an `>=` is especially easy comparatively.  I'm not sure typing out a whole page example would help though‚Äîwhat is easy for you might not be easy for me, and vice versa. There are some people in this issue who have voiced their opinions as to what they prefer, and I think that's a good reason to give both operators a trial period, then reevaluate after real world use. But, if it goes the other way I'm sure we'll live.
",robwierzbowski,media
445,2012-07-12 19:38:14,"Went down this rabbit hole more. If I have a class:



and then I do this:



the compilation process will add those two declarations together, and since firefox doesn't recognize the webkit prefix, and safari doesn't recognize the vendor prefix for mozilla, both get ignored and crap out. And any other time `@extend .pink` is used, that gets ignored as well (even if it's unrelated to these pseudo classes/elements)
",courtsimas,extend
445,2012-07-13 19:16:54,"I understand. Interestingly enough, it only combines them into one css line if I use `@extend`. if I use `color: #d2395c` or something else that's not using extend, it won't combine them, and then it works as expected. Despite me having to redeclare the color, I'm okay with this work around.
",courtsimas,extend
444,2012-07-09 23:35:14,"The `if()` function is a normal function so that means all the arguments are evaluated before being passed in. We figured we'd add special parsing for it at some point if it became an issue so that we could avoid just this sort of thing.

The work around is to use the `@if` directive for now. 
",chriseppstein,if
442,2012-07-06 11:28:14,"Currently, `@import ""file.scss""` inlines the contents of the SCSS file into the output, but `@import ""file.css""` generates an `@import url(file.css)` CSS directive.

This inconsistency is surprising, and the surprise is compounded by the fact that Chrome/Firefox and IE resolve relative @import URLs differently (unsurprisingly, IE gets it wrong), so a developer might not even realize what's going on when testing in Chrome/Firefox.

Although renaming the offending file to use the `.scss` or `.sass` extension seems to be the obvious solution, renaming can be undesirable for  3rd-party files, such as jquery.js, as it slightly obscures the origin of the code.

This change adds a new syntax, `@import inline(file.css)`, that can be used to express the desire of inlining the imported file. `@import inline()` has the behavior no matter what the imported file's extension is. Together with `@import url()`, it offers a decent path for migrating away from `@import ""*.css""`, which can be deprecated later down the line.

I don't have a good understanding of the sass codebase, and I look forward to your feedback on how I can make this change better. I hope you'll consider including it, so other developers won't bump into this problem like I did.

Thank you very, very much for the awesomeness that is sass!
",pwnall,import
442,2013-05-19 18:04:22,"+1. I am in need of this feature right now for this very reason. I need to import some bower component style sheets but I am not willing to change their file names to .scss because I'll have to do that every time I update that component. @import inline(file.css) is a necessary feature. 
",devinfd,import
442,2013-12-09 21:30:51,"As I've mentioned earlier in this thread, we're planning to support this with our upcoming revamp of the `@import` syntax. Given that, it doesn't make sense to make a backwards-incompatible change to the semantics of `@import` or to introduce a new syntax that will only be applicable for a relatively short time.
",nex3,import
441,2012-07-06 11:26:52,"Currently, `@import ""file.scss""` inlines the contents of the SCSS file into the output, but `@import ""file.css""` generates an `@import url(file.css)` CSS directive.

This inconsistency is surprising, and the surprise is compounded by the fact that Chrome/Firefox and IE resolve relative @import URLs differently (unsurprisingly, IE gets it wrong), so a developer might not even realize what's going on when testing in Chrome/Firefox.

Although renaming the offending file to use the `.scss` or `.sass` extension seems to be the obvious solution, renaming can be undesirable for  3rd-party files, such as jquery.js, as it slightly obscures the origin of the code.

This change adds a new syntax, `@import inline(file.css)`, that can be used to express the desire of inlining the imported file. `@import inline()` has the behavior no matter what the imported file's extension is. Together with `@import url()`, it offers a decent path for migrating away from `@import ""*.css""`, which can be deprecated later down the line.

I don't have a good understanding of the sass codebase, and I look forward to your feedback on how I can make this change better. I hope you'll consider including it, so other developers won't bump into this problem like I did.

Thank you very, very much for the awesomeness that is sass!
",pwnall,import
440,2012-07-07 16:18:28,"At first glance I quite like it. I have no idea what the language implications of implementing something that is though. Like can you double or triple or more namespace? How does @extend ing work when it goes in and out of a namespace? 
",chriscoyier,extend
440,2012-07-07 17:26:57,"I don't do preprocessors (yeah, I know‚Ä¶). But if I did, I would question the need of a @rule for this. What about simply starting with: prefix- { ‚Ä¶ }. i.e:



The trailing ""-"" in there should prevent any collision...  
",thierryk,rule
440,2012-07-11 00:59:35,"@chriscoyier That's a good question, I'm really not sure how @extend works on a low level... I wish I had enough foo to contribute to this though! :/

@thierryk A lot of SASS's extra features are used with the @ sign... such as @extend, @include.

@verekia , I do like the @namespace mynamespace  {...} you proposed better, less is more!

@ReinierK I think my JavaScript mindset was triggering that thinking for syntax :)  @chriseppstein Commented via twitter about possibly using the & symbol for this use case and referenced this: https://github.com/nex3/sass/issues/286 so the syntax
",AdamBrodzinski,extend
440,2012-07-11 00:59:35,"@chriscoyier That's a good question, I'm really not sure how @extend works on a low level... I wish I had enough foo to contribute to this though! :/

@thierryk A lot of SASS's extra features are used with the @ sign... such as @extend, @include.

@verekia , I do like the @namespace mynamespace  {...} you proposed better, less is more!

@ReinierK I think my JavaScript mindset was triggering that thinking for syntax :)  @chriseppstein Commented via twitter about possibly using the & symbol for this use case and referenced this: https://github.com/nex3/sass/issues/286 so the syntax
",AdamBrodzinski,chriseppstein
440,2012-07-11 00:59:35,"@chriscoyier That's a good question, I'm really not sure how @extend works on a low level... I wish I had enough foo to contribute to this though! :/

@thierryk A lot of SASS's extra features are used with the @ sign... such as @extend, @include.

@verekia , I do like the @namespace mynamespace  {...} you proposed better, less is more!

@ReinierK I think my JavaScript mindset was triggering that thinking for syntax :)  @chriseppstein Commented via twitter about possibly using the & symbol for this use case and referenced this: https://github.com/nex3/sass/issues/286 so the syntax
",AdamBrodzinski,include
440,2012-07-11 00:59:35,"@chriscoyier That's a good question, I'm really not sure how @extend works on a low level... I wish I had enough foo to contribute to this though! :/

@thierryk A lot of SASS's extra features are used with the @ sign... such as @extend, @include.

@verekia , I do like the @namespace mynamespace  {...} you proposed better, less is more!

@ReinierK I think my JavaScript mindset was triggering that thinking for syntax :)  @chriseppstein Commented via twitter about possibly using the & symbol for this use case and referenced this: https://github.com/nex3/sass/issues/286 so the syntax
",AdamBrodzinski,namespace
440,2012-07-11 00:59:35,"@chriscoyier That's a good question, I'm really not sure how @extend works on a low level... I wish I had enough foo to contribute to this though! :/

@thierryk A lot of SASS's extra features are used with the @ sign... such as @extend, @include.

@verekia , I do like the @namespace mynamespace  {...} you proposed better, less is more!

@ReinierK I think my JavaScript mindset was triggering that thinking for syntax :)  @chriseppstein Commented via twitter about possibly using the & symbol for this use case and referenced this: https://github.com/nex3/sass/issues/286 so the syntax
",AdamBrodzinski,ReinierK
440,2012-07-13 20:05:21,"I'm not sure this is the right axis along which to work towards modularity.

The reason you want to namespace classes is presumably because you're writing a style module that will be used in multiple places alongside many other style modules. You don't want the classes defined by your module to conflict with other modules' classes, or with unrelated classes that ultimately end up on the HTML page.

However, I think the way style modules will ultimately end up looking won't involve concrete classes at all. Once Sass 3.2 is released with placeholder selectors, I think the correct way to write a module like this will be pervasive use of those. The client stylesheet would use `@extend` to attach your styles to its selectors, and it would know enough about the holistic structure of the stylesheets to avoid collisions.

The upcoming redesign of `@import` should also include support for avoiding name conflicts between separate libraries, so even if two modules define `%container` it won't be a problem.

@chriseppstein, what are your thoughts on this?
",nex3,extend
440,2012-07-13 20:05:21,"I'm not sure this is the right axis along which to work towards modularity.

The reason you want to namespace classes is presumably because you're writing a style module that will be used in multiple places alongside many other style modules. You don't want the classes defined by your module to conflict with other modules' classes, or with unrelated classes that ultimately end up on the HTML page.

However, I think the way style modules will ultimately end up looking won't involve concrete classes at all. Once Sass 3.2 is released with placeholder selectors, I think the correct way to write a module like this will be pervasive use of those. The client stylesheet would use `@extend` to attach your styles to its selectors, and it would know enough about the holistic structure of the stylesheets to avoid collisions.

The upcoming redesign of `@import` should also include support for avoiding name conflicts between separate libraries, so even if two modules define `%container` it won't be a problem.

@chriseppstein, what are your thoughts on this?
",nex3,chriseppstein
440,2012-07-13 20:05:21,"I'm not sure this is the right axis along which to work towards modularity.

The reason you want to namespace classes is presumably because you're writing a style module that will be used in multiple places alongside many other style modules. You don't want the classes defined by your module to conflict with other modules' classes, or with unrelated classes that ultimately end up on the HTML page.

However, I think the way style modules will ultimately end up looking won't involve concrete classes at all. Once Sass 3.2 is released with placeholder selectors, I think the correct way to write a module like this will be pervasive use of those. The client stylesheet would use `@extend` to attach your styles to its selectors, and it would know enough about the holistic structure of the stylesheets to avoid collisions.

The upcoming redesign of `@import` should also include support for avoiding name conflicts between separate libraries, so even if two modules define `%container` it won't be a problem.

@chriseppstein, what are your thoughts on this?
",nex3,import
440,2012-08-08 18:03:53,"I feel like #286 provides enough flexibility to DRY up class-based namespaces and @snookca (a big proponent of this coding style) agreed with me on twitter when this came up a while back.

A module system is absolutely needed for globals like top-level variables, mixins, functions to avoid naming collisions. This is happening more and more in the community and needs to be addressed in the next 6mo-1yr.
",chriseppstein,snookca
440,2013-09-18 02:06:04,"Yeah, I figured I was shooting for the moon with that idea -- thought I'd suggest it anyway :-) So I'm curious about the script parent selector -- I've been following the `@at-root` discussion, and I also saw mention that we'll be allowed to go `#{&}`, which is awesome -- is that second example what you're talking about?

Update: I tried the master branch, and holy cow, combining the two new features -- scriptable parent selector and the `@at-root` directive -- I've created something very much like a bubble-able selector. Thanks very much for your awesome work!
",pdaoust,at-root
434,2012-06-29 22:23:26,"This is the expected behavior; from the second example in the documentation:



That said, this does seem like something that should be possible. @chriseppstein, thoughts?
",nex3,chriseppstein
429,2012-06-24 07:17:02,"I'm unsure if this is an intended limitation, but I've been unable to find any documentation about it. So, here goes. I'm writing SASS, and I'm using SCSS in TextMate. I've set it to save a css file in the same location as the scss file as I save. Pretty simple. Since `@viewport` is a feature that's still in working draft but has two prefixed implementations I decided to use a mixin and a `@each` control structure to output them into a css file for easy editing later on. I've run into problems.



What I wrote seems to generate CSS just fine as long as what's being generated isn't an at-rule.
",dustinwilson,viewport
429,2012-06-24 07:17:02,"I'm unsure if this is an intended limitation, but I've been unable to find any documentation about it. So, here goes. I'm writing SASS, and I'm using SCSS in TextMate. I've set it to save a css file in the same location as the scss file as I save. Pretty simple. Since `@viewport` is a feature that's still in working draft but has two prefixed implementations I decided to use a mixin and a `@each` control structure to output them into a css file for easy editing later on. I've run into problems.



What I wrote seems to generate CSS just fine as long as what's being generated isn't an at-rule.
",dustinwilson,each
429,2012-08-01 00:09:30,"At tonight's Sass meetup, it was brought up that interpolation for @directive for keyframe animations is still broken. For instance, if you wanted to write the following:



Sass errors out at the `@-#{$prefix)-keyframe #(name)` line with the following error:



Having this feature pushed in Sass would make dynamic keyframes a reality, which has been an issue since [issue 46](https://github.com/nex3/sass/issues/46)

Also‚Ä¶ +1
",Snugug,directive
429,2012-08-24 17:54:42,"As @dustinwilson mentioned for dynamic `@keyframes` or `@viewport` definitions with browser prefixes.
",samuelvogel,keyframes
429,2012-08-24 17:54:42,"As @dustinwilson mentioned for dynamic `@keyframes` or `@viewport` definitions with browser prefixes.
",samuelvogel,viewport
429,2016-01-21 15:37:34,"Any updates on this?
To me it seems like this is still open when I tried to dynamically create '@support' rules.
",KarstenBuckstegge,support
428,2012-06-30 01:16:25,"There are a few issues with this commit:
- When you define a single `@overload` tag, it overrides the Ruby definition of the method. So the documentation now only shows the signature for the filter case.
- The convention for functions that default to plain-CSS functions is to not document that fact (see [alpha()](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#alpha-instance_method)). Since they ""just work"" when used as CSS functions, additional documentation would just serve to make it more difficult for users to process the docs. I did this differently for [grayscale()](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#grayscale-instance_method), but that was probably wrong.
- As a user-visible change, this should be mentioned in the Changelog.
- There are a number of other functions in the [filter effects spec](https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html) that conflict with our color functions, all of which should be modified in this way.
",nex3,overload
426,2012-06-22 20:50:05,"This is the expected behavior. If you have `@media A { @media B { ... } }`, the styles within both media queries should only be applied when _both_ media queries are active. In this case, it's impossible for `@media screen` and `@media tv` to be simultaneously active, so the styles within both queries are excluded.
",nex3,media
422,2012-06-21 01:44:56,"3.2.0.alpha.244 worked for me, the latest sass 3.2.0.alpha.247 breaks it. 

Here was the css output i got when it errored:
Syntax error: Invalid CSS after ""  @media "": expected ""{"", was ""#{$query-string} {""
",wardpenney,media
422,2012-06-22 20:40:43,"@ExtraMedium We really need to see the Sass styles that are causing the error to be able to fix it. I **can't** reproduce the error in 3.2.0.alpha.247 with the following code:


",nex3,ExtraMedium
422,2012-06-29 03:15:17,"I had this same error. It was caused from an unintended `@import` loop followed by a media query. When I started deleting stuff until it stopped showing the same error I deleted the media query and it told me about the import loop:



The second I changed the filename it parsed just fine.
",dustinwilson,import
420,2012-06-18 13:13:57,"Hi, I¬¥m using large Sass templates from a third party company. Now I want to customise these templates. So I¬¥ve to overwrite some @mixin¬¥s but this doesn¬¥t work by now. :( I also want to call the ""parent"" mixin so I just can put my changes in there, like this:

**third party template:**



**my customization:**



I can¬¥t add these changes directly to the original template, cause it gets updated time by time and I¬¥ve to re-apply all custom changes again. That¬¥s really frustrating ...
",SunboX,mixin
420,2012-06-18 13:22:30,"Same will apply to @function¬¥s

**third party template:**



**my customization:**


",SunboX,function
420,2012-08-08 18:07:04,"Something like this is needed. perhaps this might tie into a module system, @nex3?
",chriseppstein,nex3
418,2012-06-13 16:01:19,"You cannot redeclare the value of a global variable inside a @mixin.

Example:



Expected:



Actual:



Instead of reassigning red to the `$global` variable, it echos the value of the variable.
",ngse,mixin
416,2012-06-06 18:23:46,"/cc @rdougan @nickcooley @moox 
",chriseppstein,moox
416,2012-06-06 18:23:46,"/cc @rdougan @nickcooley @moox 
",chriseppstein,nickcooley
416,2012-06-06 18:23:46,"/cc @rdougan @nickcooley @moox 
",chriseppstein,rdougan
413,2012-06-05 16:05:42,"@canarymason your right. and that isn‚Äôt really the feature I want to isolate. Updated.
",scottkellum,canarymason
413,2012-06-05 16:56:44,"Your example is straightforward, but I'm trying to think of other uses. Since we already have media bubbling this might get used inside a bubble



or perhaps multiple deposits, maybe with a @collect between them: 



I'm not sure how these should or could compile, but this is a cool feature worth exploring. 
",codingdesigner,collect
413,2012-06-15 21:06:13,"The current plan for addressing the duplication of media directives is to have an optimization pass that consolidates them. The idea of `@collect`/`@deposit` or adding to mixins is cool, but I'd want to see a concrete use case that won't be covered by optimization.
",nex3,collect
413,2012-06-15 21:06:13,"The current plan for addressing the duplication of media directives is to have an optimization pass that consolidates them. The idea of `@collect`/`@deposit` or adding to mixins is cool, but I'd want to see a concrete use case that won't be covered by optimization.
",nex3,deposit
412,2012-09-28 20:58:37,"@krisbulman Is there a bug in this commit that's causing errors in compass, or is it just a matter of updating Compass to use the new semantics? /cc @chriseppstein
",nex3,chriseppstein
412,2012-09-28 21:43:31,"Unfortunately I was only able to track down the source of the problem, but not determine which it is. I am assuming the latter, perhaps @chriseppstein can provide some insight?
",krisbulman,chriseppstein
411,2012-06-04 06:43:10,"Originally reported against compass by @StanAngeloff

https://github.com/chriseppstein/compass/issues/869
",chriseppstein,StanAngeloff
408,2012-06-03 16:43:07,"This idea of generating multiple output files from a single input file comes up every once and a while and so far, we always come down on the side of favoring the simplicity that is derived from maintaining the correlation between a single input file to a single output file. This basic assumption that every css file has a corresponding sass file makes things more coherent for users and has numerous technical benefits.

In Sass 3.2 we have introduced @content block passing to mixins. With this feature you can roll this on your own -- which is how I accomplish this at my work.

First you define a mixin that can be configured to not output media queries when you've disabled them in a way that when the MQ are off you emit the block conditionally based on a fixed breakpoint:



Then you write your stylesheet as usual (let's say you call it `screen.scss`) and when you're ready to make your media query free version you make another file (let's call it `screen-no-mqs.scss`) and this file imports the first after disabling the MQs:





and you get the following output:




",chriseppstein,content
408,2013-05-07 02:16:57,"Well basically, I have something like this in my screen.scss:



These imported files contain only media specific styles.

So in your respond-to mixin, we don't want to ""print"" @content, but instead import a file, which isn't allowed by sass..

I managed to work around this by wrapping all the media specific styles in a mixin, importing them all and then printing them with or without the media query.

Because SASS doesn't support interpolation of variable names, I had to create an if structure for each stylesheet. The following code works, but looks really really bad... I'm not sure if this could be refactored using sass map/hash data structures..


",erfanimani,content
408,2013-05-07 13:36:47,"I have the same problem as erfanimani, I want to import files with my ""respond-to"" mixin.  It's the restriction placed on `@import` itself that's the problem.



You get this error message:  Import directives may not be used within control directives or mixins.
",cimmanon,import
408,2013-05-08 02:15:29,"@cimmanon @erfanimani Currently this limitation is created by our need to be able to efficiently compute dependencies for files that have not been compiled.

However, I do believe there is a way to have a more dynamically discovered dependency graph which would provide the same level of performance benefit for recompilation and allow us to remove the limitation for static analysis of @import directives.
",chriseppstein,import
407,2012-06-01 19:32:51,"I want to be able to define a mixin that can be passed @content but that does not _require_ it.

Something like this would be good:


",alanhogan,content
407,2012-06-03 17:49:53,"I had intended that `@content` would be a no-op if it was not passed. @nex3, you and I should sort this out.
",chriseppstein,content
407,2012-06-03 17:49:53,"I had intended that `@content` would be a no-op if it was not passed. @nex3, you and I should sort this out.
",chriseppstein,nex3
407,2012-06-03 19:06:17,"My current work-around is this (where my-mixin expects content but I don‚Äôt want to pass any, and in fact is perhaps not even defined by myself):



That way when this is resolved I can just remove those -no-op: 1 lines.

IMO, @content as a no-op when not passed would be better than a test for seeing if it would be passed, since it would mean less code (no pointless conditionals).

But better than that is both options. I know some Compass functions do some tricky conditional stuff based on what arguments are actually passed. I can‚Äôt imagine there wouldn‚Äôt be any cases where testing for @content would not be useful, as well.

Best: Both test & no-op
Good: No-op
Fine: test

On Jun 3, 2012, at 10:49 AM, Chris Eppstein wrote:

> I had intended that `@content` would be a no-op if it was not passed. @nex3, you and I should sort this out.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/407#issuecomment-6087432
",alanhogan,content
407,2012-06-03 19:06:17,"My current work-around is this (where my-mixin expects content but I don‚Äôt want to pass any, and in fact is perhaps not even defined by myself):



That way when this is resolved I can just remove those -no-op: 1 lines.

IMO, @content as a no-op when not passed would be better than a test for seeing if it would be passed, since it would mean less code (no pointless conditionals).

But better than that is both options. I know some Compass functions do some tricky conditional stuff based on what arguments are actually passed. I can‚Äôt imagine there wouldn‚Äôt be any cases where testing for @content would not be useful, as well.

Best: Both test & no-op
Good: No-op
Fine: test

On Jun 3, 2012, at 10:49 AM, Chris Eppstein wrote:

> I had intended that `@content` would be a no-op if it was not passed. @nex3, you and I should sort this out.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/407#issuecomment-6087432
",alanhogan,nex3
407,2012-06-10 06:19:00,"Ran into this again ‚Äî¬†wrote a mixin where I‚Äôd love to be able to make `@content` optional. It would have made the rest of the stylesheet a bit more maintainable.
",alanhogan,content
407,2012-06-16 07:52:20,"Would love to see sass 3.2 with a no-op-if-none-passed @content.
",alanhogan,content
407,2012-06-17 23:42:19,"I think this is simply a bug/oversight. @nex3 this needs to be in 3.2. 

Hunt & pecked on my iPhone... Sorry if it's brief!

On Jun 16, 2012, at 12:52 AM, Alan Hoganreply@reply.github.com wrote:

> Would love to see sass 3.2 with a no-op-if-none-passed @content.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/407#issuecomment-6371496
",chriseppstein,content
407,2012-06-17 23:42:19,"I think this is simply a bug/oversight. @nex3 this needs to be in 3.2. 

Hunt & pecked on my iPhone... Sorry if it's brief!

On Jun 16, 2012, at 12:52 AM, Alan Hoganreply@reply.github.com wrote:

> Would love to see sass 3.2 with a no-op-if-none-passed @content.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/407#issuecomment-6371496
",chriseppstein,nex3
407,2012-07-02 12:44:25,"+1to @alanhogan's suggestion

I have `@include` in a partial that's used by two different stylesheets. I would like to make the mixin noop in one stylesheet, and to generate the appropriate code in the other one.

Right now I'm getting this error `Mixin ""foo-bar"" does not accept a content block.`

My current workaround is to define `foo-bar` mixin with a never-executing conditional:


",sidonath,include
407,2012-08-08 18:07:59,"@nex3 can we please address this before 3.2 ships?
",chriseppstein,nex3
407,2012-08-13 22:22:03,"![thumbs-up](http://openclipart.org/image/250px/svg_to_png/28688/skotan_Thumbs_up_smiley.png)

Great :)

Also, going to cc @ericam to make sure he sees this :)
",alanhogan,ericam
407,2016-05-09 17:06:43,"@alanhogan want to check if `@content` is passed. How are using this? Would love to see a sample of your code.
",ogbaoghene,content
401,2012-08-08 18:10:22,"We put this off because 3.2 was going to ship soon. @nex3, let's ship or merge this.
",chriseppstein,nex3
401,2012-08-13 22:20:17,"@nex3 I will add a CHANGELOG entry for 3.3 for this. Any further comment before it lands on master?
",chriseppstein,nex3
401,2012-08-15 23:18:22,"All of these functions should have `@param` documentation for all the parameters, at least to specify the types and also to specify whatever other constraints/non-obvious semantics exist.
",nex3,param
400,2012-05-24 19:30:04,"Ugh. Disregard my premature bug once again. The underlying problem is that files were not being resolved correctly, due to relative paths in @import directives. When invoking the sass watcher from within the css directory itself (where one of the top-level SCSS files is), the watcher was then able to resolve relative paths correctly. I presume the issue of resolving relative paths in @import statements is documented in some other bug. If not, then this is a pretty annoying problem.
",davidrivers,import
398,2012-05-21 19:15:16,"Maybe I'm the only one finding this worth mentioning (in that case, ignore ;-)), but it bothers me that the resulting css file can't maintain styling on imported files.

What I mean is that I always import some biolerplate stuff that is generally one-line CSS rules, for readability (you barely change stuff in that part), but I always expand my other styles for readability and structure. In this case, I sometimes wish I could do something like:

@import 'sass/boilerplate' --compact (or something along those line) so that the formatting from that partial is maintained up to a certain output style 'level' when actually converting the file. A suggestion for the parameter could be:

--nested (imported file will always be nested, unless --expanded/--compact/--compressed is used)
--expanded (imported file will always be expanded, unless --compact/--compressed is used)
--compact (imported file will always be compact, unless --compressed is used)
--compressed (imported file will always be compressed).

So in my scss file I can import boilerplate with the --compact parameter, then convert my scss file with the '--style expanded', but my outputted css file will still have the boilerplate part compacted, with the rest of the file expanded.

Just a thought.
",TheDutchCoder,import
394,2012-05-19 00:36:27,"@Maher4Ever and @thibaudgg, do you have any insight? It looks like this may be a Listen issue.
",nex3,thibaudgg
394,2012-05-19 00:36:27,"@Maher4Ever and @thibaudgg, do you have any insight? It looks like this may be a Listen issue.
",nex3,Maher4Ever
394,2012-05-19 19:51:21,"Mmm I think @Maher4Ever will be more in position to find this issue.
",thibaudgg,Maher4Ever
394,2012-05-20 11:48:52,"I tried to reproduce this issue on my machine with no luck. I even made a while loop which keeps updating the file at random intervals, but sass kept picking up changes.

@crh0872 Could you tell us more about your system (ubuntu version, ruby version)? Are you sure nothing else is watching the same file (say, Dropbox) or deleting it?

From the crash I was able to see that you are using ruby 1.8, so I even tried it on 1.8 and it still didn't crash.

Here are my system's info: (Ubuntu 12.04 32bit, ruby 1.8.7)


",Maher4Ever,crh0872
391,2012-05-15 00:46:21,"As suggested by @CrowChick [on Twitter](https://twitter.com/#!/CrowChick/status/202193684765229056), rather than disallowing `@extend` in directives wholesale (see #154), we could disallow them only if they match CSS rules from outside the directive. This would allow directives containing a large amount of self-contained CSS to continue to take advantage of `@extend` while still making it clear that it's unsafe to `@extend` classes in general.

This does present some difficulty with using libraries such as Compass that expose `@extend`able classes as part of their API. This could be partially overcome by including the library in the `@media` declaration itself, which has the additional advantage of making it more explicit that all the library CSS must appear within the `@media` query. However, the following use case would still fail:



Since `%some-compass-thing` would be defined outside of the `@media` query as well as inside, the `@extend` would be an error. This could be avoided by making `@extend` within a directive silently ignore selectors outside of that directive, but that eliminates any indication to users that naively `@extend`ing a top-level selector won't work.

Feedback on this proposal would be appreciated.
",nex3,extend
391,2012-05-15 00:46:21,"As suggested by @CrowChick [on Twitter](https://twitter.com/#!/CrowChick/status/202193684765229056), rather than disallowing `@extend` in directives wholesale (see #154), we could disallow them only if they match CSS rules from outside the directive. This would allow directives containing a large amount of self-contained CSS to continue to take advantage of `@extend` while still making it clear that it's unsafe to `@extend` classes in general.

This does present some difficulty with using libraries such as Compass that expose `@extend`able classes as part of their API. This could be partially overcome by including the library in the `@media` declaration itself, which has the additional advantage of making it more explicit that all the library CSS must appear within the `@media` query. However, the following use case would still fail:



Since `%some-compass-thing` would be defined outside of the `@media` query as well as inside, the `@extend` would be an error. This could be avoided by making `@extend` within a directive silently ignore selectors outside of that directive, but that eliminates any indication to users that naively `@extend`ing a top-level selector won't work.

Feedback on this proposal would be appreciated.
",nex3,media
391,2012-05-15 00:46:21,"As suggested by @CrowChick [on Twitter](https://twitter.com/#!/CrowChick/status/202193684765229056), rather than disallowing `@extend` in directives wholesale (see #154), we could disallow them only if they match CSS rules from outside the directive. This would allow directives containing a large amount of self-contained CSS to continue to take advantage of `@extend` while still making it clear that it's unsafe to `@extend` classes in general.

This does present some difficulty with using libraries such as Compass that expose `@extend`able classes as part of their API. This could be partially overcome by including the library in the `@media` declaration itself, which has the additional advantage of making it more explicit that all the library CSS must appear within the `@media` query. However, the following use case would still fail:



Since `%some-compass-thing` would be defined outside of the `@media` query as well as inside, the `@extend` would be an error. This could be avoided by making `@extend` within a directive silently ignore selectors outside of that directive, but that eliminates any indication to users that naively `@extend`ing a top-level selector won't work.

Feedback on this proposal would be appreciated.
",nex3,CrowChick
391,2012-05-15 03:13:53,"Some background on my use case:

I use a single CSS file for screen, print and media queries rather than 3 separate files (and thus 3 http requests instead of one). Not all that uncommon. I keep my print styles in @media print {} and my screen styles in @media screen {} exclusively. Never the twain shall intermingle since print doesn't need floats or side columns or any of that.

I use @extend heavily within the screen directive to delegate common screen-only classes and style patterns to things like forms and comment lists. It makes for understandable SCSS and conveniences me where I cannot add new classes to markup ala OOCSS.

With the latest update to Sass deprecating @extend withing media directives, naturally this doesn't work anymore. I could try to put these extendable classes and their styles outside the screen declaration, but then not only do they start affecting the print styles, but I would have to add all the classes I wanted to extend manually. That is not maintainable in this instance.

Extend is extremely handy and hard to replace (unless you're cool with the added bulk of mixins). Would love to keep a scoped version going until it's native to CSS.
",rachelnabors,extend
391,2012-05-15 03:13:53,"Some background on my use case:

I use a single CSS file for screen, print and media queries rather than 3 separate files (and thus 3 http requests instead of one). Not all that uncommon. I keep my print styles in @media print {} and my screen styles in @media screen {} exclusively. Never the twain shall intermingle since print doesn't need floats or side columns or any of that.

I use @extend heavily within the screen directive to delegate common screen-only classes and style patterns to things like forms and comment lists. It makes for understandable SCSS and conveniences me where I cannot add new classes to markup ala OOCSS.

With the latest update to Sass deprecating @extend withing media directives, naturally this doesn't work anymore. I could try to put these extendable classes and their styles outside the screen declaration, but then not only do they start affecting the print styles, but I would have to add all the classes I wanted to extend manually. That is not maintainable in this instance.

Extend is extremely handy and hard to replace (unless you're cool with the added bulk of mixins). Would love to keep a scoped version going until it's native to CSS.
",rachelnabors,media
391,2012-05-15 08:50:44,"This is a hard problem. I've just realized disallowing `@extend` in `@media` breaks [my grid system](http://chriseppstein.github.com/blog/2011/08/21/responsive-layouts-with-sass/). Not in a big way, I can convert my few extends into mixins or I can move the extend outside of the media blocks. On the net, it's probably best to disallow it because I think it's ripe for mis-understanding.

I think the mental model for people is that they should extend from within the media query, but actually the way this works best is if the base classes are defined in the media query and those are extended at the global scope.

I feel like we need to introduce a module/scoping context that will, among other things, constrain the application of extends. With this, we can re-introduce extending in any scope that doesn't span a media boundary. or we can implicitly define a media query as a scope.
",chriseppstein,extend
391,2012-05-15 08:50:44,"This is a hard problem. I've just realized disallowing `@extend` in `@media` breaks [my grid system](http://chriseppstein.github.com/blog/2011/08/21/responsive-layouts-with-sass/). Not in a big way, I can convert my few extends into mixins or I can move the extend outside of the media blocks. On the net, it's probably best to disallow it because I think it's ripe for mis-understanding.

I think the mental model for people is that they should extend from within the media query, but actually the way this works best is if the base classes are defined in the media query and those are extended at the global scope.

I feel like we need to introduce a module/scoping context that will, among other things, constrain the application of extends. With this, we can re-introduce extending in any scope that doesn't span a media boundary. or we can implicitly define a media query as a scope.
",chriseppstein,media
391,2012-05-15 19:33:28,"I'm also trying to build a grid system that wants to extend my dynamically-generated (from an @each block) .fluid-unit-6-16 class. Since I apparently can't convert my grid classes to mixins and have them dynamically generated in the same way (Interpolation doesn't seem to work within a mixin directive itself), I'm stuck with not being able to use my grid-unit styles within this @media query altogether, unless I rewrite my grid styles in a terribly repetitive, non-flexible way. So, I can't do something like the following:

`@media only screen and (max-width: 768px) {
    .tablet-portrait-fluid-unit-12-16 {
        @extend .fluid-unit-12-16;
    }
}`

It seems that when the sass compiler encounters an @extend within a @media, it chops off the outer @media block. Whereas the following example compiles correctly (Sass doesn't change it):

`@media only screen and (max-width: 768px) {
    .tablet-portrait-fluid-unit-12-16 {
        color: red;
    }
}`
",davidrivers,extend
391,2012-05-15 19:33:28,"I'm also trying to build a grid system that wants to extend my dynamically-generated (from an @each block) .fluid-unit-6-16 class. Since I apparently can't convert my grid classes to mixins and have them dynamically generated in the same way (Interpolation doesn't seem to work within a mixin directive itself), I'm stuck with not being able to use my grid-unit styles within this @media query altogether, unless I rewrite my grid styles in a terribly repetitive, non-flexible way. So, I can't do something like the following:

`@media only screen and (max-width: 768px) {
    .tablet-portrait-fluid-unit-12-16 {
        @extend .fluid-unit-12-16;
    }
}`

It seems that when the sass compiler encounters an @extend within a @media, it chops off the outer @media block. Whereas the following example compiles correctly (Sass doesn't change it):

`@media only screen and (max-width: 768px) {
    .tablet-portrait-fluid-unit-12-16 {
        color: red;
    }
}`
",davidrivers,media
391,2012-05-15 19:33:28,"I'm also trying to build a grid system that wants to extend my dynamically-generated (from an @each block) .fluid-unit-6-16 class. Since I apparently can't convert my grid classes to mixins and have them dynamically generated in the same way (Interpolation doesn't seem to work within a mixin directive itself), I'm stuck with not being able to use my grid-unit styles within this @media query altogether, unless I rewrite my grid styles in a terribly repetitive, non-flexible way. So, I can't do something like the following:

`@media only screen and (max-width: 768px) {
    .tablet-portrait-fluid-unit-12-16 {
        @extend .fluid-unit-12-16;
    }
}`

It seems that when the sass compiler encounters an @extend within a @media, it chops off the outer @media block. Whereas the following example compiles correctly (Sass doesn't change it):

`@media only screen and (max-width: 768px) {
    .tablet-portrait-fluid-unit-12-16 {
        color: red;
    }
}`
",davidrivers,each
391,2012-05-19 00:38:32,"My current plan here is to allow `@extend` to work when the extended selector only matches rules within the current directive. It will still throw an error if any matched rules are outside the current directive, even if there are some rules within it as well.
",nex3,extend
390,2012-05-11 16:00:57,"$base-spacing: 10px;

@each $side in top, right, bottom, left {
@each $style in margin, padding {
        .#{style}-#{side}-small { margin-top: $base-spacing / 2; }
        .#{style}-#{side} { margin-top: $base-spacing; }
        .#{style}-#{side}-large { margin-top: $base-spacing \* 2; }
    }
}

...compiles to...

.style-side {
  margin-top: 10px; }

.style-side-large {
  margin-top: 20px; }

.style-side-small {
  margin-top: 5px; }

.style-side {
  margin-top: 10px; }

.style-side-large {
  margin-top: 20px; }

.style-side-small {
  margin-top: 5px; }

.style-side {
  margin-top: 10px; }

.style-side-large {
  margin-top: 20px; }

// ...and so on...
",davidrivers,each
384,2012-05-07 18:46:54,"Ok,
So I'm building my awesome reusable pattern library. And I have about 20 files and growing. So I organize them in folders. (hey even @chriseppstein does it http://d.pr/i/SfqX)

So the idea here is to be able to name a folder with a underscore, instead of naming each and every file in that folder with an underscore. Because let's face it. We all want to compile only one (or maybe for some crazy reason two) CSS File(s). The underscored thing should be the other way around actually :).  
Because that might be a _little bit_ over the top, I would like to think, that having folders with underscores would help everyone.
",justnorris,chriseppstein
384,2012-08-08 18:22:01,"@nex3 thoughts?
",chriseppstein,nex3
378,2012-05-04 17:53:58,"I might be missing something but I was surprised yesterday when I couldn't find an documentation and experiments failed for using `@continue` or `@break` inside of a for, each or while loop.

**Expected:**



**Output**


",heygrady,break
378,2012-05-04 17:53:58,"I might be missing something but I was surprised yesterday when I couldn't find an documentation and experiments failed for using `@continue` or `@break` inside of a for, each or while loop.

**Expected:**



**Output**


",heygrady,continue
378,2012-05-05 00:08:23,"Sass is not a full-fledged programming language, so it doesn't support all aspects of all control structures. You can work around this using `@if` if you need to.
",nex3,if
378,2013-01-27 03:22:46,"@nex3 While it is understood Sass isn't a ""full-fledged programming language"", and that it is targeted at both developers and designers alike, control structures/directives such as `@break` and `@continue` would alleviate the need for deeply nested `@if` blocks. Furthermore, it is understood that this adds complexity, for both the developers (you folks) and consumers (me folks) of the language, but no matter how you slice it, Sass has become a programming language (full-fledged or not). The programming-savvy will reap the benefits from such features, and the rest won't be hindered in any way.
",northborndesign,continue
378,2013-01-27 03:22:46,"@nex3 While it is understood Sass isn't a ""full-fledged programming language"", and that it is targeted at both developers and designers alike, control structures/directives such as `@break` and `@continue` would alleviate the need for deeply nested `@if` blocks. Furthermore, it is understood that this adds complexity, for both the developers (you folks) and consumers (me folks) of the language, but no matter how you slice it, Sass has become a programming language (full-fledged or not). The programming-savvy will reap the benefits from such features, and the rest won't be hindered in any way.
",northborndesign,if
378,2013-01-27 03:22:46,"@nex3 While it is understood Sass isn't a ""full-fledged programming language"", and that it is targeted at both developers and designers alike, control structures/directives such as `@break` and `@continue` would alleviate the need for deeply nested `@if` blocks. Furthermore, it is understood that this adds complexity, for both the developers (you folks) and consumers (me folks) of the language, but no matter how you slice it, Sass has become a programming language (full-fledged or not). The programming-savvy will reap the benefits from such features, and the rest won't be hindered in any way.
",northborndesign,break
378,2013-02-02 02:01:55,"I'm still pretty skeptical of this. The issue is that the more seldom-used control structures exist in Sass, the harder it is for something with only passing familiarity with the language to read stylesheets that use those control structures. That's why it started out with the bare minimum set of structures needed to do anything: because in many cases it makes sense to skew towards a smaller surface area of the language rather than optimal semantics for writing complex code.

@chriseppstein, what do you think about this proposal?
",nex3,chriseppstein
378,2014-09-11 16:13:49,"If you're going to offer loops, then there should be `@break` and `@continue` directives. Otherwise all that happens is people are forced to write bloated code to work around this lack. Surely clarity is the most important thing. It's pretty clear than people aren't going to stop writing complex loops because there is no `@break` or `@continue` directive so why not make things easier for them to write and clearer for everyone else to read.
",Undistraction,continue
378,2014-09-11 16:13:49,"If you're going to offer loops, then there should be `@break` and `@continue` directives. Otherwise all that happens is people are forced to write bloated code to work around this lack. Surely clarity is the most important thing. It's pretty clear than people aren't going to stop writing complex loops because there is no `@break` or `@continue` directive so why not make things easier for them to write and clearer for everyone else to read.
",Undistraction,break
378,2014-09-11 20:08:16,"I think `@break` makes sense as it can be used to avoid a lot of work. Continue just doesn't provide enough value over `@if`.
",chriseppstein,if
378,2014-09-11 20:08:16,"I think `@break` makes sense as it can be used to avoid a lot of work. Continue just doesn't provide enough value over `@if`.
",chriseppstein,break
378,2014-09-11 20:19:22,"Please provide `@continue` too.

It lets reduce nesting. Compare:





When code gets long, it becomes difficult to track the context. Our JS guideline explicitly tells to use the first way.
",lolmaus,continue
378,2014-09-12 21:25:08,"I think if we provide `@break` we should provide `@continue` as well.
",nex3,continue
378,2014-09-12 21:25:08,"I think if we provide `@break` we should provide `@continue` as well.
",nex3,break
378,2015-01-07 07:08:33,"@function getAnimationTime($arrayTime, $index){
  $this_duration:();
  $this_delay:();
  $index: if(($index <= 0), 1, $index);
  @each $elAniTime in $arrayTime {
    //no break, continue or index of loop is supported, bad luck
  }

  $animationTime: $this_duration $this_delay;
  @return $animationTime;
}

@nex3 
break, continue, even index of loop is great.
",IEfucker,return
378,2015-01-07 07:08:33,"@function getAnimationTime($arrayTime, $index){
  $this_duration:();
  $this_delay:();
  $index: if(($index <= 0), 1, $index);
  @each $elAniTime in $arrayTime {
    //no break, continue or index of loop is supported, bad luck
  }

  $animationTime: $this_duration $this_delay;
  @return $animationTime;
}

@nex3 
break, continue, even index of loop is great.
",IEfucker,function
378,2015-01-07 07:08:33,"@function getAnimationTime($arrayTime, $index){
  $this_duration:();
  $this_delay:();
  $index: if(($index <= 0), 1, $index);
  @each $elAniTime in $arrayTime {
    //no break, continue or index of loop is supported, bad luck
  }

  $animationTime: $this_duration $this_delay;
  @return $animationTime;
}

@nex3 
break, continue, even index of loop is great.
",IEfucker,each
377,2012-05-03 18:16:15,"@ReinierK Can you provide the non-confidential portion of the segfault stack trace?

@Maher4Ever If this is happening with 3.2.0.alpha.104, that means that it includes your patch. Any insight as to why `--watch` might still not be working?
",nex3,ReinierK
377,2012-05-03 18:16:15,"@ReinierK Can you provide the non-confidential portion of the segfault stack trace?

@Maher4Ever If this is happening with 3.2.0.alpha.104, that means that it includes your patch. Any insight as to why `--watch` might still not be working?
",nex3,Maher4Ever
377,2012-05-03 19:37:32,"@Maher4Ever probably has more insight about this than I do... I'm not familiar with the inner workings of Listen.
",nex3,Maher4Ever
377,2012-05-04 14:38:23,"@ReinierK Your first problem where Listen crashes is caused because for some reason `ntuser.dat.LOG1` was checked for content modifications, although it's a protected Windows file. I'll see what we can do in Listen to avoid these issues in the future.

I couldn't reproduce your second issue in which sass stops working after the first time. I tried it with ruby 1.9.3-p125 on WIndows 7 SP-1 (64-bit) and Ubuntu 11.10 (32-bit).

@nex3 After looking closely at how Listen gets included in sass, I realized that some dependencies of Listen does not get installed. That's why Listen falls to polling on some machines, I didn't see this the previous time because the Listen-gem is of course already installed on my machines. Listen is dependent on 3 other gems (which work as adapters for different operating-systems). I would suggest either including the Listen gem as a dependency in the `.gemspec` file, or just packing the other dependent gems and adding them to the loadpath, just like Listen is currently included in sass. I'll be glad to help with this process if any help is needed.
",Maher4Ever,ReinierK
377,2012-05-04 15:37:07,"@ReinierK After installing sass, you won't be able to see the listen gem with `gem list --local`. That's because sass includes listen as a part of the sass-gem and does not rely on rubygems (the packages manager in Ruby) for installing it. To see where listen resides, browse to the sass-gem directory and you will find it under the `vendor` directory.

Listen is still a new project, so unfortunately there is still no way to get verbose output from it. 

Have you tried looking at the process manager on Windows and looking for any ruby process which keeps running after you have stopped the `sass` command from the terminal? 
",Maher4Ever,ReinierK
377,2012-05-04 22:28:18,"@ReinierK I can't reproduce this on Windows either. I've tried all the scenarios you've mentioned and they all work fine for me. What version of Windows are you running?

It's also worth noting that apparently Windows paths using backslashes were being handled incorrectly. This should be fixed by 3ee3411077b1df9d6747d71ab8bf4ab4506917aa. I don't think this is the source of most of your errors, though.

@Maher4Ever The way Sass used FSSM was to bundle just the core polling and glue code, and allow users to install the full gem if they want to take advantage of native OS facilities.

I'm going to release Sass 3.1.17 some time today, with has @Maher4Ever's fix. If I keep getting reports that it's not working, though, I may have to go back to FSSM :-/.
",nex3,ReinierK
377,2012-05-05 00:05:34,"@Maher4Ever Thanks for the change; I've made a few edits and merged it in.

@ReinierK I'll be releasing this as 3.1.17 shortly.
",nex3,ReinierK
377,2012-05-05 09:08:22,"@ReinierK Glad to hear it's working. Thanks for bearing with us through this. I'm not sure why it's taking so long to update, though. Does it take a long time to display the message on the command line, or to actually modify the CSS file?
",nex3,ReinierK
377,2012-05-06 09:59:27,"@ReinierK The core team of Listen is well aware of the performance issues on Windows. We are in the process of investigating the cause of this issue. If you are interested in helping us get more profiling results, please head to [the issue's page](https://github.com/guard/listen/issues/28) on the Listen gem repo where I'll post a comment on how anyone could help.
",Maher4Ever,ReinierK
374,2012-05-06 20:38:45,"@petebrowne The reason to omit properties that are set to null, an empty string, or an empty list is that it optimizes a very common case of omitting a property that not explicitly passed without a bunch of `@if` boilerplate. It's also not obviously a conceptual error because if you set a property to nothing has a very similar feeling to not setting it.
",chriseppstein,if
370,2012-04-27 02:24:34,"After upgrading to SASS 3.1.16 using `sass --watch` with a relative path no longer works for me (under OSX or Windows), it never detects any changes (apart from the first run). If I revert to 3.1.15 it begins working again. 

I believe there may be a problem [here](https://github.com/nex3/sass/blob/master/lib/sass/plugin/listener.rb#L29):



When running `sass --watch assets/scss:assets/css` it adds the relative path, `assets/scss` to `@directories` as a key, but `Listen::MultiListener` is supplying absolute paths for `modified`, `added` and `removed`. 

So for example, here: 



groups by the absolute path returned by Listener setting `modified['/users/name/project/assets/scss'] = ...` but then:



attempts to use the relative path in `@directories`, `modified['assets/scss']` and gets nil. 

Is this a bug, or am I doing something wrong? Thanks. 
",pjamest,directories
369,2012-04-25 17:57:43,"I'm trying to do something that I though was simple, but actually not. I have a set of predefined mixins, each one extend a particular placeholder. It would usually be simple but inside the case of an @media query, it doesn't go as expected, I think @extend and @media don't behave well together.
Here is a simplified test :



Which outputs incorrectly the following :



Am I missing something or is there another way to do that ?
",Anahkiasen,extend
369,2012-04-25 17:57:43,"I'm trying to do something that I though was simple, but actually not. I have a set of predefined mixins, each one extend a particular placeholder. It would usually be simple but inside the case of an @media query, it doesn't go as expected, I think @extend and @media don't behave well together.
Here is a simplified test :



Which outputs incorrectly the following :



Am I missing something or is there another way to do that ?
",Anahkiasen,media
366,2012-04-25 15:40:16,"I'd love Sass style mixins in SCSS, specifically being able to do + in addition to @include. I know a few others mentioned this recently, but I didn't see an official issue for it, so I'm adding one.

If not, I guess I'm going to need to start learning Sass syntax.
",Snugug,include
366,2012-05-11 20:48:43,"I would totally dig the + instead of the @include as well. SCSS is the primary syntax, I think it would be nice if it was made a little easier (shortr) to use. 
",justnorris,include
366,2012-05-17 09:48:28,"+1

One of the reasons I did a project in SASS syntax was all the shortcuts it offered. However SCSS is more readable, except that you have to write @include all the time.
",emilbayes,include
366,2012-05-20 23:21:55,"Well that's a non answer, isn't it?
I much prefer the SCSS syntax, especially when working in teams, with the sole exception being @include instead of +. Having a shorter syntax for one of the most commonly called features of Sass in SCSS form would be great for the language.

On May 20, 2012, at 5:28 PM, Jeremy Weiskottenreply@reply.github.com wrote:

> If brevity's your thing, why not just use classic Sass syntax?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/366#issuecomment-5812451
",Snugug,include
366,2012-08-07 13:32:16,"+1 for the + as `@include`. It'll be so awesome.
I think @chriseppstein want it too.

Sass syntax is nice, but I don't like to be dependent of the indentation.
",MoOx,chriseppstein
366,2012-08-07 13:32:16,"+1 for the + as `@include`. It'll be so awesome.
I think @chriseppstein want it too.

Sass syntax is nice, but I don't like to be dependent of the indentation.
",MoOx,include
366,2012-08-07 15:02:05,"I'm not sure I get the issue with indentation. I indent my CSS now anyway.
I also use classes, not id's, specifically so blocks of style code are
re-usable. It's part of establishing an overall design unity. What's
interesting to me is nesting, and variables. The @include is also a big
one. The indentation seems like it is key when using nesting declarations.
And should help visually identify mixins quickly.

On Tue, Aug 7, 2012 at 9:32 AM, Maxime Thirouin notifications@github.comwrote:

> +1 for the + as @include. It'll be so awesome.
> I think @chriseppstein https://github.com/chriseppstein want it too.
> 
> Sass syntax is nice, but I don't like to be dependent of the indentation.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/366#issuecomment-7553235.

## 

Max West
",maxw3st,chriseppstein
366,2012-08-07 15:02:05,"I'm not sure I get the issue with indentation. I indent my CSS now anyway.
I also use classes, not id's, specifically so blocks of style code are
re-usable. It's part of establishing an overall design unity. What's
interesting to me is nesting, and variables. The @include is also a big
one. The indentation seems like it is key when using nesting declarations.
And should help visually identify mixins quickly.

On Tue, Aug 7, 2012 at 9:32 AM, Maxime Thirouin notifications@github.comwrote:

> +1 for the + as @include. It'll be so awesome.
> I think @chriseppstein https://github.com/chriseppstein want it too.
> 
> Sass syntax is nice, but I don't like to be dependent of the indentation.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/366#issuecomment-7553235.

## 

Max West
",maxw3st,include
366,2012-08-07 16:58:31,"The syntax that I want to bring to SCSS is the following:



This would be syntactic sugar for @include -- meaning @include would continue to be legal SCSS and not deprecated.

Unfortunately, this syntax has a couple of downsides. If we want this syntax to have feature parity with @include, there is an unfortunate parser ambiguity with mixins having no arguments and a content block:



The above could be interpreted as the + selector combinator or a span mixin.

As such, we either have to pick a different (unamiguous) syntax, or disallow either content blocks or zero-argument mixins to maintain our CSS Superset status.

In terms of other syntax, we could use `++` or `<`.
",chriseppstein,include
366,2012-08-27 21:46:52,"@snugug Why Not?
",chriseppstein,snugug
366,2012-09-28 20:49:04,"After having this sit in my head for a few weeks, I like the `++mixin: argument` syntax more than I dislike it. I'd love to see this moved on and implemented as soon as there's some dev time to do so and assuming @nex3 and @chriseppstein are still on board.
",Snugug,nex3
366,2013-04-30 17:23:01,"While we're at it, what about a short cut for `@extend`?
",lunelson,extend
366,2013-05-01 09:01:36,"I like the `<` character; it's reminiscent of class extension in ruby, seems maybe appropriate here; or possibly the `^` character. I'm pretty sure both of these have also been mentioned wrt making complex `&` parent selector references though, so that'd have to be untangled. I think `^` is nice in connection with parent reference as this is also used by Zen Coding/Emmet as the ""climb up"" character i.e. go back to parent level...

But I'll start a new thread cause I have a bunch of other stuff I want to write about `@extend` anyway
",lunelson,extend
366,2013-07-29 19:02:48,"@Snugug Nothing happened to it. It's still on the table.

@hcatlin 

> What does it look like if there are no args?

I consider this a sugar for a subset of the `@include` syntax. I don't think it should support content blocks, for example. As such, I'm not particularly worried about the no argument version. I think, in most cases, placeholders should be used when no arguments are desired. I'm ok with making doing the wrong thing harder here.

> But, maybe my bigger concern is the use of a comma separated list after the "":"" If we want it to look like a CSS attributes, commas don't make too much sense then.

It's true that CSS prefers spaces to separate arguments and comma to separate multiple values for the same property. But I don't see a way around this and this issue would exist in the other forms that use colon instead of parens. And getting rid of the parens is a key goal for me here. I really do want to make things look more like properties.

> Also, combining those looks like an operation... ""+="" or ""+:"".. especially with the spacing how you have it.

Yes, that was actually the inspiration. It shows ""adding into"". except the thing being added into is the ruleset, not the mixin.

> my-mixin+: arg1, arg2;
> my-mixin +: arg1, arg2;
> my-mixin+: arg1 arg2;

All of these are fine, as long as there is no space between `+` and `:`.

> What about non-comma delim, and just a + instead of the "":""?

Not sure why, but this idea doesn't sit well with me. It just doesn't seem to have any analog with existing code. But I think it would be ok from a parsing perspective.
",chriseppstein,include
366,2013-08-01 23:39:42,"After waiting a couple days and sleeping on it... I'm growing fond of +:

On Mon, Jul 29, 2013 at 12:02 PM, Chris Eppstein
notifications@github.comwrote:

> @Snugug https://github.com/Snugug Nothing happened to it. It's still on
> the table.
> 
> @hcatlin https://github.com/hcatlin
> 
> What does it look like if there are no args?
> 
> I consider this a sugar for a subset of the @include syntax. I don't
> think it should support content blocks, for example. As such, I'm not
> particularly worried about the no argument version. I think, in most cases,
> placeholders should be used when no arguments are desired. I'm ok with
> making doing the wrong thing harder here.
> 
> But, maybe my bigger concern is the use of a comma separated list after
> the "":"" If we want it to look like a CSS attributes, commas don't make too
> much sense then.
> 
> It's true that CSS prefers spaces to separate arguments and comma to
> separate multiple values for the same property. But I don't see a way
> around this and this issue would exist in the other forms that use colon
> instead of parens. And getting rid of the parens is a key goal for me here.
> I really do want to make things look more like properties.
> 
> Also, combining those looks like an operation... ""+="" or ""+:"".. especially
> with the spacing how you have it.
> 
> Yes, that was actually the inspiration. It shows ""adding into"". except the
> thing being added into is the ruleset, not the mixin.
> 
> my-mixin+: arg1, arg2;
> my-mixin +: arg1, arg2;
> my-mixin+: arg1 arg2;
> 
> All of these are fine, as long as there is no space between + and :.
> 
> What about non-comma delim, and just a + instead of the "":""?
> 
> Not sure why, but this idea doesn't sit well with me. It just doesn't seem
> to have any analog with existing code. But I think it would be ok from a
> parsing perspective.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/366#issuecomment-21743137
> .
",hcatlin,include
366,2013-08-05 07:24:01,"I gather that the idea of `++` notation is restricted to mixins that don't take content blocks? 

Will it still be possible to use parenthetical notation? (I actually prefer it)

Looking back, the original request was just to save the verbosity of typing `@include`, I hope the solution under discussion will still do that.

FWIW I think `++` is a good shortform for `@include` and I'd like to see one for `@extend` as well (I'd previously suggested `<` or `<<`)
",lunelson,extend
366,2013-08-05 07:24:01,"I gather that the idea of `++` notation is restricted to mixins that don't take content blocks? 

Will it still be possible to use parenthetical notation? (I actually prefer it)

Looking back, the original request was just to save the verbosity of typing `@include`, I hope the solution under discussion will still do that.

FWIW I think `++` is a good shortform for `@include` and I'd like to see one for `@extend` as well (I'd previously suggested `<` or `<<`)
",lunelson,include
366,2013-10-17 01:11:52,"+1 for this syntactic sugar!

With the new `@at-root` directive and the [BEM](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/) syntax, I would love to write something like that:
(inspired by 2 [mixins](http://blog.unakravets.com/post/64113156740/sass-3-3-at-root-bem) from @scottkellum)



This would become a lot more readable, and would output:


",emagnier,at-root
366,2014-12-14 18:09:41,"Actually, maybe there's something better than +mixin syntax itself? Stylus has transparent mixins, so:



Can then compile to all your vendor prefixes. I don't know if sass has made any tradeoffs where transparent mixins can't be done, but it is THE reason I would use Stylus over Sass.

And yeah, the @include way worse, but, having NO syntax is like a million times better imo. I don't even have to think about vendor prefixes with Stylus+kuoto/nib.
",devinrhode2,include
366,2014-12-14 19:40:39,"I like transparent mixins in Stylus as well, but I'm not sure it has much of a chance getting into Sass. Though, I think it could be argued when you use a function in CSS3 like `calc()`, `scale()` and `translate()`, there's not really a way to tell a difference between a built-in CSS  function, a built-in SCSS function and a custom SCSS function, besides giving it a good name, and it would be ridiculous to have to prepend a `++` before you use a custom function, so why should it be different for properties/mixins? Extends could even be transparent by just nesting a selector.

I also don't think transparent includes would make you unaware of what's happening, but to avoid confusion and to make sure that doesn't happen, I would rather have CSS properties have precedence over transparent includes of the same name and spit out a warning. If you WANT to have a mixin with the same name, then prepend the `@include` or `++`... or just don't give it the same name. That just sounds like generally a bad idea anyway if you don't have to type out a very visually obvious `@include` before it.

I'd prefer = or == instead of ++'s just because I think it looks cleaner. I also like the idea of using _'s for extends, or anything at all really, but there's only so many symbols on a keyboard, and I'm not a huge fan of double characters.


",whaaaley,include
366,2015-01-03 18:46:01,"The problem, as stated by @chriseppstein [earlier in](https://github.com/sass/sass/issues/366#issuecomment-7559687) [this thread](https://github.com/sass/sass/issues/366#issuecomment-7560114) with `+my-mixin` (or `+ my-mixin`) is that it's ambiguous with the adjacent sibling selector. The two proposed syntaxes that have been discussed (besides transparent mixins like Stylus, which @nex3 believes is [""‚Ä¶a pretty grievous misfeature in Stylus.""](https://github.com/sass/sass/issues/525#issuecomment-8995033) ) are `++my-mixin` and `my-mixin +:`
",Snugug,nex3
366,2015-01-05 19:00:22,"@nex3 Please comment.
",chriseppstein,nex3
366,2015-01-16 21:47:30,"I'm warming to the `+my-mixin` syntax. It's a backwards incompatibility, but it's not a CSS incompatibility since CSS doesn't support nested declarations anyway.

I'm still unsure about the CSS-like colon syntax after the mixin name, though. There's certainly some appeal to the idea of making mixins look like properties, but it's not clear how the argument list should work. We could make it comma-separated, like current argument lists, but then it's dissimilar to most CSS properties. If we make it space-separated, though, what does a top-level comma even mean in a mixin invocation? We'd have to add a whole new type of parsing that's completely idiosyncratic.

If we do end up supporting colon syntax, I'd probably vote for it to be as close to the existing invocation syntax as possible otherwise. That is, you would write something like:



Also, if we do that, I'd want `@include` syntax to support the same thing:


",nex3,include
366,2015-07-12 09:34:24,"Is there any progress after 3 years? Any of the following syntaxes would be much better than the current tediously redundant long `@include` syntax:



With functional notation with just `@include` omitted, there is no ambiguity: it's certainly not a declaration and not a nested rule.

Though I would prefer transparent property syntax like this:



I would even be quite happy if SCSS would provide just some **predefined** property mixins (without ability to define custom property mixins), in particular:
- `size` (`width` and `height`  set to same value);
- `margin-x` (`margin-left` and `margin-right` set to same value) / `margin-y` (like `margin-x`, but for `margin-top`/`margin-bottom`);
- `padding-x` (like `margin-x/y`, but for padding);
- `border-radius-top` (rounds top left and top right corners at once) / `-right` / `bottom` / `left`.

`size` is the one I use most often of them and very often in general (currently with the verbose `@include` syntax).

Thanks.
",Marat-Tanalin,include
366,2015-10-13 18:45:34,":+1: 
That's the ONLY syntax who keep me watching Sass.
I'm for replacing `@include` by `+`. Allow me a real useCase :



I'm often using mixin for custom selectors. Here how I use them :



It would be really cool to do it like this :



And the big bonus would be :



to allow mixins call inside selector chain =)
",long-lazuli,include
366,2015-11-16 17:34:40,"+1 for introducing a plain-function syntax.



This is concise, unambiguous, and immediately understandable to virtually anyone who has ever written a line of javascript.

The reason it is difficult to define a complete declaration-style syntax for mixins is because producing declarations is not what mixins do‚Äîat least in general.  They are calls that can be used in almost all contexts, and I think the only way to represent them accurately in all contexts is to render them as such.

There is hardly an argument to be made that a plus sign and colon and is more concise than two parentheses.

Plain-function syntax introduces no ambiguities with selectors, and will never do so in the future even if a new version of the CSS specification adds new combinators.  Adding any symbol to the beginning or end of a property name is concerning when we consider future CSS syntax, and the alternative of not using a symbol and allowing properties to be ""redefined"" as mixins raises similar concerns.

But the best part of this syntax may be that it will require no changes to the parser, other than making the @include keyword optional and parenthesis required.  The @include prefix could even someday be deprecated.
",andrew-skybound,include
366,2016-09-15 14:45:31,":+1: for plain functions.

They could even work together with the current `@function` syntax:



Just to clarify the disambiguation process:


",felds,function
365,2012-05-03 18:20:59,"@ReinierK Can you provide a portion of the stack trace?
",nex3,ReinierK
363,2012-04-25 02:12:40,"Short of adding more and more command line flags, there is the solution of metavariables; has sass ever considered those?

eg at the top of the file, something like `$sass-color-format: preserve;` (vs `$sass-color-format: compress;`)

or maybe `@sassoption color-format preserve;`
",jleclanche,sassoption
363,2012-05-09 19:53:36,"@shaneriley sass does do that. Except it seems that it doesn't do it when it doesn't have to fully parse the property value. This is a bug IMO. @nex3 should weigh in.

Try running:



thru: `scss -t compressed`

and you'll get:



The compass function exists and is now in Sass itself. It exists because IE has a non-standard treatment of alpha channels where hex takes the form of `#AARRGGBB` and also because they do not support `rgb()` or even shorthand hex. Therefore this is the one place in all of CSS where the output format matters and therefore a hack exists to accomodate the hack that is IE filters.

As such, I do not see a reason to add a configuration option for this. when in non compressed modes, preserving css-valid author formats makes sense as the behavior. That said, feel free to make other use cases if you like, maybe one of those will convince me.
",chriseppstein,nex3
362,2012-04-23 23:35:07,"@Maher4Ever @thibaudgg Do you two have any insight about this? Is it a known issue?
",nex3,thibaudgg
362,2012-04-23 23:35:07,"@Maher4Ever @thibaudgg Do you two have any insight about this? Is it a known issue?
",nex3,Maher4Ever
362,2012-04-24 07:32:42,"This warning is print when system listening gem doesn't work, but polling fallback should always work.

@DavidRivers can you give more info about your setup (Hardware, OS, ruby version...). Thanks!
",thibaudgg,DavidRivers
361,2012-04-21 18:50:10,"Here's a common use use case for a `nil` literal:



This is semantically different than using `false` in conjunction with an `@if` directive. Plus, guarded assignment can be used to set a dynamic default value.
",petebrowne,if
361,2012-04-29 19:07:56,"What do you think @nex3 @chriseppstein? Should `1 + null` return `1` or raise a SyntaxError?
",petebrowne,chriseppstein
359,2012-04-19 20:55:26,"Support for `@media` bubbling with `@extend`

SCSS:



Desired CSS:



Actual CSS:



I could have sworn this worked before but it doesn‚Äôt in the latest build.

Bubbling from inside out would be awesome but this has never worked in any version I tried.



EDIT: I am on 3.2.0.alpha.101
",scottkellum,extend
359,2012-04-19 20:55:26,"Support for `@media` bubbling with `@extend`

SCSS:



Desired CSS:



Actual CSS:



I could have sworn this worked before but it doesn‚Äôt in the latest build.

Bubbling from inside out would be awesome but this has never worked in any version I tried.



EDIT: I am on 3.2.0.alpha.101
",scottkellum,media
358,2012-04-19 18:14:40,"This is expected. Placeholder selectors work just like normal selectors in all respects except that they themselves are not printed. This includes where the generated rules for `@extend` exist in your stylesheets.

Conceptually, `@extend` makes additional rules apply to a given selector. Those rules apply with all the cascade information of the originally declaration. Ideally even the original specificity would be preserved, but unfortunately this isn't possible in a preprocessor.
",nex3,extend
356,2012-05-07 15:50:45,"Here is the [prefix-whitespace.js](https://github.com/twitter/recess/blob/master/lib/compile/prefix-whitespace.js) file from [twitter/recess](https://github.com/twitter/recess) that @Anahkiasen mentioned that handles the formatting of the vendor prefixes.

I tried to look through the code a bit for Sass to see if something similar could be worked in easily, but Recess has the sibling nodes available, and I do not believe that is the case in Sass.

For the `:nested` and `:expanded` css outputs, it would be possible to at least prefix the vendor specific properties, but not the standard property, ie:



Check if the property name starts with a vendor prefix and add the padding. But, without access to sibling properties (or adding a `@last_node` variable), I cannot see a way to properly format it.

Hopefully someone else can look into this and find a good way to implement it, because stylistically, I really like this.
",mckramer,last
353,2012-04-15 22:44:16,"I love SASS, but there's something that always bugged me about how @import works. I'd like that files were real 'packages' (or 'modules') that, when imported, don't drop all names into the global scope -- instead, they use the import name as the namespace for the names contained in the file. This would make it a lot more modular and modern.

The idea in a nutshell:



Here, foo.scss contains a mixin bar. To use it we call 'foo.bar' -- prefixing it with the 'foo' namespace. The idea requires also to support renaming the imported package on import:



I've used the keyword 'as' from Python, but it could be something else; it doesn't matter. After imported using a custom name, we use it as:



This originated here:

http://stackoverflow.com/questions/10164995/css-preprocessor-with-modules-and-sane-scope
",moraes,import
353,2012-04-16 02:04:22,"We're definitely thinking about possible ways to accomplish this. We're planning on replacing `@import` with a more powerful, module-aware import mechanism, but we haven't figured out exactly the right semantics for it yet. There are a number of use cases it needs to support, and we need it to support them all cleanly. This is a tall order, and we have yet to start really working on it.
",nex3,import
353,2012-04-16 06:35:35,"Nothing really written down. There are a number of issues in the tracker that are related. Off the top of my head:
- Non-transitive imports (if A imports B and B imports C, A shouldn't necessarily see everything from C).
- A way of getting around non-transitive imports.
- Namespacing, as in this proposal. Not just for mixins but also variables and probably placeholder selectors as well.
- Disabling CSS output, both selectively and wholesale. The importer may want to `@extend` the rules in the importee but not have them concretely present, or it may want to suppress rules matching a certain selector.
- Renaming classes. This isn't something I'm 100% sold on, but it has been requested. Maybe the correct way to do this is some combination of namespacing and `@extend`.

@chriseppstein Can you think of any I'm missing?
",nex3,extend
353,2012-04-16 06:35:35,"Nothing really written down. There are a number of issues in the tracker that are related. Off the top of my head:
- Non-transitive imports (if A imports B and B imports C, A shouldn't necessarily see everything from C).
- A way of getting around non-transitive imports.
- Namespacing, as in this proposal. Not just for mixins but also variables and probably placeholder selectors as well.
- Disabling CSS output, both selectively and wholesale. The importer may want to `@extend` the rules in the importee but not have them concretely present, or it may want to suppress rules matching a certain selector.
- Renaming classes. This isn't something I'm 100% sold on, but it has been requested. Maybe the correct way to do this is some combination of namespacing and `@extend`.

@chriseppstein Can you think of any I'm missing?
",nex3,chriseppstein
353,2012-04-16 07:43:33,"Disabling css output should be done with a flag imho. Eg @import ""file.scss""  !noinclude;

Non-transitive imports.. Python solves this with `__all__`. I think it would be a better way to go. For the record, in python, when you do `from foo import *`, it includes everything, _unless_ an `__all__` variable is specified, which contains a list of variables which are deemed ""public"" by the author.

Namespacing.. yes. I would find it weird by default. Especially since I don't believe there's any namespacing currently in scss?
There was another proposal I think about reusing properties from the same rule, I threw something like:



I think this would be good syntax for namespacing in general. So you could do:
import ""mystyle.scss"" as mystyle !noinclude;



so to sum it up:



-> imports file.css and file2.scss, both are compiled in.



-> translates to ""native css import"":



-> errors because you cannot natively import file2.scss



-> imports file.scss and file2.scss and makes all their rules _available_. I am not sure whether !noinclude should have to be specified for every file in the rule. I think css would not like that but then again there aren't exactly many bang-rules in css.



-> imports file.css accessible under the namespace foo, and file2.scss accessible under the namespace bar. I don't currently know whether importing a file ""as another"" should imply !noinclude (actual keyword name to be decided, i dont really like noinclude). I would go with ""least surprise"", but I can't actually figure out what behaviour would be the least surprising. I might expect importing ""as"" to be ""obviously, I want this namespaced, so don't go compiling this for me"". But then again, I might expect ""I have to specify !noinclude in other cases, why not now?""

non-transitive imports undefined atm. I'd recommend an `__all__`-like variable or rule or something.
",jleclanche,import
353,2012-04-16 15:33:23,"@Adys, there're some good ideas there.

I'd require the namespace to be _always_ named in order to use namespaces. So:



...is automatically translated to ""native import"", while:



...are ""namespaced"" imports.

Personally I think namespaces should be the default as one of the main purposes of preprocessors is to allow modularization. As it is we need to create fake namespaces in mixin/variable names to avoid collisions. But I understand the concern about backwards compatibility and can live with it as optional. :)

I think !noinclude is unnecessary. If people want to selectively include selectors, mixins or variables, they can create a new file, import a namespace and include only what is wanted. No need for new syntax and rules.
",moraes,Adys
353,2012-04-16 16:29:25,"This doesn't make sense. You say:
""I'd require the namespace to be always named in order to use namespaces""

and then you say: 
""I think namespaces should be the default""

It's either one or the other :P I'm comparing to python/the first example in this thread here where @import ""foo"" would make everything available as ""foo->x"". It's a bad idea imho because you could be importing foo.sass, foo.scss and foo.css in the same file.
",jleclanche,import
353,2013-05-29 15:52:20,"@zakdances Have patience. This is the main feature we have planned for Sass 4.0. We would like to see proposals for how this would work and get feedback on such proposals (Like @noprompt's #749). Just plowing forward and writing code without an agreement for what we are building seems likely to waste a lot of time.
",chriseppstein,noprompt
353,2013-05-29 16:16:54,"@chriseppstein Understood. Should new proposals be appended here or filed as a new issue?

Did you know that each time you use `@import` in an `.scss` file, Sass actually copies the contents of the linked stylesheet to the file after compilation? This means that if you use that same import statement more than once, even in different sass files, you get duplicate CSS? This creates a TON of duplicate CSS and creates incredible bloat.

I'm just surprised that functionality like `@import`, which is so core to the Sass experience, has this kind of major side effect. I hear what you're saying about reaching an agreement, but **in the meantime** shouldn't there be at least be a temporary workaround to limit the problems this issue causes?

Maybe I'm using `@import` wrong or I'm ignorant of work-arounds/fixes for this. Please let me know how you're dealing with this issue in your own projects.
",zakdances,import
353,2013-05-29 16:24:42,"@zakdances A gist linked to this issue would be a good way to make a proposal. Yes, I'm very aware of how `@import` works -- I'm one of the core developers of Sass. They way you manage the behavior of the import directive effectively is to keep separate things that need to be re-used (mixins, functions, variable definitions, etc) from the things that should only appear once and then judiciously import the latter. Here's an article on [best practices for project organization](http://thesassway.com/beginner/how-to-structure-a-sass-project).
",chriseppstein,import
353,2016-10-31 17:29:49,"Alternatively if you don't want dot notation (Sass seems to be largely avoiding it) you could even decide that the importing an entire library under a variable eg. `@import $grid from './grid'` is not allowed and only permit named imports. As I mention above you could then named `@import` anything - placeholder, variable, mixin, function (or even selector? thought that could get very messy) and use it just as if you had defined it in that file. Except it would have access to effectively private variables and functions from the other file.

That would eliminate the need for a new dot-notation or some other way to access items in an imported module 'collection' - the usage of all those things could stay the same as it is currently.



Exports:



The no-output use-case is also covered, since you're only importing what you need in the first place.
",simonbuerger,import
350,2012-04-12 04:13:14,"We recently ran into a bug where IE ignores everything after the 4095th selector in a css file. We were using `@extend` extensively for lots of styles (which can create lots of css selectors) and unwittingly ran into the problem of having more selectors than the IE limit. We didn't know about the 4095 limit, so it took a lot of time tracking down why IE seemed to ignore a small percentage of our styles, and why rearranging the stylesheet fixed some bugs but caused others.

http://marc.baffl.co.uk/browser_bugs/css-selector-limit/ demonstrates the bug.

It might be good for Sass to warn about this limit if there's more than 4095 selectors in a generated file. Or even throw an exception (that could be turned off). 
",joevandyk,extend
349,2012-04-10 19:42:34,"I'm glad you spoke up about this. I've seen this sort of discussion go sour way more times than I'd like, so I appreciate the risk you took in posting the issue.

It looks like @jina, the designer in charge of the redesign, is on board with re-doing the logo, so I'm going to close this issue.
",nex3,jina
349,2013-08-01 20:49:28,"The site redesign is still ongoing. The work has been speareheaded by the awesome @jina and can be seen at https://github.com/sass/sass.github.com --- any help on that effort is very much appreciated!

And, as the selector of the original branding package, I always find this line of commentary surprising. I'll start with the statement though that intention is NOT the most important thing, but impression is. So, if its seen as sexist and negative against women, then by definition it is.

To me, the Sass woman is not at all a ""blonde airhead"". This branding was meant to go along with the original Haml branding, which was a similar-style drawing of a young boy. Both of them, to me, seem to say ""I'm very clever and I have a mischievous secret""... which is how I originally thought of both Sass and Haml. As tools that a minority would use, but would have great power because of it. 

Also, I wanted to do strongly ""female"" branding as a way to address my being gay head on with a public branding of my work as effeminate. At the time for me, it was a strong statement for me. Less so as I've gotten older and am able to be more publicly out.

The way I was thinking about it was...: ""Why do technologies have to be so ""male"" all the time? Why be afraid of some pink? I need a counterpoint to the male-centric branding of Haml.""

Again, the fact that several people over the years have felt that the branding was insulting... that is a great regret to me, as it was never where my heart was. And so, we are trying to replace this branding at the moment.

But! The new branding package exists... it holds onto the feminine branding, but (hopefully) removing the iconography that can read as ""airhead"". We're hoping to launch the site before SassConf in October.
",hcatlin,jina
349,2013-08-02 17:03:24,"@willwallace85 We have no intention of making the sass website into ""a regular old programmers site"" and such a thing was never requested. This feels like a strawman to me.
",chriseppstein,willwallace85
349,2013-08-02 18:17:41,"The site is maintaining its unique and feminine branding, while removing the possible-to-see-as-ditzy character from the logo. This issue wasn't the primary reason for redesigning the logo, but redesigning the logo gave the Sass design team opportunity to address these concerns while they were at it. @nex3, @hcatlin, @jina, and the Sass design team have already taken care of this. It's a win-win ‚Äî everybody has already won.

The Sass community needs to be inclusive, and if there are easy steps to make it more inclusive without any negative side effects those steps should be taken. When someone points to code that works but with trivial effort can be re-written to be more elegant, we re-write it. That doesn't mean the original code was inherently wrong or bad, and all those who used and enjoyed it are shamed by proxy. It just means together we've found a better way to write it.

@chriseppstein, I appreciate your metaphor.
",robwierzbowski,jina
347,2012-04-08 20:52:59,"The example code below parses in alpha.72, and fails to parse in alpha.101 with this error :

> 'Invalid CSS after ""    @media "": expected ""{"", was ""$tablet-portrait {"")' :



My assumption is that something from a few weeks ago was reverted in the last batch of changes, possibly accidentally.
",bjmiller,media
347,2012-04-08 21:16:38,"This is not accidental. Since the entirety of SassScript can't be used after `@media` (e.g. `$foo and $bar` is ambiguous), you need to use `#{$tablet-portrait}` instead.
",nex3,media
345,2012-04-03 17:56:43,"I really want to see this. But I have not yet convinced @nex3 of the necessity.
",chriseppstein,nex3
342,2012-03-29 20:17:06,"Here is an snippet



When I compile this, I get `""Syntax error: Invalid CSS after ""...#{var-2}"": expected ""}"", was ""{"" on line 9`

The real error is because `@extend ""#{$var};`is not closed with a double quote.
Error message should be clearer.
",MoOx,extend
340,2012-03-28 10:18:33,"I think what he meant is this :



And when you'd resize under 480px, both the width and padding properties of body would recompute.
Although I was thinking the same thing just yesterday and how much I needed it, I don't exactly see how that would work. The only way maybe would be making SASS check what variables change in each @media ruleset, and automatically append the concerned properties with their modified values.

So the output would be something like this :



Now that would be a hugh step forward, but maybe too big of a change.
",Anahkiasen,media
339,2012-03-27 20:24:40,"I didn't know %. was supposed to be %, didn't find the placeholders in the sass doc. I was trying to update a bit of compass-recipe that was still using @silent. I see the problem now, I'll check, should work now. 
",Anahkiasen,silent
339,2012-03-29 20:19:23,"Mey compass-recipes still use `@silent` ? Who is maintaining this shitty library ? :)
",MoOx,silent
333,2012-08-08 18:33:06,"@nex3 I think a simple version.rb file would suffice, but I think there are build scripts that are not checked in that depend on the current scheme.
",chriseppstein,nex3
332,2012-03-23 13:35:36,"When i use the multiply values of properties, separated by comma it cause bug:

The example of real used code:



I can not use it like  
`@include box-shadow(0 1px 1px #5eb2f7, inset 0 1px 1px #5eb2f7)`
 because it looks like few separate arguments, but it stay for single.

When i try to set argument as 
`@include box-shadow(""0 1px 1px #5eb2f7, inset 0 1px 1px #5eb2f7"")`
 it generate not working css, because it also paste "" in the css rule.

Also i tried to escape comma by backslash like
`@include box-shadow(0 1px 1px #5eb2f7\, inset 0 1px 1px #5eb2f7)`
it generate next code:
`-webkit-box-shadow: 0 1px 1px #5eb2f7 \, inset 0 1px 1px #5eb2f7;`etc.

I think you must resolve this problem, because many of properties in css3 are setted multiply, separated by comma...
",alokozam,include
325,2012-03-18 20:07:50,"Note: the sass `@debug` directive is really helpful in debugging issues like this.
",chriseppstein,debug
324,2012-03-19 21:04:21,"I [recently changed](https://github.com/chriseppstein/compass/commit/af645fa9910d31f6b1b6f3e5c2f4fd725d418a59) the blueprint reset to be almost entirely extend based. And I have to say that the output in our test files was really quite lovely. But I can't shake the fact that output specificity will change based on an unrelated delta and maybe to a page you're not even working on. The output change is wholly unpredictable by the user making the change. I find this to be a flatly unacceptable behavior that will place `@extend` firmly into the avoidance bucket for most developers. I will trade predictability for bloat as default behavior.

Now, that said, I am ok with users opting into this optimization once they have read and understand the caveats. So if we want to introduce a -O1 flag and start down the path of well documented optimizing output, I am ok with this.
",chriseppstein,extend
324,2012-03-19 21:27:25,"To be clear: do you think that even the following guarantee is unacceptable? ""Given `A { @extend B }`, all selectors including `B` that affect `A` will have specificity between that of the original selector and that of `A`."" It seems reasonable to me that the specificity of the original selector is used; in fact, that's how I'd expect a native implementation of `@extend` to work. For example, imagine that the following styles worked in native CSS:



I would expect `<div id=""pseudobody"" class=""black"">` to have black text, since `.black` has higher specificity than `body`, and `body` is the selector for the rule containing `color: blue`.

What do you think the output of the following snippet should be?


",nex3,extend
324,2012-03-20 07:10:01,"I can see that being a reasonable design decision for a native implementation of `@extend`.

But this is not a native implementation. Our implementation is based on selector re-writing and so I expect this needs to work in a predictable fashion that allows the authors to easily reason about the behavior.

To be honest, I'm having a hard time understanding what you mean by:

> ""Given A { @extend B }, all selectors including B that affect A will have specificity between that of the original selector and that of A.""

Regarding the snippet, I would expect the following output:


",chriseppstein,extend
324,2012-03-20 22:46:42,"I don't believe the behavior I'm advocating is particularly unpredictable... at least, not any less predictable than `@extend` by its nature has to be.

Let me see if I can explain it more clearly.

First of all, let's define the function `extend(S, A, B)` to be the result of taking a selector `S` and extending it by replacing all instances of `A` with `A, B` and resolving the result a la `@extend`. Here are some uncontroversial examples:



### Specificity of the Base Selector

Note that so far, it's always the case that `extend(S, A, B)[0] = S`. However, consider `extend(a.foo, .foo, a)`. One interpretation of this would give the result as `a.foo, a`. However, `a` matches a strict superset of the elements that `a.foo` matches, so another interpretation could give the result as just `a`. `a` and `a.foo, a` are semantically identical **except** for specificity.

Let's define a new function to talk about this: `spec(S)` is the specificity of a selector `S`. So `spec(a.foo) = 11`, while `spec(a) = 1`. The nature of CSS means that differences in specificity can lead to practical differences in styling, so to some degree we clearly need to consider specificity as part of the semantics of the selectors we deal with. This is the broad point of this issue.

Let's get back to the example of `extend(a.foo, .foo, a)`. The first selector in the result, `extend(a.foo, .foo, a)[0]`, corresponds to the selector written by the user with the goal of directly styling a set of elements. Allowing the specificity of this selector to change because an `@extend` was added elsewhere in the stylesheet is semantic change at a distance, which is clearly something we shouldn't allow. Thus, it should be the case that `extend(a.foo, .foo, a)[0] = a.foo` and in general that `spec(extend(S, A, B)[0]) = spec(S)`. Since any change to `S` will change its specificity, this shows that it should always be the case that `extend(S, A, B)[0] = S`.

#### First Law of Extend: `extend(S, A, B)[0] = S`

This is not always the behavior in Sass, either in master or in stable; this is clearly a bug that should be fixed.

### Specificity of Generated Selectors

Now that we've established what `spec(extend(S, A, B)[0])` should look like, it's time to think about what `spec(extend(S, A, B)[1])` should look like as well. In order to allow our users to reason about the styling of their page, the specificity of the generated selectors should clearly be as consistent as possible. In an ideal world, if `@extend` were supported natively in the browser, the specificity would be equivalent to that of the original selector; that is, `spec(extend(S, A, B)[1]) = spec(S)`. However, that's not always possible:



Since consistency is desirable, we might be tempted instead to say that `spec(extend(S, A, B)[1]) = spec(B)`. But that's not always possible either:



There is one guarantee we can make, though: `spec(extend(S, A, B)[1]) >= spec(B)`, since everything in `S` is either merged with or added to `B`.

#### Second Law of Extend: `spec(extend(S, A, B)[1]) >= spec(B)`

### Implications for Optimization

The ultimate goal of this discussion is, of course, that we want to be able to perform certain optimizations on the generated selectors in order to reduce output size, but we don't want these optimizations to break the guarantees we offer our users. Which optimizations do the guarantees outlines above allow us, and which do they forbid?

One optimization that we've been doing for a long time is `extend(a.foo, .foo, a) = a`, as discussed above. This violates the first law, since `a != a.foo`.

Another optimization added in 8f4869e608e70d7f468bb463ebfe7a939d834e27 is `extend(a, a, a.foo) = a`. This violates the second law, since `spec(a) < spec(a.foo)`.

However, many of the optimizations added in 8f4869e608e70d7f468bb463ebfe7a939d834e27 do still work. For example, `extend(.bar a, a, a.foo) = .bar a` works because `spec(.bar a) = spec(a.foo)`.

### Conclusion

As long as we make the `@extend` optimizer specificity-aware, we can retain a number of useful optimizations while still providing the same guarantees that they have without any optimizations. That's my proposal: that we support all the optimizations we can while still abiding by the two Laws of Extend outlined above.
",nex3,extend
323,2012-03-17 23:13:29,"Let @keyframe directives (and the browser specific alternatives) bubble to the top of the tree like @media or @import.

For example, the following mixin defines a custom animation for stepping through a series of frames:



This fails to work since the mixin outputs the @keyframes block within whatever selector it was called on, instead of at the root of the document.
",dominic,keyframes
323,2012-03-17 23:13:29,"Let @keyframe directives (and the browser specific alternatives) bubble to the top of the tree like @media or @import.

For example, the following mixin defines a custom animation for stepping through a series of frames:



This fails to work since the mixin outputs the @keyframes block within whatever selector it was called on, instead of at the root of the document.
",dominic,media
323,2012-03-17 23:13:29,"Let @keyframe directives (and the browser specific alternatives) bubble to the top of the tree like @media or @import.

For example, the following mixin defines a custom animation for stepping through a series of frames:



This fails to work since the mixin outputs the @keyframes block within whatever selector it was called on, instead of at the root of the document.
",dominic,keyframe
323,2012-03-17 23:13:29,"Let @keyframe directives (and the browser specific alternatives) bubble to the top of the tree like @media or @import.

For example, the following mixin defines a custom animation for stepping through a series of frames:



This fails to work since the mixin outputs the @keyframes block within whatever selector it was called on, instead of at the root of the document.
",dominic,import
321,2012-03-15 12:55:11,"Sass provides the @extend directive for working with classes. 
",chriseppstein,extend
320,2012-03-14 22:15:30,"Possibly related: #139

I'm not sold on this particular use case because it's so easy to separate out the bits that output from the bits that don't. Especially now that we have placeholder selectors for use with `@extend`.
",chriseppstein,extend
320,2012-03-14 23:57:08,"This is something we'll want to support in the next version of `@import`, but not something we'll want to add a new directive for right now.
",nex3,import
320,2012-09-28 20:44:31,"We're planning to add a new `@import`-style directive that supports this use case, but we have not seriously started planning it yet.
",nex3,import
320,2015-10-23 19:44:37,"@lolmaus The problem is when you have @import statements importing the placeholders into your partial file, it ends up duplicating the placeholder output (times how many @imports you have of that particular placeholder).
",crush83,imports
320,2015-10-23 19:44:37,"@lolmaus The problem is when you have @import statements importing the placeholders into your partial file, it ends up duplicating the placeholder output (times how many @imports you have of that particular placeholder).
",crush83,import
320,2015-10-27 10:36:26,"@crush83 

> @lolmaus The problem is when you have @import statements importing the placeholders into your partial file, it ends up duplicating the placeholder output (times how many @imports you have of that particular placeholder).

Ever heard of `sass-imort-once`?
",lolmaus,imports
320,2015-10-27 10:36:26,"@crush83 

> @lolmaus The problem is when you have @import statements importing the placeholders into your partial file, it ends up duplicating the placeholder output (times how many @imports you have of that particular placeholder).

Ever heard of `sass-imort-once`?
",lolmaus,import
319,2016-01-20 12:41:33,"@nex3 hello, wow how time flies, just noticed this ticket is from 2012, anyway i would like to support the addition of another decimal for extra precision and to aid modern browsers in rounding up values. 

Note: I only support the addition of an extra decimal, because most browsers round up the result if 6 decimals are present in the css output.

**Case Study**.:  in a parent element that has **1200px** width, we have **3** columns that have a calculated width output of **33.33333%**. 

Each browser treats css differently and chooses what decimals to ignore.

**CHROME**: reads and interprets the output as is but **doesn't round up unless it has 6 decimals**. For the above mentioned example chrome will calculate the width of the column as **399.984px**. If SASS could output 6 decimals by default, meaning we would have gotten a width of **33.333333%** chrome would round up the calculated width to **400px**.

**FIREFOX**: reads the output of the CSS correctly but chooses to display in inspect element only 4 decimals, for reasons known only to the firefox devs. Thus being said, For the above mentioned example firefox will calculate the width of the column as **399.983px**. If SASS could output 6 decimals meaning we would have gotten a width of **33.333333%** firefox would still display the value with only 4 decimals but it would calculate and perform drawing of the said element with the value gotten from the css and it would also round up the width the same as chrome does to **400px**.

**EDGE**: we all know where this is going, it's a decent browser but it has flaws. However many decimals you output in the CSS it will choose to display in inspect element only 2 and use for calculations only 2. So if we have 5 decimals or 6 decimals it doesn't matter to EDGE output will be the same, meaning **399.96px**.

I would like to make a note on how chrome and firefox rounds up values [close to perfection] and how edge rounds up values.

Anyway i only noticed this while trying to build a custom block only grid for pixel perfect precision. I was constrained to block grid because i am not allowed to drop support for older browsers yet.

Thank you, and i hope i've convinced @nex3 about adding a 6th decimal as a default simply because 2 major and powerful browsers are able to round up if they have 6 decimals.

P.S.: Was unable to test this on safari 9.
",lexstefan,nex3
318,2012-03-14 07:33:27,"Btw, a workaround si to make the same behavior like this
`@mixin media-xl         { $max: $media-query-width-xxl  - 1px; @media (min-width: $media-query-width-xl)     and (max-width: $max)  { @content } }`
",MoOx,content
318,2012-03-14 07:33:27,"Btw, a workaround si to make the same behavior like this
`@mixin media-xl         { $max: $media-query-width-xxl  - 1px; @media (min-width: $media-query-width-xl)     and (max-width: $max)  { @content } }`
",MoOx,media
318,2012-03-14 07:33:27,"Btw, a workaround si to make the same behavior like this
`@mixin media-xl         { $max: $media-query-width-xxl  - 1px; @media (min-width: $media-query-width-xl)     and (max-width: $max)  { @content } }`
",MoOx,mixin
315,2012-03-12 21:11:01,"From what I can tell, I have sort of a unique need - was wondering if I could get some feedback.

I want to be able to define a dictionary of property and value pairs.

The use for this would be to create style presets that could be mapped to different html structures.

This is the _really_ inefficient way I'm doing it right now.





You can see that by default I have one set of values that will apply to all the places where i've assigned variables.
If I want to make `box2` different, I can do so. But the problem is this is terribly inefficient. For each new style i want to create, I have to duplicate the variables. In addition, what if a style has more variables than that. In practice, I'm using something like 10 vars per style.

Now, I know the argument is, why don't you create a style1/style2 class, and then use @extend to apply them like that?

Well, @extend doesn't let you interpolate variables. Also, because of the issues/behavior with nested selectors - this tends to generate a huge list of selectors, among other problems.

Anyways, here is my idea of how this would work.



Which would output:


",jonjaques,extend
315,2012-03-13 00:33:31,"You're right. I think the problem that I'm trying to solve is somewhat impossible actually. The real world application is that I have a skinning framework that caters to a proprietary CMS that my company develops and hosts websites with. The major hurdle though, is that there is no semblance of consistency in the markup whatsover. Things that are supposed to be styled similarly often times do not share classes or have similar HTML structure. 

So I have this task of trying to take one set of properties and values, and mapping them to multiple sets of elements, often times with different structures. On top of that, they need to be adjustable (Hence the multiple styles idea). That's why using @extend (I have been reading in the changelog that this is quite improved in 3.2) tends to generate huge rule sets for me. Mixins don't do much better.

Unfortunately, the circumstances don't permit changing the markup, so really this seems more and more like a crap shoot.
",jonjaques,extend
313,2012-03-12 01:18:31,"I want to do this, but SCSS throws errors:

$small: 540px;
$big: 1000px;

@media screen and (max-width: $small) {
  // Styles for the smallest version.
}

@media screen and (min-width: $small and max-width: $big) {
  // Styles for the mid version.
}

@media screen and (min-width: $big) {
  // Styles for large version
}
",borismus,media
312,2012-03-09 19:30:21,"No there is not.

@chriseppstein thoughts on adding this?
",nex3,chriseppstein
312,2012-03-09 20:23:58,"I do not like this as a general facility for mixins. In this case, `@include opacity(1 !important);` will probably work, but it will not work generally unless compass adds support for `!important` as an argument to the mixins. I think it is the job of the mixin api to support importance where it makes sense.
",chriseppstein,include
312,2012-12-18 23:06:02,"This would be useful for overriding the inline styles jQuery UI puts on.

For example a jQuery UI dialog puts `display: block` inline on the `ui-dialog-content`

Where as I want to override it with `display: -xxx-box` using `@include display-box()`
",Petah,include
305,2012-03-02 02:30:23,"`@supports` and `@document` should support `@media`-style bubbling. For `@document` merging multiple rules isn't possible, but for `@supports` it is.
",nex3,supports
305,2012-03-02 02:30:23,"`@supports` and `@document` should support `@media`-style bubbling. For `@document` merging multiple rules isn't possible, but for `@supports` it is.
",nex3,media
305,2012-03-02 02:30:23,"`@supports` and `@document` should support `@media`-style bubbling. For `@document` merging multiple rules isn't possible, but for `@supports` it is.
",nex3,document
305,2012-03-09 23:05:27,"According to [the spec](http://dev.w3.org/csswg/css3-conditional/), `@support` and `@document` support nesting in native CSS, so merging the rules is unnecessary.
",nex3,document
305,2012-03-09 23:05:27,"According to [the spec](http://dev.w3.org/csswg/css3-conditional/), `@support` and `@document` support nesting in native CSS, so merging the rules is unnecessary.
",nex3,support
305,2012-08-08 18:35:25,"@keyframes too ^_^
",chriseppstein,keyframes
304,2012-03-02 02:29:05,"The `@supports` directive should support interpolation and `@media`-style script-as-property-value.
",nex3,supports
304,2012-03-02 02:29:05,"The `@supports` directive should support interpolation and `@media`-style script-as-property-value.
",nex3,media
297,2012-02-29 18:38:37,"Similar to the Javascript ""arguments"" variable, it is occasionally useful to have a variable-length number of arguments in a function/mixin.

The only solution that I can think of for this is setting an $arguments variable of type List[Literal] which can then be accessed in at least two ways:
- `@each $arg in $arguments`
- `nth($arguments, 4)`

A sample use case might be linear gradients:



I'm sure there are other times it could be useful as well, but that's the one that interests me for now!
",richthegeek,each
293,2012-02-29 12:38:53,"@nex3 or @chriseppstein: Did either of these functions previously accept percentages? I find it odd that a percentage would have made it into the documentation if they didn't at one point.

The way they are right now, in any case, doesn't translate to percentages. They don't actually multiply the starting alpha value but simply increase or decrease the original value by the value passed to the function.
",mikefowler,nex3
293,2012-02-29 12:38:53,"@nex3 or @chriseppstein: Did either of these functions previously accept percentages? I find it odd that a percentage would have made it into the documentation if they didn't at one point.

The way they are right now, in any case, doesn't translate to percentages. They don't actually multiply the starting alpha value but simply increase or decrease the original value by the value passed to the function.
",mikefowler,chriseppstein
292,2012-02-27 21:03:35,"I dislike the idea of a `@var` keyword. The distinction between when to use `var` and when not to is unclear to many Javascript programmers, even those who have experience with scoping issues in other programming languages. Adding it to Sass seems unlikely to promote comprehension.

I'm closing this issue since the specific proposal is rejected. @chriseppstein, feel free to open a new issue to discuss the broader issue of how to bring our variables in line with the CSS proposal.
",nex3,var
290,2012-02-25 18:27:06,"@tixz what version of Sass are you using?

From the [spec](http://www.w3.org/TR/css3-conditional/#at-document), using double-quotes are safe in this context. @nex3 I think it's strange that we're parsing the `@-moz-document` directive. But if we are going to, it seems like we'll need to make `url-prefix` and quote like we do for `url`.
",chriseppstein,tixz
290,2012-02-25 18:27:06,"@tixz what version of Sass are you using?

From the [spec](http://www.w3.org/TR/css3-conditional/#at-document), using double-quotes are safe in this context. @nex3 I think it's strange that we're parsing the `@-moz-document` directive. But if we are going to, it seems like we'll need to make `url-prefix` and quote like we do for `url`.
",chriseppstein,nex3
289,2012-02-22 21:48:40,"The answer to both of your questions is that Sass has a very thorough understanding of selectors. It doesn't treat them just as strings that can be sliced and diced; it fully parses them and understands their structure. A side effect of this is that `&`, Sass's addition to the selector syntax, needs to fit into the standard parsing model of selectors. The examples you're citing involve having `&` mean ""replace this text with the text of the parent selector"", but Sass instead thinks of it as ""replace this simple selector with the parent selector"". It's a subtle distinction, but it's important for features like `@extend` that use the full selector parse tree, as well as for SCSS being a true superset of CSS3. These are things that other preprocessors don't really worry about.

Chris and I are talking about ways to address these use cases (see #286). If we end up allowing the use of `&` in SassScript, you'll be able to do your examples as so:




",nex3,extend
289,2014-03-12 19:55:51,"@brewster1134, try `@at-root &.mobile`.
",lolmaus,at-root
287,2012-02-22 00:26:01,"Demo project:
http://cl.ly/1y0p2F0Z2p0e2T3u0W3H

In main.sass:



Then:



Note that no error is generated until ""core""  tries to reference a variable that _should_ have been imported, but wasn‚Äôt, due to that inline comment.

Notes and observations:
1. I _usually_ use `.scss` syntax, but this project is mostly `.sass` ‚Äî¬†I had no reason to to expect inline comments to break anything, though without semicolons I could sort of see why that may be the case.
2. Still, my syntax highlighter didn‚Äôt exactly show any errors, and neither did Sass complain about syntax.
3. This caused me to become confused about how `@import` actually works in Sass ([Sorry, Chris](http://www.exquisitetweets.com/tweets?eids=mSlda6huXQ.mSlf1YmI4i.mSlrvjHQSi.mSlxD8z1gG.mSnP5UKKeB.mSn1AgxCEK.mSolduLprU.mSou5JgcDt.mSoBkXfc4b.mSp08dKgdE.mSq529Wv9w.mSrazeDyuq.mSrehRIGIe.mSri1l6n12.mSrllLFGbk)).
",alanhogan,import
287,2012-12-10 23:04:12,"I don't think this should raise an error. I think comments should be comments even in `@import` statements.
",chriseppstein,import
286,2012-02-22 00:49:01,"I really hate the idea of having different subsets of SassScript work in different places. I'm already considering disallowing `@media $foo { ... }` in favor of `@media #{$foo} { ... }`.
",nex3,media
286,2012-06-06 21:01:32,"We have one more feature for 3.2. It's variable argument passing to mixins and functions. And there's a pending pull request for giving warnings when an @extend doesn't match any selector.
",chriseppstein,extend
286,2012-08-19 14:34:10,"how about this case?



the newest version of sass's output is below



In css block 1~4, the result of string combination in css selectors are correct...

but the selector in css block 5 should be 



rather than 



btw, from http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#id11 (sass reference: @for)
we can confirm that string combination in css selectors would be accepted

i know the '&' reference cannot be combined with other string
but in this case, the string combination should occurred between "".module-"" and ""mother""
it should be accept just like the selectors in block 1~4

so... can we regard this case as a bug of sass?

---

finally, please forgive me about my poor English... thanks...
",Grassboy,for
286,2013-05-25 01:27:12,"Chris and I ran into an issue with the implementation of this as sketched here. If you write `foo { .bar#{&} { ... } }` there's no good way for Sass to know that it shouldn't include `.foo` in the generated selector, yielding `foo .barfoo { ... }` instead of the desired `.barfoo { ... }`.

Our solution to this is to introduce a new directive, `@at-root`, which causes one or more selectors to be placed at the root of the document instead of being nested, while preserving the parent selector as the referent of `&`. So you'd write `foo { @at-root .bar#{&} { ... } }`, which would yield `.barfoo { ... }`. This is unfortunately verbose, but we think it's the best option.

It will also work without a selector, like so:



### Rejected Alternatives

#### Look For `&`

The first solution we considered was similar to what we do for non-SassScript selectors: look in the selector expressions and see if `&` is used. However, this breaks referential transparency, the principle that (in this case) `$var: ...; #{$var} { ... }` should always be equivalent to `#{...} { ... }`. This is because Sass would be unable to detect that a parent selector was being used in the code `foo { $parent: &; .bar#{$parent} { ... } }`.

#### ""Parent Selector"" Bit

We could try to track, for every SassScript value, whether that value is derived from a reference to the parent selector. This solves the referential transparency issues, but also adds a host of practical problems. Every SassScript operation and function, including third-party functions, would have to be aware of the parent selector bit and propagate it forward if necessary. Worse than the practical issues, though (in my opinion), is the issue of associating invisible and inaccessible information with an unremarkable-looking value.

#### Other Syntaxes

We talked about various different syntaxes for indicating that the parent selector should be omitted from a given selector. `&:omit` and `:omit(&)` were rejected for looking too much like plain CSS and for making it look like `&` could be replaced by a different selector. `::no-parent` and `::no-&` were rejected because the semantics of a pseudo-element didn't match well with the operation that was being performed. `^` was rejected because adding a completely new syntactic character bears a high cost and eats up syntax space that isn't worth it for what's ultimately a reasonably narrow feature.

Once we settled on the directive syntax, we also talked about different names. `@no-parent` was rejected because the parent selector `&` is still meaningful within the block. `@no-auto-parent` was rejected because of verbosity and because the nesting process isn't referred to as ""auto parent"" anywhere else. `@unnested` was rejected because nesting still occurs, it's just broken at one specific level. `@bubble` was rejected because the notion of ""bubbling"" is a reasonably advanced concept that we didn't want to presuppose knowledge of.

We chose `@at-root` because it didn't include a negation, which we thought caused confusion, and because it neatly describes the process of putting the selector(s) at the root of the document.
",nex3,unnested
286,2013-05-25 01:27:12,"Chris and I ran into an issue with the implementation of this as sketched here. If you write `foo { .bar#{&} { ... } }` there's no good way for Sass to know that it shouldn't include `.foo` in the generated selector, yielding `foo .barfoo { ... }` instead of the desired `.barfoo { ... }`.

Our solution to this is to introduce a new directive, `@at-root`, which causes one or more selectors to be placed at the root of the document instead of being nested, while preserving the parent selector as the referent of `&`. So you'd write `foo { @at-root .bar#{&} { ... } }`, which would yield `.barfoo { ... }`. This is unfortunately verbose, but we think it's the best option.

It will also work without a selector, like so:



### Rejected Alternatives

#### Look For `&`

The first solution we considered was similar to what we do for non-SassScript selectors: look in the selector expressions and see if `&` is used. However, this breaks referential transparency, the principle that (in this case) `$var: ...; #{$var} { ... }` should always be equivalent to `#{...} { ... }`. This is because Sass would be unable to detect that a parent selector was being used in the code `foo { $parent: &; .bar#{$parent} { ... } }`.

#### ""Parent Selector"" Bit

We could try to track, for every SassScript value, whether that value is derived from a reference to the parent selector. This solves the referential transparency issues, but also adds a host of practical problems. Every SassScript operation and function, including third-party functions, would have to be aware of the parent selector bit and propagate it forward if necessary. Worse than the practical issues, though (in my opinion), is the issue of associating invisible and inaccessible information with an unremarkable-looking value.

#### Other Syntaxes

We talked about various different syntaxes for indicating that the parent selector should be omitted from a given selector. `&:omit` and `:omit(&)` were rejected for looking too much like plain CSS and for making it look like `&` could be replaced by a different selector. `::no-parent` and `::no-&` were rejected because the semantics of a pseudo-element didn't match well with the operation that was being performed. `^` was rejected because adding a completely new syntactic character bears a high cost and eats up syntax space that isn't worth it for what's ultimately a reasonably narrow feature.

Once we settled on the directive syntax, we also talked about different names. `@no-parent` was rejected because the parent selector `&` is still meaningful within the block. `@no-auto-parent` was rejected because of verbosity and because the nesting process isn't referred to as ""auto parent"" anywhere else. `@unnested` was rejected because nesting still occurs, it's just broken at one specific level. `@bubble` was rejected because the notion of ""bubbling"" is a reasonably advanced concept that we didn't want to presuppose knowledge of.

We chose `@at-root` because it didn't include a negation, which we thought caused confusion, and because it neatly describes the process of putting the selector(s) at the root of the document.
",nex3,bubble
286,2013-05-25 01:27:12,"Chris and I ran into an issue with the implementation of this as sketched here. If you write `foo { .bar#{&} { ... } }` there's no good way for Sass to know that it shouldn't include `.foo` in the generated selector, yielding `foo .barfoo { ... }` instead of the desired `.barfoo { ... }`.

Our solution to this is to introduce a new directive, `@at-root`, which causes one or more selectors to be placed at the root of the document instead of being nested, while preserving the parent selector as the referent of `&`. So you'd write `foo { @at-root .bar#{&} { ... } }`, which would yield `.barfoo { ... }`. This is unfortunately verbose, but we think it's the best option.

It will also work without a selector, like so:



### Rejected Alternatives

#### Look For `&`

The first solution we considered was similar to what we do for non-SassScript selectors: look in the selector expressions and see if `&` is used. However, this breaks referential transparency, the principle that (in this case) `$var: ...; #{$var} { ... }` should always be equivalent to `#{...} { ... }`. This is because Sass would be unable to detect that a parent selector was being used in the code `foo { $parent: &; .bar#{$parent} { ... } }`.

#### ""Parent Selector"" Bit

We could try to track, for every SassScript value, whether that value is derived from a reference to the parent selector. This solves the referential transparency issues, but also adds a host of practical problems. Every SassScript operation and function, including third-party functions, would have to be aware of the parent selector bit and propagate it forward if necessary. Worse than the practical issues, though (in my opinion), is the issue of associating invisible and inaccessible information with an unremarkable-looking value.

#### Other Syntaxes

We talked about various different syntaxes for indicating that the parent selector should be omitted from a given selector. `&:omit` and `:omit(&)` were rejected for looking too much like plain CSS and for making it look like `&` could be replaced by a different selector. `::no-parent` and `::no-&` were rejected because the semantics of a pseudo-element didn't match well with the operation that was being performed. `^` was rejected because adding a completely new syntactic character bears a high cost and eats up syntax space that isn't worth it for what's ultimately a reasonably narrow feature.

Once we settled on the directive syntax, we also talked about different names. `@no-parent` was rejected because the parent selector `&` is still meaningful within the block. `@no-auto-parent` was rejected because of verbosity and because the nesting process isn't referred to as ""auto parent"" anywhere else. `@unnested` was rejected because nesting still occurs, it's just broken at one specific level. `@bubble` was rejected because the notion of ""bubbling"" is a reasonably advanced concept that we didn't want to presuppose knowledge of.

We chose `@at-root` because it didn't include a negation, which we thought caused confusion, and because it neatly describes the process of putting the selector(s) at the root of the document.
",nex3,no-auto-parent
286,2013-05-25 01:27:12,"Chris and I ran into an issue with the implementation of this as sketched here. If you write `foo { .bar#{&} { ... } }` there's no good way for Sass to know that it shouldn't include `.foo` in the generated selector, yielding `foo .barfoo { ... }` instead of the desired `.barfoo { ... }`.

Our solution to this is to introduce a new directive, `@at-root`, which causes one or more selectors to be placed at the root of the document instead of being nested, while preserving the parent selector as the referent of `&`. So you'd write `foo { @at-root .bar#{&} { ... } }`, which would yield `.barfoo { ... }`. This is unfortunately verbose, but we think it's the best option.

It will also work without a selector, like so:



### Rejected Alternatives

#### Look For `&`

The first solution we considered was similar to what we do for non-SassScript selectors: look in the selector expressions and see if `&` is used. However, this breaks referential transparency, the principle that (in this case) `$var: ...; #{$var} { ... }` should always be equivalent to `#{...} { ... }`. This is because Sass would be unable to detect that a parent selector was being used in the code `foo { $parent: &; .bar#{$parent} { ... } }`.

#### ""Parent Selector"" Bit

We could try to track, for every SassScript value, whether that value is derived from a reference to the parent selector. This solves the referential transparency issues, but also adds a host of practical problems. Every SassScript operation and function, including third-party functions, would have to be aware of the parent selector bit and propagate it forward if necessary. Worse than the practical issues, though (in my opinion), is the issue of associating invisible and inaccessible information with an unremarkable-looking value.

#### Other Syntaxes

We talked about various different syntaxes for indicating that the parent selector should be omitted from a given selector. `&:omit` and `:omit(&)` were rejected for looking too much like plain CSS and for making it look like `&` could be replaced by a different selector. `::no-parent` and `::no-&` were rejected because the semantics of a pseudo-element didn't match well with the operation that was being performed. `^` was rejected because adding a completely new syntactic character bears a high cost and eats up syntax space that isn't worth it for what's ultimately a reasonably narrow feature.

Once we settled on the directive syntax, we also talked about different names. `@no-parent` was rejected because the parent selector `&` is still meaningful within the block. `@no-auto-parent` was rejected because of verbosity and because the nesting process isn't referred to as ""auto parent"" anywhere else. `@unnested` was rejected because nesting still occurs, it's just broken at one specific level. `@bubble` was rejected because the notion of ""bubbling"" is a reasonably advanced concept that we didn't want to presuppose knowledge of.

We chose `@at-root` because it didn't include a negation, which we thought caused confusion, and because it neatly describes the process of putting the selector(s) at the root of the document.
",nex3,at-root
286,2013-05-25 01:27:12,"Chris and I ran into an issue with the implementation of this as sketched here. If you write `foo { .bar#{&} { ... } }` there's no good way for Sass to know that it shouldn't include `.foo` in the generated selector, yielding `foo .barfoo { ... }` instead of the desired `.barfoo { ... }`.

Our solution to this is to introduce a new directive, `@at-root`, which causes one or more selectors to be placed at the root of the document instead of being nested, while preserving the parent selector as the referent of `&`. So you'd write `foo { @at-root .bar#{&} { ... } }`, which would yield `.barfoo { ... }`. This is unfortunately verbose, but we think it's the best option.

It will also work without a selector, like so:



### Rejected Alternatives

#### Look For `&`

The first solution we considered was similar to what we do for non-SassScript selectors: look in the selector expressions and see if `&` is used. However, this breaks referential transparency, the principle that (in this case) `$var: ...; #{$var} { ... }` should always be equivalent to `#{...} { ... }`. This is because Sass would be unable to detect that a parent selector was being used in the code `foo { $parent: &; .bar#{$parent} { ... } }`.

#### ""Parent Selector"" Bit

We could try to track, for every SassScript value, whether that value is derived from a reference to the parent selector. This solves the referential transparency issues, but also adds a host of practical problems. Every SassScript operation and function, including third-party functions, would have to be aware of the parent selector bit and propagate it forward if necessary. Worse than the practical issues, though (in my opinion), is the issue of associating invisible and inaccessible information with an unremarkable-looking value.

#### Other Syntaxes

We talked about various different syntaxes for indicating that the parent selector should be omitted from a given selector. `&:omit` and `:omit(&)` were rejected for looking too much like plain CSS and for making it look like `&` could be replaced by a different selector. `::no-parent` and `::no-&` were rejected because the semantics of a pseudo-element didn't match well with the operation that was being performed. `^` was rejected because adding a completely new syntactic character bears a high cost and eats up syntax space that isn't worth it for what's ultimately a reasonably narrow feature.

Once we settled on the directive syntax, we also talked about different names. `@no-parent` was rejected because the parent selector `&` is still meaningful within the block. `@no-auto-parent` was rejected because of verbosity and because the nesting process isn't referred to as ""auto parent"" anywhere else. `@unnested` was rejected because nesting still occurs, it's just broken at one specific level. `@bubble` was rejected because the notion of ""bubbling"" is a reasonably advanced concept that we didn't want to presuppose knowledge of.

We chose `@at-root` because it didn't include a negation, which we thought caused confusion, and because it neatly describes the process of putting the selector(s) at the root of the document.
",nex3,no-parent
285,2012-02-20 23:13:46,"It's easy enough to just use `&` in the mixin definition. It's also unclear how this works with mixins containing top-level properties (e.g. `@mixin foo {a: b}`).
",nex3,mixin
285,2012-02-22 00:45:54,"@chriseppstein Yes I know the normal way and in most cases you will also become a target. But I think the idea makes the mixin maybe a little more flexible - than they are now :)

You write both of which can be in the mixin itself Ampersand depend on the class, the problem now is that my mixin it always presupposes a selector.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  &.mixinclass
    height: $height
    width: $width
    ....

.container
  +myMix(20px, 30px)
</code></pre>


So I go and write to the mixin, take the ampersand out again and the mixin can load it into the root of the stylesheet.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  .mixinclass
    height: 20px
    width: 30px
    ....

+myMix(20px, 30px)
</code></pre>


Next time I will hang the mixin to a child selector, so I write my mixin to return.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  & > .mixinclass
    height: 20px
    width: 30px
    ....

.container
  +myMix(20px, 30px)
</code></pre>


As I said, there is no problem to do that, I can also write the mixin, which I add conditionals to the different types as you can attach a mixin, simply can control by (@if). This may vary depending on the complexity mixins also be a good long mixin. Adjacent selector, Child Selector Silbing, and so on.

But as written, it goes without :)
",gisu,if
285,2012-02-22 00:45:54,"@chriseppstein Yes I know the normal way and in most cases you will also become a target. But I think the idea makes the mixin maybe a little more flexible - than they are now :)

You write both of which can be in the mixin itself Ampersand depend on the class, the problem now is that my mixin it always presupposes a selector.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  &.mixinclass
    height: $height
    width: $width
    ....

.container
  +myMix(20px, 30px)
</code></pre>


So I go and write to the mixin, take the ampersand out again and the mixin can load it into the root of the stylesheet.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  .mixinclass
    height: 20px
    width: 30px
    ....

+myMix(20px, 30px)
</code></pre>


Next time I will hang the mixin to a child selector, so I write my mixin to return.

<pre><code>
//SASS Stylesheet
@mixin myMix($height:20px, $width:30px)
  & > .mixinclass
    height: 20px
    width: 30px
    ....

.container
  +myMix(20px, 30px)
</code></pre>


As I said, there is no problem to do that, I can also write the mixin, which I add conditionals to the different types as you can attach a mixin, simply can control by (@if). This may vary depending on the complexity mixins also be a good long mixin. Adjacent selector, Child Selector Silbing, and so on.

But as written, it goes without :)
",gisu,mixin
279,2012-02-15 16:15:33,"Currently when using @import, you need to hardcode in uri. I'd like the ability to pass in a variable/function call to get the uri and use that for the @import call, something like the following:



Which would be the same as:



This would also make it easier for a master import for sub-partials a la Compass framework stuff:


",Snugug,import
279,2015-02-27 07:34:54,"@davidkpiano I tried that at first but it doesn't work as you might think.

First of all, the variable interpolation still doesn't work even though you try to `@import` a CSS-file.

Secondly, when you `@import` a CSS-file, Sass will output an `@import`-statement in the compiled CSS. You can read more about it here: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#import

This behavior is supposedly a feature but I much prefer the way Less handles it. By directly importing the CSS-file in the compiled CSS. But that's a matter for another ticket.
",niklas-r,import
279,2015-02-27 09:42:49,"@niklas-r, if you're trying to import an `.scss` file from Bower, you should store `bower_components` outside of your Sass subfolder and add path to `bower_components` to Sass `import_path`.

Then you can simply do `@import 'normalize.scss/_normalize.scss';`.
",lolmaus,import
279,2015-03-03 13:44:14,"@thom-nic, have `bower_components/bootstrap-sass-official/assets/stylesheets` in Sass load path, then you can do `@import bootstrap-sprockets`.
",lolmaus,import
279,2015-04-01 01:11:48,"A really good use case for this is when you have a system that uses theming that overrides base classes. For example:



You could optionally change `$theme` at any time to point to another theme without having to change dozens of `@import` directives.

An excellent example of a theming system like this is http://semantic-ui.com. Unfortunately the author had to use LESS to accomplish his framework with multiple optional themes since SASS doesn't support this.
",Jakobud,import
279,2015-04-21 22:36:00,"Agree with @Jakobud 

+1 to add variable to @import functionallity
",paustria,import
279,2015-04-22 00:02:07,"+1

@include #{$variable} . Does not work also +23232322 for this one as well please.
",asadpakistani,include
279,2015-08-12 15:55:18,"Our use is for a platform arrangement which would allow different sites on the platform to switch the version of a feature locally.

**Example:**
- Shared Theme Layer:
  - @import ""variables""; // Shared variables _$slider-version: 'slider-a' !default;_
  - @import ""sliders/#{$slider-version}-base"";
- Local Theme:
  - @import ""variables""; // local variables file _$slider-version: 'slider-b';_
  - @import ""../shared-theme-layer/base"";

Our purpose for this is that on creation of a new feature, say blogs, the import link would be added to the shared theme layer base import file and rolled out instead of developers having to go to each of the individual sites and adding that file to the local theme base import file.
",daveschwerstein,import
279,2015-10-21 12:52:41,"Another way to deal with this, which I also suggested for [node-sass-import-once](https://github.com/at-import/node-sass-import-once/issues/15) is to add a `:load_aliases` option for the sass-compiler. 

This would be similar to how the [`:load_paths` option](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#load_paths-option) works, but more flexible as it would take an object where the keys can be used in `@import` to point to a specific load path. This extra flexibility covers a lot of different use cases:
- import stylesheets directly from bower-components (see note below)
- allow for a more complex directory structure, where stylesheets are not all in the same folder
- swap source directories based on a config file (e.g. for theming)

**options**



**sass file**



**note**: Working with bower_components is already possible with the `:load_paths` option if the component stores its stylesheets directly in a directory having the same name. For example [bootstrap-sass](https://github.com/twbs/bootstrap-sass) which stores sass files in _bootstrap-sass/assets/stylesheets/bootrstrap_ which allows us to do `@import bootstrap/dropdown` provided we add the load_path `./bower_components/bootstrap-sass/assets/stylesheets`. But aliases would make it more flexible and also work with bower component' which don't.
",yoannisj,import
279,2015-10-23 11:13:02,"I have moved aliasing suggestion to [issue #1094 ] which compiles wishes and suggestions for future  `@import` behaviour.
",yoannisj,import
279,2016-01-07 15:27:12,"hi!
I have an error in _setting.scss ""File to import not found.""

`@import ""foundation/functions"";`

Anybody know about that? Thanks!
",sabriskay,import
277,2012-02-14 16:43:15,"I see. @nex3 Seems like nesting a comma delimited list inside a space delimited list (as this code would be) is strange. Should it be an error?
",chriseppstein,nex3
277,2012-02-14 20:02:29,"@SimpleAsCouldBe It doesn't actually produce invalid CSS, as far as the grammar is concerned; `linear-gradient top, rgb(255,190,75) 0%, ...` is a valid property value.

@chriseppstein There are some difficulties in making this an error. We can't just say ""no putting comma lists in space lists"" since we don't want `@each (foo, bar) (bip, bop) (whiz, bang)` to randomly fail. We could make the error appear at stringification time, but I'm not sure it would be particularly clear.

I'm tempted to say that because this syntax isn't valid in CSS anyway, it's not worth worrying too much about how Sass handles it.
",nex3,each
277,2012-02-14 20:02:29,"@SimpleAsCouldBe It doesn't actually produce invalid CSS, as far as the grammar is concerned; `linear-gradient top, rgb(255,190,75) 0%, ...` is a valid property value.

@chriseppstein There are some difficulties in making this an error. We can't just say ""no putting comma lists in space lists"" since we don't want `@each (foo, bar) (bip, bop) (whiz, bang)` to randomly fail. We could make the error appear at stringification time, but I'm not sure it would be particularly clear.

I'm tempted to say that because this syntax isn't valid in CSS anyway, it's not worth worrying too much about how Sass handles it.
",nex3,SimpleAsCouldBe
277,2012-02-14 20:42:12,"@SimpleAsCouldBe To elaborate on Chris's reply, Sass tries hard to avoid having specific knowledge of which properties and values exist in CSS and how they're used. It doesn't know that `-webkit-linear-gradient` is a function as opposed to, say, a border type like `solid`. This allows it to be very flexible when adapting to changing CSS standards, but it does mean we can't detect cases like this where you're doing something syntactically valid but semantically meaningless.

@chriseppstein I agree that good error messages are valuable, but I'm having a hard time figuring out how to generate a helpful error message for this case without making other cases more obscure. Since this is (I assume) a pretty uncommon error case, I'm not too worried about getting a great error for it.
",nex3,SimpleAsCouldBe
275,2012-02-13 10:06:17,"this command creates separated files
$ sass --update src:assets
$ ls assets
one.css   three.css two.css

and this patch make just one file (or one output stream to stdout)
$ sass src assets/app.css
$ ls assets
app.css

Nothing more =) So i don't need to merge these files with an other app or i don't need to make a main.sass what contains only @imports's
",Yitsushi,imports
275,2012-02-14 10:27:34,"Oh yeah before i modified this our base.sass was 63 lines thats only @import's 

@import 'page'
@import 'main'
@import 'editor'
@import 'enterpage'
@import 'galleries'
@import 'images'
@import 'members'
@import 'messages'

And i we created a new file we need to add this it to somewhere. =/ So partial is NOT a nice solution for it. =) because a little annoying.
",Yitsushi,import
274,2012-02-13 02:24:49,"Some users might miss the distinction between the two forms of the
`@for` syntax, resulting in off-by-one errors that may be hard to debug. 
Attempt to make the documentation more explicit and generally clearer.
",ry5n,for
273,2012-02-12 15:43:30,"This is already possible, and you don't need Compass to do this.

Simple border-radius mixin.
@mixin border-radius($dist) {
  -webkit-border-radius: $dist;
  -moz-border-radius: $dist;
  -o-border-radius: $dist;
  border-radius: $dist;
}

.box {
  @include border-radius(2px);
}
",aackerman,include
273,2012-02-12 15:43:30,"This is already possible, and you don't need Compass to do this.

Simple border-radius mixin.
@mixin border-radius($dist) {
  -webkit-border-radius: $dist;
  -moz-border-radius: $dist;
  -o-border-radius: $dist;
  border-radius: $dist;
}

.box {
  @include border-radius(2px);
}
",aackerman,mixin
273,2012-02-21 14:01:30,"Problem is browser are released every few weeks, and they are eventually dropping vendor prefixes and adopting regular CSS3 syntax. Keeping SCSS/SASS mixins up to date is something easy for frameworks, but keeping the language compiler up to date is just more work than it is worth.

Also, it is a SASS/SCSS choice to make mixins explicit. We don't just call mixins without + or @include.
",barraponto,include
272,2012-02-09 21:38:00,"I's worth noting that for class selectors, this is equivalent to



Were this not already supported in the indented syntax, I'd be hesitant to support it because it muddles the semantics of `@extend` slightly. `A { @extend B }` means that `A` is styled as though it matches `B`; matching `.selector1, .selector2` technically means that it matches _either_ selector, whereas it will end up styled as though it matches _both_.

That said, it's pretty clear to a reader of the stylesheet what's going on here, and it's apparently been accidentally supported in the indented syntax all the way back to 3.0, so I'm going to go ahead and add support to SCSS.
",nex3,extend
270,2012-02-08 18:54:45,"Mixin file referencing itself within @import will cause the server to spin off to oblivion.

Example..

File with the name ""_mixin.sass"" which has the following...



Watch the process monitor sky rocket...
",dancombs,import
262,2012-02-01 21:29:16,"When using `@extend` in a declaration which is itself using the child selector, the generated extension selector contains the parent class twice.

For example this



compiles to this:


",samuelvogel,extend
261,2012-01-31 23:30:18,"In a structure like this:









the following output is generated:



which is not correct as the `@import` statement `@import url(./vars/vars3.css);` should be above the vars2.scss inclusion content. Is there a way to keep track of this in the compiler?

Cheers Jan
",luisenstrasse,import
261,2012-02-02 08:08:49,"Well, the import is actually below, but in a valid CSS output all(!) @import statements must be on top before any regular css statements. Just try it by putting the output to the W3C validator.

To make it clearer: A client css parser (like the browser) will not consider the content of vars3.css which imported after some css-classes. 

Any Idea?
",luisenstrasse,import
260,2012-02-01 10:32:15,"Sorry @nex3 my bad, I did the example by hand, just for the sake of proving what I meant. But your example has the same issue for me. Because the rule I extended was only the <code>p</code> rule and not <code>.my-other-rule-context p</code>. I didn't do <code>@extend p .my-other-rule-context</code> (although I know this currently isn't possible).
",hefler,extend
260,2012-02-01 18:49:07,"@hefler That's the intended behavior. `@extend` means ""should be styled as""; if you extend a selector, than all instances of that selector (even as part of other selectors) are modified to match the extending selector as well.
",nex3,extend
259,2012-02-02 15:50:55,"Another bug in compass for this: https://github.com/chriseppstein/compass/issues/695 I think @StanAngeloff can help us with testing.
",chriseppstein,StanAngeloff
258,2012-01-30 02:11:23,"It was a decision that was made before I worked on the project. Maybe @nex3 can shed some light.
",chriseppstein,nex3
258,2012-02-06 20:09:44,"You can work around this problem by not using global variables, but using functions instead.
A bit more work, but it offers more safety.
  @function testValue(){@return 1px;}
  .test3{
    top: testValue()
  }
",bertBruynooghe,return
258,2012-02-06 20:09:44,"You can work around this problem by not using global variables, but using functions instead.
A bit more work, but it offers more safety.
  @function testValue(){@return 1px;}
  .test3{
    top: testValue()
  }
",bertBruynooghe,function
255,2013-11-25 13:15:06,"Additionally @benfrain, all that says is no restrictions inside the actual definition, but doesn't mention starting with (I know, weird distinction to make, but an important one) AFAIK having just recently done a bunch of research on this, valid class names start `[a-z][A-Z][_-]` or an escaped special character (`\:` for instance) and may contain thereafter any combination of letters in any case, numbers, dashes and underscores, and escaped special characters. Really the absolute only restriction is they can't start with a number, escaped or otherwise.

That is, unless they really can and not a single browser supports it, in which case you should start with the browsers. But in the case of something like selector naming _de facto_ may be more important that _de jure_. Maybe someone from a Browser team can weigh in, like @paulirish.
",Snugug,paulirish
251,2012-01-17 21:18:18,"I would love the ability to `@extend` _any_ selector, not just classes. Example (based on Twitter bootstrap):



The generated code would be just like with classes:


",powerbuoy,extend
251,2012-01-17 22:55:35,"You can in fact extend non-class selectors. You can extend any sequence of simple selectors: `#main`, `[class^=span]`, `#body.ff`.

The only restriction is that you can't extend selectors using combinators like `>`, `+`, or the simple `.foo .bar` descendant selector. This has to do with the underlying meaning of `@extend`.

When you write `A { @extend B }`, what you're expressing is that all elements matching the selector `A` should be styled as though they matched `B` as well. So `#my-ul { @extend .row }` says that all elements with the id `my-ul` should be styled as though they also had the class `row`, whether or not they actually do. So far so good.

However, suppose you write `#my-ul { @extend .row .element }`. This means all elements with the id `my-ul` should be styled as though they had the class `element` _and_ some parent element has the class `row`. This is where the meaning starts to get vague. Which parent has class `row`? How would we translate the selector `div.row .element`? `.row .group .element`? The answers aren't obvious, which means that whichever decision we make will probably be contrary to someone's expectations.

What's more, since `#my-ul` elements are styled as though they had class `element`, they'll get all the styles for the `.element` selector as well. This isn't obvious when looking at the source file. In your example, would you expect `#my-ul li` to get all the styles of `*[class^=span]`, in addition to `.row > *[class^=span]`?

Of course, we could just make decisions for all these ambiguous cases. We could probably even come up with a consistent set of semantics that would justify these decisions. But it's not clear that it's worth the pain we'd cause users who try to use the feature and don't understand why it produces the output that it does.

I'm closing this for now, but I'm open to being convinced that I'm overestimating the problems and underestimating the benefit of allowing extension of nested selectors.
",nex3,extend
251,2012-01-18 09:08:04,"Wow, I never even thought about all those scenarios and different implementations. My first thought was simply that saying:



Would simply put the literal string ""one selector"" next to every occurrence of ""another selector"". That's the way it works now if I'm not mistaken and I don't see why it would need to work differently just because you use a more advanced selector.

The reason I'd love if this worked right now (today :) is that I'm using the SASS version of Twitter Bootstrap and I thought I could use `@extend` on all the Twitter Bootstrap class names instead of actually using those class names in my HTML (which I can't really make changes to in a good way).
",powerbuoy,extend
251,2012-01-18 19:16:01,"> Would simply put the literal string ""one selector"" next to every occurrence of ""another selector"". That's the way it works now if I'm not mistaken and I don't see why it would need to work differently just because you use a more advanced selector.

That's effectively the way it works for simple cases, like extending a single class or id that's just used on its own. But when you get to more complex cases, we use the more detailed semantics I mentioned above to figure out what to do. Describing the functionality of `@extend` in terms of these semantics, rather than a purely syntactic transform, makes it both easier to reason about and more powerful.

I'm still not 100% clear on what your use case for this is. Can you give me a concrete example from the Twitter Bootstrap?
",nex3,extend
251,2012-01-19 08:47:31,"I think one of the greatest things with `@mixin` and `@extend` is that they allow me to keep my HTML free from design-related `.class`:es such as ""clearfix"" and the like.

Twitter Bootstrap is pretty awesome but unfortunately it's built in a way that doesn't separate design and content at all but instead advocates the use of design related class names throughout.

What I was hoping to accomplish with `@extend` was to use Twitter Bootstrap's classes without actually using classes. So I started by trying to create a grid using the `.row` and `.span` classes which worked fine, but I then noticed the TB doesn't _just_ style those classes but in some cases descendants of those classes as well. To create a three column layout you need this markup:



And TB styles these selectors:



Instead, I have this markup:



And would then love the ability to do:



So that I can get the styling I'm after without changing my markup.

I realize though that this would probably get a little tough to maintain after a while and the best thing would most likely be to create @mixins for the things I want to use instead so that I could do something like: `ul#intro {@include three-col}`.
",powerbuoy,extend
251,2012-01-19 08:47:31,"I think one of the greatest things with `@mixin` and `@extend` is that they allow me to keep my HTML free from design-related `.class`:es such as ""clearfix"" and the like.

Twitter Bootstrap is pretty awesome but unfortunately it's built in a way that doesn't separate design and content at all but instead advocates the use of design related class names throughout.

What I was hoping to accomplish with `@extend` was to use Twitter Bootstrap's classes without actually using classes. So I started by trying to create a grid using the `.row` and `.span` classes which worked fine, but I then noticed the TB doesn't _just_ style those classes but in some cases descendants of those classes as well. To create a three column layout you need this markup:



And TB styles these selectors:



Instead, I have this markup:



And would then love the ability to do:



So that I can get the styling I'm after without changing my markup.

I realize though that this would probably get a little tough to maintain after a while and the best thing would most likely be to create @mixins for the things I want to use instead so that I could do something like: `ul#intro {@include three-col}`.
",powerbuoy,mixins
251,2012-01-19 08:47:31,"I think one of the greatest things with `@mixin` and `@extend` is that they allow me to keep my HTML free from design-related `.class`:es such as ""clearfix"" and the like.

Twitter Bootstrap is pretty awesome but unfortunately it's built in a way that doesn't separate design and content at all but instead advocates the use of design related class names throughout.

What I was hoping to accomplish with `@extend` was to use Twitter Bootstrap's classes without actually using classes. So I started by trying to create a grid using the `.row` and `.span` classes which worked fine, but I then noticed the TB doesn't _just_ style those classes but in some cases descendants of those classes as well. To create a three column layout you need this markup:



And TB styles these selectors:



Instead, I have this markup:



And would then love the ability to do:



So that I can get the styling I'm after without changing my markup.

I realize though that this would probably get a little tough to maintain after a while and the best thing would most likely be to create @mixins for the things I want to use instead so that I could do something like: `ul#intro {@include three-col}`.
",powerbuoy,include
251,2012-01-19 08:47:31,"I think one of the greatest things with `@mixin` and `@extend` is that they allow me to keep my HTML free from design-related `.class`:es such as ""clearfix"" and the like.

Twitter Bootstrap is pretty awesome but unfortunately it's built in a way that doesn't separate design and content at all but instead advocates the use of design related class names throughout.

What I was hoping to accomplish with `@extend` was to use Twitter Bootstrap's classes without actually using classes. So I started by trying to create a grid using the `.row` and `.span` classes which worked fine, but I then noticed the TB doesn't _just_ style those classes but in some cases descendants of those classes as well. To create a three column layout you need this markup:



And TB styles these selectors:



Instead, I have this markup:



And would then love the ability to do:



So that I can get the styling I'm after without changing my markup.

I realize though that this would probably get a little tough to maintain after a while and the best thing would most likely be to create @mixins for the things I want to use instead so that I could do something like: `ul#intro {@include three-col}`.
",powerbuoy,mixin
249,2012-03-17 00:59:39,"@Adys That's a neat idea. It's a little weird, though, that `&` is a prefix here and a standalone expression in selectors.
",nex3,Adys
247,2012-01-12 18:06:07,"When compiling with `--debug-info` :



Inserts `@media -sass-debug-info` before `from` and `to`, which break webkit's keyframe animations.
",sunny,media
243,2012-08-08 18:39:45,"Would love to see some profiling data. Anyone interested? @cheba?
",chriseppstein,cheba
242,2012-01-08 02:06:05,"In porting from base classes to placeholder selectors, I really needed this.

In 3.2 we will warn if a selector being extended is not found. In 3.3/4.0 it will become an error.

The warning can be silenced by placing `!optional` at the end of an `@extend statement`. This maybe useful for libraries and partial re-use.
",chriseppstein,extend
242,2012-04-20 21:19:12,"This patch still has false positives. Example:



This shouldn't trigger a warning, because both `.bar` and `.baz` exist in the document. I think this was adequately established in our last discussion about this behavior.

This is a fundamental issue with the approach in this patch. Effectively what you're doing is marking each individual `@extend` when it matches a selector, but that's never going to account for valid extendees that just empirically match nothing.

I think we have to fall back on a placeholder approach.
",nex3,extend
241,2012-01-06 03:32:05,"I have to agree with Sass's docs: `@import... takes a separate (slow) HTTP request [per .css file]`.  But there are times when you want to work on a single .SCSS/.SASS source doc, tag some markup as browser-specific, and have the resultant .CSS contain a conditionally-include link to a second (also auto-generated from the single source) .CSS file.

Example scenario:
The main .SCSS file contains all the markup, with special notation for IE6 workarounds.  Sass then splits off the IE6-tagged markup into ""ie6-only.css"", and inserts in main.css: `<!--[if IE 6]> @import ie6-only.css /* no need to hard-code all that IE6 crud for 7% of the website visits */<![endif]-->`

Inspiration:
http://perfectionkills.com/profiling-css-for-fun-and-profit-optimization-notes/
Search for SASS  ;)

Idea on how to implement:
Not sure; I don't know Sass or Ruby well enough, perhaps something like the new Placeholder Selectors, or a pseudo-selector like "":-ie6external-any"".  I considered to define a custom Sass function to hack my own, but I keep gravitating that a tweak to the Placeholder Selectors can do the trick.  I don't see other ways in the docs how to do de-interpolate into 2+ .CSS files.

cheers
",tomByrer,import
241,2012-01-26 01:12:33,"As I said on the Compass issue, I haven't seen enough evidence to indicate that explicit support for targeting multiple stylesheets is substantially better than using the existing `@if` control directive along with variables.
",nex3,if
241,2012-01-27 08:12:26,"@nex3 I see your point about some kind of intelligent re-ordering being a problem. But would there be any way of allowing this so the developer has control over where the rules are placed?

So throughout the file you would be able to say something like `@target handheld {display: inline}` and then at the end of the file you would be able to then call all the rules in a way like this:



Obviously you may get times when rules conflict, but that would be no different from coding the CSS manually.
",MattyBalaam,target
241,2012-08-13 15:36:54,"I was asked to provide a more specific usecase where this could be useful. As an aside, I really like the suggestion in the [related Compass issue](https://github.com/chriseppstein/compass/issues/664) for an @target directive to specify what code goes where and thus not limiting this to just media queries. That being said, here's the more specific usecase: Enter [SouthStreet](https://github.com/filamentgroup/Southstreet), current one of the best-in-class toolset for Progressive Enhancement. Specifically, let's look at [Enhance](https://github.com/filamentgroup/enhance) (Or [Modernizr](http://modernizr.com/) with yepnope support, which I prefer) and [eCSSential](https://github.com/filamentgroup/eCSSential). To understand why these tools are important, we need to remember a handful of things; first, not all media queries are width media queries, some media queries may actually change the way you want to lay out your site, loading non-essential CSS in a blocking manner is bad for front end performance, with the @target directive this will provide for more utility than just with media queries, and when it comes to RWD it's really just Progressive Enhancement in a very large scale and being able to separate out our media queries can go a long way in being future friendly.

So, with this in mind, let's take a look at Enhance/Modernizr. Both utilities allow for JavaScript based checking of browser features and then performing actions based on that including conditionally loading CSS in. If one were to take this approach, we may want a totally separate layout for devices that support touch. In an ideal environment, we'd be able to do something like the following (using Modernizr's syntax):









All of our touch styling is now pushed out to a namespaced targeted CSS file that we can load in as we please.

If we're taking the eCSSentials approach, let's look at that same example, except this time we're going to combine it with the CSS Level 4 'pointer' media query:









This, when using the eCSSential style async loading, defers the loading of style-touch.css in browsers that don't support touch while those that do get it immediately (NOTE: eCSSential doesn't currently support MQs besides width ones, but the style of loading should be easily expandable to doing so).

Of course, there's also the third and final usecase that comes from Media Queries in general; specifically no media query fallbacks for browsers that don't support them, and especially for IE<9. Having the power to write IE hacks inline and have them print out in a separate stylesheet just for IE seems absolutely in line with Sass's ideals. Yes there are potential render issues, but these exist even when coding by hand, and if using the @target directive, the 'all' namespace could be reserved for printing to all stylesheets to help avoid this.

Could you do this all by hand with lots of creative partials and mixins? Sure you could, and that's what we're forced to do now, but having Sass handle this would be a huge time saver and make these great techniques readily available to those who aren't as skilled at the whole process that's required to do it by hand.

Also, I believe this may go without saying, but I'm also a fan of concating same media queries together under a single media query, although the same potential exists for render issues there. It's hard to get around this, and truthfully you'd have the same issues coding it by hand, so I'm not really sure if there's a convincing counter argument for that issue except to say make it a default-off compile time option with a warning about potential unexpected results in the readme.
",Snugug,target
241,2012-08-13 22:34:39,"I really don't understand what objections to `@target` that @nex3 has other than it's possible to do this in other ways -- seeing as how all of Sass can be done in other ways.
",chriseppstein,target
241,2012-08-13 22:35:55,"Like I said, I really like @target. It's an elegant solution to an otherwise very complex problem, and as long as we can interpolate the target, totally extensible by mixins and functions.
",Snugug,target
241,2012-08-16 00:00:17,"I can certainly see why you'd want to create multiple stylesheets for different browsers and different capability profiles. That's definitely a use case I'd like to support. What I don't understand is why `@target` is any better than `@if` for doing that. Your examples are still easily translatable into `@if`:



Compile the same stylesheet with different variables set and it works just like you're suggesting `@target` would work.
",nex3,if
241,2012-08-16 00:00:17,"I can certainly see why you'd want to create multiple stylesheets for different browsers and different capability profiles. That's definitely a use case I'd like to support. What I don't understand is why `@target` is any better than `@if` for doing that. Your examples are still easily translatable into `@if`:



Compile the same stylesheet with different variables set and it works just like you're suggesting `@target` would work.
",nex3,target
241,2012-08-16 00:43:09,"I prefer `@target` to `@if $target == touch` because it doesn't pollute the variable namespace and doesn't hijack an existing rule. Right now, I could write the same `@if` query and it mean something totally different, and if I did the same after implementation, it would get confusing very quickly. In the same way, `@content` is better than a `$content` variable to be called.

The `@if` also confuses the variable mental model by deferring it to something created at compile time instead of something we explicitly set. It also confuses the `@if` mental model as everywhere else in Sass `@if` will generally do something then and there as opposed to creating a new stylesheet. The `@target`, on the other hand, creates a new mental model for this new action taken by Sass and will make it much easier to understand.

In a nutshell: could we use `@if`? Sure, but it will break variable and `@if` mental models we have in place, whereas `@target` creates a new mental model for this new feature.  
",Snugug,content
241,2012-08-16 00:43:09,"I prefer `@target` to `@if $target == touch` because it doesn't pollute the variable namespace and doesn't hijack an existing rule. Right now, I could write the same `@if` query and it mean something totally different, and if I did the same after implementation, it would get confusing very quickly. In the same way, `@content` is better than a `$content` variable to be called.

The `@if` also confuses the variable mental model by deferring it to something created at compile time instead of something we explicitly set. It also confuses the `@if` mental model as everywhere else in Sass `@if` will generally do something then and there as opposed to creating a new stylesheet. The `@target`, on the other hand, creates a new mental model for this new action taken by Sass and will make it much easier to understand.

In a nutshell: could we use `@if`? Sure, but it will break variable and `@if` mental models we have in place, whereas `@target` creates a new mental model for this new feature.  
",Snugug,if
241,2012-08-16 00:43:09,"I prefer `@target` to `@if $target == touch` because it doesn't pollute the variable namespace and doesn't hijack an existing rule. Right now, I could write the same `@if` query and it mean something totally different, and if I did the same after implementation, it would get confusing very quickly. In the same way, `@content` is better than a `$content` variable to be called.

The `@if` also confuses the variable mental model by deferring it to something created at compile time instead of something we explicitly set. It also confuses the `@if` mental model as everywhere else in Sass `@if` will generally do something then and there as opposed to creating a new stylesheet. The `@target`, on the other hand, creates a new mental model for this new action taken by Sass and will make it much easier to understand.

In a nutshell: could we use `@if`? Sure, but it will break variable and `@if` mental models we have in place, whereas `@target` creates a new mental model for this new feature.  
",Snugug,target
241,2012-08-16 00:57:02,"@nex3 it's not the same. The differences:
1. additional s[ac]ss files must be created and configured
2. The behavior of `@target` is to hide all the things not in the target. So the code would actually have to be:


1. It seems likely that `@target` would be have better performance.
",chriseppstein,target
241,2012-08-16 02:33:23,"Having used something very similar to `@if $target` in production it is incredibly cumbersome. Isolating styles appropriately across multiple partials becomes annoying, especially when whole partials of styles might not be served to a particular environment. Without the ability to conditionally load partials every instance would need to have context explicitly stated.

In this project I had two environments I built separately, one for an app and one for the web. It did the trick and was a good solution but not without some headaches. @target seems like a very elegant solution to these issues.
",scottkellum,if
241,2012-08-16 02:33:23,"Having used something very similar to `@if $target` in production it is incredibly cumbersome. Isolating styles appropriately across multiple partials becomes annoying, especially when whole partials of styles might not be served to a particular environment. Without the ability to conditionally load partials every instance would need to have context explicitly stated.

In this project I had two environments I built separately, one for an app and one for the web. It did the trick and was a good solution but not without some headaches. @target seems like a very elegant solution to these issues.
",scottkellum,target
241,2012-08-16 08:09:11,"I'm sorry if this confuses the issue, but what about something like an @as directive; This would mark either the current node or the children of the the @as to be compiled in a separate file.




",richthegeek,as
241,2012-08-16 11:55:16,"Thanks for chiming in Rich, but I think that actually is the opposite of what we're looking to do.

This is a language level change, so an end user shouldn't need to write an @each statement anywhere; the idea is to just wrap a piece of code and, at a language level, have it generate a separate stylesheet with just that wrapped code, so no need for the @each, and more importantly, we don't want to flat out @import all of style, we want separate stylesheets with desecrate code. If we take the @each out, then the `@as` directive as you've proposed doesn't seem to allow us to specify just what selectors from `#foo` or from `@media` we want to use; it seems to be all or nothing. I feel is may be worse from a user's perspective as the control for it is a bit clumsy; where does it start? Where does it end? Does it carry through partials? What if I want some code to go to all stylesheets, others to go to just one of the children sheets? I think a wrapped solution, either being `@target` or the `@if` is a better way to go, and feel that `@target` is the best of the three.

While I'm here though, a suggestion for either solution: the ability to specify that the output should be put in more than one spot, so something like this:



or



Also, funny, now that I just wrote out those two, I would really hate to write out the `@if` for everything, really does hurt my mental model and could lead to some very easy to get wrong syntax errors expecting to be able to write a full `@if` statement. I now much prefer `@target`.

@nex3, with `@if`, what would the expected output of the following be? If we add onto `@if`, what happens here?



Does `$target` become the first reserved variable name in Sass? What happens if someone creates a `$target` variable? Will they get an error at all? If so, where? At variable creation or at use? Should it error at all? Maybe they just want to use the variable namespace `$target` without creating separate stylesheets? What happens if an existing mixin/function has `$target` as an argument? What will happen with all of those?

Can you chain target if statements with non-target if statements? If so, what happens when you do; does it only print if the entire if statement evals to true as per normal, or will it generate the the stylesheet than continue evaluating the if statement?

Essentially, the question is, what happens when you add new and unexpected functionality into preexisting mental models? Wouldn't it be better to create a new mental model for this truly new functionality?
",Snugug,if
241,2012-08-16 11:55:16,"Thanks for chiming in Rich, but I think that actually is the opposite of what we're looking to do.

This is a language level change, so an end user shouldn't need to write an @each statement anywhere; the idea is to just wrap a piece of code and, at a language level, have it generate a separate stylesheet with just that wrapped code, so no need for the @each, and more importantly, we don't want to flat out @import all of style, we want separate stylesheets with desecrate code. If we take the @each out, then the `@as` directive as you've proposed doesn't seem to allow us to specify just what selectors from `#foo` or from `@media` we want to use; it seems to be all or nothing. I feel is may be worse from a user's perspective as the control for it is a bit clumsy; where does it start? Where does it end? Does it carry through partials? What if I want some code to go to all stylesheets, others to go to just one of the children sheets? I think a wrapped solution, either being `@target` or the `@if` is a better way to go, and feel that `@target` is the best of the three.

While I'm here though, a suggestion for either solution: the ability to specify that the output should be put in more than one spot, so something like this:



or



Also, funny, now that I just wrote out those two, I would really hate to write out the `@if` for everything, really does hurt my mental model and could lead to some very easy to get wrong syntax errors expecting to be able to write a full `@if` statement. I now much prefer `@target`.

@nex3, with `@if`, what would the expected output of the following be? If we add onto `@if`, what happens here?



Does `$target` become the first reserved variable name in Sass? What happens if someone creates a `$target` variable? Will they get an error at all? If so, where? At variable creation or at use? Should it error at all? Maybe they just want to use the variable namespace `$target` without creating separate stylesheets? What happens if an existing mixin/function has `$target` as an argument? What will happen with all of those?

Can you chain target if statements with non-target if statements? If so, what happens when you do; does it only print if the entire if statement evals to true as per normal, or will it generate the the stylesheet than continue evaluating the if statement?

Essentially, the question is, what happens when you add new and unexpected functionality into preexisting mental models? Wouldn't it be better to create a new mental model for this truly new functionality?
",Snugug,each
241,2012-08-16 11:55:16,"Thanks for chiming in Rich, but I think that actually is the opposite of what we're looking to do.

This is a language level change, so an end user shouldn't need to write an @each statement anywhere; the idea is to just wrap a piece of code and, at a language level, have it generate a separate stylesheet with just that wrapped code, so no need for the @each, and more importantly, we don't want to flat out @import all of style, we want separate stylesheets with desecrate code. If we take the @each out, then the `@as` directive as you've proposed doesn't seem to allow us to specify just what selectors from `#foo` or from `@media` we want to use; it seems to be all or nothing. I feel is may be worse from a user's perspective as the control for it is a bit clumsy; where does it start? Where does it end? Does it carry through partials? What if I want some code to go to all stylesheets, others to go to just one of the children sheets? I think a wrapped solution, either being `@target` or the `@if` is a better way to go, and feel that `@target` is the best of the three.

While I'm here though, a suggestion for either solution: the ability to specify that the output should be put in more than one spot, so something like this:



or



Also, funny, now that I just wrote out those two, I would really hate to write out the `@if` for everything, really does hurt my mental model and could lead to some very easy to get wrong syntax errors expecting to be able to write a full `@if` statement. I now much prefer `@target`.

@nex3, with `@if`, what would the expected output of the following be? If we add onto `@if`, what happens here?



Does `$target` become the first reserved variable name in Sass? What happens if someone creates a `$target` variable? Will they get an error at all? If so, where? At variable creation or at use? Should it error at all? Maybe they just want to use the variable namespace `$target` without creating separate stylesheets? What happens if an existing mixin/function has `$target` as an argument? What will happen with all of those?

Can you chain target if statements with non-target if statements? If so, what happens when you do; does it only print if the entire if statement evals to true as per normal, or will it generate the the stylesheet than continue evaluating the if statement?

Essentially, the question is, what happens when you add new and unexpected functionality into preexisting mental models? Wouldn't it be better to create a new mental model for this truly new functionality?
",Snugug,import
241,2012-08-16 11:55:16,"Thanks for chiming in Rich, but I think that actually is the opposite of what we're looking to do.

This is a language level change, so an end user shouldn't need to write an @each statement anywhere; the idea is to just wrap a piece of code and, at a language level, have it generate a separate stylesheet with just that wrapped code, so no need for the @each, and more importantly, we don't want to flat out @import all of style, we want separate stylesheets with desecrate code. If we take the @each out, then the `@as` directive as you've proposed doesn't seem to allow us to specify just what selectors from `#foo` or from `@media` we want to use; it seems to be all or nothing. I feel is may be worse from a user's perspective as the control for it is a bit clumsy; where does it start? Where does it end? Does it carry through partials? What if I want some code to go to all stylesheets, others to go to just one of the children sheets? I think a wrapped solution, either being `@target` or the `@if` is a better way to go, and feel that `@target` is the best of the three.

While I'm here though, a suggestion for either solution: the ability to specify that the output should be put in more than one spot, so something like this:



or



Also, funny, now that I just wrote out those two, I would really hate to write out the `@if` for everything, really does hurt my mental model and could lead to some very easy to get wrong syntax errors expecting to be able to write a full `@if` statement. I now much prefer `@target`.

@nex3, with `@if`, what would the expected output of the following be? If we add onto `@if`, what happens here?



Does `$target` become the first reserved variable name in Sass? What happens if someone creates a `$target` variable? Will they get an error at all? If so, where? At variable creation or at use? Should it error at all? Maybe they just want to use the variable namespace `$target` without creating separate stylesheets? What happens if an existing mixin/function has `$target` as an argument? What will happen with all of those?

Can you chain target if statements with non-target if statements? If so, what happens when you do; does it only print if the entire if statement evals to true as per normal, or will it generate the the stylesheet than continue evaluating the if statement?

Essentially, the question is, what happens when you add new and unexpected functionality into preexisting mental models? Wouldn't it be better to create a new mental model for this truly new functionality?
",Snugug,target
241,2012-08-16 11:55:16,"Thanks for chiming in Rich, but I think that actually is the opposite of what we're looking to do.

This is a language level change, so an end user shouldn't need to write an @each statement anywhere; the idea is to just wrap a piece of code and, at a language level, have it generate a separate stylesheet with just that wrapped code, so no need for the @each, and more importantly, we don't want to flat out @import all of style, we want separate stylesheets with desecrate code. If we take the @each out, then the `@as` directive as you've proposed doesn't seem to allow us to specify just what selectors from `#foo` or from `@media` we want to use; it seems to be all or nothing. I feel is may be worse from a user's perspective as the control for it is a bit clumsy; where does it start? Where does it end? Does it carry through partials? What if I want some code to go to all stylesheets, others to go to just one of the children sheets? I think a wrapped solution, either being `@target` or the `@if` is a better way to go, and feel that `@target` is the best of the three.

While I'm here though, a suggestion for either solution: the ability to specify that the output should be put in more than one spot, so something like this:



or



Also, funny, now that I just wrote out those two, I would really hate to write out the `@if` for everything, really does hurt my mental model and could lead to some very easy to get wrong syntax errors expecting to be able to write a full `@if` statement. I now much prefer `@target`.

@nex3, with `@if`, what would the expected output of the following be? If we add onto `@if`, what happens here?



Does `$target` become the first reserved variable name in Sass? What happens if someone creates a `$target` variable? Will they get an error at all? If so, where? At variable creation or at use? Should it error at all? Maybe they just want to use the variable namespace `$target` without creating separate stylesheets? What happens if an existing mixin/function has `$target` as an argument? What will happen with all of those?

Can you chain target if statements with non-target if statements? If so, what happens when you do; does it only print if the entire if statement evals to true as per normal, or will it generate the the stylesheet than continue evaluating the if statement?

Essentially, the question is, what happens when you add new and unexpected functionality into preexisting mental models? Wouldn't it be better to create a new mental model for this truly new functionality?
",Snugug,as
241,2012-08-16 11:55:16,"Thanks for chiming in Rich, but I think that actually is the opposite of what we're looking to do.

This is a language level change, so an end user shouldn't need to write an @each statement anywhere; the idea is to just wrap a piece of code and, at a language level, have it generate a separate stylesheet with just that wrapped code, so no need for the @each, and more importantly, we don't want to flat out @import all of style, we want separate stylesheets with desecrate code. If we take the @each out, then the `@as` directive as you've proposed doesn't seem to allow us to specify just what selectors from `#foo` or from `@media` we want to use; it seems to be all or nothing. I feel is may be worse from a user's perspective as the control for it is a bit clumsy; where does it start? Where does it end? Does it carry through partials? What if I want some code to go to all stylesheets, others to go to just one of the children sheets? I think a wrapped solution, either being `@target` or the `@if` is a better way to go, and feel that `@target` is the best of the three.

While I'm here though, a suggestion for either solution: the ability to specify that the output should be put in more than one spot, so something like this:



or



Also, funny, now that I just wrote out those two, I would really hate to write out the `@if` for everything, really does hurt my mental model and could lead to some very easy to get wrong syntax errors expecting to be able to write a full `@if` statement. I now much prefer `@target`.

@nex3, with `@if`, what would the expected output of the following be? If we add onto `@if`, what happens here?



Does `$target` become the first reserved variable name in Sass? What happens if someone creates a `$target` variable? Will they get an error at all? If so, where? At variable creation or at use? Should it error at all? Maybe they just want to use the variable namespace `$target` without creating separate stylesheets? What happens if an existing mixin/function has `$target` as an argument? What will happen with all of those?

Can you chain target if statements with non-target if statements? If so, what happens when you do; does it only print if the entire if statement evals to true as per normal, or will it generate the the stylesheet than continue evaluating the if statement?

Essentially, the question is, what happens when you add new and unexpected functionality into preexisting mental models? Wouldn't it be better to create a new mental model for this truly new functionality?
",Snugug,media
241,2012-08-16 12:06:54,"A bit further away from the `@target` discussion, I've been toying around with `@buffer`s and I am also at the point where I need to implement media queries being outputted in separate files as well. For the [purposes of my implementation](https://github.com/nex3/sass/issues/116#issuecomment-7355117), I was planning on treating each `@buffer` directive within an `@import`ed file as an indicating that the file should also be saved to disk, e.g.:





I haven't gotten to do it yet, but it's on my list. If interested, subscribe to #116.
",StanAngeloff,buffer
241,2012-08-16 12:06:54,"A bit further away from the `@target` discussion, I've been toying around with `@buffer`s and I am also at the point where I need to implement media queries being outputted in separate files as well. For the [purposes of my implementation](https://github.com/nex3/sass/issues/116#issuecomment-7355117), I was planning on treating each `@buffer` directive within an `@import`ed file as an indicating that the file should also be saved to disk, e.g.:





I haven't gotten to do it yet, but it's on my list. If interested, subscribe to #116.
",StanAngeloff,target
241,2012-08-16 12:06:54,"A bit further away from the `@target` discussion, I've been toying around with `@buffer`s and I am also at the point where I need to implement media queries being outputted in separate files as well. For the [purposes of my implementation](https://github.com/nex3/sass/issues/116#issuecomment-7355117), I was planning on treating each `@buffer` directive within an `@import`ed file as an indicating that the file should also be saved to disk, e.g.:





I haven't gotten to do it yet, but it's on my list. If interested, subscribe to #116.
",StanAngeloff,import
241,2012-08-20 17:42:50,"@Snugug I'm not particularly swayed by the idea that `@if` statements are harder to write or less semantic. You could always just write a mixin to make it more clear:



There's also no reserved variable names or other magic going on. There would just be a command-line argument to Sass that allowed you to set a global variable (`$target`) externally. It would function in every way like a global variable, including being assignable from local scopes.

@chriseppstein The differences you bring up are more compelling, although I'm not entirely sure why you'd want the separate target stylesheets not to have the contents from the primary stylesheet.

@scottkellum I don't understand what you mean by ""isolating styles across partials."" Can you give a more concrete example of how this was awkward?
",nex3,if
241,2012-08-20 20:28:36,"@Snugug My suggestion wasn't to load two stylesheets, one basic and another basic + IE8; rather, it was to only load the basic + IE8 stylesheet on IE8.

@chriseppstein I take your point. That would indeed be difficult to deal with in my suggested approach.

All right, I'm sufficiently convinced that `@target` is the best way to handle this use case.
",nex3,target
241,2012-08-20 20:41:20,"From what I've seen, I dislike the semantics of `@buffer`. But that's something that should be discussed in its own issue.
",nex3,buffer
241,2012-11-27 10:34:31,"I agree with @nex3's comments on #577, `@buffer` is useful in a single case, but `@target` as discussed is much more powerful. 

Look forward to seeing progress on this.
",replete,target
241,2012-11-27 10:34:31,"I agree with @nex3's comments on #577, `@buffer` is useful in a single case, but `@target` as discussed is much more powerful. 

Look forward to seeing progress on this.
",replete,buffer
241,2013-09-20 12:51:19,"I have a specific need for this. I'm using sass to generate my css, part of the project I'm working on requires the project to be brand-able, i.e. separate css output just for the colours and nothing else. I was sure there was a way to do this by @extends but I was wrong. In the end I created a load of variables and had to separate out all the colour info out of 20+ scss _partials to do it. Problem is, this starts off small but in the end it is going to cause a huge headache the more brands get added. Is there no way at present to keep all the sass together logically and split out portions into another file(s)?
",ottobyte,extends
241,2013-11-20 10:29:46,"I'd love to see a non hackish way to do this.  jsledgers proposed workaround requires that you wrap everything in the file in an @if to get your separate files in multiple passes.  Why not just make this easy and allow a module partial to be compiled to multiple files with @export or @target or whatever?  That way you only have to wrap the things that need to be separated out in an a function/mixin rather than wrapping the whole file contents to hide/show everything.
",yareckon,export
241,2013-11-20 10:29:46,"I'd love to see a non hackish way to do this.  jsledgers proposed workaround requires that you wrap everything in the file in an @if to get your separate files in multiple passes.  Why not just make this easy and allow a module partial to be compiled to multiple files with @export or @target or whatever?  That way you only have to wrap the things that need to be separated out in an a function/mixin rather than wrapping the whole file contents to hide/show everything.
",yareckon,if
241,2013-11-20 10:29:46,"I'd love to see a non hackish way to do this.  jsledgers proposed workaround requires that you wrap everything in the file in an @if to get your separate files in multiple passes.  Why not just make this easy and allow a module partial to be compiled to multiple files with @export or @target or whatever?  That way you only have to wrap the things that need to be separated out in an a function/mixin rather than wrapping the whole file contents to hide/show everything.
",yareckon,target
241,2014-05-17 13:04:54,"I was searching for this kind of feature and landed here.

But I'm not for a ""@target"" keyword which is, IMO, too specific.

I would prefer a @file, or @output... 

For example:



That would produce:


",ByScripts,output
241,2014-05-17 13:04:54,"I was searching for this kind of feature and landed here.

But I'm not for a ""@target"" keyword which is, IMO, too specific.

I would prefer a @file, or @output... 

For example:



That would produce:


",ByScripts,target
241,2014-05-17 13:04:54,"I was searching for this kind of feature and landed here.

But I'm not for a ""@target"" keyword which is, IMO, too specific.

I would prefer a @file, or @output... 

For example:



That would produce:


",ByScripts,file
241,2016-02-24 00:43:51,"When I last commented on this thread over 3 years ago, it seemed that @target was a powerful solution. Has anything changed?
",replete,target
240,2012-01-04 20:54:44,"I know we can already re-declare @mixins like this:



Becomes:



_However_, something I noticed today is that if the @include comes
before the re-declaration it won't take:



Becomes:



I would like it, too, to become:


",powerbuoy,mixins
240,2012-01-04 20:54:44,"I know we can already re-declare @mixins like this:



Becomes:



_However_, something I noticed today is that if the @include comes
before the re-declaration it won't take:



Becomes:



I would like it, too, to become:


",powerbuoy,include
240,2012-01-05 03:31:36,"Sure, here's what I wrote to Nathan before:

It may seem like my problem could be solved quite easily by moving
code around, the problem is that I work in a framework that supports
extending sites and styles and when you do that _your_ site's CSS code
will come _last_ in the generated CSS-file (which is obviously
necessary for specificity reasons). So if I extend one site that
declares and uses a lot of mixins, but then from my own site want to
override one of those mixins the overridden mixin will only be used in
my own code - _not_ the code in the extended site.

Edit: A simple example would be the style I extend declares a blue `@button` and uses it in several places but in my new style I'd like the button to be green so it would be awesome to just go `@mixin button {background: green}` and change my own buttons _as well_ as the other style's buttons.
",powerbuoy,button
240,2012-01-05 03:31:36,"Sure, here's what I wrote to Nathan before:

It may seem like my problem could be solved quite easily by moving
code around, the problem is that I work in a framework that supports
extending sites and styles and when you do that _your_ site's CSS code
will come _last_ in the generated CSS-file (which is obviously
necessary for specificity reasons). So if I extend one site that
declares and uses a lot of mixins, but then from my own site want to
override one of those mixins the overridden mixin will only be used in
my own code - _not_ the code in the extended site.

Edit: A simple example would be the style I extend declares a blue `@button` and uses it in several places but in my new style I'd like the button to be green so it would be awesome to just go `@mixin button {background: green}` and change my own buttons _as well_ as the other style's buttons.
",powerbuoy,mixin
239,2012-01-08 18:20:40,"@nex3 Well we knew this day would come. The question is how to handle it.

I think the most correct thing is to introduce a prefix for sass functions `-s-`, deprecate all the function calls to sass functions without a prefix on stable, and add sass-convert support to facilitate the change. Conceptually Sass is a vendor that is introducing experimental features and we should be a well behaved one.

But that is an awfully big reaction to the first collision so some other remedies should be considered too:
- We can introduce an escape to force functions that are defined in sass to be considered browser functions. Something like `'grayscale'(...)` or `-browser-grayscale(...)` which would be output as `grayscale(...)` (don't get too hung up on syntax here) The downside is that all sass users have to know that grayscale is a sass function and they cannot simply copy and paste CSS code examples into an scss file.
- Rename `grayscale()` to `gray()` -- not sure what the right approach to deprecation should be here but it won't be pretty.
- Introduce property-aware value parsing and some way for sass to be configured to ""just work"".

Did I miss any other options?
",chriseppstein,nex3
239,2012-01-12 03:03:39,"Perhaps we can move either to the `@name` syntax of LESS, or even `+name` syntax for mixins.
",twoolie,name
237,2012-01-03 01:28:36,"If you download the YAML base.css (http://www.yaml.de/fileadmin/yaml/core/base.css)
and try to parse it via sass



It seems to be the @media tags.
",ismell,media
237,2012-01-03 02:36:10,"If you compile scss you need to pass --scss to the sass command line.

Hunt & pecked on my iPhone... Sorry if it's brief!

On Jan 2, 2012, at 5:28 PM, Raul E Rangelreply@reply.github.com wrote:

> If you download the YAML base.css (http://www.yaml.de/fileadmin/yaml/core/base.css)
> and try to parse it via sass
> $ sass base.css
> 
> me@devbox:/var/www/rangelwed.com/Symfony/web$ sass base.css
> WARNING on line 329 of base.css:
> This selector doesn't have any properties and will not be rendered.
> WARNING on line 449 of base.css:
> This selector doesn't have any properties and will not be rendered.
> WARNING on line 499 of base.css:
> This selector doesn't have any properties and will not be rendered.
> Syntax error: Invalid CSS after """": expected selector, was ""{""
>        on line 41 of base.css
>  Use --trace for backtrace.
> 
> me@devbox:/var/www/rangelwed.com/Symfony/web$ sass -v
> Sass 3.1.12 (Brainy Betty)
> 
> It seems to be the @media tags.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/237
",chriseppstein,media
236,2012-01-02 00:07:54,"The @silent directive allows classes that exist purely to be @extend'ed to be removed from the compiled output.

Please review.
",chriseppstein,extend
236,2012-01-02 00:07:54,"The @silent directive allows classes that exist purely to be @extend'ed to be removed from the compiled output.

Please review.
",chriseppstein,silent
236,2012-02-21 19:06:45,"'@silent' was such a good idea, it makes a lot of sense in SCSS syntax. %selector looks like SASS to me.
Also, it is just says what it is doing, saves new developers a trip to the docs.
Please, consider '@silent' for SCSS syntax.
",barraponto,silent
236,2012-02-21 20:05:23,"I think the placeholder syntax is brilliant and more correctly and succinctly denotes the functionality that the `@silent` directive was providing.
",chriseppstein,silent
235,2011-12-30 01:04:18,"@nex3 I asked @barraponto to file this after a thread on the compass mailing list. I think this is a case where the meaning of the comment is changed significantly when placed on the next line. Are you opposed to special casing this?
",chriseppstein,nex3
233,2012-01-16 09:19:46,"@Kaelig 
I don't follow your logic. How come using mixins and other advanced stuff is company-friendly and using SASS syntactic sugar is not.
",markiz,Kaelig
233,2012-01-18 19:22:11,"Ignoring the Sass vs SCSS conversation, as I've said everything I want to about that elsewhere...

@Kaelig, I probably won't have time to integrate the docs any time soon myself, but I would happily accept any patches to the docs or website for either formatting or content.
",nex3,Kaelig
233,2012-01-20 22:09:24,"@Kaelig, i pointed your docs to Chris and he pointed me here. They look great and I think everyone is onboard to get them integrated into the site. 
Do you want to work up some patches to make that happen?  
Afterwards I'm sure a few folks would like to have a go at improving the typography, but this is def a great start. :)
",paulirish,Kaelig
233,2012-01-22 15:43:47,"Hi everyone!

As suggested by @paulirish, I tried to improve the typography a bit. I also made some tweaks to the design so it matches better with the Sass website.

As promised, I published it on GitHub: https://github.com/Kaelig/Sass-reference

@chriseppstein and @nex3, I added as contributors on the project, since you are the authors of the reference.

What's our next move? Do you want to publish it on sass-lang.com ? (it's ok with me)
",kaelig,chriseppstein
233,2012-01-22 17:31:24,"I _think_ the site is available over here:
https://github.com/nex3/sass/tree/sass-pages

might to see how to integrate the two

On Sun, Jan 22, 2012 at 7:43 AM, Kaelig <
reply@reply.github.com

> wrote:
> 
> Hi everyone!
> 
> As suggested by @paulirish, I tried to improve the typography a bit. I
> also made some tweaks to the design so it matches better with the Sass
> website.
> 
> As promised, I published it on GitHub:
> https://github.com/Kaelig/Sass-reference
> 
> @chriseppstein and @nex3, I added as contributors on the project, since
> you are the authors of the reference.
> 
> What's our next move? Do you want to publish it on sass-lang.com ? (it's
> ok with me)
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/233#issuecomment-3603699
",paulirish,chriseppstein
233,2012-03-13 00:09:35,"There's currently a task force being led by @jina with the goal of redesigning the Sass website and documentation. One of the primary concerns is the experience of a user getting started without getting bogged down in unnecessary complexity.
",nex3,jina
233,2012-03-13 18:02:27,"Yep, yep! If you are interested, we have a Twitter account you can follow to get updated on the progress. [@teamsassdesign](http://twitter.com/teamsassdesign)

We're super stoked. :)

@Kaelig ‚Äî when the design crew is ready to discuss docs, we won't leave you out of the discussion. You've done great work so far. :)
",jina,teamsassdesign
233,2012-03-13 18:02:27,"Yep, yep! If you are interested, we have a Twitter account you can follow to get updated on the progress. [@teamsassdesign](http://twitter.com/teamsassdesign)

We're super stoked. :)

@Kaelig ‚Äî when the design crew is ready to discuss docs, we won't leave you out of the discussion. You've done great work so far. :)
",jina,Kaelig
231,2011-12-23 08:55:43,"Shorthands for colors not allowed in IE gradients.

Bootstrap use them a lot. 

Result is painfully 80ish. 

Compass already implements a hack, thinking about doing the same for bootstrap-sass: 

https://github.com/thomas-mcdonald/bootstrap-sass/issues/14
http://pinds.com/2011/11/30/fixing-ie-gradients-with-rails-3-1-and-scss/

cc @thomas-mcdonald @rjackson
",bbenezech,rjackson
231,2011-12-23 08:55:43,"Shorthands for colors not allowed in IE gradients.

Bootstrap use them a lot. 

Result is painfully 80ish. 

Compass already implements a hack, thinking about doing the same for bootstrap-sass: 

https://github.com/thomas-mcdonald/bootstrap-sass/issues/14
http://pinds.com/2011/11/30/fixing-ie-gradients-with-rails-3-1-and-scss/

cc @thomas-mcdonald @rjackson
",bbenezech,thomas-mcdonald
229,2011-12-19 02:35:09,"Currently only ids, classes, and pseudo selectors have particular tokens to use:
id - #
class - .
pseudo - :

To select by a custom attribute, you usually have to write some form of:
[attr=value]

I feel that it would be useful to define custom attributes:
Example definition:
@attr !($value) [data-foo*="" $value ""]

Example use:
# id_selector!bar!baz {...}

Output:
# id_selector[data-foo*="" bar ""][data-foo*="" baz ""] {...}
",LiamGoodacre,attr
227,2011-12-16 15:53:09,"[Initially filed](https://github.com/chriseppstein/compass/issues/650) by @Pichirho against compass.

If you import a self referencing file, compass may exhaust all memory.
### _self.scss


### crasher.scss


## Expected results

The parser should notice a self reference or a circular reference and stop parsing with an error.
## Actual results

When compass detects a change in crasher.scss, it includes _self.scss until it fails with `SystemStackError on line [""10""] of C: stack level too deep` or the OS crashes if the available memory is exhausted before that.
## System & Versions
- 64 bit Win7 Professional
- Rails 3.0.7
- sass 3.1.10
- compass 0.11.5
",chriseppstein,Pichirho
224,2011-12-09 23:09:46,"According to the documentation
""@extend works by inserting the extending selector (e.g. .seriousError) anywhere in the stylesheet that the extended selector (.e.g .error) appears.""

The example I gave goes beyond this specification. Also, if your explanation (which I confess I 'm not sure I've given enough thought to yet) is true, I fail to see why  "".media .xlarge .carousel-wrap  img"" is _not_ also added as a selector?
",wheresrhys,extend
224,2011-12-09 23:33:36,"The documentation is not a specification. `@extend` is a complicated construction, and the docs are intended to give a sense of what happens when you use it without drowning the reader in detail and complexity. They aren't intended to fully specify its behavior.

You're correct that `.media .xlarge .carousel-wrap img` does match `.xlarge (.media .cariousel-wrap img)`. In a perfect world, we would generate that selector as well. However, for practical reasons, we avoid generating all possible permutations of selectors. It's by far the most likely scenario that one set of parent selectors is entirely above or entirely below the other, so we only generate selectors for that scenario. To generate the fully dynamic scenario would cause an exponential increase in selectors in some cases, which is unacceptable.

This is one of the reasons we're trying to get `@extend` adopted by browser vendors. If the browser itself is doing the resolution, it will be able to check both selectors without needing an exponential stylesheet.
",nex3,extend
224,2011-12-10 00:49:39,"Because when you have descendant selectors like this Sass doesn't know what
order your document will have -- it has to generate both to handle all
possible document structures.

chris

On Fri, Dec 9, 2011 at 3:39 AM, Rhys Evans <
reply@reply.github.com

> wrote:
> 
> .media .carousel-wrap img {
>        @extend .banner-dimensions;
>    }
> 
>    .xlarge .banner-dimensions {
>        width: 1490px;
>        height: 365px;
>    }
> 
> generates
> 
>    .xlarge .banner-dimensions,
>    .xlarge .media .carousel-wrap img,
>    .media .carousel-wrap .xlarge img {
>        height: 365px;
>        width: 1490px;
>    }
> 
> where the third selector isn't needed. I would expect this behaviour if I
> was using
> 
>    .media .carousel-wrap {
>        img {
>            @extend .banner-dimensions;
>        }
>    }
> 
> but not when using a single string, un-nested selector.
> 
> I'm using v3.1.11 (and it was also happening in 3.1.7)
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/224
",chriseppstein,extend
217,2011-11-26 06:07:58,"This is a cherry-pick and merge of @chriseppstein's commit in #106 in easy pull request form
",nevir,chriseppstein
216,2011-11-23 21:07:48,"_Edited by @nex3 to change the title._

[cross-posted from http://stackoverflow.com/questions/8248976/sass-indented-syntax-on-multiple-lines]

I love indented syntax, I think it's much cleaner.

There's one issue I have with it. If I have a really long mixin declaration, there's no way to split it into multiple lines (obeying the 80 character limit, for example)

Take this example, first written in SCSS.



I'm able to split up one long declaration in to multiple lines. With the indented syntax, I don't think there's a way. I have to put the declaration on one line, which is way less readable.



Is there some way I don't know of? And if not, can there be one? :)
",talsafran,nex3
216,2012-10-01 11:16:49,"+1
another example of currently valid, but not very readable src property in @font-face rule



and currently invalid for SASS, but much more readable:


",while0pass,font-face
216,2012-10-13 14:57:04,"I've faced a similar issue yesterday when defining a `@font-face` in Sass.

This feature would have the potential to increase legibility substantially.

Is anyone here familiar enough with how Sass parses lines to have a vague idea how to go about implementing this, or if it's even worth the effort?
",olivierlacan,font-face
216,2014-02-01 17:26:53,"Agreed. Multi-line would be a very welcome addition for mixins and lists.

The whitespace-aware/inferred nature of the indented syntax is the primary reason I chose it over SCSS (and, I assume, it's existence).

As mentioned by others, the readability of box-shadows, text-shadows, @font-faces and lists would benefit hugely from this.
",IanOliver,font-faces
216,2014-08-29 06:41:51,":thumbsup: +1000 OMG, I thought it was just me. 

Unless it's been discussed before in duplicate issue boxes, has @hcatlin, @nex3, or @hcatlin discussed the biggest caveats of adding this feature that may not be immediately obvious to most? 
",lozandier,nex3
216,2014-08-29 06:41:51,":thumbsup: +1000 OMG, I thought it was just me. 

Unless it's been discussed before in duplicate issue boxes, has @hcatlin, @nex3, or @hcatlin discussed the biggest caveats of adding this feature that may not be immediately obvious to most? 
",lozandier,hcatlin
216,2014-11-02 16:54:46,"I'd love to get some feedback on #1504.

_for @next3 / the maintainers_
- The PR only improves multi-line support in one specific area: for maps and lists as variables. It won't help with mix-in declarations, multi-line properties, etc. While as a user of the indented syntax, I'd like to see this improvement as soon as possible, I could understand why the maintainers might prefer to hold off and improve support for multi-line across the board. 
- I find the organisation of unit tests in the codebase pretty unclear. Thus I'm not sure if I added tests in the right place.

_for everyone_

How Sass-like should the syntax be?

I worked on the basis of the suggestion from @mxlje (https://github.com/sass/sass/issues/216#issuecomment-41361084). 



Something like this might also be possible though:



In other words, we could make commas optional (or even illegal) - This would give map key-values a very similar syntax to properties. Personally, I'm on the fence about whether this would be a good thing.

n.b. since Sass is pretty liberal about what it allows as a list delimiter, this already works:


",myabc,next3
216,2015-05-03 18:51:14,"For what it's worth, and this may be a temporary solution for @safareli too: I mostly want to use this for values of variables (long lists/maps, etc). Currently I keep those in a `_variables.scss` file and `@import` it into my `.sass` files. Keeps the curly brackets and semi-colons to a single file :)
",roytomeij,import
216,2015-05-05 14:01:29,"Im on the same situation @roytomei. I try to keep my maps on an `.scss` file, but with a colons, semicolons, curly brackets etc out of my visual.

Its not perfect, but Im happy with it


",baires,roytomei
216,2016-04-19 17:26:56,"> It's stuff like this that makes me move to Stylus. This has been an issue for 4/5 years!

@ellioseven Hi, I sent you a tweet. I'd like to chat with you if you have a few minutes.
",chriseppstein,ellioseven
214,2011-11-19 05:07:47,"This might be the expected behavior for @extend, but it seems odd to me.  I'd be willing to take a shot at fixing it if it would be welcome.  Check it out:



Turns into:



That means that, even though I extend `.class-one` _after_ `.class-two`, the style for `.class-one` gets written out before `.class-two`, so the cascade order is not what I expect.  I'd expect something with `.merged` to be red, but it's green instead.  Am I crazy?
",bdimcheff,extend
214,2011-11-23 18:39:13,"This is expected. If A `@extend`s B, A is added to B's selector. This doesn't and shouldn't change the location of B.

When you say that `.merged` `@extend`s `.class-two` and `.class-one`, you're saying that all `.merged` elements should be styled as though they also match `.class-two` and `.class-one`. The precedence of these styles is still determined by the location of `.class-two` and `.class-one` in the source.
",nex3,extend
211,2011-11-10 22:40:52,"What I'm looking for is a way to @extend a selector without printing it. 

I'm looking for this feature because I write some styles that are used several by several markups, but I don't want to tie them to any markup. Currently, I'm using classes starting with - (hyphen) since they are probably not being used in the actual markup.

@nex3 once suggested using a @quiet directive to define these non-printing classes. I thought of using _ (underscore) in the beginning of the selector, to make it consistent with partials. Either way will do.
",barraponto,extend
211,2011-11-10 22:40:52,"What I'm looking for is a way to @extend a selector without printing it. 

I'm looking for this feature because I write some styles that are used several by several markups, but I don't want to tie them to any markup. Currently, I'm using classes starting with - (hyphen) since they are probably not being used in the actual markup.

@nex3 once suggested using a @quiet directive to define these non-printing classes. I thought of using _ (underscore) in the beginning of the selector, to make it consistent with partials. Either way will do.
",barraponto,nex3
211,2011-11-10 22:40:52,"What I'm looking for is a way to @extend a selector without printing it. 

I'm looking for this feature because I write some styles that are used several by several markups, but I don't want to tie them to any markup. Currently, I'm using classes starting with - (hyphen) since they are probably not being used in the actual markup.

@nex3 once suggested using a @quiet directive to define these non-printing classes. I thought of using _ (underscore) in the beginning of the selector, to make it consistent with partials. Either way will do.
",barraponto,quiet
211,2011-11-27 17:51:02,"@timplunkett resorting to mixins will print the properties everytime you @include it.
also, if you try to @include an undefined mixin it breaks compilation. if you try to @extend a class that does not exist, everything works just fine.
",barraponto,extend
211,2011-11-27 17:51:02,"@timplunkett resorting to mixins will print the properties everytime you @include it.
also, if you try to @include an undefined mixin it breaks compilation. if you try to @extend a class that does not exist, everything works just fine.
",barraponto,include
210,2011-11-08 22:19:45,"I cannot seem to use variables when using the `@import` command. I have 2 different styles (white & red) that I want to choose from. As I understand it, this is a Sass issue. At the moment, I have:

`screen.scss`:



`main.scss`:



`partials/_identity.scss`:



`partials/_search.scss`:



And I get this error when running `compass compile`:



It doesn't look like the variable is being properly concatenated. I tried interpolation (`@import ""identities/cu-#{$banner_color}`) but that fails too...

Any reason this doesn't work?
",parkr,import
210,2011-11-09 19:34:13,"I understand what you've written there, but don't see _how_ the implementation of this becomes ""annoying and slow"". The declaration of the variable `$banner_color`, as long as it precedes the `@import` call, should not harm compile time in any way, at least as I see it. Perhaps you could provide further insight. Thank you.
",parkr,import
207,2011-11-02 04:13:56,"Howdy, 

I've just noticed that Interpolation doesn't seem to be working the following directive:



Produces:
(Line 2: Invalid CSS after ""...bkit-keyframes "": expected ""}"", was ""#{$name} { @con..."")

I have noticed by wrapping the #{$name} in single quites inside the @-rule works, but only for Chrome & Safari. 



Compass 0.11.5

Cheers
",chrisbuttery,con
204,2011-10-28 05:53:52,"Here's something I was working on to automate some color themes in a button set I'm working on and I'm wondering why we don't allow `@while` in `@each` directives.


",adamstac,while
204,2011-10-28 05:53:52,"Here's something I was working on to automate some color themes in a button set I'm working on and I'm wondering why we don't allow `@while` in `@each` directives.


",adamstac,each
204,2011-11-23 19:40:14,"This works as expected for me: it loops infinitely, since `@while $color == ""red""` is constantly true.
",nex3,while
204,2011-11-23 19:48:47,"Now that I look at this, I think I'd need to use `@if` instead of `@while`.
",adamstac,while
204,2011-11-23 19:48:47,"Now that I look at this, I think I'd need to use `@if` instead of `@while`.
",adamstac,if
202,2011-10-26 19:36:46,"**Feature request:**

The ability to `@extend` several classes by chaining them ala `@extend .two.columns;`.

Thanks!
",mikker,extend
202,2012-01-10 16:29:04,"That syntax will extend all the places where `.two.columns` appear together. If you mean for it to be functionally equivalent to `@extend .two; @extend .columns;` then I think the syntax would be `@extend .two, .columns;`.

Seems pretty easy to add. @nex3 do you have any objection?
",chriseppstein,extend
202,2012-01-10 16:29:04,"That syntax will extend all the places where `.two.columns` appear together. If you mean for it to be functionally equivalent to `@extend .two; @extend .columns;` then I think the syntax would be `@extend .two, .columns;`.

Seems pretty easy to add. @nex3 do you have any objection?
",chriseppstein,nex3
202,2012-01-16 18:29:12,"Yes, that's probably what I meant. Another option could be without the comma `@extend .two .columns;`. Space-separated like in HTML - `class=""two columns""`. Any one would be great :)
",mikker,extend
202,2012-01-18 19:26:45,"`@extend .two .columns` would mean extending the descendant selector, not extending multiple simple selectors. `@extend .two, .columns` would work, but I'm not sure it's worth the terseness. I think it's clearer to have a couple of `@extend`s when it's just two or three selectors being extended, and as far as I know it's very rare to extend more than that.
",nex3,extend
202,2012-01-18 20:39:23,"Of course!

Still - I think I know now what my original concern was: Some css only applies to elements that have BOTH classes.

<pre>
.one { ... }
.two { ... }
.one.two { ... }
</pre>


`@extend .one; @extend .two;` would give you the first two - but will it also apply the third?
",mikker,extend
196,2011-10-15 12:05:22,"if I had @import_directory and @import_tree I could get rid of ugly sprocket comments at the top of my stylesheets and be 100% sass. 
Why should I explicitly name all the files with @import? is there any way around it at the moment? 
",aziz,import
196,2011-10-15 17:44:05,"Sass provides a framework for customizing the behavior of the @import directive. This framework is used by [sass-rails](https://github.com/rails/sass-rails) and [sprockets-sass](https://github.com/petebrowne/sprockets-sass) to make the sprockets directives unnecessary in Sass files.
",chriseppstein,import
195,2011-10-12 13:23:11,"I came across this problem when trying to create comments in an @each-loop. 

scss:
$list: 1,2,3,4,5;

@each $cnt in $list {



}

css:
/\* comment ¬∞1*/
.name {
  width: 1px; }

/\* comment ¬∞1*/
.name {
  width: 2px; }

/\* comment ¬∞1*/
.name {
  width: 3px; }

/\* comment ¬∞1*/
.name {
  width: 4px; }

/\* comment ¬∞1*/
.name {
  width: 5px; }

SASS version : 3.1.8 (Brainy Betty)
RAILS version: 1.2.6  
",simne7,each-loop
195,2011-10-12 13:23:11,"I came across this problem when trying to create comments in an @each-loop. 

scss:
$list: 1,2,3,4,5;

@each $cnt in $list {



}

css:
/\* comment ¬∞1*/
.name {
  width: 1px; }

/\* comment ¬∞1*/
.name {
  width: 2px; }

/\* comment ¬∞1*/
.name {
  width: 3px; }

/\* comment ¬∞1*/
.name {
  width: 4px; }

/\* comment ¬∞1*/
.name {
  width: 5px; }

SASS version : 3.1.8 (Brainy Betty)
RAILS version: 1.2.6  
",simne7,each
194,2011-10-11 02:47:44,"I have a problem with my code:

@each $motor in -webkit-, -moz-, -ms-, -o- {
  @#{$motor}keyframes example {
    from {background-color: red;}
    to {background-color: blue;}
  }
}

Returns:

Invalid CSS after ""  @"": expected identifier, was ""#{$motor}keyfra...""

Thx.
",caiotarifa,each
193,2011-10-08 01:27:17,"Currently, SCSS extends the standard CSS function (described here http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#import) giving it different behavior depending on whether a CSS file or SCSS file is provided.

@import ""other.scss"";  <-- pulls the other.scss into this scss file completely, outputting a single resulting file. This == awesome

@import ""other.css"" <-- left alone because this is standard css markup.

It would be extremely useful if there was a way to @force-import ""other.css"" and have the file merged into this scss file.  A work around is to rename other.css > other.scss but that's not ideal, or practical when trying to merge in css from other projects or frameworks.
",sean-lynch,force-import
193,2011-10-08 01:27:17,"Currently, SCSS extends the standard CSS function (described here http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#import) giving it different behavior depending on whether a CSS file or SCSS file is provided.

@import ""other.scss"";  <-- pulls the other.scss into this scss file completely, outputting a single resulting file. This == awesome

@import ""other.css"" <-- left alone because this is standard css markup.

It would be extremely useful if there was a way to @force-import ""other.css"" and have the file merged into this scss file.  A work around is to rename other.css > other.scss but that's not ideal, or practical when trying to merge in css from other projects or frameworks.
",sean-lynch,import
193,2012-01-17 19:03:05,"I'm naively assuming there shouldn't be any legacy issues if we decide on a new keyword where the semantics of that keyword is always to include the contents of the file.

Proposal:

Add a new `@include` keyword which always merges the css/scss file indicated. Given the confusing semantics of `@import`, you could also deprecate (but not remove) the scss import for clarity.
",sean-lynch,include
193,2012-01-17 19:03:05,"I'm naively assuming there shouldn't be any legacy issues if we decide on a new keyword where the semantics of that keyword is always to include the contents of the file.

Proposal:

Add a new `@include` keyword which always merges the css/scss file indicated. Given the confusing semantics of `@import`, you could also deprecate (but not remove) the scss import for clarity.
",sean-lynch,import
193,2012-02-20 18:50:15,"I'd also like to see that change. I don't see a real reason why someone would complain that `@import` in a `.scss` file also pulls regular `.css` files, since minimizing the amount of HTTP-requests is a general best-practice.

Why not just changing it, testing it and look how people react?
",martinklepsch,import
193,2012-02-20 19:33:54,"@mklappstuhl There are valid uses of browser-based imports. For example, reducing http requests overall might be better achieved in some websites by relying on browser caching of shared stylesheets. Or maybe reducing bandwidth is more important to them than reducing latency. It's not for Sass to just decide to enforce a best practice -- that is the job of the developer.

I'd like to hear what is the use case where simply renaming the file to have the `.scss` extension is markedly more inconvenient to justify this work.
",chriseppstein,mklappstuhl
193,2012-02-20 20:53:54,"Completely understand that it's not a quick change. How do you feel about the `@include` or similar keyword proposal for 3.2?
",sean-lynch,include
193,2012-02-20 21:42:35,"Certainly abandoning the redefinition of @import would be a way forward.  @include is currently used by mixins.  

Hunt & pecked on my iPhone... Sorry if it's brief!

On Feb 20, 2012, at 12:53 PM, sean-lynchreply@reply.github.com wrote:

> Completely understand that it's not a quick change. How do you feel about the `@include` or similar keyword proposal for 3.2?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/193#issuecomment-4061523
",chriseppstein,include
193,2012-02-20 21:42:35,"Certainly abandoning the redefinition of @import would be a way forward.  @include is currently used by mixins.  

Hunt & pecked on my iPhone... Sorry if it's brief!

On Feb 20, 2012, at 12:53 PM, sean-lynchreply@reply.github.com wrote:

> Completely understand that it's not a quick change. How do you feel about the `@include` or similar keyword proposal for 3.2?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/193#issuecomment-4061523
",chriseppstein,import
193,2012-04-05 20:44:52,"A useful name would be `@embed`:



I'd also vote to have `@embed` act like `@import` in the case of Sass files.
",Boldewyn,embed
193,2012-04-05 20:44:52,"A useful name would be `@embed`:



I'd also vote to have `@embed` act like `@import` in the case of Sass files.
",Boldewyn,import
193,2012-04-20 19:49:53,"+1 on the `@embed` idea. I just got bit hard on this one, where what I thought was embedding was actually writing out a raw `@import` to the resulting CSS.
",jasonroelofs,embed
193,2012-04-20 19:49:53,"+1 on the `@embed` idea. I just got bit hard on this one, where what I thought was embedding was actually writing out a raw `@import` to the resulting CSS.
",jasonroelofs,import
193,2012-04-28 09:52:00,"I'm not sure I'm very fond of having two syntaxes that mean different things and then that mean even different things according to what filetype you feed it. It's very confusing for newcomers.
To me the move to make ‚Äî but that would be very difficult ‚Äî would just be to separate the meaning of the two syntaxes **completely**.

`@import` would just do what it says, import. In case of a CSS file, it would act like a normal @import, not embedding the file. In case of a SASS file, it would just @import the variables and mixins but then again, not embed any CSS.
`@embed` would actually embed the content (css, mixins and variables) of both CSS and SASS files.

But that would require to make a big warning to all sass users on the changing behavior of @import, but I think it's required for what I judge was a bad decision from the start to use an existing CSS method and then give it another behavior for sass files. In my mind that was misguided.
",Anahkiasen,embed
193,2012-04-28 09:52:00,"I'm not sure I'm very fond of having two syntaxes that mean different things and then that mean even different things according to what filetype you feed it. It's very confusing for newcomers.
To me the move to make ‚Äî but that would be very difficult ‚Äî would just be to separate the meaning of the two syntaxes **completely**.

`@import` would just do what it says, import. In case of a CSS file, it would act like a normal @import, not embedding the file. In case of a SASS file, it would just @import the variables and mixins but then again, not embed any CSS.
`@embed` would actually embed the content (css, mixins and variables) of both CSS and SASS files.

But that would require to make a big warning to all sass users on the changing behavior of @import, but I think it's required for what I judge was a bad decision from the start to use an existing CSS method and then give it another behavior for sass files. In my mind that was misguided.
",Anahkiasen,import
193,2012-06-29 22:45:05,"Is there a problem with having `@embed` behave just like `@import` for scss files, but embed the file if it's a css file? That doesn't require changing `@import` behavior, and the new functionality is more flexible. 
",alicexyl,embed
193,2012-06-29 22:45:05,"Is there a problem with having `@embed` behave just like `@import` for scss files, but embed the file if it's a css file? That doesn't require changing `@import` behavior, and the new functionality is more flexible. 
",alicexyl,import
193,2012-07-05 22:56:06,"@chriseppstein, how about the following?

`@import ""file.css"";` embeds the input. Given the current behavior with SCSS files, I think that's what everyone expects.

`@import url(file.css);` does not embed the input. I think the syntax makes it obvious that no embedding will happen here.
",pwnall,import
193,2012-07-05 23:41:51,"I suggested that to @nex3 and he had a good reason why that wouldn't work, but I've forgotten what it was.
",chriseppstein,nex3
193,2012-07-05 23:58:44,"@chriseppstein Then how about this

`@import ""file.css"";` implements the current behavior, and issues a warning recommending one of the two forms below:

`@import url(file.css);` CSS @import directive

`@import file(file.css);` embed the file; I'm not too attached to the `file` keyword, `inline` sounds just as fine to me.
",pwnall,import
193,2012-07-06 06:45:45,"@chriseppstein Sorry for being brief earlier, I was putting out the fire that issue caused.

Here is the rationale behind my request for warnings: generating `@import url` directives with relative paths is dangerous, because Chrome and Firefox resolve the URLs relative to the CSS file that contains them, whereas Internet Explorer <= 9 resolves the URLs relative to the site root. (no clue what IE 10 does). So I consider that silently generating `@import url()` directives is an unpleasant surprise, and I hope SASS will do better.
",pwnall,import
193,2012-07-06 11:30:29,"For developers reading this page because they've run into this issue and need a quick solution -- I have prepared two patches that implement the `@import inline(file.css)` variation on my last proposal above.

Patch for sass 3.2 (master branch): https://github.com/nex3/sass/pull/441

Patch for sass 3.1.x (stable branch): https://github.com/nex3/sass/pull/442
",pwnall,import
193,2012-07-13 19:51:47,"It's likely that when we work out the new semantics for the replacement to `@import`, we'll allow it to treat CSS files the same way it treats SCSS files. However, as long as we're using the old `@import` keyword, I don't think it's worthwhile to add an exception to make this work when it's entirely possible to just rename the CSS files.
",nex3,import
193,2012-07-13 21:55:00,"@nex3 thank you for thinking of a solution for this problem.

I think the @import treatment of .css files made sense when sass could only parse the indented syntax (.sass files), but is currently a nasty surprise. Sass is a really well thought-out and refined language, so I believe most folks were / will be rather surprised by @import's special casing of files that end in "".css"".

I felt backstabbed, because emitting an ""@import url()"" directive based on what's likely to be a filesystem path will result in code doesn't work across browsers, and I'm used to having sass work on my side, and helping me write good CSS. I really think that only ""@import url(x)"" should emit a url directive.

Last, the requirement to rename files adds friction when dealing with 3rd party code -- I think it's not unreasonable for developers to aim to minimize the modifications to such code. Renaming can add extra hassle when merging in-house changes with upstream changes, and makes it harder to track a file's origin by googling its name.

One of the big benefits of sass is that it lets me organize my css as I wish on the server, and still serve a single file to browsers. The special handling of .css files breaks this promise a bit.

In closing, thank you very much for taking a look at `@import`. I've come to rely heavily on sass, and it broke my heart when it screwed me over and caused to me break a site. I look forward to seeing this wrinkle go away.
",pwnall,import
193,2012-07-13 22:26:28,"> I think the @import treatment of .css files made sense when sass could only parse the indented syntax (.sass files), but is currently a nasty surprise. Sass is a really well thought-out and refined language, so I believe most folks were / will be rather surprised by @import's special casing of files that end in "".css"".

It's very important that SCSS be a superset of plain CSS. As such, we're locked in to treating plain-CSS `@import` directives the same way they're treated in plain CSS. It's unfortunate that we decided to re-use the name `@import`, which is something that's on our roadmap to fix, but we can't change the semantics as long as we have the same name.

> I felt backstabbed, because emitting an ""@import url()"" directive based on what's likely to be a filesystem path will result in code doesn't work across browsers, and I'm used to having sass work on my side, and helping me write good CSS. I really think that only ""@import url(x)"" should emit a url directive.

I hadn't realized that IE treated `url()` imports in a non-standard manner. In that case, it's definitely worth preserving the format that the user used originally, or possibly just never emitting `url()` for CSS imports.

> Last, the requirement to rename files adds friction when dealing with 3rd party code -- I think it's not unreasonable for developers to aim to minimize the modifications to such code. Renaming can add extra hassle when merging in-house changes with upstream changes, and makes it harder to track a file's origin by googling its name.

I understand that there is a non-zero amount of effort involved in renaming files, which is why importing plain CSS is a use case we have in mind for the next-generation import mechanism. But it's not something we can afford to change for the current-generation `@import`.
",nex3,import
193,2013-11-17 13:09:01,"TL:DR. Don't bother reading. I'm not sure anymore if this is an optimal idea. Especially if a next-generation @import is in the works.

How about adding a new type of file, similar to partials but prefixed with `__` two underscores, e.g. **`__vendor.scss`**

Such file would function exactly the same way as you'd expect a normal `_partial.scss` to do, except for having a different @import mechanism, namely, _embedding_ the contents of referenced CSS @imports.

Say you have a `__vendor.scss` file with some normal Sass styles and a couple of at-rules referencing CSS files from third parties. Then you have a `main.scss` file where you `@import ""vendor"";`: In the resulting `main.css` output, all Sass styles from `__vendor.scss` gets embedded, _as well as_ styles from the sheets that was referenced by `__vendor.scss`.

This way you eliminate any confusion for those who'd expect nothing but the standard workings of CSS (@import resulting in multiple requests). While those looking for improved maintainability and speed can embed things however they want, just adding one extra underscore in partials.
",hced,imports
193,2013-11-17 13:09:01,"TL:DR. Don't bother reading. I'm not sure anymore if this is an optimal idea. Especially if a next-generation @import is in the works.

How about adding a new type of file, similar to partials but prefixed with `__` two underscores, e.g. **`__vendor.scss`**

Such file would function exactly the same way as you'd expect a normal `_partial.scss` to do, except for having a different @import mechanism, namely, _embedding_ the contents of referenced CSS @imports.

Say you have a `__vendor.scss` file with some normal Sass styles and a couple of at-rules referencing CSS files from third parties. Then you have a `main.scss` file where you `@import ""vendor"";`: In the resulting `main.css` output, all Sass styles from `__vendor.scss` gets embedded, _as well as_ styles from the sheets that was referenced by `__vendor.scss`.

This way you eliminate any confusion for those who'd expect nothing but the standard workings of CSS (@import resulting in multiple requests). While those looking for improved maintainability and speed can embed things however they want, just adding one extra underscore in partials.
",hced,import
193,2014-02-18 10:55:59,"I read in the 3.2 documentation this is implemented but it doesn't seem to work!! 
Can anyone explain if this is actually working or not?

I'm using Bower to pull in third party libraries so manually changing .css files to .scss is error prone and full of risk that css may be missed. Manual processes always lead to issues due to human error.

Using package managers such as Bower is very popular with front end technologies now so I will not be the only one facing this problem.

TAKEN FROM DOCUMENTATION:

http://sass-lang.com/documentation/file.SASS_CHANGELOG.html#css__directives

CSS @import Directives

Sass is now more intelligent about when to compile @import directives to plain CSS. Any of the following conditions will cause a literal CSS @import:

Importing a path with a .css extension (e.g. @import ""foo.css"").
Importing a path with a media type (e.g. @import ""foo"" screen;).
Importing an HTTP path (e.g. @import ""http://foo.com/style.css"").
Importing any URL (e.g. @import url(foo)).
The former two conditions always worked, but the latter two are new.
",darrenhaken,import
193,2014-02-19 03:56:05,"@singleseeker Sorry, to the best of my knowledge there's still no way to force Sass to include the contents of a .css file instead of generating an @import CSS directive. In #442, I volunteered to implement the syntax that the Sass maintainers come up with. I'm afraid there's nothing else I can do to push this forward.
",pwnall,import
193,2014-05-24 22:35:17,"I think it would be more appropriate to dynamically import all CSS files as sass as default.

I mean the likelihood, to use sass and still require a CSS import, is very small. As a developer I would naturally want the code to part of the same style file.

Having 4 options to choose from as an output. I believe idea would be more prudent to use a sass feature to retain a CSS import by choice otherwise include it. Then output as desired.

Example: !css at the end of the import. Or @import-css ..

The time I have wasted to use either a grunt plugin or changing the file by adding an underscore + .scss is cumbersome.

Just my 2 cents..

Sent from my iPhone 5

> On 24 May 2014, at 22:45, Thomas Collardeau notifications@github.com wrote:
> 
> +1
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",Ne-Ne,import-css
193,2014-05-29 14:01:23,"LESS has this functionality with @import (inline) I'm surprised SASS doesn't. For this reason alone i'd have to recommend using LESS.
",pixeldrew,import
193,2014-06-21 10:18:04,"Seriously... <code>@import-css ""mycssfile"";</code> how difficult can it be? (Or anything along those lines.)

Please can this be implemented in some shape or form.

I love SASS, but this is one thing that blows my mind every time I need to use a third party plain CSS file (be it via bower or manual). Why should I need to do a trivial rename, when I can just have a trivial import rule? Renaming files (however trivial a task this might be) is in no way a viable solution when using bower!
",caweidmann,import-css
193,2014-06-21 22:51:35,"I've said everything that needs to be said about this issue, and I'm getting tired of receiving notifications from it, so I'm locking it. This will be supported when we revamp the `@import` syntax, and no sooner.
",nex3,import
192,2011-10-07 10:59:50,"In the documentation SASS specifies it avoids creating useless selectors (e.g. #main#footer) when using extend. But I've been coming across things like

div html {

}

Should some rules for placing of special tags such as html and body be added to the @extend feature?
",wheresrhys,extend
192,2011-10-10 10:07:33,"In that case, maybe this should be a feature request: for SASS to be configurable to treat html as a special selector if the user wants it (and maybe this should be the default setting). 

Putting classes on the html tag is so common these days, and those classes are often to apply generic styles to be inherited by other elements, so being able to use @extend on the html selector without risking lots of useless selectors being added to the stylesheet would be of great benefit I think.
",wheresrhys,extend
191,2011-10-07 10:52:07,"

results in e.g.



I would not expect "".sel3 .sel2 .sel4"" to be included in the generated selector as I intend to extend "".sel3 .sel4"". Furthermore, it seems to go against the text in the documentation ""@extend works by inserting the extending selector (e.g. .seriousError) anywhere in the stylesheet that the extended selector (.e.g .error) appears."", i.e. without the extend rule the stylesheet woudl be



So with the extend rule it should be


",wheresrhys,extend
189,2011-10-06 23:17:58,"It looks like for some reason the file isn't getting loaded as UTF-8. This is likely either because `Encoding.default_external` isn't set to UTF-8, or because Tilt is purposely ignoring the default external encoding for its own reasons.

There is a workaround available: if you put `@charset ""UTF-8"";` at the top of your file, Sass will interpret it as UTF-8 regardless of what the String's encoding is marked as.

In any case, this isn't a Sass bug, so I'm closing the issue.
",nex3,charset
189,2012-05-09 20:55:24,"I fixed this by putting a unicode character (http://unicodesnowmanforyou.com/) in a comment in the file that has the `@import` statements.
",smith,import
189,2013-02-21 23:47:53,"Important note for those who find this page down the line: the suggested `@charset UTF-8` at the top of the file doesn't work as written.  Instead you need to add `@charset ""UTF-8"";`.  Be sure to use the `""` character instead of the `'` character, as my version of sass still didn't work with the single quote.
",wadetandy,charset
189,2014-12-04 17:44:53,"Note: you have to put the `@charset ""UTF-8"";` declaration into the topmost file, even if that file doesn't contain UTF-8 characters just `@import`s the ones that have. Putting them into the imported ones doesn't seem to have any effect
",sztupy,charset
189,2014-12-04 17:44:53,"Note: you have to put the `@charset ""UTF-8"";` declaration into the topmost file, even if that file doesn't contain UTF-8 characters just `@import`s the ones that have. Putting them into the imported ones doesn't seem to have any effect
",sztupy,import
188,2011-10-06 09:59:12,"The @each directive in the following statement leads to an SyntaxError: `Illegal nesting: Only properties may be nested beneath properties.`:



This worked in 3.1.7 and breaks in 3.1.8.

As a workaround, you can write:



Well, it is not a big issue. I clearly prefer the former notation though. Nesting the directive under the margin property tells stylesheet readers that they do not have to ""evaluate"" this non-trivial statement if they are not interested in margins right now.
",ChristianPeters,each
183,2015-11-11 20:14:12,"@dustindowell22 agreed
",CathyMacars,dustindowell22
181,2011-09-30 12:23:28,"> I agree that ""updating"" should be changed to ""updated"" now that these are run after the stylesheet is created. Be sure to alias #on_updating_stylesheet, though.

Hmm. I think the only clean way of doing this (without a hard cut) is to leave the old callback with its old behavior and extend it with a deprecation warning. Aliasing the old callback with the new one could lead to unexpected behavior. I won't write into the deprecation warning: ""Hey, this callback is deprecated... actually, it does something different now, which might lead to confusing results!""

So, despite @chriseppstein's concerns about adding another callback, this is what I am going to do now. In difference to  https://github.com/nex3/sass/pull/151, I am going to add a deprecation warning to **updating_stylesheets**, though.
",ChristianPeters,chriseppstein
180,2011-09-28 12:10:14,"My rails app A contains an railtie engine E which uses Compass (and thus, Sass). Both engine and rails app contain sass templates in folders named _app/stylesheets_. The folder belonging to the engine is not below the Rails.root directory of the rails app.

So we'll find:

some/directory/A ( <= this is Rails.root )
- app/stylesheets

some/directory/E
- app/stylesheets

Sass (and Compass) project_dir is Rails.root. During setup, my engine uses `Sass::Plugin.add_template_location` to add the extra directories containing templates to the list of compilable templates. The code can be seen at https://gist.github.com/1247187 It works as expected, as far as resolvability of templates is concerned.

Unfortunately, `Sass::Importers::Filesystem#mtime(name, options)` fails for all names that are outside of Rails.root. I've tracked it down to `find_real_file(@root, name)` which fails because
- dir is not ""."" but a full path pointing to Rails.root
- name contains a full path, too
- remove_root fails because name doesn't start with Rails.root
- concatenation of dir/name isn't a valid path
- Dir[path] is empty

All this makes Sass believe that there's no valid cache. In the end, all templates outside of Rails.root will be recompiled upon every request.
",datenimperator,root
170,2011-09-16 13:12:16,"Thought I'd play around with the alpha tonight and noticed that when I try to import files with mixins that have @content I get an error about the mixin not supporting @content. Here's a simple example made with 2 files

Our media.scss file



Then the other file that imports it.



Interestingly, that mobile mixin there will throw an error with or without a content block added to it, but it will work if there are no styles within the content block.

Tested using 3.2.0.alpha.21.
",anthonyshort,content
168,2011-09-13 17:02:24,"I only included the complexity because he mentioned third party css earlier, which I can understand not wanting to modify. A symlink rather than rename would still allow `@import` to include the content rather than compile to a css import statement... Unless I'm talking out of my ass and it checks for the css file first. 
",ttilley,import
167,2011-09-11 00:24:18,"This patch allows passing a ruleset to mixins for placement by the new `@children` directive. It is useful when abstracting a concept associated with selectors or directives.
",chriseppstein,children
167,2011-09-11 21:13:56,"Here's a gist where I first explored this concept. some of the comments there might be relevant: https://gist.github.com/407318

In particular, @hagenburger suggested using `@content` instead of `@children`.

I like `@content` but I'm worried that it might get used by the w3c someday.
",chriseppstein,hagenburger
167,2011-09-11 21:13:56,"Here's a gist where I first explored this concept. some of the comments there might be relevant: https://gist.github.com/407318

In particular, @hagenburger suggested using `@content` instead of `@children`.

I like `@content` but I'm worried that it might get used by the w3c someday.
",chriseppstein,content
167,2011-09-11 21:13:56,"Here's a gist where I first explored this concept. some of the comments there might be relevant: https://gist.github.com/407318

In particular, @hagenburger suggested using `@content` instead of `@children`.

I like `@content` but I'm worried that it might get used by the w3c someday.
",chriseppstein,children
167,2011-09-11 21:46:10,"My favorite is `@yield`, but I would prefer `@children` over `@content`.
",smt,yield
167,2011-09-11 21:46:10,"My favorite is `@yield`, but I would prefer `@children` over `@content`.
",smt,content
167,2011-09-11 21:46:10,"My favorite is `@yield`, but I would prefer `@children` over `@content`.
",smt,children
167,2011-09-11 23:19:28,"Awesome!

In the context of `@keyframes`, I think it makes more sense to name the feature `@content` over `@children` (If I understand the syntax correctly):



`@yield` is interesting though...
",doctyper,keyframes
167,2011-09-11 23:19:28,"Awesome!

In the context of `@keyframes`, I think it makes more sense to name the feature `@content` over `@children` (If I understand the syntax correctly):



`@yield` is interesting though...
",doctyper,content
167,2011-09-11 23:19:28,"Awesome!

In the context of `@keyframes`, I think it makes more sense to name the feature `@content` over `@children` (If I understand the syntax correctly):



`@yield` is interesting though...
",doctyper,yield
167,2011-09-11 23:19:28,"Awesome!

In the context of `@keyframes`, I think it makes more sense to name the feature `@content` over `@children` (If I understand the syntax correctly):



`@yield` is interesting though...
",doctyper,children
167,2011-09-11 23:25:08,"Ah yes, this is a great use for `@keyframes`!
",chriseppstein,keyframes
167,2011-09-12 20:12:54,"I think we should go for `@content`, with the usual assumption that the w3c moves slowly enough that we can migrate the syntax to avoid a conflict should they add support for it.
",nex3,content
166,2011-09-08 15:20:41,"It would be great to be able to do this (using pseudo-syntax since I'm still researching SASS):

$theImage = '/img/the-image.png';
$theImageDataUri = @data-uri('/img/the-image.png');

.old-and-busted .doodad {
background: url($theImage);
}

.new-hotness .doodad {
background: url($theImageDataUri);
}

Semantics and philosophy aside as to detecting and handling browsers which don't support datauris, this could be a great way to cut down on http requests and simplify an advanced feature of css.

Extra credit for adding a test for image size so you can do a fallback in IE8 when the data uri would exceed 32kb. :)
",barkan,data-uri
166,2011-09-09 00:11:59,"This is the sort of thing that belongs in an extension to Sass, such as Compass. In fact, Compass may already support it; @chriseppstein?
",nex3,chriseppstein
166,2011-09-09 00:54:01,"Yep. It's in compass and it's called inline-image(). 

http://compass-style.org/reference/compass/helpers/inline-data/

Hunt & pecked on my iPhone... Sorry if it's brief!

On Sep 8, 2011, at 5:11 PM, Nathan Weizenbaumreply@reply.github.com wrote:

> This is the sort of thing that belongs in an extension to Sass, such as Compass. In fact, Compass may already support it; @chriseppstein?
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/166#issuecomment-2046647
",chriseppstein,chriseppstein
165,2011-09-05 23:59:30,"It's also worth noting that the correct way to do conditional blocks in Sass is to use an `@if` directive with a variable. For example:



Then in `style-ie6.scss` you define `$ie6: true`, for example.
",nex3,if
164,2011-09-03 15:24:47,"You have to use #{$num}

On Sep 2, 2011, at 9:02 PM, neaglereply@reply.github.com wrote:

> It looks like variables don't work inside CSS nth-selector in. Example:
> 
>    $num: 2;
>        b:nth-child( $num ) {
>    }
> 
> This will produce the following error:
> 
> **Syntax error: Invalid CSS after ""b:nth-child( "": expected expression (e.g. fr, 2n+1), was ""$num ) {""**
> 
> I made the above example simple to the point of uselessness. If you'd like to know why I'd want to use a variable in an nth- selector, here's a second example:
> 
>    @for $i from 1 to $circles {
>        #circles b:nth-of-type( $i ) {
>              /\* Some styling */
>        }
>    }
> 
> Please let me know if I can provide any more detail!
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/164
",chriseppstein,for
163,2011-09-09 00:15:15,"I'm assigning this to @chriseppstein, since he knows more about Rails integration than I do at this point.
",nex3,chriseppstein
163,2011-09-16 14:27:33,"This is neither sass-rails nor sprocket's problem specifically.

The @import feature in SASS specifically looks for files named ""filename.scss"", but should instead look for ""filename*.scss"". See: https://github.com/nex3/sass/blob/master/lib/sass/importers/filesystem.rb#L92
",krainboltgreene,import
161,2011-08-31 01:03:31,"https://gist.github.com/1182542

Sass adds line breaks that weren't in the source (seen on line 18 and 27) which breaks the visual grouping desired by the original author (@simplebits).
",chriseppstein,simplebits
160,2011-08-30 18:07:52,"/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/tree/node.rb:72:
  warning: method redefined; discarding old children=
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/script/parser.rb:233:
  warning: literal in condition
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/script/parser.rb:246:
  warning: literal in condition
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass.rb:30:
  warning: redefine compile
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass.rb:54:
  warning: redefine compile_file
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:126: warning:
  instance variable @functions not initialized
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:38: warning:
  instance variable @options not initialized
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:126: warning:
  instance variable @functions not initialized
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:38: warning:
  instance variable @options not initialized
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:126: warning:
  instance variable @functions not initialized
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:38: warning:
  instance variable @options not initialized
[...]

(My code is not very relevant I guess.)

Probably best to make sure to always run with -w during dev and testing.
",tobireif,options
160,2011-08-30 18:07:52,"/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/tree/node.rb:72:
  warning: method redefined; discarding old children=
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/script/parser.rb:233:
  warning: literal in condition
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/script/parser.rb:246:
  warning: literal in condition
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass.rb:30:
  warning: redefine compile
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass.rb:54:
  warning: redefine compile_file
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:126: warning:
  instance variable @functions not initialized
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:38: warning:
  instance variable @options not initialized
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:126: warning:
  instance variable @functions not initialized
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:38: warning:
  instance variable @options not initialized
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:126: warning:
  instance variable @functions not initialized
/Library/Ruby/Gems/1.8/gems/sass-3.1.7/lib/sass/../sass/environment.rb:38: warning:
  instance variable @options not initialized
[...]

(My code is not very relevant I guess.)

Probably best to make sure to always run with -w during dev and testing.
",tobireif,functions
157,2011-08-17 08:33:03,"The staleness checker used the filename of the sass_options from the importer as the cache key. Normally this is not a problem, since `imported_filename` and `:filename` are the same when importing regular files (`@import ""foobar"";`)

Compass uses ""magic"" syntax for the sprite generation, though:



which leads to `importer.options[:filename] = ""icon""` (the SpriteImporter returns its own `@name`), but `importer.imported_filename = ""icon/*.png""`. Using the :filename for caching breaks on the next load because then the StalenessChecker asks Compass::SpriteEngine to load ""icon"", which the SpriteEngine promptly denies because it does not match the expected format of ""icon/*.png"", so it returns nil, and then to_tree breaks in compute_dependencies.
",moeffju,name
157,2011-08-17 08:33:03,"The staleness checker used the filename of the sass_options from the importer as the cache key. Normally this is not a problem, since `imported_filename` and `:filename` are the same when importing regular files (`@import ""foobar"";`)

Compass uses ""magic"" syntax for the sprite generation, though:



which leads to `importer.options[:filename] = ""icon""` (the SpriteImporter returns its own `@name`), but `importer.imported_filename = ""icon/*.png""`. Using the :filename for caching breaks on the next load because then the StalenessChecker asks Compass::SpriteEngine to load ""icon"", which the SpriteEngine promptly denies because it does not match the expected format of ""icon/*.png"", so it returns nil, and then to_tree breaks in compute_dependencies.
",moeffju,import
156,2011-08-15 19:17:26,"I've used Sass on a number of projects now with great success, and finally convinced my company to use it on our flagship product --- a _massive_ web application --- to make our 120,000 lines of CSS more manageable.

In doing so, I've found that there's a feature that would make for a really nice addition:  The ability to mark some files with an ""@import-once"" directive, which causes that file to be imported only once no matter how many different other files import it.

Consider this scenario:
- __SharedBaseStuff.scss_ has a bunch of base definitions.
- __FooWidget.scss_ imports __SharedBaseStuff.scss_
- __BarWidget.scss_ imports __SharedBaseStuff.scss_
- _YourPage.scss_ imports __FooWidget.scss_
- _MyPage.scss_ imports __BarWidget.scss_
- _TheirPage.scss_ imports both __FooWidget.scss_ and __BarWidget.scss_

Without doing anything else, TheirPage.css will end up with two copies of any CSS found in _SharedBaseStuff.scss, which is undesirable.  It'd be far better if inside _SharedBaseStuff.scss, you could just declare @import-once; at the top, which would ensure you only get the first copy in the output no matter how many times it's imported.  (By definition, @import-once could not be appear inside an imported file that is nested within another selector or mixin; it could only appear at the root.)

(Yes, this is a real scenario on our huge site.  In fact, our real-world scenarios are far uglier, with some .scss files able to be imported dozens of times or more by a single page's stylesheet.)

Currently, a little function like this can be used to implement a workaround:



And then used like this:



That works, but for large filesets with lots of imports, it's inefficient.  Having a simple global @import-once; directive would make this much simpler.
",seanofw,import-once
156,2011-08-15 20:02:44,"This is something we'll consider for the upcoming re-envisioning of the `@import` functionality.
",nex3,import
156,2011-08-16 04:02:26,"BTW, that @if stuff is pretty clever :) It's pretty much how C solves this problem.
",chriseppstein,if
156,2011-08-17 19:38:01,"Yah, I've done a lot of C coding, give or take a million lines. :-)

For the record, I think it's more meaningful to have the once-ness determined by the importee rather than the importer --- by the file that's being imported rather than by the file that's importing it.  @import-once is a safe construct; no matter who imports that file, they can't screw it up, because it's impossible to import that file more than once; the caller can't make a mistake.  But the suggestion in the other thread (which I missed when I searched for this topic), where you might add @require --- that suggestion allows the _caller_ to decide whether the file gets imported once or many times, which is dangerous:  If any one caller forgets and uses @import instead of @require, the imported code may end up imported more than once because of it.  I've been bit by that in other languages, and I'd rather not see the same problem repeated in Sass.
",seanofw,require
156,2011-08-17 19:38:01,"Yah, I've done a lot of C coding, give or take a million lines. :-)

For the record, I think it's more meaningful to have the once-ness determined by the importee rather than the importer --- by the file that's being imported rather than by the file that's importing it.  @import-once is a safe construct; no matter who imports that file, they can't screw it up, because it's impossible to import that file more than once; the caller can't make a mistake.  But the suggestion in the other thread (which I missed when I searched for this topic), where you might add @require --- that suggestion allows the _caller_ to decide whether the file gets imported once or many times, which is dangerous:  If any one caller forgets and uses @import instead of @require, the imported code may end up imported more than once because of it.  I've been bit by that in other languages, and I'd rather not see the same problem repeated in Sass.
",seanofw,import
156,2011-08-17 19:38:01,"Yah, I've done a lot of C coding, give or take a million lines. :-)

For the record, I think it's more meaningful to have the once-ness determined by the importee rather than the importer --- by the file that's being imported rather than by the file that's importing it.  @import-once is a safe construct; no matter who imports that file, they can't screw it up, because it's impossible to import that file more than once; the caller can't make a mistake.  But the suggestion in the other thread (which I missed when I searched for this topic), where you might add @require --- that suggestion allows the _caller_ to decide whether the file gets imported once or many times, which is dangerous:  If any one caller forgets and uses @import instead of @require, the imported code may end up imported more than once because of it.  I've been bit by that in other languages, and I'd rather not see the same problem repeated in Sass.
",seanofw,import-once
156,2012-06-08 20:29:22,"+1 for native support. I just had a specificity-override scenario where I had to implement the import-once @function above to work around it :(
",davidrivers,function
156,2012-12-18 06:35:48,"+1 for native support.  I'd like to use the above workaround for magic sprites, but the ""@include"" portion cannot live inside an @if.
",thejase,if
156,2012-12-18 06:35:48,"+1 for native support.  I'd like to use the above workaround for magic sprites, but the ""@include"" portion cannot live inside an @if.
",thejase,include
155,2013-03-13 06:33:19,"@canarymason bump
",scottkellum,canarymason
155,2013-09-01 14:51:23,"I recall @snugug mentioning this functionality was coming in 3.3. Is this closed? Is there docs or source I can reference?
",scottkellum,snugug
154,2011-08-10 21:59:49,"As per discussion in #96, `@extend` behaves in unintuitive ways when used within directives such as `@media`. Since there's no acceptable way to resolve this behavior short of browser-supported `@extend`, we'll just disallow it.

The plan is to add a deprecation warning in 3.1.x and change that to a full-on error in 3.2.
",nex3,extend
154,2011-08-10 21:59:49,"As per discussion in #96, `@extend` behaves in unintuitive ways when used within directives such as `@media`. Since there's no acceptable way to resolve this behavior short of browser-supported `@extend`, we'll just disallow it.

The plan is to add a deprecation warning in 3.1.x and change that to a full-on error in 3.2.
",nex3,media
154,2011-09-14 12:25:10,"So... no plans for non-global @extend ?
",ZeeAgency,extend
154,2011-09-14 19:45:46,"@ZeeAgency That's pretty tangential to this issue, but no, currently we don't have any concrete plans for that. We're tossing around ideas for a more advanced `@import` mechanism that may allow for file-scoped `@extend` in the future, but the details remain to be seen.
",nex3,extend
154,2011-09-14 19:45:46,"@ZeeAgency That's pretty tangential to this issue, but no, currently we don't have any concrete plans for that. We're tossing around ideas for a more advanced `@import` mechanism that may allow for file-scoped `@extend` in the future, but the details remain to be seen.
",nex3,import
154,2011-09-15 01:36:05,"As an alternative to disallowing `@extend` within `@media`, do you see any issues with duplicating the selector when used across a different media query scope and then only merge those that are scoped within the same media query? For example:



Generates:



Off-hand I can't think of scenarios in which this would behave in an unintuitive way. The processing could be smartened up further to exclude the additional reappearance of `.test` when the base class is defined outside a media query:


",gxclarke,extend
154,2011-09-15 01:36:05,"As an alternative to disallowing `@extend` within `@media`, do you see any issues with duplicating the selector when used across a different media query scope and then only merge those that are scoped within the same media query? For example:



Generates:



Off-hand I can't think of scenarios in which this would behave in an unintuitive way. The processing could be smartened up further to exclude the additional reappearance of `.test` when the base class is defined outside a media query:


",gxclarke,media
154,2012-04-19 21:32:05,"@scottkellum we need to make the case for getting @extend in browsers.
",chriseppstein,extend
154,2012-04-19 21:40:09,"@chriseppstein This stuff seriously changed the way I write code (wrote an unpublished article and framework about this). File size seems better when preprocessing @extend although native mixins would do wonders for CSS size.
",scottkellum,extend
154,2012-04-20 20:28:49,"To push just a little harder to why I think this is such an important, here is an excerpt from an article I am working on explaining how @extend is saving me tons of K on file size when used correctly. Basically nothing is written unless it is used and @extend on @media is the crux of my responsive mobile first workflow with no fixed breakpoints:
https://gist.github.com/2430955

When used improperly @extend can add a _lot_ of code, but it is helping me keep my file size way down.

Because the actual base CSS objects are never written to save space, there would be nothing to extend inside media queries making this implementation impossible outside of preprocessors. From this mobile first approach almost every use of @extend will exist inside of a media query and the original object never written to the CSS.

In practice incredibly complex operations can be done that write very little code: https://github.com/scottkellum/Singularity

OK, done pushing, would love to help figure out the logic if that is whats needed :)
",scottkellum,extend
154,2012-04-20 20:28:49,"To push just a little harder to why I think this is such an important, here is an excerpt from an article I am working on explaining how @extend is saving me tons of K on file size when used correctly. Basically nothing is written unless it is used and @extend on @media is the crux of my responsive mobile first workflow with no fixed breakpoints:
https://gist.github.com/2430955

When used improperly @extend can add a _lot_ of code, but it is helping me keep my file size way down.

Because the actual base CSS objects are never written to save space, there would be nothing to extend inside media queries making this implementation impossible outside of preprocessors. From this mobile first approach almost every use of @extend will exist inside of a media query and the original object never written to the CSS.

In practice incredibly complex operations can be done that write very little code: https://github.com/scottkellum/Singularity

OK, done pushing, would love to help figure out the logic if that is whats needed :)
",scottkellum,media
154,2012-05-17 21:34:19,"I also think you should be able to use placeholders and @extend in media queries _as long_ as the placeholders have been defined in said media query. When you think about it, it makes sense : media queries create a sort of frame ‚Äî a different environnement, while in the same CSS.

Sass should just aknowledge that and treat the media queries as a separate environnement, and while still able to use @extend, if you'd went and try to extend a placeholder/selector that is outside the media query, it would just throw an error.
",Anahkiasen,extend
154,2012-05-18 04:33:34,"@aaronjensen unfortunately I would like to reuse the same grid objects throughout the breakpoints fluidly instead of generating a set of objects for each breakpoint.

Also, extending from within the `@media` directive with the rest of your styles results in cleaner CSS output. These directives add a fair amount of weight to a page and the goal is to write one for each breakpoint. Excessive media bubbling can result in duplicate `@media` declarations.
",scottkellum,media
154,2012-05-18 05:27:47,"@scottkellum I'm not sure what you mean by ""Excessive media bubbling"" or ""duplicate `@media` declaration"". Could you clarify? My proposal doesn't involve any additional `@media` declarations, and it keeps all of the style about one rule in one place, so it's easier to understand.
",aaronjensen,media
151,2011-09-12 07:09:35,"I don't understand why @nex3 chose to fire the event before the file was written. Having both seems unnecessary. Can we just move when the `updating_stylesheet` event runs to ensure the file has been written?
",chriseppstein,nex3
151,2011-10-16 17:57:36,"@nex3 any preference here?
",chriseppstein,nex3
147,2012-08-08 18:51:30,"@nex3 can you comment?
",chriseppstein,nex3
144,2015-09-24 19:35:26,"In [eyeglass](https://github.com/sass-eyeglass/eyeglass) I use `@import` to declare dependencies on assets.

Depends on #739
",chriseppstein,import
141,2011-07-23 15:04:07,"i think it's currently impossible to do this:

<pre>
   @mixin anything($color: $default-color-dark) {
  background-color: $color;
}
</pre>


It gives me an error on the include.

I don't see too much reason for default values, when they don't accept other variables.

Am I missing something?
",devolute,mixin
139,2011-07-15 16:56:45,"We need a way to import library files just a single time. The `@import` statement is basically like ruby's `load` directive, but I think we need an import with ruby's `require` semantics (does nothing if it's been imported already).

What do you think about `@depend`?
",chriseppstein,depend
139,2011-07-15 16:56:45,"We need a way to import library files just a single time. The `@import` statement is basically like ruby's `load` directive, but I think we need an import with ruby's `require` semantics (does nothing if it's been imported already).

What do you think about `@depend`?
",chriseppstein,import
139,2011-08-17 19:42:07,"Copying my proposal from the other thread:  I propose adding an @import-once directive that can be dropped into the imported file, as the first statement in that file.  It takes no parameters:

`@import-once;`

This is a safer directive than the @import-vs-@require solution, since it ensures that the imported file can't be accidentally imported wrong; if it was designed to be imported only once, it can assert that itself, and a caller need not know its behavior to be able to use it correctly.
",seanofw,require
139,2011-08-17 19:42:07,"Copying my proposal from the other thread:  I propose adding an @import-once directive that can be dropped into the imported file, as the first statement in that file.  It takes no parameters:

`@import-once;`

This is a safer directive than the @import-vs-@require solution, since it ensures that the imported file can't be accidentally imported wrong; if it was designed to be imported only once, it can assert that itself, and a caller need not know its behavior to be able to use it correctly.
",seanofw,import-vs-
139,2011-08-17 19:42:07,"Copying my proposal from the other thread:  I propose adding an @import-once directive that can be dropped into the imported file, as the first statement in that file.  It takes no parameters:

`@import-once;`

This is a safer directive than the @import-vs-@require solution, since it ensures that the imported file can't be accidentally imported wrong; if it was designed to be imported only once, it can assert that itself, and a caller need not know its behavior to be able to use it correctly.
",seanofw,import-once
139,2011-08-18 14:43:47,"Oh, the other thing in the other thread:  If anybody needs it, I have a cute workaround involving adding a @function and an @if statement in the right places; it produces results that are very much like @import-once would produce.  It's not perfect, but it _does_ work.  You can find my solution here:  https://github.com/nex3/sass/issues/156
",seanofw,function
139,2011-08-18 14:43:47,"Oh, the other thing in the other thread:  If anybody needs it, I have a cute workaround involving adding a @function and an @if statement in the right places; it produces results that are very much like @import-once would produce.  It's not perfect, but it _does_ work.  You can find my solution here:  https://github.com/nex3/sass/issues/156
",seanofw,if
139,2011-08-18 14:43:47,"Oh, the other thing in the other thread:  If anybody needs it, I have a cute workaround involving adding a @function and an @if statement in the right places; it produces results that are very much like @import-once would produce.  It's not perfect, but it _does_ work.  You can find my solution here:  https://github.com/nex3/sass/issues/156
",seanofw,import-once
139,2011-09-29 17:26:55,"+1 for @depend
",ZeeAgency,depend
139,2011-09-30 14:48:48,"@chriseppstein:  The best example I can give is a diamond-style dependency pattern, which occurs in larger software.

So let's say you have these four files in a big system that's been well-factored into small units:
- _DropDownMenu.scss
- _CarModelPicker.scss:  @import ""DropDownMenu"";
- _ColorPicker.scss:  @import ""DropDownMenu"";
- FindACarPage.scss:  @import ""CarModelPicker""; @import ""ColorPicker"";

So ""DropDownMenu"" has the stylings for general, shared dropdown menus that appear when somebody clicks a dropdown button.  ""CarModelPicker"" is the layout for a frequently-reused blob of markup that, say, lets a user choose a car by its year and make and model, and that markup contains dropdown menus.  ""ColorPicker"" is the layout for a frequently-reused blob of markup that lets a user choose a color, and that markup also contains dropdown menus.  Finally, the ""FindACar"" page displays both a model-picker and a color-picker to let a user find a car.

See the problem?  On the ""FindACar"" page, if you don't design ""DropDownMenu"" to be imported only once, you'll get the same dropdown-menu CSS generated twice --- two different places in the same resulting FindACar.css file.  You don't need to use @mixins or anything fancier than @import to demonstrate the problem.

In a large system where the CSS has been heavily sliced-and-diced like this --- like our flagship application with 1.2 million lines of code in it --- the @imports of a single page can end up both broad and deep.  It's possible for the same page to unknowingly import, say, ""_Links.scss"" twenty times, because from the page's perspective, it's listing out its dependencies, and each of those dependencies are listing theirs, and so on until you get to a few base styles that nearly everybody needs.

For a small application, this isn't an issue anyone would notice; but for a big application like ours, avoiding redundant imports is absolutely critical.
",seanofw,imports
139,2011-09-30 14:48:48,"@chriseppstein:  The best example I can give is a diamond-style dependency pattern, which occurs in larger software.

So let's say you have these four files in a big system that's been well-factored into small units:
- _DropDownMenu.scss
- _CarModelPicker.scss:  @import ""DropDownMenu"";
- _ColorPicker.scss:  @import ""DropDownMenu"";
- FindACarPage.scss:  @import ""CarModelPicker""; @import ""ColorPicker"";

So ""DropDownMenu"" has the stylings for general, shared dropdown menus that appear when somebody clicks a dropdown button.  ""CarModelPicker"" is the layout for a frequently-reused blob of markup that, say, lets a user choose a car by its year and make and model, and that markup contains dropdown menus.  ""ColorPicker"" is the layout for a frequently-reused blob of markup that lets a user choose a color, and that markup also contains dropdown menus.  Finally, the ""FindACar"" page displays both a model-picker and a color-picker to let a user find a car.

See the problem?  On the ""FindACar"" page, if you don't design ""DropDownMenu"" to be imported only once, you'll get the same dropdown-menu CSS generated twice --- two different places in the same resulting FindACar.css file.  You don't need to use @mixins or anything fancier than @import to demonstrate the problem.

In a large system where the CSS has been heavily sliced-and-diced like this --- like our flagship application with 1.2 million lines of code in it --- the @imports of a single page can end up both broad and deep.  It's possible for the same page to unknowingly import, say, ""_Links.scss"" twenty times, because from the page's perspective, it's listing out its dependencies, and each of those dependencies are listing theirs, and so on until you get to a few base styles that nearly everybody needs.

For a small application, this isn't an issue anyone would notice; but for a big application like ours, avoiding redundant imports is absolutely critical.
",seanofw,mixins
139,2011-09-30 14:48:48,"@chriseppstein:  The best example I can give is a diamond-style dependency pattern, which occurs in larger software.

So let's say you have these four files in a big system that's been well-factored into small units:
- _DropDownMenu.scss
- _CarModelPicker.scss:  @import ""DropDownMenu"";
- _ColorPicker.scss:  @import ""DropDownMenu"";
- FindACarPage.scss:  @import ""CarModelPicker""; @import ""ColorPicker"";

So ""DropDownMenu"" has the stylings for general, shared dropdown menus that appear when somebody clicks a dropdown button.  ""CarModelPicker"" is the layout for a frequently-reused blob of markup that, say, lets a user choose a car by its year and make and model, and that markup contains dropdown menus.  ""ColorPicker"" is the layout for a frequently-reused blob of markup that lets a user choose a color, and that markup also contains dropdown menus.  Finally, the ""FindACar"" page displays both a model-picker and a color-picker to let a user find a car.

See the problem?  On the ""FindACar"" page, if you don't design ""DropDownMenu"" to be imported only once, you'll get the same dropdown-menu CSS generated twice --- two different places in the same resulting FindACar.css file.  You don't need to use @mixins or anything fancier than @import to demonstrate the problem.

In a large system where the CSS has been heavily sliced-and-diced like this --- like our flagship application with 1.2 million lines of code in it --- the @imports of a single page can end up both broad and deep.  It's possible for the same page to unknowingly import, say, ""_Links.scss"" twenty times, because from the page's perspective, it's listing out its dependencies, and each of those dependencies are listing theirs, and so on until you get to a few base styles that nearly everybody needs.

For a small application, this isn't an issue anyone would notice; but for a big application like ours, avoiding redundant imports is absolutely critical.
",seanofw,import
139,2012-04-03 22:46:11,"What about `@import ""stuff"" !once;` ?
",MoOx,import
139,2012-10-24 22:06:16,"Having to include `@import-once;` in the importee would theoretically reduce the points of possible failure, but it also has the (in my opinion, huge) downside of making the behavior of `@import` inconsistent. The developer importing files now has to know whether or not the files they're importing expect to be imported once or N times.

I like `@depend` because it conveys a dependency, which I believe is the main use case for this feature. When I see `@require` I think of PHP's [require](http://www.php.net/manual/en/function.require.php) function, which does not convey onceness (but that‚Äôs probably just because I‚Äôm not a Ruby guy :P).

I‚Äôm curious, what are some example use cases for importing files multiple times? I‚Äôve worked on large and small projects and this was never something I or my team wanted. Would you consider changing the `@import` directive itself to always import once?
",zakness,depend
139,2012-10-24 22:06:16,"Having to include `@import-once;` in the importee would theoretically reduce the points of possible failure, but it also has the (in my opinion, huge) downside of making the behavior of `@import` inconsistent. The developer importing files now has to know whether or not the files they're importing expect to be imported once or N times.

I like `@depend` because it conveys a dependency, which I believe is the main use case for this feature. When I see `@require` I think of PHP's [require](http://www.php.net/manual/en/function.require.php) function, which does not convey onceness (but that‚Äôs probably just because I‚Äôm not a Ruby guy :P).

I‚Äôm curious, what are some example use cases for importing files multiple times? I‚Äôve worked on large and small projects and this was never something I or my team wanted. Would you consider changing the `@import` directive itself to always import once?
",zakness,require
139,2012-10-24 22:06:16,"Having to include `@import-once;` in the importee would theoretically reduce the points of possible failure, but it also has the (in my opinion, huge) downside of making the behavior of `@import` inconsistent. The developer importing files now has to know whether or not the files they're importing expect to be imported once or N times.

I like `@depend` because it conveys a dependency, which I believe is the main use case for this feature. When I see `@require` I think of PHP's [require](http://www.php.net/manual/en/function.require.php) function, which does not convey onceness (but that‚Äôs probably just because I‚Äôm not a Ruby guy :P).

I‚Äôm curious, what are some example use cases for importing files multiple times? I‚Äôve worked on large and small projects and this was never something I or my team wanted. Would you consider changing the `@import` directive itself to always import once?
",zakness,import
139,2012-10-24 22:06:16,"Having to include `@import-once;` in the importee would theoretically reduce the points of possible failure, but it also has the (in my opinion, huge) downside of making the behavior of `@import` inconsistent. The developer importing files now has to know whether or not the files they're importing expect to be imported once or N times.

I like `@depend` because it conveys a dependency, which I believe is the main use case for this feature. When I see `@require` I think of PHP's [require](http://www.php.net/manual/en/function.require.php) function, which does not convey onceness (but that‚Äôs probably just because I‚Äôm not a Ruby guy :P).

I‚Äôm curious, what are some example use cases for importing files multiple times? I‚Äôve worked on large and small projects and this was never something I or my team wanted. Would you consider changing the `@import` directive itself to always import once?
",zakness,import-once
139,2013-01-18 03:35:53,"I'm with @zakness, importing a file more than once is the odd scenario. Makes more sense to me going with changing `@import` to only import once and make `@include ""filename""` include the file no matter what.
",svallory,include
139,2013-01-18 03:35:53,"I'm with @zakness, importing a file more than once is the odd scenario. Makes more sense to me going with changing `@import` to only import once and make `@include ""filename""` include the file no matter what.
",svallory,import
139,2013-01-29 10:30:57,"+1 for this feature like `@import-once`,  because when you import a `extend-only` class multiple times( by mistake... ) , than it will be compiled multiple times... which is exactly not what we want.
",neekey,import-once
139,2013-01-29 12:17:50,"@svallory except that `@include` is already a keyword for mixins in the Scss format and absolutely should not be repurposed for `@import-once` or some such.
",Snugug,include
139,2013-01-29 12:17:50,"@svallory except that `@include` is already a keyword for mixins in the Scss format and absolutely should not be repurposed for `@import-once` or some such.
",Snugug,import-once
139,2013-01-29 22:00:05,"+1 to @MoOx's suggestion: `@import 'file' !once;`
",thejase,import
139,2013-01-31 15:04:04,"@Snugug That's kinda the motive behind my suggestion. You see, mixins can be included multiple times. It's already known how `@include 'mixing'` works. So, by analogy, `@include 'file'` would work the same way. You may think conflicting files and mixin names would be a problem, but since the context is mutually exclusive, i.e. you always use a `@include mixin` inside a rule and `@include file` outside one, it shouldn't be a problem at all.  
",svallory,include
139,2013-01-31 15:17:31,"@svallory That's a dangerous, and in fact incorrect, assumption to make. Mixins absolutely do not need to be included inside a rule, and there are many _many_ ""setup"" mixins that you in fact specifically do not include inside a rule. Take, for example, [Compass' `establish-baseline` mixin](http://compass-style.org/reference/compass/typography/vertical_rhythm/#mixin-establish-baseline) which writes the selectors it needs.

Moreover, I firmly believe that the mental model behind a mixin and a file are different enough that context alone isn't a good enough indicator alone of what you mean to do, especially in the case of files that include mixins of the same name. Take a CSS Normalize file as a for instance. The logical name of the file would probably `_normalize.s*ss`, and that file contains `@mixin normalize` and `@mixin normalize-legacy`. When I call `@include normalize`, what should I expect to happen? Should I expect the file to be imported again? Should it be the mixin? Both should really only be imported/used once, and both should be written at doc root (outside of a selector). 

I personally like @MoOx's `!once` suggestion as it's a common enough pattern throughout Sass that I think it's a good fit (we've got `!default` for variables and `!optional` for extends).
",Snugug,include
139,2013-01-31 15:17:31,"@svallory That's a dangerous, and in fact incorrect, assumption to make. Mixins absolutely do not need to be included inside a rule, and there are many _many_ ""setup"" mixins that you in fact specifically do not include inside a rule. Take, for example, [Compass' `establish-baseline` mixin](http://compass-style.org/reference/compass/typography/vertical_rhythm/#mixin-establish-baseline) which writes the selectors it needs.

Moreover, I firmly believe that the mental model behind a mixin and a file are different enough that context alone isn't a good enough indicator alone of what you mean to do, especially in the case of files that include mixins of the same name. Take a CSS Normalize file as a for instance. The logical name of the file would probably `_normalize.s*ss`, and that file contains `@mixin normalize` and `@mixin normalize-legacy`. When I call `@include normalize`, what should I expect to happen? Should I expect the file to be imported again? Should it be the mixin? Both should really only be imported/used once, and both should be written at doc root (outside of a selector). 

I personally like @MoOx's `!once` suggestion as it's a common enough pattern throughout Sass that I think it's a good fit (we've got `!default` for variables and `!optional` for extends).
",Snugug,mixin
139,2013-01-31 15:27:06,"The `@include` debate isn't relevant for me since I use (and will forever
use) indented Sass, but for the sake of simplicity, clarity, and
universality, `@require` seems like the right call to me.

I'm more interested in seeing this happen than I am attached to any
specific implementation or semantics though!

On Thursday, January 31, 2013, Snugug wrote:

> @svallory https://github.com/svallory That's a dangerous, and in fact
> incorrect, assumption to make. Mixins absolutely do not need to be included
> inside a rule, and there are many _many_ ""setup"" mixins that you in fact
> specifically do not include inside a rule. Take, for example, Compass'
> establish-baseline mixinhttp://compass-style.org/reference/compass/typography/vertical_rhythm/#mixin-establish-baselinewhich writes the selectors it needs.
> 
> Moreover, I firmly believe that the mental model behind a mixin and a file
> are different enough that context alone isn't a good enough indicator alone
> of what you mean to do, especially in the case of files that include mixins
> of the same name. Take a CSS Normalize file as a for instance. The logical
> name of the file would probably _normalize.s*ss, and that file contains @mixin
> normalize and @mixin normalize-legacy. When I call @include normalize,
> what should I expect to happen? Should I expect the file to be imported
> again? Should it be the mixin? Both should really only be imported/used
> once, and both should be written at doc root (outside of a selector).
> 
> I personally like @MoOx https://github.com/MoOx's !once suggestion as
> it's a common enough pattern throughout Sass that I think it's a good fit
> (we've got !default for variables and !optional for extends).
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/139#issuecomment-12947011.
",arbales,require
139,2013-01-31 15:27:06,"The `@include` debate isn't relevant for me since I use (and will forever
use) indented Sass, but for the sake of simplicity, clarity, and
universality, `@require` seems like the right call to me.

I'm more interested in seeing this happen than I am attached to any
specific implementation or semantics though!

On Thursday, January 31, 2013, Snugug wrote:

> @svallory https://github.com/svallory That's a dangerous, and in fact
> incorrect, assumption to make. Mixins absolutely do not need to be included
> inside a rule, and there are many _many_ ""setup"" mixins that you in fact
> specifically do not include inside a rule. Take, for example, Compass'
> establish-baseline mixinhttp://compass-style.org/reference/compass/typography/vertical_rhythm/#mixin-establish-baselinewhich writes the selectors it needs.
> 
> Moreover, I firmly believe that the mental model behind a mixin and a file
> are different enough that context alone isn't a good enough indicator alone
> of what you mean to do, especially in the case of files that include mixins
> of the same name. Take a CSS Normalize file as a for instance. The logical
> name of the file would probably _normalize.s*ss, and that file contains @mixin
> normalize and @mixin normalize-legacy. When I call @include normalize,
> what should I expect to happen? Should I expect the file to be imported
> again? Should it be the mixin? Both should really only be imported/used
> once, and both should be written at doc root (outside of a selector).
> 
> I personally like @MoOx https://github.com/MoOx's !once suggestion as
> it's a common enough pattern throughout Sass that I think it's a good fit
> (we've got !default for variables and !optional for extends).
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/139#issuecomment-12947011.
",arbales,include
139,2013-01-31 15:27:06,"The `@include` debate isn't relevant for me since I use (and will forever
use) indented Sass, but for the sake of simplicity, clarity, and
universality, `@require` seems like the right call to me.

I'm more interested in seeing this happen than I am attached to any
specific implementation or semantics though!

On Thursday, January 31, 2013, Snugug wrote:

> @svallory https://github.com/svallory That's a dangerous, and in fact
> incorrect, assumption to make. Mixins absolutely do not need to be included
> inside a rule, and there are many _many_ ""setup"" mixins that you in fact
> specifically do not include inside a rule. Take, for example, Compass'
> establish-baseline mixinhttp://compass-style.org/reference/compass/typography/vertical_rhythm/#mixin-establish-baselinewhich writes the selectors it needs.
> 
> Moreover, I firmly believe that the mental model behind a mixin and a file
> are different enough that context alone isn't a good enough indicator alone
> of what you mean to do, especially in the case of files that include mixins
> of the same name. Take a CSS Normalize file as a for instance. The logical
> name of the file would probably _normalize.s*ss, and that file contains @mixin
> normalize and @mixin normalize-legacy. When I call @include normalize,
> what should I expect to happen? Should I expect the file to be imported
> again? Should it be the mixin? Both should really only be imported/used
> once, and both should be written at doc root (outside of a selector).
> 
> I personally like @MoOx https://github.com/MoOx's !once suggestion as
> it's a common enough pattern throughout Sass that I think it's a good fit
> (we've got !default for variables and !optional for extends).
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/139#issuecomment-12947011.
",arbales,mixin
139,2013-02-15 11:31:06,"Besides, LESS has both @import and @import-once, but from v.1.4 they want to make default @import logic as @import-once (and to remove the second one).

Maybe it's good to do the same in SASS / SCSS?
",kottenator,import
139,2013-02-15 11:31:06,"Besides, LESS has both @import and @import-once, but from v.1.4 they want to make default @import logic as @import-once (and to remove the second one).

Maybe it's good to do the same in SASS / SCSS?
",kottenator,import-once
139,2013-02-15 12:10:10,"I agree. Does anybody use @import ""file"" more than one time ?!

On Friday, February 15, 2013, Rostyslav Bryzgunov wrote:

> Besides, LESS has both @import https://github.com/import and
> @import-once, but from v.1.4 they want to make default @importhttps://github.com/importlogic as @import-once (and to remove the second one).
> 
> Maybe it's good to do the same in SASS / SCSS?
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/139#issuecomment-13602694.

## 
",MoOx,importhttps
139,2013-02-15 12:10:10,"I agree. Does anybody use @import ""file"" more than one time ?!

On Friday, February 15, 2013, Rostyslav Bryzgunov wrote:

> Besides, LESS has both @import https://github.com/import and
> @import-once, but from v.1.4 they want to make default @importhttps://github.com/importlogic as @import-once (and to remove the second one).
> 
> Maybe it's good to do the same in SASS / SCSS?
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/139#issuecomment-13602694.

## 
",MoOx,import
139,2013-02-15 12:10:10,"I agree. Does anybody use @import ""file"" more than one time ?!

On Friday, February 15, 2013, Rostyslav Bryzgunov wrote:

> Besides, LESS has both @import https://github.com/import and
> @import-once, but from v.1.4 they want to make default @importhttps://github.com/importlogic as @import-once (and to remove the second one).
> 
> Maybe it's good to do the same in SASS / SCSS?
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nex3/sass/issues/139#issuecomment-13602694.

## 
",MoOx,import-once
139,2013-03-12 17:40:45,"Sass definitely needs an ""@require"" or something equivalent. It shouldn't force the ""_name.scss"" convention just to avoid duplicates. It's been 2 years...
",zakdances,require
139,2013-03-15 17:17:57,"In my case, the main application CSS is 8000 lines long and contains more or less 1092 selectors, of which 400 are repeated twice or more once sass has run. This is partly due to the way @import works by reimporting all its dependencies everytime we call it on a scss.

I'd have expected some kind of way to prevent that. My concerns are:
- generated size of the computed css
- ability to debug the generated css: right now, because of the inclusion, most of my element matchs the same selector twice in the final css, the second one overriding every attribute of the first one, leading to poor visibility and high WAT-attitude among developpers.
",octplane,import
139,2013-04-23 14:53:20,":+1: aside from being able to perform a nested import:



I don't see many reasons that `@import` should behave the way it does. I'd be fine switching to `@require` or `@import-once` but I would imagine that I and most people would just replace _all_ of them. In other words, I think we should swap to ""import once"" behavior by default.
",aaronjensen,require
139,2013-04-23 14:53:20,":+1: aside from being able to perform a nested import:



I don't see many reasons that `@import` should behave the way it does. I'd be fine switching to `@require` or `@import-once` but I would imagine that I and most people would just replace _all_ of them. In other words, I think we should swap to ""import once"" behavior by default.
",aaronjensen,import
139,2013-04-23 14:53:20,":+1: aside from being able to perform a nested import:



I don't see many reasons that `@import` should behave the way it does. I'd be fine switching to `@require` or `@import-once` but I would imagine that I and most people would just replace _all_ of them. In other words, I think we should swap to ""import once"" behavior by default.
",aaronjensen,import-once
139,2013-06-08 02:49:21,"+1. The `@extend` and `%placeholder` capabilities beg for an import-once feature. It's unintuitive for the rewritten selectors to be [duplicated](https://gist.github.com/alecperkins/5733335) (though makes sense after thinking about how import and placeholders work). Also, it's sloppy to need a different file describe the dependencies of a module to avoid duplication. `@require` is a good name, keeping `@import` consistent with how it is now (both in Sass and CSS).
",alecperkins,extend
139,2013-06-08 02:49:21,"+1. The `@extend` and `%placeholder` capabilities beg for an import-once feature. It's unintuitive for the rewritten selectors to be [duplicated](https://gist.github.com/alecperkins/5733335) (though makes sense after thinking about how import and placeholders work). Also, it's sloppy to need a different file describe the dependencies of a module to avoid duplication. `@require` is a good name, keeping `@import` consistent with how it is now (both in Sass and CSS).
",alecperkins,import
139,2013-06-08 02:49:21,"+1. The `@extend` and `%placeholder` capabilities beg for an import-once feature. It's unintuitive for the rewritten selectors to be [duplicated](https://gist.github.com/alecperkins/5733335) (though makes sense after thinking about how import and placeholders work). Also, it's sloppy to need a different file describe the dependencies of a module to avoid duplication. `@require` is a good name, keeping `@import` consistent with how it is now (both in Sass and CSS).
",alecperkins,require
139,2013-06-18 18:27:02,"@kaelig it's something we intend to handle in Sass 4.0 when we create a proper concept of sass modules and namespacing and revamp how `@import` works.
",chriseppstein,import
139,2013-06-24 13:25:40,"A while ago I created a custom importer which makes @import only import the same file once. I don't know if it would work with the current version, but if anyone is interested I could try to find it and share.
",svallory,import
139,2013-08-29 08:26:23,"I can't express how critical this feature is for developing large, modular frameworks without duplicate output.

The current `@import` semantics aren't intuitive and, I may be wrong here, I believe web browsers dedupe @import's in css.
",xzyfer,import
139,2013-08-29 08:34:31,"Aiming at being objective here: 
- Changing @import is a seriously _breaking_ change, it will not happen.
- +1ing doesn't add anything to the conversation.

---

Do we have a clear proposal / suggestion that @chriseppstein or @nex3 have agreed with? Is there an actionable development path? 

If you've got an opinion, I suggest that you submit a proposal‚Ä¶ if its solid, and simple, it'll get agreed upon. 

2 year old issues don't resolve themselves without buy-in, folks. 
",benschwarz,nex3
139,2013-08-29 08:34:31,"Aiming at being objective here: 
- Changing @import is a seriously _breaking_ change, it will not happen.
- +1ing doesn't add anything to the conversation.

---

Do we have a clear proposal / suggestion that @chriseppstein or @nex3 have agreed with? Is there an actionable development path? 

If you've got an opinion, I suggest that you submit a proposal‚Ä¶ if its solid, and simple, it'll get agreed upon. 

2 year old issues don't resolve themselves without buy-in, folks. 
",benschwarz,import
139,2013-09-06 06:08:40,"I'd suggest having a quick look at this before going to crazy with place holders https://gist.github.com/xzyfer/6394659. If you take the final sass example and try to use media queries you'll run into a deprecation warning. I personally think deprecating `@extend`ing placeholders in media queries is a backwards move, although it makes sense for `@extend`ing normal selectors.

There's an example of a workaround here (https://github.com/nex3/sass/issues/905) which from memory works as expected, inserting the placeholder content within the media query context, in 2.3.10 even thought it throws a deprecation warning.
",xzyfer,extend
139,2013-09-28 16:07:37,"@thejase: @import-once is integrated into the official code?
",brauliobo,import-once
139,2013-09-28 16:13:20,"Why is it not nice? ¬†It is actually safer and more specific (you specify you should only include this once in the _actual_ file).¬†

And no. No official support yet. But I actually feel this is safer than a native @import-once.¬†

‚Äî
Sent from Mailbox for iPhone

On Sat, Sep 28, 2013 at 9:10 AM, Br√°ulio Bhavamitra
notifications@github.com wrote:

> ## pasting https://gist.github.com/courtsimas/1167053 before including anything isn't nice. this or another solution should be on the sass core code
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/139#issuecomment-25300868
",thejase,import-once
139,2013-09-28 16:28:35,"Safer because your other devs don't need to remember to use an @import-once over and over (humans are flawed like that).¬†

And if you don't own the code, just wrap the check around the import instead.¬†

More specific, less magic.¬†

‚Äî
Sent from Mailbox for iPhone

On Sat, Sep 28, 2013 at 9:24 AM, Br√°ulio Bhavamitra
notifications@github.com wrote:

> ## @aaronjensen +1 for a native version. it is very needed. the sass developers are considering this??
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/139#issuecomment-25301146
",thejase,import-once
139,2013-09-28 18:04:03,"@brauliobo : I do have a slight variation of the solution mentioned above ‚Äî see https://gist.github.com/StefanoRausch/6744610 .

I do import it only once at the very beginning ‚Äîthink framework here, no duplication in every Sass file ‚Äî and from there on I only have to either wrap the code in discussion as content for the mixin or I can use the function, depending on the constraints set by the mixin.

@import file -> @include once( ""<file>"" ) { ... } OR @if( include-once( ""<file>"" ) { ... }

Still a workaround, but nice to have ;)
",StefanoRausch,include
139,2013-09-28 18:04:03,"@brauliobo : I do have a slight variation of the solution mentioned above ‚Äî see https://gist.github.com/StefanoRausch/6744610 .

I do import it only once at the very beginning ‚Äîthink framework here, no duplication in every Sass file ‚Äî and from there on I only have to either wrap the code in discussion as content for the mixin or I can use the function, depending on the constraints set by the mixin.

@import file -> @include once( ""<file>"" ) { ... } OR @if( include-once( ""<file>"" ) { ... }

Still a workaround, but nice to have ;)
",StefanoRausch,if
139,2013-09-28 18:04:03,"@brauliobo : I do have a slight variation of the solution mentioned above ‚Äî see https://gist.github.com/StefanoRausch/6744610 .

I do import it only once at the very beginning ‚Äîthink framework here, no duplication in every Sass file ‚Äî and from there on I only have to either wrap the code in discussion as content for the mixin or I can use the function, depending on the constraints set by the mixin.

@import file -> @include once( ""<file>"" ) { ... } OR @if( include-once( ""<file>"" ) { ... }

Still a workaround, but nice to have ;)
",StefanoRausch,import
139,2014-12-11 19:45:13,"Tick, tock.....thought this would have been addressed by now, having read through the entire thread.  

Are @StefanoRausch & @courtsimas workarounds still the only viable solution to not have duplicated css when extending a selector from another (imported) file?
",herringtown,courtsimas
138,2011-09-15 18:59:04,"I'm pretty skeptical about the Ruby-style syntax for these. It seems quite incomprehensible to anyone without Ruby familiarity. I'd prefer something along the lines of ""foo(bar, baz, @rest bip)"" in the manner of Lisp.
",nex3,rest
138,2012-01-02 01:30:55,"@nex3  Do any of my proposed syntaxes feel right to you? I'd really like to see this in 3.2.

Another option:



@cheba are you still interested in working on this?
",chriseppstein,cheba
137,2012-01-02 01:35:33,"look ok to me. Might cause some regressions for some users who are passing these words as unquoted strings to functions expecting a string object. Seems like an acceptable risk.

@nex3 do you +1?
",chriseppstein,nex3
136,2011-07-11 20:24:50,"It would be nice to be able to declare local variables inside @function blocks. Maybe a new keyword like @var could specify that the following variable should be used only within the @function ?
",charlesdemers,var
136,2011-07-11 20:24:50,"It would be nice to be able to declare local variables inside @function blocks. Maybe a new keyword like @var could specify that the following variable should be used only within the @function ?
",charlesdemers,function
136,2012-05-07 00:32:30,"bump. @nex3 is this a candidate for 3.2?
",chriseppstein,nex3
132,2011-07-08 09:04:52,"$ck: #66cc00;
$es: #3366cc;
$fr: #ff6c00;
$bd: #cc0000;
$wt: #FFDB00;

@each $brand in ck, es, fr, bd, wt{
  .#{$brand}_bg {
    background-color: $#{$brand};  // <-- I want to call $ck, $es, $fr, $bd, $wt
  }
}
",ghost,each
129,2011-08-25 14:31:45,"+1
I would totally love this. Typing out `@include` everytime is getting tiresome.

(Maybe you can even do `something: 100px` but that's a bit of a stretch :D)
",rstacruz,include
128,2011-07-03 17:27:55,"If mixins accept nested content that can be placed with `@children` this would make it easier to build abstractions around selector incompatibilities. For example: https://gist.github.com/923780
",chriseppstein,children
128,2012-02-06 15:54:38,"Yes. it's called @content and it's on master already.
",chriseppstein,content
127,2016-05-20 17:54:57,"The module system in Sass 4.0 will provide the ability to control a public API and avoid naming collisions across modules. Once we have that, I can't think of a use case for nested `@mixin` definitions.
",chriseppstein,mixin
123,2011-06-24 08:53:52,"Hello!
I'm working on the safe bridging SASS and Jekyll, which, you may khow, is behind GH pages.
With Haml it was quite easy as we have :suppress_eval option. But for SASS it's still possible to use construction like:



and cause infinite loop. This is not a problem if we run SASS at the end-user machine, but it could be a problem for the Github.

Is it possible to pass to the SASS::Engine option like :suppress_conrol_directives whilst allow using valuable @import  directive?
",nashbridges,import
122,2012-01-10 15:39:16,"Less.rb is old and deprecated, it doesn't support the current less syntax. A less to sass converter is a good thing to have, but a rewrite of this feature is required to achieve that.

@nex3, I'm going to remove the less support from sass-convert unless you object. I think a less to sass converter can and should be provided by a separate project -- maybe it would be built on less.js's internals instead of sass's.
",chriseppstein,nex3
118,2011-06-14 02:16:39,"I raised an issue on [Google Groups](https://groups.google.com/d/topic/compass-users/AEURMOw2P1E/discussion) in regards to a recursive file import error. 

The error message itself was quite ambiguous : `SystemStackError on line 189 of /Library/Ruby/Gems/1.8/gems/sass-3.1.2/lib/sass/../sass/tree/node.rb: stack level too deep`

I managed to get this error with the following setup:
- ruby 1.8.7 (2009-06-12 patchlevel 174) [universal-darwin10.0]
- rubygems-update (1.8.5, 1.8.1)
- sass (3.1.2)
- compass (0.11.3)`

**To replicate this error**:

Create two files:
- style.scss
- omg-text.scss

In both files, import the [omg-text gem](http://rubygems.org/gems/omg-text) `@import ""omg-text"";`

Now try `compass compile --trace` and you should get an error message along the same lines as this:



This will continue until either the offending file is renamed.
",Demwunz,import
116,2012-04-17 00:53:10,"This may not be 100% related to this thread but I've seen every other marginally related ticket being closed and referred here.

Specifically for dealing with media queries it would be useful to use some sort of output buffering to stash some css rules for later inclusion. The issue is hinted at in the [media queries blog article](http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32) where trying to correct for media queries inline will result in a number of identical `@media` declarations that have different rules in them. Output buffering will solve this really well. Each buffer would be named and additive so each time it is invoked, more is appended to the end of it. Once a buffer is output it is flushed.

Buffering is a completely different usecase than a `@mixin`. Buffers would allow for the creation of a responsive grid plugin that expected specific buffers for specific `@media` blocks. Additionally it'd be useful for projects that want to create print styles using `@print` blocks. Currently the only way to manage this is to simply add your additional rules directly to the media queries which is effective but can make the code a little harder to track. Not having buffers also completely removes the capability of using canned media queries baked into a compass extension, making it harder to convert projects like [320 and up](http://stuffandnonsense.co.uk/projects/320andup/) into SASS for easy re-use.

Here's a simple example:


- buffers are output at the time that `@output` is called in the natural CSS order. So if you add to a buffer after it's been output, nothing happens.
- you can easily add more to a buffer using the names.
- it might be useful to clear a named buffer with something like `@clean my-buffer;`
- I don't know if it's possible to use the `&` symbol in content blocks like in my example but it'd be really useful.
- It would also be useful to use the bubbling feature similar to how `@media` works.  Something like `div { @buffer my-buffer { width: 100px; } width: 200px;  }`
",heygrady,buffer
116,2012-04-17 00:53:10,"This may not be 100% related to this thread but I've seen every other marginally related ticket being closed and referred here.

Specifically for dealing with media queries it would be useful to use some sort of output buffering to stash some css rules for later inclusion. The issue is hinted at in the [media queries blog article](http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32) where trying to correct for media queries inline will result in a number of identical `@media` declarations that have different rules in them. Output buffering will solve this really well. Each buffer would be named and additive so each time it is invoked, more is appended to the end of it. Once a buffer is output it is flushed.

Buffering is a completely different usecase than a `@mixin`. Buffers would allow for the creation of a responsive grid plugin that expected specific buffers for specific `@media` blocks. Additionally it'd be useful for projects that want to create print styles using `@print` blocks. Currently the only way to manage this is to simply add your additional rules directly to the media queries which is effective but can make the code a little harder to track. Not having buffers also completely removes the capability of using canned media queries baked into a compass extension, making it harder to convert projects like [320 and up](http://stuffandnonsense.co.uk/projects/320andup/) into SASS for easy re-use.

Here's a simple example:


- buffers are output at the time that `@output` is called in the natural CSS order. So if you add to a buffer after it's been output, nothing happens.
- you can easily add more to a buffer using the names.
- it might be useful to clear a named buffer with something like `@clean my-buffer;`
- I don't know if it's possible to use the `&` symbol in content blocks like in my example but it'd be really useful.
- It would also be useful to use the bubbling feature similar to how `@media` works.  Something like `div { @buffer my-buffer { width: 100px; } width: 200px;  }`
",heygrady,print
116,2012-04-17 00:53:10,"This may not be 100% related to this thread but I've seen every other marginally related ticket being closed and referred here.

Specifically for dealing with media queries it would be useful to use some sort of output buffering to stash some css rules for later inclusion. The issue is hinted at in the [media queries blog article](http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32) where trying to correct for media queries inline will result in a number of identical `@media` declarations that have different rules in them. Output buffering will solve this really well. Each buffer would be named and additive so each time it is invoked, more is appended to the end of it. Once a buffer is output it is flushed.

Buffering is a completely different usecase than a `@mixin`. Buffers would allow for the creation of a responsive grid plugin that expected specific buffers for specific `@media` blocks. Additionally it'd be useful for projects that want to create print styles using `@print` blocks. Currently the only way to manage this is to simply add your additional rules directly to the media queries which is effective but can make the code a little harder to track. Not having buffers also completely removes the capability of using canned media queries baked into a compass extension, making it harder to convert projects like [320 and up](http://stuffandnonsense.co.uk/projects/320andup/) into SASS for easy re-use.

Here's a simple example:


- buffers are output at the time that `@output` is called in the natural CSS order. So if you add to a buffer after it's been output, nothing happens.
- you can easily add more to a buffer using the names.
- it might be useful to clear a named buffer with something like `@clean my-buffer;`
- I don't know if it's possible to use the `&` symbol in content blocks like in my example but it'd be really useful.
- It would also be useful to use the bubbling feature similar to how `@media` works.  Something like `div { @buffer my-buffer { width: 100px; } width: 200px;  }`
",heygrady,clean
116,2012-04-17 00:53:10,"This may not be 100% related to this thread but I've seen every other marginally related ticket being closed and referred here.

Specifically for dealing with media queries it would be useful to use some sort of output buffering to stash some css rules for later inclusion. The issue is hinted at in the [media queries blog article](http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32) where trying to correct for media queries inline will result in a number of identical `@media` declarations that have different rules in them. Output buffering will solve this really well. Each buffer would be named and additive so each time it is invoked, more is appended to the end of it. Once a buffer is output it is flushed.

Buffering is a completely different usecase than a `@mixin`. Buffers would allow for the creation of a responsive grid plugin that expected specific buffers for specific `@media` blocks. Additionally it'd be useful for projects that want to create print styles using `@print` blocks. Currently the only way to manage this is to simply add your additional rules directly to the media queries which is effective but can make the code a little harder to track. Not having buffers also completely removes the capability of using canned media queries baked into a compass extension, making it harder to convert projects like [320 and up](http://stuffandnonsense.co.uk/projects/320andup/) into SASS for easy re-use.

Here's a simple example:


- buffers are output at the time that `@output` is called in the natural CSS order. So if you add to a buffer after it's been output, nothing happens.
- you can easily add more to a buffer using the names.
- it might be useful to clear a named buffer with something like `@clean my-buffer;`
- I don't know if it's possible to use the `&` symbol in content blocks like in my example but it'd be really useful.
- It would also be useful to use the bubbling feature similar to how `@media` works.  Something like `div { @buffer my-buffer { width: 100px; } width: 200px;  }`
",heygrady,mixin
116,2012-04-17 00:53:10,"This may not be 100% related to this thread but I've seen every other marginally related ticket being closed and referred here.

Specifically for dealing with media queries it would be useful to use some sort of output buffering to stash some css rules for later inclusion. The issue is hinted at in the [media queries blog article](http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32) where trying to correct for media queries inline will result in a number of identical `@media` declarations that have different rules in them. Output buffering will solve this really well. Each buffer would be named and additive so each time it is invoked, more is appended to the end of it. Once a buffer is output it is flushed.

Buffering is a completely different usecase than a `@mixin`. Buffers would allow for the creation of a responsive grid plugin that expected specific buffers for specific `@media` blocks. Additionally it'd be useful for projects that want to create print styles using `@print` blocks. Currently the only way to manage this is to simply add your additional rules directly to the media queries which is effective but can make the code a little harder to track. Not having buffers also completely removes the capability of using canned media queries baked into a compass extension, making it harder to convert projects like [320 and up](http://stuffandnonsense.co.uk/projects/320andup/) into SASS for easy re-use.

Here's a simple example:


- buffers are output at the time that `@output` is called in the natural CSS order. So if you add to a buffer after it's been output, nothing happens.
- you can easily add more to a buffer using the names.
- it might be useful to clear a named buffer with something like `@clean my-buffer;`
- I don't know if it's possible to use the `&` symbol in content blocks like in my example but it'd be really useful.
- It would also be useful to use the bubbling feature similar to how `@media` works.  Something like `div { @buffer my-buffer { width: 100px; } width: 200px;  }`
",heygrady,media
116,2012-04-17 00:53:10,"This may not be 100% related to this thread but I've seen every other marginally related ticket being closed and referred here.

Specifically for dealing with media queries it would be useful to use some sort of output buffering to stash some css rules for later inclusion. The issue is hinted at in the [media queries blog article](http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32) where trying to correct for media queries inline will result in a number of identical `@media` declarations that have different rules in them. Output buffering will solve this really well. Each buffer would be named and additive so each time it is invoked, more is appended to the end of it. Once a buffer is output it is flushed.

Buffering is a completely different usecase than a `@mixin`. Buffers would allow for the creation of a responsive grid plugin that expected specific buffers for specific `@media` blocks. Additionally it'd be useful for projects that want to create print styles using `@print` blocks. Currently the only way to manage this is to simply add your additional rules directly to the media queries which is effective but can make the code a little harder to track. Not having buffers also completely removes the capability of using canned media queries baked into a compass extension, making it harder to convert projects like [320 and up](http://stuffandnonsense.co.uk/projects/320andup/) into SASS for easy re-use.

Here's a simple example:


- buffers are output at the time that `@output` is called in the natural CSS order. So if you add to a buffer after it's been output, nothing happens.
- you can easily add more to a buffer using the names.
- it might be useful to clear a named buffer with something like `@clean my-buffer;`
- I don't know if it's possible to use the `&` symbol in content blocks like in my example but it'd be really useful.
- It would also be useful to use the bubbling feature similar to how `@media` works.  Something like `div { @buffer my-buffer { width: 100px; } width: 200px;  }`
",heygrady,output
115,2011-06-10 22:36:47,"This will allow for `@import stylesheet-url(""foo.css"");` which protects the user against changes to their asset serving approach.
",chriseppstein,import
115,2011-09-13 13:53:17,"**This feature is a must-have.**

Right now, I'm using sass variables to compile different stylesheets for different locales, based on the same scss files. It automatically creates css files for English, French and other languages. I have set a $locale variable in each locale's screen.scss, in this case:
$locale: ""enUS"".

Now, I have different button sprites for each locale; but, since variables aren't allowed in @import statements, I can't use compass's sprites feature. This is how the code would look like if variables were allowed:

@import ""images/#{$locale}/button/*.png"";
",AriaMinaei,import
115,2011-11-15 22:58:19,"Sorry I should have been clearer. This is only for generating css-based `@import` directives. Sass-based `@import` directives shouldn't need this feature.
",chriseppstein,import
115,2011-11-15 23:03:59,"@AriaMinaei For your needs, the @import approach will not work, however the compass spriting feature can totally accomodate this need by dropping down to the next lower layer.
",chriseppstein,import
114,2011-06-10 19:18:33,"https://github.com/nex3/sass/blob/master/lib/sass/plugin/staleness_checker.rb#L169

The staleness checker is assuming you will never return nil which is not what the documentation states

<pre>
   # @return [Sass::Engine, nil] An Engine containing the imported file,
   #   or nil if it couldn't be found or was in the wrong format
</pre>


stack trace: https://gist.github.com/238aa70212c35e4e2a81
",scottdavis,return
114,2011-07-13 06:24:41,"I spent some time debugging this (thanks @jetviper21 for your repo)

I found that ""global"" always comes as the uri parameter. However stack traces differ in the first request and in the subsequent failing requests: https://gist.github.com/1079814. So, it's the StalenessChecker that fails here.

There's a workaround however. Put the following line to config/compass.rb:



It will regenerate everything each time, but at least it won't throw an exception.
",be9,jetviper21
114,2011-08-17 16:27:39,"@jetviper21: So does it work for you?
",moeffju,jetviper21
114,2011-08-17 17:55:44,"Yes, it fixes your test repo and works with all my apps and our apps at @Toptranslation.
",moeffju,Toptranslation
114,2011-08-17 18:22:43,"Nice I notified chris you mind making this a pull request?

Sent from my iPhone

On Aug 17, 2011, at 1:55 PM, moeffjureply@reply.github.com wrote:

> Yes, it fixes your test repo and works with all my apps and our apps at @Toptranslation.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nex3/sass/issues/114#issuecomment-1828778
",scottdavis,Toptranslation
113,2011-06-09 05:58:02,"Currently, Sass insists that all indentation in a file be completely consistent. However, this means that it's not possible to get rid of a line without re-indenting everything beneath it, which is annoying when debugging code.

We want to allow variable indentation as long as it's unambiguous. For example, the following:



should be the same as



However, wherever we currently would raise an error, a warning should be printed.

Ambiguous cases should still be marked as erroneous. For example, the following



should raise an error on the ""down: two spaces"" line.

This is conceptually the same as issue #28, but since Sass and Haml don't share parser code, they're listed separately.

[Originally filed](https://github.com/nex3/haml/issues/29) by @nex3.
",chriseppstein,nex3
112,2011-06-09 05:52:49,"Sass version: Haml/Sass 3.0.0.beta.2 (Classy Cassidy)
- Certain color definitions should be shorten: #336699 -> #369
- Unnecessary spaces and zeroes should be removed in: rgba(0, 0, 0, 0.25) -> rgba(0,0,0,.25)
- Unnecessary spaces should removed in: font-family:""Lucida Grande"", Helvetica, Arial, sans-serif -> font-family:""Lucida Grande"",Helvetica,Arial,sans-serif

[Originally filed](https://github.com/nex3/haml/issues/153) by @riobard.
",chriseppstein,riobard
111,2011-06-09 05:51:12,"It's probably a coding mistake if no selector matches an @extend directive. Sass could issue a warning in this case and save costly time spent in debugging.

[Originally filed](https://github.com/nex3/haml/issues/150) by @chriseppstein.
",chriseppstein,extend
111,2011-06-09 05:51:12,"It's probably a coding mistake if no selector matches an @extend directive. Sass could issue a warning in this case and save costly time spent in debugging.

[Originally filed](https://github.com/nex3/haml/issues/150) by @chriseppstein.
",chriseppstein,chriseppstein
111,2011-11-22 19:12:34,"+1. When refactoring, it's really hard to keep track of what breaks when moving around @imports. A nice big warning would make this so much easier.
",timplunkett,imports
110,2011-06-09 05:49:19,"I noticed this while editing some SCSS files with <code>$ sass --watch src:output</code> running.

haml 3.0.25

The reproduction case is this:

In your SCSS stylesheet create a rule to be extended:



Then attempt to <code>@extend</code> that class with multiple selectors, organized with a line-break in the string:



While this works if all of the selectors are on a single line, it breaks when there's a line-break, returning this error:



Here's the stack trace: (minor edits to some of the path directory names, but nothing of substance)



[Originally filed](https://github.com/nex3/haml/issues/342) by @miketierney
",chriseppstein,extend
110,2011-06-09 05:49:19,"I noticed this while editing some SCSS files with <code>$ sass --watch src:output</code> running.

haml 3.0.25

The reproduction case is this:

In your SCSS stylesheet create a rule to be extended:



Then attempt to <code>@extend</code> that class with multiple selectors, organized with a line-break in the string:



While this works if all of the selectors are on a single line, it breaks when there's a line-break, returning this error:



Here's the stack trace: (minor edits to some of the path directory names, but nothing of substance)



[Originally filed](https://github.com/nex3/haml/issues/342) by @miketierney
",chriseppstein,miketierney
109,2011-06-09 05:46:39,"I have become fond of CoffeeScript's ability to declare variables that have the same value in this manner:



I would like the ability to declare CSS properties in SASS/SCSS like this:



and then the output would be:



[Originally filed](https://github.com/nex3/haml/issues/318) by @deleteme
",chriseppstein,deleteme
109,2011-07-15 20:09:14,"Even though it does sound like a cool feature; I believe that we could benefit more of having an alias to @include for .scss syntax like proposed on issue #129 , with all the mixin functionality you can easily make something like:



Then:



Which is shorter than width:height:etc
",MarioRicalde,include
109,2011-07-15 20:46:55,"@kuroir the decision to not have a shorthand syntax in .scss files has been discussed enough. I understand the convenience, but it's not enough to warrant the parsing violations.
",chriseppstein,kuroir
109,2011-07-15 21:00:12,"@deleteme he was talking to me, regarding the + as @include alias on .scss syntax.
",MarioRicalde,include
109,2015-09-24 18:47:24,"@nex3 thoughts?
",chriseppstein,nex3
109,2016-11-01 18:23:10,"Agreed. There has also been some discussion around doing

width, height: 100px

Would love to employ this for things like

border-left, border-right: 5px solid;
border-top, border-bottom: 1px dotted;
Le mar. 1 nov. 2016 √† 07:34, Sam A. Horvath-Hunt notifications@github.com
a √©crit :

> Here's an example of where Stylus bests Sass because of property lookup:
> 
> Sass:
> 
> $needless-var: 200px
> .class
>   width: $needless-var
>   height: $needless-var
> 
> Stylus:
> 
> .class
>   width: 200px
>   height: @width
> 
> It's not a big deal but I think it helps a lot with readability. Whereas
> with a var you can't immediately visually grep how often a var is used (and
> what the consequences are of changing it), you can immediately tell with a
> property lookup that there is a direct connection between two properties
> that doesn't affect anything else.
> 
> The idea above for shorthand multiple properties also won't solve this
> issue, as you may want to provide a calculation on it (e.g. the height may
> also be width divided by two).
> 
> ‚Äî
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> https://github.com/sass/sass/issues/109#issuecomment-257581885, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AATj7kvmP0OFtq5m84XY8pYlyzoKliIlks5q503-gaJpZM4AJBSx
> .
> 
> ## 
> 
> Adam Grant
",adamjgrant,width
109,2016-11-01 18:23:40,"Just realized which thread I was replying to. :)
Le mar. 1 nov. 2016 √† 11:22, Adam Grant hello@adamgrant.me a √©crit :

> Agreed. There has also been some discussion around doing
> 
> width, height: 100px
> 
> Would love to employ this for things like
> 
> border-left, border-right: 5px solid;
> border-top, border-bottom: 1px dotted;
> Le mar. 1 nov. 2016 √† 07:34, Sam A. Horvath-Hunt notifications@github.com
> a √©crit :
> 
> Here's an example of where Stylus bests Sass because of property lookup:
> 
> Sass:
> 
> $needless-var: 200px
> .class
>   width: $needless-var
>   height: $needless-var
> 
> Stylus:
> 
> .class
>   width: 200px
>   height: @width
> 
> It's not a big deal but I think it helps a lot with readability. Whereas
> with a var you can't immediately visually grep how often a var is used (and
> what the consequences are of changing it), you can immediately tell with a
> property lookup that there is a direct connection between two properties
> that doesn't affect anything else.
> 
> The idea above for shorthand multiple properties also won't solve this
> issue, as you may want to provide a calculation on it (e.g. the height may
> also be width divided by two).
> 
> ‚Äî
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> https://github.com/sass/sass/issues/109#issuecomment-257581885, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AATj7kvmP0OFtq5m84XY8pYlyzoKliIlks5q503-gaJpZM4AJBSx
> .
> 
> ## 
> 
> Adam Grant
> 
> ## 
> 
> Adam Grant
",adamjgrant,width
108,2011-06-09 05:45:25,"The ""[Try Online](http://sass-lang.com/try.html)"" page can only use SASS currently. It would be great if user can use SCSS too, and even better if SCSS is the default option.

[Originally filed](https://github.com/nex3/haml/issues/317) by @hlb
",chriseppstein,hlb
107,2011-06-09 05:43:33,"I'd like to have an expanded and nested SCSS output like:



I hardcoded this behaviour in lib/sass/tree/node.rb of haml 3.0.13 for myself with:



[Originally filed](https://github.com/nex3/haml/issues/205) by @topaxi and commented on by @nex3 and @graywh
",chriseppstein,topaxi
107,2011-06-09 05:43:33,"I'd like to have an expanded and nested SCSS output like:



I hardcoded this behaviour in lib/sass/tree/node.rb of haml 3.0.13 for myself with:



[Originally filed](https://github.com/nex3/haml/issues/205) by @topaxi and commented on by @nex3 and @graywh
",chriseppstein,graywh
107,2011-06-09 05:43:33,"I'd like to have an expanded and nested SCSS output like:



I hardcoded this behaviour in lib/sass/tree/node.rb of haml 3.0.13 for myself with:



[Originally filed](https://github.com/nex3/haml/issues/205) by @topaxi and commented on by @nex3 and @graywh
",chriseppstein,nex3
106,2011-06-09 05:24:28,"[Orginally filed](https://github.com/nex3/haml/issues/229) against haml by @nex3 and commented on by @endymion & @tbranyen.

This should work for `@media` and unrecognized selectors. It may also be worth allowing variables directly at some places in `@media`, although this may create confusion if they aren't allowed directly in other selectors.
",chriseppstein,nex3
106,2011-06-09 05:24:28,"[Orginally filed](https://github.com/nex3/haml/issues/229) against haml by @nex3 and commented on by @endymion & @tbranyen.

This should work for `@media` and unrecognized selectors. It may also be worth allowing variables directly at some places in `@media`, although this may create confusion if they aren't allowed directly in other selectors.
",chriseppstein,endymion
106,2011-06-09 05:24:28,"[Orginally filed](https://github.com/nex3/haml/issues/229) against haml by @nex3 and commented on by @endymion & @tbranyen.

This should work for `@media` and unrecognized selectors. It may also be worth allowing variables directly at some places in `@media`, although this may create confusion if they aren't allowed directly in other selectors.
",chriseppstein,tbranyen
106,2011-06-09 05:24:28,"[Orginally filed](https://github.com/nex3/haml/issues/229) against haml by @nex3 and commented on by @endymion & @tbranyen.

This should work for `@media` and unrecognized selectors. It may also be worth allowing variables directly at some places in `@media`, although this may create confusion if they aren't allowed directly in other selectors.
",chriseppstein,media
105,2011-06-09 05:21:19,"[Originally filed](https://github.com/nex3/haml/issues/242) against haml by @nex3.

E.g.



`$iconImage` should be accessible after running this statement.
",chriseppstein,nex3
104,2011-06-09 05:18:14,"[Originally filed](https://github.com/nex3/haml/issues/373) against haml by @sylvinus and commented on by @LayerDownInc & @matthewee.

css/apple.css from Sencha Touch 1.1 (wasn't happening with 1.0)

latest sass


",chriseppstein,LayerDownInc
104,2011-06-09 05:18:14,"[Originally filed](https://github.com/nex3/haml/issues/373) against haml by @sylvinus and commented on by @LayerDownInc & @matthewee.

css/apple.css from Sencha Touch 1.1 (wasn't happening with 1.0)

latest sass


",chriseppstein,sylvinus
104,2011-06-09 05:18:14,"[Originally filed](https://github.com/nex3/haml/issues/373) against haml by @sylvinus and commented on by @LayerDownInc & @matthewee.

css/apple.css from Sencha Touch 1.1 (wasn't happening with 1.0)

latest sass


",chriseppstein,matthewee
104,2011-09-07 15:56:42,"Let me take that back. jQuery Mobile's CSS goes through just fine with Sprockets on ruby 1.8.7.

I traced the source of the exception to two problems I had in my SCSS:
- I had a missing closing curly brace somewhere in a nested block;
- I had an ""@extend .stylename"" where "".stylename"" was not defined anywhere at the top level, but was defined nested under other selectors. Creating a top level style with that selector didn't fix the issue, though. So I just removed the extend and the problem went away.

I hope this helps someone else figure out their version of this problem.
",webmat,extend
104,2011-09-16 17:33:50,"Ok, this is getting weird. I've tracked my instance of the problem further, since it kept happening again.

Our designer created the following style:



This style has been problematic every once in a while. It's reused with `@extend .w_univers_font` in a few places but in some specific instances it fails.

Here's a few examples with dummy selectors (I've actually tried them as is)



I've no idea if it's something that can be fixed to work on Ruby 1.8.7. I hope this helps SASS contributors track down this issue!
",webmat,extend
104,2011-10-04 08:25:02,"Experiencing the same problem with '@extend' - assets:precompile fails with 'regexp buffer overflow' in unpredictable place.
",andreychernih,extend
103,2011-06-09 05:12:07,"SASS does not generate a new CSS file when the source files did not change. It can be handy to force the generation of a file to switch between a compressed production version and a development version with line comments. Currently SASS does not generate the file, if you just switch command line arguments.

I propose a command line argument 'force' that ensures that the file gets generated.

[Originally filed](https://github.com/nex3/haml/issues/375) against haml by @thomaspeklak
",chriseppstein,thomaspeklak
102,2011-11-08 22:27:49,"this feature is indeed useful I would suggest this syntax tho:



which would compile to:



`abstract` is a common word used by many programming languages (Java, C#, PHP) to define a base class which should be extended by other classes and can't be instantiated.

advantage is that it would be similar to the way `@mixin` is defined (semantically equal), adding special selectors is a bad idea since it isn't compatible with CSS editors and it isn't descriptive as well.

[Wikipedia: Abstract Type](http://en.wikipedia.org/wiki/Abstract_type)
",millermedeiros,mixin
102,2012-02-26 01:41:42,"@Cosmius it is already in latest development version of SASS. The syntax is:

%a-silent-ruleset {
  color: pink;
}

.my-selector {
  @extend %a-silent-ruleset;
}

This will output:

.my-selector {
  color: pink;
}
",barraponto,extend
102,2012-07-06 10:16:57,"I really prefer the @abstract syntax :/
",alanjds,abstract
99,2011-06-08 11:55:49,"I was wondering, why when using the @extend rule you have to write the
 following code in case you want to extend your object with multiple
 classes:

 .test {@extend .class1; @extend .class2; @extend .class3;}

 It seems to be far easier and more like ""classic"" css to do it like
 this, don't you think?:

 .test {@extend .class1, .class2, .class3;}
",ghost,extend
98,2011-06-07 01:45:59,"Use case:
I was trying to DRY my code with a @mixin where I was dynamically calculate min-width for a @media query based on the number of columns for a grid I'm building. I tried adding a regular variable, wrapping the variable with #{} and using a custom @function. Nothing worked; it was all passed through to the CSS.
",ravinggenius,media
98,2011-06-07 01:45:59,"Use case:
I was trying to DRY my code with a @mixin where I was dynamically calculate min-width for a @media query based on the number of columns for a grid I'm building. I tried adding a regular variable, wrapping the variable with #{} and using a custom @function. Nothing worked; it was all passed through to the CSS.
",ravinggenius,function
98,2011-06-07 01:45:59,"Use case:
I was trying to DRY my code with a @mixin where I was dynamically calculate min-width for a @media query based on the number of columns for a grid I'm building. I tried adding a regular variable, wrapping the variable with #{} and using a custom @function. Nothing worked; it was all passed through to the CSS.
",ravinggenius,mixin
97,2011-06-06 06:22:27,"SCSS:

<pre><code>.a { color: red; }
.b {
    &-c { @extend .a; }
}</code></pre>


Expected result:
`.a, .b-c { color: red; }`

 Actual result:
`.a, -c.b { color: red; }`
",Ti-webdev,extend
96,2011-06-03 17:27:53,"<pre>
#articles {
  @media only screen and (min-width: 480px) { > article { @extend .foo; } } // works fine
  > article {
    @media only screen and (min-width: 480px) { @extend .foo; } // breaks
  }
}
</pre>
",imathis,extend
96,2011-06-03 17:27:53,"<pre>
#articles {
  @media only screen and (min-width: 480px) { > article { @extend .foo; } } // works fine
  > article {
    @media only screen and (min-width: 480px) { @extend .foo; } // breaks
  }
}
</pre>
",imathis,media
96,2011-06-07 20:07:39,"got some reports on twitter about this too. @nex3 any ideas what's the cause?
",chriseppstein,nex3
96,2011-07-02 21:51:19,"I'm trying to @extend a markup element inside a ""smaller screen"" media query, in order to have it inherit different 960.gs container_xx properties. It seems I'm not able to achieve this...
",ebiasini,extend
96,2011-07-12 18:11:22,"I'm not sure that this is directly related, but I think it is related enough not to create a new issue for it. When I attempt to use extend inside an @media block, the generated sheet has the rule outside of the block causing it to be applied under the wrong @media query conditions.
",travi,media
96,2011-08-10 21:37:29,"This is a tricky one. @imathis, in your example, the line you say works fine doesn't actually do what it seems like it should. For example:



compiles to



with no `@media` in sight. When it comes down to it, this is probably correct. The alternative is the following:



which doesn't uphold `@extend`'s guarantee of not duplicating classes.

Since any use of `@extend` within `@media` or other directives behaves in this unintuitive manner, I'm tempted to disallow it wholesale. @chriseppstein, what do you think?
",nex3,extend
96,2011-08-10 21:37:29,"This is a tricky one. @imathis, in your example, the line you say works fine doesn't actually do what it seems like it should. For example:



compiles to



with no `@media` in sight. When it comes down to it, this is probably correct. The alternative is the following:



which doesn't uphold `@extend`'s guarantee of not duplicating classes.

Since any use of `@extend` within `@media` or other directives behaves in this unintuitive manner, I'm tempted to disallow it wholesale. @chriseppstein, what do you think?
",nex3,media
96,2011-08-10 21:49:32,"@nex3, It's very natural to want to use `@extend` within an `@media` block. But since  `@extend` is a compile time directive and `@media` is a runtime directive, having it allowed only causes confusion. I'm +1 on disallowing it.
",chriseppstein,extend
96,2011-08-10 21:49:32,"@nex3, It's very natural to want to use `@extend` within an `@media` block. But since  `@extend` is a compile time directive and `@media` is a runtime directive, having it allowed only causes confusion. I'm +1 on disallowing it.
",chriseppstein,media
96,2011-08-10 21:56:01,"Yeah, this is definitely one of those times where what we really want is browser-based `@extend`. I'll change the title to reflect the new plan.

**Edit**: Actually I'll just open a fresh issue.
",nex3,extend
92,2011-12-16 13:13:09,"It seems to be choking on my @moz-keyframe animation. Hmmm. 
It can convert this:



But not this:


",jenshedqvist,moz-keyframe
84,2011-05-13 08:37:53,"I would like to see a List to CSV function (perhaps called @explode) in Sass. I would like to be able to write a mixin for ""transition-property"" - a property which accepts a comma separated list of properties to animate. The mixin would accept a single list parameter which is then expanded out to a comma separated list.




",keeganstreet,explode
82,2011-05-12 16:13:54,"Hi,

It would be nice to be able to make sass watch a directory but compile a single file (something like `--watch input-file:input-dir:output-file`)

We usually work with a single scss file @importing a bunch of ""partials"" scss which allows us to organize them cleanly (think chrome.scss, colors.scss, ...). This configuration make --watch useless because it can't see that the files have changed and never recompiles the ""master"" (which is almost never touched except when adding a new file).

Right now we use a quick and ugly Cocoa app that watches a given folder and calls sass on the master file but it would be better if it was supported natively.

If there is no interest I may try to do it when I have a bit of free time.

Thanks,
Hugues
",hlidotbe,importing
76,2011-05-09 16:14:28,"Hey there,

I have a problem using the @extend rule in sass.

I have the following rules in the .scss file:



The output in the css file is as follows:



Everything is correct except for the combination .box1.box2 in this line:



Why does the algorithm combine .box1.box2 and so forth and applys the rule that I had specified for .box.wrapper?

It gets very bloated, especially with more classes, because it should just say:



Am I missing something?
Is the interpretation from scss to css correct?
Can I somehow avoid this redundant code?
",ghost,extend
75,2011-05-08 17:40:49,"It's a rare use case, however IMO the current behavior of `sass` is wrong:

The following syntax



 will be complied into



not



In which the inner `@media` is only applied to the last media query. This is not by design right?
",timdream,media
66,2011-04-24 22:33:46,"Allow apps, frameworks and Sass itself to automatically import Sass files without requiring an @import directive.
",chriseppstein,import
66,2011-08-11 05:55:36,"@nex3, well, `@import ""icon/*.png"";` is for sure Compass thing https://github.com/chriseppstein/compass/blob/stable/lib/compass/sprite_importer.rb
According to you, automatic imports feature as dangerous as globbing (BTW, nobody should rely on the order of the CSS rules, it's a bad habit)
",nashbridges,import
65,2011-04-24 19:01:43,"It is for a CMS I'm working on. Each widget can add styles to a @mixin based on the widget's name. The @imports are then dynamically built, then the @includes are scoped to a class matching the widget's name, then the whole thing is rendered to CSS. Absolute @imports have worked just fine until 3.1.0.alpha.249; were they not supposed to this whole time?
",ravinggenius,includes
65,2011-04-24 19:01:43,"It is for a CMS I'm working on. Each widget can add styles to a @mixin based on the widget's name. The @imports are then dynamically built, then the @includes are scoped to a class matching the widget's name, then the whole thing is rendered to CSS. Absolute @imports have worked just fine until 3.1.0.alpha.249; were they not supposed to this whole time?
",ravinggenius,imports
65,2011-04-24 19:01:43,"It is for a CMS I'm working on. Each widget can add styles to a @mixin based on the widget's name. The @imports are then dynamically built, then the @includes are scoped to a class matching the widget's name, then the whole thing is rendered to CSS. Absolute @imports have worked just fine until 3.1.0.alpha.249; were they not supposed to this whole time?
",ravinggenius,mixin
65,2011-04-24 20:30:13,"Whether or not this should be supported is up to @nex3, I don't see a good use for it, it results in fragile stylesheets.
",chriseppstein,nex3
65,2011-07-03 21:27:17,"@stefankroes I am converting all @import paths from absolute to relative with a bit of Ruby:



I am generating this main Sass file in Ruby, so it was pretty easy to add this code to my project. I hope it helps.
",ravinggenius,import
64,2011-04-21 15:41:50,"Hi,

I'd love to be able to use media queries.

<pre><code>@media screen and (min-width: 1024px){
  @import ""mobile"";
}
</code></pre>


and 

<pre><code>@import ""mobile"" screen and (min-width: 1024px);
</code></pre>


After making some attempts, it doesn't seem to work. In case 1, I get the error 'Syntax error: Import directives may only be used at the root of a document.' and in case 2, nothing happen (which should be a shortcut to the case 1).

Thanks a lot for your help.
",karellm,media
64,2011-04-21 15:41:50,"Hi,

I'd love to be able to use media queries.

<pre><code>@media screen and (min-width: 1024px){
  @import ""mobile"";
}
</code></pre>


and 

<pre><code>@import ""mobile"" screen and (min-width: 1024px);
</code></pre>


After making some attempts, it doesn't seem to work. In case 1, I get the error 'Syntax error: Import directives may only be used at the root of a document.' and in case 2, nothing happen (which should be a shortcut to the case 1).

Thanks a lot for your help.
",karellm,import
57,2011-04-08 19:46:02,"The ability to import files without compiling them using the _ prefix is quite useful, but it would be nice not have to separate my settings/mixins out from the main CSS. It would be nice to be able to put everything relevant to a single stylesheet in one file, and have the ability to import it with or without including the compiled css in the parent file. Something like @borrow or what ever term is most appropriate.
",cjroth,borrow
49,2011-07-06 23:36:10,"Does this work for sass file @imports? For example, what if I want to do something like this:



where the partial i'm trying to import is named ""_styles.103.scss"".

this returns an error...



thx!
",McWatt,imports
49,2012-01-19 06:01:29,"I'm scaling back this feature in Sass 3.2 due to parsing concerns. The original implementation only worked when the interpolated string or `url()` was a valid string/url; this means that you couldn't include e.g. quotes or closing parentheses within the string/url (e.g. `@import ""#{""foo.css""}""`). This is contrary to how interpolation worked everywhere else in Sass.

It needs to be easy for the user and the parser to tell whether a given `@import` is going to be static (compiling to a CSS `@import`) and when it's going to be dynamic (actually loading Sass from another file). Currently, there are four conditions that cause an import to be treated as static in Sass:
- It uses `url()`.
- It begins with `""http://""`.
- It ends with `"".css""`.
- It specifies a media query (e.g. `@import ""screen.css"" screen`).

If any of these are true for an `@import`, it will be static. As we only want to allow interpolation of static imports, we should only parse interpolation for these cases, and no others. However, it's not possible to know whether an `@import` ends with `.css` or has a media query until after the import string has been parsed, which will require parsing the interpolation, if there is any.

Thus, I'm restricting interpolation to `@import`s using `url()`. This will be done via the usual deprecation in the stable releases, with appropriate warnings and upgrade instructions. `@import`s with interpolation in strings will no longer work in the next release, Sass 3.2.
",nex3,import
48,2011-08-18 22:36:34,"Ran into this issue with a generated sass file (output by railsjedi's Sprite gem).  His file generates a long @if/@else file; with a lot of sprites, the syntax tree is extremely deep and Ruby bombs out when trying to marshal the tree.
",apolzon,if
48,2011-08-18 22:36:34,"Ran into this issue with a generated sass file (output by railsjedi's Sprite gem).  His file generates a long @if/@else file; with a lot of sprites, the syntax tree is extremely deep and Ruby bombs out when trying to marshal the tree.
",apolzon,else
46,2011-07-21 20:42:35,"Just started out with SASS and immediately stumbled upon this. Not sure if I should report a separate bug for:



The error I get is

> Invalid CSS after """": expected selector, was ""@media (min-wid...""
",jacobrask,media
46,2011-10-13 12:43:33,"Another vote for this one on responsive web design grounds, please.

It is very common to want a decision based on `@media screen` together with a `min-width` or `max-width` to select between layouts. Typically, we would then use lengths based on that same width value to size elements within the layout:



Often, there will be several such `@media` blocks for each responsive element, based on a series of widths where the layout changes.

Not being able to interpolate the length in the media query here is a significant problem, forcing repetition of those important width values throughout a SCSS file, or across a whole set of files for a larger site instead of storing all core data like that in a single file and `@import`ing it elsewhere.

It might be considered a different issue depending on how the parser works, but for what it's worth, I agree that it would be very nice to interpolate an entire media query as well:



For me personally this would have a much lower priority, though, because it is far less likely in practice that something like `@media screen` is going to change during routine development work.
",ChrisNewton,media
46,2011-10-13 12:43:33,"Another vote for this one on responsive web design grounds, please.

It is very common to want a decision based on `@media screen` together with a `min-width` or `max-width` to select between layouts. Typically, we would then use lengths based on that same width value to size elements within the layout:



Often, there will be several such `@media` blocks for each responsive element, based on a series of widths where the layout changes.

Not being able to interpolate the length in the media query here is a significant problem, forcing repetition of those important width values throughout a SCSS file, or across a whole set of files for a larger site instead of storing all core data like that in a single file and `@import`ing it elsewhere.

It might be considered a different issue depending on how the parser works, but for what it's worth, I agree that it would be very nice to interpolate an entire media query as well:



For me personally this would have a much lower priority, though, because it is far less likely in practice that something like `@media screen` is going to change during routine development work.
",ChrisNewton,import
40,2011-01-18 06:28:04,"I've created test app - https://github.com/slbug/sasstest
just start it and try to open http://localhost:3000/stylesheets/screen.css

you will see issue - undefined method `map' for ""stylesheets"":String

<pre>
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/lookup_context.rb:126:in `normalize_name'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/lookup_context.rb:111:in `args_for_lookup'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/lookup_context.rb:87:in `find_all'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/importers/rails.rb:60:in `find_template'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/importers/rails.rb:54:in `find_'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/importers/rails.rb:23:in `find_relative'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/tree/import_node.rb:45:in `import'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/tree/import_node.rb:25:in `imported_file'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/tree/import_node.rb:34:in `css_import?'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/engine.rb:294:in `block in _dependencies'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/tree/node.rb:163:in `each'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/tree/node.rb:164:in `block in each'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/tree/node.rb:164:in `each'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/tree/node.rb:164:in `each'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/engine.rb:293:in `grep'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/engine.rb:293:in `_dependencies'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/engine.rb:282:in `dependencies'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/sass-3ee1e35e2dfa/lib/sass/plugin/rails.rb:53:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/template.rb:278:in `compile'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/template.rb:214:in `compile!'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/template.rb:138:in `block in render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/notifications.rb:54:in `instrument'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/template.rb:137:in `render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/renderer/template_renderer.rb:64:in `block (2 levels) in render_template'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/renderer/abstract_renderer.rb:34:in `block in instrument'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/notifications.rb:52:in `block in instrument'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/notifications.rb:52:in `instrument'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/renderer/abstract_renderer.rb:34:in `instrument'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/renderer/template_renderer.rb:63:in `block in render_template'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/renderer/template_renderer.rb:71:in `render_with_layout'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/renderer/template_renderer.rb:62:in `render_template'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/renderer/template_renderer.rb:18:in `block in render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/renderer/abstract_renderer.rb:23:in `wrap_formats'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/renderer/template_renderer.rb:16:in `render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/rendering.rb:99:in `_render_template'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_view/rendering.rb:27:in `render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/haml-87c0810609d3/lib/haml/helpers/action_view_mods.rb:13:in `render_with_haml'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/abstract_controller/rendering.rb:128:in `_render_template'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/abstract_controller/rendering.rb:122:in `render_to_body'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/renderers.rb:29:in `render_to_body'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/compatibility.rb:46:in `render_to_body'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/abstract_controller/rendering.rb:115:in `render_to_string'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/abstract_controller/rendering.rb:106:in `render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/rendering.rb:16:in `render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/instrumentation.rb:40:in `block (2 levels) in render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/core_ext/benchmark.rb:5:in `block in ms'
/home/bug/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/benchmark.rb:309:in `realtime'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/core_ext/benchmark.rb:5:in `ms'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/instrumentation.rb:40:in `block in render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/instrumentation.rb:78:in `cleanup_view_runtime'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activerecord/lib/active_record/railties/controller_runtime.rb:15:in `cleanup_view_runtime'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/instrumentation.rb:39:in `render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/implicit_render.rb:10:in `default_render'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/implicit_render.rb:5:in `send_action'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/abstract_controller/base.rb:150:in `process_action'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/rendering.rb:10:in `process_action'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/abstract_controller/callbacks.rb:18:in `block in process_action'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/callbacks.rb:428:in `_run__1612961810420319057__process_action__4496386423255590499__callbacks'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/callbacks.rb:402:in `_run_process_action_callbacks'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/callbacks.rb:93:in `run_callbacks'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/abstract_controller/callbacks.rb:17:in `process_action'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/instrumentation.rb:30:in `block in process_action'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/notifications.rb:52:in `block in instrument'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/notifications.rb:52:in `instrument'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/instrumentation.rb:29:in `process_action'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/rescue.rb:17:in `process_action'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/abstract_controller/base.rb:119:in `process'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/abstract_controller/rendering.rb:39:in `process'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal.rb:144:in `dispatch'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_controller/metal.rb:183:in `block in action'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/routing/route_set.rb:62:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/routing/route_set.rb:62:in `dispatch'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/routing/route_set.rb:27:in `call'
rack-mount (0.6.13) lib/rack/mount/route_set.rb:148:in `block in call'
rack-mount (0.6.13) lib/rack/mount/code_generation.rb:93:in `block in recognize'
rack-mount (0.6.13) lib/rack/mount/code_generation.rb:68:in `optimized_each'
rack-mount (0.6.13) lib/rack/mount/code_generation.rb:92:in `recognize'
rack-mount (0.6.13) lib/rack/mount/route_set.rb:139:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/routing/route_set.rb:520:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rack-812ac75b327c/lib/rack/etag.rb:23:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rack-812ac75b327c/lib/rack/conditionalget.rb:25:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/head.rb:14:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rack-812ac75b327c/lib/rack/methodoverride.rb:24:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/params_parser.rb:21:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/flash.rb:182:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rack-812ac75b327c/lib/rack/session/abstract/id.rb:192:in `context'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rack-812ac75b327c/lib/rack/session/abstract/id.rb:187:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/cookies.rb:305:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activerecord/lib/active_record/query_cache.rb:32:in `block in call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:26:in `cache'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activerecord/lib/active_record/query_cache.rb:12:in `cache'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activerecord/lib/active_record/query_cache.rb:31:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:352:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/callbacks.rb:408:in `_run_call_callbacks'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/callbacks.rb:28:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/reloader.rb:68:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rack-812ac75b327c/lib/rack/sendfile.rb:102:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/railties/lib/rails/rack/logger.rb:13:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rack-812ac75b327c/lib/rack/runtime.rb:17:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/activesupport/lib/active_support/cache/strategy/local_cache.rb:72:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rack-812ac75b327c/lib/rack/lock.rb:34:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/actionpack/lib/action_dispatch/middleware/static.rb:60:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/railties/lib/rails/engine.rb:414:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/railties/lib/rails/railtie/configurable.rb:28:in `method_missing'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-199d1abeb290/railties/lib/rails/rack/log_tailer.rb:14:in `call'
/home/bug/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rack-812ac75b327c/lib/rack/handler/webrick.rb:52:in `service'
/home/bug/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/webrick/httpserver.rb:111:in `service'
/home/bug/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/webrick/httpserver.rb:70:in `run'
/home/bug/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'
</pre>


it fails only when using @import
",slbug,import
33,2011-03-08 09:37:31,"I have the same issue.

After a little debugging it looks like the problem is that there are two separate  @checked_for_updates instances variables.

The Sass::Plugin#checked_for_updates method returns the instance variable @checked_for_updates on the Sass::Plugin module. This never changes and is always false.

When the Sass::Plugin::Compiler#update_stylesheets method runs it sets it's own instance variable @checked_for_updates to true and but this is not the variable that is checked when deciding whether to update the stylesheets (see above).

It looks like the source of the problem is commit 82671fc when the compiler code was refactored out of the plugin module.

We have side stepped the issue for the moment by setting the SASS to never update in production but I could provide a patch if you wish.
",mocoso,checked
25,2010-11-22 08:49:11,"I feel like we had this discussion long ago when we were first introducing `@if` and booleans, but I don't remember what our reasoning was. I'm not opposed to the idea of using `is` and `is not`, but I do have two hesitations. First, I feel like having a more programmery punctuation-heavy operator calls attention to the fact that this is doing something different than CSS (although since boolean operations universally happen in the context of `@if` or possibly variable assignment, that's somewhat less relevant). The other worry I have is that this isn't a big enough issue that the cost of migrating existing stylesheets is outweighed by the benefit of the new syntax. I'm certainly not convinced of that, though.
",nex3,if
24,2010-11-05 22:21:41,"After patching the above, I ran into more related errors.  All Haml pages returned by Rails had this error:
    undefined method `encode' for ""@charset \"""":String

So it looks like the workaround needs to be more general than my initial suggestion.
Revised: 

/lib/haml/util.rb
      def ruby1_8?
    -      Haml::Util::RUBY_VERSION[0] == 1 && Haml::Util::RUBY_VERSION[1] < 9
    +      ::RUBY_ENGINE==""ironruby"" || # IronRuby claims to be 1.9, but is not compatible
    +      (Haml::Util::RUBY_VERSION[0] == 1 && Haml::Util::RUBY_VERSION[1] < 9)
      end
",CrazyPyro,charset
17,2012-11-30 13:16:41,"It doesn't work for me, too. My config is that I have the `styles` folder within which I have a symlink named `other` to a directory containing another `main.scss`. In my `styles/main.scss` file I have `@import other/main.scss`. It doesn't matter if I invoke watch using:



or:



changes in the second file are not detected.
",mgol,import
12,2010-10-07 19:05:02,"Using @extend in SASS has resulted in massive selectors in CSS.  One of my CSS selectors is 4000 characters long.  Chrome has been crashing and I think it has to do this my use of @extend.  Can you comment?
",thinkslate,extend
12,2010-10-07 20:04:35,"I'm not sure what sort of comment you're looking for. Yes, if you use `@extend` a lot on the same selector, that selector will expand a lot. I think `@extend` works in a reasonably predictable way and this is a reasonably predictable consequence. It's definitely unfortunate that browsers can't handle long selectors, but there's not really a great way to shorten them here. I suppose one suggestion I have is to avoid using `@extend` in nested selectors in areas where you have problems.

I'm closing this because it's not really a bug report or feature request. If you have concrete suggestions for improving the situation, feel free to re-open.
",nex3,extend
12,2010-10-07 20:43:05,"nex3: That's pretty much all I was looking for -- I appreciate the explanation.  Mainly, I am not very familiar with how `@extend`is implemented and wanted to know if there might be something in the sauce that could **predictably** and unduly expand in the process of using them.

Thanks again,
Devin
",devn,extend
12,2011-11-22 01:51:01,"I realize this has been closed for some time now, but since there was a recent comment it caught my attention. I think it would have been helpful in retrospect to define some sort of reasonable threshold for `max_selector_length_before_warning` to let the user know about the gigantic selectors being produced as a result of misusing `@extend`. Food for thought.
",devn,extend
6,2010-10-02 17:32:53,"This branch implements nested `@media` directives.
",chriseppstein,media
2,2010-09-22 22:43:48,"If a CSS @import is specified anywhere except the start of a document, it should be moved to the before the first selector or else it will be ignored by the browsers.
",chriseppstein,import
2,2011-06-27 22:16:30,"@hcatlin the cssize visitor is the right place to implement this. The import nodes that are css imports will have been rewritten to directive nodes during the perform step. See Cssize#visit_root for how we handle the @charset directive which has a similar behavior.
",chriseppstein,charset
2,2011-10-21 10:01:48,"We encountered the problem, that putting an @import directive into a included partial.scss that @imports is ""somewhere"" in the compiled.css file. That doesn't work. 
All @imports have to be at the top of the compiled file.

we tried to include a google web font
@import url(""http://fonts.googleapis.com/css?family=Leckerli+One"");

Would be nice if you could push these directives to the top of the compiled file

Thanks Mark
",markrambow,imports
2,2011-10-21 10:01:48,"We encountered the problem, that putting an @import directive into a included partial.scss that @imports is ""somewhere"" in the compiled.css file. That doesn't work. 
All @imports have to be at the top of the compiled file.

we tried to include a google web font
@import url(""http://fonts.googleapis.com/css?family=Leckerli+One"");

Would be nice if you could push these directives to the top of the compiled file

Thanks Mark
",markrambow,import
1,2010-09-22 22:42:13,"Sass needs to handle the case where @charset is specified in an imported file by moving the @charset directive to the start of the document and normalizing different charsets across all imported files.
",chriseppstein,charset
1,2012-11-01 18:10:02,"This is again an issue in whatever new release of SASS. 

I have a ""_scaffolding.scss"" file that is imported by all my main .scss files. In it are all my common imports and my @charset declaration. All of the sudden my files show `@charset ""IBM437""` after updating to the most recent version of SASS. It is fixed when I put the declaration on the actual .scss file.
",ultimatedelman,charset
1,2012-11-03 00:50:51,"ok let's say i have a file `main.scss` that generates a `main.css` file. let's also say i have a file named `_partial1.scss` in my `/partials/` folder.

my `main.scss` file looks like this:

`@import ""partials/_partial1"";`

and my `_partial1.scss` file looks like this:

`@charset ""utf-8"";`

the `main.css` file output then looks like this:

`@charset ""IBM437"";` 

instead of:

`@charset ""utf-8"";`
",ultimatedelman,charset
1,2012-11-03 00:50:51,"ok let's say i have a file `main.scss` that generates a `main.css` file. let's also say i have a file named `_partial1.scss` in my `/partials/` folder.

my `main.scss` file looks like this:

`@import ""partials/_partial1"";`

and my `_partial1.scss` file looks like this:

`@charset ""utf-8"";`

the `main.css` file output then looks like this:

`@charset ""IBM437"";` 

instead of:

`@charset ""utf-8"";`
",ultimatedelman,import
1,2012-11-09 19:41:25,"That may still be a Sass issue. Sass has a lot of internal `@charset` handling.

Do either of your files have any non-ASCII characters in them at all? What do you get if you run `ruby -e 'p [Encoding.default_internal, Encoding.default_external]'` on the command line?
",nex3,charset
