issue_num,datetime,body,login,mention_login
4774,2017-03-28 00:36:44,"Hi @sirvon. Thanks for writing in. I wanted to let you know that someone will review what you've shared and follow-up with you soon. In the meantime, would you be able to provide us with the actual version of Realm you're using (since ""Latest"" can change between response times) as well as the iOS or macOS version you're compiling for. Thanks.",istx25,sirvon
4772,2017-03-28 00:37:59,Hi @scottazord! I wanted to let you know that we've received your question and that someone will follow-up with you hear and provide an answer soon. Still working through the backlog from the weekend and whatnot. Thanks!,istx25,scottazord
4770,2017-03-24 23:59:26,@bdash I just completed the CLA. I hope you are fine with the changes I made since I opened this pull request.,0xced,bdash
4769,2017-03-24 19:51:36,"Hi @santhoshs5!

Yep! If you want to delete all objects of a particular type, but preserve the rest of the contents of a Realm file, you can query for just those objects and then delete them manually.



I hope that helped! Let me know if you have any more questions. :)",TimOliver,santhoshs5
4769,2017-03-25 03:47:59,"As @TimOliver mentioned, you can do what you're after by combining `Realm.objects(_:)` and `Realm.delete(_:)`.



This only differs in a minor way from the syntax you're requesting, and provides the behavior you're after. Is there some reason you take issue with it?",bdash,TimOliver
4769,2017-03-25 14:00:29,Thanks @bdash ,santhoshs5,bdash
4768,2017-03-24 20:03:43,"Hi @tbaranes! Thanks for the info! Sorry to hear you're having some trouble here.

There's probably not a lot we can do without a sample app to let us properly examine what's going on here. Would you even be able to post some sample code of the actual write transaction that's causing this failure? You can email it to `help@realm.io` if you need to keep it private.

Thanks!",TimOliver,tbaranes
4766,2017-03-24 16:47:06,Hey @bb-git! Thanks for reaching out. I wanted to let you know that we've seen your message and that someone will follow-up with you as soon as we can.,istx25,bb-git
4766,2017-03-24 20:38:38,"Hi there @bb-git! Can you please give us some more information? Sample code would be the best.

Specifically, can you show us your model objects both before and after you updated them, as well as how you've set up the migration block? Thanks a lot!",TimOliver,bb-git
4766,2017-03-25 00:16:58,"I can attach some code soon. But the strange thing is, the data that is lost is a realm model, that was not changed at all. Another model was changed with the update. The migration block is empty, I just increased the version number. 


> Am 25.03.2017 um 03:38 schrieb Tim Oliver <notifications@github.com>:
> 
> Hi there @bb-git! Can you please give us some more information? Sample code would be the best.
> 
> Specifically, can you show us your model objects both before and after you updated them, as well as how you've set up the migration block? Thanks a lot!
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 
",bb-git,bb-git
4765,2017-03-24 16:44:15,@kajensen: Please follow-up on that issue showing your support for the feature. :) Closing this issue since it's basically a duplicate.,istx25,kajensen
4762,2017-03-23 19:00:05,"To add to what @Zhuinden mentioned, I also recommend looking at the ""Threading"" section of the documentation but especially the subsection titled: [Passing Instances Across Threads](https://realm.io/docs/swift/latest/#passing-instances-across-threads). As of v2.2.0, you can pass instances across threads using the `ThreadSafeReference` object.

Please let us know if you have any questions.",istx25,Zhuinden
4761,2017-03-23 18:48:30,"Hi @grangej. Thanks for reaching out about this. I wanted to let you know that we've seen your issue and that someone will be following-up with you soon. While you wait, would you be able to provide us with exactly which Realm version you're using (and not just ""Latest"") since sometimes we send out updates in between response times. Thanks!",istx25,grangej
4761,2017-03-23 19:30:48,"@istx25 Thank you for following up. 

The versions that we are using here are:



We have ran some additional tests this morning and have some additional findings: 

If you create two background threads even AFTER the subscription only one of them seems to emit changes. 

For example, the following code only one of the changes will ever be observed. 



If we change the code to the following though both changes will be seen:

",grangej,istx25
4761,2017-03-24 20:53:01,Hi @grangej! I can't help but feel like this might be an issue more on RxRealm's side of things than Realm Swift directly. Have you considered [filing an issue on the RxRealm repo](https://github.com/RxSwiftCommunity/RxRealm/issues)?,TimOliver,grangej
4761,2017-03-24 23:51:20,@TimOliver Let me test with straight realm code and I will let you know.,grangej,TimOliver
4761,2017-03-27 17:34:00,"@TimOliver You are correct I tried the following code: and it works , but looking at the RxRealm code for changeset it makes no sense why it would not work. I stepped through the code in RxRealm and the observer is never receiving one of the notifications in the notification block. So I still think this is a RealmSwift issue since the RxRealm code block never receives one of the update notifications for some reason. Thread issue? Race condition? Something funny here. 

`          
// This does not work, I end up losing one of the notifications (in the middle in this case)

 let changeNote = Observable.changeset(from: operations, synchronousStart: false).share()
 changeNote.subscribe(onNext: { (objects, changes) in
                
                
                print(objects.first?.taskState)
                
                if changes != nil {
                    
                    print(""Updates received "")
                    
                    
                    count = count + 1
                }
                
                
                
            }, onError: { (error) in
                
                print(""error: \(error.localizedDescription)"")
                
            }, onCompleted: {
                
                print(""complete"")
                
            }, onDisposed: {
                
                print(""Disposed"")
                
            }).addDisposableTo(self.disposeBag)`


// for reference the relevant RxRealm code

    public static func collection(from collection: E, synchronousStart: Bool = true) -> Observable<E> {
        return Observable.create {observer in
            if synchronousStart {
                observer.onNext(collection)
            }

            let token = collection.addNotificationBlock {changeset in

             // THIS Block never gets called for some updates when I set breakpoint in here. 

                let value: E

                switch changeset {
                    case .initial(let latestValue):
                        guard !synchronousStart else { return }
                        value = latestValue

                    case .update(let latestValue, _, _, _):
                        value = latestValue

                    case .error(let error):
                        observer.onError(error)
                        return
                }

                observer.onNext(value)
            }

            return Disposables.create {
                token.stop()
                observer.onCompleted()
            }
        }
    }
`

// this does work, but I suspect that it may be simply a timing issue so it may not /always/ work.
            self.realmToken = operations.addNotificationBlock({ (changes) in
                
                
                switch changes {
                    
                case .update(let objects, deletions: let deletions, insertions: let insertions, modifications: let modifications):
                    
                    count = count + 1
                    
                    print(""Realm Update Notification"")
                    
                    print(""Modifications: \(modifications)"")
                    print(""Deletions: \(deletions)"")
                    print(""insertions: \(insertions)"")
                    
                    print(""Updated Objects: \(objects)"")
                    
                    for object in objects {
                        
                        if !fulfilled {
                            
                            print(""Object TaskState: \(object.taskState)"")
                            
                            if object.taskState == .Finished {
                                
                                fulfilled = true
                                waitForStart.fulfill()
                            }
                            
                        }
                        
                    }
                    
                case .initial(let objects):
                    
                    print(""Realm Initial Notification"")
                    
                    print(objects)
                    
                case .error(let error):
                    
                    print(""Error: \(error.localizedDescription)"")
                    
                    
                }
                
                
            })

`",grangej,TimOliver
4758,2017-03-22 17:11:03,"Hi @Elenionl. Thanks for reaching out about this. I could be wrong but I believe you're experiencing a problem that's more related to CocoaPods than it is Realm. If you're interested, you can read more about this issue here: https://github.com/CocoaPods/CocoaPods/issues/6454 and https://github.com/realm/realm-cocoa/issues/4614.

As for a workaround until they've fixed https://github.com/CocoaPods/CocoaPods/issues/6454, supposedly you can run the following commands:



and try again. Please let me know if you have any issues or if this doesn't work and we can continue debugging or escalate this issue if necessary.",istx25,Elenionl
4754,2017-03-21 19:25:02,"Hi @jovanpreet. Thanks for reaching out. Would you be able to share a code sample demonstrating your issue? From there, the engineers will be able to better assist you.",istx25,jovanpreet
4754,2017-03-23 20:55:41,"@jovanpreet Good to hear that disabling `autorefresh` fixed the issue for you!

Unfortunately, since the notification mechanism works by refreshing at the start of a new runloop iteration, making it so Realm and the notification blocks are triggered synchronously isn't very feasible.

If you have logic in your code where you explicitly need to update the collection view right after you've written new data to Realm, you can use [`Realm.commitWrite(withoutNotifying:)`](https://realm.io/docs/swift/2.4.4/api/Classes/Realm.html#/s:FC10RealmSwift5Realm11commitWriteFzT16withoutNotifyingGSaCSo20RLMNotificationToken__T_) to perform the write without triggering the notification block, and then manually performing the UI update code yourself.

I hope that helps!",TimOliver,jovanpreet
4753,2017-03-21 19:23:02,Hi @kunalsood. Thanks for reaching out about this. I'll get some eyes on this and see what we can do to work around this problem.,istx25,kunalsood
4753,2017-03-24 20:20:55,"Hi @kunalsood! Thanks for your issue. I just had a little look into it, and it looks like you may have highlighted a weakness in our API. Realm notification tokens are paired with a specific Realm instance, so they can't be used with different instances pointing to the same Realm backing on background threads. Unfortunately there doesn't seem to be a way to create a thread reference for tokens.

@tgoyne or @austinzheng might be able to shed some additional light on this. It might be worth adding this to our feature list.",TimOliver,kunalsood
4751,2017-03-20 18:42:15,"Hi there @Nik20112! Thanks for the issue!

What do you mean by a 'PPT file' exactly? Are you referring to a Microsoft PowerPoint file?

Thanks a lot!",TimOliver,Nik20112
4750,2017-03-20 16:51:03,Hi @CedricVanAsch. Thanks for reaching out! I've escalated this to one of the Cocoa engineers who will be able to review your code sample and follow-up with you.,istx25,CedricVanAsch
4750,2017-03-21 08:43:57,"@Alex293 I'm not ordering my collection by that property. Here is some info on how the `favoriseItemRealm(realmProducer, textAdded: ""addedRetailer"", textDeleted: ""deletedRetailer"", view: self, button: nil)` looks like (i think this is where my crash is caused, since this is where I modify the .favorite part of the Producer I just selected in my Collectionview):

",CedricVanAsch,Alex293
4750,2017-03-21 11:08:28,"@stel Hi,
I implemented both your changes as requested, but with the exact same result.

> Assertion failure in -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:], /SourceCache/UIKit/UIKit-3347.44.2/UICollectionView.m:3870
> 2017-03-21 12:07:50.029 promobutler-ios[1433:244897] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'attempt to delete item 49 from section 0 which only contains 4 items before the update'
> *** First throw call stack:
> (0x2708a137 0x35514c77 0x2708a00d 0x27d89bc9 0x2aceade3 0x2acee8ab 0x2acee70f 0x2a8ab05b 0x20298c 0x276d670 0x276d7a8 0x27339a4 0x1fedb71 0x1fed735 0x1f68bc9 0x1f68b33 0x1f5f765 0x1f5f66d 0x1fa4873 0x20f92c7 0x215b8b9 0x215c115 0x215c101 0x2705022f 0x2704f643 0x2704dcc1 0x26f999a1 0x26f997b3 0x2e95b1a9 0x2a74a635 0x1a85c0 0x35ae2aaf)
> libc++abi.dylib: terminating with uncaught exception of type NSException ",CedricVanAsch,stel
4750,2017-03-21 13:19:30,"@stel what exactly do you mean with check the indexes in the notification handler? 
So this is what I got for the numbers. the 0 153 represents the section (0) and the items (153)



the prints from my logs
> Get numberOfItemsInSection 0 153
data from didSelectItem -> Producer {
	id = 1234;
	name = ALDI;
	nameNL = ALDI;
	nameFR = ;
	logoUrl = mockupurl.com;
	siteUrl = mockupurl.com;
	favorite = 1;
}
modifying: 3
Get numberOfItemsInSection 0 153
2017-03-21 14:16:07.631 promobutler-ios[1602:265648] *** Assertion failure in -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:], /SourceCache/UIKit/UIKit-3347.44.2/UICollectionView.m:3870
2017-03-21 14:16:07.940 promobutler-ios[1602:265648] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'attempt to delete item 49 from section 0 which only contains 4 items before the update'
*** First throw call stack:
(0x2708a137 0x35514c77 0x2708a00d 0x27d89bc9 0x2aceade3 0x2acee8ab 0x2acee70f 0x2a8ab05b 0x1ed6bc 0x2758670 0x27587a8 0x271e9a4 0x1fd8b71 0x1fd8735 0x1f53bc9 0x1f53b33 0x1f4a765 0x1f4a66d 0x1f8f873 0x20e42c7 0x21468b9 0x2147115 0x2147101 0x2705022f 0x2704f643 0x2704dcc1 0x26f999a1 0x26f997b3 0x2e95b1a9 0x2a74a635 0x1932f0 0x35ae2aaf)
libc++abi.dylib: terminating with uncaught exception of type NSException
",CedricVanAsch,stel
4749,2017-03-19 00:34:48,"@mihailsalari: I wanted to chime in here and affirm that @bdash's example ([available here](https://gist.github.com/bdash/799e9c496d387bda98e196289e2def71)) indeed works and that I also saw an object returned during my own testing.

We are happy to help you resolve this (and any other) issue you may experience (now or in the future) but I/we don't appreciate the personal attacks on @bdash or anyone else. 

**Please take some time to read through [Realm's Code of Conduct](https://realm.io/conduct).**",istx25,mihailsalari
4749,2017-03-19 00:34:48,"@mihailsalari: I wanted to chime in here and affirm that @bdash's example ([available here](https://gist.github.com/bdash/799e9c496d387bda98e196289e2def71)) indeed works and that I also saw an object returned during my own testing.

We are happy to help you resolve this (and any other) issue you may experience (now or in the future) but I/we don't appreciate the personal attacks on @bdash or anyone else. 

**Please take some time to read through [Realm's Code of Conduct](https://realm.io/conduct).**",istx25,bdash
4748,2017-03-17 15:46:30,"Thanks for filing this @rscholtes. I was able to reproduce the issue with the project you sent. As far as I understand this, this would be a bug. But I'd like @tgoyne to confirm in case there's something else at play here.",jpsim,rscholtes
4747,2017-03-17 17:37:10,"Thanks for reporting this @markst, I'm looking into it.",jpsim,markst
4747,2017-03-20 02:38:07,"@jpsim I think this is largely to do with Realm not complaining when setting a relationship from a different realm. i.e:


Resolution for above exception is:

",markst,jpsim
4744,2017-03-21 16:10:04,Sorry for the disruption @austinzheng. This PR just happened to be the first one I found during my tests earlier today.,emanuelez,austinzheng
4744,2017-03-21 16:20:12,"No worries @emanuelez, I just didn't want you to be misled because of all the failures :).",austinzheng,emanuelez
4740,2017-03-16 17:33:18,"As @tgoyne mentioned, your `List<T>` properties should be declared with `let` rather than `var` as assigning directly to them has no effect. Using `let` will catch this problem at compile time. Instead of assigning to a `List<T>` property, you should instead mutate it in place.",bdash,tgoyne
4739,2017-03-15 16:21:11,"Hey @i-am-chris! I am personally quite new to RMP but I believe the problem you're experiencing has to do with the fact that you're creating an instance to a non-default Realm and using it to persist the `dataRoom` object in `logInWithCredentials` scope but you're looking for the object in the default Realm by using `[room allObjects]`.

Read [Queries](https://realm.io/docs/objc/latest/#queries) for more information. Namely the code block at the bottom of the section stating: `RLMResults<Dog *> *dogs = [Dog allObjects];` retrieves all Dogs from the default Realm.

I recommend initializing your custom Realm outside of the `logInWithCredentials` scope such as:



Then make use of `myCustomRealm` inside the `logInWithCredentials` scope:



And then fetching all of the objects using:



This would ensure you're using the same Realm when persisting objects and looking for objects.",istx25,i-am-chris
4739,2017-03-20 14:46:31,"Hello back @austinzheng, @teotwaki, @istx25 

Can you give me a full example on how to get data?
I am mostly intrigued on how to use this on  given array, when i call the mobile DB for updates. 
(think about updates on a chat room - which can be a very good example on how to move this data async)

Objective-c obviously - might be old-school but i am looking fwd into implementing this

Thanks,
Chris",i-am-chris,austinzheng
4739,2017-03-20 14:46:31,"Hello back @austinzheng, @teotwaki, @istx25 

Can you give me a full example on how to get data?
I am mostly intrigued on how to use this on  given array, when i call the mobile DB for updates. 
(think about updates on a chat room - which can be a very good example on how to move this data async)

Objective-c obviously - might be old-school but i am looking fwd into implementing this

Thanks,
Chris",i-am-chris,istx25
4738,2017-03-15 15:47:42,"Hi @twomedia. Sorry to hear you've ran into this problem. Would you be able to show us the entire model object itself as well as how `message` from `message.saleId` is created prior to using it? With that information, we'll be able to get to the bottom of this better.",istx25,twomedia
4736,2017-03-15 15:43:58,Hi @bruce-lumo! Please update Realm to at least v2.4.3 (but I recommend running the latest version which is v2.4.4). #4598 fixed one of the circumstances that caused the issue but it's possible if you're still experiencing the issue that we've found another circumstance.,istx25,bruce-lumo
4736,2017-03-15 15:44:01,@Florelit: Please file another issue with your own set of repro steps and information. It's possible there are multiple issues causing this to happen or some other reason in your codebase. Thanks!,istx25,Florelit
4735,2017-03-14 21:25:03,"@bdash Yep, ended up finding similar info here right before you commented: https://www.nginx.com/blog/websocket-nginx/

Seems to be getting me further now, but still won't connect. Getting messages about ""Using already open Realm file"" and then it closes the Realm file and I get this: ""Sync: Connection[3]: Session[1]: Sending: UNBIND""

Still probably something up with my Nginx config, but at least I'm getting closer. Maybe I'm not forwarding all necessary headers or something.

For what it's worth I tried the exact location block from your link as well as what I had tried based on the info I found and am getting similar issues.

Anyway once I get it working I'll post my complete config.",einsteinx2,bdash
4734,2017-03-14 22:48:28,Hi @einsteinx2. Thanks for filing this issue. I've marked this issue with `T:Help` for now but I'm going to assign this issue to one of our Cocoa engineers to evaluate what you're experiencing further and determine if a fix on our side is necessary. Cheers.,istx25,einsteinx2
4734,2017-03-15 22:12:47,"@bdash Yep, that was it! Looks to be working now.

In any case, that seems like a bug, no? I would expect to be able to change log levels at any time, or at the very least have the new log level take effect the next time a Realm is created. Same with the error handler.

At the very least, it's a documentation bug. There's no mention of this requirement in either the Swift logging section (which just says: ""The synchronization subsystem supports a number of logging levels, useful while developing an app. These can be selected by setting the logLevel property on the SyncManager singleton to the desired verbosity"") or the Realm Object Server documentation Logging section which is linked to from the Swift docs for more information (btw that link takes you to the top of the documentation rather than directly to the Logging section which made me assume at first it was a broken link until I found the section myself).",einsteinx2,bdash
4733,2017-03-14 22:45:32,Hi @timbroder. Thanks for sharing all of this! I personally don't know what would be causing this issue but I wanted to let you know that we've seen the issue and that I'm going to assign this to one of our Cocoa engineers who will read through this and follow-up soon. Cheers!,istx25,timbroder
4733,2017-03-16 13:34:56,@gordanyang can you post sample code so we have more examples?,timbroder,gordanyang
4733,2017-03-20 13:11:10,"@Zeeker did you notice a difference in transaction length? This seems to have cropped up when we're doing more in each transaction; EG 1 transaction looping over 20 object updates, vs 20 transactions",timbroder,Zeeker
4733,2017-03-22 21:34:20,"@Zeeker That's interesting! Could you please elaborate some more on what your app was doing at its startup? Were they on a background thread?

There shouldn't be a need to manually line up write transactions sequentially, so I'm wondering how these transactions are being handled.",TimOliver,Zeeker
4733,2017-03-23 13:41:50,"@TimOliver I'm currently in the process of refactoring the app quite a bit and also touched the problematic code during that.

In the past the transactions were done in the main thread; after my refactoring everything is now done in a background thread. It seems that this has also solved the issue. For testing purposes I've moved the logic back into the main thread and indeed that led to a crash.

Regarding your other question (what the app was doing at its startup), I'm not entirely sure what you are getting at and I can't really list everything we are doing, as that would be quite verbose.",Zeeker,TimOliver
4733,2017-03-23 22:51:08,"@Zeeker Okay no worries. I was curious as to what those three requests were and what order they may have been occurring in each time. Never mind.

---

In any case, it's good to know that moving the transactions to a background thread mitigated the immediate problem. But it would be excellent if anyone would be willing to post a sample app reproducing the issue in order for us to analyze the problem.

Would anyone be able to do that? It would help us out a lot. :)",TimOliver,Zeeker
4732,2017-03-14 22:42:59,Hi @molind. Thanks for writing in. Would you be able to provide us with a sample project that includes your model classes themselves as well as enough code to reproduce the problem when we build/run the project?,istx25,molind
4732,2017-03-15 07:16:29,"Hi @istx25. We'll try to gather all our db related code into one project. Just to make it clear. Do you think it's bug, or it works as expected when modifies primary key of object? ",molind,istx25
4732,2017-03-16 22:30:49,Thanks for taking the time to prepare this @molind. I'm going to put this on hold until we can run your repro case without being blocked by realm/realm-mobile-platform#112.,jpsim,molind
4731,2017-03-22 21:21:42,@tkallioras Just following this issue up. :) Are you able to provide us with a back trace of the C++ exception?,TimOliver,tkallioras
4731,2017-03-23 17:36:48,@TimOliver I will try to rewrite the code and replicate the issue the following days and post the back trace.,tkallioras,TimOliver
4730,2017-03-13 18:52:00,"Thanks for asking these questions, @dakeshi! We should certainly update our docs to reflect that Alcatraz requires resigning Xcode.

As for your second question, the ""Open Realm..."" menu item is only added if the Realm Browser is installed on your Mac. https://github.com/realm/realm-cocoa/blob/v2.4.3/plugin/RealmPlugin/RLMPRealmPlugin.m#L87-L108",jpsim,dakeshi
4730,2017-03-14 05:12:29,"Thanks for your response @jpsim 

>We should certainly update our docs to reflect that Alcatraz requires resigning Xcode.

I’m not sure that we need to mention how to resign or unsign Xcode 8. 
Without Alcatraz support and resigning/unsigning Xcode, we can successfully install RealmPlugin in Xcode 8(with release.zip)
Using Alcatraz is more convenient but it is not the mandatory to use RealmPlugin, I think. 
If some users want to install RealmPlugin using Alcatraz tools, 
they could get the solution from the Alcatraz repo.

> As for your second question, the ""Open Realm..."" menu item is only added if the Realm Browser is installed on your Mac. https://github.com/realm/realm-cocoa/blob/v2.4.3/plugin/RealmPlugin/RLMPRealmPlugin.m#L87-L108

Even though I installed Realm Browser from Mac Store, I have not found out “Open Realm…”  menu under File menu in the Xcode 8.2.1.  I checked the Browser path with source you mentioned

> let urlString = NSWorkspace.shared().fullPath(forApplication: ""Realm Browser"")

urlString is ”/Applications/Realm Browser.app"". How to solve this issue?",dakeshi,jpsim
4730,2017-03-23 00:40:51,"Thanks for your reply. @jpsim 
Yes. I'm get successfully installed file template, lldb plugin but not file menu.
So, we could say the plugin is not perfectly installed.  

I hope that docs will be updated as soon as possible to provide the correct info.",dakeshi,jpsim
4725,2017-03-09 19:15:10,"Hi @canny09, the code and explanations you shared is not enough to understand what is happening.

What I suspect is happening is that different threads are at different versions of the transaction history. This is a key behavior of Realm's thread safety, consistency and isolation of transactions. See our [Threading](https://realm.io/docs/objc/latest/#threading) docs for details.

What you could do to ensure your background thread sees the latest version of the Realm would be to call [`-[RLMRealm refresh]`](https://realm.io/docs/objc/latest/api/Classes/RLMRealm.html#/c:objc(cs)RLMRealm(im)refresh) at the beginning of the GCD block:



Even then, depending on the rest of your code, there could be a race condition where between the refresh and the write transaction, other changes are made, so you could leverage Realm's single-writer pattern to do this:

",jpsim,canny09
4725,2017-03-10 02:13:33,"@jpsim Thanks for reply. But I modify my code like which you suggest above, which not work successfully, the data still been.",canny09,jpsim
4725,2017-03-10 18:46:28,"@canny09 alright, how do you suggest we help you further? Could you share code with us that exhibits the same behavior you're seeing so we can investigate why that's happening?",jpsim,canny09
4725,2017-03-11 02:29:10,"@jpsim Thank you! I have checked the cause of the problem, that is my negligence. Orz... The ``friendItems ``parameter has been clean up all objects in main thread before converting to the ``MCSFriend ``.",canny09,jpsim
4725,2017-03-13 10:04:34,@canny09 does this mean you resolved your problem? Can we close this issue?,stel,canny09
4724,2017-03-10 12:20:45,"I have been able to repro locally. Here's what I did:

1. Checkout and build core (build-cocoa) at v2.3.2.
2. Checkout core at v2.3.3 (do not build)
3. Checkout and build sync (build-cocoa) at v1.3.1
4. Checkout and build cocoa at master as described above.

This matches our observations that the assembly code looks like core v2.3.2, while the headers are from v2.3.3.

If this is indeed what has happened for that release, the question then becomes _how_. Perhaps @radu-tutueanu is able to offer some insights here?",danielpovlsen,radu-tutueanu
4724,2017-03-10 17:52:15,"@radu-tutueanu has rebuilt the sync v1.3.1 release on a different machine, and the tests now pass. Thanks, @radu-tutueanu!",bdash,radu-tutueanu
4719,2017-03-13 17:44:30,"@cmavromoustakos changing the time on your device shouldn't impact your ability to open Realm files. Could you please file a new issue with detailed steps to reproduce? It's almost certainly unrelated to what this issue is tracking, which is likely corrupt file transfers to/from S3.",jpsim,cmavromoustakos
4716,2017-03-07 13:29:08,"Thanks for reporting this, @dakeshi!",stel,dakeshi
4716,2017-03-09 09:12:25,"Thanks. @stel 
But API reference is still not changed. Does It need to fix manually?
https://realm.io/docs/swift/latest/api/Typealiases.html#/s:10RealmSwift19UserCompletionBlock ",dakeshi,stel
4716,2017-03-09 15:17:19,"@dakeshi those are the docs for the latest release, 2.4.3, so the next release will include this change.",jpsim,dakeshi
4716,2017-03-10 01:44:19,"@jpsim It is the bad news for developers who prefer to read API reference through web pages, even though they can find out the correct info from source code.",dakeshi,jpsim
4714,2017-03-05 18:08:55,"Hi @freak4pc, that's very strange behavior you're seeing, and I can understand why you'd be worried about it. It sounds like it's reproducible though which should hopefully make it easy to track down and understand. If you can build an IPA of your app and share it with us at help@realm.io, I'm happy to take a look.",bdash,freak4pc
4714,2017-03-05 19:16:11,"Thanks @bdash for your prompt response
Highly appreciated

I'm gonna try creating a blank reproducible project to send to you and if that won't work I'll send an IPA or our app.

Thanks ! ",freak4pc,bdash
4714,2017-03-05 21:50:10,"@bdash Was able to more accurately pinpoint the problem. This seems to be related to a situation where, if the Realm file was deleted after creation, consecutive `try! Realm(configuration:_)` won't create a new Realm file for some reason. 

I made a reproduction project, here it is: 
[RealmNukeExample.zip](https://github.com/realm/realm-cocoa/files/819781/RealmNukeExample.zip)

A good way I could ""work around"" this for now is only destroy the realm if it's not empty, Or just deleteAll of the objects in the realm itself, instead of the Realm file. but I would still love to understand what's causing this.

Flow of things: 
1. AppDelegate initializes `OrderManager` singleton that creates the first empty realm (file exists) - `AppDelegate.swift:L16 , OrderManager.swift:L13`
2. Quite immediately after (on `viewWillAppear` of first view controller), the Realm file is deleted by a method that is supposed to make sure ""everything in the app is clean"" before initial onboarding - `ViewController.swift:L24`
3. Consecutive calls to create a fresh realm past that point don't help and the realm isn't actually being created. - `Realms.swift - Lines 19-29` 

If past that point, the next call won't have the delete (which my app won't for the second time), the realm will be created successfully after a restart of the app. 

Again, I highly appreciate your help!",freak4pc,bdash
4714,2017-03-05 22:31:37,"@bdash Thanks again. Is there anything problematic with just moving to an approach of just removing the objects of the realm instead of deleting the realm itself ? 

On the subject of deleting the file itself, Is there any way to actual understand which objects are ""retained"" in the Realm or perhaps a more verbose way to clear the cache in that situation? I assumed a `try! Realm()` always creates a new Realm file if one doesn't exist. Since realms can be created in many threads where the data needs to be accessed in, it might be tricky to actually make sure everything is closed in that specific moment.

Also, in the example I posted, There is no data inserted into the Realm, it is just created and then deleted so no references should be held from any of the objects, so just the empty Realm is cached? Perhaps it could be more verbose in creating a new realm and clearing the cache if the file doesn't exist at that path anymore? (clearly aware there is probably more to this I'm not considering)

I currently changed my `destroy` to a `THRealms.reset` method just clearing the objects. Is there anything problematic with this approach? 



Many thanks,
Shai.",freak4pc,bdash
4714,2017-03-05 23:00:41,"Thanks again @bdash , I'll close this for now. My data set is relatively small so I'm fine with that cost for the added stability. 

Maybe it'll be good to consider refreshing that cache if the underlying file doesn't exist anymore, not a huge deal but just a thought :) 

Again thanks so much for the help in resolving this

Shai",freak4pc,bdash
4712,2017-03-09 01:34:10,I'm sorry to see you're seeing so many crashes @hovox. We'd love to resolve this quickly for you but need to be able to reproduce ourselves first.,jpsim,hovox
4711,2017-03-03 09:08:43,@austinzheng I see. Thank you,account-archived-270316,austinzheng
4710,2017-03-02 15:01:06,"@tungvoduc - To avoid this, you can use ThreadSafeReference https://realm.io/news/obj-c-swift-2-2-thread-safe-reference-sort-properties-relationships/ it can be passed across the threads. Follow this I was also facing the same issue, got the answer on Realm Slack Channel. ",arunlj561,tungvoduc
4709,2017-03-02 03:48:29,"Hello @tgoyne  ! Thank you for your answer!
Could you help me, how to correctly save sorted `List` with a lot of entries in main app for querying it from extension ?  
As i understand - i should create new class inherited from `Object`, create 1 variable of `List` type , and put in this variables sorted `Results` and then save in realm it ?

",denisenkoaj,tgoyne
4709,2017-03-02 22:04:50,@austinzheng Thank you! Everything is work great!,denisenkoaj,austinzheng
4708,2017-03-01 03:20:12,"@austinzheng Thanks! It works.  But that also a another problem, I must delete all objects in realm before I writing into realm again... if not, get crash 

Whether affect the performance?
",YioMidd,austinzheng
4708,2017-03-10 15:49:06,"@austinzheng Hi, austinzheng! I have another question ask for you. Is there a limit that using the ``createInDefaultRealmWithValue``to update the stored data under the condition of storing data via  ``addOrUpdateObjectsFromArray``? Because it crashed when I do that.",YioMidd,austinzheng
4706,2017-03-01 20:14:52,"Hi @kosyak. Thanks for reaching out to Realm. I'll have someone review what you've shared and follow-up with you soon. In the meantime though, I recommend you look at:

>If you’re looking to use Realm purely from Swift, consider using Realm Swift instead. The Realm Objective‑C and Realm Swift APIs are not interoperable and using them together is not supported.

You're using the Objective-C binding in Swift instead of the Swift binding in Swift. Use `import RealmSwift` instead of `import Realm` and update your code. If this doesn't help, no worries, one of the Cocoa engineers will follow-up soon. Cheers!",istx25,kosyak
4706,2017-03-01 20:55:30,"Hi @istx25, thanks for the reply. Indeed, I haven't clarify the environment where we use Realm: it's an Objective-C project currently migrating to Swift. Migration won't be complete in near future so we're still using `Realm` pod in Swift and Objective-C files.

I have updated sample project by including dummy ObjC class to reflect our use case (not sure though if that's the same as creating ObjC project and putting some Swift files in it).

Also I tried using RealmSwift in previous pure Swift sample (`swift` branch in the example repo) - no crashes there, cool.",kosyak,istx25
4704,2017-02-28 22:47:16,@austinzheng i have updated the code， and I will send a project later. thanks.,yuldong,austinzheng
4704,2017-02-28 22:51:02,"@bdash thanks for the advice, I will try your way and share the conclusion.",yuldong,bdash
4704,2017-03-01 00:45:04,"![image](https://cloud.githubusercontent.com/assets/5005006/23441122/4a906c76-fe5b-11e6-90fc-8960c0da8d6f.png)
@bdash do not add autorelease pool in loop.  @austinzheng ",yuldong,austinzheng
4704,2017-03-01 00:45:04,"![image](https://cloud.githubusercontent.com/assets/5005006/23441122/4a906c76-fe5b-11e6-90fc-8960c0da8d6f.png)
@bdash do not add autorelease pool in loop.  @austinzheng ",yuldong,bdash
4704,2017-03-01 00:53:39," added autorelease pool. 

![image](https://cloud.githubusercontent.com/assets/5005006/23441275/527ff4c8-fe5c-11e6-9c70-d0cf09b87c9f.png)
would the screenshot help?  seems changing nothing.
@bdash",yuldong,bdash
4704,2017-03-02 13:40:51,"@austinzheng 
因为当前这个问题比较紧急，而当前的项目又不能单独拉出来发给你们。
目前我的处理方式：
通过先将数据库中的相关结果[这种数据比较少]查出来，放在内存中，然后在循环中对在内存中的的结果集进行filter。从而避免在循环里面对realm进行filter.
调整后，该问题暂时解决了。
暂时将改问题关闭，后续我会将单独拉出来的project发给你们。
再次感谢
Because this problem is more urgent, and  I couldn't send you the current project in time.
Now my way:First, query the realm results [just a few data] into memory, then filtering the memory results in the loop. By avoiding query the realm in the loop. the problem has been solved for now.
so i closed this problem temporarily. The follow-up, I will send you the demonstration  project.
Thanks again.",yuldong,austinzheng
4703,2017-02-28 17:32:35,"@bdash sorry you are correct I just re-evaluated the condition and the heap allocated for the static object would be freed up with the application heap on exit.

I was using [leaker](http://left404.com/leaker/) to do leak tests but it would report this condition as a memory leak as we don't free the memory directly but it does free itself correctly for a static object when the application exits.",umarniz,bdash
4702,2017-02-28 09:38:19,"Hi @austinzheng, thanks for the quick response. Much appreciated.

For the first question, yes the crash always happens on `[RLMRealm realmWithConfiguration:error:]` `(RLMRealm.mm:271)`.

For the second question, also yes I looked into other stack traces, as you have pointed out, I can see `_handleApplicationDeactivation...` in the main thread in every stack trace. ",kanekin,austinzheng
4702,2017-02-28 17:41:03,"In general, doing work on a background thread concurrent with `exit` being called is going to be error-prone, as `exit` results in destructors being called for any C++ objects with static lifetimes. It's incredibly difficult to ensure that it's safe to continue using a library at that point as there's no guarantee that the object isn't in use while (or after) being destroyed. As @austinzheng mentions, crashes at this point most likely are not visible to users as the application was in the process of exiting anyway. The only negative impact is the crash reports.",bdash,austinzheng
4702,2017-03-04 19:23:37,The crash hasn't happened since including the patch. I think we can consider this issue to be resolved. Thank you so much for your prompt help. @austinzheng @bdash ,kanekin,austinzheng
4702,2017-03-04 19:23:37,The crash hasn't happened since including the patch. I think we can consider this issue to be resolved. Thank you so much for your prompt help. @austinzheng @bdash ,kanekin,bdash
4701,2017-02-27 17:33:53,Hi @TeunVR. Thanks for reaching out about this. Someone will review what you've shared and follow-up with you soon. Cheers!,istx25,TeunVR
4700,2017-02-27 17:40:28,Hi @dogo. Thanks for reaching out. Someone will review what you've shared and follow-up with you here soon. Cheers!,istx25,dogo
4700,2017-02-28 11:44:36,"Problem solved :D, thanks @austinzheng 
",dogo,austinzheng
4696,2017-02-24 21:01:43,"Hi @pplant. Thanks for reporting this. As you've seen, this issue was being tracked in #4590 and @bdash merged a fix for it in #4598. Please ensure you're using the latest version of Realm and if you're still seeing the issue, we can try to reproduce it here and continue with debugging.",istx25,pplant
4695,2017-02-24 21:05:20,"Hi there, @SoKoDaMie. Would you be able to provide us with what dependency manager and version(s) you are using (the screenshot you tried to share failed to upload) as well as any other supporting information that you can provide.",istx25,SoKoDaMie
4695,2017-03-09 01:03:12,"Hi @SoKoDaMie, I'm just following up on @istx25's request for more information. Thanks.",jpsim,istx25
4695,2017-03-09 01:03:12,"Hi @SoKoDaMie, I'm just following up on @istx25's request for more information. Thanks.",jpsim,SoKoDaMie
4694,2017-02-24 21:06:30,Hi @matthewtsmith. Thanks for reaching out about this! My apologies for the delay in getting back to you about this. We'll have one of the engineers review what you've shared and follow-up with a solution or additional questions. Thanks!,istx25,matthewtsmith
4694,2017-02-27 17:41:57,"Hi @matthewtsmith. Just echoing @austinzheng's request - would you be able to provide us with a sample project so we can reproduce the issue? If you'd like to share it privately, please email it to help@realm.io and link to this issue. Thanks.",istx25,austinzheng
4694,2017-02-27 17:41:57,"Hi @matthewtsmith. Just echoing @austinzheng's request - would you be able to provide us with a sample project so we can reproduce the issue? If you'd like to share it privately, please email it to help@realm.io and link to this issue. Thanks.",istx25,matthewtsmith
4694,2017-02-27 17:57:16,@austinzheng @istx25 We are not comfortable with giving you our primary code base but I will attempt to create a sample project that reproduces it.,matthewtsmith,austinzheng
4694,2017-02-27 17:57:16,@austinzheng @istx25 We are not comfortable with giving you our primary code base but I will attempt to create a sample project that reproduces it.,matthewtsmith,istx25
4694,2017-03-09 01:17:59,@matthewtsmith have you had any luck reproducing this in a shareable project? We'd love to resolve this with you. Thanks!,jpsim,matthewtsmith
4694,2017-03-16 13:28:31,"@jpsim No, unfortunately I have not had the time. I do think I will have some bandwidth today to attempt a sample project. I'm also going to update to Realm 2.4.4 to see if my main project still has the issue.",matthewtsmith,jpsim
4694,2017-03-23 17:36:29,"Hi @matthewtsmith! Did updating to the latest version of Realm solve this issue? If not, are you still able to provide us with a sample app so we can analyze the problem? Thanks a lot!",TimOliver,matthewtsmith
4694,2017-03-23 18:04:26,"@TimOliver No, I still have the issue in the latest Realm version in our main application. I did create a simple sample project that I thought might reproduce this issue but the crash did not occur. I've attached the sample project I thought would reproduce it.

My assumption with this crash is that it happens when you remove a KVO observer from a RealmObject in the main thread and then delete that same realm object in another thread. 

If you could provide some insight into what the Realm stack trace is trying to do I may be able to modify my example code to reproduce it. From what I can see it looks like its trying to go out and notify its observers of changes. As I mentioned in my first post, if I remove the ""invalidated"" observer on the RealmObject on the main thread the crash no longer occurs.

[RealmCrashExample.zip](https://github.com/realm/realm-cocoa/files/865677/RealmCrashExample.zip)
",matthewtsmith,TimOliver
4693,2017-02-24 21:08:11,Hi @EmilOsvald. Thanks for reaching out about this. My apologies for the delay in getting back to you. I'll have one of the engineers look at this and follow-up with a solution or additional questions.,istx25,EmilOsvald
4693,2017-03-15 15:55:20,"Hi @tgoyne, thank you for your input and sorry for the delay.  I cleared the decks and everything works in my refactored project like a charm. I suppose the problem was that I had done some rookie mistake in my code (as I had suspected). Would you nevertheless like to see the original version?",EmilOsvald,tgoyne
4693,2017-03-23 16:54:18,Hey @EmilOsvald! Just checking in on this issue. Would you be able to provide us with a copy of the original version of your project for us to analyse? Thanks a lot!,TimOliver,EmilOsvald
4693,2017-03-23 17:47:39,Hi @TimOliver. I went through all my previous app versions on Git but unfortunately the version of interest seems to be lost. I am sorry.,EmilOsvald,TimOliver
4693,2017-03-24 19:45:51,"@EmilOsvald Ahh okay. No problems then! It can't be helped. If you do manage to find the issue again, please let us know! Thanks!",TimOliver,EmilOsvald
4692,2017-02-24 02:41:03,"@tgoyne my data model has no property with prefix 'new'，it works correctly in Realm 2.1.0 ，but is  failed in 2.4.3.

![image](https://cloud.githubusercontent.com/assets/12148377/23288295/b05f4cb6-fa7d-11e6-856f-233625b6d842.png)
",Jinkeycode,tgoyne
4692,2017-02-24 02:43:56,"@Jinkeycode, are those all of the properties declared in your class? Is that your only model class? None of those names look like they'd be rejected by the check added by #4633.",bdash,Jinkeycode
4692,2017-02-24 03:12:06,"@bdash，oh！it's not the only model I have, I figure out that I have a property with prefix 'new'. I will fix it,thanks. Except 'new', is there any other prefix can not be used?",Jinkeycode,bdash
4692,2017-02-24 03:56:16,@bdash ，I got it. Thanks for your help !,Jinkeycode,bdash
4692,2017-02-24 21:10:32,"Do you have any other questions, @Jinkeycode?",istx25,Jinkeycode
4691,2017-02-24 21:22:07,Hi @nikunjazilen. Thanks for reaching out. We'll have someone review what you've shared and your questions and respond to you soon.,istx25,nikunjazilen
4691,2017-02-27 09:40:21,"Hi @nikunjazilen,

For the record: You can disclose 192.168.x.x addresses, as there is (usually) no security risk involved. It will make it easier to reason about if we have real IPs.

To answer your questions:

1. The `authURL` is the URL used to authentication a user, and to ""log on"" to the Realm Object Server (ie: create a session, get the authorisation tokens to access Realm files). The `syncURL` is the WebSocket URL used to access a specific Realm file. These would typically have the same hostname/IP address.
2. This is auto-generated, and based off the values provided in `authURL` and `syncURL`.
3. Different networks are supported. The Realm Object Server and the client SDKs are completely agnostic to this: if you can ping/SSH to a box, you should be able to use the sync system (assuming there are no firewall rules blocking port `tcp/9080`). I suspect the issue comes from something else than the networks. You would have to provide us with client and server logs to be able to help you further.
4. The Realm Mobile Platform is a self-hosted product. There is a free version, the Developer Edition, and then there are two paid-for versions, which provide more features: the Professional Edition, and the Enterprise Edition.
5. I suspect there is something wrong in your networking stack. Are you able to ping/ssh into the machine?
6. I don't know your networking environment, so no, I can not tell you why it doesn't work. You would have to give more information regarding the kind of networks that you're trying to communicate between, and how routing/firewalling is setup.",teotwaki,nikunjazilen
4691,2017-02-27 12:13:17,"@nikunjazilen try to investigate this issue by looking at the error messages in a console output (or just post it here) and please keep in mind that the server address is hardcoded in demo apps for simplicity, so if you change the sync server you won't be able to connect to it.

As for video streaming it's always up to you what technologies to use, personally I'd suggest you to look at some streaming protocols and libraries instead.",stel,nikunjazilen
4691,2017-03-09 01:17:28,"Hi @nikunjazilen, I'm just following up on @teotwaki's last request. Thanks!",jpsim,teotwaki
4691,2017-03-09 01:17:28,"Hi @nikunjazilen, I'm just following up on @teotwaki's last request. Thanks!",jpsim,nikunjazilen
4691,2017-03-22 21:27:25,"It's been two weeks, so I think we can safely close this. @nikunjazilen If you have any further follow-up for this issue, please feel free to re-open it. :)",TimOliver,nikunjazilen
4690,2017-02-24 21:25:43,"Hi @boboboa32. Thanks for reaching out. We'll have someone review what you've shared and follow-up with a solution and/or additional follow-up questions. In the meantime, I recommend reading through our [NSPredicate Cheatsheet](https://realm.io/news/nspredicate-cheatsheet/) in case your solution lies in there. Cheers! ",istx25,boboboa32
4689,2017-02-24 21:27:13,"Hi @JQHee. Thanks for reaching out. Unfortunately, I don't really understand your question. Would you be able to elaborate further and provide a crash log, sample code or any other supporting information that would lead us in the right direction. Thanks!",istx25,JQHee
4689,2017-03-02 18:40:37,Hi @JQHee. Just echoing my previous request. Would you be able to elaborate further or provide one or more of the things I requested above? Thanks.,istx25,JQHee
4688,2017-02-27 23:08:51,"Hi @ryanhornik-as! Thanks so much for making this change, we really appreciate it!

If you haven't signed our CLA already, please do so (you can see instructions at https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla). It's a requirement by our legal folks before I can merge this PR. If you've already signed it before let me know. Feel free to ping me if you have any questions.",austinzheng,ryanhornik-as
4688,2017-02-27 23:15:59,@austinzheng Signed it,ryanhornik-as,austinzheng
4687,2017-02-24 21:29:28,Hi @ArifADS. Thanks for reaching out. My apologies for the delay in getting back to you. Someone will review what you've shared and respond with a solution and/or follow-up questions soon.,istx25,ArifADS
4687,2017-03-03 17:24:35,"Thanks for sharing the project, @ArifADS. I was able to use it to reproduce the crash you describe.",bdash,ArifADS
4686,2017-02-22 16:50:49,"Hi @nikunjazilen. Would you be able to report what versions of tooling and Realm you're using. There's a script in the contributing guidelines which will help you determine these values, which can be found [here](https://git.io/vgxJO). From there, we'll be able to better assist you.",istx25,nikunjazilen
4685,2017-02-22 16:52:00,"Hi @puttin. Thanks for reaching out! Would you be able to provide us with more information on your tooling setup and what version of Realm you're using? And if possible, a sample project or code sample of where you're trying to do this and where it's failing. Thanks!",istx25,puttin
4685,2017-02-23 03:02:38,"Hi @istx25 , as you can see in the title, it's a feature request.

So it's a feature request on last version which is 2.4.3 currently.

---

`RLMRealmConfiguration` has a property `deleteRealmIfMigrationNeeded` which delete Realm files if migration needed.

Sometimes developers may expect migration to be executed first, but if migration fails, the Realm files should be delete to cleanup.",puttin,istx25
4685,2017-02-23 16:00:38,"Hi @puttin. My apologies, I guess I misread. Let me change the labels and get some eyes on this.",istx25,puttin
4685,2017-03-09 01:08:08,"I'm struggling to find situations in which you as a developer won't be able to write a valid migration block, requiring this feature. @puttin could you please provide some examples of where our current functionality fails you? Thanks.",jpsim,puttin
4684,2017-02-21 16:59:37,"Hi @dsanghan. Thanks for reaching out about this. Would you be able to provide the project (either here or by emailing it to `help@realm.io`?) If not, please provide any code that is executed/called when Realm is being initialized/on app startup.",istx25,dsanghan
4684,2017-03-02 18:42:40,"Just echoing my previous request, @dsanghan. Would you be able to provide the project or any code that is called when Realm is being initialized/on app startup? Thanks!",istx25,dsanghan
4684,2017-03-03 21:46:55,"@dsanghan The assert that is being triggered here does not have enough context. So if you have any info at all about the circumstances under which this occurs, or the realm file itself, it wouldbe hugely valuable for us so we can get this fixed.
Is it from a production use? Or testing? Have you seen it more than once?",bmunkholm,dsanghan
4684,2017-03-04 13:29:28,"@bmunkholm This is in production, so we can't get our hands on the corrupted DB. 

Only context I can provide is that this is happening the moment the app opens. We're only validating on the errors to check for corruption and re-creating the realm database if we need to. 

We access multiple instances of the realm from different threads, some read and some write, but all are instantiated through a synchronized:



and each instance is created using:



This particular crash has happened 12 times to 2 different users (might be these 2 are trying to get back into the app over and over again and crashing)",dsanghan,bmunkholm
4683,2017-02-21 17:01:49,Hi @Montrazul. Thanks for bringing up this concern. I'll bring this up to the team and follow-up with you soon. 😸 ,istx25,Montrazul
4683,2017-03-08 00:35:22,"Hi @Montrazul, sorry for the delay in getting back to you. Did you end up resolving this since your last comment?

As far as compatibility goes, any version of Realm Cocoa 2.4 or later should be compatible with any version of the Realm Object Server 1.0 or later, other than certain features as explicitly noted in their changelog entries.

For example, the [`SyncPermission` changelog entry](https://github.com/realm/realm-cocoa/blame/25cdc6b9b4fcef8f322e4a463c8bd50a0c98a416/CHANGELOG.md#L10-L11) states that ROS 1.1.0 or later is required.",jpsim,Montrazul
4683,2017-03-22 21:30:25,"@Montrazul It's been two weeks so I'm going to close this issue now. If you haven't managed to resolve it yet, please re-open it. :)",TimOliver,Montrazul
4680,2017-02-21 16:50:50,"Thanks @bdash. I suppose my ""workaround"" is simply the prescribed solution. Closing this.",cwalo,bdash
4678,2017-02-20 18:49:41,Hi @santhoshs5. Thanks for reaching out about this. Someone will review what you've provided and follow-up with you soon. Cheers!,istx25,santhoshs5
4678,2017-02-21 17:20:26,Hi @santhoshs5. Would you be able to provide the full models? `isNewBackupApproach` is not in the code samples you provided.,istx25,santhoshs5
4677,2017-02-17 16:54:27,Hi @dmorrow. Thanks for reaching out about this. Someone will review what you've shared and follow-up with a solution or additional questions. Cheers!,istx25,dmorrow
4677,2017-03-09 01:13:19,"I'm not sure this is something we'd want. It would lead to super surprising results. Just as an example, keep in mind that Results aren't guaranteed to preserve their sorting order across Realm transaction versions, so the object you're holding on to could become a whole different object at a later time.

Even if you sort the Results, the same thing could happen when a different object becomes first in the ordering.

Not to mention that we'd need to keep the query alive and running for the duration of this object's lifecycle, which is a lot more expensive than just keeping a pointer to the object you got originally...

For these reasons, I'm closing this ticket. I hope you understand @dmorrow.",jpsim,dmorrow
4676,2017-02-17 16:47:54,"Hi @dsanghan. Thanks for reaching out about this. We'll have one of the engineers look at what you've provided and follow-up. In the meantime, would you be able to prepare a sample project that reproduces this problem? Cheers.",istx25,dsanghan
4676,2017-02-17 18:07:10,"@bdash I re-ran it on latest master (with the merged pull request) and it cuts descriptors by half. From 250+ to 110+ - which is a great improvement. Still, 110+ fd's for 8-10 threads seems to be on the higher side. Are there any other fixes in the works that I can pull in?",dsanghan,bdash
4676,2017-02-17 18:13:08,"@bdash:
",dsanghan,bdash
4674,2017-02-17 00:32:25,"@tgoyne thats a really really interesting workaround. I'm going to play around with something like that. 

I imagine that if I didn't want to muck up my user's realm or be syncing these Search objects (which are more of a means to an end rather than something I want to keep) I could use a temporary realm on disk on this line



and use my normal user logged in syncing realm on this line



*Edit - The performance penalty of copying from one realm to another for every search may not be worth it. I'm guessing that syncing a new object that has links to a bunch of existing objects is not that much overhead.

Thanks again for the idea. I'm going to play with this.",jeffreybergier,tgoyne
4672,2017-02-15 15:51:13,Hi @neetin. Thanks for reaching out. One of our engineers will review what you've provided and follow-up with you soon. Cheers!,istx25,neetin
4672,2017-02-20 19:16:38,"@neetin, how are you using the class in question to trigger the crash? Presumably declaring the class isn't itself sufficient to trigger it. Can you share a self-contained code sample that reproduces the problem?

One thing to note is that `willSet` / `didSet` aren't supported on persisted properties of Realm model classes. I don't know if this is relevant to your crash, but it's something that will likely cause you other problems.",bdash,neetin
4672,2017-03-02 18:45:25,"Hi @neetin. Echoing @bdash's request, would you be able to share a self-contained code sample or a piece of code that reproduces the issue? Thanks.",istx25,bdash
4672,2017-03-02 18:45:25,"Hi @neetin. Echoing @bdash's request, would you be able to share a self-contained code sample or a piece of code that reproduces the issue? Thanks.",istx25,neetin
4672,2017-03-09 01:30:25,"Hi @neetin, I'm just following up on our last few requests for more information. Thanks!",jpsim,neetin
4671,2017-02-15 16:02:21,Hi @beloso. Thanks for reaching out. One of the engineers will review what you've shared with us and follow-up with a solution or more questions soon. Cheers! ,istx25,beloso
4671,2017-03-01 23:32:10,"No problem, I didn't really meant to have write transactions on the main queue.
And I never had any issues, or at least I have never noticed them. But then again this only happens in certain devices in certain conditions. About 10% of the sessions in Crashlytics have this crash. So not even my current code is a 100% reproducible scenario.
I do hope that the work I am doing to isolate writes on a background thread fixes the issue for good.

And thanks @austinzheng for your help in this issue. It feels good to know that you guys @realm always put in a few words for us :)",beloso,austinzheng
4670,2017-02-15 16:03:32,"Awesome to hear that, @tzm41. Feel free to reach out again if you need any more assistance. :)",istx25,tzm41
4666,2017-02-20 19:10:18,"Closing this issue since the user has not followed-up with additional information. @SherlockQi, if you require any support, please file a new issue with the fields filled out. :)",istx25,SherlockQi
4661,2017-02-14 20:26:48,"Hi @bdash ,

thank you very much for your help! Yes, it was my fault. I have a complex structure to create a Realm object and even after checking the code several times I haven't found anything. Then I wrote quickly this wrong snippet and the result confirmed me that I didn't do anything wrong. What a mistake! Sorry for that! I've found my bug and it's working as expected. Thank you very much!",mbecker,bdash
4660,2017-02-14 11:14:28,"@jpsim Thanks for the reply, unfortunately I can't share my project code here, also I can't reproduce it manually, it happens randomly (although it happens most when I go into a certain screen in the app).

What is much more worrying and I think is a side effect of this issue, is sometimes after I get the BadVersion, I get stuck in a lock waiting for a Realm transaction to start, this happens on the main thread which causes the main thread to stop responding, and it never gets released, this is also something I can't reproduce manually but happens quite a lot in the current version, I'll paste here the stack trance of all threads when it gets stuck:

",sblepa,jpsim
4660,2017-02-14 11:15:02,"@jpsim Please let me know if you suggest to downgrade my Realm version for now
Thanks",sblepa,jpsim
4660,2017-02-14 16:44:00,Hi @sblepa. You can also email us your Xcode project privately at help@realm.io. Please reference this issue in the body of the email and let us know if you decide to.,istx25,sblepa
4660,2017-02-15 02:37:38,"Hi @sblepa, it's hard for me to recommend that you downgrade to a previous version of Realm considering that most releases fix more bugs than they cause, but if a version of Realm is catastrophically failing for you, then obviously you need to do something to avoid that.

However, we'd much rather you shared with us how we can trigger this bug so we can not only help you with it, but also hopefully prevent others from hitting it.",jpsim,sblepa
4659,2017-02-14 16:44:55,"Hi @ethamine. Thanks for reaching out about this! I saw you closed the issue which makes me think you resolved the issue. If that's the case, awesome! We're here to help if you need anything else.",istx25,ethamine
4658,2017-02-20 19:11:58,Hi @atom2ueki. Would you be able to read @bdash's response and provide more information? Thanks.,istx25,atom2ueki
4658,2017-02-20 19:11:58,Hi @atom2ueki. Would you be able to read @bdash's response and provide more information? Thanks.,istx25,bdash
4658,2017-03-02 18:48:53,"Do you still require assistance, @atom2ueki?",istx25,atom2ueki
4658,2017-03-09 01:30:47,Closing as we haven't heard back from @atom2ueki in a while.,jpsim,atom2ueki
4657,2017-02-14 16:48:26,"Hi @Pinank. Thanks for reaching out. Since you've closed the issue, I assume you've figured it out yourself. If you need help with anything else, please just let us know. Cheers!",istx25,Pinank
4656,2017-02-15 02:24:11,"Given that this is crashing in `UITableView.endUpdates()`, it's highly likely that the table view's state does not reflect Realm's. @Raghvendra7 is it possible that you're inserting/moving/deleting rows from the tableview elsewhere in your code?

Since collection notifications carry ""diff"" information, it expects the state of the table view to match up exactly with the state of the collection being observed.",jpsim,Raghvendra7
4656,2017-02-15 19:07:49,"@bdash Sure I will share the crash log shortly

@jpsim I m not updating the data from elsewhere in code but the Actually I am using this function to fetch the data from realm  and filter and sort it on basis of criteria



This function is called in `viewDidAppear`.

Normally the code is working fine, but it fails when I have set filter and from API end, new data is added in realm collection, it crashed.

Also the code is working fine when i comment this:

",Raghvendra7,jpsim
4656,2017-02-15 19:07:49,"@bdash Sure I will share the crash log shortly

@jpsim I m not updating the data from elsewhere in code but the Actually I am using this function to fetch the data from realm  and filter and sort it on basis of criteria



This function is called in `viewDidAppear`.

Normally the code is working fine, but it fails when I have set filter and from API end, new data is added in realm collection, it crashed.

Also the code is working fine when i comment this:

",Raghvendra7,bdash
4656,2017-03-09 01:22:32,"The fact that you're changing which query is backing the table view without changing which query you're observing for change notifications is almost certainly the culprit here, @Raghvendra7.

One way to fix this would be to tear down the previous notification block and re-register:

",jpsim,Raghvendra7
4656,2017-03-12 08:04:23,thanks @jpsim ,Raghvendra7,jpsim
4655,2017-02-10 16:33:53,Hi @kasperwelner. Thanks for reaching out about this. I'll have one of the engineers review what you've shared and follow-up soon. Cheers!,istx25,kasperwelner
4655,2017-02-16 15:30:46,"Awesome, glad to hear @kasperwelner. We're here if you need anything else! :)",istx25,kasperwelner
4654,2017-02-10 17:29:52,Hi @Montrazul. Thanks for reaching out about this. We will review what you've provided and have someone follow-up with you soon. Cheers! ,istx25,Montrazul
4654,2017-02-10 21:17:02,"Hi @Montrazul. How are you fetching/creating the `customer` object shown in your code example?Please provide that portion of your code as well. Thanks.
",istx25,Montrazul
4652,2017-02-14 04:32:16,"This has been causing the `cocoa_docs` PR to fail in the `cocoa-pipeline` Jenkins job since it was merged. https://ci.realm.io/job/cocoa_docs/

@larkost could you please fix?

Specifically it hangs at ""waiting for simulator to boot..."", never completing or moving on for hours.

https://ci.realm.io/job/cocoa_docs/

![image](https://cloud.githubusercontent.com/assets/474794/22915355/8f02e294-f22b-11e6-919b-480adf2cba8b.png)
",jpsim,larkost
4650,2017-02-09 18:10:40,"Hi @gregiii. Thank you for reaching out. We'll have one of the engineers look into this and follow-up soon. In the meantime, if you can provide us with a sample project that the problem exists in/reproducible - that'll speed up the process of resolving the issue.",istx25,gregiii
4650,2017-02-10 17:38:23,"Awesome, thanks @gregiii. We'll review that and follow-up soon.",istx25,gregiii
4650,2017-02-15 00:43:24,"@gregiii you're definitely right that this is due to a schema mismatch between the server and the client. We're tracking ways to improve the error messages internally, but in the mean time, you could print the schema information from both the client (using the [`RLMRealm.schema`](https://realm.io/docs/objc/latest/api/Classes/RLMRealm.html#/c:objc(cs)RLMRealm(py)schema) property) and from the server (using the Node.js SDK) and compare them to see how they differ.

I'm sorry I don't have a more convenient way for you to do this right now.",jpsim,gregiii
4650,2017-02-15 02:15:04,@jpsim Thanks for the assistance.,gregiii,jpsim
4648,2017-02-09 18:19:28,Hi @jbuverud. Thank you for reaching out. We'll have someone review what you've provided and follow-up with you soon. :-),istx25,jbuverud
4646,2017-02-09 18:11:42,Hi @dmorrow. Happy to hear you figured out what was causing the problem. Let us know if you need help with anything else. :-),istx25,dmorrow
4644,2017-02-07 21:40:42,@bdash is there a way to convert `Object` to a `T: RLMObject` if the `List` was generated from an `RLMArray<T>`?,rex-remind101,bdash
4644,2017-02-08 22:18:58,"@jpsim I keep crashing on `RLMIterator` it looks like when I call `contains`

The exception is

My guess is `as! Object?` is dynamically type checking and failing since `MyObj`'s type does not derive from `Object`. Should this be changed to 

or more simply

?",rex-remind101,jpsim
4643,2017-02-15 02:07:05,@ivan-konov actually could you please file a Radar with Apple about this (https://bugreport.apple.com) or a Swift bug (https://bugs.swift.org) since this appears to be an LLDB issue.,jpsim,ivan-konov
4643,2017-02-22 16:53:48,"Awesome, thank you @ivan-konov. Mind sharing the Radar #?",istx25,ivan-konov
4643,2017-03-09 01:16:58,"@ivan-konov just so you know, radars aren't public, so we can't comment on the wording of your report, and also can't duplicate it or track its progress from Apple's side. There's a site called [Open Radar](http://www.openradar.me/) where many developers cross-post their Apple radars to maintain a public repository of them, so you could cross-post yours there and then we could duplicate and keep track.",jpsim,ivan-konov
4643,2017-03-13 01:23:59,"@jpsim I have another  reply on the radar from Apple:

> Engineering has provided the following feedback regarding this issue: 
In current Swift releases, you’ll have to rebuild all Carthage Swift frameworks locally for debugging to succeed.

In that case I guess you would want to change the Carthage preferences of the project to fetch the code from GitHub and then build locally.",ivan-konov,jpsim
4642,2017-02-07 16:24:16,Hi @Xiahaiquan. Happy to hear you could resolve the issue yourself. Let us know if you need help with anything else. :-),istx25,Xiahaiquan
4641,2017-02-07 16:28:59,Hey @Jinxiansen! Thanks for reaching out. Would you be able to share a sample project that reproduces/demonstrates the problem you're experiencing? Cheers.,istx25,Jinxiansen
4641,2017-02-09 06:14:31,"@Jinxiansen: 試一下用 Realm Browser 開啟 App 中的 Realm file

**Translation**: _Are you able to download the Realm file and use Realm Browser for Mac to open it?_",harryworld,Jinxiansen
4641,2017-02-09 06:20:03,"@Xiahaiquan We stored contents using these types. For instance, in one Realm file. Simply doing compact reduce the file size from 671MB to 295KB.

While I look at @Jinxiansen case, I have the same error message of bottleneck at `memory size: 3221225472` I'm worried that there is a corruption to the Realm file, and thus not able to open it again. Since I don't have the file on hand, would appreciate if @Jinxiansen can try it out. 

Thanks",harryworld,Xiahaiquan
4641,2017-02-09 06:20:03,"@Xiahaiquan We stored contents using these types. For instance, in one Realm file. Simply doing compact reduce the file size from 671MB to 295KB.

While I look at @Jinxiansen case, I have the same error message of bottleneck at `memory size: 3221225472` I'm worried that there is a corruption to the Realm file, and thus not able to open it again. Since I don't have the file on hand, would appreciate if @Jinxiansen can try it out. 

Thanks",harryworld,Jinxiansen
4641,2017-02-09 06:20:49,"@harryworld 是在 iPhone 真机上面的数据，无法使用Realm Browser  打开啊

**Translation**: _@harryworld is the real machine in the iPhone above the data, can not use Realm Browser to open ah_.

@Xiahaiquan 我是每秒都会对 Realm 更新一个 model 的，可能因为写入太频繁。

**Translation**: _@Xiahaiquan I will update a model of Realm every second, probably because the write too frequently_.",Jinxiansen,Xiahaiquan
4641,2017-02-09 06:20:49,"@harryworld 是在 iPhone 真机上面的数据，无法使用Realm Browser  打开啊

**Translation**: _@harryworld is the real machine in the iPhone above the data, can not use Realm Browser to open ah_.

@Xiahaiquan 我是每秒都会对 Realm 更新一个 model 的，可能因为写入太频繁。

**Translation**: _@Xiahaiquan I will update a model of Realm every second, probably because the write too frequently_.",Jinxiansen,harryworld
4641,2017-02-09 06:22:54,"@harryworld 是在 iPhone 真机上面的数据，无法使用Realm Browser 打开啊。

**Translation**: _@harryworld My data is in real device, cannot open using Realm Browser_.

@Xiahaiquan 我是美妙都会对 Realm 更新一个 model 的，可能因为写入太频繁。

**Translation**: _@Xiahaiquan I am writing data to Realm every second, it may be due to frequent write transactions._

---
@Jinxiansen I am having the realm file in device as well, what I do is to enable [iTunes File Sharing](http://stackoverflow.com/questions/6029916/how-to-enable-file-sharing-for-my-app), so that I can download the realm file in iTunes.

File Sharing allows you to read the app's Documents folder. In case you are not saving realm into default location, you can use `FileManager` to copy the item back to Documents.

To view the File Sharing, here are the steps:
1. Open iTunes
2. Connect your iPhone to the computer, and show the iPhone.
3. Choose Apps on the left menu under Settings.
4. Scroll down and look for the section File Sharing
5. Select `DemoSwift` on the left Apps menu, and you will see the file backup. The file is named as a date with extension .realm
6. Select the .realm file and scroll down to click ""Save to..."" button
7. Save the file to your computer.",harryworld,Xiahaiquan
4641,2017-02-09 06:22:54,"@harryworld 是在 iPhone 真机上面的数据，无法使用Realm Browser 打开啊。

**Translation**: _@harryworld My data is in real device, cannot open using Realm Browser_.

@Xiahaiquan 我是美妙都会对 Realm 更新一个 model 的，可能因为写入太频繁。

**Translation**: _@Xiahaiquan I am writing data to Realm every second, it may be due to frequent write transactions._

---
@Jinxiansen I am having the realm file in device as well, what I do is to enable [iTunes File Sharing](http://stackoverflow.com/questions/6029916/how-to-enable-file-sharing-for-my-app), so that I can download the realm file in iTunes.

File Sharing allows you to read the app's Documents folder. In case you are not saving realm into default location, you can use `FileManager` to copy the item back to Documents.

To view the File Sharing, here are the steps:
1. Open iTunes
2. Connect your iPhone to the computer, and show the iPhone.
3. Choose Apps on the left menu under Settings.
4. Scroll down and look for the section File Sharing
5. Select `DemoSwift` on the left Apps menu, and you will see the file backup. The file is named as a date with extension .realm
6. Select the .realm file and scroll down to click ""Save to..."" button
7. Save the file to your computer.",harryworld,harryworld
4641,2017-02-09 06:22:54,"@harryworld 是在 iPhone 真机上面的数据，无法使用Realm Browser 打开啊。

**Translation**: _@harryworld My data is in real device, cannot open using Realm Browser_.

@Xiahaiquan 我是美妙都会对 Realm 更新一个 model 的，可能因为写入太频繁。

**Translation**: _@Xiahaiquan I am writing data to Realm every second, it may be due to frequent write transactions._

---
@Jinxiansen I am having the realm file in device as well, what I do is to enable [iTunes File Sharing](http://stackoverflow.com/questions/6029916/how-to-enable-file-sharing-for-my-app), so that I can download the realm file in iTunes.

File Sharing allows you to read the app's Documents folder. In case you are not saving realm into default location, you can use `FileManager` to copy the item back to Documents.

To view the File Sharing, here are the steps:
1. Open iTunes
2. Connect your iPhone to the computer, and show the iPhone.
3. Choose Apps on the left menu under Settings.
4. Scroll down and look for the section File Sharing
5. Select `DemoSwift` on the left Apps menu, and you will see the file backup. The file is named as a date with extension .realm
6. Select the .realm file and scroll down to click ""Save to..."" button
7. Save the file to your computer.",harryworld,Jinxiansen
4641,2017-02-09 06:56:26,"@harryworld  在手机上它实际上只占用了5MB 左右的空间，但是在 Xcode 控制台却提示是 3489660928 ，大于3G 的容量，我想应该是 Realm 分配了这么大的逻辑空间，但是实际上没有这么大的，你说的用 iTunes 打开这个办法我找不到的.realm 。
面前暂时的解决办法只能减少写入次数了。

**Translation**: _@harryworld on the phone it actually takes up only about 5MB of space, but the prompt is 3489660928 in the Xcode console, greater than the capacity of 3G, I think Realm should be allocated such a large logical space, but in fact not so big , You say with iTunes to open this way I can not find. Temporary solutions in front of only reduce the number of writes._",Jinxiansen,harryworld
4641,2017-02-09 07:08:40,"@harryworld 忧桑啊。
https://github.com/realm/realm-cocoa/issues?utf8=✓&q=Cannot%20allocate%20memory
之前有很多人提过这个问题，但是我没看懂有什么有效的解决办法。
大兄弟有什么高见撒？

**Translation**: _@harryworld worry mulberry ah.
Https://github.com/realm/realm-cocoa/issues?utf8=✓&q=Cannot%20allocate%20memory
Many people have mentioned this before, but I did not understand what an effective solution.
Brothers have any ideas Takao?_",Jinxiansen,harryworld
4641,2017-02-15 03:20:03,"@jpsim Thanks for reply. In practice, I would like to know why it is happening and how to prevent the realm file getting bloated. No one would want their users waking up one day and crashing the app in every launch. Will try your tip to debug why it's growing fast.",harryworld,jpsim
4641,2017-02-20 19:13:43,@Jinxiansen: Do you require anymore assistance?,istx25,Jinxiansen
4641,2017-02-22 03:16:39,"@istx25 似乎无人能够解决这个问题，想关就关了吧。
我在 issues 里搜索 “ Cannot allocate memory size:”，这个问题多次被人提及，然而似乎最后的解决办法都是不了了之，这让我感到有点失望，也对贵团队的能力表示怀疑。",Jinxiansen,istx25
4641,2017-02-27 08:13:50,"> Have you read our docs on File size & tracking of intermediate versions? That might help explain things.

@jpsim Does it mean I should call `realm.invalidate()` whenever I don't need to access the results anymore?
For instance, I may retrieve some objects and copy them into array. Once the copy is done, I should already `invalidate` realm instead of reusing it?",harryworld,jpsim
4641,2017-02-27 17:51:10,"@Jinxiansen, we're sorry that you're still having issues with Realm. Would you be willing to send us the Realm file that is causing the issue, so we can examine it ourselves? You can email it to help@realm.io.
",austinzheng,Jinxiansen
4641,2017-02-28 23:02:49,"@harryworld can you file a new ticket so we can better track your issues? As for your question, you can call `realm.invalidate()` if you don't plan on using that Realm again or any of the object instances you got from the Realm.

More specifically, you want to avoid keeping Realms that won't be used again open. You can ensure that these Realms don't live longer than they should by calling `invalidate()`, or by wrapping them in an `autoreleasepool` block so that they will be properly destroyed and their resources freed. Note that the implicit autorelease pools that are present on threads with runloops (like the main thread) only drain once per runloop iteration, so if you have (e.g.) a complicated loop that opens many Realms, you may end up keeping many versions of the Realm active even if you nil out your local Realm variables when you're done using them.

You can read [this document](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html) on autorelease pools for more information. Although it's written using Objective-C examples it applies equally well to Swift's ARC-based memory management.",austinzheng,harryworld
4641,2017-03-09 01:24:03,"Hi @harryworld, I'm just following up on @austinzheng's last comment. Were you able to adjust your code to avoid holding on to too many older Realm versions?",jpsim,austinzheng
4641,2017-03-09 01:24:03,"Hi @harryworld, I'm just following up on @austinzheng's last comment. Were you able to adjust your code to avoid holding on to too many older Realm versions?",jpsim,harryworld
4641,2017-03-10 03:59:00,"@jpsim @austinzheng Our current app structure makes it hard for me to switch in using `realm.invalidate()` at the moment, feel free to close this ticket first. As @austinzheng I will open another issue later if needed. Thanks",harryworld,jpsim
4641,2017-03-10 03:59:00,"@jpsim @austinzheng Our current app structure makes it hard for me to switch in using `realm.invalidate()` at the moment, feel free to close this ticket first. As @austinzheng I will open another issue later if needed. Thanks",harryworld,austinzheng
4639,2017-02-06 15:56:54,"Hi @siemensikkema. Thanks a lot for reaching out. I'll have one of the engineers look into this. In the meantime, would you be able to share that example project you mentioned? Just to speed up diagnosis of if this is expected behaviour or a bug with Realm. Cheers!",istx25,siemensikkema
4639,2017-02-06 17:34:11,"@istx25 @bdash I'm working on an example project. So far, the most basic version does not reproduce the error. I'm still figuring out how to reproduce my results.",siemensikkema,istx25
4639,2017-02-08 11:48:11,"@istx25 @bdash I finally managed to get to the bottom of the issue. I made [an example project](https://github.com/siemensikkema/realmNotificationBug) to demonstrate it (all relevant code is [here](https://github.com/siemensikkema/realmNotificationBug/blob/master/NotificationBug/Realm.swift)). It turns out the problem occurs when there is a third type of object involved.
In the example I have a Guide that has many Places. A Guide can also have an owner of type User but this is optional. When I set the owner I don't receive update notifications but when I leave the owner set to nil notifications work fine.",siemensikkema,istx25
4639,2017-02-09 08:32:22,@tgoyne it's good to know I'm not crazy! ;),siemensikkema,tgoyne
4638,2017-02-06 16:00:34,"Hi @kharmabum. Thanks for reaching out. Would you be able to provide us with a sample project demonstrating the issue and any other information you can provide? From there, we'll be able to get one of our engineers to look into this.",istx25,kharmabum
4638,2017-02-08 16:42:17,"Just bringing attention back to this issue. @kharmabum: Would you be able to provide us with a sample project demonstrating the issue and any other information you can provide? From there, we'll be able to get one of our engineers to look into this. Thanks.",istx25,kharmabum
4638,2017-02-10 17:45:30,"Just bringing attention back to this issue. @kharmabum: Would you be able to provide us with a sample project demonstrating the issue and any other information you can provide? From there, we'll be able to get one of our engineers to look into this. Thanks.",istx25,kharmabum
4638,2017-02-15 02:17:27,"Hey @kharmabum, what makes you think the crash is happening inside `RLMClassInfo::propertyForTableColumn()`? The screenshot you posted doesn't appear to indicate an exception being thrown or null pointer being dereferenced, or anything else indicating that that function is crashing...

Perhaps another thread was the culprit and you misattributed the main thread as the source of the crash?

In any case, we can't move on this until we get more information from you, as @istx25 has requested.

In the future, invoking `bt` from the lldb console is much better than screenshots: it can help us textually search for similar issues and will include information that you may have otherwise omitted, which is likely the case here.",jpsim,kharmabum
4638,2017-02-15 02:17:27,"Hey @kharmabum, what makes you think the crash is happening inside `RLMClassInfo::propertyForTableColumn()`? The screenshot you posted doesn't appear to indicate an exception being thrown or null pointer being dereferenced, or anything else indicating that that function is crashing...

Perhaps another thread was the culprit and you misattributed the main thread as the source of the crash?

In any case, we can't move on this until we get more information from you, as @istx25 has requested.

In the future, invoking `bt` from the lldb console is much better than screenshots: it can help us textually search for similar issues and will include information that you may have otherwise omitted, which is likely the case here.",jpsim,istx25
4638,2017-02-15 19:59:57,"Sorry for the delay in responses. I've been low on bandwidth the past few weeks. 

@jpsim will do in the future, here are a few full stack traces courtesy of sentry: https://gist.github.com/kharmabum/feb5b3a8e7fe405faede857157ca76f6 ",kharmabum,jpsim
4638,2017-02-15 21:56:48,"@kharmabum thanks for sharing that. I'm re-including it here so it can come up when we search for similar stack traces in the future:

<details>

<summary>Stack Traces</summary>



</details>

---

@kharmabum could you please post the full model definitions that are being observed? If you could also share the notification block code, that'd be helpful.",jpsim,kharmabum
4638,2017-02-20 19:07:38,Hi @kharmabum. Just echoing @jpsim's request. Would you please post the full model definitions that are being observed? As well as the notification block code too (if possible). Thanks!,istx25,kharmabum
4638,2017-02-20 19:07:38,Hi @kharmabum. Just echoing @jpsim's request. Would you please post the full model definitions that are being observed? As well as the notification block code too (if possible). Thanks!,istx25,jpsim
4638,2017-03-09 01:04:02,@kharmabum are you still seeing this with the current `master` branch? Thanks!,jpsim,kharmabum
4638,2017-03-09 20:11:00,"@jpsim I have not. Both this crash and another crash I reported via email (trace included below) have ceased since I made a few changes:

(1) Avoid frequently removing and immediately re-adding a KVO observer (I was doing this a lot)
(2) Instead of deleting all objects in a realm (this is usually the point at which the crash would surface) I am deleting the entire realm file

Even if I removed all observers prior to deleting all objects I would encounter this crash.

Stack trace for the other possibly relevant crash: 
",kharmabum,jpsim
4638,2017-03-10 06:03:57,"@jpsim looking around, can't find anything, but will keep an eye out. ",kharmabum,jpsim
4638,2017-03-22 21:24:55,Hi @kharmabum! I'm just doing a pass of some of our older issues and am wondering if it's worth closing this issue at this point. Have you seen anything since your last post?,TimOliver,kharmabum
4637,2017-02-06 16:05:21,"Hi @macvinod. Thanks for reaching out about this. As the [documentation states](https://realm.io/docs/swift/latest/#ignored-properties), you can ignore properties using the following syntax: 



You'll want to use the `static` keyword instead of the `class` keyword and remove `as String`. Please let me know if this helped and/or if you have any other questions. Cheers! 😸  ",istx25,macvinod
4637,2017-02-06 16:47:58,"Okay. Thanks for providing those values, @macvinod. Please review my last message but please also make sure you `import RealmSwift` and not `import Realm`.

**Brief Explanation**: As far as I know, `RealmSwift` depends on the Objective-C binding internally but you shouldn't import or access the Objective-C binding directly (`import Realm`) in Swift. With that, you're supposed to use RealmSwift (`import RealmSwift`) instead as RealmSwift is the binding that supposed to be used in Swift code. And afaik, using the Objective-C binding in Swift can cause undefined behaviour.",istx25,macvinod
4637,2017-02-06 17:04:17,"😸 Awesome. Happy to hear that, @macvinod! We're here if you need anything else.",istx25,macvinod
4636,2017-02-06 16:08:08,Hi @tkallioras. Thanks for letting us know about this! We'll look into fixing this soon.,istx25,tkallioras
4636,2017-02-15 02:34:56,"Hi @tkallioras, please file this issue on CocoaPods' issue tracker as this is a problem with the way pod data is parsed, sanitized and rendered rather than a problem with Realm: https://github.com/CocoaPods/CocoaPods/issues/new",jpsim,tkallioras
4635,2017-02-06 16:27:57,"Hi @santhoshs5. Thanks for reaching out about this. Although some additional sample code would be helpful (specifically the code right before the `backgroundQueue` ivar) but from what you have provided, I believe this issue has to do with the passing an instance (in this case: `user`) across threads without any accommodation for the fact that it's crossing into a different thread.

I recommend reading up on the documentation for [Passing Instances Across Threads](https://realm.io/docs/swift/latest/#passing-instances-across-threads). Hopefully that will put you in the right direction and feel free to follow-up if you need additional help.",istx25,santhoshs5
4635,2017-02-08 16:42:41,@santhoshs5: Do you require any more assistance?,istx25,santhoshs5
4635,2017-02-08 17:50:03,"@istx25  Thanks for follow up.
Let me clear my understandings.
I have a Realm Object called (User) which I added it to realm.

the same object i have in some singleton as instance variable so I cant use the object which is there in singleton as I have already added that object to Realm.

am I correct ?

Please correct if anything is wrong.

",santhoshs5,istx25
4635,2017-02-10 17:41:27,"Hi @santhoshs5. Thanks for following-up. I have a few questions:

""I have a Realm Object called (User) which I added it to realm.""

- Is there only one User object _added to Realm_ or are there many?
- What benefits do you want the singleton to provide? Is it to determine the ""current"" user?
- How do you fetch the object and store it in the singleton when it's created?

Let me know and I'll try to better answer your question. :-)",istx25,santhoshs5
4635,2017-02-13 17:04:25,"Thank you for responding, @santhoshs5. I personally see nothing especially wrong with this but I recommend using the singleton as facade between your code and Realm instead of just duplicating the data in Realm and your singleton.



This will ensure that if a User object exists in the ""singleton"", it exists in Realm and if it exists in Realm, it exists in the ""singleton."" I put singleton in quotes because this example isn't exactly a singleton anymore but you could make my code example into a singleton and still fetch the user from Realm directly. Let me know if you have any other questions. ",istx25,santhoshs5
4635,2017-02-13 20:11:46,@santhoshs5: I've responded to your SO question as well. http://stackoverflow.com/a/42212670/7443852,istx25,santhoshs5
4635,2017-02-20 19:14:46,Closing the issue due to inactivity. @santhoshs5: Feel free to follow-up if you have any more questions and we can re-open the issue. Cheers!,istx25,santhoshs5
4630,2017-02-03 17:41:48,Hi @Ustimov. Thanks for reaching out. One of our engineers will look into the issue and follow-up with a solution or some additional questions. Cheers.,istx25,Ustimov
4630,2017-02-10 17:43:14,"Hi @Ustimov. Thanks for providing this information. ~~Would you be able to provide us with a sample project that reproduces what you're describing?~~

My apologies. Saw the link to the project above. Let me review it.",istx25,Ustimov
4629,2017-02-14 17:00:14,"Thanks for taking the time to make a PR and contribute to Realm @rokgregoric! However, for the reasons I've shared in https://github.com/realm/realm-cocoa/issues/4628#issuecomment-279767278, we can't accept this change. We hope you'll contribute again in the future.",jpsim,rokgregoric
4628,2017-02-03 17:31:47,"Thanks for filing this, @rokgregoric. Someone will take a look at your PR soon. :)",istx25,rokgregoric
4627,2017-02-03 17:30:33,Hi @dmorrow. Thank you for reaching out about this. I'll have someone respond with some more information or refer you to an existing resource soon. Cheers!,istx25,dmorrow
4625,2017-02-02 17:55:41,"Thanks for reaching out, @lowki93. To better assist you, I'd love to know why you would like to remove the actual files instead of something like purging all of the files? Mind elaborating. Nonetheless, this Stack Overflow answer may be able to provide you with some more information on both methods: http://stackoverflow.com/a/26067337/7443852.",istx25,lowki93
4625,2017-02-02 18:02:58,"@lowki93, what do you mean when you say that nothing was deleted? Are you testing whether the files still exist after running the code you've shared, or determining this some other way?",bdash,lowki93
4625,2017-02-10 17:46:25,@lowki93: Does @austinzheng's response _answer_ your question? Please follow-up if you have any additional questions.,istx25,lowki93
4625,2017-02-10 17:46:25,@lowki93: Does @austinzheng's response _answer_ your question? Please follow-up if you have any additional questions.,istx25,austinzheng
4625,2017-02-14 17:07:38,"I'm going to assume that the lack of response means that @austinzheng addressed your question. If not, please feel free to reopen this issue or file a new issue.",bdash,austinzheng
4624,2017-02-02 17:46:32,Hi @santhoshs5. Would you be able to provide us with a code snippet of where you call `func save<T:Object>(_ realmObject:T)` as well as the stack trace for the crash. I'm looking forward to seeing this as we'll be able to better assist you.,istx25,santhoshs5
4624,2017-02-02 17:50:32,"@santhoshs5, in your code snippet you're passing an object across threads. Realm objects can only be access on the thread on which they were created. See the documentation's section on [passing instances across threads](https://realm.io/docs/swift/latest/#passing-instances-across-threads) for more information.",bdash,santhoshs5
4624,2017-02-03 05:55:59,"@bdash  I considered your input and changed the method to following.
Now I am getting this exception:



",santhoshs5,bdash
4624,2017-02-03 05:57:05,"@istx25 

I am calling this method as following.



Here userInfo object realm object.
",santhoshs5,istx25
4624,2017-02-03 08:49:25,"@bdash 

I do get that to clear the confusion managed object means Realm objects which are derived from Object.

is it good practice to have singleton to manage realm.

Could you explain me more from my code what's wrong. as i am newbie to realm.

One more thing I am using this method for reading from realm.

    

I am using this method as following


       
setting the results to another variable present in singleton , I am getting crash when i read the object from another thread. What could be the reason

",santhoshs5,bdash
4623,2017-02-02 17:42:48,Hi @anlaital. Thanks for reporting this. One of our engineers are looking into it.,istx25,anlaital
4623,2017-02-08 18:50:06,"(@austinzheng: adding the gist/sumary of our slack chat here to capture the other manifestation of this issue so it's part of the solution history)


DS: Am seeing the same issue - It feels like a  possible race condition - My code is almost exactly the same - the realm has just been connected but I am guessing there isn't any sync operation yet in progress so the `addProgressNotification` is returning nil (which it's documented to do if the block would never be called in the case of no outstanding work).  I wrapped my version of this in a main queue dispatch as suggested  with the same result. (see the Realm-ProgressAPIDemo - I just added a “FirstRunDemo” app to it whose job is to keep the login screen up with a spinner until the D/L  is done.  The first time it runs it’ll get a few records — but not al of them even though its set it `.reportIndefinitely` but 4 out of 5 times it’ll just return nil and never get the notification token

AZ:  [summarizing] Basically, the `SyncSession` silently doesn't register the notifier if the session hasn't been bound yet, and since that requires a network request and response, it seems indeterministic",dhmspector,austinzheng
4623,2017-02-15 20:07:46,@austinzheng could you reword the title of this issue to more accurately reflect what this is tracking?,jpsim,austinzheng
4621,2017-02-01 19:56:17,"You're right @tgoyne, done in ee64c1f.",jpsim,tgoyne
4619,2017-02-15 22:02:49,"My latest commit has the most minimal API possible. It's definitely preliminary pending feedback. Depending on what people think, I might incorporate @alazier's concept of a `Permission` object that is returned by the API so further actions on it are possible.",austinzheng,alazier
4619,2017-02-15 23:03:57,@austinzheng that was the motivation behind the `setPermissions` method on the `Permissions` object. Could also make it a static method but seems nice to me as a member method if you are changing existing permissions. I would imagine making subsequent requests to create permissions for the same user/url combo would overwrite the previous value.,alazier,austinzheng
4619,2017-02-16 11:06:28,"> Not sure why we would need two methods, one to create a PermissionChange object and another to set it. It isn't clear from the naming if it is creating a permission, or editing an existing one. Also am not a fan of passing in three booleans to specify permissions (prefer the bitmask). Otherwise looks fine!

- I went with the 3 nullable booleans, because I wanted to handle the case where we can leave certain fields unmodified. Alternatively we could have `setPermissions` and `addPermissions` methods or just another parameter `mode: Additive/Absolute` and go with the bitmask.
- I split it into two methods, because the number of arguments was rather large, but if we go with a bitmask, it's perfectly fine to combine in one method (yielding essentially what @austinzheng is currently proposing).
- I don't think people should care if it's creating a new permission or editing an existing one as long as it does what it's supposed to do :)

In my opinion, we should try to avoid making backend changes and work with the existing API instead. The reasons are that 1) we already shipped the existing API, so that should be supported, regardless of the changes we make and 2) it will require a lot more effort to change the backend in return for very little gain.",nirinchev,austinzheng
4619,2017-02-16 12:58:37,">In my opinion, we should try to avoid making backend changes and work with the existing API instead. The reasons are that 1) we already shipped the existing API, so that should be supported, regardless of the changes we make and 2) it will require a lot more effort to change the backend in return for very little gain.

My guess on the implementation for @austinzheng proposal https://github.com/realm/realm-cocoa/pull/4619#issuecomment-280171907 is that it would still use `PermissionChange` underneath the hood, but that:

will require a new API to retrieve the permission state for another user, but I think it is a good idea.

I am more in favor of Austin's approach for the reasons listed above. It simplifies the concept of permission state and mutations, while all my additional comments show how it can be used in an offline scenario which a basic wrapper on the models fails to do so.",bigfish24,austinzheng
4619,2017-02-18 12:11:51,"@austinzheng how do you get the permission state for another user? Right now a user has his/her own permission realm for state and management realm for mutations. I would imagine the API to get the permission state for another user would need to be a new API that retrieves this from the admin realm. Also it seems unlikely that another user's state could be a Realm object that live updates since we already have some performance issues with keeping the user's permission state in the permission realm up to date, not to mention, I am not sure how that would work, where does this live object live?

From an API perspective I like it but after talking with @nirinchev last week I think we should be more pragmatic and just stick to the wrapper APIs on top of the current system, and focus on shipping since the permission realm is still not shipped for example.",bigfish24,austinzheng
4619,2017-02-18 12:11:51,"@austinzheng how do you get the permission state for another user? Right now a user has his/her own permission realm for state and management realm for mutations. I would imagine the API to get the permission state for another user would need to be a new API that retrieves this from the admin realm. Also it seems unlikely that another user's state could be a Realm object that live updates since we already have some performance issues with keeping the user's permission state in the permission realm up to date, not to mention, I am not sure how that would work, where does this live object live?

From an API perspective I like it but after talking with @nirinchev last week I think we should be more pragmatic and just stick to the wrapper APIs on top of the current system, and focus on shipping since the permission realm is still not shipped for example.",bigfish24,nirinchev
4619,2017-02-20 18:22:47,"Alright, let's go with the simple API in this PR (not the one I sketched out in my comment above), with possibly an additional simple API to additively set permissions. Is that okay with everyone? @bigfish24 @nirinchev @alazier ",austinzheng,nirinchev
4619,2017-02-20 18:22:47,"Alright, let's go with the simple API in this PR (not the one I sketched out in my comment above), with possibly an additional simple API to additively set permissions. Is that okay with everyone? @bigfish24 @nirinchev @alazier ",austinzheng,bigfish24
4619,2017-02-20 18:22:47,"Alright, let's go with the simple API in this PR (not the one I sketched out in my comment above), with possibly an additional simple API to additively set permissions. Is that okay with everyone? @bigfish24 @nirinchev @alazier ",austinzheng,alazier
4619,2017-02-20 21:55:11,I don't have a strong opinion on nullability - just feels a bit awkward that they don't match. @bigfish24 the second method was added to allow scenarios where you want to grant read permissions without checking if the user already has write/manage permissions.,nirinchev,bigfish24
4619,2017-02-23 17:56:14,I changed this some more based on @bigfish24 and @alazier feedback. If nobody objects within the next two hours I'm going to build out the rest of this API and tests.,austinzheng,alazier
4619,2017-02-23 17:56:14,I changed this some more based on @bigfish24 and @alazier feedback. If nobody objects within the next two hours I'm going to build out the rest of this API and tests.,austinzheng,bigfish24
4617,2017-01-31 19:02:37,"@tgoyne I apologize if my issue report wasn't clear - I don't want the property to be persisted.  Its purely a synthesized property.
I am using the setter to set a number of synthesized properties in one shot.
I'd like it to perform exactly like the other example I gave:

    var name {
      return ""John""
    }",dmorrow,tgoyne
4616,2017-01-31 16:37:48,Hiya @sipersso. Thanks for reaching out. We're working through a bit of backlog but someone will be in touch with an explanation/solution soon. Cheers! 😸 ,istx25,sipersso
4616,2017-02-01 02:46:46,"@tgoyne if Realm works as expected in this case, the documentation is incomplete. The documentation says ""Realm instances hold a database connection for the exact duration of their lifetime."". But it doesn't say anything about that you can't keep any references of type RealmSwift.Object. 

For deleting and refreshing the realm file I need to clear, not only any references to Realm, but also to any object that is of type Realm.Object. If I don't do this, I have to kill the application for the content from the new Realm file to appear.

This means I can't pass persisted objects between viewcontrollers as you have no way of knowing when the viewcontrollers are dealloced (and the realm instance is freed). It forces me to only pass a primary key, load the persisted object when the view appears and then manually unload it when the view dissapears (which is very error prone). There is no mention of this in the documentation.",sipersso,tgoyne
4616,2017-02-02 17:42:00,Bringing attention back to this issue. cc/ @tgoyne ,istx25,tgoyne
4614,2017-01-31 16:24:19,Hi @colasbd! Thanks for reaching out. I'll have someone review what you've shared and respond with a solution or follow-up questions as soon as we can. Cheers! 🚀 ,istx25,colasbd
4614,2017-01-31 16:25:37,"Hi @istx25 
Thanks for your 🚀 reply.
I've found a solution:
",colasbd,istx25
4614,2017-01-31 18:57:21,@jpsim: I'll look into filing an issue with CocoaPods about this or if there's an existing issue with them tracking this issue that I can add to.,istx25,jpsim
4613,2017-01-31 16:26:25,Hi @beloso! Thanks for reaching out. I'll have someone look into this and respond with a solution or follow-up questions as soon as we can. 😸 ,istx25,beloso
4612,2017-01-31 16:29:16,"Hi @jdanthinne, thanks for reaching out. I'll have someone review what you've shared and respond with a solution or follow-up questions soon. Cheers! :-)",istx25,jdanthinne
4610,2017-01-31 08:34:29,"Hi @johnburkey! Thanks for the question!

We'd love to have Realm Swift running on Linux platforms in the future! But at the moment, it's sadly not possible. Realm Swift is built around Realm Objective-C which uses the reflection features of the Objective-C runtime to attach the Realm objects in code to the underlying Realm database.

Since the Objective-C runtime isn't available on any flavor of Linux, it would only be feasible if Realm Swift could bypass Objective-C in its entirety; something that's lot currently feasible at Swift's level of maturity (At the very least, Swift would need to support native C++ interoperability first).

Hopefully as Swift matures, we'll be able to look at this seriously in the future.

I hope this answered your question!",TimOliver,johnburkey
4608,2017-01-31 16:31:28,"Thanks for reaching out, @iandundas. Someone will review this and be in touch soon. :-)",istx25,iandundas
4608,2017-02-10 20:58:44,Any update on this? How did you fix it @iandundas ? I really need help with this. I've the same issue with https://github.com/bitomule/ReactiveSwiftRealm. I've tried uploading pre built binaries but got a weird issue about no clean support for macOS.,bitomule,iandundas
4608,2017-02-12 15:34:15,"@iandundas así fynally managed to get the prebuilt solution to work. It was an issue on my side. Still waiting for the ""real"" solution.",bitomule,iandundas
4608,2017-02-15 00:50:10,"I think ""exit code 65"" is an error reported by `xcodebuild` when the Xcode EULA hasn't yet been accepted. Anyway, it seems like everyone in this thread was able to eventually resolve the issues they were running into.

Is there anything more we can help you with in this thread @iandundas @bitomule ?",jpsim,bitomule
4608,2017-02-15 00:50:10,"I think ""exit code 65"" is an error reported by `xcodebuild` when the Xcode EULA hasn't yet been accepted. Anyway, it seems like everyone in this thread was able to eventually resolve the issues they were running into.

Is there anything more we can help you with in this thread @iandundas @bitomule ?",jpsim,iandundas
4608,2017-02-15 08:54:22,"@jpsim serving my project as static library isn't a good fix. It just broke on last realm-cocoa release. It's not related to Xcode EULA, something changed on last realm release that broke it.

I've test running that need to fetch realm-cocoa using carthage and all crashes because of this issue.",bitomule,jpsim
4608,2017-02-17 02:41:10,Sorry @bitomule I wasn't aware that was the final state of where you were at. It would help if you reiterated exact steps and versions to reproduce your issue(s) and explained why you think it's a problem with Realm and not Carthage.,jpsim,bitomule
4608,2017-02-17 08:34:42,@jpsim The issue is related to Realm because version change on realm produced the issue. I was already using realm with carthage as a dependency before. I can't reproduce the issue as I've published the precompiled version but I had the same issue @iandundas described. I think any package with realm as a carthage dependency will have the same issue.,bitomule,jpsim
4608,2017-02-17 08:34:42,@jpsim The issue is related to Realm because version change on realm produced the issue. I was already using realm with carthage as a dependency before. I can't reproduce the issue as I've published the precompiled version but I had the same issue @iandundas described. I think any package with realm as a carthage dependency will have the same issue.,bitomule,iandundas
4608,2017-02-17 10:35:29,@jpsim I think the Steps To Reproduce in my initial post above should reproduce it on any machine 🤞🏻,iandundas,jpsim
4608,2017-02-27 23:05:13,"@iandundas, is it intentional that you're building Realm both via Carthage and as a subproject? Building Realm in two different ways as part of the same project seems like it's asking for weird problems.",bdash,iandundas
4608,2017-03-08 08:43:01,"Hey @bdash, thanks for debugging it - I'll try just adding the built Realm.framework to the HotTakeRealm project instead",iandundas,bdash
4607,2017-01-30 23:31:01,"@austinzheng Yes, it seems dead forever until killing the app and re-launch it. ",kishikawakatsumi,austinzheng
4603,2017-01-30 16:53:58,Hi @meteorSD. I noticed you closed this issue pretty soon after opening it. I assume this means you fixed it yourself but let us know if you need help with this or anything else. :-),istx25,meteorSD
4603,2017-01-30 23:56:10,"Good to know. Thanks for clarifying, @jpsim.",istx25,jpsim
4602,2017-01-30 16:55:37,Hi @kimdv! Thanks for reaching out. I'll review what you've shared and have someone respond with a solution or follow-up questions. Cheers! 🚀 ,istx25,kimdv
4601,2017-01-30 16:56:57,Hiya @i-schuetz! Thanks for filing this. I'm going to edit your issue to reflect your last comment (more of an enhancement than a bug) and have someone look into it. Cheers. ,istx25,i-schuetz
4600,2017-01-30 17:01:13,Hi @thomasgravina! Thanks for reaching out. I'll have someone review what you've provided and respond with a solution or follow-up questions soon. 😸 ,istx25,thomasgravina
4600,2017-02-08 16:43:52,Closing due to inactivity. @thomasgravina: Please follow-up if you need additional help and we can re-open the issue.,istx25,thomasgravina
4599,2017-01-29 17:27:04,"Thanks a lot @kukushi ! Indeed, v2.3.0 doesn't have this problem. 
I must say that I nonetheless wasn't able to reproduce it with v2.4.1 inside a blank new project. ???",onekiloparsec,kukushi
4599,2017-01-30 21:15:22,"@bdash How the `po` command in the debugger would work then at that stage, as reported, if the object was already deallocated?",onekiloparsec,bdash
4599,2017-01-30 23:27:17,"Thanks, @svenbacia! I was able to reproduce by following your instructions.",bdash,svenbacia
4599,2017-01-30 23:42:32,"One thing I've observed is that if you perform a clean build in Xcode between steps 4 and 5, the crash goes away. @svenbacia, can you test whether you see the same result?",bdash,svenbacia
4592,2017-01-26 17:15:02,Hi @wbervoets! Thanks for reaching out about this. We'll review this and have someone respond with a solution for follow-up questions soon. Cheers! :),istx25,wbervoets
4592,2017-01-30 17:04:11,"My apologies for the delay, @wbervoets. We're working through a bit of backlog right now. I'm going to assign the issue to one of the other Cocoa engineers.",istx25,wbervoets
4592,2017-02-07 16:17:13,Hi @wbervoets. My apologies for the delay. There's a lot going on right now! Would you be willing to put together a simple sample project that reproduces the issue while we wait? Thanks.,istx25,wbervoets
4592,2017-02-15 00:55:55,"@i-schuetz can you share the models involved? Specifically `Ingredient` and whatever type `itemOpt` is? Also, it'd be useful to know if this crash still occurs if you don't add `nameSort` to your `sortDescriptors` array. Thanks!",jpsim,i-schuetz
4592,2017-02-16 12:34:41,"@jpsim I can't test what happens because the crash doesn't happen anymore and don't know how to reproduce it. Here are `Ingredient` and `Item`

",i-schuetz,jpsim
4592,2017-02-16 18:10:08,"Thanks for the investigation, @weibel. We should be able to reproduce and fix this based on the analysis you've provided.",bdash,weibel
4591,2017-01-26 17:16:52,Hi @alickbass! Thanks for reaching out about this. We'll have someone review this and respond with a solution or follow-up questions soon. Cheers! :-),istx25,alickbass
4591,2017-01-30 17:05:04,Hey @alickbass! My apologies for the delay. We're working through a bit of backlog. I'm going to assign this issue to someone else who may be more available. ,istx25,alickbass
4591,2017-01-30 18:44:30,"@austinzheng That is the exact workaround that I already use) Just thought that it maybe worth pointing out this issue, or at least to mention somewhere in the docs, which methods can be used and which should be avoided",alickbass,austinzheng
4590,2017-01-26 17:18:07,Hey @raja-baz! Thanks for reporting this. We'll have someone review this and follow-up with you.,istx25,raja-baz
4590,2017-01-26 21:29:46,Is there any example out there showing how this can be avoided? @raja-baz @istx25 @jpsim ,samacs,istx25
4590,2017-01-26 21:29:46,Is there any example out there showing how this can be avoided? @raja-baz @istx25 @jpsim ,samacs,raja-baz
4590,2017-01-26 22:41:07,"@bdash What, exactly would I share with you? An IPA of the app? Would you need me to sign it/provide provisioning profiles or can you manage that part?

As for the usage pattern in question. The reproduction code above hits at least *some* bug in 2.2.0 and I highly suspect that fixing one will fix the other(both our app and the code above have no issue on 2.1.2 and a reproducible issue on 2.2.0. So obviously something changed in that version)",raja-baz,bdash
4590,2017-01-26 23:23:22,"> @bdash What, exactly would I share with you? An IPA of the app? Would you need me to sign it/provide provisioning profiles or can you manage that part?

An IPA of the app is sufficient. I can then re-sign it to work on one of my devices. It would be ideal if the app is built using the dynamic Realm framework (rather than the static one) so that I can replace the contained framework to test fixes or add extra logging.

> As for the usage pattern in question. The reproduction code above hits at least some bug in 2.2.0 and I highly suspect that fixing one will fix the other(both our app and the code above have no issue on 2.1.2 and a reproducible issue on 2.2.0. So obviously something changed in that version)

What leads you to believe that the cause of the growth in the test code is the same as what you're experiencing in your real application? The test code is clearly prone to the lock contention / fairness issue that I described, while you say it's not likely that your app is hitting that.

> One last thing, if my model of how the Realm file versions things and grows is correct, and what you're saying about the issue being locking is true. Wouldn't it follow that adding a [realm invalidate] at the end of the autorelease block in insertRun should have no effect? If we're being pinned while trying to perform a transaction and causing old copies to linger, then what happens afterwards should have no effect, correct?

>However, if you invalidate the realm there, the issue goes away. My understanding of the matter is that the autorelease pool should have had the same effect, except it doesn't, for some reason

One thing I _did_ just notice is that your `-realmFileSize` method opens the default Realm in a way that will result in it ending up in the main thread's autorelease pool. It's possible that this instance is what results in an older version of the Realm data being pinned, and that the explicit `-invalidate` you're adding works to close that Realm instance's read transaction and unpin the older version within the Realm file.

Then again, this is on the main thread so the Realm should be advanced to the latest version on each iteration of the main runloop, though I'm not sure whether that work would be scheduled before or after the main runloop's servicing of the main dispatch queue. The order matters since if the main dispatch queue is serviced first then the next invocation of `-testRun` will happen before the Realm is advanced to the latest version.",bdash,bdash
4586,2017-01-30 00:18:04,@RustyKnight thanks for offering to help! The best way to do that is to help reduce the repro case. Duplicating the radar may or may not help draw attention to this.,jpsim,RustyKnight
4586,2017-01-30 19:14:06,"Thanks for the suggestion @jckarter! That does indeed fix compilation with Xcode 8.3 beta 1, but breaks previous versions of Xcode.

> RealmSwift/List.swift:483:22: Type alias 'SubSequence' circularly references itself

Unfortunately due to [rdar://30215450](http://www.openradar.me/30215450), we can't conditionally do this for the beta.",jpsim,jckarter
4586,2017-01-31 05:48:47,@jpsim Can you try a developer snapshot once Joe's fix makes it in to one?,slavapestov,jpsim
4586,2017-01-31 05:49:58,@jpsim Also the version issue should be fixed in the snapshots too,slavapestov,jpsim
4586,2017-03-07 22:27:04,Xcode 8.3 beta 3 compiles Realm Swift just fine without the explicit type alias and subscript declarations. Thanks @jckarter!,jpsim,jckarter
4578,2017-01-27 17:16:24,@jpsim: Has this been included in a release yet? I'm guessing this was included in 2.4.0?,istx25,jpsim
4571,2017-01-20 21:03:42,"@bdash Thanks for the information. Doing further research using leaks, Going down the retain / release list I get to this last object: 
![screen shot 2017-01-20 at 12 59 19 pm](https://cloud.githubusercontent.com/assets/14960440/22165390/5ee1f254-df10-11e6-83fa-7aaa9dae39aa.png)
![screen shot 2017-01-20 at 12 58 56 pm](https://cloud.githubusercontent.com/assets/14960440/22165391/5ee30c7a-df10-11e6-8ec6-ca420b285707.png)

It seems that the object `venues` in the function screenshotted above is never released. Should I/How do I/ do that manually? As you can see, Im using that object to assign it to the model being initialized. If I release that, will it null out the object it was assigned to?

Thanks in advance for your help and the quick support. Anything I can do give you more insight I will be more than happy.",JPROFFICIAL,bdash
4571,2017-01-22 11:41:58,"hi @JPROFFICIAL. Did you solve the problem of the memory leaks, I have found the same problem.",springhand,JPROFFICIAL
4571,2017-01-22 23:45:41,"@springhand nope. I fixed a good few of my leaks by adding `[weak self]` inside all of my closures containing `self`, and checking for it. The memory leaks regarding these realm models is my only leak sources left.",JPROFFICIAL,springhand
4571,2017-01-23 01:06:11,@JPROFFICIAL . I am so. Can't completely solve the problem of leakage.,springhand,JPROFFICIAL
4571,2017-01-23 17:47:07,"@springhand @JPROFFICIAL can either of you share a project that reproduces this leak? You can send code to us privately at help@realm.io (making sure to reference this issue by URL).

If you're not in a position to share that, we could spend some time on our side preparing a basic project that attempts to reproduce this and share back with you if we can't trigger the leak so you can modify it to highlight the issue.",jpsim,springhand
4571,2017-01-23 17:47:07,"@springhand @JPROFFICIAL can either of you share a project that reproduces this leak? You can send code to us privately at help@realm.io (making sure to reference this issue by URL).

If you're not in a position to share that, we could spend some time on our side preparing a basic project that attempts to reproduce this and share back with you if we can't trigger the leak so you can modify it to highlight the issue.",jpsim,JPROFFICIAL
4571,2017-01-27 17:17:22,"Bringing attention back to @jpsim's request:

>@springhand @JPROFFICIAL can either of you share a project that reproduces this leak? You can send code to us privately at help@realm.io (making sure to reference this issue by URL).
>
>If you're not in a position to share that, we could spend some time on our side preparing a basic project that attempts to reproduce this and share back with you if we can't trigger the leak so you can modify it to highlight the issue.",istx25,jpsim
4571,2017-01-27 17:17:22,"Bringing attention back to @jpsim's request:

>@springhand @JPROFFICIAL can either of you share a project that reproduces this leak? You can send code to us privately at help@realm.io (making sure to reference this issue by URL).
>
>If you're not in a position to share that, we could spend some time on our side preparing a basic project that attempts to reproduce this and share back with you if we can't trigger the leak so you can modify it to highlight the issue.",istx25,springhand
4571,2017-01-27 17:17:22,"Bringing attention back to @jpsim's request:

>@springhand @JPROFFICIAL can either of you share a project that reproduces this leak? You can send code to us privately at help@realm.io (making sure to reference this issue by URL).
>
>If you're not in a position to share that, we could spend some time on our side preparing a basic project that attempts to reproduce this and share back with you if we can't trigger the leak so you can modify it to highlight the issue.",istx25,JPROFFICIAL
4570,2017-01-23 14:08:10,"*UPDATE:* As @austinzheng pointed out, I was testing with the wrong version, even if the podfile was pointed at the branch, the files did not contain the changes.
I tested this branch with the RealmTasks iOS app and 1.0.0 ROS with the expiration time set to 60 sec.

It does not look like the timer gets fired(I set a breakpoint in `timerFired` ). The app refreshes the token only after the server disconnects the current session.

App logs:

",radu-tutueanu,austinzheng
4568,2017-01-20 18:22:26,"Thank you for reaching out, @molind! I'll have someone review what you've provided and respond with a solution or follow-up questions as soon as possible. 🚀  ",istx25,molind
4568,2017-01-20 20:50:04,"@molind try to split copying to separate transactions.

You get this exception because Realm has a limitation for holding data in properties (16 MB) and your sync changeset exceeds this limit. @morten-krogh please correct me if I'm wrong. ",stel,molind
4568,2017-01-20 20:59:37,"Yes, @stel is right. ",morten-krogh,stel
4568,2017-01-20 23:57:28,"I think @stel is _almost_ right. It's true that Realm properties can only store up to 16MB, but the limitation for a single transaction to be under 16MB is only for synchronized Realms and is a temporary limitation that we intend to fix at some point. That constraint doesn't apply to non-synchronized Realms.",jpsim,stel
4568,2017-01-23 08:31:24,"Thanks for you answers @stel, @jpsim! It would be helpful to see notes about this limitation in documentation. May be as list of functions that could throw an exception. By now I'll add exception handler for commitWriteTransaction and try to sync data in multiple transactions in case of exception.

Is there a way to check current size of transaction? It would be useful to know when you should stop inserting data into it and commit, and start new one.
Could you provide an estimate when you'll remove this limitation on synchronized realm?",molind,jpsim
4568,2017-01-23 08:31:24,"Thanks for you answers @stel, @jpsim! It would be helpful to see notes about this limitation in documentation. May be as list of functions that could throw an exception. By now I'll add exception handler for commitWriteTransaction and try to sync data in multiple transactions in case of exception.

Is there a way to check current size of transaction? It would be useful to know when you should stop inserting data into it and commit, and start new one.
Could you provide an estimate when you'll remove this limitation on synchronized realm?",molind,stel
4568,2017-01-23 15:23:24,"Thanks for the follow-up questions, @molind. We'll try to respond to these asap.",istx25,molind
4568,2017-01-23 17:56:36,"> Is there a way to check current size of transaction? It would be useful to know when you should stop inserting data into it and commit, and start new one.

This isn't a limitation we ever intended to ship with, so we don't exactly have a great way to avoid it. Short of lifting the restriction altogether, which would be ideal.

> Could you provide an estimate when you'll remove this limitation on synchronized realm?

I'll defer to @morten-krogh if he's comfortable sharing that. Meanwhile I've created an internal-use issue to track this at the sync client level here: realm/realm-sync#1124.",jpsim,morten-krogh
4567,2017-01-20 18:19:51,"Thanks for reporting this, @yuggieg! Would you be able to provide a sample project that reproduces the issue so we can better debug this? Cheers! :-)",istx25,yuggieg
4567,2017-01-20 18:24:20,"No need to send us a repro case @yuggieg, we can see this too. This is a similar linker warning as realm/realm-object-store/issues/281 and https://github.com/realm/realm-cocoa/issues/4438. I thought we had updated our upstream projects to use the same visibility settings, but evidently that's not the case. I'm looking into this.",jpsim,yuggieg
4567,2017-02-01 15:55:28,@jpsim ^,istx25,jpsim
4566,2017-01-20 18:18:01,@kmkrn: We'll review the project you shared and follow-up soon. :),istx25,kmkrn
4566,2017-01-23 18:46:13,"@kmkrn the framework was indeed compiled with Swift 3.0.2: https://github.com/kmkrn/Homework/blob/master/Carthage/Build/iOS/RealmSwift.framework/Headers/RealmSwift-Swift.h#L1

> Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)

You're compiling Realm Swift with Xcode 8.2, but attempting to build your project with Xcode 8.0. You need to use the same version of Xcode to compile all Swift binaries used by your project.",jpsim,kmkrn
4566,2017-02-10 17:47:45,@jpsim's response seems sufficient. Closing the issue due to inactivity but feel free to re-open if someone things that it still needs to be.,istx25,jpsim
4565,2017-01-19 19:46:06,Hi @SlashDevSlashGnoll. Thanks for reaching out for support. I will have someone review what you've submitted and respond with a solution or follow-up questions as soon as possible. We appreciate your patience.,istx25,SlashDevSlashGnoll
4565,2017-01-23 15:29:06,"Just bringing attention back to this. @SlashDevSlashGnoll: Would you be able to provide some code that demonstrates the problem? If you need to (for confidentiality), you can email us the project to help@realm.io. Thanks!",istx25,SlashDevSlashGnoll
4565,2017-01-24 23:30:30,"Thanks for the suggestions to improve our docs @SlashDevSlashGnoll! Maybe @chipotle would be interested in making these clarifications?

By the way, I hope you don't mind I modified this ticket to track making these docs improvements rather than creating a new issue in order to preserve the conversation.",jpsim,SlashDevSlashGnoll
4563,2017-01-26 14:46:32,@mrackwitz Is it intentional that `createdAt` property was removed from the `Permission` schema?,kishikawakatsumi,mrackwitz
4563,2017-01-26 15:08:06,"@kishikawakatsumi: Yes, because this isn't tracked in the admin-Realm.",mrackwitz,kishikawakatsumi
4563,2017-02-06 22:37:39,"@austinzheng Yes. To use Professional Edition, it works fine and pass unit tests.",kishikawakatsumi,austinzheng
4563,2017-03-07 01:28:06,@ianpward see https://github.com/realm/product/issues/214#issuecomment-284591352,jpsim,ianpward
4563,2017-03-07 15:30:58," Using ROS 1.2.1, now unit tests are passed. Get ready to merge @jpsim @ianpward ",kishikawakatsumi,jpsim
4563,2017-03-07 15:30:58," Using ROS 1.2.1, now unit tests are passed. Get ready to merge @jpsim @ianpward ",kishikawakatsumi,ianpward
4563,2017-03-08 00:00:11,I've confirmed the failed CI jobs passed locally or they're pre-existing occasional failures. Merging this. Thanks @kishikawakatsumi @mrackwitz! 👏 ,jpsim,mrackwitz
4563,2017-03-08 00:00:11,I've confirmed the failed CI jobs passed locally or they're pre-existing occasional failures. Merging this. Thanks @kishikawakatsumi @mrackwitz! 👏 ,jpsim,kishikawakatsumi
4558,2017-01-18 18:10:56,Hi @molind. Thank you for reaching out for support. We'll review what you've provided us with and have someone respond as soon as possible with an answer or follow-up questions. We appreciate your patience. :-),istx25,molind
4558,2017-01-19 00:22:00,"@istx25 we generally don't close issues until they're fixed in the `master` branch, and since the PR fixing this issue was merged in a _git submodule_ of this repository, we have yet to incorporate it into this project. Reopening until we can advance our version of the object store to include the fix.",jpsim,istx25
4558,2017-01-19 07:49:58,@destman We're not aware of any bugs regarding skipping notifications other than the one being tracked here and fixed in realm/realm-object-store#352.,jpsim,destman
4557,2017-01-18 03:13:53,Hi @emuye. Thank you for reaching out for support. We'll look at the resources you've provided and have someone respond with a solution or followup questions as soon as possible. We appreciate your patience while we do this. :),istx25,emuye
4557,2017-01-19 23:34:18,Do you have any further questions about this @emuye?,jpsim,emuye
4557,2017-01-23 15:30:13,"Closing due to inactivity. However, maybe @bdash's comment warrants some more discussion?",istx25,bdash
4557,2017-01-23 21:44:03,My apologies. Thanks @jpsim for filing that other issue.,istx25,jpsim
4555,2017-01-17 21:15:01,"Hi @FlyingNoob thanks for your interest in Realm! We're tracking SwiftPM support as part of a larger task to take preliminary steps towards making a proof-of-concept demonstration of Realm Swift building on Linux. However, it might make sense for this task to be specifically tracked on its own, so I'll keep this ticket alive but will edit it to clarify exactly what this means.

Don't hold your breath for SwiftPM support, however. Realm already officially supports at least 4-5 separate installation methods and each one requires a significant amount of infrastructure, testing and automation, so we're not exactly keen on adding another unless the gains are worth the investment.",jpsim,FlyingNoob
4555,2017-03-16 23:18:18,My use case is similar to @hsienchiaolee. I have a project where we want to ditch CocoaPods in favor of SPM; linux support is not a concern. RealmSwift is the only dependency blocking that at the moment.,BrandonZacharie,hsienchiaolee
4554,2017-01-17 22:31:35,"@bdash Makes sense in terms of the complexity needed.
The manual version for such a computed property, for example:
var userCuriosity:EventCuriosity? {
	return from( curiosities ).singleOrNil{ $0.person.id == User.currentUserPersonID }
}

However the problem with not supporting such scenarios is that it makes the whole Realm architecture extremely fragely. We've had to compartmentalize Realm one refactor at a time to something that ""can't do too much damage"". The moment you can't use Realm filtering to store collections in its Results/Lists abstractions, you can't do fine-grained change notifications and need a custom mechanism there. Then you do that, you realize you can't communicate across threads – need to further compartmentalize there. Suddenly you need to hand-build everything because something is seen as ""complex"" and not supported, instead of rolling up the sleeves, tackling it, and understanding that without it you will not have partners succeeding on the platform.

Therefore I see this as absolutely critical for Realm to live up to its mission. Otherwise you have to re-architect your whole app (we have now twice) to get rid of Realm – making it very hard to re-architect again in its favour just to assess whether ""it's now ready yet"" – then discover it isn't.

Is there a solution where we could provide an arbitrary block to use for the sorting (this is also a scenario that's super critical). The trade-off could be sorting performance – FINE – but at least you could maintain the architecture desired for Realm to ""take over"" and model things the way you guys want them modelled. Re-architecture costs shouldn't be trivialized. You can launch any number of iterative features but if people can't add them on because they have been forced to architect in a different direction you will never have the adoption you need to make the features be used.

Points and cases:
- fine-grained notifications were launched but we had to build out own notification mechanism regardless
- Sub-path sorting was launched but doesn't support one-to-many. Therefore we had to build our own sorting, change detection and list-item update mechanism.
- Cross-thread object passing was FINALLY implemented (huge limitation from the beginning of Realm, so congratz to team there) but due to custom sorting logic missing we had to do this on out-of-bound objects anyways, on background threads as to not block UI, so an extra non-Realm model layer had to be introduced ANYWAYS - thus reducing Realm objects to dumb Data Access Objects, as opposed to rich model objects as they are intended.

These features should be set as P1's, above launch of hip ""synching platforms"" and all the other stuff the team's been working on lately (perhaps at the pressure of VC funding screaming down monetization down everyone's throats). An ORM, sync platform and enterprise services that are all Proof of Concept level across each pillar is much worse than having a single, battle-tested, production-level mature pillar that WORKS.

Want you guys to achieve the vision as much as you do! But priority of tackling these things makes ALL the difference. Hope to see a change in this strategy guys!  :)",marchy,bdash
4553,2017-01-23 15:30:48,"Do you have any additional questions or follow-up, @netgfx?",istx25,netgfx
4552,2017-01-17 09:11:32,"Thank you for reporting this issue @tzm41, but unfortunately without any reproducible case it's very hard to figure it out what is going on there and suggest anything.

Please let us know if you're able to reproduce it or if you have any other details about this crash.

/cc @finnschiermer ",stel,tzm41
4551,2017-01-16 12:57:57,@donie-inhance are you using `autoreleasepool { ... }` block around the Realm instance you open on background threads to force close it at the end of execution?,Zhuinden,donie-inhance
4551,2017-01-16 14:26:55,"@donie-inhance could you please provide the whole code sample that is executed on each thread? I guess `restoreAsset` is a Realm object, how do you create or get it?

/cc @bdash, @tgoyne ",stel,donie-inhance
4551,2017-01-16 14:38:52,"Hi @Zhuinden. Yes, I'm using auto releases pools everywhere... This code has a download queue of items it needs to download from our server. It tries to keep up to 8 downloads going at any one time (SIMULTAENOUS_DOWNLOADS_FOR_RESTORE). If we are doing uploads at the same time it can be doing up to 24 uploads at once too, all accessing the same Realm.

However, this growing database problem is restricted to downloads using the code below. At the moment the CTXRestoreAsset table has 505 rows. Small items in columns. CTXDeviceAsset has 146 rows. The database has grown to 100 Megs already after a few downloads.

Let me know if you need more. 
D



Operation queue to create more download sessions from my download queue

",donie-inhance,Zhuinden
4551,2017-01-16 16:18:46,"Hi @Zhuinden,

I noticed the issue was only happening when we had the UI open that shows a table view of the assets we are downloading. 

We use the realm notification API to update the view as it changes. The code that populates the table for the view is the one below.

With the [realm refresh] removed the database grows as we are downloading the items referenced in the table as we update the bytes downloaded etc.

If I add [realm refresh] in the loop as shown below the database stays at 1.4 Megs.

How can this code lock up the table like this? Either way, adding the refresh seems to have fixed this instance of this problem.

Thanks
Donie

",donie-inhance,Zhuinden
4551,2017-01-19 14:07:44,"@donie-inhance I figured `realm.refresh()` **after** the transaction wouldn't do much. I'd typically put it after `Realm.getDefaultInstance()` if anywhere.

I'm not a Realm member, I use Realm-Android, but the core concepts are the same. I think I can give you some insight which might be able to help you figure out a way to reduce the occurrance of this problem.

Please make sure you read this blob of text thoroughly, everything in it is important to know and understand.

-------

Realm **is** thread-safe but it does that by showing an ""immutable view of the current version of the Realm at a given time on a given thread"". This also means that while a Realm version exists at a given moment in time on a thread, it cannot be released. A version gets released if no Realm instances point to it on any thread. When this happens, the related data is cleared, and it gets reused by later versions of Realm. This ""space"" left behind is what is removed via `Realm.compactRealm()`, that way you don't need to ""write into it again to reuse it"".

Now, if you think about it, a new Realm version is created when you commit a transaction on any thread. Every committed transaction creates a new version..

Now if you have 32 threads and these threads randomly create new versions (in loops, so creating N new versions per N objects) and close/reopen Realm instances at ""intermittent versions"" while your loop creates ~100 Realm versions, you randomly end up retaining 32 different versions of the database at the same time!

Now if you have enough data, this means your database can take up 32x more space than it normally would.

---------

So with that in mind, a Realm version is released when no threads point to it, right? 

A Realm instance is **updated** in two cases:

- Realm.refresh() is called
- A transaction is opened and the Realm is put into ""write mode"", because you need to see the latest version of the Realm to start creating a new one

----------

The Realm auto-updates because it sits on top of the runloop of the underlying framework (in Android the looper, in iOS the event loop); and this event loop is a queue which can receive messages, and can receive the message that ""there was a commit in a background thread, please update your Realm instance and notify all Realm results/objects that they have been updated""

--------------

So you can do the following:

- call Realm.refresh() after `getDefaultInstance()`
- do not create multiple transactions per thread
- limit the number of concurrent threads so that you don't have the possibility of creating 32 versions of the Realm at the same time
- (use auto-updating `RunLoop` s instead of threads, although that seems unnecessarily hacky)
- make sure that `Realm.getDefaultInstance()` is wrapped in an `autoreleasepool` when used with `dispatch_async`

--------

P.S.: transactions don't get pinned. Realm instances (belonging to a given thread) do. But `autoreleasepool { ... }` should counteract that.",Zhuinden,donie-inhance
4551,2017-01-19 14:14:20,Sorry for a delay with reply @donie-inhance. We will get back to you as soon as possible. Please provide a version of Realm/Xcode you use. It would also be great if you can send us a simplified Xcode project that reproduces this case.,stel,donie-inhance
4551,2017-01-19 14:20:05,@stel I'm not sure I can reproduce this problem easily as the project is a bit of a monster build wise etc. I've tried to see if I can give you access to the source in GitHub but I'm not allowed. If I could would that help?,donie-inhance,stel
4551,2017-01-19 14:23:44,"@donie-inhance I'm not sure if it's a good idea in this case, let's start from the Realm version you use.",stel,donie-inhance
4551,2017-01-19 21:54:15,"@donie-inhance, if you're to get us access to the source it'd certainly help us understand where things are going wrong. If that's not possible, and you've indicated it may not be, then a prebuilt copy of the app that reproduces the problem would also allow us to look into it.",bdash,donie-inhance
4551,2017-01-19 21:58:52,"Hi @bdash 
OK, some progress finally. I was running with the old database in place but I just now removed the app and started from scratch. The database has grown to 1.2 megs and and held there after uploading and downloading across on average 16 threads.

I've seen no growth at all apart from the amount of items in the table which is around 1200 rows.

Is this possible that the old database having realms pinned was causing further pinning?",donie-inhance,bdash
4551,2017-01-19 22:18:57,@bdash I never have seen the file reduce in size since this problem has started. I even compress the file when the app starts but it's having no effect.,donie-inhance,bdash
4551,2017-01-19 22:27:25,"> When we speak of a version in the Realm being pinned, what that means is that somewhere in a running application there is a read transaction open that points at that version of the data. A given version is unpinned when all read transactions that were pointing at it have advanced to newer versions of the data (typically via the Realm being automatically refreshed to the latest version on each runloop iteration).

@bdash Does that mean every time I read data I'm pinning my thread? How do I release that lock? I do a lot of reads throughout my code. Some of those reads are on background threads. Well, probably most. If I didn't do a commit trans or a refresh on that thread after a read would that pin the read?",donie-inhance,bdash
4551,2017-01-19 23:20:28,"@donie-inhance the docs do say that you need to wrap the asynchronous operation in the autoreleasepool, not when you add it to the queue - see [example](https://realm.io/docs/swift/latest/#using-a-realm-across-threads)",Zhuinden,donie-inhance
4551,2017-01-19 23:23:59,"@Zhuinden Yes, I understand that and that's what I'm doing as per the example. Apart from this below...

@bdash I found an operation that was created in a nested callback that I needed to add as a dependency as the Photo library is asynchronous for video export and I created a new operation block that was dependant on that being complete. There was no autorelease around the operation block so that may have been the culprit. I also put autoreleases around all helper function that read from the realm just to be sure.

Let's see if I can make it grow again...
",donie-inhance,Zhuinden
4551,2017-01-19 23:23:59,"@Zhuinden Yes, I understand that and that's what I'm doing as per the example. Apart from this below...

@bdash I found an operation that was created in a nested callback that I needed to add as a dependency as the Photo library is asynchronous for video export and I created a new operation block that was dependant on that being complete. There was no autorelease around the operation block so that may have been the culprit. I also put autoreleases around all helper function that read from the realm just to be sure.

Let's see if I can make it grow again...
",donie-inhance,bdash
4551,2017-01-19 23:30:22,"@bdash I have a few instances where I am be doing the following in a single thread due to the complexity of the code and the fact that some of these are helpers.


Is it ok to use multiple transactions in the one thread if I release them as above?",donie-inhance,bdash
4551,2017-01-23 13:08:16,"Thanks, @d0n13! I'm closing this issue for now, please feel free to reopen it or create a new one if you need any further help.",stel,d0n13
4545,2017-01-18 00:00:34,"The problem with this @kishikawakatsumi is that it breaks the public API, which means that even if this is something that's good to merge, we can't do so until Realm 3.x.

Is there a way to fix this without breaking the public API?",jpsim,kishikawakatsumi
4545,2017-01-18 16:53:46,"@jpsim Removing pattern matching operator `~= (lhs: Realm.Error, rhs: Error) -> Bool` doesn't break anything. None of the codes below invokes the operator.







However, we can leave the operator as it is.
",kishikawakatsumi,jpsim
4543,2017-01-16 15:00:03,"Hi @LordNali! Could you please share an example Xcode project to reproduce this case?

`Realm.deleteAll()` deletes all objects from the realm, so you should be able to create a new objects with ""old"" primary keys, please check out this example:

",stel,LordNali
4543,2017-01-17 18:32:21,"@stel Sharing the Project is unfortunately not an option: It´s huge and the´re many customer specific extensions we´re not allowed to publish.

But maybe you could help me in another way: I´m pretty sure that that `realm.deleteAll()` works perfectly (like in your example). So my guess: Is there any possibility that my `internalObject`(which is initialized using the Object from the Realm) holds some kind of reference to the Realm Object? And by that calling `realm.deleteAll()` removes the object from the Realm, but it´s still persist in memory due to to pointer from the internal Object?

`realm.objects(MyRealmObject).count` is `0`after executing `realm.deleteAll()`, but maybe the Realm Object still exists in Memory due to a (unknown) pointer from the internal Object? My internal Object uses only value types from the realm object - so there shouldn't be any link / pointer to the realm object after the Initialization, but maybe I´m missing something here?",LordNali,stel
4543,2017-01-18 09:11:38,@LordNali unfortunately without any reproduction case or code examples it's difficult guess what's going on there. I suggest you to create a simple example and move step by step from there. Also make sure that you create a new object only once and there are no other threads that do the same.,stel,LordNali
4543,2017-01-23 15:31:25,@LordNali: Any luck with @stel's request?,istx25,LordNali
4543,2017-01-23 15:31:25,@LordNali: Any luck with @stel's request?,istx25,stel
4543,2017-01-24 20:37:17,"Finally: Inside my Realm Object (`Parent`) I'm referencing other Realm Objects (`Children`). In my first Code-Examaple I deleted the Parent Object, but forgot to remove the Children Objects. I should know this, because I posted a Issue regarding this Topic some Time ago. And furthermore #1186 .

Now in my second Code Sample I explicitly used `realm.deleteAll()` to remove all Objects from the Realm. This should have in fact solve the cascading delete Issue - but unfortunately there´s was another problem in my Code: A race condition with another write request for the same Object from a different Thread:

1. Thread A calls `realm.deleteAll()`
2. Thread B calls `realm.deleteAll()`
3. Thread A/B calls `realm.write`
4. Thread B/A calls `realm.write` - and there the crash happens, an Object with the same primary key already exists

So in the end there we're two causes for the error
1. `realm.delete(object)` is not enough, if there are linked Objects inside the Realm Object
2. Ensure simultaneous `realm.delete()` and `realm.write()` calls from different Thread on the same Realm-File are executed **without** interruption

@stel Using Exception breakpoint in Xcode was new to me and really helpful, thanks a lot!",LordNali,stel
4543,2017-01-24 23:31:44,I'm glad you managed to track down what your code was doing @LordNali!,jpsim,LordNali
4541,2017-01-13 18:57:37,"Hey @santhoshs5, thank you for reaching out for support. Would you be able to clarify a few things for me so we can better assist you?

1. What versions of Xcode, ObjectMapper and Realm are you using?
2. Can you provide the code where you actually transform the JSON to a Realm object?
3. Where specifically in your code does ""Realm not accept it""?

Please provide any extra details that you can. :-)",istx25,santhoshs5
4540,2017-01-17 22:11:01,Hi @rafalkitta. We will investigate further and have someone respond as soon as possible with a potential fix. We appreciate your patience.,istx25,rafalkitta
4540,2017-01-17 22:14:40,@rafalkitta: Would you be able to supply us with a sample project that demonstrates the issue so we can do some of our own debugging with the project?,istx25,rafalkitta
4540,2017-01-19 18:41:14,@rafalkitta: Would you be able to supply us with a sample project that demonstrates the issue so we can do some of our own debugging with the project?,istx25,rafalkitta
4540,2017-01-23 15:20:17,Just bringing attention back to this issue since it's gone stale. @tgoyne.,istx25,tgoyne
4540,2017-01-24 23:39:44,"@rafalkitta `b` is unmanaged in your example above. Is the real repro case omitted for brevity, or is that actually all that's needed to trigger a crash?",jpsim,rafalkitta
4540,2017-02-08 17:17:29,@rafalkitta any updates on how to reproduce this? We don't really have any leads except our stack trace.,plivesey,rafalkitta
4540,2017-03-03 20:20:18,Hey @plivesey. Sorry this dropped through the cracks. Are you still seeing this problem?,austinzheng,plivesey
4540,2017-03-08 16:16:19,"@austinzheng we haven't seen it recently, but we have very few users so rarely get any crashes. This is our highest crash so far (3 occurances), so I'm guessing it will come back? But we'll see.

I'll post here if I see it again. Thanks for checking in.",plivesey,austinzheng
4540,2017-03-22 21:28:59,"@plivesey Thanks for that Peter! :) In wishful hopes you never see this issue occur again, I'm going to close this issue. If it does indeed pop up again, please re-open it.

Thanks again!",TimOliver,plivesey
4539,2017-01-23 15:33:35,"@Jufina: Just bringing attention back to @tgoyne's question: _Are you using Realm notification elsewhere in your app?_

Some additional information would be appreciated. :)",istx25,tgoyne
4539,2017-01-23 15:33:35,"@Jufina: Just bringing attention back to @tgoyne's question: _Are you using Realm notification elsewhere in your app?_

Some additional information would be appreciated. :)",istx25,Jufina
4539,2017-01-27 17:20:47,"Bringing attention back to my request, @Jufina.

>@Jufina: Just bringing attention back to @tgoyne's question: _Are you using Realm notification elsewhere in your app?_",istx25,tgoyne
4539,2017-01-27 17:20:47,"Bringing attention back to my request, @Jufina.

>@Jufina: Just bringing attention back to @tgoyne's question: _Are you using Realm notification elsewhere in your app?_",istx25,Jufina
4539,2017-01-30 17:07:14,@Jufina: Do you need any more assistance with this issue in particular?,istx25,Jufina
4539,2017-02-01 09:05:38,"@istx25 
No, thanks for help with notifications handler. It works now.",Jufina,istx25
4538,2017-01-16 16:40:20,"I think we had this issue before but it should have been fixed in https://github.com/realm/realm-cocoa/pull/4253, however it was released in 2.1.0.. @hadiyazdi could you please try to reproduce this issue with the latest (2.2.0) version of Realm and if it still exists, it would be great if you can provide an example Xcode project to reproduce it. Thanks!",stel,hadiyazdi
4538,2017-01-17 09:59:20,"Hey guys!
I noticed the SDK in implementation is different than the documentation.

More specifically, the notification block does not return the changes anymore, but only the notification name and the realm:


But the docs are different in implementation: https://realm.io/docs/swift/latest/#collection-notifications

@stel the question is: How do I access **now** the actual changes (the insertions, deletions, modifications) ?
",danipralea,stel
4538,2017-01-17 10:04:17,@danipralea these are two different types of notifications: [Realm Notifications](https://realm.io/docs/swift/latest/#realm-notifications) that are triggered everytime when any write transaction is committed and [Collection Notifications](https://realm.io/docs/swift/latest/#collection-notifications) that notify about the changes in specific Realm Results.,stel,danipralea
4538,2017-01-17 14:39:06,thanks @stel ,danipralea,stel
4536,2017-01-18 20:48:59,Thanks @larkost !,jpsim,larkost
4530,2017-01-23 15:31:58,"Do you have any additional questions or follow-up, @NancyZY?",istx25,NancyZY
4529,2017-01-19 18:48:12,"Bringing attention back to the issue. @Clear2: Can you please share a snippet of code or better yet, a sample project which reproduces this issue? Cheers.",istx25,Clear2
4529,2017-01-30 17:24:36,"Bringing attention back to the issue. @Clear2: Can you please share a snippet of code or better yet, a sample project which reproduces this issue? Cheers.",istx25,Clear2
4529,2017-02-08 16:46:00,"Bringing attention back to the issue. @Clear2: Can you please share a snippet of code or better yet, a sample project which reproduces this issue? Cheers.",istx25,Clear2
4526,2017-01-10 19:42:30,"Hi @KelvinEC, thanks for reaching out for support. Would you be able to share a code example or sample project for us to review? Thanks.",istx25,KelvinEC
4526,2017-01-10 23:55:03,"Hi @istx25

My Class before:



My Class After:



Migration Code:



Ps: I've changed the Schema version correctly.
",KelvinEC,istx25
4524,2017-01-10 17:15:35,"Thank you for reaching out, @danipralea. I'm going to look into the problem you're experiencing and find someone who will be able to help resolve it with you. In the meantime, we appreciate your patience. 😸 ",istx25,danipralea
4524,2017-01-11 04:23:34,"@istx25 could you try creating a sample Xcode project, pasting the code from @danipralea's gist, and attempting to reproduce the issue to see if we experience the same behavior? If so, engineering can take a closer look at it. If not, hopefully @danipralea can refine the sample to demonstrate the duplicate instances referred to here.",jpsim,danipralea
4524,2017-01-11 04:23:34,"@istx25 could you try creating a sample Xcode project, pasting the code from @danipralea's gist, and attempting to reproduce the issue to see if we experience the same behavior? If so, engineering can take a closer look at it. If not, hopefully @danipralea can refine the sample to demonstrate the duplicate instances referred to here.",jpsim,istx25
4524,2017-01-11 19:48:43,"@danipralea: Which dependency(ies) are `Mappable`, `MSChannelContext` and `MappingDefaultIdentifer` coming from?",istx25,danipralea
4524,2017-01-19 16:37:35,"@danipralea sorry for a delay with the reply.

I as can understand from the info you've sent both JSON representation of the `Channel` and the `Message` contain the JSON for `Entity` objects, so in this case you can try to check if there is an `Entity` object with the primary key specified in JSON and use existing one in your mapping function. Another option is to create a new `Entity` with `.add(:update:true` method. See more in [docs](https://realm.io/docs/swift/latest/#creating-and-updating-objects-with-primary-keys).",stel,danipralea
4524,2017-01-19 16:47:41,"@stel thank you for your reply. I do not add the `Entity` object manually. I never do. They get added whenever I add a `Channel` or a `Message` object. So I have no way of controlling how the `Entity` object gets added.

I use `ObjectMapper` for mapping. I don't see it having this option of checking if the `Entity` object is already in the database. It's actually pretty decoupled of any **Realm** functionality.",danipralea,stel
4524,2017-01-19 21:21:01,"@stel I did that and receive the same error:



When I try to add a new `Message` object, I get an error saying that an entity with `identifier = 2` already exists.",danipralea,stel
4524,2017-01-28 13:28:06,"@stel This is what I'm using to add a message:

",danipralea,stel
4524,2017-01-30 09:42:42,"@danipralea to being able to help we need either an example Xcode project that reproduces your issue or at least a related code sample and the exact error message.

This code sample is not related to the previous one (https://github.com/realm/realm-cocoa/issues/4524#issuecomment-273902243), you don't call `add(message:)` method there at all.

Anyways, assuming `store` as a `Realm` instance, you need to call `add(message, update: true)` if there is an object with existing primary key.",stel,danipralea
4524,2017-01-30 10:25:18,@danipralea did you set an exception breakpoint in Xcode? Which line in your code produces this error?,stel,danipralea
4524,2017-01-30 10:45:46,"@stel thanks again for your reply. 

The code snippet I posted 2 days ago generates the error. just the add message.
To give the context again:

I have 2 messages:
**Message 1**:
identifier = 1, entity has id = 1 (it's from another user than the current one

**Message 2**:
identifier = 2, entity has id = 2 (it's from me, cause my user has id=2)

If I try to add a new message, let's say 
**Message 3**: 
identifier = -1 (cause it's a temporary message yes, until I get a response from the server)
temporaryIdentifier = SOME_UDID
entity has id = 2 

This is where it crashes, because entity with id =2 that was added by **Message 2** already exists, and when I insert **Message 3**, it crashes. Because the entity with id = 2 already exists







",danipralea,stel
4524,2017-02-02 17:40:55,Bringing attention back to this issue. cc @stel,istx25,stel
4524,2017-02-03 01:11:51,Thank you both @istx25 and @stel ,danipralea,istx25
4524,2017-02-03 01:11:51,Thank you both @istx25 and @stel ,danipralea,stel
4524,2017-02-03 11:52:21,"Sorry for a delay with reply @danipralea, but unfortunately I haven't received the info I requested.

I've made an example that shows how you need to handle primary keys in a described case, hope it helps ;)



If you need to update `Entity` everytime you save a new message, you can use this approach instead:

",stel,danipralea
4524,2017-02-03 20:59:17,"@stel I can't use a `primaryKey` for the message, because the temporary message does not have an identifier yet. only a `temporaryIdentifier`",danipralea,stel
4524,2017-02-06 09:20:29,"@danipralea right, I've updated my example, however it's not related to your case, so just try to use the same approach with ObjectMapper.",stel,danipralea
4524,2017-02-06 10:49:02,"@stel Thank you very much for your reply. does it work if the entity with id = 2 (my current user) has not been inserted yet? Cause that can be the case as well - where I open the app and load first a conversation with messages all except from me (the current user).

Do I need to make a check first and add it if it's not in the realm?",danipralea,stel
4524,2017-02-07 14:07:55,"@stel It also happens for saving into the database:

",danipralea,stel
4524,2017-02-15 02:53:16,@danipralea is this still unclear? Let us know if we can clarify this further.,jpsim,danipralea
4524,2017-02-20 19:16:05,@danipralea: Do you require anymore assistance?,istx25,danipralea
4524,2017-03-09 01:04:51,I'm closing this since we haven't heard back in a while. @danipralea please reopen if you're still having trouble with this.,jpsim,danipralea
4521,2017-01-10 17:19:12,"Hey @diegomontoya, thanks for reaching out for support. Would you be able to share more information (such as a sample project, what you were doing in the app, etc)? With that information, we'll be able to better assist you in fixing the issue.",istx25,diegomontoya
4521,2017-01-11 04:25:08,"A note for both @diegomontoya and @istx25, generally when you see `please_report_this_error_to_help_at_realm_dot_io` in a stack trace, that indicates that a useful error message was logged to the console, and sharing that message's content is very useful to report what assertion failed and why.",jpsim,diegomontoya
4521,2017-01-11 04:25:08,"A note for both @diegomontoya and @istx25, generally when you see `please_report_this_error_to_help_at_realm_dot_io` in a stack trace, that indicates that a useful error message was logged to the console, and sharing that message's content is very useful to report what assertion failed and why.",jpsim,istx25
4521,2017-01-18 19:43:52,"Ah! Awesome, thank you @jpsim. I didn't know that. Please follow-up with the information we've requested, @diegomontoya. From there, we can better assist you. :-)",istx25,jpsim
4521,2017-01-18 19:43:52,"Ah! Awesome, thank you @jpsim. I didn't know that. Please follow-up with the information we've requested, @diegomontoya. From there, we can better assist you. :-)",istx25,diegomontoya
4521,2017-01-18 20:08:48,"Actually, looking at the stack trace again, it's quite likely that we've already fixed this problem. This was a mutex destruction crash that only happened if the app was terminating anyway, so it shouldn't have had any user-facing implications whatsoever.

@diegomontoya please update to the latest version of Realm (2.2.0 as of this writing) and open a new issue if you're still seeing this crash. Thanks!",jpsim,diegomontoya
4520,2017-01-10 17:22:46,"Hey @mewehk, thanks for reaching out. Would you be able to share more information like the Xcode project any Realm-related code in `didFinishLaunchingWithOptions`? From there, we'll be able to better assist you in resolving the issue.",istx25,mewehk
4520,2017-01-18 19:45:42,Just following up since this issue's gone stale. @mewehk: Would you be able to provide us with a copy of the affected Realm file? Feel free to also email it to **help@realm.io** if you need to share it confidentially. Cheers!,istx25,mewehk
4520,2017-01-23 15:49:13,"Bringing attention back to:

>Just following up since this issue's gone stale. @mewehk: Would you be able to provide us with a copy of the affected Realm file? Feel free to also email it to **help@realm.io** if you need to share it confidentially. Cheers!",istx25,mewehk
4520,2017-02-08 16:45:09,"Bringing attention back to:

>Just following up since this issue's gone stale. @mewehk: Would you be able to provide us with a copy of the affected Realm file? Feel free to also email it to **help@realm.io** if you need to share it confidentially. Cheers!",istx25,mewehk
4518,2017-01-09 08:25:51,"@winniepooh001 It's intended behavior. The `AccountType` class has ""Gift Card"" account and ""Store Credit"" account as a relationship. The query that you performed means filtering the `AccountType` objects that match the predicate. The search text ""gift"" matches the `AccountType` object that has ""Gift Card"" account and ""Store Credit"". So the query returns the `AccountType` object, that has ""Gift Card"" account and ""Store Credit"".

If you'd like to filter `Accounts` objects, perform the query again for the `accounts` property.



Or, add a reverse relationship property to `Accounts` like the following (see `accountTypes` property in `Accounts` class):



Then query for the `Accounts` class like the following:



To retrieve `AccountType` objects, use the reverse relationship property.

FYI: Please always use `NSPredicate`'s substitution syntax like `%@` and `%K`. String interpolation in Swift causes unexpected behaviors.",kishikawakatsumi,winniepooh001
4518,2017-01-19 14:03:34,"@winniepooh001 you can define many reverse relationship in one object if that object is linked by other objects with to-many relationship, see more in [docs](https://realm.io/docs/swift/latest/#inverse-relationships).",stel,winniepooh001
4518,2017-01-23 15:49:40,"Do you have any other questions or follow-up, @winniepooh001?",istx25,winniepooh001
4517,2017-01-08 13:43:03,"@mobilinked You can use `objectTypes` to separate the schemas by file.

",kishikawakatsumi,mobilinked
4517,2017-01-09 01:48:19,"Thanks @kishikawakatsumi. This solution works to separate table schemas, but auto migration does not work (even worse, as no exception) 

## Step 1

Clean the run-time folders include the old .realm files 

## Result of step 1
Works without problem, the datatable schemas not be cloned (db1 just include table1, table 2, db2 just includes table3) 

## Step 2
Add a new filed to table3 (of db2, db2 in a app group storage) 
'dynamic var testing = """" '

## Result of step 2
Test app again, there is no exception be raised when access db1 (not db2) - before this solution, after add a new field to table3 of db2, when access db1, exception raised 

But now: **access db2 return nil** 
`let db2 = try? Realm(configuration:Realm.Configuration(fileURL: url, objectTypes: [table3.self]))`

## Step3 
Add a new filed to table1 (of db1, db1 in default app storage) 
'dynamic var testing = """" '

## Result of step3
now: **access db1 return nil** 
`let db1 = try? Realm(configuration: Realm.Configuration(objectTypes: [table1.self, table2.self]))`
",mobilinked,kishikawakatsumi
4517,2017-01-09 07:18:48,"@mobilinked `try?` ignored any errors. It hides what error has happened. Please use `try!` at the moment for investigating. `try? Realm(...)` returning `nil` means that an error occurs.

You separate schemas for `db1` and `db2`, it seems fine.



Then you added a new field to `table3`. It does not affect db1. But `db3` needs migration.




Then you added a new property to `table1`. Leave `db2` as-is, but `db1` needs migration.

",kishikawakatsumi,mobilinked
4517,2017-01-09 23:14:44,"Thanks much @kishikawakatsumi 

(I thought the migration for adding fields is automatic) ",mobilinked,kishikawakatsumi
4515,2017-01-10 17:26:26,Hey @asjesset. Thank you for filing this issue. We will look into this problem further. It would be greatly appreciated if you would be able to share any source code or projects with this problem that we can also try to reproduce the problem with.,istx25,asjesset
4514,2017-01-09 20:18:58,"I would also like to know if/when using `Date` and `Data` instead of `NSDate` and `NSData` will be acceptable. 

Edit: @Coeur, I looked further and it appears that this issue is solved in PR [#3979](https://github.com/realm/realm-cocoa/pull/3979). ",jdkelley,Coeur
4513,2017-01-09 09:36:09,"@jpsim 
Yes, I am a Chinese……",qinfensky,jpsim
4511,2017-01-17 21:33:04,@evgeny-sureev's last comment summarizes what needs to be done to correct this issue. Check `realm.isInWriteTransaction` before attempting a write transaction when you're in a notification block. I'm going to file another issue to start a discussion about adding a note for this into the documentation somewhere. Closing this issue.,istx25,evgeny-sureev
4510,2017-01-10 17:32:59,"Hey @ammoqq, thank you for reaching out for support. I will look into your question and have someone respond with an answer as soon as possible. In the meantime, we appreciate your patience while we recover from backlog.",istx25,ammoqq
4510,2017-01-16 18:38:37,"Hi @ammoqq! I don't think this feature should be implemented in database itself however you can easily implement it in your app. You can query all the ""old"" objects periodically or, say, on app startup and delete it from Realm:



Please check out the docs for more info about queries here: https://realm.io/docs/swift/latest/#queries",stel,ammoqq
4510,2017-01-19 18:53:50,"@stel's comment seems like a sufficient answer. @ammoqq, please feel free to file a new issue if you need any additional response. Closing.",istx25,ammoqq
4510,2017-01-19 18:53:50,"@stel's comment seems like a sufficient answer. @ammoqq, please feel free to file a new issue if you need any additional response. Closing.",istx25,stel
4506,2017-01-11 13:22:32,"Hi @i-schuetz Sorry about that. You should have gotten some feedback, we are just very busy with an upcoming release, so slipped this one. That said, it's definitely better to ask ""how-to"" questions on StackOverflow as that's very well suited for those questions (i.e. multiple people will improve answers and they stay visible to others, where github is better for bugs as they are ""closed"" at some point and mostly gone...
If you ask on SO I'm sure people will jump on it, otherwise we will.",bmunkholm,i-schuetz
4506,2017-01-13 15:30:16,"@i-schuetz  Would it be possible to store the objects in your model as they appear on screen , (as a `[[Object]]`) and then use realm to observe every sub array? (you would then have one notification block per section)",hhanesand,i-schuetz
4506,2017-01-13 19:47:45,"@hhanesand this would be one of the possible approaches I mentioned:

> I thought about other approaches. For example, to store the items in the Realm with the same hierarchy used in the table view, i.e. having section realm objects that are in an ordered list and contain the list items. But this would mean I have to add a notification block to each section, where these sections of course are loaded dynamically and can be modified/deleted themselves.

I was not sure if the notification tokens work well in such dynamic scenario. It's basically the same as lists with items that can be modified/deleted themselves, but with the difference that you're using all the sections / listening to multiple notification blocks from the sections as well as the contained items at the same time. It may be that it works when I test it, but in some situations something weird happens. So I wanted to ask first. Is this recommended?
",i-schuetz,hhanesand
4506,2017-01-19 20:08:14,"@i-schuetz sorry for a delay with the reply. Actually I don't think we have any recommended way to for your case, but to me personally it seems like having the same hierarchy in your database and listen for the notifications for each `Section` objects is a good idea. You should also have a notification handler for Sections query as well and unsubscribe from the specific Section notification in case it's deleted.

What issues did you have implementing this approach?",stel,i-schuetz
4506,2017-01-20 20:31:17,"@stel no problem! I tried the index-based approach I described first and then decided to pause this until getting advice. I'll try it out soon. Seems the most coherent approach. I for some reason thought that frequently adding and removing notification blocks while also manipulating all the objects involved may lead to issues, but there doesn't seem to be a reason for these concerns. I'll update this thread when I implement it, may take some days until I get to do it.",i-schuetz,stel
4506,2017-01-20 20:53:19,Awesome @i-schuetz! Looking forward for the results :) Let us know if you have any issues or need any help.,stel,i-schuetz
4506,2017-01-23 15:50:13,Feel free to comment below or file a new issue if you do @i-schuetz! :),istx25,i-schuetz
4502,2017-01-06 15:36:05,"@bdash No, that's the entire output. Nothing else appears in the Xcode console output.",andreipetre,bdash
4500,2017-01-11 04:17:42,"No, @realm-ci did its job by removing the ""waiting for user"" since you replied, so this ticket is no longer waiting for you...

To add more to what @bdash was saying, Realm doesn't expect the unexpected in all ways... in other words, often times when a Realm file has been corrupted (which by the way can happen by no fault of Realm itself), what identifies this corruption isn't a global check for corruption, but rather a failed assertion, leading to immediate process termination, which is unrecoverable.

Ideally, Realm would have no bugs whatsoever, files would never get corrupted and all potential failures would be gracefully recoverable. Unfortunately this isn't possible without incurring an impractical amount of overhead.",jpsim,bdash
4499,2017-01-16 14:17:37,"Sorry for a delay with the reply, @ssam2000. When requesting an object from the `Result` by its index  please make sure that that index is present in the collection in other case you'll get an exception.

You can check it just by checking that the requested index is less than the number of objects in the collection:



Regarding to your case it's seems like there is no object at `indexPath.row` either in `array_of_cities` or in the collection returned from `anyObject.get_cuntry_by_id`.",stel,ssam2000
4499,2017-01-23 13:18:06,@ssam2000 did you solve this problem or do you need any further help with this?,stel,ssam2000
4499,2017-02-08 16:45:44,Closing due to inactivity. @ssam2000: Feel free to follow-up and we can re-open if necessary.,istx25,ssam2000
4498,2016-12-30 11:57:40,"@gyzerocc 
I believe that the compile error due to CocoaPods or Xcode cache issues.

Please see the troubleshooting section,
https://realm.io/docs/swift/latest/#reinstalling-via-dependency-managers

and try to perform the following commands to purge caches.

",kishikawakatsumi,gyzerocc
4497,2016-12-29 21:29:58,@kirtiparghi You didn't use the issues template which actually has an important question: Are you able to replicate this problem reliably? Any repo case/app would be really useful to move us further. Thanks!,bmunkholm,kirtiparghi
4496,2016-12-28 22:19:32,"Thanks for the pull request, @AnthonyMDev. Sadly it fails to compile:


As you can see the `realm` property on `Results` is optional for sake of conformance with `RealmCollection`.",bdash,AnthonyMDev
4489,2016-12-28 14:06:07,"@austinzheng Oops~ I found it. I tried to get schema version before I set it.

On launch, I read the schema version and give it to Crashlytics as information to help me address issues. Of course, the schema version is always 0 at this moment.


Then migrate


And finally `notMainQueue.async { realm.transaction {} }` brings the crash.

This is fixed after I switch the order of my code. But it's a little bit weird to me that it still and only worked on the main thread.",jaybowong,austinzheng
4489,2017-01-03 02:54:15,"What makes you think this is a bug @austinzheng?

Looks like we're throwing an exception due to opening the Realm with the wrong schema version, which is entirely normal.",jpsim,austinzheng
4488,2017-01-03 01:54:11,"Hi @Rcrosp, I'm just following up on @austinzheng's last comment. Thanks!",jpsim,austinzheng
4488,2017-01-03 01:54:11,"Hi @Rcrosp, I'm just following up on @austinzheng's last comment. Thanks!",jpsim,Rcrosp
4488,2017-01-09 03:10:26,"target 'app' do
pod 'Realm'
end
Use CocoaPods: ""pod install""
Realm/Realm.h' file not found 
@austinzheng",Rcrosp,austinzheng
4488,2017-01-11 04:20:17,"@Rcrosp could you please post the full output of the following commands (without truncating anything):

",jpsim,Rcrosp
4488,2017-01-18 19:42:17,Hi @Rcrosp. Would you be able to follow the instructions in @jpsim's last comment? Thanks.,istx25,jpsim
4488,2017-01-18 19:42:17,Hi @Rcrosp. Would you be able to follow the instructions in @jpsim's last comment? Thanks.,istx25,Rcrosp
4488,2017-01-18 19:53:33,We need to close this since we haven't heard back from @Rcrosp in some time and this is likely not a Realm issue.,jpsim,Rcrosp
4486,2017-01-03 01:54:32,"Hi @Lafree317, I'm just following up on @austinzheng's last comment. Thanks!",jpsim,Lafree317
4486,2017-01-03 01:54:32,"Hi @Lafree317, I'm just following up on @austinzheng's last comment. Thanks!",jpsim,austinzheng
4485,2016-12-27 23:47:08,"@austinzheng that looks like it fixed the problem of not writing the Realm file locally, but it does appear the connection gets closed quickly (preventing future syncs if the data changes)

Here's the error in the console:

",jarrodparkes,austinzheng
4485,2016-12-28 02:31:35,"@austinzheng i took a closer look at the logs and found this (notice the ** marked line **):



The `upload` being denied made me assume that, for whatever reason, my app was attempting to write something (I'll see if I can find out why). So, I went ahead and gave the user `mayWrite` permissions for the Realm and now the connection isn't being closed — and ""it works"".

However, this seems to circumvent the goal (a ""readonly"" Realm that is synced locally to a client iOS app), and it makes me curious whether I'm trying to do something Realm wasn't designed to do?

From the docs, I'd assume I could achieve a behavior like this...

> It [Realm Object Server, authorization mechanism] can also be used to share data in a publisher/subscriber scenario where a single writing user shares data with many users with read permissions.

Specifically sharing data with users with read(only) permissions.",jarrodparkes,austinzheng
4485,2016-12-28 14:24:47,"@austinzheng I've looked more into the project's single view controller — the only place where Realm is mentioned, and _I'm not finding any evidence of code that results in an upload/write_. So, if it is happening, then it must be happening behind the scenes unbeknownst to me.

",jarrodparkes,austinzheng
4485,2017-01-10 00:49:20,"I got the same issue when I run the demo app following this posting : https://realm.io/news/track-santa-with-realm-swift-database-platform-part-3/.  The demo app generates the following message continuously:

>2017-01-10 09:10:37.601744 Santa Tracker[1679:603379] Sync: Connection[1]: Resolving '162.243.150.99:9080'
2017-01-10 09:10:37.603943 Santa Tracker[1679:603379] Sync: Connection[1]: Connecting to endpoint '162.243.150.99:9080' (1/1)
2017-01-10 09:10:37.895627 Santa Tracker[1679:603379] Sync: Connection[1]: Connected to endpoint '162.243.150.99:9080' (from '192.168.0.3:55752')
2017-01-10 09:10:38.101107 Santa Tracker[1679:603379] Sync: Connection[1]: Sending: CLIENT(protocol_version=15, client_info_size=2)
2017-01-10 09:10:38.101582 Santa Tracker[1679:603379] Sync: Connection[1]: Received: ERROR(error_code=206, message_size=33, try_again=0, session_ident=1)
2017-01-10 09:10:38.102489 Santa Tracker[1679:603379] Sync: Connection[1]: Connection closed due to error reported by server: Permission denied (BIND, REFRESH) (206)

The demo app normally shows santa's route and the number of presents with initial sync but I can not certain that it will work in the future. (@jarrodparkes pointed out the same concern in the above.)
> it also appears that the initial data sync happens, b/c i can access the Realm objects, but I'm unsure if any subsequent notifications are coming through without error b/c of the output I'm seeing.



",dakeshi,jarrodparkes
4485,2017-01-12 22:26:17,"@austinzheng not sure if you can raise the priority of this higher. this is actually blocking me from my first app release — if i cannot have a ""readonly"" sync'ed realm, and must resort to giving users mayWrite privileges (my current workaround), then it would be possible for a savvy user to completely wreak the Realm 😢 

unless there is something I'm missing?",jarrodparkes,austinzheng
4485,2017-01-13 02:46:01,"Hi @jarrodparkes, apologies for the delayed response. I'm trying to get in touch with our engineers who'd know how to answer your question, and will post something as soon as I hear from them.",austinzheng,jarrodparkes
4485,2017-01-13 02:47:17,"@austinzheng sounds good — i'm doing my best to find a workaround at this time, but I've struggled to find anything that ""feels right"".",jarrodparkes,austinzheng
4485,2017-02-12 16:05:40,@austinzheng have there been any updates on this since the new release?,jarrodparkes,austinzheng
4484,2017-01-03 01:53:51,"Hi @xingyong723, I'm just following up on @austinzheng's last comment. Thanks!",jpsim,xingyong723
4484,2017-01-03 01:53:51,"Hi @xingyong723, I'm just following up on @austinzheng's last comment. Thanks!",jpsim,austinzheng
4484,2017-01-16 13:50:54,I'm closing this issue because we didn't get any response. @xingyong723 please feel free to reopen it if you need any further help.,stel,xingyong723
4484,2017-01-30 09:47:02,@lonkly please take a look at https://github.com/realm/realm-cocoa/issues/2713 for some potential workarounds.,stel,lonkly
4481,2016-12-23 00:41:15,"Hi there @AnthonyMDev!

Thanks for the feature proposal! That's a very interesting idea! 

I'm a little curious though, what sort of use-cases do you have where you'd need to have this functionality in Realm?

Thanks!",TimOliver,AnthonyMDev
4481,2016-12-23 01:18:10,"Thanks for the positive words guys! 

@jpsim I'll consider the points you've made and do some research. We can get back to this after the holidays.

@TimOliver I have already got multiple use-cases for this in my own applications. I'll outline some of them for you tomorrow.",AnthonyMDev,jpsim
4481,2016-12-23 01:18:10,"Thanks for the positive words guys! 

@jpsim I'll consider the points you've made and do some research. We can get back to this after the holidays.

@TimOliver I have already got multiple use-cases for this in my own applications. I'll outline some of them for you tomorrow.",AnthonyMDev,TimOliver
4481,2016-12-27 17:41:39,"Alright, I've done a little bit of thinking. I'm not 100% familiar with all of the inner workings of `Realm` just yet, but I see the problems that you've brought up and I have some ideas to start discussing.

> How can you make sure that this validation is applied even when Objective-C/Swift accessors aren't created? For example, when using KVC on Realm Collections, Objective-C/Swift classes are never created for the individual Realm objects whose properties are being modified.

What if we made the validation method a `class` method on `RLMObject`. It would take an instance of `Self` as a parameter and validate that object. Then, anywhere where we are saving/creating an object with KVC we can still call the class method. 

Alternatively, we could create some sort of pre-defined property validations and use some sort of annotations for them. If I'm understanding correctly, we could then map the validation on to the `RLMProperty` objects. I haven't done enough work looking at how `RLMProperty` objects are derived or utilized yet, so this isn't fully fleshed out, but I am going to look into it more. This is what I imagine it might look like if we go down this route:

`

> How should the concept of validation be enforced when not all changes to a Realm are being made through the Objective-C or Swift SDK? For example, if changes are made by the Realm Object Server or by other SDKs via synchronization?

I don't know a lot about this yet, as I'm not using the `Realm Object Server` personally. I can look into it a bit, but I'd love input from the team. If the validation was a part of the schema, rather than a custom validation function, would that be able to be synced over to the `Realm Object Server`as well and handled then? This seems like it would likely be possible if we implement the second proposed solution with the pre-defined validation.

This implementation would probably go all the way back to the `realm-object-store` repository. Which would be nice because it means that the implementation for the Java SDK wouldn't be too difficult at that point.

@jpsim Hope to hear your thoughts soon!",AnthonyMDev,jpsim
4481,2016-12-27 19:17:04,"@TimOliver From my example above, you may be able to derive some basic use cases for this.

My primary use case personally is for required fields. 
While `RealmSwift` supports optional or required primitive value properties, because of the introspection in Swift we can't make required relationship properties. The `.required` property validator would be very useful to me.

## Relationships

If I validate a relationship property as `.required`, I could then implicitly unwrap the relationship and feel pretty safe about it.

`dynamic var owner: User!` 

Now I don't need to unwrap my property with `if let` statements all over my application.

## String
Minimum length requirements on `String` properties can help make my code cleaner because I don't have to check if my `String` is empty every time I want to use it.

`

Now see how I use each of these when displaying my model object. In this example, I am displaying a `UILabel` with the string value, but if the string is either `nil` or empty, I need to hide the label. (For example, when using a `UIStackView` so that the label doesn't create empty space.

### Optional With No Validation

`

### Required With No Validation

`

### Optional Non-Empty

`

### Required Non-Empty

`

You can see that the versions in which I can already assume that the `string` is not empty are more concise. Over a large code base, checks for empty strings can add up to a lot of extra lines.

## Numbers

This same value added from the `String` example can be said for `Int`, `Double` or `Float` properties in which 0 (or any default value) would be used to signify a value that hasn't been set. `RealmOptional` works fine when you want to allow the value to actually be `nil`. However in the case where the property is required, but isn't set properly upon insertion, this will now throw an error, alerting you to the issue.

## Importing JSON

The most common use case for me personally is in validating that JSON data sets up my objects correctly. I initialize my object, map my JSON on to it, and then save the object. But what if I have a required `String` property and received invalid JSON that doesn't include the `key` for that property?

Currently, my object would save with the default value for the property (usually an empty string).

I hope that I have convinced you that my proposal would be a valuable addition to `Realm`. 

Thanks for your time.",AnthonyMDev,TimOliver
4481,2017-01-04 22:47:47,@jpsim Hope you had a great holiday! Looking forward to your comments on my proposal so I can begin moving forward!,AnthonyMDev,jpsim
4480,2016-12-23 00:46:17,"Hi there @ArifADS! Thanks for the question!

Realm uses [key-value coding](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/) to update its values in that fashion. As long as the object containing the data conforms to a dictionary with the same key names as the Realm properties, Realm is able to map each item in the dictionary to its corresponding object.

That being said, on its own, it requires the data to be very specifically formatted in order for the mapping to occur successfully, so it's usually recommended to use a proper JSON parsing library to map JSON data to Realm.

One of the best ones we recommend is [ObjectMapper](https://github.com/Hearst-DD/ObjectMapper). I encourage you to try that one out.

I hope that helped!
",TimOliver,ArifADS
4480,2016-12-24 01:48:12,"I'm doing a final pass of the issues in here before the Christmas holidays. I don't think there's anything further to add here, so I'm going to close it.

@ArifADS - Please feel free to re-open this issue if you have any additional questions.

Happy holidays!",TimOliver,ArifADS
4479,2016-12-22 14:24:44,"Hi @vipindhangar!

Thanks for the issue. Sorry to hear you're experiencing a crash.

What is your app doing when the user switches devices in step 2? Are you changing the default Realm configuration or shuffling any Realm files around on disk?",TimOliver,vipindhangar
4479,2016-12-22 15:20:52,"Hi
Actually user2 just logged in to device in which previously user1 was
logged in and try to fetch the messages shared between each other and
nothing.

The default Realm configuration is same and no shuffling of any Realm files.

Thanks
Vipin

Hi @vipindhangar <https://github.com/vipindhangar>!

Thanks for the issue. Sorry to hear you're experiencing a crash.

What is your app doing when the user switches devices in step 2? Are you
changing the default Realm configuration or shuffling any Realm files
around on disk?

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
<https://github.com/realm/realm-cocoa/issues/4479#issuecomment-268809536>,
or mute the thread
<https://github.com/notifications/unsubscribe-auth/ACJKS4aV2iBNURRK7hyHkscr6hyNSnRPks5rKogzgaJpZM4LT_IC>
.
",vipindhangar,vipindhangar
4479,2016-12-23 01:01:10,"Hi @vipindhangar!

Thanks for that! I think I need a little more information to work out what's going on here. It sounds like the resources from user1 aren't getting cleaned up properly before user2 comes in, causing some kind of inconsistent state.

How does user1 log out before user2 is allowed to log in? Are you able to post some code samples?

Thanks!",TimOliver,vipindhangar
4479,2016-12-23 10:11:14,"Hello Tim,

Please find the code flow which is creating problem : -

1.
//-------------------------------------------------------------------------------------------------------------------------------------------------
- (void)updateRealm:(NSDictionary *)message
//-------------------------------------------------------------------------------------------------------------------------------------------------
{
    RLMRealm *realm = [RLMRealm defaultRealm];
    [realm beginWriteTransaction];
    [DBMessage createOrUpdateInRealm:realm withValue:message];
    [realm commitWriteTransaction];
}

2. + (instancetype)createOrUpdateInRealm:(RLMRealm *)realm
withValue:(id)value {
    // verify primary key
    RLMObjectSchema *schema = [self sharedSchema];
    if (!schema.primaryKeyProperty) {
        NSString *reason = [NSString stringWithFormat:@""'%@' does not have
a primary key and can not be updated"", schema.className];
        @throw [NSException exceptionWithName:@""RLMExecption"" reason:reason
userInfo:nil];
    }
    return (RLMObject *)RLMCreateObjectInRealmWithValue(realm, [self
className], value, true);
}


Vipin Dhangar
9893074069
8770280434


On Fri, Dec 23, 2016 at 6:31 AM, Tim Oliver <notifications@github.com>
wrote:

> Hi @vipindhangar <https://github.com/vipindhangar>!
>
> Thanks for that! I think I need a little more information to work out
> what's going on here. It sounds like the resources from user1 aren't
> getting cleaned up properly before user2 comes in, causing some kind of
> inconsistent state.
>
> How does user1 log out before user2 is allowed to log in? Are you able to
> post some code samples?
>
> Thanks!
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/realm/realm-cocoa/issues/4479#issuecomment-268923471>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ACJKSzSfSMPhRdJMjcF6CQ0dLSP8AHX6ks5rKx1egaJpZM4LT_IC>
> .
>
",vipindhangar,vipindhangar
4479,2016-12-23 10:15:35,"Hello Tim,

Please ignore the last message.

Please find the code flow which is creating problem : -

1. //----------------------------------------------------------
------------------------------------------------------------
---------------------------
- (void)updateRealm:(NSDictionary *)message
//----------------------------------------------------------
------------------------------------------------------------
---------------------------
{
    RLMRealm *realm = [RLMRealm defaultRealm];
    [realm beginWriteTransaction];
    [DBMessage createOrUpdateInRealm:realm withValue:message];
    [realm commitWriteTransaction];
}

2. + (instancetype)createOrUpdateInRealm:(RLMRealm *)realm
withValue:(id)value {
    // verify primary key
    RLMObjectSchema *schema = [self sharedSchema];
    if (!schema.primaryKeyProperty) {
        NSString *reason = [NSString stringWithFormat:@""'%@' does not have
a primary key and can not be updated"", schema.className];
        @throw [NSException exceptionWithName:@""RLMExecption"" reason:reason
userInfo:nil];
    }
    return (RLMObject *)RLMCreateObjectInRealmWithValue(realm, [self
className], value, true);
}

3. + (instancetype)createOrUpdateInRealm:(RLMRealm *)realm
withValue:(id)value {
    // verify primary key
    RLMObjectSchema *schema = [self sharedSchema];
    if (!schema.primaryKeyProperty) {
        NSString *reason = [NSString stringWithFormat:@""'%@' does not have
a primary key and can not be updated"", schema.className];
        @throw [NSException exceptionWithName:@""RLMExecption"" reason:reason
userInfo:nil];
    }
    return (RLMObject *)RLMCreateObjectInRealmWithValue(realm, [self
className], value, true);
}

4. static NSUInteger getRowForObjectWithPrimaryKey(RLMClassInfo const&
info, id primaryValue) {

    REALM_ASSERT_DEBUG(info.propertyForPrimaryKey());

    RLMProperty *const primaryProperty = info.propertyForPrimaryKey();
    const NSUInteger primaryPropertyColumn =
info.tableColumn(primaryProperty);

    switch (primaryProperty.type) {
        case RLMPropertyTypeString:
            return info.table()->find_first_string(primaryPropertyColumn,
RLMStringDataWithNSString(primaryValue));
//In this line the app get crashed
        case RLMPropertyTypeInt:
            if (primaryValue) {
                return info.table()->find_first_int(primaryPropertyColumn,
[primaryValue longLongValue]);
            } else {
                return info.table()->find_first_null(primaryPropertyColumn);
            }

        default:
            REALM_UNREACHABLE();
    }
}

Thanks

Vipin Dhangar
9893074069
8770280434


On Fri, Dec 23, 2016 at 3:41 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
wrote:

> Hello Tim,
>
> Please find the code flow which is creating problem : -
>
> 1. //----------------------------------------------------------
> ------------------------------------------------------------
> ---------------------------
> - (void)updateRealm:(NSDictionary *)message
> //----------------------------------------------------------
> ------------------------------------------------------------
> ---------------------------
> {
>     RLMRealm *realm = [RLMRealm defaultRealm];
>     [realm beginWriteTransaction];
>     [DBMessage createOrUpdateInRealm:realm withValue:message];
>     [realm commitWriteTransaction];
> }
>
> 2. + (instancetype)createOrUpdateInRealm:(RLMRealm *)realm
> withValue:(id)value {
>     // verify primary key
>     RLMObjectSchema *schema = [self sharedSchema];
>     if (!schema.primaryKeyProperty) {
>         NSString *reason = [NSString stringWithFormat:@""'%@' does not
> have a primary key and can not be updated"", schema.className];
>         @throw [NSException exceptionWithName:@""RLMExecption""
> reason:reason userInfo:nil];
>     }
>     return (RLMObject *)RLMCreateObjectInRealmWithValue(realm, [self
> className], value, true);
> }
>
>
> Vipin Dhangar
> 9893074069
> 8770280434
>
>
> On Fri, Dec 23, 2016 at 6:31 AM, Tim Oliver <notifications@github.com>
> wrote:
>
>> Hi @vipindhangar <https://github.com/vipindhangar>!
>>
>> Thanks for that! I think I need a little more information to work out
>> what's going on here. It sounds like the resources from user1 aren't
>> getting cleaned up properly before user2 comes in, causing some kind of
>> inconsistent state.
>>
>> How does user1 log out before user2 is allowed to log in? Are you able to
>> post some code samples?
>>
>> Thanks!
>>
>> —
>> You are receiving this because you were mentioned.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/realm/realm-cocoa/issues/4479#issuecomment-268923471>,
>> or mute the thread
>> <https://github.com/notifications/unsubscribe-auth/ACJKSzSfSMPhRdJMjcF6CQ0dLSP8AHX6ks5rKx1egaJpZM4LT_IC>
>> .
>>
>
>
",vipindhangar,vipindhangar
4479,2016-12-23 13:41:50,"Hi @vipindhangar!

Thanks for that, but it would help a lot more if you could send us some sample code from your app. Like I asked earlier, when both users switch devices, how is this handled in the code? Could you please paste that code sample? :)

Thanks!",TimOliver,vipindhangar
4479,2016-12-23 14:01:14,"Hello Tim,

Please find the code snippet which is being used when user log out

I'm calling  [self LogoutfromApp] when user log out from the device

One more case I have found that when  userA logout from the device and
restart the app(means fresh launch the app) and logs in with userB then the
app works fine.

1. -(void)LogoutfromApp {
          LogoutUser(DEL_ACCOUNT_ONE);

         if ([FUser logOut]) {
                 [CacheManager cleanupManual];
        }
}


//LogoutUser(DEL_ACCOUNT_ONE);
void LogoutUser(NSInteger delAccount)
//-------------------------------------------------------------------------------------------------------------------------------------------------
{
    ResignOneSignalId();

//---------------------------------------------------------------------------------------------------------------------------------------------
    if (delAccount == DEL_ACCOUNT_ONE) [Account delOne];
    if (delAccount == DEL_ACCOUNT_ALL) [Account delAll];

//---------------------------------------------------------------------------------------------------------------------------------------------
    if ([FUser logOut])
    {
        [CacheManager cleanupManual];

//-----------------------------------------------------------------------------------------------------------------------------------------
        RLMRealm *realm = [RLMRealm defaultRealm];
        [realm beginWriteTransaction];
        [realm deleteAllObjects];
        [realm commitWriteTransaction];

//-----------------------------------------------------------------------------------------------------------------------------------------
        [NotificationCenter post:NOTIFICATION_USER_LOGGED_OUT];
    }
    else [ProgressHUD showError:@""Network error.""];
}


//[FUser logOut])
+ (BOOL)logOut
//-------------------------------------------------------------------------------------------------------------------------------------------------
{
    NSError *error;
    [[FIRAuth auth] signOut:&error];

//---------------------------------------------------------------------------------------------------------------------------------------------
    if (error == nil)
    {
        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@
""CurrentUser""];
        [[NSUserDefaults standardUserDefaults] synchronize];
        return YES;
    }

//---------------------------------------------------------------------------------------------------------------------------------------------
    return NO;
}

What I'm doing when user login in the the app :-

1. - (BOOL)application:(UIApplication *)application
didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    [FIRApp configure];
return YES;
}

//Login to firebase
2. [FUser signInWithEmail:userName password:firebasePassword
completion:^(FUser *user, NSError *error) {
      if (error == nil) {

       } else {
       }
  }];

Thanks
Vipin Dhangar

Vipin Dhangar
9893074069
8770280434


On Fri, Dec 23, 2016 at 7:11 PM, Tim Oliver <notifications@github.com>
wrote:

> Hi @vipindhangar <https://github.com/vipindhangar>!
>
> Thanks for that, but it would help a lot more if you could send us some
> sample code from your app. Like I asked earlier, when both users switch
> devices, how is this handled in the code? Could you please paste that code
> sample? :)
>
> Thanks!
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/realm/realm-cocoa/issues/4479#issuecomment-268991266>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ACJKS9-X7jkRANMIXPHU52hy_VNPMxykks5rK8-lgaJpZM4LT_IC>
> .
>
",vipindhangar,vipindhangar
4479,2016-12-24 01:49:23,"Hi @vipindhangar!

Cool okay. Please send us the code when you get the chance. Most of Realm will be going on holidays next week, so it might be a little while before we can address it, but we'll try our best.

Happy holidays!",TimOliver,vipindhangar
4479,2016-12-26 13:52:48,"Hello Tim,

I'm unable to send the demo source code to you for the crash issue.
Can you help me in any other way?

Thanks

Vipin Dhangar
9893074069
8770280434


On Sat, Dec 24, 2016 at 7:19 AM, Tim Oliver <notifications@github.com>
wrote:

> Hi @vipindhangar <https://github.com/vipindhangar>!
>
> Cool okay. Please send us the code when you get the chance. Most of Realm
> will be going on holidays next week, so it might be a little while before
> we can address it, but we'll try our best.
>
> Happy holidays!
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/realm/realm-cocoa/issues/4479#issuecomment-269063444>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ACJKSyq9vGk0GDEevWAAhO1_4y9UspGeks5rLHorgaJpZM4LT_IC>
> .
>
",vipindhangar,vipindhangar
4479,2016-12-28 11:48:05,"Hello Tim,

The same issue was reported in this link

https://github.com/realm/realm-cocoa/issues/4155

Vipin Dhangar
9893074069
8770280434


On Tue, Dec 27, 2016 at 2:46 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
wrote:

> Hello Tim,
>
> Please get few error logs in the code which might be helpful to you.
> PFA.
>
> Thanks
>
> Vipin Dhangar
> 9893074069
> 8770280434
>
>
> On Mon, Dec 26, 2016 at 7:22 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
> wrote:
>
>> Hello Tim,
>>
>> I'm unable to send the demo source code to you for the crash issue.
>> Can you help me in any other way?
>>
>> Thanks
>>
>> Vipin Dhangar
>> 9893074069
>> 8770280434
>>
>>
>> On Sat, Dec 24, 2016 at 7:19 AM, Tim Oliver <notifications@github.com>
>> wrote:
>>
>>> Hi @vipindhangar <https://github.com/vipindhangar>!
>>>
>>> Cool okay. Please send us the code when you get the chance. Most of
>>> Realm will be going on holidays next week, so it might be a little while
>>> before we can address it, but we'll try our best.
>>>
>>> Happy holidays!
>>>
>>> —
>>> You are receiving this because you were mentioned.
>>> Reply to this email directly, view it on GitHub
>>> <https://github.com/realm/realm-cocoa/issues/4479#issuecomment-269063444>,
>>> or mute the thread
>>> <https://github.com/notifications/unsubscribe-auth/ACJKSyq9vGk0GDEevWAAhO1_4y9UspGeks5rLHorgaJpZM4LT_IC>
>>> .
>>>
>>
>>
>
",vipindhangar,vipindhangar
4479,2016-12-28 11:54:00,"Hello Tim,

Please also check the attachments in which there is crash logs.

Vipin Dhangar
9893074069
8770280434


On Wed, Dec 28, 2016 at 5:21 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
wrote:

> Hello Tim,
>
> Please also check the attachments in which there is crash logs.
>
>
>
> Vipin Dhangar
> 9893074069
> 8770280434
>
>
> On Wed, Dec 28, 2016 at 5:17 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
> wrote:
>
>> Hello Tim,
>>
>> The same issue was reported in this link
>>
>> https://github.com/realm/realm-cocoa/issues/4155
>>
>> Vipin Dhangar
>> 9893074069
>> 8770280434
>>
>>
>> On Tue, Dec 27, 2016 at 2:46 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
>> wrote:
>>
>>> Hello Tim,
>>>
>>> Please get few error logs in the code which might be helpful to you.
>>> PFA.
>>>
>>> Thanks
>>>
>>> Vipin Dhangar
>>> 9893074069
>>> 8770280434
>>>
>>>
>>> On Mon, Dec 26, 2016 at 7:22 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
>>> wrote:
>>>
>>>> Hello Tim,
>>>>
>>>> I'm unable to send the demo source code to you for the crash issue.
>>>> Can you help me in any other way?
>>>>
>>>> Thanks
>>>>
>>>> Vipin Dhangar
>>>> 9893074069
>>>> 8770280434
>>>>
>>>>
>>>> On Sat, Dec 24, 2016 at 7:19 AM, Tim Oliver <notifications@github.com>
>>>> wrote:
>>>>
>>>>> Hi @vipindhangar <https://github.com/vipindhangar>!
>>>>>
>>>>> Cool okay. Please send us the code when you get the chance. Most of
>>>>> Realm will be going on holidays next week, so it might be a little while
>>>>> before we can address it, but we'll try our best.
>>>>>
>>>>> Happy holidays!
>>>>>
>>>>> —
>>>>> You are receiving this because you were mentioned.
>>>>> Reply to this email directly, view it on GitHub
>>>>> <https://github.com/realm/realm-cocoa/issues/4479#issuecomment-269063444>,
>>>>> or mute the thread
>>>>> <https://github.com/notifications/unsubscribe-auth/ACJKSyq9vGk0GDEevWAAhO1_4y9UspGeks5rLHorgaJpZM4LT_IC>
>>>>> .
>>>>>
>>>>
>>>>
>>>
>>
>
",vipindhangar,vipindhangar
4479,2017-01-07 13:52:43,"I'm still waiting for your reply.


Vipin Dhangar
9893074069
8770280434


On Wed, Dec 28, 2016 at 5:23 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
wrote:

> Hello Tim,
>
> Please also check the attachments in which there is crash logs.
>
> Vipin Dhangar
> 9893074069
> 8770280434
>
>
> On Wed, Dec 28, 2016 at 5:21 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
> wrote:
>
>> Hello Tim,
>>
>> Please also check the attachments in which there is crash logs.
>>
>>
>>
>> Vipin Dhangar
>> 9893074069
>> 8770280434
>>
>>
>> On Wed, Dec 28, 2016 at 5:17 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
>> wrote:
>>
>>> Hello Tim,
>>>
>>> The same issue was reported in this link
>>>
>>> https://github.com/realm/realm-cocoa/issues/4155
>>>
>>> Vipin Dhangar
>>> 9893074069
>>> 8770280434
>>>
>>>
>>> On Tue, Dec 27, 2016 at 2:46 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
>>> wrote:
>>>
>>>> Hello Tim,
>>>>
>>>> Please get few error logs in the code which might be helpful to you.
>>>> PFA.
>>>>
>>>> Thanks
>>>>
>>>> Vipin Dhangar
>>>> 9893074069
>>>> 8770280434
>>>>
>>>>
>>>> On Mon, Dec 26, 2016 at 7:22 PM, Vipin Dhangar <dhangar.vipin@gmail.com
>>>> > wrote:
>>>>
>>>>> Hello Tim,
>>>>>
>>>>> I'm unable to send the demo source code to you for the crash issue.
>>>>> Can you help me in any other way?
>>>>>
>>>>> Thanks
>>>>>
>>>>> Vipin Dhangar
>>>>> 9893074069
>>>>> 8770280434
>>>>>
>>>>>
>>>>> On Sat, Dec 24, 2016 at 7:19 AM, Tim Oliver <notifications@github.com>
>>>>> wrote:
>>>>>
>>>>>> Hi @vipindhangar <https://github.com/vipindhangar>!
>>>>>>
>>>>>> Cool okay. Please send us the code when you get the chance. Most of
>>>>>> Realm will be going on holidays next week, so it might be a little while
>>>>>> before we can address it, but we'll try our best.
>>>>>>
>>>>>> Happy holidays!
>>>>>>
>>>>>> —
>>>>>> You are receiving this because you were mentioned.
>>>>>> Reply to this email directly, view it on GitHub
>>>>>> <https://github.com/realm/realm-cocoa/issues/4479#issuecomment-269063444>,
>>>>>> or mute the thread
>>>>>> <https://github.com/notifications/unsubscribe-auth/ACJKSyq9vGk0GDEevWAAhO1_4y9UspGeks5rLHorgaJpZM4LT_IC>
>>>>>> .
>>>>>>
>>>>>
>>>>>
>>>>
>>>
>>
>
",vipindhangar,vipindhangar
4479,2017-01-09 01:24:36,"Hi @vipindhangar!

Sorry for the delay! I was on holiday for last week! I'm back into it now though!

What attachment are you referring to? If you replied to this GitHub issue via an email and attached a file to it, I don't think it was automatically posted here...",TimOliver,vipindhangar
4479,2017-01-11 07:31:28,"Sorry @vipindhangar but I don't think there's enough information to help here still. :(

There should be some kind of output in the console explaining what kind of error occurred. Are you sure you can't retrieve a stack trace for this crash?

What is the contents of the `message` dictionary that you're providing? Is a valid primary key value in there?

It would definitely help if you could share the code with us. :)",TimOliver,vipindhangar
4476,2017-01-03 18:59:17,"Hi @apalvai, I'm just following up on my last comment from two weeks ago. Thanks!",jpsim,apalvai
4476,2017-01-16 13:48:34,"I'm closing this issue because of inactivity, @apalvai please feel free to reopen it or create a new one if you have any additional info or need any help.",stel,apalvai
4476,2017-02-09 20:36:15,"@stel we are still seeing this crash with v2.3.0 of RealmSwift library.
We first this crash when we updated our app to use realm swift, because of the amount of crashes we had to revert it to use objc version. We tried with updated v2.3.0 of RealmSwift in the latest version and we started seeing these crashes again.

<img width=""1340"" alt=""screen shot 2017-02-09 at 12 39 18 pm"" src=""https://cloud.githubusercontent.com/assets/938231/22802155/9eeecf3e-eec4-11e6-82c6-eba70380e5c2.png"">
",apalvai,stel
4476,2017-02-10 00:07:18,"@apalvai could you please file a new issue, sharing enough information to allow us to reproduce this? We'd love to fix this, but it's hard to do without more information from you.",jpsim,apalvai
4476,2017-02-16 22:55:34,@apalvai could you please share an affected Realm file in https://github.com/realm/realm-core/issues/2441 so we can investigate this?,jpsim,apalvai
4476,2017-02-22 15:52:32,@apalvai do you use encryption?,finnschiermer,apalvai
4473,2017-01-05 22:23:23,"The git operations went awry in this branch.

![image](https://cloud.githubusercontent.com/assets/474794/21699889/80ebbf84-d352-11e6-87b6-5c894a5ac99e.png)

@larkost please fix",jpsim,larkost
4473,2017-01-05 23:39:53,"@jpsim I think you are being confused by GitHub not handling rebases well for their difftool. If you look at the changes from `master` like this (note `origin/master` was at 7649d311 at the time I did the rebase):
`git difftool -d origin/master origin/larkost/4472-reenable-swift-device-testing`
... then you can see only the changes that this would actually bring. Additionally, if you look at the links to the results I provided, you can see that both of them are failing unit tests. Really failing them, specifically:
`PredicateUtilTests
    ✗ testVisitingAllExpressionTypes, failed: caught ""NSInvalidArgumentException"", ""+[NSExpression expressionForConditional:trueExpression:falseExpression:]: unrecognized selector sent to class 0x3acce7f4""`
for `ios-device-objc`, and 14 tests for `ios-device-swift` all because of time regressions:
`
SwiftPerformanceTests
    ◷ testCommitWriteTransaction measured (0.025 seconds)
    ✓ testCommitWriteTransaction (1.756 seconds)
    ◷ testCommitWriteTransactionWithCrossThreadNotification measured (0.039 seconds)
    ✓ testCommitWriteTransactionWithCrossThreadNotification (1.888 seconds)
    ◷ testCommitWriteTransactionWithLocalNotification measured (0.027 seconds)
    ✓ testCommitWriteTransactionWithLocalNotification (1.907 seconds)
    ◷ testCountWhereQuery measured (0.291 seconds)
    ✓ testCountWhereQuery (3.239 seconds)
    ◷ testCountWhereTableView measured (0.143 seconds)
    ✓ testCountWhereTableView (1.732 seconds)
    ◷ testCrossThreadSyncLatency measured (0.213 seconds)
    ✓ testCrossThreadSyncLatency (3.772 seconds)
    ◷ testDeleteAll measured (0.062 seconds)
    ✗ testDeleteAll, failed: Time average is 18% worse (max allowed: 10%).
    ◷ testEnumerateAndAccessAll measured (1.703 seconds)
    ✗ testEnumerateAndAccessAll, failed: Time average is 24% worse (max allowed: 10%).
    ◷ testEnumerateAndAccessAllSlow measured (1.580 seconds)
    ✗ testEnumerateAndAccessAllSlow, failed: Time average is 12% worse (max allowed: 10%).
    ◷ testEnumerateAndAccessArrayProperty measured (1.738 seconds)
    ✗ testEnumerateAndAccessArrayProperty, failed: Time average is 26% worse (max allowed: 10%).
    ◷ testEnumerateAndAccessArrayPropertySlow measured (1.704 seconds)
    ✗ testEnumerateAndAccessArrayPropertySlow, failed: Time average is 11% worse (max allowed: 10%).
    ◷ testEnumerateAndAccessQuery measured (0.990 seconds)
    ✗ testEnumerateAndAccessQuery, failed: Time average is 29% worse (max allowed: 10%).
    ◷ testEnumerateAndMutateAll measured (2.809 seconds)
    ✗ testEnumerateAndMutateAll, failed: Time average is 42% worse (max allowed: 10%).
    ◷ testEnumerateAndMutateQuery measured (1.448 seconds)
    ✗ testEnumerateAndMutateQuery, failed: Time average is 39% worse (max allowed: 10%).
    ◷ testIndexedStringLookup measured (0.247 seconds)
    ✗ testIndexedStringLookup, failed: Time average is 16% worse (max allowed: 10%).
    ◷ testInsertMultiple measured (0.272 seconds)
    ✗ testInsertMultiple, failed: Time average is 13% worse (max allowed: 10%).
    ◷ testInsertMultipleLiteral measured (0.405 seconds)
    ✗ testInsertMultipleLiteral, failed: Time average is 24% worse (max allowed: 10%).
    ◷ testInsertSingleLiteral measured (0.128 seconds)
    ✓ testInsertSingleLiteral (1.900 seconds)
    ◷ testLargeINQuery measured (0.450 seconds)
    ✓ testLargeINQuery (5.795 seconds)
    ◷ testManualDeletion measured (0.823 seconds)
    ✗ testManualDeletion, failed: Time average is 69% worse (max allowed: 10%).
    ◷ testQueryDeletion measured (0.271 seconds)
    ✗ testQueryDeletion, failed: Time average is 136% worse (max allowed: 10%).
    ◷ testRealmCreationCached measured (0.451 seconds)
    ✓ testRealmCreationCached (4.936 seconds)
    ◷ testRealmCreationUncached measured (0.577 seconds)
    ✓ testRealmCreationUncached (6.041 seconds)
    ◷ testSortingAllObjects measured (0.059 seconds)
    ✓ testSortingAllObjects (1.740 seconds)
    ◷ testUnindexedStringLookup measured (0.240 seconds)
    ✗ testUnindexedStringLookup, failed: Time average is 17% worse (max allowed: 10%).
`
These are obviously not CI failures, and should not be blocking this.
",larkost,jpsim
4473,2017-01-05 23:45:04,"@larkost, your branch history definitely looks bogus to me. At the very least you have duplicated commits (6bd7a465492fefe68e9d11b92d5935c8e912041e and c04e9fa513326336a818b057c811620930fcf252, for instance).",bdash,larkost
4470,2016-12-21 18:42:03,"@tgoyne I totally agree it should not and we have huge problems with that.
I already filed a bug and it was even longer before, took up to 1 minute.
That is actually the reason we are deleting our realm now.
Here is the former bug [#4368](https://github.com/realm/realm-cocoa/issues/4368)",BObereder,tgoyne
4470,2017-01-03 15:59:31,@jpsim is this already released with v2.1.2?,BObereder,jpsim
4470,2017-01-03 18:26:23,"@jpsim ah ok. I was not sure because I read ""reset file if a file format upgrade is required in ResetFile mode"" in the release commits so I was not sure if it was the same you have been working on for this fix. Thanks for clearing that up and for helping me with this issue. Keep on rocking!",BObereder,jpsim
4468,2017-01-16 13:45:41,@cclogg do you have any info related to this case? Do you need any other help or can we close this issue?,stel,cclogg
4463,2016-12-19 20:56:33,"Hi @danat8x8!

Thanks for your issue! Sorry to hear you're having some trouble installing Realm via CocoaPods.

I just looked at your `Podfile`. And noticed two things that may be causing the problem.

* If you're using Realm in Swift, I recommend you use Realm Swift instead of Realm Objective-C. As such you should use `pod 'RealmSwift'` instead of `pod 'Realm'`.
* There's a space after your specified version of the Realm pod, but still inside the quotes (`pod 'Realm', '~> 2.1.1 '`). This may cause issues with CocoaPods.

Can you please try addressing those points and let me know if that fixed it? Thanks!",TimOliver,danat8x8
4463,2016-12-19 21:26:38,"@TimOliver none of that explains the failure in `build.sh cocoapods-setup` in this case.

@danat8x8 could you please try the following commands in Terminal and report the full output?



Thanks!",jpsim,danat8x8
4463,2016-12-19 21:26:38,"@TimOliver none of that explains the failure in `build.sh cocoapods-setup` in this case.

@danat8x8 could you please try the following commands in Terminal and report the full output?



Thanks!",jpsim,TimOliver
4463,2016-12-19 22:40:45,"@danat8x8 where did you install Xcode?

",jpsim,danat8x8
4462,2016-12-19 22:36:01,"Hi @SandyChapman!

Sorry to hear that you're bumping into a potential threaded issue with `[RLMRealm defaultRealm]`. 

@tgoyne: Do you have any idea how this could potentially be happening?

Thanks!",TimOliver,SandyChapman
4462,2016-12-19 23:38:30,"@jpsim : Since this is using a concurrent GCD queue it's pretty much guaranteed that it will definitely be running on a different thread if I make several simultaneous dispatches on the queue. That's why I don't store RLMRealm or RLMObject instances and am attempting to use the class method `objectWithPrimaryKey:` to re-retrieve my instance within the context of the thread it's running on. This *should* be thread-safe.

@tgoyne : the next time I catch this happening, I'll gather the debug info you're asking for. I've validated that the thread ID on the RLMRealm instance doesn't match the current thread (which makes sense as that's why the exception is thrown), but I'll double check the coordinator next time. Hopefully, it's just a matter of leaving my app running for an hour or two like last time I saw this happen.",SandyChapman,jpsim
4462,2016-12-19 23:38:30,"@jpsim : Since this is using a concurrent GCD queue it's pretty much guaranteed that it will definitely be running on a different thread if I make several simultaneous dispatches on the queue. That's why I don't store RLMRealm or RLMObject instances and am attempting to use the class method `objectWithPrimaryKey:` to re-retrieve my instance within the context of the thread it's running on. This *should* be thread-safe.

@tgoyne : the next time I catch this happening, I'll gather the debug info you're asking for. I've validated that the thread ID on the RLMRealm instance doesn't match the current thread (which makes sense as that's why the exception is thrown), but I'll double check the coordinator next time. Hopefully, it's just a matter of leaving my app running for an hour or two like last time I saw this happen.",SandyChapman,tgoyne
4462,2016-12-24 01:43:50,"Thanks @SandyChapman! If you could collect that debug data for us, that would be really helpful. Please let us know when you're able to collect it. :)

Happy holidays!",TimOliver,SandyChapman
4462,2016-12-24 02:44:34,@TimOliver : I left my app running for a while on Friday with no crash happening. I'll turn up the frequency of the REST calls which resulted in this crash and try again when I'm back at work in the new year. Will follow up with any progress I make.,SandyChapman,TimOliver
4462,2016-12-30 17:54:44,"@TimOliver @tgoyne 
Our QA just reproduced this bug. Unfortunately since it happened outside of a debug session, I have no further details except the crash log. At least it shows there's some reproducibility to the problem.

",SandyChapman,TimOliver
4462,2016-12-30 17:54:44,"@TimOliver @tgoyne 
Our QA just reproduced this bug. Unfortunately since it happened outside of a debug session, I have no further details except the crash log. At least it shows there's some reproducibility to the problem.

",SandyChapman,tgoyne
4462,2017-01-04 12:48:32,"@tgoyne, @TimOliver, @jpsim  : I've hit this once more with the debugger attached. Here's some additional details:

`_ream->m_coordinator->m_weak_ream_notifiers` has 9 items. This sounds reasonable as I am running many background threads concurrently.

Some print statements:



So this seems to confirm that we're getting the wrong Realm for the given thread.

Stack trace:



Also note that this is happening in `allObjects` now instead of just `objectForPrimaryKey:`. Reading the pthread_self [documentation here](http://man7.org/linux/man-pages/man3/pthread_self.3.html), it states:

> Thread IDs are guaranteed to be unique only within a process.  A
> thread ID may be reused after a terminated thread has been joined, or
> a detached thread has terminated.

Is it possible that we're just hitting a collision and the static `s_realmsPerPath` isn't being cleaned up properly when a realm is no longer needed? I have 76 items in the single value in that map, which is certainly more than the 9 notifiers in the m_coordinator.

[According to Wolfram Alpha](https://www.wolframalpha.com/input/?i=1+-+(65536!+%2F+((65536-76)!+*+65536%5E76))), there's roughly a 4.25% chance of collision with 76 items bounded to the range 65536 (which the thread IDs appear to be). Could this be the problem here?

I'm guessing we could add some validation logic to `RLMGetThreadLocalCachedRealmForPath` to validate that the Realm retrieved from `s_realmsPerPath` has the correct thread ID and remove it from the cache and return `null` if it doesn't. I'm not sure if this is the best solution, but it's at least one that I see as non-intrusive and I think will work

Let me know if you guys have any other ideas. I'm willing to put the validation fix in if you think it's suitable.",SandyChapman,TimOliver
4462,2017-01-04 12:48:32,"@tgoyne, @TimOliver, @jpsim  : I've hit this once more with the debugger attached. Here's some additional details:

`_ream->m_coordinator->m_weak_ream_notifiers` has 9 items. This sounds reasonable as I am running many background threads concurrently.

Some print statements:



So this seems to confirm that we're getting the wrong Realm for the given thread.

Stack trace:



Also note that this is happening in `allObjects` now instead of just `objectForPrimaryKey:`. Reading the pthread_self [documentation here](http://man7.org/linux/man-pages/man3/pthread_self.3.html), it states:

> Thread IDs are guaranteed to be unique only within a process.  A
> thread ID may be reused after a terminated thread has been joined, or
> a detached thread has terminated.

Is it possible that we're just hitting a collision and the static `s_realmsPerPath` isn't being cleaned up properly when a realm is no longer needed? I have 76 items in the single value in that map, which is certainly more than the 9 notifiers in the m_coordinator.

[According to Wolfram Alpha](https://www.wolframalpha.com/input/?i=1+-+(65536!+%2F+((65536-76)!+*+65536%5E76))), there's roughly a 4.25% chance of collision with 76 items bounded to the range 65536 (which the thread IDs appear to be). Could this be the problem here?

I'm guessing we could add some validation logic to `RLMGetThreadLocalCachedRealmForPath` to validate that the Realm retrieved from `s_realmsPerPath` has the correct thread ID and remove it from the cache and return `null` if it doesn't. I'm not sure if this is the best solution, but it's at least one that I see as non-intrusive and I think will work

Let me know if you guys have any other ideas. I'm willing to put the validation fix in if you think it's suitable.",SandyChapman,tgoyne
4462,2017-01-04 12:48:32,"@tgoyne, @TimOliver, @jpsim  : I've hit this once more with the debugger attached. Here's some additional details:

`_ream->m_coordinator->m_weak_ream_notifiers` has 9 items. This sounds reasonable as I am running many background threads concurrently.

Some print statements:



So this seems to confirm that we're getting the wrong Realm for the given thread.

Stack trace:



Also note that this is happening in `allObjects` now instead of just `objectForPrimaryKey:`. Reading the pthread_self [documentation here](http://man7.org/linux/man-pages/man3/pthread_self.3.html), it states:

> Thread IDs are guaranteed to be unique only within a process.  A
> thread ID may be reused after a terminated thread has been joined, or
> a detached thread has terminated.

Is it possible that we're just hitting a collision and the static `s_realmsPerPath` isn't being cleaned up properly when a realm is no longer needed? I have 76 items in the single value in that map, which is certainly more than the 9 notifiers in the m_coordinator.

[According to Wolfram Alpha](https://www.wolframalpha.com/input/?i=1+-+(65536!+%2F+((65536-76)!+*+65536%5E76))), there's roughly a 4.25% chance of collision with 76 items bounded to the range 65536 (which the thread IDs appear to be). Could this be the problem here?

I'm guessing we could add some validation logic to `RLMGetThreadLocalCachedRealmForPath` to validate that the Realm retrieved from `s_realmsPerPath` has the correct thread ID and remove it from the cache and return `null` if it doesn't. I'm not sure if this is the best solution, but it's at least one that I see as non-intrusive and I think will work

Let me know if you guys have any other ideas. I'm willing to put the validation fix in if you think it's suitable.",SandyChapman,jpsim
4462,2017-01-06 17:22:45,Thanks @tgoyne : when should we expect this to get into a release? I'll try to confirm the fix once it's ready.,SandyChapman,tgoyne
4461,2016-12-20 08:54:00,"Hi @TimOliver, currently it observes the video player and updates the Episode object (and hence the Realm object) [every second](https://github.com/4np/UitzendingGemist/blob/a1ac786ef3a58055626885017cd169184eec3737/UitzendingGemist/EpisodeViewController.swift#L487) (write logic is [here](https://github.com/4np/UitzendingGemist/blob/master/NPOKit/NPOKit/NPOEpisode.swift#L134)). A quick win would probably be to keep track of the playback duration separately and update the Realm object when the video player is dismissed, but this would just take the issue a bit longer to surface. What is the reasoning for moving the transaction log into the realm objects itself and is there a way to clear / compact the transaction log? There must be information in there that is not needed?

From reading the earlier tickets I understand you are using the transaction logs for migrations? That would only mean schema changes right? I suppose the additional logs for write operations are there to facilitate rollback functionality? In the use cases for my app I would not need rollback support (only schema migration support) so it would be great if the extensive read / write operation logging could be disabled somehow.

Is there a way to log the realm size to the Xcode console?

I don't know if this makes sense, but could something like this be an idea to forcibly disable transaction logging for write operations?

",4np,TimOliver
4461,2016-12-22 14:43:36,"Hi @TimOliver ,

Thank you for getting back; your explanation makes a whole lot of sense :) I did already push code to [reduce the number of writes](https://github.com/4np/UitzendingGemist/commit/f1664f0065b3ab0b145bf7dcad907cd80d4dddbd) by only writing the number of seconds an episode played for when the video player is dismissed (instead of every seconds) so I hope this in practice will make this issue les likely to surface. Unfortunately it seems like you cannot recover from the issue _if_ it occurs, so it is good to hear the house keeping will take care of some cleanup at certain intervals and that you are thinking of possible future improvements in this respect. 

What shall we do with this issue? Keep it open so it can be tracked until this issue has been tackled, or close it?

Cheers, Jeroen",4np,TimOliver
4458,2016-12-17 14:37:08,@Coeur We recommend using third-party mapping library to bind JSON to Realm model. I think ObjectMapper https://github.com/Hearst-DD/ObjectMapper provide failable initializer to validate JSON structure while mapping process. Is this answer for you?,kishikawakatsumi,Coeur
4458,2016-12-24 01:46:10,"Thanks for the issue @Coeur! I hope that answered your question. 
Please give ObjectMapper a try and see if that provides the functionality you need.

Have a happy holiday! :)",TimOliver,Coeur
4457,2016-12-16 19:30:02,"Thanks for the PR, @bnickel! Always lovely to see contributions from the community.

Could you please add some Swift 2 and Swift 3 tests, as well as a changelog entry?",jpsim,bnickel
4457,2016-12-16 20:08:36,"@jpsim Sure, I'll probably get that in on Monday.

As far as a test goes, we're moving from a state where schema generation went from asserting in `doesNotRecognizeSelector:` to running.  Is it sufficient to provide a test that would have crashed but now doesn't?",bnickel,jpsim
4456,2016-12-17 12:35:22,"@nemesis This is intentional. Please see the discussion https://github.com/realm/realm-cocoa/pull/2319
@jpsim Do you have additional explanation about this?",kishikawakatsumi,nemesis
4456,2016-12-17 16:54:38,"@kishikawakatsumi Thanks for the response, but I think you misunderstood the issue. AFAIK #2319 is about `className` being overriden, whilst this issue is about the fact that an instance's `className` property returns an empty string, and the `static func className()` returns the appropriate result.

Please let me know if I'm missing something.",nemesis,kishikawakatsumi
4455,2016-12-17 13:38:32,@timothycosta Your code seems nothing wrong. Could you share reproducible sample project for us to investigate? Thanks. ,kishikawakatsumi,timothycosta
4455,2016-12-22 04:27:11,"@kishikawakatsumi Initially when I ran into this problem I added a check `if (lesson.isInvalidated){ continue; }` in `- (void)importLessonDetails:(NSArray<LessonMetadata*>*)lessons`.  This let me avoid the crash, but really I shouldn't have done that since it was putting off dealing with the underlying issue.

It seems that that check never gets triggered anymore, whereas at the time it was very consistent, happening within seconds of my app opening and importing. I am getting crash reports indicating that these objects are getting invalidated at some later point, but much more rarely and I can't duplicate them so far.

Many of these crash reports are frequently associated with `NSArray enumerateObjectsUsingBlock:` which in turn uses `enumerateObjectsWithOptions: NSEnumerationConcurrent`.  I'm using that in many places indirectly from a library.  Could this be the underlying problem?

EDIT:  Actually, though the library uses `enumerateObjectsUsingBlock` the stack trace shows only `enumerateObjectsWithOptions`.  The only two *public* options are `concurrent` and `reverse`.  It may be that there is another private option that apple is using for synchronous operation, since `enumerateObjectsUsingBlock` says that it is synchronous.",timothycosta,kishikawakatsumi
4455,2016-12-30 11:17:50,@timothycosta `enumerateObjectsWithOptions: NSEnumerationConcurrent` means the block might be performed some threads.  It may cause of the issue. Can you please share the stack traces?,kishikawakatsumi,timothycosta
4455,2017-01-02 06:04:42,"@kishikawakatsumi Below I'm including several logs where I'm receiving this exception.  After my last post I re-wrote that library I was relying on to avoid using `enumerateObjectsUsingBlock:` and since then I have crashed once with the same exception during`importLessonDetails` so perhaps that isn't the root cause.  This is not yet in production though.

Could you comment on whether the following two methods look safe, and what possible triggers of `Object has been deleted or invalidated ` could be besides threading and explicit deletion?

Importing objects:
1. Fetch `LessonMetadata` JSON from any of various server sources (search, feed, course list, etc...)
2. Create or update `LessonMetadata` from JSON using [+ createOrUpdateWithDictionary](https://gist.github.com/timothycosta/89e6a5461a21562fe0b64b47671aa88c)
3. Use a) `[realm addOrUpdateObject:metadata]` b)`[someRealmObject.lessons addObject:metadata]; ... [realm addOrUpdateObject:someRealmObject]` c.) both a and b together
4. *Never* call `[realm deleteObject:metadata]`
5. Always work with realm on the main thread except for one case [+ importLessonDataWithClient](https://gist.github.com/timothycosta/94812bec83ce7f8f40b4d3e001a5440e).  The crashes are frequently before this, though.

Using objects:
1. Import `Feed` which includes `Feed.lessons` and put lessons into an NSArray or reference them from blocks **
2. Import details a few at a time using that array (as in my first post)
3. Before 2 is complete, do 1 and 2 again (user refreshes list, etc...).  Refreshed `Feed.lessons` may not contain the same `lessons` as before.  Objects that are no longer in `Feed.lessons` may still be floating around the system, e.g. a lesson may be open or details are waiting to be imported in 2.

** Example of 1


Stack Traces - All these are from the main thread:

Using `enumerateObjects...` - https://gist.github.com/timothycosta/856afecaf4fef5dc74f323e98e8892c3


This trace is basically the same as when I was using `enumerateObjects...` but is now using`for (obj in array)` - https://gist.github.com/timothycosta/b62f6e4023464dee72a95f4282090bea

During tableview reload -  https://gist.github.com/timothycosta/112f2eb66a2539f2d7b583f83a711edb

These are definitely after `importLessonDataWithClient:`: https://gist.github.com/timothycosta/ed4ea916351a31f5bd7f9fa6ad995ec3
https://gist.github.com/timothycosta/33f3cf6cb426c63fa3c7e7ad8b0c2219",timothycosta,kishikawakatsumi
4454,2016-12-16 11:59:23,"@Alamoz Did you use the pre-built framework? If you use CocoaPods or Carthage, you do not need to add `Run Script Phase`. It is needed for the pre-built framework.
Another possibility, `Run Script Phase` should be later than other build phases. Could you make sure the position of `Run Script Phase` that you are added?",kishikawakatsumi,Alamoz
4454,2016-12-16 17:15:59,"@kishikawakatsumi  Yes, I'm using the pre-built framework and the Run Script Phase is defined after the other build phases. I'm going to try using Carthage or CocoaPods. I'm wondering if perhaps this problem is caused by using El Capitan instead of Sierra?

Related to this, I've come across a post where someone states that using a pre-built framework could be grounds for Apple denying an app submission. Have you ever heard of that happening?
",Alamoz,kishikawakatsumi
4454,2016-12-16 20:58:35,"@kishikawakatsumi CocoaPods didn't work (did the usual cache cleaning, etc.) Carthage did work so I'm using Carthage.
",Alamoz,kishikawakatsumi
4454,2016-12-16 21:02:07,"Thanks @jpsim. I like the Carthage approach. Noticed you closed this issue but the problem did occur and didn't go away. Maybe my environment contains some glitch, don't see others reporting this.",Alamoz,jpsim
4453,2017-03-27 16:15:51,@TimOliver @stel @dhmspector  do we still need this given LoginKit and the current state of demos?,jpsim,stel
4452,2016-12-15 10:27:00,@cemkacmaz Can you share more details? What version of Realm are you using? It seems you are using a little bit old version. Can you share a reproducible project? What is your code around crash occurred?,kishikawakatsumi,cemkacmaz
4452,2016-12-15 16:53:43,"Thanks for reporting this @cemkacmaz. We've made some bug fixes in a few parts of the code since your version (2.0.3) that are involved in this backtrace.

Could you please update to the latest version of Realm ([2.1.1](https://github.com/realm/realm-cocoa/releases/tag/v2.1.1)) and file a new issue if this persists?

By the way, in the future, it'd be very helpful if you filled out the new issue template and aimed to provide as much information as possible to help us diagnose the issue. Sharing detailed steps explaining how to trigger a crash is often necessary for us to be able to reproduce on our end and subsequently fix. Thanks!",jpsim,cemkacmaz
4452,2016-12-15 16:55:46,"Thank you for quick response @jpsim. We updated the app with the latest version of Realm (2.1.1).
If the problem persists I will write with detailed explanation.
",cemkacmaz,jpsim
4451,2016-12-15 07:30:52,"@fabiofai It is probably a problem due to caching of CocoaPods. Can you try to execute following commands?



See also [Trouble Shooting#Reinstalling Via Dependency Managers#CocoaPods](https://realm.io/docs/objc/latest/#reinstalling-via-dependency-managers)",kishikawakatsumi,fabiofai
4450,2016-12-24 01:42:38,"Hahahah that was the best comment I've ever read on GitHub @mrackwitz! Thanks for writing that! :)

@jscalo I hope that answered your question and provided a suitable solution you can use for your project. Please let us know if you have any additional questions. :)

Thanks! Happy holidays everyone!",TimOliver,mrackwitz
4450,2016-12-24 01:42:38,"Hahahah that was the best comment I've ever read on GitHub @mrackwitz! Thanks for writing that! :)

@jscalo I hope that answered your question and provided a suitable solution you can use for your project. Please let us know if you have any additional questions. :)

Thanks! Happy holidays everyone!",TimOliver,jscalo
4449,2016-12-15 04:07:11,@jvdijk Realm's KVO should notify when updating a property on a background thread. I believe that the reason is observing object `user` has been deallocated before changes happen. Could you try to keep `user` as an instance property instead a local variable?,kishikawakatsumi,jvdijk
4449,2016-12-15 22:37:48,@kishikawakatsumi You are absolutely right in the example I gave. I'm unable to reproduce it my project today… Thanks for the reply.,jvdijk,kishikawakatsumi
4445,2016-12-19 23:01:29,"Hi @wolfAle! Just a friendly ping. :) Were you able to track down this issue in the end? If not, can you please try updating your version of Realm and running it again?

Thanks!",TimOliver,wolfAle
4445,2017-01-30 20:05:01,"@dessmith you can help us by sharing a sample project that reproduces this problem.

Is it possible that you're performing file system operations (copy, move, delete, etc) on the Realm file(s) while accessing the database via Realm's APIs?",jpsim,dessmith
4444,2016-12-14 11:33:13,"@mohammdsss1 Is this in relation to the Stack Overflow question you asked [here](http://stackoverflow.com/questions/41138377/can-not-add-objects-from-a-different-realm-ios-swift)?
If so, please continue the discussion there. Stack Overflow is the best place to support.",kishikawakatsumi,mohammdsss1
4443,2016-12-14 19:35:40,"@stel `RLMSyncAuthErrorUserDoesNotExist` and `RLMSyncAuthErrorUserAlreadyExists` will never be returned in practice, as that would leak private details about which accounts exist.",jpsim,stel
4443,2016-12-24 01:37:50,"I hope that answered your question @dsanghan!

If you have additional follow-up questions, please feel free to re-open this issue and ask them in here. :)

Happy holidays!",TimOliver,dsanghan
4443,2017-01-18 19:46:39,"Thanks for the suggestion @revolter, I've forwarded the request to our server team.",jpsim,revolter
4442,2016-12-14 11:38:34,"@D-32 Use `append(objectsIn:)` instead `append(contentsOf:)`.

",kishikawakatsumi,D-32
4438,2017-01-20 23:09:33,@beloso seems like this wasn't actually fixed like we thought. Now tracking in #4567.,jpsim,beloso
4436,2016-12-12 21:29:50,"Hi @cwilliamsnh, which of the installation steps did you follow over in our docs? https://realm.io/docs/swift/latest/#installation

You'll notice that there are 3 supported installation methods for Realm Swift: ""Dynamic Framework"", ""CocoaPods"" and ""Carthage"".

Including this information in help requests is very useful for us to be able to understand what went wrong in your installation process.

Judging by the error you got, you're likely using a precompiled Swift binary in your project, which rules out CocoaPods.

As you may know, Swift isn't ABI stable yet, which means that you need to use the same Swift binary  as the version of Xcode you're using.

If you're using Carthage, that installation method only supports a single Swift version at a time, so we stick with the latest stable Xcode release at time of our release. For Realm Swift 2.1.1, that'd be Swift 3.0.1 (Xcode 8.1).

If you're using the release zips (the ""Dynamic Framework"" installation method in our docs), we provide Swift binaries for 4 different versions of Swift (2.2, 2.3, 3.0 and 3.0.1). So make sure you're using the right version.

![image](https://cloud.githubusercontent.com/assets/474794/21117547/0c15c43e-c06f-11e6-8996-76b4e54e05e9.png)

If you need to use Xcode 8.2 (which as you say just became the latest stable release today), you'll need to build from source (using CocoaPods or Carthage is easiest) or you'll need to wait for us to cut a new release to have a binary. Which might take a week or two.",jpsim,cwilliamsnh
4435,2016-12-17 14:32:19,"@mseijas To follow up on this, could you please share the crash log from the crash itself? It seems that `Too many open files` log doesn't related to Realm. ",kishikawakatsumi,mseijas
4434,2016-12-13 00:48:10,"@skander300 can you share your project with us and the steps you're taking to integrate Realm into your static library so that we can retrace how you might be getting these errors? Looks like a misconfigured project to me.

Perhaps you could look at existing Realm-dependent CocoaPods libraries to see how they're configured and compare to yours to identify what you may be doing differently? Here are a few examples that come to mind:

* [Realm-JSON](https://github.com/matthewcheok/Realm-JSON/blob/master/Realm%2BJSON.podspec)
* [RBQFetchedResultsController](https://github.com/Roobiq/RBQFetchedResultsController/blob/master/RBQFetchedResultsController.podspec)
* [RealmConverter](https://github.com/realm/realm-cocoa-converter/blob/master/RealmConverter.podspec)",jpsim,skander300
4434,2016-12-17 14:28:18,I'm closing this issue now as we've not heard back. Please feel free to reopen it or create a new issue if you have any other questions. @skander300 ,kishikawakatsumi,skander300
4433,2016-12-12 10:07:49,"@Sunitadaffodil The error message shows `Unsupported Realm file format version.` It means that the app tried to open a file created with a newer version of Realm. (For example, Realm 1.x can not open a file created by Realm 2.x). Can you make sure version of Realm you are using, and tell us more details? How do you create Realm instance? ",kishikawakatsumi,Sunitadaffodil
4433,2016-12-13 00:40:58,"> Please let me know, what's wrong I am doing.

Hard to say without being able to reproduce this ourselves... @Sunitadaffodil can you share a project with us that triggers this issue? That's the best way you can help prioritize this and get it fixed.",jpsim,Sunitadaffodil
4433,2016-12-24 01:35:49,"Hi @Sunitadaffodil!

Are you still having this problem? If so, can you please re-open this issue and provide us with some code that would let us reproduce this issue?

Realm is very careful about upgrading its internal file format, even between older versions such as Realm 1.0 and 2.0, so this sort of issue shouldn't be happening.

Thanks! Happy holidays!",TimOliver,Sunitadaffodil
4433,2017-02-10 20:06:17,"@AlexeyPoldeo I'm sorry you've found Realm to be unstable for you. If you file detailed reproducible bug reports, we're happy to fix them. So far, we have yet to get such reports.",jpsim,AlexeyPoldeo
4432,2016-12-12 10:15:48,"@danipralea It is impossible to save multiple objects with the same primary key. Also you can not change the primary key. To solve the issue, you probably need to remove the primary key from the model.",kishikawakatsumi,danipralea
4432,2016-12-12 13:46:56,"Thanks @kishikawakatsumi 
So I basically need to implement my own custom system for adding, identifying objects etc. I thought I could do it a bit more easily",danipralea,kishikawakatsumi
4432,2016-12-13 00:45:17,"> So I basically need to implement my own custom system for adding, identifying objects etc. I thought I could do it a bit more easily

That's absolutely not what @kishikawakatsumi said... and you cross-posted this via email, so I'll restate my response here:

> It's hard to me to understand what you mean by having some objects in a Realm, you receive a crash. You experience a crash... when doing what exactly?
>
> Trying to read between the lines, it seems like you might be creating two 'Entity' objects with the same primary key, which is a programmer error (aka incorrect usage of Realm's APIs).
>
> There can only be a single object of a given type with a given primary key. Trying to add an 'Entity' object with a primary key value of '2' to a Realm that already contains an 'Entity' object with a primary key value of '2' will throw a runtime exception, indicating to the user (you) that this isn't what you want to do.
>
> If you wish to ""create or update"" the 'Entity' object with a primary key value of '2' with some new data, then you should use the [Realm.create(_:value:update: true)](https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm6createuRxCS_6ObjectrFTMx5valueP_6updateSb_x) method.
>
> Of course, it's impossible for me to know if this advice even applies to you, but I'm doing my best based on the information you've provided to me. In the future, we'd greatly appreciate if you could include a bit more information when asking for help.
>
> There's a great guide on how to write thorough bug reports that you can find here: https://pspdfkit.com/blog/2016/writing-good-bug-reports/
>
> It has some great advice that will improve how well we can help you.
>
> Cheers and thanks for using Realm!

---

As a side-note, we work hard to offer free and timely support to all our users, but cross-posting issues multiple places is a great way to make us spend more time managing our support load rather than actually helping users, or working on bug fixes or new functionality. I ask that you please keep this in mind in your future interactions with us.",jpsim,kishikawakatsumi
4430,2016-12-12 11:02:30,@carmelo-ruota Can you show me your code? I do not know what is different in each cases.,kishikawakatsumi,carmelo-ruota
4430,2016-12-12 13:36:40,"@carmelo-ruota Please fill out the template we provide when you open an issue, so we can better help.",bmunkholm,carmelo-ruota
4430,2016-12-24 01:32:38,"Hi @carmelo-ruota!

I'm sorry, but we need a lot more information from you before we can help.

If you're still having trouble, can you please re-open this issue, go back and properly fill out the template we provided with all of the information requested in it?

Additionally, if you can show us your code responsible for receiving the callback events from the keyboard and performing the Realm write transaction, that would help a lot.

Thanks! Have a happy holiday!",TimOliver,carmelo-ruota
4429,2016-12-09 20:21:58,"@jeffreybergier this is with CocoaPods 1.2.0.beta.1, Xcode 8.1 and Realm Swift 2.1.1 as well?",jpsim,jeffreybergier
4429,2016-12-09 20:23:53,"@jpsim 

Version 8.2 beta (8C30a)
Cocoapods 1.0.0
Realm, 2.1.1
RealmSwift, 2.1.1",jeffreybergier,jpsim
4429,2016-12-09 21:30:53,"Adding a screenshot of the error if that helps. @i-schuetz if this is a different error than you're getting, let me know and I'll open a new Issue and stop hijacking yours :)
<img width=""1400"" alt=""screen shot 2016-12-09 at 12 09 21"" src=""https://cloud.githubusercontent.com/assets/7349616/21065157/9cc94496-be13-11e6-8386-3de855edde3f.png"">",jeffreybergier,i-schuetz
4429,2016-12-09 21:44:43,"@jeffreybergier yes, same issue!",i-schuetz,jeffreybergier
4429,2016-12-09 23:04:28,"@i-schuetz just double checking. Did you get all the header files that are part of the C++ files? See screenshot
<img width=""960"" alt=""menubar_and_realm_h_and_error__could_not_build_objective-c_module__realm__ _issue__4429_ _realm_realm-cocoa"" src=""https://cloud.githubusercontent.com/assets/7349616/21067557/c4ae4f62-be20-11e6-8800-a1707897d2be.png"">
",jeffreybergier,i-schuetz
4429,2016-12-09 23:50:23,"@jeffreybergier Actually, there is a difference between my error and yours (your first screenshot). The framework with the error at the left in my case is the framework I'm trying to build instead of  RealmSwift. The rest is the same.

![screen shot 2016-12-10 at 00 54 45](https://cloud.githubusercontent.com/assets/1381744/21068593/5e21b27c-be73-11e6-801d-0ab9ae93ee9a.png)
![screen shot 2016-12-10 at 00 56 45](https://cloud.githubusercontent.com/assets/1381744/21068720/19c2c552-be74-11e6-8da8-10cb16d7ee3f.png)

Oh. After posting the screenshot I also removed the ""Copy. Private headers"" build phase and added all the items to ""Copy. Public Headers"" phase (now it has 41 headers, which is the same number from ""Headers"" build phase), clean, build, still the same error.

Also just to confirm that we are talking about the same thing I reviewed the status by clicking on the headers in the left panel and they show as public.

I also reset my git repo to revert the search path settings described in a previous comment.

Update:
Experimentally I entered absolute paths for all the headers in module.modulemap, and then the ""Umbrella header 'Realm.h' not found"" went away but I got a ton of ""Include of non-modular header inside framework module 'Realm'"" errors. Setting ""Allow Non-modular Includes in Framework Modules"" to Yes (in Realm, RealmSwift and my framework) didn't help.",i-schuetz,jeffreybergier
4429,2016-12-10 17:47:07,@i-schuetz I see. Ok. I'm going to open a new issue for the issue I am seeing. Unfortunately I don't know enough about your project to help debug. But best of luck.,jeffreybergier,i-schuetz
4429,2016-12-10 18:56:08,"@jeffreybergier no worries, thanks! the question was directed to the general/maintainers. 

I'm getting the feeling that I'll have to re-create the project.

For now I reverted to my monolithic project, still works :)",i-schuetz,jeffreybergier
4429,2016-12-16 00:21:10,"Could reproduce exactly the same issue with the same project, on a brand new hard drive with updated macOS, Xcode, CocoaPods version...

@jeffreybergier's workaround also didn't work here.

I also tried out everything from [this SO thread](http://stackoverflow.com/questions/30355133/swift-framework-umbrella-header-h-not-found), nothing.

My new specs:

ProductName:	Mac OS X
ProductVersion:	10.12.2
BuildVersion:	16C67

/Applications/Xcode.app/Contents/Developer
Xcode 8.2
Build version 8C38

/usr/local/bin/pod
1.1.1
Realm (2.1.1)
RealmSwift (2.1.1)

/bin/bash
GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin16)


(not in use here)

/usr/bin/git
git version 2.10.1 (Apple Git-78)

**Edit**

It seems it compiles when embedding the framework as a separate project. Will update this tomorrow, can't continue right now.",i-schuetz,jeffreybergier
4429,2016-12-17 12:09:36,"@jeffreybergier It doesn't reproduce in my env, CocoaPods 1.1.1, Xcode 8.2, Realm 2.1.1. Could you make sure again the issue reproduces?",kishikawakatsumi,jeffreybergier
4429,2016-12-18 02:13:35,@kishikawakatsumi I just tried it with cocoapods 1.1.1 and it worked fine. It must be an issue with 1.0.0. I suppose we can close the issue. Thanks for looking into it!,jeffreybergier,kishikawakatsumi
4429,2017-01-10 14:30:43,"I'm getting the same error as @jeffreybergier, running Cocoapods 1.1.1. My headers are set to Public, but that didn't change anything. I'm getting this error only after including RLMSupport.swift.",pallzoltan,jeffreybergier
4428,2016-12-24 01:29:53,"@tbaranes Can you please try updating to Realm 2.1.1 and trying there? Additionally, if we can get a reproducible code sample, that would be really helpful for us. Thanks!",TimOliver,tbaranes
4428,2016-12-29 09:57:21,"@TimOliver Sorry, I missed your answer. We are already using 2.1.1, nothing changed. Sadly, we still have no tips how to reproduce it... for now, we rollback to 2.0.4 which didn't have that issue. I will try to get more information next week, but it seems to be a mysterious bug. ",tbaranes,TimOliver
4428,2017-02-15 00:51:58,"Thanks for sharing that info @semireg! Although I still don't think that's enough for us to reproduce this, so I'll mark this as ""waiting for user"" again. Please do try to send us a more complete repro case if you can.",jpsim,semireg
4428,2017-02-20 19:15:26,Hi @semireg. Just echoing @jpsim's request. Would you be able to provide more information?,istx25,jpsim
4428,2017-02-20 19:15:26,Hi @semireg. Just echoing @jpsim's request. Would you be able to provide more information?,istx25,semireg
4428,2017-02-23 14:58:30,"Just tried the fix of @semireg, but that doesn't change anything in our case, but I'm joining him to say that the issue is around from the `RLMRealmNotification`. I can't go in details since I'm not able to reproduce it (still random), but I'm almost sure that if I remove the notification, it should work (the action done before the deadlock are triggering the notification).

I'm gonna try to remove the notification subscription to check if that change anything, I will let you know if I have new information.",tbaranes,semireg
4428,2017-02-23 16:03:37,Okay @semireg - thanks for the summary.,istx25,semireg
4428,2017-02-23 16:03:58,"And awesome, @tbaranes. I'll add the waiting for user tag and please share anything you find when you get a chance. :)",istx25,tbaranes
4426,2016-12-09 09:59:09,"@danipralea It's intended behavior. Realm does not copy any data until actually access the properties. When access the properties, Realm fetch the data directly from its file. So Realm does not store any data to its ivar. That's why you cannot see any values via the debugger.

Can you make sure that an output of `print(self.channel)` is correct?",kishikawakatsumi,danipralea
4426,2016-12-09 10:04:44,"@kishikawakatsumi thank you for your reply

no, it's not correct. If I try to print it, I get `*** Terminating app due to uncaught exception 'RLMException', reason: 'Attempting to modify object outside of a write transaction - call beginWriteTransaction on an RLMRealm instance first.'`",danipralea,kishikawakatsumi
4426,2016-12-09 11:49:01,"@danipralea How to convert `Results` to `Array` is:



or 



The difference is that the latter is that each element is detached from Realm on the latter.

However, we strongly recommend using `Results` directly as a data source. Because converting `Results` to `Array` loses the advantages of Realm objects such like auto-update, zero-copy and lazy loading.",kishikawakatsumi,danipralea
4426,2016-12-09 14:05:17,It should work. @danipralea What errors did happen? Can you please share reproducible project?,kishikawakatsumi,danipralea
4426,2016-12-09 16:52:55,"The reproducible code is all here, @kishikawakatsumi. I couldn't share the project. 

Converting them to array gives me a crash (`Array(channels)`) and `map` doesn't work either.
![screenshot 2016-12-09 19 04 05](https://cloud.githubusercontent.com/assets/768893/21060402/dd76cc7a-be4f-11e6-9802-efc6bb51fc01.png)

",danipralea,kishikawakatsumi
4426,2016-12-09 19:13:23,@danipralea Xcode has this very nifty feature where it can set a symbolic lldb breakpoint to break when an exception is thrown. This is super useful for debugging what part of your code is mutating a property outside of a Realm transaction. http://blog.manbolo.com/2012/01/23/xcode-tips-1-break-on-exceptions,jpsim,danipralea
4426,2016-12-09 19:19:59,Thank you very much for your suggestion @jpsim,danipralea,jpsim
4426,2016-12-09 23:59:53,that.... didn't helped @jpsim 😢 ,danipralea,jpsim
4425,2016-12-09 10:11:16,"@jpsim how to update to the 2.1.1 version? 
Using `pod 'RealmSwift'` uses the 2.1.0 version",danipralea,jpsim
4425,2016-12-13 00:11:52,"@danipralea run `pod repo update` and specify `pod 'RealmSwift', '= 2.1.1'` in your Podfile.

@asjesset were you able to update and check to see if your issue is resolved? Thanks!",jpsim,danipralea
4425,2016-12-13 00:11:52,"@danipralea run `pod repo update` and specify `pod 'RealmSwift', '= 2.1.1'` in your Podfile.

@asjesset were you able to update and check to see if your issue is resolved? Thanks!",jpsim,asjesset
4425,2016-12-16 18:24:09,@asjesset The way you deal with this is putting the updates into a serial queue (including updating the row #). Only move to the next item in the queue when the table has completed updating.,danielrhodes,asjesset
4425,2016-12-17 08:13:52,"@jpsim Sure that is how it should work in theory, but in practice things are different. When you are doing quick successive updates, things look a bit different. Obviously you need to update the UITableView from the main thread -- it crashes otherwise. But when there are animations involved (which due to the bugginess of UITableView are hard to prevent), you can get multiple overlapping updates where it reads the wrong value for the # of rows and gets into an inconsistent state. So I have to put updates and most importantly changing the value of the overall # of rows value into a different serial queue and use a semaphore to block until the animation is complete. Obviously this isn't Realm's fault -- it's that Apple's UI stuff isn't properly adapted to multi-core environments yet.",danielrhodes,jpsim
4425,2016-12-17 14:23:13,"> My question: does the RLMResults reflect all write transactions before the notification blocks are handled succesively? Is there notification coalescing?
> If the RLMResults shows the updated data set immediately, how am I supposed to update a uitableview without calling reloadData?

`RLMResults` has been updated when the notification block are called. So what you should do is just call `reloadData()` to reflect state of the model to UI, or `insert/delete/reload RowsAtIndexPath()` methods according to the `RealmCollectionChange` to reflect state of the model to UI with animations.

Could you please let me know the issue happens again even if updating Realm to 2.1.1, thanks @asjesset ",kishikawakatsumi,asjesset
4425,2016-12-24 01:27:59,"This should have been resolved in 2.1.1; change notifications were updated to be more robust when updating the state of `UITableView` controls.

@asjesset - If updating to Realm 2.1.1 hasn't solved the issue for you, please feel free to re-open this issue.

Happy holidays!",TimOliver,asjesset
4425,2017-02-10 16:32:31,"Hi @Raghvendra7. Please file another issue as from my understanding, these issues could be related but I don't believe they're the *same* issue. Feel free to reference this issue as well. Thanks!",istx25,Raghvendra7
4424,2016-12-16 15:03:28,I'm closing this since @jpsim's comment seems fine. I hope you consider this matter resolved. Feel free to reopen if you have any further questions or if you think we should do anything differently here.,kishikawakatsumi,jpsim
4423,2016-12-08 18:38:03,"@jpsim Thanks for the clarification.  Can I recommend adding some notes in the documentation?  It's not clear there that ignored properties are excluded from queries.  The docs make it sound like they are just not persisted.

https://realm.io/docs/swift/latest/#ignored-properties
> Override Object.ignoredProperties() to prevent Realm from persisting model properties. Realm won’t interfere with the regular operation of these properties",dmorrow,jpsim
4422,2016-12-12 17:47:09,"Can anyone here actually share steps to reproduce? Seems like this might happen if you're calling `Realm.refresh()` from within a write transaction. Are any of you doing that @adomanico @rgdev @sadiq81 ? If you set a symbolic breakpoint on exceptions in Xcode, can you identify where in your code this exception is being thrown (and presumably caught)? A stack trace would be useful here too.",jpsim,adomanico
4422,2016-12-12 17:47:09,"Can anyone here actually share steps to reproduce? Seems like this might happen if you're calling `Realm.refresh()` from within a write transaction. Are any of you doing that @adomanico @rgdev @sadiq81 ? If you set a symbolic breakpoint on exceptions in Xcode, can you identify where in your code this exception is being thrown (and presumably caught)? A stack trace would be useful here too.",jpsim,sadiq81
4422,2016-12-12 17:47:09,"Can anyone here actually share steps to reproduce? Seems like this might happen if you're calling `Realm.refresh()` from within a write transaction. Are any of you doing that @adomanico @rgdev @sadiq81 ? If you set a symbolic breakpoint on exceptions in Xcode, can you identify where in your code this exception is being thrown (and presumably caught)? A stack trace would be useful here too.",jpsim,rgdev
4422,2016-12-19 18:40:08,"@kirtiparghi can you share a project that triggers this? What you shared is a way to install Realm, which we're familiar with already, and is not at fault here.",jpsim,kirtiparghi
4422,2017-02-16 23:08:06,@Ankit-Aggarwal please file a new issue taking care to fill out the template with as much relevant information as possible. Thanks.,jpsim,Ankit-Aggarwal
4421,2016-12-07 19:17:42,Thanks @vinnyt! I'll add some changelog entries for this and #4362 in an upcoming PR.,jpsim,vinnyt
4421,2016-12-07 20:27:16,@jpsim sorry about not getting the changelog entry.  Thank you for doing that.,vinnyt,jpsim
4420,2016-12-07 01:22:03,Thanks @pixelchef!,jpsim,pixelchef
4418,2016-12-07 22:57:40,"@xiaodao you'll be notified of any activity in this thread via GitHub notifications. FYI in the future, it's not necessary to comment on a thread to be notified of updates, you can simply click the ""Subscribe"" button on the right.

![image](https://cloud.githubusercontent.com/assets/474794/20990421/7ed0e782-bc8d-11e6-9c20-cb663730a4a7.png)",jpsim,xiaodao
4418,2016-12-09 00:02:52,"@jpsim once this pull request gets merged, can I run `carthage update` to get the latest build?",xiaodao,jpsim
4418,2016-12-13 21:29:00,"Looks like #4246 introduced incorrect error codes. That shouldn't have passed review...

I've fixed the expected error codes in the tests and filed realm/realm-sync-services#638 to report.

@bdash @tgoyne this is ready for review once more.",jpsim,bdash
4413,2016-12-06 18:44:47,@jpsim thanks for being so fast on this!,bsarrazin,jpsim
4412,2016-12-06 18:50:13,Thanks @koyachi! 👏 ,jpsim,koyachi
4410,2016-12-08 22:48:58,"@astigsen let us know if you'd like us to move this forward and address feedback in your place, considering that you have more than just this PR on your plate 😉",jpsim,astigsen
4410,2016-12-13 23:10:47,I've added the tests suggested by @bdash and @tgoyne.,jpsim,bdash
4410,2016-12-13 23:10:47,I've added the tests suggested by @bdash and @tgoyne.,jpsim,tgoyne
4409,2016-12-06 23:30:14,"@jpsim thanks a lot, I'll try it and get back to you later",xiaodao,jpsim
4409,2016-12-06 23:37:34,"@jpsim we have a `-Werror` flag in project build settings, is it possible to only use `-Wno-error` flag for the Realm framework? Thanks.

btw, we were using `carthage update`, not `carthage update --no-use-binaries`",xiaodao,jpsim
4409,2016-12-13 00:08:44,"@xiaodao rather than wait for us to make a release to accommodate the non-standard compiler flags you use in your project, perhaps you could just remove those flags from your Xcode project's build settings in the meantime?",jpsim,xiaodao
4408,2016-12-05 11:59:16,"@ehlersd please try to clean your Xcode build folder (Product -> (Press and hold option key) -> Clean Build Folder...).

If it doesn't help, try to clean your CocoaPods cache and re-integrate pods:

",stel,ehlersd
4408,2016-12-06 01:33:32,"Hi @ehlersd, your Xcode project appears to have been incorrectly configured.

By running `pod deintegrate && pod install`, I could get everything building again. I've found that this is generally a good way to ""reset"" Xcode projects if they've been set up in a way that CocoaPods won't automatically find all its source or header files.

Here's the diff in the `pbxproj` file after running those commands:

",jpsim,ehlersd
4408,2016-12-06 16:57:07,"@jpsim Since this is a 100% clean ""just created"" project, I don't see how it could possibly be ""incorrectly configured"".  But, with that being said, I executed the `pod deintegrate && pod install` and got the same thing.

So, now I'll ask a couple of questions of you, since you were able to get it to work:
- What version of Xcode are you using? (I'm using Xcode 8.1)
- What version of cocoapods are you using? (I'm using Cocoapods v1.1.1)
",ehlersd,jpsim
4406,2016-12-02 22:05:24,"@jpsim - could you please elaborate on this? How should someone utilize this in RealmSwift? The documentation isn't very clear on this, at least from what I could find in a quick look through it. Thanks!",kevinmlong,jpsim
4405,2016-12-05 10:58:14,"@semireg Realm 2.1.1 has recently been released and it could contain some related fixes. Please try to update to the latest version and check if these issues still exist there. If so, could you please provide some more info how to reproduce and identify it, thanks!",stel,semireg
4402,2016-12-07 01:56:18,"> Is there any way to do it without blocking UI?

@tgoyne's comment just above mentions exactly how to do that: you can either not call `refresh()` or remove the notification blocks on `Results` or `List`s.

However, in general I think you may be using the wrong architecture for this. The whole point behind change notifications is that you can react to changes no matter where they originate from: other threads, processes, or even devices. Having a single point of change handling helps simplify and localize code.

In your case, it sounds like you're using both change notifications, as well as a callback mechanism to be notified when changes are available in other ways. I suggest you reconsider this architecture to simplify it to use this single point of change handling concept.

You can learn more about how to architect apps to be reactive and notification-based in our recent series of articles ending with [Live Objects and Fine-Grained Notifications: Updates with Realm](https://realm.io/news/live-objects-fine-grained-notifications-realm-update/).",jpsim,tgoyne
4401,2016-12-05 11:26:04,"Happy to hear that you resolved your problem, @BackWorld!

Static Realm framework is distributed as a framework because it also includes headers, it's a convenient way of distributing static libraries, please check [this Stack Overflow Question](http://stackoverflow.com/questions/27899799/ios-static-vs-dynamic-frameworks-clarifications) for more info about static frameworks.",stel,BackWorld
4400,2016-12-02 06:36:27,@BackWorld it looks like you forgot to fill the new issue template. Please answer all the questions listed here so we can have enough information to help you: https://github.com/realm/realm-cocoa/blob/master/.github/ISSUE_TEMPLATE.md,jpsim,BackWorld
4400,2016-12-06 00:51:58,"I'm having trouble following this thread @BackWorld, but as you have now closed the ticket, I'm assuming you resolved whatever issue you were experiencing?",jpsim,BackWorld
4397,2016-12-05 18:14:30,@jpsim did this get into 2.1.1?,rex-remind101,jpsim
4396,2016-12-01 17:21:43,"Hi @jasper-chan, can you share a code snippet that demonstrates the problem?",bdash,jasper-chan
4396,2016-12-01 17:26:06,"Hello @bdash 
Would it be alright if I emailed you screenshots/video? Its a bit difficult to share just a snippet of it as I feel like you would need a larger context in order to understand what the method is doing.",jasper-chan,bdash
4396,2016-12-01 18:08:33,@bdash I just sent an email with a brief explanation of the situation. I have also included the header file of our data models to give you proper information regarding what our realm objects look like. I can also provide the realm file if that will help in your investigation. Please advise what else I can do to assist you in this matter.,jasper-chan,bdash
4396,2016-12-05 16:29:38,"@bdash I sent @TimOliver an email over the weekend with more code and explanation to help explain this situation. If you could kindly connect with him to get the information, it might be of significant help to helping you resolve this issue.

Thanks!",jasper-chan,bdash
4396,2016-12-13 18:42:25,"@jpsim Based on our discussions via email with Tim Oliver, it seems like 2343 is the issue we are experiencing. Is there any information regarding if 2343 will be pushed higher up in priority? Or what the timeline is for this enhancement?",jasper-chan,jpsim
4395,2016-12-01 15:25:49,"Hi @AlasKuNull!

What does `model.barCode` return? Is it string or the number?",stel,AlasKuNull
4395,2016-12-01 15:40:43,"Thanks a lot！I fixed it.
when i NSLog model.barCode，it return expect string,but when I catch it in breakpoint,I found unexpected ""\x1d"" in the string. I replace it and fixed the bug.
Thank for your reply!


发自网易邮箱大师
On 12/01/2016 23:25, Dmitry Obukhov wrote:

Hi @AlasKuNull!

What does model.barCode return? Is it string or the number?

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.",AlasKuNull,AlasKuNull
4394,2016-12-01 10:47:45,"Thank you for reporting this issue and for the example project, @hunganh0403! I was also able to reproduce it, the crash happens during the autorelease pool draining. With memory management diagnostics turned on it seems that the resulting string was deallocated somewhere outside the autorelease pool. 



/cc @bdash, @tgoyne ",stel,hunganh0403
4393,2016-12-01 12:18:58,"Looks like the client closes the session by itself.. @KieranLafferty please try to keep a strong reference to Realm instance you created.

@austinzheng is this an expected behavior?",stel,KieranLafferty
4393,2016-12-12 19:19:10,"@mseijas, I'd suggest filing a new issue to understand why you're hitting the file descriptor limit.",bdash,mseijas
4393,2016-12-24 01:23:46,"@KieranLafferty Are you still experiencing this problem? Make sure to hold onto a strong reference to `RLMRealm` to keep the connection open. If you want to open up other instances of the same `RLMRealm` object on a background thread, all you need to do is create `RLMRealm` with the same `RLMRealmConfiguration` object you used on the main thread. Configuration objects can be safely passed between threads as long as they're not mutated.

Please feel free to re-open this issue if you have any additional issues that need help.

Happy holidays!",TimOliver,KieranLafferty
4390,2016-12-01 08:02:42,"@hunganh0403  Hi, it's different . No property names  begin with ""new"" in my project. Best not to do so。
",zhilshi,hunganh0403
4390,2016-12-07 00:24:31,@zhilshi please try again with Realm 2.1.1 and let us know if you're still running into this issue.,jpsim,zhilshi
4390,2016-12-24 01:20:17,"Thanks for the issue @zhilshi!

It's been nearly 3 weeks since this issue was touched, so I'm going to assume that the Realm 2.1.1 release fixed your issue. If this is not the case, please feel free to re-open and follow up. :)

Thanks! Happy holidays!",TimOliver,zhilshi
4387,2016-11-29 19:49:48,"Hi @rex-remind101, I'm sorry you're affected by this.

Unfortunately, this report is missing considerable information before we can do much to investigate this. I understand you cannot reproduce in a project in which you can share with us, but here's some useful information to share short of a full repro:

1. Does this crash happen with previous versions of Realm? Is this a regression specific to 2.1.0?
2. How common is this crash? What percentage of sessions/users/Realms are affected?
3. Does doing/avoid certain things make this crash more/less likely to happen? Like avoiding certain parts of your app, avoiding notification blocks, using a 32-bit vs 64-bit device, Simulator vs device, debug vs release builds, updating from an app using a previous version of Realm vs starting fresh, etc.",jpsim,rex-remind101
4387,2016-12-05 19:13:00,@rex-remind101 could you please update to 2.1.1 and let us know if this is resolved? https://github.com/realm/realm-cocoa/releases/tag/v2.1.1,jpsim,rex-remind101
4387,2016-12-24 01:18:03,"Hi @rex-remind101!

Hopefully that new Realm release fixed your issue. It's nearly been 3 weeks since there was activity in this issue, so I'm going to close it off. 

If it turns out that the issue is still persisting, please feel free to re-open and follow up. :)

Happy holidays!",TimOliver,rex-remind101
4385,2016-12-02 10:25:01,"@ugiacoman yes, currently it should work and is probably the only workaround for that.",stel,ugiacoman
4384,2016-11-29 12:48:04,"@WeeTom the example code you posted looks fine to me, could you please share an example Xcode project that reproduces this issue?",stel,WeeTom
4384,2016-11-29 13:01:32,"Ops! My fault!
It was like:
I have set a token to observe the change of the objects.
But when I detected the change, I have another write transaction.
So the problem happens inside the notification block.
But it indeed works in realm 1.0.0.
I'll try to adapt to the new version. Thanks! @stel ",WeeTom,stel
4384,2016-11-29 13:02:54,"Happy to hear that you've solved your problem, @WeeTom! ",stel,WeeTom
4383,2016-11-30 01:42:17,"@stel 
think you, this very big help!!!",skarctop,stel
4378,2016-11-30 06:49:35,That's the answer @stel . Thanks.,ahmedk92,stel
4377,2016-12-09 10:00:28,"Hey, @Abel94. I have same goals. What is the best way to solve problem described by you?",ogrenich,Abel94
4376,2016-11-29 12:41:35,"Thanks for suggestions, @younata!

`List` is container type that stores its values in an ordered list and used to define to-many relationships. This is the most general case. However, as you've already described, it's easy to achieve a uniqueness of the elements by checking if the object already exists in the list. You can also add convenient methods to your model for that:



Learn more about other collection types at https://realm.io/docs/swift/latest/#collections.",stel,younata
4375,2016-11-27 01:30:15,@soffes Yep. Looks like it was mostly already fixed too. I missed that one when looking to see if there was already an issue open. Closing in favor of #4267.,calebd,soffes
4374,2016-12-06 21:26:43,@stel please delete this branch if you're done with it.,jpsim,stel
4374,2016-12-07 11:32:24,@jpsim I actually think that it could be merged until we come up with the another approach. This PR aligns the behavior for all cases (error and access token auth) and dispatches the callback to the background thread as stated in the changelog.,stel,jpsim
4372,2016-11-27 05:34:09,"@austinzheng thanks so much for your reply! 

Your colleague @jpsim has added a very useful suggestion about `RLMIsInPlayground()` in https://github.com/realm/realm-mobile-platform/issues/57. 

Allowing for this use-case would be awesome 😎 
",DanielAsher,austinzheng
4368,2016-11-29 21:41:45,@tgoyne thanks a lot for your fast help. When can we expect that to be merged and usable for us?,BObereder,tgoyne
4368,2016-11-29 21:42:40,"@tgoyne we also have huge performance issues with 

> realm.deleteAll()

is that somehow related?
Should I create another issue for this?",BObereder,tgoyne
4368,2016-11-29 21:53:00,@tgoyne great! when can we expect that fix to be ready to use for us?,BObereder,tgoyne
4367,2016-11-25 05:23:16,"Although what @austinzheng wrote is correct, that's unrelated to the log you've shared, which is actually part of the update checker, which logs when a newer version of Realm than the one you're using has been released. You can disable that check by setting the `REALM_DISABLE_UPDATE_CHECKER` environment variable to any value. See [RLMUpdateChecker.mm](https://github.com/realm/realm-cocoa/blob/master/Realm/RLMUpdateChecker.mm) for the source.",jpsim,austinzheng
4367,2016-12-03 15:21:30,"@austinzheng The rationale doesn't really fully cover the need to log this to the console. You could still reach home and know which versions are in use without advertising the new one in the console. Couldn't you?

I find the need to add an environment variable to remove this log very cumbersome, as it adds trash to a project with stuff that shouldn't be there or feels right.

It feels like an ad. An intrusive one...",nmdias,austinzheng
4367,2016-12-06 01:03:57,"I understand your opinion @nmdias, which is why we've made it easy to disable.

Since Realm is actively maintained and new releases with features and bug fixes are made available regularly, many of our users benefit from being notified of new updates.

> I find the need to add an environment variable to remove this log very cumbersome, as it adds trash to a project with stuff that shouldn't be there or feels right.

Setting an environment variable in an Xcode project is actually very easy! You can set it in Xcode's schemes:

![image](https://cloud.githubusercontent.com/assets/474794/20908804/45e79a2e-bb0c-11e6-866c-af32d8a48477.png)

Or if you'd rather do it from your source code:



---

If neither of these approaches work for you, you can also fork this project and remove the call to [`RLMCheckForUpdates()`](https://github.com/realm/realm-cocoa/blob/v2.1.1/Realm/RLMRealm.mm#L135) entirely.",jpsim,nmdias
4366,2016-11-29 18:03:50,"Hi @cbess, unfortunately migrations aren't aware of primary keys, which is why we don't have a `-[RLMMigration createOrUpdateObject:value:]` method. We're tracking adding that in #2162.

Also, there was work done over a year ago to add the ability to rename classes in migrations (#2499, tracked in #2491) specifically to make it easier to address more complex cases like your where relationships are involved. However, work on that was stalled and never resumed.",jpsim,cbess
4366,2016-11-29 21:15:02,"Thanks @jpsim for reviewing the issue. Mainly, I was hoping to have a way to skip the relationship or ""nested"" object creation. I didn't expect the `migration.create` to attempt to re-create relationships. 

I suppose that would be a feature request: 

Perhaps?",cbess,jpsim
4366,2016-12-07 02:19:16,@cbess is there anything more we can do to help you here?,jpsim,cbess
4366,2016-12-07 02:26:42,"@jpsim Thanks for reminding me to respond.

`traverse` means (google'd):
to iterate (go through each element (an element being a portion of data the size of whatever data type the array [or dictionary] holds))

So, the idea is that the dev would specify if the `create` should `traverse` the `value` (dictionary/object) to also create nested objects/refs (eg. tags, to-many relationships, etc).",cbess,jpsim
4365,2016-11-29 19:37:27,"@kishikawakatsumi now that [Realm Object Server beta 4.8 is out](https://github.com/realm/realm-sync-services/releases/tag/v1.0.0-BETA-4.8), can you update this PR to include the tests you mentioned? Also needs a rebase.",jpsim,kishikawakatsumi
4365,2016-12-02 03:54:52,"@jpsim PermissionOffer and PermissionOfferResponse have not worked yet even beta 4.8.

https://github.com/realm/realm-sync-services/blob/master/src/node/services/permission/service.js#L27-L30

https://github.com/realm/realm-sync-services/pull/504",kishikawakatsumi,jpsim
4365,2016-12-02 12:18:49,@jpsim @mrackwitz @bigfish24 Add unit tests for PermissionOffer and PermissionOfferResponse,kishikawakatsumi,jpsim
4365,2016-12-06 01:24:42,@kishikawakatsumi could you share steps that could help reviewers actually test this? Which version(s) of upstream dependencies should be built to try this out?,jpsim,kishikawakatsumi
4365,2016-12-09 10:54:13,"@jpsim This PR needs a new release of ROS that includes https://github.com/realm/realm-sync-services/pull/504. I've changed the state to ""in progress"" for now.",kishikawakatsumi,jpsim
4365,2016-12-16 20:24:56,"@kishikawakatsumi can you please update this to use [ROS v1.0.0-BETA-4.14](https://github.com/realm/realm-sync-services/releases/tag/v1.0.0-BETA-4.14) that was just released? Hopefully your tests will pass with that.

Also there's a merge conflict in the changelog now.",jpsim,kishikawakatsumi
4365,2016-12-19 12:48:32,"@jpsim @mrackwitz This PR gets ready for review again. Could you review this?

This PR adds `RLMSyncPermissionOffer`, `RLMSyncPermissionOfferResponse`, `SyncPermissionOffer` and `SyncPermissionOfferResponse` to ObjC and Swift.
These model classes should be same as [realm-sync-services](https://github.com/realm/realm-sync-services/tree/master/object-server/src/node/services/permission/models).

The test confirms that a token can be obtained through `PermissionOffer`, and then `PermissionOfferResponse` works correctly using the token.

Also if `PermissionOffer` expires, the offer cannot be used. 
`PermissionOfferResponse` doesn't work with invalid tokens.

",kishikawakatsumi,jpsim
4365,2017-01-04 22:06:05,"Marking as ""in-progress"" until @kishikawakatsumi can resolve the test failures.",jpsim,kishikawakatsumi
4365,2017-01-06 16:20:56,@jpsim This PR now ready for review again.,kishikawakatsumi,jpsim
4364,2016-12-06 21:27:13,@stel please delete this branch if you're done with it.,jpsim,stel
4363,2016-11-26 01:41:48,"@stel, I found my issue, I was fetching realm objects before the synced Realm was configured. Is there a way to get a notification after the realm is fully configured?",natemann,stel
4363,2016-11-30 12:05:07,@natemann do you need any further help here or can we close this issue?,stel,natemann
4363,2016-11-30 14:48:37,"@stel, No, your explanations helped. You can close the issue.  Thank you.",natemann,stel
4359,2016-11-23 03:15:08,Thanks @adomanico!,jpsim,adomanico
4356,2016-11-22 20:47:53,"Thanks for the quick reply, @austinzheng! I may look into it some more to see if I can figure out what's going on.",stevenp,austinzheng
4354,2016-11-21 23:34:10,"@LiamInJapan could you please share the full output from `pod install --verbose`? It seems like it may have been truncated in your last comment...

Also, sharing that Xcode project you mentioned would be helpful.",jpsim,LiamInJapan
4354,2016-11-29 11:41:46,@LiamInJapan it's not clear what is wrong and it's difficult to suggest anything. Could you please share an Xcode project and Podfile that reproduces this issue?,stel,LiamInJapan
4354,2016-12-07 02:15:15,@LiamInJapan just following up on my last request for the complete `pod install --verbose` log output.,jpsim,LiamInJapan
4354,2016-12-07 03:42:50,"@jpsim I've finally got the project working after weeks of hacking... All this got started because of a pod update and I don't want to disturb it again for the moment as we are trying to release... 

I've no idea why it all happened but my suspicion is that two pod setups are fighting, possibly realm and parse, and it's possibly to do with architecture settings (or perhaps some weird settings between my settings and the pods settings I'm not sure).

For the time being it is working. @TimOliver does have my project file if you wish to investigate more. Thanks very much for your diligent follow up!",LiamInJapan,jpsim
4353,2016-11-21 23:47:24,"@RobinCaroff we redesigned how Realm stores its transaction log for version 2.x, which for the most part has been a transparent migration for our users, however in your case it seems to have had a very large impact. Transaction logs are now stored inside the same Realm file as your data.

One scenario that could lead to a very large Realm file with Realm 2.x but not 1.x is if you have some very large transactions that don't actually commit much data. For example:



This would make the file expand to a large size to store the entirety of the operations in that transaction, but wouldn't actually make the ""data"" part of the file grow. With Realm 1.x, since the transaction log was stored in its own file, that file could be periodically deleted when its results were incorporated into the main file. Now, that file will just stay large forever.

If this is what's causing your Realm file to grow so large (which I can't tell for sure is the case based on the information you've provided), perhaps you could consider not writing to the Realm until you know that a mutation should actually occur, rather than mutating unnecessarily.

You could also use [`Realm.writeCopy(toFile:encryptionKey:)`](https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm9writeCopyFzT6toFileV10Foundation3URL13encryptionKeyGSqVS1_4Data__T_) to write a compacted copy of your Realm file at app launch, when you're sure no part of your app has started accessing the file.",jpsim,RobinCaroff
4353,2016-11-22 08:55:39,This is interesting. @RobinCaroff Can you confirm @jpsims hypothesis about using large transactions with many changes to only few objects?,finnschiermer,RobinCaroff
4353,2016-11-22 10:42:09,"I'm not sure how to translate ""also holding some early version open for reading"" into how it would look using Swift. Perhaps @jpsim can you help ^ ?

",finnschiermer,jpsim
4353,2016-11-22 21:07:04,"> In the case where the logs were already very big but not stored in the Realm file (but in the app's storage), the app storage would not have changed wouldn't it ?

Yes, this would make a difference due to what @finnschiermer explained earlier: 

> when the logs were in a separate file, we would shrink that file as soon as possible. We don't do that with the realm file.

For more of a Swift API level description of what we mean by ""holding some early version open for reading"", see our docs on [File size & tracking of intermediate versions](https://realm.io/docs/swift/latest/#file-size--tracking-of-intermediate-versions).",jpsim,finnschiermer
4352,2016-11-22 07:42:44,"@austinzheng Hi Austin. I've created a sample project with the same models and schema changes but the crash doesn't happen here.

Could you tell me what would cause the assertion ""[realm-core-2.1.4] Assertion failed: tagged_value != 0"" to fail? That would help me identify the issue in my project",ntokozotep,austinzheng
4352,2016-11-29 11:44:51,"I'm closing it for now, @ntokozotep please feel free to reopen it or create a new issue if you face this assertion failure again.",stel,ntokozotep
4351,2016-11-21 08:35:45,"Thanks for the suggestion, @zhoupan! We're already tracking this as https://github.com/realm/realm-cocoa/issues/651, so I'll be closing this ticket as a duplicate.",kishikawakatsumi,zhoupan
4350,2016-11-21 10:20:09,"@cinnamon This issue is a limitation of both current Realm and NSPredicate. When filtering on external input values, it must be normalized before saving.



",kishikawakatsumi,cinnamon
4350,2016-11-21 11:38:01,"@kishikawakatsumi Yeah, that's what I did, thank you :)",cinnamon,kishikawakatsumi
4348,2016-11-21 08:31:46,"@TaoistKing This is intended behavior. If the property is changed from nullable to required, auto-migration automatically sets a fixed value (For String property, an empty string was set). Therefore, all objectID properties will be empty. That is why the primary key is duplicated.

To avoid this, you should write migration block to copy the value from the old object to the new object.

",kishikawakatsumi,TaoistKing
4348,2016-11-25 14:55:12,"This is a really interesting case and the current behavior might be not completely correct. I've create another issue to track it: https://github.com/realm/realm-cocoa/issues/4370.

Thanks for reporting this issue, @TaoistKing!",stel,TaoistKing
4347,2016-11-21 23:31:20,"Hi @WilliamXueShao, if you're downloading Realm from China, the GFW often prevents the network connection from being properly established. We're already tracking this in #2713, so I'll be closing this ticket as a duplicate. I apologize for the inconvenience. ",jpsim,WilliamXueShao
4346,2016-11-21 08:41:17,"@grantspilsbury We're working making the app public https://github.com/realm/realm-cocoa/pull/4269 . 
It will be available very soon.",kishikawakatsumi,grantspilsbury
4345,2016-11-21 23:29:25,"Sorry you're affected by this, @devedbox! Can you share a sample project that can reproduce this crash? It would greatly help us in identifying what's causing it.",jpsim,devedbox
4345,2016-11-24 10:18:52,I tried many times to reproduce in a new project but won't work. My source code in the project where this exception happended are complex. It sames something goes wrong on the thread of RLMNotification listening. @jpsim ,devedbox,jpsim
4345,2016-11-26 00:09:24,"I appreciate your attempts to reproduce the issue, @devedbox. But we can't help you if we can't reproduce the problem. Putting this on hold until you can show us how to trigger this.",jpsim,devedbox
4336,2016-12-17 14:04:56,"@jabberwalky Have you seen the same crash again on the latest version? Please let me know it seems resolved or not, thanks.",kishikawakatsumi,jabberwalky
4336,2016-12-24 01:12:55,"This issue appears resolved due to fixes in a later release of Realm.

I'm going to close this issue. @jabberwalky, if you're still experiencing the crash, even on the latest release, please feel free to re-open this issue and follow up.

Happy holidays!",TimOliver,jabberwalky
4334,2016-11-17 18:34:10,"Hi @LesPatrick, could this possibly be a leak in the Swift runtime, as described in #2933?

In any case, could you please share more relevant information to help us understand what you're talking about and investigate further? It would be helpful if you could share all, or at least some, of the following:
1. A sample Xcode project and steps we can take to reproduce and identify the leak.
2. If you can't provide 1, an IPA archive of the app causing the leak and steps we can take to reproduce and identify the leak.
3. [Exported trace data](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/ExportingandImportingTraceData.html) from `Instruments.app` so that we can look more into where/why the leak is happening.
",jpsim,LesPatrick
4334,2016-12-08 02:01:06,"Thanks for taking the time to make a sample project for this @joninsky!

Looks like this might be incorrect memory management in [`RLMInitializeSwiftAccessorGenerics()`](https://github.com/realm/realm-cocoa/blob/v2.1.1/Realm/RLMObjectStore.mm#L70-L96), which would explain why `LinkingObjects` and `List` are affected. I spent a few minutes trying to pin down exactly what's causing the leak and couldn't get further than that.",jpsim,joninsky
4333,2016-11-17 18:38:39,"@skander300 there are several items from the issue template that you forgot to include. This is necessary to help us figure out why things aren't working for you.

Please share:
1. Version of CocoaPods used
2. Version of Xcode used
3. Structure of your project: what kinds of targets are there, how are they interconnected, which build and link Realm?
4. Output from running `pod install --verbose`
5. Which _version_ of Realm Objective-C and Realm Swift you're trying to install
6. Steps that we can take to reproduce this scenario on our end
",jpsim,skander300
4333,2016-11-28 10:39:45,@skander300 do you still experience this problem? If so please provide the info requested in the previous comment to help us identify it or feel free to close this issue.,stel,skander300
4333,2016-11-29 18:24:42,Closing since we never got enough information from @skander300 and haven't heard back in two weeks.,jpsim,skander300
4332,2016-12-07 02:17:11,@dev-gao just following up on @austinzheng's last comment. Also a confirmation that the issue still occurs with the latest release ([2.1.1](https://github.com/realm/realm-cocoa/releases/tag/v2.1.1)) would be helpful.,jpsim,austinzheng
4332,2016-12-07 02:17:11,@dev-gao just following up on @austinzheng's last comment. Also a confirmation that the issue still occurs with the latest release ([2.1.1](https://github.com/realm/realm-cocoa/releases/tag/v2.1.1)) would be helpful.,jpsim,dev-gao
4332,2016-12-17 12:45:53,"@dev-gao I'm closing this issue because we haven't heard back from you in the last week, but please let us know if what we've posted here helped, and if you have any further questions or suggestions!",kishikawakatsumi,dev-gao
4330,2016-11-15 21:59:49,"Hi @devedbox, are you trying to push `Realm.podspec`, `RealmSwift.podspec` or a different podspec altogether?

If you're using Realm in a different podspec and you're specifying a location other than CocoaPods trunk, make sure you set it to use git submodules, as the Realm pods depend on those.

If you're trying to push `Realm.podspec` or `RealmSwift.podspec` to say your own private CocoaPods trunk server, make sure you've updated your local submodules prior to doing so:



And that you're using the latest version of CocoaPods (1.1.1), and that you have Xcode 8.x installed and `xcode-select`ed. I just pushed the `Realm` and `RealmSwift` pods version 2.0.4 yesterday to CocoaPods trunk with no issue.
",jpsim,devedbox
4330,2016-11-16 03:34:41,"@jpsim I tried as you said and still failed. this is my podspec file:



It works fine in version 2.0.3.
",devedbox,jpsim
4330,2016-11-19 02:20:48,"I add `realm-object-store` as a submodule and build successfully. You can close the issue now. Thanks anyway. @jpsim 
",devedbox,jpsim
4330,2016-12-01 20:46:15,"@amit-k-gupta please file a new issue with steps to reproduce, and please include the _entire_ output from `pod install -verbose`",jpsim,amit-k-gupta
4330,2016-12-06 00:56:16,"@mathroule please file a new issue with steps to reproduce, and please include the _entire_ output from `pod install -verbose`, and taking care to fill out all the sections in the new issue template.

I'll be closing this issue to prevent future messages being posted without including the necessary information prompted by the issue template. Thanks for understanding!",jpsim,mathroule
4328,2016-11-14 20:11:38,"Thanks for the suggestion, @kenji21! We're already tracking this as #3350, so I'll be closing this ticket as a duplicate.
",jpsim,kenji21
4326,2016-11-14 11:14:19,"Hey @BackWorld! Your issue doesn't contain any info. Please update it with the template we provide and we will try to help you.
",stel,BackWorld
4317,2016-11-10 13:45:25,"Hey @grantspilsbury! Yes!

Check out [RealmTasks](https://github.com/realm/realmtasks/). There is also a tutorial [Build iOS App from Scratch](https://realm.io/docs/realm-mobile-platform/example-app/cocoa/) and of course the [Authentication section in documentation](https://realm.io/docs/swift/latest/#authentication) should also be helpful.
",stel,grantspilsbury
4317,2016-11-15 20:08:29,"@grantspilsbury This may help: http://stackoverflow.com/questions/40618751/realm-sync-authentication-in-swift-version-2-0-4/40618752#40618752
",cliftonlabrum,grantspilsbury
4317,2016-11-15 20:41:13,"@grantspilsbury do you need any other help or can we close this issue?
",stel,grantspilsbury
4317,2016-11-15 21:16:07,"You can close it. Thanks. 

On Nov 16, 2016, at 6:41 AM, Dmitry Obukhov notifications@github.com wrote:

@grantspilsbury do you need any other help or can we close this issue?

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.
",grantspilsbury,grantspilsbury
4317,2017-01-08 18:45:48,"@stel, But, as far as I can see, there is no Facebook authentication example, with which I'm struggling ATM :(",revolter,stel
4317,2017-01-09 10:06:13,"@revolter there is a PR https://github.com/realm/RealmTasks/pull/61 but it seems a bit outdated. Anyway I hope it can help you.

Please also check the docs at https://realm.io/docs/swift/latest/#authentication, all you need to do is to get Facebook token (the easies way is to use `FBSDKLoginKit`) and then use it to create `SyncCredentials`:

",stel,revolter
4317,2017-01-10 06:57:39,@revolter have you enabled Facebook as an authentication provider for your instance of the Realm Object Server?,jpsim,revolter
4316,2016-12-24 01:10:49,"I'm closing this issue since it's been idle for over a month.

@RohanRamsay - If you're still having trouble, please feel free to re-open it and let us know if there's anything else we can do to help.

Thanks! Happy holidays!",TimOliver,RohanRamsay
4314,2017-01-26 14:33:13,"I'm having very similar issue @jpsim :



Except the terminal is just silent and doesn't do anything. I'm in Switzerland on a stable internet connection (office - no restaurant or coffee shop...). I have downloaded previous versions of Realm with no problem. The last one I had was 2.1.0.

**UPDATE:**

This appeared after approx 20 minutes:

",svachmic,jpsim
4313,2016-11-09 01:04:18,"@RafaelPlantard thanks for the effort, but this has already been addressed in `realm/realm-object-store@master`, so the right way to address this would be to update the submodule to point to the head of that branch.
",jpsim,RafaelPlantard
4313,2016-11-09 01:07:00,"Thanks for the tip @jpsim, but how can I update the Realm submodule when using CocoaPods?
",RafaelPlantard,jpsim
4313,2016-11-09 17:53:15,"Thanks @jpsim...
",RafaelPlantard,jpsim
4310,2016-11-08 17:17:50,"Thanks @bdash for your response.
Could you give a link or tool name how I can look app binary to get to know about about real cause of the crash, also I have found this issue in Realm's issue list #3993 is this the same ?
",hovox,bdash
4305,2017-03-02 02:41:41,"@tgoyne, @jpsim, @bdash or @viktorasl do you know if this was addressed? Possibly in a different ""known bug"" issue instead that @tgoyne had mentioned?",danielbowden,jpsim
4305,2017-03-02 02:41:41,"@tgoyne, @jpsim, @bdash or @viktorasl do you know if this was addressed? Possibly in a different ""known bug"" issue instead that @tgoyne had mentioned?",danielbowden,viktorasl
4305,2017-03-02 02:41:41,"@tgoyne, @jpsim, @bdash or @viktorasl do you know if this was addressed? Possibly in a different ""known bug"" issue instead that @tgoyne had mentioned?",danielbowden,tgoyne
4305,2017-03-02 02:41:41,"@tgoyne, @jpsim, @bdash or @viktorasl do you know if this was addressed? Possibly in a different ""known bug"" issue instead that @tgoyne had mentioned?",danielbowden,bdash
4305,2017-03-02 23:12:18,"@tgoyne ok thanks for the update.

In the meantime I have worked around this by adding a `lastModified` property to `Feed` and then when making a change on `FeedItem` I update last modified using the inverse relationship.



Not that great, but it fires a modification change in the collection notification which is what I was after.",danielbowden,tgoyne
4302,2016-11-07 22:34:36,"Thanks for reporting this @fishfisher. Could you please share the Crashlytics logs included in your crash reports? `realm::util::terminate` logs an assertion message which is useful in determining the reason for the assertion failure.

Realm folks: Also tracking this in [Helpscout](https://secure.helpscout.net/conversation/272636642/7457/?folderId=366245)

#4273 also has an assertion failure in `LinkView::get`, though it's very hard to say if they're related at the moment. Leaning towards no.
",jpsim,fishfisher
4302,2016-11-08 23:00:03,"@jpsim 

Allrighty, after a lot of head scratching I have progressed a bit:

I have narrowed down that the crash is happening in the setup of the realm config in 'didFinishLaunchingWithOptions'. At let _ = try! Realm()..

I use the following code to set up the default realm. I'm basically checking that the standard realm exists and if it does I move it to a shared location so it can be accessible from my extension.
This is the code for the setup:



This is how I was able to identify where the crash happened:
I got in contact with one of the affected users, sent him a TestFlight build where I stripped out the setup of the shared realm. I had then implemented a code that would locate the realm in the shared group container and send that as an attatchment to my email.

I now have that realm-file and it crashes the Realm browser when I try to open it.
Can I send this file to someone at Realm so they can identify what is happening? The file may contain user sensitive data.

Regards,
Erik
",fishfisher,jpsim
4302,2016-11-10 16:28:59,"@fishfisher A perhaps dumb question: what is the Today Extension doing at the time the error occurs?
",finnschiermer,fishfisher
4302,2016-11-10 20:42:16,"@finnschiermer No, not at all. But, unforunately, I don't know much about the status of the Today Extension as the crash occurs. I have done a lot of testing with the extension together with launching the app, but I have not been able to reproduce. I have suspecing a conflict with the extension.
",fishfisher,finnschiermer
4302,2016-11-22 11:05:29,^ @jpsim ,finnschiermer,jpsim
4302,2016-11-28 00:15:25,"@rrrlasse Thanks for getting back to me. Both the main app and the extension targets the same pod in cocoapods, so I don't think they can be on different versions of Realm. However, this crash did start after going from RealmSwift 2.0.2 to 2.0.3.",fishfisher,rrrlasse
4302,2016-11-29 18:22:02,"@rrrlasse multiple processes on iOS/tvOS/watchOS accessing the same file will always be using the exact same version of Realm due to how those apps are allowed to be distributed. All bets are off for macOS and Android though.

@fishfisher I really still think the issue is the file system operations you're performing being racy. It's quite possible that changes between Realm Swift 2.0.2 and 2.0.3 made this race more likely to occur, but that the race was always there in the first place.",jpsim,rrrlasse
4302,2016-11-29 18:22:02,"@rrrlasse multiple processes on iOS/tvOS/watchOS accessing the same file will always be using the exact same version of Realm due to how those apps are allowed to be distributed. All bets are off for macOS and Android though.

@fishfisher I really still think the issue is the file system operations you're performing being racy. It's quite possible that changes between Realm Swift 2.0.2 and 2.0.3 made this race more likely to occur, but that the race was always there in the first place.",jpsim,fishfisher
4302,2016-12-05 17:55:43,@fishfisher have you made any progress on this? Thanks!,jpsim,fishfisher
4302,2016-12-06 10:55:25,@jpsim Thanks for checking back. I'll be releasing a new version soon with Realm 2.1.1 and a quick fix for the possible race condition during initial realm access. TestFlight builds are looking good!,fishfisher,jpsim
4299,2016-11-08 19:36:18,"@BartBM did @dhumblet's suggestion help?
",jpsim,BartBM
4299,2016-11-08 19:36:18,"@BartBM did @dhumblet's suggestion help?
",jpsim,dhumblet
4297,2016-11-28 10:43:10,"@mlusas do you still need any help with this? If so, could you provide us more info to reproduce your case? Or feel free to close this issue?",stel,mlusas
4293,2016-11-08 20:12:26,"Thanks for the PR, @danielgindi! Sorry you can't see our Jenkins site, that's private, but also why we mirror a subset of our CI setup on Travis. The only job that failed on Jenkins is the one generating and verifying the documentation. The equivalent Travis job is here: https://travis-ci.org/realm/realm-cocoa/jobs/173215193

The issue is that there are undocumented declarations:



We require 100% documentation coverage for the public API, so these will need docstrings. Do you think you can add these?

You can also run this test locally if you have Xcode 8.1 and [jazzy](https://github.com/realm/jazzy) installed by running `REALM_SWIFT_VERSION=3.0.1 ./build.sh verify-docs`.

I haven't actually reviewed this PR, just letting you know some minor things that will certainly need addressing before we can review and hopefully this!

Thanks again for your contribution!
",jpsim,danielgindi
4293,2016-11-09 20:25:11,"This looks pretty good to me, @danielgindi. Could you also please add some minimal unit tests? A changelog entry would also be nice.
",jpsim,danielgindi
4293,2016-11-11 17:38:50,"@danielgindi please ping me once you've had to resolve all the failing tests and I'll take another look.
",jpsim,danielgindi
4293,2016-11-12 19:51:01,"@jpsim Do you have any idea why Xcode doesn't like your project? It does not allow running any tests in your project. Says it's a permissions thing. It obviously isn't.

I had to create the tests blindly. 

I also can't fix the tests based on your CI log, as it's private.

I think that the ball is in your court now.
",danielgindi,jpsim
4293,2016-11-15 15:35:41,"@jpsim The tests are passing now
",danielgindi,jpsim
4293,2016-11-15 16:13:58,"@jpsim I've had to rebase everything. It got too messy with the merge conflicts.
",danielgindi,jpsim
4293,2016-11-21 13:08:30,@jpsim Any news on this?,danielgindi,jpsim
4293,2016-11-23 19:51:15,"Great work @danielgindi! 👏 

I really appreciate your patience as you worked with us to land this. I hope you'll contribute again in the future 😊 .

I have a few minor edits that I'll do in a follow-up PR.",jpsim,danielgindi
4288,2016-11-08 19:42:36,"@BlueVirusX and @kevincador: could either of you please share the realm files that are affected? This type of assertion would indicate that the Realm file is corrupt for some reason. This can happen if Realm accesses a file while it's being moved, copied, deleted or otherwise manipulated by the file system. You can email us the files privately at help@realm.io if you'd like to keep their contents confidential.

@maxydon CocoaPods lets you specify the versions of your Pods:


",jpsim,maxydon
4288,2016-11-08 19:42:36,"@BlueVirusX and @kevincador: could either of you please share the realm files that are affected? This type of assertion would indicate that the Realm file is corrupt for some reason. This can happen if Realm accesses a file while it's being moved, copied, deleted or otherwise manipulated by the file system. You can email us the files privately at help@realm.io if you'd like to keep their contents confidential.

@maxydon CocoaPods lets you specify the versions of your Pods:


",jpsim,kevincador
4288,2016-11-08 19:42:36,"@BlueVirusX and @kevincador: could either of you please share the realm files that are affected? This type of assertion would indicate that the Realm file is corrupt for some reason. This can happen if Realm accesses a file while it's being moved, copied, deleted or otherwise manipulated by the file system. You can email us the files privately at help@realm.io if you'd like to keep their contents confidential.

@maxydon CocoaPods lets you specify the versions of your Pods:


",jpsim,BlueVirusX
4288,2016-11-08 19:55:02,"@jpsim I don't have the realm file. We're seeing this issue in our crash reporter. We are seeing it since we are playing with compact() and our own compacting method (which basically removes all Realm files to create them again and sync everything from our servers when possible). This is all to avoid https://github.com/realm/realm-cocoa/issues/4229.

I think this happens because our widget (another process) accesses the Realm when it is being moved/removed by the main app (when we have an mmap issue in our case).
",kevincador,jpsim
4288,2016-11-09 14:56:00,"@jpsim I tried to reproduce in a new project but I can't find a way to have the crash.

Lately, the only problems we are facing seem to always be linked to workarround we added to avoid this issue : https://github.com/realm/realm-cocoa/issues/4229 Any plan to work on this one? If we can remove all the soft and hard compact from our code base, I would be more than happy and I'm sure this kind of issues would not pop up anymore.
",kevincador,jpsim
4288,2016-11-23 22:07:35,"Hi All,

We're getting the same issue as @BlueVirusX in our production app and was able to get the .realm file out from the devices. Is there a way to access the data in the file? 

We tried to load the file using XCode with Realm 2.1.0 and Realm Browser 2.0.1. Both of them threw exceptions. Any suggestion is appreciated. [Sample file](https://dl.dropboxusercontent.com/u/18823852/1479915583.53501.realm) attached for reference.

Realm version: 2.0.4

Xcode version: 8.1

iOS/OSX version: 10.1.1

",chien,BlueVirusX
4288,2016-11-23 22:13:04,"@chien are you also performing destructive file system operations on the Realm files while concurrently accessing them via Realm's APIs? That could account for the corruption.

In terms of how to recover data from a corrupt file, you could file an issue on [realm/realm-core](https://github.com/realm/realm-core) with the Realm file(s) you want data recovered from and we'll do our best to extract what we can. You can also email help@realm.io if the data from these files is private or sensitive.",jpsim,chien
4288,2016-11-23 22:55:50,"@jpsim thanks for the help.

I've reported the [issue in the realm-core](https://github.com/realm/realm-core/issues/2289) and also emailed help@realm.io

We're using the following code to compress database when app launches.

",chien,jpsim
4288,2016-12-06 13:07:44,"Hi,

I'm sorry for not responding to this issue for a while, but now I have got a status update:
Since upgrading the version of Realm to 2.1.1 I have not seen any of the crashes I've got previously (I think this is related to #4397). So for me this issue can be closed.

Maybe this issue is fixed for other users like @kevincador or @chien too, if they upgrade to version 2.1.1.

Many thanks to the Realm team!",BlueVirusX,chien
4288,2016-12-06 13:07:44,"Hi,

I'm sorry for not responding to this issue for a while, but now I have got a status update:
Since upgrading the version of Realm to 2.1.1 I have not seen any of the crashes I've got previously (I think this is related to #4397). So for me this issue can be closed.

Maybe this issue is fixed for other users like @kevincador or @chien too, if they upgrade to version 2.1.1.

Many thanks to the Realm team!",BlueVirusX,kevincador
4287,2016-11-04 06:38:02,"@cliftonlabrum Could you please make sure a Run Script Build Phase with `/usr/local/bin/carthage copy-frameworks` is in the last of Build Phase?
",kishikawakatsumi,cliftonlabrum
4286,2016-11-08 20:19:28,"@bdash it's working **until** I add the realm-cocoapod. So my guess was that realm interferes somehow ?!
",hardysim,bdash
4286,2016-11-09 06:47:31,"@bdash your tip adding `-lz` is working. Now I can use realm as well. Any idea why I only need to add it when adding realm?

---

How do I see that I need `zlib` from the error-messages? I'm new to this linker-stuff and cannot see any mention of it...
",hardysim,bdash
4285,2016-11-08 19:19:16,"Hi @euwars, the tutorial expects that you've followed the ""Getting Started"" steps. In fact, the second sentence of the [tutorial](https://realm.io/docs/realm-mobile-platform/example-app/cocoa/) states exactly that:

> First, please follow the getting started instructions to get set up with sync and to launch the Mac version of RealmTasks.

Following those steps will ensure that the initial list already exists.
",jpsim,euwars
4285,2016-11-08 19:35:01,"@jpsim yeah i did not see that my bad. 
",euwars,jpsim
4280,2016-11-01 15:18:12,"@davros1970 You can use `Realm.Configuration.objectTypes` property to isolate model classes as follows.



Then if you add a property to class `A`, what you need to do is bump version for Realm A. You don't need to bump schema version for Realm B.

See also https://realm.io/docs/swift/latest/#class-subsets
",kishikawakatsumi,davros1970
4279,2016-11-01 15:09:11,"@reicamargo  It's not related Realm. The cause is Swift API naming conventions are changed in Swift 3.
Also, the issue is tracked by RealmSearchViewController's repository. Ihttps://github.com/bigfish24/ABFRealmSearchViewController/issues/13

Thank you for reporting.
",kishikawakatsumi,reicamargo
4278,2016-11-01 15:39:10,"@Sil68 I confirmed building from source (`master` branch) successfully.



Can you try again? If build would fail yet, please show more details to reproduce steps for investigation? Thank you for reporting.
",kishikawakatsumi,Sil68
4278,2016-11-01 16:23:36,"@kishikawakatsumi Brilliant! Thanks a lot! Following your instructions did do the trick!
",Sil68,kishikawakatsumi
4277,2016-11-01 21:11:45,"@CruiseChan You can use `Realm.writeCopy(toFile fileURL: URL, encryptionKey: Data? = nil)` method to change encryption key. A new encryption key would be set if you pass `encryptionKey` parameter.
",kishikawakatsumi,CruiseChan
4276,2016-11-01 15:49:50,"@cmyers78 It seems you attempt to add a keychain item in spite of the item has already existed. You should use `SecItemUpdate()` function instead `SecItemAdd()` if you already added an item.

If you are not familiar with Keychain API, I recommend you to use wrapper library like https://github.com/kishikawakatsumi/KeychainAccess.
",kishikawakatsumi,cmyers78
4269,2016-11-08 21:31:27,"@TimOliver could you please rebase this to trigger another CI run? It's hard to review without seeing what CI was complaining about (25 jobs failed, but CI has since deleted those logs).

Some things to make sure you've done in this PR:
1. The Draw example should be tested in `build.sh examples-ios` (appears to be done, but should be confirmed to pass).
2. The Draw example should be properly packaged (shouldn't require any changes, but should be confirmed).
",jpsim,TimOliver
4269,2016-11-11 17:36:46,"@TimOliver what are you doing to git in this branch? There are tons of unrelated commits.

![image](https://cloud.githubusercontent.com/assets/474794/20224238/5a37d7b4-a7f2-11e6-8955-ee90d70e8096.png)
",jpsim,TimOliver
4269,2016-11-29 15:57:56,I pushed up a branch with some suggested changes yesterday: [jp-to-sync-draw-app](https://github.com/realm/realm-cocoa/tree/jp-to-sync-draw-app). I hope you'll consider some of those ideas to incorporate into your PR @TimOliver. I'll let you pull in the parts you like.,jpsim,TimOliver
4266,2016-11-13 18:06:33,"@jpsim I'm not able to read examples.. Read Permission Denied..
",Ravi2712,jpsim
4265,2016-10-26 22:38:12,"3.0.1 examples are now symlinks and I've fixed the failing `KVOTests.testAllPropertyTypesStandalone()` test. Ready for review again @tgoyne 
",jpsim,tgoyne
4264,2016-11-18 23:09:40,"@stel With your PR merged, can this ticket be closed?
",austinzheng,stel
4264,2016-11-18 23:14:47,"I'd say so. If @stel knows of an angle from which #213 doesn't fully solve this issue, he should explain and reopen.
",jpsim,stel
4262,2017-02-08 19:11:08,@TimOliver are you planning on reviving this at some point?,jpsim,TimOliver
4262,2017-02-15 03:03:42,@TimOliver do you want to keep this open or just port it over to the [realm-demos org](https://github.com/realm-demos)?,jpsim,TimOliver
4262,2017-02-15 05:36:00,@jpsim I plan to port it over to realm-demos when I get the chance. But I just did a merge tonight so I could deploy it to our demo devices for tomorrow night. :),TimOliver,jpsim
4260,2016-10-25 23:31:08,"Hi @crrobinson14!

Thanks for reporting this to us! 

Hmm, one thing I might initially try suggesting. In your Safari extension, can you please try encapsulating the code blocks that involving instantiating `Realm` and subsequently performing the read/writes in an `@autoreleasepool`?

It's possible that there are cached references to the `Realm` instance still in memory by the time the extension process is terminated, so Realm isn't getting a chance to clean up after itself. If this is the case, enclosing all operations involving `Realm` in an `@autoreleasepool` will explicitly force Realm to release itself immediately after your code has finished execution.

Please let me know if that helps. If it doesn't, would you be open to sharing your code with us at all?

Thanks!
",TimOliver,crrobinson14
4260,2016-10-27 05:00:46,"Thanks, @crrobinson14. It looks like the exception that is being thrown is [`SlabAlloc::Retry`](https://github.com/realm/realm-core/blob/v1.5.0/src/realm/alloc_slab.cpp#L823-L829). Throwing that exception by itself shouldn't turn into a crash. Do you have a crash log that shows more details about the crash than your initial screenshot?
",bdash,crrobinson14
4260,2016-12-07 02:10:45,@crrobinson14 just following up on our requests for more information. Also a confirmation that the issue still occurs with the latest release ([2.1.1](https://github.com/realm/realm-cocoa/releases/tag/v2.1.1)) would be helpful.,jpsim,crrobinson14
4257,2016-10-25 21:26:45,"Hi @Goner!

Hmm, if you properly encrypted the Realm, you shouldn't be able to open it in the Realm Browser without providing the same key. It sounds like you may have created an unencrypted Realm and are trying to encrypt it after the fact.

In order to create an encrypted Realm, you need to ensure you've set the `encryptionKey` property in its `Configuration` before the first time you create a `Realm()` instance. 



If you don't specify the key before creating `RLMRealm` for the firs time, the file will be unencrypted. It's not possible to convert an unencrypted Realm into an encrypted one; nor is it possible to change the encryption key once it's set. To do either, you'll need to use [`- [RLMRealm writeCopyToURL:encryptionKey:error:]`](https://realm.io/docs/objc/2.0.2/api/Classes/RLMRealm.html#/c:objc%28cs%29RLMRealm%28im%29writeCopyToURL:encryptionKey:error:) to write a whole new Realm file with those settings.

I hope that helped! Let me know if you have any more questions.
",TimOliver,Goner
4257,2016-11-08 00:38:48,"@Goner I don't understand your last request. `encryptionKey` is a property of `RLMRealmConfiguration`, and reading its value is just reading an inert `NSData` property. That is a ""Do Not Crash Way"" to access its value.

If you're asking if there's a way to derive the encryption key used to encrypt a Realm, the answer is obviously no because that would defy the purpose of encrypting it.
",jpsim,Goner
4257,2017-01-20 05:33:30,@Goner please file a new issue with steps to reproduce so we can investigate this for you.,jpsim,Goner
4255,2016-10-25 19:56:41,"@ThomasGoujon I tried Carthage update and now this issue pops up:
<unknown>:0: error: opening import file for module 'Realm': Permission denied

Do you use Xcode 10.1 GM seed?
",sangmin,ThomasGoujon
4255,2016-10-26 00:45:02,"Thanks @jpsim @sangmin. I was able to fetch project and run ""./build.sh ios-swift"". Compiled frameworks Realm.framework and RealmSwift.framework under build/ios/swift-3.0.1 fat binaries. Copied these into my project as embedded frameworks. All good.
",bmalbuck,jpsim
4255,2016-10-26 00:45:02,"Thanks @jpsim @sangmin. I was able to fetch project and run ""./build.sh ios-swift"". Compiled frameworks Realm.framework and RealmSwift.framework under build/ios/swift-3.0.1 fat binaries. Copied these into my project as embedded frameworks. All good.
",bmalbuck,sangmin
4255,2016-10-26 08:42:25,"@sangmin I use Xcode 8.1 GM (Version 8.1 (8T61a))
And try with this Carthage cmd: ""carthage update --platform iOS --no-use-binaries""
",ThomasGoujon,sangmin
4255,2016-11-01 13:37:48,"@cliftonlabrum Just cloning and building realm worked for me.
git submodule update --init
sh build.sh build
",sangmin,cliftonlabrum
4255,2016-11-01 20:10:22,"@jpsim Thanks. I wonder if the App Store version of Xcode 8.1 (which I have) is different from the 8.1 GM that Realm was built with. 
<img width=""365"" alt=""xcode"" src=""https://cloud.githubusercontent.com/assets/2513753/19905548/85fa393e-a034-11e6-8029-7719d392c06a.png"">
",cliftonlabrum,jpsim
4254,2016-10-25 19:57:56,"Hi @ggunders! 

If you're getting the `A Realm Configuration must specify a path or an in-memory identifier` error, that means that your implementation for `Bundle.main.url()` must be returning `nil`. The Swift Playground's access to on-disk resources is limited, so you need to properly import the Realm file into Playgrounds as a resource to access it.

![screen shot 2016-10-25 at 12 55 10 pm](https://cloud.githubusercontent.com/assets/429119/19701904/4886d512-9ab2-11e6-8c11-e55ce920759b.png)

As long as it's able to generate a URL for the Realm file, you should be to copy that URL you see there and open it in the Browser. The Simulator SHOULD work too, assuming it doesn't enforce any sandboxing like iOS does.

I hope that helped!
",TimOliver,ggunders
4254,2016-11-09 23:49:52,"@ggunders I'm closing this since we haven't heard back from you in a few weeks, but don't hesitate to reach out if you have any further questions.
",jpsim,ggunders
4251,2016-10-24 23:21:39,"Thanks for clarifying @tgoyne.
",jpsim,tgoyne
4249,2016-10-25 21:45:36,"Hi @gaoshanyu! Thanks for filing an issue here!

I noticed you've filed [an identical question on Stack Overflow](http://stackoverflow.com/questions/40201917/swift-realmincorrectthreadexception-realm-accessed-from-incorrect-thread). I've provided a question for more information in the SO question, but what @OrlSan has said here is important. You can't share objects across threads, so you'll need to be careful in which blocks you access objects. Additionally, you need to make sure you call `realm.objects(File.self)`, and not merely `realm.objects(File)`.

Since SO posts are much nicer in terms of longevity and future searching, I'm going to close this issue in favor of continuing the discussion on SO. Please continue the discussion there if you need more help.
",TimOliver,OrlSan
4249,2016-10-25 21:45:36,"Hi @gaoshanyu! Thanks for filing an issue here!

I noticed you've filed [an identical question on Stack Overflow](http://stackoverflow.com/questions/40201917/swift-realmincorrectthreadexception-realm-accessed-from-incorrect-thread). I've provided a question for more information in the SO question, but what @OrlSan has said here is important. You can't share objects across threads, so you'll need to be careful in which blocks you access objects. Additionally, you need to make sure you call `realm.objects(File.self)`, and not merely `realm.objects(File)`.

Since SO posts are much nicer in terms of longevity and future searching, I'm going to close this issue in favor of continuing the discussion on SO. Please continue the discussion there if you need more help.
",TimOliver,gaoshanyu
4249,2016-10-28 08:54:21,"@TimOliver sorry for my late reply and thank you for your kindly help. I've updated my question in SO, thanks.
",gaoshanyu,TimOliver
4246,2016-11-16 10:16:31,"Thanks, @austinzheng! Master is merged now
",stel,austinzheng
4246,2016-11-30 12:19:02,"@austinzheng, @jpsim any other feedback for this?",stel,austinzheng
4245,2016-10-25 22:35:23,"Hi @jaybowong!

Thanks for your issue! I believe what's happening here is that because you're doing a lot of manual moving of item values inside your migration block, that's causing a non-trivial number of items to become paged into memory at once, subsequently hitting the device's mmap memory limit.

The easiest way to mitigate this would be to encircle each code block involving accessing Realm properties in an `@autoreleasepool`. This way, they'll be explicitly drained at the end of each iteration, ensuring not too much memory is consumed at once.

Let me know if this helps! Thanks!
",TimOliver,jaybowong
4245,2016-10-27 06:43:54,"@TimOliver Thank you so much. I think it's very likely the case!

I changed my code from



to



I don't know if this issue is fixed but I'll close it.
I'll come back if something wrong still happens.
",jaybowong,TimOliver
4245,2016-12-22 14:07:27,"@jpsim How to do a stable migration? I think I followed the [Performing a Migration](https://realm.io/docs/objc/latest/#performing-a-migration) guide. Is there anything that I missed? 
I really need solve this OOM issue. Thank you so much.",jaybowong,jpsim
4245,2016-12-23 03:40:04,"@jpsim Thanks for pointing out the doc about memory. But I'm still a little bit confused, and maybe there're other developers feel the same. My question is how to migrate in a memory-efficient way? Specifically, what should I do when my app receives a memory warning? Or is there a way to migrate one object at a time and release it right away? I thought `autoreleasepool` might help as @TimOliver mentioned, but it didn't work as I expected. If my code is wrong, please let me know.

 Could you please suggest an appropriate way to migrate large data and more importantly put it in the doc? I think migrating a large set of data is a common scene, especially for apps that have been using Realm for a long time.",jaybowong,jpsim
4245,2016-12-23 03:40:04,"@jpsim Thanks for pointing out the doc about memory. But I'm still a little bit confused, and maybe there're other developers feel the same. My question is how to migrate in a memory-efficient way? Specifically, what should I do when my app receives a memory warning? Or is there a way to migrate one object at a time and release it right away? I thought `autoreleasepool` might help as @TimOliver mentioned, but it didn't work as I expected. If my code is wrong, please let me know.

 Could you please suggest an appropriate way to migrate large data and more importantly put it in the doc? I think migrating a large set of data is a common scene, especially for apps that have been using Realm for a long time.",jaybowong,TimOliver
4244,2016-11-09 23:49:12,"@crrobinson14 have you had the chance to see if the `tg/changeset-skip` branch resolved your issue?
",jpsim,crrobinson14
4244,2016-11-10 04:56:53,"@jpsim this branch doesn't actually build for me. I get an error in RLMCollection.mm `""No member named 'suppress_next' in realm::NotificationToken""`. I'm installing this via CocoaPods via:

`pod 'Realm', :git => 'https://github.com/realm/realm-cocoa.git', :branch => 'tg/changeset-skip', :submodules => true`

Should I be using a different option?
",crrobinson14,jpsim
4244,2016-11-18 22:01:35,"@crrobinson14 were you ever able to build with that branch? Note that the `tg/changeset-skip` branch has now been deleted and merged to `master` in #4253, as of a few minutes ago.

We'll be cutting a release including those fixes and features shortly. I'd love to hear if that addresses the issues you've been seeing.
",jpsim,crrobinson14
4244,2016-12-07 02:03:14,"Closing since I suspect 2.1.0 or 2.1.1 fixed this as the situation seems similar to other cases confirmed fixed, and we haven't heard back from @crrobinson14 in a few weeks.",jpsim,crrobinson14
4241,2016-12-07 02:02:03,"Have either of you been able to uncover more information about this crash @MikeKasperlik @pnull?

I'd encourage both of you to update to the latest version ([2.1.1](https://github.com/realm/realm-cocoa/releases/tag/v2.1.1)) which may have addressed this issue.",jpsim,MikeKasperlik
4241,2016-12-07 02:02:03,"Have either of you been able to uncover more information about this crash @MikeKasperlik @pnull?

I'd encourage both of you to update to the latest version ([2.1.1](https://github.com/realm/realm-cocoa/releases/tag/v2.1.1)) which may have addressed this issue.",jpsim,pnull
4241,2016-12-17 13:54:21,@Sunitadaffodil Your first comment doesn't seem related to Realm and this issue. Also for second comment: `Unsupported Realm file format version` means you attempt to open realm file generated new version from old version of Realm. This also doesn't related this issue.  Please file your problem as another issue? Thanks.,kishikawakatsumi,Sunitadaffodil
4241,2017-01-18 19:40:58,"Bringing attention back to this issue since @TimOliver's comment is 26 days old.

>Are you able to share some reproduction steps/code we can test? Or has the issue gone away in subsequent Realm releases?

Cheers!",istx25,TimOliver
4240,2016-10-20 16:35:10,"It would be helpful if you could package your sample code in an Xcode project along with detailed steps to trigger this @mattjaffa.

This looks like it could be related to #4241.
",jpsim,mattjaffa
4240,2016-12-07 02:00:21,@mattjaffa just following up on @bdash's last comment.,jpsim,mattjaffa
4240,2016-12-07 02:00:21,@mattjaffa just following up on @bdash's last comment.,jpsim,bdash
4240,2016-12-24 01:06:50,"I'm closing this issue since it's been idle for over two weeks.

@mattjaffa - If you're still having trouble, please feel free to re-open it and let us know if there's anything else we can do to help.

Thanks! Happy holidays!",TimOliver,mattjaffa
4239,2016-10-31 17:12:23,"@jpsim I see that you're tracking a similar issue in #4005, but the difference is that my issue doesn't seem to have an obvious workaround. Are you aware of a way to get around this issue other than not providing a custom `@objc` classname?
",stevenp,jpsim
4238,2016-11-10 18:19:36,"Thanks for making that sample project, @pauluhn. I've been able to reproduce the crash. We're looking into it.
",jpsim,pauluhn
4237,2016-10-25 23:20:54,"Hi @settl! I'm the one who wrote that passage in the Realm documents about file protection.

We were prompted to write it after a user reported a bug to us that there were trying to use iOS multitasking to periodically trigger a network request while the app was backgrounded, and to save the results of that to disk. They reported to us that Realm would always fail with an exception stating that the file was inaccessible when the device was locked.

We haven't found any official documentation either on what the default file protection setting is, which is why we were careful about stating which protection mode is on by default. According to many Stack Overflow posts, the assumption is that it's `NSFileProtectionCompleteUntilFirstUserAuthentication`, but the fact we had a user bump into this issue before seems to imply that might not always be the case. (That being said, they never mentioned that they might have enabled the Data Protection capability, so that might have been it!)

In any case, that seems really odd. If the Realm file on disk is encrypted, you should be always experience that `open failed` exception instead of simply retrieving a `nil` value.

If you want to test out the file protection types, [there's a small demo app](https://github.com/erikr/DataProtectionDemo) you can run to test out the various levels of protection. Unfortunately, if your phone is plugged into a trusted computer, that apparently might disable complete file protection (This is how iTunes maintains a connection), so it may be tricky to test this in debug mode.
",TimOliver,settl
4237,2016-11-15 23:07:40,"@settl did @TimOliver's last comment help shed light on the situation? I'm closing this issue since we haven't heard back from you in a few weeks, but feel free to reopen if you have any further questions.
",jpsim,settl
4237,2016-11-15 23:07:40,"@settl did @TimOliver's last comment help shed light on the situation? I'm closing this issue since we haven't heard back from you in a few weeks, but feel free to reopen if you have any further questions.
",jpsim,TimOliver
4236,2016-10-19 07:11:55,"@sachin-sat Realm objects lazily load their data. The reason for this is that Realm uses a zero-copy architecture which means we only load data you actually use. In other words, Realm doesn't load any data until you accessed the properties.

For example, the following code doesn't load data to memory at all.



`results` just holds metadata of query. It doesn't hold any data, even not executing the query. When you accessed an element of `results`, like `let person = results[0]` or `for person in results`,  then the query will execute. But at this time, `person` doesn't load any data. Then you access a property, like `person.name`, then Realm load actual data (all Realm object's getter/setter methods are swizzled with Realm's accessor method).

So, you don't need to worry about cost or memory consumption using Realm. 
",kishikawakatsumi,sachin-sat
4232,2016-10-18 16:08:15,"Hi @danielgindi, we're already tracking this as #2920, so I'll be closing this as a duplicate.

Our team would happily accept a PR that implemented this, if you're interesting in contributing this to Realm.

Thanks for the Charts project, looks pretty cool!
",jpsim,danielgindi
4231,2016-10-19 03:42:51,"@jpsim I think it's not the case you mentioned.

I tried code below with a `addNotificationBlock` in a transaction. And it does crash as expected.



The crash stack has something like `-[RLMResults addNotificationBlock:] (RLMResults.mm:435)`. 



But I don't see any `addNotificationBlock` message in my own crashes. Is there any other clue?
",jaybowong,jpsim
4231,2016-10-20 07:01:59,"Thank you so much @jpsim  

I'll try this code even though I don't quite understand.



Also I wrote some demo code like below and run many times. It worked fine.



Maybe the stack info is not so clear. I tried hard to find problems in my code but failed. 
Instead of rewriting the code right now, I'll collect more information. I [found](http://www.crashprobe.com/ios/) that [HockeyApp](https://hockeyapp.net) may be the best crash tool and I decide to give it a try. 
I'll give feedback after releasing a new version of my app in a week.
",jaybowong,jpsim
4231,2016-11-08 14:58:30,"@jpsim  
This crash doesn't happen any more after I tried `if (finishResults.count > 0) {` that you told me.
Should I close this issue now?
",jaybowong,jpsim
4231,2016-11-08 20:02:18,"No, let's keep this open as I suspect this is actually a bug, but I'm glad you were able to work around it @jaybowong!

Any chance you can provide us with a sample project that reproduces this exception?
",jpsim,jaybowong
4231,2017-02-08 10:02:17,"@jpsim is this issue being tracked here? or on #4515?

My app is crashing a lot due to this issue. I've tried to remove all queries from my transactions, but it still crashes :(.",beloso,jpsim
4229,2016-10-17 20:39:22,"@kevincador, would you mind attaching the complete Xcode project you're testing with so we can attempt to reproduce with the exact same code that you're using?
",bdash,kevincador
4229,2016-10-17 21:10:14,"@bdash I forked and created a branch called gcd-test. The only file that should require your attention is the AppDelegate : https://github.com/kevincador/realm-cocoa/blob/gcd-test/examples/ios/swift-2.2/Backlink/AppDelegate.swift

You can run the sample Backlink from the branch. You should have the same results as reported above.
",kevincador,bdash
4229,2016-10-17 21:30:11,"Hi @kevincador, looking at your sample code above and the modified version of the example app, you're effectively creating 10,000 concurrent versions of the database, each mutating the db. To preserve isolation between transactions, Realm writes this data in separate locations on disk.

Imagine if Realm didn't do that, you'd lose the isolation between transactions.

Realm preserves each intermediate versions of its state from the oldest still-in-use version (your main thread in this case) and the newest version (the last GCD transaction that fires). Meaning that these 10k copy-on-write versions of the database can't be discarded to reclaim that space.

This is exactly the type of problematic scenario that's documented in the section on [File size & tracking of intermediate versions](https://realm.io/docs/swift/latest/#file-size--tracking-of-intermediate-versions) in Realm's documentation that @bdash linked to earlier.

If you weren't accessing the Realm on the main thread, those intermediate states could be discarded, preventing the Realm file from growing so much.
",jpsim,kevincador
4229,2016-10-17 21:30:11,"Hi @kevincador, looking at your sample code above and the modified version of the example app, you're effectively creating 10,000 concurrent versions of the database, each mutating the db. To preserve isolation between transactions, Realm writes this data in separate locations on disk.

Imagine if Realm didn't do that, you'd lose the isolation between transactions.

Realm preserves each intermediate versions of its state from the oldest still-in-use version (your main thread in this case) and the newest version (the last GCD transaction that fires). Meaning that these 10k copy-on-write versions of the database can't be discarded to reclaim that space.

This is exactly the type of problematic scenario that's documented in the section on [File size & tracking of intermediate versions](https://realm.io/docs/swift/latest/#file-size--tracking-of-intermediate-versions) in Realm's documentation that @bdash linked to earlier.

If you weren't accessing the Realm on the main thread, those intermediate states could be discarded, preventing the Realm file from growing so much.
",jpsim,bdash
4229,2016-10-18 11:24:13,"Hi @jpsim,
I understand this and it would not be a problem if the file size didn't increase constantly. I mean, once the operation is done, there is no need to keep the intermediate versions in the Realm file.
Also, I thought the space would be reused at some point. It doesn't seem to be the case even with an autoreleasepool wrap or after calling invalidate after each transaction.

I think we are using a pretty common pattern:
- read on the main thread to refresh the UI
- write on a background thread after a network activity

The problem is, right now, we have like 30% of our daily user session that crashes with mmap() errors because the database is 1.5 Gigabytes instead of 6 Megabytes.

We tried to work around this by compacting the Realm file (modifying the source to have access to `compact()`) each time we launch the app but since we have other processes reading (like widget, background fetch or Apple Watch app) the compact does not always work.

When the compact doesn't work, we only found one solution. We delete all Realm files and trigger a full sync. Not the best in terms of user experience but there when there is no way to recover from a 1-3 gigabytes database (depending on the device), it is the best we could do.
",kevincador,jpsim
4229,2016-10-24 07:48:24,"Hi @jpsim, I would love to have your feedback about my last comment. Don't hesitate to ask me if you need anything.

I don't know if this makes sense but I think the database size grows a lot when we perform background fetch (iOS background fetch). It would make sense since I assume all the jobs are done in background threads. It would mean that no matter the use case, if you touch at the database in a background refresh job it will eventually crash at launch with an impossible mmap since the background refresh is triggered by iOS several times a day.
",kevincador,jpsim
4229,2016-10-31 14:33:16,"Hi @jpsim,

You could also delete the intermediate versions when the app starts up (or when the Realm file is first  accessed). I don't mind calling something else than compact() at launch if it can help reduce the size of the database. If it is a fast and safe operation, I don't mind calling this new method after each write transaction. 
",kevincador,jpsim
4229,2016-11-11 09:07:28,"@kevincador There is an interim solution that fixes your problem of inflated realm sizes but there is a catch. 

Do all your background async db read/write transactions code blocks in a single serialized dispatch queue in swift. Now you have at most 1 version of db in non-ui thread.

The catch is that of course, you will block other realm async background code blocks and you have just manually ""removed"" the ""concurrency"" feature of realm. On the other hand, you only block other background realm work, so UI is not effected. There is a fundamental difference between concurrency and speed. Concurrency is not speed. So with this method, you only sacrifice concurrency, but not speed.  ~~Parallel writes~~Multiversioning in realm, or any other ~~concurrent~~/mvcc systems which allows limited concurrency,  are not free and are actually very costly.

Edited: remove the incorrect note about parallel writes per @bmunkholm comments and further cleaned up the reply.
",diegomontoya,kevincador
4229,2016-11-14 13:17:06,"Hi @diegomontoya, @bmunkholm,

I've done some refactoring (some heavier than expected) and we now have this configuration:
- Realm read from main thread -> ok
- Realm write from the app (local processing) -> all go through one `OperationQueue` which is backed by a serial `underlyingQueue`
- all other writes (sync, user action,...) -> all go through another `OperationQueue` which is backed by the same serial `underlyingQueue`

I saw some inprovement (🎉) meaning the Realm file size seems to not be as crasy as it was before after 3/4 syncs and 3/4 background fetch. But it is still increasing which is inevitable.

One thing I would like to double check with you guys is that the `Thread` on which the transactions occurs may be different (gcd still creates different threads in the queue even if it is a serial queue). I saw that the thread may be different especially if I go into background and come back to the app. Will this be a problem after running the app for a while? I assume the more the underlying Thread changes, the more we'll see the Realm file size increase. Correct?
",kevincador,bmunkholm
4229,2016-11-14 13:17:06,"Hi @diegomontoya, @bmunkholm,

I've done some refactoring (some heavier than expected) and we now have this configuration:
- Realm read from main thread -> ok
- Realm write from the app (local processing) -> all go through one `OperationQueue` which is backed by a serial `underlyingQueue`
- all other writes (sync, user action,...) -> all go through another `OperationQueue` which is backed by the same serial `underlyingQueue`

I saw some inprovement (🎉) meaning the Realm file size seems to not be as crasy as it was before after 3/4 syncs and 3/4 background fetch. But it is still increasing which is inevitable.

One thing I would like to double check with you guys is that the `Thread` on which the transactions occurs may be different (gcd still creates different threads in the queue even if it is a serial queue). I saw that the thread may be different especially if I go into background and come back to the app. Will this be a problem after running the app for a while? I assume the more the underlying Thread changes, the more we'll see the Realm file size increase. Correct?
",kevincador,diegomontoya
4229,2016-12-24 00:42:40,"Hi @kevincador!

I hope that answered all of your questions! I'm going to close this issue now, but please feel free to re-open it if you have additional follow-up questions.

Thanks!",TimOliver,kevincador
4228,2016-10-18 08:03:34,"@jpsim you're absolutely right. Unfortunately in my case I have some difficulties creating a xcode demo project because the data is retrieved via VPN.

I filed this issue because I thought it was a design choice to reset the lists connected to an object when you update it. 

I must say that I update the object after mapping it with ObjectMapper, and in fact now that I had the time to check, it is probably the latter that empties the collections.
",superandrew,jpsim
4227,2016-10-17 23:47:29,"Hi @IljaKosynkin. We really appreciate the PR and the time you've put in to preparing this.

Regarding your first change: updating the behavior of `Realm.add(...)`, for starters this is a breaking change in semantics that could break lots of existing apps out there.

For example, `Realm.add(_:update: false)` currently always adds a new object. Some apps rely on this invariant behavior of Realm. For every user that would prefer `realm.add(_:update: false)` just be a no-op if the object already exists, there's another that relies on the opposite being the case.

We take making breaking changes very seriously, and therefore this is something we're unlikely to change. Especially given that it's trivial to obtain the behavior you'd like in your code by combining two very concise existing Realm APIs:



As for your second proposal, adding a Realm model for each primitive type supported by Realm is also something we've thought about and ultimately rejected, because it has unfortunate consequences. For example, every app that uses Realm would now have these tables in the database, regardless of whether or not they use the functionality enabled by these wrappers. Also, these wrappers are trivial to implement in your own apps. Finally, it's a temporary workaround for a limitation, mostly preventing lists of primitives (#1120). We'd much rather remove the underlying limitation rather than introduce a temporary type. Adding these wrappers as a temporary measure would also require us to have a clear path to deprecation and migration to the ""fixed"" model once it's available. For all these reasons, we've decided not to move forward with that approach.

---

In the future, if you'd like to propose changes, I suggest you comment on an existing open issue if a relevant one already exists, or open a new one otherwise, where we can discuss the implications of those changes before you devote time to implementing them. Our team might share some edge cases you may not have considered, and conversely, you might open our eyes to an approach we haven't yet considered.

I hope the reasons I've provided here help clarify why we won't be accepting these changes and I sincerely thank you for your interest in contributing to Realm!
",jpsim,IljaKosynkin
4227,2016-10-18 10:39:35,"Hi @jpsim.
It's a bit strange for me, since I spent quite a bit of time thinking about providing such changes and didn't found any breaking changes in it. Let me clarify my point with a table:  

| Method | Current behaviour | Behaviour in my PR |
| --- | --- | --- |
| add(Object) (not exists) | Adds object to database | Adds object to database |
| add(Object) (exists) | Throws exception | Throws exception |
| add(Object, update: true) (not exists) | Adds object to database | Adds object to database |
| add(Object, update: true) (exists) | Updates object in database | Updates object in database |
| add(Object, update: false) (not exists) | Adds object to database | Adds object to database |
| add(Object, update: false) (exists) | Throws exception | **Skipping object with no changes and no exception thrown** |

As you can see, changes was made for one particular use case and it's hard for me to imagine any app that is hardly rely on a fact that add(Object, update: false) will throw an exception if object exists. I will be very grateful, if you can provide me real-world use case, when my change will really broke down something fatally. 
About your solution with checking if object exists - yes, it's not hard to make such change, but it will provide additional layer above database, as well as give overhead in object searching. As I can see in Realm code - when somebody wants to add object, Realm is performing search of row by ID. With your code such search will be performed twice: in my code at first and then internally in Realm. May be it doesn't seems to be a big deal, but I don't see any point in doubling of operations either, especially since our application is supposed to download thousands of objects from our API and write it to the database. 

As about wrappers - well, I can see your point. However, I feel like such limitation on List<> was here for quite a bit of time, so may be it's not a bad idea to give users of library a built-in solution, while you guys are working on correct solution? Also, I think it's possible to map Int to RealmInt internally, i.e. List<Int> would be mapped to List<RealmInt> inside Realm and problem is basically resolved, no? Yes, once again it's not hard to implement in application all this wrappers, but I personally hate boiler-plate code and I'm trying to avoid it as much as possible. I will not feel happy if I will be forced to repeat wrappers over and over again in every project that is using Realm or write separate library for this, which will require additional time spent on its maintenance. 
Hopefully, I made my point clear. I completely understand you concerns about my PR, but I doesn't feel like it's really something big :) Thank you for spending time on reviewing my code and I hope  you would think over about it once again :) 
",IljaKosynkin,jpsim
4227,2016-12-08 02:09:18,"@IljaKosynkin just FYI, I haven't forgotten you! Reviewing and processing your last comment has been on my todo list since you posted this. I'll get to this... eventually.",jpsim,IljaKosynkin
4226,2016-11-09 00:10:20,"@superandrew do you still have questions regarding this?
",jpsim,superandrew
4226,2016-11-09 17:00:41,"I think everything has been cleared, thank you.

On Wed, Nov 9, 2016 at 1:10 AM +0100, ""JP Simard"" notifications@github.com wrote:

@superandrew do you still have questions regarding this?

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub, or mute the thread.
",superandrew,superandrew
4225,2016-10-17 21:47:26,"Thanks for bringing this to our attention @tumata! Turns out we hadn't entirely updated our packaging scripts, nor the source of the playground, to fully account for Swift 3. I've filed #4230 to address this.

In the meantime, you can make the following changes to the playground and it should run fine:
1. Add `import PlaygroundFrameworkWrapper` between the `Foundation` and `RealmSwift` imports.
2. Change `filter(using:` to just `filter(`
3. Change `sorted(onProperty: ""age"")` to `sorted(byProperty: ""age"")`
4. Change `realm.deleteAllObjects()` to `realm.deleteAll()`
5. In the scheme selector choose PlaygroundFrameworkWrapper > iPhone 6s
6. Press Cmd + B
7. If the Playground didn't already run press the ▶︎ button at the bottom
",jpsim,tumata
4221,2016-10-14 14:12:16,"@Ankish thank you for sharing this crash report!

Could you please provide some more info how to reproduce this crash, error message you see or example Xcode project, thanks!
",stel,Ankish
4221,2016-10-14 14:21:04,"@stel  I **havent** still seen this crash on iPhone 5s 9.3.5  - I am seeing this on 6s 9.3.3. Havent tested on all other devices. It does not crash always on initializing the Realm object. If I was able produce this consistently I could have prepared a sample project and pointed the issue. I am not able to reproduce it every time.

however its a simple code:


",Ankish,stel
4221,2016-10-17 21:15:53,"Hi @Ankish, we've made some improvements to the interprocess locking mechanism in recent Realm versions. Could you please try with the latest release to see if that improves things? That's [Realm 2.0.2](https://github.com/realm/realm-cocoa/releases/tag/v2.0.2) as of this writing.
",jpsim,Ankish
4221,2016-11-09 23:46:50,"@Ankish just following up on my request for you to see if recent Realm versions still exhibit this issue (latest version is 2.0.3 as of this writing).
",jpsim,Ankish
4221,2016-12-07 01:59:50,Closing as we never heard back from @Ankish and I suspect this has been fixed since the issue was reported.,jpsim,Ankish
4221,2017-01-06 06:34:41,"@Ankish, can you share more information about the crash? The backtrace only tells us where the crash happened, not what went wrong.",bdash,Ankish
4221,2017-01-06 07:12:55,"@Ankish, of particular interest is the portion of LLDB's output that looks something like this:
",bdash,Ankish
4221,2017-01-06 17:10:49,"@Ankish, can you please provide the full crash log or debugger output rather than just a partial snippet? The missing portions of the output contain important information that will help us understand the problem.",bdash,Ankish
4220,2016-10-14 07:37:27,"@pjebs Use `self. preferences` instead `_preferences`. Realm creates subclass dynamically and swizzle getter/setter for lazy loading and zero copy. Realm objects don't store any values in memory. Direct access instance variables always returns `nil`.
",kishikawakatsumi,pjebs
4220,2016-10-14 09:53:15,"@pjebs do you need any other help with this issue? I'm closing it for now, please feel free to reopen it or create a new issue if you have any other questions.
",stel,pjebs
4217,2016-10-13 22:05:14,"Hi @hoang17. Ignored properties are _entirely ignored_ by Realm. They behave just as normal `NSObject` properties. Modifying the `gender` property of one instance will never affect the value of another.
",jpsim,hoang17
4215,2017-02-20 18:46:42,Hi @kishan89. Would you be able to file another issue with your own code samples? Thanks.,istx25,kishan89
4213,2016-10-18 00:00:22,"Hoping that my last comment helped you @Piraban. Feel free to reopen this issue if you have any further comments or questions you'd like us to address.
",jpsim,Piraban
4212,2016-10-12 13:17:16,"@Piraban I've noticed your question on StackOverflow: http://stackoverflow.com/questions/39996577/save-object-using-realm-inverse-relationships-swift and requested additional info there, so will close this issue.
",stel,Piraban
4211,2016-10-12 08:40:46,"@mobilestar0223 I've answered your question on StackOverflow: http://stackoverflow.com/a/39994123/417267, let me know if you need any other help and feel free to reopen this issue.
",stel,mobilestar0223
4207,2016-10-11 19:18:57,"Thanks @jpsim. Yeah, it sucks that I can't reproduce it myself, that's actually why I hadn't posted it before.

I've been updating Realm every time before I release an update to see if this is fixed, but so far it looks like it hasn't. I'll update to the latest version again and see if it that helps.

If it doesn't, though, is there anything I can do to try to reproduce it? Any edge cases? Recommendations for working with Realm and NSDate/NSPredicate? :(
",macecchi,jpsim
4207,2016-10-19 18:19:55,"@jpsim I've only deployed the update two days ago. Let me check if I already have the crash reports...
",macecchi,jpsim
4207,2016-10-19 18:29:45,"@jpsim I've only got very few crash reports. So far, it hasn't been reported. I should probably confirm this in the next days :)
",macecchi,jpsim
4204,2017-02-10 03:17:49,"@jpstern `whole module optimization.` doesn't fix the crash for us.

Will try to create an RLMResult extension to reimplement those high-order functions.",xiaodao,jpstern
4203,2016-10-10 19:58:12,"Thanks for reporting this @cliftonlabrum, we had an issue with our website since Thursday last week where some changes would occasionally get reverted, this has since been fixed as of 2 minutes ago.
",jpsim,cliftonlabrum
4202,2016-10-17 23:59:42,"@Ashok28 did you manage to file a radar about this, or to work around this apparent KVO bug by deregistering your KVO observers prior to calling `deleteAll()`?
",jpsim,Ashok28
4199,2016-10-10 05:59:30,"@liuxuan30 We provide a pre-built binary for Carthage. No need to build from source. But



above message shows downloading the pre-built binary fails due to API rate limit. Could you please try again later or set a `GITHUB_ACCESS_TOKEN` environment variable to avoid rate limit? https://github.com/travis-ci/travis-ci/issues/4195
",kishikawakatsumi,liuxuan30
4199,2016-10-12 04:42:16,"I can confirm it takes a really long time to build, but it eventually finishes (~10 minutes).

@kishikawakatsumi Where can I get the pre-built Carthage binary? Are they on the latest (2.1) branch?
",cliftonlabrum,kishikawakatsumi
4199,2016-10-12 09:04:55,"@cliftonlabrum you can get it here: https://github.com/realm/realm-cocoa/releases/
",stel,cliftonlabrum
4194,2016-10-10 17:11:24,"Hi @TR4Android, as the conversation in realm/realm-java#3589 has become more in-depth than this one, I'll close this as a duplicate.

If others land on this, immutable primary keys in Realm is very much a core design decision, as PKs represent ""identity"" in Realm, and semantically identity cannot mutate.

If you're using primary keys in a way that doesn't represent identity in your object graph, then this is incompatible with Realm's concept.

For example, two objects with the same identity always merge to the same object, whether it's being synchronized with the [Realm Mobile Platform](https://realm.io/products/realm-mobile-platform/), or it's two items being written to from different processes or threads.
",jpsim,TR4Android
4190,2016-10-07 07:07:08,"@cassianomonteiro Thank you for this crash report, I'm sorry you're affected by this assertion failure. Could you please share some more info how to identify and reproduce this issue?
",kishikawakatsumi,cassianomonteiro
4190,2016-10-07 12:20:32,"@kishikawakatsumi So, I have some extra Realm entities on my Test scheme. Actually, it seems to not be a problem with upgrading a REALM database file from 1.0.1 to 2.0.2, but a problem with version 2.0.2 itself. To reproduce the crash:
1. Reset Simulator contents and settings
2. Run tests on Simulator (I'm using iPhone 4S iOS 9.3) -> All tests have passed
3. Try to run app on Simulator (crash happens)

This also happens:
1. Reset Simulator contents and settings
2. Run app on Simulator (works fine)
3. Run tests on Simulator -> All tests have passed
4. Try to run app on Simulator (crash happens)

The crash happens on the [Realm defaultRealm] statement in my AppDelegate.

Attached is the realm file that is crashing when trying to open it.
[default.realm.zip](https://github.com/realm/realm-cocoa/files/516064/default.realm.zip)

What other information could be relevant to help you?
Thanks!
",cassianomonteiro,kishikawakatsumi
4190,2016-10-07 18:07:12,"@kishikawakatsumi I created a sample project where you can reproduce the crash. Please take a look at https://github.com/cassianomonteiro/realm202crash . Thanks!
",cassianomonteiro,kishikawakatsumi
4190,2016-10-07 18:43:19,"Thanks for the test case, @cassianomonteiro. It should make it much easier for us to understand where things go wrong.
",bdash,cassianomonteiro
4190,2016-10-07 19:11:07,"@bdash Glad I can help! =)
",cassianomonteiro,bdash
4190,2016-10-10 17:13:30,"@tgoyne Run tests first, then run app after running tests.
",cassianomonteiro,tgoyne
4190,2016-10-10 17:14:10,"Thanks @bdash ! Could you understand the problem?
",cassianomonteiro,bdash
4190,2016-10-10 17:26:25,"The unit test target defines a Realm model class, `TestRealmObject`, that is not present in the application target. The unit tests are also run with the application as the test host app, causing the unit tests and application to use the same Realm file on disk. When the unit tests run `TestRealmObject` is added the to on-disk Realm's schema. When you run the app again an assertion that the on-disk object schema contains the same number of classes as the in-memory object schema fails because `TestRealmObject` exists in the on-disk schema but not in the in-memory one when running the app. I think the assertion is incorrect, but @tgoyne would know better than me what behavior we expect in this case.
",bdash,tgoyne
4187,2016-10-06 00:11:11,"Hi @wkoszek, you're right that we should be opting out those files from backups, but moving them to a separate location isn't the right way to resolve this IMO. Instead, we should be setting the appropriate `NSFileProtection` attributes to prevent those files from being included in iTunes or iCloud backups and file transfers.

Until we get around to doing this, you can do that explicitly in your apps.
",jpsim,wkoszek
4187,2016-10-06 03:17:49,"@jpsim @bdash Ok, so I gave you an example on how I wanted to deal with the issue, but it didn't seem to work for me. What's the proper way to change the directory for Realm files?

I don't like the new title of this issue. It's doesn't reflect my problem enough :-)
",wkoszek,jpsim
4187,2016-10-06 03:17:49,"@jpsim @bdash Ok, so I gave you an example on how I wanted to deal with the issue, but it didn't seem to work for me. What's the proper way to change the directory for Realm files?

I don't like the new title of this issue. It's doesn't reflect my problem enough :-)
",wkoszek,bdash
4187,2016-10-06 03:20:40,"@jpsim No worries man.
",wkoszek,jpsim
4187,2016-10-06 03:30:18,"@jpsim So can you confirm that an inability of doing:



is a bug too? I'd expect that this default config will kick in each time I do:



At least that's what I do in my data model right now.
",wkoszek,jpsim
4187,2016-10-06 03:46:40,"I don't understand your last comment.

> 4 files of Realm are still created:

Yes, that's expected. No matter the root directory of the realm file, the auxiliary files will always be created, and they will always be located next to the main file.

I had opened an issue a long time ago to allow specifying a custom location for the auxiliary realm files, but that was closed due to not solving any issue we were aware of: realm/realm-core#911

Sounds like this would require the same solution, but for a different problem.

Unless there's a different solution to this that I'm not aware of.

Does that sound right to you @wkoszek?
",jpsim,wkoszek
4187,2016-10-11 18:47:34,"@jpsim Should we document somehow that `UIFileSharingEnabled` collides with default Realm settings ?
",wkoszek,jpsim
4186,2016-10-06 03:38:38,"@TheHmmka For example, moving cells produces deletions and insertions. In that case, you need to wrap `insertItemsAtIndexPaths:` and `deleteItemsAtIndexPaths:` in `performBatchUpdates:completion:` method.
",kishikawakatsumi,TheHmmka
4186,2016-10-06 05:32:47,"@kishikawakatsumi I understand but I don't need animations.
@jpsim I will try to create a peace of code to recreate this stuff in empty project.
",TheHmmka,jpsim
4186,2016-10-06 05:32:47,"@kishikawakatsumi I understand but I don't need animations.
@jpsim I will try to create a peace of code to recreate this stuff in empty project.
",TheHmmka,kishikawakatsumi
4186,2016-10-06 15:29:08,"@ab-rdarts Glad that I am not only one, but not cause your problem :-). Still don't have free time to create test project for example :-(.
",TheHmmka,ab-rdarts
4186,2016-10-07 09:53:56,"@nRewik Yep, thinks it's the same. I have got 1 object in insertions and 1 object in modifications but need to get 2 objects in insertions.
",TheHmmka,nRewik
4186,2016-10-10 17:03:26,"@TheHmmka @nRewik @AndrewBarba can any of you provide us with a sample Xcode project that reproduces the problem you're facing? We'd love to help, but need to reproduce this to make progress.
",jpsim,TheHmmka
4186,2016-10-10 17:03:26,"@TheHmmka @nRewik @AndrewBarba can any of you provide us with a sample Xcode project that reproduces the problem you're facing? We'd love to help, but need to reproduce this to make progress.
",jpsim,nRewik
4186,2016-10-10 17:03:26,"@TheHmmka @nRewik @AndrewBarba can any of you provide us with a sample Xcode project that reproduces the problem you're facing? We'd love to help, but need to reproduce this to make progress.
",jpsim,AndrewBarba
4186,2016-10-10 19:23:24,"@jpsim Can I send you guys a zip privately? I think it's going to be difficult to create a project from scratch so I'd like to include code from our app that I know can reproduce this. I have a feeling it has to do with the way we write to realms on background threads and only read from them on the main thread and I don't want to lose any of that code, I think it will lead you in a better direction.
",AndrewBarba,jpsim
4186,2016-10-17 21:11:16,"Still waiting on a sample Xcode project to reproduce this. We received something from @anlaital that may or may not be related to this issue, we're still looking into that, but really the best way for us to move on this would be for people experiencing the issue to share a project that would let us reproduce it too. That'd be you @AndrewBarba and @TheHmmka.
",jpsim,TheHmmka
4186,2016-10-17 21:11:16,"Still waiting on a sample Xcode project to reproduce this. We received something from @anlaital that may or may not be related to this issue, we're still looking into that, but really the best way for us to move on this would be for people experiencing the issue to share a project that would let us reproduce it too. That'd be you @AndrewBarba and @TheHmmka.
",jpsim,AndrewBarba
4186,2016-10-18 18:10:52,"I was able to trigger the UITableView exception using the project @AndrewBarba sent us, so I've removed the ""Reproduction Required"" label from this issue.

I have yet to investigate where the problem is: Realm, UITableView or the sample code we received.
",jpsim,AndrewBarba
4186,2016-10-18 20:30:07,"Issue seems to be in Realm. I identified a discrepancy where the count of the collection being observed increased without an accompanying insertion by using the project @AndrewBarba sent us.

It appears that the `tg/changeset-skip` branch may fix the issue, but keep in mind that those changes are still in progress. Still, I'd appreciate if others experiencing this issue on this thread could try it out.

If you're using CocoaPods, you can build from that branch by specifying the following in your Podfile:


",jpsim,AndrewBarba
4186,2016-10-19 19:41:10,"That's not too surprising. Work on that branch is still ongoing, which is why it hasn't landed in `master` yet.

Although it would help us to know how the deadlock is happening. Could you share a sample project that reproduces that @nRewik?
",jpsim,nRewik
4186,2016-10-26 03:41:29,"I talked with @jpsim about us not receiving change notifications on updates when listening on filtered collections. This issue has been fixed in the `tg/changeset-skip` branch.
",anlaital,jpsim
4186,2016-11-18 19:39:50,"@pawelkata have you tried with the `tg/changeset-skip` branch?
",jpsim,pawelkata
4186,2016-11-18 20:19:54,"@jpsim not yet, sorry. Had to make a release to production and went with v2.0.3 + quick fix mentioned above. I'll test this on Monday and report back.
",pawelkata,jpsim
4186,2016-11-18 22:03:05,"Closing as the problems that this ticket is tracking appear to be resolved with #4253.

@emuye's issue may be different, we're investigating that via email at the moment, and if it turns out to be another bug that was not fixed by the recent improvements, we'll open a new issue.
",jpsim,emuye
4183,2016-10-05 23:01:07,"Hi @cjcoax, sorry about the trouble. Turns out that Xcode doesn't like having an iOS and watchOS framework with the same name in the same project 😰. This isn't unique to Realm.

There's a StackOverflow post and answer covering this here: http://stackoverflow.com/q/35701858/373262

We're updating our [installation instructions](https://realm.io/docs/swift/latest/#installation) to reflect this issue:



It should be live on our site in the next few minutes.

I haven't filed a radar about this, but if you'd like Apple to fix this, please write one and I'll be happy to dupe it!
",jpsim,cjcoax
4175,2016-10-18 18:53:23,"After talking to @jpsim I'm going to squash and merge this PR. We can resolve any deficiencies in follow-up PRs.
",austinzheng,jpsim
4171,2016-10-03 17:55:53,"Hi @rollr76518! Sorry to hear you're having some trouble opening this file.

If it's not too much trouble, could you please zip up and attach that Realm file to this issue so I can examine it? Thanks!
",TimOliver,rollr76518
4171,2016-10-04 01:29:29,"[default.realm.zip](https://github.com/realm/realm-cocoa/files/507499/default.realm.zip)

@TimOliver Hello man, Thank you for the reply so soooooooon!
",rollr76518,TimOliver
4171,2016-10-09 05:53:40,"@rollr76518 Try it out.
",jianghaoyuan2007,rollr76518
4171,2016-10-09 06:03:10,"@rollr76518 sorry, I am just a programmer.
",jianghaoyuan2007,rollr76518
4171,2016-10-10 11:48:30,"@rollr76518 I wasn't able to reproduce this issue with v2.0.1, the realm you attached was created with an older version of realm, so after upgrading it Browser was able to read its content.
![screen shot 2016-10-10 at 13 43 59](https://cloud.githubusercontent.com/assets/429275/19235100/dcde74dc-8eef-11e6-8829-401c829e30d7.png)

@jianghaoyuan2007 could you please share the realm you trying to open, thanks!
",stel,jianghaoyuan2007
4171,2016-10-10 11:48:30,"@rollr76518 I wasn't able to reproduce this issue with v2.0.1, the realm you attached was created with an older version of realm, so after upgrading it Browser was able to read its content.
![screen shot 2016-10-10 at 13 43 59](https://cloud.githubusercontent.com/assets/429275/19235100/dcde74dc-8eef-11e6-8829-401c829e30d7.png)

@jianghaoyuan2007 could you please share the realm you trying to open, thanks!
",stel,rollr76518
4171,2016-10-12 13:36:15,"@rollr76518 yes, if you've opened realm file with the latest version of Realm you're not able to open it with the previous version anymore.

I'm closing this issue for now and have made https://github.com/realm/realm-browser-osx/issues/220 for tracking error reporting, if you have any other problems with Realm Browser please feel free to make an issue in https://github.com/realm/realm-browser-osx, thanks again!
",stel,rollr76518
4169,2016-12-06 02:36:44,@luchaoqun123 this is an issue that's been closed for several weeks. Please open a new issue with more information and steps to reproduce.,jpsim,luchaoqun123
4169,2016-12-06 05:58:07,@jpsim OK,luchaoqun123,jpsim
4166,2016-09-30 22:57:49,"The same happens for me. I add objects, but once I want to delete them that crashes an open instance of the Realm Browser and subsequently the browser crashes any time I want to re-open my realm. I'll zip the app and send it your way @austinzheng 
",icanzilb,austinzheng
4163,2016-09-30 19:11:17,"Hi @mbuchetics, you may convert a local Realm to a synced one by creating a new, empty synced Realm with the same schema as your local one and manually copy all the objects from one to the other.

We plan on simplifying that in the future to reduce the amount of boilerplate you need to write, but for now that's what we suggest.

I'll keep this ticket open since we should really mention this in our documentation. Thanks!
",jpsim,mbuchetics
4162,2016-10-17 23:55:56,"Closing since we never heard back form @skarctop and there's not enough information in this report to proceed.
",jpsim,skarctop
4160,2016-09-29 14:54:43,"@radu-tutueanu, I'm glad you're paying attention! I'll revise this as you suggest.
",bdash,radu-tutueanu
4158,2016-09-28 19:37:05,"Discussion at https://forums.developer.apple.com/thread/51071 suggests that the _absence of an entitlements file_ can result in keychain calls failing with `errSecMissingEntitlement` in the simulator. Specifying an entitlements file, even if it contains no entitlements, can work around this problem. @bmctigue, does this workaround work for you?
",bdash,bmctigue
4155,2016-11-29 22:48:11,"Hi @jbrennan, is it possible for you to check with more recent versions of Realm (2.1.0 being the latest as of this writing) to see if this is still an issue? Trying to assess how relevant this crash is now, two months later.",jpsim,jbrennan
4155,2016-11-30 19:50:34,"Hey @jpsim, I just upgraded to 2.1.0 on a branch and still see this crash occurring, unfortunately.",bcapps,jpsim
4154,2016-09-28 15:04:37,"Thanks for the PR, @skydivedan! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,skydivedan
4154,2016-09-30 19:20:31,"@skydivedan thanks for your contribution!

Could you kindly add a changelog entry in the ""Breaking changes"" section, something along the lines of this?


",jpsim,skydivedan
4154,2016-09-30 20:52:08,"@jpsim - ok, done.
",skydivedan,jpsim
4152,2016-10-17 23:56:43,"@ConanMTHu just following up on @bdash's request for more information, such as a crash log and/or backtrace, along with a test project that reproduces the issue.
",jpsim,ConanMTHu
4152,2016-10-17 23:56:43,"@ConanMTHu just following up on @bdash's request for more information, such as a crash log and/or backtrace, along with a test project that reproduces the issue.
",jpsim,bdash
4152,2016-11-03 19:34:47,"I got similar error on a project.
**Realm 2.0.3 installed via Carthage - Xcode 8.1 - Swift 3.0.1**
The missing piece for me was that I had forgot to add the Carthage copy frameworks build phase specified in https://realm.io/docs/swift/latest/#getting-started.

@ConanMTHu Did you by any chance make the same mistake?
",deepumukundan,ConanMTHu
4152,2016-11-08 16:33:36,"@deepumukundan, thanks for the input!

@ConanMTHu, did you make any progress on this?
",bdash,ConanMTHu
4152,2016-11-08 16:33:36,"@deepumukundan, thanks for the input!

@ConanMTHu, did you make any progress on this?
",bdash,deepumukundan
4144,2016-09-30 21:21:48,"@kevincador, do you have a version of your app that reproduces this reliably? If so, would you be willing to share a precompiled IPA of that version of your app with us at help@realm.io so we can attempt to reproduce the crash ourselves?
",bdash,kevincador
4144,2016-10-04 20:07:32,"@bdash & @tgoyne  I have an app that consistently crashes with this error on startup.  The crash occurs about two-thirds to three-quarters of the time.  Let me know if you would like me to give help@realm.io access to the repository to help troubleshoot.
",mlusas,bdash
4144,2016-10-04 21:08:11,"@bdash I pulled the tg/update-objectstore branch, and am still experiencing the error.  I deleted the app in simulator, deleted DerivedData, and tried it again, but still get the error 2/3 to 3/4 of the time.  It seems to occur when the app is executing a lot of Realm writes.  I'm running Xcode 8.0 with iPhone6s simulator running iOS 10.

**EDIT** to confirm the branch I am running via Cocoapods is: 


",mlusas,bdash
4144,2016-10-04 21:37:17,"I'm pleased to hear your positive results with @tgoyne's fix, @kevincador.

@mlusas, can you elaborate on what you did to test?
",bdash,kevincador
4144,2016-10-04 21:37:17,"I'm pleased to hear your positive results with @tgoyne's fix, @kevincador.

@mlusas, can you elaborate on what you did to test?
",bdash,mlusas
4144,2016-10-04 21:43:58,"@bdash here are the steps I used to test:
1. Update Cocoapods to pull from **tg/update-objectstore** branch
2. Run **pod update RealmSwift** (and confirm the pod was updated)
3. Delete app in simulator
4. Close Simulator and Xcode
5. Delete DerivedData
6. Restart Xcode
7. **Run** app in Simulator

Our app does not utilize a lot of Realm writes until the User logs in.  It is after logging in, and restarting the app, that the error occurs immediately upon building.  It consistently crashes about 2/3 to 3/4 of the time.  Let me know if I can provide any additional information to help troubleshoot.
",mlusas,bdash
4144,2016-10-04 21:46:31,"Did you update your Podfile to point both Realm and RealmSwift at the branch, as @kevincador mentioned in his comment? Failing to do this will result in building RealmSwift against the most recently released version of Realm, which does not yet have the fix you're after.
",bdash,kevincador
4144,2016-10-04 22:06:08,"Ah, wonderful, thank you, @bdash .  I ran **pod update RealmSwift** with the added **pod 'Realm'...** line, and ran the app ten times without an error.  This issues seems to be fixed.

For anyone following the thread, the updated Cocoapod lines are (post merge with master):


",mlusas,bdash
4144,2017-02-13 18:15:38,"@sblepa based on the backtrace, that appears to be a slightly different error, despite throwing the same exception. I've filed a new issue here so we can continue to investigate: #4660

I'm locking this ticket to prevent new reports from being missed or incompletely reported.",jpsim,sblepa
4143,2016-09-30 19:02:09,"Closing since we updated to core 2.0.1 in #4156 (though we have yet to cut a release with it).

@jegumhon to use CocoaPods with pre-releases of Realm, put this in your Podfile:


",jpsim,jegumhon
4142,2016-10-10 18:34:43,"Thanks @jpsim!  
So that is a documentation bug, the cocoa docs about when notification is fired stating ""This can happen when an autorefresh occurs, when -[RLMRealm refresh] is called, after an implicit refresh from -[RLMRealm beginWriteTransaction], or after a local write transaction is completed."" ? 

And it follows that there is no possibility of recursion by calling refresh in response to a RLMRealmRefreshRequiredNotification. 
Correct?

Thanks again!
",ralph-e-boy,jpsim
4141,2016-10-14 09:56:43,"@yushuyi do you need any other help with this or can we close this issue?
",stel,yushuyi
4141,2016-10-17 02:18:11,"@stel @jpsim 
ok thanks!
",yushuyi,jpsim
4141,2016-10-17 02:18:11,"@stel @jpsim 
ok thanks!
",yushuyi,stel
4140,2016-10-01 03:53:24,"@austinzheng 
I find the detail info


",bawn,austinzheng
4140,2016-10-05 02:40:54,"@austinzheng Thanks, I will check my code
",bawn,austinzheng
4140,2016-10-05 03:20:20,"@austinzheng 

I am sure that I did not open a Realm before opening a Realm. 

A reproduction case:  My friend downloaded our app from AppStore and then crashed as soon as it was opened first time, and this problem can't be sloved until she uninstall App and redownload it. In general this problem sometimes occurs when the App starts

My code:






",bawn,austinzheng
4140,2016-10-10 13:04:17,"@bawn did you change your schema? If so you have to migrate your old date in your `config.migrationBlock` (now it looks like it's empty). See more about migrations in Docs: https://realm.io/docs/objc/latest/#migrations
",stel,bawn
4140,2016-10-11 03:04:58,"@stel @austinzheng  I think my issue duplicated as #3217, Thanks everyone.
",bawn,austinzheng
4140,2016-10-11 03:04:58,"@stel @austinzheng  I think my issue duplicated as #3217, Thanks everyone.
",bawn,stel
4136,2016-09-26 17:45:27,"@JeremyBec Swift requires all linked code to be built with the same Swift version. Looks like you're building your app with Swift 3.0, whereas you're building your pods with Swift 2.3 (from the contents of your Podfile). You'll need to pick one and stick with it.
",jpsim,JeremyBec
4135,2016-09-24 17:45:14,"`build.sh` is included in the `preserve_paths` member of both `Realm.podspec` and `RealmSwift.podspec`. @poolqf looks to me like this could be a CocoaPods bug.
",jpsim,poolqf
4135,2016-10-10 10:54:47,"Thanks @poolqf! Closing this because of https://github.com/CocoaPods/CocoaPods/issues/5922
",stel,poolqf
4132,2016-09-23 23:33:37,"@belakva can you share a sample project that triggers this issue?
",jpsim,belakva
4132,2016-09-26 11:52:20,"@jpsim unfortunately, no. It is hard to reproduce the issue - it might be, crashes like that happened before in our app from time to time, but only after heavy increase of interaction with Realm, we faced regular crashes. Our app uses Objective-C and ReactiveCocoa, and crashes appear usually in `RACScheduler` blocks. So I do not see the possibility of ripping off a part of an app to use as a sample project, sorry.

It is important to understand why Realm instance with wrong `thread_id()` is written to `NSMapTable`.
",belakva,jpsim
4129,2016-09-23 00:02:00,"@jpsim Thanks for the feedback. BTW, just wanted to say awesome with Realm. I really enjoy using it.
",tbeech,jpsim
4129,2016-09-23 00:14:52,"Glad you enjoy our product @tbeech!
",jpsim,tbeech
4128,2016-09-22 17:10:57,"So I narrowed it down a bit, and I tried printing type(of: obj)



^ And now that is exactly where the crash is.

So I'm a little confused how the stack trace went into object(_, forPrimaryKey)

@jpsim Here's the model:


",jpmcglone,jpsim
4128,2016-09-22 17:32:08,"@jpsim moving it to an extension on Object works! You are a hero. Thank you so much :)
",jpmcglone,jpsim
4127,2016-09-22 18:32:24,"@jmfieldman oh, thank you! That's correct. But if you follow the trace, you can see, that thread is not changed at any point. Or am I wrong here also?
",belakva,jmfieldman
4127,2016-09-22 18:35:39,"@tgoyne yes, but the Realm instance is get inside of this asynchroniously dispatched block.
",belakva,tgoyne
4122,2016-10-10 12:46:34,"@pkjijie you need to specify `objectClasses` property of your `RLMRealmConfiguration` for each realm, see more in Docs: https://realm.io/docs/objc/latest/#class-subsets
",stel,pkjijie
4122,2016-10-17 23:55:03,"Closing since @stel's last comment seems like the right suggestion to me, and we haven't heard back from @pkjijie in over a week.
",jpsim,stel
4122,2016-10-17 23:55:03,"Closing since @stel's last comment seems like the right suggestion to me, and we haven't heard back from @pkjijie in over a week.
",jpsim,pkjijie
4117,2016-09-19 20:56:46,"@kljajo could you please share more information? How are you building Realm? If you're using CocoaPods/Carthage/Xcode, what versions of everything are you using? What steps can we take to reproduce this?

There's a reason this information is requested in the new issue template. It's difficult for us to help you without that information.
",jpsim,kljajo
4117,2016-09-19 21:01:52,"@jpsim I am using CocoaPods version 0.39.0 with Xcode 8.
Just add realm via CocoaPods in your Swift 3 project. Build it, create an archive, export it for In-House distribution and put it on the device. App will crash on start with above stack trace.
Note that this does not happen with AppStore and AdHoc distributions.
",kljajo,jpsim
4117,2016-09-20 20:17:05,"Thanks for sharing that info, @kljajo. I think I have enough information to help you, now I just have to take the time to attempt to reproduce the problem so I can investigate further.

How critical is it for this to be fixed as soon as possible? Do you have a workaround?
",jpsim,kljajo
4117,2016-09-21 08:00:32,"Hi @jpsim . Unfortunately I don't have workaround. I am in the middle of the project which has to be delivered to the client before end of a month. I will have to convert the code without Realm if you perhaps don't have some workaround? Thanks.
",kljajo,jpsim
4117,2016-09-26 13:36:40,"hi @jpsim,
I have resolved the issue. The problem was with enterprise certificate not being properly generated by Developer portal. After I've revoked it and regenerated it, app can be started now with realm libraries included in the project.
",kljajo,jpsim
4116,2016-09-19 20:55:21,"@jpstern could you please share an Xcode project that reproduces this issue? Anything you can do to simplify us being able to trigger this ourselves will improve this odds of this being resolved quickly.
",jpsim,jpstern
4116,2016-09-24 19:40:16,"@francoisduchemin could you please share an Xcode project that reproduces this issue? Anything you can do to simplify us being able to trigger this ourselves will improve this odds of this being resolved quickly.
",jpsim,francoisduchemin
4116,2016-10-10 11:04:29,"Closing this issue, @francoisduchemin feel free to reopen it or create a new one if you need any other help.
",stel,francoisduchemin
4115,2016-09-27 12:54:01,"@austinzheng as you see, enumeration block does nothing with realm and crash happens in `beginWriteTransaction` method.
I try to avoid this crash right now, cause I think it may be my architecture fault. 
So, new version of my app and crashlytics will show the results of this changes.
",stephenkopylov,austinzheng
4114,2016-09-19 20:58:24,"Thanks for your continued work on this @JadenGeller. Hope school is going well!
",jpsim,JadenGeller
4112,2016-09-19 09:13:20,"@SandyChapman  @jegumhon  You need update your Pod to version 1.1.0.rc.2
I just test and it work
Link relate: https://github.com/realm/realm-cocoa/issues/4107
",HaLamUs,jegumhon
4112,2016-09-19 09:13:20,"@SandyChapman  @jegumhon  You need update your Pod to version 1.1.0.rc.2
I just test and it work
Link relate: https://github.com/realm/realm-cocoa/issues/4107
",HaLamUs,SandyChapman
4112,2016-09-19 15:02:55,"@DavidCMurphy @jegumhon : Can you guys try the workaround suggested and post if it worked for you?
",SandyChapman,DavidCMurphy
4112,2016-09-19 15:02:55,"@DavidCMurphy @jegumhon : Can you guys try the workaround suggested and post if it worked for you?
",SandyChapman,jegumhon
4112,2016-09-19 19:53:52,"@SandyChapman I appreciate you trying to share steps to reproduce, but they're incomplete.



I assume you'd need to run this in a directory with a `Gemfile` or `Gemfile.lock` installed based on the presence of `bundle exec` commands. What are the contents of this file? What else is necessary for someone to reproduce this error? And have you ruled out the possibility of this being a bug in CocoaPods?
",jpsim,SandyChapman
4112,2016-09-19 20:21:41,"@jpsim, will follow up in a couple hours with details.
",SandyChapman,jpsim
4112,2016-09-19 22:36:15,"@jpsim : so I'm not able to reproduce on my macbook. This is only happening on my build machine running in TeamCity. I'm going to continue investigating to see if I can figure out how to reproduce on my macbook.
",SandyChapman,jpsim
4112,2016-09-20 02:26:22,"@HaLamUs Thank u!! I tried to do following your suggestion. It works!!
@SandyChapman Did you check the pod version? I was confused to check the pod version.
Because there were two pod versions after installing pod 1.1.0.rc2.
So I removed the old pod version 1.0.1, then finally I got the Realm 1.1.0 with pod.
If you already did to check this out, probably your case may be different from mine.
I hope you solve your trouble as soon as possible.
",jegumhon,HaLamUs
4112,2016-09-20 02:26:22,"@HaLamUs Thank u!! I tried to do following your suggestion. It works!!
@SandyChapman Did you check the pod version? I was confused to check the pod version.
Because there were two pod versions after installing pod 1.1.0.rc2.
So I removed the old pod version 1.0.1, then finally I got the Realm 1.1.0 with pod.
If you already did to check this out, probably your case may be different from mine.
I hope you solve your trouble as soon as possible.
",jegumhon,SandyChapman
4112,2016-09-21 13:15:24,"@jpsim : looks like it's a cocoapods issue. I'm closing this. @DavidCMurphy , thanks for following up!
",SandyChapman,jpsim
4112,2016-09-21 13:15:24,"@jpsim : looks like it's a cocoapods issue. I'm closing this. @DavidCMurphy , thanks for following up!
",SandyChapman,DavidCMurphy
4111,2016-09-19 17:44:01,"A lazy `RealmCollection.map` would be immensely useful. I thought we were tracking that somewhere (maybe called ""projections""), but I can't find an issue for it at the moment.

One design issue with this is that we can't return a `Results` from this operation because many operations on `Results` wouldn't be available on this lazy collection (such as `filter`, `sum`, etc.).

@aschuch does renaming this ticket to ""Offer a lazy RealmCollection.map function"" accurately and sufficiently describe what you're proposing?
",jpsim,aschuch
4111,2016-09-19 18:26:22,"@jpsim Yes, that title describes this feature request much more accurately.
",aschuch,jpsim
4110,2016-09-19 05:13:32,"@runningJoey CocoaPods doesn't update automatically podspec master repo from version `1.0.0`. So you should do that explicitly. 


",kishikawakatsumi,runningJoey
4109,2016-09-19 17:14:15,"Thanks for the suggestions @aschuch! I tend to agree with you, but it's important to keep in mind that Realm is now 1.0 and we have a commitment to not break the API until the next major release. So I'm placing this in our ""Idea Backlog"".
",jpsim,aschuch
4108,2016-09-19 17:21:12,"Hi @jdanthinne, sorry you're experiencing this issue. You seem to have followed the installation instructions correctly. Although `--no-use-binaries` shouldn't be necessary since you've specified building from the `""master""` branch in your Cartfile.

Are you sure the ""Invalid Bundle"" error you're getting is caused by Realm? If you replace Realm with a different framework, do you still get this error?

Are you also sure that `$(SRCROOT)/Carthage/Build/iOS/Realm.framework` resolves to the correct location of your built `Realm.framework` product?

If you try to archive using `xcodebuild -scheme <SchemeName> archive`, could you please share the log output with us?

Thanks!
",jpsim,jdanthinne
4107,2016-09-19 20:47:59,"@aelam we have to close this since you neglected to fill out the new issue template. Please follow the instructions in https://realm.io/docs/swift/latest/#installation and https://realm.io/docs/swift/latest/#reinstalling-via-dependency-managers and reopen an issue taking care to fill out the entire issue template and we'll gladly take another look.
",jpsim,aelam
4106,2016-10-10 11:14:34,"@FedericoPaliotta did you resolve this issue? Can we close this issue or do you still need help?
",stel,FedericoPaliotta
4106,2016-10-10 12:48:03,"My apologizes, I got caught in this project and didn't take a minute to
follow this thread. I'm so sorry. 😔

The issue is still there, but we ended up decoupling the object that we use
with kingpin and the one we store in realm. So not exactly resolved the
issue itself, but feel free to close it on gitHub.

We tried all of the above suggested as well as what the documentation says.
In any case, we could not get it to work. It's really weird, even though we
create a new realm object each time we access an annotation object, and
even calling fictions like beginTransaction, commitTransaction and so on,
nothing seems to save us from that realm::IncorrectThreadException.

We were able to dig into kingpin's code (I can show you if you are
interested) and isolate the code where the exception raises, but we have no
clue of why that happen.

Thanks for your support.

Federico Paliotta

On Monday, October 10, 2016, Dmitry Obukhov notifications@github.com
wrote:

> @FedericoPaliotta https://github.com/FedericoPaliotta did you resolve
> this issue? Can we close this issue or do you still need help?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/realm/realm-cocoa/issues/4106#issuecomment-252589777,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/APJncUaq32GBZv-cRO06qxF6H7AUMKWEks5qyh4mgaJpZM4J_vyR
> .
",FedericoPaliotta,FedericoPaliotta
4106,2016-10-10 12:55:50,"@FedericoPaliotta thanks for your response! It would be great if you could provide some sample code that causes this exception for you, so we can try to help with this.
",stel,FedericoPaliotta
4106,2016-10-11 14:45:29,"Hi, unfortunately I’m not allowed to disclose any code for the actual
project I’m working on, but I’ve made this
https://github.com/FedericoPaliotta/RealmKingpin-IssueSample sample
project, replicating the same scenario causing the issue.

I didn’t had time to add the different kind of (non)solutions we tried. So
the code as it is in the sample project is just meant to cause the same
issue. But, the architecture needs to be like described, viewControllers
talk to a dataStore singleton which is in charge of requesting data from a
server an persist it in realm..

Let me know if you have any questions

Best,

Federico Paliotta

2016-10-10 8:56 GMT-04:00 Dmitry Obukhov notifications@github.com:

> @FedericoPaliotta https://github.com/FedericoPaliotta thanks for your
> response! It would be great if you could provide some sample code that
> causes this exception for you, so we can try to help with this.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/realm/realm-cocoa/issues/4106#issuecomment-252610599,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/APJncUMVMMCNpcTeGs0S7BTG5rqP7Xtwks5qyjXjgaJpZM4J_vyR
> .
",FedericoPaliotta,FedericoPaliotta
4106,2016-10-17 23:54:14,"Closing since @stel's last comment seems to have correctly diagnosed the problem and offered a solution.
",jpsim,stel
4106,2016-10-18 00:46:46,"That's cool. Thanks for your support! ;)

On Monday, October 17, 2016, JP Simard notifications@github.com wrote:

> Closing since @stel https://github.com/stel's last comment seems to
> have correctly diagnosed the problem and offered a solution.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/realm/realm-cocoa/issues/4106#issuecomment-254368131,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/APJncaJJl7-eBPdGbsxoK5pr3O7SkgtBks5q1AqzgaJpZM4J_vyR
> .
",FedericoPaliotta,stel
4105,2016-09-19 08:18:37,"@kishikawakatsumi would you expect the following to work:

Cartfile as:



and


",smebberson,kishikawakatsumi
4105,2016-09-19 08:53:41,"@smebberson Yes, it should work.
",kishikawakatsumi,smebberson
4105,2016-09-19 20:49:32,"I've added the `--no-use-binaries` argument to the Carthage installation instructions for Swift 2.3: https://realm.io/docs/swift/latest/#installation

> Any solution to do this in cocoadopds?

@PiotrStepien please follow the CocoaPods instructions described in https://realm.io/docs/swift/latest/#installation
",jpsim,PiotrStepien
4105,2016-09-20 02:13:59,"@kishikawakatsumi, that doesn't work. Only github `""ream/realm-cocoa"" ""master""` works...
",smebberson,kishikawakatsumi
4105,2016-09-20 16:30:30,"@smebberson that shouldn't be the case. `--no-use-binaries` builds from source and there have been no relevant changes on master since the 1.1.0 release (https://github.com/realm/realm-cocoa/compare/v1.1.0...master).
",jpsim,smebberson
4105,2016-09-21 02:29:54,"@jpsim, yeah, I agree. I already looked. It's strange. I guess I'm doing something wrong but I'm not sure what. Anyway, I've worked around it.

Thanks for your input.
",smebberson,jpsim
4101,2016-09-19 16:55:01,"@DenHeadless @DavidCMurphy if you're experiencing a problem, the only way Realm contributors will look at it is if there's an _open_ issue with clear steps to reproduce. So if you're still experiencing this problem, you should reopen this issue and someone will look into it.
",jpsim,DenHeadless
4101,2016-09-19 16:55:01,"@DenHeadless @DavidCMurphy if you're experiencing a problem, the only way Realm contributors will look at it is if there's an _open_ issue with clear steps to reproduce. So if you're still experiencing this problem, you should reopen this issue and someone will look into it.
",jpsim,DavidCMurphy
4101,2016-09-19 19:44:41,"@jpsim I think this issue is basically a duplicate of #4112 - error message is the same. So i think we should wait before opening a new one, since that issue has clear steps to reproduce.
",DenHeadless,jpsim
4101,2016-09-19 19:51:43,"Understood. Thanks @DenHeadless.
",jpsim,DenHeadless
4100,2016-09-16 17:18:14,"@bdrelling Realm Swift 1.0.2 was released about two months ago, before Swift 3 came out. You'll need to build from `master` to get a version that supports Swift 3. See https://github.com/realm/realm-cocoa/issues/3894#issuecomment-247423249 for temporary installation instructions until we release 1.1.0 later today.
",jpsim,bdrelling
4100,2016-09-16 18:42:12,"@jpsim Got it. I assumed the legacy version check would work. I can fortunately wait until later today, so not a huge deal.

Thanks for the support!
",bdrelling,jpsim
4099,2016-09-16 05:16:23,"@xspyhack Xcode 8 and Swift 3 compatible RealmSwift will be released soon. For now, you should specify `--no-use-binaries` option to avoid Carthage download pre-built binaries. Also specify `master` branch, and toolchain using Swift 3. 

So a Cartfile is:



carthage command and options are:


",kishikawakatsumi,xspyhack
4099,2016-09-19 01:29:33,"@liuxuan30 We've released `v1.1.0` already. https://github.com/realm/realm-cocoa/releases/tag/v1.1.0
",kishikawakatsumi,liuxuan30
4096,2016-09-15 18:14:23,"Thanks for reply @tgoyne 

In terms of the error handling, perhaps swallowing any exceptions on `Realm()` inside the method and returning nil in this case.  Thus `Dog(forPrimaryKey: ""x"")` is equivalent to `(try? Realm())?. object(ofType: Dog.self, forPrimaryKey: ""x"")` which in my opinion is a **huge** improvement in clarity and readability.
",tsheaff,tgoyne
4096,2016-09-15 18:53:11,"Thanks for sharing your thoughts and opinions @tsheaff!

---

The concept of the default Realm has the unfortunate side effect of introducing global mutable state and duplicate APIs pretty much everywhere in Realm's Objective-C API, and so we took the opportunity to redesign this when initially building Realm Swift. Language constraints also guided these decisions.

The reason `try? Realm())?. object(ofType: Dog.self, forPrimaryKey: ""x"")` looks verbose, unclear and illegible is _exactly_ why it was designed that way.

The `Dog(forPrimaryKey: ""x"")` syntax (very similar to Realm Objective-C):
1. doesn't scale well to using multiple Realms since it increases the API surface area.
2. encourages bad practices such as ignoring errors.
3. hides too much of the internals that are actually useful to know for end users like yourself.

---

That being said, you're always free to make extensions to Realm if you'd like to use a different syntax. Though I think the specific syntax you proposed isn't possible if defined on `Object` due to Swift's lack of higher kinded types.
",jpsim,tsheaff
4093,2016-09-14 20:25:06,"@Nykho looks like your submodules are out of date. `git submodule update --init --recursive`

@francoisduchemin looks like you're using different versions of Xcode and/or Swift to build Realm Swift and your app.
",jpsim,Nykho
4093,2016-09-14 20:25:06,"@Nykho looks like your submodules are out of date. `git submodule update --init --recursive`

@francoisduchemin looks like you're using different versions of Xcode and/or Swift to build Realm Swift and your app.
",jpsim,francoisduchemin
4093,2016-09-14 20:49:36,"*\* BUILD SUCCEEDED **

Thanks @jpsim !!!!
",Nykho,jpsim
4093,2016-09-14 21:43:58,"@jpsim For Carthage, just noting that `github 'realm/realm-cocoa'` in the `Cartfile` doesn't work. This is because the latest (precompiled) release, 1.0.2, was built with an older version of Swift.

EDIT: If you'd like, I can create an issue for this.
",cbh2000,jpsim
4092,2016-09-14 17:07:19,"@jpsim that's why it compiles with `Realm.framework` and not with `RealmSwift.framework`.

Can you please little bit explain or guide to some article on how can I set those `@rpath`s, because I'm in search about several hours on this issue.
",Jauzee,jpsim
4092,2016-09-14 17:14:40,"@jpsim I was build them from `master` branch with latest (0.18) version of Carthage and Xcode 8 GM.

[Mac.zip](https://github.com/realm/realm-cocoa/files/472855/Mac.zip)
",Jauzee,jpsim
4092,2017-03-27 20:58:44,"@ralcr Realm's equivalent to `momd` bundles are your `RLMObject`/`RealmSwift.Object` subclasses, so that's unrelated to your issue.

What (I'm guessing) you're having trouble with is that Realm Swift is only available as a dynamic framework, and CLI binaries on macOS are generally single binaries (not bundles like AppKit or UIKit apps), which means you can't inline dynamic frameworks into them. This means you need to set your rpath and dynamic linker flags very carefully, plus ship dynamic frameworks alongside your main CLI binary. This is tricky to do, but many existing projects have done so, such as Carthage, SwiftLint, SwiftGen, etc.

You can skip this difficulty by using Realm Objective-C's static framework distribution, which you _can_ inline into your CLI. You can use Realm Objective-C from Swift too.",jpsim,ralcr
4091,2016-09-16 09:51:50,"@jpsim thanks that helped!
",kgoedecke,jpsim
4089,2016-10-10 17:01:58,"Sorry for the delay in getting back to you @f3n1kc. Due to Realm's lazy loading semantics, removing properties from the model wouldn't affect the performance of synchronously querying for it.

Since you're using the results of the query to synchronously populate your UI, here are some of the things you can do to improve performance without having to rearchitect this part of your app:
1. Store your `TestItem`s in an already-sorted `List` property of another object. `List`s preserve their ordering, so the entire `Results` doesn't need to be sorted every time its contents change. Sorting 70k objects is likely the most expensive part of your benchmark. This would also mean you can drop the `index` property of your `TestItem` model, saving a small amount of space.
2. If you can't do no. 1, consider [indexing](https://realm.io/docs/swift/latest/#indexed-properties) the `index` property of your `TestItem` model. This will accelerate sorting based on this property.
3. Change the `TestItem.status` property from a `String` to an integer-backed enum. This likely won't have a significant impact on performance if sorting is the expensive operation, but will probably help a little.
4. Sort fewer objects. If you can ""shard"" the number of objects that need to be sorted by grouping them in ""sort groups"", you won't need to sort 70k objects. This should just be a last resort.

Really, you should just do option 1 in this list 😉. I added the other ones to be comprehensive and in the unlikely case that it's not possible for you to do.
",jpsim,f3n1kc
4089,2016-10-17 23:49:19,"@f3n1kc I'm closing this issue because we haven't heard back from you in the last week, but please let us know if what we've posted here helped, and if you have any further questions or suggestions!
",jpsim,f3n1kc
4087,2016-09-14 08:23:02,"@jdanthinne that was not obvious to me. Thank you!

****_BUILD SUCCEEDED**_*\* 

I suppose the Real team should update https://github.com/realm/realm-cocoa/blob/master/README.md or even https://github.com/realm/realm-cocoa/blob/master/build.sh 
",msamoylov,jdanthinne
4086,2016-09-14 16:49:44,"Thanks for filing this @FabianTerhorst. I'm a bit torn on this, since this is Swift's name spacing working ""as designed"", but obviously to have your code stop compiling because you `import RealmSwift` is obviously not ideal. On the other hand, renaming to `RealmSwift.RealmNotification` isn't terribly elegant either.

I'll discuss this with the team and report back with what we decide.

As far as I can tell, this is only an issue with `Notification`. Are there other types that collide with Foundation, AppKit or UIKit?
",jpsim,FabianTerhorst
4086,2016-09-14 18:10:57,"We're likely to nest `Notification` in `Realm`, but keep `RealmSwift.Error` at the top level, since it applies to the whole framework and can't really be nested, and shouldn't be renamed.

@FabianTerhorst I'll be closing this ticket now, you can follow progress on our Swift 3 API changes in #4078.
",jpsim,FabianTerhorst
4078,2016-09-13 01:44:50,"I have some recommendations: https://github.com/realm/realm-cocoa/compare/az/swift3apireview...jp/swift3apireview

I can make those edits directly on this branch if that's ok with @austinzheng.
",jpsim,austinzheng
4078,2016-09-13 15:04:01,"@jpsim That's absolutely fine with me. Same with anyone else who wants to push suggestions as additional commits.
",austinzheng,jpsim
4078,2016-09-13 15:07:37,"@austinzheng merged, thanks.
",jpsim,austinzheng
4078,2016-09-15 18:55:38,"@austinzheng @tgoyne @bdash I think this is ready to land.
",jpsim,austinzheng
4078,2016-09-15 18:55:38,"@austinzheng @tgoyne @bdash I think this is ready to land.
",jpsim,tgoyne
4077,2016-09-12 17:23:27,"Thanks for your help @puttin and @owenzhao!
",jpsim,puttin
4077,2016-09-12 17:23:27,"Thanks for your help @puttin and @owenzhao!
",jpsim,owenzhao
4075,2016-09-12 17:23:04,"We're tracking adding a nicer API alternative to KVO on RLMObject/Object in #3431. @crrobinson14 do you think this issue can be closed as a duplicate, or is there more that you'd like to see that isn't covered in #3431?
",jpsim,crrobinson14
4075,2016-09-12 17:25:10,"Sorry @jpsim, I searched the open issues before filing this but somehow missed that one. Long weekend I guess. This is clearly a duplicate. #3431 (and #4075) would 100% solve my use-case.
",crrobinson14,jpsim
4073,2016-09-09 17:22:44,"As @steveatinfincia mentioned, you need to let CocoaPods know that Realm's Git repository uses submodules. This will let you build Realm Swift from our master branch.

To answer the question in your title: we intend to make a release next week that includes support for both Swift 2.3 and Swift 3.0. Until that release we may make some small changes to our Swift 3 API to better fit with the changes to the Swift naming guidelines.
",bdash,steveatinfincia
4073,2016-09-10 16:59:57,"@puttin, you must explicitly specify both Realm and RealmSwift as dependencies when using a version of RealmSwift from Git. If you don't then CocoaPods will attempt to satisfy the Realm dependency with the most recent Realm release, which isn't necessarily compatible with RealmSwift from master:



@bitomule, are you using the Xcode 8 GM seed build (8A218a)? We made changes on master to be compatible with it earlier this week, which quite likely broke support for the earlier beta versions of Xcode 8. If you're not using the GM seed, please update and try again. If you are using it, please file a new issue with more details about what you're doing to see this.
",bdash,puttin
4073,2016-09-10 16:59:57,"@puttin, you must explicitly specify both Realm and RealmSwift as dependencies when using a version of RealmSwift from Git. If you don't then CocoaPods will attempt to satisfy the Realm dependency with the most recent Realm release, which isn't necessarily compatible with RealmSwift from master:



@bitomule, are you using the Xcode 8 GM seed build (8A218a)? We made changes on master to be compatible with it earlier this week, which quite likely broke support for the earlier beta versions of Xcode 8. If you're not using the GM seed, please update and try again. If you are using it, please file a new issue with more details about what you're doing to see this.
",bdash,bitomule
4073,2016-09-10 17:05:14,"@bdash It turns out my fault. I delete Xcode 8 beta 6 this morning but forget to update `xcode-select` to GM version.
",puttin,bdash
4073,2016-09-10 18:45:07,"@bdash thanks! using GM worked.
",bitomule,bdash
4071,2016-09-09 07:58:58,"Hi  @sehajc! Thanks for the report, and sorry to hear you're getting this intermittent crash

Could you please give us some more information on what your code is doing when this crash occurs? It looks like you're doing some work on a background thread; would you be able to post some snippets of that code so we can see how you've gone about implementing this?

Unfortunately, if this issue only happens intermittently and it's not possible to reliably trigger it, it's going to be very tricky for us to nail it down. The more information we can get about it, the better. :)

Thanks a lot!

_NB: Here's the top part of the stack trace so it's a bit quicker to see than downloading that text file:_


",TimOliver,sehajc
4071,2016-10-17 23:53:40,"Hi @sehajc, I'm just following up on @TimOliver's last comment. Have you seen this again since your initial report? Is there any more you could share that could help us reproduce this crash?

Specifically, if you've enabled logging support in Crashlytics, you should be able to recover the log and share the assertion failure that caused this, which may help shed some light on the situation.

Another thing to try is to upgrade to the latest version of Realm ([2.0.2](https://github.com/realm/realm-cocoa/releases/tag/v2.0.2) as of this writing) to see if this issue still occurs. Thanks!
",jpsim,TimOliver
4071,2016-10-17 23:53:40,"Hi @sehajc, I'm just following up on @TimOliver's last comment. Have you seen this again since your initial report? Is there any more you could share that could help us reproduce this crash?

Specifically, if you've enabled logging support in Crashlytics, you should be able to recover the log and share the assertion failure that caused this, which may help shed some light on the situation.

Another thing to try is to upgrade to the latest version of Realm ([2.0.2](https://github.com/realm/realm-cocoa/releases/tag/v2.0.2) as of this writing) to see if this issue still occurs. Thanks!
",jpsim,sehajc
4071,2016-10-20 20:38:43,"Hi @jpsim Sorry for the late reply. That was the only time I saw that crash. Haven't been able to replicate it.
",sehajc,jpsim
4069,2016-09-09 09:09:21,"I upgraded today to iOS 10 and compiled today and:

@bdash Could not cast value of type '__NSArrayI' (0x1b3c57cc8) to 'NSMutableArray'

Changed NSMutableArray to NSArray and it's fixed.
",unittesting0,bdash
4068,2016-09-08 09:51:16,"Thanks for the PR, @vincentsaluzzo! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,vincentsaluzzo
4068,2016-09-08 14:15:48,"Thanks for the pull request, @vincentsaluzzo. The changes to RealmSwift itself were already made in #4063. The remaining changes are similar to what is in #4044, which will need to be revised before it is landed.
",bdash,vincentsaluzzo
4066,2016-09-08 11:55:02,"@ytx0574 Realm doesn't support unsigned integer type yet. Please use signed int (like `NSInteger`, `int` or `long`) instead. It has been on the todo list for a while but low priority. It is tracked by https://github.com/realm/realm-cocoa/issues/651. 
",kishikawakatsumi,ytx0574
4065,2016-09-12 21:21:05,"Any ideas on how to resolve the `testRefresh` failure @tgoyne?
",jpsim,tgoyne
4065,2016-09-13 00:20:25,"The `testRefresh` failure seems fairly rare, I don't think it's necessary to address here.

@bdash / @tgoyne any further comments?
",jpsim,tgoyne
4065,2016-09-13 18:55:46,"Bump @tgoyne @bdash. Would like to get this in prior to landing Swift 3 API changes.
",jpsim,tgoyne
4063,2016-09-07 22:41:19,"@hsandhu `SWIFT_VERSION` _is_ set on `master` ([see Base.xcconfig](https://github.com/realm/realm-cocoa/blob/72a7123ec22677bba077fe9f5f6f2b467f821edd/Configuration/Base.xcconfig#L52)), are you sure you're actually targeting the tip of that branch, and that you don't have any stale built artifacts that might be confusing Xcode?
",jpsim,hsandhu
4063,2016-09-07 23:00:26,"@jpsim  Ah, so you are converting the project to Swift 3.0 and also the Realm Swift code to 3.0?
",hsandhu,jpsim
4062,2016-09-08 16:28:43,"@jpsim Feel free to close this if you still feel the same.
",JadenGeller,jpsim
4061,2016-10-10 10:41:22,"@jpmcglone did you resolve this issue? Please let us know if you need any other help or if we can close this issue, thanks!
",stel,jpmcglone
4061,2016-10-17 23:50:21,"Closing since we haven't heard back from @jpmcglone in a while.
",jpsim,jpmcglone
4060,2016-09-19 19:51:15,"@AlexWoe89 we don't actively monitor old issues, so please file a new issue, taking care to fill out the issue template, with full steps for us to reproduce, and we'll take a look.
",jpsim,AlexWoe89
4054,2016-09-08 06:33:19,"@sauvikatinnofied Thanks for the reporting! It seems that the Realm instance was deallocating while write transaction. Could you show your code around saving objects to Realm for investigation? For example `BLEStepServicesRealm.addNewBLEStepInBackground()` etc.
",kishikawakatsumi,sauvikatinnofied
4054,2016-09-08 10:55:53,"@kishikawakatsumi Thank you very much for looking into the issue, here are the code snippets for better debugging purposes. _I would also like to inform you that, a step info `UserStepsDTO` is also to be saved in background (even when the phone is locked and passcode protected)._


",sauvikatinnofied,kishikawakatsumi
4054,2016-09-15 15:49:54,"@kishikawakatsumi Did you get a chance to get back to this issue? My application is using `Realm` storage even when the app is in background and phone is locked by passcode. I have seen another issue https://github.com/realm/realm-cocoa/issues/3812 which causes crash.  Earlier I have seen this issue but after adding `NSFileProtectionNone` to `Docuement` directory with the following code



I was not able to reproduce the issue. I am not sure about any connection in between these two issues.
",sauvikatinnofied,kishikawakatsumi
4054,2016-10-04 11:21:36,"@sauvikatinnofied Sorry for the late reply. Specifying `NSFileProtectionNone` seems fine.

The crash occurred due to the Realm instance was deallocating while transaction. Did you use the `realm` instance in `addOrReplaceBulkBLEStepInBackground ()` after `Utility.dispatchAsyncInMain()`?
",kishikawakatsumi,sauvikatinnofied
4054,2016-10-12 15:43:35,"@kishikawakatsumi Yes, there might be some **Realm** transaction code which is being executed in the `completionBlock (RealmUpdateCompletionBlock)`. Will you please let me know, what will be the best practice to do more operation on **Realm** on the completion block on another operation? I am using the following `GCD` technique to do that.


",sauvikatinnofied,kishikawakatsumi
4054,2016-10-17 21:06:33,"Hi @sauvikatinnofied, yes using GCD is certainly our recommended way to perform asynchronous operations in Realm.

I'll be closing this issue now because I believe we've addressed all your questions, but feel free to open a new issue if anything else comes up!
",jpsim,sauvikatinnofied
4051,2016-09-06 19:10:17,"@cooler333 FYI, it's okay to use implicitly unwrapped optionals, but you ought to make sure they are not `nil` before passing them as an argument to a function. It is the burden of the caller, who is providing this unsafe value, to make sure that it is not `nil`.
",JadenGeller,cooler333
4050,2016-09-06 16:13:51,"@ilyakooo0 `extension List where Element: Comparable { … }` should do the trick!
",JadenGeller,ilyakooo0
4044,2016-09-01 22:09:05,"@JadenGeller, I'm not sure there's a good way to have separate Swift 2.x and Swift 3 example code, particularly if we want it to work with Xcode 8. The example code workspace pulls in the Realm Xcode project, which will defaults to building everything with Swift 3. This means that the Swift 2.x example code would be broken out of the box on Xcode 8. Conditional compilation at least means that the example code would compile, but the user would need to tweak the Xcode setting to build the Swift 2.3 code path.
",bdash,JadenGeller
4044,2016-09-01 22:10:17,"@bdash I see. We could split the _entire_ file into Swift 2 and Swift 3 sections (like our codebase), but it's not clear to me that that is better. :/
",JadenGeller,bdash
4044,2016-09-01 22:10:44,"> This is in the `realm-cocoa/examples/ios/swift-2.2/` directory. Seems a bit weird to support Swift 3 here. Also, given that this is a getting started document, maybe it'd make sense to have separate ones for Swift 2 and Swift 3? The #if blocks make the code a lot less friendly to beginners.

Yes. To do this right, we should duplicate the `swift-2.2` into a `swift-3.0` directory and update all the examples to Swift 3 in there. Also probably rename `swift-2.2` to `swift-2.x` since it should support 2.3 too.

Despite @bdash's last comment, I do think that we'd need to split it up, assuming we intend to include both Swift 2 & Swift 3 binaries in our release zips when Xcode 8 GM comes out.
",jpsim,bdash
4043,2016-09-06 11:38:54,"@jpsim, this fix doesn't work... I've cleaned carthage cache and tried to build this branch:

> **\* Building scheme ""Realm"" in Realm.xcworkspace
> **\* Building scheme ""RealmSwift"" in Realm.xcworkspace
> **\* Building scheme ""PlaygroundFrameworkWrapper"" in RealmExamples.xcworkspace
> *\* CLEAN FAILED **
> 
> The following build commands failed:
>         Check dependencies
> (1 failure)
> *\* BUILD FAILED **
> 
> The following build commands failed:
>         Check dependencies
> (1 failure)
> warning: no umbrella header found for target 'PlaygroundFrameworkWrapper', module map will not be generated
> warning: no umbrella header found for target 'PlaygroundFrameworkWrapper', module map will not be generated
> A shell task (/usr/bin/xcrun xcodebuild -workspace /.../Carthage/Checkouts/realm-cocoa/examples/ios/swift-2.2/RealmExamples.xcworkspace -scheme PlaygroundFrameworkWrapper -configuration Release -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES clean build) failed with exit code 65:
> *\* CLEAN FAILED **
> 
> The following build commands failed:
>         Check dependencies
> (1 failure)
> *\* BUILD FAILED **
> 
> The following build commands failed:
>         Check dependencies
> (1 failure)

New .xcworkspace is recognised successfully but `RealmExamples.xcworkspace` is recognised too since it contains shared frameworks scheme, I suppose.

I really need this stuff cause I'm using Xcode 8, so complied binaries are not compatible for me.
",plasmLC,jpsim
4043,2016-09-13 02:28:10,"Thanks @jpsim!
",kevinmlong,jpsim
4043,2016-09-13 02:56:40,"@kevinmlong this branch should work now.
",jpsim,kevinmlong
4043,2016-09-13 02:57:15,"@bdash unsharing the PlaygroundFrameworkWrapper scheme is the best solution I found. Care to review again?
",jpsim,bdash
4043,2016-09-13 03:13:11,"Thanks again @jpsim - what's the likelihood a Swift 3 release will be provided soon?
",kevinmlong,jpsim
4043,2016-09-14 01:27:14,"Thanks @jpsim for the links above! 
",kevinmlong,jpsim
4040,2016-09-01 20:42:21,"@danielrhodes The `core` directory isn't a submodule. It's the `Realm/ObjectStore` directory that is. You shouldn't need to pull though (in fact, this might cause build issues). In the root of the repo (not the `Realm/ObjectStore` directory), run `git submodule update --init`.
",JadenGeller,danielrhodes
4040,2016-09-01 21:15:16,"@danielrhodes, can you try blowing away your derived data directory to make sure a stale version of Realm.framework isn't somehow involved? If it still fails after that can you then share the full build log from Xcode's Report navigator (the full output likely contains clues that'll help us understand what's different about your environment).
",bdash,danielrhodes
4039,2016-09-01 19:09:32,"@tgoyne It's unfortunate that this makes debugging with breakpoints much more difficult though.

Edit: Guess it is possible to comment out the if block and run _only_ that test to debug. :shrug:
",JadenGeller,tgoyne
4038,2016-09-01 18:31:43,"@liufsd Don't run the migrator. Everything should work property. There's a bug in the Swift migrator where it will try to also migrate code in the _else_ section of `#if swift(>3) #else #endif` blocks.
",JadenGeller,liufsd
4038,2016-09-02 00:33:54,"@liufsd Are you still having issues getting it to build? Don't convert any of _Realm_'s code.
",JadenGeller,liufsd
4038,2016-09-15 18:35:48,"Awesome, thanks for all the hard work @jpsim and team
",tsheaff,jpsim
4038,2016-09-18 12:52:16,"@ogezue
mac:  https://github.com/liufsd/PhotoCloud/blob/master/Cartfile
ios:  put this in your Podfile


",liufsd,ogezue
4038,2016-09-18 13:12:03,"@ogezue you can see doc here: https://realm.io/docs/swift/latest/
",liufsd,ogezue
4034,2016-09-01 00:34:38,"@jpsim Good catch. Looks like it's failing because the exception message changed. I'll update the test.
",JadenGeller,jpsim
4031,2016-09-01 22:48:20,"Done. Ready again for review @jpsim @bdash 
",JadenGeller,jpsim
4030,2016-09-01 23:14:14,"@stoprocent, thanks for the bug report!

My initial suspicion is that the ""leaked"" objects are ending up in autorelease pools in background threads or queues that are not being drained in a timely manner. You could determine whether this is the case by adding an explicit autorelease pool of your own around the invocation of the block passed to `CFRunLoopPerformBlock`.

If an autorelease pool doesn't help, would you be able to share a slightly more complete code sample so we can reproduce the problem you're seeing?
",bdash,stoprocent
4030,2016-10-17 23:50:00,"@stoprocent just following up on @bdash's request for more information and a more complete code sample or Xcode project to help us reproduce this leak. Thanks!
",jpsim,bdash
4030,2016-10-17 23:50:00,"@stoprocent just following up on @bdash's request for more information and a more complete code sample or Xcode project to help us reproduce this leak. Thanks!
",jpsim,stoprocent
4029,2016-09-08 23:35:59,"Agreed with @tgoyne.
",jpsim,tgoyne
4028,2016-08-31 04:22:50,"@LeffelMania, in the past we've seen similar errors when an application exits while a thread is actively writing to a Realm. The Fabric link you provided only shows the crash log for a single instance of the crash so it's difficult to tell one way or another if this is what is happening here. Does this seem like something your app could be doing?  Do you have access to more than the single crash log I can see?
",bdash,LeffelMania
4028,2016-08-31 17:12:33,"@bdash I'm not sure I can get you access to the full set of crash reports, but that definitely sounds like something that can happen with our app. Other instances of the crash I'm able to view do seem to be writing on other threads when this occurs.

Other thread activity from another report:
Thread 2



Thread 8



Thread 11



So I feel like that's probably the issue. Is there a clean way to tell Realm ""Stop whatever you're doing on all threads right now"" in our `applicationWillTerminate:` method?
",LeffelMania,bdash
4028,2016-09-08 07:22:57,"Hi @bdash @mrackwitz 
We are seeing same type crashes in the same context (during application termination) as described above. I can share more logs if needed.
",vlntb,bdash
4021,2016-08-29 23:17:21,"@jpsim I just tried using `master` and it built fine using Xcode 8.
However, the problem is that you cannot import a framework compiled using Swift 3.0 in another framework or app that is compiling for Swift 2.3.

I'm unsure if the opposite is possible though...

That said, I'll attempt to convert our codebase and get a sense of how much work is required to get everything working in Swift 3.0 and then we'll be able to start using the master branch.

Thanks for your prompt response @jpsim, as always!
",bsarrazin,jpsim
4021,2016-08-29 23:20:15,"> However, the problem is that you cannot import a framework compiled using Swift 3.0 in another framework or app that is compiling for Swift 2.3.

You're right, it's not possible. But it's also not possible to specify more than one ""default"" Swift version to use in an Xcode project, so `Realm.xcodeproj` can't say ""just use whatever Swift version the client project is using"". So you'd need to modify that yourself ([`SWIFT_VERSION=2.3`](https://github.com/realm/realm-cocoa/blob/50c1effdec86bcc9a09fe66dc1bd090a303ea1d0/Configuration/Base.xcconfig#L50-L52)). It's just one thing to change.

> Thanks for your prompt response @jpsim, as always!

Happy to help.
",jpsim,jpsim
4021,2016-09-13 21:18:52,"@jpsim Thank you, it works! 👍 
",tpae,jpsim
4021,2016-09-26 14:56:00,"@alanshih if you follow [these instructions](https://realm.io/docs/swift/latest/#cocoapods-install) you should be able to use 2.3 without any problems.
Are there any reasons why you're using the `master` branch?
",bsarrazin,alanshih
4021,2016-09-26 15:33:25,"@bensarz I was just following the instructions from @jpsim above. I deleted the Pods folder and then followed the instructions and did an install. I am still getting the same issue 72 missing files warning and 2 errors ""Umbrella header 'Realm.h' not found"" and ""Could not build Objective-C module 'Realm'""
",alanshih,jpsim
4021,2016-09-26 15:40:18,"@alanshih I opened this issue when Xcode 8 wasn't released officially and Realm hadn't released 1.1.0 yet. So I'd say, unless you _require_ using the `master` branch, I'd try to use the latest release instead.
",bsarrazin,alanshih
4021,2016-09-26 17:43:47,"@alanshih please file a new issue with full details on your configuration and steps for us to reproduce and we'll gladly take a closer look.
",jpsim,alanshih
4021,2016-11-23 03:18:01,"@springhand 0.98.2 of the Realm and RealmSwift pods were released over 9 months ago, before Swift 2.3 was a thing. Please update your CocoaPods specs (`pod repo update`) to get the latest versions of our libraries (2.1.0 as of this writing).

In the future, please file new issues rather than commenting on months-old closed issues to make sure we don't miss your request!",jpsim,springhand
4005,2016-08-26 01:21:44,"@JadenGeller Many thanks. `type(of: self).init()` and `Self` works fine!
",owenzhao,JadenGeller
4005,2017-03-09 01:01:44,"@santhoshs5 Realm object's `init(value:)` initializer can accept a KVC-compliant value that responds to all the required property keys, you can pass a managed object to the initializer to make an unmanaged copy, and vice-versa.",jpsim,santhoshs5
4004,2016-09-01 05:54:08,"@narup I have the same issue on production. I reproduced bug by installing old version from Fabric, then installing new app from AppStore. 

My error looks like this:



I use custom path for database:



And make migration at `didFinishLaunchingWithOptions` method:



On first migration everything worked fine, but when I made second migration on this week crashes occurred for users who already had app.
",chika-kasymov,narup
4002,2016-08-24 19:25:33,"@jpsim 
Oh! thx a lot jpsim, you save my life!
just, the first one, Cannot convert value of type 'AnyObject?' to specified type '[List<Descriptions>]'

Maybe it should be
let descriptions = try! Realm().objects(Tasks.self).valueForKeyPath(""descriptions"") as? [List<Descriptions>]
",whisper-bye,jpsim
4000,2016-08-24 03:58:57,"Hi @sonysum, you haven't provided sufficient information to explain what you're doing, what you expect to happen, what's actually happening, and how we can reproduce the behavior you're seeing. Please file a new issue taking care to fill out the issue template and we'll be happy to help.
",jpsim,sonysum
3998,2016-08-23 21:34:38,"No, there's no clean up to be had. That's what @tgoyne and I are trying to say.
",jpsim,tgoyne
3994,2016-08-23 18:04:28,"Hi @MihaelIsaev, what's happening here is that the `quantity` property isn't included in `ignoredProperties()` to let Realm know not to persist it, but it also isn't marked `dynamic`, which enables Realm to manage the property.

So it's in this in-between state that isn't supported. I suggest you mark the property as ignored:



Note that `Object`'s default `description` doesn't include ignored properties, so to print it, you'll need to override that:



Then if I run your sample, I'll get the following log:


",jpsim,MihaelIsaev
3993,2016-08-23 18:38:22,"Hi @eigo0109, if this bug is so easy to trigger, could you please share a project that reproduces this? We've never seen the behavior you're experiencing.
",jpsim,eigo0109
3993,2016-08-26 21:17:41,"@eigo0109 we'd love to work with you on this.
",jpsim,eigo0109
3993,2016-08-30 05:54:31,"thank u @jpsim. In the latest version, we don't find this problem again.
",eigo0109,jpsim
3988,2016-08-22 18:31:09,"@bdash @jpsim I wonder if it would be worthwhile to rename `Realm.framework` to `RealmObjC.framework`?
",JadenGeller,bdash
3986,2016-08-19 06:57:00,"@bdash Sorry, but i don't understand. What i need to do?
 I commented this 1 property now. But when i uncomment it, i had this error.
",NBibikov,bdash
3986,2016-08-19 07:10:11,"@bdash thank you very much! Yes, your advice working for me! I added check before set and in some cases server return 0;
",NBibikov,bdash
3985,2016-08-22 20:50:08,"@ashokds did my suggestion work for you?
",jpsim,ashokds
3985,2016-08-22 22:37:38,"@jpsim, Just tried the mirrored settings based on podfile edit you did, i.e. use both pods as per your comment. It's not working yet. Same error: 


",ashokds,jpsim
3985,2016-08-22 22:43:20,"@ashokds, what's the error? `sh build.sh cocoapods-setup` is a normal part of the installation process.
",jpsim,ashokds
3982,2016-08-18 15:51:44,"@ranjitDhiman1990 please check JSON section in [Docs](https://realm.io/docs/swift/latest/#json), there is an example how to create Realm objects from a `JSON`. Also check [this list of useful frameworks](https://github.com/realm/realm-cocoa/issues/694#issuecomment-144785299).

Let us know if it helped and feel free to ask any specific questions!
",stel,ranjitDhiman1990
3982,2016-08-22 20:49:43,"Closing since I think @stel's answer sufficiently covers this.
",jpsim,stel
3981,2016-08-18 18:21:48,"@jpsim FYI, I don't necessarily feel strongly about this, just thought it was worth bringing up given we're making breaking changes. It does seem safer, but I admit it's a simplicity tradeoff.

That said, a user who writes



would probably be confused by the error message (""Generic parameter 'U' could not be inferred""), so it isn't clear to me that this API is simpler.
",JadenGeller,jpsim
3980,2016-08-18 15:40:05,"@bdash Added tests.
",JadenGeller,bdash
3979,2016-08-18 18:23:35,"@bdash Tests added. They're pretty minimal though, so please let me know how they can be improved if not sufficient. They simply create, assign to, and check the values of a single object with ""NS"" properties.
https://github.com/realm/realm-cocoa/pull/3979/files#diff-4a648b27490fbca90dcbb4ebcee638e8R125
",JadenGeller,bdash
3979,2016-08-18 20:32:07,"@JadenGeller, the tests you added are for `NSDate` and friends on a Swift subclass of `RLMObject`. I don't see any for `NSDate` on a subclass of `Object`?
",bdash,JadenGeller
3979,2016-08-18 21:52:00,"@bdash That's true. We also don't have any tests of `NSString` on a subclass of `Object`, so I followed that lead. Are `RLMObject` vs `Object` models parsed differently?
",JadenGeller,bdash
3979,2016-08-19 22:50:46,"@bdash You're right, I remembered incorrectly. I added a similar test to Realm Swift. Let me know if this is sufficient.
",JadenGeller,bdash
3977,2016-08-18 14:12:36,"@hjuraev Now that https://github.com/realm/realm-cocoa/pull/3965 is merged into master, is it working for you?
",JadenGeller,hjuraev
3977,2016-08-22 20:49:13,"Closing assuming this works since it was working for @hjuraev it the `jg-swift-3-beta-6` branch.
",jpsim,hjuraev
3968,2016-08-17 23:56:27,"Done in #3965 for both Realm Swift & Realm Objective-C, @JadenGeller?
",jpsim,JadenGeller
3965,2016-08-17 13:21:06,"Hey @JadenGeller is there anyway I can build realm from this PR or is it better if I wait for it to be merged? I get a lot C++ issues when I try to build from this branch (maybe I am missing some steps during my build process?). 

Anyway, sorry for generating noise here.
",raphaelcruzeiro,JadenGeller
3965,2016-08-17 17:54:15,"@raphaelcruzeiro You should be able to build from this branch. Note that we've moved the [Object Store](https://github.com/realm/realm-object-store) to a submodule, so you'll need to `git submodule update` after checking out the branch.
",JadenGeller,raphaelcruzeiro
3964,2016-08-16 10:13:43,"Thanks for the PR, @uny! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,uny
3964,2016-08-16 17:22:07,"Thanks for your contribution @uny! We've actually already started working on migrating to the newest Swift beta (https://github.com/realm/realm-cocoa/pull/3965), but I appreciate your help. :)
",JadenGeller,uny
3963,2016-08-17 08:18:17,"Thanks for that info, @jpmcglone! All code samples you sent looks good to me and shouldn't lead to retain cycle. Can you make a test Xcode project to reproduce this issue?

It's hard to make any suggestions as I don't see all your code, but when you declare `chats` as `var chats = [Chat]()` it means that the number of cells in table view is 0 and no delegate methods get called, so I would recommend to start the investigation from there.
",stel,jpmcglone
3963,2016-08-18 06:18:49,"@stel !!! The problem wasn't realm at all! It was a library I was using that caused a retain cycle. I was only calling the line that had that leak IF there was a chat in the list >_<

Closing. Thanks for the help!
",jpmcglone,stel
3963,2016-08-18 10:41:29,"Happy to hear that you resolved that issue, @jpmcglone!
",stel,jpmcglone
3962,2016-08-17 23:12:57,"@sprint84 Try building with master now! It's merged.
",JadenGeller,sprint84
3961,2016-08-15 16:17:09,"@kaspermunck could you please test against the tip of `master` and let us know if you're still seeing this issue or if it's been resolved? If using CocoaPods, update your Podfile to the following:


",jpsim,kaspermunck
3961,2016-08-16 06:54:16,"@jpsim I ran my sample project against the tip of `master` and could not reproduce the problem. I.e. the exception is caught as expected.
",kaspermunck,jpsim
3961,2016-08-16 08:59:22,"Awesome! Thanks @kaspermunck!
",stel,kaspermunck
3960,2016-08-15 08:07:35,"Thanks for that report, @superzcj!

Do you experience this issue if you perform **Clean** or **Clean Build Directory** in Xcode?
",stel,superzcj
3959,2016-08-16 16:54:52,"@anthonycastelli, can you please share more of your build log? The portion of the output you've shared seems likely to be the result of earlier errors.
",bdash,anthonycastelli
3959,2016-08-18 09:35:24,"@anthonycastelli could you please provide some instructions that helped you resolve this issue? Thanks!
",stel,anthonycastelli
3958,2016-08-15 16:12:57,"Glad to hear @bdash's comment cleared this up for you @ashvar!
",jpsim,bdash
3958,2016-08-15 16:12:57,"Glad to hear @bdash's comment cleared this up for you @ashvar!
",jpsim,ashvar
3957,2016-08-12 15:26:33,"Hi @peterlondon1, inverse relationships aren't actually stored in the Realm file anywhere. They're just established at runtime as a convenient way to represent already existing relationships from the other direction.

So the Realm Browser doesn't know anything about them. Since it could be possible to expose a user interface in the browser to allow setting up inverse relationships, I've created an issue for you tracking that: realm/realm-browser-osx#194. Let's continue the conversation about this there.

Note that I created that issue in the Realm Browser's issue tracker, which you should use in the future. This issue tracker is reserved for the Realm Objective-C and Realm Swift SDKs.
",jpsim,peterlondon1
3953,2016-08-11 14:50:42,"@AyeChanPyaeSone I answered on Stack Overflow. I'll close this issue because Q&A is more appropriate on SO rather than GitHub issues.
",kishikawakatsumi,AyeChanPyaeSone
3951,2016-08-09 22:58:16,"@bdash That was exactly what I was overlooking, I kept the old precompiled framework in the project directory and never removed it from the search path so that seemed to of caused the issues. 

Seems to be working now.
",anthonycastelli,bdash
3950,2016-10-24 19:53:07,"@LiamInJapan please file a new issue if you'd like us to help you.
",jpsim,LiamInJapan
3948,2016-08-09 16:34:50,"Thanks for the report, @josete89. We're tracking this issue in #2933. Our best understanding is that this is a bug in the Swift runtime, rather than in Realm itself.
",bdash,josete89
3947,2016-08-09 16:18:59,"Thanks for the report, @raphaelcruzeiro. #3949 will fix this.
",bdash,raphaelcruzeiro
3946,2016-11-16 05:32:02,"@RashmiZK I can't provide an estimate at this time, as everyone on the team is busy with other things.
",jpsim,RashmiZK
3946,2016-12-14 02:04:08,@bdash @tgoyne I've revived this PR and addressed a number of little issues here and there but I'd love to get your eyes on this again.,jpsim,bdash
3946,2016-12-15 00:38:50,@jpsim Isn't this the older version of the API? I think the one we settled on is here. https://github.com/realm/realm-cocoa/pull/4114 I must have overlooked closing this PR.,JadenGeller,jpsim
3944,2016-08-07 21:14:22,"@bdash That was it! thanks so much and sorry for the false alarm.
",raphaelcruzeiro,bdash
3942,2016-08-15 16:20:59,"Thanks for the update @ntokozotep, and sorry for the trouble.
",jpsim,ntokozotep
3940,2016-08-04 21:39:29,"Thanks for the bug report, @AlexLardschneider! I was able to reproduce this issue myself by modifying our PreloadedData example project to set up the configuration in the manner you described.

The issue is caused by specifying two mutually exclusive options in the configuration:



Prior to #3937, `deleteRealmIfMigrationNeeded` was ignored if `readOnly` was true. Now the properties change the same internal state, so the last set value takes precedence. This results in the request to open the Realm as read-only is being ignored. This change in behavior doesn't appear to have been intentional.

Since we cannot meaningfully honor `deleteRealmIfMigrationNeeded` if we've been asked to treat the Realm as read-only, you can avoid the exception you're seeing by not setting both options.
",bdash,AlexLardschneider
3940,2016-08-31 19:03:47,"@bdash Should the exception be thrown when setting the property or when the user tries to create a Realm from the configuration? I think the latter sounds more reasonable, but it requires changing how configuration works (ivar-backed properties like the Swift one rather than mutating a backing `realm::Realm::Config`.
",JadenGeller,bdash
3939,2016-08-03 02:34:52,"Hi @Alamoz, can you provide a little more detail about the problem you're having? You say that a Realm file in your app bundle isn't being copied to the device. How are you verifying that it was not copied to the device?
",bdash,Alamoz
3938,2016-08-05 21:34:13,"Hi @zoufishanmehdi, could you please send us a sample Xcode project with all its dependencies, so that we can compile/run/debug that on our end rather than attempt to recreate a similar project that might end up not behaving the same behavior as you're seeing? Thanks!
",jpsim,zoufishanmehdi
3938,2016-08-05 21:56:40,"Hi @jpsim I can email it to you, so you can compile it. It's supposed to be a private repo. Thanks!
",zoufishanmehdi,jpsim
3938,2016-08-05 21:58:39,"@austinzheng @jpsim Thank you so much! I will send it over. 
",zoufishanmehdi,austinzheng
3938,2016-08-05 21:58:39,"@austinzheng @jpsim Thank you so much! I will send it over. 
",zoufishanmehdi,jpsim
3938,2016-08-22 20:48:43,"Closing since we're continuing this via email and it's extremely specific to @zoufishanmehdi's app.
",jpsim,zoufishanmehdi
3936,2016-08-03 17:12:29,"Yes, as @Kirow mentions notifications seem like the solution for this problem. In particular, [Collection Notifications](https://realm.io/docs/objc/latest/#collection-notifications) allow you to perform a query that will evaluate its results in a background thread and then provides them to your main thread. You will also be notified when the results of the query change in the future so you can keep your UI up to date.
",bdash,Kirow
3936,2016-08-05 21:22:26,"We can't take the code you shared in your last comment and adapt it to work across threads, because it's explicitly violating Realm's thread confinement rules. However, your initial comment shares what you're actually trying to accomplish, and that can certainly be done with the [collection notifications](https://realm.io/docs/objc/latest/#collection-notifications) that @bdash suggested above.

> The issue is I am initialising an RLMResult object onto main thread and filling it into background thread and after that whenever needed I am accessing it onto main thread and my app crashes at that time.

So instead of placing Realm objects obtained from a background thread in an `NSMutableArray` to be accessed on the main thread, you should use this pattern:


",jpsim,bdash
3936,2016-08-09 06:34:14,"@jpsim I think you misunderstood my question. I am not trying to add values to database model, I am trying to fill RLMResult object from my database model, so there is no need for Realm transaction.
And I don't need collection notification in particularly my case because there no need to update UI after RLMResult objects has been filled.
What I want to achieve is when my RLMResult object is filled I want that object as a datasource option for one of picker in my form and I want to fill all those RLMResult objects into background so my form loads quickly.

Thanks
",prgorasiya,jpsim
3936,2016-08-09 17:00:50,"> I am trying to fill RLMResult object from my database model, so there is no need for Realm transaction.

`RLMResults` are entirely read-only. They're views into the underlying data, usually backed by queries. So the only way to modify them (e.g. ""fill"" them) would be to make Realm transactions, which is why @bdash and I have proposed the solutions mentioned above.

I strongly encourage you to read our documentation on [Writes](https://realm.io/docs/objc/latest/#writes), [Queries](https://realm.io/docs/objc/latest/#queries) and [RLMResults](https://realm.io/docs/objc/latest/api/Classes/RLMResults.html).
",jpsim,bdash
3936,2016-08-22 20:48:16,"Closing since we haven't heard back from @prgorasiya for a few weeks.
",jpsim,prgorasiya
3933,2016-08-15 07:02:00,"I'll close this issue for now due to of inactivity. @VenuKotha if you can provide some more info please feel free to reopen this issue, thanks!
",kishikawakatsumi,VenuKotha
3932,2016-08-03 17:45:53,"@austinzheng thank you for the support, I've managed to use Realm with Cocoapods and Xcode beta 4
",dodomarocgenex,austinzheng
3932,2016-08-09 19:27:23,"@anthonycastelli, it's probably best to file a new issue with details of the problem you're seeing so we can help you.
",bdash,anthonycastelli
3932,2016-08-09 19:38:36,"@bdash Thats what I plan on doing soon as I get home. I thought maybe @dodomaroc86 had a few ideas since he got his working. 
",anthonycastelli,bdash
3932,2016-08-09 21:11:17,"@anthonycastelli This video from @jpsim  may help https://static.realm.io/debug/realm-swift-xcode8b4.mp4
",dodomarocgenex,anthonycastelli
3931,2016-08-05 21:31:45,"Thanks for sharing this @yangmeyer. I could reproduce this easily with your instructions. I've labeled this as a bug and hopefully we can resolve quickly.
",jpsim,yangmeyer
3930,2016-08-02 03:59:32,"Actually what I was doing is I am inserting my title from another view controller i.e. from the addViewController and I am inserting postID when I tap on share button from the tableViewCell.



This is the code where I used the tableRowActionStyle method  from which I am trying to insert the postId into the same row of that cell title.

Is this information could help you to solve my problem. Thank you!
@austinzheng 
",shahinali5678,austinzheng
3930,2016-08-22 20:47:33,"Closing since we haven't heard back from @shahinali5678 for a few weeks.
",jpsim,shahinali5678
3928,2016-08-01 18:08:57,"Hi @sainttail, usage of `NSInteger` is fine, since Realm only has a single representation for all integer widths, whereas it uses separate representations for different floating point widths.
",jpsim,sainttail
3928,2016-08-01 18:56:16,"@bdash My usage is very simple. Not right that scenario but I just want to know the best practice that should I declare type explicitly like `int` and `long` or use `NSInteger`
",sainttail,bdash
3928,2016-08-01 19:05:22,"Excellent! If the situation @bdash described above doesn't apply to your use case, feel free to choose whichever convention you prefer.
",austinzheng,bdash
3926,2016-08-03 17:39:21,"This is expected behavior. `id` is a valid property name in Objective-C, despite Xcode's syntax highlighting hinting otherwise.

@skarctop when you make changes to your schema like adding a primary key, you need to increase the schema version number and perform a migration. That's what the exception message is telling you to do.

In the case of primary keys, you'll need to make sure that all objects of that model has a unique value for that property. Realm can't guess what values those should be, so you need to do this explicitly.

You can learn more about migrations in our docs: https://realm.io/docs/objc/latest/#migrations
",jpsim,skarctop
3926,2016-08-15 07:00:55,"I'll close this issue for now due to of inactivity. @skarctop if you can provide some more info please feel free to reopen this issue, thanks!
",kishikawakatsumi,skarctop
3925,2016-07-28 21:30:03,"@basememara, I'm not clear in your example where there's any potential for objects to come from the wrong thread. The only objects your `flushRealmToCloud` function works with are those it retrieves from its own `Realm`, so there's no chance of data races or thread verification exceptions. Can you clarify what potential problem you see with this code?
",bdash,basememara
3925,2016-07-28 21:38:01,"Hey @astigsen, thx for the input, but it is out of the loop and its a collection of non-Realm objects. I put that there in case the loop finished before the last chunk size is finished.

Edit: Oh I read that wrong, I see what you're saying now. Good idea!
",basememara,astigsen
3925,2016-07-28 22:07:53,"@astigsen, `beginWrite` is only called if `items` is not empty. The Realm needs to be refreshed prior to checking if `items` is empty to avoid seeing it as empty when it is not.
",bdash,astigsen
3925,2016-07-28 22:09:14,"@basememara, if you're seeing a crash, sharing a crash log would be useful in understanding what's going on.
",bdash,basememara
3925,2016-07-28 22:32:23,"@bdash Any reason `refresh` shouldn't be called when a `Realm` is initialized?
",JadenGeller,bdash
3925,2016-07-28 22:34:47,"@JadenGeller People write code like this:



I don't think users would expect the second call to change the contents of `objects`.
",bdash,JadenGeller
3925,2016-07-28 22:39:16,"@basememara, as @tgoyne alluded to, the alternative to explicitly calling `refresh` is to ensure that _all_ work you perform on dispatch queues is within explicit autorelease pools. This ensures the Realm instance is deallocated when the autorelease pool is popped, and that the next block that executes on the same dispatch worker thread will receive a Realm that's looking at the most recent version of the data.

@JadenGeller, that's code that a user is much less likely to write without having a deeper understanding of Realm.
",bdash,basememara
3925,2016-07-28 22:39:16,"@basememara, as @tgoyne alluded to, the alternative to explicitly calling `refresh` is to ensure that _all_ work you perform on dispatch queues is within explicit autorelease pools. This ensures the Realm instance is deallocated when the autorelease pool is popped, and that the next block that executes on the same dispatch worker thread will receive a Realm that's looking at the most recent version of the data.

@JadenGeller, that's code that a user is much less likely to write without having a deeper understanding of Realm.
",bdash,JadenGeller
3925,2016-07-28 22:39:16,"@basememara, as @tgoyne alluded to, the alternative to explicitly calling `refresh` is to ensure that _all_ work you perform on dispatch queues is within explicit autorelease pools. This ensures the Realm instance is deallocated when the autorelease pool is popped, and that the next block that executes on the same dispatch worker thread will receive a Realm that's looking at the most recent version of the data.

@JadenGeller, that's code that a user is much less likely to write without having a deeper understanding of Realm.
",bdash,tgoyne
3925,2016-08-02 16:59:05,"@basememara, did you make any progress on understanding what's going on here? Do you have a crash log you can share with us?
",bdash,basememara
3925,2016-08-05 20:28:57,"> Having to create new `Realm` instances for each thread is inconvenient, but fine. 

I feel like Realm's thread confinement design has to be explained in more detail. The fact that Realms and Realm objects are thread-confined isn't a temporary limitation based on Realm's internals, or an artificial constraint. This is part of the design, and freely passing Realms across threads, though implementable, would have tradeoffs that would render it very dangerous and unpredictable to use.

Realm is a transactional database (think the scope of a write transaction) that allows an app to crash halfway through a write without having partially valid data written to disk. To have isolation (the 'I' in ACID), changes in different transactions aren't reflected in other transactions until those transactions advance to the latest version. Otherwise, you'd get 'faults' present in Core Data, or other ORMs. Realm doesn't have faults thanks to this design.

To aid in this isolation, Realms on a given thread are only ever at the same version (under the hood, there's only a single Realm per-thread). Passing a Realm, or Realm objects/queries/etc freely across threads would mean that you're mixing different versions of the database together, which would lead to very surprising results. For example, passing an object to a thread that has since deleted it could cause a crash, or it could change values as it crosses the thread boundary, or an object graph could have different relationships in either transaction version.

One way we've come up to work around this fundamental restriction is to have scoped thread handovers to other threads (see #3828), so that within that scope, you get the same Realm at the same transaction version on this new thread, which could otherwise have its own Realm in a different transaction.

---

> Core Data is thread safe

Faults.

---

Anyway, it seems you've resolved the specific issues that prompted you to create this issue @basememara. Since we're exploring the prospect of sync in #913 and scoped thread handover in #3136 with a PR in #3828, is there anything else we can help you with? If not, feel free to close this issue at your convenience.

Thanks for prompting this discussion!
",jpsim,basememara
3924,2016-08-15 07:05:21,"I'll close this issue for now due to of inactivity. @pprraasshhaanntthh if you can provide some more info please feel free to reopen this issue, thanks!
",kishikawakatsumi,pprraasshhaanntthh
3923,2016-08-22 20:48:01,"@BartBM I'm following up on our last request for a repro case. Any luck reproducing this?
",jpsim,BartBM
3921,2016-07-27 19:59:46,"I'm sorry @skydivedan, the steps you've shared in ""Steps to Reproduce"" aren't actually steps that we can take to reproduce this.

What steps can we take to get the same behavior you're seeing?
",jpsim,skydivedan
3921,2016-08-04 19:11:40,"@skydivedan does your project have Apptimize as a dependency ? I saw this exact issue and downgrading Apptimize strangely was a workaround for me
",adomanico,skydivedan
3921,2016-08-04 19:32:04,"Well, now isn't that interesting. Yes, I am using Apptimize. The latest
version available.

On Thu, Aug 4, 2016 at 3:11 PM Adrian Domanico notifications@github.com
wrote:

> @skydivedan https://github.com/skydivedan does your project have
> Apptimize as a dependency ? I saw this exact issue and downgrading
> Apptimize strangely was a workaround for me
> 
> —
> You are receiving this because you were mentioned.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/realm/realm-cocoa/issues/3921#issuecomment-237653568,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AANTcehWQ5PJYA6vFTzz4fNXwGPJb4Pcks5qcjl6gaJpZM4JWkHr
> .
",skydivedan,skydivedan
3921,2016-08-04 19:52:33,"@jpsim I created a sample project with just Apptimize and Realm and it causes this crash: https://github.com/MikeSilvis/apptimize-realm

I am also reaching out to Apptimize. Thanks
",MikeSilvis,jpsim
3921,2016-08-09 20:51:51,"@jsaptmz thanks!
",MikeSilvis,jsaptmz
3920,2016-07-27 19:24:36,"@blackteachinese this exception can be triggered when a device runs out virtual address space, which can easily happen on 32-bit devices with large Realm files, or using an older version of Realm. What version of Realm are you running? On what kind of device model (32 or 64 bit)?

Please note that if you use the error handling variant of [`commitWriteTransaction:`](https://realm.io/docs/objc/latest/api/Classes/RLMRealm.html#/c:objc%28cs%29RLMRealm%28im%29commitWriteTransaction:), the `NSError` will be populated instead of an exception being thrown, which you can use if there's a reasonable way you can recover from this error.
",jpsim,blackteachinese
3920,2016-08-15 12:46:19,"@blackteachinese did you find what caused this exception? Can we close this issue?
",stel,blackteachinese
3920,2016-08-17 08:23:27,"Closing this issue for now, @blackteachinese feel free to reopen it or open a new issue.
",stel,blackteachinese
3919,2016-07-28 13:09:36,"@tgoyne  I have try to delete realm files while they are open. but the crash logs is this。

Exception Type:  SIGABRT
Exception Codes: #0 at 0x180e9011c
Triggered by Thread:  8
Application Specific Information:
**\* Terminating app due to uncaught exception 'RLMException', reason: 'open(""/var/mobile/Containers/Data/Application/A525219F-83F5-49F9-A256-94B9F24E2B90/Documents/blacktea/default.realm.management/log_access"") failed: No such file or directory'

or like this

Exception Type:  SIGABRT
Exception Codes: #0 at 0x180e9011c
Triggered by Thread:  19
Application Specific Information:
**\* Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'realm鍒濆鍖栭敊璇�'

it is not like my crash and i can reproduce myself.
",blackteachinese,tgoyne
3919,2016-08-03 17:44:05,"> I have try to delete realm files while they are open

@blackteachinese since you've shared that you _are_ indeed deleting Realm files while they're open, and that this is specifically unsupported, I'll be closing this issue.

If you need to delete Realm files and can't guarantee that you're no longer accessing it, I recommend you ""mark"" the file for deletion somewhere and upon app launch, prior to accessing the Realm, delete marked files.
",jpsim,blackteachinese
3918,2016-07-27 19:20:20,"@blackteachinese have you seen the comment over at https://github.com/realm/realm-cocoa/issues/3919#issuecomment-235649578? Is it possible you're deleting files while Realm is still accessing them?
",jpsim,blackteachinese
3918,2016-08-15 12:41:10,"@blackteachinese did you solve this problem or did you find a way to reproduce it? Should we close this issue?
",stel,blackteachinese
3918,2016-08-17 08:31:47,"Closing this issue for now because of inactivity and duplication of https://github.com/realm/realm-cocoa/issues/3919. @blackteachinese feel free to open a new issue if you need any further help.
",stel,blackteachinese
3916,2016-07-28 08:22:33,"Awesome! Thanks @bdash, that solved the issue!
",alexge1,bdash
3916,2016-09-14 09:10:09,"@brynjar I did that and I get these errors:

<img width=""319"" alt=""captura de pantalla 2016-09-14 a las 3 08 54 a m"" src=""https://cloud.githubusercontent.com/assets/5769029/18506306/a6dac7b8-7a28-11e6-967d-96776ec391ce.png"">

I still can not use realm with Xcode 8
",pableiros,brynjar
3916,2016-09-14 16:24:41,"@brynjar ok I did a clean build and it works, thank you !!
",pableiros,brynjar
3916,2017-02-21 16:27:28,@bdash Thanks,alejandro-menendez,bdash
3916,2017-03-02 11:24:44,@alejandro-menendez what did you do instead? I have the exact same issue. ,Tindi,alejandro-menendez
3916,2017-03-03 07:43:03,"@Tindi as of now I am using 2.3.0 ( pod 'RealmSwift', '2.3.0' ).",alejandro-menendez,Tindi
3916,2017-03-03 07:45:13,@alejandro-menendez yeah did the same. But thanks for your response! I'll migrate to Swift 3 soon.,Tindi,alejandro-menendez
3916,2017-03-03 07:45:54,@Tindi same here,alejandro-menendez,Tindi
3912,2016-07-26 08:40:29,"@ashvar, your question appears to be about the more general issue of polymorphism in Realm (#1109).
",bdash,ashvar
3912,2016-07-26 08:48:01,"@bdash you are right. I thought subclassing support meant full support for inheritance, including relations. Seems like Realm doesn't fit my needs.
",ashvar,bdash
3912,2016-07-26 10:43:03,"@bdash Thanks for your question.  Now that I've looked at my old code, I realize that there is a major difference between the old and new method.  You used to be able to specify the class each time.  Here's how my old SyncableProperty `owner` method looked:



I am saving the owner class as a string on SyncableProperty, but I removed that from my sample project as I wasn't paying attention to the deprecated method signature and didn't realize it was relevant.  Given that `linkingObjectsProperties` is called at startup and not per-object, it seems like this behavior may be impossible now.  Do you have any ideas for how I could work around this?
",timothycosta,bdash
3907,2016-08-15 07:03:00,"I'll close this issue for now due to of inactivity. @hejunbinlan if you can provide some more info please feel free to reopen this issue, thanks!
",kishikawakatsumi,hejunbinlan
3906,2016-07-25 18:08:25,"Hi @narup, we're aware of this bug and are tracking it as #3502. The only workaround I can suggest is to avoid indexing that property. We're working on a fix at the moment. Please subscribe to #3502 for updates.
",jpsim,narup
3904,2016-07-22 03:34:48,"Thanks for filing a new issue, @aelam!

How long are you waiting after the `Downloading dependency: core 1.3.1` message appears during `pod install`? The core library is around 35MB in size, so depending on your network connection it may take a few minutes to download.

> Then I tried to modify the link to https://static.realm.io/downloads/core/realm-core-1.3.1.tar.bz2, but there is no resource of it.

We changed the file extension recently from `.tar.bz2` to `.tar.xz` for better compression.
",bdash,aelam
3904,2016-07-26 20:24:03,"Sorry for these issues @aelam, we're aware of connection issues with China and are tracking that generally in #2713.
",jpsim,aelam
3904,2016-07-27 05:12:33,"Thank you!

2016-07-26 20:24 GMT+00:00 JP Simard notifications@github.com:

> Sorry for these issues @aelam https://github.com/aelam, we're aware of
> connection issues with China and are tracking that generally in #2713
> https://github.com/realm/realm-cocoa/issues/2713.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/realm/realm-cocoa/issues/3904#issuecomment-235393282,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAOLkcvjmkQT8bEwx-MVpTixNcSdhsTAks5qZmzygaJpZM4JSaX5
> .
",aelam,aelam
3903,2016-08-15 12:34:59,"@minhthuc251 did you solve this problem? Can we close the issue?
",stel,minhthuc251
3903,2016-08-17 08:21:53,"Will close this issue for now, @minhthuc251 feel free to reopen it or open a new issue.
",stel,minhthuc251
3900,2016-07-25 06:56:38,"Mantle requires to inherit from `MTLModel`, while with Realm you're bound to the superclass `RLMObject`. You can't combine these two. But as @Kirow already points out, you can use [Realm-JSON](https://github.com/matthewcheok/Realm-JSON) instead, which allows you to declare your JSON mapping with a similar API.
",mrackwitz,Kirow
3900,2016-08-15 12:29:53,"@skarctop do you need any further help with this or could we close this issue?
",stel,skarctop
3900,2016-08-17 08:20:35,"Will close it for now because of inactivity, @skarctop feel free to reopen it or open a new issue if you need any help.
",stel,skarctop
3894,2016-09-13 17:58:04,"@bdash @jpsim  Do you know approximately when the next version of Realm supporting Swift 2.3 will be released? Xcode 8.0 final release will most likely be out this Thursday or Friday. Also, will a version of Realm supporting Swift 3.0 be available soon, or is that further out? Thanks!
",Alamoz,bdash
3894,2016-09-13 18:07:26,"@tgoyne Thanks for the info! I love Realm and am looking forward to using it with with Xcode 8.
",Alamoz,tgoyne
3893,2016-07-20 21:17:47,"Hi @asjesset, we're tracking adding this functionality as #3520. We're also tracking exposing moves more explicitly in #3571.

Alternatively, you could use KVO if the collection you're observing is an RLMArray or a List, which would provide the old/new objects. See our [docs on KVO](https://realm.io/docs/objc/latest/#key-value-observation) for more information.

I'm closing this as a duplicate of #3520 & #3571. Please subscribe to those issues for any updates in this area.
",jpsim,asjesset
3887,2016-07-20 19:23:14,"Sorry @xorshine, I can't quite understand what problem you're experiencing.

If you're referring to running the demo apps, here's a short screencast showing you how to do this:

[realm_static_example.mp4.zip](https://github.com/realm/realm-cocoa/files/374497/realm_static_example.mp4.zip)
",jpsim,xorshine
3887,2016-08-15 07:06:41,"I'll close this issue for now due to of inactivity. @xorshine if you can provide some more info please feel free to reopen this issue, thanks!
",kishikawakatsumi,xorshine
3885,2016-08-12 02:15:40,"@jpstern If I'm understanding right, adding a single owner to a dog with zero owners does not fire the notification block?
",JadenGeller,jpstern
3885,2016-08-25 19:48:54,"@JadenGeller - were you able to reproduce the issue?
",jpstern,JadenGeller
3885,2017-03-01 08:17:06,"@jpstern were you ever able to get this working? I am experiencing the same issue of the notification block not firing for a modification if the modification does not affect the overall query results. I further explained it in the issue @jpsim linked to above.

Unless I've missed something, it seems like the notification part of the test here: https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/ResultsTests.m#L960 Would not pass if the query was something like `[DogObject objectsWhere:@""ANY owners.name == 'James' OR ANY owners.name == 'John'""];` for example. As the change of name from John to James would not affect the final result.",danielbowden,jpstern
3884,2016-11-15 23:25:58,"@kishikawakatsumi I've tried this again and the `unsafeBitCast()` fails with Xcode 8.0 (I haven't tested with other versions). I've put this `S:On Hold` until you can update and fix. Thanks!
",jpsim,kishikawakatsumi
3884,2016-12-05 17:47:27,@jpsim I've updated this PR to work on Xcode 8.x. Could you review this again?,kishikawakatsumi,jpsim
3883,2016-11-15 23:25:22,"@kishikawakatsumi I've tried this again and the `unsafeBitCast()` fails with Xcode 8.0 (I haven't tested with other versions). I've put this `S:On Hold` until you can update and fix. Thanks!
",jpsim,kishikawakatsumi
3883,2016-12-05 17:44:35,@jpsim I've updated this PR to work on Xcode 8.x. Could you review again?,kishikawakatsumi,jpsim
3881,2016-07-19 17:15:24,"@skarctop, I _really_ want to help you, but if you're not willing to share the information I've asked for it's simply not possible to.

As I mentioned previously, a screenshot of a small part of the Instruments trace isn't sufficient for us to understand what's causing opening the Realm to take as long as it is. We need to see the full Instruments file. If you don't want to share it publicly you can email it to us privately at help@realm.io. We'll be more than happy to investigate the problem once you've shared the Instruments trace.
",bdash,skarctop
3881,2016-07-20 17:53:22,"@skarctop very curious as to why you closed this? Did you determine the cause of the long open time? The generic screenshot of Instruments you posted doesn't show much, other than you have a busy GCD worker thread. Doesn't even show anything Realm related.
",jpsim,skarctop
3881,2016-10-19 10:08:08,"@weiminghuaa `[table objectsWhere:@""name = 'xx'"" ].count`
",Kirow,weiminghuaa
3881,2016-10-19 10:16:38,"@Kirow I know. Is this way cause  query slow. In sqlite, it's not need query all data from db.
",weiminghuaa,Kirow
3881,2016-10-19 11:17:47,"@weiminghuaa, In my app I have 90k+ records in main table & ~2k in linked tables, not simple query by text like ""object.field1 CONTAINS[c] %@ OR name CONTAINS[c] %@ OR ANY objectArray.name = %@"". On my iphone5s it takes 0.279722s to process query & 0.000121s to get count. In this test sample I used ""ap"" input and got 5746 records in result (if this matters). 
So I can not say that it is slow. 
",Kirow,weiminghuaa
3881,2016-10-19 19:06:15,"@weiminghuaa `[table objectsWhere:@""name = 'xx'"" ].count` _is_ an optimized operation to get just the number of objects matching the query. It's generally a faster operation than accessing resulting objects from that query.
",jpsim,weiminghuaa
3879,2016-07-15 15:04:13,"@pjebs, can you elaborate on why you're forced to use Xcode 7.2?
",bdash,pjebs
3879,2016-07-15 21:54:14,"Anyway, sounds like this issue is resolved.

@pjebs It doesn't compile because you're using an unsupported version of Xcode. Either use an older version of Realm or upgrade OS X and Xcode (better solution!).
",JadenGeller,pjebs
3877,2016-07-15 16:48:23,"Thanks a lot for the suggestion @dhiraj! I've added this to our backlog so we can review it later. :)
",TimOliver,dhiraj
3877,2016-07-26 18:28:57,"@jpsim I'm not sure `isEmpty` is a total replacement for this feature. Imagine an app that launches populated sample data (by checking `isEmpty`). If the user deletes all the sample data and relaunches the app, it will again be repopulated with sample data.

That said, it's still possible to accomplish the desired effect by inserting some singleton state object after first launch, though this is a bit more tricky for users.
",JadenGeller,jpsim
3876,2016-07-15 02:46:54,"Well, sounds like you can resolve your issue @wells1013 by updating Xcode 🙂
",JadenGeller,wells1013
3874,2016-07-15 01:08:40,"@bdash Good catch on `Object(value:)`; they should all be consistent.

Would anyone object if I restored `ofType:` to the APIs?

@JadenGeller A struct wrapper is too heavy IMO, but a typealias would be almost as good (wouldn't stop you from doing stupid things, but it would let you see the intended purpose of the string at a glance).
",austinzheng,JadenGeller
3874,2016-07-15 01:08:40,"@bdash Good catch on `Object(value:)`; they should all be consistent.

Would anyone object if I restored `ofType:` to the APIs?

@JadenGeller A struct wrapper is too heavy IMO, but a typealias would be almost as good (wouldn't stop you from doing stupid things, but it would let you see the intended purpose of the string at a glance).
",austinzheng,bdash
3874,2016-07-15 02:15:12,"@austinzheng A typealias could be nice, but not a replacement for the argument label. Did you have thoughts on using an `RLMObjectSchema` instead of a `String` to specify the type?
",JadenGeller,austinzheng
3874,2016-07-27 20:36:02,"@bdash @JadenGeller Changed `createObject(...)` to `create(...)`.
",austinzheng,JadenGeller
3874,2016-07-27 20:36:02,"@bdash @JadenGeller Changed `createObject(...)` to `create(...)`.
",austinzheng,bdash
3874,2016-07-27 20:38:15,"@JadenGeller using the object schema instead of the string is an interesting idea, but should probably be discussed and implemented separately.
",austinzheng,JadenGeller
3873,2016-07-18 17:30:30,"@marchy Swift 2.3 support couldn't be added for Xcode 8 beta 1 due to an Xcode bug, but I just pushed a PR for 2.3 support here: #3882.
",jpsim,marchy
3873,2016-07-18 17:45:21,"@jpsim fantastic thanks for the update JP. Will try once it gets merged
",marchy,jpsim
3872,2016-07-20 08:40:37,"@jpsim You're right  `pod 'Realm'` was behind latest commit. Clearing `Podfile.lock` resolved the issue.
",AEugene,jpsim
3872,2016-07-20 18:16:20,"Glad to hear it @AEugene!
",jpsim,AEugene
3871,2016-07-15 05:15:50,"Hi there @rickkaye! Thanks for the issue!

Sorry to hear you've been having trouble with updating Realm. We've seen similar error messages here before, but they can usually be caused by several different reasons.

Here are some things for you to try out to see if it fixes it:
- Make sure to do a full 'Clean' of your project.
- When you dragged the framework into your project, make sure 'Copy items if needed' was checked.
- If worse comes to worse, delete Realm completely from your project and try again from scratch.

Let me know how you go!
",TimOliver,rickkaye
3871,2016-07-15 05:59:46,"Actually, I had tried all of those things before posting my problem. In addition, I had tried deleting all derived data in Xcode. But none of that worked.

After my post, I created a new project, installed Realm 1.0.2 from scratch, and then copied all of the source files from my old project to the new one. That worked. The only problem with that is I lost my source control history. I have still not been able to get the original project to compile.

Someday, you will release Realm 1.0.3. It would be helpful if you posted instructions on how to upgrade the version of Realm in an existing project alongside the instructions you have for installing Realm in a new project. I’m sure I did something wrong to cause the problem but I can’t figure out what it could have been.

> On Jul 14, 2016, at 10:16 PM, Tim Oliver notifications@github.com wrote:
> 
> Hi there @rickkaye https://github.com/rickkaye! Thanks for the issue!
> 
> Sorry to hear you've been having trouble with updating Realm. We've seen similar error messages here before, but they can usually be caused by several different reasons.
> 
> Here are some things for you to try out to see if it fixes it:
> 
> Make sure to do a full 'Clean' of your project.
> When you dragged the framework into your project, make sure 'Copy items if needed' was checked.
> If worse comes to worse, delete Realm completely from your project and try again from scratch.
> Let me know how you go!
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/realm/realm-cocoa/issues/3871#issuecomment-232861463, or mute the thread https://github.com/notifications/unsubscribe-auth/ABAXMWUk26vIyqzerDnSCfJle8mF1oQPks5qVxeTgaJpZM4JL_uH.
",rickkaye,rickkaye
3870,2016-07-14 20:03:30,"@tgoyne I feel like it's reasonable to only manage properties with backing ivars by default. If a user creates an unsynthesized property that gets/sets an unrelated ivar, it think it's fair to treat this as a computed property unless they opt out. This is a very weird use case, and I think we should optimize for ease-of-use in the common case.

Just like we do not assume all properties are computed unless they explicit specify we should manage them, I don't think we should assume all properties should be managed unless they are ignored. It seems like a reasonable default would ignore properties without ivar backing.

Obviously this would be a breaking API change, so we couldn't merge this for a while, but I'd argue we should eventually transition to this behavior.
",JadenGeller,tgoyne
3865,2016-07-15 05:45:43,"Hi there @oldpotter! Sorry for the reply in English; I cannot speak Chinese unfortunately.

From what I can gather, you're having trouble with the Realm change notifications not reporting the insertion/deletions that you were expecting. Is that correct?

Are you able to post more of your code here? Thanks a lot!
",TimOliver,oldpotter
3865,2016-07-16 18:00:14,"I'm a developer from China. I translated the issue from @oldpotter. Hoping this helps. ^_^

# Description

When you delete a record, the last line will move to the deleted location, and will receive chang.insertion notification.

# Code Sample

**Step1: Create some data.**



**Step2: Delete a record.**



**Step3: Check Realm Browser and you will find the last record has been moved to the location which stored the deleted one's. At the same time, you can receive the `delete` and `add` notifications.

# Environment

Realm version: 1.0.1
Xcode version: 7.3.1
iOS/OSX version: 9.3
Dependency manager + version: ?
",talisk,oldpotter
3863,2016-07-13 21:56:32,"I just checked, and it turns out the function overloads discussed in 1 are ambiguous… 😞 If we want 1 still, we need to give the existential method a different name… Thoughts @bigfish24?

For example, we could rename the latter to



and users would need to call



only when they wanted to hand over `RealmBoundObject`s that don't share a common superclass.

I think this is pretty gross, but there's not a great alternative. We could _only_ keep the existential method, but then excessive casting is necessary to use the API.
",JadenGeller,bigfish24
3863,2016-07-13 22:18:27,"@austinzheng With only the existential API, users will _always_ have to cast from the existential to the correct type. With the protocol constrained generic API, users will often not need to cast.


",JadenGeller,austinzheng
3863,2016-07-13 22:33:51,"Potential solution! 🎉 If we mark `RealmBoundObject` as `@objc`, it's existential will conform to `RealmBoundObject`. This means that two unrelated classes that conform to `RealmBoundObject` can be passed in the generic constraint API!

Unfortunately, you have to give the type checker needs some help in this case, but that's totally reasonable for the advanced use case of passing unrelated types. We should definitely document this though.



The user simply must add an `as [RealmBoundObject]` to the parameter OR annotate the argument types in the closure. Again, in the case where everything in the array is of a common superclass, no type checker hints are necessary.

What're your thoughts, @austinzheng?
",JadenGeller,austinzheng
3861,2016-07-12 14:46:57,"Hi @dhiraj! 

Cool! Thanks for that! That's a great idea! I've added the appropriate labels to this issue so the other engineers can review this request and see what they think.

To anyone else reading this: if you would like to see this feature implemented, please add a :+1: reaction to this issue.

Thanks!
",TimOliver,dhiraj
3860,2016-07-25 18:50:06,"Thanks for the detailed report, @stephenyao and sorry for the delay in getting back to you.

When creating a repro case for your issue, I noticed that you're starting a write transaction while already in a write transaction.

Once in your executed code:



and once again in `EntityDeletable.delete()`:



Which would cause an Objective-C runtime exception to be thrown, which if not handled, causes a crash.

So you should just remove the nested write transaction:



When I do that, the following code runs just fine, even with the call to `realm.deleteObject(self)`. Here's a complete app sample that shows this working:



Finally, `RLMArray` and `RLMLinkingObjects` already conform to `SequenceType`, so you can replace your Realm extensions with this (if you're pulling in `RLMSupport.swift` in your project):


",jpsim,stephenyao
3860,2016-07-26 03:37:38,"Hi @jpsim,

Thanks for your detailed response! I've followed your solution and have been able to get `realm.deleteObject(self)` to work.

Cheers,
Stephen
",stephenyao,jpsim
3858,2016-07-12 07:54:23,"Hi @demoker!

Actually, `[RLMRealm transactionWithBlock]` is just a convenience wrapper around `[RLMRealm commitWriteTransaction]`. Here is its code straight from [RLMRealm.mm](https://github.com/realm/realm-cocoa/blob/master/Realm/RLMRealm.mm#L501):



I'm not sure why your attempt at using `[RLMRealm commitWriteTransaction]` would be failing. Are you able to see if there are any `NSError` objects being returned? 

If you are still having trouble, could you please post a copy of your source code here? Thanks!
",TimOliver,demoker
3858,2016-07-13 02:48:22," @TimOliver 



I'm sorry, that is my problem, I should not be used `__weak` modify the `car` to remove `__weak` in front of the `car`, with respect to ok,thanks! But why?It is ok in debug,not ok in release!
Here,i have a problem . In a different thread calls [RLMRealm defaultRealm], return an instance of the object is not the same, right?
Below is my test: 



really not the same object.If so, then I in the two threads at the same time to update a data, then the result?Such as:Thread 1 to update the age to 20, thread 2 updates the age to 30, so how many are the age in the end?
",demoker,TimOliver
3858,2016-07-13 03:34:06,"@bdash ,excuse me . Can you help me look at the above the problem?thanks!
",demoker,bdash
3857,2016-07-15 16:45:20,"Thanks a lot for the feedback @viktorasl! We probably could handle this sort of use case a bit more nicely. I'll assign this to our backlog so we can consider a way to avoid causing an exception.
",TimOliver,viktorasl
3855,2016-07-11 20:59:22,"@tgoyne How so? It does introduce warnings in cases where the API is used incorrectly (and will throw an exception as a result), but this does not seem _breaking_ to me.
",JadenGeller,tgoyne
3855,2016-07-11 21:22:43,"Awesome, thanks for the explanation @tgoyne. I guess this'll have to hold off.

Do we have any way to track which PRs should go into the next breaking release? It seems like they could easily be lost in the abyss.
",JadenGeller,tgoyne
3854,2016-07-26 16:55:55,"Bug fixes that break things for people relying on the buggy behavior shouldn't be considered a breaking change IMHO. Not sure if you ended up fixing this as part of the schema re-work @tgoyne.
",jpsim,tgoyne
3853,2016-07-11 20:22:19,"Thanks for the awesome bug report, @viktorasl! I've determined that query results don't update correctly when the query predicate involves traversing an inverse relationship. This is due to an issue in Realm's underlying core engine (realm/realm-core#1950). A fix is in the works and should hopefully make it into a Realm Objective-C release in the near future.

I noticed from your test case that you observed a second issue with `-[EventFooType initWithValue:]` throwing an exception unless you first explicitly call `+[RLMRealm defaultRealm]`. That looks to be worthy of its own bug report.
",bdash,viktorasl
3853,2016-09-23 16:08:14,"@smolskyaleksey, please file a new issue with any question you have, rather than asking on an unrelated, closed issue.
",bdash,smolskyaleksey
3852,2016-07-11 07:52:13,"+1 on this. I also find this to be a big annoyance.

Like @PiratJoe, I'm pulling down data and bulk inserting into Realm. But that data may or may not have changed. I only want to update the UI if data has truly changed.
",danielrhodes,PiratJoe
3851,2016-07-12 04:32:19,"Hi @minhthuc251! I see that @bdash was able to help you on Stack Overflow, so I'll close this issue off now.

Please let us know if you have any more questions!
",TimOliver,minhthuc251
3848,2016-07-08 19:12:38,"@tgoyne You're right, there _are_ warnings! But, not because the generics were imported into Swift 2.2. Changing the return type to the generic type imported it as `RLMObject`, the class constraint on the generic. 👍 
",JadenGeller,tgoyne
3848,2016-07-13 20:55:16,"@bdash Sorry, should I create a new PR to add an entry? I'm not entirely clear on what sort of changes require a changelog entry. Is it anything that breaks the API (warnings or errors), introduces features, or fixes major bugs?
",JadenGeller,bdash
3838,2016-07-20 19:59:19,"@asjesset what would you like to see improved in Realm to make your use case easier?

Would it make sense to have ""new"" variants of `deletions`, `insertions`, `modifications` on `RLMCollectionChange`? Or to expose a `@property (readonly) NSArray<NSNumber *> *modificationsInNew` property?
",jpsim,asjesset
3838,2016-08-26 20:25:38,"@Kirow since your comments are unrelated to this ticket (tracking adding new functionality to changeset notifications), I've created a new issue where we can discuss the problems you're facing: #4016. Please move the conversation there.
",jpsim,Kirow
3838,2016-11-17 16:53:55,"@asjesset can you share your updated category?
",timbroder,asjesset
3836,2016-07-07 18:28:31,"@tgoyne I don't care much that it's a better or worse name, I just think it ought to be consistent with our other names. Having both `addOrUpdateObjectsFromArray:` and `deleteObject:`, which both taking identical argument types, is confusing.

The benefit gained from using `NSObject` instead of `id` is that the former defines `respondsToSelector:`, which we need in `deleteObjects:`. We could instead use `id` and cast to `NSObject` inside the method (under the assumption that all objects are `NSObject`s), but this seems worse and would break from Swift (though it should be `NS_REFINED_FOR_SWIFT` anyway).
",JadenGeller,tgoyne
3835,2016-07-26 21:36:40,"@jpsim Wrong issue number?
",JadenGeller,jpsim
3834,2016-07-07 18:50:26,"I'll write up a Swift Evolution proposal for this since I think the warning message is pretty important in our usage.

@austinzheng and I were thinking something along the lines of `@discardableResultWarning(message: ""You must hold on to the NotificationToken returned from addNotificationBlock"")`
",JadenGeller,austinzheng
3831,2016-07-06 04:56:27,"Thanks for the bug report, @nixzhu. We're tracking this in #3793. A fix is in the works and will hopefully be released in the near future.
",bdash,nixzhu
3829,2016-07-26 21:18:43,"@austinzheng please ping again once the merge conflicts have been addressed.
",jpsim,austinzheng
3829,2016-07-27 20:59:27,"#3748 

@jpsim @bdash @tgoyne @mrackwitz @JadenGeller -- feel free to review, but only if you're interested.

EDIT: The `Error` changes have also been excised.
",austinzheng,jpsim
3829,2016-07-27 20:59:27,"#3748 

@jpsim @bdash @tgoyne @mrackwitz @JadenGeller -- feel free to review, but only if you're interested.

EDIT: The `Error` changes have also been excised.
",austinzheng,bdash
3829,2016-07-27 20:59:27,"#3748 

@jpsim @bdash @tgoyne @mrackwitz @JadenGeller -- feel free to review, but only if you're interested.

EDIT: The `Error` changes have also been excised.
",austinzheng,JadenGeller
3829,2016-09-14 19:52:05,"@jpsim I rebased this commit atop your changes on `az/swift3apireview` and made some additional fixes to accommodate your API changes. Let me know what you think.
",austinzheng,jpsim
3828,2016-07-12 18:17:22,"As @jpsim mentioned in https://github.com/realm/realm-cocoa/issues/3136#issuecomment-175328699, the user might want to specify the queue priority. I think it's a reasonable thing to expose. It looks like a user also wanted serial, async reads https://github.com/realm/realm-cocoa/issues/3755, so choosing between concurrent/serial queues might be another reason to specify. Finally, named queues might be beneficial for debugging.

@bdash Any suggestions of a better naming scheme? We could write them as functions on the dispatch queue / top level functions I guess. The Realm could even be inferred based on the arguments (throwing if not the same for each). This kinda makes the queue a more prevalent part of the API though, so it doesn't fit well with your first concern.


",JadenGeller,bdash
3828,2016-07-12 18:29:26,"@astigsen The argument is defaulted in Swift, and overloads can be provided in Objective-C to make it ""defaulted"" if necessary.
",JadenGeller,astigsen
3828,2016-07-12 21:04:18,"@bdash @astigsen Just talked with @jpsim offline, and he felt that we should definitely include the queue parameter. We can document that the objects are only valid for the duration of the block. I don't think this should be a huge surprise to users given that Realm objects are thread confined, and there's no guarantee what thread a queue runs on.

We also discussed the Objective-C overloads. We decided that a reasonable solution would be to only include the queue parameter in the most complicated overload rather than including every combination of conveniences.
",JadenGeller,astigsen
3828,2016-07-12 21:04:18,"@bdash @astigsen Just talked with @jpsim offline, and he felt that we should definitely include the queue parameter. We can document that the objects are only valid for the duration of the block. I don't think this should be a huge surprise to users given that Realm objects are thread confined, and there's no guarantee what thread a queue runs on.

We also discussed the Objective-C overloads. We decided that a reasonable solution would be to only include the queue parameter in the most complicated overload rather than including every combination of conveniences.
",JadenGeller,bdash
3828,2016-07-12 21:28:59,"> @bdash Any suggestions of a better naming scheme? 

CoreData uses `performBlock:` for a similar type of behavior in its API. That's awkward given the extra arguments we need to include though.

> We could write them as functions on the dispatch queue / top level functions I guess.

It's a nice idea, but discoverability is likely to be an issue. There's also no obvious equivalent for Objective-C.
",bdash,bdash
3828,2016-07-25 19:57:35,"//cc @jpsim @austinzheng @bdash @tgoyne 
",JadenGeller,bdash
3828,2016-07-25 19:57:35,"//cc @jpsim @austinzheng @bdash @tgoyne 
",JadenGeller,tgoyne
3828,2016-07-25 20:19:54,"@astigsen Sure. Do you think an async read convenience API is unnecessary then?
",JadenGeller,astigsen
3828,2016-07-25 21:08:23,"@bdash I agree. It would be preferable to use `writeAsyncWithObjects:block:`, but we've already established a precedent of using `transaction` instead of `write` in Objective-C.

We could use `asyncTransactionWithObjects:block:`, but this loses the auto-complete that @astigsen was looking for.

I'm open to better suggestions.
",JadenGeller,astigsen
3828,2016-07-25 21:08:23,"@bdash I agree. It would be preferable to use `writeAsyncWithObjects:block:`, but we've already established a precedent of using `transaction` instead of `write` in Objective-C.

We could use `asyncTransactionWithObjects:block:`, but this loses the auto-complete that @astigsen was looking for.

I'm open to better suggestions.
",JadenGeller,bdash
3828,2016-07-25 21:19:51,"@tgoyne Would you you be for deprecating the `transaction` family of APIs and replacing them with a `write` family of APIs? I think it's a good idea to do eventually, but I'm not sure how you'd feel about such a major API change in a non-major release. (Remember, there's `transactionWithBlock:`, `beginTransaction`, `commitTransaction`, `cancelTransaction`)

It would be weird to only deprecate `transactionWithBlock:` and it would also be weird to introduce `writeAsyncWithBlock:` without also renaming the former.
",JadenGeller,tgoyne
3828,2016-07-25 21:33:41,"@tgoyne Good catch. It seems like `performTransactionWithBlock:` would be the Cocoa convention-following name most similar to our current API.

I think we should either:
1. Rename `transactionWithBlock:` to `performTransactionWithBlock:` and introduce `performTransactionAsyncWithBlock:` (follow Cocoa conventions with smallest API diff)
2. Rename `transactionWithBlock:` to `writeWithBlock:` and introduce `writeAsyncWithBlock:`; consider renaming `___WriteTransaction` family to `____Write` (aligning with Swift)
3. Keep the existing name and introduce `asyncTransactionWithBlock:` (no API changes, though harder to discover via autocomplete)
4. Keep the existing name and introduce `transactionAsyncWithBlock:` (no API changes, though awkward sounding)

I don't think we ought to mismatch these options else our family of transaction APIs will be inconsistent and thus confusing.
",JadenGeller,tgoyne
3828,2016-07-26 22:22:13,"@bdash @tgoyne You commented earlier, but didn't give a 👍. Are you still reviewing the PR, or are there other changes you'd like to see? Also, y'all didn't love the naming. What are your thoughts on my suggested alternatives?
",JadenGeller,bdash
3828,2016-07-26 22:22:13,"@bdash @tgoyne You commented earlier, but didn't give a 👍. Are you still reviewing the PR, or are there other changes you'd like to see? Also, y'all didn't love the naming. What are your thoughts on my suggested alternatives?
",JadenGeller,tgoyne
3828,2016-07-29 20:25:02,"@astigsen What're your thoughts on @bdash's concerns? Maybe we should merge the non-convenience API and later add a convenience API once users have had some time to use the feature?
",JadenGeller,astigsen
3828,2016-07-29 20:25:02,"@astigsen What're your thoughts on @bdash's concerns? Maybe we should merge the non-convenience API and later add a convenience API once users have had some time to use the feature?
",JadenGeller,bdash
3828,2016-07-31 03:09:04,"> @astigsen What're your thoughts on @bdash's concerns? Maybe we should merge the non-convenience API and later add a convenience API once users have had some time to use the feature?

It is obviously not going to help when you want synchronous results, like when the UI has to be updated right away. But sometimes you do want to things async and that is where it will be useful.

There could be a good case for both having `writeAsync` and `readAsync`, since I agree that are cases where you want to do something before the write. But when I have been talking with users they have mostly complained about not being able to do async writes to objects without cumbersome re-fetching of all the objects.

I don't have any problem with merging it in two steps, but I do think that the convenience API is important.
",astigsen,astigsen
3828,2016-07-31 03:09:04,"> @astigsen What're your thoughts on @bdash's concerns? Maybe we should merge the non-convenience API and later add a convenience API once users have had some time to use the feature?

It is obviously not going to help when you want synchronous results, like when the UI has to be updated right away. But sometimes you do want to things async and that is where it will be useful.

There could be a good case for both having `writeAsync` and `readAsync`, since I agree that are cases where you want to do something before the write. But when I have been talking with users they have mostly complained about not being able to do async writes to objects without cumbersome re-fetching of all the objects.

I don't have any problem with merging it in two steps, but I do think that the convenience API is important.
",astigsen,bdash
3826,2016-07-26 20:30:13,"I'm closing this since we haven't heard back from @afiq90 in a while and haven't been able to reproduce this ourselves after following the troubleshooting steps shared in [our docs](https://realm.io/docs/objc/latest/#reinstalling-via-dependency-managers).
",jpsim,afiq90
3825,2016-07-06 04:59:00,"Hi @chashmeetsingh. This is not currently directly supported. We're tracking requests for this feature in #1103. Please follow that issue to receive updates when we implement it.
",bdash,chashmeetsingh
3824,2016-07-05 08:02:11,"@bdash Thanks for your reply. But by doing this way, i have to keep persist connection with the database? And it can't tell which one has bigger data number. I need to compare db size from local and iCloud to select the version which has more records.
",Tom29,bdash
3824,2016-07-12 04:48:15,"Hi @Tom29! Just checking to see if this issue is still in progress. :)

Like @bdash was saying, there's no way to accurately determine the number of objects in a remote Realm file. But that being said, it would be entirely appropriate to store that sort of metadata about the Realm file somewhere else in iCloud that's easier to access remotely (for example, [the iCloud key-value store](https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUbiquitousKeyValueStore_class/#//apple_ref/occ/clm/NSUbiquitousKeyValueStore/defaultStore) as a possible solution)

In any case, please let us know if you have any additional queries about this. :)
",TimOliver,Tom29
3824,2016-07-12 04:48:15,"Hi @Tom29! Just checking to see if this issue is still in progress. :)

Like @bdash was saying, there's no way to accurately determine the number of objects in a remote Realm file. But that being said, it would be entirely appropriate to store that sort of metadata about the Realm file somewhere else in iCloud that's easier to access remotely (for example, [the iCloud key-value store](https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUbiquitousKeyValueStore_class/#//apple_ref/occ/clm/NSUbiquitousKeyValueStore/defaultStore) as a possible solution)

In any case, please let us know if you have any additional queries about this. :)
",TimOliver,bdash
3824,2016-07-12 04:50:23,"@TimOliver Thanks Tim, i've found the way to work around. I have to count and check total record in the db to know which one is the newer version.
",Tom29,TimOliver
3823,2016-08-15 07:04:15,"I'll close this issue for now due to of inactivity. @janesoko if you can provide some more info please feel free to reopen this issue, thanks!
",kishikawakatsumi,janesoko
3818,2016-07-05 21:37:05,"@austinzheng That should be possible to change afterwards. I figured it made sense for all enums to be changed in a single commit later one.
",JadenGeller,austinzheng
3817,2016-07-05 19:57:47,"@tgoyne I don't think I can apply `NS_REFINED_FOR_SWIFT` to only a single Swift version though, right?
",JadenGeller,tgoyne
3817,2016-07-05 20:39:26,"@tgoyne The Swift function cannot exactly reimplement the Objective-C function since they'd share the same selector.

> Method 'schemaVersionAtURL(_:encryptionKey:error:)' with Objective-C selector 'schemaVersionAtURL:encryptionKey:error:' conflicts with method '__schemaVersionAtURL(_:encryptionKey:error:)' with the same Objective-C selector

With that in mind, should we keep with the deprecation approach?
",JadenGeller,tgoyne
3817,2016-07-05 20:52:03,"@tgoyne Perfect! I had no idea that existed! Wish Xcode gave me a fixit there.
",JadenGeller,tgoyne
3815,2016-06-30 23:22:32,"@tgoyne Is there a 2.0 branch that such changes are merged into, or do they just wait?
",JadenGeller,tgoyne
3815,2016-07-01 00:26:03,"@bdash I actually think the `@autoreleasepool` is causing an issue.
",JadenGeller,bdash
3815,2016-07-01 00:56:38,"@tgoyne What if we additively introduce this method while deprecating the old one?
",JadenGeller,tgoyne
3814,2016-07-01 21:57:36,"@cpinski When you say ""Our realm.write transactions are within do catch blocks but we aren't catching an exception here,"" do you mean something like this?



If so, the exception is just being delayed making it more difficult to understand what went wrong. It's probably best to use `try!` unless you have a good reason to handle the error.
",JadenGeller,cpinski
3814,2016-07-01 22:02:57,"@JadenGeller Our code does look as you described above. Currently we would like to catch the exception so that we can fix what we are doing incorrectly. As of now we are seeing rather consistent crashes with the error ""RLMException The Realm is already in a write transaction"" and would like to clean up our code and follow the proper guidelines as well as possible.
",cpinski,JadenGeller
3814,2016-07-01 22:10:31,"@cpinski Most use cases don't require dynamically recovering from errors at runtime. If you really do want to catch errors, make sure you rethrow any errors that you don't have a specific recovery plan for. If you catch and error but do nothing about it, that's considered ""swallowing"" the error, and will likely cause some mysterious failure later. It's easiest to debug a problem if you crash for errors that you don't have a recovery plan in place for.
",JadenGeller,cpinski
3814,2016-07-06 14:06:51,"@jpsim @JadenGeller @bdash @tgoyne Was realm/realm-core#838 ever completed? I saw that it was referenced in issue [#3083](https://github.com/realm/realm-cocoa/issues/3083) but the page can no longer be found.
",cpinski,bdash
3814,2016-07-06 14:06:51,"@jpsim @JadenGeller @bdash @tgoyne Was realm/realm-core#838 ever completed? I saw that it was referenced in issue [#3083](https://github.com/realm/realm-cocoa/issues/3083) but the page can no longer be found.
",cpinski,JadenGeller
3814,2016-07-06 14:06:51,"@jpsim @JadenGeller @bdash @tgoyne Was realm/realm-core#838 ever completed? I saw that it was referenced in issue [#3083](https://github.com/realm/realm-cocoa/issues/3083) but the page can no longer be found.
",cpinski,tgoyne
3814,2016-07-25 09:01:24,"@cpinski: If you would be willing to share a built version of your app as IPA privately with us together with some instructions how to reproduce this scenario, I think we could also collect the data we need ourselves, if that's easier for you.
",mrackwitz,cpinski
3814,2016-08-15 16:21:53,"I'm sorry to hear that @cpinski. We'll be closing this issue now.
",jpsim,cpinski
3812,2016-06-30 14:52:00,"Sorry @chucktee, my mistake, I definitely skimmed that too quickly, been doing too much support today 😅.

You seem to be doing everything right. I don't see anything that would cause the file to be inaccessible unless you're accessing the Realm prior to setting the default configuration and the file protection attributes?

Any chance you could share a sample project that reproduces this behavior?
",jpsim,chucktee
3811,2016-06-30 13:58:04,"Sorry you're affected by this crash @tspecht. First thing to try is to see if you can reproduce this with the latest version of Realm (v1.0.1 as of this writing).

You stated your ""goal"" as ""Deleting everything from mutliple Realm instances while logging out the user."", but I don't see anything related to that in your stack trace. This leads me to ask, is it possible you're deleting a Realm file while still accessing it? That could lead Realm to crash in unpredictable places.

If this is what's happening, I'd suggest using `-[RLMRealm deleteAllObjects]` or marking the file for deletion and cleaning up at next app launch.
",jpsim,tspecht
3811,2016-06-30 14:01:38,"Hey @jpsim we are using `deleteAllObjects` actually. The comment about deleting the files was just ""I even tried that but also didn't help so reverted it"". I can't update to 1.0 because of https://github.com/realm/realm-cocoa/issues/3702 
",tspecht,jpsim
3811,2016-07-26 17:57:12,"@mteece I recommend you don't continue accessing the file after deleting it. One way to do this would be to ""mark"" the Realm for deletion and clean up marked Realms on following app launches.
",jpsim,mteece
3810,2016-06-30 14:18:40,"hey @jpsim thanks for replying
I changed the code to this 



shows being Results<Show> but isn't that synchronous? I want to implement asynchronous task here
Please can u help (new here) thanks !
",chashmeetsingh,jpsim
3810,2016-06-30 14:36:29,"also isn't that too synchronous as we are storing the objects in results directly
@jpsim 
",chashmeetsingh,jpsim
3810,2016-06-30 14:37:34,"@chashmeetsingh obviously you'll need to add a `notificationToken` property on your view controller if you're trying to assign to one.

> also isn't that too synchronous as we are storing the objects in results directly

Have you read the documentation links from my previous comment (https://github.com/realm/realm-cocoa/issues/3810#issuecomment-229661795)?
",jpsim,chashmeetsingh
3810,2016-06-30 14:41:09,"ahh ok thanks for that missed the docs part 
@jpsim 
",chashmeetsingh,jpsim
3810,2016-06-30 14:53:58,"@jpsim how do I verify if its asynchronously  loaded
",chashmeetsingh,jpsim
3808,2016-06-30 13:50:17,"Hi @smolskyaleksey, sorry you're affected by this. We're aware of this issue and are already tracking it as #3502. There should be more information available in that ticket. I'll close this as a duplicate to keep the conversation all in one place.

Please subscribe to #3502 for updates on this.

I'd recommend not indexing string properties with long common prefixes until we resolve this.
",jpsim,smolskyaleksey
3807,2016-06-29 04:06:23,"Hi @emuye, thanks for filing this. We agree that we need to expose a mechanism through which write transactions may be performed without triggering collection change notifications and are tracking that as #3665.

When making changes to data due to user interactions (e.g. main UI thread), you should certainly make those synchronously to keep things flowing at 60fps. Notifications are delivered asynchronously.

I'm closing this ticket as a duplicate and would encourage you to continue this conversation in #3665 so we can keep the discussion in one place. Thanks!
",jpsim,emuye
3799,2016-07-04 10:36:21,"@FinderTiwk did this resolve your issue? Could we close this?
",stel,FinderTiwk
3799,2016-07-12 11:07:26,"@FinderTiwk You should provide a hexadecimal string representation of the key that was specified in your app. 
",stel,FinderTiwk
3796,2016-07-27 20:53:06,"@austinzheng Thanks for the update Austin. This helps us time our migration efforts accordingly since we are currently blocked on some new feature dev leveraging new iOS 10 SDKs with this.
",marchy,austinzheng
3796,2016-08-08 16:11:54,"I ran into a few issues with this, using the advised instructions from @austinzheng. Some additional details that may help some people:
1. To run build.sh using the XCode beta, you need to set the default xcode version to beta using the command
   `sudo xcode-select -switch /Applications/Xcode-beta.app`

This obviously has nothing to do with Realm.
1. After I cloned the realm repo, I had to update the submodules via
   `git submodule init && git submodule update`

This is documented somewhere but not on the instructions above or the main source at https://realm.io/docs/swift/latest/#installation
1. The xcode project file has a number of duplicate devices available, and xcodebuild was unable to determine which was supposed to be built. I had to remove all duplicate simulator devices (so that only one remained for each type, e.g, iphone 6, iphone 6s, etc.

The last step in particular wasn't documented anywhere and I was unable to run build.sh until removing those devices.
",algoterranean,austinzheng
3796,2016-08-11 01:40:11,"Thanks @algoterranean ! 
FYI you can use gem install snapshot; snapshot reset_simulators to reset all your simulators, answer from http://stackoverflow.com/questions/27614197/duplicate-iphone-simulators-appeared-on-my-xcode
",hyouuu,algoterranean
3796,2016-09-11 23:14:50,"Was able to use the intstructions posted by @austinzheng to make it compile and run the app on my iOS Device. Problem is, I can't get it to work on the Simulator. I'm guessing because this isn't a Universal framework ? Thoughts on how to achieve that? 

![image](https://cloud.githubusercontent.com/assets/605076/18421290/d18fa346-7854-11e6-93cb-948a813308f5.png)

@algoterranean Could this be related to the issue with duplicate simulators you were reporting perhaps? 

> The xcode project file has a number of duplicate devices available, and xcodebuild was unable to determine which was supposed to be built. I had to remove all duplicate simulator devices (so that only one remained for each type, e.g, iphone 6, iphone 6s, etc.
",freak4pc,austinzheng
3796,2016-09-11 23:14:50,"Was able to use the intstructions posted by @austinzheng to make it compile and run the app on my iOS Device. Problem is, I can't get it to work on the Simulator. I'm guessing because this isn't a Universal framework ? Thoughts on how to achieve that? 

![image](https://cloud.githubusercontent.com/assets/605076/18421290/d18fa346-7854-11e6-93cb-948a813308f5.png)

@algoterranean Could this be related to the issue with duplicate simulators you were reporting perhaps? 

> The xcode project file has a number of duplicate devices available, and xcodebuild was unable to determine which was supposed to be built. I had to remove all duplicate simulator devices (so that only one remained for each type, e.g, iphone 6, iphone 6s, etc.
",freak4pc,algoterranean
3796,2016-09-12 17:16:44,"@freak4pc please wait until our official Xcode 8 support with a finalized API, installation instructions and documentation later this week.
",jpsim,freak4pc
3796,2016-09-12 17:25:41,"I eventually was able to build it yesterday with some playing around, but I'll still wait for a more solid build plan before proceeding further. Thanks @jpsim .
",freak4pc,jpsim
3796,2016-09-14 16:32:36,"@Maryom  `git submodule update --init --recursive`
",jpsim,Maryom
3796,2016-09-14 17:09:02,"@jpsim Thanks for your fast reply. It worked perfectly. Thanks again.
",Maryom,jpsim
3796,2016-09-15 01:17:15,"@helloandrewpark you're not on the latest version of `master`...
",jpsim,helloandrewpark
3796,2016-09-15 18:18:16,"Hey @freak4pc,

My cocoa pods version is v1.1.1.0.rc.2:

`/Users/mariam/.rvm/gems/ruby-2.2.1/gems/cocoapods-1.1.0.rc.2/lib/cocoapods.rb`

I added these lines to my pod file:

`pod 'Realm', git: 'https://github.com/realm/realm-cocoa.git', branch: 'master', submodules: true
  pod 'RealmSwift', git: 'https://github.com/realm/realm-cocoa.git', branch: 'master', submodules: true`

And I got these errors 😖👇🏼

<img width=""563"" alt=""screen shot 2016-09-15 at 9 17 19 pm"" src=""https://cloud.githubusercontent.com/assets/3218401/18561756/e068cef0-7b89-11e6-9cbf-7045064ec99b.png"">

Any help?

Thanks.
",Maryom,freak4pc
3796,2016-09-15 18:22:33,"Uhm, interesting. That worked fine for me. 

Do you mind trying `pod deintegrate` and `pod install` again ? @Maryom
",freak4pc,Maryom
3796,2016-09-15 18:35:10,"Woohoo! that's amazing @jpsim! Thanks :) 
",freak4pc,jpsim
3796,2016-09-15 18:36:16,"@freak4pc Yes I tried and I got the same error. Anyways, thanks for your help. I think it's better to wait for tomorrow release :)
",Maryom,freak4pc
3796,2016-09-15 18:36:56,"@jpsim That's awesome news :) Real team Thanks for your efforts.
",Maryom,jpsim
3794,2016-06-28 21:01:01,"If you could provide more context, I'd love to help you, @qylibohao! 🙂
",JadenGeller,qylibohao
3794,2016-07-05 22:17:37,"Since I haven't heard back, I'm going to assume that @qylibohao resolved this issue. If this isn't the case, feel free to reopen, and I'd love to help!
",JadenGeller,qylibohao
3794,2016-07-06 06:48:41,"@JadenGeller 
",qylibohao,JadenGeller
3794,2016-07-07 11:00:49,"@bdash thank you ,i already solved the problem.it's the wrong way i declare linkingobjects,
",qylibohao,bdash
3790,2016-06-30 21:10:00,"@austinzheng Expect for a few enums, no, but we'll also need separate APIs for those enums that are algebraic data types.
",JadenGeller,austinzheng
3790,2016-06-30 21:27:45,"@tgoyne In Realm Swift, Realm `Notification`s are currently implemented as a closed enum, so we might want to change that then.
",JadenGeller,tgoyne
3790,2016-06-30 22:10:22,"@austinzheng Good catch!



The above typedef is used to convert all these stringy cases into an enum in Swift!
",JadenGeller,austinzheng
3790,2016-07-02 04:07:08,"@austinzheng Subclassing `RLMLinkingObjects` is problematic because we've marked `init()` unavailable, and every Swift class must have an initializer (even if private). One workaround is to introduce an `initWith__:` method on `RLMLinkingObjects` and override this on the `LinkingObjects` subclass. I guess we would then tell users to mark the class as `@NSManaged` (rather than `@dynamic`) so they would not be required to give it a default value. Does that seem reasonable?
",JadenGeller,austinzheng
3789,2016-06-23 09:16:21,"@JadenGeller The issue occurs when I reload my view very fast. The fetchAllData function gets invoked every time the view is refreshed (visible again). I do this with an NSNotification, which is triggered multiple times since I'm doing it quite fast. 
I tried doing an exception breakpoint and catch the error, but it goes to the Appdelegate class.
",CedricVanAsch,JadenGeller
3789,2016-06-28 21:01:52,"Did you end up figuring this out, @CedricVanAsch? If not, let me know what changed. 🙂
",JadenGeller,CedricVanAsch
3789,2016-06-29 06:44:45,"@JadenGeller I 'patched' it by making sure that that same function isn't called twice in a row (I think because of the Alamofire async call handling, the two requests overlap). This causes the code not to crash anymore.
",CedricVanAsch,JadenGeller
3785,2016-06-22 01:23:41,"@yreaction could you please share a sample project that reproduces this behavior? The code you posted should work.
",jpsim,yreaction
3785,2016-06-30 15:12:07,"@yreaction just following up on my last request for a reproducible sample project. thanks.
",jpsim,yreaction
3785,2016-07-15 16:58:12,"Following up this issue again. If you're having trouble with using Realm while the app is backgrounded, please make sure you've placed the Realm file in a directory and changed the `NSFileProtection` properties of the directory itself. 

Additionally, looking at that sample code, it may look like you're trying to change the protection rights of the `Documents` folder itself. It may be more appropriate to change the location of the default Realm to its own subfolder that can receive the permission rights.

It should just work. So without any sample code, we can't diagnose the problem.

Since @yreaction hasn't responded since the initial post, I'm going to close this issue. But please feel free to re-open it if more help is required.
",TimOliver,yreaction
3784,2016-06-22 05:19:27,"Hi @axenovV! Thanks for your issue!

Form the looks of your code, the reason why you're getting that migration issue is because the `Ration` object model (even though it may be empty) is being added to each Realm file you access.

By default, when you access `Realm()` for the first time, every `Object` subclass in your app is added to that Realm file. You can override this behaviour with the `objectTypes` property in the Realm `Configuration` object.

So, for the `Configuration` object containing your `Ration` objects, make sure to put



And for your main bundle Realm file, make sure to set `objectTypes` to every other class, _except_ `Ration`. This will ensure only `Ration` objects are stored and migrated in that particular Realm file, and the main bundle Realm file is untouched.

I hope that helped! Let me know if you have any other questions!
",TimOliver,axenovV
3784,2016-06-22 09:56:11,"@TimOliver Hi! Thanks its work for me! 👍  But i noticed one thing. When i changed readOnly to false.



I haven't exception. I would like to know what happened. Thanks!
",axenovV,TimOliver
3784,2016-06-22 17:10:01,"No problems @axenovV!

What device were you testing this on? If you're using the iOS Simulator, it's not subject to the same sandbox restrictions as actual devices. If so, when you changed `readOnly` to `false`, the Simulator allowed that Realm file to be migrated. This wouldn't actually happen on a real device though.

I hope that helped!
",TimOliver,axenovV
3784,2016-06-22 20:40:19,"@TimOliver I testing only simulator! Thanks for the answer!
",axenovV,TimOliver
3784,2016-06-22 21:06:53,"Cool! No worries @axenovV! Thanks for that!
Please let us know if you have any more queries in future! :)
",TimOliver,axenovV
3782,2016-07-26 21:17:23,"@mrackwitz can we just close this if it causes issues for Safari and these changes don't have a substantial effect on our bug reports?
",jpsim,mrackwitz
3781,2016-06-30 15:12:46,"@kernel-lj just following up to see if @mrackwitz's last comment was helpful or if you're still having issues.
",jpsim,mrackwitz
3781,2016-06-30 15:12:46,"@kernel-lj just following up to see if @mrackwitz's last comment was helpful or if you're still having issues.
",jpsim,kernel-lj
3777,2016-06-21 01:40:28,"Hi @Voley, the reason Realm is throwing an exception in this case is to indicate that you're missing something in your migration block. Much like Foundation and other Cocoa frameworks, Realm only ever throws runtime exceptions when being used in a way that's not supported.

It would greatly help if you could share the exception message being logged, as that message should tell you what to do to avoid this situation. And help us help you avoid this.

To specifically answer your question:

> How do I catch this issue reliably before the app hits the store?

First, make sure you've read and understand our documentation on [Migrations](https://realm.io/docs/objc/latest/#migrations). Following the rules there will help you avoid these situations.

Another important thing to do is to test your migrations. I recommend that you have a test for migrating each schema version you've shipped with your app to the latest version at all times. This will give you the peace of mind of making sure you're covering as many use cases in testing rather than in production.

Let me know if any of this helps, I'm happy to answer any further questions you may have.
",jpsim,Voley
3777,2016-06-22 17:50:08,"Glad to see you worked this out, @Voley! Don't hesitate to file issues again in the future if you bump into any difficulties!
",jpsim,Voley
3775,2016-06-20 16:34:27,"I hope you'll understand how bleeding edge this is @iJoeCollins, we're doing our best to provide you with support for latest betas, but this hasn't gone through our full QA process yet.

If you're looking for the smoothest experience, I suggest you use the latest _stable_ releases of Xcode and Realm.

That being said, I managed to resolve the linker errors by changing the Podfile again to this:


",jpsim,iJoeCollins
3774,2016-06-20 17:23:30,"Sorry you're affected by this @minhyeok4dev! We're aware of this issue and are tracking this as #2384.

Until then, the only workaround I can suggest is to avoid using the generator directly, instead passing the `Results`.
",jpsim,minhyeok4dev
3771,2016-06-23 01:16:08,"CI failures unrelated. Merging. I addressed @tgoyne's comment about the CocoaPods core symlink failure in 005ad61.
",jpsim,tgoyne
3770,2016-06-20 17:35:49,"@vimalprakashts please let us know if @quver's advice helps.

Generally this kind of issue can surface when Xcode or CocoaPods has a stale cache, which requires those caches to be cleared. We have instructions in our docs covering how to handle this: https://realm.io/docs/swift/latest/#reinstalling-via-dependency-managers
",jpsim,vimalprakashts
3770,2016-06-20 17:35:49,"@vimalprakashts please let us know if @quver's advice helps.

Generally this kind of issue can surface when Xcode or CocoaPods has a stale cache, which requires those caches to be cleared. We have instructions in our docs covering how to handle this: https://realm.io/docs/swift/latest/#reinstalling-via-dependency-managers
",jpsim,quver
3770,2016-06-24 14:22:11,"@jpsim  , after this error. I fallback to the plan core data . I will try this and give update very soon. and sorry for the late reply. 
",vimalprakashts,jpsim
3770,2016-06-24 20:39:48,"Hi @vimalprakashts,

Can you try uncommenting the line `# use_frameworks!` in your podfile (remove the `#`)?
",austinzheng,vimalprakashts
3770,2016-06-27 21:41:01,"@austinzheng there's an uncommented call to `use_frameworks!` a bit further down in the file too.
",jpsim,austinzheng
3770,2016-07-15 16:49:30,"Hi @vimalprakashts! Just pinging this issue. Are you still having trouble, or were you able to get it working in the end? :)
",TimOliver,vimalprakashts
3770,2016-08-02 17:41:16,"@ntokozotep please file a new issue taking care to fill out the new issue template, including full steps to reproduce so we can help you.
",jpsim,ntokozotep
3769,2016-06-18 21:07:52,"Thanks for the PR, @Anviking! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,Anviking
3769,2016-06-20 17:51:15,"Hi @Anviking, thanks for doing this (and accepting our CLA, I just verified that). This would bring us back to the behavior in Swift 2.2, which I'm in favor of. Realm can never guarantee that an object property will _always_ be fulfilled, but if the user (e.g. you) explicitly ignores that, we should continue to support that behavior IMHO.

We also had unit tests that verified this behavior in Swift 2.2 ([source](https://github.com/realm/realm-cocoa/blob/9c978d96fc3e6cbdf446a0e2b28591434e52daa3/RealmSwift-swift2.2/Tests/ObjectSchemaInitializationTests.swift#L190-L197)). Could you also re-introduce these in the Swift 3 tests please?
",jpsim,Anviking
3769,2016-06-20 18:58:58,"@jpsim done!
",Anviking,jpsim
3769,2016-06-27 21:58:07,"Thanks for updating this @Anviking! Just had one last comment about the unit test.
",jpsim,Anviking
3769,2016-06-28 17:54:27,"Looks good. Thanks for your contribution @Anviking!
",jpsim,Anviking
3767,2016-06-20 18:32:01,"@JadenGeller could you please add a test for this, also verifying the message string, in `ObjectSchemaInitializationTests.testInvalidObjects`?
",jpsim,JadenGeller
3767,2016-06-20 19:08:12,"@bdash @jpsim @mrackwitz I've made the suggested changes. I feel that the exception message may be a bit confusing, so please provide feedback if you agree.

> Can't persist NSNumber directly: use a Swift-native number type or provide a default value, which allows to infer the type
",JadenGeller,jpsim
3767,2016-06-21 21:21:20,"@jpsim How should I go about ""verifying the message string""? The `named:` parameter of `assertThrows` checks an exception name, not message, and the function `assertThrowsWithReasonMatching` is only found on `RLMTestCase`, not `TestCase`. Is this a mistake?
",JadenGeller,jpsim
3767,2016-07-15 20:40:36,"@bdash @jpsim I made the changes you requested. I'll merge this later today if there are no objections.
",JadenGeller,jpsim
3765,2016-06-17 09:40:42,"@modLX4 what version of Realm/Xcode you use?

Your model properties should be defined like this:



> Because Realm uses different storage formats for different types of numbers, the property must be tagged with one of RLMInt, RLMFloat, RLMDouble, or RLMBool. All values assigned to the property will be converted to the specified type.

See more at https://realm.io/docs/objc/latest/#optional-properties.

And also there is no need to use `stringWithFormat:` for building `NSPredicate`, you can just use `[NSPredicate predicateWithFormat:@""eventID == %@ AND profileID == %@"", serchEventID, serchProfileID]`.
",stel,modLX4
3765,2016-06-22 01:24:41,"thanks @modLX4, keep us posted!
",jpsim,modLX4
3765,2016-06-30 15:10:46,"@modLX4 I'm assuming this worked for you? Closing this issue now.
",jpsim,modLX4
3763,2016-06-28 14:31:21,"I can confirm that this is a problem and could locate the root cause.

The problem here is that there is a name overlapping of the build product of the static library target generated by CocoaPods (`libRealm-iOS.a`) and the vendored static library used by the podspec (`librealm-ios.a`). Even though the name is not exactly identical, clang's linker is case-insensitive and uses the first matching according to the order of the `LIBRARY_SEARCH_PATHS`. As both are required changing the order doesn't help.

Usually the linter ensures that a pod can be built and included in a project. But it uses frameworks by default and doesn't additionally check whether a pod can be used in the integration mode with static libraries.

This must be fixed in CocoaPods. 

As an alternative workaround to what @stel proposed before, you could also declare `use_frameworks!` in your Podfile and use frameworks, while this will break backwards-compatibility to iOS 7.0 for distribution via the AppStore.
",mrackwitz,stel
3763,2017-03-21 00:06:58,"Is this issue still open?  I cloned @dvor repo and updated it to current versions and my desired project structure with the shared code between iOS and OS X in a ""Kit"".  Here is the repo.  https://github.com/jcmendez/ReproducingCocoaRealmIssue

If I use `use_frameworks!` it builds, but I guess that's the same as @mrackwitz mentions above.  However on the actual project I'm trying to use this, even with `use_frameworks!`, I keep getting a bunch of undefined symbols (below) - any ideas?

`
",jcmendez,mrackwitz
3763,2017-03-21 00:06:58,"Is this issue still open?  I cloned @dvor repo and updated it to current versions and my desired project structure with the shared code between iOS and OS X in a ""Kit"".  Here is the repo.  https://github.com/jcmendez/ReproducingCocoaRealmIssue

If I use `use_frameworks!` it builds, but I guess that's the same as @mrackwitz mentions above.  However on the actual project I'm trying to use this, even with `use_frameworks!`, I keep getting a bunch of undefined symbols (below) - any ideas?

`
",jcmendez,dvor
3763,2017-03-22 19:56:30,"I cloned your project @jcmendez and couldn't reproduce the compilation failures with CocoaPods 1.2.0 and Xcode 8.2. Perhaps update your version of CocoaPods to confirm that the issue is still occurring there?

Deleting the CocoaPods cache, clearing derived data, cleaning your project, running `pod deintegrate && pod install --verbose` are also good things to try.

Looks like your repro case and real project are different enough to not produce the same results. Could you update your repro project to trigger the same undefined symbols errors?

Also keep in mind that Swift frameworks (such as the `RealmSwift` pod) _require_ `use_frameworks!`, so removing that line from your `Podfile` isn't _supposed_ to work.",jpsim,jcmendez
3763,2017-03-24 16:00:39,"@jpsim - thanks so much for looking into this.  I think the easiest is for me to give you access to the actual repo where the issue happens.  I'll follow up with a private invite

The branch `admin` on that repo starts to build a Mac app for managing some of the data there.  The DockKit kit contains the shared classes between client and admin.

Here is the partial log of the failure to build Realm-OSX

`",jcmendez,jpsim
3763,2017-03-24 17:33:37,Hey @jpsim - running `pod deintegrate && pod install --verbose` did it.  Thanks! ,jcmendez,jpsim
3761,2016-06-20 18:04:41,"@emuye could you please share a sample project with us, along with the steps you're taking to benchmark this? It'll greatly help us make sure we're looking at the right thing.
",jpsim,emuye
3761,2016-06-21 01:41:17,"@emuye thanks for the extra info, just following up on my previous request for a sample project. Thanks!
",jpsim,emuye
3761,2016-06-22 01:25:38,"If it's a repository on GitHub, you could give access to my account: @jpsim. Or you could email a zip archive of the codebase to help@realm.io
",jpsim,jpsim
3761,2016-06-22 18:15:40,"We're continuing the conversation via email since the issues reported are specific to @emuye's application. I'll update this issue with whatever information may have more general implications once we know more.
",jpsim,emuye
3759,2016-06-17 23:05:27,"@austinzheng fantastic, that's great (unless I'm missing something)
",jpsim,austinzheng
3758,2016-06-16 20:50:48,"Hi @afriedman94,

It looks like you're still having issues. It shouldn't be necessary to specify the `:git =>` option in CocoaPods.

Would you be willing to share the version of CocoaPods you're using? You can check this using the command `pod --version`.

We have a couple of CocoaPods-related troubleshooting tips in our [documentation](https://realm.io/docs/swift/latest/#reinstalling-via-dependency-managers). In particular, you should try cleaning your build folder, and resetting your project's CocoaPods state and caches using the Terminal commands given.

Hope this helps; if you have any questions please do let us know, either in this ticket or by opening a new issue. Thanks!
",austinzheng,afriedman94
3758,2016-07-13 02:57:53,"@afriedman94 hey, u using the alamofire and realm together?
",xuanzi23,afriedman94
3758,2016-07-13 15:27:10,"@xuanzi23 yes, why? 
",afriedman94,xuanzi23
3758,2016-07-14 01:33:58,"@afriedman94 I have few question to ask you about the alamofire and realm work together, May I?
",xuanzi23,afriedman94
3758,2016-07-14 13:39:44,"@xuanzi23 sure, this is not really the right place though. Do you use slack? my email is andrew.friedman94@gmail.com
",afriedman94,xuanzi23
3758,2016-07-15 03:52:50,"@afriedman94 invited u. my email is lawlierxuanzi@gmail.com
",xuanzi23,afriedman94
3758,2016-07-17 02:40:59,"I met the same problem and I find the reason. @afriedman94 

Solution:
1. Open terminal and run `pod cache list`.
2. Find Realm and RealmSwift.
3. Run `pod cache clean Realm` if you find Realm in step 2, then clean the RealmSwift in the same way.
4. Run `pod install` in the project path.
",talisk,afriedman94
3758,2016-08-09 16:45:53,"@donaldking, please file a new bug report and provide the information outlined in the [Filing Issues](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#filing-issues) section of the documentation on contributing so we can help you.
",bdash,donaldking
3758,2016-08-10 03:23:13,"@donaldking According to my solution, can you fix your problem?
",talisk,donaldking
3758,2016-08-10 15:35:01,"@bdash @talisk Yes this solves the issue for me. Thanks! :)
",donaldking,bdash
3758,2016-08-10 15:35:01,"@bdash @talisk Yes this solves the issue for me. Thanks! :)
",donaldking,talisk
3757,2016-06-16 11:26:37,"@codesourse please, provide more info by following the guidelines for new issues.
",stel,codesourse
3756,2016-06-16 09:05:01,"Hi @anddygon! You can use one of third party model mapping framework listed [here](https://github.com/realm/realm-cocoa/issues/694#issuecomment-144785299). I've answered [your question on Stack Overflow](http://stackoverflow.com/questions/37851673/realmswift-control-reflection-process) also, so will close this issue for now.
",stel,anddygon
3755,2016-06-19 10:57:17,"@JadenGeller Yeah that would probably do the trick.
",danielrhodes,JadenGeller
3752,2016-06-15 23:49:21,"@YHSX88 looks like you're not set up with git SSH access. Try https:


",jpsim,YHSX88
3752,2016-06-16 07:02:59,"@YHSX88 Btw, if you have problems connecting to github over ssh on Sierra, you might be using a now deprecated dsa-key. See http://superuser.com/a/963029 on modifying PubkeyAcceptedKeyTypes to override this.
",thabz,YHSX88
3752,2016-06-16 17:15:14,"Hi All
To give you update @thabz  I'm using still El Capitan but thanks for the others that will check the issue.
@jpsim that worked for me, however the only problem (I feel I need to mentioned it :) ). I was using Charts/Realm repo and because of that I got error while trying to update cocoa pods:

**[!] Unable to satisfy the following requirements:
- `RealmSwift (from`https://github.com/realm/realm-cocoa.git`, branch `master`)`required by`Podfile`
- `RealmSwift (~> 0.97)` required by `Charts/Realm (2.2.1)`**

But of course this is not of your problem :) 

thank you all for your time 

Best Regards
@YHSX88
",YHSX88,jpsim
3752,2016-06-16 17:15:14,"Hi All
To give you update @thabz  I'm using still El Capitan but thanks for the others that will check the issue.
@jpsim that worked for me, however the only problem (I feel I need to mentioned it :) ). I was using Charts/Realm repo and because of that I got error while trying to update cocoa pods:

**[!] Unable to satisfy the following requirements:
- `RealmSwift (from`https://github.com/realm/realm-cocoa.git`, branch `master`)`required by`Podfile`
- `RealmSwift (~> 0.97)` required by `Charts/Realm (2.2.1)`**

But of course this is not of your problem :) 

thank you all for your time 

Best Regards
@YHSX88
",YHSX88,thabz
3752,2016-06-16 17:15:14,"Hi All
To give you update @thabz  I'm using still El Capitan but thanks for the others that will check the issue.
@jpsim that worked for me, however the only problem (I feel I need to mentioned it :) ). I was using Charts/Realm repo and because of that I got error while trying to update cocoa pods:

**[!] Unable to satisfy the following requirements:
- `RealmSwift (from`https://github.com/realm/realm-cocoa.git`, branch `master`)`required by`Podfile`
- `RealmSwift (~> 0.97)` required by `Charts/Realm (2.2.1)`**

But of course this is not of your problem :) 

thank you all for your time 

Best Regards
@YHSX88
",YHSX88,YHSX88
3752,2016-06-19 00:34:46,"The above instructions from @jpsim didn't work for me, manually copying out the realmSwift 3.0 folder files into the pod did.
",plummer,jpsim
3752,2016-06-24 17:28:26,"Thanks for the clarification @austinzheng.
I'll stop banging my head and try to move back to Xcode 7 for now.
",warpling,austinzheng
3752,2016-06-24 20:37:52,"@warpling Was the issue blocking you the code signing issue? I have a workaround if you're interested, although you probably shouldn't rely on it as anything more than a temporary hack. (Probably do it on a git branch or something just in case.)
",austinzheng,warpling
3752,2016-06-24 20:50:56,"@austinzheng I believe it was once I got everything compiling. Yeah I've been bouncing between an experimental branch, I'll try anything at this point if you don't mind sharing!
",warpling,austinzheng
3752,2016-10-04 16:28:58,"@YHSX88 , I am trying to use Charts/Realm too. Did you find a solution to the issue?
",maharr2,YHSX88
3752,2017-01-23 12:36:41,"please add the pod dependency as 

@jpsim just forgot to mention the submodule I suppose.

pod 'Realm', git: 'https://github.com/realm/realm-cocoa.git',:submodules => true, branch: 'master'
pod 'RealmSwift', git: 'https://github.com/realm/realm-cocoa.git',:submodules => true, branch: 'master'",MoinPansare,jpsim
3746,2016-08-02 05:43:50,"@bdash consider it's done
",liuxuan30,bdash
3746,2016-08-26 20:26:47,"@romainfrancez we're blocked on [SR-1779](https://bugs.swift.org/browse/SR-1779).
",jpsim,romainfrancez
3744,2016-11-29 21:49:43,"> Any updates on a fix for this?

I've commented on [SR-1768](https://bugs.swift.org/browse/SR-1768) to follow up.

@isoiphone would you advise against adding `@inline(never)` to `next()` in `RLMSupport.swift` directly? If that works around the issue, that may be the best way to resolve it short term.",jpsim,isoiphone
3744,2016-12-07 03:01:23,"The initial issue reported here appears to be resolved with Swift 3: https://github.com/nevil/Bugs/pull/1

I think the issue reported by @isoiphone is unrelated. So I'll be closing this issue now.",jpsim,isoiphone
3743,2016-06-14 08:59:05,"@stel I've tested with print for both sqlite and realm. And i realize that realm compare every single record to the whole matched results. SQLite doesn't. It prints the results only 1/10 compare to the Realm. In the SQLite, it has property called `deterministic` https://www.sqlite.org/c3ref/create_function.html 

> SQLITE_DETERMINISTIC to signal that the function will always return the same result given the same inputs within a single SQL statement

Realm doesn't have this so i think thats why i calculate every single record in the sorting result.
",Tom29,stel
3743,2016-06-23 01:26:55,"Hopefully Realm's built-in sorting support is enough for your needs @Tom29. If not, please keep an eye on #1277 and #1265 for improvements in this space.
",jpsim,Tom29
3742,2016-06-14 00:56:19,"@tgoyne @jpsim @bdash Final ping; I've commented out the `Sequence` extensions on the Objective-C types per JP, and am ready to merge once I get an approval.
",austinzheng,jpsim
3742,2016-06-14 00:56:19,"@tgoyne @jpsim @bdash Final ping; I've commented out the `Sequence` extensions on the Objective-C types per JP, and am ready to merge once I get an approval.
",austinzheng,tgoyne
3739,2016-06-17 07:16:45,"I am going to hop in here.
I too have updated to Realm 1.0.1 and changed the lines where i had to with the new code (see post above by @jamikado).
Unfortunately I now get an empty list where I got some result with the Realm version I used before.
Nothing else was changed. Is this known?

EDIT:
Okay this is strange.

You literally have to have for example this:



And are not allowed to have this:


",ilendemli,jamikado
3739,2016-06-20 18:28:23,"@ilendemli glad you worked it out, and sorry for the confusion. Realm models should be defined exactly as the documentation describes: https://realm.io/docs/swift/latest/#models

We hope to see further improvements to Swift's reflection mechanism that would allow us to be more flexible with how users define models. If you agree, please file a radar or a Swift bug and we'll be happy to dupe or 👍.

I'll be closing this issue since it seems everyone who's chimed in has since been able to adapt their models to conform to the necessary syntax.
",jpsim,ilendemli
3738,2016-06-10 21:47:25,"thanks for the suggestion @likers! I've made the change and it's now pending review from the person who maintains the Chinese version of our docs.
",jpsim,likers
3735,2016-06-23 01:23:57,"I'm closing this since we haven't heard back from @lucasp90 in a little while.
",jpsim,lucasp90
3735,2016-06-23 13:22:46,"@loveforgeter If you have cocoapods 1.0, make sure your build settings for ""user paths"" or something hasn't been overriden in your target
",cbess,loveforgeter
3735,2016-07-01 09:58:44,"Thanks for letting us know, @lucasp90! Glad to hear that everything is fine now :)
",stel,lucasp90
3735,2016-07-12 11:16:07,"@thegreatmichael what version of CocoaPods you use? Try to upgrade to the latest 1.0.1 version. Also check ""Headers search paths"" in your project's build settings, make sure that it doesn't override CocoaPods path.
",stel,thegreatmichael
3735,2016-07-20 02:46:43,"thanks for checking in @stel, i am on 1.0.1 /-: My `User Header Search Paths` is `$(PODS_ROOT)` `recursive` and `$(PODS_ROOT)/ionicons` `recursive`.

**update:** 
so, i just started at the top of this thread again, I (have my project working fine on another machine, and so I) checked out my project again, did as in https://github.com/realm/realm-cocoa/issues/3735#issuecomment-226522681 and made sure my `User Header Search Paths` is empty, and doggonit, it works!!
",thegreatmichael,stel
3735,2016-07-22 13:42:39,"@thegreatmichael faced with this issue by myself today :) My solution was to remove all Xcode's Derived Data (or `alt+shift+cmd+K` in project). Glad to hear that you also resolved this issue :)
",stel,thegreatmichael
3734,2016-06-13 08:12:19,"@tgoyne The boolean trick worked, thanks!

So you're saying everyone migrates this way and has tons of warnings in their migration file because of unused variables? (I don't mind if that's the way to go, but if there is a way to 'fix' the ~20 warnings flooding my screen I would like to know it)
",erkro1,tgoyne
3732,2016-06-23 01:24:31,"@BObereder hi, just following up on @mrackwitz's last comment. We'd love to help.
",jpsim,mrackwitz
3732,2016-06-23 01:24:31,"@BObereder hi, just following up on @mrackwitz's last comment. We'd love to help.
",jpsim,BObereder
3732,2016-06-30 15:11:29,"Closing since we haven't heard back from @BObereder in a while.
",jpsim,BObereder
3730,2016-07-05 23:18:01,"@jpsim I would think that overriding the default configuration would be more elegant, as the test writer could just use the default Realm. However, I defer to your judgment. Having a specific `testRealm` would also make the implementation cleaner, so I'm +1 on that overall.
",austinzheng,jpsim
3730,2016-11-15 22:53:37,"Marking `S:On Hold` until @austinzheng can get back to this.
",jpsim,austinzheng
3723,2016-06-11 14:44:58,"@jleach you're awesome. I had this same problem and it was driving me insane. Your process worked perfect.
",haligen,jleach
3722,2016-06-08 04:29:00,"@jpsim ..I am really sorry, I forgot to mention but I am using Objective C
",vamshikrishna-iitbhu,jpsim
3722,2016-06-08 05:32:04,"@jpsim Also along with the model, I want to understand how to insert this data into database.
",vamshikrishna-iitbhu,jpsim
3722,2016-06-08 10:30:08,"@jpsim 


",vamshikrishna-iitbhu,jpsim
3722,2016-06-08 13:34:21,"@mrackwitz Now I am caught in this error.
Terminating app due to uncaught exception 'RLMException', reason: 'Property 'text' is declared as 'Text', which is not a supported RLMObject property type. All properties must be primitives, NSString, NSDate, NSData, NSNumber, RLMArray, RLMLinkingObjects, or subclasses of RLMObject.
",vamshikrishna-iitbhu,mrackwitz
3722,2016-06-23 01:25:28,"I hope we were able to answer all your questions, @vamshikrishna-iitbhu! I'm closing this issue now since we haven't heard back from you in a little while.
",jpsim,vamshikrishna-iitbhu
3722,2016-07-05 15:38:50,"@vamshikrishna-iitbhu properties in your model not present in the `value` you pass in to the initializer or `createOrUpdate:` won't be affected.
",jpsim,vamshikrishna-iitbhu
3721,2016-06-08 04:28:49,"@jpsim Thank you for sharing time to help me with sample project. My fault, deep in the classes I've found the script `[realm deleteAllObjects];` Sorry....

Is there a method to enable realm transactions' logging? e.g. new record created in 'KeyValue', all objects in default realm deleted .... etc.
",mixdesign,jpsim
3715,2016-06-14 13:45:50,"@kharmabum do you have any updates on this? Thanks!
",stel,kharmabum
3715,2016-06-14 19:19:16,"@stel working on putting together a project to repro this and https://github.com/realm/realm-cocoa/issues/3412 Will try to get something together by the end of the work. 
",kharmabum,stel
3715,2016-06-14 19:21:48,"@kharmabum thank you!
",stel,kharmabum
3715,2016-12-13 00:26:24,"@kharmabum since we've fixed a bug that causes this exact stack trace months ago, if you're still experiencing something similar you'll need to share a repro case to differentiate and for us to make progress on it.",jpsim,kharmabum
3710,2016-06-06 22:20:58,"@MihaelIsaev have you read and performed the checks explained in the technical note referenced in the iTunes Connect email you received?

From [Technical Q&A QA1788 - Building a Position Independent Executable](https://developer.apple.com/library/ios/qa/qa1788/_index.html):

> ## Steps for building your application as PIE
> 1. In Xcode, select your target in the ""Targets"" section, then click the ""Build Settings"" tab to view its settings.
> 2. For iOS apps, set iOS Deployment Target to iOS 4.3 or later. For Mac apps, set OS X Deployment Target to OS X 10.7 or later.
> 3. Verify that Generate Position-Dependent Code is set at its default value of NO.
> 4. Verify that Don't Create Position Independent Executables is set at its default value of NO.
",jpsim,MihaelIsaev
3709,2016-06-06 09:29:02,"@bdash I just updated to Xcode 7.3.1 (Apple didn't show any update since I ""only"" had 12 GB of free space which seems not to be enough for Xcode O.o) and in my first test within the simulator it worked! Thanks for the suggestion, I'll report if this happens again but for now it seems to be solved. 👍 

Seems like the binary needs to be compiled with the exact same Xcode version like used in, right?
",Dschee,bdash
3707,2016-06-07 20:29:11,"Thanks for the help @jpsim & @bdash 
I don't know how I missed that file being owned by root... It seems to be the obvious problem (of course I tried `chown`-ing the `default.realm` and `default.realm.lock` files but not the `.note` :/ )

No clue how that happened either, the app should not be launched as root (not sure if that's even possible).
Thanks again!
",floorish,jpsim
3707,2016-06-07 20:29:11,"Thanks for the help @jpsim & @bdash 
I don't know how I missed that file being owned by root... It seems to be the obvious problem (of course I tried `chown`-ing the `default.realm` and `default.realm.lock` files but not the `.note` :/ )

No clue how that happened either, the app should not be launched as root (not sure if that's even possible).
Thanks again!
",floorish,bdash
3705,2016-06-04 03:32:42,"Thanks, @dukemike! `NSNumber?` isn't a property type that can be persisted by Realm Swift. You can declare optional numeric properties using syntax like `let location = RealmOptional<Int>()`. See the [Realm Swift property cheatsheet](https://realm.io/docs/swift/latest/#cheatsheet) for more details.

We should certainly handle this more gracefully than crashing, though!
",bdash,dukemike
3705,2016-06-05 16:41:57,"@Dschee, that does not look to be the same issue as is being tracked here. Please file a new issue with details about what you're seeing.
",bdash,Dschee
3703,2016-06-03 16:38:43,"Hi @balazsgerlei,

Thanks for getting in touch. I tried reproducing the issue you reported and wasn't able to get it to trigger.

I put together a short code sample showing how I attempted to reproduce your problem. This code sample runs properly on my machine and prints out the names of the dogs in question to the console. 

Whenever you have time, please take a look and show me if the code you're having trouble with differs from my sample code in any important way. Alternately, you can try running my code in a new Xcode project with Realm Swift and see if it works or fails.

https://gist.github.com/austinzheng/ca6dcbccd733631d2376bcdf73317dd2

Please let us know if you have any other questions.
",austinzheng,balazsgerlei
3703,2016-06-03 20:09:53,"@balazsgerlei, can you share more about your `setUp` / `tearDown` methods? We'd love to be able to reproduce this to understand why the crash is happening.
",bdash,balazsgerlei
3702,2016-06-03 17:02:37,"Hi @lehmberg,

Thanks for filing a ticket, and apologies for the inconvenience. While we investigate this problem, could you try explicitly creating the intermediate directory (`Realm/`) before trying to open the Realm using your custom path?
",austinzheng,lehmberg
3702,2016-06-13 11:58:24,"@lehmberg What was the conclusion of this issue? I am facing the exact same thing.


",gapl,lehmberg
3702,2016-06-13 12:04:29,"@gapl  Have not heard anything from realm yet yet but still have the issue
",lehmberg,gapl
3702,2016-06-14 13:37:37,"@austinzheng Any news on this?
",lehmberg,austinzheng
3702,2016-06-14 14:46:44,"Sorry, I’m still looking into this. I hope to have more to share soon.

> On Jun 14, 2016, at 6:37 AM, lehmberg notifications@github.com wrote:
> 
> @austinzheng https://github.com/austinzheng Any news on this?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/realm/realm-cocoa/issues/3702#issuecomment-225882981, or mute the thread https://github.com/notifications/unsubscribe/ADhCjkReWtfR-qKwnB871397pdfQp_hXks5qLq6ogaJpZM4ItXlm.
",austinzheng,austinzheng
3702,2016-06-14 15:01:40,"great thanks

Den 14. jun. 2016 kl. 16.47 skrev Austin Zheng <notifications@github.com<mailto:notifications@github.com>>:

Sorry, I'm still looking into this. I hope to have more to share soon.

> On Jun 14, 2016, at 6:37 AM, lehmberg <notifications@github.com<mailto:notifications@github.com>> wrote:
> 
> @austinzheng https://github.com/austinzheng Any news on this?
> 
> ## 
> 
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub https://github.com/realm/realm-cocoa/issues/3702#issuecomment-225882981, or mute the thread https://github.com/notifications/unsubscribe/ADhCjkReWtfR-qKwnB871397pdfQp_hXks5qLq6ogaJpZM4ItXlm.

## 

You are receiving this because you modified the open/close state.
Reply to this email directly, view it on GitHubhttps://github.com/realm/realm-cocoa/issues/3702#issuecomment-225905330, or mute the threadhttps://github.com/notifications/unsubscribe/ARaopBB1LLnOJtE3nVeU7CBBYJI6xoO2ks5qLr7igaJpZM4ItXlm.
",lehmberg,austinzheng
3702,2016-06-20 07:06:44,"@austinzheng Do need my help to test something out. Maybe to help pin down which that broke the functionality?

Best
Alex 
",lehmberg,austinzheng
3702,2016-06-24 20:29:58,"Hi @lehmberg, 

I'm building a repro case to try to track down the problem you reported. Could you let me know where you are running the setup code to set the Realm file path, and where you are running the code to retrieve an instance of a Realm? (Quick question: does the crash happen when you run the setup code, or when you use `try! Realm()` or similar to get a Realm?)

I noticed you mentioned that moving some of your setup code to the app delegate fixed the issue in your case so the point at which setup happens during the application lifecycle might be important.

Thanks, and let me know if you have any questions!
",austinzheng,lehmberg
3699,2016-06-17 00:08:27,"Where'd this branch go? @austinzheng Has it already been merged?
",JadenGeller,austinzheng
3696,2016-06-02 16:16:14,"Hi @jazz-mobility,

Thanks for getting in touch with us. Would you be willing to share the definition of your `SPProductModel` class?
",austinzheng,jazz-mobility
3696,2016-06-02 16:52:11,"Hi @jazz-mobility,

Unfortunately, the type of object contained in an `RLMArray` is inferred by Swift to be `RLMObject`, regardless of what you pass in for the object class name. So you'll have to perform a downcast using `as?` or `as!`:



Swift 3 will have [better support for Objective-C generics](https://github.com/apple/swift-evolution/blob/master/proposals/0057-importing-objc-generics.md), so when Swift 3 comes out you should be able to declare your `RLMArray` as `RLMArray<SPProductModel>`, and get rid of the downcast.

Hope that helps! Let us know if it doesn't, or if you have any further questions.
",austinzheng,jazz-mobility
3695,2016-06-02 16:36:50,"@Kirow's right. Learn more about App Groups in Apple's documentation: https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW61

This is similar to sharing data between an extension and your main app, for which we have some documentation (for tvOS), but it's pretty straightforward: https://realm.io/docs/swift/latest/#tvos
",jpsim,Kirow
3694,2016-06-02 08:45:18,"@xiaodao @JakeLin It's intended behavior. The `RLMRealmConfiguration.schemaVersion` doesn't indicate a version of the file you are trying to open. It is used to set the version of the file to be opened. Then It indicates the version of the file opened.

Use `RLMRealm.schemaVersionAtPath(_:error:)` to get the schema version for a Realm at a given path to check migration is required or not.
",kishikawakatsumi,xiaodao
3694,2016-06-02 08:45:18,"@xiaodao @JakeLin It's intended behavior. The `RLMRealmConfiguration.schemaVersion` doesn't indicate a version of the file you are trying to open. It is used to set the version of the file to be opened. Then It indicates the version of the file opened.

Use `RLMRealm.schemaVersionAtPath(_:error:)` to get the schema version for a Realm at a given path to check migration is required or not.
",kishikawakatsumi,JakeLin
3694,2016-06-02 21:40:23,"@kishikawakatsumi Thanks for your reply.

I've tried `RLMRealm.schemaVersionAtPath(_:error:)` and it could tell me the correct schema version.

But then here comes another problem, now that I'm using this function to check should migrate or not:



and I wanted to execute the migration block only when `shouldDoMigration` returns true.

When I delete the app and then reinstall the app in simulator, everything works fine, I got the error message: 



but the migration block got executed.

And then when I launched the app for the second time, the app crashed with the error:



Do you know why that happened? 

Many thanks.
",xiaodao,kishikawakatsumi
3694,2016-06-02 23:23:27,"@tgoyne we would like to show some spinner during migration, that's why we want to check first. If the migration is not needed, then we can bypass the spinner.
",xiaodao,tgoyne
3694,2016-06-02 23:26:00,"@tgoyne should `schemaVersion` it be `set only`? because we can't get the correct version at some time.
",JakeLin,tgoyne
3694,2016-06-03 00:56:22,"@tgoyne @kishikawakatsumi Sorry, please ignore my code snippet above, I forgot to run 
`config.schemaVersion=1` when we don't need to migration. 

Everything is working fine now, and this issue can be closed.

Just another suggestion, do you think it would be good to mention this in the document? 

`Use RLMRealm.schemaVersionAtPath(_:error:) to get the schema version for a Realm at a given path to check migration is required or not.`

Thanks.
",xiaodao,tgoyne
3694,2016-06-03 00:56:22,"@tgoyne @kishikawakatsumi Sorry, please ignore my code snippet above, I forgot to run 
`config.schemaVersion=1` when we don't need to migration. 

Everything is working fine now, and this issue can be closed.

Just another suggestion, do you think it would be good to mention this in the document? 

`Use RLMRealm.schemaVersionAtPath(_:error:) to get the schema version for a Realm at a given path to check migration is required or not.`

Thanks.
",xiaodao,kishikawakatsumi
3690,2016-06-01 22:29:45,"Thanks for reporting this @irishman1921, I think I know what's happening here.

Depending on how we choose to fix this, it's likely that it'll also fix #2377, but that's a completely symptom, so I'm keeping both these issues open.
",jpsim,irishman1921
3690,2016-08-12 21:17:21,"I've been trying very hard to recreate this, but I'm not sure what the issue is. Can you elaborate @jpsim?
",JadenGeller,jpsim
3690,2016-08-15 16:07:30,"@JadenGeller here's a minimal repro case:



I think the exception message has changed since this issue was first filed.

---

This exception doesn't happen if `[RLMRealm defaultRealm]` is invoked prior to calling `initWithValue:`.
",jpsim,JadenGeller
3689,2016-06-01 17:20:37,"@baydet Because you did not declare `date` property as `dynamic`. 

The String, Double and Object properties of your Object subclasses need to be declared with the dynamic modifier to allow Realm to override the getter and setter of the property. Without this the Swift compiler will access the object's instance variable directly, which doesn't provide any opportunity for Realm to read or write data from the Realm file. See [Realm's model property cheatsheet](https://realm.io/docs/swift/latest/#cheatsheet) for a quick overview of how to declare properties of each of the supported types.
",kishikawakatsumi,baydet
3688,2016-06-01 14:37:10,"@modLX4 The max value of `NSNumber <RLMInt>` is same as 64 bit integer. `1464572538` does not exceed max value. It should work. The error message indicates that a different type of value was assigned the property. 

Could you show your code around assigning the value to `timestamp` for investigation?
",kishikawakatsumi,modLX4
3688,2016-06-14 12:10:24,"@modLX4 do you have any updates on this? Thanks!
",stel,modLX4
3688,2016-06-23 01:22:09,"I hope @kishikawakatsumi's answer helped you @modLX4! We're closing this issue now because we haven't heard back from you in a little while.
",jpsim,kishikawakatsumi
3688,2016-06-23 01:22:09,"I hope @kishikawakatsumi's answer helped you @modLX4! We're closing this issue now because we haven't heard back from you in a little while.
",jpsim,modLX4
3687,2016-06-02 16:39:31,"Hi @tringuyen89, sorry you've been affected by this assertion failure. Have you been able to reproduce the problem? We'd appreciate any information that could help us reproduce this.

Thanks.
",jpsim,tringuyen89
3687,2016-06-14 12:19:29,"This issue was fixed in Realm 1.0.1. @tringuyen89 do you have any updates on this? Thanks!
",stel,tringuyen89
3686,2016-06-01 22:34:23,"Thanks for reporting this @anlaital!
",jpsim,anlaital
3686,2016-06-02 08:35:59,"@anlaital Currently, Realm cannot delete a model class that has **backlink property** and **the class definition no longer exists** when migration. The workaround is to keep leaving the model definition to be deleted.
",kishikawakatsumi,anlaital
3686,2016-09-29 15:56:57,"@kishikawakatsumi so what would be the workaround when I have **deleteRealmIfMigrationNeeded** set to true with backlink properties in a model? We're still in our early days and love the **deleteRealmIfMigrationNeeded** feature for whenever we're throwing new properties in, but my app went into an eternal death spiral when I added a backlink.  
",iantheparker,kishikawakatsumi
3684,2016-05-31 21:37:32,"@tgoyne That makes sense, thanks for the detailed explanation. I'll update the diff accordingly.
",austinzheng,tgoyne
3683,2016-05-31 20:01:25,"@jpsim Do we run swiftlint on the RLMSupport file?
",austinzheng,jpsim
3681,2016-05-31 15:47:48,"@jazz-mobility Yes, you can use Realm Objective-C in pure Swift project. If your model will be rewritten in Realm Objective-C in Swift, like the following:



Above classes can be accessed from both Swift and Objective-C. A disadvantage is a little bit lack of type safety though.
",kishikawakatsumi,jazz-mobility
3680,2016-06-14 12:15:18,"@James4Developer this issue was fixed in CocoaPods 1.0.1, do you have any updates on this? Thanks!
",stel,James4Developer
3678,2016-05-31 04:43:38,"Thanks @bdash! That works :-)
",carvalho-oak,bdash
3677,2016-05-31 15:59:37,"Thanks for taking the time to write this @colemcampbell! We've started looking at Swift 3 [very recently](https://github.com/realm/realm-cocoa/tree/jp-swift-3) and will need to reconsider many parts of the API, not just the interactions with `AnyObject`. You bring up naming, which will be another big one.

Your suggestion to add a `RealmObjectProperty` protocol that all supported Realm types conform to is a good idea that we'll be sure to consider, but might not be enough to support the current use cases. The initializer is designed to accept KVC-compliant input values, for example, that wouldn't be covered by this approach.

We're approaching adding Swift 3 support in 4 phases:
1. Make Realm Swift & its tests compile under the latest Swift 3 snapshot. (done)
2. Make all unit tests pass. (done)
3. Update API naming to reflect Swift 3 API guidelines.
4. Identify high friction areas of the API and improve them.

I'd like to keep this issue open to provide a place where we can discuss potential Swift 3 API design directions, but please keep in mind that we're early in the process.
",jpsim,colemcampbell
3677,2016-08-10 12:55:33,"@jpsim What's the status on steps 3 and 4 now that Swift 3 is approximately 6 weeks from release? What about Swift 2.3 support?
",hartbit,jpsim
3677,2016-08-10 20:26:22,"@hartbit we're maintaining support for the latest Xcode betas for both Swift 2.3 & 3.0 on our `master` branch. Step 3 was mostly done a few weeks ago by @austinzheng and @JadenGeller, though we'll want to review those changes and handle step 4 a bit closer to the Xcode 8 GM release.
",jpsim,hartbit
3676,2016-06-06 22:37:34,"@doronkatz @souzainf3 did following the steps [listed in our documentation](https://realm.io/docs/swift/latest/#cocoapods) help?


",jpsim,doronkatz
3676,2016-06-06 22:37:34,"@doronkatz @souzainf3 did following the steps [listed in our documentation](https://realm.io/docs/swift/latest/#cocoapods) help?


",jpsim,souzainf3
3673,2016-05-30 17:15:15,"@mrackwitz  thanks a lot, that can be a solution, after speaking on forums I understand that Realm Objects are made for data only model part and not made for process part of the model. 

Just a question and I done with this thread, why the Array(realm.objects(RealmClass)) code work with my thumbnail system ? And this is a bad solution for realm based model ?
",leoderbois,mrackwitz
3673,2016-05-30 17:22:21,"@mrackwitz perfect, I fully understand what's wrong with my code thanks ! 
",leoderbois,mrackwitz
3670,2016-05-31 13:59:25,"@smolskyaleksey 

This is due to limitation for Objective-C compiler. The generic constraints for RLMArray need their elements should be a subclass of RLMObject. But Objective-C compiler cannot recognize it from `@class` forwarded declaration.

To resolve this, I think the only way is to declare both @interface in the same file, then declare their properties using Class Extension. Like the following:



See also http://stackoverflow.com/questions/36966858/rlmlinkingobjects-circular-dependency/36987537#36987537
",kishikawakatsumi,smolskyaleksey
3670,2016-06-19 22:49:51,"@kishikawakatsumi I have the same issue and have multiple models that depend on each other.  Would it be wise to fit all models into 1 file using the method above? I have say 4 different models in different files but need to be able to have many-to-many between a few of them without getting this issue, so should I just fit all of their declarations in one file?
",hk,kishikawakatsumi
3670,2016-06-20 18:52:55,"Reopening this since @hk is still having issues with this according to [this tweet](https://twitter.com/henryk/status/744964874594312196).

So to answer your question, yes the classes need to be declared prior to being able to use them as `RLMLinkingObjects` properties to satisfy the Objective-C compiler.

You can do this a number of different ways, as @kishikawakatsumi mentioned above.

You could also have all your models declared in separate files without their linking objects properties, and then in a separate file have class extensions that import the necessary models and expose the linking objects properties from there.

If these solutions don't work for you, please share your models and we'll help you refactor them for all this to work.
",jpsim,hk
3670,2016-06-20 18:52:55,"Reopening this since @hk is still having issues with this according to [this tweet](https://twitter.com/henryk/status/744964874594312196).

So to answer your question, yes the classes need to be declared prior to being able to use them as `RLMLinkingObjects` properties to satisfy the Objective-C compiler.

You can do this a number of different ways, as @kishikawakatsumi mentioned above.

You could also have all your models declared in separate files without their linking objects properties, and then in a separate file have class extensions that import the necessary models and expose the linking objects properties from there.

If these solutions don't work for you, please share your models and we'll help you refactor them for all this to work.
",jpsim,kishikawakatsumi
3670,2016-06-20 19:32:10,"@jpsim you guys are awesome, thanks for following up.  So I decided to go the route of having separate model files and not linking object properties while in a separate file importing the models and then linking relationships, however I get a runtime error of ""unrecognized selector sent to instance"" when trying to access a relationship.  Below is an example of some of the classes:

So there's a User model (User.h) that looks like this:



A current user model that inherits the User model



And then there is a Relationships.h file that, as I said above, links all the relationships between the above models and the rest of them in the application:



Everything compiles properly when I import the Relationships.h file (without it I get errors that the properties don't exist) however when I run it and call currentUser.feed for example it throws an error saying ""unrecognized selector sent to instance"".  Is there something else I need to do for the class extensions in Relatioships.h to work?
",hk,jpsim
3670,2016-06-21 01:32:03,"@hk what that last exception message means is that you have code like this:



but `CurrentUser.users` either doesn't exist or doesn't point to the object on which you've defined this inverse relationship. Instead of just sharing headers for your objects, can you also share the relevant implementations, notably the class methods that further define your models (e.g. `linkingObjectsProperties`, `ignoredProperties`, `primaryKey`, `indexedProperties`, etc.).
",jpsim,hk
3670,2016-06-30 15:13:27,"@hk I hope my last comment was helpful. I'll be closing this since we haven't heard back from you in a little while, but let us know if there's anything more we can do to help!
",jpsim,hk
3667,2016-05-30 07:10:45,"@MihaelIsaev The workaround is adding `currencyName` property to `CompanyCurrencies` for sorting. `currencyName` has the same value as same as `currency.name`. Maintain the values by yourself, though...
",kishikawakatsumi,MihaelIsaev
3666,2016-05-28 12:13:11,"Thanks for the PR, @priteshrnandgaonkar! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,priteshrnandgaonkar
3666,2016-06-01 05:27:25,"Thanks for this @priteshrnandgaonkar.

I would've liked us to update the `ReactKit` dependency at the same time, but it doesn't appear to be actively maintained, or updated for Swift 2.2.

I'll merge this as-is, but if you're looking for other ways to help, moving to another lightweight reactive extensions framework, like [RxSwift](https://github.com/ReactiveX/RxSwift) for example.
",jpsim,priteshrnandgaonkar
3665,2016-07-13 20:12:26,"Do we only imagine this API applying to `RLMCancelationToken`s or also `RLMRealmNotificationToken`s? It doesn't seem to be very useful for the latter and the implementation of each seems pretty different.

If it should only apply to `RLMCancelationToken`s, we'll need to publicly expose their type (as right now we only expose the superclass `RLMNotificationToken`), and it might be a good idea to rename it to something collection-related while we're at it.

If it should apply to both, we need to specifically outline what we expect ignoring`RLMRealmNotificationToken` to do?

//cc @tgoyne @jpsim 
",JadenGeller,jpsim
3665,2016-07-13 20:12:26,"Do we only imagine this API applying to `RLMCancelationToken`s or also `RLMRealmNotificationToken`s? It doesn't seem to be very useful for the latter and the implementation of each seems pretty different.

If it should only apply to `RLMCancelationToken`s, we'll need to publicly expose their type (as right now we only expose the superclass `RLMNotificationToken`), and it might be a good idea to rename it to something collection-related while we're at it.

If it should apply to both, we need to specifically outline what we expect ignoring`RLMRealmNotificationToken` to do?

//cc @tgoyne @jpsim 
",JadenGeller,tgoyne
3665,2016-07-20 21:09:24,"> Is there any info about when this will be available?

It's at least a few weeks away, maybe longer. I do think that @JadenGeller wants to start working on this soon.
",jpsim,JadenGeller
3665,2016-08-23 21:25:51,"Unassigned @JadenGeller based on our conversation from earlier.
",jpsim,JadenGeller
3664,2016-05-28 00:51:45,"@bdash you're absolutely right, though we haven't started porting `Realm/Tests/Swift` at all yet.
",jpsim,bdash
3661,2016-05-31 14:27:50,"It no longer reproduced in my environment. I'll close this issue after a little more investigation. @jpsim 
",kishikawakatsumi,jpsim
3657,2016-05-26 21:44:05,"I'd rather not modify older parts of the changelog @austinzheng. Otherwise these changes look fine to me. Don't forget to update the cocoa docs in the website repo too!
",jpsim,austinzheng
3657,2016-06-14 19:54:05,"I've rebased onto master. Would appreciate a review whenever you have time to spare. @bdash @tgoyne @jpsim
",austinzheng,jpsim
3657,2016-06-14 19:54:05,"I've rebased onto master. Would appreciate a review whenever you have time to spare. @bdash @tgoyne @jpsim
",austinzheng,tgoyne
3657,2016-06-14 23:37:03,"Your last comment seems fine @austinzheng
",jpsim,austinzheng
3653,2016-05-26 04:47:48,"Hi @ehlersd! Sorry to hear you've been experiencing a crash.

Before we proceed, there's a few things I'd like to ask first:
- You're running on Ream 0.98.7, which is quite old at this point, and we've shipped a lot of bug fixes since then. Is there a reason why you haven't updated your copy of Realm?
- Can you please post the model definition for your `DAORealmBeer` object?
- Are you performing any checks to see if `expiredItems` actually contains any objects (i.e. `expiredItems.count > 0`) before starting a Realm transaction?

Please let me know these things as soon as you can! Thanks!
",TimOliver,ehlersd
3653,2016-05-26 14:54:13,"@TimOliver No, I guess I just haven't updated my pods recently.  I will update them and retry.

Also, no, I don't `check for expiredItems.count > 0`.  I can easily do that, but is it required that the array contain at least 1 item?
",ehlersd,TimOliver
3653,2016-05-26 16:02:25,"This looks like #3579, which was fixed in #3603 and included in 0.103.0. @ehlersd could you please update to Realm 1.0 and let us know if you're still seeing this?
",jpsim,ehlersd
3653,2016-06-01 14:48:55,"@jpsim Updating seems to have resolved the error I was seeing.  I will address it again if it reappears.
",ehlersd,jpsim
3653,2016-06-01 14:58:25,"@SteveTrombley @shanemileham you're both seeing #3655, which was discovered in this thread but is otherwise unrelated to this issue.
",jpsim,shanemileham
3653,2016-06-01 14:58:25,"@SteveTrombley @shanemileham you're both seeing #3655, which was discovered in this thread but is otherwise unrelated to this issue.
",jpsim,SteveTrombley
3649,2016-05-30 19:10:43,"Thanks @jpsim 👍 
",petersonfs,jpsim
3647,2016-05-25 17:05:51,"@KevinChris, I think you wanted to ask this at https://github.com/realm/realm-java.
",bdash,KevinChris
3639,2016-05-24 17:44:59,"Thanks @jpsim! SwiftLint is super useful.
",austinzheng,jpsim
3637,2016-05-27 23:57:23,"I hope @tgoyne's explanations are satisfactory for you @slashburn. If you have any further questions, don't hesitate to comment again and we can reopen this, or you can file a new issue.
",jpsim,tgoyne
3637,2016-05-27 23:57:23,"I hope @tgoyne's explanations are satisfactory for you @slashburn. If you have any further questions, don't hesitate to comment again and we can reopen this, or you can file a new issue.
",jpsim,slashburn
3636,2016-05-23 19:07:02,"ah, thanks for fixing this @MarkVillacampa! We removed support for mixed properties a few versions ago but forgot about this example!
",jpsim,MarkVillacampa
3635,2016-05-25 22:08:40,"Hello @tengyifei,

Unfortunately, you are right - generic classes inheriting from Objective-C base classes cannot be fully represented in Objective-C, and so it's not possible to do what you want. The generic Realm Swift collection classes are thin wrappers around their Objective-C equivalents, and do not run into this limitation (as they do not need to be introspected).

Please feel free to reach out if you have any further questions.
",austinzheng,tengyifei
3635,2016-05-26 18:07:05,"I certainly understand that, but it doesn't change anything in my last response.

Here's something we _could_ technically do, but it'd be a ton of work and IMO likely not worth the investment:

Allow `Object` to be subclassed into generic types and require that all specializations be passed in to `Realm.Configuration.objectTypes` when creating the Realm.

Despite what @austinzheng just wrote, I _think_ Swift's reflection support would be enough to support this, but I'm not 100% sure.
",jpsim,austinzheng
3627,2016-05-26 15:43:12,"@AlejandroDeveloper please file a new issue, taking care to fill out the issue template and to share any relevant information that could help us reproduce your build issues.
",jpsim,AlejandroDeveloper
3624,2016-05-20 06:51:35,"@jpsim Addressed feedback, thanks.
Should `dynamicObjectForPrimaryKey()` also be changed as same as this?
",kishikawakatsumi,jpsim
3624,2016-05-24 06:58:27,"@jpsim Change `dynamicObjectForPrimaryKey()` and adde tests
",kishikawakatsumi,jpsim
3619,2016-05-19 18:52:16,"Hi @mrackwitz, here's more info:

I get the problem if I create a default Swift OSX application from Xcode and add the frameworks in. I've created a sample project here: https://github.com/dmendis/realm-test

As mentioned earlier, the app builds fine. It just fails immediately at runtime.

I ran `xcrun swift -version` on the Terminal and go this output:



Xcode Version is `7.3 (7D175)`
I don't have any other version of Xcode installed in the system.

If I drop the framework from `0.103.0-objc/osx/Realm.framework` there is no runtime issue. (Note ObjC)

I will try to find more clues to diagnose this. Hope this helps to kick start something. Can you confirm the project works for you?
",dmendis,mrackwitz
3619,2016-05-20 21:25:19,"@dmendis could you please try again with Xcode 7.3.1? I can't reproduce it with that version of Xcode...
",jpsim,dmendis
3619,2016-09-23 23:32:36,"@indieshack please file a new issue taking care to fill out the new issue template so we can investigate.
",jpsim,indieshack
3615,2016-05-19 18:18:39,"I'm glad to see I'm not the only one that's come across this problem.  Like @conradev, I've also been unable to purposefully reproduce the error.

One thing I will add, is the first time I saw this error was after upgrading to 0.102 from 0.98.2.
",SidMcLaughlin,conradev
3612,2016-05-18 21:11:35,"Thanks for the PR, @tim12s! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,tim12s
3612,2016-05-18 21:54:56,"Hi @tim12s, have you seen #694 and the links it contains to frameworks that support mapping from JSON to Realm objects? Those frameworks are likely to be a better place to handle converting dates formatted as strings into `NSDate`s for consumption by Realm.
",bdash,tim12s
3612,2016-07-12 15:45:29,"Hi @tim12s, thanks for taking the time to submit this pull request, and my apologies for taking so long to get back to you about it. As I mentioned in an earlier comment Realm doesn't do any parsing of data itself, and we don't intend to add parsing at this time. We feel this behavior is a much better fit for a JSON mapping layer rather than Realm itself.
",bdash,tim12s
3610,2016-05-24 22:43:26,"@CYBoys, if there's something that you'd like help with you'll need to explain in more detail what it is.
",bdash,CYBoys
3609,2016-05-19 01:30:48,"@jpsim After add unit test target in my Podfile, build successful. Thank you!
",nixzhu,jpsim
3604,2016-05-18 05:45:16,"Implementation is 👍 

For tests, I worried about testing only one code path that custom schema was set. It would be nice if there is a test for another code path not to set custom schema. @jpsim 
",kishikawakatsumi,jpsim
3604,2016-05-18 19:11:44,"Thanks for the suggestions to improve documentation @mrackwitz, I've made some modifications.
",jpsim,mrackwitz
3603,2016-05-17 21:01:09,"@austinzheng, are you asking why a user would want to use a `Results` that depends on a deleted object? The short answer is that it can be difficult in an application to know that an object a `Results` depends on has been removed. It's more useful in most contexts for a `Results` to be empty than to throw an exception when accessed.
",bdash,austinzheng
3600,2016-05-26 22:10:33,"@kishikawakatsumi why doesn't this work when passing to `XCTAssertNotNil` directly? Does it work most of the time, but is broken at other times? Are there other tests that need to be updated? If there's a bug in XCTest, have you filed a radar?
",jpsim,kishikawakatsumi
3596,2016-05-18 21:58:39,"@tgoyne Thanks, I'll give it a go.
",xiaodao,tgoyne
3591,2016-05-16 18:11:05,"@lukaskollmer please post the output of the following commands if it's still not working after running them:


",jpsim,lukaskollmer
3591,2016-05-16 20:03:21,"@jpsim 
- build is still failing
- output of `pod deintegrate || rm -rf Pods` and `pod install --verbose`:


",lukaskollmer,jpsim
3591,2016-05-19 07:40:20,"@jpsim Sorry for the delay, but unfortunately Xcode fails to open your example project:

![](http://cdn.kollmer.me/embed/realm_import_error_example_project_open_bug.png)
",lukaskollmer,jpsim
3591,2016-05-19 10:53:12,"@jpsim Your demo works fine for me.
Another thoughtIi had: my Xcode project is Objective-C + Swift (but i'm using Realm only in the Objective-C part and it worked fine with version `0.98.0`). Do you think this could cause the bug?
",lukaskollmer,jpsim
3591,2016-05-19 16:22:26,"No, I don't think this is caused by having both Objective-C and Swift...

@lukaskollmer this would go faster if you could share a sample project that triggers the behavior you're describing.
",jpsim,lukaskollmer
3591,2016-05-20 06:53:36,"@guidev I already tried that

@jpsim You can find a sample project [here](http://cdn.kollmer.me/embed/iPricing_copy.zip) (no need to run `pod install`, i included the entire CocoaPods directory+project)
",lukaskollmer,jpsim
3591,2016-05-20 06:53:36,"@guidev I already tried that

@jpsim You can find a sample project [here](http://cdn.kollmer.me/embed/iPricing_copy.zip) (no need to run `pod install`, i included the entire CocoaPods directory+project)
",lukaskollmer,guidev
3591,2016-05-20 19:09:01,"@lukaskollmer your Podfile is misconfigured: you need to specify which targets should have which pods. You can do this by wrapping all the top-level pods in their desired target:


",jpsim,lukaskollmer
3591,2016-05-20 20:26:18,"@jpsim That fixed it, but I'm still wondering why it worked fine before I updated to Realm 0.102.1
",lukaskollmer,jpsim
3591,2016-05-20 20:46:40,"@lukaskollmer I doubt that Realm is to blame here, but rather CocoaPods 1.0
",jpsim,lukaskollmer
3590,2016-05-16 05:53:20,"> Release app with schemaVersion: 755 (without no schema change)

@jugyo I think you mean (without schema change)
",xiao99xiao,jugyo
3590,2016-05-16 10:48:13,"@xiao99xiao right
",jugyo,xiao99xiao
3590,2016-05-16 18:13:48,"@xiao99xiao you're using a fairly old version of Realm, could you please integrate Realm 0.102.1 and report again if this is still an issue? Thanks!
",jpsim,xiao99xiao
3590,2016-05-16 18:21:40,"@jpsim Yeah, I'm gonna update Realm to 0.102.1 at next version and have confirmed that it solves the issue. I'm surprised that 0.96.3 is already old.
",jugyo,jpsim
3587,2016-05-28 07:13:42,"@helabenkhalfallah do you need any other help?
",stel,helabenkhalfallah
3585,2016-05-18 21:58:54,"Hi @danpe,

Thanks for getting in touch. Would you be willing to share the old and new definitions of your `GKUser` model? Any other information you'd be willing to provide to help produce a reproduction case would be greatly appreciated!
",austinzheng,danpe
3585,2016-05-27 23:42:31,"Hi @danpe, I'm just following up on @austinzheng's last request for information. Have you fully ruled out that there are no duplicate values from `serverId`? For example, if it's an optional property, keep in mind that `nil` is a valid value and it _must_ be unique since it's set as a primary key. Thanks!
",jpsim,austinzheng
3585,2016-05-27 23:42:31,"Hi @danpe, I'm just following up on @austinzheng's last request for information. Have you fully ruled out that there are no duplicate values from `serverId`? For example, if it's an optional property, keep in mind that `nil` is a valid value and it _must_ be unique since it's set as a primary key. Thanks!
",jpsim,danpe
3584,2016-05-18 04:23:27,"@xiao99xiao, can you please share the crash log you receive when running your application? If you can reproduce this in a new project, would you mind sharing it with us so that we can reproduce it ourselves and investigate the problem?
",bdash,xiao99xiao
3584,2016-05-18 04:50:20,"@bdash of course, check the Realm Migration test, it just ran `[RLMRealm defaultRealm]` and boom. I couldn't get any log since when EXC_BAD_ACCESS happened, I got nothing in the console, so I uploaded a screenshot of the EXC_BAD_ACCESS scene, check the image below.

Besides, If I export the app to run as a standalone mac app, it seems everything is fine - the database is created successfully. So the bug only happens when I call Run in Xcode.

[Realm Migration Test.zip](https://github.com/realm/realm-cocoa/files/269679/Realm.Migration.Test.zip)
<img width=""1440"" alt=""2016-05-18 12 43 35"" src=""https://cloud.githubusercontent.com/assets/152125/15347667/593b1574-1cf6-11e6-83d1-08f612075d4e.png"">
",xiao99xiao,bdash
3584,2016-05-18 04:55:26,"Thanks, @xiao99xiao. Sadly I was not able to reproduce by running the application that you provided. It's possible you have an existing Realm file that the app is using when it hits this crash. Could you look for the file at `~/Library/Application Support/com.xiaoxiao.Realm-Migration-Test/default.realm`. If it exists, please move it somewhere safe (e.g., your desktop) then try running the app again. If that fixes the crash you're seeing, please share the saved copy of the Realm file with me so I can try reproducing with it.
",bdash,xiao99xiao
3584,2016-05-18 04:58:33,"@bdash I removed everything under `~/Library/Application Support/com.xiaoxiao.Realm-Migration-Test/` but still no help :( 
",xiao99xiao,bdash
3584,2016-05-18 05:39:35,"Thanks for that, @xiao99xiao. That backtrace includes offsets into the Realm core functions that will help us understand what was taking place when the crash occurred. There's one further piece of information that would be incredibly helpful: at the LLDB prompt when you've hit the crash, can you please run `register read` and share the output. Thanks again.

Edit: Rather, can you run the following sequence of commands:


",bdash,xiao99xiao
3584,2016-05-18 05:46:10,"@xiao99xiao, I missed a command in my previous comment above. Please see the edit for the additional command that needs to be run before `register read`. Sorry for the inconvenience!
",bdash,xiao99xiao
3584,2016-05-20 09:53:40,"I've also been able to reproduce that. I think I might be able to provide some more insight, although I'm using it on iOS instead of OS X.

At least in my case, that crash only happens when app is running on the simulator, not on the actual device.

Just in case, I'll provide same info @bdash requested to OP.
I'm currently using version 0.103.1
(lldb) bt all



(lldb) frame select 0



(lldb) register read


",jrpinteno,bdash
3584,2016-05-20 17:02:09,"Thanks for the info, @jrpinteno. That crash looks very similar, but occurs at a slightly different place than the one originally reported here. It's hard to tell at this point if it's likely to have the same underlying cause.

How reproducible is this issue for you? Does it happen 100% of the time? If so, would you mind sharing the built .app that crashes for you so I can see if it reproduces for me? If you're willing to share it could you please email it to help@realm.io and reference this GitHub issue in your email.
",bdash,jrpinteno
3584,2016-05-20 17:03:09,"@xiao99xiao, similarly to the above: are you willing to share the prebuilt .app that reproduces the crash for you? If so, can you please email it to help@realm.io so that I can take a look at it.
",bdash,xiao99xiao
3584,2016-05-20 17:06:17,"@bdash I'm glad to, but as I mentioned above, if I export the app to run as a standalone mac app, then no crash at all. It only happens when I hit Run in Xcode.
",xiao99xiao,bdash
3584,2016-05-20 17:08:34,"@xiao99xiao I'd like the exact .app you ran within Xcode and reproduced the crash with. In theory I should be able to run that under Xcode's debugger myself and also hit the crash.
",bdash,xiao99xiao
3584,2016-05-26 21:59:48,"@xiao99xiao I'm just following up on @bdash's latest request for reproduction steps and a compiled `.app` bundle for your affected application. However, please make sure to integrate Realm 1.0.0 into your app and confirm that this is still an issue before we continue. Thanks!
",jpsim,xiao99xiao
3584,2016-05-26 21:59:48,"@xiao99xiao I'm just following up on @bdash's latest request for reproduction steps and a compiled `.app` bundle for your affected application. However, please make sure to integrate Realm 1.0.0 into your app and confirm that this is still an issue before we continue. Thanks!
",jpsim,bdash
3584,2016-06-04 03:05:55,"@dukemike, would you mind filing a new issue? Your crash looks to be very different from the crash tracked by this issue.
",bdash,dukemike
3584,2016-06-04 03:11:28,"Thanks, @bdash . #3705 created.
",dukemike,bdash
3583,2016-05-15 09:45:02,"Are you saying that the migration block will be executed and then the realm file will be deleted @mrackwitz ?
",icanzilb,mrackwitz
3583,2016-05-16 15:21:22,"@sxua: You can achieve that from the next release by implementing the strategy on your own by handling the error returned/thrown on a schema mismatch. See [my answer here](https://github.com/realm/realm-cocoa/issues/3542#issuecomment-219453073) to a similar question.
",mrackwitz,sxua
3583,2016-05-16 15:31:45,"@icanzilb:

> I'm still not 100% what that means ... is `deleteRealmIfMigrationNeeded` only working if the schema version is same as last time? or something else? 

Yes. If you're bumping the schema version as well, you're indicating that you want to migrate your schema, which takes priority. The `deleteRealmIfMigrationNeeded` is just the last resort if the schema doesn't match. This makes it a nice flag to set for development to avoid writing [a bit of tedious boilerplate setup code](https://github.com/realm/realm-cocoa/issues/3542#issuecomment-219453073), once you understood that schemas are fixed and migrations would be needed once you deployed your app for the first time.

---

@jugyo: No a migration block is not needed. This is only needed if you specify a schema version and bumping the schema version indicates that you want to delete the file.
",mrackwitz,jugyo
3583,2016-05-16 15:31:45,"@icanzilb:

> I'm still not 100% what that means ... is `deleteRealmIfMigrationNeeded` only working if the schema version is same as last time? or something else? 

Yes. If you're bumping the schema version as well, you're indicating that you want to migrate your schema, which takes priority. The `deleteRealmIfMigrationNeeded` is just the last resort if the schema doesn't match. This makes it a nice flag to set for development to avoid writing [a bit of tedious boilerplate setup code](https://github.com/realm/realm-cocoa/issues/3542#issuecomment-219453073), once you understood that schemas are fixed and migrations would be needed once you deployed your app for the first time.

---

@jugyo: No a migration block is not needed. This is only needed if you specify a schema version and bumping the schema version indicates that you want to delete the file.
",mrackwitz,icanzilb
3583,2016-05-16 15:40:13,"@mrackwitz got it. thanks!
",jugyo,mrackwitz
3583,2016-05-16 16:10:37,"@mrackwitz So no need to put `schemaVersion` anymore if delete realm for migration every time?
",jugyo,mrackwitz
3583,2016-05-16 16:13:03,"@jugyo: Yes. While you would obviously loose data, so it might be not what you want to do, if you use your Realm database beyond caching and even then it might be worthwhile to migrate depending on your use case.
",mrackwitz,jugyo
3583,2016-05-16 16:16:32,"@mrackwitz ok, thanks!
",jugyo,mrackwitz
3583,2016-05-17 16:23:18,"cons about nr. 2 - if you're working on a newer version of your app, you have comment out the migration block in order to enable `deleteRealmIfMigrationNeeded` - this will probably lead to a bunch of people not enabling again migration when they're finished with their code updates... 

If we get to choose in between the 3 proposed by @jpsim I'm leaning more towards nr. 3.

My personal preference would be to make `deleteRealmIfMigrationNeeded` kick-in ONLY when there's no change in the schema version. The benefit of this behavour would be that this will prevent the situation when anyone releases their app with the property set to true and then their users will loose their stored date because of the `deleteRealmIfMigrationNeeded`. (Assuming people will remember increasing their schema version each time releasing a new app version)
",icanzilb,jpsim
3583,2016-05-17 17:15:54,"I agree with what @tgoyne proposes, but we should document that in the guides and the API docs imho.
",mrackwitz,tgoyne
3582,2016-05-16 18:09:07,"@mrackwitz doesn't this break CocoaPods before 1.0? [See CI output](https://ci.realm.io/job/objc_pr/3315/configuration=Release,swift_version=2.2,target=cocoapods/console) using 0.39.0:


",jpsim,mrackwitz
3582,2016-05-16 18:21:46,"@jpsim: Good point. I didn't thought about that at all. But I don't see a way around that until CocoaPods is fixed. If we decide that backwards-compatibility to 0.39 is still a requirement at this point, we would likely need to document a post install Podfile-hook as a workaround in the meantime.
",mrackwitz,jpsim
3579,2016-05-16 17:08:59,"@jpsim, that's not sufficient. A `Results` that depends on a deleted `LinkView` or a deleted row is also invalidated, but there's no way to detect that case.
",bdash,jpsim
3573,2016-05-16 17:40:21,"@brianramirez I think you've hit a Swift compiler issue which causes `swiftc` to segfault when compiling a module of the same name as one of its linked dependencies.

In other words, this is a Swift bug that happens because you've named your app target `Realm`, which is already taken by the Realm framework. You should file a Swift bug at https://bugs.swift.org and change the name of your app target in the meantime.

Your sample project compiles fine for me if I rename the app target to anything other than `Realm` or `RealmSwift`.
",jpsim,brianramirez
3570,2016-05-14 10:29:14,"As we could confirm this issue, I promoted this issue to `T:Bug`, even though it doesn't necessarily need to be fixed within this repo. Beside what @tgoyne proposed above, there is a possible workaround by PR #3582, but further validation is still outstanding.
",mrackwitz,tgoyne
3570,2016-06-02 16:26:35,"CocoaPods 1.0.1 is out: https://github.com/CocoaPods/CocoaPods/releases/1.0.1

thanks @mrackwitz.
",jpsim,mrackwitz
3564,2016-05-27 00:16:28,"Hi @jiteshwadia,

Sorry to hear you're experiencing issues with Realm. We've since released several updates since 0.96.3, many of which contain bug fixes for similar issues. If you want, you can try updating your app to use the latest version of Realm, and then see if you can reproduce the issue. If so, any sample project you can make that demonstrates the crash would be appreciated, or just any information you can provide. Let me know if you have any questions or concerns.
",austinzheng,jiteshwadia
3564,2016-06-14 12:21:41,"@jiteshwadia do you have any updates on this? Thanks!
",stel,jiteshwadia
3560,2016-05-13 18:41:20,"@jpsim I fixed the indentation and added another unit test.
",austinzheng,jpsim
3560,2016-05-13 22:17:55,"@bdash The error domain system in this PR segments errors into Realm-specific errors, POSIX system errors, and all other errors. It's not apparent to me that errors in the third category are ever actually thrown.

The `RLMRealmTranslateException` function itself is only invoked in two places: when opening a shared Realm and when adding a notification block. In the former case the only errors that can be emitted are Realm-specific ones. I'm not sure yet about the latter case.

Getting Realm itself to throw a POSIX error is kind of difficult. They only seem to be thrown in `external_commit_helper.cpp`. I'm not yet sure how to induce a situation where `ExternalCommitHelper` would fail and throw an exception. I'll continue looking into it.
",austinzheng,bdash
3560,2016-05-17 15:15:40,"Thanks @bdash! I will fix the issues you brought up and wait for a final go-ahead to merge (given our current quasi-moratorium).
",austinzheng,bdash
3556,2016-05-11 19:45:41,"@BarlowTucker Thanks, but it didn't work.
",augard,BarlowTucker
3556,2016-05-12 13:11:40,"@BarlowTucker's solution above actually worked for me after running the following:

`rm -rf ~/Library/Caches/CocoaPods`
`rm -rf Pods`
`pod install`

It took the combination of the two to get it to compile for me.
",skrenek,BarlowTucker
3556,2016-05-12 14:23:12,"@skrenek That worked for me. Thanks to you and @BarlowTucker!!
",MarkPolivchuk,BarlowTucker
3556,2016-05-12 14:23:12,"@skrenek That worked for me. Thanks to you and @BarlowTucker!!
",MarkPolivchuk,skrenek
3556,2016-05-13 07:32:56,"@skrenek Sadly, it's not helping me.
",augard,skrenek
3556,2016-05-13 08:45:49,"@drieran Temporary fix is to change all Realm headers in Pods project Realm directory to public in side panel.
",augard,drieran
3556,2016-05-13 09:04:58,"@drieran Just go to realm folder in Pods select all .h from Realm and change it to public

<img width=""304"" alt=""screen shot 2016-05-13 at 11 03 15"" src=""https://cloud.githubusercontent.com/assets/60861/15243176/58d84764-18fa-11e6-994c-300ac31cbdb9.png"">

<img width=""280"" alt=""screen shot 2016-05-13 at 11 04 05"" src=""https://cloud.githubusercontent.com/assets/60861/15243209/83aa3d6c-18fa-11e6-85de-bd0b8d4255a7.png"">
",augard,drieran
3556,2016-05-13 12:00:21,"As mentioned @BarlowTucker Finally, I solved doing that: 

So, I am a little ashamed that I didn't try this earlier, but it appears that if I run Clean Build Folder... (Hold down option while clicking Product in the Xcode menu shows the Clean Build Folder... option) it fixes the issue for me.
",drieran,BarlowTucker
3556,2016-05-14 10:31:37,"## OS X

We could determine, that there is an actual issue with CocoaPods 1.0, but this is limited to OS X targets. We track this by #3570.

## iOS, watchOS, tvOS

If you're building on another platform, please make sure to follow the steps as proposed by @jpsim as seen here:

> 

Please don't forget to clean your build folder as explained by @drieran in the comment directly above:

> Hold down option while clicking Product in the Xcode menu shows the Clean Build Folder... option

Note: This can be also achieved via the key shortcut **⌥⇧⌘K**.
",mrackwitz,jpsim
3556,2016-05-14 10:31:37,"## OS X

We could determine, that there is an actual issue with CocoaPods 1.0, but this is limited to OS X targets. We track this by #3570.

## iOS, watchOS, tvOS

If you're building on another platform, please make sure to follow the steps as proposed by @jpsim as seen here:

> 

Please don't forget to clean your build folder as explained by @drieran in the comment directly above:

> Hold down option while clicking Product in the Xcode menu shows the Clean Build Folder... option

Note: This can be also achieved via the key shortcut **⌥⇧⌘K**.
",mrackwitz,drieran
3556,2016-06-13 22:45:35,"@collinsmwade @diego-watanabe please file new issues with full steps to reproduce after following the recommendations from [our docs](https://realm.io/docs/swift/latest/#reinstalling-via-dependency-managers).
",jpsim,collinsmwade
3556,2016-06-13 22:45:35,"@collinsmwade @diego-watanabe please file new issues with full steps to reproduce after following the recommendations from [our docs](https://realm.io/docs/swift/latest/#reinstalling-via-dependency-managers).
",jpsim,diego-watanabe
3556,2016-06-14 20:34:22,"@PhilippeBoisney could you please file new issues with full steps to reproduce?
",jpsim,PhilippeBoisney
3556,2016-09-23 17:02:25,"@Kirow please file a new issue, taking care to fill out the new issue template so we have enough information to look into this for you.
",jpsim,Kirow
3553,2016-05-12 17:51:37,"@austinzheng I work with @00StevenG; the issue opening the realm file is the same as #3438 and we are unable to get any more detail on the potential cause of Realm failing to open.
",fisch0920,austinzheng
3553,2016-05-27 23:40:15,"@fisch0920 do you have any updates on this? Have you managed to reproduce this since your initial report? I'd love to know if you see this again with the latest version of Realm (1.0 as of this writing). Thanks!
",jpsim,fisch0920
3551,2016-05-10 23:32:49,"Hi @BarlowTucker,

Thanks for opening an issue. I tried adding `RealmSwift` using CocoaPods to a new iOS project using a configuration identical to yours, and wasn't immediately able to reproduce the bug.
- Is `RealmSwift` the only pod in your project, or are there other pods as well?
- Have you tried cleaning the build folder and deleting the project's derived data?

If you are willing to send over the project itself, I'd also be happy to look at it directly. Let me know if you have any questions or concerns.
",austinzheng,BarlowTucker
3551,2016-05-11 16:00:18,"@BarlowTucker: Confirmed. It fixed it for me too.
",codeboost,BarlowTucker
3551,2016-05-12 02:58:29,"@BarlowTucker It worked for me.I `clean`the folder,and do the `pod install`
",wuleijun,BarlowTucker
3551,2016-05-15 14:30:14,"@BarlowTucker This one is work for me.. thank you
",tarigancana,BarlowTucker
3551,2016-05-19 09:44:26,"@BarlowTucker Thank you a lot. it works for me. 👍 
",dakeshi,BarlowTucker
3551,2016-06-14 07:16:22,"`Clean Build Folder` worked!!!!!

@BarlowTucker ,Thanks!!!!
",htarwara6245,BarlowTucker
3551,2016-06-29 15:57:51,"thanks @austinzheng 👍 either **cleaning the derived data folder** or the pods cache fixed it for me!
",Gerst20051,austinzheng
3551,2017-03-20 18:44:34,@BarlowTucker I love you man. You saved my day and my tomorrow as well!,nabbestemmia,BarlowTucker
3550,2016-05-10 22:47:39,"Now that I think about it, `RLMWeakObjectHandle` could also hold a weak reference to the original object to sometimes allow skipping the allocation of a new instance within `-object`. It wouldn't avoid the need for it to hold a row accessor itself though, so it may not be worth it.

@austinzheng, I used ""weak"" in the name since the important part of its behavior is that it doesn't keep the object accessor alive. ""lazy"" doesn't feel like a good fit for the semantics it provides.
",bdash,austinzheng
3544,2016-05-10 12:05:18,"@mrackwitz please mark this as resolved
",Voley,mrackwitz
3542,2016-12-16 10:20:43,"@mrackwitz I have similar code in my DBService but Realm doesn't create new file after deletion...

",kubajakowski,mrackwitz
3542,2016-12-16 10:39:30,@mrackwitz HA! I just got it working. The reason why this code didn't work was ... Realm Browser - I had this realm file opened in browser and realm can't make another realm at same destination.,kubajakowski,mrackwitz
3541,2016-05-10 17:52:39,"Hi @austinzheng, thanks for the reply.

Definition of the model:



I'm using a static variable defined inside a class as 

`private static let realm = try! Realm()`

I'm trying to fetch results from a thread and it sporadically happen (more than 1000 users experiences that crash)
",GZaccaroni,austinzheng
3541,2016-05-10 20:26:03,"Hi @GZaccaroni,

Based on your stack trace and the information you provided it seems the problem is that the `Realm()` initializer is throwing an uncaught error, which causes the program to be terminated due to the `try!`.

Since this should happen only rarely (and almost certainly not for 30% of your users), would you be willing to change your code to catch the error and log the error message? This won't fix your problem, unfortunately, but it will provide us with additional data that can help us determine the root cause. (You can read more about how to extract the error message here: https://realm.io/docs/swift/latest/#error-handling)

Let me know if you have any questions or concerns, and thanks for your patience.
",austinzheng,GZaccaroni
3541,2016-05-10 20:38:42,"Ok i'll try to handle it, thanks!

> Il giorno 10 mag 2016, alle ore 22:26, Austin Zheng notifications@github.com ha scritto:
> 
> Hi @GZaccaroni,
> 
> Based on your stack trace and the information you provided it seems the problem is that the Realm() initializer is throwing an uncaught error, which causes the program to be terminated due to the try!.
> 
> Since this should happen only rarely (and almost certainly not for 30% of your users), would you be willing to change your code to catch the error and log the error message? This won't fix your problem, unfortunately, but it will provide us with additional data that can help us determine the root cause. (You can read more about how to extract the error message here: https://realm.io/docs/swift/latest/#error-handling)
> 
> Let me know if you have any questions or concerns, and thanks for your patience.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",GZaccaroni,GZaccaroni
3536,2016-05-06 13:46:59,"Hi @intrigua, my same comment above also applies to your case:

> What would be helpful to know is the Realm version that was last used to access this file, the class definitions of the models in your app with `NSDate`/`NSDate?` properties, and what kind of data could have been in this user's Realm prior to the upgrade process.
> 
> You should know that despite this crash during the upgrade process, there shouldn't be any loss of data since the changes won't have been committed. I hope that you'll help us identify what's happened here so we can fix this issue and you can send your affected users an update that addresses this.
",jpsim,intrigua
3536,2016-05-06 17:40:51,"@jpsim, the user was running version 0.100 before upgrade.  I have 3 models that contain NSDate:







What would be the best tool to extract the local data from her phone? (without involving apple or the fbi)  I asked her not to delete the app and the migration crash still occurs
",chlela,jpsim
3536,2016-05-08 22:48:24,"@chlela: If you have physical access to the device, you can use Xcode to retrieve the file. Otherwise it might be necessary to use some third-party tooling. See more in [this StackOverflow question](https://stackoverflow.com/questions/6121613/browse-the-files-created-on-a-device-by-the-ios-application-im-developing-on-w).
",mrackwitz,chlela
3536,2016-06-20 21:09:36,"@Voley: Could you create a new issue please and give us more information about these crashes?
In general it might be helpful, if you would keep around a Realm database with actual data bundled in your test harness for every schema version which you deploy into the wild, so that you can test whether your migration block is sufficiently handling all necessary cases.
",mrackwitz,Voley
3536,2016-06-20 21:22:30,"@mrackwitz  Here - https://github.com/realm/realm-cocoa/issues/3777
",Voley,mrackwitz
3529,2016-05-04 22:28:58,"Thanks for the PR, @segiddins! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,segiddins
3528,2016-07-12 15:34:24,"@conradev, is there an issue that this fixes? If we're going to take an entirely different approach to fixing this it'd be good to close out this pull request in favor of an issue tracking the problem we're trying to fix.
",bdash,conradev
3527,2016-05-05 06:01:11,"@KieranHarper exactly

currently the RBQFetchedResultsController project is alive for the sole purpose of tacking this issue. I was just wondering if Realm would be interested in officially supporting this feature sometime in the near future and what that timeline might look like
",hsavit1,KieranHarper
3526,2016-05-12 07:07:19,"Thanks for the hint, @tgoyne!

I'll update the app and see if this helps.
",uson1x,tgoyne
3526,2016-05-17 15:25:04,"@tgoyne : We should still see if we can fail somewhat more informative?
",bmunkholm,tgoyne
3526,2016-05-26 22:21:32,"@bmunkholm agreed, although it's not exactly clear how to do that. I've filed #3659 to keep track of that.
",jpsim,bmunkholm
3515,2016-05-02 19:21:55,"Thanks for the PR, @plokijuhhb! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,plokijuhhb
3515,2016-05-02 22:20:39,"Thanks for the PR, @plokijuhhb, this change looks right to me. Could you please sign our CLA? https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla

We'll need you to do this before we can accept any patches.
",jpsim,plokijuhhb
3514,2016-05-02 18:48:48,"Thanks for the PR, @plokijuhhb! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,plokijuhhb
3513,2016-05-03 11:58:33,"Hi @slreddy1137, as a best practice, I'd recommend not replacing the Realm file as you're accessing it. This is likely to cause file corruption and depending on timing, a variety of crashes.

To use a compacted copy of the Realm file, I'd recommend performing the copy as the very first step in your application, before any other code has had the chance to access the Realm file.

Or alternatively, don't replace the Realm file you're accessing, just start using Realms at the new location.
",jpsim,slreddy1137
3513,2016-05-05 13:51:47,"Hi @jpsim , i have not created any Realm files from the project, i m directly using the ""Default Realm"" instances which internally creating the Realm file.
1. To perform copy as the very first step : shall i do it in ""didFinishLoading"" everytime ?
2. Alternate approach : as the default Realm is in Documents folder, can u please suggest me how to start using Realms at new location.
",slreddy1137,jpsim
3513,2016-05-20 23:32:58,"@slreddy1137 did you get this to work? any reason to keep this ticket open?
",jpsim,slreddy1137
3513,2016-05-20 23:59:27,"Hi,

Even after trying this approach I m seeing more unknown crashes, figuring out ways to get it fixed.

Sent from my iPhone

> On 20-May-2016, at 7:33 PM, JP Simard notifications@github.com wrote:
> 
> @slreddy1137 did you get this to work? any reason to keep this ticket open?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",slreddy1137,slreddy1137
3513,2016-05-25 03:20:34,"@jpsim , we are still testing after making this changes in main.m for optimising the realm file, please give us 2 more days to confirm on the fix.
",slreddy1137,jpsim
3513,2016-05-26 18:46:37,"Looking forward to your results @slreddy1137!
",jpsim,slreddy1137
3513,2016-05-26 21:52:12,"Hi Simard,

I see the build is stable now, extensive testing is going on, I can confirm that it's a solution for me, the ticket can closed.

Sent from my iPhone

> On 26-May-2016, at 2:46 PM, JP Simard notifications@github.com wrote:
> 
> Looking forward to your results @slreddy1137!
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",slreddy1137,slreddy1137
3513,2016-05-26 21:54:28,"I'm thrilled to hear this @slreddy1137! Thanks for the update.
",jpsim,slreddy1137
3511,2016-05-02 15:21:41,"Thanks @woxtu, but this is still incorrect since it uses the Swift 1 style documentation comment format. I've pushed a fix here: #3512.
",jpsim,woxtu
3510,2016-05-02 15:42:00,"Hi @conradev, thanks for sharing some information on this, we're already tracking this issue as #3412, so in an effort to keep the discussion on this localized, we'll be closing this ticket as a duplicate. I encourage you to subscribe to that issue and to contribute where you can to helping us reproduce this on our end. Thanks!
",jpsim,conradev
3507,2016-05-01 14:19:19,"Hi @benmorrow, the `RealmSwift` scheme should only show up in the source version of the examples (e.g. the contents of this git repository). It won't show up in the zip packages that you'd download from GitHub releases or https://realm.io.

It also shouldn't be necessary to select the scheme from the zip packages either, since the framework will already be built, in which case we should update the playground instructional comments to reflect that. I'm downloading the zip release now to confirm this is indeed the case, but on airport wifi, it might take me a few days... 😭 
",jpsim,benmorrow
3507,2016-05-02 19:51:05,"Hi @jpsim, that makes sense. You are correct that I downloaded the zip package from https://realm.io.

However, the playground doesn't locate the framework and produces an error. This is a screenshot:

![screen shot 2016-05-02 at 12 43 46 pm](https://cloud.githubusercontent.com/assets/5604/14965709/b3140aa0-1063-11e6-9b92-b4d9ebf21d20.png)

Hope your flight went well!
",benmorrow,jpsim
3507,2017-01-10 06:58:19,"@jb80016 we're happy to help if you file a new issue, taking care to fill out the template.",jpsim,jb80016
3502,2016-04-29 19:00:05,"Emphasizing what @tgoyne just said: the stack depth is not proportional to the longest string, but rather to the **longest common prefix** of the string being added and an existing string
",jpsim,tgoyne
3501,2016-05-03 12:17:32,"Sorry @intrigua, I don't think your code sample is sufficient to reproduce the behavior you're seeing... could you please add the relevant code that can demonstrate the `.Initial` notification not being sent?

Here's a small complete program sample you can use as a template:


",jpsim,intrigua
3501,2016-05-11 11:34:55,"@mrackwitz you're reading that documentation incorrectly, if you read closely in the [API docs](https://realm.io/docs/swift/latest/api/Classes/Results.html#/s:FC10RealmSwift7Results20addNotificationBlockFFGOS_21RealmCollectionChangeGS0_x__T_CSo20RLMNotificationToken), it includes this code sample:



which demonstrates that it's the _initial_ state that actually contains updated information, not that `.Initial` is never called, and the first notification mode is `.Update`.

@intrigua your follow up comment isn't relevant based on this information. If you could please provide a sample project that reproduces the issue, I'll be happy to take a closer look at it.
",jpsim,mrackwitz
3501,2016-05-11 11:34:55,"@mrackwitz you're reading that documentation incorrectly, if you read closely in the [API docs](https://realm.io/docs/swift/latest/api/Classes/Results.html#/s:FC10RealmSwift7Results20addNotificationBlockFFGOS_21RealmCollectionChangeGS0_x__T_CSo20RLMNotificationToken), it includes this code sample:



which demonstrates that it's the _initial_ state that actually contains updated information, not that `.Initial` is never called, and the first notification mode is `.Update`.

@intrigua your follow up comment isn't relevant based on this information. If you could please provide a sample project that reproduces the issue, I'll be happy to take a closer look at it.
",jpsim,intrigua
3501,2016-05-20 23:30:59,"@intrigua just following up on my request for a sample project that reproduces the issue you're seeing... thanks!
",jpsim,intrigua
3499,2016-05-26 21:57:49,"@terasupernova sorry for the late reply... I haven't been able to reproduce the issue... can you share a full project that reproduces the problem? Thanks!
",jpsim,terasupernova
3499,2016-06-22 19:09:11,"@terasupernova Sorry for my slow reply, I finally reproduce the assertion error. Thanks for sharing the code.

The problem is that you initialized the same object more than once incorrectly without allocation. 

You created a company object here:



Then you initialized the object again here without allocation here:



It will cause an unexpected behavior because usually object should be initialized only once. That's why the crash occurred.

To resolve the problem, you should create (allocate) a new object every iteration. Like the following:



So your code should be like the following, I guess.


",kishikawakatsumi,terasupernova
3499,2016-07-06 22:28:03,"@terasupernova, it looks like @kishikawakatsumi has provided a solution to the problem you were experiencing so I'm going to mark this as Closed. Please feel free to reopen this issue, or to file a new one, if you are still having problems.
",bdash,kishikawakatsumi
3499,2016-07-06 22:28:03,"@terasupernova, it looks like @kishikawakatsumi has provided a solution to the problem you were experiencing so I'm going to mark this as Closed. Please feel free to reopen this issue, or to file a new one, if you are still having problems.
",bdash,terasupernova
3498,2016-05-21 10:22:31,"@dumoko: As you never came back to this issue with further questions, I hope you have all you need to resolve your migration issues. If you have remaining questions, you're welcome anytime, while we prefer in general StackOverflow for help related questions. We actively monitor questions coming in, which are tagged as `realm`. :wink:
",mrackwitz,dumoko
3496,2016-05-06 21:46:31,"Hey @jeeftor, we didn't hear much from you after your initial report, any chance you can share more information?
",jpsim,jeeftor
3496,2016-06-07 09:45:17,"Hey again @jeeftor, after we saw one similar backtrace, we suspect that your Realm file here was corrupted. Did this ever happened again for you / the users of your app? Would you be able to share a concerned Realm database and all auxiliary files with us? (privately to help@realm.io)
",mrackwitz,jeeftor
3496,2016-06-14 13:42:52,"I'll close this issue for now due to of inactivity. @jeeftor if you can provide some more info please feel free to reopen this issue or contact us via help@realm.io, thanks!
",stel,jeeftor
3494,2016-04-30 06:31:34,"> this limitation in Core Data was part of the motivation for designing it this way

Funny, and ironic. 😄 
What you call a limitation, I feel is an excellent feature (or lack there of). There were way too many times that I used this feature, and replaced properties with relationships in my NSManagedObjects, just to get NSFetchedResultsController to shut up.

In my experience, when dealing with the kind of massive UITableView or UICollectionView which display tens of thousands of items, and have even slightly moderate complexity (eg. lets say variable heights on cells), the less frequently you update them the better (on older devices updating even a single row in such a tableView with just 2-3 thousand existing rows can be expensive). Which means not updating them when a random property (that you're not even showing in the cells) updates.

You're absolutely right in saying that being notified of a change to a related object in Core Data would be incredibly hacky and underperformant. But, the beauty of Realm is that it is not Core Data, reading persisted properties & traversing relationships is so fast that I pretty much never have to worry about performance. While using Realm, I do in-memory filtering on tens of thousands of objects. Something that I wouldn't even dream of doing in Core Data. My point is that, if Realm did not provide notifications for changes in related objects, and I needed them, my workaround would be hacky, but not underperformant.

It might take me a little while, but I will be happy to provide you with a sample project that demonstrates the performance issue that I brought up.

Finally, I can pretty much confirm that it was the manually managed bi-directional relationships that was the cause of excessive CPU usage in the notification listener thread (and the un-needed modification notification as already confirmed by @tgoyne). I changed my models to use the newly merged linking object property, and both issues have vanished.

At this point, my only request for you guys would be: If you ever decide to address this bug of modification notifications not being posted for 'linking object properties', please first consider adding, at least as an option, the ability to disable notifications for changes to related objects.

PS: Again, I will try and provide a sample project which demonstrates the performance issue that I brought up, as soon as I can.
",kunalsood,tgoyne
3494,2016-06-14 16:24:14,"Thanks a lot @CraigSiemens for your very valuable feedback. I took a stab at addressing the issues in our documentation you pointed out here.
As @tgoyne recently landed #3522 which addresses the performance issues for large complex objects graphs, I guess we're done here.
I'm looking forward to feedback from y'all once the recent changes are released. As long you're welcome to try it out directly from master while that's recommended only as an option for development. Let us know if you're still experience issues beyond that.
",mrackwitz,CraigSiemens
3494,2016-06-14 16:24:14,"Thanks a lot @CraigSiemens for your very valuable feedback. I took a stab at addressing the issues in our documentation you pointed out here.
As @tgoyne recently landed #3522 which addresses the performance issues for large complex objects graphs, I guess we're done here.
I'm looking forward to feedback from y'all once the recent changes are released. As long you're welcome to try it out directly from master while that's recommended only as an option for development. Let us know if you're still experience issues beyond that.
",mrackwitz,tgoyne
3489,2016-05-02 12:05:37,"@jpsim can you confirm yet if this is a bug or intended? Thanks.

~~Here's how I hacked around it for now if anyone needs a quick and dirty solution to this while we wait for a proper official solution.~~
",fichek,jpsim
3489,2016-10-28 18:05:52,"Hi Guys, I´m having the same problem. @jpsim Do you have any news on your side? Are you planning to fix this issue?

Thanks, Juan
",jarrillaga,jpsim
3489,2016-11-08 08:43:04,"Thanks for the update @jpsim.
",kaspermunck,jpsim
3486,2016-04-27 17:14:41,"@pbcaus, since it sounds like you're able to reproduce the assertion failure reliably we'd appreciate if you could test the fix out yourself to verify that it does address your problems.

Since you're not using any dependency manager you can do the following:
1. `git clone https://github.com/realm/realm-cocoa`
2. `cd realm-cocoa`
3. `sh build.sh ios-swift`

This will leave built frameworks in `build/ios/swift-2.2`, which you can then drop into your app.

Please let us know how this goes!
",bdash,pbcaus
3486,2016-04-27 23:23:49,"Rebuilt the library as below, cleaned and rebuilt my project, by sorry guys, no joy: I can still reliably recreate the problem.  I will send you more details via email.

Log dump as follows:



> On 28 Apr 2016, at 03:14, Mark Rowe notifications@github.com wrote:
> 
> @pbcaus https://github.com/pbcaus, since it sounds like you're able to reproduce the assertion failure reliably we'd appreciate if you could test the fix out yourself to verify that it does address your problems.
> 
> Since you're not using any dependency manager you can do the following:
> 
> git clone https://github.com/realm/realm-cocoa
> cd realm-cocoa
> sh build.sh ios-swift
> This will leave built frameworks in build/ios/swift-2.2, which you can then drop into your app.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/realm/realm-cocoa/issues/3486#issuecomment-215153912
",pbcaus,pbcaus
3486,2016-05-03 11:55:01,"@pbcaus could you please try with Realm 0.100 which was released last week? You can download the release zip here: https://static.realm.io/downloads/swift/realm-swift-0.100.0.zip
",jpsim,pbcaus
3486,2016-05-04 00:14:18,"Hi

I have updated to v 100 and it works as expected, no crashes. 

Cheers

Sent from my iPhone

> On 3 May 2016, at 21:55, JP Simard notifications@github.com wrote:
> 
> @pbcaus could you please try with Realm 0.100 which was released last week? You can download the release zip here: https://static.realm.io/downloads/swift/realm-swift-0.100.0.zip
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
",pbcaus,pbcaus
3485,2016-04-27 17:56:38,"@thonydam Please file a new issue with information about what you're seeing. This reporter of this bug filed this as an enhancement request for Realm to provide more visibility into change notifications during development. It'd be confusing to try and also track the performance problem you're seeing in this same issue.
",bdash,thonydam
3480,2016-04-26 09:18:37,"Thanks for the PR, @TimOliver! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,TimOliver
3479,2016-04-25 20:34:25,"Thanks for the PR, @tgoyne! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,tgoyne
3476,2016-05-10 14:23:15,"@augard please open a new issue with full steps to reproduce and I'll be happy to take a closer look!
",jpsim,augard
3474,2016-04-25 05:44:36,"@menhui222 Use `objectForPrimaryKey:` method to retrieve object by primary key. Then pass the object to the `deleteObject:` method. So the idiom for deleting by primary key is like the following:


",kishikawakatsumi,menhui222
3473,2016-04-24 15:59:54,"Hi @atdash,

I also have the same problem, I'm only testing (first time checking Realm), but for the moment a downgrade the version (and right now I can build/run the app):
pod 'RealmSwift', '0.98.8'
",Abreu0101,atdash
3473,2016-04-25 06:02:11,"@atdash @Abreu0101 

We can't reproduce this. One thing that's reportedly helped in these cases is clearing the CocoaPods cache and Xcode's Derived Data and trying to compile again. Could you please try doing this and reporting back again?


",kishikawakatsumi,atdash
3473,2016-04-25 06:02:11,"@atdash @Abreu0101 

We can't reproduce this. One thing that's reportedly helped in these cases is clearing the CocoaPods cache and Xcode's Derived Data and trying to compile again. Could you please try doing this and reporting back again?


",kishikawakatsumi,Abreu0101
3473,2016-04-25 06:35:28,"@kishikawakatsumi same error. .. tried your solution ... still not working ... 
",BhavinBhadani,kishikawakatsumi
3472,2016-04-24 23:26:59,"Thanks for voicing your concerns @xiaodao. Feedback from our users is always appreciated.

In this case, if a user has moderately simple needs, they can use our index path APIs as-is. This was a big motivator for our current design. Even then, if a user has more complex UITableView needs, or want to use change notifications in some other context, they can easily use the integer APIs or even just `map` over the index path results to apply an offset or other transformation to the data.

If you care deeply about this, could you propose a preferable alternate API that retains both the ease of use and flexibility of the current one?

Thanks!
",jpsim,xiaodao
3469,2016-04-25 12:04:41,"@impopappfactory no we don't plan on deprecating Swift 2.2 at this time. If Swift 2.2 has a regression from previous versions of Swift, you should report that to Apple. They've been quite good at prioritizing regression fixes for patch releases.
",jpsim,impopappfactory
3468,2016-04-22 14:16:58,"Sorry @icanzilb, but we need to continue supporting previous versions of Swift 2.x, so we can't do this just yet.
",jpsim,icanzilb
3465,2016-05-03 13:27:09,"@haojian2016 please post the output from running the following commands:


",jpsim,haojian2016
3465,2016-05-20 23:27:53,"closing this as we haven't heard back from @haojian2016 in a few weeks
",jpsim,haojian2016
3464,2016-04-26 14:43:53,"@jpsim That assertion failure seems to be same as https://github.com/realm/realm-core/issues/1717.
Was it fixed by https://github.com/realm/realm-cocoa/pull/3478 ?
",kishikawakatsumi,jpsim
3463,2016-04-28 16:53:49,"@jpsim Done!
",kishikawakatsumi,jpsim
3463,2016-05-05 17:50:12,"Add a Swift test and I'm happy with this. @tgoyne @bdash would be great to get this in the next release, so I'd appreciate if you could take time to review
",jpsim,tgoyne
3458,2016-04-21 20:54:08,"Since both @tgoyne and @bdash said they'd prefer just `URL` rather than `FileURL` in method names, I've changed it to just that. I've kept parameter names as `fileURL` though, which will continue to provide strong context to users in autocomplete and documentation.

Any further feedback?
",jpsim,tgoyne
3458,2016-04-21 20:54:08,"Since both @tgoyne and @bdash said they'd prefer just `URL` rather than `FileURL` in method names, I've changed it to just that. I've kept parameter names as `fileURL` though, which will continue to provide strong context to users in autocomplete and documentation.

Any further feedback?
",jpsim,bdash
3458,2016-04-21 22:35:45,"Ok I just cleaned up tests and other issues you addressed in review @tgoyne.
",jpsim,tgoyne
3456,2016-04-25 06:27:16,"@georgepoenaru Sorry for the late response.

We can't reproduce this, for 0.99.0 and 0.98.8. I suspect this is due to cache issue for the Cathage. Could you please try doing this and reporting back again? Also try clean project by Xcode and rebuild it?


",kishikawakatsumi,georgepoenaru
3456,2016-05-03 13:25:49,"Closing since we haven't heard back from @georgepoenaru in over a week and our Carthage tests continue to work...
",jpsim,georgepoenaru
3452,2016-04-19 09:34:00,"@jpsim  thank you
",iphilcc,jpsim
3448,2016-04-18 14:15:14,"Hi @AndroidIosWebEmbeddedFirmwareDver. Xcode here is telling you that it can't find certain files it needs, and therefore can't compile Realm.

Based on the location in your GitHub profile, it seems you may be located in China. Please note that Realm's core binaries are often blocked from being downloaded from China. See #2713 for more information, and some workarounds, on that.
",jpsim,AndroidIosWebEmbeddedFirmwareDver
3447,2016-05-03 13:25:04,"Closing this, hoping my code sample was useful to @edias
",jpsim,edias
3447,2016-05-03 21:53:36,"Thanks @jpsim 
",edias,jpsim
3443,2016-04-15 17:01:54,"@AndrewBarba can you use convenience initializers instead? Should be simpler: https://realm.io/docs/swift/latest#adding-custom-initializers-to-object-subclasses
",jpsim,AndrewBarba
3443,2016-04-15 17:22:08,"@mrackwitz I heavily use these objects in lists and queries, and have a pretty hefty set of unit tests (and production app) that's been passing for a number of realm versions now.

@jpsim The `Mappable` protocol requires the `init(_ map: Map)` initializer, once I add that the Swift compiler forces me to make that `required` and then it forces me to add all of the required initializers after that. It literally becomes a series of clicking that red open dot in Xcode and then adding the suggested edits.
",AndrewBarba,mrackwitz
3443,2016-04-15 17:22:08,"@mrackwitz I heavily use these objects in lists and queries, and have a pretty hefty set of unit tests (and production app) that's been passing for a number of realm versions now.

@jpsim The `Mappable` protocol requires the `init(_ map: Map)` initializer, once I add that the Swift compiler forces me to make that `required` and then it forces me to add all of the required initializers after that. It literally becomes a series of clicking that red open dot in Xcode and then adding the suggested edits.
",AndrewBarba,jpsim
3442,2016-04-18 20:22:21,"@mrackwitz I pushed up an alternative approach in https://github.com/realm/realm-cocoa/compare/mr-deprecate-mixed...jp-mr-deprecate-mixed, which I'd like you to consider. Feel free to either cherry pick those commits onto your branch, or borrow from them more granularly if you'd like. If for whatever reason you don't think that approach is preferable, let me know.
",jpsim,mrackwitz
3442,2016-04-19 08:28:45,"@jpsim: Something like that was the first alternative I considered as well, but I think it'd preferable to log not only the property name, but also the class name. What do you think outweights?
",mrackwitz,jpsim
3439,2016-04-14 23:37:06,"Thanks for the PR, @tgoyne! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,tgoyne
3438,2016-05-18 05:15:25,"Thanks @austinzheng!
",fisch0920,austinzheng
3437,2016-04-15 18:10:34,"@tgoyne: Thanks for the very detailed proposal how to test that. I was thinking about that and @ironage was also giving me some good feedback. I'll report back, once I was able to reproduce it, whether it is actually recoverable and if it's a good idea to test that continuously.
",mrackwitz,tgoyne
3436,2016-04-14 15:58:53,"@georgepoenaru 
I believe you forgot to specify `dynamic` to `lastMessage` property. If there is no `dynamic` attribute on the property, the Realm object cannot invoke Realm's getter method due to dispatch statically by Swift compiler. (`description` method invoke `valueForKey()` method internally, it occurs dynamic dispatch. that's why you can see the `lastMessage` value in the `description`)

So could you confirm setting `dynamic` attributes on your model definition?



NOTE: `RealmOptional` and `List<T>` properties cannot be set `dynamic`.
See also property cheetsheet: https://realm.io/docs/swift/latest/#cheatsheet
",kishikawakatsumi,georgepoenaru
3434,2016-04-14 08:40:34,"Hi @promisenxu, I could reproduce the same linker warnings using the same configuration as you (though Xcode 7.2.1 7C1002). I suspect that this is happening because Realm's core binary was built using clang from Xcode 7.3, as this linker warning isn't present on that version of Xcode.

Generally, we try to support Xcode versions going back to 6.4 for Realm Objective-C, so this is something we'll look into further to see if we can avoid the linker warning. Thanks for reporting this.
",jpsim,promisenxu
3434,2016-04-14 09:09:49,"Thank you so much @jpsim ! Does it mean if Xcode is upgraded, the warnings should go away?
",promisenxu,jpsim
3431,2016-10-18 22:16:21,"@tirrorex this ticket is a feature request, there's presently no API to add notification blocks to Realm objects, that can only be done on Realms and Realm Collections.
",jpsim,tirrorex
3431,2016-11-03 08:48:30,"@jpsim 
I have one more layer of abstractions on top of all realm-objects, where if updateListener will be set, I will instantiate object associated query Results entity (based on primary key filter), and add notificationBlock to it.

So far it has been working great, so are there any drawbacks backing RealmObject with associated query Results entity provided that only object that will have updateListener set will be backed?
",ambientlight,jpsim
3431,2016-11-08 19:22:15,"@ambientlight sounds like that might work with your case. It's certainly a bit wasteful to create a query for just a single object, but if you don't need to know which properties were modified and want to avoid KVO's uncomfortable API, your approach sounds fine.
",jpsim,ambientlight
3427,2016-04-12 21:12:27,"Sorry to see you're affected by this crash @hermanolsson! Could you share the complete backtrace for this crash? That could help us identify where this issue is happening.

Also, any insight into what your query looks like, or your model definitions, would help.

Given that this has to do with thread handover of results, it's quite possible that this is caused by a race condition between threads, which would also make it more difficult for you or us to reproduce the problem.

I just saw @tbaranes chime in, same goes to you, if you can share more about the issue, that's the only way we'll be able to make progress on this.
",jpsim,hermanolsson
3427,2016-04-12 21:12:27,"Sorry to see you're affected by this crash @hermanolsson! Could you share the complete backtrace for this crash? That could help us identify where this issue is happening.

Also, any insight into what your query looks like, or your model definitions, would help.

Given that this has to do with thread handover of results, it's quite possible that this is caused by a race condition between threads, which would also make it more difficult for you or us to reproduce the problem.

I just saw @tbaranes chime in, same goes to you, if you can share more about the issue, that's the only way we'll be able to make progress on this.
",jpsim,tbaranes
3426,2016-05-03 13:23:47,"Just following up on @bdash's last comment:

> Are you able to reproduce this at all yourself? Are you in contact with any users that are able to reproduce this? Being able to retrieve a Realm file that is hitting this issue would provide more information about what's going on here.
",jpsim,bdash
3426,2016-05-11 12:17:50,"@justinWShJ could you please open a new issue with a detailed bug report including exact steps to reproduce? I can open the file you shared fine in the Realm Browser version 0.101.
",jpsim,justinWShJ
3426,2016-06-28 09:23:47,"Thanks for the response and reopening the issue.

> Is it possible this device is jailbroken and the permissions for this location were changed?

According to Crashlytics the users having this issue are not jailbroken.

> A bad Realm file header indicates a corrupted file, which can happen if non-Realm APIs were used to touch the file at all. This commonly happens when users attempt to replace, delete or update a Realm file using system file manager APIs while continuing to access the file using Realm APIs.

It would be strange that the reason for this is file manipulation, specially considering that this started happening exactly after updating to a newer Realm version. 

Maybe this is indeed related with https://github.com/realm/realm-cocoa/issues/3422, where users that had that problem are now left with a corrupted file, despite @bdash's intuition that there's no relation. I would try to reproduce it but besides being intricate, chances of being able to actually reproduce it are slim - I'd need to somehow create a realm file pre-0.96.2 for an older schema version, then 'update' to 0.96.2 and to the latest schema version, run the migration and hope for #3422 to appear, then update to a newer realm version, create a release build, run the app, and hope for the bad header issue to appear. 

If there's suspicion from you guys that there could be a link between these two I can try - otherwise, any other suggestion? Last resort I will just recreate the file when this exception happens, but I'd like to avoid that, anything not synchronized to our servers at that point will be lost.
",maxneust,bdash
3426,2016-07-06 19:01:01,"I'm sorry for the lack of response, @maxneust, I haven't had anything very useful to write back. If you do manage to reproduce this and share how we can too, I'll gladly investigate this further.

Would it be possible to send us one of the affected Realm files so we can see what went wrong? We might be able to retrieve some data from it.
",jpsim,maxneust
3426,2016-07-25 15:11:40,"@borzh: Is this issue reproducible for you on your own device?
Are you making anywhere modifications to the Realm on the file system as e.g. deleting the database? This is not supported as long as a Realm file is opened and accessed.
",mrackwitz,borzh
3426,2016-07-26 16:51:40,"Thanks for following up @borzh. I'll be closing this again for lack of any new information.
",jpsim,borzh
3425,2016-04-12 14:13:30,"@mrackwitz 0.98.5
",yushuyi,mrackwitz
3425,2016-04-12 20:41:22,"@yushuyi could you please share more information about how this occurred? Can you reproduce this crash yourself? If so, could you share steps for us to reproduce this?
",jpsim,yushuyi
3425,2016-04-13 01:56:20,"@jpsim 我执行了一个删除某个Object的操作  我无法重现, 只出现了一次
",yushuyi,jpsim
3425,2016-04-13 23:23:55,"Unfortunately @yushuyi, we can't make much sense of that stack trace. We'll need a reproduction sample to make progress on this.
",jpsim,yushuyi
3425,2016-04-14 01:49:04,"@jpsim my english is poor#_#! i meet this bug, the below code  can reproduce this bug


",lhyhsx,jpsim
3425,2016-04-14 04:40:54,"@lhyhsx sorry I can't reproduce the problem with your code sample. Here's a complete iOS app that attempts to incorporate your code to trigger the problem:



But this succeeds, printing:


",jpsim,lhyhsx
3425,2016-10-20 16:25:08,"Thanks for sharing @Kirow. I'm closing this under the presumption that this issue no longer manifests itself in recent versions of Realm.
",jpsim,Kirow
3424,2016-04-12 20:29:05,"@rohirohitsisodia please open an issue on the Realm Browser's issue tracker (https://github.com/realm/realm-browser-osx/issues/new) along with more information, such as which steps we can take to reproduce the problem you're seeing.
",jpsim,rohirohitsisodia
3423,2016-04-12 10:05:28,"After change shareInstance's declaration as below , the issue is  gone:@mrackwitz




",peiweichen,mrackwitz
3422,2016-04-10 21:29:56,"@bdash Thank you for your response. Unfortunately, I can't use instruments on an app signed with a distribution identity, can only do it with one signed with a dev one, and as mentioned before the dev version of the app strangely doesn't have this issue.
",maxneust,bdash
3422,2016-04-11 03:47:46,"@maxneust, migrations are performed at initialization time, and the migration block can set properties.

@mazurio, please file a new issue. I don't think there's any reason to assume at this point that what you're seeing is the same issue as what @maxneust is hitting, despite any superficial similarities.
",bdash,mazurio
3422,2016-04-11 03:47:46,"@maxneust, migrations are performed at initialization time, and the migration block can set properties.

@mazurio, please file a new issue. I don't think there's any reason to assume at this point that what you're seeing is the same issue as what @maxneust is hitting, despite any superficial similarities.
",bdash,maxneust
3422,2016-04-11 08:23:19,"Thanks @bdash I have actually figured out what I did wrong. I have added helper methods to the RealmObject and I didn't realise they are not supported yet in Swift - yet, I wish the message was more clear about that.
",mazurio,bdash
3422,2016-04-11 08:51:37,"@bdash I understand that, but the only relevant migration code being executed that was not present in previous versions of the app is the last piece:



This was a property that was renamed (from originalAssetUrl to originalAssetIdentifier), but the type is exactly the same (NSString*), so I don't think this could cause the issue - the value in the old object was already set, and with 100% certainty it was a string.
",maxneust,bdash
3420,2016-05-12 09:27:52,"@kishikawakatsumi @jpsim 

Just uploaded a sample project in case it can help: https://github.com/rsahara/realmtest

Logs with REALMVERSION=1



Logs with REALMVERSION=2



This project shows how the migration ends silently with the ""unknown values"" above. I didn't notice those values changed at first. Neither the old values, nor the default values I provided are used.
A bad migration can kill a service, so I think something to avoid those values, unexpected to the developer, would be helpful.
Thanks!
",rsahara,jpsim
3420,2016-05-12 09:27:52,"@kishikawakatsumi @jpsim 

Just uploaded a sample project in case it can help: https://github.com/rsahara/realmtest

Logs with REALMVERSION=1



Logs with REALMVERSION=2



This project shows how the migration ends silently with the ""unknown values"" above. I didn't notice those values changed at first. Neither the old values, nor the default values I provided are used.
A bad migration can kill a service, so I think something to avoid those values, unexpected to the developer, would be helpful.
Thanks!
",rsahara,kishikawakatsumi
3420,2016-05-27 15:16:50,"Discussing this more, @kishikawakatsumi and I determined that it should be a programmer error to not set new values in the new Realm's required property. So we're closing this.
",jpsim,kishikawakatsumi
3419,2016-04-11 17:23:26,"Another downside to using `Results` for Swift properties is that the constructor would also be available but invalid from other contexts. Putting that in its own type offers stronger context and less chance of accidental auto-complete or confusion IMO.

> > Have you done any thinking about restricting the number of backlinks to only 1?
> 
> I'm skeptical about supporting this at present given that we can't enforce there being only a single backlink to a given object.

We could offer a shortcut to an optional first backlink, equivalent to `LinkingObjects(fromType: Person.self, property: ""child"").first`, but I don't see the value there for the same reasons @bdash shared.

> Objective-C `RLMLinkingObjects` properties are `nil` for standalone objects, but Swift `LinkingObjects` cannot be. How should we reconcile this?

Return a `LinkingObjects` backed by an empty RLMResults? I'd actually say that'd be preferable to `nil` in Objective-C too.

> Do we need to support KVO on linking objects properties in the initial implementation?

Without reviewing too deeply, I'd suspect this already works with KVO when tracking top-level results properties like `count`. If it's not too much work to assess what's missing for more complete KVO support, it'd be nice to at least do that before we determine whether or not it's worth the investment. At the very least we should track completing KVO support as a GH issue if we decide to punt on it.

> Is there a nicer way to declare the properties in Objective-C?

We could introduce some sort of `RLMLinkingObjectsDefinition` class in Objective-C which would likely avoid some user issues with remembering the NSDictionary format:



Naming alternative could be `RLMBacklinkDefinition` depending on if we want to use that term at all.

> Is it ok to make `Results` non-final? Can we avoid it?

We could avoid it by typaliasing `LinkingObjects` to `Results`, which would be nicer in some ways, worse in others.

> What should we do with `Object.linkingObjects(_:forProperty:)`?

I'd vote to deprecate it too.
",jpsim,bdash
3419,2016-04-19 16:20:55,"This is now ready for review feedback.

/cc @jpsim, @tgoyne, @mrackwitz, @kishikawakatsumi 
",bdash,mrackwitz
3419,2016-04-19 16:20:55,"This is now ready for review feedback.

/cc @jpsim, @tgoyne, @mrackwitz, @kishikawakatsumi 
",bdash,jpsim
3419,2016-04-21 09:45:00,"This looks excellent @bdash! My only concern is cosmetic: I dislike the `klass` name. Could we call it `objectClass` for consistency with other parts of the API that refer to `objectClassName` for example?

To address your remaining checklist items, yes I think it's fine to make Results non-final, there's not much users can do to hurt themselves by subclassing Results. As for KVO support, I do think that needs to be documented and an issue be created to track addressing that, but it's certainly not worth delaying this next release to get that in.

Once core 0.98.1 is out, a big 👍 from me!
",jpsim,bdash
3419,2016-04-21 12:06:35,"I agree with what @jpsim commented here, especially the big :+1:!
",mrackwitz,jpsim
3419,2016-04-22 01:33:48,"While adding the tests for fine-grained notifications that @tgoyne requested I've discovered a few issues that need to be addressed. At least one appears to require a fix in core 😦 
",bdash,tgoyne
3418,2016-04-07 14:53:37,"I can confirm what @Kirow stated here before. You will need to pull all relevant objects into an `NSArray` and can sort this by Foundation's APIs instead.
",mrackwitz,Kirow
3416,2016-04-07 09:32:38,"@sochalewski 
Because you didn't hold `NotificationToken` instance when you add the notification. So the notification token deallocated immediately the method passed. That's why the notification block was not called at all.

> The notification stays active as long as a reference is held to the returned notification token. You should hold onto a strong reference to this token on the class registering for updates, as notifications are automatically un-registered when the notification token is deallocated.

https://realm.io/docs/swift/latest/#notifications

Can you try like the following?


",kishikawakatsumi,sochalewski
3415,2016-04-07 11:55:38,"@Kirow: Thanks for jumping in here. :+1:
@i-phil: Does the sample code help with your question?
",mrackwitz,Kirow
3415,2016-04-07 13:29:22,"@Kirow @mrackwitz thank you,but it can't help me with this question



this is a json mode for me, i want use realm to cache it, so i changed code to this:
`@interface SHOT : RLMObject`
and i don't know how to change
`@property (nonatomic, strong) NSArray<NSString> * tags;`
",iphilcc,mrackwitz
3415,2016-04-07 13:29:22,"@Kirow @mrackwitz thank you,but it can't help me with this question



this is a json mode for me, i want use realm to cache it, so i changed code to this:
`@interface SHOT : RLMObject`
and i don't know how to change
`@property (nonatomic, strong) NSArray<NSString> * tags;`
",iphilcc,Kirow
3415,2016-04-07 14:20:07,"@Kirow  thank you, but it's too complicated
",iphilcc,Kirow
3415,2016-04-07 14:38:59,"@mrackwitz sorrry, my question is: i have a json string, like this:
{""tags"":[""1"", ""2""]} 
I want to unserialize it as an realm object,
",iphilcc,mrackwitz
3415,2016-04-07 15:07:55,"@Kirow If it is like this?  This is a complete json object。
{
  ""html_url"" : ""https:\/\/dribbble.com\/shots\/2637319-Hello-Circular"",
  ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/projects"",
  ""team"" : {
    ""html_url"" : ""https:\/\/dribbble.com\/Spotify"",
    ""location"" : ""Stockholm \/\/ New York \/\/ London"",
    ""pro"" : false,
    ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/projects"",
    ""following_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/following"",
    ""projects_count"" : 0,
    ""members_count"" : 20,
    ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/buckets"",
    ""updated_at"" : ""2016-04-07T07:23:47Z"",
    ""team_shots_url"" : ""https:\/\/api.dribbble.com\/v1\/teams\/181459\/shots"",
    ""shots_count"" : 22,
    ""rebounds_received_count"" : 4,
    ""bio"" : """",
    ""links"" : {
      ""web"" : ""http:\/\/www.spotify.com"",
      ""twitter"" : ""https:\/\/twitter.com\/spotifydesign""
    },
    ""name"" : ""Spotify"",
    ""avatar_url"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/181459\/avatars\/normal\/8c8e4552d7f149815586e2bf5a533872.jpg?1434458347"",
    ""can_upload_shot"" : true,
    ""type"" : ""Team"",
    ""shots_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/shots"",
    ""id"" : 181459,
    ""buckets_count"" : 0,
    ""members_url"" : ""https:\/\/api.dribbble.com\/v1\/teams\/181459\/members"",
    ""followers_count"" : 6526,
    ""likes_received_count"" : 576,
    ""likes_count"" : 8,
    ""followings_count"" : 15,
    ""created_at"" : ""2012-07-24T19:08:16Z"",
    ""followers_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/followers"",
    ""comments_received_count"" : 65,
    ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/likes"",
    ""username"" : ""Spotify""
  },
  ""title"" : ""Hello Circular."",
  ""tags"" : [
    ""brand"",
    ""circular"",
    ""design"",
    ""font"",
    ""spotify"",
    ""typeface"",
    ""ui""
  ],
  ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/buckets"",
  ""updated_at"" : ""2016-04-07T07:23:47Z"",
  ""animated"" : false,
  ""comments_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/comments"",
  ""comments_count"" : 17,
  ""images"" : {
    ""hidpi"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still.png"",
    ""teaser"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still_teaser.png"",
    ""normal"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still_1x.png""
  },
  ""attachments_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/attachments"",
  ""rebounds_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/rebounds"",
  ""id"" : 2637319,
  ""buckets_count"" : 8,
  ""attachments_count"" : 5,
  ""rebounds_count"" : 0,
  ""user"" : {
    ""html_url"" : ""https:\/\/dribbble.com\/hellostanley"",
    ""location"" : ""London \/ Stockholm"",
    ""pro"" : true,
    ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/projects"",
    ""following_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/following"",
    ""projects_count"" : 0,
    ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/buckets"",
    ""updated_at"" : ""2016-04-07T08:16:36Z"",
    ""shots_count"" : 2,
    ""rebounds_received_count"" : 0,
    ""bio"" : ""British Designer living in Stockholm. Design Director <a href=\""https:\/\/dribbble.com\/Spotify\"">@Spotify<\/a>."",
    ""links"" : {
      ""web"" : ""http:\/\/www.hellostanley.com"",
      ""twitter"" : ""https:\/\/twitter.com\/hellostanley""
    },
    ""name"" : ""Stanley"",
    ""avatar_url"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/avatars\/normal\/8b2a042a54708a8be6036cdb7d4e4de3.jpg?1432991845"",
    ""can_upload_shot"" : true,
    ""type"" : ""Player"",
    ""shots_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/shots"",
    ""id"" : 3883,
    ""buckets_count"" : 0,
    ""teams_count"" : 1,
    ""teams_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/teams"",
    ""followers_count"" : 107,
    ""likes_received_count"" : 591,
    ""likes_count"" : 92,
    ""followings_count"" : 84,
    ""created_at"" : ""2010-08-03T10:25:47Z"",
    ""followers_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/followers"",
    ""comments_received_count"" : 26,
    ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/likes"",
    ""username"" : ""hellostanley""
  },
  ""height"" : 300,
  ""width"" : 400,
  ""likes_count"" : 352,
  ""created_at"" : ""2016-04-07T07:16:02Z"",
  ""views_count"" : 4362,
  ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/likes"",
  ""description"" : ""<p>Meet Circular, Spotify's new typeface. <\/p>\n\n<p>Circular is a friendly sans-serif with unmistakable character and universal appeal. Just the traits we were looking for when choosing a typeface. <\/p>\n\n<p>This update is a key part of the brand refresh we introduced last year, and we couldn't be more excited to be rolling it out. The update is now live on iOS and soon to be on Android and Desktop too. We think you’re going to get on really well.<\/p>\n\n<p>Looking forward to sharing more with you soon.<\/p>\n\n<p>—Spotify Design.<\/p>""
}

#class
@interface SHOT : RLMObject
@property (nonatomic, assign) NSInteger id;
@property (nonatomic, strong) NSString \* title;
@property (nonatomic, strong) NSString \* description;
@property (nonatomic, assign) NSInteger width;
@property (nonatomic, assign) NSInteger height;
@property (nonatomic, strong) IMAGE \* images;
@property (nonatomic, assign) NSInteger views_count;
@property (nonatomic, assign) NSInteger likes_count;
@property (nonatomic, assign) NSInteger comments_count;
@property (nonatomic, assign) NSInteger attachments_count;
@property (nonatomic, assign) NSInteger rebounds_count;
@property (nonatomic, assign) NSInteger buckets_count;
@property (nonatomic, strong) NSDate \* created_at;
@property (nonatomic, strong) NSDate \* updated_at;
@property (nonatomic, strong) NSString \* html_url;
@property (nonatomic, strong) NSString \* attachments_url;
@property (nonatomic, strong) NSString \* buckets_url;
@property (nonatomic, strong) NSString \* comments_url;
@property (nonatomic, strong) NSString \* likes_url;
@property (nonatomic, strong) NSString \* projects_url;
@property (nonatomic, strong) NSString \* rebounds_url;
@property (nonatomic, strong) NSArray \* tags;
@property (nonatomic, strong) USER \* user;
@property (nonatomic, strong) TEAM \* team;
@end
",iphilcc,Kirow
3415,2016-04-08 01:46:26,"@Kirow yes,i know, but my json to Model is auto complete

[STINetwork](https://github.com/i-phil/STINetwork/blob/master/STINetwork/http/vendor/AutoCoding/NSObject%2BAutoCoding.h)

I just want to combine Realm and AutoJson2model tool

if，no way to do this. i'll tell server, please don't send StringArray, just send like this {""tag"":""tag1,tag2,tag3""}, thank you
",iphilcc,Kirow
3415,2016-04-13 16:42:43,"@i-phil: I'm going to close this issue now. From your last message it looks like you found a way to resolve your question?
Thanks again @Kirow for your overwhelming assistance here.
",mrackwitz,Kirow
3413,2016-04-06 17:36:37,"@rsahara 

I think you need to copy old value to new properties in migration block. Like the following:



Perhaps you only increment schema version though, but you didn't write migration block, right?
",kishikawakatsumi,rsahara
3413,2016-04-07 02:54:03,"@kishikawakatsumi 
That's what I did for our current update, when I realized those values were not automatically migrated. It works, but I considered it to be a workaround. I'd appreciate if you can improve this behavior, I believe this kind of migration can be done automatically by the library.
I don't think many people would prefer 1970/01/01 9:00:00 than the old value.
If it is too specific to our case, maybe some warnings or documentation on this behavior would be helpful, because 1970/01/01 9:00:00 was specified nowhere in our project and the migration ended without any warning/error log.
Thanks!
",rsahara,kishikawakatsumi
3412,2016-04-20 12:53:40,"@palatov: Thanks for reporting that. Do you have any more information to share when the crash happens for you and what you're doing at that moment in your app? If you can reproduce it yourself and could share a sample project with us (confidentially to help@realm.io), that would be vastly helpful for our further investigations.
",mrackwitz,palatov
3412,2016-05-02 15:38:07,"@ptseng can you share a project that triggers the crash? Thanks!
",jpsim,ptseng
3412,2016-05-03 20:51:13,"@jpsim I was able to reliably reproduce the crash referenced in #3510, although I am not sure if it is the same crash as in this thread.

[boom.zip](https://github.com/realm/realm-cocoa/files/247737/boom.zip) (read the `README`)

Basically: the entire database (the memory mapping) is yanked out from under Realm by the system if the file protection mode is `NSFileProtectionModeComplete` when the device is locked such that Realm appears to crash in the next operation it attempts.

EDIT: Test device must have a passcode set
",conradev,jpsim
3412,2016-05-05 18:12:48,"Thanks for taking the time to craft a repro case @conradev! We'll need to discuss internally to figure out how we can mitigate this, if it's at all possible...
",jpsim,conradev
3412,2016-10-11 18:10:34,"I'm glad to hear that @asjesset!

Can others on this thread confirm whether or not 2.0.2 also resolved this problem for you?
",jpsim,asjesset
3412,2016-10-12 11:14:51,"@jpsim I'm sorry to bring bad news, but we have been seeing this since the upgrade from 1.0.2 to 1.1.0 and above. I have, however, managed to create a sample project reproducing this issue, and I have emailed it to help@realm.io.

In short, the problem (for us) seems to be related to an NSURLSession dispatching the delegate methods on the `.mainQueue()` if supplied on session creation.

When we then write download progress to Realm in `func URLSession(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, didWriteData bytesWritten: Int64...)` and at the same time listen for changes via a notification block for a results set on the same queue, the `BadVersion` error almost\* always occurs.

_\* for one file download it sometimes work, but for two concurrent downloads, it always crashes._

I'm really not sure why this would happen. Perhaps we missed some part of the Realm documentation stating we should not do this the way we do, but hopefully this sample project can help you guys figure out what might render this.
",hermanolsson,jpsim
3412,2016-10-12 20:09:52,"Thanks for reporting and sharing a very good repro case @hermanolsson! We were able to reproduce the race on our end and @tgoyne has already pushed a fix in realm/realm-object-store#195. We'll close this issue once that fix has been included in this repo, at which point it would be useful if you could try it out in your main app where you've been experiencing this problem.
",jpsim,hermanolsson
3412,2016-10-12 20:09:52,"Thanks for reporting and sharing a very good repro case @hermanolsson! We were able to reproduce the race on our end and @tgoyne has already pushed a fix in realm/realm-object-store#195. We'll close this issue once that fix has been included in this repo, at which point it would be useful if you could try it out in your main app where you've been experiencing this problem.
",jpsim,tgoyne
3412,2016-10-12 21:29:48,"@jpsim do you have any idea about the timeframe for the fix to be merged here? We're having this crash in production and are preparing a fix version. Would love to include this in the fix since it is one of our top issues. Thanks a lot.
",kevincador,jpsim
3412,2016-10-18 15:09:04,"@jpsim @tgoyne is there a way to test this? We are seeing this crash a lot right now and I would like to send a version to our beta testers to validate the fix. Thanks.
",kevincador,jpsim
3412,2016-10-18 15:09:04,"@jpsim @tgoyne is there a way to test this? We are seeing this crash a lot right now and I would like to send a version to our beta testers to validate the fix. Thanks.
",kevincador,tgoyne
3412,2016-10-18 22:51:40,"@kevincador you can test this by building from the `master` branch. If you're using CocoaPods, specify the following in your Podfile:



_EDIT: changed `jp-update-object-store` to `master` branch since #4234 was just merged._
",jpsim,kevincador
3412,2016-10-19 14:17:28,"Thank you @jpsim ! I have integrated `master` into our project and I have not seen this crash since. 👍
",hermanolsson,jpsim
3412,2016-10-19 14:37:58,"@jpsim did a lot of testing in local. So far, so good. Will send a new version to our beta testers soon and get back to you asap if we see the issue again.
",kevincador,jpsim
3412,2016-10-27 18:05:57,"@jpsim We're debating downgrading to 1.0.2 while waiting for this issue to be fixed. Does this sound like a good strategy to you, or would it be better to wait for the update?
",philwebster,jpsim
3412,2016-12-06 00:54:18,"@pawelkata since your issue appears to be occurring during a migration of a Realm rather than when delivering collection notifications, it's likely to be unrelated to the rest of the discussion in this thread.

However, I'd encourage you to update to the latest version of Realm and open a _new_ issue along with more information if you run into problems. Thanks.",jpsim,pawelkata
3411,2016-04-06 08:55:07,"Thanks for the PR, @TimOliver! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,TimOliver
3409,2016-04-05 12:50:58,"@bcicube That had been done several days ago https://github.com/realm/realm-cocoa/pull/3388
Can you reload Alcatraz repository and retry it?

Also, ""Open Realm Browser"" submenu in Xcode ""View"" menu is the feature of Realm Browser Plugin. https://github.com/kittinunf/RealmBrowser-Plugin

This is not our product. Can you report this to that repository?
",kishikawakatsumi,bcicube
3408,2016-05-03 13:22:57,"Closing this since we haven't heard back from @davros1970 in over two weeks.
",jpsim,davros1970
3407,2016-04-05 13:37:29,"@jazz-mobility 
What do you think the following code?

First, store `map[""values""]` to local variable. It is an array of strings. Then fill a string values to the `List<Value>.


",kishikawakatsumi,jazz-mobility
3407,2016-04-05 13:44:20,"Thanks @kishikawakatsumi worked like a charm. Exactly what i was looking for.
",jazz-mobility,kishikawakatsumi
3404,2016-03-31 21:00:53,"Thanks, @jpsim!
",istx25,jpsim
3402,2016-03-31 02:32:54,"@jpsim from build.sh line 349 i found this:



   what does `../realm-core` do? I don't have `realm-core` in parent folder, so it alway not using local cache.
",6david9,jpsim
3402,2016-03-31 03:37:57,"@bdash Yes. I have try @jpsim 's way, but I found the build.sh maybe have some issue. 
build.sh have some logical to using local cache, this pr should be closed.
I think I should open another issue.
",6david9,jpsim
3402,2016-03-31 03:37:57,"@bdash Yes. I have try @jpsim 's way, but I found the build.sh maybe have some issue. 
build.sh have some logical to using local cache, this pr should be closed.
I think I should open another issue.
",6david9,bdash
3402,2016-03-31 03:48:47,"@bdash In my mac, echo $TMPDIR is 



is not `/tmp` and it may be different each time. so is hard for me to put tarball to `$TMPDIR/core_bin/`.

That's why i open this pr.
",6david9,bdash
3399,2016-04-14 16:56:30,"Please review @tgoyne @bdash 
",jpsim,tgoyne
3399,2016-04-14 23:32:04,"Addressed your feedback @tgoyne 
",jpsim,tgoyne
3399,2016-04-19 13:30:39,"Any final feedback since my last modifications @tgoyne?
",jpsim,tgoyne
3398,2016-04-02 11:00:17,"@dannypier just asking, did you mark this key as `Yes` in Xcode 7.3?
![image](https://cloud.githubusercontent.com/assets/1223339/14225875/f56b00b4-f904-11e5-9695-e5d8c6f05af3.png)
",luohui8891,dannypier
3398,2016-04-07 16:04:17,"@luohui8891 Both our project and the target for the Realm Pod had the Build Setting for _Weak References in Manual Retain Release_ it set to **No**
",dannypier,luohui8891
3398,2016-04-08 09:08:01,"@dannypier Got it. Thanks.
",luohui8891,dannypier
3398,2016-07-08 15:35:31,"@janesoko if you're hitting this exception in Xcode, lldb will pause at the point where the uncaught exception is thrown and then you have the entire backtrace, and can navigate to the point where this is triggered entirely within the Xcode GUI.
",jpsim,janesoko
3392,2016-04-05 14:01:00,"@dltlr Yes. `Int64` comforms to `AddableType`. See https://github.com/realm/realm-cocoa/blob/master/RealmSwift-swift2.0/Results.swift#L45
",kishikawakatsumi,dltlr
3391,2016-04-01 10:20:13,"@kokhong20 

The crash on update the new scheme.

Invoked Realm API 

RLMObjectSchema.mm
- (realm::Table *)table
  _table = ObjectStore::table_for_object_type(_realm.group, _className.UTF8String

My solution:
get the table object before check the type of _className
 if ([_className isKindOfClass:[NSString class]]) {
                _table = ObjectStore::table_for_object_type(_realm.group, _className.UTF8String);
}

 It's not the best solution , Waiting for the best answer.
",zhangzhang86,kokhong20
3391,2016-04-02 11:01:21,"@zhangzhang86 just asking, did you mark this key as `Yes` in Xcode 7.3?
![image](https://cloud.githubusercontent.com/assets/1223339/14225875/f56b00b4-f904-11e5-9695-e5d8c6f05af3.png)
",luohui8891,zhangzhang86
3391,2016-04-04 11:01:04,"@bdash This issue solved by updating to the latest version 0.98.6. Just curious what is causing this issue and is only on production release.
",kokhong20,bdash
3391,2016-04-05 03:04:53,"@luohui8891 
No.

Just asking, Are you from China ?
",zhangzhang86,luohui8891
3391,2016-04-05 06:41:51,"@zhangzhang86 yep.
",luohui8891,zhangzhang86
3390,2016-06-08 21:26:11,"Yes @icanzilb, that's why this ticket is still open and tracked as a P1.
",jpsim,icanzilb
3390,2017-01-11 13:32:49,"I'm still seeing this issue on Realm 1.1.0 Obj-C. Got knowledge of this because got some reports of a user having app crashes on migration. Any updates on this? In any case, I will apply @jpsim tips to try to avoid the issue if possible. Thanks",nigarcia88,jpsim
3388,2016-03-29 06:04:47,"Thanks for the PR, @TimOliver! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,TimOliver
3387,2016-03-29 06:21:02,"@codesourse The error occurs when failed to instantiate the Realm. Can you show your piece of code around instantiating the Realm? Is there a difference in the file path for Realm between debug build and release build?
",kishikawakatsumi,codesourse
3386,2016-03-29 05:43:12,"@priya-vr 
If you'd like to create optional type of object type (`String`, `NSDate` or `NSData`), you can just declare the properties as optional, like the following:



If create optional type for `Int`, `Float` or `Double`, you should wrap the value with `RealmOptional<T>`, like the following:



Plese see also https://realm.io/docs/swift/latest/#optional-properties
",kishikawakatsumi,priya-vr
3386,2016-03-29 05:46:03,"Thanks @kishikawakatsumi 
",priya-vr,kishikawakatsumi
3384,2016-04-24 23:21:13,"All great ideas @kunalsood! Although I'm not convinced of the constraint to never have empty groups, but it's pretty early for me to consider at this point, so who knows where this will go.
",jpsim,kunalsood
3384,2016-08-31 20:24:34,"@jpmcglone Just use one token for your main query and do all sectioning logic by yourself.
",sxua,jpmcglone
3384,2016-11-23 18:28:55,"@alexeychirkov have you seen our [GroupedTableView example](https://github.com/realm/realm-cocoa/blob/master/examples/ios/swift-3.0/GroupedTableView/TableViewController.swift)? That example has static sections, but there's this StackOverflow example showing dynamic sections: http://stackoverflow.com/a/38797693/373262",jpsim,alexeychirkov
3384,2016-11-29 21:59:53,"@jpmcglone What we've been doing is keeping a snapshot of visible results per-section to use as our actual data source, and only updating that snapshot per-section when we get a notification for that section.

Roughly:


This keeps the UITableViewDataSource in sync with your results sets as they're updated, because even though all of the RLMResults have live-updated at the same time, the snapshot still reflects the data that hasn't been updated yet.

Full disclosure: this approach hasn't been all smooth sailing for us. Since the visible results aren't live-updating like RLMResults, they can contain invalidated objects, which we can potentially try to dereference and end up with 💥 . ",LeffelMania,jpmcglone
3383,2016-03-27 20:52:18,"Thanks for filing this, @peterturza. Do you see the same crash when running on an iOS device rather than in the simulator?
",bdash,peterturza
3383,2016-03-28 06:25:49,"@bdash yes, the crash is the same on device and simulator
",peterturza,bdash
3383,2016-03-28 15:38:13,"@bdash  If i can help i have exactly the same issue here ....
",PoissonBallon,bdash
3383,2016-03-28 18:21:15,"The other project in which I use realm swift is functional after upgrade (tried today). @bdash maybe my model files could help to find the problem?
",peterturza,bdash
3383,2016-03-28 22:44:42,"@PoissonBallon, @williamvasconcelos: If you're willing to share builds of your app that reproduce this crash, I'd appreciate seeing them too. It'll help track down the common factor in the crash.
",bdash,williamvasconcelos
3383,2016-03-28 22:44:42,"@PoissonBallon, @williamvasconcelos: If you're willing to share builds of your app that reproduce this crash, I'd appreciate seeing them too. It'll help track down the common factor in the crash.
",bdash,PoissonBallon
3381,2016-05-10 17:03:22,"I've a similar request as we've seen inconsistent (even dangerous) behavior because we lack this ability to deep-copy an object graph in RealmCocoa like we can do in Java using `copyFromRealm`.

_(dangerous because one can then modify the persisted Realm… even from a detached, standalone object, simply by traversing a relationship)_

@jpsim typical use case if that helps you understand the need for this:



`standalonePerson.realm` is nil once detached from the Realm, but `standalonePerson.dog` isn't detached, so the dog gets modified in the DB even if the `Person` _is_ detached from the DB

---

_Extract of a discussion with @bdash on Slack on the subject:_

> [bdash] Java’s `copyFromRealm()` is an eager deep copy. Cocoa’s `init(value:)` is a shallow copy.
> …
> [bdash] Yes, I believe `standalonePerson.dog` will still be a persisted object and thus will still be modified.
> [bdash] I don’t think `init(value:)` was ever intended as a copy operation, but as a way to initialize an object from a dictionary or array like you’d get from JSON.
> However, that does mean we’re lacking a means of creating a detached copy of an object graph…
> 
> [alisoftware] So what would be the equivalent of Java's `copyFromRealm` in Swift?
> Typical situation: imagine a Contacts app, with `Person` objects each containing an `Address` property.
> First screen is the list of contacts, tap on one opens a modal to let you modify the person and its address, with ""Cancel"" vs. ""Validate"" buttons on top
> 
> **Typical workflow I'd use in this situation is to make a standalone copy of the `Person` to pass it to the editing modal, then use that standalone copy as the DataSource of the editing TableView to fill the various EditField cells etc… then if the user hits Cancel we drop that `Person` and if they hit ""Validate"" then we call the WebService, wait for the 200 OK, then on success save the modified, standalone `Person` back in the DB (using `updating:true`)**
> 
> The idea of doing it this way is that we somehow work on a ""snapshot"" of the `Person` during the edition step and while the WebService serializes to JSON and send the request, instead of risking it to auto-update (due to a change in another thread) during the whole process. Does that make sense?
> 
> **But then if we do that, then we do have an issue with `person.address` not being detached and risking to auto-update, despite `person` being detached** :confused:
> 
> [bdash] Yes, I can see why it’s desirable
",AliSoftware,jpsim
3381,2016-09-27 06:56:34,"@SandyChapman the use case here isn't too pass an object across threads. It is rather to do a deep copy detached from any Realm in order to create a standalone object for example.

See the detailed use case example I gave in my previous comment above: the need there is to manipulate a copy of the object rather than the original to be sure not to alter the original and/or its dependencies. (This could also be seen in a user case similar to CoreData's concept of ""child managedObjectContexts"")

PS: Besides, not all Realm objects have a primary key depending on your model and it's constraints so your solution wouldn't always be applicable anyway :😉
",AliSoftware,SandyChapman
3381,2016-10-19 13:10:27,"@jpsim What would have to happen in order for this enhancement to be more highly prioritized/actively worked on? 
",jasper-ch-chan,jpsim
3381,2017-01-19 03:06:14,"@anlaital This solution works, but not if you have any circular dependencies. Do you have any strategy for this case, or do you just avoid circular dependencies?

EDIT: Circular dependencies is not a good idea. On iOS you can use backlinks. On Android I replaced them with Queries.",sipersso,anlaital
3372,2016-03-25 09:42:02,"@nixzhu, that's great news! After running the app and creating an account, I'm a little bit stuck on what to do to reproduce the problem. I clicked on the Feeds tab, clicked the `+` button at the top right to post some text. The text doesn't appear, though I'm not sure if that's expected. After clicking around in the Feeds tab I've not been able to find anything that looks like a Delete button to tap. Can you provide me with some more detail on what I should be doing, or perhaps post a screenshot showing what I should be tapping? Thanks in advance!
",bdash,nixzhu
3372,2016-03-25 12:08:33,"@bdash Make sure you run in develop branch. Can you tap Feeds tab's top-left button, choose Time filter?
",nixzhu,bdash
3372,2016-03-25 13:01:28,"@bdash I make some screen shots

1, 2, 3
![img_2664](https://cloud.githubusercontent.com/assets/435208/14044472/2e738500-f2cc-11e5-91de-95eb365c0abc.jpg)

4, 5
![img_2666](https://cloud.githubusercontent.com/assets/435208/14044495/6cfa9426-f2cc-11e5-9812-a2817c961f79.jpg)

6
![img_2669](https://cloud.githubusercontent.com/assets/435208/14044499/71a1ef56-f2cc-11e5-9c6f-5a26480e43be.jpg)

7, 8
![img_2670](https://cloud.githubusercontent.com/assets/435208/14044500/74616a0a-f2cc-11e5-9330-bcf5af4b469e.jpg)

9
![img_2671](https://cloud.githubusercontent.com/assets/435208/14044501/76c0589c-f2cc-11e5-8ba3-4ea236d8d997.jpg)
",nixzhu,bdash
3372,2016-03-25 16:07:09,"Thanks for the extra info, @nixzhu. When following your instructions, I do not see my newly-posted comment in the Feeds tab. This prevents me from being able to attempt to delete it. Do you have any idea why my post would not show up?
",bdash,nixzhu
3372,2016-03-28 04:03:07,"@bdash After `Post`, can you see `createFeedWithKind` in debug area? 
I look up the database of Yep, I can see you posted some test feeds. So it's strange that you can not see your newly-posted feeds. Can you pull to refresh in Feeds tab? Or can you tap Profile's Master to add some skills?
",nixzhu,bdash
3372,2016-03-28 07:08:03,"@bdash I think the problem is that you don't have an avatar (In normal register, user will set an avatar). So, go to Profile tab, tap top-right button; In Settings, select first cell; In Edit Profile, tap the circle to set an avatar. Finally, test again.
",nixzhu,bdash
3372,2016-03-28 15:21:01,"That was it! I have now been able to reproduce the crash. Thanks so much for helping me through the process, @nixzhu. 
",bdash,nixzhu
3371,2016-08-09 14:51:27,"@bdash I have the same problem with xCode 8.04 beta and swift 3. Are you going to release a new version or shall I use xCode 7.3? Thanks
",faklyasgyuri,bdash
3370,2016-03-29 02:23:47,"Thanks so much for this @icanzilb! I just made a few changes and pushed #3385 and will continue there.
",jpsim,icanzilb
3369,2016-06-27 17:20:53,"@JadenGeller this implementation doesn't actually work in a multi-threaded environment because at the time it wasn't straightforward to ""pin"" a version of the shared group such that when the async block runs that version is still around and hasn't advanced due to another thread. This is now possible via https://github.com/realm/realm-core/pull/1626 so you would need to incorporate the pinning functionality.
",bigfish24,JadenGeller
3369,2016-06-27 17:22:35,"Firing the completion block also isn't too elegant, wondering if there is a better way to do this cc @tgoyne?
",bigfish24,tgoyne
3366,2016-03-23 19:12:59,"@codeslubber it's possible this issue is unrelated with the Realm Swift binary incompatibility mentioned in other issues.

A release of Realm Swift built with Xcode 7.3 is blocked on https://github.com/realm/realm-cocoa/pull/3361#issuecomment-200500431. Feel free to help if you're so inclined.
",jpsim,codeslubber
3366,2016-03-23 19:20:29,"How? by trying to run the tests in Xcode? Looks like you have hit the wall there.

Have you talked to anyone at Apple? I would show this to the Xcode PM.

> On Mar 23, 2016, at 12:13 PM, JP Simard notifications@github.com wrote:
> 
> @codeslubber https://github.com/codeslubber it's possible this issue is unrelated with the Realm Swift binary incompatibility mentioned in other issues.
> 
> A release of Realm Swift built with Xcode 7.3 is blocked on #3361 (comment) https://github.com/realm/realm-cocoa/pull/3361#issuecomment-200500431. Feel free to help if you're so inclined.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/realm/realm-cocoa/issues/3366#issuecomment-200500725
",codeslubber,codeslubber
3366,2016-03-24 06:03:18,"@jpsim I saw your comment about having pods build from source to get around the issue.  You provided an example with carthage of how to do it, per chance do you know how I can have pods build from source instead of using the binaries?
",pnsean,jpsim
3366,2016-03-24 16:18:17,"@pavlem I also had to return to XCode 7.2.1, but I have managed to be able to build onto my iOS 9.3 device. Go into the contents folder of your XCode7.3(in Finder/Applications/XCode)/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport and copy the folder called ""9.3 (13E230)"" into the corresponding location of your XCode 7.2.1 installation, and that should make you able to use your device for testing.

Realm Guys! Are you working on this problem? This is a serious issue (considering that XC7.3 with Swift 2.2 compiler has been available for quite some time...). Also I would really appreciate, if you guys could notify us the next time, when updating to the next Swift/XCode version breaks the compilation of our Realm projects.

PS.: Using newest Realm-Swift as prebuilt dynamic framework.
",ZsoltMolnarrr,pavlem
3364,2016-03-24 03:32:03,"thanks @antfarm , it worked.
",haithngn,antfarm
3361,2016-03-24 18:22:53,"@jpsim, can you please take a look at the changes I added. Your earlier changes all look good to me.
",bdash,jpsim
3361,2016-03-25 04:49:53,":+1: thanks for all of this @bdash!
",jpsim,bdash
3360,2016-03-31 20:59:05,"> 1: The ""deleted"" properties are accessible on objects from the new version within the migration block.

This can be addressed by renaming the columns of deleted properties to a unique ID at the start of the migration, and maintain a map of names/uuids to use in the renaming operation.

> 2: Renaming a property then later introducing a new property with the old name doesn't look like it'll work.

I think it's necessary to remove all new schema validation altogether because of this, and other multi-version schema change scenarios.

> 3: Renaming the same property multiple times over the lifetime of a schema doesn't look like it'll work.

How about falling back to looking up the property by name in the new Realm? This would allow the following scenarios:



---

I'd like to get feedback on those changes before implementing them /cc @bdash @tgoyne.

Overall, a ""simple"" operation like renaming a property is complicated by not tracking intermediate schema changes. Other migration operations are also blocked on this design decision.
",jpsim,bdash
3360,2016-04-26 16:05:22,"Latest feedback and issues from @bdash have now been addressed, so this is once again ready for review @tgoyne @bdash 
",jpsim,bdash
3360,2016-05-05 17:48:49,"It'd be great to get this in the next release. Let me know if you have any concerns over this @tgoyne @bdash 
",jpsim,bdash
3359,2016-04-19 21:57:52,"@tgoyne, what work remains for the ""Large changesets, List"" item on your checklist?
",bdash,tgoyne
3359,2016-04-21 00:30:27,"Thank you @tgoyne and the team! 
",gaston23,tgoyne
3356,2016-04-28 10:33:30,"Closing this since @imrepapp can no longer reproduce, the sample project is gone, and other information shared here is attributable to CocoaPods & Xcode configuration issues or solved by clearing relevant caches.
",jpsim,imrepapp
3356,2016-09-26 03:45:45,"@lexuanquynh did you set the appropriate Swift version in your Podfile as described in our [installation instructions](https://realm.io/docs/swift/latest/#installation)?

for example:


",jpsim,lexuanquynh
3355,2016-03-22 16:23:58,"@jpsim @tikiatua `carthage build` doesn't support `--no-use-binaries` argument.
Use `carthage update --no-use-binaries` or `carthage bootstrap --no-use-binaries` instead.
",kishikawakatsumi,jpsim
3355,2016-03-22 16:23:58,"@jpsim @tikiatua `carthage build` doesn't support `--no-use-binaries` argument.
Use `carthage update --no-use-binaries` or `carthage bootstrap --no-use-binaries` instead.
",kishikawakatsumi,tikiatua
3349,2016-03-21 08:18:04,"Thanks for the PR, @mrgerych! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,mrgerych
3348,2016-03-29 01:55:37,"@JosephZZ please share a full reproduction case and we'll be able to identify if that's actually the case, or if there's a bug in Realm.
",jpsim,JosephZZ
3348,2016-05-02 15:34:01,"@slreddy1137 please open a new issue, as this ticket is fairly specific to @JosephZZ's exact use case and might not apply to yours. It will also be easier for us to help you if you share more specific information, like a sample project that demonstrates the problems you're facing.

And @JosephZZ, I hope this discussion, my proposed solutions and final explanation have helped you. I'll close this issue because I think we've sufficiently explained what's happening here. If you continue to have problems in the future, please open a new issue and we'll do our best to help again.
",jpsim,JosephZZ
3348,2016-05-02 15:34:01,"@slreddy1137 please open a new issue, as this ticket is fairly specific to @JosephZZ's exact use case and might not apply to yours. It will also be easier for us to help you if you share more specific information, like a sample project that demonstrates the problems you're facing.

And @JosephZZ, I hope this discussion, my proposed solutions and final explanation have helped you. I'll close this issue because I think we've sufficiently explained what's happening here. If you continue to have problems in the future, please open a new issue and we'll do our best to help again.
",jpsim,slreddy1137
3343,2016-03-29 01:54:45,"@TheHmmka sorry for the late reply, could you please share a more complete code sample and reproduction steps that highlights this memory leak? The `RLMResults* items = [Item objectsWhere: queryString];` you've shared is insufficient. For example, what's the `queryString`? Also, what's the model definition for your `Item` model? Without these, it's impossible for us to tell what's causing this memory leak.
",jpsim,TheHmmka
3341,2016-03-16 23:28:21,"Thanks @jpsim! I'll take a look and see how far I get. :+1: 
",istx25,jpsim
3341,2016-03-18 18:09:31,"Thanks again, @jpsim! :+1: 
",istx25,jpsim
3340,2016-03-16 23:10:45,"Thanks for filing this @LeffelMania. What are the NSFileProtection attributes of the Realm files and their parent directory? By default on iOS 8 and later, files have `NSFileProtectionComplete` attributes, which prevents them from being accessed while the device is locked. If you intend to access Realm files while the device is locked, you'll need to allow access to them by setting a more relaxed protection setting, as described in the [Using Realm with Background App Refresh](https://realm.io/docs/objc/latest/#using-realm-with-background-app-refresh) section of our docs.
",jpsim,LeffelMania
3340,2016-07-26 17:50:29,"@jpsim, I will try to reproduce it on my side and create a sample project with the issue.
",o15a3d4l11s2,jpsim
3338,2016-03-17 05:09:18,"Sorry you've hit this issue, @victor-kotov-arcadia . I've cross-posted this to our Realm Browser repo, realm/realm-browser-osx#145 where we'll continue conversations around this problem.

If you encounter issues with the Realm Browser in the future, please file an issue there. Issues relating to the Realm Objective-C or Realm Swift frameworks can be filed here.
",kishikawakatsumi,victor-kotov-arcadia
3332,2016-03-16 06:51:08,"Thanks! @jpsim 
",cactis,jpsim
3331,2016-03-14 22:47:40,"Thanks for the report, @mitchctodd. We're tracking this issue as #3321, and hope to have a fix released in the next couple of hours.
",bdash,mitchctodd
3327,2016-03-14 18:03:07,"Thanks for the report, @TheHmmka. We're tracking this issue via #3321.
",bdash,TheHmmka
3325,2016-03-14 05:39:54,"Ahh, that was it.  I should've noticed that, thank you @bdash - today you saved me some sanity.
",markkohdev,bdash
3322,2016-03-13 14:17:38," @beeender @mrackwitz  
thanks!

My code like this:


",yushuyi,mrackwitz
3322,2016-03-13 14:17:38," @beeender @mrackwitz  
thanks!

My code like this:


",yushuyi,beeender
3321,2016-03-13 10:52:44,"@bdash Yes it's correct, the issue is specific to iOS 8.x and the same build runs fine on iOS 9.x.
Here's my output of `bt all` in the debugger console right after the crash:


",n3d1117,bdash
3321,2016-03-13 17:43:16,"`iPad3,4` is an iPad 4, which has only a 32-bit CPU. The crash log that @n3d1117 shared is from a 32-bit device as well. This may be a 32-bit-specific issue rather than an iOS 8 issue.
",bdash,n3d1117
3321,2016-03-13 18:21:10,"@n3d1117, do I understand correctly that you're seeing this with the iPad 2 simulator?
",bdash,n3d1117
3321,2016-03-13 19:11:46,"Thanks for the extra detail, @n3d1117.

I've been able to reproduce this crash by forcing one of our examples apps to build for armv7 only and running it on my iPhone 6 running iOS 9.3. That confirms this is a 32-bit issue rather than being related to the version of iOS.
",bdash,n3d1117
3320,2016-03-14 17:36:55,"@chodges Not working yet...
",ppamorim,chodges
3320,2016-03-14 18:02:23,"Thanks for the report, @chodges. We're tracking this issue via #3321.
",bdash,chodges
3317,2016-03-21 13:54:41,"@rahimizad: In the sample code, you shared with us here, you check for `location.icon`. I don't think that the actual elements (`location`) of the collection could be nil based on how you construct it.
Please note as well that the retrieved collection is as a collection not auto-updating anymore, but all of the objects are still auto-updated. So if you concurrently clear all fields of those locations, the result you're facing here would be expected. We would likely need more code or a sample project to further assist you, if that shouldn't help. In advance, please note that we prefer StackOverflow for Help-related issues. We monitor for the tag `realm` and will take note of it. This issue was already closed and is only tangentially related to your question.
",mrackwitz,rahimizad
3316,2016-03-12 01:33:05,"Hi @alychkouski, I took the time to create a project with your sample code and haven't been unable to reproduce the issue you've reported: https://github.com/jpsim/GH3316

Could you please either let me know what my repro case is missing to trigger the problem you've reported, or better yet, send us a full Xcode project that triggers the issue?

Thanks!
",jpsim,alychkouski
3315,2016-03-14 08:59:43,"@mrackwitz Kinda 100% sure, yeah 😄

Unfortunately I can't share the code, as it is a closed source project and this issue is highly integrated and would take a significant amount of time to decouple and isolate the problem, sorry about that.
",gapl,mrackwitz
3315,2016-03-25 09:03:13,"@gapl, are you still seeing this crash? I can understand that you aren't able to share the source code for your application. Is there any chance you could share a pre-built binary of your application that reproduces the crash? That would be more than enough to allow us to investigate this.
",bdash,gapl
3311,2016-03-11 12:57:25,"Thanks for the PR, @nakiwo! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,nakiwo
3311,2016-03-11 22:50:21,"Thanks @nakiwo!
",jpsim,nakiwo
3309,2016-03-11 03:25:04,"Thanks for the PR, @Changsung! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,Changsung
3309,2016-03-12 01:13:37,"I echo @bdash's sentiments on this performance tradeoff, and that the one we're making today is the best way forward considering future changes coming in iOS 9.3. You can see more work that was done in this area recently in #3235, which also explains a bit of the rationale that also applies here.

So thanks for the contribution, but we won't be accepting this PR. I hope you'll contribute to Realm again in the future!
",jpsim,bdash
3308,2016-03-12 01:10:27,"@AndrewBarba we're not asking that you set `NSFileProtectionNone` in your app's entitlements but rather set that as file attributes for your Realm file's parent directory.

@TimOliver has been working on some documentation around this, but it's not live yet on our site since it's still pending review, but I'll post it here because I think it would be useful to you:

### Using Realm with Background App Refresh

On iOS 8 and above, files inside apps are automatically encrypted using [`NSFileProtection`](https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSFileManager_Class/index.html#//apple_ref/doc/constant_group/File_Protection_Values) whenever the device is locked. If your app attempts to do any work involving Realm while the device is locked and its parent directory isn't set to `NSFileProtectionNone`, an `open() failed: Operation not permitted` exception will be thrown.

To avoid this, it is necessary to ensure the `NSFileProtectionNone` file protection attribute is applied to both the Realm file itself and its [auxiliary files](https://realm.io/docs/swift/latest#auxiliary-realm-files). Since the auxiliary files can sometimes be lazily created and deleted mid-operation, it is recommended to apply the file protection attribute to the parent folder containing these Realm files to ensure the attribute is properly applied to all of them.



If your app contains other files for which you don't want to disable protection, we recommended that these Realm files be moved to their own separate directory.
",jpsim,AndrewBarba
3307,2016-03-11 11:57:14,"Thanks @jpsim, I tried the version on master and was not able to reproduce the issue so far (not saying it is fixed completely, but at least it is not that common anymore). I have some more information about it though. There was another operation running before the one I pasted code, and that one did not have `autorefresh` property set to false. So the issue is definitely connected with refreshing the instances, especially the autorefresh. It looks like something is not cleaned up correctly, but this could already be fixed.
",Legoless,jpsim
3307,2016-03-14 23:40:17,"I've written up a bug report against core since that appears to be where the incorrect state is.

@Legoless, would you be able to share the backtraces of all threads in your application when you hit this crash? It's possible there's a threading issue at play given the heavy concurrency you speak of, and the extra backtraces may provide more insight into that. You can get backtraces of all threads using `bt all` in the debugger console after your application has crashed.
",bdash,Legoless
3307,2016-03-15 14:42:39,"Thanks @bdash. This has definitely something to do with Lists or maybe even the `RLMRealm` notification listener.

This time the crash was in Thread 6, again while refresh call on Realm.



The entire stack trace is below. The interesting thing to look at might be Thread 14, since the way I see it it is in process of deleting something with `BpTree`. Maybe we need an additional race condition lock somewhere there?


",Legoless,bdash
3307,2016-03-15 15:44:55,"We can run a debugger...

Um, no, @bdash, probably not me who you wanted to mention ;-)
",tg,bdash
3307,2016-03-15 15:46:29,"Sorry, @tg, tab completion failure! @tgoyne?
",bdash,tg
3307,2016-03-21 17:59:56,"Okay @jpsim, I'll try more things with the sandbox project to see if I can get a reliably reproducable situation.
",Legoless,jpsim
3307,2016-03-29 11:30:32,"@jpsim Do you have any other non-public contact, so I can share some more information?
",Legoless,jpsim
3307,2016-03-29 18:03:48,"Thanks for providing us with the project, @Legoless. I was able to easily follow your instructions and reproduce the issue. Some debugging confirms that a `LinkView` (the underlying type that represents a persisted `List`) is being accessed from a different thread than it was allocated on. This can result in the `LinkView`, and anything accessible from it, being mutated from multiple threads at once, and explains the variety of backtraces that this manifests with.

In the case of your application, the `LinkView` is escaping to a different thread as a result of there being a `List` property on an `NSOperation` subclass. The property is populated by the operation's `main` function, and released when the operation is deallocated. These two actions can happen on different threads. There's an easy fix though: the `object` property on your operation class is not used. Removing it prevents the `List` from escaping to a different thread.
",bdash,Legoless
3307,2016-03-29 18:06:17,"@bdash I assume you mean ""can't"" instead of ""can"" in ""These two actions can happen on different threads.""?
",bmunkholm,bdash
3307,2016-04-01 10:03:29,"I've deployed the workaround @bdash suggested which solves the crash for now. I'll keep on following issue, but it's not a high priority. Thanks for all help guys, awesome support from you! :)
",Legoless,bdash
3307,2016-05-06 20:45:04,"It was made safe to destroy `LinkView`s from a different thread from the one they were created on in core v0.100, which was included in Realm Objective-C and Swift v0.101.0. I'll double-check with the test case that @Legoless provided to ensure that it has addressed this issue entirely.
",bdash,Legoless
3303,2016-03-09 01:17:15,"Thanks for the PR, @orangedroider! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,orangedroider
3301,2016-03-09 19:05:01,"@mrackwitz I can't copy the code here, sorry. I already fixed it, but I can't found the reason of this weird behavior.
",nicopuri,mrackwitz
3300,2016-03-09 16:03:40,"@JosephZZ Could you try `let photos = realm.objects(Photo.self).filter(""score = nil"")`?

Using `value` property when you access RealmOptional, but in query, you should specify just its property name.
",kishikawakatsumi,JosephZZ
3300,2016-03-09 16:14:55,"@akramhussein Yes, it is intended behavior. You can add `OR friend_count = nil` if you'd like to include the objects that `friend_count` is `nil`. Like the following:


",kishikawakatsumi,akramhussein
3298,2016-03-07 09:57:38,"@hengchengfei You should declare `List` and `RealmOptional` properties with `let`.  `age`, `dogs` and `persons` should be changed to `let`. Like the following:



See also: https://realm.io/docs/swift/latest/#property-attributes

Then, `age` cannot be re-assigned because `age` is constant. So you should assign raw value to `age.value` instead.


",kishikawakatsumi,hengchengfei
3296,2016-04-05 22:56:00,"I also don't think this is something we should add, but this is an enhancement request, so I labeled it as such pending a more comprehensive discussion considering whether or not this is desired functionality.

We're still waiting to hear back from @jrpinteno and @pjebs on this, until then I think it's appropriate to keep the conversation open.
",jpsim,pjebs
3296,2016-04-05 22:56:00,"I also don't think this is something we should add, but this is an enhancement request, so I labeled it as such pending a more comprehensive discussion considering whether or not this is desired functionality.

We're still waiting to hear back from @jrpinteno and @pjebs on this, until then I think it's appropriate to keep the conversation open.
",jpsim,jrpinteno
3296,2016-04-05 23:31:21,"@pjebs that comment doesn't address @mrackwitz's question:

> Are you perhaps rather looking for a more expressive property type `RLMSet` instead `RLMArray`, which doesn't allow to contain duplicates at all, independent from how you modify it? That's something we have on our backlog with #1501.
",jpsim,mrackwitz
3296,2016-04-05 23:31:21,"@pjebs that comment doesn't address @mrackwitz's question:

> Are you perhaps rather looking for a more expressive property type `RLMSet` instead `RLMArray`, which doesn't allow to contain duplicates at all, independent from how you modify it? That's something we have on our backlog with #1501.
",jpsim,pjebs
3296,2016-05-02 15:43:24,"@pjebs yes, writing to Realm objects must always be done from a write transaction.
",jpsim,pjebs
3288,2016-03-03 23:26:10,"Ok, agreed. The runtime hit is definitely an issue. Thinking about it more, even the notification block changes aren't dependent on this method. Thanks for taking a look @tgoyne!
",jpsim,tgoyne
3284,2016-03-04 03:16:05,"@mrackwitz thanks a lot. That means I should modify my Model or code to fix this. What kind of error will i met if i use this method normally?
",yuldong,mrackwitz
3280,2016-03-02 09:33:03,"As there is currently no way for us to fix that as @tgoyne describes, I'm going to close this issue.
",mrackwitz,tgoyne
3279,2017-01-21 10:40:45,"Hey @mrackwitz 

Can I define `RealmOptional` as var?
after that, I can use 



And `self. price = (map[""price""], RealmOptionalTransform())`",whlsxl,mrackwitz
3277,2016-03-02 18:28:22,"Thanks @mrackwitz 
",daniel-beard,mrackwitz
3276,2016-03-02 07:51:47,"This might appear, if you have restrictions with your internet connection as described in #2713.
@cookeri6: But I see that you're trying to use a version from a while ago. Can you try installing instead the latest version of Realm, because we improved the error handling for the download of core since then, so that this would give us some hints what is really going wrong here.
",mrackwitz,cookeri6
3270,2016-02-26 01:47:43,"@jinmin888 can you please share more information as outlined in our [issue template](https://github.com/realm/realm-cocoa/blob/master/.github/ISSUE_TEMPLATE.md)? Posting a screenshot is not sufficient for us to identify what is happening here.
",jpsim,jinmin888
3270,2016-03-10 01:41:53,"@jinmin888 just following up on my last request for information.
",jpsim,jinmin888
3269,2016-05-03 13:11:43,"Closing since we never heard back from @Dfmarulanda. Hopefully my last answer sufficiently addressed the original comment.
",jpsim,Dfmarulanda
3268,2016-02-26 20:27:33,"What @bdash wrote, DRY and better readability / self-documentation.
",mrackwitz,bdash
3266,2016-02-25 18:10:52,"Hi @uson1x, are there stack frames from other threads terminating with an assertion or uncaught exception? The ones you've shared do not, which would suggest that some other thread is causing this crash.

@tgoyne is it possible that this query isn't being properly handed over? The form `ANY link.property OR property OR property` might provide some hints as to what may not be fully handover-supported.
",jpsim,uson1x
3266,2016-02-25 22:43:30,"> v0.96.2 was released back in October, and we've made many changes in query code since then.

Oops, 0.96.2 is the current version of core, so I got a bit confused.

@uson1x please try again with the latest version of Realm (0.98.2) and report back to see if this is still an issue.
",jpsim,uson1x
3266,2016-03-10 01:39:27,"@uson1x we're closing this ticket because we expect this issue to have been addressed in recent versions of Realm and haven't heard back from you in a few weeks. Please open a new issue if this happens with the latest version of Realm.
",jpsim,uson1x
3262,2016-02-25 17:50:01,"Thanks for reporting this @zintus. Can you please share your model definitions? I suspect that will be necessary to reproduce the assertion.

Also, it seems like the right solution to your goal (as far as I understand it) would be to automatically re-create the Realm whenever a migration is required. We're working on this functionality in #3222.
",jpsim,zintus
3262,2016-02-26 16:53:48,"@jpsim i've sent additional information to the help@realm.io 
",zintus,jpsim
3262,2016-03-08 04:18:16,"Hi @zintus, could you please try using Realm built from source using the `tg/core-0.97.0` branch in your project to see if it resolves this issue?
",jpsim,zintus
3262,2016-03-09 16:32:36,"@jpsim having crash on changing schema, i've updated realm to branch version. At first glance everything is fine, but i'm not sure that changing realm version and schema version accurately reproduces original circumstances. 

Anyway, new version looks fine 👍
",zintus,jpsim
3257,2016-04-21 12:24:21,"Beside the minor comment above, I agree with all conclusions drawn here from @jpsim. Well noted! :+1:
",mrackwitz,jpsim
3257,2016-04-21 16:11:41,"I was thinking the same thing as @mrackwitz. The methods without the `encryptionKey` are good to avoid confusion, but they definitely are superfluous. As long as we highlight clearly in our documentation that `encryptionKey` can be `nil`, that should be sufficient.

Apart from that, all good! :+1:
",TimOliver,mrackwitz
3249,2016-02-23 01:28:36,"You are right, @mrackwitz. For some reason, my schema had a higher version than I thought. My schemaVersion was always 0, but I was using the wrong method to get the version. The right one is schemaVersionAtPath:



Thanks for the help.
",hdoria,mrackwitz
3246,2016-02-22 14:38:45,"@mrackwitz, right you are. I can show my Podfile.lock.


",vahotm,mrackwitz
3246,2016-02-22 14:40:33,"@mrackwitz I solved the problem, I found to be due to network problems
",bawn,mrackwitz
3246,2016-02-22 14:44:51,"@bawn well, how can your answer help other people to solve this problem?
",vahotm,bawn
3246,2016-02-22 14:45:43,"@bawn: Thanks for reporting back.
From this answer, it seems like this is a duplicate of #2713. Please see the workarounds proposed there.
@vahotm: May network restrictions apply to you as well?
",mrackwitz,bawn
3246,2016-02-22 14:45:43,"@bawn: Thanks for reporting back.
From this answer, it seems like this is a duplicate of #2713. Please see the workarounds proposed there.
@vahotm: May network restrictions apply to you as well?
",mrackwitz,vahotm
3246,2016-02-22 14:49:09,"@mrackwitz @vahotm 

I think the reason is because I am in China, when I updated reaml waited a long time, and then I found I force close problems caused by the update, I think you can try to clear the cache.


",bawn,mrackwitz
3246,2016-02-22 14:49:09,"@mrackwitz @vahotm 

I think the reason is because I am in China, when I updated reaml waited a long time, and then I found I force close problems caused by the update, I think you can try to clear the cache.


",bawn,vahotm
3246,2016-02-22 15:32:47,"@mrackwitz, I think no, because I'm in Belarus.
@bawn, thanks, that helped)
",vahotm,mrackwitz
3246,2016-02-22 15:32:47,"@mrackwitz, I think no, because I'm in Belarus.
@bawn, thanks, that helped)
",vahotm,bawn
3246,2016-02-22 20:40:54,"@bawn @vahotm: Great, thanks for leaving that here.
But pay attention `pod update` doesn't take the `Podfile.lock` into account and can integrate different versions than `pod install`. I'd recommend to run `pod install --verbose`, when there was a network issue on a previous run. This will make sure that you see at least some hint what's gone wrong, which would give us some first hints what went wrong. I updated the linked issue as well with said instructions.
I'm going to close this issue now, but feel free to comment on it again, whenever it appears again and you're unable to resolve it with given instructions.
",mrackwitz,bawn
3246,2016-02-22 20:40:54,"@bawn @vahotm: Great, thanks for leaving that here.
But pay attention `pod update` doesn't take the `Podfile.lock` into account and can integrate different versions than `pod install`. I'd recommend to run `pod install --verbose`, when there was a network issue on a previous run. This will make sure that you see at least some hint what's gone wrong, which would give us some first hints what went wrong. I updated the linked issue as well with said instructions.
I'm going to close this issue now, but feel free to comment on it again, whenever it appears again and you're unable to resolve it with given instructions.
",mrackwitz,vahotm
3244,2016-03-09 22:28:11,"Sorry for the delay @GreatApe. As far as I can tell, because you're holding to a Realm instance outside the autoreleasepool, there's no guarantee that `dealloc` will be called when you set the variable to `nil` or when your explicit autoreleasepool is drained at the end of its scope.

Try calling `realm.invalidate()` before setting it to `nil`. It's a private method on `RLMRealm`, so you'll have to re-expose it in a category interface.
",jpsim,GreatApe
3243,2016-02-21 21:35:08,"@hermanolsson Thank you - I'll follow #1186 
",LordNali,hermanolsson
3242,2016-02-21 19:31:12,"@GreatApe   Thank you Gustaf for input. I don't need migration because I can perform a full syncronization with the backend based on the dynamic schema. 

I thought I can use Swift bindings since there are already implemented things in a more cleaner way but I guess I'll have to implement by myself. 
",georgepoenaru,GreatApe
3242,2016-11-03 00:28:26,"@georgepoenaru @GreatApe I haven't used realm much, but just an idea for discussion. This is definitely overkill. maybe we can use realm for react-native to do dynamic schema generation? code on the JS side is more dynamic. it supports migration as well. 

Or, maybe we can create an OC class at runtime,  based on a dictionary and fed that into realm? 
",caoer,georgepoenaru
3242,2016-11-03 00:28:26,"@georgepoenaru @GreatApe I haven't used realm much, but just an idea for discussion. This is definitely overkill. maybe we can use realm for react-native to do dynamic schema generation? code on the JS side is more dynamic. it supports migration as well. 

Or, maybe we can create an OC class at runtime,  based on a dictionary and fed that into realm? 
",caoer,GreatApe
3241,2016-03-10 01:33:37,"@JosephZZ we're closing this issue because we haven't heard back from you in a while and I'm hoping that all the guidance we provided about how to model your data and craft queries for it has helped you along. Please let us know if there's anything more we can do for you by filing a new issue. Thanks!
",jpsim,JosephZZ
3241,2016-03-10 02:26:52,"hey thank you and @bdash for the help!! i really appreciate it. And yes everthing is working now! 
I was going to respond but couldn't find the notification any more from my github page so I thought this question has been closed already. (apparently it is the first time that I post questions lol~~）
",JosephZZ,bdash
3238,2016-02-19 03:57:40,"Hi @AlexEdunov!

Yes! That's correct! Realm, by default places `default.realm` in the `Documents` directory of iOS apps. You only need to enable `UIFileSharingEnabled` in the Info.plist file and everything should simply appear in the 'File Sharing' section of your device's configuration in iTunes:

<img width=""1084"" alt=""screen shot 2016-02-19 at 11 49 37 am"" src=""https://cloud.githubusercontent.com/assets/429119/13166114/01804102-d6ff-11e5-8367-4c079ede4284.png"">

If the app itself hasn't appeared in the list yet, it's possible iOS hasn't properly noticed that the key has been set on it yet. If that's the case, you can try either deleting the app from your device and re-installing it, or even just rebooting the device in order to get iOS to refresh it.

Let me know how you go!
",TimOliver,AlexEdunov
3238,2016-03-03 16:30:53,"As we didn't heard back on this, I assume this could be answered by @TimOliver's proposals. If you should be still unable to retrieve your Realm file from your phone, please feel free to comment.
",mrackwitz,TimOliver
3236,2016-03-03 16:32:09,"@codesourse: Were you able to resolve the crash on base of @bdash's comment here?
",mrackwitz,bdash
3236,2016-03-03 16:32:09,"@codesourse: Were you able to resolve the crash on base of @bdash's comment here?
",mrackwitz,codesourse
3236,2016-03-10 01:30:47,"@codesourse we're closing this issue because we haven't heard back from you in over three weeks since posting some explanations as to what is likely causing this exception to be thrown.
",jpsim,codesourse
3236,2016-06-27 20:43:20,"@girishnair12345 please make sure you've read our [docs on Updating Objects](https://realm.io/docs/swift/latest/#updating-objects) and if you still need help, please file a new issue taking care to fill out the issue template and we'll take a closer look.
",jpsim,girishnair12345
3234,2016-02-22 09:32:38,"Addressed @bdash's feedback.
",mrackwitz,bdash
3234,2016-02-22 17:31:22,"Thanks for doing this, @mrackwitz! The sections involved here and information being requested all seem appropriate to me.

I'd prefer moving `CONTRIBUTING.md` into `.github/` to further remove some clutter in the top-level of the repo, but several links will have to be updated in the process.

I'd also prefer removing the ℹs and all of the ""Please""s since it starts to be so redundant that it hurts readability. Saying please once at the start should be sufficient IMO.
",jpsim,mrackwitz
3231,2016-02-17 07:47:21,"Ah. Yes. Thank you, @bdash. Adding `dynamic` fixed the issue. :+1: 
",istx25,bdash
3226,2016-03-03 16:34:25,"@JSONValidator: Were you able to resolve the issue by what @bdash proposed here in his comment or by any other measures you took?
",mrackwitz,bdash
3226,2016-03-03 16:34:25,"@JSONValidator: Were you able to resolve the issue by what @bdash proposed here in his comment or by any other measures you took?
",mrackwitz,JSONValidator
3226,2016-03-10 01:31:39,"@JSONValidator we're closing this issue since we haven't heard back from you in a while.
",jpsim,JSONValidator
3222,2016-03-15 16:05:49,"@tgoyne @jpsim Clear the data on migration needed instead deleting the file. It was done within objectstore.
How does that look?
",kishikawakatsumi,tgoyne
3222,2016-03-18 09:15:06,"@tgoyne @jpsim I implemented delete/re-create file in `ObjectStore::verify_schema()`. It works but dirty implementation. Could you please review it?
",kishikawakatsumi,tgoyne
3222,2016-03-22 14:17:53,"@jpsim @tgoyne 

There are two places where schema validation will fail.
One is here: https://github.com/realm/realm-cocoa/blob/master/Realm/RLMRealm.mm#L350

It is in the `Realm::init` method that is called from `openSharedRealm` method.

Another is here: https://github.com/realm/realm-cocoa/blob/master/Realm/RLMRealm.mm#L374

The former is called when a schema is specified with `objectClasses`,  the latter is called when that the schema isn't specified.

The problem is, the latter is called directly from the Objective-C layer, so  it is difficult to handle deleting and re-creating the file. It is also difficult to replace the Realm instances within the method.

Also it is difficult to determine whether the caller is former or latter. 

Do you have any thoughts?
",kishikawakatsumi,tgoyne
3222,2016-04-15 18:45:48,"@tgoyne @bdash 

I need your advice. What do you think I should do?

It seems difficult for me that deleting Realm file when migration is needed is done within the ObjectStore code.

Schema validations are done in two places. 
The former is done during the initialization of the Realm instance. It is difficult to re-create Realm instance in this timing since the initialization method has an exclusive lock.

The latter is done much after the Realm was instantiated. So it needs to return the method to the Objective-C++ code to release and re-create Realm instance.
",kishikawakatsumi,tgoyne
3221,2016-03-10 01:56:18,"Is this blocked on anything @kishikawakatsumi?
",jpsim,kishikawakatsumi
3217,2016-02-15 22:33:14,"@dchohfi could you please share the exception message? Initializing a Realm can fail for a number of reasons. See our docs on [Error Handling](https://realm.io/docs/objc/latest/#error-handling) for details.
",jpsim,dchohfi
3217,2016-02-15 22:38:29,"Hey @jpsim thank you for the fast reply, it seems to be related to iOS file protection defined by the application.

Now I'm removing the file protection on all realm files as you described here:
https://github.com/realm/realm-cocoa/issues/1571#issuecomment-77901737

Just curious to know when I should be calling this? 
Before or after calling the first `+[RLMRealm defaultRealm]`?
",dchohfi,jpsim
3217,2016-02-15 22:53:24,"@jpsim cool, makes sense. Do you think it's appropriate to have a single method on realm configuration to do that for us? Also doing the lazy creation logic. PR's are accepted? Or this is like that by design?
",dchohfi,jpsim
3217,2016-02-15 23:52:14,"@jpsim cool, just curious to know how the auxiliary files are created and if they are deleted and created again. If they are, do I need to change the `NSFileProtectionKey` every time? And how are we notified about those files creation?
",dchohfi,jpsim
3217,2016-02-16 00:05:47,"@tgoyne but this could easily be fixed with something like @jpsim said, a `fileAttributes` attribute that will replicate the logic to all the realm files created. Without needing to know about how realm create files. Or not?
",dchohfi,jpsim
3217,2016-02-16 00:05:47,"@tgoyne but this could easily be fixed with something like @jpsim said, a `fileAttributes` attribute that will replicate the logic to all the realm files created. Without needing to know about how realm create files. Or not?
",dchohfi,tgoyne
3217,2016-02-16 00:42:32,"@tgoyne so we don't actually need to remove file protections on auxiliary file paths if I have removed on the containing directory?
",dchohfi,tgoyne
3217,2016-02-16 04:36:25,"From the sound of it, the immediate fix for this would be to simply set the file attributes property of the parent directory. I might check our docs to make sure this is highlighted.

I like the idea of adding a file attributes property to `RLMRealmConfiguration` to handle the protection properties of all files related to a Realm instance. It should be possible on the `NSFileManager` level to create new files even if the device is locked.

@dchohfi Did you end up getting it working in the end?
",TimOliver,dchohfi
3217,2016-02-16 10:02:42,"Hey @TimOliver, honestly saying? I don't know if it's fixed or not, the crash was related to file protection that was activated on the app. But how we discovered that was tricky. 

We found a crash on crashlytics during beta release and had to identify who was the person who had that, he said that never faced any crash during the beta and we realised that was something related to the notification that awakes the app in background. 

Now we added the flags and released a new version following what we spoke in this thread. And wait a bit to see if fixed or not, as replicate is quite difficult.

That is why I think some attribute on `RLMRealmConfiguration` or even a warning (if possible) saying that the file protection is activated, just to show a straightforward solution to the problem, could be easier for devs.
",dchohfi,TimOliver
3217,2016-02-16 12:58:43,"@TimOliver:

> It should be possible on the `NSFileManager` level to create new files even if the device is locked.

I don't think that this is actually possible. If the directory is protected, it should be encrypted when the device is locked. If `NSFileManager` could bypass that, this would be a security loophole.

> I like the idea of adding a file attributes property to `RLMRealmConfiguration` to handle the protection properties of all files related to a Realm instance.

Setting the default file attributes for newly created files won't be enough though. I think we would need to check the parent directory instead. One problem here might be that there could be likely any arbitrary other user files adjacent to the default Realm path, which should be better protected in some cases. So just removing the protection by default might not be the best solution. (Perhaps we should think about scoping the default Realm path by another directory element, so that it is easier to workaround this case?)
We could also have a property `backgroundAccessRequired` on `RLMRealmConfiguration`, disabled by default, but when enabled Realm would fail gracefully directly on first open with instructions how to make sure that the parent directory is not protected. As this is a security critical API design question, we should make sure that the behavior doesn't imply implicit side-effects, which are badly understood but cause risk of exposing sensitive user data accidentally.
",mrackwitz,TimOliver
3217,2016-02-16 15:16:04,"@mrackwitz great points, the `backgroundAccessRequired` property seems to be helpful to detect issues before submitting to beta or AppStore.
",dchohfi,mrackwitz
3217,2016-03-03 15:55:43,"I think, we can close this in favor of the issues created by @jpsim.
",mrackwitz,jpsim
3212,2016-02-16 01:42:01,"@trustyfrog if you're interested in Realm engine internals, architecture and design choices, I found [this talk](https://realm.io/news/jp-simard-realm-core-database-engine/) — by @jpsim himself — really interesting!
",AliSoftware,jpsim
3212,2016-10-27 09:22:19,"@jpsim, the [apple/swift#1297](https://github.com/apple/swift/pull/1297) was merged into master on February. Any changes on this topic?
",alickbass,jpsim
3212,2016-10-28 07:34:25,"@jpsim thanks for clearing out)
",alickbass,jpsim
3205,2016-02-12 05:32:42,"Thank you @bdash that works. It wasn't clear to me when looking at the API doc. One good example does a lot to clear things up.
",Alamoz,bdash
3205,2016-06-26 06:03:58,"I agree @Alamoz that is the only useful example that I've found... 👍 
",Gerst20051,Alamoz
3205,2016-06-27 18:12:38,"@thonydam FYI this is currently supported
",jpsim,thonydam
3200,2016-02-15 20:17:47,"Retested from the branch and the crash is gone. @tgoyne thanks a lot, once again! :+1: 
",anlaital,tgoyne
3199,2016-02-12 05:12:19,"Thank you so much for looking into this without a reproducible use case, @tgoyne! I know how painful it can be...

You'll be happy to learn that the fix you made also does in fact fix the crash I'm seeing. I tested this a couple of times by reproducing the crash on `v0.98.1` then doing the exact same steps after pulling Realm and RealmSwift code from `tg/transaction-state-tracking` and could not reproduce the crash nor see any inconsistencies in how the app behaved.

Awesome work! :+1: 
",anlaital,tgoyne
3198,2016-02-24 09:13:36,"@tgoyne Thanks for replying.

> I suppose we need to expose the ability to control the runloop mode used for our notifications

That would be very helpful indeed. As of now, with this limitation, I subscribe for `NSMenuDidEndTrackingNotification` notification. But I ultimately would be notified while the menu is open.
",vincedev,tgoyne
3198,2016-03-03 16:43:17,"@tgoyne: As you proposed that we would need to expose another API here, I promoted this issue to an enhancement. Alternatively we might want to create a new issue instead which goes in place of that and describes what would be needed to do here.
",mrackwitz,tgoyne
3196,2016-02-10 22:01:01,"@nosrak113 it would really help if you offered more context when filing issues.

In this case, this was brought up earlier today when discussing the concept of ""Collection Notifications"" introduced in Realm 0.98, and that although we document those, we don't really make a point of defining what we mean by collections in Realm.

We might want to have this as a subsection in ""Models"", or even as a top-level section in the docs describing all the types of collections and collection interfaces in Realm: `RLMArray`/`List`, `RLMResults`/`Results`, `RLMCollection`/`RealmCollectionType` and `AnyRealmCollection`.
",jpsim,nosrak113
3195,2016-02-15 19:05:34,"@jpsim there is no confusion on that. It is clear that accessing a deleted object should result in an exception. The problem is that after objects are deleted, they shouldn't be showing up in result sets when querying realm right after objects are deleted, which is exactly what is happening here. Does this make more sense?
",edalford11,jpsim
3195,2016-02-15 19:43:08,"@jpsim I figured it was some kind of race condition. The problem is calling RLMRealm refresh is the first thing I do after notifying the main thread to get a fresh result set (because if I don't, getting outdated data is almost a sure thing every time). I've been working through this for over a month now and I can't seem to defend against this problem. 

When I had integrated realm, the only way to get notified by realm was to get notified after ANY write transactions happened. I needed to specify which kind of writes had just finished, which is why I had to do my own notifications.

Is it possible that this problem will get fixed by using realms notification system? The main problem here is I can't even reproduce this error myself. I only see them in the crash reports.
",edalford11,jpsim
3195,2016-02-15 19:50:56,"@uknowmeright it would be useful if you also checked against your codebase for the potential pitfalls I mentioned above since your situation may be different than @edalford11's.
",jpsim,uknowmeright
3195,2016-02-15 19:50:56,"@uknowmeright it would be useful if you also checked against your codebase for the potential pitfalls I mentioned above since your situation may be different than @edalford11's.
",jpsim,edalford11
3195,2016-02-23 18:18:12,"@uknowmeright have you had the chance to review my suggestions and see if my analysis applies to your situation? I'd love to help you in this matter.
",jpsim,uknowmeright
3195,2016-02-24 00:45:47,"Closing. Will reopen if we hear back from @uknowmeright 
",jpsim,uknowmeright
3195,2016-07-04 08:18:44,"@MangeshKarekar Can you please provide link for it? or you can explain the method here..
",TEJ227,MangeshKarekar
3195,2016-07-05 15:39:52,"@TEJ227 here's our table view example: https://github.com/realm/realm-cocoa/blob/master/examples/ios/swift-2.2/TableView/TableViewController.swift
",jpsim,TEJ227
3195,2016-07-11 10:39:23,"Thank You @jpsim !
",TEJ227,jpsim
3195,2017-03-21 07:45:37,@jpsim will this realm.deleteAll() helps stop all realm notification ? because it might caused a problem if the listener still running and try to access object,atom2ueki,jpsim
3195,2017-03-21 20:28:33,"@atom2ueki if you have object notifications, you can react to `.delete` notifications.",jpsim,atom2ueki
3194,2016-02-16 08:59:46,"Sorry for the delay @jasper-chan! I missed this one last week.

In any case, I'm working on an app that incorporates an encrypted realm, so I just added a bit of extra code to save a duplicate of the encrypted file, quit the app, and then open the duplicate.

It worked fine for me, so I'm wondering if this is actually a bug. What kind of data are you trying to store in this Realm file?

Ideally, would you be able to provide enough of your app to us for us to test this out ourselves?

Thanks a lot!
",TimOliver,jasper-chan
3194,2016-02-16 14:48:27,"@TimOliver Thanks for replying! So we have a lot of data models, and each of them store an assortment of property types. I think its safe to assume we use every type imaginable. 

Short of asking you guys to sign an NDA before giving you guys our source code, or possibly doing a screenshare/Skype session... would it help if I provided you the realm files? IE. the original one and the copied one? 
",jasper-chan,TimOliver
3194,2016-02-17 02:26:52,"@TimOliver So a little bit of good news, I've been doing a lot of testing today and I think I came to the same conclusion as you, in that it is not the writeCopyToPath:encryptionKey:error: that is causing the problem. However, I am unsure what I could be doing in my code that is causing that function to create a file that cannot be decrypted. Would you be able to take a look at it? I think I've figured out which function it is, but I'm not sure what I could be doing wrong to trigger this problem.
",jasper-chan,TimOliver
3194,2016-02-18 06:52:23,"Hi @jasper-chan! 

Oh! Uh, haha wow okay. That makes it sound like the problem is deeper than we thought.

This might be a complete no-brainer, but as a test, have you tried doing the write to copy at the very beginning of your app delegate's `didFinishinLaunchingWithOptions:` before any other interactions with your app?

If it still fails after that, that would definitely seem to imply something is wrong with Realm and not your app.

Sure! If you'd like please send your Realm files (and the encryption key in base64) to `help@realm.io` and I'll take a look at them. We'd definitely be okay with signing an NDA to get access to the code as well, but hopefully we can resolve this before needing to go that far.

Thanks!
",TimOliver,jasper-chan
3194,2016-02-18 14:26:26,"@TimOliver 
So I just tried your test for sanity sake and the outcome is still the same. I'll send you the Realm files with the base64 encryption key at the email you provided for inspection on your end. Hopefully we are able to figure out what the problem is without having to do the whole NDA dance.

Thanks again for your help!
",jasper-chan,TimOliver
3194,2016-02-19 04:38:02,"Hi @jasper-chan!

Thanks a lot for sending us those files. I filed it as an internal issue with the engineers working on Realm's core, and heard back immediately that the structure of the copy's header looks very 'inconsistent' with what a properly formatted encrypted Realm should look like.

I'm going to try and write a small sample app to see if I can take the 'original' Realm file and export a functioning copy myself to confirm.
",TimOliver,jasper-chan
3194,2016-02-19 08:40:16,"Thanks a lot for your patience @jasper-chan!

We had a look at both of your Realm files and have two points of clarification we'd like to follow up:

1) We made some improvements to encryption in Realm 0.98, so we'd recommend you update to the latest version of Realm, and only testing there. I've uploaded a new copy of the Browser incorporating 0.98.2 which you can use to manually open the Realm files: https://github.com/realm/realm-browser-osx/releases/tag/0.98.2

2) How exactly are you generating and storing the encryption key? There's quite a few zeroes in that key, so we're guessing you're not explicitly generating 64 bytes of data for it.

Thanks a lot! Have a nice weekend!
",TimOliver,jasper-chan
3194,2016-02-19 13:47:40,"Hi @TimOliver!

1) I just downloaded Realm 0.98.2 and retried the test, but the issue still persisted. I also tried using the new Realm browser you uploaded.

2) The encryption key is a UUID converted to 64 bytes of data via padding zeros at the end. It is currently being stored in the keychain using a third party library called Lockbox (https://github.com/granoff/Lockbox).
",jasper-chan,TimOliver
3194,2016-02-19 18:47:33,"@jasper-chan, can you please share the specific steps that you're using to test this? Are you immediately attempting to open the newly-written Realm in the same process? Are you opening it during the next launch of your application? Are you opening it afterwards in the Realm Browser?

One thing we'd like to rule out is an issue that was fixed in v0.97.1. #3075 would result in Realm failing to open encrypted files written using `writeCopyToPath:encryptionKey:error` due to a problem while reading the files (not writing). The version of Realm Browser in the App Store is using a version of Realm that is affected by this issue, which is why Tim has pointed you at a new version of the Browser.

To expand on Tim's comment about encryption keys: UUIDs are not a secure method for generating an encryption key as they do not contain a sufficient amount of random data. You should consider [generating secure random data using `SecRandomCopyBytes`](https://github.com/realm/realm-cocoa/blob/6df073c7accc3946648bda751a9fc3f1ae2d77f7/examples/ios/objc/Encryption/LabelViewController.m#L129-L132) instead.
",bdash,jasper-chan
3194,2016-02-19 18:57:00,"@bdash 
Steps:
1) Comment out the code `writeCopyToPath:encryptionKey:error`
2) Clean install my app
3) Function runs to insert objects into my database
4) Stop app
5) Uncomment the code `writeCopyToPath:encryptionKey:error`
6) Comment out my insertion method call
7) Run app
8) Stop app
9) Attempt to open realm file with realm browser.

Thank you very much for your recommendation for generating random data using `SecRandomCopyBytes`. I will research into this option some more :)
",jasper-chan,bdash
3194,2016-02-19 19:18:46,"@bdash 
1. I am using 0.98.2 realm framework.
2. Realm Browser is Version 0.98.2 (55)
",jasper-chan,bdash
3194,2016-02-19 19:19:53,"Thanks, @jasper-chan. Getting these details nailed down helps us to rule out known issues and focus our investigation. I'll take another look at the encrypted files you provided with this new information in mind.
",bdash,jasper-chan
3194,2016-02-19 19:20:34,"@bdash Thank you very much! Please let me know if there is anything else I can do to help with your investigation!
",jasper-chan,bdash
3194,2016-02-24 19:15:53,"Hi @jasper-chan!

Just to provide you with another quick update! We managed to determine that this is a legitimate bug on behalf of Realm's internal engine, and we've given it a high priority to be fixed. The timeline should hopefully only be a week or so.

In the meantime, sadly, all I can recommend is you avoid saving a copy of a compressed Realm for the time being. Sorry about that!
",TimOliver,jasper-chan
3194,2016-02-25 13:38:51,"@TimOliver 
Glad to hear you are able to reproduce the issue! I eagerly await for the fix :)
",jasper-chan,TimOliver
3194,2016-03-01 18:19:15,"Hi @TimOliver I was wondering if there is an update with regards to this bug?
",jasper-chan,TimOliver
3194,2016-03-07 13:19:31,"@TimOliver @jpsim 
I was wondering if there is an update for this bug? 
",jasper-chan,TimOliver
3194,2016-03-07 13:19:31,"@TimOliver @jpsim 
I was wondering if there is an update for this bug? 
",jasper-chan,jpsim
3194,2016-03-08 01:27:18,"@jasper-chan thanks for your patience with this issue. We're evaluating a potential fix at the moment, it's undergoing code review and further testing. I can't provide a timeline at the moment. We'll update this issue with more information as soon as we have it.

In the meantime, the only way to definitively avoid this bug is to not use `-[RLMRealm writeCopyToPath]` or `-[RLMRealm compact]`.
",jpsim,jasper-chan
3194,2016-03-29 12:46:11,"Hey @jpsim @TimOliver @bdash 
I hope you all had a restful Easter weekend! I was wondering if there is anything new with regarding this issue? We're getting a little nervous about this problem due to the lack of updates.
",jasper-chan,jpsim
3194,2016-03-29 12:46:11,"Hey @jpsim @TimOliver @bdash 
I hope you all had a restful Easter weekend! I was wondering if there is anything new with regarding this issue? We're getting a little nervous about this problem due to the lack of updates.
",jasper-chan,bdash
3194,2016-03-29 12:46:11,"Hey @jpsim @TimOliver @bdash 
I hope you all had a restful Easter weekend! I was wondering if there is anything new with regarding this issue? We're getting a little nervous about this problem due to the lack of updates.
",jasper-chan,TimOliver
3194,2016-04-11 15:47:37,"Hi @jpsim @TimOliver @bdash 
jasper-chan and I are quickly approaching the release date for our app and depend heavily on this fix.  It's been two months now and we need to update our own timeline to know if this is something that will be in a release within the next two weeks, or does it now affect our critical path and what your timeline for its release looks like?
Let us know.
Thanks
",sdwornik,jpsim
3194,2016-04-11 15:47:37,"Hi @jpsim @TimOliver @bdash 
jasper-chan and I are quickly approaching the release date for our app and depend heavily on this fix.  It's been two months now and we need to update our own timeline to know if this is something that will be in a release within the next two weeks, or does it now affect our critical path and what your timeline for its release looks like?
Let us know.
Thanks
",sdwornik,bdash
3194,2016-04-11 15:47:37,"Hi @jpsim @TimOliver @bdash 
jasper-chan and I are quickly approaching the release date for our app and depend heavily on this fix.  It's been two months now and we need to update our own timeline to know if this is something that will be in a release within the next two weeks, or does it now affect our critical path and what your timeline for its release looks like?
Let us know.
Thanks
",sdwornik,TimOliver
3194,2016-04-11 16:08:20,"Hi @jpsim 
We are excited to hear this news! Best of luck to everything and we look forward to this upcoming release!
",jasper-chan,jpsim
3194,2016-04-15 19:03:24,"Hi @jpsim,
Are you guys on track to releasing the update this week?
",sdwornik,jpsim
3194,2016-04-15 19:19:26,"Thank you @jpsim will give it a try.
",sdwornik,jpsim
3194,2016-04-15 21:26:24,"Thanks for testing @mikemee! The fix has now been merged into `master`, so be sure to point there, rather than the now defunct `core-0.97.4` branch, if you have yet to test this out.
",jpsim,mikemee
3194,2016-04-24 20:03:07,"@jpsim @bdash @TimOliver 
I just tried Realm Framework 0.99 with the new writeCopyToURL function, and our issue is still unresolved. Perhaps we can setup a time to do a Skype chat and show you guys how we produce this problem?
",jasper-chan,jpsim
3194,2016-04-24 20:03:07,"@jpsim @bdash @TimOliver 
I just tried Realm Framework 0.99 with the new writeCopyToURL function, and our issue is still unresolved. Perhaps we can setup a time to do a Skype chat and show you guys how we produce this problem?
",jasper-chan,bdash
3194,2016-04-24 20:03:07,"@jpsim @bdash @TimOliver 
I just tried Realm Framework 0.99 with the new writeCopyToURL function, and our issue is still unresolved. Perhaps we can setup a time to do a Skype chat and show you guys how we produce this problem?
",jasper-chan,TimOliver
3194,2016-04-24 21:52:42,"@jasper-chan sorry to hear the fix included in 0.99 didn't address the issue for you. We'll coordinate on our end to assign someone from our team to take the time to have a Skype call with you to identify steps to reproduce.
",jpsim,jasper-chan
3193,2016-02-10 18:52:51,"Thanks for the suggestion @skensell, what do you think the docs should say specifically to make this clearer?
",jpsim,skensell
3192,2016-03-03 16:46:01,"@bibicfilip: Sorry that this got stuck. We would need here just a little bit more information to act on. If you didn't got it working so far, I'd recommend to try it with the latest prerelease of CocoaPods. If that still shouldn't help, please feel free to ask back here or even better on StackOverflow, what we actively monitor to assist in help related issues. Thanks for your understanding.
",mrackwitz,bibicfilip
3186,2016-02-08 18:40:04,"@axenovV try this syntax.

RLMResults *results = [ProductModel objectsWhere:@""NOT id IN %@"", array];
",edalford11,axenovV
3186,2016-02-10 06:49:26,"Hi @axenovV!

I noticed you also asked [this same question on StackOverflow](http://stackoverflow.com/questions/35273890/dont-work-objectswithpredicate-with-operator-not-in).

I'm going to close this issue in favor of keeping the conversation there. This is mainly because these sorts of questions are much better off on StackOverflow as they remain visible, even after resolved.

As @bdash requested on the StackOverflow page, can you please expand your code sample on there to give us some more information on how you're implementing this? By all accounts, this should already work!

Thanks! :)
",TimOliver,axenovV
3185,2016-02-09 13:42:20,"@rameez-leftshift Can you try to define convenience initializer instead overriding initializer? Like the following.



Overriding initializer can work if you also implement `init(realm:schema:)`. But we don't recommend override `required init()` due to Swift's limitation.

See more details: https://github.com/realm/realm-cocoa/issues/1849#issuecomment-99547742
",kishikawakatsumi,rameez-leftshift
3185,2016-03-09 15:23:17,"@adamstener: That's odd. That's not how they are supposed to work. Which Swift version are you using? Did you made a fresh clean build after changing your model to just one convenience initializer?
",mrackwitz,adamstener
3184,2016-02-17 15:05:20,"Thanks @bdash. So I found the issue after a week debugging. I new to XCode.

The problem was that XCode was showing the error to be in a place that wasn't the real error place, so I was being misled.
",kurko,bdash
3183,2016-02-09 01:25:30,"@Yoncise the URL you provided is incorrect. `build.sh cocoapods-setup` should be downloading core from http://static.realm.io/downloads/core/realm-core-0.96.0.tar.bz2 (note the '2' at the end). Are you perhaps located in China? If so, please see #2713.
",jpsim,Yoncise
3183,2016-02-09 15:30:00,"@Yoncise those steps should not be necessary, since if your browser can download core, so should `curl`.

In any case, the manual steps you refer to are these:



Then Realm's `build.sh` script should pick up that file, even if you're offline when you install Realm.
",jpsim,Yoncise
3183,2016-02-14 07:39:12,"the same issue that i meet now,do you have solved it ?@Yoncise
",LeeRHuang,Yoncise
3183,2016-02-15 05:44:15,"1. You should download `core` via [url](https://static.realm.io/downloads/core/realm-core-0.96.1.tar.bz2) first. I have uploaded it to [BaiduYun](http://pan.baidu.com/s/1hrpZ4RM) for your convenience.
2. Execute below commands
   
   
3. Now Realm will update as normal, when you run `pod update --verbose`

@jpsim
From `build.sh`



`mv realm-core-0.96.1.tar.bz2 $TMPDIR/core_bin` should be changed to `mv realm-core-0.96.1.tar.bz2 $TMPDIR/core_bin/core-0.96.1.tar.bz2` to let `build.sh` pick up downloaded `core`.

ps. The latest version is 0.96.1, you should change version code accordingly.
",Yoncise,jpsim
3183,2016-02-15 05:54:31,"@jpsim 
I find it that I can download `core` via `http` without any proxies, however, I can not update realm via pods which uses `https` protocol. `curl` echo error `curl: (35) Server aborted the SSL handshake` or something else about `SSL` continuously. It's weird.
",Yoncise,jpsim
3183,2016-03-12 09:34:29,"@Yoncise Hi, I used the v0.96 core to update my cocoaPods, but now when I try to update Realm to the latest version (which I think is v0.98.4), I failed again. Could you tell me where to find the URL to download the core? Many thanks!
",chaiyixiao,Yoncise
3183,2016-03-12 09:45:40,"@chaiyixiao 
From `realm-cocoa/build.sh` file, you can see this statement



Note, you need use **core version** (which is 0.97.0 now) instead of **realm version** (which is 0.98.4 now), so, the download url of v0.98.4's core is `https://static.realm.io/downloads/core/realm-core-0.97.0.tar.bz2`
",Yoncise,chaiyixiao
3183,2016-03-12 09:50:21,"@Yoncise  Just noticed that I missed the `CORE_VERSION`. Thanks a lot!! 😁
",chaiyixiao,Yoncise
3183,2016-03-12 09:52:02,"@chaiyixiao Here is the core download url : [http://static.realm.io/downloads/core/realm-core-0.96.2.tar.bz2](http://static.realm.io/downloads/core/realm-core-0.96.2.tar.bz2) of Realm version 0.98.3, just change the core version in the url when it updates.Suppose the current core version(not Realm pod version) is 0.97.0, just replace the 0.96.2 with 0.97.0.For more information,dive into `realm-cocoa/build.sh`
",wang9262,chaiyixiao
3178,2016-02-06 11:48:21,"Same problem here. The app works fine though.
@xcplanet solution works but a cleaner one will be appreciated more ;)
",NSUserDefaults,xcplanet
3178,2016-02-07 16:09:38,"Same problem here, can confirm fix from @xcplanet works as well
",barfoon,xcplanet
3178,2016-02-08 14:28:53,"same like @barfoon 
",IsmailHassanein,barfoon
3176,2016-02-04 23:23:30,"Hi @almujtaba, this is behaving as designed. Expanding files on a file system is an expensive operation, so when data is removed from a Realm, that space is marked as available for new data, which can then quickly be written to that area without requiring more expensive calls to system APIs to continuously shrink & expand the file.

If reclaiming that disk space is important to you, you can write a compacted copy of the file using [`-[RLMRealm writeCopyToPath:error:]`](https://realm.io/docs/objc/latest/api/Classes/RLMRealm.html#/c:objc%28cs%29RLMRealm%28im%29writeCopyToPath:error:) and use the new copy, discarding the old one, but this requires you to stop accessing the Realm file at the previous path altogether.
",jpsim,almujtaba
3176,2016-02-05 07:47:06,"@almujtaba There is an explanation of file size, and some fixes for large file size, in the ""Current Limitations"" section, ""File size & tracking of intermediate versions"" sub-section, of the Ream docs: https://realm.io/docs/objc/0.97.1/#current-limitations It mentions @jpsim 's suggestion for compacting, and also mentions issues that can arise from intermediate versions of data, and when using Grand Central Dispatch.
",JonathanADaley,jpsim
3176,2016-02-05 07:47:06,"@almujtaba There is an explanation of file size, and some fixes for large file size, in the ""Current Limitations"" section, ""File size & tracking of intermediate versions"" sub-section, of the Ream docs: https://realm.io/docs/objc/0.97.1/#current-limitations It mentions @jpsim 's suggestion for compacting, and also mentions issues that can arise from intermediate versions of data, and when using Grand Central Dispatch.
",JonathanADaley,almujtaba
3176,2016-02-10 05:46:38,"This issue appears to have been sufficiently resolved.

@almujtaba If you have any additional follow-up, please feel free to re-open this issue! :)
",TimOliver,almujtaba
3174,2016-03-10 01:55:16,"Is this blocked on anything @tgoyne?
",jpsim,tgoyne
3170,2016-02-04 09:05:53,"Hello @jpsim 
Thanks for your help, the model `Repository` is currently defined only in one framework. The framework is integrated into the app as `Embedded Framework` using CocoaPods _(I'mt not sure if there might be something wrong with how CocoaPods embeds the framework)_.

Regarding the persisted properties the model doesn't have them. All of them are `dynamic` and I use `linkingObjects` for the reverse relationship:



The `Label` model has the following structure:


",pepibumur,jpsim
3170,2016-02-06 16:22:52,"@jpsim more useful info:
If I use the `.map` operator to adapt the relationship elements then I get that error but if I iterate through the Realm relationships using a `for` bucle then it works.
",pepibumur,jpsim
3170,2016-03-10 01:29:23,"@pepibumur we still haven't heard back from you since posting an attempt at a repro case over two weeks ago, so we're closing this issue.
",jpsim,pepibumur
3168,2016-02-03 03:00:09,"@jpsim Yep your reply on #3159 really fixed it. Thank you! ;)
",mofodox,jpsim
3167,2016-02-02 13:36:56,"@mrackwitz  `self.config` is an immutable variable defined as depicted in the snippet above. `self.realmInstance` is a computed variable (getter only) that uses self.config in retrieving the instance of the realm.
",kevinmlong,mrackwitz
3167,2016-02-09 18:15:19,"@mrackwitz We're getting this now in an app where I've _just_ updated our `RealmSwift` pod from 0.97.0 to 0.98.0. This happens on **a fresh install of the app**, as well.

We're calling a method on a struct to set our default Realm configuration straight from our `applicationDidFinishLaunching...` method in our application delegate, which fires on the main thread. It's the second thing to get called after setting up our logger.



This part executes fine, but the moment we try to `.write` something to our Realm (from a background thread; this is the first time anything hits our Realm on any thread), we get the same error as @kevinmlong.





This happens well after we setup our default Realm configuration — in fact, we don't write anything to the Realm until _after_ a user initiated action (in our case, a login event). Bumping our `schemaVersion` to 8 produces the same result (much as I'd expect it to, since this happens on a fresh install). If I force all of our Realm `.write` calls to happen on the main thread, we _don't_ get the error, and everything works rather swimmingly.



I hope this helps — let me know if I can help do more troubleshooting. I'm going to keep poking around to see if I can circumvent this somehow. Rolling back to 0.97.1 ""fixes"" the issue.
",kreeger,mrackwitz
3167,2016-02-09 18:15:19,"@mrackwitz We're getting this now in an app where I've _just_ updated our `RealmSwift` pod from 0.97.0 to 0.98.0. This happens on **a fresh install of the app**, as well.

We're calling a method on a struct to set our default Realm configuration straight from our `applicationDidFinishLaunching...` method in our application delegate, which fires on the main thread. It's the second thing to get called after setting up our logger.



This part executes fine, but the moment we try to `.write` something to our Realm (from a background thread; this is the first time anything hits our Realm on any thread), we get the same error as @kevinmlong.





This happens well after we setup our default Realm configuration — in fact, we don't write anything to the Realm until _after_ a user initiated action (in our case, a login event). Bumping our `schemaVersion` to 8 produces the same result (much as I'd expect it to, since this happens on a fresh install). If I force all of our Realm `.write` calls to happen on the main thread, we _don't_ get the error, and everything works rather swimmingly.



I hope this helps — let me know if I can help do more troubleshooting. I'm going to keep poking around to see if I can circumvent this somehow. Rolling back to 0.97.1 ""fixes"" the issue.
",kreeger,kevinmlong
3167,2016-02-22 11:55:24,"@kreeger: Thanks for the thorough description.
@bdash: Do you have any ideas why this could occur?
",mrackwitz,kreeger
3167,2016-02-22 11:55:53,"@GreatApe:

> It seems that releasing the reference is not enough anymore? Is there a way to ""close"" a realm?

Releasing the reference is still enough, but you might want to make sure that you put the initialization into an explicit autoreleasepool so that the release happens more predictable. There is no other way to close a Realm.
",mrackwitz,GreatApe
3167,2016-02-22 12:09:34,"@mrackwitz 

Thanks for the reply. In my actual use case I have the realm reference as an instance variable, so I suppose autoreleasepool won't work in that case, but I'll have a go at it. The curious thing is that the behaviour changed from 96 to 98, I suddenly need to use autoreleasepools and also `RLMRealm.migrateRealm(config)` doesn't seem to work anymore, as mentioned in my issue https://github.com/realm/realm-cocoa/issues/3244. 
",GreatApe,mrackwitz
3167,2016-03-10 00:04:33,"As far as I can tell, there are 3 or 4 different people in this thread with potentially separate issues, what seems to be common is the exception thrown (""Realm at path already opened with different schema version."").

---

@kevinmlong let's start with your issue, and what you've shared of your project with us, first:



You say this logs the following:



which would seem to me is impossible given that passing a lower version number than what's currently set in the Realm file on disk will throw an exception at runtime, which is then converted to a Swift error in the `Realm` initializer, preventing that version from being set: https://github.com/realm/realm-cocoa/blob/v0.98.3/Realm/ObjectStore/object_store.cpp#L364

My limited testing confirms that setting a lower schema version number than set on disk throws a Swift error. If you were to share with us a complete sample project that can trigger this strange behavior you're experiencing, we'd be able to troubleshoot further. Otherwise, we're stuck here.

---

@kreeger I think something else is happening in your case.

> We're calling a method on a struct to set our default Realm configuration straight from our `applicationDidFinishLaunching`... method in our application delegate, which fires on the main thread. It's the second thing to get called after setting up our logger.

Note that `applicationDidFinishLaunching` is often not the first part of your code that runs in a Swift app. If you have any code that touches a Realm in properties with default values of view controllers that are loaded by storyboards, those will access the Realm before `applicationDidFinishLaunching` has a chance to run.

This could explain the `Realm at path already opened with different schema version.` exception you're seeing, as those properties with default values could be accessing the Realm prior to the `setupRealmAndMigrateIfNecessary` function being called, so when you come around to making the migration, the Realm is already open with a different schema version.

If this is not the case, we'll need more information to troubleshoot with you.

---

@GreatApe from recent comments made in your other issue (#3244), it seems like the original issue reported here is only tangentially related to yours. Let's continue the conversation in #3244.

---

@jeeftor hi! Can you please share more information about the issue you're experiencing? It's very difficult to help you without more information.
",jpsim,GreatApe
3167,2016-03-10 00:04:33,"As far as I can tell, there are 3 or 4 different people in this thread with potentially separate issues, what seems to be common is the exception thrown (""Realm at path already opened with different schema version."").

---

@kevinmlong let's start with your issue, and what you've shared of your project with us, first:



You say this logs the following:



which would seem to me is impossible given that passing a lower version number than what's currently set in the Realm file on disk will throw an exception at runtime, which is then converted to a Swift error in the `Realm` initializer, preventing that version from being set: https://github.com/realm/realm-cocoa/blob/v0.98.3/Realm/ObjectStore/object_store.cpp#L364

My limited testing confirms that setting a lower schema version number than set on disk throws a Swift error. If you were to share with us a complete sample project that can trigger this strange behavior you're experiencing, we'd be able to troubleshoot further. Otherwise, we're stuck here.

---

@kreeger I think something else is happening in your case.

> We're calling a method on a struct to set our default Realm configuration straight from our `applicationDidFinishLaunching`... method in our application delegate, which fires on the main thread. It's the second thing to get called after setting up our logger.

Note that `applicationDidFinishLaunching` is often not the first part of your code that runs in a Swift app. If you have any code that touches a Realm in properties with default values of view controllers that are loaded by storyboards, those will access the Realm before `applicationDidFinishLaunching` has a chance to run.

This could explain the `Realm at path already opened with different schema version.` exception you're seeing, as those properties with default values could be accessing the Realm prior to the `setupRealmAndMigrateIfNecessary` function being called, so when you come around to making the migration, the Realm is already open with a different schema version.

If this is not the case, we'll need more information to troubleshoot with you.

---

@GreatApe from recent comments made in your other issue (#3244), it seems like the original issue reported here is only tangentially related to yours. Let's continue the conversation in #3244.

---

@jeeftor hi! Can you please share more information about the issue you're experiencing? It's very difficult to help you without more information.
",jpsim,jeeftor
3167,2016-03-10 00:04:33,"As far as I can tell, there are 3 or 4 different people in this thread with potentially separate issues, what seems to be common is the exception thrown (""Realm at path already opened with different schema version."").

---

@kevinmlong let's start with your issue, and what you've shared of your project with us, first:



You say this logs the following:



which would seem to me is impossible given that passing a lower version number than what's currently set in the Realm file on disk will throw an exception at runtime, which is then converted to a Swift error in the `Realm` initializer, preventing that version from being set: https://github.com/realm/realm-cocoa/blob/v0.98.3/Realm/ObjectStore/object_store.cpp#L364

My limited testing confirms that setting a lower schema version number than set on disk throws a Swift error. If you were to share with us a complete sample project that can trigger this strange behavior you're experiencing, we'd be able to troubleshoot further. Otherwise, we're stuck here.

---

@kreeger I think something else is happening in your case.

> We're calling a method on a struct to set our default Realm configuration straight from our `applicationDidFinishLaunching`... method in our application delegate, which fires on the main thread. It's the second thing to get called after setting up our logger.

Note that `applicationDidFinishLaunching` is often not the first part of your code that runs in a Swift app. If you have any code that touches a Realm in properties with default values of view controllers that are loaded by storyboards, those will access the Realm before `applicationDidFinishLaunching` has a chance to run.

This could explain the `Realm at path already opened with different schema version.` exception you're seeing, as those properties with default values could be accessing the Realm prior to the `setupRealmAndMigrateIfNecessary` function being called, so when you come around to making the migration, the Realm is already open with a different schema version.

If this is not the case, we'll need more information to troubleshoot with you.

---

@GreatApe from recent comments made in your other issue (#3244), it seems like the original issue reported here is only tangentially related to yours. Let's continue the conversation in #3244.

---

@jeeftor hi! Can you please share more information about the issue you're experiencing? It's very difficult to help you without more information.
",jpsim,kreeger
3167,2016-03-10 00:04:33,"As far as I can tell, there are 3 or 4 different people in this thread with potentially separate issues, what seems to be common is the exception thrown (""Realm at path already opened with different schema version."").

---

@kevinmlong let's start with your issue, and what you've shared of your project with us, first:



You say this logs the following:



which would seem to me is impossible given that passing a lower version number than what's currently set in the Realm file on disk will throw an exception at runtime, which is then converted to a Swift error in the `Realm` initializer, preventing that version from being set: https://github.com/realm/realm-cocoa/blob/v0.98.3/Realm/ObjectStore/object_store.cpp#L364

My limited testing confirms that setting a lower schema version number than set on disk throws a Swift error. If you were to share with us a complete sample project that can trigger this strange behavior you're experiencing, we'd be able to troubleshoot further. Otherwise, we're stuck here.

---

@kreeger I think something else is happening in your case.

> We're calling a method on a struct to set our default Realm configuration straight from our `applicationDidFinishLaunching`... method in our application delegate, which fires on the main thread. It's the second thing to get called after setting up our logger.

Note that `applicationDidFinishLaunching` is often not the first part of your code that runs in a Swift app. If you have any code that touches a Realm in properties with default values of view controllers that are loaded by storyboards, those will access the Realm before `applicationDidFinishLaunching` has a chance to run.

This could explain the `Realm at path already opened with different schema version.` exception you're seeing, as those properties with default values could be accessing the Realm prior to the `setupRealmAndMigrateIfNecessary` function being called, so when you come around to making the migration, the Realm is already open with a different schema version.

If this is not the case, we'll need more information to troubleshoot with you.

---

@GreatApe from recent comments made in your other issue (#3244), it seems like the original issue reported here is only tangentially related to yours. Let's continue the conversation in #3244.

---

@jeeftor hi! Can you please share more information about the issue you're experiencing? It's very difficult to help you without more information.
",jpsim,kevinmlong
3167,2016-04-20 13:14:55,"Sorry I'm just now getting back to this one: @jpsim thanks to you, I've learned something new about Storyboards today! I haven't had the chance to circle back around to the app where I was having this issue, but I'll make sure to avoid this pitfall in the future.
",kreeger,jpsim
3166,2016-02-09 01:20:46,"Did integrating 0.98 help @jplazcano87?
",jpsim,jplazcano87
3165,2016-02-02 00:18:57,"That works for me @tgoyne, although I wish there was a way to directly add Realm classes to the Schema at runtime because while I agree that scan operation is way too costly to run each time a new file could appear in the bundles, the user should be able to override this behavior and add files they know  are Realm files.

And the env var is a good option if there's no way to add schema files manually, but I try to keep as much testing code checks out of the main code as possible.
",tom-sparo,tgoyne
3165,2016-02-15 22:22:50,"@tom-sparo (cc @jpsim, @tgoyne) can we close this issue?
",bigfish24,jpsim
3165,2016-02-15 22:22:50,"@tom-sparo (cc @jpsim, @tgoyne) can we close this issue?
",bigfish24,tgoyne
3165,2016-02-15 22:22:50,"@tom-sparo (cc @jpsim, @tgoyne) can we close this issue?
",bigfish24,tom-sparo
3163,2016-02-10 06:42:03,"Hi @jinmin888!

I think this issue has been sufficiently resolved. Please make sure to check the logic of your app, and ensure you're not inadvertently deleting this Realm Object before you're supposed to.

Feel free to re-open this issue if you have additional queries!
",TimOliver,jinmin888
3162,2016-02-01 22:47:37,"Thanks for following up on this @aakashs! I'm glad you figured this out :smile: 
",jpsim,aakashs
3160,2016-02-01 03:11:21,"@SergeHaddad 

Hi Serge! Thanks for your issue!

Hmm, if you want the functionality of `RealmSearchViewController`, but you're implementing a custom UI, it might be appropriate for you to implement the UI code, and perform the search directly against Realm yourself.

This would be really simple to implement. Each time the user types into the `UITextField`, its delegate can pass the search string as an `NSPredicate` to Realm, which can then provide a `Results` object that you can use to populate your `UITableView`.

If you think that this definitely is a feature that `RealmSearchViewController` should implement, then it would be more appropriate to file this issue [on its repo](https://github.com/bigfish24/ABFRealmSearchViewController/issues) instead of this one.

I hope that helped! Let me know how you go! :) 
",TimOliver,SergeHaddad
3160,2016-02-01 10:34:20,"Hello,

Thanks fir replying. I've never used NSPredicates before, and i didn't
understand how that NSPredicate can provide a Results object. Is there any
demo project ? I'm trying to search patients' names. Can you show me how to
create that NSPredicate from the UITextField and then provide a Results
object from it ?

On Mon, Feb 1, 2016 at 5:11 AM, Tim Oliver notifications@github.com wrote:

> @SergeHaddad https://github.com/SergeHaddad
> 
> Hi Serge! Thanks for your issue!
> 
> Hmm, if you want the functionality of RealmSearchViewController, but
> you're implementing a custom UI, it might be appropriate for you to
> implement the UI code, and perform the search directly against Realm
> yourself.
> 
> This would be really simple to implement. Each time the user types into
> the UITextField, its delegate can pass the search string as an NSPredicate
> to Realm, which can then provide a Results object that you can use to
> populate your UITableView.
> 
> If you think that this definitely is a feature that
> RealmSearchViewController should implement, then it would be more
> appropriate to file this issue on its repo
> https://github.com/bigfish24/ABFRealmSearchViewController/issues
> instead of this one.
> 
> I hope that helped! Let me know how you go! :)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/3160#issuecomment-177734230.
",SergeHaddad,SergeHaddad
3160,2016-02-01 19:14:56,"Hey Tim, it worked! Thank you. I did as you said. I used an NSPredicate
with CONTAINS[c] and then used realm.objects(Class).filter(predicate) and
then populated the table with it. Thanks again

On Mon, Feb 1, 2016 at 12:34 PM, Serge Haddad sergefhaddad@gmail.com
wrote:

> Hello,
> 
> Thanks fir replying. I've never used NSPredicates before, and i didn't
> understand how that NSPredicate can provide a Results object. Is there any
> demo project ? I'm trying to search patients' names. Can you show me how to
> create that NSPredicate from the UITextField and then provide a Results
> object from it ?
> 
> On Mon, Feb 1, 2016 at 5:11 AM, Tim Oliver notifications@github.com
> wrote:
> 
> > @SergeHaddad https://github.com/SergeHaddad
> > 
> > Hi Serge! Thanks for your issue!
> > 
> > Hmm, if you want the functionality of RealmSearchViewController, but
> > you're implementing a custom UI, it might be appropriate for you to
> > implement the UI code, and perform the search directly against Realm
> > yourself.
> > 
> > This would be really simple to implement. Each time the user types into
> > the UITextField, its delegate can pass the search string as an
> > NSPredicate to Realm, which can then provide a Results object that you
> > can use to populate your UITableView.
> > 
> > If you think that this definitely is a feature that
> > RealmSearchViewController should implement, then it would be more
> > appropriate to file this issue on its repo
> > https://github.com/bigfish24/ABFRealmSearchViewController/issues
> > instead of this one.
> > 
> > I hope that helped! Let me know how you go! :)
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/3160#issuecomment-177734230
> > .
",SergeHaddad,SergeHaddad
3160,2016-02-01 19:41:42,"We're glad you got this working, @SergeHaddad!
",jpsim,SergeHaddad
3159,2016-02-01 20:36:04,"@Carpemeid how did you downgrade to Realm 0.97.0 ?
",SergeHaddad,Carpemeid
3159,2016-02-01 21:57:16,"This is likely a cache invalidation issue in either Xcode or CocoaPods. I recommend that you clear your derived data and reinstall your pods:



Realm Swift does not directly depend on `index_set.hpp`, so adding that to Realm Swift's target membership as @umwelt described above likely won't do anything.

Reverting to a previous version of Realm is completely unnecessary.
",jpsim,umwelt
3159,2016-02-01 22:05:27,"@jpsim I'm pretty sure I tried
1. cleaning the project
2. deleting derived data
3. deleting Pods directory, Podfile.lock and even the workspace and regenerating with a pod install
",jpaas,jpsim
3159,2016-02-02 04:00:03,"@jpsim it work~~ thanks a lot~ 
",frankcjw,jpsim
3159,2016-02-03 01:07:19,"I understand it may be a ""cache"" stuff. But I went crazy for 3 hours (just for the fun fact and trust that I can update the lib and use my time for the project) with the deadline ahead of me trying to reclean/reinstall everything. 

And it was not fun at all. 

And why would it be an issue for so many people? Even if pods do something wrong, isn't there a flag or an option which should be set and would make pods work correctly? Because triggering an error for all the developers is for sure not a way to do things. 

@SergeHaddad  In case cleaning doesn't work for some magical reasons to downgrade you need to specify the older version in pods not only for Realm-Swift but also for Realm itself, even if you didn't have Realm specified at all in the pods before. At least this is what I had to do.
",Carpemeid,SergeHaddad
3158,2016-01-29 19:54:45,"Hi @reduxdj, are you using a release candidate of CocoaPods 1.0 by any chance? If so, please note that Realm only supports the latest stable version of CocoaPods (0.39.0) and that we're tracking adding support for CocoaPods 1.0 in #3052.

If you're already using CocoaPods 0.39.0, you can reset your pods installation by running the following commands, which should reinstall Realm successfully:



If this still doesn't help your situation, please report back providing more information following our [guidelines](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#filing-issues).

Thanks!
",jpsim,reduxdj
3158,2016-02-06 05:29:42,"Hi, @swinghu, I guess some build setting option has value before pod install, so it override Pod's xcconfig's some setting value. Did you create a demo project to test this issue?
",MickeyHub,swinghu
3158,2016-02-09 01:28:03,"> then error message 
> Object.swift : Printable has been rename to CustomStringConvertible
> redunctant conformance of object to proc .....

@swinghu please be sure to specify the latest version of RealmSwift (0.98). That error would be happening if you're trying to build Realm for Swift 1.2.
",jpsim,swinghu
3158,2016-07-26 23:29:45,"@jpsim I updated to latest Realm version (1.0.2) and its building fine now. Thanks 
",JoeFerrucci,jpsim
3158,2016-07-27 00:25:49,"@jpsim I'm getting this error:

<img width=""241"" alt=""screen shot 2016-07-26 at 5 24 54 pm"" src=""https://cloud.githubusercontent.com/assets/2114494/17159924/efac14f0-5355-11e6-9c95-bb69147b8ab7.png"">
",JoeFerrucci,jpsim
3158,2016-07-27 00:36:17,"@jpsim Yes, I did. 
",JoeFerrucci,jpsim
3158,2016-07-27 19:03:04,"@JoeFerrucci to continue helping you, we'll need a complete bug report, so could you please open a new issue, taking care to fill out the issue template, providing full steps to reproduce? I'll be happy to take a closer look.
",jpsim,JoeFerrucci
3156,2016-02-01 09:12:35,"@hitendradeveloper no I didn't, otherwise there would have also been an exception thrown when first trying to access to Realm which would say so. @tgoyne will try out that fix.
",tspecht,tgoyne
3156,2016-02-01 09:12:35,"@hitendradeveloper no I didn't, otherwise there would have also been an exception thrown when first trying to access to Realm which would say so. @tgoyne will try out that fix.
",tspecht,hitendradeveloper
3156,2016-02-12 21:05:57,"@tspecht did you get a chance to try out the fix?
",jpsim,tspecht
3156,2016-02-16 00:18:43,"I'm closing this since we haven't heard back from @tspecht in a while and expect this to have been fixed. @tspecht please reopen if you experience this with Realm 0.98.1 or later.
",jpsim,tspecht
3152,2016-01-29 17:55:37,"Hi @mikailcf, this is how we recommend you do this. The general pattern looks like this:



We're tracking adding better support for this in #921.
",jpsim,mikailcf
3149,2016-03-10 01:27:10,"Closing since we expect this to have been fixed some time ago and never heard back from @codesourse 
",jpsim,codesourse
3148,2016-02-10 06:09:10,"Hi @ambujshukla! We're still waiting with bated breath to hear back from you! :)

Did you manage to solve the issue you were having with KVO on your own in the end? If not, can you please provide us with some more information, and if possible a sample of your code?

Thanks!
",TimOliver,ambujshukla
3148,2016-02-16 07:57:56,"Hi @ambujshukla! No problems at all!
Ahhh, it's a third party library! Alright then!

Hmm, I'm not too sure then. If `KeyValueObjectMapping` is in charge of instantiating the actual object, it's possible it's not setting the `RLMObject` up properly, or failing to properly insert the values.

Do you have a sample app you could send us for us to examine?

Additionally, if all else fails, is there a particular reason why you're using that particular library? If you're doing JSON mapping to a Realm Object, there are other libraries out there, like [Realm-JSON](https://github.com/matthewcheok/Realm-JSON) that we can already confirm work really well! :)

Thanks a lot!
",TimOliver,ambujshukla
3148,2016-02-29 16:23:19,"Hi again @ambujshukla, were you able to further investigate or even resolve this issue based on the feedback from @TimOliver?
",mrackwitz,TimOliver
3148,2016-02-29 16:23:19,"Hi again @ambujshukla, were you able to further investigate or even resolve this issue based on the feedback from @TimOliver?
",mrackwitz,ambujshukla
3148,2016-03-10 01:28:34,"@ambujshukla we're closing this since we haven't heard back from you in a while. Please open a new issue referencing this one, along with more information following the issue template and we'll be happy to take another look!
",jpsim,ambujshukla
3147,2016-01-28 23:16:42,"After talking more about this offline with @bdash, I've decided to close this and wait for the right fix rather than merge this very brittle fix.
",jpsim,bdash
3146,2016-02-10 06:06:01,"Hi @lamson!

Hopefully Thomas' recommendations helped you fix your Carthage integration issues. 
I'm going to close this issue, but if you're still having issues, please feel free to open it again. Thanks!
",TimOliver,lamson
3142,2016-09-19 17:08:59,"@owenzhao please see the documentation for [`realm.add(_:update:)`](https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm3addFTCS_6Object6updateSb_T_). No data should ever be ""dropped"".
",jpsim,owenzhao
3142,2016-09-19 23:16:49,"@jpsim Considering of my situation, I have to say it will be more friendly to `throw an error` as the document says.

Here is my situation. I am keeping two realms synced between iOS and watchOS. In my model, there are subclasses inheriting `Object` and a particular class `Journal`, keep the operation records of the other `Object` subclasses. All Realm objects have an primary `id` in Int64



I use `Journal` to sync between iOS and watchOS. Base on the using pattern of my app, the `Journal.id` is extremely rare to be the same between iOS and watchOS when syncing. So I don't tend to compare whether the ids are duplicated in my own code, I want to rely on the throw error. 



In current Realm, there is no such mechanism to do what I want. So I say it is not friendly. I have to test the ids myself, which in most situations, will pass, which means unnecessary work, in my option.
",owenzhao,jpsim
3141,2016-01-26 21:03:12,"Hi @mustafa-almulla, are you using a release candidate of CocoaPods 1.0 by any chance? If so, please note that Realm only supports the latest stable version of CocoaPods (0.39.0) and that we're tracking adding support for CocoaPods 1.0 in #3052.

If you're already using CocoaPods 0.39.0, you can reset your pods installation by running the following commands, which should reinstall Realm successfully:



If this still doesn't help your situation, please report back providing more information following our [guidelines](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#filing-issues).

Thanks!
",jpsim,mustafa-almulla
3140,2016-02-10 06:03:09,"Hi @kbala!

We recently [released Realm Objective-C and Realm Swift 0.98](https://realm.io/news/realm-objc-swift-0.98.0/) that allows you to now assign notification blocks/closures directly to Realm Array objects to be notified when their contents are modified. I encourage you to check this feature out to see if it fits your implementation needs.

If not, we're still working hard on the fine-grain notification system and should have that ready to go in the near future.

I'm closing this issue now. Please feel free to open it again if you have any additional queries.
",TimOliver,kbala
3136,2016-06-24 22:06:42,"@jpsim The `asyncWrite` function must provide a completion block so that asynchronous errors (on commit after the write block is executed) can be handled. Since most users would probably ignore the error in the completion block, we ought to provide a default implementation that aborts. Unfortunately we are unable to show variant may fail (like the `try!` annotates with synchronous write), but this is a limitation of Swift.

I propose the following functions for the no-parameter and single-object-parameter cases. I agree that the multi-object-parameter variants are also useful, but I would first like to discuss the simpler cases.



Note that the completion block is provided in an overload rather than a default parameter so that users can use trailing-closure syntax in the non-handling case.

It's not straightforward how this API ought to translate to Objective-C. If we wish to provide ""default"" arguments for `queue` in the Objective-C API, we have to provide 2x as many functions, and there are already quite a lot. If we do, I think something like this might be reasonable, but I'm not very happy with the number of ""overloads"".



And now you can probably see why I left off discussing the other variants for now…! I'd appreciate feedback on whether this direction is reasonable.
//cc @austinzheng @tgoyne @TimOliver @mrackwitz 
",JadenGeller,jpsim
3136,2016-06-27 17:16:12,"@JadenGeller I think it was suggested somewhere that we would have a default background queue similar to the default file path, where it is defined globally and not tied to the methods themselves. Is this too limiting?
",bigfish24,JadenGeller
3136,2016-06-28 15:09:57,"@JadenGeller we should support Realm object types but also Foundation collections that contain Realm objects as well.
",bigfish24,JadenGeller
3136,2016-06-28 17:53:49,"@bigfish24 Which should we support? All of `NSArray`, `NSSet`, `NSOrderedSet`, `NSDictionary`, `NSCountedSet`, etc., and their mutable counterparts? This seems like a potentially huge undertaking.
",JadenGeller,bigfish24
3136,2016-06-28 17:59:39,"@bigfish24 That's a reasonable idea. We have to iterate over their objects in `O(n)` time anyway, so they can rebuild any hash map if necessary.
",JadenGeller,bigfish24
3136,2016-06-28 18:06:27,"Why not follow @tgoyne [suggestion](https://github.com/realm/realm-cocoa/pull/3369#issuecomment-200937115) and just have it accept a single object which is either an object or a collection of objects, thus you only have to cast back into that?
",bigfish24,tgoyne
3136,2016-06-28 18:15:43,"@tgoyne It's possible to define a function that takes _any_ argument, but not specifically a tuple argument. Further, Swift provides us no capabilities for iterating over that tuple, so we wouldn't be able to implement the necessary logic for passing the objects between threads.
",JadenGeller,tgoyne
3136,2016-06-28 18:26:08,"@tgoyne @austinzheng So is the consensus that it'd be ideal to go with the automatically-casting overload approach? @bigfish24 We could also allow any of these arguments to be collections, like in the 2nd example: https://github.com/realm/realm-cocoa/issues/3136#issuecomment-229132034
",JadenGeller,austinzheng
3136,2016-06-28 18:26:08,"@tgoyne @austinzheng So is the consensus that it'd be ideal to go with the automatically-casting overload approach? @bigfish24 We could also allow any of these arguments to be collections, like in the 2nd example: https://github.com/realm/realm-cocoa/issues/3136#issuecomment-229132034
",JadenGeller,bigfish24
3136,2016-06-28 18:26:08,"@tgoyne @austinzheng So is the consensus that it'd be ideal to go with the automatically-casting overload approach? @bigfish24 We could also allow any of these arguments to be collections, like in the 2nd example: https://github.com/realm/realm-cocoa/issues/3136#issuecomment-229132034
",JadenGeller,tgoyne
3136,2016-06-28 18:42:47,"@austinzheng @tgoyne Is it fairly easy to integrate GYB into our build system? Is this something we'd even necessarily want to do?
",JadenGeller,austinzheng
3136,2016-06-28 18:42:47,"@austinzheng @tgoyne Is it fairly easy to integrate GYB into our build system? Is this something we'd even necessarily want to do?
",JadenGeller,tgoyne
3136,2016-06-28 21:11:25,"Speaking with @JadenGeller about this just now, I'd like to add to the bikeshedding:
1. Why not avoid adding new ways to handle errors and reuse the ones we already have?
   By making async read transactions (though they have little value on their own), we
   can let users reuse the write methods and associated error handling that they're
   already familiar with.
2. By forgoing variadic arguments, we can use `SequenceType` and preserve the common
   denominator type. In other words, pass in `[Model1(), Model1()]` and the block vends
   an objects of type `[Model1]`; pass in `[Model1(), Model2()]` and the block vends an
   objects of type `[Object]`. Same thing for `RealmCollectionType<T>`.

Here's a small Swift Playgrounds that can serve as a proof of concept:


",jpsim,JadenGeller
3136,2016-06-28 21:14:00,"@jpsim We won't be able to construct an `S` from the _new_ objects on the other thread.

That is to say that the API would need be something like:


",JadenGeller,jpsim
3136,2016-06-28 21:23:17,"Elaborating on @jpsim's suggestion, this API design doesn't require us to provide a completion handler. Since the only throwing call during handover is creating a `Realm` instance on the new thread, and since this will never fail (right?), we don't need to provide an error path.
",JadenGeller,jpsim
3136,2016-06-29 18:49:07,"@JadenGeller we should have a completion handler so users can build reactive code from it
",bigfish24,JadenGeller
3136,2016-06-29 18:53:53,"@bigfish24 I don't think a completion handler is necessary to build reactive code in this case. It completes when their code completes.



A completion handler is only necessary if we perform some operation after their block completes.
",JadenGeller,bigfish24
3136,2016-06-29 19:07:22,"@jpsim and I were discussing _not_ wrapping the block in a write transaction since it'd mean we'd retain the same `try` error handling for the write block.
",JadenGeller,jpsim
3136,2016-07-06 00:07:38,"@jpsim Actually, we _can_ provide a polymorphic implementation if we constrain to `RangeReplaceableCollectionType` instead of `SequenceType` since the former requires both `init()` and `append(_:)`. 👍 
",JadenGeller,jpsim
3136,2017-02-15 01:48:18,"Hi @santhoshs5, even though we've released support for thread-safe references, Realm objects are still otherwise thread-confined. To modify your example:



Please refer to our release post on thread-safe references to learn more: https://realm.io/news/obj-c-swift-2-2-thread-safe-reference-sort-properties-relationships/

---

I'll be closing this ticket now as we have a mechanism for asynchronously passing thread-safe references in Realm and performing write transactions, and we have a separate ticket open to track making convenience APIs around it in #4477.",jpsim,santhoshs5
3134,2016-02-10 05:58:20,"Hi @jeeftor!

Just pinging this issue to see if there's anything more we can do here. Are you still experiencing this issue with Carthage? Did you file a Radar in the end?

Please let us know so we can clear up this issue. Thanks!
",TimOliver,jeeftor
3130,2016-01-25 08:13:52,"@zj159963 I believe this issue is duplicate of #3013 and #3035. This was probably fixed by #3078, so try pointing CocoaPods at master rather than 0.97.0.
I'm going to close this issue. If you encounter the further problem, please feel free to reopen this issue or create a new one.
",kishikawakatsumi,zj159963
3129,2016-02-10 07:22:10,"Hi @gal-orlanczyk! Just checking in! Are you still having this issue, or were you able to fix it yourself?

We're eager to hear how you went! :)
",TimOliver,gal-orlanczyk
3128,2016-01-27 22:39:33,"@hengchengfei as @mrackwitz has said, there are many factors that can affect the performance numbers you're seeing, such as running in Release/Debug mode, the size of the database, the size of your JSON string, the device you're running on, the number of Realm models you have linked in this app, etc.

If you find a bug, or performance optimization we could make, please let us know. Until then, I'm closing this issue.
",jpsim,mrackwitz
3128,2016-01-27 22:39:33,"@hengchengfei as @mrackwitz has said, there are many factors that can affect the performance numbers you're seeing, such as running in Release/Debug mode, the size of the database, the size of your JSON string, the device you're running on, the number of Realm models you have linked in this app, etc.

If you find a bug, or performance optimization we could make, please let us know. Until then, I'm closing this issue.
",jpsim,hengchengfei
3126,2016-01-22 00:50:05,"@jpsim thank you
I didn't have Realm in my podfile, only RealmSwift.  
",leetr,jpsim
3122,2016-02-22 17:43:13,"We recently made some changes in Realm's core which might pave to way to fixing this, although it's difficult to say for sure since we don't have a reliable reproduction case on which to test this fix to confirm.

We'd be grateful if @wolfAle or @chrism1974 could provide us with such a sample. It would help move the fix faster along the review process.
",jpsim,wolfAle
3122,2016-02-22 17:43:13,"We recently made some changes in Realm's core which might pave to way to fixing this, although it's difficult to say for sure since we don't have a reliable reproduction case on which to test this fix to confirm.

We'd be grateful if @wolfAle or @chrism1974 could provide us with such a sample. It would help move the fix faster along the review process.
",jpsim,chrism1974
3122,2016-04-13 23:21:44,"@avitus could you share a sample project that can reproduce this issue?
",jpsim,avitus
3122,2016-04-13 23:24:13,"@jpsim Let me see what I can do ... might be a few days.
",avitus,jpsim
3120,2016-01-20 17:51:06,"@tgoyne: The only places which are concerned from this changeset are within `RLMObjectSchema` as the property `isSwiftClass` continues to reflect where the class was defined instead what superclass it is inheriting from. Can you please point out where exactly you think something goes wrong?
",mrackwitz,tgoyne
3120,2016-02-16 16:28:59,"I addressed what @tgoyne proposed here and rebased it now. So I'm waiting now for CI feedback and would merge it then after adding a changelog item, if no one objects.
",mrackwitz,tgoyne
3118,2016-01-20 13:16:54,"@mrackwitz Thanks for the input, i bypassed this issue by adding a default value for NSNumber which seemed to work without any issues. 
",shams-ahmed,mrackwitz
3116,2016-01-19 09:13:32,"@timothycosta Thank you for reporting! Could you provide us with more code that leads up to this? Could you share the code around crash and start observing?  If you could send a small reproducible project or the actual project privately to help@realm.io it will help us look into this.
",kishikawakatsumi,timothycosta
3116,2016-01-26 20:48:21,"@timothycosta we weren't able to reproduce the issues you reported. Would you be able to come up with a failing unit test or sample project that can trigger the issue so we can investigate?
",jpsim,timothycosta
3116,2016-01-27 01:24:00,"@tgoyne @jpsim @kishikawakatsumi I wasn't able to exactly replicate what was happening in my app in a sample.  It is possible the object was getting deallocated.  I was able to get a crash to occur by _deleting_ the object during observerValueForKeyPath: though.  I verified that deallocating a regular NSObject does not cause a crash.  

Here's a gist, and I will email the full project to help@realm.io.  Revision one and revision three show two different ways of generating two different exceptions.
https://gist.github.com/timothycosta/829df1ae35deeb93eaed
You can test a normal NSObject by uncommenting line 35 (observe UILabel), and commenting out line 63/64 (observe a realm object).
",timothycosta,jpsim
3116,2016-01-27 01:24:00,"@tgoyne @jpsim @kishikawakatsumi I wasn't able to exactly replicate what was happening in my app in a sample.  It is possible the object was getting deallocated.  I was able to get a crash to occur by _deleting_ the object during observerValueForKeyPath: though.  I verified that deallocating a regular NSObject does not cause a crash.  

Here's a gist, and I will email the full project to help@realm.io.  Revision one and revision three show two different ways of generating two different exceptions.
https://gist.github.com/timothycosta/829df1ae35deeb93eaed
You can test a normal NSObject by uncommenting line 35 (observe UILabel), and commenting out line 63/64 (observe a realm object).
",timothycosta,tgoyne
3116,2016-01-27 01:24:00,"@tgoyne @jpsim @kishikawakatsumi I wasn't able to exactly replicate what was happening in my app in a sample.  It is possible the object was getting deallocated.  I was able to get a crash to occur by _deleting_ the object during observerValueForKeyPath: though.  I verified that deallocating a regular NSObject does not cause a crash.  

Here's a gist, and I will email the full project to help@realm.io.  Revision one and revision three show two different ways of generating two different exceptions.
https://gist.github.com/timothycosta/829df1ae35deeb93eaed
You can test a normal NSObject by uncommenting line 35 (observe UILabel), and commenting out line 63/64 (observe a realm object).
",timothycosta,kishikawakatsumi
3116,2016-01-27 23:42:10,"@tgoyne That makes sense, and I thought about doing something like that as well.  However, wouldn't it make more sense to just delay all KVO updates until after commitTransaction is called, even on the same thread?  Otherwise, theoretically any code that could ever be touched via KVO would need to be peppered with checks for whether you are already in a writeTransaction.  Should I already be doing that?  It would be simple enough to create a category with a block which would do that, but it seems a little dirty to me.

By the way, this section of the documentation is a little bit confusing.  ""When you directly assign to it"" to me reads like ""when you assign outside of a write transaction"" (which you shouldn't be doing anyway, unless I'm mistaken).  Something like ""as soon as you assign to it during a write transaction on the same thread"" might be clearer.

> With persisted objects, there are three times when the value of a property may change: when you directly assign to it; when you call [realm refresh] or the Realm is automatically refreshed after a write transaction is committed on a different thread; and when you call [realm beginWriteTransaction] after changes on a different thread which have not been picked up by a refresh on the current thread.
",timothycosta,tgoyne
3116,2016-01-28 03:35:19,"@tgoyne Thank you very much for the detailed explanation.  It really helps my understanding of realm and KVO.  I'll close this.  I wasn't able to duplicate my original problem in a sample project.  The problem there wasn't (as far as I could determine!) trying to write anything during the notification.  Nevertheless the workaround I found was simple enough anyway.
",timothycosta,tgoyne
3114,2016-01-18 07:54:43,"@dickyj Realm support only **signed** integer types. Such like `Int`, `Int8`, `Int16`, `Int32` and `Int64`. Is it possible to use `Int64` instead of `UInt64`? In general, `Int64` has enough capacity.
",kishikawakatsumi,dickyj
3112,2016-01-18 09:56:52,"@mishagray @jpsim thanks for your responses. I went with the proxy model (`FeedItem`), which fits my case fairly well. 
",koenpunt,jpsim
3112,2016-01-18 09:56:52,"@mishagray @jpsim thanks for your responses. I went with the proxy model (`FeedItem`), which fits my case fairly well. 
",koenpunt,mishagray
3108,2016-01-27 00:30:30,"@zintus have you seen this error again since testing after #3078 was merged? We haven't heard back from you in a while, so I'll close this assuming the fix worked for you, but please let us know!
",jpsim,zintus
3108,2016-02-01 16:28:07,"@jpsim had a chance to test this on 0.97.1 release, works fine, thanks!
",zintus,jpsim
3103,2016-01-21 19:19:09,"Thanks for following up @crsantos!
",jpsim,crsantos
3102,2016-01-14 04:35:20,"@pjebs We are working it on https://github.com/realm/realm-cocoa/pull/3081
",kishikawakatsumi,pjebs
3101,2016-01-26 22:01:45,"Hi @anthony1810, I'm so sorry for the delay in getting back to you, this fell through the cracks.

Crashing in `objc_msgSend_vtable0` is not good :grimacing:. I'm at a loss for what could be causing this. The best way to move forward would be for you to share some code that could help us reproduce this crash, e.g. a minimal AppKit app that crashes on Realm initialization.

If you can't share code publicly, you could email it to us at help@realm.io referencing this issue.

I wish I could be of more help, but I'm not sure how else to take it from here. I hope to hear back from you soon!
",jpsim,anthony1810
3101,2016-02-01 22:30:48,"Hi @anthony1810, I'm just following up on my request for further information. We'd love to help you out here!
",jpsim,anthony1810
3101,2016-02-10 07:17:39,"Hi @anthony1810! We're waiting with bated breath to hear back from you! ;) 
Are you still having trouble, or were you able to resolve this in the end? Thanks!
",TimOliver,anthony1810
3101,2016-02-10 10:35:14,"Hi Tim,

It’s good to hear back from you. We’re unable to solve the problem and we’re working on a sample app holding that exception for you to test. The thing is we’re celebrating Lunar New Year so we will get back to you right when we could.

Best Regards,

Quang Tran
Software Engineer | Solis Lab Solution Co. , Ltd.
quang.tran@solislab.com mailto:quang.tran@solislab.com | (+84) 08 6251 5560
http://www.solislab.com http://www.solislab.com/

> On Feb 10, 2016, at 2:17 PM, Tim Oliver notifications@github.com wrote:
> 
> Hi @anthony1810 https://github.com/anthony1810! We're waiting with bated breath to hear back from you! ;) 
> Are you still having trouble, or were you able to resolve this in the end? Thanks!
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/realm/realm-cocoa/issues/3101#issuecomment-182234768.
",anthony1810,anthony1810
3101,2016-02-23 18:15:47,"Hi @anthony1810, I'm just following up on our request for more information or a sample project that reproduces the issue. Thanks!
",jpsim,anthony1810
3101,2016-03-10 01:22:26,"@anthony1810 We never heard back from you so there's nothing more we can do on this. If you manage to get a repro case together, please send it to us at help@realm.io referencing this GitHub issue number and we'll investigate.
",jpsim,anthony1810
3099,2016-01-13 10:18:15,"@pjebs Objective-C factory methods get mapped as convenience initializers in Swift automatically. So `objectForPrimaryKey:` method is converted to `RLMObject(forPrimaryKey:)`. 

https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html

If `Book` model class is defined like the following:



You can use `Book(forPrimaryKey: ""..."")` initializer instead `objectForPrimaryKey:` method.
",kishikawakatsumi,pjebs
3095,2016-01-13 18:08:43,"Hi @mrigdon, yes you have to keep that migration block in your app, because this new version of your app can be installed over any other previous version of the app. But the migration block will only ever run when applying the migration, which will only happen _at most_ once per schema version number.

> I asked Stack Overflow but got no response that's why I'm opening an issue

I assume you're referring to [this](http://stackoverflow.com/questions/34758675/realm-swift-update-all-model-objects-and-remove-migration) StackOverflow question that was posted a few minutes before you filed this GitHub issue? That's [since been answered](http://stackoverflow.com/a/34759403/373262) by @TimOliver:

> Yes. Since you used a migration to bump the `schemaVersion` number of the Realm file, that migration block is required with the assumption that another migration may be required in future.
> 
> If you want to completely reset the migrations and remove the migration block, you'll need to delete your Realm file from disk and recreate it (i.e., simply deleting just the objects isn't enough).

For future reference, there's no need to post questions multiple times in different places. If you follow the guidelines described in the [Getting Help](https://realm.io/docs/objc/latest/#getting-help) or [Reporting Realm Issues](https://realm.io/docs/objc/latest/#reporting-realm-issues) sections of our docs, we'll find it!
",jpsim,mrigdon
3091,2016-01-13 20:40:04,"@worchyld Are you possibly attempting to download Realm from China? If so, we're tracking some issues with that in #2713, and note some possible workarounds such as using a VPN or downloading a release from GitHub.
",jpsim,worchyld
3091,2016-01-13 22:16:50,"@worchyld are you, yourself in China? If so, you're likely experiencing #2713 and should try one of the workarounds I've mentioned. Have you tried one of my suggestions yet?
",jpsim,worchyld
3091,2016-01-15 20:59:27,"@GaborWnuk asking the obvious: were you connected to the Internet when running `pod install`? Have you tried again since? When you visit https://static.realm.io/downloads/core/realm-core-0.95.4.tar.bz2 in your web browser, does the file download successfully?
",jpsim,GaborWnuk
3087,2016-01-11 19:48:21,"@mrackwitz I think what @mladjan is saying is that the object is ""corrupt"" at the business logic level of his app rather than being an invalid Realm object.
",jpsim,mrackwitz
3087,2016-01-11 19:48:21,"@mrackwitz I think what @mladjan is saying is that the object is ""corrupt"" at the business logic level of his app rather than being an invalid Realm object.
",jpsim,mladjan
3087,2016-01-16 00:50:23,"I'm closing this as we don't have any actionable information to go on. @mladjan if you manage to find out more information about this issue, or ideally steps to reproduce, please file a new issue and we'll be happy to take a closer look.
",jpsim,mladjan
3086,2016-01-11 12:23:28,"@AbooJan We are afraid that our CDN has some problems with some of the ISPs in China. We are trying find a solution for that. But internet access problem in China might take us some time to solve... If possible, please use VPN when downloading. Really sorry for the inconvenience .
",beeender,AbooJan
3084,2016-06-05 00:49:03,"@jpsim @bdash I believe this will detect `-fembed-bitcode-marker`, even if there is not bitcode (`-fembed-bitcode`).
",jakajancar,jpsim
3084,2016-06-06 22:17:36,"@jakajancar can you recommend an improvement?
",jpsim,jakajancar
3083,2016-01-16 00:49:15,"@bryan1anderson did my last comment help clarify the situation for you? I'm happy to answer any followup questions you may have.
",jpsim,bryan1anderson
3081,2016-01-14 23:37:38,"@pjebs this needs to undergo more review from the rest of the cocoa team before we can merge. It won't be ready until that happens.
",jpsim,pjebs
3081,2016-01-14 23:40:13,"@kishikawakatsumi it looks like Java also supports indexing `byte[]` fields, so we should add `NSData` to this.

> This needs a changelog entry and to update the Objective-C tests. I would also prefer if we had more test coverage using indexed properties than we do now, but if it's sufficiently tested in core, that's even better.

I still think we need more test coverage than just checking to see if marking a property as indexed gets reflected in its `RLMProperty` representation.
",jpsim,kishikawakatsumi
3081,2016-01-25 16:30:47,"Addressed feedback.
Add Objective-C tests.
Add Swift tests for other indexable properties.

Can you review this @jpsim ?
",kishikawakatsumi,jpsim
3080,2016-01-08 15:17:59,"@dowhilenet 

> I hope sorted by Insertion sequence.

There is no way to retrieve insertion sequence. You can add property something like `insertionSequence` then manually manage insertion sequence yourself.

For example, increment `insertionSequence` property whenever you add object,



Then you can sort by `insertionSequence`,


",kishikawakatsumi,dowhilenet
3080,2016-01-08 15:22:05,"@kishikawakatsumi 

Finally, I also handled this way, very grateful.But still we want to have a more convenient way  :]
",dowhilenet,kishikawakatsumi
3080,2016-01-08 17:04:13,"@mrackwitz 谢谢。thanks。 :+1: 
",dowhilenet,mrackwitz
3079,2016-01-08 15:22:04,"@com314159 
This crash seems same as https://github.com/realm/realm-cocoa/issues/3013 and https://github.com/realm/realm-cocoa/issues/3035.

This issue was fixed by https://github.com/realm/realm-cocoa/pull/3078

Can you check whether it will reproduce when using master build? 
",kishikawakatsumi,com314159
3079,2016-01-13 22:38:46,"Closing assuming #3078 fixed the issue. Will reopen if we hear back from @com314159 if it happens again after updating to Realm on `master` or a release including the fix.
",jpsim,com314159
3075,2016-01-09 06:37:58,"@jpsim @mrackwitz 
i have did some more test, I am quite sure this is a problem, may be a bug...
the test is done in swift-2.1.1/RealmExamples/Encryption.
I have a object called 



and a json file has data, I first use the default.realm, import some data, then encrypt to a new realm file , at last open the encrypted file.



the result is : 
when the json table resords is less than 600( the realm file is less than 150kb), everything going fine.
when the json table resords is more than 1000( the realm file is more than 250kb), the problem appears. when i open the encrypted file with key, it throws : 



so i am sure the exception appears or not , depends on the size of realm file.
before i update to realmswift 0.97.0, everything is ok. and this problem has annoyed me several days, and also took some time to deal with it. I hope you guys can help me to find a solution . with this problem , i cannot archive new app version to app store at all.
",github2016a,mrackwitz
3075,2016-01-11 15:46:00,"@mrackwitz i have send the data to help@realm.io, you can check it when you have time, if there is any problem please let me know, thanks very much!
",github2016a,mrackwitz
3074,2016-01-07 10:13:36,"![image](https://cloud.githubusercontent.com/assets/1632740/12167976/4798eb5a-b56a-11e5-816d-c6a4c66ed5f6.png)
@yoshyosh 
@mrackwitz 
@beeender 
",yushuyi,beeender
3074,2016-01-07 16:15:49,"@yushuyi 原因是，在 Realm 对象中，声明非 `dynamic var` 是完全合法的，而且有用户有这样的需求。所以我们在碰到属性没有被声明 `dynamic` 的时候不太合适报一个警告。（没有加`dynamic`的时候，声明的var 就是一个普通的属性。）

https://realm.io/cn/docs/swift/latest/#attributes 这里有关于 Realm 使用 dynamic 的声明。可以对比下英文版 :smile:  https://realm.io/docs/swift/latest/#property-attributes

感谢反馈哈！
",beeender,yushuyi
3073,2016-01-11 18:01:35,"Actually, since the compiler should prevent you from declaring classes named `RealmSwiftObject`, there's not much more that documentation about it would do to help.

@hitendradeveloper could you please your entire Podfile here? This error could happen if you're using mismatched versions of the 'Realm' and 'RealmSwift' pods.
",jpsim,hitendradeveloper
3073,2016-01-28 22:18:03,"@hitendradeveloper have you made any progress on this since you last posted here? If not, I could spend some time trying to reproduce this next week.
",jpsim,hitendradeveloper
3073,2016-02-01 06:07:12,"@jpsim No, there is not any progress, still getting the same error.
",hitendradeveloper,jpsim
3073,2016-02-04 00:00:12,"@jpsim I'm not sure if this is the same issue but I'm getting the same error message... 

I have a predominantly Swift project so am using RealmSwift. However, I need to do a little Objective-C (that doesn't use Realm). However, when i #import ""ProductModuleName-Swift.h"" as [Apple's Docs](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_79) suggest for a mix-and-match project... the ""cannot find the interface interface declaration for RealmSwiftObject"" error prevents me from compiling.

Has your team encountered this at all? Thanks in advance for any help/advice you have!
",danielhour,jpsim
3073,2016-02-04 07:11:35,"@jpsim absolutely! here you go: https://github.com/danielhour/RealmSwiftSample

thanks again for taking a look at this!
",danielhour,jpsim
3073,2016-02-04 16:39:11,"Thanks for the project, @danielhour! I could easily trigger the compilation failure.

To be clear, using Realm Swift from Objective-C is unsupported. This is stated in the first line of our [Realm Swift docs](https://realm.io/docs/swift/latest/):

> If you’re looking to use Realm from Objective-C, or from mixed Objective-C & Swift apps please see Realm Objective-C instead.

[Realm Objective-C](https://realm.io/docs/objc/latest/) is designed to be used from Objective-C and/or Swift and we support its usage in mixed projects. So I encourage you to use Realm Objective-C if you need to use Realm from Objective-C.

@danielhour in your case, you're not actually trying to use Realm Swift from Objective-C, but rather you need to access _some other_ declarations from the Swift part of your app in the Objective-C part of your app. So you're ""playing within the rules"" so to speak. In that case, you can hide your Realm model classes from your `-Swift.h` header by marking them `private`:



By doing that your project compiles for me.
",jpsim,danielhour
3073,2016-02-04 17:00:52,"@jpsim so i actually tried that and while that removes that error.. then my other swift files can no longer see that class. is there another way to hide it? thanks.
",danielhour,jpsim
3073,2016-02-05 06:20:33,"@jpsim I am using mix and match environment,

I was just trying to create modelKit, so I can share the pure swift classes between watch and iOS app, all the classes are subClass of Object, Object class is part of Realm.

I have not used and Objective-C code, compiler automatic generates the -Swift.h header file, that's why I am getting the error.

About your solution to make private, in this case how we can share classes with other target, they will not visible anymore by making them private.
",hitendradeveloper,jpsim
3073,2016-02-22 09:09:30,"@jpsim Is there any progress about the issue ?
",hitendradeveloper,jpsim
3073,2016-10-11 18:13:48,"No updates on our side. [SR-805](https://bugs.swift.org/browse/SR-805) is still up for grabs. @hitendradeveloper is this something you're interested in fixing in the Swift compiler?
",jpsim,hitendradeveloper
3073,2017-03-06 00:23:37,"@gereons Thanks for the workarounds, we are currently encounter the same issue on our end and lucky saw this workaround.
And btw, `#define RealmObjectSwift NSObject` should be -> `#define RealmSwiftObject NSObject`",vincent-peng,gereons
3073,2017-03-06 08:33:16,"@vincent-peng Thanks, I've edited my comment to reduce further confusion.",gereons,vincent-peng
3072,2016-01-06 21:15:34,"Hi @foobar8675, Realm is ideally suited for large amounts of data like this. For example, writing 2M objects (with a single boolean property) creates a Realm file weighing in at 281KB.

This test file was created with the following code:


",jpsim,foobar8675
3071,2016-01-06 09:20:00,"@karzler  I  ran into the same issue before, and solved by using CocoaPods 0.39.0，the CocoaPods 1.0.0 caused this problem.
",JasonZengJ,karzler
3071,2016-01-06 09:50:43,"@JasonZengJ I still find it difficult. Now it throws that it couldn't find the underlying module 'RealmSwift'
",karzler,JasonZengJ
3071,2016-01-06 09:52:19,"@JasonZengJ Now, even the other frameworks are not being imported. Strange.
",karzler,JasonZengJ
3071,2016-01-06 10:49:35,"@JasonZengJ can you mention the precise steps you took? That could probably help me in looking at where am i going wrong? 
",karzler,JasonZengJ
3071,2016-01-06 13:01:28,"@karzler You can try following steps:
1. Create an empty swift project for a test
2. use CocoaPods 0.39.0 to install RealmSwift ( ensure your CocoaPods is 0.39.0.If your CocoaPods has been 1.0.0 before, you should use `gem uninstall CocoaPods` to uninstall 1.0.0.)
3. Compare the test project's build settings with your project's build settings, and find the difference.
",JasonZengJ,karzler
3071,2016-01-06 21:31:45,"@karzler what do you mean by ""Realm plugin""? What did you need to explicitly install?

Realm only makes two things that could ostensibly be called ""plugins"": our [LLDB script](https://github.com/realm/realm-cocoa/blob/master/plugin/rlm_lldb.py) and our [Xcode plugin](https://github.com/realm/realm-cocoa/tree/master/plugin). Neither of those are required to install Realm via CocoaPods.
",jpsim,karzler
3071,2016-01-06 21:44:15,"@jpsim I had to manually install Realm plugin for Xcode. It was only after this that I was able to resolve my issue. 
",karzler,jpsim
3071,2016-03-23 09:02:08,"@nicopuri No, unfortunately I didn't find the reason, but to be honest I had no time to investigate further. Looks like it's not related to CocoaPods/Carthage but probably to a change in Realm's header structure?

I also need to correct my statement from above: I was **not** able to fix and eventually reverted back to cocoapods 0.39 to get it running again.
",winkelsdorf,nicopuri
3071,2016-05-16 06:13:13,"+1, Cocoapods 1.0 and RealmSwift throws this error mentioned by @karzler 
",jbegham,karzler
3071,2016-06-07 20:49:27,"@jleach CocoaPods 1.0.1 should work. Maybe there's an Xcode/CocoaPods cache invalidation issue? Try these steps:



---

**Note to everyone:** I'm locking this conversation to encourage everyone to file a new issue, taking care to fill out the [issue template](https://github.com/realm/realm-cocoa/blob/master/.github/ISSUE_TEMPLATE.md), so that we actually have enough information to help you. Thanks for your understanding.
",jpsim,jleach
3068,2016-01-05 21:15:10,"Thanks for the request @danroberts, I've updated the issue title to better reflect what I think we should do here.

Nested dynamic frameworks isn't actually App Store safe (see #1907 & #1942).

This request isn't specific to Realm but rather applicable to frameworks in general, although that shouldn't stop us from documenting how to do it.
",jpsim,danroberts
3065,2016-01-05 14:54:51,"Ah, great thanks @jpsim . I will try that tonight and see if it works. 
",Jonovono,jpsim
3065,2016-01-06 18:21:52,"@jpsim Worked great, thanks! I got rid of Objective-C Realm uses. 
",Jonovono,jpsim
3061,2016-01-05 19:36:01,"Hello @JasonZengJ I have the same issue! I installed RealmSwift by cocoapods and my project not build anymore with the same message like you! Someone faced the same issue? Help please
",aelbarji,JasonZengJ
3061,2016-01-05 19:42:57,"@JasonZengJ @aelbarji we have two outstanding CocoaPods issues that we're aware of: #2701 and #3052. Is it possible you're experiencing one of those issues?

The workaround for #2701 is to run `pod install` twice.

The workaround for #3052 is to use a stable version of CocoaPods rather than the 1.0 release candidate.

If you think you're experience a different issue than the ones I've linked to, please share more information following the guidelines [here](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#filing-issues). Thanks!
",jpsim,aelbarji
3061,2016-01-05 19:42:57,"@JasonZengJ @aelbarji we have two outstanding CocoaPods issues that we're aware of: #2701 and #3052. Is it possible you're experiencing one of those issues?

The workaround for #2701 is to run `pod install` twice.

The workaround for #3052 is to use a stable version of CocoaPods rather than the 1.0 release candidate.

If you think you're experience a different issue than the ones I've linked to, please share more information following the guidelines [here](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#filing-issues). Thanks!
",jpsim,JasonZengJ
3061,2016-01-06 09:08:27,"@jpsim my cocoapods version is already 0.39.0. Also i try the workaround #2701 but also don't work! here my error /Users/ayoubelbarji/Documents/CACEIS/project/ag2r/Pods/Realm/Realm/module.modulemap:2:21: error: umbrella header 'Realm.h' not found
    umbrella header ""Realm.h""
                    ^
<unknown>:0: error: could not build Objective-C module 'Realm'
<module-includes>:2:9: note: in file included from <module-includes>:2:
#import ""Headers/RealmSwift-Swift.h""
",aelbarji,jpsim
3061,2016-01-06 09:13:15,"@jpsim    I've tried to use cocoapods 0.39.0， and solved the problem!!!!   Thanks!
",JasonZengJ,jpsim
3061,2016-01-06 09:16:20,"@aelbarji  You can try followings:

1,  try `pod --version` to ensure your Cocoapods is 0.39.0 
2,  run `pod install` again

here is my Podfile


",JasonZengJ,aelbarji
3061,2016-01-06 09:23:54,"@JasonZengJ pod --version give me 0.39.0
here my Podfile



But when i run pod install i have this 


",aelbarji,JasonZengJ
3061,2016-01-06 09:28:42,"@aelbarji  try this Podfile.



I ran into the similar warnings when 'pod install' with CocoaPods 1.0.0


",JasonZengJ,aelbarji
3061,2016-01-06 09:37:36,"@JasonZengJ i tried your Podfile but no success always the same warnings
and same errors
<img width=""1437"" alt=""capture d ecran 2016-01-06 a 10 35 58"" src=""https://cloud.githubusercontent.com/assets/10722948/12139534/67a08692-b461-11e5-9434-fa78a7c09c45.png"">
<img width=""1439"" alt=""capture d ecran 2016-01-06 a 10 36 17"" src=""https://cloud.githubusercontent.com/assets/10722948/12139541/78deeb56-b461-11e5-9927-227ed76cff5e.png"">
",aelbarji,JasonZengJ
3061,2016-01-07 19:07:56,"@aelbarji CocoaPods is telling you that your Xcode project is overriding the CocoaPods header search path configuration, therefore breaking some pods, in this case Realm:



It even shows you how to fix it! :smile: 

> Use the `$(inherited)` flag

Using your Podfile in a new project with Xcode 7.2 builds and runs fine for me: https://static.realm.io/debug/GH3061.tgz
",jpsim,aelbarji
3061,2016-01-08 09:38:14,"@jpsim the problem was because of i selected Pods/*\* in my project settings under Header Search Paths! But when i set $(inherited) flag, i can not load my Bridging imports.
<img width=""1440"" alt=""capture d ecran 2016-01-08 a 10 36 47"" src=""https://cloud.githubusercontent.com/assets/10722948/12194904/c1b641f6-b5f3-11e5-9aca-b459cf30f48a.png"">
",aelbarji,jpsim
3058,2016-01-05 19:25:06,"@tgoyne @bdash CocoaPods fix in place.
",jpsim,tgoyne
3055,2016-01-05 22:36:11,"@mowens can you provide some more details about what writes are occurring in the background?
",bigfish24,mowens
3055,2016-01-11 21:32:46,"@mowens is this Realm file supposed to be encrypted? We just identified an issue which may have caused that assertion to be hit for encrypted files under very specific scenarios (when a file is resized on open).

Also, if you can provide more details about what writes are occurring in the background, that could help us identify what's happening.
",jpsim,mowens
3055,2016-01-11 21:43:50,"@bigfish24 The writes that occur in the background are pretty minimal. We basically update our cache in response to push notifications to sync resources between devices or from location changes. So basically a write in the background would be something like:

_Option 1_
1. Make HTTP request
2. Write resource to disk (disk)

_Option 2_
1. Publish resource over a socket
2. Write resource to disk (cache)

Nothing really fancy going on.

@jpsim The realm file is not configured for encryption
",mowens,jpsim
3055,2016-01-11 21:43:50,"@bigfish24 The writes that occur in the background are pretty minimal. We basically update our cache in response to push notifications to sync resources between devices or from location changes. So basically a write in the background would be something like:

_Option 1_
1. Make HTTP request
2. Write resource to disk (disk)

_Option 2_
1. Publish resource over a socket
2. Write resource to disk (cache)

Nothing really fancy going on.

@jpsim The realm file is not configured for encryption
",mowens,bigfish24
3055,2016-01-11 21:48:58,"@mowens your transaction may _seem_ minimal and unfancy, but you may be attempting a combination of operations in an order which has slipped through our unit tests so far! So we'd appreciate if you could share this code, especially if there's a chance that we can trigger the assertion on our end, which would drastically improve the odds of us finding what's wrong here.

If you'd rather share that code privately, you can email help@realm.io referencing this GitHub issue.

And thanks for letting us know that the file isn't encrypted.
",jpsim,mowens
3055,2016-01-11 22:32:43,"@jpsim 

There are 2 possible places where this can be happening on our code from a write:
1. DB compact on start up
2. Write in background

Here is our code that we run when the app launches to compress our DB file size:



Our `Configuration` class is just a object that contains information about which write and callback queues should be used when accessing Realm and the Realm.Configration that we create for each store. We abstract our realm access behind a `PersistentStore` class. The `Realm.Configuration` we create is versioned w/ a migration block and specifies which `Object` types should be managed by the realm instance. (if need you to see this code, let me know)

Our Realm abstraction (e.g. the `PersistentStore` is a generic class that will manage a single object type. We encode/decode the objects to our own entity models so we do not have to have our resources extend the Realm instance. Here is a basic example:



Then each `PersistentStore` will manage a pair of these:



Now we can store instances of `Foo` using the `fooStore` and the `PersistentStore` will handle the encode/decode of to the actual Realm `Object` that is stored. Here is the code for performing a write using the `PersistentStore`:



The code for creating our realm instance:



So a write would be invoked like so:



Hope this helps!
",mowens,jpsim
3055,2016-01-13 22:36:36,"@mowens I'm afraid there's too much code that wasn't shared for me to stub in without making so many assumptions as to void the initial conditions that led to the corruption that you've reported to us.

Without having sufficient sample code from you for us to be able to build and run, it'll be impossible to make more progress on this because we won't have anything actionable. Is there any chance you could email your project privately to us at help@realm.io so we can attempt to reproduce? We could sign a mutual NDA enforcing that we can only use your code privately and with the sole goal of improving the Realm framework, if that makes you feel more comfortable.

There's nothing that jumps out at me in the snippets you've shared as being able to lead to corruption, although I do wonder why all the wrappers around Realm db connections, writes and models are necessary. If you find yourself wrapping many of our APIs to provide a nicer interface, I'd love to hear more about your rationale to see if our API could be improved.

Thanks!
",jpsim,mowens
3055,2016-01-14 00:38:25,"@jpsim I would have to check with my VP to see if he is willing to travel down the NDA road. We haven't seen this crash in a while as we added recover code that will detect this and rebuild everything from the network. I will continue to monitor and see if I can ever get a better crash dump of this.

As for why we are wrapping Realm API's with our own, this is purely for abstraction reasons. The idea is that we don't let the Realm API bleed out of our PersistentStore API this way if for any reason we needed to switch to a different DB we could just by refactoring the PersistentStoreStore implementation. 

We are also using promises (PromiseKit) heavily so we wrap our code (which isn't illustrated in the above code samples), but with wrappers around Realm API's we can provide promise based writes which is very nice for caching purposes:

For example:



So with promises it allows us to do some really nice chaining, but this is really an implementation detail of some decisions we have made :) I think the Realm API is pretty damn awesome :+1: 
",mowens,jpsim
3055,2016-01-19 21:33:26,"> @jpsim I would have to check with my VP to see if he is willing to travel down the NDA road. We haven't seen this crash in a while as we added recover code that will detect this and rebuild everything from the network. I will continue to monitor and see if I can ever get a better crash dump of this.

Hi @mowens, any news on this? We'd love to continue investigating what may be causing this corruption, but don't have enough to go on at the moment. Let me know if there's anything I can do to help, like talking to your VP for example.
",jpsim,jpsim
3055,2016-01-19 21:33:26,"> @jpsim I would have to check with my VP to see if he is willing to travel down the NDA road. We haven't seen this crash in a while as we added recover code that will detect this and rebuild everything from the network. I will continue to monitor and see if I can ever get a better crash dump of this.

Hi @mowens, any news on this? We'd love to continue investigating what may be causing this corruption, but don't have enough to go on at the moment. Let me know if there's anything I can do to help, like talking to your VP for example.
",jpsim,mowens
3055,2016-01-20 19:40:47,"Hey @jpsim I think we figured out what the issue was and it is completely irrelevant to Realm. What I believe to have happened was we had 2 threads running (one doing a write) and one doing something else and that something else crashed. Being that this was running the background at the time, next boot up would show that Realm had been corrupted (which makes sense).

Thanks for looking into this and sorry for taking you down a rabbit hole on this one.  
",mowens,jpsim
3055,2016-01-20 21:18:44,"@mowens Realm has measures in place to prevent corruption from ever happening, even when write transactions are interrupted by the process crashing. It seems those safeguards failed in this case, which would still be considered a Realm bug.
",jpsim,mowens
3055,2017-01-13 19:06:14,@NguyenVV please file a new issue taking care to fill out the template.,jpsim,NguyenVV
3054,2016-01-06 03:38:18,"@bdash Thanks for clearing that up. For completeness sake, I've extended the sample to include lists as well, and added one level of depth.



We can see that adding an additional level of depth doesn't surface any other crashes. Yet we also see that `List`s throw an `RLMException` about not being valid anymore. Maybe `Result`s should also throw to indicate that they are not valid anymore?

@bdash, any ETA on when this will be resolved in core? Or can you provide a temporary work around for these situations?
",angerman,bdash
3054,2016-02-29 18:26:30,"@Legoless, please file a new bug report. Your crash log looks completely unrelated to the problem that this issue was tracking.
",bdash,Legoless
3052,2016-01-21 20:22:45,"@davejlong no this issue is still not fixed. I suggest you use the last version of Alamofire that works with CocoaPods 0.39... which is still the latest stable version of CocoaPods, so it's strange that Alamofire would deprecate its support for it.
",jpsim,davejlong
3052,2016-01-22 02:00:25,"@jpsim Will you release a fix for it soon? 🙌
",enricenrich,jpsim
3052,2016-04-08 22:44:57,"@bdash I'm actually having the same issue as mentioned above 

`<realm/util/features.h> file not found`

I switched to use 1.0.0.beta.4 as you mentioned it should work and did a brand new pod install but no luck. Should I file another issue? 
",royherma,bdash
3052,2016-04-11 14:32:25,"@JiriTrecak as @bdash said earlier, if you're having problems with a version newer than 1.0.0b4, please file a new issue containing the information mentioned in our documentation on [Filing Issues](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#filing-issues) and we'll be happy to help you get to the bottom of the problem.
",jpsim,bdash
3052,2016-04-11 14:32:25,"@JiriTrecak as @bdash said earlier, if you're having problems with a version newer than 1.0.0b4, please file a new issue containing the information mentioned in our documentation on [Filing Issues](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#filing-issues) and we'll be happy to help you get to the bottom of the problem.
",jpsim,JiriTrecak
3052,2016-05-16 18:24:03,"@dielsonsales please open a new issue
",jpsim,dielsonsales
3052,2016-05-16 18:25:45,"@dielsonsales: Note that there is currently an issue with CocoaPods 1.0 and OS X targets as seen in #3582.
",mrackwitz,dielsonsales
3052,2016-07-18 17:47:59,"@gk-brown it's unclear from your comment whether or not you followed the troubleshooting steps here: https://realm.io/docs/objc/latest/#reinstalling-via-dependency-managers
",jpsim,gk-brown
3052,2016-07-18 18:26:34,"@jpsim Yes. I followed the documented steps to reset the integration state, but I'm still seeing the issue with CocoaPods 1.0.1.
",gk-brown,jpsim
3052,2016-07-18 18:34:30,"@gk-brown Sorry to hear about your trouble! Could you please file a new issue, taking care to fill out the issue template and share as much relevant information as possible that could help us identify why Realm isn't building for you? Thanks!

---

Note to all: I'll be locking this conversation to encourage everyone to file new issues, which should help minimize the amount of back and forth that's eliminated by filling out the new issue template. Thanks for your understanding!
",jpsim,gk-brown
3051,2016-01-04 07:19:25,"@abury You should add the parent path of RealmSwift.framework to the “Framework Search Paths” in TidyOrderAheadExample's build settings. Because RealmSwift.framework uses Realm.framework internally, so RealmSwift.framework should be able to find Realm.framework and linked to. 

Like the following:

<img width=""902"" alt=""screen shot 2016-01-04 at 16 18 21"" src=""https://cloud.githubusercontent.com/assets/40610/12085050/e2ada5fe-b2fe-11e5-9982-cc25244f0993.png"">

Meaning of what is written in no. 3 in installation section is it.

> 3 . In your unit test target’s “Build Settings”, add the parent path to RealmSwift.framework in the “Framework Search Paths” section.
> https://realm.io/docs/swift/latest/#installation-swift-211

FYI: You embedded some frameworks to TidyOrderAhead.framework though, in development, it works. But AppStore might reject if your app includes such nested frameworks.
To attempt to integrate some of the framework in one will not go well. Because AppStore does not support nested framework.
",kishikawakatsumi,abury
3051,2016-01-04 12:50:50,"@kishikawakatsumi So the parent app would need to update it's search paths because of a frameworks dependancy? I can see that being necessary if the parent app is using it directly, but i'm trying to build a standalone framework that is just 'drop in' and as easy to integrate as possible.

Thanks for the heads up on embedded frameworks having nested dependancies, I wasn't aware that it was an issue. I'm struggling to find an effective way of making this work, but it looks like I'll have to just include the source of those frameworks for now and do without Realm for the Framework, shame :cry: 
Thanks heaps for your help.
",abury,kishikawakatsumi
3051,2016-01-05 14:15:56,"> So the parent app would need to update it's search paths because of a frameworks dependancy? 

@abury Yes.

> i'm trying to build a standalone framework that is just 'drop in' and as easy to integrate as possible.

We had tried to do so a several months ago. But we gave up because we cannot resolve AppStore submitting issue. https://github.com/realm/realm-cocoa/pull/1942
",kishikawakatsumi,abury
3049,2016-01-05 04:32:47,"Hi @jeeftor!

Our best practices for handling writes with Realm are:
1. Where possible, always do them on a background thread. Writing to a Realm file can sometimes take a non-trivial amount of time which could freeze the UI on the main thread. Write transactions do not block read operations (Only other write operations) so deferring your writes to a background thread can help keep your app responsive.
2. Where possible, it's much more efficient to perform multiple write operations inside one write transaction than to open a new transaction for each update. If you know you'll be reliably receiving many write requests, see if you can collect them and batch them inside fewer write transactions.

In regards to your concern on the background thread, you shouldn't need to worry about re-reading the database. Realm is quite smart in that `Results` objects automatically update when the underlying `Realm()` object is refreshed.

On that note, Realm objects on background threads do not auto refresh (Only on the main thread they do), so instead of performing a new fetch, you should just need to call the `refresh()` method on the `Realm()` object in that thread, and the `Results()` objects should update on your behalf.

I hope that helped!
",TimOliver,jeeftor
3049,2016-01-26 20:54:31,"Hi @jeeftor, I hope @TimOliver's recommendations and explanations were helpful. I agree with his suggestions. I'd also encourage you to apply general performance auditing practices when optimizing your usage of Realm, such as profiling with Instruments on physical devices and identifying if there are areas of your app that can be improved.

The [Threading](https://realm.io/docs/swift/latest/#threading) section of our docs may also prove valuable as you consider design patterns for your Realm usage.

I'm closing this issue as we haven't heard back from you here in a few weeks, but please let us know if you have any further questions and we'll be happy to help!
",jpsim,TimOliver
3049,2016-01-26 20:54:31,"Hi @jeeftor, I hope @TimOliver's recommendations and explanations were helpful. I agree with his suggestions. I'd also encourage you to apply general performance auditing practices when optimizing your usage of Realm, such as profiling with Instruments on physical devices and identifying if there are areas of your app that can be improved.

The [Threading](https://realm.io/docs/swift/latest/#threading) section of our docs may also prove valuable as you consider design patterns for your Realm usage.

I'm closing this issue as we haven't heard back from you here in a few weeks, but please let us know if you have any further questions and we'll be happy to help!
",jpsim,jeeftor
3046,2015-12-30 12:15:22,"Thanks for the PR, @fewspider! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,fewspider
3044,2015-12-29 13:51:20,"@tgoyne Thanks for you response. When I exclude the model classes from the test target my test does not find the Model class anymore (`Use of unresolved identifier 'MyModel'`). I have actually never heard of not including sth. in the test target before. 
",martnst,tgoyne
3043,2016-01-05 21:21:16,"@bronenos can you please help me understand why you'd do this rather than simply refresh the Realm? I'm not convinced that this property allows for usage scenarios not already covered.
",jpsim,bronenos
3043,2016-01-07 19:54:06,"@bronenos I'm closing this because I lack an understanding of the problem space.

If you don't think your use cases are covered by refreshing the Realm like I've suggested above, please open a new GitHub issue describing what you're trying to achieve and we can determine if there's either an existing way to accomplish that, or if we should add new functionality (maybe even something like what you've proposed here).

Thanks!
",jpsim,bronenos
3042,2015-12-27 21:19:24,"Thanks for the PR, @bronenos! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,bronenos
3041,2015-12-27 05:29:59,"@dudduss Realm can only delete ""persisted"" objects. To deleting objects, fetch persisted objects first, then pass the objects to `deleteObject()` or `deleteObjects()` method.

It seems that you are trying to delete the object that was just made​​. What is the object you'd like to delete actually?
",kishikawakatsumi,dudduss
3029,2015-12-24 14:44:35,"@dannycohn Sorry, this is `strip-frameworks.sh`'s bug. It was introduced by https://github.com/realm/realm-cocoa/pull/3012. It will be fix https://github.com/realm/realm-cocoa/pull/3032.

Those files should not be gitignored.

Thanks for pointing out :bow: 
",kishikawakatsumi,dannycohn
3027,2015-12-22 17:05:22,"Thanks for the PR, @poolqf! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,poolqf
3027,2016-01-04 16:19:34,"@bdash any ideas?
",poolqf,bdash
3027,2016-01-04 22:41:18,"Thanks @bdash , if I find out more about it, I'll tell you
",poolqf,bdash
3026,2016-01-05 02:11:22,"@bdash, I did not do proper research on this issue before. It's my mistake. Thank you very much.
",Todd2010,bdash
3024,2016-01-26 21:42:42,"Hi @JonFBit, I'm just checking in to see if you've made any progress in either reproducing or working around this bug? In your last comment, you mentioned that you had a potential fix in the works, how did that pan out?

Looking at the recent Crashlyitcs reports, it doesn't look like this issue has died down at all in the last month :disappointed:.

Please keep us posted!
",jpsim,JonFBit
3024,2016-01-27 15:14:29,"Thanks for checking in @jpsim! 

I haven't been able to reproduce the issue in testing & development,  which makes it tricky to say if there's been any progress or not. 

I've got an app update currently waiting for Apple review that fixes some version-pinning and related issues that I identified in how we were interacting with Realm, as well as gets rid of a long-lived Realm reference that we really didn't need. My hope is that once that goes out to our users there will be a drop-off in Crashlytics reports coming in.
",JonFBit,jpsim
3024,2016-02-09 01:32:38,"That's great news @JonFBit! Keep us posted if you find out anything about that one assertion hit with the new version.
",jpsim,JonFBit
3024,2016-03-10 01:20:23,"Hi @JonFBit, any news if your latest version(s) still hit that assertion failure?
",jpsim,JonFBit
3024,2016-03-10 01:22:06,"Rock solid on the latest release :)

On Wed, Mar 9, 2016, 8:20 PM JP Simard notifications@github.com wrote:

> Hi @JonFBit https://github.com/JonFBit, any news if your latest
> version(s) still hit that assertion failure?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/3024#issuecomment-194603056.
",JonFBit,JonFBit
3022,2015-12-25 16:59:44,"I finally found solution @mrackwitz ! I was using different code for migration. Working version looks like this:



The most important part is `let _ = try! Realm()` which was missing for widget. You can mark it as closed, now it's solved for me. Thank you for your time!
",martinpilch,mrackwitz
3021,2015-12-30 14:56:00,"hi @mrackwitz , sorry for the late reply.
to better describe the issue i have, lets assume we have entity `movie` which is `RLMObject` subclass, what i have here is 2 tabs application, at the 1st tab is displayed `favourite` movies, which is like:
|--View <---> ViewModel.RLMResults --| 
`RLMResults` here is objects in realm with `favorite = true`

then in the 2nd tab it's a list of all movies weather `favorite = true` or not, so whenever i favorite item from the list ( 2nd tab ), when i go back to the 1st back the newly favorite item is there without reloading ( on simulator ) meanwhile it doesn't appear on the device.

`UITableViewDatasource` methods are getting data from viewModel, e.g : 



Thank you.
",haitham-reda,mrackwitz
3021,2016-01-11 16:10:54,"hey @mrackwitz ,
the `viewModel` here is an `RVVM` subclass, `reactivecocoa`.
the issue was strange, that behaviour was on iOS simulator 8.2, but when i tried with 9.x simulator it behaves exactly like the device, so the only explanation i can think about now that simulator version 8.2 was reloading `tableView` at some point, most probably `-viewDidAppear`.
All good from my end now , thanks for your replies.
",haitham-reda,mrackwitz
3019,2016-01-05 20:01:22,"I'm closing this issue as @mrackwitz's suggestion is correct. @Rusik please let us know if there's anything more we can do to help you!
",jpsim,mrackwitz
3019,2016-01-05 20:01:22,"I'm closing this issue as @mrackwitz's suggestion is correct. @Rusik please let us know if there's anything more we can do to help you!
",jpsim,Rusik
3016,2016-01-05 19:39:50,"@bryan1anderson we never heard back from you on this, so I'm closing this issue. If you're still having problems after trying the suggestions from my latest comment, please reopen this issue and we'll take it from there.
",jpsim,bryan1anderson
3016,2016-04-25 12:00:26,"@bryan1anderson can you please open a new issue sharing a project and steps that reproduce your problem?
",jpsim,bryan1anderson
3016,2016-04-25 18:02:51,"@jpsim Yes I will try to find time to allocate. Working for launch next week and as I've solved the compile issues its not so so pressing. Thanks
",bryan1anderson,jpsim
3013,2015-12-21 07:36:10,"@jpsim I have received a project that occurs the same issue from another user. I'll investigate what happens. I have not possible to reliably reproduce the problem yet though. 
",kishikawakatsumi,jpsim
3013,2016-01-05 10:40:00,"@jpsim @tgoyne 

I created reproducible sample project https://github.com/kishikawakatsumi/Crash_Destruction-of-mutex-in-use/

#### Step to reproduce
1. Clone the repository and launch the app.
2. Wait for a few minutes (1-10 minutes) until the app will crash.

#### Note:

It is easier to reproduce on devices than simulators.
On devices, `EXC_BAD_ACCESS` in `advance_transact` was occurred in my environment.
On simulators, `Destruction of mutex in use` or `EXC_BAD_ACCESS` in `advance_transact` were occurred.

It seems to send a notification to the freed Realm instances.
According to the screenshot below, the app crashes on thread 5. At this time, the Realm instance is deallocated on other thread whenever (Thread 10 in the screenshot). 

The Realm instances on thread 5 and thread 10 were same (`0x0000000161c7fbf0`).

<img width=""1552"" alt=""screen shot 2016-01-05 at 19 28 23"" src=""https://cloud.githubusercontent.com/assets/40610/12112853/8dc86bc0-b3e2-11e5-9e59-2002fe92e0e3.png"">

I confirmed this crash was occurred in v0.97 and master.


",kishikawakatsumi,jpsim
3009,2015-12-17 00:06:41,"@mrackwitz Once the review here is finished, I would suggest you to promote this in #Engineering channel to other teams. 
",bmunkholm,mrackwitz
3009,2016-01-07 16:26:02,"Removed the debatable point about tags in commit messages as suggested by @jpsim.
",mrackwitz,jpsim
3004,2015-12-15 19:25:14,"@bdash I've updated the query code and I tried setting manually ""location.lat"" key and works fine. Only fails if I pass keys as variable like example
",mhergon,bdash
3004,2015-12-15 19:29:57,"@bdash After see your code, I'm tried this workaround:



and works fine!

Thanks!
",mhergon,bdash
3004,2015-12-15 19:38:45,"@bdash You can view my original code at this file:
https://github.com/mhergon/RealmGeoQueries/blob/0aa53e46d81899357cf23fdf4f363d3361f03935/GeoQueries.swift

Query:



And I only changed to string interpolation, I promise ;)
",mhergon,bdash
3004,2015-12-15 19:51:16,"@bdash Yes, after some tests, keeps failing.
Have you any workaround?
",mhergon,bdash
3004,2015-12-15 20:42:26,"@bdash The first exception occurs at ""filterGeoBox:"" method. So, above code has not executed...

I attached an example code with exception.
Thanks!
[Subproperty Fails.zip](https://github.com/realm/realm-cocoa/files/63162/Subproperty.Fails.zip)
",mhergon,bdash
3004,2015-12-15 21:16:00,"It works! Thank you @bdash 
",mhergon,bdash
3002,2015-12-15 21:41:18,"@jpsim Yeah, I actually don't want to delete the Realm file when an error occurs. I just want to detect that an error happened and handle it gracefully. If there's a way I can check if the call would fail ahead of time that would be fine too.

Anyway, I came up with a workaround that lets me catch the exception and handle it gracefully. It probably leaks memory, since AFAIK neither Swift nor Obj-C ARC are exception-safe, but I prefer leaking memory and showing an error message to crashing.
",jakob,jpsim
2998,2015-12-15 16:18:34,"@bdash I am happy to test this a bit since I have a few projects that will benefit. What are the unsupported advanced use cases that are not supported with subqueries?
",bigfish24,bdash
2998,2015-12-23 09:34:41,"@bdash nice work! I was able to build the framework and have done a few limited tests, but seems to be working. Will continue to do more thorough testing against a large Salesforce dataset.
",bigfish24,bdash
2998,2015-12-27 12:05:54,"@bdash thanks
",martnst,bdash
2998,2015-12-29 19:09:27,"@bdash this seems to fail when the subquery is evaluating a keypath versus a property, i.e.:



> **\* Terminating app due to uncaught exception 'Invalid property name', reason: 'Property 'Dormant' not found in object of type 'Field''
",bigfish24,bdash
2998,2015-12-30 06:30:28,"@bdash false alarm, the key path subquery evaluation is working. My issue was caused by how `NSPredicate` parses `SUBQUERY` expressions. I was building the predicate string incorrectly causing the predicate to be incorrectly parsed (but which wasn't immediately apparent in the debugger).

Here's a quick summary of the quirks around predicate parsing with `SUBQUERY`:


",bigfish24,bdash
2993,2015-12-16 10:07:31,"@jpsim Seems you were right.  
We have finally made our tests run fine, and the issue wasn't on Realm side, we were indeed trying to write to Realm, while changing the file from under it.

Thank you for your time and help.
",vincedev,jpsim
2988,2015-12-17 22:56:03,"0.97 was just released! Could you give this a try @Reggian and let us know if it's resolved?
",yoshyosh,Reggian
2988,2015-12-17 22:57:52,"Hi @yoshyosh, thank you for the info.
I will implement it and report back.
",Reggian,yoshyosh
2986,2015-12-11 12:07:33,"@SandyChapman Thank you very much for the detailed explanation!
",betaSavvy,SandyChapman
2985,2015-12-11 16:56:12,"Thanks @andr3a88 
",jpsim,andr3a88
2984,2015-12-12 18:11:31,"Thanks for the excellent test case, @shaozi! I was able to reproduce the problem by following your instructions, and could easily see where the bug is.

The underlying issue is that `TableView` appears to fail to update `m_num_detached_refs` in some cases. This can result in `TableViewBase::aggregate` thinking that all refs in the table view are detached, causing it to early-exit with a result of 0. It can also result in an incorrect result when the table view is empty, since the assumption is that for an empty table view `m_num_detached_refs` will be zero. This will need to be fixed in core. I'll file a core issue once I have a chance to boil the test case down to something that uses core directly.
",bdash,shaozi
2984,2015-12-14 19:35:26,"@shaozi: Yes, once this is fixed, it should be vastly faster than looping manually over the objects. Internally we're able to iterate over all relevant values of the column and to add up those without having to instantiate full accessor objects in the Objective-C runtime for every object in the array.
",mrackwitz,shaozi
2979,2015-12-10 11:20:10,"Thanks for the PR, @SandyChapman! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,SandyChapman
2979,2015-12-10 15:33:18,"Thanks for this work, @SandyChapman! This looks good to me! CI failure was unrelated (#2978).
",jpsim,SandyChapman
2976,2015-12-10 08:24:15,"Hi @jpsim,

Please any recommendation on how can I debug this issue so that I can have idea on how to fix this.

Thanks.
",rjjohnpatrickcruz,jpsim
2976,2015-12-10 10:41:55,"Yes @jpsim, my bad. Thanks!
",rjjohnpatrickcruz,jpsim
2972,2015-12-09 22:07:14,"@hyouuu please follow our guidelines for filing issues at https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md and report back here with further information. Posting a screenshot of Xcode isn't enough for us to help you resolve your issue.
",jpsim,hyouuu
2971,2015-12-09 21:38:12,"Thanks for the PR, @SandyChapman! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,SandyChapman
2971,2015-12-09 23:32:59,"@jpsim I'm on a brand new macbook. Didn't see that the 1.2 tests weren't running. I've installed Xcode 6.4 and applied the same changes to the Swift 1.2 code as well. This should fix the issue.
",SandyChapman,jpsim
2971,2015-12-10 00:11:00,"@jpsim Any insight into what failed this time? The only failures I see locally are because of missing provisioning / identity for the `io.realm.TestHost` bundle ID which would be expected.
",SandyChapman,jpsim
2971,2015-12-10 03:42:21,"@SandyChapman this looks good now, but I'm afraid you'll have to close this and open a new PR targeting our `master` branch. The `swift-2.0` branch is automatically generated from our `master` branch, so we don't actively develop on it.
",jpsim,SandyChapman
2971,2015-12-10 12:41:27,"@jpsim New PR is open. Closing this one.
",SandyChapman,jpsim
2970,2016-01-04 09:47:52,"@tschubotz Realm has limited Unicode awareness when sorting strings, which is to say that all strings are sorted according to an `en_US.UTF-8` locale, and not UTF-8 encoded byte value order.

We are aware that this is lacking for a wide range of use cases, but a proper solution to string sorting (including case-insensitivity) requires quite sophisticated locale support, which is something we are still designing.

I hope that answers your question. :-)
",simonask,tschubotz
2968,2015-12-09 19:10:57,"@dannycohn, can you please provide any information at all about what problem you're seeing, what you were trying to do when you saw it, and with which version of Realm you saw it?
",bdash,dannycohn
2968,2015-12-10 17:50:54,"An explanation of what's happening here would go a long way in helping us understand what's happening, @dannycohn.

For example, what version of Realm/iOS/Xcode is this error happening on?

The log you've shared seems to be from an iOS device, how did you install your app on that device (TestFlight, HockeyApp, Xcode, App Store, enterprise certificate, etc)?

How did you install Realm in your app (CocoaPods, Carthage, prebuilt binaries, from source, with/without bitcode)?
",jpsim,dannycohn
2968,2015-12-17 16:55:59,"@dannycohn Could you please verify the fix of bug by https://github.com/realm/realm-cocoa/pull/3012 ?
Edit `strip-frameworks.sh` in the Realm.framework in your project like the following:
Move copying bcsymbolmap files section to before the code signing section.

Thanks for your patience.
",kishikawakatsumi,dannycohn
2967,2015-12-14 22:49:36,"Hi @velthune! I wasn't able to reproduce a crash when sorting an empty `Results` object. Can you please provide some information about the crash you're seeing, along with information about what version of Realm you're using? See [CONTRIBUTING.md](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#filing-issues) for a list of information that will make it easier for us to help you.
",bdash,velthune
2963,2015-12-09 12:34:17,"@MinyaKonka Realm supports OS X platform. Can you please tell us the details of the error. What are error messages? Why can't you use it? Failing `pod install`? Or build error is occurred?
",kishikawakatsumi,MinyaKonka
2962,2015-12-08 20:12:21,"@tgoyne @bdash : Thanks for the tips. Since I've already invested a bit in using the Swift version of the API, I'll see if I can adapt it to my project's target. If not, I'll have to fall back onto using the ObjC API. I'll follow up shortly on my progress with details in case anyone else is looking to do something similar.
",SandyChapman,tgoyne
2962,2015-12-08 20:12:21,"@tgoyne @bdash : Thanks for the tips. Since I've already invested a bit in using the Swift version of the API, I'll see if I can adapt it to my project's target. If not, I'll have to fall back onto using the ObjC API. I'll follow up shortly on my progress with details in case anyone else is looking to do something similar.
",SandyChapman,bdash
2962,2015-12-09 14:27:22,"@jpsim @tgoyne @bdash : So I have this working. I have yet to run the unit tests, but the changes to support using RealmSwift in any Swift module is pretty simple. A total of 5 lines changed. This also shouldn't break support in the existing RealmSwift module. Are you guys interested in me contributing this? Since it's not explicitly supported I'd understand if you didn't want a PR, but if you do, I can go through the PR process (figured I'd ask before wasting time on it)
",SandyChapman,jpsim
2962,2015-12-09 14:27:22,"@jpsim @tgoyne @bdash : So I have this working. I have yet to run the unit tests, but the changes to support using RealmSwift in any Swift module is pretty simple. A total of 5 lines changed. This also shouldn't break support in the existing RealmSwift module. Are you guys interested in me contributing this? Since it's not explicitly supported I'd understand if you didn't want a PR, but if you do, I can go through the PR process (figured I'd ask before wasting time on it)
",SandyChapman,tgoyne
2962,2015-12-09 14:27:22,"@jpsim @tgoyne @bdash : So I have this working. I have yet to run the unit tests, but the changes to support using RealmSwift in any Swift module is pretty simple. A total of 5 lines changed. This also shouldn't break support in the existing RealmSwift module. Are you guys interested in me contributing this? Since it's not explicitly supported I'd understand if you didn't want a PR, but if you do, I can go through the PR process (figured I'd ask before wasting time on it)
",SandyChapman,bdash
2962,2015-12-09 16:32:42,"@jpsim @tgoyne @bdash 

See my diff here: https://github.com/lixar/realm-cocoa/commit/20cf23548afba2ccd618c9a26d8a9ed5a3714759

Let me know if you want a PR and on which branch you'd like it on (you guys have a lot of them).
",SandyChapman,jpsim
2962,2015-12-09 16:32:42,"@jpsim @tgoyne @bdash 

See my diff here: https://github.com/lixar/realm-cocoa/commit/20cf23548afba2ccd618c9a26d8a9ed5a3714759

Let me know if you want a PR and on which branch you'd like it on (you guys have a lot of them).
",SandyChapman,tgoyne
2962,2015-12-09 16:32:42,"@jpsim @tgoyne @bdash 

See my diff here: https://github.com/lixar/realm-cocoa/commit/20cf23548afba2ccd618c9a26d8a9ed5a3714759

Let me know if you want a PR and on which branch you'd like it on (you guys have a lot of them).
",SandyChapman,bdash
2960,2015-12-24 12:02:27,"@xiongemi It seems that your Podfile should work.
Can you try `COCOAPODS_DISABLE_DETERMINISTIC_UUIDS=YES pod install` ?
",kishikawakatsumi,xiongemi
2960,2016-01-05 20:03:22," @xiongemi and @DaGaMs, can you please try again with CocoaPods 0.39.0 with both `pod install` and `COCOAPODS_DISABLE_DETERMINISTIC_UUIDS=YES pod install`? Thanks!
",jpsim,DaGaMs
2960,2016-01-05 20:03:22," @xiongemi and @DaGaMs, can you please try again with CocoaPods 0.39.0 with both `pod install` and `COCOAPODS_DISABLE_DETERMINISTIC_UUIDS=YES pod install`? Thanks!
",jpsim,xiongemi
2960,2016-01-11 21:24:19,"@xiongemi and @DaGaMs have you had the chance to try my latest recommendation? I'd love to know if there's any more we can do to help here.
",jpsim,DaGaMs
2960,2016-01-11 21:24:19,"@xiongemi and @DaGaMs have you had the chance to try my latest recommendation? I'd love to know if there's any more we can do to help here.
",jpsim,xiongemi
2960,2016-01-11 21:50:27,"@jpsim sorry, I don't actually have that problem any more. Unfortunately, I can't remember for the life of me how I fixed it. I _think_ in the end I just needed to upgrade cocoapods to 0.39.0 and that was it...
",DaGaMs,jpsim
2959,2015-12-08 18:17:20,"Hi @xiongemi, we've removed that restriction on our `master` branch, so I encourage you to install Realm from source. I see from #2960 that you're using CocoaPods, so you can do this by setting the `:branch` argument in your `Podfile` to `master`:


",jpsim,xiongemi
2959,2015-12-09 19:51:41,"Thanks, it works.

On Tue, Dec 8, 2015 at 1:17 PM, JP Simard notifications@github.com wrote:

> Hi @xiongemi https://github.com/xiongemi, we've removed that
> restriction on our master branch, so I encourage you to install Realm
> from source. I see from #2960
> https://github.com/realm/realm-cocoa/issues/2960 that you're using
> CocoaPods, so you can do this by setting the :branch argument in your
> Podfile to master:
> 
> # note that you also need to specify the version of the 'Realm' pod to use
> 
> pod 'Realm', :git => 'https://github.com/realm/realm-cocoa.git', :branch => 'master'
> pod 'RealmSwift', :git => 'https://github.com/realm/realm-cocoa.git', :branch => 'master'
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/2959#issuecomment-162967234.

## 

Emily Xiong
",xiongemi,xiongemi
2958,2015-12-08 18:10:23,"Hi @skydivedan, thanks for the idea! We've just changed that behavior, so you can enjoy the documentation any time!
",mrh-is,skydivedan
2956,2015-12-11 20:53:14,"@bdash: I didn't thought of that scenario. So you're basing your stuff on the `swift-1.2` branch to try it out, before rebasing it to `master`?

I have done the changes back in #2952. I'll close this therefore.
",mrackwitz,bdash
2950,2015-12-08 01:02:31,"Unfortunately we have 4 different people reporting different issues in here.

@neon0619 in your case, Realm's core binaries couldn't be downloaded, so please try again once you have an internet connection.

@mrkey0310 @myloveCc to help you, we need more information. Please read [CONTRIBUTING.md](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md) and report back.

@aberkunov your issue is fixed in our `master` branch, so you could target that if you need to debug encrypted Realms.
",jpsim,aberkunov
2950,2015-12-08 01:02:31,"Unfortunately we have 4 different people reporting different issues in here.

@neon0619 in your case, Realm's core binaries couldn't be downloaded, so please try again once you have an internet connection.

@mrkey0310 @myloveCc to help you, we need more information. Please read [CONTRIBUTING.md](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md) and report back.

@aberkunov your issue is fixed in our `master` branch, so you could target that if you need to debug encrypted Realms.
",jpsim,myloveCc
2950,2015-12-08 01:02:31,"Unfortunately we have 4 different people reporting different issues in here.

@neon0619 in your case, Realm's core binaries couldn't be downloaded, so please try again once you have an internet connection.

@mrkey0310 @myloveCc to help you, we need more information. Please read [CONTRIBUTING.md](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md) and report back.

@aberkunov your issue is fixed in our `master` branch, so you could target that if you need to debug encrypted Realms.
",jpsim,mrkey0310
2950,2015-12-08 01:02:31,"Unfortunately we have 4 different people reporting different issues in here.

@neon0619 in your case, Realm's core binaries couldn't be downloaded, so please try again once you have an internet connection.

@mrkey0310 @myloveCc to help you, we need more information. Please read [CONTRIBUTING.md](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md) and report back.

@aberkunov your issue is fixed in our `master` branch, so you could target that if you need to debug encrypted Realms.
",jpsim,neon0619
2950,2015-12-08 02:30:21,"Thanks for your response @jpsim i just installed it now.
",neon0619,jpsim
2950,2015-12-08 03:34:03,"@mrkey0310 it looks like a CocoaPods cacheing issue. Try re-installing:


",jpsim,mrkey0310
2945,2015-12-08 16:45:06,"@ilendemli, can you provide some details about the crash you're seeing with this code? Can you provide a backtrace?
",bdash,ilendemli
2945,2015-12-15 01:26:37,"@ilendemli just following up on our request for more information. Thanks!
",jpsim,ilendemli
2945,2016-01-05 22:46:10,"@jpsim, can you take a look to see if this looks like a Swift compiler issue, or something we're doing wrong?
",bdash,jpsim
2945,2016-01-11 22:15:26,"@ilendemli I can't get your sample code to trigger a crash. I tried adding the following unit test to our [Realm Swift unit tests](https://github.com/realm/realm-cocoa/blob/master/RealmSwift-swift2.0/Tests/RealmTests.swift), but it succeeds in both Debug and Release modes:



This is with the latest version of Realm on the `master` branch (13348e7) and Xcode 7.2.

Do you have any ideas on how to modify this test case to reproduce the crash you've been seeing?

I'd also appreciate if you could try your code again using Xcode 7.3 beta (7D111g) which was just released today. Thanks!
",jpsim,ilendemli
2943,2015-12-04 18:16:28,"I think you meant #2910 @bdash, and no other GH issues tracking this in cocoa I believe. :+1: 
",jpsim,bdash
2942,2015-12-04 16:48:55,"Thanks for the extra information, @shmidt. `__cxa_begin_catch` is a C++ runtime routine that's called as part of handling an exception. Unfortunately by itself it doesn't provide any actionable information.

What would be most helpful would be a) the stack trace of the crash, and b) information about the exception that is thrown. The backtrace can be found in the Debug Navigator at the point of the crash. Information about the exception should be printed by the application, and will likely be found in the console area at the bottom of Xcode's window. [Xcode's documentation contains a visual guide](https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/debugging_with_xcode/chapters/debugging_tools.html) to these parts of the window if you're unfamiliar with them.
",bdash,shmidt
2942,2015-12-04 17:35:30,"@bdash My breakpoint was ""Objective-C"" from the beginning.
![screen shot 2015-12-04 at 9 35 05 am](https://cloud.githubusercontent.com/assets/1472370/11596525/57926182-9a6a-11e5-8e46-b9856763ae4c.png)
",shmidt,bdash
2940,2015-12-15 01:26:03,"@tgoyne and @ajitam worked this out via email. Which I'll repost here, lightly edited:

Essentially @ajitam was building a framework that bundled Realm & some Realm models. So to support users of that framework also being able to use Realm without being effected by the framework's usage, the `+[RLMObject shouldIncludeInDefaultSchema]` class method on each of the framework's model classes need to be overridden to return `false`, and then explicitly list those object types in the `objectClasses`/`objectTypes` array on the configuration object used to open the Realm.

Supporting the framework user using a different version of Realm from the one you're using in the same process would be tricky. All of the obj-c class names would need to be mangled similar to how `cocoapods-packager` does (but without trying to mangle anything else), and then build the library as a dynamic framework which has Realm statically linked into it.
",jpsim,ajitam
2938,2015-12-04 13:11:00,"Hi @jpsim!
Maybe you should move `RLM_VARARG(predicateFormat, args)` with check



 from `+ (RLMResults *)objectsWhere:(NSString *)predicateFormat, ...` to `+ (RLMResults *)objectsWhere:(NSString *)predicateFormat args:(va_list)args`?
",Rusik,jpsim
2938,2015-12-16 18:35:16,"@bdash @Rusik I've moved the predicate format validation into an `RLMValidatedPredicate` function so it's now also applied in the `va_list` methods. Anything else?
",jpsim,Rusik
2938,2015-12-16 18:35:16,"@bdash @Rusik I've moved the predicate format validation into an `RLMValidatedPredicate` function so it's now also applied in the `va_list` methods. Anything else?
",jpsim,bdash
2934,2015-12-04 02:00:13,"Thanks for the request, @Rusik. I think I agree with you that this is useful to add to our public interface. I'll make a PR shortly to do this.
",jpsim,Rusik
2933,2015-12-04 00:06:54,"Thanks for the reproducible test case, @jviney!

The leaked `_NSContiguousString` instances never appear to escape from the Swift runtime, which makes that leak feel like a bug within the Swift runtime.

The leaked `_NativeDictionaryStorageOwner` relates to the `listProperties` member of Realm's `DynamicObject` class, but no `DynamicObject` instances are leaked. Most of the retain / release traffic on the leaked instance, including the mismatched retain, is within Swift's reflection machinery.

@vtongcoder These leaks happen during schema initialization, which is typically a one-time event during application initialization, and therefore shouldn't significantly impact the memory usage of your application. It's hard to see how this leak could relate to any crash you're seeing. It'd be great if you could file a separate GitHub issue about your problem.
",bdash,jviney
2933,2015-12-04 00:06:54,"Thanks for the reproducible test case, @jviney!

The leaked `_NSContiguousString` instances never appear to escape from the Swift runtime, which makes that leak feel like a bug within the Swift runtime.

The leaked `_NativeDictionaryStorageOwner` relates to the `listProperties` member of Realm's `DynamicObject` class, but no `DynamicObject` instances are leaked. Most of the retain / release traffic on the leaked instance, including the mismatched retain, is within Swift's reflection machinery.

@vtongcoder These leaks happen during schema initialization, which is typically a one-time event during application initialization, and therefore shouldn't significantly impact the memory usage of your application. It's hard to see how this leak could relate to any crash you're seeing. It'd be great if you could file a separate GitHub issue about your problem.
",bdash,vtongcoder
2933,2015-12-14 19:00:03,"Small world @bdash ! You're working at Realm now :+1: ! Thanks for looking into this issue.

Agreed that these leaks are pretty small and shouldn't significantly increase an app's memory usage.
",jviney,bdash
2933,2016-04-19 09:01:59,"Lots of people have commented here, but has anyone filed a radar or Swift bug? Based on @bdash's earlier comment, this appears to be a leak in the Swift runtime, which Realm Swift happens to trigger:

> The leaked `_NSContiguousString` instances never appear to escape from the Swift runtime, which makes that leak feel like a bug within the Swift runtime.
",jpsim,bdash
2933,2016-09-30 18:58:58,"Any response from Apple on this @zhenjiangliu24 @mjohnson12 @gabovanlugo? Have any of you filed radars or tickets on https://bugs.swift.org that we can dupe or follow?
",jpsim,zhenjiangliu24
2933,2016-09-30 18:58:58,"Any response from Apple on this @zhenjiangliu24 @mjohnson12 @gabovanlugo? Have any of you filed radars or tickets on https://bugs.swift.org that we can dupe or follow?
",jpsim,gabovanlugo
2933,2016-09-30 18:58:58,"Any response from Apple on this @zhenjiangliu24 @mjohnson12 @gabovanlugo? Have any of you filed radars or tickets on https://bugs.swift.org that we can dupe or follow?
",jpsim,mjohnson12
2932,2016-07-02 16:29:05,"@jpsim I'm storing data in the app group. because i want both app and extension can access to the data. Will it be sync? If i move the realm file to the iCloud document, does it good and safe as storing in the app group? And if user doesn't enable iCloud, there's no iCloud document, right?
",Tom29,jpsim
2930,2015-12-15 01:20:30,"@idevmehra we're closing this issue because we haven't heard back from you in a while. Please reopen if you'd like some clarifications or have any further questions.
",jpsim,idevmehra
2928,2015-12-15 01:17:09,"@ikeyboard we're closing this issue because we haven't heard back from you in a while. Please reopen if you'd like some clarifications or have any further questions.
",jpsim,ikeyboard
2926,2015-12-15 01:19:56,"I agree this looks like this crash appears unrelated to Realm, but we're happy to investigate if you can provide more information @tariq235.
",jpsim,tariq235
2925,2015-12-15 01:16:30,"As @mrackwitz said, we believe this was fixed by #2954, which is available in `master`. Could you please integrate that version of Realm into your app and reopen this issue if this occurs again?
",jpsim,mrackwitz
2923,2015-12-02 01:16:45,"Thanks for the PR, @jlampa! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,jlampa
2923,2015-12-02 01:22:08,"Thanks @jlampa!
",jpsim,jlampa
2921,2015-12-02 19:10:22,"@xcodewarrier thanks for bringing this up, and it definitely should have this feature. I just added it via a property on `ABFRealmMapView`/`RealmMapView` called `basePredicate`. If you set an `NSPredicate` for the property in which it filters the objects the map is searching on, it will combine the predicate with generated bounding box location predicate, so that the map only displays results that match your filter in the map area.

Check out version 1.7: https://github.com/bigfish24/ABFRealmMapView/releases/tag/v1.7
",bigfish24,xcodewarrier
2919,2015-12-01 15:43:55,"Updating to the latest version of cocoapods fixed the issues for me. 
Thanks @mrackwitz 
Stay awesome :)
",johnpaulmanoza,mrackwitz
2916,2016-06-14 06:41:05,"Oh, OK. After trying to read up I was under the impression that Realm had it's own implementation, but I'm happy I was wrong :)

Thanks for the help, @tgoyne!
",slackernrrd,tgoyne
2913,2015-12-02 08:55:25,"@rscholtes I am considering importing Realm recently, but it seems this is quite a serious bug?
",liuxuan30,rscholtes
2913,2015-12-02 09:50:43,"@rscholtes: Thanks, we received your project and are looking into it. I'll keep you up to date here with the results of our investigations.
",mrackwitz,rscholtes
2913,2015-12-08 02:07:14,"@jpsim do you mind share what's the root cause? The PR just add a few methods
",liuxuan30,jpsim
2913,2015-12-08 21:52:46,"> @jpsim do you mind share what's the root cause? The PR just add a few methods

That's because the fix happened externally, in our core database engine, which is a binary dependency of realm-cocoa.

The issue is a bit complex, but it boils down to incorrectly handling a race between a commit and a new thread or process opening the database, which could result in a crash.
",jpsim,jpsim
2912,2015-11-30 09:58:18,"@ArEnSc Calling `[defaultRealm refresh]` manually before tableView's `beginUpdates` method might fix this issue?

Realm receives autorefresh signal only every runloop.

Unfortunately, because GCD blocks are the highest-priority events, `dispatch_async(dispatch_get_main_queue(), ^{ ... })` immediately after a commit can result in the block being run on the main thread before our autorefresh signal, resulting in the block seeing the version of the Realm from before the commit.
",kishikawakatsumi,ArEnSc
2912,2015-12-15 01:18:48,"@ArEnSc just following up on @bdash's last comment. Could you please share more about what `self.indexPathes` is and how it's used? Also useful would be the backtrace of the crash you're seeing, along with the exception message if the crash is due to an exception being thrown.
",jpsim,ArEnSc
2912,2015-12-15 01:18:48,"@ArEnSc just following up on @bdash's last comment. Could you please share more about what `self.indexPathes` is and how it's used? Also useful would be the backtrace of the crash you're seeing, along with the exception message if the crash is due to an exception being thrown.
",jpsim,bdash
2912,2015-12-19 02:39:07,"@jpsim thanks. I just want to confirm, should we do a refresh even we are creating a new instance of realm? Because one might assume a new realm object is up to date.

If refresh is required, maybe the examples in the threading section should be updated?
",siuying,jpsim
2912,2015-12-19 06:24:47,"@jpsim is it possible that a cached realm being returned, if I create a new Realm? Because if I added refresh() on every creation inside thread, the bugs I'm seeing (and spending days to debug) are gone.
",siuying,jpsim
2912,2016-01-11 21:22:55,"@siuying @ArEnSc I've clarified this in the docs and will now close this issue because I think I've addressed all your questions. If you have any further questions related to this topic, you may re-open the issue. For all other questions, I encourage you to file a new issue on this repo and we'll be happy to help!
",jpsim,ArEnSc
2912,2016-01-11 21:22:55,"@siuying @ArEnSc I've clarified this in the docs and will now close this issue because I think I've addressed all your questions. If you have any further questions related to this topic, you may re-open the issue. For all other questions, I encourage you to file a new issue on this repo and we'll be happy to help!
",jpsim,siuying
2910,2015-12-04 19:07:13,"I'm seeing this same error.  Happening to 21 users out of out 300k monthly active, so quite rare but frustrating, as it means the app crashes every time for these users.

Here's my stack trace:



For both me and @Reggian it's happening directly from `application:didFinishLaunchingWithOptions:` — this is the first time I reference the Realm DB after launch.

I'm doing nothing fancy, my entire Realm implementation involves a few calls to `objectsWhere:` and a few `beginWriteTransaction /  commitWriteTransaction` pairs, and I only ever use the default `RLMRealm`

@tgoyne thoughts on what's causing this or how to recover?
",tsheaff,Reggian
2910,2015-12-11 17:07:52,"Hi to @mrackwitz and all the others.

> Did you modified the default configuration in any way, used a different path or bundled a seed file which you copy in place of the default location to seed your database?

Except for migration, no. I do similarly as @edalford11 but never delete all objects from the realm.



> Is there any other code in place, which makes modifications to user-data in a generic manner and could touch the Realm database by accident? 

I do not store or read from the Documents folder (where the realm db is stored) if I understood you correctly.

> Do you perhaps try to use iCloud file syncs capabilities in combination with Realm? 

Nope.

> If you could provide a corrupted Realm file, which is causing this issue, this would be really helpful.

Sadly right now I can't as this never happened on my device and currently I do not have a system to retrieve such a file from my users.

Thanks @conradev for your contribution and to all for sharing insights.
",Reggian,mrackwitz
2910,2015-12-11 17:07:52,"Hi to @mrackwitz and all the others.

> Did you modified the default configuration in any way, used a different path or bundled a seed file which you copy in place of the default location to seed your database?

Except for migration, no. I do similarly as @edalford11 but never delete all objects from the realm.



> Is there any other code in place, which makes modifications to user-data in a generic manner and could touch the Realm database by accident? 

I do not store or read from the Documents folder (where the realm db is stored) if I understood you correctly.

> Do you perhaps try to use iCloud file syncs capabilities in combination with Realm? 

Nope.

> If you could provide a corrupted Realm file, which is causing this issue, this would be really helpful.

Sadly right now I can't as this never happened on my device and currently I do not have a system to retrieve such a file from my users.

Thanks @conradev for your contribution and to all for sharing insights.
",Reggian,conradev
2910,2015-12-11 17:07:52,"Hi to @mrackwitz and all the others.

> Did you modified the default configuration in any way, used a different path or bundled a seed file which you copy in place of the default location to seed your database?

Except for migration, no. I do similarly as @edalford11 but never delete all objects from the realm.



> Is there any other code in place, which makes modifications to user-data in a generic manner and could touch the Realm database by accident? 

I do not store or read from the Documents folder (where the realm db is stored) if I understood you correctly.

> Do you perhaps try to use iCloud file syncs capabilities in combination with Realm? 

Nope.

> If you could provide a corrupted Realm file, which is causing this issue, this would be really helpful.

Sadly right now I can't as this never happened on my device and currently I do not have a system to retrieve such a file from my users.

Thanks @conradev for your contribution and to all for sharing insights.
",Reggian,edalford11
2910,2016-01-04 05:53:15,"@conradev, the 10 Realm files we received from you in `wflow_corrupt.tar.gz`, are they encrypted? None of them have a recognizable file header, which means that they are either seriously corrupted, or encrypted. If they are encrypted, we would need to get hold of the encryption key to be able to investigate those files further.
",kspangsege,conradev
2910,2016-01-04 07:55:06,"@kspangsege We don't have any code to set an encryption key, so they are not encrypted to our knowledge, no. When we encounter `RLMErrorFail`, we display a `MFMailComposeViewController` with the Realm file attached. Is the entropy in the files similar to those of an encrypted database?
",conradev,kspangsege
2910,2016-02-23 16:29:36,"@conradev: Did you possibly find any more information that could give us some hints?
",bmunkholm,conradev
2910,2016-03-02 06:20:57,"@bmunkholm I just sent an updated archive with a total of 27 corrupted databases.

I looked through all of the crash logs and corrupt database submissions, and this is what I found:

Out of the roughly 100 users, the overwhelming majority were `iPhone8,[1-2]` and `iPad6,[7-8]` (A9 chip). A handful of devices (~5) were `iPad5,[1-4]` (A8/A8X chip). Since the crashes started, the iPhone 6s (Plus) and iPad Pro make up, on average, 30% of our users. This disparity leads me to believe it is option 1, as lined out above by @kspangsege.

The crashes started happening when we released Workflow 1.4.2 on November 24, 2015. Both Workflow 1.4.1 and Workflow 1.4.2 were running Realm 0.95.1.

Please feel free to ask any more questions!
",conradev,bmunkholm
2910,2016-03-02 06:20:57,"@bmunkholm I just sent an updated archive with a total of 27 corrupted databases.

I looked through all of the crash logs and corrupt database submissions, and this is what I found:

Out of the roughly 100 users, the overwhelming majority were `iPhone8,[1-2]` and `iPad6,[7-8]` (A9 chip). A handful of devices (~5) were `iPad5,[1-4]` (A8/A8X chip). Since the crashes started, the iPhone 6s (Plus) and iPad Pro make up, on average, 30% of our users. This disparity leads me to believe it is option 1, as lined out above by @kspangsege.

The crashes started happening when we released Workflow 1.4.2 on November 24, 2015. Both Workflow 1.4.1 and Workflow 1.4.2 were running Realm 0.95.1.

Please feel free to ask any more questions!
",conradev,kspangsege
2910,2016-03-20 09:40:30,"@conradev So you didn't see these crashes in Workflow 1.4.1 and you use the same Realm version in both versions of the app. So some changes in the new app version provokes these bugs it seems. It would be great to understand the differences in the two app versions then. Specifically if you use Realm in different ways now.
",bmunkholm,conradev
2910,2016-04-06 18:07:45,"@xiaomaogong: Not all corruptions are necessary irrecoverable, but there is no automated strategy to mitigate them. If there would be such, we would automatically apply it or prevent the corruption in the first place.

Depending on your use-case of Realm and what kind of data is persisted in the database, e.g. if you just use it as a cache for remotely retrieved entities, it might be a feasible strategy to start from scratch in case of such an error as proposed in my initial comment on this issue.

> As a countermeasure you could use the underlying `[RLMRealm realmWithConfiguration:error:]` with `[RLMRealmConfiguration defaultConfiguration]` instead of `[RLMRealm defaultRealm]` and pass in an `NSError` pointer. This particular exception can be only identified by a wider class of errors aggregated under the code `RLMErrorFail`. If the error should have this code, you can mostly only recover by deleting the existing Realm file and trying to initialize again, which sadly but inevitable could mean data-loss. For that reason it would desirable to find rather what is causing the file corruption to prevent it happening again.

See below how this strategy might look like code-wise.



Alternative strategies might include moving the file to a backup location, properly initializing your app and prompting the user to send this over to you for further investigation of the corruption as Conrad thankfully did.
",mrackwitz,xiaomaogong
2910,2016-04-28 03:57:53,"@mrackwitz 

After i remove the realm file with below code ,



I got another exception , looks like the realm file is not exist after i remove it , does realm will create a new realm file for us after the old one is removed?


",xiaomaogong,mrackwitz
2910,2016-05-30 08:49:51,"@xiaomaogong: Sorry that you were missing a response so long for your question here. Realm will re-create the file unless you try to open an existing file as read-only.
",mrackwitz,xiaomaogong
2907,2015-11-27 08:42:44,"@tspecht Could you please show your code around query that produces `RLMResults`? I suspect you might execute link query that compares to the object on the right-hand side, like following:



If so, it can cause a crash. Because the row index is changed unintentionally if the objects was deleted.
Recommend workaround, for example, use primary key on the right-hand side instead an object.
",kishikawakatsumi,tspecht
2907,2015-12-08 17:12:40,"@tspecht could you please share more information about how this happened? Thanks!
",jpsim,tspecht
2907,2015-12-15 01:15:14,"I agree with @kishikawakatsumi this looks like #1847, so I'm closing this as a duplicate. We're actively working on this.
",jpsim,kishikawakatsumi
2906,2015-11-25 23:53:50,"@jpsim I like this idea because this would aggregate all of the functionality together, including accessing the `RLMRealm` for a `Realm`
",bigfish24,jpsim
2905,2015-11-27 01:51:24,"@smpanaro Thank you for reporting and sample project! It will be fixed by https://github.com/realm/realm-cocoa/pull/2901 .
",kishikawakatsumi,smpanaro
2905,2015-11-27 02:42:47,"@kishikawakatsumi are you sure that's the same issue? This one seems to be related to `Realm.writeCopyToPath(_:)`.
",jpsim,kishikawakatsumi
2905,2015-11-27 03:17:35,"@jpsim I'm sure this issue isn't related to `Realm.writeCopyToPath(_:)`. Because it happens regardless whether to copy or not to copy the Realm. 

I also confirm it will be fixed by #2901 .

I try a little more investigating whether really the same problem. Thank you for your advice.
",kishikawakatsumi,jpsim
2905,2015-12-13 21:48:01,"@kishikawakatsumi @jpsim Just wanted to report that this bug still exists for me in 0.96.3. 
",smpanaro,jpsim
2905,2015-12-13 21:48:01,"@kishikawakatsumi @jpsim Just wanted to report that this bug still exists for me in 0.96.3. 
",smpanaro,kishikawakatsumi
2903,2015-11-25 19:29:04,"That's an unfortunate issue, @pvencill I'm sorry this is affecting you. I just filed https://github.com/realm/realm-browser-osx/issues/109 on our Realm Browser repository. This repository is for the Realm Cocoa framework.

@TimOliver should be able to continue the conversation with you there.
",jpsim,pvencill
2902,2015-11-27 08:53:26,"@narlei 

It is OK just to delete the file before creating any Realm(or RLMRealm) instances.
Then instantiate Realm as usual, new Realm file is created automatically.

If you used the Realm file as default configuration, the way to delete the file is the following:


",kishikawakatsumi,narlei
2902,2015-12-15 01:12:01,"@narlei we're closing this issue because we haven't heard back from you in a while. Please reopen if you'd like some clarifications or have any further questions.
",jpsim,narlei
2901,2015-11-30 20:19:11,"Since @bigfish24 is away, I'll update this.
",jpsim,bigfish24
2899,2015-11-25 19:01:44,"This needs a changelog entry, but otherwise this is good :+1: thanks @kishikawakatsumi!
",jpsim,kishikawakatsumi
2899,2015-11-26 00:43:51,"@jpsim I'm just wondering,  does changelog entry make users confuse? Because 9cfaa50 hasn't been released yet. It's been just merged to master. 
",kishikawakatsumi,jpsim
2897,2015-12-15 01:11:37,"@stevelyons we're closing this issue because we haven't heard back from you in a while. Please reopen if you'd like some clarifications or have any further questions.
",jpsim,stevelyons
2896,2015-11-24 07:59:13,"@rjjohnpatrickcruz There are some explanations for preloaded realm file in our documentation: [Other Realms](https://realm.io/docs/swift/latest/#other-realms) and [Bundling a Realm with an App](https://realm.io/docs/swift/latest/#bundling-a-realm-with-an-app) I hope these help.

It's quite easy to bundle preloaded Realm files in your app. 
1. Create data using iOS simulator or Mac app.
2. Copy data files to your app bundle.
3. Read data from files in app bundle **Note:** Realm should be read only, because app bundle does not allow writing.


",kishikawakatsumi,rjjohnpatrickcruz
2896,2015-11-24 08:34:13,"Thanks! @kishikawakatsumi I try this.
",rjjohnpatrickcruz,kishikawakatsumi
2896,2015-11-24 11:15:51,"its working @kishikawakatsumi! Thanks. cheers!
",rjjohnpatrickcruz,kishikawakatsumi
2896,2015-11-24 11:17:26,"@rjjohnpatrickcruz My pleasure!
",kishikawakatsumi,rjjohnpatrickcruz
2896,2016-12-27 18:14:53,"@kishikawakatsumi Thanks for the example. By the way, the Realm docs needs updating. `Realm.Configuration` doesn't seem to have that particular initializer anymore.
",Isuru-Nanayakkara,kishikawakatsumi
2894,2015-11-24 08:15:07,"@mewehk Realm objects cannot across thread at the moment. You can A) create all related objects on other thread, or B) create and save on main thread, then re-fetch these objects on other thread.

A. Create Dialog object A and get a User object B on other thread.
B. Create Dialog object A then save it. Get A and User object B from DB on other thread.
",kishikawakatsumi,mewehk
2894,2015-11-24 08:36:32,"@kishikawakatsumi Thank u. I provide two methods, one is add method, the other is query method. They both use the same dispatch_queue_t. But As I know, GCD queue cannot keep on the same Thread. how should I do?
",mewehk,kishikawakatsumi
2894,2015-12-15 01:10:58,"@mewehk we're closing this issue because we haven't heard back from you in a while. Please reopen if you'd like any clarifications or have any further questions.
",jpsim,mewehk
2893,2015-12-15 01:10:14,"I think @mrackwitz's assessment of the situation is correct. @brianblanchard-wf we're closing this issue because we haven't heard back from you in a while, but please do reopen if you'd like some clarifications or have any further questions.
",jpsim,mrackwitz
2893,2015-12-15 01:10:14,"I think @mrackwitz's assessment of the situation is correct. @brianblanchard-wf we're closing this issue because we haven't heard back from you in a while, but please do reopen if you'd like some clarifications or have any further questions.
",jpsim,brianblanchard-wf
2885,2015-12-12 12:18:11,"Hey @ataibarkai, I totally missed your latest comment.
What do you reference here / how do you mean that:

> To get it running, make sure you build+run the project before installing Realm using cocoapods.

Were you able to get it working by building the project as a first step? That'd be really odd.
",mrackwitz,ataibarkai
2880,2015-12-15 01:08:49,"@bdash's answer appears correct to me, so I'm closing this issue. @modLX4 please reopen if you need some clarifications or if you have any further questions.
",jpsim,bdash
2880,2015-12-15 01:08:49,"@bdash's answer appears correct to me, so I'm closing this issue. @modLX4 please reopen if you need some clarifications or if you have any further questions.
",jpsim,modLX4
2879,2015-12-10 18:38:26,"@Rusik that's exactly what this ticket is tracking
",jpsim,Rusik
2879,2016-04-25 09:02:51,"@ITGypsy nobody cares, I guess :(
",Galeas,ITGypsy
2879,2016-04-25 09:04:35,"@ITGypsy @Galeas any alternatives to realm, except core data?
",mixdesign,Galeas
2879,2016-04-25 09:04:35,"@ITGypsy @Galeas any alternatives to realm, except core data?
",mixdesign,ITGypsy
2875,2015-11-18 20:52:53,"Ouch. So much time spent on such a _dumb_ problem. Thanks @bdash for mentioning the Objective-C exception breakpoint. I did turn this on before but it was disabled for Objective-C for some reason. After fixing that issue, I quickly tuned into what was causing this.

In my case, I was using a `RLMNotificationToken` to update the UI whenever a change was made to the Restaurant model.



And because `[self updateUI]` accessed several objects that were deleted beforehand, I was receiving that crash. Adding a quick check to see if `[RLMRealm defaultRealm]` is empty fixed the issue.

Thank you! :dancer: 
",istx25,bdash
2872,2015-12-15 01:07:20,"@modLX4 we haven't heard back from you in a while on this issue. Please reopen if you have any further questions.
",jpsim,modLX4
2871,2015-11-20 20:02:52,"closing in favor of #2888 (just trailing whitespace removed). I picked it up because it's now the weekend in @samritchie's Australia.
",jpsim,samritchie
2866,2015-11-17 21:51:40,"@tgoyne, I'm struggling to write a comment in `subscript` that doesn't feel like it's stating the obvious. The best I've come up with is:

> We don't use optionalForProperty here for optional properties as RLMDynamicGet does the right thing,  and allows for a more natural return type.

Is there some bigger point that I'm missing that the comment should cover?
",bdash,tgoyne
2863,2015-11-20 22:07:34,"@tgoyne I've added a similar comment on the Swift side. Can you please review? ObjC side looks good.
",jpsim,tgoyne
2862,2015-11-16 18:07:51,"Hi @tgoyne, thanks for your reply. 
Good to know then, I was a bit worried that having a shared `RLMRealmConfiguration` object could have caused other not-easily-visible issues later on, but I think I'll close this issue now. Thanks again.
",vittoriom,tgoyne
2861,2015-11-23 11:02:42,"@github2016a Closing due to no response and question seems to be answered. Please reopen if there is any new information.
",kishikawakatsumi,github2016a
2860,2015-11-16 22:43:14,"@jbennett, I'm sorry that caused you trouble. Can you please point me to the page that you copy-pasted from which gave you the extra space character in you Run Script Phase? I'm not seeing anything obviously wrong in this regard with the latest version of our [Objective-C](https://realm.io/docs/objc/latest/) or [Swift](https://realm.io/docs/swift/latest/) documentation.
",bdash,jbennett
2860,2015-11-18 07:06:54,"Thanks for the details @jbennett! This is now fixed and should be live on the site in a few minutes.
",jpsim,jbennett
2859,2015-11-16 23:13:31,"Thanks for the test case, @tlubz. I was able to reproduce the issue by following your instructions.

It appears that `RLMInitializeSwiftAccessorGenerics` does the wrong thing for `RealmOptional`s on `DynamicObject`s. It attempts to manipulate the backing ivar of the optional property, but `DynamicObject` doesn't have that ivar and so it ends up poking at random memory instead.
",bdash,tlubz
2859,2015-11-17 00:48:44,"@bdash thanks for the reply, great to see you got to the bottom of it so quickly! Any other information I can provide while the PR gets reviewed?
",tlubz,bdash
2859,2015-11-17 02:45:31,"@bdash how can I test your changes locally? Can I grab your changes using CocoaPods?
",tlubz,bdash
2859,2015-11-17 03:14:48,"thanks @bdash, i was able to verify that this fixes my issue locally. any idea if and when this fix will be in a patch release?
",tlubz,bdash
2859,2016-01-04 18:39:24,"@bdash any idea which release this patch will be in? I don't see it in 0.97.0
",tlubz,bdash
2857,2015-11-16 09:53:52,"@ppamorim It might be hit this issue https://github.com/realm/realm-cocoa/pull/2675

Can you try remove existing pods and caches, then re-install pods again?


",kishikawakatsumi,ppamorim
2857,2015-11-16 11:07:06,"@kishikawakatsumi  Not working. I need to release the app very soon but this is a huge problem for me. :(
",ppamorim,kishikawakatsumi
2857,2015-11-19 11:59:51,"@jpsim Not working. No curl, no pods, no website too, I changed the computer and happens the same. :( I've contacted the network manager and he informs that don`t have anything blocking at the network.
I don't know what's happening.
",ppamorim,jpsim
2856,2015-11-13 17:42:06,"@bdash oh, i've missed that there is reference to compiled part of Realm core.

Now it's obvious that these errors are false-positives. Thanks for lightning fast response ⚡️
",zintus,bdash
2852,2015-12-15 01:06:37,"@smolskyaleksey is there anything more we can do to help you here? Please reopen if you have any further questions.
",jpsim,smolskyaleksey
2851,2015-11-16 23:38:52,"@alexanderjarvis, I'm sorry you're hitting this. I've filed an issue to have our core engine team look at this crash. We'd appreciate any further information you're able to provide to help us investigate. Particularly useful would be a copy of the Realm file from any user that's seeing this crash.
",bdash,alexanderjarvis
2851,2016-02-10 06:39:43,"Hi @alexanderjarvis! 

I'm just going through and doing an appraisal of some of the older outstanding issues here to see if we can help resolve them before our next set of releases.

Have you seen this issue happen anymore since you reported it? If it has, we would absolutely love it if you could capture the Realm file from one of the affected users.

Thanks a lot!
",TimOliver,alexanderjarvis
2851,2016-03-07 21:43:32,"Hi @TimOliver I've not seen this for a while so guess it was fixed.
",alexanderjarvis,TimOliver
2850,2015-11-16 09:31:26,"> When should I config realm? Should I config it everytime when I start my app?

@wakaryry Yes. You need to run above code every time you run your app, before than first instantiate the Realm.
",kishikawakatsumi,wakaryry
2850,2015-11-16 11:03:41,"@kishikawakatsumi  But my data saved last time was gone. I was confused.
",wakaryry,kishikawakatsumi
2849,2016-02-23 15:19:14,"I just noticed @timanglade specified the subtask

> Call out in the docs that “ObjectId” is similar to the concept of a “Primary Key” but highlight the fact one ObjectId per model can be null

I think that's not quite true - to be nitpicking I think it's really allowing one ObjectId per _model_ (aka `RealmObject` sublass) **per Realm** which can be null?

Say you have more than one Realm open with some of the same model classes in them, as you might in a complex manual migration scenario. Different, unrelated objects in different realms can have identical `ObjectId` values. These include one null per-Realm.
",AndyDentFree,timanglade
2848,2015-11-19 19:55:57,"@jpsim: Addressed that.
",mrackwitz,jpsim
2843,2015-11-12 05:29:41,"Thanks, @jpsim. It was my first time using Realm :)

I've fixed the issue, but just wanted to report the docs issue. 

Glad you've gotten it fixed.
",ArtSabintsev,jpsim
2842,2015-11-12 19:02:46,"@cmelchior although I see the value of a promise-like API for async queries, especially for Android where `RealmResults` has explicit `findAll()` materializations in the synchronous case.

However, a promise-like API for cocoa doesn't work as well because it breaks the assumption that an `RLMResults` can always be accessed as if it was materialized and will always return an accurate view of the query in the Realm. By going with the block approach, the RLMResults that are handed back in the block retain this assumption. This way, users never have to check `isLoaded` (and to always know when they're dealing with synchronous or asynchronous results).

So I'm happy to stick with this block-based API.
",jpsim,cmelchior
2842,2015-11-24 17:19:12,"@tgoyne thanks for your work on porting the search controller! Catching up here, I think I understand your position and how things would work with a UI component. Note: the search controller isn't demonstrating the issue though because @astigsen's request was to allow a UI component to be passed a `RLMResults` rather than create one internally. However, correct me if I am wrong, but it seems like with the current implementation/proposal the dev would do this:



I think this is reasonable, the only downside that I see is that the component is never automatically aware of when the query is running and thus it should be in a ""loading"" state. cc @jpsim 
",bigfish24,astigsen
2842,2015-11-24 17:19:12,"@tgoyne thanks for your work on porting the search controller! Catching up here, I think I understand your position and how things would work with a UI component. Note: the search controller isn't demonstrating the issue though because @astigsen's request was to allow a UI component to be passed a `RLMResults` rather than create one internally. However, correct me if I am wrong, but it seems like with the current implementation/proposal the dev would do this:



I think this is reasonable, the only downside that I see is that the component is never automatically aware of when the query is running and thus it should be in a ""loading"" state. cc @jpsim 
",bigfish24,jpsim
2842,2015-11-24 17:19:12,"@tgoyne thanks for your work on porting the search controller! Catching up here, I think I understand your position and how things would work with a UI component. Note: the search controller isn't demonstrating the issue though because @astigsen's request was to allow a UI component to be passed a `RLMResults` rather than create one internally. However, correct me if I am wrong, but it seems like with the current implementation/proposal the dev would do this:



I think this is reasonable, the only downside that I see is that the component is never automatically aware of when the query is running and thus it should be in a ""loading"" state. cc @jpsim 
",bigfish24,tgoyne
2842,2015-11-24 17:32:19,"@bigfish24 that's one way to do it, and if the component was designed specifically for async queries, it could take ownership of the results:



@tgoyne let me know if that's right
",jpsim,bigfish24
2842,2015-11-24 17:32:19,"@bigfish24 that's one way to do it, and if the component was designed specifically for async queries, it could take ownership of the results:



@tgoyne let me know if that's right
",jpsim,tgoyne
2842,2015-11-24 17:37:52,"@tgoyne @jpsim ah that makes sense to pass in the empty `RLMResults` and let the component take care of it. I like this... @astigsen any objections?
",bigfish24,astigsen
2842,2015-11-24 17:37:52,"@tgoyne @jpsim ah that makes sense to pass in the empty `RLMResults` and let the component take care of it. I like this... @astigsen any objections?
",bigfish24,jpsim
2842,2015-11-24 17:37:52,"@tgoyne @jpsim ah that makes sense to pass in the empty `RLMResults` and let the component take care of it. I like this... @astigsen any objections?
",bigfish24,tgoyne
2842,2015-11-24 17:46:19,">  ah that makes sense to pass in the empty `RLMResults` and let the component take care of it. I like this... @astigsen any objections?

I like it as well. I do find it a bit confusing with the `RLMResults` essentially being ""upgraded"" to an async version, but maybe that can be made clearer through naming of the methods?
",astigsen,astigsen
2842,2015-11-24 18:02:33,"@astigsen agreed the `addNotificationBlock:` method would need to be more clear that it will run the query if it hasn't yet, not sure if the name should elicit that or just the docs since this won't always be the case if you call it on a `RLMResults` in which the query already ran.
",bigfish24,astigsen
2842,2015-12-02 04:19:56,"@tgoyne @jpsim 

I found a strange behavior. If I would overwrite the NotificationToken, second and subsequent notifications will not reach. The sample project is here https://github.com/kishikawakatsumi/AsyncQuerySample.

Reproducible code snippets are like the following:



If calling the `stop` method before overwriting new NotificationToken, the issue won't occur.

It occurs only on application. It has never seen on unit tests. I tried to write tests, but cannot. Is it related to runloop?
",kishikawakatsumi,jpsim
2842,2015-12-02 04:19:56,"@tgoyne @jpsim 

I found a strange behavior. If I would overwrite the NotificationToken, second and subsequent notifications will not reach. The sample project is here https://github.com/kishikawakatsumi/AsyncQuerySample.

Reproducible code snippets are like the following:



If calling the `stop` method before overwriting new NotificationToken, the issue won't occur.

It occurs only on application. It has never seen on unit tests. I tried to write tests, but cannot. Is it related to runloop?
",kishikawakatsumi,tgoyne
2842,2015-12-02 20:48:55,"@kishikawakatsumi:  0e7c839 fixes that bug (and 507c8fa makes it so that the exception which was being thrown is logged rather than it just silently killing the thread).
",tgoyne,kishikawakatsumi
2842,2015-12-04 17:41:41,"@tgoyne 

I found another crash. Reproducible sample project is here: https://github.com/kishikawakatsumi/AsyncQuerySample.

Launch apps, then push button, hits `EXC_BAD_ACCESS` on line 81 of `async_query.cpp`.
https://github.com/realm/realm-cocoa/pull/2842/files#diff-b64175b6d3ea73e6fb807024c62653b6R81

Maybe notification token is being deallocated before reaching callback causes it?


",kishikawakatsumi,tgoyne
2842,2016-01-07 20:58:55,"Awesome work @tgoyne :clap: 
",bigfish24,tgoyne
2841,2015-11-13 01:12:48,"Thanks for these reports, I've notified our core team and will report back here with any findings.

@anlaital, which Realm version(s) are affected? Any steps or details that you can identify that could help reproduce these crashes would drastically improve our ability to fix these issues.
",jpsim,anlaital
2841,2015-11-13 06:31:36,"The latest crashes occur on Realm 0.96.2 using the Objective-C bindings.

It appears that these crashes started occurring after https://realm.io/news/realm-cocoa-0.91.5/ release, so could be related to that.

@jpsim I'm sorry that I'm not able to provide a contained test case for these or even some semblance of steps that might reproduce this, as the crash has never happened for us in R&D.
",anlaital,jpsim
2839,2015-11-12 02:50:29,"thanks @jpsim ,my goal Is to solve #2835，i want to read an unencrypted realm without create a file, for safe concern.
",github2016a,jpsim
2839,2015-11-12 07:12:03,"thanks,@jpsim ,my problem is my encrypted Realm file is too big, and cannot be zipped, so i have to use a zipped unencrypted realm, to encrypt it on the app first run. I want to read the unencrypted realm from zip file without create a realm on disc.
",github2016a,jpsim
2839,2015-11-13 09:11:26,"thanks for your advices,@jpsim. i will try the [RLMRealm compact]  method 。but i still cannot avoid creating a temp unencrypted Realm file on disc to execute the 
realm.writeCopyToPath( path, encryptionKey: getKey())
operation。
",github2016a,jpsim
2837,2015-11-11 10:57:25,"@codesourse Can you please specific how error are you getting? And could you show the data that you'll sort and results?
",kishikawakatsumi,codesourse
2835,2015-11-11 14:59:24,"thanks，@mrackwitz。
I,have already compressed the file before encrypting. i think the only way is,to encrypt on the app's first run, fetching realm file without encryption from a zip with password. when finish,delete the zip file and the temp realm file. but there is still some risk before deleting the temp realm file. the data is not safe until the encryption finished.
is there some tip to solve this issue? thanks
",github2016a,mrackwitz
2834,2015-11-11 01:26:06,"Thanks @samritchie!
",jpsim,samritchie
2832,2015-11-11 10:38:25,"@tsheaff Thank you for reporting this! I've fixed and deployed that page. Could you please check it?
",kishikawakatsumi,tsheaff
2832,2015-11-11 20:16:04,"Yes it's now working thanks @kishikawakatsumi 
",tsheaff,kishikawakatsumi
2830,2015-11-11 15:53:46,"@jpsim You are right, it is. I am getting it on many unrelated objects, however - and `handleExternalCommit` is a private selector within Realm. 

<img width=""751"" alt=""screen shot 2015-11-11 at 7 46 23 am"" src=""https://cloud.githubusercontent.com/assets/75236/11095128/57b6bd9a-8848-11e5-829e-92040e1f5d82.png"">

My gut says it's a memory management issue, but I can't put my finger on what's causing it since the code that invokes `handleExternalCommit` isn't publicly available.
",eskerber,jpsim
2830,2015-11-11 18:36:15,"@eskerber can you share the source for this app? You can email it privately to help@realm.io if you prefer. It would help if I could dig through it to investigate how this could be happening.

I'd look at your Core Data & Realm models, and other CD/Realm code that may be interacting with each other.
",jpsim,eskerber
2830,2015-12-15 15:43:42,"@jpsim Thanks for the update, and thanks @pawelkata for being able to at least reproduce it (we only know it from thousands of crash logs across millions of sessions)!

Looking forward to .97
",eskerber,jpsim
2830,2015-12-15 15:43:42,"@jpsim Thanks for the update, and thanks @pawelkata for being able to at least reproduce it (we only know it from thousands of crash logs across millions of sessions)!

Looking forward to .97
",eskerber,pawelkata
2830,2016-01-26 14:55:35,"@jpsim We just hit our latest version on the app store with Realm .97. Sad to say the external selector crash still exists for us :/

Did you say that RLMNotifier was updated or removed? We're still seeing it in our callstacks.
- **Edit**:

I actually feel like I'm going crazy. I don't see RLMNotifier in the symbol dump from the version we just released but I'm still seeing it in our call stacks. I'll follow up if I figure out the gap.
- **Edit2**:

Confirmed we had an old version sitting in our framework search paths, even though we were building against .97. Boy am I happy with myself :)
",eskerber,jpsim
2830,2016-01-26 20:28:02,"Ah, thanks for keeping us posted on this @eskerber!
",jpsim,eskerber
2827,2015-11-12 04:49:05,"Thanks for the bug report, @Edmundas. We always love to see reproducible test cases!

Your test case reveals that there is some logic that's super-linear in the number of live `Object` instances that have `List` properties. I'll see what we can do to improve that.
",bdash,Edmundas
2825,2015-11-11 01:49:48,"@mrackwitz after updating to the lastest version, it fix my problem. thanks.
",yuldong,mrackwitz
2824,2015-11-10 03:34:46,"Hi @GreyEcologist! Thanks for the issue!

It sounds like you're overcomplicating the situation a bit more than you probably need to! It's not possible to create race conditions directly with Realm. When you open up a write transaction on one thread, it blocks the write transactions on all of the other threads until it's finished. Read transactions work regardless, with any new values being made available on the next iteration of the app's run loop.

My recommendation would be to remove all of that NSCopying code, and see how your app goes without it. It should just work. :)

Let us know how you go!
",TimOliver,GreyEcologist
2821,2015-11-23 16:46:42,"Thanks for reporting that. I'll close this issue on base of that feedback.
@hanhailong: If that problem should still persist for you though, please feel free to come back here.
",mrackwitz,hanhailong
2820,2015-11-10 04:20:24,"@jpsim you're right, the data from server isn't parsed to correct format (XCommodity).
",yuldong,jpsim
2819,2015-12-10 08:21:29,"@nishitsplashmath 

Hi there! What are you trying to do exactly? If you just want to pass an object between threads, it's easier to simply save it to a `Realm` and then re-fetch it on the new thread.

If you want to perform a shallow copy to an unpersisted `RLMObject` instance, I think it may be necessary to do that manually.
",TimOliver,nishitsplashmath
2816,2015-11-12 04:45:59,"Hi @xxtesaxx! Sorry about the delay in replying.

I just downloaded your app and built it on my Mac (Retina MacBook Pro, running the latest public release of OS X 10.11) and (I really hate to say this), it runs completely fine for me. I copied and pasted your sample text multiple times into both the header and footer views of the Generator tab, and then confirmed in Realm Browser that the text was properly being written to the Realm file on disk.

Can you please confirm with me which version of Realm you were using for this, as well as which version of OS X you're running?

Thanks!
",TimOliver,xxtesaxx
2816,2015-12-15 01:33:59,"@xxtesaxx I'm sorry this seems to never have been resolved for you. As far as I can tell, we weren't able to reproduce the issue from the code & steps you provided. Could you please try following those steps closely yourself to confirm that it's still an issue? Thanks!
",jpsim,xxtesaxx
2816,2015-12-15 08:58:42,"@xxtesaxx Oops. Sorry for not following this up!

I had another play with this in Realm Browser today, but it was still working fine for me (On a side-note, I uncovered a bug in Realm Browser due to this. So thanks a lot for that! :) )

If you're still experiencing this issue, can you please provide as detailed reproduction steps as you can?

Thanks a lot!
",TimOliver,xxtesaxx
2816,2016-01-05 19:59:48,"Closing because we haven't heard back from @xxtesaxx in a while.
",jpsim,xxtesaxx
2816,2016-01-07 02:12:23,"I think closing it is fine since nobody else could reproduce it. maybe it
was a bug only on my system due to something else than realm

2016-01-06 4:00 GMT+08:00 JP Simard notifications@github.com:

> Closing because we haven't heard back from @xxtesaxx
> https://github.com/xxtesaxx in a while.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/2816#issuecomment-169113358.
",xxtesaxx,xxtesaxx
2815,2015-11-11 19:23:11,"@jpsim can you clarify this in the doc writeups as well?  I was lead astray by a comment in the example code to believe that Realm auto-ignored all computed properties (not just computed properties that were objective c types).

Specifically talking about this code segment:



Is that comment inaccurate/incomplete and computed Objc type properties are automatically ignored?

As an aside, the error coming out of the Realm system was a little unhelpful.  I had to put a break point in to figure out which property in particular was sending this error.
",tom-sparo,jpsim
2815,2015-11-11 19:33:14,"I see how that could be confusing. I guess I just wouldn't refer to a property with a custom setter as a ""computed property"", which I only took to mean ""properties whose getters return a value computed from other values"".

I just updated the comment wording to say ""read-only properties are automatically ignored"". It should take 4-5 minutes to be updated on the live site.

Thanks for the tip @owenzhao and @tom-sparo.
",jpsim,owenzhao
2815,2015-11-11 19:33:14,"I see how that could be confusing. I guess I just wouldn't refer to a property with a custom setter as a ""computed property"", which I only took to mean ""properties whose getters return a value computed from other values"".

I just updated the comment wording to say ""read-only properties are automatically ignored"". It should take 4-5 minutes to be updated on the live site.

Thanks for the tip @owenzhao and @tom-sparo.
",jpsim,tom-sparo
2814,2015-11-19 01:25:53,"@jpsim the to-one relation example in the latest swift docs states `// Can be optional`, which is quite confusing. It would be worth updating the docs to express that optionals are required (and implicitly unwrapped optionals are not tolerated). 
",kharmabum,jpsim
2814,2015-11-22 04:57:37,"@i-schuetz did you add `myField` as an ignored property? Further if you expect `myField` to have a property (which you set in it's initializer) than I would return `get { return myField_! }`.
",kharmabum,i-schuetz
2814,2015-11-22 15:04:12,"@kharmabum oh right, declaring it as an ignored property would solve the first problem, thanks. About the implicitly unwrapped optional I just tend to avoid them, it shouldn't make a difference concerning the last issue...
",i-schuetz,kharmabum
2814,2015-12-15 01:42:11,"@kharmabum you're right that the ""can be optional"" comment was unclear because it was next to a to-one relationship. We've since changed that to say ""Properties can be optional"". In the [""Model->Relationships""](https://realm.io/docs/swift/latest/#to-one-relationships) section of the docs, we now stated that ""to-one relationships must be optional"", so hopefully this makes it clear to users what does and does not have flexible optionality.

> This is a bit inconvenient, it was was better in previous versions with the default value...

I'm sorry for the inconvenience, although that situation was inconvenient for others who did want that relationship to be optional.

If you're certain that you'll always have a value for that relationship, you can represent it as an implicitly unwrapped optional, as @kharmabum suggested. Although if you ever use a Realm file that matches your model but was created in a different environment, this could crash if there's a `nil` relationship.

---

I'm closing this issue now because I think we've sufficiently covered this particular topic here, but if you'd like to continue the conversation, feel free to reopen.
",jpsim,kharmabum
2813,2015-12-15 01:05:10,"@tspecht I believe this was fixed by #2954, which is available in `master`. Could you please integrate that version of Realm into your app and reopen this issue if this occurs again?
",jpsim,tspecht
2811,2015-11-06 05:24:25,"Thanks for the PR, @samritchie! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,samritchie
2811,2015-11-06 18:10:02,"Thanks @samritchie!
",jpsim,samritchie
2810,2015-11-07 08:32:05,"@mrackwitz thank you for the example, i'll check my code again, carefully.
",yuldong,mrackwitz
2808,2015-11-20 21:59:43,"@bdash `examples/installation/build.sh` now targets the last official release when generating the Cartfile if the `REALM_BUILD_USING_LATEST_RELEASE` environment variable is set.

This will allow us to test binary Carthage releases as part of the `release-cocoa` job. I'll implement that job in Jenkins once this is merged.
",jpsim,bdash
2807,2015-11-06 01:04:22,"Doh! Totally missed that configuration parameter. Thanks! @tgoyne 
",mowens,tgoyne
2806,2015-11-06 00:25:20,"Thanks for reporting this, @huy-le. This could take some time to debug. Do you have any idea why this could be happening?
",jpsim,huy-le
2802,2015-11-06 00:23:22,"Hi @jaydev, that's a great question! There's nothing currently built into Realm that would allow converting a primary/foreign key mapping into a proper relationship.

How about doing something like this?



I'd also recommend that you use [inverse relationships](https://realm.io/docs/swift/latest/#inverse-relationships) to avoid doing the double-bookkeeping you're currently doing (setting both `author.profile` and `profile.author`).
",jpsim,jaydev
2801,2015-11-11 02:32:59,"Thanks for your critical feedback, @fluidsonic. We value your opinion about our Swift support and integration, and I hope @tgoyne's explanations of the reasons why Realm Swift works the way it does was useful to you.

We hope to address some of those issues by contributing to Swift on a language level when outside contributions are possible, but until then, we have to target the language as it is today.

If you have any further questions or points of feedback, please don't hesitate to let us know.
",jpsim,tgoyne
2801,2015-11-11 02:32:59,"Thanks for your critical feedback, @fluidsonic. We value your opinion about our Swift support and integration, and I hope @tgoyne's explanations of the reasons why Realm Swift works the way it does was useful to you.

We hope to address some of those issues by contributing to Swift on a language level when outside contributions are possible, but until then, we have to target the language as it is today.

If you have any further questions or points of feedback, please don't hesitate to let us know.
",jpsim,fluidsonic
2800,2015-11-09 23:00:28,"You've improved this a lot, @TimOliver! Thanks. This looks good to me. Further thoughts @bdash?
",jpsim,TimOliver
2800,2015-11-20 07:02:51,"Alrighty! If everyone's cool with this, I'll merge it in now and then update the Browser's podfile to stop pointing to this branch.

I agree with @tgoyne in that it might be best to have a test in place, if only to simply ensure this doesn't cause any issues down the line. But I'm not sure how we can keep an 'intentionally old' Realm file around in the CI in order to keep checking this, so it might be something I'll look at later, and put in a separate PR.

Thanks!
",TimOliver,tgoyne
2798,2015-11-20 18:27:41,"@gadu we've added a sentence about forward-declaring model classes:

> The `RLM_ARRAY_TYPE` macro creates an protocol to enable the use of the `RLMArray<Dog>` syntax. You may have to forward-declare the model class if the macro is not placed at the bottom of the model interface.
",jpsim,gadu
2796,2015-11-05 19:16:20,"Thanks @kishikawakatsumi 
",jpsim,kishikawakatsumi
2795,2015-11-05 08:21:09,"Hi @crsantos!

Sorry to hear that this is happening! Hmm, I'm not too sure if I can diagnose what's going on here off just this information. Are you sure you can't see any pattern to when this error appears, such as straight after a write transaction, or any activity on a background thread?

A couple things I might recommend to test out.
- Just to be sure, try calling `refresh` on the default Realm before you make that query.
- Unless there's a reason for that, try and simplify the query as well (You should be able to make it simply `valid == YES`)

If all else fails, would you be willing to send us that app so we can analyse what's going on ourselves?

Thanks a lot!
",TimOliver,crsantos
2795,2015-11-30 12:21:16,"I am experiencing something similar to @crsantos.

I am implementing a chat view backed by an `UICollectionView`. I am having a crash whenever users send a message and scroll on the collectionview. I am also using @bigfish24's FRC.

The crash is due to the FRC not returning objects, and is instead returning nil. But I am positive that it can't return nil for those index paths.
",beloso,crsantos
2795,2015-12-02 00:52:40,"@crsantos and @TiagoVeloso any chance you can share your source code privately to help figure out the issue?
",bigfish24,crsantos
2795,2015-12-04 00:45:36,"@crsantos I had a bit more time to think about this, but don't really have any good ideas. I wanted though to clarify your comment:

> Scheduled a query for retrieving all my objects (on Main Thread)

What do you mean by this? When you perform a query with Realm, the results object will not have evaluated the query until you request an object at an index in the result collection or the count of the collection. Is that what you mean, in that you create the result object, but you haven't yet acted on the object? If not, I am confused because Realm doesn't yet offer async queries.

> On the exact moment before the query is triggered, I start (quickly) scrolling my UICollectionView (it spawns fetch requests to realm on the same (Main) thread I suppose)

Second, when you scroll a `UICollectionView` that is backed by RBQFRC, it should not spawn any fetch requests, instead the RBQFRC will simply retrieve the objects for the various indexPaths needed to retrieve the data for the cells displayed.

RBQFRC only updates when you manually call `performFetch` or if you post a notification using the manual or helper notification methods on `RBQRealmNotificationManager`. Also, whatever `RBQFetchRequest` you initialized RBQFRC with doesn't change until you call `updateFetchRequest:`.

So my best guess based on this confusion is that you might be using RBQFRC incorrectly, but honestly that's just a shot in the dark until I can see more of the code...
",bigfish24,crsantos
2795,2015-12-04 00:48:07,"@crsantos and @TiagoVeloso I would suggest you look at the implementation for [ABFRealmGridController](https://github.com/bigfish24/ABFRealmGridController) because this is a `UICollectionViewController` subclass that is using RBQFRC as its backing data source. It automatically updates based on results from the New York Times API and animates the changes... I have never encountered the scenario you describe.
",bigfish24,crsantos
2795,2015-12-10 17:44:49,"@bigfish24 I've managed to replicate the issue on [ABFRealmGridController](https://github.com/bigfish24/ABFRealmGridController) project example.
Just after clicking the **Reload** button, I started scrolling (vigorously) the collectionView and with a breakpoint on your `- (id)objectAtIndexPath:(NSIndexPath *)indexPath` to know when the object is `nil`.

Please, check this screenshot:
![screenshot 2015-12-10 17 36 59](https://cloud.githubusercontent.com/assets/25558/11723229/2937da2e-9f65-11e5-83ba-603d3b6f8772.png)

This is the exact problem that we suffer on our project, check the image below, data is missing on the UI because the FRC failed to obtain the object for that indexPath:
![screen shot 2015-12-10 at 17 50 09](https://cloud.githubusercontent.com/assets/25558/11723566/00bbfd76-9f67-11e5-8d68-f39d8dcab36a.png)

I don't know if this is a Realm main thread query problem, that's why I kept the thread on this repo.
Please, I would like to help fixing this one, guide me if you need some extra info or some debugging.
",crsantos,bigfish24
2795,2015-12-10 19:13:04,"@crsantos thanks for digging into this! I will attempt to reproduce and see if I can figure out what is going on.
",bigfish24,crsantos
2795,2015-12-10 21:20:38,"First of all @bigfish24: thank you so much  for fixing this in such a quick timeframe.

Thumbs up to your wonderful and detailed explanation of the issue. 
Now I can totally understand that the ""myth"" that UI animations rules (NSEventTrackingRunLoopMode) over other resources is true. 

And thanks again for pointing that excelent reading about IPC on @realm. Excelent piece of engineering!

I hope this fix will also help many more users as it helps us.

Cheers,

Carlos

> On 10 Dec 2015, at 19:56, Adam Fish notifications@github.com wrote:
> 
> The issue was related to how Realm notifies other Realm instances to update. When you commit a write transaction on a background thread, a notification is then sent to other Realm instances on other threads (this works through a named pipe) to refresh to the latest version of the DB that includes the recently committed transaction. The problem though is that notification is processed on the receiving thread only during the default run loop mode. When you are scrolling, the main thread will run in NSEventTrackingRunLoopMode for that pass of the run loop. This means that Realm's notification will not be processed until the thread is back in default mode.
> 
> The result of this means that RBQFetchedResultsController should simply manually call refresh on the Realm that contains the objects backed by the FRC before attempting to retrieve it. This alleviates the assumption that the notification to trigger the refresh has been processed before object/safeObjectAtIndexPath: is called.
> 
> I can confirm this commit fixes the problem: Roobiq/RBQFetchedResultsController@03de5b6
> 
> —
> Reply to this email directly or view it on GitHub.
",crsantos,bigfish24
2795,2015-12-11 23:13:51,"@crsantos happy I could help! Definitely enjoy working along side @tgoyne and others on the team that deserve the credit for teaching me about IPC and other topics.
",bigfish24,crsantos
2793,2015-11-04 06:04:24,"I'm impressed. This looks really great, @bdash. Thanks for the detailed commit messages along the way too!
",jpsim,bdash
2793,2015-11-04 17:20:12,"@bdash @jpsim Carthage still fails to build this branch. Because Carthage cannot support building static framework.




",kishikawakatsumi,jpsim
2793,2015-11-04 17:20:12,"@bdash @jpsim Carthage still fails to build this branch. Because Carthage cannot support building static framework.




",kishikawakatsumi,bdash
2793,2015-11-04 18:34:46,"@kishikawakatsumi, thanks for testing that. I'd tested Carthage building for Mac, but that skips the static framework due to the target not supporting OS X. I pushed 2f117e0601aa837cbbad340114065c4119c316b8 which should fix building for iOS with Carthage.
",bdash,kishikawakatsumi
2793,2015-11-04 19:12:25,"@bdash Awesome. I confirmed to build succeeded.
",kishikawakatsumi,bdash
2792,2015-11-04 18:20:51,"Thanks @jpsim! Honestly, I am more concerned about other Realm users running into this than my specific use case. I've already worked around it.
",Mazyod,jpsim
2790,2015-11-04 05:32:32,"Hi @rudywen!

Wow, that's incredibly weird to see! What's going on here exactly? You've got one thread modifying objects already added to a Realm, and another one adding all new objects to the default Realm?

Either way, that shouldn't be happening. When a write transaction is open in Realm, all other write transactions are blocked, so there _shouldn't_ be any direct conflicts arising like this.

If you know exactly where the crashes are occurring, are you able to post some sample code for us to check out?

Thanks!
",TimOliver,rudywen
2790,2015-11-04 18:27:43,"@TimOliver 

This crash also seems to occur when there are no other write transactions....

http://crashes.to/s/e4c3aaf97d6


",rudywen,TimOliver
2790,2015-11-12 04:27:05,"Hi @rudywen!

Are you sure you can't share the code? You can send it to us privately if you'd prefer. If there's a corporate reason why you can't share it, that's fine then.

Hmm... actually. Maybe one thing you can try: remove the GCD braces and see what happens when you execute everything on the main queue.

Something I just noticed is you're passing that array `users` across a thread, and if those users are comprised of `RLMObject` subclasses, that would certainly be causing an issue.

Let me know how you go!
",TimOliver,rudywen
2790,2015-11-12 18:48:22,"@TimOliver 

At this time, I'm not able to share the code base since it belongs to a private company.

I'll try running the realm updates on the main queue and report back.

The `users` array does not contain `RLMObject` subclasses, it consists of `PFUser` (Parse user objects)
",rudywen,TimOliver
2790,2015-11-30 22:22:29,"@TimOliver 

One thing I noticed when tracing the call stack is that the `RLMCreateOrGetRowForObject` function accesses the primary key 

`RLMProperty *primaryProperty = schema.primaryKeyProperty;`

What happens if there is no primary key set?
",rudywen,TimOliver
2790,2015-11-30 23:09:11,"@TimOliver 

This crash doesn't occur with Realm 0.95.3.  As you know, now I can't downgrade my current users from 0.96.2 to 0.95.3 with the new Realm file format changes.
",rudywen,TimOliver
2790,2015-12-02 00:57:36,"@rudywen, are you able to reproduce this crash on demand, or have you only seen it in Crashlytics reports?
",bdash,rudywen
2790,2015-12-02 01:26:42,"@bdash, I can not reproduce the crash consistently, but I have been able to catch it when attached to xcode
",rudywen,bdash
2790,2015-12-02 05:00:34,"Hi @rudywen! You're in good hands with @bdash helping to track down the cause of the crash in our code, but I'd like to keep checking to see if there's something in your code that might somehow be causing it, making it easier to mitigate.

Just to confirm, `PFUser` is a Parse subclass and `FLPerson` is a Realm subclass; is that correct? Also, what type of class is `FLUser` then?

How much of the implementation code for `FLPerson` are you able to share? I'm curious to see what happens in the `[FLPerson initNewContact:]` method call.

Thanks a lot!
",TimOliver,rudywen
2790,2015-12-02 05:00:34,"Hi @rudywen! You're in good hands with @bdash helping to track down the cause of the crash in our code, but I'd like to keep checking to see if there's something in your code that might somehow be causing it, making it easier to mitigate.

Just to confirm, `PFUser` is a Parse subclass and `FLPerson` is a Realm subclass; is that correct? Also, what type of class is `FLUser` then?

How much of the implementation code for `FLPerson` are you able to share? I'm curious to see what happens in the `[FLPerson initNewContact:]` method call.

Thanks a lot!
",TimOliver,bdash
2790,2015-12-02 20:10:51,"@TimOliver `PFUser` is a Parse subclass, `FLPerson` is a Realm subclass, `FLUser` is custom class that contains a `PFUser`.  


",rudywen,TimOliver
2790,2015-12-07 18:31:47,"@bdash is there anything I can do to help debug this issue?  I'm getting a lot of crash reports with the same reason. 
",rudywen,bdash
2790,2015-12-14 07:49:28,"@bdash 

I've been able to narrow down the crash, it looks like my entire table is being dropped.  I put a breakpoint in deleteAllObjects but it never gets to this point.  Is there any other way a Realm table could be dropped without explicitly deleting objects?



When I step through the debug log messages, I get to when trying to access `_realm.configuration`



I'm setting the schema version in my `application:didFinishLaunchingWithOptions:`


",rudywen,bdash
2790,2015-12-15 17:54:40,"@bdash thanks for all of your help on this issue!
",rudywen,bdash
2789,2015-11-05 17:51:41,"To elaborate on what @tgoyne just said, what you want is likely the following:



or if you don't need to store the predicate in an intermediate variable:


",jpsim,tgoyne
2789,2015-11-12 04:12:42,"Hi @meap! Did that fix your issue? Please let us know if you need any additional clarification with Realm's handling of `NSPredicate` queries.

I'm closing this issue, but if you do require additional follow-up, feel free to re-open it! :)
",TimOliver,meap
2788,2015-11-06 02:55:15,"@mrackwitz  3Q very much.
",yuldong,mrackwitz
2787,2015-11-03 04:41:53,"Thanks for the PR, @prises0221! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,prises0221
2787,2015-11-05 19:08:42,"Thanks for the fix, @prises0221.
",jpsim,prises0221
2786,2015-11-05 08:18:08,"@mrackwitz thanks a lot, i just focus on the class of my own, and forget that RLMRealm also has method to do such thing. thank you very much.
",yuldong,mrackwitz
2784,2015-11-03 01:38:35,"Huh, we could never get this to compile under Xcode 6.x. I just re-ran this on CI, if it passes :+1:.

This should be accompanied by a changelog entry though. Nice work @kishikawakatsumi!
",jpsim,kishikawakatsumi
2782,2015-11-03 00:27:22,"@astigsen 

> The object gets deleted, so the query is not really valid anymore

If there are three or more objects, even if you delete the objects without any relation to the query, the result will be wrong.

For example, add `person3` to above code:



Query for `person3` object,



Then delete `person1` object, the results will be empty unexpectedly. Because the row index has shifted.


",kishikawakatsumi,astigsen
2777,2015-11-02 10:40:29,"@orkenstein It's intended behavior. Realm does not copy any data until actually access the properties. When access the properties, Realm fetch the data directly from its file. So Realm does not store any data to its ivar. Additionally, Realm object will change to another class at the moment it is persisted. That's why you cannot see any values via the debugger and nil out all value after committed.

In Objective-C, we provide LLDB script to fix this behavior, however doesn't  for Swift unfortunately.
See also https://realm.io/docs/objc/latest/#debugging
",kishikawakatsumi,orkenstein
2776,2015-11-12 03:59:30,"Hi @codesourse! 

Sorry, but we're going to need more information from you in order to help you here. 
I'm going to close this issue for now, but please feel free to re-open it if you need more help. :)
",TimOliver,codesourse
2774,2016-04-20 20:48:33,"@ahanmal posting on old issues won't help. Please file a new issue with full reproduction steps and we'll take the time needed to identify what's wrong in either your configuration or if there's a bug in Realm. Thanks!
",jpsim,ahanmal
2774,2016-04-20 21:41:12,"@jpsim Thanks - I'll open another issue.
",ahanmal,jpsim
2773,2015-11-06 16:50:15,"Hi @xxtesaxx!

I actually had a VERY similar question to this one a while back (But for an iOS app), so hopefully I can help.

You are correct. On both iOS and OS X, if you let the application automatically handle the creation and display of an `NSWindowController` / `NSViewController` from a storyboard, the controller will be created and `viewDidLoad` will be called before `[NSApplication applicationDidFinishLaunching:]` is called.

Our previous solution to the iOS problem was straightforward: don't let the system handle the controller instantiation; do it yourself in code, at the end of the `'applicationDidFinishLaunching` method, _after_ you've performed your Realm migration. That being said, this seems to be a bit trickier on OS X as it now relies on storyboards to a much heavier degree than iOS.

All you need to do inside the storyboard is find the initial `NSWindowController` and uncheck its `Is Initial Controller` checkbox. 

Then, in your app delegate, manually present the window controller using something like the below code



Hopefully that'll work. Let me know how you go!
",TimOliver,xxtesaxx
2773,2015-11-12 03:49:42,"Hi @xxtesaxx! Did that work in the end? Were you able to properly line up Realm's migration before the view controller loaded in the end?

I'm going to close this issue now. If you require any follow-up, feel free to open this issue again. :)
",TimOliver,xxtesaxx
2768,2015-10-29 22:12:51,"Thanks for the PR, @MarkVillacampa! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,MarkVillacampa
2766,2015-11-05 23:50:27,"No specific reason other than we haven't gone through the trouble of automating the generation & copying of dSYM files. I'll update this issue to identify this as a feature request that we can track.

We'd appreciate a pull request to support this, @solidcell!
",jpsim,solidcell
2764,2015-11-05 20:07:49,"As @tgoyne mentioned, to force a Realm to refresh before it receives the autorefresh signal, call `-[RLMRealm refresh]`. See our docs on [Seeing Changes From Other Threads](https://realm.io/docs/objc/latest/#seeing-changes-from-other-threads) for more information.
",jpsim,tgoyne
2761,2015-11-06 00:08:54,"@mrackwitz could this be due to the CocoaPods script bug you mentioned in another issue about not supporting paths with spaces? This project is in a path containing `iOS Projects`.
",jpsim,mrackwitz
2761,2015-11-06 06:30:35,"@jpsim: This could be indeed the case. Thanks for taking a second look, I was a bit stumped here. But took a second look now and tried to reproduce it, but no luck with that.

@jgonfer: Did you checked manually whether the referenced file exists? If not, something must be really went wrong with your CocoaPods integration. Could you in that case report the output of `tree Pods/Target Support Files` in your project directory? Additionally you could try to use [`cocoapods-deintegrate`](https://github.com/kylef/cocoapods-deintegrate) to reset your integration to a clean state and then run `pod install` again.
",mrackwitz,jpsim
2761,2015-11-06 06:30:35,"@jpsim: This could be indeed the case. Thanks for taking a second look, I was a bit stumped here. But took a second look now and tried to reproduce it, but no luck with that.

@jgonfer: Did you checked manually whether the referenced file exists? If not, something must be really went wrong with your CocoaPods integration. Could you in that case report the output of `tree Pods/Target Support Files` in your project directory? Additionally you could try to use [`cocoapods-deintegrate`](https://github.com/kylef/cocoapods-deintegrate) to reset your integration to a clean state and then run `pod install` again.
",mrackwitz,jgonfer
2760,2015-11-05 23:24:02,"@mnshah you seem to be hitting an entirely different problem than what's described in this issue. In the future, please post new issues as new issues, it'll help us triage and get back to you sooner.

> This happens when we are making some fairly innocuous queries to a realm. The crash occurs when checking the thread that Realm is using:

The complexity of the query has little bearing on which thread you run it from. To enforce thread safety, Realm operations are confined to the thread on which a given object/results/realm was created. In your case, you seem to be accessing one of those on the wrong thread, so Realm throws an exception.

> The crash happens at the if statement. The logs do not show it throwing the RLMException, rather it shows a bad memory access. This is quite concerning, is 0.96 supposed to be a stable release? I have not gotten it to work in the simplest of use cases.

This can happen when throwing exceptions. I suggest you enable a symbolic breakpoint for all exceptions in Xcode to help you debug where you may be accessing Realm from the wrong thread.
",jpsim,mnshah
2760,2015-11-05 23:25:14,"@matarali I'm closing this issue as this is a CocoaPods bug, as mentioned by @mrackwitz. The steps posted in https://github.com/realm/realm-cocoa/issues/2760#issuecomment-152528126 should help work around that issue until it can be fixed in CocoaPods itself.
",jpsim,mrackwitz
2760,2015-11-05 23:25:14,"@matarali I'm closing this issue as this is a CocoaPods bug, as mentioned by @mrackwitz. The steps posted in https://github.com/realm/realm-cocoa/issues/2760#issuecomment-152528126 should help work around that issue until it can be fixed in CocoaPods itself.
",jpsim,matarali
2759,2015-11-03 18:56:49,"@jpsim The size of each symbol files is 350KB for Realm and 150KB for RealmSwift.
For iOS has two architecture(armv7, arm64) and for OS X has no bitcode.
So total size of raw files is around 1.4MB. The symbol files are plain text files. So well compressed.

Compressed total size is around 200KB.
",kishikawakatsumi,jpsim
2759,2015-11-05 19:23:19,"@kishikawakatsumi feel free to merge this once you've confirmed that my latest change is correct.
",jpsim,kishikawakatsumi
2759,2015-11-09 04:49:53,"@jpsim Thanks. I've confirmed/tested to work if other frameworks contain `bcsymbolmap` files in its bundle.
",kishikawakatsumi,jpsim
2756,2015-10-30 20:54:20,"Thanks for catching that, @tgoyne. That should be fixed by the latest commits. I'm surprised CI doesn't test the dynamic framework on-device at all.
",bdash,tgoyne
2756,2015-11-02 22:45:32,"An entry in the changelog detailing the changes to the release zip packages would be useful here I think.

That could be considered a breaking change, even.

Otherwise, OMG OMG OMG, this is such a welcomed change! Thanks @bdash 
",jpsim,bdash
2756,2015-11-02 22:50:51,"@jpsim, what changes to the release zip packages are you referring to?
",bdash,jpsim
2755,2015-10-28 16:27:39,"What @tom-sparo suggests here, would not work:

> you probably want to make them Realm objects that all inherit from a custom base Realm object type so that you can store the base type for the List.

That's because polymorphism isn't supported yet. You can just store objects of a specific type.
You could follow though the second suggestion of having dedicated lists for each enumeration case.
Alternatively you can also introduce a wrapper type, which can bind all sorts of associated values and have your computed property on this type:


",mrackwitz,tom-sparo
2755,2015-10-29 00:47:21,"thanks @mrackwitz 
",RuiAAPeres,mrackwitz
2754,2015-11-02 13:03:04,"@bigfish24 Yes, I just checked, they belong to a realm and an objectSchema, they even appear on Realm Browser.
",allbto,bigfish24
2754,2015-11-06 23:20:57,"@allbto could you provide a sample project? The reason being is that internally we should be handling nested relationships. The process should be working like this:
1. Swift `create()`
2. ObjC++ `RLMCreateObjectInRealmWithValue`
3. ObjC++ `RLMDynamicSet` when setting the property values
4. ObjC++ `RLMGetLinkedObjectForValue` to retrieve/create the linked object(s) for the property
5. ObjC++ `RLMCreateObjectInRealmWithValue` to create the linked object(s) for the property

If you can't provide any code, you can verify this path is occurring from the `create()` call.
",bigfish24,allbto
2754,2015-11-12 04:09:47,"Hi @allbto!

Just touching base on this issue; are you able to provide us with a sample project to test this functionality?

Thanks! :)
",TimOliver,allbto
2754,2015-11-12 17:40:34,"@smpanaro thanks for sending us a repro project, it really helps us understand!

I think your case is very different than @allbto's issue, since for you, it's writing a copy of the Realm file that causes a `RealmOptional` property to lose its value (the `steps` relationship of our `Task` objects are preserved in the copy). I'm investigating this further to see if there are situations in which `Realm.writeCopyToPath(...)` ignores data from optional properties.
",jpsim,allbto
2754,2015-11-12 17:40:34,"@smpanaro thanks for sending us a repro project, it really helps us understand!

I think your case is very different than @allbto's issue, since for you, it's writing a copy of the Realm file that causes a `RealmOptional` property to lose its value (the `steps` relationship of our `Task` objects are preserved in the copy). I'm investigating this further to see if there are situations in which `Realm.writeCopyToPath(...)` ignores data from optional properties.
",jpsim,smpanaro
2754,2015-11-19 02:01:25,"Hi @jpsim I was wondering if you had any update on my problem. Would it be useful to open a separate issue?
",smpanaro,jpsim
2754,2015-11-24 01:35:00,"@jpsim @bigfish24 - Have you had a chance to look at my example? Optional support is awesome, but this bug pretty much negates it. (Unless I'm doing something bad, which would be great to know.)
",smpanaro,jpsim
2754,2015-11-24 01:35:00,"@jpsim @bigfish24 - Have you had a chance to look at my example? Optional support is awesome, but this bug pretty much negates it. (Unless I'm doing something bad, which would be great to know.)
",smpanaro,bigfish24
2754,2015-11-24 16:26:59,"@bigfish24 @TimOliver Here is a [test project](https://drive.google.com/file/d/0BxLVPjjzgHzUUmFXWGRaNUJrMWM/view?usp=sharing)

To make it simple here is what I do:



And the output:



XCode 7.1.1 / Swift 2.1 / Realm 0.96.2
",allbto,TimOliver
2754,2015-11-24 16:26:59,"@bigfish24 @TimOliver Here is a [test project](https://drive.google.com/file/d/0BxLVPjjzgHzUUmFXWGRaNUJrMWM/view?usp=sharing)

To make it simple here is what I do:



And the output:



XCode 7.1.1 / Swift 2.1 / Realm 0.96.2
",allbto,bigfish24
2754,2015-11-25 00:15:24,"@allbto thanks for the test project! I identified the issue. This PR has the fix: https://github.com/realm/realm-cocoa/pull/2901
",bigfish24,allbto
2754,2015-11-25 12:48:55,"@bigfish24 Awesome, I'm looking forward for it to be fixed :)
",allbto,bigfish24
2754,2015-11-25 21:08:31,"@smpanaro can you create a new issue for your case? It is different than @allbto and I would like to close this thread and continue work on your issue elsewhere. Thanks!
",bigfish24,allbto
2754,2015-11-25 21:08:31,"@smpanaro can you create a new issue for your case? It is different than @allbto and I would like to close this thread and continue work on your issue elsewhere. Thanks!
",bigfish24,smpanaro
2754,2015-11-25 22:28:32,"@bigfish24 I've opened #2905 for my case.
",smpanaro,bigfish24
2754,2015-11-25 22:53:11,"@smpanaro thanks will move over to that and will close this now. cc @jpsim 
",bigfish24,jpsim
2754,2015-11-25 22:53:11,"@smpanaro thanks will move over to that and will close this now. cc @jpsim 
",bigfish24,smpanaro
2751,2015-10-27 06:00:22,"@bdash Thank you for very quick reply. :pray: 

I have just succeeded to build with Cartfile :



I know that I should use the latest version of Realm, but I cannot upgrade to Xcode 7.1 immediately (but I will in a month).
I will use older version of Realm till I upgrade Xcode.

Thank you very much for your solving my issue! 
",hiragram,bdash
2745,2015-10-26 01:04:39,"@shmakovigor Thank you for reporting this! You're right. This is a bug and fixed at https://github.com/realm/realm-cocoa/pull/2734. 
",kishikawakatsumi,shmakovigor
2744,2015-10-26 01:17:23,"@hengchengfei Because 0.96 has breaking changes. With this release, fields of the types String, Date, and NSData are now nullable by default. It needs a migration step or marked these properties to nonnull in `+requiredProperties`. You can specify that a field cannot be null by overriding `+requiredProperties` class method.

see also:
https://realm.io/news/realm-objc-swift-0.96.0/
",kishikawakatsumi,hengchengfei
2743,2015-11-03 20:11:30,"## Summary of Discussions

As this verification is very specific, we should think of whether we could do that in a more general fashion at a different place. There are different options, which I want to layout here, so that we could decide on whether we settle on one of them or don't do any verification like that at all. It all boils down to enforcing our modified `RLMObject` class contract in differentiation to the expectations given from Foundation/Cocoa/`NSObject`. For all options, it could likely make sense to reduce the performance impact by executing them only in the Debug configuration and so not affecting distributed builds of the user's apps.

### Variant A: Check type on initial / every value access

Instead of relying on KVC directly via `valueForKey:`, we could instead encapsulating retrieving the properties value in a method / function. This could then contain further type verification and assert when the type conflicts with the expectations.

### Variant B: Scan & forbid overwritten alternate KVC accessors

As Realm implements custom accessors on `RLMObject` subclasses, we could just completely forbid users to implement alternate KVC methods. (e.g. `is<Key>`, `get<Key>`, …)

## Questions

/c @jpsim @tgoyne @bdash 
- Do these variants make sense and how I described them? How can they be improved?
- Is there any other variant I may have forgotten here?
",mrackwitz,bdash
2743,2015-11-10 16:27:02,"I'm not super clear on what kind of validation we should be doing, and how to achieve it. Thoughts @tgoyne @bdash?
",jpsim,bdash
2742,2015-10-26 02:39:56,"@kishikawakatsumi why would a `defaultPropertyValues` override an existing property value? The default value should only be called if there isn't something in realm to be used otherwise because Realm doesn't understand nil.
",MikeSilvis,kishikawakatsumi
2742,2015-10-26 02:54:14,"@kishikawakatsumi yes. `defaultValues` in my opinion should not be called basically until we go to save we see the object doesn't exists and then we add them just to ensure things aren't nil. Because if I just do this:



It is going to return nil, not empty string.

Basically what you are implying is I need to always write something like this:



Essentially I am just trying to get around the unnecessary conditional and IMO realm should just see that the property is nil, and not try and set it on an existing object.
",MikeSilvis,kishikawakatsumi
2742,2015-10-26 03:12:48,"@kishikawakatsumi okay. I guess basically i'm asking for just a partial update function. Seems like a pain in the ass to always do the look up / slow, but w/e
",MikeSilvis,kishikawakatsumi
2740,2015-10-27 06:26:07,"@jeffdogfishsoftware Could you please share reproducible sample project or show code snippet around instantiating a Realm?
",kishikawakatsumi,jeffdogfishsoftware
2740,2015-10-29 11:03:29,"@mnshah: Do you see any assert or error message? Or is the further stack trace the same as shown above? Same question here: could you show us how you setup your `RLMRealm.defaultConfiguration` or haven't you touched it at all?
",mrackwitz,mnshah
2740,2015-11-05 23:03:56,"@jeffdogfishsoftware I've reported this to Realm's core database engine team hoping that they can figure this out.

Some steps that would allow us to reproduce this issue on our side would greatly improve the odds of us being able to understand why this is happening and subsequently provide a fix.
",jpsim,jeffdogfishsoftware
2740,2015-11-06 18:42:07,"@jpsim Thanks, I have not been able to repro this personally.  I saw 2 crash reports from two users after my app moved from Realm iOS 0.95.1 to 0.96.0.  These users eventually deleted and reinstalled the app; since then I have not seen any other crash reports.  (Currently using version 0.96.2)  
",jeffdogfishsoftware,jpsim
2738,2015-12-02 03:32:14,"Bump, I've been having the same issue. Crash is identical to the log @joamaki posted.
",ReganBell,joamaki
2738,2015-12-17 08:38:49,"I'm also having this issue with Xcode 7.2 and RealmSwift 0.96.3.

I can't see any material difference between the crash log posted by @bdash and the original log posted by @joamaki (focusing just on the crashed threads).

The crash log I get is slightly different—in particular, the crashed thread is always designated as ""RLMRealm notification listener"", even when there is no code for Realm notification blocks.  Lines 0 to 4 are otherwise identical to the logs posted above.


",jamesk-au,joamaki
2738,2015-12-17 08:38:49,"I'm also having this issue with Xcode 7.2 and RealmSwift 0.96.3.

I can't see any material difference between the crash log posted by @bdash and the original log posted by @joamaki (focusing just on the crashed threads).

The crash log I get is slightly different—in particular, the crashed thread is always designated as ""RLMRealm notification listener"", even when there is no code for Realm notification blocks.  Lines 0 to 4 are otherwise identical to the logs posted above.


",jamesk-au,bdash
2738,2015-12-17 23:27:55,"The logic around notification listeners has changed in 0.97, which was just released today. It's possible that this was resolved in the process. Could one of you please verify this? /cc @joamaki @angerman @ReganBell @jamesk-au 

Thanks!
",jpsim,joamaki
2738,2015-12-17 23:27:55,"The logic around notification listeners has changed in 0.97, which was just released today. It's possible that this was resolved in the process. Could one of you please verify this? /cc @joamaki @angerman @ReganBell @jamesk-au 

Thanks!
",jpsim,angerman
2738,2015-12-17 23:27:55,"The logic around notification listeners has changed in 0.97, which was just released today. It's possible that this was resolved in the process. Could one of you please verify this? /cc @joamaki @angerman @ReganBell @jamesk-au 

Thanks!
",jpsim,ReganBell
2738,2015-12-17 23:27:55,"The logic around notification listeners has changed in 0.97, which was just released today. It's possible that this was resolved in the process. Could one of you please verify this? /cc @joamaki @angerman @ReganBell @jamesk-au 

Thanks!
",jpsim,jamesk-au
2738,2015-12-24 10:15:37,"We are getting the same error as @bdash on our mac app. When running on the iOS version, instruments and Realm are working well together. Is the fix should run well on mac too?
",tbaranes,bdash
2737,2015-10-23 16:55:28,"@saltwat5r Could you please share your model definitions and the code around query?
",kishikawakatsumi,saltwat5r
2737,2015-11-05 19:04:17,"Closing due to inactivity. Will reopen if @saltwat5r can post steps for our to reproduce and troubleshoot.
",jpsim,saltwat5r
2736,2015-10-27 01:38:03,"#2675 was included in 0.96.2, released earlier today. Given @kishikawakatsumi's comments above I'd expect this to be fixed with 0.96.2.
",bdash,kishikawakatsumi
2736,2015-10-28 19:29:48,"@nekonari This issue was fixed in 0.96.2. Could you try first removing cache then re-install like following:



If you don't use a case-sensitive file system, there is a probability that the another problem will happen.
",kishikawakatsumi,nekonari
2736,2015-10-28 20:29:12,"@kishikawakatsumi I'm linking them manually by downloading and adding the pre-built libraries into the project. If there is some cache that stores previous framework files, please let me know :(
",nekonari,kishikawakatsumi
2736,2015-10-28 23:22:45,"> I had Embed Frameworks build phase placed below Run Realm Script build phase, which was again creating a build error.

@nekonari Because `strip-framework.sh` script assumes that the framework is in the app bundle. So the framework should be copied before running `strip-framework.sh`.
",kishikawakatsumi,nekonari
2736,2015-10-28 23:25:40,"@kishikawakatsumi What puzzles me is why Xcode didn't simply replace the cached framework files with the new version..
",nekonari,kishikawakatsumi
2736,2015-11-06 16:18:50,"@nekonari: That might happen especially if you change the way how you integrate stuff, Xcode reasons on base of what it would expect to see with the current setup, if there are built products left from a previous setup and those files wouldn't be created anymore or in a different way, it might happen, that they get stuck. For that reason, I'd generally recommend cleaning the build folder after making changes to the integration.
",mrackwitz,nekonari
2734,2017-02-06 07:32:13,"@kishikawakatsumi I have this kind of property how can i ignore this property
` var photos = Array<RLMFile>()
`
I am ignoring below way 

but didn't ignored #2734",macvinod,kishikawakatsumi
2734,2017-02-06 18:44:35,"@macvinod please open a new issue. Also, `Array` is not an allowed property type for Realm models. See https://realm.io/docs/swift/latest/#models",jpsim,macvinod
2732,2015-10-22 21:08:05,"@mlusas Thank you for reporting this. I've reproduced the same issue. It seems a bug. We'll have a fix out shortly. 
",kishikawakatsumi,mlusas
2732,2015-10-23 02:19:25,"@kishikawakatsumi Wonderful, thank you for the quick response.
",mlusas,kishikawakatsumi
2727,2015-10-23 09:03:13,"@perwyl I'm not sure what happens but if my guess is correct, the suggested workaround is to avoid asign `StringTimestamp` object if `firstName` in `oldobject` was empty.

Like below:



FYI: The definition of properties of `Objects` is to be `dynamic var` other than `List` and `RealmOptional` properties. But these might not be related this crash, I think.
",kishikawakatsumi,perwyl
2727,2015-10-26 02:35:23,"@kishikawakatsumi I tried the above and i still get EXC-BAD_ECCESS (code = 257)





I am able to run fine if i do not assign StringTimestamp to `newObject`, the other migrations works perfectly. 

All Objects are `dynamic var`, my typo. 
",perwyl,kishikawakatsumi
2726,2015-10-23 04:32:11,"@eskerber That's because Carthage doesn't support building Realm Swift from source. Carthage doesn't support multiple projects in a single repo.

You can use Carthage pre-built binaries instead: just `carthage update`
",kishikawakatsumi,eskerber
2726,2015-10-28 03:50:21,"Thanks @kishikawakatsumi and sorry I missed the notification.

I'm going to try again tomorrow, but are you saying that:



will grab the pre-built binaries but, that this won't? 



(Understand you aren't a Carthage dev - but likely have run into this yourself as publishing a framework for Carthage so help is much appreciated :+1: )
",eskerber,kishikawakatsumi
2726,2015-10-30 13:21:46,"Thanks for the help @mrackwitz , @kishikawakatsumi. A coworker of mine claimed you _could_ in previous versions (which explains why I never got this error in .8). At least, for now, you've helped me white box the problem so I know what's going on. Maybe/hopefully it's supported in future versions.

Thanks again!
",eskerber,mrackwitz
2726,2015-10-30 13:21:46,"Thanks for the help @mrackwitz , @kishikawakatsumi. A coworker of mine claimed you _could_ in previous versions (which explains why I never got this error in .8). At least, for now, you've helped me white box the problem so I know what's going on. Maybe/hopefully it's supported in future versions.

Thanks again!
",eskerber,kishikawakatsumi
2723,2015-10-23 07:33:16,"@bipinvaylu It seems you have access to the Realm in the view controller before the configuration, migration block and schema version are set. Because error message indicates that the schema version is set 0 (It's default value, that means not set).

Regarding stack traces, the crash occurred in the `viewDidAppear` method. Please make sure that the configuration object is set before viewDidAppear method is called.
",kishikawakatsumi,bipinvaylu
2723,2015-10-23 08:24:17,"thanks @kishikawakatsumi, will look at this later. Currently stuck at another realm issue.
",bipinvaylu,kishikawakatsumi
2723,2015-10-28 11:52:12,"Hey @bipinvaylu, after we could resolve #2720, any update on this?
",mrackwitz,bipinvaylu
2723,2015-10-28 13:57:24,"Hey @mrackwitz, It's seems working fine now. Issue was realm object was created before migration code execution.  Great thanks for help.
",bipinvaylu,mrackwitz
2721,2015-10-21 18:11:30,"Thanks for your work on this, @kishikawakatsumi! Once you've added back in the RLMNotifier approach, you can close #2506 and we can use this PR as the defacto standard branch for tvOS.
",jpsim,kishikawakatsumi
2721,2015-11-03 01:20:37,"@kishikawakatsumi now that #2756 has been merged, could you please re-apply these changes? It should be simpler now that we're sharing build settings among schemes.
",jpsim,kishikawakatsumi
2721,2015-11-04 08:35:01,"@jpsim Rebased #2756 other than unit tests on tvOS simulators. I'm working on re-enable unit tests.
",kishikawakatsumi,jpsim
2721,2015-11-05 20:01:00,"Thanks for the hard work on this, @kishikawakatsumi, keep it up!
",jpsim,kishikawakatsumi
2721,2015-11-11 15:16:01,"@jpsim Thanks! I didn't notice those assertion failures. I've confirmed fixing locally and rebased it.
",kishikawakatsumi,jpsim
2721,2015-11-12 17:58:07,"> Yesterday you said that there were still a few failures when running from Xcode, do those now pass?

@jpsim Yes, the failures are due to invoke abstract class as tests from Xcode when I execute tests from ""Test Navigator"" pane. It won't occur when executing tests from ""⌘ + U"".


",kishikawakatsumi,jpsim
2721,2015-11-12 18:37:00,"@jpsim 

Device tests on tvOS from command line freezes in `replacing existing signature` in my environment. It cannot launch TestHost.app. :cry: 

Log:


",kishikawakatsumi,jpsim
2721,2015-11-20 15:02:35,"@jpsim Thank you very much to be able to run tests on devices! I've pushed tvOS examples (response cache sample and pre-loaded readonly data sample). Please review thouse if you get a chance.
",kishikawakatsumi,jpsim
2721,2015-11-30 09:08:12,"@kishikawakatsumi can't seem to get Realm (core) to build for the AppleTV simulator in xcode 7.1 against a4e49b7. Is there a relatively stable commit in this branch you recommend using? I'm getting errors specifically in recently added code. Here's what I'm seeing in case it's any help:



In case it's not obvious, I've installed this branch via CocoaPods with [the suggested dependency targets](https://github.com/realm/realm-cocoa/pull/2721#issuecomment-150617652). Seems like it might be a linker error given that a lot of symbols just seem to be undefined, but I'm not sure.

edit: answered my own question,  ae616ce works... here's my podfile update:


",azoff,kishikawakatsumi
2721,2015-11-30 09:44:31,"@azoff Thank you for pointing out! I forgot to push a commit. It's my bad. 
I've fixed and rebased to master, then pushed. Can you try again?
",kishikawakatsumi,azoff
2721,2015-11-30 10:01:24,"@kishikawakatsumi yes that worked!
",azoff,kishikawakatsumi
2721,2015-12-16 06:20:38,"@kishikawakatsumi @bdash @tgoyne I think this is ready to go.
",jpsim,bdash
2721,2015-12-16 06:20:38,"@kishikawakatsumi @bdash @tgoyne I think this is ready to go.
",jpsim,kishikawakatsumi
2721,2015-12-16 06:20:38,"@kishikawakatsumi @bdash @tgoyne I think this is ready to go.
",jpsim,tgoyne
2721,2015-12-16 06:21:34,"@kishikawakatsumi if you have time, it'd be nice to update the examples to use Realm notifications.
",jpsim,kishikawakatsumi
2721,2015-12-16 06:52:59,"@jpsim I've updated to use notification block.
",kishikawakatsumi,jpsim
2720,2015-10-21 14:36:48,"Thanks @mrackwitz i am having 2 main models ServerTrack and ServerTrackMetadata. ServerTrack is having array of ServerTrackMetadata objects. Currently i  am trying to create single object of ServerTrackMetadata but it's still giving same error. I checked stuff with sample app that's working fine. Realm Sample app: https://github.com/bipinvaylu/RealmDemo. 
",bipinvaylu,mrackwitz
2720,2015-10-21 19:04:24,"@mrackwitz i copied models and it's stuff from RealmDemo project to main project, it's also creating issue in main project. Looks like something in settings. Please let me know if you need any other details. Does it something related to build settings? I already did `Install Objective-C Compatibility Header = No`.
Model: https://github.com/bipinvaylu/RealmDemo/blob/master/RealmDemo/Model.swift

FYI: i am using Swift and Objective-C for my project. Imported Realm.h in main-Bridging-Header.h
",bipinvaylu,mrackwitz
2720,2015-10-23 18:25:06,"@mrackwitz @jpsim @realm-ci I figured this issue, it's because of i am having function named `getMetadata()` in `ServerTrackMetadata`. One thing i want to tell you guys is that error message is too much weird, No one can predict this can be issue. I spent around 3-4 days to figure out this weird stuff. :disappointed: 
",bipinvaylu,mrackwitz
2720,2015-10-23 23:12:06,"Sorry @bipinvaylu for causing you additional inconvenience in the last day, I totally own this. I'm currently abroad and had thus restricted internet access due to travel the last day. I missed to handover your issue to one of my team mates.

The sample project you provided was actually a pretty great way to reproduce this issue, but before that it was really cryptic and I don't think anyone of us has came across such an edge case yet and would have been able to recognize just from the exception message or the limited model you shared first with us what is going on here.

You're right that exception thrown here is not helpful at all, but that's just because that wasn't really handled yet at all.

Let me explain what is happening here: Realm's `RLMObject` uses the Objective-C runtime to define dynamic accessors for your model properties to provide own getter and setter implementation. As Swift doesn't allow it to declare a type which is conforming to a protocol as Objective-C does it with `RLMArray<Foo>`, we've to rely there on a property `objectClassName`, which you correctly initialized. On runtime when you're initializing the first `RLMRealm` instance, the schema is loaded by inspecting your classes via the reflection APIs. Because `objectClassName` is a field of the `RLMArray` property, classes with to-many relations which are defined from Swift have to be initialized at runtime to be able to inspect them. Realm Objective-C is accessing the value for the property via `valueForKey:`. KVC is accessing values by first looking for an accessor method which matches the pattern `-get<Key>`. This is the one you have overwritten here. By returning a standalone array instead of the `RLMArray`, you are accidentally breaching the class contract for `RLMObject`. The schema inspection code is trying to figure out the element type by calling `objectClassName` on the returned value which is in that case the toll-free bridged `_SwiftDeferredNSArray`. This doesn't know anything about Realm, so it comes to the failure.
",mrackwitz,bipinvaylu
2720,2015-10-24 06:07:44,"Great thanks @mrackwitz for explanation. I got it now. 
",bipinvaylu,mrackwitz
2716,2015-10-22 02:13:39,"I'm getting the same issue with the new release of Xcode 7.1. I build through Carthage though. @jpsim any suggestions?
",marlowcharite,jpsim
2716,2015-10-22 15:31:47,"@jpsim - Can you provide some more details of how to reproduce your Swift 2.1 issue resolution?
",codytwinton,jpsim
2716,2015-10-22 19:03:06,"@hardinm78 -
1. Clone the repo or download as a Zip file and open: https://github.com/realm/realm-cocoa
2. Open up a terminal window (mac) or some comparable alternative.
3. On mac, you'd change to the directory of the repo via. `cd ~/Path/To/The/Repo` command in the terminal window. `cd` stands for change directory.
4. Then, run this command: `REALM_SWIFT_VERSION=2.1 sh build.sh build` which will cause the project to be updated to Swift 2.1
5. Then, you'll be able to drag the frameworks back into your Project.
",codytwinton,hardinm78
2716,2015-10-23 02:04:58,"@moogle19 - Did you try Cleaning your project and deleting the DerivedData?
",codytwinton,moogle19
2716,2015-10-23 14:55:44,"@moogle19 - Then I think you've gone beyond my diagnostic ideas. 
",codytwinton,moogle19
2716,2015-10-23 15:14:18,"@timanglade Any ETA on that release? For those of us using carthage we're pretty much blocked until it's released :cry: 
",jakecraige,timanglade
2716,2015-10-23 15:17:18,"@jakecraige You could always install Xcode7 thill new release. 
",bwdowikowski,jakecraige
2716,2015-10-23 15:25:36,"@jakecraige yea, no problem, glad that I could help :)
",bwdowikowski,jakecraige
2716,2015-10-23 20:25:11,"@jakecraige Working on it at the moment! @bdash and @tgoyne are trying to get something out the door asap but the CI upgrade was more complicated than expected due to vacations and other complications. Keep an eye on this issue, our blog or Twitter!
",timanglade,jakecraige
2716,2015-10-27 01:59:57,"Building Realm 0.96.2 with Carthage fixes the issue, @bdash @jakecraige
",GregIngelmo,jakecraige
2716,2015-10-27 01:59:57,"Building Realm 0.96.2 with Carthage fixes the issue, @bdash @jakecraige
",GregIngelmo,bdash
2713,2016-04-12 06:50:51,"@madawei2699 says the correct answer. I am also a developer in China.The solution is download `realm-core-XXX.tar.bz2` and copy it into `/tmp/ dir`. So I suggested the maintainer to list the download url of each realm version.
",Onetaway,madawei2699
2713,2016-08-01 09:51:58,"@Onetaway You can find the download url in 
https://github.com/realm/realm-cocoa/blob/master/build.sh#L289
which is the value of `CORE_URL`
",xilin,Onetaway
2713,2016-12-19 19:23:38,"@danat8x8 what's wrong with the installation? The log output you shared doesn't seem to indicate a failure of any kind...

If by your own admission your issue is unrelated to what this issue is tracking, why not open a new issue, taking care to fill out the new issue template, and include the full output of `pod install --verbose`? Thanks!",jpsim,danat8x8
2712,2015-12-20 07:11:58,"getting the same compile error as OP
@jeremypiednoel thanks for digging into it, downgrading to cocoapods 0.38 helped, but running not latest is clearly not ideal.
Does anybody know whether is this cocoapods issue ?
",r618,jeremypiednoel
2712,2015-12-20 07:15:47,"@r618, which version of Realm are you using?
",bdash,r618
2712,2015-12-20 07:19:16,"Hi @bdash, the latest pod, i.e. in Podfile:
pod 'Realm'

after downgrading cocoapods to 0.38 it spit out few warnings, but at least it's compilable now
",r618,bdash
2711,2015-10-20 06:29:20,"@zhaochengfeng doesn't work
",junjielu,zhaochengfeng
2711,2015-10-20 20:54:54,"Hi @junjielu, I'm sorry you're affected by this. We've been getting more and more reports about this from China, and have created a GitHub issue with more details about what's happening and what you can do about it.

Please refer to #2713 for more information.
",jpsim,junjielu
2708,2015-11-05 19:06:46,"Closing due to inactivity. @petegrif, if you manage to share steps we can take to reproduce this issue, I'll be happy to re-open this.
",jpsim,petegrif
2706,2015-10-19 18:04:46,"Hi @mamaral, first I encourage you to read our [0.96.0 release blog post](https://realm.io/news/realm-objc-swift-0.96.0/) if you haven't done so already, which explains much of the new behavior introduced in that version, specifically support for nullable properties.

Specifically, unless you mark the properties on your models that are of a now nullable type (NSString, NSData & NSDate) as required by implementing `+requiredProperties`, you'll need to perform a migration so Realm can copy those older non-nullable values to the new nullable format.
",jpsim,mamaral
2706,2016-03-23 16:10:52,"@highwinddq an empty migration block is sufficient to migrate required properties to optional.
",jpsim,highwinddq
2705,2015-10-19 13:22:53,"@azraelx23  Realm does not copy any data until actually access the properties. When access the properties, Realm fetch the data directly from its file. So Realm does not store any data to its ivar. Additionally, Realm object will change to another class at the moment it is persisted. That's why you cannot see any values via the debugger and nil out all value after committed.

If you'd like to debug object's value, you can use ""Print Description"" feature of debugger: Right click the object, and select ""Print Description of ..."". 
",kishikawakatsumi,azraelx23
2704,2015-10-19 06:26:43,"@ikeyboard I think that the actual problem has occurred when you open the file. Can you please make sure the `error` object passed to `realmWithConfiguration:config:` is `nil` after the method has called?
",kishikawakatsumi,ikeyboard
2704,2015-10-19 12:54:51,"@ikeyboard OK, it is clear to me. Realm v0.96 introduced new file format. The Realm file was updated automatically when the file was opened. But the file in app bundle cannot be written. Because app bundle is not permitted to write.

So you’re bundling a Realm file in your app, it will have to be updated and replaced to use this new file format.

For more information, please read ""Automatic Conversion"" section of this article.
https://realm.io/news/realm-objc-swift-0.96.0/ 
",kishikawakatsumi,ikeyboard
2704,2015-10-19 14:25:48,"@ikeyboard No, you do not need to copy to document folder. You can just bundle upgraded file into your app bundle. 

So, first, upgrade your Ream file to new format. You can use an OS X app or your iOS app running in the simulator. Then the file bundle into your app.
",kishikawakatsumi,ikeyboard
2704,2015-10-30 07:32:04,"@kishikawakatsumi 
What is the easiest way to convert existing bundled realm file to newer format with contained data?
",hiragram,kishikawakatsumi
2704,2015-10-30 07:37:46,"@hiragram Open the file with the latest release of [Realm Browser 0.96.1](https://github.com/realm/realm-browser-osx/releases/tag/0.96.1) **Note: AppStore version has not supported new file format yet**

Or read the file using the simulator.

If you read even once, the file format will be upgraded.
",kishikawakatsumi,hiragram
2704,2015-10-30 07:52:53,"@kishikawakatsumi I have just successfully upgraded realm file using Realm browser. Thank you for your help!
",hiragram,kishikawakatsumi
2703,2015-10-19 06:32:46,"@rexmas I believe the problem due to a case-sensitive file system. Do you use a case-sensitive file system? The workaround is executing `pod install` in the case-insensitive file system. Create temporary disk image with Disk Utility then mount it. Copy your project into it and execute `pod install` there.

We are working on to fix the issue: https://github.com/realm/realm-cocoa/pull/2675
",kishikawakatsumi,rexmas
2698,2015-10-19 07:02:04,"@lucianocn Because `PUT` method of `AFHTTPRequestOperationManager` performs asynchronously, there is a possibility that the Model object has been deleted before completionHandler is called.

Similarly, for case 2, there is a possibility that the Model object has been deleted while the UIAlertView is displayed.

Therefore, I strongly recommend that you obtain a model object just before you want to change to ensure that it isn't changed during the method. If other threads can change the model objects, you also ensure not to be changed during the method.
",kishikawakatsumi,lucianocn
2697,2015-11-05 19:06:01,"@skrew just following up on @mrackwitz's last comment. Do you have steps for us to try so we can reproduce the issue? Or maybe you can investigate this further on your end?

It's possible that something went wrong in the file format migration (0.96 introduced a new database file format).
",jpsim,mrackwitz
2697,2015-11-05 19:06:01,"@skrew just following up on @mrackwitz's last comment. Do you have steps for us to try so we can reproduce the issue? Or maybe you can investigate this further on your end?

It's possible that something went wrong in the file format migration (0.96 introduced a new database file format).
",jpsim,skrew
2697,2015-11-06 23:38:39,"Hi @jpsim, just tested with 0.96.2 and same problem.

I don't want to make a dictionary before because, if you remember the sample i had send to you, time are critical in my application. Creating 30.000 - 90.000 dictionaries are not a (good) solution for me. 

I will make a sample to reproduce the bug and i will send it on your mail (or another mailbox if you want, just tell me.)
",skrew,jpsim
2697,2015-12-02 01:11:39,"@skrew, I apologize for the delay on getting back to you here. This issue appears to have slipped through the cracks. I don't see any email from you to help@realm.io on the date of your last comment. Would you be able to re-send the sample application so that we can investigate the problem you're seeing?
",bdash,skrew
2697,2015-12-02 01:20:39,"@bdash Sended again, subject: ""Sample project for reproducing issue #2697"". I looked at my server log, mail have status=send, 250 ok. Should be ok.
",skrew,bdash
2696,2015-10-16 23:00:17,"Thanks for the PR fixes, @tom-sparo! I think this could be merged after you address my last round of (nitpicky) feedback.

Our CI jobs are seeing some device test failures at the moment because we're adding some additional iOS devices and still working out some kinks, so we may merged this despite GitHub showing a red 'x'.
",jpsim,tom-sparo
2696,2015-10-18 05:44:34,":+1: thanks for the contribution @tom-sparo!
",bigfish24,tom-sparo
2690,2015-10-16 13:02:57,"Thanks @kishikawakatsumi! Carthage 0.9.3 worked! :)
",padarom,kishikawakatsumi
2689,2015-10-16 12:16:00,"@happiehappie  Realm supports NULL properties from ver. `0.96.0`. `0.95.x` or earlier version does not support optional properties other than `Object` and `List`. If you'd like to make the property nullable, you should use the latest version (0.96.0) of Realm.
",kishikawakatsumi,happiehappie
2689,2015-10-16 12:27:25,"I've ran pod install. Is the current pod version earlier than 0.95.x?
On Fri, Oct 16, 2015 at 8:16 PM kishikawa katsumi notifications@github.com
wrote:

> @happiehappie https://github.com/happiehappie Realm supports NULL
> properties from ver. 0.96.0. 0.95.x or earlier version does not support
> optional properties other than Object and List. If you'd like to make the
> property nullable, you should use the latest version (0.96.0) of Realm.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/2689#issuecomment-148701390.
",happiehappie,happiehappie
2686,2015-10-18 15:18:59,"Thanks for your help ... @mrackwitz 

I found the explanation a little bit complicated so i solved the problem without using `schemaVersionAtPath:` ..
By storing the DB Version in the **UserDefaults** file like this :


",almujtaba,mrackwitz
2685,2015-10-16 03:55:11,"Alright @tom-sparo, I've made this issue into a feature request. You're welcome to submit a pull request for this feature yourself, as I don't think we'll be tackling this ourselves in the near future.
",jpsim,tom-sparo
2684,2015-10-19 21:46:26,"Thanks for the details, @jpsim. That makes the change much easier to follow.

A protocol-based approach could keep `RealmObject`s semantics from being obscured by the type conversions. Something like:



It's more code, but a little more self-documenting. Thoughts?
",bdash,jpsim
2683,2015-10-15 18:03:19,"@thiagoramos23, have you tried programmatically retrieving the objects to see if the `Int` properties were saved? If you're only checking via the Realm Browser you may be seeing realm/realm-browser-osx#78, a layout issue on OS X El Capitan that causes some numeric properties to appear empty.
",bdash,thiagoramos23
2683,2015-10-15 18:14:32,"Hi, @bdash! Thanks for the reply. Yep, you are right. I guess i was trying to retrieve the object before commit the transaction. 

Thank you. You saved my day!
",thiagoramos23,bdash
2680,2015-10-15 00:23:33,"Looks like Realm files aren't being properly cleaned up between tests in Swift 2 now. Would you like me to pick this up, @tgoyne?
",jpsim,tgoyne
2677,2015-10-15 17:52:16,"@jpsim Thanks for your help. I solved that issue, as you said, I get the latest stable version of Realm and everything is fine now.

Thanks again. :)
",bugnaum,jpsim
2675,2015-10-16 14:00:49,"@mrackwitz Totally agreed. I addressed feedback.
",kishikawakatsumi,mrackwitz
2674,2015-10-16 00:16:01,"Swift 1.2 no dynamic = Realm 0.87.1
Swift 1.2 dynamic = Realm 0.87.1
Swift 2.0 dynamic  = Realm 0.94.1

Thanks for your help with this @mrackwitz 
",14lox,mrackwitz
2674,2015-10-16 22:27:41,"@mrackwitz my bad - the crashing version is using `0.94.1` - i have a test branch using `0.95.1`.
",14lox,mrackwitz
2672,2015-10-14 18:46:16,"@GreyEcologist do you still need help with this or did you figure out what was going wrong and then closed this issue?
",jpsim,GreyEcologist
2666,2015-10-15 02:21:52,"@segiddins, Are you saying that CocoaPods changes the Xcode configuration settings of targets to set `APPLICATION_EXTENSION_API_ONLY=YES` based on its analysis of the types of user targets that link against pods? That seems like it'd handle some cases, but you'd still end up with linker warnings unless you rerun CocoaPods after adding a new extension target to your project. There doesn't seem to be any downside for Realm to always enable this setting given that we know Realm and RealmSwift to use only extension-safe APIs.
",bdash,segiddins
2666,2015-10-15 02:25:01,"@bdash correct, although the fact that y'all thought it necessary would imply to me that there's a bug in CocoaPods.
",segiddins,bdash
2664,2015-10-13 16:55:21,"thanks @mrackwitz, i am using CocoaPods 0.38.2 and not following you where do i need to set this. SWIFT_INSTALL_OBJC_HEADER to NO, If possible can you please guide me.
",bipinvaylu,mrackwitz
2664,2015-10-19 19:57:04,"Thanks @mrackwitz 
",bipinvaylu,mrackwitz
2662,2015-10-13 04:59:13,"We've had one report of this happening several months ago as well, but we were never able to reproduce the issue or figure out why it was happening. See #1683.

Can you think of anything about your computer's configuration that might cause this @asqar? I still have no clue why this could happen.
",jpsim,asqar
2662,2015-10-16 05:44:39,"As I worried and @bdash suggested, I had some _misconfigured_ settings for **line endings**.

I ran:



Then completely re-installed Homebrew and Ruby.





Now everything is cool.
",asqar,bdash
2657,2015-10-22 01:19:13,"@kishikawakatsumi Can you expand upon ""Delete the Realm file, etc."" and how to best handle recreating the realm file and trying to commit write again. 

Also, are you also advising `try! realm.commitWrite()` as being the correct way to handle a commit error which can't be fixed?
",14lox,kishikawakatsumi
2657,2015-11-03 01:57:30,"Thanks @jpsim - it would be great to get authoritative guidelines on how best to deal with these situations.
",14lox,jpsim
2655,2015-10-13 21:25:33,"Thanks for bringing this to our attention, @lucianocn. We were including the property and class names in the exception's `userInfo` property, but that wasn't very useful in this context. We've just merged a change that will print the property and class names in the exception message. You can expect this change to be available in our next major release.
",jpsim,lucianocn
2655,2015-10-16 18:04:13,"@jpsim thank you!
",lucianocn,jpsim
2653,2015-11-06 18:54:36,"@shmakovigor just following up on our request for more information. We don't have enough information to reproduce this issue currently, so it'll be difficult to assess what's happening.
",jpsim,shmakovigor
2650,2015-11-02 12:39:58,"@tgoyne: How would you validate whether the realms are the same? In the function there is no reference to the `RLMRealm` accessible for which the query is built.
",mrackwitz,tgoyne
2650,2015-11-20 17:56:48,"@tgoyne: This seems to be ready now to merge. Can you give it another review pass?
",mrackwitz,tgoyne
2648,2015-10-07 23:20:39,"@tgoyne sorry you are correct. I updated the project to properly showcase the error
",MikeSilvis,tgoyne
2648,2015-10-07 23:48:29,"@tgoyne Okay so do you guys recommend I do a find there to look for a contact with an ID and then set it?
",MikeSilvis,tgoyne
2646,2015-10-07 16:45:20,"@GregIngelmo Carthage 0.9.2 or 0.9.3 will fix this issue. Please update your Carthage to the latest version. Carthage 0.9.2 and 0.9.3 cannot be installed via Homebrew.  So you build Carthage from source or download and run the Carthage.pkg from latest release https://github.com/Carthage/Carthage/releases
",kishikawakatsumi,GregIngelmo
2646,2015-10-07 17:40:42,"Fixed, thank you @kishikawakatsumi 
",GregIngelmo,kishikawakatsumi
2644,2015-11-06 18:53:38,"@jakecraige I'm just curious if my last comment was of any help to you. Ok to close this?
",jpsim,jakecraige
2641,2015-10-06 18:07:39,"@rdougan Could you please tell me more details? What version of CocoaPods are you using? Realm or RealmSwift? And could you share your Podfile? 
",kishikawakatsumi,rdougan
2641,2015-10-06 19:25:33,"@rdougan I cannot reproduce the issue in my environment. Could you try first removing cache then re-install



If it would not resolve the issue. Could you please share a reproducible project for the investigation? Thanks. 
",kishikawakatsumi,rdougan
2640,2015-10-06 18:17:03,"@jplazcano87  `+[RLMRealm migrateRealm:]` method is called automatically when opening a Realm for the first time and does not need to be called explicitly.

So you should pass `RLMRealmConfiguration` object with migration block to the `+[RLMRealm realmWithConfiguration:error:]` method when you open the Realm.

If you would like to execute migration process explicitly, you can change above code to like below:


",kishikawakatsumi,jplazcano87
2640,2015-10-16 00:44:13,"@daniel-beard did you find any way to fix it?
",jplazcano87,daniel-beard
2640,2015-10-16 02:30:51,"@jplazcano87 can't figure out how to fix it, but I did put together a sample project that shows the problem: https://github.com/daniel-beard/RealmTest/tree/master
",daniel-beard,jplazcano87
2640,2015-10-16 03:10:00,"@daniel-beard, that's a great test app. From a brief look I can see two issues, one in Realm and one in the test code:
1. `-[RLMRealm migrateRealm:]` doesn't appear to respect the schema version from the configuration, instead using only the schema version set via the legacy APIs. @tgoyne's change in 16194870 fixes this issue. We should pull that change into a point update.
2. With version 0.96 you'll need to explicitly state that your `NSString *`, `NSDate *` and `NSData *` properties are required by implementing `+requiredProperties` in each model class to avoid requiring a migration. Those data types are now considered to be nullable unless `+requiredProperties` says otherwise.
",bdash,daniel-beard
2640,2015-10-16 03:14:14,"Thanks @bdash for the quick turn-around!
",daniel-beard,bdash
2640,2015-10-16 03:14:37,"Looks like @bdash and I both looked at this at the same time. We mostly agree, but I think both ""bugs"" are really ours.

---

Thank you so much for sharing that, it's really clarified what's happening. There are two bugs here. One of them is in our code, the other is in our documentation ;)

The bug in our code is that we're using the schema version set using [RLMRealm setSchemaVersion:...] rather than the one provided in the configuration object. We've already submitted a fix for this and it will land in our next release: https://github.com/realm/realm-cocoa/pull/2680

The bug in our docs is that the following sentence is wrong:

> Accessing a Realm file created with a previous version will automatically convert these properties to nullable in the file itself, unless explicitly marked not to do so in +requiredProperties.

Although accessing the Realm file will in fact update the file format, the properties won't be converted to nullable until you perform a migration. We'll be sure to update the 0.96 release blog post and our docs to reflect this.

Thanks again for sending this our way.
",jpsim,bdash
2640,2015-10-16 03:17:32,"Thanks @jpsim, I was sure I was setting something up incorrectly :D
",daniel-beard,jpsim
2639,2015-10-06 18:32:20,"@Chris59160 Could you please show the code snippet around `enumerateObjectsUsingBlock`?  I'd like to see your code for further investigation.
",kishikawakatsumi,Chris59160
2639,2015-10-06 18:46:08,"@kishikawakatsumi 

[realm beginWriteTransaction]; 

 [restaurantList enumerateObjectsUsingBlock:^(NSDictionary\* obj, NSUInteger index, BOOL *stop)
 {
 [ref parseRestaurant:obj];
 }];

 [realm commitWriteTransaction];
",Chris59160,kishikawakatsumi
2639,2015-10-06 18:48:01,"@Chris59160 Please share inside of `parseRestaurant:` method. 
",kishikawakatsumi,Chris59160
2639,2015-10-06 18:57:10,"@kishikawakatsumi 


",Chris59160,kishikawakatsumi
2639,2015-10-06 19:08:07,"@Chris59160 OK, thanks. It seems good about constructing `restaurantObj`. Are you sure to add `restaurantObj` to the Realm?

And how you confirm that nested object has not been saved? Logging?, see data file with Realm Browser? Or anything else?
",kishikawakatsumi,Chris59160
2639,2015-11-06 19:33:08,"@Chris59160 were you ever able to resolve this? Based on the information you've provided us so far, there's no way for us to tell if there's a bug in Realm, if Xcode is having issues logging to the console, or if you're using Realm incorrectly.
",jpsim,Chris59160
2639,2015-11-12 03:41:52,"@Chris59160 Please let us know if you were able to resolve this issue! If not, feel free to re-open this issue. :)
",TimOliver,Chris59160
2639,2015-11-12 09:00:40,"Hey,

The issue never really got resolved, I shuffled around how I was setting
the inner RealmObject inside the other one, and it seemed to do the trick.
I don't have the explanation on the why though...

On Thu, Nov 12, 2015 at 3:42 AM, Tim Oliver notifications@github.com
wrote:

> @Chris59160 https://github.com/Chris59160 Please let us know if you
> were able to resolve this issue! If not, feel free to re-open this issue. :)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/2639#issuecomment-155987664.
",Chris59160,Chris59160
2632,2016-08-15 16:20:27,"@bendikv this is not a high priority for us to work on at the moment. See issues labeled `P1`/`P2`/`In Progress`/`Review` for an up-to-date list of our priorities.
",jpsim,bendikv
2631,2015-10-05 15:17:31,"Sorry for closing this a bit early, @esad. The file expansion algorithm isn't well documented anywhere publicly. On mobile platforms, Realm file size start at 4KB and double in size every time more than the current allocation is required. This doubling stops at 32MB, at which point the file grows in increments of 16MB. So 16MB -> 32MB -> 48MB.
",jpsim,esad
2631,2015-10-05 19:15:34,"@esad: We are also working on lowering the memory needs such that only one mmap is needed in the future.
",bmunkholm,esad
2629,2015-10-04 11:06:09,"@kishikawakatsumi Thank you for the answer.

The documentation on the NSPredicate Cheatsheet is misleading. https://realm.io/news/nspredicate-cheatsheet/


",wieseljonas,kishikawakatsumi
2625,2015-10-02 14:18:51,"@Chris59160 Could you please share your project? I could more appropriate advice if I see it.
",kishikawakatsumi,Chris59160
2625,2015-10-02 14:32:02,"@kishikawakatsumi It is a professional project....so I can't put it on git, but I could send you a zip of the project ? If you give me your email, I'll zip it to you.

I am pretty sure I am doing something, silly and wrong, which is quite frustrating

Your shared project is full swift, mine is a mix of both, mainly obj-c, might be the issue.

Otherwise, yeah, your project compiles fine here
",Chris59160,kishikawakatsumi
2625,2015-10-02 14:42:02,"@Chris59160 Thanks, could you please send your project to help@realm.io ? Then I'll investigate it. 
",kishikawakatsumi,Chris59160
2625,2015-10-02 14:55:12,"@kishikawakatsumi I just sent the email with the archive to the email you gave me.

I checked both settings, and every thing looks the same....so it's really weird
",Chris59160,kishikawakatsumi
2625,2015-10-02 16:02:56,"@kishikawakatsumi You can cancel your progression, I have recreated a project from scratch, copy/pasted the files from my main project....and now it is actually fine in this new project...No idea why the original one is not working....

Thank you any way. IF you find something though, I'd be interested in knowing what was wrong
",Chris59160,kishikawakatsumi
2625,2015-10-02 16:22:27,"@Chris59160 Sounds great. I'm going to close this since your problem is solved. I'm also interested in what is wrong. Let you know if I figure out the problems.
",kishikawakatsumi,Chris59160
2624,2015-10-02 04:56:12,"Thanks for the PR, @alexasfb! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,alexasfb
2623,2015-10-02 19:30:36,"@happiehappie I noticed you posted this on [StackOverflow](http://stackoverflow.com/questions/32899683/realm-io-with-anyobject-subscript). We would prefer to finish this conversation over there so that others can more easily benefit from the answer. As a result, I am going to close this issue for now.
",bigfish24,happiehappie
2619,2015-10-01 17:10:48,"@kylebshr the point of that exception (and all other Objective-C runtime exceptions that Realm throws) is to indicate programmer error. As in, using Realm in a way that is not supported. So those exceptions aren't meant to be caught at runtime, but rather to make you change how you use Realm.

In this case, an exception is thrown when passing a value to `Object.init(value:)` that doesn't match the property layout of the object. The solution is to not do that. If you don't control the layout of the dictionary you're passing in to the Object initializer, you should sanitize the dictionary to make it conform to what `Object.init(value:)` expects.
",jpsim,kylebshr
2616,2015-10-01 17:11:42,"Thanks for understanding, @kylebshr!
",jpsim,kylebshr
2613,2015-10-01 14:10:36,"@jpsim we are right in the middle of migrating to Swift 2, and the fact that Realm() throws is really putting us on the edge, since we use that a lot to be sure that we access the correct realm on each thread.

Do you have any suggestions for handling this frequently, or do you think we should rethink our approach to handle the impact of all do/catch (or try! 🙈) ?

We haven't shipped a version with RealmSwift yet (and we will migrate to Swift 2 before we do), but we did not use the old error handling model more than at the start of the app before, so this comes as a quite big change for us.

It would be greatly appreciated if you could point us in the right direction.
",hermanolsson,jpsim
2610,2015-09-30 18:44:43,"Sorry you've hit this issue, @tolgaytoklar. I've cross-posted this to our Realm Browser repo, realm/realm-browser-osx#83 where we'll continue conversations around this problem.

If you encounter issues with the Realm Browser in the future, please file an issue there. Issues relating to the Realm Objective-C or Realm Swift frameworks can be filed here.
",jpsim,tolgaytoklar
2609,2015-09-30 16:05:55,"@jpsim Thanks for quick attention.

Here is partial contents of my `Podfile`, omitted irrelevant lines for brevity.



I tried altering RealmSwift entry with following, and still having same issue:


",vishaltelangre,jpsim
2608,2016-04-06 05:03:30,"@pnsean how do you suggest limiting is appreciably different than reducing the amount that's looped over? As discussed here, item access is lazy, so accessing less of the `Results` is no different than ""limiting"", since that concept doesn't really apply to Realm.
",jpsim,pnsean
2608,2016-04-06 05:12:50,"@jpsim I'm not suggesting that there's an appreciable difference.  I'm suggesting your example is superior to that of the one provided in the documents.  The concept applies to any data source since there are many reasons to paginate beyond just what the datasource can handle.  Any way, just my humble opinion.
",pnsean,jpsim
2605,2015-09-30 05:13:09,"Hi @Kluskey!

Oh dear. I've had that issue in a lot of my apps before as well. The error usually implies that there was something wrong with the file path you specified, but that sadly means there could be any number of issues with it. Usually the first point of debugging this sort of issue is to print your file path value to the console and see if anything looks incomplete/malformed

In this case, I think the issue might be the way you're converting an `NSURL` value to a `String` in order to pass it to Realm's `writeCopyToPath` method.

Instead of `String(url4)`, try `url4.path` and let me know if that fixes it. :)

Thanks!
",TimOliver,Kluskey
2594,2015-09-28 22:30:31,"I'll add a note to our documentation clarifying that using platform-dependent types will lead to having platform-dependent database files.

I'm sorry that was not clear, @adomanico.
",jpsim,adomanico
2594,2015-09-28 22:36:39,"> Why even allow them? Would it be simpler to just force the use of the primitive float, double , etc ?

Not possible, as @tgoyne stated above:

> There's no way for us to detect them. Code using CGFloat will compile to the exact same thing as code using whichever type it's an alias for on the current platform, since C typedefs don't actually create new types.
",jpsim,tgoyne
2592,2015-09-28 17:15:45,"@tgoyne OK, I created PR for updating documentation. https://github.com/realm/realm.io/pull/1035
",kishikawakatsumi,tgoyne
2592,2015-09-28 17:44:41,"Nice work @kishikawakatsumi! :+1: 

Although the CI failure is legitimate (file format failure) and should be addressed asap, it's not caused by this PR.
",jpsim,kishikawakatsumi
2590,2015-10-05 14:27:06,"@jpsim : Stepping into this conversation since I've come looking for the same issue. My situation:

I'm using code generation to generate a Swift client library from a RESTful Swagger document. This is producing a bunch of code where after a REST call is made, the response is parsed into a bunch of nested objects which conform to Realms requirements and inherit from RealmSwift.Object.

At the top level of most of my calls is a hypermedia based object which supports pagination. This does not have a primary key, but the content embedded within the paginated object does have primary keys. I'd prefer to call ""add(:update:)"" on the paginated object which ignores the fact that some objects may not have primary keys and thus will have no effect rather that iterate through a potentially complex data structure adding / update keys manually.

So in short, yes, I think your suggestion that the behaviour described for `createOrUpdate:` would make sense.
",SandyChapman,jpsim
2590,2015-10-05 16:43:56,"Alright, I'm glad we could reach an agreement on this! I've created #2632 to track this feature. Thanks for your input @yasirmturk and @SandyChapman.
",jpsim,yasirmturk
2590,2015-10-05 16:43:56,"Alright, I'm glad we could reach an agreement on this! I've created #2632 to track this feature. Thanks for your input @yasirmturk and @SandyChapman.
",jpsim,SandyChapman
2589,2015-09-28 17:36:15,"Hi @amayne, it looks like the device on which you're running Realm in this case is unable to `mmap` the data Realm needs to perform operations on multiple threads. This can happen when a device is space-constrained, or when Realm files become large enough.

We explain a bit in our FAQ how Realm files can become larger than they should and how to mitigate that ([link](https://realm.io/docs/swift/latest/#file-size--tracking-of-intermediate-versions)).

We've also discussed this in some past GitHub issues (#620, #1096, #1159).

The solution in this case is for the Realm initializer to report mmap failures in a recoverable way (#2269), and for different threads to share the same underlying region if it's already mmapped (realm/realm-core#838 and realm/realm-core#876).

Until we have those longer-term solutions, your best bet is to keep Realm files as small as possible (e.g. via compacting) and to run on devices that aren't space-constrained. We understand these are difficult constraints, which is why we're hard at work on the longer term solutions mentioned above.

I believe this issue to be sufficiently tracked elsewhere in its underlying components to close this one as a duplicate.

If you have any questions or comments about this, we'll address them on this thread or wherever else you feel is appropriate.
",jpsim,amayne
2589,2015-09-29 12:34:09,"Thank you @jpsim ! I managed to significantly reduce the size of the Realm by using the file system was storage (I was storing large nsdata in my realm). I am still seeing the errors, but only very occasionally. I will now work towards having this split across multiple realm files and hope that solves all my problems
",amayne,jpsim
2585,2015-10-13 05:43:28,"@tomekc: I would recommend cleaning your project + deleting the derived data. If you're still having problems, remove the `Pods` directory and run `pod install` again.
",istx25,tomekc
2585,2015-10-29 00:12:50,"@jpsim thanks for the tip. There's something wrong here though. Check this out:



Then, 1) open project in Xcode7, 2) Cmd+shift+K, 3) Build for my mobile device (not simulator), results in:



Works fine on the simulator, though. Any ideas?

_p.s. unless I'm making something very wrong here, shouldn't we reopen this?_
",kurko,jpsim
2585,2015-11-13 23:51:42,"I can confirm that this is still an issue with the prebuilt binaries, thanks for reporting @rsavutiu.



Note that Realm Objective-C & Realm Swift generate bitcode binaries correctly, however, so CocoaPods users aren't affected.
",jpsim,rsavutiu
2585,2015-11-17 12:54:16,"@jpsim: I've the exact same error as @kurko even as I'm using CocoaPods:
- CocoaPods 0.39.0
- Realm 0.96.2 (`pod Realm`, ObjC)
- Xcode 7.1

We just switched to `use_frameworks!` (because we'll need a Swift pod soon) and now when archiving, I see it building the `.mm` files from Realm but when linking the framework sources at the end it generates the following:



And I checked just to be sure, `ENABLE_BITCODE` is set to `YES` on the `Realm` target of `Pods.xcodeproj` as expected (as well as on every other targets and my app).

Of course setting `ENABLE_BITCODE` to `NO` everywhere (in app + in pods via post_install hook) avoids the problem but is not ideal.
",AliSoftware,jpsim
2585,2015-11-17 12:54:16,"@jpsim: I've the exact same error as @kurko even as I'm using CocoaPods:
- CocoaPods 0.39.0
- Realm 0.96.2 (`pod Realm`, ObjC)
- Xcode 7.1

We just switched to `use_frameworks!` (because we'll need a Swift pod soon) and now when archiving, I see it building the `.mm` files from Realm but when linking the framework sources at the end it generates the following:



And I checked just to be sure, `ENABLE_BITCODE` is set to `YES` on the `Realm` target of `Pods.xcodeproj` as expected (as well as on every other targets and my app).

Of course setting `ENABLE_BITCODE` to `NO` everywhere (in app + in pods via post_install hook) avoids the problem but is not ideal.
",AliSoftware,kurko
2585,2015-11-17 21:24:09,"@AliSoftware when you ran `pod install` with Realm for the first time, did you have Xcode 7+ `xcode-select`ed? That's necessary to link the bitcode version of Realm's core. If not, could you try `rm -rf Pods; pod install` with Xcode 7.x selected via `xcode-select -s ...`?
",jpsim,AliSoftware
2585,2015-11-18 09:54:54,"@jpsim I can confirm this was the issue (which is logical now that I saw you use a `prepare_command` and that `build.sh` script of yours).
I removed Realm and reinstalled it with xcode-select set to Xcode 7 and now have the BitCode-enabled `librealm-ios.a` :+1:  Thx for the tip!

Note that I think it's better to suggest users having the same problem to simply comment `# pod 'Realm'` from their `Podfile`, run `pod install` to uninstall it, then uncomment it and run `pod install` again to force the reinstallation of the pod, rather than suggesting to nuke the `Pods` folder, which would remove the `Podfile.lock` and all the pods locked versions.

Nuking the `Pods` folder will have the side effect that the next `pod install` might install latest versions of other pods when we sometimes don't want to update right away and want those pods to be locked on a specific version until we `pod update` them explicitly. Uninstalling just the `Realm` pod and installing it again doesn't generate this side effect, except just for the Realm pod itself.
",AliSoftware,jpsim
2585,2015-11-18 20:19:16,"Thanks for the tip @AliSoftware!
",jpsim,AliSoftware
2581,2015-09-25 13:47:59,"@mrackwitz thanks for answering. 

I doubt that Slicing and enabling Bitcode would reduce the 25MB (`RealmSwift.framework + Realm.framework`)  to 1MB as advertised here : https://realm.io/docs/swift/latest/

> How big is the Realm library?
> 
> Once your app is built for release, Realm should only add around 1MB to its size. The releases we distribute are significantly larger because they include support for the iOS and watchOS simulators, some debug symbols, and bitcode, which are all stripped by Xcode automatically when you build your app.
",slash7,mrackwitz
2581,2015-09-25 14:51:40,"@tgoyne thanks!
",slash7,tgoyne
2580,2015-09-25 13:50:05,"@mrackwitz Thanks! Got it. 
I have a album which has a owner, and user lists who loves it, user list who comment on it. I try to save album with the users once. Then I got the problem:  primary key cannot be the same.
Now I check and save each user when I init user the album contains.
The problem has been solved.


",wakaryry,mrackwitz
2580,2015-09-25 14:48:59,"@mrackwitz Elegant! Thanks a lot!
",wakaryry,mrackwitz
2573,2015-09-24 21:07:57,"This seems right to me, thanks @kishikawakatsumi!
",jpsim,kishikawakatsumi
2569,2015-09-25 10:30:11,"@mrackwitz @jpsim 

Is there a prevision to add this functionality in the near future?
A mobile database without this functionality loses much value.

Thank you!
",mhergon,mrackwitz
2569,2015-09-26 08:35:01,"@jpsim Ok, thanks!
",mhergon,jpsim
2567,2015-09-24 00:46:18,"Thanks for the PR, @conradev! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,conradev
2562,2015-09-26 01:09:53,"@peterpaulis I can't reproduce the issues you've been having. Here are some unit tests I wrote based on your descriptions of your models:



and then from your second comment:



So this is all working as expected for me. Could you please post similar test code that fails for you so we can continue to investigate?

Thanks!
",jpsim,peterpaulis
2562,2015-09-29 19:18:52,"I'm not sure what you mean by your last comment, @peterpaulis. Are you asking for more sample code? What about ""moving aid to c""?

The sample code I gave above is all in Objective-C and I think covers the use cases you were looking for...
",jpsim,peterpaulis
2562,2015-10-05 19:49:29,"Closing since we've provided sample code and haven't heard back from @peterpaulis.
",jpsim,peterpaulis
2561,2015-09-25 18:58:42,"Thanks for that additional info, @andr3a88. Unfortunately the LLDB plugin hasn't seen much active development since its initial release, and we currently lack the resources to optimize its performance in cases where there are potentially a large amount of data to load in memory.

We'd certainly welcome any contributions that could improve this situation, however. If you feel up for it!

For now, I'll be closing this issue, but don't hesitate to reach out again if you have any further questions.
",jpsim,andr3a88
2560,2015-09-25 20:08:31,"Thanks @mrackwitz!
",jpsim,mrackwitz
2559,2015-09-24 10:41:58,"@jasarien: Thanks for reporting back. We'll investigate that and will report, as soon as we know more.
",mrackwitz,jasarien
2559,2015-09-24 10:49:41,"Thanks, looking forward to it. (Reposted, as I originally posted on the wrong account >.< )

@mightyleader Glad I'm not alone.
",jasarien,mightyleader
2559,2015-09-24 14:53:39,"@jasarien ahh makes sense that it does that somewhere along the line yeah.
",mightyleader,jasarien
2559,2015-09-24 16:48:27,"I confirmed both `NSTemporaryDirectory()` and `Library/Caches` are still writable. It seems that `mkfifo()` function and `mknod()` function are not permitted any directory from beta2.

@jasarien Your above error https://github.com/realm/realm-cocoa/issues/2559#issuecomment-142710156 shows `""open() failed: No such file or directory""`. I cannot reproduce the same error. Could you please make sure that error happens in beta2?  
",kishikawakatsumi,jasarien
2559,2015-09-24 21:55:51,"@kishikawakatsumi That was the `localzedDescription` of the `NSError` object returned from `[RLMRealm realmWithConfig:error:];`
",jasarien,kishikawakatsumi
2559,2015-09-25 20:35:53,"@jasarien the `seg-tvos` branch is not ready to be built by the general public at the time being as it depends on some private builds of Realm's core C++ library.
",jpsim,jasarien
2559,2015-09-25 22:32:24,"@jasarien I've updated #2506 with tvOS builds of Realm's C++ core, along with the following note in the PR:

> **Note to Realm users:** You may use this branch to begin preliminary tvOS development, but these builds are not suitable for production use. Expect this branch to be rebased at any time, and features could be added/removed at any point in time.
",jpsim,jasarien
2559,2015-09-25 23:26:56,"@jpsim Thank you! I really appreciate all the help you and the other Realm peeps have given over the last few days. 
",jasarien,jpsim
2558,2015-09-29 22:45:21,"@fiancrs have you had the chance to undo overwriting `PODS_ROOT` and then sharing the complete CocoaPods error message here so we can help you fix your project?
",jpsim,fiancrs
2558,2015-10-01 18:26:48,"Closing assuming @fiancrs resolved their issue.
",jpsim,fiancrs
2558,2016-02-22 09:21:38,"@jpsim Any plans on supporting it? I am forced to do so, as other things are not working properly with stable cocoapods version. With beta I don't have any problems except for RealmSwift import. :( 
",bimusiek,jpsim
2558,2016-04-07 12:53:24,"@mrackwitz you're right, I updated cococapods



Then I run:



And all works fine, thanks!
",velthune,mrackwitz
2556,2015-09-24 19:28:07,"Sorry, did missed previous answers because my page was out-of-date. I'd support @TimOliver's recommendation. But there seems some further investigation needed.
",mrackwitz,TimOliver
2556,2015-09-29 19:28:02,"@TimOliver can you look into this? Is my assumption from my last comment accurate, that we don't yet support List equality predicates? Some digging in our tests is necessary here.
",jpsim,TimOliver
2556,2015-09-30 05:25:56,"@jpsim Sure! I'll have a look through our tests and see if  I can find something matching this sort of case.
",TimOliver,jpsim
2556,2015-09-30 09:01:21,"Oops, actually. Before I get too far ahead of myself. In this code sample, `shoppingList` isn't a `List` object, it's a `ShoppingList` object.

@azamsharp Just to confirm, what exactly is the `ShoppingList` object? Can you post its code here? 

Additionally, when you're calling the `(""shoppingList == %@"", self.shoppingList)` filter, you definitely are actually getting `GroceryItem` objects back from it, however each and every one of those objects have a nil value for their `groceryCategory` property, even though they're not supposed to, right?
",TimOliver,azamsharp
2556,2015-10-15 17:13:17,"@azamsharp, it looks like we need more information to assist you further. If you still need assistance with this, please reopen the issue and provide the details that @TimOliver requested above.
",bdash,TimOliver
2556,2015-10-15 17:13:17,"@azamsharp, it looks like we need more information to assist you further. If you still need assistance with this, please reopen the issue and provide the details that @TimOliver requested above.
",bdash,azamsharp
2554,2015-09-22 21:10:27,"@jpsim Theres any idea when it will be implemented? It was suggested October 14, 2014 ;(

By the way, theres any date string format that Realm automatically convert as a NSDate?

Thanks
",lucianocn,jpsim
2554,2015-09-23 04:45:03,"@jpsim I really appreciate your answer! I'll do my best to help Ream with this feature.
",lucianocn,jpsim
2553,2015-09-22 17:58:23,"@tgoyne Can you recommend me the best Swift JSON mapping library?

Thanks!
",mhergon,tgoyne
2553,2015-09-22 18:09:06,"@jpsim Is there any example with Realm integration and Realm().create() function?

Thanks again!
",mhergon,jpsim
2553,2015-09-22 18:24:33,"@jpsim  Ok, thanks!
",mhergon,jpsim
2553,2016-04-03 10:57:32,"@tgoyne @mhergon I have and existing .realm file with one of the properties named `description`. Is there a way I can read the file, e.g. by mapping `description` from the file to a different key in my `Object` subclass?
",vadim-fueled,tgoyne
2553,2016-04-03 10:57:32,"@tgoyne @mhergon I have and existing .realm file with one of the properties named `description`. Is there a way I can read the file, e.g. by mapping `description` from the file to a different key in my `Object` subclass?
",vadim-fueled,mhergon
2552,2015-09-25 22:37:39,"@hibento @nicopuri we only support Carthage via binary releases. #2323 is a work-in-progress PR that would add support for Carthage when building from source.
",jpsim,nicopuri
2550,2015-09-30 04:07:11,"@jpsim: Fair! Sorry I forgot to do that myself.

@TimOliver: Thanks for the advice. I have to say we are a little overloaded with other work right now but I will reference your comment when I next consider the topic!
",dennislysenko,jpsim
2550,2015-09-30 04:07:11,"@jpsim: Fair! Sorry I forgot to do that myself.

@TimOliver: Thanks for the advice. I have to say we are a little overloaded with other work right now but I will reference your comment when I next consider the topic!
",dennislysenko,TimOliver
2549,2015-09-29 19:25:17,"@tspecht were you ever able to create a repro case for us to verify and troubleshoot? The `invalidated` key _should_ be KVO-compliant.
",jpsim,tspecht
2549,2016-08-17 23:58:29,"@alexgarbarev could you please file a new issue with as much information as possible that could help us identify when this happens? It will be difficult to impossible for us to make progress on it until we can reproduce it ourselves thouhg.
",jpsim,alexgarbarev
2549,2016-08-18 11:54:18,"Ok, thanks @jpsim. Finally I've replicated that crash and did special github repo with demo: https://github.com/alexgarbarev/RealmKVOCrash/
It's pretty easy to replicate - you should delete object, while it observed by KVO. Should I still create a new issue? I think it's pretty much the same problem - same stacktrace. 
",alexgarbarev,jpsim
2549,2016-08-19 13:43:37,"Thanks @tgoyne. I've tried `master` branch in my demo repository from above. Yep, that crash was fixed, but I was able to replicate another one. (see the screenshot)
![Crash](https://dl.dropboxusercontent.com/u/3942667/2016-08-19_18-45-34.png)

It looks like sometimes object deleted while another KVO notification isn't complete yet, so KVC call in change dictionary composing fails with exception:



You can replicate that crash in the demo from above (I've updated realm and pushed updates). It happens time to time, but you'll face with that at least once per 3-4 runs
",alexgarbarev,tgoyne
2549,2016-08-19 19:00:10,"Nice catch @alexgarbarev, let's reopen this.
",jpsim,alexgarbarev
2549,2016-08-20 21:15:12,"@tgoyne @jpsim 
**UPD:**  this night spent not for nothing. Demo repo from above updated. Now it crashes in 100% runs for me. My observation is:
- it crashes when main runloop paused (it happens during UITableView deceleration animation for example) and we update and delete same object. It looks like KVO-handling on main thread runs on invalidated object then (after main runloop resumed).

Please let me know if I can help with something.
",alexgarbarev,jpsim
2549,2016-08-20 21:15:12,"@tgoyne @jpsim 
**UPD:**  this night spent not for nothing. Demo repo from above updated. Now it crashes in 100% runs for me. My observation is:
- it crashes when main runloop paused (it happens during UITableView deceleration animation for example) and we update and delete same object. It looks like KVO-handling on main thread runs on invalidated object then (after main runloop resumed).

Please let me know if I can help with something.
",alexgarbarev,tgoyne
2547,2015-09-21 16:38:19,"Glad your resolved whatever this was, @nuke99!
",jpsim,nuke99
2546,2016-04-15 03:12:55,"@jpsim Whether they will be implemented ?
",mouse-lin,jpsim
2545,2015-09-21 16:38:54,"Thanks for chiming in @segiddins!
",jpsim,segiddins
2544,2015-09-18 07:58:22,"@staticdreams, I'm using the master branch: `pod 'RealmSwift', '~> 0.95.0'`

But when I change my podfile to:
`pod 'Realm', :git => 'https://github.com/realm/realm-cocoa.git', :branch => 'swift-2.0'`
`pod 'RealmSwift', :git => 'https://github.com/realm/realm-cocoa.git', :branch => 'swift-2.0'`

And run `pod install`, it's getting this error: 

> Analyzing dependencies
> 
> CocoaPods 0.39.0.beta.4 is available.
> To update use: `gem install cocoapods --pre`
> [!] This is a test version we'd love you to try.
> 
> For more information see http://blog.cocoapods.org
> and the CHANGELOG for this version http://git.io/BaH8pQ.
> 
> Pre-downloading: `Realm` from `https://github.com/realm/realm-cocoa.git`, branch `swift-2.0`
> 
> ――― MARKDOWN TEMPLATE ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
> 
> ### Command
> 
> 
> 
> ### Report
> - What did you do?
> - What did you expect to happen?
> - What happened instead?
> 
> ### Stack
> 
> 
> 
> ### Plugins
> 
> 
> 
> ### Podfile
> 
> 
> 
> ### Error
> 
> 
> 
> ――― TEMPLATE END ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
> 
> [!] Oh no, an error occurred.
> 
> Search for existing GitHub issues similar to yours:
> https://github.com/CocoaPods/CocoaPods/search?q=No+such+file+or+directory+-+%2Fvar%2Ffolders%2F7l%2Fnqj98bv93bn9v1q865zplgpm0000gp%2FT%2Fd20150918-1507-1wblxpc&type=Issues
> 
> If none exists, create a ticket, with the template displayed above, on:
> https://github.com/CocoaPods/CocoaPods/issues/new
> 
> Be sure to first read the contributing guide for details on how to properly submit a ticket:
> https://github.com/CocoaPods/CocoaPods/blob/master/CONTRIBUTING.md
> 
> Don't forget to anonymize any private data!
",mcvasquez,staticdreams
2544,2015-09-18 11:54:53,"@mcvasquez that's a CocoaPods issue that has been fixed in the 0.39 betas. 
",segiddins,mcvasquez
2544,2015-12-21 05:36:55,"I had same error @mcvasquez Error was complete gibberish and provided no clues. I am on pod 0.37.2 My issue was  s.name value did not match the pod name i had in my podfile. 
",a-vlad,mcvasquez
2543,2015-09-21 16:07:09,"> models with no properties can't actually have instances persisted

@dave-trudes we're tracking that issue as #1943, so I'm closing this ticket as a duplicate. But please let us know if you have any further questions.
",jpsim,dave-trudes
2538,2015-09-17 08:05:11,"Hey @feluraschi,
Yeah we did try it out a while back but settled on waffle.io instead. So if anything we should make a notice of that :-)
I can only recall a few of the reasons for that choice, like you only support chrome, didn't support multiple repos in one board and general UI impression.
Really hope you get some of that resolved. There are a lot of features missing from all github issue tools, so plenty of opportunity to make a great tool. 
Cheers
",bmunkholm,feluraschi
2538,2015-09-17 21:58:56,"Hi @bmunkholm, thank you for your feedback! ZenHub has improved greatly over the recent months. We have added many new features and out of the ones you mentioned that we lacked, we do now have multi-repo boards. Would love for you and your team to give it another try and let me know what you think :)  
",feluraschi,bmunkholm
2526,2015-09-25 17:36:41,"@tgoyne this is good to go
",jpsim,tgoyne
2525,2015-09-15 07:13:14,"@tgoyne not sure I'm doing it correctly, but decided to reuse existing `RLMArray` by calling `addObject:`
Later I'm setting it to the relationship and it gets purged by code from RLMAccessor above.

I've fixed it already in my code, but assuming this to be a bug :)
",dimazen,tgoyne
2523,2015-09-14 11:37:48,"@angerman, can you outline why you would find it useful to derive from `Result`?
",bdash,angerman
2521,2015-09-11 18:27:49,"@segiddins Wait, so I need to pass a configuration around everywhere? I was hoping it'd be as simple as me directing a migration to a specific path. Then, once migrated, I can take the migration out of my code and continue on my merry way by going to the same customPath.
",dilizarov,segiddins
2521,2015-09-11 18:59:41,"@segiddins hmmm, I replaced `let realm = Realm(configuration: config)!` with `migrateRealm(configuration: config)` but I'm still getting `Terminating app due to uncaught exception 'RLMException', reason: 'Provided schema version 0 is less than last set version 1.'`
",dilizarov,segiddins
2521,2015-09-11 20:35:15,"@segiddins Alright, so I suppose that I'll have a migrationBlock in my defaultConfigs and it'll be empty for the sake of automatically updating added/removed params. Whenever I update my app and change any model parameters (add or remove), then I just need to increment the schemaValue and it'll work perfectly every time? 
",dilizarov,segiddins
2519,2015-09-28 22:15:21,"Turns out that this bug only applies to Xcode 7.0, and that Xcode 6.4 and 7.1 are unaffected. I'm closing this issue since it's a bug in Swift itself, and resolved as of Xcode 7.1.

The workaround @bdash suggested above should be sufficient for those of you on Xcode 7.0.
",jpsim,bdash
2519,2015-10-20 18:56:45,"@suleymancalik could you please share a complete code sample that demonstrates the issue you're having? We haven't been able to reproduce this issue as of Xcode 7.0.1.
",jpsim,suleymancalik
2519,2015-10-21 07:46:41,"@jpsim 

It happens while using Object's subclass as dictionary key. You can see my project's errors and structure.

I have also created a sample repo for issue.
https://github.com/suleymancalik/RealmTest

![ekran resmi 2015-10-21 10 04 18](https://cloud.githubusercontent.com/assets/445127/10629877/48ffde9e-77db-11e5-91d9-04c2ce9755d5.png)

![ekran resmi 2015-10-21 10 04 33](https://cloud.githubusercontent.com/assets/445127/10629885/54b1d864-77db-11e5-9f87-c245e691455c.png)

![ekran resmi 2015-10-21 10 04 44](https://cloud.githubusercontent.com/assets/445127/10629887/58db7896-77db-11e5-8024-a71cac86979c.png)

![ekran resmi 2015-10-21 10 04 54](https://cloud.githubusercontent.com/assets/445127/10629888/5c28e6fa-77db-11e5-9f5d-d3eeeb1c0fe6.png)
",suleymancalik,jpsim
2519,2015-10-21 14:59:34,"Thanks for the sample project, @suleymancalik. I've confirmed that this is still an issue in Xcode 7.0.1 and Xcode 7.1 Beta 3.

I'm curious as to why it worked the last time I checked... maybe I tried with an OS X project?

In any case, I think the first thing to do here is to file a radar with Apple at bugreport.apple.com indicating this is a regression. Then we can look into ways that we could work around this from within Realm Swift itself.

Until then, you'll have to use the workaround described by @bdash above.
",jpsim,bdash
2519,2015-10-21 14:59:34,"Thanks for the sample project, @suleymancalik. I've confirmed that this is still an issue in Xcode 7.0.1 and Xcode 7.1 Beta 3.

I'm curious as to why it worked the last time I checked... maybe I tried with an OS X project?

In any case, I think the first thing to do here is to file a radar with Apple at bugreport.apple.com indicating this is a regression. Then we can look into ways that we could work around this from within Realm Swift itself.

Until then, you'll have to use the workaround described by @bdash above.
",jpsim,suleymancalik
2519,2016-04-05 21:11:01,"@ozgur have you filed a radar or a ticket on bugs.swift.org? Those are probably the most effective ways of informing Apple about the problem.
",jpsim,ozgur
2519,2016-05-05 07:32:51,"I have the same issue.
@ozgur what's your solution to this?
",harryworld,ozgur
2519,2016-05-09 09:39:53,"@harryworld: Removing the redundant `Equatable` statement and overriding the obj-c `isEqual:` function, did the trick for me. Can't say if this is a acceptable solution at all.
",basvankuijck,harryworld
2519,2016-05-14 19:07:11,"@ozgur while the issue of Objects nor conforming seems to be fixed, any subclasses wanting to override the Equatable and Hashable methods seem to be ignored.

I'm Seeing the same issue here after upgrading from 7.3 to 7.3.1, sadly it looks like it's now ignoring my implementations of the Hashable and Equatable methods on my Object subclasses.

Overriding isEqual as suggested by @harryworld solves it on my end as well. 
",jmejiaa,ozgur
2519,2016-05-14 19:07:11,"@ozgur while the issue of Objects nor conforming seems to be fixed, any subclasses wanting to override the Equatable and Hashable methods seem to be ignored.

I'm Seeing the same issue here after upgrading from 7.3 to 7.3.1, sadly it looks like it's now ignoring my implementations of the Hashable and Equatable methods on my Object subclasses.

Overriding isEqual as suggested by @harryworld solves it on my end as well. 
",jmejiaa,harryworld
2519,2016-09-27 18:32:27,"@frederic-adda I'm not sure I fully understand everything from your last comment, but it sounds like you should be [filing a new issue](https://github.com/realm/realm-cocoa/issues/new), detailing exactly what you're doing, what you think should happen, what's actually happening instead and share code samples for us to reproduce.
",jpsim,frederic-adda
2517,2015-09-24 06:19:15,"@conradwt Hi Conrad! I'm just going through the issues here and touching base on some of the ones that haven't been followed up properly yet.

In what context would you want to uninstall Realm? Are you wanting to switch away from Realm to another library? And if so, how come?

In any case, at this point, I'm not sure if there's much to actually write in regards to 'uninstalling' Realm. Most often than not, it's simply a matter of removing the frameworks references from your app project.
",TimOliver,conradwt
2517,2015-09-24 22:06:47,"@TimOliver  In short, I need to be able to remove the templates that were installed via the zip file on Mac OS X.  

Why I'm switching away?  I prefer to stick with the Apple frameworks at this time for persistence.
",conradwt,TimOliver
2517,2015-09-25 20:50:45,"@jpsim Thanks for the information because this has resolved my issue.
",conradwt,jpsim
2516,2015-09-11 14:04:13,"@segiddins how can I share to you this project? Its a restricted project. Can I give you read permission in the repo?
",klevison,segiddins
2516,2015-09-11 15:22:20,"@klevison emailing a zip to help@realm.io would be awesome, thanks!
",segiddins,klevison
2516,2015-09-12 03:28:33,"@jpsim @segiddins thank you guys. Amazing job and support.
",klevison,jpsim
2516,2015-09-12 03:28:33,"@jpsim @segiddins thank you guys. Amazing job and support.
",klevison,segiddins
2514,2015-09-25 17:17:50,"@kishikawakatsumi doesn't this also require that if a custom initializer is added to an `Object` subclass, that `init()` _and_ `init(value:)` also be implemented?
",jpsim,kishikawakatsumi
2514,2015-09-25 17:55:51,"@jpsim Yes. When this PR is merged, we must override `init()` and `init(value:)` to implement a custom initializer. Like below:

### Before:



### After:


",kishikawakatsumi,jpsim
2513,2015-09-10 15:51:50,"@dhmspector  has made no promises about binary compatibility with Swift, unfortunately. We plan on putting out a new point release compiled with the GM imminently, but in the meantime, you can try building RealmSwift from source or via CocoaPods -- instructions for both are given at https://realm.io/docs/swift/latest/#installation-swift-20.
",segiddins,dhmspector
2511,2015-09-10 08:34:44,"Thanks for the PR, @andr3a88! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,andr3a88
2511,2015-09-10 15:17:37,"@jpsim Done!
",andr3a88,jpsim
2510,2015-09-10 15:12:47,"Thanks for reporting this @javialgaba. We'll look into this, but before we dive in, I want to share my preliminary thoughts.

In 0.93.2, we introduced #2077, which we knew would cause performance regressions in some cases:

> Fix a case where data loss would occur if a device was hard-powered-off shortly after a write transaction was committed which had to expand the Realm file.

The core PR https://github.com/realm/realm-core/pull/875 has a bit more information:

> Fixed durability issue in case of power / system failures on Apple platforms. We now use a stronger synchronization (`fcntl(fd, F_FULLFSYNC)`) to stable storage when the file is extended.

We do this to work around issues in Apple platforms' file system that don't fully flush out data to disk in a permanent state in cases where the device powers down shortly after a write. This caused data corruption in some rare cases, and so preventing that was worth introducing a performance regression when expanding the file (which only happens in certain intervals).

So to recap, this performance regression may be the result of this intentional change. But we'll still look into it further to see if there are any other factors contributing to the longer open times for your file.
",jpsim,javialgaba
2510,2015-09-11 07:56:21,"First of all, thank you very much for you quick response ;)

@jpsim #2077 was also my main thought. But I still find this incredible slow. 

I have run the test @tgoyne posted and I dont get the same results. Not even close. I know I'm running the tests on an iMac (Late 2012) without SSD, but I'm getting values much much worse. In fact, I've tweaked the test to do only 10 runs instead of 50 because it took really long to execute on 0.93.2.

I share my results with you.



**Realm 0.93.1**

| measureBlock | full test |
| --- | --- |
| 0,015 | 0,567 |
| 0,016 | 0,425 |
| 0,017 | 0,438 |
| 0,014 | 0,406 |
| 0,014 | 0,403 |

**Realm 0.93.2**

| measureBlock | full test |
| --- | --- |
| 4,082 | 41,089 |
| 3,845 | 38,717 |
| 4,007 | 40,332 |
| 3,955 | 39,811 |
| 3,979 | 40,049 |

Thank you very much for your help.
",javialgaba,jpsim
2510,2015-09-11 07:56:21,"First of all, thank you very much for you quick response ;)

@jpsim #2077 was also my main thought. But I still find this incredible slow. 

I have run the test @tgoyne posted and I dont get the same results. Not even close. I know I'm running the tests on an iMac (Late 2012) without SSD, but I'm getting values much much worse. In fact, I've tweaked the test to do only 10 runs instead of 50 because it took really long to execute on 0.93.2.

I share my results with you.



**Realm 0.93.1**

| measureBlock | full test |
| --- | --- |
| 0,015 | 0,567 |
| 0,016 | 0,425 |
| 0,017 | 0,438 |
| 0,014 | 0,406 |
| 0,014 | 0,403 |

**Realm 0.93.2**

| measureBlock | full test |
| --- | --- |
| 4,082 | 41,089 |
| 3,845 | 38,717 |
| 4,007 | 40,332 |
| 3,955 | 39,811 |
| 3,979 | 40,049 |

Thank you very much for your help.
",javialgaba,tgoyne
2509,2015-09-24 06:15:40,"@mustafa-almulla Thanks for following this up on the Realm GitHub like I suggested Mustafa! I hope that cleared up the reason why JSON-mapping was implemented as it was in Realm.
",TimOliver,mustafa-almulla
2507,2015-09-09 22:52:51,"@mosesoak this is actually not a bug, but rather Swift & ARC behaving according to ARC's rules. As [documented](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html#//apple_ref/doc/uid/20000994-BAJHFBGH), methods that begin with `new` return `+1`d objects which must then be balanced by a `release` or `autorelease`, and not `retain`ed.

This [StackOverflow answer](http://stackoverflow.com/questions/15747267/objective-c-naming-conventions-with-arc-and-possible-caveats) does a great job of explaining what exactly ARC is doing under the hood in this situation.

I hope that helps clarify things!
",segiddins,mosesoak
2507,2015-09-10 05:48:34,"Thanks Sam, I was not aware of that language feature. Apparently it affects properties as well as methods.

> On Sep 9, 2015, at 3:53 PM, Samuel E. Giddins notifications@github.com wrote:
> 
> @mosesoak this is actually not a bug, but rather Swift & ARC behaving according to ARC's rules. As documented, methods that begin with new return +1d objects which must then be balanced by a release or autorelease, and not retained.
> 
> This StackOverflow answer does a great job of explaining what exactly ARC is doing under the hood in this situation.
> 
> I hope that helps clarify things!
> 
> —
> Reply to this email directly or view it on GitHub.
",mosesoak,mosesoak
2506,2015-10-12 08:33:40,"I'm getting the same issue as @mightyleader by using the beta 3, but switching to static libraries didn't solve the issue for me. Any news about beta 3 support?
",tbaranes,mightyleader
2506,2015-10-21 02:11:04,"@kishikawakatsumi this needs rebasing, would you have time to take care of that?
",jpsim,kishikawakatsumi
2506,2015-10-21 11:43:33,"@jpsim I'm working rebasing progress on https://github.com/realm/realm-cocoa/pull/2721
",kishikawakatsumi,jpsim
2506,2015-10-23 17:30:22,"@mightyleader We don't have the plan to provide binary release of this version of Realm, sorry. You can build from source. Checkout `kk-tvos` branch, then execute `sh build.sh tvos-swift`.
",kishikawakatsumi,mightyleader
2506,2015-11-12 05:44:09,"@kishikawakatsumi What am i missing here?
`The platform of the target `ShuddleEngineTV` (tvOS 9.0) is not compatible with `Realm (0.96.2)`, which does not support `tvos``


",pranavss11,kishikawakatsumi
2506,2015-11-12 07:08:07,"@pranavss11 You should also specify `pod Realm`. `RealmSwift` depends on `Realm`. This is intended behavior of CocoaPods when installing from custom branch. Like following:


",kishikawakatsumi,pranavss11
2506,2015-11-12 08:44:04,"Thanks! Do you know if there is a timeline for this to get merged into the main branch? i currently have a pod spec for my private framework and I want to use it for a tvos app as well. Unfortunately, I can only specify dependencies with the name and the version and not the branch in the pod spec file which blocks me from building the app :( 

https://github.com/CocoaPods/CocoaPods/issues/3901

> On Nov 11, 2015, at 11:08 PM, kishikawa katsumi notifications@github.com wrote:
> 
> @pranavss11 You should also specify pod Realm. RealmSwift depends on Realm. This is intended behavior of CocoaPods when installing from custom branch. Like following:
> 
> target 'EngineTV' do
>   platform :tvos, '9.0'
>   pod 'Realm', git: 'https://github.com/realm/realm-cocoa', branch: 'kk-tvos'
>   pod 'RealmSwift', git: 'https://github.com/realm/realm-cocoa', branch: 'kk-tvos'
> end
> ―
> Reply to this email directly or view it on GitHub.
",pranavss11,pranavss11
2504,2015-09-13 21:16:03,"@danielreiser as mentioned in #2506, we need an update to our core build process before we can support it here. We'll update that PR if/when we decide to move forward with it.

Given the 1MB local storage limitation, we may need to rethink our Apple TV strategy before committing to anything.
",jpsim,danielreiser
2504,2015-09-21 15:35:41,"@jpsim Is there any update you can share on the decision to support tvOS? Do we need temporary move back to CoreData if I want to have an app ready when the Apple TV launched by the end of October?
",ronaldmannak,jpsim
2504,2015-09-21 16:28:31,"That's great news, thanks @jpsim (email sent)
",ronaldmannak,jpsim
2504,2015-10-20 16:04:49,"[TechCrunch article](http://techcrunch.com/2015/10/19/tim-cook-says-the-new-apple-tvs-are-coming-next-week/):

> Pre-orders for the new Apple TVs are set to begin next Monday, Apple CEO Tim Cook said onstage at the WSJD Live conference, with shipments likely to be sent out by the end of next week.

@jpsim When will the official RealmSwift support for tvOS be released?
",pilwon,jpsim
2503,2016-08-25 16:56:19,"@basememara You should be able to pass an `NSNumber` there as well. We're looking to fix this to work with `Int8`/`Int16`/`Int32`/`Int64` in Realm Swift for Swift 3. Thanks for bringing attention to this! https://github.com/realm/realm-cocoa/issues/4007
",JadenGeller,basememara
2499,2015-10-07 22:01:34,"Thanks for the tip about `accessorClass`, @tgoyne.

As for updating the target table to match the schema after performing the renaming, would that mostly just be a matter of calling `ObjectStore::create_tables()` with the `update_existing` argument set to `true` immediately after the rename?
",jpsim,tgoyne
2499,2015-11-10 21:56:40,"@magyarosibotond I'm still working on this functionality. I don't have a timeline on when I'll be able to complete this work.
",jpsim,magyarosibotond
2499,2015-11-10 22:03:28,"@jpsim Cool! Can't wait to be ready! Any alternative solution until then?
",magyarosibotond,jpsim
2499,2017-03-08 22:41:25,@jpsim Any updates here?,codytwinton,jpsim
2497,2015-09-10 15:30:22,"@tgoyne @bdash please review
",segiddins,tgoyne
2497,2015-09-28 19:56:06,"@bmunkholm yes, this is not sufficiently tested IMO.
",jpsim,bmunkholm
2497,2015-12-29 19:22:04,"@bdash: Is that still required or can we close that as being superseded by newer concepts?
",mrackwitz,bdash
2496,2015-09-28 19:53:45,"@jpsim: Anything more to do?
",bmunkholm,jpsim
2496,2015-09-28 19:57:06,"@bmunkholm yes, the feedback from @tgoyne still hasn't been addressed.
",jpsim,bmunkholm
2494,2015-09-11 16:42:55,"Hi @kexoth, the `objectTypes` property of `Realm.Configuration` is meant to restrict which model classes should be included in that Realm's ""schema"". This is only really useful when using multiple Realms, and you have certain models that should only be in a subset of the Realms.

If `MyClass` is a Realm model (inheriting from `RealmSwift.Object`), then the configuration you've mentioned would configure a Realm that can only store and access objects of the class `MyClass`.

You can refer to our [API reference documentation](https://realm.io/docs/swift/latest/api/Extensions/Realm/Configuration.html#/s:vVC10RealmSwift5Realm13Configuration11objectTypesGSqGSaMCS_6Object__) or the [Class Subsets](https://realm.io/docs/swift/latest/#class-subsets) section of our documentation guide for more information.

As for the `unrecognized selector` exception you're getting, that looks like it could be a bug to me. Could you please share the class definition of `MyClass`? If `MyClass` doesn't subclass `RealmSwift.Object`, then it's probably a matter of us adding some validation and throwing a more descriptive error in there.

Thanks!
",jpsim,kexoth
2494,2015-09-24 05:28:38,"@kexoth Just following this up! Aleksandar, could you please provide us with the model definition of `MyClass` so we can check to see what is causing that issue? :)
",TimOliver,kexoth
2494,2015-09-25 15:12:01,"Sorry for the delay, but I needed some time to migrate the project to Swift 2.0.

I've created a [sample project](/pristap/realm-schema-issue) out of my own project replicating the issue .

The project has the 2 models that I use `KXEntry` & `KXEntryStats` & the manager for the Realms `KXRealm`. The issue is in `KXRealm`, i.e. if I add `objectTypes:` in the initializations it fails.

What are the pre-requirements & benefits of using `objectTypes` when initializing a Realm?

Check it out & thanks for the feedback @jpsim & @TimOliver :+1: 
",kexoth,jpsim
2494,2015-09-25 15:12:01,"Sorry for the delay, but I needed some time to migrate the project to Swift 2.0.

I've created a [sample project](/pristap/realm-schema-issue) out of my own project replicating the issue .

The project has the 2 models that I use `KXEntry` & `KXEntryStats` & the manager for the Realms `KXRealm`. The issue is in `KXRealm`, i.e. if I add `objectTypes:` in the initializations it fails.

What are the pre-requirements & benefits of using `objectTypes` when initializing a Realm?

Check it out & thanks for the feedback @jpsim & @TimOliver :+1: 
",kexoth,TimOliver
2494,2015-09-25 16:22:46,"Thanks a lot for sharing that sample project, @kexoth. It really helps speed up our investigation and fixing a bug when we can see exactly what's no working.

In your case, you seem to be using `Realm.Configuration.objectTypes` correctly, but we had a bug in our schema building code that I've now issued a fix for in #2583.
",jpsim,kexoth
2494,2015-09-25 17:48:23,"@jpsim just one last question, out of curiosity, does declaring the `objectTypes` on initialization has any performance benefits or it's used only for clearance, to make the usage of the given `Realm` to be more explicit?

Thanks! 
",kexoth,jpsim
2492,2015-09-29 23:34:37,"@marlowcharite Sorry for the slow reply! This got lost on our side since @segiddins was only with us through the summer, and we dropped the ball in passing this off to others on the team.

Are you still having issues? From what I can tell it seems like you need to remove, since you will automatically inherit this:



and change your convenience initializer to use `super.init()`:



to make this a failable initializer, it could look like this:


",bigfish24,marlowcharite
2492,2015-09-29 23:34:37,"@marlowcharite Sorry for the slow reply! This got lost on our side since @segiddins was only with us through the summer, and we dropped the ball in passing this off to others on the team.

Are you still having issues? From what I can tell it seems like you need to remove, since you will automatically inherit this:



and change your convenience initializer to use `super.init()`:



to make this a failable initializer, it could look like this:


",bigfish24,segiddins
2492,2015-09-30 01:25:31,"Thanks for the reply @bigfish24. I will try this out and report back
",marlowcharite,bigfish24
2492,2015-09-30 01:58:51,"Yup that worked. I have no clue why I didn't think of that before hand. @bigfish24 
",marlowcharite,bigfish24
2489,2015-09-07 02:30:20,"@ronjumola at the moment, there's no way to use arbitrary math expressions in your queries, but @bdash was working on adding support for bounding box geo queries recently, I believe there's an open PR for that (https://github.com/realm/realm-cocoa/pull/2199).
",segiddins,ronjumola
2489,2016-07-07 09:57:50,"@segiddins Will math expression supported in Realm.js, too?

As following expression:
String where = ""("" + MyDataColumns.TIME + ""+ ("" + MyData.OFFSET + "" \* 30"" + ""))"" + ""<="" + my_value;

Thanks,
",CrystalRanita,segiddins
2489,2016-07-18 16:14:29,"@CrystalRanita you're probably looking for the [realm-js](https://github.com/realm/realm-js) repo, though the answer at the moment is still no, since this is blocked on Realm's core engine shared by both this product (Realm Objective-C and Swift) as well as Realm React Native.
",jpsim,CrystalRanita
2488,2015-09-06 01:22:54,"Okay thanks @segiddins 
",marlowcharite,segiddins
2487,2015-09-06 06:44:43,"@segiddins Can you please help me on this?
",androids-dev,segiddins
2487,2015-09-08 21:40:05,"@androids-dev can you share the code used to define your model? My guess is that the issue is that you have the `extras` property declared as a `Swift.Array`, instead of Realm Swift's `List` type.
",segiddins,androids-dev
2487,2015-09-24 05:21:03,"@androids-dev If you still haven't managed to resolve this, please share with us the code that defines your model object so that we can examine it. :)
",TimOliver,androids-dev
2485,2015-10-19 20:33:10,"@bipinvaylu we're working on a fix for that in #2707.
",jpsim,bipinvaylu
2485,2015-10-21 16:26:17,"hi @jpsim, schema versioning issue fixed and released ??
",bipinvaylu,jpsim
2485,2015-10-21 17:30:52,"@jpsim, actually `pod update` to update dependencies. Great thanks :)
",bipinvaylu,jpsim
2485,2015-10-21 17:48:32,"@jpsim updated to latest but still facing same issue when going to get default realm object `let realm = RLMRealm.defaultRealm()`. 

<img width=""576"" alt=""screen shot 2015-10-21 at 11 13 49 pm"" src=""https://cloud.githubusercontent.com/assets/717062/10645175/fa4cb3c0-7849-11e5-931a-e5cbc199563d.png"">
",bipinvaylu,jpsim
2484,2015-09-24 04:39:12,"@anbarasu0504 If you're still having issues here, please post more of your code for us to have a look. :)

It definitely sounds like some sort of scoping issue with the reference to your tableView.
",TimOliver,anbarasu0504
2483,2015-09-04 06:14:54,"@bryan1anderson I see you closed the issue -- did you get things sorted out?
",segiddins,bryan1anderson
2482,2015-09-24 04:36:40,"Thanks a lot for providing a build solution for that @JanC! 
I actually had a similar situation in one of my own apps linking against some third-party libraries, and for time constraints, I ended up simply disabling bitcode for that particular release. I'm definitely going to try that one out myself!

@gagarwal Please let us know if that solution doesn't end up working for you!
",TimOliver,gagarwal
2482,2015-09-24 04:36:40,"Thanks a lot for providing a build solution for that @JanC! 
I actually had a similar situation in one of my own apps linking against some third-party libraries, and for time constraints, I ended up simply disabling bitcode for that particular release. I'm definitely going to try that one out myself!

@gagarwal Please let us know if that solution doesn't end up working for you!
",TimOliver,JanC
2481,2015-09-06 00:54:56,"@segiddins It works.
",LuoLee,segiddins
2480,2015-09-03 19:02:04,"Thanks for filing that radar, @dgrekov. Let's keep this issue open as a reminder to check again once Xcode 7 goes GM.
",jpsim,dgrekov
2478,2015-09-02 14:44:52,"@tgoyne Thanks for your response!
I'm actually very surprised, since even after `-[RLMObject setValue:forKey:]` with `NSArray` it will return `RLMArrayLinkView` due to `RLMGetArray`. 
How likely this can be changed in future? Can I rely on this behaviour (which is perfectly fine!)?
",dimazen,tgoyne
2477,2015-09-02 16:24:55,"Thanks for reporting this, @tspecht. We've gotten another report of this issue since our 0.95 release and are tracking this in our core repo issue tracker (https://github.com/realm/realm-core/issues/1092).

I don't think your repro case contains enough information for us to reproduce, but I'll give it a shot anyway and report back.
",jpsim,tspecht
2477,2015-12-10 16:47:25,"@tspecht we believe this may have been fixed in 0.96.3. Can you try again?
",jpsim,tspecht
2477,2016-01-07 01:47:10,"@tspecht have you seen this assertion failure lately?
",jpsim,tspecht
2476,2015-09-02 02:20:58,"@jpsim, I don't think this change helps with what List is doing.
",bdash,jpsim
2476,2015-09-28 19:54:44,"@bdash: Still WIP?
",bmunkholm,bdash
2475,2015-09-03 19:42:32,"@bdash once we update, can't we get rid of some of the templating you add for changes in DateTime?
",segiddins,bdash
2475,2015-09-28 19:58:34,"@bdash: Still WIP?
",bmunkholm,bdash
2473,2015-09-01 02:53:25,"@igrampe thanks for the feature request! I believe it should already be covered by https://github.com/realm/realm-browser-osx/issues/34, though, so I'm going to close this issue.
",segiddins,igrampe
2470,2015-08-31 16:52:01,"Thanks for pointing this out, @dvor !
",segiddins,dvor
2469,2015-08-31 14:14:55,"Thanks for the PR, @bugix! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,bugix
2468,2015-08-31 20:03:33,"@anbarasu0504 I find it very surprising that including Realm in your project would have any bearing on how `NSURLConnection` works whatsoever. Are you sure you didn't make any other changes to your project at the same time, such as switching Xcode versions?
",segiddins,anbarasu0504
2465,2015-11-06 23:06:59,"@tgoyne @bdash I just updated this, could you please take another look?
",jpsim,tgoyne
2465,2015-11-18 22:44:34,"Bump @tgoyne @bdash 
",jpsim,tgoyne
2464,2015-08-28 16:16:55,"@swangy we test that all examples can compile on CI. What version of CocoaPods are you using, and can you share the full error message that you're seeing? Thanks!
",segiddins,swangy
2461,2015-08-28 05:02:10,"@bzmario can you share the code in question where you're adding the objects to the Realm? Thanks!
",segiddins,bzmario
2461,2015-08-28 05:25:06,"@bzmario this is actually the expected behavior. Realm swizzles the property accessors for your persisted properties to dynamically fetch the properties, so when you access the property multiple times, it actually returns a different instance each time, by design. If you need the same instance (for the sake of an ignored property, say), you'll need to keep a separate reference to that instance. I hope that helps explains thing!
",segiddins,bzmario
2461,2015-08-28 05:27:20,"Thank you @segiddins ! Now, I know more about Realm.
",bzmario,segiddins
2460,2015-08-28 05:03:25,"@ikeyboard can you try updating to Realm 0.95 and seeing if we've fixed the issue already? Thanks!
",segiddins,ikeyboard
2460,2015-08-28 17:34:59,"@ikeyboard I'm sure you're under the impression that you're actually using Realm Objective-C 0.95.0, but your stack trace indicates that you're running a version between 0.90.0 and 0.90.4, so please double check your Realm version.
",jpsim,ikeyboard
2459,2015-08-29 04:14:53,"@jpsim, should 4 have been ""extra columns""?
",kspangsege,jpsim
2459,2015-08-29 17:46:15,"@jpsim, is the following interpretation correct?

From an abstract point of view, there is a fixed schema which goes through a sequence of updates over time (`S_1`, `S_2`, `S_3`, ...). Each of theses updates are exclusively additive (e.g., no attribute removals). Apps (`A` and `B`) will be working with static object types (custom classes with statically specified attributes). The apps will be stepwise upgraded to match the schema changes, but they must be able to cooperate even when they are not upgraded to the same point. For example, if `A` is at `S_1` and `B` is at `S_3`, `A` and `B` must still be able to cooperate.

Contrasting alternative 1: There is no fixed schema. There are no custom object classes with statically specified attributes. Apps (`A` and `B`) work exclusively through a dynamically typed API, and may perform additive schema changes at any time.

Contrasting alternative 2: The schema is partially static and partially dynamic. For example, all objects have properties `P` and `Q`, as well as a dynamically increasing set of additional properties. Apps (`A` and `B`) will always agree on the static part. Properties `P` and `Q` are accessed by means of statically specified attributes in a custom object class. Other properties are accessed via a dynamically typed API.
",kspangsege,jpsim
2458,2015-09-09 09:22:28,"@segiddins Any updates on it? I found that implementation is almost ready except one hidden method in `RLMObjectBase`



It always returns nil, however documentation already mentions optional data support :)
",dimazen,segiddins
2458,2015-09-09 13:31:05,"@dimazen that method is only used for Realm Swift's objects. 
",segiddins,dimazen
2458,2015-09-09 14:04:49,"@segiddins sorry for dumb questions but:
- will you support optional attributes for ObjC?
- where can I read full description of how it'll be implemented? 

Thanks in advance! 
",dimazen,segiddins
2458,2015-09-09 14:21:09,"@dimazen yes, it will. When this functionality is released, the release blog post will mention how this all works, and the guides will be updated to cover the new functionality. 
",segiddins,dimazen
2457,2015-08-27 20:50:10,"@jpsim that isn't necessary, as the resolver can find the set of versions that match,
",segiddins,jpsim
2457,2015-08-28 17:55:36,"I actually added that explicit ios versioning after the fact and it did the trick.  Been too busy to post about that here.  Thanks for the help @segiddins and @jpsim 
",ajc6432,jpsim
2457,2015-08-28 17:55:36,"I actually added that explicit ios versioning after the fact and it did the trick.  Been too busy to post about that here.  Thanks for the help @segiddins and @jpsim 
",ajc6432,segiddins
2455,2015-09-22 18:04:45,"@skrew Realm 0.95.0 depends on realm-core-0.92.1.1, which includes `core/librealm-watchos.a`, so it should be available. Could you try deleting and recreating your `Pods` directory to force it to download again?
",jpsim,skrew
2454,2015-08-27 16:50:42,"@segiddins, thanks for the reply. 

I added it in the bridging header but the issues were still there. One thing that i did is included `#import ""Realm/Realm.h""` in the `Fitonomy-Swift.h` file and it worked. The only problem is that it is getting overridden for every build and I need to add it there again every time.
",vlonjatg,segiddins
2454,2015-09-01 01:09:28,"@vlonjatg did you get a chance to check if `Enable Modules` is set to `YES` in your app target's build settings?
",jpsim,vlonjatg
2453,2015-08-27 14:14:03,"@mattdelves glad to see you got things working!
",segiddins,mattdelves
2451,2015-09-08 22:05:57,"Seems fine to me. @mrackwitz, what makes this still a WIP?
",segiddins,mrackwitz
2451,2015-09-24 19:31:53,"Rebased.
@jpsim: Is that generally good to go from your point of view?
",mrackwitz,jpsim
2451,2015-09-28 19:47:52,"Can the WIP be removed now @mrackwitz?
",bmunkholm,mrackwitz
2451,2015-09-28 19:55:37,"@bmunkholm no, there are a number of feedback items that remain to be addressed.
",jpsim,bmunkholm
2451,2015-12-01 17:41:50,"@jpsim @tgoyne @bdash: It would be helpful to get some quick review from your side for the five most recent commits on this branch, just to make sure that we are all on the same site on the approach for testing I've chosen here, before taking over the tests to Swift to actually test the new error enum in that way.
",mrackwitz,jpsim
2448,2015-08-26 20:06:04,"Thanks for reporting this issue, @lionpants! The first warning is fixed in master (see https://github.com/realm/realm-cocoa/blob/35575f1dc3713a2f86f5399953cf645ebc850777/RealmSwift-swift1.2/RealmConfiguration.swift#L135). As for the deprecation warnings, those will be addressed once Realm entirely moves from the old path methods to the new configuration methods, which we intend to do for our next major release.
",jpsim,lionpants
2446,2015-08-26 06:11:07,"> @jpsim is it possible your S3 configuration changes could've caused this?

That's the most likely option I can think of too. @codesourse would it be possible for you to share your public IP address with us? You can email it to us privately to help@realm.io if you prefer. We recently had to implement some IP filtering to prevent Realm from being downloaded from countries that we aren't allowed to export to, and I get the feeling that this filtering is affecting you.
",jpsim,codesourse
2446,2015-08-26 06:18:04,"@jpsim i sent your email.
",codesourse,jpsim
2446,2015-08-26 13:55:54,"i confirm it's working now after downloading the file from @MickeyHub 's dropbox and placing into `$TMPDIR/core_bin/`

thanks again
",haitham-aboshahba-sociomantic,MickeyHub
2446,2015-09-01 17:55:15,"I am experiencing this exact issue right now targetting 0.95.0. Also your website links all lead to errors, confirming access problems (at least on my end). @jpsim 
",austinkettner,jpsim
2446,2015-09-01 18:04:05,"@austinkettner we're experiencing issues with S3 since 9am Pacific Time this morning. I'll post again here once we've resolved the issues.
",jpsim,austinkettner
2446,2015-09-01 18:09:26,"Thanks @jpsim, much appreciated!
",austinkettner,jpsim
2446,2015-09-01 19:57:59,"@bnadim that sounds like a different issue, please open a new ticket at https://github.com/realm/realm-cocoa/issues/new
",jpsim,bnadim
2446,2015-10-11 05:07:34,"Thanks @jpsim . And yes, the core has been download after 10+ times.
",luohui8891,jpsim
2446,2015-10-12 09:06:53,"same as @luohui8891, I want to die
",MickeyHub,luohui8891
2446,2015-10-14 03:56:51,"@MickeyHub hey guy, just FYI, I have tried again via US VPN, it works.
",luohui8891,MickeyHub
2446,2015-10-16 14:36:33,"thanks @MickeyHub , that worked! Although it's important to rename the downloaded file to ""core-VERSION.tar.bz2"".
",neugartf,MickeyHub
2446,2015-10-17 01:58:19,"@luohui8891  ,Thank you, I think it'll be OK.
@neugartf , I updated dropbox share link to latest realm-core(0.94.0, tag:v0.96.0)
[realm-core](https://www.dropbox.com/s/8etwdpyl9ynp81v/core-0.94.0.tar.bz2?dl=0)
",MickeyHub,neugartf
2446,2015-10-17 01:58:19,"@luohui8891  ,Thank you, I think it'll be OK.
@neugartf , I updated dropbox share link to latest realm-core(0.94.0, tag:v0.96.0)
[realm-core](https://www.dropbox.com/s/8etwdpyl9ynp81v/core-0.94.0.tar.bz2?dl=0)
",MickeyHub,luohui8891
2446,2015-10-18 10:43:53,"@losingle What is the ISP you are using? China Telecom?
",beeender,losingle
2446,2015-10-18 10:48:09,"@beeender China Telecom over Japan VPN
",losingle,beeender
2446,2015-12-27 09:43:15,"have the same issue here:

[!] /bin/bash -c 
set -e
sh build.sh cocoapods-setup

core is not a symlink. Deleting...
Downloading dependency: core 0.95.5
Downloading core failed. Please try again once you have an Internet connection.

@jpsim ,does Taiwan is one of countries that is affected by IP filtering? Thank you
",allensu212,jpsim
2446,2015-12-27 18:56:32,"> @jpsim ,does Taiwan is one of countries that is affected by IP filtering? Thank you

No, only the countries listed as blocked in our [README](https://github.com/realm/realm-cocoa#license).
",jpsim,jpsim
2446,2016-03-16 09:32:42,"@MickeyHub  You  are  right.I  meet  this  issue  frequently in China.
",zhangxistudy11,MickeyHub
2443,2015-08-25 23:51:09,"@apassant at the moment, `nil` values are only supported for `RLMObject` properties -- we haven't even decided yet if `nil` `RLMArray` properties are something that we want to support.
",segiddins,apassant
2443,2015-08-26 12:48:43,"@segiddins My bad, so I guess I misunderstood the docs. I think that would be a helpful addition, toi avoid creating RLMObjects that are simply array containers (which seems to be the current workaround?)



Do you also have an ETA re. merging null-string-beta-2 with the master branch? As currently using nil values for string prevents via null-string-beta-2 from using the latest features or the master.
",apassant,segiddins
2439,2015-08-25 21:45:18,"Just fixed this -- thanks for the heads up @yoshyosh !
",segiddins,yoshyosh
2434,2015-08-25 16:16:47,"Hey @segiddins. Thanks for the quick response. Implicitly unwrapping the optional seems to be working for us.
",rpless,segiddins
2433,2015-08-25 17:46:13,"Thanks for reporting this, @StanislavK. I can reproduce this, but what's odd is that TLSv1.2 _is_ being used for the URL connections, and according to Apple's documentation on ATS, connections made via that TLS protocol shouldn't need to be explicitly whitelisted. I'm looking into this now and will report back my findings.
",jpsim,StanislavK
2433,2015-08-25 18:28:41,"Nice find! So it seems like the appropriate solution is to use an SSL certificate signed using SHA-256 or greater, which would have to be done in Cloudflare, so I'm working on doing that now.

@StanislavK are you sure you're seeing similar issues with `RLMSendAnalytics()`? I don't see any ATS issues when running in an app, and here's what `nscurl --ats-diagnostics https://api.mixpanel.com/track` gives me:


",jpsim,StanislavK
2433,2015-08-25 19:53:43,"@jpsim - you are right. I have double checked\* and the behaviour is not related to the `RLMSendAnalytics()`!

\* i.e. the warning related to ATS is showed (even) when the following env. variable is set up:

`REALM_DISABLE_ANALYTICS` TRUE
",StanislavK,jpsim
2431,2015-08-25 03:54:59,"Hi @yaming116, do you have a question?
",jpsim,yaming116
2431,2015-08-25 04:00:46,"Hi, @jpsim . It is support schemas , like Android .Unlike now all the tables are in a database inside
",yaming116,jpsim
2430,2015-08-25 15:32:51,"@jpsim can I get a :+1: ?
",segiddins,jpsim
2422,2015-08-21 16:10:54,"@bcapps a configuration option to delete when migration needed is actually a separate issue already. 
",segiddins,bcapps
2421,2015-08-21 03:51:08,"@Onetaway you can just set your references to the `RLMRealm` to `nil`, and when the instance is deallocated, it will be closed.
",segiddins,Onetaway
2421,2015-08-21 04:41:42,"@Onetaway in that case, could you share some more of your code so we can get a sense of what's going on? Thanks!
",segiddins,Onetaway
2421,2015-08-21 06:46:28,"@segiddins I wonder whether could I delete `.realm.lock`, `.realm.log`, `.realm.log_a`  `.realm.log_b` file. I delete all these files as clear cache.
",Onetaway,segiddins
2421,2015-08-21 19:30:53,"@Onetaway could you try wrapping the code where you create & use your realm in an autoreleasepool?
",segiddins,Onetaway
2421,2015-08-31 19:23:01,"@Onetaway did using an autoreleasepool resolve your issue?
",jpsim,Onetaway
2419,2015-08-20 18:41:53,"@JonFBit this isn't very surprising to me, as currently we don't present any user-recoverable errors while committing a write transaction, though in theory we could make this not assert, I'm unsure of what the use would be -- how would you recover from being unable to write data in your app?
",segiddins,JonFBit
2419,2015-08-20 19:07:45,"@JonFBit cool! We'll track this as a feature request.
",segiddins,JonFBit
2419,2015-08-20 22:11:48,"@JonFBit you can use this flow:


",bigfish24,JonFBit
2414,2015-08-19 08:08:41,"@tgoyne 
By computed property do you mean this part of the documentation:
https://realm.io/docs/objc/latest/#relationships in the `Inverse Relationships` section, with readonly properties?
",dumoko,tgoyne
2412,2015-08-20 16:43:30,"@luongvanphuc that's a possible explanation, and I believe @TimOliver was investigating whether the Browser could actually be causing the version pinning problem.
",segiddins,luongvanphuc
2411,2016-03-16 23:13:01,"@bdash @jpsim  following up to this question. If instead of creating the object, I have an instance of the object that is fetched from realm that I need to update in background, will I need to refetch that in the background, then update that, and the refetch on main thread? 

Updated example:


",pranavss11,jpsim
2411,2016-03-16 23:13:01,"@bdash @jpsim  following up to this question. If instead of creating the object, I have an instance of the object that is fetched from realm that I need to update in background, will I need to refetch that in the background, then update that, and the refetch on main thread? 

Updated example:


",pranavss11,bdash
2411,2016-03-16 23:19:23,"@jpsim that looks like it's currently backlogged. If I was shipping this today, what would be the recommended way of doing this?
",pranavss11,jpsim
2411,2016-11-16 17:26:07,"@donaldking reads should be done on the thread that need that data, and since you appear to be using Realm to populate your UI, that implies reads should be done on the main thread.
",jpsim,donaldking
2406,2015-08-17 16:37:04,"@switchCTRL do you have permissions to read and write to the given path?
",segiddins,switchCTRL
2403,2015-08-20 16:49:59,"@minhhien177 if you could share both the Realm file and the actual assertion failure message, that would be very helpful in letting us check if this is a known issue. Thanks!
",segiddins,minhhien177
2403,2015-09-01 01:05:54,"@minhhien177 just following up on our request for the corrupted realm file and assertion failure message. We'd love to help you with this, but need more information... thanks!
",jpsim,minhhien177
2402,2015-08-16 14:57:48,"@shahankit we definitely can improve the docs, but you use the `min` method by passing in the name of the property you wish to get the minimum of. For example, `realm.objects(Person).min(""age"")` would return the minimum age of all the people (and not the youngest person). 
",segiddins,shahankit
2401,2015-08-20 18:36:59,"@tgoyne that was precisely my intention with it :) It already is semi-public, in that it's in `RLMObjectBase.h`
",segiddins,tgoyne
2401,2015-08-21 03:33:05,"@tgoyne I put it there precisely because I thought we only wanted it to be semi-public? I'm happy to document it on Object and RLMObject, though. 
",segiddins,tgoyne
2401,2015-08-21 22:33:06,"@jpsim standalone objects
",segiddins,jpsim
2400,2015-08-14 21:05:37,"@phatblat this was caused by a bad merge, but I'm shocked to see that an issue with the example project is causing carthage to be unable to build `Realm.xcodeproj` ?
",segiddins,phatblat
2399,2015-08-14 06:54:51,"I'm going to close this as a duplicate of https://github.com/realm/realm-cocoa/issues/2397, but thanks for the excellent bug report, @baek-jinoo !
",segiddins,baek-jinoo
2398,2015-08-14 01:20:15,"@shmidt can you share the whole backtrace from that exception? Thanks!
",segiddins,shmidt
2398,2015-08-14 01:43:21,"@segiddins Please take a look.


",shmidt,segiddins
2398,2015-08-16 02:04:52,"@segiddins I don't use `Realm.add(_:update:)` in this case, but I tried it before with the same results. It seems to me that checking method for unique key hasn't been tested for string...
",shmidt,segiddins
2398,2015-08-24 16:13:15,"@shmidt just following up on our request for the code you used to trigger this exception. Thanks!
",jpsim,shmidt
2398,2015-08-25 05:53:22,"@jpsim, @segiddins Sorry, I was really busy those days. Sent project today to your e-mail.
",shmidt,jpsim
2398,2015-08-25 05:53:22,"@jpsim, @segiddins Sorry, I was really busy those days. Sent project today to your e-mail.
",shmidt,segiddins
2397,2015-08-13 21:03:36,"@mcvasquez given that you're using CocoaPods and Xcode 6.4, it's very odd that the produced framework even includes bitcode
(It's also odd that including bitcode would make it 'invalid', since bitcode is just another section of the executable)
",segiddins,mcvasquez
2397,2015-08-13 21:11:24,"@segiddins do I have to downgrade to 0.93.2? Because don't have bitcode support.

One more thing, each time I run my app the console shows me: 

> Version 0.94.0 of Realm is now available: https://github.com/realm/realm-cocoa/blob/v0.94.0/CHANGELOG.md

But I've installed 0.94.1. Can be this related to my problem?
",mcvasquez,segiddins
2397,2015-08-13 21:21:37,"@mcvasquez no, that message is unrelated -- looks like our release process just forgot to update a file on S3. You shouldn't have to downgrade at all, but we need to do a bit of investigating to determine why you're experiencing app store submission issues. Are you integrating via CocoaPods as a static library or as a dynamic framework?
",segiddins,mcvasquez
2397,2015-08-13 21:35:31,"@segiddins As a dynamic framework.
",mcvasquez,segiddins
2397,2015-08-13 21:42:24,"@mcvasquez could you share the output of running the following command?
`xcodebuild -showBuildSettings | grep -i bitcode`
",segiddins,mcvasquez
2397,2015-08-14 02:47:02,"@segiddins below the message:

> 2015-08-13 22:44:47.963 xcodebuild[33387:237031] [MT] PluginLoading: Required plug-in compatibility UUID 7FDF5C7A-131F-4ABB-9EDC-8C5F8F0B8A90 for plug-in at path '~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/OMColorSense.xcplugin' not present in DVTPlugInCompatibilityUUIDs
> objc[33387]: Class XCBuildConfiguration is implemented in both /Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/Frameworks/DevToolsCore.framework/Versions/A/DevToolsCore and /Users/mcvasquez/Library/Application Support/Developer/Shared/Xcode/Plug-ins/Peckham.xcplugin/Contents/Frameworks/MHImportBuster.framework/Versions/A/MHImportBuster. One of the two will be used. Which one is undefined.
",mcvasquez,segiddins
2397,2015-08-15 04:55:11,"@tgoyne in Prerelease tab.
",mcvasquez,tgoyne
2397,2015-08-17 14:39:11,"@strongwillow that option is not available on Xcode 6.4.
",mcvasquez,strongwillow
2397,2015-09-08 21:35:40,"@tgoyne, I can't remember if you ever managed to figure out what was going on here, but I think we can safely close this issue?
",segiddins,tgoyne
2394,2015-08-13 17:21:47,"@shahankit how have you installed RealmSwift in your project?
",bigfish24,shahankit
2394,2015-08-13 17:24:40,"Yeah @bigfish24  I have and things are working great on simulator. Also I made a demo project and it worked fine on device. But it's giving me this weird error in my main project.
",shahankit,bigfish24
2394,2015-08-15 11:24:04,"@bigfish24 Things got fixed I was mistakenly using 0.94.0 instead of 0.94.1.
",shahankit,bigfish24
2393,2015-08-13 15:36:50,"@ifeherva this can sometimes happen when downloading Realm has failed. Can you try running the following for me, and installing again? Thanks!


",segiddins,ifeherva
2393,2015-08-13 16:50:20,"@tbaranes yes, a sample project that demonstrates the issue would be very helpful!
",segiddins,tbaranes
2389,2015-08-12 17:37:20,"@vmalov the issue here is that you're trying to create your `Person` object with the source value being the realm itself.

 If you change that call to `[Person createOrUpdateInRealm:realm withValue:person];`, things should work swimmingly!
",segiddins,vmalov
2387,2015-08-12 14:13:21,"Thanks for the PR, @angerman! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,angerman
2387,2015-08-13 20:37:38,"@angerman we'll need you to sign the CLA before we can review this, thanks!
",segiddins,angerman
2384,2015-08-11 20:30:02,"@Entalpi this is quite strange, and I'm unsure how things are getting to this point. Could you please share the code that led to this happening? Thanks!
",segiddins,Entalpi
2380,2015-08-11 16:52:04,"@changxiangzhong it's a bit unclear to me what you're asking. Objects persisted in a Realm will never be deleted from that Realm until you explicitly call `-[RLMRealm deleteObject:]`, and the object's `retainCount` has nothing to do with that. I hope that helps make things clearer!
",segiddins,changxiangzhong
2380,2015-08-11 17:29:08,"Hi @changxiangzhong, this is the issue tracker for the Objective-C and Swift bindings for Realm. Since you're using Realm Java, I recommend asking over there (https://github.com/realm/realm-java), on the Realm Java mailing list (https://groups.google.com/d/forum/realm-java), or on Stack Overflow, which the Realm team monitors for questions.
",segiddins,changxiangzhong
2378,2015-08-11 09:32:13,"Thanks for the PR, @porsager! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,porsager
2377,2015-09-29 20:03:49,"Wow that's really good news @jpsim :tada: Your comment just made my day!! :smiley: 

Having a huge JSON dictionary with only 1 or 2 key missing, it would really be a PITA to affect the properties and relationships (recursively) one by one manually… just because of this.  
And mutating the dictionary before calling `initWithValue:` (only workaround to far) is far from ideal either (string-typed + not this code's responsibility to know the JSON keys anyway)

I'm really looking forward for this change, would make much more sense to the API and our life much easier! :+1:
",AliSoftware,jpsim
2377,2016-08-12 20:31:30,"@jpsim If I'm understanding correctly, this issue is requesting that required properties not be checked on initialization. The properties only ought to be required once added to a Realm. Is this correct?
",JadenGeller,jpsim
2377,2016-08-15 15:54:11,"@JadenGeller your understanding is correct.
",jpsim,JadenGeller
2369,2015-08-10 18:26:03,"@cody1024d your best bet is to do exactly what you suggested -- constructing a predicate that makes those two comparisons.
",segiddins,cody1024d
2369,2015-08-10 23:06:43,"@segiddins Ok, thank you very much!
",cody1024d,segiddins
2366,2015-08-10 18:35:57,"@isaacroldan thanks for the PR, but it looks to me like it's causing compilation to fail:



Could you please share a case in which using `objectForPrimaryKey` isn't working for you ? Thanks!
",segiddins,isaacroldan
2366,2015-08-10 23:33:35,"@isaacroldan I think https://github.com/realm/realm-cocoa/issues/2374 should do the trick!
",segiddins,isaacroldan
2364,2015-08-09 23:03:22,"I wasn't even think about the other models since I'm only using that simple one. thanks @segiddins!!
",remotevision,segiddins
2364,2015-09-21 15:56:14,"@staticdreams I'm working on improving this exception message in #2496. Support for arrays of primitives is being tracked in #1120.
",jpsim,staticdreams
2364,2015-11-25 08:21:30,"@segiddins Then how can I handle string arrays in my realm object?
",fxpage,segiddins
2364,2015-11-25 08:27:40,"@fxpage Currently, you need to wrap strings in `Object`, then storing as `List`. Like following:


",kishikawakatsumi,fxpage
2364,2015-11-25 08:46:40,"@kishikawakatsumi Thanks for your reply.
",fxpage,kishikawakatsumi
2364,2015-11-25 08:49:46,"@kishikawakatsumi But create a object for only one variable?
Is there any way to make it more simple?
",fxpage,kishikawakatsumi
2364,2015-11-25 09:01:58,"@kishikawakatsumi I did as you recommended, but now I got an error Property 'stringWrapper' has been added to latest object model.
What is the issue?
",fxpage,kishikawakatsumi
2364,2015-11-25 09:06:04,"@fxpage I think it a migration issue. You need to either migrate your db or simple delete the db file and let you app recreate it.
",staticdreams,fxpage
2364,2015-11-25 09:59:59,"@staticdreams Thank you for your help.
",fxpage,staticdreams
2361,2017-03-20 10:16:49,@shmidt hey I'm working on something similar to what you mention - where by once my object is synchronised with our server the primary key may update. Are you able to provide any insight as to how you overcame the fact primary keys can't be changed after an object is persisted?,markst,shmidt
2361,2017-03-20 14:46:59,"@markst Sorry, no. I switched to Core Data instead.",shmidt,markst
2360,2015-08-21 01:50:15,"@mrshortman I'm going to close this issue for now, but feel free to re-open it if @kishikawakatsumi's comment didn't address everything!
",segiddins,kishikawakatsumi
2354,2015-08-07 19:16:12,"@ahayman ok, cool! This will be fixed by #2356, since checking for the index of an unpersisted object should just return `nil`.
",segiddins,ahayman
2352,2015-08-07 15:36:38,"Hi @strongwillow, how did you install Realm Swift? If you're using the prebuilt binary frameworks, please make sure to add a build phase to your app's main target: `bash ""${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/Realm.framework/strip-frameworks.sh""`. We detail this in our [Swift 1.2 installation instructions](https://realm.io/docs/swift/latest/#installation-swift-12), but have't reflected that in our Swift 2.0 instructions yet. I've created an issue to track updating our docs accordingly (#2353).
",jpsim,strongwillow
2352,2015-08-07 22:03:56,"@dhmspector In fact I didn't follow exactly what the blog suggested. I only used lipo to extract and combine into one arm architecture library. 
Then when I'm testing in simulator, I use the fat version of the two lib. When I'm archiving, I use the slim version. That works fine.
",strongwillow,dhmspector
2347,2015-08-05 21:14:53,"@virt87 no, the `if` statement is correct. Once you've opened a Realm at that path, you cannot set a different schema version for that path, since the open Realm would not be able to update to that new schema version you've set.
",segiddins,virt87
2347,2015-08-05 22:02:04,"@virt87 glad you were able to get things working!
",segiddins,virt87
2344,2015-08-05 01:41:47,"Thanks for the PR, @hadibadjian! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,hadibadjian
2344,2015-08-05 01:50:51,"Hi @hadibadjian, thanks for the PR. You're right that providing a generic specialization is not required, but it is _supported_ when building with Xcode 7 or later. We elaborate a bit more on how (and where) this works in the [Supported Types section](https://realm.io/docs/objc/latest/#supported-types) of our Objective-C documentation that you've linked to.

In light of this, I'll be closing this PR.
",jpsim,hadibadjian
2341,2015-08-04 15:30:13,"@pengj are you sure it's not an exception being thrown, with a message? If not, having a project we can run would make investigating much easier, thanks!
",segiddins,pengj
2341,2015-08-04 20:39:42,"@Armenm that crash looks like https://github.com/realm/realm-cocoa/issues/2332, and does not look like @pengj's crash.
",segiddins,pengj
2341,2015-08-04 20:39:42,"@Armenm that crash looks like https://github.com/realm/realm-cocoa/issues/2332, and does not look like @pengj's crash.
",segiddins,Armenm
2341,2015-08-04 20:43:24,"Thanks @segiddins for quick reply. Will comment there. Maybe it will help to fix the bug.
",Armenm,segiddins
2341,2015-08-04 22:19:38,"@segiddins There is no exception message being thrown when app crashed, the screenshot shows the moment when app crashed. I try to make a simple project to reproduce the error, but I can't reproduce it. 
",pengj,segiddins
2341,2015-08-04 22:45:22,"@segiddins When I configure the app build as release, there is no crash. 

if build in debug, the crashed happen here: 


",pengj,segiddins
2341,2015-08-04 22:45:40,"@pengj in that case, since it's actually the swift standard library crashing and not Realm, and since you can't reproduce it, I'm going to close this issue for now. Feel free to re-open it if you see this happening again!
",segiddins,pengj
2341,2015-08-04 22:48:44,"@segiddins see my updated comments 
",pengj,segiddins
2341,2015-08-05 07:59:34,"@segiddins I sent you a email with my project. Thanks for your help. 
",pengj,segiddins
2341,2015-08-05 17:04:31,"@pengj I can't reproduce this on the iPad Mini 2 I have at hand. Are there any specific steps I need to take in order to see the error?
",segiddins,pengj
2341,2015-08-05 22:34:26,"@segiddins the app crash when test in iPhone5 with iOS 8.1.3, it works for iPad air with iOS 8.4. 
",pengj,segiddins
2341,2015-08-05 23:24:39,"@pengj I don't have an iOS 8.1.3 device around, but it worked fine on a 32 bit iPod touch running 8.3.
",segiddins,pengj
2341,2015-08-06 13:34:57,"@segiddins I will close the issue for now. The crash only happens on iPhone 5 with iOS 8.1.3 as far as I can see, works well for simulator with iOS 8.1. If the build is configure as release rather than debug, it also works well. Let's wait if other developers have the same problem when update. Thanks for your help. 
",pengj,segiddins
2340,2015-08-04 17:03:59,"@ketansmodha I'm unable to reproduce the issues you're seeing. Could you try running the following and sharing the output? Thanks!


",segiddins,ketansmodha
2340,2015-08-07 21:40:35,"@segiddins I have same problem, please check following the output after taking actions as you suggested: 

-> Installing Realm (0.94.0)

> Git download
> Git download
>      $ /usr/bin/git clone https://github.com/realm/realm-cocoa.git
>      /var/folders/n9/cjps42gj4cbcjq0p0myw0l880000gn/T/d20150808-1405-fwifo1 --single-branch
>      --depth 1 --branch v0.94.0
>      Cloning into '/var/folders/n9/cjps42gj4cbcjq0p0myw0l880000gn/T/d20150808-1405-fwifo1'...
>      Note: checking out 'd6ad6cf6716d45425bab692c8a699bf2ac5ce96c'.



> Running prepare command
>    $ /bin/bash -c  set -e sh build.sh cocoapods-setup
>    core is not a symlink. Deleting...
>    Downloading dependency: core 0.92.0
>    Downloading core failed. Please try again once you have an Internet connection.
> [!] /bin/bash -c 
> set -e
> sh build.sh cocoapods-setup

core is not a symlink. Deleting...
Downloading dependency: core 0.92.0
Downloading core failed. Please try again once you have an Internet connection.

/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/executable.rb:70:in `execute_command'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/executable.rb:27:in`block in executable'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer/pod_source_preparer.rb:64:in `block (2 levels) in run_prepare_command'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer/pod_source_preparer.rb:60:in`chdir'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer/pod_source_preparer.rb:60:in `block in run_prepare_command'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/user_interface.rb:59:in`section'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer/pod_source_preparer.rb:59:in `run_prepare_command'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer/pod_source_preparer.rb:37:in`prepare!'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/downloader/cache.rb:201:in `copy_and_clean'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/downloader/cache.rb:158:in`block (2 levels) in uncached_pod'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/downloader/cache.rb:156:in `each'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/downloader/cache.rb:156:in`block in uncached_pod'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/downloader/cache.rb:180:in `call'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/downloader/cache.rb:180:in`in_tmpdir'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/downloader/cache.rb:152:in `uncached_pod'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/downloader/cache.rb:33:in`download_pod'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/downloader.rb:34:in `download'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer/pod_source_installer.rb:103:in`download_source'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer/pod_source_installer.rb:53:in `install!'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer.rb:328:in`install_source_of_pod'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer.rb:303:in `block (2 levels) in install_pod_sources'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/user_interface.rb:80:in`titled_section'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer.rb:302:in `block in install_pod_sources'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer.rb:294:in`each'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer.rb:294:in `install_pod_sources'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer.rb:143:in`block in download_dependencies'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/user_interface.rb:59:in `section'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer.rb:141:in`download_dependencies'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/installer.rb:105:in `install!'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/command/project.rb:71:in`run_install_with_update'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/command/project.rb:101:in `run'
/Library/Ruby/Gems/2.0.0/gems/claide-0.9.1/lib/claide/command.rb:312:in`run'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/lib/cocoapods/command.rb:48:in `run'
/Library/Ruby/Gems/2.0.0/gems/cocoapods-0.38.2/bin/pod:44:in`<top (required)>'
",mobilinked,segiddins
2340,2015-08-07 22:26:11,"Hm so as the error message is saying for you, `Downloading core failed. Please try again once you have an Internet connection.`

That looks like it's probably the issue for you, @mobilinked, which is not the same as @ketansmodha's issue.
",segiddins,mobilinked
2340,2015-08-07 22:26:11,"Hm so as the error message is saying for you, `Downloading core failed. Please try again once you have an Internet connection.`

That looks like it's probably the issue for you, @mobilinked, which is not the same as @ketansmodha's issue.
",segiddins,ketansmodha
2340,2015-08-07 22:29:05,"@segiddins Thanks. Tried MANY times, but failed. Do you know more details about core? where can I download it directly? 
",mobilinked,segiddins
2340,2015-08-12 20:11:36,"@ketansmodha since we haven't heard back from you for a bit, I'm going to go ahead and close this issue for now, but feel free to re-open it if you have further information or see it again!
",segiddins,ketansmodha
2340,2015-08-26 05:45:44,"Hello I am experiencing similar issues as @ketansmodha. My network seems to be fine.
",vijay120,ketansmodha
2340,2015-10-19 16:35:53,"@onmyway133 as the error message indicates, Realm's core binaries couldn't be downloaded. This can happen if you have a poor internet connection, or if AWS S3 is experiencing issues, or if you're in an embargoed country that we [legally cannot export to](https://github.com/realm/realm-cocoa/blob/v0.96.0/LICENSE#L253-L269).
",jpsim,onmyway133
2340,2015-10-20 14:24:22,"@jpsim maybe it's because of AWS S3, the next time I tried, it worked for me. Thanks
",onmyway133,jpsim
2339,2015-08-04 08:55:08,"@longxianlin Realm can work on iOS 7, unlike RealmSwift. Could you please try to use Realm Objective-C with Swift bridge? Realm Objective-C is also made to be easy to use from Swift according to Nullability and Generics support.

And please make sure to use `RLMSupport.swift` file when you use Realm Objective-C from Swift. It gives refinements for the Objective-C API for Swift.
",kishikawakatsumi,longxianlin
2339,2015-08-21 01:47:00,"@longxianlin what @kishikawakatsumi said is the best advice we have for supporting iOS 7 -- Realm Swift simply can't support it, since iOS 7 doesn't support third party dynamic frameworks and there's no way to make static libraries that contain Swift. I'm going to close this issue for now, but feel free to reopen it if you have further questions!
",segiddins,kishikawakatsumi
2339,2015-08-21 01:47:00,"@longxianlin what @kishikawakatsumi said is the best advice we have for supporting iOS 7 -- Realm Swift simply can't support it, since iOS 7 doesn't support third party dynamic frameworks and there's no way to make static libraries that contain Swift. I'm going to close this issue for now, but feel free to reopen it if you have further questions!
",segiddins,longxianlin
2337,2015-08-03 20:35:10,"@jpsim sorry for the lack of info...
1. 0.94.0
2. `Realm.framework` since we have a objc/swift code base
3. See the user object below
4. Version 6.4 (6E35b)
5. iOS 8
6. Yes, there is a user object in the Realm with `isRegistered` set to `true`

The user object:


",bsarrazin,jpsim
2337,2015-08-05 13:26:52,"@jpsim I started investigating more on my side because I was baffled as to why it worked for you.
So long story short... this is my wrapper method:



So because I was hard-typing the returned tuple's object to `AnyObject` I never picked up on the fact that I was returning, in fact, an `RLMResult` as opposed to an `RLMObject`.

![popkey](http://d3htz3r28tzhqz.cloudfront.net/Uh5BLEmQdktT11jOGHYT-DYXQy0=/original-647f0fda-21ae-472c-a719-2d2cc57adaa2.gif/47Rjx.gif?c=desktop&l=search&f=.gif)
",bsarrazin,jpsim
2334,2015-08-03 15:12:10,"@tspecht It seems the same as https://github.com/realm/realm-cocoa/issues/2332. To make sure, could you please check whether you sort by the properties of the int or long when you query the RLMResults object?

Thank you for your reporting!
",kishikawakatsumi,tspecht
2334,2015-08-03 15:29:05,"Since this is almost definitely a duplicate of #2332, we'll be closing this ticket. Let's continue the conversation over at #2332, @tspecht. Thanks for reporting this, though! We're prioritizing investigating this issue and will share any updates to #2332.
",jpsim,tspecht
2333,2015-08-03 15:36:08,"Thanks for the feature request @florianreinhart! We're already tracking this issue as #2188, so I'll be closing this one as a duplicate. Let's continue the conversation there.

Until we add support for this, can you share the use case that prompted you to look for Float and Double indexing? Indexing only really helps speed up certain types of queries relying on the indexed column, but otherwise doesn't expose any additional functionality. Everything you can do with an indexed property you can do without indexing. If you found a particular query to be slower than you needed, please post it here and we may be able to optimize it by other means.

Thanks!
",jpsim,florianreinhart
2331,2015-08-02 17:42:37,"@schickling what's happening there is the expected behavior, since your adding the person with a dog with the same id  (the primary key) as the existing one, causing the existing one to be updated. If you don't want to see the existing object updated, you'd have to give the new dog a different primary key value. I hope that helps!
",segiddins,schickling
2329,2015-08-01 19:44:42,"Thanks for the PR, @aplittlecub! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,aplittlecub
2328,2015-08-01 17:28:15,"@tonyarnold if I'm remembering correctly, this has been brought up before. What advantages do you see this bringing you?
",segiddins,tonyarnold
2327,2016-02-02 13:58:19,"@jpsim does it actually conform to SequenceType? I thought only GeneratorType ?
",hsavit1,jpsim
2326,2015-08-01 04:09:20,"@kishikawakatsumi this PR is just a first step meant to move our current API and functionality to this new interface. Adding new functionality is out of scope for this PR, but should be pretty simple to add afterwards.
",jpsim,kishikawakatsumi
2326,2015-08-01 06:56:40,"@jpsim I explicitly didn't deprecate the existing APIs because the tests rely on them so heavily
",segiddins,jpsim
2326,2015-08-01 21:32:49,"@jpsim would you also like me to deprecate the existing apis for setting encryption keys and schema versions per path?
",segiddins,jpsim
2326,2015-08-03 17:47:27,"@tgoyne the reason I went with that pattern is that it's the closest way possible of mimicking structs in Objective-C
",segiddins,tgoyne
2326,2015-08-07 20:58:46,"OK, I think this is ready for a set of eyes, @jpsim @jpsim @bdash .
",segiddins,jpsim
2324,2015-08-21 01:50:53,"@yoshyosh and I just agreed that the current code sample is clear enough, since we're already assigning to `self.token`.
",segiddins,yoshyosh
2323,2015-07-31 23:22:10,"Thanks for https://github.com/Carthage/Carthage/pull/622 and this PR, @neonichu. Ideally, we'd be able to consolidate Realm Objective-C and Realm Swift in a single Xcode project rather than add a third one to our repo, but we may consider this approach if combining isn't an option.
",jpsim,neonichu
2323,2015-10-05 16:39:52,"Until we can merge our Xcode projects, I'm in favor of pulling in this change. Although @segiddins's comment about having to build `iOS Dynamic` rather than `iOS` still stands.
",jpsim,segiddins
2323,2015-10-09 14:11:05,"@jpsim updated this to use 'iOS Dynamic' instead
",neonichu,jpsim
2323,2015-11-04 06:06:30,"Thanks for your work on this, @neonichu, but it turns out that @bdash is a wizard and managed to massively clean up & combine all our Xcode projects in #2793, which will support building Realm in Carthage from source. So I'm closing this.
",jpsim,neonichu
2322,2015-07-31 23:29:34,"Hi @wangshengjia, we're looking into this, although we haven't been able to reproduce the issue in our first attempts.
",jpsim,wangshengjia
2321,2015-08-01 04:07:36,"@segiddins addressed your feedback. I think the only things left to do are to test aggregate operations on `List`. Marking WIP until that's done.
",jpsim,segiddins
2321,2015-08-13 21:07:22,"@jpsim anything we can do to help get this in for the next release?
",segiddins,jpsim
2321,2015-08-25 15:00:58,"@tgoyne @segiddins this should now be ready for review.
",jpsim,segiddins
2320,2015-07-30 18:03:36,"@tbaranes thanks for reporting this! Is there any way you could share a project that demonstrates the issue with us, either here or privately at help@realm.io, so we can investigate? Thanks!
",segiddins,tbaranes
2320,2015-07-31 17:18:21,"@tbaranes I tried to come up with a unit test that demonstrated this issue yesterday, and was unable to. If you could share a project that exhibits the issue, I'd be able to dive in and try and fix it. Thanks!
",segiddins,tbaranes
2320,2015-08-03 16:17:44,"Thanks for taking the time to prepare a sample project reproducing the issue, @victorgama. I've been able to reproduce on my end and am debugging the issue now. I'll keep you posted.
",jpsim,victorgama
2320,2015-08-03 18:03:04,"A fix has now been merged to `master` and will be in an upcoming release. Thanks for reporting, @victorgama and @tbaranes.
",jpsim,victorgama
2320,2015-08-03 18:03:04,"A fix has now been merged to `master` and will be in an upcoming release. Thanks for reporting, @victorgama and @tbaranes.
",jpsim,tbaranes
2318,2015-07-31 14:51:41,"Thanks for your response @jpsim. I'm looking to persist data using realm with an array that has no keys. Please see an example below:



Using the solution outlined above, this results in the following error:

**Invalid value 'In this city you pay per minute.' to initialize object of type 'ABCRealmString': missing key 'value'**



RLMValidatedValueForProperty is available in [**RLMObjectBase.mm on Line 334**](https://github.com/realm/realm-cocoa/blob/master/Realm/RLMObjectBase.mm#L334)



**Parameters passed in:**



**ABCRealmString:**



If this returned `object` when there are no keys, then it would allow a flat structure (as previously mentioned) to be used with Realm.

N.B. Accidentally closed the issue, so reopened it again
",JamieCruwys,jpsim
2318,2015-08-05 12:27:28,"Thanks for your help @jpsim. That has fixed my issue!
",JamieCruwys,jpsim
2318,2016-05-27 11:05:46,"@jpsim  Thank you for your example.
",NikKovIos,jpsim
2318,2016-06-30 12:07:53,"@jpsim The first Swift example you wrote produces a compiler error with this message:

`map produces [T], not the expected contextual result type List<RealmString>`

~~However this seems, to go  away if I forcibly cast it, e.g. `as! List<RealmString>`~~
",ahmedk92,jpsim
2318,2017-03-16 13:10:25,"Hello @jpsim 
I made as you describe , but I get error ""'RLMException', reason: 'Property 'confirmedMembersIds' is declared as 'NSArray', which is not a supported RLMObject property type. "", how can I fix it?

",alexsanderkhitev,jpsim
2318,2017-03-17 02:11:32,"@bdash 
Thank you very much",alexsanderkhitev,bdash
2315,2015-08-10 15:24:34,"@brentleyjones what version of Carthage are you running on the server?
",segiddins,brentleyjones
2315,2015-11-09 21:15:22,"@istx25 Yeah, I was having the same problem using Carthage 0.8. I just updated to 0.10 and everything seems to be fine.
",jairobjunior,istx25
2313,2015-07-29 17:47:29,"@jpsim done
",segiddins,jpsim
2312,2015-07-29 15:07:16,"cc @segiddins ,thanks :)


",fewspider,segiddins
2312,2015-07-29 16:54:55,"That's really odd, @fewspider, since I can't reproduce this at all...
",segiddins,fewspider
2312,2015-07-29 17:20:35,"@segiddins  It seems like a xcode cache problem or internet work problem.When I try to `Menu > Product > Clean` and retry install again, It is working. Anyway thanks for this awesome and powerful stuff. This issue can be closed now.
",fewspider,segiddins
2312,2015-07-29 17:38:29,"@segiddins 😁
",fewspider,segiddins
2311,2015-07-31 08:08:55,"@segiddins  I've sent the two similar crash reports to you for further investigation.
",cmittendorf,segiddins
2311,2015-08-03 18:06:36,"@cmittendorf so I've spoken to our core team about this one before, and they say they'll need a project they can run in order to debug further. Could you share a project, either here or privately at help@realm.io? Thanks!
",segiddins,cmittendorf
2311,2015-08-05 17:25:28,"@cmittendorf we've supported multi-process sharing of realm files for several months now, so that alone shouldn't be causing an issue. Is it possible that this might be fixed in Realm 0.94.0? If you haven't yet, could you give that update a try? Thanks!
",segiddins,cmittendorf
2311,2015-08-06 08:41:06,"@segiddins I will try out updating our version of Realm to 0.94.0. Besides, we are using [Carthage](http://github.com/Carthage/Carthage) for dependency management and selecting a specific version seems to be a bit of a problem. Using a simple entry like `github ""realm/realm-cocoa""` in our Cartfile will checkout `*** Checking out realm-cocoa at ""null-string-beta-2""`.
",cmittendorf,segiddins
2311,2015-08-06 16:14:43,"@cmittendorf I believe my patch to fix that in Carthage is in the latest version. Are you using 0.7.5?
",segiddins,cmittendorf
2311,2015-08-07 07:56:22,"@segiddins Thanks, yes, upgrading Carthage to 0.7.5 did solve the error building the frameworks.
",cmittendorf,segiddins
2307,2015-07-28 17:34:50,"Ok cool, thanks @jpsim for the quick response.
",bsarrazin,jpsim
2306,2015-08-03 01:49:06,"FYI `7A120f` is the build number for Xcode 7 beta 1. @neon0619 I don't know which version of Xcode 7 you're using, but the latest one is beta 4 (`7A165t`), which is the only version Realm Swift supports at the moment.
",jpsim,neon0619
2306,2015-08-03 01:57:39,"@jpsim Thanks for the correction, the Beta 5 that i mention is actually for OS X El Capitan Developer Beta 5. Thanks again for your comment. :)
",neon0619,jpsim
2306,2015-08-03 02:07:33,"@jpsim  Thanks again. I appreciate your comment here. :+1:  
",neon0619,jpsim
2306,2015-08-17 16:59:17,"@imran20487 currently, the Swift 2 branch of Realm Swift requires Xcode 7 beta 5
",segiddins,imran20487
2306,2015-08-18 14:19:39,"@segiddins With cocoapods it does not work, but with Using source (realm.framework, realmswift.framework) it works.
",imran20487,segiddins
2306,2015-09-06 21:04:55,"I'm getting the same error that @imran20487 was getting 3 weeks back. `dyld: Symbol not found: __` only mine is with `__TMPdVSs12MapGenerator`
",marlowcharite,imran20487
2304,2015-10-09 22:24:13,"Very nice investigative work, @bdash!
",jpsim,bdash
2299,2015-07-27 20:26:00,"@segiddins I reintroduced the macro just for the tests.
",jpsim,segiddins
2299,2015-07-27 20:31:20,"@jpsim I'd prefer we actually put the macro _in_ the tests if we're going to use it. Right now, we're still shipping it
",segiddins,jpsim
2295,2015-07-27 16:03:24,"Could you please show us some code that demonstrates the issue you're having, @burning-git ? I'm having difficulty understanding your question.
",jpsim,burning-git
2295,2015-07-29 17:50:34,"@burning-git that's actually the way key-value coding is supposed to work, as described in [Apple's programming guide](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html). (i.e. it's intentional that an exception is raised when trying to get/set the value for an unknown key)

If you want to determine if a given RLMObject has a particular property, you can either use `-[RLMObject respondsToSelector:@selector(propertyName)]`, or check if `[[object.objectSchema.properties valueForKey:@""name""] containsObject:@""propertyName""]`.

I hope that answers your question!
",segiddins,burning-git
2295,2015-07-30 02:45:24,"@burning-git can you try and help us understand exactly what it is you're trying to accomplish?
",segiddins,burning-git
2292,2015-07-25 00:52:26,"@ronaldmannak that's quite strange, and I'd love to be able to investigate more thoroughly -- could you possibly share a project with us, either here or privately at help@realm.io, that demonstrates the issue so I can dig in? Thanks!

(I tried reproducing with the code in your comment, and here's the debugger output I saw:



)
",segiddins,ronaldmannak
2285,2015-07-24 17:44:07,"Haven't tried yet, but sounds a reasonable solution! @jpsim thanks for elaborative answer.
",vishaltelangre,jpsim
2284,2015-07-24 20:00:31,"We might want to add this to the documentation @segiddins 
",yoshyosh,segiddins
2284,2015-07-24 20:18:46,"@staticdreams I've created #2288 to track adding this to our docs guide at https://realm.io/docs/objc/latest.
",jpsim,staticdreams
2282,2015-07-24 17:20:17,"@grd888 if that's happening, it's not supposed to -- is there any way you could share a project with us that demonstrates these issues, either here or privately at help@realm.io, so we can investigate? Thanks!
",segiddins,grd888
2282,2015-07-25 05:40:37,"@grd888 so I just ran your sample project, and confirmed that Realm is indeed throwing exceptions as expected, but since that code is executing inside the parse results block, Parse is catching that exception and not rethrowing it. Unfortunately, there's really nothing we can do about that -- we're throwing the exception, and it's being caught.
",segiddins,grd888
2280,2015-07-28 07:04:09,"Hi @kittinunf! Thanks a lot for your follow-up pull request!

Ahh, okay then. It looks like we've ironically got just the wrong set of API combinations to make that possible. That's a bit of a shame. Sorry to have made you go away and research that! I might keep it in mind and see if there's a better way to do it (Even if it means some kind of direct communication between the plugin and the Browser).

I reviewed your code, and that looks like the best solution at present to me. That'll cover the portions of the multiple file handling operations that weren't getting covered on Realm Browser's side.

@jpsim I'm happy with this pull request. Shall we merge it in?
",TimOliver,kittinunf
2278,2015-07-24 07:43:43,"@yoshyosh  sure it's inside write transaction closure, I just wrote the most important parts of code to keep my question simple. Error message claims that user with the same id can not be added.

@jpsim thanks for the answer, I will try it out and let you know if it works.
",kresovic-milos,yoshyosh
2278,2015-07-24 07:43:43,"@yoshyosh  sure it's inside write transaction closure, I just wrote the most important parts of code to keep my question simple. Error message claims that user with the same id can not be added.

@jpsim thanks for the answer, I will try it out and let you know if it works.
",kresovic-milos,jpsim
2278,2015-07-27 09:17:57,"@jpsim it works, thank you!
",kresovic-milos,jpsim
2272,2015-07-21 23:28:33,"@mark-anders sorry to year you're having trouble with the browser! If you could open up an issue over on the browser's repo (https://github.com/realm/realm-browser-osx) that includes a Realm file the team can use to debug, that would be awesome, thanks!
",segiddins,mark-anders
2272,2015-07-21 23:54:51,"@segiddins - when you say a ""realm"" file, is default.realm enough?  Or do I need to zip up the .lock, .log\* files too?  Also, what's the best way to attach a database?
",mark-anders,segiddins
2267,2015-07-21 18:55:32,"@edwardIshaq what version of Swift are you using? That works fine for me in Swift 2.0 beta 4
",segiddins,edwardIshaq
2261,2015-07-21 16:51:19,"@kjoelbro thanks for the feature request, we'll take this into consideration. I'm closing this issue as a duplicate of #1490, feel free to resume the conversation there.
",jpsim,kjoelbro
2260,2015-07-21 05:21:15,"@TimOliver Hi Tim, my code uses primary key value to update objects if they are already in database. Th e problem with existing code is that it erases relationship when updating the object.
",shmidt,TimOliver
2260,2015-07-21 07:10:34,"@TimOliver Sure. Just sent it to help@realm.io with link on this issue. Thank a lot.
",shmidt,TimOliver
2260,2015-08-05 18:39:49,"@schickling Thanks for the post! We determined this is the intended behavior of the `add` method in this case. 

If you need to use `add` in this context, simply keeping a reference to the dog object, and re-assigning it to the dog property after the `add` method should work.

Thanks!
",TimOliver,schickling
2260,2016-03-16 20:59:05,"I think I have / had the same issue, here's my code:



Both Classes (Parent and Child) have a primary key and both keys are set (NSUUID as String). Now everything works fine, but if I update the child of the Parent using the Property ""MyChild"", the actual child value inside the Realm get´s update, but the relationship to the Parent is lost. Therefore I had to add the Line ""_myChild = myChild"" directly after the update. I guess this is the same ""wanted"" behavior like the other examples above. 

Isn't there any way to update the Child Property without manually restoring the relationship? This Behavior is really error prone and generates substantial overhead (This is a small Example, my 'real' classes have much more Properties / Code).

@TimOliver mentioned in his explanation that the object doesn't know if the child / relationship is  intentionally nil, or merely unset. But what I don't understand: I never set the child Property to nil, so why get the relationship destroyed by the update?
",LordNali,TimOliver
2253,2015-07-20 20:50:29,"@edwardIshaq can you share the contents of your Cartfile, and the version of Carthage you're running? Thanks!
",segiddins,edwardIshaq
2253,2015-07-20 20:52:24,"Hi @segiddins 
Please find it below:
$ cat Cartfile
github ""realm/realm-cocoa""
$ carthage version
0.5.2
",edwardIshaq,segiddins
2253,2015-07-20 20:53:59,"@edwardIshaq can you try updating to Carthage 0.7.5 or later, since Realm relies on more recent Carthage features? Thanks!
",segiddins,edwardIshaq
2253,2015-07-20 21:00:18,"@segiddins That was the issue. Thanks for pointing it out for me.
",edwardIshaq,segiddins
2251,2015-07-20 22:30:45,"@jpsim moved the swift versioning logic out into its own file
",segiddins,jpsim
2250,2015-07-20 21:06:13,"@kordziu @d6u give it another shot, I should've just fixed this
",segiddins,d6u
2247,2015-07-21 17:25:17,"@ehsaanwelcome I've created #2264 to track adding more explicit information to our documentation about how to ""page"" data in Realm. Let us know if you have any further questions!
",jpsim,ehsaanwelcome
2246,2015-07-20 18:05:01,"Just for context, this is the situation that led to this issue:



Where I would like to create a unique on the product uuid and inventory uuid.

@jpsim not sure if your proposal would address compound keys like this.
",i-schuetz,jpsim
2245,2015-07-28 16:36:26,"Sorry for the late reply, @maciejtrybilo. We agree this should be better explained in the docs and @TimOliver is working on improving that right now. We'll close this issue once we've updated our docs accordingly.
",jpsim,maciejtrybilo
2243,2015-07-29 18:42:48,"@fewspider please send us steps to reproduce and we'll reopen this issue if we missed something.
",jpsim,fewspider
2243,2015-07-29 18:46:11,"@jpsim It was solved https://github.com/realm/realm-cocoa/issues/2312 ,thanks again.
",fewspider,jpsim
2241,2015-07-18 18:41:46,"@xnth97 the maximum size for any single `NSData` property is 16 MB, as documented at https://realm.io/docs/objc/latest/#current-limitations.
",segiddins,xnth97
2241,2015-07-18 19:58:09,"@segiddins Thanks a lot. That section is not included in official chinese documents. Is there any place to contribute some translation?
",xnth97,segiddins
2240,2015-07-18 16:51:40,"@jlaws could you please share the entire output of `pod install --verbose`? Thanks!
",segiddins,jlaws
2240,2015-07-18 19:04:02,"awesome, works great now, thanks @segiddins !
",jlaws,segiddins
2240,2016-07-22 03:08:39,"@aelam, Please file a new issue rather than commenting on an issue that's been closed for over a year.
",bdash,aelam
2231,2015-12-14 09:47:27,"This looks like it's already done. Is it alright to close this issue?

/cc @yoshyosh @jpsim 
",TimOliver,yoshyosh
2230,2015-07-20 21:50:25,"@CraigSiemens I've actually been working on implementing a way to pass `RLMResult`s between threads, which is being tracked by https://github.com/realm/realm-cocoa/issues/1097, which I believe should cover the vast majority of cross-thread usage
",segiddins,CraigSiemens
2230,2015-07-20 22:31:26,"@CraigSiemens since #1097 will actually avoid re-fetching data from the disk in most cases, it's a preferable solution to something like `MR_inContext:`. I'm therefore closing this issue.
",jpsim,CraigSiemens
2228,2015-08-16 10:14:20,"@jpsim could you quickly explain how partial updates using dictionaries can be made?
",schickling,jpsim
2218,2015-08-10 23:42:07,"@zdavison since I haven't heard back from you, I'm going to close this issue for now, but feel free to reopen it if you have any more questions!
",segiddins,zdavison
2217,2015-07-17 00:38:13,"@PhilipBale I've not seen that happen before... can you share your class definitions, (or even better, an Xcode project) that demonstrates this? Thanks!
",segiddins,PhilipBale
2213,2015-07-16 18:36:03,"Thanks for the PR, @bigfish24! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,bigfish24
2213,2015-07-17 00:21:18,"@bigfish24 you'll now need to add some `import Realm.Dynamic` statements
",segiddins,bigfish24
2213,2015-07-17 21:07:49,"@segiddins where?
",bigfish24,segiddins
2213,2015-07-22 00:16:45,"ok, @jpsim I fixed the build script per your requests.

I also removed the full constructor from `RLMRealm_Dynamic.h` (it still resides in `RLMRealm_Private.h`), and then also moved the dynamic `RLMObjectSchema` method and `RLMProperty` method to their private headers.

The result is that the only methods that are being exposed via `RLMRealm_Dynamic.h` are the dynamic retrieval and dynamic create methods.

Finally, on the Swift side of things, I added three methods for Realm:







which means the Swift API mirrors the Objc API.

I don't think it is possible though to move these methods into a separate module since Clang modules only support C/Objc...
",bigfish24,jpsim
2213,2015-07-24 20:22:58,"@jpsim and @segiddins per our conversation, I added a header: `RLMObjectBase_Dynamic.h` that exposes the `RLMRealm` and `RLMObjectSchema` at the object base level for use with components. This header is included in the same way `RLMRealm_Dynamic.h` is. Since we weren't creating docs for `RLMObjectBase.h` before, I made sure to ignore both this and the dynamic header in the docs script. 

If components act on `RLMObjectBase`, assuming it comes from Swift or Objc, they should be able to perform read/writes through key value coding. The only thing missing would be `linkingObjectFromClass:` but not sure there is a use yet for that, but we could push that down to `RLMObjectBase` too.
",bigfish24,jpsim
2213,2015-07-24 20:22:58,"@jpsim and @segiddins per our conversation, I added a header: `RLMObjectBase_Dynamic.h` that exposes the `RLMRealm` and `RLMObjectSchema` at the object base level for use with components. This header is included in the same way `RLMRealm_Dynamic.h` is. Since we weren't creating docs for `RLMObjectBase.h` before, I made sure to ignore both this and the dynamic header in the docs script. 

If components act on `RLMObjectBase`, assuming it comes from Swift or Objc, they should be able to perform read/writes through key value coding. The only thing missing would be `linkingObjectFromClass:` but not sure there is a use yet for that, but we could push that down to `RLMObjectBase` too.
",bigfish24,segiddins
2213,2015-07-24 20:36:09,"@bigfish24 `RLMObjectBaseLinkingObjectsOfClass` already handles backlinks
",segiddins,bigfish24
2213,2015-07-24 21:33:03,"ok @segiddins I removed the methods and simply exposed the functions that we are already utilizing, but only those that are relevant to current components. Also the branch has been rebased to master.
",bigfish24,segiddins
2213,2015-08-12 23:35:10,"@jpsim @segiddins can we merge this into master? I rebased to include the changes from KVO.
",bigfish24,jpsim
2213,2015-08-12 23:35:10,"@jpsim @segiddins can we merge this into master? I rebased to include the changes from KVO.
",bigfish24,segiddins
2213,2015-08-20 16:53:45,"@bigfish24 I think this is mostly fine, however there are merge conflicts
",segiddins,bigfish24
2213,2015-08-20 17:51:55,"@segiddins merge conflicts fixed
",bigfish24,segiddins
2213,2015-08-20 20:13:27,"@segiddins take a look at the latest commit. I added two tests for `dynamicCreate` and `dynamicObjectForPrimaryKey` where `unsafeBitCast` is used. The tests verify subscripting is working on the returned object.
",bigfish24,segiddins
2211,2015-07-16 14:09:29,"@tariq235 can you be a bit more specific how things are not working?
",segiddins,tariq235
2211,2015-07-16 14:13:34,"@segiddins For example: If i have a conference date as 7/13 - 7/16 and given date is 7/14 then conference event should be able to fetch using predicate. My old query will only work on 7/13. It should fetch that event on given dates - 7/13, 7/14, 7/15, 7/16 and if given date is 7/17 then nil will be returned.
",tariq235,segiddins
2211,2015-07-16 14:39:33,"@segiddins  Something wrong with predicate. What is K ?
I copy pasted with my code and i got this crash on predicate:

> [__NSTaggedDate rangeOfString:]: unrecognized selector sent to instance 0xe41bb582fa800000
",tariq235,segiddins
2211,2015-07-16 15:49:31,"@segiddins  So as per attachment I can see an event on 07July - 09 July but RLMResults returned 0 output.



<img width=""397"" alt=""screen shot 2015-07-16 at 9 10 48 pm"" src=""https://cloud.githubusercontent.com/assets/349211/8727791/4af3a0d2-2bff-11e5-94df-0c8d05b5ab35.png"">

Code used:


",tariq235,segiddins
2211,2015-07-20 20:55:09,"@tariq235 I'm going to close the issue for now, but feel free to reopen it if you can come up with an example where Realm is returning the wrong results. Thanks!
",segiddins,tariq235
2210,2015-07-16 01:33:11,"Thanks @segiddins. Good to hear!
",allending,segiddins
2206,2015-07-15 20:59:47,"Hi @segiddins 

Cool - that's some very fast action right there ! :)

I use swift 2.0, so i tried merging this branch with the swift-2.0 branch and run the same migration with it. It goes to about 80mb of memory usage and then just freezes there forever. 

I don't know if it's of any help, but if i pause in the debugger the stack looks like this: 

#0  0x0399154a in __psynch_mutexwait ()
#1  0x03958210 in _pthread_mutex_lock ()
#2  0x03958003 in pthread_mutex_lock ()
#3  0x003fea61 in realm::util::RobustMutex::low_level_lock() ()
#4  0x004aa3d3 in realm::SharedGroup::do_begin_write() ()
#5  0x004aa297 in realm::SharedGroup::begin_write() ()
#6  0x003c54cb in realm::SharedGroup::upgrade_file_format()

Thanks for the very quick reaction!
",porsager,segiddins
2206,2015-07-20 22:47:41,"@porsager that's probably a different issue -- can you share a project that demonstrates that problem with us?
",segiddins,porsager
2206,2015-07-21 23:19:02,"@segiddins please rebase this
",jpsim,segiddins
2206,2015-07-22 19:10:38,"@segiddins You are right it is independent of this issue. Would you want me to create a new issue for it, or can i email you a test project with the issue?
",porsager,segiddins
2206,2015-07-22 19:48:33,"@porsager an email with a test project would be perfect, thanks!
",segiddins,porsager
2203,2015-07-15 21:12:13,"@lbanders relinquishing all strong references to the Realm will cause it to become ""closed"", but in general we don't recommend using the same path for multiple different realm files.
",segiddins,lbanders
2199,2015-07-14 23:01:59,"@tgoyne, for Objective-C projects, auto-linking doesn't pull in CoreLocation.framework unless you make use of symbols it defines. Merely using types declared in its headers doesn't result in it being pulled in. Things don't work quite so well for Swift. Realm APIs mentioning `CLLocationCoordinate2D` doesn't result in CoreLocation.framework being pulled in directly, but it does result in CoreLocation's Swift overlay, `libswiftCoreLocation.dylib`, being pulled in, which in turn pulls in CoreLocation.framework.

It would be easy to declare our own coordinate type instead. The downside is that those users that choose to use our location-based APIs will have to convert between types when doing so. It's probably worth it to avoid pulling in CoreLocation unnecessarily for all clients using Swift. 
",bdash,tgoyne
2198,2016-01-25 09:02:15,"@timanglade Are we getting enough :+1: yet 😊
",cezheng,timanglade
2198,2016-04-27 00:57:43,"@gitshah nothing to the report at the moment but you can sign up for a beta here: http://goo.gl/forms/VwdoS0mN07
",timanglade,gitshah
2196,2015-07-12 15:03:28,"@Neilq5 are you sure that the framework search paths include the path the the directory that contains the realm and RealmSwift frameworks?
",segiddins,Neilq5
2196,2015-07-13 18:26:47,"This is likely not a Realm issue, but keep us posted, @Neilq5 !
",segiddins,Neilq5
2195,2015-07-11 12:11:19,"Thanks for the PR, @zubco! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,zubco
2195,2015-07-15 03:37:28,"Thanks @zubco!
",jpsim,zubco
2194,2015-07-10 22:45:08,"@jpsim - What are your thoughts?
",codytwinton,jpsim
2193,2015-07-10 05:20:24,"@marchyman Thanks for the sample code. I could retrieve all the objects and sort them as you described, but my hope is that if Realm did the sorting internally, it would be more efficient in terms of model object instances. My understanding is that Realm has a mechanism similar to Core Data's faulting that doesn't fully realize model objects until you access them.
",jefflopes,marchyman
2193,2015-10-16 13:43:53,"@jefflopes  & @jdelaune there is a plugin which has map annotations clustering & it has sorting by distance, caching the results, etc. Take a look at it [bigfish24/ABFRealmMapView](https://github.com/bigfish24/ABFRealmMapView).
",kexoth,jdelaune
2193,2015-10-16 13:43:53,"@jefflopes  & @jdelaune there is a plugin which has map annotations clustering & it has sorting by distance, caching the results, etc. Take a look at it [bigfish24/ABFRealmMapView](https://github.com/bigfish24/ABFRealmMapView).
",kexoth,jefflopes
2188,2015-08-21 01:35:56,"@florianreinhart indexing actually wouldn't speed up comparison queries, as realm currently only uses indices for exact equality queries.
",segiddins,florianreinhart
2187,2015-07-09 14:55:06,"Thanks for the PR, @allending! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,allending
2186,2015-07-09 16:32:54,"@jplazcano87 you need to do `RLM_ARRAY_TYPE(TestModel)` before your `TestModel` interface.
",segiddins,jplazcano87
2184,2015-07-09 14:33:51,"@jsslai @foffer 
- The current commit in the swift-2.0 only has bitcode disabled for Realm.xcodeproj (https://github.com/realm/realm-cocoa/commit/308b0fa5099bdf8c985ef312962782668e56994e).
- You need to open the RealmSwift.xcodeproj project and explicitly set ENABLE_BITCODE to No - **Even if it already shows it as No by default, set it anyway**.
- Remember that any of your app targets using the framework also need to have bitcode disabled.
",allending,jsslai
2184,2015-07-09 14:33:51,"@jsslai @foffer 
- The current commit in the swift-2.0 only has bitcode disabled for Realm.xcodeproj (https://github.com/realm/realm-cocoa/commit/308b0fa5099bdf8c985ef312962782668e56994e).
- You need to open the RealmSwift.xcodeproj project and explicitly set ENABLE_BITCODE to No - **Even if it already shows it as No by default, set it anyway**.
- Remember that any of your app targets using the framework also need to have bitcode disabled.
",allending,foffer
2184,2015-07-09 17:03:14,"@jsslai @foffer we just merged @allending 's PR addressing this issue. Please open a new issue if the latest `swift-2.0` is still causing problems for you! Thanks all!
",jpsim,allending
2184,2015-07-09 17:03:14,"@jsslai @foffer we just merged @allending 's PR addressing this issue. Please open a new issue if the latest `swift-2.0` is still causing problems for you! Thanks all!
",jpsim,jsslai
2184,2015-07-09 17:03:14,"@jsslai @foffer we just merged @allending 's PR addressing this issue. Please open a new issue if the latest `swift-2.0` is still causing problems for you! Thanks all!
",jpsim,foffer
2183,2015-07-09 16:33:48,"This seems to be a duplicate of https://github.com/realm/realm-cocoa/issues/2185, @codesourse ?
",segiddins,codesourse
2182,2015-07-08 21:51:34,"Thanks for sending this over @conradev -- this was an issue with our usage of `ftruncate()` and `fsync()` that was fixed in the 0.93.2 release, which I strongly recommend updating to.
",segiddins,conradev
2182,2015-07-08 22:19:11,"@segiddins, I just updated to 0.93.2 and the app is still crashing. Do I need to delete the Realm file?
",conradev,segiddins
2182,2015-07-08 22:28:30,"@conradev yes. The Realm file has lost some data, but the conditions that allowed for such a file to be generated are now gone.
",segiddins,conradev
2181,2015-07-14 16:44:09,"@chucktee take a look at [`RLMSupport.swift` on the master branch](https://github.com/realm/realm-cocoa/blob/master/Realm/Swift/RLMSupport.swift). It should work in both Xcode 6.4 & Xcode 7.
",jpsim,chucktee
2181,2015-07-14 19:27:33,"@jpsim - Thanks a ton.  Compiles fine.
",chucktee,jpsim
2180,2015-08-21 01:39:19,"@segiddins, can you provide a pointer to any information about the problems you're referring to?
",bdash,segiddins
2180,2016-05-27 16:44:54,"CocoaPods stopped setting these in #4272, is this still something we want to do? @mrackwitz @bdash 
",jpsim,mrackwitz
2180,2016-05-27 16:44:54,"CocoaPods stopped setting these in #4272, is this still something we want to do? @mrackwitz @bdash 
",jpsim,bdash
2179,2015-07-08 18:21:22,"@virt87 the code in your first code snippet should've thrown an exception, as calling `add` outside of a write transaction raises an exception -- you can only make changes during a write transaction. Your second snippet looks perfect, though!
",segiddins,virt87
2178,2015-07-14 17:32:23,"Great, glad to hear you got it working, @catherineschwartz !
",segiddins,catherineschwartz
2176,2015-07-08 03:13:26,"@benagarr sorry to hear you've been running into problems! Just looking at the stack trace, it's hard to tell what exactly is going wrong trying to open the Realm file, but if this is happening consistently, we'd love to take a look at the file itself (you can share it privately with us at help@realm.io).
As to issues with database corruption, I'd advise you to update to the latest release of Realm as soon as possible. Realm is still improving, and in the latest release, we're confident we addressed our number one outstanding issue with corruption, which had to do with ordering guarantees (or the lack thereof) around `ftruncate` and `fsync`. 0.93.2 should no longer produce truncated files, which is likely the issue you were running into previously.
",segiddins,benagarr
2174,2015-07-14 18:02:02,"Please review, @bdash  @jpsim 
",segiddins,jpsim
2174,2015-07-22 01:07:06,"@jpsim feedback addressed
",segiddins,jpsim
2173,2015-07-07 17:45:52,"@tgoyne added the one bug fix
",segiddins,tgoyne
2171,2015-07-07 09:43:04,"@TimOliver, I wouldn't think of that edge case. 

Yeah, you are very right. I way I am able to grasp the Realm file(s) is to recursively find all of `.realm` files extension and open them all. It was kind of blind-fully because I don't have any info about how Realm Browser is opening the file or what file(s) the Browser is(are) actively opening. 

It works well and effectively in my use case (I have 2 apps in my Simulator with 2 default Realm files in 2 folders), but it seems like it might be not the case for you. :scream: One thing top of my mind right now is to focus just only on `default.realm` file, but the drawback is that plugin cannot be able to handle custom name.

I am very happy to add guard on my side if there is anything I can do.
",kittinunf,TimOliver
2171,2015-07-07 10:15:18,"@kittinunf Fair enough. I've been told it's not a normal way to use Realm (But it still works very well!). :)

At the very least, do you know if it's possible to open up the `.realm` files for the app that the Simulator is currently displaying (That would mitigate it a fair amount)? If not, I might do a bit of digging to have a look, but if it's not possible then it can't be helped.

No worries! Let's see what JP says, but I get the feeling that this should be a safeguard feature of the Browser itself to prevent too many files from opening at once.
",TimOliver,kittinunf
2171,2015-07-07 23:17:45,"@kittinunf thanks for the PR :sparkles:! I look forward to getting this into the official Realm plugin.

@TimOliver I'd add a prompt to the browser when it's asked to open more than 5 files simultaneously (`Are you sure you want to open 'X' Realm files at once?`) to address this in the very short term.
",jpsim,TimOliver
2171,2015-07-07 23:17:45,"@kittinunf thanks for the PR :sparkles:! I look forward to getting this into the official Realm plugin.

@TimOliver I'd add a prompt to the browser when it's asked to open more than 5 files simultaneously (`Are you sure you want to open 'X' Realm files at once?`) to address this in the very short term.
",jpsim,kittinunf
2171,2015-07-10 17:49:04,"I'll let @TimOliver continue to review this, but it looks fine to me @kittinunf. Thanks for your hard work!
",jpsim,TimOliver
2171,2015-07-10 17:49:04,"I'll let @TimOliver continue to review this, but it looks fine to me @kittinunf. Thanks for your hard work!
",jpsim,kittinunf
2171,2015-07-21 23:16:10,"@TimOliver thoughts?
",jpsim,TimOliver
2171,2015-07-22 23:11:45,"Thank you so much for this PR, @kittinunf ! I hope you'll contribute to realm again in the future :smile:.
",jpsim,kittinunf
2171,2015-07-23 03:25:11,"@jpsim, I am more than happy to contribute. As I am a Realm fan myself, we use Realm in our iOS and Android (for Realm-Java, it is kind of love and hate along the process, haha) so contributing back to Realm eventually benefits ourself and also Realm community. :dancers: 
",kittinunf,jpsim
2171,2015-07-23 04:22:31,"@kittinunf :) Is there anything in particular we can do better on the Java side? It’s been a long road, but we have some exciting stuff coming up there in the immediate future including _much_ improved Realm Objects (and of course null support, async queries/transactions and better notifications). Anything else tripping you up?
",timanglade,kittinunf
2171,2015-07-23 05:53:17,"@TimOliver I can open another simple PR to take care of that. It could be as simple as an alertConfirmation with yes/no buttons. If yes, open with that many files, and no for doing nothing. How does that sound to you? If it sounds good, I will craft it over the weekend.

@timanglade, we have been fighting with lack of null support, unable to implement common interface on RealmObject, and gson serializing/deserializing with Realm Proxy class. We tried so hard, because we like to use Realm with our Android so much and don't want to give up on it just yet. Don't take me wrong though, you guys makes an awesome DB. But it is not a pretty easy journey along the road.
",kittinunf,TimOliver
2171,2015-07-23 05:53:17,"@TimOliver I can open another simple PR to take care of that. It could be as simple as an alertConfirmation with yes/no buttons. If yes, open with that many files, and no for doing nothing. How does that sound to you? If it sounds good, I will craft it over the weekend.

@timanglade, we have been fighting with lack of null support, unable to implement common interface on RealmObject, and gson serializing/deserializing with Realm Proxy class. We tried so hard, because we like to use Realm with our Android so much and don't want to give up on it just yet. Don't take me wrong though, you guys makes an awesome DB. But it is not a pretty easy journey along the road.
",kittinunf,timanglade
2171,2015-07-23 06:22:48,"@kittinunf Yeah! If you can spare the time to do that, that would be a great help! Thank you so much for that! :)
",TimOliver,kittinunf
2171,2015-07-23 08:12:29,"@kittinunf Actually, you know what? There might be a smarter way to go about doing this.

My check for multiple files in Realm Browser is in the `[NSApplication application:openFiles:]` method, but in my last set of tests, it looks like the Plugin isn't passing the files to the Browser through that delegate, more that it's most likely calling 'openFile' multiple times. 

Instead of doubling up on the logic for checking if multiple files are being passed, it might be better to ensure that the Realm Plugin is passing multiple Realm files to Realm Browser via the `openFiles:` delegate method.

Do you know anything about that? If not, then I can easily spend some time on this.
",TimOliver,kittinunf
2171,2015-07-23 13:49:22,"@TimOliver Ah I guess, it might be my fault because I use `NSWorkspaceLaunchNewInstance` when open file. Perhaps I need to use `NSWorkspaceLaunchDefault` or `0`, then it should help, I guess? 
",kittinunf,TimOliver
2171,2015-07-23 14:41:40,"@kittinunf Yeah, I was looking into it as well and it looks like there's a lot of different ways to go about doing this.

Apparently `[NSWorkspace openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:]` might do the trick. Shall I have a look into that one? :)
",TimOliver,kittinunf
2171,2015-07-23 15:27:57,"@kittinunf Understood! We feel the same honestly. You’ll really like the new object stuff we are working on now :)
",timanglade,kittinunf
2171,2015-07-23 15:50:48,"@TimOliver let's discuss on another thread. I will open up another PR to take care of this. 
",kittinunf,TimOliver
2168,2015-07-13 17:17:04,"@tgoyne this should be slightly less race-y now.
",segiddins,tgoyne
2165,2015-07-07 07:02:45,"Ok, thank you very much @jpsim ! (and also thanks for your suggestion!)

BTW: Is this a proper place to ask questions? Because I just read that you want to have all questions asked on StackOverflow?
",Luke47,jpsim
2165,2015-07-07 17:20:29,"@Luke47 do you have a full back trace for where that exception message is popping up?
",segiddins,Luke47
2165,2015-07-08 10:16:24,"@segiddins , sure here you go. It seems that by using `flatMap` the results lose their subclass information and simply become `Object`

![screen shot 2015-07-08 at 12 11 02](https://cloud.githubusercontent.com/assets/5190003/8568108/21744d6e-256b-11e5-9b79-28573c1be49f.png)
",Luke47,segiddins
2163,2015-07-07 22:12:28,"It will be difficult to investigate this issue further without access to a reproduction case, @foffer. If this happens again, please share more code with us so that we can retrigger the behavior on our side and troubleshoot accordingly.
",jpsim,foffer
2163,2015-07-21 17:29:45,"Hi @foffer, I'm just following up on our request for a reproduction case, I'd love to help out.
",jpsim,foffer
2163,2015-07-21 17:30:54,"Hi @jpsim sorry for the lack of comms, been very busy. I will try and reproduce and post findings asap. Most likely won't be until next week
",foffer,jpsim
2163,2015-07-30 22:04:02,"@foffer please reopen if you can share repro steps. Thanks!
",jpsim,foffer
2162,2016-02-25 00:01:52,"@raspu thanks for the idea of saving the ids. Is anyone aware of a discussion of migrations in Realm that involve setting up new relation properties with preexisting objects? Not sure I fully understand the limitations related to this issue and #1385 @jpsim might be worth mentioning in https://realm.io/docs/swift/latest/#current-limitations
",kharmabum,jpsim
2162,2016-02-25 00:01:52,"@raspu thanks for the idea of saving the ids. Is anyone aware of a discussion of migrations in Realm that involve setting up new relation properties with preexisting objects? Not sure I fully understand the limitations related to this issue and #1385 @jpsim might be worth mentioning in https://realm.io/docs/swift/latest/#current-limitations
",kharmabum,raspu
2161,2015-07-06 16:06:34,"Thanks for filing this, @francisykl. We're already tracking this feature in #1265 so I'll be closing this ticket as a duplicate. Subscribe to that one for any updates on the topic.
",jpsim,francisykl
2160,2015-07-06 17:00:51,"@yaming116  I'm sure there are some differences in schema definitions among Android and iPhone.

`Property 'ho_id' has been made a primary key.'`

This message means the `ho_id` is not primary key on Android. However it is defined as a primary key on iPhone. So please check the schema definition of Android whether `ho_id` is primary key or not. If not, you should remove specifying `ho_id` as primary key.
",kishikawakatsumi,yaming116
2160,2015-07-06 18:23:17,"@kishikawakatsumi I don't know if that is the issue with the OP, but when I ran into this issue, there was no difference in schema. A simple model with the same primary key defined in both Android and iOS would throw this error when opening the Realm on iOS that had been generated on Android. However, creating a Realm DB in iOS and opening it in Android worked just fine.
",ldramire,kishikawakatsumi
2160,2015-07-06 19:06:06,"@tgoyne I am using Java 0.80.3 and iOS 0.93.2.
",ldramire,tgoyne
2160,2015-07-21 19:45:41,"@ldramire are you still having this issue? It would be helpful if you shared your realm file with us so we could investigate what is wrong with it.

Since Realm Java 0.80.3 introduced an automatic migration from the old, java-only, primary key format to the new, cross-platform compatible primary key format, please make sure to run this java migration before using the file from Realm Objective-C.
",jpsim,ldramire
2160,2015-07-22 16:57:20,"@jpsim Haven't looked into it further since adding the workaround, but I can try it again and post back when I get a chance.
",ldramire,jpsim
2159,2015-12-10 21:14:38,"@tgoyne, do you recall what workarounds we looked at for this?
",bdash,tgoyne
2159,2015-12-10 23:37:19,"Out of the options @tgoyne mentions, `flock` seems most directly suited to this purpose. I can't see any obvious downsides to it, except the potential for worse performance compared with our current use of mutexes.
",bdash,tgoyne
2159,2016-01-04 19:46:55,"@jpsim @bdash Unfortunately this issue is seriously affecting some of our users. Is it possible to switch to `flock`, perhaps as an option in the `RLMConfiguration` (if you are concerned about the performance drawbacks compared to the mutex for clients where this isn't problematic)?

We would be happy to work on this, but it looks like this functionality is in the Realm core and not in this repo, unless I missed it?
",AriX,jpsim
2159,2016-01-04 19:46:55,"@jpsim @bdash Unfortunately this issue is seriously affecting some of our users. Is it possible to switch to `flock`, perhaps as an option in the `RLMConfiguration` (if you are concerned about the performance drawbacks compared to the mutex for clients where this isn't problematic)?

We would be happy to work on this, but it looks like this functionality is in the Realm core and not in this repo, unless I missed it?
",AriX,bdash
2159,2016-01-06 15:49:35,"Moving back to P1 since now there's a clear path to resolution and thanks to @conradev and @AriX sharing how important it is to them.
",jpsim,AriX
2159,2016-01-06 15:49:35,"Moving back to P1 since now there's a clear path to resolution and thanks to @conradev and @AriX sharing how important it is to them.
",jpsim,conradev
2157,2015-07-06 17:42:29,"@ezwu there's no publicly exposed way to manually clear the Realm cache, but it's really not something you should ever have to do. If there's already a Realm open, I suspect something still has a strong reference to it, and we'd be happy to have a look at help you debug that, either here or privately at help@realm.io.

If I could offer a suggestion, however, I'd advise just calling `setSchemaVersion:ForRealmAtPath:withMigrationBlock:` for every `.realm` file in the directory you store the Realm files in at program launch -- that way, there would be no possibility of trying to set the schema version for a Realm that is already open.
",segiddins,ezwu
2157,2015-07-06 18:57:19,"@segiddins thanks for the reply and the suggestion. I've checked my code for remaining references over and over but I just can't seem to find anything. I'm doing the bugged realm operations within a AWSTask `continueWithBlock:^id(AWSTask *task)` call, could that possibly be an issue?

If I were to migrate in the manner you described, what would happen in terms of schema version and migration when a new user logs in and I create a new realm? Would their realm automatically be updated to the post-migration version?
",ezwu,segiddins
2157,2015-07-06 19:56:54,"@ezwu you _could_ just set the schema version when creating the realm for the first time.  If you're capturing any Realm objects in a block that's being bounced to a different queue, that could definitely be causing your RLMRealm to be retained, but it's hard to know for sure without seeing the code in question.
",segiddins,ezwu
2157,2015-07-06 20:35:24,"@segiddins Thanks immensely for your help. The queue issue doesn't seem to be the cause after some testing, since my other calls to realm occur on a background thread as well and don't cause me any problems.
I think what might be happening is that I'm potentially holding onto a reference of the object I am adding to the realm. Would that RLMObject's reference to the realm instance cause the realm to fail to deallocate? If that's the case, I think that that might be the reason for my issue.

I've tested two different ways of writing the necessary object to realm, the first being the original bugged way which is to call `[realm addObject:]` using my local reference to the object. The second way is to first pull from the online database Amazon dynamoDB, where the object is stored and then to add it to realm using the reference dynamoDB gives me, and that way doesn't cause the migration code to throw an exception.

As for your suggestion, could I just ask you to clarify how schema versions work? Specifically, my migration code sets, for specific objects, a new property that didn't exist on the old version to some default value. So if I were to open a new realm and write these objects with the new property already set to some other value into it, would the schema automatically update to reflect the fact that this property now exists or would it be some default value like 0 that would trigger the migration code to overwrite the value?
",ezwu,segiddins
2156,2015-07-03 21:57:49,"Hi @thanyalukj, could you try again? I just rebased that branch this morning to address that issue :smile:.
",jpsim,thanyalukj
2156,2015-07-03 22:52:24,"Thanks for reporting this, @thanyalukj. I just pushed a workaround to the `swift-2.0` branch (d404ffd2c9abf5e2cbc3b0789052af803deda5bc), so if you pull from CocoaPods again, this should be resolved. I'll be filing a radar about this shortly.
",jpsim,thanyalukj
2156,2015-07-03 23:01:09,"Hooray! That's fixed the problem. Thanks very much @jpsim and @segiddins for you response and also a quick fix :)
",thanyalukj,jpsim
2156,2015-07-03 23:01:09,"Hooray! That's fixed the problem. Thanks very much @jpsim and @segiddins for you response and also a quick fix :)
",thanyalukj,segiddins
2156,2015-07-03 23:22:10,"@jpsim should probably update the radar and specify it only occurs when importing Cocoa.
",segiddins,jpsim
2154,2015-07-07 21:08:16,"@jpsim I don't think it really matters, given `int64_t` will be defined on every arch we build for
",segiddins,jpsim
2151,2015-07-09 18:28:09,"@reeichert sorry for the delay on getting back to you on this issue. Are you possibly using Realm via CocoaPods? If so, I'd recommend first reinstalling your pods after clearing the CP cache:



If that fixes the problem, I'd encourage you to file an issue at https://github.com/CocoaPods/CocoaPods/issues.

This is an issue I believe we've seen in the past, but I can't find a prior case at the moment.

Please let us know if this helps at all.
",jpsim,reeichert
2151,2015-07-21 17:26:47,"As we never heard back from you, @reeichert, we'll be closing this issue. Let us know if our suggested fix didn't work and then we'll reopen the issue and work with you to address. Thanks!
",jpsim,reeichert
2150,2015-07-02 05:40:03,"@staticdreams that exception message could probably be made more clear for Realm Swift, but the gist of it is that you can only call `sorted` on a `List` property that comes from an object that is persisted in a `Realm`.
",segiddins,staticdreams
2150,2015-07-02 10:42:50,"@mrackwitz , thanks for your answer.

Sometimes, (and perhaps I'm not the only one) I need some further data processing when I retrieve records from realm. Manipulating data before presenting it to the view (like joining with other data, sorting, etc) gives additional flexibility. Don't get me wrong I love realm, but I always felt constrained but little things like inability to handle data easily since end up with custom data types like `Results` and `List`. Ok, here's my example:

I got a table containing bus stops (`List<Stop>`) Each stop has coordinates (latitude and longitude). Before Displaying the data to the view I grab it (and all associated relations), see where the user is currently positioned and enumerating through each item, measuring its distance to the user and putting the ones  within 100m in an empty `List<Stop>`. Say, now I want to sort this List by distance... or process it further, removing some items based on on some other changing conditions. I do not mind, but since `List` isn't a standard type, handling it can be a challenge if you see what I mean.

Reading other issues here I see people are starting to come up with `Extension`s for List and Result types, making some ""post-query"" operations easier.
",staticdreams,mrackwitz
2150,2015-07-02 17:24:48,"@staticdreams I built [ABFMapView](https://github.com/bigfish24/ABFRealmMapView) and at least for your example, I would recommend first doing a bounding box query in Realm to return objects within within the 100m region and then iterating over this list to either add the temporal distance calculation directly to the object or in a helper class/struct that points to the object (assuming you are using primary keys to make it thread-safe, which is what [ABFMapView](https://github.com/bigfish24/ABFRealmMapView) does). This will help make sure you aren't doing the distance calculation and secondary sorting on the entire dataset.

To make it easy to create a predicate from a coordinate region, [ABFMapView](https://github.com/bigfish24/ABFRealmMapView) has a [function](https://github.com/bigfish24/ABFRealmMapView/blob/master/ABFRealmMapView/ABFLocationFetchRequest.h) that does this for you:


",bigfish24,staticdreams
2150,2015-07-02 18:53:22,"Thanks @mrackwitz , I guess I'll have to do most of the work within queries :)
@bigfish24 Cool! Although my example here was to illustrate that it is hard to manipulate non standard objects once the DB has been queried. 
What I did was a loop thought query results and used `fromLocation.distanceFromLocation(toLocation)` on each object. Work fine, but regrouping it all together and sorting by distance was a pain :) Anyway, thanks, I'll give your project a try.
",staticdreams,mrackwitz
2150,2015-07-02 18:53:22,"Thanks @mrackwitz , I guess I'll have to do most of the work within queries :)
@bigfish24 Cool! Although my example here was to illustrate that it is hard to manipulate non standard objects once the DB has been queried. 
What I did was a loop thought query results and used `fromLocation.distanceFromLocation(toLocation)` on each object. Work fine, but regrouping it all together and sorting by distance was a pain :) Anyway, thanks, I'll give your project a try.
",staticdreams,bigfish24
2149,2015-07-02 05:42:11,"@perwyl as it turns out, we already have such a method! The following code snippet should do the trick, using [`Realm.create(_:value:update:)`](https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm6createFS0_U__FTMQ_5valuePSs9AnyObject_6updateSb_Q_).


",segiddins,perwyl
2149,2015-07-09 19:25:50,"@segiddins  i got this error msg `*** Terminating app due to uncaught exception 'RLMException', reason: 'Missing property value'
*** First throw call stack:
libc++abi.dylib: terminating with uncaught exception of type NSException`  

What i did was, 
1. add the `realmObject` to `realm`
2. get a reflected object on `realmObject`
3. create a timestamp for each key in `realmObject`
4. update `realmObject` with the timestamps

PS: the timestamp keys does not exist in `realmObject` . 


",perwyl,segiddins
2149,2015-07-09 20:42:17,"Thanks @jpsim  for the quick reply. Sorry for my bad naming, `RLMObject` is just a class name representation. I want to create the properties at runtime is that for each class, I had a lot of properties. 

Just thinking it might be good for me to create (dynamically ) new properties (timestamps) at run time (i need a timestamp for each property in a class). 

The reason for the timestamps is that it will be helpful for synchorization (merging decisions) between the devices and server.    


",perwyl,jpsim
2149,2015-07-09 21:30:21,"@jpsim thanks ! Let me try it out. 

And may i know the purpose of this method ?


",perwyl,jpsim
2145,2015-07-01 14:58:58,"Thanks @tgoyne that has resolved the issue in the test app.

Unfortunately I'm still seeing the issue in the actual code I'm working on. It must be something different but related. I'll keep investigating and post what I find in case someone else has similar issues.
",mfclarke,tgoyne
2145,2015-07-14 10:52:42,"@mfclarke: Were you able to resolve that issue in your actual code? I'd close that for now, but if you found something new and related, feel free to come back and reopen this issue.
",mrackwitz,mfclarke
2145,2015-07-14 13:14:28,"Hi @mrackwitz, sorry for not updating this issue sooner. I had to get this code working with a deadline so I ended up reworking it to create the Realm objects all at once rather than individually. I know this isn't necessarily a solution but I hope it helps someone if they run into a similar problem.
",mfclarke,mrackwitz
2141,2015-06-30 18:07:33,"@jeeftor both of the frameworks in the `ios/swift` directory are dynamic, so you can just use those! Our swift-specific docs at https://realm.io/docs/swift/latest/ have slightly different installation instructions, which should hopefully make things a bit more clear!
",segiddins,jeeftor
2141,2015-06-30 18:34:00,"@segiddins - so, we built the swift-2.0 branch and dropped the Realm.framework and RealmSwift.framework files into the ""Embedded Frameworks"" section, but still get an error that module RealmSwift cannot be found. We were using Carthage Before, but want to start doing an upgrade to 2.0. Thoughts?
",kevinmlong,segiddins
2141,2015-06-30 18:50:31,"@jpsim - excuse my ignorance, but how might we go about doing that...
",kevinmlong,jpsim
2141,2015-06-30 19:41:19,"@jpsim and @segiddins - disregard my previous question. I figured it out. I'm now faced with ""Abort trap 6"" build errors for all the Realm model files. Any thoughts?
",kevinmlong,jpsim
2141,2015-06-30 19:41:19,"@jpsim and @segiddins - disregard my previous question. I figured it out. I'm now faced with ""Abort trap 6"" build errors for all the Realm model files. Any thoughts?
",kevinmlong,segiddins
2141,2015-06-30 20:02:18,"@segiddins Seems that the error is for each of the model files. Here is a snippet of the error:

`CompileSwift normal x86_64 <PATH_TO_MODELS_FOLDER>/Airport.swift`

`Assertion failed: (hasAccessibility() && ""accessibility not computed yet""), function getFormalAccess, file /Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-700.0.42.3/src/swift/include/swift/AST/Decl.h, line 2195.`

`1. While emitting IR SIL function @_TFC4otto7AirportcfMS0_FT5realmCSo8RLMRealm6schemaCSo15RLMObjectSchema_S0_ for 'init' at <PATH_TO_MODELS>/Airport.swift:16:31`
",kevinmlong,segiddins
2141,2015-06-30 20:05:55,"@segiddins - this line 16 from Airport.swift 

`public class Airport : Object {`
",kevinmlong,segiddins
2141,2015-07-01 01:09:09,"@kevinmlong  I was also using Carthage for pre-Swift2.0 Realm. 
1. Follow build instructions from: https://realm.io/docs/swift/latest/#swift-20
2. Copy the newly built Realm.framework and RealmSwift.framework files from `build/ios/swift/` to `[iOSPROJECT ROOT]/Carthage/Build/iOS/ directory`
3. Clean & build

No need to drag the files into the Embedded Binaries of your target.  If you were using Realm with Carthage before, the carthage build script `/usr/local/bin/carthage copy-frameworks` will pick up the new files and make it happen.  Hopefully.  
",sandalsoft,kevinmlong
2141,2015-07-01 02:25:57,"@sandalsoft Carthage doesn't actually build Realm Swift from source, so that won't work.
",jpsim,sandalsoft
2141,2015-07-01 02:38:38,"@jpsim @sandalsoft @segiddins - I'm not sure what the issue is. I cloned and build swift-2.0 branch. I copied the Realm.framework and RealmSwift.framework files into the Carthage build directory. That all seemed fine and good and recognizes RealmSwift, but the issue is that when it builds I get `Abort trap: 6 errors` for each of the model files. Close inspection at the error logging shows that it is due to an assertion error: 

`Assertion failed: (hasAccessibility() && ""accessibility not computed yet""), function getFormalAccess, file /Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-700.0.42.3/src/swift/include/swift/AST/Decl.h, line 2195.`

Seems like it's an issue with the Object class. I did a test by replacing Object with RLMObject and the error for that specific model goes away.
",kevinmlong,jpsim
2141,2015-07-01 02:38:38,"@jpsim @sandalsoft @segiddins - I'm not sure what the issue is. I cloned and build swift-2.0 branch. I copied the Realm.framework and RealmSwift.framework files into the Carthage build directory. That all seemed fine and good and recognizes RealmSwift, but the issue is that when it builds I get `Abort trap: 6 errors` for each of the model files. Close inspection at the error logging shows that it is due to an assertion error: 

`Assertion failed: (hasAccessibility() && ""accessibility not computed yet""), function getFormalAccess, file /Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-700.0.42.3/src/swift/include/swift/AST/Decl.h, line 2195.`

Seems like it's an issue with the Object class. I did a test by replacing Object with RLMObject and the error for that specific model goes away.
",kevinmlong,sandalsoft
2141,2015-07-01 02:38:38,"@jpsim @sandalsoft @segiddins - I'm not sure what the issue is. I cloned and build swift-2.0 branch. I copied the Realm.framework and RealmSwift.framework files into the Carthage build directory. That all seemed fine and good and recognizes RealmSwift, but the issue is that when it builds I get `Abort trap: 6 errors` for each of the model files. Close inspection at the error logging shows that it is due to an assertion error: 

`Assertion failed: (hasAccessibility() && ""accessibility not computed yet""), function getFormalAccess, file /Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-700.0.42.3/src/swift/include/swift/AST/Decl.h, line 2195.`

Seems like it's an issue with the Object class. I did a test by replacing Object with RLMObject and the error for that specific model goes away.
",kevinmlong,segiddins
2141,2015-07-01 04:57:30,"Anyways @kevinmlong , if the swift compiler is crashing, that's a bug in the swift compiler -- it's probably a combination of using Realm Swift and whatever other code you have in your project. Unfortunately, there's really nothing to do about it besides filing a radar for Apple. 
",segiddins,kevinmlong
2141,2015-07-01 12:37:57,"@jpsim Correct, it doesn't build from source.... Which is why step 1 is to build it from source yourself.
",sandalsoft,jpsim
2141,2015-07-07 22:44:01,"@ryanbillingsley our Swift 2.0 instructions were incorrect (should have been `build/ios/swift/` rather than `build/ios-dynamic`), and we've updated https://realm.io/docs/swift/latest/#swift-20 to reflect that.
",jpsim,ryanbillingsley
2141,2015-07-09 01:41:59,"@kevinmlong Nice! Thanks for doing that.

Just a heads up, I just tried your repo with Carthage for Xcode 7.0b3 and it's giving me this error: `Module file was created by an older version of the compiler`

Not surprising, just wanted to mention it.
",sandalsoft,kevinmlong
2141,2015-07-09 01:49:09,"Hmm...I'm on Beta 2. Didn't know Beta 3 was out. I'll update to Beta 3 and
push an update sometime tomorrow. Thanks for the updates.
On Jul 8, 2015 9:42 PM, ""Eric Nelson"" notifications@github.com wrote:

> @kevinmlong https://github.com/kevinmlong Nice! Thanks for doing that.
> 
> Just a heads up, I just tried your repo with Carthage for Xcode 7.0b3 and
> it's giving me this error: Module file was created by an older version of
> the compiler
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/2141#issuecomment-119779372.
",kevinmlong,kevinmlong
2141,2015-07-12 22:50:42,"@kevinmlong thanks for doing that.

Did it work for you on XCode 7 beta 3 when you tried it. I am still getting the ""Module file was created by an older version of the compiler"" error

I used github ""kevinmlong\realm-cocoa"" ~> 0.200.1 in my cartfile
",dmathewwws,kevinmlong
2141,2015-07-14 03:43:42,"thanks @kevinmlong. thats all i needed to do.
",dmathewwws,kevinmlong
2139,2015-07-01 17:38:47,"@bigfish24 was able to run a watchOS 2 app using Realm natively on the watch, installed via CocoaPods, so therefore without an armv7k architecture for core, using Xcode 7 Beta 2. Maybe there's something wrong with your configuration, @kishikawakatsumi?
",jpsim,kishikawakatsumi
2139,2015-07-01 20:09:31,"@jpsim yeah that was a mistake on my side. My initial test back during WWDC led to the same conclusion as @kishikawakatsumi  but I hastily rebuilt the project this morning, mixing up the targets, which lead to me thinking it worked.
",bigfish24,jpsim
2139,2015-07-01 20:09:31,"@jpsim yeah that was a mistake on my side. My initial test back during WWDC led to the same conclusion as @kishikawakatsumi  but I hastily rebuilt the project this morning, mixing up the targets, which lead to me thinking it worked.
",bigfish24,kishikawakatsumi
2139,2015-07-07 23:08:00,"@kishikawakatsumi have you filed a radar for this yet? it would be so much easier if we could share the same prebuilt framework between iOS & watchOS, but we should put pressure on Apple to do this before Xcode 7 GM hits.
",jpsim,kishikawakatsumi
2139,2015-07-08 14:16:13,"@jpsim http://www.openradar.me/21724015
If you find any problems, please let me know.
",kishikawakatsumi,jpsim
2139,2015-07-08 19:48:07,"Thank you very much for filing that, @kishikawakatsumi!
",jpsim,kishikawakatsumi
2139,2015-07-13 09:12:11,"@segiddins @tgoyne @jpsim Apple closed [the radar](http://www.openradar.me/21724015) due to following comment:

> Apple Developer Relations11-Jul-2015 05:30 AM
> 
> There are no plans to address this based on the following:
> 
> You want one slice of the binary to be watchOS and the other to be iOS. E.g., v7k watchOS and armv7+arm64 iOS. Then when linking, the right one gets pulled out, similar to having a fat library contain both a simulator and a device slice.
> 
> This is not something we want to support.
> 
> We are now closing this report.
> 
> If you have questions about the resolution, or if this is still a critical issue for you, then please update your bug report with that information.
> 
> Please be sure to regularly check new Apple releases for any updates that might affect this issue.

Do you have any ideas?
",kishikawakatsumi,jpsim
2139,2015-07-13 09:12:11,"@segiddins @tgoyne @jpsim Apple closed [the radar](http://www.openradar.me/21724015) due to following comment:

> Apple Developer Relations11-Jul-2015 05:30 AM
> 
> There are no plans to address this based on the following:
> 
> You want one slice of the binary to be watchOS and the other to be iOS. E.g., v7k watchOS and armv7+arm64 iOS. Then when linking, the right one gets pulled out, similar to having a fat library contain both a simulator and a device slice.
> 
> This is not something we want to support.
> 
> We are now closing this report.
> 
> If you have questions about the resolution, or if this is still a critical issue for you, then please update your bug report with that information.
> 
> Please be sure to regularly check new Apple releases for any updates that might affect this issue.

Do you have any ideas?
",kishikawakatsumi,tgoyne
2139,2015-07-13 09:12:11,"@segiddins @tgoyne @jpsim Apple closed [the radar](http://www.openradar.me/21724015) due to following comment:

> Apple Developer Relations11-Jul-2015 05:30 AM
> 
> There are no plans to address this based on the following:
> 
> You want one slice of the binary to be watchOS and the other to be iOS. E.g., v7k watchOS and armv7+arm64 iOS. Then when linking, the right one gets pulled out, similar to having a fat library contain both a simulator and a device slice.
> 
> This is not something we want to support.
> 
> We are now closing this report.
> 
> If you have questions about the resolution, or if this is still a critical issue for you, then please update your bug report with that information.
> 
> Please be sure to regularly check new Apple releases for any updates that might affect this issue.

Do you have any ideas?
",kishikawakatsumi,segiddins
2136,2015-06-30 17:20:44,"@ikonst, I just took a look at the `build.sh` code in question, and I believe the current version of Realm should work fine via CocoaPods on case-sensitive systems. What version of Realm are you currently installing, and could you try updating to 0.93.2 to see if that fixes things? Thanks!
",segiddins,ikonst
2136,2015-07-03 14:20:24,"> I think it will occur when copying a project that was set up on a case-insensitive file system to a case-sensitive file system.

To reproduce this, I've created an entirely new project on a case-sensitive filesystem. (This is the .dmg I've linked to above.)

@kishikawakatsumi Are you having trouble reproducing this on your machine?
",ikonst,kishikawakatsumi
2136,2015-07-03 16:06:12,"@ikonst I usually use the case-sensitive file system. As mentioned above, it does not have any issue to a new setup, except the directory structure is a little different.
",kishikawakatsumi,ikonst
2136,2015-07-03 16:09:52,"@kishikawakatsumi I'll re-test it on my side. Is it enough to create a new project in Xcode, add a Podfile with Realm and `pod install`, or should I also delete something in ~/.cocoapods?
",ikonst,kishikawakatsumi
2136,2015-07-03 17:27:27,"@ikonst Just in case, 



then,


",kishikawakatsumi,ikonst
2136,2015-07-21 17:21:22,"The outcome of this thread is that using Realm on a case-sensitive file system should work, but mixing case-sensitive and case-insensitive projects will lead to problems.

Generally, I'd advise against using HFS+ in case-sensitive mode because many apps aren't tested in this configuration.

Closing for now, @ikonst let us know if we need to reopen this.
",jpsim,ikonst
2134,2015-06-26 21:56:10,"I think @shmidt is asking for `person.dogs.remove(mydog)` as a shortcut to `person.dogs.removeAtIndex(person.dogs.indexOf(mydog))`.

We've discussed adding something similar to Objective-C in the past and opted against it because we didn't feel that going from a single line of code to a slightly shorter single line of code was enough semantic sugar to justify adding an additional API call to the binding.

I still think this is the case, especially since it's trivial for users who really want this shortcut to add it as a Swift extension (or Objective-C category).
",jpsim,shmidt
2132,2015-06-26 18:06:31,"@longxianlin is it possible you set a notification block in your table view controller to reload its data? Like this?



If so, then you're attempting to delete a non-existing row from UITableView's internal model. Say you have one row, and you try to delete it. You delete it from the Realm and commit the transaction, which triggers the notification block, which reloads the table view's data, so now there are no rows, and then the table view attempts to animate the first row being deleted (but it doesn't exist any more).

Here's a gist demonstrating how you could adapt our Swift TableView example to animate adding and removing rows: https://gist.github.com/jpsim/5e95958ed064d0b45ce3
",jpsim,longxianlin
2131,2015-06-26 06:03:43,"@tariq235 so sorry to hear you're running into issues, but I don't see anything wrong with the code snippet you shared. If you'd like to share a project that reproduces the issue with us, either here or privately at help@realm.io, we'd be happy to take a look!
",segiddins,tariq235
2131,2015-06-26 06:18:06,"hey @segiddins  Bad news for me that nothing wrong with the code :D Because now I have to go back n forth with other code pieces.

Code is linked to our major product release so probably I'll create a sample and try to reproduce the issue and then will handover the sample privately.
",tariq235,segiddins
2131,2015-07-14 11:03:31,"@tariq235: Have you been able to figure out the issue in the product or reproduce this issue in a sample app?
",mrackwitz,tariq235
2131,2015-07-16 11:44:50,"hey @mrackwitz  @jpsim  @segiddins  Closing this issue because it wasn't related to Realm. It was really hard for me to troubleshoot the problem and at the end root cause was custom navigation.
",tariq235,mrackwitz
2131,2015-07-16 11:44:50,"hey @mrackwitz  @jpsim  @segiddins  Closing this issue because it wasn't related to Realm. It was really hard for me to troubleshoot the problem and at the end root cause was custom navigation.
",tariq235,segiddins
2128,2015-06-25 23:45:09,"@bdash well, now there's nothing preventing Realm from being usable in older versions of Xcode, and I'd rather not add an incompatibility when it can be avoided?
",segiddins,bdash
2124,2015-06-25 14:46:08,"@ProjectDent querying based upon ignored or computed properties isn't supported, since querying happens directly in the database engine, which only has persisted data available to it.
We're tracking adding support for querying based upon backlinks in https://github.com/realm/realm-cocoa/issues/1324, but the suggestion (storing an explicit backlink property) should still work!
",segiddins,ProjectDent
2123,2015-06-25 14:58:25,"@stefanvermaas you can use `Realm.add(_:update:)` (and `Realm.create(_:update:)`) where `update == true` to update an existing object with the given primary key. We have some more docs at https://realm.io/docs/swift/latest/#updating-objects, hope that helps!
",segiddins,stefanvermaas
2123,2015-06-25 20:39:37,"Thanks @segiddins, though this still doesn't feel right. Though I guess checking or the item already exists isn't that bad. Okay thanks, I'll figure it out!
",stefanvermaas,segiddins
2123,2015-06-26 13:08:46,"@segiddins Thank you. Your comment about `add(_:update:)` saved my day. :smile: NicholasTD07/SwiftDaily-ZhiHu@d49b9b82b72487d01ce574018ecbcdd4a201e168

@stefanvermaas Do you have `primaryKey` for all three models? In the project above, I also have embedded models. `add(_:update:)` works. All models in my project have `primaryKey`
",NicholasTD07,segiddins
2123,2015-06-26 13:08:46,"@segiddins Thank you. Your comment about `add(_:update:)` saved my day. :smile: NicholasTD07/SwiftDaily-ZhiHu@d49b9b82b72487d01ce574018ecbcdd4a201e168

@stefanvermaas Do you have `primaryKey` for all three models? In the project above, I also have embedded models. `add(_:update:)` works. All models in my project have `primaryKey`
",NicholasTD07,stefanvermaas
2123,2015-06-26 21:49:27,"@stefanvermaas doing `realm.create(Receipt.self, value: jsonData, update: true)` there should do what you want. If it isn't, could you please share an example project that exhibits the issues you seeing here or privately at help@realm.io? Thanks!
",segiddins,stefanvermaas
2123,2015-06-27 02:49:04,"@stefanvermaas Another thing is that I see you are using a `sharedInstance` of `Realm` in your code. If you are sharing it across threads, you may run into problems. Quote from Realm's documentation, ""_Sharing Realm instances across threads is not supported._""
",NicholasTD07,stefanvermaas
2123,2015-06-29 11:36:15,"Both thanks for pointing this out! I'll try it in a second. 

@NicholasTD07: I'm only using this in the (UI) default thread and not in a background thread, so this should be fine, right?! Or am I interpreting your suggestion wrongly?
",stefanvermaas,NicholasTD07
2123,2015-06-29 12:09:57,"@stefanvermaas if that is used only in one thread then it is ok. :)
",NicholasTD07,stefanvermaas
2121,2015-06-25 15:00:51,"(@ProjectDent we're currently tracking adding support for that kind of polymorphism at https://github.com/realm/realm-cocoa/issues/1109)
",segiddins,ProjectDent
2116,2015-06-24 06:28:35,"@VNSKing it's very strange that the `Pods` directory doesn't contain a `Headers` subdir -- that's almost certainly a CocoaPods bug if it's happening, and the CocoaPods team would definitely appreciate a reproducible bug report! In the meantime, I'd recommend


",segiddins,VNSKing
2116,2015-06-25 01:31:25,"@segiddins Thanks！！ The problem is resolved.
",VNSKing,segiddins
2115,2015-06-24 00:04:12,"@bryan1anderson you can have a look at our table view example (https://github.com/realm/realm-cocoa/blob/master/examples/ios/swift/TableView/TableViewController.swift) to get a sense for what we recommend. The biggest difference from how you have things set up is that the example has a `Results` property to hold the backing results, instead of refetching it every time it's needed.


",segiddins,bryan1anderson
2111,2015-06-23 17:45:08,"@github2016a we're already tracking the need for distinct queries in https://github.com/realm/realm-cocoa/issues/1103 (we agree it'd be very nice to have), but the workaround suggested by JP should still work.

As for ""grouped"" queries, you can achieve the same effect by just sorting on the properties you wish to group by. I hope that helps!
",segiddins,github2016a
2111,2015-06-25 11:00:24,"@segiddins thanks for your reply, for ""just get count by group by"" queries,days before i made some test, sorting on the properties will finally get the result, but I have to use **for** , when 10000+ records, it takes time , even more than sqlite. thanks again.
",github2016a,segiddins
2111,2015-06-25 15:05:52,"@github2016a I'm curious to see your project, since sorting in Realm is heavily optimized and should be pretty fast. We'd be happy to try and help get that query faster, if we can!
",segiddins,github2016a
2111,2015-06-26 06:44:22,"@segiddins thanks.Here are the code that I tested.The Problem is not sorting in Realm, The problem is the **FOR** loop that I used in code: 
first I add some test Data：





also add data in sqlite:



so we got 10000 records in realm and sqlite.
test in realm :



test in sqlite:



the finally result is 



the Realm's time is 560 millisecond,The Sqlite takes 20 millisecond.
Hope there is a better way.
",github2016a,segiddins
2111,2015-07-21 17:10:06,"@github2016a we're tracking a ""distinct"" query feature request in #1103 so I'm closing this issue as a duplicate. Feel free to resume the conversation there if you have questions or can share workarounds until we officially support it. Thanks!
",jpsim,github2016a
2108,2015-06-22 22:55:23,"@DimDL thanks for reporting this! v0.93.2 should contain a fix for this particular issue, so could you please try updating and letting us know if that fixes things? Thanks!
",segiddins,DimDL
2107,2015-06-24 06:26:10,"Thanks for pointing that out, @ikonst! @segiddins updated that part of our docs this morning thanks to your keen eye and for telling us about the inaccuracy: https://realm.io/docs/objc/latest/#performing-a-migration
",jpsim,ikonst
2106,2015-06-22 22:59:59,"@imran20487, @natemann is correct that this is caused by Xcode 7 enabling bit code support by default. Bit code support precludes weak-linking frameworks, which cocoapods currently does. Until https://github.com/CocoaPods/CocoaPods/issues/3661 gets addressed, you can either disable bit code generation on your app or go into the target dependencies section of your target in your Xcode project, and change `Pods.framework` from optional to required.
",segiddins,imran20487
2106,2015-06-22 22:59:59,"@imran20487, @natemann is correct that this is caused by Xcode 7 enabling bit code support by default. Bit code support precludes weak-linking frameworks, which cocoapods currently does. Until https://github.com/CocoaPods/CocoaPods/issues/3661 gets addressed, you can either disable bit code generation on your app or go into the target dependencies section of your target in your Xcode project, and change `Pods.framework` from optional to required.
",segiddins,natemann
2106,2015-06-25 21:58:46,"Closing this issue, as it's quite likely the case that lack of bitcode support is to blame here. @imran20487 please reopen if that's not the case.
",jpsim,imran20487
2105,2015-06-22 13:52:49,"@sandalsoft  Thank you for the suggestion. @jpsim  @segiddins  Do we have any recommended and best approach ?
",tariq235,sandalsoft
2105,2015-06-22 22:54:04,"@tariq235 if you really want to convert your `RLMArray` to an `NSArray`, you can do `[rlmArray valueForKey:@""self""]`.
",segiddins,tariq235
2105,2015-06-25 07:23:58,"Thanks @segiddins  @jpsim  I'd to do some workaround because my main RLMObject was linked to another RLMObject i.e. 



I am not sure this is a correct way but its giving me standalone object:



Now this array contains all standalone objects.
",tariq235,jpsim
2105,2015-06-25 07:23:58,"Thanks @segiddins  @jpsim  I'd to do some workaround because my main RLMObject was linked to another RLMObject i.e. 



I am not sure this is a correct way but its giving me standalone object:



Now this array contains all standalone objects.
",tariq235,segiddins
2104,2015-06-22 22:56:11,"@Bajaber thanks for reporting this! v0.93.2 should contain a fix for this particular issue, so could you please try updating and letting us know if that fixes things? Thanks!
",segiddins,Bajaber
2103,2015-06-22 22:58:09,"@ciminuv can you dry deleting the `Pods` directory and re-installing? This seems like a weird CocoaPods integration issue. Thanks!
",segiddins,ciminuv
2103,2015-06-23 17:11:21,"@segiddins: After adding this line `source 'https://github.com/CocoaPods/Specs.git'` into `Podfile` it works like magic :smiley: 
",ciminuv,segiddins
2102,2015-06-19 15:48:32,"@longxianlin is there anything in particular that's not working?
",segiddins,longxianlin
2101,2015-06-19 00:50:10,"@rjjohnpatrickcruz could you possibly share some code that demonstrates what's going wrong so we can help you figure out what's happening? Are you sure you'll not using an in-memory realm, and that you're adding your objects to the Realm and committing that inside a write transaction? Thanks!
",segiddins,rjjohnpatrickcruz
2101,2015-06-22 04:12:41,"@rjjohnpatrickcruz glad to hear you figured things out!
",segiddins,rjjohnpatrickcruz
2099,2015-06-18 15:26:36,"@MarcoSero is there anything in particular realm doesn't support for watchos? I believe @kishikawakatsumi looked into this earlier?
",segiddins,MarcoSero
2098,2015-06-20 18:44:32,"@TimOliver you don't have to wait for App Store availability to merge this, since the location of the browser's source isn't affected by where the binary is available.
",jpsim,TimOliver
2094,2015-07-21 22:15:03,"I actually like this overall for consolidating exception messages, keeping things a bit more typed, and moving towards more shared code in the bindings. Well done, @alazier :+1:.
",jpsim,alazier
2094,2015-07-21 22:59:26,"I added an object store style exception for property optionality change. @alazier can you please confirm this was done the right way?
",jpsim,alazier
2092,2015-06-16 21:56:28,"@kishikawakatsumi let me know when this is no longer WIP and we'll make CI run `test-ios7-static`, run the job a few times to make sure it's stable, and then merge it in.
",jpsim,kishikawakatsumi
2092,2015-06-16 22:31:51,"> run the job a few times to make sure it's stable, and then merge it in.

I think so. @jpsim 
If frequently reproduced after try several times, I'll investigate. Otherwise merge this for now.
",kishikawakatsumi,jpsim
2092,2015-06-16 22:50:17,"@kishikawakatsumi please be aware that at the moment, the objc_pr job on Jenkins doesn't run `test-ios7-static`. I'll enable that for you in a minute.
",jpsim,kishikawakatsumi
2092,2015-06-24 07:33:15,"@kishikawakatsumi please add a `verify-ios7-static` command to `build.sh` (all the cocoa PR CI jobs start with `verify-`) and we'll enable that matrix item for just this branch so we can confirm it's working before rolling it out to all PRs.
",jpsim,kishikawakatsumi
2092,2015-06-25 01:49:01,"@jpsim Added `verify-ios7-static` and `verify-ios7-static-debug` https://github.com/realm/realm-cocoa/commit/28a2cd5b1556c035dae9e379e5388963f9715437.
It executes `test-ios7-static` each configuration. It is unnecessary to execute `examples-ios` I think. 
",kishikawakatsumi,jpsim
2092,2015-06-25 06:22:20,"Thanks @kishikawakatsumi!
",jpsim,kishikawakatsumi
2091,2015-06-16 21:48:25,"@segiddins Oh, I see and it works. Thanks.
So pay your attention, please, to documentation issues I've mentioned above
@jpsim Thanks I'll try it as soon as it is added
",romanvbabenko,jpsim
2091,2015-06-16 21:48:25,"@segiddins Oh, I see and it works. Thanks.
So pay your attention, please, to documentation issues I've mentioned above
@jpsim Thanks I'll try it as soon as it is added
",romanvbabenko,segiddins
2090,2015-06-16 17:01:49,"Hi @bryan1anderson, I'm sorry you're having trouble installing Realm Swift.

We'll need a sample project, or steps to reproduce, to look into this further. Although this sounds like more of an issue with CocoaPods than Realm, we'll do our best to look into it for you.

We have a number of [installation examples](https://github.com/realm/realm-cocoa/tree/master/examples/installation), which tests all of our supported installation methods (including CocoaPods with Swift), which we verify as part of our continuous integration process.

You could use the [ios/swift/CocoaPodsExample](https://github.com/realm/realm-cocoa/tree/master/examples/installation/ios/swift/CocoaPodsExample) project as a starting point to create a reproduction sample for us.
",jpsim,bryan1anderson
2085,2015-06-16 18:23:32,"Thanks for doing this, @mrackwitz! Ping me again once you've addressed my feedback and I'll give it another final look over.
",jpsim,mrackwitz
2083,2015-08-12 15:11:32,"@jpsim: Hasn't this been released by now?
",bmunkholm,jpsim
2081,2015-06-15 10:12:13,"@kishikawakatsumi @jpsim thanks
",onmyway133,jpsim
2081,2015-06-15 10:12:13,"@kishikawakatsumi @jpsim thanks
",onmyway133,kishikawakatsumi
2077,2015-06-12 17:14:27,"@tgoyne what do you make of those performance test failures?
",jpsim,tgoyne
2074,2015-06-12 17:41:58,"I was able to reproduce the ""Mac Developer"" issue on another machine this morning. I saw it after using Xcode's ""Fix This"" to address a complaint about an outdated provisioning profile. When looking at the Xcode project file I noticed that as part of Xcode's ""fixing"" it had inserted some references to the ""Mac Developer"" identity in the Xcode project. Reverting the project file let things build successfully. @tgoyne, any idea if Xcode had made changes to the project file when you were testing this PR?
",bdash,tgoyne
2074,2015-07-02 19:45:48,"@bdash `build.sh verify-ios-swift` is failing for me locally too, so you shouldn't need CI to investigate this further.
",jpsim,bdash
2074,2015-07-02 19:56:23,"@jpsim If it were failing locally for me I'd not be trying to investigate this via CI…
",bdash,jpsim
2073,2015-06-16 20:20:52,"@tgoyne I just pushed a pair of commits addressing my comments.
",segiddins,tgoyne
2073,2015-06-24 17:20:29,"@tgoyne I'm happy to rebase this and merge it if you're happy.
",segiddins,tgoyne
2072,2015-06-15 21:33:36,"@pcperini could you please share the project that exhibited this issue with us, either here or privately at help@realm.io so we can try and see what's happening? Thanks!
",segiddins,pcperini
2072,2015-06-25 19:25:34,"Closing due to inactivity. @pcperini if you manage to craft a reproduction case, please reopen this issue and share the offending code with us.
",jpsim,pcperini
2070,2015-10-14 18:49:32,"@pardel we can't make the shell script executable because then Apple would enforce that it be codesigned! We found this out the hard way: https://realm.io/news/realm-objc-swift-0.93/#lessons-in-executable-code-signing
",jpsim,pardel
2070,2015-10-14 19:37:54,"@jpsim ah! Thank you for the link.
",pardel,jpsim
2070,2016-01-25 02:00:17,"Thanks for the suggestion, @karloscarweber, we've just pushed a change to do just that!

![image](https://cloud.githubusercontent.com/assets/474794/12540915/5057d8ac-c2c4-11e5-9e53-b8276b12aadf.png)
",jpsim,karloscarweber
2069,2015-06-15 15:35:51,"@imran20487 as you can see from this PR, we're still working on supporting Swift 2. As you're now subscribed to this issue, you'll be notified when we make progress and have anything further to share.

Thanks for your patience.
",jpsim,imran20487
2069,2015-06-16 17:35:28,"@imran20487 I was mistaken, @tgoyne actually fixed the last remaining issues with getting Realm Swift to work with the Swift 2 beta last Friday.

If you'd like to try out, you can use CocoaPods with the following `Podfile` contents:


",jpsim,tgoyne
2069,2015-06-16 17:35:28,"@imran20487 I was mistaken, @tgoyne actually fixed the last remaining issues with getting Realm Swift to work with the Swift 2 beta last Friday.

If you'd like to try out, you can use CocoaPods with the following `Podfile` contents:


",jpsim,imran20487
2069,2015-06-17 09:57:02,"@jpsim I'm getting the following error when trying to install the branch with CocoaPods:


",anlaital,jpsim
2069,2015-06-17 14:14:43,"@anlaital that's an issue with git not being setup with your ssh keys (since you're using a git rather than http a URL), not with CocoaPods. 
",segiddins,anlaital
2069,2015-06-17 14:26:13,"@segiddins Yeah, noticed just now that it seems that all my GitHub SSH keys have died. Sorry about that. :)
",anlaital,segiddins
2065,2015-06-17 16:06:32,"@jpsim 
1. This didn't work for me, adding "" ~> 0.93"" made no difference. Is there another Carthage option to specify use binaries?
2. Someone should probably change the RealmSwift/Cartage option on https://realm.io/docs/swift/latest/ since those instructions are apparently not accurate. 
",mike-sand,jpsim
2062,2015-06-09 20:05:50,"@voidref even if your are not using automatic syntax conversion compilation will still failed. But doesn't matter I'll be waiting for fixed.
@jpsim thanks for that
",grimabe,jpsim
2062,2015-06-09 20:05:50,"@voidref even if your are not using automatic syntax conversion compilation will still failed. But doesn't matter I'll be waiting for fixed.
@jpsim thanks for that
",grimabe,voidref
2062,2015-06-11 08:23:14,"Thank you Realm team to start working on this immediately.

Just a heads up: as @voidref said, installing the swift-2.0 branch (with Carthage in my case) does not create the RealmSwift.framework in the build folders.
I had to manually run `./build.sh ios-swift`.
",MarcoSero,voidref
2062,2015-06-11 18:24:16,"@MarcoSero That's now fixed, and the samples work in the simulator and on device.
",tgoyne,MarcoSero
2061,2015-06-08 22:31:26,"@tgoyne I actually liked your idea of making the inline macro
",segiddins,tgoyne
2061,2015-07-10 00:19:35,"This is ready to review /cc @tgoyne @segiddins @bdash. Accompanying docs PR: https://github.com/realm/realm.io/pull/742
",jpsim,tgoyne
2061,2015-07-10 00:19:35,"This is ready to review /cc @tgoyne @segiddins @bdash. Accompanying docs PR: https://github.com/realm/realm.io/pull/742
",jpsim,segiddins
2060,2015-06-15 21:32:36,"@flipchen it looks to me like you're using an old version of RealmSwift.framework, which attempted to vendor Realm.framework -- we abandoned that approach in 0.93.x. Could you please try re-installing Realm Swift following our instructions at https://realm.io/docs/swift/latest/ with the newest version of Realm? Thanks!
",segiddins,flipchen
2060,2015-06-17 17:08:49,"@flipchen please make sure you're using Carthage v0.7.4 or later, as earlier versions of Carthage had trouble picking up the correct Realm tag
",segiddins,flipchen
2060,2015-06-17 17:10:37,"@segiddins I checked, I have 0.7.4 installed.
",flipchen,segiddins
2057,2015-06-09 22:06:14,"@alazier Sam thinks this may require podspec changes. Did you confirm that your changes work with our current podspec?
",jpsim,alazier
2057,2015-06-10 15:03:18,"So there are issues with the podspc. Fixed some of them but there are still some issues with the new headers. Would be great if @segiddins or someone else who actually knows cocoapods could fix rather than having me waste more time trying to figure this out. There should also be a test run by ci which verifies the podspec is in order for future changes.

Also feedback on the actual code would be appreciated.
",alazier,segiddins
2057,2015-06-10 22:11:50,"@tgoyne I think I have addressed all of your comments other than implementing `what()` for the exception classes. The issue there is that we really want to return a formatted string, so we need to allocate memory to store each message in the exception. If this is acceptable I will make this change, otherwise will simply not derive from std::exception.
",alazier,tgoyne
2057,2015-06-10 22:46:49,"@tgoyne I've implemented `what()` for the exception classes. I think that covers all of the feedback thus far. Want to take another look?
",alazier,tgoyne
2057,2015-06-11 19:21:03,"I added a new method per @tgoyne 's suggestion to remove the table and clear the primary key to preserve the previous behavior in the objc binding. @cmelchior if there is other stuff we need to support the java binding we can add that to a future pr. As soon as we finish this I can get started adding the ability to specify custom error messages and whatever else you guys need. We should also probably discuss ways to reconcile differences in behavior across bindings where possible but there is no need for that discussion to block this pr.
",alazier,tgoyne
2055,2015-06-25 18:15:04,"What's the status on this? Are we still waiting on CocoaPods to properly support this? /cc @tgoyne @segiddins 
",jpsim,tgoyne
2055,2015-06-25 18:15:04,"What's the status on this? Are we still waiting on CocoaPods to properly support this? /cc @tgoyne @segiddins 
",jpsim,segiddins
2053,2015-07-18 20:24:04,"@ikonst the only issue is that making that migration would require every realm user to update to CocoaPods 0.38, which I just release about an hour ago.
",segiddins,ikonst
2051,2015-06-04 17:33:20,"@jimjeffers It sounds to me like you have open write transaction's that you've not yet committed. You're actually not running into conflicting transactions, but are rather trying to begin a write transaction when one is already open. The best advice I can give you is to not leave right transactions open across iterations of the runloop, and that should help keep your multi-threading safe!
",segiddins,jimjeffers
2051,2015-06-04 20:33:41,"@segiddins in my caching algorithm I have something along the lines of...



Would it be best to treat this as an anti-pattern and instead do something like this?


",jimjeffers,segiddins
2051,2015-06-08 15:44:02,"@segiddins Well it looks like we were 63 for 63 so I couldn't find any transactions that were left without a commit. 

I ended up refactoring any transaction that had extensive loops manipulating items and instead opted to do that prior and just submit the array for batch updates in the realm. We haven't seen anymore errors since. I think one of the loops in particular was troublesome because it was querying realm for more objects to delete in each iteration. Basically, I think our developers were doing a lot of things we shouldn't have been doing inside of a write transaction ;)
",jimjeffers,segiddins
2048,2015-06-03 15:13:25,"@natanrolnik can you share the entire backtrace at the point the app is hanging? Having extra keys in that dictionary shouldn't be causing any issues.
",segiddins,natanrolnik
2046,2015-06-03 16:12:10,"@ufosky I'm surprised to hear that! Taking a look at the Realm code in that repo, there are a few places where performance could probably be optimized a bit: 

1) https://github.com/samus/iOSStorageShootOut/blob/9758896f64835046f67e37264d4cb085de1cdf33/RealmShootOut/RealmPostDataController.m#L22-L38 -- importing posts could do a write transaction outside of a loop, so there's only one write transaction for all the posts imported at once

2) https://github.com/samus/iOSStorageShootOut/blob/9758896f64835046f67e37264d4cb085de1cdf33/RealmShootOut/RealmPostDataController.m#L40-L45 -- if `postId` where made a primary key, you could use `+[RLMObject objectForPrimaryKey]`.

3) https://github.com/samus/iOSStorageShootOut/blob/9758896f64835046f67e37264d4cb085de1cdf33/RealmShootOut/RealmPostDataController.m#L70-L76 -- `RLMResults` is optimized to be lazy, so converting it to an `NSArray` is often unnecessary overhead, since `RLMResults` also conforms to `NSFastEnumeration`.
",segiddins,ufosky
2046,2015-06-24 20:03:42,"@ufosky those benchmarks aren't representative of Realm's performance in production.

For one, you're measuring the CSV parsing as part of the benchmarks, which takes over 90% of the benchmark time. Also, all the schemes are set to run in Debug mode (which doesn't reflect the behavior or performance of Release builds). Applying Sam's recommendations makes Realm significantly faster than Core Data (and other solutions in those tests).

We've published benchmarks before (see our [launch blog post](https://realm.io/news/introducing-realm/) and corresponding [benchmark source code](https://realm.io/assets/Bench.zip)). I encourage you to look through those for more information, although they are a bit outdated.
",jpsim,ufosky
2043,2015-07-09 21:09:05,"This PR adds what I think is the appropriate (and expected) behavior. @segiddins can you please rebase this so we can revive this PR?
",jpsim,segiddins
2043,2015-07-09 21:56:30,"Rebased, @jpsim.
",segiddins,jpsim
2040,2015-06-02 13:47:07,"Thanks for the PR, @susieyy! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,susieyy
2038,2015-06-01 23:51:33,"@amitai-hoze if you need to use Realm from both Swift and Objective-C, we recommend using the Realm Objective-C framework (and thus making your model classes subclass `RLMObject`), since Realm Swift takes advantage of swift-only features.
",segiddins,amitai-hoze
2036,2015-06-01 23:28:09,"@segiddins is right. If you don't want to use the 3rd party mapping tools mentioned above, here's another way to sanitize your json data to match up with your schema:



Should print


",jpsim,segiddins
2035,2015-06-01 22:25:36,"@kevinmlong in the meantime, you can specify `github ""realm/realm-cocoa"" ~> 0.93.1` in your `Cartfile`.
",segiddins,kevinmlong
2035,2015-06-23 14:15:03,"@NicholasTD07 at the moment, you'll either need to build for source or use something like a git submodule and a subproject to build non-released versions of RealmSwift due to some limitations in Carthage. 
",segiddins,NicholasTD07
2035,2015-06-23 22:31:19,"@segiddins Thank you.

It came to me that, I can use Carthage to manage Realm as a dependency. The only thing Carthage can't do, well, without a prebuilt binary, is to build the RealmSwift project which I can do it by hand. :)
",NicholasTD07,segiddins
2034,2015-06-01 20:38:13,"@andersklenke what version of Carthage are you using? It should work fine with 0.7.3.
",segiddins,andersklenke
2034,2015-06-03 20:32:22,"Thanks @jpsim 
It seems to work now!
",andersklenke,jpsim
2030,2015-06-01 16:52:07,"@akolov what version of Carthage are you using? This should be resolved with Carthage 0.7.2 or later.
",jpsim,akolov
2028,2015-05-31 08:14:50,"v.thanks @segiddins , issue fixed with importing Foundation.NSDate

import RealmSwift
import Foundation.NSDate

I think you guys have to mention this in your sample code.
",abdulrauf618,segiddins
2026,2015-05-30 19:20:00,"Thanks for the corrections, @mamaral!
",jpsim,mamaral
2021,2015-05-29 17:52:59,"@conradev are you opening the Realm from multiple different threads?
",segiddins,conradev
2021,2015-06-01 18:49:32,"@conradev I just tested with a 3+MB Realm file in a today widget, and my process wasn't getting killed. Could you provide us with some steps to reproduce the issue so we can continue to look into it? Thanks!
",segiddins,conradev
2021,2015-06-12 19:12:51,"@segiddins - I finally figured it out. It turns out that the issue is [here](https://github.com/realm/realm-cocoa/blob/b51bbf47f508b7815a26c824cd0039824493ea07/Realm/RLMSchema.mm#L86). Workflow links against a lot of frameworks, and `objc_copyClassList` initializes every single class into structures in the runtime. Normally this process is lazy. For a sense of scale, in a sample app that links against every single framework, `objc_copyClassList` causes 7 MB of memory to be used, and the penalty in Workflow is 5 MB. This is roughly a third of the memory available to Notification Center widgets.

I hardcoded a list of `RLMObject` subclasses into `Realm.framework` and the issue is fixed. Do you think you could provide an alternate way of registering `RLMObject` subclasses, perhaps like this:



Let me know if this is something you'd consider supporting, if not I'll continue to maintain our ""fork"".
",conradev,segiddins
2020,2015-05-29 18:42:44,"@hkmushtaq as long as you have a primary key on the child objects, it should be re-added to the `List`. Could you possibly share some code that reproduces this issue so we can dig in? Additionally, some changes around this part of the Realm code were made in the past few releases, so can you verify if the issue persists even with v0.93.1? Thanks!
",segiddins,hkmushtaq
2020,2015-06-02 17:10:23,"Yes, that makes sense. Thanks for digging into that, @hkmushtaq 
",jpsim,hkmushtaq
2019,2015-05-29 04:17:26,"@mamaral that's definitely possible, although that's a compiler error rather than a crash.
",segiddins,mamaral
2019,2015-05-29 04:21:53,"@pavel0712 Perhaps try changing `NSUInteger oldSchemaVersion` to `uint64_t oldSchemaVersion` inside the migration block. Works for me.
",mamaral,pavel0712
2019,2015-05-29 09:04:17,"@mamaral  I am using Realm (0.91.1) and changing NSUInteger to uint64_t oldSchemaVersion inside the migration block dose not work for me.
Exception:
Printing description of exceptionMessages:
<__NSArrayM 0x7f896e168d80>(
Property 'created' has been added to latest object model.
)
",pavel0712,mamaral
2019,2015-05-29 17:17:04,"@pavel0712 from the exception there, it seems you need to increment your schema version because you've added a `created` property to an object model.
",jpsim,pavel0712
2019,2015-06-01 09:08:50,"@jpsim well ok. I will try once again.
In realm i have two storages. First storage `[RLMRealm defaultRealm]`, second one i created with `[RLMRealm realmWithPath:myPath];`
In bough storages exists model `Product : RLMObject` . Now I need to add new property for my model Product : `NSDate *created`. Then I made migration for default realm storage: 



and for my custom storage



This is first migration for bough storages. For which one i should increment version?
",pavel0712,jpsim
2016,2015-05-27 22:08:46,"Hi @tgoyne, thanks for your reply.

Well, since I'm downloading over 132 files, saving them when the app opens for the first time adds another 2 minute loading time until all the files are downloaded & created. Instead what I'm doing is getting the files as NSData and saving them in the default realm, then when I need them, I generate only those that I need on the fly in the temp directory.

According to your suggestion, I'm thinking that the way to go is instead of using the default realm (`RLMRealm.defaultRealm()`), create a new realm file in the Caches directory and save the data there. Then probably Apple won't consider this as an issue since that directory is not backed up.

Since I found the documentation about creating new realm files a bit light, can you suggest me where would be the best place to create the new realm file and a few code lines how the new file is created. If you have a link to any example it would be even better.

Thanks for your time,

V. 
",vlonjatg,tgoyne
2016,2015-05-29 16:04:51,"Thanks @tgoyne. I just re-submited the app and I will post here If I get any update from the review team.
",vlonjatg,tgoyne
2016,2015-06-09 01:14:58,"Update: with the changes made, the app was accepted. To anyone having this problem please use @tgoyne provided solution, and your app will go through.
",vlonjatg,tgoyne
2015,2015-06-24 18:19:16,"Hi @csauvage, I'm just following up on my request for a repro case... it's really the best way to continue investigating what happened here.
",jpsim,csauvage
2015,2015-06-24 18:21:24,"Hi JP, 

I’m at ObjCGN for the moment, will send you that on monday (holy sh*\* I forget that when was on your offices...)

Best Regards,
-- 
Clément Sauvage
 iOS | OS X Developer

Lille Area, France

+33 6 78 77 13 12

Le 24 juin 2015 à 20:19:29, JP Simard (notifications@github.com) a écrit:

Hi @csauvage, I'm just following up on my request for a repro case... it's really the best way to continue investigating what happened here.

—
Reply to this email directly or view it on GitHub.
",csauvage,csauvage
2015,2015-07-08 23:00:26,"@csauvage could you send us a repro case, please?
",jpsim,csauvage
2015,2015-07-21 17:08:17,"Closing since we never heard back, but @csauvage please send us a repro case if you can ever create one. Thanks!
",jpsim,csauvage
2014,2015-05-27 15:52:42,"@souhl can you please share the exception that Realm is throwing when you call `[RLMRealm defaultRealm]`?
",segiddins,souhl
2014,2015-05-28 09:53:15,"@segiddins sure:


",souhl,segiddins
2014,2015-06-16 17:17:33,"@souhl I'm closing this since we need more information from you to investigate further. Please reopen if you can provide more info.
",jpsim,souhl
2014,2015-08-22 00:40:19,"@wyn15811017 this happens when `setSchemaVersion:` is called _after_ a realm file has already been opened. My suggestion is to debug your app to identify where you may be opening a realm file (you could set a breakpoint on `-[RLMRealm init]`) and make sure to call `setSchemaVersion:` before this point.
",jpsim,wyn15811017
2012,2015-05-27 16:06:18,"@ndonald2 unfortunately, this is a limitation of the way C++ exception handling is done on Itanium-like CPUs. It uses something called a compact unwind table, which has an upper bound on the number of different exception paths it can handle in a single binary. [This StackOverflow question](http://stackoverflow.com/questions/21150223/ld-warning-too-many-personality-routines-for-compact-unwind-to-encode) has some good answers on _why_ this is happening, but the long story short is that, on 32-bit iOS, there's a limitation on the amount of different exception code paths the linker can handle. Your hunch is likely correct, in that it's the combination of Realm and your internal C++ library that's putting things over the limit. Unfortunately, there's not really anything we can do about this -- its an underlying platform limitation.
",segiddins,ndonald2
2012,2015-05-28 20:18:17,"@tgoyne Nope, same issue with that library file. It's all Xcode's fault I'm afraid.
",ndonald2,tgoyne
2008,2015-05-26 19:21:32,"@segiddins I'll handle resolving the conflicts that arise once that's merged in.
",bdash,segiddins
2003,2015-05-26 18:17:30,"Hi @flipchen, could you try with the latest version of Realm (0.92.4)? We've fixed some issues with `Results.count` which may be causing this.

Also, please make sure that you're only linking your `ManagedUser` class to your application target, and not to your test target.

Finally, if this issue persists even after updating Realm and making sure you're only linking your model to your application target, I'd encourage you to write a failing unit test in [`ResultsTests.swift`](https://github.com/realm/realm-cocoa/blob/master/RealmSwift/Tests/ResultsTests.swift).
",jpsim,flipchen
2003,2015-05-26 20:48:59,"Hey @jpsim, thanks for the quick reply! I updated to 0.92.4 which didn't change anything.

I'm not sure how to build the project without linking all the classes, that are used in the tests to the test target. I read that there are ways to pass all the classes on to the test target, but that doesn't work in my project and doesn't seem to work in a newly created project, where I basically only have one class to test.
Can you enlighten me as to why this is necessary or how I can achieve not having to link application classes against my test target?

One thing that came to mind, that might be of relevance: I'm using Quick/Nimble as testing framework which encapsulates test descriptions in closures. I think it's not executing them on a background thread, but it certainly seems to queue the test execution on the main thread. Could it be, that this leads to race conditions of some sort?
",flipchen,jpsim
2003,2015-05-26 21:58:32,"@flipchen it should be sufficient to just `import AppName` in your test files and declare your classes as `public class`.
",segiddins,flipchen
2003,2015-06-01 20:40:40,"@joamaki the issue there is that UIKit doesn't necessary dispatch events synchronously, so the table view itself can get out of sync with the underlying datasource momentarily (which is almost certainly what's happening in the example you shared). It's not a realm-specific issue, but the safest thing to do in scenarios where you're relying on data from a UI-driven action is verify that that data is still valid when it's handed over to you -- in this case, that would mean verifying that the index selected is still in bounds before attempting to subscript the results.
",segiddins,joamaki
2003,2015-06-02 08:08:40,"@segiddins thanks, that's what I thought as well. Verifying the index works. 
",joamaki,segiddins
2002,2015-05-26 17:22:00,"Thanks for reporting, @akolov. We removed the tag for 0.92.4 because our release didn't complete successfully. We'll re-add it once 0.92.4 is officially released, which shouldn't be long now.
",jpsim,akolov
2001,2015-05-27 18:20:23,"Looks good to me too, thanks @palewar!
",jpsim,palewar
1999,2015-10-20 22:25:49,"@jpsim Okay I figured it out... ObjectMapper will set the property to itself if the map is nil which would end up wiping the list empty. So instead I made an extension:



And then I can just use:


",AndrewBarba,jpsim
1997,2015-05-26 00:00:54,"Hi @MattKiazyk, that exception is thrown because the search index for your `latitude` property couldn't be properly created. It would be very useful for us to have access to your database file so we could determine why that's the case.

In the meantime, you could try disabling indexing on that property to see if the problem persists.

There appears to be another unrelated issue though: your app has an `RLMRealm` instance which isn't kept alive long enough for a write transaction to complete, which causes that transaction to be rolled back (discarded). If you set a breakpoint on `-[RLMRealm dealloc]`, you should be able to see where that happens.
",jpsim,MattKiazyk
1997,2015-05-26 13:38:34,"Hi @jpsim 

Removing the indexes (latitude/longitude) loads the app correctly. Realm DB is at https://www.dropbox.com/s/govej1dugfdu402/realmCrash.zip?dl=0

I tried putting a break point on the dealloc, however it only hits it after the original crash. So perhaps that is a result of the first issue?

If you need anything else, let me know.

-Matt
",MattKiazyk,jpsim
1994,2017-02-16 01:05:16,+1 to @AnthonyMDev's question above,mmccroskey,AnthonyMDev
1994,2017-02-16 15:32:00,"Hi @AnthonyMDev, @mmccroskey. Would you be able to file a new issue as although the questions/issues are similar, they are different. Feel free to reference this issue though. Thanks. ",istx25,mmccroskey
1994,2017-02-16 15:32:00,"Hi @AnthonyMDev, @mmccroskey. Would you be able to file a new issue as although the questions/issues are similar, they are different. Feel free to reference this issue though. Thanks. ",istx25,AnthonyMDev
1994,2017-03-09 00:56:59,"@AnthonyMDev @mmccroskey you can't exactly. If you shared a concrete example of what you were trying to do, it'd be easier to help you, but those should be filed as new issues unless it's exactly what's being tracked in this one.",jpsim,mmccroskey
1994,2017-03-09 00:56:59,"@AnthonyMDev @mmccroskey you can't exactly. If you shared a concrete example of what you were trying to do, it'd be easier to help you, but those should be filed as new issues unless it's exactly what's being tracked in this one.",jpsim,AnthonyMDev
1993,2015-05-26 18:28:19,"@ArEnSc could you please send us a sample Xcode project that reproduces this ""halting"" so we can investigate further? I doubt that the update checker is at fault here, but it's not impossible.
",jpsim,ArEnSc
1992,2015-05-27 16:52:05,"@ArEnSc I've been running all of the cases in that app delegate, and I'm not seeing any exceptions getting thrown?
",segiddins,ArEnSc
1992,2015-05-27 17:34:23,"@ArEnSc making the following change seems to fix the crash for me:


",segiddins,ArEnSc
1992,2015-05-27 19:20:19,"@segiddins Let me know if you are not able to reproduce this, perhaps this only occurs on the simulator and not on the device.
",ArEnSc,segiddins
1991,2015-05-26 16:26:47,"I'm glad you worked it out, @ArEnSc!
",jpsim,ArEnSc
1987,2015-05-22 21:58:45,"@voidref this is something we plan on doing, you can track progress on it at https://github.com/realm/realm-cocoa/issues/1109!
",segiddins,voidref
1982,2015-05-22 15:39:50,"@fenomenar9 this should've been fixed in https://github.com/realm/realm-cocoa/pull/1896, which shipped in v0.92.3. Can you double check that you're using Realm 0.92.3? I can't find any instances of `containsString:` left in the code.
",segiddins,fenomenar9
1981,2015-05-23 00:19:46,"@jpsim: Good call! I updated all the links and added where I thought it would make sense to have both also links to the Swift version.
",mrackwitz,jpsim
1980,2015-05-22 15:41:48,"@kyawmyintthein Realm doesn't have any bulk-insert specific features, however enumerating through a list of items and calling `+[RLMObject createInRealm:withValue:]` for each object you wish to create should do the trick.
",segiddins,kyawmyintthein
1980,2015-05-22 15:43:33,"thanks @segiddins 
",kyawmyintthein,segiddins
1979,2015-05-22 16:39:02,"@github2016a try the following:



Notice that the entire `filter` method call is now a string.
",segiddins,github2016a
1978,2015-05-22 15:56:15,"@wgywgy are you asking for a way to do `distinct` queries? If so, we have an open issue that's tracking adding that feature at https://github.com/realm/realm-cocoa/issues/1103.
",segiddins,wgywgy
1978,2015-05-26 21:16:05,"Please reopen this issue if you have any further questions, @wgywgy 
",jpsim,wgywgy
1974,2015-05-22 15:48:26,"@tariq235 you can use [`-[RLMRealm cancelWriteTransaction]`](http://realm.io/docs/objc/latest/api/Classes/RLMRealm.html#//api/name/cancelWriteTransaction) to cancel your current write transaction.
",segiddins,tariq235
1974,2015-05-22 17:20:24,"@segiddins  Before applying cancelWriteTransaction I have to check whether inWriteTransaction is in progress. Correct ?

Because I just got exception i.e. Can't cancel a non-existing write transaction
",tariq235,segiddins
1973,2016-10-17 12:23:09,"@yoshyosh  
As you mentioned above, I was trying to use NSArray and initwith with array and then I got a new array objects `A` with retrieved realm array object `B`. But when I tried to use this `A` in my main thread (assume `B` was retrieved from a gcd background queue thread) it is still having the `REALM, accessing from differentness thread ..` something like that error. How should I fixed the according to what you said like `a primary key`, do you have any simple example by your hand?

Thanks,
",alexliubj,yoshyosh
1972,2015-05-21 13:56:56,"Thanks for the PR, @skywinder! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,skywinder
1972,2015-05-21 14:00:50,"@realm-ci Done, Mr. smart robot! :)
",skywinder,realm-ci
1971,2015-05-21 14:41:19,"@pietbrauer thanks for reporting this, but I'm 99% sure the issue is with us and not carthage -- see https://github.com/realm/realm-cocoa/issues/1907 (which we're working on addressing in https://github.com/realm/realm-cocoa/pull/1942).
",segiddins,pietbrauer
1971,2015-05-21 14:44:33,"@segiddins Thanks, I was late to the game as always. Will follow the other issues and the PR then. Thanks for the hint!
",pietbrauer,segiddins
1967,2015-05-21 21:21:23,"@tgoyne, it seems to me that the value of `RLMNotVersioned` is persisted the the Realm file. If it was not, then it would not have have caused a problem for us. As a temporary workaround, we compare changesets from the initial schema creating transactions, and can only proceed if they are strictly equal. Before @simonask's fix, they were not equal accoss a 32/64 bit barrier.

What did I miss?
",kspangsege,simonask
1967,2015-05-21 21:21:23,"@tgoyne, it seems to me that the value of `RLMNotVersioned` is persisted the the Realm file. If it was not, then it would not have have caused a problem for us. As a temporary workaround, we compare changesets from the initial schema creating transactions, and can only proceed if they are strictly equal. Before @simonask's fix, they were not equal accoss a 32/64 bit barrier.

What did I miss?
",kspangsege,tgoyne
1965,2015-05-22 16:41:52,"@cfeckardt a lot of Realm's internals are implemented in terms of functions not inside `RLMRealm`, so even overriding `RLMRealm` methods wouldn't guarantee that you'd be able to hook into Realm in the places you'd like. We're actually working on implementing fine-grained notifications at the moment, you can track that at https://github.com/realm/realm-cocoa/issues/601.
",segiddins,cfeckardt
1965,2015-05-26 18:29:51,"@cfeckardt I understand the desire to hook into Realm objects' life cycle events, but we believe the best way to do so will be when we expose fine-grained notifications that can be used a building blocks for things like this. Since `RLMRealm` (and many parts of `RLMObject`) are not built to be subclassed, you'd run into lots of _really_ weird behavior where your overridden methods would never be called when you expected them to be, since those methods are really just an interface to a lot of Realm's underlying functionality. We'd also run into issues with our caching of realm instances, since we could be returning an instance of the wrong class.

I hope this explains a bit why this isn't something we plan on supporting directly, but if there are specific use cases you're interested in, let us know and maybe we can thing of other ways of implementing them!
",segiddins,cfeckardt
1965,2015-05-26 19:38:00,"There are a few reasons why we're hesitant to make RLMRealm subclass-able and we should really share those with you.

One of them is that there are many parts of the codebase that assume that `RLMRealm` is just a single class, and not a subclass. [RLMRealm caching](https://github.com/realm/realm-cocoa/blob/v0.92.4/Realm/RLMRealmUtil.mm#L29-L58) to name just one example.

Also, to support subclassing RLMRealm, we'd need to write tests to make sure that in whatever arbitrary way users subclass and override functionality, the database file should never become corrupted, or other internal state should be resilient to such modifications. This is very difficult to do in a general sense.

Not to mention the additional support load of users trying to subclass RLMRealm and inevitably running into corner cases. We have our hands more than full already with even just supporting users who use Realm's public API, and we have to be quite careful about making any changes that would increase that support load and take time away from us fixing bugs and writing new features.

Finally, to echo what @segiddins has said here, we're very happy to work with you to improve Realm for everyone, including reviewing your work to add fine grain notifications and custom object validation (something that's useful to _all_ users of Realm). If that's not appropriate for these changes, then I'd encourage you to find ways other than subclassing, like composition, to achieve your goals.
",jpsim,segiddins
1965,2015-05-26 19:45:08,"@jpsim I understand your reluctance to make any changes. As of now, I'll remain on my branch and rebase it with every release until it breaks.

I would be happy to share my work with object validation and notifications for someone to have a look at, but it requires a little bit more work on my end first (as I make some assumptions about the objects and primary keys). Ideally I should split this into two separate pull requests too.

As soon as I have had the time to make my code a little bit more generic, I'll make a new issue and share it with the rest of the community. I will try to get around to doing it this week.
",cfeckardt,jpsim
1963,2015-05-20 03:57:20,"Awesome! That looks good to me! Thanks a lot @segiddins! Feel free to go ahead and merge it!
",TimOliver,segiddins
1956,2015-05-23 00:26:04,"I ran the performance tests from `master` compared to I'm getting relatively similar numbers to what @tgoyne posted above.

# Objective-C

| Test Name | Threadsafe detaching | Optimized threadsafe detaching | Percent Change |
| --- | --- | --- | --- |
| CommitWriteTransaction | 0.213 | 0.215 | 0.94% |
| CommitWriteTransactionWithCrossThreadNotification | 1.115 | 1.134 | 1.70% |
| CommitWriteTransactionWithLocalNotification | 1.053 | 1.070 | 1.61% |
| CountWhereQuery | 0.059 | 0.059 | 0.00% |
| CountWhereTableView | 0.061 | 0.061 | 0.00% |
| CrossThreadSyncLatency | 1.190 | 1.195 | 0.42% |
| DeleteAll | 0.021 | 0.022 | 4.76% |
| EnumerateAndAccessAll | 0.017 | 0.016 | -5.88% |
| EnumerateAndAccessAllSlow | 0.026 | 0.025 | -3.85% |
| EnumerateAndAccessArrayProperty | 0.022 | 0.018 | -18.18% |
| EnumerateAndAccessArrayPropertySlow | 0.027 | 0.031 | 14.81% |
| EnumerateAndAccessQuery | 0.011 | 0.009 | -18.18% |
| EnumerateAndMutateAll | 0.028 | 0.027 | -3.57% |
| EnumerateAndMutateQuery | 0.016 | 0.019 | 18.75% |
| IndexedStringLookup | 0.054 | 0.053 | -1.85% |
| InsertMultiple | 0.054 | 0.052 | -3.70% |
| InsertMultipleLiteral | 0.102 | 0.086 | -15.69% |
| InsertSingleLiteral | 0.444 | 0.432 | -2.70% |
| LargeINQuery | 0.023 | 0.021 | -8.70% |
| ManualDeletion | 0.269 | 0.278 | 3.35% |
| QueryConstruction | 0.059 | 0.038 | -35.59% |
| QueryDeletion | 0.039 | 0.036 | -7.69% |
| RealmCreationCached | 0.177 | 0.178 | 0.56% |
| RealmCreationUncached | 1.478 | 1.431 | -3.18% |
| SortingAllObjects | 0.004 | 0.005 | 25.00% |
| UnIndexedStringLookup | 0.054 | 0.050 | -7.41% |

# Swift

| Test Name | Threadsafe detaching | Optimized threadsafe detaching | Percent Change |
| --- | --- | --- | --- |
| CommitWriteTransaction | 0.215 | 0.210 | -2.33% |
| CommitWriteTransactionWithCrossThreadNotification | 0.223 | 0.225 | 0.90% |
| CommitWriteTransactionWithLocalNotification | 0.216 | 0.215 | -0.46% |
| CountWhereQuery | 0.061 | 0.060 | -1.64% |
| CountWhereTableView | 0.030 | 0.029 | -3.33% |
| CrossThreadSyncLatency | 0.236 | 0.232 | -1.69% |
| DeleteAll | 0.015 | 0.015 | 0.00% |
| EnumerateAndAccessAll | 0.036 | 0.033 | -8.33% |
| EnumerateAndAccessAllSlow | 0.052 | 0.049 | -5.77% |
| EnumerateAndAccessArrayProperty | 0.047 | 0.034 | -27.66% |
| EnumerateAndAccessArrayPropertySlow | 0.058 | 0.042 | -27.59% |
| EnumerateAndAccessQuery | 0.032 | 0.022 | -31.25% |
| EnumerateAndMutateAll | 0.082 | 0.069 | -15.85% |
| EnumerateAndMutateQuery | 0.033 | 0.030 | -9.09% |
| IndexedStringLookup | 0.065 | 0.062 | -4.62% |
| InsertMultiple | 0.103 | 0.092 | -10.68% |
| InsertMultipleLiteral | 0.131 | 0.136 | 3.82% |
| InsertSingleLiteral | 0.298 | 0.309 | 3.69% |
| LargeINQuery | 0.023 | 0.022 | -4.35% |
| ManualDeletion | 0.640 | 0.623 | -2.66% |
| QueryConstruction | 0.062 | 0.052 | -16.13% |
| QueryDeletion | 0.033 | 0.035 | 6.06% |
| RealmCreationCached | 0.170 | 0.163 | -4.12% |
| RealmCreationUncached | 1.394 | 1.368 | -1.87% |
| SortingAllObjects | 0.004 | 0.004 | 0.00% |
| UnIndexedStringLookup | 0.073 | 0.065 | -10.96% |
",jpsim,tgoyne
1954,2015-05-22 16:33:16,"@amycheong19 can you please try removing the Realm framework from your project, and re-integrating by following the instructions at http://realm.io/docs/objc/latest/#installation? Thanks!
",segiddins,amycheong19
1954,2015-06-23 21:12:01,"@amycheong19 I'm going to close this issue for now, but feel free to re-open if you're still running into trouble!
",segiddins,amycheong19
1953,2015-05-17 15:47:11,"@nmtitov store your objects primary key, then while inside the AFNetworking call, re-fetch the object with `[RLMObject objectForPrimaryKey:]`. There _is_ a bug that will give you grief if your HTTP request fails, however. AFNetworking is releasing objects on its own thread, and Realm throws an exception
",RyanCopley,nmtitov
1953,2015-05-17 15:53:40,"@RyanCopley you mean, whatever I do, if AFNetworking receives error, dealloc would crash?
",nmtitov,RyanCopley
1953,2015-05-17 15:57:36,"@RyanCopley I tried to do it this way, but still get crashes. This should be same as `primaryKey`, right?:



And it's important for me to receive server errors. I could rewrite server API to return success with `error` description or switch to another networking library. 
",nmtitov,RyanCopley
1952,2015-05-22 18:43:55,"Thanks for answering, @angrybear11. That's most certainly the appropriate solution, as Swift is likely confused between `Realm` the module and `RealmSwift.Realm` the type.
",jpsim,angrybear11
1951,2015-05-17 09:15:39,"@bdash 
Thank you very much for your advices.
I fixed the [code](https://github.com/RyomaKawajiri/RealmMultiThreadTest/tree/d2282c67732b633522e7c52a00e2d8871adbbc45) and it works.
",rkawajiri,bdash
1949,2015-05-22 16:37:34,"@pietbrauer can you check if this is now fixed?
",segiddins,pietbrauer
1949,2015-05-26 06:26:05,"Hey @segiddins ~~I think it is a communication issue right now.~~
~~This problem only happens if you specify a version that does not exist, e.g. `0.96.0` then carthage tries to install `v0.0.24b`.~~

~~I will open an issue on their side as this is confusing and they should fail in another way.~~
",pietbrauer,segiddins
1949,2015-05-26 06:34:48,"@segiddins I tried with SSKeychain and Carthage fails gracefully with an error message:


",pietbrauer,segiddins
1949,2015-05-26 17:59:34,"@pietbrauer did you open an issue with Carthage? This seems to be strictly on that side since those tags are parsed before even pulling down Realm. So somehow, Carthage resolves `~> 0.96.0` to `v0.0.24b`.
",jpsim,pietbrauer
1949,2015-05-26 18:02:29,"@jpsim That was also my hypothesis but I couldn't reproduce it with SSKeychain so I stopped filing an issue.
",pietbrauer,jpsim
1949,2015-05-26 19:44:57,"@jpsim The SemanticVersion stuff seems to be fine, it is somehow deep in the resolver and I was not able to reproduce in a unit test. I opened https://github.com/Carthage/Carthage/issues/494 instead.
",pietbrauer,jpsim
1948,2015-05-15 20:54:33,"@tgoyne any thoughts on how this will interact with `RLMAddObjectToRealm` clearing out those ivars?
",segiddins,tgoyne
1948,2015-05-19 14:46:13,"You are missing the point of my last comment @segiddins 

To restate - there are flaws and major inconveniences when using kvo as evidenced by the need for more reliable/easy to use apis built on top. If we can just provide a better set of apis which solve the common issues when using kvo then I think that would be a s sufficient if not a better approach.

In fact, I don't think it's necessary to support kvo for multilevel keypaths at all, and would rather see us only support observing of persisted properties on RLMObjects. This would obviate the need to hold onto accessors internally for multi-level keypaths and I imagine would simplify other aspects of the implementation.

In general I would rather see progress towards supporting changeset notifications which is the overwhelming top requested features rather than perfecting multilevel keypath kvo which no users if any have asked for afaik.
",alazier,segiddins
1947,2015-05-15 18:18:31,"@christianlanz I'm guessing that `self` here has some reference to an `Object` that was obtained on another thread. This is a duplicate of https://github.com/realm/realm-cocoa/issues/1893, and we intend to make it safe to deallocate an `Object` on any thread in an upcoming release of Realm.
",segiddins,christianlanz
1945,2015-05-15 18:23:43,"@sebasx we'd love to look into this, would it be possible to share an example project that reproduces the issue? Thanks!
",segiddins,sebasx
1945,2015-05-22 18:21:37,"@sebasx following up on our request for a reproducible case. Without that, I'm afraid we don't have much to go on.
",jpsim,sebasx
1945,2015-06-23 21:10:50,"@sebasx I'm going to close this issue for now, but feel free to reopen it if you come up with a reproducible case!
",segiddins,sebasx
1942,2015-05-21 18:32:43,"@segiddins @tgoyne I can confirm, I also build via `build.sh build` and it went through the app store submission.
",pietbrauer,tgoyne
1942,2015-05-21 18:32:43,"@segiddins @tgoyne I can confirm, I also build via `build.sh build` and it went through the app store submission.
",pietbrauer,segiddins
1942,2015-05-26 20:21:22,"The CI failure here is 

> 2015-05-26 13:15:04.703 xcodebuild[34272:468137] [MT] iPhoneSimulator: SimVerifier returned: Error Domain=NSPOSIXErrorDomain Code=53 ""Simulator verification failed."" UserInfo=0x7fcf8142ff60 {NSLocalizedFailureReason=A connection to the simulator verification service could not be established., NSLocalizedRecoverySuggestion=Ensure that Xcode.app is installed on a volume with ownership enabled., NSLocalizedDescription=Simulator verification failed.}

@tgoyne @bdash please give this a quick look over?
",segiddins,tgoyne
1941,2015-05-14 17:02:28,"@ArEnSc It's not clear hear what you're asking about. Feel free to elaborate, and reopen the issue. Thanks!
",segiddins,ArEnSc
1941,2015-05-14 17:06:11,"@ArEnSc you actually save the entire `RLMRealm`, and not individual objects, nor individual segments of your object graph, so all of the objects you've modified will have their modifications saved.
",segiddins,ArEnSc
1941,2015-05-15 18:25:29,"@ArEnSc as http://realm.io/docs/objc/latest/#models says, `+[RLMObject primaryKey]` just returns the _name_ of the primary key proper -- you set the actual property as you would any other object.
",segiddins,ArEnSc
1940,2015-05-15 18:29:00,"@manzoorShaikh, can you try running the following commands to force CocoaPods to re-download Realm?


",segiddins,manzoorShaikh
1940,2015-05-19 14:51:32,"+1 same for me @segiddins 
",XBeg9,segiddins
1940,2015-05-27 16:12:50,"@michaelloistl that's surprising, since no changes were made to the podspec between `0.92.3` and `0.92.4`. Could you try running `COCOAPODS_SKIP_CACHE=1 pod install`?
",jpsim,michaelloistl
1940,2015-05-30 09:17:26,"@jpsim same issue when running `COCOAPODS_SKIP_CACHE=1 pod install`.
Have also installed CocoaPods 0.37.2 which doesn't make any difference.
Going back to 0.92.3 still fixes the issue for me. `pod 'Realm', '0.92.3'` `pod install`
",michaelloistl,jpsim
1935,2015-05-26 01:39:07,"@segiddins could you review this again please?
",jpsim,segiddins
1929,2015-05-13 08:12:39,"Thanks for the PR, @ShingoFukuyama! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,ShingoFukuyama
1929,2015-05-15 19:34:22,"CLA has been signed. Thanks so much for the contribution, @ShingoFukuyama!
",segiddins,ShingoFukuyama
1928,2015-05-22 18:30:53,"I've updated this PR. /cc @tgoyne @segiddins 

We can't make those other initializers `final` (and they certainly shouldn't be `required`):


",jpsim,tgoyne
1928,2015-05-22 18:30:53,"I've updated this PR. /cc @tgoyne @segiddins 

We can't make those other initializers `final` (and they certainly shouldn't be `required`):


",jpsim,segiddins
1925,2015-05-12 21:43:10,"Thanks @leegoodrich -- we've seen a couple of reports of this earlier, and it appears to be a swift bug. We recommend using Realm Objective-C if you will need to use Realm from both Swift and Objective-C in the same project.
",segiddins,leegoodrich
1925,2015-05-12 22:06:26,"Ah, @jpsim, you updated right when I was finishing my comment! Yeah, so it sounds like that works as a work-around. Well, I figure you guys will figure out a solution here (or bug Apple on Radar enough to get them to fix it in the next Swift update, let me know if you need a dupe). I might go ahead with this for now.
",leegoodrich,jpsim
1925,2015-05-12 23:17:32,"I'm closing this issue since it's out of our hands, but I've opened #1926 to make sure we document this as a limitation and provide work-arounds. Thanks for reporting @leegoodrich.
",jpsim,leegoodrich
1925,2015-08-15 17:28:57,"@jpsim Can implementing a getter function for private List objects instead of creating two variables as mentioned by @leegoodrich work good?.
",shahankit,jpsim
1925,2015-08-15 17:28:57,"@jpsim Can implementing a getter function for private List objects instead of creating two variables as mentioned by @leegoodrich work good?.
",shahankit,leegoodrich
1925,2015-08-15 18:25:03,"@shahankit yup!

By the way, I believe this has been fixed in the Xcode 7 betas.
",segiddins,shahankit
1921,2015-05-12 19:53:02,"Hi @smothers we don’t support React Native at the moment. If you’re interested in helping make that happen, we are [hiring](http://realm.io/jobs/)  :)
",timanglade,smothers
1921,2015-05-12 22:19:24,"Thanks @timanglade, I'll certainly publish an extension if I end up going this route ;) I'm still looking into options at the moment.

The simplicity of the realm API just seems like a perfect fit with the simplicity of react native. I can't imagine many react devs wanting to use CoreData. And at the moment that's not even an option, so a realm extension could bypass that problem altogether and pick up a ton of traction in the react community.

I know it's early to think about supporting react native, but bridging just the realm write and query apis would get most devs 80% of what they need. 

The biggest question would probably be how to handle models and migrations. There seems to be a lot of syntactic sugar surrounding those and I haven't found much documentation about how they work behind the scenes and could be exposed outside of xcode. Maybe that's the deal breaker.

Have you thought about it?
",smothers,timanglade
1921,2015-05-13 21:14:24,"Awesome @smothers and sorry for the vague first response, we intentionally try to keep expectations low because we know these are very exciting additions, but unfortunately/fortunately for you, we prioritize  support & bugfixes above all else, so it always takes longer than people expect for us to release those exciting brand new things.
",timanglade,smothers
1920,2015-05-12 21:11:55,"@jpsim do I need to be worried about that aborted test?
",segiddins,jpsim
1918,2015-05-22 16:31:17,"@e7hz3r0 can you please share a project with us that reproduces the issue you were seeing?
",segiddins,e7hz3r0
1918,2015-05-26 20:44:43,"Thanks for posting those steps, @staticdreams. I can't necessarily confirm that they're appropriate, but then again I haven't been able to reproduce this issue myself, so it's worth a shot.

I'll be closing this issue for the time being, but will reopen if we see more reports of `Umbrella header Realm.h not found from module.modulemap`.
",jpsim,staticdreams
1918,2015-07-13 22:19:39,"I found the issue -  it was the Pods/*\* in the User Header Search Paths. I added this to fix an issue I had in the past with the multitarget setup, but it seems to be gone now. I removed it and everything works.

I also cleaned up the pods installation directories as @segiddins suggested in the [mailing list](https://groups.google.com/forum/#!topic/realm-cocoa/qgsQc7CpCMA), which probably is the reason that it works now without Pods/**. 
",i-schuetz,segiddins
1918,2016-01-06 15:43:27,"@i-schuetz I faced the same issue just now. Pods/*\* just worked for me like a charm! Thanks!
",karzler,i-schuetz
1918,2016-03-15 12:44:18,"@frgmt: Which version of the toolchain and CocoaPods do you use?
",mrackwitz,frgmt
1918,2016-03-15 13:06:23,"@jplazcano87: Thanks for reporting that here. Note that you can always use `pod --version` to validate which version of CocoaPods will be executed, if you have multiple versions installed at different paths, so it depends on your environment. You can select one specific by running e.g. `pod _0.39.0_ install`.
",mrackwitz,jplazcano87
1918,2016-04-19 00:53:08,"@rdlopes, if you're seeing problems integrating Realm using CocoaPods, please file a new issue with information about which version of Realm you're attempting to use and with which version of CocoaPods you're seeing the problem with. To the best of our knowledge both Realm and RealmSwift work correctly with CocoaPods v0.39 and the 1.0.0 betas (from beta 4 onwards). If there are problems we'd like to hear about them and address them.
",bdash,rdlopes
1918,2016-05-26 16:42:45,"@bdash I don't have problems with Realm cause I stopped using it, felt too unstable.

But you do have a problem, and I was providing you with the solution.

Simple.

PS: first time I get a ""file a bug"" reply when I'm providing help.
",rdlopes,bdash
1918,2016-05-26 18:30:47,"@rdlopes we appreciate the time you've taken to share the issues you've faced and the workarounds that worked for you. The reality is that we get a large number of reports that omit crucial details like the versions of Realm and other relevant tools like CocoaPods and in these cases we encourage users to file more detailed bug reports so we can better help you.

@fpillet I think you may have been bit by CocoaPods/CocoaPods#5313 which, despite our best efforts to support CocoaPods 1.0 in its RC phase, snuck in before the official release 😬 . @mrackwitz has already submitted a fix to CocoaPods (CocoaPods/CocoaPods#5352) which should be included in CocoaPods 1.0.1. Until then, we recommend OS X builders to use CocoaPods 0.39.0. I apologize for the inconvenience.
",jpsim,mrackwitz
1918,2016-05-26 18:30:47,"@rdlopes we appreciate the time you've taken to share the issues you've faced and the workarounds that worked for you. The reality is that we get a large number of reports that omit crucial details like the versions of Realm and other relevant tools like CocoaPods and in these cases we encourage users to file more detailed bug reports so we can better help you.

@fpillet I think you may have been bit by CocoaPods/CocoaPods#5313 which, despite our best efforts to support CocoaPods 1.0 in its RC phase, snuck in before the official release 😬 . @mrackwitz has already submitted a fix to CocoaPods (CocoaPods/CocoaPods#5352) which should be included in CocoaPods 1.0.1. Until then, we recommend OS X builders to use CocoaPods 0.39.0. I apologize for the inconvenience.
",jpsim,fpillet
1918,2016-05-26 18:30:47,"@rdlopes we appreciate the time you've taken to share the issues you've faced and the workarounds that worked for you. The reality is that we get a large number of reports that omit crucial details like the versions of Realm and other relevant tools like CocoaPods and in these cases we encourage users to file more detailed bug reports so we can better help you.

@fpillet I think you may have been bit by CocoaPods/CocoaPods#5313 which, despite our best efforts to support CocoaPods 1.0 in its RC phase, snuck in before the official release 😬 . @mrackwitz has already submitted a fix to CocoaPods (CocoaPods/CocoaPods#5352) which should be included in CocoaPods 1.0.1. Until then, we recommend OS X builders to use CocoaPods 0.39.0. I apologize for the inconvenience.
",jpsim,rdlopes
1918,2016-05-26 19:20:18,"@jpsim thanks for the additional info. Yes it looks like that's what happened! Not complaining though, I assumed that this was an issue with CP rather than with Realm itself.
",fpillet,jpsim
1918,2016-05-26 19:59:14,"@jpsim sorry I'm stranger to bullshit especially when I get a ""I don't know any problem with Realm"" while we're discussing a problem with Realm...

Again, I'm not sharing my ""problems"", I'm providing the users with the workaround, while you're still figuring out why you don't have your headers in the public section.

The rest is white noise, cause that's not my problem if you're struggling with issues management.

So stop the ""thanks for sharing but bla bla bla and eventually f*ck off"" line and don't assert you don't have any problems at all when we're discussing a problem.

That would be a perfect start and would avoid flaming by posters when they get replied with handful of bullshit.
",rdlopes,jpsim
1917,2015-05-21 00:52:11,"> so you'll need to manually set a user property on your object

What do you mean by that @segiddins?

Have another _stored_ property `user` on each `Device`, in addition to the `devices` property on `User`?

Is there a more elegant way to achieve this for one-to-one relationships?
Is there any reason to not simply do:


",ataibarkai,segiddins
1917,2015-05-22 16:38:05,"@ataibarkai either approach should work!
",segiddins,ataibarkai
1917,2015-05-22 22:24:02,"I'd also recommend @ataibarkai's approach if you only expect to have a single object linking from that property.
",jpsim,ataibarkai
1917,2015-05-22 22:31:02,"Oh, and thanks for reporting that the docs were outdated, @malcommac, they're now up-to-date: http://realm.io/docs/swift/latest/#inverse-relationships
",jpsim,malcommac
1916,2015-05-13 06:08:07,"Thanks for the great explanation @kishikawakatsumi and thanks @jpsim for making the PR!

In the meantime, this is the workaround that I went with:

If I define my own initializer in an extension and call that it works. So adding this code, and using that initializer in subsequent generic template calls worked:


",erkie,kishikawakatsumi
1916,2015-05-15 16:24:38,"@michaelloistl it's possible that @jpsim's pull request (https://github.com/realm/realm-cocoa/issues/1928) might fix your case as well -- feel free to try that branch out, otherwise we'll get around to adding more tests to that branch soon.
",segiddins,michaelloistl
1916,2015-05-22 18:48:11,"@michaelloistl we've merged the fix to master. This is the unit test we added to make sure it works:



Are you saying that's failing for you? Or is there some other scenario that is still not covered by the fix?
",jpsim,michaelloistl
1916,2015-05-24 04:38:43,"@jpsim if you try the following, the test fails:



The created object will be of type `Object` and not `SwiftStringObject` or `SwiftBoolObject`
",michaelloistl,jpsim
1916,2015-05-25 16:16:59,"I'm afraid that's Swift limitation at the moment, @michaelloistl, not something Realm-specific. Take a look at this self-contained Swift code (no Realm dependency in there, you can run this in a Playground):


",jpsim,michaelloistl
1916,2015-05-26 03:53:19,"Thank you @jpsim!
That means that I can't use RealmSwift until Apple fixes that Type issue. That sucks!
All way back to the obj-c version of Realm...
",michaelloistl,jpsim
1916,2015-06-05 10:45:26,"I have been having the same problem, but I found simple temporarily solution. If you want to use the generic function for `NSObject` subclasses only (`RealmSwift.Object` is `NSObject` subclass) you can just create the object in ObjC.

Example:
Objective-C function bridged to Swift:



Updated example from @jpsim 


",AlDrago,jpsim
1913,2015-05-11 20:58:30,"@jrpetersjr, you can call `[rlmArray addObjects:results]` to add the results to an `RLMArray`, or use the following snippet to add the objects in the results to an `NSArray`:


",segiddins,jrpetersjr
1910,2015-05-26 22:39:39,"Did you end up generalizing a ""copy object with new primary key"" functionality, @marcvanolmen? Feel free to reopen this issue if you have any further questions.
",jpsim,marcvanolmen
1907,2015-05-11 14:59:34,"@xiles, with what version of RealmSwift was this happening for you? What are your iOS/OS X deployment targets?
",segiddins,xiles
1907,2015-05-11 23:24:01,"@xiles @michaelloistl one more question: how are you including RealmSwift in your project? Are you using the pre-built binary in the release zip, Carthage, CocoaPods, etc.?
",segiddins,michaelloistl
1907,2015-05-11 23:24:01,"@xiles @michaelloistl one more question: how are you including RealmSwift in your project? Are you using the pre-built binary in the release zip, Carthage, CocoaPods, etc.?
",segiddins,xiles
1907,2015-10-26 05:13:06,"Thanks @bendodson , your two suggestions worked for me. To reiterate (in case someone needs help understanding the steps), in Build Phases, you can drag ""Run Script"" beneath ""Embed Frameworks"". Then in the Run Script, change RealmSwift.framework (as originally instructed by the Realm installation instructions) to Realm.framework.
",fpisidoro,bendodson
1907,2017-03-07 19:59:51,Amazing @bendodson. Thank you for that easy fix.,abeaclark,bendodson
1906,2015-05-11 14:57:51,"@AlDrago this should have been fixed by https://github.com/realm/realm-cocoa/pull/1882, which is included in RealmSwift v0.92.2. Could you try updating and see if that fixes the issue? Thanks!
",segiddins,AlDrago
1904,2015-05-11 14:56:08,"@duemunk this is a known limitation, being tracked by https://github.com/realm/realm-cocoa/issues/1580. In short, we can't make `Results` nor `List` subscriptable with a range until we can use that same type to represent the slice (i.e. we can't have a slice of `Result` or `List` return an array)
",segiddins,duemunk
1902,2015-05-11 16:41:36,"@duemunk I'm pulling together a pull request to make `average` return an optional.
",segiddins,duemunk
1899,2015-05-10 22:03:20,"Hi @acoleman-apc, thanks for reporting this issue! The problem was that the installation instructions didn't specify to use quotes around the script path, so it should actually be this:



We've updated the installation instructions on our website to reflect this.
",jpsim,acoleman-apc
1898,2015-05-11 20:42:23,"@bdash Agreed. Then I edited iPhone 4s (32bit) simulator tested in both iOS 7 and 8. To be exact, it is should be testing the combination of 64bit machine and iOS 7. But it can be omitted because to isolate the problem it is enough if there is the combination of the three above.
",kishikawakatsumi,bdash
1898,2015-05-12 03:31:30,"@kishikawakatsumi we'll have to update all CI workers to have iOS 7 simulators installed before we can merge this. In an effort to minimize the time it takes to run CI on PRs, could you extract into `ios-static` and `ios-static-ios7` and test both 32 and 64 bit simulators?
",jpsim,kishikawakatsumi
1897,2015-05-11 22:08:49,"@qingpengchen2011 thanks so much for reporting this issue. Since I can't really think of what could be causing this, would it be possible for you to share a sample project that reproduces the issue, either here or privately at help@realm.io? Thanks!
",segiddins,qingpengchen2011
1897,2015-05-12 05:08:57,"@segiddins  Hello, I've sent an sample project to  help@realm.io. 
Thanks for help.
",qingpengchen2011,segiddins
1897,2015-05-13 19:35:00,"@segiddins  I've done what you suggest, and added the parent path to RealmSwift.framework to unit test’s “Framework Search Paths”. But there is linking error in test target. Saying: ld: framework not found Realm for architecture x86_64. I've done some searching, but I can not figure out. 
",qingpengchen2011,segiddins
1897,2015-05-14 03:55:10,"@segiddins  @realm-ci  Hello, I've figure it out. Just by following the steps described in the Realm home page doc, Maybe I did some misconfigure before.  Thanks for your great help.
",qingpengchen2011,segiddins
1893,2015-05-10 05:11:08,"@RyanCopley I sent you an email just now. Apologies from Realm again. Thanks for taking the time to file a bug + for providing a repro case. If this issue needs to be investigated any further @jpsim, @mrackwitz or @bdash can help.
",timanglade,RyanCopley
1893,2015-05-12 21:18:41,"Thank you @jpsim for looking into this, if I can be of any assistance please feel free to reach out. 
",RyanCopley,jpsim
1893,2015-05-13 04:47:24,"Thank you @jpsim and @tgoyne ! After our discussion about this I had another look, and it was pretty clear what actually caused our issue. The biggest problem for us was the missing stack trace, and since my understanding of the issue was better after the talk I knew where to focus my efforts.
",hermanolsson,jpsim
1893,2015-05-17 15:48:00,"@jpsim @tgoyne Any update on this issue? :) I may end up pulling all my hair out over this :p 
",RyanCopley,jpsim
1893,2015-05-18 02:58:20,"@RyanCopley ~~I believe dispatch_get_main_queue() is the non-deprecated version of that~~ I'll try that out.
",mamaral,RyanCopley
1893,2015-05-18 02:59:42,"@mamaral I believe I misread your code, but you can try that. `dispatch_get_main_queue()` is not an equivalent, however, but it may be in your case
",RyanCopley,mamaral
1893,2015-06-02 17:03:01,"We just ran across this bug and confirmed fix in v93.1. Thank you, @jpsim - Caylan
",semireg,jpsim
1887,2015-05-08 21:07:05,"This issue is a duplicate of https://github.com/realm/realm-cocoa/issues/1865. @shmidt, could you check if https://github.com/realm/realm-cocoa/pull/1866 fixes things for you?
",segiddins,shmidt
1887,2015-05-09 18:20:48,"@segiddins No, unfortunately v0.92.2 doesn't fix it. I installed it with Carthage and later manually, but result is till the same.
",shmidt,segiddins
1886,2015-06-02 19:36:05,"@yoshyosh testing what behavior in particular?
",segiddins,yoshyosh
1885,2015-07-03 20:33:09,"@marchyman we understand that's far from ideal, hence why adding support for debugging encrypted realms is a P1 (priority one) for us at the moment.
",segiddins,marchyman
1885,2015-10-02 07:41:41,"@zpapp I can assure you that supporting encryption as a feature is a top priority for us. And we always prioritise bug fixing and support above anything else - so there is no need to worry about the encryption feature stability, although I do follow your line of thought. 
Having this as a P2 does not mean that it's low priority, just that the ones in P1 are higher priority to get fixed before we tackle the current P2's. One of the factors we use when prioritising is if there are workarounds. Another factor is if it affects current users, and yet another the effort it requires to fix. 
Some of the other features we have had even more requests for, and which we are working hard to complete, are null support, async queries and fine grained notifications. What's not visible from this priority list is also that fixing the debug support for encryption actually requires a lot of work in the core database team, so this reflects that teams priorities more than the Cocoa teams.
But we hear you, and will do our best to get it resolved as quickly as we can with due consideration to other requests as well.
",bmunkholm,zpapp
1884,2015-05-08 18:15:56,"@jpchmura what exactly is forcing the generation of the `-Swift.h` header? This definitely seems like a Swift bug regardless, so I'd recommend filing a Radar for  at bugreport.apple.com
",segiddins,jpchmura
1884,2015-05-08 20:10:30,"@jpchmura thanks for filing that radar!
",segiddins,jpchmura
1881,2015-05-08 17:55:47,"@carlson I can't reproduce the issues you're seeing with the steps provided... Could you zip up your project directory so we can have a look? Thanks!
",segiddins,carlson
1881,2015-05-08 18:08:33,"Sure. Thanks!

On Fri, May 8, 2015 at 2:05 PM, Eric Carlson eric@connectedbits.com
wrote:

> Sure, let me know if you need anything else. Thanks!
> On Fri, May 8, 2015 at 1:55 PM, Samuel E. Giddins
> notifications@github.com wrote:
> 
> > ## @carlson I can't reproduce the issues you're seeing with the steps provided... Could you zip up your project directory so we can have a look? Thanks!
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/realm/realm-cocoa/issues/1881#issuecomment-100312016
",carlson,carlson
1881,2015-05-08 18:32:25,"@segiddins - worked for me too. Thanks!
",carlson,segiddins
1879,2015-05-11 22:15:47,"@malcommac I was able to resolve the issue with the sample project you provided by deleting the `Pods` dir and re-running `pod install` -- could you try that out and see if it resolves things?
",segiddins,malcommac
1879,2015-05-22 18:39:44,"@flipchen what can we do to help? Please make sure you're using CocoaPods 0.37.1 and that you're starting from a fresh CocoaPods cache (`rm -rf ~/Library/Caches/CocoaPods`) and clear your existing Pods (`rm -rf Pods`) before attempting to run `pod update`.
",jpsim,flipchen
1879,2015-05-25 18:28:42,"@jpsim I tried all that already and in the end simply rolled back to 0.92.2 to continue working on my app. I'll have another go when you guys release 0.92.4 or so. Maybe it all resolves by itself.
",flipchen,jpsim
1879,2015-10-07 18:04:10,"@aniketayachit please file a bug with CocoaPods, as it's a caching issue on their end.
",jpsim,aniketayachit
1877,2015-05-08 14:58:23,"@danielpovlsen, ok, that explains it. Thanks.
",kspangsege,danielpovlsen
1875,2015-05-08 14:26:17,"@plusmancn are you using CocoaPods 0.37.1?
",segiddins,plusmancn
1875,2015-05-08 20:44:39,"@shmidt I believe the carthage issue is being tracked at https://github.com/Carthage/Carthage/issues/444
",segiddins,shmidt
1875,2015-05-08 20:54:36,"@segiddins Good to know, thank you.
",shmidt,segiddins
1874,2015-05-11 05:56:37,"@segiddins Is there any way for you guys to create the files so that they do not have file protection set at all? This is causing a lot of issues for me now that I've enabled background updates. I have no way of knowing when Realm creates the files and therefore there are always scenarios that will crash when the app tries to access those files when the device is locked.

I would appreciate some help with this a lot!
",anlaital,segiddins
1873,2015-05-08 17:10:21,"Hi @github2016a, I assume you managed to work around the issue since this ticket is now closed. Can you share more details about what happened and how you fixed it?
",jpsim,github2016a
1873,2015-06-11 09:48:38,"@jpsim  
Hi,jpsim,just saw your comment.I solved this problem,by manually altered the -Swift.h file : I deleted the unnecessary classes generated by system,including Realm Object classes **with generic**.
the error Is happened because The -Swift.h used by objc do not support generic 。
so：


",github2016a,jpsim
1873,2015-08-22 00:35:21,"@billburgess if you need to access that property (only from Swift), you can write getter and setter functions for it:


",jpsim,billburgess
1869,2015-05-12 00:15:06,"Thanks @mrh-is! Nice work.
",jpsim,mrh-is
1867,2015-05-07 22:34:03,"@bdash if you rebase atop master, you should now be able to test exception messages if you so wish.
",segiddins,bdash
1865,2015-05-20 13:54:56,"@jimjeffers it should be resolved, the build script `strip-frameworks.sh` is no longer executable, so Xcode shouldn't complain. 
",andreamazz,jimjeffers
1865,2015-06-17 16:02:21,"@JhimliBora have you done step four of the installation instructions on https://realm.io/docs/swift/latest/, i.e. adding a run script build phase to call `bash ""${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/Realm.framework/strip-frameworks.sh""` ?
",segiddins,JhimliBora
1864,2015-05-08 09:29:15,"The Objective-C download does not seem to have these issues. As @mrackwitz suggested, could it be a signing issue with the nested Framework?

Unfortunately I cannot reproduce the original issue with the Simple example from the latest Objective-C release, so I will keep digging.
",danielpovlsen,mrackwitz
1864,2015-05-11 15:40:01,"@dbworku please share your Run Script Phase, I got the same problem
",thiagoricieri,dbworku
1864,2015-05-12 22:18:48,"@geoffreywoo 
![screen shot 2015-05-12 at 3 18 22 pm](https://cloud.githubusercontent.com/assets/775056/7599811/2b15b656-f8ba-11e4-8a6e-009804c78852.png)
",yoshyosh,geoffreywoo
1864,2015-05-13 12:50:05,"@dbworku how is that solution hacky? It's working well, thanks! :smile: 
",Pym,dbworku
1864,2015-05-18 19:57:16,"I think the fix provided by @dbworku and @jjoelson should be added to the Realm carthage documentation too. http://realm.io/docs/swift/latest
",pietbrauer,dbworku
1864,2015-05-18 19:57:16,"I think the fix provided by @dbworku and @jjoelson should be added to the Realm carthage documentation too. http://realm.io/docs/swift/latest
",pietbrauer,jjoelson
1864,2015-05-22 16:30:27,"@pietbrauer that's a separate issue that we're trying to address by changing our Carthage packaging entirely.
",segiddins,pietbrauer
1864,2015-08-11 01:13:44,"@vyscond the comments in this thread are outdated. We used to include `strip-frameworks.sh` in both frameworks, but since Realm Swift _requires_ Realm Objective-C as a dependency, and the script only needs to be run once, we now only include it in Realm Objective-C. The [Realm Swift installation instructions reflect this updated location](https://realm.io/docs/swift/latest/#installation-swift-12).
",jpsim,vyscond
1860,2015-05-07 18:01:21,"@tspecht how are you importing Realm in your class' header?
",segiddins,tspecht
1860,2015-05-26 22:30:38,"Hi @tspecht and @alexdd55, if you need to use Realm Objective-C from Swift in iOS 7 through CocoaPods, you can use the following in your Podfile (no `use_frameworks!`):



and your app's Objective-C bridging header:



Please reopen this issue if you're still having trouble even after following these steps.
",jpsim,alexdd55
1860,2015-05-26 22:30:38,"Hi @tspecht and @alexdd55, if you need to use Realm Objective-C from Swift in iOS 7 through CocoaPods, you can use the following in your Podfile (no `use_frameworks!`):



and your app's Objective-C bridging header:



Please reopen this issue if you're still having trouble even after following these steps.
",jpsim,tspecht
1860,2015-07-07 08:56:39,"The solution proposed by @jpsim doesn't work. The bridging header complains about `<Realm/Realm.h>` not found.
",ajimix,jpsim
1860,2015-07-07 18:58:56,"My last comment should certainly work. Are you sure your project's configuration isn't interfering with this setup? I'd be happy to look at your project's configuration if you can share it @ajimix.
",jpsim,ajimix
1860,2016-01-15 03:52:41,"@reduxdj please file a new issue [following our guidelines](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#filing-issues) and we'll be happy to help!
",jpsim,reduxdj
1859,2015-05-11 07:36:41,"@mtgomes : My solution is remove Realm in Podfile -> Pod install -> Add Realm in Podfile again -> Pod install. It's work for me.
",huy-le,mtgomes
1859,2015-08-22 00:44:36,"@jasperblues we serve our core builds from AWS S3, which I believe was experiencing issues around the time you posted this. Please check http://status.aws.amazon.com/ next time this happens.
",jpsim,jasperblues
1859,2015-08-22 00:46:44,"Hello @jpsim Thanks for the information. We ended up linking Realm as a framework. Perhaps we'll try going back to CocoaPods. 
",jasperblues,jpsim
1858,2015-05-07 17:32:27,"@vivekCZ I don't see how that's possible, given that opening a realm as both readonly and readwrite should be throwing an exception. Would it be possible for you to share a reproducible example of this happening?
",segiddins,vivekCZ
1858,2015-05-26 22:27:30,"@vivekCZ were you able to find out more about this issue? If it still happens with the latest version of Realm (currently 0.92.4), we'd really appreciate a sample Xcode project that would help us reproduce the issue. Thanks!
",jpsim,vivekCZ
1858,2015-06-23 20:56:53,"@vivekCZ I'm going to close this issue for now, but feel free to add a comment and reopen if you can reproduce it!
",segiddins,vivekCZ
1857,2015-05-07 01:32:46,"Thanks so much @segiddins for the explanation, that did it for me! :smiley: 
",marcoscurvello,segiddins
1854,2015-05-06 20:11:45,"We're looking into this issue, @marcvanolmen. Until this is resolved, you could simply remove that script phase as it's only required when submitting to the App Store.
",jpsim,marcvanolmen
1854,2015-05-06 21:27:23,"@marcvanolmen I can confirm that this happens with the strip frameworks script, we're looking into potential fixes.
",segiddins,marcvanolmen
1853,2015-05-06 20:48:38,"@tgoyne I revised the changes to address the issues you mentioned.
",bdash,tgoyne
1850,2015-05-06 17:30:24,"@sts2055 what version of RealmSwift are you using? How did you install RealmSwift?
",segiddins,sts2055
1850,2015-05-06 23:04:51,"Maybe this could be the case: 

@segiddins I think you don't see this issue because you are signing your iOS apps with the same signatures as the one that is embedded in the RealmSwift.framework. 
",marcvanolmen,segiddins
1850,2015-05-06 23:40:50,"@segiddins pushed a fix in #1855 and we'll be releasing 0.92.1 shortly. Thanks for your help in reporting these issues!
",jpsim,segiddins
1849,2015-05-20 03:55:46,"Anyone having issues with custom initializers and/or coming from issue https://github.com/realm/realm-cocoa/issues/1101, the @jpsim comment above - https://github.com/realm/realm-cocoa/issues/1849#issuecomment-99547742 - worked for me!
",sandalsoft,jpsim
1849,2015-05-26 15:13:20,"@jpsim thanks for the clarification regarding `var`s.

Regarding initialization - I should have been more specific, I meant support for a custom _designated_ init rather than for a _convenience_ init.
Is this still being worked on?

This is important because in Swift convenience initializers can't be called by subclasses' initializers.
This makes subclassing a stored Realm object and calling its super.init(...) infeasible (e.g. Vehicle: Object, Bicycle: Vehicle).

I don't know how the Realm implementation works, but it seems that the problem can be solved on Realm's end by marking all initializers besides the empty init() as convenience initializers.

If the underlying 'problematic' initializers are written in Obj-C, this may be of help:

> For consistency and simplicity, Objective-C factory methods get mapped as convenience initializers in Swift. This mapping allows them to be used with the same concise, clear syntax as initializers.

https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-XID_26
",ataibarkai,jpsim
1849,2015-05-26 16:26:12,"Thanks for the tips, @ataibarkai, we'll take those into consideration when looking for options to make overriding `Object.init()` possible.
",jpsim,ataibarkai
1849,2015-05-26 16:44:24,"Thanks for the quick reply @jpsim.
Any idea regarding the timeline for implementing this? Is it being actively worked on yet?

I've actually come up with a hack around this that you guys might also find useful in allowing designated initializes (including overriding `init()` ).

It compiles fine but I haven't been able to test it yet, since I need to have objects of type `RLMRealm`, `RLMObjectSchema`, and `RLMSchema`.

Any idea how to get this work with RealmSwift?

I've tried simply having `import Realm` / `import Realm.Private` but while this compiles fine, it crashes during runtime with `dyld: Library not loaded: @rpath/Realm.framework/Realm`.

I've also tried to directly add the compiled `Realm` framework onto the project the same way I added the `RealmSwift` framework (I'm using Carthage) but I got tons of errors due to ambiguity in which kind of a class to use (the `Realm` version or the `RealmSwift` version).

Any pointers would be much appreciated. 
",ataibarkai,jpsim
1849,2016-09-15 03:08:45,"@jpsim this is an old thread, but still relevant to me now.

Given the following file:



I get errors at line `super.init()` that `testProperty` is not properly initialized yet, which makes sense. Typically in this case I would just make `init(testProperty:)` a designated initializer, but because I'm required to implement an `init()` with no arguments if I want and custom initializer, I'm unsure how to properly initialize my stored properties with values from the caller of the init.

In this case something like a `func configure(testProperty:)` also doesn't work, as I get an error that `TestObject has no initializers` because no initializer is setting `testProperty`'s value.

Does this mean I'm not allowed to have stored properties without default values in an `Object` subclass? I don't want to make every stored property optional, should I simply set dummy values like `dynamic var testProperty: String = """"`? This feels kinda gross and un-swifty
",tsheaff,jpsim
1849,2016-09-15 19:35:42,"@jpsim have you guys made a pull-request with a proposal on swift-evolution?  That seems like the best way to get officially enrolled in apple's swift feature pipeline, although I don't know a ton about the internal process.

A [simple search for `reflection` on swift-evolution](https://github.com/apple/swift-evolution/search?utf8=%E2%9C%93&q=reflection) indicates that this is not on their current to-do list.
",tsheaff,jpsim
1849,2016-09-19 09:18:20,"@jpsim Reflection is listed as a possible Swift 4 Stage 2 effort, so I imagine it could be worthwhile to participate this upcoming Spring.
",JadenGeller,jpsim
1847,2015-05-06 17:25:24,"@kishikawakatsumi could you open an issue on realm-core with the same details you've posted here? It's the best way to make them aware of the situation. Plus, they _love_ seeing reproducible use cases.
",jpsim,kishikawakatsumi
1847,2015-05-06 17:51:54,"All right. @jpsim 
",kishikawakatsumi,jpsim
1844,2015-05-06 16:58:08,"Hi @andrelind, you closed this issue so I assume you've worked around this problem. We haven't seen this one before and would appreciate any insight you may have about how this happened and how you fixed it.
",jpsim,andrelind
1844,2015-05-06 17:02:36,"Alright @andrelind, @segiddins just helped me understand what happened here. It seems the same property was being declared twice in an `Object` model (perhaps in an extension or via subclassing?). In any case, the assertion message you saw should be improved to be more informative.
",jpsim,andrelind
1844,2015-05-08 14:44:58,"Updated to Realm Swift 0.92.1 and can't run my Project

Getting this

Assertion failed: (props.count == [NSSet setWithArray:[props valueForKey:@""name""]].count), function +[RLMObjectSchema schemaForObjectClass:], file /Users/realm/workspace/Package iOS Swift/tightdb_objc/Realm/RLMObjectSchema.mm, line 102.

It was working fine before ..

I checked and I haven't declared same property twice. Even if so, how can I find that ? 

@bdash  How can I pull commits made in #1867 to the framework ? (Am sorry to ask this, I cloned this Repo, but can't find the RealmSwift.framework which I can drag into my project)
",anbarasu0504,bdash
1844,2015-05-08 18:31:05,"@anbarasu0504 is it possible some of your models have two properties with the same name? That's what this assertion is preventing.

To answer your other question, you can build Realm Swift from source in a number of ways, the simplest of which is to use CocoaPods:


",jpsim,anbarasu0504
1844,2015-05-08 20:33:31,"@anbarasu0504 you might be using dynamic var arrayOfThings = List<Thing>. Try using let arrayOfThings = ...
",yoshyosh,anbarasu0504
1844,2015-05-09 02:47:09,"Changing 
dynamic var arrayOfThings = List<Thing>. to
dynamic let arrayOfThings = ...

worked :+1: 

@yoshyosh 
",anbarasu0504,yoshyosh
1843,2015-05-06 07:43:42,"Hi @wgywgy, I've just confirmed that `pod ""Realm""` works with v0.92.0 in Xcode 6.3.1 both with and without `use_frameworks!` and both in Objective-C and Swift.

However, it looks like in your case, there was a problem downloading the core binary. Could you try running `rm -rf Pods/Realm/core`, then `pod install` again to see if it works? If it still doesn't work, please share the command line CocoaPods output here so we can help troubleshoot.

Also, please share which version of Xcode you're using and whether this is an Objective-C or Swift project.
",jpsim,wgywgy
1843,2015-05-06 19:59:24,"@wgywgy out of curiosity, does this happen for you with CocoaPods v0.36.4?
",segiddins,wgywgy
1843,2015-05-07 22:29:33,"@wgywgy are you by change on a case-sensitive OS?
",segiddins,wgywgy
1843,2015-05-26 22:31:53,"@mattyohe please reopen this issue if you're still having problems installing Realm via CocoaPods.
",jpsim,mattyohe
1839,2015-05-05 16:33:01,"@docterd is it possible you're linking the Realm framework against both your application target and your unit test target? You should only need to link against your application target.
",segiddins,docterd
1839,2015-05-07 05:58:54,"@docterd take a look at our install instructions (http://realm.io/docs/objc/latest/#cocoapods-install) -- you should only need to depend upon `Realm/Headers` in your unit test target.
",segiddins,docterd
1838,2015-05-26 22:26:13,"@AmitBhavsarIphone could you try updating to the latest version of Realm (currently 0.92.4) to see if the issue persists? Thanks!
",jpsim,AmitBhavsarIphone
1837,2015-05-05 21:32:29,"@mightyleader is this a bug you can reliably reproduce? If so, a project that demonstrates it would be incredible helpful (you can send one privately to help@realm.io if it isn't something you can share publicly). Thanks!
",segiddins,mightyleader
1837,2015-05-05 21:46:22,"Hey Samuel,
I'd love to say we could. Our only visibility is the crash logs we are getting back from Hockey App.
What's strange is that we got 35 crashes with the same log output over the weekend, when the previous weekend we got zero. 
We _think_ it's possibly when the data is migrated across a few versions of Realm in one pass, and an object is deleted then it occurs but we've no hard data for that.

Rob

> On 5 May 2015, at 22:32, Samuel E. Giddins notifications@github.com wrote:
> 
> @mightyleader is this a bug you can reliably reproduce? If so, a project that demonstrates it would be incredible helpful (you can send one privately to help@realm.io if it isn't something you can share publicly). Thanks!
> 
> ―
> Reply to this email directly or view it on GitHub.
",mightyleader,mightyleader
1837,2015-05-06 17:04:44,"@mightyleader do you happen to use Crashlytics in this app? If so, we could send you a version of Realm which logs its exception and assertion messages to Crashlytics' logs, which would collect more information about how this is happening.
",jpsim,mightyleader
1837,2015-05-13 04:13:17,"Hi @mightyleader, HockeyApp should be logging the exception messages Realm throws without any special help. Have you made any headway in figuring out what's causing the increase in crashes in your app?
",jpsim,mightyleader
1837,2015-06-02 20:18:07,"@mightyleader unfortunately, our core team won't be able to investigate this crash coming from such an old version -- could you try updating to 0.93.1 and seeing if that fixes things? Thanks!
",segiddins,mightyleader
1837,2015-06-19 14:26:48,"@segiddins @jpsim we updated to v0.93.1 and are still getting the same crashes. 
It's the same line: realm::AdaptiveStringColumn::do_move_last_over(unsigned long, unsigned long) + 176

![screen shot 2015-06-19 at 15 19 10](https://cloud.githubusercontent.com/assets/7499580/8255353/52fd1362-1697-11e5-9d83-a466cd3a9377.png)
",ivanandriolloNOTHS,jpsim
1837,2015-06-19 14:26:48,"@segiddins @jpsim we updated to v0.93.1 and are still getting the same crashes. 
It's the same line: realm::AdaptiveStringColumn::do_move_last_over(unsigned long, unsigned long) + 176

![screen shot 2015-06-19 at 15 19 10](https://cloud.githubusercontent.com/assets/7499580/8255353/52fd1362-1697-11e5-9d83-a466cd3a9377.png)
",ivanandriolloNOTHS,segiddins
1837,2015-06-23 10:02:51,"@jpsim @segiddins @mrackwitz Hey, so we did the upgrade to 0.93.1 as Ivan mentioned and are still seeing a similar level of crashes. The last stable version for us is still 0.90.4. Is it not possible to know what changes happened in the core at this point that might have triggered this issue?
",mightyleader,jpsim
1837,2015-06-23 10:02:51,"@jpsim @segiddins @mrackwitz Hey, so we did the upgrade to 0.93.1 as Ivan mentioned and are still seeing a similar level of crashes. The last stable version for us is still 0.90.4. Is it not possible to know what changes happened in the core at this point that might have triggered this issue?
",mightyleader,segiddins
1837,2015-06-24 08:50:29,"@jpsim we are not using encrypted Realms.
",ivanandriolloNOTHS,jpsim
1837,2015-06-25 14:00:23,"@mightyleader it would be great if you could send that to us at help@realm.io, thanks!
",segiddins,mightyleader
1837,2015-09-01 01:06:55,"Closing since we believe this to be fixed in recent versions of Realm and we haven't heard back from @mightyleader in a while.
",jpsim,mightyleader
1836,2015-05-05 13:55:11,"The first image shown in the context of the dock.

@morqon Fair enough! The metal does look a little too bright in the scaled down version. If we choose to go with this one, I'll have another play with it.

![realmicondock](https://cloud.githubusercontent.com/assets/429119/7473961/25dd8374-f371-11e4-862e-584cafb3962b.jpg)
",TimOliver,morqon
1836,2015-05-05 16:20:15,"Fair enough. I'll see if I can straighten out the perspective a bit, and like @morqon recommended, make the metal a little less pronounced.

(Actually. Hilariously enough, I think the LOST logo was made with the same tool I was using here! They were both created by the same guy! XD)
",TimOliver,morqon
1836,2015-05-06 03:32:22,"@yoshyosh Cool! Yeah, after @timanglade said the first one seems to look a little 'floaty' with no proper grounding in the Dock. The Yosemite circle design seems a bit better to me.

Alright. I really quickly tried out a black version, as well as removed all of the effects from the 'R' to make it more consistent with our normal brand appearance.

![realmituneslogovariants](https://cloud.githubusercontent.com/assets/429119/7487105/4a612378-f3e3-11e4-96bb-a4d36ece5f62.jpg)

If you'd like to have a play with the coloring yourself, here's a Sketch version of the template I was using. :)
http://www.sketchappsources.com/free-source/600-yosemite-osx-icon-template.html
",TimOliver,yoshyosh
1836,2015-05-06 03:32:22,"@yoshyosh Cool! Yeah, after @timanglade said the first one seems to look a little 'floaty' with no proper grounding in the Dock. The Yosemite circle design seems a bit better to me.

Alright. I really quickly tried out a black version, as well as removed all of the effects from the 'R' to make it more consistent with our normal brand appearance.

![realmituneslogovariants](https://cloud.githubusercontent.com/assets/429119/7487105/4a612378-f3e3-11e4-96bb-a4d36ece5f62.jpg)

If you'd like to have a play with the coloring yourself, here's a Sketch version of the template I was using. :)
http://www.sketchappsources.com/free-source/600-yosemite-osx-icon-template.html
",TimOliver,timanglade
1836,2015-05-06 14:45:47,"I like the last pink circle one! pretty close to how we did the Slack icon
and the StackOverflow icon too… Might be worth agreeing on specific
gradient colors though.

On Tue, May 5, 2015 at 8:32 PM, Tim Oliver notifications@github.com wrote:

> @yoshyosh https://github.com/yoshyosh Cool! Yeah, after @timanglade
> https://github.com/timanglade said the first one seems to look a little
> 'floaty' with no proper grounding in the Dock. The Yosemite circle design
> seems a bit better to me.
> 
> Alright. I really quickly tried out a black version, as well as removed
> all of the effects from the 'R' to make it more consistent with our normal
> brand appearance.
> 
> [image: realmituneslogovariants]
> https://cloud.githubusercontent.com/assets/429119/7487105/4a612378-f3e3-11e4-96bb-a4d36ece5f62.jpg
> 
> If you'd like to have a play with the coloring yourself, here's a Sketch
> version of the template I was using. :)
> 
> http://www.sketchappsources.com/free-source/600-yosemite-osx-icon-template.html
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/1836#issuecomment-99309974.
",timanglade,yoshyosh
1836,2015-05-06 14:45:47,"I like the last pink circle one! pretty close to how we did the Slack icon
and the StackOverflow icon too… Might be worth agreeing on specific
gradient colors though.

On Tue, May 5, 2015 at 8:32 PM, Tim Oliver notifications@github.com wrote:

> @yoshyosh https://github.com/yoshyosh Cool! Yeah, after @timanglade
> https://github.com/timanglade said the first one seems to look a little
> 'floaty' with no proper grounding in the Dock. The Yosemite circle design
> seems a bit better to me.
> 
> Alright. I really quickly tried out a black version, as well as removed
> all of the effects from the 'R' to make it more consistent with our normal
> brand appearance.
> 
> [image: realmituneslogovariants]
> https://cloud.githubusercontent.com/assets/429119/7487105/4a612378-f3e3-11e4-96bb-a4d36ece5f62.jpg
> 
> If you'd like to have a play with the coloring yourself, here's a Sketch
> version of the template I was using. :)
> 
> http://www.sketchappsources.com/free-source/600-yosemite-osx-icon-template.html
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/1836#issuecomment-99309974.
",timanglade,timanglade
1836,2015-05-06 22:26:03,"Made one this morning, @yoshyosh and I iterated a bit, seems close, follows the Yosemite conventions (as I've seen them?). Also have an `icns` file for it (which can't be attached here).
![screen shot 2015-05-06 at 3 24 36 pm](https://cloud.githubusercontent.com/assets/1855036/7505083/1ad4bb94-f404-11e4-82ee-7e9d44ddb204.png)
",mrh-is,yoshyosh
1836,2015-05-06 22:43:29,"Maybe we could make that gradient pop a bit more? I really like the depth
of the gradient of the iMessage icon for example, even Atom does it well
too.

On Wed, May 6, 2015 at 3:26 PM, Michael Helmbrecht <notifications@github.com

> wrote:
> 
> Made one this morning, @yoshyosh https://github.com/yoshyosh and I
> iterated a bit, seems close, follows the Yosemite conventions (as I've seen
> them?). Also have an icns file for it (which can't be attached here).
> [image: screen shot 2015-05-06 at 3 24 36 pm]
> https://cloud.githubusercontent.com/assets/1855036/7505083/1ad4bb94-f404-11e4-82ee-7e9d44ddb204.png
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/1836#issuecomment-99629556.
",timanglade,yoshyosh
1836,2015-05-07 18:55:47,"@timanglade Your wish is my command! Gradient a bit more visible. Going to be harder to get more without the top being too close to white and the bottom being too dusty. I think this is good until the rebrand. :+1:
![screen shot 2015-05-07 at 11 48 42 am](https://cloud.githubusercontent.com/assets/1855036/7523313/cb9f547e-f4af-11e4-8375-d631731976b6.png)

Review requests: @yoshyosh @TimOliver 
",mrh-is,yoshyosh
1836,2015-05-07 18:55:47,"@timanglade Your wish is my command! Gradient a bit more visible. Going to be harder to get more without the top being too close to white and the bottom being too dusty. I think this is good until the rebrand. :+1:
![screen shot 2015-05-07 at 11 48 42 am](https://cloud.githubusercontent.com/assets/1855036/7523313/cb9f547e-f4af-11e4-8375-d631731976b6.png)

Review requests: @yoshyosh @TimOliver 
",mrh-is,TimOliver
1836,2015-05-07 18:55:47,"@timanglade Your wish is my command! Gradient a bit more visible. Going to be harder to get more without the top being too close to white and the bottom being too dusty. I think this is good until the rebrand. :+1:
![screen shot 2015-05-07 at 11 48 42 am](https://cloud.githubusercontent.com/assets/1855036/7523313/cb9f547e-f4af-11e4-8375-d631731976b6.png)

Review requests: @yoshyosh @TimOliver 
",mrh-is,timanglade
1836,2015-05-07 20:57:04,"Interesting, maybe I’m wrong but it feels like the iMessage icon makes the
gradient pop by going extremely dark on the bottom/right edges, and kinda
light on the top/left edges, but a nice moderate hue without much shift in
the middle. As it stands the center shade of pink is maybe a bit too light
to keep the R very visible in our icon, so maybe we can try something like
that, if I’m not reading the iMessage gradient wrong?

On Thu, May 7, 2015 at 11:55 AM, Michael Helmbrecht <
notifications@github.com> wrote:

> @timanglade https://github.com/timanglade Your wish is my command!
> Gradient a bit more visible. Going to be harder to get more without the top
> being too close to white and the bottom being too dusty. I think this is
> good until the rebrand. [image: :+1:]
> [image: screen shot 2015-05-07 at 11 48 42 am]
> https://cloud.githubusercontent.com/assets/1855036/7523313/cb9f547e-f4af-11e4-8375-d631731976b6.png
> 
> Review requests: @yoshyosh https://github.com/yoshyosh @TimOliver
> https://github.com/TimOliver
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/1836#issuecomment-99978928.
",timanglade,yoshyosh
1836,2015-05-07 20:57:04,"Interesting, maybe I’m wrong but it feels like the iMessage icon makes the
gradient pop by going extremely dark on the bottom/right edges, and kinda
light on the top/left edges, but a nice moderate hue without much shift in
the middle. As it stands the center shade of pink is maybe a bit too light
to keep the R very visible in our icon, so maybe we can try something like
that, if I’m not reading the iMessage gradient wrong?

On Thu, May 7, 2015 at 11:55 AM, Michael Helmbrecht <
notifications@github.com> wrote:

> @timanglade https://github.com/timanglade Your wish is my command!
> Gradient a bit more visible. Going to be harder to get more without the top
> being too close to white and the bottom being too dusty. I think this is
> good until the rebrand. [image: :+1:]
> [image: screen shot 2015-05-07 at 11 48 42 am]
> https://cloud.githubusercontent.com/assets/1855036/7523313/cb9f547e-f4af-11e4-8375-d631731976b6.png
> 
> Review requests: @yoshyosh https://github.com/yoshyosh @TimOliver
> https://github.com/TimOliver
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/1836#issuecomment-99978928.
",timanglade,TimOliver
1836,2015-05-07 20:57:04,"Interesting, maybe I’m wrong but it feels like the iMessage icon makes the
gradient pop by going extremely dark on the bottom/right edges, and kinda
light on the top/left edges, but a nice moderate hue without much shift in
the middle. As it stands the center shade of pink is maybe a bit too light
to keep the R very visible in our icon, so maybe we can try something like
that, if I’m not reading the iMessage gradient wrong?

On Thu, May 7, 2015 at 11:55 AM, Michael Helmbrecht <
notifications@github.com> wrote:

> @timanglade https://github.com/timanglade Your wish is my command!
> Gradient a bit more visible. Going to be harder to get more without the top
> being too close to white and the bottom being too dusty. I think this is
> good until the rebrand. [image: :+1:]
> [image: screen shot 2015-05-07 at 11 48 42 am]
> https://cloud.githubusercontent.com/assets/1855036/7523313/cb9f547e-f4af-11e4-8375-d631731976b6.png
> 
> Review requests: @yoshyosh https://github.com/yoshyosh @TimOliver
> https://github.com/TimOliver
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/1836#issuecomment-99978928.
",timanglade,timanglade
1836,2015-05-07 21:21:26,"@timanglade said he wants to lick this, so it must be good!
![screen shot 2015-05-07 at 11 48 42 am](https://cloud.githubusercontent.com/assets/1855036/7526160/4b456952-f4c4-11e4-8552-06d65584548e.png)
",mrh-is,timanglade
1835,2015-05-05 05:08:33,"@jpsim thanks for the fast response however with that method I get the following error: 
`RLMArray predicates must contain the ANY modifier'` 

The working query for me was:



Thanks Again!
",jonandersen,jpsim
1824,2015-05-03 16:59:35,"Hi @fooevr, Realm doesn't currently have any mechanisms in place to expose what data has changed in a [notification](http://realm.io/docs/cocoa/latest/#notifications). We're already tracking this functionality in #601, so I'm closing this one as a duplicate.
",jpsim,fooevr
1824,2015-05-03 17:04:18,"@jpsim thanks, I hope realize this practical feature soon.
",fooevr,jpsim
1823,2015-05-03 06:41:46,"Thanks for the PR, @toorist! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.

Cheers,
The robots and humans at Realm
",realm-ci,toorist
1822,2015-05-03 06:39:55,"Thanks for the PR, @toorist! We'll need you to accept our [Contributor License Agreement](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge your contributions.\n\nCheers,\nThe robots and humans at Realm
",realm-ci,toorist
1817,2015-05-02 18:15:27,"Thanks for the request @webstersx, but I'm going to go ahead and close this as a duplicate of https://github.com/realm/realm-cocoa/issues/1541, which already has making `inWriteTransaction` public as a part of our immediate roadmap.
",segiddins,webstersx
1812,2015-05-04 14:54:49,"Thank you, @jpsim! I've sent you details by email.
",ako2009,jpsim
1811,2015-04-30 18:16:07,"@jpsim would appreciate a quick look at the CHANGELOG?
",segiddins,jpsim
1811,2015-05-01 20:09:36,"@jpsim done!
",segiddins,jpsim
1809,2015-05-12 19:20:56,"@jpsim I see there is a .framework bundle in the 0.92.2 release, but when I actually `carthage update` I only find the normal Realm.framework in the iOS build folder, so it doesn't appear to be copying the pre-built binary. My cartfile matches the documentation. Am I missing a step?
",jarsen,jpsim
1809,2015-05-12 20:25:21,"@jarsen are you using Carthage 0.7.3? what are the exact contents of your Cartfile? Are you using `--use-binaries` when invoking `carthage` from the command line?
",jpsim,jarsen
1809,2015-05-13 21:17:32,"Looks like I needed to update Carthage :tired_face:. Thanks @jpsim .
",jarsen,jpsim
1806,2015-04-28 15:38:53,"@webstersx this is a code path that we know has issues -- we'd love to see a pull request with some of the changes you've been playing around with!
",segiddins,webstersx
1805,2015-05-03 08:52:51,"@segiddins So weird, it may be true. How can I debug this issue?
",dismory,segiddins
1805,2015-05-04 18:28:46,"@dismory nothing really comes to mind... I guess the only thing to be sure of is making sure you're not accidentally writing to Realm's internal data structures via a buffer overflow, or using a closed FD or something. If you can think of anything you're doing that might affect how Realm deals with its files, that would be a huge help in tracking this down.
",segiddins,dismory
1805,2015-05-26 22:25:25,"@dismory did you ever find out more about this issue?
",jpsim,dismory
1800,2016-03-07 10:04:00,"@segiddins  Was this fixed in your PR? If not, I Would like to request this given that any kind of follower/following relationship cannot be shared between Realms without a fix for this.
",cday,segiddins
1800,2016-06-28 20:48:21,"Unassigned because it's not clear that this is a direction we want to head. It creates an unnecessary space overhead for acyclic graphs, and it seems to encourage use cases where the user works with their objects outside of Realm and repeatedly copies them into Realm.

@dumoko It would be useful to know why you'd like to copy this object graph into Realm rather than using the `add` function.
",JadenGeller,dumoko
1798,2015-06-23 19:01:30,"@tgoyne @jpsim @bdash I'd like to get this reviewed and merged into master, especially since the core upgrade/file format change is no longer coupled with this getting merged.
",segiddins,jpsim
1798,2015-06-23 19:01:30,"@tgoyne @jpsim @bdash I'd like to get this reviewed and merged into master, especially since the core upgrade/file format change is no longer coupled with this getting merged.
",segiddins,tgoyne
1797,2015-04-25 18:34:37,"@anlaital I just want to make sure, are you using the release version of 0.91.3 or are you using the beta version you were playing around with earlier in the week?
",segiddins,anlaital
1797,2015-04-25 21:13:13,"@segiddins I'm using the actual release version (0.91.3) of Realm in production. 

@timanglade The reason why I had to upgrade to it was that the previous version had a breaking issue with indexed properties (#1735) which resulted in skewed account balances and missing transactions for our users.

Looking at all the crashes (we've gotten about 13k crashes now from about 4k users with about 25 different stack traces), it would seem that there is in fact some similarity between them. Most of them include trying to write an object into Realm that previously contained an indexed property (this property is no longer indexed, but is still present in the RLMObject subclass), so there might be a link there. We have not been able to reproduce these issues in piloting or testing, so I imagine it's plausible that this occurs for users that have had their database indexes previously corrupted by the aforementioned issue.
",anlaital,timanglade
1797,2015-04-25 21:13:13,"@segiddins I'm using the actual release version (0.91.3) of Realm in production. 

@timanglade The reason why I had to upgrade to it was that the previous version had a breaking issue with indexed properties (#1735) which resulted in skewed account balances and missing transactions for our users.

Looking at all the crashes (we've gotten about 13k crashes now from about 4k users with about 25 different stack traces), it would seem that there is in fact some similarity between them. Most of them include trying to write an object into Realm that previously contained an indexed property (this property is no longer indexed, but is still present in the RLMObject subclass), so there might be a link there. We have not been able to reproduce these issues in piloting or testing, so I imagine it's plausible that this occurs for users that have had their database indexes previously corrupted by the aforementioned issue.
",anlaital,segiddins
1797,2015-04-25 21:36:50,"@anlaital Would it be possible for you to share all the different stack traces? help@realm.io
",danielpovlsen,anlaital
1797,2015-04-25 21:40:10,"@anlaital Could you also share what version of Realm your previous release was using?
",danielpovlsen,anlaital
1797,2015-04-26 06:38:56,"@danielpovlsen I've sent you an invite to help@realm.io so you can check the stack traces yourselves. I will be able to get a copy of a database that always crashes on Monday, but until then I cannot investigate this further as I'm travelling. Hopefully we'll get this fixed soon, as now we're getting bombarded with 1-star ratings instead of the usual 5-star ones.
",anlaital,danielpovlsen
1797,2015-06-26 16:14:03,"This weird crash comes out again with Realm 0.93.1
@timanglade 


",demonnico,timanglade
1797,2015-06-27 15:46:04,"@jpsim 
I got this crash log from `Crashlytics`, there's no assertion message except the log above. I'll open a new issue if I got something detail else. Thanks for your reply.
",demonnico,jpsim
1793,2016-08-12 21:33:04,"@jpsim Couldn't we also strictly set the default values _before_ the user sets the property?
",JadenGeller,jpsim
1788,2015-04-24 18:04:05,"@jpsim the reason I made this method more verbose is that it's not exposed publicly and I wanted to limit the chances of a name collision.
",segiddins,jpsim
1781,2015-04-22 23:38:31,"Hi @nakp, those docs are unfortunately referring to a method that is now private in Realm.

However, as you can see from its implementation [here](https://github.com/realm/realm-cocoa/blob/64b8aed755a6dd8eba842eb48903e0268f73eb96/Realm/RLMRealm.mm#L436-L441), it shouldn't actually be necessary in your tests. We'll update the docs as soon as possible to remove this method.
",jpsim,nakp
1780,2015-04-22 22:13:33,"It's happening while compiling. I'll report the bug to Apple. Thanks @segiddins!
",mkolodny,segiddins
1774,2015-04-23 02:48:03,"@mrackwitz can you please verify that this is still working in swift 1.2?
",segiddins,mrackwitz
1774,2015-05-05 23:51:34,":+1: great work @mrackwitz and @segiddins!
",jpsim,mrackwitz
1774,2015-05-05 23:51:34,":+1: great work @mrackwitz and @segiddins!
",jpsim,segiddins
1774,2015-05-06 18:52:51,"With https://github.com/CocoaPods/CocoaPods/releases/tag/0.37.1, I think this is good to go!

\c @mrackwitz @tgoyne 
",segiddins,mrackwitz
1774,2015-05-06 20:35:35,"@marcvanolmen you need to also do the following in your podfile:


",segiddins,marcvanolmen
1773,2015-04-21 01:46:14,"Hi @francoismarceau29, RLMArray's can only link to objects of a single type. We have an issue open discussing the possibility of adding support for abstract classes or polymorphic link support in #1109.
",jpsim,francoismarceau29
1769,2015-05-01 18:11:09,"@jpsim we could always use [key-value validation](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/Validation.html) if we wanted to provide arbitrary validation hooks?
",segiddins,jpsim
1768,2015-04-20 03:38:04,"Thanks @CraigSiemens I'll try this solution. However I am also interested in null support branch merge to the master :) 
I'll try to do some beta testing as per Tim instruction.
",tariq235,CraigSiemens
1768,2015-04-22 20:36:58,"@tariq235 as it stands right now, you will need to do your own data sanitization for nulls before passing dictionaries into realm. We are, however, actively working on null support, which should make this all much easier. Hope that helps!
",segiddins,tariq235
1766,2015-04-17 18:02:37,"@webmagnets, are you sure that it's not just being blocked on opening up a new write transaction (i.e. you might already have a write transaction going on another thread, and so the call to `beginWriteTransaction()` will block until that other transaction is either committed or canceled)
",segiddins,webmagnets
1766,2015-04-17 18:23:00,"@webmagnets that's really the only thing that would cause a blocking call to `beginWriteTransaction()`. I'd be happy to take a look at your project, but I'm fairly confident that this is a symptom of having another open write transaction.
",segiddins,webmagnets
1765,2015-04-17 18:18:55,"Thank you @tgoyne ! This seem to have fixed the issue. 
Should I close this or should it remain open until merged?
",staticdreams,tgoyne
1764,2015-04-17 17:41:09,"@kevinmlong are you sure the RLMResults actually contains objects of type `Airport`? I wouldn't be surprised if it was your forced downcast that was failing. Additionally, I can see that this is happening inside your test suite -- have you made sure to only link your model classes to your app target?
",segiddins,kevinmlong
1764,2015-04-17 17:51:37,"@segiddins - Yes. The RLMResults indeed contains `Airport`. It works sometimes, but not others, which is the confusing part. The model is linked to both the app and testing targets. The db is not encrypted and we're using version 0.91.2 (Xcode Beta 6.3)
",kevinmlong,segiddins
1764,2015-04-17 17:58:35,"@segiddins - ok, so is it possible to run unit tests using the model?
",kevinmlong,segiddins
1761,2015-04-17 01:06:47,"Hi @LoganWright, thanks for submitting this PR!

Before we get too deep in review, could you please sign our [CLA](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla)?

Your approach seem to work well for the simple use case where deleting an object always means all of its properties listed in `+cascadeProperties` should also be deleted. I would prefer a solution that would only delete the object in a relationship if it's not linked to by any other object in the realm. That way, we could also support a scenario where multiple objects can link to another, and the linked-to object would only be deleted once it's not used by any other.

For example:



So multiple posts can share some of their tags, and querying for posts with specific tags is as simple as following the links. But whenever the last post with a specific tag is deleted, so is the tag, so there are never any free-hanging tags.

We've internally discussed building a concept of ""delete always"", ""delete if last linked"" and ""delete never"" into relationships, but I can't recall in which scenarios a ""delete always"" semantic would actually be preferable over a ""delete if last linked"".
",jpsim,LoganWright
1761,2015-04-17 02:40:32,"@jpsim Thanks for getting back to me, I just signed the CLA.

That sounds like a good plan, I'm thinking of the three states you mentioned as such:

### Delete Never

This is current behavior and should probably continue to be the default.  Don't override `cascadeProperties` and the objects are not deleted.

### Delete If Last Linked

If you override `cascadeProperties` this is the default cascade implementation.  This seems like it would be the most commonly desired use case.

### Delete Always

I also can't think of a good scenario for this, so I think this would need to be specified some how.  I haven't thought through how this should go from an api standpoint yet.  Might be considered just `delete` as opposed to `cascade`.

### Additions

I started sketching out the delete if last linked code because that seemed like the next logical step.  It currently covers finding whether or not other objects share the same `parent -> child` relationship, but it doesn't cover external links to the cascade property.  ie:



If I deleted `a` in the above example with `one` marked cascade, it would notice that `aPrime` still has a link and would not delete it.  However, it would not notice the link to `b`. Do you have a suggestion about how to find additional link objects within realm?  If not, it might require some sort of user facing api to mark alternative links.

Thanks for taking a look at some of this, I'm looking forward to any input!

 - Logan
",LoganWright,jpsim
1761,2015-04-23 20:26:14,"Hi @LoganWright, sorry for the delay in getting back to you. Upon talking to the person who implemented `LinkType` in realm's core, it seems that the functionality is as-yet incomplete.

I'll talk to him to see if we can complete that functionality soon, because that really is the best place to have this kind of logic.
",jpsim,LoganWright
1761,2015-04-24 20:41:34,"Hi @jpsim 

At least I'm not crazy that the relationships weren't functioning properly!

I fully agree that this is the best place to have the logic, I'd be happy to wrap it once it's implemented in the core, but it sounds like you guys aren't quite ready yet.  Is there any sort of ETA on that (I know you guys have been backed up on Swift support, multiple processes, etc.)

Would you prefer to leave this pr open in the interim, or shall I close it?
",LoganWright,jpsim
1760,2015-04-17 00:44:03,"@kishikawakatsumi is correct. I'm closing this issue because I agree with @segiddins that adding this functionality wouldn't add much value over performing operations during fast enumeration.

@OlegAnghelov please let us know if there are cases where `makeObjectsPerformSelector:` allows doing things that are not currently possible.
",jpsim,kishikawakatsumi
1760,2015-04-17 00:44:03,"@kishikawakatsumi is correct. I'm closing this issue because I agree with @segiddins that adding this functionality wouldn't add much value over performing operations during fast enumeration.

@OlegAnghelov please let us know if there are cases where `makeObjectsPerformSelector:` allows doing things that are not currently possible.
",jpsim,segiddins
1759,2015-04-15 13:29:29,"@mightyleader could you share the entire stack trace that led to that exception? Even better, do you have a project on hand that consistently causes the issue that we could take a look at? Thanks!
",segiddins,mightyleader
1759,2015-04-17 01:21:46,"@mightyleader it looks like you're setting a string property on your realm model to an NSNumber object, which is causing it to call an unknown selector on the NSNumber (`UTF8String`).

Maybe you're deserializing JSON containing a number which you're expecting to be a string into an NSDictionary?
",jpsim,mightyleader
1759,2015-05-01 20:07:25,"@mightyleader were you ever able to confirm that you were indeed passing an NSNumber to an NSString property? We'll reopen if that's not the case.
",jpsim,mightyleader
1759,2015-05-01 20:10:13,"Hey,
We're pretty sure our own guard code round JSON would have caught it, and we'd have seen more instances of it if it was in our code base so it's still a mystery.

Rob

> On 1 May 2015, at 21:07, JP Simard notifications@github.com wrote:
> 
> @mightyleader were you ever able to confirm that you were indeed passing an NSNumber to an NSString property? We'll reopen if that's not the case.
> 
> ―
> Reply to this email directly or view it on GitHub.
",mightyleader,mightyleader
1756,2015-04-14 21:11:56,"@karadis, I believe what you're asking for is the `notification` argument which we already pass in, whose values are documented at http://realm.io/docs/cocoa/api/Constants/RLMRealmNotification.html.
",segiddins,karadis
1756,2015-04-14 21:24:38,"It seems to me like @karadis is asking for the ability to ""tag"" transactions, which would allow conditionally running code in a notification block based on what write transaction it corresponds to.

The (small) problem with that is that multiple transactions may have triggered the notification block, so at the very least, the notification block would have to pass an array of those tags/names.

@karadis is that a fair assessment of what you're requesting? Could you think of a scenario where tagging a write would be preferable than parsing the fine-grain notifications information that we're currently working to offer (#601)?
",jpsim,karadis
1756,2015-04-14 22:22:08,"Thanks @jpsim , yes, thats what i was referring to, and actually the fine-grain solution would be a great solution.

Either way, I can give you an example to what i had in mind:
It's basically referring to a number of operations i perform in a transaction; If for example i'm performing a Login process to a user, and in that process I am saving a User object and another different object (let's say for argument sake) a Favorites Object. 
This whole login process can be tagged as ""Login_process_completed"" (string).

The LoginViewController (or other classes for that matter) can register to a notification block, and check the tag/name that is passed. if it is equals to ""Login_process_completed"", than i can continue with what i want.

I'm assuming the fine-grain solution can solve this problem as well, althuogh if i understand correctly i would have to ""register"" to a notification block for User object and for Favorites Object, and handle them separately. (or will they be passed as an array inside the same block?)

Thank you for the reply
",karadis,jpsim
1756,2015-05-01 18:19:28,"I actually think that using a normal `NSNotificationCenter` might be the best option for the kind of notifications you're looking for, @karadis -- `NSNotification`s can have semantic meaning that commit a transaction probably will never have.
",segiddins,karadis
1751,2015-04-15 12:25:37,"@tgoyne: Did you checked whether the renaming of realm-core's header dir from `tightdb` to `realm` is not causing any issues, especially regarding the distribution over CocoaPods? Because by default OSX's file-system is case-insensitive and by that changeset, we loose the separation of the directories for the headers of realm-core and realm-cocoa, we had before. I'm not aware of any direct issues with that, but it could have potentially unexpected side-effects.
",mrackwitz,tgoyne
1750,2015-04-13 19:05:39,"@issue2k I've looked through the relevant Realm code paths, and I'm not quite sure how you'd ever be getting that C++ exception. Additionally, there shouldn't be any difference handling exceptions between 32 and 64-bit devices, so something strange is going on. Would it be possible to share a bit more context around the failure? A project that reproduces it would be preferable, but even a complete stack trace would be a great help. As always, if you want to keep things private, you can send them to help@realm.io. Thanks!
",segiddins,issue2k
1750,2015-04-14 04:33:46,"@segiddins thanks for your reply.

https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Exceptions/Articles/Exceptions64Bit.html

I expect that i run into that:

_On the other hand, an Objective-C catch clause taking a dynamically typed exception object (@catch(id exception)) can catch any Objective-C exception, but cannot catch any C++ exceptions. So, for interoperability, use @catch(...) to catch every exception and @throw; to rethrow caught exceptions. In 32-bit, @catch(...) has the same effect as @catch(id exception)._

If i understand the last sentence correctly its not possible to handle C++ exceptions in Objective-C on 32bit platforms.

https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Exceptions/Articles/Exceptions64Bit.html

After posting the issue i realized that the problem _only_ occurs on Simulators < iPhone 5s. I will send an example project to you. 
",issue2k,segiddins
1750,2015-04-14 21:43:03,"@issue2k an example project would be incredibly helpful, as you shouldn't be getting any C++ exceptions from the core library -- those should be caught by realm, and then, if necessary, mapped to ObjC exceptions.
",segiddins,issue2k
1750,2015-04-20 18:35:44,"@segiddins it took me a while to reproduce this inside of an example project. It only happens under very special conditions. What i can say now is that the crash only happens when i have included the pod CrashlyticsFramework, without Crashlytics everything is fine. It even only crashes on Simulator <= iPhone 5. It does NOT crash on a real device <= iPhone 5 (tested with iPhone 4s only).

Find my example project here: https://github.com/issue2k/realm-encryption-test

To reproduce the issue do the following:

1) Start Project on Simulator <= iPhone 5
2) Stop
3) Start Project again on the same Simulator.
",issue2k,segiddins
1750,2015-04-20 18:37:22,"@issue2k thanks so much for digging into this! I'll be sure to take a look at that example project, and see if there's anything we can do to improve that experience in the simulator.
",segiddins,issue2k
1750,2015-04-20 18:45:02,"@issue2k I just cloned that project and ran it in both the iPhone 4S and iPhone 5 iOS 8.2 simulators, and did not see any crash.
",segiddins,issue2k
1750,2015-04-20 20:44:01,"@segiddins I am using 8.3, will check 8.2 as soon as possible
",issue2k,segiddins
1750,2015-05-01 20:05:21,"Closing as this is a limitation inherent to iOS and cannot be avoided outright. Please see @tgoyne's previous links for potential workarounds.
",jpsim,tgoyne
1749,2015-04-13 17:45:37,"@zxl777 the only thing that comes to mind looking at that code snippet is that fact that `@""xxx""` is a constant string, and therefore is never even allocated, whereas the text from the object will need to be allocated for every cell. If, for some reason, you have a huge amount of text in that property, or you're showing many cells at a time (or they're not being properly reused), that could explain some of the increase in memory usage. If it's neither of those things, however, we'd need an example app we could run to be able to instrument things. Hope that helps!
",segiddins,zxl777
1749,2015-04-14 00:56:33,"@zxl777 if you could send us the version of your project that was using Realm, I'd really like to be able to dig in and see what me might be doing wrong. I'm sorry you ran into issues using Realm.
",segiddins,zxl777
1749,2015-04-14 22:37:58,"@zxl777 again, if you want us to have a look, you can send a copy of your project to help@realm.io.
",segiddins,zxl777
1748,2015-04-10 20:00:48,"@seancatkinson, I made a [PR to your example project](https://github.com/seancatkinson/realm-swift-update-issue/pull/1) that fixes the issue you were seeing.
",segiddins,seancatkinson
1744,2015-04-15 19:13:13,"@bennichols your best bet will be to clone this repo and add `RealmSwift.xcodeproj` as a subproject to your own project (or workspace)
",segiddins,bennichols
1744,2015-04-15 23:07:07,"I do that too, but end up having to add the realm.framework as well, other wise I get an error compiling about realm.private missing. 

> On 16 Apr 2015, at 05:13, Samuel E. Giddins notifications@github.com wrote:
> 
> @bennichols your best bet will be to clone this repo and add RealmSwift.xcodeproj as a subproject to your own project (or workspace)
> 
> —
> Reply to this email directly or view it on GitHub.
",lewo,bennichols
1742,2015-04-08 15:49:24,"@Samback, we already have a couple of issues tracking this, namely https://github.com/realm/realm-cocoa/issues/694 and https://github.com/realm/realm-cocoa/issues/1063.
",segiddins,Samback
1741,2015-04-08 19:08:01,"Hi @github2016a 

You can use `Person.objectsWhere(""age > 40 AND ANY books.color = 'red'"")` to get all the people over age 40 that have red books

Also I notice that you are using a foreignKey approach to Realm, that is not good for NoSQL type dbs! A better way is to just store the objects onto eachother, similar to how you stored an array of books on Person.



Should be



Objects are related to other objects because they are stored within each other. You shouldn't need to use any id's to reference them. Id's are good for primary keys if you need to find a very specific objects to update them for example. For the most part you should be fine without them though!

It might look a little weird to you at first since you will be duplicating data in some places, but that's fine, that is the power of NoSQL. It makes your queries much cleaner, and the ability to grab the objects you need much more straightforward
",yoshyosh,github2016a
1741,2015-04-10 06:05:50,"thanks @yoshyosh ,that helps a lot.wish you a good day.:sunny:
",github2016a,yoshyosh
1741,2015-04-20 18:17:59,"Hey @yoshyosh, you've been really helpful for me in the past and I have a similar question. I have no experience with NoSQL-type db's so I was hoping you could help me figure out my schema for my weight-training tracking app. Here's what I've got:



For the `CompletedWorkout` model, I'm pretty confused about how to hold the weight lifted and completed sets/reps for each exercise contained within `workout`. I have it set up above to just use arrays to hold that data, but I don't think it's the best way of doing it since they're not linked to an `Exercise` object. Any thoughts on how to clean this up? 

Second question: Exercises that have the same names like ""Squat"" can have a different number of reps and sets from each other, e.g. some workout routines have 3 sets of 5 reps and some have 5 sets of 5 reps. Since each Exercise will need to be unique in that regard, should I add a primary key to it? I might be overthinking all of this... 
",mgallagher,yoshyosh
1741,2015-04-20 20:48:55,"Hey @mgallagher I think the best way to do this would be to set up your model like this
**Plans** - name, exercises
**Workout** - name, exercises, completed, totalReps, totalSets, totalWeight, user (or you can use backlinks)
**Exercise** - name, sets
**Set** - reps, weight
**User** - name, currentWorkout, workouts

Plans would be your general templates, when a user selects a plan, you can create a workout by copying its values.

Workout has a completed boolean so that you know whether a user has completed it or not. You can also have some computed properties like totalReps, totalSets, totalWeight, where you would iterate through all the exercises and their sets, then add all those up.

Exercise has sets rather than reps and weight, this allows us to have those varying reps and weight combos for the same type of exercise, like a squat

Hope this helps!
",yoshyosh,mgallagher
1741,2015-04-24 06:30:56,"That's fantastic and actually makes a lot sense. Thank you very much @yoshyosh!
",mgallagher,yoshyosh
1740,2015-04-09 20:31:20,"@alazier the issue is that we switch on the type code in a lot of places, instead of using our `RLMPropertyType` enum
",segiddins,alazier
1740,2015-04-22 17:19:02,"@tgoyne does this need anything else?
",segiddins,tgoyne
1739,2015-04-24 17:55:01,":+1:. Can you rebase this @tgoyne?
",jpsim,tgoyne
1738,2015-04-07 15:52:14,"@imanzarrabian, in-memory Realms are basically the same as persisted Realms, except they're not written to disk. A standalone object is an object that is not saved to _any_ Realm, whereas an object that is inserted into an in-memory Realm is still a persisted object. Hope that helps!
",segiddins,imanzarrabian
1738,2015-04-07 18:19:48,"thx @segiddins 
",imanzarrabian,segiddins
1736,2015-04-07 16:01:27,"@github2016a since Realm is _not_ a relational database, you don't need to worry about this sort of query! Realm has native support for to-many relationships, and you can read more about it on our docs at http://realm.io/docs/cocoa/0.91.1/#relationships. Hope that helps!
",segiddins,github2016a
1735,2015-04-07 17:55:24,"@rrrlasse There are no 0-bytes in the strings, as they are IBANs.

@tgoyne I'll try to asterisk out the sensitive parts of the data and send you the database file along with the encryption key.

I should also note that the results are returned correctly when indexes are not hit, i.e. performing CONTAINS or BEGINSWITH on the indexed string column.
",anlaital,rrrlasse
1735,2015-04-07 17:55:24,"@rrrlasse There are no 0-bytes in the strings, as they are IBANs.

@tgoyne I'll try to asterisk out the sensitive parts of the data and send you the database file along with the encryption key.

I should also note that the results are returned correctly when indexes are not hit, i.e. performing CONTAINS or BEGINSWITH on the indexed string column.
",anlaital,tgoyne
1735,2015-04-13 19:38:02,"To be clear, currently there is no way in Realm to re-generate the index (or remove them). @tgoyne is adding that feature right now.
(@anlaital: I think both you & I read Thomas saying “sanitizing the Realm file” as “sanitizing the indices” when in fact he was talking about removing sensitive info :D)
",timanglade,tgoyne
1735,2015-04-13 19:38:02,"To be clear, currently there is no way in Realm to re-generate the index (or remove them). @tgoyne is adding that feature right now.
(@anlaital: I think both you & I read Thomas saying “sanitizing the Realm file” as “sanitizing the indices” when in fact he was talking about removing sensitive info :D)
",timanglade,anlaital
1735,2015-04-17 01:17:59,"A fix was just pushed to master (#1755). Thanks for your patience, @anlaital!
",jpsim,anlaital
1734,2015-04-07 16:04:08,"Hi @enricenrich, it's hard to tell if this is actually a Realm issue or not from the code snippet you shared. I'm not super familiar with AppKit, but I'd recommend double-checking that you're not storing `RLMObject`s in an `unsafe_unretained` variable?
",segiddins,enricenrich
1734,2015-04-27 19:59:07,"@enricenrich just checking in to see if you ever made any progress of figuring out what was going on here?
",segiddins,enricenrich
1734,2016-02-22 02:31:07,"i ran into the same issue and ended up solving it in a similar way as @lm2s—however this doesn't seem like a very performant solution.

are there any examples of using realm properly with NSOutlineView?
",gf3,lm2s
1734,2016-02-22 03:32:37,"@gf3 I we have yet to receive confirmation that this is a realm issue, and if so, how we can reproduce this to identify the cause. If you care to provide enough information for us to do this, we'll be happy to take a closer look.
",jpsim,gf3
1734,2016-02-22 17:58:24,"i've [created a demo project](https://github.com/gf3/Realm-EXC_BAD_ACCESS) with instructions on how to reproduce the issue as well as the solution both @lm2s and i have implemented. maybe you guys can recommend a better approach?
",gf3,lm2s
1734,2016-02-23 00:17:56,"There are two factors at play here:
1. `-[RLMResults objectAtIndex:]` returns a new instance of your `RLMObject` subclass each time it is called. It does not retain the existing instances.
2. `NSOutlineView` does not retain the objects returned by the `-outlineView:child:ofItem:` data source method.

The result is that by the time `NSOutlineView` calls other data source or delegate methods (in @gf3's test case this is often `-outlineView:isGroupItem:`), the object returned by `-outlineView:child:ofItem:` has been deallocated.
",bdash,gf3
1734,2016-02-23 01:12:32,"@bdash (if you have time) could you provide an example of better solution to this problem. i'm hoping to use Realm to build a chat application where users could receive thousands of messages per room and it seems like the current array-wrap solution would be very expensive
",gf3,bdash
1734,2016-03-10 19:08:57,"@jhoughjr have you tried applying the strategies suggested in this thread? You mention you've tried copying the Realm objects into an Array and that not working. Can you please elaborate? How about the associated object approach?
",jpsim,jhoughjr
1734,2016-03-14 23:52:33,"@jhoughjr it's because the [`NSTableViewDelegate` protocol doesn't pass around objects](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/NSTableViewDelegate_Protocol/index.html#//apple_ref/doc/uid/TP40008622-CH1-SW8), you get a row index as an `Int` and optionally an `NSTableColumn`
",gf3,jhoughjr
1732,2015-04-06 17:42:16,"@nuke99 you will need to fetch the object first and then delete it, I'm going to update the docs to represent this more clearly
",yoshyosh,nuke99
1732,2015-06-13 04:43:30,"@tgoyne so how is `createOrUpdateInRealm:withObject` helpful?
",onmyway133,tgoyne
1731,2015-04-05 16:47:46,"Hi @idanbar134, it looks like you're actually using [realm-java](https://github.com/realm/realm-java), so you should be posting your issues over there. 
",segiddins,idanbar134
1730,2015-04-06 19:28:33,"I don't particularly like the idea of putting more class methods on `RLMRealm` that use the notion of a `defaultRealm`, but it's up to the rest of the team if we merge this.

Thanks for the pull request, @fcanas!
",segiddins,fcanas
1730,2015-04-06 20:02:38,"@segiddins I hear you.

I don't know if this fits with your architecture or style, but I'd be happy to refactor methods that use the default realm into a category on `RLMRealm`.
",fcanas,segiddins
1730,2015-05-12 21:08:07,"Sorry we've been neglecting this, @fcanas. I guess the reason why is that we're a bit uneasy about the current proposal. I could be more in favor of passing the `RLMRealm` instance as a parameter to the block:


",jpsim,fcanas
1726,2015-04-03 13:34:01,"Hi @zocario , do you have a project that you can share that we can use to reproduce the issue?
",segiddins,zocario
1726,2015-04-04 07:55:50,"Hi @segiddins, check this [demo project](https://www.dropbox.com/sh/v78sk4uljl58pmg/AACGL4i4SG5uo2C1hMh3KwZya?dl=0) that crashes with this issue.
The code that crashes is in the`viewDidLoad` of the `ViewController` class.
",zocario,segiddins
1726,2015-04-07 18:27:34,"@zocario so, the issue there is that it's using an `inout` parameter. In Swift, inout means that the variable at the callsite is reassigned every time, even if there are no changes. I'd lean towards saying this is an issue with the design of `ObjectMapper`.
",segiddins,zocario
1726,2015-04-08 12:12:22,"Thanks @segiddins for your answer.
I'll go with Mantle instead of ObjectMapper as there is no easy fix to get ObjectMapper working fine with Realm.
",zocario,segiddins
1725,2015-04-03 13:57:06,"@dzz0615, would it be possible to provide us with a sample project that demonstrates the deviation from expected results? That would make it much easier to track down what's going on. Thanks!
",segiddins,dzz0615
1725,2015-04-05 03:32:35,"@segiddins I managed to track this down.  Now that I have I am less sure if it is the same problem but it is definitely a bug.  It seems to be some how connected to the deletion of the first child in an RLMArray, after this child is deleted subsequent OR queries give unreliable results.

If you dump this [gist](https://gist.github.com/nacrossweb/38cd08147c31ca0dc81b) into an empty project you should be able to see what I mean.  Deleting any other child will not trigger the bug.
",nicholascross,segiddins
1723,2015-05-05 17:32:17,"This has been updated and is ready for review again /cc @segiddins @tgoyne @bdash 
",jpsim,segiddins
1723,2015-07-01 20:55:37,"@jpsim is this method public? I can't find it to check if my realm needs a migration or not.
",natanrolnik,jpsim
1723,2015-07-01 20:57:38,"@natanrolnik, no this PR was closed without merging. We opted to go with https://github.com/realm/realm-cocoa/issues/1584#issuecomment-99160451 instead, although that has yet to be implemented.
",jpsim,natanrolnik
1718,2015-04-01 17:58:13,"@depl0y at the moment, Realm does not support that kind of polymorphism, since each entity type is stored in its own table.
",segiddins,depl0y
1718,2015-04-02 05:00:47,"@segiddins thanks, that was I was encountering. It's good to have this confirmed.

@tgoyne Your solution actually doesn't work, with the same error. Once you assign a `SubclassOne` to `wrapper.one`, the same error occurs. But I think you didn't mean to make the types of `one` and `two` `Base`, but probably `SubclassOne` and SubclassTwo`. After that is changed this should work.
",depl0y,tgoyne
1718,2015-04-02 05:00:47,"@segiddins thanks, that was I was encountering. It's good to have this confirmed.

@tgoyne Your solution actually doesn't work, with the same error. Once you assign a `SubclassOne` to `wrapper.one`, the same error occurs. But I think you didn't mean to make the types of `one` and `two` `Base`, but probably `SubclassOne` and SubclassTwo`. After that is changed this should work.
",depl0y,segiddins
1713,2015-04-03 21:02:53,"@alazier added those tests
",segiddins,alazier
1699,2015-03-30 16:40:18,"Hi @depl0y, we'll soon be releasing a new Swift interface which will include support for generics. You can try it out under `RealmSwift.xcodeproj` in the root of this repo, but keep in mind, our support for this will be limited until we officially launch it in the coming weeks.
",jpsim,depl0y
1692,2015-03-26 17:39:10,"@pronebird we're going to be introducing the concept of an [`RLMConfiguration`](https://github.com/realm/realm-cocoa/issues/1584) that will likely give you the ability to specify a ""delete if migration needed"" option. Until then, I can't really think of a great way to do this in Swift.
",segiddins,pronebird
1692,2015-07-27 15:28:25,"@jpsim #1723 was closed without merging. Now all hope is on #1584. Is it coming up?
",ikonst,jpsim
1692,2016-08-02 17:40:40,"> If I may ask, where do we inject that line?

@shfishburn you pass a `Realm.Configuration` value when initializing a Realm: [`Realm.init(configuration:)`](https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5RealmcFzT13configurationVS0_13Configuration_S0_). So wherever you're opening a Realm for the first time in your app, you should make sure that the configuration value used has the `deleteRealmIfMigrationNeeded` value set to what you want it.
",jpsim,shfishburn
1691,2015-03-25 21:20:37,"Hi @pronebird, as [the docs state](http://realm.io/docs/cocoa/0.91.1/api/Classes/RLMObject.html#//api/name/indexedProperties), only indexing string properties is currently supported, however we plan to support integer indices in the near future.
",segiddins,pronebird
1689,2015-03-25 22:53:11,"@tgoyne the big advantage of a long-running branch is that it’s easy for us to link to from the docs. I expect many people to want this, and it may be hard for them to find it if it’s not clearly advertised. If you can think of another way, happy to use whatever is easier engineering-wise

@rlimberger thanks for the offer! I’ll let @segiddins @jpsim get back to you on that :)
",timanglade,rlimberger
1689,2015-03-25 22:53:11,"@tgoyne the big advantage of a long-running branch is that it’s easy for us to link to from the docs. I expect many people to want this, and it may be hard for them to find it if it’s not clearly advertised. If you can think of another way, happy to use whatever is easier engineering-wise

@rlimberger thanks for the offer! I’ll let @segiddins @jpsim get back to you on that :)
",timanglade,tgoyne
1689,2015-03-26 18:09:07,"Thanks for the commit, @rlimberger. We'll be making a `swift-beta` branch in the near future, making sure to avoid force-unwrapping in scenarios where it may fail, using dynamic casting in a safe way and making `assertThrows()` and `Realm().write()` play nicely with `@noescape`.
",jpsim,rlimberger
1687,2015-03-27 17:30:01,"@kishikawakatsumi :+1: 
",segiddins,kishikawakatsumi
1686,2015-03-30 21:39:50,"@jpsim @tgoyne this is green, please take another look?
",segiddins,tgoyne
1685,2015-03-25 18:44:09,"Given NSPredicate's syntax, it'd be nice to be able to do something like this:



but we don't currently support that in Realm. But even if that worked, you'd get an `NSArray` of `Foo`s, which wouldn't auto-update.

The best thing you can do now if you need an auto-updating `RLMResults` is to follow @dmiedema's suggestion and query `RLMResults *foos = [Bar objectsWhere:@""foo != nil""]` and every time you need to access a `Foo`, use `((Bar *)foos[index]).foo`.
",jpsim,dmiedema
1684,2015-04-03 17:41:48,"@tgoyne should this go in the accessor's dealloc or the realm's?
",segiddins,tgoyne
1683,2015-04-27 19:57:28,"@beowulfdk I'm going to close out this issue, since we haven't been able to reproduce the issue nor have we seen other reports of this happening. If there's any further information that might help us track this down, we'll re-open the issue. Thanks!
",segiddins,beowulfdk
1681,2015-03-23 14:49:58,"It sounds like our fiddling with the runtime search paths of `RealmSwift` to look for the vendored `Realm.framework` isn't working. 
@exsortis thanks for trying RealmSwift out! It's not yet released, so this feedback is incredibly valuable to us!
",segiddins,exsortis
1680,2015-03-26 17:48:32,"@alazier I don't think your commit does the same thing as @tgoyne's, because now the invokation is not wrapped in its own @autoreleasepool
",segiddins,alazier
1680,2015-03-26 17:48:32,"@alazier I don't think your commit does the same thing as @tgoyne's, because now the invokation is not wrapped in its own @autoreleasepool
",segiddins,tgoyne
1678,2015-03-20 20:38:58,"@alekpopek the reason the first code sample is throwing an exception is that you are setting the `photoData` property to `nil`, and Realm does not yet support nullable binary blob columns. Your second snippet is probably the best way to handle that limitation at the moment. Does that answer your question?
",segiddins,alekpopek
1676,2015-03-20 20:46:33,"This looks good to me, thanks @pizthewiz ! @jpsim, could you take a look?
",segiddins,pizthewiz
1676,2015-03-20 23:16:07,"Thanks for doing this, @pizthewiz!
",jpsim,pizthewiz
1676,2015-03-21 00:53:33,"@pizthewiz - the RealmSwift project contains our new swift apis. There are a few kinks to work out so they are not yet officially supported but you are welcome to try them out and feedback is welcome.
",alazier,pizthewiz
1676,2015-03-21 02:22:42,"Thanks @alazier, sounds as though it is worth a try!
",pizthewiz,alazier
1664,2015-03-20 20:49:08,"Since @jpsim can't reproduce this, can we close the issue for now?
",segiddins,jpsim
1663,2015-03-18 17:14:28,"Hi @eliasbagley thanks for sending this in. This was fixed in the latest versions of Realm, can you try downloading them and letting us know if you're still running into any issues? I believe you're using an older version based on this line `array.cpp:453: [realm-core-0.88.1] Assertion failed: ndx < m_size` core is now at 0.88.5. 

This is something that has to be debugged at the core level, usually we request you send a sample project that we can use to look into it further. Can you give the latest version a shot first?
",yoshyosh,eliasbagley
1663,2015-03-18 22:37:25,"@eliasbagley jp tried using 0.91.1 and things went smoothly using the latest version of core. You can read more here https://github.com/realm/realm-cocoa/issues/1664. It could be an issue with carthage, keep me posted based on what you do with this new info
",yoshyosh,eliasbagley
1663,2015-03-20 22:01:36,"@eliasbagley please provide us with a reproducible case of this issue and we'll be happy to reopen and investigate.
",jpsim,eliasbagley
1662,2015-03-23 18:15:32,"@tspecht I just tried to reproduce this issue, and was unable to. If you could share an example project that demonstrates it, that would be immensely helpful. Thanks for sending this in!
",segiddins,tspecht
1662,2015-03-23 18:16:46,"@segiddins sorry but won't be able to, the issue just occurred once I'm afraid. Just posted it here because the error message said so ;)
",tspecht,segiddins
1661,2015-03-24 07:31:22,"@jpsim not sure if I understood you correctly but we had the warnings in the _test_ target and adding the realm framework to the _test_ target fixed the warning. I double-checked that there are no test files linked to the main target and no files from the main target linked to the test target.
",floriankrueger,jpsim
1659,2016-03-25 07:36:15,"@leijing7, please see #3353 for discussion of a recent issue that would lead to this error. It's likely to be what you're hitting.
",bdash,leijing7
1658,2015-03-18 03:37:03,"Thanks for reporting this, @khanov. I've opened a PR to address this.
",jpsim,khanov
1655,2015-03-17 15:11:35,"Hi @yasirmturk, I doubt this is a problem with Realm. The string table file is a localized strings file, often used by storyboards even when not directly creating multiple localizations.

See this StackOverflow post for details: http://stackoverflow.com/questions/27222001/cfbundle-runtime-error-what-does-this-mean

So I'd recommend you diff your project file to see where changes may have happened.
",jpsim,yasirmturk
1645,2015-03-16 23:38:24,"After speaking with @alazier and @tgoyne, I'll be updating this so that we ship 2 prebuilt dynamic iOS frameworks (release for device & simulator architectures). This will avoid having to ship `build.sh`, `Realm.xcodeproj` and the Objective-C source, just to build the Swift API.
",jpsim,tgoyne
1645,2015-03-17 06:45:46,"I've updated the packaging scripts to package RealmSwift and the swift-next examples. The scripts do as much of the new process as possible, short of including the files in the zip, to minimize bit rot.

Here's the zip structure when the new packaging is enabled:



Please review /cc @tgoyne @alazier @segiddins.
",jpsim,tgoyne
1645,2015-03-17 06:45:46,"I've updated the packaging scripts to package RealmSwift and the swift-next examples. The scripts do as much of the new process as possible, short of including the files in the zip, to minimize bit rot.

Here's the zip structure when the new packaging is enabled:



Please review /cc @tgoyne @alazier @segiddins.
",jpsim,segiddins
1643,2015-03-17 00:03:53,"Hi @tspecht, whenever mutating an `RLMResults` while enumerating, you should use a `while` loop to only operate on the remaining objects. For example:



We have an issue open to freeze `RLMResults` during each runloop iteration which would simplify this pattern: #1179.
",jpsim,tspecht
1641,2015-03-16 18:42:50,"Hi @davejlong, we already have a couple of issues tracking this feature request, namely https://github.com/realm/realm-cocoa/issues/694, https://github.com/realm/realm-cocoa/pull/1272, & https://github.com/realm/realm-cocoa/issues/1063. In the meantime, you'll either have to pre-process your dictionaries before passing them into `createOrUpdateInRealm`, or otherwise look into using something like [Realm-JSON](https://github.com/matthewcheok/Realm-JSON) or [RestKit](https://github.com/RestKit/RestKit).
",segiddins,davejlong
1640,2015-03-16 17:42:28,"Thanks for these fixes, @natanrolnik! We'd be happy to merge this in once you've signed our [CLA](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla).
",jpsim,natanrolnik
1640,2015-03-16 17:49:19,"@jpsim done
",natanrolnik,jpsim
1635,2015-03-15 23:13:41,"Hi @voidref, you can't find `+[RLMObject objectForPrimaryKey:]` because you're looking at outdated documentation from ~8 months ago. Here are the [`objectForPrimaryKey:`](http://realm.io/docs/cocoa/0.91.1/api/Classes/RLMObject.html#//api/name/objectForPrimaryKey:) and [`objectInRealm:forPrimaryKey:`](http://realm.io/docs/cocoa/0.91.1/api/Classes/RLMObject.html#//api/name/objectInRealm:forPrimaryKey:) docs from the latest release (0.91.0).

We'll soon be removing old docs from search engine indexing and displaying a banner on older documentation so this should be less confusing in the near future.
",jpsim,voidref
1634,2015-03-16 16:50:59,"Hey @webmagnets a few good answers have been posted there
",yoshyosh,webmagnets
1633,2015-03-14 17:02:36,"@pronebird could you please share your model definition for `LocationRecord`?
",segiddins,pronebird
1633,2015-03-18 19:17:42,"@jefferybradley NSTimeInterval is double.
",pronebird,jefferybradley
1633,2015-03-24 22:52:33,"@pronebird and @jefferybradley, a project that reproduces the query issues you were experiencing would be very helpful in tracking down the issue. You can send a project to help@realm.io if you'd prefer to keep things private. Thanks!
",segiddins,jefferybradley
1633,2015-03-24 22:52:33,"@pronebird and @jefferybradley, a project that reproduces the query issues you were experiencing would be very helpful in tracking down the issue. You can send a project to help@realm.io if you'd prefer to keep things private. Thanks!
",segiddins,pronebird
1633,2015-03-25 10:01:55,"@segiddins here you go https://github.com/pronebird/RealmDoubleBug/blob/master/RealmDoubleBug/ViewController.m#L25

Couple of observations:
1. FLOAT fields work
2. Wrapping doubles in `NSNumber` and using `%@` instead of `%f` in predicate format helps to resolve the issue.

I've tested everything on iOS 8.2 simulator / iPhone 5.
",pronebird,segiddins
1633,2015-03-25 21:22:25,"@jpsim thanks again. 
",pronebird,jpsim
1630,2015-03-13 21:55:16,"@alazier I think I fixed the CI errors on the examples, please take a look at my changes
",segiddins,alazier
1626,2015-03-13 08:11:51,"@jpsim Thanks JP! :)
",TimOliver,jpsim
1625,2015-04-17 01:11:36,"@anlaital sorry for the late reply, no ETA on this just yet.

You're welcome to take a look at the current implementation of the LLDB script (https://github.com/realm/realm-cocoa/blob/master/plugin/rlm_lldb.py) to see if there's anything that could be changed to work around this issue in there. I believe it's possible to do so in there.

However, it's likely that a proper fix would involve making some changes to our signal handler, which is in our closed source core, so someone from our team will have to look into that.
",jpsim,anlaital
1625,2015-05-08 04:23:51,"@bdash We need to update [the relevant docs section](http://realm.io/docs/swift/latest/#debugging-encrypted-realms) in light of your findings. Can you submit a PR to the docs?
",timanglade,bdash
1624,2015-03-13 22:01:52,"@alazier could you explain what the problem is?
",segiddins,alazier
1621,2015-03-12 23:36:06,"Hi @yoshyosh 

Yes! 

User.m



It's very rare because no exception occurs, but execution stops after the ""addOrUpdateObject:""
I updated to the last version of Realm and problem persists
",mhergon,yoshyosh
1621,2015-03-13 23:16:52,"Hi @yoshyosh 

(Mini) Project sent with subject: ""transactionWithBlock: never ends #1621""

Thanks!
",mhergon,yoshyosh
1621,2015-03-14 08:54:04,"@yoshyosh 

I tried this:



but it doesn't work...

`FACEBOOK_ID` and `USER_NAME` ==  ""facebookID"" and ""userName"" strings

`The default values are needed when you have all the properties defined on your model because none of them can be nil when creating your object.`

Ok, thanks! I left the ""transactionWithBlock:"" working for more than 10 minutes and nothing happens ... probably never get to complete for something in particular
",mhergon,yoshyosh
1621,2015-03-16 17:33:15,"Hi @mhergon sorry to still see this causing issues. Focusing on the existing user example, I was able to get this error `Terminating app due to uncaught exception 'RLMException', reason: 'Primary key can't be changed after an object is inserted.'` You can't set the primary key again if a user already exists, you will need to add some logic to avoid this. If this is indeed the issue, Realm shouldn't hang in the transaction, it should throw this exception.

If you could send the project privately to help@realm.io, this will help greatly in debugging the issue further. Let me know if the solution recommended above works, even if it does a project would be very helpful to find out why the transaction hangs.
",yoshyosh,mhergon
1621,2015-03-17 12:59:39,"**Finally, this code works...**



@yoshyosh I will try to export part of the project to test it. I can't send you the whole project, sorry...
",mhergon,yoshyosh
1621,2015-03-17 17:03:52,"@mhergon Can you try checking exception breakpoints in your xcode project so xcode will throw when any exception occurs?
",yoshyosh,mhergon
1621,2015-03-17 17:29:32,"@yoshyosh Yes, I'm using parse and breakpoints are enabled 
",mhergon,yoshyosh
1616,2015-03-16 18:35:53,"@alazier could you take another look?
",segiddins,alazier
1615,2015-05-24 23:35:00,"@jpsim can you please show here some working example with custom initializer? I'm trying to build it and init() seem not enough.

`12: 7: fatal error: use of unimplemented initializer 'init(realm:schema:)'`
",krzyzanowskim,jpsim
1615,2015-05-26 00:01:47,"@jpsim  fatal error: use of unimplemented initializer 'init(realm:schema:)' for class 'MyModel'

the full code must override `init()` and `init(realm: RLMRealm, schema: RLMObjectSchema)` to work.


",krzyzanowskim,jpsim
1615,2015-05-26 00:14:26,"@jpsim my fault. 
",krzyzanowskim,jpsim
1615,2015-05-26 00:19:46,"@krzyzanowskim don't worry about it, we understand the expectation is for this to _just work_, and we'll continue to do our best to reduce the number of ""rough edges"" like these.
",jpsim,krzyzanowskim
1614,2015-06-10 21:59:38,"@tgoyne Ok thanks!
",bryan1anderson,tgoyne
1613,2016-08-23 02:09:57,"It's not clear to me why this is necessary. Could you elaborate @segiddins?
",JadenGeller,segiddins
1613,2016-08-23 02:10:50,"@JadenGeller it appears I did this in https://github.com/realm/realm-cocoa/pull/1631
",segiddins,JadenGeller
1610,2015-03-12 17:12:02,"Hi @mhergon, the equivalent in Realm is [`-[RLMRealm transactionWithBlock:]`](http://realm.io/docs/cocoa/api/Classes/RLMRealm.html#//api/name/transactionWithBlock:).

Since both your MagicalRecord example and Realm's equivalent run in the current thread, the completion block is a bit redundant because it's equivalent to adding code immediately after the call to this method.
",jpsim,mhergon
1610,2015-03-12 19:50:39,"@jpsim Thanks thanks thanks! 
",mhergon,jpsim
1610,2015-05-28 07:30:16,"@wgywgy Yes, it's a block!
",mhergon,wgywgy
1606,2015-03-12 15:29:49,"This is ready for review @jpsim @segiddins @tgoyne 
",alazier,jpsim
1606,2015-03-12 23:36:08,"@alazier want me to rebase this?
",segiddins,alazier
1605,2015-03-11 22:02:13,"@kishikawakatsumi what version of Realm is this with?
",segiddins,kishikawakatsumi
1600,2015-03-25 20:44:48,"@alazier what else needs to be done here? Is #1616 enough?
",jpsim,alazier
1597,2015-03-13 17:25:34,"Hi @vittoriom we do have plans to add that down the line. I'm helping with the new browser and would very much like that ability as well :). There is no timeline on when such a thing would be added.

I think your best bet for right now will be to do the mini migrations
",yoshyosh,vittoriom
1595,2015-03-13 00:36:58,"Thanks for the feature request, @l4u. We'll update this issue once we've updated our release scripts to do this.
",jpsim,l4u
1593,2015-03-12 22:19:36,"@alazier done
",segiddins,alazier
1592,2015-03-10 23:30:21,"@jpsim changelog added
",segiddins,jpsim
1590,2015-03-10 21:08:22,"@tgoyne it doesn't matter until we make the dynamic api public. At that point if a user change the primary key we need to know whether the property should still be indexed or not. Right now I don't think there is not a scenario where this can occur. 

I'm fine with the change of populating the indexed property for dynamic schema so :+1: 
",alazier,tgoyne
1590,2015-03-10 21:59:53,"> I don't think it makes sense to worry about any of this right now as there are clearly higher priorities at the moment.

I really just needed this because I had to use the dynamic API to help debug a support issue. I'll address @tgoyne's point about adding a test for `isEqualToProperty:` and then hopefully we can get this in.
",jpsim,tgoyne
1590,2015-03-10 22:03:03,"That's fair enough. I'm trying to get all of the other swift stuff rebased/merged so don't have the time to debate this now. I'm fine with the current pr - isEqualToProperty isn't used internally so I'm not too worried about it, but @tgoyne is probably correct that it should be tested - we could also just abandon that change as well for the time being if it a lot of effort.
",alazier,tgoyne
1590,2015-03-10 22:31:29,"`isEqualToProperty:` now has some tests. I could spend more time covering more cases, but that doesn't seem worthwhile. I could keep this PR open and add more tests later if you prefer. @tgoyne @alazier 
",jpsim,alazier
1590,2015-03-10 22:31:29,"`isEqualToProperty:` now has some tests. I could spend more time covering more cases, but that doesn't seem worthwhile. I could keep this PR open and add more tests later if you prefer. @tgoyne @alazier 
",jpsim,tgoyne
1589,2015-03-25 20:58:01,"We'll be updating our docs to make it clearer how realm files should be deleted.

Please let us know if you run into any other issues, @issue2k.
",jpsim,issue2k
1589,2015-03-26 07:00:53,"@jpsim thanks much cannot report any additional problems, we are using 0.91.1 within our official release about 2 weeks now, no problems so far.
",issue2k,jpsim
1589,2016-01-05 17:46:49,"@oonoo could you please file a new issue along with more information following the guidelines [here](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#filing-issues)? Thanks!
",jpsim,oonoo
1584,2015-04-04 18:00:22,"A few comments:

`deleteBeforeOpening` and `deleteIfMigrationNeeded` are probably coming from the Java API. We havn't yet discussed whether they should be included or not. They are just part of my initial brainstorming. I can see why `deleteBeforeOpening` could be replaced with in-memory Realms, we just havn't implemented that yet in Java. 

`deleteIfMigrationNeeded` is a lot better and shorter for a lot of use cases where you don't want to bother with migrations. Forcing people to add a migration block and then call a method for this functionality doesn't seem very easy to me.

With regard to code length, I had the same thoughts as @segiddins about the brevity of unit tests. One just has to remember that unit tests are completely different beast than actually app code. In app code you would either set a default configuration or point to a global variabel holding the configuration, as you have very few Realm configurations there, but they are used repeatedly.

Unit tests might have a lot of different configurations, and I found it a lot easier to either setup a default configuration in the unit test setup method or use a Factory class with almost the same API as the old constructors.
",cmelchior,segiddins
1584,2015-05-05 18:04:20,"We just had a quick chat (@tgoyne @segiddins @bdash and I) and determined that to avoid multi-process race conditions, we should add a `deleteIfMigrationNeeded` to RLMConfiguration. /fyi @cmelchior 
",jpsim,cmelchior
1584,2015-05-05 18:04:20,"We just had a quick chat (@tgoyne @segiddins @bdash and I) and determined that to avoid multi-process race conditions, we should add a `deleteIfMigrationNeeded` to RLMConfiguration. /fyi @cmelchior 
",jpsim,segiddins
1584,2015-05-19 07:59:28,"@segiddins @jpsim @bdash  How do you plan to support schemaVersion/MigrationBlock?

Currently on the Java side we have two separate methods for this:
- `RealmConfiguration.schemaVersion(42)`
- `RealmConfiguration.migration(new MyCustomMigration())`

It might make sense to combine these as having a version above 0 makes very little sense without a migration block at the same time. Something along the lines of
- `RealmConfiguration.schemaVersion(42, new MyMigrationBlock())`

Counter to that is `deleteIfMigrationNeeded` in which case having a migration block doesn't make much sense.

Our current behaviour is this: 

1) If only schemaVersion is set we make a no-op migration behind the scenes that try to upgrade the version number. Schema is validated afterwards and throw an exception if there is mismatch.

2) If newSchemaVersion > currentSchemaVersion and a migration block is set. This migration will be called when first opening the Realm. We also have a method on the Realm for manually triggering this migration. Useful if you want to upgrade on a background thread: `Realm.migrateRealm(RealmConfiguration)`

3) Setting a migration block without a schemaVersion is a no-op, ie. migration code is never called. We might want to log a warning or throw an exception for this.

4) Setting a newSchemaVersion < currentSchemaVersion will throw an exception when opening the Realm.

5) Setting newSchemaVersion == currentSchemaVersion and a schema mismatch is detected will throw an exception when opening the Realm.
",cmelchior,jpsim
1584,2015-05-19 07:59:28,"@segiddins @jpsim @bdash  How do you plan to support schemaVersion/MigrationBlock?

Currently on the Java side we have two separate methods for this:
- `RealmConfiguration.schemaVersion(42)`
- `RealmConfiguration.migration(new MyCustomMigration())`

It might make sense to combine these as having a version above 0 makes very little sense without a migration block at the same time. Something along the lines of
- `RealmConfiguration.schemaVersion(42, new MyMigrationBlock())`

Counter to that is `deleteIfMigrationNeeded` in which case having a migration block doesn't make much sense.

Our current behaviour is this: 

1) If only schemaVersion is set we make a no-op migration behind the scenes that try to upgrade the version number. Schema is validated afterwards and throw an exception if there is mismatch.

2) If newSchemaVersion > currentSchemaVersion and a migration block is set. This migration will be called when first opening the Realm. We also have a method on the Realm for manually triggering this migration. Useful if you want to upgrade on a background thread: `Realm.migrateRealm(RealmConfiguration)`

3) Setting a migration block without a schemaVersion is a no-op, ie. migration code is never called. We might want to log a warning or throw an exception for this.

4) Setting a newSchemaVersion < currentSchemaVersion will throw an exception when opening the Realm.

5) Setting newSchemaVersion == currentSchemaVersion and a schema mismatch is detected will throw an exception when opening the Realm.
",cmelchior,segiddins
1582,2015-03-09 16:55:49,"Hi @voidref, what version of the realm browser are you using? Additionally, could you please share the assertion failure that's accompanying the crash?
",segiddins,voidref
1582,2015-03-09 18:52:53,"Realm Browser Version 0.90.6 (0.90.6)

I am not sure what you mean by 'share the assertion failure', but here's the metadata about the crash



@segiddins Would you like a copy of the db?
",voidref,segiddins
1582,2015-03-09 19:09:07,"@voidref is there any chance that you have code that can reproduce the creation of the corrupted realm? If not, a copy of the realm file might prove helpful. Feel free to send any code or realm files confidentially to help@realm.io. Thanks!
",segiddins,voidref
1582,2015-03-09 19:30:17,"@segiddins the realm creation is dead simple, and was working until my machine freaked out and forced a reboot.

I'm sending more detail to the email address attention to you, but I am sure this is the result of FS corruption, it's just that you may be able to recover from it ... maybe.
",voidref,segiddins
1582,2015-03-11 22:52:35,"Thanks for all the info you posted here and in your email, @voidref! We're looking into what may have caused this and will update you as soon as we have something to report.
",jpsim,voidref
1582,2015-03-30 18:25:08,"Just following up on this request for an Xcode project that could help use reproduce this issue, or the corrupt realm files, @voidref and @IGZjuantrias.
",jpsim,voidref
1582,2015-03-30 19:18:04,"@jpsim I sent off a zip to the help address attn @segiddins 21 days ago.
",voidref,jpsim
1582,2015-03-30 19:18:04,"@jpsim I sent off a zip to the help address attn @segiddins 21 days ago.
",voidref,segiddins
1582,2015-03-30 19:22:25,"Ah yes, my mistake @voidref. We've been working on that case.

Our support tooling doesn't link emails with GH issues very well at the moment so this was still marked as needing a follow up.
",jpsim,voidref
1582,2015-03-30 19:24:06,"No worries @jpsim, better to unnecessarily follow up than lose something!
",voidref,jpsim
1582,2015-06-12 15:12:55,"Thanks for the update @jpsim . Do you happen to know what this means in term of release timeline? When will you publish a new version of Realm that has this fix?
",zpapp,jpsim
1582,2015-06-13 03:16:43,"@jpsim thank you!
",zpapp,jpsim
1582,2015-08-31 16:18:47,"@ncperry this assertion gets triggered when the logical size on disk of the realm file is larger than the size expected by the file (this size is written as part of the file structure). As mentioned in my last comment, we've taken measures to ensure this never happens as of 0.93.2, but since you've seen this in 0.94.1, I'd love to know if the file was ever written to using a version of Realm prior to 0.93.2.

If an older version of Realm caused file corruption, that file will stay corrupted even accessed by newer versions of Realm.

So if the file was corrupted while being accessed by Realm < 0.93.2, we're aware of that issue and have resolved it. If the initial corruption happened with a version of Realm > 0.93.2, this is the first time we've heard of the issue resurfacing and would love to see code that can reproduce the issue so we can troubleshoot further.

In any case, the only way to get data back from the corrupted file will be to send it to us at help@realm.io for recovery.
",jpsim,ncperry
1581,2015-03-07 02:42:42,"> Could you add corresponding tests to the object scheme initialization tests on the swift branch?

@segiddins Do you mean the tests in #1518? How would you suggest I test this given that the exception is thrown at initialize time?
",jpsim,segiddins
1580,2016-06-23 14:54:58,"@Jowyer the existing lazy loading behavior does that though.
",jpsim,Jowyer
1572,2015-03-06 00:56:10,"Thanks for the feature request, @anbarasu0504. We have a number of high priority features we'd like to build before diving into something like this, but it would certainly be nice to have at some point.

If you, or anyone, feels like contributing to this, please start with a design proposal in this issue demonstrating how the feature should work, which API it should expose and how to deal with potential pitfalls:
1. What kind of operations and/or models can be undone?
2. Should undos be grouped by transaction? Or by some other mechanism? Or not grouped at all?
3. What happens in a multithreaded or multiprocess scenario?
4. How can we efficiently compact the transaction log to only preserve history which can be undone while discarding the irrelevant aspects?
",jpsim,anbarasu0504
1572,2016-02-25 08:01:21,"@jpsim any chance you might escalate this?
",bkerensa,jpsim
1572,2017-02-15 01:53:59,"@andrewebling it's fairly difficult to build undo in a general-purpose API, but relatively easy to build it in a domain-specific setting, so I'd encourage you to build undo functionality on top of Realm yourself for your specific app's needs.

For example, instead of storing values, store operations (insert string, remove string, etc.). You can then compute the final value by applying all these operations. You could also trim the history as you see fit on a recurring basis. You could then more easily track what things you want to ""roll back"", what points in time make sense as discrete ""checkpoints"", etc.",jpsim,andrewebling
1571,2015-03-09 17:30:29,"Hi @kronik, you're right that you'll have to set the `NSFileProtection` file attributes for the lock and log files if you're writing to the realm in the background.



We'll be updating our `NSFileProtection` related samples to reflect this as soon as possible.
",jpsim,kronik
1566,2015-03-09 17:32:39,"Don't worry about it @issue2k I'm happy to hear you got it working!
",yoshyosh,issue2k
1564,2015-03-05 01:24:37,"Hi @hangyc, running our entire unit test suite with Guard Malloc enabled doesn't print any such message. Would it be possible for you to share code that reproduces this large allocation attempt? Ideally an Xcode project or a unit test in here is even better: https://github.com/realm/realm-cocoa/tree/master/Realm/Tests

Thanks!
",jpsim,hangyc
1564,2015-03-12 23:50:42,"Just following up on this request for an Xcode project that could help use reproduce this issue, @hangyc.
",jpsim,hangyc
1562,2015-03-03 00:18:23,"Awesome, @tgoyne. You get my :+1:.
",jpsim,tgoyne
1561,2015-03-03 22:23:02,"@yoshyosh thanks for your response. Regarding the iterator, yes it is always the last object being skipped. Shortly before this code executes, a job in `realmqueue` adds a new PSTChatMsg in Realm. It might be the case that the code executes before this job finishes, but again, the last object wouldn't show up in `chatMessages.lastObject()` right? 
",attheodo,yoshyosh
1561,2015-03-04 11:09:28,"@yoshyosh please check this out https://gist.github.com/attheodo/dcb199dc2237f63cc19c

The weird thing is that even `unreadMessages.count` reports `2`
",attheodo,yoshyosh
1561,2015-03-04 23:52:26,"Hi @attheodo, one of my favorite Realm features is that everything is always up to date. But, it can hit you by surprise sometimes if you forget about it.

So what's happening here is you're changing the set of objects in the `unreadMessages` RLMResults by changing its `hasBeenRead` property. So as you're iterating over the results, they change and some of them end up being skipped.

So a different way to mark all the objects as read is to use a while loop like this:



Once we have #1536 completed, performing bulk updates will be much easier and faster: `unreadMessages.setValue(timetokenAtRead, forKey: ""hasBeenRead"")`.

Please don't hesitate to ask us if there's anything else we can help you with.
",jpsim,attheodo
1558,2015-03-03 01:01:29,"Thanks @danielpovlsen!
",jpsim,danielpovlsen
1557,2015-02-26 23:24:56,"@dbainbridge as stated in the podspec and the Realm.xcodeproj, the minimum OS X version Realm is currently compatible with is OS X 10.9.
",segiddins,dbainbridge
1553,2015-02-26 18:27:40,"@tspecht, thanks so much for sharing the stack trace with us. Any reproducible projects will help us a lot. to track down why this is happening. Feel free to send to help@realm.io to keep things private.
",segiddins,tspecht
1553,2015-03-24 22:45:48,"@tspecht, just following up on my earlier request for a reproducible Xcode project? If the issue is fixed in the most recent release of Realm, feel free to close the issue.
",segiddins,tspecht
1552,2015-02-26 19:05:14,"Hi @docterd, my guess is that you're encountering the same base issue that's discussed in https://github.com/realm/realm-cocoa/issues/1260 -- that is, you need to mark via NSFileProtection that you want the file to be writeable when the app is in the background for devices with a passcode.
",segiddins,docterd
1551,2015-03-02 23:18:08,"This is super great, @tgoyne. :+1: 
",jpsim,tgoyne
1550,2015-02-25 22:00:58,"@yoshyosh that cheat sheet mentions support for ""Keypath collection queries"", on the other hand there's this open issue https://github.com/realm/realm-cocoa/issues/1490. Is that something that will be supported in the future (work in progress) or am I missing something? In my app I want to have the following predicate: 
`[Item objectsWhere:@""categories.@count == 0""];` but Realm asserts that `@count` is not supported.
",romaonthego,yoshyosh
1550,2015-02-25 22:30:03,"@yoshyosh I see, thanks! I ended up doing this: 


",romaonthego,yoshyosh
1550,2015-02-27 17:48:32,"Hi @ceeK just checking in, did this solve your issue?
",yoshyosh,ceeK
1550,2015-03-01 19:40:45,"@ceeK's original report is correct, `%@ IN types` should work since it yields a logically equivalent predicate to `ANY types = %@` and `types CONTAINS %@`.


",jpsim,ceeK
1549,2015-02-25 19:32:56,"@yoshyosh it's on master, but not yet released.
",segiddins,yoshyosh
1548,2015-03-04 21:57:22,"I've added tests and a changelog entry for this. Anything else? /cc @segiddins @tgoyne
",jpsim,segiddins
1544,2015-02-25 18:15:42,"@tgoyne thanks, fixed
",segiddins,tgoyne
1541,2015-04-01 09:36:48,"@romaonthego that's interesting - I had a similar problem in my app, where I had nested call to write transactions and it ended up crashing. Did you manager to use your solution even with the fact that `inWriteTransaction` is private?
",natanrolnik,romaonthego
1541,2015-04-02 05:25:39,"@natanrolnik since you have the source code you can make it public for your class, like this:


",romaonthego,natanrolnik
1537,2015-02-24 23:02:32,"Thank you @isaacroldan, but as Swift 1.2 is still unreleased, I think we're best off sticking with the production version.
",segiddins,isaacroldan
1536,2015-02-23 19:52:16,"@tgoyne it should, as `-[NSObject valueForKeyPath:]` just recursively decomposes the key path and calls `valueForKey` internally, but I'll add tests
",segiddins,tgoyne
1532,2015-02-20 18:06:59,"@Fab1n, the only place we make that network request is at https://github.com/realm/realm-cocoa/blob/master/Realm/RLMUpdateChecker.mm -- as Joe said, we're just checking to see whether an updated version of Realm is available.
",segiddins,Fab1n
1528,2015-02-19 19:21:07,"@MattKiazyk would it be possible for you to share your model definitions? No matter what, though, you'll need to call `enumerate` for all of the subclasses, since in Realm, each subclass is its own, unrelated entity.
",segiddins,MattKiazyk
1528,2015-02-24 22:14:33,"@MattKiazyk is it possible that you just need to set the schema version to a higher number?
",segiddins,MattKiazyk
1528,2015-03-03 01:42:25,"Hi @MattKiazyk, have you made any progress on this?

I think @segiddins is right in thinking that you're likely not setting an appropriate schema value.

Here's some code I used to attempt to reproduce the behavior you're seeing:

**First Run: Schema 0**



**Second Run: Schema 1**



Please reopen this issue if we've misunderstood the problem you're hitting. We'd greatly appreciate if you could send us code to reproduce the behavior if that's the case.
",jpsim,MattKiazyk
1528,2015-03-03 01:42:25,"Hi @MattKiazyk, have you made any progress on this?

I think @segiddins is right in thinking that you're likely not setting an appropriate schema value.

Here's some code I used to attempt to reproduce the behavior you're seeing:

**First Run: Schema 0**



**Second Run: Schema 1**



Please reopen this issue if we've misunderstood the problem you're hitting. We'd greatly appreciate if you could send us code to reproduce the behavior if that's the case.
",jpsim,segiddins
1528,2015-03-03 14:58:44,"Hi @jpsim sorry for not getting back to you. Tried a quick project to see if I could duplicate and it was working fine. Even on the migration setting just the parent object seemed to be ok.  Thanks for your feedback.
",MattKiazyk,jpsim
1527,2015-02-19 19:11:31,"@TofPlay, we're sketching out building some APIs that would make that sort of object mapping a lot easier -- for example, https://github.com/realm/realm-cocoa/issues/1063, https://github.com/realm/realm-cocoa/issues/694, and https://github.com/realm/realm-cocoa/pull/1272. In short, it's on our radar as something we need to address, but in the meantime, you'll need to remove those null values yourself before passing them into Realm (and also perhaps take advantage of Realm's support for `defaultValues`).
",segiddins,TofPlay
1527,2015-02-21 21:50:25,"@segiddins I talked with my boss and without a real support to integrate json we will move towards an alternative. Tell us when you have a more mature version we will reassess Realm.
",TofPlay,segiddins
1527,2015-02-22 08:32:47,"I use Realm extensively in our application currently and working around this limitation is not that big of a hassle. You can just wrap values that are optional in the JSON (i.e. null or missing) in a custom `RLMObject` subtype, such as `OptionalDate`, which encapsulates the `NSDate` value but can actually be null in Realm as it inherits from `RLMObject`.

This doesn't really add any overhead to speak of and is a reasonable solution for the time being. I would strongly encourage @TofPlay not to stop using Realm just because of this. This is just my opinion, but using Realm has saved me insane amounts of time and headache.
",anlaital,TofPlay
1525,2015-02-19 19:29:29,"@jimjeffers could you possibly share your `ItemPhoto` model definition? I have a hunch about what may be going on here.
",segiddins,jimjeffers
1525,2015-02-24 22:46:26,"@jimjeffers would it be possible for you to send over your Realm file or a more complete reproduction case? (You can email to help@realm.io if you'd prefer to keep things private). Thanks!
",segiddins,jimjeffers
1525,2015-02-24 23:58:19,"@segiddins Thanks for following up on this. I actually solved the problem. I'm still new to Realm so I was using it improperly. I am basically using realm to cache objects from our API so all of this data ephemeral. My algorithm was destroying the item and rebuilding a new one from the cache before I deleted the child photo objects. So the child objects connected to the item persisted but the local item did not have references to them in its child array. Ah the joys of cache management...
",jimjeffers,segiddins
1522,2015-02-18 23:42:16,"@jimjeffers is it possible you're trying to use the Realm from multiple processes? Could you possibly share the backtrace that happens when the main thread hangs?
",segiddins,jimjeffers
1521,2015-03-09 15:25:13,"@jpsim I find this kind of useful, I've tried to add the same object twice and now I have duplicate relationships, as the way to use 1:n relationships is with RLMArray, this seems pretty logic if you are trying to avoid adding the same object again and having duplicate relationships, `- [RLMArray addObject:]` does not take care of this
",nakp,jpsim
1521,2015-03-09 17:44:38,"@nakp so you'd like a shortcut method for this?



I'm not convinced adding such a simple convenience method in Realm is worth the impact on our interface.
",jpsim,nakp
1517,2015-03-03 02:08:59,"Hi @ricardopereira, please follow these instructions to use Realm in a CocoaPods Swift project:
1. Install CocoaPods 0.36.0.rc.1 or later (`[sudo] gem install cocoapods --pre`).
2. In your Podfile, add `use_frameworks!` and `pod 'Realm'` to your app target, and `pod 'Realm/Headers'` to your test target.
3. From the command line, run `pod install`.
4. Use the `.xcworkspace` file generated by CocoaPods to work on your project!
5. Download the [latest release of Realm](http://static.realm.io/downloads/cocoa/latest) and extract the zip.
6. Drag the file at `Swift/RLMSupport.swift` into the File Navigator of your
   Xcode project, checking the **Copy items if needed** checkbox.

We'll be updating our installation instructions on http://realm.io shortly.
",jpsim,ricardopereira
1517,2015-08-09 23:52:43,"@jpsim i got an issue when i run my project on iphone 6 and 6+.  It works fine on other devices. Why do i get this error and how can I fix it? Thanks
",neon0619,jpsim
1517,2015-08-11 01:24:08,"@neon0619 please open a new GitHub issue along with steps that we can follow to reproduce the issue you're seeing. This happens when the linker can't find the symbols referred to by the headers/interface provided by the framework.
",jpsim,neon0619
1516,2015-02-21 06:21:06,"@tgoyne great thanks, we will check that asap.
",issue2k,tgoyne
1516,2015-02-27 09:29:57,"@tgoyne this still happens a lot on release builds where encryption is enabled, making it kind of impossible to ship anything with encryption enabled. No crashes are observed if encryption is not used.

I have the exact same call stacks as @issue2k when the crashes are reported. I am using the 0.90.6 Realm and the crashes occur on all iPhones and on both iOS 7 and iOS 8.
",anlaital,tgoyne
1516,2015-02-27 09:29:57,"@tgoyne this still happens a lot on release builds where encryption is enabled, making it kind of impossible to ship anything with encryption enabled. No crashes are observed if encryption is not used.

I have the exact same call stacks as @issue2k when the crashes are reported. I am using the 0.90.6 Realm and the crashes occur on all iPhones and on both iOS 7 and iOS 8.
",anlaital,issue2k
1516,2015-02-27 10:16:18,"Yes, what @anlaital says is true.
",dismory,anlaital
1516,2015-02-27 10:19:02,"@anlaital @dismory i sent example code to help@realm.io so that they are able to reproduce the issue maybe you can even try to do that.
",issue2k,dismory
1516,2015-02-27 10:19:02,"@anlaital @dismory i sent example code to help@realm.io so that they are able to reproduce the issue maybe you can even try to do that.
",issue2k,anlaital
1516,2015-03-02 19:23:07,"Replacing Pods/Realm/core/libtightdb-ios.a with http://static.realm.io/downloads/temp/realm-core-encryption-crash-fix.tar.gz fixes the crash in the repro crash @issue2k sent me. Note that you need to be using Realm 0.90.6 to have the right headers to go with that library.
",tgoyne,issue2k
1516,2015-03-04 04:39:05,"I haven't had any crash reports coming in from the pilot with the fix, so most likely whatever you did fixed the issues we've been having with encrypted Realm. @tgoyne will this be included in your next release and if so, when will that release happen?

Thank you for the fixes for these crashes, since encryption is kind of a priority for us. :+1: 
",anlaital,tgoyne
1516,2015-03-06 06:49:27,"Even for us this solves the problem. We tested the app sind tuesday with > 100 testers now and got not a single crash anymore.

Thanks a lot @tgoyne for fixing this!
",issue2k,tgoyne
1515,2015-02-19 22:33:46,"@alazier done
",segiddins,alazier
1515,2015-02-26 19:25:14,"@alazier think I'm good to merge this?
",segiddins,alazier
1514,2015-02-17 21:49:48,"@webmagnets what version of the Realm Browser are you running? (`Realm Browser` -> `About Realm Browser`)
",segiddins,webmagnets
1514,2015-02-17 22:00:39,"0.90.5

## 

Nathan Cain
501-463-6336

www.jw.org

On Tue, Feb 17, 2015 at 3:49 PM, Samuel E. Giddins
notifications@github.com wrote:

> ## @webmagnets what version of the Realm Browser are you running? (`Realm Browser` -> `About Realm Browser`)
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/issues/1514#issuecomment-74761648
",webmagnets,webmagnets
1511,2015-02-18 18:11:34,"Hey @AnarH93 just tested this out and it also worked . Can you send a project privately to help@realm.io?

You can also share (in this thread) the exact code that you omitted using comments here:


",yoshyosh,AnarH93
1510,2015-03-03 23:06:24,"@segiddins ping us again once you've addressed the concerns raised here.
",jpsim,segiddins
1508,2015-02-16 19:22:12,"Hi @AnthonyMDev, we totally agree it would be great to represent backlinks as `RLMResults`, but unfortunately there's some infrastructure we need to get into place for that to be possible.
",segiddins,AnthonyMDev
1508,2015-02-16 19:24:13,"@AnthonyMDev yup! As soon as we have support in Core for this, we'll change backlinks to return an `RLMResults`.
",segiddins,AnthonyMDev
1506,2015-02-16 19:18:39,"@yasirmturk the issue with require a call like that is that it's counter-intuitive and makes the API harder to use and more confusing to read code that uses Realm. We've never really seen anyone report an issue with the tables that are created, even if they are not used. Do you have a particular reason why you think the ability to register classes would be necessary?
",segiddins,yasirmturk
1506,2015-02-17 00:13:44,"@yasirmturk you will be able to do what you are asking once we open up support for our dynamic interface. With the dynamic interface you can open a Realm providing a custom schema, which is basically just a list of the objects/properties stored in the Realm - so eventually you will be able to specify what objects each Realm should support each time it is opened. Not sure yet when we will get around to making this functionality public though.
",alazier,yasirmturk
1506,2015-02-17 05:57:11,"@segiddins an overload for advanced users never hurts the beginners using intuitive solution.. another suggestion is to use the method which is specifying migration rules.. 
`[RLMRealm setSchemaVersion:1
                forRealmAtPath:realmPATH
                 registerClasses:@[[Employee class], [Department class], ...]
            withMigrationBlock:^(RLMMigration *migration, NSUInteger oldSchemaVersion) {                
            }];`
i think that is simpler than the other solutions @alazier @yoshyosh .. @astigsen gave a good idea too..

@segiddins it is a real mess even if you have 3 realms each having 10 tables and you end up looking at 2 DBs with 30 tables each
",yasirmturk,yoshyosh
1506,2015-02-17 05:57:11,"@segiddins an overload for advanced users never hurts the beginners using intuitive solution.. another suggestion is to use the method which is specifying migration rules.. 
`[RLMRealm setSchemaVersion:1
                forRealmAtPath:realmPATH
                 registerClasses:@[[Employee class], [Department class], ...]
            withMigrationBlock:^(RLMMigration *migration, NSUInteger oldSchemaVersion) {                
            }];`
i think that is simpler than the other solutions @alazier @yoshyosh .. @astigsen gave a good idea too..

@segiddins it is a real mess even if you have 3 realms each having 10 tables and you end up looking at 2 DBs with 30 tables each
",yasirmturk,alazier
1506,2015-02-17 05:57:11,"@segiddins an overload for advanced users never hurts the beginners using intuitive solution.. another suggestion is to use the method which is specifying migration rules.. 
`[RLMRealm setSchemaVersion:1
                forRealmAtPath:realmPATH
                 registerClasses:@[[Employee class], [Department class], ...]
            withMigrationBlock:^(RLMMigration *migration, NSUInteger oldSchemaVersion) {                
            }];`
i think that is simpler than the other solutions @alazier @yoshyosh .. @astigsen gave a good idea too..

@segiddins it is a real mess even if you have 3 realms each having 10 tables and you end up looking at 2 DBs with 30 tables each
",yasirmturk,astigsen
1506,2015-02-17 05:57:11,"@segiddins an overload for advanced users never hurts the beginners using intuitive solution.. another suggestion is to use the method which is specifying migration rules.. 
`[RLMRealm setSchemaVersion:1
                forRealmAtPath:realmPATH
                 registerClasses:@[[Employee class], [Department class], ...]
            withMigrationBlock:^(RLMMigration *migration, NSUInteger oldSchemaVersion) {                
            }];`
i think that is simpler than the other solutions @alazier @yoshyosh .. @astigsen gave a good idea too..

@segiddins it is a real mess even if you have 3 realms each having 10 tables and you end up looking at 2 DBs with 30 tables each
",yasirmturk,segiddins
1505,2015-02-16 06:32:26,"@segiddins 
NSNotFound is a NSInteger

![2015-02-16 15 31 01](https://cloud.githubusercontent.com/assets/1756640/6207866/e421b71a-b5f0-11e4-848d-04624bd7e02d.png)

![2015-02-16 15 26 12](https://cloud.githubusercontent.com/assets/1756640/6207845/9661251a-b5f0-11e4-8e5e-bfa9ccae3005.png)
",yuuki1224,segiddins
1503,2015-02-16 06:11:55,"@eni9889, thanks for sharing the stack trace with us. We'd truly appreciate if you could share a reproducible case of this issue (if you manage to find one) so we have some sample code to debug with. It would help us a lot with regards to discovering this assertion failure. (You can send a project to us privately at help@realm.io if you'd prefer not to share it here on GitHub.)

Thanks for your help!
",segiddins,eni9889
1503,2015-03-24 22:31:36,"Just following up on this request for an Xcode project that could help use reproduce this issue, @eni9889.
",segiddins,eni9889
1503,2015-03-30 08:58:35,"@segiddins We're also getting crashes in release builds; we've been able to reproduce it here: https://github.com/nolanamy/realm-test. It doesn't seem to have any issues in the simulator, but crashes every time on at least iPhone 6 Plus. Tried 0.90.0, 0.90.5, 0.90.6, 0.91.1; all crash.
",nolanamy,segiddins
1503,2015-03-30 18:24:18,"We've managed to reproduce @nolanamy's crash, which is caused by a bug in how the `CFString` was autoreleased. The solution there is to use `NSString` instead.

Note that @eni9889's issue is separate from @nolanamy's, which we haven't been able to reproduce yet.

@eni9889 an Xcode project that could help use reproduce this issue would be greatly appreciated.
",jpsim,eni9889
1503,2015-03-30 18:24:18,"We've managed to reproduce @nolanamy's crash, which is caused by a bug in how the `CFString` was autoreleased. The solution there is to use `NSString` instead.

Note that @eni9889's issue is separate from @nolanamy's, which we haven't been able to reproduce yet.

@eni9889 an Xcode project that could help use reproduce this issue would be greatly appreciated.
",jpsim,nolanamy
1503,2015-04-29 20:22:48,"@eni9889 we're closing this as we were never able to reproduce the issue. If you see this again, please let us know and be sure to include as much information as possible for us to reproduce it and investigate.
",jpsim,eni9889
1501,2015-04-02 16:44:28,"+1 on this!

@kunalsood I created a category for RLMArray to have `removeObject:`. Basically, I get the index of this project, I check if the index isn't bigger than the RLMArray count, and then I delete the object with `removeObjectAtIndex:`. :)
",enricenrich,kunalsood
1501,2015-04-02 16:54:31,"@enricenrich Thanks mate! :-) I have done something similar (see my second questions at: https://groups.google.com/forum/#!topic/realm-cocoa/eGPMVdPppI8), I also have the need to check if an object already exists in a relationship before I add it, so another kind of hacked on `ks_addObject:` method in my category. RLMSet would hopefully rid me of this category.
",kunalsood,enricenrich
1499,2015-04-28 21:00:22,"@yoshyosh any update on this? Feel free to close.
",timanglade,yoshyosh
1498,2015-02-13 17:57:12,"I like that @astigsen, with the autocomplete it will be easy for people to recall
",yoshyosh,astigsen
1498,2015-02-13 19:03:36,"I like @astigsen's idea. I'm a huge fan of autocomplete and this would not cause me any issues since autocomplete remembers the methods you've used most recently. :+1:
",anlaital,astigsen
1497,2015-02-13 10:08:16,"@laiso さん
ご指摘くださり、ありがとうございます。すぐ修正いたしますね 🙇
",yuuki1224,laiso
1497,2015-02-15 04:07:04,"@laiso さん
修正、反映されました!
今後も日本語ドキュメントで何かお気付きな点等ございましたら、
お手数ですが、ご指摘のほどよろしくお願い致します 🙇
",yuuki1224,laiso
1497,2015-02-15 04:35:16,"Thanks @laiso!
",timanglade,laiso
1496,2015-02-13 02:51:41,"@segiddins  I am the one whom asked this question to @ghmlee . 
There are a few classes which have Word or List<Word> in the realm. I checked the count of values and it looked fine.
If one realm object has a Word and the object is getting removed from a realm, do I have to delete the Word object as well or the realm will take care of deleting the word object as CascadeType.Remove would do in JPA. 
",njovy,ghmlee
1496,2015-02-13 02:51:41,"@segiddins  I am the one whom asked this question to @ghmlee . 
There are a few classes which have Word or List<Word> in the realm. I checked the count of values and it looked fine.
If one realm object has a Word and the object is getting removed from a realm, do I have to delete the Word object as well or the realm will take care of deleting the word object as CascadeType.Remove would do in JPA. 
",njovy,segiddins
1496,2015-02-13 02:58:51,"Realm doesn't have cascading deletes, so removing the object from the RLMArray won't delete it entirely. 

-Samuel E. Giddins

On Feb 12, 2015, at 6:51 PM, Taehyun Park notifications@github.com wrote:

@segiddins I am the one whom asked this question to @ghmlee . 
There are a few classes which have Word or List in the realm. I checked the count of values and it looked fine.
If one realm object has a Word and the object is getting removed from a realm, do I have to delete the Word object as well or the realm will take care of deleting the word object as CascadeType.Remove would do in JPA.

—
Reply to this email directly or view it on GitHub.
",segiddins,ghmlee
1496,2015-02-13 02:58:51,"Realm doesn't have cascading deletes, so removing the object from the RLMArray won't delete it entirely. 

-Samuel E. Giddins

On Feb 12, 2015, at 6:51 PM, Taehyun Park notifications@github.com wrote:

@segiddins I am the one whom asked this question to @ghmlee . 
There are a few classes which have Word or List in the realm. I checked the count of values and it looked fine.
If one realm object has a Word and the object is getting removed from a realm, do I have to delete the Word object as well or the realm will take care of deleting the word object as CascadeType.Remove would do in JPA.

—
Reply to this email directly or view it on GitHub.
",segiddins,segiddins
1496,2015-02-13 04:06:52,"Thank you so much for the prompt reply. I am not sure if the cascading delete is doable in realm but it would be great if the feature is supported.
I will add some code to remove related realm objects upon deletion.
@ghmlee  I really appreciate raising a concern for me.
You can close this issue. 
",njovy,ghmlee
1496,2015-02-13 04:28:58,"@njovy we have an issue tracking adding cascading deletes, https://github.com/realm/realm-cocoa/issues/1186, so you'll see any updates on that front over there.
",segiddins,njovy
1495,2015-02-26 20:17:02,"@tgoyne changed the naming on `assertPositive`
",segiddins,tgoyne
1495,2015-03-03 22:40:00,"@segiddins please just rename to `throwForNegativeIndex(index: Int)` and let's be done with this. You get my :+1:.
",jpsim,segiddins
1493,2015-02-12 17:06:00,"@macdevnet can you share the code in question? It seems like you're casting something to the incorrect type.
",segiddins,macdevnet
1492,2015-02-12 18:32:22,"@AlDrago it's actually a bit unclear to me what you're asking -- neither `RLMArray` nor `RLMResults` can directly become invalidated -- they're valid as long as their `realm` is not `invalidated`, which will only happen if `invalidate` is called on that Realm. I hope that helps!
",segiddins,AlDrago
1492,2015-02-24 23:06:54,"@AlDrago I just want to make sure that my answer cleared things up for you?
",segiddins,AlDrago
1492,2015-03-04 22:36:40,"Hi @AlDrago, it seems your use case would benefit from having an `isInvalidated` property on `RLMArray`. I'll discuss with the team about adding that. We wouldn't add that to `RLMCollection` because `RLMResults` can never be invalid (unless the realm itself has been invalidated).

For the time being, I'd recommend you to store the `GithubIssue` in your `CommentsViewController` instead of the `comments` directly. That way, you could check `issue.isInvalidated`, while still being able to access the `comments` through `issue.comments`.
",jpsim,AlDrago
1491,2015-02-12 18:28:08,"@mhergon, you'll have to manually transform that `roles` array into either an array of dictionaries (in the form `""value"" : string`, or transform it to an array of single-element arrays. You might also want to take a look at something like [Realm-JSON](https://github.com/matthewcheok/Realm-JSON). Hope that helps!
",segiddins,mhergon
1491,2015-02-12 20:57:26,"@segiddins could you write me a tiny example?

Thanks!
",mhergon,segiddins
1488,2015-02-11 21:50:33,"@yoshyosh sad :( 
I wish to know hw to help you with it :) 
",dimazen,yoshyosh
1487,2015-02-11 22:09:43,"Hi @juhaelee did you include RLMSupport.swift?
",yoshyosh,juhaelee
1483,2015-02-10 19:33:23,"@BruceZCQ it actually looks like everything is being sorted properly, as `reqid` is an `NSString` property, and thus string comparison (rather than numeric comparison) is being used when sorting.
",segiddins,BruceZCQ
1478,2015-02-09 23:56:43,"I think thats very helpful @alazier 
",yoshyosh,alazier
1478,2015-02-10 01:09:23,"@alazier done
",segiddins,alazier
1477,2015-02-09 22:10:37,"@alazier any issue you can point to where that assertion is being hit?
",segiddins,alazier
1474,2015-02-10 15:56:52,"@tspecht is it possible that you have a different issue from @webmagnets 

Is it possible that you may have other initialization code that could run before calling setSchemaVersion? We just pushed a change to master which gives more debug information when seeing this issue #1478 . Would you mind trying out master to see if this sheds any light on the issue?
",alazier,tspecht
1474,2015-02-10 15:56:52,"@tspecht is it possible that you have a different issue from @webmagnets 

Is it possible that you may have other initialization code that could run before calling setSchemaVersion? We just pushed a change to master which gives more debug information when seeing this issue #1478 . Would you mind trying out master to see if this sheds any light on the issue?
",alazier,webmagnets
1474,2015-02-10 21:08:44,"I'll try with the changes tomorrow at some point and will get back to you, thanks for reopening it @alazier !
",tspecht,alazier
1474,2015-02-17 17:51:02,"Any word @tspecht ?
",alazier,tspecht
1474,2015-03-03 17:53:42,"Have you looked further into this @tspecht? @alazier's diagnosis seems right to me.
",jpsim,tspecht
1474,2015-03-03 17:53:42,"Have you looked further into this @tspecht? @alazier's diagnosis seems right to me.
",jpsim,alazier
1474,2015-03-31 17:57:35,"@EvilGeniusTechnologies what are the contents of your `setSchemaVersion:forRealmAtPath:withMigrationBlock:` call? What's the result of running [`+[RLMRealm schemaVersionAtPath:error:]`](https://realm.io/docs/cocoa/0.91.1/api/Classes/RLMRealm.html#//api/name/schemaVersionAtPath:error:)? Make sure to run that last call before opening your realm.
",jpsim,EvilGeniusTechnologies
1472,2015-02-09 18:40:01,"Hi @anlaital could you provide us with more code that leads up to this? If you could send a small reproducible project or the actual project privately to help@realm.io it will help us look into this. Thanks for your patience!
",yoshyosh,anlaital
1472,2015-02-12 06:31:31,"@tgoyne awesome, thanks a lot! :+1: 
",anlaital,tgoyne
1471,2015-02-08 20:53:20,"@LoganWright I cannot reproduce this with Realm v0.90.5. Can you share an example project that reproduces the issue? Thanks!
",segiddins,LoganWright
1471,2015-02-09 04:50:48,"@segiddins - Thanks for getting back to me, I'm enjoying the library so far!

 I posted my current version of the project to a repo <a href=""https://github.com/LoganWright/ShowTracker"">here</a>.

If you pull it, I marked my current changes to the Realm library with the tag `//: LoganWright` so you can do a project search to see what I did.

I believe the underlying problem is in `JSONMapping`, and the way it loads objects from JSON.  This causes the `property->_objectClassName` to be nil during introspection and it cascades into more problems throughout the process because it's never properly set.

There shouldn't be a problem from what I can see, and I'm stuck trying to get the two to play nicely.  The show tracker app is really a means to an end, I'm more interested in building a layer that meshes my mapping, w/ Alamofire and Realm to make easy Rest consumption and persistence.  The show tracker is just a means to this.  

If you have any suggestions I can make to my mapping class to help it play nicely, I'd love to get some of these issues figured out, or build a good workaround.

### Modeling:

All of my realm modeling is in `TVRageNetworking.swift`.  (Some of it looks strange, it's a very old api, so it has a lot of edge cases)

### Mapping:

You can see my mapping process in `JSONMapping.swift`.  My first root class is `LGCodable` which subclasses `RLMObject`.

### Reproduce:

If you remove my changes here:



If you remove these changes, you'll see the base problem which is that the objectClassName is still nil at this point, which results in an exception throw.
",LoganWright,segiddins
1471,2015-02-09 19:50:48,"@LoganWright what you're doing is unsupported -- by using the `@objc(ClassName)` annotation on your `RLMObject` Swift subclasses, you're making it impossible for Realm to know that these are Swift classes, and thus they need to support the 'Swift way' of declaring `RLMArrays`. (Since they only way we can tell that a class was declared in Swift is by seeing if it has a namespaced class name).

I hope this helps!
",segiddins,LoganWright
1471,2015-02-09 19:59:05,"@segiddins - Ahhhh, thank you! I'll try that and if it works, I'll close the issue.  Thanks for helping me figure it out!
",LoganWright,segiddins
1469,2015-02-09 20:11:14,"@MKGitHub we agree that having some sort of editor import functionality would be cool, we just haven't gotten to it yet. As to your particular request for that sort of hypernormalization -- it would be possible to do that with a relatively small amount of code, but I'm not sure it'd be necessary with Realm -- Realm stores relationships as links, so there's nothing like the cost of a SQL `JOIN` to traverse relationships.

Hope that helps!
",segiddins,MKGitHub
1464,2015-02-06 19:10:00,"Hi @Bruno-Furtado can you share the project with us privately at help@realm.io? You can also post code here that shows us how you are storing and retrieving this login information.

As long as you aren't changing the database model, realm won't require a migration, so your file should still be on the device like usual.
",yoshyosh,Bruno-Furtado
1464,2015-02-09 18:43:41,"Hi @Bruno-Furtado just checking in, were you able to resolve this issue?
",yoshyosh,Bruno-Furtado
1464,2015-02-10 01:00:03,"@yoshyosh,
It's hard to explain because the situation itself involves the application logic.

In short some users are having problems. 
They note that when entering the application it's a hung time and closes.

Have you ever seen a situation like this?
This same failure occurs on iOS and Android with some users.
",Bruno-Furtado,yoshyosh
1464,2015-02-18 23:46:45,"@yoshyosh,

I managed to retrieve iTunes Connect log and the failure doesn't involve the Realm.
Sorry and thanks for the help.
",Bruno-Furtado,yoshyosh
1463,2015-02-06 19:38:30,"@webmagnets is CocoaPods integrating that target using frameworks or static libraries? Are you importing Realm in your bridging header, or via an `import Realm` statement in Swift?
",segiddins,webmagnets
1463,2015-02-06 21:15:39,"@webmagnets that line of code compiles fine for me when I paste it into a test project. Is there any more context you can share?
",segiddins,webmagnets
1463,2015-02-06 21:19:40,"Do you have a bitbucket account? I can add you as a viewer.

## 

Nathan Cain
501-463-6336www.jw.org

---

[+] Add me to your address book

On Fri, Feb 6, 2015 at 3:15 PM, Samuel E. Giddins
notifications@github.com wrote:

> ## @webmagnets that line of code compiles fine for me when I paste it into a test project. Is there any more context you can share?
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/issues/1463#issuecomment-73313783
",webmagnets,webmagnets
1463,2015-02-06 22:13:32,"@webmagnets I can reproduce the issue on your project, however I have no idea why the compiler's Swift-generated interface for `RLMRealm` is different from the contents of `RLMRealm.h`
",segiddins,webmagnets
1463,2015-02-06 22:14:36,"Do you think it has to do with me changing from manual installation to cocoapods?

## 

Nathan Cain
501-463-6336www.jw.org

---

[+] Add me to your address book

On Fri, Feb 6, 2015 at 4:13 PM, Samuel E. Giddins
notifications@github.com wrote:

> ## @webmagnets I can reproduce the issue on your project, however I have no idea why the compiler's Swift-generated interface for `RLMRealm` is different from the contents of `RLMRealm.h`
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/issues/1463#issuecomment-73322554
",webmagnets,webmagnets
1463,2015-02-06 22:19:23,"@webmagnets you need to delete the existing `Realm.framework` from your project directory, add `#import <Realm/Realm.h>` to your bridging header, and remove the `import Realm` statements from your swift code.
",segiddins,webmagnets
1463,2015-02-09 20:56:23,"@webmagnets feel free to close the issue if that fixed things for you!
",segiddins,webmagnets
1462,2015-02-05 19:00:07,"@alazier the build passed!
",segiddins,alazier
1461,2015-02-05 23:25:51,"@anlaital I tried to reproduce this with the given data, but was unable to. Could you please share a project / code sample that reproduces the issue? The following was my attempt to make a reproduction unit test, it might be a useful template:


",segiddins,anlaital
1461,2015-02-09 21:11:02,"@anlaital unfortunately, this is really the sort of issue where we need to be able to reproduce it locally to track it down. The only thing I can really think of (short of sharing a reproduction case) would be to share the method body of `[Transaction spendingTransactionsFromDate:nil toDate:nil]`? Thanks!
",segiddins,anlaital
1460,2015-02-09 18:50:55,"Hi @yasirmturk just checking in, did these solutions work for you?
",yoshyosh,yasirmturk
1459,2015-02-06 22:25:17,"@alazier rebased
",segiddins,alazier
1458,2015-02-05 01:07:50,":+1: Thanks @neonichu!
",segiddins,neonichu
1456,2015-02-07 00:43:33,"@alazier test coverage added
",segiddins,alazier
1451,2015-02-06 23:13:09,"@alazier I manually verified that it works
",segiddins,alazier
1445,2015-02-02 18:35:25,"Hi @vittoriom you are correct that you need to keep calling `RLMRealm.defaultRealm()` every time you are on a new thread. You can do reads and writes in background threads, you just can't pass RLMObjects/Realms between threads. One way people handle passing objects is by using primary keys. By fetching primary keys in a background thread, you can then send those over to the main thread and re-fetch for those objects there. For the most part Realm is fast so people haven't had too many issues doing it this way.

We are aware of the problem with doing long running operations on the main thread and are actively looking at different ways to handle threading and the passing of objects.
",yoshyosh,vittoriom
1445,2015-02-02 18:39:16,"Hi @yoshyosh and thanks for the reply. I actually don't need to pass objects between threads since my persistence layer only outputs lightweight structs that can be easily passed around. Still, I'm not 100% sure when you say 

> You can do reads and writes in background threads

Since when I do that, I get something like ""Realm is accessed from the wrong thread"". 
Do you mean that in order to do that, I just need to call <code>RLMRealm.defaultRealm()</code> before every read or write, instead of storing the <code>RLMRealm</code> into a property?
",vittoriom,yoshyosh
1444,2015-02-02 15:51:05,"@tspecht can you please share the error that you're seeing, as well as the Podfile you're using?
",segiddins,tspecht
1444,2015-02-09 16:19:06,"@tspecht what version are you upgrading from? In 0.90.0 there was a change made that now requires you to call `setSchemaVersion` for each Realm path individually. Previously you only needed to call this method once for your entire app rather than for each Realm used.
",alazier,tspecht
1444,2015-02-09 21:05:38,"So, @tspecht, are you saying that the original error (`Duplicate interface definition for class RLMObject`) has been fixed? In that case, it'd be great to close this issue and continue discussion on the migration issue in #1474. Thanks!
",segiddins,tspecht
1442,2015-02-03 19:33:30,"@yoshyosh this can't be merged
",segiddins,yoshyosh
1437,2015-01-30 17:53:47,"Thanks @bmunkholm!
",jpsim,bmunkholm
1436,2015-02-09 20:59:49,"@vittoriom were you able to reproduce the issue in your test project?
",segiddins,vittoriom
1436,2015-02-09 21:03:43,"@vittoriom thanks so much!
",segiddins,vittoriom
1436,2015-10-05 16:53:00,"@vittoriom it's odd that you can trigger this in Jenkins but not locally. Please let us know if you manage to find a way to reproduce it reliably and we'll investigate.
",jpsim,vittoriom
1435,2015-01-30 17:52:26,"Hi @brandonroth, we don't have an example named ""Backtrace"", so I'll assume you're referring to the [Backlink example](https://github.com/realm/realm-cocoa/tree/master/examples#backlink-1). I'll also assume you're using Swift based on the fact that you refer to `RLMRealm.defaultRealm()`.

Creating an `RLMRealm` can fail at any time due to a number of factors ([low available memory, low available storage, file permissions, etc.](https://github.com/realm/realm-cocoa/blob/master/Realm/RLMRealm.mm#L277-L304)). Is it possible that an exception is being thrown? If so, which one?

If `RLMRealm.defaultRealm()` returns `nil` without throwing an exception, that is a bug and we'd appreciate if you could share the steps to reproduce it so we can fix it.

If you're accessing Realm in a situation that could potentially fail, we recommend that you use a Realm constructor which accepts an `NSError` parameter (e.g. [`RLMRealm.realmWithPath(_:readOnly:error:)`](http://realm.io/docs/cocoa/0.90.4/api/Classes/RLMRealm.html#//api/name/realmWithPath:readOnly:error:)) so you can handle error cases.
",jpsim,brandonroth
1434,2015-02-02 22:01:11,"@alazier added a pair of very basic tests
",segiddins,alazier
1431,2015-01-29 16:48:16,"@tgoyne  The accessor cache schema can be used directly and not mutated.

In general this set of optimizations worries me. They seem to easily risk unintended consequences with future changes. How large is the gain exactly? If schema copying is really a huge deal we can probably remove some of the copies done in RLMCreateTables as well.
",alazier,tgoyne
1426,2015-02-17 17:20:38,"@tgoyne @segiddins please take a quick look at the fixes before I merge.
",alazier,tgoyne
1426,2015-02-17 17:20:38,"@tgoyne @segiddins please take a quick look at the fixes before I merge.
",alazier,segiddins
1426,2015-02-17 17:23:10,"@tgoyne cherry-picking the one change against master doesn't work because there are changes to swift files as well. @segiddins we should just make a new pr with these changes on master. Can comment out the two failing swift tests until this is done.
",alazier,tgoyne
1426,2015-02-17 17:23:10,"@tgoyne cherry-picking the one change against master doesn't work because there are changes to swift files as well. @segiddins we should just make a new pr with these changes on master. Can comment out the two failing swift tests until this is done.
",alazier,segiddins
1423,2015-01-29 01:39:41,"@alazier added test coverage.
",segiddins,alazier
1421,2015-01-28 16:06:30,"@marcaoas could you please share the code in which you're creating your object?
",segiddins,marcaoas
1421,2015-01-29 18:43:09,"@marcaoas, I've seen this issue with RestKit usage a few times, and every time it's been related to `NSNull` values getting into the RestKit-mapped object. Can you check if this is indeed what is happening? I'm considering adding an option in RestKit to not map null values, which would help in that circumstance.
",segiddins,marcaoas
1421,2015-01-29 22:39:32,"@marcaoas, it would also be incredibly helpful to have an example project that replicates the issue.
",segiddins,marcaoas
1421,2015-01-30 12:23:09,"Ok @segiddins 
I'll create an example project.
",marcaoas,segiddins
1421,2015-02-09 18:48:10,"@marcaoas did you end up creating an example project I could have a look at?
",segiddins,marcaoas
1421,2015-02-24 23:06:33,"@marcaoas feel free to ping me to reopen this issue if you get together an example project.
",segiddins,marcaoas
1416,2015-01-29 00:19:00,"@mrackwitz can we close this?
",segiddins,mrackwitz
1411,2015-01-26 18:25:38,"Hi @malcommac, it is currently not possible to sort an `RLMResults` by anything but a realm-persisted property. We have a ticket at https://github.com/realm/realm-cocoa/issues/1265 that is tracking adding a way to do such sorting.
",segiddins,malcommac
1409,2015-01-26 19:19:28,"@jpsim in your mind, would `createInRealm` still allow passing in an `RLMObject`?
",segiddins,jpsim
1401,2015-01-29 23:39:41,"@Just- would it be possible to provide a sample project that demonstrates this issue? It would make it much easier to track down the root cause. If that isn't possible, at least seeing your model definitions would be a great help. thanks!
",segiddins,Just-
1401,2015-02-02 23:30:15,"@Just- thanks for the example project! I've reproduced the issue.
",segiddins,Just-
1401,2015-02-06 09:59:36,"@segiddins glad to help :) 
",Just-,segiddins
1400,2015-01-23 07:42:08,"@segiddins That's super promising! Would you mind linking to it? I couldn't find it in the list of open PRs.
",ldiqual,segiddins
1400,2015-01-23 08:23:57,"https://github.com/CocoaPods/CocoaPods/pull/3067

-Samuel E. Giddins

On Jan 22, 2015, at 11:42 PM, Loïs Di Qual notifications@github.com wrote:

@segiddins That's super promising! Would you mind linking to it? I couldn't find it in the list of open PRs.

—
Reply to this email directly or view it on GitHub.
",segiddins,segiddins
1399,2015-01-27 01:38:38,"@alazier added a test.
",segiddins,alazier
1399,2015-05-08 18:05:27,"@tgoyne @jpsim @bdash this look good?
",segiddins,jpsim
1399,2015-05-08 18:05:27,"@tgoyne @jpsim @bdash this look good?
",segiddins,tgoyne
1399,2015-05-08 18:05:27,"@tgoyne @jpsim @bdash this look good?
",segiddins,bdash
1397,2015-01-22 23:09:26,"@mrackwitz can you confirm that listing with this podspec is successful, as is using it?
",segiddins,mrackwitz
1397,2015-01-29 00:24:14,"@mrackwitz :+1: if you confirm this works (both via linting and actually using the pod in an example app that has a test target)
",segiddins,mrackwitz
1397,2015-02-09 21:40:07,"@mrackwitz ping?
",segiddins,mrackwitz
1394,2015-01-22 22:10:50,"@tgoyne can confirm just having `[GTAmenity objectsWhere:` works as expected. 
",MattKiazyk,tgoyne
1393,2015-01-22 21:03:39,"@ldiqual we usually test the podspec manually, but we're in the process of adding a check to our continuous integration server to confirm the Realm pod works at all times (#1395).
",jpsim,ldiqual
1389,2015-01-22 23:47:03,"Thanks for the PR, @hartbit but we opted to go a different route, instead explicitly specifying public headers in the podspec in #1393.

Please keep in mind that you'll also have to [accept our CLA](https://docs.google.com/a/jpsim.com/forms/d/1bVp-Wp5nmNFz9Nx-ngTmYBVWVdwTyKj4T0WtfVm0Ozs/viewform?fbzx=4154977190905366979) for us to be able to merge your contributions in the future.

Thanks again!
",jpsim,hartbit
1386,2015-01-29 23:22:17,"@lewo I just copy-pasted your code into an example app and was unable to reproduce the issue you reported. Could you either try again with the latest bits from the al-swift branch, or share an example project that reproduces the issue? Thanks!
",segiddins,lewo
1386,2015-01-30 22:35:32,"@lewo I just managed to reproduce the issue and am digging into it. Thanks so much for reporting it!
",segiddins,lewo
1386,2015-01-31 00:20:10,"@lewo I think we've fixed the issue in https://github.com/realm/realm-cocoa/commit/f27ab75270bf5105285aa8fed53e8907914415b1, which should make it onto `al-swift` soon
",segiddins,lewo
1386,2015-01-31 01:17:12,"Great thanks, I'll give it a try.

> On 31 Jan 2015, at 10:20, Samuel E. Giddins notifications@github.com wrote:
> 
> @lewo I think we've fixed the issue in f27ab75, which should make it onto al-swift soon
> 
> —
> Reply to this email directly or view it on GitHub.
",lewo,lewo
1386,2015-03-25 21:06:51,"@foffer could you try the latest version of `RealmSwift`, currently available from the `master` branch? We'll be officially releasing it shortly and would love to make sure this is fixed.
",jpsim,foffer
1386,2015-03-26 06:50:28,"I'm using realmswift now from the master branch. Works perfectly :-) 

> On 26 Mar 2015, at 04:06, JP Simard notifications@github.com wrote:
> 
> @foffer could you try the latest version of RealmSwift, currently available from the master branch? We'll be officially releasing it shortly and would love to make sure this is fixed.
> 
> —
> Reply to this email directly or view it on GitHub.
",lewo,foffer
1385,2016-12-07 19:12:42,"This still hasn't been built. @jdanthinne if you're looking for a way to contribute to Realm, this seems like a great place to start!",jpsim,jdanthinne
1382,2015-01-21 22:25:59,"@jpsim thanks!
",segiddins,jpsim
1378,2015-01-22 18:39:36,"Thinking about this a bit more, all these numbers seem kind of slow ~2ms per notification. Wondering what the real bottleneck is here.

Thoughts @tgoyne ?
",alazier,tgoyne
1378,2015-03-27 20:55:35,"@tgoyne please close if this is now done.
",alazier,tgoyne
1371,2015-01-21 21:18:23,"Hi @frowing you are setting place's values here:



So you are overriding the default property values. When guid or title is nil, this error is thrown. You will need to make sure you aren't passing in nil values into your place object
",yoshyosh,frowing
1371,2015-10-07 20:21:13,"@yoshyosh are you saying this is as designed?
",amccarri,yoshyosh
1371,2015-10-07 20:23:02,"@amccarri yes, setting a property to `nil` has a distinctly different meaning than not setting it at all once we officially release null support as described here: https://realm.io/news/realm-objc-swift-0.96.0-beta/
",jpsim,amccarri
1367,2015-01-21 01:35:51,"@jpsim thanks so much!
",segiddins,jpsim
1367,2015-01-21 20:08:37,"Merge at will, @segiddins 
",jpsim,segiddins
1360,2015-01-20 19:57:52,"@Kirow, Realm does not support creating multi-column unique constraints. Right now, the only way to guarantee the uniqueness of a column at the database level is to make that column the primary key.
",segiddins,Kirow
1356,2015-01-27 23:57:27,"This PR is now almost exclusively about adding documentation. If there's anything at all unrelated to documentation in here that you're unsure about, let me know and I'll factor it out into a different PR.

Once this is merged, I'll be filing a PR to add the missing aspects of the interface that I just removed.

Please review @alazier @tgoyne @segiddins @mrackwitz 
",jpsim,segiddins
1356,2015-01-28 00:28:20,"This is now _just_ docs. @alazier @tgoyne @segiddins @mrackwitz
",jpsim,segiddins
1353,2015-01-17 07:48:50,"@bmunkholm see https://github.com/realm/realm-cocoa/pull/1353/files#diff-1. Hard to tell if there were necessarily _improvements_, but there certainly weren't any regressions based on the performance tests we have.
",jpsim,bmunkholm
1350,2015-01-19 18:26:40,"Hi @bredfield, I'm sorry this is causing you some problems. It doesn't look like you're doing anything wrong from what you've told us.

We'll need access to an Xcode project where we can reproduce this issue to troubleshoot further. Do you think you could send us anything? You can email us code privately at help@realm.io if you prefer.
",jpsim,bredfield
1350,2015-01-20 18:40:28,"Hey @jpsim, thanks for looking into this. It's quite possible it is on my end. I've set up an example project that's exhibiting the symptoms: https://github.com/bredfield/RealmTest.
",bredfield,jpsim
1342,2015-01-15 00:09:05,"nice @GreatApe Do I just compile it in xcode then: To test it, open a file using the ""Tools/Open new window menu"" item?

I was seeing a purple background with the last build I tried to run (before this PR)
",yoshyosh,GreatApe
1342,2015-01-15 09:03:07,"After merging master a peculiarity appeared: it will now include ""RLMObject"" in the objectSchema list of schemas. It seems like this is something that has changed in the bindings, because it happens for all files I try.

But other than that it is working fine.

@yoshyosh 
",GreatApe,yoshyosh
1341,2015-01-14 19:50:18,"@MattKiazyk as far as Realm is concerned, subclassing one of your own subclasses of `RLMObject` is just a convenient way to inherit a set of property definitions. If you want to add upon the superclass' `defaultPropertyValues`, a subclass' implementation of that method could look something like this:


",segiddins,MattKiazyk
1337,2015-01-14 00:27:53,"I see now that you've already merged this @segiddins. Could you make my suggested changes in another PR?
",jpsim,segiddins
1337,2015-01-14 00:28:24,"@jpsim already opened https://github.com/realm/realm-cocoa/pull/1338
",segiddins,jpsim
1327,2015-01-15 22:48:51,"Hi @shmidt, in attempting to follow our own installation steps, I realized that we need to make some changes to our distribution process to fully support installing the dynamic version of the Realm framework. Until we do this, the best way to install the dynamic version of Realm is to use [Carthage](https://github.com/Carthage/Carthage).
",jpsim,shmidt
1327,2015-01-22 14:59:24,"@jpsim Thank you.
I did exactly as it was written by you,
but I still have this issue.

Should I remove one of the frameworks from the linked section, probably? 
![screen shot 2015-01-22 at 17 56 53](https://cloud.githubusercontent.com/assets/1472370/5857911/4a8b119e-a260-11e4-8b0a-f0e2f380dda3.png)
",shmidt,jpsim
1327,2015-01-22 20:16:51,"I'm looking into this, @shmidt. Bear with me a bit.
",jpsim,shmidt
1327,2015-01-23 08:19:57,"@jpsim Thanks for the video. I do the same, except I have Swift project. 
",shmidt,jpsim
1327,2015-01-27 15:06:31,"@jpsim I followed your video step by step, to create exactly the same project, but result is the same:



Can't understand what the problem this. 
My Xcode version is up to date: Version 6.1.1 (6A2008a).
Probably re-installing Xcode can fix it?
",shmidt,jpsim
1327,2015-01-27 22:39:40,"I see the same issues in @shmidt's sample project when building for the simulator as well.

If we look at the build log for the linking step we'll see:



and a warning:



So it is possible that it ignores the first version of the framework in the search path and does not continue searching - after all, the first version _did_ satisfy the ""Realm"" naming requirement.
",pizthewiz,shmidt
1327,2015-01-28 20:33:26,"@jpsim Good to hear. Thank you very much!
",shmidt,jpsim
1326,2015-01-12 19:39:57,"Hi @kwojtaszek from your change, it looks as if you found a scenario in which `objectSchema.className` returns a `Class` instead of an `NSString`. Could you share when that occurs? Ideally by writing a failing test.

From what our continuous integration logs, your change makes our existing unit tests fail, so if this change fixes a specific scenario for you, it also makes the scenarios we're testing fail.
",jpsim,kwojtaszek
1324,2015-01-12 20:17:36,"Thanks for filing this, @joshuadutton. We agree that it would be nice to expose a more direct way to do this through property-backed inverse relationships, though it is possible to do many queries involving inverse relationships today.

If you have a specific query you'd like to make, you can post it here and we might be able to find a way to do that using our current API.
",jpsim,joshuadutton
1324,2015-01-29 21:31:13,"@Kirow count queries are not yet supported. There is an open issue for it here #1166
",alazier,Kirow
1324,2015-03-02 19:27:23,"I just ran into this as well and as @joshuadutton mentioned, (until this is supported) it can be worked around via explicit relationship.
",pizthewiz,joshuadutton
1324,2015-09-14 23:44:00,"@bcapps there's actually an open PR that adds this. The blocked tag can probably be removed now. 
",segiddins,bcapps
1324,2015-09-21 16:08:11,"@siuying yes, that's part of what this issue is tracking.
",jpsim,siuying
1322,2015-01-12 20:33:41,"Thanks for the quick response @jpsim ! But unfortunately that ended up with the same output. Heres what I changed



and the output



I also tried casting it to an implicitly unwrapped optional with the same result (`rtruck = rresponse.firstObject() as RTruck!`).

And just for kicks I tried messing around with making it a constant and skipping the whole optionals concept all together. 



But again I got the same output. Let me know if I should try something else.
",jault3,jpsim
1322,2015-01-14 05:54:40,"Thanks @jpsim that seems to have worked. Here's what I get as my println for the description



It's very strange why such an odd approach has to be taken to get it to work. But anyways, I got to another part in the code where that list of trucks is passed around. And now I want to actually use the keywords on one of those RTruck objects and display each of them on screen. So, there are two strange things that happen here. The first being the following line of code,



If you give the join method an instance of myRLMArrayInstance it says it does not conform to the SequenceProtocol. Which is not correct because I know it does conform to that protocol in the RLMSupport.swift file. So to get around that, I figured I would loop through the items in my RLMArray instance and add them to my own array and do the join that way. Probably not the best approach but I just wanted to get it working first.



So I printed out the truck that came from the method we worked on in my previous comments. It prints out great! except for the keywords part. Here is an example of this println `println(truck.description)`



As you can see, the keywords RLMArray is empty. I'm not sure where these 3 RStrings went. If they just aren't printing out thats fine. However, sometimes the following println, (the one starting with `tdo -`) crashes the app because `truck.keywords` is nil. In the debugger it says the backing array for the RLMArray is nil. Very strange behavior. So if I take out that println that sometimes crashes, it `never` enters the for loop. Perhaps I need to do some more casting here? Either way, I can't really figure it out. I've tried a lot so far. Any pointers?
",jault3,jpsim
1322,2015-01-14 08:29:08,"@jpsim Alright, after further inspection it seems something goes wrong when I call the `createOrUpdateInRealm` method. So in  my very first comment on this issue, I had a line of code like this 



After all the updates and whatever else I've done so far that line is the same. But directly before that line I am printing out the truck description and again directly after. Here is what it looks like



And here is the output



Not sure what happens to the keywords in that method but they do have different memory addresses before and after. I figured I would do a lot of debugging and give you everything I know! :) 
",jault3,jpsim
1322,2015-01-15 03:26:13,"I haven't been able to reproduce your issue, @jault3. If you change the `RTruck.createOrUpdateInRealm(realm, withObject: rtruck)` line from [my last code sample](https://github.com/realm/realm-cocoa/issues/1322#issuecomment-69644446) to this:



this is printed out:



Could you provide me with a code sample that I can run to reproduce the issue?
",jpsim,jault3
1322,2015-01-19 18:21:53,"Hi @jault3, we haven't heard back from you in a few days. Are you still having issues with this?
",jpsim,jault3
1322,2015-01-19 23:32:11,"Sorry about this @jpsim. Had a few crazy busy days. But in terms of what you can use to reproduce it, our application is open sourced. Here is the repo with a direct link to the branch you can use https://github.com/TruckMuncher/TruckMuncher-iOS/tree/realm. It is on the `realm` branch. You should be able to clone the repo, run the app, and read the logs and see the issue I'm having. The file where the print lines are coming from is TruckMuncher/api/TrucksManager.swift https://github.com/TruckMuncher/TruckMuncher-iOS/blob/realm/TruckMuncher/api/TrucksManager.swift. Let me know if you need anything else from me! Again, sorry for the delay. 
",jault3,jpsim
1322,2015-01-20 00:08:16,"@jault3 ok, so I've built the project and ran it. These are the logs:



What can I do to trigger the issue you're seeing?
",jpsim,jault3
1322,2015-01-20 00:12:49,"@jpsim did you check out the `realm` branch or are you on master? I'm not seeing the print lines I put in and those should be printed out without any user interaction in the application. All you should have to do is run the app.
",jault3,jpsim
1322,2015-01-20 01:44:39,"@jpsim Here are the steps I took to reproduce the issue.



I then opened up `TruckMuncher.xcworkspace` and deleted the reference to Properties.plist to get it to compile for now. Then I clicked the Run button to launch the app. When the app opens in the simulator it asks for permission to access your location. I clicked `Allow`. Then while the simulator is running, in the menu/status bar I clicked `Debug`->`Location`->`Apple`. Then the important step, `I had to run the application again in Xcode`. Then my logs start by showing what you saw, and then multiple iterations of this:



I was able to reproduce what you were seeing (the absence of the logs that showed the issue) when the simulator did not have a location set and I did not run the app for the second time after setting a location. 
",jault3,jpsim
1322,2015-01-22 23:28:07,"hey @jpsim was just wondering if you had a chance to look at this yet?
",jault3,jpsim
1322,2015-01-24 01:24:06,"Ah, so @jault3 turns out that your usage of Realm is actually incorrect (although we should share the blame since the `createOrUpdate` methods can be a bit misleading).

So in your code, when you update an `RLMObject` property value, you're done! You don't have to pass that modified object back into `createOrUpdate`. That method is more for passing in an `NSDictionary` or `NSArray` of updated values.

I really should have caught this as soon as you shared your code, but that shows that this method might benefit from a different name, though nothing comes to mind.

See #1409 for more details.
",jpsim,jault3
1322,2015-01-26 16:17:55,"So @jpsim is this still a bug and I am also using it incorrectly? Or is this just me incorrectly using realm and it is not a bug? I took a look at #1409 and that would be a great idea. An exception would be a nice reminder! 

I do have one question though. Let's take the situation where you make a network request, construct one of my RTruck objects, use the `createOrUpdate` method and it stores it perfect. Now that truck is stored and has a primary key with the `id`. What if the app is closed and later its opened again and data used to construct a brand new RTruck in memory was taken from the network and then passed to `createOrUpdate`? Even if its a brand new truck in memory, I can't use `createOrUpdate`?
",jault3,jpsim
1322,2015-01-26 21:55:33,"@jault3 no this is not a bug. Yes you are using Realm incorrectly, though I understand the method name is misleading. Could you clarify your follow up question? I don't quite understand what you're asking. Maybe a code snippet would help.
",jpsim,jault3
1311,2015-01-09 06:12:05,"@mclark4386 Thank you!
",bzmario,mclark4386
1307,2015-01-08 01:44:05,"I like your proposed changes, @alazier. Would make discovering the encrypted variants easier to discover through autocomplete too.
",jpsim,alazier
1307,2015-05-07 01:57:08,"I don't know if theses ""new version feature"" news on the website are published by you guys, but the method listed on the following url still uses the old method, thus misleading people, including myself.

@segiddins @jpsim @alazier 

[http://realm.io/news/realm-cocoa-0.89.0/](http://realm.io/news/realm-cocoa-0.89.0/)
",marcoscurvello,jpsim
1307,2015-05-07 01:57:08,"I don't know if theses ""new version feature"" news on the website are published by you guys, but the method listed on the following url still uses the old method, thus misleading people, including myself.

@segiddins @jpsim @alazier 

[http://realm.io/news/realm-cocoa-0.89.0/](http://realm.io/news/realm-cocoa-0.89.0/)
",marcoscurvello,alazier
1307,2015-05-07 01:57:08,"I don't know if theses ""new version feature"" news on the website are published by you guys, but the method listed on the following url still uses the old method, thus misleading people, including myself.

@segiddins @jpsim @alazier 

[http://realm.io/news/realm-cocoa-0.89.0/](http://realm.io/news/realm-cocoa-0.89.0/)
",marcoscurvello,segiddins
1307,2015-05-07 03:16:50,"Hi @marcoscurvello, yes we post updates to the blog, twitter account and docs every time there's a new major version, which sometimes includes API changes. I'm sure you can understand that we can't possibly update old announcements. You can always see the latest documentation at https://realm.io/docs/objc/latest/.
",jpsim,marcoscurvello
1303,2015-01-16 21:27:27,"Thanks for filing this, @cyanware. This should be fixed in the next CocoaPods release thanks to @tgoyne's handiwork.
",jpsim,cyanware
1302,2015-01-08 00:01:58,"@bepitulaz have you tried running `Clean` and then re-building?
",segiddins,bepitulaz
1302,2015-01-23 20:20:35,"There's only so much we can do @brajbong. It's quite possible things aren't working for you due to a bug in Apple's module loading process, so perhaps file a radar at http://bugreport.apple.com?

Here's a short video going through the steps of including Realm in a Swift project, in case that clarifies any of the steps: http://static.realm.io/videos/realm-in-swift.mp4
",jpsim,brajbong
1302,2015-02-17 02:42:09,"@brajbong Same here.
@jpsim Thanks for the link.
",liweiz,jpsim
1302,2015-02-17 02:42:09,"@brajbong Same here.
@jpsim Thanks for the link.
",liweiz,brajbong
1302,2015-03-22 23:36:08,"@brajbong I am having exactly the same issue here - RLMSupport.swift will not compile after Cocoapods install.

Did anyone have any success install this via cocoapods?
",bazscott,brajbong
1302,2015-03-26 10:10:50,"Same here.
@bazscott I failed too. via cocoapods.

by the way,
I try to remove import line. like below
// import Realm

It's success compile.

How about remove import? 

Added ---------------------

and, I added Realm import line to ""bridging-header.h"", like below
#import &lt;Realm/Realm.h&gt;
",lum7671,bazscott
1302,2015-03-26 15:23:02,"@liweiz @bazscott @lum7671 we've updated our CocoaPods installation instructions for using Realm in Swift projects. Please let us know if you still run into issues after following them here: http://realm.io/docs/cocoa#installation.
",jpsim,bazscott
1302,2015-03-26 15:23:02,"@liweiz @bazscott @lum7671 we've updated our CocoaPods installation instructions for using Realm in Swift projects. Please let us know if you still run into issues after following them here: http://realm.io/docs/cocoa#installation.
",jpsim,liweiz
1302,2015-03-26 15:23:02,"@liweiz @bazscott @lum7671 we've updated our CocoaPods installation instructions for using Realm in Swift projects. Please let us know if you still run into issues after following them here: http://realm.io/docs/cocoa#installation.
",jpsim,lum7671
1302,2015-03-28 12:28:00,"@jpsim Thanks! The problem was fixed. :-)
",lum7671,jpsim
1302,2015-10-19 17:45:05,"Thanks @jpsim, I already solved, and you are right, is a Xcode issue.
",mordonez-me,jpsim
1302,2016-11-07 03:56:02,"@iamrohit1 I solved it in the same way.
",yeisonvargasf,iamrohit1
1300,2015-05-21 20:20:59,"@cfeckardt were you able to finish the patch for this?
",bigfish24,cfeckardt
1299,2015-01-06 19:07:53,"@astigsen I'm not sure that is related to this pr. That being said we should still do this, so opened a new issue #1300 
",alazier,astigsen
1289,2015-01-01 13:34:04,"Hello @GreatApe,

thanks, i got it.
close this issue.
",DaidoujiChen,GreatApe
1288,2015-01-01 17:44:42,"@Kirow , you're right. Thanks.
",courtjester199,Kirow
1284,2014-12-31 23:19:19,"I don't know why we're no longer caching default values. Is that intentional, @alazier? I have no other concerns other than what I've indicated in my comments.
",jpsim,alazier
1284,2014-12-31 23:25:46,"> I don't know why we're no longer caching default values. Is that intentional, @alazier?

This was causing crashes for users who tried to call Realm methods in their defaults method. @tgoyne and I agreed we should not be caching these values: https://github.com/realm/realm-cocoa/issues/1251
",alazier,alazier
1283,2015-12-14 07:15:04,"@jpsim May I asked how about the cost of the call `[realm deleteObjects:[MyRLMObjectSubclass allObjects]]`? Is it expensive for a large table?
",xilin,jpsim
1283,2015-12-15 04:48:17,"@tgoyne Thanks. So maybe in the future we can have better way to do this in realm.
",xilin,tgoyne
1280,2015-01-15 22:51:40,"@dasdom sorry for the delay in getting back to you. Could you please verify that your `FRAMEWORK_SEARCH_PATHS` in Xcode are correct and include the path to the OS X version of `Realm.framework` (and that they _don't_ include the path to the iOS framework)?
",segiddins,dasdom
1280,2015-01-19 21:20:16,"I was able to reproduce this issue. It happens because the generated umbrella header imports some of the underlying private headers on first install, which is not supposed to happen. It seems like this is an issue with the Realm.podspec in combination with the executed prepare_command, which only appears for integration with frameworks.

@dasdom @ldiqual: For now, you should be able to workaround the issue by just running `pod install` again.
",mrackwitz,dasdom
1280,2015-01-19 21:20:16,"I was able to reproduce this issue. It happens because the generated umbrella header imports some of the underlying private headers on first install, which is not supposed to happen. It seems like this is an issue with the Realm.podspec in combination with the executed prepare_command, which only appears for integration with frameworks.

@dasdom @ldiqual: For now, you should be able to workaround the issue by just running `pod install` again.
",mrackwitz,ldiqual
1280,2015-01-20 01:08:18,"@mrackwitz Ran `pod install` twice but it didn't fix the issue. I'll wait on https://github.com/realm/realm-cocoa/pull/1358/files to be merged. 
",ldiqual,mrackwitz
1280,2015-01-23 13:14:56,"@segiddins Sorry for the late reply I was busy with other stuff. I have update to 0.90.1 and checked again. The Problem remains. The Framework Search Path points to the OS X Realm framework.
I'm not using cocoapods. I installed Realm following the steps in Manual Installation.
",dasdom,segiddins
1280,2015-01-23 23:41:51,"@dasdom in an effort to not conflate the distinct issues discussed in this thread, could you provide steps to reproduce the problem you're facing? Are you saying that following the ""Manual Installation"" steps listed [here](http://realm.io/docs/cocoa/0.90.2/#installation) for an iOS Objective-C app yields a compilation error **""error: could not build Objective-C module 'Realm'""**?
",jpsim,dasdom
1280,2015-01-24 12:06:43,"@jpsim No, sorry, I'm talking about a command line Swift OS X application which I use to populate my realm database. I followed the manual installation steps you linked in your comment (http://realm.io/docs/cocoa/0.90.2/#installation).
",dasdom,jpsim
1280,2016-03-06 23:20:48,"+1 @Legoless 
",pkalinowski,Legoless
1280,2016-03-14 13:19:59,"@Legoless @pkalinowski: Sorry for my late response here. Have you tried meanwhile to update to the latest version of Realm and the latest prerelease of CocoaPods? This should fix this issue.
",mrackwitz,Legoless
1280,2016-03-14 13:19:59,"@Legoless @pkalinowski: Sorry for my late response here. Have you tried meanwhile to update to the latest version of Realm and the latest prerelease of CocoaPods? This should fix this issue.
",mrackwitz,pkalinowski
1280,2016-03-21 15:09:37,"@rKrums: Good to keep in mind. Thanks for bringing to attention here!
",mrackwitz,rKrums
1280,2016-05-11 09:31:24,"@rKrums ""check if you're using different OS in the process of building something "" how to check?
",peiweichen,rKrums
1279,2015-03-07 22:28:19,"@ealeksandrov add `use_frameworks!` to your Podfile and it should works (make sure to use prerelease version of cocoapods).
",allaire,ealeksandrov
1279,2015-03-07 22:31:36,"@allaire that's fixed it, thanks a lot!
",ealeksandrov,allaire
1278,2014-12-31 05:13:34,"@alazier issue may be that XCTest is partially broken with `SWIFT_OPTIMIZATION_LEVEL = ""-O""` since you seem to have made it work with `-Onone`. I'll close this assuming that we'll proceed by fixing the single broken test in `al-swift` instead of this PR. Please let me know if I'm mistaken in doing this.
",jpsim,alazier
1276,2014-12-30 17:16:13,"No. This exchanges objects at two indexes rather than moving an object from one index to another.

@astigsen I believe this is the only 'new' method we are missing. We don't have a few of the variants of other methods (removing arrays of objects, ranges of objects, etc) but all of these are simple composites of existing methods.
",alazier,astigsen
1276,2015-07-24 21:17:44,"@wgywgy this is now merged into `master`! thanks for your patience...
",jpsim,wgywgy
1273,2014-12-29 18:54:18,"@tgoyne if we are talking about a specific scenario, we will be able to find dozen of solutions and work around for each scenario. However, what I requested is a feature, so I can safely have a reference passed between threads and be able to refresh them (manually) on demand.
",Ahmed-Ali,tgoyne
1273,2015-01-08 20:30:47,"@alazier thanks a lot. This was just what is needed :)
",Ahmed-Ali,alazier
1272,2014-12-30 01:40:53,"Thanks for your continued work on this, @nathanhjones! After a brief review, it looks like this update addresses most of @alazier's last design concerns from the previous PR (except pt. 3):
1. date formatters
2. block transformations
3. the option of using a different mapping per object
4. the ability to override existing keys

Before we proceed to reviewing in-depth, it would be nice to compile the design goals that are important to us in property mapping.

I'd be curious to hear @segiddins' thoughts on this given his work with ResKit.
",jpsim,nathanhjones
1272,2014-12-30 02:24:11,"I'm away this week, but I look forward to reviewing this!

-Samuel E. Giddins

On Dec 29, 2014, at 9:40 PM, JP Simard notifications@github.com wrote:

Thanks for your continued work on this, @nathanhjones! After a brief review, it looks like this update addresses most of @alazier's last design concerns from the previous PR (except pt. 3):

date formatters
block transformations
the option of using a different mapping per object
the ability to override existing keys
Before we proceed to reviewing in-depth, it would be nice to compile the design goals that are important to us in property mapping.

I'd be curious to hear @segiddins' thoughts on this given his work with ResKit.

—
Reply to this email directly or view it on GitHub.
",segiddins,nathanhjones
1272,2014-12-30 11:14:40,"I've only taken a brief glance at this - my main concern would be the complexity and overhead required to use the proposed apis. Requiring a user to define a new class every time they need a transformation seems excessive for most use cases.

@jpsim was not around for some of the design discussions we have had regarding this feature set. Some of more important design goals/requirements we have discussed include:
- the ability to specify mapping/transformations using literals - this makes it much easier to specify mappings, especially for simpler use cases
- a non-intrusive design which doesn't require knowledge of the mapping system internally - because Realm objects can be created from any kvc objects it isn't necessary to have special logic in the object create code to apply transforms.
- the ability to selectively apply transformations on a per-object basis is pretty important - with the proposed apis transformations are always applied.

I'll try to look at this in depth later in the week to see if we can tweak the proposed apis to meet these and some of our other design goals.
",alazier,jpsim
1272,2014-12-31 13:15:59,"@alazier I totally agree, it does add a certain amount of overhead, something I debated while deciding between a couple solutions. My use case tends to be integrating with a new data source. Something I don't do often after initial dev, and when I do, I expect there to be some mapping work involved. I'm sure you guys have more use cases you're hearing from customers, so obviously open to all feedback.

I felt the protocol was a good mix of flexibility while aligning to the defined set of steps / behaviors involved with mapping. To help minimize some of the work, the thought was that users could define translation classes as part of the `RLMObject` subclass itself, or perhaps grouped in separate files - e.g. `SourceOneAPITranslations.h/m` and `SourceTwoAPITranslations.h/m`. After implementing the protocol approach in my project, I do need to revisit making some methods `@optional` if we move forward with it.

Yes, as the API stands now, you can have one translation that will always be applied if specified. My plan was to work through the entire problem in two steps:
1. finalize the approach to mapping / transformation, then
2. update to solve the per-instance requirement, which depends on the solution from step 1

I've started sketching out what that looks like. I think it's as straightforward as another initializer - `initWithTranslation:andObject:`. Translation being what we settle on in this first step. This will require an update to the `RLMValidatedDictionaryForObjectSchema` function to pass the instance, something I wanted to discuss with you guys first.

That said, would it be beneficial for me to polish one of the other approaches I debated and submit a separate PR for comparison? It's more similar to the previous mapping-only PR.
",nathanhjones,alazier
1272,2014-12-31 18:09:21,"There are two overarching design principles I am hoping to seewith these apis:

1 - The mapping apis should be on a fundamental level decoupled from the other Realm apis. We don't want to bake in logic to apply transforms in the validation methods as this approach doesn't scale for nested objects - even if we had a creation method which took a translation and an object, users would also need to supply transforms for all nested child objects and we would have to pass the transforms throughout the object creation pipeline which isn't practical.

The simplest (and most common) approach to decouple these apis is to any mapping before using any Realm apis at all. This has the benefit of being completely decoupled, with the downside of having duplicate/copy the entire object tree before insertion. Another approach which avoids the need to copy data is to have an wrapper object which applies transforms when accessing object properties. The wrapper object can then be passed to Realm when creating objects and can be applied on demand. Accessing nested object properties simply wrap these objects on access so this approach should scale and perform well. My hope was is the apis we end up with support both models, standalone value transformation and object wrapping.

2 - The apis should be declarative whenever possible. In general this makes apis a lot easier to use, and the code a lot easier to read. I don't see why we can't have a single initialization for a mapper which takes a dictionary that maps keys to either a source keypath, a transformation block, or any other supported mapping. 

In general, I was imaging the example in this pr looking something like:



which functionally is very similar to what you have proposed, but allows you to specify a mapping at runtime using a single initializer which I think is much more user friendly.

There are still some issues that need to be worked out, mostly that mapper/transformation creation also may need to take an objectSchema and the entire schema being operated on to support nested objects properly. It's possible to infer this information from object being transformed, so this may not be needed in the end - in any case we need to give this some more thought to work through the details.

Hopefully this will give you better sense of what I am hoping for from these apis. I've discussed some of this at various times with @tgoyne and @jpsim but I don't think we ever reached consensus on what we planned to build. If they agree with this overall design I think we can move forward with nailing down the api details pretty quickly.
",alazier,jpsim
1272,2014-12-31 22:11:59,"Let's continue to discuss what this API would look like in here before continuing work on an implementation, but @nathanhjones it's great to have you taking part in these discussions!
",jpsim,nathanhjones
1272,2015-01-04 19:16:42,"After digging into `RLMObject` initialization behind the scenes a bit, I've got a better understanding and agree that this over complicated and won't scale. My goal was to minimize changes to existing API and the solution suffered for that.

Yes, mapping / transformation should be decoupled from the validation code. I ran some more complex examples through this PR as-is and there are cases where it breaks down given that validation appears to happen when objects are added to a realm as well.

That said, I agree with @jpsim that mapping and transformation should be separate. I like the idea of an `RLMMapping` class that can be passed on initialization. We could then add a couple additional functions to be called in this order:
1. Convert inbound keys to expected keys - `RLMMappedValuesForObjectSchema(id value, NSDictionary *mapping, RLMObjectSchema *objectSchema)`
2. Transform values to correct type / value - `RLMTransformedValuesForObjectSchema(id value, NSDictionary *transforms, RLMObjectSchema *objectSchema)`
3. Run existing validation check `RLMValidatedDictionaryForObjectSchema(id value, RLMObjectSchema *objectSchema, RLMSchema *schema, bool allowMissing)`

@jpsim - I agree, checking for `_realmMapping` is obscure. Feels odd to manipulate an inbound API response before being able to use it. 

Not thrilled with a bunch of new methods, but I think 3 is reasonable given the functionality added. If a dev wants to specify a mapping, other than default (see below), they use the more verbose constructor. The existing methods would just call the new methods passing `nil`, so shouldn't be much overhead.

**Here are a couple more questions:**
1. Do we still provide API for specifying a default `RLMMapping` object? Personally, I like it and I think it will simplify most of the use cases. I know my use cases have very few scenarios where I need more than one mapper, allowing me to use `initWithObject:` vs a more verbose method.
2. What are your thoughts on the block transformation parameters? I could see cases where receiving all values is beneficial:
   - id(^)(id attribute) - e.g. the single mapped value like '123'
   - id(^)(id attributes) - e.g. the `NSDictionary` of all attributes
",nathanhjones,jpsim
1272,2015-05-01 20:21:28,"@nathanhjones thanks so much for taking the time to submit this PR, and sorry for leaving it dangling for so long. I'm going to close it now, as we're not quite ready to flesh out this design and maintain the feature at the moment. When we eventually get around to it, we'll be sure to get your feedback. Thanks so much for the PR!
",segiddins,nathanhjones
1272,2015-05-07 02:21:25,"No worries @segiddins - I've since focused on some other things and honestly should have closed this a while ago. I wasn't pleased with the second design and should have stuck with my original version that was part of another PR. I appreciate the :eyes: and perhaps We'll revisit in the future and I can be part of that solution...we'll see. Thanks again.
",nathanhjones,segiddins
1270,2014-12-29 21:22:16,"Thanks for sharing, @mkoppanen. We're investigating what could be wrong. If you manage to isolate code that can recreate this issue, we'd love to see it!
",jpsim,mkoppanen
1270,2014-12-30 12:07:13,"Hi @jpsim,

unfortunately I have no idea what happened to the database and I haven't been able to reproduce this after resetting simulator contents. In principle my usage of Realm is very basic as I was testing whether it's suitable for the project (mainly storing objects and creating listings out of them)
",mkoppanen,jpsim
1270,2015-01-15 20:00:07,"Hi @mkoppanen were you by chance running the browser at the same time as the simulator?

We recently made some changes in preparation for our upcoming multi-process support that has caused issues when using the Realm Browser. We don't support viewing a Realm file in the Browser while it's simultaneously being accessed by the iOS Simulator.

Is it possible that's what happened here? If so, we should be failing more graciously instead of crashing.

Simply deleting the *.lock file in the same directory as the realm file should restore things.
",yoshyosh,mkoppanen
1270,2015-01-15 21:09:31,"@jpsim I have seen the hanging/spinning issue when using 32bit simulators - I think either problem can result from this scenario. @tgoyne can probably confirm (or deny).
",alazier,jpsim
1268,2014-12-28 00:11:19,"@jrpetersjr I just merged this pr. To build all you have to do is clone this repo and build the broswer project which is at `tools/RealmBrowser/RealmBrowser.xcodeproj`
",alazier,jrpetersjr
1268,2014-12-28 00:15:10,"@alazier Thank you so much.
",jrpetersjr,alazier
1266,2014-12-26 20:05:39,"@alazier he's not running Mavericks. Running 10.9.5 (from his comment).
",jpsim,alazier
1266,2014-12-26 20:11:35,"10.9.5 is Mavericks. 10.10 is Yosemite 10.8 is Mountain Lion.

[image: Twitter] http://https//twitter.com/jrpetersjr[image: Facebook]
https://www.facebook.com/JOHN.R.P.JR[image: Google+]
https://plus.google.com/109584408699873271815/posts[image: YouTube]
https://www.youtube.com/user/petersj917/videos?view=0vCard
http://www.dynasend.com/signatures/get.php/jrpetersjr-at-gmail.com.vcf |
email jrpetersjr@gmail.com
[image: John R. Peters, Jr., Phi Gamma Delta, () -]
Phi Gamma Delta
227 South Lincoln Park Drive | Evansville, Indiana 47714 | United States
mobile (812) 278-0094

On Fri, Dec 26, 2014 at 3:05 PM, JP Simard notifications@github.com wrote:

> @alazier https://github.com/alazier he's not running Mavericks. Running
> 10.9.5 (from his comment).
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/1266#issuecomment-68155907.
",jrpetersjr,alazier
1265,2015-02-22 03:06:02,"+1

I'm dealing with the same use case that @ceeK highlighted, sorting on a computed distance property.
",michaelcameron,ceeK
1265,2016-11-10 17:08:34,"@peterpaulis nice catch! See #4318.
",jpsim,peterpaulis
1260,2015-01-06 18:10:54,"@kronik this does seem to be the same issue.

I think we can make this work for the case @melbyruarus provided. If make things fail gracefully by properly returning an error when opening a Realm using the initializer with an output error, then users can at least detect and avoid crashing by getting a new Realm instance and checking the error before performing any potentially unsafe background operations.

The ideal long term solution though would be to actually make things work in the background.
",alazier,kronik
1260,2015-01-06 18:10:54,"@kronik this does seem to be the same issue.

I think we can make this work for the case @melbyruarus provided. If make things fail gracefully by properly returning an error when opening a Realm using the initializer with an output error, then users can at least detect and avoid crashing by getting a new Realm instance and checking the error before performing any potentially unsafe background operations.

The ideal long term solution though would be to actually make things work in the background.
",alazier,melbyruarus
1260,2015-01-08 01:17:17,"@segiddins there are other core operations in the factory method which are not wrapped with an exception handler - these cases should also return an error from the factory methods. There is also the possibility that we are not catching the type of exception being thrown in this case as we may be missing some handers.
",alazier,segiddins
1260,2015-01-30 00:05:56,"Realm actually will fail gracefully as long as you use on of the factory methods that takes an error parameter (and a pointer to an `NSError` is passed in). The answer in situations like this is either to disable `NSFIleProtection` entirely (and optionally use Realm's built-in encryption support), or to recognize that opening the Realm when the app is in the background can fail, and using the appropriate factory method so you can handle the error (and thus the exception won't be thrown by Realm).

@melbyruarus I hope this helps.
",segiddins,melbyruarus
1260,2016-06-05 20:48:46,"@jpsim it seems that the parent directory advised to change `NSFileProtectionAttributes` of in the documentation may contain files not pertaining to realm. Is there a way to set the realm config to store all realm files and auxiliary files into a specific directly, separate from the rest of the application documents directory?
",rex-remind101,jpsim
1259,2014-12-21 15:14:21,"@jpsim thank you, I got it working by changing my property to be of type NSArray instead of RLMArray
",marlowcharite,jpsim
1255,2014-12-22 12:58:15,"+1 Ran across this as well. My observations are pretty much the same as @pizthewiz , I'm using Objective-C though.
",kunalsood,pizthewiz
1248,2014-12-19 06:52:48,"Hi @PhucDuy, here's how you can create some seed data that you can bundle and use with your shipping app:
1. First, populate the realm. You should use the same data model as your final, shipping app to create a realm and populate it with the data you wish to bundle with your app. Since realm files are cross-platform, you can use an OS X app (see our [JSONImport example](https://github.com/realm/realm-cocoa/tree/master/examples/osx/objc/JSONImport)) or your iOS app running in the simulator.
2. In the code where you're generating this realm file, you should finish by making a compacted copy of the file (see [`-[RLMRealm writeCopyToPath:error:]`](http://realm.io/docs/cocoa/0.89.0/api/Classes/RLMRealm.html#//api/name/writeCopyToPath:error:)). This will reduce the Realm's file size, making your final app lighter to download for your users.
3. Drag the new compacted copy of your realm file to your final app's Xcode Project Navigator.
4. Go to your app target's build phases tab in Xcode and add the realm file to the ""Copy Bundle Resources"" build phase.
5. At this point, your bundled realm file will be accessible to your app. You can find its path by using [`[[NSBundle mainBundle] pathForResource:ofType:]`](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSBundle_Class/#//apple_ref/occ/instm/NSBundle/pathForResource:ofType:).
6. You can either create a read-only realm by calling [`[RLMRealm realmWithPath:readOnly:error:]`](http://realm.io/docs/cocoa/0.89.0/api/Classes/RLMRealm.html#//api/name/realmWithPath:readOnly:error:). Or, if you'd like to create a writable realm file based on this initial data, you can copy the bundled file to your application's Documents directory using [`[[NSFileManager defaultManager] copyItemAtPath:toPath:error:]`](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSFileManager_Class/index.html#//apple_ref/occ/instm/NSFileManager/copyItemAtPath:toPath:error:) and then construct your new realm by using [`[RLMRealm realmWithPath:]`](http://realm.io/docs/cocoa/0.89.0/api/Classes/RLMRealm.html#//api/name/realmWithPath:).

You can refer to our [migration sample app](https://github.com/realm/realm-cocoa/tree/master/examples/ios/objc/Migration) for an example of how to use a bundled realm file.
",jpsim,PhucDuy
1244,2015-09-30 17:58:26,"@ksmandersen can you point me to a repo where you fixed this? I have the same issue, but do not understand what the error means.
",mattkorp,ksmandersen
1243,2014-12-18 18:33:33,"@timanglade I don't think you fully understand why people keep hitting the file size issue. It isn't an issue of compaction or due to the size of allocations. Its due to the fact that we often times hold onto sparsely populated blocks of data unnecessarily. The real solution is to not hold onto unneeded blocks which is the actual problem here, and none of the workarounds you suggest actually solve this issue and have the following issues:
- Users can already compact their db using writeCopyToPath. The big problem with any of this type of solution is that users don't know they need to call this method (because if everything else worked they shouldn't have to), and there is a good possibility that calling a compaction method could induce noticeable lag in apps.
- Auto-compacting after deletes doesn't make any sense. You don't need to delete any objects to trigger the space wastage - you only need to create object in many write transactions while there is another existing read transaction. What might make sense is auto-compacting after a large number of write transactions resulting into unreferenced blocks. The only way I could see this working is if compaction and writes in general happened in the background to prevent blocking a user's app.
- Changing the allocation size isn't going to fix anything. It could prevent a few users from hitting the limit, but at that point they still have the issue of wasting a huge amount of disk space. One thing we could change is the branching factor in core which will slow the rate that space is wasted, but that is a separate issue entirely.
",alazier,timanglade
1243,2014-12-18 20:52:25,"To recap the four potential actions mentioned during the course of this thread:
1. Do we agree that we should not **auto-compact** for the foreseeable future, even once realm/realm-core#591 is in?
2. Anybody strongly against renaming `writeCopyToPath:` to something like  `writeCompactedCopyToPath:` to help discovery of the only current compaction mechanism? It seems like it may be some time before we can offer something better/safer to users.
3. ~~**Allocator**~~ — I already wrote up a ticket about re-evaluating the allocation scheme in core
4. ~~**Sparsely-populated blocks**~~ — a close reading of #1034 seems to indicate that that ticket tracks @alazier’s issue with sparsely-populated blocks
",timanglade,alazier
1243,2014-12-18 21:49:12,"@astigsen we’re actually not talking about the read/write thing, just about the normal allocation/release schemes that do cause some space waste, even if you don’t hit the thing we added invalidate for.
",timanglade,astigsen
1243,2014-12-19 09:27:21,"Just had a conversation about this with @astigsen and @bmunkholm. Takeaways:
1. We believe that now that we have `invalidate`, there are very few legitimate cases in which you would need to compact files in-place. That said, there will be a few, so we do need to have an in-place compaction method somewhere in our API. If we expose one, we have to assume people will try to use it, and as @tgoyne highlights, it’s very easy to shoot yourself in the foot with the current (& proposed) compaction methods.
2. @astigsen comments that realm/realm-core#591 may not be safe enough. There may be scenarios under which we could endure shadow writes or even corruptions if people try to read the file while it is compacted. We need to design a live compaction mechanism that assumes the file will be read while it is compacted.
3. Once it is live in core, we should expose this safe compaction as an in-place `compact` method on RLMRealm — we can debate hiding this method from our public API if we want.
4. Optionally, we can debate running `compact` automatically after people call `deleteAllObjects`, since that’s the scenarios people seem to hit most often.
",timanglade,astigsen
1243,2014-12-19 09:27:21,"Just had a conversation about this with @astigsen and @bmunkholm. Takeaways:
1. We believe that now that we have `invalidate`, there are very few legitimate cases in which you would need to compact files in-place. That said, there will be a few, so we do need to have an in-place compaction method somewhere in our API. If we expose one, we have to assume people will try to use it, and as @tgoyne highlights, it’s very easy to shoot yourself in the foot with the current (& proposed) compaction methods.
2. @astigsen comments that realm/realm-core#591 may not be safe enough. There may be scenarios under which we could endure shadow writes or even corruptions if people try to read the file while it is compacted. We need to design a live compaction mechanism that assumes the file will be read while it is compacted.
3. Once it is live in core, we should expose this safe compaction as an in-place `compact` method on RLMRealm — we can debate hiding this method from our public API if we want.
4. Optionally, we can debate running `compact` automatically after people call `deleteAllObjects`, since that’s the scenarios people seem to hit most often.
",timanglade,tgoyne
1236,2014-12-17 03:58:23,"Hi @newlix, I'm not sure why you're sharing this with us.

We actually check for the getter selector (generated from the getter name), not necessarily the property name. So I'm pretty sure we're ok here, but keep in mind that we recently fixed a bug in that part of the code (see #1230).

Is there a case in which this doesn't work for you? If so, we'll need more information to replicate the issue.
",jpsim,newlix
1236,2014-12-17 04:27:40,"Hi @jpsim , Thanks for the quick reply.

I used a PFObject (https://parse.com/docs/ios/api/Classes/PFObject.html) as the object for [RLMObject createOrUpdateInDefaultRealmWithObject:]. The PFObject instance doesn't have any getter for its properties. It uses subscript or valueForKey: to access its properties. It should be KVC compliant, but I can't use it directly in [RLMObject createOrUpdateInDefaultRealmWithObject:] because the [value respondsToSelector:prop.getterSel] check.
",newlix,jpsim
1235,2014-12-19 01:26:38,"@tgoyne @alazier I've updated the wording. Better? If not, please suggest another message.
",jpsim,alazier
1228,2014-12-15 19:06:21,"You're right on all counts, @FredericRuaudel! I've made a PR with your fix (along with a previously failing test) at #1230. In the future, you should file a PR yourself: just make sure to [sign our CLA](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) first :wink:.
",jpsim,FredericRuaudel
1227,2014-12-15 18:27:49,"Hi @unchartedworks, this isn't enough information to understand what may be causing a crash. Could you provide more details by answering the following questions?
1. What issue are you having?
2. What are the steps to reproduce this issue? (i.e. what does your data model look like? are you using Swift or Objective-C? which version of Realm are you using?)
3. What are the expected result?
4. What are the actual results?
",jpsim,unchartedworks
1227,2014-12-18 19:29:17,"Thanks for the info, @unchartedworks. Could you share what your data model definition looks like in code so that we can attempt to replicate the issue? A full Xcode project that replicates the issue would be even better!
",jpsim,unchartedworks
1227,2014-12-19 08:45:04,"@jpsim Thanks! I am sorry. I have difficulties to provide this Xcode project. I work for this project, but I don't own this project.


",unchartedworks,jpsim
1227,2014-12-30 19:31:04,"Hi @unchartedworks did you get this to work? Can you share the code where you add the object to the realm as well?
",yoshyosh,unchartedworks
1227,2015-01-07 13:44:10,"Hi @yoshyosh 


",unchartedworks,yoshyosh
1227,2015-01-07 17:37:38,"Thanks @unchartedworks can you share the code where you make the object and where you use saveObjects too?
",yoshyosh,unchartedworks
1225,2014-12-15 18:56:11,"@alazier thank you very much! I really appreciate what you are doing.
",shmidt,alazier
1224,2014-12-13 19:11:18,"@bmunkholm linking objects across Realms is not something that we will ever support with the given design, so it doesn't make sense to keep this open.

If users need this they can either copy objects across Realm, or they can use primary keys to reference objects across multiple Realms. Both of these scenarios are already supported in the binding.
",alazier,bmunkholm
1220,2014-12-13 01:47:00,"@segiddins with #1221 now merged, you should add baselines for both CI machines for this test.
",jpsim,segiddins
1218,2014-12-12 17:14:00,"@jpsim this bug is #1218 - it can't be a duplicate of itself!
",alazier,jpsim
1217,2014-12-15 19:38:38,"Hi @jrpetersjr, there's nothing stopping you from doing this yourself by writing a file to disk and storing its path in the Realm. We may consider adding an option to do this automatically in the future, but since there are suitable workarounds already, this is fairly low on our priority list.

We welcome pull requests, though if you'd like to add this functionality yourself! :wink:
",jpsim,jrpetersjr
1216,2014-12-15 19:33:44,"Hi @mttrb, thanks for the PR. You'll need to [sign our CLA](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla) before we can merge this.

I'd also prefer if you could keep the script in `install_templates.sh` rather than Xcode. The Xcode build phase could be `cd Templates && osascript install_templates_applescript && sh install_templates.sh file` with `install_templates.sh` taking an argument `class` or `file` to determine which ones to install.
",jpsim,mttrb
1216,2014-12-17 05:59:44,"Thanks, @mttrb. With an even nicer solution than I had thought!
",jpsim,mttrb
1213,2014-12-11 22:04:51,"@marciok, `persons.objectAtIndex()` will return an optional, i.e., `Person?`. If you change your code to the following, it should work:


",segiddins,marciok
1213,2014-12-11 22:38:57,"@marciok I'm glad you were able to figure it out!
",segiddins,marciok
1212,2014-12-11 19:44:18,"@youens forgot to ask, can you share some code here (or privately to help@realm.io) that recreates the issue?
",timanglade,youens
1212,2014-12-19 01:31:46,"Hi @youens, we just released Realm 0.89, which fixes a few bugs and adds quite a few consistency assertions and validation checks.

I strongly encourage you to update your apps to 0.89 as soon as possible. If corruption or crashes happen again, the backtrace is likely to have more information so we can identify what happened and increase the odds of fixing it.
",jpsim,youens
1212,2015-01-15 20:47:37,"Thanks @semireg. We should be tackling these emails now. Anything reproducible is good news for us (and for you), and those crashes are our top priority. Please do send a project along if you can, otherwise, stay tuned for response from us on those emails.
",timanglade,semireg
1206,2014-12-09 21:25:53,"@jpsim in ruby, it's not uncommon to the that exception messages match a given regex. If you'd like, I _could_ add a test case in that vein.
",segiddins,jpsim
1196,2014-12-08 19:19:47,"@ethanjdiamond I just tried to reproduce this with the code you provided both on Xcode 6.1 and 6.2beta, and did not get a crash. Could you give us some more information, such as a backtrace for the exception and the version of Xcode you're using?
",segiddins,ethanjdiamond
1196,2014-12-08 19:25:07,"@segiddins Thanks for following up! I'll send that info over when I get home from work.
",ethanjdiamond,segiddins
1192,2015-05-22 18:03:46,"@jpsim thanks! 
",zipme,jpsim
1192,2015-06-09 11:38:42,"@jpsim I have tried your `compoundKey` example. But I'm getting an exception saying that `compoundKey` can not be set to ""-"" which means that it tries to call `compoundKeyValue()`  before the other properties are set. Also I have found that `didSet` is never called when I use create method and give it a JSON value. Is there any workaround to have compoundKey and create object by JSON value at the same time?
",IsmailHassanein,jpsim
1192,2015-09-03 16:57:10,"+1 @phaphan I'm at the same point 
",eduardomartines,phaphan
1192,2015-09-03 17:45:33,"Thanks @jpsim , your reply clarifies this matter, and I get the idea behind the implementation you propose. However, I was looking for a neat automated way of performing a _createOrUpdateInDefaultRealmWithValue_ operation from a dictionary (JSON response) object, 
e.g. by



without having to manually derive a compound key for each object. In other words, I was looking for a way of instructing my object model to do this by itself ;)
",phaphan,jpsim
1192,2015-12-08 17:44:02,"@sokal32 looks like your issue may be fixed by #2901, although that implementation is still a work in progress. In the future, please file new issues as new issues on GitHub. Commenting on unrelated, months-old issues is easy for us to miss.
",jpsim,sokal32
1184,2014-12-05 21:36:05,"Hi @exsortis, there are already a few Realm pods out there. you should take a look at how they're set up:
1. [ARNRealmExtension](https://github.com/xxxAIRINxxx/ARNRealmExtension)
2. [MRRealmResultsController](https://github.com/hectr/MRRealmResultsController)
3. [Realm+JSON](https://github.com/matthewcheok/Realm-JSON)

Feel free to re-open this if you believe there's something stopping you from integrating Realm into your CocoaPod even after looking at these other pods' configurations.
",jpsim,exsortis
1180,2014-12-04 19:55:15,"@tgoyne. Agreed, but a library should not throw uncatchable exceptions when there is a simple fix.

The issue here is the incorrect use of `dispatch_once` making the library non-crash-safe.
",iosdevzone,tgoyne
1179,2014-12-23 19:24:05,"@bigfish24 to calculate changesets for animation purposes, you'll have to do that diffing yourself.

It won't be a problem to iterate on an `RLMResults` while modifying its contents from a different transaction. This issue refers to modifying an `RLMResults` in the same transaction while iterating over it, so that shouldn't affect you in this case.
",jpsim,bigfish24
1176,2014-12-08 22:15:20,"Posting an update here for the sake of transparency, we've received a code sample and a possibly corrupt realm file from @buddax2. We'll update here once we find out more about this issue.
",jpsim,buddax2
1174,2014-12-05 01:13:58,"@GreatApe ok to merge? I didn't update `RLMArray` to `RLMResults` since it's wasteful to do that when your PR does it.
",jpsim,GreatApe
1172,2014-12-03 18:37:33,"Actually @tspecht, I'm having trouble seeing how this:



would be better than this:



or this in case the modification changes the results:


",jpsim,tspecht
1172,2014-12-03 18:56:47,"@jpsim I actually also thought of a more low-level implementation like @astigsen . I guess it would be far more efficient than looping over the result set and would also increase the code readability.
",tspecht,astigsen
1172,2014-12-03 18:56:47,"@jpsim I actually also thought of a more low-level implementation like @astigsen . I guess it would be far more efficient than looping over the result set and would also increase the code readability.
",tspecht,jpsim
1172,2014-12-03 19:05:44,"@jpsim :+1: Is the core actually able to do this in a performant way? I don't know how TightDB is implemented, but just in case it uses a dictionary based approach to store the actual values this probably could be done very efficient.
",tspecht,jpsim
1172,2014-12-04 18:03:31,"@tgoyne we do currently have to create accessors for each row, unless we want to do a significant rewrite of the binding which does not seem worth it at this time. If the speedup were orders of magnitude rather than < %50 I might lean in the other direction.

The idea of having `setValue:forKeyPath:` on RLMResults seems completely wrong as well, since there are no other mutation methods/operations on RLMResults.
",alazier,tgoyne
1171,2014-12-03 16:03:53,"Hi @tspecht, `0.88` still supports that predicate and running a few NOT IN tests on my side works fine. Can you confirm that Realm `0.87.4` didn't have this issue?

It would be tremendously helpful if you could add a failing test case to [`QueryTests.m`](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/QueryTests.m) or paste a reproducible case here.
",jpsim,tspecht
1171,2014-12-09 01:56:21,"This functionality seems to work in the tests @jpsim added. Can you still reproduce this?
",alazier,jpsim
1171,2014-12-09 08:16:09,"@alazier Seems fine now, sorry for the confusion :)
",tspecht,alazier
1166,2014-12-01 18:45:24,"@astigsen yes, `[SIZE]` should be equivalent to `@count`, though `@count` is more common.
",jpsim,astigsen
1163,2014-12-06 07:51:46,"@tonyarnold I don't think that's related. The carthage issue is that built artefacts in `Carthage.build` contain `x86_64` and `i386` architectures that are rejected by the app store :(
",alanjrogers,tonyarnold
1163,2014-12-06 19:12:46,"@alanjrogers that's the same issue we're having here.

In a nutshell, we're currently including simulator and device symbols in a fat framework binary. In static libraries, Apple strips them out as part of the archive process, but they don't yet do this for dynamic libraries.

This is a bug that apple should fix. But in the meantime, we need to find a work-around. One way would be to have 2 frameworks (1 for simulator, 1 for devices). Another option could be to have an archive build phase to strip out the simulator symbols.

I'm curious to see what solution the Carthage people come up with.
",jpsim,alanjrogers
1163,2014-12-10 21:40:29,"Thanks for the high quality radar, @jspahrsummers! Duped.
",jpsim,jspahrsummers
1163,2014-12-19 00:17:57,"Actually, I was wrong. My radar was closed as a dupe of @jspahrsummers'. Apple's world-class bug report UI confused me.
",jpsim,jspahrsummers
1162,2014-12-01 15:04:59,"We could keep the previous checks and have an additional preprocessor check for OSX platform and DEBUG build. Would that work for you @tgoyne?
",jpsim,tgoyne
1160,2014-11-28 10:33:18,"@Kirow: Thanks for your humble opinion. Did you even bother reading the discussion at the provided link?!

how is



unclean code?

IMHO, Realm should not be doing sorting in my tableView's dataSource at


",kunalsood,Kirow
1160,2014-11-28 10:44:37,"@kunalsood, Sorry, I did not read thread cuz it was on google group. And of course there should be no refetching/resorting on count if content did not changed. but I thought it already works this way, i'll check it on weekends.
",Kirow,kunalsood
1160,2014-11-28 18:16:01,"Hi @kunalsood, you're right that Realm could optimize `count` operations to skip the sorting step if the query hasn't yet been constructed.

We've noted this as a possible optimization and will address it as quickly as possible.

In the meantime, it's likely that you're making Realm do quite a bit more work than is required. It sounds like you're re-running your table view query in `tableView:numberOfRowsInSection:` to get the count. In the mailing list, you state that you're simply returning `self.array.count`. Is this a stored property or a computed property? i.e. are you overriding the getter of this property to return `[[Article allObjectsInRealm:realm] sortedResultsUsingProperty:@""date"" ascending:YES]` or are you assigning `self.array` to the result of that query in `-[RLMRealm addNotificationBlock:]`?

You can always refer to our reference `UITableViewController` implementation in the `examples/` directory of this repo ([link to table view controller](https://github.com/realm/realm-cocoa/blob/master/examples/ios/objc/TableView/TableViewController.m)).
",jpsim,kunalsood
1160,2014-11-29 05:51:48,"Hi @jpsim, Thanks for your response, and for considering this optimization. One thing I noticed in your reference `UITableViewController` implementation is that, `self.array` is assigned to the result of the `[[DemoObject allObjects] sortedResultsUsingProperty:@""date"" ascending:YES]` query every time a notification is posted. Wouldn't this mean that the query is executed every time we receive a notification?
I ask because, from my understanding of how `RLMResults` works, it should already have the changes made to the underlying Realm when a notification is posted, which would mean that calling `reloadData` on the `tableView` is all that would be needed.

The reference implementation was actually one of the first things I saw, and initially did exactly as it demonstrates, but later, as my query results got larger and the query itself slower (and started blocking the UI), I changed my implementation to only do the query once, right before setting realm notification block in my `viewDidLoad`, and `-[RLMRealm addNotificationBlock:]` only does `[weakSelf.tableView reloadData]`. So, yes, I'm assigning self.array to the result of the query, but unlike the reference implementation, I'm only doing that once. Could that explain why Realm needs to do a count query everytime I reload my tableView after receiving a notification?
",kunalsood,jpsim
1160,2014-12-01 22:25:03,"Hi @kunalsood, we'll be making some changes to how `count` works in the near future to make it possible to get the count without constructing the underlying tableview in Realm's core. We'll update this issue when we have more to share.

Thanks for pointing out that we're setting `self.array` on every notification in the `objc/TableView` example. I just pushed #1168 to fix that. All our other examples already did this correctly.

Even with this change, `count` will be called every time `tableView:numberOfRowsInSection:` is called, which happens on each `reloadData`, which we call on every `RLMRealm` notification.
",jpsim,kunalsood
1160,2015-01-08 01:40:09,"@segiddins that optimization was made before this issue was opened. Calling `sortedResultsUsingProperty` requires a tableView to exist which is expensive. Only calling `count` doesn't require tableView construction and is usually much faster. It seems that @kunalsood understands this based on his original post (that calling count alone on RLMResults is much faster than calling count on a sorted RLMResults).

I think what is being asking for here is to do tableView creation lazily when calling `sortedResultsUsingProperty`. This is possible but would require a bit refactoring and storing the sort state both in the binding and in core which is something that would be good to avoid. 
",alazier,kunalsood
1160,2015-01-08 01:40:09,"@segiddins that optimization was made before this issue was opened. Calling `sortedResultsUsingProperty` requires a tableView to exist which is expensive. Only calling `count` doesn't require tableView construction and is usually much faster. It seems that @kunalsood understands this based on his original post (that calling count alone on RLMResults is much faster than calling count on a sorted RLMResults).

I think what is being asking for here is to do tableView creation lazily when calling `sortedResultsUsingProperty`. This is possible but would require a bit refactoring and storing the sort state both in the binding and in core which is something that would be good to avoid. 
",alazier,segiddins
1160,2015-01-08 01:48:48,"The last time we spoke about this, we decided to add two methods to improve transparency and performance: `-[RLMResults evaluate]` and `-[RLMResults isEvaluated]`. With these methods, calling `-[RLMResults count]` would never create the tableView and users would have more control over when table views are actually constructed.

Should we create a GitHub issue to implement this, @alazier @tgoyne?
",jpsim,alazier
1159,2014-11-27 21:06:36,"Hi @tspecht what exception was logged in the console? The stack trace doesn't tell us that, though the issue seems to be when committing a write transaction after creating tables for the first time in the app's lifecycle.

Are you hitting this on a space or memory constrained device? Certain iOS devices have very small addressable virtual memory space, which limits how much can be mmapped at once (rdar://17119975).

Can you tell us the size of your realm file when this exception is thrown?

Thanks for your help!
",jpsim,tspecht
1159,2014-11-27 21:10:43,"@jpsim  The exception was the following:



I'm hitting this on many devices in production, one of my test devices actually turned up to have the same issue. The system settings suggest, that it only has 22MB of space left on ""disk"". Could it be the case that since the realm is not purged after deleting objects its getting bigger than the device can handle? It for sure was no first time table creation, the tables where already existing, some objects where about to be newly created while others where supposed to be deleted. I will try to get my hands on the realm file size tomorrow 9am my time (Germany)!
",tspecht,jpsim
1159,2014-11-28 10:46:12,"@jpsim I got the realm size. It is an astonishing 201.3 MB! Why is it that large?!
",tspecht,jpsim
1159,2014-11-28 18:51:22,"@jpsim I used the writeCopyToPath and got the realm from 201mb to 510kb. Guess it really is worth it? I'll keep that workaround in mind when I'm releasing my next version but probably others have the very same problem.
",tspecht,jpsim
1159,2014-11-28 19:16:58,"@tspecht Realm's file size is typically extremely small when compacted. Writing a new compacted copy is likely to be faster than compacting in-place for the vast majority of situations.

However, it's also very inconvenient:
1. finish all transactions in original realm
2. `writeCopyToPath:`
3. nil out all `RLMRealm` instances
4. move compacted realm copy to original realm path
5. resume application

So having an in-place compact method will be simpler (single write transaction), but slower.
",jpsim,tspecht
1159,2014-11-28 19:31:14,"@tspecht I'd rather users be aware of these steps (and their implications). The ""convenience method"" should be true, in-place compaction.
",jpsim,tspecht
1159,2014-12-03 08:53:15,"@jpsim I tried the manual way and succeeded somehow. I came up with the following, very hack code:



As you can see, I'm calling the default realm to get the path of it to replace it afterwards. Therefore, the handle for the realm is cached internally and I haven't found a way yet to release that one from the cache, leading to strange crashes afterwards. Is there any possibility to ""flush"" the realm handle cache that is used internally?
",tspecht,jpsim
1159,2014-12-03 08:57:44,"@jpsim ah okay didn't see that method, that is probably from the new release, right? And I still need to call the writeCopyToPath on the defaultRealm so I really need to access the realm once I guess. I'm aware of the possible side effects, thats why I execute the code in the very beginning of my application: didFinishLaunchingWithOptions. Is there any way I could do this ""safe""?
",tspecht,jpsim
1159,2016-03-20 22:11:23,"@JosephZZ please don't post on old, closed issues, it makes it quite difficult to find and address your comments. Please file new issues, with full information and repro steps for bugs so we don't have to go digging around for context.

In this case, it seems like you may be using private Realm APIs or modifying the file on disk while it's still being accessed, but it's hard to say with your comments spread over several GitHub tickets.
",jpsim,JosephZZ
1158,2014-11-28 10:13:34,"Thanks @jpsim the first one worked for me.. I forgot to mention that the second one I wanted all the menus from a specific user
",fnxpt,jpsim
1156,2014-11-28 22:14:58,"FYI the Java team went with `Realm.close()` for the name. That’s shipping in realm-java 0.75 on Monday, so speak your mind now or hold your peace forever? I get @tgoyne’s point about the fact we don’t close the file, but we do close the transaction so I think it’s fair.
",timanglade,tgoyne
1156,2014-11-28 22:51:23,"Realm.close() in Java is closing the sharedGroup and freeing it. Not just
ending a read transaction.
Java has an interface called ""closable"", which implies having a method
called ""close"". And this is the standard interface to implement for
anything that has resources that must be closed manually (due to native
resources, and since we can't rely on garbage collection). So for Java
there is no choice for the name. But again that's for closing the realm
file, not just endReadTransaction.

On Fri, Nov 28, 2014 at 11:15 PM, Tim Anglade notifications@github.com
wrote:

> FYI the Java team went with Realm.close() for the name. That’s shipping
> in realm-java 0.75 on Monday, so speak your mind now or hold your peace
> forever? I get @tgoyne https://github.com/tgoyne’s point about the fact
> we don’t close the file, but we do close the transaction so I think it’s
> fair.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/1156#issuecomment-64931634.
",bmunkholm,tgoyne
1156,2014-12-01 17:15:49,"I think the use-case is 90% the latter (we just want to say “call this method if we tell you that it fixes the problem you're reporting”), but we want to be able to pepper it in the right sample apps and code samples. In either case, our answer shouldn’t invite more questions such as “wait why do I never call beginReadTransaction?” or “what’s a read transaction in Realm”? i.e. we should either stick with completely hiding read transactions from Realm, or expose them fully, but just having one method allude to it indirectly is absolutely not the right way to go, from a user standpoint.
- Assuming we want to keep hiding the concept of a read transaction to the user, I think `close` is the best bet. It’s innocuous enough and will coincide with what we use on the Java side. If you really really dislike `close`, we could use `detach`, `sleep`, `drift`, or any other word you can think of that does not invite a direct symmetry. Functionally that method should have the same visibility & impact in our API than `refresh` or the properties `path` and `schema` i.e. something useful & easy to remember for advanced users but that shouldn’t trouble or pique the interest of a novice user.
- If you want to expose read transactions to the user (e.g. if we think this method should totally pique the interest of a novice users) let’s close this PR and design a proper API.

@astigsen: I get your point but I think there are very few things in the world, if any, that should make us consider introducing another top-level class.
",timanglade,astigsen
1151,2014-12-05 22:24:56,"@alazier yes it still is on my side!
",tspecht,alazier
1149,2014-12-01 21:51:42,"Thanks for reporting this, @wgywgy. This is being fixed in #1156.
",jpsim,wgywgy
1148,2014-11-27 20:55:00,"@alazier any updates on this?
",tspecht,alazier
1148,2014-11-27 21:14:22,"@tspecht support for freezing `RLMResults` will take some time. Until then, you should treat RLMResults just as you would an `NSMutableArray` when mutating within iteration.

Here's a different version of your code above that takes into consideration mutating the `RLMResults` during iteration:


",jpsim,tspecht
1148,2014-12-08 19:23:28,"I am closing this as a duplicate of #1179.  In the meantime @jpsim 's suggestion should hopefully suffice.
",alazier,jpsim
1145,2014-11-22 00:21:27,"@tgoyne now storing defaults in schema
",jpsim,tgoyne
1145,2014-12-05 01:05:55,"@alazier @tgoyne any objections to merging this?
",jpsim,tgoyne
1144,2014-11-24 18:23:13,"Ah, all true. Many things I did not think through. Thanks for the feedback, one day I will submit a useful PR. 😅

@alazier Yeah, that will at least help catch the bug. Though I think somehow that error will need to explain that the loop might have silently changed the results array, as a debugging help.
",mrh-is,alazier
1141,2014-11-21 14:56:42,"@alazier I figured ;) Let me know if you need more info!
",tspecht,alazier
1141,2014-12-05 11:38:33,"I just released an update and it seems to be running fine regarding this issue for now. Guess this can stay closed, thanks for the fix @alazier !
",tspecht,alazier
1140,2014-11-21 14:58:41,"@alazier I was def. updating a Realm which was using schema version 4, also was running in Debug from Xcode so that also should work. Would be nice if you could look into it.
",tspecht,alazier
1138,2014-11-21 17:48:23,"Hi @pizthewiz, you're right that this works when overriding `class func defaultPropertyValues() -> [NSObject : AnyObject]!` but not when using Swift's native default property values.

This is a bug and we'll fix it as soon as possible. In the meantime, you can override `defaultPropertyValues()` as a workaround.
",jpsim,pizthewiz
1132,2014-11-21 21:41:17,"We're aware of this limitation. Please see #1109 for more information. Closing as duplicate of #1109. @mrh-is you can subscribe to that thread for updates.
",jpsim,mrh-is
1131,2014-12-06 19:50:33,"@tgoyne you seem to have made good progress on this in `tg-lldb-swift`. What's missing? Is it still a question of improving performance?
",jpsim,tgoyne
1129,2014-11-15 01:53:14,"@jpsim got it. Thx.
",shuoli84,jpsim
1126,2014-11-24 18:18:20,"Hi @Pacek, could you provide more information about the issue you're having? Are you getting the following log message, exactly?

> Error Domain=io.realm Code=6 ""/var/mobile/Applications/24C981CC-5D88-478B-AD13-260DFBC7DB91/Documents/default.realm.lock"" UserInfo=0x16ece4f0 {Error Code=6, NSLocalizedDescription=/var/mobile/Applications/24C981CC-5D88-478B-AD13-260DFBC7DB91/Documents/default.realm.lock}
",jpsim,Pacek
1125,2014-11-20 16:20:19,"@alazier aha :D
",dismory,alazier
1124,2014-12-08 15:59:00,"@tgoyne so we just need a final review from @alazier?
",timanglade,alazier
1124,2014-12-08 15:59:00,"@tgoyne so we just need a final review from @alazier?
",timanglade,tgoyne
1124,2014-12-17 17:15:39,"As pointed out in #949 @tgoyne should write a quick doc section for this on the website.
",timanglade,tgoyne
1120,2014-11-12 20:17:54,"Hi @andrewjl, the reason `RLMArray` properties can only contain other `RLMObject`-derived objects is that tables in the underlying db must already exist for those objects. At that point, the `RLMArray` property just contains pointers to the relevant rows in that object type's table.

There are two fundamental ways we could add support for primitive types in Realm.

1) when a property of type `RLMArray<NSString>` is added to an RLMObject, we could create a table for `NSString` with a single column of type `tightdb::type_String` (Realm's core String type). This would essentially be the same as creating your own RLMObject wrapper around NSString, which is the approach we currently recommend, but with the added advantage of the strings not being ""boxed"". So this approach only adds syntactic sugar.

2) change Realm's modeling approach altogether by defining models using a protocol rather than subclassing. This way, you could persist _any_ object in Realm, as long as it conforms to the Realm protocol. However, this approach is quite complex to implement and would require a considerable amount of development time, and would probably be more work for users as well.

So although we agree it'd be nice to store `RLMArray<NSString>` properties or `RLMArray<NSDate>` properties, it's not currently a high priority. We'll be sure to comment here once we have something to announce.
",jpsim,andrewjl
1120,2014-11-13 04:05:47,"Thanks @jpsim for the explanation. I can see how option 2 would be complex to implement. Option 1 seems more doable, would you be willing to consider a pull request implementing it for arrays of `NSString`? (As well as the Swift equivalent.)
",andrewjl,jpsim
1120,2015-04-24 02:38:49,"@jpsim based on our chat in person (at the carthage event) it sounds like the best solution would be to do what Realm already requires the user to do automatically, and transparently.

Seems like the best place to do this would be in `RLMProperty`, inside of `setTypeFromRawType`, where the `RLMPropertyTypeArray` case is handled. Instead of throwing an exception when `RLMIsObjectSubclass` returns false, we instead check the `_objectClassName` against a white list of class names (Just `NSString`,and `NSNumber` would be a good start) and then do what Realm would usually do with an `RLMObject` the user would provide as the inner class of the array.

Let me know if you think this is in the right direction. Also happy to provide more details if this is too high level.
",andrewjl,jpsim
1120,2015-12-31 16:39:43,"I have a need to store arrays of Ints as Object properties. Thanks @peterpaulis for your code sample above. I do agree that is a lot of code for something that seems commonplace and expected.

Although explicit support for collections of primitive types would be great, it seems to me a better fallback position would be to have some sort of a general mechanism for property transformations. Most other ORMs will allow you to define 2 way transforms for ""custom"" property types.

Another idea would be to create something like a JSON primitive type that could automatically be transformed to/from a Dictionary or Array.

Still, these are both just catchalls, for when the framework can't handle something different. I still would expect collections of primitives to be something that is supported out of the box.

BTW - I'm working on switching my project from couchbase-lite to realm. Array properties were a big source of difficulty for me on couchbase too.
",jpaas,peterpaulis
1120,2016-01-17 22:20:26,"I would love to help get this out sooner. @timanglade @jpsim I have some familiarity with the objective-c part of the codebase. If I can get some guidance as to where to start and what approach to take (at a high level) I'm happy to get the ball rolling on this.
",andrewjl,jpsim
1120,2016-04-05 13:36:09,"As alternative to encoding the array via NSData as @peterpaulis suggests, you can workaround around this limitation for now by explicitly adding a new model entity as e.g. `StringObject`, which holds only a single property of type string. This has the advantage that it is easier to filter.
",mrackwitz,peterpaulis
1120,2016-04-05 13:38:02,"@mrackwitz Thanks, thats what I was thinking to do, but could not get it working.
Can you please send me a sample json and models for it.
Much appreciated, Thanks in Advance :+1: 
",jazz-mobility,mrackwitz
1120,2016-10-20 21:04:30,"@jazz-mobility What does the `<-` operator in your code do? I can't find any mention of it.
",dmdque,jazz-mobility
1120,2016-10-20 23:35:16,"@dmdque he is probably using this library here: https://github.com/Hearst-DD/ObjectMapper
",heyzooi,dmdque
1118,2014-11-18 16:08:28,"@timanglade thanks very much for the confirmation that this indeed was a problem in Realm. I will look into changing my code but I'm afraid it has to stay like this for now. Is there an ETA on the fix?
",tspecht,timanglade
1115,2014-11-12 07:33:06,"@kunalsood That kinda matches my observations!
",tspecht,kunalsood
1115,2017-01-18 16:31:19,"@ppaulojr Unfortunately, this was never resolved. I resorted to (and still am doing so) converting my RLMResults object to an NSSet using something like `[NSSet setWithArray:[resultsObject valueForKey:@""self""]];`, and then applying the `NOT IN` predicate to this set using `filteredSetUsingPredicate:` which appears to be fast/efficient enough for majority of my use cases.

Either way, you might have better luck getting attention on this issue by opening a new issue, as this issue has been closed for over 2 years now.",kunalsood,ppaulojr
1111,2014-11-10 23:54:09,"Hi @ithinco, what version of Realm are you currently using? This bug should have been fixed in v0.87.4 (latest version). You can see the fix in this commit: 54da5a2704d5a170995bf9be13468fbbf20d7e49
",jpsim,ithinco
1111,2014-11-11 06:12:08,"@jpsim this issue has been solved by upgrading to v0.87.4
",ithinco,jpsim
1109,2014-11-11 00:20:27,"Hi @Kirow, there's definitely value in your modeling approach, but Realm's current inheritance implementation doesn't allow for the polymorphism you're looking for.

Your first goal would be fairly easy to support (avoiding creating unused tables in the db). However, empty tables in Realm are very small so even though this is annoying, it shouldn't have any significant performance or usability impact. If you're keen on filtering which tables are created in Realm, you could patch `RLMSchema`'s [`+initialize`](https://github.com/realm/realm-cocoa/blob/master/Realm/RLMSchema.mm#L80) method.

The second goal highlights a more general sore point in Realm's architecture, which is that containers for a class (`RLMResults` or `RLMArray`) can't contain instances of its subclass. So for this reason, we can't include subclasses in `[RLMObject allObjects]` for now.

So for the time being, you'll have to adapt your model to fit with Realm's inheritance approach. Meanwhile, we'll keep an eye on possible modeling improvements for Realm and we'll make sure to update this thread when we have anything to share.
",jpsim,Kirow
1109,2014-11-20 09:27:13,"I am having a similar issue to @Kirow's, I have an RLMArray defined to store an abstract class, and storing there subclasses of the abstract class, but of course is giving me back instances of the abstract class. 

It will be really awesome if Realm supports this in the future.
",raspu,Kirow
1109,2015-07-10 20:34:19,"@jpsim So what kind of inheritance/polymorphism _is_ available in Realm at this time? From what I can see, with no polymorphism in querying, nor in relationships, there's basically _no inheritance_ supported.
",nekonari,jpsim
1109,2016-03-04 00:42:02,"@mrackwitz Let me ask you about `primaryKey`. If `Animal` has `id` as `primaryKey`, what property is the best to `Duck` and `Frog` for `primaryKey`?
`animal`, `animal`'s `id` or new `id`?
",wanbok,mrackwitz
1109,2016-03-04 14:11:56,"@wanbok: You would need to manually take over the value of the `id` property on `Animal` into a property you defined in each of your classes, here `Duck` and `Frog`. Only 'string' and 'int' properties can be designated the primary key.
",mrackwitz,wanbok
1106,2014-11-07 21:34:28,"@bmunkholm current time should be fine, but the titles are random because they can't be incremental without also adding a thread-safe title generator.

@alazier agreed.
",jpsim,bmunkholm
1106,2014-11-07 21:34:28,"@bmunkholm current time should be fine, but the titles are random because they can't be incremental without also adding a thread-safe title generator.

@alazier agreed.
",jpsim,alazier
1106,2014-11-11 20:45:53,"Latest commit
- adds a separate GroupedTableView example so we can keep the dead simple TableView example
- only re-queries each section when a change notification is received instead of on every object access
- uses current date instead of random date

@alazier @yoshyosh 
",jpsim,alazier
1105,2014-11-10 09:15:33,"Hi @jpsim , I would really like to provide you some code. Unfortunately I got the stack trace from my crash reporting tool that is used for production and I'm not able to get any more data regarding the occurrence in my code from it. Could it be that there is an issue with dispatch_async?
",tspecht,jpsim
1105,2014-11-11 10:15:34,"@jpsim I really would like to do that but I still got no trace indicating the occurrence in my code. I will keep looking, maybe I'll find some pattern. Actually it indeed only seems to occur in background threads as for example in com.apple.root.default-qos
",tspecht,jpsim
1105,2014-11-18 16:11:12,"@timanglade I see your point but unfortunately I'm myself quite clueless where the error originates from since the stack traces I receive from production are just not containing any useful information at all. But since the crash occurs in a background queue I highly suspect that the core issue is related to the one described in #1118. Could it be the case that it is not a wise idea to access the realm of an object using myObject.realm in a background thread / in a highly concurrent scenario?
",tspecht,timanglade
1105,2014-12-19 01:32:34,"Hi @tspecht, we just released Realm 0.89, which fixes a few bugs and adds quite a few consistency assertions and validation checks.

I strongly encourage you to update your apps to 0.89 as soon as possible. If corruption or crashes happen again, the backtrace is likely to have more information so we can identify what happened and increase the odds of fixing it.
",jpsim,tspecht
1104,2014-11-07 18:20:53,"Hi @fnxpt, it's certainly possible to bundle a realm file with your shipping app. The [Migration](https://github.com/realm/realm-cocoa/tree/master/examples/ios/objc/Migration) sample app in this repository demonstrates how to do this.

You can create a separate app to generate your Realm file containing your reference data. The [JSONImport](https://github.com/realm/realm-cocoa/tree/master/examples/osx/objc/JSONImport) sample app in this repository demonstrates how to parse JSON to create a Realm file. You could modify that to build your realm file, and then include it in your iOS app's bundle (see Migration sample).

@GreatApe It's not possible to ship your app with a file in the user's Documents directory, since that's not located in the app bundle.
",jpsim,fnxpt
1104,2014-11-07 18:20:53,"Hi @fnxpt, it's certainly possible to bundle a realm file with your shipping app. The [Migration](https://github.com/realm/realm-cocoa/tree/master/examples/ios/objc/Migration) sample app in this repository demonstrates how to do this.

You can create a separate app to generate your Realm file containing your reference data. The [JSONImport](https://github.com/realm/realm-cocoa/tree/master/examples/osx/objc/JSONImport) sample app in this repository demonstrates how to parse JSON to create a Realm file. You could modify that to build your realm file, and then include it in your iOS app's bundle (see Migration sample).

@GreatApe It's not possible to ship your app with a file in the user's Documents directory, since that's not located in the app bundle.
",jpsim,GreatApe
1103,2015-07-10 17:31:56,"Here's an updated version of the extension above, using Swift 2.0 (and Swift 2.0 compatible version of Realm)

@jpsim and @segiddins  - thoughts on this implementation?


",kevinmlong,jpsim
1103,2015-07-27 23:41:54,"@kevinmlong Thanks for sharing!
",shmidt,kevinmlong
1103,2015-10-05 15:11:49,"@apocolipse it's not very efficient to use reduce to build arrays, see e.g. http://airspeedvelocity.net/2015/08/03/arrays-linked-lists-and-performance/
",i-schuetz,apocolipse
1103,2015-10-29 19:08:33,"@kexoth We don't support `@distinctUnionOfObjects` in queries yet, everything with the pink dot next to it is what we currently support.
",kishikawakatsumi,kexoth
1103,2015-10-29 19:14:04,"@kishikawakatsumi this is the fastest response on **Github Issues** ever!! :+1: 
Thanks for the info, I missed that detail in the documentation, now I saw that :sweat_smile:
",kexoth,kishikawakatsumi
1103,2016-06-22 19:43:33,"@torcelly It's important to note that that solution loses the lazy-loading functionality of `RLMResult` since it iterates over all objects in the results.
",JadenGeller,torcelly
1101,2014-11-18 07:14:25,"@maciejtrybilo If all of the properties have default values, you can define an `init()` that just calls `super.init()`. The framework creates an instance to inspect the types but doesn't use it otherwise. After that, everything works as you would expect, so your code can call your custom `init` method. Hope that helps for now!
",mrh-is,maciejtrybilo
1101,2015-01-22 18:01:32,"@mrh-is I tried defining the default constructor as you mention, I'm getting `fatal error: use of unimplemented initializer 'init(objectSchema:)' for class Foo`.



3 months passed since you commented it, so maybe it's not working anymore since new Xcode version? Is there a workaround ?
",Pintouch,mrh-is
1101,2015-01-22 19:09:19,"@Pintouch Yep, it's a change sometime between 0.87.4 and 0.90.0. Still investigating...

**Edit:** It's between 0.89.2 and 0.89.0. Still investigating even more.
",mrh-is,Pintouch
1101,2015-01-22 20:17:04,"Ah, that's ok! As long as there are clear directions. :+1: Thanks @jpsim! (YEAH SWIFT API)
",mrh-is,jpsim
1101,2015-03-31 17:03:42,"@depl0y we'll be writing a new podspec for RealmSwift. Subscribe to #1705 to know when that's done.

> One of the things I really don't like is specifying default values for my properties because some of them are required and now this isn't enforced at compile-time. Also, adding the initializers mentioned here will not work when you work with non-optional properties without a default value.

Default values aren't strictly necessary, although calling `init()` is required to succeed. Aside from that, you can create any number of initializers in any format you like, as long as it calls `super.init()` at some point.
",jpsim,depl0y
1101,2015-03-31 19:53:26,"@jpsim yup, but you can't create a custom init, if there are **required** properties.

For example:



This throws an error without a initialiser called `init()`. So then you create a simple initialiser, like this:



Of course you get a compile error here, because you are calling `super.init()` before the property `someRelation` is set. So should I set the `someRelation` property just to `MyOtherClass()`?



Finally you end up with a bunch of initialisers (`override init()`, `override init!(objectSchema schema: RLMObjectSchema!)` and your custom initialiser).  And this leads to all kinds of bugs, like objects being created with default values.

I created an example:



Now, what should be the appropriate way to init a DemoObject2, init a DemoObject1 and commit them to the database?

I tried:



But this results in 2 DemoObject2 objects being stored, one with a `name` and the other without. The DemoObject1 is stored in the database, but the `someObject` property is always pointing to a record without the `name` value set.

I tried splitting it up in multiple transactions, but this ends in the same problem. (This might even be a separate thread, sorry about that).

Convenience initialisers **do** work for me, without problems, but this has the need that all properties are either optional or filled with a default value.
",depl0y,jpsim
1101,2015-04-17 00:47:12,"@yoshyosh are you sure `init()` and `init!(objectSchema schema: RLMObjectSchema!)` are necessary at all here? All they do is call super.
",jpsim,yoshyosh
1101,2015-09-07 23:32:07,"@acoleman-apc this issue was last active over 4 months ago and is no longer relevant.

To override an `Object` initializer, just add it to your model:


",jpsim,acoleman-apc
1101,2015-09-07 23:41:10,"@jpsim Thanks but I have already added similar code to my project.  The point was that this isn't mentioned in the current documentation but is instead in an issue that has been open since November of 2014.  At this point, doesn't it deserve a mention in the official documentation?
",acoleman-apc,jpsim
1101,2015-10-29 03:43:28,"@jpsim I'm kind of a newbie with Swift (hey, aren't we all?). Documentation in the main website stating that you have to implement the following would be _very helpful_ in getting started with Realm (aka ""the happy path"" 😀). 

To create a custom constructor:


",frankradocaj,jpsim
1101,2015-11-07 20:44:03,"+1 to @frankradocaj 
I'm a newbie to Realm and this was actually quite frustrating. So a mention in the docs for someone just getting started would be _really_ nice. Was going to skip on realm because it seemed harder than it should be.
",DrJid,frankradocaj
1101,2016-01-22 03:30:06,"+1 @frankradocaj  for the example, that should be on the main documentation :tired_face:
",ed-mejia,frankradocaj
1101,2016-01-22 04:56:12,"@ed-mejia we have a section in our docs on this: https://realm.io/docs/swift/latest/#adding-custom-initializers-to-object-subclasses
",jpsim,ed-mejia
1101,2016-01-22 05:04:22,"Hey @jpsim thanks for your comment.

In my case it did't work just with that, maybe because I need other init since Im using a parsing Json library, look at my actual model:



In my case the compiler requires me to implement **_required public init()**_

**_public init(realm: RLMRealm, schema: RLMObjectSchema)**_ is not required by the compiler but the App crash when I try to do this after a query:



And the crash indicates that I haven't implemented **_public init(realm: RLMRealm, schema: RLMObjectSchema)**_
",ed-mejia,jpsim
1101,2016-01-22 17:57:50,"@ed-mejia It is more simple to use `public convenience init?(json: JSON)` instead `public init?(json: JSON)`. If you implement the convenience initializer, the compiler doesn't require to implement other initializers.

Like the following (Change `public init?` to `public convenience init?` and `super.init()` to `self.init()`):


",kishikawakatsumi,ed-mejia
1101,2016-01-24 02:48:43,"@kishikawakatsumi You are totally right :+1: thanks for that clarification :smile:
",ed-mejia,kishikawakatsumi
1101,2016-02-08 12:21:38,"@rameez-leftshift Please explain your case, attach examples and maybe we could help you ..
",ed-mejia,rameez-leftshift
1099,2014-11-13 00:33:17,"Hi @zxl777, having two realm files open as readwrite should work. Can you share some code that reproduces this issue?
",jpsim,zxl777
1097,2014-11-10 09:30:45,"Absolutely makes sense. Break on those unhandled exceptions and you'll see the queue is the same but the thread changes. **Realm is not GCD safe**.

> I've commented RLMCheckThread method, and now my code works without issues, but I assume that was a bad idea...

Very bad idea. The check is presumably there for a reason. I'm guessing that sometimes a property fetch will fail and the access to the realm to back fill that thread is going to fail. Although this check looks like it's just throwing an exception when it doesn't _need_ to. It's actually alerting you to a bug you have which if left would be much more difficult to find even if it wouldn't happen every time.

The solution is the same for you as it was for me: in your SAX parse, store the primary key of the object you are currently building and fetch it from Realm at the start of every operation. Like @tgoyne said, it's pretty fast (and not a lot of extra code).
",rogernolan,tgoyne
1097,2015-01-16 21:49:54,"@vittoriom and @ebluehands: we're actively working on this functionality in the form of ""thread handoff"": e.g. run a query which returns objects on separate threads. We'll post to this issue once we have more to share.

In the mean time, you can work around most of these issues by passing around primary keys to objects between threads rather than the objects themselves (similar to using `NSManagedObjectID`s in Core Data). This does mean that you'll have to re-fetch the object on the target thread, which we understand is sub-optimal, which is why we're actively working on thread handoff.
",jpsim,ebluehands
1097,2015-01-16 21:49:54,"@vittoriom and @ebluehands: we're actively working on this functionality in the form of ""thread handoff"": e.g. run a query which returns objects on separate threads. We'll post to this issue once we have more to share.

In the mean time, you can work around most of these issues by passing around primary keys to objects between threads rather than the objects themselves (similar to using `NSManagedObjectID`s in Core Data). This does mean that you'll have to re-fetch the object on the target thread, which we understand is sub-optimal, which is why we're actively working on thread handoff.
",jpsim,vittoriom
1097,2015-01-17 12:20:54,"@jpsim thanks for the follow up, I did fetch the object on the target thread indeed, and for now it will do the job. But it's in the middle of a complex async set of blocks dispatched in a dispatch group so it would look much cleaner if I could just share the object (in read-only mode) on other queues as well.
I'll watch for more comments on this issue! Have a good weekend
",vittoriom,jpsim
1097,2015-01-28 10:19:05,"@jpsim, @tgoyne, what about entities that don't have a primary key defined? AFAIK, `NSManagedObjectID` exists for every `NSManagedObject` once it's been added to the DB. Primary Keys, on the other hand, are optional. In some cases it's even recommended against having PKs for Realm entities: https://github.com/realm/realm-cocoa/issues/1234#issuecomment-67192865
",ghost,jpsim
1097,2015-01-28 10:19:05,"@jpsim, @tgoyne, what about entities that don't have a primary key defined? AFAIK, `NSManagedObjectID` exists for every `NSManagedObject` once it's been added to the DB. Primary Keys, on the other hand, are optional. In some cases it's even recommended against having PKs for Realm entities: https://github.com/realm/realm-cocoa/issues/1234#issuecomment-67192865
",ghost,tgoyne
1096,2015-05-13 16:52:00,"@duemunk can you send us a code sample demonstrating what you think should work, and how it fails?

Keep in mind that the `mmap() failed: Cannot allocate memory` happens once the device no longer has any available mmap-able space and that the bigger the realm file and the more concurrent transactions are used, the higher the odds of running out of allocatable mmap memory.

We'll be cutting a release very soon which switches to Realm Core 0.89.3, which lowers the maximum doubling threshold for Realm file sizes from 128MB to 16MB. (#1933)
",jpsim,duemunk
1089,2014-11-13 00:11:05,"@tgoyne could you print out `REALM_VERSION` if out of date? This would help identify current version of Realm, as requested in #1057.
",jpsim,tgoyne
1088,2014-12-02 04:46:56,"@GreatApe I take it you still want me to review this? Any changes you'd like to make now that this has sat here for a while? Sorry for not reviewing sooner.
",jpsim,GreatApe
1087,2014-10-30 11:57:53,"Thank you for the quick response @GreatApe, I mean that to-one and to-many relationships does not seem to work. below is a snippet of my code:



But then both the declaration of the Artist and the Album throw errors indicating that the classes do not exist. I tried forward declaration of the class as well and no luck there. When trying this line `@property RLMArray<Track> *tracks;` in the Album model I get the error that the protocol has not be defined.
",marlowcharite,GreatApe
1087,2014-10-30 12:57:21,"@GreatApe I do have the implementation file stubbed out. I plan on making the trackID a primary key. I'll try everything in the same file and see if that works. 
",marlowcharite,GreatApe
1087,2014-10-30 16:46:43,"@alazier I have everything declared in their own respective files and then I import them when I need them. But no dice. I don't want to have every @interface and @implementation for multiple model classes in one file
",marlowcharite,alazier
1087,2014-10-31 00:55:19,"@yoshyosh yeah that's why I'm losing my mind over here. I'll try a new project
",marlowcharite,yoshyosh
1087,2014-10-31 01:19:03,"@yoshyosh Yes sir
",marlowcharite,yoshyosh
1087,2015-03-27 15:39:16,"I am having the same problem. @marlowcharite How did you fix this? I still get the Cannot find protocol declaration no matter what combination of class or import combinations I use.
",Siriss,marlowcharite
1087,2015-03-27 18:52:02,"@Siriss I don't have the project in front of me right now but basically if I remember correctly I had to forward declare both a class that was the other side of the relationship. And then import any other needed classes 
",marlowcharite,Siriss
1087,2015-10-07 18:01:26,"> EDIT: Fixed, but the documentation is wrong on where we need to declare RLM_ARRAYS

@HannahCarney you probably meant `RLM_ARRAY_TYPE(User)`? Which documentation is wrong? This is specified a few times in the ""Models"" section of our docs: https://realm.io/docs/objc/latest/#models
",jpsim,HannahCarney
1083,2014-10-29 00:47:37,"@tgoyne fixed, jenkins will handle the creation of the new docs when we cut a new release right?
",yoshyosh,tgoyne
1083,2014-10-29 06:04:41,"@yoshyosh Jenkins grabs the latest docs when building the website.
",jpsim,yoshyosh
1083,2014-10-29 06:06:13,"@yoshyosh we typically refer to the database as ""the realm"" in the rest of the documentation and we should do the same here. Otherwise looks good.
",jpsim,yoshyosh
1083,2014-12-02 00:34:36,"Closing since this change is unnecessary. @yoshyosh please re-open if you feel strongly about this.
",jpsim,yoshyosh
1082,2014-12-01 14:59:41,"@webmagnets if you haven't done so already, please read the [migrations](http://realm.io/docs/cocoa/0.87.4/#migrations) section of our docs.

You can also refer to our [Migration sample app](https://github.com/realm/realm-cocoa/blob/master/examples/ios/objc/Migration/AppDelegate.m) for our recommended usage.

If you're still having difficulties, please report back here. Let us know how we can improve our docs if they aren't clear.
",jpsim,webmagnets
1082,2014-12-01 15:37:06,"I had already pasted the migration sample code into my appdelegate file but I thought I should remove it after the migration. It appears that it needs to stay in there. Does that sound right?

## 

Nathan Cain
501-463-6336www.jw.org

---

[+] Add me to your address book

On Mon, Dec 1, 2014 at 8:59 AM, JP Simard notifications@github.com
wrote:

> @webmagnets if you haven't done so already, please read the [migrations](http://realm.io/docs/cocoa/0.87.4/#migrations) section of our docs.
> You can also refer to our [Migration sample app](https://github.com/realm/realm-cocoa/blob/master/examples/ios/objc/Migration/AppDelegate.m) for our recommended usage.
> 
> ## If you're still having difficulties, please report back here. Let us know how we can improve our docs if they aren't clear.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/issues/1082#issuecomment-65076085
",webmagnets,webmagnets
1080,2014-11-07 02:40:48,"Hi @NemoAir, did you get a chance to investigate after my [last comment](https://github.com/realm/realm-cocoa/issues/1080#issuecomment-60878412)?
",jpsim,NemoAir
1080,2014-11-11 20:16:47,"Closing since we haven't heard back from @NemoAir in 2 weeks and it's likely an `NSNumber` property was being used.
",jpsim,NemoAir
1080,2016-05-14 09:23:24,"Hi @jpsim for me this error happens because I have a private property which is not ignored, adding it to the ignored list fixed the issue
",hovox,jpsim
1078,2014-11-05 03:49:31,"@alazier `~/Library/Developer/XCode/Templates` is for Xcode file templates, so lldb scripts don't belong there.

[chisel](https://github.com/facebook/chisel) installs itself in `/Applications/Xcode.app/Contents/Developer/Contents/SharedFrameworks/LLDB.framework/Resources/Python` (see its [homebrew formula](https://github.com/Homebrew/homebrew/blob/master/Library/Formula/chisel.rb#L21)), so it would make sense to have ours in there as well.

I'm also ok with `~/Application Support/Realm`.
",jpsim,alazier
1078,2014-11-05 04:13:40,"@jpsim I am well aware of this. I was suggesting `~/Library/Developer/XCode/DebuggingScripts` or something similar, not the templates directory.
",alazier,jpsim
1077,2014-11-03 01:36:18,"@jpsim Any plans to fix this issue? 
",kronik,jpsim
1077,2014-11-04 01:23:40,"@jpsim I can't understand why I can't reproduce this issue on a synthetic app/test but it looks like this issue related with memory corruption or leak because I constantly get EXC_BAD_ACCESS in RLMResultsValidateAttached:

![crash](https://cloud.githubusercontent.com/assets/1930820/4893382/31756232-63c1-11e4-8483-2ec556afe4a5.png)
",kronik,jpsim
1077,2014-12-05 22:46:02,"Hi @kronik, were you ever able to reproduce this issue outside your project? Could you try sending us your project privately so we can identify and fix the issue? You can send it to us at help@realm.io.

Thanks!
",jpsim,kronik
1077,2014-12-08 22:16:39,"Closing since we were never able to reproduce and have yet to receive sufficient troubleshooting information from @kronik.
",jpsim,kronik
1077,2015-04-02 15:42:39,"@frankcjw if your phone is locked when this happens, please refer to my answer in https://github.com/realm/realm-cocoa/issues/1260#issuecomment-88949065.

If the phone is unlocked, then that's possibly a bug in Realm and we'd really appreciate a sample Xcode project that we can run to reproduce the issue. Thanks!
",jpsim,frankcjw
1077,2015-05-13 16:45:23,"@Fab1n have you tried setting the realm file's parent directory to use `NSFileProtectionNone` as discussed here: https://github.com/realm/realm-cocoa/issues/1874#issuecomment-101057887? 


",jpsim,Fab1n
1077,2015-05-22 18:20:49,"@Fab1n could you send us a project that reproduces this issue? You should definitely be able to open a readonly realm file in your app bundle.
",jpsim,Fab1n
1074,2014-10-29 00:18:52,"Sounds good @alazier. I was actually going to look at date formatters as a separate PR (I've got that need myself :smile:). I like the idea of per object mapping, but curious about overriding existing keys. Happy to help where possible, but I'll obviously keep an eye on this PR when you guys have something. Thanks!
",nathanhjones,alazier
1073,2014-10-26 19:49:04,"@jpsim that's weird. Sometimes I can and sometimes I can't... Can you send me your email address where I can give you access to this file? I don't want it to be public.
Most of the time I only see this:
![zrzut ekranu 2014-10-26 o 20 44 02](https://cloud.githubusercontent.com/assets/1155763/4784212/138979ee-5d49-11e4-90a3-ff56506754f0.png)
",burczyk,jpsim
1073,2014-10-27 00:04:51,"Yes @burczyk, please send us any materials that could help to reproduce this issue on our end. You can email us sensitive documents at help@realm.io. Thanks!
",jpsim,burczyk
1073,2014-10-29 20:47:11,"@burczyk I'm also building an app with a bundled database. My suggestion if possible is to have a separate app that generates the database. I followed the ImportJSON example. I highly recommend avoiding use of defaultRealm and instead setting your own especially if you have tests against a version of that database. Was easier to just manage realms rather than relying on the default one, that way I can use a different one for testing if necessary.
",javierjulio,burczyk
1073,2014-11-12 20:56:58,"Hi @burczyk, seems like you managed to get this working by using the _inRealm_ methods, so I'm closing this issue. Please reopen if this is still causing problems for you.

We're updating our docs to emphasize that most methods in Realm that accept an `RLMRealm` instance have convenience equivalents. This will be live soon.
",jpsim,burczyk
1071,2014-10-26 01:15:01,"@yuuki1224 thanks the suggestion! However, it was done this way because this is a performance-sensitive part of the code where measuring the length of that string, or even avoiding one `objc_msgsend` has an impact.
",jpsim,yuuki1224
1071,2014-10-26 04:25:53,"@jpsim Ah~~~I undersood.
I'm sorry that I didn't know the background of this code.
Thank you!
",yuuki1224,jpsim
1068,2014-10-23 21:51:40,"@bmunkholm @alazier cool thanks. I didn't send anything right away since I'm testing some new features I haven't used before (primary keys) and wanted to make sure the database I was generating wasn't messed up. Testing in real app. Happy to test a new release of the Realm Browser if you need help. Let me know.
",javierjulio,bmunkholm
1068,2014-10-23 21:51:40,"@bmunkholm @alazier cool thanks. I didn't send anything right away since I'm testing some new features I haven't used before (primary keys) and wanted to make sure the database I was generating wasn't messed up. Testing in real app. Happy to test a new release of the Realm Browser if you need help. Let me know.
",javierjulio,alazier
1068,2014-10-24 01:25:09,"Happy to help @alazier, thanks all for being so responsive :heart: 
",javierjulio,alazier
1067,2014-11-13 00:15:36,"Hi @phongleq, sorry for taking so long to reply to this, it fell through the cracks.

It shouldn't be a problem to statically link this framework to your own custom framework. Please be sure to use a prebuilt binary (you can download the latest one here: http://static.realm.io/downloads/cocoa/latest) or build the framework by running `sh build.sh ios`, which will build all necessary architectures.

Please let me know if you have any difficulties doing this.
",jpsim,phongleq
1067,2016-12-01 10:32:13,"@jpsim Can you explain in more detail the steps to link the realm framework? It mentions in the realm installatin instructions to add the realm framework to your custom framework... in their list of instructions for adding the realm framework, it mentions to drag the realm.framework and the realmSwift.framework files into the embedded binary section of an xcode project but in a .framework project that section is not there. Can it only be done with cocoapods if adding realm to a framework project?",iphonerosie,jpsim
1057,2014-10-21 17:12:07,"@alazier, Xcode only shows the header files when expanding Realm.framework but noticed that if I right click on Headers folder (in Xcode) and select Show In Finder I see more files including Info.plist which contains the version number in CFBundleVersion. Thanks!
",javierjulio,alazier
1057,2014-10-21 17:17:59,"Yes it would, if its not much to ask @alazier. Anything to make it easier to find out what version of Realm is used when reviewing a project with a Realm issue.
",javierjulio,alazier
1056,2014-11-20 11:26:08,"@alazier 

I adressed al your comments and also took care of some effects of the RLMResults split that were not warned about before for some reason. The problem was that we used the same classes for showing arrays and query results, which worked in practice because they both responded to the same messages, but now I rewrote that bit to handle this properly.
",GreatApe,alazier
1056,2014-12-02 04:50:29,"retest this please (please ignore, this is just for CI).

@GreatApe same as other PR. Please make changes if you feel necessary. I'll review tomorrow.
",jpsim,GreatApe
1056,2014-12-03 20:04:59,"@GreatApe should these warnings be cause for concern?

![warnings](https://cloud.githubusercontent.com/assets/474794/5287829/8c38710c-7ae4-11e4-8ca2-517b51f5b828.png)
",jpsim,GreatApe
1056,2014-12-04 23:13:19,"@GreatApe ping me when you're done making changes to this and I'll do one last sanity check before +1.
",jpsim,GreatApe
1056,2014-12-05 09:33:30,"@jpsim 

Thank you for reviewing! I have addressed and/or acted on all your comments now. But please see the discussions on `isEqualTo:`, `supportedDragTypes` and the max approach for integer primary keys.
",GreatApe,jpsim
1056,2014-12-05 19:56:26,"@GreatApe ship it!
",jpsim,GreatApe
1052,2014-10-20 18:25:17,"@itsallmememe It was just an example, I asked for any type of RLMObject
@tgoyne Thanks!

I tried this, but app crashes due an exception:



Exception:



Thanks!
",mhergon,tgoyne
1052,2014-10-20 18:25:17,"@itsallmememe It was just an example, I asked for any type of RLMObject
@tgoyne Thanks!

I tried this, but app crashes due an exception:



Exception:



Thanks!
",mhergon,itsallmememe
1052,2014-10-20 19:41:37,"I'd be curious to see this work @mhergon. I've been trying something similar in Swift with latest Realm but I keep getting this error https://github.com/realm/realm-cocoa/issues/1044 (contains repo link to reproduce error). Should try using primaryKey to see if I can replicate.
",javierjulio,mhergon
1052,2014-10-21 22:28:00,"@kevinnguy 

What you do is actually to implement the class method called primaryKey, that returns the name of the primary key property as a string:



http://realm.io/docs/cocoa/0.87.0/api/Classes/RLMObject.html#//api/name/primaryKey
",GreatApe,kevinnguy
1050,2014-10-20 16:04:50,"@mbuchetics great question about the lazy evaluation. I don't have the answer but I've been meaning to share my experience since sometimes Realm blows me away. If I store an Realm query (RLMArray) in an instance variable on viewDidLoad in a UITableViewController I realized I wasn't ever rerunning my query and updating that variable but any changes I made persisted through table view actions (moving, adding, deleting) were reflected in the instance variable. What this tells me is that somehow it must know when values and objects are updated, added or removed. So for example when on delete action for a table view cell I would remove the object from the Realm (not the array). I did it this way simply because of examples I kept seeing for deleting an object from the realm but you could easily just remove it from the RLMArray. The next time the instance variable (RLMArray) was used though it reflected that change. Hoping someone from the Realm team can explain what is really happening but this feature has blown me away because its a lot less code I have to write. It just works. Although I could very easily be misunderstanding something here. My thinking from that experience is it would be best to keep the results in an RLMArray if possible. Its very fast even when loading a lot of objects.
",javierjulio,mbuchetics
1050,2014-10-20 17:32:24,"I knew it! Makes my job easier. Thanks @tgoyne :heart:
",javierjulio,tgoyne
1049,2014-11-12 23:57:06,"@macinux since we haven't been able to reproduce this issue on our end, the best way to fix it would be to troubleshoot using your code. Could you send it to us privately at help@realm.io?
",jpsim,macinux
1049,2014-11-17 19:45:05,"Too bad we can’t get code to reproduce — but we completely understand your situation @macinux! Thanks for taking the time to file an issue. We’ll see if this pops up in another app.
",timanglade,macinux
1048,2014-11-12 23:53:53,"Closing as duplicate of #824. @phongleq you can subscribe to that thread for any updates.
",jpsim,phongleq
1046,2015-02-20 12:47:02,"I tried to replicate the solution that @aleclarson showed with generics. 



This allows me to do:


",duemunk,aleclarson
1046,2015-09-28 09:31:32,"I also ran into this problem today
Since swift 2.0, we can do this (based on @duemunk's solution):


",phamquochoan,duemunk
1046,2015-11-13 16:06:29,"For those with still working with RLMObject in Swift (objc & swift projects), you can put the implementation @duemunk used into one line:



Thanks @duemunk!
",cmajordev,duemunk
1046,2015-11-13 18:57:34,"Even nicer, thanks! @jpsim 

Edit:

Actually tried it out but get the compile error:

`Cannot convert value of type '(T) -> T? to expected argument type '(_, (_) -> [_])' aka '(_, _ -> Array<_>)')`

I'm using Realm for Objective-C, so RLMResults is an Objective-C class. Doesn't that mean it won't have a flapMap to begin with?
",cmajordev,jpsim
1046,2016-02-25 17:34:06,"@cmajordev sorry I never saw your last message. `RLMResults` conforms to `SequenceType` if you're using `RLMSupport.swift` as we recommend in our installation instructions: https://realm.io/docs/objc/latest/#installation

`flatMap` is defined on `SequenceType`.

@DHidee66 I don't know, this is the cocoa repo. You can file issues towards the realm-js repo for questions like that: https://github.com/realm/realm-js/issues/new
",jpsim,cmajordev
1046,2016-04-11 19:19:53,"@jpsim just wanted to say thanks for the sweet toArray extension!
",charliefulton,jpsim
1045,2014-10-18 23:07:09,"@phongleq please see the table view example, which demonstrates inserting and deleting rows from a UITableView: https://github.com/realm/realm-cocoa/blob/master/examples/ios/objc/TableView/TableViewController.m
",jpsim,phongleq
1045,2014-10-20 09:04:34,"@jpsim That example doesn't animate though, right? I think animation is what caused the problem.
",GreatApe,jpsim
1045,2014-10-20 17:43:07,"@phongleq @GreatApe I remember reading this elsewhere that Realm needs to have detailed notifications to support this but doesn't at the moment. Basically you just get a notification when something changed but not what changed and how (whether added, deleted, etc.). That's why the example just does a reload on receiving a notification.
",javierjulio,phongleq
1045,2014-10-20 17:43:07,"@phongleq @GreatApe I remember reading this elsewhere that Realm needs to have detailed notifications to support this but doesn't at the moment. Basically you just get a notification when something changed but not what changed and how (whether added, deleted, etc.). That's why the example just does a reload on receiving a notification.
",javierjulio,GreatApe
1045,2014-10-20 17:45:38,"@phongleq this could be a possible temporary solution to help you perform animations when your datasource changes: https://github.com/realm/realm-cocoa/issues/622
",javierjulio,phongleq
1045,2014-10-20 17:48:11,"@javierjulio I was able to do what @GreatApe recommended. It also animates correctly when I insert.
",phongleq,javierjulio
1045,2014-10-20 17:48:11,"@javierjulio I was able to do what @GreatApe recommended. It also animates correctly when I insert.
",phongleq,GreatApe
1045,2014-10-20 17:49:48,"@phongleq awesome :+1: 
",javierjulio,phongleq
1044,2014-10-22 19:27:31,"Nice, are you able to replicate on your end @tgoyne?! Thought was just me. Let me know if you have some suggestions or things I can try, happy to help test out.
",javierjulio,tgoyne
1044,2014-10-22 19:42:51,"@tgoyne thanks for taking the time. To explain why I have the Swift code and files setup like that is because I want to be able to test my code but since testing is new to me in Xcode (I've done a lot of testing in the Ruby/Rails world so I have experience) I followed what I've read here http://natashatherobot.com/swift-unit-testing-tips-and-tricks/ which suggested to add files to the test target. Have read the same elsewhere. I've posted on the google groups something similar to testing. Sounds like what works is the alternative which means specify access control on classes and import them and do not include in test target.

If you were to write tests for that sample app would it be the same way it was setup or the second route by specifying access control and not including files in the test target?
",javierjulio,tgoyne
1044,2014-10-22 20:20:42,"@tgoyne @alazier @jpsim removing the `User.swift` and `UserService.swift` from the Test target, setting public on class, functions and properties under test (these are meant to be public within the app, or at least how I'm used to understanding `public` from other languages e.g. AS3) and `import realm_dynamic_cast_error` in the test file file worked. Tests keep running successfully so far. I did _not_ have to set Define Modules for the tests to work. That remains with its default value of NO. Are you sure that step is necessary? I found someone else [documenting this Swift testing approach](http://blog.diogot.com/blog/2014/08/23/swift_access_control_and_testing/) but did _not_ specify/change Defines Module setting. Although some further reading on Apple docs states this setting is set to YES if importing Objective-C code into Swift and I don't have any Objective-C code in my sample or app projects. All Swift ✊
",javierjulio,alazier
1044,2014-10-22 20:20:42,"@tgoyne @alazier @jpsim removing the `User.swift` and `UserService.swift` from the Test target, setting public on class, functions and properties under test (these are meant to be public within the app, or at least how I'm used to understanding `public` from other languages e.g. AS3) and `import realm_dynamic_cast_error` in the test file file worked. Tests keep running successfully so far. I did _not_ have to set Define Modules for the tests to work. That remains with its default value of NO. Are you sure that step is necessary? I found someone else [documenting this Swift testing approach](http://blog.diogot.com/blog/2014/08/23/swift_access_control_and_testing/) but did _not_ specify/change Defines Module setting. Although some further reading on Apple docs states this setting is set to YES if importing Objective-C code into Swift and I don't have any Objective-C code in my sample or app projects. All Swift ✊
",javierjulio,tgoyne
1044,2014-10-22 20:20:42,"@tgoyne @alazier @jpsim removing the `User.swift` and `UserService.swift` from the Test target, setting public on class, functions and properties under test (these are meant to be public within the app, or at least how I'm used to understanding `public` from other languages e.g. AS3) and `import realm_dynamic_cast_error` in the test file file worked. Tests keep running successfully so far. I did _not_ have to set Define Modules for the tests to work. That remains with its default value of NO. Are you sure that step is necessary? I found someone else [documenting this Swift testing approach](http://blog.diogot.com/blog/2014/08/23/swift_access_control_and_testing/) but did _not_ specify/change Defines Module setting. Although some further reading on Apple docs states this setting is set to YES if importing Objective-C code into Swift and I don't have any Objective-C code in my sample or app projects. All Swift ✊
",javierjulio,jpsim
1044,2014-11-12 23:52:44,"Can we close this issue @javierjulio? Did we confirm this is a Swift bug @tgoyne?
",jpsim,javierjulio
1044,2014-11-12 23:52:44,"Can we close this issue @javierjulio? Did we confirm this is a Swift bug @tgoyne?
",jpsim,tgoyne
1044,2014-12-05 22:45:51,"@alazier @jpsim thanks guys! Not sure how you did it. This didn't seem possible at all to be fixed without some resolution from Apple. Looking forward to the new Swift APIs. Is there a branch with those changes that I can browse? Thanks for the follow up!

FYI: the app where I had this issue just made it successfully on TestFlight today. Should have it in the store soon.
",javierjulio,alazier
1044,2014-12-05 22:45:51,"@alazier @jpsim thanks guys! Not sure how you did it. This didn't seem possible at all to be fixed without some resolution from Apple. Looking forward to the new Swift APIs. Is there a branch with those changes that I can browse? Thanks for the follow up!

FYI: the app where I had this issue just made it successfully on TestFlight today. Should have it in the store soon.
",javierjulio,jpsim
1042,2014-10-17 22:27:01,"Giving this a go now will update. Seems to work perfectly. Merge time? @alazier @tgoyne 

**_Update**_
On second thought the



Is more annoying than the issue this update was trying to solve.  In any case there should be a way to handle partial updates and optional properties. Thoughts?

**_Update 2**_
I fixed this issue for now by adding:


",eni9889,alazier
1042,2014-10-20 20:52:21,"@eni9889 thanks for trying this out. 
",alazier,eni9889
1042,2015-04-17 02:41:34,"@alazier, I don't think this partial update mechanism works in the recursive case.  In my testing I've found that an existing object nested two or more levels deep in a JSON object still experiences the issue in #1029.  An example using that issue's use case.



If the files property isn't there, any file objects in the realm get deleted.
",tamiswa,alazier
1042,2015-04-17 17:28:35,"@tamiswa we're aware of this limitation and are tracking the issue in #1362.
",jpsim,tamiswa
1039,2014-10-17 18:02:16,"Keep in mind that @alazier's approach would override any values set in the subclass with the superclass defaults, so you'd probably want to use this approach to be a bit safer:


",jpsim,alazier
1034,2014-10-16 23:02:58,"@Codeido it doesn't exactly work that way. Much like SQLite's `VACUUM` command (and all other embedded databases I know), reclaiming disk space can take a considerable amount of time, since ""deleted"" data doesn't necessarily occupy contiguous areas on disk, which means that the db must incrementally reclaim space for every entry being erased.

I agree that this is functionality that we should expose in our public API, and it's on our todo list. We'll update this issue when we have something to announce.
",jpsim,Codeido
1034,2014-10-17 03:18:30,"@jpsim How to perform an explicit disk reallocating for Realm database file?  

This may be useful, e.g. when an user want to purge local data.
",dismory,jpsim
1034,2014-10-20 22:21:48,"@dismory for now there is no way to easily reallocate the db file, so the only way to free up all unused space is to delete the Realm file. When you do this you need to release and get new RLMRealm instances for each thread to start reading/writing to the new file. We are working on improving this in the future.
",alazier,dismory
1028,2014-10-16 11:59:51,"@GreatApe, sorry. 
Exemplified in the wrong way.

Is another example:

**JSON**



**NSDictionary**



**Models**





**NSDictionary to RLMObject**



**Error**

The error occurs when the object starts from the dictionary:


",Bruno-Furtado,GreatApe
1028,2014-10-16 12:15:58,"@GreatApe,
Thank you so much!

Just a doubt, this array will be saved to the database normally?
",Bruno-Furtado,GreatApe
1028,2014-10-16 15:17:08,"@GreatApe is incorrect here. You can pass in an array of object literals which represent Tag objects and they will be created automatically. For example:



would create the recipe and its two tag automatically. The key is that each tag (and any other object) is represented by an array (or dictionary) of all its properties. Even in the case of Tag where there is one property it needs to be an array and not just the string which is the value of the sole property.
",alazier,GreatApe
1027,2014-10-23 20:05:55,"If this is something we are committed to supporting (which it seems like what @timanglade wants) there we need so sort of verification that things work in our build system, or else things will undoubtedly break in the future. At a minimum we need to build the new framework in build.sh and link it into a target to at least make sure everything builds. Ideally we would have some or all tests running against this, but at a minimum there should be a project or target that we can manually run to make sure things actually work.
",alazier,timanglade
1027,2014-10-23 20:22:41,"Yes, we have enough people asking about this that I think it’s definitely something we want to support. @tgoyne can you implement the minimal testing @alazier describes as a first pass? We can revisit once the Swift API is stabilized.
",timanglade,alazier
1027,2014-10-23 20:22:41,"Yes, we have enough people asking about this that I think it’s definitely something we want to support. @tgoyne can you implement the minimal testing @alazier describes as a first pass? We can revisit once the Swift API is stabilized.
",timanglade,tgoyne
1027,2014-10-25 16:54:28,"@phongleq no, the prebuilt framework is still the static framework for compatibility with all iOS versions.
",jpsim,phongleq
1026,2014-10-16 20:43:55,"@jpsim do you have suggestions for alternate naming?
",alazier,jpsim
1026,2015-01-13 16:21:46,"@jpsim @alazier I used to create isolated realms from separate libraries. How do I work with different realms since there is only one global migration block?
",rbaulin,jpsim
1026,2015-01-13 16:21:46,"@jpsim @alazier I used to create isolated realms from separate libraries. How do I work with different realms since there is only one global migration block?
",rbaulin,alazier
1026,2015-01-13 17:53:49,"Hey @rbaulin there is just one global schema, so Realm will know where to apply the changes to when you execute the migration



You can see here that we are passing Person.className to the migration block regardless of which realm file Person is located in
",yoshyosh,rbaulin
1026,2015-01-13 17:56:19,"Thanks @yoshyosh, but what if vendor library also uses Realm to store data and we both call `-setVersion:migrationBlock`? Previous API allowed to configure migration individually for each realm path (see #1026 dfc76fdc65545059820a257dcbb9d8972c515ae1).
",rbaulin,yoshyosh
1026,2015-01-13 21:55:10,"@rbaulin added an issue #1336 to address this.
",alazier,rbaulin
1024,2014-10-15 19:45:53,"Thanks @jpsim and @GreatApe! This actually won't be much of a problem as I can work around it by using other properties on the object. Allowing nil would have simplified the queries but testing against other properties is just as clear so this isn't a huge deal. Also in fact its better, rather not have to worry about nils. Closing as a duplicate of #628.
",javierjulio,jpsim
1024,2014-10-15 19:45:53,"Thanks @jpsim and @GreatApe! This actually won't be much of a problem as I can work around it by using other properties on the object. Allowing nil would have simplified the queries but testing against other properties is just as clear so this isn't a huge deal. Also in fact its better, rather not have to worry about nils. Closing as a duplicate of #628.
",javierjulio,GreatApe
1024,2015-06-12 22:19:19,"@scottfister could you please open a new issue with step-by-step instructions to reproduce the issue you're seeing? Thanks!
",jpsim,scottfister
1022,2014-10-15 16:17:11,"@scinfu what's happening here is CocoaPods is downloading a pre-built binary of Realm's core C++ database engine, and part of that step is failing. One way to resolve this is to simply delete the temporary download directory (`rm -rf /tmp/core_bin`) and run `pod install` again.

@alazier @tgoyne this happens on CI occasionally as well... do you have any ideas to make this more robust?
",jpsim,scinfu
1022,2014-11-12 23:50:33,"@scinfu did deleting the `/tmp/core_bin` directory fix this issue for you? Please re-open this issue if you're still experiencing problems.
",jpsim,scinfu
1022,2016-08-18 16:20:02,"Any idea @jpsim @scinfu ? 
",ashokds,jpsim
1022,2016-08-18 16:20:02,"Any idea @jpsim @scinfu ? 
",ashokds,scinfu
1022,2016-08-18 21:57:02,"Hi @jpsim,
I tried both 'Realm' & 'RealmSwift' using master.



getting same error


",ashokds,jpsim
1022,2016-08-18 22:00:20,"@ashokds what you posted are normal logs. Where's the error?
",jpsim,ashokds
1022,2016-08-18 22:33:04,"Unlike @scinfu's log, in my case there is nothing after following:



Do I need to find logs somewhere else? Other pods are working fine, except 'Realm', 'RealmSwift' or 'SugarRecord' (has dependency on Realm).

pod install --verbose


",ashokds,scinfu
1022,2016-08-18 22:38:09,"@ashokds `cocoapods-setup` downloads Realm's core binaries from the web. If you're killing the process before it has a chance to complete the download and local setup, then the installation process isn't getting the chance to complete.

Can you make sure that you're connected to the Internet while you're installing Realm?
",jpsim,ashokds
1022,2016-08-18 22:47:30,"@jpsim Yes. I am connected to internet. I have another project that depends on 8 other podspecs and all of the environment is same (shared: machine, wifi-connection, ruby/cocoapods/etc) and it works find upon clean install. Only issue could be that I am using xcode8beta6 for a test project to explore Realm. 
",ashokds,jpsim
1020,2014-10-15 16:12:35,"@tgoyne why was this closed?
",jpsim,tgoyne
1019,2014-10-15 15:38:44,"@alazier ""The same approach should work though if you make a deep copy as an NSArray and filter that using an NSPredicate.""

So, you are saying that I should be able to make a deep copy of my RLMArray property as an NSArray? Even if that property represents a relationship with another RLMObject?

Whenever I try to make a deep copy, using several different suggested solutions, I get the following error:

`-[RLMArrayTableView encodeWithCoder:]: unrecognized selector sent to instance`

Does the NSCoding protocol need to be implemented in RLMArray, or am I going about this wrong?
",mitchellporter,alazier
1019,2014-10-16 01:48:07,"The above works perfectly. Thanks @alazier 
",mitchellporter,alazier
1019,2015-04-24 20:48:48,"No worries, thanks @jpsim 
",mkolodny,jpsim
1019,2016-04-04 16:55:44,"@marchy from Swift, you can use [SequenceType.sort(_:)](http://swiftdoc.org/v2.2/protocol/SequenceType/#func--sort_), from Objective-C, you can use KVC to turn the RLMCollection into an NSArray: `[[realmCollection valueForKeyPath:@""self""] sortedArrayUsingComparator:]`.
",jpsim,marchy
1019,2016-04-04 17:59:20,"@jpsim sorry let me clarify. I meant that it's not just the one-time sorted results that we're interested in, it's also the live-updating Results with notifications of when those results or their ordering change.

In other words, for the following fields:



we want to initialize messages to be a sorted view upon the underlying data:
`messages = DAL_messages.sorted( ""sentAt"" )`

However when initializing a new object this way before it's persisted (which in our case we do not want to persist quite yet) we run into this limitation.

Our closest approach/workaround has been to persist to the DB:



and then presumably delete the object if the user changes their mind (ie: does not want to save/persist it).

I think this should work, thanks for the quick reply JP
",marchy,jpsim
1015,2016-07-21 04:01:28,"@berbschloe, rather than commenting on an issue that's been closed for 18+ months, please file a new issue or post on Stack Overflow with your question.
",bdash,berbschloe
1013,2014-12-09 18:36:26,"@pizthewiz we intend to do this as part of a more comprehensive data transforming toolchain in Realm to avoid needing to use another library like the ones you mention.
",jpsim,pizthewiz
1008,2014-10-13 18:25:30,"Thanks @hectr
",alazier,hectr
1005,2014-10-13 18:35:05,"Or should this be called subarrayWithRange? @jpsim @tgoyne 

If the name is fine anything else need to be done with this?
",alazier,tgoyne
1003,2014-10-10 19:18:44,"@eni9889 if you post your models, we might be able to reproduce your issue
",jpsim,eni9889
1003,2014-10-10 19:38:33,"@jpsim 

User:



Track:


",eni9889,jpsim
1003,2014-10-14 04:46:32,"@tgoyne thanks for the help eta on merging this into master?
",eni9889,tgoyne
1003,2014-10-14 05:56:50,"@eni9889 just waiting on a few more pairs of eyeballs to review before merging :eyes:. Shouldn't be too long.
",jpsim,eni9889
1000,2014-10-10 15:16:45,"@GreatApe none of those suggestions will work. The issue is that the installations instructions on realm.io are missing a step for OSX apps.

@HTAD you'll need to copy the framework into your app's Frameworks directory: https://github.com/realm/realm-cocoa/issues/975#issuecomment-58056819

We'll be updating the installation instructions on the site to reflect this shortly.
",jpsim,HTAD
1000,2014-10-10 15:16:45,"@GreatApe none of those suggestions will work. The issue is that the installations instructions on realm.io are missing a step for OSX apps.

@HTAD you'll need to copy the framework into your app's Frameworks directory: https://github.com/realm/realm-cocoa/issues/975#issuecomment-58056819

We'll be updating the installation instructions on the site to reflect this shortly.
",jpsim,GreatApe
1000,2014-10-10 18:46:25,"@HTAD I can confirm that @jpsim's linked comment will resolve your issue as I was trying to create an OSX command line app, basically just like the JSONImport sample. It took a few tries to get working that last step @jpsim mentioned but it did resolve my issue and have a working OSX CLI tool. Let me know if I can help out.
",javierjulio,jpsim
1000,2014-10-10 18:46:25,"@HTAD I can confirm that @jpsim's linked comment will resolve your issue as I was trying to create an OSX command line app, basically just like the JSONImport sample. It took a few tries to get working that last step @jpsim mentioned but it did resolve my issue and have a working OSX CLI tool. Let me know if I can help out.
",javierjulio,HTAD
1000,2015-05-25 14:13:06,"@jpsim's linked comment worked for me. I would love if I could learn it from [Swift/OSX documentation](http://realm.io/docs/swift/latest/).
",stanislaw,jpsim
994,2014-10-10 07:14:21,"Hi @tgoyne, thanks for the tip!

Now, the Xcode can import Realm... But I have other errors in the RLMSupport.swift file (see screenshot).

![screen shot 2014-10-10 at 09 11 56](https://cloud.githubusercontent.com/assets/37739/4588967/1d802bfe-504d-11e4-9e9f-65c91dadcc79.png)
",noefroidevaux,tgoyne
994,2014-10-14 06:21:02,"Hi @noefroidevaux, there's one more change you have to make. In `Realm.h`, change this: `#if defined(__IPHONE_8_0) && TARGET_OS_IPHONE` to this `#if defined(__IPHONE_8_0)`.

This check is so that the Swift helpers aren't included when using Realm in a Swift OSX project on Xcode 6.0, which doesn't support Swift for OSX.
",jpsim,noefroidevaux
994,2014-10-18 12:39:03,"@jpsim did you need another issue filed to track getting this working under Xcode 6.1 on OS X? It looks like ""DEFINE_MODULE"" is still false for the OS X framework in master.
",tonyarnold,jpsim
994,2014-10-21 07:22:20,"@alazier Thanks!
",noefroidevaux,alazier
993,2014-10-10 16:55:28,"@jpsim the query methods only throw for standalone RLMArray. RLMArrayLinkView has full implementations.
",alazier,jpsim
993,2014-10-10 16:56:33,"Actually I am wrong, but @tgoyne is correct.
",alazier,tgoyne
984,2014-10-07 18:14:52,"I'm afraid I don't understand what you're proposing, @bwahn. Realm Cocoa is thoroughly tested automatically on every pull request through our continuous integration system. It runs all the tests in https://github.com/realm/realm-cocoa/tree/master/Realm/Tests and even runs some integration tests on top of that.

Can you please clarify what you mean?

Thanks!
",jpsim,bwahn
984,2014-10-09 02:56:23,"@jpsim, 
My proposal gets inspiration from video of tutorial( http://realm.io/kr/docs/java/0.70.1/ and http://realm.io/kr/docs/cocoa/0.85.0/). 
I think It will not need it.

Thanks.
",bwahn,jpsim
983,2014-10-07 18:11:27,"Hi @dismory, as of `0.86.0`, adding an object to a Realm will also add all its links. This is done because a Realm object cannot have a relationship to an object outside that Realm.

In previous versions of Realm, your code may have ran without exception, but would have potentially left one of these objects in an undefined state, under certain circumstances.

I can see the need to throw an exception when adding an object to two different Realms, but is there a reason why adding it to the same realm multiple times couldn't be a no-op? /cc @tgoyne @alazier
",jpsim,dismory
982,2014-10-07 12:04:48,"Hi @GreatApe,

that's a nice approach, but I need multiple grouping-possibilities which would result in many new relationships, and I'd constantly upgrading the grouping relationships as data changes.

Looks like right now that's a deal-breaker for a customer app I'm working on :-/ But at least I can use it in a private project, besides that Realm is absolutely awesome so far!
",seventyone-ben,GreatApe
982,2014-10-07 18:16:12,"Hi @seventyone-ben, you may want to look at a different implementation of a grouped table view controller here: https://gist.github.com/jpsim/dd75f1cfcf1d6f0a7973

As long as you can represent a group as a query, it should be pretty straightforward.
",jpsim,seventyone-ben
982,2015-12-08 20:49:25,"@dltlr have you seen our GroupedTableView example? https://github.com/realm/realm-cocoa/blob/master/examples/ios/objc/GroupedTableView/TableViewController.m

If you're referring to querying for distinct values, we're tracking that in #1103.
",jpsim,dltlr
981,2014-10-16 10:00:03,"Thanks @alloy, really appreciate it, and again let me know if I can do some digging for you.
Nick
",nickdaniels,alloy
981,2014-10-16 19:08:28,"Thanks @alloy.

@nickdaniels if you're willing to help, you'll find more details about this issue in #964. The crux of the issue is that the RubyMotion linker can't find the `i386` architecture in the Realm binary, even though `lipo` confirms it's there.
",jpsim,alloy
981,2014-10-16 19:08:28,"Thanks @alloy.

@nickdaniels if you're willing to help, you'll find more details about this issue in #964. The crux of the issue is that the RubyMotion linker can't find the `i386` architecture in the Realm binary, even though `lipo` confirms it's there.
",jpsim,nickdaniels
981,2014-10-17 10:02:37,"@jpsim Pushed a PR at #1037.
",alloy,jpsim
981,2014-10-17 10:44:26,"Great stuff, thank you @alloy that works perfectly and saved me a lot of potential digging! Really appreciate your fantastic support with RubyMotion in general.
",nickdaniels,alloy
981,2014-10-17 10:45:50,"@nickdaniels Thanks, great to hear! :heart: 
",alloy,nickdaniels
981,2016-05-21 04:39:04,"Hi, 
I am trying using Realm+Rubymotion and test to run the example on the repo.
But i got an error `./RubyMotionRealmObject.h:1:9: fatal error: 'Realm/Realm.h' file not found`.
@alloy any suggestion to this problem?
",apinrdw,alloy
978,2014-10-07 18:07:05,"Hi @daikini, thanks for the suggestion! We considered using this, but ultimately decided against it in case we want to add more control to sorting. For example, a case-insensitive sort option.
",jpsim,daikini
978,2014-10-07 19:04:15,"I basically agree with @daikini 

The api on RLMArray should be:



where properties is an array of RLMSortDescriptors.
",alazier,daikini
977,2014-10-06 20:28:48,"@kaptinkirk do you know how to annotate Objective-C headers to let Swift know about failable initializers? I recall seeing this work-around to this in the Xcode 6 release notes:


",jpsim,kaptinkirk
976,2014-10-06 22:14:17,"@tgoyne apologies for not marking this WIP. I added `build.sh` commands to do this from CI as well. Could you re-review? :stuck_out_tongue:
",jpsim,tgoyne
975,2014-10-06 17:42:40,"Hi @javierjulio, you're right that the installation instructions at http://realm.io/docs/cocoa/latest/#installation don't work for command-line OSX apps, since they have no bundle!

What we do for the `JSONImport` example is to link `Realm.framework` and then copy it into the `Products` directory:
![image](https://cloud.githubusercontent.com/assets/474794/4530366/076d8f3e-4d80-11e4-8821-b030c554d37f.png)
",jpsim,javierjulio
972,2014-10-05 17:06:13,"@GreatApe did you clean derived data? That's often why that error appears.
",jpsim,GreatApe
972,2014-10-05 19:26:00,"@jpsim Yes, I deleted the folder in derived data and cleaned the build folder, still the same error. Realm.framework appears under both embedded binaries and linked frameworks. In the first case it refers to a folder in Derived data. 
",GreatApe,jpsim
972,2014-10-05 19:36:25,"@GreatApe just to be clear, we're talking about this PR, right? It builds fine for me, CI indicates it can build it successfully, and more importantly, it still runs after moving it to a different location on disk.

@tgoyne @alazier can either of you review this? I'd rather not have to pull 0.86.0 and 0.86.1 because users can't use the browser.
",jpsim,GreatApe
972,2014-10-05 22:02:44,"JP, anything else than the current browser can only be better. I guess it
can't be worse, right?
So if you can build it, and run it outside the build environment, I would
just release it.

On Sun, Oct 5, 2014 at 9:36 PM, JP Simard notifications@github.com wrote:

> @GreatApe https://github.com/GreatApe just to be clear, we're talking
> about this PR, right? It builds fine for me, CI indicates it can build it
> successfully, and more importantly, it still runs after moving it to a
> different location on disk.
> 
> @tgoyne https://github.com/tgoyne @alazier https://github.com/alazier
> can either of you review this? I'd rather not have to pull 0.86.0 and
> 0.86.1 because users can't use the browser.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/972#issuecomment-57949202.
",bmunkholm,GreatApe
972,2014-10-06 00:41:31,"Thanks for pointing out the hardcoded paths, @tgoyne.

@GreatApe @bmunkholm please try building now, hopefully the making the absolute paths relative fixes your build issues.
",jpsim,bmunkholm
972,2014-10-06 00:41:31,"Thanks for pointing out the hardcoded paths, @tgoyne.

@GreatApe @bmunkholm please try building now, hopefully the making the absolute paths relative fixes your build issues.
",jpsim,tgoyne
972,2014-10-06 00:41:31,"Thanks for pointing out the hardcoded paths, @tgoyne.

@GreatApe @bmunkholm please try building now, hopefully the making the absolute paths relative fixes your build issues.
",jpsim,GreatApe
971,2014-10-04 18:51:11,"Hi @devxoul, thanks for the contribution. First, for us to consider any contributions from you, you must first accept Realm's [CLA](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md#cla).

Secondly, simply deleting the file isn't a safe way to ""reset"" the database, as there might be operations still in progress.
",jpsim,devxoul
971,2014-10-06 00:42:11,"@aleclarson 

> simply deleting the file isn't a safe way to ""reset"" the database, as there might be operations still in progress.
",jpsim,aleclarson
971,2014-10-06 01:05:23,"@jpsim 

Possibly relevant - From the source code comment on `RLMRealm.defaultRealm()`:

> If you specifically want to
>      ensure a `RLMRealm` object is destroyed, place the code which uses the Realm within an `@autoreleasepool
>      {}` and ensure you have no other references to it.

##### What's the safe way to delete a `RLMRealm` and recreate it?

This is what I have at application launch right now...


",aleclarson,jpsim
971,2014-10-06 01:09:22,"@aleclarson that will work, as long as there are no other strong references to `RLMRealm` instances at that point in the code. So if you do that at app launch, it will work fine. However, my concern is that `-drop` needs to work at all times, not just when there are no other references to that realm.
",jpsim,aleclarson
971,2014-10-06 05:49:38,"@devxoul thanks, this is better, but still insufficient, as there might be other Realm instances than the one calling `-drop`. Support for this will likely have to be added in Realm's core, though I'd love to get @tgoyne and @alazier's input on this.
",jpsim,devxoul
970,2014-10-04 18:52:11,"@GreatApe @neilunadkat compiling from source on master also won't work. See #972 for a fix.
",jpsim,neilunadkat
970,2014-10-04 18:52:11,"@GreatApe @neilunadkat compiling from source on master also won't work. See #972 for a fix.
",jpsim,GreatApe
970,2014-10-05 00:53:07,"@GreatApe compiling from master will work in Xcode, but will stop working as soon as you move `Realm Browser.app`
",jpsim,GreatApe
969,2014-10-05 17:24:56,"@haswalt @brendonjustin 

Can you please both answer the following questions so we can help pinpoint the issue?
1. What version of Xcode are you using?
2. What version of Realm are you using?
3. What version of CocoaPods are you using (if any)?
4. Does your project contain Swift code?
",jpsim,haswalt
969,2014-10-05 17:24:56,"@haswalt @brendonjustin 

Can you please both answer the following questions so we can help pinpoint the issue?
1. What version of Xcode are you using?
2. What version of Realm are you using?
3. What version of CocoaPods are you using (if any)?
4. Does your project contain Swift code?
",jpsim,brendonjustin
969,2014-10-05 17:27:39,"Hi @jpsim,
1. Version 6.0.1 (6A317)
2. 0.85.0 currently (anything higher breaks builds)
3. 0.34.1

Note only 0.86.0 is available in pods the .1 release isn't there yet. I've also tried using the master branch from git but no dice either.
",haswalt,jpsim
969,2014-10-07 23:36:50,"Hi @haswalt @brendonjustin, just checking in to see if either of you ever resolved this? I wasn't able to reproduce your issues.
",jpsim,haswalt
969,2014-10-07 23:36:50,"Hi @haswalt @brendonjustin, just checking in to see if either of you ever resolved this? I wasn't able to reproduce your issues.
",jpsim,brendonjustin
968,2014-10-04 18:41:08,"Hi @seventyone-ben, you're correct in assuming that this is the intended behaviour. It's impossible for an object in a Realm to have a relationship with an object that isn't in that Realm, so it gets added automatically.

What are the use cases in which you wouldn't want this behaviour?
",jpsim,seventyone-ben
968,2014-10-04 18:57:22,"Hi @jpsim, for example:
- RLMObject-subclass representing a calendar event
- I can use a ""not in the realm yet"" object for temporary holding the data
- As soon as I choose which list the event belongs to (a RLMObject relationship) it gets persisted
- User clicks cancel
  Now I have to delete the already persisted object, instead of just discarding/not persisting the temporary object.

I understand the reason behind intended functionality and actually support the way it works, I was just wondering because 0.85 wasn't throwing an exception in `[foo addObject]`even after setting the relationship first (or I missed something else in my code...).
",seventyone-ben,jpsim
959,2014-10-02 22:06:29,"Hi @kwojtaszek, I've unsuccessfully attempted to reproduce your issue in this temporary repo: https://github.com/jpsim/KwojtaszekBug.

Could you please fork it to make it reproduce this issue? Thanks!
",jpsim,kwojtaszek
959,2014-10-14 01:23:09,"@kwojtaszek did you ever resolve this? If not, could you please fork https://github.com/jpsim/KwojtaszekBug to make it reproduce the issue so we can fix it? Thanks!
",jpsim,kwojtaszek
957,2014-10-02 00:54:45,"@ghmlee I'm happy with `objectForPrimaryKey:` as well. It is one character shorter than `objectWithPrimaryKey:`
",alazier,ghmlee
957,2014-10-02 22:07:45,"I do like @ghmlee's `-objectForPrimaryKey:`
",jpsim,ghmlee
952,2014-10-01 16:37:37,"@alazier Stupid mistake :). Thanks!
",shmidt,alazier
950,2014-10-02 00:22:42,"@mbuchetics with these changes if you add an ANY modifier to your second query your code should now work. Until our next release you will have to build from master to make use of this.
",alazier,mbuchetics
949,2014-10-14 05:43:05,"@anlaital we're working on this, but don't have a timeline right now.
",jpsim,anlaital
949,2014-11-03 17:59:23,"@zxl777 I don't see a pull request for this change. Was this already merged in?

Is it a full database encryption or just a way to encrypt fields?
",DidierMalenfant,zxl777
949,2014-11-04 17:08:56,"@zxl777 I don't want to speak for others here but for me, field-level encryption won't be practical enough.
",DidierMalenfant,zxl777
948,2014-09-30 23:25:37,"@tgoyne now checks at runtime.
",jpsim,tgoyne
946,2015-07-03 14:57:08,"@Altimor I coppletely agree with you! Realm seems very cool, but when it comes to REST or any other background task, it's a pain. As you, I spent a lot of time mastering Realm, and now, I find that I can't use it because of this bad thread policy. Unfortunately, this adds to my obstacles list using Realm, and for this huge issue, the workaround is too complex, so I'm going to move to [Paper](https://github.com/pilgr/Paper).
",LouisCAD,Altimor
946,2017-01-03 01:39:09,"@stuartro in https://github.com/realm/realm-cocoa/issues/3925#issuecomment-237955141, I explain why thread confinement isn't a limitation or artificial constraint, but rather sits at the core of Realm's safety.

Whereas immutability provides thread safety by preventing you from ever changing anything, thread-confinement achieves it by combining mutations via ACID database transactions. Obviously never changing your database's values isn't really an option, so Realm uses option 2.

We have a PR that's currently in its final review phase (#4114) which allows creating thread-safe references to thread-confined Realm objects, which can be passed between threads, all while maintaining Realm's isolation guarantees.",jpsim,stuartro
940,2014-09-29 18:18:36,"@tgoyne we do try to add a subclass to an array here: https://github.com/realm/realm-cocoa/pull/940/files#diff-41cbd0b877f90f73a468d53cda02df13R461

It throws when the child type doesn't match the array type exactly
",alazier,tgoyne
939,2014-10-06 08:26:41,"@jpsim 

I still don't know how to make Realm and Mantle work together.
Could you please post some sample code here? that will be great helpful.

Thank you
",kukat,jpsim
939,2014-10-11 01:10:04,"Hey @kukat 

Once you get Mantle running, (here is a good tutorial http://www.objc.at/mantle) it will actually map your json strings to integers for you. Then when you have the mantleObject, with properly mapped properties, you just need to do something like this:



Where mantleDog = the properly mapped MantleObject
",yoshyosh,kukat
939,2014-10-15 04:49:22,"@yoshyosh 

Is that mean I need to write 2 model classes? one for MantleDog, one for RealmDog?
",kukat,yoshyosh
939,2014-10-15 16:02:50,"@kukat yes, model duplication is necessary to use Mantle with anything, really. That's the way it was designed. The same restriction applies to using Mantle with Core Data, for example.
",jpsim,kukat
938,2016-03-04 19:26:39,"@icanzilb this works for me too. I haven't analysed the conditions for success and still get scary looking warnings in the console, but REPL-oriented development is definitely possible with Realm !
",DanielAsher,icanzilb
938,2016-03-05 07:45:26,"@DanielAsher do you get any particular error reported? I have just this in the console, which looks like nothing serious: 

> 2016-03-05 08:44:13.591 RealmSwift[40751:650775] Failed to obtain sandbox extension for path=/var/folders/64/vmn77sp112xdn5np6mjtwxfw0000gn/T/com.apple.dt.Xcode.pg/containers/com.apple.dt.playground.stub.iOS_Simulator.RealmSwift-18C8513C-641D-4EF0-AA8D-570FDCB2DEC4/Library/Caches/com.apple.dt.playground.stub.iOS_Simulator.RealmSwift-18C8513C-641D-4EF0-AA8D-570FDCB2DEC4. Errno:1
",icanzilb,DanielAsher
938,2016-03-06 23:41:07,"@icanzilb - yes, this is (scary but harmless) error message I get. Realm REPL remains awesome. 
",DanielAsher,icanzilb
933,2014-09-26 17:21:05,"Hi @kevinnguy. Since Realm files need to have write permissions, you need to pass in a writable path to `realmWithPath:`. The Documents directory on iOS is usually a good place to keep Realm files. For example:



We'll be updating our docs section on ""[Other Realms](http://realm.io/docs/cocoa/latest/#other-realms)"" shortly to clarify this.
",jpsim,kevinnguy
933,2014-09-26 22:23:37,"Thanks @jpsim  for clarifying!
",kevinnguy,jpsim
933,2015-05-31 03:22:50,"@abdulrauf618 could you please file a new issue? Thanks.
",jpsim,abdulrauf618
933,2015-05-31 07:17:44,"thanks @jpsim I fixed it.
",abdulrauf618,jpsim
933,2015-08-29 17:01:21,"@abdulrauf618 how did you fix it?
",martinliu0,abdulrauf618
933,2015-08-29 17:44:03,"@martinliu0 : In our case we were doing a mistake in integration, when I double check the things that issue were fixed.

Check you integration steps.

Realm team have example code, so check example project also hope, it will help you.
",abdulrauf618,martinliu0
933,2015-09-07 15:28:48,"@abdulrauf618 having the same issue. Could you clarify which mistakes can lead to it? Works fine in Swift 1.2, issue is reproducible only in Swift 2.0
",richardtop,abdulrauf618
933,2016-03-10 17:23:05,"If anyone else comes across this I believe this is the function you're looking for: [RLMRealmPathForFile](https://github.com/realm/realm-cocoa/blob/master/Realm/RLMRealmConfiguration.mm)

However, I use this function and am still seeing crashes being reported in Crashlytics. The thing is, I've never seen the app crash and none of my testers have reported crashes so I wonder if it has to do with starting the app in the background. @jpsim Are write permissions different when iOS launches the app to perform a background fetch? 

I know when iOS 7 first came out there were a lot of issues with the Keychain and background fetch so I wonder if there is something similar going on here. 

Crash:



And this is how I initialize the realm, nothing fancy:


",AndrewBarba,jpsim
931,2014-09-28 03:39:26,"@drinking: did you resolve this? If not, don’t forget to put the files somewhere so we can investigate this for you!
",timanglade,drinking
931,2014-09-28 06:40:15,"@timanglade I've sent my code.It's a bit complicated. I hope it won't take you much time.
I set RLMRealm.defaultRealm.autorefresh = NO; in applicationdidFinishLaunchingWithOptions but it still happen.
",drinking,timanglade
931,2014-09-28 12:25:05,"@timanglade It happens Occasionally in the following steps
(1)add some data into database
(2)kill the app
(3)reopen the app
It will become twice larger than before.
",drinking,timanglade
931,2014-09-28 12:36:46,"Are you using Realm as a cache of some data?
And if so, are you clearing/deleting it when you start the app?

On Sun, Sep 28, 2014 at 2:25 PM, Drinking notifications@github.com wrote:

> @timanglade https://github.com/timanglade It happens Occasionally in
> the following steps
> (1)add some data into database
> (2)kill the app
> (3)reopen the app
> It will become twice larger than before.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/931#issuecomment-57083875.
",bmunkholm,timanglade
931,2014-09-29 13:11:38,"Closing this issue as @drinking has confirmed this issue is resolved with the latest version.
",jpsim,drinking
930,2014-09-24 03:13:34,"Thanks for the fix @rrrlasse @kspangsege . These changes have been incorporated into #918 along with binding support.
",alazier,kspangsege
928,2014-09-25 04:58:59,"Thanks for the feedback. Support for optional properties has been something we have wanted to do since before launch but we simply haven't had the time. We have been spending most of our time since launch bug fixing and building the easier request features, but hopefully we can soon start to tackle some of the meatier features and enhancements (ie optional properties and fine-grained notifications).

@eni9889 In your example I don't see how ignoring null values in JSON would work unless we also have optional support - even if we ignored the null you would get an exception for any required property without a value when adding to a Realm - perhaps I am missing something?

@aleclarson If Any/id properties supported RLMObjects I guess you could use id properties to make something optional. I think this is something we should fix, but generalized optional support (including support for Swift optionals) is probably a higher priority and preferable.
",alazier,eni9889
928,2014-09-25 04:58:59,"Thanks for the feedback. Support for optional properties has been something we have wanted to do since before launch but we simply haven't had the time. We have been spending most of our time since launch bug fixing and building the easier request features, but hopefully we can soon start to tackle some of the meatier features and enhancements (ie optional properties and fine-grained notifications).

@eni9889 In your example I don't see how ignoring null values in JSON would work unless we also have optional support - even if we ignored the null you would get an exception for any required property without a value when adding to a Realm - perhaps I am missing something?

@aleclarson If Any/id properties supported RLMObjects I guess you could use id properties to make something optional. I think this is something we should fix, but generalized optional support (including support for Swift optionals) is probably a higher priority and preferable.
",alazier,aleclarson
928,2014-09-25 06:05:27,"@alazier if I ignore the nil/NSNull values and have default values set then the code works
",eni9889,alazier
928,2014-09-25 14:18:03,"@eni9889 makes sense. We could probably make this work sooner than having proper optional support.
",alazier,eni9889
928,2014-09-25 14:51:52,"Just merged a fix to master which should address the NSNull/default value issue. It his doesn't fix your problem @eni9889 please let us know. Closing this as #628 addresses adding general support for optionals.
",alazier,eni9889
926,2014-09-29 23:54:05,"Hi @dismory, we just closed this issue because calling `-description` on a deleted `RLMObject` will no longer throw, but rather returns `[deleted object]`. Thanks @tgoyne!
",jpsim,dismory
924,2014-09-23 01:48:18,"Not sure why this is failing on ci if you have ideas @tgoyne @emanuelez @kneth 
",alazier,tgoyne
922,2014-10-01 00:52:41,"@GreatApe have you confirmed that this runs on Xcode 5 and 6? Plugins require differently compatibility ID's for each Xcode version, AFAIK. If so, then please merge this.
",jpsim,GreatApe
921,2015-06-18 08:22:42,"This would be really nice to have, especially when dealing with JSON data.

In the meanwhile the snippet by @aschuch (thank you!) can be a little shorter using `??` and dropping the `get`:


",gabro,aschuch
921,2015-06-30 22:16:34,"@danyalaytekin unfortunately, this is still the case, as Realm Swift still relies on properties being `dynamic`.
",segiddins,danyalaytekin
921,2015-06-30 22:21:02,"@segiddins np, thanks for the quick confirmation! :+1: 
",danyalaytekin,segiddins
921,2015-08-21 00:10:53,"@frazer-rbsn this is still impossible, even as of Swift 2.0, as the runtime doesn't give us the information we need to be able to determine what we need to store under the hood.
",segiddins,frazer-rbsn
921,2015-08-21 10:51:32,"@segiddins 
Thanks for looking into this. The workaround posted here is simple and works a treat anyway. Thanks!
",frazer-rbsn,segiddins
921,2016-04-05 17:17:45,"@segiddins In terms of runtime not giving you enough info, what do you mean by this? Could you not require provide a simple protocol that users would adopt on their enums to give you whatever it is that's needed (ie: CustomStringConvertible for example if you need to map the enum to a string to persist). Or your own RealmEnumValueConvertible in case the user already implemented CustomStringConvertible and wants to differ the persisted value from it (rare, but could be valid in certain cases).

PS: I find the deltas between the model objects and what's needed to persist them in Realm is really blowing up our domain - I think it would be a great goal for the team to try to prioritize minimizing these differences for the overall adoption/practicality of the framework. Enum persistence would be a great win on this front.
",marchy,segiddins
921,2016-07-23 02:30:55,"@jpsim I think what @piv199 meant was whether Swift 3.0 added any of the runtime info that @segiddins  mentioned eg: ""...as of Swift 2.0, as the runtime doesn't give us the information we need to be able to determine what we need to store under the hood"".

Also, what do you guys think of my proposed solution to provide a protocol that enums can adopt in order to provide you with the serialized info you need?
",marchy,jpsim
921,2016-07-23 02:30:55,"@jpsim I think what @piv199 meant was whether Swift 3.0 added any of the runtime info that @segiddins  mentioned eg: ""...as of Swift 2.0, as the runtime doesn't give us the information we need to be able to determine what we need to store under the hood"".

Also, what do you guys think of my proposed solution to provide a protocol that enums can adopt in order to provide you with the serialized info you need?
",marchy,piv199
921,2016-07-23 02:30:55,"@jpsim I think what @piv199 meant was whether Swift 3.0 added any of the runtime info that @segiddins  mentioned eg: ""...as of Swift 2.0, as the runtime doesn't give us the information we need to be able to determine what we need to store under the hood"".

Also, what do you guys think of my proposed solution to provide a protocol that enums can adopt in order to provide you with the serialized info you need?
",marchy,segiddins
919,2014-10-14 05:32:43,"@davegomez did you ever resolve this?
",jpsim,davegomez
919,2014-11-12 23:42:15,"Closing this as we haven't heard back from @davegomez and no one else has reported this issue.
",jpsim,davegomez
915,2014-09-30 08:53:41,"@jpsim @yoshyosh @tgoyne  
Can we please merge this? Not because the tooltips in themselves are that important but because it's a bit of a refactoring, if we don't merge this now subsequent merges will be very messy...
",GreatApe,yoshyosh
915,2014-10-01 00:45:06,"@GreatApe you can merge this once you've addressed my (minor) feedback. Ideally, these calls would be done asynchronously as to not block the UI thread.
",jpsim,GreatApe
913,2015-04-05 07:32:37,"@timanglade  Do you have any update for us ?  Don't want to go back to the core data again for my new project. 
",tariq235,timanglade
913,2015-04-06 16:35:46,"Sorry, nothing new to report here, we see the upvotes and take (very) good
note of them, but as you can tell from our activity elsewhere on this
project, we are focusing on building the best possible on-device database
first, and we still have a long way to go there. We don’t want to
compromise the experience you have by adding too many big features too
quickly, but we understand that sync is something that is extremely
important to y’all.

On Sun, Apr 5, 2015 at 12:32 AM, Tariq Mohammad notifications@github.com
wrote:

> @timanglade https://github.com/timanglade Do you have any update for us
> ? Don't want to go back to the core data again for my new project.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/913#issuecomment-89730305.
",timanglade,timanglade
913,2015-04-14 04:13:08,"Thanks for the update @timanglade. Much appreciated.
",tariq235,timanglade
913,2015-08-04 21:28:17,"@timanglade any update on this?
",kermankohli,timanglade
913,2015-08-04 23:07:35,"Some essential features of the sync mechanism I'd like to see:
- Data to be synced across multiple clients (iOS, Android, Web, WP7 etc)
- Roles/permissions for objects
- Sever code (similar to Parse's cloud code utility) in order to define validation rules or execute code which has to the ability to bypasses roles/permissions

The above could be accomplished by a paid server hosting service by Realm (BAAS?) or an option to deploy a server library to your own server (similar to what Couchbase does).

Another solution could be to create multiple REST API examples of how Realm can be used, eg. todo list with relationships being synced or a social networking app based off Parse (or another BAAS/REST API).

Hope that gives some more helpful suggestions @timanglade!
",kermankohli,timanglade
913,2015-08-05 17:45:00,"I've already added a couple of our cents to this, but to summarise and add a little:
- Partial sync
- Flexible hosting (GAE compatibility is a MUST to work with the rest of our server stuff) - a documented REST API ideally - RAML? APIBlueprint? different on the wire formats - json? protobuf? flatbuffers?) and maybe your own implementation as suggested by @kermankohli 
- Customisable merge conflict resolution strategies - exposure to these internals will be very important.
- Cross platform. And of course, the only reason for picking this over core-data is it works on multiple platforms
",samskiter,kermankohli
913,2015-08-14 09:48:31,"@desduvauchelle I don't think that would be possible as you describe. You need some way of identifying who the data belongs to. I.e. you need some login mechanism.
",samskiter,desduvauchelle
913,2015-09-07 10:54:18,"@davidjoan @andr3a88 : Great if you could also add a few notes about your particular needs. Thx!
",bmunkholm,andr3a88
913,2015-09-07 10:54:18,"@davidjoan @andr3a88 : Great if you could also add a few notes about your particular needs. Thx!
",bmunkholm,davidjoan
913,2015-09-11 15:08:01,"@davidjoan

Initially, if it is easier a backup/restore service from external services like dropbox, gdrive and icloud.
",andr3a88,davidjoan
913,2015-09-28 12:42:32,"Great points @tom-sparo 

> At the very least there should be support for arbitrary merge on detected conflicts -- and some way to escalate to the human user if a merge shouldn't be automatic.
> Yes this.

Interesting reading re: CRDTs. IMO, I don't think many app developers would want to opt for CmRDTs because of all the connection-based stuff. (A user might not open an app for a month or more and still expect it to work).

Dan Grover's sync presentation from '09 has been invaluable to me for getting my head around sync. See here (although this is only one of many possible CRDTs AFAICT): http://stackoverflow.com/questions/5035132/how-to-sync-iphone-core-data-with-web-server-and-then-push-to-other-devices/5164878#5164878 (the link is broken, but someone has found it again on the waybackmachine).
",samskiter,tom-sparo
913,2015-10-19 15:46:37,"@tom-sparo 

> If you're saying that there's a period of time after being disconnected that a local database will stop working, I think there's no theoretical limit on a partition time disconnected (though there may be practical ones) -- meaning that if an app becomes disconnected, because CRDT guarantees local availability by using eventual consistency rather than strong consistency, all writes and reads to the local database are guaranteed to succeed... and when the app reconnects the replica will become consistent with all other replicas assuming that the other replicas (i.e. users on other phones) commutative state changes have been stored for when the replica comes back online (this requires a queue). So an app's local database is ALWAYS available for read/write no matter it's connected/disconnected/partial connected state.

I was referring to your previous para:

> The coordinator will also have to keep track of all the past changes so that when a client reconnects it can send the appropriate changes to the client. These could possibly be consolidated but a major problem is knowing how long to wait for a client to reconnect before declaring them lost. Otherwise, coordinators have to keep track of all past changes indefinitely. This is more or less the question of when to rebase. More recent changes could be cached for users that expect less latency as they are actively connected, whereas users transitioning out of offline mode might expect more latency as the coordinator gets all the past changes to update the client on and do merging.

As I understand it, this connection-based approach is required for CmRDT (not that I really understand what a CRDT is due to lack of concrete examples) because it replays diffs and, as you mentioned, changes need to be kept around indefinitely. I can't see this being a good solution for most mobile apps...
",samskiter,tom-sparo
913,2015-10-21 04:05:16,"@ubertao Please contact me because I am also using Couchbase Lite for syncing. I wanted to use Realm, but since didn't have syncing, I looked for another solution and found Couchbase Lite. I also have multi-user requirements and I would like to discuss how you're doing it in more detail. Sorry for using this post, but you didn't have any contact information on your github page.
",brendand,ubertao
913,2015-11-17 07:42:03,"@siuying 👍👍👍 this is so true!!! You nailed it down. Exactly that kind of thing I am dreaming about and I think realm is best for!
",Fab1n,siuying
913,2015-11-17 08:55:48,"Agree with @siuying .
Please people at Realm give us some (hopefully good) news...
",stefalda,siuying
913,2015-11-17 23:31:30,"I also agree with @siuying. I have a couple projects that are a great fit for Parse, but I'm planning a personal finance app for January which syncs between a user's iOS devices and Mac with CloudKit as the backend (i.e. personal sync without managing a server, less security risk for user & developer). I'm planning to use Realm for the local database, probably with https://github.com/BellAppLab/RealmCloudKit, but official support for CloudKit would be tremendous and it would help a lot of iOS developers to leave CoreData behind. Also, maintaining encryption support with the sync mechanism would be ideal.
",blwinters,siuying
913,2015-12-27 03:05:30,"@basvk if you are looking for p2p sync, you might want to check couchbaselite/pouchdb
",siuying,basvk
913,2016-01-08 15:38:00,"My use case is similar to @siuying .  I am developing an android-only app, and would like to sync the realm db via the user's Google Drive app folder.
",cknibbe,siuying
913,2016-01-29 14:57:33,"I second @blwinters  statement.
",cknibbe,blwinters
913,2016-01-29 14:58:40,"+1 @blwinters 
",semireg,blwinters
913,2016-01-29 17:46:12,"+1 @blwinters 
",jacobcaraballo,blwinters
913,2016-01-29 21:07:46,"I totally agree with @blwinters last comment. Given that Parse's service will shut down, I think you guys have a huge opportunity that you can't simply miss.
",pblondin,blwinters
913,2016-02-01 02:31:57,"+1 @blwinters
",NilStack,blwinters
913,2016-02-23 14:35:51,"@timanglade Any news about sync feature?
",alexnaldo,timanglade
913,2016-03-20 06:16:43,"@oyalhi I'm using Cloudant, but with CouchbaseLite on iOS and Mac. Works great.
",brendand,oyalhi
913,2016-03-21 10:36:04,"@brendand May I ask why you have chosen CouchbaseLite rather than Cloudant for database services. I am looking for offline-first database then need cloud sync as well. CouchbaseLite does not seem to be offline-first? Realm would be a good choice once they complete; however, untill then I am looking for the right approach.
",oyalhi,brendand
913,2016-03-21 10:52:05,"@siuying I am just learning more about NoSQL. It is an interesting topic and I might just choose to go that way. I am still at evaluation and getting up to speed phase. Thanks for the info, I will look more into CouchbasLite. Most important aspect of my use case is offline-first, and online sync if and when I want to (RDBMS or NoSQL both seems fine).
",oyalhi,siuying
913,2016-03-21 18:41:07,"@oyalhi Right. CouchbaseLite is definitely offline first. One of the beauties of a NoSQL / JSON document based engine is you'll never have to worry about database schema migrations again. Just add new properties to your model objects and be done with it. Let the engine take care of it for you. Syncing is really nice even with peer-to-peer networks and IBM Cloudant. I didn't use the Cloudant iOS SDK because I wanted to be able to offer my customers the ability to host their own Couchbase Servers for a workgroup setting. Plus at the time I picked CouchbaseLite, I didn't know about Cloudant and didn't know they had an iOS SDK. If you'd like to continue this discussion off this thread, just email me at brendand a-t gmail dot com.
",brendand,oyalhi
913,2016-06-17 20:40:11,"@leotumwattana How would you go about handling syncing with a separate framework? The best solution for syncing is to sync only changed data like CoreData. Currently the only way to sync over iCloud is to sync the entire DB but that can cause issues where items are added on multiple devices.
",anthonycastelli,leotumwattana
913,2016-06-18 18:10:45,"@anthonycastelli Apple's CloudKit sounds like a possible reference? @mikejonas KiteSync solution looks interesting too.

I agree, we shouldn't try to sync the entire DB file. Too many issues there for corruption, conflicts, waste of network bandwidth and what not. 

Correct me if I'm wrong, iCloud supports file syncing, but that's really meant for documents and not really for structured data such as Realm?

Apple tried the whole let CoreData magically sync your stuff for you method. It sounds great on paper, but it's such a black box. As @woolfel mentioned, conflict resolution is important and very domain specific. 

What I'm thinking is maybe keeping Realm focused on persistence and letting another framework / service provide the transmission, cloud persistence and conflict resolution might be a better thing in the long run?

Cheers
",leotumwattana,woolfel
913,2016-06-18 18:10:45,"@anthonycastelli Apple's CloudKit sounds like a possible reference? @mikejonas KiteSync solution looks interesting too.

I agree, we shouldn't try to sync the entire DB file. Too many issues there for corruption, conflicts, waste of network bandwidth and what not. 

Correct me if I'm wrong, iCloud supports file syncing, but that's really meant for documents and not really for structured data such as Realm?

Apple tried the whole let CoreData magically sync your stuff for you method. It sounds great on paper, but it's such a black box. As @woolfel mentioned, conflict resolution is important and very domain specific. 

What I'm thinking is maybe keeping Realm focused on persistence and letting another framework / service provide the transmission, cloud persistence and conflict resolution might be a better thing in the long run?

Cheers
",leotumwattana,anthonycastelli
913,2016-06-18 18:10:45,"@anthonycastelli Apple's CloudKit sounds like a possible reference? @mikejonas KiteSync solution looks interesting too.

I agree, we shouldn't try to sync the entire DB file. Too many issues there for corruption, conflicts, waste of network bandwidth and what not. 

Correct me if I'm wrong, iCloud supports file syncing, but that's really meant for documents and not really for structured data such as Realm?

Apple tried the whole let CoreData magically sync your stuff for you method. It sounds great on paper, but it's such a black box. As @woolfel mentioned, conflict resolution is important and very domain specific. 

What I'm thinking is maybe keeping Realm focused on persistence and letting another framework / service provide the transmission, cloud persistence and conflict resolution might be a better thing in the long run?

Cheers
",leotumwattana,mikejonas
913,2016-08-23 14:12:04,"@bmotmans  that approach should work fine for cases where ""commit log"" style CRDT works well. For situations where conflict resolution is needed commit log style CRDT might not be a good fit. There's lots of examples where CRDT is used like Mongo, Cassandra and most noSql databases. To do arbitrary conflict resolution, you actually need the history of the versions. I agree Realm should have some of this baked in, so that developers can focus on the network part without worrying about building their own commit log + sync. Building a bullet proof commit log that follows established CRDT theory isn't trivial or easy.
",woolfel,bmotmans
912,2014-09-17 16:31:54,"As @jpsim said, case insensitive queries are supported for direct property queries:


",alazier,jpsim
912,2015-04-13 08:19:06,"@GokhanArik : Just saw this by coincident (closed issues are normally not monitored). Case insensitive queries are supported which should be very clear from the API - if not, let us know on the Android github.
Thx
",bmunkholm,GokhanArik
912,2015-04-13 15:31:05,"@bmunkholm Yes, I found it. I missed that part in docs. Sorry for inconvenience. 
",GokhanArik,bmunkholm
910,2014-09-17 17:05:00,"@zipme did deleting the realm file resolve your issues?
",alazier,zipme
910,2014-09-17 19:01:01,"@alazier nope, I deleted the realm file and restarted the app, still showed as AnyType, I haven't tried deleting the whole app tho.
",zipme,alazier
910,2014-09-29 07:06:59,"@alazier @timanglade @jpsim  I have just tried 0.85.0 and everything works perfectly now! Thanks for the fix!
",zipme,alazier
910,2014-09-29 07:06:59,"@alazier @timanglade @jpsim  I have just tried 0.85.0 and everything works perfectly now! Thanks for the fix!
",zipme,timanglade
910,2014-09-29 07:06:59,"@alazier @timanglade @jpsim  I have just tried 0.85.0 and everything works perfectly now! Thanks for the fix!
",zipme,jpsim
908,2014-11-25 13:42:05,"@jpsim just chiming in to say that this is still happening with Cocoapods 0.35.0 and Realm 0.87.4.
Just as @kronik mentioned after several attempts, it has finally completed successfully.
",bsarrazin,jpsim
908,2014-11-25 13:42:05,"@jpsim just chiming in to say that this is still happening with Cocoapods 0.35.0 and Realm 0.87.4.
Just as @kronik mentioned after several attempts, it has finally completed successfully.
",bsarrazin,kronik
908,2014-11-25 19:25:33,"@jpsim ok cool, no problem, I was simply reporting back as an FYI
Thanks for the support!
",bsarrazin,jpsim
906,2014-09-15 14:48:59,"Thanks for the write-up @mergesort. We definitely want to allow something like this, be it via inheritance or via composition. It’s hard to do well (read: while maintaining performance with millions of objects composed from a complex hierarchy of inheritances), but we have a few ideas we’re working on…
",timanglade,mergesort
900,2014-09-17 18:20:33,"@matthewcheok did the latest changes resolved your issues submitting to the app store? Thanks.
",alazier,matthewcheok
900,2014-10-08 13:11:42,"@matthewcheok sorry to hear that. I'm afraid the best solution here is to use the latest release of Realm (`0.86.2`), which uses a static framework instead of a dynamic one, which bypasses this potential issue altogether.

@tgoyne may have more insight into this...
",jpsim,tgoyne
900,2014-10-08 13:11:42,"@matthewcheok sorry to hear that. I'm afraid the best solution here is to use the latest release of Realm (`0.86.2`), which uses a static framework instead of a dynamic one, which bypasses this potential issue altogether.

@tgoyne may have more insight into this...
",jpsim,matthewcheok
900,2014-10-14 05:29:22,"Hi @matthewcheok, did updating to the latest version fix these issues for you?
",jpsim,matthewcheok
900,2014-10-14 07:42:22,"Still waiting on iTunes Connect...

On Tue, Oct 14, 2014 at 1:29 PM, JP Simard notifications@github.com
wrote:

> ## Hi @matthewcheok, did updating to the latest version fix these issues for you?
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/issues/900#issuecomment-58992143
",matthewcheok,matthewcheok
898,2014-09-12 18:08:25,"Hi @zgavin, I should have provided more context in my last answer.

Realm only supports optional relationships (properties to other `RLMObject`s). Support for other types is in progress and will come in a future release. You're right, this is a limitation and we'll add it to our docs.

In your case, since your properties _are_ to other `RLMObject`s, the limitation is with our Swift interface. We're actively reworking our Swift interface to be much nicer (see #889), but for the time being, if you need optional `RLMObject` properties, you'll need to define these models in Objective-C.

If you'd like to keep everything in Swift, there is another workaround, but it's fairly complex:


",jpsim,zgavin
897,2014-10-01 00:41:03,"@tgoyne can you please update this when you get the chance?
",jpsim,tgoyne
894,2014-09-11 21:59:06,"@alazier 
How can it be achieved with other apis? Or do you mean when dynamic becomes fully functional? For me it's fine to wait until we have working dynamics and can do anything we want, but I thought it would be nice to at least be able to do something, and this seemed like a low hanging fruit.
",GreatApe,alazier
894,2014-10-01 00:40:24,"@GreatApe what would you like to do with this PR now?
",jpsim,GreatApe
894,2014-10-01 15:38:39,"@jpsim @alazier 
It would be nice to merge it since I spent some time making sure all kinds of row rearrangement work, including if you move for example rows 3, 8, and 10 to index 5. 

But it requires a change to the bindings, which might not be very useful in other cases. The thing is that because dynamic objects aren't really supported yet, I can't use any of the other array related methods (like insert etc). The move method works because it doesn't refer to objects, only their indices, so it never checks the object class.

Perhaps the best thing is to wait until dynamic objects work, then I can use the UI from this PR, add some functionality for inserting and drag-dropping from other windows, and use the dynamic functionality. 

All the same, even when we have a working dynamic interface, it would seem natural to use the move function when we are moving objects within an array, rather than removing and putting back in. So then we would need the binding change anyway.
",GreatApe,jpsim
894,2014-10-01 15:38:39,"@jpsim @alazier 
It would be nice to merge it since I spent some time making sure all kinds of row rearrangement work, including if you move for example rows 3, 8, and 10 to index 5. 

But it requires a change to the bindings, which might not be very useful in other cases. The thing is that because dynamic objects aren't really supported yet, I can't use any of the other array related methods (like insert etc). The move method works because it doesn't refer to objects, only their indices, so it never checks the object class.

Perhaps the best thing is to wait until dynamic objects work, then I can use the UI from this PR, add some functionality for inserting and drag-dropping from other windows, and use the dynamic functionality. 

All the same, even when we have a working dynamic interface, it would seem natural to use the move function when we are moving objects within an array, rather than removing and putting back in. So then we would need the binding change anyway.
",GreatApe,alazier
894,2014-10-01 17:04:30,"I'm ok with adding this functionality in the binding, but we'll need @tgoyne and @alazier to review first.

For PR's you want reviewed and that you consider complete, please make sure it's up to date with `master` and remove WIP from the title.
",jpsim,alazier
891,2014-09-16 11:27:34,"@jpsim 
It should be possible in principle, using reloadDataForRowIndexes:columnIndexes, but:
- This only makes sense for some kinds of edits (not deleting lots of object or array links, or other things that are not yet supported)
- The same object can be viewed in a table, an array and an object link, or even a query. It's very tedious to figure out what exactly to reload and not.
- Total reload is very fast, and since this is something that happens in response to a user event, speed is not that important - we won't have to do it many times a second.
- There seems to be a bug in this method, at least there was a few years ago, and I haven't been able to use it
",GreatApe,jpsim
891,2014-09-23 08:49:12,"@jpsim @tgoyne @alazier 

I don't think it is practical to try to reload individual cells in this case, for reasons I outlined above. Can we merge this as it is?
",GreatApe,jpsim
891,2014-09-29 08:28:33,"Can we merge this?
@jpsim 
",GreatApe,jpsim
891,2014-10-01 00:32:19,"@GreatApe sure, shipit!
",jpsim,GreatApe
890,2014-09-11 17:43:24,"I recorded a very simple and short video (60s) demonstrating that with a new OSX project and a `Podfile` with only the ""Realm"" pod, things work as expected. Video here: http://static.realm.io/videos/OSX_CocoaPods.mp4

The steps are roughly:
1. Create new OSX app Xcode project in Xcode 5
2. Make sure it runs
3. In this case, because of my set up, Xcode incorrectly sets the deployment target as 10.10, even with Xcode 5, so I fix these deployment issues. Odds are you won't have to do this on your system.
4. Create a Podfile with `pod ""Realm""`
5. Run `pod install`
6. Add `#import <Realm/Realm.h>` where you'd like to use Realm.

Could you please follow these steps to confirm that this works on your system @paulmalyschko @onekiloparsec? From there, the trick is to see what you're doing differently in your own projects.

> I had to manually switch off the Swift support

Please don't do this. This will lead to things breaking.

> I commented out the bridging header for Swift as well.

Same here. Simply commenting out the `#import <Realm/Realm-Bridging-Header.h>` will lead to some unexpected behavior.
",jpsim,paulmalyschko
890,2014-09-11 17:43:24,"I recorded a very simple and short video (60s) demonstrating that with a new OSX project and a `Podfile` with only the ""Realm"" pod, things work as expected. Video here: http://static.realm.io/videos/OSX_CocoaPods.mp4

The steps are roughly:
1. Create new OSX app Xcode project in Xcode 5
2. Make sure it runs
3. In this case, because of my set up, Xcode incorrectly sets the deployment target as 10.10, even with Xcode 5, so I fix these deployment issues. Odds are you won't have to do this on your system.
4. Create a Podfile with `pod ""Realm""`
5. Run `pod install`
6. Add `#import <Realm/Realm.h>` where you'd like to use Realm.

Could you please follow these steps to confirm that this works on your system @paulmalyschko @onekiloparsec? From there, the trick is to see what you're doing differently in your own projects.

> I had to manually switch off the Swift support

Please don't do this. This will lead to things breaking.

> I commented out the bridging header for Swift as well.

Same here. Simply commenting out the `#import <Realm/Realm-Bridging-Header.h>` will lead to some unexpected behavior.
",jpsim,onekiloparsec
889,2014-09-12 01:04:18,"After discussing this with @tgoyne and @alazier, we've established we'll do the following modifications:
- call Swift module `RealmSwift` so we don't collide with the `Realm` class
- rename `RealmArray` to `List`
- encapsulate `Object` through `RLMObjectBase` (base class) or `RLMPersistable` (protocol)
- consider changing order of functions
- use .filter() instead of predicate arguments
- wrap `RLMObject` in `Object` (don't expose `defaultPropertyValues` or `JSONString`)
- update tests
",jpsim,alazier
889,2014-09-12 01:04:18,"After discussing this with @tgoyne and @alazier, we've established we'll do the following modifications:
- call Swift module `RealmSwift` so we don't collide with the `Realm` class
- rename `RealmArray` to `List`
- encapsulate `Object` through `RLMObjectBase` (base class) or `RLMPersistable` (protocol)
- consider changing order of functions
- use .filter() instead of predicate arguments
- wrap `RLMObject` in `Object` (don't expose `defaultPropertyValues` or `JSONString`)
- update tests
",jpsim,tgoyne
888,2014-10-01 00:31:35,"@tgoyne please merge master in here so we can do one final review pass.
",jpsim,tgoyne
888,2014-10-13 23:30:32,"@tgoyne is this still good to go? If so merge away
",alazier,tgoyne
886,2014-09-10 18:51:38,"@tgoyne agreed, the bitmask version is more legible and makes the code easier to reason about.
",jpsim,tgoyne
880,2014-09-11 17:57:23,"@GreatApe how long does this searching process take? Thankfully, `NSMetadataQuery` searches in the background. Can we show a placeholder if no databases were found and if the search is ongoing?
",jpsim,GreatApe
880,2014-09-15 07:26:56,"@jpsim 

It now also displays the app name (or rather, xcode project name) for files in the developer folder.

One could potentially want to show the app name for files in the simulator too, that should be possible using the same technique. It's pretty fast, it takes about 100 ms to do the initial query for all files matching *.xcodeproj - this is done at app launch, in the background, and then when the menu is used it takes 1 ms to lookup the app name for each menu item in the developer menu.
",GreatApe,jpsim
880,2014-09-16 14:51:43,"@jpsim 

Now that both app name is displayed both for the developer folder and files in the simulator, can we merge this?
",GreatApe,jpsim
878,2014-09-08 04:48:25,"Hi @zxl777, due to the way the [`NSFileProtection` API's](https://developer.apple.com/library/ios/documentation/cocoa/reference/foundation/classes/NSFileManager_Class/Reference/Reference.html#jumpTo_95) work, the database file will be always readable and writable by your app when it is running in the foreground.

This protection should be sufficient for the use cases you mentioned.

If for some reason you wish to not use iOS's provided (and highly optimized) file encryption mechanism, you may be better served by using SQLCipher, SQLiteEncrypt or SEE with SQLite.
",jpsim,zxl777
875,2015-03-10 22:25:19,"I have to agree with @dginsburg that having `NSDate` in the [list of supported property types](http://realm.io/docs/cocoa/0.91.0/#property-types) sends a mixed message. Until a resolution is found, perhaps the docs could link to the [limitation detail](http://realm.io/docs/cocoa/0.91.0/#nsdate-is-truncated-to-the-second) directly in the property types list to be more explicit?

---

Realm supports the following property types: `BOOL`, `bool`, `int`, `NSInteger`, `long`, `long long`, `float`, `double`, `CGFloat`, `NSString`, `NSDate` ([truncated to the second](http://realm.io/docs/cocoa/0.91.0/#nsdate-is-truncated-to-the-second)), and `NSData`.
",pizthewiz,dginsburg
875,2015-03-10 22:41:17,"@pizthewiz thanks for the suggestion, @yoshyosh just made the change on the website: http://realm.io/docs/cocoa/0.91.0/#property-types
",jpsim,pizthewiz
875,2015-06-18 20:22:56,"What's the status on NSDate property type being lossless? @jpsim 
",marcoscurvello,jpsim
875,2015-06-18 20:29:12,"@marcoscurvello it's something that's still being discussed, since it would require changes at the core database level as to how we store dates. JP's earlier suggestion as to how to workaround the issue still stands:

> In the meantime, if you need sub-second accurate dates, please use NSTimeInterval or any other supported Realm type with suitable accuracy.
",segiddins,marcoscurvello
875,2015-06-18 22:51:38,"@segiddins Okay, thanks. That's what I am currently doing. :smirk: 
",marcoscurvello,segiddins
875,2015-11-30 15:19:39,"@WolfTrinity are you sure you're not declaring that property as a `NSTimeInterval?` (`Optional<NSTimeInterval>`)? Objective-C primitives can't be represented as `dynamic` and `Optional` due to limitations in the Swift runtime.

If you need this property to be optional, you can mark it as `RealmOptional<NSTimeInterval>`.
",jpsim,WolfTrinity
875,2015-11-30 15:37:58,"@jpsim Oh sorry, my fault: I've just substituted `NSDate?` with `NSTimeInterval?`, but I forgot that not all the optional types are supported in the standard swift way, but need to use `RealmOptional`.
Anyway, this still prevents me to use `dynamic` (I can't declare `dynamic let myDate =  RealmOptional<NSTimeInterval>()`) so I can't use KVO on it.

Thanks for the hint!
",WolfTrinity,jpsim
868,2014-09-04 00:42:35,"@kspangsege Sweet. Right now the only core functionality from core we are using is calling find_first for string and int to ensure uniqueness. Once we have a more efficient way to do this it shouldn't be difficult to switch over. We are not using any indexing as there is an issue with string indexing and int indexing isn't yet implemented.
",alazier,kspangsege
868,2014-09-04 01:05:22,"Can you say more about the issue with string indexes, or point to a related
Asana task?

On Thu, Sep 4, 2014 at 2:42 AM, Ari Lazier notifications@github.com wrote:

> @kspangsege https://github.com/kspangsege Sweet. Right now the only
> core functionality from core we are using is calling find_first for string
> and int to ensure uniqueness. Once we have a more efficient way to do this
> it shouldn't be difficult to switch over. We are not using any indexing as
> there is an issue with string indexing and int indexing isn't yet
> implemented.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/868#issuecomment-54389640.
",kspangsege,kspangsege
868,2014-09-05 04:37:13,"@alazier I'm running into the following exception:



This happens because I have the following json:



Does createOrUpdateInDefaultRealmWithObject not get called on nested objects?
",eni9889,alazier
868,2014-09-05 04:57:26,"@eni9889 you are correct that upserting nested objects doesn't yet work properly. You can probably work around this by upserting nested objects before the parent - for the data you provided it would be something like:



Once we get this fixed you can delete the calls to `addOrUpdateObject:` for the nested objects.
",alazier,eni9889
868,2014-09-05 04:58:52,"Yep that's my solution for now.

Sent from my iPhone

On Sep 5, 2014, at 12:57 AM, Ari Lazier notifications@github.com wrote:

@eni9889 https://github.com/eni9889 you are correct that upserting nested
objects doesn't yet work properly. You can probably work around this by
upserting nested objects before the parent - for the data you provided it
would be something like:

Person *person = [[Person alloc] initWithObject:parsedJSON];[realm
addOrUpdateObject:person.address];[realm addOrUpdateObject:person];

Once we get this fixed you can delete the calls to addOrUpdateObject: for
the nested objects.

—
Reply to this email directly or view it on GitHub
https://github.com/realm/realm-cocoa/pull/868#issuecomment-54585100.
",eni9889,eni9889
867,2014-09-03 21:15:44,":+1: 
@kspangsege I think it's because of this https://github.com/realm/realm-cocoa/blob/master/Realm/RLMArray.mm#L292
",jpsim,kspangsege
863,2014-09-03 16:13:09,"@jpsim got it, but what about running Realm instances hold by dispatch queues?
",dismory,jpsim
863,2014-09-03 17:43:24,"@jpsim :+1: instead of nil them one-by-one manually, I will block the data processing serial queue until all data processing blocks which hold realm has finished when shutting down :sunglasses: 
",dismory,jpsim
862,2014-09-03 17:09:37,"Hi @eni9889, it looks like what you'd like to do is find `IMAuthor` objects where its `books` array property has more than zero objects:



Realm doesn't currently support count queries. We'll update this issue once we do.
",jpsim,eni9889
862,2014-09-04 04:25:12,"@jpsim any eta for this? 
",eni9889,jpsim
859,2014-09-08 16:57:27,"@Pintouch, since there were no changes to Realm between Xcode6 Beta 6 and Beta 7, you can use what's in the `master` branch in your Xcode 6 Beta 7 project right away.

This PR is mostly just for the examples, which did need to get updated to Beta 7.
",jpsim,Pintouch
856,2014-09-03 11:14:36,"@bmunkholm 

This PR contains three things:

*A quick fix for endlessly recursing tooltips. It seems to be a binding issue but a quick glance at the code indicates that recursion is protected against. Will investigate this.

*The column with row order index for arrays

*Ability to double click a column separator to resize it to fit the contents, as in excel or finder.

The latter two shouldn't really be in this pull request but ended up here by accident, because I didn't keep my master clean. They are however quite small and uncontroversial, and should be merged in sooner or later anyway. I removed stuff that was unnecessary.
",GreatApe,bmunkholm
856,2014-09-09 12:44:35,"@jpsim @alazier @tgoyne 

I updated this to use a custom made description method in the instanceTVC, so it doesn't rely on -description anymore. It turned out that the tooltip needs were too different anyway.
",GreatApe,jpsim
856,2014-09-09 12:44:35,"@jpsim @alazier @tgoyne 

I updated this to use a custom made description method in the instanceTVC, so it doesn't rely on -description anymore. It turned out that the tooltip needs were too different anyway.
",GreatApe,tgoyne
856,2014-09-10 15:49:40,"@alazier 

How about now? I didn't change the replaceString for reasons I outlined above, but I can revisit it next week when I have more time. I took care of the other points though, and some other minor details.
",GreatApe,alazier
854,2014-09-02 23:10:00,"Hi @icanzilb, thanks for filing this issue. We intend on adding JSON serialization and deserialization to Realm in the near future, but until that time, it's pretty easy to integrate Realm with JSONModel or Mantle.

An easy way to bridge `JSONModel` with Realm would be to add a category on `RLMObject` with a method called `initWithJSONModel:` that would iterate over the `JSONModel` properties and create an `NSDictionary` that was then passed on to `RLMObject`'s `initWithObject:`.

Something like:



You could even distribute this as a CocoaPod with `Realm` and `JSONModel` dependencies.

I don't think we'll be adding the ability to initialize a Realm object from a model object like this in the binding because it's not exactly optimal for performance or ease-of-use. I'll bring it up with other Realm developers and report back here.
",jpsim,icanzilb
849,2014-08-31 15:16:10,"@alazier Thanks for reply. My internet is just fine, I can download core library through bash script.
What happened to me is that Xcode took like forever to build static library and never complete building.

Anyway, it's not a problem to me now since I switch back to use Objective C.
",serco-chen,alazier
845,2014-09-02 18:23:18,"@jpsim 

Thank you for looking through it! I've taken care of all your comments now.

As to the generator, there are both object links and array links. Basically the generator looks at the schema of the classes it is initialised with and goes through them to create random values for each type, including links.

It tries to reuse objects that have already been added to the realm, so if you init it with @[@""Dog"", @""Person""] and person has an object or array link property of Dogs, it will link to the objects already created, instead of making new ones. It depends on the order of the classes though.
",GreatApe,jpsim
841,2014-08-26 16:59:36,"@tarangpatel we'll need more information to debug this with you. Does this issue occur in the 64-bit simulator as well? It might be a 32/64-bit bug, maybe on our end, maybe on yours.

In any case, we'll need either the exception message (which you could get if you set an exception breakpoint in Xcode and reproduced this bug), or we'll need the code in question that causes this exception to be thrown. It would also be helpful if you shared your RLMObject model definitions.

Thanks!
",jpsim,tarangpatel
839,2014-08-26 14:24:13,"Thanks @tgoyne 
",alazier,tgoyne
838,2014-08-26 10:42:49,"I've merged https://github.com/Tightdb/tightdb/pull/521 (fixed bug in deep copying a Query) into core now. @kneth has also merged a fix into Ari's lazy branch (using where(&tv) instead of deprecated .tableview(tv) which doesn't work if 'tv' was sorted).

If you need to, you can deep copy a TableView only by using this constructor: TableView tv_copy(tv_original). The 'm_query' member will also be deep-copied by this.
",rrrlasse,kneth
837,2014-08-25 19:14:40,"@kneth #838 builds and expands on this to properly fix the issue. Closing.
",jpsim,kneth
832,2014-08-21 23:52:23,"@tgoyne that jazzy feature would be super cool. I have a few ideas to get that to work, without compromising the simplicity of the code samples. But I'll get the tool back up and running before diving into that ;)
",jpsim,tgoyne
826,2014-08-21 16:05:44,"@kspangsege can we close this PR given #831?
",jpsim,kspangsege
826,2014-08-21 18:07:10,"Yes.

On Thu, Aug 21, 2014 at 6:05 PM, JP Simard notifications@github.com wrote:

> @kspangsege https://github.com/kspangsege can we close this issue given
> #831 https://github.com/realm/realm-cocoa/pull/831?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/826#issuecomment-52942270.
",kspangsege,kspangsege
824,2015-02-03 13:39:57,"@timanglade Is this support present in v0.90.4? Seeing no query results in my Watchkit extension after committing a write transaction in the parent app.

Edit: I have confirmed that multiprocess support is working in 0.90.4
",RTimal,timanglade
824,2015-02-03 20:54:25,"@RTimal Some things are working yes, but right now there are no change notifications, lots of tests are missing and there’s also an Apple bug we need to address in a more elegant way. We have some builds working internally and we’ll update this ticket as we make progress :)
",timanglade,RTimal
824,2015-04-02 22:07:17,"You da real MVP @yoshyosh http://stream1.gifsoup.com/view2/20140902/5101733/you-the-real-mvp-o.gif
",nwalter08,yoshyosh
823,2014-08-22 20:13:41,"I just answered on the aforementioned CocoaPods GitHub issue. Seems to work for me:

@eni9889 @dismory can you try again now? I just created a small test project with `pod ""Realm"", :git => ""git@github.com:realm/realm-cocoa.git""` here: https://github.com/jpsim/NewRealmPodspec.

It worked fine for me running on CocoaPods `0.33.1`.
",jpsim,eni9889
823,2014-08-22 20:14:58,"@jpsim the initial install works fine. Try adding an additional pod and running 


",eni9889,jpsim
823,2014-08-23 04:27:00,"@jpsim just like @eni9889, only initial install will success.
",dismory,eni9889
823,2014-08-23 04:27:00,"@jpsim just like @eni9889, only initial install will success.
",dismory,jpsim
823,2014-08-26 17:55:54,"@jpsim any updates on this? Its getting really annoying having to delete and install all the pods every time. 
",eni9889,jpsim
823,2014-08-26 18:04:45,"@eni9889 you'll have to ask CocoaPods people when they'll cut a new release.
",jpsim,eni9889
818,2014-08-24 20:48:22,"After some more investigation, I've realized that this is not a 0.83.0 issue; this happens in 0.82.0 as well. Also, it only occurs when I sort the results of a query. In other words, using `[MyModelClass allObjectsInRealm:self.realm];` to construct the RLMArray that backs my tableview works fine, but using `[[MyModelClass allObjectsInRealm:self.realm] arraySortedByProperty:@""name"" ascending:YES];` causes the crash when accessing the `count` property after objects have been inserted into the realm. 

My workaround is to store both a sorted and unsorted version of my RLMArray, and to only access the `count` property of the unsorted array while pulling the actual objects from the sorted array. This works fine for now.

@ferreol, it looks as though you are also using `arraySortedByProperty:ascending:` in your query, so maybe this workaround will work for you until the crash is fixed.
",jjoelson,ferreol
818,2014-08-24 21:05:26,"Hi,
If you have any chance to provide us with something that can reproduce the
issue, we can fix it quickly (I assume :-) ). So far we havn't been able to
reproduce it.

Thanks!

On Sun, Aug 24, 2014 at 10:48 PM, jjoelson notifications@github.com wrote:

> After some more investigation, I've realized that this is not a 0.83.0
> issue; this happens in 0.82.0 as well. Also, it only occurs when I sort the
> results of a query. In other words, using [MyModelClass
> allObjectsInRealm:self.realm]; to construct the RLMArray that backs my
> tableview works fine, but using [[MyModelClass
> allObjectsInRealm:self.realm] arraySortedByProperty:@""name""
> ascending:YES]; causes the crash when accessing the count property after
> objects have been inserted into the realm.
> 
> My workaround is to store both a sorted and unsorted version of my
> RLMArray, and to only access the count property of the unsorted array
> while pulling the actual objects from the sorted array. This works fine for
> now.
> 
> @ferreol https://github.com/ferreol, it looks as though you are also
> using arraySortedByProperty:ascending: in your query, so maybe this
> workaround will work for you until the crash is fixed.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/818#issuecomment-53206982.
",bmunkholm,ferreol
818,2014-08-24 21:24:02,"@bmunkholm Unfortunately, I'm struggling a bit to reproduce the crash in a compact example. However, I'm able to produce an example for a bug which seems to be related. In the below code, the sorted RLMArray does not appear to be updated with the newly added object:



However, if I modify the example to access the `count` property of the unsorted RLMArray first, then the sorted RLMArray is updated:



It seems to me that this same bug could be related to the crashes given that the sorted RLMArray seems to have an incorrect view of the Realm's state.
",jjoelson,bmunkholm
817,2014-10-03 19:12:48,"@alazier possible, but my bet is this is happening because `tag` has no default value, which means that the Swift introspection won't work, hence setting it as Any, which isn't even supported in Swift.
",jpsim,alazier
817,2015-01-16 05:02:12,"@jayesh15111988 NSPredicate syntax requires strings to be quoted, or passed in as format arguments:



So this is more of a problem with your NSPredicate rather than Realm.
",jpsim,jayesh15111988
817,2015-01-16 05:33:17,"@jpsim  Thanks for responding back. You are right that it was a problem with single quote for the given statement. However, this was one the many ways I tried to fix the problem. 

But it seems problem was in the model representation where I overlooked that property should be explicitly initialized with empty string. So,

<code>dynamic var tag: String = """" //will work </code>
<code>dynamic var tag: String! //Won't work, crash with **\* Terminating app due to uncaught exception 'Unsupported predicate value type', reason: 'Object type any not supported' </code>

Though we declare the property as String, we still need to assign initial value. Is that a bug or a specific feature that I am not aware of?
",jayesh15111988,jpsim
817,2015-01-16 06:05:12,"@jpsim Thanks a ton! That was very informative comment
",jayesh15111988,jpsim
817,2015-05-25 23:50:55,"@krzyzanowskim there are many different scenarios referred to in this thread. Could you be more specific about what you're trying to do with optionals and how it's not working?

If you're referring to not being able to specify optionals in your model in Realm Swift, please note that Realm requires models to be initializable by calling `init()` on it, which means setting a default value for every property. However, those types can be explicitly specific as optional for to-one relationships like so:


",jpsim,krzyzanowskim
817,2015-05-26 00:06:01,"@jpsim I was trying to have optional String


",krzyzanowskim,jpsim
814,2014-08-20 19:03:13,"@tgoyne deleting derived data and the `build/` directory has no effect here.
",jpsim,tgoyne
814,2014-08-20 21:35:03,"@jpsim are you 100% that's the case? sounds kind of impossible :)
",supermarin,jpsim
814,2014-08-22 00:16:51,"@tgoyne that still leaves us with the first issue.
",jpsim,tgoyne
814,2014-08-22 20:38:40,"@jpsim awesome! mind if i close https://github.com/supermarin/xcpretty/issues/100?
",supermarin,jpsim
814,2014-08-28 14:01:45,"CI is now cooperating. Ready to merge @tgoyne.
",jpsim,tgoyne
813,2014-08-19 15:56:21,"@szehnder @staticdreams can you make sure #814 fixes this issue for you? Thanks!
",jpsim,staticdreams
813,2014-08-19 15:56:21,"@szehnder @staticdreams can you make sure #814 fixes this issue for you? Thanks!
",jpsim,szehnder
813,2014-08-19 19:06:06,"@staticdreams what's the build number for Xcode6-Beta6 you're using? Can you make sure it's `6A280e`? Apple pulled and subsequently re-released Xcode6-Beta6 yesterday, so I want to make sure we're all on the same version.
",jpsim,staticdreams
813,2014-08-19 19:42:45,"yup. the latest one. got it today.
![screen shot 2014-08-19 at 21 41 58](https://cloud.githubusercontent.com/assets/988705/3972014/f8ee09f6-27d8-11e4-9e47-1bc1b8a72f63.png)

@jpsim I'd like to be able help you resolve this, so go ahead and ask me any other questions or make try out other things. 
",staticdreams,jpsim
813,2014-08-19 21:35:27,"Yes, it's always a good idea to delete DerivedData whenever installing a new version of Xcode. @szehnder @staticdreams can you try to see if this helps?
",jpsim,staticdreams
813,2014-08-19 21:35:27,"Yes, it's always a good idea to delete DerivedData whenever installing a new version of Xcode. @szehnder @staticdreams can you try to see if this helps?
",jpsim,szehnder
813,2014-08-20 05:05:27,"@jpsim confirmed. Purging DerivedData helped. Everything worked as before. Thanks
",staticdreams,jpsim
811,2014-08-20 15:45:51,"@bmunkholm :trollface: 
",dismory,bmunkholm
810,2014-08-19 16:44:30,"@jpsim @tgoyne neither of these are acceptable imo. Users should be able to put RLMObjects into cocoa containers. Primary keys may not work as object types wont be required to have a primary key. 
",alazier,jpsim
810,2014-08-19 16:44:30,"@jpsim @tgoyne neither of these are acceptable imo. Users should be able to put RLMObjects into cocoa containers. Primary keys may not work as object types wont be required to have a primary key. 
",alazier,tgoyne
810,2014-08-19 16:51:35,"@alazier oh, I didn't think the memory address of RLMObjects was guaranteed to be consistent for the entirety of its lifetime. That's definitely better then.
",jpsim,alazier
810,2014-08-20 17:19:14,"@alazier on that note, what does the timeline look like for the implementation of unique identifiers?
",eni9889,alazier
810,2014-08-22 19:37:30,"@eni9889 we don't have an exact release date but this is at the top of the priority list and work is ongoing to add this functionality to the core library.
",alazier,eni9889
810,2014-08-29 17:31:17,"@alazier is there a PR for this feature? I'd love to test it out and maybe even contribute  
",eni9889,alazier
810,2014-08-29 18:19:09,"@eni9889 Core support isn't yet complete but we are getting started with an initial slower binding only implementation. Will let you know when it is in state where it is ready for testing.
",alazier,eni9889
810,2014-08-29 21:49:36,"@alazier not to be super pushy but any idea when something might be available. We are looking to release something towards the end of Sept and wanted to use Realm for it 
",eni9889,alazier
810,2014-08-29 23:10:32,"@eni9889 We should hopefully have a pr with a binding only implementation that you can play with sometime next week. Some details like correct behavior for migrations and proper core support will undoubtedly take a bit longer.
",alazier,eni9889
810,2014-09-04 22:15:19,"@eni9889 We now have a work in progress pr you can start using that has an initial implementation for primary key support and upsert: https://github.com/realm/realm-cocoa/pull/868

It also fixes this particular issue by using a custom implementation for hash for objects with primary keys, and falling back to the default hash and isEqual for objects without primary keys.

This pr does not yet properly support migrations (adding a primary key to existing object types) but the public apis are pretty close to what we hope to ship.
",alazier,eni9889
810,2014-09-05 03:57:02,"@alazier :shipit: 
",dismory,alazier
810,2014-09-05 04:00:23,"@alazier awesome i'll start testing this now
",eni9889,alazier
807,2014-08-19 16:44:47,"Any other thoughts @tgoyne ?
",alazier,tgoyne
807,2014-08-19 19:12:40,"@astigsen nobody is currently using this functionality. If we have to have support for this now then we should just add file system notifications as that is the agreed upon long term solution. This code path has caused nothing but problems from the beginning and it doesn't make sense to continue wasting development time dealing with something we know we plan to get rid of, especially since removing it will almost undoubtedly effect no users.
",alazier,astigsen
805,2014-08-19 00:03:16,"You ok with the new name @jpsim ?
",alazier,jpsim
804,2014-08-18 17:57:36,"@jpsim Done. :trollface: 
",dismory,jpsim
803,2014-08-18 16:05:43,"@alazier :sunglasses: 
",dismory,alazier
790,2014-08-14 15:42:25,"So from what @kspangsege posted it sounds like it just changes the default behavior to failure for failing commands. This means we can still pipe the output of individual commands to customize behavior on failures which sounds good to me :+1:  
",alazier,kspangsege
789,2014-08-22 19:55:59,"@bendjones this sounds like an important issue to fix, but we haven't been able to reproduce it on our end. We'd appreciate if you could take a few minutes to send us some code demonstrating this bug.

Thanks!
",jpsim,bendjones
789,2014-10-02 18:48:29,"@kwojtaszek can you provide sample code to highlight the issue so we can troubleshoot? If you wish to keep the code private, you can email it to us at help@realm.io.
",jpsim,kwojtaszek
788,2014-10-24 22:03:39,"@javierjulio in the binding tests we delete the Realm file between each test run. The setup/teardown code we use can be found here: https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/RLMTestCase.m#L72

We run tests both against the default Realm and Realms at other paths. 
",alazier,javierjulio
788,2014-10-24 22:13:05,"@alazier thanks, yes I've been basing pretty much everything I know off of your tests. 👍 That has been most helpful its just that I'm coming from a Ruby background where I'm used to having the test environment isolated and its not (or at least it doesn't seem to be traditionally) in Xcode. My app comes with a pre-populated database that I didn't want to muck around with if I'm running the app. I wanted to have the test database where I can easily make changes and on setup/teardown delete and copy over the test db which is much smaller. The pre-populated database as of now is 50MB+. My tests are all finally passing and I don't have the dynamic casting error reported in #1044 with my recent changes. I'll share my approach where I manage my own realms and don't use defaultRealm. Also stick to using access controls in Swift which was the main reason why the error in #1044 occurred.
",javierjulio,alazier
784,2014-08-13 16:49:32,"@tgoyne We wish to print a proper error message in a few cases (like line 103). But `set -e` might be an option as we do not any configuration in `build.sh` anymore.
",kneth,tgoyne
782,2014-08-13 17:04:54,"@tgoyne I know that but why it does not work as expected here?
",dismory,tgoyne
782,2014-08-13 17:20:41,"@alazier Look at my first test case, semaphore is not used there but still not working..
",dismory,alazier
782,2014-08-13 18:37:47,"@dismory Is there any way you think we could document this better?
",bmunkholm,dismory
782,2014-08-14 04:24:06,"@bmunkholm IMHO,  it is necessary to explicitly document `RunLoop` and `Timer` implementation details used in Realm as what @tgoyne what said.
",dismory,bmunkholm
782,2014-08-14 04:24:06,"@bmunkholm IMHO,  it is necessary to explicitly document `RunLoop` and `Timer` implementation details used in Realm as what @tgoyne what said.
",dismory,tgoyne
782,2014-08-14 04:36:37,"@alazier I rewrite the test case(which use semaphores) by running a runloop manually and it works as expected. :smile: 



Also as you said, it will crash in Realm `-sendNotifications` message when using in memory default Realm.

FYI:


",dismory,alazier
782,2014-08-22 21:34:11,"@dismory closing this issue. Please reopen if you feel there's still something we can improve here.
",jpsim,dismory
781,2014-08-13 17:07:48,"@alazier :+1: 
",dismory,alazier
781,2014-08-22 21:32:13,"This was addressed in [realm.io#33](https://github.com/realm/realm.io/pull/33). Thanks for pointing it out, @dismory.
",jpsim,dismory
773,2014-10-14 06:03:24,"@alazier @tgoyne should we keep this open? I can't reproduce this issue with the Swift TableView example on my iOS 8 device.
",jpsim,alazier
773,2014-10-14 06:03:24,"@alazier @tgoyne should we keep this open? I can't reproduce this issue with the Swift TableView example on my iOS 8 device.
",jpsim,tgoyne
764,2014-08-14 10:43:10,"@bmunkholm The Reference Badge measures how many other Pods in CocoaPods have realm as a dependency. AFNetworking is the most referenced project in CocoaPods. 326 other project have it as a dependency: https://www.versioneye.com/objective-c/afnetworking/references 
Of course realm is used in much more projects. But those projects are not publicly available and we can not crawl them. 

The dependency badge just shows how many dependencies this project has. You can leave out the version number from the URL then it always fetches the dependency badge for the newest version number of realm: https://www.versioneye.com/objective-c/realm/badge.svg 
",reiz,bmunkholm
764,2014-08-15 22:13:36,"Hi @reiz! VersionEye looks like a very cool product but we’re trying to keep the README short & sweet, and with links going to the canonical pages for docs/versioning/etc. Thanks for offering this though!
",timanglade,reiz
764,2014-08-16 11:52:09,"@timanglade No problem. I understand that. 
",reiz,timanglade
754,2014-09-17 18:34:11,"We have added primary key support which ensures for a primary key property that there is only one object with a particular value for the pk property. So you can now safely follow @eni9889 's suggestion. One thing you need to add is to get the first object from the returned results:


",alazier,eni9889
734,2014-08-05 20:50:53,"@tgoyne can we merge this soon? I assume lots of people are trying Beta5 right now :)
",timanglade,tgoyne
730,2014-08-22 20:27:15,"Note to others: We'll continue in @skrew's native French for a bit to better understand what's happening here, and we'll report back in English with any findings.

Bonjour @skrew, nous aurions besoin de plus de contexte afin de t'aider.

Serais-t-il possible pour toi de nous fournir plus de code afin que l'on puisse mieux diagnostiquer les problèmes de performance dont tu parles? Si c'est une question de confidentialité, tu peux me l'envoyer directement à jp@realm.io.

Merci!
",jpsim,skrew
730,2014-10-14 05:08:50,"I apologize for never following up here.

I worked with @skrew via email, where we improved tweaked the Realm-related code to be over twice as fast with 3 very simple changes:
1. updating Realm to the latest version (0.86.3)
2. adding a primary key to `RUserchannels`
3. using `createInDefaultRealmWithObject:` rather than `addObject:`

here's the updated code:


",jpsim,skrew
725,2014-10-18 08:40:15,"@kaishin did you link libc++.dylib? Please make sure to follow the steps listed here: http://realm.io/docs/cocoa/latest/#installation
",jpsim,kaishin
725,2014-10-18 20:24:01,"@jpsim Sorry I need to clarify a bit.

I'm trying to build the OS X framework with 6.1 since the one I downloaded did not work for me as per #994. But I keep getting the error in both Xcode and the command line.

FWIW I'm using Swift in my OS X app.
",kaishin,jpsim
725,2015-05-07 00:45:15,"@owenoak how did you install Realm for it to fail in the first place, before you fixed it?
",jpsim,owenoak
724,2014-08-04 04:12:31,"This was merged in despite the URL not resolving. @tgoyne could you either fix the URL or fix the S3 redirect?
",jpsim,tgoyne
718,2014-07-30 21:39:10,"Love it! I'm sure there are other API's where we should use this approach instead of throwing an exception. I agree with @alazier that we should indicate how arrays should be created. Perhaps a link to the docs?
",jpsim,alazier
717,2014-07-30 22:18:04,"Great thanks @jpsim - will keep an eye out.
",gavinbunney,jpsim
712,2014-08-18 16:33:58,"> Emanuele added a feature to build.sh to handle this

Actually this is a different feature. As @tgoyne has been keeping this commit on top of all his other work, just to be able to work, I vote for merging this in. :+1:.
",jpsim,tgoyne
709,2014-07-31 08:30:14,"This might not be an error at all.

As soon as multiple realms are in use in the app, timing differences
may lead to different file layouts. There are two causes of wasted space:
Fragmentation and retained versions.

Fragmentation may occur and cause a file size which is significantly larger
than the contained data. For larger sizes the fragmentation usually is a
small problem.
But note, that in the context of our leaf sizes, both the files presented
here must
be considered small .. meaning that significant fragmentation may occur.

Retained versions hold data for realms which are older than the most recent.
As these versions are released they become free data, but the free areas can
only be taken into use by commits occurring _after_ the release.

Even though the application exits and the lock file is removed, different
file sizes may
still result, because the database is not ""compacted"" when the app exits.
When
the app exits, all retained versions are freed, BUT all the space they
consumed
will have been allocated in the file, scattered around in it, and as there
is no
compaction, the file does not shrink.

So filesize depends very much on the exact operation of the app. Especially
for
small sizes and applications which (at some point in their live) have many
retained versions.

Core limits the number of retained versions to 100 if I remember correctly.
If each of these versions hold changes to most of the data, each version
may take up as much space as the final version.

/Finn

On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com wrote:

> My guess is that we somewhere in the binding is holding on to a read
> transaction, preventing reuse of the old space.
> 
> On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> wrote:
> 
> > This one is interesting... I was able to reproduce the issue. The
> > strange
> > part is that it doesn't double in size on every launch, which leads me
> > to
> > think there must be a race condition somewhere.
> > 
> > Also note that no content is duplicated to cause this increase in file
> > size, as there are no duplicate entries visible in the Realm Browser.
> > 
> > Hopefully someone from the core team can look into why these two realm
> > files (with the same entries) are different sizes:
> > 
> > http://static.realm.io/debug/small_realm.zip
> > http://static.realm.io/debug/large_realm.zip
> > 
> > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > https://github.com/rrrlasse @finnschiermer
> > https://github.com/finnschiermer
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",finnschiermer,kspangsege
709,2014-07-31 08:40:29,"I didn't remember correctly. There are no limit to the number of retained
versions.

On Thu, Jul 31, 2014 at 10:30 AM, Finn Schiermer Andersen fsa@realm.io
wrote:

> This might not be an error at all.
> 
> As soon as multiple realms are in use in the app, timing differences
> may lead to different file layouts. There are two causes of wasted space:
> Fragmentation and retained versions.
> 
> Fragmentation may occur and cause a file size which is significantly
> larger than the contained data. For larger sizes the fragmentation usually
> is a small problem.
> But note, that in the context of our leaf sizes, both the files presented
> here must
> be considered small .. meaning that significant fragmentation may occur.
> 
> Retained versions hold data for realms which are older than the most
> recent.
> As these versions are released they become free data, but the free areas
> can
> only be taken into use by commits occurring _after_ the release.
> 
> Even though the application exits and the lock file is removed, different
> file sizes may
> still result, because the database is not ""compacted"" when the app exits.
> When
> the app exits, all retained versions are freed, BUT all the space they
> consumed
> will have been allocated in the file, scattered around in it, and as there
> is no
> compaction, the file does not shrink.
> 
> So filesize depends very much on the exact operation of the app.
> Especially for
> small sizes and applications which (at some point in their live) have many
> retained versions.
> 
> Core limits the number of retained versions to 100 if I remember correctly.
> If each of these versions hold changes to most of the data, each version
> may take up as much space as the final version.
> 
> /Finn
> 
> On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com
> wrote:
> 
> > My guess is that we somewhere in the binding is holding on to a read
> > transaction, preventing reuse of the old space.
> > 
> > On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> > wrote:
> > 
> > > This one is interesting... I was able to reproduce the issue. The
> > > strange
> > > part is that it doesn't double in size on every launch, which leads me
> > > to
> > > think there must be a race condition somewhere.
> > > 
> > > Also note that no content is duplicated to cause this increase in file
> > > size, as there are no duplicate entries visible in the Realm Browser.
> > > 
> > > Hopefully someone from the core team can look into why these two realm
> > > files (with the same entries) are different sizes:
> > > 
> > > http://static.realm.io/debug/small_realm.zip
> > > http://static.realm.io/debug/large_realm.zip
> > > 
> > > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > > https://github.com/rrrlasse @finnschiermer
> > > https://github.com/finnschiermer
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",finnschiermer,kspangsege
709,2014-07-31 08:40:29,"I didn't remember correctly. There are no limit to the number of retained
versions.

On Thu, Jul 31, 2014 at 10:30 AM, Finn Schiermer Andersen fsa@realm.io
wrote:

> This might not be an error at all.
> 
> As soon as multiple realms are in use in the app, timing differences
> may lead to different file layouts. There are two causes of wasted space:
> Fragmentation and retained versions.
> 
> Fragmentation may occur and cause a file size which is significantly
> larger than the contained data. For larger sizes the fragmentation usually
> is a small problem.
> But note, that in the context of our leaf sizes, both the files presented
> here must
> be considered small .. meaning that significant fragmentation may occur.
> 
> Retained versions hold data for realms which are older than the most
> recent.
> As these versions are released they become free data, but the free areas
> can
> only be taken into use by commits occurring _after_ the release.
> 
> Even though the application exits and the lock file is removed, different
> file sizes may
> still result, because the database is not ""compacted"" when the app exits.
> When
> the app exits, all retained versions are freed, BUT all the space they
> consumed
> will have been allocated in the file, scattered around in it, and as there
> is no
> compaction, the file does not shrink.
> 
> So filesize depends very much on the exact operation of the app.
> Especially for
> small sizes and applications which (at some point in their live) have many
> retained versions.
> 
> Core limits the number of retained versions to 100 if I remember correctly.
> If each of these versions hold changes to most of the data, each version
> may take up as much space as the final version.
> 
> /Finn
> 
> On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com
> wrote:
> 
> > My guess is that we somewhere in the binding is holding on to a read
> > transaction, preventing reuse of the old space.
> > 
> > On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> > wrote:
> > 
> > > This one is interesting... I was able to reproduce the issue. The
> > > strange
> > > part is that it doesn't double in size on every launch, which leads me
> > > to
> > > think there must be a race condition somewhere.
> > > 
> > > Also note that no content is duplicated to cause this increase in file
> > > size, as there are no duplicate entries visible in the Realm Browser.
> > > 
> > > Hopefully someone from the core team can look into why these two realm
> > > files (with the same entries) are different sizes:
> > > 
> > > http://static.realm.io/debug/small_realm.zip
> > > http://static.realm.io/debug/large_realm.zip
> > > 
> > > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > > https://github.com/rrrlasse @finnschiermer
> > > https://github.com/finnschiermer
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",finnschiermer,finnschiermer
709,2014-07-31 08:41:50,"Is there a possibility that the binding might be holding on to old versions,
for example by always creating new realm objects instead of reusing the
latest one?

On Thu, Jul 31, 2014 at 10:30 AM, Finn Schiermer Andersen fsa@realm.io
wrote:

> This might not be an error at all.
> 
> As soon as multiple realms are in use in the app, timing differences
> may lead to different file layouts. There are two causes of wasted space:
> Fragmentation and retained versions.
> 
> Fragmentation may occur and cause a file size which is significantly
> larger than the contained data. For larger sizes the fragmentation usually
> is a small problem.
> But note, that in the context of our leaf sizes, both the files presented
> here must
> be considered small .. meaning that significant fragmentation may occur.
> 
> Retained versions hold data for realms which are older than the most
> recent.
> As these versions are released they become free data, but the free areas
> can
> only be taken into use by commits occurring _after_ the release.
> 
> Even though the application exits and the lock file is removed, different
> file sizes may
> still result, because the database is not ""compacted"" when the app exits.
> When
> the app exits, all retained versions are freed, BUT all the space they
> consumed
> will have been allocated in the file, scattered around in it, and as there
> is no
> compaction, the file does not shrink.
> 
> So filesize depends very much on the exact operation of the app.
> Especially for
> small sizes and applications which (at some point in their live) have many
> retained versions.
> 
> Core limits the number of retained versions to 100 if I remember correctly.
> If each of these versions hold changes to most of the data, each version
> may take up as much space as the final version.
> 
> /Finn
> 
> On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com
> wrote:
> 
> > My guess is that we somewhere in the binding is holding on to a read
> > transaction, preventing reuse of the old space.
> > 
> > On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> > wrote:
> > 
> > > This one is interesting... I was able to reproduce the issue. The
> > > strange
> > > part is that it doesn't double in size on every launch, which leads me
> > > to
> > > think there must be a race condition somewhere.
> > > 
> > > Also note that no content is duplicated to cause this increase in file
> > > size, as there are no duplicate entries visible in the Realm Browser.
> > > 
> > > Hopefully someone from the core team can look into why these two realm
> > > files (with the same entries) are different sizes:
> > > 
> > > http://static.realm.io/debug/small_realm.zip
> > > http://static.realm.io/debug/large_realm.zip
> > > 
> > > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > > https://github.com/rrrlasse @finnschiermer
> > > https://github.com/finnschiermer
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",finnschiermer,kspangsege
709,2014-07-31 08:41:50,"Is there a possibility that the binding might be holding on to old versions,
for example by always creating new realm objects instead of reusing the
latest one?

On Thu, Jul 31, 2014 at 10:30 AM, Finn Schiermer Andersen fsa@realm.io
wrote:

> This might not be an error at all.
> 
> As soon as multiple realms are in use in the app, timing differences
> may lead to different file layouts. There are two causes of wasted space:
> Fragmentation and retained versions.
> 
> Fragmentation may occur and cause a file size which is significantly
> larger than the contained data. For larger sizes the fragmentation usually
> is a small problem.
> But note, that in the context of our leaf sizes, both the files presented
> here must
> be considered small .. meaning that significant fragmentation may occur.
> 
> Retained versions hold data for realms which are older than the most
> recent.
> As these versions are released they become free data, but the free areas
> can
> only be taken into use by commits occurring _after_ the release.
> 
> Even though the application exits and the lock file is removed, different
> file sizes may
> still result, because the database is not ""compacted"" when the app exits.
> When
> the app exits, all retained versions are freed, BUT all the space they
> consumed
> will have been allocated in the file, scattered around in it, and as there
> is no
> compaction, the file does not shrink.
> 
> So filesize depends very much on the exact operation of the app.
> Especially for
> small sizes and applications which (at some point in their live) have many
> retained versions.
> 
> Core limits the number of retained versions to 100 if I remember correctly.
> If each of these versions hold changes to most of the data, each version
> may take up as much space as the final version.
> 
> /Finn
> 
> On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com
> wrote:
> 
> > My guess is that we somewhere in the binding is holding on to a read
> > transaction, preventing reuse of the old space.
> > 
> > On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> > wrote:
> > 
> > > This one is interesting... I was able to reproduce the issue. The
> > > strange
> > > part is that it doesn't double in size on every launch, which leads me
> > > to
> > > think there must be a race condition somewhere.
> > > 
> > > Also note that no content is duplicated to cause this increase in file
> > > size, as there are no duplicate entries visible in the Realm Browser.
> > > 
> > > Hopefully someone from the core team can look into why these two realm
> > > files (with the same entries) are different sizes:
> > > 
> > > http://static.realm.io/debug/small_realm.zip
> > > http://static.realm.io/debug/large_realm.zip
> > > 
> > > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > > https://github.com/rrrlasse @finnschiermer
> > > https://github.com/finnschiermer
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",finnschiermer,finnschiermer
709,2014-07-31 20:39:03,"@finnschiermer the same issue occurs even when deleting `.lock` files between launches.
",jpsim,finnschiermer
709,2014-07-31 20:58:52,"Thanks, JP
:-)

On Thu, Jul 31, 2014 at 10:39 PM, JP Simard notifications@github.com
wrote:

> @finnschiermer https://github.com/finnschiermer the same issue occurs
> even when deleting .lock files between launches.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/709#issuecomment-50815230.
",finnschiermer,finnschiermer
709,2014-08-04 10:44:10,"Same issue as @justjimmy and @philippeauriach. Eventually my app just crashes on realm creation and I have to delete the file. 
",jjoelson,justjimmy
709,2014-08-04 10:44:10,"Same issue as @justjimmy and @philippeauriach. Eventually my app just crashes on realm creation and I have to delete the file. 
",jjoelson,philippeauriach
698,2014-07-31 22:58:22,"@alazier I don't have access to the CI, but I think the build is not passing due to the unpredictability of `[NSJSONSerialization dataWithJSONObject:options:error]` parsing order. Do you have any idea how can this problem be solved? (I know that deep down we are testing the API, but I think it's nice to have the strings tested too)

Thanks.
",c0rrzin,alazier
698,2014-08-01 19:12:44,"@tgoyne I've been researching and did not found a simple way for doing that as well. Maybe I should test every valid property type and then maybe also test the count of properties after serializing. Will it be enough?
",c0rrzin,tgoyne
698,2014-08-20 13:25:12,"@bmunkholm how should we proceed then? Is the API accessible via tightdb headers?
",c0rrzin,bmunkholm
698,2014-08-20 13:36:10,"@bmunkholm @c0rrzin the core apis are not suitable for everything we need to do in the objc api. For instance we need to support bi-directional keyPath mapping, custom date formatters, and perhaps at some point arbitrary transformations. As discussed previously it makes sense to get this working first in the objc api and then provide the needed functionality in core so this functionality can be shared across all apis.
",alazier,bmunkholm
698,2014-08-20 13:36:10,"@bmunkholm @c0rrzin the core apis are not suitable for everything we need to do in the objc api. For instance we need to support bi-directional keyPath mapping, custom date formatters, and perhaps at some point arbitrary transformations. As discussed previously it makes sense to get this working first in the objc api and then provide the needed functionality in core so this functionality can be shared across all apis.
",alazier,c0rrzin
698,2014-08-20 13:43:40,"I'm thinking if this serializer isn't complex enough to be encapsulated. @alazier @bmunkholm ?
",c0rrzin,alazier
698,2014-08-20 13:43:40,"I'm thinking if this serializer isn't complex enough to be encapsulated. @alazier @bmunkholm ?
",c0rrzin,bmunkholm
698,2014-08-20 14:27:55,"@alazier agreed. If you need any help while writing this list, I can provide an initial template or something else. I think it's valid taking a look at [this framework](https://github.com/icanzilb/JSONModel)  to see how they did it.
",c0rrzin,alazier
698,2015-01-16 22:26:24,"@c0rrzin we're unfortunately unable to merge this pull request.
For a feature as key as JSON/object mapping, we need to first map out the desired API specification before implementation, from the top down. We'll let you know when we have a pull request with our designs, and we welcome your feedback on it.
Thanks so much for your contribution to Realm, we really appreciate it when people take the time to contribute.
",segiddins,c0rrzin
698,2015-02-11 22:54:41,"@segiddins I really enjoyed spending some time with the project and sure would like to effectively contribute and provide feedback on the design that Realm's team will come up with so it suits its needs.
",c0rrzin,segiddins
697,2014-07-31 20:28:10,":+1:  from @jpsim 
",alazier,jpsim
695,2014-07-30 18:09:41,"Thanks for your work on this, @Reflejo, it's certainly an improvement. I'd be happy merging this in, if we do the platform check I mentioned (`arch(x86_64) || arch(arm64)`).
",jpsim,Reflejo
695,2014-07-30 21:39:53,"This works for me, @alazier any other remarks?
",jpsim,alazier
694,2015-10-01 17:55:49,"I'm having trouble implementing Decodable with Realm — @jpsim, do you have any experience with it, or an example?
",kylebshr,jpsim
694,2015-10-01 17:58:40,"> Edit: the Argo link is broken if you'd like to fix that :)

Thanks, fixed.

> I'm having trouble implementing Decodable with Realm — @jpsim, do you have any experience with it, or an example?

There are a number of examples on that project's README. If you're still having trouble implementing that, please file a new issue outlining exactly what you're doing and how it's not working. Either on this repo, or Decodable's, as you deem appropriate.
",jpsim,jpsim
694,2015-12-10 17:53:45,"@marksbren did you read my comment in https://github.com/realm/realm-cocoa/issues/694#issuecomment-144785299? Argo & Decodable work great with Realm.
",jpsim,marksbren
694,2015-12-10 17:55:54,"@jpsim thanks for the quick reply. I will try Decodable and report back
",marksbren,jpsim
694,2016-11-23 22:59:36,"@jpsim Am I seeing things, or does Realm support this now? Using `initWithValue` or `createOrUpdateWithValue` and passing it a dictionary seems to do the trick for me with no problems so far... I know it isn't as flexible as using Mantle or JSONModel, but bare-bones parsing of a single object seems to work fine.",JinkProject,jpsim
693,2014-07-28 18:14:09,"@alazier What do you mean by ""it alters the behavior""?. When the result property is an int, the compiler will create an implicit casting that is going to work the exact way the explicit casting is working.  Meaning that when the value on the db is a long, the property will ended up taking (v & 0xffffffff) before and after my fix. 

Having said that, I think changing objcType to 'l' seems like a simpler change and I'm +1. 

The problem with that though is that when running Swift in 32bits platforms, forcing ""Int"" to ""l"" is probably not the best solution. I'll try to poke around to see if I can think on a better way of fixing it and I'll create a new pull request soon.
",Reflejo,alazier
692,2014-11-12 21:46:22,"Sweet!! :tada: 
Thanks @jpsim :+1: 
",esttorhe,jpsim
690,2014-07-31 20:11:19,"Hi @ajimix, there were a number of CocoaPods-related issues in your sample code project, which I've fixed in a PR: [realm-test#1](https://github.com/ajimix/realm-test/pull/1). Let me know if that works for you.
",jpsim,ajimix
690,2014-08-01 06:42:57,"Hello @jpsim thank you for your time, we tried persisting and we have the initial issue that @martintsch described. I pushed an example again here: https://github.com/ajimix/realm-test

Thank you
",ajimix,martintsch
690,2014-08-01 06:42:57,"Hello @jpsim thank you for your time, we tried persisting and we have the initial issue that @martintsch described. I pushed an example again here: https://github.com/ajimix/realm-test

Thank you
",ajimix,jpsim
690,2014-09-15 07:19:47,"Hello @bofrese I work with @martintsch and what we did was to use Realm in the app target and Realm/Headers (not Realm.Headers) in the test target.
What we also did was to set both targets as exclusive so each pod is linked exclusively with each target.
So we ended up with something like...



I hope this helps.
",ajimix,bofrese
690,2014-09-15 07:19:47,"Hello @bofrese I work with @martintsch and what we did was to use Realm in the app target and Realm/Headers (not Realm.Headers) in the test target.
What we also did was to set both targets as exclusive so each pod is linked exclusively with each target.
So we ended up with something like...



I hope this helps.
",ajimix,martintsch
690,2014-09-20 10:29:38,"@ajimix i have tried to setup my Podfile as descriped but the compilation of the test projected failed with the error: ld library not found for -ltightdb-ios

any suggestion would could be wrong with my setup?
",faken,ajimix
690,2014-09-22 07:28:54,"Then I'm sorry but I don't have any idea, perhaps @tgoyne can help here.
",ajimix,tgoyne
690,2015-05-28 08:38:05,"@tgoyne I've also spent a good few hours in debugging and building a sample until I found this issue.  Solution provided by @ajimix works perfectly. Probably should highlight the cocoapods testing recipe in README or realm docs?

**Tip**. Since CocoaPods uses Xcodeproj, this small script might be useful to separate test targets from app targets:


",rbaulin,tgoyne
690,2015-05-28 08:38:05,"@tgoyne I've also spent a good few hours in debugging and building a sample until I found this issue.  Solution provided by @ajimix works perfectly. Probably should highlight the cocoapods testing recipe in README or realm docs?

**Tip**. Since CocoaPods uses Xcodeproj, this small script might be useful to separate test targets from app targets:


",rbaulin,ajimix
687,2014-12-14 19:08:12,"@Just- the `blocked` able means that we cannot implement this in the Cocoa binding alone -- we need some work to be done in the Core database before we can implement the feature.
",segiddins,Just-
687,2014-12-15 07:22:42,"@segiddins thanks, for clarification
Do you plan more detail RLMRealmNotification in near builds? (eg name of realm model class which updated) 
",Just-,segiddins
687,2014-12-15 07:47:09,"Also would like to know, this would be a good alternative 

> On 15 Dec 2014, at 08:22, Anton notifications@github.com wrote:
> 
> @segiddins thanks, for clarification
> Do you plan more detail RLMRealmNotification in near builds? (eg name of realm model class which updated)
> 
> —
> Reply to this email directly or view it on GitHub.
",iandundas,segiddins
681,2014-07-28 15:30:56,"> CI on the other hand is still failing

@emanuelez  Seems like one of the examples need some manual settings to run. We should either have a default value for these on CI or not run them as part of the tests.
",astigsen,emanuelez
680,2014-07-30 00:30:17,"This is ready for review @alazier 
",jpsim,alazier
677,2014-08-15 18:01:42,"If I create a bidirectional relationship explicitly linked, as @jpsim mentions with the same example I get an error ""Unknown type name 'Box'"". Am I missing something? Thanks
",ortizroberto,jpsim
672,2014-08-22 20:15:17,"We've updated our docs to show this. Will be pushed online shortly. Thanks, @rogernolan!
",jpsim,rogernolan
671,2014-07-28 18:15:31,"Thanks for pointing this out @exsortis, and fixing it! You'll need to sign our [CLA](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md) before we can merge this in.
",jpsim,exsortis
671,2014-07-28 21:39:24,"Signed. :)

On Mon, Jul 28, 2014 at 11:15 AM, JP Simard notifications@github.com
wrote:

> Thanks for pointing this out @exsortis https://github.com/exsortis, and
> fixing it! You'll need to sign our CLA
> https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md before
> we can merge this in.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/671#issuecomment-50376469.

## 

http://about.me/exsortis
",exsortis,exsortis
668,2014-07-25 14:01:28,"@jpsim it looks like that fixed the initial problem, but now a lot of other issues have cropped, all with assertions in tightdb.  One was something like `leaf_size < TIGHT_MAX_LIST_SIZE` or something like that.
",ryanbillingsley,jpsim
668,2014-07-25 16:49:51,"@jpsim this is working in the sample project, so you can close this issue.  I will open up another issue for any future problems.  Thanks.
",ryanbillingsley,jpsim
667,2014-09-12 06:53:11,"@jpsim I am using Xcode6 GM and I do have `$(inherited)` in my project's Build Settings.

`Ld /Users/calvin/Library/Developer/Xcode/DerivedData/ocular-gfvcptoywrrjoedhijmszbnxhbnj/Build/Products/Debug-iphonesimulator/ocular.app/ocular normal x86_64
    cd /Users/calvin/iOS/ocular_ipad_app
    export IPHONEOS_DEPLOYMENT_TARGET=7.1
    export PATH=""/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin""
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++ -arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk -L/Users/calvin/Library/Developer/Xcode/DerivedData/ocular-gfvcptoywrrjoedhijmszbnxhbnj/Build/Products/Debug-iphonesimulator -L/Users/calvin/iOS/ocular_ipad_app/Pods/Realm/core -L/Users/calvin/iOS/ocular_ipad_app -F/Users/calvin/Library/Developer/Xcode/DerivedData/ocular-gfvcptoywrrjoedhijmszbnxhbnj/Build/Products/Debug-iphonesimulator -F/Users/calvin/iOS/ocular_ipad_app/Pods/OpenCV -F/Users/calvin/iOS/ocular_ipad_app/HockeySDK.embeddedframework -F/Users/calvin/iOS/ocular_ipad_app/eyeCV -F/Users/calvin/iOS/ocular_ipad_app -filelist /Users/calvin/Library/Developer/Xcode/DerivedData/ocular-gfvcptoywrrjoedhijmszbnxhbnj/Build/Intermediates/ocular.build/Debug-iphonesimulator/ocular.build/Objects-normal/x86_64/ocular.LinkFileList -Xlinker -objc_abi_version -Xlinker 2 -ObjC -lc++ -lstdc++ -framework AVFoundation -framework Accelerate -framework AssetsLibrary -framework CoreGraphics -framework CoreImage -framework CoreMedia -framework CoreVideo -framework Foundation -framework MobileCoreServices -framework QuartzCore -framework Realm -framework Security -framework SystemConfiguration -framework UIKit -framework opencv2 -fobjc-arc -fobjc-link-runtime -Xlinker -no_implicit_dylibs -stdlib=libc++ -mios-simulator-version-min=7.1 -lc++ -framework CFNetwork -framework SystemConfiguration -framework Security -framework QuartzCore -framework CoreText -framework CoreData -framework CoreLocation -framework CoreBluetooth -framework CoreGraphics -framework UIKit -framework Foundation -framework HockeySDK -lPods-ocular -Xlinker -dependency_info -Xlinker /Users/calvin/Library/Developer/Xcode/DerivedData/ocular-gfvcptoywrrjoedhijmszbnxhbnj/Build/Intermediates/ocular.build/Debug-iphonesimulator/ocular.build/Objects-normal/x86_64/ocular_dependency_info.dat -o /Users/calvin/Library/Developer/Xcode/DerivedData/ocular-gfvcptoywrrjoedhijmszbnxhbnj/Build/Products/Debug-iphonesimulator/ocular.app/ocular`

But I am still getting this error.


",calvinchengx,jpsim
666,2014-07-24 17:41:11,"@alazier this doesn't change how users import these headers, just changes how we import them internally.
",jpsim,alazier
666,2014-07-25 17:29:51,"@alazier I can show you in person why this fix is necessary, and doesn't impact how our users import Realm.
",jpsim,alazier
665,2014-07-24 17:48:44,"@alazier could you further explain how this would work and/or provide a code sample? From my understanding, that won't work:
1. Create `RLMFrameworkError+iOS.h` and `RLMFrameworkError+OSX.h`
2. Edit Xcode's build settings to copy the correct header depending on platform
3. At this point, neither header is imported, so the `#error` inside the headers won't get picked up
4. Edit `Realm.h` to conditionally `#import` the appropriate error header
5. If a user attempts to use the iOS framework in an OSX project, they will catch the same conditional import as 4 and won't get the correct error message

It's quite possible I'm misunderstanding something here.
",jpsim,alazier
665,2014-07-30 00:29:49,"This is ready for review @alazier @emanuelez 
",jpsim,alazier
664,2014-07-24 03:45:10,"@jpsim Excellent! Of course I should have checked for a new version before posting. Sorry I wasted your time.
",jjoelson,jpsim
664,2014-07-24 03:46:19,"No problem at all, @jjoelson, it was only _just_ released. I'm glad you like Realm so far!
",jpsim,jjoelson
663,2014-07-24 04:40:39,"@alazier the only issues this fixes relevant to `master` is now in #666.
",jpsim,alazier
663,2014-07-25 17:27:54,"@alazier can you review this?
",jpsim,alazier
662,2014-07-25 17:26:56,"#660 is merged, so the link will resolve (once we update the API docs on the website).

Any objections to merge @alazier @bmunkholm?
",jpsim,bmunkholm
661,2014-07-24 23:21:46,"@jpsim In the past what I’ve done is delete the file Protocols/RLM_OBJECT_SUBCLASS.html and remove links to it from the HTML. Not doable for Cocoadocs?
",timanglade,jpsim
660,2014-07-24 04:17:03,"@alazier outside of `jp-swift-syntax`, the Swift API _is_ the Objective-C API, so we need to accommodate both in our documentation. Most of the time, it's the exact same, because the API is the same. In this case, Swift has different types, so I outline the difference.
",jpsim,alazier
657,2014-07-23 21:22:34,"Thanks for pointing that out, @alazier. Fixed.
",jpsim,alazier
648,2014-07-24 04:46:03,"@emanuelez take another look?
- Realm-Xcode6 universal iOS framework now builds to Release-iphone to not conflict with OSX build
- updated CHANGELOG
",jpsim,emanuelez
645,2014-07-22 16:04:17,"@emanuelez this works well locally, so we should fix this issue CI-side
@bmunkholm understood and agreed on waiting until next release for this automated packaging process. Let's do it manually this time.
",jpsim,bmunkholm
645,2014-07-22 16:04:17,"@emanuelez this works well locally, so we should fix this issue CI-side
@bmunkholm understood and agreed on waiting until next release for this automated packaging process. Let's do it manually this time.
",jpsim,emanuelez
645,2014-07-25 23:12:01,"@emanuelez @alazier please review, this is no longer WIP. Though this PR does depend on #680.

Here are my most recent changes:
- Codesign framework (iOS/OSX, Xcode5/Xcode6, Release/Debug)
- Use framework instead of subproject in examples
- Build framework if not built when running examples

@emanuelez note that there is no script to package these examples for release, but that shouldn't be too difficult.
",jpsim,emanuelez
643,2014-07-24 01:01:04,"- clarified CHANGELOG entry
- removed “Note on float”
- moved nsnumber_can_be_float() check to nsnumber_is_like_float()

Please take another look @alazier @bmunkholm.

I removed the ""note on float"" because I feel that's a general programming consideration, not directly related to Realm. Let me know if I'm mistaken there.
",jpsim,bmunkholm
643,2014-07-24 14:57:29,"@bmunkholm ok with these latest changes?
",jpsim,bmunkholm
638,2014-07-22 00:22:57,"Thanks @camelCaseD, we're aware of the Xcode6-Beta4 breaking updates to Swift syntax. We'll be updating our Swift code in the next few days.

In the meantime, please use Xcode6-Beta3.
",jpsim,camelCaseD
636,2014-07-21 21:50:41,"@bmunkholm the comment block above the method declaration will expose that in the API docs. None of the samples are out of date, so we shouldn't focus on changing those just yet.
",jpsim,bmunkholm
635,2014-07-21 20:21:37,"@alazier I have made a change so the current `RLMSchema` is passed. It simplifies the code for getting info on the second part in the relationship. You can merge when you wish.
",kneth,alazier
632,2014-07-21 14:27:26,"Sweet. Thanks @emanuelez 
",alazier,emanuelez
630,2014-07-23 18:57:55,"@emanuelez thanks to #654, this works as intended. Feel free to merge.
",jpsim,emanuelez
628,2014-10-16 12:13:59,"@GreatApe, example:

**JSON**



**NSDictionary**



**Models**





**Error**

When `youtube_id` is nil, works correctly. 
When the `youtube_id` is not nil it shows this error.


",Bruno-Furtado,GreatApe
628,2014-10-16 12:32:11,"@GreatApe, thanks!

This works:


",Bruno-Furtado,GreatApe
628,2014-10-16 19:20:43,"@komocode sorry to get your hopes up, I mistakenly closed this.
",jpsim,komocode
628,2014-12-12 17:34:40,"@ransomweaver the current behavior needs to be the way it is because we need to be able to differentiate between NSNull indicating that a property should be null (only support for object properties at this point), vs NSNull indicating that the property is missing and the default should be used instead. If you always fall through to the default value, then there will be no way to specify a null value for an object property (or other types once they are supported/this issue is fixed).

Our intended solution for this will be to add JSON mapping/transformation support which will allow you to specify custom behavior/transforms for properties. In the meantime if you are obtaining your json objects through NSJSONSerialization, you can specify that it return mutable containers to make things a bit easier. Another user with a similar issue was using AFNetworking and was able to work around this as follows:


",alazier,ransomweaver
628,2014-12-12 19:54:29,"@alazier Nice. That's a useful couple lines. I see its new in AF 2.5. 

Or more properly, Thanks Matt Thompson! How often have we said that? Not enough probably. 
",ransomweaver,alazier
628,2015-02-04 16:56:25,"I know @rrrlasse is working on this in core at the moment, but it would be good to add a subsection about this + workarounds to the [Current Limitations](realm.io/docs/cocoa#current-limitations) section of our docs right away. /cc @jpsim @segiddins 
",timanglade,jpsim
628,2015-03-09 16:47:50,"@timanglade @jpsim Are there any updates on this issue? Missing support for null values broke our app so badly, that we had to switch back to Core Data. :-(
",checkbutton,jpsim
628,2015-03-09 16:47:50,"@timanglade @jpsim Are there any updates on this issue? Missing support for null values broke our app so badly, that we had to switch back to Core Data. :-(
",checkbutton,timanglade
628,2015-03-09 16:56:34,"> @timanglade @jpsim Are there any updates on this issue? Missing support for null values broke our app so badly, that we had to switch back to Core Data. :-(

We hear you, null support is a top priority for us. We're adding in null support type by type in Realm's core database engine. Strings are done, and progress on other types is advancing steadily. We'll expose that in the higher level language bindings as soon as it's ready.

In the meantime, it really shouldn't be necessary to completely move away from Realm for this limitation. Our current suggested workaround should be flexible enough to support any scenario: wrap properties that should be nullable in an RLMObject subclass:


",jpsim,jpsim
628,2015-03-09 16:56:34,"> @timanglade @jpsim Are there any updates on this issue? Missing support for null values broke our app so badly, that we had to switch back to Core Data. :-(

We hear you, null support is a top priority for us. We're adding in null support type by type in Realm's core database engine. Strings are done, and progress on other types is advancing steadily. We'll expose that in the higher level language bindings as soon as it's ready.

In the meantime, it really shouldn't be necessary to completely move away from Realm for this limitation. Our current suggested workaround should be flexible enough to support any scenario: wrap properties that should be nullable in an RLMObject subclass:


",jpsim,timanglade
628,2015-03-09 17:14:18,"Let me just pile up here on what @jpsim is saying and add that yes, we’ve
had someone working on this full-time for weeks now, but not allowing any
nullable fields was such a core design decision, that it affected
everything from how we store data on disk, to how queries are handled, and
so this hasn’t been an easy fix at all. It is close to being done though,
and we’ll try to release support for the most obvious types (string and
data) asap. Our apologies again for it taking so long.

On Mon, Mar 9, 2015 at 9:56 AM, JP Simard notifications@github.com wrote:

> @timanglade https://github.com/timanglade @jpsim
> https://github.com/jpsim Are there any updates on this issue? Missing
> support for null values broke our app so badly, that we had to switch back
> to Core Data. :-(
> 
> We hear you, null support is a top priority for us. We're adding in null
> support type by type in Realm's core database engine. Strings are done, and
> progress on other types is advancing steadily. We'll expose that in the
> higher level language bindings as soon as it's ready.
> 
> In the meantime, it really shouldn't be necessary to completely move away
> from Realm for this limitation. Our current suggested workaround should be
> flexible enough to support any scenario: wrap properties that should be
> nullable in an RLMObject subclass:
> 
> @interface NullableInt : RLMObject@property NSInteger intValue;@end
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/628#issuecomment-77894628.
",timanglade,jpsim
628,2015-03-09 17:14:18,"Let me just pile up here on what @jpsim is saying and add that yes, we’ve
had someone working on this full-time for weeks now, but not allowing any
nullable fields was such a core design decision, that it affected
everything from how we store data on disk, to how queries are handled, and
so this hasn’t been an easy fix at all. It is close to being done though,
and we’ll try to release support for the most obvious types (string and
data) asap. Our apologies again for it taking so long.

On Mon, Mar 9, 2015 at 9:56 AM, JP Simard notifications@github.com wrote:

> @timanglade https://github.com/timanglade @jpsim
> https://github.com/jpsim Are there any updates on this issue? Missing
> support for null values broke our app so badly, that we had to switch back
> to Core Data. :-(
> 
> We hear you, null support is a top priority for us. We're adding in null
> support type by type in Realm's core database engine. Strings are done, and
> progress on other types is advancing steadily. We'll expose that in the
> higher level language bindings as soon as it's ready.
> 
> In the meantime, it really shouldn't be necessary to completely move away
> from Realm for this limitation. Our current suggested workaround should be
> flexible enough to support any scenario: wrap properties that should be
> nullable in an RLMObject subclass:
> 
> @interface NullableInt : RLMObject@property NSInteger intValue;@end
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/628#issuecomment-77894628.
",timanglade,timanglade
628,2015-03-10 03:37:40,"+1 @checkbutton same story
",yasirmturk,checkbutton
628,2015-03-10 08:18:40,"@jpsim, That workaround looks good but that does not allow properties to be populated properly from JSON object. Suppose we have the following JSON received from API server:



and hope to populate it in Realm:



Calling `[[Client alloc] initWithObject:...]` raises an exception...
",mootoh,jpsim
628,2015-03-19 13:50:37,"@mootoh, I can't get that workaround to work either. The problem is that Realm then expects a dictionary for `NullableInt` that looks like `{""intValue"" = 5}`, but we really just have a `5` there because it is an Int, not another object.

@jpsim, do you have a solution that still allows for parsing the JSON correctly without having to manually alter the JSON first? If we are going to that trouble, we may as well just create the objects manually.
",mikecole20,jpsim
628,2015-03-19 13:50:37,"@mootoh, I can't get that workaround to work either. The problem is that Realm then expects a dictionary for `NullableInt` that looks like `{""intValue"" = 5}`, but we really just have a `5` there because it is an Int, not another object.

@jpsim, do you have a solution that still allows for parsing the JSON correctly without having to manually alter the JSON first? If we are going to that trouble, we may as well just create the objects manually.
",mikecole20,mootoh
628,2015-03-19 14:55:29,"Those are your options, @mikecole20. You could also use something like [Realm-JSON](https://github.com/matthewcheok/Realm-JSON) that would do it for you.
",jpsim,mikecole20
628,2015-04-11 13:40:50,"@timanglade using realm-json still gives the same error. Is there is some settings we need to configure for it to work?
",reejosamuel,timanglade
628,2015-04-13 15:31:41,"@reejosamuel You should ask for help as a new issue on https://github.com/matthewcheok/Realm-JSON We try to keep this thread 100% about the null issue since many people are following this issue to know when we will release it.
",timanglade,reejosamuel
628,2015-04-17 14:04:15,"@timanglade Any news on beta-testing?
",cfeckardt,timanglade
628,2015-04-17 18:47:42,"Yes, just finished the package :) Here we go! We’re starting slow with a release that hopefully will _not_ do anything at all. We’ve tested it internally as much as we can, your help in trying it out is much appreciated so we can start releasing betas that actually add functionality asap.

/cc @tgoyne @rrrlasse @simonask @segiddins @bmunkholm

# Realm Core Null v1 BETA

THIS IS A BETA RELEASE — USE IT AT YOUR OWN RISK. It might delete your data or cause other catastrophic events. Please report any bugs or issues on [Github](https://github.com/realm/realm-cocoa/issues) and clearly mention you are using the “null beta”.

## Release Notes

**Realm Core Null v1 does not expose new features to you**. What it does is silently upgrade our file format to enable null support. This is a critical step for us to validate. Without confirmation from a number of beta-testers, we will not be able to release Realm Cocoa Null Betas, which will let you have null string properties (more types will follow).

**This core release is only compatible with Realm Cocoa 0.91.2 or later.**

You can find the core release that includes null support at https://static.realm.io/downloads/core/realm-core-null-v1.zip

## Instructions

### If you are building Realm from source
1. Build https://github.com/realm/realm-cocoa from master (make sure you are using a version of realm-cocoa >= 0.91.2)
2. Replace the files under core-0.89.0 with those contained in this zip
3. Rebuild and use the resulting framework in your file

### If you are using Realm through CocoaPods
1. Make sure you are using Realm version 0.91.2 or later.
2. Replace the files under Pods/Realm/core with the contents of the core folder of this zip.

### If you are using the zip releases from our website

You will not be able to test null support at this time. We may release beta binaries with null support at a later date. In the meantime you can build an equivalent .framework from source using the instructions above.

## Help!

Please report any bugs or issues on [Github](https://github.com/realm/realm-cocoa/issues) and clearly mention you are using the “null beta”.
",timanglade,bmunkholm
628,2015-04-21 08:45:37,"@jpsim I tried to build static framework with null support, but the problem is that after adding new core `build.sh` script downloads old core.
Can you please put here compiled frameworks with null support? 
",shmidt,jpsim
628,2015-04-21 16:09:27,"@shmidt the zip included `release_notes.txt`, which `build.sh` uses to check if it has the appropriate version of core. So I just renamed it to `releasenotes.txt` and re-uploaded the zip, so copying those files should now work.

Please remember that this release has no feature changes, so you won't be able to save null strings. It's rather a beta that tests out the automatic file format upgrade required for null functionality.
",jpsim,shmidt
628,2015-04-22 15:47:00,"@anlaital I was able to reproduce the issue you're seeing, and I'm going to dive in and investigate -- thanks so much for trying out the upgrade and reporting this!
",segiddins,anlaital
628,2015-04-25 21:20:51,"One question @timanglade, which values now support null? All the values?
",enricenrich,timanglade
628,2015-04-25 21:45:26,"None at the moment, per the release notes. This first beta just tests the
file format upgrade. The next beta will introduce support for null strings.

On Saturday, April 25, 2015, Enric Enrich notifications@github.com wrote:

> One question @timanglade https://github.com/timanglade, which values
> now support null? All the values?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/628#issuecomment-96278780.
",timanglade,timanglade
628,2015-04-27 15:40:34,"@kitasuke Thanks! I updated the note.
",timanglade,kitasuke
628,2015-04-28 16:58:52,"Hi @martinprot, sorry for the trouble, the instructions in the README and the GitHub comment above are a bit over-simplified for CocoaPods. The best way to fully explain how to do this is to show you, so I recorded a quick screencast demonstrating how to use the null beta of core in Realm installed with CocoaPods: http://youtu.be/imfgNqIuT14.

Please let us know if you have any further questions.
",jpsim,martinprot
628,2015-04-28 18:26:31,"Thanks a lot for your reactivity @jpsim ! Now it's clear <3
",martinprot,jpsim
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,martinprot
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,komocode
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,enricenrich
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,ArthurBelmonte
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,shmidt
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,matti777
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,mikecole20
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,yasirmturk
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,fnxpt
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,kitasuke
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,tariq235
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,reejosamuel
628,2015-06-11 19:26:03,"@tariq235 @komocode @martinprot @ArthurBelmonte @kitasuke @enricenrich @anlaital @shmidt @matti777 @mikecole20 @yasirmturk @fnxpt @reejosamuel @3lvis 
Any chance you guys have had the chance to try out the beta? We would be grateful for some feedback!

Thanks!
",bmunkholm,anlaital
628,2015-06-11 19:48:06,"@bmunkholm After installation of `pod 'RealmSwift', :git => 'https://github.com/realm/realm-cocoa', :tag => 'null-string-beta-2'`

I got compiler error: `Pods/RealmSwift/RealmSwift/Property.swift:46:40: 'RLMProperty' does not have a member named 'optional'`
",shmidt,bmunkholm
628,2015-06-11 19:51:55,"@tgoyne Oh, I see. Thanks, will test it again.
",shmidt,tgoyne
628,2015-06-11 19:55:05,"@bmunkholm @tgoyne Worked great for me, no data was lost, no bugs were noticed.
",shmidt,bmunkholm
628,2015-06-11 19:55:05,"@bmunkholm @tgoyne Worked great for me, no data was lost, no bugs were noticed.
",shmidt,tgoyne
628,2015-06-11 20:23:30,"@bmunkholm I will roll out an internal test release with this today as well. I will make sure to report any and all findings to you guys.
",anlaital,bmunkholm
628,2015-06-12 17:55:10,"@segiddins I'm using the Realm REST API method to automatically create the records: `realm.create(Foo.self, value: foo, update: true)`. Is there a way to continue using this method and have the nullable property work too? The convenience method saves a _lot_ of manual mapping, as I have 3 levels of nested relationships it's automatically creating.
",scottfister,segiddins
628,2015-06-12 22:21:46,"Could you send us a project that exhibits this behavior, @fnxpt so we can investigate further? Thanks!
",jpsim,fnxpt
628,2015-06-13 10:27:26,"@jpsim I will try to get a sample project with it... meanwhile can you tell me how can I see if the migration was successful, it looks like the fields are not optional.
",fnxpt,jpsim
628,2015-06-16 17:05:21,"@jessyconroy only the null beta supports nulls, are you using the beta?
",segiddins,jessyconroy
628,2015-06-16 17:21:54,"@segiddins Nope. I was not...I thought it was updated with the newest release. Will give the beta a whirl now. Thanks
",jessyconroy,segiddins
628,2015-06-16 18:52:44,"@segiddins Email sent! Thanks for your help :+1: 
",jessyconroy,segiddins
628,2015-06-16 21:47:15,"@segiddins Thanks a million for helping me resolve the issue. For anybody wondering what was wrong, it was an error on my part in the end. Cheers again! :+1: 
",jessyconroy,segiddins
628,2015-06-18 09:42:25,"@jpsim , sorry for the delay, I just sent you an email with a sample project that shows the crash.
",fnxpt,jpsim
628,2015-06-22 09:20:58,"@jpsim any news about the crash?
",fnxpt,jpsim
628,2015-06-23 09:35:06,"@timanglade just forward the email to help@realm.io
",fnxpt,timanglade
628,2015-06-23 18:01:51,"@fnxpt thanks for the email! I took a look at the project you sent, and saw that we had a branch with the same name as the tag, which interfered with CocoaPods' downloader (since tags and branches are both named refs under the hood in git).
You should be able to fix the problem by running:


",segiddins,fnxpt
628,2015-06-24 10:26:17,"@segiddins Thanks, after removing the Pod files I was able to updated and run it without the crash that I was reporting, but I got another one.
Terminating app due to uncaught exception 'RLMException', reason: 'No value or default value specified for property 'currency' in 'NBFavorite''

I think the problem is related with Arrays, because if I add a single object it works
",fnxpt,segiddins
628,2015-06-24 16:53:21,"@fnxpt I think I have since fixed the last issue you described, but if you could send us another version of the project that demonstrates it, I'd love to verify it has indeed been fixed. Thanks!
",segiddins,fnxpt
628,2015-06-27 06:57:43,"@triage that would imply you're running Realm from master, rather than the beta tag?
",segiddins,triage
628,2015-07-28 17:43:48,"@segiddins I'm curious, does the segfault still happen in Swift 2?
",bcapps,segiddins
628,2015-07-28 18:43:20,"We're tracking adding that functionality in #2308. @bcapps is there a reason you have to use `String?` rather than `NSString?` given that Swift will bridge one to the other?
",jpsim,bcapps
628,2015-07-30 17:48:15,"@jpsim No functional reason, however I can't test either currently because my project uses Swift 2.0 and this beta tag was created a couple months ago, before the RealmSwift Swift 2.0 changes. I was offering to test if you had such a build, but I see that you've updated your comment to reflect that it has not been released publicly.
",bcapps,jpsim
628,2015-08-28 17:17:05,"@segiddins Any way I can use NULL String + Swift 2? Or I should use #2458 ?
",siuying,segiddins
628,2015-08-28 17:52:46,"@siuying not yet, unfortunately. You won't be able to use #2458 yet because it requires a new release of our C++ core.
",segiddins,siuying
628,2015-08-29 03:16:55,"@segiddins thanks, I'd wait :) 
",siuying,segiddins
628,2015-10-06 07:19:46,"@pravintate 0.95.2 and 0.95.3 does not support any null values yet. So you can workaround that the flag that indicate a value is null or wrap the value with `Object`. e.g. https://github.com/realm/realm-cocoa/issues/1614#issuecomment-78567104

Please wait releasing future version that support null values.
",kishikawakatsumi,pravintate
628,2015-10-06 08:27:30,"@kishikawakatsumi: If I set flag as per your suggestion then I will increase unnecessary coding for me and in few days Realm will support null that time again I need to update my code as per that. so using flag instead of null is not good option. 
",pravintate,kishikawakatsumi
626,2014-07-21 08:42:58,"Hey @heardrwt !
Just a quick welcome before reviewing the PR:
Awesome contribution! We still have tons of interesting features we would like to add. So any help is highly appreciated!
And to be honest, we are positively surprised to already see less than trivial contributions. That also means we need to get our act together and add the needed infrastructure to support that well :-)
Don't know if you already saw the CLA [here](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md)?
",bmunkholm,heardrwt
626,2014-07-21 09:23:47,"@bmunkholm, thanks for the welcome. Yep, i did see it and i've submitted the form.
",heardrwt,bmunkholm
626,2014-07-21 11:40:12,"One of the bigger product design concerns with this is that it won't be cross platform. So sync to server side or Android or any other platform won't usable. It might still be possible to have such platform specific objects (Android could also have it's own) when you know that you really limit yourself. But question is if we want to ""encourage"" users to shoot them selves in the foot, by making this easy?
@heardrwt : Can you elaborate on the use cases where you would love this, since I assume you must have one :-)
Comments @astigsen @alazier ?
",bmunkholm,heardrwt
626,2014-07-21 20:40:53,"@alazier And yes, i agree storing the metadata inside the actual data is a total hack, and needs to change. 
",heardrwt,alazier
626,2014-07-21 22:32:07,"@astigsen I disagree. To do what you suggest would require special casing NSURL and would still require external metadata to differentiate between strings and urls (unless core were to support a url type). If we instead support any class which implements NSCoding we get support for NSURL along with man others without any special casing.
",alazier,astigsen
624,2014-07-20 16:17:53,"@alazier Crash happens when `[realm addObject:person];` due to `Terminating app due to uncaught exception 'RLMException', reason: 'No value or default value specified for photoData property'`. 
P.S. thanks for clarification about RLMArrays.
",shmidt,alazier
624,2014-07-20 19:16:48,"@jpsim OK, I see. I seems hard to save something instead of nil — for example, if I want user to assign and delete photos. 
",shmidt,jpsim
624,2014-07-20 21:38:40,"@jpsim yes, it is exactly what I want. Thanks a lot!
",shmidt,jpsim
624,2015-07-16 20:27:51,"@easingboy we've made beta releases with null support for strings & data, see https://github.com/realm/realm-cocoa/issues/628#issuecomment-106952727. Now this is merged to master behind a compiler flag, and will be officially released at some point in the future.
",jpsim,easingboy
620,2014-07-19 08:28:22,"Hey @jpsim, thanks for the quick response!

It looks like the realm file gets into some kind of locked state and keeps growing larger and larger while I'm inspecting it. 
Started: 25KB
Reload same data (update or insert): 122KB
Keep loading page over and over (update or insert): 500KB
More (update or insert): 2MB
More: 12.6MB
More: 25.2MB
After 25.2MB it keeps climbing by itself (the app is not running) until it reached ~300MB (I deleted it at that point). I've attached some screenshots of the realm files I would download from the app bundle and inspect.

![screen shot 2014-07-19 at 12 50 03 am](https://cloud.githubusercontent.com/assets/1275640/3634206/4515ca70-0f1b-11e4-961b-d376211ddf6c.png)
![screen shot 2014-07-19 at 1 00 10 am](https://cloud.githubusercontent.com/assets/1275640/3634205/4515ac98-0f1b-11e4-8c7e-bceecd0ec3f3.png)
![screen shot 2014-07-19 at 1 00 27 am](https://cloud.githubusercontent.com/assets/1275640/3634207/494b75b8-0f1b-11e4-853f-a21a941c786e.png)
![screen shot 2014-07-19 at 1 01 12 am](https://cloud.githubusercontent.com/assets/1275640/3634209/51f19fd0-0f1b-11e4-8b08-c2712bccb4da.png)

### A little more context:

I'm importing the JSON into models (using an APIObject wrapped via CottonObject) in a background thread, each model has its own write transaction, and when the import is done I execute a completion block with the data on the main thread like this:



I've browsed the schema via the Realm Browser and there aren't any duplicate entities either (the ones that exist just get updated). I apologize if I'm doing anything horribly wrong here, I'm more of an audio guy :P
",syedhali,jpsim
619,2014-07-19 15:11:13,"Thanks for helping us be thorough, @kspangsege!

Looks like Foundation supports ""true"" UTF8. That applies to both Objective-C and Swift:
![image](https://cloud.githubusercontent.com/assets/474794/3635007/a931f5a2-0f56-11e4-96cc-5ac5ea580fdc.png)
",jpsim,kspangsege
618,2014-07-18 23:45:58,"Thanks @Alydyn for pointing out our reasoning behind this. @dchohfi as you saw, it's pretty easy to write your own convenience method for this (maybe in a category on RLMRealm).

If your goal is to never forget a `commitWriteTransaction`, you could do what I do and have an Xcode snippet that combines these calls.
",jpsim,Alydyn
618,2014-07-18 23:45:58,"Thanks @Alydyn for pointing out our reasoning behind this. @dchohfi as you saw, it's pretty easy to write your own convenience method for this (maybe in a category on RLMRealm).

If your goal is to never forget a `commitWriteTransaction`, you could do what I do and have an Xcode snippet that combines these calls.
",jpsim,dchohfi
617,2014-07-21 20:24:25,"@altyus please take a look at pull request #635. We are currently adding functionality to the querying of relationships, and #635 is only the first pull request in that ares :-)
",kneth,altyus
615,2014-07-19 00:56:12,"@kspangsege I merged, but you should still let us know if there are any tests we could write in realm-cocoa to cover fixed scenarios.
",jpsim,kspangsege
606,2014-07-18 01:17:38,"@alazier will keep this named as such for consistency across our examples. We'll reorganize our examples structure in the future ([Asana](https://app.asana.com/0/861870036984/14707829850781))
",jpsim,alazier
603,2014-07-21 21:35:09,"@emanuelez thanks for taking this over, I appreciate it. Now if only we could stop CI from failing.
",jpsim,emanuelez
603,2014-07-21 21:37:32,"I just made a change that should make it way more stable.

—
Sent from Mailbox

On Mon, Jul 21, 2014 at 11:35 PM, JP Simard notifications@github.com
wrote:

> ## @emanuelez thanks for taking this over, I appreciate it. Now if only we could stop CI from failing.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/pull/603#issuecomment-49669178
",emanuelez,emanuelez
602,2014-10-08 18:27:04,"Thanks @alazier! No complaints here as its good to have. One suggestion is to offer a better error message if possible. I keep going through my code thinking I typed ""count"" somewhere. I happened to be doing object counts too so thought somehow that was related when finally figured out it wasn't.
",javierjulio,alazier
601,2015-07-13 12:11:29,"To further @jlandrum's point, it is worth mentioning that, as far as most people are aware, even Core Data's notification system, is built on top of sqlite, not in the sqlite engine/library itself.

While I agree that calling Realm not a ""real alternative"" to Core Data does not make sense, I have found myself in a situation where I started building my own notification system on top of Realm, as the available open-source ones weren't efficient enough for my use-case, and ran into issues that were unsolvable without resorting to insane hacks.

A built-in notification system with hopefully alleviate those issue. So... +1
",kunalsood,jlandrum
601,2015-07-21 09:19:47,"@neilpa People +1'ing is what marks importance of feature request 
",pzbyszynski,neilpa
601,2015-07-27 14:29:39,"Regarding @jlandrum's point about the toaster and the refrigerator, I'd say this is more like a refrigerator without in-door water and ice service. Few _need_ it, but it's extremely convenient for almost everybody and fits completely within the reasonable feature set of such an appliance.

The absence of this feature itself doesn't bother me--I can get by. What bothers me is how can it be possible that this feature, which they said was coming soon last September (and maybe earlier), isn't here yet. It makes me question either their judgment in public statements, or their ability to get stuff done (both are important to me when considering an investment in 3rd party technology).

So +1
",paulbruneau,jlandrum
601,2015-07-27 15:07:23,"@paulbruneau I’m not on the Realm team, but I would imagine this feature would be built on top of the replication/synchronization system they are planning.  With all the changes to core, I'm not surprised this is taking additional time to complete.  
",esummers,paulbruneau
599,2014-08-01 17:39:51,"@benkraus These are remnants of an early attempt to provide a built-in JSON serialization of any RLMObject or RLMArray. We’re working on a new implementation at the moment, in the meantime you should check out https://github.com/matthewcheok/Realm-JSON !
",timanglade,benkraus
599,2014-10-22 14:10:02,"@alazier Any news on the NSURL support ?
",olafurr,alazier
599,2014-12-05 23:24:07,"@alazier that would be really awesome! is this gonna make it to the next release already?
",tspecht,alazier
599,2014-12-06 00:22:09,"@tspecht no concrete eta but should hopefully get started on this in the near future.

@matthewcheok I don't think we want to support all objects supporting NSCoding as it would make it difficult/impossible to do queries efficiently and would also complicate cross-platform compatibility. What other types in particular do you want support for?
",alazier,tspecht
599,2014-12-06 00:22:09,"@tspecht no concrete eta but should hopefully get started on this in the near future.

@matthewcheok I don't think we want to support all objects supporting NSCoding as it would make it difficult/impossible to do queries efficiently and would also complicate cross-platform compatibility. What other types in particular do you want support for?
",alazier,matthewcheok
599,2014-12-06 00:24:42,"How about CGPoint, CGSize, CGRect and CGAffineTransform? They would be store in a reasonably cross platform way perhaps?

On Sat, Dec 6, 2014 at 8:22 AM, Ari Lazier notifications@github.com
wrote:

> @tspecht no concrete eta but should hopefully get started on this in the near future.
> 
> ## @matthewcheok I don't think we want to support all objects supporting NSCoding as it would make it difficult/impossible to do queries efficiently and would also complicate cross-platform compatibility. What other types in particular do you want support for?
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/issues/599#issuecomment-65875604
",matthewcheok,tspecht
599,2014-12-06 00:24:42,"How about CGPoint, CGSize, CGRect and CGAffineTransform? They would be store in a reasonably cross platform way perhaps?

On Sat, Dec 6, 2014 at 8:22 AM, Ari Lazier notifications@github.com
wrote:

> @tspecht no concrete eta but should hopefully get started on this in the near future.
> 
> ## @matthewcheok I don't think we want to support all objects supporting NSCoding as it would make it difficult/impossible to do queries efficiently and would also complicate cross-platform compatibility. What other types in particular do you want support for?
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/issues/599#issuecomment-65875604
",matthewcheok,matthewcheok
599,2014-12-06 00:27:06,"And CLLocationCoordinate2D

On Sat, Dec 6, 2014 at 8:22 AM, Ari Lazier notifications@github.com
wrote:

> @tspecht no concrete eta but should hopefully get started on this in the near future.
> 
> ## @matthewcheok I don't think we want to support all objects supporting NSCoding as it would make it difficult/impossible to do queries efficiently and would also complicate cross-platform compatibility. What other types in particular do you want support for?
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/issues/599#issuecomment-65875604
",matthewcheok,tspecht
599,2014-12-06 00:27:06,"And CLLocationCoordinate2D

On Sat, Dec 6, 2014 at 8:22 AM, Ari Lazier notifications@github.com
wrote:

> @tspecht no concrete eta but should hopefully get started on this in the near future.
> 
> ## @matthewcheok I don't think we want to support all objects supporting NSCoding as it would make it difficult/impossible to do queries efficiently and would also complicate cross-platform compatibility. What other types in particular do you want support for?
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/issues/599#issuecomment-65875604
",matthewcheok,matthewcheok
599,2014-12-06 00:55:21,"@matthewcheok After the initial PR with a first type to work out the exact approach, it should be easier to add new types. At that point, it will make sense to propose new types.
",jpsim,matthewcheok
599,2015-10-13 06:03:50,"@jpsim: :disappointed: Okay.
",istx25,jpsim
599,2016-02-09 17:33:09,"@antiero: Yes. Saving the absolute string of the URL in your model is the best work around. Though I wish Realm would do that conversion for us!
",istx25,antiero
599,2016-02-25 19:54:33,"@jpsim 

I made a quick and dirty workaround to support NSCoding by using NSData as underlaying persistence format.

You can find the diff it here.

https://github.com/YMXian/YMFoundation/commit/50b3878404fee8582f2918b7589173cef4067a6f

It's basically the original version of Realm 0.98.2, I just kept iOS static framework stuffs only.

I need your advice. Thanks.
",yanke-guo,jpsim
599,2016-02-25 19:59:38,"@jpsim 

For now, Read/Write, Auto-Updating works, I wonder will this modification crash other things.
",yanke-guo,jpsim
599,2016-02-25 20:51:47,"@jpsim 

That will be fine, I will do tests and create a pull request once it's proofed as matured.
",yanke-guo,jpsim
596,2014-07-17 01:47:45,"@moored Sorry for the delay. I just added a new [contribution guide](https://github.com/realm/realm-cocoa/blob/master/CONTRIBUTING.md) with a link to our CLA. If you don’t mind being our first, we’d love to receive your CLA and merge your pull request!
",timanglade,moored
596,2014-07-17 02:14:04,"@timanglade I have completed the CLA. 
",moored,timanglade
596,2014-07-17 02:27:52,"Thanks @moored! And extra thanks for contributing the first ever public PR to Realm!
",timanglade,moored
596,2014-07-17 02:47:11,"Good to merge! Thanks for your contribution, @moored :+1: :100:
",jpsim,moored
594,2014-07-15 23:00:51,"I've created new example projects: RealmEncryptionExample and RealmSwiftEncryptionExample. Please look again @timanglade @astigsen @alazier.
",jpsim,timanglade
594,2014-07-15 23:37:29,"I propose we rename SimpleExample to something like RealmSnippets or
RealmTour. Then we keep the Simple example there, and small files that
showcases the Full API and showcases various usecases like this. It should
have no UI (like SimpleExample) and would be easy to browse in and also
easy to quickly append to!

On Wed, Jul 16, 2014 at 1:00 AM, JP Simard notifications@github.com wrote:

> I've created new example projects: RealmEncryptionExample and
> RealmSwiftEncryptionExample. Please look again @timanglade
> https://github.com/timanglade @astigsen https://github.com/astigsen
> @alazier https://github.com/alazier.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/594#issuecomment-49104205.
",bmunkholm,timanglade
594,2014-07-16 01:19:07,"Perhaps call it RealmWalkThrough?

I also don't think we need to suffix all examples with the word 'Example'
as they are all in the examples directory. I also think we should add back
the workspace which has all of the examples and builds the framework
automatically as needed.

On Tue, Jul 15, 2014 at 4:37 PM, bmunkholm notifications@github.com wrote:

> I propose we rename SimpleExample to something like RealmSnippets or
> RealmTour. Then we keep the Simple example there, and small files that
> showcases the Full API and showcases various usecases like this. It should
> have no UI (like SimpleExample) and would be easy to browse in and also
> easy to quickly append to!
> 
> On Wed, Jul 16, 2014 at 1:00 AM, JP Simard notifications@github.com
> wrote:
> 
> > I've created new example projects: RealmEncryptionExample and
> > RealmSwiftEncryptionExample. Please look again @timanglade
> > https://github.com/timanglade @astigsen https://github.com/astigsen
> > @alazier https://github.com/alazier.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/594#issuecomment-49104205.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/594#issuecomment-49106940.
",alazier,timanglade
594,2014-07-17 01:14:24,"OK to merge, @astigsen @alazier @timanglade? I'd rather not overhaul our examples approach in this PR.
",jpsim,alazier
594,2014-07-17 01:14:24,"OK to merge, @astigsen @alazier @timanglade? I'd rather not overhaul our examples approach in this PR.
",jpsim,timanglade
594,2014-07-18 00:38:04,"@alazier can you take a quick look?
",jpsim,alazier
592,2014-07-15 13:41:34,"@emanuelez the fix was super simple, the file path needed double quotes instead of single quotes for the `s.version` interpolation to work.

This is ready to merge and push now.
",jpsim,emanuelez
587,2014-07-15 14:05:55,"@alazier this [Asana ticket](https://app.asana.com/0/14632725644365/14729115415767/f) explains why we weren't able to package the OSX framework for this release.

I certainly agree on needing to treat all examples consistently, which we are failing at now. Our examples packaging approach needs to be revisited. I have some ideas there, but unsure when I'll get the chance to work on it.
",jpsim,alazier
587,2014-07-15 14:26:15,"@alazier You're right, we should create an osx example folder.
",kneth,alazier
582,2014-07-15 08:33:38,"@emanuelez should work on device now
",jpsim,emanuelez
582,2014-07-15 08:41:04,"@emanuelez how about now re: code signing?
",jpsim,emanuelez
582,2014-07-15 14:51:11,"@emanuelez code signing issue for RealmSwiftMigrationExample should now be fixed.

@kneth @bmunkholm final review?
",jpsim,emanuelez
581,2014-07-15 03:53:09,"@astigsen @alazier anything else that should be done in here?
",jpsim,alazier
575,2014-07-14 23:58:24,"@alazier only fails on iOS tests for me.
",jpsim,alazier
575,2014-07-15 00:24:08,"When was `testRealmIsUpdatedImmediatelyAfterBackgroundUpdate` disabled for XCode5? This should not have been done. @jpsim 
",alazier,jpsim
571,2014-07-14 20:28:46,"+1 (with condition that we get examples and tools updated right away, as @bmunkholm pointed out).
",astigsen,bmunkholm
571,2014-07-14 22:37:50,"This is ready to be reviewed @astigsen @alazier @bmunkholm. I've verified that all examples and the VisualEditor work.
",jpsim,astigsen
571,2014-07-14 22:37:50,"This is ready to be reviewed @astigsen @alazier @bmunkholm. I've verified that all examples and the VisualEditor work.
",jpsim,bmunkholm
569,2014-07-14 17:49:39,"@alazier can you give me an example on how I would do that?
",jpsim,alazier
569,2014-07-14 20:10:56,"@alazier I'm having trouble getting that to work. I'll merge this in and you can file a new PR with that update later on.

An exception is thrown when calling `createInRealm:withObject:`:

> Terminating app due to uncaught exception 'RLMException', reason: 'Invalid value type for dogs'
",jpsim,alazier
567,2014-07-14 16:38:01,"Ok @bmunkholm I added an [Asana task](https://app.asana.com/0/861870036984/14707829850781) to eventually add an example to step through many Realm features.

For the time being, I'm removing this example.
",jpsim,bmunkholm
567,2014-07-15 00:52:57,"Please revert this PR when you get a chance @jpsim 
",timanglade,jpsim
562,2014-07-14 14:33:41,"@jpsim Absolute paths keep popping up :-(

I'll change the `README.md`s but I have to rethink them a bit as the examples are distributed separately also.
",kneth,jpsim
562,2014-07-14 20:24:34,"+1 . @jpsim : we have to merge your updates as well to the samples. But let's take this one in first.
",bmunkholm,jpsim
562,2014-07-14 20:29:45,"@bmunkholm I'll update the samples in @jpsim's branch. 
",kneth,bmunkholm
562,2014-07-14 20:29:45,"@bmunkholm I'll update the samples in @jpsim's branch. 
",kneth,jpsim
559,2014-07-14 20:27:55,"@jpsim Web or ocean surfing?
",kneth,jpsim
555,2014-07-13 21:34:47,"@alazier can you also rewrite the docs to match (and condense both http://realm.io/docs/ios/0.22.0/#define-a-migration-block and http://realm.io/docs/ios/0.22.0/#apply-migration-block into a single, simpler step?)
",timanglade,alazier
553,2014-07-11 20:49:19,"@alazier Not entirely relevant in relation to this PR, but Storyboards is actually coming to OS X with Yosemite. Wether one should use them or not is a whole other discussion (Side note; I'm in favour of using them). But you're right that merging is such a drag when it comes xib/storyboard files. But that is also the case for most non-code files like e.g. Xcode project files.
",zuschlag,alazier
550,2014-07-11 09:12:59,"@zuschlag I can't really offer a review as I have very little experience with Cocoa UI programming.
",kneth,zuschlag
543,2014-07-09 16:59:42,"@emanuelez what's still missing from this approach?
",jpsim,emanuelez
543,2014-07-10 11:12:47,"This is now ready for review. Please test it on your machines locally.
@jpsim @alazier 
",emanuelez,jpsim
539,2014-07-08 14:55:12,"@alazier I have a fix for the `examples/objc` soon
",kneth,alazier
539,2014-07-08 14:57:16,"That great @kneth . There is also a bug in in the binding (when you create a standalone object before creating a realm) that causes the example to crash once you fix the build issue - feel free to close this pr once you have your fix ready, but please take a look first to make sure we are still fixing all the issues.
",alazier,kneth
533,2014-07-09 13:25:48,"Did you mean the rendered output of the docs @alazier? We lost that when we moved these docs to this repo, and it’s driving me a bit nuts too but we could try to have CI generate a render on the fly for us on each PR maybe?
",timanglade,alazier
533,2014-07-09 14:18:52,"Yes @timanglade - rendered would be much easier to review. Or if you tell me how to render it myself I can take a look - or you can just show me in the office today (I'll be in PA for a short while today).
",alazier,timanglade
533,2014-07-09 14:40:37,"I pushed a bunch of changes, looks ready to merge as far as I’m concerned but I could use you taking a quick look @alazier. I temporarily pushed the output to http://realm.io/docs/ios/0.22.0/#migrations because we needed it for a beta-tester this morning anyway.
",timanglade,alazier
532,2014-07-09 03:52:53,"@bmunkholm No problem. Is there a particular set of people I should always mention, besides you, Tim, Bjarne and Alex?
",amuramoto,bmunkholm
532,2014-07-09 06:43:10,"@bmunkholm No problem. I appreciate how much attention you're giving the sample =)

To make the code as clear as possible, do you think it would be a good idea to break it into a couple methods, i.e. a request/serialization method, and a Realm method (for the RLMObject creation/write transaction)?
",amuramoto,bmunkholm
532,2014-07-13 20:58:34,"@bmunkholm @timanglade Updates completed based on feedback. Please review when you have a chance.
",amuramoto,bmunkholm
532,2014-07-13 21:14:40,"@bmunkholm up to you to review & merge
",timanglade,bmunkholm
525,2014-07-07 10:04:46,"@bmunkholm I agree - we should rewrite this before release.
",kneth,bmunkholm
525,2014-07-07 16:19:08,"Agreed, and already tracked in Asana.

---

Swift Class + Hackday on Saturday, July 12th
http://www.meetup.com/swift-language/events/188784352/

On Mon, Jul 7, 2014 at 3:04 AM, Kenneth Geisshirt notifications@github.com
wrote:

> @bmunkholm https://github.com/bmunkholm I agree - we should rewrite
> this before release.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/525#issuecomment-48160803.
",timanglade,bmunkholm
523,2014-07-04 06:31:41,"@timanglade nil values might be difficult to support as the core library doesn't allow `NULL` (no, we are not like SQL). Of course, `nil` could mean default value
",kneth,timanglade
523,2014-07-04 07:18:51,"@kneth I think @timanglade means a nil argument to createWithObject:
",alazier,timanglade
523,2014-07-04 07:18:51,"@kneth I think @timanglade means a nil argument to createWithObject:
",alazier,kneth
523,2014-07-04 08:05:52,"@alazier I understand that, but it is important to document what `nil` means as it is not a valid value is the core library. 
",kneth,alazier
520,2014-07-03 16:40:27,"So what are your current thoughts on this, @kneth and @emanuelez?
",jpsim,emanuelez
517,2014-07-06 19:07:53,"@astigsen: In general I think the look & feel should be modeled close to
XCode and not Finder. Eventually it will be a tool inside XCode.

On Thu, Jul 3, 2014 at 10:45 PM, astigsen notifications@github.com wrote:

> Merged #517 https://github.com/realm/realm-cocoa/pull/517.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/517#event-138094548.
",bmunkholm,astigsen
510,2014-07-01 17:09:06,"The naming was regarding @emanuelez's last email about registering CI as ""Realm Inc."", which we've all agreed to. So @emanuelez, you can cut this release. I'll close this PR to revert #509.
",jpsim,emanuelez
508,2014-07-01 17:09:46,"Thanks @alazier!
",timanglade,alazier
505,2014-06-30 11:07:36,"@emanuelez Yes, it is the same branch.
",kneth,emanuelez
493,2014-06-27 06:24:01,"@alazier Date, bool and binary are also supported.
",kneth,alazier
487,2014-07-09 16:52:35,"@alazier 
1. Merge conflicts were too large to continue merging master into this, so I applied the efforts of this branch to master and reopened this branch. This caused commit history to disappear.
2. I have not yet integrated the changes you made in a separate branch yesterday to re-add testing of objc models. I hope to do this later today.
3. I filed a radar ([rdar://17601747](http://openradar.appspot.com/radar?id=5771227683618816)) for the issue stopping us from extending or subclassing ObjC classes from Swift within the same module. I also started a [Developer Forums conversation](https://devforums.apple.com/thread/235252?tstart=0) in hopes to find a work-around.

We all have to be patient with this progress as we are integrating a very immature language and toolset with a complex project.
",jpsim,alazier
487,2014-07-14 07:11:39,"READY FOR REVIEW: @astigsen @alazier @kneth @bmunkholm.

Current State:

Features:
- Supports all RLMPropertyTypes except Any
- +className and column names use demangled class name
- RLMArrays support Sequence-style enumeration (`for obj in array`)
- Xcode 5 project and tests continue to work with these changes
- Swift tests test both Swift and Objective-C models

Caveats:
- Properties other than String, NSData and NSDate require a default value in the model. This can be an empty (but typed) array for array properties.
- The previous caveat also implies that not all models defined in Objective-C can be used for object properties. Only Objective-C models with only implicit (i.e. primitives) or explicit default values can be used. However, any Objective-C model object can be used in a Swift array property.
- Array property accessors don't work until its parent object has been added to a realm.
- `Realm-Bridging-Header.h` is temporarily exposed as a public header. This is temporary and will be private again once rdar://17633863 is fixed.
- Does not leverage Swift generics and still uses RLM-prefix everywhere. This is coming in #549.

So overall, I think this is ready to live in master, with bug fixes coming as future PR's.
",jpsim,alazier
487,2014-07-14 09:16:27,"@bmunkholm I updated the changelog, but it might be too verbose. Let me know.
",jpsim,bmunkholm
485,2014-06-26 23:46:52,"@bmunkholm do you have time to review this before you leave on your trip? If not can someone else in cph take a look? If things look good I think @timanglade wants to get this into the release for tomorrow.
",alazier,timanglade
485,2014-06-27 04:50:04,"Ok @timanglade the example is done. Since this still hasn't been reviewed yet I put it into this pull request - please take a look at your leisure.
",alazier,timanglade
485,2014-06-27 13:53:30,"@alazier please be aware that @mekjaer has left the building - and will not return.
",kneth,alazier
485,2014-06-27 19:20:40,"This is pretty fantastic, @alazier. Seriously great work. I agree with @astigsen and you that this is a good start, but that having stepwise migrations is the next logical step. It will make writing migrations a breeze.

I also like the example, but I'm wondering if the shuffling of files is muddying the concepts being conveyed. Moving all the path generation and NSFileManager code to a separate method would help.

I should get a :dog2:.
",jpsim,alazier
485,2014-06-27 23:55:17,"Got thumbs up from @jpsim @astigsen and @timanglade over gchat, so merging now.
",alazier,jpsim
485,2014-06-27 23:55:17,"Got thumbs up from @jpsim @astigsen and @timanglade over gchat, so merging now.
",alazier,timanglade
480,2014-06-26 07:17:06,"Thanks for the suggestion, @kneth. I removed `RLM_ARRAY_TYPE` everywhere and replaced its usage with protocol declarations.

Comments @timanglade @alazier?
",jpsim,kneth
480,2014-06-27 22:20:04,"Let’s have a quick chat about this in the office @jpsim @astigsen

On Fri, Jun 27, 2014 at 3:18 PM, astigsen notifications@github.com wrote:

> I think that we should keep the macro. One concern is that by using the
> protocol we put it on the user to remember a lot of syntax, so every time
> (they don't use the template) they will have to look up the how exactly
> the
> protocol was supposed to be written.
> 
> With the macro it is a lot easier. You remember that there was some macro
> you had to write, so you start writing RLM_... and then autocompletion
> shows you the rest.
> 
> The good thing about it is also that it is self-documenting the other way.
> When a new user looks at a model and there is this strange macro at the
> bottom, he can command-click it and see it described what it does and why
> it is needed. With the protocol it just looks like a pretty random
> leftover, so he might either be puzzled or even try to remove it (since it
> is in no way evident what it does or why it is needed).
> 
> On Fri, Jun 27, 2014 at 2:54 PM, Tim Anglade notifications@github.com
> wrote:
> 
> > Works for me. We got enough confusion from the early users to know that
> > the protocol will be an easier pill to swallow than a macro, overall.
> > @astigsen https://github.com/astigsen ?
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47404504.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/480#issuecomment-47406284.
",timanglade,astigsen
480,2014-06-27 22:20:04,"Let’s have a quick chat about this in the office @jpsim @astigsen

On Fri, Jun 27, 2014 at 3:18 PM, astigsen notifications@github.com wrote:

> I think that we should keep the macro. One concern is that by using the
> protocol we put it on the user to remember a lot of syntax, so every time
> (they don't use the template) they will have to look up the how exactly
> the
> protocol was supposed to be written.
> 
> With the macro it is a lot easier. You remember that there was some macro
> you had to write, so you start writing RLM_... and then autocompletion
> shows you the rest.
> 
> The good thing about it is also that it is self-documenting the other way.
> When a new user looks at a model and there is this strange macro at the
> bottom, he can command-click it and see it described what it does and why
> it is needed. With the protocol it just looks like a pretty random
> leftover, so he might either be puzzled or even try to remove it (since it
> is in no way evident what it does or why it is needed).
> 
> On Fri, Jun 27, 2014 at 2:54 PM, Tim Anglade notifications@github.com
> wrote:
> 
> > Works for me. We got enough confusion from the early users to know that
> > the protocol will be an easier pill to swallow than a macro, overall.
> > @astigsen https://github.com/astigsen ?
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47404504.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/480#issuecomment-47406284.
",timanglade,jpsim
480,2014-06-27 22:57:08,"The few I showed this to are just puzzled about what that macro does. And
even showing the definition doesn't help. We at least need to explain it
better.

On Sat, Jun 28, 2014 at 12:20 AM, Tim Anglade notifications@github.com
wrote:

> Let’s have a quick chat about this in the office @jpsim @astigsen
> 
> On Fri, Jun 27, 2014 at 3:18 PM, astigsen notifications@github.com
> wrote:
> 
> > I think that we should keep the macro. One concern is that by using the
> > protocol we put it on the user to remember a lot of syntax, so every
> > time
> > (they don't use the template) they will have to look up the how exactly
> > the
> > protocol was supposed to be written.
> > 
> > With the macro it is a lot easier. You remember that there was some
> > macro
> > you had to write, so you start writing RLM_... and then autocompletion
> > shows you the rest.
> > 
> > The good thing about it is also that it is self-documenting the other
> > way.
> > When a new user looks at a model and there is this strange macro at the
> > bottom, he can command-click it and see it described what it does and
> > why
> > it is needed. With the protocol it just looks like a pretty random
> > leftover, so he might either be puzzled or even try to remove it (since
> > it
> > is in no way evident what it does or why it is needed).
> > 
> > On Fri, Jun 27, 2014 at 2:54 PM, Tim Anglade notifications@github.com
> > wrote:
> > 
> > > Works for me. We got enough confusion from the early users to know
> > > that
> > > the protocol will be an easier pill to swallow than a macro, overall.
> > > @astigsen https://github.com/astigsen ?
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47404504.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47406284.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/480#issuecomment-47406405.
",bmunkholm,astigsen
480,2014-06-27 22:57:08,"The few I showed this to are just puzzled about what that macro does. And
even showing the definition doesn't help. We at least need to explain it
better.

On Sat, Jun 28, 2014 at 12:20 AM, Tim Anglade notifications@github.com
wrote:

> Let’s have a quick chat about this in the office @jpsim @astigsen
> 
> On Fri, Jun 27, 2014 at 3:18 PM, astigsen notifications@github.com
> wrote:
> 
> > I think that we should keep the macro. One concern is that by using the
> > protocol we put it on the user to remember a lot of syntax, so every
> > time
> > (they don't use the template) they will have to look up the how exactly
> > the
> > protocol was supposed to be written.
> > 
> > With the macro it is a lot easier. You remember that there was some
> > macro
> > you had to write, so you start writing RLM_... and then autocompletion
> > shows you the rest.
> > 
> > The good thing about it is also that it is self-documenting the other
> > way.
> > When a new user looks at a model and there is this strange macro at the
> > bottom, he can command-click it and see it described what it does and
> > why
> > it is needed. With the protocol it just looks like a pretty random
> > leftover, so he might either be puzzled or even try to remove it (since
> > it
> > is in no way evident what it does or why it is needed).
> > 
> > On Fri, Jun 27, 2014 at 2:54 PM, Tim Anglade notifications@github.com
> > wrote:
> > 
> > > Works for me. We got enough confusion from the early users to know
> > > that
> > > the protocol will be an easier pill to swallow than a macro, overall.
> > > @astigsen https://github.com/astigsen ?
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47404504.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47406284.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/480#issuecomment-47406405.
",bmunkholm,jpsim
480,2014-06-28 00:20:08,"Decided to keep the existing macro. We just need to update the templates to
use the proper syntax. We have documentation tasks in Asana to explain it
better.

On Fri, Jun 27, 2014 at 3:57 PM, bmunkholm notifications@github.com wrote:

> The few I showed this to are just puzzled about what that macro does. And
> even showing the definition doesn't help. We at least need to explain it
> better.
> 
> On Sat, Jun 28, 2014 at 12:20 AM, Tim Anglade notifications@github.com
> wrote:
> 
> > Let’s have a quick chat about this in the office @jpsim @astigsen
> > 
> > On Fri, Jun 27, 2014 at 3:18 PM, astigsen notifications@github.com
> > wrote:
> > 
> > > I think that we should keep the macro. One concern is that by using
> > > the
> > > protocol we put it on the user to remember a lot of syntax, so every
> > > time
> > > (they don't use the template) they will have to look up the how
> > > exactly
> > > the
> > > protocol was supposed to be written.
> > > 
> > > With the macro it is a lot easier. You remember that there was some
> > > macro
> > > you had to write, so you start writing RLM_... and then autocompletion
> > > shows you the rest.
> > > 
> > > The good thing about it is also that it is self-documenting the other
> > > way.
> > > When a new user looks at a model and there is this strange macro at
> > > the
> > > bottom, he can command-click it and see it described what it does and
> > > why
> > > it is needed. With the protocol it just looks like a pretty random
> > > leftover, so he might either be puzzled or even try to remove it
> > > (since
> > > it
> > > is in no way evident what it does or why it is needed).
> > > 
> > > On Fri, Jun 27, 2014 at 2:54 PM, Tim Anglade notifications@github.com
> > > 
> > > wrote:
> > > 
> > > > Works for me. We got enough confusion from the early users to know
> > > > that
> > > > the protocol will be an easier pill to swallow than a macro,
> > > > overall.
> > > > @astigsen https://github.com/astigsen ?
> > > > 
> > > > —
> > > > Reply to this email directly or view it on GitHub
> > > > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47404504.
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47406284.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47406405.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/480#issuecomment-47408717.
",timanglade,astigsen
480,2014-06-28 00:20:08,"Decided to keep the existing macro. We just need to update the templates to
use the proper syntax. We have documentation tasks in Asana to explain it
better.

On Fri, Jun 27, 2014 at 3:57 PM, bmunkholm notifications@github.com wrote:

> The few I showed this to are just puzzled about what that macro does. And
> even showing the definition doesn't help. We at least need to explain it
> better.
> 
> On Sat, Jun 28, 2014 at 12:20 AM, Tim Anglade notifications@github.com
> wrote:
> 
> > Let’s have a quick chat about this in the office @jpsim @astigsen
> > 
> > On Fri, Jun 27, 2014 at 3:18 PM, astigsen notifications@github.com
> > wrote:
> > 
> > > I think that we should keep the macro. One concern is that by using
> > > the
> > > protocol we put it on the user to remember a lot of syntax, so every
> > > time
> > > (they don't use the template) they will have to look up the how
> > > exactly
> > > the
> > > protocol was supposed to be written.
> > > 
> > > With the macro it is a lot easier. You remember that there was some
> > > macro
> > > you had to write, so you start writing RLM_... and then autocompletion
> > > shows you the rest.
> > > 
> > > The good thing about it is also that it is self-documenting the other
> > > way.
> > > When a new user looks at a model and there is this strange macro at
> > > the
> > > bottom, he can command-click it and see it described what it does and
> > > why
> > > it is needed. With the protocol it just looks like a pretty random
> > > leftover, so he might either be puzzled or even try to remove it
> > > (since
> > > it
> > > is in no way evident what it does or why it is needed).
> > > 
> > > On Fri, Jun 27, 2014 at 2:54 PM, Tim Anglade notifications@github.com
> > > 
> > > wrote:
> > > 
> > > > Works for me. We got enough confusion from the early users to know
> > > > that
> > > > the protocol will be an easier pill to swallow than a macro,
> > > > overall.
> > > > @astigsen https://github.com/astigsen ?
> > > > 
> > > > —
> > > > Reply to this email directly or view it on GitHub
> > > > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47404504.
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47406284.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/480#issuecomment-47406405.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/480#issuecomment-47408717.
",timanglade,jpsim
475,2014-06-24 16:25:18,"@mekjaer Swift-defined models don't yet support RLMArray or RLMObject properties ([Asana](https://app.asana.com/0/11600077940974/13248319024413)).

But if you defined your objects in Objective-C, you could use them in Swift. Temporary work-around.
",jpsim,mekjaer
469,2014-06-24 16:14:33,"This is :+1:, @mekjaer. But it would have been nice to review this on the California side, there are a few minor things I would have changed. No big deal this time.
",jpsim,mekjaer
464,2014-06-22 23:09:23,"Thanks @oleks, this is a good start. We certainly need a stronger test approach for predicates.

Mostly, I think we should embrace Objective-C's verbosity rather than work around it. For example `RLMPredicateGen` should be renamed to `RLMPredicateGenerator` and `OP_TYPE`/`OP_OPTIONS` should be removed.

Moreover, try-catch blocks should be replaced with `XCTAssertThrows` to go from 9 lines to 1-2.
",jpsim,oleks
464,2014-06-26 11:49:32,"Will merge this soon. @bmunkholm @jpsim 
",mekjaer,jpsim
461,2014-06-23 17:42:20,"@jpsim can you at least rename this new sample to RealmSwiftTableViewExample since it’s new?
",timanglade,jpsim
461,2014-06-23 18:31:46,"@timanglade done.
",jpsim,timanglade
457,2014-06-20 17:11:06,"Thanks @mekjaer, this might be a good temporary solution... but with the thread-safety issues we've seen using this code, it might be best to write our own solution instead.

It really wouldn't be too hard.
",jpsim,mekjaer
455,2014-06-24 18:20:54,"@emanuelez how about instead of setting an `$xcodebuild` with the direct path instead of `xcode-select`?
",jpsim,emanuelez
455,2014-06-25 16:07:21,"I'm sure that @emanuelez will fix CI tomorrow or Friday, and if local builds and tests run smoothly, a failing CI shouldn't stop us.
",kneth,emanuelez
455,2014-06-26 08:03:47,"Ari, what you mention is a consequence of the failure, not a cause. All I
can see right now is that xcodebuild exits with code 64, which usually
means a crash during the execution of the tests. I will investigate more
and report back.

On Wed, Jun 25, 2014 at 6:07 PM, Kenneth Geisshirt <notifications@github.com

> wrote:
> 
> I'm sure that @emanuelez https://github.com/emanuelez will fix CI
> tomorrow or Friday, and if local builds and tests run smoothly, a failing
> CI shouldn't stop us.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/455#issuecomment-47122907.
",emanuelez,emanuelez
455,2014-06-26 08:26:22,"The failing unit test is testTwoColumnComparisonQuery

Will try to reproduce the issue on my machine

On Thu, Jun 26, 2014 at 10:03 AM, Emanuele Zattin ez@realm.io wrote:

> Ari, what you mention is a consequence of the failure, not a cause. All I
> can see right now is that xcodebuild exits with code 64, which usually
> means a crash during the execution of the tests. I will investigate more
> and report back.
> 
> On Wed, Jun 25, 2014 at 6:07 PM, Kenneth Geisshirt <
> notifications@github.com> wrote:
> 
> > I'm sure that @emanuelez https://github.com/emanuelez will fix CI
> > tomorrow or Friday, and if local builds and tests run smoothly, a failing
> > CI shouldn't stop us.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/455#issuecomment-47122907.
",emanuelez,emanuelez
455,2014-06-26 08:49:50,"I can confirm it also fails on my machine.

On Thu, Jun 26, 2014 at 10:26 AM, Emanuele Zattin ez@realm.io wrote:

> The failing unit test is testTwoColumnComparisonQuery
> 
> Will try to reproduce the issue on my machine
> 
> On Thu, Jun 26, 2014 at 10:03 AM, Emanuele Zattin ez@realm.io wrote:
> 
> > Ari, what you mention is a consequence of the failure, not a cause. All I
> > can see right now is that xcodebuild exits with code 64, which usually
> > means a crash during the execution of the tests. I will investigate more
> > and report back.
> > 
> > On Wed, Jun 25, 2014 at 6:07 PM, Kenneth Geisshirt <
> > notifications@github.com> wrote:
> > 
> > > I'm sure that @emanuelez https://github.com/emanuelez will fix CI
> > > tomorrow or Friday, and if local builds and tests run smoothly, a failing
> > > CI shouldn't stop us.
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/pull/455#issuecomment-47122907.
",emanuelez,emanuelez
453,2014-06-19 18:10:09,"Ha! I agree, @alazier. Swift is my top priority. I've been wrangling with Xcode 6 and Swift bugs for many hours last night, I kinda needed a quick break so did this as part of the PR review...
",jpsim,alazier
452,2014-06-23 05:41:41,"Sorry for taking so long to review this @oleks. Is this PR still valid given #464?
",jpsim,oleks
452,2014-06-25 19:00:55,"@alazier I think that https://app.asana.com/0/861870036984/12827588350885 is about checking that exceptions are thrown in all unsupported cases.
",kneth,alazier
446,2014-06-18 18:03:18,"@alazier I see no problems when testing using an iOS simulator.
",kneth,alazier
446,2014-06-18 18:04:42,"I think the problem is I'm in xcode6 by accident. Our async test harness in
not thread safe and we have been running into issues (which is causing the
problems I'm seeing).

On Wed, Jun 18, 2014 at 8:03 AM, Kenneth Geisshirt <notifications@github.com

> wrote:
> 
> @alazier https://github.com/alazier I see no problems when testing
> using an iOS simulator.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/446#issuecomment-46471289.
",alazier,alazier
446,2014-06-18 18:13:50,"Yes, @alazier I've been having concurrency issues testing in Xcode 6 as well. Not sure exactly what the cause is though.
",jpsim,alazier
446,2014-06-18 19:28:29,"The XCTest+Async category isn't thread-safe, so that could be part of the
problem. Will take a deeper look next week.

On Wed, Jun 18, 2014 at 8:13 AM, JP Simard notifications@github.com wrote:

> Yes, @alazier https://github.com/alazier I've been having concurrency
> issues testing in Xcode 6 as well. Not sure exactly what the cause is
> though.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/446#issuecomment-46472622.
",alazier,alazier
441,2014-06-17 13:21:34,"@bmunkholm No I couldn't find any. I did consider to add a test case but thought it was too much work for a simple renaming.
",zuschlag,bmunkholm
441,2014-06-26 11:04:09,"@bmunkholm 
@mekjaer 
@alazier 

Shouldn't we just get this merged in and create an asana ticket for integration with migration for implementation of verification completeness?
",zuschlag,bmunkholm
441,2014-06-26 11:04:09,"@bmunkholm 
@mekjaer 
@alazier 

Shouldn't we just get this merged in and create an asana ticket for integration with migration for implementation of verification completeness?
",zuschlag,alazier
439,2014-06-17 17:11:24,"Yes, It would be a really good idea to schedule a meeting with @bmunkholm
to map out a proper test plan.

On Tue, Jun 17, 2014 at 10:08 AM, JP Simard notifications@github.com
wrote:

> I agree we need to have a formal test plan, but this PR is not the place.
> I'll set up a meeting via email to discuss how to proceed.
> 
> Regardless of Swift, I do think that it's better to have all these test
> objects localized. As Brian said, we have far too many test objects
> defined, most likely because they were all in different files.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-objc/pull/439#issuecomment-46336252.
",astigsen,bmunkholm
439,2014-06-18 15:02:23,"I agree with @bmunkholm, I'll update this PR to reflect that approach.
",jpsim,bmunkholm
439,2014-06-18 20:33:11,"Ok @alazier @bmunkholm @oleks. Please review again. I've updated this PR with the following goals in mind:
- All test objects are consistently named ""{Description}Object"" (i.e. PersonObject, IntObject)
- Test objects common to several test classes are in TestObjects.h
- Test objects relevant to a single test class are grouped at the top of that test class
- Object properties are consistently named (""{type}Col"" for abstract classes (""intCol""), or ""{description}"" for real life classes (""name"", ""age""))
",jpsim,alazier
439,2014-06-18 20:33:11,"Ok @alazier @bmunkholm @oleks. Please review again. I've updated this PR with the following goals in mind:
- All test objects are consistently named ""{Description}Object"" (i.e. PersonObject, IntObject)
- Test objects common to several test classes are in TestObjects.h
- Test objects relevant to a single test class are grouped at the top of that test class
- Object properties are consistently named (""{type}Col"" for abstract classes (""intCol""), or ""{description}"" for real life classes (""name"", ""age""))
",jpsim,bmunkholm
439,2014-06-18 20:33:11,"Ok @alazier @bmunkholm @oleks. Please review again. I've updated this PR with the following goals in mind:
- All test objects are consistently named ""{Description}Object"" (i.e. PersonObject, IntObject)
- Test objects common to several test classes are in TestObjects.h
- Test objects relevant to a single test class are grouped at the top of that test class
- Object properties are consistently named (""{type}Col"" for abstract classes (""intCol""), or ""{description}"" for real life classes (""name"", ""age""))
",jpsim,oleks
430,2014-06-17 07:12:40,"@kneth yes. We could also update the podspec to just point to the file instead of containing the license inline.
",jpsim,kneth
430,2014-06-17 07:38:49,"@jpsim if you handle the podspec, I'll show @mekjaer how to copy the file when generating the framework.
",kneth,mekjaer
430,2014-06-17 07:38:49,"@jpsim if you handle the podspec, I'll show @mekjaer how to copy the file when generating the framework.
",kneth,jpsim
416,2014-06-12 10:56:55,"I agree with @bmunkholm. Any `build.sh` must have at least three ""commands"":
- `clean`
- `build` - for building (here: OS X framework)
- `test` - running unit tests (here: OS X tests) 
",kneth,bmunkholm
416,2014-06-12 14:26:04,"Ok, since @alazier preferred that 'test-all' be renamed to 'test', and that it's a hard requirement to match other bindings, how about this:
1. Add 'clean', which would `rm -rf docs/output core build`
2. Add 'build', which would run 'ios' and 'osx'. Is this ok in the default config of Debug?
3. Rename 'test-all' to 'test'
4. Add 'coverage', which would run the new scheme
",jpsim,alazier
416,2014-06-12 14:31:41,"1. Why not also running `xcodebuild clean` ? We also want to get rid of
   object files in the `DerivedData` folder
2. I think build should build every target both in release and debug mode.
   then we could have build-release and build-debug
3. ok
4. It's not a new scheme but a new configuration. Look at the configuration
   of objc_coverage in Jenkins to see how to use it.

On Thu, Jun 12, 2014 at 4:26 PM, JP Simard notifications@github.com wrote:

> Ok, since @alazier https://github.com/alazier preferred that 'test-all'
> be renamed to 'test', and that it's a hard requirement to match other
> bindings, how about this:
> 1. Add 'clean', which would rm -rf docs/output core build
> 2. Add 'build', which would run 'ios' and 'osx'. Is this ok in the
>    default config of Debug?
> 3. Rename 'test-all' to 'test'
> 4. Add 'coverage', which would run the new scheme
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-objc/pull/416#issuecomment-45898014.
",emanuelez,alazier
416,2014-06-13 12:11:58,"@emanuelez Can you add `get-version` and `set-version`?
",kneth,emanuelez
416,2014-06-13 12:13:13,"@kneth I'm on it
",emanuelez,kneth
401,2014-06-16 20:31:02,"This is as far as I can take this PR. I haven't been able to get this to work without placing it inside Realm itself. @bmunkholm and @alazier, you seem to have ideas on how to make this work, could you amend this PR with your approach?
",jpsim,alazier
400,2014-06-12 18:00:38,"Fixed per the feedback, merging.
@jpsim Can you resubmit 0.21.0 or should we wait for the next release to update this text?
",timanglade,jpsim
400,2014-06-13 09:07:46,"resubmit???
We never ever never ever change content a release if that's what you mean?

On Thu, Jun 12, 2014 at 8:00 PM, Tim Anglade notifications@github.com
wrote:

> Fixed per the feedback, merging.
> @jpsim https://github.com/jpsim Can you resubmit 0.21.0 or should we
> wait for the next release to update this text?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-objc/pull/400#issuecomment-45926248.
",bmunkholm,jpsim
395,2014-06-10 16:55:48,"Hold on this script will still fail if the user has an old version of core in `/core`. Shouldn’t we auto-update if the user has 0.20 but he needs 0.21? Right now this scenario fails in very non-obvious ways (missing headers, etc.) /cc @kneth @alazier @bmunkholm 
",timanglade,alazier
395,2014-06-10 16:55:48,"Hold on this script will still fail if the user has an old version of core in `/core`. Shouldn’t we auto-update if the user has 0.20 but he needs 0.21? Right now this scenario fails in very non-obvious ways (missing headers, etc.) /cc @kneth @alazier @bmunkholm 
",timanglade,kneth
394,2014-06-10 18:17:50,"@bmunkholm I agree, but in this case, the warnings were only exposed by the changes made in that previous PR.
",jpsim,bmunkholm
391,2014-06-09 19:48:55,"@astigsen : could you make a PR towards this with the changes done?
",bmunkholm,astigsen
391,2014-06-09 20:15:02,"> @astigsen : could you make a PR towards this with the changes done?

I can make a PR with my working Xcode project as reference. But I still had to manually duplicate the framework into the `build/release` folder, so it probably need a more general cleanup before it would be ready for distribution. 
",astigsen,astigsen
391,2014-06-10 02:03:54,"@zuschlag  I have pushed a branch `browser_build_fixes` with the changes I did to make it build. You can incorporate the parts that you find useful.
",astigsen,zuschlag
391,2014-06-11 18:45:39,"I have taken the liberty to checkout the branch and get it to work on my computer. My approach might be a bit different than @zuschlag but I think we should sit down tomorrow and see if we can get it to work on multiple machines ;-)
",kneth,zuschlag
391,2014-06-20 08:19:21,"@alazier: I fully agree in regard to factoring of RLMDocument. Remember that this is a WIP and I haven't yet established the right design and it will definitely change in the near future. The NSDocument is actually a strange beast. In a way it's meant from the template to function as both model and controller, but I'm planning to move the controller part into a customized NSWindowController. I just have to figure out the right to plug it in.
",zuschlag,alazier
390,2014-06-09 22:36:05,"@realm/obj-c sorry for breaking the build with this one. CI was down and I didn’t realize a few of those enums were being used somewhere else. Dumb of me either way. @jpsim has a fix in progress.
",timanglade,jpsim
385,2014-06-06 09:11:25,"Awesome work @alazier!

We must also begin again to update CHANGELOG.md. Any change (more or less) since 0.20.0 should be mentioned.
",bmunkholm,alazier
381,2014-06-04 19:08:44,"I'm fine with changing it to what @jpsim suggests.
",alazier,jpsim
381,2014-06-04 19:20:53,"@kneth you should also move `REALM_CORE_VERSION` to inside the script so we can call this from outside Xcode if need be.
",jpsim,kneth
379,2014-06-04 18:43:52,"@jpsim Yes, we're not using the Makefiles anymore. I only added them so @zuschlag could work on his OS X apps.

And you're right; we could rewrite `build.sh` to call `xcodebuild` or create a few smaller script to do what `xcodebuild` cannot do.
",kneth,jpsim
377,2014-06-04 06:47:44,"Removing the WIP label from this. As far as I can tell you now build for OSX, iOS, for test, build or release, even on a fresh machine without a tightdb (core) repo anywhere on it. All build.sh commands that existed were updated

This branch depends on 2 minor changes in Jenkins:
- update scheme in CI job (looking for “Realm” right now, should be updated to “OSX”) — blocking CI from passing right now
- update jenkins script to build core with build-objc and upload output as a zip at static.realm.io/downloads/core/realm-core-VERSION.zip (JP uploaded an 0.20.0 version for now)

@kneth @emanuelez @bmunkholm please review and merge at your discretion. This is fairly big so you may want to do that before the day goes too far… ;)
",timanglade,emanuelez
377,2014-06-04 08:02:25,"@kneth even though the build scheme and target are ""OSX Library"", it still builds to `Realm.framework`.

Also, since we refer to the c++ tightdb code as ""core"", it makes sense to call it ""core"" in the short form whenever we're in the context of Realm. There's a big distinction between `/cores` and `${SRCROOT}/core`. It makes more sense than `realm-core` IMO.
",jpsim,kneth
377,2014-06-04 08:10:45,"@jpsim In ""Product"" you find the ""OSX Library"". I see two frameworks in `build` (after building for iOS and OS X) - one for debug and one for release. The one in debug seems to be for iOS (it includes arm architectures) while release seems to be for OS X (only x86_64 and dynamic). If I change the iOS scheme from debug to release, the OS X framework is overwritten :-(
",kneth,jpsim
377,2014-06-04 09:51:17,"My mistake, you are right @kneth, the product of the ""OSX Library"" build scheme should be ""Realm.framework"", but currently isn't. I'm sure @timanglade will address this tomorrow as he agrees that this is unintentional.
",jpsim,timanglade
377,2014-06-04 09:51:17,"My mistake, you are right @kneth, the product of the ""OSX Library"" build scheme should be ""Realm.framework"", but currently isn't. I'm sure @timanglade will address this tomorrow as he agrees that this is unintentional.
",jpsim,kneth
376,2014-06-05 20:31:19,"@jpsim : I made a small update to the test to check the codepath for > 1000 objects, and added a supplemental text for the number of skipped objects. Hope that's ok. If so, please merge.
",bmunkholm,jpsim
365,2014-06-03 07:45:02,"@timanglade I'll pull your changes into this branch and see how it goes.
",kneth,timanglade
365,2014-06-03 11:09:03,"@timanglade I have merged your branch into mine - and moved the changes to `build-doc.sh`. You're welcome to merge with master if everything is fine.
",kneth,timanglade
363,2014-06-02 17:14:09,"@emanuelez is there a discussion about the decision around not being able to link realm-core debug? What are those motivations?
",jpsim,emanuelez
363,2014-06-02 18:52:41,"@kneth just fixed the issue.
",alazier,kneth
363,2014-06-02 18:56:43,"@alazier Thanks
",kneth,alazier
363,2014-06-02 19:26:50,"Good catch @kneth 

That is now fixed. Also, we now only copy public headers (defined in libRealm build step), and I also fixed the tableviewexample - we are now using a subproject and no longer need the workspace so it has been removed - hopefully this will make @jpsim happy.
",alazier,jpsim
363,2014-06-02 19:26:50,"Good catch @kneth 

That is now fixed. Also, we now only copy public headers (defined in libRealm build step), and I also fixed the tableviewexample - we are now using a subproject and no longer need the workspace so it has been removed - hopefully this will make @jpsim happy.
",alazier,kneth
363,2014-06-03 07:38:39,"@alazier : Why move the scripts out in separate files? I thought you wanted to move everything into XCode to get rid of scripts in the folder? Or was it just to have targets in Xcode? Then we might as well keep the scripts inside build.sh to keep scripts together and then call build.sh from Xcode? 
",bmunkholm,alazier
363,2014-06-03 08:14:42,"@bmunkholm we could go around in circles on this quite a bit. Whether or not the different tasks are shared in build.sh or split into individual components in scripts/*, the important part is that running a command in Xcode is also accessible through the command line without duplication. This branch addresses this issue.

Of course this will need some developer feedback. So keep it coming!
",jpsim,bmunkholm
361,2014-06-01 20:56:05,"Very very strong! I like this.

Nitpicked here & there, with only two major notes and one question (see comments)

@astigsen Do you mind taking a quick look as well since @amuramoto is interviewing?
@alazier You had strong thoughts on docs, so please take a quick look at the language & formatting and tell us if you agree. (Low priority.)
",timanglade,amuramoto
361,2014-06-03 01:28:39,"@amuramoto Are you sending a separate PR or just pushing more fixes to this branch? We usually do the latter.

I think we’ve all seen enough on this side to get you onto something a bit more meaty now :) I’ll tell you more via email.

Can you just deal with all the comments and push more commits to this branch so we can merge it in asap?
",timanglade,amuramoto
356,2014-06-03 00:57:03,"Tests pass on my machine. Can I get one quick last look before I merge @alazier @jpsim @astigsen  ?
",timanglade,alazier
356,2014-06-03 00:57:03,"Tests pass on my machine. Can I get one quick last look before I merge @alazier @jpsim @astigsen  ?
",timanglade,jpsim
348,2014-05-29 18:20:00,"@alazier the problem isn't in the contents of the block, but rather the fact that the block is on a local variable that gets dealloc'd, thus deallocating the block.
",jpsim,alazier
347,2014-05-28 22:13:28,"@alazier Made changes per your comments. Let me know your thoughts.
",fyell,alazier
347,2014-05-29 14:38:46,"@astigsen this is a good point - we actually already suffer from this issue when inserting where we can thrown and leave the system in a bad state. The easiest solution for now is to delete the row being inserted if the insertion fails. Adding ticket.
",alazier,astigsen
345,2014-05-29 06:10:30,":+1:
@jpsim great news that we had hit CocoaPods!!!!
",kneth,jpsim
334,2014-05-28 01:21:16,"@timanglade another likely shoot-in-the-foot scenario is that a user deletes a property but doesn't have any migration tests. This happens WAY more often than you'd think. In this case, the app would crash for users upgrading.
",jpsim,timanglade
334,2014-05-28 01:45:03,"Yeah that’s pretty bad :-/ Is there any way we can force people to write a migration before they ship?  Compare signature of objects between builds, etc. ? /cc @alazier @fguhit
",timanglade,alazier
334,2014-05-28 03:00:31,"Just for the sake of sharing our conversation, @alazier proposed making this scenario (removing a property from an interface without also deleting or renaming it in a migration) fail in debug but only print a warning in release.

I proposed a failure message along these lines in debug:

> Detected missing property X from Object Y
> Removing a property from an RLMObject requires defining a matching migration.
> See http://realm.io/docs/ios/VERSION/docs/Migration.html for details.

The warning should probably output something like this instead:

> Detected missing property X from Object Y without a matching migration.
> Data for property X was deleted from Realm Z.
> It is important to define explicit migrations for property deletions, so Realm can ensure a linear upgrade path for all your app’s users.
> See http://realm.io/docs/ios/VERSION/docs/Migration.html for details.
",timanglade,alazier
334,2014-05-28 04:43:03,"@alazier @timanglade :+1:
",jpsim,alazier
334,2014-05-28 04:43:03,"@alazier @timanglade :+1:
",jpsim,timanglade
333,2014-05-29 22:35:46,"@timanglade Can we close this PR with the new long-form docs in the realm.io repo?
",jpsim,timanglade
328,2014-05-27 15:57:35,"@bmunkholm Just discussed this with @jpsim and it’s not very standard in Obj-C, not is it super necessary in our case. Ignoring a few files manually is probably fine for now.
",timanglade,bmunkholm
328,2014-05-28 04:53:32,"I think @bmunkholm meant to keep these internal classes in a separate group in Xcode, but not mirror that structure on the filesystem. I think that's a good idea.
",jpsim,bmunkholm
328,2014-05-28 05:08:43,"That's what I thought he meant :) What would be the point of using a group
if not to hide / tuck these classes away from the view of committers?
If we go that way based on what I'm filtering out of the docs then we
should only have RLMRealm, RLMObject and RLMArray at the root and
everything else in that separate group, since that's exactly what my
ignores are meant to do. Is that what we want?
Personally I always find mismatches between Xcode and disk structure
extremely distasteful (such as RealmTests vs. Realm/RealmTests), but maybe
I haven't spent enough time in objective-C land.

By the way, I'm only removing those classes manually from our user docs in
an abundance of caution (because I think they may give some developers some
bad ideas about how to use us, or make our library look more complicated
than it really is). That's why I'm surprised we'd ever want to remove them
from the view of committers — I'm not even 100% sure we should hide them
from the view of users! :D
To be honest, I half-expected you or @alazier to step in and argue I
should add a few of those classes back to our docs :p Please do compare the
output of both `sh build.sh docs` and confirm I'm not hiding anything that
should be public…

On Tuesday, May 27, 2014, JP Simard notifications@github.com wrote:

> I think @bmunkholm https://github.com/bmunkholm meant to keep these
> internal classes in a separate group in Xcode, but not mirror that
> structure on the filesystem. I think that's a good idea.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-objc/pull/328#issuecomment-44365605
> .
",timanglade,bmunkholm
328,2014-05-28 06:34:10,"To me it's about reflecting the design in the structure to give some kind
of clue about where to get started. It's actually to try to help newcomers!
Once there are many files (and we are getting there now), it's nice to get
a little help understanding the structure. It's not to ""hide"" anything.
Separating them in two simple buckets (PublicClasses, InternalClasses) for
a start would be a help. Or whatever logical grouping that makes sense.
Whether this logical structure is reflected in the physical structure is
less interesting to me (except if it could help tooling for docs for
example).

On Wed, May 28, 2014 at 7:08 AM, Tim Anglade notifications@github.comwrote:

> That's what I thought he meant :) What would be the point of using a group
> if not to hide / tuck these classes away from the view of committers?
> If we go that way based on what I'm filtering out of the docs then we
> should only have RLMRealm, RLMObject and RLMArray at the root and
> everything else in that separate group, since that's exactly what my
> ignores are meant to do. Is that what we want?
> Personally I always find mismatches between Xcode and disk structure
> extremely distasteful (such as RealmTests vs. Realm/RealmTests), but maybe
> I haven't spent enough time in objective-C land.
> 
> By the way, I'm only removing those classes manually from our user docs in
> an abundance of caution (because I think they may give some developers
> some
> bad ideas about how to use us, or make our library look more complicated
> than it really is). That's why I'm surprised we'd ever want to remove them
> from the view of committers — I'm not even 100% sure we should hide them
> from the view of users! :D
> To be honest, I half-expected you or @alazier to step in and argue I
> should add a few of those classes back to our docs :p Please do compare
> the
> output of both `sh build.sh docs` and confirm I'm not hiding anything that
> should be public…
> 
> On Tuesday, May 27, 2014, JP Simard notifications@github.com wrote:
> 
> > I think @bmunkholm https://github.com/bmunkholm meant to keep these
> > internal classes in a separate group in Xcode, but not mirror that
> > structure on the filesystem. I think that's a good idea.
> > 
> > —
> > Reply to this email directly or view it on GitHub<
> > https://github.com/realm/realm-objc/pull/328#issuecomment-44365605>
> > .
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-objc/pull/328#issuecomment-44366226
> .
",bmunkholm,bmunkholm
327,2014-05-28 08:18:23,"@jpsim Yes, this is a new attempt to create a framework using Xcode and the other PRs can be closed.

Regarding CocoaPods: I don't see the value for Realm employees and contributors to use CocoaPods to download the binary core. Notice that I'm working on a download target instead.
",kneth,jpsim
311,2014-05-23 10:08:15,"@kneth The previous comment retriggers a build in Jenkins - pretty cool
",mekjaer,kneth
309,2014-05-21 11:16:13,"@timanglade It seems that white spaces in pod names is a no-go. I have change the name to realm_core but RealmCore might be better.
",kneth,timanglade
309,2014-05-27 14:38:16,"@timanglade the reason for zipping is that we need to distribute the framework to our users.
",kneth,timanglade
303,2014-05-20 09:04:17,"@kneth I agree, however sub and mixed are not implemented yet. Will add a ticket to remember to add this test once they are implemented
",mekjaer,kneth
302,2014-05-19 11:56:55,"@emanuelez Yes, that would be nice. But we run into the problem of OS X or iOS.
",kneth,emanuelez
300,2014-05-20 07:02:00,"@alazier With your latest commit, I get a warning when I delete the `default` case. That's all I ask for :-)
",kneth,alazier
299,2014-05-16 00:23:21,"I definitely agree with Alex’s comment. That also means we should hold off until we have implemented the concept of a primary property on RLMObjects.

We’ve been chatting here about not actually including any network logic in the library, but maybe just offering optional Categories that load up methods that rely on AFNetworking. That would wait until after launch. What do you think of this potential approach @kneth?

I think what we do need to have for launch are just JSON<=>Realm mapping functions. I see there is something to map a JSON object to a Realm object, but what about offering a way to do the reverse? Is that automatically handled by your method?
",timanglade,kneth
299,2014-05-19 06:23:24,"I would also prefer that Realm is an object store/database/what-term-we-call-it and that we have no network functionality in the library. 

As @timanglade points out we need to have a mapping from `RLMObject` and `RLMArray` to JSON.  We do have `to_json` in the core but it's not what we wish as column names are not transformed. The `*ToURL` family was supposed to do the mapping based on the `RLMJSONSerialization` but we don't have a network layer, we probably just have a `stringValue:asJSON` method.
",kneth,timanglade
299,2014-05-19 06:24:42,"@astigsen without a network component in the library, your proposed `getObjectFromURL` isn't relevant, don't you agree?
",kneth,astigsen
299,2014-05-19 09:35:21,"I'll remove the networking from this PR and later recreate it as PRs for item 2 and 3 from the list by @astigsen. Btw, do you mean REST as in implementing http://en.wikipedia.org/wiki/Representational_state_transfer? Or do you mean something closer to http://en.wikipedia.org/wiki/AJAX?

@timanglade The mapping from `RLMArray` to JSON is covered by `JSONString` in the original proposal by @alazier.
",kneth,astigsen
299,2014-05-19 09:35:21,"I'll remove the networking from this PR and later recreate it as PRs for item 2 and 3 from the list by @astigsen. Btw, do you mean REST as in implementing http://en.wikipedia.org/wiki/Representational_state_transfer? Or do you mean something closer to http://en.wikipedia.org/wiki/AJAX?

@timanglade The mapping from `RLMArray` to JSON is covered by `JSONString` in the original proposal by @alazier.
",kneth,timanglade
299,2014-05-19 20:10:23,"Either way, I think we can consider this design reviewed and move to implementation, unless there are any last thoughts from @astigsen @alazier @bmunkholm ?
",timanglade,astigsen
299,2014-05-28 05:36:55,"@jpsim We've discussed this extensively while you were away and decided
against doing any networking for launch. We do plan on adding it later, and
we do aim to have some in/out JSON mapping at launch. I can expand on our
reasoning and we should discuss this in person tomorrow!

On Tuesday, May 27, 2014, JP Simard notifications@github.com wrote:

> I'd really stay away from doing any networking in Realm. Network code can
> quickly get very complicated. What if you need certificate pinning, a
> custom user agent, etc? The best thing Realm can do is simplify
> serialization/deserialization. We leave the networking to the user.
> 
> As for keypath mapping, there are countless open source libraries that
> have been built to do this. I don't think it's worth addressing what's
> essentially a solved problem that isn't core to our product. Though this
> might be worth revisiting later.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-objc/pull/299#issuecomment-44366970
> .
",timanglade,jpsim
295,2014-05-15 08:33:45,"@alazier I have pushed a commit to your al_mixed branch and I close this PR so you can make a PR on that branch.
",kneth,alazier
294,2014-05-14 14:45:14,"@bmunkholm @alazier I took the freedom to implement sum, avg, min and max on RLMArray
",mekjaer,bmunkholm
288,2014-05-13 13:09:33,"@emanuelez @kneth 
",mekjaer,emanuelez
279,2014-05-09 22:41:48,"@timanglade The idea is to treat the RealmTools CLI, Plug-in, and/or OSX App as a standalone Application independent of the objc bindings. That's why I was thinking of having it in a separate repo. 

The Podfile approach sounds ok to me however it doesn't seem like linking to a local Podspec is the way to go unless we want to maintain the Podspec versions within the objc root. The Podfile in Realm*Examples and RealmTools will need to reference a remote Podspec in order for their Podfiles to specify a version to support. 

Secondly, if we are storing a static version of the core in the objc bindings and tools, we should be versioning those too. Since we most likely won't be using cocoapods with the core, I'm thinking of something along the lines of adding a suffix to communicate what version of core we're using (i.e. libtightdb-0.x.0.a).

Either way, I will keep the RealmTools project in this repo until we have:
1. A remote Podspec with versioning. 
2. A versioned static library for core.
",fyell,timanglade
279,2014-05-09 23:16:32,"Per my discussion with @timanglade, we may replace the use of the importer_tool.cpp logic for parsing and just use https://github.com/davedelong/CHCSVParser. 

This offers us a number of benefits:
- It allows us to only rely on the objective-c bindings.
- It allows us to give have a buildable project that we can share so that users can install an Xcode plugin via Alcatraz or Xcode.
- No need for a static tightdb core library
",fyell,timanglade
277,2014-05-10 15:58:57,"So I fixed issue 2 (the atom links), but we can’t deal with issue 1 (dash docset generation) from appledoc (see http://kapeli.com/docsets#dashdocsetfeed)

I leave it up to @emanuelez to do the tgz and xml file generation from Jenkins or from build.sh (did you take care of that already?)
",timanglade,emanuelez
277,2014-05-11 09:46:17,"I fixed issue 1 (the tgz and xml files). @timanglade will you give it another run and see if everything is ok?
",emanuelez,timanglade
272,2014-05-09 09:09:24,"Good job @zuschlag :+1: 
",mekjaer,zuschlag
262,2014-05-07 23:26:40,"Belated :+1: nice first PR, @zuschlag!!
",jpsim,zuschlag
261,2014-05-07 23:31:47,"Looks good! Does this have @timanglade's custom CSS for the side-column? If not, this would be a good place to put it.
",jpsim,timanglade
261,2014-05-07 23:33:21,"It looks like it’s in there yeah!

On Wed, May 7, 2014 at 4:31 PM, JP Simard notifications@github.com wrote:

> Looks good! Does this have @timanglade https://github.com/timanglade's
> custom CSS for the side-column? If not, this would be a good place to put
> it.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/261#issuecomment-42496171
> .
",timanglade,timanglade
259,2014-05-07 23:29:09,"@alazier I'm passing in that string to ""MixedCol"", not ""TableCol"".
",jpsim,alazier
259,2014-05-11 20:11:40,"@kneth : did you add these tests to your PR #252 ? If so, and they are passing, @kneth please close this.
",bmunkholm,kneth
257,2014-05-07 16:49:39,"It’s definitely a small thing but details like this add up to a more consistent experience. Spelling it “doc” is like having a typo… `docs/` sounded best to the design team on this task, but `documentation/` would be fine as well. It really improves the experience so I would definitely vote to break existing engineering convention here (again let’s focus on improving the experience for users than whatever small engineering convenience we get).

@jpsim we had discussed putting a README file in there to indicate that only articles were in this directory, with class references being generated from comments in the code. Maybe the README should also strongly point people to go consult docs at http://realm.io/docs/ios/ instead.
",timanglade,jpsim
257,2014-05-07 16:58:37,"+1 for documentation. It is both singular and plural so meets the unix,
apple, microsoft conventions simultaneously, and nobody will misinterpret
it as doctor, documents or anything else. It is a bit long though...

On Wed, May 7, 2014 at 9:49 AM, Tim Anglade notifications@github.comwrote:

> It’s definitely a small thing but details like this add up to a more
> consistent experience. Spelling it “doc” is like having a typo… docs/sounded best to the design team on this task, but
> documentation/ would be fine as well. It really improves the experience
> so I would definitely vote to break existing engineering convention here
> (again let’s focus on improving the experience for users than whatever
> small engineering convenience we get).
> 
> @jpsim https://github.com/jpsim we had discussed putting a README file
> in there to indicate that only articles were in this directory, with class
> references being generated from comments in the code. Maybe the README
> should also strongly point people to go consult docs at
> http://realm.io/docs/ios/ instead.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/257#issuecomment-42452397
> .
",alazier,jpsim
257,2014-05-07 20:51:22,"We also have to worry about where the generated HTML and docset should be
outputted to be honest. Any thoughts @jpsim?

On Wed, May 7, 2014 at 1:48 PM, Tim Anglade ta@realm.io wrote:

> Well the appledocs subdir is actually just the generated output. the .md
> source files in the docs/ folder are readable on Github or if you just
> browse the source so I’m not sure we want to add them under docs/appledocs
> 
> On Wed, May 7, 2014 at 1:41 PM, bmunkholm notifications@github.comwrote:
> 
> > But let's have the appledocs subdir to make room for other 'docs' as well.
> > 
> > —
> > Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/257#issuecomment-42480358
> > .
",timanglade,jpsim
257,2014-05-10 03:42:22,"Addressed the comments in this thread on JP’s behalf since he’s on vacay. @emanuelez can you take a quick look that everything is cool and merge this in?
",timanglade,emanuelez
257,2014-05-10 06:47:31,"@timanglade : You write that you agree to JP's proposal, but didn't change 'docs' to 'documentation'? Was that intentionally or an oversight?
",bmunkholm,timanglade
257,2014-05-10 06:48:22,"@timanglade : Notice the small additions to your README in docs.
",bmunkholm,timanglade
257,2014-05-10 14:46:32,"OK your changes look good @bmunkholm.

I thought we agreed to stay on `docs/` so I just meant I proceeded to implement his proposed subdirectory structure. I just spent a few minutes tinkering with renaming this folder `documentation/` but it’s kinda weird since our online docs are at realm.io/docs 

All good to merge once @emanuelez gives it a run?
",timanglade,bmunkholm
257,2014-05-10 14:46:32,"OK your changes look good @bmunkholm.

I thought we agreed to stay on `docs/` so I just meant I proceeded to implement his proposed subdirectory structure. I just spent a few minutes tinkering with renaming this folder `documentation/` but it’s kinda weird since our online docs are at realm.io/docs 

All good to merge once @emanuelez gives it a run?
",timanglade,emanuelez
247,2014-05-06 11:58:49,"Awesome @jpsim :+1: 
",mekjaer,jpsim
236,2014-05-05 16:25:39,"> @astigsen - you mentioned in another discussion that this type of functionality should not be exposed. I did not add this functionality to RLMRealm when removing RLMTransactionManager and deleted this test. Is this what we want?

With the implicit transactions, this is superfluous. If you need that functionality (watching for changes), you should use a runloop. So I think that we can safely remove the `hasChanged` method from the public interface.
",astigsen,astigsen
236,2014-05-05 16:30:27,"@astigsen that is very weird… I see why we would want it but explaining that behavior to the user is not straightforward. Maybe if we call that method `commitWriteTransactionAndBeginWriteTransaction` + explain in the docs that you never actually release the lock so you are guaranteed not to have a write come in between the moment you commit and the moment you begin again with this method?

Otherwise we introduce in the user’s mind the concept of non-transaction transactions where stuff that is committed may or may not be a self-standing transaction, and what happens when you abandon a transaction after you called commitWriteTransactionAndContinueWrites (does that rollback both or just the stuff after?), etc. 
",timanglade,astigsen
236,2014-05-06 07:14:35,"You are now ONLY considering the use of the objc binding in iOS. If we make
a browser on OSX, it would be nice to have. I think we need to have the OSX
perspective as well.

On Mon, May 5, 2014 at 6:25 PM, astigsen notifications@github.com wrote:

> @astigsen https://github.com/astigsen - you mentioned in another
> discussion that this type of functionality should not be exposed. I did not
> add this functionality to RLMRealm when removing RLMTransactionManager and
> deleted this test. Is this what we want?
> 
> With the implicit transactions, this is superfluous. If you need that
> functionality (watching for changes), you should use a runloop. So I think
> that we can safely remove the hasChanged method from the public interface.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/236#issuecomment-42206630
> .
",bmunkholm,astigsen
236,2014-05-06 07:17:44,"OSX has a runloop just as iOS, so it will be the same there.

On Tuesday, May 6, 2014, bmunkholm notifications@github.com wrote:

> You are now ONLY considering the use of the objc binding in iOS. If we
> make
> a browser on OSX, it would be nice to have. I think we need to have the
> OSX
> perspective as well.
> 
> On Mon, May 5, 2014 at 6:25 PM, astigsen <notifications@github.com<javascript:_e(%7B%7D,'cvml','notifications@github.com');>>
> wrote:
> 
> > @astigsen https://github.com/astigsen - you mentioned in another
> > discussion that this type of functionality should not be exposed. I did
> > not
> > add this functionality to RLMRealm when removing RLMTransactionManager
> > and
> > deleted this test. Is this what we want?
> > 
> > With the implicit transactions, this is superfluous. If you need that
> > functionality (watching for changes), you should use a runloop. So I
> > think
> > that we can safely remove the hasChanged method from the public
> > interface.
> > 
> > —
> > Reply to this email directly or view it on GitHub<
> > https://github.com/Tightdb/tightdb_objc/pull/236#issuecomment-42206630>
> > .
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/236#issuecomment-42273421
> .
",astigsen,astigsen
226,2014-05-01 20:02:40,"@alazier are you saying this we should remove the NSError parameter in `addColumnWithName:andType:error:`? I'd say that's out of scope for this PR.
",jpsim,alazier
224,2014-04-29 14:39:01,"@timanglade has all the work from #191 been merged into this? If so I'll close it. A lot of the comments above apply to the tutorial, I'll apply it there too (#223).
",jpsim,timanglade
224,2014-04-29 15:28:07,"Don't duplicate any more work than I have already :D
I'm not sure we'll keep the standalone tutorial vs. maintain this new index
page of the docs. I definitely don't think we need both, what do you think?

I took a look at #191 and ported over the parts that needed porting over
after a quick glance. You can close that PR for now and I'll take another
look this week to make sure I didn't miss anything,

On Tuesday, April 29, 2014, JP Simard notifications@github.com wrote:

> @timanglade https://github.com/timanglade has all the work from #191https://github.com/Tightdb/tightdb_objc/pull/191been merged into this? If so I'll close it. A lot of the comments above
> apply to the tutorial, I'll apply it there too (#223https://github.com/Tightdb/tightdb_objc/pull/223
> ).
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/224#issuecomment-41683956
> .
",timanglade,timanglade
224,2014-05-01 17:52:46,"@mekjaer @jpsim @fguhit Can I get a review on this PR by lunch so we can merge before master diverges too much? Jenkins should pass now that JP has removed the unused parameter from master.
",timanglade,jpsim
223,2014-05-01 20:25:49,"@jpsim can you:
1. remove the tutorial text (commit the code of the project only)
2. removee the //@@ comments necessary for sample extraction
3. add a bit more comments to the code (without going as far as copy-pasting your old tutorial text in the code) so the project is fairly self-explanatory? That would include a short README telling people how to compile & run the project, and directions to the main file where all the magic happens (RLMTableViewController)
4. how do we feel about prefixing all those tutorial files with RLM btw? Shouldn’t we reserve that prefix for library stuff?
",timanglade,jpsim
223,2014-05-01 22:50:15,"Call for code review @fguhit @alazier @mekjaer 
",jpsim,mekjaer
222,2014-04-28 06:01:33,"@alazier @astigsen better with this refactoring?
",jpsim,alazier
220,2014-05-01 20:30:54,"Please update docs/index.md before merging. Anything else we need to do before merging? /cc @astigsen 
",timanglade,astigsen
219,2014-05-01 20:36:21,"@mekjaer @fguhit please review this one as well so @bmunkholm can merge when he lands
",timanglade,bmunkholm
214,2014-05-01 17:02:58,"Ready for review @alazier @jpsim @astigsen 
",fyell,astigsen
214,2014-05-01 17:02:58,"Ready for review @alazier @jpsim @astigsen 
",fyell,jpsim
214,2014-05-01 20:41:55,"Thanks @mekjaer.
",fyell,mekjaer
214,2014-05-05 16:03:36,"Merging now. Thanks @mekjaer and @jpsim for fixing conflicts.
",fyell,mekjaer
214,2014-05-05 16:03:36,"Merging now. Thanks @mekjaer and @jpsim for fixing conflicts.
",fyell,jpsim
213,2014-04-23 23:26:03,"Fixes for all comments are now in. Anyone care to review?

@alazier for both conceptual and technical reasons, we can't move this functionality to table retrieval.

Conceptual: You might want some initial tables/data in your realm, you might want to create _many_ tables. It makes more sense to do this on the realm level than create many tables when getting a single one.

Technical: Performing write operations _after_ a realm has been created would require the realm to be ""reset"", i.e. fast-forwarded to the latest state. I'm sure @astigsen can come up with more reasons this would be difficult technically.
",jpsim,alazier
211,2014-05-01 20:34:32,"@bmunkholm After the discussions this week, do we agree it’s okay to hide the old where for now? They are not documented in our publics docs anyway. If so please merge.
",timanglade,bmunkholm
211,2014-05-01 21:22:13,"@timanglade We cannot merge this yet. If we merge this, we lose support for aggregates. I am currently working on aggregates on a separate PR and will merge this PR in once that is ready. I will mark this as WIP for now.
",fyell,timanglade
211,2014-05-01 21:31:00,"Alright I thought we had agreed that temporarily losing the ability to run aggregates was not a huge issue. I’ll let @bmunkholm confirm when he lands and he’ll decide whether to merge this or keep it as WIP.
",timanglade,bmunkholm
205,2014-04-23 08:09:20,"@bmunkholm I believe the typed interface was also using the method defined in RLMTable. I don't see it at all in the PrivateTableMacros.h.cheetah file.
",fyell,bmunkholm
202,2014-05-05 22:30:27,"@finnschiermer : when can this get merged?
",bmunkholm,finnschiermer
202,2014-06-04 18:20:34,"@finnschiermer : This can be closed now - right?
",bmunkholm,finnschiermer
200,2014-04-21 23:48:17,"@astigsen, properties are ordered based on the order they are defined in
the interface. We are assuming this implementation detail so there is a
risk, but so far this assumption has held up.

On Mon, Apr 21, 2014 at 2:56 PM, astigsen notifications@github.com wrote:

> Could you try to research what the property ordering will be? I would
> assume that it would in the order that they are written in the interface
> definition, as that would be important in many serialization schemes, but I
> guess that there may be no guarantees for that.
> 
> It would be nice to test it a bit and see if that is indeed the case or if
> enumerating the properties returns them in some other order (alphabetical,
> random...).
> 
> It is quite important to us, as there are several semantics that depend on
> ordering (like quick lookups happening on the first column).
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/200#issuecomment-40981776
> .
",alazier,astigsen
198,2014-04-22 20:52:59,"@astigsen This is ready for review

I've left various comments through out the code to indicate that we should implement a true set_row method instead of an update. 
",fyell,astigsen
196,2014-04-22 00:06:31,"@astigsen I can't remember what you're referring to. Could you please elaborate?
",jpsim,astigsen
196,2014-04-22 04:49:46,"The issue @astigsen was referring to was that in a previous version, weak references weren't being held for the table. That's no longer the case. I'll add a unit test for this tomorrow.
",jpsim,astigsen
190,2014-04-17 17:22:39,"Thanks for those clarifications, @alazier. I had a nice chat with @astigsen this morning and it seems that my latest commit is probably the best way to do things using the current objc interface.

Also that once sync-style merge rules are in place, writes will also be implicit and we'll no longer need to update via notifications or to wrap the insert/delete in dispatch calls.
",jpsim,alazier
190,2014-04-17 18:04:30,"@alazier calling `insertRowsAtIndexPaths:` inside the write block won't help in this case because it still calls `numberOfRowsInSection:` which is using the out of date `readContext` to find its `rowCount`.

I agree that the ability to force a transaction commit would be nice, but the cases in which it would be useful would probably be quite few. If you're writing on the main thread, which is the only time transactions are automated at run-loop intervals, odds are you can wait until the next commit before your background transactions are aware of the change.
",jpsim,alazier
189,2014-04-21 01:10:13,"A few comments on @bmunkholm's comments!
1. Since we're replacing this tutorial with #190, I don't think we should worry too much about getting this one perfect. With any luck, it will be replaced in a few days.
2. You've mentioned that `version.m`'s indentation is mostly wrong. What's the ""right"" indentation? This definitely underscores the importance of having an Objective-C styleguide.
",jpsim,bmunkholm
189,2014-04-21 05:34:05,"1. Cool - looking forward to that!
2. 4 spaces - until we have anything in writing, we follow the style of current files.

/Brian

> Den 21/04/2014 kl. 03.10 skrev JP Simard notifications@github.com:
> 
> A few comments on @bmunkholm's comments!
> 
> Since we're replacing this tutorial with #190, I don't think we should worry too much about getting this one perfect. With any luck, it will be replaced in a few days.
> You've mentioned that version.m's indentation is mostly wrong. What's the ""right"" indentation? This definitely underscores the importance of having an Objective-C styleguide.
> —
> Reply to this email directly or view it on GitHub.
",bmunkholm,bmunkholm
189,2014-04-21 06:15:29,"I suggested in Asana using NYTimes style guide (https://github.com/NYTimes/objective-c-style-guide). I feel this style guide best represents a lot of Apple's guidelines. Let me know what you guys think. 

Fiel

> On Apr 20, 2014, at 10:34 PM, bmunkholm notifications@github.com wrote:
> 1. Cool - looking forward to that! 
> 2. 4 spaces - until we have anything in writing, we follow the style of current files. 
> 
> /Brian 
> 
> > Den 21/04/2014 kl. 03.10 skrev JP Simard notifications@github.com: 
> > 
> > A few comments on @bmunkholm's comments! 
> > 
> > Since we're replacing this tutorial with #190, I don't think we should worry too much about getting this one perfect. With any luck, it will be replaced in a few days. 
> > You've mentioned that version.m's indentation is mostly wrong. What's the ""right"" indentation? This definitely underscores the importance of having an Objective-C styleguide. 
> > — 
> > Reply to this email directly or view it on GitHub.
> > —
> > Reply to this email directly or view it on GitHub.
",fyell,bmunkholm
187,2014-04-16 16:33:40,"@bmunkholm will do!
",fyell,bmunkholm
187,2014-04-16 18:41:37,"@astigsen :+1:
",jpsim,astigsen
184,2014-05-01 20:22:11,"@mekjaer I see a lot of TDB prefixes in there, does this need to be redone or just closed outright?
",timanglade,mekjaer
177,2014-04-15 18:44:37,"@bmunkholm I added the unit tests and updated the release notes.
@kneth I can look into re-writing the set_columns method after this pull request.

If no one has anything else to add I will be merging this pull request in a few minutes. 
",fyell,bmunkholm
177,2014-04-16 16:34:24,"@bmunkholm I'll get that added in a different PR
",fyell,bmunkholm
177,2014-04-16 16:56:02,"@bmunkholm Actually, I'm a bit confused as to where I can add this method in the docs. I'm looking under transaction_ref.yaml, and it seems that createTableWithName:asTableClass: is listed under createTableWithName:'s group. Should I add my createTableWithName:columns: under createTableWithName:'s group or should I add another g_group_create_table?
",fyell,bmunkholm
177,2014-04-16 21:38:51,"Depends on how we want the webpage to be. If it should be on a seperate
page or together with the others. I guess in this case it makes sense to
have it at the same page with the other variant?

// Brian

On Wed, Apr 16, 2014 at 6:56 PM, Fiel Guhit notifications@github.comwrote:

> @bmunkholm https://github.com/bmunkholm Actually, I'm a bit confused as
> to where I can add this method in the docs. I'm looking under
> transaction_ref.yaml, and it seems that createTableWithName:asTableClass:
> is listed under createTableWithName:'s group. Should I add my
> createTableWithName:columns: under createTableWithName:'s group or should I
> add another g_group_create_table?
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/177#issuecomment-40623747
> .
",bmunkholm,bmunkholm
171,2014-04-08 14:10:14,"@kneth yes.
",oleks,kneth
171,2014-04-08 17:19:14,"@kspangsege The change is inevitable, but probably postponable. I think SenTestingKit is still available on iOS 7.1, but according to Xcode 5 Release Notes (https://developer.apple.com/library/mac/releasenotes/DeveloperTools/RN-Xcode/Introduction/Introduction.html):

OCUnit and the SenTestingKit framework are deprecated and will be removed from a future release of Xcode. Source code using OCUnit generates warnings while being compiled in Xcode 5.1.

P.S. It is negotiable whether we should really be rolling our own testing framework for iOS - this would break Xcode unit test compatibility, but would make (automatically) profiling apps with Instruments easier.
",oleks,kspangsege
171,2014-04-15 21:38:36,"@kspangsege I committed some new unit tests to master that are still on SenTest. I will change those new tests to use XCTest right now.
",fyell,kspangsege
171,2014-04-15 22:00:16,"Good :-)

On Tue, Apr 15, 2014 at 11:38 PM, Fiel Guhit notifications@github.comwrote:

> @kspangsege https://github.com/kspangsege I committed some new unit
> tests to master that are still on SenTest. I will change those new tests to
> use XCTest right now.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/171#issuecomment-40537821
> .
",kspangsege,kspangsege
171,2014-04-15 22:02:27,"@kspangsege Jenkins is still failing, and we’re not quite sure why. Seems like it’s complaining about dynamic_table.mm, since the request was originally opened. Alex, JP and Fiel are in a meeting for the next ~90 minutes, do you know what is wrong with this PR and whether it’s feasible for us to merge it in today so Fiel can start working on the Realm renames tomorrow?
",timanglade,kspangsege
171,2014-04-15 23:22:49,"I have commented out some tests that were failing for obvious reasons.
Oleks has been notified. Jenkins reports success now.

With respect to renaming TDB -> RLM, if at all possible, make the process a
fast one, and consider splitting the task into several PRs. Both Finn and I
are working on other changes in the Cocoa binding, and we would like to
avoid too many hard conflicts :-)

On Wed, Apr 16, 2014 at 12:02 AM, Tim Anglade notifications@github.comwrote:

> @kspangsege https://github.com/kspangsege Jenkins is still failing, and
> we're not quite sure why. Seems like it's complaining about
> dynamic_table.mm, since the request was originally opened. Alex, JP and
> Fiel are in a meeting for the next ~90 minutes, do you know what is wrong
> with this PR and whether it's feasible for us to merge it in today so Fiel
> can start working on the Realm renames tomorrow?
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/171#issuecomment-40540110
> .
",kspangsege,kspangsege
171,2014-04-16 00:01:16,"@kspangsege I'll be working on the rename today and tomorrow. I'll try to shoot them out in several stable PRs.
",fyell,kspangsege
171,2014-04-16 00:09:29,"Nice :-)

On Wed, Apr 16, 2014 at 2:01 AM, Fiel Guhit notifications@github.comwrote:

> @kspangsege https://github.com/kspangsege I'll be working on the rename
> today and tomorrow. I'll try to shoot them out in several stable PRs.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/171#issuecomment-40549099
> .
",kspangsege,kspangsege
168,2014-04-08 15:23:02,"@kspangsege I believe @bmunkholm was reffering to your example app in the ""Old"" tab. That to make the code comparison fair, you should use readTable:withBlock there. Has noting to do with your implementation in the binding. 
Btw, @kspangsege Please take a look at campfire, we need your input in a different PR
",mekjaer,bmunkholm
168,2014-04-08 15:23:02,"@kspangsege I believe @bmunkholm was reffering to your example app in the ""Old"" tab. That to make the code comparison fair, you should use readTable:withBlock there. Has noting to do with your implementation in the binding. 
Btw, @kspangsege Please take a look at campfire, we need your input in a different PR
",mekjaer,kspangsege
160,2014-04-07 10:39:55,"@bmunkholm I agree. It is better to extend the scope of this PR to include your comments above AND https://app.asana.com/0/861870036984/10984316483943.
",kneth,bmunkholm
150,2014-04-04 08:58:47,"@alazier It's a limitation in the core library. I'm not just if any one is working actively on it at the moment.
",kneth,alazier
139,2014-03-31 13:25:38,"I agree @kneth. I'll add them to the header
",mekjaer,kneth
138,2014-04-09 09:10:07,"@bmunkholm @kneth 
",mekjaer,bmunkholm
134,2014-06-04 18:24:24,"@oleks : Do we need to preserve any of this or is it completely outdated?
",bmunkholm,oleks
132,2014-04-01 13:02:16,"A generic getter and setter already exists in the form of subscripting.

table[0][2] = @""WhateverValue""; - Takes an id
NSString *s = table[0][2]; - return an id, no need for casting.

We will use that in  examples going forward. The old stringInColumnWithIndex etc will be moved to a new set of headers, called something like TightdbFast.h, which can be imported for greater performance

@kneth :+1: 
",mekjaer,kneth
119,2014-04-07 17:44:50,"@emanuelez @pauldardeau @kspangsege What is the status on this one? We are onboarding more and more people and it would be good to get this in soonish, if at all possible.
",timanglade,pauldardeau
119,2014-04-07 17:44:50,"@emanuelez @pauldardeau @kspangsege What is the status on this one? We are onboarding more and more people and it would be good to get this in soonish, if at all possible.
",timanglade,emanuelez
119,2014-04-08 01:08:53,"I'm the hold up on this. I got it all implemented but then saw some very strange and inconsistent results in testing. The problem is that the 'load' method of the new category is not called consistently. It may be best just to add the hooks directly into the ObjC binding instead of doing this runtime grafting with a new category. If there are no objections I can get this put in tomorrow morning.

On Apr 7, 2014, at 12:44 PM, Tim Anglade notifications@github.com wrote:

> @emanuelez @pauldardeau @kspangsege What is the status on this one? We are onboarding more and more people and it would be good to get this in soonish, if at all possible.
> 
> —
> Reply to this email directly or view it on GitHub.
",pauldardeau,pauldardeau
119,2014-04-08 01:08:53,"I'm the hold up on this. I got it all implemented but then saw some very strange and inconsistent results in testing. The problem is that the 'load' method of the new category is not called consistently. It may be best just to add the hooks directly into the ObjC binding instead of doing this runtime grafting with a new category. If there are no objections I can get this put in tomorrow morning.

On Apr 7, 2014, at 12:44 PM, Tim Anglade notifications@github.com wrote:

> @emanuelez @pauldardeau @kspangsege What is the status on this one? We are onboarding more and more people and it would be good to get this in soonish, if at all possible.
> 
> —
> Reply to this email directly or view it on GitHub.
",pauldardeau,emanuelez
119,2014-04-08 16:08:35,"@pauldardeau what are the implications of hooking directly into the binding? Is it just that it will be harder for us to remove it later on?
",timanglade,pauldardeau
119,2014-04-16 21:34:32,"@pauldardeau can you take a look at Brian’s comments and update the PR? https://github.com/Tightdb/tightdb_objc/pull/119#issuecomment-39955601

Strongly agree on the need to document how users would be able to disable this feature.
",timanglade,pauldardeau
119,2014-04-17 01:10:14,"@bmunkholm I will answer your questions both here an in a file (release_note.md or similar).

What's required otherwise in terms of build, setup documentation, download
of examples etc?
The crash reporter 'should' largely be invisible to app developers that make use of TightDB.  With the recent change from linking with libc++.dylib to libstdc++.6.dylib, this removed the requirement of having to explicitly link libstdc++.dylib.  The app should add ""-ObjC"" and ""-all_load"" to ""Other Linker Flags"" in Xcode build settings.  This is because the Apigee code uses categories fairly extensively.

How is crash reporting enabled/disabled?
By default, it's enabled with the changes that I made.  I modified ""TDBContext"" (and will need to do the same with ""TDBSmartContext"") class methods that retrieve the context to initialize the crash reporter.  The code is also surrounded by preprocessor macros that can be easily used to disable all of the crash reporting completely.  TDBContext changes calls into TDBCrashReportingAgentLauncher's ""startCrashReporter"" to do the heavy-lifting of initializing the crash reporter.  This code looks for a key named ""TDBDisableCrashReporting"" as a boolean property.  If this key is found in the app's Info.plist file and has a TRUE value, then it DISABLES the crash reporting (by never initializing it).  Having a value of FALSE, or not having the key at all, will cause the crash reporting to be enabled (as it is by default).

Access to server of logs?
The Apigee app identifiers (similar to credentials) can be found in the top (lines 29 & 30) of TDBCrashReportingAgentLauncher.mm (a new source file).

I would encourage you to go to https://apigee.com/appservices and click on the ""sign up"" (it's free, and they don't spam you too much).  When you sign up, it'll ask you to create an org name (""TightDB"" or ""Realm"") and an app.  In our case, we're not using the SDK in an ""app"", but in a framework, but the name really only has to make sense to you.  You can name the org name and app name whatever you like (Apigee doesn't really care).  Then you can change the hard-coded values in TDBCrashReportingAgentLauncher.mm to match the values that you set up in Apigee's portal.  Once you're set up with Apigee, you use that same url (above) to login to the Apigee portal.  Once inside the Apigee portal, look for the ""MONITORING"" section in the left-hand navigation bar of the portal.  Under that section, you'll see ""App Usage"" (high-level stats about sessions), ""Errors & Crashes"" (this is the part that's relevant for crash reporting!), and ""API Performance"" (network perf stats).

Paul, could you please describe the needed steps to completely integrate
this? (release_note.md update, technote describing this feature?)
I'll add all of this documentation to a file also.

? Can you please provide a test example? And describe how to get and use
the crash-report?
I made some changes to the Stocks demo app, so that it prompts the user whether to force a crash (to test out the crash reporting functionality) when you tap on the ""Chart"" button for a stock.

? How does the crash reporter work (high level)?
The Apigee code makes use of PLCrashReporter.  PLCrashReporter registers itself as an exception handler and gets called (since it registered itself as an exception handler) when a crash is happening. PLCrashReporter quickly and carefully gathers up information about the machine type, OS details, registers, and threads.  It writes all of this data out in a binary format to disk.  NO REPORTING OF THE CRASH HAS OCCURRED AT THIS POINT IN TIME.  The crash report is simply sitting in a file on the device (in the app's sandbox).  When the app is RESTARTED, the Apigee code looks for a crash report.  If it finds one, it reads it (deletes the file), reformats it as an ASCII report and transmits it to the Apigee portal.  After a certain number of minutes (as short as 2, as long as 15 or 20), the email address that was registered on the Apigee portal should receive a system generated email notifying them that a crash occurred (that they received a crash report). You can then go to the Apigee portal and find and view the crash report online.

? How much bigger does it make the lib?
Quite a bit bigger, even though I pared down the Apigee client SDK significantly.  Currently, the Tightdb.framework is 12.5 MB in size.  Adding in the Apigee library (that also contains the PLCrashReporter), the Tightdb.framework grows to 28.8 MB. I wouldn't be too concerned about it because the run-time footprint is pretty small.

? What else should we know?
The Apigee code doesn't even try to initialize PLCrashReporter if the app is running under control of Xcode. Why? Xcode interferes with crash detection.

The crash reports that get uploaded to Apigee are NOT SYMBOLICATED.  In order to symbolicate a crash report, you need to have the corresponding .dSYM that was generated when the app was built (the specific one, not just any one you might have lying around). Some crashes can be meaningfully deciphered even without being symbolicated, and others cannot.
",pauldardeau,bmunkholm
119,2014-04-17 01:30:49,"I answered Brian’s questions/comments in github comments and added the same text to a new README_crash_reporting.txt file.  It’s ready for review.  Please let me know if you have any questions.

Special thanks to JP for finding the source of the linker error!

Regards,
-paul

On Apr 16, 2014, at 4:34 PM, Tim Anglade notifications@github.com wrote:

> @pauldardeau can you take a look at Brian’s comments and update the PR? #119 (comment)
> 
> Strongly agree on the need to document how users would be able to disable this feature.
> 
> —
> Reply to this email directly or view it on GitHub.
",pauldardeau,pauldardeau
119,2014-04-18 07:31:23,"Thanks Paul.
We need to have the user documentation ready as well. Where should what be
written - very specifically?
- update of build flags.
- a usernote somewhere about this 'temporary feature', how they disable it
  and why it's good for them.

We don't want to publish the README you added as it is. It's an internal
note. But maybe we would want a userlevel note about this either in the
distribution or on the web. @Tim, maybe you can help out to figure out
where to put what documentation. I'm afraid users don't like this. We need
to ""sell"" this feature as a help to them.

// Brian

On Thu, Apr 17, 2014 at 3:30 AM, pauldardeau notifications@github.comwrote:

> I answered Brian's questions/comments in github comments and added the
> same text to a new README_crash_reporting.txt file. It's ready for review.
> Please let me know if you have any questions.
> 
> Special thanks to JP for finding the source of the linker error!
> 
> Regards,
> -paul
> 
> On Apr 16, 2014, at 4:34 PM, Tim Anglade notifications@github.com
> wrote:
> 
> > @pauldardeau can you take a look at Brian's comments and update the PR?
> > #119 (comment)
> > 
> > Strongly agree on the need to document how users would be able to
> > disable this feature.
> > 
> > ## 
> > 
> > Reply to this email directly or view it on GitHub.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/119#issuecomment-40671853
> .
",bmunkholm,pauldardeau
119,2014-05-05 17:43:38,"@jpsim @fguhit Can I get a sanity check / design review of this feature from you?
- Is this something you think will tremendously turn off developers?
- Can we have that in even if we go straight to a public launch?
- Does the current implementation impose limits that are likely to be a problem for people building apps?

Thanks
",timanglade,jpsim
113,2014-04-01 14:34:54,"@astigsen I will take it from here and make sure it get's merged, so we can get it in the release tmr
",mekjaer,astigsen
66,2014-03-13 21:29:14,"Guys, as you know, I find the use of the `TDB` prefix as something of an abomination.

On the other hand, I understand that many of you guys like it. Tim has offered the following explanation of his point of view:

> The lack of namespacing in Objective-C clearly sucks, but I’m actually hugely in favor of prefixing with just “TDB”: it’s one of those things that make you look/feel really native to iOS and that is a huge thing we need to accomplish at this point. It’s also the rule of law as far as Apple is concerned. Additionally, it does not matter so much that someone else may be using “TDB”, as this will not create hard collisions in and of itself; we would have a real problem if there were already Objective-C classes called TDBTable (or TDBContext, etc.) in common usage, which summary searches on GitHub and Google indicates is not likely.

I understand this concern, but I would like to offer some additional thoughts that we might want to weigh in:
- Some will be angry with us, because we steel their prefix. Note the aggravated responses in http://cocoadev.com/ChooseYourOwnPrefix.
- Some will see it as anti-collaborative and dogmatic. I would.
- If we explain why we use `Tightdb` rather than an acronym, most developers will understand it, and appreciate it. We could even score extra points. See below for a concrete proposal of such an explanation.
- As long as the decision is appreciated by the experienced segment, other developers will agree.
- The use of acronyms is probably not ""the rule of law"". See for example http://cocoadev.com/ChooseYourOwnPrefix, and note how they explicitly point out that the use of an acronym is **not** mandatory.
- It is hell from a programmer when he is hit by name collisions.
- Look around you, and see how every other popular language out there has understood that name spaces are necessary.

Now, if by any chance I can convince you to stay on `Tightdb`, I propose that we add something like the following to our introductory text:

> Note that the TightDB framework uses `Tightdb` as a prefix for its class names. We understand that it has been customary in Cocoa to use a short capitalized acronym as prefix, but we see this practice as problematic in that it becomes almost impossible for framework vendors not to collide with each other.

@timanglade @astigsen @mekjaer @bmunkholm 
",kspangsege,mekjaer
66,2014-03-14 09:48:03,"I appreciate all the good and valid viewpoints @kspangsege. And you are absolute right that the right theoretical technical solution is to use Tightdb. But just now, I don't think that's what's driving the decision. It's more perception and the desire to blend in. And I think we get fewer ""lifted eyebrowns"" if we go with TDB. And I don't think any ObjC programmer will look down on us for that. So that's what I suggest we do for now and during our closed beta period.

But I'm fine with not closing the discussion here and seek input in our talks with people during the beta period.
",bmunkholm,kspangsege
64,2014-03-13 13:29:35,"I have merged it into #61 and fixed all the names there. Please review the new features by @astigsen as part of your review of #61. 
",kneth,astigsen
63,2014-03-12 16:04:03,"@bmunkholm @kspangsege 
I omitted rename of prefix Tightdb to TDB in this PR to make implementation and review happen in smaller steps.
TDB-prefix rename is on it's way in an upcoming PR
",mekjaer,kspangsege
30,2014-02-25 10:03:35,"otherwise :+1: 
Good job @kspangsege !!
",mekjaer,kspangsege
6,2013-09-26 19:43:37,"@bmunkholm @kspangsege 
I'm pushing the button now, to include my changes in Kristians pre-build.
",jjepsen,bmunkholm
4770,2017-03-24 22:50:34,"Thanks for filing this @0xced. Have you filed a radar about this? If not, I'm happy to file one myself.

@bdash can you confirm that if we do this, we also ought to do it with our `RLMLinkingObjects` too?",jpsim,bdash
4762,2017-03-23 11:20:21,_An empty new issue template was posted. Removed by @istx25._,santhoshs5,istx25
4753,2017-03-21 03:29:07,"## Goals

My database tends to get large enough that committing write transactions on main thread does cause momentary UI freezes/hangs, so all my write transactions are committed on a background queue. Thread Safe References have only made this easier for me, which is great. I was very happy to see the introduction of `commitWriteTransactionWithoutNotifying:error:` method, now I can implement re-ordering of my table views which was messy (at best) to implement previously. But, wait, there is a caveat: `The tokens passed to this method must be for notifications for this specific RLMRealm instance. Notifications for different threads cannot be skipped using this method.`. Which means I must commit my write transaction which modifies the order of the items in the tableView on the main thread? because: if I pass the tableView's backing `RLMResults` to a background queue using a Thread Safe Reference, the  `RLMRealm` instance on the background queue is different from the one on the main/UI thread, so I can not really use this method with my token from the main thread.

## Expected Results

I would like to be able to commit write transaction on a background queue, and skip notification on the main thread.

## Actual Results

`@throw RLMException(@""Incorrect Realm: only notifications for the Realm being modified can be skipped."");`
",kunalsood,throw
4753,2017-03-24 20:20:55,"Hi @kunalsood! Thanks for your issue. I just had a little look into it, and it looks like you may have highlighted a weakness in our API. Realm notification tokens are paired with a specific Realm instance, so they can't be used with different instances pointing to the same Realm backing on background threads. Unfortunately there doesn't seem to be a way to create a thread reference for tokens.

@tgoyne or @austinzheng might be able to shed some additional light on this. It might be worth adding this to our feature list.",TimOliver,austinzheng
4753,2017-03-24 20:20:55,"Hi @kunalsood! Thanks for your issue. I just had a little look into it, and it looks like you may have highlighted a weakness in our API. Realm notification tokens are paired with a specific Realm instance, so they can't be used with different instances pointing to the same Realm backing on background threads. Unfortunately there doesn't seem to be a way to create a thread reference for tokens.

@tgoyne or @austinzheng might be able to shed some additional light on this. It might be worth adding this to our feature list.",TimOliver,tgoyne
4748,2017-03-17 15:46:30,"Thanks for filing this @rscholtes. I was able to reproduce the issue with the project you sent. As far as I understand this, this would be a bug. But I'd like @tgoyne to confirm in case there's something else at play here.",jpsim,tgoyne
4739,2017-03-20 14:46:31,"Hello back @austinzheng, @teotwaki, @istx25 

Can you give me a full example on how to get data?
I am mostly intrigued on how to use this on  given array, when i call the mobile DB for updates. 
(think about updates on a chat room - which can be a very good example on how to move this data async)

Objective-c obviously - might be old-school but i am looking fwd into implementing this

Thanks,
Chris",i-am-chris,teotwaki
4737,2017-03-15 04:10:08,"    @autoreleasepool {
      [RLMRealm defaultRealm];      // workaround, but I don't understand why
    }
",waffleboot,autoreleasepool
4734,2017-03-15 23:01:01,@austinzheng has submitted a PR that addresses the documentation issues you mentioned. They'll be reflected on the website when we next cut a release of Realm Cocoa.,bdash,austinzheng
4731,2017-03-13 10:54:32,"(Note: I noticed this issue when I tried to use **RxSwift** and **RxRealm**. You can see the filed issue [here](https://github.com/RxSwiftCommunity/RxRealm/issues/64). @icanzilb checked it and noticed that 

> the exception raises in the C++ code of the Realm core

)

I have this object:


And I initialize it:
`let road = RoadObject()`

which has this `LinkingObjects` property:

`let roadNumbers = LinkingObjects.init(fromType: RoadNumberObject.self, property: ""territory"")`

I create at my ViewModel this property to get an array with the linking objects:

`let roadNumbers: Variable<[RoadNumberObject]>`

I initialize it (by creating an `Array` from the `LinkingObjects` property):

`self.roadNumbers = Variable(self.road.roadNumbers.toArray())`

And I am trying to bind an `Observer` from the `LinkingObjects` so I can track the changes and access them easily through the `Variable` (I am using the same realm everywhere by the way, and I do not access it in this case from a thread other than the Main one) :



As soon as my ViewModel is initialized it crashes. I back traced the issue and the problem arises when I try to bind. I checked it as an `Observable` (not a `Variable`) and it doesn't crash, but I would like to use the variable for convenience.

The line where it crashes is:

`bool read_only() const { return schema_mode == SchemaMode::ReadOnly; }`

in the `Config` method in the `shared_realm.hpp` file

It doesn't happen though with a `ReplaySubject`, or a `PublishSubject`. Only with a Variable and a BehaviorSubject

It also doesn't happen if I initialize the `Variable` with an empty array (`Variable([])`). It only happens when it is already initialized as `Variable(self.road.roadNumbers.toArray())`

One solution I found is if I initialize the Variable with an empty array and on the subscription I place `.startWith(self.road.roadNumbers.toArray())`",tkallioras,icanzilb
4724,2017-03-09 14:43:36,"@finnschiermer and (mostly) I failed at building a local sync, but can confirm that a clean checkout of realm-cocoa indeed triggers this crash.",danielpovlsen,finnschiermer
4724,2017-03-10 15:40:08,@alebsack confirmed that there were (older) core headers installed on the machine. We need to figure out which job installed them.,radu-tutueanu,alebsack
4714,2017-03-05 14:14:02,"## Goals

I'm a bit of panicking over this since it's a production-level issue we're dealing with at the moment. 

We're using RxRealm that wraps Realm object notifications to perform some change observing for object. I noticed that after creating objects, they randomly ""disappears"", and then noticed that whenever this Observable is being used, not just an object or two are gone, but actually my entire Realm file is randomly being deleted (or is never there to begin with?), and not just the Realm file but also the auxiliary files. 

Trying to create a new Realm object doesn't seem to create a fresh file, as well, at this point.

Discussing with @icanzilb (maintainer of RxRealm), it seems RxRealm is only a wrapper around the Realm notifications so this seems like a Realm issue and not a RxRealm issue.

**Important:** This seems to only happen the first time ever the app runs (when rebooting the app it will create a fresh realm file and continue)

I would truly appreciate your help as I'm not sure anymore what's going on and this is causing serious havoc. 

The observable code in question:
![image](https://cloud.githubusercontent.com/assets/605076/23587893/09609372-0183-11e7-92a0-ac6f38b37f45.png)

## Expected Results

The Realm file(s) should be consistently available but seems to get destroyed randomly by something more lower-level, or even not being created to begin with.

## Actual Results

When using the following code to check for the existence of the files:



If the observing code is there, it outputs: 


If the observing code is replaced with `ongoingOrder = .empty()` (e.g. not there), it outputs:



That is the only difference within the entire app for that situation.

## Steps to Reproduce

1. Delete app completely from simulator 
2. Open app that tries to create a realm / create some objects 
3. Have the observing code in the app (for me its in a Singleton).
4. At some points look for the existence of the realm file or try to fetch objects from the realm, the file doesn't exist and the objects aren't returned

If 3 isn't at hand (no observing code), the Realm file exists as described in the ""Actual Results"" section.

## Code Sample

Described above, also providing the code that creates the Realm.
As you can see it's just storing it in the Application Support folder, making sure it exists before setting it.

![image](https://cloud.githubusercontent.com/assets/605076/23587982/007b2b68-0184-11e7-867b-1ed217c3aebb.png)


## Version of Realm and Tooling

Xcode 8.2.1
RealmSwift 2.4.2
RxRealm 0.5.1 (which seems to depend on RealmSwift 2.2)
iOS Simulator latest
CocoaPods 1.2.0",freak4pc,icanzilb
4696,2017-02-24 21:01:43,"Hi @pplant. Thanks for reporting this. As you've seen, this issue was being tracked in #4590 and @bdash merged a fix for it in #4598. Please ensure you're using the latest version of Realm and if you're still seeing the issue, we can try to reproduce it here and continue with debugging.",istx25,bdash
4695,2017-02-24 08:27:41,"## Goals

Run the project after importing Realm.framework

## Expected Results

The project to build and run successfully.

## Actual Results

The XCode compiler prompts me bash: 

/Users/wangming/Library/Developer/Xcode/DerivedData/TestRealm-agwbcitbddgewybfnhldxljtcuor/Build/Products/Debug-iphonesimulator/TestRealm.app/Frameworks/Realm.framework/strip-frameworks.sh: No such file or directory

## Steps to Reproduce

_No reproduce steps were provided_ ^@istx25.

## Code Sample

_No code sample was provided_ ^@istx25.

## Version of Realm and Tooling

- Realm version: 2.4.3
- Xcode version: 8.3
- iOS/OSX version:  ?
- Dependency manager + version: 
![Uploading EBDBD9BB-90A8-4515-A165-B2D4DA38C908.png…]()",SoKoDaMie,istx25
4692,2017-02-23 23:06:29,"Presumably due to #4633. Thoughts, @tgoyne?",bdash,tgoyne
4688,2017-02-24 21:28:52,@austinzheng: Would you be able to review/merge this in (if possible). Pretty trivial change but not sure if I have merge rights for these types of things. Thanks.,istx25,austinzheng
4687,2017-03-04 05:36:46,"@tgoyne, would you be able to help me look at this next week? I wrote up an object store test that attempts to reproduce the bug ([here](https://gist.github.com/bdash/3e1a52c9a44399826a2a29ad6fe12e3d)), but it correctly triggers the schema change notification and ends up with the in-memory schema reflecting the correct column indexes.",bdash,tgoyne
4684,2017-02-21 13:40:59,"## Goals

What do you want to achieve?

Use Realm in multi-threaded environment

## Actual Results



## Steps to Reproduce

Unknown. Looks like its on app-startup / realm initialization.

## Code Sample

_User did not provide one._ ^@istx25.

## Version of Realm and Tooling

",dsanghan,istx25
4683,2017-02-27 21:28:58,I'll bring this up with @jpsim when he becomes available again.,austinzheng,jpsim
4681,2017-02-22 22:40:48,"I pushed a revised version of this API + code, based on discussions I had with @bigfish24 this morning. Comments would be welcome. (In particular, there is no more blocking anywhere in the design anymore.)",austinzheng,bigfish24
4681,2017-03-02 16:34:57,Any further thoughts on this PR before I move forward with it? @bigfish24 ,austinzheng,bigfish24
4671,2017-03-01 23:32:10,"No problem, I didn't really meant to have write transactions on the main queue.
And I never had any issues, or at least I have never noticed them. But then again this only happens in certain devices in certain conditions. About 10% of the sessions in Crashlytics have this crash. So not even my current code is a 100% reproducible scenario.
I do hope that the work I am doing to isolate writes on a background thread fixes the issue for good.

And thanks @austinzheng for your help in this issue. It feels good to know that you guys @realm always put in a few words for us :)",beloso,realm
4665,2017-02-13 23:29:02,"Make sure `RLMError` is correctly converted to `Realm.Error` and can catch errors using the `catch` clause.

CC @jpsim @austinzheng ",kishikawakatsumi,jpsim
4665,2017-02-13 23:29:02,"Make sure `RLMError` is correctly converted to `Realm.Error` and can catch errors using the `catch` clause.

CC @jpsim @austinzheng ",kishikawakatsumi,austinzheng
4660,2017-02-13 18:17:09,"@sblepa could you please share more information about this crash? Short of a full Xcode project that we can run to trigger the exception, it'd be useful to know what the contents of your notification block is, including the query or object being observed. Thanks.",jpsim,sblepa
4639,2017-02-06 17:34:11,"@istx25 @bdash I'm working on an example project. So far, the most basic version does not reproduce the error. I'm still figuring out how to reproduce my results.",siemensikkema,bdash
4639,2017-02-08 11:48:11,"@istx25 @bdash I finally managed to get to the bottom of the issue. I made [an example project](https://github.com/siemensikkema/realmNotificationBug) to demonstrate it (all relevant code is [here](https://github.com/siemensikkema/realmNotificationBug/blob/master/NotificationBug/Realm.swift)). It turns out the problem occurs when there is a third type of object involved.
In the example I have a Guide that has many Places. A Guide can also have an owner of type User but this is optional. When I set the owner I don't receive update notifications but when I leave the owner set to nil notifications work fine.",siemensikkema,bdash
4626,2017-02-02 19:49:49,"I talked to @bdash about this on Slack, but wanted to solicit more opinions, especially from @tgoyne and @jpsim.

Right now, we (attempt to) dispatch our sync progress notifications onto the same thread upon which they were registered. We do this to conform to the behavior of our Realm, collection, and object notifications. This works great if the user registers their sync progress notifications on the main thread, and falls down if they try to do it on any other thread.

We wanted to revisit this design decision so we can fix the feature and its semantics. First, I think it might be okay for these types of notifications to be dispatched to a thread other than the one the notification was registered on. Our other notifications all deal specifically with changes to thread-confined objects, which is why it's important to user experience that they run on the same thread they were registered on. However, sync progress notifications don't deal directly with any Realm objects. The sync objects they deal with are all thread safe. More importantly, the biggest use case of a sync progress notification block is to update UI.

With this being said, there are at least three options we can take to fix how this feature works:

1. Dispatch notification blocks to the main queue. The advantage is that users can call UIKit methods directly from their notification blocks. The disadvantage is that, given how frequently the notifications are fired, we risk degrading app performance by flooding the main queue.

2. Dispatch notification blocks to a serial queue we create for this purpose. The advantage is that we don't flood the main queue, and we can configure the queue for our needs. The disadvantage is that we need to call out in our documentation that the app is responsible for throttling and dispatching to the main thread to modify UI.

3. Implement object store throttling, and dispatch notification blocks to the main queue. Object store throttling, in the absence of timers, would work by using the C++ time APIs to avoid forwarding any notifications to the binding during a cooldown period. The biggest disadvantage of this method is that the bindings might be stuck with stale date (e.g. if the last notifications come in during cooldown, but after cooldown ends network traffic stops and no more notifications come in).",austinzheng,jpsim
4626,2017-02-02 19:49:49,"I talked to @bdash about this on Slack, but wanted to solicit more opinions, especially from @tgoyne and @jpsim.

Right now, we (attempt to) dispatch our sync progress notifications onto the same thread upon which they were registered. We do this to conform to the behavior of our Realm, collection, and object notifications. This works great if the user registers their sync progress notifications on the main thread, and falls down if they try to do it on any other thread.

We wanted to revisit this design decision so we can fix the feature and its semantics. First, I think it might be okay for these types of notifications to be dispatched to a thread other than the one the notification was registered on. Our other notifications all deal specifically with changes to thread-confined objects, which is why it's important to user experience that they run on the same thread they were registered on. However, sync progress notifications don't deal directly with any Realm objects. The sync objects they deal with are all thread safe. More importantly, the biggest use case of a sync progress notification block is to update UI.

With this being said, there are at least three options we can take to fix how this feature works:

1. Dispatch notification blocks to the main queue. The advantage is that users can call UIKit methods directly from their notification blocks. The disadvantage is that, given how frequently the notifications are fired, we risk degrading app performance by flooding the main queue.

2. Dispatch notification blocks to a serial queue we create for this purpose. The advantage is that we don't flood the main queue, and we can configure the queue for our needs. The disadvantage is that we need to call out in our documentation that the app is responsible for throttling and dispatching to the main thread to modify UI.

3. Implement object store throttling, and dispatch notification blocks to the main queue. Object store throttling, in the absence of timers, would work by using the C++ time APIs to avoid forwarding any notifications to the binding during a cooldown period. The biggest disadvantage of this method is that the bindings might be stuck with stale date (e.g. if the last notifications come in during cooldown, but after cooldown ends network traffic stops and no more notifications come in).",austinzheng,bdash
4626,2017-02-02 19:49:49,"I talked to @bdash about this on Slack, but wanted to solicit more opinions, especially from @tgoyne and @jpsim.

Right now, we (attempt to) dispatch our sync progress notifications onto the same thread upon which they were registered. We do this to conform to the behavior of our Realm, collection, and object notifications. This works great if the user registers their sync progress notifications on the main thread, and falls down if they try to do it on any other thread.

We wanted to revisit this design decision so we can fix the feature and its semantics. First, I think it might be okay for these types of notifications to be dispatched to a thread other than the one the notification was registered on. Our other notifications all deal specifically with changes to thread-confined objects, which is why it's important to user experience that they run on the same thread they were registered on. However, sync progress notifications don't deal directly with any Realm objects. The sync objects they deal with are all thread safe. More importantly, the biggest use case of a sync progress notification block is to update UI.

With this being said, there are at least three options we can take to fix how this feature works:

1. Dispatch notification blocks to the main queue. The advantage is that users can call UIKit methods directly from their notification blocks. The disadvantage is that, given how frequently the notifications are fired, we risk degrading app performance by flooding the main queue.

2. Dispatch notification blocks to a serial queue we create for this purpose. The advantage is that we don't flood the main queue, and we can configure the queue for our needs. The disadvantage is that we need to call out in our documentation that the app is responsible for throttling and dispatching to the main thread to modify UI.

3. Implement object store throttling, and dispatch notification blocks to the main queue. Object store throttling, in the absence of timers, would work by using the C++ time APIs to avoid forwarding any notifications to the binding during a cooldown period. The biggest disadvantage of this method is that the bindings might be stuck with stale date (e.g. if the last notifications come in during cooldown, but after cooldown ends network traffic stops and no more notifications come in).",austinzheng,tgoyne
4619,2017-02-03 03:52:28,I like it. @dhmspector what do you think from demo app perspective? @cmelchior @kristiandupont @jpsim will need other binding input as well.,bigfish24,kristiandupont
4619,2017-02-03 03:52:28,I like it. @dhmspector what do you think from demo app perspective? @cmelchior @kristiandupont @jpsim will need other binding input as well.,bigfish24,jpsim
4619,2017-02-03 03:52:28,I like it. @dhmspector what do you think from demo app perspective? @cmelchior @kristiandupont @jpsim will need other binding input as well.,bigfish24,dhmspector
4619,2017-02-03 03:52:28,I like it. @dhmspector what do you think from demo app perspective? @cmelchior @kristiandupont @jpsim will need other binding input as well.,bigfish24,cmelchior
4615,2017-01-31 16:31:51,"In the 1.0.1 ROS, the server stops sending messages to clients with expired tokens.(default time for that is 10 min).

However, the cocoa binding only sends a refresh token when it wants to send some data. 
That means it will stop receiving data after the access token expires until it will try to send new data.

Currently the server does not send any message to indicate that the client will not be receiving any data.

We will have to revert the fix in the ROS 1.0.1 until the clients can handle it.

cc @austinzheng @jpsim ",radu-tutueanu,austinzheng
4615,2017-01-31 16:31:51,"In the 1.0.1 ROS, the server stops sending messages to clients with expired tokens.(default time for that is 10 min).

However, the cocoa binding only sends a refresh token when it wants to send some data. 
That means it will stop receiving data after the access token expires until it will try to send new data.

Currently the server does not send any message to indicate that the client will not be receiving any data.

We will have to revert the fix in the ROS 1.0.1 until the clients can handle it.

cc @austinzheng @jpsim ",radu-tutueanu,jpsim
4614,2017-01-31 16:27:35,Awesome. Happy to hear you resolved it. Seems this was more of an issue with CocoaPods than Realm so I'll close it but @jpsim can follow-up if he has anything more to add. Cheers! :),istx25,jpsim
4613,2017-01-31 12:16:45,"## Goals

What do you want to achieve?
I have given a property the value of MAX_LONG
That property is the primary key

## Expected Results

What did you expected to happen?
No crashes

## Actual Results
I've received a crash:

What did happened instead?  



`userId` is defined as follows:

`@property (nonatomic, copy, nonnull) NSNumber<RLMInt>* userId;`

## Steps to Reproduce

We've simply sent MAX_LONG on a user ID via the remote server

## Version of Realm and Tooling

Realm version: 2.4.1

Xcode version: 8.2

iOS/OSX version: 10.2

Dependency manager + version: CocoaPods + 1.2.0

More info:

After some research we've found out that:

`2**59 == 576460752303423488` still works.
`2**60 == 1152921504606846976` doesn't work.",beloso,property
4608,2017-02-01 09:38:41,@jpsim could you please help with this? Does Realm/Cartage support this scenario?,stel,jpsim
4601,2017-01-28 22:28:49,"## Explanation

Without knowing, the user was trying to sync objects using an older version of the object server (while they were using the latest version of Realm/Swift. (Modified by @istx25).

## Actual Results

Sync doesn't work. There's a message

> Sync: Bad syntax in input message 'download 1 2 2 2 8070488485324680466 2 0 0 0

in the app's log. Complete log:

> 2017-01-28 23:13:00.008803 TestProject[2865:1268507] Sync: Connection[1]: Session[1]: Starting session for '/var/mobile/Containers/Data/Application/190510CD-A314-41D3-88C1-4FF9628F0ED4/Documents/realm-object-server/c4c5e243ebe4e1bdc1d9542eee6d9b2c/realm%3A%2F%2F192.168.0.11%3A9080%2F%7E%2Ftest'
> 2017-01-28 23:13:00.009093 TestProject[2865:1268507] Sync: Connection[1]: Resolving '192.168.0.11:9080'
> 2017-01-28 23:13:00.010963 TestProject[2865:1268507] Sync: Connection[1]: Connecting to endpoint '192.168.0.11:9080' (1/1)
> 2017-01-28 23:13:00.015017 TestProject[2865:1268507] Sync: Connection[1]: Connected to endpoint '192.168.0.11:9080' (from '192.168.0.13:54220')
> 2017-01-28 23:13:00.021734 TestProject[2865:1268507] Sync: Connection[1]: Session[1]: Sending: BIND(server_path='/c4c5e243ebe4e1bdc1d9542eee6d9b2c/test', signed_user_token_size=621, need_file_ident_pair=1)
> 2017-01-28 23:13:00.040850 TestProject[2865:1268507] Sync: Connection[1]: Session[1]: Received: ALLOC(server_file_ident=7420913103191721957, client_file_ident=1, client_file_ident_secret=8459691314699173015)
> 2017-01-28 23:13:00.044016 TestProject[2865:1268507] Sync: Connection[1]: Session[1]: Sending: IDENT(server_file_ident=7420913103191721957, client_file_ident=1, client_file_ident_secret=8459691314699173015, scan_server_version=0, scan_client_version=0, latest_server_version=0, latest_server_session_ident=0)
> 2017-01-28 23:13:00.057166 TestProject[2865:1268507] Sync: Bad syntax in input message 'download 1 2 2 2 8070488485324680466 2 0 0 0
> '
> 2017-01-28 23:13:00.057427 TestProject[2865:1268507] Sync: Connection[1]: Connection closed due to error
> 2017-01-28 23:13:00.057939 TestProject[2865:1268507] Sync: Closing Realm file: /var/mobile/Containers/Data/Application/190510CD-A314-41D3-88C1-4FF9628F0ED4/Documents/realm-object-server/c4c5e243ebe4e1bdc1d9542eee6d9b2c/realm%3A%2F%2F192.168.0.11%3A9080%2F%7E%2Ftest

After I re-started the device and logged in again, I got the same error but with some numbers incremented:

> 2017-01-28 23:22:14.937873 TestProject[2868:1269571] Sync: Bad syntax in input message 'download 1 3 3 3 8070488485324680466 3 0 0 0

More restarts continue showing the same message / numbers.

The server log doesn't display any errors:

> 2017-01-28T22:12:59.551Z - info: sync-server: Connection[4]: Connection from 127.0.0.1:52236
> 2017-01-28T22:12:59.555Z - info: sync-server: Connection[4]: Session[1]: Session initiated (session_ident=1).
> 2017-01-28T22:12:59.555Z - info: sync-server: Connection[4]: Session[1]: Received: BIND(server_path=/c4c5e243ebe4e1bdc1d9542eee6d9b2c/test, signed_user_token='...jEg25vGcZCnQhIllwiV5i8uO141A==', need_file_ident_pair=1)
> 2017-01-28T22:12:59.570Z - info: sync-server: Connection[4]: Session[1]: Sending: ALLOC(server_file_ident=7420913103191721957, client_file_ident=1, client_file_ident_secret=8459691314699173015)
> 2017-01-28T22:12:59.577Z - info: sync-server: Connection[4]: Session[1]: Received: IDENT(server_file_ident=7420913103191721957, client_file_ident=1, client_file_ident_secret=8459691314699173015, scan_server_version=0, scan_client_version=0, latest_server_version=0, latest_server_session_ident=0)
> 2017-01-28T22:12:59.591Z - info: sync-server: Connection[4]: Session[1]: Session terminated (session_ident=1).
> 2017-01-28T22:12:59.592Z - info: sync-server: Connection[4]: Connection closed by client: End of input

## Steps to Reproduce

It's happening during a call of `SyncUser.logIn(with: credentials)` with a device, after upgrading Realm. Happens with new installation as well as with already installed app. It's a bit difficult to extract the code but I can do this if the error message isn't informative enough.

## Version of Realm and Tooling

",i-schuetz,istx25
4592,2017-02-03 17:24:04,Bringing attention back to this issue. cc/ @jpsim @bdash ,istx25,jpsim
4592,2017-02-03 17:24:04,Bringing attention back to this issue. cc/ @jpsim @bdash ,istx25,bdash
4590,2017-01-26 19:56:38,I think it would be worth it to advice developers in your documentation that due to the complexity of how Realm manages versions of data you will end up doing lots of `invalidate`'s and `refresh`'es all over the place. Not to mention wrapping every single access to a realm in an `@autoreleasepool` block.,samacs,autoreleasepool
4590,2017-01-26 21:29:46,Is there any example out there showing how this can be avoided? @raja-baz @istx25 @jpsim ,samacs,jpsim
4585,2017-03-27 17:04:57,"Seen again in [this run](https://ci.realm.io/job/objc_pr/configuration=Debug,target=osx,xcode_version=8.0/4901/testReport/(root)/SchemaTests/testMultipleProcessesTryingToInitializeSchema/). @tgoyne would you object to disabling this test in debug configurations?",jpsim,tgoyne
4580,2017-01-24 11:42:31,"Network client handles some sync-related (e.g. authentication) errors that should be reported by SyncManager directly.

Note that currently ROS never reports `RLMSyncAuthErrorUserAlreadyExists`, `RLMSyncAuthErrorUserDoesNotExist` codes and I'm not sure if that's changed. So probably this codes should be removed and `InvalidCredentials` could be moved to `RLMSyncError` enum.

@austinzheng, @jpsim let me know what you think.",stel,austinzheng
4580,2017-01-24 11:42:31,"Network client handles some sync-related (e.g. authentication) errors that should be reported by SyncManager directly.

Note that currently ROS never reports `RLMSyncAuthErrorUserAlreadyExists`, `RLMSyncAuthErrorUserDoesNotExist` codes and I'm not sure if that's changed. So probably this codes should be removed and `InvalidCredentials` could be moved to `RLMSyncError` enum.

@austinzheng, @jpsim let me know what you think.",stel,jpsim
4580,2017-02-16 12:47:11,"It doesn't look like ""user already exists"" can be reported in any cases at all anymore (@mrackwitz please correct me if I'm wrong) while ""user doesn't exists"" can be reported when working with permissions, so it's not really a ""SyncDomain"" error.

I think if nothing is planned to be changed back on a server-side we should deprecate `RLMSyncAuthErrorUserAlreadyExists` and `RLMSyncAuthErrorUserDoesNotExist`.",stel,mrackwitz
4579,2017-01-24 21:13:54,"According to http://www.dictionary.com/browse/transferrable and some other dictionary sites, `transferrable` and `transferable` are both acceptable spellings (hooray English orthography), so I'll let @jpsim decide whether he wants to act on the spelling.

I'll submit a PR to fix the typo, thanks for pointing it out.",austinzheng,jpsim
4576,2017-01-25 21:48:36,@tgoyne is right: the state stuff is unnecessary. I've changed the code a bit to reflect that.,austinzheng,tgoyne
4570,2017-01-23 19:40:49,"@bigfish24 wants this merged soon, so any final reviews would be appreciated.",austinzheng,bigfish24
4568,2017-01-20 20:50:04,"@molind try to split copying to separate transactions.

You get this exception because Realm has a limitation for holding data in properties (16 MB) and your sync changeset exceeds this limit. @morten-krogh please correct me if I'm wrong. ",stel,morten-krogh
4565,2017-01-24 23:30:30,"Thanks for the suggestions to improve our docs @SlashDevSlashGnoll! Maybe @chipotle would be interested in making these clarifications?

By the way, I hope you don't mind I modified this ticket to track making these docs improvements rather than creating a new issue in order to preserve the conversation.",jpsim,chipotle
4563,2017-01-19 14:07:37,"Hey, it's been a while here! 👋 

This exposes the server-side API (which wasn't publicly launched yet 🤐) in the client by defining the model and convenience methods.

* [x] Expose models
* [x] Convenience getters to access permission-Realm on `*SyncUser`
* [x] Changelog entry
* [x] Tests

Along the way:
* Removes a superfluous forward declaration
* Refers consistently to the ""Management Realm""

/c @jpsim @kishikawakatsumi @teotwaki ",mrackwitz,jpsim
4563,2017-01-19 14:07:37,"Hey, it's been a while here! 👋 

This exposes the server-side API (which wasn't publicly launched yet 🤐) in the client by defining the model and convenience methods.

* [x] Expose models
* [x] Convenience getters to access permission-Realm on `*SyncUser`
* [x] Changelog entry
* [x] Tests

Along the way:
* Removes a superfluous forward declaration
* Refers consistently to the ""Management Realm""

/c @jpsim @kishikawakatsumi @teotwaki ",mrackwitz,kishikawakatsumi
4563,2017-01-19 14:07:37,"Hey, it's been a while here! 👋 

This exposes the server-side API (which wasn't publicly launched yet 🤐) in the client by defining the model and convenience methods.

* [x] Expose models
* [x] Convenience getters to access permission-Realm on `*SyncUser`
* [x] Changelog entry
* [x] Tests

Along the way:
* Removes a superfluous forward declaration
* Refers consistently to the ""Management Realm""

/c @jpsim @kishikawakatsumi @teotwaki ",mrackwitz,teotwaki
4563,2017-03-02 18:09:46,@bmunkholm any update on this?,ianpward,bmunkholm
4559,2017-01-18 21:08:53,FYI @larkost ,jpsim,larkost
4558,2017-01-18 08:56:50,"## Goals

Change object.

## Expected Results

Object is changed and notification is called.

## Actual Results

Only object is changed. But notification is not called, because it was disabled during previous commit transaction.

## Steps to Reproduce

1. Commit one transaction without notifying all notification tokens.
2. Commit second transaction, that should notify everyone. 

## Code Sample


@end

## Version of Realm and Tooling

Realm version: 2.1.2 and 2.2.0

Xcode version: 8.2.1

iOS/OSX version: 10.2

Dependency manager + version: Static framework is added manually
",molind,end
4556,2017-01-17 21:36:51,"There was a discussion about checking `realm.isInWriteTransaction` before making a write transaction while in a notification block. See #4511 for more information. Created this issue to track the progress on possibly adding a note to the documentation about this.

>@evgeny-sureev: It must be stated in documentation that notifications may come inside write transaction and it is user's responsibility to check realm.isInWriteTransaction before attempting write.",istx25,evgeny-sureev
4552,2017-01-17 09:11:32,"Thank you for reporting this issue @tzm41, but unfortunately without any reproducible case it's very hard to figure it out what is going on there and suggest anything.

Please let us know if you're able to reproduce it or if you have any other details about this crash.

/cc @finnschiermer ",stel,finnschiermer
4551,2017-01-16 14:26:55,"@donie-inhance could you please provide the whole code sample that is executed on each thread? I guess `restoreAsset` is a Realm object, how do you create or get it?

/cc @bdash, @tgoyne ",stel,bdash
4551,2017-01-16 14:26:55,"@donie-inhance could you please provide the whole code sample that is executed on each thread? I guess `restoreAsset` is a Realm object, how do you create or get it?

/cc @bdash, @tgoyne ",stel,tgoyne
4549,2017-01-14 02:12:23,"Upgrading from sync beta-6.5 to beta-7.2 and the latest object store breaks a whole bunch of our Cocoa tests. I believe all the failing tests have to do with KVO. See https://github.com/realm/realm-cocoa/pull/4548 for the PR that attempts to upgrade the dependencies.

@bdash @jpsim @tgoyne 

This blocks https://github.com/realm/realm-cocoa/pull/4535, and possibly other tickets.

Example test failure: `testCancelWriteWithArrayChanges`. Backtrace:
",austinzheng,jpsim
4549,2017-01-14 02:12:23,"Upgrading from sync beta-6.5 to beta-7.2 and the latest object store breaks a whole bunch of our Cocoa tests. I believe all the failing tests have to do with KVO. See https://github.com/realm/realm-cocoa/pull/4548 for the PR that attempts to upgrade the dependencies.

@bdash @jpsim @tgoyne 

This blocks https://github.com/realm/realm-cocoa/pull/4535, and possibly other tickets.

Example test failure: `testCancelWriteWithArrayChanges`. Backtrace:
",austinzheng,bdash
4549,2017-01-14 02:12:23,"Upgrading from sync beta-6.5 to beta-7.2 and the latest object store breaks a whole bunch of our Cocoa tests. I believe all the failing tests have to do with KVO. See https://github.com/realm/realm-cocoa/pull/4548 for the PR that attempts to upgrade the dependencies.

@bdash @jpsim @tgoyne 

This blocks https://github.com/realm/realm-cocoa/pull/4535, and possibly other tickets.

Example test failure: `testCancelWriteWithArrayChanges`. Backtrace:
",austinzheng,tgoyne
4548,2017-01-17 20:57:57,Merging per conversation with @bdash. The test failures are CI issues or known problems.,austinzheng,bdash
4546,2017-01-13 21:04:13,"Custom pattern matching operator for `RealmSwift.Error` seems not working.
The following code doesn't work as expected:



It always enter `catch {` instead `} catch RealmSwift.Error.IncompatibleLockFile {` 

CC @jpsim @austinzheng ",kishikawakatsumi,jpsim
4546,2017-01-13 21:04:13,"Custom pattern matching operator for `RealmSwift.Error` seems not working.
The following code doesn't work as expected:



It always enter `catch {` instead `} catch RealmSwift.Error.IncompatibleLockFile {` 

CC @jpsim @austinzheng ",kishikawakatsumi,austinzheng
4545,2017-01-13 20:36:31,"Fix an issue that crashing by failing to cast `RLMError.Code` when bridging `RLMError` to `Realm.Error`

Currently, the following code crashes 



with the error below.


CC @jpsim @austinzheng ",kishikawakatsumi,jpsim
4545,2017-01-13 20:36:31,"Fix an issue that crashing by failing to cast `RLMError.Code` when bridging `RLMError` to `Realm.Error`

Currently, the following code crashes 



with the error below.


CC @jpsim @austinzheng ",kishikawakatsumi,austinzheng
4535,2017-01-13 02:32:05,"@bdash, if you could take a look at my usage of the `CFRunLoop` APIs I would appreciate it. I had a bit of trouble getting the two sync notifier tests to work properly, so I might have been doing something incorrectly.",austinzheng,bdash
4528,2017-01-10 23:17:17,"See the comment at https://github.com/realm/realm-cocoa/pull/4478#issuecomment-271723479. This occurs after rebasing onto the commit https://github.com/realm/realm-cocoa/pull/4365.

Will affect https://github.com/realm/product/issues/168 and https://github.com/realm/product/issues/40 (although there are other issues blocking those tickets too).

cc @jpsim ",austinzheng,jpsim
4527,2017-01-10 23:05:44,"Caught on iPhone 5 with iOS 8.1.3 (CI device tests): https://ci.realm.io/job/objc_pr/4549/configuration=Release,swift_version=3.0.2,target=ios-device-objc/console

/cc @bdash 

",jpsim,bdash
4514,2017-01-06 08:04:44,"According to [cheatsheet](https://realm.io/docs/swift/latest/#cheatsheet), I'm supposed to use `NSDate` (and `NSData` too). Can I instead use the Foundation structs from Swift 3, `Date` (and `Data`), or not?

Examples:

    dynamic var valueA = Date()
    dynamic var valueB: Date? = nil

Any best practice on the matter?

ps: on a different subject, [this PR](https://github.com/apple/swift-evolution/pull/577), if accepted in the future, will cause `dynamic` to no longer infer `@objc` in Swift4.",Coeur,objc
4504,2017-01-03 23:04:15,"We still see a lot of people running into problems with users pinning Realms when using them on background threads, with a bloating of the file size as result.

Wo mention in the documentation that they should call `refresh()` regularly to avoid pinning, but that still leaves a risk of having Realm objects hanging around not being refreshed while the thread is blocked doing work or just inactive.

We should improve the docs to show examples of more robust ways to deal with realms on background threads, whether that is by recommending the use of explicit runloops or patterns for closing the realm when not in active use.

@andkon",astigsen,andkon
4502,2017-01-03 19:25:19,"See this twitter thread: https://twitter.com/andreipetre/status/812379854012293120

and this GitHub repo demonstrating a repro case: https://github.com/andreipetre/sample-mac-app-extension

I haven't validated this yet.

/cc @andreipetre",jpsim,andreipetre
4502,2017-01-03 19:53:56,"The error messages in andreipetre/sample-mac-app-extension#1 look like they're networking related (perhaps a failure to submit analytics?). @andreipetre, are you seeing any problems besides the error messages in the output?",bdash,andreipetre
4500,2017-01-11 04:17:42,"No, @realm-ci did its job by removing the ""waiting for user"" since you replied, so this ticket is no longer waiting for you...

To add more to what @bdash was saying, Realm doesn't expect the unexpected in all ways... in other words, often times when a Realm file has been corrupted (which by the way can happen by no fault of Realm itself), what identifies this corruption isn't a global check for corruption, but rather a failed assertion, leading to immediate process termination, which is unrecoverable.

Ideally, Realm would have no bugs whatsoever, files would never get corrupted and all potential failures would be gracefully recoverable. Unfortunately this isn't possible without incurring an impractical amount of overhead.",jpsim,realm-ci
4497,2016-12-29 10:21:13,"I have integrated realm cocoa using carthage dependency tool. Here is the configuration that i have used,

Xcode : 8.2.1
Carthage File : github ""realm/realm-cocoa"" ~> 2.1.2
OS X : 10.11.5

I have tried different version of realm cocoa but ""Bad Version Number"" exception occurs in each version of realm cocoa.

Here i have mentioned stack trace which i got during this exception:

warning: could not load any Objective-C class information. This will significantly reduce the quality of type information available.
  thread #1: tid = 0x545ed, 0x015de212 Realm`-[RLMRealm beginWriteTransaction](self=<unavailable>, _cmd=<unavailable>) + 94 at RLMRealm.mm:435, queue = 'com.apple.main-thread'
    frame #0: 0x015de212 Realm`-[RLMRealm beginWriteTransaction](self=<unavailable>, _cmd=<unavailable>) + 94 at RLMRealm.mm:435 [opt]
    frame #1: 0x0062ee54 RealmSwift`RealmSwift.Realm.write (() throws -> ()) throws -> () + 52 at Realm.swift:808
    frame #2: 0x00114630 Sumondo`Sync.(type=Session, items=1 value, self=0x18841900)(Type, items : [Uploadable]) -> () + 152 at Sync.swift:344
    frame #3: 0x0010c668 Sumondo`Sync.(response=Alamofire.Response<AnyObject, Foundation.NSError> @ 0x005dab04, self=0x18841900, type=Session, items=1 value)(Type, items : [Uploadable]) -> ()).(closure #1) + 276 at Sync.swift:160
    frame #4: 0x008289f4 Alamofire`partial apply forwarder for reabstraction thunk helper from @callee_owned (@owned Alamofire.Response<__ObjC.NSData, __ObjC.NSError>) -> (@unowned ()) to @callee_owned (@in Alamofire.Response<__ObjC.NSData, __ObjC.NSError>) -> (@unowned ()) + 152 at ResponseSerialization.swift:0
    frame #5: 0x008284cc Alamofire`generic specialization <Alamofire.ResponseSerializer<Swift.AnyObject, __ObjC.NSError> with Alamofire.ResponseSerializer<Swift.AnyObject, __ObjC.NSError> : Alamofire.ResponseSerializerType in Alamofire, __ObjC.NSError with __ObjC.NSError : Swift.ErrorType in Foundation, Swift.AnyObject> of Alamofire.Request.(response <A where A: Alamofire.ResponseSerializerType> (queue : Swift.Optional<__ObjC.OS_dispatch_queue>, responseSerializer : A, completionHandler : (Alamofire.Response<A.SerializedObject, A.ErrorObject>) -> ()) -> Self).(closure #1).(closure #1) + 192 at ResponseSerialization.swift:142
    frame #6: 0x02f0db7e libdispatch.dylib`_dispatch_call_block_and_release + 10
    frame #7: 0x02f0db6a libdispatch.dylib`_dispatch_client_callout + 22
    frame #8: 0x02f12654 libdispatch.dylib`_dispatch_main_queue_callback_4CF + 1680
    frame #9: 0x22ac9b6c CoreFoundation`__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 8
    frame #10: 0x22ac8066 CoreFoundation`__CFRunLoopRun + 1574
    frame #11: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #12: 0x22a17014 CoreFoundation`CFRunLoopRunInMode + 108
    frame #13: 0x24007ac8 GraphicsServices`GSEventRunModal + 160
    frame #14: 0x270eb188 UIKit`UIApplicationMain + 144
    frame #15: 0x000ea5d8 Sumondo`main + 172 at AppDelegate.swift:18
    frame #16: 0x226bf872 libdyld.dylib`start + 2

  thread #4: tid = 0x54611, 0x227942f8 libsystem_kernel.dylib`kevent_qos + 24, queue = 'com.apple.libdispatch-manager'
    frame #0: 0x227942f8 libsystem_kernel.dylib`kevent_qos + 24
    frame #1: 0x02f1e470 libdispatch.dylib`_dispatch_mgr_invoke + 256
    frame #2: 0x02f0f83e libdispatch.dylib`_dispatch_mgr_thread + 38

* thread #7: tid = 0x5463f, 0x22294584 libc++abi.dylib`__cxa_throw, name = 'RLMRealm notification listener'
    frame #0: 0x22294584 libc++abi.dylib`__cxa_throw
  * frame #1: 0x0160bcfe Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(realm::SharedGroup&, (anonymous namespace)::TransactLogValidator&&, realm::VersionID) [inlined] void realm::SharedGroup::advance_read<(anonymous namespace)::TransactLogValidator>(this=<unavailable>)::TransactLogValidator*, realm::VersionID) + 260 at group_shared.hpp:915 [opt]
    frame #2: 0x0160bc5c Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(realm::SharedGroup&, (anonymous namespace)::TransactLogValidator&&, realm::VersionID) [inlined] void realm::_impl::SharedGroupFriend::advance_read<(anonymous namespace)::TransactLogValidator>(sg=<unavailable>)::TransactLogValidator*, realm::VersionID) at group_shared.hpp:1086 [opt]
    frame #3: 0x0160bc5c Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(sg=<unavailable>, observer=<unavailable>, version=<unavailable>)::TransactLogValidator&&, realm::VersionID) + 98 at lang_bind_helper.hpp:335 [opt]
    frame #4: 0x01607964 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] auto realm::_impl::transaction::advance(args=<unavailable>)::$_0::operator()<(anonymous namespace)::TransactLogValidator>((anonymous namespace)::TransactLogValidator&&) const + 308 at transact_log_handler.cpp:823 [opt]
    frame #5: 0x01607952 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] (anonymous namespace)::TransactLogObserver::TransactLogObserver<realm::_impl::transaction::advance(this=<unavailable>, context=<unavailable>, sg=<unavailable>, notifiers=<unavailable>)::$_0>(realm::BindingContext*, realm::SharedGroup&, realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID)::$_0&&, realm::util::Optional<realm::SchemaMode>, realm::_impl::NotifierPackage&) + 190 at transact_log_handler.cpp:274 [opt]
    frame #6: 0x01607894 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] (anonymous namespace)::TransactLogObserver::TransactLogObserver<realm::_impl::transaction::advance(context=<unavailable>, sg=<unavailable>, notifiers=<unavailable>)::$_0>(realm::BindingContext*, realm::SharedGroup&, realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID)::$_0&&, realm::util::Optional<realm::SchemaMode>, realm::_impl::NotifierPackage&) at transact_log_handler.cpp:262 [opt]
    frame #7: 0x01607894 Realm`realm::_impl::transaction::advance(sg=<unavailable>, context=<unavailable>, schema_mode=<unavailable>, version=<unavailable>) + 100 at transact_log_handler.cpp:822 [opt]
    frame #8: 0x01542588 Realm`(anonymous namespace)::IncrementalChangeInfo::advance_to_final(this=<unavailable>, version=<unavailable>) + 880 at realm_coordinator.cpp:468 [opt]
    frame #9: 0x01541c0a Realm`realm::_impl::RealmCoordinator::run_async_notifiers(this=<unavailable>) + 1182 at realm_coordinator.cpp:587 [opt]
    frame #10: 0x015416c2 Realm`realm::_impl::RealmCoordinator::on_change(this=0x17644d30) + 34 at realm_coordinator.cpp:410 [opt]
    frame #11: 0x0152da3e Realm`realm::_impl::ExternalCommitHelper::listen(this=<unavailable>) + 168 at external_commit_helper.cpp:217 [opt]
    frame #12: 0x0152e1a2 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0::operator()() const + 82 at external_commit_helper.cpp:159 [opt]
    frame #13: 0x0152e178 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] std::__1::__invoke<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>(decltype(std::__1::forward<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>(fp)(std::__1::forward<>(fp0))), realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0&&) + 32 at __functional_base:416 [opt]
    frame #14: 0x0152e158 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] _ZNSt3__112__async_funcIZN5realm5_impl20ExternalCommitHelperC1ERNS2_16RealmCoordinatorEE3$_0JEE9__executeIJEEEvNS_15__tuple_indicesIJXspT_EEEE(this=<unavailable>) at future:2348 [opt]
    frame #15: 0x0152e158 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator(this=<unavailable>)() + 8 at future:2341 [opt]
    frame #16: 0x0152e0ba Realm`std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::__execute(this=<unavailable>) + 86 at future:1031 [opt]
    frame #17: 0x0152e348 Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(void*, void*) [inlined] std::__1::__invoke<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*, void>(decltype(*(std::__1::forward<std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*>(fp0)).*fp(std::__1::forward<>(fp1))), void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*&&)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*&&) + 144 at __functional_base:383 [opt]
    frame #18: 0x0152e32c Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(void*, void*) [inlined] _ZNSt3__116__thread_executeIMNS_19__async_assoc_stateIvNS_12__async_funcIZN5realm5_impl20ExternalCommitHelperC1ERNS4_16RealmCoordinatorEE3$_0JEEEEEFvvEJPSA_EJLm1EEEEvRNS_5tupleIJT_DpT0_EEENS_15__tuple_indicesIJXspT1_EEEE at thread:347 [opt]
    frame #19: 0x0152e32c Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(__vp=<unavailable>) + 116 at thread:357 [opt]
    frame #20: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #21: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #22: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #8: tid = 0x54640, 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20, name = 'com.apple.NSURLConnectionLoader'
    frame #0: 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20
    frame #1: 0x2277e6d4 libsystem_kernel.dylib`mach_msg + 40
    frame #2: 0x22ac9ac4 CoreFoundation`__CFRunLoopServiceMachPort + 136
    frame #3: 0x22ac7e4c CoreFoundation`__CFRunLoopRun + 1036
    frame #4: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #5: 0x22a17014 CoreFoundation`CFRunLoopRunInMode + 108
    frame #6: 0x230689f6 CFNetwork`+[NSURLConnection(Loader) _resourceLoadLoop:] + 486
    frame #7: 0x233314a4 Foundation`__NSThread__start__ + 1148
    frame #8: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #9: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #10: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #9: tid = 0x54643, 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20, name = 'com.apple.CoreMotion.MotionThread'
    frame #0: 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20
    frame #1: 0x2277e6d4 libsystem_kernel.dylib`mach_msg + 40
    frame #2: 0x22ac9ac4 CoreFoundation`__CFRunLoopServiceMachPort + 136
    frame #3: 0x22ac7e4c CoreFoundation`__CFRunLoopRun + 1036
    frame #4: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #5: 0x22a57dd2 CoreFoundation`CFRunLoopRun + 98
    frame #6: 0x27d1ddb8 CoreMotion`___lldb_unnamed_function2162$$CoreMotion + 940
    frame #7: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #8: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #9: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #10: tid = 0x54648, 0x22792eec libsystem_kernel.dylib`__select + 20, name = 'com.apple.CFSocket.private'
    frame #0: 0x22792eec libsystem_kernel.dylib`__select + 20
    frame #1: 0x22acef12 CoreFoundation`__CFSocketManager + 566
    frame #2: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #3: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #4: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #11: tid = 0x54679, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8

  thread #12: tid = 0x546d0, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8

  thread #13: tid = 0x546d1, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8
Warning: hit breakpoint while running function, skipping commands and conditions to prevent recursion.",kirtiparghi,unowned
4497,2016-12-29 10:21:13,"I have integrated realm cocoa using carthage dependency tool. Here is the configuration that i have used,

Xcode : 8.2.1
Carthage File : github ""realm/realm-cocoa"" ~> 2.1.2
OS X : 10.11.5

I have tried different version of realm cocoa but ""Bad Version Number"" exception occurs in each version of realm cocoa.

Here i have mentioned stack trace which i got during this exception:

warning: could not load any Objective-C class information. This will significantly reduce the quality of type information available.
  thread #1: tid = 0x545ed, 0x015de212 Realm`-[RLMRealm beginWriteTransaction](self=<unavailable>, _cmd=<unavailable>) + 94 at RLMRealm.mm:435, queue = 'com.apple.main-thread'
    frame #0: 0x015de212 Realm`-[RLMRealm beginWriteTransaction](self=<unavailable>, _cmd=<unavailable>) + 94 at RLMRealm.mm:435 [opt]
    frame #1: 0x0062ee54 RealmSwift`RealmSwift.Realm.write (() throws -> ()) throws -> () + 52 at Realm.swift:808
    frame #2: 0x00114630 Sumondo`Sync.(type=Session, items=1 value, self=0x18841900)(Type, items : [Uploadable]) -> () + 152 at Sync.swift:344
    frame #3: 0x0010c668 Sumondo`Sync.(response=Alamofire.Response<AnyObject, Foundation.NSError> @ 0x005dab04, self=0x18841900, type=Session, items=1 value)(Type, items : [Uploadable]) -> ()).(closure #1) + 276 at Sync.swift:160
    frame #4: 0x008289f4 Alamofire`partial apply forwarder for reabstraction thunk helper from @callee_owned (@owned Alamofire.Response<__ObjC.NSData, __ObjC.NSError>) -> (@unowned ()) to @callee_owned (@in Alamofire.Response<__ObjC.NSData, __ObjC.NSError>) -> (@unowned ()) + 152 at ResponseSerialization.swift:0
    frame #5: 0x008284cc Alamofire`generic specialization <Alamofire.ResponseSerializer<Swift.AnyObject, __ObjC.NSError> with Alamofire.ResponseSerializer<Swift.AnyObject, __ObjC.NSError> : Alamofire.ResponseSerializerType in Alamofire, __ObjC.NSError with __ObjC.NSError : Swift.ErrorType in Foundation, Swift.AnyObject> of Alamofire.Request.(response <A where A: Alamofire.ResponseSerializerType> (queue : Swift.Optional<__ObjC.OS_dispatch_queue>, responseSerializer : A, completionHandler : (Alamofire.Response<A.SerializedObject, A.ErrorObject>) -> ()) -> Self).(closure #1).(closure #1) + 192 at ResponseSerialization.swift:142
    frame #6: 0x02f0db7e libdispatch.dylib`_dispatch_call_block_and_release + 10
    frame #7: 0x02f0db6a libdispatch.dylib`_dispatch_client_callout + 22
    frame #8: 0x02f12654 libdispatch.dylib`_dispatch_main_queue_callback_4CF + 1680
    frame #9: 0x22ac9b6c CoreFoundation`__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 8
    frame #10: 0x22ac8066 CoreFoundation`__CFRunLoopRun + 1574
    frame #11: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #12: 0x22a17014 CoreFoundation`CFRunLoopRunInMode + 108
    frame #13: 0x24007ac8 GraphicsServices`GSEventRunModal + 160
    frame #14: 0x270eb188 UIKit`UIApplicationMain + 144
    frame #15: 0x000ea5d8 Sumondo`main + 172 at AppDelegate.swift:18
    frame #16: 0x226bf872 libdyld.dylib`start + 2

  thread #4: tid = 0x54611, 0x227942f8 libsystem_kernel.dylib`kevent_qos + 24, queue = 'com.apple.libdispatch-manager'
    frame #0: 0x227942f8 libsystem_kernel.dylib`kevent_qos + 24
    frame #1: 0x02f1e470 libdispatch.dylib`_dispatch_mgr_invoke + 256
    frame #2: 0x02f0f83e libdispatch.dylib`_dispatch_mgr_thread + 38

* thread #7: tid = 0x5463f, 0x22294584 libc++abi.dylib`__cxa_throw, name = 'RLMRealm notification listener'
    frame #0: 0x22294584 libc++abi.dylib`__cxa_throw
  * frame #1: 0x0160bcfe Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(realm::SharedGroup&, (anonymous namespace)::TransactLogValidator&&, realm::VersionID) [inlined] void realm::SharedGroup::advance_read<(anonymous namespace)::TransactLogValidator>(this=<unavailable>)::TransactLogValidator*, realm::VersionID) + 260 at group_shared.hpp:915 [opt]
    frame #2: 0x0160bc5c Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(realm::SharedGroup&, (anonymous namespace)::TransactLogValidator&&, realm::VersionID) [inlined] void realm::_impl::SharedGroupFriend::advance_read<(anonymous namespace)::TransactLogValidator>(sg=<unavailable>)::TransactLogValidator*, realm::VersionID) at group_shared.hpp:1086 [opt]
    frame #3: 0x0160bc5c Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(sg=<unavailable>, observer=<unavailable>, version=<unavailable>)::TransactLogValidator&&, realm::VersionID) + 98 at lang_bind_helper.hpp:335 [opt]
    frame #4: 0x01607964 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] auto realm::_impl::transaction::advance(args=<unavailable>)::$_0::operator()<(anonymous namespace)::TransactLogValidator>((anonymous namespace)::TransactLogValidator&&) const + 308 at transact_log_handler.cpp:823 [opt]
    frame #5: 0x01607952 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] (anonymous namespace)::TransactLogObserver::TransactLogObserver<realm::_impl::transaction::advance(this=<unavailable>, context=<unavailable>, sg=<unavailable>, notifiers=<unavailable>)::$_0>(realm::BindingContext*, realm::SharedGroup&, realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID)::$_0&&, realm::util::Optional<realm::SchemaMode>, realm::_impl::NotifierPackage&) + 190 at transact_log_handler.cpp:274 [opt]
    frame #6: 0x01607894 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] (anonymous namespace)::TransactLogObserver::TransactLogObserver<realm::_impl::transaction::advance(context=<unavailable>, sg=<unavailable>, notifiers=<unavailable>)::$_0>(realm::BindingContext*, realm::SharedGroup&, realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID)::$_0&&, realm::util::Optional<realm::SchemaMode>, realm::_impl::NotifierPackage&) at transact_log_handler.cpp:262 [opt]
    frame #7: 0x01607894 Realm`realm::_impl::transaction::advance(sg=<unavailable>, context=<unavailable>, schema_mode=<unavailable>, version=<unavailable>) + 100 at transact_log_handler.cpp:822 [opt]
    frame #8: 0x01542588 Realm`(anonymous namespace)::IncrementalChangeInfo::advance_to_final(this=<unavailable>, version=<unavailable>) + 880 at realm_coordinator.cpp:468 [opt]
    frame #9: 0x01541c0a Realm`realm::_impl::RealmCoordinator::run_async_notifiers(this=<unavailable>) + 1182 at realm_coordinator.cpp:587 [opt]
    frame #10: 0x015416c2 Realm`realm::_impl::RealmCoordinator::on_change(this=0x17644d30) + 34 at realm_coordinator.cpp:410 [opt]
    frame #11: 0x0152da3e Realm`realm::_impl::ExternalCommitHelper::listen(this=<unavailable>) + 168 at external_commit_helper.cpp:217 [opt]
    frame #12: 0x0152e1a2 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0::operator()() const + 82 at external_commit_helper.cpp:159 [opt]
    frame #13: 0x0152e178 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] std::__1::__invoke<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>(decltype(std::__1::forward<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>(fp)(std::__1::forward<>(fp0))), realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0&&) + 32 at __functional_base:416 [opt]
    frame #14: 0x0152e158 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] _ZNSt3__112__async_funcIZN5realm5_impl20ExternalCommitHelperC1ERNS2_16RealmCoordinatorEE3$_0JEE9__executeIJEEEvNS_15__tuple_indicesIJXspT_EEEE(this=<unavailable>) at future:2348 [opt]
    frame #15: 0x0152e158 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator(this=<unavailable>)() + 8 at future:2341 [opt]
    frame #16: 0x0152e0ba Realm`std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::__execute(this=<unavailable>) + 86 at future:1031 [opt]
    frame #17: 0x0152e348 Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(void*, void*) [inlined] std::__1::__invoke<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*, void>(decltype(*(std::__1::forward<std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*>(fp0)).*fp(std::__1::forward<>(fp1))), void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*&&)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*&&) + 144 at __functional_base:383 [opt]
    frame #18: 0x0152e32c Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(void*, void*) [inlined] _ZNSt3__116__thread_executeIMNS_19__async_assoc_stateIvNS_12__async_funcIZN5realm5_impl20ExternalCommitHelperC1ERNS4_16RealmCoordinatorEE3$_0JEEEEEFvvEJPSA_EJLm1EEEEvRNS_5tupleIJT_DpT0_EEENS_15__tuple_indicesIJXspT1_EEEE at thread:347 [opt]
    frame #19: 0x0152e32c Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(__vp=<unavailable>) + 116 at thread:357 [opt]
    frame #20: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #21: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #22: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #8: tid = 0x54640, 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20, name = 'com.apple.NSURLConnectionLoader'
    frame #0: 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20
    frame #1: 0x2277e6d4 libsystem_kernel.dylib`mach_msg + 40
    frame #2: 0x22ac9ac4 CoreFoundation`__CFRunLoopServiceMachPort + 136
    frame #3: 0x22ac7e4c CoreFoundation`__CFRunLoopRun + 1036
    frame #4: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #5: 0x22a17014 CoreFoundation`CFRunLoopRunInMode + 108
    frame #6: 0x230689f6 CFNetwork`+[NSURLConnection(Loader) _resourceLoadLoop:] + 486
    frame #7: 0x233314a4 Foundation`__NSThread__start__ + 1148
    frame #8: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #9: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #10: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #9: tid = 0x54643, 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20, name = 'com.apple.CoreMotion.MotionThread'
    frame #0: 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20
    frame #1: 0x2277e6d4 libsystem_kernel.dylib`mach_msg + 40
    frame #2: 0x22ac9ac4 CoreFoundation`__CFRunLoopServiceMachPort + 136
    frame #3: 0x22ac7e4c CoreFoundation`__CFRunLoopRun + 1036
    frame #4: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #5: 0x22a57dd2 CoreFoundation`CFRunLoopRun + 98
    frame #6: 0x27d1ddb8 CoreMotion`___lldb_unnamed_function2162$$CoreMotion + 940
    frame #7: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #8: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #9: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #10: tid = 0x54648, 0x22792eec libsystem_kernel.dylib`__select + 20, name = 'com.apple.CFSocket.private'
    frame #0: 0x22792eec libsystem_kernel.dylib`__select + 20
    frame #1: 0x22acef12 CoreFoundation`__CFSocketManager + 566
    frame #2: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #3: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #4: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #11: tid = 0x54679, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8

  thread #12: tid = 0x546d0, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8

  thread #13: tid = 0x546d1, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8
Warning: hit breakpoint while running function, skipping commands and conditions to prevent recursion.",kirtiparghi,owned
4497,2016-12-29 10:21:13,"I have integrated realm cocoa using carthage dependency tool. Here is the configuration that i have used,

Xcode : 8.2.1
Carthage File : github ""realm/realm-cocoa"" ~> 2.1.2
OS X : 10.11.5

I have tried different version of realm cocoa but ""Bad Version Number"" exception occurs in each version of realm cocoa.

Here i have mentioned stack trace which i got during this exception:

warning: could not load any Objective-C class information. This will significantly reduce the quality of type information available.
  thread #1: tid = 0x545ed, 0x015de212 Realm`-[RLMRealm beginWriteTransaction](self=<unavailable>, _cmd=<unavailable>) + 94 at RLMRealm.mm:435, queue = 'com.apple.main-thread'
    frame #0: 0x015de212 Realm`-[RLMRealm beginWriteTransaction](self=<unavailable>, _cmd=<unavailable>) + 94 at RLMRealm.mm:435 [opt]
    frame #1: 0x0062ee54 RealmSwift`RealmSwift.Realm.write (() throws -> ()) throws -> () + 52 at Realm.swift:808
    frame #2: 0x00114630 Sumondo`Sync.(type=Session, items=1 value, self=0x18841900)(Type, items : [Uploadable]) -> () + 152 at Sync.swift:344
    frame #3: 0x0010c668 Sumondo`Sync.(response=Alamofire.Response<AnyObject, Foundation.NSError> @ 0x005dab04, self=0x18841900, type=Session, items=1 value)(Type, items : [Uploadable]) -> ()).(closure #1) + 276 at Sync.swift:160
    frame #4: 0x008289f4 Alamofire`partial apply forwarder for reabstraction thunk helper from @callee_owned (@owned Alamofire.Response<__ObjC.NSData, __ObjC.NSError>) -> (@unowned ()) to @callee_owned (@in Alamofire.Response<__ObjC.NSData, __ObjC.NSError>) -> (@unowned ()) + 152 at ResponseSerialization.swift:0
    frame #5: 0x008284cc Alamofire`generic specialization <Alamofire.ResponseSerializer<Swift.AnyObject, __ObjC.NSError> with Alamofire.ResponseSerializer<Swift.AnyObject, __ObjC.NSError> : Alamofire.ResponseSerializerType in Alamofire, __ObjC.NSError with __ObjC.NSError : Swift.ErrorType in Foundation, Swift.AnyObject> of Alamofire.Request.(response <A where A: Alamofire.ResponseSerializerType> (queue : Swift.Optional<__ObjC.OS_dispatch_queue>, responseSerializer : A, completionHandler : (Alamofire.Response<A.SerializedObject, A.ErrorObject>) -> ()) -> Self).(closure #1).(closure #1) + 192 at ResponseSerialization.swift:142
    frame #6: 0x02f0db7e libdispatch.dylib`_dispatch_call_block_and_release + 10
    frame #7: 0x02f0db6a libdispatch.dylib`_dispatch_client_callout + 22
    frame #8: 0x02f12654 libdispatch.dylib`_dispatch_main_queue_callback_4CF + 1680
    frame #9: 0x22ac9b6c CoreFoundation`__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 8
    frame #10: 0x22ac8066 CoreFoundation`__CFRunLoopRun + 1574
    frame #11: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #12: 0x22a17014 CoreFoundation`CFRunLoopRunInMode + 108
    frame #13: 0x24007ac8 GraphicsServices`GSEventRunModal + 160
    frame #14: 0x270eb188 UIKit`UIApplicationMain + 144
    frame #15: 0x000ea5d8 Sumondo`main + 172 at AppDelegate.swift:18
    frame #16: 0x226bf872 libdyld.dylib`start + 2

  thread #4: tid = 0x54611, 0x227942f8 libsystem_kernel.dylib`kevent_qos + 24, queue = 'com.apple.libdispatch-manager'
    frame #0: 0x227942f8 libsystem_kernel.dylib`kevent_qos + 24
    frame #1: 0x02f1e470 libdispatch.dylib`_dispatch_mgr_invoke + 256
    frame #2: 0x02f0f83e libdispatch.dylib`_dispatch_mgr_thread + 38

* thread #7: tid = 0x5463f, 0x22294584 libc++abi.dylib`__cxa_throw, name = 'RLMRealm notification listener'
    frame #0: 0x22294584 libc++abi.dylib`__cxa_throw
  * frame #1: 0x0160bcfe Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(realm::SharedGroup&, (anonymous namespace)::TransactLogValidator&&, realm::VersionID) [inlined] void realm::SharedGroup::advance_read<(anonymous namespace)::TransactLogValidator>(this=<unavailable>)::TransactLogValidator*, realm::VersionID) + 260 at group_shared.hpp:915 [opt]
    frame #2: 0x0160bc5c Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(realm::SharedGroup&, (anonymous namespace)::TransactLogValidator&&, realm::VersionID) [inlined] void realm::_impl::SharedGroupFriend::advance_read<(anonymous namespace)::TransactLogValidator>(sg=<unavailable>)::TransactLogValidator*, realm::VersionID) at group_shared.hpp:1086 [opt]
    frame #3: 0x0160bc5c Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(sg=<unavailable>, observer=<unavailable>, version=<unavailable>)::TransactLogValidator&&, realm::VersionID) + 98 at lang_bind_helper.hpp:335 [opt]
    frame #4: 0x01607964 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] auto realm::_impl::transaction::advance(args=<unavailable>)::$_0::operator()<(anonymous namespace)::TransactLogValidator>((anonymous namespace)::TransactLogValidator&&) const + 308 at transact_log_handler.cpp:823 [opt]
    frame #5: 0x01607952 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] (anonymous namespace)::TransactLogObserver::TransactLogObserver<realm::_impl::transaction::advance(this=<unavailable>, context=<unavailable>, sg=<unavailable>, notifiers=<unavailable>)::$_0>(realm::BindingContext*, realm::SharedGroup&, realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID)::$_0&&, realm::util::Optional<realm::SchemaMode>, realm::_impl::NotifierPackage&) + 190 at transact_log_handler.cpp:274 [opt]
    frame #6: 0x01607894 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] (anonymous namespace)::TransactLogObserver::TransactLogObserver<realm::_impl::transaction::advance(context=<unavailable>, sg=<unavailable>, notifiers=<unavailable>)::$_0>(realm::BindingContext*, realm::SharedGroup&, realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID)::$_0&&, realm::util::Optional<realm::SchemaMode>, realm::_impl::NotifierPackage&) at transact_log_handler.cpp:262 [opt]
    frame #7: 0x01607894 Realm`realm::_impl::transaction::advance(sg=<unavailable>, context=<unavailable>, schema_mode=<unavailable>, version=<unavailable>) + 100 at transact_log_handler.cpp:822 [opt]
    frame #8: 0x01542588 Realm`(anonymous namespace)::IncrementalChangeInfo::advance_to_final(this=<unavailable>, version=<unavailable>) + 880 at realm_coordinator.cpp:468 [opt]
    frame #9: 0x01541c0a Realm`realm::_impl::RealmCoordinator::run_async_notifiers(this=<unavailable>) + 1182 at realm_coordinator.cpp:587 [opt]
    frame #10: 0x015416c2 Realm`realm::_impl::RealmCoordinator::on_change(this=0x17644d30) + 34 at realm_coordinator.cpp:410 [opt]
    frame #11: 0x0152da3e Realm`realm::_impl::ExternalCommitHelper::listen(this=<unavailable>) + 168 at external_commit_helper.cpp:217 [opt]
    frame #12: 0x0152e1a2 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0::operator()() const + 82 at external_commit_helper.cpp:159 [opt]
    frame #13: 0x0152e178 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] std::__1::__invoke<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>(decltype(std::__1::forward<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>(fp)(std::__1::forward<>(fp0))), realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0&&) + 32 at __functional_base:416 [opt]
    frame #14: 0x0152e158 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] _ZNSt3__112__async_funcIZN5realm5_impl20ExternalCommitHelperC1ERNS2_16RealmCoordinatorEE3$_0JEE9__executeIJEEEvNS_15__tuple_indicesIJXspT_EEEE(this=<unavailable>) at future:2348 [opt]
    frame #15: 0x0152e158 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator(this=<unavailable>)() + 8 at future:2341 [opt]
    frame #16: 0x0152e0ba Realm`std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::__execute(this=<unavailable>) + 86 at future:1031 [opt]
    frame #17: 0x0152e348 Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(void*, void*) [inlined] std::__1::__invoke<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*, void>(decltype(*(std::__1::forward<std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*>(fp0)).*fp(std::__1::forward<>(fp1))), void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*&&)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*&&) + 144 at __functional_base:383 [opt]
    frame #18: 0x0152e32c Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(void*, void*) [inlined] _ZNSt3__116__thread_executeIMNS_19__async_assoc_stateIvNS_12__async_funcIZN5realm5_impl20ExternalCommitHelperC1ERNS4_16RealmCoordinatorEE3$_0JEEEEEFvvEJPSA_EJLm1EEEEvRNS_5tupleIJT_DpT0_EEENS_15__tuple_indicesIJXspT1_EEEE at thread:347 [opt]
    frame #19: 0x0152e32c Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(__vp=<unavailable>) + 116 at thread:357 [opt]
    frame #20: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #21: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #22: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #8: tid = 0x54640, 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20, name = 'com.apple.NSURLConnectionLoader'
    frame #0: 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20
    frame #1: 0x2277e6d4 libsystem_kernel.dylib`mach_msg + 40
    frame #2: 0x22ac9ac4 CoreFoundation`__CFRunLoopServiceMachPort + 136
    frame #3: 0x22ac7e4c CoreFoundation`__CFRunLoopRun + 1036
    frame #4: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #5: 0x22a17014 CoreFoundation`CFRunLoopRunInMode + 108
    frame #6: 0x230689f6 CFNetwork`+[NSURLConnection(Loader) _resourceLoadLoop:] + 486
    frame #7: 0x233314a4 Foundation`__NSThread__start__ + 1148
    frame #8: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #9: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #10: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #9: tid = 0x54643, 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20, name = 'com.apple.CoreMotion.MotionThread'
    frame #0: 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20
    frame #1: 0x2277e6d4 libsystem_kernel.dylib`mach_msg + 40
    frame #2: 0x22ac9ac4 CoreFoundation`__CFRunLoopServiceMachPort + 136
    frame #3: 0x22ac7e4c CoreFoundation`__CFRunLoopRun + 1036
    frame #4: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #5: 0x22a57dd2 CoreFoundation`CFRunLoopRun + 98
    frame #6: 0x27d1ddb8 CoreMotion`___lldb_unnamed_function2162$$CoreMotion + 940
    frame #7: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #8: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #9: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #10: tid = 0x54648, 0x22792eec libsystem_kernel.dylib`__select + 20, name = 'com.apple.CFSocket.private'
    frame #0: 0x22792eec libsystem_kernel.dylib`__select + 20
    frame #1: 0x22acef12 CoreFoundation`__CFSocketManager + 566
    frame #2: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #3: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #4: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #11: tid = 0x54679, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8

  thread #12: tid = 0x546d0, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8

  thread #13: tid = 0x546d1, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8
Warning: hit breakpoint while running function, skipping commands and conditions to prevent recursion.",kirtiparghi,callee
4497,2016-12-29 10:21:13,"I have integrated realm cocoa using carthage dependency tool. Here is the configuration that i have used,

Xcode : 8.2.1
Carthage File : github ""realm/realm-cocoa"" ~> 2.1.2
OS X : 10.11.5

I have tried different version of realm cocoa but ""Bad Version Number"" exception occurs in each version of realm cocoa.

Here i have mentioned stack trace which i got during this exception:

warning: could not load any Objective-C class information. This will significantly reduce the quality of type information available.
  thread #1: tid = 0x545ed, 0x015de212 Realm`-[RLMRealm beginWriteTransaction](self=<unavailable>, _cmd=<unavailable>) + 94 at RLMRealm.mm:435, queue = 'com.apple.main-thread'
    frame #0: 0x015de212 Realm`-[RLMRealm beginWriteTransaction](self=<unavailable>, _cmd=<unavailable>) + 94 at RLMRealm.mm:435 [opt]
    frame #1: 0x0062ee54 RealmSwift`RealmSwift.Realm.write (() throws -> ()) throws -> () + 52 at Realm.swift:808
    frame #2: 0x00114630 Sumondo`Sync.(type=Session, items=1 value, self=0x18841900)(Type, items : [Uploadable]) -> () + 152 at Sync.swift:344
    frame #3: 0x0010c668 Sumondo`Sync.(response=Alamofire.Response<AnyObject, Foundation.NSError> @ 0x005dab04, self=0x18841900, type=Session, items=1 value)(Type, items : [Uploadable]) -> ()).(closure #1) + 276 at Sync.swift:160
    frame #4: 0x008289f4 Alamofire`partial apply forwarder for reabstraction thunk helper from @callee_owned (@owned Alamofire.Response<__ObjC.NSData, __ObjC.NSError>) -> (@unowned ()) to @callee_owned (@in Alamofire.Response<__ObjC.NSData, __ObjC.NSError>) -> (@unowned ()) + 152 at ResponseSerialization.swift:0
    frame #5: 0x008284cc Alamofire`generic specialization <Alamofire.ResponseSerializer<Swift.AnyObject, __ObjC.NSError> with Alamofire.ResponseSerializer<Swift.AnyObject, __ObjC.NSError> : Alamofire.ResponseSerializerType in Alamofire, __ObjC.NSError with __ObjC.NSError : Swift.ErrorType in Foundation, Swift.AnyObject> of Alamofire.Request.(response <A where A: Alamofire.ResponseSerializerType> (queue : Swift.Optional<__ObjC.OS_dispatch_queue>, responseSerializer : A, completionHandler : (Alamofire.Response<A.SerializedObject, A.ErrorObject>) -> ()) -> Self).(closure #1).(closure #1) + 192 at ResponseSerialization.swift:142
    frame #6: 0x02f0db7e libdispatch.dylib`_dispatch_call_block_and_release + 10
    frame #7: 0x02f0db6a libdispatch.dylib`_dispatch_client_callout + 22
    frame #8: 0x02f12654 libdispatch.dylib`_dispatch_main_queue_callback_4CF + 1680
    frame #9: 0x22ac9b6c CoreFoundation`__CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 8
    frame #10: 0x22ac8066 CoreFoundation`__CFRunLoopRun + 1574
    frame #11: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #12: 0x22a17014 CoreFoundation`CFRunLoopRunInMode + 108
    frame #13: 0x24007ac8 GraphicsServices`GSEventRunModal + 160
    frame #14: 0x270eb188 UIKit`UIApplicationMain + 144
    frame #15: 0x000ea5d8 Sumondo`main + 172 at AppDelegate.swift:18
    frame #16: 0x226bf872 libdyld.dylib`start + 2

  thread #4: tid = 0x54611, 0x227942f8 libsystem_kernel.dylib`kevent_qos + 24, queue = 'com.apple.libdispatch-manager'
    frame #0: 0x227942f8 libsystem_kernel.dylib`kevent_qos + 24
    frame #1: 0x02f1e470 libdispatch.dylib`_dispatch_mgr_invoke + 256
    frame #2: 0x02f0f83e libdispatch.dylib`_dispatch_mgr_thread + 38

* thread #7: tid = 0x5463f, 0x22294584 libc++abi.dylib`__cxa_throw, name = 'RLMRealm notification listener'
    frame #0: 0x22294584 libc++abi.dylib`__cxa_throw
  * frame #1: 0x0160bcfe Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(realm::SharedGroup&, (anonymous namespace)::TransactLogValidator&&, realm::VersionID) [inlined] void realm::SharedGroup::advance_read<(anonymous namespace)::TransactLogValidator>(this=<unavailable>)::TransactLogValidator*, realm::VersionID) + 260 at group_shared.hpp:915 [opt]
    frame #2: 0x0160bc5c Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(realm::SharedGroup&, (anonymous namespace)::TransactLogValidator&&, realm::VersionID) [inlined] void realm::_impl::SharedGroupFriend::advance_read<(anonymous namespace)::TransactLogValidator>(sg=<unavailable>)::TransactLogValidator*, realm::VersionID) at group_shared.hpp:1086 [opt]
    frame #3: 0x0160bc5c Realm`void realm::LangBindHelper::advance_read<(anonymous namespace)::TransactLogValidator>(sg=<unavailable>, observer=<unavailable>, version=<unavailable>)::TransactLogValidator&&, realm::VersionID) + 98 at lang_bind_helper.hpp:335 [opt]
    frame #4: 0x01607964 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] auto realm::_impl::transaction::advance(args=<unavailable>)::$_0::operator()<(anonymous namespace)::TransactLogValidator>((anonymous namespace)::TransactLogValidator&&) const + 308 at transact_log_handler.cpp:823 [opt]
    frame #5: 0x01607952 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] (anonymous namespace)::TransactLogObserver::TransactLogObserver<realm::_impl::transaction::advance(this=<unavailable>, context=<unavailable>, sg=<unavailable>, notifiers=<unavailable>)::$_0>(realm::BindingContext*, realm::SharedGroup&, realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID)::$_0&&, realm::util::Optional<realm::SchemaMode>, realm::_impl::NotifierPackage&) + 190 at transact_log_handler.cpp:274 [opt]
    frame #6: 0x01607894 Realm`realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID) [inlined] (anonymous namespace)::TransactLogObserver::TransactLogObserver<realm::_impl::transaction::advance(context=<unavailable>, sg=<unavailable>, notifiers=<unavailable>)::$_0>(realm::BindingContext*, realm::SharedGroup&, realm::_impl::transaction::advance(realm::SharedGroup&, realm::BindingContext*, realm::SchemaMode, realm::VersionID)::$_0&&, realm::util::Optional<realm::SchemaMode>, realm::_impl::NotifierPackage&) at transact_log_handler.cpp:262 [opt]
    frame #7: 0x01607894 Realm`realm::_impl::transaction::advance(sg=<unavailable>, context=<unavailable>, schema_mode=<unavailable>, version=<unavailable>) + 100 at transact_log_handler.cpp:822 [opt]
    frame #8: 0x01542588 Realm`(anonymous namespace)::IncrementalChangeInfo::advance_to_final(this=<unavailable>, version=<unavailable>) + 880 at realm_coordinator.cpp:468 [opt]
    frame #9: 0x01541c0a Realm`realm::_impl::RealmCoordinator::run_async_notifiers(this=<unavailable>) + 1182 at realm_coordinator.cpp:587 [opt]
    frame #10: 0x015416c2 Realm`realm::_impl::RealmCoordinator::on_change(this=0x17644d30) + 34 at realm_coordinator.cpp:410 [opt]
    frame #11: 0x0152da3e Realm`realm::_impl::ExternalCommitHelper::listen(this=<unavailable>) + 168 at external_commit_helper.cpp:217 [opt]
    frame #12: 0x0152e1a2 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0::operator()() const + 82 at external_commit_helper.cpp:159 [opt]
    frame #13: 0x0152e178 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] std::__1::__invoke<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>(decltype(std::__1::forward<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>(fp)(std::__1::forward<>(fp0))), realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0&&) + 32 at __functional_base:416 [opt]
    frame #14: 0x0152e158 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator()() [inlined] _ZNSt3__112__async_funcIZN5realm5_impl20ExternalCommitHelperC1ERNS2_16RealmCoordinatorEE3$_0JEE9__executeIJEEEvNS_15__tuple_indicesIJXspT_EEEE(this=<unavailable>) at future:2348 [opt]
    frame #15: 0x0152e158 Realm`std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0>::operator(this=<unavailable>)() + 8 at future:2341 [opt]
    frame #16: 0x0152e0ba Realm`std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::__execute(this=<unavailable>) + 86 at future:1031 [opt]
    frame #17: 0x0152e348 Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(void*, void*) [inlined] std::__1::__invoke<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*, void>(decltype(*(std::__1::forward<std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*>(fp0)).*fp(std::__1::forward<>(fp1))), void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*&&)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*&&) + 144 at __functional_base:383 [opt]
    frame #18: 0x0152e32c Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(void*, void*) [inlined] _ZNSt3__116__thread_executeIMNS_19__async_assoc_stateIvNS_12__async_funcIZN5realm5_impl20ExternalCommitHelperC1ERNS4_16RealmCoordinatorEE3$_0JEEEEEFvvEJPSA_EJLm1EEEEvRNS_5tupleIJT_DpT0_EEENS_15__tuple_indicesIJXspT1_EEEE at thread:347 [opt]
    frame #19: 0x0152e32c Realm`std::__1::__thread_proxy<std::__1::tuple<void (std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::_impl::RealmCoordinator&)::$_0> >*> >(__vp=<unavailable>) + 116 at thread:357 [opt]
    frame #20: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #21: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #22: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #8: tid = 0x54640, 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20, name = 'com.apple.NSURLConnectionLoader'
    frame #0: 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20
    frame #1: 0x2277e6d4 libsystem_kernel.dylib`mach_msg + 40
    frame #2: 0x22ac9ac4 CoreFoundation`__CFRunLoopServiceMachPort + 136
    frame #3: 0x22ac7e4c CoreFoundation`__CFRunLoopRun + 1036
    frame #4: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #5: 0x22a17014 CoreFoundation`CFRunLoopRunInMode + 108
    frame #6: 0x230689f6 CFNetwork`+[NSURLConnection(Loader) _resourceLoadLoop:] + 486
    frame #7: 0x233314a4 Foundation`__NSThread__start__ + 1148
    frame #8: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #9: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #10: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #9: tid = 0x54643, 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20, name = 'com.apple.CoreMotion.MotionThread'
    frame #0: 0x2277e8d0 libsystem_kernel.dylib`mach_msg_trap + 20
    frame #1: 0x2277e6d4 libsystem_kernel.dylib`mach_msg + 40
    frame #2: 0x22ac9ac4 CoreFoundation`__CFRunLoopServiceMachPort + 136
    frame #3: 0x22ac7e4c CoreFoundation`__CFRunLoopRun + 1036
    frame #4: 0x22a17228 CoreFoundation`CFRunLoopRunSpecific + 520
    frame #5: 0x22a57dd2 CoreFoundation`CFRunLoopRun + 98
    frame #6: 0x27d1ddb8 CoreMotion`___lldb_unnamed_function2162$$CoreMotion + 940
    frame #7: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #8: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #9: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #10: tid = 0x54648, 0x22792eec libsystem_kernel.dylib`__select + 20, name = 'com.apple.CFSocket.private'
    frame #0: 0x22792eec libsystem_kernel.dylib`__select + 20
    frame #1: 0x22acef12 CoreFoundation`__CFSocketManager + 566
    frame #2: 0x2283b85a libsystem_pthread.dylib`_pthread_body + 138
    frame #3: 0x2283b7ce libsystem_pthread.dylib`_pthread_start + 110
    frame #4: 0x22839724 libsystem_pthread.dylib`thread_start + 8

  thread #11: tid = 0x54679, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8

  thread #12: tid = 0x546d0, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8

  thread #13: tid = 0x546d1, 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #0: 0x22793864 libsystem_kernel.dylib`__workq_kernreturn + 8
    frame #1: 0x22839b34 libsystem_pthread.dylib`_pthread_wqthread + 1036
    frame #2: 0x22839718 libsystem_pthread.dylib`start_wqthread + 8
Warning: hit breakpoint while running function, skipping commands and conditions to prevent recursion.",kirtiparghi,in
4485,2017-01-04 12:50:04,"**UPDATE**: Speaking with @TimOliver on Slack, he said part of the issue could be the sync URL. He recommended using something like `realm://localhost:9080/MyPublicRealm`, so I did.

Currently, my sync URL looks like this `realm://127.0.0.1:9080/banjo27`, but im still getting the following output in the console:

^ it just keeps repeating over and over as the app continues to execute. it also appears that the initial data sync happens, b/c i can access the Realm objects, but I'm unsure if any subsequent notifications are coming through without error b/c of the output I'm seeing.",jarrodparkes,TimOliver
4485,2017-01-07 17:12:40,"**UPDATE**: Trying another workaround... creating a `SyncPermissionChange` object. My code isn't much different from the example on the docs:



But this still isn't changing the output 😢 



@TimOliver any thoughts?",jarrodparkes,TimOliver
4482,2016-12-23 08:18:29,"To align Java APIs. This also ensures that `id` is a unique value. 

CC @mrackwitz @jpsim @bigfish24 @cmelchior 
",kishikawakatsumi,mrackwitz
4482,2016-12-23 08:18:29,"To align Java APIs. This also ensures that `id` is a unique value. 

CC @mrackwitz @jpsim @bigfish24 @cmelchior 
",kishikawakatsumi,jpsim
4482,2016-12-23 08:18:29,"To align Java APIs. This also ensures that `id` is a unique value. 

CC @mrackwitz @jpsim @bigfish24 @cmelchior 
",kishikawakatsumi,bigfish24
4482,2016-12-23 08:18:29,"To align Java APIs. This also ensures that `id` is a unique value. 

CC @mrackwitz @jpsim @bigfish24 @cmelchior 
",kishikawakatsumi,cmelchior
4479,2016-12-23 10:11:14,"Hello Tim,

Please find the code flow which is creating problem : -

1.
//-------------------------------------------------------------------------------------------------------------------------------------------------
- (void)updateRealm:(NSDictionary *)message
//-------------------------------------------------------------------------------------------------------------------------------------------------
{
    RLMRealm *realm = [RLMRealm defaultRealm];
    [realm beginWriteTransaction];
    [DBMessage createOrUpdateInRealm:realm withValue:message];
    [realm commitWriteTransaction];
}

2. + (instancetype)createOrUpdateInRealm:(RLMRealm *)realm
withValue:(id)value {
    // verify primary key
    RLMObjectSchema *schema = [self sharedSchema];
    if (!schema.primaryKeyProperty) {
        NSString *reason = [NSString stringWithFormat:@""'%@' does not have
a primary key and can not be updated"", schema.className];
        @throw [NSException exceptionWithName:@""RLMExecption"" reason:reason
userInfo:nil];
    }
    return (RLMObject *)RLMCreateObjectInRealmWithValue(realm, [self
className], value, true);
}


Vipin Dhangar
9893074069
8770280434


On Fri, Dec 23, 2016 at 6:31 AM, Tim Oliver <notifications@github.com>
wrote:

> Hi @vipindhangar <https://github.com/vipindhangar>!
>
> Thanks for that! I think I need a little more information to work out
> what's going on here. It sounds like the resources from user1 aren't
> getting cleaned up properly before user2 comes in, causing some kind of
> inconsistent state.
>
> How does user1 log out before user2 is allowed to log in? Are you able to
> post some code samples?
>
> Thanks!
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/realm/realm-cocoa/issues/4479#issuecomment-268923471>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ACJKSzSfSMPhRdJMjcF6CQ0dLSP8AHX6ks5rKx1egaJpZM4LT_IC>
> .
>
",vipindhangar,throw
4479,2016-12-23 10:15:35,"Hello Tim,

Please ignore the last message.

Please find the code flow which is creating problem : -

1. //----------------------------------------------------------
------------------------------------------------------------
---------------------------
- (void)updateRealm:(NSDictionary *)message
//----------------------------------------------------------
------------------------------------------------------------
---------------------------
{
    RLMRealm *realm = [RLMRealm defaultRealm];
    [realm beginWriteTransaction];
    [DBMessage createOrUpdateInRealm:realm withValue:message];
    [realm commitWriteTransaction];
}

2. + (instancetype)createOrUpdateInRealm:(RLMRealm *)realm
withValue:(id)value {
    // verify primary key
    RLMObjectSchema *schema = [self sharedSchema];
    if (!schema.primaryKeyProperty) {
        NSString *reason = [NSString stringWithFormat:@""'%@' does not have
a primary key and can not be updated"", schema.className];
        @throw [NSException exceptionWithName:@""RLMExecption"" reason:reason
userInfo:nil];
    }
    return (RLMObject *)RLMCreateObjectInRealmWithValue(realm, [self
className], value, true);
}

3. + (instancetype)createOrUpdateInRealm:(RLMRealm *)realm
withValue:(id)value {
    // verify primary key
    RLMObjectSchema *schema = [self sharedSchema];
    if (!schema.primaryKeyProperty) {
        NSString *reason = [NSString stringWithFormat:@""'%@' does not have
a primary key and can not be updated"", schema.className];
        @throw [NSException exceptionWithName:@""RLMExecption"" reason:reason
userInfo:nil];
    }
    return (RLMObject *)RLMCreateObjectInRealmWithValue(realm, [self
className], value, true);
}

4. static NSUInteger getRowForObjectWithPrimaryKey(RLMClassInfo const&
info, id primaryValue) {

    REALM_ASSERT_DEBUG(info.propertyForPrimaryKey());

    RLMProperty *const primaryProperty = info.propertyForPrimaryKey();
    const NSUInteger primaryPropertyColumn =
info.tableColumn(primaryProperty);

    switch (primaryProperty.type) {
        case RLMPropertyTypeString:
            return info.table()->find_first_string(primaryPropertyColumn,
RLMStringDataWithNSString(primaryValue));
//In this line the app get crashed
        case RLMPropertyTypeInt:
            if (primaryValue) {
                return info.table()->find_first_int(primaryPropertyColumn,
[primaryValue longLongValue]);
            } else {
                return info.table()->find_first_null(primaryPropertyColumn);
            }

        default:
            REALM_UNREACHABLE();
    }
}

Thanks

Vipin Dhangar
9893074069
8770280434


On Fri, Dec 23, 2016 at 3:41 PM, Vipin Dhangar <dhangar.vipin@gmail.com>
wrote:

> Hello Tim,
>
> Please find the code flow which is creating problem : -
>
> 1. //----------------------------------------------------------
> ------------------------------------------------------------
> ---------------------------
> - (void)updateRealm:(NSDictionary *)message
> //----------------------------------------------------------
> ------------------------------------------------------------
> ---------------------------
> {
>     RLMRealm *realm = [RLMRealm defaultRealm];
>     [realm beginWriteTransaction];
>     [DBMessage createOrUpdateInRealm:realm withValue:message];
>     [realm commitWriteTransaction];
> }
>
> 2. + (instancetype)createOrUpdateInRealm:(RLMRealm *)realm
> withValue:(id)value {
>     // verify primary key
>     RLMObjectSchema *schema = [self sharedSchema];
>     if (!schema.primaryKeyProperty) {
>         NSString *reason = [NSString stringWithFormat:@""'%@' does not
> have a primary key and can not be updated"", schema.className];
>         @throw [NSException exceptionWithName:@""RLMExecption""
> reason:reason userInfo:nil];
>     }
>     return (RLMObject *)RLMCreateObjectInRealmWithValue(realm, [self
> className], value, true);
> }
>
>
> Vipin Dhangar
> 9893074069
> 8770280434
>
>
> On Fri, Dec 23, 2016 at 6:31 AM, Tim Oliver <notifications@github.com>
> wrote:
>
>> Hi @vipindhangar <https://github.com/vipindhangar>!
>>
>> Thanks for that! I think I need a little more information to work out
>> what's going on here. It sounds like the resources from user1 aren't
>> getting cleaned up properly before user2 comes in, causing some kind of
>> inconsistent state.
>>
>> How does user1 log out before user2 is allowed to log in? Are you able to
>> post some code samples?
>>
>> Thanks!
>>
>> —
>> You are receiving this because you were mentioned.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/realm/realm-cocoa/issues/4479#issuecomment-268923471>,
>> or mute the thread
>> <https://github.com/notifications/unsubscribe-auth/ACJKSzSfSMPhRdJMjcF6CQ0dLSP8AHX6ks5rKx1egaJpZM4LT_IC>
>> .
>>
>
>
",vipindhangar,throw
4474,2016-12-21 18:12:01,"If you have a debugger attached, you can set a breakpoint on [RLMPredicateToQuery()](https://github.com/realm/realm-cocoa/blob/v2.1.2/Realm/RLMQueryUtil.mm#L1351) to log `@predicate.description@` and to check the breakpoint box to ""Automatically continue after evaluating breakpoint actions"".

![image](https://cloud.githubusercontent.com/assets/474794/21400589/b6c6267e-c765-11e6-84bb-d243997cca4b.png)

which will log all the Realm queries performed:

",jpsim,predicate
4471,2016-12-20 18:54:50,Addresses #4470. Functional changes made in realm/realm-object-store#302. /cc @bdash @tgoyne ,jpsim,bdash
4471,2016-12-20 18:54:50,Addresses #4470. Functional changes made in realm/realm-object-store#302. /cc @bdash @tgoyne ,jpsim,tgoyne
4467,2016-12-19 23:58:55,"The intention when these were added was to prevent them from being overridden in user models by marking these overrides as `final`, since users were trying to change the name of the table in the Realm by returning a different value than the default.

However, the `static` keyword was omitted by accident, causing this to not work as intended at all.

So now that we need to keep this around to avoid a breaking change to conform to SemVer, might as well have it return the correct values.

Fixes #4456. /cc @tgoyne @bdash ",jpsim,tgoyne
4467,2016-12-19 23:58:55,"The intention when these were added was to prevent them from being overridden in user models by marking these overrides as `final`, since users were trying to change the name of the table in the Realm by returning a different value than the default.

However, the `static` keyword was omitted by accident, causing this to not work as intended at all.

So now that we need to keep this around to avoid a breaking change to conform to SemVer, might as well have it return the correct values.

Fixes #4456. /cc @tgoyne @bdash ",jpsim,bdash
4466,2016-12-19 22:18:58,"Make `cocoa-pipeline` CI job more resilient to `xcodebuild` crashes and issues.

For example, as I was preparing today's 2.1.2 release, this happened: https://ci.realm.io/job/objc_ios/1833/console



We've added some smarts to `build.sh` recently to recover from some common xcodebuild crashes and simulator errors: https://github.com/realm/realm-cocoa/blob/v2.1.1/build.sh#L1055-L1070

On top of what we already do in our `reset-simulators.sh` script: https://github.com/realm/realm-cocoa/blob/master/scripts/reset-simulators.sh

We should ideally have this in a generalized `xcodebuild` driver that's ""self-healing"" and that we can repurpose/reuse from other projects so it's not checked in to this repo. For example, we've had similar issues in [realm-js](https://github.com/realm/realm-js) and we've had to port and duplicate part of the solution there, but that's not a sustainable approach.

This has a high impact on our engineering productivity, and general frustration, since it gets in the way of testing PRs and cutting releases.

/cc @larkost ",jpsim,larkost
4464,2016-12-19 21:27:37,/cc @tgoyne ,jpsim,tgoyne
4462,2016-12-19 22:36:01,"Hi @SandyChapman!

Sorry to hear that you're bumping into a potential threaded issue with `[RLMRealm defaultRealm]`. 

@tgoyne: Do you have any idea how this could potentially be happening?

Thanks!",TimOliver,tgoyne
4456,2016-12-17 12:35:22,"@nemesis This is intentional. Please see the discussion https://github.com/realm/realm-cocoa/pull/2319
@jpsim Do you have additional explanation about this?",kishikawakatsumi,jpsim
4453,2016-12-15 13:53:04,"No need to recompile the app anymore. The alert is show only if the logging in with the default credentials fails.

<img width=""487"" alt=""screen shot 2016-12-15 at 2 37 10 pm"" src=""https://cloud.githubusercontent.com/assets/429275/21226351/5d546b3a-c2d5-11e6-8b0a-0c47394b4bd0.png"">

@TimOliver, @bigfish24 ",stel,TimOliver
4453,2016-12-15 13:53:04,"No need to recompile the app anymore. The alert is show only if the logging in with the default credentials fails.

<img width=""487"" alt=""screen shot 2016-12-15 at 2 37 10 pm"" src=""https://cloud.githubusercontent.com/assets/429275/21226351/5d546b3a-c2d5-11e6-8b0a-0c47394b4bd0.png"">

@TimOliver, @bigfish24 ",stel,bigfish24
4453,2016-12-15 16:54:34,Going to let @TimOliver review this one.,jpsim,TimOliver
4453,2017-03-27 16:15:51,@TimOliver @stel @dhmspector  do we still need this given LoginKit and the current state of demos?,jpsim,TimOliver
4453,2017-03-27 16:15:51,@TimOliver @stel @dhmspector  do we still need this given LoginKit and the current state of demos?,jpsim,dhmspector
4448,2016-12-14 19:58:49,Addresses #4447. /cc @tgoyne ,jpsim,tgoyne
4439,2016-12-13 22:31:56,"I believe this was put in place to help test early nullable property support, but results in dead code now. /cc @tgoyne ",jpsim,tgoyne
4433,2016-12-12 08:48:41,"> We LOVE to help with any issues or bugs you have!
>
> **Questions**: If you have questions about how to use Realm, ask on 
> [StackOverflow](http://stackoverflow.com/questions/ask?tags=realm).
> We monitor the `realm` tag.
>
> **Feature Request**: Just fill in the first two sections below.
>
> **Bugs**: To help you as fast as possible with an issue please describe your issue
> and the steps you have taken to reproduce it in as many details as possible.
>
> Thanks for helping us help you! :-)
>
> Please remove this line and all above before submitting.

## Goals

What do you want to achieve?

## Expected Results

Fetch older data saved in database

## Actual Results

Whenever try to access Realm DB , app crashed
e.g. the stack trace of a crash

## Steps to Reproduce

What are steps we can follow to reproduce this issue?

## Code Sample
Here is the crash log

#0. Crashed: com.apple.main-thread
0  libswiftCore.dylib             0x101aa8a08 _TFs16_assertionFailedFTVs12StaticStringSSS_Su5flagsVs6UInt32_Os5Never + 164
1  libswiftCore.dylib             0x101ac87b8 swift_unexpectedError_merged + 476
2  libswiftCore.dylib             0x101ac85c0 swift_unexpectedError + 26
3  Justproperty                   0x100235970 specialized specialized _insertionSort<A where ...> (inout A, subRange : Range<A.Index>, by : inout (A.Iterator.Element, A.Iterator.Element) -> Bool) -> () (NotificationAlertsModel.swift)
4  Justproperty                   0x100333174 specialized AppDelegate.removeReadNotifications() -> () (NotificationAlertsModel.swift)
5  Justproperty                   0x100333928 specialized AppDelegate.application(UIApplication, didFinishLaunchingWithOptions : [UIApplicationLaunchOptionsKey : Any]?) -> Bool (AppDelegate.swift:67)
6  Justproperty                   0x10032ea14 @objc AppDelegate.application(UIApplication, didFinishLaunchingWithOptions : [UIApplicationLaunchOptionsKey : Any]?) -> Bool (AppDelegate.swift)
7  UIKit                          0x18a7db100 -[UIApplication _handleDelegateCallbacksWithOptions:isSuspended:restoreState:] + 400
8  UIKit                          0x18a9eb858 -[UIApplication _callInitializationDelegatesForMainScene:transitionContext:] + 3524
9  UIKit                          0x18a9f15c8 -[UIApplication _runWithMainScene:transitionContext:completion:] + 1656
10 UIKit                          0x18aa05e60 __84-[UIApplication _handleApplicationActivationWithScene:transitionContext:completion:]_block_invoke.3137 + 48
11 UIKit                          0x18a9ee5ac -[UIApplication workspaceDidEndTransaction:] + 168
12 FrontBoardServices             0x1864b58bc __FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + 36
13 FrontBoardServices             0x1864b5728 -[FBSSerialQueue _performNext] + 176
14 FrontBoardServices             0x1864b5ad0 -[FBSSerialQueue _performNextFromRunLoopSource] + 56
15 CoreFoundation                 0x1848bc278 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24
16 CoreFoundation                 0x1848bbbc0 __CFRunLoopDoSources0 + 524
17 CoreFoundation                 0x1848b97c0 __CFRunLoopRun + 804
18 CoreFoundation                 0x1847e8048 CFRunLoopRunSpecific + 444
19 UIKit                          0x18a7d42b0 -[UIApplication _run] + 608
20 UIKit                          0x18a7cf034 UIApplicationMain + 208
21 Justproperty                   0x1000af2ac main (AppDelegate.swift:22)
22 libdispatch.dylib              0x1837cc5b8 (Missing)


this is the exception from crashlytics

CRASH_INFO_ENTRY_0
fatal error: 'try!' expression unexpectedly raised an error: Error Domain=io.realm Code=2 ""Unable to open a realm at path '/var/mobile/Containers/Data/Application/DF6298EF-B141-417C-B13E-CA803D67F89F/Documents/default.realm': Unsupported Realm file format version."" UserInfo={Error Code=2, NSFilePath=/var/mobile/Containers/Data/Application/DF6298EF-B141-417C-B13E-CA803D67F89F/Documents/default.realm, Underlying=Unsupported Realm file format version, NSLocalizedDescription=Unable to open a realm at path '/var/mobile/Containers/Data/Application/DF6298EF-B141-417C-B13E-CA803D67F89F/Documents/default.realm': Unsupported Realm file format version.}: file /Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-800.0.58.6/src/swift/stdlib/public/core/ErrorType.swift, line 178

## Version of Realm and Tooling

[In the CONTRIBUTING guidelines](https://git.io/vgxJO), you will find a script,
which will help determining these versions.

Realm version: ? 2.0.1

Xcode version: ? Xcode 8.1

iOS/OSX version: ? iOS 10

Dependency manager + version: ? Cathage
",Sunitadaffodil,objc
4431,2016-12-10 18:05:09,"Hi Realm Folk,

I was speaking with @jpsim in person and I mentioned the issue I'm having. I assumed it was because of Xcode 8.2 beta but he said to file an issue. So below, I'll do my best to show to reproduce the issue. Its really easy.

Also, the pod file I'm using is pasted below. I made it based on the getting started guide on realm.io. I just changed the Swift version to match what is in Xcode 8.2 beta, Swift 3.0.2



## Goals

The goal is to make a macOS / Cocoa application that uses realm via cocoa pods.

## Expected Results

1. Make a new Xcode project for macOS cocoa application
1. Add pod file
1. Run pod install
1. Open XCWorkspace
1. Select the macOS app scheme
1. Compile

## Actual Results

1. Make a new Xcode project for macOS cocoa application
1. Add pod file
1. Run pod install
1. Open XCWorkspace
1. Select the macOS app scheme
1. Compile
1. Get compile error below

(full text at bottom of post)



## Steps to Reproduce

1. Make a new Xcode project for macOS cocoa application
1. Add pod file
1. Run pod install
1. Open XCWorkspace
1. Select the macOS app scheme
1. Compile

## Temporary Workaround

I have found a temporary workaround. Although it gets clobbered every time Cocoapods touches your project again. But I can find all .h files for Realm. There are two folders with .h files: Realm/Headers, Realm/Realm. If I select all the .h files in the File Navigator in Xcode and then go to the ""Target Membership"" area of the right side of Xcode and change their target membership in their pod dependency from Project to Public, the issue is resolved. See attached screenshot:

<img width=""960"" alt=""screen_shot_2016-12-09_at_15_03_28"" src=""https://cloud.githubusercontent.com/assets/7349616/21075163/14a5507a-bec0-11e6-8a77-70cb6763bbfb.png"">

## Code Sample

No code needed. Once Cocoapods adds realm to the project, builds fail.

## Version of Realm and Tooling

Realm version: ?

Realm/RealmSwift 2.1.1 (auto chosen by cocoa pods)

Xcode version: ?

Xcode 8.2 beta (8C30a)

iOS/OSX version: ?

Sierra 10.12.1 (16B2657)

Dependency manager + version: ?

Cococoapods 1.0.0 via GUI App



",jeffreybergier,jpsim
4431,2016-12-13 00:39:12,"I'm honestly not sure. @i-schuetz seemed convinced it wasn't. But his pod file and project were so complex, there was no way I could tell. But if you think they're the same and want to close this one as a dupe, Thats totally fine. It just seemed like I was hi-jacking his thread with my issue. So I thought I would make a new issue.",jeffreybergier,i-schuetz
4418,2016-12-06 23:58:42,Fixes #4409. /cc @bdash @tgoyne ,jpsim,bdash
4418,2016-12-06 23:58:42,Fixes #4409. /cc @bdash @tgoyne ,jpsim,tgoyne
4418,2016-12-13 00:07:44,"I've decided to revert the object store changes in this PR to isolate the work that needs to happen to update the object store from the simple warning fixes in cocoa.

The object store changes either mean that we'll need to change the `sessionForURL:` implementation or change the public API, perhaps to a non-thread-confined `Realm.session` property. I think both cases are easy to implement, but need to be discussed and aligned across SDKs. In any case, I'm specifically reverting the object store update in this PR to avoid needing to decide on that here.

Can you review again @tgoyne or @bdash?",jpsim,tgoyne
4418,2016-12-13 00:07:44,"I've decided to revert the object store changes in this PR to isolate the work that needs to happen to update the object store from the simple warning fixes in cocoa.

The object store changes either mean that we'll need to change the `sessionForURL:` implementation or change the public API, perhaps to a non-thread-confined `Realm.session` property. I think both cases are easy to implement, but need to be discussed and aligned across SDKs. In any case, I'm specifically reverting the object store update in this PR to avoid needing to decide on that here.

Can you review again @tgoyne or @bdash?",jpsim,bdash
4418,2016-12-13 21:29:00,"Looks like #4246 introduced incorrect error codes. That shouldn't have passed review...

I've fixed the expected error codes in the tests and filed realm/realm-sync-services#638 to report.

@bdash @tgoyne this is ready for review once more.",jpsim,tgoyne
4411,2016-12-05 17:29:55,"This should have the same intended effect as 0b7efa7, without causing 1) Carthage to build this scheme and 2) the Xcode GUI to display this scheme as a framework scheme. /cc @tgoyne ",jpsim,tgoyne
4407,2016-12-03 01:10:33,"This dates back to times when lldb didn't work with encrypted Realms, but that constraint has long been lifted. /cc @tgoyne ",jpsim,tgoyne
4405,2016-12-05 21:56:21,"We have upgraded and the issues seem to be fixed - the app has been updated in the app store. Thank you and @jpsim and @tgoyne for the response and quick fix. We received kudos from our client and everyone there appreciates your hard work, too. - Caylan",semireg,jpsim
4405,2016-12-05 21:56:21,"We have upgraded and the issues seem to be fixed - the app has been updated in the app store. Thank you and @jpsim and @tgoyne for the response and quick fix. We received kudos from our client and everyone there appreciates your hard work, too. - Caylan",semireg,tgoyne
4404,2016-12-02 19:43:28,@jpsim ,tgoyne,jpsim
4403,2016-12-15 19:10:08,@emanuelez would you review this please?,larkost,emanuelez
4399,2016-12-02 03:19:30,embedded dylibs/frameworks are only supported on iOS 8.0 and later (@rpath/Realm.framework/Realm) for architecture arm64,BackWorld,rpath
4398,2016-12-02 02:45:46,"@jpsim 

Changes for compatibility with https://github.com/realm/realm-object-store/pull/270, and some other recent object store changes. All sync tests pass.",austinzheng,jpsim
4396,2016-12-05 16:29:38,"@bdash I sent @TimOliver an email over the weekend with more code and explanation to help explain this situation. If you could kindly connect with him to get the information, it might be of significant help to helping you resolve this issue.

Thanks!",jasper-chan,TimOliver
4396,2016-12-13 18:52:36,You're best to coordinate with @finnschiermer in realm/realm-core#2343 on that. I'll be closing this issue since the best place to continue this conversation will be in realm/realm-core#2343. I hope you'll be active in those conversations.,jpsim,finnschiermer
4394,2016-12-01 10:47:45,"Thank you for reporting this issue and for the example project, @hunganh0403! I was also able to reproduce it, the crash happens during the autorelease pool draining. With memory management diagnostics turned on it seems that the resulting string was deallocated somewhere outside the autorelease pool. 



/cc @bdash, @tgoyne ",stel,bdash
4394,2016-12-01 10:47:45,"Thank you for reporting this issue and for the example project, @hunganh0403! I was also able to reproduce it, the crash happens during the autorelease pool draining. With memory management diagnostics turned on it seems that the resulting string was deallocated somewhere outside the autorelease pool. 



/cc @bdash, @tgoyne ",stel,tgoyne
4393,2016-12-01 12:18:58,"Looks like the client closes the session by itself.. @KieranLafferty please try to keep a strong reference to Realm instance you created.

@austinzheng is this an expected behavior?",stel,austinzheng
4393,2016-12-07 19:38:04,@bdash do you mind looking into this?,jpsim,bdash
4392,2016-12-01 00:29:04,"This reverts commit 0b7efa72137cb761312b444cb188e352edc5cdbc.

By reverting this commit, Xcode will no longer guess that the ""Object Server Tests"" scheme is a framework, and therefore Carthage will no longer attempt to build it as if it was a framework.

Fixes #4343.

This has the unfortunate effect of 1) not doing something sensible when hitting ⌘+B in Xcode and 2) not being able to run the unit tests with Instruments.app.

See [rdar://29407087](http://www.openradar.me/29407087) for details.

/cc @tgoyne ",jpsim,tgoyne
4392,2016-12-01 19:51:43,@tgoyne would be nice to get this in before release 2.1.1 so that Carthage users get this fixed.,jpsim,tgoyne
4391,2016-11-30 23:49:53,"@jpsim @TimOliver 

Changes:
- Session error callback no longer looks up its session, it gets the session directly (see https://github.com/realm/realm-object-store/pull/265)",austinzheng,jpsim
4391,2016-11-30 23:49:53,"@jpsim @TimOliver 

Changes:
- Session error callback no longer looks up its session, it gets the session directly (see https://github.com/realm/realm-object-store/pull/265)",austinzheng,TimOliver
4391,2016-12-01 00:11:52,"Looks good to me, but I'll wait and see what @jpsim says! :)",TimOliver,jpsim
4389,2016-11-29 21:28:19,"@jpsim 
cc. @dhmspector 

Requires https://github.com/realm/realm-object-store/pull/261
Fixes https://github.com/realm/realm-object-store/issues/231

TODO: update submodule pointer once the object store PR is merged

Changes:
- Cocoa binding uses the new `all_logged_in_users` API on the object store’s `SyncManager`
- Added a unit test",austinzheng,jpsim
4389,2016-11-29 21:28:19,"@jpsim 
cc. @dhmspector 

Requires https://github.com/realm/realm-object-store/pull/261
Fixes https://github.com/realm/realm-object-store/issues/231

TODO: update submodule pointer once the object store PR is merged

Changes:
- Cocoa binding uses the new `all_logged_in_users` API on the object store’s `SyncManager`
- Added a unit test",austinzheng,dhmspector
4388,2016-11-29 20:50:26,/cc @austinzheng ,jpsim,austinzheng
4386,2016-11-29 17:23:09,Are those changelog entries accurate? /cc @tgoyne ,jpsim,tgoyne
4382,2016-11-28 21:47:38,"Example compiler output:



Link: https://ci.realm.io/job/objc_pr/4373/configuration=Release,swift_version=2.2,target=tvos/console

If I had to guess, I'd say this happens about once ever ~500 builds.

Maybe something for @larkost to investigate in his spare time? Not super pressing.",jpsim,larkost
4381,2016-11-28 21:36:03,fixes realm/realm-mobile-platform#57 /cc @austinzheng ,jpsim,austinzheng
4380,2016-11-28 20:50:50,/cc @austinzheng ,jpsim,austinzheng
4374,2016-11-26 19:59:32,"This PR is mutually exclusive to https://github.com/realm/realm-cocoa/pull/4364. It fixes dispatching of the `+[RLMSyncUser logInWithCredentials:]` callback to the background thread in case of error or when using accessToken for authentication.

/cc @austinzheng, @jpsim ",stel,austinzheng
4374,2016-11-26 19:59:32,"This PR is mutually exclusive to https://github.com/realm/realm-cocoa/pull/4364. It fixes dispatching of the `+[RLMSyncUser logInWithCredentials:]` callback to the background thread in case of error or when using accessToken for authentication.

/cc @austinzheng, @jpsim ",stel,jpsim
4372,2016-11-27 05:34:09,"@austinzheng thanks so much for your reply! 

Your colleague @jpsim has added a very useful suggestion about `RLMIsInPlayground()` in https://github.com/realm/realm-mobile-platform/issues/57. 

Allowing for this use-case would be awesome 😎 
",DanielAsher,jpsim
4365,2016-11-24 15:38:20,"Add RLMSyncPermissionOffer and RLMSyncPermissionOfferResponse.
Move `RLMSyncManagementObjectStatus` and function to `RLMSyncUtil`.

Unit tests are split another PR because tests don't work until new ROS will be released.

CC @mrackwitz @jpsim",kishikawakatsumi,mrackwitz
4365,2016-11-24 15:38:20,"Add RLMSyncPermissionOffer and RLMSyncPermissionOfferResponse.
Move `RLMSyncManagementObjectStatus` and function to `RLMSyncUtil`.

Unit tests are split another PR because tests don't work until new ROS will be released.

CC @mrackwitz @jpsim",kishikawakatsumi,jpsim
4365,2016-12-02 12:18:49,@jpsim @mrackwitz @bigfish24 Add unit tests for PermissionOffer and PermissionOfferResponse,kishikawakatsumi,mrackwitz
4365,2016-12-02 12:18:49,@jpsim @mrackwitz @bigfish24 Add unit tests for PermissionOffer and PermissionOfferResponse,kishikawakatsumi,bigfish24
4365,2016-12-19 12:48:32,"@jpsim @mrackwitz This PR gets ready for review again. Could you review this?

This PR adds `RLMSyncPermissionOffer`, `RLMSyncPermissionOfferResponse`, `SyncPermissionOffer` and `SyncPermissionOfferResponse` to ObjC and Swift.
These model classes should be same as [realm-sync-services](https://github.com/realm/realm-sync-services/tree/master/object-server/src/node/services/permission/models).

The test confirms that a token can be obtained through `PermissionOffer`, and then `PermissionOfferResponse` works correctly using the token.

Also if `PermissionOffer` expires, the offer cannot be used. 
`PermissionOfferResponse` doesn't work with invalid tokens.

",kishikawakatsumi,mrackwitz
4365,2016-12-20 10:24:35,"@mrackwitz I agreed that `id` properties should be a primary key. But on current ROS implementation, it will abort if there is a difference between ROS models and client models. To be strict, `RLMSyncPermissionChange` and `RLMSyncPermissionOffer` work fine despite changing `id` to a primary key. But if I change `RLMSyncPermissionOfferResponse`'s `id` to a primary key, ROS aborted.

",kishikawakatsumi,mrackwitz
4364,2016-11-24 11:50:13,"Initially this issue was addressed in https://github.com/realm/realm-cocoa-private/issues/186, so I've added a test to handle this in the future.

/cc @austinzheng, @jpsim ",stel,austinzheng
4364,2016-11-24 11:50:13,"Initially this issue was addressed in https://github.com/realm/realm-cocoa-private/issues/186, so I've added a test to handle this in the future.

/cc @austinzheng, @jpsim ",stel,jpsim
4362,2016-11-29 19:18:26,"@mrackwitz @TimOliver since the two of you built the iCloud/CloudKit integration, which term is more appropriate for this auth provider? If it's CloudKit, then we should probably merge this and later also rename the constructors, constants, documentation, etc to reflect that.

If iCloud is more appropriate, then we should take the opportunity of RMP being in beta to change the identifier before it's too late to make breaking changes like these.",jpsim,mrackwitz
4362,2016-11-29 19:18:26,"@mrackwitz @TimOliver since the two of you built the iCloud/CloudKit integration, which term is more appropriate for this auth provider? If it's CloudKit, then we should probably merge this and later also rename the constructors, constants, documentation, etc to reflect that.

If iCloud is more appropriate, then we should take the opportunity of RMP being in beta to change the identifier before it's too late to make breaking changes like these.",jpsim,TimOliver
4362,2016-12-06 21:50:46,"Speaking with @mrackwitz ""offline"", his thoughts on this are that there's no such thing as ""iCloud authentication"", that the APIs we use to implement this are all in CloudKit, and so we should consistently use that naming.

So we'll merge this PR and file a new issue to update our API and documentation nomenclature to replace uses of ""iCloud"" with ""CloudKit"".",jpsim,mrackwitz
4358,2016-11-22 16:35:33,"This follows what [`realm/realm-java/CHANGELOG.md`](https://github.com/realm/realm-java/blob/master/CHANGELOG.md) does to distinguish between breaking changes to the sync APIs ([which are in beta](https://realm.io/news/realm-objc-swift-2.0/#platform-extensions-are-in-beta)) and the rest of our APIs, which follow semver.

I've opted to refer to ""Sync"" rather than ""Platform Extensions"" or ""Object Server"" because ""Sync"" is the term we use all over our API naming (e.g. `RLMSyncUser`, `RLMSyncConfiguration`, etc.) and I've opted not to limit this to ""API"" breaking changes but breaking changes in general in case the transmit protocol version is bumped, or file format, or schema, etc.

/cc @bmunkholm @austinzheng ",jpsim,bmunkholm
4358,2016-11-22 16:35:33,"This follows what [`realm/realm-java/CHANGELOG.md`](https://github.com/realm/realm-java/blob/master/CHANGELOG.md) does to distinguish between breaking changes to the sync APIs ([which are in beta](https://realm.io/news/realm-objc-swift-2.0/#platform-extensions-are-in-beta)) and the rest of our APIs, which follow semver.

I've opted to refer to ""Sync"" rather than ""Platform Extensions"" or ""Object Server"" because ""Sync"" is the term we use all over our API naming (e.g. `RLMSyncUser`, `RLMSyncConfiguration`, etc.) and I've opted not to limit this to ""API"" breaking changes but breaking changes in general in case the transmit protocol version is bumped, or file format, or schema, etc.

/cc @bmunkholm @austinzheng ",jpsim,austinzheng
4355,2016-11-21 13:26:48,"Enables metadata reset implemented in https://github.com/realm/realm-object-store/pull/213, fixes https://github.com/realm/realm-cocoa/issues/4264.

/cc @austinzheng, @jpsim ",stel,austinzheng
4355,2016-11-21 13:26:48,"Enables metadata reset implemented in https://github.com/realm/realm-object-store/pull/213, fixes https://github.com/realm/realm-cocoa/issues/4264.

/cc @austinzheng, @jpsim ",stel,jpsim
4354,2016-12-07 03:42:50,"@jpsim I've finally got the project working after weeks of hacking... All this got started because of a pod update and I don't want to disturb it again for the moment as we are trying to release... 

I've no idea why it all happened but my suspicion is that two pod setups are fighting, possibly realm and parse, and it's possibly to do with architecture settings (or perhaps some weird settings between my settings and the pods settings I'm not sure).

For the time being it is working. @TimOliver does have my project file if you wish to investigate more. Thanks very much for your diligent follow up!",LiamInJapan,TimOliver
4353,2016-11-22 08:55:39,This is interesting. @RobinCaroff Can you confirm @jpsims hypothesis about using large transactions with many changes to only few objects?,finnschiermer,jpsims
4344,2016-11-19 00:42:27,/cc @tgoyne ,jpsim,tgoyne
4340,2016-11-17 21:44:26,"`RLMSetTreatFakeObjectAsRLMObject(NO)` needs to be called after every test, not
just after the Schema test suite is complete. It happened to work when running
all tests because an earlier test would initialize the shared schema before the
Schema tests were ever run.

@jpsim ",tgoyne,jpsim
4338,2016-11-30 15:53:48,"I like the idea of specifying the the queue explicitly (with default value).

Reposting @jpsim 's suggestion from #4364 here:
> What could be done, however, is providing an optional default argument of callbackQueue: DispatchQueue? = .main, since the vast majority of users will want to handle the callback on the main queue, but this still leaves the flexibility for users wanting to avoid that overhead to pass in callbackQueue: nil.",stel,jpsim
4324,2016-11-11 22:54:40,Continued from #4275. Creating a new PR to not lose the work that @kishikawakatsumi did in case we want to revert to that approach.,jpsim,kishikawakatsumi
4324,2016-11-12 05:32:24,"This is now ready for review /cc @kishikawakatsumi @mrackwitz @bigfish24.
",jpsim,mrackwitz
4324,2016-11-12 05:32:24,"This is now ready for review /cc @kishikawakatsumi @mrackwitz @bigfish24.
",jpsim,bigfish24
4324,2016-11-12 05:32:24,"This is now ready for review /cc @kishikawakatsumi @mrackwitz @bigfish24.
",jpsim,kishikawakatsumi
4324,2016-11-14 20:06:41,"I've reworked the implementation again to not require any changes to the object store, reporting a custom object name to the object store rather than storing a separate ""table name"" member in `realm::ObjectSchema`.

@tgoyne could you please take a look?
",jpsim,tgoyne
4322,2016-11-11 00:20:28,As described in https://github.com/realm/realm-cocoa-private/issues/376. /cc @austinzheng ,jpsim,austinzheng
4320,2016-11-10 23:29:58,As described in realm/realm-cocoa-private#376. /cc @austinzheng ,jpsim,austinzheng
4319,2016-11-10 22:30:20,/cc @austinzheng ,jpsim,austinzheng
4316,2016-11-10 04:44:50,"/cc @ironage 
",bdash,ironage
4312,2016-11-08 22:22:56,As tracked in realm/realm-cocoa-private#353. Depends on #4304 and #4311. /cc @austinzheng ,jpsim,austinzheng
4311,2016-11-08 21:52:33,"To match other bindings. /cc @austinzheng 

Depends on #4304.",jpsim,austinzheng
4305,2016-11-08 16:52:34,"@tgoyne, can you speak to whether the observed behavior is expected?
",bdash,tgoyne
4304,2016-11-07 19:55:32,Fixes #4303. /cc @austinzheng ,jpsim,austinzheng
4294,2016-11-08 16:59:05,"@mrackwitz, do you know whether it's expected that different pods can conflict in this fashion?
",bdash,mrackwitz
4293,2016-11-11 09:06:00,"I just found out about the magic of `@testable`!
",danielgindi,testable
4293,2016-11-23 08:15:30,"I'll change the tests.

About ENABLE_TESTABILITY, Apple says that it's meant for exposing the internal stuff so the tests can access them. I'm guessing that when they are not exposed, they get extra optimizations.
Optimizations did break compilation a few times in older Xcode versions, as we've experienced with Charts a few times. Where we had to just separate a line of code to two to make the library not crash.

So I get what you're saying. We can't trust the optimizer.

But this means that we can't run deeper tests with `@testable`, which is a very neat feature of Xcode.
Maybe in the future you can setup the configuration to run certain tests only with ENABLE_TESTABILITY enabled for Debug & Release, while running the rest of the tests with real Release binaries.",danielgindi,testable
4288,2016-11-03 09:38:28,"Recently I updated the Realm.framework in my app from version 2.0.2 to 2.0.3 and now the app crashes randomly and I can't find a specific reproducible scenario where it crashes. With Realm version 2.0.2 and below I never run into any problems.

Sometimes a receive this error:
`libc++abi.dylib: terminating with uncaught exception of type realm::_impl::TransactLogParser::BadTransactLog: Bad transaction log.`
Maybe this is related to #4166, but I use Realm only locally without any Object Server.

And today it was the first time that I got this error message:


I don't think that the second error is related to the first one, but maybe, so I wanted to share it with you.

## Goals

What do you want to achieve?
Basically I'm using Realm for offline synchronization, so users can access their data without internet connection. Every read/write action is inside a `@autorelease {}` and uses a new RLMRealm instance, furthermore I tried to keep every database access as short as possible to avoid #4229.

## Expected Results

What did you expected to happen?
Realm shouldn't crash, because with older versions there were no crashes.

## Actual Results

What did happened instead?
Realm crashes randomly.

## Steps to Reproduce

What are steps we can follow to reproduce this issue?
At the moment I can't provide any reproduction steps.

## Code Sample

Provide a code sample or test case that highlights the issue.
If relevant, include your model definitions.
For larger code samples, links to external gists/repositories are preferred.
Alternatively share confidentially via mail to help@realm.io.
Full Xcode projects that we can compile ourselves are ideal!

## Version of Realm and Tooling

[In the CONTRIBUTING guidelines](https://git.io/vgxJO), you will find a script,
which will help determining these versions.

Realm version: 2.0.3

Xcode version: 8.1

iOS/OSX version: 10.1.1

Dependency manager + version: none, I use the precompiled Realm.framework (ObjC version)
",BlueVirusX,autorelease
4283,2016-11-01 21:36:06,"## Goals

Creating a command-line application facilitating the Realm framework as persistency engine.

## Expected Results

Successfully building & running the application.

## Actual Results

The build process completes successfully, but when launching the command-line application an error message pops up, reading

    dyld: Library not loaded: @rpath/RealmSwift.framework/Versions/A/RealmSwift
      Referenced from: /Users/usr/Library/Developer/Xcode/DerivedData/Persistency-gckyeswmmodbuvbqrkselxiuhwqr/Build/Products/Debug/Persistency
      Reason: image not found

Having Xcode copying the two Realm frameworks/libraries to the product directory results in another runtime error

    dyld: Library not loaded: @rpath/libswiftCore.dylib
      Referenced from: /Users/usr/Library/Developer/Xcode/DerivedData/Persistency-gckyeswmmodbuvbqrkselxiuhwqr/Build/Products/Debug/RealmSwift.framework/Versions/A/RealmSwift
      Reason: image not found

According to some sources on the internet, the corresponding Swift dylibs have to be manually added

* libswiftCore.dylib;
* libswiftCoreGraphics.dylib;
* libswiftDarwin.dylib;
* libswiftDispatch.dylib;
* libswiftFoundation.dylib;
* libswiftIOKit.dylib;
* libswiftObjectiveC.dylib.

But again to no avail, another runtime error message reading

    dyld: Symbol not found: __TMVs11AnyHashable
      Referenced from: /Users/usr/Library/Developer/Xcode/DerivedData/Persistency-gckyeswmmodbuvbqrkselxiuhwqr/Build/Products/Debug/RealmSwift.framework/Versions/A/RealmSwift
      Expected in: /Users/usr/Library/Developer/Xcode/DerivedData/Persistency-gckyeswmmodbuvbqrkselxiuhwqr/Build/Products/Debug/libswiftCore.dylib
     in /Users/usr/Library/Developer/Xcode/DerivedData/Persistency-gckyeswmmodbuvbqrkselxiuhwqr/Build/Products/Debug/RealmSwift.framework/Versions/A/RealmSwift
    (lldb) 

Using the ""ready-made"" (pre-compiled binary) frameworks from GitHub, or just  building my own version from the sources doesn't change anything at all; it's always one and the same outcome.

## Steps to Reproduce

1. Create a new command-line tool (Swift) project in Xcode;
2. Simply add the two Realm frameworks to the project (without importing any of these in any of the Swift files;
3. Build & run the project.

## Code Sample

    import Foundation
    print(""Hello, World!"")

## Version of Realm and Tooling

[In the CONTRIBUTING guidelines](https://git.io/vgxJO), you will find a script,
which will help determining these versions.

Realm version: 2.0.3 (cloned 01/11/2016 from the GitHub master branch)

Xcode version: 8.1

iOS/OSX version: 10.12

Dependency manager + version: ?
",Sil68,rpath
4283,2016-11-08 02:19:18,"There are two issues at play here:
1. When using a dynamic framework from a command-line app, your app needs to know where to find the dynamic framework at runtime in order to load it. Realm Swift's binaries are built with an `@rpath`-relative install name, which means that by default your app will look for the framework in the directories listed in the `LD_RUNPATH_SEARCH_PATHS` (""Runpath Search Paths"") build setting. For command-line applications this build setting has no default value as there's no obvious default location to find frameworks for a command-line application.
2. When building a Swift command-line app, Xcode _statically_ links the Swift runtime into the application, rather than dynamically linking it like it does for normal GUI apps. This is fine if the application itself is the only thing that uses Swift, but it is problematic if frameworks you depend on do as well, as the frameworks have no way to resolve symbols against the application.

Note that neither of these issues is specific to Realm, and they'll be encountered when attempting to use any Swift framework from a command-line application.

Addressing both of these problems is a little involved, but thankfully [this blog post by Alsey Coleman Miller](https://colemancda.github.io/programming/2015/02/12/embedded-swift-frameworks-osx-command-line-tools/) outlines an approach that should do the trick.
",bdash,rpath
4275,2016-10-28 08:18:54,"Related: https://github.com/realm/realm-sync-services/pull/236

Add support for the client permission change.
This PR add:
- Data schema for the client permission (`PermissionChange` and a base class)
- Add convenience method for retrieving `__management.realm`
- Unit tests

The permission management requires the same table in both Realm and RealmSwift. I created `PermissionChange` class in both Realm and RealmSwift. (Then add `@compatibility_alias RLMSyncPermissionChange` for the Cocoa naming conventions. But maybe it is unnecessary.)

Unit tests will fail due to the same class exists in Realm and RealmSwift.



Do you have any ideas avoiding it? @mrackwitz @austinzheng @jpsim 

For unit tests, it needs to add the following configurations to `configuration.yml` before tests.



How should I achieve it? @austinzheng 

CC @mrackwitz @cmelchior @bigfish24 
",kishikawakatsumi,compatibility
4275,2016-10-28 08:18:54,"Related: https://github.com/realm/realm-sync-services/pull/236

Add support for the client permission change.
This PR add:
- Data schema for the client permission (`PermissionChange` and a base class)
- Add convenience method for retrieving `__management.realm`
- Unit tests

The permission management requires the same table in both Realm and RealmSwift. I created `PermissionChange` class in both Realm and RealmSwift. (Then add `@compatibility_alias RLMSyncPermissionChange` for the Cocoa naming conventions. But maybe it is unnecessary.)

Unit tests will fail due to the same class exists in Realm and RealmSwift.



Do you have any ideas avoiding it? @mrackwitz @austinzheng @jpsim 

For unit tests, it needs to add the following configurations to `configuration.yml` before tests.



How should I achieve it? @austinzheng 

CC @mrackwitz @cmelchior @bigfish24 
",kishikawakatsumi,mrackwitz
4275,2016-10-28 08:18:54,"Related: https://github.com/realm/realm-sync-services/pull/236

Add support for the client permission change.
This PR add:
- Data schema for the client permission (`PermissionChange` and a base class)
- Add convenience method for retrieving `__management.realm`
- Unit tests

The permission management requires the same table in both Realm and RealmSwift. I created `PermissionChange` class in both Realm and RealmSwift. (Then add `@compatibility_alias RLMSyncPermissionChange` for the Cocoa naming conventions. But maybe it is unnecessary.)

Unit tests will fail due to the same class exists in Realm and RealmSwift.



Do you have any ideas avoiding it? @mrackwitz @austinzheng @jpsim 

For unit tests, it needs to add the following configurations to `configuration.yml` before tests.



How should I achieve it? @austinzheng 

CC @mrackwitz @cmelchior @bigfish24 
",kishikawakatsumi,austinzheng
4275,2016-10-28 08:18:54,"Related: https://github.com/realm/realm-sync-services/pull/236

Add support for the client permission change.
This PR add:
- Data schema for the client permission (`PermissionChange` and a base class)
- Add convenience method for retrieving `__management.realm`
- Unit tests

The permission management requires the same table in both Realm and RealmSwift. I created `PermissionChange` class in both Realm and RealmSwift. (Then add `@compatibility_alias RLMSyncPermissionChange` for the Cocoa naming conventions. But maybe it is unnecessary.)

Unit tests will fail due to the same class exists in Realm and RealmSwift.



Do you have any ideas avoiding it? @mrackwitz @austinzheng @jpsim 

For unit tests, it needs to add the following configurations to `configuration.yml` before tests.



How should I achieve it? @austinzheng 

CC @mrackwitz @cmelchior @bigfish24 
",kishikawakatsumi,bigfish24
4275,2016-10-28 08:18:54,"Related: https://github.com/realm/realm-sync-services/pull/236

Add support for the client permission change.
This PR add:
- Data schema for the client permission (`PermissionChange` and a base class)
- Add convenience method for retrieving `__management.realm`
- Unit tests

The permission management requires the same table in both Realm and RealmSwift. I created `PermissionChange` class in both Realm and RealmSwift. (Then add `@compatibility_alias RLMSyncPermissionChange` for the Cocoa naming conventions. But maybe it is unnecessary.)

Unit tests will fail due to the same class exists in Realm and RealmSwift.



Do you have any ideas avoiding it? @mrackwitz @austinzheng @jpsim 

For unit tests, it needs to add the following configurations to `configuration.yml` before tests.



How should I achieve it? @austinzheng 

CC @mrackwitz @cmelchior @bigfish24 
",kishikawakatsumi,cmelchior
4275,2016-10-28 08:18:54,"Related: https://github.com/realm/realm-sync-services/pull/236

Add support for the client permission change.
This PR add:
- Data schema for the client permission (`PermissionChange` and a base class)
- Add convenience method for retrieving `__management.realm`
- Unit tests

The permission management requires the same table in both Realm and RealmSwift. I created `PermissionChange` class in both Realm and RealmSwift. (Then add `@compatibility_alias RLMSyncPermissionChange` for the Cocoa naming conventions. But maybe it is unnecessary.)

Unit tests will fail due to the same class exists in Realm and RealmSwift.



Do you have any ideas avoiding it? @mrackwitz @austinzheng @jpsim 

For unit tests, it needs to add the following configurations to `configuration.yml` before tests.



How should I achieve it? @austinzheng 

CC @mrackwitz @cmelchior @bigfish24 
",kishikawakatsumi,jpsim
4265,2016-10-26 20:42:17,"/cc @tgoyne 
",jpsim,tgoyne
4264,2016-10-26 15:04:52,"`[RLMSyncManager sharedManager]` throws `Realm file decryption failed` exception if `sync_metadata.realm` was created with the encryption key which in some reason is not equal to the one stored in Keychain.
Related issue was reported for Browser: https://github.com/realm/realm-browser-osx/issues/228. The easiest way to reproduce this is just delete `io.realm.sync.keychain` item from the keychain.

Is it safe to just delete `sync_metadata.realm` in this case?

/c @austinzheng, @jpsim 
",stel,austinzheng
4264,2016-10-26 15:04:52,"`[RLMSyncManager sharedManager]` throws `Realm file decryption failed` exception if `sync_metadata.realm` was created with the encryption key which in some reason is not equal to the one stored in Keychain.
Related issue was reported for Browser: https://github.com/realm/realm-browser-osx/issues/228. The easiest way to reproduce this is just delete `io.realm.sync.keychain` item from the keychain.

Is it safe to just delete `sync_metadata.realm` in this case?

/c @austinzheng, @jpsim 
",stel,jpsim
4262,2016-10-26 01:03:48,"This PR introduces the publicly ready version of Realm Puzzle demo app.

![simulator screen shot oct 25 2016 5 54 42 pm](https://cloud.githubusercontent.com/assets/429119/19709644/0aec7f7e-9add-11e6-85d2-06646a2b8a53.png)
## Features
- Rebranded for Realm's latest styling.
- Updated to use the public version of Realm Mobile Platform.
- Triple-tap with three fingers to reset the puzzle.
- A login screen that will automatically generate the IP address as well as remember the user credentials from the last time.

/cc @jpsim 
",TimOliver,jpsim
4261,2016-10-25 18:46:38,"/cc @tgoyne @austinzheng 
",jpsim,austinzheng
4261,2016-10-25 18:46:38,"/cc @tgoyne @austinzheng 
",jpsim,tgoyne
4260,2016-10-25 23:31:08,"Hi @crrobinson14!

Thanks for reporting this to us! 

Hmm, one thing I might initially try suggesting. In your Safari extension, can you please try encapsulating the code blocks that involving instantiating `Realm` and subsequently performing the read/writes in an `@autoreleasepool`?

It's possible that there are cached references to the `Realm` instance still in memory by the time the extension process is terminated, so Realm isn't getting a chance to clean up after itself. If this is the case, enclosing all operations involving `Realm` in an `@autoreleasepool` will explicitly force Realm to release itself immediately after your code has finished execution.

Please let me know if that helps. If it doesn't, would you be open to sharing your code with us at all?

Thanks!
",TimOliver,autoreleasepool
4259,2016-10-25 17:48:08,"## Goals

Iterate unmanaged LinkingObjects property




## Expected Results

Should not crash.
## Actual Results

Crash occurred at L95 in RLMCollection.mm `Class accessorClass = _info->rlmObjectSchema.accessorClass;`. Because `_info` is `NULL`


## Steps to Reproduce

Execute above code after `v1.1.0`.
To be strict, this crash occurs from 5ae668399f1f83b55917456c21c898f318de9137.
## Code Sample




## Version of Realm and Tooling

Realm version: v1.1.0 or after
Xcode version: 8.0

CC @tgoyne @jpsim 
",kishikawakatsumi,jpsim
4259,2016-10-25 17:48:08,"## Goals

Iterate unmanaged LinkingObjects property




## Expected Results

Should not crash.
## Actual Results

Crash occurred at L95 in RLMCollection.mm `Class accessorClass = _info->rlmObjectSchema.accessorClass;`. Because `_info` is `NULL`


## Steps to Reproduce

Execute above code after `v1.1.0`.
To be strict, this crash occurs from 5ae668399f1f83b55917456c21c898f318de9137.
## Code Sample




## Version of Realm and Tooling

Realm version: v1.1.0 or after
Xcode version: 8.0

CC @tgoyne @jpsim 
",kishikawakatsumi,tgoyne
4246,2016-10-21 11:44:56,"Currently only errors that could be returned from `SyncUser.authenticate...` are handled:
- `RLMSyncAuthErrorInvalidCredential`
- `RLMSyncAuthErrorUserDoesNotExist`
- `RLMSyncAuthErrorUserAlreadyExists`

Any other non-successful HTTP codes are still treated as `RLMSyncErrorHTTPStatusCodeError`, but may contain specific error messages from server. This restriction could be removed by defining additional error codes.

I think error reporting needs to be discussed, my idea is to wrap all the network, parsing, etc errors into sync-specific ones, it doesn't make much sense for users to get `NSCocoaErrorDomain` errors from sync api calls in most cases, but this errors still could be included by `NSUnderlyingErrorKey` into `RLMSyncErrorDomain` errors. Currently it's not a part of this PR.

/cc @austinzheng, @jpsim 
",stel,austinzheng
4246,2016-10-21 11:44:56,"Currently only errors that could be returned from `SyncUser.authenticate...` are handled:
- `RLMSyncAuthErrorInvalidCredential`
- `RLMSyncAuthErrorUserDoesNotExist`
- `RLMSyncAuthErrorUserAlreadyExists`

Any other non-successful HTTP codes are still treated as `RLMSyncErrorHTTPStatusCodeError`, but may contain specific error messages from server. This restriction could be removed by defining additional error codes.

I think error reporting needs to be discussed, my idea is to wrap all the network, parsing, etc errors into sync-specific ones, it doesn't make much sense for users to get `NSCocoaErrorDomain` errors from sync api calls in most cases, but this errors still could be included by `NSUnderlyingErrorKey` into `RLMSyncErrorDomain` errors. Currently it's not a part of this PR.

/cc @austinzheng, @jpsim 
",stel,jpsim
4246,2016-11-30 12:19:02,"@austinzheng, @jpsim any other feedback for this?",stel,jpsim
4245,2016-10-25 22:35:23,"Hi @jaybowong!

Thanks for your issue! I believe what's happening here is that because you're doing a lot of manual moving of item values inside your migration block, that's causing a non-trivial number of items to become paged into memory at once, subsequently hitting the device's mmap memory limit.

The easiest way to mitigate this would be to encircle each code block involving accessing Realm properties in an `@autoreleasepool`. This way, they'll be explicitly drained at the end of each iteration, ensuring not too much memory is consumed at once.

Let me know if this helps! Thanks!
",TimOliver,autoreleasepool
4243,2016-10-20 17:10:05,"There don't seem to be any user-facing changes from the sync update: https://github.com/realm/realm-sync/compare/v1.0.0-BETA-2.0...v1.0.0-BETA-3.1

/cc @austinzheng @tgoyne 
",jpsim,austinzheng
4243,2016-10-20 17:10:05,"There don't seem to be any user-facing changes from the sync update: https://github.com/realm/realm-sync/compare/v1.0.0-BETA-2.0...v1.0.0-BETA-3.1

/cc @austinzheng @tgoyne 
",jpsim,tgoyne
4241,2016-12-12 06:56:26,"Hi ,

My app on appstore is also crashing with crash logs on update . Like if user try to update v2.5 (ios9)->v2.6(ios10).

0. Crashed: com.apple.main-thread
0  libswiftCore.dylib             0x101aa8a08 _TFs16_assertionFailedFTVs12StaticStringSSS_Su5flagsVs6UInt32_Os5Never + 164
1  libswiftCore.dylib             0x101ac87b8 swift_unexpectedError_merged + 476
2  libswiftCore.dylib             0x101ac85c0 swift_unexpectedError + 26
3  Justproperty                   0x100235970 specialized specialized _insertionSort<A where ...> (inout A, subRange : Range<A.Index>, by : inout (A.Iterator.Element, A.Iterator.Element) -> Bool) -> () (NotificationAlertsModel.swift)
4  Justproperty                   0x100333174 specialized AppDelegate.removeReadNotifications() -> () (NotificationAlertsModel.swift)
5  Justproperty                   0x100333928 specialized AppDelegate.application(UIApplication, didFinishLaunchingWithOptions : [UIApplicationLaunchOptionsKey : Any]?) -> Bool (AppDelegate.swift:67)
6  Justproperty                   0x10032ea14 @objc AppDelegate.application(UIApplication, didFinishLaunchingWithOptions : [UIApplicationLaunchOptionsKey : Any]?) -> Bool (AppDelegate.swift)
7  UIKit                          0x18a7db100 -[UIApplication _handleDelegateCallbacksWithOptions:isSuspended:restoreState:] + 400
8  UIKit                          0x18a9eb858 -[UIApplication _callInitializationDelegatesForMainScene:transitionContext:] + 3524
9  UIKit                          0x18a9f15c8 -[UIApplication _runWithMainScene:transitionContext:completion:] + 1656
10 UIKit                          0x18aa05e60 __84-[UIApplication _handleApplicationActivationWithScene:transitionContext:completion:]_block_invoke.3137 + 48
11 UIKit                          0x18a9ee5ac -[UIApplication workspaceDidEndTransaction:] + 168
12 FrontBoardServices             0x1864b58bc __FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + 36
13 FrontBoardServices             0x1864b5728 -[FBSSerialQueue _performNext] + 176
14 FrontBoardServices             0x1864b5ad0 -[FBSSerialQueue _performNextFromRunLoopSource] + 56
15 CoreFoundation                 0x1848bc278 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24
16 CoreFoundation                 0x1848bbbc0 __CFRunLoopDoSources0 + 524
17 CoreFoundation                 0x1848b97c0 __CFRunLoopRun + 804
18 CoreFoundation                 0x1847e8048 CFRunLoopRunSpecific + 444
19 UIKit                          0x18a7d42b0 -[UIApplication _run] + 608
20 UIKit                          0x18a7cf034 UIApplicationMain + 208
21 Justproperty                   0x1000af2ac main (AppDelegate.swift:22)
22 libdispatch.dylib              0x1837cc5b8 (Missing)

I think this is crashing because of Realm swift. But in debug mode I am not able to find this crash at all. This happens on live build only.

here is my appdelegate

func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
        
        self.migrateRealm()
        self.resetLoginForiOS10()
        GoogleTagManager.sharedInstance.tagManagerSetTrackerId(self)
        Fabric.with([Crashlytics.self])
        // this is for app boy integration
        Appboy.start(withApiKey: Constants.AppBoy_APPID, in: application, withLaunchOptions: launchOptions)
        //PushNotificationSetup.sharedInstance.setupForPushNotifications()
        self.registerForPushNotifications(application: application)
        UIUtils.setAppearanceInApplication()
        
        GMSServices.provideAPIKey(googleMapsAPIKey)
        
        getImgResolutionOfDeviceAppRunningOn()
        
        FBSDKApplicationDelegate.sharedInstance().application(application, didFinishLaunchingWithOptions: launchOptions)
        
        saveAppLaunchInPersistence()
        
        saveStatusForSavingNotificationInPersistence()
        
        setEnquiryFormData()
        
        if let unrwappedWindow = FirstViewControllerUtils.instantiateFirstViewController(window) {
            window = unrwappedWindow
        }
        self.instantiateRootViewController()
        
        //self.removeReadNotifications()
        UIApplication.shared.setStatusBarStyle(.lightContent, animated: false)
        
        if let notification = launchOptions?[UIApplicationLaunchOptionsKey.remoteNotification] as? [String: AnyObject] {
            //first save notification,then push notification
            self.isRemoteNotificationAppear=true
            PushNotificationSetup.sharedInstance.saveNotification(notification)
            notificationPayload = notification
        }



here is my removeNotification method

func removeReadNotifications()->Void{
        let notifications:[NotificationAlertsModel] = NotificationAlertsModel.getNotificationListIrrespectiveOfCountry()
        if notifications.count>0{
            for notification in notifications{
                if notification.isSelected{
                    if notification.savedAlertPubDateList.count>0{
                        removePubDateForSavedAlert(notification)
                    }else if notification.recommendedListing.count>0{
                        removeAllListingForNotification(notification)
                    }
                    notification.delete()
                }
            }
        }
    } 

where NotificationAlertsModel is realm object.

Please help its very critical


",Sunitadaffodil,objc
4239,2016-10-19 23:44:39,"## Goals

I'm trying to create a Realm model using realm-cocoa that I will also be able to use in Objective-C, via a shared framework.
## Expected Results

When I create a Swift model, I always like to namespace it for Objective-C using a prefix, using `@objc(PFXClassName)`. This allows me to have more Objective-C-friendly interfaces for my Swift classes.
## Actual Results

If I expose a model class to Objective-C using `@objc` and provide a name (either different from or the same as the model's classname), Realm seems to think that any `RLMArray` properties on the model are actually `id` instead of the proper `RLMArray` type. The only way to resolve this is to remove the name declaration from `@objc` attribute.

An example stack trace from the failure:


## Steps to Reproduce

Download the project zip file attached ([RLMArrayIssueTest.zip](https://github.com/realm/realm-cocoa/files/540491/RLMArrayIssueTest.zip)), and run `pod install` to install the single dependency (Realm). Run the test target and observe that the first test, which instantiates a model without a custom `@objc` name passes, while the second test fails.
## Code Sample

Instantiating this class works without an issue:



Instantiating this one fails:



Notice that the only difference is the declaration of the class name to be exposed to Objective-C.
## Version of Realm and Tooling

Realm version: 2.0.2

Xcode version: 8.1 beta (8T47)

iOS/OSX version: 10.1 Beta 5

Dependency manager + version: Cocoapods 1.1.0-rc3
",stevenp,objc
4239,2016-10-31 17:12:23,"@jpsim I see that you're tracking a similar issue in #4005, but the difference is that my issue doesn't seem to have an obvious workaround. Are you aware of a way to get around this issue other than not providing a custom `@objc` classname?
",stevenp,objc
4235,2016-10-19 00:28:51,"Making a PR so CI can run. @jpsim 

Changes:
- Improved some test code
- Removed a NSLog
- reset script now deletes additional test folders
",austinzheng,jpsim
4234,2016-10-18 22:50:11,"Object Store diff: https://github.com/realm/realm-object-store/compare/5856f32f899ddeb0d44cdf0ca0fb965ca85c4d8c...13ec442f7f9f9e020e0e4a83c891d312c3fed953

Fixes #3412 and #4190.

/cc @tgoyne @austinzheng
",jpsim,austinzheng
4234,2016-10-18 22:50:11,"Object Store diff: https://github.com/realm/realm-object-store/compare/5856f32f899ddeb0d44cdf0ca0fb965ca85c4d8c...13ec442f7f9f9e020e0e4a83c891d312c3fed953

Fixes #3412 and #4190.

/cc @tgoyne @austinzheng
",jpsim,tgoyne
4233,2016-10-18 21:17:09,"@jpsim 

Kicking this off to see what CI thinks...

Changes:
- Re-enabled Swift tests
- Re-enabled some disabled Objective-C tests
- Base test case class no longer terminates server process upon tearDown
",austinzheng,jpsim
4230,2016-10-17 21:43:26,"We never updated this for API changes in Swift 3. Fixes #4225. /cc @austinzheng 
",jpsim,austinzheng
4229,2016-11-11 09:07:28,"@kevincador There is an interim solution that fixes your problem of inflated realm sizes but there is a catch. 

Do all your background async db read/write transactions code blocks in a single serialized dispatch queue in swift. Now you have at most 1 version of db in non-ui thread.

The catch is that of course, you will block other realm async background code blocks and you have just manually ""removed"" the ""concurrency"" feature of realm. On the other hand, you only block other background realm work, so UI is not effected. There is a fundamental difference between concurrency and speed. Concurrency is not speed. So with this method, you only sacrifice concurrency, but not speed.  ~~Parallel writes~~Multiversioning in realm, or any other ~~concurrent~~/mvcc systems which allows limited concurrency,  are not free and are actually very costly.

Edited: remove the incorrect note about parallel writes per @bmunkholm comments and further cleaned up the reply.
",diegomontoya,bmunkholm
4229,2016-11-11 10:02:40,"@dieguoyomontoya Just to clarify: Parallel writes can not happen in Realm. Only one write transaction is possible at a time (making it impossible for you to create conflicts).
",bmunkholm,dieguoyomontoya
4219,2016-11-10 01:25:49,"@tgoyne @bdash can one of you please review this too?
",jpsim,tgoyne
4219,2016-11-10 01:25:49,"@tgoyne @bdash can one of you please review this too?
",jpsim,bdash
4219,2016-11-14 21:24:05,"@bdash do you have any further requests for modifications to this PR?
",jpsim,bdash
4215,2016-11-09 15:48:03,"@wirakoon78 were you able to identify the problem? Do you need any other help with this?
",stel,wirakoon78
4210,2016-10-11 21:06:58,"Like the one that happened in https://ci.realm.io/job/objc_pr/configuration=Release,swift_version=3.0,target=ios-static/4193/console /cc @austinzheng 


",jpsim,austinzheng
4209,2016-10-11 20:05:18,"@jpsim 

The only private header files that should be added to the `Realm` and `Realm iOS static` targets are those used by the private module. This PR removes private header files not used by the module from those targets.
",austinzheng,jpsim
4209,2016-10-11 21:34:29,"@jpsim Disabling module debugging for the static library (like the error message recommends) fixed the problem. (This isn't disabling debugging, period; it's just changing the way debug information is emitted. See: http://stackoverflow.com/questions/36265490/turning-off-clang-enable-module-debugging-consequences)

Fixes: #4205.
",austinzheng,jpsim
4208,2016-10-11 19:13:42,"@jpsim @bdash @tgoyne 

Fixes #4198 

We have Swift sync server tests, but they're disabled right now. I'll fix them in a separate PR.
",austinzheng,jpsim
4208,2016-10-11 19:13:42,"@jpsim @bdash @tgoyne 

Fixes #4198 

We have Swift sync server tests, but they're disabled right now. I'll fix them in a separate PR.
",austinzheng,bdash
4208,2016-10-11 19:13:42,"@jpsim @bdash @tgoyne 

Fixes #4198 

We have Swift sync server tests, but they're disabled right now. I'll fix them in a separate PR.
",austinzheng,tgoyne
4198,2016-10-08 00:59:34,"Right now, the Swift SDK uses a `(SyncUser, URL)` tuple to define a configuration for sync. I propose this be changed to a `SyncConfiguration` struct, much like how Objective-C works. Doing so will give us room to add more configuration options in the future without forcing breaking changes or creating awkwardly large tuple types.

We made this design decision quite a few months ago, before the overall shape of the binding APIs was clear, and never revisited the decision. We should do so before leaving beta.

@jpsim @bdash @tgoyne 
",austinzheng,jpsim
4198,2016-10-08 00:59:34,"Right now, the Swift SDK uses a `(SyncUser, URL)` tuple to define a configuration for sync. I propose this be changed to a `SyncConfiguration` struct, much like how Objective-C works. Doing so will give us room to add more configuration options in the future without forcing breaking changes or creating awkwardly large tuple types.

We made this design decision quite a few months ago, before the overall shape of the binding APIs was clear, and never revisited the decision. We should do so before leaving beta.

@jpsim @bdash @tgoyne 
",austinzheng,bdash
4198,2016-10-08 00:59:34,"Right now, the Swift SDK uses a `(SyncUser, URL)` tuple to define a configuration for sync. I propose this be changed to a `SyncConfiguration` struct, much like how Objective-C works. Doing so will give us room to add more configuration options in the future without forcing breaking changes or creating awkwardly large tuple types.

We made this design decision quite a few months ago, before the overall shape of the binding APIs was clear, and never revisited the decision. We should do so before leaving beta.

@jpsim @bdash @tgoyne 
",austinzheng,tgoyne
4196,2016-10-07 18:00:53,"A `RLMLinkingObjects` property of an unmanaged object is the only case in which a `RLMResults` instance has a null `_info` pointer. We were not adequately ensuring that the `_info` pointer is not accessed in such cases.

Fixes #4195.

/cc @jpsim @tgoyne @austinzheng 
",bdash,jpsim
4196,2016-10-07 18:00:53,"A `RLMLinkingObjects` property of an unmanaged object is the only case in which a `RLMResults` instance has a null `_info` pointer. We were not adequately ensuring that the `_info` pointer is not accessed in such cases.

Fixes #4195.

/cc @jpsim @tgoyne @austinzheng 
",bdash,tgoyne
4196,2016-10-07 18:00:53,"A `RLMLinkingObjects` property of an unmanaged object is the only case in which a `RLMResults` instance has a null `_info` pointer. We were not adequately ensuring that the `_info` pointer is not accessed in such cases.

Fixes #4195.

/cc @jpsim @tgoyne @austinzheng 
",bdash,austinzheng
4193,2016-10-10 17:06:09,"We cover this in our documentation for [Inverse Relationships](https://realm.io/docs/swift/latest/#inverse-relationships). That section explains when you'd want to use `List`s (explicit links) versus `LinkingObjects` (traversing `List`s in the opposite direction).

@michaelblight is there something you think we should clarify further in that section?
",jpsim,michaelblight
4191,2016-10-07 00:25:38,"this is a fairly hot code path if adding many objects and this property is already populated so it's cheap to check early. /cc @bdash 
",jpsim,bdash
4186,2016-10-17 21:11:16,"Still waiting on a sample Xcode project to reproduce this. We received something from @anlaital that may or may not be related to this issue, we're still looking into that, but really the best way for us to move on this would be for people experiencing the issue to share a project that would let us reproduce it too. That'd be you @AndrewBarba and @TheHmmka.
",jpsim,anlaital
4182,2016-10-04 22:21:18,"In order to address https://github.com/realm/realm-sync/issues/661

@jpsim @bdash 
",austinzheng,jpsim
4182,2016-10-04 22:21:18,"In order to address https://github.com/realm/realm-sync/issues/661

@jpsim @bdash 
",austinzheng,bdash
4181,2016-10-04 20:08:14,"This branch contains a squashed version of @skydivedan's changes from #4154 with the current conflicts against master resolved, and minor changes to the changelog entry.

The new PR is for CI to test before this is merged.
",bdash,skydivedan
4177,2016-10-05 21:13:48,"@jpsim [objc_test_examples](https://ci.realm.io/job/objc_test_examples/1297/) now passes on this branch. The remaining CI failures for this PR are fixed by https://github.com/realm/realm-cocoa/pull/4176.
",tgoyne,jpsim
4175,2016-10-03 19:48:20,"@jpsim @bdash @tgoyne 

Supersedes: #4159, #4148 
Requires: https://github.com/realm/realm-object-store/pull/186
Fixes #4151 

Changes:
- Object server tests now each use unique URLs for synced Realms
- Object server multiprocess tests now use separate Realm files for child and server processes
- RLMFileManager API changed so that an instance can be created with a custom root directory path
- Private RLMSyncManager API added to specify a custom root directory path for testing purposes
- Cleaned up RLMSyncManager_Private.hpp to reduce number of imports
- Test code now swizzles `[RLMSyncManager defaultManager]` to return a special instance that is created anew for each test
- Moved test-specific APIs out of the main `RLMSyncManager` code
- `RLMRealm` is no longer responsible for resetting the sync manager before tests
- Tests should no longer stall forever on semaphores
- Tests should not continue after the first failure
- 'Waiting for upload/download' API usage replaced by macros that assert on timeout
- Added tests for syncing multiple Realms
- Added more helper methods to make actual test code easier to read
- Moved responsibility for checking for errors when synchronously opening users and Realms for tests into the helper methods
- Organized and grouped new tests by purpose
",austinzheng,jpsim
4175,2016-10-03 19:48:20,"@jpsim @bdash @tgoyne 

Supersedes: #4159, #4148 
Requires: https://github.com/realm/realm-object-store/pull/186
Fixes #4151 

Changes:
- Object server tests now each use unique URLs for synced Realms
- Object server multiprocess tests now use separate Realm files for child and server processes
- RLMFileManager API changed so that an instance can be created with a custom root directory path
- Private RLMSyncManager API added to specify a custom root directory path for testing purposes
- Cleaned up RLMSyncManager_Private.hpp to reduce number of imports
- Test code now swizzles `[RLMSyncManager defaultManager]` to return a special instance that is created anew for each test
- Moved test-specific APIs out of the main `RLMSyncManager` code
- `RLMRealm` is no longer responsible for resetting the sync manager before tests
- Tests should no longer stall forever on semaphores
- Tests should not continue after the first failure
- 'Waiting for upload/download' API usage replaced by macros that assert on timeout
- Added tests for syncing multiple Realms
- Added more helper methods to make actual test code easier to read
- Moved responsibility for checking for errors when synchronously opening users and Realms for tests into the helper methods
- Organized and grouped new tests by purpose
",austinzheng,bdash
4175,2016-10-03 19:48:20,"@jpsim @bdash @tgoyne 

Supersedes: #4159, #4148 
Requires: https://github.com/realm/realm-object-store/pull/186
Fixes #4151 

Changes:
- Object server tests now each use unique URLs for synced Realms
- Object server multiprocess tests now use separate Realm files for child and server processes
- RLMFileManager API changed so that an instance can be created with a custom root directory path
- Private RLMSyncManager API added to specify a custom root directory path for testing purposes
- Cleaned up RLMSyncManager_Private.hpp to reduce number of imports
- Test code now swizzles `[RLMSyncManager defaultManager]` to return a special instance that is created anew for each test
- Moved test-specific APIs out of the main `RLMSyncManager` code
- `RLMRealm` is no longer responsible for resetting the sync manager before tests
- Tests should no longer stall forever on semaphores
- Tests should not continue after the first failure
- 'Waiting for upload/download' API usage replaced by macros that assert on timeout
- Added tests for syncing multiple Realms
- Added more helper methods to make actual test code easier to read
- Moved responsibility for checking for errors when synchronously opening users and Realms for tests into the helper methods
- Organized and grouped new tests by purpose
",austinzheng,tgoyne
4174,2016-10-03 18:24:21,"You might want to ask @jpsim; when I tried doing something similar he had qualms about the CI machines not being able to switch Xcode versions properly. Otherwise, +1.
",austinzheng,jpsim
4168,2016-10-01 00:05:38,"Our abuse of `NS_ENUM` to define `RLM_ERROR_ENUM` was incompatible with the expansion of `NS_ENUM` with pre-C++11 dialects. Fall back to the simple definition for older versions of C++. The more advanced definition is only used at this point by the Swift importer.

/cc @jpsim @tgoyne 

Fixes #4164.
",bdash,jpsim
4168,2016-10-01 00:05:38,"Our abuse of `NS_ENUM` to define `RLM_ERROR_ENUM` was incompatible with the expansion of `NS_ENUM` with pre-C++11 dialects. Fall back to the simple definition for older versions of C++. The more advanced definition is only used at this point by the Swift importer.

/cc @jpsim @tgoyne 

Fixes #4164.
",bdash,tgoyne
4167,2016-09-30 18:45:55,"None of them had been updated from Swift 2.2.

@jpsim 
",tgoyne,jpsim
4161,2016-09-28 23:51:45,"This change makes it possible to build Realm Objective-C and/or Realm Swift 100% from source, although without any of the sync or Realm Mobile Platform features.

This requires (for now) a Podfile similar to this:



And to install with the `REALM_DISABLE_SYNC` environment variable:



---

Up for discussion:
1. Should we do this via CocoaPods subspecs instead of env variables? If so, how? Seems better suited, but a bit more cumbersome to set up. /cc @mrackwitz 
2. If we keep the variable, should we rename it? e.g. `REALM_BUILD_FROM_SOURCE`, `REALM_SOURCE_CORE`, etc.

/cc @mrackwitz @tgoyne @bdash 
",jpsim,mrackwitz
4161,2016-09-28 23:51:45,"This change makes it possible to build Realm Objective-C and/or Realm Swift 100% from source, although without any of the sync or Realm Mobile Platform features.

This requires (for now) a Podfile similar to this:



And to install with the `REALM_DISABLE_SYNC` environment variable:



---

Up for discussion:
1. Should we do this via CocoaPods subspecs instead of env variables? If so, how? Seems better suited, but a bit more cumbersome to set up. /cc @mrackwitz 
2. If we keep the variable, should we rename it? e.g. `REALM_BUILD_FROM_SOURCE`, `REALM_SOURCE_CORE`, etc.

/cc @mrackwitz @tgoyne @bdash 
",jpsim,tgoyne
4161,2016-09-28 23:51:45,"This change makes it possible to build Realm Objective-C and/or Realm Swift 100% from source, although without any of the sync or Realm Mobile Platform features.

This requires (for now) a Podfile similar to this:



And to install with the `REALM_DISABLE_SYNC` environment variable:



---

Up for discussion:
1. Should we do this via CocoaPods subspecs instead of env variables? If so, how? Seems better suited, but a bit more cumbersome to set up. /cc @mrackwitz 
2. If we keep the variable, should we rename it? e.g. `REALM_BUILD_FROM_SOURCE`, `REALM_SOURCE_CORE`, etc.

/cc @mrackwitz @tgoyne @bdash 
",jpsim,bdash
4161,2016-10-19 23:18:41,"I've redone this PR and it should now be ready for review.

This doesn't change the default behavior of `master` (other than fixing an issue where core would be downloaded/unpacked twice when installing Realm Swift.

To use this, you can specify the following in your Podfile:



And invoke `pod install` with the `REALM_DISABLE_SYNC` environment variable defined:



/cc @mrackwitz @tgoyne @bdash
",jpsim,mrackwitz
4161,2016-10-19 23:18:41,"I've redone this PR and it should now be ready for review.

This doesn't change the default behavior of `master` (other than fixing an issue where core would be downloaded/unpacked twice when installing Realm Swift.

To use this, you can specify the following in your Podfile:



And invoke `pod install` with the `REALM_DISABLE_SYNC` environment variable defined:



/cc @mrackwitz @tgoyne @bdash
",jpsim,tgoyne
4161,2016-10-19 23:18:41,"I've redone this PR and it should now be ready for review.

This doesn't change the default behavior of `master` (other than fixing an issue where core would be downloaded/unpacked twice when installing Realm Swift.

To use this, you can specify the following in your Podfile:



And invoke `pod install` with the `REALM_DISABLE_SYNC` environment variable defined:



/cc @mrackwitz @tgoyne @bdash
",jpsim,bdash
4161,2016-11-09 00:10:40,"Bump @mrackwitz @tgoyne @bdash
",jpsim,mrackwitz
4161,2016-11-09 00:10:40,"Bump @mrackwitz @tgoyne @bdash
",jpsim,tgoyne
4161,2016-11-09 00:10:40,"Bump @mrackwitz @tgoyne @bdash
",jpsim,bdash
4160,2016-09-28 22:52:11,"This lets anyone run the object server tests, rather than only those
with access to a private S3 bucket.

/cc @jpsim @austinzheng 
",bdash,jpsim
4160,2016-09-28 22:52:11,"This lets anyone run the object server tests, rather than only those
with access to a private S3 bucket.

/cc @jpsim @austinzheng 
",bdash,austinzheng
4159,2016-09-28 20:57:04,"@jpsim 

Changes:
- Object store multiprocess tests shouldn't share local Realm files anymore, meaning that they can actually test sync

This should fix the issue where the metadata Realm couldn't be opened by the child test processes, causing the tests to hang/fail.
",austinzheng,jpsim
4159,2016-09-29 18:54:34,"Alright. This is ready for review @jpsim. Tests seem to be working reliably on CI now.
",austinzheng,jpsim
4151,2016-09-27 23:29:32,"cc @jpsim 
",austinzheng,jpsim
4149,2016-09-27 22:46:23,"@jpsim @bdash 

Prereq: https://github.com/realm/realm-object-store/pull/172
Replaces: https://github.com/realm/realm-cocoa-private/pull/273

Changes:
- Updated object store and Xcode project
- Replaced binding-level file APIs with the new object store equivalents
",austinzheng,jpsim
4149,2016-09-27 22:46:23,"@jpsim @bdash 

Prereq: https://github.com/realm/realm-object-store/pull/172
Replaces: https://github.com/realm/realm-cocoa-private/pull/273

Changes:
- Updated object store and Xcode project
- Replaced binding-level file APIs with the new object store equivalents
",austinzheng,bdash
4148,2016-09-27 22:40:15,"@jpsim 

Replaces https://github.com/realm/realm-cocoa-private/pull/369

Changes:
- Tests should no longer stall forever on semaphores
- 'Waiting for upload/download' API usage replaced by macros that assert on timeout
- Added tests for syncing multiple Realms
- Added more helper methods to make actual test code easier to read
- Moved responsibility for checking for errors when synchronously opening users and Realms for tests into the helper methods
- Organized and grouped new tests by purpose
",austinzheng,jpsim
4147,2016-09-30 19:36:59,"Interestingly enough, that StackOverflow post has the exact same information as this GitHub issue, and still doesn't contain any information about the exception. Have you tried following @bdash's advice on how to get more information about the exception being thrown?

> So the new stacktrace you've shared shows AppKit's code for dealing with uncaught Objective-C exceptions. That's useful as it means we now know there's an Objective-C exception being thrown! You can set [a breakpoint on Objective-C exceptions being thrown](http://blog.manbolo.com/2012/01/23/xcode-tips-1-break-on-exceptions) to tell you the point at which things are really going wrong. Note that the linked article sets a breakpoint on all exceptions (both C++ and Objective-C), while you'll only want to break on Objective-C exceptions for this.
",jpsim,bdash
4147,2016-09-30 19:39:49,"Yeah, that's the result of ""bt"". 

Sent from my iPhone

> On 30 Sep 2016, at 22:37, JP Simard notifications@github.com wrote:
> 
> Interestingly enough, that StackOverflow post has the exact same information as this GitHub issue, and still doesn't contain any information about the exception. Have you tried following @bdash's advice on how to get more information about the exception being thrown?
> 
> So the new stacktrace you've shared shows AppKit's code for dealing with uncaught Objective-C exceptions. That's useful as it means we now know there's an Objective-C exception being thrown! You can set a breakpoint on Objective-C exceptions being thrown to tell you the point at which things are really going wrong. Note that the linked article sets a breakpoint on all exceptions (both C++ and Objective-C), while you'll only want to break on Objective-C exceptions for this.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
",msamoylov,bdash
4144,2016-10-04 20:07:32,"@bdash & @tgoyne  I have an app that consistently crashes with this error on startup.  The crash occurs about two-thirds to three-quarters of the time.  Let me know if you would like me to give help@realm.io access to the repository to help troubleshoot.
",mlusas,tgoyne
4144,2016-10-04 21:37:17,"I'm pleased to hear your positive results with @tgoyne's fix, @kevincador.

@mlusas, can you elaborate on what you did to test?
",bdash,tgoyne
4142,2016-09-27 14:13:43,"Hi, wonder if you could please clarify the docs on RLMRealmRefreshRequiredNotification:

The [Cocoa constants reference](https://realm.io/docs/objc/latest/api/Constants.html#/c:@RLMRealmRefreshRequiredNotification) states that this notification is posted ""...when an autorefresh occurs, when -[RLMRealm refresh] is called, after an implicit refresh from -[RLMRealm beginWriteTransaction], or after a local write transaction is completed.""

The [Swift docs](http://cocoadocs.org/docsets/RealmSwift/0.96.0/Enums/Notification.html#/s:FO10RealmSwift12Notification9DidChangeFMS0_S0_) and notification name suggest that one should call `[RLMRealm refresh]` after receiving this notification. 
From https://github.com/realm/realm-cocoa/blob/master/Realm/RLMRealmUtil.mm#L89 



Seems to support the Swift doc version -- can you please clarify? (So far I've yet to see it get posted at all, auto-update or not)
Thanks in advance!
",ralph-e-boy,RLMRealmRefreshRequiredNotification
4121,2016-09-20 16:58:28,"Fixes #4120 /cc @austinzheng 
",jpsim,austinzheng
4119,2016-09-19 20:17:07,"@tgoyne submitted a fix for this in #4118.
",bdash,tgoyne
4117,2016-09-19 16:19:07,"There seems to be an issue when exporting archive for Enterprise distribution.
I am using Realm and RealmSwift 1.1.0 with Xcode8.

Here is the stack trace:
Termination Description: DYLD, Library not loaded: @rpath/Realm.framework/Realm | Referenced from: /var/containers/Bundle/Application/DF539C48-5B15-4E10-8498-E2F8FE13A1B9/xxxx.app/xxxx | Reason: no suitable image found. Did find: | /private/var/containers/Bundle/Application/DF539C48-5B15-4E10-8498-E2F8FE13A1B9/xxxx.app/Frameworks/Realm.framework/Realm: code signing blocked mmap() of '/private/var/containers/Bundle/Application/DF539C48-5B15-4E10-8498-E2F8FE13A1B9/xxxx.app/Frameworks/Realm.framework/Realm' | /private/var/containers/Bundle/Application/DF539C48-5B15-4E10-8498-E2F8FE13A1B9/xxxxx.app/Frameworks/Realm.framework/Realm: code signing blocked mmap() of '/private/var/containers/Bundle/Application/DF539C48-5B15-4E10-8498-E2F8FE13A1B9/xxxx.app/Frameworks/Realm.framework/Realm' | /private/var/containers/Bundle/Application/DF539C48-5B15-4E10-8498-E2F8FE13A1B9/xxxx.app/Frameworks/Realm.framework/Realm: code signing blocked mmap() of '/private/var/containers/Bundle/Application/DF539C48-5
Triggered by Thread: 0
",kljajo,rpath
4114,2016-09-19 09:44:07,"This pull request is mostly finished, but there is no Swift 2 implementation and the test coverage could probably be improved. I'm _handing_ this _over_ to you, @jpsim 😝
",JadenGeller,jpsim
4114,2017-01-03 01:00:28,"This is ready for review @austinzheng @bdash @tgoyne!

A few noteworthy design choices you should be aware of:

* I've opted to never return invalid accessors, but rather return `nil` instead.
* There might be cases in which it would be safe to recover from a failed attempt to resolve a reference, but `std::move`-ing the object store reference prevents this. Given that TSRs should be deallocated shortly after their use, I don't think avoiding the `move` would be harmful in any way, unless there's a valid reason to want to discourage error handling.
* This PR won't include a convenience API. Design discussions are under way in #4477.",jpsim,austinzheng
4114,2017-01-03 01:00:28,"This is ready for review @austinzheng @bdash @tgoyne!

A few noteworthy design choices you should be aware of:

* I've opted to never return invalid accessors, but rather return `nil` instead.
* There might be cases in which it would be safe to recover from a failed attempt to resolve a reference, but `std::move`-ing the object store reference prevents this. Given that TSRs should be deallocated shortly after their use, I don't think avoiding the `move` would be harmful in any way, unless there's a valid reason to want to discourage error handling.
* This PR won't include a convenience API. Design discussions are under way in #4477.",jpsim,bdash
4114,2017-01-03 01:00:28,"This is ready for review @austinzheng @bdash @tgoyne!

A few noteworthy design choices you should be aware of:

* I've opted to never return invalid accessors, but rather return `nil` instead.
* There might be cases in which it would be safe to recover from a failed attempt to resolve a reference, but `std::move`-ing the object store reference prevents this. Given that TSRs should be deallocated shortly after their use, I don't think avoiding the `move` would be harmful in any way, unless there's a valid reason to want to discourage error handling.
* This PR won't include a convenience API. Design discussions are under way in #4477.",jpsim,tgoyne
4114,2017-01-11 01:40:11,Thanks for the great feedback @tgoyne! I've addressed all your points here.,jpsim,tgoyne
4102,2016-09-16 18:52:29,"fixes #4079 /cc @tgoyne. No changelog entry because we never shipped this regression.
",jpsim,tgoyne
4102,2016-09-16 21:47:26,"@tgoyne this is ready for review.

Though maybe I should file an issue to look into why adding `DynamicDefaultObject` to the default schema causes `testOpenUnencryptedWithKeyThrows` to fail?
",jpsim,tgoyne
4098,2016-09-15 23:03:04,"/cc @tgoyne @bdash @austinzheng 
",jpsim,austinzheng
4098,2016-09-15 23:03:04,"/cc @tgoyne @bdash @austinzheng 
",jpsim,tgoyne
4098,2016-09-15 23:03:04,"/cc @tgoyne @bdash @austinzheng 
",jpsim,bdash
4094,2016-09-14 22:39:38,"Not sure who can review this. Maybe @tgoyne since you're familiar with the packaging process, and @austinzheng for high levels?
",jpsim,austinzheng
4094,2016-09-14 22:39:38,"Not sure who can review this. Maybe @tgoyne since you're familiar with the packaging process, and @austinzheng for high levels?
",jpsim,tgoyne
4092,2016-09-14 16:48:43,"## Goals

I want to use `Realm` framework in my app. I was added Command Line Tool target to iOS app and linked `Realm.framework` & `RealmSwift.framework` from Build/Mac directory of `Carthage` folder.
## Expected Results

Build Command Line tool with those libraries.
## Actual Results

Xcode output:
`dyld: Library not loaded: @rpath/libswiftCore.dylib
  Referenced from: .../Xcode/DerivedData/.../Build/Products/Debug/RealmSwift.framework/Versions/A/RealmSwift
  Reason: Incompatible library version: RealmSwift requires version 1.0.0 or later, but libswiftCore.dylib provides version 0.0.0`
## Steps to Reproduce

Create empty Swift Command Line Tool and link Realm frameworks
## Code Sample

[CommandLineTest.zip](https://github.com/realm/realm-cocoa/files/472738/CommandLineTest.zip)
## Version of Realm and Tooling

Realm version: `github ""realm/realm-cocoa"" ""master""`

Xcode version: 8 GM

Dependency manager + version: Carthage 0.18
",Jauzee,rpath
4092,2016-09-14 16:55:14,"When linking dynamic frameworks with a command line target, you need to take special care to set the appropriate `@rpath`s. This is the case with any dynamic framework (and therefore any Swift framework) and is unrelated to Realm.
",jpsim,rpath
4092,2016-09-14 17:07:19,"@jpsim that's why it compiles with `Realm.framework` and not with `RealmSwift.framework`.

Can you please little bit explain or guide to some article on how can I set those `@rpath`s, because I'm in search about several hours on this issue.
",Jauzee,rpath
4085,2016-09-14 03:53:50,"/cc @bdash 
",jpsim,bdash
4083,2016-09-13 22:41:16,"Jazzy 0.7.1 changed the format of `undocumented.json` and added support for Swift 3 ACLs.

/cc @bdash 
",jpsim,bdash
4082,2016-09-13 21:42:33,"This error occasionally occurs when running `xcodebuild`. For example, in [this Jenkins job](https://ci.realm.io/job/objc_pr/4070/configuration=Debug,swift_version=3.0,target=osx/consoleFull):



/cc @tgoyne 
",jpsim,tgoyne
4078,2016-09-12 17:10:42,"@jpsim @bdash @tgoyne @stel @mrackwitz @kishikawakatsumi @TimOliver @JadenGeller 
",austinzheng,kishikawakatsumi
4078,2016-09-12 17:10:42,"@jpsim @bdash @tgoyne @stel @mrackwitz @kishikawakatsumi @TimOliver @JadenGeller 
",austinzheng,mrackwitz
4078,2016-09-12 17:10:42,"@jpsim @bdash @tgoyne @stel @mrackwitz @kishikawakatsumi @TimOliver @JadenGeller 
",austinzheng,bdash
4078,2016-09-12 17:10:42,"@jpsim @bdash @tgoyne @stel @mrackwitz @kishikawakatsumi @TimOliver @JadenGeller 
",austinzheng,stel
4078,2016-09-12 17:10:42,"@jpsim @bdash @tgoyne @stel @mrackwitz @kishikawakatsumi @TimOliver @JadenGeller 
",austinzheng,TimOliver
4078,2016-09-12 17:10:42,"@jpsim @bdash @tgoyne @stel @mrackwitz @kishikawakatsumi @TimOliver @JadenGeller 
",austinzheng,JadenGeller
4078,2016-09-12 17:10:42,"@jpsim @bdash @tgoyne @stel @mrackwitz @kishikawakatsumi @TimOliver @JadenGeller 
",austinzheng,jpsim
4078,2016-09-12 17:10:42,"@jpsim @bdash @tgoyne @stel @mrackwitz @kishikawakatsumi @TimOliver @JadenGeller 
",austinzheng,tgoyne
4078,2016-09-14 04:16:51,"@bdash is the change you made in 0d7e7a18 to make `RealmSwift.Error` a struct still necessary? It still seems better suited as an `enum` to me, and the fact that it's a struct with its members only documented indirectly via its `Code` equivalent member complicates the docs.

See http://static.realm.io/jazzy_demo/RealmSwift3/Structs/Error.html

![image](https://cloud.githubusercontent.com/assets/474794/18499830/4ab7e5d2-79f7-11e6-8b9a-bc25b296bca4.png)

---

Unless I'm missing something, I suggest we switch that back to an enum.
",jpsim,bdash
4078,2016-09-15 18:55:38,"@austinzheng @tgoyne @bdash I think this is ready to land.
",jpsim,bdash
4068,2016-09-08 09:51:12,"Make some changes on branch of @jpsim to be compatible with Xcode 8 GM.
",vincentsaluzzo,jpsim
4065,2016-09-12 20:37:25,"This is ready for review @bdash @tgoyne @austinzheng.

I'd like to re-enable the skipped Xcode 8 `build.sh` jobs in a future PR.
",jpsim,austinzheng
4065,2016-09-12 20:37:25,"This is ready for review @bdash @tgoyne @austinzheng.

I'd like to re-enable the skipped Xcode 8 `build.sh` jobs in a future PR.
",jpsim,bdash
4065,2016-09-12 20:37:25,"This is ready for review @bdash @tgoyne @austinzheng.

I'd like to re-enable the skipped Xcode 8 `build.sh` jobs in a future PR.
",jpsim,tgoyne
4065,2016-09-13 00:20:25,"The `testRefresh` failure seems fairly rare, I don't think it's necessary to address here.

@bdash / @tgoyne any further comments?
",jpsim,bdash
4065,2016-09-13 18:55:46,"Bump @tgoyne @bdash. Would like to get this in prior to landing Swift 3 API changes.
",jpsim,bdash
4064,2016-09-08 01:11:33,"/cc @JadenGeller 

Closes https://github.com/realm/realm-cocoa/issues/3746.
",jpsim,JadenGeller
4063,2016-09-07 21:10:44,"Swift 3 GM changed where `@escaping` can be placed (now only in argument positions, not typealiases) and fixed bugs related to its enforcement.

@jpsim @austinzheng @bdash
",JadenGeller,jpsim
4063,2016-09-07 21:10:44,"Swift 3 GM changed where `@escaping` can be placed (now only in argument positions, not typealiases) and fixed bugs related to its enforcement.

@jpsim @austinzheng @bdash
",JadenGeller,austinzheng
4063,2016-09-07 21:10:44,"Swift 3 GM changed where `@escaping` can be placed (now only in argument positions, not typealiases) and fixed bugs related to its enforcement.

@jpsim @austinzheng @bdash
",JadenGeller,bdash
4063,2016-09-07 21:10:44,"Swift 3 GM changed where `@escaping` can be placed (now only in argument positions, not typealiases) and fixed bugs related to its enforcement.

@jpsim @austinzheng @bdash
",JadenGeller,escaping
4062,2016-09-07 20:01:13,"@austinzheng and @jpsim are probably the right people to take a look at this, but this is super low priority so do it whenever you feel like it.
",JadenGeller,austinzheng
4062,2016-09-07 20:01:13,"@austinzheng and @jpsim are probably the right people to take a look at this, but this is super low priority so do it whenever you feel like it.
",JadenGeller,jpsim
4062,2016-09-08 14:10:08,"@mrackwitz had a PR doing something similar a few months back, but we rejected it, I don't remember why.
",jpsim,mrackwitz
4059,2016-09-06 20:16:14,"/cc @tgoyne 
",jpsim,tgoyne
4058,2016-09-06 19:38:52,"Closes https://github.com/realm/realm-cocoa/issues/4056.

@jpsim 
",JadenGeller,jpsim
4057,2016-09-06 19:06:03,"Fixes https://github.com/realm/realm-cocoa/issues/4051.

@jpsim 
",JadenGeller,jpsim
4051,2016-09-06 16:46:06,"Do you mean implicitly unwrapped?

@jpsim Do you know if we even support implicitly unwrapped optional properties?
",JadenGeller,jpsim
4048,2016-09-03 04:18:09,"Fixes https://github.com/realm/realm-cocoa/issues/2377. @jpsim 
",JadenGeller,jpsim
4047,2016-09-03 00:58:16,"Addresses https://github.com/realm/realm-cocoa/pull/4039#issuecomment-244513503.
@jpsim 
",JadenGeller,jpsim
4047,2016-09-08 01:34:39,"This looks ok to me, but I'd feel more comfortable if @tgoyne signed off.
",jpsim,tgoyne
4047,2016-11-15 23:31:52,"@tgoyne what do you think we should do with this?
",jpsim,tgoyne
4047,2016-12-07 02:05:32,Bump @tgoyne.,jpsim,tgoyne
4046,2016-09-02 03:46:15,"When creating a new Xcode project and setting up Realm, I built the default project to make sure the settings were correct, and I get the Mach-O Linker Error ""Linker command failed with exit code 1 (use -v to see invocation)""

Here is the raw output from the whole error:

> Ld /Users/jonathanstowe/Library/Developer/Xcode/DerivedData/Record_Store-dxhwlltjuofyzfccpubkdqlpgngi/Build/Products/Debug-iphonesimulator/Record\ Store.app/Record\ Store normal x86_64
>     cd ""/Users/jonathanstowe/Xcode Projects/Record Store""
>     export IPHONEOS_DEPLOYMENT_TARGET=9.3
>     export PATH=""/Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:/Applications/Xcode-beta.app/Contents/Developer/usr/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin""
>     /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -arch x86_64 -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator10.0.sdk -L/Users/jonathanstowe/Library/Developer/Xcode/DerivedData/Record_Store-dxhwlltjuofyzfccpubkdqlpgngi/Build/Products/Debug-iphonesimulator -F/Users/jonathanstowe/Library/Developer/Xcode/DerivedData/Record_Store-dxhwlltjuofyzfccpubkdqlpgngi/Build/Products/Debug-iphonesimulator -F/Users/jonathanstowe/Xcode\ Projects/Record\ Store -filelist /Users/jonathanstowe/Library/Developer/Xcode/DerivedData/Record_Store-dxhwlltjuofyzfccpubkdqlpgngi/Build/Intermediates/Record\ Store.build/Debug-iphonesimulator/Record\ Store.build/Objects-normal/x86_64/Record\ Store.LinkFileList -Xlinker -rpath -Xlinker @executable_path/Frameworks -mios-simulator-version-min=9.3 -Xlinker -object_path_lto -Xlinker /Users/jonathanstowe/Library/Developer/Xcode/DerivedData/Record_Store-dxhwlltjuofyzfccpubkdqlpgngi/Build/Intermediates/Record\ Store.build/Debug-iphonesimulator/Record\ Store.build/Objects-normal/x86_64/Record\ Store_lto.o -Xlinker -export_dynamic -Xlinker -no_deduplicate -Xlinker -objc_abi_version -Xlinker 2 -fobjc-link-runtime -L/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphonesimulator -Xlinker -add_ast_path -Xlinker /Users/jonathanstowe/Library/Developer/Xcode/DerivedData/Record_Store-dxhwlltjuofyzfccpubkdqlpgngi/Build/Intermediates/Record\ Store.build/Debug-iphonesimulator/Record\ Store.build/Objects-normal/x86_64/Record_Store.swiftmodule -framework RealmSwift -framework Realm -Xlinker -dependency_info -Xlinker /Users/jonathanstowe/Library/Developer/Xcode/DerivedData/Record_Store-dxhwlltjuofyzfccpubkdqlpgngi/Build/Intermediates/Record\ Store.build/Debug-iphonesimulator/Record\ Store.build/Objects-normal/x86_64/Record\ Store_dependency_info.dat -o /Users/jonathanstowe/Library/Developer/Xcode/DerivedData/Record_Store-dxhwlltjuofyzfccpubkdqlpgngi/Build/Products/Debug-iphonesimulator/Record\ Store.app/Record\ Store
> 
> ld: /Users/jonathanstowe/Xcode Projects/Record Store/RealmSwift.framework/RealmSwift compiled with older version of Swift language (2.0) than previous files (3.0) for architecture x86_64
> clang: error: linker command failed with exit code 1 (use -v to see invocation)

This is just the error I'm stuck at, and saw that there wasn't an issue written up about it yet. It seems to only stick with the error because of the Swift 3.0 compiler.

Realm version: 1.0.2

Xcode version: 8.0 beta 6 (8S201h)

iOS/OSX version: iOS 10
",hightekjonathan,executable
4045,2016-09-01 23:13:11,"/cc @JadenGeller @bdash @tgoyne 
",jpsim,JadenGeller
4045,2016-09-01 23:13:11,"/cc @JadenGeller @bdash @tgoyne 
",jpsim,bdash
4045,2016-09-01 23:13:11,"/cc @JadenGeller @bdash @tgoyne 
",jpsim,tgoyne
4044,2016-09-01 22:03:33,"/cc @bdash 
",jpsim,bdash
4043,2016-09-01 21:45:56,"Fixes #4042. /cc @bdash 

I'm hoping to fix Carthage's logic to resolve which Xcode workspace/project to use to prefer root-level things over workspaces.
",jpsim,bdash
4040,2016-09-01 20:36:59,"@jpsim Do you think we ought to mention this step in the build instructions in the README?\

EDIT: Tracked by https://github.com/realm/realm-cocoa/issues/4041.
",JadenGeller,jpsim
4039,2016-09-01 07:45:43,"Fixes https://github.com/realm/realm-cocoa/issues/3690. @jpsim @tgoyne 
",JadenGeller,jpsim
4039,2016-09-01 07:45:43,"Fixes https://github.com/realm/realm-cocoa/issues/3690. @jpsim @tgoyne 
",JadenGeller,tgoyne
4034,2016-08-31 22:44:02,"Currently, subscripting a managed object looks up the managed properties value while subscripting an unmanaged object uses `valueForKey:` (meaning it also works with unmanaged properties). This PR ensures that the key corresponds to a property in the schema before calling `valueForKey:`.

@bdash @jpsim 
",JadenGeller,jpsim
4034,2016-08-31 22:44:02,"Currently, subscripting a managed object looks up the managed properties value while subscripting an unmanaged object uses `valueForKey:` (meaning it also works with unmanaged properties). This PR ensures that the key corresponds to a property in the schema before calling `valueForKey:`.

@bdash @jpsim 
",JadenGeller,bdash
4032,2016-08-31 20:20:50,"I audited our private `.h` files for nullability.

@jpsim 
",JadenGeller,jpsim
4031,2016-08-31 19:09:34,"Fixes https://github.com/realm/realm-cocoa/issues/3940.

Note that this doesn't yet any changes to Swift's configuration, but a similar exception will be thrown when a `Realm.Configuration` is converted internally to an `RLMRealmConfiguration`. It does seem weird to throw exceptions on property set in Objective-C but when creating a `Realm` in Swift. I would appreciate feedback on how to make this more consistent (which way is better). @bdash 
",JadenGeller,bdash
4031,2016-09-01 22:48:20,"Done. Ready again for review @jpsim @bdash 
",JadenGeller,bdash
4028,2016-09-08 07:22:57,"Hi @bdash @mrackwitz 
We are seeing same type crashes in the same context (during application termination) as described above. I can share more logs if needed.
",vlntb,mrackwitz
4027,2016-08-30 21:38:05,"@jpsim @austinzheng @bdash 
",JadenGeller,jpsim
4027,2016-08-30 21:38:05,"@jpsim @austinzheng @bdash 
",JadenGeller,austinzheng
4027,2016-08-30 21:38:05,"@jpsim @austinzheng @bdash 
",JadenGeller,bdash
4027,2016-09-01 23:06:59,"I like this, but it certainly does feel like an odd hack to be exposing in our public API. I'd want buy-in from @bdash and @tgoyne before we merge this.
",jpsim,bdash
4027,2016-09-01 23:06:59,"I like this, but it certainly does feel like an odd hack to be exposing in our public API. I'd want buy-in from @bdash and @tgoyne before we merge this.
",jpsim,tgoyne
4025,2016-08-30 18:09:03,"Addresses https://github.com/realm/realm-cocoa/issues/4009, which was causing crashes when some tests fail. This used to have no cast when it was imported as `AnyObject`, but the Swift 3 changes importing it as `Any` changed this. In migrating that code, I incorrectly thought this should be cast to `URL` but the actual correct type is `NSString`. I missed that this was incorrect because this code is not called when tests pass.

@jpsim 
",JadenGeller,jpsim
4024,2016-08-30 05:58:06,"Refactors row creation code to always set the primary key on row creation so that the primary key is set before all other properties. This also simplifies the logic of populating properties (now skip all primary key properties rather than just primary key properties of not newly created objects) and removes the need to always emit a `SetUnique` instruction for rows set to the default value (https://github.com/realm/realm-cocoa/pull/4003#issuecomment-243322162).

Fixes https://github.com/realm/realm-cocoa/issues/4017.

@jpsim @bdash @tgoyne 
",JadenGeller,jpsim
4024,2016-08-30 05:58:06,"Refactors row creation code to always set the primary key on row creation so that the primary key is set before all other properties. This also simplifies the logic of populating properties (now skip all primary key properties rather than just primary key properties of not newly created objects) and removes the need to always emit a `SetUnique` instruction for rows set to the default value (https://github.com/realm/realm-cocoa/pull/4003#issuecomment-243322162).

Fixes https://github.com/realm/realm-cocoa/issues/4017.

@jpsim @bdash @tgoyne 
",JadenGeller,bdash
4024,2016-08-30 05:58:06,"Refactors row creation code to always set the primary key on row creation so that the primary key is set before all other properties. This also simplifies the logic of populating properties (now skip all primary key properties rather than just primary key properties of not newly created objects) and removes the need to always emit a `SetUnique` instruction for rows set to the default value (https://github.com/realm/realm-cocoa/pull/4003#issuecomment-243322162).

Fixes https://github.com/realm/realm-cocoa/issues/4017.

@jpsim @bdash @tgoyne 
",JadenGeller,tgoyne
4023,2016-08-30 04:57:59,"Fixes https://github.com/realm/realm-cocoa/issues/4022

@jpsim 
",JadenGeller,jpsim
4021,2016-09-26 15:33:25,"@bensarz I was just following the instructions from @jpsim above. I deleted the Pods folder and then followed the instructions and did an install. I am still getting the same issue 72 missing files warning and 2 errors ""Umbrella header 'Realm.h' not found"" and ""Could not build Objective-C module 'Realm'""
",alanshih,bensarz
4021,2016-09-26 15:44:31,"@bensarz  same issue. Followed the instructions you linked, but still having the same problem
",alanshih,bensarz
4016,2016-08-26 20:24:35,"Copied from a comment from @Kirow on an unrelated ticket: https://github.com/realm/realm-cocoa/issues/3838#issuecomment-242734231

I also have problem with Notifications.
When I delete one item from my datasource realm throws incorrect changes to me. (2 deletes and 1 insert)

example:



Works fine with small data array.

---

Sample Code:


",jpsim,Kirow
4010,2016-08-26 06:00:00,"@jpsim 
",JadenGeller,jpsim
4008,2016-08-26 00:00:12,"@jpsim 
",JadenGeller,jpsim
4005,2016-08-25 17:15:09,"The issue is that `Object` is given the `@objc` name `RealmSwiftObject`. In our codebase, we're determining if a class is a Swift class by checking if the name contains a `.` indicating it is module scoped. This is not necessary true of classes that are given an `@objc` name, so we ought to find a better way to detect this.
",JadenGeller,objc
4003,2016-08-25 19:21:18,"@jpsim I incorporated the fix suggested by @simonask, so I think it's ready for review 🙂
",JadenGeller,jpsim
4003,2016-08-25 19:21:18,"@jpsim I incorporated the fix suggested by @simonask, so I think it's ready for review 🙂
",JadenGeller,simonask
3999,2016-08-23 23:44:19,"A few Xcode project changes were needed to support files being added / removed in the object store code.

/cc @tgoyne @jpsim 
",bdash,jpsim
3999,2016-08-23 23:44:19,"A few Xcode project changes were needed to support files being added / removed in the object store code.

/cc @tgoyne @jpsim 
",bdash,tgoyne
3988,2016-08-22 18:31:09,"@bdash @jpsim I wonder if it would be worthwhile to rename `Realm.framework` to `RealmObjC.framework`?
",JadenGeller,jpsim
3986,2016-08-19 06:44:30,"Hello! Thanks for great product!
I have error with filling realm object. When i try mapping property '@property NSString\* smallImage', i had error 'NSCFBoolean UTF8String'
Code of error



Data for that property from JSON


",NBibikov,property
3985,2016-08-18 23:13:45,"@jpsim Continuing the https://github.com/realm/realm-cocoa/issues/1022
",ashokds,jpsim
3984,2016-08-18 19:46:05,"@bdash 
",JadenGeller,bdash
3981,2016-08-18 01:09:36,"Since Swift 3 gives us the opportunity to make breaking changes to our API, here's my pitch:

I think it would be safer to require users to explicitly specify property type when using aggregate functions.



Currently, the type is inferred based on context. This is bad because it can silently break user code. For example, if I were to call



a change in the API of `bar` could silently cause my code to start crashing.

Though the current API looks cleaner, a user will still have to specify the type (e.g. `as Int`) at the call-site, so it's really not that different. And as demonstrated the cases in which the type does not have to be specified are dangerous and should be avoided.

Thoughts? @bdash @tgoyne @austinzheng @jpsim 
",JadenGeller,jpsim
3981,2016-08-18 01:09:36,"Since Swift 3 gives us the opportunity to make breaking changes to our API, here's my pitch:

I think it would be safer to require users to explicitly specify property type when using aggregate functions.



Currently, the type is inferred based on context. This is bad because it can silently break user code. For example, if I were to call



a change in the API of `bar` could silently cause my code to start crashing.

Though the current API looks cleaner, a user will still have to specify the type (e.g. `as Int`) at the call-site, so it's really not that different. And as demonstrated the cases in which the type does not have to be specified are dangerous and should be avoided.

Thoughts? @bdash @tgoyne @austinzheng @jpsim 
",JadenGeller,austinzheng
3981,2016-08-18 01:09:36,"Since Swift 3 gives us the opportunity to make breaking changes to our API, here's my pitch:

I think it would be safer to require users to explicitly specify property type when using aggregate functions.



Currently, the type is inferred based on context. This is bad because it can silently break user code. For example, if I were to call



a change in the API of `bar` could silently cause my code to start crashing.

Though the current API looks cleaner, a user will still have to specify the type (e.g. `as Int`) at the call-site, so it's really not that different. And as demonstrated the cases in which the type does not have to be specified are dangerous and should be avoided.

Thoughts? @bdash @tgoyne @austinzheng @jpsim 
",JadenGeller,bdash
3981,2016-08-18 01:09:36,"Since Swift 3 gives us the opportunity to make breaking changes to our API, here's my pitch:

I think it would be safer to require users to explicitly specify property type when using aggregate functions.



Currently, the type is inferred based on context. This is bad because it can silently break user code. For example, if I were to call



a change in the API of `bar` could silently cause my code to start crashing.

Though the current API looks cleaner, a user will still have to specify the type (e.g. `as Int`) at the call-site, so it's really not that different. And as demonstrated the cases in which the type does not have to be specified are dangerous and should be avoided.

Thoughts? @bdash @tgoyne @austinzheng @jpsim 
",JadenGeller,tgoyne
3980,2016-08-18 01:10:21,"@bdash 
",JadenGeller,bdash
3979,2016-08-18 00:47:06,"@bdash 
",JadenGeller,bdash
3966,2016-08-16 18:13:13,"/cc @tgoyne @bdash 
",jpsim,tgoyne
3966,2016-08-16 18:13:13,"/cc @tgoyne @bdash 
",jpsim,bdash
3965,2016-08-17 18:48:53,"@jpsim @austinzheng @tgoyne @bdash This is ready for review! 🎉
",JadenGeller,jpsim
3965,2016-08-17 18:48:53,"@jpsim @austinzheng @tgoyne @bdash This is ready for review! 🎉
",JadenGeller,austinzheng
3965,2016-08-17 18:48:53,"@jpsim @austinzheng @tgoyne @bdash This is ready for review! 🎉
",JadenGeller,bdash
3965,2016-08-17 18:48:53,"@jpsim @austinzheng @tgoyne @bdash This is ready for review! 🎉
",JadenGeller,tgoyne
3960,2016-08-15 06:47:54,"# Goals

Build the project without having to run a clean
# Expected Results

Build to Succeed
# Actual Results

Build failed with these errors:

ld: library not found for -lrealm-ios
clang: error: linker command failed with exit code 1 (use -v to see invocation)

Ld /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos/Realm.framework/Realm normal arm64
    cd /Users/zhangchaojie/Documents/Project/WMDoctor/trunk/Pods
    export IPHONEOS_DEPLOYMENT_TARGET=8.0
    export PATH=""/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin""
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++ -arch arm64 -dynamiclib -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk -L/Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos -L/Users/zhangchaojie/Documents/Project/WMDoctor/trunk/Pods/Realm/core -F/Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos -filelist /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Intermediates/Pods.build/Debug-iphoneos/Realm.build/Objects-normal/arm64/Realm.LinkFileList -install_name @rpath/Realm.framework/Realm -Xlinker -rpath -Xlinker @executable_path/Frameworks -Xlinker -rpath -Xlinker @loader_path/Frameworks -miphoneos-version-min=8.0 -dead_strip -Xlinker -no_deduplicate -fembed-bitcode-marker -lc++ -lrealm-ios -stdlib=libc++ -fapplication-extension -fobjc-arc -fobjc-link-runtime -framework Foundation -single_module -compatibility_version 1 -current_version 1 -Xlinker -dependency_info -Xlinker /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Intermediates/Pods.build/Debug-iphoneos/Realm.build/Objects-normal/arm64/Realm_dependency_info.dat -o /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos/Realm.framework/Realm
# Steps to Reproduce

Add Realm as a cocoa pod and build the project in another mac
# Code Sample

Build errors
# Version of Realm and Tooling

Realm version: 1.0.2
Xcode version: 7.3
iOS/OSX version: 9.3.3/swif2.2
Dependency manager + version: cocoapod 0.39.0
",superzcj,loader
3960,2016-08-15 06:47:54,"# Goals

Build the project without having to run a clean
# Expected Results

Build to Succeed
# Actual Results

Build failed with these errors:

ld: library not found for -lrealm-ios
clang: error: linker command failed with exit code 1 (use -v to see invocation)

Ld /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos/Realm.framework/Realm normal arm64
    cd /Users/zhangchaojie/Documents/Project/WMDoctor/trunk/Pods
    export IPHONEOS_DEPLOYMENT_TARGET=8.0
    export PATH=""/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin""
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++ -arch arm64 -dynamiclib -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk -L/Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos -L/Users/zhangchaojie/Documents/Project/WMDoctor/trunk/Pods/Realm/core -F/Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos -filelist /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Intermediates/Pods.build/Debug-iphoneos/Realm.build/Objects-normal/arm64/Realm.LinkFileList -install_name @rpath/Realm.framework/Realm -Xlinker -rpath -Xlinker @executable_path/Frameworks -Xlinker -rpath -Xlinker @loader_path/Frameworks -miphoneos-version-min=8.0 -dead_strip -Xlinker -no_deduplicate -fembed-bitcode-marker -lc++ -lrealm-ios -stdlib=libc++ -fapplication-extension -fobjc-arc -fobjc-link-runtime -framework Foundation -single_module -compatibility_version 1 -current_version 1 -Xlinker -dependency_info -Xlinker /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Intermediates/Pods.build/Debug-iphoneos/Realm.build/Objects-normal/arm64/Realm_dependency_info.dat -o /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos/Realm.framework/Realm
# Steps to Reproduce

Add Realm as a cocoa pod and build the project in another mac
# Code Sample

Build errors
# Version of Realm and Tooling

Realm version: 1.0.2
Xcode version: 7.3
iOS/OSX version: 9.3.3/swif2.2
Dependency manager + version: cocoapod 0.39.0
",superzcj,rpath
3960,2016-08-15 06:47:54,"# Goals

Build the project without having to run a clean
# Expected Results

Build to Succeed
# Actual Results

Build failed with these errors:

ld: library not found for -lrealm-ios
clang: error: linker command failed with exit code 1 (use -v to see invocation)

Ld /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos/Realm.framework/Realm normal arm64
    cd /Users/zhangchaojie/Documents/Project/WMDoctor/trunk/Pods
    export IPHONEOS_DEPLOYMENT_TARGET=8.0
    export PATH=""/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin""
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++ -arch arm64 -dynamiclib -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk -L/Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos -L/Users/zhangchaojie/Documents/Project/WMDoctor/trunk/Pods/Realm/core -F/Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos -filelist /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Intermediates/Pods.build/Debug-iphoneos/Realm.build/Objects-normal/arm64/Realm.LinkFileList -install_name @rpath/Realm.framework/Realm -Xlinker -rpath -Xlinker @executable_path/Frameworks -Xlinker -rpath -Xlinker @loader_path/Frameworks -miphoneos-version-min=8.0 -dead_strip -Xlinker -no_deduplicate -fembed-bitcode-marker -lc++ -lrealm-ios -stdlib=libc++ -fapplication-extension -fobjc-arc -fobjc-link-runtime -framework Foundation -single_module -compatibility_version 1 -current_version 1 -Xlinker -dependency_info -Xlinker /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Intermediates/Pods.build/Debug-iphoneos/Realm.build/Objects-normal/arm64/Realm_dependency_info.dat -o /Users/zhangchaojie/Library/Developer/Xcode/DerivedData/WMDoctor-fnyjhcfjkdvagqcncvwdxeixyovx/Build/Products/Debug-iphoneos/Realm.framework/Realm
# Steps to Reproduce

Add Realm as a cocoa pod and build the project in another mac
# Code Sample

Build errors
# Version of Realm and Tooling

Realm version: 1.0.2
Xcode version: 7.3
iOS/OSX version: 9.3.3/swif2.2
Dependency manager + version: cocoapod 0.39.0
",superzcj,executable
3958,2016-08-13 10:50:55,"## Goals

I need to build a data model, that contains: groups, tags and items.
1. items have many-to-many relations with items.
2. items also have many-to-one relations with groups.

Due to known issues you can't easily import headers of one class to another class header in big projects. It won't compile... Its long to describe, but i suppose everybody knows that.

So its easier to place all the Realm classes in one header. But even in this case you can't find correct order of classes declaration, as it doesn't exist!
## Expected Results

Easy compilation.
## Actual Results

Errors while building, because ObjC doesn't support defining class superclass within `@class` directive.
## Solution

Your documentation is great and all the property names are self-explanatory.
Please, remove some surplus code to make it easier to compile:
Example from ""RLMArray.h"" file:
`@interface RLMArray<RLMObjectType: RLMObject *> : NSObject<RLMCollection, NSFastEnumeration>
`
Change to this, or something event simpler:
`
@protocol RLMObjectP;
@interface RLMArray<id< RLMObjectP>> : NSObject<RLMCollection, NSFastEnumeration>
`
Its also relevant for RLMLinkingObjects.
## Code Sample



Task: place those items in the right order to compile.
## Version of Realm and Tooling

Realm version: Last
Xcode version: Last
iOS/OSX version: Last
Dependency manager + version: Last CocoaPods
",ashvar,protocol
3958,2016-08-13 10:50:55,"## Goals

I need to build a data model, that contains: groups, tags and items.
1. items have many-to-many relations with items.
2. items also have many-to-one relations with groups.

Due to known issues you can't easily import headers of one class to another class header in big projects. It won't compile... Its long to describe, but i suppose everybody knows that.

So its easier to place all the Realm classes in one header. But even in this case you can't find correct order of classes declaration, as it doesn't exist!
## Expected Results

Easy compilation.
## Actual Results

Errors while building, because ObjC doesn't support defining class superclass within `@class` directive.
## Solution

Your documentation is great and all the property names are self-explanatory.
Please, remove some surplus code to make it easier to compile:
Example from ""RLMArray.h"" file:
`@interface RLMArray<RLMObjectType: RLMObject *> : NSObject<RLMCollection, NSFastEnumeration>
`
Change to this, or something event simpler:
`
@protocol RLMObjectP;
@interface RLMArray<id< RLMObjectP>> : NSObject<RLMCollection, NSFastEnumeration>
`
Its also relevant for RLMLinkingObjects.
## Code Sample



Task: place those items in the right order to compile.
## Version of Realm and Tooling

Realm version: Last
Xcode version: Last
iOS/OSX version: Last
Dependency manager + version: Last CocoaPods
",ashvar,class
3958,2016-08-13 10:50:55,"## Goals

I need to build a data model, that contains: groups, tags and items.
1. items have many-to-many relations with items.
2. items also have many-to-one relations with groups.

Due to known issues you can't easily import headers of one class to another class header in big projects. It won't compile... Its long to describe, but i suppose everybody knows that.

So its easier to place all the Realm classes in one header. But even in this case you can't find correct order of classes declaration, as it doesn't exist!
## Expected Results

Easy compilation.
## Actual Results

Errors while building, because ObjC doesn't support defining class superclass within `@class` directive.
## Solution

Your documentation is great and all the property names are self-explanatory.
Please, remove some surplus code to make it easier to compile:
Example from ""RLMArray.h"" file:
`@interface RLMArray<RLMObjectType: RLMObject *> : NSObject<RLMCollection, NSFastEnumeration>
`
Change to this, or something event simpler:
`
@protocol RLMObjectP;
@interface RLMArray<id< RLMObjectP>> : NSObject<RLMCollection, NSFastEnumeration>
`
Its also relevant for RLMLinkingObjects.
## Code Sample



Task: place those items in the right order to compile.
## Version of Realm and Tooling

Realm version: Last
Xcode version: Last
iOS/OSX version: Last
Dependency manager + version: Last CocoaPods
",ashvar,interface
3955,2016-08-12 01:02:10,"Fixes https://github.com/realm/realm-cocoa/issues/3931 by using appropriate getter property on `NSNumber` instead of erroneously trying to force cast to the correct type (since not all integer types are bridged to `NSNumber`).

//cc @jpsim @austinzheng 
",JadenGeller,jpsim
3955,2016-08-12 01:02:10,"Fixes https://github.com/realm/realm-cocoa/issues/3931 by using appropriate getter property on `NSNumber` instead of erroneously trying to force cast to the correct type (since not all integer types are bridged to `NSNumber`).

//cc @jpsim @austinzheng 
",JadenGeller,austinzheng
3952,2016-08-10 20:18:07,"The CocoaPods CI job complained of not being able to find `handover.hpp`: https://ci.realm.io/job/objc_pr/3832/configuration=Release,swift_version=2.2,target=cocoapods/console

It's possible `handover.hpp` and `thread_confined.hpp` need to be added to the podspec.

Same thing goes for #3946 /cc @JadenGeller 
",jpsim,JadenGeller
3949,2016-08-09 16:18:03,"Pull in some changes from the Swift 2 codepath of #3941 that were not made in the Swift 3 version of the code.

Fixes #3947.

/cc @tgoyne 
",bdash,tgoyne
3946,2016-08-09 20:58:22,"The object store handover has been merged https://github.com/realm/realm-object-store/pull/116 🎉 and this has been rebased on top of master (which now includes https://github.com/realm/realm-cocoa/pull/3941)💃, so I think it's ready for review! @jpsim @tgoyne @bdash @austinzheng 
",JadenGeller,jpsim
3946,2016-08-09 20:58:22,"The object store handover has been merged https://github.com/realm/realm-object-store/pull/116 🎉 and this has been rebased on top of master (which now includes https://github.com/realm/realm-cocoa/pull/3941)💃, so I think it's ready for review! @jpsim @tgoyne @bdash @austinzheng 
",JadenGeller,tgoyne
3946,2016-08-09 20:58:22,"The object store handover has been merged https://github.com/realm/realm-object-store/pull/116 🎉 and this has been rebased on top of master (which now includes https://github.com/realm/realm-cocoa/pull/3941)💃, so I think it's ready for review! @jpsim @tgoyne @bdash @austinzheng 
",JadenGeller,bdash
3946,2016-08-09 20:58:22,"The object store handover has been merged https://github.com/realm/realm-object-store/pull/116 🎉 and this has been rebased on top of master (which now includes https://github.com/realm/realm-cocoa/pull/3941)💃, so I think it's ready for review! @jpsim @tgoyne @bdash @austinzheng 
",JadenGeller,austinzheng
3946,2016-08-19 23:55:06,"@bdash This is ready for re-review whenever you're ready.
",JadenGeller,bdash
3946,2016-12-14 02:04:08,@bdash @tgoyne I've revived this PR and addressed a number of little issues here and there but I'd love to get your eyes on this again.,jpsim,tgoyne
3945,2016-08-09 16:57:26,"Hi @EauSauvage, we're tracking making improvements to this menu item in realm/realm-browser-osx#59. Please subscribe to that for updates. In the future, please use the Realm Browser's issue tracker to file issues about that product.
",jpsim,EauSauvage
3941,2016-08-03 17:28:17,"No user-visible changes here as none of the functionality is surfaced in the API yet.

The new high-level design is:
- RLMSchema and its children no longer contains any Realm-instance specific data (no table columns, no cached table accessors, no KVO tracking), and so we no longer need to make a shallow copy of it per RLMRealm. It does still store the accessor classes, and as a result the separate accessor cache is no longer needed.
- All of the per-RLMRealm data that we need in addition to what the ObjectStore Schema stores is tracked in a new RLMObjectInfo class, which stores the table accessors, KVO info, and provides an efficient lookup of table columns from property indexes.
- Everything that previously stored a table column now stores a property index and looks up the table column on each use. This has a small (~1-2%) negative impact on accessor performance.

@bdash @jpsim 
",tgoyne,jpsim
3941,2016-08-03 17:28:17,"No user-visible changes here as none of the functionality is surfaced in the API yet.

The new high-level design is:
- RLMSchema and its children no longer contains any Realm-instance specific data (no table columns, no cached table accessors, no KVO tracking), and so we no longer need to make a shallow copy of it per RLMRealm. It does still store the accessor classes, and as a result the separate accessor cache is no longer needed.
- All of the per-RLMRealm data that we need in addition to what the ObjectStore Schema stores is tracked in a new RLMObjectInfo class, which stores the table accessors, KVO info, and provides an efficient lookup of table columns from property indexes.
- Everything that previously stored a table column now stores a property index and looks up the table column on each use. This has a small (~1-2%) negative impact on accessor performance.

@bdash @jpsim 
",tgoyne,bdash
3932,2016-08-09 18:48:32,"@dodomaroc86 I was using Beta 4, downloading beta 5 now and will test that. 
",anthonycastelli,dodomaroc86
3932,2016-08-09 19:38:36,"@bdash Thats what I plan on doing soon as I get home. I thought maybe @dodomaroc86 had a few ideas since he got his working. 
",anthonycastelli,dodomaroc86
3932,2016-08-09 21:11:17,"@anthonycastelli This video from @jpsim  may help https://static.realm.io/debug/realm-swift-xcode8b4.mp4
",dodomarocgenex,jpsim
3917,2016-07-27 15:55:20,"Thanks for bringing this to attention. Looking at the documentation of [git-fetch](https://git-scm.com/docs/git-fetch), this is indeed the intended behavior of Git by default. I think this should be brought to attention at Carthage as well. But it would help to fix that short-term by making sure to keep around release branches. /c @jpsim @tgoyne @bdash
",mrackwitz,jpsim
3917,2016-07-27 15:55:20,"Thanks for bringing this to attention. Looking at the documentation of [git-fetch](https://git-scm.com/docs/git-fetch), this is indeed the intended behavior of Git by default. I think this should be brought to attention at Carthage as well. But it would help to fix that short-term by making sure to keep around release branches. /c @jpsim @tgoyne @bdash
",mrackwitz,tgoyne
3917,2016-07-27 15:55:20,"Thanks for bringing this to attention. Looking at the documentation of [git-fetch](https://git-scm.com/docs/git-fetch), this is indeed the intended behavior of Git by default. I think this should be brought to attention at Carthage as well. But it would help to fix that short-term by making sure to keep around release branches. /c @jpsim @tgoyne @bdash
",mrackwitz,bdash
3914,2016-07-26 18:01:45,"Addresses #3822.

This used to be necessary to work around the lack of robust mutexes, causing a write lock to be held indefinitely. This is no longer useful.

/cc @tgoyne @bdash 
",jpsim,tgoyne
3914,2016-07-26 18:01:45,"Addresses #3822.

This used to be necessary to work around the lack of robust mutexes, causing a write lock to be held indefinitely. This is no longer useful.

/cc @tgoyne @bdash 
",jpsim,bdash
3908,2016-07-25 15:32:33,"The only reasons I see against that is the selective availability on some Apple platforms and that this could cause confusion around the purpose whether it's actually thought for the OS-provided encryption or Realm's built-in encryption.
What are your thoughts? /c @jpsim @tgoyne
",mrackwitz,jpsim
3908,2016-07-25 15:32:33,"The only reasons I see against that is the selective availability on some Apple platforms and that this could cause confusion around the purpose whether it's actually thought for the OS-provided encryption or Realm's built-in encryption.
What are your thoughts? /c @jpsim @tgoyne
",mrackwitz,tgoyne
3897,2016-07-20 22:30:16,"this will allow us to:
- keep more Jenkins configuration in SCM
- use a nicer syntax to specify the matrix & exclusions
- test job changes in an isolated PR first before applying globally

unfortunately, the plugin doesn't support touchstone builds, but now that we have significantly more CI machines, I think it's a worthwhile tradeoff.

/cc @bdash @tgoyne 
",jpsim,bdash
3897,2016-07-20 22:30:16,"this will allow us to:
- keep more Jenkins configuration in SCM
- use a nicer syntax to specify the matrix & exclusions
- test job changes in an isolated PR first before applying globally

unfortunately, the plugin doesn't support touchstone builds, but now that we have significantly more CI machines, I think it's a worthwhile tradeoff.

/cc @bdash @tgoyne 
",jpsim,tgoyne
3894,2016-09-13 17:58:04,"@bdash @jpsim  Do you know approximately when the next version of Realm supporting Swift 2.3 will be released? Xcode 8.0 final release will most likely be out this Thursday or Friday. Also, will a version of Realm supporting Swift 3.0 be available soon, or is that further out? Thanks!
",Alamoz,jpsim
3885,2016-07-18 20:47:16,"Version 1.0.2 successfully fixed an issue which prevented the change block from firing when a linked object changed.  

The issue I am now seeing is that when a new object is added to the RLMLinkingObjects results set, which doesn't cause the result of the query to change, the change block does not fire.  The example in the realm docs describes a Dog class and a Person class, where the dog.owners property will contain all the Person objects that contain the exact instance of the Dog.

If I have a query `Dog.objectsWhere('owners.@count <= 1')`

The notification block will be called when the count of owners is changed to > 1.  (The root result set count changes.)

When the count is changed to == 1, the root result set count remains the same and the change block is not fired.

I would expect the notification block to be fired, indicating that there was a modification at whichever index corresponds to the dog who gained it's first owner.

Realm version: 1.0.2

Xcode version: 7.3.1

iOS/OSX version: 9.3.2

Dependency manager + version: CocoaPods version 0.39.0
",jpstern,count
3885,2016-08-12 18:21:50,"I think I understand. In the previous example, is the query `Dog.objectsWhere('owners.@count >= 1')`?
",JadenGeller,count
3885,2017-03-01 08:17:06,"@jpstern were you ever able to get this working? I am experiencing the same issue of the notification block not firing for a modification if the modification does not affect the overall query results. I further explained it in the issue @jpsim linked to above.

Unless I've missed something, it seems like the notification part of the test here: https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/ResultsTests.m#L960 Would not pass if the query was something like `[DogObject objectsWhere:@""ANY owners.name == 'James' OR ANY owners.name == 'John'""];` for example. As the change of name from John to James would not affect the final result.",danielbowden,jpsim
3884,2016-07-18 20:41:28,"The following code will crash because cannot cast `List<T>` to `List<DynamicObject>`



results.rlmResults.objectSchema.accessorClass = DynamicObject.self
This PR to fix that to assign objectSchema of `Results` `accessorClass` to `DynamicObject.self`

Also subscripting, `first()`, and `last()` methods of `List<DynamicObject>` will fail with same cast error. This will be fixed to use unsafeBitCast() instead force cast.

Related #2848

CC @bdash @mrackwitz
",kishikawakatsumi,mrackwitz
3884,2016-07-18 20:41:28,"The following code will crash because cannot cast `List<T>` to `List<DynamicObject>`



results.rlmResults.objectSchema.accessorClass = DynamicObject.self
This PR to fix that to assign objectSchema of `Results` `accessorClass` to `DynamicObject.self`

Also subscripting, `first()`, and `last()` methods of `List<DynamicObject>` will fail with same cast error. This will be fixed to use unsafeBitCast() instead force cast.

Related #2848

CC @bdash @mrackwitz
",kishikawakatsumi,bdash
3883,2016-07-18 20:34:07,"The following code will crash because cannot cast `Results<T>` to `Results<DynamicObject>`



This PR to fix that to use `unsafeBitCast()` instead force cast.

Related https://github.com/realm/realm-cocoa/pull/2848

CC @bdash @mrackwitz 
",kishikawakatsumi,mrackwitz
3883,2016-07-18 20:34:07,"The following code will crash because cannot cast `Results<T>` to `Results<DynamicObject>`



This PR to fix that to use `unsafeBitCast()` instead force cast.

Related https://github.com/realm/realm-cocoa/pull/2848

CC @bdash @mrackwitz 
",kishikawakatsumi,bdash
3882,2016-07-18 17:29:01,"Closes #3749. Changelog entry not strictly necessary, I can remove that if requested. /cc @austinzheng @tgoyne 
",jpsim,austinzheng
3882,2016-07-18 17:29:01,"Closes #3749. Changelog entry not strictly necessary, I can remove that if requested. /cc @austinzheng @tgoyne 
",jpsim,tgoyne
3876,2016-07-15 02:38:05,"There's no way to fix this with `#ifdef` since `NS_SWIFT_NAME` is defined, just not valid in all the same places. If we care to maintain backwards compatibility with older versions of Xcode (do we? //cc @bdash), we probably need to roll back https://github.com/realm/realm-cocoa/pull/3818.
",JadenGeller,bdash
3874,2016-07-14 23:29:53,"@bdash @jadengeller @jpsim @tgoyne 

Changes:
- 'createObject(ofType:populatedWith:)' is now 'createObject(_:from:)'
- 'createDynamicObject(ofType:populatedWith:)' is now 'createDynamicObject(ofType:from:)'
- 'allObjects(ofType:)' is now 'objects(ofType:)'
- 'allDynamicObjects(ofType:)' is now 'dynamicObjects(ofType:)'
",austinzheng,jadengeller
3874,2016-07-14 23:29:53,"@bdash @jadengeller @jpsim @tgoyne 

Changes:
- 'createObject(ofType:populatedWith:)' is now 'createObject(_:from:)'
- 'createDynamicObject(ofType:populatedWith:)' is now 'createDynamicObject(ofType:from:)'
- 'allObjects(ofType:)' is now 'objects(ofType:)'
- 'allDynamicObjects(ofType:)' is now 'dynamicObjects(ofType:)'
",austinzheng,jpsim
3874,2016-07-14 23:29:53,"@bdash @jadengeller @jpsim @tgoyne 

Changes:
- 'createObject(ofType:populatedWith:)' is now 'createObject(_:from:)'
- 'createDynamicObject(ofType:populatedWith:)' is now 'createDynamicObject(ofType:from:)'
- 'allObjects(ofType:)' is now 'objects(ofType:)'
- 'allDynamicObjects(ofType:)' is now 'dynamicObjects(ofType:)'
",austinzheng,bdash
3874,2016-07-14 23:29:53,"@bdash @jadengeller @jpsim @tgoyne 

Changes:
- 'createObject(ofType:populatedWith:)' is now 'createObject(_:from:)'
- 'createDynamicObject(ofType:populatedWith:)' is now 'createDynamicObject(ofType:from:)'
- 'allObjects(ofType:)' is now 'objects(ofType:)'
- 'allDynamicObjects(ofType:)' is now 'dynamicObjects(ofType:)'
",austinzheng,tgoyne
3870,2016-07-14 00:40:51,"Ignores properties not backed by ivars in both Swift and Objective-C (https://github.com/realm/realm-cocoa/issues/2840). Also makes testing for duplicate properties unnecessary since both cannot be ivar backed (https://github.com/realm/realm-cocoa/pull/1867).

//cc @bdash @tgoyne @mrackwitz @jpsim 
",JadenGeller,mrackwitz
3870,2016-07-14 00:40:51,"Ignores properties not backed by ivars in both Swift and Objective-C (https://github.com/realm/realm-cocoa/issues/2840). Also makes testing for duplicate properties unnecessary since both cannot be ivar backed (https://github.com/realm/realm-cocoa/pull/1867).

//cc @bdash @tgoyne @mrackwitz @jpsim 
",JadenGeller,jpsim
3870,2016-07-14 00:40:51,"Ignores properties not backed by ivars in both Swift and Objective-C (https://github.com/realm/realm-cocoa/issues/2840). Also makes testing for duplicate properties unnecessary since both cannot be ivar backed (https://github.com/realm/realm-cocoa/pull/1867).

//cc @bdash @tgoyne @mrackwitz @jpsim 
",JadenGeller,bdash
3870,2016-07-14 00:40:51,"Ignores properties not backed by ivars in both Swift and Objective-C (https://github.com/realm/realm-cocoa/issues/2840). Also makes testing for duplicate properties unnecessary since both cannot be ivar backed (https://github.com/realm/realm-cocoa/pull/1867).

//cc @bdash @tgoyne @mrackwitz @jpsim 
",JadenGeller,tgoyne
3870,2016-07-14 00:49:30,"Note that this will silently ignore properties marked as `@dynamic` in Objective-C or `@NSManaged` in Swift since they are not ivar backed. This should be considered a breaking change if we expect that users might be doing this. Perhaps they're only using their objects managed by Realm, and mark the properties `@dynamic` to reduce storage size for an instance of the object. To combat this, we might introduce an `managedProperties` method to parallel our `ignoredProperties` method?
",JadenGeller,NSManaged
3870,2016-07-14 00:49:30,"Note that this will silently ignore properties marked as `@dynamic` in Objective-C or `@NSManaged` in Swift since they are not ivar backed. This should be considered a breaking change if we expect that users might be doing this. Perhaps they're only using their objects managed by Realm, and mark the properties `@dynamic` to reduce storage size for an instance of the object. To combat this, we might introduce an `managedProperties` method to parallel our `ignoredProperties` method?
",JadenGeller,dynamic
3870,2016-07-14 17:17:32,"It's not just `@dynamic`. Currently there's nothing stopping you from having a property that's computed on unmanaged instances and persisted on managed instances, since we don't rely on the ivar existing for properties other than generic swift types. I'm not sure if there's any scenarios where that'd actually be _useful_ or a good idea, but that doesn't mean no one is doing it...
",tgoyne,dynamic
3868,2016-07-13 21:13:16,"@bdash 
",JadenGeller,bdash
3866,2016-07-13 20:18:34,"Please review and look for any ""hidden gotchas"" of this change, @jpsim. Discussed in https://github.com/realm/realm-cocoa/issues/3837.
",JadenGeller,jpsim
3866,2016-07-26 17:52:28,"This PR only makes the change for Swift 3, so it is not breaking.

Should be put this in the release notes? We don't typically report changes that only apply to Swift 3, but it seems we should eventually acknowledge this change in release notes when we officially support Swift 3. @jpsim 
",JadenGeller,jpsim
3863,2016-07-12 20:58:56,"//cc @bigfish24 
",JadenGeller,bigfish24
3863,2016-07-13 22:06:34,"@austinzheng Do you have any clever workaround for the ambiguity here? If not, what do you suggest?
",JadenGeller,austinzheng
3863,2016-07-13 22:33:51,"Potential solution! 🎉 If we mark `RealmBoundObject` as `@objc`, it's existential will conform to `RealmBoundObject`. This means that two unrelated classes that conform to `RealmBoundObject` can be passed in the generic constraint API!

Unfortunately, you have to give the type checker needs some help in this case, but that's totally reasonable for the advanced use case of passing unrelated types. We should definitely document this though.



The user simply must add an `as [RealmBoundObject]` to the parameter OR annotate the argument types in the closure. Again, in the case where everything in the array is of a common superclass, no type checker hints are necessary.

What're your thoughts, @austinzheng?
",JadenGeller,objc
3863,2016-07-13 22:36:41,"Oh, that's clever. And given that `RealmBoundObject` is only supported for the `NSObject`-based classes we define, the `@objc` annotation shouldn't affect anything else.
",austinzheng,objc
3863,2016-07-13 23:12:03,"Sounds like we'll go with the `@objc protocol RealmBoundObject { }` API.
",JadenGeller,objc
3856,2016-07-12 03:35:01,"Hi there @MonkeyRing!

Thanks for your issue, but could you please add some more information about your question? We provide a template when creating new issues to outline the information we need, and it would be great if you check it out and provide us with it. :)

In this case, can you please provide us with your source code for the following:
- Your Realm model object properties, outlining the data types you're actually using to store these values.
- Your source code when actually performing the sort operation.

Please let me know if you can do this. Thanks a lot!
",TimOliver,MonkeyRing
3855,2016-07-11 20:39:10,"@austinzheng 
",JadenGeller,austinzheng
3854,2016-07-11 18:00:42,"Calling `renamePropertyForClass:` replaces the object schema with one read from the group, which makes it possible to access all of the other deleted properties. An example test that currently passes, but shouldn't:



This is mostly harmless, but it means that the reported target schema is not what schema the Realm will have after the migration, and it exposes some useful functionality in a _really weird_ way.

Fixing the immediate bug would be quite simple, but it would be a breaking change. OTOH, it's very unlikely that anyone is actually relying on this, so maybe we could get away with it? I think the other option would be to make it possible to always access deleted properties on the ""new"" object in migrations. This would also be somewhat weird as we'd want to still not include them in the object's schema.

@bdash @jpim Thoughts?

The immediate relevance of this is that I'm changing the relevant code and preserving the existing behavior would be more work than fixing it.
",tgoyne,bdash
3854,2016-07-11 18:00:42,"Calling `renamePropertyForClass:` replaces the object schema with one read from the group, which makes it possible to access all of the other deleted properties. An example test that currently passes, but shouldn't:



This is mostly harmless, but it means that the reported target schema is not what schema the Realm will have after the migration, and it exposes some useful functionality in a _really weird_ way.

Fixing the immediate bug would be quite simple, but it would be a breaking change. OTOH, it's very unlikely that anyone is actually relying on this, so maybe we could get away with it? I think the other option would be to make it possible to always access deleted properties on the ""new"" object in migrations. This would also be somewhat weird as we'd want to still not include them in the object's schema.

@bdash @jpim Thoughts?

The immediate relevance of this is that I'm changing the relevant code and preserving the existing behavior would be more work than fixing it.
",tgoyne,jpim
3851,2016-07-12 04:32:19,"Hi @minhthuc251! I see that @bdash was able to help you on Stack Overflow, so I'll close this issue off now.

Please let us know if you have any more questions!
",TimOliver,bdash
3849,2016-07-08 18:48:19,"The checks are actually only checking that it was a `RLMRealm`, which is statically known to be true and thus unnecessary. I assume they historically checked for a `RLMDynamicRealm`, but this class doesn't seem to exist anymore.

@tgoyne @bdash
",JadenGeller,tgoyne
3849,2016-07-08 18:48:19,"The checks are actually only checking that it was a `RLMRealm`, which is statically known to be true and thus unnecessary. I assume they historically checked for a `RLMDynamicRealm`, but this class doesn't seem to exist anymore.

@tgoyne @bdash
",JadenGeller,bdash
3848,2016-07-08 18:45:41,"@austinzheng 
",JadenGeller,austinzheng
3847,2016-07-08 16:03:24,"was probably just debugging code introduced in #3817 /cc @JadenGeller 
",jpsim,JadenGeller
3846,2016-07-08 07:04:19,"@austinzheng @bdash 
",JadenGeller,austinzheng
3846,2016-07-08 07:04:19,"@austinzheng @bdash 
",JadenGeller,bdash
3846,2016-07-08 16:32:09,"I agree with @bdash's comment on adding more info to your objc comment. Otherwise 👍. I didn't do a thorough review of the Swift 3 tests, but we'll need to do that again when Xcode 8 goes GM anyway.
",jpsim,bdash
3845,2016-07-08 00:49:43,"Class methods that return `instancetype` are imported without `@discardableResult` in Swift 3. I don’t think this is desirable for things like `create(in:with:)` to warn about unused results, so we should find a way to prevent this. I don't think Objective-C (yet) has a discardable result attribute, so I'm unsure if a workaround exists.
",JadenGeller,discardableResult
3841,2016-07-07 20:12:43,"Explicitly pass in the Group to the query builder code and look up tables in it and column numbers in the Tables rather than getting those indirectly from RLMObjectSchema and RLMProperty. This eliminates any dependency on the private members of the schema classes and makes the query code ready for runtime schema changes. The slowdown from the extra column number lookups is in the range of a few percent.

Refactor the code by putting most of the free functions into a class that stores the Schema, Query and Group to avoid having to pass around quite so many values to every single function.

@bdash 
",tgoyne,bdash
3839,2016-07-06 23:33:02,"@bdash 
",JadenGeller,bdash
3838,2016-07-20 19:59:19,"@asjesset what would you like to see improved in Realm to make your use case easier?

Would it make sense to have ""new"" variants of `deletions`, `insertions`, `modifications` on `RLMCollectionChange`? Or to expose a `@property (readonly) NSArray<NSNumber *> *modificationsInNew` property?
",jpsim,property
3837,2016-07-06 23:20:53,"@tgoyne What're you thoughts on this given that it both breaks source compatibility (in easily fixed, uncommon cases) and, more importantly, it mostly-silently changes the semantics of the collection? It might be reasonable to rename the protocol `RealmLazyCollection` as part of this change if we decide to go through with it.
",JadenGeller,tgoyne
3837,2016-07-06 23:36:44,"Since it's a breaking change it'd need to be swift 3-only.

I believe there was a reason we didn't use `LazyCollectionType` originally, but if so I don't know why. @jpsim may remember. If there's no hidden gotchas it sounds like the right thing to do to me.
",tgoyne,jpsim
3836,2016-07-06 18:42:28,"@austinzheng @jpsim @tgoyne @bdash 
",JadenGeller,austinzheng
3836,2016-07-06 18:42:28,"@austinzheng @jpsim @tgoyne @bdash 
",JadenGeller,tgoyne
3836,2016-07-06 18:42:28,"@austinzheng @jpsim @tgoyne @bdash 
",JadenGeller,bdash
3836,2016-07-06 18:42:28,"@austinzheng @jpsim @tgoyne @bdash 
",JadenGeller,jpsim
3835,2016-07-06 18:34:41,"There's no real good reason to have `Error` in Realm Swift be its own separate enum. Having an `==` for non-specific `ErrorProtocol` instances is also kind of problematic.

@tgoyne @jpsim @bdash @JadenGeller 
",austinzheng,jpsim
3835,2016-07-06 18:34:41,"There's no real good reason to have `Error` in Realm Swift be its own separate enum. Having an `==` for non-specific `ErrorProtocol` instances is also kind of problematic.

@tgoyne @jpsim @bdash @JadenGeller 
",austinzheng,tgoyne
3835,2016-07-06 18:34:41,"There's no real good reason to have `Error` in Realm Swift be its own separate enum. Having an `==` for non-specific `ErrorProtocol` instances is also kind of problematic.

@tgoyne @jpsim @bdash @JadenGeller 
",austinzheng,bdash
3835,2016-07-06 18:34:41,"There's no real good reason to have `Error` in Realm Swift be its own separate enum. Having an `==` for non-specific `ErrorProtocol` instances is also kind of problematic.

@tgoyne @jpsim @bdash @JadenGeller 
",austinzheng,JadenGeller
3835,2016-07-06 19:44:36,"How difficult would it be to extend Jazzy so that ""exported"" classes also generate documentation? @jpsim 
",JadenGeller,jpsim
3834,2016-07-06 16:51:59,"Pretty straightforward. I don't think Swift recognizes `warn_unused_result` anymore, since the default behavior was switched around.

@tgoyne @jpsim @JadenGeller @bdash 
",austinzheng,jpsim
3834,2016-07-06 16:51:59,"Pretty straightforward. I don't think Swift recognizes `warn_unused_result` anymore, since the default behavior was switched around.

@tgoyne @jpsim @JadenGeller @bdash 
",austinzheng,tgoyne
3834,2016-07-06 16:51:59,"Pretty straightforward. I don't think Swift recognizes `warn_unused_result` anymore, since the default behavior was switched around.

@tgoyne @jpsim @JadenGeller @bdash 
",austinzheng,bdash
3834,2016-07-06 16:51:59,"Pretty straightforward. I don't think Swift recognizes `warn_unused_result` anymore, since the default behavior was switched around.

@tgoyne @jpsim @JadenGeller @bdash 
",austinzheng,JadenGeller
3834,2016-07-07 18:50:26,"I'll write up a Swift Evolution proposal for this since I think the warning message is pretty important in our usage.

@austinzheng and I were thinking something along the lines of `@discardableResultWarning(message: ""You must hold on to the NotificationToken returned from addNotificationBlock"")`
",JadenGeller,discardableResultWarning
3832,2016-07-07 20:35:23,"@austinzheng 
",JadenGeller,austinzheng
3832,2016-07-07 20:42:16,"^^ @tgoyne @bdash @jpsim 
",JadenGeller,jpsim
3832,2016-07-07 20:42:16,"^^ @tgoyne @bdash @jpsim 
",JadenGeller,tgoyne
3832,2016-07-07 20:42:16,"^^ @tgoyne @bdash @jpsim 
",JadenGeller,bdash
3830,2016-07-06 00:03:48,"Muting the query in-place used to be required due to issues with Query's node
ownership logic, but that's all been fixed and returning a new Query makes some
of the call sites nicer and none of them worse.

@bdash 
",tgoyne,bdash
3829,2016-07-05 23:02:56,"This is a large and boring change, so don't feel like there's any rush to review it.

@tgoyne @bdash @jpsim @JadenGeller 

Changes:
- Documentation for Swift 3 APIs is now correct
- `Error` in Realm Swift is now just a typealias for the Objective-C error type
- Updated and fixed unit tests
",austinzheng,jpsim
3829,2016-07-05 23:02:56,"This is a large and boring change, so don't feel like there's any rush to review it.

@tgoyne @bdash @jpsim @JadenGeller 

Changes:
- Documentation for Swift 3 APIs is now correct
- `Error` in Realm Swift is now just a typealias for the Objective-C error type
- Updated and fixed unit tests
",austinzheng,tgoyne
3829,2016-07-05 23:02:56,"This is a large and boring change, so don't feel like there's any rush to review it.

@tgoyne @bdash @jpsim @JadenGeller 

Changes:
- Documentation for Swift 3 APIs is now correct
- `Error` in Realm Swift is now just a typealias for the Objective-C error type
- Updated and fixed unit tests
",austinzheng,bdash
3829,2016-07-05 23:02:56,"This is a large and boring change, so don't feel like there's any rush to review it.

@tgoyne @bdash @jpsim @JadenGeller 

Changes:
- Documentation for Swift 3 APIs is now correct
- `Error` in Realm Swift is now just a typealias for the Objective-C error type
- Updated and fixed unit tests
",austinzheng,JadenGeller
3829,2016-07-27 20:59:27,"#3748 

@jpsim @bdash @tgoyne @mrackwitz @JadenGeller -- feel free to review, but only if you're interested.

EDIT: The `Error` changes have also been excised.
",austinzheng,mrackwitz
3829,2016-07-27 20:59:27,"#3748 

@jpsim @bdash @tgoyne @mrackwitz @JadenGeller -- feel free to review, but only if you're interested.

EDIT: The `Error` changes have also been excised.
",austinzheng,tgoyne
3828,2016-07-12 01:51:52,"@bdash @tgoyne @jpsim @austinzheng 
",JadenGeller,jpsim
3828,2016-07-12 01:51:52,"@bdash @tgoyne @jpsim @austinzheng 
",JadenGeller,bdash
3828,2016-07-12 01:51:52,"@bdash @tgoyne @jpsim @austinzheng 
",JadenGeller,austinzheng
3828,2016-07-12 01:51:52,"@bdash @tgoyne @jpsim @austinzheng 
",JadenGeller,tgoyne
3828,2016-07-12 18:17:22,"As @jpsim mentioned in https://github.com/realm/realm-cocoa/issues/3136#issuecomment-175328699, the user might want to specify the queue priority. I think it's a reasonable thing to expose. It looks like a user also wanted serial, async reads https://github.com/realm/realm-cocoa/issues/3755, so choosing between concurrent/serial queues might be another reason to specify. Finally, named queues might be beneficial for debugging.

@bdash Any suggestions of a better naming scheme? We could write them as functions on the dispatch queue / top level functions I guess. The Realm could even be inferred based on the arguments (throwing if not the same for each). This kinda makes the queue a more prevalent part of the API though, so it doesn't fit well with your first concern.


",JadenGeller,jpsim
3828,2016-07-12 21:04:18,"@bdash @astigsen Just talked with @jpsim offline, and he felt that we should definitely include the queue parameter. We can document that the objects are only valid for the duration of the block. I don't think this should be a huge surprise to users given that Realm objects are thread confined, and there's no guarantee what thread a queue runs on.

We also discussed the Objective-C overloads. We decided that a reasonable solution would be to only include the queue parameter in the most complicated overload rather than including every combination of conveniences.
",JadenGeller,jpsim
3828,2016-07-12 21:39:44,"> Why is performing async work without handing over any objects an API we need to provide? It already exists as dispatch_async.

I'm not sure how necessary it is, but it essentially ""passes"" the Realm asynchronously. It's nice to have, I think. I don't feel strongly about it though, I just followed what @jpsim proposed in https://github.com/realm/realm-cocoa/issues/3136#issuecomment-175328699.
",JadenGeller,jpsim
3828,2016-07-25 19:57:35,"//cc @jpsim @austinzheng @bdash @tgoyne 
",JadenGeller,jpsim
3828,2016-07-25 19:57:35,"//cc @jpsim @austinzheng @bdash @tgoyne 
",JadenGeller,austinzheng
3828,2016-07-27 00:07:36,"I'd also appreciate if the documentation could be reviewed since this is a pretty major addition. @jpsim 
",JadenGeller,jpsim
3827,2016-07-05 18:55:04,"It was incorrectly using the table column as an index in the input array for the primary key value.

@bdash @jpsim 
",tgoyne,jpsim
3827,2016-07-05 18:55:04,"It was incorrectly using the table column as an index in the input array for the primary key value.

@bdash @jpsim 
",tgoyne,bdash
3818,2016-07-01 21:48:41,"Also, if I'm understanding Jenkins right, this attribute seems to break Jazzy doc generation for Realm? https://ci.realm.io/job/objc_pr/3619/configuration=Release,swift_version=2.2,target=docs/console //cc @jpsim 
",JadenGeller,jpsim
3818,2016-07-05 21:22:47,"@tgoyne @austinzheng Could you review and +1? 🙂 Specifically, I think this requires review: https://github.com/realm/realm-cocoa/pull/3818/files#r69359318
",JadenGeller,austinzheng
3818,2016-07-05 21:22:47,"@tgoyne @austinzheng Could you review and +1? 🙂 Specifically, I think this requires review: https://github.com/realm/realm-cocoa/pull/3818/files#r69359318
",JadenGeller,tgoyne
3817,2016-07-05 20:43:23,"Marking the Swift method as `@nonobjc` should work.
",tgoyne,nonobjc
3815,2016-07-01 00:26:03,"@bdash I actually think the `@autoreleasepool` is causing an issue.
",JadenGeller,autoreleasepool
3814,2016-07-06 14:06:51,"@jpsim @JadenGeller @bdash @tgoyne Was realm/realm-core#838 ever completed? I saw that it was referenced in issue [#3083](https://github.com/realm/realm-cocoa/issues/3083) but the page can no longer be found.
",cpinski,jpsim
3813,2016-06-30 23:31:28,"Context:

> I think we have to look at it from the users perspective. When I go to the doc with the intention to find out how I get the length of the List, I don’t want to have to explore a labyrinth of protocols, I just want to know what to call. (Alexander Stigsen)

There are a couple of members (like `count`) that are defined in a superclass marked as `:nodoc:`, which means that Jazzy won't generate documentation for them. I will probably end up moving those methods into the public API subclass so that we can generate documentation for them. (@jpsim)
",austinzheng,jpsim
3809,2016-06-30 08:52:12,"We are investigating what looks like a Core sorting bug on Android right now, so you might want to hold merging this until we have verified it either way: https://github.com/realm/realm-core/pull/1934

EDIT: We determined this is a breaking change in Core in 1.1.2. Sorting behaviour was changed which has user facing implications (like danish characters suddenly being sorted wrong). Java is adding a work-around for this in our JNI binding so we can keep using the old sort behaviour, but I believe @kneth will be working to integrate that back into Core itself: https://github.com/realm/realm-java/pull/3096
",cmelchior,kneth
3802,2016-06-26 22:20:15,"Yeah, using `.self` allows for it to work. Though chatting with @jpsim on twitter there was some thought that it may be a compiler bug. Happy for this issue to be closed if using `MyRealmObject.self` is the preferred way.
",mattdelves,jpsim
3797,2016-06-24 01:00:00,"@jpsim @tgoyne @bdash @mrackwitz 

This removes the requirement for Xcode 8 users to configure code signing when building Realm for device targets.
",austinzheng,mrackwitz
3797,2016-06-24 01:00:00,"@jpsim @tgoyne @bdash @mrackwitz 

This removes the requirement for Xcode 8 users to configure code signing when building Realm for device targets.
",austinzheng,jpsim
3797,2016-06-24 01:00:00,"@jpsim @tgoyne @bdash @mrackwitz 

This removes the requirement for Xcode 8 users to configure code signing when building Realm for device targets.
",austinzheng,tgoyne
3797,2016-06-24 01:00:00,"@jpsim @tgoyne @bdash @mrackwitz 

This removes the requirement for Xcode 8 users to configure code signing when building Realm for device targets.
",austinzheng,bdash
3796,2016-06-23 21:49:25,"Hoping to get feedback for this preliminary, working set of instructions for building for Swift 3 and/or Xcode 8.

Some questions:
- Where should these instructions live?
- Are we going to allow people to use CocoaPods today to build Realm for Swift 3?

@jpsim @tgoyne @bdash 

---
## Building Realm from source for Xcode 8 Beta

**Important**: Realm for Xcode 8 is not officially supported; the instructions below are intended for developers who are working to port their applications to Swift 2.3 or Swift 3, or otherwise using Xcode 8. During the preview period, the only way to obtain Realm for Xcode 8 is by building from source; we are not supporting dependency managers or providing pre-packaged binaries.

**Prerequisites**: you must have a valid Apple Developer account, with certificates for iOS and/or macOS. Go to https://developer.apple.com and update your certificates if necessary.
1. Clone the Realm Cocoa repository. (Run the Terminal command `git clone git@github.com:realm/realm-cocoa.git` in whatever directory you want the repository to be stored in.)
2. Open _build.sh_ (it is located in the root project directory).
3. Find the line that reads: `CODESIGN_PARAMS=""CODE_SIGN_IDENTITY= CODE_SIGNING_REQUIRED=NO""`, and change it to just read `CODESIGN_PARAMS=""""`. (It is line 29 in the file.)
4. Open the Realm Cocoa Xcode project (_Realm.xcodeproj_).
5. If a dialog window appears asking whether to ""Convert to Current Swift Syntax?"", press the ""Later"" button.
6. Click on the Realm project in the Project Navigator.
7. Click on the ""Realm"" target.
8. Click on the ""Build Settings"" tab (make sure ""All"" options are shown, not just ""Basic""), and scroll down to the ""Signing"" section.
9. Expand the ""Code Signing Identity"" field by clicking the triangle.
10. For the ""Debug"" and ""Release"" sub-options, choose a ""Mac Developer"" identity from the drop-down menu (in most cases, just choose the one within the ""Automatic"" section).
11. If you wish to build Realm for an iOS app (iPhone, Apple TV, Apple Watch), for the ""iPhone\* SDK"" sub-options choose an ""iPhone Developer"" identity from the drop-down menu (in most cases, choose an appropriate identity from within the ""Identities in Keychain"" section).
12. Click on the ""General"" tab.
13. Under the ""Signing"" category, press the""Enable Development Signing"" button, and then uncheck the ""Automatically Manage Signing"" checkbox.
14. Under ""Signing (Debug)"" and ""Signing (Release)"", choose the Apple Developer team associated with the certificates you chose in steps 10 and 11 from the drop-down menus. (If there is only one team listed, just choose that one.)
15. If you want to build Realm Swift, repeat steps 6 through 14 for the ""RealmSwift"" target. (If you want to build for Swift 2.3, activate the ""Use Legacy Swift Language Version"" build setting.)
16. Choose the correct scheme (_Realm_ or _RealmSwift_) and device. If you want to build Realm for an OS X application, choose ""My Mac"". Otherwise choose the appropriate ""Generic _*OS_ Device"".
17. Build the project.
18. In the Project Navigator, under the ""Products"" group, right-click on ""Realm.framework"" and select ""Show in Finder"" to open up the folder containing the built frameworks.
19. Drag _Realm.framework_ (and, if using Realm Swift, _RealmSwift.framework_) into your Xcode project. Follow the instructions at https://realm.io/docs/objc/latest/#dynamic-install to complete setup.
",austinzheng,jpsim
3796,2016-06-23 21:49:25,"Hoping to get feedback for this preliminary, working set of instructions for building for Swift 3 and/or Xcode 8.

Some questions:
- Where should these instructions live?
- Are we going to allow people to use CocoaPods today to build Realm for Swift 3?

@jpsim @tgoyne @bdash 

---
## Building Realm from source for Xcode 8 Beta

**Important**: Realm for Xcode 8 is not officially supported; the instructions below are intended for developers who are working to port their applications to Swift 2.3 or Swift 3, or otherwise using Xcode 8. During the preview period, the only way to obtain Realm for Xcode 8 is by building from source; we are not supporting dependency managers or providing pre-packaged binaries.

**Prerequisites**: you must have a valid Apple Developer account, with certificates for iOS and/or macOS. Go to https://developer.apple.com and update your certificates if necessary.
1. Clone the Realm Cocoa repository. (Run the Terminal command `git clone git@github.com:realm/realm-cocoa.git` in whatever directory you want the repository to be stored in.)
2. Open _build.sh_ (it is located in the root project directory).
3. Find the line that reads: `CODESIGN_PARAMS=""CODE_SIGN_IDENTITY= CODE_SIGNING_REQUIRED=NO""`, and change it to just read `CODESIGN_PARAMS=""""`. (It is line 29 in the file.)
4. Open the Realm Cocoa Xcode project (_Realm.xcodeproj_).
5. If a dialog window appears asking whether to ""Convert to Current Swift Syntax?"", press the ""Later"" button.
6. Click on the Realm project in the Project Navigator.
7. Click on the ""Realm"" target.
8. Click on the ""Build Settings"" tab (make sure ""All"" options are shown, not just ""Basic""), and scroll down to the ""Signing"" section.
9. Expand the ""Code Signing Identity"" field by clicking the triangle.
10. For the ""Debug"" and ""Release"" sub-options, choose a ""Mac Developer"" identity from the drop-down menu (in most cases, just choose the one within the ""Automatic"" section).
11. If you wish to build Realm for an iOS app (iPhone, Apple TV, Apple Watch), for the ""iPhone\* SDK"" sub-options choose an ""iPhone Developer"" identity from the drop-down menu (in most cases, choose an appropriate identity from within the ""Identities in Keychain"" section).
12. Click on the ""General"" tab.
13. Under the ""Signing"" category, press the""Enable Development Signing"" button, and then uncheck the ""Automatically Manage Signing"" checkbox.
14. Under ""Signing (Debug)"" and ""Signing (Release)"", choose the Apple Developer team associated with the certificates you chose in steps 10 and 11 from the drop-down menus. (If there is only one team listed, just choose that one.)
15. If you want to build Realm Swift, repeat steps 6 through 14 for the ""RealmSwift"" target. (If you want to build for Swift 2.3, activate the ""Use Legacy Swift Language Version"" build setting.)
16. Choose the correct scheme (_Realm_ or _RealmSwift_) and device. If you want to build Realm for an OS X application, choose ""My Mac"". Otherwise choose the appropriate ""Generic _*OS_ Device"".
17. Build the project.
18. In the Project Navigator, under the ""Products"" group, right-click on ""Realm.framework"" and select ""Show in Finder"" to open up the folder containing the built frameworks.
19. Drag _Realm.framework_ (and, if using Realm Swift, _RealmSwift.framework_) into your Xcode project. Follow the instructions at https://realm.io/docs/objc/latest/#dynamic-install to complete setup.
",austinzheng,tgoyne
3796,2016-06-23 21:49:25,"Hoping to get feedback for this preliminary, working set of instructions for building for Swift 3 and/or Xcode 8.

Some questions:
- Where should these instructions live?
- Are we going to allow people to use CocoaPods today to build Realm for Swift 3?

@jpsim @tgoyne @bdash 

---
## Building Realm from source for Xcode 8 Beta

**Important**: Realm for Xcode 8 is not officially supported; the instructions below are intended for developers who are working to port their applications to Swift 2.3 or Swift 3, or otherwise using Xcode 8. During the preview period, the only way to obtain Realm for Xcode 8 is by building from source; we are not supporting dependency managers or providing pre-packaged binaries.

**Prerequisites**: you must have a valid Apple Developer account, with certificates for iOS and/or macOS. Go to https://developer.apple.com and update your certificates if necessary.
1. Clone the Realm Cocoa repository. (Run the Terminal command `git clone git@github.com:realm/realm-cocoa.git` in whatever directory you want the repository to be stored in.)
2. Open _build.sh_ (it is located in the root project directory).
3. Find the line that reads: `CODESIGN_PARAMS=""CODE_SIGN_IDENTITY= CODE_SIGNING_REQUIRED=NO""`, and change it to just read `CODESIGN_PARAMS=""""`. (It is line 29 in the file.)
4. Open the Realm Cocoa Xcode project (_Realm.xcodeproj_).
5. If a dialog window appears asking whether to ""Convert to Current Swift Syntax?"", press the ""Later"" button.
6. Click on the Realm project in the Project Navigator.
7. Click on the ""Realm"" target.
8. Click on the ""Build Settings"" tab (make sure ""All"" options are shown, not just ""Basic""), and scroll down to the ""Signing"" section.
9. Expand the ""Code Signing Identity"" field by clicking the triangle.
10. For the ""Debug"" and ""Release"" sub-options, choose a ""Mac Developer"" identity from the drop-down menu (in most cases, just choose the one within the ""Automatic"" section).
11. If you wish to build Realm for an iOS app (iPhone, Apple TV, Apple Watch), for the ""iPhone\* SDK"" sub-options choose an ""iPhone Developer"" identity from the drop-down menu (in most cases, choose an appropriate identity from within the ""Identities in Keychain"" section).
12. Click on the ""General"" tab.
13. Under the ""Signing"" category, press the""Enable Development Signing"" button, and then uncheck the ""Automatically Manage Signing"" checkbox.
14. Under ""Signing (Debug)"" and ""Signing (Release)"", choose the Apple Developer team associated with the certificates you chose in steps 10 and 11 from the drop-down menus. (If there is only one team listed, just choose that one.)
15. If you want to build Realm Swift, repeat steps 6 through 14 for the ""RealmSwift"" target. (If you want to build for Swift 2.3, activate the ""Use Legacy Swift Language Version"" build setting.)
16. Choose the correct scheme (_Realm_ or _RealmSwift_) and device. If you want to build Realm for an OS X application, choose ""My Mac"". Otherwise choose the appropriate ""Generic _*OS_ Device"".
17. Build the project.
18. In the Project Navigator, under the ""Products"" group, right-click on ""Realm.framework"" and select ""Show in Finder"" to open up the folder containing the built frameworks.
19. Drag _Realm.framework_ (and, if using Realm Swift, _RealmSwift.framework_) into your Xcode project. Follow the instructions at https://realm.io/docs/objc/latest/#dynamic-install to complete setup.
",austinzheng,bdash
3794,2016-06-23 11:28:42,"

---



it crash when i declare ""@property RLMArray < FriendRealmItem > \*  friendsItemArray;""

the log is : 


",qylibohao,property
3791,2016-06-22 23:10:04,"/c @bdash 
",mrackwitz,bdash
3790,2016-07-02 04:07:08,"@austinzheng Subclassing `RLMLinkingObjects` is problematic because we've marked `init()` unavailable, and every Swift class must have an initializer (even if private). One workaround is to introduce an `initWith__:` method on `RLMLinkingObjects` and override this on the `LinkingObjects` subclass. I guess we would then tell users to mark the class as `@NSManaged` (rather than `@dynamic`) so they would not be required to give it a default value. Does that seem reasonable?
",JadenGeller,dynamic
3790,2016-07-02 04:07:08,"@austinzheng Subclassing `RLMLinkingObjects` is problematic because we've marked `init()` unavailable, and every Swift class must have an initializer (even if private). One workaround is to introduce an `initWith__:` method on `RLMLinkingObjects` and override this on the `LinkingObjects` subclass. I guess we would then tell users to mark the class as `@NSManaged` (rather than `@dynamic`) so they would not be required to give it a default value. Does that seem reasonable?
",JadenGeller,NSManaged
3790,2016-07-02 04:26:08,"`@NSManaged` is only valid on Objective-C representable objects, so we'll have to be more clever.
",JadenGeller,NSManaged
3787,2016-06-21 23:54:39,"@bdash 
",tgoyne,bdash
3782,2016-06-21 05:38:37,"I [noticed](https://gist.github.com/orta/057eab0832773aa299a6ebd39187ab06) that the `<details>` HTML tag is supported by GitHub-flavoured Markdown and thought that might be a neat way to get the intro of our issue template out of the way without bothering users creating issues to remove that part. In addition to that we can use it to collapse longer sections. 😳

/c @jpsim @bmunkholm 
",mrackwitz,jpsim
3782,2016-06-21 05:38:37,"I [noticed](https://gist.github.com/orta/057eab0832773aa299a6ebd39187ab06) that the `<details>` HTML tag is supported by GitHub-flavoured Markdown and thought that might be a neat way to get the intro of our issue template out of the way without bothering users creating issues to remove that part. In addition to that we can use it to collapse longer sections. 😳

/c @jpsim @bmunkholm 
",mrackwitz,bmunkholm
3781,2016-06-21 03:11:38,"In follow is my realm file:
@property NSString *operator;
@property NSString *publishTime;

Now I add a protery,the realm file is becoming : 
@property NSString *operator;
@property NSString *publishTime;
@property NSString *title;

then I run the project in Xcode,click the button where used realm,the project is crash.The errors is

 File ""/Users/ltl/Library/Application Support/Realm/rlm_lldb.py"", line 226, in RLMResults_SummaryProvider
    if not is_results_evaluated(obj):
  File ""/Users/ltl/Library/Application Support/Realm/rlm_lldb.py"", line 213, in is_results_evaluated
    mode_query_value = next(m for m in mode_type.enum_members if m.name == 'Query').GetValueAsUnsigned()
StopIteration

How can I fix it ?
But When I delete the APP from iPhone,run the project again,and click the button where used realm,the project is not crash,so I have no idea how to solve this issue?   God ,it is crash agagin!!!
",kernel-lj,property
3771,2016-06-19 00:47:28,"Closes #3759.

There's room for improvement to minimize the amount of duplicated code, but at least this addresses the issues described in #3759.

Also resolves CocoaPods support for Swift 3 (see [tweet](https://twitter.com/leoderbois/status/744161106059493377)), since we no longer run `set-swift-version` in `build.sh cocoapods-setup`.

/cc @austinzheng @tgoyne 
",jpsim,austinzheng
3771,2016-06-19 00:47:28,"Closes #3759.

There's room for improvement to minimize the amount of duplicated code, but at least this addresses the issues described in #3759.

Also resolves CocoaPods support for Swift 3 (see [tweet](https://twitter.com/leoderbois/status/744161106059493377)), since we no longer run `set-swift-version` in `build.sh cocoapods-setup`.

/cc @austinzheng @tgoyne 
",jpsim,tgoyne
3767,2016-06-17 20:21:43,"//cc @bdash 
",JadenGeller,bdash
3767,2016-06-20 19:08:12,"@bdash @jpsim @mrackwitz I've made the suggested changes. I feel that the exception message may be a bit confusing, so please provide feedback if you agree.

> Can't persist NSNumber directly: use a Swift-native number type or provide a default value, which allows to infer the type
",JadenGeller,mrackwitz
3767,2016-06-20 19:08:12,"@bdash @jpsim @mrackwitz I've made the suggested changes. I feel that the exception message may be a bit confusing, so please provide feedback if you agree.

> Can't persist NSNumber directly: use a Swift-native number type or provide a default value, which allows to infer the type
",JadenGeller,bdash
3767,2016-07-15 20:40:36,"@bdash @jpsim I made the changes you requested. I'll merge this later today if there are no objections.
",JadenGeller,bdash
3763,2016-06-17 09:19:00,"Thanks for reporting this!

I can confirm this issue. Everything works with CocoaPods 0.39 though. There is a similar issues here: https://github.com/CocoaPods/CocoaPods/issues/5518

/cc @mrackwitz 
",stel,mrackwitz
3762,2016-06-16 23:28:01,"This makes things a bit less weird when constructing a schema manually for the
dynamic API (since the properties array visible to you will actually match what
you passed in), is required to support having the array of properties be a
subset of the table columns, and simplifies handling columns being rearranged a bit.

Also a little faster since it's O(N) rather than O(N log N), but if you have
enough properties for it to be even remotely noticeable something has gone very
wrong.

@bdash 
",tgoyne,bdash
3760,2016-06-16 21:03:16,"/cc @austinzheng @tgoyne @jpsim 
",JadenGeller,austinzheng
3760,2016-06-16 21:03:16,"/cc @austinzheng @tgoyne @jpsim 
",JadenGeller,tgoyne
3760,2016-06-16 21:03:16,"/cc @austinzheng @tgoyne @jpsim 
",JadenGeller,jpsim
3754,2016-06-16 00:00:57,"@tgoyne @bdash @jpsim 

Let me know if you have any questions.
#3748
",austinzheng,jpsim
3754,2016-06-16 00:00:57,"@tgoyne @bdash @jpsim 

Let me know if you have any questions.
#3748
",austinzheng,tgoyne
3754,2016-06-16 00:00:57,"@tgoyne @bdash @jpsim 

Let me know if you have any questions.
#3748
",austinzheng,bdash
3752,2016-06-23 14:59:29,"We merged some changes that should fix CocoaPods for Swift 3. @austinzheng is now working on adding documentation for installing Realm Swift in Swift 3 projects.
",jpsim,austinzheng
3745,2016-06-14 20:49:08,"Adds a sample using a `UICollectionView`, which needs little different glue code to propagate changes from our fine-grained notifications to the collection view. This is mainly intended as a reference for our users.

/c @icanzilb @TimOliver 
",mrackwitz,TimOliver
3745,2016-06-14 20:49:08,"Adds a sample using a `UICollectionView`, which needs little different glue code to propagate changes from our fine-grained notifications to the collection view. This is mainly intended as a reference for our users.

/c @icanzilb @TimOliver 
",mrackwitz,icanzilb
3745,2016-07-12 15:39:51,"ping and /c @jpsim

Completely reviewing this PR with all the boilerplate stuff in here is difficult. I'd appreciate a brief look at [CollectionViewController.swift](https://github.com/realm/realm-cocoa/blob/mr/example/collectionview/examples/ios/swift-2.2/CollectionView/CollectionViewController.swift).
",mrackwitz,jpsim
3744,2016-06-14 09:07:02,"I'm using realm-cocoa in a Swift application.
This is necessary as I can not yet switch to using frameworks.

I'm experiencing a crash when using flatMap on RLMResults when building with ""-Owholemodule"".

Building with Xcode 7.3.1 and AddressSanitizer enabled points out a heap-use-after-free in [RLMResults countByEnumeratingWithState:objects:count].
It seems that the RLMGenerator instance is released before flatMap() is finished calling countByEnumeratingWithState...

The issue is reproducing on device and in the simulator.

A workaround is to use the attribute  `@inline(never)` on RLMGenerator.next().
This is possibly a swift optimizer issue...
## Steps to Reproduce
- Download the sample from the link below.
- Go to RLMGeneratorCrash/ folder
- Install Realm using cocoa pods: 'pod install'
- Open OptimizationBug.xcworkspace
- Run in a simulator
  Result: 
  SUMMARY: AddressSanitizer: heap-use-after-free RLMResults.mm:145 in -[RLMResults countByEnumeratingWithState:objects:count:]
## Code Sample

A sample project is available at https://github.com/nevil/Bugs/tree/master/RLMGeneratorCrash

Realm version: 1.0.1
Xcode version: 7.3.1
Cocoapods version: 0.39.0
",nevil,inline
3744,2016-11-29 21:25:41,"Any updates on a fix for this?
It looks like it is still happening as of v2.1.0 release using Xcode 8.0 (8A218a) (whole module optimization is on)

I can confirm adding @inline(never) to public func next() -> RLMObject? resolves the crash.

My stacktrace is not useful for this other then pinpointing crash at RLMSupport.swift:40
I can private message you the offending realm + flatMap statement if it is of any value.",isoiphone,inline
3744,2016-11-29 21:49:43,"> Any updates on a fix for this?

I've commented on [SR-1768](https://bugs.swift.org/browse/SR-1768) to follow up.

@isoiphone would you advise against adding `@inline(never)` to `next()` in `RLMSupport.swift` directly? If that works around the issue, that may be the best way to resolve it short term.",jpsim,inline
3742,2016-06-13 16:15:54,"This PR adds Swift 3 preview support to our master branch, per JP's request. The code compiles/tests pass as of the June 6 developer snapshot.

Let me know if you have any questions, or if anything should be changed etc.

@tgoyne @jpsim @bdash
",austinzheng,jpsim
3742,2016-06-13 16:15:54,"This PR adds Swift 3 preview support to our master branch, per JP's request. The code compiles/tests pass as of the June 6 developer snapshot.

Let me know if you have any questions, or if anything should be changed etc.

@tgoyne @jpsim @bdash
",austinzheng,tgoyne
3742,2016-06-13 16:15:54,"This PR adds Swift 3 preview support to our master branch, per JP's request. The code compiles/tests pass as of the June 6 developer snapshot.

Let me know if you have any questions, or if anything should be changed etc.

@tgoyne @jpsim @bdash
",austinzheng,bdash
3742,2016-06-14 00:56:19,"@tgoyne @jpsim @bdash Final ping; I've commented out the `Sequence` extensions on the Objective-C types per JP, and am ready to merge once I get an approval.
",austinzheng,bdash
3737,2016-07-05 18:56:05,"@bdash 
",tgoyne,bdash
3734,2016-06-10 16:13:07,"`newObject[@ ""idCheck""] = false;` needs to be `newObject[@""idCheck""] = @NO;`. Obj-c container subscripting takes/returns `id`, and `false` implicitly converts to `nil` when cast to `id` rather than a false NSNumber.

Note also that non-optional `bool` properties will default to `false` and non-optional `NSString` properties default to the empty string, so you don't need to explicitly set them to that in the migration block.
",tgoyne,NO
3730,2016-06-08 23:49:57,"@tgoyne @bdash @jpsim

Here is a helper class that I'm hoping can help our users write more robust unit tests involving Realms. It's basically a helper class based off our `RLMTestCase` base test case, but with no XCTest dependencies.

The idea is that a user would create an instance of this class belonging to every test case class they make which uses Realms. They'd have to override `invokeTest` on their test class to call the helper's `invokeTest` method. They'd use this class's methods to perform async and sync work, but write their tests as usual otherwise.

This isn't so much of a review as it is asking what you think of the basic concept. How is the API? Could it use more helper methods? Is it too cumbersome? Let me know your thoughts.

(If this is something we want to pursue further I'll add documentation and a Swift wrapper.)
",austinzheng,jpsim
3730,2016-06-08 23:49:57,"@tgoyne @bdash @jpsim

Here is a helper class that I'm hoping can help our users write more robust unit tests involving Realms. It's basically a helper class based off our `RLMTestCase` base test case, but with no XCTest dependencies.

The idea is that a user would create an instance of this class belonging to every test case class they make which uses Realms. They'd have to override `invokeTest` on their test class to call the helper's `invokeTest` method. They'd use this class's methods to perform async and sync work, but write their tests as usual otherwise.

This isn't so much of a review as it is asking what you think of the basic concept. How is the API? Could it use more helper methods? Is it too cumbersome? Let me know your thoughts.

(If this is something we want to pursue further I'll add documentation and a Swift wrapper.)
",austinzheng,tgoyne
3730,2016-06-08 23:49:57,"@tgoyne @bdash @jpsim

Here is a helper class that I'm hoping can help our users write more robust unit tests involving Realms. It's basically a helper class based off our `RLMTestCase` base test case, but with no XCTest dependencies.

The idea is that a user would create an instance of this class belonging to every test case class they make which uses Realms. They'd have to override `invokeTest` on their test class to call the helper's `invokeTest` method. They'd use this class's methods to perform async and sync work, but write their tests as usual otherwise.

This isn't so much of a review as it is asking what you think of the basic concept. How is the API? Could it use more helper methods? Is it too cumbersome? Let me know your thoughts.

(If this is something we want to pursue further I'll add documentation and a Swift wrapper.)
",austinzheng,bdash
3729,2016-06-08 13:28:45,"Please review this @realm/cocoa 
",zaki50,realm
3727,2016-06-07 23:39:53,"Per #3335.

@tgoyne @jpsim @bdash 
",austinzheng,jpsim
3727,2016-06-07 23:39:53,"Per #3335.

@tgoyne @jpsim @bdash 
",austinzheng,tgoyne
3727,2016-06-07 23:39:53,"Per #3335.

@tgoyne @jpsim @bdash 
",austinzheng,bdash
3726,2016-06-07 23:18:06,"Fixes #1943.

/c @jpsim @tgoyne
",mrackwitz,jpsim
3726,2016-06-07 23:18:06,"Fixes #1943.

/c @jpsim @tgoyne
",mrackwitz,tgoyne
3726,2016-06-20 18:31:40,"This needs to be reviewed. /c @austinzheng 
",mrackwitz,austinzheng
3725,2016-06-07 21:55:01,"As a follow-up to #3345:

How should we expose APIs or other affordances to help people write correct unit tests that involve Realms?

I talked with Thomas briefly about just exposing `[RLMRealm resetRealmState]` to public users. It turns out that this method is difficult to use correctly (i.e. in a way that won't cause tests to crash nondeterministically). 

We have some [shared test code](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/RLMTestCase.m#L127) that we use for our own tests. Perhaps we could expose an XCTest-agnostic helper class that abstracts out whatever we need to do to make tests run correctly, and have users use that instead? Strawman example:



Any other ideas are welcome.

@bdash @tgoyne @jpsim @mrackwitz @kishikawakatsumi @stel 
",austinzheng,kishikawakatsumi
3725,2016-06-07 21:55:01,"As a follow-up to #3345:

How should we expose APIs or other affordances to help people write correct unit tests that involve Realms?

I talked with Thomas briefly about just exposing `[RLMRealm resetRealmState]` to public users. It turns out that this method is difficult to use correctly (i.e. in a way that won't cause tests to crash nondeterministically). 

We have some [shared test code](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/RLMTestCase.m#L127) that we use for our own tests. Perhaps we could expose an XCTest-agnostic helper class that abstracts out whatever we need to do to make tests run correctly, and have users use that instead? Strawman example:



Any other ideas are welcome.

@bdash @tgoyne @jpsim @mrackwitz @kishikawakatsumi @stel 
",austinzheng,mrackwitz
3725,2016-06-07 21:55:01,"As a follow-up to #3345:

How should we expose APIs or other affordances to help people write correct unit tests that involve Realms?

I talked with Thomas briefly about just exposing `[RLMRealm resetRealmState]` to public users. It turns out that this method is difficult to use correctly (i.e. in a way that won't cause tests to crash nondeterministically). 

We have some [shared test code](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/RLMTestCase.m#L127) that we use for our own tests. Perhaps we could expose an XCTest-agnostic helper class that abstracts out whatever we need to do to make tests run correctly, and have users use that instead? Strawman example:



Any other ideas are welcome.

@bdash @tgoyne @jpsim @mrackwitz @kishikawakatsumi @stel 
",austinzheng,bdash
3725,2016-06-07 21:55:01,"As a follow-up to #3345:

How should we expose APIs or other affordances to help people write correct unit tests that involve Realms?

I talked with Thomas briefly about just exposing `[RLMRealm resetRealmState]` to public users. It turns out that this method is difficult to use correctly (i.e. in a way that won't cause tests to crash nondeterministically). 

We have some [shared test code](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/RLMTestCase.m#L127) that we use for our own tests. Perhaps we could expose an XCTest-agnostic helper class that abstracts out whatever we need to do to make tests run correctly, and have users use that instead? Strawman example:



Any other ideas are welcome.

@bdash @tgoyne @jpsim @mrackwitz @kishikawakatsumi @stel 
",austinzheng,stel
3725,2016-06-07 21:55:01,"As a follow-up to #3345:

How should we expose APIs or other affordances to help people write correct unit tests that involve Realms?

I talked with Thomas briefly about just exposing `[RLMRealm resetRealmState]` to public users. It turns out that this method is difficult to use correctly (i.e. in a way that won't cause tests to crash nondeterministically). 

We have some [shared test code](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/RLMTestCase.m#L127) that we use for our own tests. Perhaps we could expose an XCTest-agnostic helper class that abstracts out whatever we need to do to make tests run correctly, and have users use that instead? Strawman example:



Any other ideas are welcome.

@bdash @tgoyne @jpsim @mrackwitz @kishikawakatsumi @stel 
",austinzheng,jpsim
3725,2016-06-07 21:55:01,"As a follow-up to #3345:

How should we expose APIs or other affordances to help people write correct unit tests that involve Realms?

I talked with Thomas briefly about just exposing `[RLMRealm resetRealmState]` to public users. It turns out that this method is difficult to use correctly (i.e. in a way that won't cause tests to crash nondeterministically). 

We have some [shared test code](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/RLMTestCase.m#L127) that we use for our own tests. Perhaps we could expose an XCTest-agnostic helper class that abstracts out whatever we need to do to make tests run correctly, and have users use that instead? Strawman example:



Any other ideas are welcome.

@bdash @tgoyne @jpsim @mrackwitz @kishikawakatsumi @stel 
",austinzheng,tgoyne
3717,2016-06-06 22:47:06,"@jpsim @bdash @tgoyne 

Fixing #3337 by prohibiting managed lazy properties in Realm model objects.

Changes:
- Non-ignored lazy properties in models will now cause an exception to be thrown when the schema is built
- Unit tests

NOTE: I'd like to write one more test - ensuring that a Realm Objective-C `RLMObject` subclass defined in Swift with a `lazy var` throws the exception properly. However, it doesn't seem to be possible to use `RLMSetTreatFakeObjectAsRLMObject()` properly from Swift. I'll look into this some more.
",austinzheng,jpsim
3717,2016-06-06 22:47:06,"@jpsim @bdash @tgoyne 

Fixing #3337 by prohibiting managed lazy properties in Realm model objects.

Changes:
- Non-ignored lazy properties in models will now cause an exception to be thrown when the schema is built
- Unit tests

NOTE: I'd like to write one more test - ensuring that a Realm Objective-C `RLMObject` subclass defined in Swift with a `lazy var` throws the exception properly. However, it doesn't seem to be possible to use `RLMSetTreatFakeObjectAsRLMObject()` properly from Swift. I'll look into this some more.
",austinzheng,bdash
3717,2016-06-06 22:47:06,"@jpsim @bdash @tgoyne 

Fixing #3337 by prohibiting managed lazy properties in Realm model objects.

Changes:
- Non-ignored lazy properties in models will now cause an exception to be thrown when the schema is built
- Unit tests

NOTE: I'd like to write one more test - ensuring that a Realm Objective-C `RLMObject` subclass defined in Swift with a `lazy var` throws the exception properly. However, it doesn't seem to be possible to use `RLMSetTreatFakeObjectAsRLMObject()` properly from Swift. I'll look into this some more.
",austinzheng,tgoyne
3717,2016-06-07 03:27:18,"Thanks @bdash! I tightened up the logic and made some other fixes.
",austinzheng,bdash
3714,2016-06-06 20:04:32,"Fixes #3655.

/cc @tgoyne 
",bdash,tgoyne
3712,2016-06-06 16:31:23,"/cc @austinzheng 

fixes #3711
",jpsim,austinzheng
3707,2016-06-07 18:44:26,"@bdash brought up that using a tool like `fs_usage` might be helpful in logging file system events to determine which operations are failing. I'm not sure how well `fs_usage` handles mmapped files, but it's worth a shot.

Of course, this would only be useful if you can run this on a machine that can reproduce the problem, so this is dependent on your user being comfortable enough to run such a tool while the problem occurs.
",jpsim,bdash
3706,2016-06-04 06:44:41,"1. According to [this page](https://developer.apple.com/library/ios/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html):
   
   > Because each architecture component is signed independently, it is all right to perform universal-binary operations (such as running the lipo command) on signed programs. The result will still be validly signed as long as you make no other changes.
   
   So I am not sure why code signing after stripping was required in the first place.
2. I have tried Validating an app with an embedded framework for i386, armv7, armv7s, x86_64 and arm64 just now and it passes. Does the problem occur only upon actual submission, but not on validation?

//cc @jpsim @segiddins @kishikawakatsumi 
",jakajancar,jpsim
3706,2016-06-04 06:44:41,"1. According to [this page](https://developer.apple.com/library/ios/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html):
   
   > Because each architecture component is signed independently, it is all right to perform universal-binary operations (such as running the lipo command) on signed programs. The result will still be validly signed as long as you make no other changes.
   
   So I am not sure why code signing after stripping was required in the first place.
2. I have tried Validating an app with an embedded framework for i386, armv7, armv7s, x86_64 and arm64 just now and it passes. Does the problem occur only upon actual submission, but not on validation?

//cc @jpsim @segiddins @kishikawakatsumi 
",jakajancar,kishikawakatsumi
3706,2016-06-04 06:44:41,"1. According to [this page](https://developer.apple.com/library/ios/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html):
   
   > Because each architecture component is signed independently, it is all right to perform universal-binary operations (such as running the lipo command) on signed programs. The result will still be validly signed as long as you make no other changes.
   
   So I am not sure why code signing after stripping was required in the first place.
2. I have tried Validating an app with an embedded framework for i386, armv7, armv7s, x86_64 and arm64 just now and it passes. Does the problem occur only upon actual submission, but not on validation?

//cc @jpsim @segiddins @kishikawakatsumi 
",jakajancar,segiddins
3700,2016-06-03 06:25:15,"This doesn't affect any behaviors. It is used only exception messages.

CC @TimOliver @mrackwitz 
",kishikawakatsumi,mrackwitz
3700,2016-06-03 06:25:15,"This doesn't affect any behaviors. It is used only exception messages.

CC @TimOliver @mrackwitz 
",kishikawakatsumi,TimOliver
3699,2016-06-02 23:43:45,"Here is an issue to track and discuss Swift 3 API renaming.

I've put together a preliminary set of suggestions [here](https://gist.github.com/austinzheng/507e16a37e44d07be98f1e56745b8881). Let me know what you think.

@jpsim @bdash @tgoyne @mrackwitz @kishikawakatsumi @stel 
",austinzheng,kishikawakatsumi
3699,2016-06-02 23:43:45,"Here is an issue to track and discuss Swift 3 API renaming.

I've put together a preliminary set of suggestions [here](https://gist.github.com/austinzheng/507e16a37e44d07be98f1e56745b8881). Let me know what you think.

@jpsim @bdash @tgoyne @mrackwitz @kishikawakatsumi @stel 
",austinzheng,mrackwitz
3699,2016-06-02 23:43:45,"Here is an issue to track and discuss Swift 3 API renaming.

I've put together a preliminary set of suggestions [here](https://gist.github.com/austinzheng/507e16a37e44d07be98f1e56745b8881). Let me know what you think.

@jpsim @bdash @tgoyne @mrackwitz @kishikawakatsumi @stel 
",austinzheng,bdash
3699,2016-06-02 23:43:45,"Here is an issue to track and discuss Swift 3 API renaming.

I've put together a preliminary set of suggestions [here](https://gist.github.com/austinzheng/507e16a37e44d07be98f1e56745b8881). Let me know what you think.

@jpsim @bdash @tgoyne @mrackwitz @kishikawakatsumi @stel 
",austinzheng,stel
3699,2016-06-02 23:43:45,"Here is an issue to track and discuss Swift 3 API renaming.

I've put together a preliminary set of suggestions [here](https://gist.github.com/austinzheng/507e16a37e44d07be98f1e56745b8881). Let me know what you think.

@jpsim @bdash @tgoyne @mrackwitz @kishikawakatsumi @stel 
",austinzheng,jpsim
3699,2016-06-02 23:43:45,"Here is an issue to track and discuss Swift 3 API renaming.

I've put together a preliminary set of suggestions [here](https://gist.github.com/austinzheng/507e16a37e44d07be98f1e56745b8881). Let me know what you think.

@jpsim @bdash @tgoyne @mrackwitz @kishikawakatsumi @stel 
",austinzheng,tgoyne
3696,2016-06-02 16:20:06,"//Product Model v4

@objc public class SPProductModel: RLMObject, Mappable {



}
",jazz-mobility,objc
3693,2016-06-01 21:18:16,"@tgoyne @jpsim @bdash 

Thank you for all your reviews! These are the last failing tests to be enabled for Swift 3; I went through and double-checked.
",austinzheng,jpsim
3693,2016-06-01 21:18:16,"@tgoyne @jpsim @bdash 

Thank you for all your reviews! These are the last failing tests to be enabled for Swift 3; I went through and double-checked.
",austinzheng,tgoyne
3693,2016-06-01 21:18:16,"@tgoyne @jpsim @bdash 

Thank you for all your reviews! These are the last failing tests to be enabled for Swift 3; I went through and double-checked.
",austinzheng,bdash
3692,2016-06-01 20:34:01,"@bdash @tgoyne @jpsim 

Changes:
- Fixed imported enum cases
- Annotated some APIs with @discardableResult
- Added ""_ ="" to tests that intentionally ignore return values to quiet warnings

NOTE: JP pointed out a few tests that are still commented out. A subsequent commit will restore them.
",austinzheng,jpsim
3692,2016-06-01 20:34:01,"@bdash @tgoyne @jpsim 

Changes:
- Fixed imported enum cases
- Annotated some APIs with @discardableResult
- Added ""_ ="" to tests that intentionally ignore return values to quiet warnings

NOTE: JP pointed out a few tests that are still commented out. A subsequent commit will restore them.
",austinzheng,discardableResult
3692,2016-06-01 20:34:01,"@bdash @tgoyne @jpsim 

Changes:
- Fixed imported enum cases
- Annotated some APIs with @discardableResult
- Added ""_ ="" to tests that intentionally ignore return values to quiet warnings

NOTE: JP pointed out a few tests that are still commented out. A subsequent commit will restore them.
",austinzheng,bdash
3692,2016-06-01 20:34:01,"@bdash @tgoyne @jpsim 

Changes:
- Fixed imported enum cases
- Annotated some APIs with @discardableResult
- Added ""_ ="" to tests that intentionally ignore return values to quiet warnings

NOTE: JP pointed out a few tests that are still commented out. A subsequent commit will restore them.
",austinzheng,tgoyne
3685,2016-05-31 23:26:56,"This accounts for most, but not all the tests.

@tgoyne @jpsim @bdash 

Changes:
- Realm collections are now RandomAccessCollections
- Gave list's ""descriptionWithMaxDepth"" a custom Objective-C selector, since it wasn't being found
- Reenabled many tests which were disabled because of the `isEqual` bug from the previous commit
- Some tests rewritten to use fewer IUOs
",austinzheng,jpsim
3685,2016-05-31 23:26:56,"This accounts for most, but not all the tests.

@tgoyne @jpsim @bdash 

Changes:
- Realm collections are now RandomAccessCollections
- Gave list's ""descriptionWithMaxDepth"" a custom Objective-C selector, since it wasn't being found
- Reenabled many tests which were disabled because of the `isEqual` bug from the previous commit
- Some tests rewritten to use fewer IUOs
",austinzheng,tgoyne
3685,2016-05-31 23:26:56,"This accounts for most, but not all the tests.

@tgoyne @jpsim @bdash 

Changes:
- Realm collections are now RandomAccessCollections
- Gave list's ""descriptionWithMaxDepth"" a custom Objective-C selector, since it wasn't being found
- Reenabled many tests which were disabled because of the `isEqual` bug from the previous commit
- Some tests rewritten to use fewer IUOs
",austinzheng,bdash
3684,2016-05-31 20:59:43,"@jpsim @tgoyne @bdash 

My primary objective is to run the addition of ""isEqual:"" past you all. Is identity equality essential to these tests, or do we only care that (in this case) the object is properly added to the end of the array?

If this is approved I'll fix all the tests that broke because of the lack of ""isEqual:"".

Changes:
- Removed some uses of IUOs (since there are still Swift bugs related to them)
- Added an ""isEqual:"" overload for SwiftStringObject
- Reenabled a test
",austinzheng,jpsim
3684,2016-05-31 20:59:43,"@jpsim @tgoyne @bdash 

My primary objective is to run the addition of ""isEqual:"" past you all. Is identity equality essential to these tests, or do we only care that (in this case) the object is properly added to the end of the array?

If this is approved I'll fix all the tests that broke because of the lack of ""isEqual:"".

Changes:
- Removed some uses of IUOs (since there are still Swift bugs related to them)
- Added an ""isEqual:"" overload for SwiftStringObject
- Reenabled a test
",austinzheng,tgoyne
3684,2016-05-31 20:59:43,"@jpsim @tgoyne @bdash 

My primary objective is to run the addition of ""isEqual:"" past you all. Is identity equality essential to these tests, or do we only care that (in this case) the object is properly added to the end of the array?

If this is approved I'll fix all the tests that broke because of the lack of ""isEqual:"".

Changes:
- Removed some uses of IUOs (since there are still Swift bugs related to them)
- Added an ""isEqual:"" overload for SwiftStringObject
- Reenabled a test
",austinzheng,bdash
3683,2016-05-31 19:11:39,"@bdash @tgoyne @jpsim 
",austinzheng,jpsim
3683,2016-05-31 19:11:39,"@bdash @tgoyne @jpsim 
",austinzheng,bdash
3683,2016-05-31 19:11:39,"@bdash @tgoyne @jpsim 
",austinzheng,tgoyne
3682,2016-05-31 18:44:46,"@jpsim @tgoyne @bdash 

Would appreciate a review and advice as to whether this is the best way to split up RLMSupport.swift, whenever you have time.

Changes:
- Added separate versions of RLMSupport.swift per Swift version
- Changed build.sh to generate symlink for support file whenever a build is triggered
- build.sh now updates the support file symlink whenever a build is triggered from the command line
- Added a new Xcode build target to generate the Realm support file. This target is now a dependency of the Realm, Realm iOS static, and various test build targets
",austinzheng,jpsim
3682,2016-05-31 18:44:46,"@jpsim @tgoyne @bdash 

Would appreciate a review and advice as to whether this is the best way to split up RLMSupport.swift, whenever you have time.

Changes:
- Added separate versions of RLMSupport.swift per Swift version
- Changed build.sh to generate symlink for support file whenever a build is triggered
- build.sh now updates the support file symlink whenever a build is triggered from the command line
- Added a new Xcode build target to generate the Realm support file. This target is now a dependency of the Realm, Realm iOS static, and various test build targets
",austinzheng,tgoyne
3682,2016-05-31 18:44:46,"@jpsim @tgoyne @bdash 

Would appreciate a review and advice as to whether this is the best way to split up RLMSupport.swift, whenever you have time.

Changes:
- Added separate versions of RLMSupport.swift per Swift version
- Changed build.sh to generate symlink for support file whenever a build is triggered
- build.sh now updates the support file symlink whenever a build is triggered from the command line
- Added a new Xcode build target to generate the Realm support file. This target is now a dependency of the Realm, Realm iOS static, and various test build targets
",austinzheng,bdash
3681,2016-05-31 14:24:56,"Is there any way I can expose Realm List type properties in swift to objective c ?
ex - I want to use this class in Objective C, but properties are not accessible as there is nothing objective C type.

@objc public class SPSearchResponseModel: Object, Mappable {



}
",jazz-mobility,objc
3681,2016-05-31 15:30:31,"I have changed the class as follows -
Is there any better way to do it ?

@objc public class SPSearchResponseModel: Object, Mappable {



}
",jazz-mobility,objc
3677,2016-08-10 20:26:22,"@hartbit we're maintaining support for the latest Xcode betas for both Swift 2.3 & 3.0 on our `master` branch. Step 3 was mostly done a few weeks ago by @austinzheng and @JadenGeller, though we'll want to review those changes and handle step 4 a bit closer to the Xcode 8 GM release.
",jpsim,austinzheng
3677,2016-08-10 20:26:22,"@hartbit we're maintaining support for the latest Xcode betas for both Swift 2.3 & 3.0 on our `master` branch. Step 3 was mostly done a few weeks ago by @austinzheng and @JadenGeller, though we'll want to review those changes and handle step 4 a bit closer to the Xcode 8 GM release.
",jpsim,JadenGeller
3676,2016-06-06 22:39:14,"Yes that did the trick for me. I'm wondering though if the version of Cocoapods conflicted, causing this in the first place

On Jun 7, 2016, at 8:37 AM, JP Simard <notifications@github.com<mailto:notifications@github.com>> wrote:

@doronkatzhttps://github.com/doronkatz @souzainf3https://github.com/souzainf3 did following the steps listed in our documentationhttps://realm.io/docs/swift/latest/#cocoapods help?

pod cache clean Realm
pod cache clean RealmSwift
pod deintegrate || rm -rf Pods
pod install --verbose

## 

You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHubhttps://github.com/realm/realm-cocoa/issues/3676#issuecomment-224110244, or mute the threadhttps://github.com/notifications/unsubscribe/AAVEp6XVK0nhSo4jFWrulehqNk-lp5pdks5qJKE9gaJpZM4IqHHb.
",doronkatz,doronkatzhttps
3676,2016-06-06 22:39:14,"Yes that did the trick for me. I'm wondering though if the version of Cocoapods conflicted, causing this in the first place

On Jun 7, 2016, at 8:37 AM, JP Simard <notifications@github.com<mailto:notifications@github.com>> wrote:

@doronkatzhttps://github.com/doronkatz @souzainf3https://github.com/souzainf3 did following the steps listed in our documentationhttps://realm.io/docs/swift/latest/#cocoapods help?

pod cache clean Realm
pod cache clean RealmSwift
pod deintegrate || rm -rf Pods
pod install --verbose

## 

You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHubhttps://github.com/realm/realm-cocoa/issues/3676#issuecomment-224110244, or mute the threadhttps://github.com/notifications/unsubscribe/AAVEp6XVK0nhSo4jFWrulehqNk-lp5pdks5qJKE9gaJpZM4IqHHb.
",doronkatz,souzainf3https
3674,2016-05-30 21:28:00,"/cc @bdash @tgoyne @austinzheng 
",jpsim,austinzheng
3674,2016-05-30 21:28:00,"/cc @bdash @tgoyne @austinzheng 
",jpsim,bdash
3674,2016-05-30 21:28:00,"/cc @bdash @tgoyne @austinzheng 
",jpsim,tgoyne
3672,2016-05-30 11:02:42,"Fixes #3671.

/c @kishikawakatsumi @jpsim 
",mrackwitz,jpsim
3672,2016-05-30 11:02:42,"Fixes #3671.

/c @kishikawakatsumi @jpsim 
",mrackwitz,kishikawakatsumi
3670,2016-05-31 13:59:25,"@smolskyaleksey 

This is due to limitation for Objective-C compiler. The generic constraints for RLMArray need their elements should be a subclass of RLMObject. But Objective-C compiler cannot recognize it from `@class` forwarded declaration.

To resolve this, I think the only way is to declare both @interface in the same file, then declare their properties using Class Extension. Like the following:



See also http://stackoverflow.com/questions/36966858/rlmlinkingobjects-circular-dependency/36987537#36987537
",kishikawakatsumi,class
3670,2016-05-31 13:59:25,"@smolskyaleksey 

This is due to limitation for Objective-C compiler. The generic constraints for RLMArray need their elements should be a subclass of RLMObject. But Objective-C compiler cannot recognize it from `@class` forwarded declaration.

To resolve this, I think the only way is to declare both @interface in the same file, then declare their properties using Class Extension. Like the following:



See also http://stackoverflow.com/questions/36966858/rlmlinkingobjects-circular-dependency/36987537#36987537
",kishikawakatsumi,interface
3665,2016-05-28 00:47:05,"The current fine-grained notifications approach makes it challenging to support scenarios where the UI is updated before the data model, rather than the reactive approach of the model being the canonical source of truth that the UI merely displays. The simplest motivating use-case is UITableView reordering; when using the built-in functionality for dragging rows around the delegate is merely notified of changes already displayed in the UI, and re-applying those changes in the collection notification block after the Realm is committed will corrupt the order to the UITV. Because notifications are coalesced, users can't reasonably filter out these redundant updates themselves. and even if they could it would be very easy to get wrong.

We should expose a variant of `Realm.write(_:)` that would specify that the transaction should not produce notifications on the current thread, as the things they want to update with the notifications are already up-to-date. In addition, this variant of write transactions would block until all async notifications are ready and delivers them, since otherwise the UI could easily get ""out of sync"".

An alternative approach would be to instead let the user pass in the tokens for notification blocks which they want to suppress. This is more flexible and makes it work with commits on a different thread from the notified thread, but maybe would make the API even more complex.

@tgoyne has implemented a proof of concept of this in #3439, and there's more discussion in that thread, but that work is currently on hold.
",jpsim,tgoyne
3664,2016-05-28 00:46:33,"@jpsim 

Changes:
- Updated sequence, collection, and iterator protocols and types for Swift 3
- Restored use of NSFastEnumerationIterator
- Reenabled a test
",austinzheng,jpsim
3663,2016-05-28 00:49:15,"I've been meaning to write down an issue tracking something that would accomplish what I think are the same goals that motivated you to come up with your concept, based on the work that @tgoyne did in #3439.

So I just filed #3665 summarizing the approaches that we're currently considering to accomplish this feature. So I'll be closing this ticket in favor of that one. Please don't hesitate to share your thoughts in that thread so we can keep the conversation in one place.

Thanks!
",jpsim,tgoyne
3662,2016-05-27 23:26:00,"Fixes #3507. /cc @austinzheng @tgoyne @bdash 

Xcode playgrounds only support 3rd party frameworks when they're built as part of the Xcode workspace, so we need a bit of a hack to nest the prebuilt frameworks into an empty Swift framework that's imported into the playground. An alternative could have been to package the Realm Swift source files as part of the release zip.
",jpsim,austinzheng
3662,2016-05-27 23:26:00,"Fixes #3507. /cc @austinzheng @tgoyne @bdash 

Xcode playgrounds only support 3rd party frameworks when they're built as part of the Xcode workspace, so we need a bit of a hack to nest the prebuilt frameworks into an empty Swift framework that's imported into the playground. An alternative could have been to package the Realm Swift source files as part of the release zip.
",jpsim,tgoyne
3662,2016-05-27 23:26:00,"Fixes #3507. /cc @austinzheng @tgoyne @bdash 

Xcode playgrounds only support 3rd party frameworks when they're built as part of the Xcode workspace, so we need a bit of a hack to nest the prebuilt frameworks into an empty Swift framework that's imported into the playground. An alternative could have been to package the Realm Swift source files as part of the release zip.
",jpsim,bdash
3657,2016-05-26 20:24:45,"This should be the last copyediting/terminology PR. Thanks for your time.

@bdash @tgoyne @jpsim 
",austinzheng,jpsim
3657,2016-05-26 20:24:45,"This should be the last copyediting/terminology PR. Thanks for your time.

@bdash @tgoyne @jpsim 
",austinzheng,bdash
3657,2016-05-26 20:24:45,"This should be the last copyediting/terminology PR. Thanks for your time.

@bdash @tgoyne @jpsim 
",austinzheng,tgoyne
3657,2016-05-27 01:43:53,"> As far as I can tell it's impossible to give a `param` a multi-paragraph description.

Correct, in both Swift and ObjC, since Jazzy renders doc comments as Markdown, converting `@param` to unordered list items, and AFAICT in Markdown you can't have multiple paragraphs within a single bullet list item.
",jpsim,param
3657,2016-06-14 19:54:05,"I've rebased onto master. Would appreciate a review whenever you have time to spare. @bdash @tgoyne @jpsim
",austinzheng,bdash
3652,2016-05-25 23:48:48,"@tgoyne @jpsim @bdash 

Changes:
- Additional copyediting and polish work
- Better consistency of descriptions between related classes
- Fixed multiple instances where text was malformed
",austinzheng,jpsim
3652,2016-05-25 23:48:48,"@tgoyne @jpsim @bdash 

Changes:
- Additional copyediting and polish work
- Better consistency of descriptions between related classes
- Fixed multiple instances where text was malformed
",austinzheng,tgoyne
3652,2016-05-25 23:48:48,"@tgoyne @jpsim @bdash 

Changes:
- Additional copyediting and polish work
- Better consistency of descriptions between related classes
- Fixed multiple instances where text was malformed
",austinzheng,bdash
3652,2016-05-26 17:46:45,"@jpsim I've fixed all the things you brought up. Thanks for proofreading!
",austinzheng,jpsim
3645,2016-05-24 23:52:31,"@jpsim @tgoyne @bdash

NFC
- Copyedited all remaining ObjC files
- Copyedited all Swift files
- Additional style and correctness fixes
",austinzheng,jpsim
3645,2016-05-24 23:52:31,"@jpsim @tgoyne @bdash

NFC
- Copyedited all remaining ObjC files
- Copyedited all Swift files
- Additional style and correctness fixes
",austinzheng,tgoyne
3645,2016-05-24 23:52:31,"@jpsim @tgoyne @bdash

NFC
- Copyedited all remaining ObjC files
- Copyedited all Swift files
- Additional style and correctness fixes
",austinzheng,bdash
3643,2016-05-24 16:49:05,"Optional properties of scalar types were getting the wrong Objective-C type code, leading to the dynamic accessors taking the non-optional code path. This resulted in `nil` values being returned as 0.

Fixes #3641.

/cc @tgoyne @jpsim @austinzheng 
",bdash,jpsim
3643,2016-05-24 16:49:05,"Optional properties of scalar types were getting the wrong Objective-C type code, leading to the dynamic accessors taking the non-optional code path. This resulted in `nil` values being returned as 0.

Fixes #3641.

/cc @tgoyne @jpsim @austinzheng 
",bdash,tgoyne
3643,2016-05-24 16:49:05,"Optional properties of scalar types were getting the wrong Objective-C type code, leading to the dynamic accessors taking the non-optional code path. This resulted in `nil` values being returned as 0.

Fixes #3641.

/cc @tgoyne @jpsim @austinzheng 
",bdash,austinzheng
3639,2016-05-23 21:06:18,"@jpsim @tgoyne @bdash 

Changes:
- Copyedited RLMObject and RLMObjectSchema
- Changed certain repeated copy throughout the source to read the same
",austinzheng,jpsim
3639,2016-05-23 21:06:18,"@jpsim @tgoyne @bdash 

Changes:
- Copyedited RLMObject and RLMObjectSchema
- Changed certain repeated copy throughout the source to read the same
",austinzheng,tgoyne
3639,2016-05-23 21:06:18,"@jpsim @tgoyne @bdash 

Changes:
- Copyedited RLMObject and RLMObjectSchema
- Changed certain repeated copy throughout the source to read the same
",austinzheng,bdash
3638,2016-05-23 17:55:31,"More copyediting. @jpsim @bdash @tgoyne 
",austinzheng,jpsim
3638,2016-05-23 17:55:31,"More copyediting. @jpsim @bdash @tgoyne 
",austinzheng,bdash
3638,2016-05-23 17:55:31,"More copyediting. @jpsim @bdash @tgoyne 
",austinzheng,tgoyne
3634,2016-05-20 23:16:00,"@bdash @tgoyne @jpsim @mrackwitz 

Sorry for all the PR spam!

Note that I use the term ""results collection""; let me know if you prefer just plain ""results"".
",austinzheng,mrackwitz
3634,2016-05-20 23:16:00,"@bdash @tgoyne @jpsim @mrackwitz 

Sorry for all the PR spam!

Note that I use the term ""results collection""; let me know if you prefer just plain ""results"".
",austinzheng,jpsim
3634,2016-05-20 23:16:00,"@bdash @tgoyne @jpsim @mrackwitz 

Sorry for all the PR spam!

Note that I use the term ""results collection""; let me know if you prefer just plain ""results"".
",austinzheng,bdash
3634,2016-05-20 23:16:00,"@bdash @tgoyne @jpsim @mrackwitz 

Sorry for all the PR spam!

Note that I use the term ""results collection""; let me know if you prefer just plain ""results"".
",austinzheng,tgoyne
3630,2016-05-20 21:32:17,"@bdash @tgoyne @jpsim @mrackwitz 

Changes:
- Made some additional changes to RLMArray documentation
- Formatted, cleaned up, and copyedited docstrings
- Added backticks for type names
",austinzheng,mrackwitz
3630,2016-05-20 21:32:17,"@bdash @tgoyne @jpsim @mrackwitz 

Changes:
- Made some additional changes to RLMArray documentation
- Formatted, cleaned up, and copyedited docstrings
- Added backticks for type names
",austinzheng,jpsim
3630,2016-05-20 21:32:17,"@bdash @tgoyne @jpsim @mrackwitz 

Changes:
- Made some additional changes to RLMArray documentation
- Formatted, cleaned up, and copyedited docstrings
- Added backticks for type names
",austinzheng,bdash
3630,2016-05-20 21:32:17,"@bdash @tgoyne @jpsim @mrackwitz 

Changes:
- Made some additional changes to RLMArray documentation
- Formatted, cleaned up, and copyedited docstrings
- Added backticks for type names
",austinzheng,tgoyne
3629,2016-05-20 18:38:59,"@jpsim @bdash @mrackwitz @tgoyne 

I figure many smaller commits will be easier to review than one big commit, and will also lessen the chances of mishandled merge conflicts. If any of you prefer one big commit let me know.

Changes:
- Usage of 'managed' and 'unmanaged' terminology
- Backticks around all type names
- Copyediting for consistency with Apple documentation writing style
",austinzheng,mrackwitz
3629,2016-05-20 18:38:59,"@jpsim @bdash @mrackwitz @tgoyne 

I figure many smaller commits will be easier to review than one big commit, and will also lessen the chances of mishandled merge conflicts. If any of you prefer one big commit let me know.

Changes:
- Usage of 'managed' and 'unmanaged' terminology
- Backticks around all type names
- Copyediting for consistency with Apple documentation writing style
",austinzheng,jpsim
3629,2016-05-20 18:38:59,"@jpsim @bdash @mrackwitz @tgoyne 

I figure many smaller commits will be easier to review than one big commit, and will also lessen the chances of mishandled merge conflicts. If any of you prefer one big commit let me know.

Changes:
- Usage of 'managed' and 'unmanaged' terminology
- Backticks around all type names
- Copyediting for consistency with Apple documentation writing style
",austinzheng,bdash
3629,2016-05-20 18:38:59,"@jpsim @bdash @mrackwitz @tgoyne 

I figure many smaller commits will be easier to review than one big commit, and will also lessen the chances of mishandled merge conflicts. If any of you prefer one big commit let me know.

Changes:
- Usage of 'managed' and 'unmanaged' terminology
- Backticks around all type names
- Copyediting for consistency with Apple documentation writing style
",austinzheng,tgoyne
3624,2016-05-20 04:24:55,"Otherwise, we must pass the `NSNull()` to retrieve a value for null primary key.
In Objective-C, that parameter is specified as `nullable`.



CC @jpsim @mrackwitz @tgoyne @bdash @austinzheng
",kishikawakatsumi,mrackwitz
3624,2016-05-20 04:24:55,"Otherwise, we must pass the `NSNull()` to retrieve a value for null primary key.
In Objective-C, that parameter is specified as `nullable`.



CC @jpsim @mrackwitz @tgoyne @bdash @austinzheng
",kishikawakatsumi,jpsim
3624,2016-05-20 04:24:55,"Otherwise, we must pass the `NSNull()` to retrieve a value for null primary key.
In Objective-C, that parameter is specified as `nullable`.



CC @jpsim @mrackwitz @tgoyne @bdash @austinzheng
",kishikawakatsumi,tgoyne
3624,2016-05-20 04:24:55,"Otherwise, we must pass the `NSNull()` to retrieve a value for null primary key.
In Objective-C, that parameter is specified as `nullable`.



CC @jpsim @mrackwitz @tgoyne @bdash @austinzheng
",kishikawakatsumi,bdash
3624,2016-05-20 04:24:55,"Otherwise, we must pass the `NSNull()` to retrieve a value for null primary key.
In Objective-C, that parameter is specified as `nullable`.



CC @jpsim @mrackwitz @tgoyne @bdash @austinzheng
",kishikawakatsumi,austinzheng
3621,2016-05-19 17:11:09,"since the whole script is run with `set -o pipefail; set -e` /cc @bdash 
",jpsim,bdash
3619,2016-05-19 15:11:26,"Do you have multiple versions of Xcode or Swift installed?
Could you share a reproducible sample project with us? As you have seen from the StackOverflow question, where you commented on, we've been unable so far (/c @TimOliver  was involved) to reproduce this error.
",mrackwitz,TimOliver
3614,2016-05-19 03:06:40,"since CocoaPods 0.39.0 is the minimum CocoaPods version required, these are guaranteed to be present.

watchos was added in 0.38.0 and tvos was added in 0.39.0

/cc @mrackwitz 
",jpsim,mrackwitz
3613,2016-05-18 23:29:56,"Foundation never matches an empty or null string with `BEGINSWITH`, `ENDSWITH` and `CONTAINS`. Core's query engine treats them as always matching since they're logically a match at any character position within the string. To emulate Foundation's semantics we generate additional criteria on the core query.

/cc @kishikawakatsumi @tgoyne @jpsim @austinzheng 
",bdash,jpsim
3613,2016-05-18 23:29:56,"Foundation never matches an empty or null string with `BEGINSWITH`, `ENDSWITH` and `CONTAINS`. Core's query engine treats them as always matching since they're logically a match at any character position within the string. To emulate Foundation's semantics we generate additional criteria on the core query.

/cc @kishikawakatsumi @tgoyne @jpsim @austinzheng 
",bdash,tgoyne
3613,2016-05-18 23:29:56,"Foundation never matches an empty or null string with `BEGINSWITH`, `ENDSWITH` and `CONTAINS`. Core's query engine treats them as always matching since they're logically a match at any character position within the string. To emulate Foundation's semantics we generate additional criteria on the core query.

/cc @kishikawakatsumi @tgoyne @jpsim @austinzheng 
",bdash,kishikawakatsumi
3613,2016-05-18 23:29:56,"Foundation never matches an empty or null string with `BEGINSWITH`, `ENDSWITH` and `CONTAINS`. Core's query engine treats them as always matching since they're logically a match at any character position within the string. To emulate Foundation's semantics we generate additional criteria on the core query.

/cc @kishikawakatsumi @tgoyne @jpsim @austinzheng 
",bdash,austinzheng
3609,2016-05-18 08:34:48,"In Unit Test Target, I @testable import main target (In main target, of corse, import RealmSwift).
It work in CocoaPods 0.39.0, but not work in CocoaPods 1.0.0, here is my Podile:



You can find whole project at https://github.com/CatchChat/Yep (develop branch).
",nixzhu,testable
3609,2016-05-18 22:15:32,"Because `@testable` will re-expose your imported module's internal declarations, you'll need to link any external module that's referenced in those internal APIs.

This isn't a Realm issue, or CocoaPods one for that matter, but rather `@testable` working as intended.

To make your tests compile again with CocoaPods 1.0, you'll need to link any pod referenced in the `Yep` module's internal APIs to your unit test target. Just add this to your Podfile:



It's possible that CocoaPods prior to 1.0 linked app target pods to test targets implicitly, which is why you're only seeing this now with CocoaPods 1.0, but if that's the case, I'd consider this new behavior to be more correct.
",jpsim,testable
3606,2016-05-17 23:54:11,"rather than use pod spec lint, use our own installation examples /cc @bdash @tgoyne 
",jpsim,bdash
3606,2016-05-17 23:54:11,"rather than use pod spec lint, use our own installation examples /cc @bdash @tgoyne 
",jpsim,tgoyne
3604,2016-05-17 20:10:13,"Closes #3583 /cc @kishikawakatsumi @tgoyne @bdash 
",jpsim,tgoyne
3604,2016-05-17 20:10:13,"Closes #3583 /cc @kishikawakatsumi @tgoyne @bdash 
",jpsim,kishikawakatsumi
3604,2016-05-17 20:10:13,"Closes #3583 /cc @kishikawakatsumi @tgoyne @bdash 
",jpsim,bdash
3603,2016-05-17 19:10:29,"`Results` is now only invalidated when `invalidate` is called on the `Realm` that it is associated with.

Also exposes an `invalidated` property to `Results` and `LinkingObjects` to allow determining whether a given object is invalidated.

Fixes #3579.

/cc @jpsim @tgoyne @austinzheng 
",bdash,jpsim
3603,2016-05-17 19:10:29,"`Results` is now only invalidated when `invalidate` is called on the `Realm` that it is associated with.

Also exposes an `invalidated` property to `Results` and `LinkingObjects` to allow determining whether a given object is invalidated.

Fixes #3579.

/cc @jpsim @tgoyne @austinzheng 
",bdash,tgoyne
3603,2016-05-17 19:10:29,"`Results` is now only invalidated when `invalidate` is called on the `Realm` that it is associated with.

Also exposes an `invalidated` property to `Results` and `LinkingObjects` to allow determining whether a given object is invalidated.

Fixes #3579.

/cc @jpsim @tgoyne @austinzheng 
",bdash,austinzheng
3602,2016-05-17 17:39:44,"For all integer types:
- Add tests for adding objects with primary key
- Add tests for adding objects with nil primary key
- Add tests for retrieve the object with primary key
- Add tests for retrieve the object with nil

Realm Objective-C already has integer primary key and null key.

CC @jpsim @mrackwitz 
",kishikawakatsumi,mrackwitz
3602,2016-05-17 17:39:44,"For all integer types:
- Add tests for adding objects with primary key
- Add tests for adding objects with nil primary key
- Add tests for retrieve the object with primary key
- Add tests for retrieve the object with nil

Realm Objective-C already has integer primary key and null key.

CC @jpsim @mrackwitz 
",kishikawakatsumi,jpsim
3600,2016-05-17 14:29:18,"[This assertion (`XCTAssertNotNil(realm.objectForPrimaryKey(SwiftPrimaryStringObject.self, key: ""z""))`)](https://github.com/realm/realm-cocoa/pull/3600/commits/255a143a6ff67bea44cd2ada4e99a33a1aeb0a8b#diff-1758d54637561148c515c83f473e8becR506) should fail but it succeeded (see https://travis-ci.org/realm/realm-cocoa/jobs/130850198).

This PR pass a local value to `XCTAssertNotNil` instead method directly.

Before:



After:



CC: @jpsim @tgoyne @bdash 
",kishikawakatsumi,jpsim
3600,2016-05-17 14:29:18,"[This assertion (`XCTAssertNotNil(realm.objectForPrimaryKey(SwiftPrimaryStringObject.self, key: ""z""))`)](https://github.com/realm/realm-cocoa/pull/3600/commits/255a143a6ff67bea44cd2ada4e99a33a1aeb0a8b#diff-1758d54637561148c515c83f473e8becR506) should fail but it succeeded (see https://travis-ci.org/realm/realm-cocoa/jobs/130850198).

This PR pass a local value to `XCTAssertNotNil` instead method directly.

Before:



After:



CC: @jpsim @tgoyne @bdash 
",kishikawakatsumi,tgoyne
3600,2016-05-17 14:29:18,"[This assertion (`XCTAssertNotNil(realm.objectForPrimaryKey(SwiftPrimaryStringObject.self, key: ""z""))`)](https://github.com/realm/realm-cocoa/pull/3600/commits/255a143a6ff67bea44cd2ada4e99a33a1aeb0a8b#diff-1758d54637561148c515c83f473e8becR506) should fail but it succeeded (see https://travis-ci.org/realm/realm-cocoa/jobs/130850198).

This PR pass a local value to `XCTAssertNotNil` instead method directly.

Before:



After:



CC: @jpsim @tgoyne @bdash 
",kishikawakatsumi,bdash
3599,2016-05-17 15:19:01,"@jpsim Should that be fixed? I would like to hear your view.
",kishikawakatsumi,jpsim
3595,2016-05-17 02:19:37,"Although we detect missing documentation on CI jobs, we failed to update this check when jazzy changed the undocumented file location, so we let a few undocumented APIs slip through. /cc @tgoyne @bdash @austinzheng 
",jpsim,austinzheng
3595,2016-05-17 02:19:37,"Although we detect missing documentation on CI jobs, we failed to update this check when jazzy changed the undocumented file location, so we let a few undocumented APIs slip through. /cc @tgoyne @bdash @austinzheng 
",jpsim,tgoyne
3595,2016-05-17 02:19:37,"Although we detect missing documentation on CI jobs, we failed to update this check when jazzy changed the undocumented file location, so we let a few undocumented APIs slip through. /cc @tgoyne @bdash @austinzheng 
",jpsim,bdash
3592,2016-05-16 19:53:22,"/cc @tgoyne @bdash 
",jpsim,tgoyne
3592,2016-05-16 19:53:22,"/cc @tgoyne @bdash 
",jpsim,bdash
3591,2016-05-16 13:49:31,"@TiagoVeloso I have an iOS target (Deployment Target iOS 8.0)
",lukaskollmer,TiagoVeloso
3583,2016-05-14 10:25:26,"It might not be obvious that even if `deleteRealmIfMigrationNeeded` is set to true, migrations are still executed if a higher schema version is specified. We should point out in the API docs, that the Realm file is just deleted if there are outstanding migrations beyond those which are specified with the configuration.

/c @kishikawakatsumi @icanzilb
",mrackwitz,icanzilb
3583,2016-05-14 10:25:26,"It might not be obvious that even if `deleteRealmIfMigrationNeeded` is set to true, migrations are still executed if a higher schema version is specified. We should point out in the API docs, that the Realm file is just deleted if there are outstanding migrations beyond those which are specified with the configuration.

/c @kishikawakatsumi @icanzilb
",mrackwitz,kishikawakatsumi
3582,2016-05-14 09:49:26,"Workaround for CocoaPods/CocoaPods#5313.

@TimOliver: This has potential to break MAS-compatiblity. Could you validate whether apps using frameworks like that pass AppStore's automated file validations?

/c @jpsim
",mrackwitz,TimOliver
3582,2016-05-14 09:49:26,"Workaround for CocoaPods/CocoaPods#5313.

@TimOliver: This has potential to break MAS-compatiblity. Could you validate whether apps using frameworks like that pass AppStore's automated file validations?

/c @jpsim
",mrackwitz,jpsim
3579,2016-05-16 16:39:54,"@bdash can you give me some general ETA on this? If it's not going to be fixed by the time I ship, I'm going to have a lot of `.map { $0 }` to do, and I might as well get started.
",joelkraut,bdash
3576,2016-05-13 20:11:13,"@bdash @jpsim 
",tgoyne,jpsim
3576,2016-05-13 20:11:13,"@bdash @jpsim 
",tgoyne,bdash
3575,2016-05-13 12:49:50,"Closes #3469 & #3470 /cc @tgoyne @bdash @austinzheng

This is a more conservative version of #3567 since it preserves much of our existing support for multiple Swift/Xcode versions.
",jpsim,austinzheng
3575,2016-05-13 12:49:50,"Closes #3469 & #3470 /cc @tgoyne @bdash @austinzheng

This is a more conservative version of #3567 since it preserves much of our existing support for multiple Swift/Xcode versions.
",jpsim,tgoyne
3575,2016-05-13 12:49:50,"Closes #3469 & #3470 /cc @tgoyne @bdash @austinzheng

This is a more conservative version of #3567 since it preserves much of our existing support for multiple Swift/Xcode versions.
",jpsim,bdash
3575,2016-05-17 18:31:03,"Please review @tgoyne @bdash @austinzheng 
",jpsim,austinzheng
3575,2016-05-17 18:31:03,"Please review @tgoyne @bdash @austinzheng 
",jpsim,tgoyne
3575,2016-05-17 18:31:03,"Please review @tgoyne @bdash @austinzheng 
",jpsim,bdash
3571,2016-11-22 01:45:06,"The **good news** is, Realm internally already computes move operations.
The **bad news** is, move operations are converted to insertions and deletions at the very end of the change calculation algorithm: https://github.com/realm/realm-object-store/blob/28ac73d8881189ac0b6782a6a36f4893f326397f/src/impl/collection_change_builder.cpp#L35-L38

I vaguely recall this being done due to UITableView APIs not handling move operations very nicely, that they would crash in certain scenarios despite having perfectly valid results. As this never happens with insert/delete pairs, and that this feature would be used to power UITableView's 99% of the time, we opted to ""flatten"" moves to work around this issue.

I'm fuzzy on the details, so unfortunately I don't recall what those problematic cases were, or if we filed a radar, or what the status of that potential radar would be, so I apologize for that.

@tgoyne would certainly know more, but he's on vacation this week. If one of you were to ping him again next week, he'll hopefully be able to shed more light on the situation.",jpsim,tgoyne
3567,2016-05-12 13:10:21,"Closes #3469 & #3470 /cc @tgoyne @bdash @austinzheng 

It's debatable that we might want to keep some of the machinery for supporting multiple Xcode versions side by side, but until that proves to be necessary, I'd rather keep things as simple as possible.
",jpsim,austinzheng
3567,2016-05-12 13:10:21,"Closes #3469 & #3470 /cc @tgoyne @bdash @austinzheng 

It's debatable that we might want to keep some of the machinery for supporting multiple Xcode versions side by side, but until that proves to be necessary, I'd rather keep things as simple as possible.
",jpsim,tgoyne
3567,2016-05-12 13:10:21,"Closes #3469 & #3470 /cc @tgoyne @bdash @austinzheng 

It's debatable that we might want to keep some of the machinery for supporting multiple Xcode versions side by side, but until that proves to be necessary, I'd rather keep things as simple as possible.
",jpsim,bdash
3560,2016-05-11 21:58:47,"A first shot at addressing #3069 and #3438. `NSError` objects created from system exceptions should be slightly more descriptive now. @bdash @tgoyne

Changes:
- Realm NSError now populated with the NSPOSIXErrorDomain when appropriate
- NSError user info now contains system error category
- Added RLMUnknownSystemErrorDomain for non-POSIX errors
",austinzheng,bdash
3560,2016-05-11 21:58:47,"A first shot at addressing #3069 and #3438. `NSError` objects created from system exceptions should be slightly more descriptive now. @bdash @tgoyne

Changes:
- Realm NSError now populated with the NSPOSIXErrorDomain when appropriate
- NSError user info now contains system error category
- Added RLMUnknownSystemErrorDomain for non-POSIX errors
",austinzheng,tgoyne
3560,2016-05-11 23:16:20,"I added unit tests. However, per conversation with @bdash, there's more work to be done so this PR probably isn't ready for review yet.
",austinzheng,bdash
3559,2016-05-11 19:56:52,"This makes it easier to catch when a migration is required and provide a custom error handling, instead of relying on the built-in delete strategy.

This allows to workaround #3542. This fixes #3534.

/c @jpsim @austinzheng @kishikawakatsumi 
",mrackwitz,jpsim
3559,2016-05-11 19:56:52,"This makes it easier to catch when a migration is required and provide a custom error handling, instead of relying on the built-in delete strategy.

This allows to workaround #3542. This fixes #3534.

/c @jpsim @austinzheng @kishikawakatsumi 
",mrackwitz,austinzheng
3559,2016-05-11 19:56:52,"This makes it easier to catch when a migration is required and provide a custom error handling, instead of relying on the built-in delete strategy.

This allows to workaround #3542. This fixes #3534.

/c @jpsim @austinzheng @kishikawakatsumi 
",mrackwitz,kishikawakatsumi
3550,2016-05-10 21:55:41,"`LinkingObjects` instances were being initialized eagerly by `RLMInitializeSwiftAccessorGenerics`, which was resulting in a backlinks `TableView` being created for every Swift instance of a type that contained a `LinkingObjects` property. Lazily initializing these properties means that the work of building the backlinks view is deferred until the property is first accessed. This significantly reduces the cost of allocating a Swift object that has a `LinkingObjects` property.

/cc @tgoyne @jpsim @austinzheng 

This was visible in an Instruments trace a user provided via email.
",bdash,jpsim
3550,2016-05-10 21:55:41,"`LinkingObjects` instances were being initialized eagerly by `RLMInitializeSwiftAccessorGenerics`, which was resulting in a backlinks `TableView` being created for every Swift instance of a type that contained a `LinkingObjects` property. Lazily initializing these properties means that the work of building the backlinks view is deferred until the property is first accessed. This significantly reduces the cost of allocating a Swift object that has a `LinkingObjects` property.

/cc @tgoyne @jpsim @austinzheng 

This was visible in an Instruments trace a user provided via email.
",bdash,tgoyne
3550,2016-05-10 21:55:41,"`LinkingObjects` instances were being initialized eagerly by `RLMInitializeSwiftAccessorGenerics`, which was resulting in a backlinks `TableView` being created for every Swift instance of a type that contained a `LinkingObjects` property. Lazily initializing these properties means that the work of building the backlinks view is deferred until the property is first accessed. This significantly reduces the cost of allocating a Swift object that has a `LinkingObjects` property.

/cc @tgoyne @jpsim @austinzheng 

This was visible in an Instruments trace a user provided via email.
",bdash,austinzheng
3548,2016-05-10 16:10:08,"`RLMProperty` is initialized in a slightly different codepath for classes declared in Swift than Objective-C. The Swift codepath was missing the necessary logic to handle the linking objects property descriptor.

Fixes #3546.

/cc @jpsim @tgoyne 
",bdash,jpsim
3548,2016-05-10 16:10:08,"`RLMProperty` is initialized in a slightly different codepath for classes declared in Swift than Objective-C. The Swift codepath was missing the necessary logic to handle the linking objects property descriptor.

Fixes #3546.

/cc @jpsim @tgoyne 
",bdash,tgoyne
3546,2016-05-11 00:27:25,"@bdash thanks for the quick hotfix! 
",shams-ahmed,bdash
3538,2016-05-09 14:03:14,"/cc @tgoyne @bdash 

Fixes #3532. Fixes #3536.
",jpsim,tgoyne
3538,2016-05-09 14:03:14,"/cc @tgoyne @bdash 

Fixes #3532. Fixes #3536.
",jpsim,bdash
3524,2016-05-04 10:34:36,"we shouldn't be reading `m_advancer_sg->get_transact_stage()` without first checking if `m_advancer_sg` is set /cc @tgoyne 

I think this should fix https://secure.helpscout.net/conversation/199189388/4080 (internal link)
",jpsim,tgoyne
3523,2016-05-03 23:47:27,"We previously allowed different objects in the array to satisfy the lower and upper bounds, which is not consistent with how Foundation evaluates predicates.

/cc @jpsim @tgoyne 
",bdash,jpsim
3523,2016-05-03 23:47:27,"We previously allowed different objects in the array to satisfy the lower and upper bounds, which is not consistent with how Foundation evaluates predicates.

/cc @jpsim @tgoyne 
",bdash,tgoyne
3510,2016-05-02 01:53:44,"We've been seeing this crash from our beta users.
## Expected Results

The app not crashing.
## Actual Results




## Steps to Reproduce

Crashlytics says the issue does not happen when the app is in focus, and @AriX experienced it after letting the app sit after a while.

If I had to guess, it would be `NSFileProtectionComplete` acting up when the keybag is locked.
## Version of Realm and Tooling

We are not experiencing this in production (0.95.1) but are in beta (0.99.1)
- Xcode 7.3
- 100% iOS 9.3-9.3.2
",conradev,AriX
3505,2016-04-30 10:43:26,"this was previously removed because in preparation for `Results` to no longer be `final`, but we ended up going with a different approach. /cc @bdash @tgoyne 
",jpsim,bdash
3505,2016-04-30 10:43:26,"this was previously removed because in preparation for `Results` to no longer be `final`, but we ended up going with a different approach. /cc @bdash @tgoyne 
",jpsim,tgoyne
3480,2016-04-26 09:18:35,"A very minor PR that brings the 'Backlinks' sample app in line with the new linking objects properties feature syntax.

/cc @bdash @jpsim 
",TimOliver,jpsim
3480,2016-04-26 09:18:35,"A very minor PR that brings the 'Backlinks' sample app in line with the new linking objects properties feature syntax.

/cc @bdash @jpsim 
",TimOliver,bdash
3479,2016-04-25 20:34:22,"Also works with older versions. Deleting the file no longer works due to that the realm file is no longer actually opened multiple times, but setting the max open files to zero will work as long as each SharedGroup opens any files at all.

@bdash 
",tgoyne,bdash
3478,2016-04-25 19:13:36,"This may or may not fix any actual issues hit by users. The newly added test hits the ""m_advancer_sg->get_version_of_current_transaction() == new_notifiers.front()->version()"" assertion failure, but does so in a way that is very unlikely to be the same as how users are hitting it (at the minimum, to hit it via the public API would require active runloops on multiple threads).

The problem fixed in the second commit is almost certainly not relevant to any actual users.

@bdash @jpsim
",tgoyne,jpsim
3478,2016-04-25 19:13:36,"This may or may not fix any actual issues hit by users. The newly added test hits the ""m_advancer_sg->get_version_of_current_transaction() == new_notifiers.front()->version()"" assertion failure, but does so in a way that is very unlikely to be the same as how users are hitting it (at the minimum, to hit it via the public API would require active runloops on multiple threads).

The problem fixed in the second commit is almost certainly not relevant to any actual users.

@bdash @jpsim
",tgoyne,bdash
3476,2016-04-29 16:24:40,"That looks like an Xcode bug, @OlegAnghelov... have you filed a radar? In any case, your realm issue here seems resolved, so I'll close this.
",jpsim,OlegAnghelov
3473,2016-04-24 00:55:46,"## Goals

I want to use RealmSwift 0.99.0 in a new Xcode iOS Application project. I can create the project, init and install the RealmSwift using Cocoapods.. but the build immediately fails with errors in RealmConfiguration.swift
## Expected Results

I expect to be able to successfully build Xcode iOS application projects using RealmSwift 0.99.0. At this point I cannot create new projects that allow me to build
Question/workaround: Is there a way to provide a RealmSwift version override in the cocoapods? I tried ""pod 'RealmSwift' '~> 0.98.8'"" (and other combinations) with no successs
## Actual Results

After install RealmSwift using Pod Install, and reopening the .xcworkspace file, compilation completes, but the Build fails
## Steps to Reproduce
1. Create a new Xcode project
2. iOS Application Single View Application
3. In the new application directory, install RealmSwift 0.99.0 using cocoapods
4. pod init; edit pod to add ""platform :ios, '8.0'', ""use_frameworks!"", and ""pod 'RealmSwift'""; pod install
5. Open the project with the generated .xcworkspace file
6. The files will index, but quickly fail with all errors in the RealmConfiguration.swift file
7. There are two lines related to NSURL. Both display two matching error messages:

/Users/.../Pods/RealmSwift/RealmSwift/RealmConfiguration.swift:71:64: Expected expression in list of expressions

/Users/.../Pods/RealmSwift/RealmSwift/RealmConfiguration.swift:71:43: Cannot convert value of type 'NSURL' to expected argument type '@noescape (String) throws -> NSURL'
## Code Sample

Both lines fail at 'init' in  `.map(NSURL.init(fileURLWithPath:))` in RealmConfiguration.swift

A:
`objectTypes: [Object.Type]? = nil) {
            self.fileURL = path.map(NSURL.init(fileURLWithPath:))
            if inMemoryIdentifier != nil {
                self.inMemoryIdentifier = inMemoryIdentifier
            }
`
B:
`public var fileURL: NSURL? {
            set {
                _inMemoryIdentifier = nil
                _path = newValue?.path
            }
            get {
                return _path.map(NSURL.init(fileURLWithPath:))
            }
        }
`
## Version of Realm and Tooling

ProductName:    Mac OS X
ProductVersion: 10.10.5
BuildVersion:   14F1713

/Applications/Xcode.app/Contents/Developer
Xcode 7.2.1
Build version 7C1002

/Users/Nicholas/.rvm/gems/ruby-2.2.1/bin/pod
0.39.0
Realm (0.99.0)
RealmSwift (0.99.0)

/bin/bash
GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin14)

/usr/local/bin/carthage
0.15.2
(not in use here)

/usr/bin/git
git version 2.5.4 (Apple Git-61)
",atdash,noescape
3467,2016-04-22 14:10:27,"As best I can tell, this was just missed in #3359 /cc @tgoyne 

I think this is compatible with #3419 but not 100% sure just yet. /cc @bdash
",jpsim,tgoyne
3467,2016-04-22 14:10:27,"As best I can tell, this was just missed in #3359 /cc @tgoyne 

I think this is compatible with #3419 but not 100% sure just yet. /cc @bdash
",jpsim,bdash
3466,2016-04-22 06:01:00,"Cherry-picked from #3419.

> It no longer compiles now that `Results` is not final. It was added as part of the fine-grained notifications work and has not yet shipped in a release, so it's ok to remove. We can look into bringing it back in the future if we can find a way to do so.

/cc @bdash
",jpsim,bdash
3463,2016-04-21 15:54:08,"Closes #1692

This PR is for discussion.

Deleting Realm when migration is done within the binding code. I know it is not the best solution. But it should work. If it won't make it in time for the schedule, I think it will be worth choosing this implementation.

What do you think about it?
@tgoyne @jpsim
",kishikawakatsumi,jpsim
3463,2016-04-21 15:54:08,"Closes #1692

This PR is for discussion.

Deleting Realm when migration is done within the binding code. I know it is not the best solution. But it should work. If it won't make it in time for the schedule, I think it will be worth choosing this implementation.

What do you think about it?
@tgoyne @jpsim
",kishikawakatsumi,tgoyne
3463,2016-05-05 17:50:12,"Add a Swift test and I'm happy with this. @tgoyne @bdash would be great to get this in the next release, so I'd appreciate if you could take time to review
",jpsim,bdash
3462,2016-04-21 15:49:08,"Closes #1692

This PR is for discussion.

Move calling `[RLMSchema sharedSchema]` earlier than initialization of the Realm, to combine verifying schema to one place.
https://github.com/realm/realm-cocoa/compare/kk-delete-if-migration3?expand=1#diff-b20e44b1f2acd3a4d649580c4a87b52aR349

This PR modifies the binding code but almost done within ObjectStore code.

Will you let me know what you think about it?
@tgoyne @jpsim
",kishikawakatsumi,jpsim
3462,2016-04-21 15:49:08,"Closes #1692

This PR is for discussion.

Move calling `[RLMSchema sharedSchema]` earlier than initialization of the Realm, to combine verifying schema to one place.
https://github.com/realm/realm-cocoa/compare/kk-delete-if-migration3?expand=1#diff-b20e44b1f2acd3a4d649580c4a87b52aR349

This PR modifies the binding code but almost done within ObjectStore code.

Will you let me know what you think about it?
@tgoyne @jpsim
",kishikawakatsumi,tgoyne
3462,2016-04-26 06:45:53,"Talked with @jpsim, we adopt https://github.com/realm/realm-cocoa/pull/3463 approach for now, for less affected existing code.
",kishikawakatsumi,jpsim
3461,2016-04-21 14:14:52,"Fixes #3454.
- [x] Changelog entry

/c @jpsim @tgoyne
",mrackwitz,jpsim
3461,2016-04-21 14:14:52,"Fixes #3454.
- [x] Changelog entry

/c @jpsim @tgoyne
",mrackwitz,tgoyne
3458,2016-04-20 15:54:47,"Closes #2593.

~~Depends on #3455. Diff with that PR: https://github.com/realm/realm-cocoa/compare/jp/api/rename-primary-key-to-object-id...jp/api/url-paths~~ (UPDATE: no longer the case)

I'm torn as to whether or not this is something we should be doing. On the one hand, it's aligned with recent Foundation API changes. On the other, we gain (almost) nothing internally by representing paths as URLs, since it's all string based under the hood.

I still wanted to do this work to fully assess if it's the right move, as we're going through other deprecations.

Thoughts @tgoyne @bdash @mrackwitz?
",jpsim,mrackwitz
3458,2016-04-20 15:54:47,"Closes #2593.

~~Depends on #3455. Diff with that PR: https://github.com/realm/realm-cocoa/compare/jp/api/rename-primary-key-to-object-id...jp/api/url-paths~~ (UPDATE: no longer the case)

I'm torn as to whether or not this is something we should be doing. On the one hand, it's aligned with recent Foundation API changes. On the other, we gain (almost) nothing internally by representing paths as URLs, since it's all string based under the hood.

I still wanted to do this work to fully assess if it's the right move, as we're going through other deprecations.

Thoughts @tgoyne @bdash @mrackwitz?
",jpsim,tgoyne
3458,2016-04-20 15:54:47,"Closes #2593.

~~Depends on #3455. Diff with that PR: https://github.com/realm/realm-cocoa/compare/jp/api/rename-primary-key-to-object-id...jp/api/url-paths~~ (UPDATE: no longer the case)

I'm torn as to whether or not this is something we should be doing. On the one hand, it's aligned with recent Foundation API changes. On the other, we gain (almost) nothing internally by representing paths as URLs, since it's all string based under the hood.

I still wanted to do this work to fully assess if it's the right move, as we're going through other deprecations.

Thoughts @tgoyne @bdash @mrackwitz?
",jpsim,bdash
3455,2016-04-19 12:39:06,"Closes #2849.

This is to be discussed and considered for 0.99 based on the conversations in #2849 and Slack#bindings. /cc @tgoyne @bdash @timanglade
",jpsim,timanglade
3455,2016-04-19 12:39:06,"Closes #2849.

This is to be discussed and considered for 0.99 based on the conversations in #2849 and Slack#bindings. /cc @tgoyne @bdash @timanglade
",jpsim,tgoyne
3455,2016-04-19 12:39:06,"Closes #2849.

This is to be discussed and considered for 0.99 based on the conversations in #2849 and Slack#bindings. /cc @tgoyne @bdash @timanglade
",jpsim,bdash
3452,2016-04-19 08:40:57,"@interface Dog : RLMObject
@property NSString *name;
@property NSInteger age;
@end

@implementation Dog
// No need for implementation
@end

RLM_ARRAY_TYPE(Dog)

@interface Person : RLMObject<NSObject>
@property NSString      *name;
@property RLMArray<Dog> *dogs;
@end

@implementation Person

+(NSString *)primaryKey
{
    return @""name"";
}
@end

[#error]

2016-04-19 16:36:54.290 Simple[42837:5525138] **\* Terminating app due to uncaught exception 'RLMException', reason: 'Migration is required due to the following errors: 
- Property 'name' has been made a primary key.'
",iphilcc,implementation
3452,2016-04-19 08:40:57,"@interface Dog : RLMObject
@property NSString *name;
@property NSInteger age;
@end

@implementation Dog
// No need for implementation
@end

RLM_ARRAY_TYPE(Dog)

@interface Person : RLMObject<NSObject>
@property NSString      *name;
@property RLMArray<Dog> *dogs;
@end

@implementation Person

+(NSString *)primaryKey
{
    return @""name"";
}
@end

[#error]

2016-04-19 16:36:54.290 Simple[42837:5525138] **\* Terminating app due to uncaught exception 'RLMException', reason: 'Migration is required due to the following errors: 
- Property 'name' has been made a primary key.'
",iphilcc,end
3452,2016-04-19 08:40:57,"@interface Dog : RLMObject
@property NSString *name;
@property NSInteger age;
@end

@implementation Dog
// No need for implementation
@end

RLM_ARRAY_TYPE(Dog)

@interface Person : RLMObject<NSObject>
@property NSString      *name;
@property RLMArray<Dog> *dogs;
@end

@implementation Person

+(NSString *)primaryKey
{
    return @""name"";
}
@end

[#error]

2016-04-19 16:36:54.290 Simple[42837:5525138] **\* Terminating app due to uncaught exception 'RLMException', reason: 'Migration is required due to the following errors: 
- Property 'name' has been made a primary key.'
",iphilcc,interface
3452,2016-04-19 08:40:57,"@interface Dog : RLMObject
@property NSString *name;
@property NSInteger age;
@end

@implementation Dog
// No need for implementation
@end

RLM_ARRAY_TYPE(Dog)

@interface Person : RLMObject<NSObject>
@property NSString      *name;
@property RLMArray<Dog> *dogs;
@end

@implementation Person

+(NSString *)primaryKey
{
    return @""name"";
}
@end

[#error]

2016-04-19 16:36:54.290 Simple[42837:5525138] **\* Terminating app due to uncaught exception 'RLMException', reason: 'Migration is required due to the following errors: 
- Property 'name' has been made a primary key.'
",iphilcc,property
3444,2016-04-15 19:14:06,"Fixes #3194 /cc @tgoyne @bdash
",jpsim,tgoyne
3444,2016-04-15 19:14:06,"Fixes #3194 /cc @tgoyne @bdash
",jpsim,bdash
3442,2016-04-15 14:27:15,"Fixes #3347.

This warns only once on initialization of the shared runtime schema and points out which property cause the warning.
There is no warning yet for dynamic schemas, but as we consider them a more advanced feature, a deprecation warning there might not be necessary at all cost.
#### ToDo
- [x] Add changelog entry
- [x] Decide whether a warning is needed for dynamic schemas

/c @jpsim
",mrackwitz,jpsim
3440,2016-04-15 11:52:28,"Fixes #3435.
- [x] Swift docs
- [ ] Objective-C docs 

/c @jpsim @icanzilb @TimOliver
",mrackwitz,jpsim
3440,2016-04-15 11:52:28,"Fixes #3435.
- [x] Swift docs
- [ ] Objective-C docs 

/c @jpsim @icanzilb @TimOliver
",mrackwitz,icanzilb
3440,2016-04-15 11:52:28,"Fixes #3435.
- [x] Swift docs
- [ ] Objective-C docs 

/c @jpsim @icanzilb @TimOliver
",mrackwitz,TimOliver
3440,2016-04-20 12:21:55,"This was picked up by @tgoyne on #3359, which will require larger updates to the API docs of those methods.
",mrackwitz,tgoyne
3437,2016-04-14 16:55:20,"This is based on the assumption that the address space will be exhausted most commonly either on trying to map a Realm database which doesn't fit in the left address space or on committing a writing transaction when the memory is resized, while this could also happen on (auto-)refreshes.
Fixes #2269.

/c @jpsim @bdash @tgoyne
",mrackwitz,jpsim
3437,2016-04-14 16:55:20,"This is based on the assumption that the address space will be exhausted most commonly either on trying to map a Realm database which doesn't fit in the left address space or on committing a writing transaction when the memory is resized, while this could also happen on (auto-)refreshes.
Fixes #2269.

/c @jpsim @bdash @tgoyne
",mrackwitz,bdash
3437,2016-04-14 16:55:20,"This is based on the assumption that the address space will be exhausted most commonly either on trying to map a Realm database which doesn't fit in the left address space or on committing a writing transaction when the memory is resized, while this could also happen on (auto-)refreshes.
Fixes #2269.

/c @jpsim @bdash @tgoyne
",mrackwitz,tgoyne
3437,2016-04-15 18:10:34,"@tgoyne: Thanks for the very detailed proposal how to test that. I was thinking about that and @ironage was also giving me some good feedback. I'll report back, once I was able to reproduce it, whether it is actually recoverable and if it's a good idea to test that continuously.
",mrackwitz,ironage
3433,2016-04-14 00:14:23,"Did this one by reverting breaking changes rather than cherry picking the changes we want over 0.98.6, since that seems safest given the number of changes we do want from `master`. /cc @bdash @tgoyne
",jpsim,bdash
3433,2016-04-14 00:14:23,"Did this one by reverting breaking changes rather than cherry picking the changes we want over 0.98.6, since that seems safest given the number of changes we do want from `master`. /cc @bdash @tgoyne
",jpsim,tgoyne
3432,2016-04-13 22:54:39,"FYI @TimOliver
",jpsim,TimOliver
3429,2016-04-13 04:44:34,"Fix I'm referring to is realm/realm-core#1585 /cc @bdash @tgoyne
",jpsim,bdash
3429,2016-04-13 04:44:34,"Fix I'm referring to is realm/realm-core#1585 /cc @bdash @tgoyne
",jpsim,tgoyne
3421,2016-04-08 19:30:28,"If the `RLMResults` has been sorted then the returned index should be the first object that is matched by the predicate, not an arbitrary object.

Fixes #3410.

/cc @jpsim @tgoyne 

The performance here could be improved if `TableView` supported partial sorting or selecting the nth element based on the sort criteria. Those doesn't really fit with `TableView`'s current design for sorting though.
",bdash,jpsim
3421,2016-04-08 19:30:28,"If the `RLMResults` has been sorted then the returned index should be the first object that is matched by the predicate, not an arbitrary object.

Fixes #3410.

/cc @jpsim @tgoyne 

The performance here could be improved if `TableView` supported partial sorting or selecting the nth element based on the sort criteria. Those doesn't really fit with `TableView`'s current design for sorting though.
",bdash,tgoyne
3420,2016-04-08 13:39:46,"If change the property attribute from nullable to required, automatic migration works. But the values will be cleared. This behavior is difficult to understand what happened.
So keep the value if just changing nullability.

If the old value is null, the new value will be an empty string, a zero, a zero-length data or a UNIX epoch date.

This user confused the current behavior https://github.com/realm/realm-cocoa/issues/3413.

CC @tgoyne @jpsim @bdash
",kishikawakatsumi,jpsim
3420,2016-04-08 13:39:46,"If change the property attribute from nullable to required, automatic migration works. But the values will be cleared. This behavior is difficult to understand what happened.
So keep the value if just changing nullability.

If the old value is null, the new value will be an empty string, a zero, a zero-length data or a UNIX epoch date.

This user confused the current behavior https://github.com/realm/realm-cocoa/issues/3413.

CC @tgoyne @jpsim @bdash
",kishikawakatsumi,tgoyne
3420,2016-04-08 13:39:46,"If change the property attribute from nullable to required, automatic migration works. But the values will be cleared. This behavior is difficult to understand what happened.
So keep the value if just changing nullability.

If the old value is null, the new value will be an empty string, a zero, a zero-length data or a UNIX epoch date.

This user confused the current behavior https://github.com/realm/realm-cocoa/issues/3413.

CC @tgoyne @jpsim @bdash
",kishikawakatsumi,bdash
3419,2016-04-19 16:20:55,"This is now ready for review feedback.

/cc @jpsim, @tgoyne, @mrackwitz, @kishikawakatsumi 
",bdash,tgoyne
3419,2016-04-19 16:20:55,"This is now ready for review feedback.

/cc @jpsim, @tgoyne, @mrackwitz, @kishikawakatsumi 
",bdash,kishikawakatsumi
3417,2016-04-07 10:30:38,"This bug was found by @oleynik-gennady-appus
## Expected Results

Expecting same sort results like in objective-c / swift. Also checked sort [using this web-tool](http://textmechanic.com/text-tools/basic-text-tools/sort-text-lines/)
## Code Sample


## Version of Realm and Tooling

Realm version: 0.98.5

Xcode version: 7.3

iOS/OSX version: 10.10.4

Dependency manager + version: Cocoapods 0.39.0
",Kirow,oleynik-gennady-appus
3415,2016-04-07 11:55:38,"@Kirow: Thanks for jumping in here. :+1:
@i-phil: Does the sample code help with your question?
",mrackwitz,i-phil
3415,2016-04-07 13:29:22,"@Kirow @mrackwitz thank you,but it can't help me with this question



this is a json mode for me, i want use realm to cache it, so i changed code to this:
`@interface SHOT : RLMObject`
and i don't know how to change
`@property (nonatomic, strong) NSArray<NSString> * tags;`
",iphilcc,interface
3415,2016-04-07 13:29:22,"@Kirow @mrackwitz thank you,but it can't help me with this question



this is a json mode for me, i want use realm to cache it, so i changed code to this:
`@interface SHOT : RLMObject`
and i don't know how to change
`@property (nonatomic, strong) NSArray<NSString> * tags;`
",iphilcc,property
3415,2016-04-07 14:11:05,"@TiagoVeloso you mean is i can't use Realm Object for this JSON Object?
",iphilcc,TiagoVeloso
3415,2016-04-07 14:27:24,"@i-phil: It's not exactly clear to me what you want to achieve. If you need further assistance, could you clarify your question so that we can help you better?
",mrackwitz,i-phil
3415,2016-04-07 15:07:55,"@Kirow If it is like this?  This is a complete json object。
{
  ""html_url"" : ""https:\/\/dribbble.com\/shots\/2637319-Hello-Circular"",
  ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/projects"",
  ""team"" : {
    ""html_url"" : ""https:\/\/dribbble.com\/Spotify"",
    ""location"" : ""Stockholm \/\/ New York \/\/ London"",
    ""pro"" : false,
    ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/projects"",
    ""following_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/following"",
    ""projects_count"" : 0,
    ""members_count"" : 20,
    ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/buckets"",
    ""updated_at"" : ""2016-04-07T07:23:47Z"",
    ""team_shots_url"" : ""https:\/\/api.dribbble.com\/v1\/teams\/181459\/shots"",
    ""shots_count"" : 22,
    ""rebounds_received_count"" : 4,
    ""bio"" : """",
    ""links"" : {
      ""web"" : ""http:\/\/www.spotify.com"",
      ""twitter"" : ""https:\/\/twitter.com\/spotifydesign""
    },
    ""name"" : ""Spotify"",
    ""avatar_url"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/181459\/avatars\/normal\/8c8e4552d7f149815586e2bf5a533872.jpg?1434458347"",
    ""can_upload_shot"" : true,
    ""type"" : ""Team"",
    ""shots_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/shots"",
    ""id"" : 181459,
    ""buckets_count"" : 0,
    ""members_url"" : ""https:\/\/api.dribbble.com\/v1\/teams\/181459\/members"",
    ""followers_count"" : 6526,
    ""likes_received_count"" : 576,
    ""likes_count"" : 8,
    ""followings_count"" : 15,
    ""created_at"" : ""2012-07-24T19:08:16Z"",
    ""followers_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/followers"",
    ""comments_received_count"" : 65,
    ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/likes"",
    ""username"" : ""Spotify""
  },
  ""title"" : ""Hello Circular."",
  ""tags"" : [
    ""brand"",
    ""circular"",
    ""design"",
    ""font"",
    ""spotify"",
    ""typeface"",
    ""ui""
  ],
  ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/buckets"",
  ""updated_at"" : ""2016-04-07T07:23:47Z"",
  ""animated"" : false,
  ""comments_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/comments"",
  ""comments_count"" : 17,
  ""images"" : {
    ""hidpi"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still.png"",
    ""teaser"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still_teaser.png"",
    ""normal"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still_1x.png""
  },
  ""attachments_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/attachments"",
  ""rebounds_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/rebounds"",
  ""id"" : 2637319,
  ""buckets_count"" : 8,
  ""attachments_count"" : 5,
  ""rebounds_count"" : 0,
  ""user"" : {
    ""html_url"" : ""https:\/\/dribbble.com\/hellostanley"",
    ""location"" : ""London \/ Stockholm"",
    ""pro"" : true,
    ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/projects"",
    ""following_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/following"",
    ""projects_count"" : 0,
    ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/buckets"",
    ""updated_at"" : ""2016-04-07T08:16:36Z"",
    ""shots_count"" : 2,
    ""rebounds_received_count"" : 0,
    ""bio"" : ""British Designer living in Stockholm. Design Director <a href=\""https:\/\/dribbble.com\/Spotify\"">@Spotify<\/a>."",
    ""links"" : {
      ""web"" : ""http:\/\/www.hellostanley.com"",
      ""twitter"" : ""https:\/\/twitter.com\/hellostanley""
    },
    ""name"" : ""Stanley"",
    ""avatar_url"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/avatars\/normal\/8b2a042a54708a8be6036cdb7d4e4de3.jpg?1432991845"",
    ""can_upload_shot"" : true,
    ""type"" : ""Player"",
    ""shots_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/shots"",
    ""id"" : 3883,
    ""buckets_count"" : 0,
    ""teams_count"" : 1,
    ""teams_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/teams"",
    ""followers_count"" : 107,
    ""likes_received_count"" : 591,
    ""likes_count"" : 92,
    ""followings_count"" : 84,
    ""created_at"" : ""2010-08-03T10:25:47Z"",
    ""followers_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/followers"",
    ""comments_received_count"" : 26,
    ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/likes"",
    ""username"" : ""hellostanley""
  },
  ""height"" : 300,
  ""width"" : 400,
  ""likes_count"" : 352,
  ""created_at"" : ""2016-04-07T07:16:02Z"",
  ""views_count"" : 4362,
  ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/likes"",
  ""description"" : ""<p>Meet Circular, Spotify's new typeface. <\/p>\n\n<p>Circular is a friendly sans-serif with unmistakable character and universal appeal. Just the traits we were looking for when choosing a typeface. <\/p>\n\n<p>This update is a key part of the brand refresh we introduced last year, and we couldn't be more excited to be rolling it out. The update is now live on iOS and soon to be on Android and Desktop too. We think you’re going to get on really well.<\/p>\n\n<p>Looking forward to sharing more with you soon.<\/p>\n\n<p>—Spotify Design.<\/p>""
}

#class
@interface SHOT : RLMObject
@property (nonatomic, assign) NSInteger id;
@property (nonatomic, strong) NSString \* title;
@property (nonatomic, strong) NSString \* description;
@property (nonatomic, assign) NSInteger width;
@property (nonatomic, assign) NSInteger height;
@property (nonatomic, strong) IMAGE \* images;
@property (nonatomic, assign) NSInteger views_count;
@property (nonatomic, assign) NSInteger likes_count;
@property (nonatomic, assign) NSInteger comments_count;
@property (nonatomic, assign) NSInteger attachments_count;
@property (nonatomic, assign) NSInteger rebounds_count;
@property (nonatomic, assign) NSInteger buckets_count;
@property (nonatomic, strong) NSDate \* created_at;
@property (nonatomic, strong) NSDate \* updated_at;
@property (nonatomic, strong) NSString \* html_url;
@property (nonatomic, strong) NSString \* attachments_url;
@property (nonatomic, strong) NSString \* buckets_url;
@property (nonatomic, strong) NSString \* comments_url;
@property (nonatomic, strong) NSString \* likes_url;
@property (nonatomic, strong) NSString \* projects_url;
@property (nonatomic, strong) NSString \* rebounds_url;
@property (nonatomic, strong) NSArray \* tags;
@property (nonatomic, strong) USER \* user;
@property (nonatomic, strong) TEAM \* team;
@end
",iphilcc,Spotify
3415,2016-04-07 15:07:55,"@Kirow If it is like this?  This is a complete json object。
{
  ""html_url"" : ""https:\/\/dribbble.com\/shots\/2637319-Hello-Circular"",
  ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/projects"",
  ""team"" : {
    ""html_url"" : ""https:\/\/dribbble.com\/Spotify"",
    ""location"" : ""Stockholm \/\/ New York \/\/ London"",
    ""pro"" : false,
    ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/projects"",
    ""following_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/following"",
    ""projects_count"" : 0,
    ""members_count"" : 20,
    ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/buckets"",
    ""updated_at"" : ""2016-04-07T07:23:47Z"",
    ""team_shots_url"" : ""https:\/\/api.dribbble.com\/v1\/teams\/181459\/shots"",
    ""shots_count"" : 22,
    ""rebounds_received_count"" : 4,
    ""bio"" : """",
    ""links"" : {
      ""web"" : ""http:\/\/www.spotify.com"",
      ""twitter"" : ""https:\/\/twitter.com\/spotifydesign""
    },
    ""name"" : ""Spotify"",
    ""avatar_url"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/181459\/avatars\/normal\/8c8e4552d7f149815586e2bf5a533872.jpg?1434458347"",
    ""can_upload_shot"" : true,
    ""type"" : ""Team"",
    ""shots_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/shots"",
    ""id"" : 181459,
    ""buckets_count"" : 0,
    ""members_url"" : ""https:\/\/api.dribbble.com\/v1\/teams\/181459\/members"",
    ""followers_count"" : 6526,
    ""likes_received_count"" : 576,
    ""likes_count"" : 8,
    ""followings_count"" : 15,
    ""created_at"" : ""2012-07-24T19:08:16Z"",
    ""followers_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/followers"",
    ""comments_received_count"" : 65,
    ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/likes"",
    ""username"" : ""Spotify""
  },
  ""title"" : ""Hello Circular."",
  ""tags"" : [
    ""brand"",
    ""circular"",
    ""design"",
    ""font"",
    ""spotify"",
    ""typeface"",
    ""ui""
  ],
  ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/buckets"",
  ""updated_at"" : ""2016-04-07T07:23:47Z"",
  ""animated"" : false,
  ""comments_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/comments"",
  ""comments_count"" : 17,
  ""images"" : {
    ""hidpi"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still.png"",
    ""teaser"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still_teaser.png"",
    ""normal"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still_1x.png""
  },
  ""attachments_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/attachments"",
  ""rebounds_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/rebounds"",
  ""id"" : 2637319,
  ""buckets_count"" : 8,
  ""attachments_count"" : 5,
  ""rebounds_count"" : 0,
  ""user"" : {
    ""html_url"" : ""https:\/\/dribbble.com\/hellostanley"",
    ""location"" : ""London \/ Stockholm"",
    ""pro"" : true,
    ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/projects"",
    ""following_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/following"",
    ""projects_count"" : 0,
    ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/buckets"",
    ""updated_at"" : ""2016-04-07T08:16:36Z"",
    ""shots_count"" : 2,
    ""rebounds_received_count"" : 0,
    ""bio"" : ""British Designer living in Stockholm. Design Director <a href=\""https:\/\/dribbble.com\/Spotify\"">@Spotify<\/a>."",
    ""links"" : {
      ""web"" : ""http:\/\/www.hellostanley.com"",
      ""twitter"" : ""https:\/\/twitter.com\/hellostanley""
    },
    ""name"" : ""Stanley"",
    ""avatar_url"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/avatars\/normal\/8b2a042a54708a8be6036cdb7d4e4de3.jpg?1432991845"",
    ""can_upload_shot"" : true,
    ""type"" : ""Player"",
    ""shots_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/shots"",
    ""id"" : 3883,
    ""buckets_count"" : 0,
    ""teams_count"" : 1,
    ""teams_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/teams"",
    ""followers_count"" : 107,
    ""likes_received_count"" : 591,
    ""likes_count"" : 92,
    ""followings_count"" : 84,
    ""created_at"" : ""2010-08-03T10:25:47Z"",
    ""followers_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/followers"",
    ""comments_received_count"" : 26,
    ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/likes"",
    ""username"" : ""hellostanley""
  },
  ""height"" : 300,
  ""width"" : 400,
  ""likes_count"" : 352,
  ""created_at"" : ""2016-04-07T07:16:02Z"",
  ""views_count"" : 4362,
  ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/likes"",
  ""description"" : ""<p>Meet Circular, Spotify's new typeface. <\/p>\n\n<p>Circular is a friendly sans-serif with unmistakable character and universal appeal. Just the traits we were looking for when choosing a typeface. <\/p>\n\n<p>This update is a key part of the brand refresh we introduced last year, and we couldn't be more excited to be rolling it out. The update is now live on iOS and soon to be on Android and Desktop too. We think you’re going to get on really well.<\/p>\n\n<p>Looking forward to sharing more with you soon.<\/p>\n\n<p>—Spotify Design.<\/p>""
}

#class
@interface SHOT : RLMObject
@property (nonatomic, assign) NSInteger id;
@property (nonatomic, strong) NSString \* title;
@property (nonatomic, strong) NSString \* description;
@property (nonatomic, assign) NSInteger width;
@property (nonatomic, assign) NSInteger height;
@property (nonatomic, strong) IMAGE \* images;
@property (nonatomic, assign) NSInteger views_count;
@property (nonatomic, assign) NSInteger likes_count;
@property (nonatomic, assign) NSInteger comments_count;
@property (nonatomic, assign) NSInteger attachments_count;
@property (nonatomic, assign) NSInteger rebounds_count;
@property (nonatomic, assign) NSInteger buckets_count;
@property (nonatomic, strong) NSDate \* created_at;
@property (nonatomic, strong) NSDate \* updated_at;
@property (nonatomic, strong) NSString \* html_url;
@property (nonatomic, strong) NSString \* attachments_url;
@property (nonatomic, strong) NSString \* buckets_url;
@property (nonatomic, strong) NSString \* comments_url;
@property (nonatomic, strong) NSString \* likes_url;
@property (nonatomic, strong) NSString \* projects_url;
@property (nonatomic, strong) NSString \* rebounds_url;
@property (nonatomic, strong) NSArray \* tags;
@property (nonatomic, strong) USER \* user;
@property (nonatomic, strong) TEAM \* team;
@end
",iphilcc,end
3415,2016-04-07 15:07:55,"@Kirow If it is like this?  This is a complete json object。
{
  ""html_url"" : ""https:\/\/dribbble.com\/shots\/2637319-Hello-Circular"",
  ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/projects"",
  ""team"" : {
    ""html_url"" : ""https:\/\/dribbble.com\/Spotify"",
    ""location"" : ""Stockholm \/\/ New York \/\/ London"",
    ""pro"" : false,
    ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/projects"",
    ""following_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/following"",
    ""projects_count"" : 0,
    ""members_count"" : 20,
    ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/buckets"",
    ""updated_at"" : ""2016-04-07T07:23:47Z"",
    ""team_shots_url"" : ""https:\/\/api.dribbble.com\/v1\/teams\/181459\/shots"",
    ""shots_count"" : 22,
    ""rebounds_received_count"" : 4,
    ""bio"" : """",
    ""links"" : {
      ""web"" : ""http:\/\/www.spotify.com"",
      ""twitter"" : ""https:\/\/twitter.com\/spotifydesign""
    },
    ""name"" : ""Spotify"",
    ""avatar_url"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/181459\/avatars\/normal\/8c8e4552d7f149815586e2bf5a533872.jpg?1434458347"",
    ""can_upload_shot"" : true,
    ""type"" : ""Team"",
    ""shots_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/shots"",
    ""id"" : 181459,
    ""buckets_count"" : 0,
    ""members_url"" : ""https:\/\/api.dribbble.com\/v1\/teams\/181459\/members"",
    ""followers_count"" : 6526,
    ""likes_received_count"" : 576,
    ""likes_count"" : 8,
    ""followings_count"" : 15,
    ""created_at"" : ""2012-07-24T19:08:16Z"",
    ""followers_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/followers"",
    ""comments_received_count"" : 65,
    ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/likes"",
    ""username"" : ""Spotify""
  },
  ""title"" : ""Hello Circular."",
  ""tags"" : [
    ""brand"",
    ""circular"",
    ""design"",
    ""font"",
    ""spotify"",
    ""typeface"",
    ""ui""
  ],
  ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/buckets"",
  ""updated_at"" : ""2016-04-07T07:23:47Z"",
  ""animated"" : false,
  ""comments_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/comments"",
  ""comments_count"" : 17,
  ""images"" : {
    ""hidpi"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still.png"",
    ""teaser"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still_teaser.png"",
    ""normal"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still_1x.png""
  },
  ""attachments_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/attachments"",
  ""rebounds_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/rebounds"",
  ""id"" : 2637319,
  ""buckets_count"" : 8,
  ""attachments_count"" : 5,
  ""rebounds_count"" : 0,
  ""user"" : {
    ""html_url"" : ""https:\/\/dribbble.com\/hellostanley"",
    ""location"" : ""London \/ Stockholm"",
    ""pro"" : true,
    ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/projects"",
    ""following_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/following"",
    ""projects_count"" : 0,
    ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/buckets"",
    ""updated_at"" : ""2016-04-07T08:16:36Z"",
    ""shots_count"" : 2,
    ""rebounds_received_count"" : 0,
    ""bio"" : ""British Designer living in Stockholm. Design Director <a href=\""https:\/\/dribbble.com\/Spotify\"">@Spotify<\/a>."",
    ""links"" : {
      ""web"" : ""http:\/\/www.hellostanley.com"",
      ""twitter"" : ""https:\/\/twitter.com\/hellostanley""
    },
    ""name"" : ""Stanley"",
    ""avatar_url"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/avatars\/normal\/8b2a042a54708a8be6036cdb7d4e4de3.jpg?1432991845"",
    ""can_upload_shot"" : true,
    ""type"" : ""Player"",
    ""shots_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/shots"",
    ""id"" : 3883,
    ""buckets_count"" : 0,
    ""teams_count"" : 1,
    ""teams_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/teams"",
    ""followers_count"" : 107,
    ""likes_received_count"" : 591,
    ""likes_count"" : 92,
    ""followings_count"" : 84,
    ""created_at"" : ""2010-08-03T10:25:47Z"",
    ""followers_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/followers"",
    ""comments_received_count"" : 26,
    ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/likes"",
    ""username"" : ""hellostanley""
  },
  ""height"" : 300,
  ""width"" : 400,
  ""likes_count"" : 352,
  ""created_at"" : ""2016-04-07T07:16:02Z"",
  ""views_count"" : 4362,
  ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/likes"",
  ""description"" : ""<p>Meet Circular, Spotify's new typeface. <\/p>\n\n<p>Circular is a friendly sans-serif with unmistakable character and universal appeal. Just the traits we were looking for when choosing a typeface. <\/p>\n\n<p>This update is a key part of the brand refresh we introduced last year, and we couldn't be more excited to be rolling it out. The update is now live on iOS and soon to be on Android and Desktop too. We think you’re going to get on really well.<\/p>\n\n<p>Looking forward to sharing more with you soon.<\/p>\n\n<p>—Spotify Design.<\/p>""
}

#class
@interface SHOT : RLMObject
@property (nonatomic, assign) NSInteger id;
@property (nonatomic, strong) NSString \* title;
@property (nonatomic, strong) NSString \* description;
@property (nonatomic, assign) NSInteger width;
@property (nonatomic, assign) NSInteger height;
@property (nonatomic, strong) IMAGE \* images;
@property (nonatomic, assign) NSInteger views_count;
@property (nonatomic, assign) NSInteger likes_count;
@property (nonatomic, assign) NSInteger comments_count;
@property (nonatomic, assign) NSInteger attachments_count;
@property (nonatomic, assign) NSInteger rebounds_count;
@property (nonatomic, assign) NSInteger buckets_count;
@property (nonatomic, strong) NSDate \* created_at;
@property (nonatomic, strong) NSDate \* updated_at;
@property (nonatomic, strong) NSString \* html_url;
@property (nonatomic, strong) NSString \* attachments_url;
@property (nonatomic, strong) NSString \* buckets_url;
@property (nonatomic, strong) NSString \* comments_url;
@property (nonatomic, strong) NSString \* likes_url;
@property (nonatomic, strong) NSString \* projects_url;
@property (nonatomic, strong) NSString \* rebounds_url;
@property (nonatomic, strong) NSArray \* tags;
@property (nonatomic, strong) USER \* user;
@property (nonatomic, strong) TEAM \* team;
@end
",iphilcc,interface
3415,2016-04-07 15:07:55,"@Kirow If it is like this?  This is a complete json object。
{
  ""html_url"" : ""https:\/\/dribbble.com\/shots\/2637319-Hello-Circular"",
  ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/projects"",
  ""team"" : {
    ""html_url"" : ""https:\/\/dribbble.com\/Spotify"",
    ""location"" : ""Stockholm \/\/ New York \/\/ London"",
    ""pro"" : false,
    ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/projects"",
    ""following_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/following"",
    ""projects_count"" : 0,
    ""members_count"" : 20,
    ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/buckets"",
    ""updated_at"" : ""2016-04-07T07:23:47Z"",
    ""team_shots_url"" : ""https:\/\/api.dribbble.com\/v1\/teams\/181459\/shots"",
    ""shots_count"" : 22,
    ""rebounds_received_count"" : 4,
    ""bio"" : """",
    ""links"" : {
      ""web"" : ""http:\/\/www.spotify.com"",
      ""twitter"" : ""https:\/\/twitter.com\/spotifydesign""
    },
    ""name"" : ""Spotify"",
    ""avatar_url"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/181459\/avatars\/normal\/8c8e4552d7f149815586e2bf5a533872.jpg?1434458347"",
    ""can_upload_shot"" : true,
    ""type"" : ""Team"",
    ""shots_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/shots"",
    ""id"" : 181459,
    ""buckets_count"" : 0,
    ""members_url"" : ""https:\/\/api.dribbble.com\/v1\/teams\/181459\/members"",
    ""followers_count"" : 6526,
    ""likes_received_count"" : 576,
    ""likes_count"" : 8,
    ""followings_count"" : 15,
    ""created_at"" : ""2012-07-24T19:08:16Z"",
    ""followers_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/followers"",
    ""comments_received_count"" : 65,
    ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/181459\/likes"",
    ""username"" : ""Spotify""
  },
  ""title"" : ""Hello Circular."",
  ""tags"" : [
    ""brand"",
    ""circular"",
    ""design"",
    ""font"",
    ""spotify"",
    ""typeface"",
    ""ui""
  ],
  ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/buckets"",
  ""updated_at"" : ""2016-04-07T07:23:47Z"",
  ""animated"" : false,
  ""comments_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/comments"",
  ""comments_count"" : 17,
  ""images"" : {
    ""hidpi"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still.png"",
    ""teaser"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still_teaser.png"",
    ""normal"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/screenshots\/2637319\/still_1x.png""
  },
  ""attachments_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/attachments"",
  ""rebounds_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/rebounds"",
  ""id"" : 2637319,
  ""buckets_count"" : 8,
  ""attachments_count"" : 5,
  ""rebounds_count"" : 0,
  ""user"" : {
    ""html_url"" : ""https:\/\/dribbble.com\/hellostanley"",
    ""location"" : ""London \/ Stockholm"",
    ""pro"" : true,
    ""projects_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/projects"",
    ""following_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/following"",
    ""projects_count"" : 0,
    ""buckets_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/buckets"",
    ""updated_at"" : ""2016-04-07T08:16:36Z"",
    ""shots_count"" : 2,
    ""rebounds_received_count"" : 0,
    ""bio"" : ""British Designer living in Stockholm. Design Director <a href=\""https:\/\/dribbble.com\/Spotify\"">@Spotify<\/a>."",
    ""links"" : {
      ""web"" : ""http:\/\/www.hellostanley.com"",
      ""twitter"" : ""https:\/\/twitter.com\/hellostanley""
    },
    ""name"" : ""Stanley"",
    ""avatar_url"" : ""https:\/\/d13yacurqjgara.cloudfront.net\/users\/3883\/avatars\/normal\/8b2a042a54708a8be6036cdb7d4e4de3.jpg?1432991845"",
    ""can_upload_shot"" : true,
    ""type"" : ""Player"",
    ""shots_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/shots"",
    ""id"" : 3883,
    ""buckets_count"" : 0,
    ""teams_count"" : 1,
    ""teams_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/teams"",
    ""followers_count"" : 107,
    ""likes_received_count"" : 591,
    ""likes_count"" : 92,
    ""followings_count"" : 84,
    ""created_at"" : ""2010-08-03T10:25:47Z"",
    ""followers_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/followers"",
    ""comments_received_count"" : 26,
    ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/users\/3883\/likes"",
    ""username"" : ""hellostanley""
  },
  ""height"" : 300,
  ""width"" : 400,
  ""likes_count"" : 352,
  ""created_at"" : ""2016-04-07T07:16:02Z"",
  ""views_count"" : 4362,
  ""likes_url"" : ""https:\/\/api.dribbble.com\/v1\/shots\/2637319\/likes"",
  ""description"" : ""<p>Meet Circular, Spotify's new typeface. <\/p>\n\n<p>Circular is a friendly sans-serif with unmistakable character and universal appeal. Just the traits we were looking for when choosing a typeface. <\/p>\n\n<p>This update is a key part of the brand refresh we introduced last year, and we couldn't be more excited to be rolling it out. The update is now live on iOS and soon to be on Android and Desktop too. We think you’re going to get on really well.<\/p>\n\n<p>Looking forward to sharing more with you soon.<\/p>\n\n<p>—Spotify Design.<\/p>""
}

#class
@interface SHOT : RLMObject
@property (nonatomic, assign) NSInteger id;
@property (nonatomic, strong) NSString \* title;
@property (nonatomic, strong) NSString \* description;
@property (nonatomic, assign) NSInteger width;
@property (nonatomic, assign) NSInteger height;
@property (nonatomic, strong) IMAGE \* images;
@property (nonatomic, assign) NSInteger views_count;
@property (nonatomic, assign) NSInteger likes_count;
@property (nonatomic, assign) NSInteger comments_count;
@property (nonatomic, assign) NSInteger attachments_count;
@property (nonatomic, assign) NSInteger rebounds_count;
@property (nonatomic, assign) NSInteger buckets_count;
@property (nonatomic, strong) NSDate \* created_at;
@property (nonatomic, strong) NSDate \* updated_at;
@property (nonatomic, strong) NSString \* html_url;
@property (nonatomic, strong) NSString \* attachments_url;
@property (nonatomic, strong) NSString \* buckets_url;
@property (nonatomic, strong) NSString \* comments_url;
@property (nonatomic, strong) NSString \* likes_url;
@property (nonatomic, strong) NSString \* projects_url;
@property (nonatomic, strong) NSString \* rebounds_url;
@property (nonatomic, strong) NSArray \* tags;
@property (nonatomic, strong) USER \* user;
@property (nonatomic, strong) TEAM \* team;
@end
",iphilcc,property
3415,2016-04-13 16:42:43,"@i-phil: I'm going to close this issue now. From your last message it looks like you found a way to resolve your question?
Thanks again @Kirow for your overwhelming assistance here.
",mrackwitz,i-phil
3412,2016-04-20 00:34:33,"From the backtrace it looks like `RealmCoordinator::advance_to_ready` is trying to ""advance"" to an older version. @tgoyne, any ideas?
",bdash,tgoyne
3411,2016-04-06 08:55:03,"I noticed this while I was making an example app to demonstrate the fine-grained notification API.

This PR adds a `LaunchScreen.storyboard` file and the appropriate configurations to every Objective-C and Swift example app that we have. This allows the apps to properly accomodate the various iOS device screen sizes, and does away with any blurry upscaling we may have previously had.

/cc @jpsim @mrackwitz
",TimOliver,mrackwitz
3411,2016-04-06 08:55:03,"I noticed this while I was making an example app to demonstrate the fine-grained notification API.

This PR adds a `LaunchScreen.storyboard` file and the appropriate configurations to every Objective-C and Swift example app that we have. This allows the apps to properly accomodate the various iOS device screen sizes, and does away with any blurry upscaling we may have previously had.

/cc @jpsim @mrackwitz
",TimOliver,jpsim
3401,2016-03-29 23:49:36,"Closes #3324. /cc @tgoyne @bdash @icanzilb
",jpsim,icanzilb
3401,2016-03-29 23:49:36,"Closes #3324. /cc @tgoyne @bdash @icanzilb
",jpsim,tgoyne
3401,2016-03-29 23:49:36,"Closes #3324. /cc @tgoyne @bdash @icanzilb
",jpsim,bdash
3400,2016-03-29 23:24:16,"Closes #3177. /cc @tgoyne @bdash
",jpsim,tgoyne
3400,2016-03-29 23:24:16,"Closes #3177. /cc @tgoyne @bdash
",jpsim,bdash
3399,2016-03-29 23:04:06,"Closes #3396. /cc @tgoyne @bdash 

I also think it would make sense to move `RLMRealm.schema` to `RLMRealmConfiguration.schema` (renaming `customSchema` to `schema` in the process), but that's a bit more involved so I want to make sure we agree it's a good idea before I go down that path.

To do:
- [x] Determine if we should move `RLMRealm.schema` to `RLMRealmConfiguration.schema`
- [x] Reflect these deprecations in Realm Swift
",jpsim,tgoyne
3399,2016-03-29 23:04:06,"Closes #3396. /cc @tgoyne @bdash 

I also think it would make sense to move `RLMRealm.schema` to `RLMRealmConfiguration.schema` (renaming `customSchema` to `schema` in the process), but that's a bit more involved so I want to make sure we agree it's a good idea before I go down that path.

To do:
- [x] Determine if we should move `RLMRealm.schema` to `RLMRealmConfiguration.schema`
- [x] Reflect these deprecations in Realm Swift
",jpsim,bdash
3399,2016-04-14 16:56:30,"Please review @tgoyne @bdash 
",jpsim,bdash
3399,2016-04-14 20:57:58,"@bdash comments explaining use of deprecated property added
",jpsim,bdash
3397,2016-03-29 21:33:02,"otherwise, linting RealmSwift.podspec may not find the current version of the Realm podspec. /cc @bdash @tgoyne
",jpsim,bdash
3397,2016-03-29 21:33:02,"otherwise, linting RealmSwift.podspec may not find the current version of the Realm podspec. /cc @bdash @tgoyne
",jpsim,tgoyne
3389,2016-03-29 06:53:22,"Disable update checker and analytics if running in the playground.
Because network access is failed in the playground. It also logs some warnings in console.



Suppress the warnings since users will misunderstand that error occurred.

CC @jpsim @mrackwitz
",kishikawakatsumi,mrackwitz
3389,2016-03-29 06:53:22,"Disable update checker and analytics if running in the playground.
Because network access is failed in the playground. It also logs some warnings in console.



Suppress the warnings since users will misunderstand that error occurred.

CC @jpsim @mrackwitz
",kishikawakatsumi,jpsim
3384,2016-04-23 07:04:24,"+1
This is the only use case that I have come across, that current workarounds to lack of distinct query don't solve in a good way.

To add to the feedback provided by @TiagoVeloso..

I would expect the proposed `RLMGroupedResults` not to contain any empty group, i.e. each of the array values in the key-value pairs of the proposed dictionary structure should contain at least one object.

Further, each key should be unique, i.e. no two keys in the group should be considered equal (using `isEqual:` or the like).

Since it has not already been stated.. I would expect it to resemble an _ordered_ dictionary. 
Ability to sort the keys would be essential, so would the ability to filter.

Fine-grain notifications can take an approach similar to Apple's `NSFetchedResutlsController`. Provide information about which sections were inserted/moved/updated/deleted with the section's index, and only provide indexPaths for inserted/updated/deleted objects contained within array values.

As for how this would work with `RLMCollection`/`RealmCollectionType`.. Just an idea/thought: Apple's  `NSFetchedResutlsController` has a `fetchedObjects` property which returns an `NSArray`, similarly `RLMGroupedResults` (or `RLMResultsGroup`) can have a `containedResults` property which could return an `RLMResults` (which already conforms to said protocols).
",kunalsood,TiagoVeloso
3381,2016-05-10 17:03:22,"I've a similar request as we've seen inconsistent (even dangerous) behavior because we lack this ability to deep-copy an object graph in RealmCocoa like we can do in Java using `copyFromRealm`.

_(dangerous because one can then modify the persisted Realm… even from a detached, standalone object, simply by traversing a relationship)_

@jpsim typical use case if that helps you understand the need for this:



`standalonePerson.realm` is nil once detached from the Realm, but `standalonePerson.dog` isn't detached, so the dog gets modified in the DB even if the `Person` _is_ detached from the DB

---

_Extract of a discussion with @bdash on Slack on the subject:_

> [bdash] Java’s `copyFromRealm()` is an eager deep copy. Cocoa’s `init(value:)` is a shallow copy.
> …
> [bdash] Yes, I believe `standalonePerson.dog` will still be a persisted object and thus will still be modified.
> [bdash] I don’t think `init(value:)` was ever intended as a copy operation, but as a way to initialize an object from a dictionary or array like you’d get from JSON.
> However, that does mean we’re lacking a means of creating a detached copy of an object graph…
> 
> [alisoftware] So what would be the equivalent of Java's `copyFromRealm` in Swift?
> Typical situation: imagine a Contacts app, with `Person` objects each containing an `Address` property.
> First screen is the list of contacts, tap on one opens a modal to let you modify the person and its address, with ""Cancel"" vs. ""Validate"" buttons on top
> 
> **Typical workflow I'd use in this situation is to make a standalone copy of the `Person` to pass it to the editing modal, then use that standalone copy as the DataSource of the editing TableView to fill the various EditField cells etc… then if the user hits Cancel we drop that `Person` and if they hit ""Validate"" then we call the WebService, wait for the 200 OK, then on success save the modified, standalone `Person` back in the DB (using `updating:true`)**
> 
> The idea of doing it this way is that we somehow work on a ""snapshot"" of the `Person` during the edition step and while the WebService serializes to JSON and send the request, instead of risking it to auto-update (due to a change in another thread) during the whole process. Does that make sense?
> 
> **But then if we do that, then we do have an issue with `person.address` not being detached and risking to auto-update, despite `person` being detached** :confused:
> 
> [bdash] Yes, I can see why it’s desirable
",AliSoftware,bdash
3379,2016-03-25 19:57:40,"Fixes #3319.

/cc @tgoyne 

This is working around a core issue (realm/realm-core#1565). It gives correct results for calls to `indexOfObjectWithPredicate:` at the expense of making them do more work (potentially a lot more), even in cases that aren't affected by the bug. I'm not sure if that's a good tradeoff for us to ship, but it may prove useful to anyone that is affected by #3319.
",bdash,tgoyne
3377,2016-03-25 15:10:10,"## Goals

I'm facing unexpected exception in a simple case with @Alamofire (see code below)
## Description

I want to fetch data for some entity that I want to update in my database. First, I get an instance by its primary key on the db serial queue, then I call the `fetch()` method for this instance. Response is getting handled on the same queue but when I try to access `self.html` I get the 'Realm accessed from incorrect thread' exception.
## Code Sample


## Version of Realm and Tooling

ProductName:    Mac OS X
ProductVersion: 10.11.4
BuildVersion:   15E65

/Applications/Xcode.app/Contents/Developer
Xcode 7.3
Build version 7D175

~/.gem/ruby/2.0.0/bin/pod
0.39.0
Realm (0.98.6)
RealmSwift (0.98.6)

/bin/bash
GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin15)

(not in use here)

/usr/bin/git
git version 2.6.4 (Apple Git-63)
",intrigua,Alamofire
3369,2016-03-24 00:57:20,"@jpsim, @tgoyne and @bdash I wanted to get the ball rolling on this and leave it up to the smarter minds to shape direction.

Questions I pose to you:
1. What do you think about the API design?
2. Am I missing something for `RLMResults`?
3. I assume this can be refactored further into the object store?

Haven't touched Swift since I assume more changes will come.
",bigfish24,jpsim
3369,2016-03-24 00:57:20,"@jpsim, @tgoyne and @bdash I wanted to get the ball rolling on this and leave it up to the smarter minds to shape direction.

Questions I pose to you:
1. What do you think about the API design?
2. Am I missing something for `RLMResults`?
3. I assume this can be refactored further into the object store?

Haven't touched Swift since I assume more changes will come.
",bigfish24,tgoyne
3369,2016-03-24 00:57:20,"@jpsim, @tgoyne and @bdash I wanted to get the ball rolling on this and leave it up to the smarter minds to shape direction.

Questions I pose to you:
1. What do you think about the API design?
2. Am I missing something for `RLMResults`?
3. I assume this can be refactored further into the object store?

Haven't touched Swift since I assume more changes will come.
",bigfish24,bdash
3367,2016-03-24 05:58:21,"@jpsim's comment in #3355 goes into why you're seeing this error, and what you can do to work around it. It boils down to having Carthage build Realm from source rather than using pre-built binaries, as pre-built binaries of Swift frameworks require that you're using the same version of Xcode that a Realm release was built with.
",bdash,jpsim
3364,2016-03-23 15:54:49,"@jpsim's comment in #3355 goes into why you're seeing this error, and what you can do to work around it. It boils down to having Carthage build Realm from source rather than using pre-built binaries, as pre-built binaries of Swift frameworks require that you're using the same version of Xcode that a Realm release was built with.
",bdash,jpsim
3360,2016-03-22 22:40:46,"Fixes #2574. @tgoyne @bdash
",jpsim,tgoyne
3360,2016-03-22 22:40:46,"Fixes #2574. @tgoyne @bdash
",jpsim,bdash
3360,2016-03-31 20:59:05,"> 1: The ""deleted"" properties are accessible on objects from the new version within the migration block.

This can be addressed by renaming the columns of deleted properties to a unique ID at the start of the migration, and maintain a map of names/uuids to use in the renaming operation.

> 2: Renaming a property then later introducing a new property with the old name doesn't look like it'll work.

I think it's necessary to remove all new schema validation altogether because of this, and other multi-version schema change scenarios.

> 3: Renaming the same property multiple times over the lifetime of a schema doesn't look like it'll work.

How about falling back to looking up the property by name in the new Realm? This would allow the following scenarios:



---

I'd like to get feedback on those changes before implementing them /cc @bdash @tgoyne.

Overall, a ""simple"" operation like renaming a property is complicated by not tracking intermediate schema changes. Other migration operations are also blocked on this design decision.
",jpsim,tgoyne
3360,2016-04-26 16:05:22,"Latest feedback and issues from @bdash have now been addressed, so this is once again ready for review @tgoyne @bdash 
",jpsim,tgoyne
3360,2016-05-05 17:48:49,"It'd be great to get this in the next release. Let me know if you have any concerns over this @tgoyne @bdash 
",jpsim,tgoyne
3358,2016-03-22 20:48:26,"This is a duplicate of #3355. Please take a look at @jpsim's comments in that issue for information about why this is happening, and what you can do to avoid it.
",bdash,jpsim
3357,2016-03-29 02:26:50,"@tgoyne @bdash and I just discussed this offline and although the concept of making things more type-safe seemed good at first glance, in practice this ends up increasing the API footprint without much practical gain. Ultimately, I don't think this is a worthwhile addition, sorry.
",jpsim,tgoyne
3357,2016-03-29 02:26:50,"@tgoyne @bdash and I just discussed this offline and although the concept of making things more type-safe seemed good at first glance, in practice this ends up increasing the API footprint without much practical gain. Ultimately, I don't think this is a worthwhile addition, sorry.
",jpsim,bdash
3355,2016-03-22 16:18:04,"Apple is quite clear about [Swift's binary compatibility guarantees](https://developer.apple.com/swift/blog/?id=2). You should not mix Swift code compiled with different versions of Swift, as there is no guarantee for binary compatibility. We're in the process of upgrading our CI infrastructure to use El Capitan and Xcode 7.3 and will be cutting new binary releases when that process is complete. Until then, to use Realm Swift with Xcode 7.3, please build it from source using CocoaPods, Carthage with `carthage update --no-use-binaries` or Xcode subprojects.

**edit:** updated Carthage command. Thanks @kishikawakatsumi!
",jpsim,kishikawakatsumi
3352,2016-03-21 22:05:39,"## Goals

I'd like to gracefully handle Realm transaction errors in Swift, and prevent the app from crashing due to exceptions raised in ObjC code.
## Expected Results

I'd expect the following code to raise an exception that is able to be caught.


## Actual Results

The exception is `@throw`n in Obj-C code, which Swift cannot handle. As a result, the app crashes rather than catching the thrown exception and handling it accordingly.


## Steps to Reproduce
1. Set up a write transaction
2. Wrap it in a `try` block as necessary because `write` `throws`.
3. Perform a transaction that will `@throw` an ObjC exception, like deleting an object that doesn't exist in the Realm
4. App crashes due to uncaught exception, even though the entire operation is wrapped in a `try` block
## Code Sample

I've provided a demo app at https://github.com/feighter09/RealmExceptionDemo
## Version of Realm and Tooling

Tested first on Realm `0.96.0`, then upgraded to `0.98.5`. Both were affected
XCode 7.2.1
Cocoapods 0.38.2
## Recommended Path to Happiness

Swift has built in support for error handling by `NSError **`. While I know that `NSError **` is the root of all ObjC evil, it is more aligned with the idioms of ObjC than the `@throw` directive. 
Further, `@throw` is more typically used for operations in which there is no path of recovery, eg `performSelector` has no valid recipient. From Realm's perspective, there's no path to recovery, but the caller has several options for how to handle a failed Realm transaction.
",feighter09,throw
3342,2016-03-17 10:04:44,"Indexing BOOL/Bool and NSDate properties have been supported from v0.97.1.

Closes https://github.com/realm/realm-cocoa/issues/3339

CC @jpsim @mrackwitz
",kishikawakatsumi,mrackwitz
3342,2016-03-17 10:04:44,"Indexing BOOL/Bool and NSDate properties have been supported from v0.97.1.

Closes https://github.com/realm/realm-cocoa/issues/3339

CC @jpsim @mrackwitz
",kishikawakatsumi,jpsim
3333,2016-03-15 14:49:22,"It allows complementing block parameter names by code completion.
### Before

<img width=""657"" alt=""screen shot 2016-03-15 at 23 46 35"" src=""https://cloud.githubusercontent.com/assets/40610/13781921/591d950a-eb08-11e5-959b-e672a9107076.png"">
<img width=""644"" alt=""screen shot 2016-03-15 at 23 46 39"" src=""https://cloud.githubusercontent.com/assets/40610/13781922/5b765030-eb08-11e5-9098-42d92bf73aa0.png"">
### After

<img width=""745"" alt=""screen shot 2016-03-15 at 23 45 25"" src=""https://cloud.githubusercontent.com/assets/40610/13781928/6706b3ea-eb08-11e5-872f-07076f92fc84.png"">
<img width=""536"" alt=""screen shot 2016-03-15 at 23 45 39"" src=""https://cloud.githubusercontent.com/assets/40610/13781931/6a15b252-eb08-11e5-9de4-98dfb50c6117.png"">

CC @jpsim @mrackwitz
",kishikawakatsumi,mrackwitz
3333,2016-03-15 14:49:22,"It allows complementing block parameter names by code completion.
### Before

<img width=""657"" alt=""screen shot 2016-03-15 at 23 46 35"" src=""https://cloud.githubusercontent.com/assets/40610/13781921/591d950a-eb08-11e5-959b-e672a9107076.png"">
<img width=""644"" alt=""screen shot 2016-03-15 at 23 46 39"" src=""https://cloud.githubusercontent.com/assets/40610/13781922/5b765030-eb08-11e5-9098-42d92bf73aa0.png"">
### After

<img width=""745"" alt=""screen shot 2016-03-15 at 23 45 25"" src=""https://cloud.githubusercontent.com/assets/40610/13781928/6706b3ea-eb08-11e5-872f-07076f92fc84.png"">
<img width=""536"" alt=""screen shot 2016-03-15 at 23 45 39"" src=""https://cloud.githubusercontent.com/assets/40610/13781931/6a15b252-eb08-11e5-9de4-98dfb50c6117.png"">

CC @jpsim @mrackwitz
",kishikawakatsumi,jpsim
3331,2016-03-14 22:37:25,"## Goals

Create a default Realm instance.
## Expected Results

A default Realm instance is created without crashing.
## Actual Results

When I try to create the default Realm instance, I experience a crash on my iPhone 4s test device (not using simulator) perhaps related to being a 32-bit device.
#0  0x25ae7c78 in OSAtomicCompareAndSwap64Barrier$VARIANT$mp ()
#1  0x25aec7c6 in _pthread_cond_signal ()
#2  0x002012ba in realm::SharedGroup::low_level_commit(unsigned long long) ()
#3  0x00200e74 in realm::SharedGroup::do_commit() ()
#4  0x002014a2 in realm::SharedGroup::commit_and_continue_as_read() ()
#5  0x00143ea2 in realm::_impl::SharedGroupFriend::commit_and_continue_as_read(realm::SharedGroup&) [inlined] at /Users/realm/workspace/objc_ios/tightdb_objc/core/include/realm/group_shared.hpp:1108
#6  0x00143e9e in realm::LangBindHelper::commit_and_continue_as_read(realm::SharedGroup&) [inlined] at /Users/realm/workspace/objc_ios/tightdb_objc/core/include/realm/lang_bind_helper.hpp:372
#7  0x00143e9e in realm::_impl::transaction::commit(realm::SharedGroup&, realm::BindingContext*) at /Users/realm/workspace/objc_ios/tightdb_objc/Realm/ObjectStore/impl/transact_log_handler.cpp:451
#8  0x00141d28 in realm::Realm::commit_transaction() at /Users/realm/workspace/objc_ios/tightdb_objc/Realm/ObjectStore/shared_realm.cpp:318
#9  0x00141772 in realm::Realm::update_schema(std::__1::unique_ptr<realm::Schema, std::__1::default_delete<realm::Schema> >, unsigned long long) at /Users/realm/workspace/objc_ios/tightdb_objc/Realm/ObjectStore/shared_realm.cpp:254
#10 0x0012bcf0 in +[RLMRealm realmWithConfiguration:error:] at /Users/realm/workspace/objc_ios/tightdb_objc/Realm/RLMRealm.mm:374
#11 0x0012a8fc in +[RLMRealm defaultRealm] at /Users/realm/workspace/objc_ios/tightdb_objc/Realm/RLMRealm.mm:162
#12 0x0009b0aa in -[ViewController viewDidLoad] at /Users/mitch/Documents/Personal/Moto/test/RealmTest/RealmTest/ViewController.m:22
## Steps to Reproduce
1. Create new Single View Application project in Xcode
2. Follow Realm's 'Getting Started' instructions for Static Framework use (same issue experienced with Dynamic Framework)
3. Try and create default Realm instance in viewDidLoad
## Code Sample

this is all my code:

@implementation ViewController

RLMRealm\* realmInstance;
- (void)viewDidLoad {
  [super viewDidLoad];
  
  realmInstance = [RLMRealm defaultRealm];
  }

@end
## Version of Realm and Tooling

Realm: 0.98.4
Xcode: 7.2
OS X: 10.10.5
Device: iOS 9.2.1 on iPhone 4s
",mitchctodd,implementation
3331,2016-03-14 22:37:25,"## Goals

Create a default Realm instance.
## Expected Results

A default Realm instance is created without crashing.
## Actual Results

When I try to create the default Realm instance, I experience a crash on my iPhone 4s test device (not using simulator) perhaps related to being a 32-bit device.
#0  0x25ae7c78 in OSAtomicCompareAndSwap64Barrier$VARIANT$mp ()
#1  0x25aec7c6 in _pthread_cond_signal ()
#2  0x002012ba in realm::SharedGroup::low_level_commit(unsigned long long) ()
#3  0x00200e74 in realm::SharedGroup::do_commit() ()
#4  0x002014a2 in realm::SharedGroup::commit_and_continue_as_read() ()
#5  0x00143ea2 in realm::_impl::SharedGroupFriend::commit_and_continue_as_read(realm::SharedGroup&) [inlined] at /Users/realm/workspace/objc_ios/tightdb_objc/core/include/realm/group_shared.hpp:1108
#6  0x00143e9e in realm::LangBindHelper::commit_and_continue_as_read(realm::SharedGroup&) [inlined] at /Users/realm/workspace/objc_ios/tightdb_objc/core/include/realm/lang_bind_helper.hpp:372
#7  0x00143e9e in realm::_impl::transaction::commit(realm::SharedGroup&, realm::BindingContext*) at /Users/realm/workspace/objc_ios/tightdb_objc/Realm/ObjectStore/impl/transact_log_handler.cpp:451
#8  0x00141d28 in realm::Realm::commit_transaction() at /Users/realm/workspace/objc_ios/tightdb_objc/Realm/ObjectStore/shared_realm.cpp:318
#9  0x00141772 in realm::Realm::update_schema(std::__1::unique_ptr<realm::Schema, std::__1::default_delete<realm::Schema> >, unsigned long long) at /Users/realm/workspace/objc_ios/tightdb_objc/Realm/ObjectStore/shared_realm.cpp:254
#10 0x0012bcf0 in +[RLMRealm realmWithConfiguration:error:] at /Users/realm/workspace/objc_ios/tightdb_objc/Realm/RLMRealm.mm:374
#11 0x0012a8fc in +[RLMRealm defaultRealm] at /Users/realm/workspace/objc_ios/tightdb_objc/Realm/RLMRealm.mm:162
#12 0x0009b0aa in -[ViewController viewDidLoad] at /Users/mitch/Documents/Personal/Moto/test/RealmTest/RealmTest/ViewController.m:22
## Steps to Reproduce
1. Create new Single View Application project in Xcode
2. Follow Realm's 'Getting Started' instructions for Static Framework use (same issue experienced with Dynamic Framework)
3. Try and create default Realm instance in viewDidLoad
## Code Sample

this is all my code:

@implementation ViewController

RLMRealm\* realmInstance;
- (void)viewDidLoad {
  [super viewDidLoad];
  
  realmInstance = [RLMRealm defaultRealm];
  }

@end
## Version of Realm and Tooling

Realm: 0.98.4
Xcode: 7.2
OS X: 10.10.5
Device: iOS 9.2.1 on iPhone 4s
",mitchctodd,end
3330,2016-03-14 20:40:01,"/cc @jpsim @tgoyne 
",bdash,jpsim
3330,2016-03-14 20:40:01,"/cc @jpsim @tgoyne 
",bdash,tgoyne
3323,2016-04-13 15:39:56,"@OlegAnghelov Hi Oleg! We're maintaining a list of the previous Browser versions on its release page: https://github.com/realm/realm-browser-osx/releases

How far back do you need exactly?
",TimOliver,OlegAnghelov
3323,2016-04-14 12:34:40,"@OlegAnghelov Ahh okay then!

Uh-oh. Really? Which version of the Browser were you using for that? 0.98.6? Or 0.98.1?
",TimOliver,OlegAnghelov
3322,2016-03-13 12:32:29,"Could you share some related code from your model, so that we can assist you easier? /c @beeender 
",mrackwitz,beeender
3320,2016-03-12 06:15:17,"I am using Realm (0.98.4)
iOS 9.2 SDK
Xcode 7.2.1
Swift

My app is crashing the first time I attempt to open a realm.  But it is only happening so far on my iPhone 5.  On the iPhone 6 the app works perfectly.

Here is code:

..... In the App Delegate .....



.... And in the initial Table View ....



The exception is happening in this code



Here's the contents of sg:



Here's the trace:

Thread 1Queue : com.apple.main-thread (serial)
#0  0x38800fe0 in OSAtomicCompareAndSwap64Barrier ()
#1  0x38805b92 in _pthread_cond_signal ()
#2  0x0147815a in realm::SharedGroup::low_level_commit(unsigned long long) ()
#3  0x01477d14 in realm::SharedGroup::do_commit() ()
#4  0x01478342 in realm::SharedGroup::commit_and_continue_as_read() ()
#5  0x013addca in realm::_impl::SharedGroupFriend::commit_and_continue_as_read(realm::SharedGroup&) at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/include/core/realm/group_shared.hpp:1108
#6  0x013addb6 in realm::LangBindHelper::commit_and_continue_as_read(realm::SharedGroup&) at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/include/core/realm/lang_bind_helper.hpp:372
#7  0x013a7546 in realm::_impl::transaction::commit(realm::SharedGroup&, realm::BindingContext*) at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/Realm/ObjectStore/impl/transact_log_handler.cpp:451
#8  0x013a3018 in realm::Realm::commit_transaction() at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/Realm/ObjectStore/shared_realm.cpp:318
#9  0x013a234e in realm::Realm::update_schema(std::__1::unique_ptr<realm::Schema, std::__1::default_delete<realm::Schema> >, unsigned long long) at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/Realm/ObjectStore/shared_realm.cpp:254
#10 0x0137fbba in +[RLMRealm realmWithConfiguration:error:] at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/Realm/RLMRealm.mm:374
#11 0x017a0b80 in @nonobjc RLMRealm.__allocating_init(configuration : RLMRealmConfiguration) throws -> RLMRealm ()
#12 0x0179c6f8 in Realm.init(configuration : Realm.Configuration) throws -> Realm at /Users/christopherhodges/Development/voiceflicks/Pods/RealmSwift/RealmSwift/Realm.swift:75
#13 0x0179cb78 in Realm.__allocating_init(configuration : Realm.Configuration) throws -> Realm ()
#14 0x00019880 in VoiceflicksTableViewController.viewDidLoad() -> () at /Users/christopherhodges/Development/voiceflicks/voiceflicks/VoiceflicksTableViewController.swift:27
#15 0x0001996c in @objc VoiceflicksTableViewController.viewDidLoad() -> () ()
#16 0x2aa8922e in -[UIViewController loadViewIfRequired]()
#17 0x2ab4358e in -[UINavigationController _layoutViewController:]()
#18 0x2ab43488 in -[UINavigationController _updateScrollViewFromViewController:toViewController:]()
#19 0x2ab4282c in -[UINavigationController _startTransition:fromViewController:toViewController:]()
#20 0x2ab4247e in -[UINavigationController _startDeferredTransitionIfNeeded:]()
#21 0x2ab420c4 in -[UINavigationController __viewWillLayoutSubviews]()
#22 0x2ab4203e in -[UILayoutContainerView layoutSubviews]()
#23 0x2aa8539a in -[UIView(CALayerDelegate) layoutSublayersOfLayer:]()
#24 0x2a35667c in -[CALayer layoutSublayers]()
#25 0x2a351d78 in CA::Layer::layout_if_needed(CA::Transaction*) ()
#26 0x2a351c08 in CA::Layer::layout_and_display_if_needed(CA::Transaction*) ()
#27 0x2a351128 in CA::Context::commit_transaction(CA::Transaction*) ()
#28 0x2a350dea in CA::Transaction::commit() ()
#29 0x2a34a5be in CA::Transaction::observer_callback(__CFRunLoopObserver_, unsigned long, void_) ()
#30 0x26975cd0 in **CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION** ()
#31 0x26973fc6 in __CFRunLoopDoObservers ()
#32 0x268c6da8 in CFRunLoopRunSpecific ()
#33 0x268c6b7c in CFRunLoopRunInMode ()
#34 0x2aaf4bde in -[UIApplication _run]()
#35 0x2aaef99c in UIApplicationMain ()
#36 0x00025f0c in main at /Users/christopherhodges/Development/voiceflicks/voiceflicks/AppDelegate.swift:17
",chodges,nonobjc
3320,2016-03-12 06:15:17,"I am using Realm (0.98.4)
iOS 9.2 SDK
Xcode 7.2.1
Swift

My app is crashing the first time I attempt to open a realm.  But it is only happening so far on my iPhone 5.  On the iPhone 6 the app works perfectly.

Here is code:

..... In the App Delegate .....



.... And in the initial Table View ....



The exception is happening in this code



Here's the contents of sg:



Here's the trace:

Thread 1Queue : com.apple.main-thread (serial)
#0  0x38800fe0 in OSAtomicCompareAndSwap64Barrier ()
#1  0x38805b92 in _pthread_cond_signal ()
#2  0x0147815a in realm::SharedGroup::low_level_commit(unsigned long long) ()
#3  0x01477d14 in realm::SharedGroup::do_commit() ()
#4  0x01478342 in realm::SharedGroup::commit_and_continue_as_read() ()
#5  0x013addca in realm::_impl::SharedGroupFriend::commit_and_continue_as_read(realm::SharedGroup&) at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/include/core/realm/group_shared.hpp:1108
#6  0x013addb6 in realm::LangBindHelper::commit_and_continue_as_read(realm::SharedGroup&) at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/include/core/realm/lang_bind_helper.hpp:372
#7  0x013a7546 in realm::_impl::transaction::commit(realm::SharedGroup&, realm::BindingContext*) at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/Realm/ObjectStore/impl/transact_log_handler.cpp:451
#8  0x013a3018 in realm::Realm::commit_transaction() at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/Realm/ObjectStore/shared_realm.cpp:318
#9  0x013a234e in realm::Realm::update_schema(std::__1::unique_ptr<realm::Schema, std::__1::default_delete<realm::Schema> >, unsigned long long) at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/Realm/ObjectStore/shared_realm.cpp:254
#10 0x0137fbba in +[RLMRealm realmWithConfiguration:error:] at /Users/christopherhodges/Development/voiceflicks/Pods/Realm/Realm/RLMRealm.mm:374
#11 0x017a0b80 in @nonobjc RLMRealm.__allocating_init(configuration : RLMRealmConfiguration) throws -> RLMRealm ()
#12 0x0179c6f8 in Realm.init(configuration : Realm.Configuration) throws -> Realm at /Users/christopherhodges/Development/voiceflicks/Pods/RealmSwift/RealmSwift/Realm.swift:75
#13 0x0179cb78 in Realm.__allocating_init(configuration : Realm.Configuration) throws -> Realm ()
#14 0x00019880 in VoiceflicksTableViewController.viewDidLoad() -> () at /Users/christopherhodges/Development/voiceflicks/voiceflicks/VoiceflicksTableViewController.swift:27
#15 0x0001996c in @objc VoiceflicksTableViewController.viewDidLoad() -> () ()
#16 0x2aa8922e in -[UIViewController loadViewIfRequired]()
#17 0x2ab4358e in -[UINavigationController _layoutViewController:]()
#18 0x2ab43488 in -[UINavigationController _updateScrollViewFromViewController:toViewController:]()
#19 0x2ab4282c in -[UINavigationController _startTransition:fromViewController:toViewController:]()
#20 0x2ab4247e in -[UINavigationController _startDeferredTransitionIfNeeded:]()
#21 0x2ab420c4 in -[UINavigationController __viewWillLayoutSubviews]()
#22 0x2ab4203e in -[UILayoutContainerView layoutSubviews]()
#23 0x2aa8539a in -[UIView(CALayerDelegate) layoutSublayersOfLayer:]()
#24 0x2a35667c in -[CALayer layoutSublayers]()
#25 0x2a351d78 in CA::Layer::layout_if_needed(CA::Transaction*) ()
#26 0x2a351c08 in CA::Layer::layout_and_display_if_needed(CA::Transaction*) ()
#27 0x2a351128 in CA::Context::commit_transaction(CA::Transaction*) ()
#28 0x2a350dea in CA::Transaction::commit() ()
#29 0x2a34a5be in CA::Transaction::observer_callback(__CFRunLoopObserver_, unsigned long, void_) ()
#30 0x26975cd0 in **CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION** ()
#31 0x26973fc6 in __CFRunLoopDoObservers ()
#32 0x268c6da8 in CFRunLoopRunSpecific ()
#33 0x268c6b7c in CFRunLoopRunInMode ()
#34 0x2aaf4bde in -[UIApplication _run]()
#35 0x2aaef99c in UIApplicationMain ()
#36 0x00025f0c in main at /Users/christopherhodges/Development/voiceflicks/voiceflicks/AppDelegate.swift:17
",chodges,objc
3318,2016-03-11 22:31:07,"This will lint all podspecs (`Realm.podspec` & `RealmSwift.podspec`) /cc @bdash
",jpsim,bdash
3315,2016-03-11 18:22:25,"Are you sure you're using 0.98.**4** and you didn't had the prior patch release integrated, so that the build products might be stilled cached? Because the latest release should have addressed some crashes like that. If so, any chances that you could provide us code, which allows to reproduce this crash? (You can share files privately with us to help@realm.io.) /c @bdash 
",mrackwitz,bdash
3308,2016-03-12 01:10:27,"@AndrewBarba we're not asking that you set `NSFileProtectionNone` in your app's entitlements but rather set that as file attributes for your Realm file's parent directory.

@TimOliver has been working on some documentation around this, but it's not live yet on our site since it's still pending review, but I'll post it here because I think it would be useful to you:

### Using Realm with Background App Refresh

On iOS 8 and above, files inside apps are automatically encrypted using [`NSFileProtection`](https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSFileManager_Class/index.html#//apple_ref/doc/constant_group/File_Protection_Values) whenever the device is locked. If your app attempts to do any work involving Realm while the device is locked and its parent directory isn't set to `NSFileProtectionNone`, an `open() failed: Operation not permitted` exception will be thrown.

To avoid this, it is necessary to ensure the `NSFileProtectionNone` file protection attribute is applied to both the Realm file itself and its [auxiliary files](https://realm.io/docs/swift/latest#auxiliary-realm-files). Since the auxiliary files can sometimes be lazily created and deleted mid-operation, it is recommended to apply the file protection attribute to the parent folder containing these Realm files to ensure the attribute is properly applied to all of them.



If your app contains other files for which you don't want to disable protection, we recommended that these Realm files be moved to their own separate directory.
",jpsim,TimOliver
3307,2016-03-14 22:23:31,"@bdash would you mind taking a look at this? I'm unable to reproduce this myself.
",jpsim,bdash
3307,2016-03-15 15:37:06,"@tg, do you have any thoughts on how to determine what's going on here? Would the thread sanitizer work for this sort of case?
",bdash,tg
3307,2016-03-15 15:46:29,"Sorry, @tg, tab completion failure! @tgoyne?
",bdash,tgoyne
3305,2016-03-09 18:00:03,"This is a follow up to investigations I did for #3185.

Even though something in that direction was brought up before by @kishikawakatsumi with #2514, which was finally rejected, I think what we currently have is problematic.

As seen in the second commit, it is currently possible to define an `Object` subclass, overwriting all initializers, which are declared as required, which perfectly compiles, whose object schema validates, but which can't be used universally at runtime as it e.g. fails when trying to access `valueForKey` on a `Results` collection of that object. The error in this case is:

> fatal error: use of unimplemented initializer 'init(realm:schema:)'

/c @jpsim @tgoyne
",mrackwitz,jpsim
3305,2016-03-09 18:00:03,"This is a follow up to investigations I did for #3185.

Even though something in that direction was brought up before by @kishikawakatsumi with #2514, which was finally rejected, I think what we currently have is problematic.

As seen in the second commit, it is currently possible to define an `Object` subclass, overwriting all initializers, which are declared as required, which perfectly compiles, whose object schema validates, but which can't be used universally at runtime as it e.g. fails when trying to access `valueForKey` on a `Results` collection of that object. The error in this case is:

> fatal error: use of unimplemented initializer 'init(realm:schema:)'

/c @jpsim @tgoyne
",mrackwitz,tgoyne
3305,2016-03-09 18:00:03,"This is a follow up to investigations I did for #3185.

Even though something in that direction was brought up before by @kishikawakatsumi with #2514, which was finally rejected, I think what we currently have is problematic.

As seen in the second commit, it is currently possible to define an `Object` subclass, overwriting all initializers, which are declared as required, which perfectly compiles, whose object schema validates, but which can't be used universally at runtime as it e.g. fails when trying to access `valueForKey` on a `Results` collection of that object. The error in this case is:

> fatal error: use of unimplemented initializer 'init(realm:schema:)'

/c @jpsim @tgoyne
",mrackwitz,kishikawakatsumi
3296,2016-04-05 14:04:59,"@jpsim: I saw that you added the label `T:Enhancement` here. Do we want to add this? Not sure, if it's worth it in the long-term. I think it would be confusing to have a method like that once a type with proper set semantics exists instead.
",mrackwitz,jpsim
3294,2016-03-04 16:50:01,"Added intro.
Removed some (obvious?) details.

@mrackwitz

Merge at will :-)
",bmunkholm,mrackwitz
3291,2016-03-04 06:49:50,"/cc @tgoyne @bdash 
",jpsim,tgoyne
3291,2016-03-04 06:49:50,"/cc @tgoyne @bdash 
",jpsim,bdash
3288,2016-03-03 22:18:13,"Based on @gwengrid's talk at the _try! Swift_ conference about type erasure, I realized that her implementation might have a few advantages over the approach we've previously taken.

The last commit is a breaking change and I'm not convinced it's exactly what we should do yet, so that should be up for discussion.

/cc @tgoyne @bdash 
",jpsim,tgoyne
3288,2016-03-03 22:18:13,"Based on @gwengrid's talk at the _try! Swift_ conference about type erasure, I realized that her implementation might have a few advantages over the approach we've previously taken.

The last commit is a breaking change and I'm not convinced it's exactly what we should do yet, so that should be up for discussion.

/cc @tgoyne @bdash 
",jpsim,bdash
3288,2016-03-03 22:18:13,"Based on @gwengrid's talk at the _try! Swift_ conference about type erasure, I realized that her implementation might have a few advantages over the approach we've previously taken.

The last commit is a breaking change and I'm not convinced it's exactly what we should do yet, so that should be up for discussion.

/cc @tgoyne @bdash 
",jpsim,gwengrid
3285,2016-03-04 14:23:13,"I guess [this comment](https://github.com/realm/realm-cocoa/issues/3279#issuecomment-192064973) should go here:

> as absolute paths changed , should reopen latest path default.realm in Realm Browser?

@TimOliver: Is that something which need to be addressed in the browser?
",mrackwitz,TimOliver
3271,2016-02-27 05:10:55,"The code snippet you provided works as-is for me (after reordering the `@interface` declarations so `SomeOtherModel` is declared before `SomeModel` uses it). I suspect that in the course of editing down your model for this bug report you inadvertently removed whatever it is that was causing the exception to be thrown. Have you verified that all of your `RLMObject` subclasses with a `MyCustomClass` property implement `+ignoredProperties` to ignore those properties?
",bdash,interface
3270,2016-04-14 17:44:11,"@tgoyne, this looks related to the `CachedRealm` stuff you introduced in the object store.
",bdash,tgoyne
3268,2016-02-25 18:38:31,"$TMPDIR isn't always available. Addresses #3258.

I don't think this should cause any issues with previous uses of `$TMPDIR` since it's the same value as `DARWIN_USER_TEMP_DIR` when set (in my limited testing).



/cc @bdash @mrackwitz 
",jpsim,mrackwitz
3268,2016-02-25 18:38:31,"$TMPDIR isn't always available. Addresses #3258.

I don't think this should cause any issues with previous uses of `$TMPDIR` since it's the same value as `DARWIN_USER_TEMP_DIR` when set (in my limited testing).



/cc @bdash @mrackwitz 
",jpsim,bdash
3267,2016-02-25 18:03:27,"fyi @mrackwitz 
",jpsim,mrackwitz
3266,2016-02-25 18:10:52,"Hi @uson1x, are there stack frames from other threads terminating with an assertion or uncaught exception? The ones you've shared do not, which would suggest that some other thread is causing this crash.

@tgoyne is it possible that this query isn't being properly handed over? The form `ANY link.property OR property OR property` might provide some hints as to what may not be fully handover-supported.
",jpsim,tgoyne
3266,2016-02-25 18:17:17,"The crash is in building the Query from the NSPredicate, so it's long before any handover would occur. Both of the crashes are in converting the keypath to a link chain, so /ping @bdash 
",tgoyne,bdash
3261,2016-02-24 12:42:06,"### Goals

Try to use a new RLMObject to replace the old RLMObject, due to add new @property to save.
### Expected Results

Date saved in the new RLMObject in defaultRealm, and, can be read.
### Actual Results

Crash after this line (RLMCacheNew is the new RLMObject):
RLMResults \* results = [RLMCacheNew allObjects];

Xcode out put:

> libc++abi.dylib: terminate_handler unexpectedly threw an exception

Set breakpoint to that line:
LLDB log:

> Execution was interrupted, reason: internal c++ exception breakpoint(-2)..
> The process has been returned to the state before expression evaluation
### Steps to Reproduce

1.Make up a RLMObject A with 2 @property, save some data in defaultRealm.

2.Run the app again, make sure the RLMObject A's data can be read.

> RLMResults \* results = [RLMObjectA allObjects];
> results will be nil or not, what ever, it won't crash.

3.Create a new RLMObject B with 3 @property, different form A.

4.Run the app again, try to get allObjects first:

> RLMResults \* results = [RLMObjectB allObjects];

before save data in it, this is to see if there are data saved before to decide whether to load Data form server or use the data in RLMObject B as cache Data.

5.It will crash.
### Code Sample

> See ""Steps to Reproduce""
### Version of Realm and Tooling

Use cocoapods install, iOS 9, Realm version: 0.97.0
",icaics,property
3257,2016-04-19 13:50:24,"Did a walk through of the Cocoa API with @nhachicha, reviewing from his perspective from a Java binding developer. We found most of the actionable feedback to be done on the Java side. See this comment for his action items following the review: https://github.com/realm/realm-java/issues/1594#issuecomment-197904615

The cocoa team has identified a number of APIs that should be deprecated. See #3442, #2593, #1324, #3396 & #2849. Review of those deprecations will be delegated to those pull requests rather than this overarching ticket.

In a more general review of the Objective-C API, the biggest sore point in my opinion is the concept of a default Realm. `[RLMRealm defaultRealm]` offers no error handling, the shorthand default Realm methods add a heavy layer of duplication to the API, and finally the mutable default configuration has been a source of confusion and bugs for users.

However, so many users rely on the default Realm that it would be unwise to break it at this point in time. Might be worth considering an alternative with Realm 2.0 😉.

The migration & dynamic APIs are also ripe for improvements after a 1.0 release, but not urgent enough to invest before then.

The Swift API isn't burdened by most of the default Realm problems the Objective-C version has thanks to default parameter values, but the mutable default configuration might be worth deprecating post 1.0 too, since it really doesn't save all that much code in the Swift API compared to storing desired configurations in user-defined global variables.

---

All that to say that other than existing work to refine the API as outlined above, I don't think any further API refinements are necessary before a 1.0 release.
",jpsim,nhachicha
3253,2016-02-22 23:36:59,"It allows noticing that does not hold the `NotifiationToken` before execution.

<img width=""931"" alt=""screen shot 2016-02-23 at 08 34 44"" src=""https://cloud.githubusercontent.com/assets/40610/13236539/663ee178-da08-11e5-900a-8bf1ea5b3a12.png"">

@jpsim @mrackwitz  
",kishikawakatsumi,mrackwitz
3253,2016-02-22 23:36:59,"It allows noticing that does not hold the `NotifiationToken` before execution.

<img width=""931"" alt=""screen shot 2016-02-23 at 08 34 44"" src=""https://cloud.githubusercontent.com/assets/40610/13236539/663ee178-da08-11e5-900a-8bf1ea5b3a12.png"">

@jpsim @mrackwitz  
",kishikawakatsumi,jpsim
3245,2016-02-21 23:07:53,"Closes #2455. /cc @bdash @tgoyne 
",jpsim,bdash
3245,2016-02-21 23:07:53,"Closes #2455. /cc @bdash @tgoyne 
",jpsim,tgoyne
3244,2016-02-23 00:45:01,"This seems like something that may have changed as a result of @tgoyne's refactoring of Realm initialization into C++ code. @tgoyne, can you please take a look at this?
",bdash,tgoyne
3243,2016-02-21 21:13:48,"@hibento Have a look at ""Add support for cascading deletes"" https://github.com/realm/realm-cocoa/issues/1186 - it was updated about a month ago.
",hermanolsson,hibento
3242,2016-11-12 19:29:23,"Thanks for the explanation. Good to know Objectivec also support one.

This which I want to achieve with Realm so it behave like Parse PFObject. where the column/field can be added and remove realtime. Not sure if it is possible or not with Realm

# 

<PRE>
PFObject *gameScore = [PFObject objectWithClassName:@""GameScore""];
gameScore[@""score""] = @1337;
pgameScore[@""playerName""] = @""Sean Plott"";
gameScore[@""cheatMode""] = @NO;
[gameScore saveInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {
  if (succeeded) {
    // The object has been saved.
  } else {
    // There was a problem, check error.description
  }
}];
</PRE>

similar to this http://nikoyuwono.com/2016/01/12/realm-browser/ but in objectivec/swift
",steve21124,NO
3235,2016-02-17 23:49:53,"/cc @tgoyne @jpsim 
",bdash,jpsim
3235,2016-02-17 23:49:53,"/cc @tgoyne @jpsim 
",bdash,tgoyne
3228,2016-02-16 22:23:04,"in InvalidSchemaVersionException. Fixes #3113. /cc @tgoyne
",jpsim,tgoyne
3227,2016-02-22 11:15:40,"@tgoyne: As you made some modifications recently to our podspec to address this as well, you may have some thoughts to this?
",mrackwitz,tgoyne
3222,2016-02-16 14:46:09,"Closes https://github.com/realm/realm-cocoa/issues/1692
This PR depends on https://github.com/realm/realm-cocoa/pull/3221

Add `deleteRealmIfMigrationNeeded` configuration option. If the value of the property is `YES`, the Realm file will be deleted then re-create with a new schema when a migration is required.

If you increase schema version and set this flag to `YES`, migration will be executed (the file will not be deleted).

@tgoyne @jpsim 
",kishikawakatsumi,jpsim
3222,2016-02-16 14:46:09,"Closes https://github.com/realm/realm-cocoa/issues/1692
This PR depends on https://github.com/realm/realm-cocoa/pull/3221

Add `deleteRealmIfMigrationNeeded` configuration option. If the value of the property is `YES`, the Realm file will be deleted then re-create with a new schema when a migration is required.

If you increase schema version and set this flag to `YES`, migration will be executed (the file will not be deleted).

@tgoyne @jpsim 
",kishikawakatsumi,tgoyne
3222,2016-03-15 16:05:49,"@tgoyne @jpsim Clear the data on migration needed instead deleting the file. It was done within objectstore.
How does that look?
",kishikawakatsumi,jpsim
3222,2016-03-18 09:15:06,"@tgoyne @jpsim I implemented delete/re-create file in `ObjectStore::verify_schema()`. It works but dirty implementation. Could you please review it?
",kishikawakatsumi,jpsim
3222,2016-03-22 14:17:53,"@jpsim @tgoyne 

There are two places where schema validation will fail.
One is here: https://github.com/realm/realm-cocoa/blob/master/Realm/RLMRealm.mm#L350

It is in the `Realm::init` method that is called from `openSharedRealm` method.

Another is here: https://github.com/realm/realm-cocoa/blob/master/Realm/RLMRealm.mm#L374

The former is called when a schema is specified with `objectClasses`,  the latter is called when that the schema isn't specified.

The problem is, the latter is called directly from the Objective-C layer, so  it is difficult to handle deleting and re-creating the file. It is also difficult to replace the Realm instances within the method.

Also it is difficult to determine whether the caller is former or latter. 

Do you have any thoughts?
",kishikawakatsumi,jpsim
3222,2016-04-15 18:45:48,"@tgoyne @bdash 

I need your advice. What do you think I should do?

It seems difficult for me that deleting Realm file when migration is needed is done within the ObjectStore code.

Schema validations are done in two places. 
The former is done during the initialization of the Realm instance. It is difficult to re-create Realm instance in this timing since the initialization method has an exclusive lock.

The latter is done much after the Realm was instantiated. So it needs to return the method to the Objective-C++ code to release and re-create Realm instance.
",kishikawakatsumi,bdash
3222,2016-04-26 06:45:26,"Talked with @jpsim, we adopt https://github.com/realm/realm-cocoa/pull/3463 approach for now, for less affected existing code.
",kishikawakatsumi,jpsim
3221,2016-02-16 13:43:58,"Because SchemaValidationException is thrown both cases that a schema definition is incorrect and that two schema definitions are mismatched.
In the former case, the migration does not solve the problem. But the exception message shows ""Migration is required...""

_e.g._ An exception that says ""migration is retuired"" when define the following model class



Therefore the latter as SchemaMismatchException, to distinguish between the two cases. 
Also, the message of SchemaValidationException is changed to ""Schema validation is failed..."".

CC @tgoyne @bdash 
",kishikawakatsumi,tgoyne
3221,2016-02-16 13:43:58,"Because SchemaValidationException is thrown both cases that a schema definition is incorrect and that two schema definitions are mismatched.
In the former case, the migration does not solve the problem. But the exception message shows ""Migration is required...""

_e.g._ An exception that says ""migration is retuired"" when define the following model class



Therefore the latter as SchemaMismatchException, to distinguish between the two cases. 
Also, the message of SchemaValidationException is changed to ""Schema validation is failed..."".

CC @tgoyne @bdash 
",kishikawakatsumi,bdash
3221,2016-02-17 17:14:41,"Thanks! Feedback addressed @tgoyne 
",kishikawakatsumi,tgoyne
3220,2016-02-16 20:51:09,"This is ready for review now!

/cc @jpsim @tgoyne 
",bdash,jpsim
3220,2016-02-16 20:51:09,"This is ready for review now!

/cc @jpsim @tgoyne 
",bdash,tgoyne
3217,2016-02-15 23:29:16,"I think it's worth improving this use case, and others like it. We could expose a `fileAttributes` property to `RLMRealmConfiguration` that would apply attributes to all Realm-related files.

Another option would be to add a getter to `RLMRealmConfiguration` that would return all [auxiliary file paths](https://realm.io/docs/objc/latest/#auxiliary-realm-files). This would be more flexible, also allowing other operations on all Realm files like moving or deleting them.

I'm curious to hear what @tgoyne and @bdash would think of that.
",jpsim,tgoyne
3217,2016-02-15 23:29:16,"I think it's worth improving this use case, and others like it. We could expose a `fileAttributes` property to `RLMRealmConfiguration` that would apply attributes to all Realm-related files.

Another option would be to add a getter to `RLMRealmConfiguration` that would return all [auxiliary file paths](https://realm.io/docs/objc/latest/#auxiliary-realm-files). This would be more flexible, also allowing other operations on all Realm files like moving or deleting them.

I'm curious to hear what @tgoyne and @bdash would think of that.
",jpsim,bdash
3213,2016-02-17 06:46:31,"@bdash just created one in #3230
",jpsim,bdash
3212,2016-02-16 01:42:01,"@trustyfrog if you're interested in Realm engine internals, architecture and design choices, I found [this talk](https://realm.io/news/jp-simard-realm-core-database-engine/) — by @jpsim himself — really interesting!
",AliSoftware,trustyfrog
3204,2016-02-12 01:38:42,"by just building the platform being tested /cc @tgoyne 
",jpsim,tgoyne
3198,2016-02-23 07:40:42,"@tgoyne Any news about this ?
I wonder if this behavior is expected, or if I do something wrong here ?
",vincedev,tgoyne
3197,2016-02-10 22:57:41,"/cc @mrackwitz 
",bdash,mrackwitz
3194,2016-02-18 19:01:55,"@jpsim May I ask what you are waiting for from me?
",jasper-chan,jpsim
3190,2016-02-09 14:27:39,"The crash was occurred by hitting assertion with the following message:



This regression is introduced by aadd905
This crash was occurred at from `v0.97.0` to `master`.

If the object was found, it won't crash.
This crash doesn't occur in `RLMResults` generated from `RLMObject`.



CC/ @tgoyne @jpsim 

Complete stack trace is:


",kishikawakatsumi,jpsim
3190,2016-02-09 14:27:39,"The crash was occurred by hitting assertion with the following message:



This regression is introduced by aadd905
This crash was occurred at from `v0.97.0` to `master`.

If the object was found, it won't crash.
This crash doesn't occur in `RLMResults` generated from `RLMObject`.



CC/ @tgoyne @jpsim 

Complete stack trace is:


",kishikawakatsumi,tgoyne
3186,2016-02-10 06:49:26,"Hi @axenovV!

I noticed you also asked [this same question on StackOverflow](http://stackoverflow.com/questions/35273890/dont-work-objectswithpredicate-with-operator-not-in).

I'm going to close this issue in favor of keeping the conversation there. This is mainly because these sorts of questions are much better off on StackOverflow as they remain visible, even after resolved.

As @bdash requested on the StackOverflow page, can you please expand your code sample on there to give us some more information on how you're implementing this? By all accounts, this should already work!

Thanks! :)
",TimOliver,bdash
3183,2016-02-09 14:34:34,"Sorry for that I missed `2`. I can download core from browser correctly now.
It's hard to tell whether `pods` is downloading core correctly even I added `--verbose`. 
As @MickeyHub suggested in #2446, 

> Beacause of bad net env.
> the prepare command Realm provide is `sh build.sh cocoapod-setup`, mainly code is download realm-core, download realm-core if $TMPDIR/core_bin/core-${REALM_CORE_VERSION}.tar.bz2 file not exists. so if you downloads always failed, you can download realm-core directly according to url provided by build.sh (shell script function `download_core`), **and then backup it, when you need pod install realm, you can mv it to $TMPDIR/core_bin/core-${REALM_CORE_VERSION}.tar.bz2.**
> 
> ${REALM_CORE_VERSION} is core version , such as `0.92.1.1`

I don't understand the text which I add bold style in the above quote.

So I will appreciated it if you tell me how to upgrade `realm` when I have downloaded `realm-core-0.96.0.tar.bz2` from browser or other download tools. In other words, if I use `pod update` to update realm, how can I skip the process of downloading core when I have downloaded `core`.
",Yoncise,MickeyHub
3182,2016-02-05 20:56:02,"See https://secure.helpscout.net/conversation/168310017/2922.

https://gist.github.com/tgoyne/fd89f097d1b44c8e3f9c reproduces the crash that this fixes, but I couldn't figure out how to make it deterministic without the non-test change. The use of addNotificationBlock is just to make it insensitive to the foibles of the optimizer and is not required to hit the bug.

This is probably better fixed in core (and in fact some core changes are needed since the post-0.96.0 changes to deleted linkview handling break this workaround), but since it's a regression from 0.97.1 IMO we need to ship a fix promptly.

@bdash @jpsim 
",tgoyne,jpsim
3182,2016-02-05 20:56:02,"See https://secure.helpscout.net/conversation/168310017/2922.

https://gist.github.com/tgoyne/fd89f097d1b44c8e3f9c reproduces the crash that this fixes, but I couldn't figure out how to make it deterministic without the non-test change. The use of addNotificationBlock is just to make it insensitive to the foibles of the optimizer and is not required to hit the bug.

This is probably better fixed in core (and in fact some core changes are needed since the post-0.96.0 changes to deleted linkview handling break this workaround), but since it's a regression from 0.97.1 IMO we need to ship a fix promptly.

@bdash @jpsim 
",tgoyne,bdash
3180,2016-02-05 12:34:12,"As the assert message describes, you can't fix that, you hit a feature limitation. We track adding support for this functionality by #1277. As long you would need to workaround that. Depending on the size of the collection, a feasible solution could be to pull your objects from the lazy `RLMCollection` into memory and handle the sorting via `NSArray` (e.g. by using `[coll valueForKeyPath:@""@self""]`). Alternatively, you could store the timestamp of the last message on your model, which holds the relation to messages.
",mrackwitz,self
3169,2016-02-02 20:08:53,"The initial implementation of SUBQUERY support in #2998 has some limitations:
- [ ] The `SUBQUERY(…).@count` expression must be compared with a constant.
- [ ] Correlated subqueries are not supported.
- [ ] Add support for `@sum`, `@avg`, `@min` and `@max`

We may wish to address these in the future.
",bdash,sum
3169,2016-02-02 20:08:53,"The initial implementation of SUBQUERY support in #2998 has some limitations:
- [ ] The `SUBQUERY(…).@count` expression must be compared with a constant.
- [ ] Correlated subqueries are not supported.
- [ ] Add support for `@sum`, `@avg`, `@min` and `@max`

We may wish to address these in the future.
",bdash,max
3169,2016-02-02 20:08:53,"The initial implementation of SUBQUERY support in #2998 has some limitations:
- [ ] The `SUBQUERY(…).@count` expression must be compared with a constant.
- [ ] Correlated subqueries are not supported.
- [ ] Add support for `@sum`, `@avg`, `@min` and `@max`

We may wish to address these in the future.
",bdash,min
3169,2016-02-02 20:08:53,"The initial implementation of SUBQUERY support in #2998 has some limitations:
- [ ] The `SUBQUERY(…).@count` expression must be compared with a constant.
- [ ] Correlated subqueries are not supported.
- [ ] Add support for `@sum`, `@avg`, `@min` and `@max`

We may wish to address these in the future.
",bdash,count
3169,2016-02-02 20:08:53,"The initial implementation of SUBQUERY support in #2998 has some limitations:
- [ ] The `SUBQUERY(…).@count` expression must be compared with a constant.
- [ ] Correlated subqueries are not supported.
- [ ] Add support for `@sum`, `@avg`, `@min` and `@max`

We may wish to address these in the future.
",bdash,avg
3167,2016-02-22 11:55:24,"@kreeger: Thanks for the thorough description.
@bdash: Do you have any ideas why this could occur?
",mrackwitz,bdash
3161,2016-02-01 06:54:10,"So basically I have a Swift class which inherits from Object and which has a property of RLMArray type. When this needs to be added to realm it stops at the point of calling ""internal func listForProperty(prop: RLMProperty) -> RLMListBase"" and fails because the propery's ""swiftIvar"" is nil.

I need it as an RLMArray rather then a List, because I cannot apply predicates to the List type, being a Swift class. For example I cannot apply a NSPredicate which contains @count.

And I cannot make it through other Swift provided means because I'm using RBQFetchedResultsController which for querying objects accepts basically just the old NSPredicate.
",Carpemeid,count
3161,2016-02-01 22:05:43,"Mixing the Realm Swift API with the Realm Objective-C API is unsupported. From [our docs](https://realm.io/docs/swift/latest/):

> If you’re looking to use Realm from Objective-C, or from mixed Objective-C & Swift apps please see Realm Objective-C instead.
> Using both Realm Objective-C and Realm Swift simultaneously is not supported.

---

> I need it as an RLMArray rather then a List, because I cannot apply predicates to the List type, being a Swift class. For example I cannot apply a NSPredicate which contains @count.

This is a bug, which we're tracking as #3115. If you try to work around a bug by doing something we explicitly don't support, you'll have a hard time. The right thing to do here is to fix #3115, which we've prioritized as highly as we can.

In the meantime, you can work around the lack of KVC operator support for `List` properties by performing the equivalent calculations with objects at the language level.
",jpsim,count
3158,2016-07-26 23:28:25,"@JoeFerrucci we added CocoaPods 1.0.x support in Realm 0.98.3. [See our changelog for that entry](https://github.com/realm/realm-cocoa/blob/master/CHANGELOG.md#0983-release-notes-2016-02-26).
",jpsim,JoeFerrucci
3155,2016-01-29 16:56:56,"/cc @tgoyne @bdash 
",jpsim,tgoyne
3155,2016-01-29 16:56:56,"/cc @tgoyne @bdash 
",jpsim,bdash
3154,2016-01-29 08:55:12,"I could reproduce the `build.sh package-ios-static` failure locally, and this fixed it, strangely enough. /cc @bdash 
",jpsim,bdash
3147,2016-01-27 20:15:02,"This test would crash with core 0.95.5. /cc @bdash 

I'm sure the test case can be further reduced and probably even be done without adding a new test object model, but I haven't been able to do so myself.
",jpsim,bdash
3142,2016-01-27 23:57:15,"The suggestion to add a mode of operation to `Realm.add(_:)` is a valid one. For example:



The concept would also be applied to `Realm.create(_:value:onDuplicate:)` and mirrored in the Objective-C API of course.

What are your thoughts on this @realm/cocoa?

I'm promoting this ticket from a support question to a feature request to better track its intentions.
",jpsim,realm
3139,2016-01-26 07:21:27,"Closes #3088. /cc @mrackwitz @tgoyne @bdash 
",jpsim,mrackwitz
3139,2016-01-26 07:21:27,"Closes #3088. /cc @mrackwitz @tgoyne @bdash 
",jpsim,tgoyne
3139,2016-01-26 07:21:27,"Closes #3088. /cc @mrackwitz @tgoyne @bdash 
",jpsim,bdash
3136,2016-06-24 22:06:42,"@jpsim The `asyncWrite` function must provide a completion block so that asynchronous errors (on commit after the write block is executed) can be handled. Since most users would probably ignore the error in the completion block, we ought to provide a default implementation that aborts. Unfortunately we are unable to show variant may fail (like the `try!` annotates with synchronous write), but this is a limitation of Swift.

I propose the following functions for the no-parameter and single-object-parameter cases. I agree that the multi-object-parameter variants are also useful, but I would first like to discuss the simpler cases.



Note that the completion block is provided in an overload rather than a default parameter so that users can use trailing-closure syntax in the non-handling case.

It's not straightforward how this API ought to translate to Objective-C. If we wish to provide ""default"" arguments for `queue` in the Objective-C API, we have to provide 2x as many functions, and there are already quite a lot. If we do, I think something like this might be reasonable, but I'm not very happy with the number of ""overloads"".



And now you can probably see why I left off discussing the other variants for now…! I'd appreciate feedback on whether this direction is reasonable.
//cc @austinzheng @tgoyne @TimOliver @mrackwitz 
",JadenGeller,mrackwitz
3136,2016-06-24 22:06:42,"@jpsim The `asyncWrite` function must provide a completion block so that asynchronous errors (on commit after the write block is executed) can be handled. Since most users would probably ignore the error in the completion block, we ought to provide a default implementation that aborts. Unfortunately we are unable to show variant may fail (like the `try!` annotates with synchronous write), but this is a limitation of Swift.

I propose the following functions for the no-parameter and single-object-parameter cases. I agree that the multi-object-parameter variants are also useful, but I would first like to discuss the simpler cases.



Note that the completion block is provided in an overload rather than a default parameter so that users can use trailing-closure syntax in the non-handling case.

It's not straightforward how this API ought to translate to Objective-C. If we wish to provide ""default"" arguments for `queue` in the Objective-C API, we have to provide 2x as many functions, and there are already quite a lot. If we do, I think something like this might be reasonable, but I'm not very happy with the number of ""overloads"".



And now you can probably see why I left off discussing the other variants for now…! I'd appreciate feedback on whether this direction is reasonable.
//cc @austinzheng @tgoyne @TimOliver @mrackwitz 
",JadenGeller,austinzheng
3136,2016-06-24 22:06:42,"@jpsim The `asyncWrite` function must provide a completion block so that asynchronous errors (on commit after the write block is executed) can be handled. Since most users would probably ignore the error in the completion block, we ought to provide a default implementation that aborts. Unfortunately we are unable to show variant may fail (like the `try!` annotates with synchronous write), but this is a limitation of Swift.

I propose the following functions for the no-parameter and single-object-parameter cases. I agree that the multi-object-parameter variants are also useful, but I would first like to discuss the simpler cases.



Note that the completion block is provided in an overload rather than a default parameter so that users can use trailing-closure syntax in the non-handling case.

It's not straightforward how this API ought to translate to Objective-C. If we wish to provide ""default"" arguments for `queue` in the Objective-C API, we have to provide 2x as many functions, and there are already quite a lot. If we do, I think something like this might be reasonable, but I'm not very happy with the number of ""overloads"".



And now you can probably see why I left off discussing the other variants for now…! I'd appreciate feedback on whether this direction is reasonable.
//cc @austinzheng @tgoyne @TimOliver @mrackwitz 
",JadenGeller,TimOliver
3136,2016-06-24 22:06:42,"@jpsim The `asyncWrite` function must provide a completion block so that asynchronous errors (on commit after the write block is executed) can be handled. Since most users would probably ignore the error in the completion block, we ought to provide a default implementation that aborts. Unfortunately we are unable to show variant may fail (like the `try!` annotates with synchronous write), but this is a limitation of Swift.

I propose the following functions for the no-parameter and single-object-parameter cases. I agree that the multi-object-parameter variants are also useful, but I would first like to discuss the simpler cases.



Note that the completion block is provided in an overload rather than a default parameter so that users can use trailing-closure syntax in the non-handling case.

It's not straightforward how this API ought to translate to Objective-C. If we wish to provide ""default"" arguments for `queue` in the Objective-C API, we have to provide 2x as many functions, and there are already quite a lot. If we do, I think something like this might be reasonable, but I'm not very happy with the number of ""overloads"".



And now you can probably see why I left off discussing the other variants for now…! I'd appreciate feedback on whether this direction is reasonable.
//cc @austinzheng @tgoyne @TimOliver @mrackwitz 
",JadenGeller,tgoyne
3133,2016-01-25 16:27:20,"This PR depends on https://github.com/realm/realm-cocoa/pull/3081

The main change is https://github.com/realm/realm-cocoa/commit/1ceebde2a723e767ef611c90e4f8d70c94611598.

realm-java supports indexing nullable properties.
This change aligns the specification between realm-java and realm-cocoa.

CC @jpsim @tgoyne 
",kishikawakatsumi,jpsim
3133,2016-01-25 16:27:20,"This PR depends on https://github.com/realm/realm-cocoa/pull/3081

The main change is https://github.com/realm/realm-cocoa/commit/1ceebde2a723e767ef611c90e4f8d70c94611598.

realm-java supports indexing nullable properties.
This change aligns the specification between realm-java and realm-cocoa.

CC @jpsim @tgoyne 
",kishikawakatsumi,tgoyne
3133,2016-01-26 20:26:01,":+1: 

@tgoyne does this look ok to you?
",jpsim,tgoyne
3125,2016-01-21 21:04:22,"Update to accommodate `Query::links_to` taking a row accessor rather than a row index.

Fixes #1803.

This requires a new core release that includes realm/realm-core#1397.

/cc @jpsim @tgoyne 
",bdash,jpsim
3125,2016-01-21 21:04:22,"Update to accommodate `Query::links_to` taking a row accessor rather than a row index.

Fixes #1803.

This requires a new core release that includes realm/realm-core#1397.

/cc @jpsim @tgoyne 
",bdash,tgoyne
3123,2016-01-21 00:22:39,"Prior to this `RLMAccessorClassForObjectClass` added an implementation of `+automaticallyNotifiesObserversOf<Property>` to the class for each property in the schema. Given that the results of these methods is cached by Foundation after the first call it's not necessary to optimize them in this manner. In fact, doing so makes the creation of accessor classes during schema initialization much slower due to the increased number of calls to `class_addMethod`.

Fixes #3111.

/cc @tgoyne 
",bdash,tgoyne
3120,2016-01-20 12:08:41,"`RealmSwiftObjectUtil` doesn't support `RLMObject` classes (and shouldn't from my understanding). That can cause that just linking Realm Swift screws up `RLMObject` model definitions from Swift as seen in #3097.
This introduces the protocol `ObjectProtocol` implemented by RealmSwiftObject and SwiftFakeObject  and tests for the conformance to that as a workaround to allow invalid test classes.
/c @jpsim @tgoyne
",mrackwitz,jpsim
3120,2016-01-20 12:08:41,"`RealmSwiftObjectUtil` doesn't support `RLMObject` classes (and shouldn't from my understanding). That can cause that just linking Realm Swift screws up `RLMObject` model definitions from Swift as seen in #3097.
This introduces the protocol `ObjectProtocol` implemented by RealmSwiftObject and SwiftFakeObject  and tests for the conformance to that as a workaround to allow invalid test classes.
/c @jpsim @tgoyne
",mrackwitz,tgoyne
3115,2016-01-26 16:43:39,"The problem here is that the KVC collection operator support added in #2989 assumes that `@count` will be handled via `valueForKeyPath:`, but we actually end up in `valueForKey:`. In this specific case we're hitting `-[RLMArrayLinkView valueForKey:]`. That calls `RLMCollectionValueForKey`, which always returns an `NSArray`.
",bdash,count
3111,2016-01-15 22:22:03,"@tgoyne, can you speak to why you chose to add `+automaticallyNotifiesObserversOf<Property>` methods dynamically, and whether you considered implementing `+automaticallyNotifiesObserversForKey:` instead?
",bdash,tgoyne
3095,2016-01-13 18:08:43,"Hi @mrigdon, yes you have to keep that migration block in your app, because this new version of your app can be installed over any other previous version of the app. But the migration block will only ever run when applying the migration, which will only happen _at most_ once per schema version number.

> I asked Stack Overflow but got no response that's why I'm opening an issue

I assume you're referring to [this](http://stackoverflow.com/questions/34758675/realm-swift-update-all-model-objects-and-remove-migration) StackOverflow question that was posted a few minutes before you filed this GitHub issue? That's [since been answered](http://stackoverflow.com/a/34759403/373262) by @TimOliver:

> Yes. Since you used a migration to bump the `schemaVersion` number of the Realm file, that migration block is required with the assumption that another migration may be required in future.
> 
> If you want to completely reset the migrations and remove the migration block, you'll need to delete your Realm file from disk and recreate it (i.e., simply deleting just the objects isn't enough).

For future reference, there's no need to post questions multiple times in different places. If you follow the guidelines described in the [Getting Help](https://realm.io/docs/objc/latest/#getting-help) or [Reporting Realm Issues](https://realm.io/docs/objc/latest/#reporting-realm-issues) sections of our docs, we'll find it!
",jpsim,TimOliver
3089,2016-01-11 23:43:19,"It's a bunch of code that I find thoroughly baffling and it doesn't actually do much of anything.

@bdash 
",tgoyne,bdash
3086,2016-01-11 12:02:48,"Thanks for bringing to our attention again. I think, @beeender is doing ongoing investigations in that direction.
",mrackwitz,beeender
3084,2016-01-08 23:07:38,"/cc @tgoyne 
",jpsim,tgoyne
3084,2016-06-05 00:49:03,"@jpsim @bdash I believe this will detect `-fembed-bitcode-marker`, even if there is not bitcode (`-fembed-bitcode`).
",jakajancar,bdash
3082,2016-01-08 20:15:47,"Fixes #1587 /cc @bdash 
",jpsim,bdash
3081,2016-01-08 15:54:30,"Core supports indexing Bool and NSDate properties.
realm-java also supports indexing Bool and NSDate properties.
It is better to align the specification with realm-java.

Also, indexing of Bool and NSDate had been supported implicitly in v0.96. v0.97 breaks this behavior.

cc @tgoyne @jpsim 
",kishikawakatsumi,jpsim
3081,2016-01-08 15:54:30,"Core supports indexing Bool and NSDate properties.
realm-java also supports indexing Bool and NSDate properties.
It is better to align the specification with realm-java.

Also, indexing of Bool and NSDate had been supported implicitly in v0.96. v0.97 breaks this behavior.

cc @tgoyne @jpsim 
",kishikawakatsumi,tgoyne
3075,2016-01-09 06:37:58,"@jpsim @mrackwitz 
i have did some more test, I am quite sure this is a problem, may be a bug...
the test is done in swift-2.1.1/RealmExamples/Encryption.
I have a object called 



and a json file has data, I first use the default.realm, import some data, then encrypt to a new realm file , at last open the encrypted file.



the result is : 
when the json table resords is less than 600( the realm file is less than 150kb), everything going fine.
when the json table resords is more than 1000( the realm file is more than 250kb), the problem appears. when i open the encrypted file with key, it throws : 



so i am sure the exception appears or not , depends on the size of realm file.
before i update to realmswift 0.97.0, everything is ok. and this problem has annoyed me several days, and also took some time to deal with it. I hope you guys can help me to find a solution . with this problem , i cannot archive new app version to app store at all.
",github2016a,jpsim
3074,2016-01-07 10:00:30,"@yoshyosh Can you please post your class declaration of c here? And the whole block of you transaction?
",beeender,yoshyosh
3074,2016-01-07 10:13:36,"![image](https://cloud.githubusercontent.com/assets/1632740/12167976/4798eb5a-b56a-11e5-816d-c6a4c66ed5f6.png)
@yoshyosh 
@mrackwitz 
@beeender 
",yushuyi,yoshyosh
3074,2016-01-07 10:13:36,"![image](https://cloud.githubusercontent.com/assets/1632740/12167976/4798eb5a-b56a-11e5-816d-c6a4c66ed5f6.png)
@yoshyosh 
@mrackwitz 
@beeender 
",yushuyi,mrackwitz
3070,2016-01-06 01:56:36,"This will serve as a backup in case our main CI setup is experiencing
difficulties.

It will also allow non-Realm employees to see the results of some

I've only ported a subset of our standard CI PR matrix here because:
1. Travis limits their matrix builds to 50 minutes _in aggregate_
2. Some of our standard CI PR matrix jobs require dependencies not available
    to Travis, like codesigning certificates and provisioning profiles.

The downside to integrating this is that we'll have yet another file to update
when making changes to our build system or CI setup.

This commit also avoids grepping on RealmSwift/SwiftVersion.swift when the file
doesn't exist, preventing a warning from being printed.

/cc @tgoyne @bdash @mrackwitz 
",jpsim,mrackwitz
3070,2016-01-06 01:56:36,"This will serve as a backup in case our main CI setup is experiencing
difficulties.

It will also allow non-Realm employees to see the results of some

I've only ported a subset of our standard CI PR matrix here because:
1. Travis limits their matrix builds to 50 minutes _in aggregate_
2. Some of our standard CI PR matrix jobs require dependencies not available
    to Travis, like codesigning certificates and provisioning profiles.

The downside to integrating this is that we'll have yet another file to update
when making changes to our build system or CI setup.

This commit also avoids grepping on RealmSwift/SwiftVersion.swift when the file
doesn't exist, preventing a warning from being printed.

/cc @tgoyne @bdash @mrackwitz 
",jpsim,tgoyne
3070,2016-01-06 01:56:36,"This will serve as a backup in case our main CI setup is experiencing
difficulties.

It will also allow non-Realm employees to see the results of some

I've only ported a subset of our standard CI PR matrix here because:
1. Travis limits their matrix builds to 50 minutes _in aggregate_
2. Some of our standard CI PR matrix jobs require dependencies not available
    to Travis, like codesigning certificates and provisioning profiles.

The downside to integrating this is that we'll have yet another file to update
when making changes to our build system or CI setup.

This commit also avoids grepping on RealmSwift/SwiftVersion.swift when the file
doesn't exist, preventing a warning from being printed.

/cc @tgoyne @bdash @mrackwitz 
",jpsim,bdash
3070,2016-01-06 16:46:10,"> Seems fine to me. Would be worth renaming the ""default"" check to something more descriptive.

That would certainly be nice, although according to @emanuelez, the [GitHub PR Builder Jenkins plugin](https://github.com/janinko/ghprb) we use doesn't support this.
",jpsim,emanuelez
3067,2016-01-05 19:15:07,"cc @tgoyne and @jpsim 
",bigfish24,jpsim
3067,2016-01-05 19:15:07,"cc @tgoyne and @jpsim 
",bigfish24,tgoyne
3059,2016-01-05 00:17:34,"[jazzy 0.5.0](https://github.com/realm/jazzy/releases/tag/v0.5.0) now has the ability to inject custom content into the `<head></head>` of the generated docs, which means we don't have to maintain a fork of the HTML templates just to add a site icon & the analytics script.

The default Swift version was also bumped to 2.1.1 in this version.

Note that CI can only have a single version of gems installed at a time, so it's still running 0.4.1. Once this PR has been reviewed and approved, I'll update CI to use jazzy 0.5.0.

/cc @tgoyne @bdash 
",jpsim,tgoyne
3059,2016-01-05 00:17:34,"[jazzy 0.5.0](https://github.com/realm/jazzy/releases/tag/v0.5.0) now has the ability to inject custom content into the `<head></head>` of the generated docs, which means we don't have to maintain a fork of the HTML templates just to add a site icon & the analytics script.

The default Swift version was also bumped to 2.1.1 in this version.

Note that CI can only have a single version of gems installed at a time, so it's still running 0.4.1. Once this PR has been reviewed and approved, I'll update CI to use jazzy 0.5.0.

/cc @tgoyne @bdash 
",jpsim,bdash
3058,2016-01-05 00:00:22,"This will give us a better idea of when it's reasonable to drop older Swift versions. /cc @tgoyne @bdash 
",jpsim,tgoyne
3058,2016-01-05 00:00:22,"This will give us a better idea of when it's reasonable to drop older Swift versions. /cc @tgoyne @bdash 
",jpsim,bdash
3058,2016-01-05 19:25:06,"@tgoyne @bdash CocoaPods fix in place.
",jpsim,bdash
3052,2016-01-21 23:48:11,"The issue is with `header_mappings_dir`. @mrackwitz is looking into it.
",jpsim,mrackwitz
3044,2015-12-28 17:52:39,"You should not include your model classes in both the test target and application target, as this results in there being two different incompatible classes with the same name, with the test code trying to operate on instances of the class defined in the test target, while any application code will actually be returning instances of the app target version. If you need to expose `internal` members of your model classes to your tests, then mark the classes as `@testable`.
",tgoyne,testable
3044,2016-01-04 19:02:40,"> I have then added my model classes (which inherit from Realm's Object class) to both targets so I can write the tests.

Instead of doing this (which compiles these classes twice, thus causing these issues), please either mark your models with a `public` ACL and `import` your app module from your unit tests, or mark your models with an `internal` ACL and `@testable import` your app module from your unit tests.

This is further explained in our docs: https://realm.io/docs/swift/latest/#avoid-linking-realm-and-tested-code-in-test-targets
",jpsim,testable
3044,2016-01-08 17:37:33,"@jlampa thanks for clarifying again. 

Through this [blog post](https://www.natashatherobot.com/swift-2-xcode-7-unit-testing-access/) in combination with looking at this a [post on stack overflow](http://stackoverflow.com/a/32276984/1879171) which added ""Make sure MyApp's build settings have `Enable Testability` set to `YES`."" i finally understood what you guys as well as the docs were trying to tell by `(use the public access modifier in Swift 1.2, or @testable in Swift 2.0 and later)`.   

I think the [docs you have pointed to](https://realm.io/docs/swift/latest/#avoid-linking-realm-and-tested-code-in-test-targets) could be improved for Swift newbies by linking to some tutorial / swift doc about `@testable in Swift 2.0 and later`.
",martnst,jlampa
3044,2016-01-08 17:37:33,"@jlampa thanks for clarifying again. 

Through this [blog post](https://www.natashatherobot.com/swift-2-xcode-7-unit-testing-access/) in combination with looking at this a [post on stack overflow](http://stackoverflow.com/a/32276984/1879171) which added ""Make sure MyApp's build settings have `Enable Testability` set to `YES`."" i finally understood what you guys as well as the docs were trying to tell by `(use the public access modifier in Swift 1.2, or @testable in Swift 2.0 and later)`.   

I think the [docs you have pointed to](https://realm.io/docs/swift/latest/#avoid-linking-realm-and-tested-code-in-test-targets) could be improved for Swift newbies by linking to some tutorial / swift doc about `@testable in Swift 2.0 and later`.
",martnst,testable
3044,2016-01-08 18:01:53,"@maremmle thanks for the feedback on our docs, I just added a link to the SO answer you provided.
",jpsim,maremmle
3032,2015-12-24 14:42:04,"Fix for operating bcsymbolmap files in the project directory.

This bug was introduced from https://github.com/realm/realm-cocoa/pull/3012. By changing the position of the script, the working directory has been the project directory.

Fixes https://github.com/realm/realm-cocoa/issues/3029

@jpsim @tgoyne 
",kishikawakatsumi,jpsim
3032,2015-12-24 14:42:04,"Fix for operating bcsymbolmap files in the project directory.

This bug was introduced from https://github.com/realm/realm-cocoa/pull/3012. By changing the position of the script, the working directory has been the project directory.

Fixes https://github.com/realm/realm-cocoa/issues/3029

@jpsim @tgoyne 
",kishikawakatsumi,tgoyne
3031,2015-12-24 05:01:03,"some Swift docs:
- were missing parameter definitions
- were missing throws documentation
- had superfluous returns documentation
- were using documentation incompatible with SwiftLint's valid docs rule

After these changes, SwiftLint runs successfully as of [0.5.3](https://github.com/realm/SwiftLint/releases/tag/0.5.3).

/cc @bdash @tgoyne 
",jpsim,bdash
3031,2015-12-24 05:01:03,"some Swift docs:
- were missing parameter definitions
- were missing throws documentation
- had superfluous returns documentation
- were using documentation incompatible with SwiftLint's valid docs rule

After these changes, SwiftLint runs successfully as of [0.5.3](https://github.com/realm/SwiftLint/releases/tag/0.5.3).

/cc @bdash @tgoyne 
",jpsim,tgoyne
3018,2015-12-18 22:39:07,"silences Xcode warnings /cc @bdash 
",jpsim,bdash
3017,2015-12-18 21:42:06,"Addresses #2900. /cc @bdash @tgoyne 
",jpsim,bdash
3017,2015-12-18 21:42:06,"Addresses #2900. /cc @bdash @tgoyne 
",jpsim,tgoyne
3013,2016-01-05 10:40:00,"@jpsim @tgoyne 

I created reproducible sample project https://github.com/kishikawakatsumi/Crash_Destruction-of-mutex-in-use/

#### Step to reproduce
1. Clone the repository and launch the app.
2. Wait for a few minutes (1-10 minutes) until the app will crash.

#### Note:

It is easier to reproduce on devices than simulators.
On devices, `EXC_BAD_ACCESS` in `advance_transact` was occurred in my environment.
On simulators, `Destruction of mutex in use` or `EXC_BAD_ACCESS` in `advance_transact` were occurred.

It seems to send a notification to the freed Realm instances.
According to the screenshot below, the app crashes on thread 5. At this time, the Realm instance is deallocated on other thread whenever (Thread 10 in the screenshot). 

The Realm instances on thread 5 and thread 10 were same (`0x0000000161c7fbf0`).

<img width=""1552"" alt=""screen shot 2016-01-05 at 19 28 23"" src=""https://cloud.githubusercontent.com/assets/40610/12112853/8dc86bc0-b3e2-11e5-9e59-2002fe92e0e3.png"">

I confirmed this crash was occurred in v0.97 and master.


",kishikawakatsumi,tgoyne
3012,2015-12-17 16:51:24,"Move copying bcsymbolmap files to before the code signing.
Because these files to be erased or being moved, problems are occurred if they are signed.

Fixes https://github.com/realm/realm-cocoa/issues/2968

cc @bdash @jpsim 
",kishikawakatsumi,jpsim
3012,2015-12-17 16:51:24,"Move copying bcsymbolmap files to before the code signing.
Because these files to be erased or being moved, problems are occurred if they are signed.

Fixes https://github.com/realm/realm-cocoa/issues/2968

cc @bdash @jpsim 
",kishikawakatsumi,bdash
3011,2015-12-17 15:46:46,"Closes #2939.

@jpsim Should get this in for 0.97.
",tgoyne,jpsim
3007,2015-12-16 15:08:27,"Fixes #3006 /cc @bdash @tgoyne 

Should we be failing more loudly here if your model objects can't be initialized?
",jpsim,bdash
3007,2015-12-16 15:08:27,"Fixes #3006 /cc @bdash @tgoyne 

Should we be failing more loudly here if your model objects can't be initialized?
",jpsim,tgoyne
3005,2015-12-15 23:28:47,"cc @jpsim @bdash @tgoyne 

Depends on https://github.com/realm/realm-core/pull/1397
",vigonius,jpsim
3005,2015-12-15 23:28:47,"cc @jpsim @bdash @tgoyne 

Depends on https://github.com/realm/realm-core/pull/1397
",vigonius,bdash
3005,2015-12-15 23:28:47,"cc @jpsim @bdash @tgoyne 

Depends on https://github.com/realm/realm-core/pull/1397
",vigonius,tgoyne
3003,2015-12-16 15:01:43,"Realm still shouldn't be crashing you app. I did notice one problem: `@property Person owner;` should be `@property Person *owner;`, although I suspect that's just a typo in your code sample here because your app wouldn't compile otherwise.

I don't see what you mean by compound key on the `Dog` model. We sometimes refer to compound keys as a key representing the concatenation of two other keys, but you don't seem to be doing anything like that in your model.

Finally, did my suggestion help you at all? I really think using Realm's built-in inverse relationship mechanism is the right design here.
",jpsim,property
3001,2015-12-15 14:42:29,"Thank you for your answer. But the text of the changelog with the encryption improvements is for this explicit release https://github.com/realm/realm-cocoa/releases/tag/v0.96.3
If you download the source (https://github.com/realm/realm-cocoa/archive/v0.96.3.zip) you see it doesn't has the changes described in the changelog text right above the button to download the source. Maybe I am wrong here. But I think at last it is very misleading.

If I change my Podfile to:



I get compiler errors:

/Users/onno.bergob/Desktop/Projects/iOS/medicalpark-ios/Pods/RealmSwift/RealmSwift/Migration.swift:169:40: error: cannot assign to property: 'objectSchema' is a 'let' constant
            objectSchema.accessorClass = MigrationObject.self
            ~~~~~~~~~~~~               ^
/Users/onno.bergob/Desktop/Projects/iOS/medicalpark-ios/Pods/RealmSwift/RealmSwift/Migration.swift:173:39: error: cannot assign to property: 'objectSchema' is a 'let' constant
            objectSchema.isSwiftClass = true
            ~~~~~~~~~~~~              ^
/Users/onno.bergob/Desktop/Projects/iOS/medicalpark-ios/Pods/RealmSwift/RealmSwift/Migration.swift:176:40: error: cannot assign to property: 'objectSchema' is a 'let' constant
            objectSchema.accessorClass = MigrationObject.self
            ~~~~~~~~~~~~               ^
/Users/onno.bergob/Desktop/Projects/iOS/medicalpark-ios/Pods/RealmSwift/RealmSwift/ObjectSchema.swift:38:58: error: 'AnyObject' is not convertible to 'RLMProperty'; did you mean to use 'as!' to force downcast?
        return rlmObjectSchema.properties.map { Property($0) }
                                                         ^
                                                            as! RLMProperty
/Users/onno.bergob/Desktop/Projects/iOS/medicalpark-ios/Pods/RealmSwift/RealmSwift/Realm.swift:104:43: error: invalid conversion from non-escaping function of type '@noescape () -> Void' to potentially escaping function type '() -> Void'
        try rlmRealm.transactionWithBlock(block)

/Users/onno.bergob/Desktop/Projects/iOS/medicalpark-ios/Pods/RealmSwift/RealmSwift/RealmConfiguration.swift:65:37: error: use of unresolved identifier 'RLMRealmPathForFile'
        public init(path: String? = RLMRealmPathForFile(""default.realm""),

/Users/onno.bergob/Desktop/Projects/iOS/medicalpark-ios/Pods/RealmSwift/RealmSwift/Schema.swift:39:56: error: cannot convert value of type '(RLMObjectSchema) -> ObjectSchema' to expected argument type '(AnyObject) -> ObjectSchema'
        return rlmSchema.objectSchema.map(ObjectSchema.init)

I guessed it was because RealmSwift uses the wrong Realm version, so it tried



and 



in my Podfile. But i get in both cases the same compiler errors:

Undefined symbols for architecture x86_64:
  ""realm::_impl::transaction::begin(realm::SharedGroup&, realm::ClientHistory&, realm::BindingContext_, bool)"", referenced from:
      realm::Realm::update_schema(std::__1::unique_ptr<realm::Schema, std::__1::default_delete<realm::Schema> >, unsigned long long) in shared_realm.o
      realm::Realm::begin_transaction() in shared_realm.o
  ""realm::_impl::transaction::cancel(realm::SharedGroup&, realm::ClientHistory&, realm::BindingContext_)"", referenced from:
      realm::Realm::cancel_transaction() in shared_realm.o
  ""realm::_impl::transaction::commit(realm::SharedGroup&, realm::ClientHistory&, realm::BindingContext_)"", referenced from:
      realm::Realm::commit_transaction() in shared_realm.o
  ""realm::_impl::transaction::advance(realm::SharedGroup&, realm::ClientHistory&, realm::BindingContext_)"", referenced from:
      realm::Realm::notify() in shared_realm.o
      realm::Realm::refresh() in shared_realm.o
  ""realm::_impl::ExternalCommitHelper::remove_realm(realm::Realm_)"", referenced from:
      realm::Realm::~Realm() in shared_realm.o
      realm::Realm::close() in shared_realm.o
  ""realm::_impl::ExternalCommitHelper::notify_others()"", referenced from:
      realm::Realm::commit_transaction() in shared_realm.o
  ""realm::_impl::ExternalCommitHelper::add_realm(realm::Realm_)"", referenced from:
      realm::Realm::get_shared_realm(realm::Realm::Config) in shared_realm.o
  ""realm::_impl::ExternalCommitHelper::ExternalCommitHelper(realm::Realm_)"", referenced from:
      std::__1::shared_ptrrealm::_impl::ExternalCommitHelper std::__1::shared_ptrrealm::_impl::ExternalCommitHelper::make_shared<realm::Realm_>(realm::Realm*&&) in shared_realm.o
  ""realm::_impl::ExternalCommitHelper::~ExternalCommitHelper()"", referenced from:
      std::__1::__shared_ptr_emplace<realm::_impl::ExternalCommitHelper, std::__1::allocator<realm::_impl::ExternalCommitHelper> >::__on_zero_shared() in shared_realm.o
      std::__1::__libcpp_compressed_pair_impstd::__1::allocator<realm::_impl::ExternalCommitHelper, realm::_impl::ExternalCommitHelper, 1u>::~__libcpp_compressed_pair_imp() in shared_realm.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
",oonoo,noescape
2998,2015-12-15 16:30:20,"1. Correlated subqueries (e.g., a subquery that contains a reference a property of the parent table) are not supported.
2. `SUBQUERY(…).@count` is the only form that's currently supported. I'm not sure if there's any use case for operations other than `@count` on the subquery.
3. The subquery expression must be compared with a constant. Supporting comparisons against more general expressions is clearly desirable for the future.
",bdash,count
2998,2015-12-15 17:55:22,">  I'm not sure if there's any use case for operations other than `@count` on the subquery.

I could imagine use cases for the rest of the aggregate operators (`sum`, `avg`, `min`, `max`, `first`, `last`) and possibly future operators like `distinct` and `group_by`. But I don't think there is any pressing need for any of them right now.
",astigsen,count
2989,2015-12-11 20:29:46,"- [x] for `RLMResults`
- [x] for `RLMArray` (fixes #2937)

/c @bdash 
",mrackwitz,bdash
2978,2015-12-10 08:56:14,"Usually at around ~80% slower. This only seems to happen on host 1 (32-bit iPhone 5 running iOS 8).
- https://ci.realm.io/job/objc_pr/configuration=Release,swift_version=2.1,target=ios-device-swift/2543/
- https://ci.realm.io/job/objc_pr/configuration=Release,swift_version=2.1,target=ios-device-swift/2538/
- https://ci.realm.io/job/objc_pr/configuration=Release,swift_version=2.1,target=ios-device-swift/2537/
- https://ci.realm.io/job/objc_pr/configuration=Release,swift_version=2.1,target=ios-device-swift/2536/
- https://ci.realm.io/job/objc_pr/configuration=Release,swift_version=2.1,target=ios-device-swift/2534/

See https://ci.realm.io/job/objc_pr/configuration=Release,swift_version=2.1,target=ios-device-swift/2543/testReport/junit/RealmSwift_Tests/SwiftPerformanceTests/testQueryConstruction/history/ for a history of this failing test.

I think this first started happening after we updated core from 0.95.1 to 0.95.4 (#2943). There were a few failures before then but only in the tvOS branch which was using a more recent build of core for a while.

Seems to me like the most likely culprit is https://github.com/realm/realm-core/pull/1363, which had the biggest impact on query code.

Thoughts @bdash?
",jpsim,bdash
2977,2015-12-10 08:13:44,"this would previously throw an Objective-C runtime exception: 'In-memory identifier must not be empty' which wasn't always clear, such as #2976. /cc @bdash 
",jpsim,bdash
2966,2015-12-09 13:29:20,"Bump version of Info-Plist to `0.96.3`

@tgoyne @bdash @jpsim 
",kishikawakatsumi,jpsim
2966,2015-12-09 13:29:20,"Bump version of Info-Plist to `0.96.3`

@tgoyne @bdash @jpsim 
",kishikawakatsumi,tgoyne
2966,2015-12-09 13:29:20,"Bump version of Info-Plist to `0.96.3`

@tgoyne @bdash @jpsim 
",kishikawakatsumi,bdash
2965,2015-12-09 13:20:07,"Create `core/include/Realm` directory after copying ObjectStore headers.
Because cannot find ObjectStore related headers on case-sensitive filesystem.

On `0.96.3` and `master`, fail to install via CocoaPods due to the following error:



@jpsim @bdash 
",kishikawakatsumi,jpsim
2965,2015-12-09 13:20:07,"Create `core/include/Realm` directory after copying ObjectStore headers.
Because cannot find ObjectStore related headers on case-sensitive filesystem.

On `0.96.3` and `master`, fail to install via CocoaPods due to the following error:



@jpsim @bdash 
",kishikawakatsumi,bdash
2961,2015-12-08 19:29:40,"/cc @bdash
",jpsim,bdash
2954,2015-12-07 18:47:25,"By default it now does an ordered removal, which doesn't actually work with links.

The `TransactLogObserver` changes are to make it always assume unordered removal since it's currently being incorrectly reported as ordered, and we now never use ordered.

It'd be nice to have a test which actually hits the problematic conditions for ordered removal, but that'll probably take a while to write.

@jpsim @bdash 
",tgoyne,jpsim
2954,2015-12-07 18:47:25,"By default it now does an ordered removal, which doesn't actually work with links.

The `TransactLogObserver` changes are to make it always assume unordered removal since it's currently being incorrectly reported as ordered, and we now never use ordered.

It'd be nice to have a test which actually hits the problematic conditions for ordered removal, but that'll probably take a while to write.

@jpsim @bdash 
",tgoyne,bdash
2952,2015-12-07 16:11:36,"Instead of automatically determining it in the script via `scripts/swift-version.sh`, which would fail if the wrong Xcode version is selected globally via `xcode-select`.
Fixes #2941.
/c @bdash @jpsim
",mrackwitz,jpsim
2952,2015-12-07 16:11:36,"Instead of automatically determining it in the script via `scripts/swift-version.sh`, which would fail if the wrong Xcode version is selected globally via `xcode-select`.
Fixes #2941.
/c @bdash @jpsim
",mrackwitz,bdash
2948,2015-12-05 09:12:30,"Continuing on after failures can result in an incomplete Carthage.framework.zip being uploaded for the release.

/cc @jpsim @kishikawakatsumi 
",bdash,jpsim
2948,2015-12-05 09:12:30,"Continuing on after failures can result in an incomplete Carthage.framework.zip being uploaded for the release.

/cc @jpsim @kishikawakatsumi 
",bdash,kishikawakatsumi
2947,2015-12-04 22:03:05,"Ran `git cherry-pick 23b3717...a823b2e`. /cc @tgoyne 
",jpsim,tgoyne
2941,2015-12-07 05:35:00,"I personally don't know enough about CocoaPods subspecs to know whether they're appropriate to use for this purpose. Perhaps @jpsim or @mrackwitz have thoughts on that side of things.

Whether or not to build with bitcode depends on the version of Xcode you're using. Bitcode support is new in Xcode 7. Older versions don't support it, and attempting to use it will result in link errors. That's the only relevant factor. I'm not sure why you'd have had issues with d856361 but not 900733e. I don't see any changes in that range that I would expect to cause build failures.

I think it would be reasonable to say that the swift-1.2 branch should always builds with bitcode disabled, since Swift 1.2 support inherently means that Xcode 6.x is being used.
",bdash,mrackwitz
2941,2015-12-07 05:35:00,"I personally don't know enough about CocoaPods subspecs to know whether they're appropriate to use for this purpose. Perhaps @jpsim or @mrackwitz have thoughts on that side of things.

Whether or not to build with bitcode depends on the version of Xcode you're using. Bitcode support is new in Xcode 7. Older versions don't support it, and attempting to use it will result in link errors. That's the only relevant factor. I'm not sure why you'd have had issues with d856361 but not 900733e. I don't see any changes in that range that I would expect to cause build failures.

I think it would be reasonable to say that the swift-1.2 branch should always builds with bitcode disabled, since Swift 1.2 support inherently means that Xcode 6.x is being used.
",bdash,jpsim
2940,2015-12-15 01:26:03,"@tgoyne and @ajitam worked this out via email. Which I'll repost here, lightly edited:

Essentially @ajitam was building a framework that bundled Realm & some Realm models. So to support users of that framework also being able to use Realm without being effected by the framework's usage, the `+[RLMObject shouldIncludeInDefaultSchema]` class method on each of the framework's model classes need to be overridden to return `false`, and then explicitly list those object types in the `objectClasses`/`objectTypes` array on the configuration object used to open the Realm.

Supporting the framework user using a different version of Realm from the one you're using in the same process would be tricky. All of the obj-c class names would need to be mangled similar to how `cocoapods-packager` does (but without trying to mangle anything else), and then build the library as a dynamic framework which has Realm statically linked into it.
",jpsim,tgoyne
2938,2015-12-04 02:12:39,"/cc @bdash 
",jpsim,bdash
2937,2015-12-04 01:11:13,"This was originally reported in an issue with RBQFetchedResultsController: https://github.com/Roobiq/RBQFetchedResultsController/issues/50

Here is the sample project (I made a few updates to the one the user originally provided):
[RBQFetchedResultsControllerExample.zip](https://github.com/realm/realm-cocoa/files/51558/RBQFetchedResultsControllerExample.zip)

If you run the project, you will notice that the predicate (`@""inTable = YES AND objects.@count > 0""`) for the `RBQFetchRequest` works correctly and only objects in the first section appear because those are the only objects with any linked objects in their `RLMArray` objects property.

However, if you click the delete button in the nav bar and then click insert, a new object will be created with a linked object and then it is added to Realm with a notification to trigger the FRC. The FRC will then evaluate the objects that are passed through the notification to verify they match the predicate for the fetch request.

In this case the predicate evaluation fails: `[self.predicate evaluateWithObject:object]`. From what I can tell it seems that internally, this triggers calling `valueForKey:` on the object, with the key being: `@count`.

Is this an incorrect parse of the predicate or do we need to enable support for this sort of `valueForKey:` request?
",bigfish24,count
2914,2015-11-30 17:25:12,"/cc @tgoyne @bdash 
",jpsim,tgoyne
2914,2015-11-30 17:25:12,"/cc @tgoyne @bdash 
",jpsim,bdash
2910,2015-12-04 19:07:13,"I'm seeing this same error.  Happening to 21 users out of out 300k monthly active, so quite rare but frustrating, as it means the app crashes every time for these users.

Here's my stack trace:



For both me and @Reggian it's happening directly from `application:didFinishLaunchingWithOptions:` — this is the first time I reference the Realm DB after launch.

I'm doing nothing fancy, my entire Realm implementation involves a few calls to `objectsWhere:` and a few `beginWriteTransaction /  commitWriteTransaction` pairs, and I only ever use the default `RLMRealm`

@tgoyne thoughts on what's causing this or how to recover?
",tsheaff,tgoyne
2906,2015-11-25 23:06:48,"@jpsim and @tgoyne any objections to this?
",bigfish24,jpsim
2906,2015-11-25 23:06:48,"@jpsim and @tgoyne any objections to this?
",bigfish24,tgoyne
2906,2015-11-25 23:46:34,"I understand the desire for a language-agnostic interface to Realm, but I don't think this is the solution.

Something like what we do for `Realm.RLMObjectUtil`/`RealmSwift.ObjectUtil` might be another option.

Or even a clearly namespaced, `@objc`-marked set of getters in Realm Swift:



This would still be part of Realm Swift's public API, but would be clearly marked, like our existing dynamic\* methods.
",jpsim,objc
2904,2015-11-25 19:26:06,"Title says it all. I am trying to open a default.realm file and the window says the browser needs access, press allow to continue, but the Allow button is disabled.

Originally posted by @pvencill in realm-cocoa: https://github.com/realm/realm-cocoa/issues/2903
",jpsim,pvencill
2903,2015-11-25 19:29:04,"That's an unfortunate issue, @pvencill I'm sorry this is affecting you. I just filed https://github.com/realm/realm-browser-osx/issues/109 on our Realm Browser repository. This repository is for the Realm Cocoa framework.

@TimOliver should be able to continue the conversation with you there.
",jpsim,TimOliver
2901,2015-11-25 00:16:58,"@jpsim can you review?
",bigfish24,jpsim
2899,2015-11-24 15:46:50,"Realm files in an app bundle should be opened if marked as read-only.
However, to open Realm in an app bundle will fail due to try to create a `*.note` file in a bundle.

This behavior introduced from the following commit:
https://github.com/realm/realm-cocoa/commit/9cfaa500a96482752c2536282644585ebef4c68f

This test (opening read-only Realm in app bundle) hits https://github.com/realm/realm-cocoa/blob/master/Realm/ObjectStore/impl/apple/external_commit_helper.cpp#L117 then throws exception.

cc @tgoyne @jpsim 
",kishikawakatsumi,jpsim
2899,2015-11-24 15:46:50,"Realm files in an app bundle should be opened if marked as read-only.
However, to open Realm in an app bundle will fail due to try to create a `*.note` file in a bundle.

This behavior introduced from the following commit:
https://github.com/realm/realm-cocoa/commit/9cfaa500a96482752c2536282644585ebef4c68f

This test (opening read-only Realm in app bundle) hits https://github.com/realm/realm-cocoa/blob/master/Realm/ObjectStore/impl/apple/external_commit_helper.cpp#L117 then throws exception.

cc @tgoyne @jpsim 
",kishikawakatsumi,tgoyne
2899,2015-11-24 19:29:55,"When read-only Realm, it doesn't use the notifier. Are these changes appropriate?

cc @tgoyne @jpsim
",kishikawakatsumi,jpsim
2899,2015-11-24 19:29:55,"When read-only Realm, it doesn't use the notifier. Are these changes appropriate?

cc @tgoyne @jpsim
",kishikawakatsumi,tgoyne
2897,2015-11-24 15:01:42,"Hello, 
I am trying to use Realm to handle marker map objects and I continue to get errors: 
// From Marker.h
# import <Foundation/Foundation.h>
# import <CoreLocation/CoreLocation.h>
# import ""MTLModel.h""
# import <Mantle/Mantle.h>
# import <Realm/Realm.h>

@interface Marker : RLMObject
@property (nonatomic) NSInteger *markerID;
@property (nonatomic) NSString *markerTitle;
@property (nonatomic) NSString *markerName;
@property (nonatomic) NSString *markerJurisdiction;
@property (nonatomic) NSString *markerAddress;
@property (nonatomic) NSString *markerCity;
@property (nonatomic) NSString *markerState;
@property (nonatomic) NSString *markerInformation;
@property (nonatomic) NSString *markerStatus;
@property (nonatomic) CLLocationDegrees markerLatitude;
@property (nonatomic) CLLocationDegrees markerLongitude;
@end 

// from Marker.m
# import ""Marker.h""
# import ""RLMObject+JSON.h""

@implementation Marker
- (NSDictionary *)JSONInboundMappingDictionary {
  return @{
           @""id"": @""markerID"",
           @""name"": @""markerName"",
           @""jurisdiction"": @""markerJurisdiction"",
           @""address"": @""markerAddress"",
           @""lat"": @""markerLatitude"",
           @""lng"": @""markerLongitude"",
           @""type"": @""markerStatus"",
           @""comment"": @""markerInformation"",
          };
  }
- (NSDictionary *)JSONOutboundMappingDictionary
  {
  return @{
           @""markerID"": @""id"",
           @""markerName"": @""marker.name"",
           @""markerJurisdiction"": @""marker.jurisdiction"",
           @""markerAddress"": @""marker.address"",
           @""markerStatus"": @""marker.status"",
           };
  }
- (NSString *)primaryKey
  {
  return @""markerID"";
  }

The Error is: 
Terminating app due to uncaught exception 'RLMException', reason: 'Can't persist property 'markerID' with incompatible type. Add to ignoredPropertyNames: method to ignore.'
**\* First throw call stack:
",stevelyons,implementation
2897,2015-11-24 15:01:42,"Hello, 
I am trying to use Realm to handle marker map objects and I continue to get errors: 
// From Marker.h
# import <Foundation/Foundation.h>
# import <CoreLocation/CoreLocation.h>
# import ""MTLModel.h""
# import <Mantle/Mantle.h>
# import <Realm/Realm.h>

@interface Marker : RLMObject
@property (nonatomic) NSInteger *markerID;
@property (nonatomic) NSString *markerTitle;
@property (nonatomic) NSString *markerName;
@property (nonatomic) NSString *markerJurisdiction;
@property (nonatomic) NSString *markerAddress;
@property (nonatomic) NSString *markerCity;
@property (nonatomic) NSString *markerState;
@property (nonatomic) NSString *markerInformation;
@property (nonatomic) NSString *markerStatus;
@property (nonatomic) CLLocationDegrees markerLatitude;
@property (nonatomic) CLLocationDegrees markerLongitude;
@end 

// from Marker.m
# import ""Marker.h""
# import ""RLMObject+JSON.h""

@implementation Marker
- (NSDictionary *)JSONInboundMappingDictionary {
  return @{
           @""id"": @""markerID"",
           @""name"": @""markerName"",
           @""jurisdiction"": @""markerJurisdiction"",
           @""address"": @""markerAddress"",
           @""lat"": @""markerLatitude"",
           @""lng"": @""markerLongitude"",
           @""type"": @""markerStatus"",
           @""comment"": @""markerInformation"",
          };
  }
- (NSDictionary *)JSONOutboundMappingDictionary
  {
  return @{
           @""markerID"": @""id"",
           @""markerName"": @""marker.name"",
           @""markerJurisdiction"": @""marker.jurisdiction"",
           @""markerAddress"": @""marker.address"",
           @""markerStatus"": @""marker.status"",
           };
  }
- (NSString *)primaryKey
  {
  return @""markerID"";
  }

The Error is: 
Terminating app due to uncaught exception 'RLMException', reason: 'Can't persist property 'markerID' with incompatible type. Add to ignoredPropertyNames: method to ignore.'
**\* First throw call stack:
",stevelyons,end
2897,2015-11-24 15:01:42,"Hello, 
I am trying to use Realm to handle marker map objects and I continue to get errors: 
// From Marker.h
# import <Foundation/Foundation.h>
# import <CoreLocation/CoreLocation.h>
# import ""MTLModel.h""
# import <Mantle/Mantle.h>
# import <Realm/Realm.h>

@interface Marker : RLMObject
@property (nonatomic) NSInteger *markerID;
@property (nonatomic) NSString *markerTitle;
@property (nonatomic) NSString *markerName;
@property (nonatomic) NSString *markerJurisdiction;
@property (nonatomic) NSString *markerAddress;
@property (nonatomic) NSString *markerCity;
@property (nonatomic) NSString *markerState;
@property (nonatomic) NSString *markerInformation;
@property (nonatomic) NSString *markerStatus;
@property (nonatomic) CLLocationDegrees markerLatitude;
@property (nonatomic) CLLocationDegrees markerLongitude;
@end 

// from Marker.m
# import ""Marker.h""
# import ""RLMObject+JSON.h""

@implementation Marker
- (NSDictionary *)JSONInboundMappingDictionary {
  return @{
           @""id"": @""markerID"",
           @""name"": @""markerName"",
           @""jurisdiction"": @""markerJurisdiction"",
           @""address"": @""markerAddress"",
           @""lat"": @""markerLatitude"",
           @""lng"": @""markerLongitude"",
           @""type"": @""markerStatus"",
           @""comment"": @""markerInformation"",
          };
  }
- (NSDictionary *)JSONOutboundMappingDictionary
  {
  return @{
           @""markerID"": @""id"",
           @""markerName"": @""marker.name"",
           @""markerJurisdiction"": @""marker.jurisdiction"",
           @""markerAddress"": @""marker.address"",
           @""markerStatus"": @""marker.status"",
           };
  }
- (NSString *)primaryKey
  {
  return @""markerID"";
  }

The Error is: 
Terminating app due to uncaught exception 'RLMException', reason: 'Can't persist property 'markerID' with incompatible type. Add to ignoredPropertyNames: method to ignore.'
**\* First throw call stack:
",stevelyons,interface
2897,2015-11-24 15:01:42,"Hello, 
I am trying to use Realm to handle marker map objects and I continue to get errors: 
// From Marker.h
# import <Foundation/Foundation.h>
# import <CoreLocation/CoreLocation.h>
# import ""MTLModel.h""
# import <Mantle/Mantle.h>
# import <Realm/Realm.h>

@interface Marker : RLMObject
@property (nonatomic) NSInteger *markerID;
@property (nonatomic) NSString *markerTitle;
@property (nonatomic) NSString *markerName;
@property (nonatomic) NSString *markerJurisdiction;
@property (nonatomic) NSString *markerAddress;
@property (nonatomic) NSString *markerCity;
@property (nonatomic) NSString *markerState;
@property (nonatomic) NSString *markerInformation;
@property (nonatomic) NSString *markerStatus;
@property (nonatomic) CLLocationDegrees markerLatitude;
@property (nonatomic) CLLocationDegrees markerLongitude;
@end 

// from Marker.m
# import ""Marker.h""
# import ""RLMObject+JSON.h""

@implementation Marker
- (NSDictionary *)JSONInboundMappingDictionary {
  return @{
           @""id"": @""markerID"",
           @""name"": @""markerName"",
           @""jurisdiction"": @""markerJurisdiction"",
           @""address"": @""markerAddress"",
           @""lat"": @""markerLatitude"",
           @""lng"": @""markerLongitude"",
           @""type"": @""markerStatus"",
           @""comment"": @""markerInformation"",
          };
  }
- (NSDictionary *)JSONOutboundMappingDictionary
  {
  return @{
           @""markerID"": @""id"",
           @""markerName"": @""marker.name"",
           @""markerJurisdiction"": @""marker.jurisdiction"",
           @""markerAddress"": @""marker.address"",
           @""markerStatus"": @""marker.status"",
           };
  }
- (NSString *)primaryKey
  {
  return @""markerID"";
  }

The Error is: 
Terminating app due to uncaught exception 'RLMException', reason: 'Can't persist property 'markerID' with incompatible type. Add to ignoredPropertyNames: method to ignore.'
**\* First throw call stack:
",stevelyons,property
2897,2015-11-24 18:00:15,"Your `markerID` property's type is a pointer to an `NSInteger`. You probably want to store this as an integer: `@property (nonatomic) int markerID;`.
",jpsim,property
2897,2015-11-24 22:12:28,"You're still storing `markerID` as a _pointer_ to an int, rather than an int.

Change this: `@property (nonatomic) int *markerID;` to this: `@property (nonatomic) int markerID;`.
",jpsim,property
2897,2015-11-24 22:37:34,"Okay changing back to `(NSString *)` worked.

I'm now running into an error with `markerLatitude`:

> Terminating app due to uncaught exception 'RLMException', reason: 'Invalid value '30.390406' for property 'markerLatitude''

I'm currently using: `@property (nonatomic) CLLocationDegrees markerLatitude;`
to represent latitude, but I get an error. 

The JSON I'm reading from looks like 


",stevelyons,property
2897,2015-11-25 03:18:20,"I've changed the data type to:
@property (nonatomic) NSString *markerLatitude;
@property (nonatomic) NSString *markerLongitude;

 but now I am getting the following errors 
'RLMException', reason: 'Migration is required for object type 'Marker' due to the following errors:
- Property types for 'markerLatitude' property do not match. Old type 'double', new type 'string'
- Property types for 'markerLongitude' property do not match. Old type 'double', new type 'string'

Is JSON being read as a double or string? 
",stevelyons,property
2897,2015-11-25 03:54:46,"Now, I'm trying:
@property (nonatomic) double markerLatitude;

And get the following error:
'RLMException', reason: 'Invalid value '30.390406' for property 'markerLatitude''
",stevelyons,property
2897,2015-11-25 19:05:34,"> but now I am getting the following errors 
> 'RLMException', reason: 'Migration is required for object type 'Marker' due to the following errors:
> 
> Property types for 'markerLatitude' property do not match. Old type 'double', new type 'string'
> Property types for 'markerLongitude' property do not match. Old type 'double', new type 'string'
> Is JSON being read as a double or string?

When you change the type of a model property, you'll need to perform a migration as explained here: https://realm.io/docs/objc/latest/#migrations

> Now, I'm trying:
> @property (nonatomic) double markerLatitude;
> 
> And get the following error:
> 'RLMException', reason: 'Invalid value '30.390406' for property 'markerLatitude''

Now you're back to your original issue of attempting to store a string in a `double`.
",jpsim,property
2895,2015-11-24 06:38:13,"Adds support for comparisons of the form `class.unary OP property`, `class.unary OP class.unary`, and `class.many.@AGG.property OP property`, where `unary` is a unary relationship, and `many` is an `RLMArray` / `List` relationship.

The following are not part of this pull request:
- `ANY` / `SOME` / `ALL` / `NONE` with key paths on both sides of the operator.
- `class.many.@AGG.property OP class.many.@AGG.property`.
- `IN` with key paths on both sides.
- `BETWEEN` with key paths on both sides.

Depends on realm/realm-core#1360.
",bdash,AGG
2894,2015-11-24 06:35:29,"@interface Dialog : RLMObject
@property User *chatUser;
@end

@interface User : RLMObject
@end

There is some User records in DB.
I create a new Dialog object A, then get a User object B from DB on main thread.
A.chatUser = B;

Then call below on other thread, it crash. 'Realm accessed from incorrect thread'
[Dialog createOrUpdateInDefaultRealmWithValue:A];

I want to know how to create relationship with a new object and a exist object ?
",mewehk,end
2894,2015-11-24 06:35:29,"@interface Dialog : RLMObject
@property User *chatUser;
@end

@interface User : RLMObject
@end

There is some User records in DB.
I create a new Dialog object A, then get a User object B from DB on main thread.
A.chatUser = B;

Then call below on other thread, it crash. 'Realm accessed from incorrect thread'
[Dialog createOrUpdateInDefaultRealmWithValue:A];

I want to know how to create relationship with a new object and a exist object ?
",mewehk,interface
2894,2015-11-24 06:35:29,"@interface Dialog : RLMObject
@property User *chatUser;
@end

@interface User : RLMObject
@end

There is some User records in DB.
I create a new Dialog object A, then get a User object B from DB on main thread.
A.chatUser = B;

Then call below on other thread, it crash. 'Realm accessed from incorrect thread'
[Dialog createOrUpdateInDefaultRealmWithValue:A];

I want to know how to create relationship with a new object and a exist object ?
",mewehk,property
2889,2015-11-21 00:46:34,"these are no longer necessary now that those APIs in Objective-C use generics. /cc @tgoyne 
",jpsim,tgoyne
2887,2015-11-20 17:10:24,"This moves most of our Jenkins PR job configuration into this repo. /cc @bdash @tgoyne 
",jpsim,bdash
2887,2015-11-20 17:10:24,"This moves most of our Jenkins PR job configuration into this repo. /cc @bdash @tgoyne 
",jpsim,tgoyne
2870,2015-11-18 08:51:46,"This PR adds the required UUIDs for Xcode versions 7.0, 7.1 (Including 7.1.1) and 7.2-beta to enable the Realm Plugin to work with those versions.

Tested and confirmed working against Xcode 7.1.1 and Xcode 7.2-beta on OS X El Capitan.

/cc @jpsim @bdash 
",TimOliver,jpsim
2870,2015-11-18 08:51:46,"This PR adds the required UUIDs for Xcode versions 7.0, 7.1 (Including 7.1.1) and 7.2-beta to enable the Realm Plugin to work with those versions.

Tested and confirmed working against Xcode 7.1.1 and Xcode 7.2-beta on OS X El Capitan.

/cc @jpsim @bdash 
",TimOliver,bdash
2849,2015-11-17 15:59:56,"@alazier also suggested `PrimaryId` instead of `Identifier` as it still keeps some resemblance to `PrimaryKey` while being different. `PrimaryIdentifier` was also suggested but seems kinda long.
",cmelchior,alazier
2848,2015-11-12 17:29:02,"Fixes #2844. 
/c @bigfish24 
",mrackwitz,bigfish24
2842,2016-01-07 20:20:20,"I'm done reviewing. :+1: this is nothing short of fantastic work! Extremely thorough tests. :clap: :100: 

I think your modifications to the examples are sufficient for now. At some point it could be useful to add an example demonstrating how async queries are useful with components as was mentioned in this PR's comments.

We'll need to copy some of the Results docs you added here to the Queries section of the docs.

@bdash did you want to review this further? It'd be nice if you could give this another look.
",jpsim,bdash
2838,2015-12-18 19:41:44,"@TimOliver just added a section on this in our docs: https://realm.io/docs/swift/latest/#adding-custom-initializers-to-object-subclasses
",jpsim,TimOliver
2836,2015-11-11 10:53:17,"@WayneNotTaken Because `554654727986033` is overflowed in a 32-bit integer. If you'd like to store the ID as an integer in 32-bit devices, use `long long` instead `NSInteger`, `int` or `long`. Or you can convert an integer to a string and store the value as `String`.
",kishikawakatsumi,WayneNotTaken
2829,2015-11-10 17:41:30,"/cc @bdash 
",jpsim,bdash
2822,2015-11-09 16:34:05,"Fixes https://github.com/realm/realm-cocoa/issues/2766

This PR makes archive include `bcsymbolmap` and `dSYM` files. The size of archive increase 25MB to 45MB due to `dSYM` files.

cc/ @jpsim @bdash 

**BEFORE**



**AFTER**


",kishikawakatsumi,jpsim
2822,2015-11-09 16:34:05,"Fixes https://github.com/realm/realm-cocoa/issues/2766

This PR makes archive include `bcsymbolmap` and `dSYM` files. The size of archive increase 25MB to 45MB due to `dSYM` files.

cc/ @jpsim @bdash 

**BEFORE**



**AFTER**


",kishikawakatsumi,bdash
2819,2015-11-10 04:33:52,"Hi @hibento! Thanks for your issue! :)

Ahhh, I see what's going on. Given the scope of the input `MyClass` object with this method, you're directly passing a Realm `Object` across threads when you open the GCD block, a pattern that's explicitly disallowed once the `Object` is written to a Realm. While it 'works' when you're creating the object for the first time (Since the object does not yet belong to a Realm file), it's not a good pattern to rely on, and the exception you're getting on subsequent updates is expected behaviour.

You might need to rethink your logic pattern here slightly to avoid explicitly passing objects between threads. For example, instead of directly passing an `Object` between threads, simply provide a dictionary object containing the values you wish to update, and pass that to the new thread instead.

Let me know if you need any more clarification! :)
",TimOliver,hibento
2817,2015-11-07 18:04:12,"Requires https://github.com/realm/jazzy/pull/341. Output can be browsed here: https://static.realm.io/jazzy_demo/Realm/

/cc @tgoyne @bdash @timanglade 
",jpsim,timanglade
2817,2015-11-07 18:04:12,"Requires https://github.com/realm/jazzy/pull/341. Output can be browsed here: https://static.realm.io/jazzy_demo/Realm/

/cc @tgoyne @bdash @timanglade 
",jpsim,tgoyne
2817,2015-11-07 18:04:12,"Requires https://github.com/realm/jazzy/pull/341. Output can be browsed here: https://static.realm.io/jazzy_demo/Realm/

/cc @tgoyne @bdash @timanglade 
",jpsim,bdash
2812,2015-11-12 04:32:40,"Hi @raulzito234! I hope that answered your question!

Since this looks resolved, I'm closing the issue now. If you have additional questions, please feel free to re-open it! :)
",TimOliver,raulzito234
2810,2015-11-06 10:04:32,"@mrackwitz the reason seems that realm can not parse null. 
",yuldong,mrackwitz
2808,2015-11-05 19:38:05,"we couldn't do this before because we didn't support building Realm Swift from source, relying instead on testing the last prebuilt binaries uploaded to GitHub releases.

/cc @bdash 
",jpsim,bdash
2801,2015-11-04 18:45:45,"We were using Realm for the first time today and immediately ran into various issues.

First Realm rejected our class because it ""cannot be nested within other declarations"".
Actually the class isn't nested within anything. It's just that the class is marked `private`.

Then we tried to work around the issue by annotating the class with `@objc(MyRealmClass)` so the class ends up in the global namespace. But Realm just crashed:



The way Realm handles Swift classes is very fragile at the moment:
- Realm looks for a dot `.` in the class name to check whether a class is a Swift class ( `+[RLMSwiftSupport isSwiftClassName:]`). Swift classes don't necessarily have a dot in their demangled name when using `@objc`. Instead Realm could just check if the class in question is a subclass of `RealmSwift.Object`.
- Realm does only use the innermost class name and drops the module name (nested types aren't support anyway). So if two distinct Swift modules happen use the same class name for a Realm object the app will crash.
- Also as hinted in the code's comments `NSStringFromClass` doesn't fully demangle names. But Realm can use Swift's [`_stdlib_demangleName(…)`](http://swiftstub.com/743669163) instead to reliably get a class' name without relying in Swift internals.
#### Bottom Line

The bottom line is that Swift cleanly separates types using modules and nesting but Realm works against that by throwing all Realm object classes in one global dictionary again while dropping parts of the type's name.

Since a type's full name (including module, outer types, file hashes, etc.) can and will change from time to time (usual when iterating & refactoring) the developer should be given more control over the process. Also the process should be much more transparent. It's an easy oversight that renaming or even moving a class causes a change in it's full type name which in turn will lead to unexpected behavior at runtime when Realm does no longer find the class' objects. `NSSecureCoding` has the same issue and we were looking forward to not have the same issues again with Realm.

`RealmSwift.Object` already has a property named `className` which unfortunately is `final`. Being able to manually specify the class/table name would allow developers to avoid all the issues listed above. They would have full control over table naming, no more unexpected behavior and Realm doesn't need to perform fragile reverse-engineering of Swift class names.

---

NB: The variable `RealmSwift.Object.className` is declared `final` and then overridden in dynamically created subclasses. That means the compiler can optimize any access to the variable by using [static access instead of dynamic dispatch](https://developer.apple.com/swift/blog/?id=27). So depending on current and future compiler optimizations the variable may randomly return an empty string instead of the expected value since the implementations in the dynamically created subclasses are never called.

---


",fluidsonic,objc
2801,2015-11-04 19:07:12,"> Realm looks for a dot . in the class name to check whether a class is a Swift class ( +[RLMSwiftSupport isSwiftClassName:]). Swift classes don't necessarily have a dot in their demangled name when using @objc. Instead Realm could just check if the class in question is a subclass of RealmSwift.Object.

We also support Swift-defined subclases of `RLMObject` (primarily for the sake of people writing Swift targeting iOS 7), which require the same Swift-specific handling despite not being `RealmSwift.Object` subclasses. I don't think there's any reason we couldn't check both, though.

> Realm does only use the innermost class name and drops the module name (nested types aren't support anyway). So if two distinct Swift modules happen use the same class name for a Realm object the app will crash.

The primary reason for this (and also the reason for not supporting nested types) is that Swift itself does the same stripping in the property types reported to the obj-c runtime, so if there are multiple classes with the same name we can't actually determine which one a property is using. We also can't determine it via Swift reflection without requiring a non-nil default for object properties, as you can only get the runtime type of the value of a property and not the declared type.

> Also as hinted in the code's comments NSStringFromClass doesn't fully demangle names. But Realm can use Swift's _stdlib_demangleName(…) instead to reliably get a class' name without relying in Swift internals.

That is not a public function. Using it risks getting app store rejections due to private symbol use, and doesn't eliminate the chance of things breaking when a new Xcode beta comes out, as they could remove it without warning.
",tgoyne,objc
2800,2015-11-04 17:56:59,"When adding the optional upgrade path feature to Realm Browser, it was necessary to expose the 'disallow file upgrade' option in the Core via the Cocoa binding. 

I tried to keep this new API private, and all internal modifications to be as unobtrusive as possible, but please let me know if you think there's anything that needs changing. 

/cc @jpsim @tgoyne 
",TimOliver,jpsim
2800,2015-11-04 17:56:59,"When adding the optional upgrade path feature to Realm Browser, it was necessary to expose the 'disallow file upgrade' option in the Core via the Cocoa binding. 

I tried to keep this new API private, and all internal modifications to be as unobtrusive as possible, but please let me know if you think there's anything that needs changing. 

/cc @jpsim @tgoyne 
",TimOliver,tgoyne
2800,2015-11-09 23:00:28,"You've improved this a lot, @TimOliver! Thanks. This looks good to me. Further thoughts @bdash?
",jpsim,bdash
2798,2015-11-05 04:57:09,"+1 
Was messing around with this and had to do some witchcraft combination of forward-declarations and playing with syntax just to get a basic bidirectional relationship to compile.

It was the @protocol declaration that was the tricky one (your post here helped clear it up https://github.com/realm/realm-cocoa/issues/2788)
",gadu,protocol
2796,2015-11-04 11:51:00,"Xcode 7.2 beta  introduced Swift 2.1.**1**. Build fails due to returning Swift version 2.1.1. This PR will just create a symbolic link to RealmSwift-swift2.0 because Swift 2.1.1 does not break anything our code.

@jpsim @bdash 
",kishikawakatsumi,jpsim
2796,2015-11-04 11:51:00,"Xcode 7.2 beta  introduced Swift 2.1.**1**. Build fails due to returning Swift version 2.1.1. This PR will just create a symbolic link to RealmSwift-swift2.0 because Swift 2.1.1 does not break anything our code.

@jpsim @bdash 
",kishikawakatsumi,bdash
2795,2015-11-26 12:49:43,"I'm going to re-open this one as I've successfully reproduced it with a 100% success rate on this conditions:
- I'm using [RBQFetchedResultsController](https://github.com/Roobiq/RBQFetchedResultsController) on a `UICollectionView`
- Scheduled a query for retrieving all my objects (on Main Thread)
- On the exact moment before the query is triggered, I start (quickly) scrolling my `UICollectionView` (it spawns fetch requests to realm on the same (Main) thread I suppose)
- The scheduled query was hang on a breakpoint with zero results.

**Quick fix**: performing the query on background fixed it. Is this supposed to happen?

@bigfish24, a little help here, have you ever replicated a scenario like this?
",crsantos,bigfish24
2795,2015-11-30 12:21:16,"I am experiencing something similar to @crsantos.

I am implementing a chat view backed by an `UICollectionView`. I am having a crash whenever users send a message and scroll on the collectionview. I am also using @bigfish24's FRC.

The crash is due to the FRC not returning objects, and is instead returning nil. But I am positive that it can't return nil for those index paths.
",beloso,bigfish24
2795,2015-12-02 00:52:40,"@crsantos and @TiagoVeloso any chance you can share your source code privately to help figure out the issue?
",bigfish24,TiagoVeloso
2795,2015-12-04 00:48:07,"@crsantos and @TiagoVeloso I would suggest you look at the implementation for [ABFRealmGridController](https://github.com/bigfish24/ABFRealmGridController) because this is a `UICollectionViewController` subclass that is using RBQFRC as its backing data source. It automatically updates based on results from the New York Times API and animates the changes... I have never encountered the scenario you describe.
",bigfish24,TiagoVeloso
2795,2015-12-10 21:20:38,"First of all @bigfish24: thank you so much  for fixing this in such a quick timeframe.

Thumbs up to your wonderful and detailed explanation of the issue. 
Now I can totally understand that the ""myth"" that UI animations rules (NSEventTrackingRunLoopMode) over other resources is true. 

And thanks again for pointing that excelent reading about IPC on @realm. Excelent piece of engineering!

I hope this fix will also help many more users as it helps us.

Cheers,

Carlos

> On 10 Dec 2015, at 19:56, Adam Fish notifications@github.com wrote:
> 
> The issue was related to how Realm notifies other Realm instances to update. When you commit a write transaction on a background thread, a notification is then sent to other Realm instances on other threads (this works through a named pipe) to refresh to the latest version of the DB that includes the recently committed transaction. The problem though is that notification is processed on the receiving thread only during the default run loop mode. When you are scrolling, the main thread will run in NSEventTrackingRunLoopMode for that pass of the run loop. This means that Realm's notification will not be processed until the thread is back in default mode.
> 
> The result of this means that RBQFetchedResultsController should simply manually call refresh on the Realm that contains the objects backed by the FRC before attempting to retrieve it. This alleviates the assumption that the notification to trigger the refresh has been processed before object/safeObjectAtIndexPath: is called.
> 
> I can confirm this commit fixes the problem: Roobiq/RBQFetchedResultsController@03de5b6
> 
> —
> Reply to this email directly or view it on GitHub.
",crsantos,realm
2795,2015-12-11 23:13:51,"@crsantos happy I could help! Definitely enjoy working along side @tgoyne and others on the team that deserve the credit for teaching me about IPC and other topics.
",bigfish24,tgoyne
2793,2015-11-04 04:57:05,"Some of the earlier CI failures were due to the CocoaPods specs GitHub repository being unavailable. Everything is working now though!

/cc @jpsim @tgoyne 
",bdash,jpsim
2793,2015-11-04 04:57:05,"Some of the earlier CI failures were due to the CocoaPods specs GitHub repository being unavailable. Everything is working now though!

/cc @jpsim @tgoyne 
",bdash,tgoyne
2786,2015-11-03 01:16:35,"define a class:
# import <Realm/Realm.h>

@interface YYYProductInfo : RLMObject
@property NSString *name;
@property NSInteger price;
@property NSData *productDescription;
@property NSDate *date;
@end
RLM_ARRAY_TYPE(YYYProductInfo)
then, we could insert a product to a realm like this: 



If I want to insert many products once a time, how could i do?
",yuldong,end
2786,2015-11-03 01:16:35,"define a class:
# import <Realm/Realm.h>

@interface YYYProductInfo : RLMObject
@property NSString *name;
@property NSInteger price;
@property NSData *productDescription;
@property NSDate *date;
@end
RLM_ARRAY_TYPE(YYYProductInfo)
then, we could insert a product to a realm like this: 



If I want to insert many products once a time, how could i do?
",yuldong,interface
2786,2015-11-03 01:16:35,"define a class:
# import <Realm/Realm.h>

@interface YYYProductInfo : RLMObject
@property NSString *name;
@property NSInteger price;
@property NSData *productDescription;
@property NSDate *date;
@end
RLM_ARRAY_TYPE(YYYProductInfo)
then, we could insert a product to a realm like this: 



If I want to insert many products once a time, how could i do?
",yuldong,property
2784,2015-11-03 00:07:03,"Because the closure will not be stored anywhere and executed synchronously.
Also, we can use an implicit `self`, saving us from typing `self`.

cc/ @jpsim @mrackwitz 
",kishikawakatsumi,mrackwitz
2784,2015-11-03 00:07:03,"Because the closure will not be stored anywhere and executed synchronously.
Also, we can use an implicit `self`, saving us from typing `self`.

cc/ @jpsim @mrackwitz 
",kishikawakatsumi,jpsim
2783,2015-11-02 23:30:06,"Update `xcrealm_work_around_rdar_23055637` to invoke the expected-to-fail build in a subshell so we can ignore its exit status in all cases.

This should also fix the releasability tests as they invoke `test-iso-static` with `XCMODE=xcpretty`.

/cc @jpsim @tgoyne 
",bdash,jpsim
2783,2015-11-02 23:30:06,"Update `xcrealm_work_around_rdar_23055637` to invoke the expected-to-fail build in a subshell so we can ignore its exit status in all cases.

This should also fix the releasability tests as they invoke `test-iso-static` with `XCMODE=xcpretty`.

/cc @jpsim @tgoyne 
",bdash,tgoyne
2782,2015-11-02 23:12:07,"A Results made from link query has wrong results after deleting the right-hand side object of the condition. It occurs because the row index is changed unintentionally.

Steps to reproduce.
- Define following two models, `Dog` and `Person`. `Dog` has `Person` as `owner` property:


- Save two `Dog` objects, each objects has `person` objects as `owner` like following:


- Query for the `Dog` that has `person1` as `owner`.



The query returns `dog1`, then delete `person`.



Now the `results` has `dog2`. An expected result is to return empty.

cc/ @jpsim @bdash 
",kishikawakatsumi,jpsim
2782,2015-11-02 23:12:07,"A Results made from link query has wrong results after deleting the right-hand side object of the condition. It occurs because the row index is changed unintentionally.

Steps to reproduce.
- Define following two models, `Dog` and `Person`. `Dog` has `Person` as `owner` property:


- Save two `Dog` objects, each objects has `person` objects as `owner` like following:


- Query for the `Dog` that has `person1` as `owner`.



The query returns `dog1`, then delete `person`.



Now the `results` has `dog2`. An expected result is to return empty.

cc/ @jpsim @bdash 
",kishikawakatsumi,bdash
2781,2015-11-02 22:41:49,"`TARGET_OS_IOS` is new in iOS 9.0, so builds made with older iOS SDKs were reported as targeting OS X. Switch to using `TARGET_OS_IPHONE` instead.

/cc @jpsim @timanglade 
",bdash,jpsim
2781,2015-11-02 22:41:49,"`TARGET_OS_IOS` is new in iOS 9.0, so builds made with older iOS SDKs were reported as targeting OS X. Switch to using `TARGET_OS_IPHONE` instead.

/cc @jpsim @timanglade 
",bdash,timanglade
2780,2015-11-02 14:48:04,"This is what my models look like.



Now, say I want display to a user, an auto-updating list of only those feeds that have (1 or more) unread items, in a UITableView.
Ideally, I would fetch it like this: 



But, with the above query, Realm throws an exception with the reason: '@sum can only be applied to a numeric property.'

Any chance, we can get support for this operator on BOOL properties?

I have several other use cases for sumOfProperty: to also be allowed on BOOL properties, and in general all 'Aggregating Property Values' methods to be made available on RLMArray.
",kunalsood,sum
2780,2015-11-06 00:05:45,"Seems like a reasonable request to support aggregate operators on boolean columns. Now that the infrastructure is in place for this functionality, I'd imagine it'd be pretty simple to implement, but @bdash would know more.
",jpsim,bdash
2775,2015-11-02 02:44:10,"Hello,
I encountered a problem

@interface Dog : RLMObject
@property NSString *name;
@property NSInteger age;
@end

@implementation JKLock
- (NSArray *)ignoredProperties {
  return @[@""age""];
  }

@end

I want to modify the age value at run time,but do not store,just use in memory, what should i do!
Thanks!
",KinJ,implementation
2775,2015-11-02 02:44:10,"Hello,
I encountered a problem

@interface Dog : RLMObject
@property NSString *name;
@property NSInteger age;
@end

@implementation JKLock
- (NSArray *)ignoredProperties {
  return @[@""age""];
  }

@end

I want to modify the age value at run time,but do not store,just use in memory, what should i do!
Thanks!
",KinJ,end
2775,2015-11-02 02:44:10,"Hello,
I encountered a problem

@interface Dog : RLMObject
@property NSString *name;
@property NSInteger age;
@end

@implementation JKLock
- (NSArray *)ignoredProperties {
  return @[@""age""];
  }

@end

I want to modify the age value at run time,but do not store,just use in memory, what should i do!
Thanks!
",KinJ,interface
2775,2015-11-02 02:44:10,"Hello,
I encountered a problem

@interface Dog : RLMObject
@property NSString *name;
@property NSInteger age;
@end

@implementation JKLock
- (NSArray *)ignoredProperties {
  return @[@""age""];
  }

@end

I want to modify the age value at run time,but do not store,just use in memory, what should i do!
Thanks!
",KinJ,property
2775,2015-11-02 02:46:50,"sorry, should be this
@implementation Dog
- (NSArray *)ignoredProperties { return @[@""age""]; }
  @end
",KinJ,implementation
2775,2015-11-02 02:46:50,"sorry, should be this
@implementation Dog
- (NSArray *)ignoredProperties { return @[@""age""]; }
  @end
",KinJ,end
2775,2015-11-02 07:55:38,"@LoveElaine `+ ignoredProperties` method should be class method. Please change the minus sign of the method to a plus sign like following:


",kishikawakatsumi,LoveElaine
2775,2015-11-12 03:56:56,"Hi @LoveElaine! Hopefully that answered your question. Don't forget that if you specify a property as ignored, it will only be available in the instance of the object in which you've set it.

I'm going to close this issue now. If you still have more questions, feel free to re-open it! :)
",TimOliver,LoveElaine
2770,2015-10-30 11:34:43,"I heard @kishikawakatsumi confirmed that error occurred in the following combination:
- Java 0.82.2/ObjC 0.95.3
- Java 0.84.1/ObjC 0.96.2
",zaki50,kishikawakatsumi
2770,2015-10-30 14:21:20,"I confirmed that the class name in the pk_table has not had a prefix from Realm ObjC 0.85 (it was the first version introduced primary key feature) to latest one.

I saw pk_table of the file generated 0.85 by a debugger, and also confirmed migration exception was occurred opening in Java. If primary key annotation would be removed, it works fine.

Any thoughts? @tgoyne @jpsim @cmelchior 
",kishikawakatsumi,jpsim
2770,2015-10-30 14:21:20,"I confirmed that the class name in the pk_table has not had a prefix from Realm ObjC 0.85 (it was the first version introduced primary key feature) to latest one.

I saw pk_table of the file generated 0.85 by a debugger, and also confirmed migration exception was occurred opening in Java. If primary key annotation would be removed, it works fine.

Any thoughts? @tgoyne @jpsim @cmelchior 
",kishikawakatsumi,tgoyne
2770,2015-10-30 14:21:20,"I confirmed that the class name in the pk_table has not had a prefix from Realm ObjC 0.85 (it was the first version introduced primary key feature) to latest one.

I saw pk_table of the file generated 0.85 by a debugger, and also confirmed migration exception was occurred opening in Java. If primary key annotation would be removed, it works fine.

Any thoughts? @tgoyne @jpsim @cmelchior 
",kishikawakatsumi,cmelchior
2759,2015-10-28 18:50:50,"`*.bcsymbolmap` files are necessary to submit an app with including debug symbols. If there are no those files, following error occurs unless uncheck ""include app symbols ...""

![untitled](https://cloud.githubusercontent.com/assets/40610/10799433/2189cfd0-7df0-11e5-8cf2-42d8dceffe7e.png)



This PR makes it include the `*.bcsymbolmap` files to the each framework bundles. Those files are moved to an app bundle when archiving.

See also:
[Missing BCSymbolMap for AppStore Submission - Xcode7B5](https://forums.developer.apple.com/thread/14729)

/cc @jpsim @mrackwitz 
",kishikawakatsumi,mrackwitz
2759,2015-10-28 18:50:50,"`*.bcsymbolmap` files are necessary to submit an app with including debug symbols. If there are no those files, following error occurs unless uncheck ""include app symbols ...""

![untitled](https://cloud.githubusercontent.com/assets/40610/10799433/2189cfd0-7df0-11e5-8cf2-42d8dceffe7e.png)



This PR makes it include the `*.bcsymbolmap` files to the each framework bundles. Those files are moved to an app bundle when archiving.

See also:
[Missing BCSymbolMap for AppStore Submission - Xcode7B5](https://forums.developer.apple.com/thread/14729)

/cc @jpsim @mrackwitz 
",kishikawakatsumi,jpsim
2758,2015-10-28 17:21:36,"The warnings are being emitted for two option enums that have no explicit ""none"" member, and for `NSCalendar`'s misuse of an option enum as an argument type where it expects the multiple options to be combined.

/cc @jpsim @tgoyne 
",bdash,jpsim
2758,2015-10-28 17:21:36,"The warnings are being emitted for two option enums that have no explicit ""none"" member, and for `NSCalendar`'s misuse of an option enum as an argument type where it expects the multiple options to be combined.

/cc @jpsim @tgoyne 
",bdash,tgoyne
2756,2015-10-29 22:30:38,"@kishikawakatsumi, it should be relatively easy for you to resolve the conflicts this will cause with #2721. You should just need to revert your changes to `Realm.xcodeproj`, and make similar changes to the new .xcconfig files as you made for RealmSwift.
",bdash,kishikawakatsumi
2756,2015-10-29 22:40:31,"A couple of things to be aware of:
- The iOS static framework is now the special one, with its build directory having a `-static` suffix. I made this change because the dynamic frameworks are common across all platforms. The existing approach also lead to an odd situation where `build/ios` contained a mix of static and dynamic frameworks (for Swift). Now `ios` contains only dynamic frameworks, and `ios-static` contains only static frameworks.
- `TestHost.app` is now used for tests on all platforms, rather than OS X and iOS Simulator tests being run directly by `xctest`. `xctest` is now used only as the child process for multiprocess tests.
- `RLMPlatform.h` is now generated dynamically as it was difficult to ensure that Xcode picked the right one for each platform. This probably isn't necessary, but I got bored with fighting Xcode and went with a solution that I knew I could make work. I'll revisit this at some point and simplify it.
- There's a lot of redundancy between the Realm and RealmSwift .xcconfig files. I'll clean that up in a later pass.

/cc @jpsim @tgoyne 
",bdash,jpsim
2756,2015-10-29 22:40:31,"A couple of things to be aware of:
- The iOS static framework is now the special one, with its build directory having a `-static` suffix. I made this change because the dynamic frameworks are common across all platforms. The existing approach also lead to an odd situation where `build/ios` contained a mix of static and dynamic frameworks (for Swift). Now `ios` contains only dynamic frameworks, and `ios-static` contains only static frameworks.
- `TestHost.app` is now used for tests on all platforms, rather than OS X and iOS Simulator tests being run directly by `xctest`. `xctest` is now used only as the child process for multiprocess tests.
- `RLMPlatform.h` is now generated dynamically as it was difficult to ensure that Xcode picked the right one for each platform. This probably isn't necessary, but I got bored with fighting Xcode and went with a solution that I knew I could make work. I'll revisit this at some point and simplify it.
- There's a lot of redundancy between the Realm and RealmSwift .xcconfig files. I'll clean that up in a later pass.

/cc @jpsim @tgoyne 
",bdash,tgoyne
2749,2015-10-26 19:21:59,"`testRealmCreationUncached` is slow and has high variance, causing frequent failures on CI. Removing the baseline allows the test to be run locally while avoiding the sporadic failures on CI.

/cc @tgoyne 
",bdash,tgoyne
2743,2015-10-24 00:39:53,"Makes it easier to figure out what's wrong in scenarios like described in #2720.
- [ ] Test
- [ ] Actual assert C function which catches exceptions and can be used from Swift

/c @tgoyne @jpsim
",mrackwitz,jpsim
2743,2015-10-24 00:39:53,"Makes it easier to figure out what's wrong in scenarios like described in #2720.
- [ ] Test
- [ ] Actual assert C function which catches exceptions and can be used from Swift

/c @tgoyne @jpsim
",mrackwitz,tgoyne
2743,2015-11-03 20:11:30,"## Summary of Discussions

As this verification is very specific, we should think of whether we could do that in a more general fashion at a different place. There are different options, which I want to layout here, so that we could decide on whether we settle on one of them or don't do any verification like that at all. It all boils down to enforcing our modified `RLMObject` class contract in differentiation to the expectations given from Foundation/Cocoa/`NSObject`. For all options, it could likely make sense to reduce the performance impact by executing them only in the Debug configuration and so not affecting distributed builds of the user's apps.

### Variant A: Check type on initial / every value access

Instead of relying on KVC directly via `valueForKey:`, we could instead encapsulating retrieving the properties value in a method / function. This could then contain further type verification and assert when the type conflicts with the expectations.

### Variant B: Scan & forbid overwritten alternate KVC accessors

As Realm implements custom accessors on `RLMObject` subclasses, we could just completely forbid users to implement alternate KVC methods. (e.g. `is<Key>`, `get<Key>`, …)

## Questions

/c @jpsim @tgoyne @bdash 
- Do these variants make sense and how I described them? How can they be improved?
- Is there any other variant I may have forgotten here?
",mrackwitz,jpsim
2743,2015-11-03 20:11:30,"## Summary of Discussions

As this verification is very specific, we should think of whether we could do that in a more general fashion at a different place. There are different options, which I want to layout here, so that we could decide on whether we settle on one of them or don't do any verification like that at all. It all boils down to enforcing our modified `RLMObject` class contract in differentiation to the expectations given from Foundation/Cocoa/`NSObject`. For all options, it could likely make sense to reduce the performance impact by executing them only in the Debug configuration and so not affecting distributed builds of the user's apps.

### Variant A: Check type on initial / every value access

Instead of relying on KVC directly via `valueForKey:`, we could instead encapsulating retrieving the properties value in a method / function. This could then contain further type verification and assert when the type conflicts with the expectations.

### Variant B: Scan & forbid overwritten alternate KVC accessors

As Realm implements custom accessors on `RLMObject` subclasses, we could just completely forbid users to implement alternate KVC methods. (e.g. `is<Key>`, `get<Key>`, …)

## Questions

/c @jpsim @tgoyne @bdash 
- Do these variants make sense and how I described them? How can they be improved?
- Is there any other variant I may have forgotten here?
",mrackwitz,tgoyne
2743,2015-11-10 16:27:02,"I'm not super clear on what kind of validation we should be doing, and how to achieve it. Thoughts @tgoyne @bdash?
",jpsim,tgoyne
2736,2015-10-23 08:09:19,"@danielpovlsen It will occur on the case-sensitive file system. Fixed at https://github.com/realm/realm-cocoa/pull/2675

The suggested workarounds are: 
- To use CocoaPods 0.38
- Copy your project to external disk formatted by case-insensitive file system. (Using disk image is the easiest way), then execute `pods install` there.
- That fix has been merged to master. So specify branch to install from `master`.
- Setup without CocoaPods. It will occur only CocoaPods install
",kishikawakatsumi,danielpovlsen
2734,2015-10-23 04:17:56,"/cc @mrackwitz @bdash 
",kishikawakatsumi,mrackwitz
2734,2015-10-23 04:17:56,"/cc @mrackwitz @bdash 
",kishikawakatsumi,bdash
2730,2015-10-22 12:49:58,"RealmSwift 0.96.1 crashes in the following scenario with reason `*** Terminating app due to uncaught exception 'Invalid property name', reason: 'Property 'b.@sum.sum' not found in object of type 'A''` when querying value of an aggregate operator against another value of aggregate operator.



I have also sent this as a sample project to help@realm.io.
",anlaital,sum
2721,2015-11-12 17:45:34,"I've still not seen running tests on AppleTV devices from a command line. But they are succeeded running from Xcode (⌘ + U). So now @jp could you try to execute on CI machine? 
",kishikawakatsumi,jp
2720,2015-10-23 18:25:06,"@mrackwitz @jpsim @realm-ci I figured this issue, it's because of i am having function named `getMetadata()` in `ServerTrackMetadata`. One thing i want to tell you guys is that error message is too much weird, No one can predict this can be issue. I spent around 3-4 days to figure out this weird stuff. :disappointed: 
",bipinvaylu,jpsim
2720,2015-10-23 18:25:06,"@mrackwitz @jpsim @realm-ci I figured this issue, it's because of i am having function named `getMetadata()` in `ServerTrackMetadata`. One thing i want to tell you guys is that error message is too much weird, No one can predict this can be issue. I spent around 3-4 days to figure out this weird stuff. :disappointed: 
",bipinvaylu,realm-ci
2718,2015-10-21 03:48:42,"pulls CocoaPods with the `sha` environment variable if present, `master` otherwise. /cc @bdash 
",jpsim,bdash
2716,2015-10-22 18:33:27,"@codywinton i updated to xcode 7.1(swift 2.1) this morning and now i am stuck with this issue on my current project (my first realm project) and most of the stuff said above is beyond my current knowledge, (i know how to add the realm frameworks to xcode and really not much else outside of swift/xcode/objc). can you you advise me or point me to a version thats already built for swift 2.1?
",hardinm78,codywinton
2716,2015-10-22 19:22:38,"@codywinton you are an angel sent from heaven, that worked! i am back in business!
",hardinm78,codywinton
2716,2015-10-23 06:37:14,"@codywinton Yes, even tried to do clone the repo again and also used different versions and tested the tg-xcode-7.1 branch. No success. :(
",moogle19,codywinton
2716,2015-10-23 15:20:43,"@Dudi00 Good idea. Thanks!
",jakecraige,Dudi00
2716,2015-10-23 20:25:11,"@jakecraige Working on it at the moment! @bdash and @tgoyne are trying to get something out the door asap but the CI upgrade was more complicated than expected due to vacations and other complications. Keep an eye on this issue, our blog or Twitter!
",timanglade,bdash
2716,2015-10-23 20:25:11,"@jakecraige Working on it at the moment! @bdash and @tgoyne are trying to get something out the door asap but the CI upgrade was more complicated than expected due to vacations and other complications. Keep an eye on this issue, our blog or Twitter!
",timanglade,tgoyne
2716,2015-10-24 13:06:03,"thanks @codywinton 
",shahankit,codywinton
2714,2015-10-21 01:06:08,"Realm doesn't compile with CocoaPods without this (see https://ci.realm.io/job/Cocoa%20Installation%20Examples/12/). /cc @bdash 
",jpsim,bdash
2713,2016-11-22 15:25:55,"This is ridiculous, if the developers from China needs to download the zipped file to local temp directory to let cocoapods to detect it, why not just [download](https://realm.io/docs/objc/latest) the dylib/static framework and add the dependency to project manually directly?

All the pods just pass except the realm-cocoa for command `pod install`, cocoapods brings the conveniences for developers to manage the 3rd-party packages and easy integration way. If the realm team won't support it, the China developer should switch to manual way w/o any hesitation to use it.

BTW, that would be so nice to write a note/tips in README.md file in github and realm.io/docs, since this issue has blocked so many developers. @realm-admin 

BTW, I'm a developer from China. Many thanks for your great job!",xingheng,realm-admin
2709,2015-10-19 21:25:59,"Because -[NSTask suspend] is asynchronous and there doesn't seem to be a
reliable way to check this programmatically, and this spuriously fails on CI on
a regular basis.

The intent of this test is also tested elsewhere in the interprocess tests.

Resolves #2119. /cc @tgoyne 
",jpsim,tgoyne
2702,2015-10-17 01:16:17,"Should address #2678 but is blocked on us resolving #2701. /cc @bdash 
",jpsim,bdash
2697,2015-12-02 02:23:56,"After speaking with @tgoyne, he clarified that our API contract is that the order of values in the array passed to `createInRealm:withValue:` only needs to match the declared order of properties, not the order of columns in the table on disk. That indicates there's more going on here than I expected: my debugging indicated we were depending on the order of the properties in the Realm on disk.
",bdash,tgoyne
2696,2015-10-16 16:15:53,"Hey @jpsim -- this pull request implements [#2685](https://github.com/realm/realm-cocoa/issues/2685)

Wasn't sure what style you all wanted for documentation/testing so I just guestimated based on code elsewhere (sorta shooting from the hip!)

As a user I can already get this functionality myself by using an unsafeBitCast on the result of KVC, but it's nice to wrap away these types of casts so the user doesn't feel like they're doing something wrong.

Let me know what you think!
",tom-sparo,jpsim
2696,2015-10-17 01:17:54,"This looks all good to me, how about for you @bigfish24?
",jpsim,bigfish24
2691,2015-10-16 13:45:34,"## Task list for tvOS support
### Documentation
- [x] Installation
- [x] Limitation
  - [x] Storage
  - [x] App size
  - [x] ~~Encryption~~
  - [x] Inter process notification
- [x] Use cases
  - [x] Bundled data
  - [x] Inteligent Cache
### Unit tests
- [x] Logic tests (on Simulator)
- [x] Tests on device
### Sample code
- [x] Bundled data
- [x] Cache
### Build/Release Automation
- [x] Core
- [x] Realm/RealmSwift
- [x] CocoaPods
- [x] Carthage

I'd like to get your feedback.
/cc @jpsim @mrackwitz @timanglade @bigfish24 
",kishikawakatsumi,mrackwitz
2691,2015-10-16 13:45:34,"## Task list for tvOS support
### Documentation
- [x] Installation
- [x] Limitation
  - [x] Storage
  - [x] App size
  - [x] ~~Encryption~~
  - [x] Inter process notification
- [x] Use cases
  - [x] Bundled data
  - [x] Inteligent Cache
### Unit tests
- [x] Logic tests (on Simulator)
- [x] Tests on device
### Sample code
- [x] Bundled data
- [x] Cache
### Build/Release Automation
- [x] Core
- [x] Realm/RealmSwift
- [x] CocoaPods
- [x] Carthage

I'd like to get your feedback.
/cc @jpsim @mrackwitz @timanglade @bigfish24 
",kishikawakatsumi,jpsim
2691,2015-10-16 13:45:34,"## Task list for tvOS support
### Documentation
- [x] Installation
- [x] Limitation
  - [x] Storage
  - [x] App size
  - [x] ~~Encryption~~
  - [x] Inter process notification
- [x] Use cases
  - [x] Bundled data
  - [x] Inteligent Cache
### Unit tests
- [x] Logic tests (on Simulator)
- [x] Tests on device
### Sample code
- [x] Bundled data
- [x] Cache
### Build/Release Automation
- [x] Core
- [x] Realm/RealmSwift
- [x] CocoaPods
- [x] Carthage

I'd like to get your feedback.
/cc @jpsim @mrackwitz @timanglade @bigfish24 
",kishikawakatsumi,bigfish24
2691,2015-10-16 13:45:34,"## Task list for tvOS support
### Documentation
- [x] Installation
- [x] Limitation
  - [x] Storage
  - [x] App size
  - [x] ~~Encryption~~
  - [x] Inter process notification
- [x] Use cases
  - [x] Bundled data
  - [x] Inteligent Cache
### Unit tests
- [x] Logic tests (on Simulator)
- [x] Tests on device
### Sample code
- [x] Bundled data
- [x] Cache
### Build/Release Automation
- [x] Core
- [x] Realm/RealmSwift
- [x] CocoaPods
- [x] Carthage

I'd like to get your feedback.
/cc @jpsim @mrackwitz @timanglade @bigfish24 
",kishikawakatsumi,timanglade
2691,2015-10-21 01:44:48,"@bigfish24 was kind enough to lend his tv for our CI system until Realm can buy one when they go on sale on Monday. I've updated our CI setup to automatically attach the tv to a worker VM, which is tagged with `appletv` in Jenkins.

We now need to create a `build.sh` command similar to `test-ios-devices` that will pick up a TV if it's available and run the unit tests on that.
",jpsim,bigfish24
2690,2015-10-16 12:31:20,"@Padarom Carthage 0.9.2 or 0.9.3 will probably fix this issue. Please update your Carthage to the latest version. Carthage 0.9.2 and 0.9.3 cannot be installed via Homebrew. So you build Carthage from source or download and run the Carthage.pkg from latest release https://github.com/Carthage/Carthage/releases
",kishikawakatsumi,Padarom
2687,2015-10-16 00:34:22,"When this is ready to merge, we'll have to split the Jenkins job. We should merge #2656 before this to actually benefit from the parallelization. /cc @bdash @tgoyne 
",jpsim,bdash
2687,2015-10-16 00:34:22,"When this is ready to merge, we'll have to split the Jenkins job. We should merge #2656 before this to actually benefit from the parallelization. /cc @bdash @tgoyne 
",jpsim,tgoyne
2686,2015-10-16 12:21:16,"The problem here is that there were breaking file format changes introduced with version 0.96. Therefore the realm file needs to be migrated on disk, which only may happen when it was opened once in _read-write mode_. `[RLMRealm schemaVersionAtPath:error:]` relies on opening the realm in _read-only mode_ to read the current schema version. This is causing the crash.

As a workaround you may want to open the realm file first in read-write mode with a dynamic schema. This will make sure that the file format migrations happens, but you won't get any errors through the schema not-matching the new version of your schema.
You need to make use of a private Realm API for that declared in `RLMRealm_Private.h`. It is also accessible via `@import Realm.Private;` if you need to rely on module imports. You may want to do that in a dedicated file to make sure that you don't access any other APIs not intended for public usage.


",mrackwitz,import
2684,2015-10-15 15:37:27,"Fixes #2681. /cc @bdash @tgoyne 
",jpsim,bdash
2684,2015-10-15 15:37:27,"Fixes #2681. /cc @bdash @tgoyne 
",jpsim,tgoyne
2680,2015-10-14 22:18:28,"I ended up mostly rewriting the migration tests, since a lot of the tests simply didn't make any sense with the new way of doing things, but a large chunk of the migration functionality was sort of incidentally tested along the way in those tests (and nowhere else). The RLMRealm tests weren't as bad, but similarly required a lot of shuffling around due to tests for the removed functionality and tests for remaining things being entangled.

The changes to non-test code should all be straightforward and obvious (and the updated tests pass with none of the non-test changes other than the bug fix in migrateRealm:).

@jpsim @bdash 
",tgoyne,jpsim
2680,2015-10-14 22:18:28,"I ended up mostly rewriting the migration tests, since a lot of the tests simply didn't make any sense with the new way of doing things, but a large chunk of the migration functionality was sort of incidentally tested along the way in those tests (and nowhere else). The RLMRealm tests weren't as bad, but similarly required a lot of shuffling around due to tests for the removed functionality and tests for remaining things being entangled.

The changes to non-test code should all be straightforward and obvious (and the updated tests pass with none of the non-test changes other than the bug fix in migrateRealm:).

@jpsim @bdash 
",tgoyne,bdash
2675,2015-10-14 10:28:27,"/cc @jpsim @mrackwitz 
",kishikawakatsumi,mrackwitz
2675,2015-10-14 10:28:27,"/cc @jpsim @mrackwitz 
",kishikawakatsumi,jpsim
2670,2015-10-13 22:08:50,"`CGFloat` properties are discouraged, as the type is not platform independent. /cc @tgoyne 
",jpsim,tgoyne
2668,2015-10-13 21:18:10,"Addresses #2655. /cc @tgoyne @bdash 
",jpsim,tgoyne
2668,2015-10-13 21:18:10,"Addresses #2655. /cc @tgoyne @bdash 
",jpsim,bdash
2660,2015-10-13 14:45:36,"Thanks for bringing this to our attention. We all here can empathize and it's among our top priorities. We will keep trying harder to keep investing enough time into documenting and explaining our thoughts and ideas behind the API design and not only in moving forward with fixing bugs, implementing new features etc. 

It's not always easy to keep up in a fast moving environment like ours with Swift, especially with things like documentation, which are likely the most important as it's the first part of our database you come in touch with. But you have to see that some of our users are still stuck with Swift 1.2. Understandably! If you have a larger codebase, the changes required [are immense and it's not a trivial effort](https://twitter.com/andy_matuschak/status/648671170695335936).
We invested massive efforts in trying to keep up with the pace of Apple and are still supporting two Swift versions at the same time, with our [own tooling around documentation](https://github.com/realm/jazzy), we've build to make that possible for us [and others](http://blog.cocoapods.org/CocoaDocs-Colo/). We seemed to have missed the best point in time to fully go Swift 2.0 with our docs.
It's not quite true though, that we didn't take care for our website since 2014. You'd wonder if you'd see what massive changes we did to that since then. I will note though that this was seemingly still not enough. :memo: 

Gladly, I can report that we made some good progress on that. @jpsim just made sure that we automatically verify our code snippets in our documentation and discovered some typos and outdated snippets, we didn't quite caught when going through manually for every release. That's just a tiny piece in the puzzle, but one which will help us also in future to provide up-to-date code snippets. :tada:

1) That will be addressed soon - we're working on that, right now.
2) The API docs should be up-to-date as they are re-generated by CI on release. What are you missing / what is wrong specifically?
3) The examples in the repo are also built by CI to ensure that they always work with the latest release. I can also confirm that the examples especially in the here relevant [swift-2.0 directory](https://github.com/realm/realm-cocoa/tree/master/examples/ios/swift-2.0) work for me locally. Do you want to describe what kind of issues you're experiencing specifically?
4) So Simple examples are there. :relieved: I'd agree that there is a need for even more advanced examples. You're really welcome to describe for what kind of use-cases, you would expect further examples and more help from us.
",mrackwitz,jpsim
2656,2015-10-10 01:09:03,"These are now connected to CI so they need performance baselines. /cc @tgoyne 
",jpsim,tgoyne
2656,2015-10-13 20:05:03,"@tgoyne 
",jpsim,tgoyne
2651,2015-10-08 15:10:01,"Hi,

I am using Realm.io to build a file manager. Right now I fetch a set of files into an RLMResults object and display them as a list on a table view. The issue is I would like to allow swipe to delete on a file and don't want to refresh the entire table view. There should be a way for me to remove a single object from the RLMResults collection. I would also be open to any implementation suggestions. 

cc @jpsim 
",eni9889,jpsim
2649,2015-10-07 23:43:15,"Fixes #2634.

Ideally we'd support this via RealmCollectionType as well, but I couldn't really get that to work. /cc @tgoyne @bdash 
",jpsim,tgoyne
2649,2015-10-07 23:43:15,"Fixes #2634.

Ideally we'd support this via RealmCollectionType as well, but I couldn't really get that to work. /cc @tgoyne @bdash 
",jpsim,bdash
2649,2015-10-19 16:57:30,"Thoughts on this @bdash?
",jpsim,bdash
2640,2015-10-16 03:10:00,"@daniel-beard, that's a great test app. From a brief look I can see two issues, one in Realm and one in the test code:
1. `-[RLMRealm migrateRealm:]` doesn't appear to respect the schema version from the configuration, instead using only the schema version set via the legacy APIs. @tgoyne's change in 16194870 fixes this issue. We should pull that change into a point update.
2. With version 0.96 you'll need to explicitly state that your `NSString *`, `NSDate *` and `NSData *` properties are required by implementing `+requiredProperties` in each model class to avoid requiring a migration. Those data types are now considered to be nullable unless `+requiredProperties` says otherwise.
",bdash,tgoyne
2633,2015-10-05 17:50:08,"Rather than requiring that people using Xcode 6 use the swift-1.2 branch.

@jpsim 
",tgoyne,jpsim
2630,2015-10-05 02:32:15,"I try dynamic Realm(0.95.2) framework for faster build but it crash instead of static 
Please help! I don't know which one better, in this case, I have to use static one.
--Here the detail log--
dyld: Library not loaded: @rpath/Realm.framework/Realm
  Referenced from: /Users/lequysang/Library/Developer/CoreSimulator/Devices/84A5C2E9-76A1-496D-BFBD-DBC36AC88A82/data/Containers/Bundle/Application/1427FE87-0EDE-4099-9457-18C4EAF7647E/SwipeKeysEN.app/PlugIns/Englishone.appex/Englishone
  Reason: image not found
(lldb) 
----The Assembly log---
dyld`_dyld_start:
    0x7fff6dac2000 <+0>:   popq   %rdi
    0x7fff6dac2001 <+1>:   pushq  $0x0
    0x7fff6dac2003 <+3>:   movq   %rsp, %rbp
    0x7fff6dac2006 <+6>:   andq   $-0x10, %rsp
    0x7fff6dac200a <+10>:  subq   $0x10, %rsp
    0x7fff6dac200e <+14>:  movl   0x8(%rbp), %esi
    0x7fff6dac2011 <+17>:  leaq   0x10(%rbp), %rdx
    0x7fff6dac2015 <+21>:  movq   0x37abc(%rip), %r8        ; _dyld_start_static
    0x7fff6dac201c <+28>:  leaq   -0x23(%rip), %rcx         ; <+0>
    0x7fff6dac2023 <+35>:  subq   %r8, %rcx
    0x7fff6dac2026 <+38>:  leaq   -0x102d(%rip), %r8
    0x7fff6dac202d <+45>:  leaq   -0x8(%rbp), %r9
    0x7fff6dac2031 <+49>:  callq  0x7fff6dac2076            ; dyldbootstrap::start(macho_header const_, int, char const__, long, macho_header const_, unsigned long*)
->  0x7fff6dac2036 <+54>:  movq   -0x8(%rbp), %rdi //// Break here
    0x7fff6dac203a <+58>:  cmpq   $0x0, %rdi
    0x7fff6dac203e <+62>:  jne    0x7fff6dac2050            ; <+80>
    0x7fff6dac2040 <+64>:  movq   %rbp, %rsp
    0x7fff6dac2043 <+67>:  addq   $0x8, %rsp
    0x7fff6dac2047 <+71>:  movq   $0x0, %rbp
    0x7fff6dac204e <+78>:  jmpq   *%rax
    0x7fff6dac2050 <+80>:  addq   $0x10, %rsp
    0x7fff6dac2054 <+84>:  pushq  %rdi
    0x7fff6dac2055 <+85>:  movq   0x8(%rbp), %rdi
    0x7fff6dac2059 <+89>:  leaq   0x10(%rbp), %rsi
    0x7fff6dac205d <+93>:  leaq   0x8(%rsi,%rdi,8), %rdx
    0x7fff6dac2062 <+98>:  movq   %rdx, %rcx
    0x7fff6dac2065 <+101>: movq   (%rcx), %r8
    0x7fff6dac2068 <+104>: addq   $0x8, %rcx
    0x7fff6dac206c <+108>: testq  %r8, %r8
    0x7fff6dac206f <+111>: jne    0x7fff6dac2065            ; <+101>
    0x7fff6dac2071 <+113>: jmpq   *%rax
    0x7fff6dac2073 <+115>: nop  
",ikeyboard,rpath
2627,2015-10-02 19:35:08,"This expects core's tarball to have the following structure:



This automatically switches core bitcode symlink when building the ""iOS Dynamic"" target of Realm.xcodeproj.

Once this is merged, we'll need to update the `swift-1.2` branch's `Realm.podspec` to use `s.ios.vendored_library = librealm-ios-no-bitcode.a`. This way, we can point CocoaPods users of Realm Objective-C who can't update to Xcode 7 to point to the `swift-1.2` branch. This will also support CP users of Realm Swift.

To be extra safe, we should probably also be running `set-core-bitcode-symlink` when building the static iOS framework target (EDIT: Done).

/cc @tgoyne @bdash 
",jpsim,tgoyne
2627,2015-10-02 19:35:08,"This expects core's tarball to have the following structure:



This automatically switches core bitcode symlink when building the ""iOS Dynamic"" target of Realm.xcodeproj.

Once this is merged, we'll need to update the `swift-1.2` branch's `Realm.podspec` to use `s.ios.vendored_library = librealm-ios-no-bitcode.a`. This way, we can point CocoaPods users of Realm Objective-C who can't update to Xcode 7 to point to the `swift-1.2` branch. This will also support CP users of Realm Swift.

To be extra safe, we should probably also be running `set-core-bitcode-symlink` when building the static iOS framework target (EDIT: Done).

/cc @tgoyne @bdash 
",jpsim,bdash
2626,2015-10-02 16:19:22,"and add release notes for 0.95.3. /cc @tgoyne @bdash 
",jpsim,tgoyne
2626,2015-10-02 16:19:22,"and add release notes for 0.95.3. /cc @tgoyne @bdash 
",jpsim,bdash
2614,2015-10-01 00:31:07,"@bdash 

Main WIP part is that there's a lot more stuff to test, but I didn't want to wait too long on throwing this up in case it conflicts with the other query work.
",tgoyne,bdash
2596,2015-09-28 22:17:32,"If the test application crashes while running a performance test, the in-memory realm file isn't deleted, and then is opened the next time the tests are run. This works out fine when it's the same file format version, but upgrading in-memory realms doesn't work correctly (and of course downgrading isn't supported at all).

@jpsim 
",tgoyne,jpsim
2595,2015-09-28 21:29:35,"/cc @tgoyne 
",jpsim,tgoyne
2592,2015-09-28 17:07:56,"### Changes:
- Remove unused ""Link Binary with Libraries"" and ""Copy Bundle Resources""
- Add resource copy phase to copy `strip-frameworks.sh`

### Before

<img width=""748"" alt=""screen shot 2015-09-29 at 02 01 50"" src=""https://cloud.githubusercontent.com/assets/40610/10142540/5ec2b114-664e-11e5-9cbe-73801387e93b.png"">

### After

<img width=""764"" alt=""screen shot 2015-09-29 at 02 01 29"" src=""https://cloud.githubusercontent.com/assets/40610/10142630/cd4fceaa-664e-11e5-8beb-7d5cffd44f0e.png"">

/cc @jpsim @mrackwitz 
",kishikawakatsumi,mrackwitz
2592,2015-09-28 17:07:56,"### Changes:
- Remove unused ""Link Binary with Libraries"" and ""Copy Bundle Resources""
- Add resource copy phase to copy `strip-frameworks.sh`

### Before

<img width=""748"" alt=""screen shot 2015-09-29 at 02 01 50"" src=""https://cloud.githubusercontent.com/assets/40610/10142540/5ec2b114-664e-11e5-9cbe-73801387e93b.png"">

### After

<img width=""764"" alt=""screen shot 2015-09-29 at 02 01 29"" src=""https://cloud.githubusercontent.com/assets/40610/10142630/cd4fceaa-664e-11e5-8beb-7d5cffd44f0e.png"">

/cc @jpsim @mrackwitz 
",kishikawakatsumi,jpsim
2590,2015-09-28 14:50:20,"i have an Entity A, it does not have a primary key and it has a property 
`@property RLMArray<City> *Cities;` but City has a primary key `NSString *Id;` 
I am inserting array of As using `[A createInRealm:realm withValue:aDict];`, where `aDict[@""Cities""]` is an array of Cities which is most likely to contain duplicate objects across different objects of A, as most of the graph serializers generate the JSON. inside the code it is always trying to insert-only the nested object City instead of upsert, hence generating this expection. I think it was working fine with v 0.91.5

`Terminating app due to uncaught exception 'RLMException', reason: 'Can't set primary key property 'Id' to existing value '6200'.'`
in 
`RLMSetValueUnique
...
RLMGetLinkedObjectForValue 
...
RLMCreateObjectInRealmWithValue`
",yasirmturk,property
2590,2015-09-29 17:52:32,"We've discussed changing `createInRealm:withValue:` to create or update nested objects when they have primary keys before (although I can't find the relevant GH issue at the moment).

We opted against that in order to maintain the guarantee that calling create (without update) will always create objects, not update them.

However, we could maintain this guarantee if we extended `createOrUpdate:` to allow being called for root objects without a primary key, which would update its linked objects if they existed and already have the same primary key. Thoughts on this @realm/cocoa?

PS: Minor point, but Realm is not an ORM. There's no relational mapping involved, as underlying db engine stores relationships natively.
",jpsim,realm
2586,2015-09-28 00:14:50,"/cc @jpsim @tgoyne 
",kishikawakatsumi,jpsim
2586,2015-09-28 00:14:50,"/cc @jpsim @tgoyne 
",kishikawakatsumi,tgoyne
2583,2015-09-25 16:20:39,"Fixes #2494. /cc @tgoyne @bdash 
",jpsim,tgoyne
2583,2015-09-25 16:20:39,"Fixes #2494. /cc @tgoyne @bdash 
",jpsim,bdash
2578,2015-09-24 22:46:33,"The path to the Realm frameworks was out of date.

@jpsim 
",tgoyne,jpsim
2577,2015-09-24 21:42:23,"Makes it work in the presence of multiple symlinks to the same thing.

@jpsim 
",tgoyne,jpsim
2576,2015-09-24 21:02:34,"@jpsim 
",tgoyne,jpsim
2575,2015-09-24 18:04:11,"Enables bitcode generation rather than just the marker for release builds of Realm.framework (iOS static and dynamic) and all release builds of RealmSwift.framework (it appears to be ignored without issues for OS X).

@jpsim 
",tgoyne,jpsim
2573,2015-09-24 14:45:32,"Xcode 7.1 beta 2 introduced Swift 2.1. Build fails due to returning Swift version `2.1` by beta2. This PR will just create a symbolic link to `RealmSwift-swift2.0` because Swift 2.1 does not break anything our code.

@jpsim @mrackwitz 
",kishikawakatsumi,mrackwitz
2573,2015-09-24 14:45:32,"Xcode 7.1 beta 2 introduced Swift 2.1. Build fails due to returning Swift version `2.1` by beta2. This PR will just create a symbolic link to `RealmSwift-swift2.0` because Swift 2.1 does not break anything our code.

@jpsim @mrackwitz 
",kishikawakatsumi,jpsim
2569,2015-09-25 10:30:11,"@mrackwitz @jpsim 

Is there a prevision to add this functionality in the near future?
A mobile database without this functionality loses much value.

Thank you!
",mhergon,jpsim
2565,2015-09-23 22:10:12,"@jpsim 
",tgoyne,jpsim
2563,2015-09-23 15:30:09,"/c @jpsim 
",mrackwitz,jpsim
2558,2015-10-15 20:18:28,"@Leshich: Did you really removed the build setting or overwrote it with an empty value?
",mrackwitz,Leshich
2558,2015-10-23 11:26:38,"@Leshich: FYI - You can select the levels perspective here. The other red box marks where the setting is expected to come from, all other columns should be empty in that row, beside the column which shows the resolved value.
<img width=""1205"" alt=""pods_root_levels"" src=""https://cloud.githubusercontent.com/assets/1389011/10691448/12b53648-7981-11e5-9d20-a8a7481f9330.png"">
",mrackwitz,Leshich
2557,2015-09-22 21:57:36,"Fallout from #2555. /cc @tgoyne 
",jpsim,tgoyne
2556,2015-09-24 07:11:25,"Hi Mohammad! Sorry to hear you were having an issue with this!

There's actually an easier way you could go about doing this. There's a property in the Realm `Object` class that lets you look up whether the object is a child of another object (Located [here](https://realm.io/docs/swift/latest/api/Classes/Object.html#/s:FC10RealmSwift6Object14linkingObjectsFS0_U__FTMQ_11forPropertySS_GSaQ__) in the documentation), so you don't need to manually set up that relation yourself.

That being said, that definitely sounds like that could also be a bug, so I might need to get one of the other engineers' opinion on this. /cc @jpsim @tgoyne 
",TimOliver,jpsim
2556,2015-09-24 07:11:25,"Hi Mohammad! Sorry to hear you were having an issue with this!

There's actually an easier way you could go about doing this. There's a property in the Realm `Object` class that lets you look up whether the object is a child of another object (Located [here](https://realm.io/docs/swift/latest/api/Classes/Object.html#/s:FC10RealmSwift6Object14linkingObjectsFS0_U__FTMQ_11forPropertySS_GSaQ__) in the documentation), so you don't need to manually set up that relation yourself.

That being said, that definitely sounds like that could also be a bug, so I might need to get one of the other engineers' opinion on this. /cc @jpsim @tgoyne 
",TimOliver,tgoyne
2552,2015-09-24 06:50:52,"@hibento Actually, before I get too trigger-happy, let me know if this is working for you now before I close it off. :)
",TimOliver,hibento
2552,2015-09-24 15:39:32,"I got the same error as @hibento
",nicopuri,hibento
2552,2015-09-25 22:37:39,"@hibento @nicopuri we only support Carthage via binary releases. #2323 is a work-in-progress PR that would add support for Carthage when building from source.
",jpsim,hibento
2550,2015-09-21 13:59:11,"Hi @dslysenko 
Not sure what you mean with ""re-log-in""? Realm is a pure local embedded database. We don't handle anything related to login. For some ideas about how to migrate from CoreData you can checkout this blogpost: https://realm.io/news/migrating-from-core-data-to-realm/
",bmunkholm,dslysenko
2550,2015-09-23 14:42:33,"Right, sorry, left out some context. The assumption is that if we move to
Realm without being able to migrate existing device data, our users will
have to log in again in order to re-sync all the user's data from the
server.

On Mon, Sep 21, 2015, 9:59 AM Brian Munkholm notifications@github.com
wrote:

> Hi @dslysenko https://github.com/dslysenko
> Not sure what you mean with ""re-log-in""? Realm is a pure local embedded
> database. We don't handle anything related to login. For some ideas about
> how to migrate from CoreData you can checkout this blogpost:
> https://realm.io/news/migrating-from-core-data-to-realm/
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/2550#issuecomment-141989145.
",dennislysenko,dslysenko
2550,2015-09-24 06:47:09,"@dslysenko Hi Dennis!

I've migrated one of my apps from Core Data to Realm before (And I'm also the one who wrote that blog post above). 

That being said, in my case, I was using Core Data to cache metadata information from files inside my app, so it wasn't necessary to perform any proper migrations; the data was simply regenerated the next time the user opened the app. 

Since Core Data (from what I've been told) lets you read data directly from `NSManagedObject` (Without need to subclass), it should be a relatively trivial matter of moving all of your model objects over to Realm, and then adding a small helper class to query for any data in Core Data and manually move that over when the user opens the app for the first time.

Let me know what you plan to do!
",TimOliver,dslysenko
2550,2015-09-29 22:44:11,"Closing since we've provided some recommended approaches and haven't heard back from @dslysenko.
",jpsim,dslysenko
2539,2015-09-21 15:46:23,"Realm's file format can't store `NSDecimalNumber`s losslessly in a numerical format, so converting these values to a string would be my recommendation as well. Here's @kishikawakatsumi's StackOverflow solution reposted here, with some minor modifications:



If you find yourself using many `NSDecimalNumber`s in your models, you could turn this into a Realm object and use relationships instead:


",jpsim,kishikawakatsumi
2537,2015-09-16 14:22:20,"When the initial partial schema init is done with an explicit class list, duplicate object schemas for those classes would end up in the final shared schema, along with object schemas for the accessor classes. No new tests for any of this because we can't test it via our testing framework....

Closes #2534.

@jpsim @bdash 
",tgoyne,jpsim
2537,2015-09-16 14:22:20,"When the initial partial schema init is done with an explicit class list, duplicate object schemas for those classes would end up in the final shared schema, along with object schemas for the accessor classes. No new tests for any of this because we can't test it via our testing framework....

Closes #2534.

@jpsim @bdash 
",tgoyne,bdash
2536,2015-09-16 07:26:09,"/cc @tgoyne @jpsim 
",bdash,jpsim
2536,2015-09-16 07:26:09,"/cc @tgoyne @jpsim 
",bdash,tgoyne
2527,2015-09-13 13:23:23,"Fixes #2519 for Swift 1.2. /cc @bdash 

Note: `Hashable` implies `Equatable` because it inherits from it.
",jpsim,bdash
2526,2015-09-13 13:15:29,"Fixes #2501.

We've avoided doing this for a long time because it's fairly easy to do via existing means, but this is much more semantic and clear, so probably a good thing to do. /cc @tgoyne @bdash 

I didn't do this for `RLMCollection` despite it being available on `RealmCollectionType` (in Swift 2, by ""inheritance""), because it's only there implicitly, and I think `isEmpty` provides the same level of clarity and semantic meaning as `.count == 0`.
",jpsim,tgoyne
2526,2015-09-13 13:15:29,"Fixes #2501.

We've avoided doing this for a long time because it's fairly easy to do via existing means, but this is much more semantic and clear, so probably a good thing to do. /cc @tgoyne @bdash 

I didn't do this for `RLMCollection` despite it being available on `RealmCollectionType` (in Swift 2, by ""inheritance""), because it's only there implicitly, and I think `isEmpty` provides the same level of clarity and semantic meaning as `.count == 0`.
",jpsim,bdash
2522,2015-09-11 18:23:03,"Should fix the `RealmTests.testInitCustomClassList()` test case that's been failing lately /cc @segiddins 
",jpsim,segiddins
2519,2015-09-11 23:05:47,"I can reproduce this, but I'm not sure why it's happening. `Object` inherits conformance to `Equatable` and `Hashable` by virtue of being a subclass of `NSObject`. I'm not sure why that doesn't apply to subclasses of `Object`.

The following change to how `A` is declared appears to give the expected results:



@jpsim, @tgoyne, do you have any idea why conformance to `Equatable` and `Hashable` have to be redeclared?
",bdash,jpsim
2519,2015-09-11 23:05:47,"I can reproduce this, but I'm not sure why it's happening. `Object` inherits conformance to `Equatable` and `Hashable` by virtue of being a subclass of `NSObject`. I'm not sure why that doesn't apply to subclasses of `Object`.

The following change to how `A` is declared appears to give the expected results:



@jpsim, @tgoyne, do you have any idea why conformance to `Equatable` and `Hashable` have to be redeclared?
",bdash,tgoyne
2519,2016-05-30 16:10:08,"@EstebanVallejo: The compiler error you're facing confirms that the underlying problem of this issue is now resolved. Please remove the redundant `Equatable` protocol conformance declaration and override instead the Objective-C `isEqual:` method on your `User` class, if you want to provide a different implementation than what Realm provides by default. Note that if your `id` property is a primary key, this is not at all necessary.
",mrackwitz,EstebanVallejo
2515,2015-09-11 01:04:10,"/cc @segiddins @tgoyne 
",jpsim,tgoyne
2515,2015-09-11 01:04:10,"/cc @segiddins @tgoyne 
",jpsim,segiddins
2514,2015-09-10 21:40:58,"Related: https://github.com/realm/realm-cocoa/issues/1916

Invoking `init(value:)` with generics type will cause a crash due to Swift compiler cannot find appropriate initializer. (In Swift 2, the compiler treats it as compile error: `Constructing an object of class type 'T' with a metatype value must use a 'required' initializer`)

In Objective-C, both `- init` and `- initWithValue:` are specified `NS_DESIGNATED_INITIALIZER`. Assuming the same meaning it is a 'required' in Swift, `init(value:)` also should be specified `required`, I think. 

@tgoyne @segiddins @jpsim 
",kishikawakatsumi,jpsim
2514,2015-09-10 21:40:58,"Related: https://github.com/realm/realm-cocoa/issues/1916

Invoking `init(value:)` with generics type will cause a crash due to Swift compiler cannot find appropriate initializer. (In Swift 2, the compiler treats it as compile error: `Constructing an object of class type 'T' with a metatype value must use a 'required' initializer`)

In Objective-C, both `- init` and `- initWithValue:` are specified `NS_DESIGNATED_INITIALIZER`. Assuming the same meaning it is a 'required' in Swift, `init(value:)` also should be specified `required`, I think. 

@tgoyne @segiddins @jpsim 
",kishikawakatsumi,tgoyne
2514,2015-09-10 21:40:58,"Related: https://github.com/realm/realm-cocoa/issues/1916

Invoking `init(value:)` with generics type will cause a crash due to Swift compiler cannot find appropriate initializer. (In Swift 2, the compiler treats it as compile error: `Constructing an object of class type 'T' with a metatype value must use a 'required' initializer`)

In Objective-C, both `- init` and `- initWithValue:` are specified `NS_DESIGNATED_INITIALIZER`. Assuming the same meaning it is a 'required' in Swift, `init(value:)` also should be specified `required`, I think. 

@tgoyne @segiddins @jpsim 
",kishikawakatsumi,segiddins
2508,2015-09-09 23:26:56,"Appeared in `ABFRealmGridController` where the `defaultConfiguration` was requested from 3 threads at the same time. The result was that one thread was attempting to copy `s_defaultConfiguration` while another was mutating the value.

`@synchronized` directive is used with`c_defaultRealmFileName` object as the token to lock from.
",bigfish24,synchronized
2506,2015-10-07 18:04:45,"Thanks for the tip, @kishikawakatsumi could you update this PR to support Beta 3 when you get a chance?
",jpsim,kishikawakatsumi
2499,2015-09-25 21:47:02,"@tgoyne @bdash this is ready for review. A few points to note:
1. The Objective-C tests only pass when using runtime-generated classes. I tried moving to dynamic objects (adf1a6f6c2ca00bda69e81149a32384af4ccc19c) but that failed for reasons I couldn't figure out. I personally don't see how this would ever be an issue, but I may be missing something.
2. The Swift tests only run on Swift 2 in Debug mode because they rely on `@testable`. Funnily enough, dynamic objects work for the Swift tests.
",jpsim,tgoyne
2499,2015-09-25 21:47:02,"@tgoyne @bdash this is ready for review. A few points to note:
1. The Objective-C tests only pass when using runtime-generated classes. I tried moving to dynamic objects (adf1a6f6c2ca00bda69e81149a32384af4ccc19c) but that failed for reasons I couldn't figure out. I personally don't see how this would ever be an issue, but I may be missing something.
2. The Swift tests only run on Swift 2 in Debug mode because they rely on `@testable`. Funnily enough, dynamic objects work for the Swift tests.
",jpsim,bdash
2499,2015-09-25 21:47:02,"@tgoyne @bdash this is ready for review. A few points to note:
1. The Objective-C tests only pass when using runtime-generated classes. I tried moving to dynamic objects (adf1a6f6c2ca00bda69e81149a32384af4ccc19c) but that failed for reasons I couldn't figure out. I personally don't see how this would ever be an issue, but I may be missing something.
2. The Swift tests only run on Swift 2 in Debug mode because they rely on `@testable`. Funnily enough, dynamic objects work for the Swift tests.
",jpsim,testable
2499,2015-10-01 18:33:23,"Bump @tgoyne @bdash 
",jpsim,tgoyne
2499,2015-10-01 18:33:23,"Bump @tgoyne @bdash 
",jpsim,bdash
2499,2015-10-07 18:35:12,"Bump @tgoyne @bdash 
",jpsim,tgoyne
2499,2015-10-07 18:35:12,"Bump @tgoyne @bdash 
",jpsim,bdash
2498,2015-09-08 23:03:29,"We will abolish current office hour system. So We are going to remove go-to-meeting's link from everywhere. I've deleted the sentence about office hour in `README.md`.
Could you please review this?

/cc @jpsim @timanglade
same as realm-java: https://github.com/realm/realm-java/pull/1459
",yuuki1224,jpsim
2498,2015-09-08 23:03:29,"We will abolish current office hour system. So We are going to remove go-to-meeting's link from everywhere. I've deleted the sentence about office hour in `README.md`.
Could you please review this?

/cc @jpsim @timanglade
same as realm-java: https://github.com/realm/realm-java/pull/1459
",yuuki1224,timanglade
2497,2015-09-10 15:30:22,"@tgoyne @bdash please review
",segiddins,bdash
2496,2015-09-08 17:54:36,"Fixes https://secure.helpscout.net/conversation/118264957/1804/ /cc @segiddins @tgoyne @bdash 
",jpsim,tgoyne
2496,2015-09-08 17:54:36,"Fixes https://secure.helpscout.net/conversation/118264957/1804/ /cc @segiddins @tgoyne @bdash 
",jpsim,bdash
2496,2015-09-08 17:54:36,"Fixes https://secure.helpscout.net/conversation/118264957/1804/ /cc @segiddins @tgoyne @bdash 
",jpsim,segiddins
2496,2015-09-28 19:57:06,"@bmunkholm yes, the feedback from @tgoyne still hasn't been addressed.
",jpsim,tgoyne
2496,2015-12-16 05:18:06,"I've now updated this. Please review @tgoyne @bdash.
",jpsim,tgoyne
2496,2015-12-16 05:18:06,"I've now updated this. Please review @tgoyne @bdash.
",jpsim,bdash
2489,2015-09-07 02:30:20,"@ronjumola at the moment, there's no way to use arbitrary math expressions in your queries, but @bdash was working on adding support for bounding box geo queries recently, I believe there's an open PR for that (https://github.com/realm/realm-cocoa/pull/2199).
",segiddins,bdash
2476,2015-09-01 23:56:57,"This adds support for comparisons of the form `collection.@min.intCol > 10`, with support for `@min`, `@max`, `@sum` and `@avg`.

Fixes #1166.

Note that this requires a new release of core, and so will fail to build for now. The branch currently includes changes from #2449, and will until that is merged.
",bdash,sum
2476,2015-09-01 23:56:57,"This adds support for comparisons of the form `collection.@min.intCol > 10`, with support for `@min`, `@max`, `@sum` and `@avg`.

Fixes #1166.

Note that this requires a new release of core, and so will fail to build for now. The branch currently includes changes from #2449, and will until that is merged.
",bdash,avg
2476,2015-09-01 23:56:57,"This adds support for comparisons of the form `collection.@min.intCol > 10`, with support for `@min`, `@max`, `@sum` and `@avg`.

Fixes #1166.

Note that this requires a new release of core, and so will fail to build for now. The branch currently includes changes from #2449, and will until that is merged.
",bdash,max
2476,2015-09-01 23:56:57,"This adds support for comparisons of the form `collection.@min.intCol > 10`, with support for `@min`, `@max`, `@sum` and `@avg`.

Fixes #1166.

Note that this requires a new release of core, and so will fail to build for now. The branch currently includes changes from #2449, and will until that is merged.
",bdash,min
2465,2015-08-28 23:50:31,"Also addresses some SwiftLint style violations. I didn't make changes to Swift 1.2 files because this PR relies on https://github.com/realm/SwiftLint/pull/106, which is Swift 2.0 only.

To really make this useful, we should enable this on CI and fail if there are any violations, but at the moment we have file length, type body length and todo/fixme violations. I could uncomment the relevant lines from `.swiftlint.yml` but it seems pointless to use SwiftLint if only to ignore its output.

/cc @segiddins @tgoyne @bdash 
",jpsim,tgoyne
2465,2015-08-28 23:50:31,"Also addresses some SwiftLint style violations. I didn't make changes to Swift 1.2 files because this PR relies on https://github.com/realm/SwiftLint/pull/106, which is Swift 2.0 only.

To really make this useful, we should enable this on CI and fail if there are any violations, but at the moment we have file length, type body length and todo/fixme violations. I could uncomment the relevant lines from `.swiftlint.yml` but it seems pointless to use SwiftLint if only to ignore its output.

/cc @segiddins @tgoyne @bdash 
",jpsim,bdash
2465,2015-08-28 23:50:31,"Also addresses some SwiftLint style violations. I didn't make changes to Swift 1.2 files because this PR relies on https://github.com/realm/SwiftLint/pull/106, which is Swift 2.0 only.

To really make this useful, we should enable this on CI and fail if there are any violations, but at the moment we have file length, type body length and todo/fixme violations. I could uncomment the relevant lines from `.swiftlint.yml` but it seems pointless to use SwiftLint if only to ignore its output.

/cc @segiddins @tgoyne @bdash 
",jpsim,segiddins
2465,2015-11-06 23:06:59,"@tgoyne @bdash I just updated this, could you please take another look?
",jpsim,bdash
2465,2015-11-18 22:44:34,"Bump @tgoyne @bdash 
",jpsim,bdash
2459,2016-11-15 22:51:19,"@tgoyne addressed most (if not all) points tracked by this issue in realm/realm-object-store#87.

Should we close this ticket in favor of one that better highlights what remains to be done?

@tgoyne please unassign yourself and mark with the appropriate `S:` label if you're not actively working on more to this.
",jpsim,tgoyne
2454,2015-08-28 18:50:45,"Could you please check if `Enable Modules` is set to `YES` in your app target's build settings? That would explain why the `-Swift.h` file has `@import Realm;` (wrapped in a check for modules support) but that Realm types aren't being resolved further in the file.

If that still doesn't fix things, I'd be happy to look into your Xcode project, which you can send privately to help@realm.io.
",jpsim,import
2451,2015-12-01 17:41:50,"@jpsim @tgoyne @bdash: It would be helpful to get some quick review from your side for the five most recent commits on this branch, just to make sure that we are all on the same site on the approach for testing I've chosen here, before taking over the tests to Swift to actually test the new error enum in that way.
",mrackwitz,tgoyne
2451,2015-12-01 17:41:50,"@jpsim @tgoyne @bdash: It would be helpful to get some quick review from your side for the five most recent commits on this branch, just to make sure that we are all on the same site on the approach for testing I've chosen here, before taking over the tests to Swift to actually test the new error enum in that way.
",mrackwitz,bdash
2450,2015-08-26 22:34:04,"`Table::column<T>` now checks that `T` matches the stored type of the column. This breaks with the existing implementation of `ColumnOfTypeHelper` that uses `Table::column<Int>` for `DateTime` columns. This was done to avoid compilation errors from query_expression.hpp that occurred due to `DateTime`'s `operator int64_t` being private. In core master, it's no longer private so our hack is no longer necessary. As a temporary measure we conditionally select between `DateTime` and `Int` for the column types to allow building with both the latest core release and the current core master.

/cc @tgoyne 
",bdash,tgoyne
2449,2015-08-26 20:27:40,"Also adds infrastructure to support `@min`, `@max`, `@sum` and `@avg`.

Work towards #1166.

Note that this requires a new release of core, and so will fail to build for now.

/cc @tgoyne @jpsim @segiddins 
",bdash,max
2449,2015-08-26 20:27:40,"Also adds infrastructure to support `@min`, `@max`, `@sum` and `@avg`.

Work towards #1166.

Note that this requires a new release of core, and so will fail to build for now.

/cc @tgoyne @jpsim @segiddins 
",bdash,segiddins
2449,2015-08-26 20:27:40,"Also adds infrastructure to support `@min`, `@max`, `@sum` and `@avg`.

Work towards #1166.

Note that this requires a new release of core, and so will fail to build for now.

/cc @tgoyne @jpsim @segiddins 
",bdash,min
2449,2015-08-26 20:27:40,"Also adds infrastructure to support `@min`, `@max`, `@sum` and `@avg`.

Work towards #1166.

Note that this requires a new release of core, and so will fail to build for now.

/cc @tgoyne @jpsim @segiddins 
",bdash,avg
2449,2015-08-26 20:27:40,"Also adds infrastructure to support `@min`, `@max`, `@sum` and `@avg`.

Work towards #1166.

Note that this requires a new release of core, and so will fail to build for now.

/cc @tgoyne @jpsim @segiddins 
",bdash,jpsim
2449,2015-08-26 20:27:40,"Also adds infrastructure to support `@min`, `@max`, `@sum` and `@avg`.

Work towards #1166.

Note that this requires a new release of core, and so will fail to build for now.

/cc @tgoyne @jpsim @segiddins 
",bdash,tgoyne
2449,2015-08-26 20:27:40,"Also adds infrastructure to support `@min`, `@max`, `@sum` and `@avg`.

Work towards #1166.

Note that this requires a new release of core, and so will fail to build for now.

/cc @tgoyne @jpsim @segiddins 
",bdash,sum
2449,2015-08-26 20:57:33,"`array.@count` is equivalent to `array[SIZE]`, so it'd be great to support that syntax as well.
",jpsim,count
2449,2015-08-26 21:22:43,"I'll revisit `array[SIZE]` later since it's represented completely differently from `@count` by `NSPredicate`. It's represented as an expression of type `NSFunctionExpressionType`, with the `SIZE` argument being represented by an undocumented `NSExpression` subclass and type.
",bdash,count
2447,2015-08-26 17:35:29,"This require CocoaPods 0.38, but should fix releasability.

\c @jpsim @mrackwitz
",segiddins,mrackwitz
2447,2015-08-26 17:35:29,"This require CocoaPods 0.38, but should fix releasability.

\c @jpsim @mrackwitz
",segiddins,jpsim
2446,2015-08-26 06:01:06,"@jpsim is it possible your S3 configuration changes could've caused this?
",segiddins,jpsim
2446,2015-08-26 06:11:07,"> @jpsim is it possible your S3 configuration changes could've caused this?

That's the most likely option I can think of too. @codesourse would it be possible for you to share your public IP address with us? You can email it to us privately to help@realm.io if you prefer. We recently had to implement some IP filtering to prevent Realm from being downloaded from countries that we aren't allowed to export to, and I get the feeling that this filtering is affecting you.
",jpsim,jpsim
2446,2015-08-26 13:08:42,"@Padarom  exactly, i'm trying from Berlin :) and my installation is gone as i deleted the `Pods` and `xxxx.xcworkspace` 
",haitham-aboshahba-sociomantic,Padarom
2442,2015-08-25 23:46:54,"\c @tgoyne @jpsim 
",segiddins,jpsim
2442,2015-08-25 23:46:54,"\c @tgoyne @jpsim 
",segiddins,tgoyne
2441,2015-08-25 23:31:04,"Closes #2419.

\c @tgoyne @jpsim
",segiddins,jpsim
2441,2015-08-25 23:31:04,"Closes #2419.

\c @tgoyne @jpsim
",segiddins,tgoyne
2440,2015-08-25 23:18:54,"/cc @timanglade 
",jpsim,timanglade
2438,2015-08-25 19:02:15,"In Swift 2, `try! ... removeItemAtPath` will assert if the file doesn't already exist and `try?` shows a warning in Xcode, so I'm using empty catch blocks instead. /cc @segiddins @tgoyne 
",jpsim,tgoyne
2438,2015-08-25 19:02:15,"In Swift 2, `try! ... removeItemAtPath` will assert if the file doesn't already exist and `try?` shows a warning in Xcode, so I'm using empty catch blocks instead. /cc @segiddins @tgoyne 
",jpsim,segiddins
2437,2015-08-25 20:38:51,"Resolved this. Changed a handful of things. Spent an hour trying to figure out which of the things was responsible. I'm not 100% sure.

The two most suspect pieces:
- I was caching my realm instance per-thread, to avoid the overhead of creating and configuring it every single time I accessed it.
- I would use a different realm path depending on if encryption was enabled or disabled. It's possible that something else was wrong with this and caused me to access a realm at one path, and then at another. (From a fresh install, so both would be brand new, but perhaps this causes the migration code / dispatch once to fall over?)

@jpsim After ~5 hours on this bug I'm going to just cut my loses, delete all the suspect code, bump to 0.94.1 again and see if it works. If it crashes again I'll post more information here.
",isoiphone,jpsim
2437,2015-08-25 21:47:58,"@jpsim feel free to close this.
Upgrading to 0.95.0 and using the new configuration system allowed me to write some much simpler, much more deterministic code and resolve this issue.
",isoiphone,jpsim
2433,2015-08-25 20:21:23,"Setting up Xcode env. variable `CFNETWORK_DIAGNOSTICS` to 3 creates a log with an extended info where you can see URL that causes NSAppTransportSecurity to block a request.

See https://developer.apple.com/library/ios/qa/qa1887/_index.html.
(thanks to @soffes tweet)
",StanislavK,soffes
2432,2015-08-25 05:16:39,"This was an issue originally posted in Realm Browser's repo (https://github.com/realm/realm-browser-osx/issues/52 courtesy of @lionpants), but after testing it out, it's looking like a bug in Realm Cocoa and/or the Core.

The bug is this: When an iOS app running Realm 0.94 is opened in iOS Simulator, and the App Store version of Realm Browser (running Realm 0.93) has the same .realm file open, upon performing a write transaction in the app, Realm Browser will crash. If a new copy of Realm Browser is built, integrating Realm 0.94, and the same process is repeated, the issue is resolved.

Since there was apparently no breaking changes made to the file format between these two versions, this may be indicative of some kind of regression.

@lionpants has provided this [sample test app](http://puu.sh/jNEP4/a9f80e9d8f.zip), and laid out the following steps to reproduce:
- Start the app in iOS Simulator.
- Click the ""Do Things"" button, this will insert 10000 Animals into the Realm DB.
- Open the copy of [Realm Browser from the App Store](https://itunes.apple.com/app/realm-browser/id1007457278).
- Open the Realm DB file for the TestApp in Realm Browser.
- You should see the 10000 Animals and 4 Food objects.
- Press the ""Do Things"" button again.
- Realm Browser should crash.

I've tested this issue myself and confirmed that these reproduction steps end in a crash.
",TimOliver,lionpants
2430,2015-08-25 01:29:00,"\c @jpsim 
",segiddins,jpsim
2429,2015-08-25 00:31:40,"…figuration property

\c @tgoyne 
",segiddins,tgoyne
2428,2015-08-24 23:25:56,"Closes #2427.

\c @jpsim @tgoyne 
",segiddins,jpsim
2428,2015-08-24 23:25:56,"Closes #2427.

\c @jpsim @tgoyne 
",segiddins,tgoyne
2426,2015-08-24 20:24:08,"Fixes #1886.

/cc @yoshyosh @jpsim 
",bdash,yoshyosh
2426,2015-08-24 20:24:08,"Fixes #1886.

/cc @yoshyosh @jpsim 
",bdash,jpsim
2424,2015-09-01 01:07:47,"@OlegAnghelov let us know if the response posted above helped explain what's happening here, and please open an issue if you have any further questions!
",jpsim,OlegAnghelov
2422,2015-08-21 17:32:58,"@jpsim @tgoyne thoughts on this one?
",segiddins,jpsim
2422,2015-08-21 17:32:58,"@jpsim @tgoyne thoughts on this one?
",segiddins,tgoyne
2420,2015-08-21 01:16:47,"\c @tgoyne 
",segiddins,tgoyne
2418,2015-08-20 10:47:22,"This fixes https://github.com/realm/realm-cocoa/issues/2416 . It makes to be able to find the custom init method that has been added in the category from Swift. I'm not sure that this change reasonable or not. I'd like to hear thoughts of others. @bdash @tgoyne @segiddins 
",kishikawakatsumi,bdash
2418,2015-08-20 10:47:22,"This fixes https://github.com/realm/realm-cocoa/issues/2416 . It makes to be able to find the custom init method that has been added in the category from Swift. I'm not sure that this change reasonable or not. I'd like to hear thoughts of others. @bdash @tgoyne @segiddins 
",kishikawakatsumi,segiddins
2418,2015-08-20 10:47:22,"This fixes https://github.com/realm/realm-cocoa/issues/2416 . It makes to be able to find the custom init method that has been added in the category from Swift. I'm not sure that this change reasonable or not. I'd like to hear thoughts of others. @bdash @tgoyne @segiddins 
",kishikawakatsumi,tgoyne
2417,2015-08-19 23:19:04,"/cc @tgoyne 
",bdash,tgoyne
2414,2015-08-19 15:29:07,"@OlegAnghelov yup, that's exactly it!
",segiddins,OlegAnghelov
2412,2015-08-20 16:43:30,"@luongvanphuc that's a possible explanation, and I believe @TimOliver was investigating whether the Browser could actually be causing the version pinning problem.
",segiddins,TimOliver
2412,2015-08-27 18:08:37,"Yes, the Realm Browser is holding an open read transaction, but only on the main thread, and thus on a runloop, so I don't think (in theory) that it's the browser causing this issue. Although it's certainly worth investigating! @TimOliver can you look into this, please?
",jpsim,TimOliver
2408,2015-08-17 19:09:11,"/cc @tgoyne @segiddins 
",bdash,tgoyne
2408,2015-08-17 19:09:11,"/cc @tgoyne @segiddins 
",bdash,segiddins
2401,2015-08-14 23:57:04,"Closes https://github.com/realm/realm-cocoa/issues/2021.
Closes https://github.com/realm/realm-cocoa/issues/2325.

\c @jpsim @bdash @tgoyne 
",segiddins,jpsim
2401,2015-08-14 23:57:04,"Closes https://github.com/realm/realm-cocoa/issues/2021.
Closes https://github.com/realm/realm-cocoa/issues/2325.

\c @jpsim @bdash @tgoyne 
",segiddins,bdash
2401,2015-08-14 23:57:04,"Closes https://github.com/realm/realm-cocoa/issues/2021.
Closes https://github.com/realm/realm-cocoa/issues/2325.

\c @jpsim @bdash @tgoyne 
",segiddins,tgoyne
2396,2015-08-13 20:52:35,"@segiddins 
",tgoyne,segiddins
2395,2015-08-13 17:12:51,"Closes #2393.

\c @mrackwitz @tgoyne 
",segiddins,mrackwitz
2395,2015-08-13 17:12:51,"Closes #2393.

\c @mrackwitz @tgoyne 
",segiddins,tgoyne
2392,2015-08-13 05:24:45,"Sorry, forgot about the podspec!
\c @tgoyne 
",segiddins,tgoyne
2391,2015-08-13 18:45:18,"Seems to work. In three runs of the PR job the only thing to fail was ios-swift 2.0, which hit the ""touch test bundle then don't run the tests at all"" problem.

@segiddins 
",tgoyne,segiddins
2383,2015-08-11 19:25:13,"Please check @jpsim @segiddins 
",kishikawakatsumi,jpsim
2383,2015-08-11 19:25:13,"Please check @jpsim @segiddins 
",kishikawakatsumi,segiddins
2378,2015-08-11 16:49:14,"@alazier could you please approve this, since it's in the object store code?
",segiddins,alazier
2376,2015-08-11 01:04:49,"\c @tgoyne 
",segiddins,tgoyne
2375,2015-08-11 00:34:42,"@psophis we agree that this would be awesome, and in fact, we're already tracking it over at https://github.com/realm/realm-cocoa/issues/921 :)
",segiddins,psophis
2374,2015-08-10 23:26:29,"…ass name

Closes #2366.

\c @tgoyne 
",segiddins,tgoyne
2372,2015-08-10 20:07:54,"\c @tgoyne 
",segiddins,tgoyne
2370,2015-08-10 17:47:27,"Newer versions of pandoc insert blank lines before the header, so only checking the first line results in always redownloading the core.

@segiddins 
",tgoyne,segiddins
2368,2015-08-10 12:33:41,"It will fail to build Realm.frameowrk for watchOS from source code by Xcode 7 beta5 due to the following error. The failure occurred in linker phase. If using beta 4, the build succeeded without any errors. It will occur both `master` and `swift-2.0` branch. For iOS/OS X build also succeeded.

I think we should release new core library to fix this issue as soon as possible.

@tgoyne @jpsim @segiddins 


",kishikawakatsumi,jpsim
2368,2015-08-10 12:33:41,"It will fail to build Realm.frameowrk for watchOS from source code by Xcode 7 beta5 due to the following error. The failure occurred in linker phase. If using beta 4, the build succeeded without any errors. It will occur both `master` and `swift-2.0` branch. For iOS/OS X build also succeeded.

I think we should release new core library to fix this issue as soon as possible.

@tgoyne @jpsim @segiddins 


",kishikawakatsumi,tgoyne
2368,2015-08-10 12:33:41,"It will fail to build Realm.frameowrk for watchOS from source code by Xcode 7 beta5 due to the following error. The failure occurred in linker phase. If using beta 4, the build succeeded without any errors. It will occur both `master` and `swift-2.0` branch. For iOS/OS X build also succeeded.

I think we should release new core library to fix this issue as soon as possible.

@tgoyne @jpsim @segiddins 


",kishikawakatsumi,segiddins
2360,2015-08-21 01:50:15,"@mrshortman I'm going to close this issue for now, but feel free to re-open it if @kishikawakatsumi's comment didn't address everything!
",segiddins,mrshortman
2357,2015-08-07 22:37:36,"\c @tgoyne 
",segiddins,tgoyne
2356,2015-08-07 19:04:28,"Presumably closes #2354.

\c @tgoyne 
",segiddins,tgoyne
2355,2015-08-07 18:32:15,"It's not actually part of the public API and using it directly is no longer useful anyway.

@segiddins 
",tgoyne,segiddins
2350,2015-08-12 22:15:30,"I'd love to get some eyes on this, so we can merge it if it passes, @bdash @tgoyne.
",segiddins,bdash
2350,2015-08-12 22:15:30,"I'd love to get some eyes on this, so we can merge it if it passes, @bdash @tgoyne.
",segiddins,tgoyne
2349,2015-08-06 20:30:51,"Closes #2348.
Might require installing the new beta on CI first.

\c @tgoyne 
",segiddins,tgoyne
2338,2015-08-03 22:05:17,"Fixes #2332. This was introduced in #2125, which is why we only started hearing about it after 0.94. /cc @tgoyne @segiddins 
",jpsim,tgoyne
2338,2015-08-03 22:05:17,"Fixes #2332. This was introduced in #2125, which is why we only started hearing about it after 0.94. /cc @tgoyne @segiddins 
",jpsim,segiddins
2335,2015-08-03 17:12:51,"Fixes #2320. /cc @segiddins @tgoyne 
",jpsim,tgoyne
2335,2015-08-03 17:12:51,"Fixes #2320. /cc @segiddins @tgoyne 
",jpsim,segiddins
2326,2015-08-07 20:58:46,"OK, I think this is ready for a set of eyes, @jpsim @jpsim @bdash .
",segiddins,bdash
2326,2015-08-12 05:16:05,"@bdash could you please remind me what you see as the inconsistency?
",segiddins,bdash
2325,2015-07-31 21:19:36,"The last time this was brought up, we determined that it would be preferable to expose this within the `RLMConfiguration`, which @segiddins said he'd work on today.

Let's keep this open until that work is done, but I don't think it's worth implementing outside RLMConfiguration if it's as close as we think it is.
",jpsim,segiddins
2323,2015-07-31 13:07:42,"cc @jpsim 
",neonichu,jpsim
2323,2015-08-24 16:02:24,"@realm/cocoa what do we think of this? IMO, it would be preferable to have a single Xcode project but that's proven difficult to achieve. I'd prefer closing this to continue with that project consolidation approach, but you could argue it'd be more pragmatic to use this PR until that's done.
",jpsim,realm
2323,2015-11-04 06:06:30,"Thanks for your work on this, @neonichu, but it turns out that @bdash is a wizard and managed to massively clean up & combine all our Xcode projects in #2793, which will support building Realm in Carthage from source. So I'm closing this.
",jpsim,bdash
2321,2015-07-30 21:34:04,"/cc @segiddins 
",jpsim,segiddins
2321,2015-07-30 23:59:29,"> it should be fine to define it as an optional on the protocol but make it non-optional on `Results`

That doesn't work.

> it actually can, if the realm is invalidated

We don't expose that at the moment. Create a new issue if you think we should in both Objective-C and Swift results.

> true, but `RealmCollectionType` isn't limited to `NSObject` types, as far as I can see

Ugh, I can't make `RealmCollectionType` conform to `NSObject` or `@objc` because then it couldn't also conform to `CollectionType`. I could make a `KeyValueEncodable` protocol I suppose...
",jpsim,objc
2321,2015-08-25 15:00:58,"@tgoyne @segiddins this should now be ready for review.
",jpsim,tgoyne
2319,2015-07-30 16:23:43,"I've seen users assume that they could override `+[RLMObject className]`/`Object.className` to return something other than the actual exact class name (e.g. to removing a prefix).

As far as I know, we don't state anywhere that overriding this doesn't actually do anything, so might as well just discourage it in Objective-C and prevent it from happening in Swift. /cc @segiddins @bigfish24 
",jpsim,bigfish24
2319,2015-07-30 16:23:43,"I've seen users assume that they could override `+[RLMObject className]`/`Object.className` to return something other than the actual exact class name (e.g. to removing a prefix).

As far as I know, we don't state anywhere that overriding this doesn't actually do anything, so might as well just discourage it in Objective-C and prevent it from happening in Swift. /cc @segiddins @bigfish24 
",jpsim,segiddins
2317,2015-07-29 23:25:26,"/cc @segiddins 
",jpsim,segiddins
2316,2015-07-29 22:23:30,"\c @jpsim 
",segiddins,jpsim
2314,2015-07-29 17:29:38,"\c @jpsim 
",segiddins,jpsim
2313,2015-07-29 17:15:17,"…n on watchOS

\c @jpsim 
",segiddins,jpsim
2309,2015-07-29 00:09:09,"\c @jpsim 
",segiddins,jpsim
2308,2015-07-28 18:05:35,"@segiddins made some improvements to this codepath in the null numbers branch, which would enable detecting `String?` as a property type.
",jpsim,segiddins
2305,2015-07-28 16:43:00,"@codywinton this sounds more like a CocoaPods issue than a Realm one, does anything at https://github.com/CocoaPods/CocoaPods/issues sound familiar?
",segiddins,codywinton
2303,2015-07-27 22:58:04,"Fixes #2220 /cc @yoshyosh 
",jpsim,yoshyosh
2303,2015-07-27 22:59:55,"I opted to link to the favicons on realm.io so we wouldn't have to maintain a separate set here. @yoshyosh are these URLs stable?
",jpsim,yoshyosh
2303,2015-07-28 17:43:29,"I believe they should be, can you confirm @mrh-is ?
",yoshyosh,mrh-is
2302,2015-07-27 21:20:01,"Closes #2032.

Otherwise, apps using in-memory realms risk violating Apple's data storage guidelines. /cc @segiddins 
",jpsim,segiddins
2301,2015-07-27 19:56:37,"/cc @segiddins 
",jpsim,segiddins
2299,2015-07-27 18:25:47,"We determined that it was better to encourage users to use the full (albeit unsightly) representation rather than hiding it behind a macro. /cc @segiddins 
",jpsim,segiddins
2298,2015-07-27 17:23:36,"Might help with https://github.com/realm/realm-cocoa/issues/2294, but I doubt it

\c @jpsim 
",segiddins,jpsim
2295,2015-07-29 17:50:34,"@burning-git that's actually the way key-value coding is supposed to work, as described in [Apple's programming guide](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html). (i.e. it's intentional that an exception is raised when trying to get/set the value for an unknown key)

If you want to determine if a given RLMObject has a particular property, you can either use `-[RLMObject respondsToSelector:@selector(propertyName)]`, or check if `[[object.objectSchema.properties valueForKey:@""name""] containsObject:@""propertyName""]`.

I hope that answers your question!
",segiddins,selector
2295,2015-07-30 01:37:12,"1:
I try use  [RLMObject respondsToSelector:@selector(propertyName)]  then, find the RMLObject is  RLMStandalone_InformationType  (but RMLObject is InfomationType in fact).  
 2:
[[object.objectSchema.properties valueForKey:@""name""] containsObject:@""propertyName""]  It's success,  
then  I want to konw  Why 1 not function,, I try to  use setPropertyName,,,but It's  wrong!  Can you help me?
",burning-git,selector
2295,2015-07-30 02:48:17,"oh,sorry ,my english not well...
I use    -[RLMObject respondsToSelector:@selector(propertyName)]   method, It's not fuction
",burning-git,selector
2293,2015-07-25 02:52:00,"I ran this successfully a few times on `Test Xcode 6 Installation Examples` and `Test Xcode 7 Installation Examples`. /cc @segiddins 

Definitely hacky, but this is just as part of our tests so my standards are pretty low especially since things are so broken currently.
",jpsim,segiddins
2291,2015-07-24 23:52:19,"Might alleviate issues with testAutorefreshAfterBackgroundUpdate hanging

\c @jpsim 
",segiddins,jpsim
2290,2015-07-24 22:07:47,"@segiddins' :+1: IRL:

![image](https://cloud.githubusercontent.com/assets/474794/8885545/a44bcd32-3215-11e5-954a-f84b475a8a85.png)
",jpsim,segiddins
2289,2015-07-24 21:46:06,"Renamed Build-Swift-2.0 -> Build-Xcode-7.0 & only move watchOS to Xcode 7.0. /cc @segiddins 
",jpsim,segiddins
2287,2015-07-24 18:52:30,"This should hopefully resolve issues on CI where the iOS Simulator doesn't boot when switching between Xcode 6 and Xcode 7. /cc @segiddins 
",jpsim,segiddins
2284,2015-07-24 17:14:56,"We actually have an optimized way of doing this -- `[[MyObject allObjects] setValue:@NO forKeyPath:@""active""]` -- could you give that a whirl?
",segiddins,NO
2280,2015-07-23 17:37:39,"This PR is a sequel from #2171. As suggested that, plugin should at least warn user in the case where 2 or more files are detected and about to open. This PR aims to fix this.

@TimOliver, I were trying several things, but I got no luck. :crying_cat_face: 

Using `[[NSWorkspace sharedWorkspace] launchApplicationAtURL:self.browserUrl options:0 configuration:configuration error:&error]`. or replacing with `options:NSWorkspaceLaunchDefault` seems to work, but it fails to open Realm File on the subsequent runs (meaning that closing the Realm file window without quitting the Realm Browser and go to File > Open Realm ... in order to open Browser with Realm file again)

I am not familiar enough with Apple Script so unfortunately I couldn't make the `[NSWorkspace openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:]` to work. 
:(

So, I decided that to the least having a check from plugin's standpoint is doable from my side. I went ahead and implemented those quickly in this PR. If you have a smarter way for this, I am all ears.
",kittinunf,TimOliver
2280,2015-07-28 07:04:09,"Hi @kittinunf! Thanks a lot for your follow-up pull request!

Ahh, okay then. It looks like we've ironically got just the wrong set of API combinations to make that possible. That's a bit of a shame. Sorry to have made you go away and research that! I might keep it in mind and see if there's a better way to do it (Even if it means some kind of direct communication between the plugin and the Browser).

I reviewed your code, and that looks like the best solution at present to me. That'll cover the portions of the multiple file handling operations that weren't getting covered on Realm Browser's side.

@jpsim I'm happy with this pull request. Shall we merge it in?
",TimOliver,jpsim
2279,2015-07-23 17:16:41,"Otherwise the ""Package iOS Swift"" job fails. /cc @segiddins 
",jpsim,segiddins
2275,2015-07-22 19:48:43,"\c @jpsim 
",segiddins,jpsim
2273,2015-07-29 17:58:33,"Failure is unrelated.

\c @jpsim 
",segiddins,jpsim
2271,2015-07-21 22:30:39,"This makes `test-package-release` pass for me.

\c @jpsim 
",segiddins,jpsim
2268,2015-07-21 19:54:52,"\c @jpsim 
",segiddins,jpsim
2265,2015-07-21 17:54:26,"\c @jpsim 
",segiddins,jpsim
2264,2016-01-07 01:11:55,"@TimOliver you assigned yourself to this a while back. Are you still working on it? If so, what's blocking you? If not, please unassign yourself.
",jpsim,TimOliver
2263,2015-07-21 16:32:39,"This fixes an issue in `Realm.xcodeproj` where iOS destinations were available for OS X targets and vice-versa. /cc @segiddins @alazier 
",jpsim,alazier
2263,2015-07-21 16:32:39,"This fixes an issue in `Realm.xcodeproj` where iOS destinations were available for OS X targets and vice-versa. /cc @segiddins @alazier 
",jpsim,segiddins
2259,2015-07-20 23:59:35,"This should fix releasability?

\c @jpsim 
",segiddins,jpsim
2258,2015-07-20 23:00:46,"Closes #2248.

\c @jpsim 
",segiddins,jpsim
2257,2015-07-20 22:23:46,"\c @jpsim 
",segiddins,jpsim
2255,2015-07-20 21:25:20,"This should _actually_ fix #2250, in addition to adding watchos support to the RealmSwift podspec

\c @jpsim 
",segiddins,jpsim
2254,2015-07-20 20:52:59,"…re_paths

Closes https://github.com/realm/realm-cocoa/issues/2250

\c @jpsim 
",segiddins,jpsim
2252,2015-07-20 19:52:09,"@segiddins @simonask 
",alazier,simonask
2252,2015-07-20 19:52:09,"@segiddins @simonask 
",alazier,segiddins
2252,2015-08-12 19:06:56,"Performance is now on par with what is on master. Would be good to start reviewing @tgoyne @bdash @segiddins 
",alazier,tgoyne
2252,2015-08-12 19:06:56,"Performance is now on par with what is on master. Would be good to start reviewing @tgoyne @bdash @segiddins 
",alazier,bdash
2252,2015-08-12 19:06:56,"Performance is now on par with what is on master. Would be good to start reviewing @tgoyne @bdash @segiddins 
",alazier,segiddins
2251,2015-07-20 19:43:36,"\c @jpsim 
",segiddins,jpsim
2250,2015-07-20 21:06:13,"@kordziu @d6u give it another shot, I should've just fixed this
",segiddins,kordziu
2246,2015-07-20 11:59:00,"Currently we support the types `RLMPropertyTypeString` and `RLMPropertyTypeInt` for primary keys. It could make sense to support links (`RLMPropertyTypeObject`) as well. tbd.
/c @i-schuetz @tgoyne 
",mrackwitz,i-schuetz
2246,2015-07-20 11:59:00,"Currently we support the types `RLMPropertyTypeString` and `RLMPropertyTypeInt` for primary keys. It could make sense to support links (`RLMPropertyTypeObject`) as well. tbd.
/c @i-schuetz @tgoyne 
",mrackwitz,tgoyne
2245,2015-07-28 16:36:26,"Sorry for the late reply, @maciejtrybilo. We agree this should be better explained in the docs and @TimOliver is working on improving that right now. We'll close this issue once we've updated our docs accordingly.
",jpsim,TimOliver
2241,2015-07-18 20:02:33,"I don't know about the translations, but I'll ping @yoshyosh on that. 
",segiddins,yoshyosh
2241,2015-07-20 19:26:14,"@tebica is the best person for this
",yoshyosh,tebica
2231,2015-12-14 09:47:27,"This looks like it's already done. Is it alright to close this issue?

/cc @yoshyosh @jpsim 
",TimOliver,jpsim
2216,2015-07-20 22:40:32,"This should be good to go now, \c @jpsim 
",segiddins,jpsim
2213,2015-07-16 18:38:15,"@jpsim and @segiddins does this look ok in terms of making dynamic api more accessible?
",bigfish24,jpsim
2213,2015-07-16 18:38:15,"@jpsim and @segiddins does this look ok in terms of making dynamic api more accessible?
",bigfish24,segiddins
2213,2015-07-21 18:08:06,"@jpsim you said you had issues with opening this up. Would you have any issues with just releasing the dynamic retrieval methods? I would prefer to use this with components than objc reflection. The others I can live without for now...
",bigfish24,jpsim
2210,2015-07-16 01:31:25,"Yup, the first problem is one we're aware of and @tgoyne is working to fix. The second will be addressed with https://github.com/realm/realm-cocoa/pull/2139 shortly!
",segiddins,tgoyne
2209,2015-07-15 21:38:02,"Supersedes #2069 and #2202. Moves all swift files that need to be different in 1.2 and 2.0 into version-tagged directories, and then switches symlinks between the two depending on what version of Xcode is being used to build things.

@segiddins @jpsim 
",tgoyne,jpsim
2209,2015-07-15 21:38:02,"Supersedes #2069 and #2202. Moves all swift files that need to be different in 1.2 and 2.0 into version-tagged directories, and then switches symlinks between the two depending on what version of Xcode is being used to build things.

@segiddins @jpsim 
",tgoyne,segiddins
2206,2015-07-15 20:34:38,"Closes #2205.

\c @tgoyne 
",segiddins,tgoyne
2202,2015-07-14 22:41:02,"This is some infrastructure work necessary to allow merging Swift 2 into master alongside 1.2, so please do review it! \c @tgoyne @jpsim @bdash @mrackwitz 
",segiddins,mrackwitz
2202,2015-07-14 22:41:02,"This is some infrastructure work necessary to allow merging Swift 2 into master alongside 1.2, so please do review it! \c @tgoyne @jpsim @bdash @mrackwitz 
",segiddins,jpsim
2202,2015-07-14 22:41:02,"This is some infrastructure work necessary to allow merging Swift 2 into master alongside 1.2, so please do review it! \c @tgoyne @jpsim @bdash @mrackwitz 
",segiddins,tgoyne
2202,2015-07-14 22:41:02,"This is some infrastructure work necessary to allow merging Swift 2 into master alongside 1.2, so please do review it! \c @tgoyne @jpsim @bdash @mrackwitz 
",segiddins,bdash
2200,2015-07-14 17:31:32,"See https://github.com/realm/realm-cocoa/pull/2154.
Closes https://github.com/realm/realm-cocoa/issues/2152.

\c @tgoyne @bdash 
",segiddins,tgoyne
2200,2015-07-14 17:31:32,"See https://github.com/realm/realm-cocoa/pull/2154.
Closes https://github.com/realm/realm-cocoa/issues/2152.

\c @tgoyne @bdash 
",segiddins,bdash
2198,2016-01-25 16:43:14,"Thanks for all the :+1:’s — this is plenty enough for us to prioritize this as one of our top items! We can’t commit to a specific timeline just yet as we are focusing all of our energy on 1.0 for Objective-C, Swift & Java and we would only launch for C++ after that is done, but we’ll probably close down the comments on this issue soon and ask y’all to register your email for a possible beta instead — that’s been a more productive way for us to move new products like this from idea to feedback, and launch them promptly /cc @nosrak113 
",timanglade,nosrak113
2187,2015-07-09 15:11:35,"Probably. Just keeping it consistent with https://github.com/realm/realm-cocoa/commit/308b0fa5099bdf8c985ef312962782668e56994e from earlier today by @tgoyne.
",allending,tgoyne
2187,2015-07-09 16:35:24,":+1: @tgoyne ?
",segiddins,tgoyne
2177,2015-07-08 05:48:06,"Depends on https://github.com/realm/realm-core/pull/933.

/cc @tgoyne @jpsim 
",bdash,jpsim
2177,2015-07-08 05:48:06,"Depends on https://github.com/realm/realm-core/pull/933.

/cc @tgoyne @jpsim 
",bdash,tgoyne
2175,2015-07-07 20:21:56,"All CI workers have been updated to jazzy 0.2.2, so this should be supported by CI immediately. /cc @yoshyosh @timanglade 
",jpsim,yoshyosh
2175,2015-07-07 20:21:56,"All CI workers have been updated to jazzy 0.2.2, so this should be supported by CI immediately. /cc @yoshyosh @timanglade 
",jpsim,timanglade
2174,2015-07-14 18:02:02,"Please review, @bdash  @jpsim 
",segiddins,bdash
2171,2015-07-07 06:46:38,"A week ago, I have created an Xcode plugin to open Realm Browser with relevant Realm File. Little did I know that you guys have created already this plugin to open Realm Browser but not with file.

Thus, by recommendation of @jpsim in the issue (https://github.com/kittinunf/RealmBrowser-Plugin/issues/1), I think it is a nice idea to extend the functionality of Realm Browser plugin itself by combining my implementation into yours. This PR is to serve this purpose, and ultimately deprecate my plugin once it is merged. 

I intentionally break things into a multiple commits just for reviewer to easier review my code. 

All comments are appreciated. :sunny: 
",kittinunf,jpsim
2171,2015-07-07 09:19:15,"Hi there Kittinun!

Awesome! Thank you so much for this! As someone who debugs Realm files in a production app, this sort of thing is incredibly useful for me!

That being said, I think I found a bit of a problem, although it might be an issue on Realm Browser's side that I could potentially take care of.

I just tried using the plugin on my own copy of Xcode, and this happened:
![realmbrowseroverload](https://cloud.githubusercontent.com/assets/429119/8542459/6d5e0380-24c8-11e5-8272-ed656ddbee34.jpg)

One of my apps uses Realm in a pretty crazy way. It has a standard default.realm file where all of the main data is kept, and then for each user-generated file in the app, it has a subsequent .realm file that stores cached information about each file. When I opened the Browser via the plugin, it looks like it was instructed to open every single .realm file in my Simulator device's directory, including all the cache files.

In any case, it might be best if I include some safeguards in Realm Browser for these kinds cases (Maybe a prompt that appears when a certain number of Realm files are opened at once)

/cc @jpsim What do you think?
",TimOliver,jpsim
2169,2015-07-06 22:00:49,"…n possible

Might help out in a few situations where https://github.com/realm/realm-cocoa/issues/2159 is an issue.

\c @tgoyne @bdash 
",segiddins,tgoyne
2169,2015-07-06 22:00:49,"…n possible

Might help out in a few situations where https://github.com/realm/realm-cocoa/issues/2159 is an issue.

\c @tgoyne @bdash 
",segiddins,bdash
2168,2015-07-06 21:31:01,"…n a realm is open

Closes https://github.com/realm/realm-cocoa/issues/2157.

\c @tgoyne @jpsim 
",segiddins,jpsim
2168,2015-07-06 21:31:01,"…n a realm is open

Closes https://github.com/realm/realm-cocoa/issues/2157.

\c @tgoyne @jpsim 
",segiddins,tgoyne
2168,2015-07-13 23:34:40,"Ping @jpsim ?
",segiddins,jpsim
2154,2015-07-02 22:18:48,"Closes #2152.
Depends upon https://github.com/realm/realm-core/pull/922.

\c @tgoyne 
",segiddins,tgoyne
2154,2015-07-06 18:22:08,"@tgoyne this has now been merged into core
",segiddins,tgoyne
2153,2015-08-21 01:27:24,"I believe @tgoyne recently fixed these?
",segiddins,tgoyne
2147,2015-07-01 20:05:51,"`dynamic var prop: Int` works, but `dynamic var prop: Int?` wont even compile
compiler complains that `Int?` is a type that can't be represented in ObjC

`dynamic var prop: RLMInt?` works (when `RLMInt` is an `@objc protocol` that
`NSNumber` conforms to) and we can use swift runtime reflection to figure out the 
proper type (protocols only seem to get type-erased when they're not being used 
as generic parameters). You can assign any 'number' type to these properties,
but you'd need to force downcast to get a value out. We cant make the protocols 
conform to their swift equivalents (i.e. `IntegerType`) because then it couldn't 
be `@objc` and thus couldn't be used as a `dynamic` property.
[This solution is the one most analogous to how I've successfully prototyped 
object-type primitives in ObjC]

using raw `dynamic var prop: NSNumber?` would work, except there's no good way to
figure out _which_ type of number to use during schema initialization. Swift has
no way to define a property as a type composed of a class and a protocol 
(ala `NSNumber<RLMInt> *`), so that approach is also out. 

If we required users to specify a non-nil default value for these properties,
we could require them to wrap those defaults in a function call
(`dynamic var prop: NSNumber? = RealmInt(5)`) that could return a subclass that 
we could use to identify the proper type, but that's gross, is easy to forget,
and doesnt allow for nil default values.

We could also use new classes, either a subclass of `NSNumber` or `NSObject`.
Either way, we'd be giving up on tagged pointer numbers, which would be a _massive_
performance loss. Either way, we could make assigning number literals work via
custom literal convertible protocols, but assigning computed values would only 
work if it were an `NSNumber` subclass. I'm not sure using swift's arithmetic 
operators would work with either or these approaches, although it's more likely
they would as an `NSNumber` subclass.
",segiddins,objc
2146,2015-07-01 17:51:42,"Fixes an issue introduced by #2128 preventing Realm from building via CocoaPods. /cc @segiddins @bdash
",jpsim,bdash
2146,2015-07-01 17:51:42,"Fixes an issue introduced by #2128 preventing Realm from building via CocoaPods. /cc @segiddins @bdash
",jpsim,segiddins
2143,2015-06-30 21:59:01,"\c @jpsim 
",segiddins,jpsim
2139,2015-06-30 09:08:45,"To link the watchOS application or framework and Realm.framework, Realm.framework must support armv7k architecture.

Add a build script and configuration that generates Realm.framework and RealmSwfit.framework including armv7k architecture to support the watch devices in this PR.

It needs to separate the binaries from for iOS binaries because i386 binary for iOS simulator and i386 binary for watchOS simulator could not coexist in the same fat binary.

I think we will have to discuss naming issue:
(e.g.)
`Realm.framework` => `Realm-iOS.framework`
`Realm.framework` => `Realm-WatchOS.framework`

@tgoyne @jpsim @segiddins

https://github.com/realm/realm-cocoa/issues/2099
https://github.com/realm/realm-core/pull/913
",kishikawakatsumi,jpsim
2139,2015-06-30 09:08:45,"To link the watchOS application or framework and Realm.framework, Realm.framework must support armv7k architecture.

Add a build script and configuration that generates Realm.framework and RealmSwfit.framework including armv7k architecture to support the watch devices in this PR.

It needs to separate the binaries from for iOS binaries because i386 binary for iOS simulator and i386 binary for watchOS simulator could not coexist in the same fat binary.

I think we will have to discuss naming issue:
(e.g.)
`Realm.framework` => `Realm-iOS.framework`
`Realm.framework` => `Realm-WatchOS.framework`

@tgoyne @jpsim @segiddins

https://github.com/realm/realm-cocoa/issues/2099
https://github.com/realm/realm-core/pull/913
",kishikawakatsumi,tgoyne
2139,2015-06-30 09:08:45,"To link the watchOS application or framework and Realm.framework, Realm.framework must support armv7k architecture.

Add a build script and configuration that generates Realm.framework and RealmSwfit.framework including armv7k architecture to support the watch devices in this PR.

It needs to separate the binaries from for iOS binaries because i386 binary for iOS simulator and i386 binary for watchOS simulator could not coexist in the same fat binary.

I think we will have to discuss naming issue:
(e.g.)
`Realm.framework` => `Realm-iOS.framework`
`Realm.framework` => `Realm-WatchOS.framework`

@tgoyne @jpsim @segiddins

https://github.com/realm/realm-cocoa/issues/2099
https://github.com/realm/realm-core/pull/913
",kishikawakatsumi,segiddins
2139,2015-07-01 17:38:47,"@bigfish24 was able to run a watchOS 2 app using Realm natively on the watch, installed via CocoaPods, so therefore without an armv7k architecture for core, using Xcode 7 Beta 2. Maybe there's something wrong with your configuration, @kishikawakatsumi?
",jpsim,bigfish24
2133,2015-06-26 17:06:52,"See https://github.com/realm/realm-cocoa/commit/ca5c60981a76838836318bc2afd1601b7d2b3ccd#commitcomment-11883596

/cc @ikonst @tgoyne
",jpsim,ikonst
2133,2015-06-26 17:06:52,"See https://github.com/realm/realm-cocoa/commit/ca5c60981a76838836318bc2afd1601b7d2b3ccd#commitcomment-11883596

/cc @ikonst @tgoyne
",jpsim,tgoyne
2131,2015-07-16 11:44:50,"hey @mrackwitz  @jpsim  @segiddins  Closing this issue because it wasn't related to Realm. It was really hard for me to troubleshoot the problem and at the end root cause was custom navigation.
",tariq235,jpsim
2130,2015-06-26 00:55:18,"Fixes #1936 #1937 #1938. /cc @segiddins 

I've made sure that `test-all` succeeds locally after a `git clean`, so this _should_ pass CI too.
",jpsim,segiddins
2129,2015-06-25 23:31:54,"fixes #1939 /cc @segiddins 
",jpsim,segiddins
2128,2015-06-25 22:47:54,"Add nullability annotations to the Objective-C API to provide enhanced compiler warnings and bridging to Swift.

Closes #1476.

/cc @jpsim @tgoyne @segiddins 
",bdash,jpsim
2128,2015-06-25 22:47:54,"Add nullability annotations to the Objective-C API to provide enhanced compiler warnings and bridging to Swift.

Closes #1476.

/cc @jpsim @tgoyne @segiddins 
",bdash,tgoyne
2128,2015-06-25 22:47:54,"Add nullability annotations to the Objective-C API to provide enhanced compiler warnings and bridging to Swift.

Closes #1476.

/cc @jpsim @tgoyne @segiddins 
",bdash,segiddins
2127,2015-06-25 20:55:41,"Unfortunately this generates warnings in our unit tests where we test incompatible models, but I've posted https://forums.developer.apple.com/message/16886 to see if there's a way to ignore that. /cc @tgoyne
",jpsim,tgoyne
2126,2015-06-25 20:54:49,"Unfortunately this generates warnings in our unit tests where we test incompatible models, but I've posted https://forums.developer.apple.com/message/16886 to see if there's a way to ignore that. /cc @tgoyne 
",jpsim,tgoyne
2125,2015-06-25 19:04:41,"Closes #1160 

\c @tgoyne 
",segiddins,tgoyne
2122,2015-06-24 21:15:26,"Closes #2120.

\c @jpsim @tgoyne 
",segiddins,jpsim
2122,2015-06-24 21:15:26,"Closes #2120.

\c @jpsim @tgoyne 
",segiddins,tgoyne
2119,2015-08-25 21:28:19,"@tgoyne observed this this morning on his machine -- appeared to be waiting for the process to finish when it was no longer alive
",segiddins,tgoyne
2113,2015-06-23 22:44:34,"This will make app transport and the iOS 9 SDK much much happier

\c @jpsim 
",segiddins,jpsim
2112,2015-06-23 22:37:24,"@codywinton this is a feature we'd very much like to add, but it will require some fairly involved changes. You can follow https://github.com/realm/realm-cocoa/issues/1109 for any updates!
",segiddins,codywinton
2110,2015-06-23 00:17:34,"\c @tgoyne @bdash 
",segiddins,tgoyne
2110,2015-06-23 00:17:34,"\c @tgoyne @bdash 
",segiddins,bdash
2109,2015-06-22 18:56:52,"\c @alazier @tgoyne 
",segiddins,alazier
2109,2015-06-22 18:56:52,"\c @alazier @tgoyne 
",segiddins,tgoyne
2107,2015-06-24 06:26:10,"Thanks for pointing that out, @ikonst! @segiddins updated that part of our docs this morning thanks to your keen eye and for telling us about the inaccuracy: https://realm.io/docs/objc/latest/#performing-a-migration
",jpsim,segiddins
2106,2015-06-21 17:02:40,"When I run my App on iOS device which uses Realm with swift 2.0 support installed using cocoapods, it gives this error and crashes the app:
Error: dyld: Library not loaded: @rpath/Pods.framework/Pods
",imran20487,rpath
2105,2015-06-21 11:45:07,"I really like my controllers db independent as per clean code architecture. This approach worked great in my all big projects where I have used CoreData. For my new project I am using Realm and following same architecture principles. Here is my code snippet:

dispatch_async(self.realmQueryQueue, ^{    



So in updateForRealmData method I have converted RLMObject properties back to NSObject  properties. But there is no way to convert RLMArray to NSArray. I really wanna figure out possible options to make my controller independent.

Right now if use @property (nonatomic) RLMArray<IVChats> in normal NSObject then I can't access my independent NSObject on different thread and I have started getting crash, ""Realm accessed from incorrect thread"".
",tariq235,property
2105,2015-06-22 13:52:49,"@sandalsoft  Thank you for the suggestion. @jpsim  @segiddins  Do we have any recommended and best approach ?
",tariq235,jpsim
2105,2015-06-22 13:52:49,"@sandalsoft  Thank you for the suggestion. @jpsim  @segiddins  Do we have any recommended and best approach ?
",tariq235,segiddins
2100,2015-06-18 19:34:01,"\c @tgoyne 
",segiddins,tgoyne
2099,2015-06-18 15:26:36,"@MarcoSero is there anything in particular realm doesn't support for watchos? I believe @kishikawakatsumi looked into this earlier?
",segiddins,kishikawakatsumi
2098,2015-06-17 23:29:16,"/cc @jpsim @tgoyne @segiddins  @timanglade 

I've removed the entire Realm Browser project directory from this repo, and removed all references to the browser in the build script. Please let me know if that's all good, or if I've missed anything. Thanks!
",TimOliver,jpsim
2098,2015-06-17 23:29:16,"/cc @jpsim @tgoyne @segiddins  @timanglade 

I've removed the entire Realm Browser project directory from this repo, and removed all references to the browser in the build script. Please let me know if that's all good, or if I've missed anything. Thanks!
",TimOliver,tgoyne
2098,2015-06-17 23:29:16,"/cc @jpsim @tgoyne @segiddins  @timanglade 

I've removed the entire Realm Browser project directory from this repo, and removed all references to the browser in the build script. Please let me know if that's all good, or if I've missed anything. Thanks!
",TimOliver,timanglade
2098,2015-06-17 23:29:16,"/cc @jpsim @tgoyne @segiddins  @timanglade 

I've removed the entire Realm Browser project directory from this repo, and removed all references to the browser in the build script. Please let me know if that's all good, or if I've missed anything. Thanks!
",TimOliver,segiddins
2097,2015-06-17 21:57:40,"/cc @segiddins @tgoyne 
",jpsim,tgoyne
2097,2015-06-17 21:57:40,"/cc @segiddins @tgoyne 
",jpsim,segiddins
2095,2015-06-17 17:57:39,"\c @jpsim @tgoyne 
",segiddins,jpsim
2095,2015-06-17 17:57:39,"\c @jpsim @tgoyne 
",segiddins,tgoyne
2094,2015-06-16 23:33:39,"@cmelchior @tgoyne 
",alazier,tgoyne
2094,2015-06-16 23:33:39,"@cmelchior @tgoyne 
",alazier,cmelchior
2087,2015-06-16 04:31:37,"Reverts realm/realm-cocoa#1898. Looks like there are still issues with this PR (see https://ci.realm.io/job/objc_ios/958/). /cc @segiddins 
",jpsim,segiddins
2085,2015-06-15 17:40:42,"/c @jpsim @timanglade 
",mrackwitz,jpsim
2085,2015-06-15 17:40:42,"/c @jpsim @timanglade 
",mrackwitz,timanglade
2084,2015-06-25 22:24:18,"Do we want to keep this PR open until a release of core is made @tgoyne? It's simple enough to warrant just closing this IMO. I'm tidying up our PRs and issues.
",jpsim,tgoyne
2079,2015-06-12 21:51:41,"Closes #2021.

\c @conradev @tgoyne @bdash 
",segiddins,conradev
2079,2015-06-12 21:51:41,"Closes #2021.

\c @conradev @tgoyne @bdash 
",segiddins,tgoyne
2079,2015-06-12 21:51:41,"Closes #2021.

\c @conradev @tgoyne @bdash 
",segiddins,bdash
2078,2015-06-12 20:47:39,"/cc @fab1n
",jpsim,fab1n
2078,2015-06-13 02:58:47,"Oh, you're absolutely right! We were discussing this in person and I didn't dive in to the code/docs to see what the `encryptionKey:` parameter was for. Consider this done @fab1n
",jpsim,fab1n
2078,2015-06-13 06:25:59,"Oh, man, brillant. Would have been a showstopper! Nice work. 

> Am 12.06.2015 um 19:58 schrieb JP Simard notifications@github.com:
> 
> Oh, you're absolutely right! We were discussing this in person and I didn't dive in to the code/docs to see what the encryptionKey: parameter was for. Consider this done @fab1n
> 
> —
> Reply to this email directly or view it on GitHub.
",Fab1n,fab1n
2070,2015-10-14 07:58:02,"@jpsim could I suggest adding another step to (potentially) correct the permission error?
Happens for me in 0.95.3 (might be a system error):


",pardel,jpsim
2065,2015-06-17 16:08:31,"@michaelsand are you using Carthage 0.7.4?
",segiddins,michaelsand
2061,2015-06-08 21:32:19,"Not really very useful at the moment since you have to declare properties as `@property RLMArray<DogObject *><DogObject> *dogs` to get the typed version, and doing things like `RLMResults<DogObject *> dogs = [EmployeeObject allObjects]` doesn't give a warning.
",tgoyne,property
2061,2015-07-10 00:19:35,"This is ready to review /cc @tgoyne @segiddins @bdash. Accompanying docs PR: https://github.com/realm/realm.io/pull/742
",jpsim,bdash
2060,2015-06-08 10:20:06,"I recently had a lot of issues with my project setup and Cocoapods, so I replaced it with Carthage and also changed my test setup according to what @segiddins suggested in another issue, so that source files are not linked to the test target and are simply imported through the application module.
That's compiling now, but when I try to run the test suite, I get the following errors. Is there something wrong with my project configuration?


",flipchen,segiddins
2057,2015-06-05 21:03:15,"First pass at creation a common code base that can be shared across bindings. Functionally not much has changed, but there are few small differences from previous behaviors:
- `isIndexed` is now ignored for primary key properties - primary key properties will always have an index created
- manually running a migration returns any issues encountered as an NSError as the return value. Before we threw exceptions even though the `performMigration` returns an error.

@tgoyne @jpsim @bdash 
",alazier,jpsim
2057,2015-06-05 21:03:15,"First pass at creation a common code base that can be shared across bindings. Functionally not much has changed, but there are few small differences from previous behaviors:
- `isIndexed` is now ignored for primary key properties - primary key properties will always have an index created
- manually running a migration returns any issues encountered as an NSError as the return value. Before we threw exceptions even though the `performMigration` returns an error.

@tgoyne @jpsim @bdash 
",alazier,tgoyne
2057,2015-06-05 21:03:15,"First pass at creation a common code base that can be shared across bindings. Functionally not much has changed, but there are few small differences from previous behaviors:
- `isIndexed` is now ignored for primary key properties - primary key properties will always have an index created
- manually running a migration returns any issues encountered as an NSError as the return value. Before we threw exceptions even though the `performMigration` returns an error.

@tgoyne @jpsim @bdash 
",alazier,bdash
2057,2015-06-11 19:21:03,"I added a new method per @tgoyne 's suggestion to remove the table and clear the primary key to preserve the previous behavior in the objc binding. @cmelchior if there is other stuff we need to support the java binding we can add that to a future pr. As soon as we finish this I can get started adding the ability to specify custom error messages and whatever else you guys need. We should also probably discuss ways to reconcile differences in behavior across bindings where possible but there is no need for that discussion to block this pr.
",alazier,cmelchior
2056,2015-06-05 17:33:40,"This should be more informative than dynamic casting in swift unit
tests silently failing, and will also handle the case where the two class
definitions aren't identical.

Closes #2054.

\c @jpsim @bdash 
",segiddins,jpsim
2056,2015-06-05 17:33:40,"This should be more informative than dynamic casting in swift unit
tests silently failing, and will also handle the case where the two class
definitions aren't identical.

Closes #2054.

\c @jpsim @bdash 
",segiddins,bdash
2049,2015-06-03 21:06:18,"Since we package the same `Realm.framework` that we test. /cc @tgoyne @segiddins @bdash 
",jpsim,tgoyne
2049,2015-06-03 21:06:18,"Since we package the same `Realm.framework` that we test. /cc @tgoyne @segiddins @bdash 
",jpsim,bdash
2049,2015-06-03 21:06:18,"Since we package the same `Realm.framework` that we test. /cc @tgoyne @segiddins @bdash 
",jpsim,segiddins
2047,2015-06-03 15:14:18,"@OlegAnghelov seeing the entire crash report would be helpful, as would having a project that reproduces the issue, if it's something that is happening reliably for you. Thanks!
",segiddins,OlegAnghelov
2047,2015-06-03 15:44:52,"Thanks for sharing this, @OlegAnghelov. It looks identical to https://github.com/realm/realm-cocoa/issues/1582, so it's an issue we're actively investigating and working on fixing (it's a corrupt database file). You can follow that issue for more updates, thanks!
",segiddins,OlegAnghelov
2045,2015-06-03 00:43:25,"Cherry picked from https://github.com/realm/realm-cocoa/pull/1798.

\c @jpsim 
",segiddins,jpsim
2044,2015-06-03 00:40:31,"\c @jpsim @tgoyne @kishikawakatsumi 
",segiddins,jpsim
2044,2015-06-03 00:40:31,"\c @jpsim @tgoyne @kishikawakatsumi 
",segiddins,tgoyne
2044,2015-06-03 00:40:31,"\c @jpsim @tgoyne @kishikawakatsumi 
",segiddins,kishikawakatsumi
2043,2015-06-03 00:01:01,"Closes #1924.

\c @tgoyne @jpsim @bdash 
",segiddins,jpsim
2043,2015-06-03 00:01:01,"Closes #1924.

\c @tgoyne @jpsim @bdash 
",segiddins,tgoyne
2043,2015-06-03 00:01:01,"Closes #1924.

\c @tgoyne @jpsim @bdash 
",segiddins,bdash
2042,2015-06-03 00:00:42,"/cc @tgoyne @segiddins @bdash turns out we weren't using this, as detected by @kishikawakatsumi's SwiftCov tool :smile:.
",jpsim,kishikawakatsumi
2042,2015-06-03 00:00:42,"/cc @tgoyne @segiddins @bdash turns out we weren't using this, as detected by @kishikawakatsumi's SwiftCov tool :smile:.
",jpsim,tgoyne
2042,2015-06-03 00:00:42,"/cc @tgoyne @segiddins @bdash turns out we weren't using this, as detected by @kishikawakatsumi's SwiftCov tool :smile:.
",jpsim,bdash
2042,2015-06-03 00:00:42,"/cc @tgoyne @segiddins @bdash turns out we weren't using this, as detected by @kishikawakatsumi's SwiftCov tool :smile:.
",jpsim,segiddins
2041,2015-06-02 18:08:33,"Closes most of https://github.com/realm/realm-cocoa-private/issues/68.

\c @jpsim
",segiddins,jpsim
2039,2015-06-02 00:01:27,"\c @jpsim 
",segiddins,jpsim
2038,2015-06-01 23:48:29,"Hi, I declared my data model in swift like so:



When I try to query the model in an objective c file like so:



I get `No known class method for selector 'objectsWhere:'`. I did a little digging and found out that the imported data model swift class does not implement the objective-c way of querying. Moreover, when I try the swift way:



I get `No visible @interface for 'RLMRealm' declares the selector 'objects:where:'`.
What's the best practice here? Declaring the data model twice?

Thanks, Amitai
",amitai-hoze,interface
2037,2015-06-01 22:24:18,"Closes most of https://github.com/realm/realm-cocoa-private/issues/65

\c @jpsim 
",segiddins,jpsim
2033,2015-06-01 19:18:50,"Closes #2032.

\c @jpsim @bdash 
",segiddins,jpsim
2033,2015-06-01 19:18:50,"Closes #2032.

\c @jpsim @bdash 
",segiddins,bdash
2022,2015-05-29 06:52:25,"As identified by https://twitter.com/ronaldmannak/status/604118705870479360. /cc @tgoyne @bdash @segiddins 
",jpsim,tgoyne
2022,2015-05-29 06:52:25,"As identified by https://twitter.com/ronaldmannak/status/604118705870479360. /cc @tgoyne @bdash @segiddins 
",jpsim,bdash
2022,2015-05-29 06:52:25,"As identified by https://twitter.com/ronaldmannak/status/604118705870479360. /cc @tgoyne @bdash @segiddins 
",jpsim,segiddins
2017,2015-05-27 22:19:42,"@jpsim 
",alazier,jpsim
2012,2015-05-27 17:01:27,"@tgoyne do you know with which version of Xcode CI is building the Core releases with?
",segiddins,tgoyne
2011,2015-05-27 01:03:24,"/cc @tgoyne @segiddins @jpsim 
",bdash,jpsim
2011,2015-05-27 01:03:24,"/cc @tgoyne @segiddins @jpsim 
",bdash,tgoyne
2011,2015-05-27 01:03:24,"/cc @tgoyne @segiddins @jpsim 
",bdash,segiddins
2010,2015-05-27 00:56:20,"/cc @segiddins 
",jpsim,segiddins
2010,2015-05-27 17:08:10,"I've found the proper fix now, @segiddins please review again. I'll let the CI PR job run this time because I had to make changes to the Swift examples Xcode project.
",jpsim,segiddins
2009,2015-05-27 00:12:24,"\c @jpsim 
",segiddins,jpsim
2008,2015-05-26 19:16:50,"The framework targets for iOS and OS X are folded into a single target since they're virtually identical. The test targets for iOS, iOS devices, and OS X are folded into a single target with a small amount of conditional logic to preserve the small behavioral differences between the targets.

/cc @jpsim @segiddins @tgoyne 
",bdash,jpsim
2008,2015-05-26 19:16:50,"The framework targets for iOS and OS X are folded into a single target since they're virtually identical. The test targets for iOS, iOS devices, and OS X are folded into a single target with a small amount of conditional logic to preserve the small behavioral differences between the targets.

/cc @jpsim @segiddins @tgoyne 
",bdash,tgoyne
2008,2015-05-26 19:16:50,"The framework targets for iOS and OS X are folded into a single target since they're virtually identical. The test targets for iOS, iOS devices, and OS X are folded into a single target with a small amount of conditional logic to preserve the small behavioral differences between the targets.

/cc @jpsim @segiddins @tgoyne 
",bdash,segiddins
2000,2015-05-26 01:09:33,"Prompted by #1999. I couldn't think of a reason why we shouldn't be doing this, and that functionality hasn't changed since originally introducing it (before primary keys were even supported).

/cc @tgoyne @bdash @segiddins 
",jpsim,tgoyne
2000,2015-05-26 01:09:33,"Prompted by #1999. I couldn't think of a reason why we shouldn't be doing this, and that functionality hasn't changed since originally introducing it (before primary keys were even supported).

/cc @tgoyne @bdash @segiddins 
",jpsim,bdash
2000,2015-05-26 01:09:33,"Prompted by #1999. I couldn't think of a reason why we shouldn't be doing this, and that functionality hasn't changed since originally introducing it (before primary keys were even supported).

/cc @tgoyne @bdash @segiddins 
",jpsim,segiddins
1996,2015-05-25 18:56:00,"Fixes #1995. `List` already conforms to `CVarArgType` because it inherits from `NSObject`. /cc @tgoyne @bdash @segiddins 
",jpsim,tgoyne
1996,2015-05-25 18:56:00,"Fixes #1995. `List` already conforms to `CVarArgType` because it inherits from `NSObject`. /cc @tgoyne @bdash @segiddins 
",jpsim,bdash
1996,2015-05-25 18:56:00,"Fixes #1995. `List` already conforms to `CVarArgType` because it inherits from `NSObject`. /cc @tgoyne @bdash @segiddins 
",jpsim,segiddins
1986,2015-05-22 21:23:41,"This makes it much cleaner to sort by multiple properties:



/cc @tgoyne @segiddins @bdash 
",jpsim,tgoyne
1986,2015-05-22 21:23:41,"This makes it much cleaner to sort by multiple properties:



/cc @tgoyne @segiddins @bdash 
",jpsim,bdash
1986,2015-05-22 21:23:41,"This makes it much cleaner to sort by multiple properties:



/cc @tgoyne @segiddins @bdash 
",jpsim,segiddins
1985,2015-05-22 19:11:02,"/cc @jpsim 
",bdash,jpsim
1983,2015-05-22 15:33:43,"@WayneNotTaken could you please share the code you're using to construct your results?
",segiddins,WayneNotTaken
1981,2015-05-22 11:29:30,"/c @timanglade 
",mrackwitz,timanglade
1978,2015-05-22 03:46:15,"How to remove duplicate object method in RLMResult with @property? (@property may be two to judge)
",wgywgy,property
1975,2015-05-21 17:14:43,"/cc @tgoyne 
",bdash,tgoyne
1971,2015-05-21 14:39:13,"@jspahrsummers had a good hint on twitter. He suspected that the nested framework might not be signed correctly, which sounds reasonable to me too. I will open another issue on Carthage because I think the issue is on their side. Feel free to close this one.

Twitter convo: https://twitter.com/jspahrsummers/status/601396290560217091
",pietbrauer,jspahrsummers
1967,2015-05-20 23:39:34,"Updated to address @tgoyne's feedback.

/cc @simonask
",bdash,simonask
1967,2015-05-20 23:39:34,"Updated to address @tgoyne's feedback.

/cc @simonask
",bdash,tgoyne
1963,2015-05-20 03:46:42,"Closes #1960.

\c @TimOliver 
",segiddins,TimOliver
1962,2015-05-20 02:08:02,"Hi, I am having problems using RealmSwift inside an app extension named 'RMBrowser' for my project. In the app extension setting, if ""Allow app extension API only"" is checked, I would get the following errors:

1) .../Build/Products/Debug-iphonesimulator/RMBrowser.framework/Headers/RMBrowser-Swift.h:165:23: Declaration of 'RLMNotificationToken' must be imported from module 'Realm.RLMRealm' before it is required

The offending code in RMBrowser-Swift.h is ""@property (nonatomic) RLMNotificationToken \* __nullable notificationToken;""

2) .../Build/Products/Debug-iphonesimulator/RMBrowser.framework/Headers/RMBrowser-Swift.h:258:54: Type name requires a specifier or qualifier

The offending code in RMBrowser-Swift.h is ""@property (nonatomic, readonly) /\* List<RMRecord> */ records;""

3) Could not build Objective-C module 'RMBrowser'

If the ""Allow app extension API only"" isn't checked, the app builds without errors, but as per the Apple app store requirements, this app will not be allowed into the App Store.

Really appreciate your team's input on this, thanks!
",jcjee,property
1957,2015-05-20 23:06:15,"I don't think so. As @tgoyne noted in #1967, the schema version is always updated to an actual version before the initial transaction is committed. The differing values were only apparent in the commit log, since different entries were generated for 32- and 64-bit.
",bdash,tgoyne
1957,2015-05-20 23:59:13,"Please talk to @simonask about this. He already committed a fix here https://github.com/realm/realm-cocoa-private/commit/96d310f3418e3a94104976a60d61da4ecc46a9ba.
",kspangsege,simonask
1950,2015-05-16 21:55:45,"@jpsim @tgoyne @segiddins mapping between transient NSObjects and RLMObjects would be so much easier with dynamic schema.

I have found a great example in [tests](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/DynamicTests.m), but unfortunately it seems to be using private headers for now. Do you have plans to public source the API in the near future?

Please see this [gist with the usage example.](https://gist.github.com/rbaulin/29eb1da6eeb52233ecd1)
",rbaulin,jpsim
1950,2015-05-16 21:55:45,"@jpsim @tgoyne @segiddins mapping between transient NSObjects and RLMObjects would be so much easier with dynamic schema.

I have found a great example in [tests](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/DynamicTests.m), but unfortunately it seems to be using private headers for now. Do you have plans to public source the API in the near future?

Please see this [gist with the usage example.](https://gist.github.com/rbaulin/29eb1da6eeb52233ecd1)
",rbaulin,tgoyne
1950,2015-05-16 21:55:45,"@jpsim @tgoyne @segiddins mapping between transient NSObjects and RLMObjects would be so much easier with dynamic schema.

I have found a great example in [tests](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/DynamicTests.m), but unfortunately it seems to be using private headers for now. Do you have plans to public source the API in the near future?

Please see this [gist with the usage example.](https://gist.github.com/rbaulin/29eb1da6eeb52233ecd1)
",rbaulin,segiddins
1948,2015-05-15 20:49:35,"This is significantly incomplete, but I wanted to make sure no one had objections to the basic idea before I spend too much time on it.

For KVO support on keypaths, I need to keep the observed linked-to objects alive for as long as the source object (i.e. when observing `foo.bar.baz`, `foo.bar` needs to continue to exist as long as `foo` does (or until it's changed)). The simplest way to do this is to just store the linked-to object in the ivar for the link property, and update it if needed in the property getter.

Outside of KVO this also gives a bit of a performance improvement when the same property is read repeatedly, and might make ignored properties work more sensibly. Currently if you do `obj.link.ignoredProperty = 5` and then immediately read `obj.link.ignoredProperty`, you'll get 0 (or whatever the default is), because you get different objects each time you read from `link`. With this change it'll work correctly, but I'm worried that there could be confusion with the related case of two different accessors for the same row, where maybe a user would expect both accessors to return the same linked object?

Any thoughts on if this matters, or any other potential problems from this?

@jpsim @bdash @segiddins 
",tgoyne,jpsim
1948,2015-05-15 20:49:35,"This is significantly incomplete, but I wanted to make sure no one had objections to the basic idea before I spend too much time on it.

For KVO support on keypaths, I need to keep the observed linked-to objects alive for as long as the source object (i.e. when observing `foo.bar.baz`, `foo.bar` needs to continue to exist as long as `foo` does (or until it's changed)). The simplest way to do this is to just store the linked-to object in the ivar for the link property, and update it if needed in the property getter.

Outside of KVO this also gives a bit of a performance improvement when the same property is read repeatedly, and might make ignored properties work more sensibly. Currently if you do `obj.link.ignoredProperty = 5` and then immediately read `obj.link.ignoredProperty`, you'll get 0 (or whatever the default is), because you get different objects each time you read from `link`. With this change it'll work correctly, but I'm worried that there could be confusion with the related case of two different accessors for the same row, where maybe a user would expect both accessors to return the same linked object?

Any thoughts on if this matters, or any other potential problems from this?

@jpsim @bdash @segiddins 
",tgoyne,bdash
1948,2015-05-15 20:49:35,"This is significantly incomplete, but I wanted to make sure no one had objections to the basic idea before I spend too much time on it.

For KVO support on keypaths, I need to keep the observed linked-to objects alive for as long as the source object (i.e. when observing `foo.bar.baz`, `foo.bar` needs to continue to exist as long as `foo` does (or until it's changed)). The simplest way to do this is to just store the linked-to object in the ivar for the link property, and update it if needed in the property getter.

Outside of KVO this also gives a bit of a performance improvement when the same property is read repeatedly, and might make ignored properties work more sensibly. Currently if you do `obj.link.ignoredProperty = 5` and then immediately read `obj.link.ignoredProperty`, you'll get 0 (or whatever the default is), because you get different objects each time you read from `link`. With this change it'll work correctly, but I'm worried that there could be confusion with the related case of two different accessors for the same row, where maybe a user would expect both accessors to return the same linked object?

Any thoughts on if this matters, or any other potential problems from this?

@jpsim @bdash @segiddins 
",tgoyne,segiddins
1942,2015-05-14 17:25:06,"Closes #1907.

\c @jpsim @tgoyne @bdash 
",segiddins,jpsim
1942,2015-05-14 17:25:06,"Closes #1907.

\c @jpsim @tgoyne @bdash 
",segiddins,tgoyne
1942,2015-05-14 17:25:06,"Closes #1907.

\c @jpsim @tgoyne @bdash 
",segiddins,bdash
1942,2015-05-26 20:21:22,"The CI failure here is 

> 2015-05-26 13:15:04.703 xcodebuild[34272:468137] [MT] iPhoneSimulator: SimVerifier returned: Error Domain=NSPOSIXErrorDomain Code=53 ""Simulator verification failed."" UserInfo=0x7fcf8142ff60 {NSLocalizedFailureReason=A connection to the simulator verification service could not be established., NSLocalizedRecoverySuggestion=Ensure that Xcode.app is installed on a volume with ownership enabled., NSLocalizedDescription=Simulator verification failed.}

@tgoyne @bdash please give this a quick look over?
",segiddins,bdash
1935,2015-05-13 20:46:56,"From our conversation this morning during the cocoa meeting. /cc @segiddins 

Only the first of several steps defined here: https://github.com/realm/realm-cocoa-private/issues/73
",jpsim,segiddins
1934,2015-05-13 16:21:12,"Closes #1931 

\c @jpsim 
",segiddins,jpsim
1928,2015-05-13 01:02:41,"Fixes #1916.

As far as I can tell, this doesn't negatively impact anything since convenience initializers can still be created for Object subclasses without having to override `init()`. /cc @tgoyne @segiddins @bdash
",jpsim,tgoyne
1928,2015-05-13 01:02:41,"Fixes #1916.

As far as I can tell, this doesn't negatively impact anything since convenience initializers can still be created for Object subclasses without having to override `init()`. /cc @tgoyne @segiddins @bdash
",jpsim,bdash
1928,2015-05-13 01:02:41,"Fixes #1916.

As far as I can tell, this doesn't negatively impact anything since convenience initializers can still be created for Object subclasses without having to override `init()`. /cc @tgoyne @segiddins @bdash
",jpsim,segiddins
1928,2015-05-13 02:48:43,"That test did fail before. I'll wait for @tgoyne to review before merging.
",jpsim,tgoyne
1925,2015-05-12 22:02:44,"I was speaking to @nkirby earlier, who had hit the same issue, but managed to work around it by making his `List` property internal, and exposing the equivalent of `public func tracksInPlaylist(playlist: RealmPlaylist) -> Results<RealmTrack> {…}`. @nkirby can you comment on that?
",jpsim,nkirby
1920,2015-05-12 16:45:49,"Closes #1919.

\c @kishikawakatsumi @jpsim 
",segiddins,jpsim
1920,2015-05-12 16:45:49,"Closes #1919.

\c @kishikawakatsumi @jpsim 
",segiddins,kishikawakatsumi
1919,2015-05-12 16:22:43,"It's available on `RLMArray` (https://realm.io/docs/objc/latest/api/Classes/RLMArray.html#//api/name/invalidated), but not on `List`.

As reported by @AlDrago here: https://github.com/realm/realm-cocoa/issues/1492#issuecomment-101273517.
",jpsim,AlDrago
1916,2015-05-13 06:08:07,"Thanks for the great explanation @kishikawakatsumi and thanks @jpsim for making the PR!

In the meantime, this is the workaround that I went with:

If I define my own initializer in an extension and call that it works. So adding this code, and using that initializer in subsequent generic template calls worked:


",erkie,jpsim
1916,2015-05-15 16:24:38,"@michaelloistl it's possible that @jpsim's pull request (https://github.com/realm/realm-cocoa/issues/1928) might fix your case as well -- feel free to try that branch out, otherwise we'll get around to adding more tests to that branch soon.
",segiddins,jpsim
1914,2015-05-11 23:21:08,"Might help https://github.com/realm/realm-cocoa/issues/1864.

\c @jpsim @mrackwitz 
",segiddins,mrackwitz
1914,2015-05-11 23:21:08,"Might help https://github.com/realm/realm-cocoa/issues/1864.

\c @jpsim @mrackwitz 
",segiddins,jpsim
1912,2015-05-11 18:44:09,"…erties

Closes #1906.

\c @bdash 
",segiddins,bdash
1911,2015-05-11 18:31:31,"…for Swift classes.

Swift classes derive from Realm.Object rather than RLMObject, so we need to work with the common
superclass, RLMObjectBase, when performing the type check.

Fixes #1901.

/cc @segiddins @jpsim @tgoyne 
",bdash,jpsim
1911,2015-05-11 18:31:31,"…for Swift classes.

Swift classes derive from Realm.Object rather than RLMObject, so we need to work with the common
superclass, RLMObjectBase, when performing the type check.

Fixes #1901.

/cc @segiddins @jpsim @tgoyne 
",bdash,tgoyne
1911,2015-05-11 18:31:31,"…for Swift classes.

Swift classes derive from Realm.Object rather than RLMObject, so we need to work with the common
superclass, RLMObjectBase, when performing the type check.

Fixes #1901.

/cc @segiddins @jpsim @tgoyne 
",bdash,segiddins
1909,2015-05-11 21:14:35,"@evo-dev-m1nd thanks so much for sharing this assertion failure! Would it be possible for you to share a sample project that reproduces this issue with us, either here or privately at help@realm.io? Thanks!
",segiddins,evo-dev-m1nd
1908,2015-05-11 17:02:58,"Closes #1902 

\c @tgoyne @jpsim 
",segiddins,jpsim
1908,2015-05-11 17:02:58,"Closes #1902 

\c @tgoyne @jpsim 
",segiddins,tgoyne
1900,2015-05-10 19:50:40,"I have a pure Objective-c (no swift) project that I'm trying to install Realm into.  Everything builds fine but running unit tests I get the following:

`Library not loaded: @rpath/RealmSwift.framework/Frameworks/Realm.framework/Realm`

This is with Realm 0.92.2.
",amccarri,rpath
1898,2015-05-10 17:58:16,"I think that it is better at least one test runs on iOS 7 so far, what do you think?
(`ios-dynamic` and `ios-swift` support only iOS 8 or later, but `ios-static` needs support iOS 7.)

@segiddins @jpsim 
",kishikawakatsumi,jpsim
1898,2015-05-10 17:58:16,"I think that it is better at least one test runs on iOS 7 so far, what do you think?
(`ios-dynamic` and `ios-swift` support only iOS 8 or later, but `ios-static` needs support iOS 7.)

@segiddins @jpsim 
",kishikawakatsumi,segiddins
1897,2015-05-14 03:55:10,"@segiddins  @realm-ci  Hello, I've figure it out. Just by following the steps described in the Realm home page doc, Maybe I did some misconfigure before.  Thanks for your great help.
",qingpengchen2011,realm-ci
1896,2015-05-10 15:31:53,"Ralated: https://github.com/realm/realm-cocoa/issues/1894

Use `rangeOfString:` instead `containsString:` for support iOS 7 because `containsString:` was introduced in iOS 8. 

Could you please review @segiddins @bdash?
",kishikawakatsumi,bdash
1896,2015-05-10 15:31:53,"Ralated: https://github.com/realm/realm-cocoa/issues/1894

Use `rangeOfString:` instead `containsString:` for support iOS 7 because `containsString:` was introduced in iOS 8. 

Could you please review @segiddins @bdash?
",kishikawakatsumi,segiddins
1893,2015-05-10 05:11:08,"@RyanCopley I sent you an email just now. Apologies from Realm again. Thanks for taking the time to file a bug + for providing a repro case. If this issue needs to be investigated any further @jpsim, @mrackwitz or @bdash can help.
",timanglade,mrackwitz
1893,2015-05-10 05:11:08,"@RyanCopley I sent you an email just now. Apologies from Realm again. Thanks for taking the time to file a bug + for providing a repro case. If this issue needs to be investigated any further @jpsim, @mrackwitz or @bdash can help.
",timanglade,jpsim
1893,2015-05-10 05:11:08,"@RyanCopley I sent you an email just now. Apologies from Realm again. Thanks for taking the time to file a bug + for providing a repro case. If this issue needs to be investigated any further @jpsim, @mrackwitz or @bdash can help.
",timanglade,bdash
1893,2015-05-13 04:24:28,"@tgoyne did some really good work to fix this issue in realm's core today. It still needs work, some optimization (maybe) and to be reviewed, but you should buy him a beer if you bump into him.
",jpsim,tgoyne
1893,2015-05-13 04:47:24,"Thank you @jpsim and @tgoyne ! After our discussion about this I had another look, and it was pretty clear what actually caused our issue. The biggest problem for us was the missing stack trace, and since my understanding of the issue was better after the talk I knew where to focus my efforts.
",hermanolsson,tgoyne
1893,2015-05-17 15:48:00,"@jpsim @tgoyne Any update on this issue? :) I may end up pulling all my hair out over this :p 
",RyanCopley,tgoyne
1891,2015-05-09 20:01:40,"/cc @segiddins 
",jpsim,segiddins
1889,2015-05-11 20:05:26,"The first predicate that you tried doesn't do what you expect. It's filtering for an `AA` object that has at least one `BB` with `id1 = '1'` and at least one `BB` with `id2 = '2'`. There's no requirement that the `BB` objects in each case be the same object.

I think the predicate you're looking for is `SUBQUERY(bb, $bb, $bb.id1 = '1' AND $bb.id2 = '2').@count > 0`. Unfortunately this uses `SUBQUERY` which we do not yet support (see issue #1490).
",bdash,count
1888,2015-05-08 21:06:02,"… dynamic var

Closes #1844.

\c @tgoyne 
",segiddins,tgoyne
1885,2015-10-02 02:32:00,"I'm sorry you're disappointed. We know this is important to many users of encryption, and maybe others can share their own tips when debugging encrypted Realms (/cc @anlaital).

The best way you can help us prioritize the issue is to help us grow our engineering team, so we can put more people on important tasks like these: https://realm.io/jobs.
",jpsim,anlaital
1882,2015-05-08 17:36:25,"Closes #1876.
Alternative to #1878.

\c @kishikawakatsumi @tgoyne 
",segiddins,tgoyne
1882,2015-05-08 17:36:25,"Closes #1876.
Alternative to #1878.

\c @kishikawakatsumi @tgoyne 
",segiddins,kishikawakatsumi
1878,2015-05-08 13:42:54,"I found that it is possible to avoid the issue if do not use NSFastGenerator. But I do not know that way is best. Could you please tell me what you think?

@segiddins @jpsim @tgoyne 
",kishikawakatsumi,jpsim
1878,2015-05-08 13:42:54,"I found that it is possible to avoid the issue if do not use NSFastGenerator. But I do not know that way is best. Could you please tell me what you think?

@segiddins @jpsim @tgoyne 
",kishikawakatsumi,tgoyne
1878,2015-05-08 13:42:54,"I found that it is possible to avoid the issue if do not use NSFastGenerator. But I do not know that way is best. Could you please tell me what you think?

@segiddins @jpsim @tgoyne 
",kishikawakatsumi,segiddins
1873,2015-05-28 17:36:15,"@mrackwitz this could be good to add in the troubleshooting guide you've been meaning to write :wink: 
",jpsim,mrackwitz
1871,2015-05-08 00:11:07,"/cc @segiddins @jpsim @tgoyne 
",bdash,jpsim
1871,2015-05-08 00:11:07,"/cc @segiddins @jpsim @tgoyne 
",bdash,tgoyne
1871,2015-05-08 00:11:07,"/cc @segiddins @jpsim @tgoyne 
",bdash,segiddins
1869,2015-05-12 00:11:24,"lgtm. Can we fix the build? /cc @jpsim
",timanglade,jpsim
1868,2015-05-07 20:00:08,"Yay macros!

\c @tgoyne @bdash 
",segiddins,tgoyne
1868,2015-05-07 20:00:08,"Yay macros!

\c @tgoyne @bdash 
",segiddins,bdash
1867,2015-05-07 18:26:48,"… it sees the same property name multiple times for one class.

Fixes #1844.

/cc @segiddins @jpsim @tgoyne 
",bdash,jpsim
1867,2015-05-07 18:26:48,"… it sees the same property name multiple times for one class.

Fixes #1844.

/cc @segiddins @jpsim @tgoyne 
",bdash,tgoyne
1867,2015-05-07 18:26:48,"… it sees the same property name multiple times for one class.

Fixes #1844.

/cc @segiddins @jpsim @tgoyne 
",bdash,segiddins
1866,2015-05-07 17:03:43,"Potentially closes #1865.
The installation instructions will need to be updated to explicitly call `bash` for the script, though.

\c @jpsim 
",segiddins,jpsim
1866,2015-05-07 20:31:00,"Since @TimOliver has an app using Realm in the app store, maybe he can check?
",segiddins,TimOliver
1865,2015-05-19 16:02:44,"@segiddins Not sure what the fix was here. I'm getting this on 0.92.3 now. Is the fix simply amending the build phase script as andreamazz did or should this be resolved in the current build?
",jimjeffers,segiddins
1864,2015-05-07 14:39:50,"@danielpovlsen reported that building the Swift example app 'Simple' succeeded with Xcode 6.3.1, but running the app on his iPad Air with iOS 8.3 produced the following issue on launch:



I double-checked the architecture slices in the executables (outer & inner framework) of the Swift release package, which cover all needed architectures. I wasn't able to reproduce this issue on a iPhone 6, which should have the same architecture.

The Team identifier selected in Xcode for the target was the preset: `None`.
",mrackwitz,danielpovlsen
1856,2015-05-06 23:06:20,"…c object in the exception.

Fixes #1827.

/cc @jpsim 
",bdash,jpsim
1855,2015-05-06 21:41:51,"…ures

Closes #1854.

\c @jpsim @bdash 
",segiddins,jpsim
1855,2015-05-06 21:41:51,"…ures

Closes #1854.

\c @jpsim @bdash 
",segiddins,bdash
1853,2015-05-06 19:13:25,"Prevent debugging of an application using an encrypted Realm to work around
frequent LLDB hangs. Until the underlying issue is addressed you may set
REALM_DISABLE_ENCRYPTION=YES in your application's environment variables to
have requests to open an encrypted Realm treated as a request for an
unencrypted Realm.

Fixes #1625.

/cc @jpsim @tgoyne @segiddins 
",bdash,jpsim
1853,2015-05-06 19:13:25,"Prevent debugging of an application using an encrypted Realm to work around
frequent LLDB hangs. Until the underlying issue is addressed you may set
REALM_DISABLE_ENCRYPTION=YES in your application's environment variables to
have requests to open an encrypted Realm treated as a request for an
unencrypted Realm.

Fixes #1625.

/cc @jpsim @tgoyne @segiddins 
",bdash,tgoyne
1853,2015-05-06 19:13:25,"Prevent debugging of an application using an encrypted Realm to work around
frequent LLDB hangs. Until the underlying issue is addressed you may set
REALM_DISABLE_ENCRYPTION=YES in your application's environment variables to
have requests to open an encrypted Realm treated as a request for an
unencrypted Realm.

Fixes #1625.

/cc @jpsim @tgoyne @segiddins 
",bdash,segiddins
1852,2015-05-06 18:05:08,"We shouldn't be recommending that users do this.

The times in which values must not be nil, I'm using asserts instead. /cc @segiddins @tgoyne 
",jpsim,tgoyne
1852,2015-05-06 18:05:08,"We shouldn't be recommending that users do this.

The times in which values must not be nil, I'm using asserts instead. /cc @segiddins @tgoyne 
",jpsim,segiddins
1851,2015-05-06 17:51:28,"The RealmSwift Xcode project started life as a copy of the Realm Xcode project,
causing many objects to have the same object IDs. This causes Xcode to crash if
you attempt to add both Xcode projects to the same workspace.

/cc @segiddins @jpsim 
",bdash,jpsim
1851,2015-05-06 17:51:28,"The RealmSwift Xcode project started life as a copy of the Realm Xcode project,
causing many objects to have the same object IDs. This causes Xcode to crash if
you attempt to add both Xcode projects to the same workspace.

/cc @segiddins @jpsim 
",bdash,segiddins
1849,2015-05-26 16:44:24,"Thanks for the quick reply @jpsim.
Any idea regarding the timeline for implementing this? Is it being actively worked on yet?

I've actually come up with a hack around this that you guys might also find useful in allowing designated initializes (including overriding `init()` ).

It compiles fine but I haven't been able to test it yet, since I need to have objects of type `RLMRealm`, `RLMObjectSchema`, and `RLMSchema`.

Any idea how to get this work with RealmSwift?

I've tried simply having `import Realm` / `import Realm.Private` but while this compiles fine, it crashes during runtime with `dyld: Library not loaded: @rpath/Realm.framework/Realm`.

I've also tried to directly add the compiled `Realm` framework onto the project the same way I added the `RealmSwift` framework (I'm using Carthage) but I got tons of errors due to ambiguity in which kind of a class to use (the `Realm` version or the `RealmSwift` version).

Any pointers would be much appreciated. 
",ataibarkai,rpath
1849,2016-09-15 19:54:46,"There's this really scary and likely-unfit-for-production-use proof of concept implementation that @JadenGeller did a few weeks ago here: https://gist.github.com/JadenGeller/61178fac92ffe595a5a2243e3996400c

There's another discussion about this in #1615.

The code in [`ObjectUtil`](https://github.com/realm/realm-cocoa/blob/103d4c86cc2aa0d3fd2a3b4156dbd65e410ff25e/RealmSwift/Object.swift#L284-L373), [`RLMObjectSchema`](https://github.com/realm/realm-cocoa/blob/103d4c86cc2aa0d3fd2a3b4156dbd65e410ff25e/Realm/RLMObjectSchema.mm#L178-L316) and [`RLMSchema`](https://github.com/realm/realm-cocoa/blob/103d4c86cc2aa0d3fd2a3b4156dbd65e410ff25e/Realm/RLMSchema.mm#L154-L189) will also likely be useful to read through and understand. `git blame` through the code I've highlighted will show you its evolution and different commits and PRs discussing the mechanisms at play.
",jpsim,JadenGeller
1844,2015-05-06 17:02:36,"Alright @andrelind, @segiddins just helped me understand what happened here. It seems the same property was being declared twice in an `Object` model (perhaps in an extension or via subclassing?). In any case, the assertion message you saw should be improved to be more informative.
",jpsim,segiddins
1840,2015-05-05 22:19:19,"This is needed to push 0.92.0 to trunk because the `documentation_url` needs to point to `https://realm.io/docs/objc/#{s.version}`. /cc @segiddins 
",jpsim,segiddins
1837,2015-06-23 10:02:51,"@jpsim @segiddins @mrackwitz Hey, so we did the upgrade to 0.93.1 as Ivan mentioned and are still seeing a similar level of crashes. The last stable version for us is still 0.90.4. Is it not possible to know what changes happened in the core at this point that might have triggered this issue?
",mightyleader,mrackwitz
1836,2015-05-05 08:07:08,"I was cruising through the Realm Browser's project file looking at what needs to be updated for our next release, and I noticed that its app icon still had the 'β' beta symbol on it. 

Unfortunately, upon removing the beta badge, all that was left behind a simple, flat, black 'R' on it's own. Needless to say, it looked pretty plain, and definitely didn't fit the app icon design standards of OS X Yosemite.

So, ideally, before we launch v1.0, it'd be great to have a nicer looking icon for the Realm Browser. :)

I just spent around 10 minutes playing with my copy of [Element 3D](https://www.videocopilot.net/products/element2/) and came up with this image:

![realmbrowsericon](https://cloud.githubusercontent.com/assets/429119/7468725/ae5c3430-f33e-11e4-93e5-6d50bad92a9f.png)

It's a OpenGL-rendered version of the Realm 'R' in the same 3D perspective as the Yosemite system apps. It's just to get the ball rolling for now, so what do you think? :)

/cc @yoshyosh 
",TimOliver,yoshyosh
1834,2015-05-05 00:24:33,"Addresses #1153.

@tgoyne @jpsim @segiddins 
",bdash,jpsim
1834,2015-05-05 00:24:33,"Addresses #1153.

@tgoyne @jpsim @segiddins 
",bdash,tgoyne
1834,2015-05-05 00:24:33,"Addresses #1153.

@tgoyne @jpsim @segiddins 
",bdash,segiddins
1833,2015-05-04 20:26:16,"Closes #1362.
Successor to https://github.com/realm/realm-cocoa/pull/1810, but with out the cyclical object graph support.

Basically, this PR fixes the issue by fetching a persisted object when trying to update a link in `createOrUpdate`

\c @tgoyne @jpsim @bdash 
",segiddins,jpsim
1833,2015-05-04 20:26:16,"Closes #1362.
Successor to https://github.com/realm/realm-cocoa/pull/1810, but with out the cyclical object graph support.

Basically, this PR fixes the issue by fetching a persisted object when trying to update a link in `createOrUpdate`

\c @tgoyne @jpsim @bdash 
",segiddins,tgoyne
1833,2015-05-04 20:26:16,"Closes #1362.
Successor to https://github.com/realm/realm-cocoa/pull/1810, but with out the cyclical object graph support.

Basically, this PR fixes the issue by fetching a persisted object when trying to update a link in `createOrUpdate`

\c @tgoyne @jpsim @bdash 
",segiddins,bdash
1832,2015-05-04 19:15:54,"Closes #1541.

\c @jpsim
",segiddins,jpsim
1831,2015-05-04 17:26:05,"Some users (at least @kishikawakatsumi) can't see the test coverage source file visualizations in Jenkins (e.g. https://ci.realm.io/view/6.%20Pull%20Requests/job/objc_pr/configuration=Release,target=osx/508/cobertura/Realm/RLMMigration_mm/), which makes those reports quite unhelpful.

It works fine for me, though. @emanuelez do you have any thoughts as to why this might be happening?
",jpsim,kishikawakatsumi
1831,2015-05-04 17:26:05,"Some users (at least @kishikawakatsumi) can't see the test coverage source file visualizations in Jenkins (e.g. https://ci.realm.io/view/6.%20Pull%20Requests/job/objc_pr/configuration=Release,target=osx/508/cobertura/Realm/RLMMigration_mm/), which makes those reports quite unhelpful.

It works fine for me, though. @emanuelez do you have any thoughts as to why this might be happening?
",jpsim,emanuelez
1829,2015-05-04 17:14:44,"No functional difference, but I was annoyed with how verbose `__unsafe_unretained T * const` was, and figured it'd be trivial to make it a bit better and remove the risk of forgetting the `const`. `unretained` doesn't need the `RLM` prefix because it doesn't result in an exported symbol (or a symbol at all), so it'd only clash with other things we import ourselves.

@jpsim @segiddins 
",tgoyne,jpsim
1829,2015-05-04 17:14:44,"No functional difference, but I was annoyed with how verbose `__unsafe_unretained T * const` was, and figured it'd be trivial to make it a bit better and remove the risk of forgetting the `const`. `unretained` doesn't need the `RLM` prefix because it doesn't result in an exported symbol (or a symbol at all), so it'd only clash with other things we import ourselves.

@jpsim @segiddins 
",tgoyne,segiddins
1826,2015-05-04 04:06:13,"This PR updates the release package to have the following structure:



Do we still want to split the Objective-C and Swift release packages as we discussed, @timanglade? If so, I'll amend this PR to split the packages. At which point the release packages would look like this:

**Objective-C**



**Swift**



Marking as WIP until we decide if the release package should be split. I'd love to get your thoughts on this @TimOliver @kishikawakatsumi @mrackwitz @segiddins.
- [x] decide if the release package should be split
- [x] split release package into `realm-objc-$version.zip` and `realm-swift-$version.zip`
",jpsim,mrackwitz
1826,2015-05-04 04:06:13,"This PR updates the release package to have the following structure:



Do we still want to split the Objective-C and Swift release packages as we discussed, @timanglade? If so, I'll amend this PR to split the packages. At which point the release packages would look like this:

**Objective-C**



**Swift**



Marking as WIP until we decide if the release package should be split. I'd love to get your thoughts on this @TimOliver @kishikawakatsumi @mrackwitz @segiddins.
- [x] decide if the release package should be split
- [x] split release package into `realm-objc-$version.zip` and `realm-swift-$version.zip`
",jpsim,TimOliver
1826,2015-05-04 04:06:13,"This PR updates the release package to have the following structure:



Do we still want to split the Objective-C and Swift release packages as we discussed, @timanglade? If so, I'll amend this PR to split the packages. At which point the release packages would look like this:

**Objective-C**



**Swift**



Marking as WIP until we decide if the release package should be split. I'd love to get your thoughts on this @TimOliver @kishikawakatsumi @mrackwitz @segiddins.
- [x] decide if the release package should be split
- [x] split release package into `realm-objc-$version.zip` and `realm-swift-$version.zip`
",jpsim,kishikawakatsumi
1826,2015-05-04 04:06:13,"This PR updates the release package to have the following structure:



Do we still want to split the Objective-C and Swift release packages as we discussed, @timanglade? If so, I'll amend this PR to split the packages. At which point the release packages would look like this:

**Objective-C**



**Swift**



Marking as WIP until we decide if the release package should be split. I'd love to get your thoughts on this @TimOliver @kishikawakatsumi @mrackwitz @segiddins.
- [x] decide if the release package should be split
- [x] split release package into `realm-objc-$version.zip` and `realm-swift-$version.zip`
",jpsim,timanglade
1826,2015-05-04 04:06:13,"This PR updates the release package to have the following structure:



Do we still want to split the Objective-C and Swift release packages as we discussed, @timanglade? If so, I'll amend this PR to split the packages. At which point the release packages would look like this:

**Objective-C**



**Swift**



Marking as WIP until we decide if the release package should be split. I'd love to get your thoughts on this @TimOliver @kishikawakatsumi @mrackwitz @segiddins.
- [x] decide if the release package should be split
- [x] split release package into `realm-objc-$version.zip` and `realm-swift-$version.zip`
",jpsim,segiddins
1816,2015-05-02 01:40:38,"Closes #1331.

\c @jpsim 
",segiddins,jpsim
1811,2015-04-29 20:24:26,"Closes #1585.

\c @mrackwitz @kishikawakatsumi 
",segiddins,mrackwitz
1811,2015-04-29 20:24:26,"Closes #1585.

\c @mrackwitz @kishikawakatsumi 
",segiddins,kishikawakatsumi
1811,2015-04-29 20:28:24,"The docs have a number of outstanding `@param object`s that will need to be converted to `@param value`.
",jpsim,param
1810,2015-04-29 17:40:36,"Closes #1362.
Closes #1800.

I'm just opening this up because I'm at a loss on how to refactor this to make it not so ugly, and would appreciate input from the team. This is very much a work in progress, I'd just like some design help at this point.

\c @jpsim @kishikawakatsumi @TimOliver 
",segiddins,jpsim
1810,2015-04-29 17:40:36,"Closes #1362.
Closes #1800.

I'm just opening this up because I'm at a loss on how to refactor this to make it not so ugly, and would appreciate input from the team. This is very much a work in progress, I'd just like some design help at this point.

\c @jpsim @kishikawakatsumi @TimOliver 
",segiddins,kishikawakatsumi
1810,2015-04-29 17:40:36,"Closes #1362.
Closes #1800.

I'm just opening this up because I'm at a loss on how to refactor this to make it not so ugly, and would appreciate input from the team. This is very much a work in progress, I'd just like some design help at this point.

\c @jpsim @kishikawakatsumi @TimOliver 
",segiddins,TimOliver
1809,2015-04-29 04:44:59,"Having a single Xcode project will enable Carthage support for Realm Swift (fixes #1790).

This PR also fixes ##1771 (just needed a `LD_DYLIB_INSTALL_NAME`).

I tried setting up `RealmSwift iOS` to use a different DerivedData directory, but nothing worked well, so I have a working but non-ideal solution in `pre-ios-swift`. If you have a more elegant solution in mind, I'm all ears.

/cc @mrackwitz @tgoyne @segiddins
",jpsim,mrackwitz
1809,2015-04-29 04:44:59,"Having a single Xcode project will enable Carthage support for Realm Swift (fixes #1790).

This PR also fixes ##1771 (just needed a `LD_DYLIB_INSTALL_NAME`).

I tried setting up `RealmSwift iOS` to use a different DerivedData directory, but nothing worked well, so I have a working but non-ideal solution in `pre-ios-swift`. If you have a more elegant solution in mind, I'm all ears.

/cc @mrackwitz @tgoyne @segiddins
",jpsim,tgoyne
1809,2015-04-29 04:44:59,"Having a single Xcode project will enable Carthage support for Realm Swift (fixes #1790).

This PR also fixes ##1771 (just needed a `LD_DYLIB_INSTALL_NAME`).

I tried setting up `RealmSwift iOS` to use a different DerivedData directory, but nothing worked well, so I have a working but non-ideal solution in `pre-ios-swift`. If you have a more elegant solution in mind, I'm all ears.

/cc @mrackwitz @tgoyne @segiddins
",jpsim,segiddins
1800,2015-04-27 19:44:54,"@OlegAnghelov thanks so much for putting together this example project. The code path behind `createOrUpdate` is something that needs a good refactor (see https://github.com/realm/realm-cocoa/issues/1362), and that refactor should definitely address this issue. In the meantime, your best bet would be to not pass cyclical object graphs to `createInRealm` -- I know that's not ideal, but it should work as a stopgap while we fix the underlying issue.
",segiddins,OlegAnghelov
1798,2015-04-25 21:10:49,"This is the first step toward addressing #628.

\c @tgoyne @jpsim 
",segiddins,jpsim
1798,2015-04-25 21:10:49,"This is the first step toward addressing #628.

\c @tgoyne @jpsim 
",segiddins,tgoyne
1798,2015-05-08 22:47:06,"@bdash if you could give this a quick glance, that'd be great
",segiddins,bdash
1798,2015-06-23 19:01:30,"@tgoyne @jpsim @bdash I'd like to get this reviewed and merged into master, especially since the core upgrade/file format change is no longer coupled with this getting merged.
",segiddins,bdash
1797,2015-06-26 16:56:41,"@demon1105 that's an entirely different issue. Could you please open a new issue on this repo along with any further information that could help us identify or reproduce the issue? There should have been an assertion message logged to the console. Thanks.
",jpsim,demon1105
1788,2015-04-23 23:46:17,"Closes #1783.

\c @jpsim  @tgoyne
",segiddins,jpsim
1788,2015-04-23 23:46:17,"Closes #1783.

\c @jpsim  @tgoyne
",segiddins,tgoyne
1786,2015-04-23 20:30:00,"Please review when you get a chance, @tgoyne 
",jpsim,tgoyne
1785,2015-04-23 19:18:02,"cc @timanglade 
",yoshyosh,timanglade
1782,2015-04-23 16:53:59,"This is now ready for review (see https://ci.tightdb.com/job/objc_pr/437/configuration=Debug,target=osx/cobertura/Realm/). /cc @tgoyne 
",jpsim,tgoyne
1778,2015-04-22 16:45:59,"Keeping this private for the time being because it's easy to misuse. I could have added checks to make sure there are no other `RLMRealm` instances, but since core will do that anyway, I opted to not duplicate that check. /cc @tgoyne @segiddins 
",jpsim,tgoyne
1778,2015-04-22 16:45:59,"Keeping this private for the time being because it's easy to misuse. I could have added checks to make sure there are no other `RLMRealm` instances, but since core will do that anyway, I opted to not duplicate that check. /cc @tgoyne @segiddins 
",jpsim,segiddins
1776,2015-04-22 09:52:04,"Add a test for `RLMArray#replaceObjectAtIndex:withObject`.

There are some tests for this method of `RLMArrayLinkView`'s, but no `RLMArray`'s .
Could you please review? @jpsim @segiddins 
",kishikawakatsumi,jpsim
1776,2015-04-22 09:52:04,"Add a test for `RLMArray#replaceObjectAtIndex:withObject`.

There are some tests for this method of `RLMArrayLinkView`'s, but no `RLMArray`'s .
Could you please review? @jpsim @segiddins 
",kishikawakatsumi,segiddins
1775,2015-04-22 09:48:15,"Add a test for `RLMRealm#addOrUpdateObjectsFromArray:`.
`RLMRealm#addOrUpdateObjectsFromArray:` methods are not covered by the unit tests.

Could you please review? @jpsim @segiddins 
",kishikawakatsumi,jpsim
1775,2015-04-22 09:48:15,"Add a test for `RLMRealm#addOrUpdateObjectsFromArray:`.
`RLMRealm#addOrUpdateObjectsFromArray:` methods are not covered by the unit tests.

Could you please review? @jpsim @segiddins 
",kishikawakatsumi,segiddins
1774,2015-05-06 18:52:51,"With https://github.com/CocoaPods/CocoaPods/releases/tag/0.37.1, I think this is good to go!

\c @mrackwitz @tgoyne 
",segiddins,tgoyne
1772,2015-04-21 00:38:25,"CI still needs to be updated. This addresses #1747 /cc @segiddins @tgoyne 

Installation instructions are in https://github.com/realm/realm.io/pull/452.
",jpsim,tgoyne
1772,2015-04-21 00:38:25,"CI still needs to be updated. This addresses #1747 /cc @segiddins @tgoyne 

Installation instructions are in https://github.com/realm/realm.io/pull/452.
",jpsim,segiddins
1768,2015-04-18 13:45:23,"I know we have to use defaultPropertyValues.
Class structure:

@interface Event : RLMObject
@property (nonatomic, copy) NSString *roomName;
....
- (instancetype)initWithAttributes:(NSDictionary *)attributes;

@end

@implementation Event
- (NSDictionary *)defaultPropertyValues {
  return @{@""roomName"" : @""""};
  }
- (instancetype)initWithAttributes:(NSDictionary *)attributes {
  self = [super init];
  if (self) {
      self.roomName = [attributes valueForKeyPath:@""room""];
      .......
  }
  return self;
  }

Event *school = [[IVEvent alloc] initWithAttributes:dict];
[realm addObject:school];

'RLMException', reason: 'No value or default value specified for property 'roomName' in 'Event''

This is because roomName is getting assigned by defaultPropertyValues class method. But as soon as it get parsed from attributes dictionary it becomes roomName nil and getting crashed. Is there any better way to handle this ? I don't want to put if condition on [attributes valueForKeyPath:@""room""]

Thanks!
",tariq235,implementation
1768,2015-04-18 13:45:23,"I know we have to use defaultPropertyValues.
Class structure:

@interface Event : RLMObject
@property (nonatomic, copy) NSString *roomName;
....
- (instancetype)initWithAttributes:(NSDictionary *)attributes;

@end

@implementation Event
- (NSDictionary *)defaultPropertyValues {
  return @{@""roomName"" : @""""};
  }
- (instancetype)initWithAttributes:(NSDictionary *)attributes {
  self = [super init];
  if (self) {
      self.roomName = [attributes valueForKeyPath:@""room""];
      .......
  }
  return self;
  }

Event *school = [[IVEvent alloc] initWithAttributes:dict];
[realm addObject:school];

'RLMException', reason: 'No value or default value specified for property 'roomName' in 'Event''

This is because roomName is getting assigned by defaultPropertyValues class method. But as soon as it get parsed from attributes dictionary it becomes roomName nil and getting crashed. Is there any better way to handle this ? I don't want to put if condition on [attributes valueForKeyPath:@""room""]

Thanks!
",tariq235,end
1768,2015-04-18 13:45:23,"I know we have to use defaultPropertyValues.
Class structure:

@interface Event : RLMObject
@property (nonatomic, copy) NSString *roomName;
....
- (instancetype)initWithAttributes:(NSDictionary *)attributes;

@end

@implementation Event
- (NSDictionary *)defaultPropertyValues {
  return @{@""roomName"" : @""""};
  }
- (instancetype)initWithAttributes:(NSDictionary *)attributes {
  self = [super init];
  if (self) {
      self.roomName = [attributes valueForKeyPath:@""room""];
      .......
  }
  return self;
  }

Event *school = [[IVEvent alloc] initWithAttributes:dict];
[realm addObject:school];

'RLMException', reason: 'No value or default value specified for property 'roomName' in 'Event''

This is because roomName is getting assigned by defaultPropertyValues class method. But as soon as it get parsed from attributes dictionary it becomes roomName nil and getting crashed. Is there any better way to handle this ? I don't want to put if condition on [attributes valueForKeyPath:@""room""]

Thanks!
",tariq235,interface
1768,2015-04-18 13:45:23,"I know we have to use defaultPropertyValues.
Class structure:

@interface Event : RLMObject
@property (nonatomic, copy) NSString *roomName;
....
- (instancetype)initWithAttributes:(NSDictionary *)attributes;

@end

@implementation Event
- (NSDictionary *)defaultPropertyValues {
  return @{@""roomName"" : @""""};
  }
- (instancetype)initWithAttributes:(NSDictionary *)attributes {
  self = [super init];
  if (self) {
      self.roomName = [attributes valueForKeyPath:@""room""];
      .......
  }
  return self;
  }

Event *school = [[IVEvent alloc] initWithAttributes:dict];
[realm addObject:school];

'RLMException', reason: 'No value or default value specified for property 'roomName' in 'Event''

This is because roomName is getting assigned by defaultPropertyValues class method. But as soon as it get parsed from attributes dictionary it becomes roomName nil and getting crashed. Is there any better way to handle this ? I don't want to put if condition on [attributes valueForKeyPath:@""room""]

Thanks!
",tariq235,property
1767,2015-04-17 18:02:58,"The podspec doesn't create `Realm.Private` yet, so trying to import it in RLMSupport.swift doesn't work very well.

Fixes #1765.

@jpsim @segiddins 
",tgoyne,jpsim
1767,2015-04-17 18:02:58,"The podspec doesn't create `Realm.Private` yet, so trying to import it in RLMSupport.swift doesn't work very well.

Fixes #1765.

@jpsim @segiddins 
",tgoyne,segiddins
1761,2015-04-16 00:40:32,"Hi @realm!

I thought I'd take a shot at implementing some cascade delete relationships and see what you think.

From what I can see, the implementation is working, but that doesn't always mean it's right.  If you guys have any issues for whatever reason, let me know and I'll see if I can adjust my approach.

Basically, you override `cascadeProperties` on your realm object like so to indicate cascade relationships:



Best,

Logan
",LoganWright,realm
1760,2015-04-17 00:44:03,"@kishikawakatsumi is correct. I'm closing this issue because I agree with @segiddins that adding this functionality wouldn't add much value over performing operations during fast enumeration.

@OlegAnghelov please let us know if there are cases where `makeObjectsPerformSelector:` allows doing things that are not currently possible.
",jpsim,OlegAnghelov
1758,2015-04-15 01:14:01,"Another take at #1684.

\c @tgoyne @alazier 
",segiddins,alazier
1758,2015-04-15 01:14:01,"Another take at #1684.

\c @tgoyne @alazier 
",segiddins,tgoyne
1755,2015-04-13 19:44:21,"I'm not sure if it really needs to require a migration, but making it not require a migration would require some nontrivial refactoring.

Partially addresses #1735.

@jpsim @alazier 
",tgoyne,jpsim
1755,2015-04-13 19:44:21,"I'm not sure if it really needs to require a migration, but making it not require a migration would require some nontrivial refactoring.

Partially addresses #1735.

@jpsim @alazier 
",tgoyne,alazier
1754,2015-04-13 18:44:40,"...ized realm

Closes https://github.com/realm/realm-cocoa/issues/1752.

\c @tgoyne @kishikawakatsumi 
",segiddins,tgoyne
1754,2015-04-13 18:44:40,"...ized realm

Closes https://github.com/realm/realm-cocoa/issues/1752.

\c @tgoyne @kishikawakatsumi 
",segiddins,kishikawakatsumi
1753,2015-04-18 18:23:06,"@jpsim next week, let's work to get CI set up with Xcode 6.3 so we can get this merged in?
",segiddins,jpsim
1750,2015-04-14 04:33:46,"@segiddins thanks for your reply.

https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Exceptions/Articles/Exceptions64Bit.html

I expect that i run into that:

_On the other hand, an Objective-C catch clause taking a dynamically typed exception object (@catch(id exception)) can catch any Objective-C exception, but cannot catch any C++ exceptions. So, for interoperability, use @catch(...) to catch every exception and @throw; to rethrow caught exceptions. In 32-bit, @catch(...) has the same effect as @catch(id exception)._

If i understand the last sentence correctly its not possible to handle C++ exceptions in Objective-C on 32bit platforms.

https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Exceptions/Articles/Exceptions64Bit.html

After posting the issue i realized that the problem _only_ occurs on Simulators < iPhone 5s. I will send an example project to you. 
",issue2k,throw
1750,2015-04-14 04:33:46,"@segiddins thanks for your reply.

https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Exceptions/Articles/Exceptions64Bit.html

I expect that i run into that:

_On the other hand, an Objective-C catch clause taking a dynamically typed exception object (@catch(id exception)) can catch any Objective-C exception, but cannot catch any C++ exceptions. So, for interoperability, use @catch(...) to catch every exception and @throw; to rethrow caught exceptions. In 32-bit, @catch(...) has the same effect as @catch(id exception)._

If i understand the last sentence correctly its not possible to handle C++ exceptions in Objective-C on 32bit platforms.

https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Exceptions/Articles/Exceptions64Bit.html

After posting the issue i realized that the problem _only_ occurs on Simulators < iPhone 5s. I will send an example project to you. 
",issue2k,catch
1745,2015-04-08 18:50:20,"Snippet of properties from the model:

@property (nonatomic) NSInteger accountId;
@property (strong, nonatomic) NSString *city;
@property (nonatomic) NSInteger addressId;
@property (strong, nonatomic) NSString *country;
@property (strong, nonatomic) NSString *updateTime;
@property (strong, nonatomic) NSString *zipCode;
@property (strong, nonatomic) NSString *street1;
@property (strong, nonatomic) NSString *street2;
@property (strong, nonatomic) NSString *addressState;
",kaff1,property
1744,2015-04-11 00:35:37,"Our ability to offer `@noescape` parameters is severely limited at the moment, because the Swift compiler, when interfacing with Objective-C, does not allow passing that `@noescape` closure into another `__attribute((noescape))` context.
",segiddins,noescape
1740,2015-04-07 18:04:34,"Closes #1329.
Closes #1763.

\c @tgoyne @alazier 
",segiddins,alazier
1740,2015-04-07 18:04:34,"Closes #1329.
Closes #1763.

\c @tgoyne @alazier 
",segiddins,tgoyne
1739,2015-04-07 17:16:11,"It doesn't really make sense to do so since there's nothing to migrate, and the old version is an undocumented value that makes checking schema versions awkward. See #1737.

@alazier 
",tgoyne,alazier
1728,2015-04-03 19:50:50,"Change ""tightdb_objc"" to ""realm_objc"" in build.sh

""tightdb_objc"" is used as working directory name in `package` build process.
This PR changes just the working directory name, ""tightdb_objc"" to ""realm_objc"".

CC: @jpsim @segiddins 
",kishikawakatsumi,jpsim
1728,2015-04-03 19:50:50,"Change ""tightdb_objc"" to ""realm_objc"" in build.sh

""tightdb_objc"" is used as working directory name in `package` build process.
This PR changes just the working directory name, ""tightdb_objc"" to ""realm_objc"".

CC: @jpsim @segiddins 
",kishikawakatsumi,segiddins
1727,2015-04-03 18:00:16,"... on the wrong thread

Closes https://github.com/realm/realm-cocoa/issues/1684.

\c @alazier @tgoyne 
",segiddins,alazier
1727,2015-04-03 18:00:16,"... on the wrong thread

Closes https://github.com/realm/realm-cocoa/issues/1684.

\c @alazier @tgoyne 
",segiddins,tgoyne
1725,2015-04-04 02:54:23,"@nacrossweb if you could share your project (or another that reproduces the issue) with us (you can do so privately at help@realm.io if you prefer) would be incredibly helpful. 
",segiddins,nacrossweb
1725,2015-04-05 04:20:28,"@nacrossweb thanks! We've seen some bugs in that scenario before, I'll dig into the repro case on Monday. 
",segiddins,nacrossweb
1725,2015-04-06 19:23:43,"I can confirm this bug is still an issue, and have made a ticket for our core team. Thanks @nacrossweb !
",segiddins,nacrossweb
1723,2015-04-02 01:14:39,"Fixes #1692. /cc @alazier @tgoyne @segiddins
",jpsim,alazier
1723,2015-04-02 01:14:39,"Fixes #1692. /cc @alazier @tgoyne @segiddins
",jpsim,tgoyne
1723,2015-04-02 01:14:39,"Fixes #1692. /cc @alazier @tgoyne @segiddins
",jpsim,segiddins
1723,2015-05-05 17:32:17,"This has been updated and is ready for review again /cc @segiddins @tgoyne @bdash 
",jpsim,tgoyne
1723,2015-05-05 17:32:17,"This has been updated and is ready for review again /cc @segiddins @tgoyne @bdash 
",jpsim,bdash
1722,2016-01-07 01:23:59,"@TimOliver please refer to https://github.com/realm/realm-cocoa/issues/1109#issuecomment-143834756 and https://github.com/realm/realm-cocoa/issues/1109#issuecomment-143985250 when writing this.
",jpsim,TimOliver
1721,2015-04-01 20:33:21,"\c @jpsim @tgoyne 
",segiddins,jpsim
1721,2015-04-01 20:33:21,"\c @jpsim @tgoyne 
",segiddins,tgoyne
1721,2015-04-02 20:04:48,"@tgoyne this look OK to you?
",segiddins,tgoyne
1720,2015-04-01 17:57:05,"\c @tgoyne @jpsim 
",segiddins,jpsim
1720,2015-04-01 17:57:05,"\c @tgoyne @jpsim 
",segiddins,tgoyne
1717,2015-04-01 17:03:58,"Closes #1406.

\c @jpsim @alazier 
",segiddins,jpsim
1717,2015-04-01 17:03:58,"Closes #1406.

\c @jpsim @alazier 
",segiddins,alazier
1716,2015-04-01 13:13:44,"#### Clean up the garbage of the deleted file :put_litter_in_its_place:

I found that deleted file remains in the navigator area. 

![2015-04-01 22 04 35](https://cloud.githubusercontent.com/assets/40610/6941451/1e51b448-d8bb-11e4-936c-aba706c961ee.png)
#### Fix code signing entitlements file name for case-sensitive file system

The first character of `Extension.entitlements` filename is upper case, but written in lowercase for code signing entitlements setting.

![2015-04-01 22 06 23](https://cloud.githubusercontent.com/assets/40610/6941480/663ea02c-d8bb-11e4-9af8-fa51b4244008.png)

![2015-04-01 22 06 09](https://cloud.githubusercontent.com/assets/40610/6941619/4f6d1f9e-d8bc-11e4-865c-ecac25e09465.png)

CC: @jpsim @segiddins 
",kishikawakatsumi,jpsim
1716,2015-04-01 13:13:44,"#### Clean up the garbage of the deleted file :put_litter_in_its_place:

I found that deleted file remains in the navigator area. 

![2015-04-01 22 04 35](https://cloud.githubusercontent.com/assets/40610/6941451/1e51b448-d8bb-11e4-936c-aba706c961ee.png)
#### Fix code signing entitlements file name for case-sensitive file system

The first character of `Extension.entitlements` filename is upper case, but written in lowercase for code signing entitlements setting.

![2015-04-01 22 06 23](https://cloud.githubusercontent.com/assets/40610/6941480/663ea02c-d8bb-11e4-9af8-fa51b4244008.png)

![2015-04-01 22 06 09](https://cloud.githubusercontent.com/assets/40610/6941619/4f6d1f9e-d8bc-11e4-865c-ecac25e09465.png)

CC: @jpsim @segiddins 
",kishikawakatsumi,segiddins
1715,2015-04-01 12:07:49,"Add 2 tests for `RLMArray#removeLastObject` and `RLMArray#removeAllObjects`.

Because there are no tests for the standalone array object's delete methods, although there are tests for array object after persistence.

I found that `removeLastObject` and `removeAllObjects` in methods of RLMArray are not covered by the unit tests. There are some test cases that calls same name methods, but they are for the array after persistence (not for stand alone objet, they does not call RLMArray's methods).

Code coverage of RLMArray.mm increased (+6.5%) from 83.7 to 89.2% when merged this PR.

Could you please review? @jpsim @segiddins @alazier
",kishikawakatsumi,jpsim
1715,2015-04-01 12:07:49,"Add 2 tests for `RLMArray#removeLastObject` and `RLMArray#removeAllObjects`.

Because there are no tests for the standalone array object's delete methods, although there are tests for array object after persistence.

I found that `removeLastObject` and `removeAllObjects` in methods of RLMArray are not covered by the unit tests. There are some test cases that calls same name methods, but they are for the array after persistence (not for stand alone objet, they does not call RLMArray's methods).

Code coverage of RLMArray.mm increased (+6.5%) from 83.7 to 89.2% when merged this PR.

Could you please review? @jpsim @segiddins @alazier
",kishikawakatsumi,alazier
1715,2015-04-01 12:07:49,"Add 2 tests for `RLMArray#removeLastObject` and `RLMArray#removeAllObjects`.

Because there are no tests for the standalone array object's delete methods, although there are tests for array object after persistence.

I found that `removeLastObject` and `removeAllObjects` in methods of RLMArray are not covered by the unit tests. There are some test cases that calls same name methods, but they are for the array after persistence (not for stand alone objet, they does not call RLMArray's methods).

Code coverage of RLMArray.mm increased (+6.5%) from 83.7 to 89.2% when merged this PR.

Could you please review? @jpsim @segiddins @alazier
",kishikawakatsumi,segiddins
1713,2015-03-31 21:57:00,"Closes #1708.
Part of #1707.

\c @tgoyne @jpsim 
",segiddins,jpsim
1713,2015-03-31 21:57:00,"Closes #1708.
Part of #1707.

\c @tgoyne @jpsim 
",segiddins,tgoyne
1713,2015-04-22 17:18:06,"@jpsim what do I need to do to get this merged?
",segiddins,jpsim
1712,2015-03-31 18:38:32,"...d lists

Part of https://github.com/realm/realm-cocoa/issues/1707.

\c @jpsim 
",segiddins,jpsim
1711,2015-03-31 17:17:19,"Explicitly wrap things creating Realms in `setUp` methods in `autoreleasepool` blocks to avoid the need to wrap all calls to `setUp` explicitly, and then just call `super.invokeTest()` in an autorelease pool rather than trying to replicate all of the work it does. Requires an obj-c helper to work around not being able to use `super` in a block in swift 1.1.

@segiddins @jpsim 
",tgoyne,jpsim
1711,2015-03-31 17:17:19,"Explicitly wrap things creating Realms in `setUp` methods in `autoreleasepool` blocks to avoid the need to wrap all calls to `setUp` explicitly, and then just call `super.invokeTest()` in an autorelease pool rather than trying to replicate all of the work it does. Requires an obj-c helper to work around not being able to use `super` in a block in swift 1.1.

@segiddins @jpsim 
",tgoyne,segiddins
1710,2015-03-30 23:03:04,"Closes #1706.

\c @jpsim @tgoyne 
",segiddins,jpsim
1710,2015-03-30 23:03:04,"Closes #1706.

\c @jpsim @tgoyne 
",segiddins,tgoyne
1709,2015-08-21 00:43:41,"I believe @tgoyne recently fixed this particular one?
",segiddins,tgoyne
1697,2015-03-30 00:56:02,"How to recover from Realm exceptions? 

**Imagine the case:** you have found a great playlist and listening to track #31. As a user you have performed some subsequent actions which formes the current state of the app. Сoincidentally somewhere else a small object was added to Realm with a duplicate key.. Boom. Crash. Start over. Moderate alert error would be so much better.

Provided realm docs and examples give no clue on how to handle exceptions in production environment. How do I know which methods can throw an exception? Should I wrap each realm call in `@try-catch` block? Examining the source code shows that there are **plenty of vulnerable exceptions, which might not be discovered when an application is being created can pop up in release builds**. Even `-realmWithPath:error` can throw an exception `Realm at path already opened`.

An example of the API _would be nice_ to have:


#### Background

Please read [Apple's Exception Programming Topics](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i) **IMPORTANT** block, it makes total sence: **most of the current RLMExceptions should be catched at the top level of the library and translated them into an appropriate return code or state.**

> Instead of exceptions, error objects (NSError) and the Cocoa error-delivery mechanism are the recommended way to communicate expected errors in Cocoa applications.

More references below:

[Programming with Objective-C • Dealing With Errors](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/ErrorHandling/ErrorHandling.html#//apple_ref/doc/uid/TP40011210-CH9-SW1)

> When you’re writing code with Objective-C, exceptions are used solely for programmer errors, like out-of-bounds array access or invalid method arguments. These are the problems that you should find and fix during testing before you ship your app ... All other errors are represented by instances of the NSError class"".

[Apple's Error Handling Programming Guide](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ErrorHandlingCocoa/ErrorHandling/ErrorHandling.html#//apple_ref/doc/uid/TP40001806)

[StackOverflow NSError vs NSException](http://stackoverflow.com/questions/11100951/nsexception-and-nserror-custom-exception-error) [StackOverflow Errors vs Exceptions](http://stackoverflow.com/questions/5009597/objective-c-assertion-vs-exception-vs-error)
#### How others handle it:

[FMBD](https://github.com/ccgus/fmdb): any method execution returns bool + static last database error

[CoreData](https://developer.apple.com/library/ios/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObjectContext_Class/index.html#//apple_ref/occ/instm/NSManagedObjectContext/save:) [(reference)](https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/NSMigrationManager_class/index.html#//apple_ref/occ/cl/NSMigrationManager): errors pop up on
- initialization phase: `-addPersistentStoreWithType::error:`
- migration: `-migrateStoreFromURL::error:`
- save and fetch: `-save:error` `-executeFetchRequest:error`

---

I am suprised nobody addressed the problem yet. Realm is such a great framework, but it is just being fragile sometimes. Remember that UITableView's `NSInternalInconsistencyException`?

> Invalid update: invalid number of rows in section 0. The number of rows...

Doesn't it feel insane that the some minor animation stops user experience and crashes the app?

Realm maintainers, please consider the concept above. At least we should also make up basic guidelines on exception handling.
",rbaulin,try-catch
1694,2015-03-26 23:01:04,"Leaking RLMRealms in assertThrows eventually results in us hitting GCD's thread limit, and then dispatch_async() stops actually doing anything and we don't get any change notifications for newly opened Realms, resulting in the tests added in https://github.com/realm/realm-cocoa/pull/1686 hanging.

We also were somewhat close to hitting the per-process open file limit on iOS (which is 256 by default).

@alazier @segiddins 
",tgoyne,alazier
1694,2015-03-26 23:01:04,"Leaking RLMRealms in assertThrows eventually results in us hitting GCD's thread limit, and then dispatch_async() stops actually doing anything and we don't get any change notifications for newly opened Realms, resulting in the tests added in https://github.com/realm/realm-cocoa/pull/1686 hanging.

We also were somewhat close to hitting the per-process open file limit on iOS (which is 256 by default).

@alazier @segiddins 
",tgoyne,segiddins
1689,2015-03-25 19:22:36,"We should try to support Swift betas as they happen. After a conversation with @jpsim we propose that master should support the latest stable version of swift, but we could consider adding a long-running branch (“swift-beta”) that has support for the latest beta, at least for a while.
@segiddins @alazier @tgoyne thoughts?
",timanglade,jpsim
1689,2015-03-25 19:22:36,"We should try to support Swift betas as they happen. After a conversation with @jpsim we propose that master should support the latest stable version of swift, but we could consider adding a long-running branch (“swift-beta”) that has support for the latest beta, at least for a while.
@segiddins @alazier @tgoyne thoughts?
",timanglade,alazier
1689,2015-03-25 19:22:36,"We should try to support Swift betas as they happen. After a conversation with @jpsim we propose that master should support the latest stable version of swift, but we could consider adding a long-running branch (“swift-beta”) that has support for the latest beta, at least for a while.
@segiddins @alazier @tgoyne thoughts?
",timanglade,tgoyne
1689,2015-03-25 19:22:36,"We should try to support Swift betas as they happen. After a conversation with @jpsim we propose that master should support the latest stable version of swift, but we could consider adding a long-running branch (“swift-beta”) that has support for the latest beta, at least for a while.
@segiddins @alazier @tgoyne thoughts?
",timanglade,segiddins
1689,2015-03-25 22:53:11,"@tgoyne the big advantage of a long-running branch is that it’s easy for us to link to from the docs. I expect many people to want this, and it may be hard for them to find it if it’s not clearly advertised. If you can think of another way, happy to use whatever is easier engineering-wise

@rlimberger thanks for the offer! I’ll let @segiddins @jpsim get back to you on that :)
",timanglade,jpsim
1689,2015-03-25 22:53:11,"@tgoyne the big advantage of a long-running branch is that it’s easy for us to link to from the docs. I expect many people to want this, and it may be hard for them to find it if it’s not clearly advertised. If you can think of another way, happy to use whatever is easier engineering-wise

@rlimberger thanks for the offer! I’ll let @segiddins @jpsim get back to you on that :)
",timanglade,segiddins
1689,2015-03-26 18:09:07,"Thanks for the commit, @rlimberger. We'll be making a `swift-beta` branch in the near future, making sure to avoid force-unwrapping in scenarios where it may fail, using dynamic casting in a safe way and making `assertThrows()` and `Realm().write()` play nicely with `@noescape`.
",jpsim,noescape
1687,2015-03-24 21:10:10,"The Keychain API `SecItemCopyMatching()` with `Unmanaged#takeUnretainedValue()` cannot retrieve the value correctly in Release build (to be precise, fastest/smallest optimization [Os]).
`SecItemCopyMatching()` with `Unmanaged#takeUnretainedValue()` always return `nil` in release build. Maybe it's swift bug.

So this example project always crashes to cast nil value if build with release configuration.



To fix this issue use `withUnsafeMutablePointer()` function instead `takeUnretainedValue()`.

See also http://stackoverflow.com/questions/24145838/querying-ios-keychain-using-swift/27721328#27721328

Could you please review @alazier @jpsim ?

Version: Xcode 6.2, realm-cocoa 0.91.1 and master
",kishikawakatsumi,alazier
1687,2015-03-24 21:10:10,"The Keychain API `SecItemCopyMatching()` with `Unmanaged#takeUnretainedValue()` cannot retrieve the value correctly in Release build (to be precise, fastest/smallest optimization [Os]).
`SecItemCopyMatching()` with `Unmanaged#takeUnretainedValue()` always return `nil` in release build. Maybe it's swift bug.

So this example project always crashes to cast nil value if build with release configuration.



To fix this issue use `withUnsafeMutablePointer()` function instead `takeUnretainedValue()`.

See also http://stackoverflow.com/questions/24145838/querying-ios-keychain-using-swift/27721328#27721328

Could you please review @alazier @jpsim ?

Version: Xcode 6.2, realm-cocoa 0.91.1 and master
",kishikawakatsumi,jpsim
1686,2015-03-24 05:27:21,"Closes #1454.

\c @alazier @tgoyne 
",segiddins,alazier
1686,2015-03-24 05:27:21,"Closes #1454.

\c @alazier @tgoyne 
",segiddins,tgoyne
1686,2015-03-30 21:39:50,"@jpsim @tgoyne this is green, please take another look?
",segiddins,jpsim
1680,2015-03-21 00:00:01,"`-[XCTest invokeTest]` does `[self setUp]; [self.invocation invoke]; [self tearDown]` so calling `[super invokeTest]` results in the `setUp` and `tearDown` methods being called twice. All of our current obj-c setup and teardown methods are idempotent so this happens to not break anything at the moment, and the new Swift tests already use `self.invocation.invoke()`.

@alazier 
",tgoyne,alazier
1680,2015-03-26 17:48:32,"@alazier I don't think your commit does the same thing as @tgoyne's, because now the invokation is not wrapped in its own @autoreleasepool
",segiddins,autoreleasepool
1679,2015-03-20 23:18:57,"/cc @segiddins
",jpsim,segiddins
1676,2015-03-20 20:46:33,"This looks good to me, thanks @pizthewiz ! @jpsim, could you take a look?
",segiddins,jpsim
1675,2015-03-19 22:37:39,"Uses jazzy's latest `nodoc` feature: https://github.com/realm/jazzy/pull/180. /cc @segiddins 
",jpsim,segiddins
1674,2015-03-19 22:04:31,"@segiddins @tgoyne 

Closes #1669 

Anything else we should be testing?
",alazier,tgoyne
1674,2015-03-19 22:04:31,"@segiddins @tgoyne 

Closes #1669 

Anything else we should be testing?
",alazier,segiddins
1673,2015-03-19 20:34:07,"Closes #1670.

What other jazzy flags do we want to pass?

\c @jpsim 
",segiddins,jpsim
1668,2015-03-18 22:16:27,"@segiddins @jpsim 
",alazier,jpsim
1668,2015-03-18 22:16:27,"@segiddins @jpsim 
",alazier,segiddins
1667,2015-03-18 21:29:36,"/cc @alazier @segiddins 
",jpsim,alazier
1667,2015-03-18 21:29:36,"/cc @alazier @segiddins 
",jpsim,segiddins
1665,2015-03-18 20:28:49,"\c @alazier @jpsim 
",segiddins,alazier
1665,2015-03-18 20:28:49,"\c @alazier @jpsim 
",segiddins,jpsim
1660,2015-03-18 03:36:38,"Fixes #1658. /cc @alazier 
",jpsim,alazier
1657,2015-03-17 17:20:10,"@segiddins 
",alazier,segiddins
1652,2015-03-17 02:09:58,"\c @alazier @tgoyne @jpsim 
",segiddins,alazier
1652,2015-03-17 02:09:58,"\c @alazier @tgoyne @jpsim 
",segiddins,tgoyne
1652,2015-03-17 02:09:58,"\c @alazier @tgoyne @jpsim 
",segiddins,jpsim
1651,2015-03-17 01:38:59,"...ects doesn't change

\c @tgoyne @alazier 
",segiddins,alazier
1651,2015-03-17 01:38:59,"...ects doesn't change

\c @tgoyne @alazier 
",segiddins,tgoyne
1650,2015-03-17 01:27:05,"...n exception

\c @alazier @jpsim 
",segiddins,alazier
1650,2015-03-17 01:27:05,"...n exception

\c @alazier @jpsim 
",segiddins,jpsim
1649,2015-03-17 00:37:33,"@segiddins 
",alazier,segiddins
1648,2015-03-17 00:13:50,"@tgoyne 
",alazier,tgoyne
1647,2015-03-16 23:54:16,"@tgoyne @segiddins @jpsim 
",alazier,jpsim
1647,2015-03-16 23:54:16,"@tgoyne @segiddins @jpsim 
",alazier,tgoyne
1647,2015-03-16 23:54:16,"@tgoyne @segiddins @jpsim 
",alazier,segiddins
1646,2015-03-16 23:16:06,"\c @alazier @tgoyne 
",segiddins,alazier
1646,2015-03-16 23:16:06,"\c @alazier @tgoyne 
",segiddins,tgoyne
1645,2015-03-16 22:51:13,"Closes #1602.
- removed old Swift examples
- added source code to release package for building dynamic & swift frameworks
- added `ios-dynamic-fat` and `ios-swift-fat` targets to build.sh
- update build.sh usage

/cc @tgoyne @alazier @segiddins 
",jpsim,alazier
1645,2015-03-16 22:51:13,"Closes #1602.
- removed old Swift examples
- added source code to release package for building dynamic & swift frameworks
- added `ios-dynamic-fat` and `ios-swift-fat` targets to build.sh
- update build.sh usage

/cc @tgoyne @alazier @segiddins 
",jpsim,tgoyne
1645,2015-03-16 22:51:13,"Closes #1602.
- removed old Swift examples
- added source code to release package for building dynamic & swift frameworks
- added `ios-dynamic-fat` and `ios-swift-fat` targets to build.sh
- update build.sh usage

/cc @tgoyne @alazier @segiddins 
",jpsim,segiddins
1645,2015-03-16 23:38:24,"After speaking with @alazier and @tgoyne, I'll be updating this so that we ship 2 prebuilt dynamic iOS frameworks (release for device & simulator architectures). This will avoid having to ship `build.sh`, `Realm.xcodeproj` and the Objective-C source, just to build the Swift API.
",jpsim,alazier
1645,2015-03-17 06:45:46,"I've updated the packaging scripts to package RealmSwift and the swift-next examples. The scripts do as much of the new process as possible, short of including the files in the zip, to minimize bit rot.

Here's the zip structure when the new packaging is enabled:



Please review /cc @tgoyne @alazier @segiddins.
",jpsim,alazier
1644,2015-03-16 22:42:15,"\c @jpsim @alazier 
",segiddins,jpsim
1644,2015-03-16 22:42:15,"\c @jpsim @alazier 
",segiddins,alazier
1642,2015-03-16 20:16:42,"\c @tgoyne @jpsim 
",segiddins,jpsim
1642,2015-03-16 20:16:42,"\c @tgoyne @jpsim 
",segiddins,tgoyne
1639,2015-03-16 17:02:34,"This is finally ready for review.

@tgoyne @segiddins @jpsim 
",alazier,jpsim
1639,2015-03-16 17:02:34,"This is finally ready for review.

@tgoyne @segiddins @jpsim 
",alazier,tgoyne
1639,2015-03-16 17:02:34,"This is finally ready for review.

@tgoyne @segiddins @jpsim 
",alazier,segiddins
1637,2015-03-16 16:27:58,"@segiddins @tgoyne @jpsim 
",alazier,jpsim
1637,2015-03-16 16:27:58,"@segiddins @tgoyne @jpsim 
",alazier,tgoyne
1637,2015-03-16 16:27:58,"@segiddins @tgoyne @jpsim 
",alazier,segiddins
1631,2015-03-13 22:51:47,"Closes #1613 

\c @alazier 
",segiddins,alazier
1630,2015-03-13 20:52:27,"Closes #1585 

@segiddins 
",alazier,segiddins
1628,2015-03-13 17:57:13,"Might be enough to allow us to continue to index primary keys by default if we're confident that embedded nulls are the only problem, and even if we do make it opt-in we need this check until string indexes are fixed.

@alazier 
",tgoyne,alazier
1627,2015-03-13 12:52:27,"@alazier @tgoyne 
",danielpovlsen,alazier
1627,2015-03-13 12:52:27,"@alazier @tgoyne 
",danielpovlsen,tgoyne
1627,2015-03-13 18:11:15,"Yes, it seems @jpsim did a similar change directly on master.
",danielpovlsen,jpsim
1623,2015-03-13 03:43:22,"This removes the automatic creation of indexes for primary string properties.

@tgoyne 
",alazier,tgoyne
1622,2015-03-13 03:11:19,"To address https://github.com/realm/realm-cocoa/issues/875#issuecomment-78721435. /cc @segiddins
",jpsim,segiddins
1619,2015-03-12 21:47:11,"Closes https://github.com/realm/realm-cocoa/issues/1603.

\c @jpsim 
",segiddins,jpsim
1617,2015-03-12 20:41:51,"Closes #1604 

@jpsim @segiddins 
",alazier,jpsim
1617,2015-03-12 20:41:51,"Closes #1604 

@jpsim @segiddins 
",alazier,segiddins
1616,2015-03-12 19:14:27,"Closes #1600.

@alazier I started these, but I still need to do the `add` and `addOrUpdate` tests. Opening a PR in case you wanted to augment them
",segiddins,alazier
1612,2015-03-12 17:32:25,"It turns out that the documentation's recommendation to release run loop sources immediate after adding them to the run loop is a rather bad idea, as the run loop releases its sources when it's shut down, so we'd crash if the kqueue waiter outlived the source thread.

The test forces this to happen by holding on to the RLMRealm after the thread dies, but it can happen inconsistently without that.

@alazier 
",tgoyne,alazier
1606,2015-03-12 00:06:53,"Closes #1601 

@jpsim is this sufficient or do we need to make these static/utility methods?
",alazier,jpsim
1606,2015-03-12 15:29:49,"This is ready for review @jpsim @segiddins @tgoyne 
",alazier,tgoyne
1606,2015-03-12 15:29:49,"This is ready for review @jpsim @segiddins @tgoyne 
",alazier,segiddins
1593,2015-03-11 00:37:25,"\c @jpsim @alazier 
",segiddins,jpsim
1593,2015-03-11 00:37:25,"\c @jpsim @alazier 
",segiddins,alazier
1592,2015-03-10 21:06:05,"Closes #1169.

\c @tgoyne @jpsim 
",segiddins,jpsim
1592,2015-03-10 21:06:05,"Closes #1169.

\c @tgoyne @jpsim 
",segiddins,tgoyne
1591,2015-03-10 20:50:06,"\c @alazier @jpsim 
",segiddins,alazier
1591,2015-03-10 20:50:06,"\c @alazier @jpsim 
",segiddins,jpsim
1590,2015-03-10 20:11:54,"/cc @tgoyne @alazier 
",jpsim,alazier
1590,2015-03-10 20:11:54,"/cc @tgoyne @alazier 
",jpsim,tgoyne
1589,2015-03-10 14:28:41,"@tgoyne After you solved the issue with the crash on writing large commits to an encrypted realm i wanted to give writeCopyToPath another try (which caused a crash before).  With the static library file you provided here https://github.com/realm/realm-cocoa/issues/1516 i still get a crash after i added a writeCopyToPath: to our app directly after launch to shrink the database as suggested in the cocoa docs. 

The crash happens when reading an object from the realm and it only happens when the realm file was big before it was compacted (e.g. from 50 megabytes to 500 kilobytes after shrinking). I can launch the app after the crash again and i dont get a crash then anymore.

This is the line where it crashes:





Basically this is what i do (simplified):



This error only occurs when encryption is enabled.
",issue2k,tgoyne
1589,2015-03-10 18:00:18,"`[[RLMRealm defaultRealm] writeCopyToPath:pathToRealmCopy encryptionKey:key error:&error];` needs to be wrapped in `@autoreleasepool { }` so that the `RLMRealm` instance is destroyed before the backing file is deleted. Not doing so mostly works by coincidence with unencrypted Realms, but there's a lot of ways to get very confusing behavior so it's a bad idea even then.
",tgoyne,autoreleasepool
1588,2015-03-10 01:06:27,"\c @alazier @jpsim 
",segiddins,alazier
1588,2015-03-10 01:06:27,"\c @alazier @jpsim 
",segiddins,jpsim
1586,2015-03-09 22:13:08,"\c @alazier @tgoyne 
",segiddins,alazier
1586,2015-03-09 22:13:08,"\c @alazier @tgoyne 
",segiddins,tgoyne
1584,2015-05-05 18:04:20,"We just had a quick chat (@tgoyne @segiddins @bdash and I) and determined that to avoid multi-process race conditions, we should add a `deleteIfMigrationNeeded` to RLMConfiguration. /fyi @cmelchior 
",jpsim,tgoyne
1584,2015-05-05 18:04:20,"We just had a quick chat (@tgoyne @segiddins @bdash and I) and determined that to avoid multi-process race conditions, we should add a `deleteIfMigrationNeeded` to RLMConfiguration. /fyi @cmelchior 
",jpsim,bdash
1584,2015-05-19 07:59:28,"@segiddins @jpsim @bdash  How do you plan to support schemaVersion/MigrationBlock?

Currently on the Java side we have two separate methods for this:
- `RealmConfiguration.schemaVersion(42)`
- `RealmConfiguration.migration(new MyCustomMigration())`

It might make sense to combine these as having a version above 0 makes very little sense without a migration block at the same time. Something along the lines of
- `RealmConfiguration.schemaVersion(42, new MyMigrationBlock())`

Counter to that is `deleteIfMigrationNeeded` in which case having a migration block doesn't make much sense.

Our current behaviour is this: 

1) If only schemaVersion is set we make a no-op migration behind the scenes that try to upgrade the version number. Schema is validated afterwards and throw an exception if there is mismatch.

2) If newSchemaVersion > currentSchemaVersion and a migration block is set. This migration will be called when first opening the Realm. We also have a method on the Realm for manually triggering this migration. Useful if you want to upgrade on a background thread: `Realm.migrateRealm(RealmConfiguration)`

3) Setting a migration block without a schemaVersion is a no-op, ie. migration code is never called. We might want to log a warning or throw an exception for this.

4) Setting a newSchemaVersion < currentSchemaVersion will throw an exception when opening the Realm.

5) Setting newSchemaVersion == currentSchemaVersion and a schema mismatch is detected will throw an exception when opening the Realm.
",cmelchior,bdash
1582,2015-03-30 18:25:08,"Just following up on this request for an Xcode project that could help use reproduce this issue, or the corrupt realm files, @voidref and @IGZjuantrias.
",jpsim,IGZjuantrias
1581,2015-03-06 19:36:17,"Fixes #1577. /cc @tgoyne 
",jpsim,tgoyne
1580,2015-08-21 00:35:51,"@bdash I believe your work on `limit` would actually accomplish most of this?
",segiddins,bdash
1576,2015-03-05 22:43:34,"$SRCROOT isn't being set correctly, but it's not actually used anywhere or exported to subshells so just remove it.

@jpsim 
",tgoyne,jpsim
1575,2015-03-05 22:32:37,"Remove the RLM prefix from some test cases for consistency with the rest of the tests and add the proper license header to one file.

@jpsim 
",tgoyne,jpsim
1570,2015-03-05 01:48:15,"I wrote this in response to a user reporting that invalid RLMArray member objects would be included in the RLMArray count. AFAICT we're not currently testing this. /cc @tgoyne
",jpsim,tgoyne
1569,2015-03-04 23:01:16,"Closes #1492. /cc @tgoyne 
",jpsim,tgoyne
1563,2015-03-03 01:02:23,"Warning, rusty programmer ahead. Review carefully. I needed to de-stress a bit, so I implemented a fix for #1172

 This allows you to to bulk updates on query results, so you can nice one-liners like this:



@realm/cocoa 
",astigsen,realm
1563,2015-03-03 01:13:32,"I believe I already have an open pull request that implements this?

-Samuel E. Giddins

On Mar 2, 2015, at 5:02 PM, astigsen notifications@github.com wrote:

Warning, rusty programmer ahead. Review carefully. I needed to de-stress a bit, so I implemented a fix for #1172

This allows you to to bulk updates on query results, so you can nice one-liners like this:

[[Emails objectsWhere:@""unread = YES""] setValue:@NO forKey:""unread""];
@realm/cocoa

You can view, comment on, or merge this pull request online at:

  https://github.com/realm/realm-cocoa/pull/1563

Commit Summary

Added support for bulk updates to RLMResults
File Changes

M CHANGELOG.md (1)
M Realm/RLMResults.h (10)
M Realm/RLMResults.mm (161)
M Realm/Tests/RLMTestObjects.h (2)
M Realm/Tests/ResultsTests.m (193)
Patch Links:

https://github.com/realm/realm-cocoa/pull/1563.patch
https://github.com/realm/realm-cocoa/pull/1563.diff
—
Reply to this email directly or view it on GitHub.
",segiddins,realm
1563,2015-03-03 01:13:32,"I believe I already have an open pull request that implements this?

-Samuel E. Giddins

On Mar 2, 2015, at 5:02 PM, astigsen notifications@github.com wrote:

Warning, rusty programmer ahead. Review carefully. I needed to de-stress a bit, so I implemented a fix for #1172

This allows you to to bulk updates on query results, so you can nice one-liners like this:

[[Emails objectsWhere:@""unread = YES""] setValue:@NO forKey:""unread""];
@realm/cocoa

You can view, comment on, or merge this pull request online at:

  https://github.com/realm/realm-cocoa/pull/1563

Commit Summary

Added support for bulk updates to RLMResults
File Changes

M CHANGELOG.md (1)
M Realm/RLMResults.h (10)
M Realm/RLMResults.mm (161)
M Realm/Tests/RLMTestObjects.h (2)
M Realm/Tests/ResultsTests.m (193)
Patch Links:

https://github.com/realm/realm-cocoa/pull/1563.patch
https://github.com/realm/realm-cocoa/pull/1563.diff
—
Reply to this email directly or view it on GitHub.
",segiddins,NO
1562,2015-03-02 20:05:13,"Adds some tests to verify that all of the key handling stuff does the right thing and a few places where it wasn't, removes the check for an attached debugger, and adds an option to use encrypted realms for all of the tests. Currently doesn't run the tests in encrypted mode on CI since #1551 is needed to make that not take an unreasonable amount of time.

Closes #1533.

@alazier 
",tgoyne,alazier
1559,2015-02-27 17:15:37,"Fix a place where a newly created object was being assigned to a __uu pointer, and make all __uu pointers const to ensure that the same thing isn't being done elsewhere.

@alazier 
",tgoyne,alazier
1558,2015-02-27 10:29:31,"... letting the individual Targets inherit. The iOS 8 Framework and iOS 8 Tests have deployment target set to 8.0.

I do this to be able to run the tests on our iOS 7 device here at the CPH office.

@alazier @tgoyne, please review. :-)
",danielpovlsen,alazier
1558,2015-02-27 10:29:31,"... letting the individual Targets inherit. The iOS 8 Framework and iOS 8 Tests have deployment target set to 8.0.

I do this to be able to run the tests on our iOS 7 device here at the CPH office.

@alazier @tgoyne, please review. :-)
",danielpovlsen,tgoyne
1556,2015-02-26 23:04:31,"Consistently use dispatch_sync(queue, ^{}); to wait for a previously async thing on the queue as the other approaches used didn't guarantee that the block would be released before the test ended, resulting in RLMRealm instances sometimes being deallocated on the wrong thread and throwing an exception.

Might be why tests are sometimes breaking on master.

@alazier 
",tgoyne,alazier
1550,2015-02-25 22:00:58,"@yoshyosh that cheat sheet mentions support for ""Keypath collection queries"", on the other hand there's this open issue https://github.com/realm/realm-cocoa/issues/1490. Is that something that will be supported in the future (work in progress) or am I missing something? In my app I want to have the following predicate: 
`[Item objectsWhere:@""categories.@count == 0""];` but Realm asserts that `@count` is not supported.
",romaonthego,count
1548,2015-02-25 01:19:14,"Closes #1547.

\c @alazier @tgoyne 
",segiddins,alazier
1548,2015-02-25 01:19:14,"Closes #1547.

\c @alazier @tgoyne 
",segiddins,tgoyne
1548,2015-03-04 21:57:22,"I've added tests and a changelog entry for this. Anything else? /cc @segiddins @tgoyne
",jpsim,tgoyne
1546,2015-02-25 00:08:40,"@tgoyne @segiddins 

I think this addresses the concerns. valueForKey now returns a List. setValue supports both lists and RLMArrays. We only had to forward the fast enumeration method to make this work.
",alazier,tgoyne
1546,2015-02-25 00:08:40,"@tgoyne @segiddins 

I think this addresses the concerns. valueForKey now returns a List. setValue supports both lists and RLMArrays. We only had to forward the fast enumeration method to make this work.
",alazier,segiddins
1544,2015-02-24 21:11:26,"Closes https://github.com/realm/realm-cocoa/issues/1542.

\c @tgoyne 
",segiddins,tgoyne
1539,2015-02-23 22:09:35,"@tgoyne @segiddins 
",alazier,tgoyne
1539,2015-02-23 22:09:35,"@tgoyne @segiddins 
",alazier,segiddins
1536,2015-02-21 00:26:33,"Closes #1172.

\c @alazier @tgoyne @jpsim 
",segiddins,alazier
1536,2015-02-21 00:26:33,"Closes #1172.

\c @alazier @tgoyne @jpsim 
",segiddins,tgoyne
1536,2015-02-21 00:26:33,"Closes #1172.

\c @alazier @tgoyne @jpsim 
",segiddins,jpsim
1531,2015-02-19 23:19:21,"Basic idea here is to just create a named pipe, wait for data to become available on it in a background thread (and trigger notifications when it does), and then write a byte to it after each commit. kqueue is used to wait on both the named pipe and an anonymous pipe used locally to tell the waiting thread to exit.

Doing the notifications entirely in the binding turned out to not really be any more complex than using `wait_for_change()` was since eliminating the `SharedGroup` on the background thread makes shutdown and cleanup a lot simpler.

@alazier 
",tgoyne,alazier
1530,2015-08-21 00:28:10,"We've since added some tests that do that (mainly done by @bdash in https://github.com/realm/realm-cocoa/blob/16de7a70830d9f7dff969186334f335761ad2d58/Realm/Tests/SchemaTests.mm) but now the infrastructure's all in place.
",segiddins,bdash
1529,2015-02-19 18:56:21,"Kinda closes https://github.com/realm/realm-cocoa/issues/1526 ?

\c @tgoyne 
",segiddins,tgoyne
1524,2015-02-19 01:29:36,"\c @alazier @tgoyne 
",segiddins,alazier
1524,2015-02-19 01:29:36,"\c @alazier @tgoyne 
",segiddins,tgoyne
1523,2015-02-19 01:29:26,"\c @alazier @tgoyne 
",segiddins,alazier
1523,2015-02-19 01:29:26,"\c @alazier @tgoyne 
",segiddins,tgoyne
1519,2015-02-18 20:03:05,"Check if any writing actually needs to be done before starting the write transaction, and skip it when possible. Mostly only relevant for the multi-process case, where this makes it so that a write transaction in one process doesn't block other processes from opening the file.

@alazier 
",tgoyne,alazier
1517,2015-02-18 19:53:21,"Yes, you'll need to remove the `import Realm` (since you aren't integrating it as a framework, and thus it isn't a module). As to the other issues, I'm not quite sure what's going on. Maybe @mrackwitz has some ideas?
",segiddins,mrackwitz
1516,2015-02-18 13:46:37,"@tgoyne 
",dismory,tgoyne
1515,2015-02-18 01:01:35,"Closes #1465.

\c @alazier
",segiddins,alazier
1513,2015-02-17 17:59:56,"@segiddins @tgoyne 

Cherry-picked/merge from swift-realm branch.
",alazier,tgoyne
1513,2015-02-17 17:59:56,"@segiddins @tgoyne 

Cherry-picked/merge from swift-realm branch.
",alazier,segiddins
1510,2015-02-17 00:21:43,"Depends upon https://github.com/CocoaPods/CocoaPods/pull/3145.

\c @alazier @tgoyne 
",segiddins,alazier
1510,2015-02-17 00:21:43,"Depends upon https://github.com/CocoaPods/CocoaPods/pull/3145.

\c @alazier @tgoyne 
",segiddins,tgoyne
1502,2015-02-13 23:54:55,"...erty

Closes #1500.

\c @alazier 
",segiddins,alazier
1495,2015-02-12 22:11:34,"\c @alazier @tgoyne 
",segiddins,alazier
1495,2015-02-12 22:11:34,"\c @alazier @tgoyne 
",segiddins,tgoyne
1495,2015-02-24 22:52:17,"@tgoyne could you take a look at this?
",segiddins,tgoyne
1494,2015-02-12 19:26:22,"\c @alazier 
",segiddins,alazier
1490,2015-02-11 22:00:09,"- [ ] ALL
- [x] NONE
- [x] All key path collection queries (@avg, @count, @min, @max, @sum)
- [x] SUBQUERY
- [x] LIKE (wildcards \* and ? in string searches)
- [ ] MATCHES
- [ ] diacritic insensitive modifier (`[d]`)
- [ ] array operations (`[index]`, `[SIZE]`, `[FIRST]`, `[LAST]`)
- [ ] bitwise `(intCol & 1) > 0`
- [ ] SELF
- [x] multi-level object equality link queries `(object.object.object = %@)`
- [x] multi-level object equality link queries with NULL `(object.object.object = NULL)`
- [x] `%@ IN collection`
- [ ] inequalities on string properties (e.g., `stringCol > ""some string""`)",yoshyosh,sum
1490,2015-02-11 22:00:09,"- [ ] ALL
- [x] NONE
- [x] All key path collection queries (@avg, @count, @min, @max, @sum)
- [x] SUBQUERY
- [x] LIKE (wildcards \* and ? in string searches)
- [ ] MATCHES
- [ ] diacritic insensitive modifier (`[d]`)
- [ ] array operations (`[index]`, `[SIZE]`, `[FIRST]`, `[LAST]`)
- [ ] bitwise `(intCol & 1) > 0`
- [ ] SELF
- [x] multi-level object equality link queries `(object.object.object = %@)`
- [x] multi-level object equality link queries with NULL `(object.object.object = NULL)`
- [x] `%@ IN collection`
- [ ] inequalities on string properties (e.g., `stringCol > ""some string""`)",yoshyosh,max
1490,2015-02-11 22:00:09,"- [ ] ALL
- [x] NONE
- [x] All key path collection queries (@avg, @count, @min, @max, @sum)
- [x] SUBQUERY
- [x] LIKE (wildcards \* and ? in string searches)
- [ ] MATCHES
- [ ] diacritic insensitive modifier (`[d]`)
- [ ] array operations (`[index]`, `[SIZE]`, `[FIRST]`, `[LAST]`)
- [ ] bitwise `(intCol & 1) > 0`
- [ ] SELF
- [x] multi-level object equality link queries `(object.object.object = %@)`
- [x] multi-level object equality link queries with NULL `(object.object.object = NULL)`
- [x] `%@ IN collection`
- [ ] inequalities on string properties (e.g., `stringCol > ""some string""`)",yoshyosh,min
1490,2015-02-11 22:00:09,"- [ ] ALL
- [x] NONE
- [x] All key path collection queries (@avg, @count, @min, @max, @sum)
- [x] SUBQUERY
- [x] LIKE (wildcards \* and ? in string searches)
- [ ] MATCHES
- [ ] diacritic insensitive modifier (`[d]`)
- [ ] array operations (`[index]`, `[SIZE]`, `[FIRST]`, `[LAST]`)
- [ ] bitwise `(intCol & 1) > 0`
- [ ] SELF
- [x] multi-level object equality link queries `(object.object.object = %@)`
- [x] multi-level object equality link queries with NULL `(object.object.object = NULL)`
- [x] `%@ IN collection`
- [ ] inequalities on string properties (e.g., `stringCol > ""some string""`)",yoshyosh,count
1490,2015-02-11 22:00:09,"- [ ] ALL
- [x] NONE
- [x] All key path collection queries (@avg, @count, @min, @max, @sum)
- [x] SUBQUERY
- [x] LIKE (wildcards \* and ? in string searches)
- [ ] MATCHES
- [ ] diacritic insensitive modifier (`[d]`)
- [ ] array operations (`[index]`, `[SIZE]`, `[FIRST]`, `[LAST]`)
- [ ] bitwise `(intCol & 1) > 0`
- [ ] SELF
- [x] multi-level object equality link queries `(object.object.object = %@)`
- [x] multi-level object equality link queries with NULL `(object.object.object = NULL)`
- [x] `%@ IN collection`
- [ ] inequalities on string properties (e.g., `stringCol > ""some string""`)",yoshyosh,avg
1490,2016-02-09 23:47:50,"Yes, `ALL` can now be implemented at the binding layer by generating a query equivalent to `SUBQUERY(collection, …, …).@count == collection.@count` for `ALL collection.…`.
",bdash,count
1490,2016-02-10 00:09:07,"I thought `SUBQUERY(collection, …, …).@count == collection.@count` was unsupported at the moment because subqueries can only compare `@count` against a constant value?
",jpsim,count
1489,2015-02-11 21:31:35,"@tgoyne 
",alazier,tgoyne
1484,2015-02-11 00:37:58,"Closes #1468.

\c @alazier 
",segiddins,alazier
1482,2015-02-10 01:42:56,"Fixes #1477

@tgoyne 
",alazier,tgoyne
1481,2015-02-10 00:50:09,"Closes https://github.com/realm/realm-cocoa/issues/1439

\c @alazier @tgoyne 
",segiddins,alazier
1481,2015-02-10 00:50:09,"Closes https://github.com/realm/realm-cocoa/issues/1439

\c @alazier @tgoyne 
",segiddins,tgoyne
1480,2015-02-09 23:52:26,"Gets rid of three new warnings under Xcode 6.3

\c @tgoyne 
",segiddins,tgoyne
1479,2015-02-09 22:12:03,"Will fail on CI due to not using a core build with working wait_for_change().

Any suggestions for other things to test? It covers everything we test for multiple threads along with a few other things that came to mind and an attempt at a brute-force test, but it seems like there must be more that's testable.

@alazier 
",tgoyne,alazier
1478,2015-02-09 21:36:23,"...e to a bad version number.

Closes https://github.com/realm/realm-cocoa/issues/1475

\c @alazier @tgoyne 
",segiddins,alazier
1478,2015-02-09 21:36:23,"...e to a bad version number.

Closes https://github.com/realm/realm-cocoa/issues/1475

\c @alazier @tgoyne 
",segiddins,tgoyne
1471,2015-02-09 19:50:48,"@LoganWright what you're doing is unsupported -- by using the `@objc(ClassName)` annotation on your `RLMObject` Swift subclasses, you're making it impossible for Realm to know that these are Swift classes, and thus they need to support the 'Swift way' of declaring `RLMArrays`. (Since they only way we can tell that a class was declared in Swift is by seeing if it has a namespaced class name).

I hope this helps!
",segiddins,objc
1467,2015-02-07 00:17:31,"Closes https://github.com/realm/realm-cocoa/issues/1466 ?

\c @jpsim @GreatApe @alazier 
",segiddins,jpsim
1467,2015-02-07 00:17:31,"Closes https://github.com/realm/realm-cocoa/issues/1466 ?

\c @jpsim @GreatApe @alazier 
",segiddins,alazier
1467,2015-02-07 00:17:31,"Closes https://github.com/realm/realm-cocoa/issues/1466 ?

\c @jpsim @GreatApe @alazier 
",segiddins,GreatApe
1462,2015-02-05 18:33:46,"@tgoyne @segiddins 

This is done without the extra configurations. Passes locally and on ci.
",alazier,tgoyne
1462,2015-02-05 18:33:46,"@tgoyne @segiddins 

This is done without the extra configurations. Passes locally and on ci.
",alazier,segiddins
1459,2015-02-05 01:38:17,"Also now uses the Realm.Private module instead of including a custom Realm_Private.h

\c @jpsim @GreatApe 
",segiddins,jpsim
1459,2015-02-05 01:38:17,"Also now uses the Realm.Private module instead of including a custom Realm_Private.h

\c @jpsim @GreatApe 
",segiddins,GreatApe
1459,2015-02-05 19:10:57,"@alazier addressed your comments
",segiddins,alazier
1457,2015-02-05 00:14:53,"@segiddins 
",alazier,segiddins
1457,2015-02-05 04:40:11,"@tgoyne @segiddins

Only way I was able to make this work was to add configurations to build the dynamic frameworks. I was unable to make xcode behave properly with any other strategies. If you have other suggestions on how to make this work please share. Otherwise this is ready for review.
",alazier,tgoyne
1457,2015-02-05 04:40:11,"@tgoyne @segiddins

Only way I was able to make this work was to add configurations to build the dynamic frameworks. I was unable to make xcode behave properly with any other strategies. If you have other suggestions on how to make this work please share. Otherwise this is ready for review.
",alazier,segiddins
1456,2015-02-04 23:54:36,"...te a realm when that realm is already open

Closes https://github.com/realm/realm-cocoa/issues/1455

\c @alazier @tgoyne 
",segiddins,alazier
1456,2015-02-04 23:54:36,"...te a realm when that realm is already open

Closes https://github.com/realm/realm-cocoa/issues/1455

\c @alazier @tgoyne 
",segiddins,tgoyne
1453,2015-02-04 22:33:24,"\c @alazier 
",segiddins,alazier
1451,2015-02-04 01:33:18,"\c @alazier @tgoyne 
",segiddins,alazier
1451,2015-02-04 01:33:18,"\c @alazier @tgoyne 
",segiddins,tgoyne
1450,2015-02-06 22:16:23,"@tgoyne @segiddins ready for review
",alazier,tgoyne
1450,2015-02-06 22:16:23,"@tgoyne @segiddins ready for review
",alazier,segiddins
1446,2015-02-03 01:17:36,"Fixes building with CocoaPods.

Verified this fixes things with `pod lib lint`.

\c @tgoyne @mrackwitz 
",segiddins,mrackwitz
1446,2015-02-03 01:17:36,"Fixes building with CocoaPods.

Verified this fixes things with `pod lib lint`.

\c @tgoyne @mrackwitz 
",segiddins,tgoyne
1440,2015-01-30 22:00:03,"@tgoyne 

Closed #935 
",mrackwitz,tgoyne
1438,2015-01-30 20:21:43,":cherries: :ok_hand: 
- Contains the separate module Ream.Private
- Minor API improvements

/c @alazier 
",mrackwitz,alazier
1437,2015-01-30 13:46:24,"@tgoyne 
",bmunkholm,tgoyne
1434,2015-01-29 19:00:04,"Restores the user-facing `isEqualToProperty:` method

\c @alazier @tgoyne 
",segiddins,alazier
1434,2015-01-29 19:00:04,"Restores the user-facing `isEqualToProperty:` method

\c @alazier @tgoyne 
",segiddins,tgoyne
1432,2015-02-02 17:36:39,"Looks like I managed to isolate how to reproduce the crash. You just need a class with a name longer than 57 characters, so `@interface apokerkopaerpokapeorkapeokrpaoekrapoerkapoerkapeorkapeeok : RLMObject` would not crash whilst `@interface apokerkopaerpokapeorkapeokrpaoekrapoerkapoerkapeorkapeeoka : RLMObject` would. I have also e-mailed you a test project illustrating the crash on an iPhone 6 running in release mode.

Though I suspect that this might also have something to do with inheritance, since my actual project does not contain class names that long.

I should also note that the sample project I sent you guys crashes even without encryption enabled, but I hope this is the same root cause as with the crashes when encryption is enabled.
",anlaital,interface
1431,2015-01-29 03:51:37,"Still needs more testing.

@tgoyne 
",alazier,tgoyne
1428,2015-02-03 23:21:47,"This should now be ready for review, @alazier & @tgoyne 
",segiddins,alazier
1428,2015-02-03 23:21:47,"This should now be ready for review, @alazier & @tgoyne 
",segiddins,tgoyne
1428,2015-02-06 22:43:28,"@alazier @tgoyne please review?
",segiddins,alazier
1428,2015-02-06 22:43:28,"@alazier @tgoyne please review?
",segiddins,tgoyne
1426,2015-02-10 23:17:11,"@tgoyne @alazier I think this might be ready for review?
",segiddins,alazier
1426,2015-02-10 23:17:11,"@tgoyne @alazier I think this might be ready for review?
",segiddins,tgoyne
1423,2015-01-28 21:19:52,"Closes #1374.
Closes #1372.

\c @alazier 
",segiddins,alazier
1422,2015-01-28 18:44:28,"Added a logo back to readme without the beta symbol cc @jpsim 
",yoshyosh,jpsim
1420,2015-01-27 21:12:48,"Closes #1377.

\c @tgoyne @jpsim 
",segiddins,jpsim
1420,2015-01-27 21:12:48,"Closes #1377.

\c @tgoyne @jpsim 
",segiddins,tgoyne
1415,2015-01-27 00:18:53,"- `RLMCreateObjectInRealmWithValue()` is now a no-op if value is an RLMObject
  of the same type already backed by the target realm.
- Moved check for primary key from `createOrUpdateInDefaultRealmWithObject:` to
  `createOrUpdateInRealm:withObject:`

Fixes #1409. @alazier @tgoyne 
",jpsim,alazier
1415,2015-01-27 00:18:53,"- `RLMCreateObjectInRealmWithValue()` is now a no-op if value is an RLMObject
  of the same type already backed by the target realm.
- Moved check for primary key from `createOrUpdateInDefaultRealmWithObject:` to
  `createOrUpdateInRealm:withObject:`

Fixes #1409. @alazier @tgoyne 
",jpsim,tgoyne
1414,2015-01-26 23:00:52,"Fixes https://secure.helpscout.net/conversation/65032812/293/. @alazier @tgoyne
",jpsim,alazier
1414,2015-01-26 23:00:52,"Fixes https://secure.helpscout.net/conversation/65032812/293/. @alazier @tgoyne
",jpsim,tgoyne
1412,2015-01-26 20:02:04,"When a read-only Realm is missing tables, we can't read the column order from the table, so we were creating accessors where every property was using column 0, and then reusing those accessors for Realms opened later which do have the tables. This fixes the problem by explicitly checking `_column` in `isEqualToProperty:` rather than relying on the order of the properties in the array, and as an optimization skips creating the accessors for missing tables.

Fixes https://secure.helpscout.net/conversation/67013100/364/ and hopefully the other reports of column type mismatches.

@alazier 
",tgoyne,alazier
1411,2015-01-26 18:20:17,"Is there a way to sort RLMResults instances with computed properties? (not stored on realm db).
I've tried with my ""distance"" @property evaluated at runtime but I get this:
"" **\* Terminating app due to uncaught exception 'Invalid sort column', reason: 'Column named '(null)' not found.'""

Is there a way to get it? Convert RLMResults in a normal NSArray?
",malcommac,property
1409,2015-01-24 01:17:02,"Otherwise, people try to do this:



Thoughts @tgoyne @alazier ?
",jpsim,alazier
1409,2015-01-24 01:17:02,"Otherwise, people try to do this:



Thoughts @tgoyne @alazier ?
",jpsim,tgoyne
1407,2015-01-24 00:13:56,"@segiddins @jpsim 
",alazier,jpsim
1407,2015-01-24 00:13:56,"@segiddins @jpsim 
",alazier,segiddins
1399,2015-01-23 01:58:52,"Closes https://github.com/realm/realm-cocoa/issues/1177.

I'll need a little help in adding test coverage for this. Feel free to just say it's wrong :)

\c @tgoyne @alazier
",segiddins,alazier
1399,2015-01-23 01:58:52,"Closes https://github.com/realm/realm-cocoa/issues/1177.

I'll need a little help in adding test coverage for this. Feel free to just say it's wrong :)

\c @tgoyne @alazier
",segiddins,tgoyne
1399,2015-05-05 20:37:42,"This has been updated and should be ready for review, @jpsim @bdash.
",segiddins,jpsim
1399,2015-05-05 20:37:42,"This has been updated and should be ready for review, @jpsim @bdash.
",segiddins,bdash
1399,2015-05-05 23:58:14,"\c @tgoyne 
",segiddins,tgoyne
1397,2015-01-27 23:10:53,"@tgoyne what are your thoughts on this change?
",segiddins,tgoyne
1396,2015-01-22 22:11:02,"Shallow copies of empty queries give an invalid Query, so make a ""deep"" copy.

Closes #1394.

@alazier 
",tgoyne,alazier
1392,2015-01-22 18:35:49,"This has a somewhat refactored version of the changes to Realm caching and notifying things that I initially did for the inter-process notifications, minus the actual inter-process notifications part since that's actually fairly separate from this.

Pulls the realm cache and notification logic out of RLMRealm.mm, keeps track of whether we have any pending notifications for a Realm to improve performance under heavy write load, and tracks Realms to notify separately from cached Realms since we're planning to make uncached Realms more of a thing.

@alazier 
",tgoyne,alazier
1391,2015-01-22 18:20:36,"@alazier @jpsim 
",tgoyne,alazier
1391,2015-01-22 18:20:36,"@alazier @jpsim 
",tgoyne,jpsim
1388,2015-01-22 05:38:04,"RLMAccessor.h should be marked as a private header, right @mrackwitz ?
",segiddins,mrackwitz
1387,2015-01-23 21:30:58,"@GreatApe 's WIP is now here: https://github.com/realm/realm-cocoa/tree/gk-new-browser
",alazier,GreatApe
1384,2015-01-21 22:54:03,"I'm trying to convert an object in a migration block where the old version has a string property that will now become a relation to another RLMObject. I thought I could just do a realm call in the migration block but that seems to block on a mutex and hang (kind of makes sense).

Old Object
`@property NSString *template;`

New Object:
`@property AttractionTemplate *attractionTemplate;`

Migration block



Is there any way to look up an object when adding a new relation in a migration block?

Realm 0.89.2, XCode 6.1.1, OSX 10.10.1
",michaelcameron,property
1382,2015-01-21 22:22:19,"@segiddins this is meant to be merged into your rebased branch.
",jpsim,segiddins
1380,2015-08-21 00:39:50,"@tgoyne has now written interprocess tests, can this be closed?
",segiddins,tgoyne
1380,2015-08-24 16:41:19,"At one point, we didn't think it'd be possible to build proper interprocess tests within our unit tests, but @tgoyne proved that wrong by building awesome interprocess unit tests, so this can be closed.
",jpsim,tgoyne
1376,2015-01-21 18:28:49,"@alazier @jpsim 
",tgoyne,alazier
1376,2015-01-21 18:28:49,"@alazier @jpsim 
",tgoyne,jpsim
1375,2015-01-21 18:26:39,"Closes https://github.com/realm/realm-cocoa/issues/1369.

\c @alazier @tgoyne 
",segiddins,alazier
1375,2015-01-21 18:26:39,"Closes https://github.com/realm/realm-cocoa/issues/1369.

\c @alazier @tgoyne 
",segiddins,tgoyne
1368,2015-01-21 01:58:18,"You ok with this @jpsim ?
",alazier,jpsim
1367,2015-01-21 00:11:45,"@segiddins 
",jpsim,segiddins
1365,2015-01-20 22:45:19,"Closes #1354.

\c @GreatApe @jpsim 
",segiddins,jpsim
1365,2015-01-20 22:45:19,"Closes #1354.

\c @GreatApe @jpsim 
",segiddins,GreatApe
1364,2015-01-20 22:22:00,"Closes #1185.

\c @jpsim 
",segiddins,jpsim
1361,2015-01-20 18:06:45,"@alazier @jpsim 
",tgoyne,alazier
1361,2015-01-20 18:06:45,"@alazier @jpsim 
",tgoyne,jpsim
1357,2015-02-03 19:34:39,"@BrentleyJones I just want to follow up and make sure you have refreshing working in your app?
",segiddins,BrentleyJones
1356,2015-01-17 01:16:55,"Connected to #1238.

\c @alazier @jpsim 
",segiddins,alazier
1356,2015-01-17 01:16:55,"Connected to #1238.

\c @alazier @jpsim 
",segiddins,jpsim
1356,2015-01-27 23:57:27,"This PR is now almost exclusively about adding documentation. If there's anything at all unrelated to documentation in here that you're unsure about, let me know and I'll factor it out into a different PR.

Once this is merged, I'll be filing a PR to add the missing aspects of the interface that I just removed.

Please review @alazier @tgoyne @segiddins @mrackwitz 
",jpsim,mrackwitz
1356,2015-01-27 23:57:27,"This PR is now almost exclusively about adding documentation. If there's anything at all unrelated to documentation in here that you're unsure about, let me know and I'll factor it out into a different PR.

Once this is merged, I'll be filing a PR to add the missing aspects of the interface that I just removed.

Please review @alazier @tgoyne @segiddins @mrackwitz 
",jpsim,alazier
1356,2015-01-27 23:57:27,"This PR is now almost exclusively about adding documentation. If there's anything at all unrelated to documentation in here that you're unsure about, let me know and I'll factor it out into a different PR.

Once this is merged, I'll be filing a PR to add the missing aspects of the interface that I just removed.

Please review @alazier @tgoyne @segiddins @mrackwitz 
",jpsim,tgoyne
1356,2015-01-28 00:28:20,"This is now _just_ docs. @alazier @tgoyne @segiddins @mrackwitz
",jpsim,mrackwitz
1356,2015-01-28 00:28:20,"This is now _just_ docs. @alazier @tgoyne @segiddins @mrackwitz
",jpsim,alazier
1356,2015-01-28 00:28:20,"This is now _just_ docs. @alazier @tgoyne @segiddins @mrackwitz
",jpsim,tgoyne
1355,2015-01-16 19:47:55,"Also cleans up the logic for migration and checking/updating schema version.

Closes #1336, #1326 
Replaces #1340, #1335  

@tgoyne 
",alazier,tgoyne
1353,2015-01-16 18:14:12,"Closes #1178.

@alazier @jpsim 
",tgoyne,alazier
1353,2015-01-16 18:14:12,"Closes #1178.

@alazier @jpsim 
",tgoyne,jpsim
1352,2015-01-16 18:11:57,"Adds a better error message that tries to explain what's wrong.

@alazier @jpsim 
",tgoyne,alazier
1352,2015-01-16 18:11:57,"Adds a better error message that tries to explain what's wrong.

@alazier @jpsim 
",tgoyne,jpsim
1347,2015-01-15 20:33:24,"Clean didn't actually delete `build` directories. @tgoyne @alazier 
",jpsim,alazier
1347,2015-01-15 20:33:24,"Clean didn't actually delete `build` directories. @tgoyne @alazier 
",jpsim,tgoyne
1346,2015-01-15 19:46:50,"The remaining core issues appear to have been solved.

@alazier @jpsim 
",tgoyne,alazier
1346,2015-01-15 19:46:50,"The remaining core issues appear to have been solved.

@alazier @jpsim 
",tgoyne,jpsim
1342,2015-01-14 23:38:55,"This is the branch for the new browser, with a different UI and completely refactored. The new files are in the New browser folder within xcode. The project still contains all the files from the old browser, in working order.

NB: To test it, open a file using the ""Tools/Open new window menu"" item. 

@bmunkholm @yoshyosh 

https://app.asana.com/0/15028213105325/24171050958174
",GreatApe,yoshyosh
1342,2015-01-14 23:38:55,"This is the branch for the new browser, with a different UI and completely refactored. The new files are in the New browser folder within xcode. The project still contains all the files from the old browser, in working order.

NB: To test it, open a file using the ""Tools/Open new window menu"" item. 

@bmunkholm @yoshyosh 

https://app.asana.com/0/15028213105325/24171050958174
",GreatApe,bmunkholm
1338,2015-01-14 00:22:08,"\c @jpsim 
",segiddins,jpsim
1338,2015-01-14 00:25:56,"@jpsim  suggested in the other pr of only having one copy of these methods.
",alazier,jpsim
1337,2015-01-14 00:03:25,"\c @alazier @jpsim 
",segiddins,alazier
1337,2015-01-14 00:03:25,"\c @alazier @jpsim 
",segiddins,jpsim
1335,2015-01-13 20:53:16,"Pull more of the schema version checking and updating stuff into one place to hopefully make it easier to follow and make explicit and implicit migrations do the exact same thing. Fixes a crash due to RLMRealmCreateMetadataTables not being called when implicitly migrating an existing realm file from being we unconditionally created the primary key table.

This also makes creating a brand new Realm file with a custom schema not set the schema version to the static schema version, since doing so didn't really make any sense.

@alazier 
",tgoyne,alazier
1333,2015-01-13 01:21:36,"Also allows encryption in Swift

n.b. Migrations aren't fully functional in swift, as demonstrated when running the Migrations example app.

\c @alazier @jpsim 
",segiddins,alazier
1333,2015-01-13 01:21:36,"Also allows encryption in Swift

n.b. Migrations aren't fully functional in swift, as demonstrated when running the Migrations example app.

\c @alazier @jpsim 
",segiddins,jpsim
1332,2015-01-12 23:20:47,"Mostly just to make dynamic realms more like normal realms, but also lets us check for a few more invalid things.

Test changes are all just to avoid having the same file open multiple times with different schemas on the same thread.

@alazier 
",tgoyne,alazier
1330,2015-01-12 22:18:27,"Pull almost all #imports out of header files, eliminate some unused header inclusions, sort imports, and clean up some extern ""C"" stuff.

@alazier 
",tgoyne,alazier
1329,2015-01-12 21:58:13,"As @tgoyne stated in [this mailing list post](https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/realm-cocoa/gWvJ_uxY5kk/HnlHDFCwLGYJ):

> Objective-C's BOOL is unfortunately a typedef for char on 32-bit platforms rather than a proper boolean type, so we assume all 8-bit ints are boolean properties.

But we could still throw an exception if a model is declared in Swift using an Int8. The exception message could suggest that these properties be declared with an `Int` instead.
",jpsim,tgoyne
1318,2015-01-09 23:12:47,"Closes #1310 

Also does a bit of code cleanup in RLMRealm and verifies encryption keys in writeCopy to path.

@tgoyne 
",alazier,tgoyne
1316,2015-01-13 08:28:57,"The issue I was having is that to properly remove the Realm file, requires deleting the *realm.lock too. Also, I noticed that I can call [RLMRealm performSelector:@selector(clearRealmCache)...] to clear the cache.
",bigfish24,selector
1307,2015-01-08 01:00:16,"We kind of depart from convention with our naming for methods which take an encryption key. For instance. Instead of using the phrase `encryptedRealm`, we should just rename the `key` parameter to `encryptionKey`. We should change the following methods from:



to



which aligns better with the other method names and with the `+ (void)setEncryptionKey:(NSData *)key forRealmsAtPath:(NSString *)path;` method.

@tgoyne mentioned that someone objected to this naming in the past. Does this objection still exist? Thoughts @jpsim @segiddins ?
",alazier,jpsim
1307,2015-01-08 01:00:16,"We kind of depart from convention with our naming for methods which take an encryption key. For instance. Instead of using the phrase `encryptedRealm`, we should just rename the `key` parameter to `encryptionKey`. We should change the following methods from:



to



which aligns better with the other method names and with the `+ (void)setEncryptionKey:(NSData *)key forRealmsAtPath:(NSString *)path;` method.

@tgoyne mentioned that someone objected to this naming in the past. Does this objection still exist? Thoughts @jpsim @segiddins ?
",alazier,tgoyne
1307,2015-01-08 01:00:16,"We kind of depart from convention with our naming for methods which take an encryption key. For instance. Instead of using the phrase `encryptedRealm`, we should just rename the `key` parameter to `encryptionKey`. We should change the following methods from:



to



which aligns better with the other method names and with the `+ (void)setEncryptionKey:(NSData *)key forRealmsAtPath:(NSString *)path;` method.

@tgoyne mentioned that someone objected to this naming in the past. Does this objection still exist? Thoughts @jpsim @segiddins ?
",alazier,segiddins
1306,2015-01-07 23:57:39,"@jpsim 
",segiddins,jpsim
1305,2015-01-07 23:14:01,"\c @tgoyne 
",segiddins,tgoyne
1304,2015-01-07 22:24:59,"Closes https://github.com/realm/realm-cocoa/issues/1294.

\c @GreatApe
",segiddins,GreatApe
1303,2015-01-16 21:27:27,"Thanks for filing this, @cyanware. This should be fixed in the next CocoaPods release thanks to @tgoyne's handiwork.
",jpsim,tgoyne
1301,2015-01-06 19:40:22,"I added support for this to core and then forgot to make the binding actually pass the key to the function...

@alazier 
",tgoyne,alazier
1299,2015-01-06 18:25:27,"This makes it possible to change the encryption key of an existing Realm file as follows:



@alazier 
",tgoyne,alazier
1298,2015-01-06 00:43:54,"Fixes outright memory leaks in the tests by enabling ARC support for exceptions for the obj-c test files (it's enabled by default for obj-c++), and fixes some places where objects ended up living far longer than expected in autorelease pools, by delaying autoreleasing RLMRealms until after all validation is done and not autoreleasing RLMMigrations at all.

With these changes the realm cache is empty at the end of every test case, as verified by adding `assert(![map.objectEnumerator nextObject]);` to `clearRealmCache`.

@alazier 
",tgoyne,alazier
1296,2015-01-05 18:36:07,"Without this check we now get an assertion failure when the count goes down, as we'd read past the end of the TableView.

@alazier 
",tgoyne,alazier
1293,2015-01-02 20:45:11,"Previously it just left things sorta half-migrated.

@alazier 
",tgoyne,alazier
1287,2015-01-01 02:02:31,"Previous message would read ""Column name objectCol.stringCol not found in table"". Please review @alazier @tgoyne 
",jpsim,alazier
1287,2015-01-01 02:02:31,"Previous message would read ""Column name objectCol.stringCol not found in table"". Please review @alazier @tgoyne 
",jpsim,tgoyne
1286,2016-06-20 21:39:15,"@bdash could you look into whether or not this has been done recently?
",jpsim,bdash
1284,2014-12-31 22:15:17,"This moves over to RLMObjectBase. We also now properly hide private apis using bridging headers.

@jpsim @tgoyne 
",alazier,jpsim
1284,2014-12-31 22:15:17,"This moves over to RLMObjectBase. We also now properly hide private apis using bridging headers.

@jpsim @tgoyne 
",alazier,tgoyne
1284,2014-12-31 23:25:46,"> I don't know why we're no longer caching default values. Is that intentional, @alazier?

This was causing crashes for users who tried to call Realm methods in their defaults method. @tgoyne and I agreed we should not be caching these values: https://github.com/realm/realm-cocoa/issues/1251
",alazier,tgoyne
1282,2014-12-31 05:46:05,"README was out of date. @realm/cocoa any objections?
",jpsim,realm
1278,2014-12-30 01:04:35,"This is a bug in XCTest, not Realm. @alazier 
",jpsim,alazier
1272,2014-12-30 01:40:53,"Thanks for your continued work on this, @nathanhjones! After a brief review, it looks like this update addresses most of @alazier's last design concerns from the previous PR (except pt. 3):
1. date formatters
2. block transformations
3. the option of using a different mapping per object
4. the ability to override existing keys

Before we proceed to reviewing in-depth, it would be nice to compile the design goals that are important to us in property mapping.

I'd be curious to hear @segiddins' thoughts on this given his work with ResKit.
",jpsim,alazier
1272,2014-12-30 01:40:53,"Thanks for your continued work on this, @nathanhjones! After a brief review, it looks like this update addresses most of @alazier's last design concerns from the previous PR (except pt. 3):
1. date formatters
2. block transformations
3. the option of using a different mapping per object
4. the ability to override existing keys

Before we proceed to reviewing in-depth, it would be nice to compile the design goals that are important to us in property mapping.

I'd be curious to hear @segiddins' thoughts on this given his work with ResKit.
",jpsim,segiddins
1272,2014-12-30 02:24:11,"I'm away this week, but I look forward to reviewing this!

-Samuel E. Giddins

On Dec 29, 2014, at 9:40 PM, JP Simard notifications@github.com wrote:

Thanks for your continued work on this, @nathanhjones! After a brief review, it looks like this update addresses most of @alazier's last design concerns from the previous PR (except pt. 3):

date formatters
block transformations
the option of using a different mapping per object
the ability to override existing keys
Before we proceed to reviewing in-depth, it would be nice to compile the design goals that are important to us in property mapping.

I'd be curious to hear @segiddins' thoughts on this given his work with ResKit.

—
Reply to this email directly or view it on GitHub.
",segiddins,alazier
1272,2014-12-30 02:24:11,"I'm away this week, but I look forward to reviewing this!

-Samuel E. Giddins

On Dec 29, 2014, at 9:40 PM, JP Simard notifications@github.com wrote:

Thanks for your continued work on this, @nathanhjones! After a brief review, it looks like this update addresses most of @alazier's last design concerns from the previous PR (except pt. 3):

date formatters
block transformations
the option of using a different mapping per object
the ability to override existing keys
Before we proceed to reviewing in-depth, it would be nice to compile the design goals that are important to us in property mapping.

I'd be curious to hear @segiddins' thoughts on this given his work with ResKit.

—
Reply to this email directly or view it on GitHub.
",segiddins,segiddins
1272,2014-12-31 13:15:59,"@alazier I totally agree, it does add a certain amount of overhead, something I debated while deciding between a couple solutions. My use case tends to be integrating with a new data source. Something I don't do often after initial dev, and when I do, I expect there to be some mapping work involved. I'm sure you guys have more use cases you're hearing from customers, so obviously open to all feedback.

I felt the protocol was a good mix of flexibility while aligning to the defined set of steps / behaviors involved with mapping. To help minimize some of the work, the thought was that users could define translation classes as part of the `RLMObject` subclass itself, or perhaps grouped in separate files - e.g. `SourceOneAPITranslations.h/m` and `SourceTwoAPITranslations.h/m`. After implementing the protocol approach in my project, I do need to revisit making some methods `@optional` if we move forward with it.

Yes, as the API stands now, you can have one translation that will always be applied if specified. My plan was to work through the entire problem in two steps:
1. finalize the approach to mapping / transformation, then
2. update to solve the per-instance requirement, which depends on the solution from step 1

I've started sketching out what that looks like. I think it's as straightforward as another initializer - `initWithTranslation:andObject:`. Translation being what we settle on in this first step. This will require an update to the `RLMValidatedDictionaryForObjectSchema` function to pass the instance, something I wanted to discuss with you guys first.

That said, would it be beneficial for me to polish one of the other approaches I debated and submit a separate PR for comparison? It's more similar to the previous mapping-only PR.
",nathanhjones,optional
1272,2014-12-31 18:09:21,"There are two overarching design principles I am hoping to seewith these apis:

1 - The mapping apis should be on a fundamental level decoupled from the other Realm apis. We don't want to bake in logic to apply transforms in the validation methods as this approach doesn't scale for nested objects - even if we had a creation method which took a translation and an object, users would also need to supply transforms for all nested child objects and we would have to pass the transforms throughout the object creation pipeline which isn't practical.

The simplest (and most common) approach to decouple these apis is to any mapping before using any Realm apis at all. This has the benefit of being completely decoupled, with the downside of having duplicate/copy the entire object tree before insertion. Another approach which avoids the need to copy data is to have an wrapper object which applies transforms when accessing object properties. The wrapper object can then be passed to Realm when creating objects and can be applied on demand. Accessing nested object properties simply wrap these objects on access so this approach should scale and perform well. My hope was is the apis we end up with support both models, standalone value transformation and object wrapping.

2 - The apis should be declarative whenever possible. In general this makes apis a lot easier to use, and the code a lot easier to read. I don't see why we can't have a single initialization for a mapper which takes a dictionary that maps keys to either a source keypath, a transformation block, or any other supported mapping. 

In general, I was imaging the example in this pr looking something like:



which functionally is very similar to what you have proposed, but allows you to specify a mapping at runtime using a single initializer which I think is much more user friendly.

There are still some issues that need to be worked out, mostly that mapper/transformation creation also may need to take an objectSchema and the entire schema being operated on to support nested objects properly. It's possible to infer this information from object being transformed, so this may not be needed in the end - in any case we need to give this some more thought to work through the details.

Hopefully this will give you better sense of what I am hoping for from these apis. I've discussed some of this at various times with @tgoyne and @jpsim but I don't think we ever reached consensus on what we planned to build. If they agree with this overall design I think we can move forward with nailing down the api details pretty quickly.
",alazier,tgoyne
1270,2015-01-15 21:09:31,"@jpsim I have seen the hanging/spinning issue when using 32bit simulators - I think either problem can result from this scenario. @tgoyne can probably confirm (or deny).
",alazier,tgoyne
1268,2014-12-26 20:21:41,"Closes #1266

@tgoyne @jpsim @GreatApe 
",alazier,jpsim
1268,2014-12-26 20:21:41,"Closes #1266

@tgoyne @jpsim @GreatApe 
",alazier,tgoyne
1268,2014-12-26 20:21:41,"Closes #1266

@tgoyne @jpsim @GreatApe 
",alazier,GreatApe
1265,2014-12-23 22:54:10,"We should discuss the feasibility of this, especially around auto-updating. It may not be fully possible to do this without the ability to freeze `RLMResults`. If that's the case, we should add the `blocked` tag to this issue.

The API could look something like `-[RLMResults sortedResultsUsingBlock:]`, which would require constructing the accessors for each item in the `RLMResults` and then accessing the properties accessed in the block, but it would allow people to sort in any way they like.

Thoughts @alazier @tgoyne?
",jpsim,alazier
1265,2014-12-23 22:54:10,"We should discuss the feasibility of this, especially around auto-updating. It may not be fully possible to do this without the ability to freeze `RLMResults`. If that's the case, we should add the `blocked` tag to this issue.

The API could look something like `-[RLMResults sortedResultsUsingBlock:]`, which would require constructing the accessors for each item in the `RLMResults` and then accessing the properties accessed in the block, but it would allow people to sort in any way they like.

Thoughts @alazier @tgoyne?
",jpsim,tgoyne
1264,2014-12-22 21:32:26,"@alazier 
",tgoyne,alazier
1260,2016-06-05 23:30:32,"Also, fyi, using a subdirectory doesn't seem to work with `config.deleteRealmIfMigrationNeeded = YES;`. Have to `@try{} @catch{}` manually.
",rex-remind101,try
1260,2016-06-05 23:30:32,"Also, fyi, using a subdirectory doesn't seem to work with `config.deleteRealmIfMigrationNeeded = YES;`. Have to `@try{} @catch{}` manually.
",rex-remind101,catch
1253,2014-12-19 20:06:55,"Closes #1163. I'll update the installation instructions once this is merged. @tgoyne @alazier
",jpsim,alazier
1253,2014-12-19 20:06:55,"Closes #1163. I'll update the installation instructions once this is merged. @tgoyne @alazier
",jpsim,tgoyne
1250,2014-12-19 18:57:47,"You're being bit by the joys of autorelease. `[self dataFromLine:line]` is returning an autoreleased object, which doesn't get released until after the quadtree is fully constructed. Wrapping the body of the inner `for` loop in `createTreeDirectlyInRealm` in an `@autoreleasepool` makes the memory usage peak at 24.9 MB on my 5th-gen ipod touch:



After that it crashes on the last line of the input since `dataFromLine:` doesn't handle empty lines.
",tgoyne,autoreleasepool
1246,2014-12-19 01:59:20,"@alazier @tgoyne anything else that should be added in there?
",jpsim,alazier
1246,2014-12-19 01:59:20,"@alazier @tgoyne anything else that should be added in there?
",jpsim,tgoyne
1246,2014-12-31 05:50:22,"@realm/cocoa thoughts on this?
",jpsim,realm
1245,2014-12-18 18:12:10,"I read that 'readonly' properties are not persisted to disk in the cocoa version of realm.

Is there any equivalent to the java @Ignore in order to declare variables that are not to be persistent?
",DidierMalenfant,Ignore
1243,2014-12-18 09:57:31,"This is probably a meta-ticket that will need to be broken up in several tickets, but I think we should look at optimizing a few scenarios regarding to file sizes on device.
- Letting people compact their files in place in Cocoa
- Consider compacting the file automatically after a ~large amount of deletes has taken place — although that may backfire in some scenarios
- Not allocating in as big chunks as we do, to limit the odds of hitting memory limits

@kspangsege @astigsen thoughts?
",timanglade,astigsen
1243,2014-12-18 09:57:31,"This is probably a meta-ticket that will need to be broken up in several tickets, but I think we should look at optimizing a few scenarios regarding to file sizes on device.
- Letting people compact their files in place in Cocoa
- Consider compacting the file automatically after a ~large amount of deletes has taken place — although that may backfire in some scenarios
- Not allocating in as big chunks as we do, to limit the odds of hitting memory limits

@kspangsege @astigsen thoughts?
",timanglade,kspangsege
1243,2014-12-18 19:20:26,"By default Core Data sets [SQLite's auto_vacuum](http://www.sqlite.org/pragma.html#pragma_auto_vacuum) to 1 (full), which means that compaction is done at every transaction commit. This is likely why you never hear about Core Data file sizes ballooning to unacceptable sizes, though it does come at the expense of (typically slightly) more expensive transactions.

@finnschiermer has a PR up for an in-place compaction (https://github.com/realm/realm-core/pull/591), but even once that's done, it requires that there be no other open transactions during the compaction. Which means that PR won't be sufficient to support an auto-compaction like SQLite's.

In the short-term (once https://github.com/realm/realm-core/pull/591 is merged), we could propose to users who have app's that create unusually large realm file sizes to run this on app launch. We'd of course have to run benchmarks before being able to claim it as a viable option, but in my limited tests, `writeCopyToPath:` is actually extremely fast.
",jpsim,finnschiermer
1243,2014-12-19 09:27:21,"Just had a conversation about this with @astigsen and @bmunkholm. Takeaways:
1. We believe that now that we have `invalidate`, there are very few legitimate cases in which you would need to compact files in-place. That said, there will be a few, so we do need to have an in-place compaction method somewhere in our API. If we expose one, we have to assume people will try to use it, and as @tgoyne highlights, it’s very easy to shoot yourself in the foot with the current (& proposed) compaction methods.
2. @astigsen comments that realm/realm-core#591 may not be safe enough. There may be scenarios under which we could endure shadow writes or even corruptions if people try to read the file while it is compacted. We need to design a live compaction mechanism that assumes the file will be read while it is compacted.
3. Once it is live in core, we should expose this safe compaction as an in-place `compact` method on RLMRealm — we can debate hiding this method from our public API if we want.
4. Optionally, we can debate running `compact` automatically after people call `deleteAllObjects`, since that’s the scenarios people seem to hit most often.
",timanglade,bmunkholm
1242,2014-12-17 19:49:19,"Closes #1236

@tgoyne @jpsim 
",alazier,jpsim
1242,2014-12-17 19:49:19,"Closes #1236

@tgoyne @jpsim 
",alazier,tgoyne
1241,2014-12-17 19:22:29,"- [x] ~~Check that the logging Kenneth added works in release and not just in debug?~~
- [x] ~~Make sure log message appears in crash reports developers may get from beta testers~~
- [x] ~~Measure performance impact with Benchmark app, send raw results to @timanglade~~
- [x] ~~@timanglade to write section about performance impact of 0.89.0 — none needed after all!~~
- [x] ~~Somebody else needs to write the rest of the release notes and add them under _drafts on the website repo~~
- [x] ~~Add encryption docs — ready to be merged~~
",timanglade,timanglade
1240,2014-12-17 14:47:42,"I was testing my latest branch in core and wish to know if it compiles with the binding. That required a few minor changes.

@alazier @jpsim @tgoyne 
",kneth,alazier
1240,2014-12-17 14:47:42,"I was testing my latest branch in core and wish to know if it compiles with the binding. That required a few minor changes.

@alazier @jpsim @tgoyne 
",kneth,tgoyne
1240,2014-12-17 14:47:42,"I was testing my latest branch in core and wish to know if it compiles with the binding. That required a few minor changes.

@alazier @jpsim @tgoyne 
",kneth,jpsim
1238,2015-01-21 00:36:40,"What's left to be done:
- [x] documentation
- [x] swift versions for RLMObjectBase methods `primaryKey`, `ignoredProperties` etc. - these currently take/return objc types
- [x] migrations/dynamic interface
- [x] hide `getGenericListPropertyNames` and other private apis
- [x] fix/workaround the auto-linking issue
- [x] comprehensive testing
- [x] walk through Objective-C API and add missing aspects in Swift interface

@jpsim please add other missing items you are aware of.
",alazier,jpsim
1237,2014-12-17 11:03:36,"Max size for binary or string fields in core is 16MB (per @bmunkholm). This should be documented in the cocoa guide (and maybe the cocoa API docs as well).
",timanglade,bmunkholm
1235,2014-12-16 21:10:56,"Fixes https://app.asana.com/0/861870036984/17678329857532. @tgoyne @alazier there _must_ be a more concise way to do this.
",jpsim,alazier
1235,2014-12-16 21:10:56,"Fixes https://app.asana.com/0/861870036984/17678329857532. @tgoyne @alazier there _must_ be a more concise way to do this.
",jpsim,tgoyne
1235,2014-12-19 01:26:38,"@tgoyne @alazier I've updated the wording. Better? If not, please suggest another message.
",jpsim,tgoyne
1231,2014-12-15 22:25:10,"Closes #1225

Cleans up initialization for accessors and static method overrides.

@tgoyne 
",alazier,tgoyne
1230,2014-12-15 19:04:15,"Fixes #1228. Thanks @FredericRuaudel! @tgoyne @alazier 
",jpsim,alazier
1230,2014-12-15 19:04:15,"Fixes #1228. Thanks @FredericRuaudel! @tgoyne @alazier 
",jpsim,tgoyne
1230,2014-12-15 19:04:15,"Fixes #1228. Thanks @FredericRuaudel! @tgoyne @alazier 
",jpsim,FredericRuaudel
1222,2014-12-12 21:51:45,"this should be a no-brainer change. @tgoyne @alazier
",jpsim,alazier
1222,2014-12-12 21:51:45,"this should be a no-brainer change. @tgoyne @alazier
",jpsim,tgoyne
1221,2014-12-12 20:12:39,"Closes #1214.

@jpsim 
",segiddins,jpsim
1220,2014-12-12 18:51:51,"This just add a small performance test for sorting a column of `int`

@tgoyne 
",segiddins,tgoyne
1214,2014-12-12 03:09:09,"@tgoyne what is left to do to make sure performance doesn't regress with future commits?
",alazier,tgoyne
1209,2014-12-10 21:59:07,"Was almost trivial, but rolling back transactions breaks if you create tables after creating link columns so I had to pull the creation of the primary key table to before the columns are updated.

@alazier 
",tgoyne,alazier
1207,2014-12-09 23:17:44,"Dynamic realms aren't cached, so looking in the cache for a dynamic realm is at best a waste of time, and could give the wrong thing in sufficiently weird circumstances.

@alazier 
",tgoyne,alazier
1203,2014-12-09 01:36:57,"AFAICT it's never needed (since RLMRealms with custom schema aren't cached, it shouldn't be possible to have a cached RLMRealm for a path that needs a migration), and removing completely unrelated paths from the cache is actively bad.

@alazier 
",tgoyne,alazier
1200,2014-12-09 01:12:49,"Set the object and array ivars on objects added to Realms to `nil` after reading the values from them, as otherwise the accessors continue to retain objects which are no longer accessible via the API (since the properties return newly created objects, not the objects from the ivars).

Without this, adding an object graph to a Realm without leaking memory is fairly tricky, as you have to break the cycle by nilling ivars directly, and we don't really want to be encouraging people to set ivars on accessors directly (and we were leaking objects from a few tests).

@alazier 
",tgoyne,alazier
1197,2014-12-08 23:58:03,"@kylef has graciously re-parsed the Realm docs using my branch.
",segiddins,kylef
1192,2015-05-22 17:53:28,"Neither of those will accomplish what you're trying to do. The lazy property will only have the appropriate value the first time you access it. Afterwards, once `id` or `type` is modified, `compoundKey` won't be updated.

You could use a mix of `lazy` and `didSet` instead to have the `compoundKey` property be both _derived_ and _stored_:



**Edit (on 24 Jun 2016 by @mrackwitz)**: Please refer to https://github.com/realm/realm-cocoa/issues/1192#issuecomment-110468780 for an updated workaround.
",jpsim,mrackwitz
1192,2015-06-09 19:15:30,"I forgot that Realm won't actually call `willSet` and `didSet` once those objects are persisted, so you'll have to use custom setters:



**Edit (on 24 Jun 2016 by @mrackwitz)**: This post was edited to avoid using `lazy` to reflect the fact that using this on managed properties from Realm Swift is now explicitly forbidden as seen in #3337.
",jpsim,mrackwitz
1185,2015-04-29 20:11:57,"@jpsim should I try re-doing this on top of RealmSwift eventually?
",segiddins,jpsim
1183,2014-12-05 01:49:37,"Fixes #1182 and #1171. @alazier ?
",jpsim,alazier
1181,2014-12-04 22:17:57,"The check for multiple calls doesn't need to be thread-safe as the runtime takes care of that.

@alazier 
",tgoyne,alazier
1181,2014-12-04 22:28:46,"This is no longer thread safe. Please replace the dispatch block with a @synchronized block.
",alazier,synchronized
1180,2014-12-04 19:18:19,"The `+[RLMSchema initialize]` method uses `dispatch_once`. It is only safe to use `dispatch_once` if the block it calls does not throw exceptions. Under various circumstances the block throws exceptions, this causes a crash or segmentation fault (depending on the app). The solution is to replace the use of `dispatch_once` with `@synchronized`.
",iosdevzone,synchronized
1176,2014-12-09 22:58:35,"There were some issues in the sample code that we've now fixed. So I'm closing this issue.

It's still possible that the realm file was corrupt or that the browser has a bug. @GreatApe is investigating and will re-open this ticket if that's the case.
",jpsim,GreatApe
1174,2014-12-03 22:54:41,"Please review @GreatApe @tgoyne @alazier 
",jpsim,alazier
1174,2014-12-03 22:54:41,"Please review @GreatApe @tgoyne @alazier 
",jpsim,tgoyne
1174,2014-12-03 22:54:41,"Please review @GreatApe @tgoyne @alazier 
",jpsim,GreatApe
1172,2014-12-03 18:36:04,"I'd personally love to add a `-[RLMResults map:(RLMObject *item)]` method that could allow performing operations on all objects in an `RLMResults`. This could even be a preferable alternative to freezing an `RLMResults` in most cases. Thoughts, @tgoyne @alazier?
",jpsim,alazier
1172,2014-12-03 18:36:04,"I'd personally love to add a `-[RLMResults map:(RLMObject *item)]` method that could allow performing operations on all objects in an `RLMResults`. This could even be a preferable alternative to freezing an `RLMResults` in most cases. Thoughts, @tgoyne @alazier?
",jpsim,tgoyne
1168,2014-12-01 22:17:38,"GroupedTableView (objc/swift) and swift/TableView examples all do this already. @tgoyne @alazier 
",jpsim,alazier
1168,2014-12-01 22:17:38,"GroupedTableView (objc/swift) and swift/TableView examples all do this already. @tgoyne @alazier 
",jpsim,tgoyne
1167,2014-12-01 18:52:10,"@tgoyne @jpsim 

Closes #1082
",alazier,jpsim
1167,2014-12-01 18:52:10,"@tgoyne @jpsim 

Closes #1082
",alazier,tgoyne
1166,2014-12-01 12:44:28,"Would be great if you could filter in a query based on the count of a to many relationship. See the example below. Right now it gives the following error: Column name @count not found in table


",laptobbe,count
1166,2014-12-01 17:39:07,"> [Company objectsWhere:@""ANY projects.@count > 0""];

Is that equivalent to:

[Company objectsWhere:@""projects[SIZE] > 0""];

On Mon, Dec 1, 2014 at 7:03 AM, JP Simard notifications@github.com wrote:

> We agree, that would be a useful feature and it is being worked on. We'll
> update this issue when we have something to announce.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/1166#issuecomment-65076626.
",astigsen,count
1166,2014-12-01 18:45:24,"@astigsen yes, `[SIZE]` should be equivalent to `@count`, though `@count` is more common.
",jpsim,count
1166,2014-12-09 01:28:11,"I thought we already have core support for this. Am I correct @tgoyne ?
",alazier,tgoyne
1166,2015-06-25 21:29:25,"What's the status here? I'm getting `Property '@count' not found in object of type 'Bottle'` when I try to do `Realm().objects(Wine).filter(""ANY bottles.@count > 0"")`
",ciryon,count
1166,2015-07-14 10:18:21,"Is there any workarounds for the queries like  ""ANY array.@count > 0"".
",kivannc,count
1166,2015-10-25 12:46:37,"This now appears to work in 0.96.1 thanks to the above commits by @bdash.


",rdougan,bdash
1164,2014-11-29 21:11:13,"See https://github.com/CocoaPods/CocoaPods/issues/2875#issuecomment-64964560

\c @jpsim 
",segiddins,jpsim
1163,2014-11-29 15:22:16,"Sorry, I am using @Carthage and v0.87.4 of realm. Can it be that I was linking the Mac Framework?
",pietbrauer,Carthage
1162,2014-11-29 00:06:52,"@alazier @tgoyne 
",jpsim,alazier
1162,2014-11-29 00:06:52,"@alazier @tgoyne 
",jpsim,tgoyne
1161,2014-11-28 23:25:03,"@tgoyne @alazier do you agree that this is a more appropriate behavior?
",jpsim,alazier
1161,2014-11-28 23:25:03,"@tgoyne @alazier do you agree that this is a more appropriate behavior?
",jpsim,tgoyne
1160,2015-01-08 01:48:48,"The last time we spoke about this, we decided to add two methods to improve transparency and performance: `-[RLMResults evaluate]` and `-[RLMResults isEvaluated]`. With these methods, calling `-[RLMResults count]` would never create the tableView and users would have more control over when table views are actually constructed.

Should we create a GitHub issue to implement this, @alazier @tgoyne?
",jpsim,tgoyne
1159,2014-12-10 19:06:40,"To do this safely, you can do your copy within an @autoreleasepool block. If you do this the realm instance will be disposed of at the end of the block, and later requests for a realm will create a new instance.
",alazier,autoreleasepool
1156,2014-11-25 22:42:17,"Also leaves newly created RLMRealm instances without a read transaction as this makes it simple to do so.

Things to bikeshed:
1. The name `endReadTransaction`. I'm not a fan. `close` is wrong since it doesn't actually close the file and anything involving `release` sounds refcounting related.
2. What should `refresh` return when called on a Realm with no read  transaction? Currently it always returns `false`. Maybe it should always return `true`?
3. Do notifications make any sense for realms with no read transaction? Currently they work as usual (except with no notification collapsing because `has_changed()` always returns true when the shared group doesn't have a read lock).

@alazier @cmelchior @emanuelez
",tgoyne,alazier
1156,2014-11-25 22:42:17,"Also leaves newly created RLMRealm instances without a read transaction as this makes it simple to do so.

Things to bikeshed:
1. The name `endReadTransaction`. I'm not a fan. `close` is wrong since it doesn't actually close the file and anything involving `release` sounds refcounting related.
2. What should `refresh` return when called on a Realm with no read  transaction? Currently it always returns `false`. Maybe it should always return `true`?
3. Do notifications make any sense for realms with no read transaction? Currently they work as usual (except with no notification collapsing because `has_changed()` always returns true when the shared group doesn't have a read lock).

@alazier @cmelchior @emanuelez
",tgoyne,cmelchior
1156,2014-11-25 22:42:17,"Also leaves newly created RLMRealm instances without a read transaction as this makes it simple to do so.

Things to bikeshed:
1. The name `endReadTransaction`. I'm not a fan. `close` is wrong since it doesn't actually close the file and anything involving `release` sounds refcounting related.
2. What should `refresh` return when called on a Realm with no read  transaction? Currently it always returns `false`. Maybe it should always return `true`?
3. Do notifications make any sense for realms with no read transaction? Currently they work as usual (except with no notification collapsing because `has_changed()` always returns true when the shared group doesn't have a read lock).

@alazier @cmelchior @emanuelez
",tgoyne,emanuelez
1154,2014-11-25 20:55:02,"They're annoying when there's no internet connection and unlikely to be useful to anyone.

@jpsim 
",tgoyne,jpsim
1152,2014-12-08 16:38:28,"Core needs to expose this information. @tgoyne can elaborate.
",alazier,tgoyne
1151,2014-11-24 19:59:42,"I haven't found other issue related, and I can't seem to replicate this crash. It happens sometimes when the app goes to background and was picked up by crashlytics. I'm just going to leave this here in case someone happens to see the same.

The stack trace:



Line 39 of `MainViewController.m` is an empty line next to `@implementation` btw.
",Orgmir,implementation
1146,2014-11-21 20:07:16,"@tgoyne 

Hopefully fixes #1141
",alazier,tgoyne
1145,2014-11-21 19:31:31,"Fixes #1138. @alazier @tgoyne 
",jpsim,alazier
1145,2014-11-21 19:31:31,"Fixes #1138. @alazier @tgoyne 
",jpsim,tgoyne
1145,2014-12-05 01:05:55,"@alazier @tgoyne any objections to merging this?
",jpsim,alazier
1143,2014-11-21 17:14:49,"@tgoyne @jpsim 
",alazier,jpsim
1143,2014-11-21 17:14:49,"@tgoyne @jpsim 
",alazier,tgoyne
1142,2014-11-21 15:43:12,"@tgoyne 

Fixes #1140
",alazier,tgoyne
1141,2014-11-21 21:19:19,"@tpecht this may be fixed on master with #1146 

Please let us know.
",alazier,tpecht
1137,2014-11-20 18:45:46,"This is a followup fix for the last pr. This explains the weird behavior we saw yesterday where column indexes were not lined up as expected. The current code works as is, but column indexes are left incorrect after using multiple realms with different column orderings, which could led to bugs in the future.

@tgoyne 
",alazier,tgoyne
1136,2014-11-20 16:23:39,"@tgoyne 

Fixes #1125
",alazier,tgoyne
1135,2014-11-19 23:32:49,"We now generate multiple sets of accessors when you have multiple Realms at different paths which have different column ordering.

Fixes #1134 and #1118 

@scriptedSheep this should hopefully resolve your issues. Please let us know if this works.

@tgoyne 
",alazier,scriptedSheep
1135,2014-11-19 23:32:49,"We now generate multiple sets of accessors when you have multiple Realms at different paths which have different column ordering.

Fixes #1134 and #1118 

@scriptedSheep this should hopefully resolve your issues. Please let us know if this works.

@tgoyne 
",alazier,tgoyne
1132,2014-11-21 21:39:35,"fat-finger closed/commented on this by accident. @jpsim will give a full answer soon
",timanglade,jpsim
1128,2014-11-14 22:31:36,"Not sure why this wasn't working for @alazier as it works fine for me.
",tgoyne,alazier
1127,2014-11-14 17:16:00,"Needs the new core binary to be uploaded

Closes #1096 and hopefully other related issues
Closes #1119

@tgoyne 
",alazier,tgoyne
1126,2014-11-14 18:10:54,"@scriptedSheep can you try out his pr #1127 ?

It should hopefully address the lockfile issue and perhaps some of the other crashes you are seeing.
",alazier,scriptedSheep
1124,2014-12-03 00:28:16,"@kspangsege Are you cool with us releasing this in the cocoa binding or should we hold off? /cc @bmunkholm 
",timanglade,bmunkholm
1124,2014-12-03 00:28:16,"@kspangsege Are you cool with us releasing this in the cocoa binding or should we hold off? /cc @bmunkholm 
",timanglade,kspangsege
1124,2014-12-03 11:41:18,"Yes, I am cool with that if Thomas is cool with it. Unfortunately, I
haven't had time yet to review it to any significant depth.

On Wed, Dec 3, 2014 at 1:28 AM, Tim Anglade notifications@github.com
wrote:

> @kspangsege https://github.com/kspangsege Are you cool with us
> releasing this in the cocoa binding or should we hold off? /cc @bmunkholm
> https://github.com/bmunkholm
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/1124#issuecomment-65332018.
",kspangsege,bmunkholm
1124,2014-12-03 11:41:18,"Yes, I am cool with that if Thomas is cool with it. Unfortunately, I
haven't had time yet to review it to any significant depth.

On Wed, Dec 3, 2014 at 1:28 AM, Tim Anglade notifications@github.com
wrote:

> @kspangsege https://github.com/kspangsege Are you cool with us
> releasing this in the cocoa binding or should we hold off? /cc @bmunkholm
> https://github.com/bmunkholm
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/1124#issuecomment-65332018.
",kspangsege,kspangsege
1121,2014-11-13 00:40:41,"@tgoyne @alazier
",jpsim,alazier
1121,2014-11-13 00:40:41,"@tgoyne @alazier
",jpsim,tgoyne
1120,2015-09-27 12:40:24,"i do it like this if i want to store simple types

<pre>
#import ""Contributor.h""
@interface Contributor()
@property (nonatomic, strong) NSData * spectrumPeaksData;
@end
@implementation Contributor
+ (nullable NSDictionary *)defaultPropertyValues {
    return @{@""spectrumPeaksData"":[NSData data]};
}
////////////////////////////////////////////////////////////////////////
#pragma mark - Peaks
////////////////////////////////////////////////////////////////////////
- (void)setSpectrumPeaks:(NSArray *)spectrumPeaks {
    if ([spectrumPeaks count] == 0) {
        self.spectrumPeaksData = [NSData data];
        return;
    }
    self.spectrumPeaksData = [NSKeyedArchiver archivedDataWithRootObject:spectrumPeaks];
}
- (NSArray *)spectrumPeaks {
    if ([self.spectrumPeaksData length] == 0) {
        return nil;
    }
    return [NSKeyedUnarchiver unarchiveObjectWithData:self.spectrumPeaksData];
}
@end
</pre>

alternatively you can cache the unarchive object until you call the set method again, where you invalidate the cache

<pre>
#import ""Contributor.h""
@interface Contributor()
@property (nonatomic, strong) NSData * spectrumPeaksData;
@property (nonatomic, strong) NSArray * spectrumPeaksCache;
@end
@implementation Contributor
+ (nullable NSDictionary *)defaultPropertyValues {
    return @{@""spectrumPeaksData"":[NSData data]};
}
+ (NSArray *)ignoredProperties {
    return @[@""spectrumPeaksCache""];
}
////////////////////////////////////////////////////////////////////////
#pragma mark - Peaks
////////////////////////////////////////////////////////////////////////
- (void)setSpectrumPeaks:(NSArray *)spectrumPeaks {
    self.spectrumPeaksCache = nil;
    if ([spectrumPeaks count] == 0) {
        self.spectrumPeaksData = [NSData data];
        return;
    }
    self.spectrumPeaksData = [NSKeyedArchiver archivedDataWithRootObject:spectrumPeaks];
}
- (NSArray *)spectrumPeaks {
    if ([self.spectrumPeaksData length] == 0) {
        return nil;
    }
    self.spectrumPeaksCache = [NSKeyedUnarchiver unarchiveObjectWithData:self.spectrumPeaksData];
    return self.spectrumPeaksCache;
}
@end
</pre>
",peterpaulis,implementation
1120,2015-09-27 12:40:24,"i do it like this if i want to store simple types

<pre>
#import ""Contributor.h""
@interface Contributor()
@property (nonatomic, strong) NSData * spectrumPeaksData;
@end
@implementation Contributor
+ (nullable NSDictionary *)defaultPropertyValues {
    return @{@""spectrumPeaksData"":[NSData data]};
}
////////////////////////////////////////////////////////////////////////
#pragma mark - Peaks
////////////////////////////////////////////////////////////////////////
- (void)setSpectrumPeaks:(NSArray *)spectrumPeaks {
    if ([spectrumPeaks count] == 0) {
        self.spectrumPeaksData = [NSData data];
        return;
    }
    self.spectrumPeaksData = [NSKeyedArchiver archivedDataWithRootObject:spectrumPeaks];
}
- (NSArray *)spectrumPeaks {
    if ([self.spectrumPeaksData length] == 0) {
        return nil;
    }
    return [NSKeyedUnarchiver unarchiveObjectWithData:self.spectrumPeaksData];
}
@end
</pre>

alternatively you can cache the unarchive object until you call the set method again, where you invalidate the cache

<pre>
#import ""Contributor.h""
@interface Contributor()
@property (nonatomic, strong) NSData * spectrumPeaksData;
@property (nonatomic, strong) NSArray * spectrumPeaksCache;
@end
@implementation Contributor
+ (nullable NSDictionary *)defaultPropertyValues {
    return @{@""spectrumPeaksData"":[NSData data]};
}
+ (NSArray *)ignoredProperties {
    return @[@""spectrumPeaksCache""];
}
////////////////////////////////////////////////////////////////////////
#pragma mark - Peaks
////////////////////////////////////////////////////////////////////////
- (void)setSpectrumPeaks:(NSArray *)spectrumPeaks {
    self.spectrumPeaksCache = nil;
    if ([spectrumPeaks count] == 0) {
        self.spectrumPeaksData = [NSData data];
        return;
    }
    self.spectrumPeaksData = [NSKeyedArchiver archivedDataWithRootObject:spectrumPeaks];
}
- (NSArray *)spectrumPeaks {
    if ([self.spectrumPeaksData length] == 0) {
        return nil;
    }
    self.spectrumPeaksCache = [NSKeyedUnarchiver unarchiveObjectWithData:self.spectrumPeaksData];
    return self.spectrumPeaksCache;
}
@end
</pre>
",peterpaulis,end
1120,2015-09-27 12:40:24,"i do it like this if i want to store simple types

<pre>
#import ""Contributor.h""
@interface Contributor()
@property (nonatomic, strong) NSData * spectrumPeaksData;
@end
@implementation Contributor
+ (nullable NSDictionary *)defaultPropertyValues {
    return @{@""spectrumPeaksData"":[NSData data]};
}
////////////////////////////////////////////////////////////////////////
#pragma mark - Peaks
////////////////////////////////////////////////////////////////////////
- (void)setSpectrumPeaks:(NSArray *)spectrumPeaks {
    if ([spectrumPeaks count] == 0) {
        self.spectrumPeaksData = [NSData data];
        return;
    }
    self.spectrumPeaksData = [NSKeyedArchiver archivedDataWithRootObject:spectrumPeaks];
}
- (NSArray *)spectrumPeaks {
    if ([self.spectrumPeaksData length] == 0) {
        return nil;
    }
    return [NSKeyedUnarchiver unarchiveObjectWithData:self.spectrumPeaksData];
}
@end
</pre>

alternatively you can cache the unarchive object until you call the set method again, where you invalidate the cache

<pre>
#import ""Contributor.h""
@interface Contributor()
@property (nonatomic, strong) NSData * spectrumPeaksData;
@property (nonatomic, strong) NSArray * spectrumPeaksCache;
@end
@implementation Contributor
+ (nullable NSDictionary *)defaultPropertyValues {
    return @{@""spectrumPeaksData"":[NSData data]};
}
+ (NSArray *)ignoredProperties {
    return @[@""spectrumPeaksCache""];
}
////////////////////////////////////////////////////////////////////////
#pragma mark - Peaks
////////////////////////////////////////////////////////////////////////
- (void)setSpectrumPeaks:(NSArray *)spectrumPeaks {
    self.spectrumPeaksCache = nil;
    if ([spectrumPeaks count] == 0) {
        self.spectrumPeaksData = [NSData data];
        return;
    }
    self.spectrumPeaksData = [NSKeyedArchiver archivedDataWithRootObject:spectrumPeaks];
}
- (NSArray *)spectrumPeaks {
    if ([self.spectrumPeaksData length] == 0) {
        return nil;
    }
    self.spectrumPeaksCache = [NSKeyedUnarchiver unarchiveObjectWithData:self.spectrumPeaksData];
    return self.spectrumPeaksCache;
}
@end
</pre>
",peterpaulis,interface
1120,2015-09-27 12:40:24,"i do it like this if i want to store simple types

<pre>
#import ""Contributor.h""
@interface Contributor()
@property (nonatomic, strong) NSData * spectrumPeaksData;
@end
@implementation Contributor
+ (nullable NSDictionary *)defaultPropertyValues {
    return @{@""spectrumPeaksData"":[NSData data]};
}
////////////////////////////////////////////////////////////////////////
#pragma mark - Peaks
////////////////////////////////////////////////////////////////////////
- (void)setSpectrumPeaks:(NSArray *)spectrumPeaks {
    if ([spectrumPeaks count] == 0) {
        self.spectrumPeaksData = [NSData data];
        return;
    }
    self.spectrumPeaksData = [NSKeyedArchiver archivedDataWithRootObject:spectrumPeaks];
}
- (NSArray *)spectrumPeaks {
    if ([self.spectrumPeaksData length] == 0) {
        return nil;
    }
    return [NSKeyedUnarchiver unarchiveObjectWithData:self.spectrumPeaksData];
}
@end
</pre>

alternatively you can cache the unarchive object until you call the set method again, where you invalidate the cache

<pre>
#import ""Contributor.h""
@interface Contributor()
@property (nonatomic, strong) NSData * spectrumPeaksData;
@property (nonatomic, strong) NSArray * spectrumPeaksCache;
@end
@implementation Contributor
+ (nullable NSDictionary *)defaultPropertyValues {
    return @{@""spectrumPeaksData"":[NSData data]};
}
+ (NSArray *)ignoredProperties {
    return @[@""spectrumPeaksCache""];
}
////////////////////////////////////////////////////////////////////////
#pragma mark - Peaks
////////////////////////////////////////////////////////////////////////
- (void)setSpectrumPeaks:(NSArray *)spectrumPeaks {
    self.spectrumPeaksCache = nil;
    if ([spectrumPeaks count] == 0) {
        self.spectrumPeaksData = [NSData data];
        return;
    }
    self.spectrumPeaksData = [NSKeyedArchiver archivedDataWithRootObject:spectrumPeaks];
}
- (NSArray *)spectrumPeaks {
    if ([self.spectrumPeaksData length] == 0) {
        return nil;
    }
    self.spectrumPeaksCache = [NSKeyedUnarchiver unarchiveObjectWithData:self.spectrumPeaksData];
    return self.spectrumPeaksCache;
}
@end
</pre>
",peterpaulis,property
1120,2016-01-17 22:20:26,"I would love to help get this out sooner. @timanglade @jpsim I have some familiarity with the objective-c part of the codebase. If I can get some guidance as to where to start and what approach to take (at a high level) I'm happy to get the ball rolling on this.
",andrewjl,timanglade
1118,2014-11-13 00:57:43,"Thanks for the info @scriptedSheep, as I mentioned in #1105, we're working on a debug version of the framework to help troubleshoot this.
",jpsim,scriptedSheep
1116,2014-11-11 19:37:49,"@tgoyne @alazier. Inspired by #1110.
",jpsim,alazier
1116,2014-11-11 19:37:49,"@tgoyne @alazier. Inspired by #1110.
",jpsim,tgoyne
1110,2014-11-10 22:56:27,"@tgoyne @alazier let me know if it makes sense to expand on these simple examples. Perhaps by having Company/Employee models with ""fullTimeEmployees"" and ""partTimeEmployees"" to truly highlight what's possible with inverse relationships.
",jpsim,alazier
1110,2014-11-10 22:56:27,"@tgoyne @alazier let me know if it makes sense to expand on these simple examples. Perhaps by having Company/Employee models with ""fullTimeEmployees"" and ""partTimeEmployees"" to truly highlight what's possible with inverse relationships.
",jpsim,tgoyne
1107,2014-11-07 23:06:58,"@tgoyne 
",jpsim,tgoyne
1107,2014-11-08 01:14:30,"@tgoyne mind taking another look?
",jpsim,tgoyne
1106,2014-11-07 19:55:18,"Adds less than 20 lines to each file, but demonstrates how to have sections in a table view. @yoshyosh 
",jpsim,yoshyosh
1106,2014-11-11 20:45:53,"Latest commit
- adds a separate GroupedTableView example so we can keep the dead simple TableView example
- only re-queries each section when a change notification is received instead of on every object access
- uses current date instead of random date

@alazier @yoshyosh 
",jpsim,yoshyosh
1105,2014-11-07 18:15:52,"Hi @scriptedSheep, could you please share your code to help us reproduce this issue?

My first two guesses would be that there's an `RLMRealm` instance being created outside the autorelease pool, but that gets deallocated inside the pool; or that there is a bug in Realm's core.

But these are just guesses from the crash log. Seeing the code to reproduce this issue will help understand what's happening.
",jpsim,scriptedSheep
1103,2015-03-20 14:20:31,"yes, something like @distinctUnionOfObjects is badly needed
",gabrielnika,distinctUnionOfObjects
1103,2015-07-10 17:31:56,"Here's an updated version of the extension above, using Swift 2.0 (and Swift 2.0 compatible version of Realm)

@jpsim and @segiddins  - thoughts on this implementation?


",kevinmlong,segiddins
1103,2015-10-29 19:04:27,"I'm kinda confused here. :confounded:  
I use the latest version of RealmSwift & when I try to use `@distinctUnionOfObjects` in `valueForKeyPath` I get this error:



On [Realm's NSPredicate Cheatsheet](https://realm.io/news/nspredicate-cheatsheet/) it's documented as an available feature & yet here this issue is still open.

Am I  doing something wrong or this feature is still not in production?
",kexoth,distinctUnionOfObjects
1103,2015-10-29 19:08:33,"@kexoth We don't support `@distinctUnionOfObjects` in queries yet, everything with the pink dot next to it is what we currently support.
",kishikawakatsumi,distinctUnionOfObjects
1103,2015-12-02 20:37:38,"Support for this has been added in Realm's core, so it's no longer blocked. We do need to implement it in cocoa though, probably via `@distinctUnionOfObjects`.
",jpsim,distinctUnionOfObjects
1103,2016-11-29 18:10:01,"Work on this is ongoing here: realm/realm-object-store#235.

However, we still need to design how this feature should be exposed in our Objective-C and Swift APIs. Unfortunately, NSPredicate's `@distinctUnionOfObjects` isn't appropriate as that only returns the unique values of the property being ""uniqued"" (e.g. `@distinctUnionOfObjects.name` returning an array of unique names, not one object for each unique name).

A new method on `Results` (e.g. `extension Results { func distinct(property: String) -> Self }`) is an obvious way to expose this, but like I said, we haven't discussed it internally and no one from the community has stepped up to make a proposal.",jpsim,distinctUnionOfObjects
1102,2014-11-06 21:44:43,"Agreed, likely a duplicate of #1085, fixed in #1086. @unicorns can you try running from our current master branch?
",jpsim,unicorns
1100,2014-11-05 20:55:52,"@tgoyne 

Hopefully fixes #1095
",alazier,tgoyne
1093,2014-11-01 19:42:02,"Here is the RLMObject

@interface UXloggerRecord : RLMObject
@property NSString\* json;
@property double time;
@end

The exception clearly comes from [RLMRealm deleteObjects:], the call stack is clear. There is only 1 call to deleteObjects in the code.



The array is an array of records that came from a query and were copied to an NSMutableArray for processing prior to deletion. Could this be related?
",pauluxprobe,end
1093,2014-11-01 19:42:02,"Here is the RLMObject

@interface UXloggerRecord : RLMObject
@property NSString\* json;
@property double time;
@end

The exception clearly comes from [RLMRealm deleteObjects:], the call stack is clear. There is only 1 call to deleteObjects in the code.



The array is an array of records that came from a query and were copied to an NSMutableArray for processing prior to deletion. Could this be related?
",pauluxprobe,interface
1093,2014-11-01 19:42:02,"Here is the RLMObject

@interface UXloggerRecord : RLMObject
@property NSString\* json;
@property double time;
@end

The exception clearly comes from [RLMRealm deleteObjects:], the call stack is clear. There is only 1 call to deleteObjects in the code.



The array is an array of records that came from a query and were copied to an NSMutableArray for processing prior to deletion. Could this be related?
",pauluxprobe,property
1091,2014-10-31 21:59:18,"We've had a few requests for this functionality pop up and there's no reason not to expose it.

@alazier 
",tgoyne,alazier
1090,2014-10-31 18:54:12,"@astigsen just ran into this issue /cc @tgoyne @alazier 
",jpsim,astigsen
1090,2014-10-31 18:54:12,"@astigsen just ran into this issue /cc @tgoyne @alazier 
",jpsim,alazier
1090,2014-10-31 18:54:12,"@astigsen just ran into this issue /cc @tgoyne @alazier 
",jpsim,tgoyne
1090,2014-11-02 23:48:31,"If the directory does not exist, this will create it. On @astigsen, we had to go create the directory ourselves for his test app with the latest release.
",jpsim,astigsen
1089,2014-11-20 00:33:33,"ready to merge @timanglade ?
",alazier,timanglade
1088,2014-10-30 15:24:48,"WIP - no need to review right now

@jpsim @yoshyosh 

Builds on the editing PR and shows arrays in popup windows, like tooltips.
",GreatApe,yoshyosh
1088,2014-10-30 15:24:48,"WIP - no need to review right now

@jpsim @yoshyosh 

Builds on the editing PR and shows arrays in popup windows, like tooltips.
",GreatApe,jpsim
1087,2014-10-30 08:49:04,"Sorry to hear it isn't working as expected! 

When you say you can't define relationships, what do you mean? 

Are your model classes in separate files and they can't import each other? And it doesn't help to make a forward declaration with @class? 

Could you share the parts of your code that don't seem to be working? 
",GreatApe,class
1087,2014-10-30 11:57:53,"Thank you for the quick response @GreatApe, I mean that to-one and to-many relationships does not seem to work. below is a snippet of my code:



But then both the declaration of the Artist and the Album throw errors indicating that the classes do not exist. I tried forward declaration of the class as well and no luck there. When trying this line `@property RLMArray<Track> *tracks;` in the Album model I get the error that the protocol has not be defined.
",marlowcharite,property
1087,2014-10-30 16:46:43,"@alazier I have everything declared in their own respective files and then I import them when I need them. But no dice. I don't want to have every @interface and @implementation for multiple model classes in one file
",marlowcharite,implementation
1087,2014-10-30 16:46:43,"@alazier I have everything declared in their own respective files and then I import them when I need them. But no dice. I don't want to have every @interface and @implementation for multiple model classes in one file
",marlowcharite,interface
1086,2014-10-29 19:15:22,"Closes #1085

@tgoyne 
",alazier,tgoyne
1084,2014-10-29 12:39:26,"@bmunkholm @jpsim 
Some references to the docs from the exceptions were outdated. Also clarified one of them, about arrays.
",GreatApe,bmunkholm
1084,2014-10-29 12:39:26,"@bmunkholm @jpsim 
Some references to the docs from the exceptions were outdated. Also clarified one of them, about arrays.
",GreatApe,jpsim
1083,2014-10-28 23:39:24,"Alex mentioned something like this should be added to the RLMArray docs @jpsim @alazier @tgoyne 
",yoshyosh,jpsim
1083,2014-10-28 23:39:24,"Alex mentioned something like this should be added to the RLMArray docs @jpsim @alazier @tgoyne 
",yoshyosh,alazier
1083,2014-10-28 23:39:24,"Alex mentioned something like this should be added to the RLMArray docs @jpsim @alazier @tgoyne 
",yoshyosh,tgoyne
1072,2014-10-24 18:52:27,"Link to the existing objects in the Realm if they're of the correct type and in the Realm, and copy them otherwise.

I'm not totally convinced this is the right behavior, but I spent a depressingly long time trying to figure out why some tests I wrote weren't working before I realized that I was expecting this behavior rather than it linking to copies of the objects passed in the literal.

Either way there needs to be tests, as changing this didn't break any of the existing tests...

@alazier @jpsim 
",tgoyne,alazier
1072,2014-10-24 18:52:27,"Link to the existing objects in the Realm if they're of the correct type and in the Realm, and copy them otherwise.

I'm not totally convinced this is the right behavior, but I spent a depressingly long time trying to figure out why some tests I wrote weren't working before I realized that I was expecting this behavior rather than it linking to copies of the objects passed in the literal.

Either way there needs to be tests, as changing this didn't break any of the existing tests...

@alazier @jpsim 
",tgoyne,jpsim
1070,2014-10-23 23:05:31,"@alazier @tgoyne 
This takes care of the race condition in yosemite, that causes the browser to open with an empty window
",GreatApe,alazier
1070,2014-10-23 23:05:31,"@alazier @tgoyne 
This takes care of the race condition in yosemite, that causes the browser to open with an empty window
",GreatApe,tgoyne
1069,2014-10-23 22:57:23,"@jpsim  @GreatApe 
",alazier,jpsim
1069,2014-10-23 22:57:23,"@jpsim  @GreatApe 
",alazier,GreatApe
1066,2014-10-22 23:07:23,"Following a brief conversion with @jpsim on Twitter (https://twitter.com/simjp/status/525059086614663168), here are the things I think Realm will need in order to properly support being wrapped in an NSDocument on OS X (and potentially UIDocument on iOS):
1. Some indicator of whether the realm has changes that are yet to be saved to disk (is this possible?)
2. If 1 is possible, some method of flushing said changes to disk (when the user hits Apple-S)
3. NSDocument generally expects to be able to pick the document representation up off disk and move it somewhere else — it's probably possible to do that ourselves, but we would need a method of ensuring a realm is flushed to disk, then closed before moving the file elsewhere. It's possible some kind of realm to realm migration/copy might be a better option here (essentially atomically copying the contents of the realm to another location)
4. It seems like the realm file is only created after the first transaction is committed? There would need to be an option to initialise an empty realm on disk so that NSDocument is happy (it expects to be able to locate a file for the document after saving)

There's really two scenarios here that I'd love to see supported:
1. The realm file itself is the document (flat NSDocument)
2. The realm file is inside a document bundle

I'll have a bit more of a think about what else is missing — my early experiments with getting this working weren't particularly successful, but I haven't had much time to dedicate to it yet.
",tonyarnold,jpsim
1065,2014-10-22 22:09:04,"See the tests for examples of use. The same syntax could be applied to other things like sorting and querying.

@alazier 
",tgoyne,alazier
1064,2014-10-22 20:03:04,"@tgoyne 
",alazier,tgoyne
1062,2015-05-06 09:51:18,"Hello What exactly do you mean, using the RLMCollection?

I tryied changing:
`@property RLMArray<User> *followers;`

with
`@property RLMArray<User, RLMCollection> *followers;`

But Realm crashes with the error message: 
`Terminating app due to uncaught exception 'RLMException', reason: ''User><RLMCollection' is not supported as an RLMArray object type. RLMArrays can only contain instances of RLMObject subclasses. See http://realm.io/docs/cocoa/#to-many for more information.`
",martinprot,property
1059,2014-10-21 19:39:48,"Basic functionality for accessing inverse relashionships.

Closes #677

@tgoyne 
",alazier,tgoyne
1056,2014-10-22 10:10:50,"@jpsim @astigsen @tgoyne @alazier 

Here's a PDF explaining the method call flow and how the menus are constructed:

https://www.dropbox.com/s/dln5bdx3zg463xk/RealmBrowserEditingFlows.pdf?dl=0
",GreatApe,astigsen
1056,2014-10-22 10:10:50,"@jpsim @astigsen @tgoyne @alazier 

Here's a PDF explaining the method call flow and how the menus are constructed:

https://www.dropbox.com/s/dln5bdx3zg463xk/RealmBrowserEditingFlows.pdf?dl=0
",GreatApe,jpsim
1056,2014-10-22 10:10:50,"@jpsim @astigsen @tgoyne @alazier 

Here's a PDF explaining the method call flow and how the menus are constructed:

https://www.dropbox.com/s/dln5bdx3zg463xk/RealmBrowserEditingFlows.pdf?dl=0
",GreatApe,alazier
1056,2014-10-22 10:10:50,"@jpsim @astigsen @tgoyne @alazier 

Here's a PDF explaining the method call flow and how the menus are constructed:

https://www.dropbox.com/s/dln5bdx3zg463xk/RealmBrowserEditingFlows.pdf?dl=0
",GreatApe,tgoyne
1056,2014-10-28 15:27:51,"Hello, it would be great if someone could take a look at this. It adds some pretty basic functionality to the Browser, i.e. actual editing...

@astigsen @yoshyosh @alazier @jpsim 
",GreatApe,astigsen
1056,2014-10-28 15:27:51,"Hello, it would be great if someone could take a look at this. It adds some pretty basic functionality to the Browser, i.e. actual editing...

@astigsen @yoshyosh @alazier @jpsim 
",GreatApe,alazier
1056,2014-10-28 15:27:51,"Hello, it would be great if someone could take a look at this. It adds some pretty basic functionality to the Browser, i.e. actual editing...

@astigsen @yoshyosh @alazier @jpsim 
",GreatApe,yoshyosh
1056,2014-10-28 15:27:51,"Hello, it would be great if someone could take a look at this. It adds some pretty basic functionality to the Browser, i.e. actual editing...

@astigsen @yoshyosh @alazier @jpsim 
",GreatApe,jpsim
1056,2014-11-04 10:59:53,"Has anyone had the opportunity to have a look at this? It would be nice to get this in, since editing is an important function. 

Also, my current drag-and-drop branch builds on this.

I'd be happy to go through it and explain how it works!

@alazier @jpsim @yoshyosh
",GreatApe,yoshyosh
1056,2014-11-04 10:59:53,"Has anyone had the opportunity to have a look at this? It would be nice to get this in, since editing is an important function. 

Also, my current drag-and-drop branch builds on this.

I'd be happy to go through it and explain how it works!

@alazier @jpsim @yoshyosh
",GreatApe,alazier
1056,2014-11-04 10:59:53,"Has anyone had the opportunity to have a look at this? It would be nice to get this in, since editing is an important function. 

Also, my current drag-and-drop branch builds on this.

I'd be happy to go through it and explain how it works!

@alazier @jpsim @yoshyosh
",GreatApe,jpsim
1055,2014-10-21 14:49:18,"It makes Realm.framework have a hard dependency on the Swift runtime, which breaks the browser and OS X example (and setting Embedded Content Contains Swift Code to Yes was not sufficient to fix them).

@alazier 
",tgoyne,alazier
1054,2014-10-21 09:58:16,"Hi. I have some problem with a JSON from Facebook Graph API.
I want to store this parameter
""from"": {
          ""name"": ""A Name"", 
          ""id"": ""1020300597153800""
        },

in a class that contain this two property:
@property NSString *name;
@property NSString *id;

but the app crash with this error:
Terminating app due to uncaught exception 'RLMException', reason: 'Invalid value '{
    id = 1020300597153800;
    name = ""A Name"";
}' for property 'from''

I think the error is due to the fact that id in objective-c is a predefined type, but in your example http://realm.io/docs/cocoa/0.82.0/#example you use a variable called ""id"".

How can I fix? I can not change the name of the variable, because the parsing is done automatically (and the names of the model and the JSON file must match).
",Codeido,property
1053,2014-10-20 23:39:55,"@alazier 
",tgoyne,alazier
1046,2015-11-13 16:39:04,"@chrism21 


",jpsim,chrism21
1046,2016-02-25 17:34:06,"@cmajordev sorry I never saw your last message. `RLMResults` conforms to `SequenceType` if you're using `RLMSupport.swift` as we recommend in our installation instructions: https://realm.io/docs/objc/latest/#installation

`flatMap` is defined on `SequenceType`.

@DHidee66 I don't know, this is the cocoa repo. You can file issues towards the realm-js repo for questions like that: https://github.com/realm/realm-js/issues/new
",jpsim,DHidee66
1044,2014-10-18 02:57:15,"I have a repo containing a project that replicates the error at: https://github.com/javierjulio/realm-issues. The iOS project was built on Yosemite (updated last night), Xcode 6.0.1, and using Realm 0.86.3. I've noticed this happen when I'm creating a default object and saving it to the Realm but only making sure I have one instance of that object ever saved. In my case I have an app where we'd expose that app to the user to allow them to create more but for now we aren't. So to proceed with that I ended up creating a service in the repo I linked earlier that had this:



I'm using a Service class here since I need to pass in the realm so I can do tests. I have a separate issue where if I try to override RLMRealm.defaultRealm (test target) I get an ambiguous error if I reference it in my app target code. So I avoid doing that by using service classes where I can pass the realm in to do tests.

In the example service above I sporadically get a swift dynamic cast conditional error (most of the time). I thought maybe if I save an object to Realm it might not be immediately available to query but in a twitter conversation with @jpsim this shouldn't be the case. I'm not sure if that's the problem but it came to mind so I tried writing the method a different way, and this solution seems to always work (tests always pass):


",javierjulio,jpsim
1043,2014-10-17 20:54:36,"We unfortunately can't support them, so throw an exception when they're encountered during schema generation rather than failing in weird ways when the user tries to actually use them.

Closes #1036.

@alazier @jpsim 
",tgoyne,alazier
1043,2014-10-17 20:54:36,"We unfortunately can't support them, so throw an exception when they're encountered during schema generation rather than failing in weird ways when the user tries to actually use them.

Closes #1036.

@alazier @jpsim 
",tgoyne,jpsim
1042,2014-10-17 20:48:29,"Fixes #1029 

@tgoyne 
",alazier,tgoyne
1042,2014-10-17 21:21:02,"@eni9889 can you try this out to see if this resolves your issue? It may also undo some of the changes made to fix #928 as we need NSNull to be used to indicate that a property should be nulled out rather than ignored.
",alazier,eni9889
1042,2014-10-17 22:27:01,"Giving this a go now will update. Seems to work perfectly. Merge time? @alazier @tgoyne 

**_Update**_
On second thought the



Is more annoying than the issue this update was trying to solve.  In any case there should be a way to handle partial updates and optional properties. Thoughts?

**_Update 2**_
I fixed this issue for now by adding:


",eni9889,tgoyne
1041,2014-10-17 18:43:13,"Thanks to @alloy for this fix. I've confirmed it works locally. Original PR here #1037, but couldn't be merged directly because CLA.

Fixes #981.

![image](https://cloud.githubusercontent.com/assets/474794/4684107/3423529c-562d-11e4-8716-3069c86ae841.png)
",jpsim,alloy
1040,2014-10-17 17:43:44,"Setters return void, not id.

Closes #1033 and #1038.

@alazier 
",tgoyne,alazier
1038,2014-10-17 13:28:56,"Hi I've an RLMObject with a properties which is an array of another RLMObject (@property RLMArray <MyObject> *list).
Now from a query I get an RLMArray with my results and I would to assign this list as value of .list property. However when I try it in:

static void RLMSuperSet(RLMObject *obj, NSString *propName, id val).
http://i.imgur.com/jP4gtg0.png

Where am I wrong? Should I use removeAllObjects + for { ...addObject:} for each item I would to insert into my RLMArray?
",malcommac,property
1032,2014-10-16 17:22:17,"Doesn't switch to rolling back on schema initialization errors since that conflicts with the migrations rework.

@alazier @jpsim 
",tgoyne,alazier
1032,2014-10-16 17:22:17,"Doesn't switch to rolling back on schema initialization errors since that conflicts with the migrations rework.

@alazier @jpsim 
",tgoyne,jpsim
1031,2014-10-16 16:46:55,"@alazier @jpsim 
",tgoyne,alazier
1031,2014-10-16 16:46:55,"@alazier @jpsim 
",tgoyne,jpsim
1030,2014-10-16 16:24:53,"In-memory Realms were previously broken when used across multiple threads. This change now uses writelogs with in-memory Realms to fix this issue.

Then interface for in-memory realm creation has also changed. 

@tgoyne @jpsim 
",alazier,jpsim
1030,2014-10-16 16:24:53,"In-memory Realms were previously broken when used across multiple threads. This change now uses writelogs with in-memory Realms to fix this issue.

Then interface for in-memory realm creation has also changed. 

@tgoyne @jpsim 
",alazier,tgoyne
1027,2014-10-16 01:03:40,"As requested.

Usage:
1. Build with `sh build.sh ios-dynamic`
2. Add `build/ios-dynamic/Realm.framework` to the application project
3. Add `libc++.dylib` to the 'Link Binary With Libraries' build phase
4. Add a 'Copy Files' build phase, set destination to 'Frameworks', and add `Realm.framework`

@alazier @jpsim @timanglade 
",tgoyne,alazier
1027,2014-10-16 01:03:40,"As requested.

Usage:
1. Build with `sh build.sh ios-dynamic`
2. Add `build/ios-dynamic/Realm.framework` to the application project
3. Add `libc++.dylib` to the 'Link Binary With Libraries' build phase
4. Add a 'Copy Files' build phase, set destination to 'Frameworks', and add `Realm.framework`

@alazier @jpsim @timanglade 
",tgoyne,timanglade
1027,2014-10-16 01:03:40,"As requested.

Usage:
1. Build with `sh build.sh ios-dynamic`
2. Add `build/ios-dynamic/Realm.framework` to the application project
3. Add `libc++.dylib` to the 'Link Binary With Libraries' build phase
4. Add a 'Copy Files' build phase, set destination to 'Frameworks', and add `Realm.framework`

@alazier @jpsim @timanglade 
",tgoyne,jpsim
1026,2014-10-15 21:58:33,"Changes to migration api to ensure we are always persisting the correct version. You now set a schema version and migration block and migrations are automatically applied as needed.

Also added apis for adding and deleting objects during a migration.

@tgoyne @jpsim 
",alazier,jpsim
1026,2014-10-15 21:58:33,"Changes to migration api to ensure we are always persisting the correct version. You now set a schema version and migration block and migrations are automatically applied as needed.

Also added apis for adding and deleting objects during a migration.

@tgoyne @jpsim 
",alazier,tgoyne
1026,2014-10-16 19:03:16,"It's conceptually confusing to me that `setSchemaVersion:withMigrationBlock:` is global but `migrateRealmAtPath:` takes a path. @tgoyne just explained this to me, but it still feels odd.

Otherwise, the new features in this PR are certainly welcome. :+1:
",jpsim,tgoyne
1026,2014-10-16 20:56:47,"No, this approach makes sense to me now, especially given that models are global, so it follows that their migrations should be as well, whereas you may want more control over _when_ different realms are migrated.

You get my :+1: on this. As a side-note, what are your thoughts on freezing 0.87.0 after this PR so we can focus on making `realm.io/docs` changes all at once /cc @tgoyne. There are already quite a few conceptual changes.
",jpsim,tgoyne
1026,2014-10-16 22:33:12,"Anything else @tgoyne ?
",alazier,tgoyne
1023,2014-10-15 18:50:38,"Cuts the init time when there's a cached RLMRealm for a different thread from 3ms to 1.2ms.

Most of the remaining runtime is spent on validating that the table schema matches the object schema, which can probably be skipped, but not touching that file to avoid conflicts with other stuff in progress.

@alazier 
",tgoyne,alazier
1022,2014-10-15 16:17:11,"@scinfu what's happening here is CocoaPods is downloading a pre-built binary of Realm's core C++ database engine, and part of that step is failing. One way to resolve this is to simply delete the temporary download directory (`rm -rf /tmp/core_bin`) and run `pod install` again.

@alazier @tgoyne this happens on CI occasionally as well... do you have any ideas to make this more robust?
",jpsim,alazier
1022,2014-10-15 16:17:11,"@scinfu what's happening here is CocoaPods is downloading a pre-built binary of Realm's core C++ database engine, and part of that step is failing. One way to resolve this is to simply delete the temporary download directory (`rm -rf /tmp/core_bin`) and run `pod install` again.

@alazier @tgoyne this happens on CI occasionally as well... do you have any ideas to make this more robust?
",jpsim,tgoyne
1020,2014-10-15 00:33:31,"Not sure this is actually a net improvement. It eliminates `RLMSetValueUnique` and `verifyPrimaryKeyUniqueness` (and the equivalent core functionality for that is probably much faster), but inserting new rows in a table with a PK is kinda awkward.

Requires a new core release for the tests to pass.

@alazier 
",tgoyne,alazier
1017,2014-10-14 18:32:13,"Safer alternative to #971 until we respond appropriately to deleted Realm files.

Fixes #967

@tgoyne @jpsim 
",alazier,jpsim
1017,2014-10-14 18:32:13,"Safer alternative to #971 until we respond appropriately to deleted Realm files.

Fixes #967

@tgoyne @jpsim 
",alazier,tgoyne
1011,2014-10-14 00:38:59,"Ensure that the order of properties in the object schema matches the order of columns, as the validation code for setting link properties assumes that they match.

@alazier 
",tgoyne,alazier
1010,2014-10-13 23:29:06,"@tgoyne @jpsim @GreatApe 
",alazier,jpsim
1010,2014-10-13 23:29:06,"@tgoyne @jpsim @GreatApe 
",alazier,tgoyne
1010,2014-10-13 23:29:06,"@tgoyne @jpsim @GreatApe 
",alazier,GreatApe
1009,2014-10-13 20:49:48,"Tries to test the schema initialization with every permutation of orderings for the relevant classes. I failed to find a way to reproduce any of the issues reported post-0.86.3, but this does at least fail without the fixes in both 0.86.1 and 0.86.3, both of which previously had no regression tests.

@alazier 
",tgoyne,alazier
1007,2014-10-10 23:40:00,"I was going to complain about how suboptimal #1005 was due to using the public API but then decided to try to make the public API not so suboptimal instead. Makes `firstObject` and `lastObject` as much as twice as fast by ensuring that the `TableView` is created before we check the count, fast enumeration ~10% faster by using __unsafe_unretained in useful places, and `objectAtIndex:` ~30% faster by caching the objectSchema rather than looking it up on every access.

@alazier 
",tgoyne,alazier
1005,2014-10-10 21:39:42,"Allows users to get an NSArray of instantiated accessors. I think the naming here makes sense as it pairs nicely with `objectAtIndex:` which is our other accessor creation method.

@tgoyne @jpsim 
",alazier,jpsim
1005,2014-10-10 21:39:42,"Allows users to get an NSArray of instantiated accessors. I think the naming here makes sense as it pairs nicely with `objectAtIndex:` which is our other accessor creation method.

@tgoyne @jpsim 
",alazier,tgoyne
1005,2014-10-13 18:35:05,"Or should this be called subarrayWithRange? @jpsim @tgoyne 

If the name is fine anything else need to be done with this?
",alazier,jpsim
1004,2014-10-10 17:37:51,"The name was a misnomer since we really accepted any collection which implements NSFastEnumeration. Since we are breaking things with the next release now is probably a good time to make this change if we want to make it at all.

@jpsim @tgoyne 
",alazier,jpsim
1004,2014-10-10 17:37:51,"The name was a misnomer since we really accepted any collection which implements NSFastEnumeration. Since we are breaking things with the next release now is probably a good time to make this change if we want to make it at all.

@jpsim @tgoyne 
",alazier,tgoyne
1003,2014-10-10 19:08:03,"@alazier any suggestions?
",eni9889,alazier
1000,2014-10-10 04:19:03,"Hello,

I just run a simple OS X app with Realm and it is crash when running with error:

dyld: Library not loaded: @rpath/Realm.framework/Versions/A/Realm
  Referenced from: /Users/HTAD/Library/Developer/Xcode/DerivedData/REALM-cdxzyeduoxphmoefhjxihxunuzkd/Build/Products/Debug/REALM.app/Contents/MacOS/REALM
  Reason: image not found
(lldb) 

I don't know what image is ?

P/s: XCode 6.0.1, Mac OS X 10.9.5
",HTAD,rpath
999,2014-10-09 19:01:49,"@mbuchetics Can you test this and see if it does fix your issue?

@alazier 
",tgoyne,alazier
999,2014-10-09 19:01:49,"@mbuchetics Can you test this and see if it does fix your issue?

@alazier 
",tgoyne,mbuchetics
993,2014-10-09 14:04:32,"This is ready for review @tgoyne @jpsim 
",alazier,jpsim
993,2014-10-09 14:04:32,"This is ready for review @tgoyne @jpsim 
",alazier,tgoyne
992,2014-10-08 22:31:24,"As requested for the browser.

@tgoyne 

@GreatApe please test this to make sure this allows everything you need to do. The test `testDynamicArray` has an example of moving an element in an array using dynamic objects and the current interface.
",alazier,tgoyne
992,2014-10-08 22:31:24,"As requested for the browser.

@tgoyne 

@GreatApe please test this to make sure this allows everything you need to do. The test `testDynamicArray` has an example of moving an element in an array using dynamic objects and the current interface.
",alazier,GreatApe
992,2014-10-08 23:33:46,":+1: once @GreatApe verifies it covers what he needs.
",tgoyne,GreatApe
991,2014-10-08 21:02:07,"Currently this throws an exception which is frustrating when dealing with nested objects/relationships. We still throw when trying to add objects across differing Realms.

Fixes #983

@tgoyne 
",alazier,tgoyne
990,2014-10-08 16:29:38,"Hey guys,

I'm very sorry to bother you again :( I have quite a complex model-relationship setup in my app. There are basically two model classes: ModelA and ModelB.
ModelA has the following properties:
@property RLMArray<ModelB>\* bModels;

ModelB has the following properties:
@property ModelA\* aModel;

In short: ModelA has many modelBs and every ModelB should know which ModelA it belongs to. In reality there are some more models up the chain but they shouldn't matter.
So far so good, right now I'm trying to implement a feature allowing the user to change that relationship. In fact, the user should be able to assign an instance of ModelB to another instance of ModelA.

Therefore I came up with the following chunk of code:

[myModelB.realm transactionWithBlock:^{
            [myModelB.aModel.bModels removeObjectAtIndex:[myModelB.aModel.bModels indexOfObject:myModelB]];
            myModelB.aModel = myNewModelA;
            [myNewModelA.bModels addObject:myModelB];
        }];

This indeed works like expected, when I set a breakpoint directly after finishing the transaction, and inspect the variables content everything seems fine. Nevertheless, when I start querying the models from another thread using a new Realm object the change doesn't reflect. In addition, I can't find the change in the realm file when viewing it with the supplied browser.

Any input?
",tspecht,property
989,2014-10-08 19:27:56,"I've wanted to do this since forever.

But if it is easy to turn on replication for in-memory realms we should just get it over with and merge the al-im branch. @finnschiermer would now how difficult this is to do (there is a ticket for opening a shared group with replication and as in-memory).
",alazier,finnschiermer
986,2014-10-07 22:32:44,"@alazier @jpsim 
",tgoyne,alazier
986,2014-10-07 22:32:44,"@alazier @jpsim 
",tgoyne,jpsim
985,2014-10-07 21:11:14,"@jpsim 
",tgoyne,jpsim
983,2014-10-07 18:11:27,"Hi @dismory, as of `0.86.0`, adding an object to a Realm will also add all its links. This is done because a Realm object cannot have a relationship to an object outside that Realm.

In previous versions of Realm, your code may have ran without exception, but would have potentially left one of these objects in an undefined state, under certain circumstances.

I can see the need to throw an exception when adding an object to two different Realms, but is there a reason why adding it to the same realm multiple times couldn't be a no-op? /cc @tgoyne @alazier
",jpsim,alazier
983,2014-10-07 18:11:27,"Hi @dismory, as of `0.86.0`, adding an object to a Realm will also add all its links. This is done because a Realm object cannot have a relationship to an object outside that Realm.

In previous versions of Realm, your code may have ran without exception, but would have potentially left one of these objects in an undefined state, under certain circumstances.

I can see the need to throw an exception when adding an object to two different Realms, but is there a reason why adding it to the same realm multiple times couldn't be a no-op? /cc @tgoyne @alazier
",jpsim,tgoyne
981,2014-10-06 23:52:38,"More details in https://github.com/realm/realm-cocoa/pull/964 /cc @alloy
",jpsim,alloy
980,2014-10-06 23:31:21,"- Removed unused scripts (`build-framework.sh`, `copy-osx-framework.sh`, `replace_framework_path.py`, duplicate `sh build.sh docs`)
- Clean up duplicate framework search paths in all `RealmExamples.xcodeproj` files
- Fixed paths in rubymotion example Rakefile
- Package Swift examples
- Globally replace paths

As a result of these changes, we no longer get warnings when building examples.

Please review @tgoyne @alazier.
",jpsim,alazier
980,2014-10-06 23:31:21,"- Removed unused scripts (`build-framework.sh`, `copy-osx-framework.sh`, `replace_framework_path.py`, duplicate `sh build.sh docs`)
- Clean up duplicate framework search paths in all `RealmExamples.xcodeproj` files
- Fixed paths in rubymotion example Rakefile
- Package Swift examples
- Globally replace paths

As a result of these changes, we no longer get warnings when building examples.

Please review @tgoyne @alazier.
",jpsim,tgoyne
979,2014-10-06 22:43:39,"@tgoyne 
",jpsim,tgoyne
978,2014-10-06 21:22:28,"Not really a fan of the API but I don't have any better ideas.

@jpsim @alazier 
",tgoyne,jpsim
978,2014-10-06 21:22:28,"Not really a fan of the API but I don't have any better ideas.

@jpsim @alazier 
",tgoyne,alazier
976,2014-10-06 19:11:31,"@tgoyne 
",jpsim,tgoyne
974,2014-10-06 08:26:08,"@scriptedSheep are you running any asynchronous tests, by any chance? Even if you're not, deleting the Realm file between tests may cause race conditions. This is a well known challenge with XCTest and disk-related tests, not unique to Realm.

Please see Realm's own unit tests to see how we mostly sidestep these issues, notably [`-invokeTest`](https://github.com/realm/realm-cocoa/blob/master/Realm/Tests/RLMTestCase.m#L94).
",jpsim,scriptedSheep
972,2014-10-04 18:32:03,"Instead of using `Realm.xcodeproj` as a subproject to `RealmBrowser.xcodeproj`, use the same approach as examples (""Realm"" aggregate build phase that runs `sh build.sh osx` only if the framework isn't built).

Also copy `Realm.framework` into the resulting app bundle so the browser app is self-contained.

@tgoyne @alazier @GreatApe 
",jpsim,alazier
972,2014-10-04 18:32:03,"Instead of using `Realm.xcodeproj` as a subproject to `RealmBrowser.xcodeproj`, use the same approach as examples (""Realm"" aggregate build phase that runs `sh build.sh osx` only if the framework isn't built).

Also copy `Realm.framework` into the resulting app bundle so the browser app is self-contained.

@tgoyne @alazier @GreatApe 
",jpsim,tgoyne
972,2014-10-04 18:32:03,"Instead of using `Realm.xcodeproj` as a subproject to `RealmBrowser.xcodeproj`, use the same approach as examples (""Realm"" aggregate build phase that runs `sh build.sh osx` only if the framework isn't built).

Also copy `Realm.framework` into the resulting app bundle so the browser app is self-contained.

@tgoyne @alazier @GreatApe 
",jpsim,GreatApe
972,2014-10-05 19:36:25,"@GreatApe just to be clear, we're talking about this PR, right? It builds fine for me, CI indicates it can build it successfully, and more importantly, it still runs after moving it to a different location on disk.

@tgoyne @alazier can either of you review this? I'd rather not have to pull 0.86.0 and 0.86.1 because users can't use the browser.
",jpsim,alazier
972,2014-10-05 19:36:25,"@GreatApe just to be clear, we're talking about this PR, right? It builds fine for me, CI indicates it can build it successfully, and more importantly, it still runs after moving it to a different location on disk.

@tgoyne @alazier can either of you review this? I'd rather not have to pull 0.86.0 and 0.86.1 because users can't use the browser.
",jpsim,tgoyne
972,2014-10-05 22:02:44,"JP, anything else than the current browser can only be better. I guess it
can't be worse, right?
So if you can build it, and run it outside the build environment, I would
just release it.

On Sun, Oct 5, 2014 at 9:36 PM, JP Simard notifications@github.com wrote:

> @GreatApe https://github.com/GreatApe just to be clear, we're talking
> about this PR, right? It builds fine for me, CI indicates it can build it
> successfully, and more importantly, it still runs after moving it to a
> different location on disk.
> 
> @tgoyne https://github.com/tgoyne @alazier https://github.com/alazier
> can either of you review this? I'd rather not have to pull 0.86.0 and
> 0.86.1 because users can't use the browser.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/972#issuecomment-57949202.
",bmunkholm,alazier
972,2014-10-05 22:02:44,"JP, anything else than the current browser can only be better. I guess it
can't be worse, right?
So if you can build it, and run it outside the build environment, I would
just release it.

On Sun, Oct 5, 2014 at 9:36 PM, JP Simard notifications@github.com wrote:

> @GreatApe https://github.com/GreatApe just to be clear, we're talking
> about this PR, right? It builds fine for me, CI indicates it can build it
> successfully, and more importantly, it still runs after moving it to a
> different location on disk.
> 
> @tgoyne https://github.com/tgoyne @alazier https://github.com/alazier
> can either of you review this? I'd rather not have to pull 0.86.0 and
> 0.86.1 because users can't use the browser.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/972#issuecomment-57949202.
",bmunkholm,tgoyne
972,2014-10-06 00:03:17,"Yes, this PR. I tried twice checking out the main repo and selecting the jp-package-browser branch, also cleaning the build folder and deleting derived data.

I'm using the appstore version of xcode 6.

I had a look at the CI logs and couldn't see any mention of the browser, is it even being built?

Also, is it correct that it should reference a compiled version of realm.framework found under. Derived data/realm?

On 5 okt 2014, at 21:36, ""JP Simard"" <notifications@github.com<mailto:notifications@github.com>> wrote:

@GreatApehttps://github.com/GreatApe just to be clear, we're talking about this PR, right? It builds fine for me, CI indicates it can build it successfully, and more importantly, it still runs after moving it to a different location on disk.

@tgoynehttps://github.com/tgoyne @alazierhttps://github.com/alazier can either of you review this? I'd rather not have to pull 0.86.0 and 0.86.1 because users can't use the browser.

—
Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-cocoa/pull/972#issuecomment-57949202.
",GreatApe,alazierhttps
972,2014-10-06 00:03:17,"Yes, this PR. I tried twice checking out the main repo and selecting the jp-package-browser branch, also cleaning the build folder and deleting derived data.

I'm using the appstore version of xcode 6.

I had a look at the CI logs and couldn't see any mention of the browser, is it even being built?

Also, is it correct that it should reference a compiled version of realm.framework found under. Derived data/realm?

On 5 okt 2014, at 21:36, ""JP Simard"" <notifications@github.com<mailto:notifications@github.com>> wrote:

@GreatApehttps://github.com/GreatApe just to be clear, we're talking about this PR, right? It builds fine for me, CI indicates it can build it successfully, and more importantly, it still runs after moving it to a different location on disk.

@tgoynehttps://github.com/tgoyne @alazierhttps://github.com/alazier can either of you review this? I'd rather not have to pull 0.86.0 and 0.86.1 because users can't use the browser.

—
Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-cocoa/pull/972#issuecomment-57949202.
",GreatApe,GreatApehttps
972,2014-10-06 00:03:17,"Yes, this PR. I tried twice checking out the main repo and selecting the jp-package-browser branch, also cleaning the build folder and deleting derived data.

I'm using the appstore version of xcode 6.

I had a look at the CI logs and couldn't see any mention of the browser, is it even being built?

Also, is it correct that it should reference a compiled version of realm.framework found under. Derived data/realm?

On 5 okt 2014, at 21:36, ""JP Simard"" <notifications@github.com<mailto:notifications@github.com>> wrote:

@GreatApehttps://github.com/GreatApe just to be clear, we're talking about this PR, right? It builds fine for me, CI indicates it can build it successfully, and more importantly, it still runs after moving it to a different location on disk.

@tgoynehttps://github.com/tgoyne @alazierhttps://github.com/alazier can either of you review this? I'd rather not have to pull 0.86.0 and 0.86.1 because users can't use the browser.

—
Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-cocoa/pull/972#issuecomment-57949202.
",GreatApe,tgoynehttps
972,2014-10-06 01:17:39,"Yes, now it works, excellent! And it still works if I move the .app to another folder.

On 06 Oct 2014, at 02:41, JP Simard <notifications@github.com<mailto:notifications@github.com>> wrote:

Thanks for pointing out the hardcoded paths, @tgoynehttps://github.com/tgoyne.

@GreatApehttps://github.com/GreatApe @bmunkholmhttps://github.com/bmunkholm please try building now, hopefully the making the absolute paths relative fixes your build issues.

—
Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-cocoa/pull/972#issuecomment-57958457.
",GreatApe,GreatApehttps
972,2014-10-06 01:17:39,"Yes, now it works, excellent! And it still works if I move the .app to another folder.

On 06 Oct 2014, at 02:41, JP Simard <notifications@github.com<mailto:notifications@github.com>> wrote:

Thanks for pointing out the hardcoded paths, @tgoynehttps://github.com/tgoyne.

@GreatApehttps://github.com/GreatApe @bmunkholmhttps://github.com/bmunkholm please try building now, hopefully the making the absolute paths relative fixes your build issues.

—
Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-cocoa/pull/972#issuecomment-57958457.
",GreatApe,tgoynehttps
972,2014-10-06 01:17:39,"Yes, now it works, excellent! And it still works if I move the .app to another folder.

On 06 Oct 2014, at 02:41, JP Simard <notifications@github.com<mailto:notifications@github.com>> wrote:

Thanks for pointing out the hardcoded paths, @tgoynehttps://github.com/tgoyne.

@GreatApehttps://github.com/GreatApe @bmunkholmhttps://github.com/bmunkholm please try building now, hopefully the making the absolute paths relative fixes your build issues.

—
Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-cocoa/pull/972#issuecomment-57958457.
",GreatApe,bmunkholmhttps
971,2014-10-06 01:05:23,"@jpsim 

Possibly relevant - From the source code comment on `RLMRealm.defaultRealm()`:

> If you specifically want to
>      ensure a `RLMRealm` object is destroyed, place the code which uses the Realm within an `@autoreleasepool
>      {}` and ensure you have no other references to it.

##### What's the safe way to delete a `RLMRealm` and recreate it?

This is what I have at application launch right now...


",aleclarson,autoreleasepool
971,2014-10-06 05:49:38,"@devxoul thanks, this is better, but still insufficient, as there might be other Realm instances than the one calling `-drop`. Support for this will likely have to be added in Realm's core, though I'd love to get @tgoyne and @alazier's input on this.
",jpsim,alazier
971,2014-10-06 05:49:38,"@devxoul thanks, this is better, but still insufficient, as there might be other Realm instances than the one calling `-drop`. Support for this will likely have to be added in Realm's core, though I'd love to get @tgoyne and @alazier's input on this.
",jpsim,tgoyne
966,2014-10-03 22:57:07,"Calling [objectClass className] returns the parent class's class name rather than the current class's if the parent class is initialized before the child, and the order that they're initialized depends on what order a dictionary happens to be enumerated.

@jpsim 
",tgoyne,jpsim
965,2014-10-03 22:53:48,"Installation instructions at http://realm.io/docs/cocoa/latest/#installation expect this file to be in the zip.

@tgoyne 
",jpsim,tgoyne
964,2014-10-03 18:29:29,"We neglected to update the location of `Realm.framework` in the rubymotion example. However, the example no longer works, saying it can't find the `i386` version of the framework, even though `lipo` confirms it's in there.

![image](https://cloud.githubusercontent.com/assets/474794/4510483/e6195bb2-4b2a-11e4-8efe-9a9444693234.png)

I'm hoping @alloy can swoop in and shed some light on this.
",jpsim,alloy
962,2014-10-03 16:38:50,"@alazier @jpsim 
",tgoyne,alazier
962,2014-10-03 16:38:50,"@alazier @jpsim 
",tgoyne,jpsim
960,2014-10-03 19:20:03,"@marulo6 all targets from `RealmExamples.xcodeproj` build on device for us. Your issues must be related to how your code signing certificates and/or provisioning profiles are installed on your machine.

This will be difficult to troubleshoot without access to your machine.
",jpsim,marulo6
957,2014-10-01 22:02:11,"Fetches the object with the given primary key, or returns nil if it doesn't exist.

Maybe should be `objectForKey` à la `valueForKey`?

@alazier @jpsim 
",tgoyne,alazier
957,2014-10-01 22:02:11,"Fetches the object with the given primary key, or returns nil if it doesn't exist.

Maybe should be `objectForKey` à la `valueForKey`?

@alazier @jpsim 
",tgoyne,jpsim
956,2014-10-01 21:00:39,"See #945.

Not a complete solution (either needs to be fixed or added to the documentation as a limitation), but this makes it at least not corrupt data when given an overly large NSData.

@alazier @jpsim 
",tgoyne,alazier
956,2014-10-01 21:00:39,"See #945.

Not a complete solution (either needs to be fixed or added to the documentation as a limitation), but this makes it at least not corrupt data when given an overly large NSData.

@alazier @jpsim 
",tgoyne,jpsim
955,2014-10-01 18:53:00,"I'll create an Asana ticket for a nicer way to handle empty queries, since none of the ideas mentioned actually work (without lots and lots of dumb code to construct a never matching query for every possible column type), and I'm not totally sure what it should even look like. Current workaround isn't too ugly at least.

Fixes #950.

@alazier 
",tgoyne,alazier
954,2014-10-01 17:41:30,"Specifically the line about Xcode 6 could have been misinterpreted to mean that users couldn't use Realm in their Xcode 5 projects. @tgoyne @alazier 
",jpsim,alazier
954,2014-10-01 17:41:30,"Specifically the line about Xcode 6 could have been misinterpreted to mean that users couldn't use Realm in their Xcode 5 projects. @tgoyne @alazier 
",jpsim,tgoyne
953,2014-10-01 17:06:26,"@tgoyne 
",alazier,tgoyne
948,2014-09-30 22:18:28,"This will allow users to include Realm in iOS app projects targeting iOS 6.x ([see user group discussion](https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/realm-cocoa/BPEsG53khI0/NsLuFplLukoJ)).

@tgoyne @alazier 
",jpsim,alazier
948,2014-09-30 22:18:28,"This will allow users to include Realm in iOS app projects targeting iOS 6.x ([see user group discussion](https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/realm-cocoa/BPEsG53khI0/NsLuFplLukoJ)).

@tgoyne @alazier 
",jpsim,tgoyne
944,2014-09-30 17:58:33,"Query doesn't support move-assignment and obj-c++ requires that C++ data members of obj-c classes be default-constructed, so heap-allocate queries to eliminate the copy assignment.

Makes queries bound by the Query construction/destruction time roughly twice as fast.

@alazier 
",tgoyne,alazier
940,2014-09-29 17:52:59,"Does not support polymorphic behavior.

@tgoyne 
",alazier,tgoyne
939,2014-09-29 10:09:06,"Hi Cheng,
No it doesn't convert strings to numbers automatically. Your json data is
just 3 strings. So you just have to make your json correct like this:

{
    ""id"": 19,
    ""name"": ""John Doe"",
    ""age"": 4,}

Cheers
Brian

On Mon, Sep 29, 2014 at 11:52 AM, Cheng Yao notifications@github.com
wrote:

> dogs.json:
> 
> {
>     ""id"": ""19"",
>     ""name"": ""John Doe"",
>     ""age"": ""4"",}
> 
> Dog.h
> 
> @interface Dog : RLMObject
> @property NSInteger id;@property NSString *name;@property NSInteger age;
> @end
> 
> I got this exception:
> 
> 'Invalid value '19' for property 'id'
> 
> Shouldn't it automatic convert string ""19"" to integer, since I already
> defined the data type as NSInteger
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/939.
",bmunkholm,end
939,2014-09-29 10:09:06,"Hi Cheng,
No it doesn't convert strings to numbers automatically. Your json data is
just 3 strings. So you just have to make your json correct like this:

{
    ""id"": 19,
    ""name"": ""John Doe"",
    ""age"": 4,}

Cheers
Brian

On Mon, Sep 29, 2014 at 11:52 AM, Cheng Yao notifications@github.com
wrote:

> dogs.json:
> 
> {
>     ""id"": ""19"",
>     ""name"": ""John Doe"",
>     ""age"": ""4"",}
> 
> Dog.h
> 
> @interface Dog : RLMObject
> @property NSInteger id;@property NSString *name;@property NSInteger age;
> @end
> 
> I got this exception:
> 
> 'Invalid value '19' for property 'id'
> 
> Shouldn't it automatic convert string ""19"" to integer, since I already
> defined the data type as NSInteger
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/939.
",bmunkholm,interface
939,2014-09-29 10:09:06,"Hi Cheng,
No it doesn't convert strings to numbers automatically. Your json data is
just 3 strings. So you just have to make your json correct like this:

{
    ""id"": 19,
    ""name"": ""John Doe"",
    ""age"": 4,}

Cheers
Brian

On Mon, Sep 29, 2014 at 11:52 AM, Cheng Yao notifications@github.com
wrote:

> dogs.json:
> 
> {
>     ""id"": ""19"",
>     ""name"": ""John Doe"",
>     ""age"": ""4"",}
> 
> Dog.h
> 
> @interface Dog : RLMObject
> @property NSInteger id;@property NSString *name;@property NSInteger age;
> @end
> 
> I got this exception:
> 
> 'Invalid value '19' for property 'id'
> 
> Shouldn't it automatic convert string ""19"" to integer, since I already
> defined the data type as NSInteger
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/939.
",bmunkholm,property
938,2014-09-29 08:39:21,"Did you also try to add a property in the class?

On Mon, Sep 29, 2014 at 10:19 AM, Leon Breedt notifications@github.com
wrote:

> Hi,
> 
> I realise this is probably full of sharp edges, but I thought I'd try to
> use Realm in a playground.
> 
> I followed the instructions for getting started with Swift, and Realm is
> visible to my Swift application.
> I can also import it into my playground, and the code completion works [image:
> :sunglasses:]
> 
> This is the code in the playground:
> 
> import Realmclass Dog : RLMObject {}let d = Dog()
> 
> But the final let statement crashes, clicking the inspect button shows
> this call stack [image: :scream:]
> - thread #1: tid = 0x4216c, 0x0000000109003e57 libswiftCore.dylib`swift_ClassMirror_count + 23, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x10)
>   - frame #0: 0x0000000109003e57 libswiftCore.dylib`swift_ClassMirror_count + 23
>     frame #1: 0x0000000107174269 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeStructured (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64, PlaygroundLogger.LoggerCappingPolicy) -> () + 121
>     frame #2: 0x0000000107174ee0 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeStructured (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64) -> () + 656
>     frame #3: 0x000000010717ad80 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encode (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64) -> () + 7728
>     frame #4: 0x000000010717b4c0 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeObject (PlaygroundLogger.PlaygroundObjectWriter)<A>(A, Swift.String) -> () + 1296
>     frame #5: 0x000000010714efde PlaygroundLogger`playground_log + 350
>     frame #6: 0x0000000113013638 $**lldb_expr414`top_level_code + 168 at playground414.swift:8
>     frame #7: 0x00000001130139dd $__lldb_expr414`main + 61 at <EXPR>:0
>     frame #8: 0x00000001070aa510 HouseFinder`get_field_types__XCPAppDelegate + 160
>     frame #9: 0x00000001070ab081 HouseFinder`reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_owned (@in ()) -> (@out ()) + 17
>     frame #10: 0x00000001070a9cf1 HouseFinder`partial apply forwarder for reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_owned (@in ()) -> (@out ()) + 81
>     frame #11: 0x00000001070ab0b0 HouseFinder`reabstraction thunk helper from @callee_owned (@in ()) -> (@out ()) to @callee_owned () -> (@unowned ()) + 32
>     frame #12: 0x00000001070ab0e7 HouseFinder`reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_unowned @objc_block () -> (@unowned ()) + 39
>     frame #13: 0x00000001076f2abc CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK** + 12
>     frame #14: 0x00000001076e8805 CoreFoundation`__CFRunLoopDoBlocks + 341
>     frame #15: 0x00000001076e7fc3 CoreFoundation`__CFRunLoopRun + 851
>     frame #16: 0x00000001076e7a06 CoreFoundation`CFRunLoopRunSpecific + 470
>     frame #17: 0x00000001077942c1 CoreFoundation`CFRunLoopRun + 97
>     frame #18: 0x00000001070a7dcd HouseFinder`top_level_code + 3629
>     frame #19: 0x00000001070aa53a HouseFinder`main + 42
>     frame #20: 0x000000010a3c5145 libdyld.dylib`start + 1
> 
> It is unclear whether it's a bug in Swift, the playground infrastructure,
> or something Realm does. Regardless, it would be pretty sweet to have
> playground support for rapid prototyping, so I just thought I'd put this up
> here.
> 
> Leon
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/938.
",bmunkholm,unowned
938,2014-09-29 08:39:21,"Did you also try to add a property in the class?

On Mon, Sep 29, 2014 at 10:19 AM, Leon Breedt notifications@github.com
wrote:

> Hi,
> 
> I realise this is probably full of sharp edges, but I thought I'd try to
> use Realm in a playground.
> 
> I followed the instructions for getting started with Swift, and Realm is
> visible to my Swift application.
> I can also import it into my playground, and the code completion works [image:
> :sunglasses:]
> 
> This is the code in the playground:
> 
> import Realmclass Dog : RLMObject {}let d = Dog()
> 
> But the final let statement crashes, clicking the inspect button shows
> this call stack [image: :scream:]
> - thread #1: tid = 0x4216c, 0x0000000109003e57 libswiftCore.dylib`swift_ClassMirror_count + 23, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x10)
>   - frame #0: 0x0000000109003e57 libswiftCore.dylib`swift_ClassMirror_count + 23
>     frame #1: 0x0000000107174269 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeStructured (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64, PlaygroundLogger.LoggerCappingPolicy) -> () + 121
>     frame #2: 0x0000000107174ee0 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeStructured (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64) -> () + 656
>     frame #3: 0x000000010717ad80 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encode (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64) -> () + 7728
>     frame #4: 0x000000010717b4c0 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeObject (PlaygroundLogger.PlaygroundObjectWriter)<A>(A, Swift.String) -> () + 1296
>     frame #5: 0x000000010714efde PlaygroundLogger`playground_log + 350
>     frame #6: 0x0000000113013638 $**lldb_expr414`top_level_code + 168 at playground414.swift:8
>     frame #7: 0x00000001130139dd $__lldb_expr414`main + 61 at <EXPR>:0
>     frame #8: 0x00000001070aa510 HouseFinder`get_field_types__XCPAppDelegate + 160
>     frame #9: 0x00000001070ab081 HouseFinder`reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_owned (@in ()) -> (@out ()) + 17
>     frame #10: 0x00000001070a9cf1 HouseFinder`partial apply forwarder for reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_owned (@in ()) -> (@out ()) + 81
>     frame #11: 0x00000001070ab0b0 HouseFinder`reabstraction thunk helper from @callee_owned (@in ()) -> (@out ()) to @callee_owned () -> (@unowned ()) + 32
>     frame #12: 0x00000001070ab0e7 HouseFinder`reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_unowned @objc_block () -> (@unowned ()) + 39
>     frame #13: 0x00000001076f2abc CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK** + 12
>     frame #14: 0x00000001076e8805 CoreFoundation`__CFRunLoopDoBlocks + 341
>     frame #15: 0x00000001076e7fc3 CoreFoundation`__CFRunLoopRun + 851
>     frame #16: 0x00000001076e7a06 CoreFoundation`CFRunLoopRunSpecific + 470
>     frame #17: 0x00000001077942c1 CoreFoundation`CFRunLoopRun + 97
>     frame #18: 0x00000001070a7dcd HouseFinder`top_level_code + 3629
>     frame #19: 0x00000001070aa53a HouseFinder`main + 42
>     frame #20: 0x000000010a3c5145 libdyld.dylib`start + 1
> 
> It is unclear whether it's a bug in Swift, the playground infrastructure,
> or something Realm does. Regardless, it would be pretty sweet to have
> playground support for rapid prototyping, so I just thought I'd put this up
> here.
> 
> Leon
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/938.
",bmunkholm,objc
938,2014-09-29 08:39:21,"Did you also try to add a property in the class?

On Mon, Sep 29, 2014 at 10:19 AM, Leon Breedt notifications@github.com
wrote:

> Hi,
> 
> I realise this is probably full of sharp edges, but I thought I'd try to
> use Realm in a playground.
> 
> I followed the instructions for getting started with Swift, and Realm is
> visible to my Swift application.
> I can also import it into my playground, and the code completion works [image:
> :sunglasses:]
> 
> This is the code in the playground:
> 
> import Realmclass Dog : RLMObject {}let d = Dog()
> 
> But the final let statement crashes, clicking the inspect button shows
> this call stack [image: :scream:]
> - thread #1: tid = 0x4216c, 0x0000000109003e57 libswiftCore.dylib`swift_ClassMirror_count + 23, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x10)
>   - frame #0: 0x0000000109003e57 libswiftCore.dylib`swift_ClassMirror_count + 23
>     frame #1: 0x0000000107174269 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeStructured (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64, PlaygroundLogger.LoggerCappingPolicy) -> () + 121
>     frame #2: 0x0000000107174ee0 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeStructured (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64) -> () + 656
>     frame #3: 0x000000010717ad80 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encode (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64) -> () + 7728
>     frame #4: 0x000000010717b4c0 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeObject (PlaygroundLogger.PlaygroundObjectWriter)<A>(A, Swift.String) -> () + 1296
>     frame #5: 0x000000010714efde PlaygroundLogger`playground_log + 350
>     frame #6: 0x0000000113013638 $**lldb_expr414`top_level_code + 168 at playground414.swift:8
>     frame #7: 0x00000001130139dd $__lldb_expr414`main + 61 at <EXPR>:0
>     frame #8: 0x00000001070aa510 HouseFinder`get_field_types__XCPAppDelegate + 160
>     frame #9: 0x00000001070ab081 HouseFinder`reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_owned (@in ()) -> (@out ()) + 17
>     frame #10: 0x00000001070a9cf1 HouseFinder`partial apply forwarder for reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_owned (@in ()) -> (@out ()) + 81
>     frame #11: 0x00000001070ab0b0 HouseFinder`reabstraction thunk helper from @callee_owned (@in ()) -> (@out ()) to @callee_owned () -> (@unowned ()) + 32
>     frame #12: 0x00000001070ab0e7 HouseFinder`reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_unowned @objc_block () -> (@unowned ()) + 39
>     frame #13: 0x00000001076f2abc CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK** + 12
>     frame #14: 0x00000001076e8805 CoreFoundation`__CFRunLoopDoBlocks + 341
>     frame #15: 0x00000001076e7fc3 CoreFoundation`__CFRunLoopRun + 851
>     frame #16: 0x00000001076e7a06 CoreFoundation`CFRunLoopRunSpecific + 470
>     frame #17: 0x00000001077942c1 CoreFoundation`CFRunLoopRun + 97
>     frame #18: 0x00000001070a7dcd HouseFinder`top_level_code + 3629
>     frame #19: 0x00000001070aa53a HouseFinder`main + 42
>     frame #20: 0x000000010a3c5145 libdyld.dylib`start + 1
> 
> It is unclear whether it's a bug in Swift, the playground infrastructure,
> or something Realm does. Regardless, it would be pretty sweet to have
> playground support for rapid prototyping, so I just thought I'd put this up
> here.
> 
> Leon
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/938.
",bmunkholm,out
938,2014-09-29 08:39:21,"Did you also try to add a property in the class?

On Mon, Sep 29, 2014 at 10:19 AM, Leon Breedt notifications@github.com
wrote:

> Hi,
> 
> I realise this is probably full of sharp edges, but I thought I'd try to
> use Realm in a playground.
> 
> I followed the instructions for getting started with Swift, and Realm is
> visible to my Swift application.
> I can also import it into my playground, and the code completion works [image:
> :sunglasses:]
> 
> This is the code in the playground:
> 
> import Realmclass Dog : RLMObject {}let d = Dog()
> 
> But the final let statement crashes, clicking the inspect button shows
> this call stack [image: :scream:]
> - thread #1: tid = 0x4216c, 0x0000000109003e57 libswiftCore.dylib`swift_ClassMirror_count + 23, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x10)
>   - frame #0: 0x0000000109003e57 libswiftCore.dylib`swift_ClassMirror_count + 23
>     frame #1: 0x0000000107174269 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeStructured (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64, PlaygroundLogger.LoggerCappingPolicy) -> () + 121
>     frame #2: 0x0000000107174ee0 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeStructured (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64) -> () + 656
>     frame #3: 0x000000010717ad80 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encode (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64) -> () + 7728
>     frame #4: 0x000000010717b4c0 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeObject (PlaygroundLogger.PlaygroundObjectWriter)<A>(A, Swift.String) -> () + 1296
>     frame #5: 0x000000010714efde PlaygroundLogger`playground_log + 350
>     frame #6: 0x0000000113013638 $**lldb_expr414`top_level_code + 168 at playground414.swift:8
>     frame #7: 0x00000001130139dd $__lldb_expr414`main + 61 at <EXPR>:0
>     frame #8: 0x00000001070aa510 HouseFinder`get_field_types__XCPAppDelegate + 160
>     frame #9: 0x00000001070ab081 HouseFinder`reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_owned (@in ()) -> (@out ()) + 17
>     frame #10: 0x00000001070a9cf1 HouseFinder`partial apply forwarder for reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_owned (@in ()) -> (@out ()) + 81
>     frame #11: 0x00000001070ab0b0 HouseFinder`reabstraction thunk helper from @callee_owned (@in ()) -> (@out ()) to @callee_owned () -> (@unowned ()) + 32
>     frame #12: 0x00000001070ab0e7 HouseFinder`reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_unowned @objc_block () -> (@unowned ()) + 39
>     frame #13: 0x00000001076f2abc CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK** + 12
>     frame #14: 0x00000001076e8805 CoreFoundation`__CFRunLoopDoBlocks + 341
>     frame #15: 0x00000001076e7fc3 CoreFoundation`__CFRunLoopRun + 851
>     frame #16: 0x00000001076e7a06 CoreFoundation`CFRunLoopRunSpecific + 470
>     frame #17: 0x00000001077942c1 CoreFoundation`CFRunLoopRun + 97
>     frame #18: 0x00000001070a7dcd HouseFinder`top_level_code + 3629
>     frame #19: 0x00000001070aa53a HouseFinder`main + 42
>     frame #20: 0x000000010a3c5145 libdyld.dylib`start + 1
> 
> It is unclear whether it's a bug in Swift, the playground infrastructure,
> or something Realm does. Regardless, it would be pretty sweet to have
> playground support for rapid prototyping, so I just thought I'd put this up
> here.
> 
> Leon
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/938.
",bmunkholm,callee
938,2014-09-29 08:39:21,"Did you also try to add a property in the class?

On Mon, Sep 29, 2014 at 10:19 AM, Leon Breedt notifications@github.com
wrote:

> Hi,
> 
> I realise this is probably full of sharp edges, but I thought I'd try to
> use Realm in a playground.
> 
> I followed the instructions for getting started with Swift, and Realm is
> visible to my Swift application.
> I can also import it into my playground, and the code completion works [image:
> :sunglasses:]
> 
> This is the code in the playground:
> 
> import Realmclass Dog : RLMObject {}let d = Dog()
> 
> But the final let statement crashes, clicking the inspect button shows
> this call stack [image: :scream:]
> - thread #1: tid = 0x4216c, 0x0000000109003e57 libswiftCore.dylib`swift_ClassMirror_count + 23, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x10)
>   - frame #0: 0x0000000109003e57 libswiftCore.dylib`swift_ClassMirror_count + 23
>     frame #1: 0x0000000107174269 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeStructured (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64, PlaygroundLogger.LoggerCappingPolicy) -> () + 121
>     frame #2: 0x0000000107174ee0 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeStructured (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64) -> () + 656
>     frame #3: 0x000000010717ad80 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encode (PlaygroundLogger.PlaygroundObjectWriter)(Swift.MirrorType, Swift.UInt64) -> () + 7728
>     frame #4: 0x000000010717b4c0 PlaygroundLogger`PlaygroundLogger.PlaygroundObjectWriter.encodeObject (PlaygroundLogger.PlaygroundObjectWriter)<A>(A, Swift.String) -> () + 1296
>     frame #5: 0x000000010714efde PlaygroundLogger`playground_log + 350
>     frame #6: 0x0000000113013638 $**lldb_expr414`top_level_code + 168 at playground414.swift:8
>     frame #7: 0x00000001130139dd $__lldb_expr414`main + 61 at <EXPR>:0
>     frame #8: 0x00000001070aa510 HouseFinder`get_field_types__XCPAppDelegate + 160
>     frame #9: 0x00000001070ab081 HouseFinder`reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_owned (@in ()) -> (@out ()) + 17
>     frame #10: 0x00000001070a9cf1 HouseFinder`partial apply forwarder for reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_owned (@in ()) -> (@out ()) + 81
>     frame #11: 0x00000001070ab0b0 HouseFinder`reabstraction thunk helper from @callee_owned (@in ()) -> (@out ()) to @callee_owned () -> (@unowned ()) + 32
>     frame #12: 0x00000001070ab0e7 HouseFinder`reabstraction thunk helper from @callee_owned () -> (@unowned ()) to @callee_unowned @objc_block () -> (@unowned ()) + 39
>     frame #13: 0x00000001076f2abc CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK** + 12
>     frame #14: 0x00000001076e8805 CoreFoundation`__CFRunLoopDoBlocks + 341
>     frame #15: 0x00000001076e7fc3 CoreFoundation`__CFRunLoopRun + 851
>     frame #16: 0x00000001076e7a06 CoreFoundation`CFRunLoopRunSpecific + 470
>     frame #17: 0x00000001077942c1 CoreFoundation`CFRunLoopRun + 97
>     frame #18: 0x00000001070a7dcd HouseFinder`top_level_code + 3629
>     frame #19: 0x00000001070aa53a HouseFinder`main + 42
>     frame #20: 0x000000010a3c5145 libdyld.dylib`start + 1
> 
> It is unclear whether it's a bug in Swift, the playground infrastructure,
> or something Realm does. Regardless, it would be pretty sweet to have
> playground support for rapid prototyping, so I just thought I'd put this up
> here.
> 
> Leon
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/938.
",bmunkholm,in
938,2015-01-29 23:19:15,"For me Realm works in a playground, building 691ef1ebb14e4bf1ec7c867f22eb17180af112cb from source.  A few notes: My playground is an iOS Playground, and my schema is NOT defined directly in my playground as @bitserf tried, rather it is defined as a framework that I made, which I then import into the playground.

However, I have the caveat that I can only load a Realm database in read only mode.  If I set readOnly to false, I get the error:



Note that `RealmDatabase` is my own framework that I build that I mentioned above.

I am loading the Realm file from the Playground's resource directory.  I'm not sure how much not being able to write to the Realm is an issue with Realm, or a restriction with Playgrounds.
",donald-pinckney,bitserf
937,2014-09-28 00:13:22,"@alazier @tgoyne 
",jpsim,alazier
937,2014-09-28 00:13:22,"@alazier @tgoyne 
",jpsim,tgoyne
934,2014-09-26 17:03:29,"@alazier @tgoyne
",jpsim,alazier
934,2014-09-26 17:03:29,"@alazier @tgoyne
",jpsim,tgoyne
932,2014-09-25 14:44:52,"@tgoyne 

Addresses #928
",alazier,tgoyne
930,2014-09-24 03:13:34,"Thanks for the fix @rrrlasse @kspangsege . These changes have been incorporated into #918 along with binding support.
",alazier,rrrlasse
929,2014-09-23 14:08:57,"Changed navigation of arrays to show like this:

Company
Person
    [""Alexander"" ...]
    friends <Person>

(https://app.asana.com/0/15066612015532/16375424745326)

In the process i factored out property value descriptions and tooltip descriptions to a separate class, RLMDescriptions, which also takes care of object descriptions in the sidebar.

@alazier @astigsen @jpsim @yoshyosh 
",GreatApe,astigsen
929,2014-09-23 14:08:57,"Changed navigation of arrays to show like this:

Company
Person
    [""Alexander"" ...]
    friends <Person>

(https://app.asana.com/0/15066612015532/16375424745326)

In the process i factored out property value descriptions and tooltip descriptions to a separate class, RLMDescriptions, which also takes care of object descriptions in the sidebar.

@alazier @astigsen @jpsim @yoshyosh 
",GreatApe,alazier
929,2014-09-23 14:08:57,"Changed navigation of arrays to show like this:

Company
Person
    [""Alexander"" ...]
    friends <Person>

(https://app.asana.com/0/15066612015532/16375424745326)

In the process i factored out property value descriptions and tooltip descriptions to a separate class, RLMDescriptions, which also takes care of object descriptions in the sidebar.

@alazier @astigsen @jpsim @yoshyosh 
",GreatApe,yoshyosh
929,2014-09-23 14:08:57,"Changed navigation of arrays to show like this:

Company
Person
    [""Alexander"" ...]
    friends <Person>

(https://app.asana.com/0/15066612015532/16375424745326)

In the process i factored out property value descriptions and tooltip descriptions to a separate class, RLMDescriptions, which also takes care of object descriptions in the sidebar.

@alazier @astigsen @jpsim @yoshyosh 
",GreatApe,jpsim
926,2014-09-29 23:54:05,"Hi @dismory, we just closed this issue because calling `-description` on a deleted `RLMObject` will no longer throw, but rather returns `[deleted object]`. Thanks @tgoyne!
",jpsim,tgoyne
924,2014-09-20 01:52:18,"This adds proper XCode6 support. There is a new configuration Release-Combined which is built from build.sh (and can be built from XCode). This configuration builds and tests a fat framework and installs it at build/ios/Realm.framework

All examples have been updated to work with the new framework.

@tgoyne @jpsim 
",alazier,jpsim
924,2014-09-20 01:52:18,"This adds proper XCode6 support. There is a new configuration Release-Combined which is built from build.sh (and can be built from XCode). This configuration builds and tests a fat framework and installs it at build/ios/Realm.framework

All examples have been updated to work with the new framework.

@tgoyne @jpsim 
",alazier,tgoyne
924,2014-09-23 01:48:18,"Not sure why this is failing on ci if you have ideas @tgoyne @emanuelez @kneth 
",alazier,kneth
924,2014-09-23 01:48:18,"Not sure why this is failing on ci if you have ideas @tgoyne @emanuelez @kneth 
",alazier,emanuelez
923,2014-09-19 15:08:23,"Saves model definitions for java or objective c, using menu items and a save dialog

https://app.asana.com/0/15028213105325/15028213105330

@jpsim @tgoyne @alazier 
",GreatApe,jpsim
923,2014-09-19 15:08:23,"Saves model definitions for java or objective c, using menu items and a save dialog

https://app.asana.com/0/15028213105325/15028213105330

@jpsim @tgoyne @alazier 
",GreatApe,alazier
923,2014-09-19 15:08:23,"Saves model definitions for java or objective c, using menu items and a save dialog

https://app.asana.com/0/15028213105325/15028213105330

@jpsim @tgoyne @alazier 
",GreatApe,tgoyne
923,2014-09-25 13:34:49,"This is pretty small pr that could be quite useful, especially now that Android release is getting closer. Could someone please have a look at it?

@jpsim @astigsen 
",GreatApe,astigsen
923,2014-09-25 13:34:49,"This is pretty small pr that could be quite useful, especially now that Android release is getting closer. Could someone please have a look at it?

@jpsim @astigsen 
",GreatApe,jpsim
922,2014-09-19 11:32:00,"@jpsim @yoshyosh 
",GreatApe,yoshyosh
922,2014-09-19 11:32:00,"@jpsim @yoshyosh 
",GreatApe,jpsim
922,2014-09-22 07:47:01,"Any comments, suggestions?

@jpsim @tgoyne @alazier @yoshyosh 
",GreatApe,yoshyosh
922,2014-09-22 07:47:01,"Any comments, suggestions?

@jpsim @tgoyne @alazier @yoshyosh 
",GreatApe,jpsim
922,2014-09-22 07:47:01,"Any comments, suggestions?

@jpsim @tgoyne @alazier @yoshyosh 
",GreatApe,alazier
922,2014-09-22 07:47:01,"Any comments, suggestions?

@jpsim @tgoyne @alazier @yoshyosh 
",GreatApe,tgoyne
921,2016-10-03 04:16:37,"It's possible to declare scalar-type-backed enums as @objc. Properties with declared @objc enum types can de marked dynamic, so wouldn't this enable realm to access the values? I've used this approach with Core Data in the past:



EDIT: Actually, this already works, as far as I can tell.



It would be awesome to get RealmOptional support for these enums too, since that still seems impossible.
",HT154,objc
920,2014-09-19 03:14:39,"@tgoyne 
",alazier,tgoyne
918,2014-09-18 17:23:32,"This revives #770 which was reverted due to missing functionality in core.

We still need to wait for a core pr to get merged and a new core release before we can merge this.

@tgoyne @rrrlasse 
",alazier,rrrlasse
918,2014-09-18 17:23:32,"This revives #770 which was reverted due to missing functionality in core.

We still need to wait for a core pr to get merged and a new core release before we can merge this.

@tgoyne @rrrlasse 
",alazier,tgoyne
918,2014-09-23 01:50:18,"@rrrlasse did you manage to get a fix in for the sync issue?
",alazier,rrrlasse
917,2014-09-17 19:02:59,"Getting the version number from the plist only works when Realm is built as a dynamic framework, as otherwise our plist doesn't actually end up in the final executable at all. As our release builds are currently built with Xcode 5 and thus not dynamic frameworks, this resulted in Realm reporting that an update was available on every check.

@alazier 
",tgoyne,alazier
917,2014-09-17 23:40:06,":+1: though consider using cstrings instead of NSString - `@REALM_VERSION` is a bit confusing.
",alazier,REALM
916,2014-09-17 18:10:06,"Readonly properties aren't persistable, so making the user explicitly ignore them is annoying. Also works around NSObject having some properties that used to be methods in the non-simulator iOS 8.0 SDK.

Fixes #905.

@alazier 
",tgoyne,alazier
915,2014-09-17 14:00:51,"@jpsim @astigsen 

int, float and double: min, avg, max, sum (about 20ms)
date: min, max (about 10ms)

https://app.asana.com/0/15028213105325/15300662627859

I did try padding the strings so they could be right aligned, but the commonly proposed method for changing the font of tooltips (to a monospace one) doesn't seem to work.
",GreatApe,astigsen
915,2014-09-17 14:00:51,"@jpsim @astigsen 

int, float and double: min, avg, max, sum (about 20ms)
date: min, max (about 10ms)

https://app.asana.com/0/15028213105325/15300662627859

I did try padding the strings so they could be right aligned, but the commonly proposed method for changing the font of tooltips (to a monospace one) doesn't seem to work.
",GreatApe,jpsim
915,2014-09-23 08:47:19,"@yoshyosh ?
",GreatApe,yoshyosh
915,2014-09-30 08:53:41,"@jpsim @yoshyosh @tgoyne  
Can we please merge this? Not because the tooltips in themselves are that important but because it's a bit of a refactoring, if we don't merge this now subsequent merges will be very messy...
",GreatApe,jpsim
915,2014-09-30 08:53:41,"@jpsim @yoshyosh @tgoyne  
Can we please merge this? Not because the tooltips in themselves are that important but because it's a bit of a refactoring, if we don't merge this now subsequent merges will be very messy...
",GreatApe,tgoyne
914,2014-09-16 21:18:33,"Cache the getter and setter selector on RLMProperty to avoid the NSSelectorFromString call. Speeds up adding objects via `addObject:` by  ~20%. Caching the setter selector doesn't help performance and is just done for symmetry.

@alazier 
",tgoyne,alazier
913,2015-11-10 00:55:57,"@everyone, I highly sugest you checkout Firebase if you’re waiting for syncing. It’s realtime and working with the API is super easy (just like Realm) - http://www.firebase.com

—
Sent from Mailbox

On Tue, Nov 10, 2015 at 5:32 AM, Luciano Nascimento
notifications@github.com wrote:

> ## :+1:
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/issues/913#issuecomment-155115522
",kermankohli,everyone
911,2014-09-15 18:10:50,"This keeps the same release flow of Jenkins assembling tested artifacts into the final release package, and just moves the scripts for doing so into build.sh so that changes to the release packaging can be done via PRs. It also adds a test target which mimics the CI setup's assembly flow (but not any of the actual releasing parts) so that changes to the release tasks can be tested locally. Main goal of this is that #879 and #901 both need release packaging changes, and with the current setup it's hard to test those changes and synchronize them with when the PR is merged.

There should be only two functional changes from this: it doesn't generate the no-longer-used cocoapods package (since the podspec now builds from source), and a missing `--symlinks` was added to the examples zip creation that cuts the size of the final zip from 24MB to 14MB.

@alazier @emanuelez 
",tgoyne,alazier
911,2014-09-15 18:10:50,"This keeps the same release flow of Jenkins assembling tested artifacts into the final release package, and just moves the scripts for doing so into build.sh so that changes to the release packaging can be done via PRs. It also adds a test target which mimics the CI setup's assembly flow (but not any of the actual releasing parts) so that changes to the release tasks can be tested locally. Main goal of this is that #879 and #901 both need release packaging changes, and with the current setup it's hard to test those changes and synchronize them with when the PR is merged.

There should be only two functional changes from this: it doesn't generate the no-longer-used cocoapods package (since the podspec now builds from source), and a missing `--symlinks` was added to the examples zip creation that cuts the size of the final zip from 24MB to 14MB.

@alazier @emanuelez 
",tgoyne,emanuelez
910,2014-09-15 18:50:35,"Thanks for the report! First, you should know that we’re reworking our Swift API from scratch at the moment since Swift is now 1.0. 

You should be totally fine deleting .realm files. What’s likely happening here is that we have a Swift bug that is causing the column name to be improperly stored, causing both the runtime error and the browser error.

I’ll let @jpsim @tgoyne or @alazier jump in.
",timanglade,jpsim
910,2014-09-15 18:50:35,"Thanks for the report! First, you should know that we’re reworking our Swift API from scratch at the moment since Swift is now 1.0. 

You should be totally fine deleting .realm files. What’s likely happening here is that we have a Swift bug that is causing the column name to be improperly stored, causing both the runtime error and the browser error.

I’ll let @jpsim @tgoyne or @alazier jump in.
",timanglade,alazier
910,2014-09-15 18:50:35,"Thanks for the report! First, you should know that we’re reworking our Swift API from scratch at the moment since Swift is now 1.0. 

You should be totally fine deleting .realm files. What’s likely happening here is that we have a Swift bug that is causing the column name to be improperly stored, causing both the runtime error and the browser error.

I’ll let @jpsim @tgoyne or @alazier jump in.
",timanglade,tgoyne
908,2014-11-25 19:23:08,"@bensarz unfortunately this will continue to happen occasionally until we open-source Realm's core and avoid having to download a pre-built binary.
",jpsim,bensarz
902,2014-10-14 05:30:59,"@duemonk did you ever get this to work? I was never able to reproduce this issue. I'm guessing it may have been an Xcode 6 GM quirk.
",jpsim,duemonk
897,2014-09-11 22:47:09,"@alazier 
",tgoyne,alazier
897,2014-09-15 16:29:35,"@rrrlasse if there is an easy way to keep the linkview alive in core without a hack that would be preferable. Let us know.
",alazier,rrrlasse
894,2014-09-11 10:07:51,"@tgoyne @jpsim @alazier 
",GreatApe,jpsim
894,2014-09-11 10:07:51,"@tgoyne @jpsim @alazier 
",GreatApe,alazier
894,2014-09-11 10:07:51,"@tgoyne @jpsim @alazier 
",GreatApe,tgoyne
894,2014-09-11 18:31:37,"Please ping me again once you've addressed my feedback. I'd like @tgoyne and @alazier to review this one too, since it affects the binding.
",jpsim,alazier
894,2014-09-11 18:31:37,"Please ping me again once you've addressed my feedback. I'd like @tgoyne and @alazier to review this one too, since it affects the binding.
",jpsim,tgoyne
894,2014-10-01 17:04:30,"I'm ok with adding this functionality in the binding, but we'll need @tgoyne and @alazier to review first.

For PR's you want reviewed and that you consider complete, please make sure it's up to date with `master` and remove WIP from the title.
",jpsim,tgoyne
891,2014-09-15 13:42:22,"Now works as it should
 @jpsim @alazier 
",GreatApe,jpsim
891,2014-09-15 13:42:22,"Now works as it should
 @jpsim @alazier 
",GreatApe,alazier
891,2014-09-23 08:49:12,"@jpsim @tgoyne @alazier 

I don't think it is practical to try to reload individual cells in this case, for reasons I outlined above. Can we merge this as it is?
",GreatApe,alazier
891,2014-09-23 08:49:12,"@jpsim @tgoyne @alazier 

I don't think it is practical to try to reload individual cells in this case, for reasons I outlined above. Can we merge this as it is?
",GreatApe,tgoyne
889,2014-09-10 23:58:34,"Creating a work-in-progress pull-request for a potential Swift interface. Feedback from anyone is welcome.

@tgoyne @alazier hopefully we can discuss this approach in the office tomorrow.

Major points I still dislike with this:
1. `import Realm` will still expose the entirety of the Objective-C interface. This may be easily solved by creating a new `RealmSwift` target, but I haven't tested that yet.
2. Even with a `RealmSwift` target, all `RLMObject` methods will still be exposed, since `Object` is typealiased to `RLMObject`. We could work around this by checking for either `RLMObject` or `Object` as the parent class in the binding and creating an `Object` wrapper around `RLMObject`, much like the approach taken with most of the other Swift classes here.
3. This doesn't support generic array properties. See `ArrayProperty` for details.

Point 3 seems impossible to solve in an elegant way given Swift's current state.

Please note that I haven't yet updated the Swift tests (and won't until we discuss this approach), but you can refer to the examples for sample usage of this interface.

Closes #840 
",jpsim,alazier
889,2014-09-10 23:58:34,"Creating a work-in-progress pull-request for a potential Swift interface. Feedback from anyone is welcome.

@tgoyne @alazier hopefully we can discuss this approach in the office tomorrow.

Major points I still dislike with this:
1. `import Realm` will still expose the entirety of the Objective-C interface. This may be easily solved by creating a new `RealmSwift` target, but I haven't tested that yet.
2. Even with a `RealmSwift` target, all `RLMObject` methods will still be exposed, since `Object` is typealiased to `RLMObject`. We could work around this by checking for either `RLMObject` or `Object` as the parent class in the binding and creating an `Object` wrapper around `RLMObject`, much like the approach taken with most of the other Swift classes here.
3. This doesn't support generic array properties. See `ArrayProperty` for details.

Point 3 seems impossible to solve in an elegant way given Swift's current state.

Please note that I haven't yet updated the Swift tests (and won't until we discuss this approach), but you can refer to the examples for sample usage of this interface.

Closes #840 
",jpsim,tgoyne
889,2014-09-11 00:17:24,"Also, to add to the list of things I'm not thrilled about with this implementation, queries are still stringly-typed (`NSPredicate`s).

It'd be nice to have a more strictly typed approach as well. i.e.:



This would require users to define something like



Inspired by @kylef's [QueryKit](https://github.com/QueryKit/QueryKit) here.

I'd only see this as complementary to the `NSPredicate` interface.
",jpsim,kylef
888,2014-09-10 23:08:04,"Indexed columns appear to work correctly with core 0.82.3.

Depends on #887.

@alazier 
",tgoyne,alazier
886,2014-09-10 16:04:14,"This didn't work correctly if the object was persisted in a different Realm (it just created an empty row rather than copying it), and `createInRealm:withObject` is a much better way to support copying objects between Realms as it doesn't involve a method doing something very different from what it normally does.

This also changes the semantics of `createInRealm:withObject:` a little: the passed object is now never mutated, while previously linked RLMObjects were added with `addObject:`, which would turn standalone RLMObjects into accessors.

@alazier 
",tgoyne,alazier
885,2014-09-10 15:44:25,"[WIP] Takes care of some issues Alexander had experienced, part 1
@astigsen 

Changes the appearance of table indices to gray, small and right aligned

Always shows floats and doubles with exactly three decimals

Reloads after cancelling editing to return to three decimals.

Also fixes a mouse over issue (mouse pointer should always change over links)
",GreatApe,astigsen
885,2014-09-11 12:17:57,"@jpsim @alazier @tgoyne 

It would be great if this could be reviewed quickly, these are things Alexander felt were quite urgent! Thanks
",GreatApe,jpsim
885,2014-09-11 12:17:57,"@jpsim @alazier @tgoyne 

It would be great if this could be reviewed quickly, these are things Alexander felt were quite urgent! Thanks
",GreatApe,alazier
885,2014-09-11 12:17:57,"@jpsim @alazier @tgoyne 

It would be great if this could be reviewed quickly, these are things Alexander felt were quite urgent! Thanks
",GreatApe,tgoyne
884,2014-09-10 00:29:06,"This requires waiting to update the row accessor on the RLMObject until after all of the values have been copied, as otherwise the old values can't be read. Rather than requiring a temporary RLMObject, refactor the setters to take a Realm and a Row separately.

@alazier 
",tgoyne,alazier
882,2014-09-09 03:18:31,"@tgoyne @alazier 
",jpsim,alazier
882,2014-09-09 03:18:31,"@tgoyne @alazier 
",jpsim,tgoyne
881,2014-09-08 17:26:13,"If the thread's runloop isn't actively running when the notification is sent, the notification will keep the RLMRealm alive until the thread's runloop is run again, since performSelector:onThread:withObject:waitUntilDone: keeps the receiver alive. Work around this by using a separate object which holds a weak reference to the realm. Should fix the crashes in the background refresh test.

@alazier 
",tgoyne,alazier
881,2014-09-08 20:07:27,":+1:

@emanuelez any idea what is going on with CI? Seems like most prs are failing, this one with this error:

ERROR: Publisher org.jenkinsci.plugins.xunit.XUnitPublisher aborted due to exception
java.io.IOException: remote file operation failed: /Users/tightdb/workspace/objc_pr at hudson.remoting.Channel@b3231fa:Mac01
",alazier,emanuelez
880,2014-09-11 09:58:08,"@jpsim @alazier @astigsen @tgoyne
",GreatApe,astigsen
880,2014-09-11 09:58:08,"@jpsim @alazier @astigsen @tgoyne
",GreatApe,jpsim
880,2014-09-11 09:58:08,"@jpsim @alazier @astigsen @tgoyne
",GreatApe,alazier
880,2014-09-11 09:58:08,"@jpsim @alazier @astigsen @tgoyne
",GreatApe,tgoyne
880,2014-09-11 18:05:52,"Oh, it uses the Spotlight search index so the time is negligible.

On 11 sep 2014, at 19:57, ""JP Simard"" <notifications@github.com<mailto:notifications@github.com>> wrote:

@GreatApehttps://github.com/GreatApe how long does this searching process take? Thankfully, NSMetadataQuery searches in the background. Can we show a placeholder if no databases were found and if the search is ongoing?

—
Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-cocoa/pull/880#issuecomment-55302685.
",GreatApe,GreatApehttps
879,2014-09-06 06:06:19,"This PR was previously #645.

The current examples structure isn't working very well. We have to run `sh build.sh build` to build the framework in order to build the examples. This PR moves the structure around and only introduces a single Xcode project per platform/language group, with the appropriate Realm Xcode subproject. So the new examples structure looks like this:



The process to package examples for release is:
1. Install xcodeproj gem
2. Run `./scripts/package_examples.rb`
3. Move the `examples/` folder to the root of the folder to be zipped for release

@emanuelez let me know if you have any questions since you'll be the one integrating this in Jenkins.

@alazier @tgoyne could you please review?
",jpsim,alazier
879,2014-09-06 06:06:19,"This PR was previously #645.

The current examples structure isn't working very well. We have to run `sh build.sh build` to build the framework in order to build the examples. This PR moves the structure around and only introduces a single Xcode project per platform/language group, with the appropriate Realm Xcode subproject. So the new examples structure looks like this:



The process to package examples for release is:
1. Install xcodeproj gem
2. Run `./scripts/package_examples.rb`
3. Move the `examples/` folder to the root of the folder to be zipped for release

@emanuelez let me know if you have any questions since you'll be the one integrating this in Jenkins.

@alazier @tgoyne could you please review?
",jpsim,tgoyne
879,2014-09-06 06:06:19,"This PR was previously #645.

The current examples structure isn't working very well. We have to run `sh build.sh build` to build the framework in order to build the examples. This PR moves the structure around and only introduces a single Xcode project per platform/language group, with the appropriate Realm Xcode subproject. So the new examples structure looks like this:



The process to package examples for release is:
1. Install xcodeproj gem
2. Run `./scripts/package_examples.rb`
3. Move the `examples/` folder to the root of the folder to be zipped for release

@emanuelez let me know if you have any questions since you'll be the one integrating this in Jenkins.

@alazier @tgoyne could you please review?
",jpsim,emanuelez
876,2014-09-05 21:10:06,"And fix some issues with int sizes in obj-c and some Swift initialization stuff in the process.

There's three main changes here:
1. Most of the int property stuff now operates on s, i and q separately, so that the properties can actually act as if they were the correct type. This fixes 64-bit properties sometimes getting truncated to 32 bits, 32-bit properties sometimes _not_ getting truncated to 32 bites, and 16-bit properties not working at all.
2. RLMObjectSchema is now more similar for obj-c and Swift types, with only the Swift-specific parts handled by RLMSwiftSupport. This was done to solve the problem of that the actual size of the int property was being lost (with everything being collapsed to a single size), but also fixes things like the object type of array properties not being validated, and makes primary keys work for Swift.
3. There's now a dummy implementation of RLMSwiftSupport for Xcode 5 so that the only `#if REALM_SWIFT` checks are for which header to include, rather than making some of the actual logic a mess.

@alazier @jpsim 
",tgoyne,alazier
876,2014-09-05 21:10:06,"And fix some issues with int sizes in obj-c and some Swift initialization stuff in the process.

There's three main changes here:
1. Most of the int property stuff now operates on s, i and q separately, so that the properties can actually act as if they were the correct type. This fixes 64-bit properties sometimes getting truncated to 32 bits, 32-bit properties sometimes _not_ getting truncated to 32 bites, and 16-bit properties not working at all.
2. RLMObjectSchema is now more similar for obj-c and Swift types, with only the Swift-specific parts handled by RLMSwiftSupport. This was done to solve the problem of that the actual size of the int property was being lost (with everything being collapsed to a single size), but also fixes things like the object type of array properties not being validated, and makes primary keys work for Swift.
3. There's now a dummy implementation of RLMSwiftSupport for Xcode 5 so that the only `#if REALM_SWIFT` checks are for which header to include, rather than making some of the actual logic a mess.

@alazier @jpsim 
",tgoyne,jpsim
876,2014-09-05 21:54:46,"Nice work! I'm sure @alazier will have more to say, but you get my :+1:
",jpsim,alazier
875,2015-03-10 22:41:17,"@pizthewiz thanks for the suggestion, @yoshyosh just made the change on the website: http://realm.io/docs/cocoa/0.91.0/#property-types
",jpsim,yoshyosh
873,2014-09-04 18:28:32,"@finnschiermer @tgoyne 
",alazier,tgoyne
873,2014-09-04 18:28:32,"@finnschiermer @tgoyne 
",alazier,finnschiermer
872,2014-09-04 18:11:50,"@tgoyne @finnschiermer 
",alazier,tgoyne
872,2014-09-04 18:11:50,"@tgoyne @finnschiermer 
",alazier,finnschiermer
871,2014-09-04 17:14:08,"Eliminates all the duplicated code in RLMAccessorSetter I was complaining about. Could do something similar for the getter, but it'd be a bit uglier.

@alazier 
",tgoyne,alazier
869,2014-09-04 01:30:29,"Missed this when we moved all the predicate handling functionality to the `RLM_VARARG` macro.

@alazier @tgoyne
",jpsim,alazier
869,2014-09-04 01:30:29,"Missed this when we moved all the predicate handling functionality to the `RLM_VARARG` macro.

@alazier @tgoyne
",jpsim,tgoyne
866,2014-09-03 19:25:15,"@tgoyne 

Fixes #854
",alazier,tgoyne
865,2014-09-03 18:41:08,"Actually explain how to use it and add an example.

@alazier @jpsim 
",tgoyne,alazier
865,2014-09-03 18:41:08,"Actually explain how to use it and add an example.

@alazier @jpsim 
",tgoyne,jpsim
864,2014-09-03 18:29:06,"@tgoyne 
",alazier,tgoyne
861,2014-09-02 23:34:05,"@tgoyne 
",jpsim,tgoyne
860,2014-09-02 23:09:28,"As requested at https://groups.google.com/forum/#!topic/realm-users/e7QAkd6iuA0.

@alazier 
",tgoyne,alazier
859,2014-09-02 18:16:25,"No breaking changes relevant to the framework, but the examples needed to be updated.

As always, needs to wait for the beta to be installed on the CI server.

@jpsim 
",tgoyne,jpsim
857,2014-09-01 14:23:18,"This fixes the two crashes Ari and I have been seeing, relating to column and row index out of bounds, basically stemming from timing issues between reloading the tableview and getting cell views from it.

I found a way to reproduce them and from that the cause and was able to fix it by changing the order of certain updates, as well as grouping together column creation (which should have been done from the start).

A new issue has turned up, however, which I have never seen before but comes from a mistake in the way navigation has been set up in the outline view, concerning arrays. It seems that he is assuming that the parent of an array is always a class, when in reality there could be array links within an array.

Depends on all currently outstanding PRs, namely:

Gk browser tooltip fix
Gk browser right click link
Gk browser index in array column
Gk browser better data generator

@alazier @jpsim 
",GreatApe,alazier
857,2014-09-01 14:23:18,"This fixes the two crashes Ari and I have been seeing, relating to column and row index out of bounds, basically stemming from timing issues between reloading the tableview and getting cell views from it.

I found a way to reproduce them and from that the cause and was able to fix it by changing the order of certain updates, as well as grouping together column creation (which should have been done from the start).

A new issue has turned up, however, which I have never seen before but comes from a mistake in the way navigation has been set up in the outline view, concerning arrays. It seems that he is assuming that the parent of an array is always a class, when in reality there could be array links within an array.

Depends on all currently outstanding PRs, namely:

Gk browser tooltip fix
Gk browser right click link
Gk browser index in array column
Gk browser better data generator

@alazier @jpsim 
",GreatApe,jpsim
856,2014-09-04 19:17:51,"@alazier @jpsim : any review comments. Would be good to get this in quickly due to the disable of tooltip.
",bmunkholm,alazier
856,2014-09-04 19:17:51,"@alazier @jpsim : any review comments. Would be good to get this in quickly due to the disable of tooltip.
",bmunkholm,jpsim
856,2014-09-04 19:30:38,"> A quick fix for endlessly recursing tooltips. It seems to be a binding issue but a quick glance at the code indicates that recursion is protected against. Will investigate this.

Are you sure this is needed? @tgoyne fixed this in b9a4dc3.

> The column with row order index for arrays

Can you post a screenshot of this before/after? It's difficult to review when PR's do more than one thing.

> Ability to double click a column separator to resize it to fit the contents, as in excel or finder.

This seems odd to me. Resizing columns in OSX is typically done by dragging from the separator next to column headers:

![](http://www.macobserver.com/imgs/tips/Finder_List_View_2.png)

I've never heard of double clicking column separators to resize.
",jpsim,tgoyne
856,2014-09-04 19:57:37,"Are you sure this is needed? @tgoynehttps://github.com/tgoyne fixed this in b9a4dc3https://github.com/realm/realm-cocoa/commit/b9a4dc345c60c617e574b646aad29a8362d000d5.

I will test this with the latest version. It definitely crashed in the users version, and in my own version but then I didn’t check to make sure I was using the latest bindings.

Can you post a screenshot of this before/after? It's difficult to review when PR's do more than one thing.

Yeah, sorry about that, it was unintentional. This is just a non-editable column on the left listing the index of a row/object within an array

[cid:E3A2352E-B13B-4316-8610-C6CF5773150F]
",GreatApe,tgoynehttps
856,2014-09-09 12:44:35,"@jpsim @alazier @tgoyne 

I updated this to use a custom made description method in the instanceTVC, so it doesn't rely on -description anymore. It turned out that the tooltip needs were too different anyway.
",GreatApe,alazier
851,2014-08-29 09:56:57,"Adds a non-editable column with index number for arrays.

@jpsim @tgoyne @alazier
",GreatApe,jpsim
851,2014-08-29 09:56:57,"Adds a non-editable column with index number for arrays.

@jpsim @tgoyne @alazier
",GreatApe,alazier
851,2014-08-29 09:56:57,"Adds a non-editable column with index number for arrays.

@jpsim @tgoyne @alazier
",GreatApe,tgoyne
845,2014-08-27 13:58:58,"Test data generator now much more flexible

Moved some column sizing stuff (should have been a separate PR, sorry)

Some clean up

@jpsim @alazier @tgoyne 
",GreatApe,jpsim
845,2014-08-27 13:58:58,"Test data generator now much more flexible

Moved some column sizing stuff (should have been a separate PR, sorry)

Some clean up

@jpsim @alazier @tgoyne 
",GreatApe,alazier
845,2014-08-27 13:58:58,"Test data generator now much more flexible

Moved some column sizing stuff (should have been a separate PR, sorry)

Some clean up

@jpsim @alazier @tgoyne 
",GreatApe,tgoyne
843,2014-08-26 19:57:41,"@timanglade @bmunkholm 
",jpsim,bmunkholm
843,2014-08-26 19:57:41,"@timanglade @bmunkholm 
",jpsim,timanglade
839,2014-08-26 14:35:49,"For Some reason CI is reporting success even though there are failures. The failures are diffucult to diagnose as well from the website:

Testing failed:
    testFastEnumeration encountered an error (Test session exited(-1). without completing. If you believe this error represents a bug, please attach the log file at /var/folders/jw/pr5j3rqn1s197yh6qyy97n480000gn/T/com.apple.dt.XCTest-status/Session-2014-08-26_16:30:03-abLzIg.log)
*\* TEST FAILED *

Any ideas @emanuelez ?
",alazier,emanuelez
838,2014-08-25 18:46:04,"@alazier @jpsim 
",tgoyne,alazier
838,2014-08-25 18:46:04,"@alazier @jpsim 
",tgoyne,jpsim
838,2014-08-25 19:59:17,"@rrrlasse Can you explain if core's `TableView` should be copied or not?
",kneth,rrrlasse
837,2014-08-25 15:15:58,"Core's `Query::tableview` method should not be used as it does not support sorting a sorted view. 

See also https://github.com/willmoore/RealmTest for original bug report.

@alazier @tgoyne @jpsim 
",kneth,alazier
837,2014-08-25 15:15:58,"Core's `Query::tableview` method should not be used as it does not support sorting a sorted view. 

See also https://github.com/willmoore/RealmTest for original bug report.

@alazier @tgoyne @jpsim 
",kneth,tgoyne
837,2014-08-25 15:15:58,"Core's `Query::tableview` method should not be used as it does not support sorting a sorted view. 

See also https://github.com/willmoore/RealmTest for original bug report.

@alazier @tgoyne @jpsim 
",kneth,jpsim
835,2014-08-22 10:05:15,"@bmunkholm 
",kneth,bmunkholm
835,2014-08-22 19:26:50,"Since we already have tests for sorting and there's no difference in code path for 3000 objects, I don't think we should add this test. @alazier and @tgoyne agree. Closing.
",jpsim,alazier
835,2014-08-22 19:26:50,"Since we already have tests for sorting and there's no difference in code path for 3000 objects, I don't think we should add this test. @alazier and @tgoyne agree. Closing.
",jpsim,tgoyne
834,2014-08-22 00:51:01,"I'm not entirely clear on why the TestHost target is being built at all for test-all, but this appears to make it at least work rather than give errors about trying to use the OS X framework when building an iOS target.

@jpsim 
",tgoyne,jpsim
832,2014-08-21 22:39:47,"@realm/cocoa 
",astigsen,realm
830,2014-08-21 09:10:34,"If the old data files are present, gcov will attempt to merge with the old
files, sometimes resulting in failures.

@kneth @alazier 
",oleks,alazier
830,2014-08-21 09:10:34,"If the old data files are present, gcov will attempt to merge with the old
files, sometimes resulting in failures.

@kneth @alazier 
",oleks,kneth
830,2014-09-23 08:00:51,"@alazier Could you take a look if you think this is bad XCode practice? Is there a better place I can put the script to delete old .gcda files?
",oleks,alazier
830,2014-10-01 09:12:13,"@alazier Could you review this?
",oleks,alazier
829,2014-08-21 00:11:46,"An alternative to #808, as I think DidChange might actually be the more useful one (for updating non-persisted state based on persisted data). I'm not sure I'm a fan of the name RLMRealmWillChangeNotification, and the semantics are kind of goofy (but a bit less goofy than the current semantics).

Changelog and tests haven't been updated for this yet.

@alazier @jpsim 
",tgoyne,alazier
829,2014-08-21 00:11:46,"An alternative to #808, as I think DidChange might actually be the more useful one (for updating non-persisted state based on persisted data). I'm not sure I'm a fan of the name RLMRealmWillChangeNotification, and the semantics are kind of goofy (but a bit less goofy than the current semantics).

Changelog and tests haven't been updated for this yet.

@alazier @jpsim 
",tgoyne,jpsim
828,2014-08-20 20:35:18,"Fix a pile of small issues and remove the claims that autorefresh makes refreshing and notifications happen ""immediately"" as they're actually only enqueued immediately, and go into a bit more detail about how things work.

@alazier @jpsim 
",tgoyne,alazier
828,2014-08-20 20:35:18,"Fix a pile of small issues and remove the claims that autorefresh makes refreshing and notifications happen ""immediately"" as they're actually only enqueued immediately, and go into a bit more detail about how things work.

@alazier @jpsim 
",tgoyne,jpsim
827,2014-08-20 19:01:06,"This is pretty gross at the moment, but I thought I'd throw it up for comments on if this is even a reasonable thing to be doing at all. This adds implementations of the various string predicates currently not supported by the newer query expressions and manually builds query objects using them. Since it uses NSString's transformation methods it'd also make it easy to add support for NSDiacriticInsensitivePredicateOption.

@alazier @rrrlasse 
",tgoyne,alazier
827,2014-08-20 19:01:06,"This is pretty gross at the moment, but I thought I'd throw it up for comments on if this is even a reasonable thing to be doing at all. This adds implementations of the various string predicates currently not supported by the newer query expressions and manually builds query objects using them. Since it uses NSString's transformation methods it'd also make it easy to add support for NSDiacriticInsensitivePredicateOption.

@alazier @rrrlasse 
",tgoyne,rrrlasse
826,2014-08-20 15:36:30,"@emanuelez 
",kspangsege,emanuelez
825,2014-08-20 15:24:05,"Now saves window size, (position), divider position and column widths.

@alazier @jpsims @tgoyne

depends on view based and to some extent on later commits
",GreatApe,jpsims
825,2014-08-20 15:24:05,"Now saves window size, (position), divider position and column widths.

@alazier @jpsims @tgoyne

depends on view based and to some extent on later commits
",GreatApe,alazier
825,2014-08-20 15:24:05,"Now saves window size, (position), divider position and column widths.

@alazier @jpsims @tgoyne

depends on view based and to some extent on later commits
",GreatApe,tgoyne
824,2014-12-15 18:03:43,"@tgoyne are you working on this? What else do we need before we can make a pr to fix this?
",alazier,tgoyne
824,2014-12-30 19:21:44,"I spent some time investigating sharing Realm files between the simulator and the browser yesterday.  The current approach of putting a `pthread_mutex` in shared memory has the problem of that it requires that all processes be using the exact same version of libpthread.  This happens to be the case for 64-bit iOS 8.1 and OS X 10.10.0, but this isn't something that can be relied on.  I think there's three potential solutions:
1. Build libpthread ourselves and statically link it.
   
   Would have to be OS X/simulator only and use system libpthread for devices, as it uses private APIs on iOS.  Doesn't add support for opening files from 32-bit simulators.  I haven't looked into if this is actually a viable thing to do yet.
2. Use some other mutex that can be shared via mmap.
   
   There doesn't appear to actually be any.  `sem_init` isn't implemented on Apple platforms.  `sem_open` can't be forced to use shared memory under our control.  `semaphore_t` and `semctl` can't be shared via shared memory.  libpthread's internal stuff is based on private APIs we can't use directly on iOS. `lck_mtx_t` doesn't exist on iOS. Comedy option: a spinlock.
3. Use named semaphores rather than sharing mutexes via mmap.
   
   Just implement mutexes and condition variables via `sem_t` and store the semaphore name in the lock file rather than the mutex.  Doesn't look terribly hard to do, but it would require designing some things.

If we go with #1 (or just punt on the whole issue), we'd also need to solve the problem of that the lock file header is different sizes on 32-bit and 64-bit. Currently trying to open a Realm file in the browser which has a lock file generated by a 32-bit simulator infinite loops, since the file is non-empty but not big enough to be a valid lock file, so it assumes that some other process is in the middle of initializing it.

@finnschiermer 
",tgoyne,finnschiermer
823,2014-08-22 20:13:41,"I just answered on the aforementioned CocoaPods GitHub issue. Seems to work for me:

@eni9889 @dismory can you try again now? I just created a small test project with `pod ""Realm"", :git => ""git@github.com:realm/realm-cocoa.git""` here: https://github.com/jpsim/NewRealmPodspec.

It worked fine for me running on CocoaPods `0.33.1`.
",jpsim,dismory
822,2014-08-20 09:24:34,"@kneth @alazier 
",oleks,alazier
822,2014-08-20 09:24:34,"@kneth @alazier 
",oleks,kneth
815,2014-08-19 17:06:26,"As the documentation claims happens.

@alazier @jpsim 
",tgoyne,alazier
815,2014-08-19 17:06:26,"As the documentation claims happens.

@alazier @jpsim 
",tgoyne,jpsim
814,2014-08-19 15:55:42,"Fixes #813. Requires CI to have Xcode6-Beta6 installed before we can merge.

@tgoyne @alazier
",jpsim,alazier
814,2014-08-19 15:55:42,"Fixes #813. Requires CI to have Xcode6-Beta6 installed before we can merge.

@tgoyne @alazier
",jpsim,tgoyne
814,2014-08-20 18:25:18,"Everything is behaving correctly in Xcode, but `build.sh` is having issues (but only with iOS):

### 1. Bad destination

Running `XCODE_VERSION=6 sh build.sh test-ios` outputs:



Specifying a `-destination` of `id=27D94E69-4AFC-4E48-9C48-8E95D4F3071D` resolves the issue for me, but will likely break on other machines. Not sure what the appropriate solution here is.

### 2. `xcpretty` option fails for Xcode6 iOS

Once a destination is specified, all tests pass when running `XCODE_VERSION=6 sh build.sh test-ios` but we get an error when running `XCODE_VERSION=6 sh build.sh test-ios xcpretty`, which is what CI requires.

We get the error in `RLMPlatform.h`, because somehow we try to build the OSX framework all of a sudden:



This is odd, because `xcpretty` just reads `xcodebuild`'s STDOUT, but somehow also modifies its behavior.

/cc @supermarin
",jpsim,supermarin
814,2014-08-22 22:44:53,"Now CI isn't attaching the debugger to Xcode6-Beta6 iOS tests. @emanuelez @kneth could you look into this. This doesn't happen locally for me. Thanks!
",jpsim,kneth
814,2014-08-22 22:44:53,"Now CI isn't attaching the debugger to Xcode6-Beta6 iOS tests. @emanuelez @kneth could you look into this. This doesn't happen locally for me. Thanks!
",jpsim,emanuelez
812,2014-08-19 14:55:35,"Fixes #809.

@alazier @tgoyne 
",jpsim,alazier
812,2014-08-19 14:55:35,"Fixes #809.

@alazier @tgoyne 
",jpsim,tgoyne
810,2014-08-19 16:05:36,"I'd prefer implementing a true `-hash` method.

@alazier @tgoyne what are your thoughts on XORing `_row.get_table()` and `_row.get_index()` for the hash? The main problem I see with that is that the index could change at any time. Any other ideas?
",jpsim,alazier
810,2014-08-19 16:05:36,"I'd prefer implementing a true `-hash` method.

@alazier @tgoyne what are your thoughts on XORing `_row.get_table()` and `_row.get_index()` for the hash? The main problem I see with that is that the index could change at any time. Any other ideas?
",jpsim,tgoyne
808,2014-08-18 23:36:10,"Doesn't really make any sense to send them when the user calls refresh, as they were sent when the actual change happened even when autorefresh is off.

@alazier @jpsim 
",tgoyne,alazier
808,2014-08-18 23:36:10,"Doesn't really make any sense to send them when the user calls refresh, as they were sent when the actual change happened even when autorefresh is off.

@alazier @jpsim 
",tgoyne,jpsim
807,2014-08-18 23:17:01,"We now only perform a transaction when creating a realm for the first thread accessing a particular path. Subsequent threads simply take the schema from a cached realm under the assumption that it is already aligned with what is on disk (which is why we can skip the transaction). We currently still need to iterate through all object types to get table instances specific for each thread.

@tgoyne @jpsim @kspangsege 
",alazier,jpsim
807,2014-08-18 23:17:01,"We now only perform a transaction when creating a realm for the first thread accessing a particular path. Subsequent threads simply take the schema from a cached realm under the assumption that it is already aligned with what is on disk (which is why we can skip the transaction). We currently still need to iterate through all object types to get table instances specific for each thread.

@tgoyne @jpsim @kspangsege 
",alazier,tgoyne
807,2014-08-18 23:17:01,"We now only perform a transaction when creating a realm for the first thread accessing a particular path. Subsequent threads simply take the schema from a cached realm under the assumption that it is already aligned with what is on disk (which is why we can skip the transaction). We currently still need to iterate through all object types to get table instances specific for each thread.

@tgoyne @jpsim @kspangsege 
",alazier,kspangsege
807,2014-08-19 01:39:07,"@tgoyne if you get a chance to check this out and run the test, let me know if you can figure out why the autoupdate test is failing. I can't seem to figure out what is going wrong.
",alazier,tgoyne
806,2014-08-18 22:49:01,"Eliminates the duplicated handling for IN clauses as well as a few other bits, and in the process got multi-level links close enough to working that I just went ahead and finished it.

@alazier @jpsim 
",tgoyne,alazier
806,2014-08-18 22:49:01,"Eliminates the duplicated handling for IN clauses as well as a few other bits, and in the process got multi-level links close enough to working that I just went ahead and finished it.

@alazier @jpsim 
",tgoyne,jpsim
806,2014-08-19 23:49:35,"By golly you are right.

Next question is if core really doesn't support this or if we are using core incorrectly. @rrrlasse or @astigsen might know.
",alazier,astigsen
806,2014-08-19 23:49:35,"By golly you are right.

Next question is if core really doesn't support this or if we are using core incorrectly. @rrrlasse or @astigsen might know.
",alazier,rrrlasse
805,2014-08-18 21:24:40,"@tgoyne @jpsim 

Fixes issues in #803 
",alazier,jpsim
805,2014-08-18 21:24:40,"@tgoyne @jpsim 

Fixes issues in #803 
",alazier,tgoyne
798,2014-08-16 00:59:37,"Track which RLMObjects/RLMArrays we've seen in mutable set and just return ""<cycle>"" as the description if we hit one already seen.

@alazier 
",tgoyne,alazier
797,2014-08-15 18:42:41,"We don't actually want to be doing this at all (adding or deleting items while
fast enumerating isn't supported), and it made looping over a query and
mutating items take quadratic time.

Speeds up fast enumerating and mutating 20k items on my 4S from 22 seconds to 5
seconds.

Updates #796.

@alazier 
",tgoyne,alazier
795,2014-08-14 21:54:19,"@alazier 
",tgoyne,alazier
794,2014-08-14 18:18:34,"And make it so that the types in the cases always match the type being switched
on, so that the compiler can provide more useful warnings.

@alazier 
",tgoyne,alazier
790,2014-08-13 21:40:31,"@kneth @emanuelez @alazier 
",tgoyne,alazier
790,2014-08-13 21:40:31,"@kneth @emanuelez @alazier 
",tgoyne,emanuelez
790,2014-08-13 21:40:31,"@kneth @emanuelez @alazier 
",tgoyne,kneth
789,2014-08-25 19:53:37,"Ok I'll give that a shot. 

> On Aug 25, 2014, at 11:11 AM, Thomas Goyne notifications@github.com wrote:
> 
> Looks like it's a lifetime issue with the backing tableviews. Storing a reference to an unsorted RLMArray and then sorting that rather than sorting a temporary makes the crash go away for me:
> 
> @UIApplicationMain
> class AppDelegate: UIResponder, UIApplicationDelegate {
> 
> 
> 
> }
> Not a solution to the problem, but it may be usable as a workaround while we fix the bug.
> 
> —
> Reply to this email directly or view it on GitHub.
",bendjones,UIApplicationMain
788,2014-10-23 19:34:40,"@bmunkholm how are you handling having a database for your unit tests while your application code uses the defaultRealm? Are you setting a unique realm in your app delegate if in test mode and your application code uses that realm rather than the built in defaultRealm? Would love to know how you are structuring your tests if they use the database your app does or you create a separate database for your tests.
",javierjulio,bmunkholm
787,2014-08-13 17:56:52,"Reformatting some declarations using the feedback given earlier.

@bmunkholm @alazier @tgoyne 
",kneth,bmunkholm
787,2014-08-13 17:56:52,"Reformatting some declarations using the feedback given earlier.

@bmunkholm @alazier @tgoyne 
",kneth,alazier
787,2014-08-13 17:56:52,"Reformatting some declarations using the feedback given earlier.

@bmunkholm @alazier @tgoyne 
",kneth,tgoyne
785,2014-08-13 12:07:52,"@bmunkholm @alazier @tgoyne 
",kspangsege,bmunkholm
785,2014-08-13 12:07:52,"@bmunkholm @alazier @tgoyne 
",kspangsege,alazier
785,2014-08-13 12:07:52,"@bmunkholm @alazier @tgoyne 
",kspangsege,tgoyne
785,2014-08-13 14:53:30,"We don't currently delete tables so we should be fine with this change I assume?

> On Aug 13, 2014, at 5:07 AM, Kristian Spangsege notifications@github.com wrote:
> 
> @bmunkholm @alazier @tgoyne
> 
> —
> Reply to this email directly or view it on GitHub.
",alazier,bmunkholm
785,2014-08-13 14:53:30,"We don't currently delete tables so we should be fine with this change I assume?

> On Aug 13, 2014, at 5:07 AM, Kristian Spangsege notifications@github.com wrote:
> 
> @bmunkholm @alazier @tgoyne
> 
> —
> Reply to this email directly or view it on GitHub.
",alazier,alazier
785,2014-08-13 14:53:30,"We don't currently delete tables so we should be fine with this change I assume?

> On Aug 13, 2014, at 5:07 AM, Kristian Spangsege notifications@github.com wrote:
> 
> @bmunkholm @alazier @tgoyne
> 
> —
> Reply to this email directly or view it on GitHub.
",alazier,tgoyne
784,2014-08-13 11:33:12,"@jpsim @alazier 
",emanuelez,jpsim
784,2014-08-13 11:33:12,"@jpsim @alazier 
",emanuelez,alazier
784,2014-08-13 15:37:12,"@tgoyne do you think this will fix the issue?
",alazier,tgoyne
783,2014-08-13 11:26:05,"@alazier FYI
",emanuelez,alazier
783,2014-08-13 11:34:09,"Reviewed at desk by @kneth and @bmunkholm 
",emanuelez,bmunkholm
783,2014-08-13 11:34:09,"Reviewed at desk by @kneth and @bmunkholm 
",emanuelez,kneth
781,2014-08-13 03:13:02,"http://realm.io/docs/cocoa/0.82.0/#models

> Realm data models are defined using traditional NSObject-style classes with @properties. Simply subclass RLMObject to create your Realm data model objects. **Apart from the fact that they can be added to a Realm for persistence and sharing between threads**, Realm model objects function like any other objective-c objects - you can add your own methods and protocols to them and use them like you would any other object. **The only restriction is that objects can be used only on the thread on which they were created.**

The two bold sentences contradict each other and what does it mean?
",dismory,properties
780,2014-08-12 22:09:26,"@alazier 
",tgoyne,alazier
779,2014-08-12 16:51:05,"@tgoyne 
",alazier,tgoyne
778,2014-08-12 16:50:56,"@alazier 
",tgoyne,alazier
778,2014-08-13 20:48:15,"Added tests for passing things other than constant expressions in the BETWEEN/IN aggregates, added a check for those (NSExpression already threw an exception in that case, but one with a confusing error message), and cleaned up some stuff.

@alazier 
",tgoyne,alazier
777,2014-08-12 16:48:19,"Our macro to disable the timer for iOS was incorrect. This removes the timer for all platforms, since it seems to be causing issues for users and we plan to implement a different approach for synchronizing processes around a single realm file. 

@tgoyne @astigsen 
",alazier,astigsen
777,2014-08-12 16:48:19,"Our macro to disable the timer for iOS was incorrect. This removes the timer for all platforms, since it seems to be causing issues for users and we plan to implement a different approach for synchronizing processes around a single realm file. 

@tgoyne @astigsen 
",alazier,tgoyne
776,2014-08-12 16:41:30,":+1: assuming CI passes - would also be good to verify that this fixes the issue @kneth was seeing.
",alazier,kneth
775,2014-08-12 15:47:40,"@tgoyne 
",alazier,tgoyne
772,2014-08-12 00:47:11,"@alazier 
",tgoyne,alazier
771,2014-08-11 23:40:09,"@alazier 
",tgoyne,alazier
770,2014-08-11 23:11:05,"@tgoyne 
",alazier,tgoyne
769,2014-08-11 20:48:12,"Rather than producing weird errors and bizarre behavior when they're actually used.

Remove the unit test which was testing them since there's no way to have an invalid subclass for just a single test.

@alazier 
",tgoyne,alazier
768,2014-08-11 17:05:27,"The actual functionality seems to work correctly, but there weren't any tests for it.

@alazier
",tgoyne,alazier
767,2014-08-11 16:38:34,"Fixes an issue where we were downcasting to int when constructing our query.

@tgoyne 
",alazier,tgoyne
766,2014-08-11 14:08:12,"In general, we prefer `type *var` over `type * var`.

This is the output of the following command:



Depends on pull request #765.

@bmunkholm @alazier @tgoyne 
",kneth,bmunkholm
766,2014-08-11 14:08:12,"In general, we prefer `type *var` over `type * var`.

This is the output of the following command:



Depends on pull request #765.

@bmunkholm @alazier @tgoyne 
",kneth,alazier
766,2014-08-11 14:08:12,"In general, we prefer `type *var` over `type * var`.

This is the output of the following command:



Depends on pull request #765.

@bmunkholm @alazier @tgoyne 
",kneth,tgoyne
765,2014-08-11 13:48:18,"In release mode, write transactions must be performed using an instance of RLMRealm.

The unit tests performed within Xcode are executed in debug mode while `sh build.sh test` will execute in release mode. Apparently, `[RLMRealm.defaultRealm beginWriteTransaction]` will - in release mode - do a commit while the write transaction will remain open in debug mode. I guess that the Objective C runtime will deallocate objects earlier in release mode, and an auto commit is performed too early.

@alazier @tgoyne 
",kneth,alazier
765,2014-08-11 13:48:18,"In release mode, write transactions must be performed using an instance of RLMRealm.

The unit tests performed within Xcode are executed in debug mode while `sh build.sh test` will execute in release mode. Apparently, `[RLMRealm.defaultRealm beginWriteTransaction]` will - in release mode - do a commit while the write transaction will remain open in debug mode. I guess that the Objective C runtime will deallocate objects earlier in release mode, and an auto commit is performed too early.

@alazier @tgoyne 
",kneth,tgoyne
764,2014-08-11 21:52:30,"@timanglade have any thoughts here?
",alazier,timanglade
764,2014-08-14 09:32:40,"@relz: Can you be specific about what the Dependency badge really tells us? Obviously Realm is used in more than one project (maybe without pod dependency).
",bmunkholm,relz
761,2014-08-08 21:11:47,"Switch to building from source to better match how CocoaPods wants to work and
reduce the required download size, and add a subspec with only the headers to
work around the issues with overlinking the libraries in unit tests.

Closes #690.

@alazier 
",tgoyne,alazier
761,2014-08-08 22:06:02,"Looks good to me, but I am not a pod-master. Would be good if @jpsim or @emanuelez chimed in, but if we are sure it works I'm fine with a merge.
",alazier,jpsim
761,2014-08-08 22:06:02,"Looks good to me, but I am not a pod-master. Would be good if @jpsim or @emanuelez chimed in, but if we are sure it works I'm fine with a merge.
",alazier,emanuelez
760,2014-08-08 19:50:12,"Handle missing keys and NSNull values for arrays and relationships which don't
have a default specified as there's an obvious default for them and people are
confused by them being required.

@alazier 
",tgoyne,alazier
759,2014-08-08 18:47:29,"Speed impact is <1% for all of the performance tests other than array property enumeration and adding standalone objects to a realm. Those two were around 10% slower, so I made a quick optimization pass and got both faster than they were before this change.

@alazier 
",tgoyne,alazier
758,2014-08-08 17:44:02,"Currently only runs the obj-c tests because the Swift tests don't work on iOS 7 and running tests on iOS 8 devices seems to be broken at the moment.

@alazier 
",tgoyne,alazier
756,2014-08-20 09:00:11,"@jpsim @alazier @tgoyne @tgoyne 

Can we merge this now? I know it's a pretty big merge but in a sense it is minimal. And all subsequent merges depend heavily on it.

It basically just migrates the table view from the (outdated) cell based approach, to a view based approach, very similar to ios. There are a lot of changes but quite straightforward once you're familiar with view based table views!
",GreatApe,jpsim
756,2014-08-20 09:00:11,"@jpsim @alazier @tgoyne @tgoyne 

Can we merge this now? I know it's a pretty big merge but in a sense it is minimal. And all subsequent merges depend heavily on it.

It basically just migrates the table view from the (outdated) cell based approach, to a view based approach, very similar to ios. There are a lot of changes but quite straightforward once you're familiar with view based table views!
",GreatApe,alazier
756,2014-08-20 09:00:11,"@jpsim @alazier @tgoyne @tgoyne 

Can we merge this now? I know it's a pretty big merge but in a sense it is minimal. And all subsequent merges depend heavily on it.

It basically just migrates the table view from the (outdated) cell based approach, to a view based approach, very similar to ios. There are a lot of changes but quite straightforward once you're familiar with view based table views!
",GreatApe,tgoyne
756,2014-08-20 13:27:13,"Only problem I have run int is performance degredation - when opening a
6.3mb realm file, trying to edit a cell ends up hanging the ui for a few
seconds. I don't believe this used to be the case.

Otherwise I'm ok for merging with the caveat that we should soon take a
step back and come up with a plan for fixing the codebase. Of course we can
have this discussion after the merge. Another thing we will want is a
number of datasets which allow us to fully test the browser (at least
manually). Again this can wait until after the merge but this would make
reviewing and testing a whole lot easier in the future.

On Wed, Aug 20, 2014 at 2:00 AM, GustafKugel notifications@github.com
wrote:

> @jpsim https://github.com/jpsim @alazier https://github.com/alazier
> @tgoyne https://github.com/tgoyne @tgoyne https://github.com/tgoyne
> 
> Can we merge this now? I know it's a pretty big merge but in a sense it is
> minimal. All subsequent merges depend heavily on it.
> 
> It basically just migrates the table view from the (outdated) cell based
> approach, to a view based approach, very similar to ios. There are a lot of
> changes but quite straightforward once you're familiar with view based
> table views!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/756#issuecomment-52750548.
",alazier,jpsim
756,2014-08-20 13:27:13,"Only problem I have run int is performance degredation - when opening a
6.3mb realm file, trying to edit a cell ends up hanging the ui for a few
seconds. I don't believe this used to be the case.

Otherwise I'm ok for merging with the caveat that we should soon take a
step back and come up with a plan for fixing the codebase. Of course we can
have this discussion after the merge. Another thing we will want is a
number of datasets which allow us to fully test the browser (at least
manually). Again this can wait until after the merge but this would make
reviewing and testing a whole lot easier in the future.

On Wed, Aug 20, 2014 at 2:00 AM, GustafKugel notifications@github.com
wrote:

> @jpsim https://github.com/jpsim @alazier https://github.com/alazier
> @tgoyne https://github.com/tgoyne @tgoyne https://github.com/tgoyne
> 
> Can we merge this now? I know it's a pretty big merge but in a sense it is
> minimal. All subsequent merges depend heavily on it.
> 
> It basically just migrates the table view from the (outdated) cell based
> approach, to a view based approach, very similar to ios. There are a lot of
> changes but quite straightforward once you're familiar with view based
> table views!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/756#issuecomment-52750548.
",alazier,alazier
756,2014-08-20 13:27:13,"Only problem I have run int is performance degredation - when opening a
6.3mb realm file, trying to edit a cell ends up hanging the ui for a few
seconds. I don't believe this used to be the case.

Otherwise I'm ok for merging with the caveat that we should soon take a
step back and come up with a plan for fixing the codebase. Of course we can
have this discussion after the merge. Another thing we will want is a
number of datasets which allow us to fully test the browser (at least
manually). Again this can wait until after the merge but this would make
reviewing and testing a whole lot easier in the future.

On Wed, Aug 20, 2014 at 2:00 AM, GustafKugel notifications@github.com
wrote:

> @jpsim https://github.com/jpsim @alazier https://github.com/alazier
> @tgoyne https://github.com/tgoyne @tgoyne https://github.com/tgoyne
> 
> Can we merge this now? I know it's a pretty big merge but in a sense it is
> minimal. All subsequent merges depend heavily on it.
> 
> It basically just migrates the table view from the (outdated) cell based
> approach, to a view based approach, very similar to ios. There are a lot of
> changes but quite straightforward once you're familiar with view based
> table views!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/756#issuecomment-52750548.
",alazier,tgoyne
753,2014-08-06 17:08:44,"@tgoyne 

Addresses #752 

Previous message:

> Object type '(null)' not persisted in Realm

is now:

> Invalid value 'nil' for property 'name'
",alazier,tgoyne
751,2014-08-06 15:45:11,"Initialize the backing array for standalone arrays created with initWithObjectClassName:, and switch the subclasses to using initViewWithObjectClassName to avoid having them create a pointless backing array.

@alazier 
",tgoyne,alazier
749,2014-10-14 01:38:38,"Hi everyone. Thanks to the good work by @tgoyne and @alazier, it's now possible to sort query results by multiple properties in the `master` branch. This will make its way into an official release shortly.

It's an instance method on `RLMResults`: [`- (RLMResults *)sortedResultsUsingDescriptors:(NSArray *)properties;`](https://github.com/realm/realm-cocoa/blob/master/Realm/RLMResults.h#L161)
",jpsim,alazier
749,2014-10-14 01:38:38,"Hi everyone. Thanks to the good work by @tgoyne and @alazier, it's now possible to sort query results by multiple properties in the `master` branch. This will make its way into an official release shortly.

It's an instance method on `RLMResults`: [`- (RLMResults *)sortedResultsUsingDescriptors:(NSArray *)properties;`](https://github.com/realm/realm-cocoa/blob/master/Realm/RLMResults.h#L161)
",jpsim,tgoyne
747,2014-08-06 08:10:22,"I'm not sure what our policy is about this sort of stuff, so this is a pull request to learn the policy.

@alazier @kneth 
",oleks,alazier
747,2014-08-06 08:10:22,"I'm not sure what our policy is about this sort of stuff, so this is a pull request to learn the policy.

@alazier @kneth 
",oleks,kneth
745,2014-08-06 00:05:58,"@tgoyne 
",alazier,tgoyne
744,2014-08-05 23:36:33,"@tgoyne 
",alazier,tgoyne
742,2014-08-05 18:34:36,"The tightdb::Query object was never being deleted, and fortunately doesn't even need to be heap-allocated.

The test is a little fiddly due to trying to avoid false-positives and taking forever to run while still catching the leak.

@alazier 
",tgoyne,alazier
740,2014-08-05 17:11:58,":+1: from @tgoyne 
",alazier,tgoyne
737,2014-08-05 15:16:01,"@emanuelez you around and able to help with this? 
",alazier,emanuelez
735,2014-08-05 00:17:42,"This ""fixes"" #690 by making it so that the schema also contains objects which inherit from a different RLMObject. The given sample works and all tests pass, but I'm still not at all confident that this is actually a safe thing to be doing. Any thoughts on ways this could explode on us? I also need to make sure it's not going to significantly hurt startup performance.

@alazier 
",tgoyne,alazier
735,2014-08-07 21:38:03,"@emanuelez 
",kspangsege,emanuelez
734,2014-08-04 21:18:17,"@alazier @jpsim 
",tgoyne,alazier
734,2014-08-04 21:18:17,"@alazier @jpsim 
",tgoyne,jpsim
734,2014-08-04 21:32:25,"Are you sure we need to force the use of `dynamic` since users are already deriving from RLMObject which is in objc? It seems like dynamic dispatch is still used in this case or with the `@objc` attribute.
",alazier,objc
734,2014-08-04 21:34:51,"@objc no longer forces things to use dynamic dispatch as of beta 5.
",tgoyne,objc
729,2014-08-04 20:25:36,":+1: from me. @alazier?
",tgoyne,alazier
728,2014-08-02 00:41:58,"This was unimplemented before.

The refresh timer is unnecessary on iOS.

@tgoyne 
",alazier,tgoyne
724,2014-07-31 23:57:00,"@alazier 
",tgoyne,alazier
723,2014-07-31 23:29:28,"I'm not entirely clear on how, but libRealm-fat.a already has a copy of
tightdb, so adding a second copy with libtool is unnecessary and makes the
final framework 25% larger.

@alazier @jpsim 
",tgoyne,alazier
723,2014-07-31 23:29:28,"I'm not entirely clear on how, but libRealm-fat.a already has a copy of
tightdb, so adding a second copy with libtool is unnecessary and makes the
final framework 25% larger.

@alazier @jpsim 
",tgoyne,jpsim
722,2014-07-31 21:47:42,"Use an autoreleased NSMutableArray rather than id[] to keep the objects alive so that they eventually get deleted if the caller breaks out of the loop.

@alazier @jpsim 
",tgoyne,alazier
722,2014-07-31 21:47:42,"Use an autoreleased NSMutableArray rather than id[] to keep the objects alive so that they eventually get deleted if the caller breaks out of the loop.

@alazier @jpsim 
",tgoyne,jpsim
721,2014-07-31 20:52:40,"Replacement for #665 

Haven't tested on the device yet.

@jpsim @tgoyne 
",alazier,jpsim
721,2014-07-31 20:52:40,"Replacement for #665 

Haven't tested on the device yet.

@jpsim @tgoyne 
",alazier,tgoyne
720,2014-07-31 19:57:35,"Using _backingView.get_parent().where(&_backingView) leads to a dangling
reference if the new RLMArray outlives the parent, while creating a new query
for the same table view with query.tableview(_backingView) appears to work
fine.

@alazier
",tgoyne,alazier
719,2014-07-31 00:20:39,"And when not running in a sandbox, use the bundle identifier as a subdirectory name so that each application has its own default realm file rather than sharing them, falling back to the executable name if it's not running in a bundle.

@alazier @jpsim 
",tgoyne,alazier
719,2014-07-31 00:20:39,"And when not running in a sandbox, use the bundle identifier as a subdirectory name so that each application has its own default realm file rather than sharing them, falling back to the executable name if it's not running in a bundle.

@alazier @jpsim 
",tgoyne,jpsim
718,2014-07-30 20:14:16,"This makes trying to call either of these messages a compilation error.

Any suggestions for a better error message?

@jpsim @alazier 
",tgoyne,jpsim
718,2014-07-30 20:14:16,"This makes trying to call either of these messages a compilation error.

Any suggestions for a better error message?

@jpsim @alazier 
",tgoyne,alazier
716,2014-07-30 19:29:25,"Why does it matter if a JSON field is null if it is not intended to be persisted?

@interface User : RLMObject
@property NSString *name;
@end

userJSON:
{
name: Josh
city: null
}

calling [User createInDefaultRealmWithObject:userJSON] will throw
'RLMException', reason: 'Object type '(null)' not persisted in Realm'

It doesn't seem right to me that I would need to take into account every possible null field and either remove it from the JSON or convert it into a non null value.
",jpstern,end
716,2014-07-30 19:29:25,"Why does it matter if a JSON field is null if it is not intended to be persisted?

@interface User : RLMObject
@property NSString *name;
@end

userJSON:
{
name: Josh
city: null
}

calling [User createInDefaultRealmWithObject:userJSON] will throw
'RLMException', reason: 'Object type '(null)' not persisted in Realm'

It doesn't seem right to me that I would need to take into account every possible null field and either remove it from the JSON or convert it into a non null value.
",jpstern,interface
716,2014-07-30 19:29:25,"Why does it matter if a JSON field is null if it is not intended to be persisted?

@interface User : RLMObject
@property NSString *name;
@end

userJSON:
{
name: Josh
city: null
}

calling [User createInDefaultRealmWithObject:userJSON] will throw
'RLMException', reason: 'Object type '(null)' not persisted in Realm'

It doesn't seem right to me that I would need to take into account every possible null field and either remove it from the JSON or convert it into a non null value.
",jpstern,property
716,2014-07-31 17:19:36,"Everything works fine if the JSON value isn't equivalent to NSNull

For example this would work fine:

@interface User : RLMObject
@property NSString *name;
@end

userJSON:
{
name: Josh,
state: MI,
zip: 11111
}

but, as soon as you add the city field with a null value it will crash.

userJSON:
{
name: Josh,
state: MI,
zip: 11111,
city: null
}
",jpstern,end
716,2014-07-31 17:19:36,"Everything works fine if the JSON value isn't equivalent to NSNull

For example this would work fine:

@interface User : RLMObject
@property NSString *name;
@end

userJSON:
{
name: Josh,
state: MI,
zip: 11111
}

but, as soon as you add the city field with a null value it will crash.

userJSON:
{
name: Josh,
state: MI,
zip: 11111,
city: null
}
",jpstern,interface
716,2014-07-31 17:19:36,"Everything works fine if the JSON value isn't equivalent to NSNull

For example this would work fine:

@interface User : RLMObject
@property NSString *name;
@end

userJSON:
{
name: Josh,
state: MI,
zip: 11111
}

but, as soon as you add the city field with a null value it will crash.

userJSON:
{
name: Josh,
state: MI,
zip: 11111,
city: null
}
",jpstern,property
715,2014-07-30 18:04:32,"Simple bugfix.

@tgoyne 
",alazier,tgoyne
714,2014-07-30 16:33:07,"@jpsim 
",tgoyne,jpsim
712,2014-07-30 15:35:36,"There's no particularly pleasant way to set REALM_CORE_VERSION when
building from Xcode, so try to automatically detect that the copy of the
core was built locally and leave it alone if so.

@alazier @emanuelez @jpsim 
",tgoyne,alazier
712,2014-07-30 15:35:36,"There's no particularly pleasant way to set REALM_CORE_VERSION when
building from Xcode, so try to automatically detect that the copy of the
core was built locally and leave it alone if so.

@alazier @emanuelez @jpsim 
",tgoyne,emanuelez
712,2014-07-30 15:35:36,"There's no particularly pleasant way to set REALM_CORE_VERSION when
building from Xcode, so try to automatically detect that the copy of the
core was built locally and leave it alone if so.

@alazier @emanuelez @jpsim 
",tgoyne,jpsim
712,2014-07-30 21:04:38,"I will defer to @emanuelez and @jpsim on this one as they are the build masters.
",alazier,jpsim
712,2014-07-30 21:04:38,"I will defer to @emanuelez and @jpsim on this one as they are the build masters.
",alazier,emanuelez
711,2014-07-30 14:47:27,"@alazier @kspangsege 
",oleks,alazier
711,2014-07-30 14:47:27,"@alazier @kspangsege 
",oleks,kspangsege
710,2014-07-30 13:13:06,"Maybe we should really throw the same exception, but for now, this just increases branch coverage slightly.

@alazier @kspangsege 
",oleks,alazier
710,2014-07-30 13:13:06,"Maybe we should really throw the same exception, but for now, this just increases branch coverage slightly.

@alazier @kspangsege 
",oleks,kspangsege
709,2014-07-30 18:36:07,"This one is interesting... I was able to reproduce the issue. The strange part is that it doesn't double in size on every launch, which leads me to think there must be a race condition somewhere.

Also note that no content is duplicated to cause this increase in file size, as there are no duplicate entries visible in the Realm Browser.

Hopefully someone from the core team can look into why these two realm files (with the same entries) are different sizes:

http://static.realm.io/debug/small_realm.zip
http://static.realm.io/debug/large_realm.zip

/cc @kspangsege @rrrlasse @finnschiermer 
",jpsim,rrrlasse
709,2014-07-30 18:36:07,"This one is interesting... I was able to reproduce the issue. The strange part is that it doesn't double in size on every launch, which leads me to think there must be a race condition somewhere.

Also note that no content is duplicated to cause this increase in file size, as there are no duplicate entries visible in the Realm Browser.

Hopefully someone from the core team can look into why these two realm files (with the same entries) are different sizes:

http://static.realm.io/debug/small_realm.zip
http://static.realm.io/debug/large_realm.zip

/cc @kspangsege @rrrlasse @finnschiermer 
",jpsim,kspangsege
709,2014-07-30 18:36:07,"This one is interesting... I was able to reproduce the issue. The strange part is that it doesn't double in size on every launch, which leads me to think there must be a race condition somewhere.

Also note that no content is duplicated to cause this increase in file size, as there are no duplicate entries visible in the Realm Browser.

Hopefully someone from the core team can look into why these two realm files (with the same entries) are different sizes:

http://static.realm.io/debug/small_realm.zip
http://static.realm.io/debug/large_realm.zip

/cc @kspangsege @rrrlasse @finnschiermer 
",jpsim,finnschiermer
709,2014-07-30 18:45:06,"My guess is that we somewhere in the binding is holding on to a read
transaction, preventing reuse of the old space.

On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
wrote:

> This one is interesting... I was able to reproduce the issue. The strange
> part is that it doesn't double in size on every launch, which leads me to
> think there must be a race condition somewhere.
> 
> Also note that no content is duplicated to cause this increase in file
> size, as there are no duplicate entries visible in the Realm Browser.
> 
> Hopefully someone from the core team can look into why these two realm
> files (with the same entries) are different sizes:
> 
> http://static.realm.io/debug/small_realm.zip
> http://static.realm.io/debug/large_realm.zip
> 
> /cc @kspangsege https://github.com/kspangsege @rrrlasse
> https://github.com/rrrlasse @finnschiermer
> https://github.com/finnschiermer
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
",astigsen,rrrlasse
709,2014-07-30 18:45:06,"My guess is that we somewhere in the binding is holding on to a read
transaction, preventing reuse of the old space.

On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
wrote:

> This one is interesting... I was able to reproduce the issue. The strange
> part is that it doesn't double in size on every launch, which leads me to
> think there must be a race condition somewhere.
> 
> Also note that no content is duplicated to cause this increase in file
> size, as there are no duplicate entries visible in the Realm Browser.
> 
> Hopefully someone from the core team can look into why these two realm
> files (with the same entries) are different sizes:
> 
> http://static.realm.io/debug/small_realm.zip
> http://static.realm.io/debug/large_realm.zip
> 
> /cc @kspangsege https://github.com/kspangsege @rrrlasse
> https://github.com/rrrlasse @finnschiermer
> https://github.com/finnschiermer
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
",astigsen,kspangsege
709,2014-07-30 18:45:06,"My guess is that we somewhere in the binding is holding on to a read
transaction, preventing reuse of the old space.

On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
wrote:

> This one is interesting... I was able to reproduce the issue. The strange
> part is that it doesn't double in size on every launch, which leads me to
> think there must be a race condition somewhere.
> 
> Also note that no content is duplicated to cause this increase in file
> size, as there are no duplicate entries visible in the Realm Browser.
> 
> Hopefully someone from the core team can look into why these two realm
> files (with the same entries) are different sizes:
> 
> http://static.realm.io/debug/small_realm.zip
> http://static.realm.io/debug/large_realm.zip
> 
> /cc @kspangsege https://github.com/kspangsege @rrrlasse
> https://github.com/rrrlasse @finnschiermer
> https://github.com/finnschiermer
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
",astigsen,finnschiermer
709,2014-07-30 19:36:12,"Each Realm file does contain a ""map"" of what it thinks is free space inside
the file (Group::m_free_positions, Group::m_free_lengths). There is a
chance that the problem is due to a kind of corruption in this map.
Unfortunately we don't have code to verify the consistency of this
free-space map relative to the used space (that which is reachable from the
root node). I'll write this code and see what it tells me.

On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com wrote:

> My guess is that we somewhere in the binding is holding on to a read
> transaction, preventing reuse of the old space.
> 
> On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> wrote:
> 
> > This one is interesting... I was able to reproduce the issue. The
> > strange
> > part is that it doesn't double in size on every launch, which leads me
> > to
> > think there must be a race condition somewhere.
> > 
> > Also note that no content is duplicated to cause this increase in file
> > size, as there are no duplicate entries visible in the Realm Browser.
> > 
> > Hopefully someone from the core team can look into why these two realm
> > files (with the same entries) are different sizes:
> > 
> > http://static.realm.io/debug/small_realm.zip
> > http://static.realm.io/debug/large_realm.zip
> > 
> > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > https://github.com/rrrlasse @finnschiermer
> > https://github.com/finnschiermer
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",kspangsege,rrrlasse
709,2014-07-30 19:36:12,"Each Realm file does contain a ""map"" of what it thinks is free space inside
the file (Group::m_free_positions, Group::m_free_lengths). There is a
chance that the problem is due to a kind of corruption in this map.
Unfortunately we don't have code to verify the consistency of this
free-space map relative to the used space (that which is reachable from the
root node). I'll write this code and see what it tells me.

On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com wrote:

> My guess is that we somewhere in the binding is holding on to a read
> transaction, preventing reuse of the old space.
> 
> On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> wrote:
> 
> > This one is interesting... I was able to reproduce the issue. The
> > strange
> > part is that it doesn't double in size on every launch, which leads me
> > to
> > think there must be a race condition somewhere.
> > 
> > Also note that no content is duplicated to cause this increase in file
> > size, as there are no duplicate entries visible in the Realm Browser.
> > 
> > Hopefully someone from the core team can look into why these two realm
> > files (with the same entries) are different sizes:
> > 
> > http://static.realm.io/debug/small_realm.zip
> > http://static.realm.io/debug/large_realm.zip
> > 
> > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > https://github.com/rrrlasse @finnschiermer
> > https://github.com/finnschiermer
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",kspangsege,kspangsege
709,2014-07-30 19:36:12,"Each Realm file does contain a ""map"" of what it thinks is free space inside
the file (Group::m_free_positions, Group::m_free_lengths). There is a
chance that the problem is due to a kind of corruption in this map.
Unfortunately we don't have code to verify the consistency of this
free-space map relative to the used space (that which is reachable from the
root node). I'll write this code and see what it tells me.

On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com wrote:

> My guess is that we somewhere in the binding is holding on to a read
> transaction, preventing reuse of the old space.
> 
> On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> wrote:
> 
> > This one is interesting... I was able to reproduce the issue. The
> > strange
> > part is that it doesn't double in size on every launch, which leads me
> > to
> > think there must be a race condition somewhere.
> > 
> > Also note that no content is duplicated to cause this increase in file
> > size, as there are no duplicate entries visible in the Realm Browser.
> > 
> > Hopefully someone from the core team can look into why these two realm
> > files (with the same entries) are different sizes:
> > 
> > http://static.realm.io/debug/small_realm.zip
> > http://static.realm.io/debug/large_realm.zip
> > 
> > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > https://github.com/rrrlasse @finnschiermer
> > https://github.com/finnschiermer
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",kspangsege,finnschiermer
709,2014-07-31 08:30:14,"This might not be an error at all.

As soon as multiple realms are in use in the app, timing differences
may lead to different file layouts. There are two causes of wasted space:
Fragmentation and retained versions.

Fragmentation may occur and cause a file size which is significantly larger
than the contained data. For larger sizes the fragmentation usually is a
small problem.
But note, that in the context of our leaf sizes, both the files presented
here must
be considered small .. meaning that significant fragmentation may occur.

Retained versions hold data for realms which are older than the most recent.
As these versions are released they become free data, but the free areas can
only be taken into use by commits occurring _after_ the release.

Even though the application exits and the lock file is removed, different
file sizes may
still result, because the database is not ""compacted"" when the app exits.
When
the app exits, all retained versions are freed, BUT all the space they
consumed
will have been allocated in the file, scattered around in it, and as there
is no
compaction, the file does not shrink.

So filesize depends very much on the exact operation of the app. Especially
for
small sizes and applications which (at some point in their live) have many
retained versions.

Core limits the number of retained versions to 100 if I remember correctly.
If each of these versions hold changes to most of the data, each version
may take up as much space as the final version.

/Finn

On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com wrote:

> My guess is that we somewhere in the binding is holding on to a read
> transaction, preventing reuse of the old space.
> 
> On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> wrote:
> 
> > This one is interesting... I was able to reproduce the issue. The
> > strange
> > part is that it doesn't double in size on every launch, which leads me
> > to
> > think there must be a race condition somewhere.
> > 
> > Also note that no content is duplicated to cause this increase in file
> > size, as there are no duplicate entries visible in the Realm Browser.
> > 
> > Hopefully someone from the core team can look into why these two realm
> > files (with the same entries) are different sizes:
> > 
> > http://static.realm.io/debug/small_realm.zip
> > http://static.realm.io/debug/large_realm.zip
> > 
> > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > https://github.com/rrrlasse @finnschiermer
> > https://github.com/finnschiermer
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",finnschiermer,rrrlasse
709,2014-07-31 08:30:14,"This might not be an error at all.

As soon as multiple realms are in use in the app, timing differences
may lead to different file layouts. There are two causes of wasted space:
Fragmentation and retained versions.

Fragmentation may occur and cause a file size which is significantly larger
than the contained data. For larger sizes the fragmentation usually is a
small problem.
But note, that in the context of our leaf sizes, both the files presented
here must
be considered small .. meaning that significant fragmentation may occur.

Retained versions hold data for realms which are older than the most recent.
As these versions are released they become free data, but the free areas can
only be taken into use by commits occurring _after_ the release.

Even though the application exits and the lock file is removed, different
file sizes may
still result, because the database is not ""compacted"" when the app exits.
When
the app exits, all retained versions are freed, BUT all the space they
consumed
will have been allocated in the file, scattered around in it, and as there
is no
compaction, the file does not shrink.

So filesize depends very much on the exact operation of the app. Especially
for
small sizes and applications which (at some point in their live) have many
retained versions.

Core limits the number of retained versions to 100 if I remember correctly.
If each of these versions hold changes to most of the data, each version
may take up as much space as the final version.

/Finn

On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com wrote:

> My guess is that we somewhere in the binding is holding on to a read
> transaction, preventing reuse of the old space.
> 
> On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> wrote:
> 
> > This one is interesting... I was able to reproduce the issue. The
> > strange
> > part is that it doesn't double in size on every launch, which leads me
> > to
> > think there must be a race condition somewhere.
> > 
> > Also note that no content is duplicated to cause this increase in file
> > size, as there are no duplicate entries visible in the Realm Browser.
> > 
> > Hopefully someone from the core team can look into why these two realm
> > files (with the same entries) are different sizes:
> > 
> > http://static.realm.io/debug/small_realm.zip
> > http://static.realm.io/debug/large_realm.zip
> > 
> > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > https://github.com/rrrlasse @finnschiermer
> > https://github.com/finnschiermer
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",finnschiermer,finnschiermer
709,2014-07-31 08:40:29,"I didn't remember correctly. There are no limit to the number of retained
versions.

On Thu, Jul 31, 2014 at 10:30 AM, Finn Schiermer Andersen fsa@realm.io
wrote:

> This might not be an error at all.
> 
> As soon as multiple realms are in use in the app, timing differences
> may lead to different file layouts. There are two causes of wasted space:
> Fragmentation and retained versions.
> 
> Fragmentation may occur and cause a file size which is significantly
> larger than the contained data. For larger sizes the fragmentation usually
> is a small problem.
> But note, that in the context of our leaf sizes, both the files presented
> here must
> be considered small .. meaning that significant fragmentation may occur.
> 
> Retained versions hold data for realms which are older than the most
> recent.
> As these versions are released they become free data, but the free areas
> can
> only be taken into use by commits occurring _after_ the release.
> 
> Even though the application exits and the lock file is removed, different
> file sizes may
> still result, because the database is not ""compacted"" when the app exits.
> When
> the app exits, all retained versions are freed, BUT all the space they
> consumed
> will have been allocated in the file, scattered around in it, and as there
> is no
> compaction, the file does not shrink.
> 
> So filesize depends very much on the exact operation of the app.
> Especially for
> small sizes and applications which (at some point in their live) have many
> retained versions.
> 
> Core limits the number of retained versions to 100 if I remember correctly.
> If each of these versions hold changes to most of the data, each version
> may take up as much space as the final version.
> 
> /Finn
> 
> On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com
> wrote:
> 
> > My guess is that we somewhere in the binding is holding on to a read
> > transaction, preventing reuse of the old space.
> > 
> > On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> > wrote:
> > 
> > > This one is interesting... I was able to reproduce the issue. The
> > > strange
> > > part is that it doesn't double in size on every launch, which leads me
> > > to
> > > think there must be a race condition somewhere.
> > > 
> > > Also note that no content is duplicated to cause this increase in file
> > > size, as there are no duplicate entries visible in the Realm Browser.
> > > 
> > > Hopefully someone from the core team can look into why these two realm
> > > files (with the same entries) are different sizes:
> > > 
> > > http://static.realm.io/debug/small_realm.zip
> > > http://static.realm.io/debug/large_realm.zip
> > > 
> > > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > > https://github.com/rrrlasse @finnschiermer
> > > https://github.com/finnschiermer
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",finnschiermer,rrrlasse
709,2014-07-31 08:41:50,"Is there a possibility that the binding might be holding on to old versions,
for example by always creating new realm objects instead of reusing the
latest one?

On Thu, Jul 31, 2014 at 10:30 AM, Finn Schiermer Andersen fsa@realm.io
wrote:

> This might not be an error at all.
> 
> As soon as multiple realms are in use in the app, timing differences
> may lead to different file layouts. There are two causes of wasted space:
> Fragmentation and retained versions.
> 
> Fragmentation may occur and cause a file size which is significantly
> larger than the contained data. For larger sizes the fragmentation usually
> is a small problem.
> But note, that in the context of our leaf sizes, both the files presented
> here must
> be considered small .. meaning that significant fragmentation may occur.
> 
> Retained versions hold data for realms which are older than the most
> recent.
> As these versions are released they become free data, but the free areas
> can
> only be taken into use by commits occurring _after_ the release.
> 
> Even though the application exits and the lock file is removed, different
> file sizes may
> still result, because the database is not ""compacted"" when the app exits.
> When
> the app exits, all retained versions are freed, BUT all the space they
> consumed
> will have been allocated in the file, scattered around in it, and as there
> is no
> compaction, the file does not shrink.
> 
> So filesize depends very much on the exact operation of the app.
> Especially for
> small sizes and applications which (at some point in their live) have many
> retained versions.
> 
> Core limits the number of retained versions to 100 if I remember correctly.
> If each of these versions hold changes to most of the data, each version
> may take up as much space as the final version.
> 
> /Finn
> 
> On Wed, Jul 30, 2014 at 8:45 PM, astigsen notifications@github.com
> wrote:
> 
> > My guess is that we somewhere in the binding is holding on to a read
> > transaction, preventing reuse of the old space.
> > 
> > On Wed, Jul 30, 2014 at 11:36 AM, JP Simard notifications@github.com
> > wrote:
> > 
> > > This one is interesting... I was able to reproduce the issue. The
> > > strange
> > > part is that it doesn't double in size on every launch, which leads me
> > > to
> > > think there must be a race condition somewhere.
> > > 
> > > Also note that no content is duplicated to cause this increase in file
> > > size, as there are no duplicate entries visible in the Realm Browser.
> > > 
> > > Hopefully someone from the core team can look into why these two realm
> > > files (with the same entries) are different sizes:
> > > 
> > > http://static.realm.io/debug/small_realm.zip
> > > http://static.realm.io/debug/large_realm.zip
> > > 
> > > /cc @kspangsege https://github.com/kspangsege @rrrlasse
> > > https://github.com/rrrlasse @finnschiermer
> > > https://github.com/finnschiermer
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50659977.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/issues/709#issuecomment-50661206.
",finnschiermer,rrrlasse
705,2014-07-30 06:22:21,"@jpsim @tgoyne 
",alazier,jpsim
705,2014-07-30 06:22:21,"@jpsim @tgoyne 
",alazier,tgoyne
702,2014-07-29 23:14:14,"And fix a crash when filtering a tableview which the test for this ran in to.

@alazier 
",tgoyne,alazier
702,2014-07-29 23:19:21,"@rrrlasse @kspangsege (second commit mainly)
",tgoyne,rrrlasse
702,2014-07-29 23:19:21,"@rrrlasse @kspangsege (second commit mainly)
",tgoyne,kspangsege
699,2014-07-29 18:54:35,"Looks like @apalancat’s fix for this was just merged! Thanks to you both!
",timanglade,apalancat
697,2014-07-28 22:23:49,"@alazier 
",jpsim,alazier
696,2014-07-28 22:08:28,"This fixes the underlying issue with column alignment for standalone accessors. Since standalone objects are not associated with a realm, we can't use column indexes for custom getters and setters. Instead we need to do a lookup by property name. This replaces pr #670 

@jpsim 
",alazier,jpsim
695,2014-07-28 21:24:08,"Thoughts @jpsim ?
",alazier,jpsim
687,2014-07-29 18:58:02,"We definitely plan to support this. We will most likely create a new class to replace RLMArray for query results which will support change notifications.

@astigsen 
",alazier,astigsen
681,2014-07-26 01:18:32,"@alazier 
",jpsim,alazier
680,2014-07-25 22:36:07,"@emanuelez we'll need CI to support this by installing the certificate.

To avoid having to enter your password every time it codesigns, it's necessary to allow `/usr/bin/codesign` to access the private key. See below:

![image](https://cloud.githubusercontent.com/assets/474794/3708922/d60bd846-144b-11e4-8e0c-1d15a3ee5775.png)

I'd also like @alazier's feedback on this to make sure we're doing this right.
",jpsim,alazier
680,2014-07-25 22:36:07,"@emanuelez we'll need CI to support this by installing the certificate.

To avoid having to enter your password every time it codesigns, it's necessary to allow `/usr/bin/codesign` to access the private key. See below:

![image](https://cloud.githubusercontent.com/assets/474794/3708922/d60bd846-144b-11e4-8e0c-1d15a3ee5775.png)

I'd also like @alazier's feedback on this to make sure we're doing this right.
",jpsim,emanuelez
677,2014-08-15 18:02:41,"You have to forward-declare the `Box` type with `@class Box;`
",tgoyne,class
677,2014-08-15 18:36:07,"What should I do when I have 3 objects related like this:



If I forward-declare `User` type with `@class User;` I still get Unknown type for Media in the interface of Comment.
",ortizroberto,class
676,2014-07-25 13:49:06,"@alazier 
",kspangsege,alazier
670,2014-07-24 22:20:56,"@alazier 
",jpsim,alazier
666,2014-07-24 04:40:05,"This fixes an issue preventing the framework from building on iOS the first time, because that location doesn't exist. Subsequent builds worked though.

@alazier 
",jpsim,alazier
665,2014-07-24 04:32:07,"@alazier @timanglade @emanuelez 
",jpsim,alazier
665,2014-07-24 04:32:07,"@alazier @timanglade @emanuelez 
",jpsim,timanglade
665,2014-07-24 04:32:07,"@alazier @timanglade @emanuelez 
",jpsim,emanuelez
665,2014-07-24 08:07:39,"Thanks for that @emanuelez. I'm ok with this as-is, but I'd like @alazier to comment, as he might have a better alternative.
",jpsim,alazier
665,2014-07-24 08:07:39,"Thanks for that @emanuelez. I'm ok with this as-is, but I'd like @alazier to comment, as he might have a better alternative.
",jpsim,emanuelez
665,2014-07-24 15:17:51,"@emanuelez what are your thoughts on where built frameworks should go? Here's where frameworks are built right now:
- ios xcode6 release: `build/DerivedData/Realm-Xcode6/Build/Products/Release-iphone`
- ios xcode6 debug: `build/DerivedData/Realm-Xcode6/Build/Products/Debug-iphone`
- ios xcode5 release: `build/Release`
- ios xcode5 debug: `build/Debug`
- osx xcode6 release: `build/DerivedData/Realm-Xcode6/Build/Products/Release`
- osx xcode6 debug: `build/DerivedData/Realm-Xcode6/Build/Products/Debug`
- osx xcode5 release: `build/DerivedData/Realm/Build/Products/Release`
- osx xcode5 debug: `build/DerivedData/Realm/Build/Products/Debug`

So we're consistent (other than iOS Xcode5). Should we move that one to `build/DerivedData/Realm/Build/Products/{Release|Debug}-iphone`? Or should we change where frameworks are built altogether, maybe closer to the following structure: `build/frameworks/{platform}/{xcode_version}/{configuration}`? i.e. `build/frameworks/ios/xcode5/release`.
",jpsim,emanuelez
665,2014-07-30 00:29:49,"This is ready for review @alazier @emanuelez 
",jpsim,emanuelez
663,2014-07-24 02:24:01,"@alazier please take a look when you get a chance. This is merging into `jp-swift-syntax`, not `master`.
",jpsim,alazier
662,2014-07-25 17:26:56,"#660 is merged, so the link will resolve (once we update the API docs on the website).

Any objections to merge @alazier @bmunkholm?
",jpsim,alazier
661,2014-07-24 00:30:31,"As is apparent in [CocoaDocs](http://cocoadocs.org/docsets/Realm/0.81.0/) under ""Protocol References"", we have no visible documentation for this macro.

This PR makes that documentation visible.

@timanglade @alazier 
",jpsim,alazier
661,2014-07-24 00:30:31,"As is apparent in [CocoaDocs](http://cocoadocs.org/docsets/Realm/0.81.0/) under ""Protocol References"", we have no visible documentation for this macro.

This PR makes that documentation visible.

@timanglade @alazier 
",jpsim,timanglade
660,2014-07-23 23:34:06,"- appledoc no longer ignores RLMProperty
- fix a few doc-related issues

@timanglade @alazier

More PR's coming to improve documentation.
",jpsim,alazier
660,2014-07-23 23:34:06,"- appledoc no longer ignores RLMProperty
- fix a few doc-related issues

@timanglade @alazier

More PR's coming to improve documentation.
",jpsim,timanglade
660,2014-07-24 00:07:58,"I decided to extend this PR instead of creating new ones.

Please let me know what you think, @timanglade @alazier.
",jpsim,alazier
660,2014-07-24 00:07:58,"I decided to extend this PR instead of creating new ones.

Please let me know what you think, @timanglade @alazier.
",jpsim,timanglade
659,2014-07-23 22:31:22,"No longer used.

@alazier 
",jpsim,alazier
658,2014-07-23 22:28:43,"- no longer build our own docset (these were only needed for Dash/DocsForXcode, we still build our own HTML docs at realm.io/docs/cocoa/latest/api)
- fixed issue where `RLMRealm_Dynamic` wasn't being ignored in doc generation

@timanglade 
",jpsim,timanglade
657,2014-07-23 19:55:45,"This PR adds support for Xcode6-Beta4, and drops support for Xcode6-Beta3 because the Swift language changed in a backwards-incompatible way.

@alazier @emanuelez 
",jpsim,alazier
657,2014-07-23 19:55:45,"This PR adds support for Xcode6-Beta4, and drops support for Xcode6-Beta3 because the Swift language changed in a backwards-incompatible way.

@alazier @emanuelez 
",jpsim,emanuelez
657,2014-07-23 20:01:05,"@emanuelez please install Xcode6-Beta4 on CI when you get a chance.

Also, we're getting a false positive on CI here because the build doesn't fail even when it can't find the correct version of Xcode. Could you please put in safeguards so we don't get bit by this in the future?
",jpsim,emanuelez
656,2014-07-23 13:09:04,"@jpsim @bmunkholm 
",emanuelez,jpsim
656,2014-07-23 13:09:04,"@jpsim @bmunkholm 
",emanuelez,bmunkholm
654,2014-07-23 08:44:50,"@kneth @jpsim 
",emanuelez,jpsim
654,2014-07-23 08:44:50,"@kneth @jpsim 
",emanuelez,kneth
653,2014-07-23 07:36:11,"Hi,

I'm using latest version of xCode 6 (beta4) and I'm try using Realm in a swift iOs project with CocoaPods without any success.

I'm getting the following error on build time : 
<b>File not Found ""Realm/Realm-Bridging-Header.h"" </b>

I notice that @jpsim post a [radar](http://openradar.appspot.com/radar?id=5771227683618816) to solve this problem.

Until xCode team fixes the issue, is there a workaround?

Thanks,

PS : Realm looks very powerful, I can't wait for running it on my app. :)
",Pintouch,jpsim
652,2014-07-22 23:23:13,"@SebastienThiebaud just be aware that if you add properties to RLMObject through a category using associated objects, those won't be persisted by Realm.
",jpsim,SebastienThiebaud
652,2014-08-06 17:28:12,"@SebastienThiebaud You can add persisted properties in RLMObject category  if you add the properties at runtime before first RLMObject is initialized (for example by filtering the objc_getClassList to subclasses of RLMObject).

example call:




",mwenisch,SebastienThiebaud
650,2014-07-22 21:32:02,"@emanuelez 
",jpsim,emanuelez
649,2014-07-22 18:23:42,"... with the content of EncryptionExample in this commit: https://github.com/realm/realm-cocoa/commit/e4ac3011452b5f30b35d138694ae6d809cd6e514

Thanks to StanislavK for reporting! Fixes #625 !

(CHANGELOG.md not updated as it was never released.)

Review: @jpsim 
",bmunkholm,jpsim
648,2014-07-22 18:19:59,"@emanuelez @kneth 
",jpsim,kneth
648,2014-07-22 18:19:59,"@emanuelez @kneth 
",jpsim,emanuelez
648,2014-07-23 22:48:28,"OK to merge, @emanuelez?
",jpsim,emanuelez
648,2014-07-24 04:27:46,"+1

—
Sent from Mailbox

On Thu, Jul 24, 2014 at 12:48 AM, JP Simard notifications@github.com
wrote:

> ## OK to merge, @emanuelez?
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/realm/realm-cocoa/pull/648#issuecomment-49946779
",emanuelez,emanuelez
647,2014-07-29 18:38:00,"This doesn’t work at the moment. We’re working on adding some mapping capabilities to Realm but in the meantime you may interested in checking out https://github.com/matthewcheok/Realm-JSON from @matthewcheok!
",timanglade,matthewcheok
646,2014-07-22 13:39:10,"I have updated version and added a bit to the change log in order to be ready to next release.

@alazier @jpsim @bmunkholm 
",kneth,alazier
646,2014-07-22 13:39:10,"I have updated version and added a bit to the change log in order to be ready to next release.

@alazier @jpsim @bmunkholm 
",kneth,bmunkholm
646,2014-07-22 13:39:10,"I have updated version and added a bit to the change log in order to be ready to next release.

@alazier @jpsim @bmunkholm 
",kneth,jpsim
645,2014-07-22 11:40:28,"The previous examples structure was not working very well. We had to run `sh build.sh build` to build the framework in order to build the examples. This PR moves the structure around and only introduces a single Xcode project per platform/language group, with the appropriate Realm Xcode subproject. So the new examples structure looks like this:



The process to package examples for release is:
1. Install Xcodeproj gem from master (https://github.com/CocoaPods/Xcodeproj)
2. Run `./scripts/package_examples.rb`
3. Move the folders in these locations

Follow these steps and all projects should build. Note that there are 3 `Realm.framework`'s. One for iOS, one for OSX and one for Swift (iOS).



@emanuelez let me know if you have any questions since you'll be the one integrating this in Jenkins.
",jpsim,emanuelez
645,2014-07-22 11:56:02,"@emanuelez CI is failing because it's trying to run Xcode6 simulator tests on iOS 7.1 for some reason.

https://ci.tightdb.com/job/objc_pr/ws/tightdb_objc/build/build.log
",jpsim,emanuelez
645,2014-07-25 23:12:01,"@emanuelez @alazier please review, this is no longer WIP. Though this PR does depend on #680.

Here are my most recent changes:
- Codesign framework (iOS/OSX, Xcode5/Xcode6, Release/Debug)
- Use framework instead of subproject in examples
- Build framework if not built when running examples

@emanuelez note that there is no script to package these examples for release, but that shouldn't be too difficult.
",jpsim,alazier
643,2014-07-22 08:48:26,"NSPredicate does not support float values in query strings; only double is. If a value can be casted to a float, and a class has a float property, we can help the user by casting for her but it might lead to loss of precision.

@alazier @jpsim @astigsen 
",kneth,astigsen
643,2014-07-22 08:48:26,"NSPredicate does not support float values in query strings; only double is. If a value can be casted to a float, and a class has a float property, we can help the user by casting for her but it might lead to loss of precision.

@alazier @jpsim @astigsen 
",kneth,alazier
643,2014-07-22 08:48:26,"NSPredicate does not support float values in query strings; only double is. If a value can be casted to a float, and a class has a float property, we can help the user by casting for her but it might lead to loss of precision.

@alazier @jpsim @astigsen 
",kneth,jpsim
643,2014-07-24 01:01:04,"- clarified CHANGELOG entry
- removed “Note on float”
- moved nsnumber_can_be_float() check to nsnumber_is_like_float()

Please take another look @alazier @bmunkholm.

I removed the ""note on float"" because I feel that's a general programming consideration, not directly related to Realm. Let me know if I'm mistaken there.
",jpsim,alazier
642,2014-07-22 06:23:28,"This should allow us to release in very few steps:
1. `sh build.sh set-version 0.81.0`
2. `git tag 0.81.0`
3. `sh build.sh prepare-release xcpretty`
4. `sh build.sh deploy-release`

Split up release into two steps: preparation and deployment.

Remaining:
1. ~~Change `sh build.sh build ""$XCMODE"" || exit 1` to test instead~~
2. Move examples in accordance with [this structure](https://github.com/realm/realm-cocoa/pull/631#issuecomment-49680698)
3. Update framework path in all example projects

@emanuelez @bmunkholm
",jpsim,bmunkholm
642,2014-07-22 06:23:28,"This should allow us to release in very few steps:
1. `sh build.sh set-version 0.81.0`
2. `git tag 0.81.0`
3. `sh build.sh prepare-release xcpretty`
4. `sh build.sh deploy-release`

Split up release into two steps: preparation and deployment.

Remaining:
1. ~~Change `sh build.sh build ""$XCMODE"" || exit 1` to test instead~~
2. Move examples in accordance with [this structure](https://github.com/realm/realm-cocoa/pull/631#issuecomment-49680698)
3. Update framework path in all example projects

@emanuelez @bmunkholm
",jpsim,emanuelez
642,2014-07-22 06:29:15,"This also depends on docs being at `http://realm.io/docs/cocoa/` /cc @timanglade
",jpsim,timanglade
641,2014-07-22 04:39:39,"We were keeping temporary core zip and folders in `/tmp`, which caused problems with CI concurrency, so now we're using `mktemp`, which creates a random temporary folder.

Merging right away as CI is failing on master, but please review later @emanuelez.
",jpsim,emanuelez
640,2014-07-22 00:41:24,"This core release fixes bugs and adds new link-related features to the query system. See https://github.com/Tightdb/tightdb/blob/master/release_notes.md for details.

@astigsen @jpsim @alazier 
",kspangsege,astigsen
640,2014-07-22 00:41:24,"This core release fixes bugs and adds new link-related features to the query system. See https://github.com/Tightdb/tightdb/blob/master/release_notes.md for details.

@astigsen @jpsim @alazier 
",kspangsege,jpsim
640,2014-07-22 00:41:24,"This core release fixes bugs and adds new link-related features to the query system. See https://github.com/Tightdb/tightdb/blob/master/release_notes.md for details.

@astigsen @jpsim @alazier 
",kspangsege,alazier
640,2014-07-22 01:02:12,"passes CI, looks good to me! @alazier merge if you feel comfortable.
",jpsim,alazier
639,2014-07-22 00:39:47,"Also adds more tests and fixes a few issues with our initial support for keypaths.

@jpsim @bmunkholm @kneth 
",alazier,jpsim
639,2014-07-22 00:39:47,"Also adds more tests and fixes a few issues with our initial support for keypaths.

@jpsim @bmunkholm @kneth 
",alazier,bmunkholm
639,2014-07-22 00:39:47,"Also adds more tests and fixes a few issues with our initial support for keypaths.

@jpsim @bmunkholm @kneth 
",alazier,kneth
639,2014-07-22 02:06:21,"@astigsen - added queries on RLMArrays with the same syntax as the other link queries. I verified that the syntax used is the accepted method of performing such queries.
",alazier,astigsen
639,2014-07-22 02:45:47,"@astigsen I think I am still missing the case where we want any object with another object in one of its arrays. The predicate syntax for this is `""ANY arrayProperty == %@"", object` so I will see if we can support this too.
",alazier,astigsen
636,2014-07-21 17:11:06,"Back by popular demand.

@astigsen @bmunkholm @jpsim 
",alazier,astigsen
636,2014-07-21 17:11:06,"Back by popular demand.

@astigsen @bmunkholm @jpsim 
",alazier,bmunkholm
636,2014-07-21 17:11:06,"Back by popular demand.

@astigsen @bmunkholm @jpsim 
",alazier,jpsim
635,2014-07-21 13:01:06,"This PR adds support for link queries - see issue #617. The core library does not support:
- queries on binary data (`NSData`)
- case insensitive queries on strings (`NSString`)
- predicates `BEGINSWITH`, `ENDSWITH`, and `CONTAINS` for strings

@alazier @jpsim @bmunkholm 
",kneth,alazier
635,2014-07-21 13:01:06,"This PR adds support for link queries - see issue #617. The core library does not support:
- queries on binary data (`NSData`)
- case insensitive queries on strings (`NSString`)
- predicates `BEGINSWITH`, `ENDSWITH`, and `CONTAINS` for strings

@alazier @jpsim @bmunkholm 
",kneth,bmunkholm
635,2014-07-21 13:01:06,"This PR adds support for link queries - see issue #617. The core library does not support:
- queries on binary data (`NSData`)
- case insensitive queries on strings (`NSString`)
- predicates `BEGINSWITH`, `ENDSWITH`, and `CONTAINS` for strings

@alazier @jpsim @bmunkholm 
",kneth,jpsim
634,2014-07-21 11:59:50,"@kneth @jpsim 
",emanuelez,jpsim
634,2014-07-21 11:59:50,"@kneth @jpsim 
",emanuelez,kneth
633,2014-07-21 11:34:25,"@kneth @jpsim 
",emanuelez,jpsim
633,2014-07-21 11:34:25,"@kneth @jpsim 
",emanuelez,kneth
632,2014-07-21 11:05:53,"@kneth @jpsim @alazier @bmunkholm 
",emanuelez,bmunkholm
632,2014-07-21 11:05:53,"@kneth @jpsim @alazier @bmunkholm 
",emanuelez,jpsim
632,2014-07-21 11:05:53,"@kneth @jpsim @alazier @bmunkholm 
",emanuelez,alazier
632,2014-07-21 11:05:53,"@kneth @jpsim @alazier @bmunkholm 
",emanuelez,kneth
631,2014-07-21 09:44:22,"@kneth @jpsim 
",emanuelez,jpsim
631,2014-07-21 09:44:22,"@kneth @jpsim 
",emanuelez,kneth
630,2014-07-21 09:32:35,"@kneth @kspangsege @jpsim 
",emanuelez,jpsim
630,2014-07-21 09:32:35,"@kneth @kspangsege @jpsim 
",emanuelez,kspangsege
630,2014-07-21 09:32:35,"@kneth @kspangsege @jpsim 
",emanuelez,kneth
630,2014-08-14 11:04:45,"@tgoyne Will `trap` work nicely with `set -e`?
",kneth,tgoyne
629,2014-07-21 09:00:19,"@kneth @jpsim @timanglade @bmunkholm 
",emanuelez,jpsim
629,2014-07-21 09:00:19,"@kneth @jpsim @timanglade @bmunkholm 
",emanuelez,bmunkholm
629,2014-07-21 09:00:19,"@kneth @jpsim @timanglade @bmunkholm 
",emanuelez,timanglade
629,2014-07-21 09:00:19,"@kneth @jpsim @timanglade @bmunkholm 
",emanuelez,kneth
628,2014-07-21 16:06:50,"This is definitely something we want. We are currently waiting for support for optional values in core at which point we wil add support in the objc binding. @astigsen can give a better estimate of when this will happen.
",alazier,astigsen
628,2015-02-04 16:56:25,"I know @rrrlasse is working on this in core at the moment, but it would be good to add a subsection about this + workarounds to the [Current Limitations](realm.io/docs/cocoa#current-limitations) section of our docs right away. /cc @jpsim @segiddins 
",timanglade,rrrlasse
628,2015-02-04 16:56:25,"I know @rrrlasse is working on this in core at the moment, but it would be good to add a subsection about this + workarounds to the [Current Limitations](realm.io/docs/cocoa#current-limitations) section of our docs right away. /cc @jpsim @segiddins 
",timanglade,segiddins
628,2015-03-09 17:14:18,"Let me just pile up here on what @jpsim is saying and add that yes, we’ve
had someone working on this full-time for weeks now, but not allowing any
nullable fields was such a core design decision, that it affected
everything from how we store data on disk, to how queries are handled, and
so this hasn’t been an easy fix at all. It is close to being done though,
and we’ll try to release support for the most obvious types (string and
data) asap. Our apologies again for it taking so long.

On Mon, Mar 9, 2015 at 9:56 AM, JP Simard notifications@github.com wrote:

> @timanglade https://github.com/timanglade @jpsim
> https://github.com/jpsim Are there any updates on this issue? Missing
> support for null values broke our app so badly, that we had to switch back
> to Core Data. :-(
> 
> We hear you, null support is a top priority for us. We're adding in null
> support type by type in Realm's core database engine. Strings are done, and
> progress on other types is advancing steadily. We'll expose that in the
> higher level language bindings as soon as it's ready.
> 
> In the meantime, it really shouldn't be necessary to completely move away
> from Realm for this limitation. Our current suggested workaround should be
> flexible enough to support any scenario: wrap properties that should be
> nullable in an RLMObject subclass:
> 
> @interface NullableInt : RLMObject@property NSInteger intValue;@end
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/628#issuecomment-77894628.
",timanglade,interface
628,2015-03-09 17:14:18,"Let me just pile up here on what @jpsim is saying and add that yes, we’ve
had someone working on this full-time for weeks now, but not allowing any
nullable fields was such a core design decision, that it affected
everything from how we store data on disk, to how queries are handled, and
so this hasn’t been an easy fix at all. It is close to being done though,
and we’ll try to release support for the most obvious types (string and
data) asap. Our apologies again for it taking so long.

On Mon, Mar 9, 2015 at 9:56 AM, JP Simard notifications@github.com wrote:

> @timanglade https://github.com/timanglade @jpsim
> https://github.com/jpsim Are there any updates on this issue? Missing
> support for null values broke our app so badly, that we had to switch back
> to Core Data. :-(
> 
> We hear you, null support is a top priority for us. We're adding in null
> support type by type in Realm's core database engine. Strings are done, and
> progress on other types is advancing steadily. We'll expose that in the
> higher level language bindings as soon as it's ready.
> 
> In the meantime, it really shouldn't be necessary to completely move away
> from Realm for this limitation. Our current suggested workaround should be
> flexible enough to support any scenario: wrap properties that should be
> nullable in an RLMObject subclass:
> 
> @interface NullableInt : RLMObject@property NSInteger intValue;@end
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/issues/628#issuecomment-77894628.
",timanglade,end
628,2015-04-17 18:47:42,"Yes, just finished the package :) Here we go! We’re starting slow with a release that hopefully will _not_ do anything at all. We’ve tested it internally as much as we can, your help in trying it out is much appreciated so we can start releasing betas that actually add functionality asap.

/cc @tgoyne @rrrlasse @simonask @segiddins @bmunkholm

# Realm Core Null v1 BETA

THIS IS A BETA RELEASE — USE IT AT YOUR OWN RISK. It might delete your data or cause other catastrophic events. Please report any bugs or issues on [Github](https://github.com/realm/realm-cocoa/issues) and clearly mention you are using the “null beta”.

## Release Notes

**Realm Core Null v1 does not expose new features to you**. What it does is silently upgrade our file format to enable null support. This is a critical step for us to validate. Without confirmation from a number of beta-testers, we will not be able to release Realm Cocoa Null Betas, which will let you have null string properties (more types will follow).

**This core release is only compatible with Realm Cocoa 0.91.2 or later.**

You can find the core release that includes null support at https://static.realm.io/downloads/core/realm-core-null-v1.zip

## Instructions

### If you are building Realm from source
1. Build https://github.com/realm/realm-cocoa from master (make sure you are using a version of realm-cocoa >= 0.91.2)
2. Replace the files under core-0.89.0 with those contained in this zip
3. Rebuild and use the resulting framework in your file

### If you are using Realm through CocoaPods
1. Make sure you are using Realm version 0.91.2 or later.
2. Replace the files under Pods/Realm/core with the contents of the core folder of this zip.

### If you are using the zip releases from our website

You will not be able to test null support at this time. We may release beta binaries with null support at a later date. In the meantime you can build an equivalent .framework from source using the instructions above.

## Help!

Please report any bugs or issues on [Github](https://github.com/realm/realm-cocoa/issues) and clearly mention you are using the “null beta”.
",timanglade,rrrlasse
628,2015-04-17 18:47:42,"Yes, just finished the package :) Here we go! We’re starting slow with a release that hopefully will _not_ do anything at all. We’ve tested it internally as much as we can, your help in trying it out is much appreciated so we can start releasing betas that actually add functionality asap.

/cc @tgoyne @rrrlasse @simonask @segiddins @bmunkholm

# Realm Core Null v1 BETA

THIS IS A BETA RELEASE — USE IT AT YOUR OWN RISK. It might delete your data or cause other catastrophic events. Please report any bugs or issues on [Github](https://github.com/realm/realm-cocoa/issues) and clearly mention you are using the “null beta”.

## Release Notes

**Realm Core Null v1 does not expose new features to you**. What it does is silently upgrade our file format to enable null support. This is a critical step for us to validate. Without confirmation from a number of beta-testers, we will not be able to release Realm Cocoa Null Betas, which will let you have null string properties (more types will follow).

**This core release is only compatible with Realm Cocoa 0.91.2 or later.**

You can find the core release that includes null support at https://static.realm.io/downloads/core/realm-core-null-v1.zip

## Instructions

### If you are building Realm from source
1. Build https://github.com/realm/realm-cocoa from master (make sure you are using a version of realm-cocoa >= 0.91.2)
2. Replace the files under core-0.89.0 with those contained in this zip
3. Rebuild and use the resulting framework in your file

### If you are using Realm through CocoaPods
1. Make sure you are using Realm version 0.91.2 or later.
2. Replace the files under Pods/Realm/core with the contents of the core folder of this zip.

### If you are using the zip releases from our website

You will not be able to test null support at this time. We may release beta binaries with null support at a later date. In the meantime you can build an equivalent .framework from source using the instructions above.

## Help!

Please report any bugs or issues on [Github](https://github.com/realm/realm-cocoa/issues) and clearly mention you are using the “null beta”.
",timanglade,tgoyne
628,2015-04-17 18:47:42,"Yes, just finished the package :) Here we go! We’re starting slow with a release that hopefully will _not_ do anything at all. We’ve tested it internally as much as we can, your help in trying it out is much appreciated so we can start releasing betas that actually add functionality asap.

/cc @tgoyne @rrrlasse @simonask @segiddins @bmunkholm

# Realm Core Null v1 BETA

THIS IS A BETA RELEASE — USE IT AT YOUR OWN RISK. It might delete your data or cause other catastrophic events. Please report any bugs or issues on [Github](https://github.com/realm/realm-cocoa/issues) and clearly mention you are using the “null beta”.

## Release Notes

**Realm Core Null v1 does not expose new features to you**. What it does is silently upgrade our file format to enable null support. This is a critical step for us to validate. Without confirmation from a number of beta-testers, we will not be able to release Realm Cocoa Null Betas, which will let you have null string properties (more types will follow).

**This core release is only compatible with Realm Cocoa 0.91.2 or later.**

You can find the core release that includes null support at https://static.realm.io/downloads/core/realm-core-null-v1.zip

## Instructions

### If you are building Realm from source
1. Build https://github.com/realm/realm-cocoa from master (make sure you are using a version of realm-cocoa >= 0.91.2)
2. Replace the files under core-0.89.0 with those contained in this zip
3. Rebuild and use the resulting framework in your file

### If you are using Realm through CocoaPods
1. Make sure you are using Realm version 0.91.2 or later.
2. Replace the files under Pods/Realm/core with the contents of the core folder of this zip.

### If you are using the zip releases from our website

You will not be able to test null support at this time. We may release beta binaries with null support at a later date. In the meantime you can build an equivalent .framework from source using the instructions above.

## Help!

Please report any bugs or issues on [Github](https://github.com/realm/realm-cocoa/issues) and clearly mention you are using the “null beta”.
",timanglade,simonask
628,2015-04-17 18:47:42,"Yes, just finished the package :) Here we go! We’re starting slow with a release that hopefully will _not_ do anything at all. We’ve tested it internally as much as we can, your help in trying it out is much appreciated so we can start releasing betas that actually add functionality asap.

/cc @tgoyne @rrrlasse @simonask @segiddins @bmunkholm

# Realm Core Null v1 BETA

THIS IS A BETA RELEASE — USE IT AT YOUR OWN RISK. It might delete your data or cause other catastrophic events. Please report any bugs or issues on [Github](https://github.com/realm/realm-cocoa/issues) and clearly mention you are using the “null beta”.

## Release Notes

**Realm Core Null v1 does not expose new features to you**. What it does is silently upgrade our file format to enable null support. This is a critical step for us to validate. Without confirmation from a number of beta-testers, we will not be able to release Realm Cocoa Null Betas, which will let you have null string properties (more types will follow).

**This core release is only compatible with Realm Cocoa 0.91.2 or later.**

You can find the core release that includes null support at https://static.realm.io/downloads/core/realm-core-null-v1.zip

## Instructions

### If you are building Realm from source
1. Build https://github.com/realm/realm-cocoa from master (make sure you are using a version of realm-cocoa >= 0.91.2)
2. Replace the files under core-0.89.0 with those contained in this zip
3. Rebuild and use the resulting framework in your file

### If you are using Realm through CocoaPods
1. Make sure you are using Realm version 0.91.2 or later.
2. Replace the files under Pods/Realm/core with the contents of the core folder of this zip.

### If you are using the zip releases from our website

You will not be able to test null support at this time. We may release beta binaries with null support at a later date. In the meantime you can build an equivalent .framework from source using the instructions above.

## Help!

Please report any bugs or issues on [Github](https://github.com/realm/realm-cocoa/issues) and clearly mention you are using the “null beta”.
",timanglade,segiddins
626,2014-07-21 11:40:12,"One of the bigger product design concerns with this is that it won't be cross platform. So sync to server side or Android or any other platform won't usable. It might still be possible to have such platform specific objects (Android could also have it's own) when you know that you really limit yourself. But question is if we want to ""encourage"" users to shoot them selves in the foot, by making this easy?
@heardrwt : Can you elaborate on the use cases where you would love this, since I assume you must have one :-)
Comments @astigsen @alazier ?
",bmunkholm,astigsen
626,2014-07-21 11:40:12,"One of the bigger product design concerns with this is that it won't be cross platform. So sync to server side or Android or any other platform won't usable. It might still be possible to have such platform specific objects (Android could also have it's own) when you know that you really limit yourself. But question is if we want to ""encourage"" users to shoot them selves in the foot, by making this easy?
@heardrwt : Can you elaborate on the use cases where you would love this, since I assume you must have one :-)
Comments @astigsen @alazier ?
",bmunkholm,alazier
624,2014-07-20 10:01:03,"How to store BLOBs? Docs says that `NSData` is supported property type.
But when I add to SimpleExample `@property NSData        *photoData;` it crashes.

Also, will it be `NSFetchedResultsController` analogue?
",shmidt,property
623,2014-07-20 04:29:28,"@jpsim @bmunkholm 

This adds your test. Also cleaned up the constructor for RLMProperty as this is no longer known at property creation time.

Also fixed keyed subscript setting for standalone objects.
",alazier,jpsim
623,2014-07-20 04:29:28,"@jpsim @bmunkholm 

This adds your test. Also cleaned up the constructor for RLMProperty as this is no longer known at property creation time.

Also fixed keyed subscript setting for standalone objects.
",alazier,bmunkholm
619,2014-07-19 04:01:24,"- RLMProperty’s setterName is now correctly generated for UTF8 property names
- RLMQueryUtil now uses the standard RLMStringDataWithNSString function
- renamed UtilTests to UnicodeTests
- moved UTF8Object to RLMTestObjects to be shared with Swift tests
- ported the UnicodeTests to Swift
- improved test messages in UnicodeTests

Please note that because of rdar://17735684 ([openradar](http://openradar.appspot.com/radar?id=5222810825785344)), we might want to throw an exception if a user tries to define a model property containing UTF8 characters in the name.

Thoughts? @alazier @astigsen @kneth @rrrlasse
",jpsim,astigsen
619,2014-07-19 04:01:24,"- RLMProperty’s setterName is now correctly generated for UTF8 property names
- RLMQueryUtil now uses the standard RLMStringDataWithNSString function
- renamed UtilTests to UnicodeTests
- moved UTF8Object to RLMTestObjects to be shared with Swift tests
- ported the UnicodeTests to Swift
- improved test messages in UnicodeTests

Please note that because of rdar://17735684 ([openradar](http://openradar.appspot.com/radar?id=5222810825785344)), we might want to throw an exception if a user tries to define a model property containing UTF8 characters in the name.

Thoughts? @alazier @astigsen @kneth @rrrlasse
",jpsim,alazier
619,2014-07-19 04:01:24,"- RLMProperty’s setterName is now correctly generated for UTF8 property names
- RLMQueryUtil now uses the standard RLMStringDataWithNSString function
- renamed UtilTests to UnicodeTests
- moved UTF8Object to RLMTestObjects to be shared with Swift tests
- ported the UnicodeTests to Swift
- improved test messages in UnicodeTests

Please note that because of rdar://17735684 ([openradar](http://openradar.appspot.com/radar?id=5222810825785344)), we might want to throw an exception if a user tries to define a model property containing UTF8 characters in the name.

Thoughts? @alazier @astigsen @kneth @rrrlasse
",jpsim,rrrlasse
619,2014-07-19 04:01:24,"- RLMProperty’s setterName is now correctly generated for UTF8 property names
- RLMQueryUtil now uses the standard RLMStringDataWithNSString function
- renamed UtilTests to UnicodeTests
- moved UTF8Object to RLMTestObjects to be shared with Swift tests
- ported the UnicodeTests to Swift
- improved test messages in UnicodeTests

Please note that because of rdar://17735684 ([openradar](http://openradar.appspot.com/radar?id=5222810825785344)), we might want to throw an exception if a user tries to define a model property containing UTF8 characters in the name.

Thoughts? @alazier @astigsen @kneth @rrrlasse
",jpsim,kneth
618,2014-07-19 00:04:19,"I think enough people want this that we should reconsider having this simply as a convenience. For a bit of history, in the first version of the objc apis the only way to do a write transaction was to use the block approach, and the limitations of this quickly became apparent. As long as we keep the current apis I am ok with adding a block variant as a convenience. 

If we do this I think the name should be `-(void)writeTransactionWithBlock:(void (^)(void));` to be consistent with our other apis.

Thoughts on this @astigsen ?
",alazier,astigsen
618,2014-07-19 01:46:52,"I agree. Let's add this for next release.

/a

On Friday, July 18, 2014, Ari Lazier notifications@github.com wrote:

> I think enough people want this that we should reconsider having this
> simply as a convenience. For a bit of history, in the first version of the
> objc apis the only way to do a write transaction was to use the block
> approach, and the limitations of this quickly became apparent. As long as
> we keep the current apis I am ok with adding a block variant as a
> convenience.
> 
> If we do this I think the name should be -(void)writeTransactionWithBlock:(void
> (^)(void)); to be consistent with our other apis.
> 
> Thoughts on this @astigsen https://github.com/astigsen ?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/618#issuecomment-49492896.
",astigsen,astigsen
616,2014-07-18 15:20:16,"This currently does not work causing an exception on access.

@jpsim @bmunkholm 
",alazier,jpsim
616,2014-07-18 15:20:16,"This currently does not work causing an exception on access.

@jpsim @bmunkholm 
",alazier,bmunkholm
614,2014-07-18 13:28:16,"@bmunkholm @jpsim 
",emanuelez,bmunkholm
614,2014-07-18 13:28:16,"@bmunkholm @jpsim 
",emanuelez,jpsim
613,2014-07-18 11:35:48,"Courtesy of @rrrlasse.

Closes #612 and #604.

@bmunkholm @kneth 
",oleks,bmunkholm
613,2014-07-18 11:35:48,"Courtesy of @rrrlasse.

Closes #612 and #604.

@bmunkholm @kneth 
",oleks,rrrlasse
613,2014-07-18 11:35:48,"Courtesy of @rrrlasse.

Closes #612 and #604.

@bmunkholm @kneth 
",oleks,kneth
609,2014-07-17 22:58:43,"I thought @timanglade said he would return the docs.md here. It was only moved temporarily for launch.?
",bmunkholm,timanglade
606,2014-07-17 12:00:10,"Proof-of-concept RubyMotion app using Realm. This is certainly in its infancy and I haven't tried pushing this very far, but it should be a good starting point.

Big :+1: to @alloy for getting this on the right track.

/cc @kneth @timanglade @oleks
",jpsim,alloy
606,2014-07-17 12:00:10,"Proof-of-concept RubyMotion app using Realm. This is certainly in its infancy and I haven't tried pushing this very far, but it should be a good starting point.

Big :+1: to @alloy for getting this on the right track.

/cc @kneth @timanglade @oleks
",jpsim,oleks
606,2014-07-17 12:00:10,"Proof-of-concept RubyMotion app using Realm. This is certainly in its infancy and I haven't tried pushing this very far, but it should be a good starting point.

Big :+1: to @alloy for getting this on the right track.

/cc @kneth @timanglade @oleks
",jpsim,timanglade
606,2014-07-17 12:00:10,"Proof-of-concept RubyMotion app using Realm. This is certainly in its infancy and I haven't tried pushing this very far, but it should be a good starting point.

Big :+1: to @alloy for getting this on the right track.

/cc @kneth @timanglade @oleks
",jpsim,kneth
606,2014-07-18 00:37:26,"Does anyone from @realm/cocoa have any objections to merging this in?
",jpsim,realm
603,2014-07-17 09:05:51,"@emanuelez feedback please :smile:. It'd be nice to find a way to automate the deployment process as much as possible, without compromising on reliability or releases.
",jpsim,emanuelez
603,2014-07-17 09:25:51,"FYI @emanuelez, CI is failing unless we wipe the working directory before a job. This is because Jenkins can't delete the __MACOSX directory that gets created when running `zip`. It's not even running as root, so I'm not sure how to fix it.
",jpsim,emanuelez
600,2014-07-16 23:46:06,"- updated file template icon to show ""Realm""
- fixed improper usage of RLM_OBJECT_PROTOCOL in docs

/cc @timanglade @kneth @alazier
",jpsim,alazier
600,2014-07-16 23:46:06,"- updated file template icon to show ""Realm""
- fixed improper usage of RLM_OBJECT_PROTOCOL in docs

/cc @timanglade @kneth @alazier
",jpsim,timanglade
600,2014-07-16 23:46:06,"- updated file template icon to show ""Realm""
- fixed improper usage of RLM_OBJECT_PROTOCOL in docs

/cc @timanglade @kneth @alazier
",jpsim,kneth
599,2014-07-16 19:16:16,"RLMObject should support NSURL properties.

<!---
@huboard:{""order"":300.5,""milestone_order"":599,""custom_state"":""""}
-->
",aleph7,huboard
599,2014-10-01 08:43:33,"@scriptedSheep 
Perhaps you are aware of this, but you can always convert UIImages to NSData, and the store that in a data property. It's quite convenient.


",GreatApe,scriptedSheep
597,2014-07-16 05:37:34,"Thanks for the tip @apalancat, I wasn’t aware that was possible! (The current instructions don’t recommend you disable Gatekeeper for all apps, just that you bypass it for ours, though.) I’ve updated our docs to reflect your tip, it should be live on our site soon. Thanks again for taking the time to let us know!
",timanglade,apalancat
594,2014-07-15 22:24:17,"Applied the change for both Swift/ObjC versions of the example. /cc @astigsen @alazier.
",jpsim,astigsen
594,2014-07-15 22:24:17,"Applied the change for both Swift/ObjC versions of the example. /cc @astigsen @alazier.
",jpsim,alazier
594,2014-07-15 23:00:51,"I've created new example projects: RealmEncryptionExample and RealmSwiftEncryptionExample. Please look again @timanglade @astigsen @alazier.
",jpsim,astigsen
594,2014-07-15 23:00:51,"I've created new example projects: RealmEncryptionExample and RealmSwiftEncryptionExample. Please look again @timanglade @astigsen @alazier.
",jpsim,alazier
594,2014-07-15 23:37:29,"I propose we rename SimpleExample to something like RealmSnippets or
RealmTour. Then we keep the Simple example there, and small files that
showcases the Full API and showcases various usecases like this. It should
have no UI (like SimpleExample) and would be easy to browse in and also
easy to quickly append to!

On Wed, Jul 16, 2014 at 1:00 AM, JP Simard notifications@github.com wrote:

> I've created new example projects: RealmEncryptionExample and
> RealmSwiftEncryptionExample. Please look again @timanglade
> https://github.com/timanglade @astigsen https://github.com/astigsen
> @alazier https://github.com/alazier.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/594#issuecomment-49104205.
",bmunkholm,astigsen
594,2014-07-15 23:37:29,"I propose we rename SimpleExample to something like RealmSnippets or
RealmTour. Then we keep the Simple example there, and small files that
showcases the Full API and showcases various usecases like this. It should
have no UI (like SimpleExample) and would be easy to browse in and also
easy to quickly append to!

On Wed, Jul 16, 2014 at 1:00 AM, JP Simard notifications@github.com wrote:

> I've created new example projects: RealmEncryptionExample and
> RealmSwiftEncryptionExample. Please look again @timanglade
> https://github.com/timanglade @astigsen https://github.com/astigsen
> @alazier https://github.com/alazier.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/594#issuecomment-49104205.
",bmunkholm,alazier
594,2014-07-16 01:19:07,"Perhaps call it RealmWalkThrough?

I also don't think we need to suffix all examples with the word 'Example'
as they are all in the examples directory. I also think we should add back
the workspace which has all of the examples and builds the framework
automatically as needed.

On Tue, Jul 15, 2014 at 4:37 PM, bmunkholm notifications@github.com wrote:

> I propose we rename SimpleExample to something like RealmSnippets or
> RealmTour. Then we keep the Simple example there, and small files that
> showcases the Full API and showcases various usecases like this. It should
> have no UI (like SimpleExample) and would be easy to browse in and also
> easy to quickly append to!
> 
> On Wed, Jul 16, 2014 at 1:00 AM, JP Simard notifications@github.com
> wrote:
> 
> > I've created new example projects: RealmEncryptionExample and
> > RealmSwiftEncryptionExample. Please look again @timanglade
> > https://github.com/timanglade @astigsen https://github.com/astigsen
> > @alazier https://github.com/alazier.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/594#issuecomment-49104205.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/594#issuecomment-49106940.
",alazier,astigsen
594,2014-07-16 01:19:07,"Perhaps call it RealmWalkThrough?

I also don't think we need to suffix all examples with the word 'Example'
as they are all in the examples directory. I also think we should add back
the workspace which has all of the examples and builds the framework
automatically as needed.

On Tue, Jul 15, 2014 at 4:37 PM, bmunkholm notifications@github.com wrote:

> I propose we rename SimpleExample to something like RealmSnippets or
> RealmTour. Then we keep the Simple example there, and small files that
> showcases the Full API and showcases various usecases like this. It should
> have no UI (like SimpleExample) and would be easy to browse in and also
> easy to quickly append to!
> 
> On Wed, Jul 16, 2014 at 1:00 AM, JP Simard notifications@github.com
> wrote:
> 
> > I've created new example projects: RealmEncryptionExample and
> > RealmSwiftEncryptionExample. Please look again @timanglade
> > https://github.com/timanglade @astigsen https://github.com/astigsen
> > @alazier https://github.com/alazier.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/594#issuecomment-49104205.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/594#issuecomment-49106940.
",alazier,alazier
594,2014-07-17 01:14:24,"OK to merge, @astigsen @alazier @timanglade? I'd rather not overhaul our examples approach in this PR.
",jpsim,astigsen
592,2014-07-15 13:18:51,"@jpsim 
",emanuelez,jpsim
591,2014-07-15 12:06:26,"@bmunkholm @kneth 
",oleks,bmunkholm
591,2014-07-15 12:06:26,"@bmunkholm @kneth 
",oleks,kneth
590,2014-07-15 11:46:51,"so it is disables for the `examples` and `examples-debug` targets in `build.sh`.

@jpsim @emanuelez @bmunkholm 
",kneth,jpsim
590,2014-07-15 11:46:51,"so it is disables for the `examples` and `examples-debug` targets in `build.sh`.

@jpsim @emanuelez @bmunkholm 
",kneth,bmunkholm
590,2014-07-15 11:46:51,"so it is disables for the `examples` and `examples-debug` targets in `build.sh`.

@jpsim @emanuelez @bmunkholm 
",kneth,emanuelez
589,2014-07-15 10:54:39,"@emanuelez 
",kneth,emanuelez
588,2014-07-15 10:43:26,"@kneth @bmunkholm @jpsim 
",emanuelez,bmunkholm
588,2014-07-15 10:43:26,"@kneth @bmunkholm @jpsim 
",emanuelez,kneth
588,2014-07-15 10:43:26,"@kneth @bmunkholm @jpsim 
",emanuelez,jpsim
587,2014-07-15 10:05:43,"Adding the Realm xcode5 project as a subproject.

@bmunkholm @emanuelez 
",kneth,bmunkholm
587,2014-07-15 10:05:43,"Adding the Realm xcode5 project as a subproject.

@bmunkholm @emanuelez 
",kneth,emanuelez
586,2014-07-15 10:03:25,"@kneth @bmunkholm @jpsim 
",emanuelez,bmunkholm
586,2014-07-15 10:03:25,"@kneth @bmunkholm @jpsim 
",emanuelez,kneth
586,2014-07-15 10:03:25,"@kneth @bmunkholm @jpsim 
",emanuelez,jpsim
584,2014-07-15 09:24:20,"`Realm-Info.plist` is used by Xcode 5 and Xcode 6.

@emanuelez @bmunkholm 
",kneth,bmunkholm
584,2014-07-15 09:24:20,"`Realm-Info.plist` is used by Xcode 5 and Xcode 6.

@emanuelez @bmunkholm 
",kneth,emanuelez
582,2014-07-15 07:05:43,"Due to a bug in Xcode6-Beta3, using a Swift framework from outside the xcode project that created it is [quite a complex process](https://github.com/realm/realm.io/wiki/Realm-Swift-Installation).

So I'd like us to consider using a temporary xcode project like the one included in this PR to contain all our Swift examples alongside a framework target. Given the severity of this bug, I'd expect Apple to fix it for the next Xcode beta, likely to be released on July 21st. So this is quite temporary.

But at least, it would allow us to continue working on the Swift examples. Thoughts? @kneth @emanuelez @alazier?

BTW, if someone wants to move the xcodeproj to `examples/swift` from root, please feel free to go and do that on this branch. I'll be sleeping now :).
",jpsim,alazier
582,2014-07-15 07:05:43,"Due to a bug in Xcode6-Beta3, using a Swift framework from outside the xcode project that created it is [quite a complex process](https://github.com/realm/realm.io/wiki/Realm-Swift-Installation).

So I'd like us to consider using a temporary xcode project like the one included in this PR to contain all our Swift examples alongside a framework target. Given the severity of this bug, I'd expect Apple to fix it for the next Xcode beta, likely to be released on July 21st. So this is quite temporary.

But at least, it would allow us to continue working on the Swift examples. Thoughts? @kneth @emanuelez @alazier?

BTW, if someone wants to move the xcodeproj to `examples/swift` from root, please feel free to go and do that on this branch. I'll be sleeping now :).
",jpsim,emanuelez
582,2014-07-15 07:05:43,"Due to a bug in Xcode6-Beta3, using a Swift framework from outside the xcode project that created it is [quite a complex process](https://github.com/realm/realm.io/wiki/Realm-Swift-Installation).

So I'd like us to consider using a temporary xcode project like the one included in this PR to contain all our Swift examples alongside a framework target. Given the severity of this bug, I'd expect Apple to fix it for the next Xcode beta, likely to be released on July 21st. So this is quite temporary.

But at least, it would allow us to continue working on the Swift examples. Thoughts? @kneth @emanuelez @alazier?

BTW, if someone wants to move the xcodeproj to `examples/swift` from root, please feel free to go and do that on this branch. I'll be sleeping now :).
",jpsim,kneth
582,2014-07-15 14:51:11,"@emanuelez code signing issue for RealmSwiftMigrationExample should now be fixed.

@kneth @bmunkholm final review?
",jpsim,bmunkholm
582,2014-07-15 14:51:11,"@emanuelez code signing issue for RealmSwiftMigrationExample should now be fixed.

@kneth @bmunkholm final review?
",jpsim,kneth
581,2014-07-15 02:49:21,"@jpsim @astigsen either of you want to review?

Will do migrations in separate pr.
",alazier,astigsen
581,2014-07-15 02:49:21,"@jpsim @astigsen either of you want to review?

Will do migrations in separate pr.
",alazier,jpsim
581,2014-07-15 03:53:09,"@astigsen @alazier anything else that should be done in here?
",jpsim,astigsen
578,2014-07-15 01:07:10,"Back by popular demand!

@astigsen 
",jpsim,astigsen
576,2014-07-15 00:37:58,"@alazier merging immediately.
",jpsim,alazier
575,2014-07-14 23:46:48,"@jpsim 

Please test locally. For me this fixes both the enumerate and notification tests issues.
",alazier,jpsim
574,2014-07-14 23:09:57,"@astigsen @bjchrist 
Merging immediately.
",bmunkholm,astigsen
574,2014-07-14 23:09:57,"@astigsen @bjchrist 
Merging immediately.
",bmunkholm,bjchrist
574,2014-07-14 23:16:39,"@emanuelez can you make sure to update `build.sh` to do this automatically on `set-version`?
",jpsim,emanuelez
572,2014-07-14 22:14:05,"@timanglade @jpsim 
",bmunkholm,jpsim
572,2014-07-14 22:14:05,"@timanglade @jpsim 
",bmunkholm,timanglade
571,2014-07-14 19:25:23,"- Added vararg support to Swift

From Asana: https://app.asana.com/0/14632725644365/14707260802958

Please review @alazier @astigsen.
",jpsim,astigsen
571,2014-07-14 19:25:23,"- Added vararg support to Swift

From Asana: https://app.asana.com/0/14632725644365/14707260802958

Please review @alazier @astigsen.
",jpsim,alazier
571,2014-07-14 22:37:50,"This is ready to be reviewed @astigsen @alazier @bmunkholm. I've verified that all examples and the VisualEditor work.
",jpsim,alazier
571,2014-07-14 23:04:31,"@alazier I've made some updates based on all your feedback.
",jpsim,alazier
569,2014-07-14 16:24:54,"Actually, there's a problem with this. All our examples rely on `Realm.framework` being the iOS version, whereas this example needs `Realm.framework` to be built for OSX.

Thoughts on resolving this @emanuelez @kneth? It's a packaging issue.
",jpsim,kneth
569,2014-07-14 16:24:54,"Actually, there's a problem with this. All our examples rely on `Realm.framework` being the iOS version, whereas this example needs `Realm.framework` to be built for OSX.

Thoughts on resolving this @emanuelez @kneth? It's a packaging issue.
",jpsim,emanuelez
568,2014-07-14 15:39:11,"@bmunkholm 

https://app.asana.com/0/14632725644365/14632725644508
",kneth,bmunkholm
567,2014-07-14 15:27:19,"As discussed in [Asana](https://app.asana.com/0/14632725644365/14638503942521), I don't think these examples add value given our other examples, so I'd rather remove them from the repo.

@bmunkholm @timanglade.
",jpsim,bmunkholm
567,2014-07-14 15:27:19,"As discussed in [Asana](https://app.asana.com/0/14632725644365/14638503942521), I don't think these examples add value given our other examples, so I'd rather remove them from the repo.

@bmunkholm @timanglade.
",jpsim,timanglade
567,2014-07-14 16:21:24,"Ok, 2 people are for removing, 1 is for keeping. I'd like to know what @timanglade thinks of this.
",jpsim,timanglade
566,2014-07-14 14:49:25,"@emanuelez @jpsim 
",kneth,jpsim
566,2014-07-14 14:49:25,"@emanuelez @jpsim 
",kneth,emanuelez
565,2014-07-14 14:45:34,"@kneth @jpsim @bmunkholm 
",emanuelez,jpsim
565,2014-07-14 14:45:34,"@kneth @jpsim @bmunkholm 
",emanuelez,bmunkholm
565,2014-07-14 14:45:34,"@kneth @jpsim @bmunkholm 
",emanuelez,kneth
564,2014-07-14 13:36:50,"...leaned up.

@kneth 
",bmunkholm,kneth
563,2014-07-14 12:55:14,"@timanglade @kneth 
",oleks,timanglade
563,2014-07-14 12:55:14,"@timanglade @kneth 
",oleks,kneth
563,2014-07-14 18:51:58,"@timanglade ?
",bmunkholm,timanglade
562,2014-07-14 11:42:16,"https://app.asana.com/0/14632725644365/14633223435150

@timanglade @bmunkholm @bjchrist 
",kneth,bmunkholm
562,2014-07-14 11:42:16,"https://app.asana.com/0/14632725644365/14633223435150

@timanglade @bmunkholm @bjchrist 
",kneth,bjchrist
562,2014-07-14 11:42:16,"https://app.asana.com/0/14632725644365/14633223435150

@timanglade @bmunkholm @bjchrist 
",kneth,timanglade
561,2014-07-14 09:20:30,"@kneth @jpsim @bmunkholm 
",emanuelez,jpsim
561,2014-07-14 09:20:30,"@kneth @jpsim @bmunkholm 
",emanuelez,bmunkholm
561,2014-07-14 09:20:30,"@kneth @jpsim @bmunkholm 
",emanuelez,kneth
559,2014-07-14 00:57:57,"New method to batch delete an RLMArray or NSArray of objects from a Realm. Solves the issue run into by @bjchrist 

Depends on the array literal pr #557 for the tests only.

@astigsen @bmunkholm @timanglade 
",alazier,astigsen
559,2014-07-14 00:57:57,"New method to batch delete an RLMArray or NSArray of objects from a Realm. Solves the issue run into by @bjchrist 

Depends on the array literal pr #557 for the tests only.

@astigsen @bmunkholm @timanglade 
",alazier,bmunkholm
559,2014-07-14 00:57:57,"New method to batch delete an RLMArray or NSArray of objects from a Realm. Solves the issue run into by @bjchrist 

Depends on the array literal pr #557 for the tests only.

@astigsen @bmunkholm @timanglade 
",alazier,bjchrist
559,2014-07-14 00:57:57,"New method to batch delete an RLMArray or NSArray of objects from a Realm. Solves the issue run into by @bjchrist 

Depends on the array literal pr #557 for the tests only.

@astigsen @bmunkholm @timanglade 
",alazier,timanglade
557,2014-07-13 18:33:06,"@astigsen was pretty adamant on having support for this, so here it is. Could probably used some more testing but please take a look and start reviewing if we want this in for the release.

I also added a method [RLMObject createInDefaultRealmWithObject:] as it is something we have talked about adding in the past but never got around to.

@bmunkholm @timanglade @jpsim 
",alazier,astigsen
557,2014-07-13 18:33:06,"@astigsen was pretty adamant on having support for this, so here it is. Could probably used some more testing but please take a look and start reviewing if we want this in for the release.

I also added a method [RLMObject createInDefaultRealmWithObject:] as it is something we have talked about adding in the past but never got around to.

@bmunkholm @timanglade @jpsim 
",alazier,bmunkholm
557,2014-07-13 18:33:06,"@astigsen was pretty adamant on having support for this, so here it is. Could probably used some more testing but please take a look and start reviewing if we want this in for the release.

I also added a method [RLMObject createInDefaultRealmWithObject:] as it is something we have talked about adding in the past but never got around to.

@bmunkholm @timanglade @jpsim 
",alazier,timanglade
557,2014-07-13 18:33:06,"@astigsen was pretty adamant on having support for this, so here it is. Could probably used some more testing but please take a look and start reviewing if we want this in for the release.

I also added a method [RLMObject createInDefaultRealmWithObject:] as it is something we have talked about adding in the past but never got around to.

@bmunkholm @timanglade @jpsim 
",alazier,jpsim
557,2014-07-13 20:06:27,"Works well for me. I can now also run my previously failing sample code :-)

So +1 from me on functionality. Maybe @jpsim should review for obj-c specifics.
",astigsen,jpsim
557,2014-07-13 22:38:58,"Don't have time to review, but cool if @jpsim gives +1.
",bmunkholm,jpsim
556,2014-07-13 01:42:00,"Query results in RLMArrays did not update correctly on changes. The fix was minor, but it depends on core PR #481 

@alazier @jpsim 
",astigsen,alazier
556,2014-07-13 01:42:00,"Query results in RLMArrays did not update correctly on changes. The fix was minor, but it depends on core PR #481 

@alazier @jpsim 
",astigsen,jpsim
555,2014-07-13 00:40:53,"- make default migration more obvious 
- put the block as the last argument

addresses issues run into by Anuok

@jpsim @timanglade 
",alazier,jpsim
555,2014-07-13 00:40:53,"- make default migration more obvious 
- put the block as the last argument

addresses issues run into by Anuok

@jpsim @timanglade 
",alazier,timanglade
555,2014-07-13 16:40:51,"@astigsen @bmunkholm 

Please review
",alazier,astigsen
555,2014-07-13 16:40:51,"@astigsen @bmunkholm 

Please review
",alazier,bmunkholm
554,2014-07-11 20:02:13,"This speeds up fast enumeration due to the fact that the destructor for core accessors is unacceptably slow when you have a large set of outstanding accessors. This changes allows objc accessors to be released after each batch of 16 items are enumerated. This has the added benefit of not having memory grow indefinitely when enumerating large sets of items.

Please review this carefully and if you have time test this out as these changes are not trivial.

@jpsim @astigsen @bmunkholm @timanglade 
",alazier,astigsen
554,2014-07-11 20:02:13,"This speeds up fast enumeration due to the fact that the destructor for core accessors is unacceptably slow when you have a large set of outstanding accessors. This changes allows objc accessors to be released after each batch of 16 items are enumerated. This has the added benefit of not having memory grow indefinitely when enumerating large sets of items.

Please review this carefully and if you have time test this out as these changes are not trivial.

@jpsim @astigsen @bmunkholm @timanglade 
",alazier,jpsim
554,2014-07-11 20:02:13,"This speeds up fast enumeration due to the fact that the destructor for core accessors is unacceptably slow when you have a large set of outstanding accessors. This changes allows objc accessors to be released after each batch of 16 items are enumerated. This has the added benefit of not having memory grow indefinitely when enumerating large sets of items.

Please review this carefully and if you have time test this out as these changes are not trivial.

@jpsim @astigsen @bmunkholm @timanglade 
",alazier,bmunkholm
554,2014-07-11 20:02:13,"This speeds up fast enumeration due to the fact that the destructor for core accessors is unacceptably slow when you have a large set of outstanding accessors. This changes allows objc accessors to be released after each batch of 16 items are enumerated. This has the added benefit of not having memory grow indefinitely when enumerating large sets of items.

Please review this carefully and if you have time test this out as these changes are not trivial.

@jpsim @astigsen @bmunkholm @timanglade 
",alazier,timanglade
553,2014-07-11 07:27:14,"This PR adds a simple search box to the browser. You can write anything, and it will try to be a bit intelligent and search in all the columns that could contain the value (recognizing numbers and strings that could be booleans).

Current limitations:
- Only searches in bool, int and string columns
- Does not yet support searching in link arrays.

@zuschlag @bmunkholm 
",astigsen,bmunkholm
553,2014-07-11 07:27:14,"This PR adds a simple search box to the browser. You can write anything, and it will try to be a bit intelligent and search in all the columns that could contain the value (recognizing numbers and strings that could be booleans).

Current limitations:
- Only searches in bool, int and string columns
- Does not yet support searching in link arrays.

@zuschlag @bmunkholm 
",astigsen,zuschlag
552,2014-07-11 03:08:16,"Should be a quick review @alazier 
",jpsim,alazier
551,2014-07-11 01:48:34,"Fix was to temporarily remove bridging header and re-add as a public header in the framework.

Ready to review @alazier @bmunkholm. Will be merging into `jp-swift-introspection`.
",jpsim,alazier
551,2014-07-11 01:48:34,"Fix was to temporarily remove bridging header and re-add as a public header in the framework.

Ready to review @alazier @bmunkholm. Will be merging into `jp-swift-introspection`.
",jpsim,bmunkholm
550,2014-07-10 21:41:05,"About time for a PR. Remember it's still WIP and there's a bunch of tasks in asana. But the navigation and history should be in place + various smaller improvements.
@bmunkholm 
@kneth 
@astigsen 
@alazier 
@jpsim 
",zuschlag,astigsen
550,2014-07-10 21:41:05,"About time for a PR. Remember it's still WIP and there's a bunch of tasks in asana. But the navigation and history should be in place + various smaller improvements.
@bmunkholm 
@kneth 
@astigsen 
@alazier 
@jpsim 
",zuschlag,bmunkholm
550,2014-07-10 21:41:05,"About time for a PR. Remember it's still WIP and there's a bunch of tasks in asana. But the navigation and history should be in place + various smaller improvements.
@bmunkholm 
@kneth 
@astigsen 
@alazier 
@jpsim 
",zuschlag,alazier
550,2014-07-10 21:41:05,"About time for a PR. Remember it's still WIP and there's a bunch of tasks in asana. But the navigation and history should be in place + various smaller improvements.
@bmunkholm 
@kneth 
@astigsen 
@alazier 
@jpsim 
",zuschlag,kneth
550,2014-07-10 21:41:05,"About time for a PR. Remember it's still WIP and there's a bunch of tasks in asana. But the navigation and history should be in place + various smaller improvements.
@bmunkholm 
@kneth 
@astigsen 
@alazier 
@jpsim 
",zuschlag,jpsim
548,2014-07-10 00:17:22,"@astigsen 
",alazier,astigsen
547,2014-07-09 22:26:58,"Just some minor doc updates inspired by items of confusion in out latest user testing.

@timanglade 
",astigsen,timanglade
545,2014-07-09 18:53:27,"@kspangsege @bmunkholm 
",alazier,bmunkholm
545,2014-07-09 18:53:27,"@kspangsege @bmunkholm 
",alazier,kspangsege
545,2014-07-09 19:15:11,"@jpsim 
",alazier,jpsim
545,2014-07-09 19:16:01,"Looks good to me. Let's merge it and if @kspangsege or @bmunkholm have any concerns, they should let us know afterwards.
",jpsim,bmunkholm
545,2014-07-09 19:16:01,"Looks good to me. Let's merge it and if @kspangsege or @bmunkholm have any concerns, they should let us know afterwards.
",jpsim,kspangsege
544,2014-07-09 18:26:00,"A few small improvements to some common error messages I have seen. Will add more fixes once I get the feedback from today's user testing.

@timanglade @astigsen @jpsim 
",alazier,astigsen
544,2014-07-09 18:26:00,"A few small improvements to some common error messages I have seen. Will add more fixes once I get the feedback from today's user testing.

@timanglade @astigsen @jpsim 
",alazier,jpsim
544,2014-07-09 18:26:00,"A few small improvements to some common error messages I have seen. Will add more fixes once I get the feedback from today's user testing.

@timanglade @astigsen @jpsim 
",alazier,timanglade
543,2014-07-10 11:12:47,"This is now ready for review. Please test it on your machines locally.
@jpsim @alazier 
",emanuelez,alazier
541,2014-07-08 20:22:49,"- don't create timer on Realm until _sharedGroup is created and tables are initialized.
- code clean-up

@jpsim 
",alazier,jpsim
540,2014-07-08 15:08:21,"@alazier 
",kneth,alazier
539,2014-07-08 14:18:23,"@emanuelez @kneth 
",alazier,kneth
539,2014-07-08 14:18:23,"@emanuelez @kneth 
",alazier,emanuelez
539,2014-07-08 18:29:57,"@jpsim says :+1: 
",alazier,jpsim
538,2014-07-08 11:06:57,"@kneth @jpsim 

Merging quickly
",emanuelez,jpsim
538,2014-07-08 11:06:57,"@kneth @jpsim 

Merging quickly
",emanuelez,kneth
537,2014-07-08 00:58:05,"Fixes the following bugs:
- indexOfObject: would throw when in some cases when not necessary (standalone object or objects in other realms)
- standalone arrays allowed you to add objects of the wrong type
- manually setting a readonly RLMArray to a standalone array would result in that array being returned on subsequent access (rather than copying the data and returning a mutable array)
- indexOfObject: implementations did not ensure objects were attached
- indesOfObject: on standalone arrays was not functional - fixed by implmenting isEqual: for RLMObject

@astigsen @jpsim @bmunkholm 
",alazier,astigsen
537,2014-07-08 00:58:05,"Fixes the following bugs:
- indexOfObject: would throw when in some cases when not necessary (standalone object or objects in other realms)
- standalone arrays allowed you to add objects of the wrong type
- manually setting a readonly RLMArray to a standalone array would result in that array being returned on subsequent access (rather than copying the data and returning a mutable array)
- indexOfObject: implementations did not ensure objects were attached
- indesOfObject: on standalone arrays was not functional - fixed by implmenting isEqual: for RLMObject

@astigsen @jpsim @bmunkholm 
",alazier,jpsim
537,2014-07-08 00:58:05,"Fixes the following bugs:
- indexOfObject: would throw when in some cases when not necessary (standalone object or objects in other realms)
- standalone arrays allowed you to add objects of the wrong type
- manually setting a readonly RLMArray to a standalone array would result in that array being returned on subsequent access (rather than copying the data and returning a mutable array)
- indexOfObject: implementations did not ensure objects were attached
- indesOfObject: on standalone arrays was not functional - fixed by implmenting isEqual: for RLMObject

@astigsen @jpsim @bmunkholm 
",alazier,bmunkholm
536,2014-07-07 22:47:12,"Fixes https://app.asana.com/0/861870036984/13586593995277

This takes into account the fact that a write transaction takes place when opening a Realm instance. With this change we now can properly test that Realms in other threads are updated immediately and have also switched over to using NSThread instead of NSRunloop to get lower latency notifications and better swift support.

@bmunkholm @jpsim 
",alazier,bmunkholm
536,2014-07-07 22:47:12,"Fixes https://app.asana.com/0/861870036984/13586593995277

This takes into account the fact that a write transaction takes place when opening a Realm instance. With this change we now can properly test that Realms in other threads are updated immediately and have also switched over to using NSThread instead of NSRunloop to get lower latency notifications and better swift support.

@bmunkholm @jpsim 
",alazier,jpsim
535,2014-07-07 20:35:00,"Addresses https://app.asana.com/0/861870036984/14408232093074 per @timanglade 's request.

We are now exposing the objectSchema property on RLMObject so that this can be accessed/introspected during migrations. Also fixed a bug caused by the performance changes (enumerating objects which don't exist in the old version, but are added during the migration).

@jpsim @bmunkholm 
",alazier,jpsim
535,2014-07-07 20:35:00,"Addresses https://app.asana.com/0/861870036984/14408232093074 per @timanglade 's request.

We are now exposing the objectSchema property on RLMObject so that this can be accessed/introspected during migrations. Also fixed a bug caused by the performance changes (enumerating objects which don't exist in the old version, but are added during the migration).

@jpsim @bmunkholm 
",alazier,bmunkholm
535,2014-07-07 20:35:00,"Addresses https://app.asana.com/0/861870036984/14408232093074 per @timanglade 's request.

We are now exposing the objectSchema property on RLMObject so that this can be accessed/introspected during migrations. Also fixed a bug caused by the performance changes (enumerating objects which don't exist in the old version, but are added during the migration).

@jpsim @bmunkholm 
",alazier,timanglade
534,2014-07-07 17:26:30,"Completes https://app.asana.com/0/10990958380003/13435655998633

We needed to keep the RLMRealm query apis for the dynamic interface - these have been moved to a new header RLMRealm_Dynamic.h and are currently private.

@jpsim
",alazier,jpsim
534,2014-07-07 20:11:19,"@kneth @bmunkholm 
",alazier,bmunkholm
534,2014-07-07 20:11:19,"@kneth @bmunkholm 
",alazier,kneth
532,2014-07-13 20:58:34,"@bmunkholm @timanglade Updates completed based on feedback. Please review when you have a chance.
",amuramoto,timanglade
531,2014-07-06 02:05:23,"@kneth @alazier can either of you review this?
",jpsim,alazier
531,2014-07-06 02:05:23,"@kneth @alazier can either of you review this?
",jpsim,kneth
530,2014-07-04 21:26:15,"I believe this is the reason why pushing the podspec throws the following warning:



@emanuelez 
",jpsim,emanuelez
529,2014-07-04 16:42:22,"This is to fix a problem @zuschlag ran into with tooltips.
",alazier,zuschlag
528,2014-07-04 11:06:33,"Depends on #527.

@jpsim @kneth 
",oleks,jpsim
528,2014-07-04 11:06:33,"Depends on #527.

@jpsim @kneth 
",oleks,kneth
528,2014-07-04 14:57:03,"@jpsim Please merge if you wish.
",kneth,jpsim
527,2014-07-04 09:39:17,"Depends on #526.

@alazier @kneth 
",oleks,alazier
527,2014-07-04 09:39:17,"Depends on #526.

@alazier @kneth 
",oleks,kneth
527,2014-07-04 14:55:55,"@alazier Please merge if you wish.
",kneth,alazier
526,2014-07-04 09:17:38,"This replaces the previously closed #514.

@alazier @kneth 
",oleks,alazier
526,2014-07-04 09:17:38,"This replaces the previously closed #514.

@alazier @kneth 
",oleks,kneth
526,2014-07-04 14:54:44,"@alazier Please merge if it is fine with you.
",kneth,alazier
524,2014-07-03 09:35:29,"@zuschlag 
",emanuelez,zuschlag
522,2014-07-03 01:38:12,"4 optimizations that make inserts 2.5 times faster:
1. Remove a property lookup by name during dynamic insertion
2. Keep a table accessor on RLMObjectSchema objects and re-use these accessors rather than creating on demand
3. Add __unsafe_unretained flags to objects passed into accessor methods to prevent arc from inserting retain/release calls
4. Swap in runtime implementations for className and sharedSchema for each object type to prevent the need for string allocation for classname and dictionary lookups for the schema.

@astigsen @jpsim @timanglade 
",alazier,astigsen
522,2014-07-03 01:38:12,"4 optimizations that make inserts 2.5 times faster:
1. Remove a property lookup by name during dynamic insertion
2. Keep a table accessor on RLMObjectSchema objects and re-use these accessors rather than creating on demand
3. Add __unsafe_unretained flags to objects passed into accessor methods to prevent arc from inserting retain/release calls
4. Swap in runtime implementations for className and sharedSchema for each object type to prevent the need for string allocation for classname and dictionary lookups for the schema.

@astigsen @jpsim @timanglade 
",alazier,jpsim
522,2014-07-03 01:38:12,"4 optimizations that make inserts 2.5 times faster:
1. Remove a property lookup by name during dynamic insertion
2. Keep a table accessor on RLMObjectSchema objects and re-use these accessors rather than creating on demand
3. Add __unsafe_unretained flags to objects passed into accessor methods to prevent arc from inserting retain/release calls
4. Swap in runtime implementations for className and sharedSchema for each object type to prevent the need for string allocation for classname and dictionary lookups for the schema.

@astigsen @jpsim @timanglade 
",alazier,timanglade
521,2014-07-03 01:09:52,"Implemented indexOfObject for RLMArray (both with underlying TableViews and LinkViews).

This PR is dependent on tightdb PR #472 

@alazier @jpsim @zuschlag 
",astigsen,alazier
521,2014-07-03 01:09:52,"Implemented indexOfObject for RLMArray (both with underlying TableViews and LinkViews).

This PR is dependent on tightdb PR #472 

@alazier @jpsim @zuschlag 
",astigsen,zuschlag
521,2014-07-03 01:09:52,"Implemented indexOfObject for RLMArray (both with underlying TableViews and LinkViews).

This PR is dependent on tightdb PR #472 

@alazier @jpsim @zuschlag 
",astigsen,jpsim
520,2014-07-02 23:53:06,"Ari and I are both fans of keeping `Realm{-Xcode6}.xcodeproj` as a subproject in the example projects, but it was difficult to do that while preserving the ability to have CI automatically package the examples in a self-contained way.

This PR includes `Realm{-Xcode6}.xcodeproj` as a subproject in every example project. Running `scripts/package_examples.rb` removes the subprojects and instead links to `Realm.framework` directly. You'll notice that `swift/` and `objc/` both have their own `Realm.framework` because the Swift and Objective-C frameworks are different.

So the final structure is



This script assumes that the frameworks are already at the appropriate locations.

Please review @emanuelez @alazier @kneth 
",jpsim,alazier
520,2014-07-02 23:53:06,"Ari and I are both fans of keeping `Realm{-Xcode6}.xcodeproj` as a subproject in the example projects, but it was difficult to do that while preserving the ability to have CI automatically package the examples in a self-contained way.

This PR includes `Realm{-Xcode6}.xcodeproj` as a subproject in every example project. Running `scripts/package_examples.rb` removes the subprojects and instead links to `Realm.framework` directly. You'll notice that `swift/` and `objc/` both have their own `Realm.framework` because the Swift and Objective-C frameworks are different.

So the final structure is



This script assumes that the frameworks are already at the appropriate locations.

Please review @emanuelez @alazier @kneth 
",jpsim,kneth
520,2014-07-02 23:53:06,"Ari and I are both fans of keeping `Realm{-Xcode6}.xcodeproj` as a subproject in the example projects, but it was difficult to do that while preserving the ability to have CI automatically package the examples in a self-contained way.

This PR includes `Realm{-Xcode6}.xcodeproj` as a subproject in every example project. Running `scripts/package_examples.rb` removes the subprojects and instead links to `Realm.framework` directly. You'll notice that `swift/` and `objc/` both have their own `Realm.framework` because the Swift and Objective-C frameworks are different.

So the final structure is



This script assumes that the frameworks are already at the appropriate locations.

Please review @emanuelez @alazier @kneth 
",jpsim,emanuelez
520,2014-07-03 16:40:27,"So what are your current thoughts on this, @kneth and @emanuelez?
",jpsim,kneth
519,2014-07-02 22:46:16,"@timanglade @jpsim 

Tests behavior reported by AlexM
",alazier,jpsim
519,2014-07-02 22:46:16,"@timanglade @jpsim 

Tests behavior reported by AlexM
",alazier,timanglade
517,2014-07-02 21:09:14,"Made sidebar look more like Finder:
- Correct gray color and size of headers
- Gradient selection background
- Background change color when loosing focus
- Headers not selectable

Also made child arrays disappear when not in use.

@zuschlag 
",astigsen,zuschlag
516,2014-07-02 14:48:36,"It seems confusing that this prefix is written for a whole range of different
errors that may occur.

@jpsim @alazier 
",oleks,jpsim
516,2014-07-02 14:48:36,"It seems confusing that this prefix is written for a whole range of different
errors that may occur.

@jpsim @alazier 
",oleks,alazier
515,2014-07-02 14:42:54,"Depends on #514. Rebased on #526.

@alazier @kneth 
",oleks,alazier
515,2014-07-02 14:42:54,"Depends on #514. Rebased on #526.

@alazier @kneth 
",oleks,kneth
514,2014-07-02 14:37:24,"Depends on #513.

@jpsim @alazier 
",oleks,jpsim
514,2014-07-02 14:37:24,"Depends on #513.

@jpsim @alazier 
",oleks,alazier
513,2014-07-02 11:34:37,"@jpsim @alazier 
",oleks,jpsim
513,2014-07-02 11:34:37,"@jpsim @alazier 
",oleks,alazier
512,2014-07-02 02:08:49,"@emanuelez please review & merge at your discretion. 

For releases `docs/src/docs.md` will need to be copied as-is to to docs/ios/<VERSION>/index.md in the realm.io repo.
",timanglade,emanuelez
511,2014-07-01 17:09:49,"@jpsim please merge this into your branch if things look ok.

This fixes some issues, but does not resolve any of our current major deficiencies.
- Adds back in most of the tests (they weren't included in the project)
- Merges with migrations and uses most of the new changes appropriately
- Fixes some of my code organization gripes
",alazier,jpsim
511,2014-07-01 17:14:24,"Probably because I haven't merged master into `jp-swift-introspection` since @zuschlag and your PR's were merged in there.

It'll make reviewing this a bit difficult...
",jpsim,zuschlag
511,2014-07-01 17:14:55,"You could just review the latest commits

On Tue, Jul 1, 2014 at 10:14 AM, JP Simard notifications@github.com wrote:

> Probably because I haven't merged master into jp-swift-introspection
> since @zuschlag https://github.com/zuschlag and your PR's were merged
> in there.
> 
> It'll make reviewing this a bit difficult...
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/511#issuecomment-47683907.
",alazier,zuschlag
511,2014-07-01 17:15:10,"Or do the merge and I can re-do the pr

On Tue, Jul 1, 2014 at 10:14 AM, Ari Lazier alazier@gmail.com wrote:

> You could just review the latest commits
> 
> On Tue, Jul 1, 2014 at 10:14 AM, JP Simard notifications@github.com
> wrote:
> 
> > Probably because I haven't merged master into jp-swift-introspection
> > since @zuschlag https://github.com/zuschlag and your PR's were merged
> > in there.
> > 
> > It'll make reviewing this a bit difficult...
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/realm/realm-cocoa/pull/511#issuecomment-47683907.
",alazier,zuschlag
510,2014-07-01 09:49:17,"Ok. So let's wait for an OK from @timanglade on the naming so we can run a test.

Just to specify... for the lint test I temporarily uploaded a 0.22.0 framework to static.realm.io (now deleted) and run the pod command. It resolved the version correctly, downloaded the file locally and tried to reach the documentation page for 0.22.0, which is missing, so that's where it failed.

All in all I was only interested in the version resolution and that worked fine.
",emanuelez,timanglade
509,2014-07-01 09:00:33,"@kneth @jpsim
",emanuelez,jpsim
509,2014-07-01 09:00:33,"@kneth @jpsim
",emanuelez,kneth
508,2014-07-01 01:17:15,"@timanglade 
",alazier,timanglade
506,2014-06-30 18:36:48,"This makes the async tests work in xcode6. Before notifications were not working when using the new sdk.

We are now using the async apis built into XCTest starting in XCode6. In xcode 5 we have a primitive implementation of the new apis for compatibility. This also allows us to remove XCTest+AsyncTesting.

@jpsim 
",alazier,jpsim
505,2014-06-30 10:38:47,"@emanuelez @rrrlasse 
",kneth,rrrlasse
505,2014-06-30 10:38:47,"@emanuelez @rrrlasse 
",kneth,emanuelez
502,2014-06-27 22:24:47,"Somebody please take glance at this!
@bmunkholm @jpsim @alazier ?
",zuschlag,bmunkholm
502,2014-06-27 22:24:47,"Somebody please take glance at this!
@bmunkholm @jpsim @alazier ?
",zuschlag,alazier
502,2014-06-27 22:24:47,"Somebody please take glance at this!
@bmunkholm @jpsim @alazier ?
",zuschlag,jpsim
501,2014-06-27 11:16:18,"Unused error types have been outcommented

@bmunkholm @timanglade @jpsim @alazier 
",mekjaer,bmunkholm
501,2014-06-27 11:16:18,"Unused error types have been outcommented

@bmunkholm @timanglade @jpsim @alazier 
",mekjaer,alazier
501,2014-06-27 11:16:18,"Unused error types have been outcommented

@bmunkholm @timanglade @jpsim @alazier 
",mekjaer,timanglade
501,2014-06-27 11:16:18,"Unused error types have been outcommented

@bmunkholm @timanglade @jpsim @alazier 
",mekjaer,jpsim
500,2014-06-27 10:04:41,"Depends on https://github.com/Tightdb/tightdb/pull/466

@alazier @bmunkholm 
",kneth,alazier
500,2014-06-27 10:04:41,"Depends on https://github.com/Tightdb/tightdb/pull/466

@alazier @bmunkholm 
",kneth,bmunkholm
498,2014-06-27 09:02:11,"@kneth 
",mekjaer,kneth
497,2014-06-27 08:53:40,"@bmunkholm @jpsim 
",mekjaer,bmunkholm
497,2014-06-27 08:53:40,"@bmunkholm @jpsim 
",mekjaer,jpsim
496,2014-06-26 14:26:42,"Getting a few coverage points her and there
@bmunkholm 
",mekjaer,bmunkholm
495,2014-06-26 14:13:24,"@kneth @jpsim @bmunkholm 
",emanuelez,jpsim
495,2014-06-26 14:13:24,"@kneth @jpsim @bmunkholm 
",emanuelez,bmunkholm
495,2014-06-26 14:13:24,"@kneth @jpsim @bmunkholm 
",emanuelez,kneth
494,2014-06-26 13:44:54,"@kneth 
",mekjaer,kneth
493,2014-06-26 13:26:40,"The Compare class declared in the core library's `query_expression.hpp` is no longer supported for two-column comparisons. Using the table’s column comparison operators can be used instead.

@rrrlasse @alazier @mekjaer @kspangsege 

See https://app.asana.com/0/861870036984/13392049000660 and https://github.com/Tightdb/tightdb/pull/462
",kneth,mekjaer
493,2014-06-26 13:26:40,"The Compare class declared in the core library's `query_expression.hpp` is no longer supported for two-column comparisons. Using the table’s column comparison operators can be used instead.

@rrrlasse @alazier @mekjaer @kspangsege 

See https://app.asana.com/0/861870036984/13392049000660 and https://github.com/Tightdb/tightdb/pull/462
",kneth,alazier
493,2014-06-26 13:26:40,"The Compare class declared in the core library's `query_expression.hpp` is no longer supported for two-column comparisons. Using the table’s column comparison operators can be used instead.

@rrrlasse @alazier @mekjaer @kspangsege 

See https://app.asana.com/0/861870036984/13392049000660 and https://github.com/Tightdb/tightdb/pull/462
",kneth,rrrlasse
493,2014-06-26 13:26:40,"The Compare class declared in the core library's `query_expression.hpp` is no longer supported for two-column comparisons. Using the table’s column comparison operators can be used instead.

@rrrlasse @alazier @mekjaer @kspangsege 

See https://app.asana.com/0/861870036984/13392049000660 and https://github.com/Tightdb/tightdb/pull/462
",kneth,kspangsege
492,2014-06-26 12:08:28,"@kneth @jpsim 
",emanuelez,jpsim
492,2014-06-26 12:08:28,"@kneth @jpsim 
",emanuelez,kneth
491,2014-06-26 11:56:51,"@kneth @kspangsege @jpsim 
",emanuelez,jpsim
491,2014-06-26 11:56:51,"@kneth @kspangsege @jpsim 
",emanuelez,kspangsege
491,2014-06-26 11:56:51,"@kneth @kspangsege @jpsim 
",emanuelez,kneth
490,2014-06-26 10:39:41,"A recent change in core have made this test fail. The fallout has been reported and is actively being figured out. https://app.asana.com/0/861870036984/13392049000660
In the meantime, this test is disabled so PR's can be tested

@realm/cocoa @rrrlasse @astigsen @emanuelez 
",mekjaer,astigsen
490,2014-06-26 10:39:41,"A recent change in core have made this test fail. The fallout has been reported and is actively being figured out. https://app.asana.com/0/861870036984/13392049000660
In the meantime, this test is disabled so PR's can be tested

@realm/cocoa @rrrlasse @astigsen @emanuelez 
",mekjaer,rrrlasse
490,2014-06-26 10:39:41,"A recent change in core have made this test fail. The fallout has been reported and is actively being figured out. https://app.asana.com/0/861870036984/13392049000660
In the meantime, this test is disabled so PR's can be tested

@realm/cocoa @rrrlasse @astigsen @emanuelez 
",mekjaer,realm
490,2014-06-26 10:39:41,"A recent change in core have made this test fail. The fallout has been reported and is actively being figured out. https://app.asana.com/0/861870036984/13392049000660
In the meantime, this test is disabled so PR's can be tested

@realm/cocoa @rrrlasse @astigsen @emanuelez 
",mekjaer,emanuelez
489,2014-06-26 09:52:27,"@kneth @jpsim 
",emanuelez,jpsim
489,2014-06-26 09:52:27,"@kneth @jpsim 
",emanuelez,kneth
489,2014-06-26 09:52:47,"Reviewed at my desk by @kneth 
",emanuelez,kneth
488,2014-06-26 09:20:06,"Added simple example mirroring the one in objc.
When https://github.com/realm/realm-cocoa/pull/487 is merged, the example should be updated to define the objects (including an object with a link property) in Swift.
Asana ticket for that: https://app.asana.com/0/861870036984/13360780622449

@bmunkholm @jpsim @timanglade 
",mekjaer,bmunkholm
488,2014-06-26 09:20:06,"Added simple example mirroring the one in objc.
When https://github.com/realm/realm-cocoa/pull/487 is merged, the example should be updated to define the objects (including an object with a link property) in Swift.
Asana ticket for that: https://app.asana.com/0/861870036984/13360780622449

@bmunkholm @jpsim @timanglade 
",mekjaer,timanglade
488,2014-06-26 09:20:06,"Added simple example mirroring the one in objc.
When https://github.com/realm/realm-cocoa/pull/487 is merged, the example should be updated to define the objects (including an object with a link property) in Swift.
Asana ticket for that: https://app.asana.com/0/861870036984/13360780622449

@bmunkholm @jpsim @timanglade 
",mekjaer,jpsim
487,2014-06-26 06:59:39,"Features:
- Supports all RLMPropertyTypes except Any
- +className returns demangled name
- column names are demangled
- Arrays support Sequence-style enumeration (`for obj in array`)
- Xcode 5 project and tests continue to work with these changes

Caveats:
- Properties require a default value. This can be an empty (but typed) array for array properties.
- The previous caveat also implies that not all models defined in Objective-C can be used for object properties. Only Objective-C models with only implicit (i.e. primitives) or explicit default values can be used. However, any Objective-C model object can be used in a Swift array property.
- Array property accessors don't work until its parent object has been added to a realm.
- Several properties/methods that were previously private are now exposed. This is because an Objective-C bridging header can only be included in the framework if the bridging header of the tests target doesn't import anything from the framework. The alternative is to not test any Objective-C objects from Swift. Hopefully Xcode fixes this issue in the future.

Call for review /cc @astigsen @alazier @kneth @mekjaer.
",jpsim,astigsen
487,2014-06-26 06:59:39,"Features:
- Supports all RLMPropertyTypes except Any
- +className returns demangled name
- column names are demangled
- Arrays support Sequence-style enumeration (`for obj in array`)
- Xcode 5 project and tests continue to work with these changes

Caveats:
- Properties require a default value. This can be an empty (but typed) array for array properties.
- The previous caveat also implies that not all models defined in Objective-C can be used for object properties. Only Objective-C models with only implicit (i.e. primitives) or explicit default values can be used. However, any Objective-C model object can be used in a Swift array property.
- Array property accessors don't work until its parent object has been added to a realm.
- Several properties/methods that were previously private are now exposed. This is because an Objective-C bridging header can only be included in the framework if the bridging header of the tests target doesn't import anything from the framework. The alternative is to not test any Objective-C objects from Swift. Hopefully Xcode fixes this issue in the future.

Call for review /cc @astigsen @alazier @kneth @mekjaer.
",jpsim,alazier
487,2014-06-26 06:59:39,"Features:
- Supports all RLMPropertyTypes except Any
- +className returns demangled name
- column names are demangled
- Arrays support Sequence-style enumeration (`for obj in array`)
- Xcode 5 project and tests continue to work with these changes

Caveats:
- Properties require a default value. This can be an empty (but typed) array for array properties.
- The previous caveat also implies that not all models defined in Objective-C can be used for object properties. Only Objective-C models with only implicit (i.e. primitives) or explicit default values can be used. However, any Objective-C model object can be used in a Swift array property.
- Array property accessors don't work until its parent object has been added to a realm.
- Several properties/methods that were previously private are now exposed. This is because an Objective-C bridging header can only be included in the framework if the bridging header of the tests target doesn't import anything from the framework. The alternative is to not test any Objective-C objects from Swift. Hopefully Xcode fixes this issue in the future.

Call for review /cc @astigsen @alazier @kneth @mekjaer.
",jpsim,mekjaer
487,2014-06-26 06:59:39,"Features:
- Supports all RLMPropertyTypes except Any
- +className returns demangled name
- column names are demangled
- Arrays support Sequence-style enumeration (`for obj in array`)
- Xcode 5 project and tests continue to work with these changes

Caveats:
- Properties require a default value. This can be an empty (but typed) array for array properties.
- The previous caveat also implies that not all models defined in Objective-C can be used for object properties. Only Objective-C models with only implicit (i.e. primitives) or explicit default values can be used. However, any Objective-C model object can be used in a Swift array property.
- Array property accessors don't work until its parent object has been added to a realm.
- Several properties/methods that were previously private are now exposed. This is because an Objective-C bridging header can only be included in the framework if the bridging header of the tests target doesn't import anything from the framework. The alternative is to not test any Objective-C objects from Swift. Hopefully Xcode fixes this issue in the future.

Call for review /cc @astigsen @alazier @kneth @mekjaer.
",jpsim,kneth
487,2014-07-14 07:11:39,"READY FOR REVIEW: @astigsen @alazier @kneth @bmunkholm.

Current State:

Features:
- Supports all RLMPropertyTypes except Any
- +className and column names use demangled class name
- RLMArrays support Sequence-style enumeration (`for obj in array`)
- Xcode 5 project and tests continue to work with these changes
- Swift tests test both Swift and Objective-C models

Caveats:
- Properties other than String, NSData and NSDate require a default value in the model. This can be an empty (but typed) array for array properties.
- The previous caveat also implies that not all models defined in Objective-C can be used for object properties. Only Objective-C models with only implicit (i.e. primitives) or explicit default values can be used. However, any Objective-C model object can be used in a Swift array property.
- Array property accessors don't work until its parent object has been added to a realm.
- `Realm-Bridging-Header.h` is temporarily exposed as a public header. This is temporary and will be private again once rdar://17633863 is fixed.
- Does not leverage Swift generics and still uses RLM-prefix everywhere. This is coming in #549.

So overall, I think this is ready to live in master, with bug fixes coming as future PR's.
",jpsim,astigsen
487,2014-07-14 07:11:39,"READY FOR REVIEW: @astigsen @alazier @kneth @bmunkholm.

Current State:

Features:
- Supports all RLMPropertyTypes except Any
- +className and column names use demangled class name
- RLMArrays support Sequence-style enumeration (`for obj in array`)
- Xcode 5 project and tests continue to work with these changes
- Swift tests test both Swift and Objective-C models

Caveats:
- Properties other than String, NSData and NSDate require a default value in the model. This can be an empty (but typed) array for array properties.
- The previous caveat also implies that not all models defined in Objective-C can be used for object properties. Only Objective-C models with only implicit (i.e. primitives) or explicit default values can be used. However, any Objective-C model object can be used in a Swift array property.
- Array property accessors don't work until its parent object has been added to a realm.
- `Realm-Bridging-Header.h` is temporarily exposed as a public header. This is temporary and will be private again once rdar://17633863 is fixed.
- Does not leverage Swift generics and still uses RLM-prefix everywhere. This is coming in #549.

So overall, I think this is ready to live in master, with bug fixes coming as future PR's.
",jpsim,bmunkholm
487,2014-07-14 07:11:39,"READY FOR REVIEW: @astigsen @alazier @kneth @bmunkholm.

Current State:

Features:
- Supports all RLMPropertyTypes except Any
- +className and column names use demangled class name
- RLMArrays support Sequence-style enumeration (`for obj in array`)
- Xcode 5 project and tests continue to work with these changes
- Swift tests test both Swift and Objective-C models

Caveats:
- Properties other than String, NSData and NSDate require a default value in the model. This can be an empty (but typed) array for array properties.
- The previous caveat also implies that not all models defined in Objective-C can be used for object properties. Only Objective-C models with only implicit (i.e. primitives) or explicit default values can be used. However, any Objective-C model object can be used in a Swift array property.
- Array property accessors don't work until its parent object has been added to a realm.
- `Realm-Bridging-Header.h` is temporarily exposed as a public header. This is temporary and will be private again once rdar://17633863 is fixed.
- Does not leverage Swift generics and still uses RLM-prefix everywhere. This is coming in #549.

So overall, I think this is ready to live in master, with bug fixes coming as future PR's.
",jpsim,kneth
485,2014-06-25 19:07:05,"@bmunkholm @jpsim 

@timanglade @astigsen please take a look and weigh in on the interfaces (and review all the code too if you would like)
",alazier,astigsen
485,2014-06-25 19:07:05,"@bmunkholm @jpsim 

@timanglade @astigsen please take a look and weigh in on the interfaces (and review all the code too if you would like)
",alazier,bmunkholm
485,2014-06-25 19:07:05,"@bmunkholm @jpsim 

@timanglade @astigsen please take a look and weigh in on the interfaces (and review all the code too if you would like)
",alazier,timanglade
485,2014-06-25 19:07:05,"@bmunkholm @jpsim 

@timanglade @astigsen please take a look and weigh in on the interfaces (and review all the code too if you would like)
",alazier,jpsim
485,2014-06-26 23:46:52,"@bmunkholm do you have time to review this before you leave on your trip? If not can someone else in cph take a look? If things look good I think @timanglade wants to get this into the release for tomorrow.
",alazier,bmunkholm
485,2014-06-27 13:19:39,"@astigsen - even if we want to change the design and allow stepwise migration, we still need to make the changes in this review first. Adding such capabilities with this as a starting point isn't really so bad - choosing the correct design will be the difficult part.

In any case it would be nice if we could have someone actually start reviewing the code so we can finish this pr.
",alazier,astigsen
485,2014-06-27 13:24:39,"@kneth @mekjaer @zuschlag 

One of you guys want to take a crack at reviewing this? I haven't gotten any feedback on the code yet so am branching out. It's a big pr so it might not be worth it for all of you to spend the time, but feel free to take a look if you are interested. 
",alazier,mekjaer
485,2014-06-27 13:24:39,"@kneth @mekjaer @zuschlag 

One of you guys want to take a crack at reviewing this? I haven't gotten any feedback on the code yet so am branching out. It's a big pr so it might not be worth it for all of you to spend the time, but feel free to take a look if you are interested. 
",alazier,zuschlag
485,2014-06-27 13:24:39,"@kneth @mekjaer @zuschlag 

One of you guys want to take a crack at reviewing this? I haven't gotten any feedback on the code yet so am branching out. It's a big pr so it might not be worth it for all of you to spend the time, but feel free to take a look if you are interested. 
",alazier,kneth
485,2014-06-27 13:53:30,"@alazier please be aware that @mekjaer has left the building - and will not return.
",kneth,mekjaer
485,2014-06-27 19:20:40,"This is pretty fantastic, @alazier. Seriously great work. I agree with @astigsen and you that this is a good start, but that having stepwise migrations is the next logical step. It will make writing migrations a breeze.

I also like the example, but I'm wondering if the shuffling of files is muddying the concepts being conveyed. Moving all the path generation and NSFileManager code to a separate method would help.

I should get a :dog2:.
",jpsim,astigsen
485,2014-06-27 23:55:17,"Got thumbs up from @jpsim @astigsen and @timanglade over gchat, so merging now.
",alazier,astigsen
484,2014-06-25 16:51:27,"Using error variable is a hack but keeps the changes to a minimum. The unit test is using `/dev/null` as a file name - which cannot be a realm file.

@alazier @mekjaer 

See also https://app.asana.com/0/1442494018425/12977206643240
",kneth,mekjaer
484,2014-06-25 16:51:27,"Using error variable is a hack but keeps the changes to a minimum. The unit test is using `/dev/null` as a file name - which cannot be a realm file.

@alazier @mekjaer 

See also https://app.asana.com/0/1442494018425/12977206643240
",kneth,alazier
482,2014-06-25 12:05:46,"@bmunkholm @jpsim @alazier 
",mekjaer,bmunkholm
482,2014-06-25 12:05:46,"@bmunkholm @jpsim @alazier 
",mekjaer,alazier
482,2014-06-25 12:05:46,"@bmunkholm @jpsim @alazier 
",mekjaer,jpsim
481,2014-06-25 10:44:05,"@kneth @bmunkholm @jpsim 
",mekjaer,bmunkholm
481,2014-06-25 10:44:05,"@kneth @bmunkholm @jpsim 
",mekjaer,kneth
481,2014-06-25 10:44:05,"@kneth @bmunkholm @jpsim 
",mekjaer,jpsim
480,2014-06-25 16:24:48,"Could you review, @timanglade @alazier @kneth?
",jpsim,alazier
480,2014-06-25 16:24:48,"Could you review, @timanglade @alazier @kneth?
",jpsim,timanglade
480,2014-06-25 16:24:48,"Could you review, @timanglade @alazier @kneth?
",jpsim,kneth
480,2014-06-26 07:17:06,"Thanks for the suggestion, @kneth. I removed `RLM_ARRAY_TYPE` everywhere and replaced its usage with protocol declarations.

Comments @timanglade @alazier?
",jpsim,alazier
480,2014-06-26 07:17:06,"Thanks for the suggestion, @kneth. I removed `RLM_ARRAY_TYPE` everywhere and replaced its usage with protocol declarations.

Comments @timanglade @alazier?
",jpsim,timanglade
480,2014-06-27 21:40:22,"@alazier and @timanglade, please comment on this direction before I merge.
",jpsim,alazier
480,2014-06-27 21:40:22,"@alazier and @timanglade, please comment on this direction before I merge.
",jpsim,timanglade
480,2014-06-27 21:54:50,"Works for me. We got enough confusion from the early users to know that the protocol will be an easier pill to swallow than a macro, overall. @astigsen ?
",timanglade,astigsen
480,2014-06-27 22:18:35,"I think that we should keep the macro. One concern is that by using the
protocol we put it on the user to remember a lot of syntax, so every time
(they don't use the template) they will have to look up the how exactly the
protocol was supposed to be written.

With the macro it is a lot easier. You remember that there was some macro
you had to write, so you start writing RLM_... and then autocompletion
shows you the rest.

The good thing about it is also that it is self-documenting the other way.
When a new user looks at a model and there is this strange macro at the
bottom, he can command-click it and see it described what it does and why
it is needed. With the protocol it just looks like a pretty random
leftover, so he might either be puzzled or even try to remove it (since it
is in no way evident what it does or why it is needed).

On Fri, Jun 27, 2014 at 2:54 PM, Tim Anglade notifications@github.com
wrote:

> Works for me. We got enough confusion from the early users to know that
> the protocol will be an easier pill to swallow than a macro, overall.
> @astigsen https://github.com/astigsen ?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-cocoa/pull/480#issuecomment-47404504.
",astigsen,astigsen
476,2014-06-24 14:23:50,"@kneth @bmunkholm 
For more precise code coverage
",mekjaer,bmunkholm
476,2014-06-24 14:23:50,"@kneth @bmunkholm 
For more precise code coverage
",mekjaer,kneth
475,2014-06-24 13:51:57,"Dependent on https://github.com/realm/realm-cocoa/pull/461/files

Missing defining objects with Links.
@jpsim Is it possible to define an RLMObject with a link attribute, and how?
",mekjaer,jpsim
474,2014-06-24 12:43:56,"I think that it is better to tell the user which property is wrong.

@timanglade @alazier 

See https://app.asana.com/0/861870036984/12974972189649
",kneth,alazier
474,2014-06-24 12:43:56,"I think that it is better to tell the user which property is wrong.

@timanglade @alazier 

See https://app.asana.com/0/861870036984/12974972189649
",kneth,timanglade
473,2014-06-24 12:06:23,"@kneth @jpsim 
",emanuelez,jpsim
473,2014-06-24 12:06:23,"@kneth @jpsim 
",emanuelez,kneth
472,2014-06-24 12:05:15,"@kneth 
",mekjaer,kneth
471,2014-06-24 11:41:00,"@kneth @jpsim
",emanuelez,jpsim
471,2014-06-24 11:41:00,"@kneth @jpsim
",emanuelez,kneth
470,2014-06-24 10:23:33,"If a property has the type `RLMPropertyTypeObject` and the value is `nil`, the semantics is that to link to the other table should be created (""to be nullified"" is a term).

@timanglade @bmunkholm @alazier 

See https://app.asana.com/0/inbox/1442494018424/12578473022466/13308914536646 
",kneth,bmunkholm
470,2014-06-24 10:23:33,"If a property has the type `RLMPropertyTypeObject` and the value is `nil`, the semantics is that to link to the other table should be created (""to be nullified"" is a term).

@timanglade @bmunkholm @alazier 

See https://app.asana.com/0/inbox/1442494018424/12578473022466/13308914536646 
",kneth,alazier
470,2014-06-24 10:23:33,"If a property has the type `RLMPropertyTypeObject` and the value is `nil`, the semantics is that to link to the other table should be created (""to be nullified"" is a term).

@timanglade @bmunkholm @alazier 

See https://app.asana.com/0/inbox/1442494018424/12578473022466/13308914536646 
",kneth,timanglade
469,2014-06-24 09:52:33,"@bmunkholm @kneth 
",mekjaer,bmunkholm
469,2014-06-24 09:52:33,"@bmunkholm @kneth 
",mekjaer,kneth
464,2014-06-22 22:54:24,"Increasing coverage of RLMQueryUtil and defining a general framework for predicate tests, enabling subsequent covering tests of all possible operators, options and modifiers, if need be.

@bmunkholm @alazier 
",oleks,bmunkholm
464,2014-06-22 22:54:24,"Increasing coverage of RLMQueryUtil and defining a general framework for predicate tests, enabling subsequent covering tests of all possible operators, options and modifiers, if need be.

@bmunkholm @alazier 
",oleks,alazier
464,2014-06-26 11:49:32,"Will merge this soon. @bmunkholm @jpsim 
",mekjaer,bmunkholm
457,2014-06-20 12:29:55,"@bmunkholm @timanglade @kneth @bjchrist 
",mekjaer,bmunkholm
457,2014-06-20 12:29:55,"@bmunkholm @timanglade @kneth @bjchrist 
",mekjaer,bjchrist
457,2014-06-20 12:29:55,"@bmunkholm @timanglade @kneth @bjchrist 
",mekjaer,timanglade
457,2014-06-20 12:29:55,"@bmunkholm @timanglade @kneth @bjchrist 
",mekjaer,kneth
456,2014-06-20 11:35:34,"Added support for initWithObject on RLMObject parsing in an NSArray or NSDictionary.

@realm/obj-c 
",mekjaer,realm
455,2014-06-19 19:34:28,"- Xcode 6 project
- Doesn't modify anything in Xcode 5 or source files, only adds additional config
- Swift support (Swift requires frameworks built with Xcode 6 that define a module)
- Single test to make sure the structure works
- xcodeproj format matches Realm.xcodeproj as closely as possible
- Updated build.sh to support building/testing this new Xcode project

Ready for review @realm/obj-c!
",jpsim,realm
454,2014-06-19 21:17:19,"@emanuelez brings up that to keep compatibility with the other repos `test` should test in release mode and `test-debug` in debug mode. I'm ok with that, so I just made that change.
",jpsim,emanuelez
454,2014-06-20 17:21:41,"Care to review, @emanuelez and @kneth?
",jpsim,kneth
454,2014-06-20 17:21:41,"Care to review, @emanuelez and @kneth?
",jpsim,emanuelez
452,2014-06-19 16:16:32,"@jpsim @bmunkholm 
",oleks,jpsim
452,2014-06-19 16:16:32,"@jpsim @bmunkholm 
",oleks,bmunkholm
451,2014-06-19 13:35:32,"Should arbitrarily deep RLMObject subclasses be stored in Realm?

If not, what error should we throw?

Currently, the code fails unexpectedly if you try to initialise a
sub(-sub)+class of RLMObject.

PS. Indirect subclasses of RLMObject are also silently ignored, as far as I can
see from RLMSchema.mm:73.

@astigsen @alazier @bmunkholm 
",oleks,astigsen
451,2014-06-19 13:35:32,"Should arbitrarily deep RLMObject subclasses be stored in Realm?

If not, what error should we throw?

Currently, the code fails unexpectedly if you try to initialise a
sub(-sub)+class of RLMObject.

PS. Indirect subclasses of RLMObject are also silently ignored, as far as I can
see from RLMSchema.mm:73.

@astigsen @alazier @bmunkholm 
",oleks,alazier
451,2014-06-19 13:35:32,"Should arbitrarily deep RLMObject subclasses be stored in Realm?

If not, what error should we throw?

Currently, the code fails unexpectedly if you try to initialise a
sub(-sub)+class of RLMObject.

PS. Indirect subclasses of RLMObject are also silently ignored, as far as I can
see from RLMSchema.mm:73.

@astigsen @alazier @bmunkholm 
",oleks,bmunkholm
449,2014-06-19 10:35:11,"@bmunkholm @kneth 
",mekjaer,bmunkholm
449,2014-06-19 10:35:11,"@bmunkholm @kneth 
",mekjaer,kneth
448,2014-06-19 10:34:27,"@bmunkholm @kneth 
",mekjaer,bmunkholm
448,2014-06-19 10:34:27,"@bmunkholm @kneth 
",mekjaer,kneth
447,2014-06-19 08:48:01,"@bmunkholm 
",mekjaer,bmunkholm
446,2014-06-18 11:31:43,"I have continued the great work by @alazier. This pull request depends on https://github.com/Tightdb/tightdb/pull/452 (adding the missing support for bools in the core's query engine).

See also https://app.asana.com/0/1442494018425/12639359390187

@alazier @mekjaer @bmunkholm @timanglade 
",kneth,mekjaer
446,2014-06-18 11:31:43,"I have continued the great work by @alazier. This pull request depends on https://github.com/Tightdb/tightdb/pull/452 (adding the missing support for bools in the core's query engine).

See also https://app.asana.com/0/1442494018425/12639359390187

@alazier @mekjaer @bmunkholm @timanglade 
",kneth,alazier
446,2014-06-18 11:31:43,"I have continued the great work by @alazier. This pull request depends on https://github.com/Tightdb/tightdb/pull/452 (adding the missing support for bools in the core's query engine).

See also https://app.asana.com/0/1442494018425/12639359390187

@alazier @mekjaer @bmunkholm @timanglade 
",kneth,bmunkholm
446,2014-06-18 11:31:43,"I have continued the great work by @alazier. This pull request depends on https://github.com/Tightdb/tightdb/pull/452 (adding the missing support for bools in the core's query engine).

See also https://app.asana.com/0/1442494018425/12639359390187

@alazier @mekjaer @bmunkholm @timanglade 
",kneth,timanglade
446,2014-06-18 17:35:12,"Jenkins is failing as it cannot access the renamed repository. I'll ask @emanuelez to fix it when he arrives tomorrow.
",kneth,emanuelez
443,2014-06-18 23:59:34,"Merging since I got verbal :+1:s from @alazier and @astigsen.
",jpsim,astigsen
443,2014-06-18 23:59:34,"Merging since I got verbal :+1:s from @alazier and @astigsen.
",jpsim,alazier
443,2014-06-19 15:05:11,"I should have run `sh build.sh verify`, sorry.

I don't know why CI hardcodes its shell scripts rather than using build.sh though? @emanuelez what's the motivation behind that?
",jpsim,emanuelez
442,2014-06-17 13:30:03,"Some of these may be undocumented features - I guess they are. I've changed some of the comments. The top two tests (attempting to add nil or RLMObject) fail in an unexpected way.

Regardless, this is also a suggestion for a new layout of our test cases. This keeps the RLMObjects close to where they are used, and keeps unit tests unit-like. The #pragma's allow for some further separation of concerns (giving a nice interface in Xcode).

@alazier @pauldardeau @kneth 
",oleks,alazier
442,2014-06-17 13:30:03,"Some of these may be undocumented features - I guess they are. I've changed some of the comments. The top two tests (attempting to add nil or RLMObject) fail in an unexpected way.

Regardless, this is also a suggestion for a new layout of our test cases. This keeps the RLMObjects close to where they are used, and keeps unit tests unit-like. The #pragma's allow for some further separation of concerns (giving a nice interface in Xcode).

@alazier @pauldardeau @kneth 
",oleks,pauldardeau
442,2014-06-17 13:30:03,"Some of these may be undocumented features - I guess they are. I've changed some of the comments. The top two tests (attempting to add nil or RLMObject) fail in an unexpected way.

Regardless, this is also a suggestion for a new layout of our test cases. This keeps the RLMObjects close to where they are used, and keeps unit tests unit-like. The #pragma's allow for some further separation of concerns (giving a nice interface in Xcode).

@alazier @pauldardeau @kneth 
",oleks,kneth
441,2014-06-26 11:04:09,"@bmunkholm 
@mekjaer 
@alazier 

Shouldn't we just get this merged in and create an asana ticket for integration with migration for implementation of verification completeness?
",zuschlag,mekjaer
441,2014-06-27 08:39:00,"@JP : For typos, feel free to fix yourself (edit directly on github) - it's much easier actually :-)
",bmunkholm,JP
433,2014-06-16 19:20:39,"This switches over to using the auto-updating core accessors.

@astigsen @finnschiermer @bmunkholm 
",alazier,astigsen
433,2014-06-16 19:20:39,"This switches over to using the auto-updating core accessors.

@astigsen @finnschiermer @bmunkholm 
",alazier,bmunkholm
433,2014-06-16 19:20:39,"This switches over to using the auto-updating core accessors.

@astigsen @finnschiermer @bmunkholm 
",alazier,finnschiermer
433,2014-06-17 15:17:02,"@mekjaer - how do i benchmark this change against the old version? I want to see how this change effects performance.
",alazier,mekjaer
433,2014-06-17 15:21:32,"We got the simple benchmark app in the example folder.
You might want to ensure there is a relevant test that expose the changes.

On Tue, Jun 17, 2014 at 5:17 PM, Ari Lazier notifications@github.com
wrote:

> @mekjaer https://github.com/mekjaer - how do i benchmark this change
> against the old version? I want to see how this change effects performance.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-objc/pull/433#issuecomment-46321166.
",bmunkholm,mekjaer
431,2014-06-16 14:01:48,"Only test added.
I guess these 2 objects should be equal, right?
@bmunkholm @astigsen @alazier 
",mekjaer,astigsen
431,2014-06-16 14:01:48,"Only test added.
I guess these 2 objects should be equal, right?
@bmunkholm @astigsen @alazier 
",mekjaer,bmunkholm
431,2014-06-16 14:01:48,"Only test added.
I guess these 2 objects should be equal, right?
@bmunkholm @astigsen @alazier 
",mekjaer,alazier
430,2014-06-16 13:38:59,"Check out the proposed header before all files are updated
@bmunkholm @timanglade @astigsen @bjchrist @kneth
",mekjaer,astigsen
430,2014-06-16 13:38:59,"Check out the proposed header before all files are updated
@bmunkholm @timanglade @astigsen @bjchrist @kneth
",mekjaer,bmunkholm
430,2014-06-16 13:38:59,"Check out the proposed header before all files are updated
@bmunkholm @timanglade @astigsen @bjchrist @kneth
",mekjaer,bjchrist
430,2014-06-16 13:38:59,"Check out the proposed header before all files are updated
@bmunkholm @timanglade @astigsen @bjchrist @kneth
",mekjaer,timanglade
430,2014-06-16 13:38:59,"Check out the proposed header before all files are updated
@bmunkholm @timanglade @astigsen @bjchrist @kneth
",mekjaer,kneth
430,2014-06-16 21:07:51,"Ready for review/merge. @timanglade 
",bmunkholm,timanglade
429,2014-06-16 13:12:27,"@bmunkholm @alazier @astigsen 
",mekjaer,astigsen
429,2014-06-16 13:12:27,"@bmunkholm @alazier @astigsen 
",mekjaer,bmunkholm
429,2014-06-16 13:12:27,"@bmunkholm @alazier @astigsen 
",mekjaer,alazier
428,2014-06-16 11:16:33,"I have started cleaning up our scripts.

To consider: moving `scripts/*.sh` to `build.sh` and get Xcode to call `build.sh` instead.

To do:
- setting default values for `BUILD_DIR` etc. so scripts can run independent of Xcode

@bmunkholm @emanuelez @jpsim @timanglade @alazier @mekjaer 
",kneth,bmunkholm
428,2014-06-16 11:16:33,"I have started cleaning up our scripts.

To consider: moving `scripts/*.sh` to `build.sh` and get Xcode to call `build.sh` instead.

To do:
- setting default values for `BUILD_DIR` etc. so scripts can run independent of Xcode

@bmunkholm @emanuelez @jpsim @timanglade @alazier @mekjaer 
",kneth,mekjaer
428,2014-06-16 11:16:33,"I have started cleaning up our scripts.

To consider: moving `scripts/*.sh` to `build.sh` and get Xcode to call `build.sh` instead.

To do:
- setting default values for `BUILD_DIR` etc. so scripts can run independent of Xcode

@bmunkholm @emanuelez @jpsim @timanglade @alazier @mekjaer 
",kneth,alazier
428,2014-06-16 11:16:33,"I have started cleaning up our scripts.

To consider: moving `scripts/*.sh` to `build.sh` and get Xcode to call `build.sh` instead.

To do:
- setting default values for `BUILD_DIR` etc. so scripts can run independent of Xcode

@bmunkholm @emanuelez @jpsim @timanglade @alazier @mekjaer 
",kneth,emanuelez
428,2014-06-16 11:16:33,"I have started cleaning up our scripts.

To consider: moving `scripts/*.sh` to `build.sh` and get Xcode to call `build.sh` instead.

To do:
- setting default values for `BUILD_DIR` etc. so scripts can run independent of Xcode

@bmunkholm @emanuelez @jpsim @timanglade @alazier @mekjaer 
",kneth,timanglade
428,2014-06-16 11:16:33,"I have started cleaning up our scripts.

To consider: moving `scripts/*.sh` to `build.sh` and get Xcode to call `build.sh` instead.

To do:
- setting default values for `BUILD_DIR` etc. so scripts can run independent of Xcode

@bmunkholm @emanuelez @jpsim @timanglade @alazier @mekjaer 
",kneth,jpsim
427,2014-06-16 09:12:47,"@timanglade @jpsim 
",emanuelez,jpsim
427,2014-06-16 09:12:47,"@timanglade @jpsim 
",emanuelez,timanglade
426,2014-06-16 09:05:46,"@bmunkholm @kneth 
",mekjaer,bmunkholm
426,2014-06-16 09:05:46,"@bmunkholm @kneth 
",mekjaer,kneth
425,2014-06-16 07:29:41,"@bmunkholm @emanuelez 

See https://app.asana.com/0/inbox/1442494018424/13114405086094/13114405086100
",kneth,bmunkholm
425,2014-06-16 07:29:41,"@bmunkholm @emanuelez 

See https://app.asana.com/0/inbox/1442494018424/13114405086094/13114405086100
",kneth,emanuelez
424,2014-06-12 13:58:49,"@bmunkholm @alazier @jpsim 
",mekjaer,bmunkholm
424,2014-06-12 13:58:49,"@bmunkholm @alazier @jpsim 
",mekjaer,alazier
424,2014-06-12 13:58:49,"@bmunkholm @alazier @jpsim 
",mekjaer,jpsim
423,2014-06-12 13:22:42,"@alazier @jpsim @bmunkholm 
",mekjaer,alazier
423,2014-06-12 13:22:42,"@alazier @jpsim @bmunkholm 
",mekjaer,bmunkholm
423,2014-06-12 13:22:42,"@alazier @jpsim @bmunkholm 
",mekjaer,jpsim
423,2014-06-16 11:08:22,"Merging very soon @bmunkholm 
",mekjaer,bmunkholm
421,2014-06-12 10:35:25,"@kneth
",emanuelez,kneth
420,2014-06-12 04:11:36,"Good start. A few comments/observations:
- Would be nice when we have dependent prs to use the dependent branch as the base branch - not an issue here, but for big dependencies doing this will actually make it possible to review
- Now that we are starting to duplicate tests in multiple languages, we should start being a bit more diligent about how and what we are tests. To me this means actually coming up with test plans/matrixes to both make sure we are covering all our features, and not writing duplicate unnecessary tests. I know this is outside the scope of this pr but it's something we should figure out with @timanglade 
",alazier,timanglade
417,2014-06-11 22:53:31,"I think that's a reasonable approach. I'd like to get at least another person to chime in on this before we agree to have 2 branches that must be kept in sync on a continuous basis. If we were to do that, I think I'd replace Realm.xcodeproj with the xcode 6 version in that branch. We'd also have to make sure CI can handle it.

Thoughts @astigsen @bmunkholm @timanglade @emanuelez?
",jpsim,astigsen
417,2014-06-11 22:53:31,"I think that's a reasonable approach. I'd like to get at least another person to chime in on this before we agree to have 2 branches that must be kept in sync on a continuous basis. If we were to do that, I think I'd replace Realm.xcodeproj with the xcode 6 version in that branch. We'd also have to make sure CI can handle it.

Thoughts @astigsen @bmunkholm @timanglade @emanuelez?
",jpsim,bmunkholm
417,2014-06-11 22:53:31,"I think that's a reasonable approach. I'd like to get at least another person to chime in on this before we agree to have 2 branches that must be kept in sync on a continuous basis. If we were to do that, I think I'd replace Realm.xcodeproj with the xcode 6 version in that branch. We'd also have to make sure CI can handle it.

Thoughts @astigsen @bmunkholm @timanglade @emanuelez?
",jpsim,timanglade
417,2014-06-11 22:53:31,"I think that's a reasonable approach. I'd like to get at least another person to chime in on this before we agree to have 2 branches that must be kept in sync on a continuous basis. If we were to do that, I think I'd replace Realm.xcodeproj with the xcode 6 version in that branch. We'd also have to make sure CI can handle it.

Thoughts @astigsen @bmunkholm @timanglade @emanuelez?
",jpsim,emanuelez
416,2014-06-11 22:16:32,"- allows building with xctool, xcpretty or xcodebuild directly. xcpretty is the default because unlike xtool, it just parses xcodebuild which means that when xcodebuild gets updated (Xcode6!!), xcpretty just works whereas xctool breaks down. So you get the parsable output of xctool with the robustness of xcodebuild.
- builds/tests iOS/OSX in Release and Debug configurations (will be trivial to add support for Xcode5 and Xcode6 flavors, once that's merged)
- moved `download_core` to build.sh since it's such a small script and doesn't affect the readability of build.sh
- now more readable

I'm sure this is missing a few things we used to have in the previous version. @emanuelez what's missing that's critical to have in this?
",jpsim,emanuelez
416,2014-06-12 03:53:46,"We also need a command to build all the examples/docs, and it would be good to have a 'verify' options which builds and tests everything which people should run before checking in.

Also @kneth might be interested in this.
",alazier,kneth
416,2014-06-12 07:27:41,"Also our `sh` gurus should look at this: @kneth & @kspangsege 
And @bmunkholm because he might not like the breaking of conventions with the other repos. :wink: 
",emanuelez,bmunkholm
416,2014-06-12 07:27:41,"Also our `sh` gurus should look at this: @kneth & @kspangsege 
And @bmunkholm because he might not like the breaking of conventions with the other repos. :wink: 
",emanuelez,kspangsege
416,2014-06-12 07:27:41,"Also our `sh` gurus should look at this: @kneth & @kspangsege 
And @bmunkholm because he might not like the breaking of conventions with the other repos. :wink: 
",emanuelez,kneth
410,2014-06-11 12:37:47,"@bmunkholm @kneth 
",mekjaer,bmunkholm
410,2014-06-11 12:37:47,"@bmunkholm @kneth 
",mekjaer,kneth
409,2014-06-11 12:12:40,"@bmunkholm 
",emanuelez,bmunkholm
405,2014-06-11 10:21:30,"@bmunkholm @emanuelez 
",mekjaer,bmunkholm
405,2014-06-11 10:21:30,"@bmunkholm @emanuelez 
",mekjaer,emanuelez
404,2014-06-11 09:21:07,"Added test to verify that RLMPropertyType and tightdb::type line up

https://app.asana.com/0/861870036984/12734115508125

Added header search path to OSX Tests and iOS Tests targets

@bmunkholm @kneth @alazier 
",mekjaer,bmunkholm
404,2014-06-11 09:21:07,"Added test to verify that RLMPropertyType and tightdb::type line up

https://app.asana.com/0/861870036984/12734115508125

Added header search path to OSX Tests and iOS Tests targets

@bmunkholm @kneth @alazier 
",mekjaer,alazier
404,2014-06-11 09:21:07,"Added test to verify that RLMPropertyType and tightdb::type line up

https://app.asana.com/0/861870036984/12734115508125

Added header search path to OSX Tests and iOS Tests targets

@bmunkholm @kneth @alazier 
",mekjaer,kneth
403,2014-06-11 02:07:46,"@astigsen 
",alazier,astigsen
403,2014-06-11 05:27:32,"Can you make a testcase to verify the code?
Is all this still needed with the newest core? /cc @kspangsege 
",bmunkholm,kspangsege
401,2014-06-16 20:31:02,"This is as far as I can take this PR. I haven't been able to get this to work without placing it inside Realm itself. @bmunkholm and @alazier, you seem to have ideas on how to make this work, could you amend this PR with your approach?
",jpsim,bmunkholm
399,2014-06-10 19:42:33,"Since we check for `! [ -d core ]`, we'd never enter this `if` block if the directory exists, so there's no use in keeping this line. /cc @kneth
",jpsim,kneth
398,2014-06-10 18:13:15,"Also re-commented out RLMPropertyAttributeDeleteNever like before to remove it from docs.

Merging now since @bmunkholm already gave +1 on this from #393.
",jpsim,bmunkholm
395,2014-06-10 16:55:48,"Hold on this script will still fail if the user has an old version of core in `/core`. Shouldn’t we auto-update if the user has 0.20 but he needs 0.21? Right now this scenario fails in very non-obvious ways (missing headers, etc.) /cc @kneth @alazier @bmunkholm 
",timanglade,bmunkholm
392,2014-06-09 23:07:02,"resolved many issues, removed many unused settings.

There was a lot of duplication in the schemes and targets.

Also, we were using the OSX versions of certain things for iOS (Foundation) and the iOS versions of other things for OSX (libstdc++.6.dylib), so we were effectively testing the wrong things. This PR addresses all those issues.

I'd appreciate a speedy review on this, since the build system affects everything /cc @timanglade @astigsen @emanuelez. Thanks!
",jpsim,astigsen
392,2014-06-09 23:07:02,"resolved many issues, removed many unused settings.

There was a lot of duplication in the schemes and targets.

Also, we were using the OSX versions of certain things for iOS (Foundation) and the iOS versions of other things for OSX (libstdc++.6.dylib), so we were effectively testing the wrong things. This PR addresses all those issues.

I'd appreciate a speedy review on this, since the build system affects everything /cc @timanglade @astigsen @emanuelez. Thanks!
",jpsim,timanglade
392,2014-06-09 23:07:02,"resolved many issues, removed many unused settings.

There was a lot of duplication in the schemes and targets.

Also, we were using the OSX versions of certain things for iOS (Foundation) and the iOS versions of other things for OSX (libstdc++.6.dylib), so we were effectively testing the wrong things. This PR addresses all those issues.

I'd appreciate a speedy review on this, since the build system affects everything /cc @timanglade @astigsen @emanuelez. Thanks!
",jpsim,emanuelez
392,2014-06-10 06:16:23,"I think @kneth and @bmunkholm should take a close look at this too
",emanuelez,bmunkholm
392,2014-06-10 06:16:23,"I think @kneth and @bmunkholm should take a close look at this too
",emanuelez,kneth
390,2014-06-09 22:36:05,"@realm/obj-c sorry for breaking the build with this one. CI was down and I didn’t realize a few of those enums were being used somewhere else. Dumb of me either way. @jpsim has a fix in progress.
",timanglade,realm
389,2014-06-06 23:04:22,"Small fixes from the last two prs that didn't make it into the release. Also added downloading core back in, but at the moment the version of core being downloaded is out of date - we need to put version 0.21.0 up on the site.

@bmunkholm @jpsim @kneth 
",alazier,bmunkholm
389,2014-06-06 23:04:22,"Small fixes from the last two prs that didn't make it into the release. Also added downloading core back in, but at the moment the version of core being downloaded is out of date - we need to put version 0.21.0 up on the site.

@bmunkholm @jpsim @kneth 
",alazier,kneth
389,2014-06-06 23:04:22,"Small fixes from the last two prs that didn't make it into the release. Also added downloading core back in, but at the moment the version of core being downloaded is out of date - we need to put version 0.21.0 up on the site.

@bmunkholm @jpsim @kneth 
",alazier,jpsim
389,2014-06-09 20:32:39,"This fails on my machine, probably because there are no zip files for 0.21.0 on static.realm.io. @jpsim, can you upload one?
",timanglade,jpsim
388,2014-06-06 20:01:24,"This fixes the premature release of objects created during fast enumeration.

@astigsen @emanuelez 
",alazier,astigsen
388,2014-06-06 20:01:24,"This fixes the premature release of objects created during fast enumeration.

@astigsen @emanuelez 
",alazier,emanuelez
386,2014-06-06 13:05:30,"@alazier @jpsim @timanglade @bmunkholm 
Merging immediately to test on CI
",emanuelez,alazier
386,2014-06-06 13:05:30,"@alazier @jpsim @timanglade @bmunkholm 
Merging immediately to test on CI
",emanuelez,bmunkholm
386,2014-06-06 13:05:30,"@alazier @jpsim @timanglade @bmunkholm 
Merging immediately to test on CI
",emanuelez,timanglade
386,2014-06-06 13:05:30,"@alazier @jpsim @timanglade @bmunkholm 
Merging immediately to test on CI
",emanuelez,jpsim
385,2014-06-05 18:45:08,"@astigsen @mekjaer @zuschlag @jpsim
",alazier,astigsen
385,2014-06-05 18:45:08,"@astigsen @mekjaer @zuschlag @jpsim
",alazier,mekjaer
385,2014-06-05 18:45:08,"@astigsen @mekjaer @zuschlag @jpsim
",alazier,zuschlag
385,2014-06-05 18:45:08,"@astigsen @mekjaer @zuschlag @jpsim
",alazier,jpsim
384,2014-06-05 14:33:02,"This PR depends on https://github.com/Tightdb/tightdb/pull/443 which changes the C++ library to `libc++`.

See also https://app.asana.com/0/1442494018425/12575628655564

@bmunkholm @alazier @emanuelez 
",kneth,bmunkholm
384,2014-06-05 14:33:02,"This PR depends on https://github.com/Tightdb/tightdb/pull/443 which changes the C++ library to `libc++`.

See also https://app.asana.com/0/1442494018425/12575628655564

@bmunkholm @alazier @emanuelez 
",kneth,alazier
384,2014-06-05 14:33:02,"This PR depends on https://github.com/Tightdb/tightdb/pull/443 which changes the C++ library to `libc++`.

See also https://app.asana.com/0/1442494018425/12575628655564

@bmunkholm @alazier @emanuelez 
",kneth,emanuelez
382,2014-06-04 23:08:14,"@jpsim @astigsen here is the new notification mechanism we discussed.
",alazier,astigsen
382,2014-06-04 23:08:14,"@jpsim @astigsen here is the new notification mechanism we discussed.
",alazier,jpsim
381,2014-06-04 18:46:23,"The script to download core has been moved outside Xcode. Should not be merged before https://github.com/Tightdb/tightdb/pull/440.

See also https://app.asana.com/0/1442494018425/12833069297755

@timanglade @emanuelez @bmunkholm 
",kneth,bmunkholm
381,2014-06-04 18:46:23,"The script to download core has been moved outside Xcode. Should not be merged before https://github.com/Tightdb/tightdb/pull/440.

See also https://app.asana.com/0/1442494018425/12833069297755

@timanglade @emanuelez @bmunkholm 
",kneth,timanglade
381,2014-06-04 18:46:23,"The script to download core has been moved outside Xcode. Should not be merged before https://github.com/Tightdb/tightdb/pull/440.

See also https://app.asana.com/0/1442494018425/12833069297755

@timanglade @emanuelez @bmunkholm 
",kneth,emanuelez
381,2014-06-04 19:01:19,"About the shellPath: I agree with you. @alazier can you explain why it is done like that?
",kneth,alazier
380,2014-06-04 18:31:38,"also featuring a simpler build.sh!

There are a few outstanding issues with this:
- Problem building docs, shouldn't be too difficult to fix
- Problem running iOS tests from the command line
- A few things missing in build.sh (get/set version, cut a release)

@alazier @timanglade and I just spoke and decided against moving to Xcode 6 until it's officially launched, but I'm still pushing it up for when we need it later.
",jpsim,alazier
380,2014-06-04 18:31:38,"also featuring a simpler build.sh!

There are a few outstanding issues with this:
- Problem building docs, shouldn't be too difficult to fix
- Problem running iOS tests from the command line
- A few things missing in build.sh (get/set version, cut a release)

@alazier @timanglade and I just spoke and decided against moving to Xcode 6 until it's officially launched, but I'm still pushing it up for when we need it later.
",jpsim,timanglade
379,2014-06-04 18:23:42,"I have removed files related to the old build system. The question is: how we remove `build.sh` as well - or just let it call `xcodebuild`?

See also https://app.asana.com/0/1442494018425/12839644131101

@bmunkholm @emanuelez 
",kneth,bmunkholm
379,2014-06-04 18:23:42,"I have removed files related to the old build system. The question is: how we remove `build.sh` as well - or just let it call `xcodebuild`?

See also https://app.asana.com/0/1442494018425/12839644131101

@bmunkholm @emanuelez 
",kneth,emanuelez
379,2014-06-04 18:43:52,"@jpsim Yes, we're not using the Makefiles anymore. I only added them so @zuschlag could work on his OS X apps.

And you're right; we could rewrite `build.sh` to call `xcodebuild` or create a few smaller script to do what `xcodebuild` cannot do.
",kneth,zuschlag
378,2014-06-10 12:44:31,"@bmunkholm @kneth 
Output of the json should be tested in core
",mekjaer,bmunkholm
378,2014-06-10 12:44:31,"@bmunkholm @kneth 
Output of the json should be tested in core
",mekjaer,kneth
377,2014-06-04 05:52:11,"I don't think scripts/download-ios-core.sh is used anywhere but maybe @kneth would know for sure?

On Tuesday, June 3, 2014, Emanuele Zattin notifications@github.com wrote:

> Is scripts/download-ios-core.sh used anywhere in xcode? Also, it should
> simply be called download-core.sh since there are both iOS and OSX binaries
> in there
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-objc/pull/377#issuecomment-45053114.
",timanglade,kneth
377,2014-06-04 06:47:44,"Removing the WIP label from this. As far as I can tell you now build for OSX, iOS, for test, build or release, even on a fresh machine without a tightdb (core) repo anywhere on it. All build.sh commands that existed were updated

This branch depends on 2 minor changes in Jenkins:
- update scheme in CI job (looking for “Realm” right now, should be updated to “OSX”) — blocking CI from passing right now
- update jenkins script to build core with build-objc and upload output as a zip at static.realm.io/downloads/core/realm-core-VERSION.zip (JP uploaded an 0.20.0 version for now)

@kneth @emanuelez @bmunkholm please review and merge at your discretion. This is fairly big so you may want to do that before the day goes too far… ;)
",timanglade,bmunkholm
377,2014-06-04 06:47:44,"Removing the WIP label from this. As far as I can tell you now build for OSX, iOS, for test, build or release, even on a fresh machine without a tightdb (core) repo anywhere on it. All build.sh commands that existed were updated

This branch depends on 2 minor changes in Jenkins:
- update scheme in CI job (looking for “Realm” right now, should be updated to “OSX”) — blocking CI from passing right now
- update jenkins script to build core with build-objc and upload output as a zip at static.realm.io/downloads/core/realm-core-VERSION.zip (JP uploaded an 0.20.0 version for now)

@kneth @emanuelez @bmunkholm please review and merge at your discretion. This is fairly big so you may want to do that before the day goes too far… ;)
",timanglade,kneth
375,2014-06-03 21:29:47,"Still fails on the same condition as before: missing `tightdb/table.hpp`, even when the binary libRealm.a has been downloaded from our servers.

But the scripts are now tucked away, and I’ve renamed/reorganized our Schemes & Targets for readability as well, based of @kneth’s excellent work!
Please take a look @alazier @jpsim @bmunkholm
",timanglade,alazier
375,2014-06-03 21:29:47,"Still fails on the same condition as before: missing `tightdb/table.hpp`, even when the binary libRealm.a has been downloaded from our servers.

But the scripts are now tucked away, and I’ve renamed/reorganized our Schemes & Targets for readability as well, based of @kneth’s excellent work!
Please take a look @alazier @jpsim @bmunkholm
",timanglade,bmunkholm
375,2014-06-03 21:29:47,"Still fails on the same condition as before: missing `tightdb/table.hpp`, even when the binary libRealm.a has been downloaded from our servers.

But the scripts are now tucked away, and I’ve renamed/reorganized our Schemes & Targets for readability as well, based of @kneth’s excellent work!
Please take a look @alazier @jpsim @bmunkholm
",timanglade,kneth
375,2014-06-03 21:29:47,"Still fails on the same condition as before: missing `tightdb/table.hpp`, even when the binary libRealm.a has been downloaded from our servers.

But the scripts are now tucked away, and I’ve renamed/reorganized our Schemes & Targets for readability as well, based of @kneth’s excellent work!
Please take a look @alazier @jpsim @bmunkholm
",timanglade,jpsim
375,2014-06-03 22:56:46,"NB: trying to complete+merge #363 first so we don’t mess up the good work @emanuelez has been doing
",timanglade,emanuelez
373,2014-06-03 16:51:06,"This uses the static library when building our osx framework so that our ci scripts can run properly.

Note: you need to delete previous dynamic libraries from the realm-core directory as if they are present xcode gets confused and tries to use them. The build-objc target in core should be updated so that the dylibs are no longer copied.

@emanuelez @kneth @jpsim 
",alazier,jpsim
373,2014-06-03 16:51:06,"This uses the static library when building our osx framework so that our ci scripts can run properly.

Note: you need to delete previous dynamic libraries from the realm-core directory as if they are present xcode gets confused and tries to use them. The build-objc target in core should be updated so that the dylibs are no longer copied.

@emanuelez @kneth @jpsim 
",alazier,kneth
373,2014-06-03 16:51:06,"This uses the static library when building our osx framework so that our ci scripts can run properly.

Note: you need to delete previous dynamic libraries from the realm-core directory as if they are present xcode gets confused and tries to use them. The build-objc target in core should be updated so that the dylibs are no longer copied.

@emanuelez @kneth @jpsim 
",alazier,emanuelez
371,2014-06-03 13:58:49,"@kneth 
",mekjaer,kneth
369,2014-06-03 12:30:37,"@bmunkholm 
",mekjaer,bmunkholm
367,2014-06-03 00:42:14,"This changes the semantics of our notification registration. We now only hold weak references to notifications, so users must hold onto a reference for notifications to stay valid. The upside of this is that to unregister a notification, you just have to nullify your reference.

We also now allow you to pass an optional context to a notification, which eliminates the need to cast to weak variables when accessing controller properties/variables.

@jpsim @timanglade @realm/obj-c 
",alazier,jpsim
367,2014-06-03 00:42:14,"This changes the semantics of our notification registration. We now only hold weak references to notifications, so users must hold onto a reference for notifications to stay valid. The upside of this is that to unregister a notification, you just have to nullify your reference.

We also now allow you to pass an optional context to a notification, which eliminates the need to cast to weak variables when accessing controller properties/variables.

@jpsim @timanglade @realm/obj-c 
",alazier,realm
367,2014-06-03 00:42:14,"This changes the semantics of our notification registration. We now only hold weak references to notifications, so users must hold onto a reference for notifications to stay valid. The upside of this is that to unregister a notification, you just have to nullify your reference.

We also now allow you to pass an optional context to a notification, which eliminates the need to cast to weak variables when accessing controller properties/variables.

@jpsim @timanglade @realm/obj-c 
",alazier,timanglade
367,2014-06-03 00:44:42,"@astigsen - any thoughts? You had strong feelings about not having to unregister notifications - this change still maintains this principle.
",alazier,astigsen
367,2014-06-03 01:35:41,"> @astigsen - any thoughts? You had strong feelings about not having to unregister notifications - this change still maintains this principle.

I think this is much better. But when registering blocks, it will probably be easy for users to forget to keep a strong reference to it themselves, and then be really surprised when they don't get any notifications. Is there any way we can prevent this from happening, or at least warn them?
",astigsen,astigsen
365,2014-06-02 19:51:45,"This PR moves the generation of documentation from `build.sh` to Xcode.

@emanuelez @jpsim @alazier @timanglade @bmunkholm 
",kneth,bmunkholm
365,2014-06-02 19:51:45,"This PR moves the generation of documentation from `build.sh` to Xcode.

@emanuelez @jpsim @alazier @timanglade @bmunkholm 
",kneth,jpsim
365,2014-06-02 19:51:45,"This PR moves the generation of documentation from `build.sh` to Xcode.

@emanuelez @jpsim @alazier @timanglade @bmunkholm 
",kneth,alazier
365,2014-06-02 19:51:45,"This PR moves the generation of documentation from `build.sh` to Xcode.

@emanuelez @jpsim @alazier @timanglade @bmunkholm 
",kneth,timanglade
365,2014-06-02 19:51:45,"This PR moves the generation of documentation from `build.sh` to Xcode.

@emanuelez @jpsim @alazier @timanglade @bmunkholm 
",kneth,emanuelez
364,2014-06-02 14:53:26,"@emanuelez @jpsim 
",kneth,jpsim
364,2014-06-02 14:53:26,"@emanuelez @jpsim 
",kneth,emanuelez
363,2014-06-02 14:38:34,"@kneth @jpsim 
",emanuelez,jpsim
363,2014-06-02 14:38:34,"@kneth @jpsim 
",emanuelez,kneth
362,2014-06-02 13:48:27,"@kneth @jpsim @bmunkholm 
",mekjaer,jpsim
362,2014-06-02 13:48:27,"@kneth @jpsim @bmunkholm 
",mekjaer,bmunkholm
362,2014-06-02 13:48:27,"@kneth @jpsim @bmunkholm 
",mekjaer,kneth
361,2014-06-01 20:56:05,"Very very strong! I like this.

Nitpicked here & there, with only two major notes and one question (see comments)

@astigsen Do you mind taking a quick look as well since @amuramoto is interviewing?
@alazier You had strong thoughts on docs, so please take a quick look at the language & formatting and tell us if you agree. (Low priority.)
",timanglade,astigsen
361,2014-06-01 20:56:05,"Very very strong! I like this.

Nitpicked here & there, with only two major notes and one question (see comments)

@astigsen Do you mind taking a quick look as well since @amuramoto is interviewing?
@alazier You had strong thoughts on docs, so please take a quick look at the language & formatting and tell us if you agree. (Low priority.)
",timanglade,alazier
360,2014-05-31 21:21:02,"Added sha1 key/value to realm.xml docset feed. @timanglade
",jpsim,timanglade
358,2014-06-02 22:07:28,"ready for review @alazier.
",jpsim,alazier
358,2014-06-02 23:49:31,"I made the changes you recommended, @alazier.
",jpsim,alazier
358,2014-06-03 00:00:02,":+1:

On Mon, Jun 2, 2014 at 4:49 PM, JP Simard notifications@github.com wrote:

> I made the changes you recommended, @alazier https://github.com/alazier.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/realm/realm-objc/pull/358#issuecomment-44904985.
",alazier,alazier
356,2014-05-30 00:17:12,"Lots of changes in here, including removing interfaces, moving code around, and adding some simple samples back. Please read through very carefully!  /cc @alazier @jpsim @bmunkholm 
",timanglade,alazier
356,2014-05-30 00:17:12,"Lots of changes in here, including removing interfaces, moving code around, and adding some simple samples back. Please read through very carefully!  /cc @alazier @jpsim @bmunkholm 
",timanglade,bmunkholm
356,2014-05-30 00:17:12,"Lots of changes in here, including removing interfaces, moving code around, and adding some simple samples back. Please read through very carefully!  /cc @alazier @jpsim @bmunkholm 
",timanglade,jpsim
356,2014-06-03 00:57:03,"Tests pass on my machine. Can I get one quick last look before I merge @alazier @jpsim @astigsen  ?
",timanglade,astigsen
354,2014-05-30 22:24:07,"ok @alazier, I removed RLMClassNameFromAccessorClassName
",jpsim,alazier
353,2014-05-29 22:06:25,"This fixes a bug when the schema contains properties of typed RLMArray objects.

I also added a FIXME that needs to be evaluated. It seems non-typed RLMArray properties will get an exception because they don't inherit from RLMObject.

Please review @alazier @jpsim 
",fyell,alazier
353,2014-05-29 22:06:25,"This fixes a bug when the schema contains properties of typed RLMArray objects.

I also added a FIXME that needs to be evaluated. It seems non-typed RLMArray properties will get an exception because they don't inherit from RLMObject.

Please review @alazier @jpsim 
",fyell,jpsim
350,2014-06-02 21:58:51,"Any objections to merging this @realm/obj-c?
",jpsim,realm
349,2014-05-29 06:35:41,"The currently status is that you can generate a `Realm.framework` using the Xcode target Framework-iOS.

Missing:
- Finish the download binary core target
- A target for generating documentation

At the moment, you have to run `sh build.sh build-iphone` in core (using my `kg-copy-ios-files-to-binding` branch).

@timanglade @mekjaer @jpsim @bmunkholm 
",kneth,mekjaer
349,2014-05-29 06:35:41,"The currently status is that you can generate a `Realm.framework` using the Xcode target Framework-iOS.

Missing:
- Finish the download binary core target
- A target for generating documentation

At the moment, you have to run `sh build.sh build-iphone` in core (using my `kg-copy-ios-files-to-binding` branch).

@timanglade @mekjaer @jpsim @bmunkholm 
",kneth,jpsim
349,2014-05-29 06:35:41,"The currently status is that you can generate a `Realm.framework` using the Xcode target Framework-iOS.

Missing:
- Finish the download binary core target
- A target for generating documentation

At the moment, you have to run `sh build.sh build-iphone` in core (using my `kg-copy-ios-files-to-binding` branch).

@timanglade @mekjaer @jpsim @bmunkholm 
",kneth,bmunkholm
349,2014-05-29 06:35:41,"The currently status is that you can generate a `Realm.framework` using the Xcode target Framework-iOS.

Missing:
- Finish the download binary core target
- A target for generating documentation

At the moment, you have to run `sh build.sh build-iphone` in core (using my `kg-copy-ios-files-to-binding` branch).

@timanglade @mekjaer @jpsim @bmunkholm 
",kneth,timanglade
348,2014-06-02 16:34:52,"@emanuelez @bmunkholm please review & confirm it fixes https://app.asana.com/0/861870036984/12767958795402/f
",timanglade,bmunkholm
348,2014-06-02 16:34:52,"@emanuelez @bmunkholm please review & confirm it fixes https://app.asana.com/0/861870036984/12767958795402/f
",timanglade,emanuelez
348,2014-06-02 16:35:29,"This is ready to be reviewed and merged @realm/obj-c. Let's keep the discussion open (elsewhere) about tweaking the RLMRealm ownership model and notifications.
",jpsim,realm
347,2014-05-28 21:08:00,"Ready for review @alazier @kneth @jpsim 
",fyell,alazier
347,2014-05-28 21:08:00,"Ready for review @alazier @kneth @jpsim 
",fyell,kneth
347,2014-05-28 21:08:00,"Ready for review @alazier @kneth @jpsim 
",fyell,jpsim
346,2014-05-28 18:55:31,"@astigsen @jpsim @bmunkholm 
",alazier,astigsen
346,2014-05-28 18:55:31,"@astigsen @jpsim @bmunkholm 
",alazier,jpsim
346,2014-05-28 18:55:31,"@astigsen @jpsim @bmunkholm 
",alazier,bmunkholm
346,2014-05-29 17:33:38,"I've added proper validation after merging @fguhit 's last commit and fixed a bunch of bugs and added more thorough testing. This is ready to be reviewed if anyone wants to take a crack at it.
",alazier,fguhit
345,2014-05-28 18:31:56,"Up for debate: summary, description and source. Summary and description are taken directly from realm.io. @timanglade.
",jpsim,timanglade
345,2014-05-28 19:42:53,"@timanglade, for this to lint, we'll need `http://realm.io/docs/ios/0.20.0/` to be accessible and not password-protected.
",jpsim,timanglade
343,2014-05-28 16:32:30,"Should be ready to review @realm/obj-c.
",jpsim,realm
343,2014-05-29 19:27:00,"Objections to merging? @timanglade @fguhit @alazier
",jpsim,alazier
343,2014-05-29 19:27:00,"Objections to merging? @timanglade @fguhit @alazier
",jpsim,fguhit
343,2014-05-29 19:27:00,"Objections to merging? @timanglade @fguhit @alazier
",jpsim,timanglade
343,2014-06-02 21:57:31,"Ok @realm/obj-c, I'm merging this at 5pm PDT. You have until then to comment if you object.
",jpsim,realm
342,2014-05-28 16:24:54,"@jpsim commented:

> I feel like RLMMigration.schemaVersion should rather be RLMSchema.version. The schema has a version, not the migration. It's Person.dog.age rather than Person.dogAge.

In general I would agree, but in this case the schema pointed to by the realm will change during the course of the migration, so the version number will not remain accurate. The `schemaVersion` property really indicates the version the schema was at at the beginning of the migration - perhaps we should change the name to reflect this. Ideas?
",alazier,jpsim
341,2014-05-28 16:08:48,"@jpsim @mekjaer 
",alazier,mekjaer
341,2014-05-28 16:08:48,"@jpsim @mekjaer 
",alazier,jpsim
340,2014-05-28 15:01:04,"@emanuelez Here's the console output for my last push. Do you have any insight as to what's going on here?


",fyell,emanuelez
340,2014-05-28 16:57:06,"@fguhit it looks like Jenkins didn't have the proper privileges to access `github.com/realm/realm-objc`. @timanglade just added the @realm-ci user to this repo, so hopefully next push will work?
",jpsim,fguhit
340,2014-05-28 16:57:06,"@fguhit it looks like Jenkins didn't have the proper privileges to access `github.com/realm/realm-objc`. @timanglade just added the @realm-ci user to this repo, so hopefully next push will work?
",jpsim,timanglade
340,2014-05-28 16:57:06,"@fguhit it looks like Jenkins didn't have the proper privileges to access `github.com/realm/realm-objc`. @timanglade just added the @realm-ci user to this repo, so hopefully next push will work?
",jpsim,realm-ci
340,2014-05-28 18:17:49,"@fguhit if you run `sh build.sh ci-test` locally, it'll do the same thing as Jenkins would. I just ran it myself and it identified about a dozen issues, most of which are really easy fixes. Once that passes locally, I'm sure you can merge this without needing Jenkins.
",jpsim,fguhit
339,2014-05-28 11:36:09,"Some of our tests fail once every 5-10 times.
Especially the tests in QueryTests.
If I disable the cachedRealm when creating the default realm. it never fails.
The inline cachedRealm method also currently states, that the path is not a reliable identifier - I guess it's true. 
@alazier , what is your take? It is out of my knowledge area. 
@bmunkholm
",mekjaer,alazier
339,2014-05-28 11:36:09,"Some of our tests fail once every 5-10 times.
Especially the tests in QueryTests.
If I disable the cachedRealm when creating the default realm. it never fails.
The inline cachedRealm method also currently states, that the path is not a reliable identifier - I guess it's true. 
@alazier , what is your take? It is out of my knowledge area. 
@bmunkholm
",mekjaer,bmunkholm
338,2014-05-28 13:10:34,"@bmunkholm @astigsen 
",mekjaer,astigsen
338,2014-05-28 13:10:34,"@bmunkholm @astigsen 
",mekjaer,bmunkholm
337,2014-05-28 08:55:21,"Some of our tests fail once every 5-10 times.
Especially the tests in QueryTests.
If I disable the cachedRealm when creating the default realm. it never fails.
The inline cachedRealm method also currently states, that the path is not a reliable identifier - I guess it's true. 
@alazier , what is your take? It is out of my knowledge area. 
@bmunkholm 
",mekjaer,alazier
337,2014-05-28 08:55:21,"Some of our tests fail once every 5-10 times.
Especially the tests in QueryTests.
If I disable the cachedRealm when creating the default realm. it never fails.
The inline cachedRealm method also currently states, that the path is not a reliable identifier - I guess it's true. 
@alazier , what is your take? It is out of my knowledge area. 
@bmunkholm 
",mekjaer,bmunkholm
336,2014-05-28 08:11:06,"@kneth 
",mekjaer,kneth
335,2014-05-28 10:59:56,"But it's probably the workspace that we would want people to open initially? You could then even argue that it's the Realm.xcodeproj you would like to hide then, since the workspace includes it.
At this point it's a bit of a detail that has both pro/con, so I would tend to leave it as is. Any way is really ok with me. You and @alazier can resolve as you see fit.
",bmunkholm,alazier
335,2014-05-28 16:34:47,"I've shared my opinion, I'll let @alazier decide at this point whether or not to close/merge this. We have bigger fish to fry ATM.
",jpsim,alazier
334,2014-05-28 00:34:45,"> Why can't we support automatic migrations with deletions of properties and objects? Core Data does this.

I think we should - @timanglade strongly believes otherwise.
",alazier,timanglade
334,2014-05-28 01:45:03,"Yeah that’s pretty bad :-/ Is there any way we can force people to write a migration before they ship?  Compare signature of objects between builds, etc. ? /cc @alazier @fguhit
",timanglade,fguhit
333,2014-05-28 01:20:14,"Fixed all other feedback. @bmunkholm @emanuelez can I get a quick look at this for feedback? I would like to standardize all getting started materials on this one page, so we can deprecate realm.io/download and link to this page from inside our zip releases.

(We’ll still need to update the “Using Realm” section later on.)
",timanglade,bmunkholm
333,2014-05-28 01:20:14,"Fixed all other feedback. @bmunkholm @emanuelez can I get a quick look at this for feedback? I would like to standardize all getting started materials on this one page, so we can deprecate realm.io/download and link to this page from inside our zip releases.

(We’ll still need to update the “Using Realm” section later on.)
",timanglade,emanuelez
331,2014-05-27 21:02:19,"Ready for review @realm/obj-c.
",jpsim,realm
331,2014-05-27 23:36:14,"So ready for review (again) @realm/obj-c.
",jpsim,realm
331,2014-05-28 16:32:08,"Made changes recommended by @kneth. Closing in favor of #343.
",jpsim,kneth
328,2014-05-27 15:17:36,"Removes not absolutely necessary Classes & methods from our docs output to keep things simple. I may have been a bit overzealous so please feel free to make the case for re-adding a few of these.

@alazier @mekjaer @jpsim Please review.
",timanglade,mekjaer
328,2014-05-27 15:17:36,"Removes not absolutely necessary Classes & methods from our docs output to keep things simple. I may have been a bit overzealous so please feel free to make the case for re-adding a few of these.

@alazier @mekjaer @jpsim Please review.
",timanglade,alazier
328,2014-05-27 15:17:36,"Removes not absolutely necessary Classes & methods from our docs output to keep things simple. I may have been a bit overzealous so please feel free to make the case for re-adding a few of these.

@alazier @mekjaer @jpsim Please review.
",timanglade,jpsim
328,2014-05-27 15:57:35,"@bmunkholm Just discussed this with @jpsim and it’s not very standard in Obj-C, not is it super necessary in our case. Ignoring a few files manually is probably fine for now.
",timanglade,jpsim
328,2014-05-28 05:08:43,"That's what I thought he meant :) What would be the point of using a group
if not to hide / tuck these classes away from the view of committers?
If we go that way based on what I'm filtering out of the docs then we
should only have RLMRealm, RLMObject and RLMArray at the root and
everything else in that separate group, since that's exactly what my
ignores are meant to do. Is that what we want?
Personally I always find mismatches between Xcode and disk structure
extremely distasteful (such as RealmTests vs. Realm/RealmTests), but maybe
I haven't spent enough time in objective-C land.

By the way, I'm only removing those classes manually from our user docs in
an abundance of caution (because I think they may give some developers some
bad ideas about how to use us, or make our library look more complicated
than it really is). That's why I'm surprised we'd ever want to remove them
from the view of committers — I'm not even 100% sure we should hide them
from the view of users! :D
To be honest, I half-expected you or @alazier to step in and argue I
should add a few of those classes back to our docs :p Please do compare the
output of both `sh build.sh docs` and confirm I'm not hiding anything that
should be public…

On Tuesday, May 27, 2014, JP Simard notifications@github.com wrote:

> I think @bmunkholm https://github.com/bmunkholm meant to keep these
> internal classes in a separate group in Xcode, but not mirror that
> structure on the filesystem. I think that's a good idea.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-objc/pull/328#issuecomment-44365605
> .
",timanglade,alazier
328,2014-05-28 06:34:10,"To me it's about reflecting the design in the structure to give some kind
of clue about where to get started. It's actually to try to help newcomers!
Once there are many files (and we are getting there now), it's nice to get
a little help understanding the structure. It's not to ""hide"" anything.
Separating them in two simple buckets (PublicClasses, InternalClasses) for
a start would be a help. Or whatever logical grouping that makes sense.
Whether this logical structure is reflected in the physical structure is
less interesting to me (except if it could help tooling for docs for
example).

On Wed, May 28, 2014 at 7:08 AM, Tim Anglade notifications@github.comwrote:

> That's what I thought he meant :) What would be the point of using a group
> if not to hide / tuck these classes away from the view of committers?
> If we go that way based on what I'm filtering out of the docs then we
> should only have RLMRealm, RLMObject and RLMArray at the root and
> everything else in that separate group, since that's exactly what my
> ignores are meant to do. Is that what we want?
> Personally I always find mismatches between Xcode and disk structure
> extremely distasteful (such as RealmTests vs. Realm/RealmTests), but maybe
> I haven't spent enough time in objective-C land.
> 
> By the way, I'm only removing those classes manually from our user docs in
> an abundance of caution (because I think they may give some developers
> some
> bad ideas about how to use us, or make our library look more complicated
> than it really is). That's why I'm surprised we'd ever want to remove them
> from the view of committers — I'm not even 100% sure we should hide them
> from the view of users! :D
> To be honest, I half-expected you or @alazier to step in and argue I
> should add a few of those classes back to our docs :p Please do compare
> the
> output of both `sh build.sh docs` and confirm I'm not hiding anything that
> should be public…
> 
> On Tuesday, May 27, 2014, JP Simard notifications@github.com wrote:
> 
> > I think @bmunkholm https://github.com/bmunkholm meant to keep these
> > internal classes in a separate group in Xcode, but not mirror that
> > structure on the filesystem. I think that's a good idea.
> > 
> > —
> > Reply to this email directly or view it on GitHub<
> > https://github.com/realm/realm-objc/pull/328#issuecomment-44365605>
> > .
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/realm/realm-objc/pull/328#issuecomment-44366226
> .
",bmunkholm,alazier
327,2014-05-27 14:42:52,"I have tried the 3rd time to generate a framework directly from Xcode. What I'm missing:
- combine physical device and simulator framework
- add documentation (when it works)
- finish target for downloading binary core
- generating either combined debug/release framework or two seperate

@emanuelez @timanglade @bmunkholm @mekjaer 
",kneth,mekjaer
327,2014-05-27 14:42:52,"I have tried the 3rd time to generate a framework directly from Xcode. What I'm missing:
- combine physical device and simulator framework
- add documentation (when it works)
- finish target for downloading binary core
- generating either combined debug/release framework or two seperate

@emanuelez @timanglade @bmunkholm @mekjaer 
",kneth,bmunkholm
327,2014-05-27 14:42:52,"I have tried the 3rd time to generate a framework directly from Xcode. What I'm missing:
- combine physical device and simulator framework
- add documentation (when it works)
- finish target for downloading binary core
- generating either combined debug/release framework or two seperate

@emanuelez @timanglade @bmunkholm @mekjaer 
",kneth,timanglade
327,2014-05-27 14:42:52,"I have tried the 3rd time to generate a framework directly from Xcode. What I'm missing:
- combine physical device and simulator framework
- add documentation (when it works)
- finish target for downloading binary core
- generating either combined debug/release framework or two seperate

@emanuelez @timanglade @bmunkholm @mekjaer 
",kneth,emanuelez
326,2014-05-27 13:14:30,"@kneth @bmunkholm @alazier @jpsim 
",emanuelez,bmunkholm
326,2014-05-27 13:14:30,"@kneth @bmunkholm @alazier @jpsim 
",emanuelez,alazier
326,2014-05-27 13:14:30,"@kneth @bmunkholm @alazier @jpsim 
",emanuelez,kneth
326,2014-05-27 13:14:30,"@kneth @bmunkholm @alazier @jpsim 
",emanuelez,jpsim
325,2014-05-27 12:49:06,"Removed warnings under 32bit.
Removed unneeded delete of defaultRealm (now done by Testcase)
Follow code style guide of max 120 chars.
@mekjaer 
",bmunkholm,mekjaer
324,2014-05-27 10:32:45,"@bmunkholm @timanglade 
Merging quickly
",emanuelez,bmunkholm
324,2014-05-27 10:32:45,"@bmunkholm @timanglade 
Merging quickly
",emanuelez,timanglade
323,2014-05-27 08:49:33,"@kneth @mekjaer @bmunkholm @timanglade 
",emanuelez,mekjaer
323,2014-05-27 08:49:33,"@kneth @mekjaer @bmunkholm @timanglade 
",emanuelez,bmunkholm
323,2014-05-27 08:49:33,"@kneth @mekjaer @bmunkholm @timanglade 
",emanuelez,timanglade
323,2014-05-27 08:49:33,"@kneth @mekjaer @bmunkholm @timanglade 
",emanuelez,kneth
322,2014-05-26 15:29:42,"Getting a tableview using properties caused a copy of the tableview in core, resulting in errors for aggregations.
Made tableview an ivar instead

@alazier @rrrlasse @kspangsege 
",mekjaer,alazier
322,2014-05-26 15:29:42,"Getting a tableview using properties caused a copy of the tableview in core, resulting in errors for aggregations.
Made tableview an ivar instead

@alazier @rrrlasse @kspangsege 
",mekjaer,rrrlasse
322,2014-05-26 15:29:42,"Getting a tableview using properties caused a copy of the tableview in core, resulting in errors for aggregations.
Made tableview an ivar instead

@alazier @rrrlasse @kspangsege 
",mekjaer,kspangsege
321,2014-05-26 15:28:55,"@kneth @mekjaer @bmunkholm 
",emanuelez,mekjaer
321,2014-05-26 15:28:55,"@kneth @mekjaer @bmunkholm 
",emanuelez,bmunkholm
321,2014-05-26 15:28:55,"@kneth @mekjaer @bmunkholm 
",emanuelez,kneth
320,2014-05-26 11:55:50,"@kneth 
",mekjaer,kneth
320,2014-05-26 13:49:40,"@bmunkholm 
",mekjaer,bmunkholm
320,2014-05-26 14:20:07,"Looks ok to me in itself. But a LOT of other places reference src/. But let's leave that for @kneth .
",bmunkholm,kneth
319,2014-05-26 10:17:02,"@kneth https://github.com/Realm/realm-objc/pull/303#issuecomment-43591290
",mekjaer,kneth
318,2014-05-26 09:02:07,"This is for Realm target (OS X) only.

@emanuelez @bmunkholm @mekjaer @zuschlag 
",kneth,mekjaer
318,2014-05-26 09:02:07,"This is for Realm target (OS X) only.

@emanuelez @bmunkholm @mekjaer @zuschlag 
",kneth,bmunkholm
318,2014-05-26 09:02:07,"This is for Realm target (OS X) only.

@emanuelez @bmunkholm @mekjaer @zuschlag 
",kneth,zuschlag
318,2014-05-26 09:02:07,"This is for Realm target (OS X) only.

@emanuelez @bmunkholm @mekjaer @zuschlag 
",kneth,emanuelez
317,2014-05-23 23:04:00,"Ready for review @alazier @kneth @mekjaer 
",fyell,mekjaer
317,2014-05-23 23:04:00,"Ready for review @alazier @kneth @mekjaer 
",fyell,alazier
317,2014-05-23 23:04:00,"Ready for review @alazier @kneth @mekjaer 
",fyell,kneth
317,2014-05-28 01:56:52,"@emanuelez Any idea why Jenkins is not firing?
",fyell,emanuelez
316,2014-05-23 16:13:37,"@kneth Can I get a quick review from you? Thanks.
",fyell,kneth
315,2014-05-23 15:17:40,"@bmunkholm As a result of merging master into object-store-master
",mekjaer,bmunkholm
313,2014-05-23 13:43:08,"@bmunkholm 
",mekjaer,bmunkholm
312,2014-05-23 11:57:18,"@bmunkholm @alazier 
",mekjaer,bmunkholm
312,2014-05-23 11:57:18,"@bmunkholm @alazier 
",mekjaer,alazier
311,2014-05-23 09:39:58,"I have moved stuff around so `sh build.sh build` is working with the new object store. It is now building but the unit tests are not able to compile due to error and warning.

@kspangsege @bmunkholm @zuschlag @alazier 
",kneth,bmunkholm
311,2014-05-23 09:39:58,"I have moved stuff around so `sh build.sh build` is working with the new object store. It is now building but the unit tests are not able to compile due to error and warning.

@kspangsege @bmunkholm @zuschlag @alazier 
",kneth,alazier
311,2014-05-23 09:39:58,"I have moved stuff around so `sh build.sh build` is working with the new object store. It is now building but the unit tests are not able to compile due to error and warning.

@kspangsege @bmunkholm @zuschlag @alazier 
",kneth,kspangsege
311,2014-05-23 09:39:58,"I have moved stuff around so `sh build.sh build` is working with the new object store. It is now building but the unit tests are not able to compile due to error and warning.

@kspangsege @bmunkholm @zuschlag @alazier 
",kneth,zuschlag
310,2014-05-20 14:53:27,"@kneth @zuschlag 
",mekjaer,zuschlag
310,2014-05-20 14:53:27,"@kneth @zuschlag 
",mekjaer,kneth
309,2014-05-20 14:37:51,"This is work-in-progress!!!!

The core library is fetched as CocoaPod (so you need to install CocoaPod), and only iOS is supported. You have to start Xcode using the `Realm.xcworkspace` instead of the Xcode project.

@Tightdb/objc 
",kneth,Tightdb
309,2014-05-20 14:43:06,"@bmunkholm @jpsim 
",mekjaer,bmunkholm
309,2014-05-20 14:43:06,"@bmunkholm @jpsim 
",mekjaer,jpsim
308,2014-05-20 14:14:20,"@alazier 
Small thing
",mekjaer,alazier
307,2014-05-20 14:04:29,"@alazier @bmunkholm 
",mekjaer,alazier
307,2014-05-20 14:04:29,"@alazier @bmunkholm 
",mekjaer,bmunkholm
306,2014-05-20 13:31:13,"`RLMRow` is placed by `RLMObject`.

@timanglade @alazier 
",kneth,alazier
306,2014-05-20 13:31:13,"`RLMRow` is placed by `RLMObject`.

@timanglade @alazier 
",kneth,timanglade
305,2014-05-20 14:57:11,"@kneth @bmunkholm 

You guys want to take a look at this? This one might take a while. 
",alazier,bmunkholm
305,2014-05-20 14:57:11,"@kneth @bmunkholm 

You guys want to take a look at this? This one might take a while. 
",alazier,kneth
305,2014-05-20 16:08:03,"@mekjaer 
",alazier,mekjaer
304,2014-05-19 14:24:00,"@bmunkholm 
",mekjaer,bmunkholm
303,2014-05-19 13:27:21,"@bmunkholm @rrrlasse @kneth 
",mekjaer,bmunkholm
303,2014-05-19 13:27:21,"@bmunkholm @rrrlasse @kneth 
",mekjaer,rrrlasse
303,2014-05-19 13:27:21,"@bmunkholm @rrrlasse @kneth 
",mekjaer,kneth
302,2014-05-19 11:39:19,"The core library can now generate a zip file with a framework. This framework can be imported (as either OS X or iOS framework only) using CocoaPods. When the new realm.io server goes online, we must redo the pod files.

See https://app.asana.com/0/1442494018425/12294822565137

@emanuelez @timanglade 
",kneth,timanglade
302,2014-05-19 11:39:19,"The core library can now generate a zip file with a framework. This framework can be imported (as either OS X or iOS framework only) using CocoaPods. When the new realm.io server goes online, we must redo the pod files.

See https://app.asana.com/0/1442494018425/12294822565137

@emanuelez @timanglade 
",kneth,emanuelez
302,2014-05-19 12:42:08,"@brian Then we should remove the OS X target in the Xcode project?
",kneth,brian
299,2014-05-15 14:07:22,"This is a kind of AJAX component for Realm. `RLMNetworking` has only class methods. You can do



@timanglade @alazier 
",kneth,alazier
299,2014-05-15 14:07:22,"This is a kind of AJAX component for Realm. `RLMNetworking` has only class methods. You can do



@timanglade @alazier 
",kneth,timanglade
299,2014-05-19 09:35:21,"I'll remove the networking from this PR and later recreate it as PRs for item 2 and 3 from the list by @astigsen. Btw, do you mean REST as in implementing http://en.wikipedia.org/wiki/Representational_state_transfer? Or do you mean something closer to http://en.wikipedia.org/wiki/AJAX?

@timanglade The mapping from `RLMArray` to JSON is covered by `JSONString` in the original proposal by @alazier.
",kneth,alazier
299,2014-05-19 20:10:23,"Either way, I think we can consider this design reviewed and move to implementation, unless there are any last thoughts from @astigsen @alazier @bmunkholm ?
",timanglade,alazier
299,2014-05-19 20:10:23,"Either way, I think we can consider this design reviewed and move to implementation, unless there are any last thoughts from @astigsen @alazier @bmunkholm ?
",timanglade,bmunkholm
295,2014-05-14 14:06:58,"I have added unit tests for mixed typed columns. The current state of the object store does not yet support mixed typed columns so this PR should fail.

@zuschlag @mekjaer @alazier 
",kneth,mekjaer
295,2014-05-14 14:06:58,"I have added unit tests for mixed typed columns. The current state of the object store does not yet support mixed typed columns so this PR should fail.

@zuschlag @mekjaer @alazier 
",kneth,alazier
295,2014-05-14 14:06:58,"I have added unit tests for mixed typed columns. The current state of the object store does not yet support mixed typed columns so this PR should fail.

@zuschlag @mekjaer @alazier 
",kneth,zuschlag
294,2014-05-14 14:45:14,"@bmunkholm @alazier I took the freedom to implement sum, avg, min and max on RLMArray
",mekjaer,alazier
290,2014-05-13 15:08:44,"@bmunkholm 
",kneth,bmunkholm
289,2014-05-13 14:41:54,"Cherry picked from master into object-store-master
@bmunkholm @emanuelez 
",mekjaer,bmunkholm
289,2014-05-13 14:41:54,"Cherry picked from master into object-store-master
@bmunkholm @emanuelez 
",mekjaer,emanuelez
288,2014-05-13 13:09:33,"@emanuelez @kneth 
",mekjaer,kneth
287,2014-05-13 12:15:59,"@bmunkholm @timanglade @mekjaer 
",emanuelez,mekjaer
287,2014-05-13 12:15:59,"@bmunkholm @timanglade @mekjaer 
",emanuelez,bmunkholm
287,2014-05-13 12:15:59,"@bmunkholm @timanglade @mekjaer 
",emanuelez,timanglade
286,2014-05-13 14:03:51,"@emanuelez @bmunkholm 
",mekjaer,bmunkholm
286,2014-05-13 14:03:51,"@emanuelez @bmunkholm 
",mekjaer,emanuelez
285,2014-05-13 10:19:53,"@kneth 
",mekjaer,kneth
284,2014-05-12 12:53:21,"@kspangsege 
",mekjaer,kspangsege
283,2014-05-12 09:30:55,"@timanglade @bmunkholm @jpsim 
",emanuelez,bmunkholm
283,2014-05-12 09:30:55,"@timanglade @bmunkholm @jpsim 
",emanuelez,timanglade
283,2014-05-12 09:30:55,"@timanglade @bmunkholm @jpsim 
",emanuelez,jpsim
282,2014-05-12 08:29:40,"@timanglade @bmunkholm @jpsim 
",emanuelez,bmunkholm
282,2014-05-12 08:29:40,"@timanglade @bmunkholm @jpsim 
",emanuelez,timanglade
282,2014-05-12 08:29:40,"@timanglade @bmunkholm @jpsim 
",emanuelez,jpsim
281,2014-05-10 16:06:41,"Found a few args that silence the warnings we don’t care about but do let some more important errors through.

Actually, running `sh build.sh docs` should output one error message on this branch (the error in question is fixed in #277).

I raised the error threshold back to 1 so we can let Jenkins fail branches on doc errors.

@emanuelez please review?
",timanglade,emanuelez
280,2014-05-10 15:19:08,"Per https://github.com/Tightdb/tightdb_objc/wiki/Objective-C-Repository-Structure

I also tweaked the template for readability, and reformatted the existing content to be consistent in the entire doc.

Per a conversation with Brian, the template is now at the bottom.

@bmunkholm @emanuelez please review
",timanglade,bmunkholm
280,2014-05-10 15:19:08,"Per https://github.com/Tightdb/tightdb_objc/wiki/Objective-C-Repository-Structure

I also tweaked the template for readability, and reformatted the existing content to be consistent in the entire doc.

Per a conversation with Brian, the template is now at the bottom.

@bmunkholm @emanuelez please review
",timanglade,emanuelez
279,2014-05-09 18:45:27,"The purpose of this Xcode project is to build an OSX Command Line Interface that can be reused as an Xcode Plug-in or an OSX App. Currently this branch re-uses the code from importer_tool.cpp for the CSV importer. 
#### Prerequisites
- Currently the project requires that the Tightdb Core is installed on your machine. 
- Realm.framework at the root level of tightdb_objc.
#### Debugging
- The build binary gets outputted into `~/Library/Developer/Xcode/DerivedData/RealmTools-{HASH}/Build/Products/Debug/`
- To test the CLI, `cd` into path above and type `./realm`
#### Distribution
- This project can be archived with xcode. Add the binary from the Xcode Archive to /usr/local/bin.
#### Discussion

In order to support the application from breaking API changes, we should move this project into it's own repository to ensure that we properly maintain the versions for core and objective-c bindings. This requires that we have either have: 
1. A static library for Core or;
2. A Podspec for Core which allows us to build from Xcode and a Podspec for Objective-C bindings. We can then add a Podfile to this project and manage the versioning there.
@timanglade @bmunkholm @astigsen 
#### Need to do
- Add functionality to import JSON Files
- Fix CSV importer exceptions
- Export model classes
- Add README.md
- Update legends for mode
- Add and implement `inspect` mode
- Integration tests with Jenkins to ensure changes in obj-c bindings don't affect CLI functionality (This is only required if we plan to keep the project within this repo since Realm.framework will often change) 
",fyell,astigsen
279,2014-05-09 18:45:27,"The purpose of this Xcode project is to build an OSX Command Line Interface that can be reused as an Xcode Plug-in or an OSX App. Currently this branch re-uses the code from importer_tool.cpp for the CSV importer. 
#### Prerequisites
- Currently the project requires that the Tightdb Core is installed on your machine. 
- Realm.framework at the root level of tightdb_objc.
#### Debugging
- The build binary gets outputted into `~/Library/Developer/Xcode/DerivedData/RealmTools-{HASH}/Build/Products/Debug/`
- To test the CLI, `cd` into path above and type `./realm`
#### Distribution
- This project can be archived with xcode. Add the binary from the Xcode Archive to /usr/local/bin.
#### Discussion

In order to support the application from breaking API changes, we should move this project into it's own repository to ensure that we properly maintain the versions for core and objective-c bindings. This requires that we have either have: 
1. A static library for Core or;
2. A Podspec for Core which allows us to build from Xcode and a Podspec for Objective-C bindings. We can then add a Podfile to this project and manage the versioning there.
@timanglade @bmunkholm @astigsen 
#### Need to do
- Add functionality to import JSON Files
- Fix CSV importer exceptions
- Export model classes
- Add README.md
- Update legends for mode
- Add and implement `inspect` mode
- Integration tests with Jenkins to ensure changes in obj-c bindings don't affect CLI functionality (This is only required if we plan to keep the project within this repo since Realm.framework will often change) 
",fyell,bmunkholm
279,2014-05-09 18:45:27,"The purpose of this Xcode project is to build an OSX Command Line Interface that can be reused as an Xcode Plug-in or an OSX App. Currently this branch re-uses the code from importer_tool.cpp for the CSV importer. 
#### Prerequisites
- Currently the project requires that the Tightdb Core is installed on your machine. 
- Realm.framework at the root level of tightdb_objc.
#### Debugging
- The build binary gets outputted into `~/Library/Developer/Xcode/DerivedData/RealmTools-{HASH}/Build/Products/Debug/`
- To test the CLI, `cd` into path above and type `./realm`
#### Distribution
- This project can be archived with xcode. Add the binary from the Xcode Archive to /usr/local/bin.
#### Discussion

In order to support the application from breaking API changes, we should move this project into it's own repository to ensure that we properly maintain the versions for core and objective-c bindings. This requires that we have either have: 
1. A static library for Core or;
2. A Podspec for Core which allows us to build from Xcode and a Podspec for Objective-C bindings. We can then add a Podfile to this project and manage the versioning there.
@timanglade @bmunkholm @astigsen 
#### Need to do
- Add functionality to import JSON Files
- Fix CSV importer exceptions
- Export model classes
- Add README.md
- Update legends for mode
- Add and implement `inspect` mode
- Integration tests with Jenkins to ensure changes in obj-c bindings don't affect CLI functionality (This is only required if we plan to keep the project within this repo since Realm.framework will often change) 
",fyell,timanglade
279,2014-05-09 22:44:22,"@emanuelez Can we discuss distribution for this tool on Monday?
",fyell,emanuelez
279,2014-05-09 22:49:22,"Sure thing!

On Sat, May 10, 2014 at 12:44 AM, Fiel Guhit notifications@github.comwrote:

> @emanuelez https://github.com/emanuelez Can we discuss distribution for
> this tool on Monday?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/279#issuecomment-42721340
> .
",emanuelez,emanuelez
279,2014-05-09 23:36:41,"@fguhit CHCSVParser looks really good. This would really help keep the importers distributable and make the CLI/Plugin that much easier to distribute.
The big catch is that we’ll need some way to edit the schema of a Realm from Objective-C. The new API does not include any methods for that, but we’ll need to re-add some for Migrations. So as scheduled, let’s discuss Migrations on Monday and pick this task up afterwards.

Others, please feel free to review basic structure of the effort in the mean time :) Since this PR works on a separate project in a separate directory, I don’t think it hurts us to keep it open a little bit longer than usual.
",timanglade,fguhit
278,2014-05-09 14:22:59,"@finnschiermer 
",kneth,finnschiermer
277,2014-05-09 11:26:48,"@bmunkholm @timanglade @jpsim
",emanuelez,bmunkholm
277,2014-05-09 11:26:48,"@bmunkholm @timanglade @jpsim
",emanuelez,timanglade
277,2014-05-09 11:26:48,"@bmunkholm @timanglade @jpsim
",emanuelez,jpsim
277,2014-05-12 05:33:38,"We also need to attribute appledocs to comply with the license.

On Sun, May 11, 2014 at 11:46 AM, Emanuele Zattin
notifications@github.comwrote:

> I fixed issue 1 (the tgz and xml files). @timangladehttps://github.com/timangladewill you give it another run and see if everything is ok?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/277#issuecomment-42766372
> .
",bmunkholm,timangladehttps
276,2014-05-09 07:55:39,"@kneth 
",emanuelez,kneth
275,2014-05-09 07:54:42,"@kneth 
",emanuelez,kneth
274,2014-05-08 18:32:09,"- new unit test to verify the fix.

@kneth 
",kspangsege,kneth
274,2014-05-08 18:32:45,"@kneth note the FIXMEs I added.
",kspangsege,kneth
273,2014-05-08 15:49:28,"Very much work in progress. @kneth Let's have a chat tmr
",mekjaer,kneth
271,2014-05-08 11:19:23,"@jpsim @kneth @timanglade @mekjaer 
",emanuelez,mekjaer
271,2014-05-08 11:19:23,"@jpsim @kneth @timanglade @mekjaer 
",emanuelez,jpsim
271,2014-05-08 11:19:23,"@jpsim @kneth @timanglade @mekjaer 
",emanuelez,timanglade
271,2014-05-08 11:19:23,"@jpsim @kneth @timanglade @mekjaer 
",emanuelez,kneth
270,2014-05-08 08:12:28,"@jpsim @timanglade @mekjaer 
",emanuelez,mekjaer
270,2014-05-08 08:12:28,"@jpsim @timanglade @mekjaer 
",emanuelez,jpsim
270,2014-05-08 08:12:28,"@jpsim @timanglade @mekjaer 
",emanuelez,timanglade
267,2014-05-12 08:58:50,"I have added the update function to `build.sh set-version` so the release procedure take care of it. @emanuelez  you must push the changes to `Realm.podspec` during release in Jenkins.
",kneth,emanuelez
266,2014-05-08 01:43:20,"Not quite. For updating, mantle had separate 'merge' methods which allow
you to merge in values from a subset of keys into an existing object.

You are right about it ignoring missing keys, but it does not populate keys
with default values and supports the concept of a property not being set
(nil values for objects). We don't support this, so in the case someone
left out a property such as '@property NSString *name' from their json,
mantle would leave it as nil, whereas our users would get an empty string
back. This would lead us to think that name is set when it really isn't.

All that being said, I'm not thrilled with the way mantle does things on
this front and it would be nice to have a way to ensure that all of the
fields you expect to be populated are actually populated. Otherwise we are
forcing users to do their own json pre-verification before trying to insert
into our system, at which point they should just set the accessors for each
property directly rather than using the apis in question.

On Wed, May 7, 2014 at 6:21 PM, astigsen notifications@github.com wrote:

> > I also question how often someone will be trying to 'update' a value by
> > passing in a partial dictionary. I've never really seen this pattern
> > before, and am not sure I like it.
> 
> This is the same pattern as Mantle. When building a model object from a
> dictionary it ignores values not defined in the model and sets defaults
> for
> values missing. Turns out to be very useful when importing JSON
> objects received from outside sources (like REST services).
> 
> /a
> 
> On Wed, May 7, 2014 at 5:58 PM, alazier notifications@github.com wrote:
> 
> > I disagree with one point in your description - when passing in a
> > dictionary without all of the required keys insertion should not
> > succeed,
> > ie we should not be using default values. The reason is that there is no
> > way for a caller to know that they are actually passing in an incomplete
> > dictionary, and that default values will be used which will lead to hard
> > to
> > identify errors. If we had a mechanism to allow users to specify default
> > values for columns I would fee a bit differently but as is this feels
> > wrong.
> > 
> > I also question how often someone will be trying to 'update' a value by
> > passing in a partial dictionary. I've never really seen this pattern
> > before, and am not sure I like it.
> > 
> > On Wed, May 7, 2014 at 1:54 PM, bmunkholm notifications@github.com
> > wrote:
> > 
> > > Sorry, forget the comment. I read your comment too fast....
> > > The way you describe it - it's a bug. It should work as I just
> > > described.
> > > Only affecting the fields you specify.
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub<
> > > https://github.com/Tightdb/tightdb_objc/pull/266#issuecomment-42481822>
> > > .
> > 
> > —
> > Reply to this email directly or view it on GitHub<
> > https://github.com/Tightdb/tightdb_objc/pull/266#issuecomment-42502884>
> > .
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/266#issuecomment-42504144
> .
",alazier,property
266,2014-05-08 04:46:37,"Shouldn't we let people set required properties with the new interface,
just like they set ignored & indexed?

(We could discuss letting them set default properties via an NSDict as
well.)

On Wednesday, May 7, 2014, alazier notifications@github.com wrote:

> Not quite. For updating, mantle had separate 'merge' methods which allow
> you to merge in values from a subset of keys into an existing object.
> 
> You are right about it ignoring missing keys, but it does not populate
> keys
> with default values and supports the concept of a property not being set
> (nil values for objects). We don't support this, so in the case someone
> left out a property such as '@property NSString *name' from their json,
> mantle would leave it as nil, whereas our users would get an empty string
> back. This would lead us to think that name is set when it really isn't.
> 
> All that being said, I'm not thrilled with the way mantle does things on
> this front and it would be nice to have a way to ensure that all of the
> fields you expect to be populated are actually populated. Otherwise we are
> forcing users to do their own json pre-verification before trying to
> insert
> into our system, at which point they should just set the accessors for
> each
> property directly rather than using the apis in question.
> 
> On Wed, May 7, 2014 at 6:21 PM, astigsen <notifications@github.com<javascript:_e(%7B%7D,'cvml','notifications@github.com');>>
> wrote:
> 
> > > I also question how often someone will be trying to 'update' a value
> > > by
> > > passing in a partial dictionary. I've never really seen this pattern
> > > before, and am not sure I like it.
> > 
> > This is the same pattern as Mantle. When building a model object from a
> > dictionary it ignores values not defined in the model and sets defaults
> > for
> > values missing. Turns out to be very useful when importing JSON
> > objects received from outside sources (like REST services).
> > 
> > /a
> > 
> > On Wed, May 7, 2014 at 5:58 PM, alazier <notifications@github.com<javascript:_e(%7B%7D,'cvml','notifications@github.com');>>
> > wrote:
> > 
> > > I disagree with one point in your description - when passing in a
> > > dictionary without all of the required keys insertion should not
> > > succeed,
> > > ie we should not be using default values. The reason is that there is
> > > no
> > > way for a caller to know that they are actually passing in an
> > > incomplete
> > > dictionary, and that default values will be used which will lead to
> > > hard
> > > to
> > > identify errors. If we had a mechanism to allow users to specify
> > > default
> > > values for columns I would fee a bit differently but as is this feels
> > > wrong.
> > > 
> > > I also question how often someone will be trying to 'update' a value
> > > by
> > > passing in a partial dictionary. I've never really seen this pattern
> > > before, and am not sure I like it.
> > > 
> > > On Wed, May 7, 2014 at 1:54 PM, bmunkholm <notifications@github.com<javascript:_e(%7B%7D,'cvml','notifications@github.com');>>
> > > 
> > > wrote:
> > > 
> > > > Sorry, forget the comment. I read your comment too fast....
> > > > The way you describe it - it's a bug. It should work as I just
> > > > described.
> > > > Only affecting the fields you specify.
> > > > 
> > > > —
> > > > Reply to this email directly or view it on GitHub<
> > > > https://github.com/Tightdb/tightdb_objc/pull/266#issuecomment-42481822>
> > > > 
> > > > .
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub<
> > > https://github.com/Tightdb/tightdb_objc/pull/266#issuecomment-42502884>
> > > .
> > 
> > —
> > Reply to this email directly or view it on GitHub<
> > https://github.com/Tightdb/tightdb_objc/pull/266#issuecomment-42504144>
> > .
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/266#issuecomment-42505277
> .
",timanglade,property
266,2014-05-12 18:51:45,"@fguhit is this ready to merge?
",timanglade,fguhit
264,2014-05-07 16:32:29,"Updated release_notes per @mekjaer comment #232. Thanks for catching that. 
",fyell,mekjaer
261,2014-05-07 07:28:14,"@timanglade @jpsim 
",emanuelez,jpsim
261,2014-05-07 07:28:14,"@timanglade @jpsim 
",emanuelez,timanglade
260,2014-05-07 07:04:06,"I merged https://github.com/Tightdb/tightdb_objc/pull/251 too quickly in order to get feedback from US.

@mekjaer @alazier @jpsim 
",kneth,mekjaer
260,2014-05-07 07:04:06,"I merged https://github.com/Tightdb/tightdb_objc/pull/251 too quickly in order to get feedback from US.

@mekjaer @alazier @jpsim 
",kneth,alazier
260,2014-05-07 07:04:06,"I merged https://github.com/Tightdb/tightdb_objc/pull/251 too quickly in order to get feedback from US.

@mekjaer @alazier @jpsim 
",kneth,jpsim
257,2014-05-06 19:59:47,"I prefer `docs` over `doc`, and @emanuelez is creating a separate Jenkins task to build appledocs anyway. So we won't need to rename all the other repos until later.

@timanglade what are your thoughts on outputting docs to `docs/html` rather than `doc/appledocs/html`? We could also generate the docset in `docs/docset`.
",jpsim,timanglade
257,2014-05-06 19:59:47,"I prefer `docs` over `doc`, and @emanuelez is creating a separate Jenkins task to build appledocs anyway. So we won't need to rename all the other repos until later.

@timanglade what are your thoughts on outputting docs to `docs/html` rather than `doc/appledocs/html`? We could also generate the docset in `docs/docset`.
",jpsim,emanuelez
257,2014-05-07 06:59:39,"Let's not spend too much time discussing an ""s"". ""doc"" is an abbreviation
of ""documentation"". Although ""docs"" may be just a fine, we have many other
repos with ""doc"". My main point here is just that although changing it in
objc may be fine, if it doesn't add a reasonable value, let's keep it as it
is, because it creates unnessasary work or inconsistency in other repos.

On Tue, May 6, 2014 at 9:59 PM, JP Simard notifications@github.com wrote:

> I prefer docs over doc, and @emanuelez https://github.com/emanuelez is
> creating a separate Jenkins task to build appledocs anyway. So we won't
> need to rename all the other repos until later.
> 
> @timanglade https://github.com/timanglade what are your thoughts on
> outputting docs to docs/html rather than doc/appledocs/html? We could
> also generate the docset in docs/docset.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/257#issuecomment-42351205
> .
",bmunkholm,timanglade
257,2014-05-07 06:59:39,"Let's not spend too much time discussing an ""s"". ""doc"" is an abbreviation
of ""documentation"". Although ""docs"" may be just a fine, we have many other
repos with ""doc"". My main point here is just that although changing it in
objc may be fine, if it doesn't add a reasonable value, let's keep it as it
is, because it creates unnessasary work or inconsistency in other repos.

On Tue, May 6, 2014 at 9:59 PM, JP Simard notifications@github.com wrote:

> I prefer docs over doc, and @emanuelez https://github.com/emanuelez is
> creating a separate Jenkins task to build appledocs anyway. So we won't
> need to rename all the other repos until later.
> 
> @timanglade https://github.com/timanglade what are your thoughts on
> outputting docs to docs/html rather than doc/appledocs/html? We could
> also generate the docset in docs/docset.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/257#issuecomment-42351205
> .
",bmunkholm,emanuelez
256,2014-05-10 03:45:19,"Since JP is on vacay, I made changes based on @kneth’s comments. I tried addressing my own comments but then realized it wouldn’t work with the way the README is currently structured. Merging.
",timanglade,kneth
253,2014-05-06 12:12:21,"Note that an anonymous namespace plays the same role for C++ as the `static` keyword plays for C. It makes stuff local to the translation unit. This eliminates risk of symbol collision when the customer uses the framework, and also of collisions between our individual translation units.

@alazier @jpsim 
",kspangsege,alazier
253,2014-05-06 12:12:21,"Note that an anonymous namespace plays the same role for C++ as the `static` keyword plays for C. It makes stuff local to the translation unit. This eliminates risk of symbol collision when the customer uses the framework, and also of collisions between our individual translation units.

@alazier @jpsim 
",kspangsege,jpsim
253,2014-05-06 14:47:50,"+1
@alazier @jpsim : feel free to merge whenever you have seen it.
",bmunkholm,alazier
253,2014-05-06 14:47:50,"+1
@alazier @jpsim : feel free to merge whenever you have seen it.
",bmunkholm,jpsim
252,2014-05-06 11:48:38,"In order to reproduce the big mentioned in https://app.asana.com/0/861870036984/11914908562570 two new unit tests are created.

@fguhit 
",kneth,fguhit
251,2014-05-06 08:11:24,"See https://app.asana.com/0/861870036984/11306112154513

@bmunkholm @mekjaer 
",kneth,mekjaer
251,2014-05-06 08:11:24,"See https://app.asana.com/0/861870036984/11306112154513

@bmunkholm @mekjaer 
",kneth,bmunkholm
245,2014-05-05 20:53:08,"@astigsen Can you verify that your tests pass with this branch?
",fyell,astigsen
241,2014-05-05 17:21:53,"- removed redundant casts in query_util (floatValue, doubleValue and intValue)
- added inverse between tests

This is from @kneth's comments on #229.
",jpsim,kneth
239,2014-05-05 16:55:23,"Thanks to @kspangsege for his [insightful comments](https://github.com/Tightdb/tightdb_objc/pull/230#issuecomment-42154966) in #230
",jpsim,kspangsege
238,2014-05-05 09:54:44,"@jpsim @kspangsege @kneth
",emanuelez,jpsim
238,2014-05-05 09:54:44,"@jpsim @kspangsege @kneth
",emanuelez,kspangsege
238,2014-05-05 09:54:44,"@jpsim @kspangsege @kneth
",emanuelez,kneth
237,2014-05-05 14:44:23,"Why do we have 2 PRs for this? @mekjaer was working on this.
",fyell,mekjaer
235,2014-05-03 00:12:28,"@fguhit 

ALMOST fixed merge hell for this PR https://github.com/Tightdb/tightdb_objc/pull/214

Only missing is a few ref docs examples.
",mekjaer,fguhit
234,2014-05-02 23:40:51,"I couldn't add them to `allWhere:orderBy:` without renaming the method, which I don't think is a good idea. Varargs must be the last named argument of a method.

I had to edit the docs for this @timanglade.
",jpsim,timanglade
234,2014-05-05 18:59:23,"Also added support for @fguhit's fancy new aggregate queries: `countWhere:`, `minOfProperty:where:`, `maxOfProperty:where:`, `sumOfProperty:where:`, `averageOfProperty:where:`.

I'll need some +1's before merging this @Tightdb/ios.
",jpsim,Tightdb
234,2014-05-05 18:59:23,"Also added support for @fguhit's fancy new aggregate queries: `countWhere:`, `minOfProperty:where:`, `maxOfProperty:where:`, `sumOfProperty:where:`, `averageOfProperty:where:`.

I'll need some +1's before merging this @Tightdb/ios.
",jpsim,fguhit
234,2014-05-05 20:11:53,"I'll do 2 things on this right away: 
1. create a macro (or some other way) to deduplicate the vararg code
2. make sure we `@throw` if we pass in an `NSPredicate` with variadic arguments
",jpsim,throw
230,2014-05-02 19:46:42,"This is ready for review, I moved all core query/predicate code to `query_util.mm` and removed the category.

@kspangsege I had to remove the anonymous namespace for this to work. Is that an issue?
",jpsim,kspangsege
229,2014-05-01 23:30:47,"Anything else before merge? @Tightdb/ios
",jpsim,Tightdb
225,2014-05-01 20:32:05,"@mekjaer @fguhit please review (in general please review PRs within a few hours so we can merge quickly and avoid merge hells)
",timanglade,mekjaer
225,2014-05-01 20:32:05,"@mekjaer @fguhit please review (in general please review PRs within a few hours so we can merge quickly and avoid merge hells)
",timanglade,fguhit
224,2014-04-29 05:41:58,"@alazier I agree on all your comments regarding the index; this was lifted straight from the new tutorial for the sake of having something ready by tomorrow but I’ll attempt a rewrite when I get a chance.
(@jpsim Take note of the feedback above if you pick up the tutorial again.)
",timanglade,alazier
224,2014-04-29 05:41:58,"@alazier I agree on all your comments regarding the index; this was lifted straight from the new tutorial for the sake of having something ready by tomorrow but I’ll attempt a rewrite when I get a chance.
(@jpsim Take note of the feedback above if you pick up the tutorial again.)
",timanglade,jpsim
224,2014-05-01 17:52:46,"@mekjaer @jpsim @fguhit Can I get a review on this PR by lunch so we can merge before master diverges too much? Jenkins should pass now that JP has removed the unused parameter from master.
",timanglade,mekjaer
224,2014-05-01 17:52:46,"@mekjaer @jpsim @fguhit Can I get a review on this PR by lunch so we can merge before master diverges too much? Jenkins should pass now that JP has removed the unused parameter from master.
",timanglade,fguhit
223,2014-05-01 22:50:15,"Call for code review @fguhit @alazier @mekjaer 
",jpsim,alazier
223,2014-05-01 22:50:15,"Call for code review @fguhit @alazier @mekjaer 
",jpsim,fguhit
222,2014-04-28 06:01:33,"@alazier @astigsen better with this refactoring?
",jpsim,astigsen
219,2014-05-01 20:36:21,"@mekjaer @fguhit please review this one as well so @bmunkholm can merge when he lands
",timanglade,mekjaer
219,2014-05-01 20:36:21,"@mekjaer @fguhit please review this one as well so @bmunkholm can merge when he lands
",timanglade,fguhit
217,2014-05-02 03:09:17,"@timanglade Since we're on Appledocs now do I still have to update the yaml docs for the new methods?
",fyell,timanglade
217,2014-05-02 19:46:44,"@fguhit Yes, no need to update the YAML docs at the moment.
",timanglade,fguhit
216,2014-04-24 19:30:14,"There are a number of tests in `dynamic_table.mm` starting at line [541](https://github.com/Tightdb/tightdb_objc/blob/master/src/realm/objc/test/dynamic_table.mm#L541) that have been commented out.

These tests used to check if exceptions were thrown on several methods (`nameOfColumnWithIndex` out of bounds, etc.).

Those methods _don't_ throw exceptions, which is why they've been commented out. How do we feel about this? Should we update these methods throw exceptions? I think so.

There's an asana task to ""fix"" these tests [here](https://app.asana.com/0/861870036984/11693956162943/f)

Thoughts @fguhit @alazier @astigsen @pauldardeau?
",jpsim,astigsen
216,2014-04-24 19:30:14,"There are a number of tests in `dynamic_table.mm` starting at line [541](https://github.com/Tightdb/tightdb_objc/blob/master/src/realm/objc/test/dynamic_table.mm#L541) that have been commented out.

These tests used to check if exceptions were thrown on several methods (`nameOfColumnWithIndex` out of bounds, etc.).

Those methods _don't_ throw exceptions, which is why they've been commented out. How do we feel about this? Should we update these methods throw exceptions? I think so.

There's an asana task to ""fix"" these tests [here](https://app.asana.com/0/861870036984/11693956162943/f)

Thoughts @fguhit @alazier @astigsen @pauldardeau?
",jpsim,alazier
216,2014-04-24 19:30:14,"There are a number of tests in `dynamic_table.mm` starting at line [541](https://github.com/Tightdb/tightdb_objc/blob/master/src/realm/objc/test/dynamic_table.mm#L541) that have been commented out.

These tests used to check if exceptions were thrown on several methods (`nameOfColumnWithIndex` out of bounds, etc.).

Those methods _don't_ throw exceptions, which is why they've been commented out. How do we feel about this? Should we update these methods throw exceptions? I think so.

There's an asana task to ""fix"" these tests [here](https://app.asana.com/0/861870036984/11693956162943/f)

Thoughts @fguhit @alazier @astigsen @pauldardeau?
",jpsim,fguhit
216,2014-04-24 19:30:14,"There are a number of tests in `dynamic_table.mm` starting at line [541](https://github.com/Tightdb/tightdb_objc/blob/master/src/realm/objc/test/dynamic_table.mm#L541) that have been commented out.

These tests used to check if exceptions were thrown on several methods (`nameOfColumnWithIndex` out of bounds, etc.).

Those methods _don't_ throw exceptions, which is why they've been commented out. How do we feel about this? Should we update these methods throw exceptions? I think so.

There's an asana task to ""fix"" these tests [here](https://app.asana.com/0/861870036984/11693956162943/f)

Thoughts @fguhit @alazier @astigsen @pauldardeau?
",jpsim,pauldardeau
216,2014-04-24 19:33:24,"We can now ping @tightdb/ios and it'll ping everyone in that team!
",jpsim,tightdb
216,2014-04-24 21:45:55,"Ready for review @Tightdb/ios.
",jpsim,Tightdb
214,2014-05-01 17:02:58,"Ready for review @alazier @jpsim @astigsen 
",fyell,alazier
213,2014-04-23 23:26:03,"Fixes for all comments are now in. Anyone care to review?

@alazier for both conceptual and technical reasons, we can't move this functionality to table retrieval.

Conceptual: You might want some initial tables/data in your realm, you might want to create _many_ tables. It makes more sense to do this on the realm level than create many tables when getting a single one.

Technical: Performing write operations _after_ a realm has been created would require the realm to be ""reset"", i.e. fast-forwarded to the latest state. I'm sure @astigsen can come up with more reasons this would be difficult technically.
",jpsim,astigsen
212,2014-04-23 15:35:06,"@bmunkholm  @jpsim 
",kneth,bmunkholm
212,2014-04-23 15:35:06,"@bmunkholm  @jpsim 
",kneth,jpsim
210,2014-04-23 13:54:03,"@fguhit  @bmunkholm @mekjaer
",kspangsege,mekjaer
210,2014-04-23 13:54:03,"@fguhit  @bmunkholm @mekjaer
",kspangsege,bmunkholm
210,2014-04-23 13:54:03,"@fguhit  @bmunkholm @mekjaer
",kspangsege,fguhit
209,2014-04-23 09:01:13,"@JP: Please review, but I merge right away for the release.
",bmunkholm,JP
202,2014-04-22 09:23:30,"Capture of commits, registration of commits, access to commits so that it becomes possible to implement notifications.
@kspangsege 
",finnschiermer,kspangsege
199,2014-04-22 23:42:07,"CI passed on `c4b3614`, despite what Github will tell you. Call for merge review /cc @astigsen.

![image](https://cloud.githubusercontent.com/assets/474794/2772130/b0655932-ca77-11e3-98e8-9f089a2c0a4b.png)
",jpsim,astigsen
195,2014-04-17 23:04:29,"We should really support `@property`'s in the documentation generator. But this should work for now.
",jpsim,property
190,2014-04-16 19:44:06,"I've updated the project to use implicit transactions. The problem though is that I need a pretty ugly `dispatch_after` hack to give the `TDBSmartContext` enough time to propagate its changes. I'm hoping that @astigsen can point me in the right direction here.
",jpsim,astigsen
190,2014-04-17 17:22:39,"Thanks for those clarifications, @alazier. I had a nice chat with @astigsen this morning and it seems that my latest commit is probably the best way to do things using the current objc interface.

Also that once sync-style merge rules are in place, writes will also be implicit and we'll no longer need to update via notifications or to wrap the insert/delete in dispatch calls.
",jpsim,astigsen
186,2014-04-15 19:32:09,"Made changes per @kspangsege suggestions
",fyell,kspangsege
179,2014-04-10 08:48:50,"@bmunkholm @mekjaer 
",kneth,mekjaer
179,2014-04-10 08:48:50,"@bmunkholm @mekjaer 
",kneth,bmunkholm
178,2014-04-10 00:39:09,"... to reflect the equivalent recent change in the core library.

@emanuelez @pauldardeau 
",kspangsege,pauldardeau
178,2014-04-10 00:39:09,"... to reflect the equivalent recent change in the core library.

@emanuelez @pauldardeau 
",kspangsege,emanuelez
177,2014-04-10 00:02:15,"@kspangsege thanks for the info 
",fyell,kspangsege
177,2014-04-15 18:44:37,"@bmunkholm I added the unit tests and updated the release notes.
@kneth I can look into re-writing the set_columns method after this pull request.

If no one has anything else to add I will be merging this pull request in a few minutes. 
",fyell,kneth
174,2014-04-09 12:46:19,"@bmunkholm @kneth @kspangsege 
",mekjaer,bmunkholm
174,2014-04-09 12:46:19,"@bmunkholm @kneth @kspangsege 
",mekjaer,kspangsege
174,2014-04-09 12:46:19,"@bmunkholm @kneth @kspangsege 
",mekjaer,kneth
173,2014-04-08 15:29:47,"@kneth @bmunkholm 
",mekjaer,bmunkholm
173,2014-04-08 15:29:47,"@kneth @bmunkholm 
",mekjaer,kneth
171,2014-04-08 13:00:24,"@kspangsege see especially 
https://github.com/Tightdb/tightdb_objc/commit/9b9a90f5dc6e8ff02b7dcaa5c928b12d684aa906

@kspangsege @mekjaer @kneth 
",oleks,mekjaer
171,2014-04-08 13:00:24,"@kspangsege see especially 
https://github.com/Tightdb/tightdb_objc/commit/9b9a90f5dc6e8ff02b7dcaa5c928b12d684aa906

@kspangsege @mekjaer @kneth 
",oleks,kspangsege
171,2014-04-08 13:00:24,"@kspangsege see especially 
https://github.com/Tightdb/tightdb_objc/commit/9b9a90f5dc6e8ff02b7dcaa5c928b12d684aa906

@kspangsege @mekjaer @kneth 
",oleks,kneth
171,2014-04-08 15:54:23,"So if we change it, I will no longer have the ""luxury"" of running the test locally, and no way to run it from @home. From my point of view, at least, this is a very bad move.
",kspangsege,home
171,2014-04-16 18:02:34,"@fguhit it's also failing for me with `xcodebuild test` but it works with the following command:

`xcodebuild -scheme TightDbObjcDyn clean build test`
",jpsim,fguhit
170,2014-04-08 12:54:48,"This PR makes it possible to use objects derived from `NSObject` in `addRow`, `insertRow` and when updating entire rows.

See https://app.asana.com/0/10187674682516/10834189500863

@bmunkholm @mekjaer @astigsen 
",kneth,mekjaer
170,2014-04-08 12:54:48,"This PR makes it possible to use objects derived from `NSObject` in `addRow`, `insertRow` and when updating entire rows.

See https://app.asana.com/0/10187674682516/10834189500863

@bmunkholm @mekjaer @astigsen 
",kneth,bmunkholm
170,2014-04-08 12:54:48,"This PR makes it possible to use objects derived from `NSObject` in `addRow`, `insertRow` and when updating entire rows.

See https://app.asana.com/0/10187674682516/10834189500863

@bmunkholm @mekjaer @astigsen 
",kneth,astigsen
169,2014-04-08 13:07:10,"@kneth 
",mekjaer,kneth
168,2014-04-08 09:09:07,"This pull request brings along version 1 of 'implicit transactions'. It also includes an iPhone demo application (iOS 5.1, Xcode 4.4) under `examples/`.

A couple of things to note:
- Everything is done in the Objective-C binding, becuase it was the easiest way, and in some respects, also the best way.
- I have introduced a new class `TDBSmartContext` which so far has support only for `tableWithName:`, nothing else. That class name is up for discussion, of course.
- The demo app shows both the old and the new way of working with TightDB (reading only). It has two 'tabs', one called 'Old' and one called 'New'. There is only one database and one table in it. Both tabs show the same database. It also has a background thread that performs a conventional write transaction once every 5 seconds where the first, middle, and last table entry is updated with a new string reflecting the number of write transactions performed so far. Try it out if you can.

@finnschiermer @astigsen @bmunkholm @pauldardeau
",kspangsege,astigsen
168,2014-04-08 09:09:07,"This pull request brings along version 1 of 'implicit transactions'. It also includes an iPhone demo application (iOS 5.1, Xcode 4.4) under `examples/`.

A couple of things to note:
- Everything is done in the Objective-C binding, becuase it was the easiest way, and in some respects, also the best way.
- I have introduced a new class `TDBSmartContext` which so far has support only for `tableWithName:`, nothing else. That class name is up for discussion, of course.
- The demo app shows both the old and the new way of working with TightDB (reading only). It has two 'tabs', one called 'Old' and one called 'New'. There is only one database and one table in it. Both tabs show the same database. It also has a background thread that performs a conventional write transaction once every 5 seconds where the first, middle, and last table entry is updated with a new string reflecting the number of write transactions performed so far. Try it out if you can.

@finnschiermer @astigsen @bmunkholm @pauldardeau
",kspangsege,bmunkholm
168,2014-04-08 09:09:07,"This pull request brings along version 1 of 'implicit transactions'. It also includes an iPhone demo application (iOS 5.1, Xcode 4.4) under `examples/`.

A couple of things to note:
- Everything is done in the Objective-C binding, becuase it was the easiest way, and in some respects, also the best way.
- I have introduced a new class `TDBSmartContext` which so far has support only for `tableWithName:`, nothing else. That class name is up for discussion, of course.
- The demo app shows both the old and the new way of working with TightDB (reading only). It has two 'tabs', one called 'Old' and one called 'New'. There is only one database and one table in it. Both tabs show the same database. It also has a background thread that performs a conventional write transaction once every 5 seconds where the first, middle, and last table entry is updated with a new string reflecting the number of write transactions performed so far. Try it out if you can.

@finnschiermer @astigsen @bmunkholm @pauldardeau
",kspangsege,pauldardeau
168,2014-04-08 09:09:07,"This pull request brings along version 1 of 'implicit transactions'. It also includes an iPhone demo application (iOS 5.1, Xcode 4.4) under `examples/`.

A couple of things to note:
- Everything is done in the Objective-C binding, becuase it was the easiest way, and in some respects, also the best way.
- I have introduced a new class `TDBSmartContext` which so far has support only for `tableWithName:`, nothing else. That class name is up for discussion, of course.
- The demo app shows both the old and the new way of working with TightDB (reading only). It has two 'tabs', one called 'Old' and one called 'New'. There is only one database and one table in it. Both tabs show the same database. It also has a background thread that performs a conventional write transaction once every 5 seconds where the first, middle, and last table entry is updated with a new string reflecting the number of write transactions performed so far. Try it out if you can.

@finnschiermer @astigsen @bmunkholm @pauldardeau
",kspangsege,finnschiermer
168,2014-04-08 10:12:54,"Ouch, not ok to forget @mekjaer 
",kspangsege,mekjaer
167,2014-04-08 08:03:31,"`addRow` and `insertRow` are `void` functions. Moreover, errors are propagates as exceptions.

See https://app.asana.com/0/861870036984/11466591561921

@bmunkholm @mekjaer 
",kneth,mekjaer
167,2014-04-08 08:03:31,"`addRow` and `insertRow` are `void` functions. Moreover, errors are propagates as exceptions.

See https://app.asana.com/0/861870036984/11466591561921

@bmunkholm @mekjaer 
",kneth,bmunkholm
162,2014-04-07 14:00:04,"@oleks 
",kneth,oleks
161,2014-04-07 13:45:26,"This is a tutorial which has been structured a bit different from the general template.

@bmunkholm @mekjaer 
",kneth,mekjaer
161,2014-04-07 13:45:26,"This is a tutorial which has been structured a bit different from the general template.

@bmunkholm @mekjaer 
",kneth,bmunkholm
160,2014-04-07 09:36:28,"@mekjaer 
",kneth,mekjaer
157,2014-04-04 07:49:10,"@bmunkholm @kneth 
",mekjaer,bmunkholm
157,2014-04-04 07:49:10,"@bmunkholm @kneth 
",mekjaer,kneth
155,2014-04-03 13:44:08,"NSNotFound is commonly used in the Cocoa framework to say that an element can't be found.

@mekjaer @bmunkholm 
",kneth,mekjaer
155,2014-04-03 13:44:08,"NSNotFound is commonly used in the Cocoa framework to say that an element can't be found.

@mekjaer @bmunkholm 
",kneth,bmunkholm
151,2014-04-03 09:21:39,"The validation of data for Mixed typed columns has been very relaxed (“everything goes”). This is an attempt to restrict what the user can use as values.

See https://app.asana.com/0/1442494018425/11240103084792

@mekjaer @bmunkholm 
",kneth,mekjaer
151,2014-04-03 09:21:39,"The validation of data for Mixed typed columns has been very relaxed (“everything goes”). This is an attempt to restrict what the user can use as values.

See https://app.asana.com/0/1442494018425/11240103084792

@mekjaer @bmunkholm 
",kneth,bmunkholm
150,2014-04-03 08:52:19,"@bmunkholm @kneth 
",mekjaer,bmunkholm
150,2014-04-03 08:52:19,"@bmunkholm @kneth 
",mekjaer,kneth
149,2014-04-02 13:58:50,"@bmunkholm @kneth 
",mekjaer,bmunkholm
149,2014-04-02 13:58:50,"@bmunkholm @kneth 
",mekjaer,kneth
148,2014-04-02 12:59:44,"@astigsen @alazier @pauldardeau @kspangsege @mekjaer 
",kneth,astigsen
148,2014-04-02 12:59:44,"@astigsen @alazier @pauldardeau @kspangsege @mekjaer 
",kneth,alazier
148,2014-04-02 12:59:44,"@astigsen @alazier @pauldardeau @kspangsege @mekjaer 
",kneth,kspangsege
148,2014-04-02 12:59:44,"@astigsen @alazier @pauldardeau @kspangsege @mekjaer 
",kneth,pauldardeau
148,2014-04-02 12:59:44,"@astigsen @alazier @pauldardeau @kspangsege @mekjaer 
",kneth,mekjaer
147,2014-04-02 10:51:30,"@bmunkholm @kspangsege @kneth 
",mekjaer,bmunkholm
147,2014-04-02 10:51:30,"@bmunkholm @kspangsege @kneth 
",mekjaer,kspangsege
147,2014-04-02 10:51:30,"@bmunkholm @kspangsege @kneth 
",mekjaer,kneth
145,2014-04-01 20:45:59,"Updated various minor things in the examples.
Also removed the @autoreleasepool from all examples to unindent the code for better readability on the web. Unfortunately that also makes the diff rather big on github. If viewed in a proper diff tool that ignores whitespace changes, it's easier to see the real differences. 
",bmunkholm,autoreleasepool
141,2014-04-01 08:49:43,"We have seen that a unit test fails sporadicly. It seems that setting a timestamp in a date column is done wrong.

@emanuelez @mekjaer @bmunkholm 
",kneth,mekjaer
141,2014-04-01 08:49:43,"We have seen that a unit test fails sporadicly. It seems that setting a timestamp in a date column is done wrong.

@emanuelez @mekjaer @bmunkholm 
",kneth,bmunkholm
141,2014-04-01 08:49:43,"We have seen that a unit test fails sporadicly. It seems that setting a timestamp in a date column is done wrong.

@emanuelez @mekjaer @bmunkholm 
",kneth,emanuelez
139,2014-03-31 13:11:18,"@kneth 
",mekjaer,kneth
138,2014-03-31 14:01:09,"@bmunkholm 
",mekjaer,bmunkholm
138,2014-04-09 09:10:07,"@bmunkholm @kneth 
",mekjaer,kneth
134,2014-03-27 17:00:50,"This builds an XCode project in the directory test-core containing Tightdb core sources and test cases. The use of the XCode project is to run the core unit tests on an iOS Simulator or device.

When located in the test-core subdirectory, the test may be run like so:

  $ xcodebuild test -scheme iOSTestCoreApp -destination ""platform=iOS Simulator,name=iPad""
  $ xcodebuild test -scheme iOSTestCoreApp -destination ""platform=iOS,name=tightdb's iPad""

TODO:
- a major clean up of the shell code.
- get it to run in a simulator - for some interesting reason, this is different from a device.

@kspangsege @bmunkholm @emanuelez 
",oleks,bmunkholm
134,2014-03-27 17:00:50,"This builds an XCode project in the directory test-core containing Tightdb core sources and test cases. The use of the XCode project is to run the core unit tests on an iOS Simulator or device.

When located in the test-core subdirectory, the test may be run like so:

  $ xcodebuild test -scheme iOSTestCoreApp -destination ""platform=iOS Simulator,name=iPad""
  $ xcodebuild test -scheme iOSTestCoreApp -destination ""platform=iOS,name=tightdb's iPad""

TODO:
- a major clean up of the shell code.
- get it to run in a simulator - for some interesting reason, this is different from a device.

@kspangsege @bmunkholm @emanuelez 
",oleks,kspangsege
134,2014-03-27 17:00:50,"This builds an XCode project in the directory test-core containing Tightdb core sources and test cases. The use of the XCode project is to run the core unit tests on an iOS Simulator or device.

When located in the test-core subdirectory, the test may be run like so:

  $ xcodebuild test -scheme iOSTestCoreApp -destination ""platform=iOS Simulator,name=iPad""
  $ xcodebuild test -scheme iOSTestCoreApp -destination ""platform=iOS,name=tightdb's iPad""

TODO:
- a major clean up of the shell code.
- get it to run in a simulator - for some interesting reason, this is different from a device.

@kspangsege @bmunkholm @emanuelez 
",oleks,emanuelez
132,2014-03-27 14:59:52,"Instead of having multiple get and set methods, it is easy to have just one `set` and one `get`. 

An example of the `set` method:



and an example of the `get` method:



@astigsen @bmunkholm @mekjaer @pauldardeau @alazier 
",kneth,astigsen
132,2014-03-27 14:59:52,"Instead of having multiple get and set methods, it is easy to have just one `set` and one `get`. 

An example of the `set` method:



and an example of the `get` method:



@astigsen @bmunkholm @mekjaer @pauldardeau @alazier 
",kneth,bmunkholm
132,2014-03-27 14:59:52,"Instead of having multiple get and set methods, it is easy to have just one `set` and one `get`. 

An example of the `set` method:



and an example of the `get` method:



@astigsen @bmunkholm @mekjaer @pauldardeau @alazier 
",kneth,alazier
132,2014-03-27 14:59:52,"Instead of having multiple get and set methods, it is easy to have just one `set` and one `get`. 

An example of the `set` method:



and an example of the `get` method:



@astigsen @bmunkholm @mekjaer @pauldardeau @alazier 
",kneth,pauldardeau
132,2014-03-27 14:59:52,"Instead of having multiple get and set methods, it is easy to have just one `set` and one `get`. 

An example of the `set` method:



and an example of the `get` method:



@astigsen @bmunkholm @mekjaer @pauldardeau @alazier 
",kneth,mekjaer
131,2014-03-27 09:50:59,"After removal of `group.h` from the public interface, `sh build.sh test-installed` has been failing (see https://app.asana.com/0/search/11240103084782/11156922587634).

The test has been rewritten so it only uses features in the public interface.

@mekjaer @kspangsege 
",kneth,mekjaer
131,2014-03-27 09:50:59,"After removal of `group.h` from the public interface, `sh build.sh test-installed` has been failing (see https://app.asana.com/0/search/11240103084782/11156922587634).

The test has been rewritten so it only uses features in the public interface.

@mekjaer @kspangsege 
",kneth,kspangsege
130,2014-03-27 11:57:28,"@bmunkholm @kneth 
",mekjaer,bmunkholm
130,2014-03-27 11:57:28,"@bmunkholm @kneth 
",mekjaer,kneth
128,2014-03-26 11:22:48,"@bmunkholm 
",mekjaer,bmunkholm
124,2014-03-25 15:42:48,"The `TDBMixed` class has been removed and Cocoa classes are used instead.

Some work on subtables has to be done, and documentation must be updated.

@astigsen @kspangsege @bmunkholm @mekjaer 
",kneth,astigsen
124,2014-03-25 15:42:48,"The `TDBMixed` class has been removed and Cocoa classes are used instead.

Some work on subtables has to be done, and documentation must be updated.

@astigsen @kspangsege @bmunkholm @mekjaer 
",kneth,bmunkholm
124,2014-03-25 15:42:48,"The `TDBMixed` class has been removed and Cocoa classes are used instead.

Some work on subtables has to be done, and documentation must be updated.

@astigsen @kspangsege @bmunkholm @mekjaer 
",kneth,kspangsege
124,2014-03-25 15:42:48,"The `TDBMixed` class has been removed and Cocoa classes are used instead.

Some work on subtables has to be done, and documentation must be updated.

@astigsen @kspangsege @bmunkholm @mekjaer 
",kneth,mekjaer
120,2014-03-25 08:38:48,"As `git mv tightdb.h Tightdb.h` doesn't work on OS X due to the file system not being case sensitive, we need to do two moves here.

@kspangsege 
",kneth,kspangsege
119,2014-04-07 17:44:50,"@emanuelez @pauldardeau @kspangsege What is the status on this one? We are onboarding more and more people and it would be good to get this in soonish, if at all possible.
",timanglade,kspangsege
119,2014-04-08 01:08:53,"I'm the hold up on this. I got it all implemented but then saw some very strange and inconsistent results in testing. The problem is that the 'load' method of the new category is not called consistently. It may be best just to add the hooks directly into the ObjC binding instead of doing this runtime grafting with a new category. If there are no objections I can get this put in tomorrow morning.

On Apr 7, 2014, at 12:44 PM, Tim Anglade notifications@github.com wrote:

> @emanuelez @pauldardeau @kspangsege What is the status on this one? We are onboarding more and more people and it would be good to get this in soonish, if at all possible.
> 
> —
> Reply to this email directly or view it on GitHub.
",pauldardeau,kspangsege
119,2014-04-16 20:52:08,"@astigsen can you review + merge when you get a chance?
",timanglade,astigsen
119,2014-04-18 07:31:23,"Thanks Paul.
We need to have the user documentation ready as well. Where should what be
written - very specifically?
- update of build flags.
- a usernote somewhere about this 'temporary feature', how they disable it
  and why it's good for them.

We don't want to publish the README you added as it is. It's an internal
note. But maybe we would want a userlevel note about this either in the
distribution or on the web. @Tim, maybe you can help out to figure out
where to put what documentation. I'm afraid users don't like this. We need
to ""sell"" this feature as a help to them.

// Brian

On Thu, Apr 17, 2014 at 3:30 AM, pauldardeau notifications@github.comwrote:

> I answered Brian's questions/comments in github comments and added the
> same text to a new README_crash_reporting.txt file. It's ready for review.
> Please let me know if you have any questions.
> 
> Special thanks to JP for finding the source of the linker error!
> 
> Regards,
> -paul
> 
> On Apr 16, 2014, at 4:34 PM, Tim Anglade notifications@github.com
> wrote:
> 
> > @pauldardeau can you take a look at Brian's comments and update the PR?
> > #119 (comment)
> > 
> > Strongly agree on the need to document how users would be able to
> > disable this feature.
> > 
> > ## 
> > 
> > Reply to this email directly or view it on GitHub.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/119#issuecomment-40671853
> .
",bmunkholm,Tim
119,2014-05-05 17:43:38,"@jpsim @fguhit Can I get a sanity check / design review of this feature from you?
- Is this something you think will tremendously turn off developers?
- Can we have that in even if we go straight to a public launch?
- Does the current implementation impose limits that are likely to be a problem for people building apps?

Thanks
",timanglade,fguhit
117,2014-03-24 16:36:33,"@bmunkholm @kneth 
",mekjaer,bmunkholm
117,2014-03-24 16:36:33,"@bmunkholm @kneth 
",mekjaer,kneth
113,2014-03-22 15:15:17,"Various improvements for working with tables.
- Transactions directly on named tables
- Create table with initial schema (so you don't have to build it up manually with method calls)
- Shared protocol between Table and View, so they can easier be used interchangeably.

@bmunkholm @mekjaer @kneth @pauldardeau @alazier
",astigsen,mekjaer
113,2014-03-22 15:15:17,"Various improvements for working with tables.
- Transactions directly on named tables
- Create table with initial schema (so you don't have to build it up manually with method calls)
- Shared protocol between Table and View, so they can easier be used interchangeably.

@bmunkholm @mekjaer @kneth @pauldardeau @alazier
",astigsen,bmunkholm
113,2014-03-22 15:15:17,"Various improvements for working with tables.
- Transactions directly on named tables
- Create table with initial schema (so you don't have to build it up manually with method calls)
- Shared protocol between Table and View, so they can easier be used interchangeably.

@bmunkholm @mekjaer @kneth @pauldardeau @alazier
",astigsen,alazier
113,2014-03-22 15:15:17,"Various improvements for working with tables.
- Transactions directly on named tables
- Create table with initial schema (so you don't have to build it up manually with method calls)
- Shared protocol between Table and View, so they can easier be used interchangeably.

@bmunkholm @mekjaer @kneth @pauldardeau @alazier
",astigsen,pauldardeau
113,2014-03-22 15:15:17,"Various improvements for working with tables.
- Transactions directly on named tables
- Create table with initial schema (so you don't have to build it up manually with method calls)
- Shared protocol between Table and View, so they can easier be used interchangeably.

@bmunkholm @mekjaer @kneth @pauldardeau @alazier
",astigsen,kneth
111,2014-03-21 15:00:27,"@bmunkholm 
",mekjaer,bmunkholm
110,2014-03-21 13:45:00,"I have removed the TDBBinary class by using NSData everywhere.

See https://app.asana.com/0/1442494018425/10992641642762

@astigsen @bmunkholm @mekjaer 
",kneth,astigsen
110,2014-03-21 13:45:00,"I have removed the TDBBinary class by using NSData everywhere.

See https://app.asana.com/0/1442494018425/10992641642762

@astigsen @bmunkholm @mekjaer 
",kneth,bmunkholm
110,2014-03-21 13:45:00,"I have removed the TDBBinary class by using NSData everywhere.

See https://app.asana.com/0/1442494018425/10992641642762

@astigsen @bmunkholm @mekjaer 
",kneth,mekjaer
106,2014-03-21 10:23:20,"See https://app.asana.com/0/1442494018425/11100540709889

@bmunkholm @mekjaer 
",kneth,mekjaer
106,2014-03-21 10:23:20,"See https://app.asana.com/0/1442494018425/11100540709889

@bmunkholm @mekjaer 
",kneth,bmunkholm
104,2014-03-20 18:32:05,"One of the key pieces of feedback we got from Ari and Paul was that the headers should be thought of as part of our documentation. It should be easy to take a quick look at the main headers and get an overview over what the classes were capable of.

I have reordered the selectors in the headers for the top-level classes (TDBContext and TDBTable), so that they are more readably and so that they present the selectors more or less in the order you would expect to need them.

There is also a huge number of selector we could remove now that we have support for object subscripting, so for now I have just moved them to the bottom.

@bm @mekjaer @kneth @alazier @pauldardeau 
",astigsen,mekjaer
104,2014-03-20 18:32:05,"One of the key pieces of feedback we got from Ari and Paul was that the headers should be thought of as part of our documentation. It should be easy to take a quick look at the main headers and get an overview over what the classes were capable of.

I have reordered the selectors in the headers for the top-level classes (TDBContext and TDBTable), so that they are more readably and so that they present the selectors more or less in the order you would expect to need them.

There is also a huge number of selector we could remove now that we have support for object subscripting, so for now I have just moved them to the bottom.

@bm @mekjaer @kneth @alazier @pauldardeau 
",astigsen,alazier
104,2014-03-20 18:32:05,"One of the key pieces of feedback we got from Ari and Paul was that the headers should be thought of as part of our documentation. It should be easy to take a quick look at the main headers and get an overview over what the classes were capable of.

I have reordered the selectors in the headers for the top-level classes (TDBContext and TDBTable), so that they are more readably and so that they present the selectors more or less in the order you would expect to need them.

There is also a huge number of selector we could remove now that we have support for object subscripting, so for now I have just moved them to the bottom.

@bm @mekjaer @kneth @alazier @pauldardeau 
",astigsen,pauldardeau
104,2014-03-20 18:32:05,"One of the key pieces of feedback we got from Ari and Paul was that the headers should be thought of as part of our documentation. It should be easy to take a quick look at the main headers and get an overview over what the classes were capable of.

I have reordered the selectors in the headers for the top-level classes (TDBContext and TDBTable), so that they are more readably and so that they present the selectors more or less in the order you would expect to need them.

There is also a huge number of selector we could remove now that we have support for object subscripting, so for now I have just moved them to the bottom.

@bm @mekjaer @kneth @alazier @pauldardeau 
",astigsen,bm
104,2014-03-20 18:32:05,"One of the key pieces of feedback we got from Ari and Paul was that the headers should be thought of as part of our documentation. It should be easy to take a quick look at the main headers and get an overview over what the classes were capable of.

I have reordered the selectors in the headers for the top-level classes (TDBContext and TDBTable), so that they are more readably and so that they present the selectors more or less in the order you would expect to need them.

There is also a huge number of selector we could remove now that we have support for object subscripting, so for now I have just moved them to the bottom.

@bm @mekjaer @kneth @alazier @pauldardeau 
",astigsen,kneth
102,2014-03-20 13:07:14,"The files names are renamed to matched class names.

@bmunkholm @mekjaer 
",kneth,mekjaer
102,2014-03-20 13:07:14,"The files names are renamed to matched class names.

@bmunkholm @mekjaer 
",kneth,bmunkholm
101,2014-03-20 10:22:08,"Renaming shared group and group. The description of the new classes is updated.

@bmunkholm @mekjaer 
",kneth,mekjaer
101,2014-03-20 10:22:08,"Renaming shared group and group. The description of the new classes is updated.

@bmunkholm @mekjaer 
",kneth,bmunkholm
100,2014-03-20 08:41:57,"Missing test case for firstRow and refdoc and changes.txt
@kspangsege - More like it? :)
",mekjaer,kspangsege
99,2014-03-20 08:18:41,"@bmunkholm @kneth Let's get this merged
",mekjaer,bmunkholm
99,2014-03-20 08:18:41,"@bmunkholm @kneth Let's get this merged
",mekjaer,kneth
96,2014-03-19 15:44:41,"@bmunkholm  @mekjaer 
",kneth,mekjaer
96,2014-03-19 15:44:41,"@bmunkholm  @mekjaer 
",kneth,bmunkholm
90,2014-03-19 12:05:24,"@emanuelez 
",kneth,emanuelez
78,2014-03-17 14:51:22,"See https://app.asana.com/0/10187674682516/10953200658501

@mekjaer @astigsen 
",kneth,mekjaer
78,2014-03-17 14:51:22,"See https://app.asana.com/0/10187674682516/10953200658501

@mekjaer @astigsen 
",kneth,astigsen
75,2014-03-14 22:02:58,"@bmunkholm @kneth @mekjaer 
",astigsen,mekjaer
75,2014-03-14 22:02:58,"@bmunkholm @kneth @mekjaer 
",astigsen,bmunkholm
75,2014-03-14 22:02:58,"@bmunkholm @kneth @mekjaer 
",astigsen,kneth
70,2014-03-14 12:48:12,"@bmunkholm @kneth 
",mekjaer,bmunkholm
70,2014-03-14 12:48:12,"@bmunkholm @kneth 
",mekjaer,kneth
67,2014-03-14 08:40:18,"@bmunkholm
",kneth,bmunkholm
66,2014-03-13 21:29:14,"Guys, as you know, I find the use of the `TDB` prefix as something of an abomination.

On the other hand, I understand that many of you guys like it. Tim has offered the following explanation of his point of view:

> The lack of namespacing in Objective-C clearly sucks, but I’m actually hugely in favor of prefixing with just “TDB”: it’s one of those things that make you look/feel really native to iOS and that is a huge thing we need to accomplish at this point. It’s also the rule of law as far as Apple is concerned. Additionally, it does not matter so much that someone else may be using “TDB”, as this will not create hard collisions in and of itself; we would have a real problem if there were already Objective-C classes called TDBTable (or TDBContext, etc.) in common usage, which summary searches on GitHub and Google indicates is not likely.

I understand this concern, but I would like to offer some additional thoughts that we might want to weigh in:
- Some will be angry with us, because we steel their prefix. Note the aggravated responses in http://cocoadev.com/ChooseYourOwnPrefix.
- Some will see it as anti-collaborative and dogmatic. I would.
- If we explain why we use `Tightdb` rather than an acronym, most developers will understand it, and appreciate it. We could even score extra points. See below for a concrete proposal of such an explanation.
- As long as the decision is appreciated by the experienced segment, other developers will agree.
- The use of acronyms is probably not ""the rule of law"". See for example http://cocoadev.com/ChooseYourOwnPrefix, and note how they explicitly point out that the use of an acronym is **not** mandatory.
- It is hell from a programmer when he is hit by name collisions.
- Look around you, and see how every other popular language out there has understood that name spaces are necessary.

Now, if by any chance I can convince you to stay on `Tightdb`, I propose that we add something like the following to our introductory text:

> Note that the TightDB framework uses `Tightdb` as a prefix for its class names. We understand that it has been customary in Cocoa to use a short capitalized acronym as prefix, but we see this practice as problematic in that it becomes almost impossible for framework vendors not to collide with each other.

@timanglade @astigsen @mekjaer @bmunkholm 
",kspangsege,astigsen
66,2014-03-13 21:29:14,"Guys, as you know, I find the use of the `TDB` prefix as something of an abomination.

On the other hand, I understand that many of you guys like it. Tim has offered the following explanation of his point of view:

> The lack of namespacing in Objective-C clearly sucks, but I’m actually hugely in favor of prefixing with just “TDB”: it’s one of those things that make you look/feel really native to iOS and that is a huge thing we need to accomplish at this point. It’s also the rule of law as far as Apple is concerned. Additionally, it does not matter so much that someone else may be using “TDB”, as this will not create hard collisions in and of itself; we would have a real problem if there were already Objective-C classes called TDBTable (or TDBContext, etc.) in common usage, which summary searches on GitHub and Google indicates is not likely.

I understand this concern, but I would like to offer some additional thoughts that we might want to weigh in:
- Some will be angry with us, because we steel their prefix. Note the aggravated responses in http://cocoadev.com/ChooseYourOwnPrefix.
- Some will see it as anti-collaborative and dogmatic. I would.
- If we explain why we use `Tightdb` rather than an acronym, most developers will understand it, and appreciate it. We could even score extra points. See below for a concrete proposal of such an explanation.
- As long as the decision is appreciated by the experienced segment, other developers will agree.
- The use of acronyms is probably not ""the rule of law"". See for example http://cocoadev.com/ChooseYourOwnPrefix, and note how they explicitly point out that the use of an acronym is **not** mandatory.
- It is hell from a programmer when he is hit by name collisions.
- Look around you, and see how every other popular language out there has understood that name spaces are necessary.

Now, if by any chance I can convince you to stay on `Tightdb`, I propose that we add something like the following to our introductory text:

> Note that the TightDB framework uses `Tightdb` as a prefix for its class names. We understand that it has been customary in Cocoa to use a short capitalized acronym as prefix, but we see this practice as problematic in that it becomes almost impossible for framework vendors not to collide with each other.

@timanglade @astigsen @mekjaer @bmunkholm 
",kspangsege,bmunkholm
66,2014-03-13 21:29:14,"Guys, as you know, I find the use of the `TDB` prefix as something of an abomination.

On the other hand, I understand that many of you guys like it. Tim has offered the following explanation of his point of view:

> The lack of namespacing in Objective-C clearly sucks, but I’m actually hugely in favor of prefixing with just “TDB”: it’s one of those things that make you look/feel really native to iOS and that is a huge thing we need to accomplish at this point. It’s also the rule of law as far as Apple is concerned. Additionally, it does not matter so much that someone else may be using “TDB”, as this will not create hard collisions in and of itself; we would have a real problem if there were already Objective-C classes called TDBTable (or TDBContext, etc.) in common usage, which summary searches on GitHub and Google indicates is not likely.

I understand this concern, but I would like to offer some additional thoughts that we might want to weigh in:
- Some will be angry with us, because we steel their prefix. Note the aggravated responses in http://cocoadev.com/ChooseYourOwnPrefix.
- Some will see it as anti-collaborative and dogmatic. I would.
- If we explain why we use `Tightdb` rather than an acronym, most developers will understand it, and appreciate it. We could even score extra points. See below for a concrete proposal of such an explanation.
- As long as the decision is appreciated by the experienced segment, other developers will agree.
- The use of acronyms is probably not ""the rule of law"". See for example http://cocoadev.com/ChooseYourOwnPrefix, and note how they explicitly point out that the use of an acronym is **not** mandatory.
- It is hell from a programmer when he is hit by name collisions.
- Look around you, and see how every other popular language out there has understood that name spaces are necessary.

Now, if by any chance I can convince you to stay on `Tightdb`, I propose that we add something like the following to our introductory text:

> Note that the TightDB framework uses `Tightdb` as a prefix for its class names. We understand that it has been customary in Cocoa to use a short capitalized acronym as prefix, but we see this practice as problematic in that it becomes almost impossible for framework vendors not to collide with each other.

@timanglade @astigsen @mekjaer @bmunkholm 
",kspangsege,timanglade
64,2014-03-12 00:59:33,"I have added initial support for Object Subscripting on cursors so we can play with the syntax.

It mainly need some more error checking. When we get support in the basic table methods for taking native obj-c types like NSData as values, it should be easy to transition it to using them directly.

One note about the cursor object in general. I noticed that it holds a TightdbTable reference (i.e. the obj.c object) rather than a direct TableRef. I wonder if that is needed? It is a bit of unneeded overhead to have to do everything through obj-c selectors if we could have used direct method calls. 

@bmunkholm @mekjaer @kneth
",astigsen,mekjaer
64,2014-03-12 00:59:33,"I have added initial support for Object Subscripting on cursors so we can play with the syntax.

It mainly need some more error checking. When we get support in the basic table methods for taking native obj-c types like NSData as values, it should be easy to transition it to using them directly.

One note about the cursor object in general. I noticed that it holds a TightdbTable reference (i.e. the obj.c object) rather than a direct TableRef. I wonder if that is needed? It is a bit of unneeded overhead to have to do everything through obj-c selectors if we could have used direct method calls. 

@bmunkholm @mekjaer @kneth
",astigsen,bmunkholm
64,2014-03-12 00:59:33,"I have added initial support for Object Subscripting on cursors so we can play with the syntax.

It mainly need some more error checking. When we get support in the basic table methods for taking native obj-c types like NSData as values, it should be easy to transition it to using them directly.

One note about the cursor object in general. I noticed that it holds a TightdbTable reference (i.e. the obj.c object) rather than a direct TableRef. I wonder if that is needed? It is a bit of unneeded overhead to have to do everything through obj-c selectors if we could have used direct method calls. 

@bmunkholm @mekjaer @kneth
",astigsen,kneth
63,2014-03-11 15:18:29,"Hey guys

@kspangsege, @bmunkholm and I spend 3 hours today in retreat and looked over most of our methods in objc.
Our renaming suggestions are in this PR. Please take a look at the raw files instead of the diffs and see it as a fresh new start. Remember to put on your objc-hat!

Please give us your feedback, so we can implement the changes in the current release.
Of course nothing is fixed in stone, but a least we will have something of a certain standard

NB: Renaming of Group and SharedGroup are not part of this PR
",mekjaer,bmunkholm
63,2014-03-11 15:18:29,"Hey guys

@kspangsege, @bmunkholm and I spend 3 hours today in retreat and looked over most of our methods in objc.
Our renaming suggestions are in this PR. Please take a look at the raw files instead of the diffs and see it as a fresh new start. Remember to put on your objc-hat!

Please give us your feedback, so we can implement the changes in the current release.
Of course nothing is fixed in stone, but a least we will have something of a certain standard

NB: Renaming of Group and SharedGroup are not part of this PR
",mekjaer,kspangsege
63,2014-03-12 16:04:03,"@bmunkholm @kspangsege 
I omitted rename of prefix Tightdb to TDB in this PR to make implementation and review happen in smaller steps.
TDB-prefix rename is on it's way in an upcoming PR
",mekjaer,bmunkholm
62,2014-03-11 10:01:06,"@kspangsege @mekjaer 
",emanuelez,mekjaer
62,2014-03-11 10:01:06,"@kspangsege @mekjaer 
",emanuelez,kspangsege
61,2014-03-10 12:18:46,"Fixing bug when inserting subtables: see https://app.asana.com/0/1442494018425/10791157417807

Preparing inserting subtable in mixed (not yet complete).

@bmunkholm @mekjaer @astigsen 
",kneth,mekjaer
61,2014-03-10 12:18:46,"Fixing bug when inserting subtables: see https://app.asana.com/0/1442494018425/10791157417807

Preparing inserting subtable in mixed (not yet complete).

@bmunkholm @mekjaer @astigsen 
",kneth,bmunkholm
61,2014-03-10 12:18:46,"Fixing bug when inserting subtables: see https://app.asana.com/0/1442494018425/10791157417807

Preparing inserting subtable in mixed (not yet complete).

@bmunkholm @mekjaer @astigsen 
",kneth,astigsen
61,2014-03-11 13:55:04,"@bmunkholm Can you review this, so we can get this merged
",mekjaer,bmunkholm
61,2014-03-11 14:22:02,"The fix for inserting subtables should have been merged before I pushed the other commits. The NSDictionary stuff is not yet ready as @astigsen points out. We need to figure out how we insert subtables in a mixed column. My proposal is that a subtable includes a `TightdbDescriptor`:


",kneth,astigsen
61,2014-03-12 06:30:48,"> We need to figure out how we insert subtables in a mixed column.

In literals I think that subtables should be represented either by a full
table or maybe by an empty list to indicate an empty table (which in mixed
values would be a table even without columns).

On Tue, Mar 11, 2014 at 7:22 AM, Kenneth Geisshirt <notifications@github.com

> wrote:
> 
> The fix for inserting subtables should have been merged before I pushed
> the other commits. The NSDictionary stuff is not yet ready as @astigsenhttps://github.com/astigsenpoints out. We need to figure out how we insert subtables in a mixed
> column. My proposal is that a subtable includes a TightdbDescriptor:
> 
> TightdbDescriptor *desc = [TightdbDescriptor alloc];
> [desc addColumnWithType:tightdb_Int andName:@""first""];
> [table appendRow:@[@desc, @[@1]];
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/61#issuecomment-37300430
> .
",astigsen,astigsenhttps
61,2014-03-12 06:30:48,"> We need to figure out how we insert subtables in a mixed column.

In literals I think that subtables should be represented either by a full
table or maybe by an empty list to indicate an empty table (which in mixed
values would be a table even without columns).

On Tue, Mar 11, 2014 at 7:22 AM, Kenneth Geisshirt <notifications@github.com

> wrote:
> 
> The fix for inserting subtables should have been merged before I pushed
> the other commits. The NSDictionary stuff is not yet ready as @astigsenhttps://github.com/astigsenpoints out. We need to figure out how we insert subtables in a mixed
> column. My proposal is that a subtable includes a TightdbDescriptor:
> 
> TightdbDescriptor *desc = [TightdbDescriptor alloc];
> [desc addColumnWithType:tightdb_Int andName:@""first""];
> [table appendRow:@[@desc, @[@1]];
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/61#issuecomment-37300430
> .
",astigsen,desc
60,2014-03-11 14:43:26,"@bmunkholm @kspangsege 
",mekjaer,bmunkholm
60,2014-03-11 14:43:26,"@bmunkholm @kspangsege 
",mekjaer,kspangsege
55,2014-03-07 11:19:49,"I have added a little warning that we are working on the interface in the near future.

@bmunkholm 
",kneth,bmunkholm
53,2014-03-07 05:08:18,"Added support for using object subscripting (bracket syntax to access rows) on table.

For now it is only for reading values, but it will be easy to combine it with object literals to allow setting of rows the same way.

@kneth @mekjaer @bmunkholm 
",astigsen,mekjaer
53,2014-03-07 05:08:18,"Added support for using object subscripting (bracket syntax to access rows) on table.

For now it is only for reading values, but it will be easy to combine it with object literals to allow setting of rows the same way.

@kneth @mekjaer @bmunkholm 
",astigsen,bmunkholm
53,2014-03-07 05:08:18,"Added support for using object subscripting (bracket syntax to access rows) on table.

For now it is only for reading values, but it will be easy to combine it with object literals to allow setting of rows the same way.

@kneth @mekjaer @bmunkholm 
",astigsen,kneth
52,2014-03-06 14:48:22,"Restoring tutorial.m (symlink) so tutorial generator works.

@bmunkholm @mekjaer 
",kneth,mekjaer
52,2014-03-06 14:48:22,"Restoring tutorial.m (symlink) so tutorial generator works.

@bmunkholm @mekjaer 
",kneth,bmunkholm
51,2014-03-06 14:36:44,"@kspangsege @bmunkholm 
",mekjaer,bmunkholm
51,2014-03-06 14:36:44,"@kspangsege @bmunkholm 
",mekjaer,kspangsege
51,2014-03-07 11:01:52,"@bmunkholm 
",mekjaer,bmunkholm
50,2014-03-06 13:44:39,"Depends on #42 .

@kneth @bmunkholm @kspangsege @mekjaer 
",oleks,mekjaer
50,2014-03-06 13:44:39,"Depends on #42 .

@kneth @bmunkholm @kspangsege @mekjaer 
",oleks,bmunkholm
50,2014-03-06 13:44:39,"Depends on #42 .

@kneth @bmunkholm @kspangsege @mekjaer 
",oleks,kspangsege
50,2014-03-06 13:44:39,"Depends on #42 .

@kneth @bmunkholm @kspangsege @mekjaer 
",oleks,kneth
47,2014-03-05 14:53:44,"@bmunkholm @kspangsege 
",mekjaer,bmunkholm
47,2014-03-05 14:53:44,"@bmunkholm @kspangsege 
",mekjaer,kspangsege
46,2014-03-04 15:30:40,"@bmunkholm @kspangsege 
",mekjaer,bmunkholm
46,2014-03-04 15:30:40,"@bmunkholm @kspangsege 
",mekjaer,kspangsege
42,2014-03-03 10:47:52,"Using NSArray and NSDictionary to append rows to tables will make objective c programs more readable.

The implementation is heavily inspired by our Python binding.

@ks @mekjaer @astigsen 
",kneth,mekjaer
42,2014-03-03 10:47:52,"Using NSArray and NSDictionary to append rows to tables will make objective c programs more readable.

The implementation is heavily inspired by our Python binding.

@ks @mekjaer @astigsen 
",kneth,astigsen
42,2014-03-03 10:47:52,"Using NSArray and NSDictionary to append rows to tables will make objective c programs more readable.

The implementation is heavily inspired by our Python binding.

@ks @mekjaer @astigsen 
",kneth,ks
41,2014-02-28 15:44:28,"@mekjaer 
",kspangsege,mekjaer
39,2014-02-28 13:29:42,"setIndex, hasIndex, and the aggregates SEGFAULT, some other methods fail to throw appropriate exceptions.

I haven't updated the documentation either, so this is more what I, personally, think should happen in certain error cases.

@bmunkholm @kspangsege @mekjaer @kneth 
",oleks,mekjaer
39,2014-02-28 13:29:42,"setIndex, hasIndex, and the aggregates SEGFAULT, some other methods fail to throw appropriate exceptions.

I haven't updated the documentation either, so this is more what I, personally, think should happen in certain error cases.

@bmunkholm @kspangsege @mekjaer @kneth 
",oleks,bmunkholm
39,2014-02-28 13:29:42,"setIndex, hasIndex, and the aggregates SEGFAULT, some other methods fail to throw appropriate exceptions.

I haven't updated the documentation either, so this is more what I, personally, think should happen in certain error cases.

@bmunkholm @kspangsege @mekjaer @kneth 
",oleks,kspangsege
39,2014-02-28 13:29:42,"setIndex, hasIndex, and the aggregates SEGFAULT, some other methods fail to throw appropriate exceptions.

I haven't updated the documentation either, so this is more what I, personally, think should happen in certain error cases.

@bmunkholm @kspangsege @mekjaer @kneth 
",oleks,kneth
38,2014-02-27 10:27:01,"I have implemented a simple class for tracking the version number. Moreover, the version number can be manipulated by `build.sh`. Finally, the version number is used as part of the file name of the framework zip file.

@emanuelez @mekjaer @kspangsege 
",kneth,mekjaer
38,2014-02-27 10:27:01,"I have implemented a simple class for tracking the version number. Moreover, the version number can be manipulated by `build.sh`. Finally, the version number is used as part of the file name of the framework zip file.

@emanuelez @mekjaer @kspangsege 
",kneth,kspangsege
38,2014-02-27 10:27:01,"I have implemented a simple class for tracking the version number. Moreover, the version number can be manipulated by `build.sh`. Finally, the version number is used as part of the file name of the framework zip file.

@emanuelez @mekjaer @kspangsege 
",kneth,emanuelez
37,2014-02-27 13:17:13,"@bmunkholm @kspangsege 
",mekjaer,bmunkholm
37,2014-02-27 13:17:13,"@bmunkholm @kspangsege 
",mekjaer,kspangsege
35,2014-02-26 11:00:39,"Basically just separating out dynamic and typed tests.

@bmunkholm @kneth 
",oleks,bmunkholm
35,2014-02-26 11:00:39,"Basically just separating out dynamic and typed tests.

@bmunkholm @kneth 
",oleks,kneth
34,2014-02-25 16:38:21,"This PR contains a lot of stuff that we do not want to merge into master, but it also contains some interesting and useful stuff for debugging, and a multi-threaded test src/tightdb/objc/test/threads.m which we should probably keep.

I think we will have to manually extract the parts that we want to keep. I don't see how we can ever merge. There is a huge amount of conflicts.

@mekjaer @bmunkholm 
",kspangsege,mekjaer
34,2014-02-25 16:38:21,"This PR contains a lot of stuff that we do not want to merge into master, but it also contains some interesting and useful stuff for debugging, and a multi-threaded test src/tightdb/objc/test/threads.m which we should probably keep.

I think we will have to manually extract the parts that we want to keep. I don't see how we can ever merge. There is a huge amount of conflicts.

@mekjaer @bmunkholm 
",kspangsege,bmunkholm
33,2014-02-25 15:05:38,"@kneth @kspangsege 
",mekjaer,kspangsege
33,2014-02-25 15:05:38,"@kneth @kspangsege 
",mekjaer,kneth
32,2014-02-25 14:23:14,"The structure here is different from core, but for the lack of a better inspiration elsewhere, and out of technical considerations, I implemented this as a build.sh mode, test-cover.

So sh build.sh test-cover (after clean and config). Will generate two XML files, binding-coverage.xml and core-coverage.xml. See the commit message for 8692494e013f0c633a5e45acdfa81b0e4ecf66e1 for more details.

@emanuelez @bmunkholm @kspangsege 
",oleks,bmunkholm
32,2014-02-25 14:23:14,"The structure here is different from core, but for the lack of a better inspiration elsewhere, and out of technical considerations, I implemented this as a build.sh mode, test-cover.

So sh build.sh test-cover (after clean and config). Will generate two XML files, binding-coverage.xml and core-coverage.xml. See the commit message for 8692494e013f0c633a5e45acdfa81b0e4ecf66e1 for more details.

@emanuelez @bmunkholm @kspangsege 
",oleks,kspangsege
32,2014-02-25 14:23:14,"The structure here is different from core, but for the lack of a better inspiration elsewhere, and out of technical considerations, I implemented this as a build.sh mode, test-cover.

So sh build.sh test-cover (after clean and config). Will generate two XML files, binding-coverage.xml and core-coverage.xml. See the commit message for 8692494e013f0c633a5e45acdfa81b0e4ecf66e1 for more details.

@emanuelez @bmunkholm @kspangsege 
",oleks,emanuelez
31,2014-02-26 12:06:23,"@kspangsege 
",mekjaer,kspangsege
30,2014-02-25 01:42:52,"Test suite and iPhone example is now running without issues.

There is a problem in one of the documentation examples though:



I have also added a number of FIXMEs, some of which I think we need to fix before merging.

@mekjaer @bmunkholm 
",kspangsege,mekjaer
30,2014-02-25 01:42:52,"Test suite and iPhone example is now running without issues.

There is a problem in one of the documentation examples though:



I have also added a number of FIXMEs, some of which I think we need to fix before merging.

@mekjaer @bmunkholm 
",kspangsege,bmunkholm
29,2014-02-25 00:18:42,"Support added for checking documentation examples using



Note that this is similar to how it is done in the core library.

@kneth @emanuelez @bmunkholm @mekjaer 
",kspangsege,mekjaer
29,2014-02-25 00:18:42,"Support added for checking documentation examples using



Note that this is similar to how it is done in the core library.

@kneth @emanuelez @bmunkholm @mekjaer 
",kspangsege,bmunkholm
29,2014-02-25 00:18:42,"Support added for checking documentation examples using



Note that this is similar to how it is done in the core library.

@kneth @emanuelez @bmunkholm @mekjaer 
",kspangsege,emanuelez
29,2014-02-25 00:18:42,"Support added for checking documentation examples using



Note that this is similar to how it is done in the core library.

@kneth @emanuelez @bmunkholm @mekjaer 
",kspangsege,kneth
28,2014-02-25 00:03:07,"We are talking about `//` comments. They are not allowed when compiling in Obj-C mode, and produce warnings if they are there.

@mekjaer @emanuelez @bmunkholm @bjchrist @astigsen @oleks @Tightdb/oleks @kneth 
",kspangsege,Tightdb
28,2014-02-25 00:03:07,"We are talking about `//` comments. They are not allowed when compiling in Obj-C mode, and produce warnings if they are there.

@mekjaer @emanuelez @bmunkholm @bjchrist @astigsen @oleks @Tightdb/oleks @kneth 
",kspangsege,bmunkholm
28,2014-02-25 00:03:07,"We are talking about `//` comments. They are not allowed when compiling in Obj-C mode, and produce warnings if they are there.

@mekjaer @emanuelez @bmunkholm @bjchrist @astigsen @oleks @Tightdb/oleks @kneth 
",kspangsege,oleks
28,2014-02-25 00:03:07,"We are talking about `//` comments. They are not allowed when compiling in Obj-C mode, and produce warnings if they are there.

@mekjaer @emanuelez @bmunkholm @bjchrist @astigsen @oleks @Tightdb/oleks @kneth 
",kspangsege,bjchrist
28,2014-02-25 00:03:07,"We are talking about `//` comments. They are not allowed when compiling in Obj-C mode, and produce warnings if they are there.

@mekjaer @emanuelez @bmunkholm @bjchrist @astigsen @oleks @Tightdb/oleks @kneth 
",kspangsege,mekjaer
28,2014-02-25 00:03:07,"We are talking about `//` comments. They are not allowed when compiling in Obj-C mode, and produce warnings if they are there.

@mekjaer @emanuelez @bmunkholm @bjchrist @astigsen @oleks @Tightdb/oleks @kneth 
",kspangsege,emanuelez
28,2014-02-25 00:03:07,"We are talking about `//` comments. They are not allowed when compiling in Obj-C mode, and produce warnings if they are there.

@mekjaer @emanuelez @bmunkholm @bjchrist @astigsen @oleks @Tightdb/oleks @kneth 
",kspangsege,astigsen
28,2014-02-25 00:03:07,"We are talking about `//` comments. They are not allowed when compiling in Obj-C mode, and produce warnings if they are there.

@mekjaer @emanuelez @bmunkholm @bjchrist @astigsen @oleks @Tightdb/oleks @kneth 
",kspangsege,kneth
27,2014-02-24 22:37:28,"Makefile (generic.mk) upgraded to version 1.0.1 (latest) from core library.

This adds support for major goal `test-cover-norun`, and much much more.

@Tightdb/oleks @mekjaer @bmunkholm @emanuelez @oleks 
",kspangsege,Tightdb
27,2014-02-24 22:37:28,"Makefile (generic.mk) upgraded to version 1.0.1 (latest) from core library.

This adds support for major goal `test-cover-norun`, and much much more.

@Tightdb/oleks @mekjaer @bmunkholm @emanuelez @oleks 
",kspangsege,mekjaer
27,2014-02-24 22:37:28,"Makefile (generic.mk) upgraded to version 1.0.1 (latest) from core library.

This adds support for major goal `test-cover-norun`, and much much more.

@Tightdb/oleks @mekjaer @bmunkholm @emanuelez @oleks 
",kspangsege,bmunkholm
27,2014-02-24 22:37:28,"Makefile (generic.mk) upgraded to version 1.0.1 (latest) from core library.

This adds support for major goal `test-cover-norun`, and much much more.

@Tightdb/oleks @mekjaer @bmunkholm @emanuelez @oleks 
",kspangsege,oleks
27,2014-02-24 22:37:28,"Makefile (generic.mk) upgraded to version 1.0.1 (latest) from core library.

This adds support for major goal `test-cover-norun`, and much much more.

@Tightdb/oleks @mekjaer @bmunkholm @emanuelez @oleks 
",kspangsege,emanuelez
22,2014-02-21 09:07:14,"Inspired by Dropbox and Facebook, we have investigated the possibility to use framework for iOS development using Xcode. In order to make the release process simpler, I have added a new target for `build.sh` which copies, renames and modified the required files.

@kspangsege @mekjaer @bjchrist @bmunkholm @emanuelez 
",kneth,mekjaer
22,2014-02-21 09:07:14,"Inspired by Dropbox and Facebook, we have investigated the possibility to use framework for iOS development using Xcode. In order to make the release process simpler, I have added a new target for `build.sh` which copies, renames and modified the required files.

@kspangsege @mekjaer @bjchrist @bmunkholm @emanuelez 
",kneth,bmunkholm
22,2014-02-21 09:07:14,"Inspired by Dropbox and Facebook, we have investigated the possibility to use framework for iOS development using Xcode. In order to make the release process simpler, I have added a new target for `build.sh` which copies, renames and modified the required files.

@kspangsege @mekjaer @bjchrist @bmunkholm @emanuelez 
",kneth,emanuelez
22,2014-02-21 09:07:14,"Inspired by Dropbox and Facebook, we have investigated the possibility to use framework for iOS development using Xcode. In order to make the release process simpler, I have added a new target for `build.sh` which copies, renames and modified the required files.

@kspangsege @mekjaer @bjchrist @bmunkholm @emanuelez 
",kneth,kspangsege
22,2014-02-21 09:07:14,"Inspired by Dropbox and Facebook, we have investigated the possibility to use framework for iOS development using Xcode. In order to make the release process simpler, I have added a new target for `build.sh` which copies, renames and modified the required files.

@kspangsege @mekjaer @bjchrist @bmunkholm @emanuelez 
",kneth,bjchrist
21,2014-02-14 15:51:45,"I discovered this issue having installed XCode from the command line. When
running config, it would ask me to run as root so that I could accept the
license agreement. Running as root creates a $CONFIG_MK, with root priveleges.
It is only then that I was told that I should run a special tool instead to
accept the license agreement. Running config afterwards, clearly disallowed me
to overwrite the config, but the script didn't report this in a pretty way.

@kspangsege @kneth 
",oleks,kspangsege
21,2014-02-14 15:51:45,"I discovered this issue having installed XCode from the command line. When
running config, it would ask me to run as root so that I could accept the
license agreement. Running as root creates a $CONFIG_MK, with root priveleges.
It is only then that I was told that I should run a special tool instead to
accept the license agreement. Running config afterwards, clearly disallowed me
to overwrite the config, but the script didn't report this in a pretty way.

@kspangsege @kneth 
",oleks,kneth
18,2014-02-10 15:07:10,"@kspangsege 
",mekjaer,kspangsege
17,2014-02-07 15:33:41,"@kneth @bmunkholm 
",oleks,bmunkholm
17,2014-02-07 15:33:41,"@kneth @bmunkholm 
",oleks,kneth
16,2014-02-03 14:23:47,"Tied to https://github.com/Tightdb/tightdb/pull/321

Note that the second commit of this PR fixes a number of bugs and a lot of style issues that are not directly related to the change from Spec to Descriptor.

@mekjaer 
",kspangsege,mekjaer
11,2013-10-11 14:57:47,"In the typed interface the property was readonly.

(see commits for further details)

@kspangsege 
@bmunkholm 
",jjepsen,bmunkholm
11,2013-10-11 14:57:47,"In the typed interface the property was readonly.

(see commits for further details)

@kspangsege 
@bmunkholm 
",jjepsen,kspangsege
11,2013-10-21 11:05:17,"@Jesper: Please ""Remember"" by an Asana task

// Brian

On Sat, Oct 12, 2013 at 3:48 PM, Kristian Spangsege <
notifications@github.com> wrote:

> Alright, we'll take with the out-comment documentation, but we must
> remember to discuss whether it should end up staying of not.
> 
> [image: :+1:]
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/11#issuecomment-26197743
> .
",bmunkholm,Jesper
11,2013-10-21 11:46:58,"ja, det er nok bedre end bag øret :-)

Den 21/10/2013 kl. 13.05 skrev bmunkholm notifications@github.com:

> @Jesper: Please ""Remember"" by an Asana task 
> 
> // Brian 
> 
> On Sat, Oct 12, 2013 at 3:48 PM, Kristian Spangsege < 
> notifications@github.com> wrote: 
> 
> > Alright, we'll take with the out-comment documentation, but we must 
> > remember to discuss whether it should end up staying of not. 
> > 
> > [image: :+1:] 
> > 
> > — 
> > Reply to this email directly or view it on GitHubhttps://github.com/Tightdb/tightdb_objc/pull/11#issuecomment-26197743 
> > . 
> > 
> > —
> > Reply to this email directly or view it on GitHub.
",jjepsen,Jesper
10,2013-10-09 14:50:59,"Since the cursor implements new functionally and has internal state, this test case was created to test it in depth. 

@bmunkholm 
@kspangsege 
",jjepsen,bmunkholm
10,2013-10-09 14:50:59,"Since the cursor implements new functionally and has internal state, this test case was created to test it in depth. 

@bmunkholm 
@kspangsege 
",jjepsen,kspangsege
9,2013-10-09 14:23:27,"The query columns accessors had strong backward references. It caused a leak. Examples and unit tests are still passing after this update (and the leak went away).

PS: Table column accessors already use weak references to tables. So, chances are there were no reason behind having the strong backward reference to a query.

@kspangsege 
@bmunkholm 
",jjepsen,bmunkholm
9,2013-10-09 14:23:27,"The query columns accessors had strong backward references. It caused a leak. Examples and unit tests are still passing after this update (and the leak went away).

PS: Table column accessors already use weak references to tables. So, chances are there were no reason behind having the strong backward reference to a query.

@kspangsege 
@bmunkholm 
",jjepsen,kspangsege
8,2013-10-08 14:46:55,"Dependency: Pull request #209 in core library.

@bmunkholm 
@kspangsege 
",jjepsen,bmunkholm
8,2013-10-08 14:46:55,"Dependency: Pull request #209 in core library.

@bmunkholm 
@kspangsege 
",jjepsen,kspangsege
6,2013-06-07 14:56:51,"@bmunkholm 

24- jun: Updated the yaml files. 

@bmunkholm 

One method was not implemented, are now looks like this in the tutorial:

// @@Example: updating_entire_row @@
// (not yet implemented) [people setAtIndex:4 Name:""Eric"" Age:50 Hired:YES];
// @EndExample@@

Note that intro examples are not ready for upload, even though they are committed.
",jjepsen,bmunkholm
6,2013-06-07 14:56:51,"@bmunkholm 

24- jun: Updated the yaml files. 

@bmunkholm 

One method was not implemented, are now looks like this in the tutorial:

// @@Example: updating_entire_row @@
// (not yet implemented) [people setAtIndex:4 Name:""Eric"" Age:50 Hired:YES];
// @EndExample@@

Note that intro examples are not ready for upload, even though they are committed.
",jjepsen,Example
6,2013-06-07 14:56:51,"@bmunkholm 

24- jun: Updated the yaml files. 

@bmunkholm 

One method was not implemented, are now looks like this in the tutorial:

// @@Example: updating_entire_row @@
// (not yet implemented) [people setAtIndex:4 Name:""Eric"" Age:50 Hired:YES];
// @EndExample@@

Note that intro examples are not ready for upload, even though they are committed.
",jjepsen,EndExample
6,2013-09-26 19:43:37,"@bmunkholm @kspangsege 
I'm pushing the button now, to include my changes in Kristians pre-build.
",jjepsen,kspangsege
4,2013-04-13 00:41:54,"**Note:** Depends upon https://github.com/Tightdb/tightdb/pull/67

/cc @astigsen 
",kspangsege,astigsen
2,2013-02-22 14:01:25,"/cc @astigsen @bmunkholm @kneth 
",kspangsege,astigsen
2,2013-02-22 14:01:25,"/cc @astigsen @bmunkholm @kneth 
",kspangsege,bmunkholm
2,2013-02-22 14:01:25,"/cc @astigsen @bmunkholm @kneth 
",kspangsege,kneth
1,2013-02-07 02:05:54,"**Ready** for review.

/cc @bmunkholm @astigsen
",kspangsege,astigsen
1,2013-02-07 02:05:54,"**Ready** for review.

/cc @bmunkholm @astigsen
",kspangsege,bmunkholm
