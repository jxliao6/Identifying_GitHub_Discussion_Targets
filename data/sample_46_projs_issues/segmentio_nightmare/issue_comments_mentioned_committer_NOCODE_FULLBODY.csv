issue_num,datetime,body,login,mention_login
1052,2017-03-27 20:38:51,"What @rosshinkley said might be the issue.

> I waited already after click on submit for new element on page

@mymtwcom: Is the form async loaded? That is what i was referring to. DOM elements might not be settled and you need to wait for it. 

",chtrinh,rosshinkley
1052,2017-03-27 21:54:50,"@rosshinkley yes, I used `show: true`. I used asserts that to know, that I'm currently on page that I need.
`CAPTCHA`: No there no was captcha, cuz I used `show: true` that to make sure.
read again plz my **problem** from issue:

I'm clicking button continue, after which I should be
 redirected, **this works sometimes, but sometimes I see** next **error**

Maybe my code will help to anybody reproduce the issue, there are used temporary proxy server also(I will disable him if issue will be reproduced).

code: 
",mymtwcom,rosshinkley
1021,2017-02-27 06:58:46,@jekku When the partition name doesn't match the partition name of the initial login instance it can't proceed.,louisscruz,jekku
1021,2017-02-28 20:17:01,@rosshinkley Thanks for that! I'll give that a shot later today.,louisscruz,rosshinkley
1021,2017-03-01 04:37:36,"@rosshinkley Wow, your `nightmare-download-manager` did it! It no longer hangs with the `ignoreDownloads: true`.

There is still a drastic slowdown in performance throughout my crawler's run. With 24 workers, my last run, which was about 10 minutes long, started around 240 links per minute and ended at 110 links per minute. I'm curious how the shared session/partition affects this.

Anyways, my original issue is cleared up. I hope this helps someone else!",louisscruz,rosshinkley
1010,2017-02-24 19:20:27,"@keithkml If you come up with a custom action using the debugger, I'd be _very_ interested in seeing it.

Also, I neglected to mention - if you go this route, you will likely not be able to use the debugger tray (or you'll have to be _very_ judicious about opening and closing it) as Chromium only allows one attachment to the debugger at any given time.  I don't know that you'd hit that, but I thought I'd say it out loud to prevent you from head+desk.

Closing for the moment.",rosshinkley,keithkml
1001,2017-02-15 15:33:31,"@jekku just saw the checks have failed, thanks for noticing. I was a away to an event yesterday :) I'll get on it.",peterwilli,jekku
993,2017-02-10 03:35:27,"Thank you @rosshinkley . 
I'm gonna try it first thing in the morning, have to go right now (2am)

Yes, apparently my government doesn't like spending money on certificates. (go brazil!) 

**It worked!**",tloriato,rosshinkley
988,2017-02-03 17:12:53,@jekku Right. Does that means that you think that it's a good idea to mention this but with a different wording? Thanks.,sanbor,jekku
983,2017-02-24 00:57:22,"@jekku Babel inserts a function to handle this for us:

",stephenmathieson,jekku
983,2017-02-24 03:50:18,"@stephenmathieson thanks for teaching me that. :)

For me though, there could be some benefit on the es6 examples change - but it has subtle drawbacks as well. 

For people who need to be convinced to use this open source repository, it should be 'plug and play' as much as possible. Since not all ES6 features are available yet on the native engine without transpiling it from ES6 to ES5, they'd still add a layer of configuration above it to allow this example. I think they could figure out the cosmetic code changes on their own AFTER they are convinced to use nightmare.js.",jekku,stephenmathieson
978,2017-02-10 13:44:51,"@rosshinkley I am using both Node 7, but also babel mostly for jsx and generators",ericadamski,rosshinkley
968,2017-02-10 11:01:43,"@rosshinkley As far I have tested it, yes...

My script was pretty simple, just a goto(), nothing more than that.

I think @kdgit1 can give you more details about the issue.

[]'s",navossoc,rosshinkley
967,2017-01-23 01:56:06,@jekku I'm sure it's possible to test for isomorphism -- we'd just need to run the tests under electron in addition to node.,Timer,jekku
963,2017-01-20 20:07:18,@coyotte508 do you have a small example of your problem?,rosshinkley,coyotte508
963,2017-01-20 21:47:25,"@rosshinkley Sorry, not a small one...

https://gist.github.com/coyotte508/7bffdd66e251917c003bebe94ce343e3

It's inside a payment page. `.type` works but not `.insert`. I use the `nightmare-iframe-manager` plugin. The field itself is inside an iframe, maybe it's due to that too.

The selector used for `.type` is the precise selector for the input (`#number`), not a parent.",coyotte508,rosshinkley
959,2017-02-10 14:30:31,Thanks for the reply @rosshinkley. Does that mean the docs in README.md should be updated? My test code was mainly a copy-paste of what can be found [here](https://github.com/segmentio/nightmare#nightmareactionname-electronactionelectronnamespace-actionnamespace) in the `clearCache` example. The doc puts `clearCache` before `goto`.,contobob,rosshinkley
959,2017-02-14 14:36:49,"It's not an issue strictly with the placement of `clearCache` - granted that's probably wrong, even though it's in the readme. If you call `goto` before `clearCache`, it'll never get past `clearCache` - i.e. in this example, it'll print A, but not B or C.



IIRC, I saw the same issue w/ @rosshinkley's nightmare-upload. FWIW, on nightmare 2.9.1 as well.",ysimonson,rosshinkley
959,2017-03-12 17:04:28,"@rosshinkley Have a look into this, its been several months since we've found such issue. Nothing responds to such actions. :/ 

![screenshot from 2017-03-12 22-59-35](https://cloud.githubusercontent.com/assets/8284972/23833958/328e77b4-0778-11e7-8106-fe6d1e8287a6.png)

",entrptaher,rosshinkley
959,2017-03-27 03:09:15,"@rosshinkley If you create custom actions, almost same kind of error happens no matter the callback.",entrptaher,rosshinkley
952,2017-02-14 07:41:50,"@rosshinkley no, it did not.",harso121,rosshinkley
951,2017-01-11 07:46:45,"Thank you @jekku that's a much better API, I didn't realize that was possible!",ianstormtaylor,jekku
951,2017-01-11 18:12:10,"@jekku yup it worked! Thanks
",ianstormtaylor,jekku
946,2017-01-10 01:33:32,"@jekku So I asked the admins to turn up the ram on the VM box, and they bumped it from 2gb to 8gb, and the issue has been solved. Electron runs speedily and doesn't go past 5%. I don't know why having low memory would tank the CPU usage, but as I said, I'm a n00b. I suppose we can consider this ""solved"" as there's a reasonable workaround?",shhtephe,jekku
945,2017-03-23 10:01:07,"@cscanlin It looks similar to my problem so I would bet it would fix it. Since this PR hasn't been touched in 2 months and as @Mr0grog has previously suggested, we're probably going to be waiting for a while.

I suggest working around it in the meantime by pointing to a fork. This can be done via `git` URLs in your `package.json`:

https://docs.npmjs.com/files/package.json#git-urls-as-dependencies

https://github.com/twolfson/multi-image-mergetool/blob/1.32.1/package.json#L90",twolfson,Mr0grog
945,2017-03-23 10:17:41,"@twolfson That did the trick, thanks! On that note, I was also able to merge your branch with the master branch with 0 conflicts. Are there any other major roadblocks in getting this deployed? @Mr0grog, you said that this branch will actually open up the path for even more fixes (in addition to fixing this issue), so it seems like an easy win. Thoughts?",cscanlin,Mr0grog
944,2017-01-06 05:04:49,"Wow thanks @jekku !! The serialization was the problem. The '#id' was just for illustration, was actually selecting for a class. Sorry its late in Berlin. Thanks again for the quick help!
PS. Wasn't really an issue of nightmare.js was it",anthnyprschka,jekku
944,2017-01-06 16:29:49,"@jekku Haha sure you mean a pull request? What exactly? 

And is this the only way to send back data extracted from the site to my script? Seems like a workaround no?

EDIT: Nevermind i think i got it now :) ",anthnyprschka,jekku
942,2017-01-05 03:50:46,"@jekku - @urlysses' answer would only work if the HREF attribute contained the text in question, not the text element under the anchor.  In other words, the answer - while useful - didn't address the question.

From here, @pfftdammitchris, I think you have two options off the top of my head.  One: you could use `.evaluate()` and try to issue clicks directly.  Something like:



This clicks directly on the first element that matches text in the anchor's text, in this case, `information`.  This approach doesn't _always_ work, it depends on the JS framework you're using - in your case it looks like Angular, so your mileage may vary.

Option two: add a class to the anchor you want to click, then use the existing `.click()` machinery to issue your click.  This may work better in your situation, especially if you decide you'd rather use something like [`nightmare-real-mouse`](https://www.npmjs.com/package/nightmare-real-mouse) instead of the internal click events to Nightmare:

",rosshinkley,jekku
942,2017-01-07 20:20:28,Sorry! Deleted my answer because I re-read the question and saw that I misunderstood the initial question. I should instead have edited with a more appropriate answer or update. Thanks @jekku and @rosshinkley.,urlysses,rosshinkley
942,2017-01-07 20:20:28,Sorry! Deleted my answer because I re-read the question and saw that I misunderstood the initial question. I should instead have edited with a more appropriate answer or update. Thanks @jekku and @rosshinkley.,urlysses,jekku
937,2017-01-02 17:07:23,"@R0byn as @jekku mentioned, give #224 a read.

So starting from the top, explaining what you're seeing:

> Result: No errors, but also no console output. 

In the future, try running with `DEBUG=nightmare*,electron*` or `DEBUG=*`.  That will yield more verbose, useful output.

> Then tried the example in a shell on the Ubuntu Desktop - voila! Worked! :-)

This is because when you're under an Ubuntu desktop, you're running an X session of some flavor, meaning there's a framebuffer running.  Electron requires a framebuffer to be running to work properly.

> ... and is being pushed to a CI (Which is similarly, a shell ONLY env).

_Most_ (all?) of the CI solutions I've seen have a framebuffer of some flavor running (usually xvfb).

> Is there a way to get nightmare scripts running with this combination

Yes.  Install `Xvfb`, read through #224 and the suggestions there.  You can either have `Xvfb` always running or use `xvfb-run` to manage starting/stopping the service for you.  Your setup under that scenario should work fine.

I'm going to merge this into #224 and close this issue.

",rosshinkley,jekku
936,2016-12-29 22:34:58,"@jekku I am confused, I am waiting for it before clicking:

",dfenstermaker,jekku
934,2017-01-03 07:12:12,"@rosshinkley https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L600

I think the current branch still does. It just isn't documented. The top level callback is bubbled down as a callback to fs.writeFile.",jekku,rosshinkley
934,2017-01-05 03:21:39,"@jekku I don't think that does what you think it does, and now that you've pointed it out, I think I see the problem.  You _can_ pass a function like that, but it will do exactly what @tlshaheen said - it will prevent downstream execution of the Nightmare chain.  What that is looking for is the internal `done` callback as `.screenshot()` has optional parameters.

To make things clearer, an example might be helpful:



This will print `hello from screenshot callback`, but will never advance to the `.end()` because the `done` callback that tells Nightmare to move onto the next step - the one specified in the line you highlighted - is never called.

So while what i said is technically incorrect - `.screenshot()` _does_ take a callback, but it's supposed to be internal to make chaining work - I stand by my original statement.  I don't think `.screenshot()` takes a user-passable function callback as originally posted.

For completeness, if you wanted the buffer, the above example is easily fixed:



I'm still curious what version the original example was written against and/or where the example came from.",rosshinkley,jekku
929,2016-12-30 21:43:06,@reinpk What do you mean by test case? Like a unit-test? Or a codepen that shows the issue?,notVitaliy,reinpk
929,2017-01-05 14:43:37,"@reinpk This issue might be difficult to reproduce in a unit-test since it's an interaction between angular2 and nightmare, afaik. I'll do my best to isolate the underlying cause over the next couple weeks.",notVitaliy,reinpk
927,2016-12-19 01:03:44,"> if you're using the remote debugging protocol, doesn't that mean you can't use the debugger (or have the development tray) open at the same time? If I'm not mistaken, this is the same issue that nightmare-upload has.

😲 I was entirely unaware of that as an issue and hadn’t tested it. The good news is that if a user has opened the local debugger before screenshotting, screenshots still work (see the `catch` clause here: https://github.com/segmentio/nightmare/pull/927/files#diff-bc4eacf94ad1a8e7c9bea8b6b6451251R83). The bad news is that users can’t open the local debugger *after* screenshotting. I’ve added another commit that detaches the debugger as soon as we’re done, which seems to resolve that.

Since you’ve seen this issue before, it’d be great if you give it a go as well, @rosshinkley.",Mr0grog,rosshinkley
922,2016-12-19 11:15:11,"I will try with `DEBUG=nightmare*,electron*`.
I already tried setting a random partition name for each instance (following @Mr0grog advice here : https://github.com/segmentio/nightmare/issues/493#issuecomment-265684086)
But it doesn't change anything. 
I come back to you by the end of the week ! Thanks @rosshinkley 
",GautierT,rosshinkley
921,2016-12-18 23:12:34,"@rosshinkley  Navigating to `about:blank` initially would work.

Alternatively, you could have `cookies.set` check if a current `session` exists, and if not just treat it as a `.goto('about:blank').then(() => cookies.set(...))` instead.",ewrogers,rosshinkley
916,2016-12-05 21:57:45,@jekku Do you mean literally using the name `'nopersist'` as your partition name? I think you can use any name for the same effect but yeah that would work. I don't know of any other way to do it and you can get burned pretty hard if you don't.,justinmchase,jekku
913,2016-12-19 04:09:20,"@rosshinkley when I use element.src it return null, it's seems not work",canhongpoxiao,rosshinkley
905,2016-11-25 04:09:17,@jekku Maybe you are born like this.,neal1991,jekku
902,2016-12-05 23:12:01,@jekku Maybe you could add a little section in the README for this new function also?,justinmchase,jekku
902,2016-12-07 07:39:13,"@justinmchase added. Thanks for the headsup.

:up: ",jekku,justinmchase
902,2016-12-07 08:08:09,@reinpk @rosshinkley the failing test comes from a different feature.,jekku,reinpk
901,2016-11-30 04:57:32,@reinpk already active :) Just gonna add a test,jekku,reinpk
900,2016-12-17 03:35:33,"@jekku  This probably should have gotten pulled in with the last release.  I'll see to it that it gets pulled in with the next one.

@justinmchase _mostly_ for previous version support/preventing breaking changes.  In the future, support could be dropped.  (This is _tangentially_ related to a conversation about `.run()` in #575.)

",rosshinkley,jekku
900,2016-12-17 03:35:33,"@jekku  This probably should have gotten pulled in with the last release.  I'll see to it that it gets pulled in with the next one.

@justinmchase _mostly_ for previous version support/preventing breaking changes.  In the future, support could be dropped.  (This is _tangentially_ related to a conversation about `.run()` in #575.)

",rosshinkley,justinmchase
892,2016-11-21 06:49:38,"@rosshinkley 

And now when I try again, it just stucks here:
""
DEBUG=nightmare*,electron* xvfb-run --server-args=""-screen 0 1024x768x24 -extension RANDR"" node yahoo_demo.js
nightmare queuing process start +0ms
  nightmare queueing action ""goto"" for http://yahoo.com +4ms
  nightmare queueing action ""type"" +2ms
  nightmare queueing action ""click"" +0ms
  nightmare queueing action ""wait"" +1ms
  nightmare queueing action ""evaluate"" +0ms
  nightmare running +0ms

  (stuck here)
""
And when I press ctrl-c comand, it outputs:
""
...(shown above)
nightmare electron child process exited with code null: undefined +6m
/usr/bin/xvfb-run: line 171: kill: (24823) - No such process
""",albus01,rosshinkley
887,2016-12-28 01:57:28,"I'd also like to be able to access the webContents of the BrowserWindow instance if this is possible? I need it for the same purpose as @zatziky (simulating real keyboard inputs).

And also simulating real pasting (but this also requires access to electron clipboard object):


**Edit:** Ahh, thank you @rosshinkley - I thought `.action()` only allowed javascript evaluation, but taking a proper look at the documentation I see that @zatziky and I should be able to do something like this:

(Haven't tested yet, based it on an example in #379 - thanks @shadowmint!)

**Edit 2:** Hmm, not working. Can anyone spot where I've went wrong? Will update this comment if I find the correct way to do this. I've also tried adding a `setTimeout` with a `keyUp` in it after the `keyDown`, but that doesn't seem to work either.

**Edit 3:** Fixed! Turns out you need to focus a window before you can `sendInputEvent` - so I've added it to the code above (my window wasn't focused because dev tools opens up after it). Reported  this need for `focus` to the [electron repo](https://github.com/electron/electron/issues/8299). Also added `keyUp` after the `keyDown` (in my actual code I put the `keyUp` in an 50ms `setTimeout` to hopefully make the simulation more accurate).",josephrocca,rosshinkley
866,2016-11-21 13:47:57,Thx @rosshinkley ,zatziky,rosshinkley
865,2017-01-02 17:37:00,"Yeah I fixed whole merging ;)

On Mon, Jan 2, 2017 at 2:25 AM Rico Sta. Cruz <notifications@github.com>
wrote:

> *@rstacruz* commented on this pull request.
>
>
>
>
> ------------------------------
>
>
>
>
> In Readme.md
> <https://github.com/segmentio/nightmare/pull/865#pullrequestreview-14833628>
> :
>
>
> > @@ -30,16 +30,13 @@ Many thanks to [@matthewmueller](https://github.com/matthewmueller) and [@rosshi
>
>  Let's search on Yahoo:
>
>
>
> oops, haha, this needs to change too
>
>
>
>
> ------------------------------
>
>
>
>
> In Readme.md
> <https://github.com/segmentio/nightmare/pull/865#pullrequestreview-14833628>
> :
>
>
> > @@ -30,16 +30,13 @@ Many thanks to [@matthewmueller](https://github.com/matthewmueller) and [@rosshi
>
>  Let's search on Yahoo:
>
>
>
> but i think someone already edited that
>
>
>
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/segmentio/nightmare/pull/865#pullrequestreview-14833628>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAoMcSpFOqLKtAFCKH5favWMdstoVwpqks5rONC1gaJpZM4Kmveu>
> .
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
",reinpk,rstacruz
862,2016-11-04 02:53:16,"@Mr0grog Would it be worth it to use something like [`json-stringify-safe`](https://www.npmjs.com/package/json-stringify-safe) to handle circular references when serializing data to pass over the IPC boundary?
",rosshinkley,Mr0grog
857,2016-10-29 19:16:31,"@rosshinkley You said that the first `.then()` returns a `Promise`. Can this promise be converted to `bluebird` Promise so to be able to use `.each()` and others from specified library, at a later point in Nightmare chain? Something like this:


",gfot,rosshinkley
854,2016-10-27 13:45:06,"@Mr0grog Thank you for researching this. I think I found another solution, please check it out:



Basically, when you know you need to wait for the page to unload before moving on you would place `.waitforunload()` and nightmare will not move on until it is resolved. I think I should submit a pull request to add this feature natively. Please let me know your thoughts.
",bchr02,Mr0grog
854,2016-10-27 17:46:26,"@Mr0grog Thank for the extra option but did you see my other solution  here https://github.com/segmentio/nightmare/issues/854#issuecomment-256658926 which uses an `.evaluate()` instead of an action? I seem to like this the best because it's the cleanest and clearest solution, in my opinion.
",bchr02,Mr0grog
854,2016-10-27 18:01:15,"@Mr0grog it would be awesome if your non-event listener option within https://github.com/segmentio/nightmare/issues/854#issuecomment-256712828 could be added directly to nightmare. Care to send a pull request? 😄 
",bchr02,Mr0grog
846,2016-11-04 03:41:38,"Thanks @rosshinkley. I can nest another `nightmare.goto(url)` call in the outer `then` block it seems and that seems to solve that.
",matthewmichihara,rosshinkley
837,2016-10-20 10:02:32,"Thank you very much @rosshinkley. I didn't stumble upon nightmare-examples before. It's true that it's linked within a ToC, but by scrolling and reading through segmentio/nightmare README there was no such section, not even a link to it and I didn't pay attention to the ToC since I assumed I read it all. Also, there is not a single example of a code in a main README that would use `then` at least twice. If either of these were the case - I would have probably solved it by myself before. I'm just describing what was the issue in my case, feel free to disregard my remarks :)

_Even then I am not sure what was I doing wrong before since I used map.reduce (or recursion) to chain promises before and it eludes me what was I previously doing wrong in my code that I did draw all those wrong conclusions about the function of `then`._

In any case - it works like a charm and now that I finally get nightmare mechanics I enjoy the simplicity of the API very much. Fantastic tool.
",kamiltrebunia,rosshinkley
836,2016-10-20 14:54:17,"@jussch @rosshinkley I tried all sorts of acrobatics to make it work on heroku until I emailed their tech support and confirmed that dev/shm is fixed to 5mb on all dynos. 

Even though I couldn't prove that dev/shm was the problem (if you read the chromium issue part of the problem is that you don't get logs about the crash), I tested the same script that was crashing on heroku on the smallest VMs of AWS and DO and worked perfectly. I _think_ (can't remember for sure) monitoring dev/shm at max usage on heroku.

If you _must_ use heroku I guess you could finally ask them to change the allocation ad-hoc (if possible).

Hope it helped.
",rickmed,rosshinkley
835,2016-10-19 18:35:57,"@rosshinkley i want to stop the nightmare by a button 
i want to do a button that start my script contains nightmare then when i want to stop the nightmare with an other button because in the server i can't see the electron to stop it 
did u undertand me now?
",neutron92,rosshinkley
835,2016-10-19 20:01:33,"@rosshinkley do you know maybe when `.halt()` API will be included ?

We need it for project of ours.

If that will not be soon, do you suggest any solutions ?

Peace!
",shtefcs,rosshinkley
832,2016-10-30 08:55:41,"@cagataycali, maybe thats not the problem you are trying to solve. If you are trying to use download manager, then probably you should try their example first.



If you want to pass something to evaluate, you have to pass it as @rosshinkley showed above.
But, from your example, it's not exactly clear what are you trying to do.
The actual code might be more helpful.
",entrptaher,rosshinkley
830,2016-10-19 19:53:08,"@rosshinkley Thank you for helping. I am looking to pull the information (html) from the page that excepted, not the URL.
",bchr02,rosshinkley
830,2016-10-24 22:38:46,"@rosshinkley I tried to use your .evaluate() method as you had suggested, but none of the code within the final .then() (where the html should be) executes. 
",bchr02,rosshinkley
830,2016-10-25 16:32:28,"Okay I created another approach that works using evaluate's new Promise support - @rosshinkley thanks for adding that by the way.

So here is what I did. I created a wait function that takes three parameters.
1. The element id to check for
2. waitTimeout (this is optional)
3. pollInterval (this is optional)

Once you declare a wait variable with the new wait function code provided below, when using nightmare instead of using `.wait('#uh-search-box')` you would do this:
`.evaluate(wait, 'uh-search-box')` And since the new wait function returns a promise, it is added to normal queue and we could continue chaining as normal.

Of coarse the solution can be adjusted to ones individual needs. But for me this was perfect. Here is the code:


",bchr02,rosshinkley
830,2016-10-27 07:05:29,"FWIW, @rosshinkley's suggestion should work, _except_ you need to make sure not to call `end()` before your `catch` runs:



So it doesn’t have to be nearly so complicated as your asynchronous `wait` above.
",Mr0grog,rosshinkley
830,2016-10-27 16:33:12,"@Mr0grog Thanks for the thorough explanation and for the corrected code. This is great!
",bchr02,Mr0grog
830,2016-10-27 21:34:06,"@Mr0grog Thanks again for helping me. I wanted you to know that I ended up making some refinement to your code above because I didn't understand:
- why there is a `catch()` immediately followed by another `catch()`
- why the last `catch()` is followed by a `then()`
- what the purpose of `.goto('about:blank')` when this could be captured in a `catch()`

So here is the code structure that I ended up using and achieves the goal of performing a task on a page that timed out (like getting the html off of it):


",bchr02,Mr0grog
830,2016-10-28 01:10:33,"Poking a head in: Thank you @Mr0grog:

> except you need to make sure not to call end() before your catch runs...

Editing mistake on my part.  Thanks for the second set of eyes.
",rosshinkley,Mr0grog
830,2016-10-28 22:23:41,"Heh, no worries @rosshinkley. I made a similar copy/paste error in my first reply too, only saved by the fact that it didn't break the code :P
",Mr0grog,rosshinkley
830,2016-10-29 03:00:54,"@Mr0grog thanks for explaining
",bchr02,Mr0grog
829,2016-12-17 15:42:08,"@rosshinkley I was trying to modify the content of a script served over HTTPs. Still, I don't really have a solution for this, but I found a workaround for my case.

Would be curious how do modify that, tho.",IonicaBizau,rosshinkley
827,2016-10-26 16:46:33,"@bchr02 Sure! Pretty much a proof of concept, not tested (pasting things from my code):


",IonicaBizau,bchr02
824,2016-10-19 19:08:23,"@rosshinkley in this case, `window.confirm` isn't the issue, it's the `unload` and `onbeforeunload` handlers. I managed to fix it with a custom `preload.js` script, which I've submitted in a pull request here: https://github.com/segmentio/nightmare/pull/825
",Fauntleroy,rosshinkley
819,2016-10-12 23:41:44,"@rosshinkley this pull request is great! Thank you. It will help me with https://github.com/segmentio/nightmare/issues/830
",bchr02,rosshinkley
810,2016-09-29 19:48:17,"@rosshinkley 

> I do have a question:
> 
> >    ...on script re-run are previously inserted input fields prefilled with old values.
> 
> Meaning that the values are there between runs to the same site?

correct
",typekpb,rosshinkley
809,2016-09-29 14:33:11,"@daniel3d is right: `.end()` queues the ending action, it still needs to be executed with a `.then()`.

Setting that aside, and this is kind of offtopic: I'm not certain Nightmare is the best tool for converting SVGs to PNGs.  Have you considered using something like [ImageMagick](http://imagemagick.org/script/index.php)?  `convert` will give you _much_ more flexibility for image manipulation.
",rosshinkley,daniel3d
809,2016-09-29 21:05:09,"@rosshinkley unfortunately not for SVGs :)
",mikeys,rosshinkley
805,2016-10-25 19:44:48,"Thx a lot @rosshinkley 
",jonatasfreitasv,rosshinkley
794,2017-01-05 20:27:10,@rosshinkley yes still seeing this issue. Using electron 1.3.4 and nightmare 2.7.0 work fine. ,ecandino,rosshinkley
793,2016-11-08 15:48:24,"@rosshinkley Sorry about the delay, and thanks for the response! It's added in that evaluate function I pasted above. That's the 'onClick' method that gets called the button is clicked. Still stumped on this.. I will give 619 a read
",shanewignall,rosshinkley
790,2016-09-21 14:29:35,"Im not sure this is clear in the documentation because it states



Maybe providing an example with this basic usage provided in @rosshinkley's comment would make it easier to understand?
",Oted,rosshinkley
780,2016-10-20 15:23:02,"Hi @rosshinkley,

Thanks for your response. XPath is the only available option to select elements by the inner text, for instance.

It's widely used on Selenium space, for example.

Thanks,
Gustavo
",gjmveloso,rosshinkley
780,2016-12-30 19:53:34,"@gjmveloso as @rosshinkley mentioned we've decided to keep css lookup for minimal simplicity. if there's a super clean, tested and ready-to-go PR may reconsider!",reinpk,rosshinkley
779,2016-09-06 01:02:08,"@rosshinkley I've got two options:
- Going from a ""Page A"" and filling a form. Once submitted, it leads me to ""Page B"", which is a results page. 
- Or going straight to ""Page B"", but with a 'POST' method, and some Body `form-data` parameters. This will also lead me to the ""Page B"" results.
  Screenshot from Postman: 
  <img width=""905"" alt=""postman"" src=""https://cloud.githubusercontent.com/assets/5517450/18258786/8382a286-741f-11e6-91c9-c4295440a3bb.png"">

The second option would be quicker as I would skip the first page. I wondered is such a thing is possible with Nightmare. Something like:



Hope that's clear enough! Thanks :)
",jgrancher,rosshinkley
769,2016-10-27 04:17:18,"@rosshinkley In regards to your comment https://github.com/segmentio/nightmare/issues/769#issuecomment-244780554:

> Nightmare, by default, will wait for the did-stop-loading event. This event is typically emitted once the page is ""finished"" loading (be it from the original 20x completing or stop being called). At that point, the page should already be in a ready state. (Should. If it isn't, or you have a a countercase, I'd love to hear about it.)

I have opened https://github.com/segmentio/nightmare/issues/854 which provides a test case showing that there in fact is an issue with nightmare not finishing loading before moving on to the next chained method.
",bchr02,rosshinkley
766,2016-08-30 08:42:54,"@rosshinkley  Thanks! :) [asynchronous operations and loops](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/common-pitfalls/async-operations-loops.md) explanation helped me understand.

Script above is super basic, just to test this. Not much sense in there. :D

Thanks again!
",jelenajjo,rosshinkley
762,2016-08-29 21:17:30,"@rosshinkley Thanks for the response. I added a .wait('body') before and after the button click. Unfortunately, I still get the blur event about a second after the script clicks the button that makes the little inline-dialogue form disappear. I noticed that between clicking the button and the blur event error, a little banner appears and disappears on the page that just tells the user that the form was updated successfully. I wonder if this specific element disappearing and appearing causes a blur event? 

Also

@jhenriquez Looking back on your previous comment, I found that when I say the child form ""disappears"", the elements are actually dynamically removed from the page. This element is an inline-dialogue in the AUI framework. 
The thing is, I'm not trying to do anything with those elements after clicking the button to make the dialogue go away, so I _wouldn't think_ that this causes the issue..any thoughts?
",shanewignall,rosshinkley
758,2016-08-29 14:32:18,"I agree with @Mr0grog.  The examples should probably use plain promises to minimize external dependencies.
",rosshinkley,Mr0grog
756,2016-08-30 16:16:59,"@rosshinkley I have added the test for timeout when no element exists, and it passes. Above you mention ""one handling the element existing before the timeout"", this test existed already for the .wait(selector) call, so for the .wait(selector, timeout) call I just added a non-existent selector and 150ms to ensure it still passes, it does not pass if I just wait for the ul.

Is there another specific case you want me to test for?
",noahtkeller,rosshinkley
752,2016-08-10 13:18:18,"@albinekb: To reproduce, you have to use the instructions in the README, i.e. run it in the environment provided in the Dockerfile. For example, this uses node v5.12.0 if this matters. 
",rrva,albinekb
747,2016-08-03 00:53:26,"@Mr0grog hm, that's odd.  I'm curious what changed, but in this case, I _imagine_ fixing it first might be simpler.

And yeah, I think a modification to the circle yaml to run `nvm install` for possibly all three versions in the `pre` would work.  Thoughts? 
",rosshinkley,Mr0grog
746,2016-08-03 05:18:46,"It looks like the `resetChanges` method from    8015fe0 splices the `cookies` namespace out of existence, causing those tests to fail.

Otherwise, +1.  Thanks, @Mr0grog :)
",rosshinkley,Mr0grog
746,2016-08-04 03:37:00,"@rosshinkley Looks like the fix is passing the tests now. A merge and release will be appreciated.
",voidmonk,rosshinkley
740,2016-07-30 16:26:04,"@voidmonk Out of curiosity, what version of nightmare are you using?

@Mr0grog is right, the provisional load failure is causing an exception.  In your last comment, that exception is handled, and should work fine (although your `.then()` that handles the status code will not be called).
",rosshinkley,Mr0grog
740,2016-07-31 00:59:40,"@rosshinkley Using Nightmare 2.5.3 (latest on npm I suppose).

Tested a bit more, but HTTP 304 is still hanging, and it doesn't raise any exception. All other HTTP errors invoke `catch` via `Promise.reject` in the first `then`.
",voidmonk,rosshinkley
740,2016-08-01 00:43:02,"@Mr0grog Yeah, same code. It times-out, but doesn't end gracefully. Try running it verbose: `DEBUG=* node 304test.js`. You'll see that there's no activity after `did-stop-loading` event, until it eventually times-out.

I think the expected behaviour for a 304 response should be for the Nightmare process to be terminated instantly (as Chrome does to the request) rather than wait endlessly & timeout. I was [told by the Electron guys](https://github.com/electron/electron/issues/6657#issuecomment-236465680) that it needs to handled by checking the response code in the `did-get-response-details` event.

Here's the modified full code, but now how do we suspend further events and end the Nightmare process on HTTP 304:


",voidmonk,Mr0grog
740,2016-08-01 06:07:45,"@Mr0grog That's strange. It just hangs for me on HTTP 304 until timeout. I'm using:

Ubuntu 14.04.2 LTS on AWS
Node.js v6.3.0
Electron (electron-prebuilt) v1.3.1
Nightmare v2.5.3
",voidmonk,Mr0grog
740,2016-08-02 23:44:21,"@Mr0grog Ah ok. So it this a bug in Electron or Nightmare? Any workaround to it?
",voidmonk,Mr0grog
740,2016-08-03 00:54:05,"@Mr0grog Thanks for looking into it, and for the quick fix!

Hoping for it to be merged and released to npm soon.
",voidmonk,Mr0grog
740,2016-08-03 05:23:08,"@rosshinkley Oh ok, no worries. Thanks again. I'll await the next release.
",voidmonk,rosshinkley
740,2016-09-06 01:52:52,"And as @rosshinkley noted, better to open a new issue when you have reproducible example :)
",Mr0grog,rosshinkley
737,2016-07-29 23:16:45,"Thanks @Mr0grog, that looks much cleaner.

On a related note, the process hangs if response code is HTTP 304: issue #740. Any clues on that one?!
",voidmonk,Mr0grog
726,2016-09-06 14:06:59,"@rosshinkley They did not auto-size the viewport to the content. Instead I had to do all of this:


",stevenvachon,rosshinkley
723,2016-07-14 18:53:21,"@rosshinkley correct, that is what i'm trying to do. However, i've also tried explicitly doing that, by Object.keys it, however in both cases the return is an empty array [object]. Unless you meant something completely different.
",xmen4u,rosshinkley
723,2016-07-22 22:16:02,"@rosshinkley: sure:

`nightmare.viewport(800,600).goto(url)wait().evaluate(()=>document.getElementById('selector').getBoundingClientRect()).then(bounds=>console.log(bounds. .... )).catch(...)`

where the console.log can be specific or JSON.stringify, i've tested both. 
",xmen4u,rosshinkley
723,2016-07-24 03:27:05,"@rosshinkley Thank you so much! this seems to work!
",xmen4u,rosshinkley
712,2016-07-08 18:42:27,"@rosshinkley restored branch so you can see the code, logs are also available again on this same build
",AVVS,rosshinkley
712,2016-08-09 15:26:18,"@rosshinkley not yet, still playing with this. Please leave this issue opened and I'll let you know
",AVVS,rosshinkley
712,2016-12-07 17:40:39,@rosshinkley recent versions seem fine & thanks for the tips,AVVS,rosshinkley
710,2016-07-09 10:21:40,"@rosshinkley https://www.npmjs.com/package/nightmare-iframe
https://github.com/segmentio/nightmare/issues/203
",div3rse,rosshinkley
706,2016-07-01 22:00:52,"@rosshinkley Oh man - I totally overlooked the casing being off... that solved it - so sorry to have bugged you for that. Thanks a ton for your excellent help!!!
",bradleygore,rosshinkley
703,2016-07-04 06:47:04,"@rosshinkley Thank you very much for your help.
",felix185,rosshinkley
693,2016-08-08 16:55:48,"@LinusU Bumping this thread - did you either get this resolved or put together a test case?
",rosshinkley,LinusU
688,2016-08-03 05:54:25,"@AaronTrazona or @rosshinkley, it has been about a month since there was activity on this thread. ny further headway made on this? On my end, I have electron processes hanging around when my app is idle and nightmare.end() has been called. 

Was any route cause or solution found?
",mashaalmemon,rosshinkley
687,2016-06-21 13:51:57,"@rosshinkley updated, thanks for the review
",agrberg,rosshinkley
680,2016-06-14 00:06:17,"Thanks for your help @mrjj and @rosshinkley - I'd completed forgot about the _asynchronous_ thing.

But I think I'm still doing something wrong :cry: 

Here is my complete code:



I'm receiving the following error message:

> TypeError: browser.goto(...).title(...).evaluate(...).exists(...).then(...).then
> (...).end is not a function
>     at Object.<anonymous> (C:\Code\test\app.js:16:6)
>     at Module._compile (module.js:541:32)
>     at Object.Module._extensions..js (module.js:550:10)
>     at Module.load (module.js:458:32)
>     at tryModuleLoad (module.js:417:12)
>     at Function.Module._load (module.js:409:3)
>     at Function.Module.runMain (module.js:575:10)
>     at startup (node.js:160:18)
>     at node.js:456:3

**Line 16 is on _end()_ call**

Thanks again, really appreciated your help
",gjmveloso,rosshinkley
674,2016-06-08 15:26:03,"@rosshinkley I just want to open an additional electron window to display the scraped image.
",Nisthar,rosshinkley
665,2016-06-10 00:06:55,"@rosshinkley : you need to use authentication() with setting 'proxy-server' (with out user + password)
",xmen4u,rosshinkley
650,2016-05-20 15:28:18,"@oliviervaillancourt Part one looks great, thanks for fixing that.  Part two I'd _probably_ leave as simply `example.js`.  The example is in the root of the project directory and is (I think) fairly obvious which example we're referring to.  The only remaining thing I can think of is possibly changing the README to say `example.js` instead of `yahoo.js` under the Examples heading on line 55 (which isn't your fault, I think it's been that way for quite a while).

@Mr0grog Thoughts?
",rosshinkley,oliviervaillancourt
650,2016-05-20 15:35:36,"Oh, ha, paths, didn’t even think about how those would be different on Windows when I noted it in #643 :(
Probably agree with @rosshinkley there.
",Mr0grog,rosshinkley
650,2016-05-20 15:54:52,"Sounds good to me.  I can make the change later on today and update the PR
(I guess this is doable, I've never tried to update a PR before)

Thanks

On Fri, May 20, 2016 at 11:35 AM, Rob Brackett notifications@github.com
wrote:

> Oh, ha, paths, didn’t even think about how those would be different on
> Windows when I noted it in #643
> https://github.com/segmentio/nightmare/pull/643 :(
> Probably agree with @rosshinkley https://github.com/rosshinkley there.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/pull/650#issuecomment-220639655
",oliviervaillancourt,rosshinkley
650,2016-05-20 15:55:51,"@oliviervaillancourt just make another commit on the same branch and it’ll automatically get picked up :)
",Mr0grog,oliviervaillancourt
650,2016-05-20 17:07:44,"Thanks Rob,

I'll try that tonight.

On Fri, May 20, 2016 at 11:55 AM, Rob Brackett notifications@github.com
wrote:

> @oliviervaillancourt https://github.com/oliviervaillancourt just make
> another commit on the same branch and it’ll automatically get picked up :)
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/segmentio/nightmare/pull/650#issuecomment-220645336
",oliviervaillancourt,oliviervaillancourt
650,2016-05-21 00:38:48,"Hey @rosshinkley and @Mr0grog,

I think I've updated this PR with the outcome of the discussion by simply stating `example.js` on line 55.

Let me know if you feel this should be done otherwise.

Thanks for your help
",oliviervaillancourt,Mr0grog
650,2016-05-21 00:38:48,"Hey @rosshinkley and @Mr0grog,

I think I've updated this PR with the outcome of the discussion by simply stating `example.js` on line 55.

Let me know if you feel this should be done otherwise.

Thanks for your help
",oliviervaillancourt,rosshinkley
650,2016-05-27 16:09:49,"Looks great.  Marking for inclusion.  Thanks for the effort, @oliviervaillancourt!
",rosshinkley,oliviervaillancourt
643,2016-05-18 16:08:16,"Hi @oliviervaillancourt, the selectors in the README were specifically chosen to be more robust against the regular changes Yahoo makes and they do still work: https://github.com/segmentio/nightmare/pull/613

It looks to me like it’s just `example.js` that is out of date (my bad; I completely failed to update it in the above PR.)
",Mr0grog,oliviervaillancourt
643,2016-05-19 00:51:36,"@oliviervaillancourt Right, your issues are with:
- README should say to run `node node_modules/nightmare/example.js`
- The actual content of `example.js` doesn’t match the example in the README

Both of those things totally need to be fixed! :thumbsup: on your PR changing those. I was only trying to say that it probably shouldn’t change the example code (changing the shell command is good) that is currently in the README (and, where it changes `example.js`, it should match the code in the README). Sorry if I worded it poorly!
",Mr0grog,oliviervaillancourt
643,2016-05-19 15:23:37,"@oliviervaillancourt just to +1 what @Mr0grog was saying: _please_, by all means, keep going.  The more contributors, the more people we have involved, the better. :)
",rosshinkley,Mr0grog
643,2016-05-19 15:23:37,"@oliviervaillancourt just to +1 what @Mr0grog was saying: _please_, by all means, keep going.  The more contributors, the more people we have involved, the better. :)
",rosshinkley,oliviervaillancourt
641,2016-05-18 14:36:33,"@Mr0grog Thanks for the comments!
",LinusU,Mr0grog
640,2016-05-20 15:38:33,"@Mr0grog I saw. :)  Doing my best to be thorough.

This looks good.  +1 to you sir.
",rosshinkley,Mr0grog
639,2016-05-18 07:58:37,"@Mr0grog your example works perfectly, but using `realClick` on a React button still doesn't work for some reason. I either get 'parent doesn't respond to .realClick' or just nothing happens. But thank you for the investigation nonetheless 👍 
",timotgl,Mr0grog
638,2016-05-18 15:32:25,"@Mr0grog nice idea! Thanks.
",atomless,Mr0grog
636,2016-05-18 15:31:16,"Hi @Mr0grog - well, that's a good thought, but the thing is I can run `Object.keys(...)` without error from everywhere in my test scripts with no error at all. I only get the error when it's run from within a function in a `wait()` or `evaluate()` call.
",atomless,Mr0grog
636,2016-05-18 17:16:35,"@Mr0grog yep - you must be right. I find it quite surprising that Ava's babel transpiler would mess with Object.keys though!
",atomless,Mr0grog
632,2016-05-31 15:50:18,"@LinusU It works fine with 1.0.x and (memory serving) 1.1.x, but some of the tests involving `webSecurity` break with 1.2.x.  I believe it's symptoms of electron/electron#5712, which have been fixed but as yet unreleased (at least with `electron-prebuilt`).  

I'm comfortable upgrading to a non-breaking version in the meantime, barring protest.  Thoughts?
",rosshinkley,LinusU
632,2016-06-02 11:11:15,"@rosshinkley @LinusU 
`1.2.1` is now released in `electron-prebuilt` https://www.npmjs.com/package/electron-prebuilt
I ran the tests with `1.2.1` and everything passes 🎉 
",albinekb,rosshinkley
632,2016-06-02 11:11:15,"@rosshinkley @LinusU 
`1.2.1` is now released in `electron-prebuilt` https://www.npmjs.com/package/electron-prebuilt
I ran the tests with `1.2.1` and everything passes 🎉 
",albinekb,LinusU
632,2016-06-07 09:45:28,"ping @rosshinkley @matthewmueller 
",albinekb,rosshinkley
632,2016-06-07 23:42:09,"@albinekb This will get pulled into the next version. :)
",rosshinkley,albinekb
631,2016-05-19 03:38:42,"@rosshinkley Nope, maybe this issue is WINDOWS-only, I tried to do it in CentOS, eveything goes well.
",Muyv,rosshinkley
631,2016-05-19 03:53:32,"@Mr0grog Thx, It seems a compatibility problem of `electron-prebuilt`. In fact I've already used another Phantomjs bridge to realize my requirements.
",Muyv,Mr0grog
629,2016-05-10 16:28:32,"Thanks @Mr0grog. I'll go and give it a try again. Thanks for your help.
",chrisgeo,Mr0grog
629,2016-05-11 16:50:06,"Hey @Mr0grog,

Sorry for opening this up again, but looking at the promise example, I'm not positive generators would work inside of it.

Here's an example based on your suggestion:



It's possible for my use-case that using the generator form may be better altogether because I have other actions that need to occur after `.then`, an example building off the original, 
- Login fails, fail and take screenshot
- Login success, go to the next page
  - do a few actions
  - take a screenshot.
",chrisgeo,Mr0grog
628,2016-05-10 13:21:50,"@Mr0grog Thanks. 

Yes, I can see I should have provided more context with my question. Specifically, I am using Nightmare.js with the testing framework [Ava](https://github.com/sindresorhus/ava) - (incidentally Nightmare and Ava almost feel made for each other!).

I am writing a series of functional tests for my app, that run in serial and tend to each perform a small action and/or then test a single part of my app's state. So they tend to look a lot like this:


",atomless,Mr0grog
628,2016-05-11 08:31:20,"I agree with @Mr0grog, and I think that it would be weird API-wise if `wait` returned a `Promise<bool>`.

I've been using Ava with Nightmare as well and a just to `await browser.wait(...)`, it will throw an error if the promise is rejected.
",LinusU,Mr0grog
628,2016-05-11 09:07:14,"@Mr0grog yes, you are correct that you could choose not to use the assertion and it would still work - although I'd still like to attempt to have a descriptive fail message - unfortunately when ava times out the error message is not shown even with the assertion :(
",atomless,Mr0grog
628,2016-05-13 14:49:07,"@LinusU Bingo - set Ava's timeout so that it's longer than the 30s Nightmare.js wait timeout and I now get the proper test failure message when the wait times out. Thanks!
",atomless,LinusU
628,2016-05-13 17:06:47,"@Mr0grog even better - thanks!
",atomless,Mr0grog
627,2016-05-09 13:10:54,"@rosshinkley Thanks for the answer. Your fork looks awesome, just one thing I cannot get pagination to works. Is there anything special I need to config?
",ivawzh,rosshinkley
619,2016-05-06 18:54:13,"@maiopirata your code above seems perfectly correct. What are you expecting to have happen? Do you have a `click` event listener on the `div` or on an element that contains it? When you dispatch a simulated event this way, an element _inside_ the div at the given position _will not receive the event._ This will also not automatically trigger the relevant `mousedown` and `mouseup` events, so if you are actually listening for those, your listeners will not be triggered.

It is also worth noting that none of the default behaviors that a browser does will be triggered when you dispatch events this way (that’s why you might want to use `webContents.sendInputEvent` as @rosshinkley mentioned—that _will_ cause default browser behaviors).

Side note: you can actually get the position of the element relative to the viewport much more easily than you are doing above:


",Mr0grog,rosshinkley
619,2016-05-06 21:41:58,"Thank you @Mr0grog for your answer. I will definitely test webContents, it seems that this is the point.
Thank you also that you show me bounds.left, top.. It would have saved me a lot of time knowing it some days before.

I will let you know soon
",maiopirata,Mr0grog
619,2016-05-10 18:42:44,"I'm trying to do similar as well. I want to write automation tests for canvas drawing and need to do mousemove/mousedown/mouseup at a specific coordinate (x,y).

Is there any reason _not_ to attempt to expose a method like sendEvent that PhantomJS has? 
http://phantomjs.org/api/webpage/method/send-event.html

For this specific use case, I was able to get sendEvent working with PhantomJS events, but would prefer Nightmare because it's just a lot nicer/cleaner overall. Initially I just assumed it was an Electron bug/ swallowed event, but figured I'd ask first if it was working as intended. 

@rosshinkley I'm not sure this is fancy, but I'm not sure how to make the driver yet either. :)
",dsowsy,rosshinkley
619,2016-05-10 21:47:48,"@rosshinkley do you have any idea why the `click()` (and `mouseover/mousedown`) action doesn’t use `sendInputEvent`? Assuming no, since according to git, they pretty much appeared out of whole cloth, but asking just in case.

Seems like upgrading them to use `sendInputEvent` would be more “correct,” though it would change behavior slightly. (Maybe a good v3 change?)
",Mr0grog,rosshinkley
619,2016-05-18 16:47:23,"> @rosshinkley do you have any idea why the click() (and mouseover/mousedown) action doesn’t use sendInputEvent? Assuming no, since according to git, they pretty much appeared out of whole cloth, but asking just in case.

I _suspect_ it's because `sendInputEvent` wasn't a part of the Electron API when 2.x was initially released.  (The release dates differ by something like 10 days, memory serving.)  I also suspect that it worked Good Enough&trade;, so before now there hasn't been a real reason to change it.

> Seems like upgrading them to use sendInputEvent would be more “correct,” though it would change behavior slightly. (Maybe a good v3 change?)

I'd like to (like you) see more usage before making the change, but I also agree this feels much more in the spirit of ""doing things as an actual user would"", which is in keeping with the spirit of Nightmare.  Given that it seems to be causing enough problems, I'd be open to moving it into core.  Thoughts?
",rosshinkley,rosshinkley
618,2016-05-04 15:10:16,"This is perfect @rosshinkley. Thank you for your clear explanation and your time. I appreciate it. :)
",kud,rosshinkley
617,2016-05-05 11:54:31,"@rosshinkley @mingsterism
Using `Array.from()` is a nicer way to do this ;)


",albinekb,rosshinkley
617,2016-05-05 13:40:36,"@albinekb Ah, true.  Thanks for pointing that out.
",rosshinkley,albinekb
612,2016-04-29 20:02:32,"@Mr0grog true.  The reason i roped #405 in as a ""maybe"" was because it didn't _always_ crash the process, sometimes it would hang with no useful info.  It's possible that was hitting two different problems.
",rosshinkley,Mr0grog
612,2016-05-03 15:35:56,"@rosshinkley, here's a separate log file this https://drive.google.com/a/conversion.com/file/d/0B5HUOoRm9YUbR1FtaVphZjR6TWc/view - thanks for  that useful tip! Unfortunately I couldn't recreate the issue when running `async.queue` with `1` as the concurrency parameter, so the log file is showing it as `10` so perhaps that may be it? Ideally I'd like to run Nightmare multiple times as I want to scrape thousands of websites everyday and doing it one by one is not really feasible...
",JWMarchant,rosshinkley
612,2016-05-03 23:41:12,"Ok, I’ve only gotten this to reproduce a few times, but it seems like the issue is well below Nightmare or Electron—the HTTP request for the initial HTML content of the page never actually closes and finishes, so we never move on to evaluating the JS that gets `window`. I’m not sure if this is something funky with Treehouse’s server (I _only_ observed this behavior with Treehouse), with Chromium, or deep in the network stack on the OS.

On the Electron side, we get response details for the beginning of the HTML and we get the `dom-ready` event, but we get no finish or failure events. Inside the browser window, `document.readyState` never moves from `interactive` to `complete` and the window’s `load` event never fires. Oddly, though, the `DOMContentLoaded` event _does_ fire.

So… I’m thinking the best way to address this is:
1. Listen for the `dom-ready` event on `webContents`.
2. Add a timeout to `goto` (default it to… 30s? Make it customizable… by goto call? By Nightmare instance?) If the timer runs out and `dom-ready` has happened, consider the load successful. If the event didn’t happen, consider the load a failure.

Alternatively, we could just have the timer and consider it a failure regardless of what events have happened. I can certainly understand that argument given that things inside the browser window are certainly not in a 100% a-ok state (though they do seem 99.999% ok).

@rosshinkley thoughts?
",Mr0grog,rosshinkley
611,2016-05-02 10:08:46,"Thank you @rosshinkley.
",kud,rosshinkley
610,2016-04-29 01:50:01,"@yoz thanks for the advise. I followed your direction on the wikipedia selectors. Turns out, it was a (dot) i had to put in. `.central-featured-lang.lang1`. 
However, I still cant get the actual href element using CSS selectors. It gives me the entire line. I posted the question on stackoverflow as well. http://stackoverflow.com/questions/36928172/how-to-get-href-text-using-css-selectors 

For .wait(#main) on yahoo, I too had a hang. However, I tried a workaround and it worked. 

Below the whole wait function from actions.js



I took a method of the wait function and implemented that directly in my code instead and it worked for some reason. 
Added `exports` to implement in my code. Implement with `waitms(5000)`



Maybe something for others to check into. 

In regards to the .click() issue, what actually happened was electron was redirecting yahoo to my country specific yahoo. Thus the selectors were wrong. I changed the selectors with my specific yahoo url  `'https://sg.yahoo.com/?p=us'` , and it worked.  
",mingsterism,yoz
606,2016-04-28 01:32:06,"@rosshinkley I got the output below. 



Any ideas on the error? 
",mingsterism,rosshinkley
606,2016-04-28 03:37:04,"@rosshinkley I posted a new issue on the followup of the error. Appreciate your help. Thanks very much. 
",mingsterism,rosshinkley
605,2016-04-28 01:21:52,"@rosshinkley Thanks for the clarification. 
",mingsterism,rosshinkley
603,2016-04-26 21:35:53,"Ahh, that actually clarifies things quite a bit. Apparently `:first` [isn't supported](https://developer.mozilla.org/en-US/docs/Web/CSS/:first) and I happened to be testing only that. 😿  Found alternative to it by using `:first-child`. Thanks, @Mr0grog 
",shri3k,Mr0grog
602,2016-04-26 20:13:05,"@Mr0grog Just tried that. Getting this error now:

`electron:stderr /vagrant/code/node_modules/electron-prebuilt/dist/electron: error while loading shared libraries: libgtk-x11-2.0.so.0: cannot open shared object file: No such file or directory +0m`
",jamesaspence,Mr0grog
602,2016-04-26 21:52:10,"@Mr0grog Do I need to? I was working under the assumption that nightmare would start the virtual display itself. Maybe that was my problem.
",jamesaspence,Mr0grog
602,2016-04-27 16:30:19,"@Mr0grog It literally just sits, printing nothing. Switching to `DEBUG=nightmare node workbench.js` shows me the nightmare log, which looks something like this:



I also get this error now:



EDIT: Never mind, now the original debug command is returning errors as well. Following output:



EDIT 2: We're back to nothing after I tweaked my code again. No output, process just hangs forever.



This outputs nothing again. Changing to `DEBUG=nightmare` outputs:


",jamesaspence,Mr0grog
602,2016-04-27 17:30:38,"That's .... baffling.  @yoz might have been on the right track, but the suggestion there looks like it would work for npm2, not npm3.  If you look at `node_modules/electron-prebuilt/dist`, does `electron` exist there?

I'd also be curious if you explicitly installed `electron-prebuilt` and/or explicitly set [`electronPath`](https://github.com/segmentio/nightmare#electronpath) if that might have any effect.
",rosshinkley,yoz
596,2016-04-25 19:03:24,"There’s no super-easy way, but, as @rosshinkley noted, I wrote a short description of what you can do to counterract this [at the bottom of #498](https://github.com/segmentio/nightmare/issues/498#issuecomment-210710684). You could use a similar mechanism to [set the window’s content area](http://electron.atom.io/docs/v0.37.7/api/browser-window/#winsetcontentsizewidth-height-animate) instead of using Nightmare’s `viewport()` method.
",Mr0grog,rosshinkley
592,2016-05-27 20:02:38,"@trusktr did @Mr0grog's suggestions work for you?
",rosshinkley,Mr0grog
592,2016-05-27 21:02:44,"@rosshinkley I haven't tried it yet. Seems like it will though. I'll re-open if I get around to it (or if anyone reading tries and it doesn't work, they can re-open too).
",trusktr,rosshinkley
587,2016-12-14 23:59:20,"@yoz, that answer was right on the money. I was troubleshooting very unpredictable behaviour in a docker vs on my Mac and traced it to exactly this issue. Many thanks.",mashaalmemon,yoz
586,2016-04-21 01:22:08,"> I'm wondering now is if instead of exiting, the Nightmare instance should be put into an error state where any further calls would cause exceptions as the IPC parts are no longer reliable.

I definitely think this would be great. But some thoughts: there are two different kinds of `uncaughtException` handlers and I think the story is a little different for each.
1. Exceptions in the child (electron) process. This is what #558 was about. I think the reality here is that when this happens, we pretty much have to assume everything in the process (and therefore in the Nightmare instance controlling it) is hosed. I think you’re on the right track here, @rosshinkley:
   1. Treat this like an error in any action, stopping all running queues, and calling the callback/rejecting the promise for each of them with information about the exception.
   2. Marking the instance as dead so any later calls to `run/then/end` either throw or reject (I’d lean towards reject, but throwing might make sense, too). The same goes for when the Electron process crashes, which is currently totally silent. 😱 Arguably, we should be doing this when the instance is explicitly ended, too (IIRC, you can currently call `run/then` again after the process is ended and have unclear problems).
2. Exceptions in the parent (user) process (the handler @demongloom cited). As I’m thinking about this one more critically now, **I’m not sure we should be handling this event at all:**
   - Handling it is not great practice for library code (as opposed to user code) because it changes the behavior of the process. We “fixed” this in #554, but this gets in the user’s way if they want to not crash on an exception (rarely ever a good idea, but _sometimes_ there are legitimate reasons). In hindsight, the better fix for #554 might have been to just remove the handler altogether.
   - Handling it in order to clean up the electron process is unnecessary because we already trap all the possible close/exit/signal events and cleanup there. Whether the system exits because of an uncaught exception or the user explicitly does so in their own code, we’re still covered without trapping this event.
   - Presumably the handler was originally added to ease debugging, but what about cases where Electron is a useful additional piece of functionality in a larger app, rather than the central purpose of someone’s app? It’s not great to just be spewing stack traces to the console if they’re trying to redirect errors somewhere else (logs, a remote service, etc). (If we really like this functionality, maybe send it to `debug` and then only exit the process if there are no other uncaught exception handlers?)
   
   To some extent, I simply did wrong by adding the `endInstance` call to the existing uncaught exception handler on the parent in #487. We don’t have to assume, unlike with the child process, that Nightmare’s internals are hosed here. It’s plenty likely that the exception came from code that didn’t have anything to do with Nightmare.
",Mr0grog,rosshinkley
579,2016-04-26 13:37:55,"@Mr0grog Good.

I'm considering opening a branch off of master for v3 parts.  Would you be willing to complete this PR and put it against that branch?  Thoughts on doing such a thing?
",rosshinkley,Mr0grog
579,2016-04-29 18:55:48,"@rosshinkley do you want a new PR pointing to another branch, or should this still be going to master? (per discussion the other day about whether this is v2.4 or v3 feature)
",Mr0grog,rosshinkley
575,2017-02-11 05:28:52,"@rosshinkley writes in #979 

> TL;DR: don't use .run(). It's a holdover from Nightmare 1.x. Use .then() instead.

If that's indeed the case, let's decide this & close this issue.

My 2 cents, without getting into the whole history here, is the syntax of `run()` is nice, and I don't really understand why it can't/shouldn't be a wrapper. But whether it is supported or isn't supported, a decision one way or another would be nice :)",ripper234,rosshinkley
574,2017-01-02 21:19:34,"Closing as this as like @Mr0grog said, that isn't _really_ what Nightmare is intended for.  There may be a future where this is doable, but not for now.",rosshinkley,Mr0grog
572,2016-04-16 15:26:35,"@Mr0grog Thank you for putting in the legwork.  Hopefully that electron issue will be resolved soon.
",rosshinkley,Mr0grog
568,2016-04-14 15:43:28,"@fritx As I understand it, the internal projects at Segment are all kind of lumped together under the `segmentio` account.  To prevent possible security problems, and to avoid [permission issues](https://gitter.zendesk.com/hc/en-us/articles/200178971-You-want-write-access-on-my-private-repos-Are-you-insane-), we'll be using the room for my fork for the time being.  There is work being done at Segment to get the public and private repositories separated.  When that is complete, I'll have the account owner create the gitter room for this repository and transfer the history.  That way we won't lose anything.

Make sense?
",rosshinkley,fritx
568,2016-04-18 02:30:20,"@rosshinkley sounds great! Awesome! :+1:
",fritx,rosshinkley
565,2016-04-15 00:19:21,"Extra minor note here (sorry I completely missed you posting this PR, @rosshinkley): it might be nice if the two new scripts got sequestered into their own directory since they aren’t really part of the tests per se. Maybe `/scripts` or `/test/scripts`?
",Mr0grog,rosshinkley
565,2016-04-15 00:28:26,"@Mr0grog Ah, that's no problem.  I pulled it in because I was getting frustrated with documentation-only PRs failing in CircleCI.  Irritation-driven acceptance is a thing, right?

Kidding aside, that's not a bad call.  I'll put it on the list. :)
",rosshinkley,Mr0grog
564,2016-05-20 09:03:15,"Hi @misbach. Not yet, no, but in my other issue (#612) @rosshinkley and @Mr0grog seemed to be onto something and there is a pull request (#640) that might solve this.
",JWMarchant,rosshinkley
564,2016-05-27 19:58:58,"@JWMarchant @misbach @Mr0grog for what it's worth, #640 has been released with 2.5.0.
",rosshinkley,Mr0grog
564,2016-05-31 16:29:27,"Hi @rosshinkley & @Mr0grog,

Unfortunately it seems I'm still getting the error.

Here is my code:



The command I ran was: `DEBUG_FD=3 DEBUG=nightmare:* ELECTRON_ENABLE_LOGGING=true ELECTRON_ENABLE_STACK_DUMPING=true node nightmare.js 3>debug.log`.

My package.json:



And the log file: [https://drive.google.com/file/d/0B_3Tmwogoca7eWRYQWo5cFhfVXc/view?usp=sharing](https://drive.google.com/file/d/0B_3Tmwogoca7eWRYQWo5cFhfVXc/view?usp=sharing)
",JWMarchant,Mr0grog
564,2016-05-31 16:29:27,"Hi @rosshinkley & @Mr0grog,

Unfortunately it seems I'm still getting the error.

Here is my code:



The command I ran was: `DEBUG_FD=3 DEBUG=nightmare:* ELECTRON_ENABLE_LOGGING=true ELECTRON_ENABLE_STACK_DUMPING=true node nightmare.js 3>debug.log`.

My package.json:



And the log file: [https://drive.google.com/file/d/0B_3Tmwogoca7eWRYQWo5cFhfVXc/view?usp=sharing](https://drive.google.com/file/d/0B_3Tmwogoca7eWRYQWo5cFhfVXc/view?usp=sharing)
",JWMarchant,rosshinkley
564,2016-06-14 16:28:20,"Thank you @Mr0grog.  This is amazingly helpful in helping me make sure I'm properly cleaning everything up.  I've glazed through the nightmare code, but methinks I need to spend a good while staring at it as it is non-trivial code.

Partitions did not fix it.

BUT when I inspect the .running flag on the nightmares, it is sometimes still true.  I'm doing each goto with something like this code snippet:



So currently I'm just punting on the nightmare pool request until it is no longer running (and making a new nightmare in cases where I try to reach it too many times while it is still running).  

Do the promises or the .then not force the nightmare to finish running?  Is there a way to do so without ending the instance?  When I refuse to use a nightmare instance when I get a true for ""running"", it ceases to crash, so I suspect the .then is a lie?  Is there some other way I'm unaware of to force the goto to finish?
",catblade,Mr0grog
559,2016-04-08 21:38:33,"@djdavidi I'd be open to including a bit about unicode characters.
",rosshinkley,djdavidi
559,2016-04-12 17:31:41,"@Mr0grog I meant to do that yesterday after 2.3.1 and got sidetracked.  Closing.
",rosshinkley,Mr0grog
558,2016-04-18 17:51:26,"@yoz ah, that’s frustrating. It sounds like the issues in Electron are fairly thorny.

I get wanting to be able to continue on after Nightmare fails, but I’m pretty sure Nightmare really does not handle the underlying Electron process failing very gracefully. A lot more would need to be done to fix that if you want it to be safe to not just exit the process when Electron fails. It would probably be a good improvement if you want to work on it, though!
",Mr0grog,yoz
558,2016-04-18 18:01:08,"@Mr0grog yes, unfortunately it's a pretty difficult bug to reproduce. I would look into it if I had an easier time with that. But I think the easiest for me is to downgrade my version of electron-prebuilt to 0.36.8.
",yoz,Mr0grog
558,2016-04-23 22:59:00,"@yoz electron/electron#4733 was fixed/reclosed in electron/electron#5233, which should be in the release of `electron-prebuilt` Nightmare is on as of 2.3.4.  Can you upgrade and see if this issue still exists?
",rosshinkley,yoz
557,2016-04-28 01:12:15,"@rosshinkley  sorry, im busy lately thanks im good.
",AaronTrazona,rosshinkley
555,2016-04-11 09:11:50,"@Mr0grog Thank you so much for this. I will try and report back :+1:
",bahlo,Mr0grog
555,2016-12-19 21:37:16,"@Mr0grog : thanks a ton for your effort! 
It looks like your commit using the debugger highlighting has solved this hanging process issue for me. 
I did notice that once in awhile it seems like the rectangle that I'm passing in (for size & location of screenshot to be captured) is sometimes off. Perhaps that's related to the Electron window size bug you mentioned there?",mackermedia,Mr0grog
554,2016-04-06 07:58:48,"Hi @Mr0grog, that's for the feedback. I thought about adding a test, but didn't as you're not meant to do anything after an uncaughtException in user space. However I've looked through some of your tests and seen you have some (rather nice!) tests using child processes so I'll have a go at encapsulating a test.
",pci,Mr0grog
554,2016-04-11 08:12:10,"@Mr0grog No problem, it was only because we introduced an error into our test framework that we found this bug, so you're in good company! Do you want this rebased into one commit?
",pci,Mr0grog
554,2016-04-11 14:54:20,"I'd leave it as-is, I like having the history, and this isn't all that noisy.  I don't see a real need for a rebase.  (I also don't _really_ know what would be considered ""most correct,"" but that's the stand I'm taking, at least for now.)

I do have commit rights on github and publish rights on npm.  (Hooray!)  I'll be putting together a milestone + release ... soonish.  At a minimum, I'd like to get this + #553 in.  The underlying Electron PRs (thank you, @Mr0grog) have all been accepted, but I don't think they've all been released (at least at the time of this comment).
",rosshinkley,Mr0grog
554,2016-04-11 16:05:14,"@Mr0grog fair enough.  Can always cut another patch when #553 is done.  Will do as time permits.
",rosshinkley,Mr0grog
553,2016-04-07 14:18:07,"@Mr0grog re your previous comment: like I said, my knowledge there was limited.  Thanks for setting me straight.  :)

I _really_ like `.goto()` returning information about the request.  One question about that, and this may be silly: I see in your tests that [valid redirects are okay](https://github.com/segmentio/nightmare/pull/553/files#diff-910eb6f57886ca16c136101fb1699231R233), but it doesn't check the internal information bubbled up from `.goto()`.  Based on the changes you've put in, would that show the 3xx?  At first blush, I don't think it would - wouldn't it show the 2xx (assuming success) for the final destination (after `did-finish-load`)?

To be clear: I'm not sure `.goto()` should track all of the redirect information from a given request, but I do want to clarify what to expect.  Thoughts?

It looks like atom/electron#5029 has been accepted and as such atom/electron#5013 has been fixed.  I don't know what kind of release schedule Electron is on, but they cut releases often enough that I think I'm willing to wait as it reduces the complexity of your solution (seemingly by quite a bit).  What do you think?

Onto the test issues: I can't get the test suite from your fork to run consistently.  The ""should fail properly if request handler is present"" test fails intermittently.  It looks like once in a while, `did-fail-load` gets emitted after `did-finish-load`.  (That's the difference in debug output anyway.  I'm not clear on the underlying cause yet.)  Coincidentally, that appears to be one of the problems in build 662.  I don't have time to dig into this right this moment, but as time permits today, I'm going to dig into this and the other CircleCI issues.
",rosshinkley,Mr0grog
553,2016-04-07 17:07:04,"9cfef7c should mitigate one of the issues I saw repeated on Circle last night: trying to load an unknown protocol seems to hang. It doesn’t do so locally, nor does it if I SSH into the Circle box and manually run the tests from the command line. Not sure what’s different when Circle does its test run, but  ¯\_(ツ)_/¯

This doesn’t fix the intermittent ""should fail properly if request handler is present” issue you found, @rosshinkley. I noticed that sometimes on Circle, too, but wasn’t able to repro locally and haven’t dug into it yet, so if you’ve got ideas, awesome. 

> It looks like once in a while, did-fail-load gets emitted after did-finish-load. (That's the difference in debug output anyway. I'm not clear on the underlying cause yet.)

_Sigh._ Hope this is not what’s really happening, but that would definitely cause this sort of problem :(

> I see in your tests that valid redirects are okay, but it doesn't check the internal information bubbled up from .goto(). Based on the changes you've put in, would that show the 3xx? At first blush, I don't think it would - wouldn't it show the 2xx (assuming success) for the final destination (after did-finish-load)?

Oh, that’s a good question. I’m pretty sure it would show the 2xx for the final destination, but haven’t tested that case. I’m also not sure I’ve tested the case of invalid redirects.

> I'm not sure .goto() should track all of the redirect information from a given request, but I do want to clarify what to expect.

I actually hadn’t thought about this case _at all!_ It would be interesting to report on all the redirects involved, but I hadn’t really planned to. So yes, no reason to expect that.

> I don't know what kind of release schedule Electron is on, but they cut releases often enough that I think I'm willing to wait as it reduces the complexity of your solution (seemingly by quite a bit). What do you think?

Yeah, I’m not sure either, though they do certainly release often. Buuuuuuut gathering the response details also relies on the URL check, so https://github.com/electron/electron/pull/5029 no longer removes the need for the `onBeforeRequest` madness. I’ve just filed https://github.com/electron/electron/issues/5074, which would fix this for us.
",Mr0grog,rosshinkley
553,2016-04-12 14:24:54,"@Mr0grog Thank you for all of the work you've done for this. :)
",rosshinkley,Mr0grog
553,2016-04-15 17:34:18,"@rosshinkley I think this is good to go. All green and no webRequest stuff.
",Mr0grog,rosshinkley
553,2016-04-15 18:58:50,"@Mr0grog _Awesome._  I'll put this out as soon as I can carve the time out.
",rosshinkley,Mr0grog
549,2016-04-08 17:32:48,"@rosshinkley  thank you
",suhaotian,rosshinkley
548,2016-04-15 20:02:31,"@yoz Any updates?

By the by, the tests were fixed with a makefile/shell script stopgap in #565.
",rosshinkley,yoz
548,2016-04-15 20:06:48,"@rosshinkley Sorry, got caught up in other work - I think it makes sense to add focus/blur events when clearing inputs, too. Will hopefully get to that later today.
",yoz,rosshinkley
548,2016-04-16 15:34:14,"@yoz I understand.  Thanks for putting it together!
",rosshinkley,yoz
546,2016-04-07 21:30:39,"I know this has been sitting for a bit but wanted to make a minor note here. @wyqydsyq you should be able to make your final `then()` to end the test work by simply _returning_ `t.end()`, like so:



As @rosshinkley noted, “`.end()` puts another action in the action queue, same as anything else,” so just calling `.end()` at the end queues up the end action, but never executes it. Returning a thennable from a promise handler causes that thennable to be run automatically, so the above code is _kind of_ like:



…but either way, yeah, this is definitely a little confusing :\
",Mr0grog,rosshinkley
546,2016-04-09 10:17:01,"@rosshinkley @Mr0grog your explanations are very helpful but you confuse `t.end()` and `window.end()`. I won't check your code snippets but this works, @wcjohnson11 :


",kuraga,Mr0grog
546,2016-04-09 10:17:01,"@rosshinkley @Mr0grog your explanations are very helpful but you confuse `t.end()` and `window.end()`. I won't check your code snippets but this works, @wcjohnson11 :


",kuraga,rosshinkley
546,2016-04-09 10:23:19,"P.S. @rosshinkley , Add `queue` argument to callbacks, maybe? And why result of `nightmare.then(cb)` isn't chainable? Is it good that `TypeError: nightmare.goto(...).wait(...).exists(...).then(...).end is not a function`?
",kuraga,rosshinkley
546,2016-04-11 05:50:23,"Oh boy, I didn't read carefully either.  I apologize.  Good catch, @kuraga.

> P.S. @rosshinkley , Add queue argument to callbacks, maybe? And why result of nightmare.then(cb) isn't chainable?

It is... insofar as `.then()` returns a native promise, and can chain promise methods off of it (eg, another `.then()`).

> Is it good that TypeError: nightmare.goto(...).wait(...).exists(...).then(...).end is not a function?

Promises don't expose `.end()`, Nightmare does.  Once you call `.then()`, you're not dealing with a Nightmare instance anymore, you're dealing with a native promise.  If you wanted `.then()` to execute (and clear the queue) _before_ calling `.end()`, something like:



... should work.
",rosshinkley,rosshinkley
546,2016-04-11 18:26:35,"@rosshinkley @Mr0grog @wyqydsyq 
Hm, but for `.evaluate` it really doesn't work!


",kuraga,Mr0grog
546,2016-04-11 18:26:35,"@rosshinkley @Mr0grog @wyqydsyq 
Hm, but for `.evaluate` it really doesn't work!


",kuraga,rosshinkley
545,2016-04-23 22:51:04,"Not sure that it matters, but you might want to also override [the Electron path](https://github.com/segmentio/nightmare#electronpath).  I don't _think_ the paths changed from 0.36.x to 0.37.x, so @Mr0grog's directions should work, but it can't hurt to be sure.  You may also want to run your application with `ELECTRON_ENABLE_LOGGING` in tandem with `DEBUG=nightmare:*,electron:*`.  That might give you a little more information.

What bothers me about the original log text is that the error is a page error from `.onClick()`, so I'm not certain it's because of the screenshot.  If I had to guess, I'd guess that there's a problem in PayPal's client code when you click on `#loadLogin`.  If you run the steps by hand in Chrome with the devtools open, do you get the same error?
",rosshinkley,Mr0grog
545,2016-04-25 19:55:49,"Regardless, since it’s a crash in Electron, getting the crash report would help a lot. It’s extremely hard to know what’s causing the crash without either a reproducible test case or knowledge of what Electron is actually doing when it crashes (from the crash report).

If you can’t get the crash report from the system, you can also try setting `ELECTRON_ENABLE_STACK_DUMPING` (not just `ELECTRON_ENABLE_LOGGING`) alongside `DEBUG=electron:*` as @rosshinkley suggested. That’ll at least get you something similar to the system report.
",Mr0grog,rosshinkley
545,2016-04-25 20:09:08,"@Mr0grog This is about a thousand miles offtopic, but would it be worth implementing a crash report server internal to Nightmare so the child Electron instance submits crash reports directly to the parent process? 
",rosshinkley,Mr0grog
544,2016-03-27 23:15:33,"@rosshinkley Ok will do!
",justinmchase,rosshinkley
544,2016-04-02 22:22:28,"Thanks, @justinmchase.  Merging.
",rosshinkley,justinmchase
543,2016-03-25 14:01:53,"Thanks @rosshinkley, it's all clearer now. I still have some doubts about the general behaviour of the framework: when I try to do some action after an evaluate-then couple, I get an error. So what if I want to do some stuff, then evaluate something on the page, then continue the navigation (i.e. go to a second link of the site with goto)? This is useful if I want to use always the same Electron window to retain the logon credentials.
",johncornell,rosshinkley
538,2016-03-30 03:57:34,"@brrd I'm sorry, I must have missed #475.

@justinmchase Agreed, closing as duplicate.
",rosshinkley,brrd
538,2016-03-30 03:57:34,"@brrd I'm sorry, I must have missed #475.

@justinmchase Agreed, closing as duplicate.
",rosshinkley,justinmchase
537,2016-03-17 10:43:21,"@rosshinkley big thanks about explanation!

> > if I can use Nightmare with vanilla NodeJS and without Mocha.
> 
> Of course! As of Node 4.x, promises are natively supported.

I meant ""without `mocha-generators`, `mocha`, `co` and `vo`"".

> Please note that the examples are using the `mocha-generators` package for Mocha, which enables the support for generators.

Is this description wrong here? Do you mean ""which wraps generator function with `co`/`vo`"" instead of ""enables the support for generators""? NodeJS 4.2 does support generators (so they are already ""enabled"") but seems like code doesn't work without `mocha-generators`.
",kuraga,rosshinkley
537,2016-03-18 18:08:25,"> No, it does not. If you use vo or co or mocha-generators, it takes care of that for you. If you wanted to use `yield` and `.then()` in vanilla JS with no dependencies, you'd have to manage the promise chain yourself. 

That's exactly I wanted to hear. Remember my words:

> > Please note that the examples are using the `mocha-generators` package for Mocha, which enables the support for generators.
> 
> Is this description wrong here? Do you mean ""which wraps generator function with `co`/`vo`"" instead of ""enables the support for generators""?

Let's precise documentation?

Thanks, @rosshinkley !
",kuraga,rosshinkley
535,2016-03-16 20:19:29,"Hey @rosshinkley,

Thank you, yeah sorry I removed my SO question should have updated here I actually did not have my `.dev` domain added to me ehosts and Chromes `.dev` magic was working for me but electron obviously does not do that.

Sorry for the question felt like a fool when I figured it out.

Cheers,
Otis.
",CrashyBang,rosshinkley
531,2016-03-16 18:58:26,"@rosshinkley I figured it out, this issue is not relevant to me anymore. I used the persistence options.
",rclai,rosshinkley
531,2016-03-16 23:26:45,"@rosshinkley, problem is even with .something.abc.com, it does not work. What I wanted to do is as simple as set cookies before I start anything, but still can not find out a way
",Velissel,rosshinkley
531,2016-03-17 02:16:45,"@rosshinkley, the procedure is like this, I firstly go to google, then try to set cookies of a session I extracted from something.abc.com so that multiple newly opened instances will have the same session when I change those instances to something.abc.com, but it fails all the time no matter if domain is .something.abc.com or something.abc.com.

I tried it with phantomJS, it works with dot prefixed. Maybe it is the implementation of electron preventing it?

As far as I know, cookies without dot as prefix is usually set through set-cookie header section of a server's response, but most modern browsers consider cookies with or without dot at beginning the same now, so I was expecting electron to act the same...

BTW, using persist:somthing does not work for the website I am working on
",Velissel,rosshinkley
527,2016-04-18 05:04:37,"> > I'd prefer to err on the side of compliance over not. Thoughts?
> 
> I would generally agree. But since @matthewmueller didn’t write any docs and didn’t invite any discussion or review of the feature, I didn’t want to make an assumption about whether the non-compliant behavior was intended or just a bug.

Since this has sat for more than a month with no feedback from @matthewmueller , I’m going to go ahead and just transform it from a question to a statement and call it a bug:

`then()` **should** act like Promises/A+ `then()` and ES6 Promise `then()`. The second argument should not be called because of an exception while running the first argument.

If that’s cool with you, @rosshinkley. The implications are minor and, I think, an improvement.
",Mr0grog,rosshinkley
527,2016-04-18 20:07:40,"> If that’s cool with you, @rosshinkley. The implications are minor and, I think, an improvement.

👍 Absolutely.  Please, go ahead.
",rosshinkley,rosshinkley
525,2016-04-03 03:53:49,"@antpaw Yeah, there are intermittent failures I haven't gotten to the bottom of.  Have you had any luck?
",rosshinkley,antpaw
525,2016-05-24 16:55:18,"@antpaw Have you given this a try with later versions?  I wonder if you're hitting the `Xvfb` hang from #561.
",rosshinkley,antpaw
525,2016-05-31 14:18:34,"@rosshinkley hey, i've just checked the 2.5.0 version, it still hangs without any logs. the highest version it works for me is 2.1.3
",antpaw,rosshinkley
525,2016-05-31 14:21:56,"@antpaw Do you have `DEBUG` output?  What version of Node are you running?
",rosshinkley,antpaw
524,2016-03-08 14:57:25,"> So the fix is as simple as inserting a newline after the injected file’s source code:

@Mr0grog Ah, thank you.  I haven't had time to double back and take a look at why the versions that are excepting were causing syntax errors.

> So the fix is as simple as inserting a newline after the injected file’s source code:

Simple, yes - this makes me wonder how common a practice it is to _end_ a minified file with a sourcemap or comment.  It's out of scope for this question, but I'm still curious.

At any rate, I'll add the newline into the template .  Changes shortly.

> 1.11.0 beta 1 min and 2.1.0 beta 1 min have the same issue as 1.9.0.min and are fixed by the newline as noted above.

Good to know.  I think 1.9.x is probably the biggest offender.

> 1.1.3 and older expect to be loaded and run in global scope. They just define var $ = ... instead of window.$ = .... Since the injection template wraps all the code in a function, that variable never escapes the function’s scope and gets attached to the global object. That’s a more fundamental incompatibility; “fixing” older jQuery (and other scripts that behave like it) would necessarily break other features.

I'm unsurprised.  I vote leaving <1.1.x broken until compelling case to fix it is made.

That said, I wonder what use case exists where one would be purposefully injecting jQuery <1.1.x with Nightmare.  I could understand pages that already have early versions of jQuery included, but I can't think of a good reason to inject an old version other than for an experiment to determine what Nightmare works with.
",rosshinkley,Mr0grog
524,2016-03-22 16:45:47,"@Mr0grog A bit late, but I've added [a first draft](https://github.com/rosshinkley/nightmare-examples/blob/master/docs/known-issues/globally-defined-variables.md) of the globally defined variables example.
",rosshinkley,Mr0grog
522,2016-03-03 15:10:39,"Nice! Thanks for your patience and time @rosshinkley 
",kokujin,rosshinkley
521,2016-03-01 08:58:53,"Thanks @rosshinkley .
The app I'm automating uses jQ for all of the requests so I just added this snippet that forces every XHReq to contain those headers, what is close to what you proposed.



Anyway, is there a chance to have a feature like this in Nigthmare? Or how to achieve this in Electron?
",michalbe,rosshinkley
518,2016-03-03 14:36:05,"Thanks @rosshinkley 
",kokujin,rosshinkley
515,2016-03-05 12:33:38,"Thanks @rosshinkley. Your answers are very helpful!
",moroshko,rosshinkley
514,2016-03-25 08:14:19,"@justinmchase yeah, sorry for this.. this does make a change of the `inject` usage.

They have `result` returned with `func1();func2();result`.
If they want to have a function injected like yours, maybe they could use `evaluate` instead? 
",fritx,justinmchase
509,2016-03-06 13:02:02,"Once again, thanks @rosshinkley.

Actually, I think your firs example was more what I was looking for. May I clarify? I would like to test processes, for example a questionnaire or a wizard: I would like to evaluate the outcome after each step, in most cases a click and log the output to the console.

I am still having problems with the snippet, even with your fork


",kokujin,rosshinkley
505,2016-02-26 13:05:32,"Thanks @rosshinkley, but the flag is just to open the devTools drawer but not detach it. Correct? 
",kokujin,rosshinkley
505,2016-02-27 00:07:53,"@rosshinkley Thanks a lot for #506! Let's leave this issue open until #506 is merged. At least, for now, I can patch it in `node_modules` to debug things :)
",moroshko,rosshinkley
505,2016-03-01 22:14:09,"Great! Thanks @rosshinkley 
",kokujin,rosshinkley
503,2016-02-25 22:19:21,"Thanks @rosshinkley! I should have guessed this.

Now, the error has gone, but the action still doesn't work:



This works fine:



What am I missing here?
",moroshko,rosshinkley
503,2016-02-26 05:21:26,"Thanks a lot @rosshinkley. This was very insightful!
",moroshko,rosshinkley
502,2016-04-15 19:09:31,"@Mr0grog Yeah, this may be a case of me trying to do an awful lot of work to save someone (me, if I can be totally selfish) ten seconds of setup grief.

As time permits, I'll throw together a proposal on running Xvfb internally to Nightmare.  Sound good?
",rosshinkley,Mr0grog
502,2016-04-29 20:44:18,"@Mr0grog Yes, at least for the moment.  I should probably go ahead and create a PR for it, but I know there are still some problematic tests.  Anyway!

> Maybe start xvfb separately

Well, it is.  Kind of.  Right now, each new Nightmare instance creates an Xvfb instance as well as an Electron instance (so Xvfb, Electron and Nightmare instances area all 1:1:1).  They are created together, and in my opinion, should end together.

> Electron starting/ending/overlapping at different times. I’m not sure if xvfb-run takes care of all that for you or not.

I don't know that handling a single Xvfb instance is going to work very well, at least not without the single-instance stuff getting done.  I also don't think starting an instance and leaving it running is particularly clean.  I'd prefer Nightmare to clean up after itself when it's finished.

I'm going to lump these together:

> Can you get the PID for Electron somehow? 
> Directly killing Electron is sort of a simple expedient; you could re-write it as an IPC call that asks the Electron process to quit.

Yes - from within Nightmare - but not without a bit of patching to how `.action()` works.  (It doesn't have an ambient reference to `process`.)  With that, you can bubble the Electron PID up to the parent process.  It's ugly.

I don't know you can get the PID from the process tree, either.  Maybe?  I had problems with killing the process tree (that was my first attempt), but this might be worth a second look.

The current incarnation adds another action to have Electron exit internally rather than killing the process from the parent.  This works, but again, breaks the kill test.
",rosshinkley,Mr0grog
501,2016-04-15 00:41:06,"> The only cases I can maybe see this being useful is with .screenshot(), .pdf() or .html(). Even at that, it's only the most trivial of cases of each.

On the one hand, even the most trivial cases should arguably be accompanied by a callback—you want to handle, or at least be notified of, failures.

However, I think it's useful to make things super simple for someone just getting started with Nightmare and trying things. I also think simply loading a page and taking a screenshot or saving a PDF is a Big Deal of a use case (that’s all I was trying to do when I discovered Nightmare and wound up writing all the frame manager stuff).

I like allowing no callback to be passed to `run`—with one tweak: the default callback should probably `console.error()` when errors occur. Otherwise I’d agree with @rosshinkley. Bottom-line, either solution would be _much_ better than the current situation.
",Mr0grog,rosshinkley
501,2016-04-15 19:44:24,"@h2non this patch would be awesome if you want to add some logging of errors to the default `fn` (unless you disagree with that notion). Thanks for writing it!
",Mr0grog,h2non
501,2016-05-31 04:29:54,"> that's how all the bundled libs with Node.js work (e.g. fs)

Maybe they used to and no longer do? Or I'm misunderstanding what you meant, @LinusU. I just tried the following in Node 4.4, 5.11, and 6.2; none of them threw an error:


",Mr0grog,LinusU
501,2016-05-31 14:11:43,"@LinusU Are you referring to `*sync` methods and when they except, maybe?
",rosshinkley,LinusU
499,2016-04-23 22:37:28,"I agree with @yoz.  I think #548 fixes this, and as such, I'm closing this issue.
",rosshinkley,yoz
498,2016-02-24 05:10:28,"@rosshinkley Thanks a lot for this! 
Just wondering, why `.wait(1000)` is required before taking the screenshot?
",moroshko,rosshinkley
498,2016-02-25 11:37:07,"@rosshinkley Ah! So, once #479 is merged, we'll no longer need the `.wait(1000)`?
",moroshko,rosshinkley
498,2016-04-19 15:44:26,"Able to reproduce on a high-dpi device: the screenshot is 2x the height/width set in nightmare. @Mr0grog's  reasoning about the source seems valid.
",pci,Mr0grog
498,2016-04-23 20:31:16,"@Mr0grog @pci Of course! High device resolution!  That makes sense.

With that last mystery solved, I'm closing this issue as I think it has been fully resolved.
",rosshinkley,Mr0grog
498,2016-04-23 20:31:16,"@Mr0grog @pci Of course! High device resolution!  That makes sense.

With that last mystery solved, I'm closing this issue as I think it has been fully resolved.
",rosshinkley,pci
498,2016-12-09 05:17:29,"@Mr0grog  I'm struggling on this one, how do you access WebFrame to do the zooming, from `evaluate()` ? I get a `webFrame is not defined`. Thx",sebastienbarre,Mr0grog
498,2016-12-09 14:25:53,@Mr0grog `force-device-scale-factor` did the trick -- many thanks.,sebastienbarre,Mr0grog
496,2016-04-11 16:16:14,"@rosshinkley, I tried that first but it's impossible as it modifies internal stuff. 

Check the full answer to that same question 4 comments above: https://github.com/segmentio/nightmare/pull/496#issuecomment-197568154
",tiangolo,rosshinkley
496,2016-04-11 19:06:52,"@rosshinkley, I tried at first all the ideas I had to make it a plug-in, but I had to throw all that code away and start from scratch because I found that I had to modify deeper functionality in Nightmare.

If you find a way to get that same behavior with a plug-in I would love to know how.

@Mr0grog that's a good point, not **every** action would work. I think the first approach would be to document which actions wouldn't work.

But at least for some cases, the actions that work seem to be quite useful for some of us.

I'm sure it works with `.type` (that's what I made it for).
I'm pretty sure it would also work for `.insert`, as the code is almost the same and also depends on `document`: https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L175

Could you list all the _caveats_ that you find that _haven’t been talked through here_? How would you like to assess better those caveats so that we all know what would have to be done?
",tiangolo,Mr0grog
496,2016-04-11 19:06:52,"@rosshinkley, I tried at first all the ideas I had to make it a plug-in, but I had to throw all that code away and start from scratch because I found that I had to modify deeper functionality in Nightmare.

If you find a way to get that same behavior with a plug-in I would love to know how.

@Mr0grog that's a good point, not **every** action would work. I think the first approach would be to document which actions wouldn't work.

But at least for some cases, the actions that work seem to be quite useful for some of us.

I'm sure it works with `.type` (that's what I made it for).
I'm pretty sure it would also work for `.insert`, as the code is almost the same and also depends on `document`: https://github.com/segmentio/nightmare/blob/master/lib/actions.js#L175

Could you list all the _caveats_ that you find that _haven’t been talked through here_? How would you like to assess better those caveats so that we all know what would have to be done?
",tiangolo,rosshinkley
496,2016-04-25 02:00:39,"I should have reread the _entire_ thread before posting: [@Mr0grog covers issues](https://github.com/segmentio/nightmare/pull/496#issuecomment-208445167) more comprehensively than I did.  (Price of being in a hurry, apologies.)  I still think there are almost certainly other corner cases, though.  As time permits, I'll set up some test cases to verify what @Mr0grog outlined.

Setting that aside, it frames need to be a first-order citizen in Nightmare (along with `BrowserWindow`s).  I think this should make it onto the list for vNext.
",rosshinkley,Mr0grog
496,2016-04-25 17:11:22,"> Could you list all the caveats that you find that haven’t been talked through here?
- Globals variables (both built-ins and ones from scripts in the page in the frame). I think this is, far and away, the biggest thing. If people are expecting `evaluate` to execute code in the iframe, which is exactly the expectation this sets up, they would very reasonably expect to be able to access all the globals in that frame. They’d also expect to be able to be able to do things like compare constructors (e.g. `someFunctionInFrameThatReturnsArray().constructor !== Array`). There are an infinitely ridiculous number of use cases and ways people could trip over this.
- I think there’s a reasonable argument that it should probably work with `inject`. There are several issues related to users `inject`-ing jQuery (or a helper library of their choice) so they can use it when calling `evaluate`, so we know it’s something people are doing. On a cursory reading, it looks like it should _sort of_ work with JS (caveat the global issues above), but won’t work with CSS.
- Obviously, a discussion of all the Nightmare methods that are/aren’t affected. @rosshinkley listed a few. If you’re going to address possible caveats, you should list them all out. Ross also noted “there might be other issues with some of the more advanced functions (authentication, for example), but I haven't had a chance to set up testing yet.” No offense to anyone here, but… testing and validating that shouldn’t be on Ross. There are _a lot_ of issues and PRs here that need attention and Ross appears to be the only active maintainer.
- I think the issue of security is kind of a big deal here. The patch adds documentation that suggests setting `{'webPreferences': {'webSecurity': false}}` without really discussing that someone should at least think twice before doing that. There are a few issues that demonstrate people are using Nightmare to do tasks in very security-sensitive settings (e.g. #545); setting `websecurity: false` while doing something like that is a Really Bad Idea™. It may even be worth fixing https://github.com/electron/electron/issues/5115 upstream first to alleviate this.

Not a caveat, but probably also a good idea to have tests that cover all the other methods that are affected by this. e.g. `can type into elements in iframe`.

Other minor nit: maybe worth renaming to `enterFrame` since this is just as applicable to other kinds of frames? (`<frame>`, `<iframe>`, `<object>`)

And an open question, because there’s been no discussion of it here and I think it’s important for any new API being added to core: is this the best API for working with subframes?
- The original issue (#203) had an API using functions that could have eliminated the need for a second method call to “exit” the frame.
- If this is going into core, would it better to change the methods that take selectors to allow special selectors that reach into frames? e.g. `.click('.some > iframe / #a .button-in-the-frame')`
",Mr0grog,rosshinkley
496,2016-06-09 11:47:41,"Thank you @rosshinkley and @Mr0grog for paying attention to this.

I see that there are several issues that would be hard to deal with in trying to integrate this into Nightmare. And probably the way to go would be a new module as the one @rosshinkley built that patches `evaluate_now`.

Nevertheless, I'm being unable to use @rosshinkley's https://github.com/rosshinkley/nightmare-iframe-manager, its code never gets executed in the current environment. Maybe I'm doing something wrong, but I cloned the repo and tried to run the tests (after installing a couple undeclared packages) but they all seem to fail. Again, I'm probably doing something wrong, but maybe you can guide me on how we should use your package / module to get this feature.
",tiangolo,Mr0grog
496,2016-06-09 11:47:41,"Thank you @rosshinkley and @Mr0grog for paying attention to this.

I see that there are several issues that would be hard to deal with in trying to integrate this into Nightmare. And probably the way to go would be a new module as the one @rosshinkley built that patches `evaluate_now`.

Nevertheless, I'm being unable to use @rosshinkley's https://github.com/rosshinkley/nightmare-iframe-manager, its code never gets executed in the current environment. Maybe I'm doing something wrong, but I cloned the repo and tried to run the tests (after installing a couple undeclared packages) but they all seem to fail. Again, I'm probably doing something wrong, but maybe you can guide me on how we should use your package / module to get this feature.
",tiangolo,rosshinkley
496,2016-06-09 12:59:03,"OK, get it @rosshinkley. 

Are you planning on uploading it later to NPM? Do you want to keep it just as a proof of concept or do you want to keep developing it?
Or do you want me to fork it, try to fix my issues and then upload to NPM?
",tiangolo,rosshinkley
496,2016-06-12 03:49:01,"For the other Nightmare users in this thread that wanted this functionality (with all the risky security concerns already mentioned), using @rosshinkley's plug-in is working now. 

His plug-in is based on this PR and even improves the functionality.

Check his documentation at: https://github.com/rosshinkley/nightmare-iframe-manager

(Make sure to update your code as the names and meaning of the methods changed a little bit).

As there isn't an NPM package, to install it in your projects you need to run:



NPM will understand that it needs to go for the GitHub repo (but you will need to have git installed).

---

@rosshinkley and @Mr0grog, with that plug-in I have the functionality I (and I think most of us in this thread) wanted (with all the risks / security up to us). For me it's OK if you just reject and close this PR now. Thanks!
",tiangolo,Mr0grog
496,2016-06-12 03:49:01,"For the other Nightmare users in this thread that wanted this functionality (with all the risky security concerns already mentioned), using @rosshinkley's plug-in is working now. 

His plug-in is based on this PR and even improves the functionality.

Check his documentation at: https://github.com/rosshinkley/nightmare-iframe-manager

(Make sure to update your code as the names and meaning of the methods changed a little bit).

As there isn't an NPM package, to install it in your projects you need to run:



NPM will understand that it needs to go for the GitHub repo (but you will need to have git installed).

---

@rosshinkley and @Mr0grog, with that plug-in I have the functionality I (and I think most of us in this thread) wanted (with all the risks / security up to us). For me it's OK if you just reject and close this PR now. Thanks!
",tiangolo,rosshinkley
494,2016-03-30 03:27:24,"@Mr0grog Ooh, that's not great.  I'd +1 for a PR.
",rosshinkley,Mr0grog
493,2016-12-08 10:01:43,"@Mr0grog : Ok. Sorry for the miss understanding.. !
My current partition setting is 
`webPreferences: {
       partition: 'nopersist'
 },
`
and i haven't set `session`.
I will try with a random partition number !",GautierT,Mr0grog
491,2016-02-17 22:14:26,"@Mr0grog no problem.  I apologize if I zapped any of your efforts, but I saw #490 this morning and figured that since I was in there, I may as well patch up the other stuff you pointed out.

As for not including external libraries: I agree.  Adding additional dependencies with their own quirks and learning curve only serves to make the learning process more difficult.  I use `vo` when it's convenient, but I guess the main takeaway here is that you don't _have_ to use any outside libraries to use Nightmare.  Recommending using `.then()`, though?  Always?  That makes me ... uncomfortable.  It's hard for me to articulate why outside of aesthetic reasons.  Right tool for the job, I suppose.

Which brings me to your next point: I think adding examples for common usecases and popular libraries would be wildly helpful - something along the lines of Including an examples directory with documentation for each example.
",rosshinkley,Mr0grog
491,2016-02-17 23:59:25,"@rosshinkley Oh, no, you didn't zap any of my efforts at all; no worries! I held off on making any changes in that area since it sounded like @matthewmueller was making a bunch ideological changes that aren't written down anywhere, so I figured I'd wait to hear back or see what he did before _I_ tried to actually do anything more.

> Recommending using .then(), though? Always? That makes me ... uncomfortable. It's hard for me to articulate why outside of aesthetic reasons.

Well… we could focus on `run` or `end` instead. Then you have the ""callback API"" and the ""promise API."" To be honest, though, I'm not sure I have the same aesthetic concerns with `then`—I kind of like it ;)

The biggest thing I'm concerned with about moving away from generator-based examples is that several things are buggy in Nightmare if you ask it to handle multiple queues at once—and that's easy/inviting to do if you focus on the run/end/then API. See, for example, #465. On the other hand, I'd bet those issues exist because early authors focused on using generators and so rarely tripped over bugs that happen when multiple operations are going on simultaneously. But all that is a big discussion that is somewhat separate from how things are documented! So I'll shut up on that for now.

> I think adding examples for common usecases and popular libraries would be wildly helpful - something along the lines of Including an examples directory with documentation for each example.

Ooh, definitely! I think the documentation, in general, could be vastly improved. Several of the issues and questions in #472 are ones I ran into when I first started looking at Nightmare, too (I also think it would be great if all methods returned a promise or thunk—there's no reason a nightmare instance can't actually be one of those things, but that's _way_ out of scope here).

_[Rant warning:]_ Anyway, I'd _would_ love to volunteer to help with that, but… I'm personally a bit wary of diving into major changes to docs (or other changes of similar scope). There's no documentation here relating to direction or process for the project. I'm not sure whether there are people at Segment (or outside it) who are acting as maintainers other than @matthewmueller. And when he makes a sudden change in project direction and only announces that change in a comment on a random issue/PR, as happened in #482, or makes surprising API changes with nary a PR or even a comment in an issue (like making `then` act more like a promise after much discussion against or not very in favor of it in #256), or even when issues and PRs can sit for months (e.g. #222) with no maintainer feedback at all (even just a ""no thanks""), I don't have much confidence that big contributions will be well respected.

That's especially true for docs. It's hard to do a good job with them when you don't know what direction the project is headed. What parts should be focused on? What things should be downplayed because owners/contributors don't feel great about them? What's deprecated and going away? What are the known gotchas? And so on. #482, again, is a great example here: in previous issues, @matthewmueller talks about `then()` as a private API, only there to make vo behave properly. Now, with no other discussion in between, it's suddenly the primary front-and-center way to use Nightmare.

Anyway, I know you weren't necessarily asking for my help and sorry for the sudden rant there. I hate to heap on a lot of criticism when I've only been observing the goings-on here for a couple weeks. I hope there's not a mailing list or something I'm totally missing out on. It felt like it needed to be said somewhere, though.
",Mr0grog,rosshinkley
491,2016-02-18 03:03:30,"thanks @rosshinkley for the fixes – though i'm a bit surprised about the id change since I tested this two days ago. I wonder if yahoo is doing something weird with rendering.

---

@Mr0grog you mentioned a lot here so let me address a few things:

**1. I apologize about the API change**

I changed my mind about returning a promise, mostly because you can now use Promises natively in latest node, so you don't need to include Bluebird or anything big.

I should have mentioned something, but to be honest I'm not sure it broke anyone's code. Let's be clear, the only API change is: _.then() returns a promise and not a nightmare instance_

The goal of this change was to make it more familiar to newcomers and remove the additional dependency that was confusing in the first place.

**2. I strongly disagree that big contributions aren't welcome**

If you go back in the merged PRs, there are some really big PRs that have been merged. It does take time to go through some of the bigger ones though since a lot of people depend on this library and I have other commitments outside of working on Nightmare.

**3. Direction**

The next two things on my TODO list for nightmare is to get @rosshinkley's #425 merged and create better documentation (a quick how-to video) on how to run Docker on linux.
",matthewmueller,Mr0grog
491,2016-02-18 03:03:30,"thanks @rosshinkley for the fixes – though i'm a bit surprised about the id change since I tested this two days ago. I wonder if yahoo is doing something weird with rendering.

---

@Mr0grog you mentioned a lot here so let me address a few things:

**1. I apologize about the API change**

I changed my mind about returning a promise, mostly because you can now use Promises natively in latest node, so you don't need to include Bluebird or anything big.

I should have mentioned something, but to be honest I'm not sure it broke anyone's code. Let's be clear, the only API change is: _.then() returns a promise and not a nightmare instance_

The goal of this change was to make it more familiar to newcomers and remove the additional dependency that was confusing in the first place.

**2. I strongly disagree that big contributions aren't welcome**

If you go back in the merged PRs, there are some really big PRs that have been merged. It does take time to go through some of the bigger ones though since a lot of people depend on this library and I have other commitments outside of working on Nightmare.

**3. Direction**

The next two things on my TODO list for nightmare is to get @rosshinkley's #425 merged and create better documentation (a quick how-to video) on how to run Docker on linux.
",matthewmueller,rosshinkley
491,2016-02-18 17:28:03,"I realize that this PR is closed, but I feel compelled (and somewhat responsible) to respond to the commentary.  I'm going to _try_ to respond to both of your comments.  (This is going to be a bit of a missive; strap in for a long read.)

> Oh, no, you didn't zap any of my efforts at all; no worries!

I'm relieved. :)  Duplicate work is the worst kind of work.

> Well… we could focus on run or end instead. Then you have the ""callback API"" and the ""promise API."" To be honest, though, I'm not sure I have the same aesthetic concerns with then—I kind of like it ;)

I guess getting back to a point @Mr0grog made: I am biased for using `yield`.  No real reason other than ""it looks nice"" and it has fit in well with what I've done with Nightmare.  And it's not like I'm _losing_ that ability, but I do think it's worth providing a usage sample.

> The biggest thing I'm concerned with about moving away from generator-based examples is that several things are buggy in Nightmare if you ask it to handle multiple queues at once—and that's easy/inviting to do if you focus on the run/end/then API. 

This may be - is? - getting a bit off topic, but while running parallel operations on a single page should Just Work&trade;, running parallel operations across multiple domains with a single Nightmare instance won't work.  It can't work.  At least not in the current incarnation.

That said, I am very interested in the outcome of #465.  I suspect there's other issues in the guts of Nightmare to getting single-page parallel operations to work.  I haven't carved out time to really get into it, though.

While I'm on this tangent, documenting single-domain (well, single URI anyway) parallel operations would be kind of tricky.  They would have to state outright that you cannot perform actions across domains at the same time.  However...

>  But all that is a big discussion that is somewhat separate from how things are documented! So I'll shut up on that for now.

Yeah, I should too.  I propose we move that conversation over to #465.  Hopefully I'll have something constructive to add there soon. :)

> Ooh, definitely! I think the documentation, in general, could be vastly improved.  Several of the issues and questions in #472 are ones I ran into when I first started looking at Nightmare, too 

Same.  I'm not above sandboxing for a bit, and that sort of work doesn't frustrate me.   I can totally understand and relate to where it would be frustrating, especially to someone not terribly familiar with javascript.  Example usage - at least, non-issue, non-test case example usage - to flog this horse I'm pretty sure is already dead, would be great.

> (I also think it would be great if all methods returned a promise or thunk—there's no reason a nightmare instance can't actually be one of those things, but that's way out of scope here).

As you pointed out, this is also kind of out in the weeds, but I just wanted to quickly point out that all of the methods _do_ return a thennable as Nightmare itself (partially) implements promises.  Having Nightmare directly inherit from `Promise` opens a bit of a can of worms.  (I touched on this briefly in #472.)

> [Rant warning:] 

Off topic, but I have to admit, that 1) this gave me a chuckle and 2) thank you.  I'm going to skip around a bit now, as I think the bulk of the ""rant"" should be addressed with @matthewmueller's comment.

> #482, again, is a great example here: in previous issues, @matthewmueller talks about then() as a private API, only there to make vo behave properly. Now, with no other discussion in between, it's suddenly the primary front-and-center way to use Nightmare.

This was what I was getting at with my original question about excising `vo`.  I had seen commentary for both ways and wanted clarification - and perhaps more importantly, justification - written down somewhere for posterity.  I am _certain_ it's going to come up in questions again and I wanted to have a reference to point at.  (The poor, poor souls that get this PR as a reference in the future.  Apologies to future readers everywhere.)

To be honest, even with my self-reported biases, I don't really care what the suggested usage is.  It needs to be documented, and big shifts in usage need to be justified.

Moving on...

> thanks @rosshinkley for the fixes – though i'm a bit surprised about the id change since I tested this two days ago. I wonder if yahoo is doing something weird with rendering.

No problem.  I feel like Yahoo has changed IDs of either the search bar or button or both in the past.  I have this nagging memory of seeing this issue before, but a cursory glance through the issues yielded nothing.  On a related note, I suspect it's not the last time it'll happen.

> I should have mentioned something, but to be honest I'm not sure it broke anyone's code.  The goal of this change was to make it more familiar to newcomers and remove the additional dependency that was confusing in the first place.

I also doubt it broke much, if anything.  It _does_ make usage a bit strange, though.  Calling `.end()` before `.then()` looks kind of odd to me.  It's also worth pointing out that adding something akin to [Underscore's `tap`](http://underscorejs.org/#tap) method so you can interact with values from functions like `.evaluate()` before `.then()` might be handy.  Food for thought, and I'd be willing to work on that if it's something worth including.

Also, thank you for the clarification on the removal.

> @Mr0grog 
> 
> > ... or makes surprising API changes with nary a PR or even a comment in an issue (like making then act more like a promise after much discussion against or not very in favor of it in #256), or even when issues and PRs can sit for months (e.g. #222) with no maintainer feedback at all (even just a ""no thanks""), I don't have much confidence that big contributions will be well respected.
> 
> @matthewmueller
> 
> > If you go back in the merged PRs, there are some really big PRs that have been merged. It does take time to go through some of the bigger ones though since a lot of people depend on this library and I have other commitments outside of working on Nightmare.

Not having the change documented via a PR is a bit frustrating, if for no other reason that there's no real trail to hold up as when and why the change was made.  With respect to the PRs, I understand the bigger ones take time to review.  Especially ones that change the shape and surface of Nightmare, like #425 (not to toot my own horn).  I also understand that Nightmare competes for attention and priority.  Commentary or updates on PRs are nice to have, and help encourage contribution.

> @Mr0grog 
> 
> > That's [being contribution consideration] especially true for docs. It's hard to do a good job with them when you don't know what direction the project is headed. What parts should be focused on? What things should be downplayed because owners/contributors don't feel great about them? What's deprecated and going away? What are the known gotchas? And so on.
> 
> @matthewmueller 
> 
> > The next two things on my TODO list for nightmare is to get @rosshinkley's #425 merged and create better documentation (a quick how-to video) on how to run Docker on linux.

Thank you for the todo list, and I'm thrilled that #425 is on deck.

Based on my observations in this project, the direction (at least since moving off of Phantom and onto Electron) has been ad hoc.  Folks wanting certain functionality ask for it, and in general, that piece is discussed and added or fixed in isolation.

With that in mind, I don't know that a more comprehensive project map is possible.  Again, most of the changes I've seen have been an outgrowth of issues or desired behavior, and that kind of thing is tough to predict.  And if I'm being totally honest, I'm not sure the onus is on the ownership to suss that out.  Iterating based on feedback makes for a better project, in my humble opinion, and has the added benefit of being relatively easy.

And with _that_ in mind, this gets back to a motif:  Documentation.  I very (emphasis on very) strongly agree that deprecation and gotchas should be documented.  I also think - and I know I've made this clear already - that changes should be documented.  While I'm repeating myself, I'll mention again that documenting common use cases with popular libraries should also probably be included.

What would be nice - and I think might go a long way to addressing @Mr0grog's list - would be guidelines for requesting functionality, guidelines for submitting issues, and guidelines for submitting PRs.  Perhaps even some general notes on what to expect with those items.  #425 magnifies the above problems, adding the question of what belongs in the core of Nightmare vs. what should be a plugin.  Thoughts?

---

Finally, thank you both for the commentary and criticism.  I think this discussion is an important one and needed to be had.
",rosshinkley,matthewmueller
491,2016-02-18 17:28:03,"I realize that this PR is closed, but I feel compelled (and somewhat responsible) to respond to the commentary.  I'm going to _try_ to respond to both of your comments.  (This is going to be a bit of a missive; strap in for a long read.)

> Oh, no, you didn't zap any of my efforts at all; no worries!

I'm relieved. :)  Duplicate work is the worst kind of work.

> Well… we could focus on run or end instead. Then you have the ""callback API"" and the ""promise API."" To be honest, though, I'm not sure I have the same aesthetic concerns with then—I kind of like it ;)

I guess getting back to a point @Mr0grog made: I am biased for using `yield`.  No real reason other than ""it looks nice"" and it has fit in well with what I've done with Nightmare.  And it's not like I'm _losing_ that ability, but I do think it's worth providing a usage sample.

> The biggest thing I'm concerned with about moving away from generator-based examples is that several things are buggy in Nightmare if you ask it to handle multiple queues at once—and that's easy/inviting to do if you focus on the run/end/then API. 

This may be - is? - getting a bit off topic, but while running parallel operations on a single page should Just Work&trade;, running parallel operations across multiple domains with a single Nightmare instance won't work.  It can't work.  At least not in the current incarnation.

That said, I am very interested in the outcome of #465.  I suspect there's other issues in the guts of Nightmare to getting single-page parallel operations to work.  I haven't carved out time to really get into it, though.

While I'm on this tangent, documenting single-domain (well, single URI anyway) parallel operations would be kind of tricky.  They would have to state outright that you cannot perform actions across domains at the same time.  However...

>  But all that is a big discussion that is somewhat separate from how things are documented! So I'll shut up on that for now.

Yeah, I should too.  I propose we move that conversation over to #465.  Hopefully I'll have something constructive to add there soon. :)

> Ooh, definitely! I think the documentation, in general, could be vastly improved.  Several of the issues and questions in #472 are ones I ran into when I first started looking at Nightmare, too 

Same.  I'm not above sandboxing for a bit, and that sort of work doesn't frustrate me.   I can totally understand and relate to where it would be frustrating, especially to someone not terribly familiar with javascript.  Example usage - at least, non-issue, non-test case example usage - to flog this horse I'm pretty sure is already dead, would be great.

> (I also think it would be great if all methods returned a promise or thunk—there's no reason a nightmare instance can't actually be one of those things, but that's way out of scope here).

As you pointed out, this is also kind of out in the weeds, but I just wanted to quickly point out that all of the methods _do_ return a thennable as Nightmare itself (partially) implements promises.  Having Nightmare directly inherit from `Promise` opens a bit of a can of worms.  (I touched on this briefly in #472.)

> [Rant warning:] 

Off topic, but I have to admit, that 1) this gave me a chuckle and 2) thank you.  I'm going to skip around a bit now, as I think the bulk of the ""rant"" should be addressed with @matthewmueller's comment.

> #482, again, is a great example here: in previous issues, @matthewmueller talks about then() as a private API, only there to make vo behave properly. Now, with no other discussion in between, it's suddenly the primary front-and-center way to use Nightmare.

This was what I was getting at with my original question about excising `vo`.  I had seen commentary for both ways and wanted clarification - and perhaps more importantly, justification - written down somewhere for posterity.  I am _certain_ it's going to come up in questions again and I wanted to have a reference to point at.  (The poor, poor souls that get this PR as a reference in the future.  Apologies to future readers everywhere.)

To be honest, even with my self-reported biases, I don't really care what the suggested usage is.  It needs to be documented, and big shifts in usage need to be justified.

Moving on...

> thanks @rosshinkley for the fixes – though i'm a bit surprised about the id change since I tested this two days ago. I wonder if yahoo is doing something weird with rendering.

No problem.  I feel like Yahoo has changed IDs of either the search bar or button or both in the past.  I have this nagging memory of seeing this issue before, but a cursory glance through the issues yielded nothing.  On a related note, I suspect it's not the last time it'll happen.

> I should have mentioned something, but to be honest I'm not sure it broke anyone's code.  The goal of this change was to make it more familiar to newcomers and remove the additional dependency that was confusing in the first place.

I also doubt it broke much, if anything.  It _does_ make usage a bit strange, though.  Calling `.end()` before `.then()` looks kind of odd to me.  It's also worth pointing out that adding something akin to [Underscore's `tap`](http://underscorejs.org/#tap) method so you can interact with values from functions like `.evaluate()` before `.then()` might be handy.  Food for thought, and I'd be willing to work on that if it's something worth including.

Also, thank you for the clarification on the removal.

> @Mr0grog 
> 
> > ... or makes surprising API changes with nary a PR or even a comment in an issue (like making then act more like a promise after much discussion against or not very in favor of it in #256), or even when issues and PRs can sit for months (e.g. #222) with no maintainer feedback at all (even just a ""no thanks""), I don't have much confidence that big contributions will be well respected.
> 
> @matthewmueller
> 
> > If you go back in the merged PRs, there are some really big PRs that have been merged. It does take time to go through some of the bigger ones though since a lot of people depend on this library and I have other commitments outside of working on Nightmare.

Not having the change documented via a PR is a bit frustrating, if for no other reason that there's no real trail to hold up as when and why the change was made.  With respect to the PRs, I understand the bigger ones take time to review.  Especially ones that change the shape and surface of Nightmare, like #425 (not to toot my own horn).  I also understand that Nightmare competes for attention and priority.  Commentary or updates on PRs are nice to have, and help encourage contribution.

> @Mr0grog 
> 
> > That's [being contribution consideration] especially true for docs. It's hard to do a good job with them when you don't know what direction the project is headed. What parts should be focused on? What things should be downplayed because owners/contributors don't feel great about them? What's deprecated and going away? What are the known gotchas? And so on.
> 
> @matthewmueller 
> 
> > The next two things on my TODO list for nightmare is to get @rosshinkley's #425 merged and create better documentation (a quick how-to video) on how to run Docker on linux.

Thank you for the todo list, and I'm thrilled that #425 is on deck.

Based on my observations in this project, the direction (at least since moving off of Phantom and onto Electron) has been ad hoc.  Folks wanting certain functionality ask for it, and in general, that piece is discussed and added or fixed in isolation.

With that in mind, I don't know that a more comprehensive project map is possible.  Again, most of the changes I've seen have been an outgrowth of issues or desired behavior, and that kind of thing is tough to predict.  And if I'm being totally honest, I'm not sure the onus is on the ownership to suss that out.  Iterating based on feedback makes for a better project, in my humble opinion, and has the added benefit of being relatively easy.

And with _that_ in mind, this gets back to a motif:  Documentation.  I very (emphasis on very) strongly agree that deprecation and gotchas should be documented.  I also think - and I know I've made this clear already - that changes should be documented.  While I'm repeating myself, I'll mention again that documenting common use cases with popular libraries should also probably be included.

What would be nice - and I think might go a long way to addressing @Mr0grog's list - would be guidelines for requesting functionality, guidelines for submitting issues, and guidelines for submitting PRs.  Perhaps even some general notes on what to expect with those items.  #425 magnifies the above problems, adding the question of what belongs in the core of Nightmare vs. what should be a plugin.  Thoughts?

---

Finally, thank you both for the commentary and criticism.  I think this discussion is an important one and needed to be had.
",rosshinkley,rosshinkley
491,2016-02-18 17:28:03,"I realize that this PR is closed, but I feel compelled (and somewhat responsible) to respond to the commentary.  I'm going to _try_ to respond to both of your comments.  (This is going to be a bit of a missive; strap in for a long read.)

> Oh, no, you didn't zap any of my efforts at all; no worries!

I'm relieved. :)  Duplicate work is the worst kind of work.

> Well… we could focus on run or end instead. Then you have the ""callback API"" and the ""promise API."" To be honest, though, I'm not sure I have the same aesthetic concerns with then—I kind of like it ;)

I guess getting back to a point @Mr0grog made: I am biased for using `yield`.  No real reason other than ""it looks nice"" and it has fit in well with what I've done with Nightmare.  And it's not like I'm _losing_ that ability, but I do think it's worth providing a usage sample.

> The biggest thing I'm concerned with about moving away from generator-based examples is that several things are buggy in Nightmare if you ask it to handle multiple queues at once—and that's easy/inviting to do if you focus on the run/end/then API. 

This may be - is? - getting a bit off topic, but while running parallel operations on a single page should Just Work&trade;, running parallel operations across multiple domains with a single Nightmare instance won't work.  It can't work.  At least not in the current incarnation.

That said, I am very interested in the outcome of #465.  I suspect there's other issues in the guts of Nightmare to getting single-page parallel operations to work.  I haven't carved out time to really get into it, though.

While I'm on this tangent, documenting single-domain (well, single URI anyway) parallel operations would be kind of tricky.  They would have to state outright that you cannot perform actions across domains at the same time.  However...

>  But all that is a big discussion that is somewhat separate from how things are documented! So I'll shut up on that for now.

Yeah, I should too.  I propose we move that conversation over to #465.  Hopefully I'll have something constructive to add there soon. :)

> Ooh, definitely! I think the documentation, in general, could be vastly improved.  Several of the issues and questions in #472 are ones I ran into when I first started looking at Nightmare, too 

Same.  I'm not above sandboxing for a bit, and that sort of work doesn't frustrate me.   I can totally understand and relate to where it would be frustrating, especially to someone not terribly familiar with javascript.  Example usage - at least, non-issue, non-test case example usage - to flog this horse I'm pretty sure is already dead, would be great.

> (I also think it would be great if all methods returned a promise or thunk—there's no reason a nightmare instance can't actually be one of those things, but that's way out of scope here).

As you pointed out, this is also kind of out in the weeds, but I just wanted to quickly point out that all of the methods _do_ return a thennable as Nightmare itself (partially) implements promises.  Having Nightmare directly inherit from `Promise` opens a bit of a can of worms.  (I touched on this briefly in #472.)

> [Rant warning:] 

Off topic, but I have to admit, that 1) this gave me a chuckle and 2) thank you.  I'm going to skip around a bit now, as I think the bulk of the ""rant"" should be addressed with @matthewmueller's comment.

> #482, again, is a great example here: in previous issues, @matthewmueller talks about then() as a private API, only there to make vo behave properly. Now, with no other discussion in between, it's suddenly the primary front-and-center way to use Nightmare.

This was what I was getting at with my original question about excising `vo`.  I had seen commentary for both ways and wanted clarification - and perhaps more importantly, justification - written down somewhere for posterity.  I am _certain_ it's going to come up in questions again and I wanted to have a reference to point at.  (The poor, poor souls that get this PR as a reference in the future.  Apologies to future readers everywhere.)

To be honest, even with my self-reported biases, I don't really care what the suggested usage is.  It needs to be documented, and big shifts in usage need to be justified.

Moving on...

> thanks @rosshinkley for the fixes – though i'm a bit surprised about the id change since I tested this two days ago. I wonder if yahoo is doing something weird with rendering.

No problem.  I feel like Yahoo has changed IDs of either the search bar or button or both in the past.  I have this nagging memory of seeing this issue before, but a cursory glance through the issues yielded nothing.  On a related note, I suspect it's not the last time it'll happen.

> I should have mentioned something, but to be honest I'm not sure it broke anyone's code.  The goal of this change was to make it more familiar to newcomers and remove the additional dependency that was confusing in the first place.

I also doubt it broke much, if anything.  It _does_ make usage a bit strange, though.  Calling `.end()` before `.then()` looks kind of odd to me.  It's also worth pointing out that adding something akin to [Underscore's `tap`](http://underscorejs.org/#tap) method so you can interact with values from functions like `.evaluate()` before `.then()` might be handy.  Food for thought, and I'd be willing to work on that if it's something worth including.

Also, thank you for the clarification on the removal.

> @Mr0grog 
> 
> > ... or makes surprising API changes with nary a PR or even a comment in an issue (like making then act more like a promise after much discussion against or not very in favor of it in #256), or even when issues and PRs can sit for months (e.g. #222) with no maintainer feedback at all (even just a ""no thanks""), I don't have much confidence that big contributions will be well respected.
> 
> @matthewmueller
> 
> > If you go back in the merged PRs, there are some really big PRs that have been merged. It does take time to go through some of the bigger ones though since a lot of people depend on this library and I have other commitments outside of working on Nightmare.

Not having the change documented via a PR is a bit frustrating, if for no other reason that there's no real trail to hold up as when and why the change was made.  With respect to the PRs, I understand the bigger ones take time to review.  Especially ones that change the shape and surface of Nightmare, like #425 (not to toot my own horn).  I also understand that Nightmare competes for attention and priority.  Commentary or updates on PRs are nice to have, and help encourage contribution.

> @Mr0grog 
> 
> > That's [being contribution consideration] especially true for docs. It's hard to do a good job with them when you don't know what direction the project is headed. What parts should be focused on? What things should be downplayed because owners/contributors don't feel great about them? What's deprecated and going away? What are the known gotchas? And so on.
> 
> @matthewmueller 
> 
> > The next two things on my TODO list for nightmare is to get @rosshinkley's #425 merged and create better documentation (a quick how-to video) on how to run Docker on linux.

Thank you for the todo list, and I'm thrilled that #425 is on deck.

Based on my observations in this project, the direction (at least since moving off of Phantom and onto Electron) has been ad hoc.  Folks wanting certain functionality ask for it, and in general, that piece is discussed and added or fixed in isolation.

With that in mind, I don't know that a more comprehensive project map is possible.  Again, most of the changes I've seen have been an outgrowth of issues or desired behavior, and that kind of thing is tough to predict.  And if I'm being totally honest, I'm not sure the onus is on the ownership to suss that out.  Iterating based on feedback makes for a better project, in my humble opinion, and has the added benefit of being relatively easy.

And with _that_ in mind, this gets back to a motif:  Documentation.  I very (emphasis on very) strongly agree that deprecation and gotchas should be documented.  I also think - and I know I've made this clear already - that changes should be documented.  While I'm repeating myself, I'll mention again that documenting common use cases with popular libraries should also probably be included.

What would be nice - and I think might go a long way to addressing @Mr0grog's list - would be guidelines for requesting functionality, guidelines for submitting issues, and guidelines for submitting PRs.  Perhaps even some general notes on what to expect with those items.  #425 magnifies the above problems, adding the question of what belongs in the core of Nightmare vs. what should be a plugin.  Thoughts?

---

Finally, thank you both for the commentary and criticism.  I think this discussion is an important one and needed to be had.
",rosshinkley,Mr0grog
491,2016-02-18 18:49:15,"Technical notes first, feelingsy stuff about how stuff gets done second:

> while running parallel operations on a single page should Just Work™, running parallel operations across multiple domains with a single Nightmare instance won't work.

Exactly! The issues at the end of #465 are all on the same page and should just work, but don’t. The major underlying issue is that communication between Nightmare’s process and the Electron process (and similarly between the Electron browser and renderer processes) doesn’t differentiate between which actual call to do  a given operation they are responding to. That’s not a problem until there are two simultaneous calls to do the same kind of operation (in #465, that was `evaluate`, but really it could be any operation). I’m actually going to go make an issue for that now (I think it’s separate from the actual thing #465 was trying to fix).

(Another note for better docs: it would be good to clarify that you need multiple nightmare instances to work on multiple pages at the same time.)

> Having Nightmare directly inherit from Promise opens a bit of a can of worms. (I touched on this briefly in #472.)

Yep! I think it would require a lot of discussion. There are multiple ways to skin that cat (and, as you say, reasons to not to skin it at all). I haven’t written an issue or PR yet because I haven’t taken the time to really think through and articulate it well.

---

Project process stuffs:

> 1. I apologize about the API change

Oh, you don't need to apologize for the change! It's a good change, too (in my opinion, at least).

> I should have mentioned something, but to be honest I'm not sure it broke anyone's code.

Given the way `then` previously worked (clearing the queue), that's probably true—you'd likely get more confusion than utility out of chaining off of `then`. But it is much easier to be confident in that assertion if you let people know about the change in advance and give them at least a few days for feedback. It may or may not break users' code, but it _is_ a breaking change and certainly has the potential to do so. As you said, “a lot of people depend on this library,” which I think only makes this sort of thing a bigger deal.

Maybe @rosshinkley put this better than me above:

> I had seen commentary for both ways and wanted clarification - and perhaps more importantly, justification - written down somewhere for posterity. I am certain it's going to come up in questions again and I wanted to have a reference to point at. (The poor, poor souls that get this PR as a reference in the future. Apologies to future readers everywhere.)

Again, I think the change itself is great! I hear and agree with your reasoning for it 100%. It's the _manner in which the change was made_ that I'm concerned about.

> there are some really big PRs that have been merged

Definitely! Being accepting and being _welcoming_ (maybe “inviting” or “supportive” would be a better terms for what I’m trying to get at here) are different things though. My point is that I think big and good contributions have been made in spite of an environment that might not be as supportive of them as it could be.

I do want to clarify, too, that I used the word “major” rather than “big” because I’m talking about changes that are highly impactful to how someone uses Nightmare. Mainly, that means things like breaking API changes and adding or removing new classes of behavior. Your change to `then` is a good example—it’s small in terms of lines of code, but potentially major in impact. #479 might be a good counter-example if it’s accepted. It’s big-ish in terms of lines of code (at least relative to most PRs here), but relatively isolated and not particularly impactful to how Nightmare works. Users won’t see it as anything but a slight improvement. (Note that that _doesn’t_ mean it won’t require careful review. It’s still a lot of code.)

> It does take time to go through some of the bigger ones

And it should! This stuff should be (and is, I think) reviewed with a careful eye. I am nothing but :thumbsup: :thumbsup: :thumbsup: on that font. I should say that my personal experience hasn’t been one where I think anything has taken too long. It’s only other issues and PRs that I see sitting for a while.

OSS projects are, by nature, done in most people’s off-hours, so taking a few days to reply doesn’t seem bad to me. Even if it takes longer than a few days to come up with substantive feedback, that’s fine. But in my experience, it _really helps_ people feel better about what’s going on if, after a few days, a maintainer at least says “hey, thanks for issue/PR/whatever; we’re super busy right now, but I should be able to take a closer look in a few days/a week/whenever.”

> The next two things on my TODO list…

Thanks for the info! But this is more-or-less exactly what I’m talking about. Now _I_ know what’s on the docket, but this info is still buried away at the bottom of a closed PR. Who is going to see that besides you, me, and @rosshinkley?

> the direction… has been ad hoc… with that in mind, I don't know that a more comprehensive project map is possible.

Ah, good to know! I haven’t been here long enough to get a sense for whether things are mostly just ad-hoc or whether there is a tacit roadmap that only exists in a few people’s heads. @rosshinkley makes some really good points here and I think I agree on what would really be helpful:
- Guidelines for requesting functionality
- Guidelines for submitting patches
- A commitment that project maintainers will also follow a public process (the same process as other contributors?) for making changes.
- Clear documentation about deprecation, and gotchas, etc.

I don’t think any of these things need to be exceedingly exact or heavy-duty; even a little guidance helps. For me, the biggest one by far is having project maintainers/committers following a public process for proposing/making changes, especially for changes that affect the API surface or intended usage.

> Finally, thank you both for the commentary and criticism. I think this discussion is an important one and needed to be had.

Glad to know I’m not just a crazy man off screaming in the corner! Thanks for your feedback, too, it was probably clearer and more concrete than mine :D
",Mr0grog,rosshinkley
491,2016-03-04 19:50:30,"@Mr0grog I didn't have a _great_ place to put this, but this seems the most logical.

I decided to pull together an external [examples project](https://github.com/rosshinkley/nightmare-examples) as to not pollute the Nightmare package with extraneous libraries.  That said it's (I hope) close to what we had originally discussed.  So far it has basic usage on `vo`, `co`, promises and semantic callbacks, as well as a couple of known problems.  I'll be adding more stuff to it as time permits, and would love to have your and possibly @matthewmueller's feedback, availability permitting.
",rosshinkley,matthewmueller
491,2016-03-04 19:50:30,"@Mr0grog I didn't have a _great_ place to put this, but this seems the most logical.

I decided to pull together an external [examples project](https://github.com/rosshinkley/nightmare-examples) as to not pollute the Nightmare package with extraneous libraries.  That said it's (I hope) close to what we had originally discussed.  So far it has basic usage on `vo`, `co`, promises and semantic callbacks, as well as a couple of known problems.  I'll be adding more stuff to it as time permits, and would love to have your and possibly @matthewmueller's feedback, availability permitting.
",rosshinkley,Mr0grog
491,2016-03-04 21:45:12,"@rosshinkley cool! I’ve been a little busy this week, but will definitely check it out.
",Mr0grog,rosshinkley
488,2016-02-16 20:45:07,"Oh! Thanks a lot @rosshinkley  :+1: 
",icaromh,rosshinkley
487,2016-02-18 03:15:25,"thanks @Mr0grog !
",matthewmueller,Mr0grog
484,2017-03-13 20:32:46,"@matthewmueller You wouldn't happen to have the benchmarking code would you? I did some basic benchmarking on a 2016 Macbook Pro between Nightmare (using Electron) and Capybara with PoltergeistJS (Ruby interface to PhantomJS), and Nightmare is usually around 1.5x - 2.5x slower for me",boxtown,matthewmueller
479,2016-02-22 23:51:03,"@rosshinkley No reason not to bump the version as far as I'm aware. Figured I'd go for safety first, though, since I didn't know if there was any policy around Electron versions.
",Mr0grog,rosshinkley
479,2016-02-23 00:06:15,"@Mr0grog I can't find it with a cursory search, but I'm almost positive the version has been upped to accommodate changes like this before.  There are plenty of issues surrounding version changes where Electron changed some sort of internal convention (preference names like `web-preferences` to `webPreferences`, for example).  I think I'd still rather manage the version bump fallout over managing version compatibility, though.
",rosshinkley,Mr0grog
479,2016-02-23 05:00:37,"@rosshinkley Makes sense, thanks for the feedback. Bumped the version and eliminated all the `CAN_UNSUBSCRIBE` stuff in f4499d0ff5145a6082c7630dfba51c100a760d1f. :thumbsup:
",Mr0grog,rosshinkley
479,2016-12-11 12:28:21,"@Mr0grog I'm using the `FrameManager` code and from time to time I still experience problems with incomplete/blank captures.
Perhaps it has to do with the fact that we rely on the first `buffer` event, but I've noticed that sometimes I get 2 and more events (depends on the complexity of the item being rendered?)
I've noticed that adding `beginFrameSubscription(debounce(receiveFrame, frameDebounce)` produces more consistent results.",mikeys,Mr0grog
477,2016-02-15 12:56:30,"@Mr0grog thanks for that quick response, it works ! 
",max-l,Mr0grog
472,2016-02-12 08:55:20,"@rosshinkley Oh, I get this https://github.com/segmentio/nightmare/blob/2.1.6/lib/nightmare.js#L309-L319

the Nightmare instance is implicitly using `then` to perform a fake Promise instance. so it can be yield to a flow control tool like co or vo. And this is weird & should be documented.
",magicdawn,rosshinkley
469,2016-02-11 18:34:45,"@matthewmueller I wanted to speed it up. How much do you think we could increase the speed without compromising the ordering?
",jviotti,matthewmueller
468,2016-02-10 14:03:56,"@Mr0grog Glad to finally have an answer to that question, and good eye for finding that issue!  Especially good to know it's not a framebuffer-dependent issue.

I agree: anything to make the behavior deterministic.  I do have an edge-case question, though - in my read of the documentation, the `beginFrameSubscription` callback is called for any display event.  If the screenshot is taken well after the page is rendered, will the callback still be called?
",rosshinkley,Mr0grog
468,2016-02-10 17:18:52,"@matthewmueller Great, I'll try and put together a PR this week.

@rosshinkley That is a really good question! I will poke around and see what I can see. In the worst case, twiddling with something on the page, such as adding and removing an element, ought to work to trigger it.
",Mr0grog,matthewmueller
468,2016-02-10 17:18:52,"@matthewmueller Great, I'll try and put together a PR this week.

@rosshinkley That is a really good question! I will poke around and see what I can see. In the worst case, twiddling with something on the page, such as adding and removing an element, ought to work to trigger it.
",Mr0grog,rosshinkley
468,2016-02-11 01:52:06,"Spent a little time on this today and discovered:
1. If the page is all settled and idle, the callback won't be fired (as you surmised @rosshinkley), so we do have to do something to the page to trigger it. That something has to affect the render tree—adding comment nodes, empty text nodes, etc. won't do it. Happily, adding a transparent 1x1 div to the top left corner of the page (even if the top/left corner isn't in view!) works.
   
   (Also interesting: even though adding it to the top of the page when the top of the page isn't visible does work adding it where it never _could_ be drawn, e.g. `left: -10000px` does _not_ work. ¯_(ツ)_/¯ )
2. It's easy to crash electron while doing this (see https://github.com/atom/electron/issues/4441), so the whole technique may be a bit problematic in the end. If we stay subscribed to frames for the lifetime of the window, I think we could reliably avoid the crash, but I can imagine that easily getting resource intensive.
",Mr0grog,rosshinkley
468,2016-02-22 23:00:55,"@Mr0grog Would [window.requestAnimationFrame()](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) trigger the render tree?
",Zn4rK,Mr0grog
465,2016-02-12 04:31:35,"@Mr0grog, thanks for poking your head in here. I can see the use case for the point above but I'm kind of confused on the implementation. When I ran you're example I found tried swapping around the order of the waits and found the second always fired first, probably related to both occuring in the same event loop. In Australia we get a regionalized version of yahoo anyway, so the example might work better on your end.

The behaviour I expected from looking at your code/the source code was that the `.wait()`'s would be placed in a queue and executed in order. For example if we modified your example slightly to use chaining instead it reads as though it would do one before executing the other. I'm still kind of new to async chaining though so if I'm missing something obvious forgive me.



As a sidenote, when I was testing things I found that setting `var _timeoutMs = 1;` could cause strange results. Noteably both would fire in the beneath


",Crazometer,Mr0grog
463,2016-02-03 18:34:25,"Yep, that was it, thanks @rosshinkley. Next time I'll make sure to upgrade before reporting anything.
",raypatterson,rosshinkley
461,2016-02-22 06:33:38,"@yoshi95 I added `nightmare.webRequest.onBeforeRequest` in PR #495 
@matthewmueller In order to make plugin like this, I think some apis are needed which can access electron side api or event message receiver written in `runner.js` just like [this](https://github.com/segmentio/nightmare/pull/495/files#diff-b3b53682a18f203ac8d29b0e277cad26R353) which is the same as the way of cookie api.
",kyungw00k,matthewmueller
461,2016-02-23 01:45:13,"@rosshinkley the API will be available to use after #391 is completed, right?
",kyungw00k,rosshinkley
456,2016-01-27 15:08:24,"@rosshinkley Thank you very much!
",AveVlad,rosshinkley
452,2016-01-28 16:24:49,"@matthewmueller it works! (I npm installed the current release, so I'm unsure if @emars fix was reflected in that.)

---

Aside:
While testing it I ran the Yahoo! example in the readme and it doesn't work anymore because the class for the submit button isn't present.



`getElementsByClassName` returns an empty list in this case.
",migueloller,matthewmueller
452,2016-01-28 16:24:49,"@matthewmueller it works! (I npm installed the current release, so I'm unsure if @emars fix was reflected in that.)

---

Aside:
While testing it I ran the Yahoo! example in the readme and it doesn't work anymore because the class for the submit button isn't present.



`getElementsByClassName` returns an empty list in this case.
",migueloller,emars
450,2016-07-10 07:34:35,"Hi, @rosshinkley , measuring page load time is the case i can think of currently which matters most for the accuracy to the test numbers.
",joychester,rosshinkley
448,2016-01-21 21:53:14,"@shri3k I have `""nightmare"": ""^2.0.7""` in my package.json file.

@rosshinkley When I run it I never get a response back and the PNG screenshot doesn't get created. 
Do you mean run it like ...
`$ DEBUG=app bin/www`

I want it to run headlessly. I have changed it to `new Nightmare({ show: false })` but it hasn't made any difference.

I know the route is matched and running ok, as I have put `console.log`'s in there and I can see them in Terminal.

I'm just about to go on holiday for a week. So I won't be able to reply to this thread. But when I get back I'll put together a simple(r) demo that I can share with you.

Thanks in advance.
",adrianparr,rosshinkley
448,2016-04-03 06:27:44,"@rosshinkley I think you were right. I am having the same issue as #224. I managed to get it working locally, but I need it to run on Digital Ocean (headlessly. It appears I'm not the only one having problems with this, judging by the thread on #224.
",adrianparr,rosshinkley
447,2016-04-14 03:57:41,"@inversion I'm definitely in favor of the change, but it needs to be updated to be current.  Would you mind updating this?
",rosshinkley,inversion
447,2016-05-15 09:40:10,"@rosshinkley now updated
",inversion,rosshinkley
447,2016-05-18 17:21:56,"Thanks, @inversion!
",rosshinkley,inversion
445,2016-04-06 07:31:48,"@inversion I think the issue you were trying to solve here was fixed when @matthewmueller changed `.then()` to return a promise: https://github.com/segmentio/nightmare/commit/54f81d3dd9e6e4dad861f749a4a3064e2ce98dd0

If so, it would probably help to close this PR.
",Mr0grog,matthewmueller
445,2016-04-06 07:31:48,"@inversion I think the issue you were trying to solve here was fixed when @matthewmueller changed `.then()` to return a promise: https://github.com/segmentio/nightmare/commit/54f81d3dd9e6e4dad861f749a4a3064e2ce98dd0

If so, it would probably help to close this PR.
",Mr0grog,inversion
441,2016-01-19 12:25:39,"@matthewmueller Renamed `showDock` to `dock`!
",jviotti,matthewmueller
438,2016-01-18 21:50:23,"looks great. thanks @emars !
",matthewmueller,emars
438,2016-01-20 02:58:50,"@emars Thank you for fixing this! :+1: 
",joychester,emars
435,2016-01-14 17:13:49,"awesome, thanks @emars !
",matthewmueller,emars
432,2016-07-08 17:58:59,"@rosshinkley I'm fairly sure I've tried `.on('login', …)` but let's wait until Monday when I check this at work. Nb. I've had exactly the same problem with Casper/Phantom.
",rehael,rosshinkley
426,2016-01-07 12:20:21,"@matthewmueller I'm shipping an electron app which uses Nightmare under the hood, and thus a new electron icon is shown in the dock for a while, which looks very awkward.

> i'm just a little apprehensive with hiding it right now just because it's nice to know if you accidentally opened up a ton of processes.

I see, this issue hit me a few times already. What about allowing a custom opt-in option to hide it from the dock (`hideDock`?) on the `Nightmare` constructor, that way users can enable it on demand, knowing the possible implications.
",jviotti,matthewmueller
425,2016-01-06 19:29:47,"@rosshinkley thanks for putting this together! I really have to think about this one a bit. After I get back from holiday vacation, I will take a closer look. My initial thoughts: 

> This amends the instance, not the prototype. I did this largely because Nightmare does not share Electron instances between Nightmare instances. It didn't seem sensible to force the prototype to have Nightmare actions for which there were no Electron actions. This also allows separate instances of Nightmare to use different plugins.

This could be confusing with how `.action` works, but is sort of inline with `.use`. I'm not crazy about having all these sorta different, but obscure ways to extend nightmare. I think it was discussed a bit in https://github.com/segmentio/nightmare/issues/379. 

I'm not sure the best way to fix this atm but I think where we're headed is going to lead to more confusion. It could just be a documentation thing though.

> Adding Nightmare and Electron actions together makes more sense to me than adding Electron actions alone. Thoughts?

Yah, I think you're right, but maybe actions/use could be nightmare-side only and there's an optional electron side.

> I readily acknowledge this sort-of-kind-of steps on .action() (and to a lesser extent, .use()). I considered updating .use() for plugins, but decided not to introduce breaking changes for this proposal. Suggestions for naming conventions or restructuring welcome.

Need to think on this more. But in general, I agree. It needs to be consolidated a bit more.

> Constructed function scoping works a little differently. This is why the constructed function binds to an object that passes in require (it's slightly cleaner than using eval). This allows require calls to be made in the Electron action. I considered stuffing that object with parent, win, etc - this would make the Electron actions look closer to what is in runner.js, but decided to leave them as explicit parameters for the time being. Thoughts?

Explicit params is probably fine if there's not going to need to be any additional params (or different ordering). If not, we should probably just pass a params object in.
",matthewmueller,rosshinkley
425,2016-01-07 17:18:16,"@matthewmueller no problem, happy (at least to try) to help.

> This could be confusing with how .action works, but is sort of inline with .use. I'm not crazy about having all these sorta different, but obscure ways to extend nightmare. I think it was discussed a bit in #379.

I thought something eerily similar, and I actually had a point about that originally that got edited out as I couldn't make it constructive enough.  I opted to go the way I did just to get the gist of the idea on virtual paper and not stomp on stuff that already existed.  I agree that, as it stands, this will be _very_ confusing, even with more/better documentation.

> Need to think on this more. But in general, I agree. It needs to be consolidated a bit more.

I think I'm going to go ahead and update this to put all of this into `action` - that seems to be a logical consolidation step.  I also think it'll help to have a rough cut of what that would look like.  More on that when I finish.

> Explicit params is probably fine if there's not going to need to be any additional params (or different ordering). If not, we should probably just pass a params object in.

I don't _think_ there will be additional parameters, but the required signature is a bit verbose.  I'm also not crazy about wrapping the function in a context - it makes the parameters feel a bit ""magic"", but I thought I'd put it on the table as an option.  

> Some general aestetic thoughts: I'm not crazy about passing an object in with nightmareAction, electronAction.

A parameters hash is a bit... icky?  I'm not enthusiastic about it either.  As an aside, the reason I did it that way with `plugin` was a personal preference: I'll use a hash when I don't know what the final signature will be.  It's a vestige of experimentation. :)
",rosshinkley,matthewmueller
425,2016-01-08 04:48:10,"@matthewmueller This update keeps the additions of the extensions together, as well as consolidates `.action()` and `.plugin()` into a single `.action()` function.  I've also kept the order of parameters similar to `.evaluate()` where the (optional) client method comes before the Nightmare action.

There are a couple of differences (and possible pitfalls?) in this update.  For starters, to keep the current behavior of `.action()` consistent, I decided it made the most sense to have the Electron plugin(s) be added for all instances.  The child actions are cached on the nightmare constructor, similar to how namespacing for `.action()` works.  Consequently, the addition of those child actions are added to the queue in the constructor such that all child action additions are executed prior to the first user-specified action.  (And they're silent, something I've got mixed feelings about.)

Thoughts?
",rosshinkley,matthewmueller
425,2016-01-13 02:40:22,"@matthewmueller When I wrote that sentence about possible pitfalls, I had two things in mind:
1. I was changing how `.plugin()` behaved considerably - originally, you could add Electron functionality piecemeal.  This meant the execution time/complexity to add Electron extensions was only as big as the instance required, whereas now, actions for _every_ plugin are queued for every instance before execution can even start.  On reflection, since the plugin action is uniform (except in what's actually transferred), I'd bet the performance impact is (almost) negligible.  At any rate, it's not anywhere near dealbreaking, only the fringiest (is that a word?) of fringe cases would be using multiple Nightmare instances with different bolt-ons.  TLDR: adding plugins to every instance isn't going to be a problem. :)
2.  I know I mentioned this already: queued plugin actions execute silently before the first user call.  Should they at least make a `debug` call or something?

Finally: anything else I can do to help this PR along?
",rosshinkley,matthewmueller
425,2016-01-18 22:57:23,"@matthewmueller I went ahead and added the debug, and also went ahead and merged in the recent changes.  Special thanks to @emars for fixing the build, something I just hadn't had time to do. :)
",rosshinkley,matthewmueller
425,2016-01-21 21:16:00,"@matthewmueller I've gone ahead and thrown together a couple of proposed plugins: [additional events](https://github.com/rosshinkley/nightmare-custom-event) (from #376) and [download management](https://github.com/rosshinkley/nightmare-download-manager) (from #382).  From that, I got to use this PR for ""real"" applications, and as such, made a couple of touchups to include options in the Electron method, as well as attaching the options hash to the instance.  This allows for making/expecting options in the Nightmare options for plugin use.
",rosshinkley,matthewmueller
424,2016-01-05 19:29:27,"@rosshinkley ,  Yes.. that is very helpful. thank you for pointing it out. It appears multiple instances of Nightmare are fired up, I'm not sure I understand how Nightmare retains it's page scope yet fire up multiple instances. Oddly it is currently returning results of only 12 of the 14 result pages for me at this point.   I attempted searching a different term with greater than 100 page results and was presented with only 33 links, I haven't identified the problem yet. To resolve the EventEmitter errors I used the fix mentioned here: EventEmitter memory leak (https://github.com/segmentio/nightmare/issues/350).  


",designerx2,rosshinkley
422,2016-04-03 19:01:05,"Thanks a lot, @rosshinkley, what a great bunch of plugins, that's awesome!
",borisschapira,rosshinkley
421,2016-04-18 19:43:26,"> sending Electron’s stdout/stderr to debug channels like electron:log/election:error

Yep.  I'd agree. :)  Frankly, for now, I think we _should_ keep it simple, routing electron's stdout/stderr through DEBUG.

> I’m somewhat skeptical that a new, heavier logging tool needs to come along for the ride, but can definitely see ways that doing so might be helpful.

I am too, and I apologize if I didn't make that clear.  I wanted to float the idea to see what everyone thought.  I was tinkering with the idea more seriously after you (@Mr0grog) submitted #579: With the progress events, it might be helpful to add logging there, but would make running Nightmare with DEBUG _wildly_ verbose.  There are probably other events - like any of the events that are simply forwarded - that could be dropped to a lower log level.  My main goal was to help manage verbosity, but that may very well be a misguided early optimization.

winston was at the tip of my brain, and I had to go look up loglevel from a previous project to remember that.  I was throwing out possibilities, they certainly aren't the only two solutions out there.  I'm willing to entertain alternatives.
",rosshinkley,Mr0grog
421,2016-04-18 20:18:52,"@Mr0grog Yeah, it's getting a _bit_ into the weeds. :)

> One simpler thing to do might be just having more granular logging channels, e.g. browser events, script execution, runner actions, queueing, process management, etc. One could potentially manage just as well by message type as by severity.

For sure.  It's a little bit more of a hassle to set up DEBUG rules to get exactly what you want, but I'm on board.

To that end... with an eventual PR, would it be helpful to include common(ish) DEBUG setups over at nightmare-examples, especially as the more complicated parts start coming in?
",rosshinkley,Mr0grog
420,2016-01-05 17:37:24,"@antpaw Ah, I see.  I must have misread the original diff.  It looked like in passing it was adding the `page-*` events back.  At any rate, I think you are correct. The parent process should listen to `page`.  +1. :)

One nit: I think the page handler should handle variable arguments.  Something like:



... or if the `page-*` convention should be kept for `debug`, something like:



Re testing, the tests for ensuring `page` is handled are already there ([alert](https://github.com/segmentio/nightmare/blob/master/test/index.js#L688-L694), [prompt](https://github.com/segmentio/nightmare/blob/master/test/index.js#L704-L721), and [confirm](https://github.com/segmentio/nightmare/blob/master/test/index.js#L704-L721) are good examples), but simply test that the events are emitted from the child and not submitted to debug.  Testing debug output would probably require using a mock (like mockery).
",rosshinkley,antpaw
417,2016-01-14 22:03:54,"@matthewmueller is there any timeframe on when this fix will be released? I noticed it's not included in the latest NPM release.
",joshgummersall,matthewmueller
416,2016-03-31 07:21:55,"@rosshinkley : thanks for the inquiry , I switched the project to my linux box and it works on it. I suppose that there was a issue with my windows node js installation.

Eric
",erch,rosshinkley
409,2016-03-30 03:14:01,"I believe this was fixed in #487.  @contra can you verify?
",rosshinkley,contra
405,2015-12-23 19:42:30,"@contra can you try again, this time with `DEBUG=nightmare*`? That may help with debugging this issue. May also be a memory leak.
",matthewmueller,contra
405,2016-04-13 18:36:14,"@contra Are you still experiencing this problem?
",rosshinkley,contra
405,2016-04-13 18:36:57,"@rosshinkley I don't think it was ever fixed, I'm not using this for anything right now though.
",contra,rosshinkley
405,2016-07-10 04:09:40,"@rosshinkley Did you push a fix for the problem? I don't think it disappeared on its own. You said earlier you were able to reproduce it, is it still happening for you?
",contra,rosshinkley
405,2016-07-22 21:23:17,"@contra I haven't been able to reliably reproduce without a networking issue.  I'll see if I can dig out the test script and try it again against the current version.
",rosshinkley,contra
405,2016-08-08 16:41:02,"@contra To cut out networking issues, I propped up a server locally to issue requests to (responding with plaintext), then issued 100k sequential requests to that service with a single Nightmare instance.  Nightmare did not hang.  I'm thinking about propping up a minimal HTML payload, then adding javascript and/or HTML and running requests against that to see if it's a caching issue or a memory issue or... something.  If you've got ideas, I'd love to hear them.

@LikeJasper I don't think I've ever seen `debug` behave like that... I wonder if it's interpreting a backspace or non-character escape?  If you could put together a minimum case that reproduces that behavior, I'd love to see that too.
",rosshinkley,contra
405,2016-08-08 17:06:18,"@rosshinkley Well, it's probably more than 100k requests total from the instance itself. I opened 10k requests, and each page probably had ~100 resources on it (CSS, JS, Images, etc.). You should try sending 100k requests to a more suitable test that doesn't load instantly to rule out race conditions (https://mail.google.com/ ?)
",contra,rosshinkley
405,2016-08-08 17:14:34,"@contra I'm trying to keep the tests local because I _have_ gotten some aberrant behavior with flaky networks.  (The kind of stuff that is bordering on impossible to reproduce without infrastructure that I just haven't had time to play with yet.)  That's why I was tinkering with the idea of making generated payloads that would simulate multiple assets of varying sizes.  I'd also prefer to keep whatever I'm testing against local as then I'm guaranteed to know what assets are being loaded.  Being able to make assertions about what is being loaded will help narrow what's actually wrong.

It may also be worth introducing an artificial networking bottleneck to simulate poor bandwidth.

At any rate, the biggest problem with these sorts of tests is time: it's going to take some tinkering to figure out a semi-reliable crash condition (if there is one).
",rosshinkley,contra
405,2016-08-08 17:31:56,"@rosshinkley Understandable, try delaying the response from your server by a couple of seconds: `setTimeout(() => res.status(200).end(), 5000)`

I was 99% sure it had something to do with a race condition while waiting for requests to finish.

If you have a repo w/ your test case I can try to modify it to reproduce.
",contra,rosshinkley
405,2016-08-29 14:51:48,"@contra I haven't had time to address this as yet, but I'll post here when I build a working test case. :)
",rosshinkley,contra
405,2016-08-29 15:09:58,"@rosshinkley Don't think I've introduced any backspaces or non-character escapes myself, but I'll see if I can put together a minimal case to reproduce the weird logging.
",willclarktech,rosshinkley
402,2015-12-23 17:34:57,"Thank you @rosshinkley 
",SantoshSrinivas79,rosshinkley
401,2015-12-22 18:24:59,"thanks @naturalethic !
",matthewmueller,naturalethic
399,2015-12-21 18:56:17,"awesome, thanks @rosshinkley!
",matthewmueller,rosshinkley
398,2015-12-25 03:04:19,"@rosshinkley Could the second method used to share session between different machines?
",dingziran,rosshinkley
398,2016-03-04 06:09:07,"@rosshinkley I am new to nightmare, could you please explain how to use partition to share session between multiple instance of nightmare?
",Velissel,rosshinkley
398,2016-03-27 03:17:28,"@rosshinkley, In my case, persist does not keep session no matter if I start second instance after or before close of first one
",Velissel,rosshinkley
397,2015-12-21 12:13:54,"@yoz The results are the same, a yield is only needed when you want to return the result. You could run the script in this incarnation as well and it will yield the same result:



Output:



Now, when you remove the ending `wait(100)`, it does throw the exception but the process hangs without exiting:


",chrisgeo,yoz
395,2015-12-19 05:21:45,"@matthewmueller 
maybe it is not caused by inject
The below code will stop during the second yield. 
Ans also ""Uncaught ReferenceError: __nightmare is not defined""


",dingziran,matthewmueller
395,2015-12-21 17:07:34,"@dingziran @matthewmueller Matt you are right, it wasn't working for me and I renamed the web preferences and it did work. Thanks.
",felixcrive,matthewmueller
391,2015-12-22 04:55:51,"@rosshinkley i don't see a way you'd be able to pass `parent`, it's transferring over IPC and parent isn't serializable. 

The reason for doing the require is that we could basically tell the electron process to require a file on it's own. I don't like the solution all that much, but I haven't come up with a better one.
",matthewmueller,rosshinkley
391,2015-12-22 05:30:52,"@matthewmueller did I misunderstand?  I thought the intent was passing paths to require over IPC (or possibly, as command-line arguments akin to `paths`) and requiring them in the electron process, not vice-versa.  No IPC serialization required.  Parent should then be passable.

I'll need to take another pass at this when I'm fresh and have coffee.  I'll try to carve out some time.
",rosshinkley,matthewmueller
391,2015-12-23 15:41:55,"@matthewmueller I should have been more specific, and the naming conventions are also probably not helping: in `runner`, `parent` is defined as the IPC process.

Re ideas for implementation (I still need to carve out time to experiment): how do you want them?  Should I make a branch on my fork and link to it, set up a PR with ""proposal"" in the header, or something else?  What would you prefer?

---

@bjrmatos I'm on board for having Nightmare be supported inside of Electron (#393), but I don't think you'd want to discard Nightmare as a node module.  (I would argue it's one of the bigger problems with using Phantom/Casper et al.  Usage from node is certainly possible, but a bigger pain.)  I agree that extensibility is currently an issue, but not an insurmountable one.
",rosshinkley,matthewmueller
391,2015-12-23 19:31:59,"@rosshinkley yah, terrible names haha, should probably change them to `node_process`, `electron_process`, and ... `render_process` (?). yah, I'd like to see what you have in mind. PR or commenting in this issue seem reasonable. Would be nice to see some example code, like how a dev would extend it.
",matthewmueller,rosshinkley
391,2015-12-23 23:40:35,"@rosshinkley my intention never was to discard using `nigthmare` as a node module :smile: however for tasks in scale the current state of `nigthmare` is not very efficient, i'm just trying to support a way to run `nigthmare` that let me scale in other ways
",bjrmatos,rosshinkley
385,2015-12-18 02:01:32,"@matthewmueller Thanks!
",rhysd,matthewmueller
382,2015-12-21 15:41:45,"@matthewmueller Thank you for your reply, and I'm sorry I couldn't get back to this sooner.  Also, apologies in advance for the missive.  Responding to your feedback:

> By default ignore all downloads

Seems reasonable to me.  I can do that as time permits.

> If someone wants to download something, provide nightmare.download(selector|url) which returns a buffer. if a buffer is not possible, support path in the signature to write to a file.

I don't understand what you're asking, what should the selector provided do?  Click?  As for providing a URL, would that be a simple get?  And with the buffer, no, I don't think that is possible.  Electron supplies the filepath and a method to override the filepath.

> When we are downloading something, wait until that download is complete in order to resume.

Blocking on each download isn't how browsers work.  From a test automation standpoint, I can certainly understand the need, but from a purely automation standpoint, I'm not sure I agree.

> Potentially support progress events via nightmare.on('progress', fn) if that's supported

Yes, that's supported (and can be supported with the reduced API).

Re: getting away with a simple request: no, I don't think you want to do that.  If you're making an authenticated request for a resource (thinking of something like a request to a private link in say, Dropbox), you want to do that from within the context of Electron.  Copying the resource URI and issuing a plain GET will almost certainly result in failure.  This (I think, and I'm sorry if I'm misreading here) gets to what @subcontact's problem - authenticated downloads won't work with simple requests.

Re: keeping at least some form of downloads in core, that's a _great_ question.  My answer to that would be a qualified no.  How downloads are handled is probably going to be dependent on use case.  To that end, I think the blocking `.download()` and the non-blocking methods in this PR should be broken out into at least one (probably two?) plugins.  

The problem with that is binding to `will-download`.  A new method to hook into `will-download` with a custom handler could be exposed, or (with modification to pass a child handler) the custom event bindings in #367 could be used.  Thoughts?

I'm willing to reduce the API as requested, and if you think it's a good idea, I will close this PR and open a fresh one with those changes.
",rosshinkley,matthewmueller
382,2015-12-21 18:55:34,"@rosshinkley thanks for the detailed response!

> I don't understand what you're asking, what should the selector provided do? Click? As for providing a URL, would that be a simple get? And with the buffer, no, I don't think that is possible. Electron supplies the filepath and a method to override the filepath.

Yah, you're right, when I proposed that I was thinking about it in terms of what the click/mouseover/etc methods do, but that's not the same as download. 

> Blocking on each download isn't how browsers work. From a test automation standpoint, I can certainly understand the need, but from a purely automation standpoint, I'm not sure I agree.

I was proposing this to handle `wait('downloads-complete')` piece that you added in this PR. Haven't investigated how that would work internally though.

> Re: getting away with a simple request: no, I don't think you want to do that. If you're making an authenticated request for a resource (thinking of something like a request to a private link in say, Dropbox), you want to do that from within the context of Electron. Copying the resource URI and issuing a plain GET will almost certainly result in failure. This (I think, and I'm sorry if I'm misreading here) gets to what @subcontact's problem - authenticated downloads won't work with simple requests.

From my understanding, a POST request triggers the download, so whether this is a plugin or not, we'd need to at least know how to do that with core.

> Re: keeping at least some form of downloads in core, that's a great question. My answer to that would be a qualified no. How downloads are handled is probably going to be dependent on use case. To that end, I think the blocking .download() and the non-blocking methods in this PR should be broken out into at least one (probably two?) plugins.

Yah, I agree.

> The problem with that is binding to will-download. A new method to hook into will-download with a custom handler could be exposed, or (with modification to pass a child handler) the custom event bindings in #367 could be used. Thoughts?

Yah, I think we should add this regardless, we're already hooking into the other events. Seems like it would be as simple as:

`win.webContents.session.on('will-download', forward('will-download'))`

Then you can hook into it with an action:



Haven't thought through exactly how this would work, but that would be the approach I would investigate.
",matthewmueller,rosshinkley
382,2015-12-22 02:00:24,"@matthewmueller no problem. :)  Thanks for yours as well!

Tying up some loose ends:

> I was proposing this to handle `wait('downloads-complete')` piece that you added in this PR. Haven't investigated how that would work internally though.

Yeah, I understand the need, and also buy `.wait('downloads-complete')` is problematic.  Totally off the cuff: I think that enforcing one download per `.download()` call would probably work.  It would consist of (more or less) how it works now, but with an extra wait for `will-download` to be caught, and the internal method using the wait-download function.

> From my understanding, a POST request triggers the download, so whether this is a plugin or not, we'd need to at least know how to do that with core.

I was more concerned with the ""authenticated"" part, not with that it was triggered on POST.  I don't _think_ it should matter.  Electron doesn't seem to care what triggered a download, just that one happens.  That being said, it's probably worth propping up a minimal test case to be certain.

> Yah, I agree [to plugins].

The more I think about this, the more sense it makes, and maybe should redirect my attention to #391.  I was thinking about how to extend the Electron process earlier today, because, well...

> Seems like it would be as simple as: `win.webContents.session.on('will-download', forward('will-download'))`

Handling this appropriately seems to require doing some special steps in the Electron process.  In tinkering with `.on('will-download', fn)`, as soon as the `DownloadItem` fell out of the handler scope, Electron would execute whatever behavior had been defined by synchronous completion (almost like the `on` handler is more like middleware, if that makes sense).  The [Electron docs for `setSavePath`](https://github.com/atom/electron/blob/master/docs/api/download-item.md#downloaditemsetsavepathpath) seem to support what I found by experimentation:

> The API is only available in session's will-download callback function. If user doesn't set the save path via the API, Electron will use the original routine to determine the save path(Usually prompts a save dialog).

In other words, trying to do something via event communication would (almost) certainly result in a blocking download dialog.

I think I'm going to close this PR, backburner the download plugins for the moment, and direct my remaining questions to #391 as I think they're more sensible under that topic.  
",rosshinkley,matthewmueller
382,2015-12-23 12:10:10,"@rosshinkley since the merge of this PR seems to be on hold. would you be able to provide some example to download a file using the internals? Sorry, I am new to both electron and nightmare
",SantoshSrinivas79,rosshinkley
379,2016-01-06 18:43:05,"yah, i agree with @rosshinkley. `use` let you bundle a set of actions together, while `action` defines a new method. let me know if this is unclear and maybe i can clear it up in the docs
",matthewmueller,rosshinkley
377,2016-01-18 23:28:51,"@matthewmueller I just implemented a `showDock` option: https://github.com/segmentio/nightmare/pull/441
",jviotti,matthewmueller
377,2016-01-18 23:35:12,"@matthewmueller BTW, is there an existing issue to specifically tackle the open electron processes problem when an error occurs? I'd love to collaborate on that one.
",jviotti,matthewmueller
377,2016-01-19 01:09:19,"@jviotti #409 is _somewhat_ related, is that what you had in mind?
",rosshinkley,jviotti
375,2015-12-22 22:22:49,"@contra ahh, are you seeing it hang forever if the initial page load fails? right now it's only initialized when you call `.wait()` before a click or something. that should be fixed.
",matthewmueller,contra
375,2016-04-14 16:52:52,"@contra Depending on the kind of page load failure, #553 _might_ address your issue.

@joychester I wrote two quick test cases:

**nonexistent element**



**function that never returns true**



Both error out with the appropriate error message after 30s.  Can you provide a minimal example that causes nightmare to hang?
",rosshinkley,contra
375,2016-04-15 02:22:52,"Hi, @rosshinkley , your case works fine from my side too, but my test pages is not kind of different with yours :)
my page will load the page content async(like SPA application), so if i write wait method like following, it will hang forever:



however, if i hard-wait for the page loaded complete, then the wait() works fine until it timedout(10 seconds in my case)



Seems, nightmare API does not support SPA properly(wait for a element created after Dom content loaded event). Hope this case helps for your further analysis. just let me know if you need any info.

Thanks!
",joychester,rosshinkley
375,2016-04-16 01:01:06,"@rosshinkley , Thanks for your info , is that possible to be an issue with Electron? hack way may not elegant, but once you have more insights, please let us know :)
",joychester,rosshinkley
375,2016-04-17 01:03:02,"Thanks @rosshinkley for all your effort and investigation! then we need to wait for Electron permanent fixes. 
",joychester,rosshinkley
375,2016-04-20 13:52:58,"they are pretty good team to get things resolved fast, and thank you @Mr0grog and @rosshinkley for chasing them :)
",joychester,rosshinkley
375,2016-04-20 13:52:58,"they are pretty good team to get things resolved fast, and thank you @Mr0grog and @rosshinkley for chasing them :)
",joychester,Mr0grog
374,2015-12-09 18:55:56,"@matthewmueller Ah, yeah, grouping them makes a lot of sense.  I'll pull that together as time permits.

As for overwriting the preload: the template-generated preload would be overwritten every time.  The template is internal to Nightmare.  As such, the internal changes to preload should be picked up if any are made.  Ultimately, what I am reaching for is the default exception behavior for prompt and confirm may be (probably is?) undesirable, and there should be a way to override it.  Maybe I'm not following what you're asking?

As for specific use cases: the only one I know of offhand is what @yoz ran into with `alert` - if you have a prompt or confirm an event that fires _before_ an `inject`/`evaluate` can run.  This gets back to overriding the default exception behavior - I'd imagine you'd want to overwrite it to handle dialogs with valid responses.  Does this make sense?
",rosshinkley,matthewmueller
374,2015-12-10 19:56:05,"@matthewmueller I may have gotten a _bit_ overzealous (and these changes almost certainly step on #337's logging changes), but I've grouped all of the page-\* events into one unified event.  I also tried to update the documentation to be clear-ish on what to expect with `on('page', type ...` using the jsdoc-like format.  (Offtopic, is there a documentation standard to follow?  Is this tangentially related to #364?)

Thoughts?
",rosshinkley,matthewmueller
374,2015-12-10 22:01:25,"@matthewmueller thank you. :)  Responding to your questions:
1. Yeah, the other reason I went the templated route was because of precedent, but regardless, this is a good question.  Spitballing an idea off the top of my head: could the internal preload script be in its own file, read off disk, have the `{{!src}}` token spliced in, and have that be used in the place of `exports.preload`?  That would let both the user-defined preload and internal preload be real first-class javascript files, complete with syntax highlighting.  (There are probably less ugly, less fragile variants of this, like having the token in a comment or something.  The chosen solution might be able to be adapted for the other templates.  Would that worth pursuing in a separate PR?)
2. Thinking about this with a little distance, I could have probably simply used `require` to pull in the user-defined preload, and pass the IPC to it that way.  Should the token then be changed to something like `require('{{!userPreloadFilepath}}')(__nightmare.ipc);`?  I'm almost positive the path would _have_ to be absolute, and the documentation should reflect that.  This also may help solve the token issues from your first question if the require had a dummy file to require by default.  Thoughts?
",rosshinkley,matthewmueller
374,2015-12-11 04:19:57,"@matthewmueller This was an itch I had to scratch: I went ahead and pulled together the `require` approach described above.  Is this close to what you had in mind?
",rosshinkley,matthewmueller
373,2015-12-18 10:42:02,"@matthewmueller I expected a more elegant solution, eg blocking scripts loading by domain or hostname, this way works in PhantomJS.
",SerjoPepper,matthewmueller
373,2017-03-13 08:50:29,"Hi @matthewmueller ,

I am not really sure the issue that I create a custom preload script to capture alert message. Actually I follow the site that you provided, but no chance.




",nquoctuan,matthewmueller
371,2015-12-07 19:50:02,"Thank you for your time @rosshinkley. Unfortunately it means that I will either have to switch to barebone Electron or deal with this issue in forked Nightmare. It would be nice to know if there is some long term plan to support those usecases or if the idea is not even considered to be included in Nightmare's source.
",pkawiak,rosshinkley
368,2015-12-05 20:03:46,"thanks @danielstjules! i think the API should be `nightmare.header()` and then support the following:

`header(header, value)`
`header(obj)`

what do you think?

the rest looks good!
",matthewmueller,danielstjules
368,2015-12-07 19:17:36,"@matthewmueller Sounds good, updated!
",danielstjules,matthewmueller
368,2015-12-08 04:26:41,"thanks @danielstjules !
",matthewmueller,danielstjules
367,2015-12-10 15:54:59,"@matthewmueller I have a couple of questions for you.  One, is it acceptable that `.bind()` accepts _only_ a name, and not data (like say, jQuery's bind)?  Two, `.unbind()` removes all of the named event listeners, introducing the (probably wrong) assumption that unbinding a custom event should remove all of the child process listeners for that name.

Is this closer to what you had in mind?  Thoughts?
",rosshinkley,matthewmueller
367,2015-12-10 21:20:40,"@matthewmueller Sure, making the event handler an option in the function call, or having `unbind` remove the parent listener makes sense.  It's also probably worth pointing out that I don't think you can fully wall this off from `.on()` - the ad hoc events will still be listenable. In other words,



... should still be valid, if a bit misleading.  Alternatively, and for completeness,



... would also still call the handler from `.on()` when `some-custom-event` is emitted.

It's also probably worth noting that I don't think you can remove an `.on()` handler, either - is there a helper to remove a listener from `child`?

Are you suggesting making the handler function for `.bind()` mandatory?  I'm not so certain about that, but I can't think of a compelling counterargument.

---

What I was a _bit_ more concerned about - and I'm sorry I wasn't terrifically clear - was what happens when you call `.unbind()` down to the child process (in `runner.js`).  I wrote it such that the Electron `.unbind()` listener would scrub all listeners with that name from the renderer, effectively removing that event from being emittable.  This is owing to the handler in the renderer's `.on('some-custom-event', fn)` not being unique and also not being scoped outside of `bind`.

This also raises another question: can more than one event emitter per name be added and bound?  Is there a use case for having multiple custom event emitters of the same event name?  Would it be worth enforcing a rule that one and only one custom emitter could be added per name?

I'm still not sure I'm being clear.  Let me know if you have questions.
",rosshinkley,matthewmueller
367,2015-12-12 20:29:21,"@matthewmueller I've gone ahead and put in the optional handlers for custom events.  

I've added enforcement of only one child emitter per name.  This prevents situations where custom events can have more than one emitter.  (This also clears up my question from above.)

I've also added some extra logic around how `unbind` works: `.unbind('sample-event')` will remove the event listeners on the parent and the child emitter, where `.unbind('sample-event', handler)` will remove the handler on the parent and the emitter on the child if it is the last handler.  I'm not _real_ confident in the last parent listener removal logic also removing the child emitter.  It's nice the event cleanup is there, but I worry it might be unexpected behavior.  What do you think?
",rosshinkley,matthewmueller
365,2015-12-04 18:23:52,"@yoz I thought about this when I was going through this last night, and decided that I'd address your immediate problem first.  I'm planning to look at confirm and prompt as time permits.
",rosshinkley,yoz
363,2015-12-03 17:09:38,"@Kreozot haha, yah i was thinking about that... not sure how it'd look unless we break the API. I guess we could maybe do:



Almost wondering if it just makes more sense to just use an object, which wouldn't break the API:



---

Also, how does this handle multiple elements on different parts of the page by the way?
",matthewmueller,Kreozot
363,2015-12-05 13:21:04,"@matthewmueller Please take a look.
",Kreozot,matthewmueller
363,2016-09-18 20:01:07,"@highvoltag3  I'm still open to this PR, but the source is well out of date and would need to be updated.  Additionally, I don't think @matthewmueller's comments were ever addressed.
",rosshinkley,matthewmueller
361,2015-12-03 16:27:49,"Hi @matthewmueller - I'm currently using it to implement drag and drop as well. (I've made an action which can drag and drop from/to page pixel positions, and you can also pass DOM selectors or functions to evaluate in the page context for it to determine those positions).

Internally it uses mouseDown/Move/Up and could also use touchStart/Move/End for mobile simulation.

I'd like to contribute that as I think it could be useful generally. Any thoughts? It would be easy to port without a public sendInputEvent action anyway.

Also just on the upgrade side you'll notice some deprecation warnings with the new Electron which I haven't looked into.

Cheers,
Andrew
",inversion,matthewmueller
361,2016-04-27 06:17:27,"Hi @inversion, I stumbled over this issue since I also need some drag and drop functionality. Have you released anything in that direction? Maybe a drag and drop action/plugin?
",maxfriedmann,inversion
359,2015-12-04 01:03:54,"@yoz ah, I see.  I don't think you'll have great luck with `inject` then, either.  Both `inject` and `evaluate` are (at least in my read) the same under the covers.

Pondering out loud: since alerts are blocking, should they be caught and emitted as alert events to Nightmare, similar to how `console.log` works?
",rosshinkley,yoz
358,2015-11-30 13:50:11,"I was working on the same feature and was about to push it when I saw your PR. This is a much needed feature, I hope it will be merged soon. Thank you @Kreozot for your work!

FYI here's my own implementation: 



But your solution seems at least as good
",yhuard,Kreozot
358,2015-12-02 23:17:27,"@rosshinkley I've already thought of that and ended up thinking that resizing the viewport is dangerous: it can have side effects that the user didn't expect. For example, if an element is too big for, let's say, a medium screen but is hidden on large screen and we apply the resizing, the element may disappear. 

We define the viewport at beginning because we want to test the rendering with that viewport. If the screenshot cuts the element we capture, it's actually a good indicator that something's wrong with our style!
",yhuard,rosshinkley
358,2015-12-03 16:57:11,"@rosshinkley the reason i didn't mind to much about the reszing of the viewport is the point @yhuard made about css selector but also a genuine use case could be that you want to see how the element looks on a specific device. if for example you are taking a screenshot of a header on mobile. you can see exactly what the above the fold content is.
",sepehrs,rosshinkley
358,2015-12-09 17:53:25,"Oh, That's good news for me! Thanks @matthewmueller !
",felixcrive,matthewmueller
358,2015-12-10 14:49:39,"@matthewmueller I will give it a try this morning and I will let you know. The selector I want to capture is an external iframe. This is great. Thanks!
",felixcrive,matthewmueller
358,2015-12-10 16:19:47,"@matthewmueller It did work, thanks a lot!
",felixcrive,matthewmueller
358,2015-12-10 16:34:29,"@matthewmueller  Is there a way to capture an image if the evaluation of the page returns true?
",felixcrive,matthewmueller
354,2015-12-02 19:02:05,"Hm. This is not really sutiable for my usecase. I want to be able to trigger a ""log time"" process giving status updates on the go. @rosshinkley Your example only (my perspective) would work (my use case) if I would trigger the process and then check in a certain interval if there is any update. - no ""live data"".

I had a quick look  through the source an found this



Can't I utilize somehow `__nightmare.ipc.send` ? (or I am on the wrong track..)
",fentas,rosshinkley
354,2015-12-03 16:58:04,"@matthewmueller I (embarrassingly) missed the `ipc.send`.  That's handy.

I think I'm on the same train of thought - I was tinkering with adding user-customizable events to accomplish what @fentas needed and have at least some of the basic mechanics down.  As time permits, I'll see if I can pull together the changes + documentation required. :)
",rosshinkley,matthewmueller
350,2015-11-20 17:07:22,"@rosshinkley yes, i recreated. ""listener should remove itself when the **event handler is called**"". if i will emit only `response` event, handlers for `error` & `log` from every `.evaluate()` will wait for `error` & `log` event
",s0m3on3,rosshinkley
348,2015-12-02 17:24:59,"Yup, after updating everything is working. Thanks @rosshinkley!
",ns-jdripps,rosshinkley
346,2015-11-18 23:37:17,"@rosshinkley Thanks! I will try use your fork.
",olegatro,rosshinkley
346,2015-12-03 16:32:29,"@inversion Far and away better than my implementation.  Thanks!
",rosshinkley,inversion
345,2015-11-16 18:09:49,"Thanks! @bjrmatos @rosshinkley
",alfonsomga,rosshinkley
345,2015-11-16 21:11:58,"@rosshinkley +1 it isn't working at all here, when I added `'web-preferences':{partition: 'persist:foo123'}` some functions like `.type()`, `.click()`stopped working.

![dd](https://i.imgur.com/JUCt5Ij.png)

It didn't type the password & email and also didn't click on the login button...
",alfonsomga,rosshinkley
345,2015-11-17 11:23:17,"@rosshinkley Thanks, it works now :+1: 
",alfonsomga,rosshinkley
344,2016-08-11 09:18:37,"@rosshinkley Hi for some reason the partition is not working for me
https://github.com/segmentio/nightmare/issues/754
",daniel3d,rosshinkley
338,2015-11-25 09:23:07,"@matthewmueller are there any autoformatter settings for the project? If we could standardise them it would help.
",inversion,matthewmueller
338,2015-12-02 16:57:09,"Spacing updated @matthewmueller 
",inversion,matthewmueller
338,2015-12-03 16:13:54,"@inversion yep, good call. planning on adding standard.
",matthewmueller,inversion
338,2015-12-03 16:28:48,"now on master, thanks @inversion !
",matthewmueller,inversion
337,2015-12-03 16:44:05,"Hi @matthewmueller , the use case for us is that our application logs messages to error, warn, info, log depending on severity and these are useful to capture in our tests (we're mainly using nightmare for UI testing). I think a nicer implementation would be a generic `console` event which captures all console output but also adds a `type` or similar field indicating the 'level' (dir, trace, info, error) etc.

The existing page-log event can be kept the same as it is for backwards compatibility and people who are only interested in `console.log` and want simplicity.

Happy to implement that if it sounds like something that would be merged.
",inversion,matthewmueller
336,2015-12-09 20:11:03,"Thanks for the PR @inversion ! I incorporated these changes in #376 
",matthewmueller,inversion
334,2015-11-05 15:28:34,"Hey @inversion, I was trying to use the `page-error` event and it took me a while to realise that while documented in the README, it is not yet available in the last published release. I had to install from GitHub in order to use it: `npm install --save nightmare@segmentio/nightmare#e556285`.

Hope that helps.
",thibaudcolas,inversion
332,2016-01-05 08:23:43,"@rosshinkley :+1: for sharing fork and a how-to-gist and +1 for feature
",santeriv,rosshinkley
328,2015-12-18 01:04:00,"thanks @rosshinkley for the example :-)
",matthewmueller,rosshinkley
322,2016-04-08 18:34:48,"@rosshinkley i haven't used nightmare in a long time, but yes it was with fat arrow functions, thought it shouldn't have mattered either way because I was transpiling down to es5 before running...
",davis,rosshinkley
320,2015-11-11 00:45:29,"@reinpk it's just one line!
",Namek,reinpk
320,2015-11-25 00:16:59,"Okay going to merge this as it seems like it's helping out a lot of folks. Haven't dug into the internals yet, but I'm sure we can make changes if issues crop up.

Great work @fr- !
",matthewmueller,fr-
319,2016-04-03 01:47:23,"@rosshinkley Yes! I'll get on it tomorrow or monday - and closing this with a link when I'm done.
",Zn4rK,rosshinkley
312,2015-12-05 16:09:56,"@reinpk I've try to capture `did-get-response-details` event, but I got EVERY response of the resources(js, css, images...) in the page. I only want the main page's response info.

Is there any way to do this?
",scarletsky,reinpk
309,2016-04-03 01:36:00,"@kevinprotoss @fr- Could you use `.header()` to accomplish this?
",rosshinkley,fr-
306,2015-12-03 22:34:06,"thanks @antpaw !
",matthewmueller,antpaw
301,2015-12-04 02:21:21,"@matthewmueller FWIW, there's a decent looking [jsperf](https://jsperf.com/bind-vs-closure-setup/49).  According to that, it looks like the `bind` method is significantly slower.  Is that close to what you had in mind?
",rosshinkley,matthewmueller
301,2015-12-04 06:39:32,"@rosshinkley yep this is exactly what i was looking for:

![img](https://cldup.com/LwkeRajv9Q.png)

even though it's a micro optimization, i don't think using `self` is much worse syntactically. 

closing for now, thanks guys!
",matthewmueller,rosshinkley
300,2015-10-20 21:33:00,"Thanks @antpaw !
",matthewmueller,antpaw
298,2015-10-20 22:33:14,"@matthewmueller i'd recommend #303 instead. you may have more make tasks later but `npm test` is very common (as the shortcut is even there from `npm run-script` / `npm run` test)... so best to support that. i think many CI systems default to this, too.
",tejasmanohar,matthewmueller
298,2015-10-20 23:07:26,"@tejasmanohar yep, i like that more. I think we should keep the makefile, but the other stuff looks good!
",matthewmueller,tejasmanohar
295,2015-10-21 23:52:03,"@matthewmueller Yes, you should change the example, because you want start try it out and you got this error it's frustrating at the beginning.
",laychopy,matthewmueller
282,2015-10-19 00:03:12,"@matthewmueller Could you provide a test example?
",LarryBattle,matthewmueller
274,2016-03-30 02:54:22,"@fritx Could you use [`.insert()`](https://github.com/segmentio/nightmare#insertselector-text) instead?  That sends text directly to the specified selector.
",rosshinkley,fritx
274,2016-03-30 03:39:28,"Hey, @rosshinkley, i'm afraid not.
I need to somehow trigger the inputbox to react the action.
""Insert"" does not trigger any event, but ""Paste"" does.
Paste can also bring images too (if copied).


",fritx,rosshinkley
274,2016-04-08 17:09:45,"@fritx Are you thinking of something like [`webContents.paste()`](https://github.com/electron/electron/blob/master/docs/api/web-contents.md#webcontentspaste)?
",rosshinkley,fritx
256,2015-10-01 15:37:49,"@matthewmueller Sure thing. In the following example, the `debug` message is never shown (using thenables instead of generators):



In this other snippet, both `getTitle` and `.screenshot()` are never executed:



Hope it helps. I'm currently using version 2.0.5 because with 2.0.6 it doesn't even get passed the first `.evaluate()`.

I know you're all putting time and effort into this and I'm thankful, but the lack of documentation and consistency is making the experience to really be a nightmare...
",FdezRomero,matthewmueller
256,2015-10-02 12:18:58,"Hi @matthewmueller,

I think I found the issue I was having with the undocumented use of `.then()`. I was chaining several actions like this (omitting the parameters for clarity):



And saw that the next action didn't hook up with the previous part of the chain. I think this is why the `.then()` after the `.screenshot()` didn't run. Please correct me if I'm wrong as I'm still trying to get the inner workings of Nightmare.
",FdezRomero,matthewmueller
250,2015-09-26 02:41:50,"@matthewmueller ok.
- No, forget the missing semicolon. ~~I meant it was I that had [missed a semicolon](https://github.com/segmentio/nightmare/pull/250/files#diff-9dcc65cc4a6c14eb4f81fbe4005301d0R41) in my PR commit, but just leave it ;)~~ (cleaned)
- Yes, with `node-integration` turned off:
  - Electron won't expose node stuff like `module/exports` to the web.
  - So we could correctly load any webpage with many scripts like jquery that depends on a `module/exports` detection.
  - Still, with a `preload` script we can inject anything with node access just like what we do, but only at the very beginning.
  - We have to do so. It's the only way to load normal webpages in electron correctly.
  - And this should get it loads even faster than before, without node integration which is unnecessary around the user webpage itself.
  - As a change, the `preload` script should be the only way that we write things in node to get nightmare page ready.
  - Most importantly, it fixes a **security** bug, as in `node-integration` a webpage can hack into the user system in javascript. eg `require('fs')`.
",fritx,matthewmueller
250,2015-09-26 03:11:42,"@matthewmueller once this problem solved, in #249 i'd suggest we replace `google.com` with `github.com`, and it'd get to work. ;) and my [project](https://github.com/fritx/wxbot) is gonna switch back to nightmare.
",fritx,matthewmueller
250,2015-09-26 05:08:55,"cool, thanks much! @matthewmueller 
",fritx,matthewmueller
249,2015-09-25 16:02:04,"@fritx  以后遇到问题可以交流交流！
",FredXue,fritx
248,2015-10-21 21:55:11,"@antpaw are you sure it's DEBUG=nightmare:log ? This does nothing here. Is it just the normal DEBUG=nightmare ?
",edasque,antpaw
242,2015-09-24 21:24:26,"@matthewmueller Thanks for the hint. I've tried to listen to `error` event on `nightmare` on an example very similar to @antpaw's one, but with no luck (didn't see any errors). I was expecting something like `$ is not defined`.
",mpangrazzi,matthewmueller
242,2015-09-24 21:24:26,"@matthewmueller Thanks for the hint. I've tried to listen to `error` event on `nightmare` on an example very similar to @antpaw's one, but with no luck (didn't see any errors). I was expecting something like `$ is not defined`.
",mpangrazzi,antpaw
242,2015-09-25 14:27:28,"@matthewmueller I've created this issue with a testcase #248 please help me :)
",antpaw,matthewmueller
238,2016-07-12 20:51:34,"@rosshinkley I have this problem with the latest version installed today. Interestingly enough, this happens on an Ubuntu box and a Mac, but on Windows, it's fine. I've come to expect the opposite usually.
",catdad,rosshinkley
235,2016-01-26 15:48:25,"@rosshinkley True... Saw these issues too. :+1: 
",IonicaBizau,rosshinkley
224,2015-09-20 12:55:51,"@matthewmueller that might help:
https://github.com/shippableImages/minBase/blob/master/ubu1204/01base/containerSetup.sh
https://github.com/shippableImages/minBase/blob/master/ubu1204/01base/xvfb.sh

Using the shippable container to run nightmare and mocha.
",pastawoua,matthewmueller
224,2015-09-21 05:56:47,"@matthewmueller I've narrowed it down to `apt-get update && apt-get install -y xvfb x11-xkb-utils xfonts-100dpi xfonts-75dpi xfonts-scalable xfonts-cyrillic x11-apps clang libdbus-1-dev libgtk2.0-dev libnotify-dev libgnome-keyring-dev libgconf2-dev libasound2-dev libcap-dev libcups2-dev libxtst-dev libxss1 libnss3-dev gcc-multilib g++-multilib`

Hope that helps!
",pastawoua,matthewmueller
224,2015-09-30 05:34:11,"@matthewmueller https://github.com/Rob--W/node-xvfb might be of use for controlling the xvfb server.
",notsentient,matthewmueller
224,2015-12-10 15:13:56,"For those not familiar with Docker, here is the step by step once you've installed it (it needs a 64 bit modern distro & kernel).

In the nightmare source directory (from this repo), create a file named Dockerfile which has the content at the bottom of this post (@matthewmueller I had to make some edits, including  replacing `FROM node:5` with `FROM node:4.2` for version pinning since 5.x is not LTS) then run:

`docker build -t nightmare-test .`

This takes a little while. Then:

`docker run nightmare-test`

expected result is:



My Dockerfile is:



My index.js for the CNN example (in the root project folder is:



@matthewmueller, if you want me to do a PR with the docker file, an example directory and documentation, let me know.
",edasque,matthewmueller
224,2015-12-22 16:26:21,"@matthewmueller I am sorry if my comment was offencive .I was very happy with nightmare when working on windows but suddenly all my app stopped working without any error messages... its really very hard...just don't know what to do now...
",sriducati,matthewmueller
224,2015-12-24 12:49:23,"@matthewmueller , @edasque , @younes200  Thank you all...After changing many operating sys versions... found simple fix Ubuntu 12.04 64-bit ;) 



Its running on OpenVz VPS , No docker used... It would be great if anyone could replay to  https://github.com/segmentio/nightmare/issues/411 ,  I can write a complete help guide to install in VPS ... 
",sriducati,matthewmueller
224,2016-01-06 04:57:02,"@matthewmueller 
Why not put the solution/workaround in README ?
",scarletsky,matthewmueller
223,2016-01-05 14:34:09,"@yoz I doesn't work I have electron-prebuilt@0.36.2 and Nightmare@2.1.2 pointing to electronPath.
",felixcrive,yoz
222,2015-09-19 00:20:10,"@matthewmueller can this be merged in please?
",pastawoua,matthewmueller
222,2015-10-06 03:07:45,"@matthewmueller @reinpk is there an issue with the code, anything you want me to change, would be helpful to merge so I don't use my forked version in production.
",pastawoua,matthewmueller
222,2015-10-06 11:50:16,"@fritx keyCode is not fired on `input` or on `change` events.

fyi, casperjs implementation: https://github.com/n1k0/casperjs/blob/master/modules/clientutils.js#L899

similar code than on the `check` method, not as robust as #244 but an easy fix for now.
",pastawoua,fritx
220,2015-09-14 22:05:59,"![](https://cloudup.com/ciR3atmYpAp+)

:dancer: 

Amazing work on V2 @matthewmueller!
",sperand-io,matthewmueller
218,2015-09-14 01:31:18,"Hi @matthewmueller thanks for the reply and for the example.  Ultimately, I would like to use the nightmare api to interface with new windows.

Regardless of whether this repo decides to support this, the fact is some websites may spawn new windows on their own. When this happens, the windows are shown (instead of running headless) which is not the desired effect...

Like you said, we may need to open an issue on the electron repo. Instead of monkey patching window.open we may need to monkey patch browser-window function so it defaults to `{show: false}`.
",bchr02,matthewmueller
209,2015-08-31 03:25:35,"awesome thanks @danielstjules! we're working on v2 #200 and will try to pull this in there as well to accelerate tests :)
",reinpk,danielstjules
200,2015-08-15 05:33:27,"Just pushed up a branch for `v2`. I could use some help finishing up some of the remaining tasks:
- [x] port over the remaining actions
- [ ] add some examples
- [x] write some tests

Unfortunately, I cannot create a PR because the commit history is completely different. I could just write on top of all the old files though.

cc/ @reinpk @amillet89 
",matthewmueller,reinpk
200,2015-08-15 19:27:59,"awesome @matthewmueller just pushed some updates with a structure for testing based on the old tests, as well as circleci setup, and adding the `.back()` action... will push it a bit further this afternoon
",reinpk,matthewmueller
200,2015-08-17 01:20:03,"Nice work @reinpk! Can't wait to see this release in the wild.
",matthewmueller,reinpk
184,2016-03-30 02:47:01,"@fritx @a7madgamal @luatnd Is this still an issue since the move to Electron?
",rosshinkley,fritx
154,2015-03-23 11:54:09,"@reinpk  Thanks, i have setup default to what it is in production now.
",ravisuhag,reinpk
151,2015-06-11 16:26:27,"@azurelogic how would you do the same thing you did but on a asp.net web form page where there are different submit buttons (and the entire page is a form, that's how asp.net pages are)? One of those submit buttons submits the form and serves you the file. What I'm trying to figure out is how to do the `XMLHttpRequest` but when that specific submit button was clicked.

**Edit**: Figured it out, when you click on a specific submit button, the `POST` body will have that button's `name`s in this format:



And the other buttons' names will be excluded from the `POST` body
",rclai,azurelogic
148,2015-08-25 18:51:24,"@reinpk Can the feature to interact with new window be added to v2?
",bchr02,reinpk
148,2015-09-13 19:02:40,"@reinpk that's too bad. I was hoping for this feature to come now with v2 out. 

I wish I understood more on how you are using electron in place of phantomjs. Maybe then I would understand why you say that you don't think it's possible. 

Any chance you can explain at a high level how you are using electron? It's my understanding that electron is used to package applications... 
",bchr02,reinpk
148,2015-09-14 04:12:17,"@reinpk BrowserWindow.getAllWindows() returns an array of all the BrowserWindow object references. Surely this could be used to incorporate some sort of interaction with newly generated windows.

cc @matthewmueller
",bchr02,reinpk
142,2015-03-09 09:14:37,"For me, it was an app that would not register for the click events after registering for touch.  @RainerAtSpirit: If it really is the same issue, you could do one of the following:
1. Register for click events instead of touch on the application side or
2. Actually create touch events via nightmares JS injection into the browser or
3. Trigger the click hanlders programatically w/o true browser events

It appears you resorted to (3). The other approaches might feel less hacky for you, especially (1).

@johntitus Haven't tried 2.0 yet, I'll give it a shot. The above example was fixed in the original app for me though and now also works w/ 1.9.
",apfelfabrik,johntitus
140,2015-01-26 00:39:46,"@reinpk it seems a little preemptive to not respond to a ticket for almost a month and then close it without giving the opener any chance to post sample code, just putting it out there. This is an old issue and I've since found an alternate solution so I don't have any sample code for you anymore, but I would have about a month ago =). Thanks for your work!
",zachfeldman,reinpk
135,2014-12-12 03:15:40,"@lambtron LGTM! Why is it failing though?
",stevenmiller888,lambtron
126,2015-01-26 03:36:10,"@reinpk Gist available here: https://gist.github.com/kytwb/de153003ef2c211774b9
",kytwb,reinpk
126,2015-02-26 04:05:02,"@johntitus That fixed it for me. Problem is shoe is a dependence of phantom so would require to fork nightmare, fork phantom, fork shoe, fix, then cascade reference all the patched forks in each package.json. Good find though!
",kytwb,johntitus
126,2015-04-03 20:54:33,":+1:  can confirm @johntitus's solution worked.
",nickmerwin,johntitus
126,2015-04-03 21:08:48,"@johntitus solution did work, but it stinks for us because I'd have to go in manually update all the node_modules on my production server...and then once they refresh with a `npm install` I'd have to do it again :frowning: 
",sean-hill,johntitus
123,2015-02-26 15:47:47,"I am experiencing the same issues on windows with the slowness. 

@johntitus I tried your suggestion at it worked! much faster now. Hopefully this can be addressed, so this wont be necessary, though.
",bchr02,johntitus
121,2014-11-29 06:34:48,"@lambtron I use `.post()` to use the http post method, for example, when posting data to a server.

At the moment I'm using Nightmare for testing, and validating a web application (that requires posting data).
",UnclaimedPants,lambtron
121,2014-12-03 18:52:08,"@lambtron Further, I use it to submit forms, and also post data to web applications. Nightmare is great for integration testing, and also for testing the availability of applications, by scripting login tests, and feature testing.
",UnclaimedPants,lambtron
120,2015-03-23 03:47:42,"@reinpk Any news on this, or should we file an issue elsewhere? I've had my Nightmare version constrained for far too long, and there have been many updates in `node phantom` module. I'm also working to switch to PhantomJS 2.0.0 which surprising worked fine if I was on Nightmare 1.6.0 but upgraded old Nightmare package.json to 0.7.2 of https://github.com/sgentle/phantomjs-node. Even the simple Optimizely signin form fails (and this has no dynamic validation, only on form submit), as you can see the email and password get entered in the same input:

![screen shot 2015-03-22 at 11 49 50 pm](https://cloud.githubusercontent.com/assets/4656726/6773885/d36c2de8-d0ed-11e4-82c9-a121ef1972af.png)
",dtothefp,reinpk
120,2015-03-23 14:32:53,"@reinpk I've actually pinpointed the problem to this PR https://github.com/segmentio/nightmare/pull/100/files that switches the `type` action to implement the `sendEvent` Phantom method. I'm not sure if this is a problem with `phantomjs-node`'s implementation of `sendEvent` or a problem in PhantomJS itself, but for now would you consider reverting as it doesn't seem worthwhile to have such a small change potentially effecting users?

When I get some time later in the week I can put together some tests to pinpoint the problem more acuratelly and determine if I should submit an issue with `phantomjs-node` or PhantomJS

@rosslavery If you are still having this problem revert the `exports.type` method



You can pull this from my github if you'd like


",dtothefp,reinpk
120,2015-05-27 14:51:29,"@reinpk do I need to contribute something to revert this change, or would you like to do it? I'm tired of pulling from a fork of Nightmare just because of this small issue
",dtothefp,reinpk
120,2015-06-26 18:00:43,"@reinpk addressed it here https://github.com/segmentio/nightmare/pull/195. Sorry ended up having a bit of a ""gitmare"" and screwed up a couple PR's which I had to close. Would be great to get this merged as soon as you have a change.
",dtothefp,reinpk
117,2014-11-26 19:47:46,"Hi @lambtron,

I think we don't need to make another testing library (casperjs'one was a mistake from his creator opinion) but maybe we can work on how to ease the use of major testing libraries (mocha/chai/jasmine/jest) with nigthmarejs.

Then specials plugins/helpers dedicated to use cases like REST consuming/testing can be developped (and I will give a hand).

Like you, I don't want a big API but many useful middlewares: if nightmare offer same features as casperjs I think we wont release after the 1.1.x anymore /c @n1k0

What do you think ?
",mickaelandrieu,lambtron
114,2015-10-09 15:11:32,"Thanks @reinpk :+1: 
",brunowego,reinpk
109,2014-12-10 05:51:52,"@reinpk @sperand-io ?
",kytwb,reinpk
109,2014-12-10 05:51:52,"@reinpk @sperand-io ?
",kytwb,sperand-io
107,2014-11-10 11:08:08,"Hey! 

I needed this too, so I just forked it and built it. I'm planning to create pull request but am still figuring out how to test the `clipRect` method in my spare time. 

If you want to build it yourself, @reinpk, you may find this helpful: https://github.com/bahlo/nightmare/compare/zoom-factor
",bahlo,reinpk
107,2014-11-11 09:41:56,"@johntitus The thing is, that we may need to crop again after zooming. So we'd need at least an own option (maybe both?)

As I said, my fork is almost done. I just need to test the `clipRect` method.
",bahlo,johntitus
104,2014-11-10 00:18:17,"Thanks @reinpk.  You da boss! :thumbsup:
",gwintrob,reinpk
104,2014-11-11 06:44:40,"fixed that test is passing now :) thanks @pdelanauze shipped with nightmare@1.6.5
",reinpk,pdelanauze
102,2014-11-15 22:37:28,"@reinpk sorry for the delay.  Here is an example repo.  It actually doesn't demonstrate this behavior because something you have merged in recently has fixed the problem:

https://github.com/dtothefp/nightmare-timeout-test-example/tree/master

If you switch to an older version of Nightmare you will see the behavior I'm talking about:

If you previously ran `npm i` be sure to 



https://github.com/dtothefp/nightmare-timeout-test-example/tree/dfoxpowell/nightmare-v1.6.0

This is also referenced here:
https://github.com/segmentio/nightmare/issues/120
",dtothefp,reinpk
101,2014-11-05 01:18:41,"@kevva you know what the problem is, when I installed Nightmare, my version of node-phantom was 0.6.6.  Therefore, that line with path isn't in my version, must be a new update.  Think it has to do with Nightmare's package.json having a tilde instead of a carrot, so if we want this PR to work for all users either we should send a PR fixing the package.json or merge this PR http://stackoverflow.com/questions/22343224/difference-between-tilde-and-caret-in-package-json

![screen shot 2014-11-04 at 8 17 14 pm](https://cloud.githubusercontent.com/assets/4656726/4911150/677c2fdc-6489-11e4-9d1b-60aa56fa4929.png)
",dtothefp,kevva
99,2014-11-11 17:01:18,"@reinpk I don't think that wikipedia has transparent or `visibility: hidden;` elements on the page, so I'm not sure how to test these cases. Also, yahoo supports i18n, so when I go to yahoo from Canada I get 'Yahoo Canada' in the title, and because of that some tests fail. 
It would be nice to have less 'real-world' testing environment. Some local page would work. It would also speed up testing (it takes forever with my current internet connection).
",Hermanya,reinpk
76,2014-10-22 14:39:54,"@fbm-static that wouldn't be a good abstraction though, that just reveals all the underlying complexity

@johntitus that sounds reasonable, updated with both of those added
",reinpk,johntitus
62,2014-10-22 04:31:29,"@reinpk what exactly do you want to happen. I think they look better that way.
",fbm-static,reinpk
62,2014-10-22 06:09:06,"@reinpk options and arguments have different purposes. Each arguments element must be passed as string to the phantomjs, but options - as whole object. 
",execmd,reinpk
55,2014-10-15 18:28:42,"@johntitus thanks for clearing that up. That's what I thought. I copied that from the example, and I couldn't figure out why ""page"" is being passed into that first function.
",lumberj,johntitus
54,2014-10-20 06:02:22,"thanks @securingsincity and @fearphage 
",reinpk,securingsincity
50,2014-10-22 05:53:35,"`phantom-node` seems only offer `phantom.addCookie: (name, value, domain, cb=->)` , not `page.addCookie`
1. maybe had to modify `index.js` to set `this.ph=instance`
2. `self.ph.addCookie('test', 'testValue', cookies[0].domain, callback)` seems need `async` to iterator

so wait for @reinpk  ~
",atian25,reinpk
47,2014-10-14 16:57:13,"@johntitus if I run `make test` at the directory-- I get a response from my GNU make:
`make: *** No rule to make target 'test'.  Stop.`
I believe I need a Makefile, but again: what command should it run?
",bfagundez,johntitus
42,2014-10-15 06:07:27,"@reinpk What's the outlook on supporting PhantomJS 2.0.0?  Do you have any idea how much effort would be involved, and how much the Phantom devs have actually been changing the interfaces?  1.9.7 does a pretty terrible job of rendering interactive D3.js, and my attempts at bridging the gap in my app between what D3 wants and what 1.9.7 supports haven't worked out so far.  So far interactive D3.js looks great in PhantomJS 2.0.0.
",bprodoehl,reinpk
34,2014-10-13 01:00:54,"this is looking sweet other than a few nits. could you rebase and squash the commits as well? thanks @johntitus!
",reinpk,johntitus
34,2014-10-15 07:21:15,"thanks @johntitus!
",reinpk,johntitus
15,2014-05-11 00:46:44,"thanks @queckezz! good idea here, going to eliminate the `done` parameter and just internalize that into the `.use()` method.
",reinpk,queckezz
4,2014-04-07 16:44:14,"thanks @queckezz! just noticed that while i made the changes yesterday i forgot to push (also added `.agent()`) i'll close now that i've pushed/published.
",reinpk,queckezz
1044,2017-03-14 19:56:16,"So, I know why it actually doesn't fire one after the other but I can't find how to make it work this way :L
 
I would like to: 
- get data from the page (evaluate)
- do some calculations (with external node libs)
- act on the the scroll for ex (window.scrollTo()) // I know this feature exists, just an example

I've seen many examples from @rosshinkley, read the source code and also read a lot of issues but I'm still missing something.



And the call :



The behavior with the code above is the following:
- go to duckduckgo.com
- wait 2000ms
- fire the first test()
- display scrollHeight
- fire the second test()
- display scrollHeight
- display ""It worked. Maybe"" fomr the then()

If you're able to take a little bit of time to give me some clues, it would be amazing ;)",gahabeen,rosshinkley
1044,2017-03-16 16:45:59,"Ok so, after some long hours of frustration and a couple of days, I just needed a couple of words from @rosshinkley to see what was wrong with my code.

Let me explain how to extend Nightmare's features using co generator and even directly through Nightmare.prototypes.

Standard way, using **nighmare.action(actionName, fn [, fn])**


Seems pretty neat and simple and it is - when you finally get out it works. As Nightmare is then-abled, it simply needs to get returned the **co promise**. And to specify that your action is done, simply call **done()** (and remember to add it to your arguments, at the end).

Now, if you're like me and want to extend Nightmare by inheritance, you might want to includes new methods right into the class. To do so, it's actually pretty similar than previously. We actually do manually what the **Nightmare.action()** method does => queue our action when called.



To do so, I simply **created an action() function** inside my method with the script and then add it to the queue and **return Nightmare** via **this**.

Oh well, this looks so easy once you get it :2

Hope this helps you!",gahabeen,rosshinkley
964,2017-01-20 20:04:32,"This is (kind of) by design - using `highlightRect` as opposed to touching the DOM directly solves a _lot_ more problems than it creates (see #927 and the issues referenced there).

I wonder if the `HIGHLIGHT_STYLE` could be determined at runtime to mimic the top left pixel, or if this is a case where the highlighted pixel isn't fully rendered at screenshot time?  Might be worth some experimentation.

/cc @Mr0grog, as he is way closer to this than I am, and might have more ideas.",rosshinkley,Mr0grog
955,2017-01-12 05:28:51,"In a recent Nightmare script, I was consistently getting timeouts occurring and wound up writing #945 to resolve timeouts not cleaning up after themselves properly. This issue is mostly for @Mr0grog so they can debug issues on triggering frames in the said script. I made a minimal example here:

https://gist.github.com/twolfson/b666177b87ae339f3ab2183c2be77690

Things I noticed:

- Removing the `wait(100)` will cause it to start passing
- Removing 1 screenshot call will cause it to start passing
- Moving from `getbootstrap.com` to `google.com` will cause it to start passing

Best of luck on your debugging!

/cc @Mr0grog ",twolfson,Mr0grog
945,2017-01-09 10:26:16,Thanks for the feedback @Mr0grog =) I left :+1: on comments I will definitely take care of and feedback on other ones for longer discussions. I'm going to wait until repo owners leave comments until I take care of the :+1:'d comments though (saves me time with less context switching),twolfson,Mr0grog
945,2017-01-10 01:28:16,"@Mr0grog On a tangent, did we ever explore using `requestAnimationFrame` instead of trying to force a DOM redraw?",twolfson,Mr0grog
945,2017-01-10 01:30:40,"> @Mr0grog On a tangent, did we ever explore using requestAnimationFrame instead of trying to force a DOM redraw?

Yes. It turned out not to trigger anything—it only schedules things for the next time a frame is prepared (before drawing).",Mr0grog,Mr0grog
945,2017-03-23 16:57:10,"@cscanlin I don’t think anybody who has commented here has any commit rights, so I dunno. It doesn’t seem like there should be any roadblocks here and I would *think* this should be high priority since it’s really easy to trigger it and hang Nightmare.

_Paging @rosshinkley…_",Mr0grog,rosshinkley
944,2017-01-06 04:48:06,"@anthnyprschka the return of document.querySelector and document.querySelectorAll are not serializable.

You have to do seomthing like


recommended for closing @rosshinkley ",jekku,rosshinkley
937,2016-12-29 09:59:02,"Understood. In the CI containers, I think they install Xfce / X server - something that has display capabilities. Try installing them to the shell OS and then run the nightmare script. This is called 'headless running'

You can also check:

https://github.com/segmentio/nightmare/issues/224

I suggest this issue to be closed @rosshinkley ",jekku,rosshinkley
922,2016-12-19 11:15:11,"I will try with `DEBUG=nightmare*,electron*`.
I already tried setting a random partition name for each instance (following @Mr0grog advice here : https://github.com/segmentio/nightmare/issues/493#issuecomment-265684086)
But it doesn't change anything. 
I come back to you by the end of the week ! Thanks @rosshinkley 
",GautierT,Mr0grog
902,2016-12-07 08:08:09,@reinpk @rosshinkley the failing test comes from a different feature.,jekku,rosshinkley
865,2017-01-02 17:37:00,"Yeah I fixed whole merging ;)

On Mon, Jan 2, 2017 at 2:25 AM Rico Sta. Cruz <notifications@github.com>
wrote:

> *@rstacruz* commented on this pull request.
>
>
>
>
> ------------------------------
>
>
>
>
> In Readme.md
> <https://github.com/segmentio/nightmare/pull/865#pullrequestreview-14833628>
> :
>
>
> > @@ -30,16 +30,13 @@ Many thanks to [@matthewmueller](https://github.com/matthewmueller) and [@rosshi
>
>  Let's search on Yahoo:
>
>
>
> oops, haha, this needs to change too
>
>
>
>
> ------------------------------
>
>
>
>
> In Readme.md
> <https://github.com/segmentio/nightmare/pull/865#pullrequestreview-14833628>
> :
>
>
> > @@ -30,16 +30,13 @@ Many thanks to [@matthewmueller](https://github.com/matthewmueller) and [@rosshi
>
>  Let's search on Yahoo:
>
>
>
> but i think someone already edited that
>
>
>
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/segmentio/nightmare/pull/865#pullrequestreview-14833628>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAoMcSpFOqLKtAFCKH5favWMdstoVwpqks5rONC1gaJpZM4Kmveu>
> .
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
>
",reinpk,matthewmueller
844,2016-10-21 13:17:10,"@rosshinkley please how to run nightmare by pm2 or something like that on the server because nightmare use the electron and electron need graphic now i'm using `xvfb-run npm start` but this sol° needs that i stay connected by ssh to the server have you any suggest?
",neutron92,rosshinkley
815,2016-10-14 14:41:57,"@rosshinkley what's the state of this PR? 

Do you plan to merge it or you are afraid it will be breaking change?
",ligaz,rosshinkley
784,2017-02-10 03:50:30,"For what it's worth, you could also capture it from preload using something like (from @nickstanish):

",rosshinkley,nickstanish
783,2016-09-07 08:08:31,"Hello @reinpk ,
I am the member of [cdnjs](https://github.com/cdnjs/cdnjs) project.
We want to host this library.
But there is a question want to ask.
I want to confirm which file is needed to be grab.
I think the main file is `lib/nightmare.js` on [npm](https://www.npmjs.com/package/nightmare).
And are there any other dependency file also needed under `lib/` on npm?
Please help me confirm that.
Thanks for your help!

https://github.com/cdnjs/cdnjs/issues/8570
",kennynaoh,reinpk
780,2016-09-13 17:20:10,"Hi @rosshinkley,

Can you help me on this? I'm receiving the method `cssLookup` is not defined and I'm pretty sure I'm missing something obvious. An outside eye could help me a  lot.
",gjmveloso,rosshinkley
747,2016-08-03 00:42:53,"@rosshinkley Whatever you did in https://github.com/segmentio/nightmare/pull/653/commits/03f43fc0b63640d1d05f46434545fcb82c9b2c6a seems to have stopped working for Node 6 :(
(must be that libnotify no longer depends on Node 6?)

Would it be better to `nvm install` in the `pre` scripts?
",Mr0grog,rosshinkley
737,2016-07-29 01:28:19,"Thanks @johnferro. An internal chain of steps worked, but it doesn't seem right (`wait` won't be queued etc):



Hopefully @rosshinkley or someone with a better understanding of Nightmare can confirm the validity and object disposal.
",voidmonk,rosshinkley
729,2016-07-18 12:19:54,"Hi there! Apologies if this is the wrong place to put this, wasn't sure whether to do so here (due to the README) or segmentio/nightmarejs.org (where the site code lives).

I use Nightmare lots and it's the first thing I recommend to journalists wanting a resilient tool for scraping poorly-built websites. That said, the documentation tends to throw people — the syntax on nightmarejs.org uses generators while the README is functional. Regardless, it's honestly one of the best browser automation tools out there at the moment and I feel it could achieve a wider audience if the documentation was improved a bit.

Any chance you'd be interested in me helping to improve the documentation website? I'd add a bunch more examples covering a wider selection of use cases, allow the examples to be displayed using callbacks, generator, or await/async syntax and pull the doc comments into an online documentation viewer (or, in cases where the README is more detailed than the doc comments, open PRs migrating those into the codebase). I'd also try to migrate in some of @rosshinkley's excellent examples/documentation (which I just noticed and is somewhat buried in the README). I'm anticipating a 2-3 month timeline for such a project.

Thanks!
",aendrew,rosshinkley
729,2017-03-17 11:07:09,"or at least put the link for the @rosshinkley's examples into the official readme: 
https://github.com/rosshinkley/nightmare-examples

it would have saved me few headaches :)",vagnerj,rosshinkley
650,2016-05-20 01:16:05,"@Mr0grog @rosshinkley,

Thanks for encouraging me to contribute.  I hope I got it right this time.  I closed #643 and created this one based on the latest.

Let me know if I did it wrong or if you have questions.
Olivier
",oliviervaillancourt,rosshinkley
650,2016-05-20 01:16:05,"@Mr0grog @rosshinkley,

Thanks for encouraging me to contribute.  I hope I got it right this time.  I closed #643 and created this one based on the latest.

Let me know if I did it wrong or if you have questions.
Olivier
",oliviervaillancourt,Mr0grog
650,2016-05-20 15:28:18,"@oliviervaillancourt Part one looks great, thanks for fixing that.  Part two I'd _probably_ leave as simply `example.js`.  The example is in the root of the project directory and is (I think) fairly obvious which example we're referring to.  The only remaining thing I can think of is possibly changing the README to say `example.js` instead of `yahoo.js` under the Examples heading on line 55 (which isn't your fault, I think it's been that way for quite a while).

@Mr0grog Thoughts?
",rosshinkley,Mr0grog
645,2016-05-18 16:40:15,"Fixes #642.

Ultimately, I think it would be better to reject with an instance of `TypeError` (with the same message), but that requires properly serializing and deserializing errors over IPC, which is a non-trivial task (would love to hear your thoughts on this, @rosshinkley). I wanted to get the immediate problem solved first.
",Mr0grog,rosshinkley
641,2016-05-18 13:09:52,"Ping @Mr0grog 😃 
",albinekb,Mr0grog
640,2016-05-17 00:12:44,"This helps to alleviate the problems noted in #612 (and hinted at in other issues as well), but does not solve the core problem (deadlocking on a disk cache shared between Electron processes).

This turned out to require a much bigger change than one might expect—Nightmare checks whether the window is ready to receive actions (i.e. whether it is loading) between every action, but since we can now be in a state where we are ok to continue but loading is still going on, we have to track for ourselves whether is OK to perform the next action instead of simply asking Electron whether resources are loading. This is accomplished by way of a method named `isReady()` that returns a boolean and `setIsReady(newValue)` that takes a boolean and fires an event on the `BrowserWindow` instance called `did-change-is-ready`.

The actual timeout value can be customized at construction time (via an option called `gotoTimeout`, analagous to `waitTimeout`) and at method time with a third argument `goto(url, headers, timeout)`.

@rosshinkley I’m not 100% providing _both_ those methods for overriding is best—maybe it should just follow the example of `wait` and only support the constructor option?

I also wonder if, based on this, certain actions should be exempted from the `continue` check (e.g. `goto`, `viewport`, `wait(number)`), since it’s not really relevant for everything. I think that’s definitely out of scope for this PR, though.
",Mr0grog,rosshinkley
632,2016-06-07 09:45:28,"ping @rosshinkley @matthewmueller 
",albinekb,matthewmueller
622,2016-05-05 18:43:03,"Arising from a conversation over #595, there should be a better test beyond mere construction for `switches`.  One possibility that @Mr0grog suggested is a test-only plugin that hooks into the Electron machinery to ensure the switches are set.
",rosshinkley,Mr0grog
612,2016-05-11 00:24:43,"More diggin’: I believe the issue is related to caching/sessions/user data:
- I occasionally get the exact same crash in Chromium’s disk cache backend creating an entry when running this (specifically, in `disk_cache::BackendImpl::CreateEntryImpl`) and
- The hanging requests appear to be exclusively requests Chromium is attempting to serve from cache. 

Treehouse happens to use ETags and set relatively long expire headers, which may be causing/exacerbating the issue.

I’m going to guess (based on very little data) that this is probably a result of so many separate Electron processes using the same persistent (disk-based) session by virtue of their sessions having the same name (the default session) and sharing the same user data directory. @inversion suspected something along these lines quite a while back, too: https://github.com/segmentio/nightmare/issues/238#issuecomment-155024950 So:
1. I still think the above approach (timeout, succeed w/ DOM ready) is a good practice regardless and it will alleviate the symptoms of this issue, so I will see about writing a PR for it.
2. Eventually moving to a 1 electron process, N browser windows model will probably alleviate this.
3. Other methods for “fixing” the problem include randomizing the partition name (or keeping it in memory) or randomizing the user data directory (only do those if they aren’t explicitly specified by the user).

I’m a little hesitant on (3) since it changes caching drastically and I don’t really have _hard_ evidence of the problem. _If_ we did some version of it, I think I’d go for in-memory partitions unless the user specifies a partition name. I think (?) (2) is still probably something we want to do—in which case, I think that’s the best long term solution.
",Mr0grog,inversion
602,2016-04-26 20:49:15,"> xvfb is installed and the newest version

Is it running? _Generally_ you want to start Xvfb as a daemon process. Alternatively, you can `xvfb-run [xvfb args] node your-nightmare-script.js`

Additionally, if you don’t have a system well-configured for running headlessly, there are a bunch of other things you’ll want to ensure are configured and running properly. Check out the scripts in `nightmare/test` or bug @rosshinkley over on Gitter for more—he knows the ins-and-outs of the headless Linux issues much better than I.

Note also, if you are on Node v4+ (which is kind of a requirement now…?) you don’t need the `--harmony` flag anymore. (Though using it doesn’t hurt anything.)
",Mr0grog,rosshinkley
599,2016-04-25 21:41:01,"A quick note on this: getting the versions for Electron/Chromium requires running Electron, so this either needs to be an async call or it will be a potentially slow, blocking call (the first time; we can cache it after that). Any thoughts on which approach is better, @rosshinkley?
",Mr0grog,rosshinkley
596,2016-04-25 14:44:55,"For the double size: this has to do with high-resolution display.  Viewport dimensions are in browser pixels, not device pixels (thanks to @Mr0grog for pointing out the difference).  For more information, read  [the bottom of #498](https://github.com/segmentio/nightmare/issues/498#issuecomment-189156529).

For the proportional scaling, I'm not sure.  It might be symptoms of the same quirk.
",rosshinkley,Mr0grog
589,2016-04-22 17:20:39,"This is one of several issues @fr- noted in #282. It is also important because the registered listener could cause the Nightmare instance to be retained even if there are no other references to it, which means instances can never be garbage collected.

This also removes the uncaught exception listener on the parent process, as mentioned in https://github.com/segmentio/nightmare/issues/586#issuecomment-212681749.

Finally, ensure the instance gets marked as ended even if the child process connection has already died (e.g. it crashed).

Other notes:
- This adds a “private” variable to nightmare instances named `_endNow`. I’d like not to do that, but nightmare already stores several private variables this way and I didn’t want to either totally rearrange the code by bringing `run` inside a closure or introduce a whole new pattern of using `WeakMap` to store references to private data.
- This still installs lots of listeners (the primary issue at hand in #282). It slightly reduces the trouble by cleaning up listeners when an instance is done with, but it’s not perfect. Another approach would be to have a central registry of instances that handles telling each of them to end when relevant process events happen, which would mean we only add one listener per event instead of one per event per instance. If we move to a single electron process model, we’ll probably have to have that central registry to do other things anyway.
",Mr0grog,fr-
586,2016-04-20 17:56:46,"This came up in #558, and I'll quote @Mr0grog:

> So… it would be a very bad idea not to exit the process at this point. Electron’s underlying IPC machinery is now in a bad state, so further communication between the your node.js process and the “browser” is not reliable.

I'm wondering now is if instead of exiting, the Nightmare instance should be put into an error state where any further calls would cause exceptions as the IPC parts are no longer reliable.

All of that being said: uncaught exceptions are bad.  Why not add handling for the exception?
",rosshinkley,Mr0grog
579,2016-04-18 03:23:57,"This addresses one aspect of #493. It should make IPC between the user’s process and the Electron process a) “safe” in that simultaneous calls can’t cause incorrect results and b) simpler. It’s based on discussion with @rosshinkley in issue #493.

The main idea here is that Nightmare’s IPC objects gain two methods, each to be used in opposite processes:
- `ipc.respondTo(name, responder)` Registers a function that can respond to calls from another process. The `name` is a handle by which other processes call it. The responder takes any number of arguments, where the last one is a callback. This callback should be called when the responder’s work is complete. Any arguments will be passed back to the caller in the other process. In addition, the callback has a method named `progress` that can be called to emit `data` events in the other process.
  
  
- `ipc.call(name, [arg, [arg, [...]]], [callback])` Calls a responder with the given `name` in another process. Any arguments between the `name` and `callback` are passed as arguments to the responder. The callback will be called when the responder’s work is finished. In addition, this returns an event emitter than can be used to handle `data` events indicating progress from the responder or a single `end` event, which will be called with the same arguments as and immediately prior to `callback`.
  
  

Under the hood this is accomplished by having three special IPC messages:
- `CALL` indicates that a responder should be called. Sent from the parent, to the child. It has at least 2 arguments:
  1. A unique ID identifying the call. This is used to ensure responses don’t get tied up with other calls to the same responder.
  2. The name of the responder to call
  3. Arguments to pass to the responder.
- `CALL_DATA_{ID}` indicates progress data related to a call is being sent. Sent from the child to the parent. The ID in the name is the unique ID that was sent with the initial call above.
- `CALL_RESULT_{ID}` indicates that this is the final result of the call. Sent from the child to the parent. The ID in the name is the unique ID that was sent with the initial call above.

The above set of messages can be used in either direction, but they are probably only relevant now in terms of calls from the parent to the child. Maybe worth noting: a very similar (but more heavily built out and robust) mechanism is used internally in Electron’s `remote` module. This one is more minimal and light-weight, but sacrifices a lot of nice features that one has (support for circular references, complex types like dates, functions, promises, errors, and placeholder objects instead of string names).
## Notes and open questions
1. This doesn’t convert all calls yet. It just does `evaluate_now` and `useragent` as demo cases. A later commit will have to do the rest.
2. In implementing this, I noticed that we can wind up with multiple IPC objects for a single process. It doesn’t actively cause problems, but depending on the order things are registered in, it could, so I made sure there could only be one IPC instance per process.
3. This implementation differs slightly from the initial proposal in #493—it is intended to be backwards-compatible (so it doesn’t break plugins). I’m not sure if that a virtue or unnecessary, since plugins that can run in the Electron process are pretty new. The method names are also slightly different; I thought these were clearer.
4. The progress capability is neat, but it incurs a lot of additional complexity and I’m not sure how much real value it adds. No existing actions use anything like it. The situations where it would be useful might be just as well handled with more judicious debug messages, error throwing, or simple events. We could easily remove the progress support and add it again later.
   - If we keep it, should be a stream instead of a simple emitter? Like the progress capability itself, its benefits are primarily theoretical and it probably comes with a more complex implementation.
5. This implementation sits atop the existing `ipc.emit()` and `ipc.on()` methods. That means the special `CALL*` messages can be pretty easily observed. I’m not sure that’s a big deal, but we could call the appropriate methods on the `process` instead to make intercepting things harder.
6. My initial implementation relied heavily on the spread operator, which made things much simpler. However, spread isn’t available in Node v4.x without the `--harmony` flag (it’s 👍 in v5.x), so I removed it in favor of lots of `apply()` calls.
   - `--harmony` is still mentioned in the README (only down at the bottom), but not actually required in practice on Node 4+. I think it’s good that it’s not required.
   - In hindsight, a lot of the `apply()` noise (not all) could be avoided by just sending arguments as an array through IPC instead of spreading them into the message arguments.
7. Some action implementations in the Electron process will get more complex (only slightly) because of this. Several actions are fire-and-forget, but in this implementation, they _have_ to call a callback. Because arguments are so dynamic in Nightmare, I can’t think of a good way to detect whether an action (on the Electron side) actually uses the callback. Probably not a big deal, but I just wanted to call it out.
8. You only get to have one responder for a given name. I think that’s reasonable (what would you do with more??), but not sure if it’s worth adding some logging or throw errors if `respondTo` is called with the same `name` more than once.
9. There’s no way to unregister a responder. I’m not sure we need it, but maybe?

I’d love feedback from anybody on this. Ideally this is a safe, backwards-compatible change (see (3) above), but it’s still a major (and deep) API change. We should be more 👍 than ¯\_(ツ)_/¯ in order to accept it.
",Mr0grog,rosshinkley
575,2016-04-15 16:52:24,"This is spawned from discussion on #501. @rosshinkley notes:

> `.run()` is really intended for internal use and usage isn't directly supported. Should it be?
1. `run` is not documented, it’s not the “official” API, and nothing internal ever calls it except `end`, which could just as easily call `then` instead. If `run` isn’t intended for external usage, it should be removed (or at least deprecated by logging warnings to the console when called until v3 is released).
2. On the other hand, even though it’s not documented, “official,” or public, I get the impression that it _is_ widely used. It comes up in issues a lot. Does that mean it should _become_ documented and official?

I can see a lot of value in simply canonizing a thing lots of people seem to be using. That said I personally like a smaller API surface, so I think I lean towards deprecating `run`. In the end, though, I’m not sure I have a real horse in the race here. I’d love to hear others’ thoughts.
",Mr0grog,rosshinkley
564,2016-05-20 09:03:15,"Hi @misbach. Not yet, no, but in my other issue (#612) @rosshinkley and @Mr0grog seemed to be onto something and there is a pull request (#640) that might solve this.
",JWMarchant,Mr0grog
554,2016-04-11 14:44:51,"I'm not a committer, so that's above my pay grade. @matthewmueller’s your man (or maybe @rosshinkley; it seems like he might have the commit bit now and is much more active).
",Mr0grog,matthewmueller
554,2016-04-11 14:44:51,"I'm not a committer, so that's above my pay grade. @matthewmueller’s your man (or maybe @rosshinkley; it seems like he might have the commit bit now and is much more active).
",Mr0grog,rosshinkley
544,2016-03-24 23:36:36,"- [ ] @reinpk 
- [ ] @matthewmueller
- [ ] @rosshinkley 

This works very similar to the screenshot or pdf actions, except it saves the page as html to disk. Its a pretty straight forward pass through to the corresponding electron api.
",justinmchase,reinpk
544,2016-03-24 23:36:36,"- [ ] @reinpk 
- [ ] @matthewmueller
- [ ] @rosshinkley 

This works very similar to the screenshot or pdf actions, except it saves the page as html to disk. Its a pretty straight forward pass through to the corresponding electron api.
",justinmchase,matthewmueller
544,2016-03-24 23:36:36,"- [ ] @reinpk 
- [ ] @matthewmueller
- [ ] @rosshinkley 

This works very similar to the screenshot or pdf actions, except it saves the page as html to disk. Its a pretty straight forward pass through to the corresponding electron api.
",justinmchase,rosshinkley
527,2016-03-03 03:28:38,"In attempting to explain the behavior of `run` and `then` for #516, I realized the details of how Nightmare’s `then` method works means you can’t just say “works like `promise.then`.” The difference is minor and the likelihood of it tripping someone up is probably low, but it could still happen, especially given the promise-y expectations the method’s name sets up. Since `then` is now the preferred API, it should really be documented and, in doing so, the details of `then` should be made clear.

In the spirit of @rosshinkley’s comments on #491:

> I am certain it's going to come up in questions again and I wanted to have a reference to point at.

It might be helpful to understand _why_ Nightmare’s `then` method does not behave in accordance with a promise’s `then` (or any Promises/A+ compliant thenable) in order to better document it.

Specifically, _if an error occurs in the success callback that is passed as the first argument to `then` (or if that callback returns a promise that rejects), the error callback passed as the second argument to `then` will handle it instead of it bubbling up the promise chain._

Is this difference intentional? If so, what was the intent behind that decision? What was it meant to enable or prevent, if anything? If not, is this a bug to be fixed?
",Mr0grog,rosshinkley
527,2016-03-05 07:53:47,"> Looking over my original notes and sandbox, I'm not entirely sure how I got to the ""eats exceptions"" conclusion.

I’m betting that might be at least partially my fault; I think I said something to that effect in my description on #516. _In fact,_ that is exactly what I thought was happening at the time, before I sat down to really think about it when writing this very issue. The original title was “difference**s** between…” before I realized that wasn’t actually happening :P

> Is there something I'm not thinking of? More to the point, would there be a reason for Nightmare's .then() not to behave like Promise's .then()?

Not that I can think of; that’s why I raised the issue! Hopefully @matthewmueller will fill us in at some point.

> I'd prefer to err on the side of compliance over not. Thoughts?

I would generally agree. But since @matthewmueller didn’t write any docs and didn’t invite any discussion or review of the feature, I didn’t want to make an assumption about whether the non-compliant behavior was intended or just a bug. So I asked by way of this issue :)
",Mr0grog,matthewmueller
527,2016-04-18 05:04:37,"> > I'd prefer to err on the side of compliance over not. Thoughts?
> 
> I would generally agree. But since @matthewmueller didn’t write any docs and didn’t invite any discussion or review of the feature, I didn’t want to make an assumption about whether the non-compliant behavior was intended or just a bug.

Since this has sat for more than a month with no feedback from @matthewmueller , I’m going to go ahead and just transform it from a question to a statement and call it a bug:

`then()` **should** act like Promises/A+ `then()` and ES6 Promise `then()`. The second argument should not be called because of an exception while running the first argument.

If that’s cool with you, @rosshinkley. The implications are minor and, I think, an improvement.
",Mr0grog,matthewmueller
524,2016-03-01 20:08:50,"Fixes #523 (if #476 is also included).

I'm not _real_ clear on why the injection was done twice to begin with, and perhaps @reinpk could shed some light on that?

On top of fixing that, I went through every version of jQuery core to determine which work with `.inject()` and which don't.  This may help address #323.  The following versions of jQuery _are not_ injectable with Nightmare (most throw syntax errors):
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.1.1
- 1.1.2
- 1.1.3
- 1.11.0 beta 1 min
- 1.9.0 min
- 2.1.0 beta 1 min

Other versions seem to work with basic queries.
",rosshinkley,reinpk
495,2016-02-19 07:53:46,"I added the [`webRequest` API](https://github.com/atom/electron/blob/master/docs/api/session.md#seswebrequest) feature which is related to #461.

Please consider the way of working except name of api.

Still, I prefer to make this as a plugin like the way of @rosshinkley [made](https://github.com/rosshinkley/nightmare-load-filter).
",kyungw00k,rosshinkley
491,2016-02-17 14:59:34,"Fixes #490, addresses @Mr0grog's comments from #482.  Also removes `vo` from the CNN example based on [@matthewmueller's comment](https://github.com/segmentio/nightmare/pull/482#issuecomment-184525044).

That being said: why the move to excise `vo`?  Is it to remove the external dependency?  I still think showing an example of using `vo` or `co` with `yield` is helpful.  Thoughts?
",rosshinkley,matthewmueller
491,2016-02-17 14:59:34,"Fixes #490, addresses @Mr0grog's comments from #482.  Also removes `vo` from the CNN example based on [@matthewmueller's comment](https://github.com/segmentio/nightmare/pull/482#issuecomment-184525044).

That being said: why the move to excise `vo`?  Is it to remove the external dependency?  I still think showing an example of using `vo` or `co` with `yield` is helpful.  Thoughts?
",rosshinkley,Mr0grog
491,2016-02-17 17:45:51,"Thanks! Wasn't sure if any maintainers (is that just @matthewmueller?) were going to do anything about that since nobody replied on that thread.

My 2¢: I think it's good to have the main examples rely on as few third-party libraries (like vo) as possible—there's a surpising amount of friction added to getting started when you have to learn a second tool in order to learn the once you want to use. (Of course I'm biased: I'm not really using vo in my own work w/ Nightmare.)

That said, libraries like vo are great tools that make the async nature of this stuff a little easier in some cases. Those who don't know about them might never find out if not for the examples. I think it would be great to have a section that talks about how Nightmare pairs well with and gives examples of:
- ES-next `async/await` (maybe with a note about how to set it up with Babel?)
- Tools for generators: vo, co, Bluebird's `Promise.coroutine()`, etc.
- Mocha-generators, Jasmine-co, etc. (for testing)
",Mr0grog,matthewmueller
491,2016-02-17 23:59:25,"@rosshinkley Oh, no, you didn't zap any of my efforts at all; no worries! I held off on making any changes in that area since it sounded like @matthewmueller was making a bunch ideological changes that aren't written down anywhere, so I figured I'd wait to hear back or see what he did before _I_ tried to actually do anything more.

> Recommending using .then(), though? Always? That makes me ... uncomfortable. It's hard for me to articulate why outside of aesthetic reasons.

Well… we could focus on `run` or `end` instead. Then you have the ""callback API"" and the ""promise API."" To be honest, though, I'm not sure I have the same aesthetic concerns with `then`—I kind of like it ;)

The biggest thing I'm concerned with about moving away from generator-based examples is that several things are buggy in Nightmare if you ask it to handle multiple queues at once—and that's easy/inviting to do if you focus on the run/end/then API. See, for example, #465. On the other hand, I'd bet those issues exist because early authors focused on using generators and so rarely tripped over bugs that happen when multiple operations are going on simultaneously. But all that is a big discussion that is somewhat separate from how things are documented! So I'll shut up on that for now.

> I think adding examples for common usecases and popular libraries would be wildly helpful - something along the lines of Including an examples directory with documentation for each example.

Ooh, definitely! I think the documentation, in general, could be vastly improved. Several of the issues and questions in #472 are ones I ran into when I first started looking at Nightmare, too (I also think it would be great if all methods returned a promise or thunk—there's no reason a nightmare instance can't actually be one of those things, but that's _way_ out of scope here).

_[Rant warning:]_ Anyway, I'd _would_ love to volunteer to help with that, but… I'm personally a bit wary of diving into major changes to docs (or other changes of similar scope). There's no documentation here relating to direction or process for the project. I'm not sure whether there are people at Segment (or outside it) who are acting as maintainers other than @matthewmueller. And when he makes a sudden change in project direction and only announces that change in a comment on a random issue/PR, as happened in #482, or makes surprising API changes with nary a PR or even a comment in an issue (like making `then` act more like a promise after much discussion against or not very in favor of it in #256), or even when issues and PRs can sit for months (e.g. #222) with no maintainer feedback at all (even just a ""no thanks""), I don't have much confidence that big contributions will be well respected.

That's especially true for docs. It's hard to do a good job with them when you don't know what direction the project is headed. What parts should be focused on? What things should be downplayed because owners/contributors don't feel great about them? What's deprecated and going away? What are the known gotchas? And so on. #482, again, is a great example here: in previous issues, @matthewmueller talks about `then()` as a private API, only there to make vo behave properly. Now, with no other discussion in between, it's suddenly the primary front-and-center way to use Nightmare.

Anyway, I know you weren't necessarily asking for my help and sorry for the sudden rant there. I hate to heap on a lot of criticism when I've only been observing the goings-on here for a couple weeks. I hope there's not a mailing list or something I'm totally missing out on. It felt like it needed to be said somewhere, though.
",Mr0grog,matthewmueller
468,2016-02-09 18:05:44,"In trying to use Nightmare for doing some screen captures of highly dynamic web pages, I've discovered that the screenshots are often out-of-sync with the state of the web page being captured. After a lot of investigation, it turns out that this is actually an underlying issue in Electron—it generates a screenshot by simply copying from Chrome's backing store, which is not actually guaranteed to be up-to-date (see [Electron issue 1049](https://github.com/atom/electron/issues/1049) and [this Chromium-dev discussion](https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/o2aUtFAIlyQ)).

I believe this is probably the underlying issue behind a few other nightmare bugs, such as: https://github.com/segmentio/nightmare/issues/33, https://github.com/segmentio/nightmare/issues/129, the long wait @rosshinkley suggests adding in his solution to https://github.com/segmentio/nightmare/issues/328

But! It turns out there is a way to address this. In Electron's `BrowserWindow.webContents`, you can call `beginFrameSubscription(callback)`, which seems (in my testing) to guarantee that the backing store is up-to-date when your callback is called. So if you changed [line 252 of `lib/runner.js`](https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L252) to:



You ought to have a much more deterministic result when calling `.screenshot()`.

Unfortunately, I don't have a great reduced test case for this, but I'm more than happy to submit a patch if desired.
",Mr0grog,rosshinkley
464,2016-02-05 16:46:33,"This pull is like #84 
I creating another pull request because i deleted the oldest one(don't ask me why please).
Past the response from @reinpk 

""thanks @Max93! sorry i never got to this with v1... it looks like an interesting abstraction for other events... what events were you interested in? closing for now but may bring the idea into v2 with more info here. thanks!""

Thanks again @reinpk 
",Max93,reinpk
425,2016-01-18 22:57:23,"@matthewmueller I went ahead and added the debug, and also went ahead and merged in the recent changes.  Special thanks to @emars for fixing the build, something I just hadn't had time to do. :)
",rosshinkley,emars
375,2016-04-16 17:49:26,"@Mr0grog set me straight: it does have to do with iframes and timing.  Quote:

> If you call WebContents’s executeJavaScript() method after the main frame finishes loading, but while a subframe is loading, the JS will never get executed and the call will never complete (unless you navigate the main frame to some new page).

See electron/electron#5183 for details.
",rosshinkley,Mr0grog
374,2015-12-07 18:15:12,"This takes care of @yoz's question from PR #365 regarding `confirm` and `prompt`: by default, they will both emit their respective events and throw an exception.  This prevents unwanted behavior on the page (eg, by prompt/confirm returning default values), as well as prevents Nightmare from hanging on modal dialogs.

This also is a partial answer to my question #366.  Rather than overriding the Nightmare preload, the internal preload script can now be added to with the same `options['web-preferences'].preload` option.  This allows for overriding the above exception behavior if it is not desirable, as well as opens up user-defined preload actions should they be needed.

Thoughts?
",rosshinkley,yoz
374,2015-12-09 18:55:56,"@matthewmueller Ah, yeah, grouping them makes a lot of sense.  I'll pull that together as time permits.

As for overwriting the preload: the template-generated preload would be overwritten every time.  The template is internal to Nightmare.  As such, the internal changes to preload should be picked up if any are made.  Ultimately, what I am reaching for is the default exception behavior for prompt and confirm may be (probably is?) undesirable, and there should be a way to override it.  Maybe I'm not following what you're asking?

As for specific use cases: the only one I know of offhand is what @yoz ran into with `alert` - if you have a prompt or confirm an event that fires _before_ an `inject`/`evaluate` can run.  This gets back to overriding the default exception behavior - I'd imagine you'd want to overwrite it to handle dialogs with valid responses.  Does this make sense?
",rosshinkley,yoz
366,2015-12-04 16:53:36,"@yoz asked a good question about overriding preload functionality in #359, and as an extension, I have a question of my own: Is there a use case for adding custom parts inside of Nightmare's preload?

Preload could be a template, but I think this would require writing the compiled preload script to disk (Electron expects a file path for preload, at least in my read of the documentation).  Electron exposes the default paths for user data, and changes made in #338 allows for custom paths.  Both could be used to determine a place to save the compiled preload.

Thoughts?

_Edit:_ Bah, a second look at the mentioned PR and at Electron's documentation, I saw `.getPath(name)` almost right away.  Edited commentary.
",rosshinkley,yoz
365,2015-12-04 02:10:19,"Sets up the `page-alert` event for alerts, preventing alerts from blocking the process.  Should fix #359.  Thoughts? /cc @yoz 
",rosshinkley,yoz
363,2016-09-09 20:36:34,"Dear, @rosshinkley just wondering is there any reason for this PR's to still be awaiting merge?

Thanks you! :)
",highvoltag3,rosshinkley
360,2015-12-01 23:15:18,"Adds support for getting and setting cookies. Originally, I wanted to just export `.cookie(...)` (as discussed in #241), but electron has a lot of power to query all the cookies or query for certain cookies on urls. I didn't want to intentionally limit their API. 

I decided to use sub-properties because it's going to get messy if we have a ton of top-level methods, so instead of:



It looks like:



This should allow for more powerful namespacing for things like `sessions`, `cache`, `proxy`, etc.

---

Additionally, while putting this together, I improved error handling. If the main electron process encounters an uncaughtException, it will propagate to the node process instead of popping up an electron window and not cleaning up after itself. It's not full-proof (doesn't work for syntax errors), but those should only happen while hacking on nightmare.

/cc @reinpk 
",matthewmueller,reinpk
358,2015-12-05 10:14:09,"@matthewmueller, I think you can merge this now if you don't have any suggestions.
After making ""path"" parameter optional it became impossible to overload original ""screenshot"" function by checking parameter type as I mentioned in our discussion in #363. So I think this PR is ready to be merged.
",Kreozot,matthewmueller
346,2015-11-18 19:30:11,"For what's worth, I hastily threw together a `rightClick` action on [my fork](https://github.com/rosshinkley/nightmare/blob/rightclick/lib/actions.js#L84-L132).  It _technically_ works, at least in my local sandboxes.  I'm not super-comfortable with issuing a PR, as I'm not sure `contextmenu` is really the correct way for client-side javascript to generate/handle right-click events.

Thoughts? /cc @reinpk 
",rosshinkley,reinpk
345,2015-11-16 00:06:54,"Ping top 3 contributors @reinpk @matthewmueller @johntitus
",alfonsomga,reinpk
345,2015-11-16 00:06:54,"Ping top 3 contributors @reinpk @matthewmueller @johntitus
",alfonsomga,matthewmueller
345,2015-11-16 00:06:54,"Ping top 3 contributors @reinpk @matthewmueller @johntitus
",alfonsomga,johntitus
332,2015-11-20 18:25:25,"The new will-download functionality in Electron is really interesting, in Issue #151 @fritx provided some example of using it.

Adding support for download would be important in Nightmare IMHO it's something missing in most headless browser automation solution.
",darthcloud,fritx
320,2015-10-27 19:11:10,"Wow. This would explain a lot of the inconsistencies.

I _think_ we should be good on the onload stuff since we're injecting JS at the bottom of the page, but can you think of any case where not waiting for the `onload` event could break things?

/cc @reinpk 
",matthewmueller,reinpk
309,2015-11-03 13:30:11,"I've got a feature branch that implements passing options to goto. With this you can add headers to your request. @reinpk if you think this is an appropriate pull request, let me know. Here's the branch: https://github.com/fr-/nightmare/commit/21fb1eb597ad85981333583ec7dc33098ea309e2  
",fr-,reinpk
298,2015-10-20 20:05:53,"personally like having the makefile for `make test`, but it's kind of frivolous for this case anyway. thoughts @reinpk ?
",matthewmueller,reinpk
295,2015-10-19 21:02:26,"You have to wrap it in `co` or `vo`



@reinpk maybe we should change this to avoid confusion
",matthewmueller,reinpk
224,2016-06-06 17:00:44,"This is not a nightmare issue but an electron (chromium really) issue. @rosshinkley maybe this should be closed? 

@hhsadiq I'll try to help you via stackoverflow.

EDITED: for anyone interested in the answer: http://stackoverflow.com/questions/37625327/how-to-run-nightmare-js-on-google-appengine-for-node-js/37663861#37663861
",rickmed,rosshinkley
222,2015-10-06 03:07:45,"@matthewmueller @reinpk is there an issue with the code, anything you want me to change, would be helpful to merge so I don't use my forked version in production.
",pastawoua,reinpk
220,2015-09-14 22:04:39,"![img](https://cldup.com/tabP9ckSa6.png)

^ Update description @reinpk when you have a chance :-D
",matthewmueller,reinpk
218,2015-09-14 00:30:32,"@reinpk While trying to find a way to accomplish https://github.com/segmentio/nightmare/issues/148 even though you closed it here: https://github.com/segmentio/nightmare/issues/148#issuecomment-139900939 I was reading the electron [window-open.md api documentation](https://github.com/atom/electron/blob/master/docs/api/window-open.md) and noticed that it said:

> When window.open is called to create a new window in a web page, **a new instance of BrowserWindow will be created** for the url and a proxy will be returned to window.open to let the page have limited control over it.

and thought this might cause the windows to be shown because I remember reading in [runner.js](https://github.com/segmentio/nightmare/blob/master/lib/runner.js#L33) that you hard code the options.show to false for the main instance of BrowserWindow.

Running the following code causes the spawned window to be shown for the duration of script. I left `nightmare.end();` out to exaggerate the issue.



We should probably hard code the show option within the browser-window function to false so that this doesn't happen.
",bchr02,reinpk
203,2016-08-04 14:18:25,"@RichardJECooke here's the summary.
- The first approach commented here doesn't work anymore with the latest versions. 
- I wrote the PR, it got rejected. 
- @rosshinkley used parts of that PR to create an improved version of the functionality as an external plug-in.

Right now, the best you can do is use @rosshinkley's https://github.com/rosshinkley/nightmare-iframe-manager. Go there and check his documentation. That's what I'm doing.

The Nightmare team (Segmentio) don't like the approach taken in the PR and the plug-in (not even Ross, the plug-in's writer). They dislike it so much that didn't wan to publish it to NPM, you have to install it from GitHub. Feel yourself hyper-warned. No warranties anywhere, use at your own risk, etc.

Given that, for non-mission critical problems (to emphasize the warnings) the plug-in works pretty good.

I use it to extract my credit card transactions in my bank's website.

---

Here's what you would do (excessively detailed):
- Create a directory for your project and enter it:


- Initiate your Node / Nightmare project with npm filling the package data:


- Install Ross's plug-in from the GitHub repo (`npm` does it automatically for you, but you probably need to have `git` installed):


- In your main project file, `require` Nightmare and the plug-in and pass the `Nightmare` object to the plug-in:


- And then you can use it. The plug-in extends Nightmare itself. So you have additional methods in your Nightmare instance. Follow the documentation:
  https://github.com/rosshinkley/nightmare-iframe-manager
",tiangolo,rosshinkley
200,2015-07-26 18:32:12,"we're starting to consider major improvements that could be made in v2 of nightmare. the proposal is to move from phantomjs to electron, and move the api to use generators.
## speed

some of the most vexing issues with nightmare (e.g. #199 and #192) _seem_ to boil down to underlying issues in phantomjs. @matthewmueller has done some experimentation with [atom/electron](https://github.com/atom/electron) and sees 2-3x speed improvements loading and getting the title of the page:

| Site | Phantom | Electron | Speedup |
| --- | --- | --- | --- |
| Google | 2064ms | 866ms | 2.4x |
| Yahoo | 4059ms | 1862ms | 2.2x |
| CNN | 8658ms | 2729ms | 3.2x |
## generators

one of nightmare's original goals was to eliminate the callback hell of raw phantomjs. with [generators](https://strongloop.com/strongblog/how-to-generators-node-js-yield-use-cases/) now on node stable, it makes sense to take the api one step closer to eliminating callbacks using generators. this should also make the execution more linear, understandable and controllable. ideally this is a solution to requests like #177, #176, #160 and #59.



---

if you have other feedback or frustrations at this deeper level, please let us know!
",reinpk,matthewmueller
177,2015-08-17 06:12:42,"thanks @Zirak! sorry for the delay... this pull request and others like it were influential in the work that @matthewmueller put into v2... which uses generators and an explicit `.end()` method. should solve the same problem in a slightly different way. thanks!
",reinpk,matthewmueller
173,2015-04-29 18:34:17,"@reinpk thoughts?  Error handling seems like an important feature that nightmare lacks.
",nylen,reinpk
148,2015-09-14 04:12:17,"@reinpk BrowserWindow.getAllWindows() returns an array of all the BrowserWindow object references. Surely this could be used to incorporate some sort of interaction with newly generated windows.

cc @matthewmueller
",bchr02,matthewmueller
135,2014-12-12 01:50:32,"- add documentation stating that file extension is required in `path`
- add error handling for supported file types:
  http://phantomjs.org/api/webpage/method/render.html

/cc @sperand-io @stevenmiller888 
",lambtron,sperand-io
135,2014-12-12 01:50:32,"- add documentation stating that file extension is required in `path`
- add error handling for supported file types:
  http://phantomjs.org/api/webpage/method/render.html

/cc @sperand-io @stevenmiller888 
",lambtron,stevenmiller888
133,2014-12-07 23:14:02,"lgtm! @reinpk @lambtron @stevenmiller888 
",sperand-io,reinpk
133,2014-12-07 23:14:02,"lgtm! @reinpk @lambtron @stevenmiller888 
",sperand-io,stevenmiller888
133,2014-12-07 23:14:02,"lgtm! @reinpk @lambtron @stevenmiller888 
",sperand-io,lambtron
129,2014-12-03 14:29:04,"Hello @reinpk,

I'm trying a very simple test but the result is not what I've expected.

var Nightmare = require('nightmare');
new Nightmare()
.goto('http://www.mypage.com/login')
.type('input[name=username]', 'myusername')
.type('input[name=password]', 'mypassword')
.click('input.button')
.wait()
.screenshot('test.jpg') 
.run(function(err, Nightmare){
    console.log('Done.');
});

I suppose that the generated screenshot should be of the page after login. Instead I only get the Done message and a screenshot of the login page.
I've tried using wait with selector (div from the landing page after login process) but the result is the same.
Any advice?

Thank you!
",paulsez,reinpk
123,2014-11-25 13:07:09,"Hi, @reinpk:
    I'm using nightmare do integration tests, but I find out it's really slow to do page navigation, especially when there are muliple ""click and wait"" combinations. for example, this codes here failed sometimes for timeout reason on my computer.
   By using casperjs, the same logic spend less than 15 seonds.
   Maybe it's the internal nodule:phantmjs's problem.
   Hope you can solve this problem.
   Thanks for your great work!


",ybak,reinpk
118,2014-11-16 21:50:24,"Total agreement from the folks here at [Segment](http://segment.com). @stevenmiller888 and I are going to dive into this starting this week. 
",sperand-io,stevenmiller888
118,2015-08-17 06:23:54,"fixed a while ago by the indomitable @dominicbarnes 
",reinpk,dominicbarnes
117,2014-11-12 15:20:58,"Hi @reinpk,

I'm part of casperjs team and I look at your project since months.
As you may notice, casperjs project is a little bit inactive... we don't have time to realy maitain it for now.

Imo, casperjs has some cons:
- not realy nodejs supported
- testing api / exporter is so coupled to the main/casper api
- a lot of weird behaviors

casperjs have also some pros:
- the best docs ever (realy, I contribute to a lot of projects including big frameworks like Symfony2, and casperjs has the best docs and a lot of samples)
- easy to use, easy to learn
- fast, realy fast / Selenenium
- fully tested, used by major companies
- (subjective) I like it, because I contribute to

I see that nightmare is actively maintained and I have a lot of ideas to suggest, probably to add fonctionnalities which I have on casper to nightmare.

You said the goal of nightmare is to expose only ""few"" methods, is there any chance that you change your mind on that ?

Regards,
",mickaelandrieu,reinpk
109,2014-11-09 23:00:15,"@reinpk :)
",sperand-io,reinpk
101,2014-11-04 23:01:06,"This PR addresses issue https://github.com/segmentio/nightmare/issues/92 and PR https://github.com/segmentio/nightmare/pull/94.

@kevva @reinpk 

I agree that it would be nice to specify the phantom binary path rather than globally installing Phantom via Homebrew or some other method.  @kevva I tested out your solution and believe I found a problem in that the `path` property in the `options` should actually be `binary`, which corresponds to the same property in the node-phantom module.  

Therefore, you would

`var phantomPath = require('phantomjs').path;`

and instantiate nightmare the same way

`new Nightmare({phantomPath: phantomPath})`

@kevva if I use your solution I will continuously get the ""phantomjs-node: You don't have 'phantomjs' installed"" error message from node-phantom.
",dtothefp,reinpk
101,2014-11-04 23:01:06,"This PR addresses issue https://github.com/segmentio/nightmare/issues/92 and PR https://github.com/segmentio/nightmare/pull/94.

@kevva @reinpk 

I agree that it would be nice to specify the phantom binary path rather than globally installing Phantom via Homebrew or some other method.  @kevva I tested out your solution and believe I found a problem in that the `path` property in the `options` should actually be `binary`, which corresponds to the same property in the node-phantom module.  

Therefore, you would

`var phantomPath = require('phantomjs').path;`

and instantiate nightmare the same way

`new Nightmare({phantomPath: phantomPath})`

@kevva if I use your solution I will continuously get the ""phantomjs-node: You don't have 'phantomjs' installed"" error message from node-phantom.
",dtothefp,kevva
95,2014-11-01 23:51:41,"split out from the other changes in #78, thanks @johntitus
",reinpk,johntitus
92,2014-11-04 23:10:25,"@kevva @reinpk  this doesn't work.  See https://github.com/segmentio/nightmare/pull/101

phantomPath: specify a different custom path to PhantomJS, default not set.
",dtothefp,reinpk
92,2014-11-04 23:10:25,"@kevva @reinpk  this doesn't work.  See https://github.com/segmentio/nightmare/pull/101

phantomPath: specify a different custom path to PhantomJS, default not set.
",dtothefp,kevva
59,2014-11-29 04:06:25,"Seems like a valid use case. @reinpk Thoughts?
",lambtron,reinpk
27,2014-10-05 20:53:08,"cc @lambtron 
",reinpk,lambtron
15,2014-04-20 18:04:24,"I tried to fix https://github.com/segmentio/nightmare/issues/10. Not really sure if this is the right way but it's the simplest I have come up with. Basically we just run each plugin seperate and call the next function in the main queue when the given plugin is done.



Would love to hear what you think and if it makes sense to `.run()` each plugin. @reinpk
",queckezz,reinpk
